#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[18];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_M1_Detail_Combustion_snp_0_Texture2D_10;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_M1_Detail_Combustion_snp_0_Texture2D_12;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_M1_Detail_Combustion_snp_0_Texture2D_13;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_M1_Detail_Combustion_snp_0_Texture2D_20;
layout(set = 0, binding = 5) uniform texture2D M_AMSN_M1_Detail_Combustion_snp_0_Texture2D_23;
layout(set = 0, binding = 6) uniform texture2D M_AMSN_M1_Detail_Combustion_snp_0_Texture2D_4;
layout(set = 0, binding = 7) uniform texture2D M_AMSN_M1_Detail_Combustion_snp_0_Texture2D_7;
layout(set = 0, binding = 8) uniform texture2D M_AMSN_M1_Detail_Combustion_snp_0_Texture2D_9;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in float TEXCOORD;
layout(location = 4, component = 1) in float TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 4, component = 2) in float TEXCOORD_6;
layout(location = 4, component = 3) in float TEXCOORD_7;
layout(location = 6) in float TEXCOORD_8;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1109;
float _3525;
float _3526;
float _3527;
float _3528;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _200 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _201 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _202 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _208 = inversesqrt(dot(vec3(_200, _201, _202), vec3(_200, _201, _202)));
    float _215 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _222 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _244 = texture(sampler2D(M_AMSN_M1_Detail_Combustion_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1) + cbTextureTilingScale._m0[2u].w));
    float _250 = _244.x * cbMtdParam._m0[9u].x;
    float _251 = _244.y * cbMtdParam._m0[9u].y;
    float _252 = _244.z * cbMtdParam._m0[9u].z;
    vec4 _276 = texture(sampler2D(M_AMSN_M1_Detail_Combustion_snp_0_Texture2D_20, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD_1) + cbTextureTilingScale._m0[4u].w));
    float _307 = (TEXCOORD_6 - ((cbMtdParam._m0[15u].w * (1.0 - TEXCOORD_6)) * (texture(sampler2D(M_AMSN_M1_Detail_Combustion_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD_1) + cbTextureTilingScale._m0[8u].w)).x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[15u].z + 1.0);
    float _3537 = isnan(0.0) ? _307 : (isnan(_307) ? 0.0 : max(_307, 0.0));
    float _308 = isnan(1.0) ? _3537 : (isnan(_3537) ? 1.0 : min(_3537, 1.0));
    float _315 = (_308 * ((_276.x * cbMtdParam._m0[12u].x) - _250)) + _250;
    float _316 = (_308 * ((_276.y * cbMtdParam._m0[12u].y) - _251)) + _251;
    float _317 = (_308 * ((_276.z * cbMtdParam._m0[12u].z) - _252)) + _252;
    vec4 _329 = texture(sampler2D(M_AMSN_M1_Detail_Combustion_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1) + cbTextureTilingScale._m0[1u].w));
    vec4 _352 = texture(sampler2D(M_AMSN_M1_Detail_Combustion_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD_1) + cbTextureTilingScale._m0[7u].w));
    float _356 = _352.z;
    float _359 = (_352.x * 2.0) + (-1.0);
    float _360 = (_352.y * 2.0) + (-1.0);
    float _361 = dot(vec2(_359, _360), vec2(_359, _360));
    float _3548 = isnan(0.0) ? _361 : (isnan(_361) ? 0.0 : max(_361, 0.0));
    float _366 = sqrt(1.0 - (isnan(1.0) ? _3548 : (isnan(_3548) ? 1.0 : min(_3548, 1.0))));
    float _374 = (((_329.z - _356) * TEXCOORD_6) * cbMtdParam._m0[16u].x) + _356;
    float _394 = (cbMtdParam._m0[17u].z * cbPerFrame._m0[22u].x) + TEXCOORD;
    float _395 = (cbMtdParam._m0[17u].w * cbPerFrame._m0[22u].x) + TEXCOORD_1;
    vec4 _408 = texture(sampler2D(M_AMSN_M1_Detail_Combustion_snp_0_Texture2D_4, SS_DiffuseMap), vec2((_394 * cbTextureTilingScale._m0[6u].x) + cbTextureTilingScale._m0[6u].z, (_395 * cbTextureTilingScale._m0[6u].y) + cbTextureTilingScale._m0[6u].w));
    float _422 = abs((fract(cbMtdParam._m0[13u].z * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _3559 = isnan(0.0) ? _422 : (isnan(_422) ? 0.0 : max(_422, 0.0));
    float _423 = isnan(1.0) ? _3559 : (isnan(_3559) ? 1.0 : min(_3559, 1.0));
    float _431 = (((_423 * _423) * (3.0 - (_423 * 2.0))) * cbMtdParam._m0[14u].x) - cbMtdParam._m0[14u].y;
    float _440 = cbMtdParam._m0[14u].z * cbPerFrame._m0[22u].x;
    float _448 = abs((fract(cbMtdParam._m0[14u].w * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _3570 = isnan(0.0) ? _448 : (isnan(_448) ? 0.0 : max(_448, 0.0));
    float _449 = isnan(1.0) ? _3570 : (isnan(_3570) ? 1.0 : min(_3570, 1.0));
    float _453 = (_449 * _449) * (3.0 - (_449 * 2.0));
    float _454 = _453 * cbMtdParam._m0[17u].x;
    float _455 = _453 * cbMtdParam._m0[17u].y;
    float _456 = sin(_440);
    float _457 = cos(_440);
    float _458 = TEXCOORD - _454;
    float _459 = TEXCOORD_1 - _455;
    vec4 _479 = texture(sampler2D(M_AMSN_M1_Detail_Combustion_snp_0_Texture2D_10, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (_454 + fma(_459, (-0.0) - _456, _458 * _457))) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (fma(_459, _457, _458 * _456) + _455)) + cbTextureTilingScale._m0[0u].w));
    float _485 = (cbMtdParam._m0[11u].x * cbMtdParam._m0[13u].w) * _479.x;
    float _487 = (cbMtdParam._m0[11u].y * cbMtdParam._m0[13u].w) * _479.y;
    float _489 = (cbMtdParam._m0[11u].z * cbMtdParam._m0[13u].w) * _479.z;
    vec4 _512 = texture(sampler2D(M_AMSN_M1_Detail_Combustion_snp_0_Texture2D_23, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * _394) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _395) + cbTextureTilingScale._m0[5u].w));
    float _521 = (TEXCOORD_3.x - ((cbMtdParam._m0[16u].w * (1.0 - TEXCOORD_3.x)) * (_512.x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[13u].x + 1.0);
    float _3581 = isnan(0.0) ? _521 : (isnan(_521) ? 0.0 : max(_521, 0.0));
    float _522 = isnan(1.0) ? _3581 : (isnan(_3581) ? 1.0 : min(_3581, 1.0));
    float _532 = (((((_329.x * 2.0) + (-1.0)) * TEXCOORD_6) * cbMtdParam._m0[15u].x) + _359) + (cbMtdParam._m0[16u].y * _359);
    float _534 = (((((_329.y * 2.0) + (-1.0)) * TEXCOORD_7) * cbMtdParam._m0[15u].x) + _360) + (cbMtdParam._m0[16u].y * _360);
    float _537 = fma(_366, _215 * NORMAL.x, fma(_534, _222 * TANGENT.x, (_208 * _200) * _532));
    float _540 = fma(_366, _215 * NORMAL.y, fma(_534, _222 * TANGENT.y, (_208 * _201) * _532));
    float _543 = fma(_366, _215 * NORMAL.z, fma(_534, _222 * TANGENT.z, (_208 * _202) * _532));
    float _547 = inversesqrt(dot(vec3(_537, _540, _543), vec3(_537, _540, _543)));
    float _548 = _547 * _537;
    float _549 = _547 * _540;
    float _550 = _547 * _543;
    float _3592 = isnan(0.0) ? _374 : (isnan(_374) ? 0.0 : max(_374, 0.0));
    float _551 = isnan(1.0) ? _3592 : (isnan(_3592) ? 1.0 : min(_3592, 1.0));
    float _3603 = isnan(0.0) ? _315 : (isnan(_315) ? 0.0 : max(_315, 0.0));
    float _3614 = isnan(0.0) ? _316 : (isnan(_316) ? 0.0 : max(_316, 0.0));
    float _3625 = isnan(0.0) ? _317 : (isnan(_317) ? 0.0 : max(_317, 0.0));
    float _570 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _610 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _620 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _610);
    float _621 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _610);
    float _622 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _610);
    float _626 = inversesqrt(dot(vec3(_620, _621, _622), vec3(_620, _621, _622)));
    float _627 = _620 * _626;
    float _628 = _621 * _626;
    float _629 = _622 * _626;
    vec4 _634 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _636 = _634.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _789 = sqrt(((_620 * _620) + (_621 * _621)) + (_622 * _622));
        float _795 = (cbMatDynParam._m0[5u].x * _789) + cbMatDynParam._m0[5u].y;
        float _3636 = isnan(0.0) ? _795 : (isnan(_795) ? 0.0 : max(_795, 0.0));
        float _796 = isnan(1.0) ? _3636 : (isnan(_3636) ? 1.0 : min(_3636, 1.0));
        float _800 = (cbMatDynParam._m0[5u].z * _789) + cbMatDynParam._m0[5u].w;
        float _3647 = isnan(0.0) ? _800 : (isnan(_800) ? 0.0 : max(_800, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3647 : (isnan(_3647) ? 1.0 : min(_3647, 1.0))) - _796)) + _796) < ((_636 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _647 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _648 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _666 = fma(_550, cbSceneParam._m0[5u].z, fma(_549, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _548));
    float _669 = fma(_550, cbSceneParam._m0[6u].z, fma(_549, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _548));
    float _672 = fma(_550, cbSceneParam._m0[7u].z, fma(_549, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _548));
    uint _685 = uint(roundEven(NORMAL.w)) * 13u;
    uint _686 = _685 + 9u;
    uint _687 = _686 + uint(cbMatDynParam._m0[0u].w);
    float _693 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3603 : (isnan(_3603) ? 1.0 : min(_3603, 1.0)))) * cbInstanceData._m0[_687].x;
    float _694 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3614 : (isnan(_3614) ? 1.0 : min(_3614, 1.0)))) * cbInstanceData._m0[_687].y;
    float _695 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3625 : (isnan(_3625) ? 1.0 : min(_3625, 1.0)))) * cbInstanceData._m0[_687].z;
    float _3658 = isnan(0.0) ? _693 : (isnan(_693) ? 0.0 : max(_693, 0.0));
    float _696 = isnan(1.0) ? _3658 : (isnan(_3658) ? 1.0 : min(_3658, 1.0));
    float _3669 = isnan(0.0) ? _694 : (isnan(_694) ? 0.0 : max(_694, 0.0));
    float _697 = isnan(1.0) ? _3669 : (isnan(_3669) ? 1.0 : min(_3669, 1.0));
    float _3680 = isnan(0.0) ? _695 : (isnan(_695) ? 0.0 : max(_695, 0.0));
    float _698 = isnan(1.0) ? _3680 : (isnan(_3680) ? 1.0 : min(_3680, 1.0));
    vec4 _707 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _647, cbSceneParam._m0[86u].y * _648));
    float _710 = _707.x * TEXCOORD_3.w;
    float _711 = dot(vec3(_548, _549, _550), vec3(_627, _628, _629));
    float _714 = _711 * 2.0;
    float _718 = (_714 * _548) - _627;
    float _719 = (_714 * _549) - _628;
    float _720 = (_714 * _550) - _629;
    float _724 = abs(dot(vec3(_627, _628, _629), vec3(_548, _549, _550)));
    float _3691 = isnan(0.0) ? _724 : (isnan(_724) ? 0.0 : max(_724, 0.0));
    float _726 = sqrt(_551);
    float _738 = exp2((_726 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3691 : (isnan(_3691) ? 1.0 : min(_3691, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_726 * 3.0));
    float _770 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _774 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _778 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1108;
    float _1110;
    float _1111;
    float _1112;
    float _1113;
    float _1114;
    float _1115;
    float _1116;
    float _1117;
    float _1118;
    float _1119;
    float _1120;
    float _1121;
    float _1122;
    float _1123;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _833 = fma(_778, cbModelParam._m0[26u].z, fma(_774, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _770));
        float _837 = fma(_778, cbModelParam._m0[27u].z, fma(_774, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _770));
        float _841 = fma(_778, cbModelParam._m0[28u].z, fma(_774, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _770));
        float _866 = _770 + _548;
        float _867 = _774 + _549;
        float _868 = _778 + _550;
        float _878 = fma(_868, cbModelParam._m0[26u].z, fma(_867, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _866)) - _833;
        float _879 = fma(_868, cbModelParam._m0[27u].z, fma(_867, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _866)) - _837;
        float _880 = fma(_868, cbModelParam._m0[28u].z, fma(_867, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _866)) - _841;
        float _884 = inversesqrt(dot(vec3(_878, _879, _880), vec3(_878, _879, _880)));
        float _897 = ((_884 * _878) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_833 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _898 = ((_884 * _879) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_837 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _899 = ((_884 * _880) / cbModelParam._m0[34u].z) + ((((((_841 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _902 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_897, _898, _899), 0.0);
        vec4 _909 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_897, _898, _899), 0.0);
        vec4 _916 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_897, _898, _899), 0.0);
        vec4 _923 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_897, _898, _899), 0.0);
        float _936 = exp2((_902.w + (-0.5)) * 20.0) * 2.0;
        float _937 = _936 * (_902.x + (-0.5));
        float _938 = _936 * (_902.y + (-0.5));
        float _939 = _936 * (_902.z + (-0.5));
        float _946 = exp2((_909.w + (-0.5)) * 20.0) * 2.0;
        float _947 = _946 * (_909.x + (-0.5));
        float _948 = _946 * (_909.y + (-0.5));
        float _949 = _946 * (_909.z + (-0.5));
        float _956 = exp2((_916.w + (-0.5)) * 20.0) * 2.0;
        float _957 = _956 * (_916.x + (-0.5));
        float _958 = _956 * (_916.y + (-0.5));
        float _959 = _956 * (_916.z + (-0.5));
        float _966 = exp2((_923.w + (-0.5)) * 20.0) * 2.0;
        float _967 = _966 * (_923.x + (-0.5));
        float _968 = _966 * (_923.y + (-0.5));
        float _969 = _966 * (_923.z + (-0.5));
        float _970 = isnan(0.0) ? _967 : (isnan(_967) ? 0.0 : max(_967, 0.0));
        float _971 = isnan(0.0) ? _968 : (isnan(_968) ? 0.0 : max(_968, 0.0));
        float _972 = isnan(0.0) ? _969 : (isnan(_969) ? 0.0 : max(_969, 0.0));
        float _973 = _937 * 0.5;
        float _974 = _947 * 0.5;
        float _975 = _957 * 0.5;
        float _976 = dot(vec3(_973, _974, _975), vec3(_973, _974, _975));
        float _981 = (_976 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_976);
        float _990 = (dot(vec3(_548, _549, _550), vec3(_981 * _973, _981 * _974, _981 * _975)) + 1.0) * 0.5;
        float _3717 = isnan(0.0) ? _990 : (isnan(_990) ? 0.0 : max(_990, 0.0));
        float _1000 = sqrt(((_974 * _974) + (_973 * _973)) + (_975 * _975)) / (_970 + 9.9999997473787516355514526367188e-06);
        float _3728 = isnan(0.0) ? _1000 : (isnan(_1000) ? 0.0 : max(_1000, 0.0));
        float _1001 = isnan(1.0) ? _3728 : (isnan(_3728) ? 1.0 : min(_3728, 1.0));
        float _1002 = _1001 * 2.0;
        float _1006 = (1.0 - _1001) / (_1001 + 1.0);
        float _3739 = isnan(0.0) ? _1006 : (isnan(_1006) ? 0.0 : max(_1006, 0.0));
        float _1007 = isnan(1.0) ? _3739 : (isnan(_3739) ? 1.0 : min(_3739, 1.0));
        float _1016 = ((((1.0 - _1007) * (_1002 + 2.0)) * exp2(log2(isnan(1.0) ? _3717 : (isnan(_3717) ? 1.0 : min(_3717, 1.0))) * (_1002 + 1.0))) + _1007) * _970;
        float _1017 = _938 * 0.5;
        float _1018 = _948 * 0.5;
        float _1019 = _958 * 0.5;
        float _1020 = dot(vec3(_1017, _1018, _1019), vec3(_1017, _1018, _1019));
        float _1025 = (_1020 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1020);
        float _1033 = (dot(vec3(_548, _549, _550), vec3(_1025 * _1017, _1025 * _1018, _1025 * _1019)) + 1.0) * 0.5;
        float _3750 = isnan(0.0) ? _1033 : (isnan(_1033) ? 0.0 : max(_1033, 0.0));
        float _1042 = sqrt(((_1018 * _1018) + (_1017 * _1017)) + (_1019 * _1019)) / (_971 + 9.9999997473787516355514526367188e-06);
        float _3761 = isnan(0.0) ? _1042 : (isnan(_1042) ? 0.0 : max(_1042, 0.0));
        float _1043 = isnan(1.0) ? _3761 : (isnan(_3761) ? 1.0 : min(_3761, 1.0));
        float _1044 = _1043 * 2.0;
        float _1048 = (1.0 - _1043) / (_1043 + 1.0);
        float _3772 = isnan(0.0) ? _1048 : (isnan(_1048) ? 0.0 : max(_1048, 0.0));
        float _1049 = isnan(1.0) ? _3772 : (isnan(_3772) ? 1.0 : min(_3772, 1.0));
        float _1058 = ((((1.0 - _1049) * (_1044 + 2.0)) * exp2(log2(isnan(1.0) ? _3750 : (isnan(_3750) ? 1.0 : min(_3750, 1.0))) * (_1044 + 1.0))) + _1049) * _971;
        float _1059 = _939 * 0.5;
        float _1060 = _949 * 0.5;
        float _1061 = _959 * 0.5;
        float _1062 = dot(vec3(_1059, _1060, _1061), vec3(_1059, _1060, _1061));
        float _1067 = (_1062 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1062);
        float _1075 = (dot(vec3(_548, _549, _550), vec3(_1067 * _1059, _1067 * _1060, _1067 * _1061)) + 1.0) * 0.5;
        float _3783 = isnan(0.0) ? _1075 : (isnan(_1075) ? 0.0 : max(_1075, 0.0));
        float _1084 = sqrt(((_1060 * _1060) + (_1059 * _1059)) + (_1061 * _1061)) / (_972 + 9.9999997473787516355514526367188e-06);
        float _3794 = isnan(0.0) ? _1084 : (isnan(_1084) ? 0.0 : max(_1084, 0.0));
        float _1085 = isnan(1.0) ? _3794 : (isnan(_3794) ? 1.0 : min(_3794, 1.0));
        float _1086 = _1085 * 2.0;
        float _1090 = (1.0 - _1085) / (_1085 + 1.0);
        float _3805 = isnan(0.0) ? _1090 : (isnan(_1090) ? 0.0 : max(_1090, 0.0));
        float _1091 = isnan(1.0) ? _3805 : (isnan(_3805) ? 1.0 : min(_3805, 1.0));
        float _1100 = ((((1.0 - _1091) * (_1086 + 2.0)) * exp2(log2(isnan(1.0) ? _3783 : (isnan(_3783) ? 1.0 : min(_3783, 1.0))) * (_1086 + 1.0))) + _1091) * _972;
        _1108 = _939;
        _1110 = _938;
        _1111 = _937;
        _1112 = _949;
        _1113 = _948;
        _1114 = _947;
        _1115 = _959;
        _1116 = _958;
        _1117 = _957;
        _1118 = _972;
        _1119 = _971;
        _1120 = _970;
        _1121 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1016 : (isnan(_1016) ? 0.0 : max(_1016, 0.0)));
        _1122 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1058 : (isnan(_1058) ? 0.0 : max(_1058, 0.0)));
        _1123 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1100 : (isnan(_1100) ? 0.0 : max(_1100, 0.0)));
    }
    else
    {
        _1108 = _1109;
        _1110 = _1109;
        _1111 = _1109;
        _1112 = _1109;
        _1113 = _1109;
        _1114 = _1109;
        _1115 = _1109;
        _1116 = _1109;
        _1117 = _1109;
        _1118 = _1109;
        _1119 = _1109;
        _1120 = _1109;
        _1121 = 0.0;
        _1122 = 0.0;
        _1123 = 0.0;
    }
    float _1421;
    float _1422;
    float _1423;
    float _1424;
    float _1425;
    float _1426;
    float _1427;
    float _1428;
    float _1429;
    float _1430;
    float _1431;
    float _1432;
    float _1433;
    float _1434;
    float _1435;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1152 = fma(_778, cbModelParam._m0[30u].z, fma(_774, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _770));
        float _1156 = fma(_778, cbModelParam._m0[31u].z, fma(_774, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _770));
        float _1160 = fma(_778, cbModelParam._m0[32u].z, fma(_774, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _770));
        float _1183 = _770 + _548;
        float _1184 = _774 + _549;
        float _1185 = _778 + _550;
        float _1195 = fma(_1185, cbModelParam._m0[30u].z, fma(_1184, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1183)) - _1152;
        float _1196 = fma(_1185, cbModelParam._m0[31u].z, fma(_1184, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1183)) - _1156;
        float _1197 = fma(_1185, cbModelParam._m0[32u].z, fma(_1184, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1183)) - _1160;
        float _1201 = inversesqrt(dot(vec3(_1195, _1196, _1197), vec3(_1195, _1196, _1197)));
        float _1214 = ((_1201 * _1195) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1152 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1215 = ((_1201 * _1196) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1156 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1216 = ((_1201 * _1197) / cbModelParam._m0[35u].z) + ((((((_1160 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1218 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1214, _1215, _1216), 0.0);
        vec4 _1225 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1214, _1215, _1216), 0.0);
        vec4 _1232 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1214, _1215, _1216), 0.0);
        vec4 _1239 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1214, _1215, _1216), 0.0);
        float _1251 = exp2((_1218.w + (-0.5)) * 20.0) * 2.0;
        float _1252 = _1251 * (_1218.x + (-0.5));
        float _1253 = _1251 * (_1218.y + (-0.5));
        float _1254 = _1251 * (_1218.z + (-0.5));
        float _1261 = exp2((_1225.w + (-0.5)) * 20.0) * 2.0;
        float _1262 = _1261 * (_1225.x + (-0.5));
        float _1263 = _1261 * (_1225.y + (-0.5));
        float _1264 = _1261 * (_1225.z + (-0.5));
        float _1271 = exp2((_1232.w + (-0.5)) * 20.0) * 2.0;
        float _1272 = _1271 * (_1232.x + (-0.5));
        float _1273 = _1271 * (_1232.y + (-0.5));
        float _1274 = _1271 * (_1232.z + (-0.5));
        float _1281 = exp2((_1239.w + (-0.5)) * 20.0) * 2.0;
        float _1282 = _1281 * (_1239.x + (-0.5));
        float _1283 = _1281 * (_1239.y + (-0.5));
        float _1284 = _1281 * (_1239.z + (-0.5));
        float _1285 = isnan(0.0) ? _1282 : (isnan(_1282) ? 0.0 : max(_1282, 0.0));
        float _1286 = isnan(0.0) ? _1283 : (isnan(_1283) ? 0.0 : max(_1283, 0.0));
        float _1287 = isnan(0.0) ? _1284 : (isnan(_1284) ? 0.0 : max(_1284, 0.0));
        float _1288 = _1252 * 0.5;
        float _1289 = _1262 * 0.5;
        float _1290 = _1272 * 0.5;
        float _1291 = dot(vec3(_1288, _1289, _1290), vec3(_1288, _1289, _1290));
        float _1296 = (_1291 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1291);
        float _1304 = (dot(vec3(_548, _549, _550), vec3(_1296 * _1288, _1296 * _1289, _1296 * _1290)) + 1.0) * 0.5;
        float _3846 = isnan(0.0) ? _1304 : (isnan(_1304) ? 0.0 : max(_1304, 0.0));
        float _1313 = sqrt(((_1289 * _1289) + (_1288 * _1288)) + (_1290 * _1290)) / (_1285 + 9.9999997473787516355514526367188e-06);
        float _3857 = isnan(0.0) ? _1313 : (isnan(_1313) ? 0.0 : max(_1313, 0.0));
        float _1314 = isnan(1.0) ? _3857 : (isnan(_3857) ? 1.0 : min(_3857, 1.0));
        float _1315 = _1314 * 2.0;
        float _1319 = (1.0 - _1314) / (_1314 + 1.0);
        float _3868 = isnan(0.0) ? _1319 : (isnan(_1319) ? 0.0 : max(_1319, 0.0));
        float _1320 = isnan(1.0) ? _3868 : (isnan(_3868) ? 1.0 : min(_3868, 1.0));
        float _1329 = ((((1.0 - _1320) * (_1315 + 2.0)) * exp2(log2(isnan(1.0) ? _3846 : (isnan(_3846) ? 1.0 : min(_3846, 1.0))) * (_1315 + 1.0))) + _1320) * _1285;
        float _1330 = _1253 * 0.5;
        float _1331 = _1263 * 0.5;
        float _1332 = _1273 * 0.5;
        float _1333 = dot(vec3(_1330, _1331, _1332), vec3(_1330, _1331, _1332));
        float _1338 = (_1333 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1333);
        float _1346 = (dot(vec3(_548, _549, _550), vec3(_1338 * _1330, _1338 * _1331, _1338 * _1332)) + 1.0) * 0.5;
        float _3879 = isnan(0.0) ? _1346 : (isnan(_1346) ? 0.0 : max(_1346, 0.0));
        float _1355 = sqrt(((_1331 * _1331) + (_1330 * _1330)) + (_1332 * _1332)) / (_1286 + 9.9999997473787516355514526367188e-06);
        float _3890 = isnan(0.0) ? _1355 : (isnan(_1355) ? 0.0 : max(_1355, 0.0));
        float _1356 = isnan(1.0) ? _3890 : (isnan(_3890) ? 1.0 : min(_3890, 1.0));
        float _1357 = _1356 * 2.0;
        float _1361 = (1.0 - _1356) / (_1356 + 1.0);
        float _3901 = isnan(0.0) ? _1361 : (isnan(_1361) ? 0.0 : max(_1361, 0.0));
        float _1362 = isnan(1.0) ? _3901 : (isnan(_3901) ? 1.0 : min(_3901, 1.0));
        float _1371 = ((((1.0 - _1362) * (_1357 + 2.0)) * exp2(log2(isnan(1.0) ? _3879 : (isnan(_3879) ? 1.0 : min(_3879, 1.0))) * (_1357 + 1.0))) + _1362) * _1286;
        float _1372 = _1254 * 0.5;
        float _1373 = _1264 * 0.5;
        float _1374 = _1274 * 0.5;
        float _1375 = dot(vec3(_1372, _1373, _1374), vec3(_1372, _1373, _1374));
        float _1380 = (_1375 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1375);
        float _1388 = (dot(vec3(_548, _549, _550), vec3(_1380 * _1372, _1380 * _1373, _1380 * _1374)) + 1.0) * 0.5;
        float _3912 = isnan(0.0) ? _1388 : (isnan(_1388) ? 0.0 : max(_1388, 0.0));
        float _1397 = sqrt(((_1373 * _1373) + (_1372 * _1372)) + (_1374 * _1374)) / (_1287 + 9.9999997473787516355514526367188e-06);
        float _3923 = isnan(0.0) ? _1397 : (isnan(_1397) ? 0.0 : max(_1397, 0.0));
        float _1398 = isnan(1.0) ? _3923 : (isnan(_3923) ? 1.0 : min(_3923, 1.0));
        float _1399 = _1398 * 2.0;
        float _1403 = (1.0 - _1398) / (_1398 + 1.0);
        float _3934 = isnan(0.0) ? _1403 : (isnan(_1403) ? 0.0 : max(_1403, 0.0));
        float _1404 = isnan(1.0) ? _3934 : (isnan(_3934) ? 1.0 : min(_3934, 1.0));
        float _1413 = ((((1.0 - _1404) * (_1399 + 2.0)) * exp2(log2(isnan(1.0) ? _3912 : (isnan(_3912) ? 1.0 : min(_3912, 1.0))) * (_1399 + 1.0))) + _1404) * _1287;
        _1421 = _1254;
        _1422 = _1253;
        _1423 = _1252;
        _1424 = _1264;
        _1425 = _1263;
        _1426 = _1262;
        _1427 = _1274;
        _1428 = _1273;
        _1429 = _1272;
        _1430 = _1287;
        _1431 = _1286;
        _1432 = _1285;
        _1433 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1329 : (isnan(_1329) ? 0.0 : max(_1329, 0.0)));
        _1434 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1371 : (isnan(_1371) ? 0.0 : max(_1371, 0.0)));
        _1435 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1413 : (isnan(_1413) ? 0.0 : max(_1413, 0.0)));
    }
    else
    {
        _1421 = _1109;
        _1422 = _1109;
        _1423 = _1109;
        _1424 = _1109;
        _1425 = _1109;
        _1426 = _1109;
        _1427 = _1109;
        _1428 = _1109;
        _1429 = _1109;
        _1430 = _1109;
        _1431 = _1109;
        _1432 = _1109;
        _1433 = 0.0;
        _1434 = 0.0;
        _1435 = 0.0;
    }
    float _1445 = (cbModelParam._m0[1u].x * (_1433 - _1121)) + _1121;
    float _1446 = (cbModelParam._m0[1u].x * (_1434 - _1122)) + _1122;
    float _1447 = (cbModelParam._m0[1u].x * (_1435 - _1123)) + _1123;
    float _1468 = fma(_1447, cbSceneParam._m0[89u].z, fma(_1446, cbSceneParam._m0[89u].y, _1445 * cbSceneParam._m0[89u].x));
    float _1471 = fma(_1447, cbSceneParam._m0[90u].z, fma(_1446, cbSceneParam._m0[90u].y, _1445 * cbSceneParam._m0[90u].x));
    float _1474 = fma(_1447, cbSceneParam._m0[91u].z, fma(_1446, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1445));
    float _1489 = _718 * 0.5;
    float _1490 = _719 * 0.5;
    float _1491 = _720 * 0.5;
    float _1492 = dot(vec4(_1489, _1490, _1491, 1.0), vec4(_1423, _1426, _1429, _1432));
    float _1495 = dot(vec4(_1489, _1490, _1491, 1.0), vec4(_1422, _1425, _1428, _1431));
    float _1498 = dot(vec4(_1489, _1490, _1491, 1.0), vec4(_1421, _1424, _1427, _1430));
    float _1532;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1505 = dot(vec4(_1489, _1490, _1491, 1.0), vec4(_1108, _1112, _1115, _1118));
        float _1509 = dot(vec4(_1489, _1490, _1491, 1.0), vec4(_1110, _1113, _1116, _1119));
        float _1513 = dot(vec4(_1489, _1490, _1491, 1.0), vec4(_1111, _1114, _1117, _1120));
        float _1520 = dot(vec4(cbModelParam._m0[39u]), vec4(_1489, _1490, _1491, 1.0));
        _1532 = dot(vec3(isnan(0.0) ? _1513 : (isnan(_1513) ? 0.0 : max(_1513, 0.0)), isnan(0.0) ? _1509 : (isnan(_1509) ? 0.0 : max(_1509, 0.0)), isnan(0.0) ? _1505 : (isnan(_1505) ? 0.0 : max(_1505, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1520) ? 0.0 : (isnan(0.0) ? _1520 : max(0.0, _1520))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1532 = 1.0;
    }
    float _1543;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1534 = dot(vec4(cbModelParam._m0[40u]), vec4(_1489, _1490, _1491, 1.0));
        _1543 = dot(vec3(isnan(0.0) ? _1492 : (isnan(_1492) ? 0.0 : max(_1492, 0.0)), isnan(0.0) ? _1495 : (isnan(_1495) ? 0.0 : max(_1495, 0.0)), isnan(0.0) ? _1498 : (isnan(_1498) ? 0.0 : max(_1498, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1534) ? 0.0 : (isnan(0.0) ? _1534 : max(0.0, _1534))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1543 = 1.0;
    }
    float _1547 = (_1543 * cbModelParam._m0[1u].x) + (_1532 * (1.0 - cbModelParam._m0[1u].x));
    float _1557 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _551);
    float _1558 = isnan(_1557) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1557 : min(cbModelParam._m0[25u].z, _1557));
    float _1638;
    float _1640;
    float _1642;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1605 = fma(_778, cbModelParam._m0[13u].z, fma(_774, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _770)) + cbModelParam._m0[13u].w;
        float _1609 = fma(_778, cbModelParam._m0[14u].z, fma(_774, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _770)) + cbModelParam._m0[14u].w;
        float _1613 = fma(_778, cbModelParam._m0[15u].z, fma(_774, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _770)) + cbModelParam._m0[15u].w;
        float _1616 = fma(_720, cbModelParam._m0[13u].z, fma(_719, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _718));
        float _1619 = fma(_720, cbModelParam._m0[14u].z, fma(_719, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _718));
        float _1622 = fma(_720, cbModelParam._m0[15u].z, fma(_719, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _718));
        float _1650;
        if (_1616 > 0.0)
        {
            _1650 = abs((1.0 - _1605) / _1616);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1616 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1605 + 1.0) / _1616);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1650 = frontier_phi_17_15_ladder;
        }
        float _1852;
        if (_1619 > 0.0)
        {
            _1852 = abs((1.0 - _1609) / _1619);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1619 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1609 + 1.0) / _1619);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1852 = frontier_phi_26_22_ladder;
        }
        float _2095;
        if (_1622 > 0.0)
        {
            _2095 = abs((1.0 - _1613) / _1622);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1622 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1613 + 1.0) / _1622);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2095 = frontier_phi_38_33_ladder;
        }
        float _2097 = isnan(_1852) ? _1650 : (isnan(_1650) ? _1852 : min(_1650, _1852));
        float _2098 = isnan(_2095) ? _2097 : (isnan(_2097) ? _2095 : min(_2097, _2095));
        float _2102 = (_2098 * _1616) + _1605;
        float _2103 = (_2098 * _1619) + _1609;
        float _2104 = (_2098 * _1622) + _1613;
        float _2105 = _2098 * 9.9999997473787516355514526367188e-05;
        float _2107 = (-1.0) - _2105;
        float _2109 = _2105 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2104 > _2109) || ((_2104 < _2107) || ((_2103 > _2109) || ((_2103 < _2107) || ((_2102 < _2107) || (_2102 > _2109))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2228 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2104, cbModelParam._m0[9u].z, fma(_2103, cbModelParam._m0[9u].y, _2102 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2104, cbModelParam._m0[10u].z, fma(_2103, cbModelParam._m0[10u].y, _2102 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2104, cbModelParam._m0[11u].z, fma(_2103, cbModelParam._m0[11u].y, _2102 * cbModelParam._m0[11u].x))), _1558);
            frontier_phi_16_38_ladder = _2228.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2228.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2228.x * cbModelParam._m0[1u].y;
        }
        _1638 = frontier_phi_16_38_ladder_2;
        _1640 = frontier_phi_16_38_ladder_1;
        _1642 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1626 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_718, _719, _720), _1558);
        _1638 = _1626.x * cbModelParam._m0[1u].y;
        _1640 = _1626.y * cbModelParam._m0[1u].y;
        _1642 = _1626.z * cbModelParam._m0[1u].y;
    }
    float _1646 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _551);
    float _1647 = isnan(_1646) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1646 : min(cbModelParam._m0[25u].w, _1646));
    float _1738;
    float _1740;
    float _1742;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1702 = fma(_778, cbModelParam._m0[21u].z, fma(_774, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _770)) + cbModelParam._m0[21u].w;
        float _1706 = fma(_778, cbModelParam._m0[22u].z, fma(_774, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _770)) + cbModelParam._m0[22u].w;
        float _1710 = fma(_778, cbModelParam._m0[23u].z, fma(_774, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _770)) + cbModelParam._m0[23u].w;
        float _1713 = fma(_720, cbModelParam._m0[21u].z, fma(_719, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _718));
        float _1716 = fma(_720, cbModelParam._m0[22u].z, fma(_719, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _718));
        float _1719 = fma(_720, cbModelParam._m0[23u].z, fma(_719, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _718));
        float _1857;
        if (_1713 > 0.0)
        {
            _1857 = abs((1.0 - _1702) / _1713);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1713 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1702 + 1.0) / _1713);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1857 = frontier_phi_28_24_ladder;
        }
        float _2122;
        if (_1716 > 0.0)
        {
            _2122 = abs((1.0 - _1706) / _1716);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1716 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1706 + 1.0) / _1716);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2122 = frontier_phi_40_35_ladder;
        }
        float _2327;
        if (_1719 > 0.0)
        {
            _2327 = abs((1.0 - _1710) / _1719);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1719 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1710 + 1.0) / _1719);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2327 = frontier_phi_49_46_ladder;
        }
        float _2329 = isnan(_2122) ? _1857 : (isnan(_1857) ? _2122 : min(_1857, _2122));
        float _2330 = isnan(_2327) ? _2329 : (isnan(_2329) ? _2327 : min(_2329, _2327));
        float _2334 = (_2330 * _1713) + _1702;
        float _2335 = (_2330 * _1716) + _1706;
        float _2336 = (_2330 * _1719) + _1710;
        float _2337 = _2330 * 9.9999997473787516355514526367188e-05;
        float _2338 = (-1.0) - _2337;
        float _2340 = _2337 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2336 > _2340) || ((_2336 < _2338) || ((_2335 > _2340) || ((_2335 < _2338) || ((_2334 < _2338) || (_2334 > _2340))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2580 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2336, cbModelParam._m0[17u].z, fma(_2335, cbModelParam._m0[17u].y, _2334 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2336, cbModelParam._m0[18u].z, fma(_2335, cbModelParam._m0[18u].y, _2334 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2336, cbModelParam._m0[19u].z, fma(_2335, cbModelParam._m0[19u].y, _2334 * cbModelParam._m0[19u].x))), _1647);
            frontier_phi_25_49_ladder = _2580.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2580.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2580.x * cbModelParam._m0[1u].z;
        }
        _1738 = frontier_phi_25_49_ladder_2;
        _1740 = frontier_phi_25_49_ladder_1;
        _1742 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1722 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_718, _719, _720), _1647);
        _1738 = _1722.x * cbModelParam._m0[1u].z;
        _1740 = _1722.y * cbModelParam._m0[1u].z;
        _1742 = _1722.z * cbModelParam._m0[1u].z;
    }
    float _1754 = ((((1.0 - _738) * ((_726 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_738 * _726)) * _710;
    float _1755 = _1754 * ((cbModelParam._m0[1u].w * (_1738 - _1638)) + _1638);
    float _1756 = _1754 * ((cbModelParam._m0[1u].w * (_1740 - _1640)) + _1640);
    float _1757 = _1754 * ((cbModelParam._m0[1u].w * (_1742 - _1642)) + _1642);
    float _1760 = fma(_1757, cbSceneParam._m0[89u].z, fma(_1756, cbSceneParam._m0[89u].y, _1755 * cbSceneParam._m0[89u].x));
    float _1763 = fma(_1757, cbSceneParam._m0[90u].z, fma(_1756, cbSceneParam._m0[90u].y, _1755 * cbSceneParam._m0[90u].x));
    float _1766 = fma(_1757, cbSceneParam._m0[91u].z, fma(_1756, cbSceneParam._m0[91u].y, _1755 * cbSceneParam._m0[91u].x));
    uvec4 _1776 = floatBitsToUint(cbInstanceData._m0[_685 + 5u]);
    uint _1778 = _1776.x * 14u;
    uint _1779 = _1778 + 13u;
    float _1786 = _710 + (-1.0);
    float _1791 = (cbLight._m0[_1779].x * _1786) + 1.0;
    float _1792 = (cbLight._m0[_1779].y * _1786) + 1.0;
    float _1793 = (cbLight._m0[_1779].z * _1786) + 1.0;
    float _1794 = (cbLight._m0[_1779].w * _1786) + 1.0;
    uint _1795 = _1778 + 5u;
    float _1801 = isnan(1.0) ? _1792 : (isnan(_1792) ? 1.0 : min(_1792, 1.0));
    uint _1805 = _1778 + 4u;
    float _1811 = isnan(1.0) ? _1791 : (isnan(_1791) ? 1.0 : min(_1791, 1.0));
    uint _1815 = _1778 | 1u;
    float _1826 = dot(vec3(cbLight._m0[_1778].xyz), vec3(_548, _549, _550));
    float _1829 = dot(vec3(cbLight._m0[_1815].xyz), vec3(_548, _549, _550));
    float _4070 = isnan(0.0) ? _1826 : (isnan(_1826) ? 0.0 : max(_1826, 0.0));
    float _4081 = isnan(0.0) ? _1829 : (isnan(_1829) ? 0.0 : max(_1829, 0.0));
    float _1834 = (isnan(1.0) ? _4070 : (isnan(_4070) ? 1.0 : min(_4070, 1.0))) * 0.3183098733425140380859375;
    float _1836 = (isnan(1.0) ? _4081 : (isnan(_4081) ? 1.0 : min(_4081, 1.0))) * 0.3183098733425140380859375;
    float _1843 = ((cbLight._m0[_1795].x * _1801) * _1836) + ((cbLight._m0[_1805].x * _1811) * _1834);
    float _1844 = ((_1801 * cbLight._m0[_1795].y) * _1836) + ((_1811 * cbLight._m0[_1805].y) * _1834);
    float _1845 = ((_1801 * cbLight._m0[_1795].z) * _1836) + ((_1811 * cbLight._m0[_1805].z) * _1834);
    uvec4 _1849 = floatBitsToUint(cbLight._m0[_1778 + 12u]);
    bool _1851 = _1849.x == 0u;
    float _1862;
    float _1864;
    float _1866;
    if (_1851)
    {
        _1862 = _1843;
        _1864 = _1844;
        _1866 = _1845;
    }
    else
    {
        uint _1870 = _1778 + 6u;
        float _1886 = (dot(vec3(cbLight._m0[_1778 + 2u].xyz), vec3(_548, _549, _550)) * 0.5) + 0.5;
        float _1887 = _1886 * _1886;
        float _4092 = isnan(0.0) ? _1887 : (isnan(_1887) ? 0.0 : max(_1887, 0.0));
        float _1888 = isnan(1.0) ? _4092 : (isnan(_4092) ? 1.0 : min(_4092, 1.0));
        float _1889 = isnan(1.0) ? _1793 : (isnan(_1793) ? 1.0 : min(_1793, 1.0));
        _1862 = (((cbLight._m0[_1870].x * 0.3183098733425140380859375) * _1888) * _1889) + _1843;
        _1864 = (((cbLight._m0[_1870].y * 0.3183098733425140380859375) * _1888) * _1889) + _1844;
        _1866 = (((cbLight._m0[_1870].z * 0.3183098733425140380859375) * _1888) * _1889) + _1845;
    }
    bool _1869 = _1849.y == 0u;
    float _1907;
    float _1909;
    float _1911;
    if (_1869)
    {
        _1907 = _1862;
        _1909 = _1864;
        _1911 = _1866;
    }
    else
    {
        uint _2066 = _1778 + 7u;
        float _2082 = (dot(vec3(cbLight._m0[_1778 + 3u].xyz), vec3(_548, _549, _550)) * 0.5) + 0.5;
        float _2083 = _2082 * _2082;
        float _4108 = isnan(0.0) ? _2083 : (isnan(_2083) ? 0.0 : max(_2083, 0.0));
        float _2084 = isnan(1.0) ? _4108 : (isnan(_4108) ? 1.0 : min(_4108, 1.0));
        float _2085 = isnan(1.0) ? _1794 : (isnan(_1794) ? 1.0 : min(_1794, 1.0));
        _1907 = (((cbLight._m0[_2066].x * 0.3183098733425140380859375) * _2084) * _2085) + _1862;
        _1909 = (((cbLight._m0[_2066].y * 0.3183098733425140380859375) * _2084) * _2085) + _1864;
        _1911 = (((cbLight._m0[_2066].z * 0.3183098733425140380859375) * _2084) * _2085) + _1866;
    }
    uint _1914 = _1778 + 8u;
    float _1927 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1778].w)) * _551) * 0.949999988079071044921875);
    float _1928 = _1927 * _1927;
    float _1929 = cbLight._m0[_1778].x + _627;
    float _1930 = cbLight._m0[_1778].y + _628;
    float _1931 = cbLight._m0[_1778].z + _629;
    float _1935 = inversesqrt(dot(vec3(_1929, _1930, _1931), vec3(_1929, _1930, _1931)));
    float _1936 = _1935 * _1929;
    float _1937 = _1935 * _1930;
    float _1938 = _1935 * _1931;
    float _1939 = dot(vec3(_548, _549, _550), vec3(cbLight._m0[_1778].xyz));
    float _4124 = isnan(0.0) ? _1939 : (isnan(_1939) ? 0.0 : max(_1939, 0.0));
    float _1942 = isnan(1.0) ? _4124 : (isnan(_4124) ? 1.0 : min(_4124, 1.0));
    float _4135 = isnan(0.0) ? _711 : (isnan(_711) ? 0.0 : max(_711, 0.0));
    float _1943 = isnan(1.0) ? _4135 : (isnan(_4135) ? 1.0 : min(_4135, 1.0));
    float _1944 = dot(vec3(_548, _549, _550), vec3(_1936, _1937, _1938));
    float _4146 = isnan(0.0) ? _1944 : (isnan(_1944) ? 0.0 : max(_1944, 0.0));
    float _1947 = isnan(1.0) ? _4146 : (isnan(_4146) ? 1.0 : min(_4146, 1.0));
    float _1948 = dot(vec3(cbLight._m0[_1778].xyz), vec3(_1936, _1937, _1938));
    float _4157 = isnan(0.0) ? _1948 : (isnan(_1948) ? 0.0 : max(_1948, 0.0));
    float _1952 = _1928 * _1928;
    float _1956 = ((_1947 * _1947) * (_1952 + (-1.0))) + 1.0;
    float _1967 = (exp2(log2(1.0 - (isnan(1.0) ? _4157 : (isnan(_4157) ? 1.0 : min(_4157, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1968 = 1.0 - _1928;
    float _1979 = (0.5 / (((_1943 * ((_1942 * _1968) + _1928)) + 9.9999999392252902907785028219223e-09) + (((_1943 * _1968) + _1928) * _1942))) * _1942;
    float _4168 = isnan(0.0) ? _1979 : (isnan(_1979) ? 0.0 : max(_1979, 0.0));
    float _1981 = (isnan(1.0) ? _4168 : (isnan(_4168) ? 1.0 : min(_4168, 1.0))) * (_1952 / ((_1956 * _1956) * 3.141590118408203125));
    uint _1992 = _1778 + 9u;
    float _2003 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1815].w)) * _551) * 0.949999988079071044921875);
    float _2004 = _2003 * _2003;
    float _2005 = cbLight._m0[_1815].x + _627;
    float _2006 = cbLight._m0[_1815].y + _628;
    float _2007 = cbLight._m0[_1815].z + _629;
    float _2011 = inversesqrt(dot(vec3(_2005, _2006, _2007), vec3(_2005, _2006, _2007)));
    float _2012 = _2011 * _2005;
    float _2013 = _2011 * _2006;
    float _2014 = _2011 * _2007;
    float _2015 = dot(vec3(_548, _549, _550), vec3(cbLight._m0[_1815].xyz));
    float _4179 = isnan(0.0) ? _2015 : (isnan(_2015) ? 0.0 : max(_2015, 0.0));
    float _2018 = isnan(1.0) ? _4179 : (isnan(_4179) ? 1.0 : min(_4179, 1.0));
    float _2019 = dot(vec3(_548, _549, _550), vec3(_2012, _2013, _2014));
    float _4190 = isnan(0.0) ? _2019 : (isnan(_2019) ? 0.0 : max(_2019, 0.0));
    float _2022 = isnan(1.0) ? _4190 : (isnan(_4190) ? 1.0 : min(_4190, 1.0));
    float _2023 = dot(vec3(cbLight._m0[_1815].xyz), vec3(_2012, _2013, _2014));
    float _4201 = isnan(0.0) ? _2023 : (isnan(_2023) ? 0.0 : max(_2023, 0.0));
    float _2027 = _2004 * _2004;
    float _2031 = ((_2022 * _2022) * (_2027 + (-1.0))) + 1.0;
    float _2040 = (exp2(log2(1.0 - (isnan(1.0) ? _4201 : (isnan(_4201) ? 1.0 : min(_4201, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2041 = 1.0 - _2004;
    float _2051 = (0.5 / (((_1943 * ((_2018 * _2041) + _2004)) + 9.9999999392252902907785028219223e-09) + (((_1943 * _2041) + _2004) * _2018))) * _2018;
    float _4212 = isnan(0.0) ? _2051 : (isnan(_2051) ? 0.0 : max(_2051, 0.0));
    float _2053 = (isnan(1.0) ? _4212 : (isnan(_4212) ? 1.0 : min(_4212, 1.0))) * (_2027 / ((_2031 * _2031) * 3.141590118408203125));
    float _2063 = (((_2040 * cbLight._m0[_1992].x) * _2053) * _1801) + (((_1967 * cbLight._m0[_1914].x) * _1981) * _1811);
    float _2064 = (((_2040 * cbLight._m0[_1992].y) * _2053) * _1801) + (((_1967 * cbLight._m0[_1914].y) * _1981) * _1811);
    float _2065 = (((_2040 * cbLight._m0[_1992].z) * _2053) * _1801) + (((_1967 * cbLight._m0[_1914].z) * _1981) * _1811);
    float _2127;
    float _2129;
    float _2131;
    if (_1851)
    {
        _2127 = _2063;
        _2129 = _2064;
        _2131 = _2065;
    }
    else
    {
        uint _2133 = _1778 + 2u;
        uint _2137 = _1778 + 10u;
        float _2151 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2133].w)) * _551) * 0.949999988079071044921875);
        float _2152 = _2151 * _2151;
        float _2153 = cbLight._m0[_2133].x + _627;
        float _2154 = cbLight._m0[_2133].y + _628;
        float _2155 = cbLight._m0[_2133].z + _629;
        float _2159 = inversesqrt(dot(vec3(_2153, _2154, _2155), vec3(_2153, _2154, _2155)));
        float _2160 = _2159 * _2153;
        float _2161 = _2159 * _2154;
        float _2162 = _2159 * _2155;
        float _2163 = dot(vec3(_548, _549, _550), vec3(cbLight._m0[_2133].xyz));
        float _4223 = isnan(0.0) ? _2163 : (isnan(_2163) ? 0.0 : max(_2163, 0.0));
        float _2166 = isnan(1.0) ? _4223 : (isnan(_4223) ? 1.0 : min(_4223, 1.0));
        float _2167 = dot(vec3(_548, _549, _550), vec3(_2160, _2161, _2162));
        float _4234 = isnan(0.0) ? _2167 : (isnan(_2167) ? 0.0 : max(_2167, 0.0));
        float _2170 = isnan(1.0) ? _4234 : (isnan(_4234) ? 1.0 : min(_4234, 1.0));
        float _2171 = dot(vec3(cbLight._m0[_2133].xyz), vec3(_2160, _2161, _2162));
        float _4245 = isnan(0.0) ? _2171 : (isnan(_2171) ? 0.0 : max(_2171, 0.0));
        float _2175 = _2152 * _2152;
        float _2179 = ((_2170 * _2170) * (_2175 + (-1.0))) + 1.0;
        float _2188 = (exp2(log2(1.0 - (isnan(1.0) ? _4245 : (isnan(_4245) ? 1.0 : min(_4245, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2189 = 1.0 - _2152;
        float _2199 = (0.5 / (((_1943 * ((_2166 * _2189) + _2152)) + 9.9999999392252902907785028219223e-09) + (((_1943 * _2189) + _2152) * _2166))) * _2166;
        float _4256 = isnan(0.0) ? _2199 : (isnan(_2199) ? 0.0 : max(_2199, 0.0));
        float _2201 = (isnan(1.0) ? _4256 : (isnan(_4256) ? 1.0 : min(_4256, 1.0))) * (_2175 / ((_2179 * _2179) * 3.141590118408203125));
        float _2202 = isnan(1.0) ? _1793 : (isnan(_1793) ? 1.0 : min(_1793, 1.0));
        _2127 = (((_2188 * cbLight._m0[_2137].x) * _2201) * _2202) + _2063;
        _2129 = (((_2188 * cbLight._m0[_2137].y) * _2201) * _2202) + _2064;
        _2131 = (((_2188 * cbLight._m0[_2137].z) * _2201) * _2202) + _2065;
    }
    float _2237;
    float _2239;
    float _2241;
    if (_1869)
    {
        _2237 = _2127;
        _2239 = _2129;
        _2241 = _2131;
    }
    else
    {
        uint _2248 = _1778 + 3u;
        uint _2252 = _1778 + 11u;
        float _2266 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2248].w)) * _551) * 0.949999988079071044921875);
        float _2267 = _2266 * _2266;
        float _2268 = cbLight._m0[_2248].x + _627;
        float _2269 = cbLight._m0[_2248].y + _628;
        float _2270 = cbLight._m0[_2248].z + _629;
        float _2274 = inversesqrt(dot(vec3(_2268, _2269, _2270), vec3(_2268, _2269, _2270)));
        float _2275 = _2274 * _2268;
        float _2276 = _2274 * _2269;
        float _2277 = _2274 * _2270;
        float _2278 = dot(vec3(_548, _549, _550), vec3(cbLight._m0[_2248].xyz));
        float _4272 = isnan(0.0) ? _2278 : (isnan(_2278) ? 0.0 : max(_2278, 0.0));
        float _2281 = isnan(1.0) ? _4272 : (isnan(_4272) ? 1.0 : min(_4272, 1.0));
        float _2282 = dot(vec3(_548, _549, _550), vec3(_2275, _2276, _2277));
        float _4283 = isnan(0.0) ? _2282 : (isnan(_2282) ? 0.0 : max(_2282, 0.0));
        float _2285 = isnan(1.0) ? _4283 : (isnan(_4283) ? 1.0 : min(_4283, 1.0));
        float _2286 = dot(vec3(cbLight._m0[_2248].xyz), vec3(_2275, _2276, _2277));
        float _4294 = isnan(0.0) ? _2286 : (isnan(_2286) ? 0.0 : max(_2286, 0.0));
        float _2290 = _2267 * _2267;
        float _2294 = ((_2285 * _2285) * (_2290 + (-1.0))) + 1.0;
        float _2303 = (exp2(log2(1.0 - (isnan(1.0) ? _4294 : (isnan(_4294) ? 1.0 : min(_4294, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2304 = 1.0 - _2267;
        float _2314 = (0.5 / (((_1943 * ((_2281 * _2304) + _2267)) + 9.9999999392252902907785028219223e-09) + (((_1943 * _2304) + _2267) * _2281))) * _2281;
        float _4305 = isnan(0.0) ? _2314 : (isnan(_2314) ? 0.0 : max(_2314, 0.0));
        float _2316 = (isnan(1.0) ? _4305 : (isnan(_4305) ? 1.0 : min(_4305, 1.0))) * (_2290 / ((_2294 * _2294) * 3.141590118408203125));
        float _2317 = isnan(1.0) ? _1794 : (isnan(_1794) ? 1.0 : min(_1794, 1.0));
        _2237 = (((_2303 * cbLight._m0[_2252].x) * _2316) * _2317) + _2127;
        _2239 = (((_2303 * cbLight._m0[_2252].y) * _2316) * _2317) + _2129;
        _2241 = (((_2303 * cbLight._m0[_2252].z) * _2316) * _2317) + _2131;
    }
    float _2452;
    float _2454;
    float _2456;
    float _2458;
    float _2460;
    float _2462;
    if (_1776.y == 0u)
    {
        float _2392 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2393 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2392;
        float _2394 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2392;
        float _2395 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2392;
        uvec4 _2407 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2408 = _2407.x;
        uint _2419 = uint((float(_2407.y) * floor(float(uint(cbSceneParam._m0[85u].y * _648) / _2408))) + floor(float(uint(cbSceneParam._m0[85u].x * _647) / _2408)));
        float _2429 = (log2(_2395 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2430 = isnan(0.0) ? _2429 : (isnan(_2429) ? 0.0 : max(_2429, 0.0));
        uint _2433 = uint(isnan(14.0) ? _2430 : (isnan(_2430) ? 14.0 : min(_2430, 14.0)));
        uvec4 _2438 = texelFetch(g_lightClusterGridBuffer, int(((_2433 << 2u) + (_2419 << 6u)) >> 2u));
        uint _2439 = _2438.x;
        uint _2440 = _2407.z;
        float _2585;
        float _2587;
        float _2589;
        float _2591;
        float _2593;
        float _2595;
        if (((((1u << ((_2440 >> 4u) & 15u)) + 4294967295u) & _2439) == 0u) || ((_2440 & 240u) == 0u))
        {
            _2585 = 0.0;
            _2587 = 0.0;
            _2589 = 0.0;
            _2591 = 0.0;
            _2593 = 0.0;
            _2595 = 0.0;
        }
        else
        {
            float _2586;
            float _2588;
            float _2590;
            float _2592;
            float _2594;
            float _2596;
            float _2746 = 0.0;
            float _2747 = 0.0;
            float _2748 = 0.0;
            float _2749 = 0.0;
            float _2750 = 0.0;
            float _2751 = 0.0;
            uint _2752 = 0u;
            uint _2761;
            bool _2762;
            for (;;)
            {
                _2761 = texelFetch(g_lightClassification, int((((_2433 << 5u) + (_2419 << 9u)) + (_2752 << 2u)) >> 2u)).x;
                _2762 = _2761 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2762)
                {
                    frontier_phi_66_pred = _2746;
                    frontier_phi_66_pred_1 = _2751;
                    frontier_phi_66_pred_2 = _2750;
                    frontier_phi_66_pred_3 = _2749;
                    frontier_phi_66_pred_4 = _2748;
                    frontier_phi_66_pred_5 = _2747;
                }
                else
                {
                    float _2891;
                    float _2892;
                    float _2893;
                    float _2894;
                    float _2895;
                    float _2896;
                    uint _2897;
                    _2891 = _2746;
                    _2892 = _2747;
                    _2893 = _2748;
                    _2894 = _2749;
                    _2895 = _2750;
                    _2896 = _2751;
                    _2897 = _2761;
                    float _2818;
                    float _2819;
                    float _2820;
                    float _2821;
                    float _2822;
                    float _2823;
                    for (;;)
                    {
                        uint _2901 = uint(findLSB(_2897)) + (_2752 << 5u);
                        uint _2898 = (_2897 + 4294967295u) & _2897;
                        uint _2903 = _2901 * 48u;
                        vec4 _2917 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2903)).x, texelFetch(g_PointLightRenderingBuffer, int(_2903 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2903 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2903 + 3u)).x));
                        uint _2923 = (_2901 * 48u) + 4u;
                        vec4 _2936 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2923)).x, texelFetch(g_PointLightRenderingBuffer, int(_2923 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2923 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2923 + 3u)).x));
                        uint _2942 = (_2901 * 48u) + 8u;
                        vec3 _2953 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2942)).x, texelFetch(g_PointLightRenderingBuffer, int(_2942 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2942 + 2u)).x));
                        float _2957 = _2917.x - _2393;
                        float _2958 = _2917.y - _2394;
                        float _2959 = _2917.z - _2395;
                        float _2960 = dot(vec3(_2957, _2958, _2959), vec3(_2957, _2958, _2959));
                        float _2963 = inversesqrt(_2960);
                        float _2964 = _2963 * _2957;
                        float _2965 = _2963 * _2958;
                        float _2966 = _2963 * _2959;
                        float _2967 = dot(vec3(_666, _669, _672), vec3(_2964, _2965, _2966));
                        float _2972 = 1.0 - (_2960 * _2917.w);
                        float _4331 = isnan(0.0) ? _2972 : (isnan(_2972) ? 0.0 : max(_2972, 0.0));
                        float _2973 = isnan(1.0) ? _4331 : (isnan(_4331) ? 1.0 : min(_4331, 1.0));
                        float _2974 = sqrt(_2960) * _2936.w;
                        float _2977 = 1.39999997615814208984375 / (_2974 + 1.39999997615814208984375);
                        float _2978 = _2977 * _2977;
                        float _2981 = ((1.0 - _2978) * _2967) + _2978;
                        float _2984 = _2974 * _2974;
                        float _2988 = ((isnan(0.0) ? _2981 : (isnan(_2981) ? 0.0 : max(_2981, 0.0))) * _2973) / ((_2984 * 0.699999988079071044921875) + 1.0);
                        float _2992 = (-0.0) - _2393;
                        float _2993 = (-0.0) - _2394;
                        float _2994 = (-0.0) - _2395;
                        float _2998 = inversesqrt(dot(vec3(_2992, _2993, _2994), vec3(_2992, _2993, _2994)));
                        float _2999 = _2998 * _2992;
                        float _3000 = _2998 * _2993;
                        float _3001 = _2998 * _2994;
                        float _3009 = exp2(log2(1.0 / ((_2984 * 3.5) + 5.0)) * 0.25);
                        float _3010 = 1.0 - _726;
                        float _3017 = sqrt(1.0 - ((1.0 - (_3010 * _3010)) * (1.0 - (_3009 * _3009))));
                        float _3018 = _3017 * _3017;
                        float _3019 = _3018 * _3018;
                        float _3020 = _2999 + _2964;
                        float _3021 = _3000 + _2965;
                        float _3022 = _3001 + _2966;
                        float _3026 = inversesqrt(dot(vec3(_3020, _3021, _3022), vec3(_3020, _3021, _3022)));
                        float _3030 = dot(vec3(_666, _669, _672), vec3(_2999, _3000, _3001));
                        float _4347 = isnan(0.0) ? _3030 : (isnan(_3030) ? 0.0 : max(_3030, 0.0));
                        float _3033 = isnan(1.0) ? _4347 : (isnan(_4347) ? 1.0 : min(_4347, 1.0));
                        float _3034 = dot(vec3(_666, _669, _672), vec3(_3026 * _3020, _3026 * _3021, _3026 * _3022));
                        float _4358 = isnan(0.0) ? _3034 : (isnan(_3034) ? 0.0 : max(_3034, 0.0));
                        float _3037 = isnan(1.0) ? _4358 : (isnan(_4358) ? 1.0 : min(_4358, 1.0));
                        float _3041 = ((_3037 * _3037) * (_3019 + (-1.0))) + 1.0;
                        float _3042 = _2977 * _3018;
                        float _3043 = _3042 * _3042;
                        float _3046 = ((1.0 - _3043) * _2967) + _3043;
                        float _4369 = isnan(0.0) ? _3046 : (isnan(_3046) ? 0.0 : max(_3046, 0.0));
                        float _3047 = isnan(1.0) ? _4369 : (isnan(_4369) ? 1.0 : min(_4369, 1.0));
                        float _3048 = 1.0 - _3018;
                        float _3058 = (0.5 / (((_3047 * ((_3033 * _3048) + _3018)) + 9.9999999392252902907785028219223e-09) + (((_3047 * _3048) + _3018) * _3033))) * _3047;
                        float _4380 = isnan(0.0) ? _3058 : (isnan(_3058) ? 0.0 : max(_3058, 0.0));
                        float _3069 = (((_3019 * 3.1415927410125732421875) * (isnan(1.0) ? _4380 : (isnan(_4380) ? 1.0 : min(_4380, 1.0)))) / ((_3041 * _3041) * ((_2984 * 2.1991131305694580078125) + 3.141590118408203125))) * _2973;
                        _2821 = (_2988 * _2936.x) + _2894;
                        _2822 = (_2988 * _2936.y) + _2895;
                        _2823 = (_2988 * _2936.z) + _2896;
                        _2818 = (_3069 * _2953.x) + _2891;
                        _2819 = (_3069 * _2953.y) + _2892;
                        _2820 = (_3069 * _2953.z) + _2893;
                        if (_2898 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2891 = _2818;
                            _2892 = _2819;
                            _2893 = _2820;
                            _2894 = _2821;
                            _2895 = _2822;
                            _2896 = _2823;
                            _2897 = _2898;
                        }
                    }
                    frontier_phi_66_pred = _2818;
                    frontier_phi_66_pred_1 = _2823;
                    frontier_phi_66_pred_2 = _2822;
                    frontier_phi_66_pred_3 = _2821;
                    frontier_phi_66_pred_4 = _2820;
                    frontier_phi_66_pred_5 = _2819;
                }
                _2586 = frontier_phi_66_pred;
                _2596 = frontier_phi_66_pred_1;
                _2594 = frontier_phi_66_pred_2;
                _2592 = frontier_phi_66_pred_3;
                _2590 = frontier_phi_66_pred_4;
                _2588 = frontier_phi_66_pred_5;
                uint _2753 = _2752 + 1u;
                if (_2753 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2746 = _2586;
                    _2747 = _2588;
                    _2748 = _2590;
                    _2749 = _2592;
                    _2750 = _2594;
                    _2751 = _2596;
                    _2752 = _2753;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2585 = _2586;
            _2587 = _2588;
            _2589 = _2590;
            _2591 = _2592;
            _2593 = _2594;
            _2595 = _2596;
        }
        uvec4 _2599 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2600 = _2599.z;
        uint _2602 = (_2600 >> 8u) & 15u;
        float _2714;
        float _2716;
        float _2718;
        float _2720;
        float _2722;
        float _2724;
        if (((4294967295u << _2602) & _2439) == 0u)
        {
            _2714 = _2585;
            _2716 = _2587;
            _2718 = _2589;
            _2720 = _2591;
            _2722 = _2593;
            _2724 = _2595;
        }
        else
        {
            float _2739 = inversesqrt(dot(vec3(_2393, _2394, _2395), vec3(_2393, _2394, _2395)));
            float _2740 = _2739 * _2393;
            float _2741 = _2739 * _2394;
            float _2742 = _2739 * _2395;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2602 < ((_2600 >> 12u) & 15u))
            {
                float _2715;
                float _2717;
                float _2719;
                float _2721;
                float _2723;
                float _2725;
                float _2874 = _2585;
                float _2875 = _2587;
                float _2876 = _2589;
                float _2877 = _2591;
                float _2878 = _2593;
                float _2879 = _2595;
                uint _2880 = _2602;
                uint _2889;
                bool _2890;
                for (;;)
                {
                    _2889 = texelFetch(g_lightClassification, int((((_2433 << 5u) + (_2419 << 9u)) + (_2880 << 2u)) >> 2u)).x;
                    _2890 = _2889 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2890)
                    {
                        frontier_phi_77_pred = _2879;
                        frontier_phi_77_pred_1 = _2878;
                        frontier_phi_77_pred_2 = _2877;
                        frontier_phi_77_pred_3 = _2876;
                        frontier_phi_77_pred_4 = _2875;
                        frontier_phi_77_pred_5 = _2874;
                    }
                    else
                    {
                        float _3083;
                        float _3084;
                        float _3085;
                        float _3086;
                        float _3087;
                        float _3088;
                        float _3378;
                        float _3379;
                        float _3380;
                        float _3381;
                        float _3382;
                        float _3383;
                        float _3096 = _2874;
                        float _3097 = _2875;
                        float _3098 = _2876;
                        float _3099 = _2877;
                        float _3100 = _2878;
                        float _3101 = _2879;
                        uint _3102 = _2889;
                        uint _3103;
                        vec4 _3128;
                        float _3129;
                        vec4 _3144;
                        vec3 _3156;
                        vec4 _3171;
                        vec4 _3187;
                        float _3234;
                        bool _3235;
                        for (;;)
                        {
                            uint _3113 = ((_2880 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3102));
                            _3103 = (_3102 + 4294967295u) & _3102;
                            uint _3115 = _3113 * 40u;
                            _3128 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3115)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3115 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3115 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3115 + 3u)).x));
                            _3129 = _3128.w;
                            uint _3131 = (_3113 * 40u) + 4u;
                            _3144 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3131)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3131 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3131 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3131 + 3u)).x));
                            uint _3146 = (_3113 * 40u) + 8u;
                            _3156 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3146)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3146 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3146 + 2u)).x));
                            uint _3158 = (_3113 * 40u) + 16u;
                            _3171 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3158)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3158 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3158 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3158 + 3u)).x));
                            uint _3174 = (_3113 * 40u) + 20u;
                            _3187 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3174)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3174 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3174 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3174 + 3u)).x));
                            uint _3190 = (_3113 * 40u) + 24u;
                            vec4 _3203 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3190)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3190 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3190 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3190 + 3u)).x));
                            uint _3209 = (_3113 * 40u) + 28u;
                            vec4 _3222 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3209)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3209 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3209 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3209 + 3u)).x));
                            _3234 = fma(_2395, _3222.z, fma(_2394, _3222.y, _3222.x * _2393)) + _3222.w;
                            _3235 = !((fma(_2395, _3203.z, fma(_2394, _3203.y, _3203.x * _2393)) + _3203.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3235)
                            {
                                float _3262 = _3128.x - _2393;
                                float _3263 = _3128.y - _2394;
                                float _3264 = _3128.z - _2395;
                                float _3265 = dot(vec3(_3262, _3263, _3264), vec3(_3262, _3263, _3264));
                                float _3268 = inversesqrt(_3265);
                                float _3269 = _3268 * _3262;
                                float _3270 = _3268 * _3263;
                                float _3271 = _3268 * _3264;
                                float _3275 = 1.0 - (_3265 / (_3129 * _3129));
                                float _4391 = isnan(0.0) ? _3275 : (isnan(_3275) ? 0.0 : max(_3275, 0.0));
                                float _3276 = isnan(1.0) ? _4391 : (isnan(_4391) ? 1.0 : min(_4391, 1.0));
                                float _3280 = sqrt(_3265) * _3144.w;
                                float _3282 = 1.39999997615814208984375 / (_3280 + 1.39999997615814208984375);
                                float _3283 = _3282 * _3282;
                                float _3286 = ((1.0 - _3283) * dot(vec3(_3269, _3270, _3271), vec3(_666, _669, _672))) + _3283;
                                float _3289 = _3280 * _3280;
                                float _3293 = (fma(_2395, _3171.z, fma(_2394, _3171.y, _3171.x * _2393)) + _3171.w) / _3234;
                                float _3294 = (fma(_2395, _3187.z, fma(_2394, _3187.y, _3187.x * _2393)) + _3187.w) / _3234;
                                float _3298 = 1.0 - dot(vec2(_3293, _3294), vec2(_3293, _3294));
                                float _4407 = isnan(0.0) ? _3298 : (isnan(_3298) ? 0.0 : max(_3298, 0.0));
                                float _3299 = isnan(1.0) ? _4407 : (isnan(_4407) ? 1.0 : min(_4407, 1.0));
                                float _3300 = _3299 * (((isnan(0.0) ? _3286 : (isnan(_3286) ? 0.0 : max(_3286, 0.0))) * _3276) / ((_3289 * 0.699999988079071044921875) + 1.0));
                                float _3312 = exp2(log2(1.0 / ((_3289 * 3.5) + 5.0)) * 0.25);
                                float _3313 = 1.0 - _726;
                                float _3320 = sqrt(1.0 - ((1.0 - (_3313 * _3313)) * (1.0 - (_3312 * _3312))));
                                float _3321 = _3320 * _3320;
                                float _3322 = _3321 * _3321;
                                float _3323 = _3269 - _2740;
                                float _3324 = _3270 - _2741;
                                float _3325 = _3271 - _2742;
                                float _3329 = inversesqrt(dot(vec3(_3323, _3324, _3325), vec3(_3323, _3324, _3325)));
                                float _3333 = dot(vec3(_666, _669, _672), vec3((-0.0) - _2740, (-0.0) - _2741, (-0.0) - _2742));
                                float _4418 = isnan(0.0) ? _3333 : (isnan(_3333) ? 0.0 : max(_3333, 0.0));
                                float _3336 = isnan(1.0) ? _4418 : (isnan(_4418) ? 1.0 : min(_4418, 1.0));
                                float _3337 = dot(vec3(_666, _669, _672), vec3(_3329 * _3323, _3329 * _3324, _3329 * _3325));
                                float _4429 = isnan(0.0) ? _3337 : (isnan(_3337) ? 0.0 : max(_3337, 0.0));
                                float _3340 = isnan(1.0) ? _4429 : (isnan(_4429) ? 1.0 : min(_4429, 1.0));
                                float _3344 = ((_3340 * _3340) * (_3322 + (-1.0))) + 1.0;
                                float _3345 = _3282 * _3321;
                                float _3346 = _3345 * _3345;
                                float _3352 = ((1.0 - _3346) * dot(vec3(_666, _669, _672), vec3(_3269, _3270, _3271))) + _3346;
                                float _4440 = isnan(0.0) ? _3352 : (isnan(_3352) ? 0.0 : max(_3352, 0.0));
                                float _3353 = isnan(1.0) ? _4440 : (isnan(_4440) ? 1.0 : min(_4440, 1.0));
                                float _3354 = 1.0 - _3321;
                                float _3364 = (0.5 / (((_3353 * ((_3336 * _3354) + _3321)) + 9.9999999392252902907785028219223e-09) + (((_3353 * _3354) + _3321) * _3336))) * _3353;
                                float _4451 = isnan(0.0) ? _3364 : (isnan(_3364) ? 0.0 : max(_3364, 0.0));
                                float _3374 = (_3299 * _3276) * (((_3322 * 3.1415927410125732421875) * (isnan(1.0) ? _4451 : (isnan(_4451) ? 1.0 : min(_4451, 1.0)))) / ((_3344 * _3344) * ((_3289 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3300 * _3144.y;
                                frontier_phi_83_pred_1 = _3300 * _3144.x;
                                frontier_phi_83_pred_2 = _3374 * _3156.z;
                                frontier_phi_83_pred_3 = _3374 * _3156.y;
                                frontier_phi_83_pred_4 = _3374 * _3156.x;
                                frontier_phi_83_pred_5 = _3300 * _3144.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3382 = frontier_phi_83_pred;
                            _3381 = frontier_phi_83_pred_1;
                            _3380 = frontier_phi_83_pred_2;
                            _3379 = frontier_phi_83_pred_3;
                            _3378 = frontier_phi_83_pred_4;
                            _3383 = frontier_phi_83_pred_5;
                            _3086 = _3381 + _3099;
                            _3087 = _3382 + _3100;
                            _3088 = _3383 + _3101;
                            _3083 = _3378 + _3096;
                            _3084 = _3379 + _3097;
                            _3085 = _3380 + _3098;
                            if (_3103 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3096 = _3083;
                                _3097 = _3084;
                                _3098 = _3085;
                                _3099 = _3086;
                                _3100 = _3087;
                                _3101 = _3088;
                                _3102 = _3103;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3088;
                        frontier_phi_77_pred_1 = _3087;
                        frontier_phi_77_pred_2 = _3086;
                        frontier_phi_77_pred_3 = _3085;
                        frontier_phi_77_pred_4 = _3084;
                        frontier_phi_77_pred_5 = _3083;
                    }
                    _2725 = frontier_phi_77_pred;
                    _2723 = frontier_phi_77_pred_1;
                    _2721 = frontier_phi_77_pred_2;
                    _2719 = frontier_phi_77_pred_3;
                    _2717 = frontier_phi_77_pred_4;
                    _2715 = frontier_phi_77_pred_5;
                    uint _2881 = _2880 + 1u;
                    if (_2881 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2874 = _2715;
                        _2875 = _2717;
                        _2876 = _2719;
                        _2877 = _2721;
                        _2878 = _2723;
                        _2879 = _2725;
                        _2880 = _2881;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2719;
                frontier_phi_58_59_ladder_1 = _2725;
                frontier_phi_58_59_ladder_2 = _2723;
                frontier_phi_58_59_ladder_3 = _2721;
                frontier_phi_58_59_ladder_4 = _2717;
                frontier_phi_58_59_ladder_5 = _2715;
            }
            else
            {
                frontier_phi_58_59_ladder = _2589;
                frontier_phi_58_59_ladder_1 = _2595;
                frontier_phi_58_59_ladder_2 = _2593;
                frontier_phi_58_59_ladder_3 = _2591;
                frontier_phi_58_59_ladder_4 = _2587;
                frontier_phi_58_59_ladder_5 = _2585;
            }
            _2714 = frontier_phi_58_59_ladder_5;
            _2716 = frontier_phi_58_59_ladder_4;
            _2718 = frontier_phi_58_59_ladder;
            _2720 = frontier_phi_58_59_ladder_3;
            _2722 = frontier_phi_58_59_ladder_2;
            _2724 = frontier_phi_58_59_ladder_1;
        }
        float _2729 = isnan(1.0) ? _710 : (isnan(_710) ? 1.0 : min(_710, 1.0));
        _2452 = (_2729 * _2720) + _1907;
        _2454 = (_2729 * _2722) + _1909;
        _2456 = (_2729 * _2724) + _1911;
        _2458 = ((_2714 * 0.039999999105930328369140625) * _2729) + _2237;
        _2460 = ((_2716 * 0.039999999105930328369140625) * _2729) + _2239;
        _2462 = ((_2718 * 0.039999999105930328369140625) * _2729) + _2241;
    }
    else
    {
        _2452 = _1907;
        _2454 = _1909;
        _2456 = _1911;
        _2458 = _2237;
        _2460 = _2239;
        _2462 = _2241;
    }
    uint _2468 = _686 + uint(cbMatDynParam._m0[0u].w);
    float _2474 = cbMtdParam._m0[13u].y * cbMtdParam._m0[15u].y;
    float _2480 = (((((_2474 * cbMtdParam._m0[10u].x) * _408.x) * _431) * (((1.0 - _485) * cbMtdParam._m0[16u].z) + _485)) * _522) * cbInstanceData._m0[_2468].x;
    float _2486 = (((((_2474 * cbMtdParam._m0[10u].y) * _408.y) * _431) * (((1.0 - _487) * cbMtdParam._m0[16u].z) + _487)) * _522) * cbInstanceData._m0[_2468].y;
    float _2492 = (((((_2474 * cbMtdParam._m0[10u].z) * _408.z) * _431) * (((1.0 - _489) * cbMtdParam._m0[16u].z) + _489)) * _522) * cbInstanceData._m0[_2468].z;
    float _4467 = isnan(0.0) ? _696 : (isnan(_696) ? 0.0 : max(_696, 0.0));
    float _4478 = isnan(0.0) ? _697 : (isnan(_697) ? 0.0 : max(_697, 0.0));
    float _4489 = isnan(0.0) ? _698 : (isnan(_698) ? 0.0 : max(_698, 0.0));
    float _2509 = (((isnan(1.0) ? _4467 : (isnan(_4467) ? 1.0 : min(_4467, 1.0))) * (_2452 + ((isnan(0.0) ? _1468 : (isnan(_1468) ? 0.0 : max(_1468, 0.0))) * _710))) + ((_2458 + ((isnan(0.0) ? _1760 : (isnan(_1760) ? 0.0 : max(_1760, 0.0))) * _1547)) * cbPerFrame._m0[3u].x)) + _2480;
    float _2511 = (_2486 + ((_2460 + ((isnan(0.0) ? _1763 : (isnan(_1763) ? 0.0 : max(_1763, 0.0))) * _1547)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4478 : (isnan(_4478) ? 1.0 : min(_4478, 1.0))) * (_2454 + ((isnan(0.0) ? _1471 : (isnan(_1471) ? 0.0 : max(_1471, 0.0))) * _710)));
    float _2513 = (_2492 + ((_2462 + ((isnan(0.0) ? _1766 : (isnan(_1766) ? 0.0 : max(_1766, 0.0))) * _1547)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4489 : (isnan(_4489) ? 1.0 : min(_4489, 1.0))) * (_2456 + ((isnan(0.0) ? _1474 : (isnan(_1474) ? 0.0 : max(_1474, 0.0))) * _710)));
    float _2514 = isnan(0.0) ? _2509 : (isnan(_2509) ? 0.0 : max(_2509, 0.0));
    float _2515 = isnan(0.0) ? _2511 : (isnan(_2511) ? 0.0 : max(_2511, 0.0));
    float _2516 = isnan(0.0) ? _2513 : (isnan(_2513) ? 0.0 : max(_2513, 0.0));
    float _2522 = cbMtdParam._m0[2u].x * _2480;
    float _2523 = cbMtdParam._m0[2u].y * _2486;
    float _2524 = cbMtdParam._m0[2u].z * _2492;
    float _4515 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2526 = isnan(1.0) ? _4515 : (isnan(_4515) ? 1.0 : min(_4515, 1.0));
    uint _2527 = _685 + 6u;
    float _2535 = _647 / cbSceneParam._m0[86u].x;
    float _2536 = _648 / cbSceneParam._m0[86u].y;
    vec4 _2550 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2535, _2536, (log2((isnan(cbSceneParam._m0[77u].w) ? _570 : (isnan(_570) ? cbSceneParam._m0[77u].w : min(_570, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2552 = _2550.x;
    float _2553 = _2550.y;
    float _2554 = _2550.z;
    float _2555 = _2550.w;
    float _2647;
    float _2649;
    float _2651;
    float _2653;
    if (_570 > cbSceneParam._m0[78u].w)
    {
        float _2610 = isnan(_570) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _570 : min(cbSceneParam._m0[80u].w, _570));
        float _2611 = _2610 / _570;
        float _2622 = _2611 * _620;
        float _2623 = _621 * _2611;
        float _2624 = (-0.0) - _2623;
        float _2625 = _2611 * _622;
        float _2627 = (cbSceneParam._m0[77u].w * _2624) / _2610;
        float _2628 = _2627 + cbSceneParam._m0[79u].w;
        float _2629 = cbSceneParam._m0[79u].w - _2623;
        float _2635 = sqrt(((_2622 * _2622) + (_2623 * _2623)) + (_2625 * _2625));
        float _2638 = (1.0 - (cbSceneParam._m0[77u].w / _2610)) * _2635;
        float _2643 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2645 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2831;
        if (abs((_2624 - _2627) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2831 = ((((_2628 > 0.0) ? exp2(_2643 * _2628) : (2.0 - exp2(_2645 * _2628))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2638;
        }
        else
        {
            float _2775 = 1.0 / cbSceneParam._m0[80u].x;
            float _2776 = isnan(_2629) ? _2628 : (isnan(_2628) ? _2629 : max(_2628, _2629));
            float _2777 = isnan(_2629) ? _2628 : (isnan(_2628) ? _2629 : min(_2628, _2629));
            float _2786 = isnan(0.0) ? _2776 : (isnan(_2776) ? 0.0 : min(_2776, 0.0));
            float _2787 = isnan(0.0) ? _2777 : (isnan(_2777) ? 0.0 : min(_2777, 0.0));
            _2831 = ((abs(_2635 / _2624) * cbSceneParam._m0[80u].y) * ((((_2786 - _2787) * 2.0) - ((exp2(_2643 * (isnan(0.0) ? _2776 : (isnan(_2776) ? 0.0 : max(_2776, 0.0)))) - exp2(_2643 * (isnan(0.0) ? _2777 : (isnan(_2777) ? 0.0 : max(_2777, 0.0))))) * _2775)) - ((exp2(_2645 * _2786) - exp2(_2645 * _2787)) * _2775))) + (_2638 * cbSceneParam._m0[80u].z);
        }
        vec4 _2833 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2535, _2536, 1.0), 0.0);
        float _2842 = exp2((_2831 * (-1.44269502162933349609375)) * (1.0 - _2833.w));
        float _2843 = log2(_2842);
        float _2859 = log2(_2555);
        _2647 = (exp2(_2859 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2843 * cbSceneParam._m0[78u].x)) * _2833.x) / cbSceneParam._m0[78u].x)) + _2552;
        _2649 = (exp2(_2859 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2843 * cbSceneParam._m0[78u].y)) * _2833.y) / cbSceneParam._m0[78u].y)) + _2553;
        _2651 = (exp2(_2859 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2843 * cbSceneParam._m0[78u].z)) * _2833.z) / cbSceneParam._m0[78u].z)) + _2554;
        _2653 = _2842 * _2555;
    }
    else
    {
        _2647 = _2552;
        _2649 = _2553;
        _2651 = _2554;
        _2653 = _2555;
    }
    bool _2869;
    vec4 _2663;
    vec4 _2685;
    float _2687;
    float _2691;
    float _2692;
    float _2693;
    float _2696;
    float _2699;
    float _2702;
    float _2703;
    bool _2713;
    for (;;)
    {
        _2663 = cbMatDynParam._m0[0u];
        float _2665 = roundEven(_2663.y);
        bool _2666 = _2665 == 3.0;
        float _2667 = log2(_2653);
        float _2671 = exp2(_2667 * cbSceneParam._m0[78u].x);
        float _2672 = exp2(_2667 * cbSceneParam._m0[78u].y);
        float _2673 = exp2(_2667 * cbSceneParam._m0[78u].z);
        float _2674 = _2671 * _2514;
        float _2675 = _2672 * _2515;
        float _2676 = _2673 * _2516;
        float _2683 = _636 + (-0.5);
        _2685 = cbMtdParam._m0[1u];
        _2687 = _2685.y * _2683;
        float _2690 = (_2665 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2691 = _2690 * (_2666 ? _2674 : (_2674 + (cbSceneParam._m0[72u].w * _2647)));
        _2692 = _2690 * (_2666 ? _2675 : (_2675 + (cbSceneParam._m0[72u].w * _2649)));
        _2693 = _2690 * (_2666 ? _2676 : (_2676 + (cbSceneParam._m0[72u].w * _2651)));
        _2696 = ((_2522 * _2526) * _2671) * _2690;
        _2699 = ((_2523 * _2526) * _2672) * _2690;
        _2702 = ((_2524 * _2526) * _2673) * _2690;
        _2703 = _2683 * 0.999000012874603271484375;
        _2713 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2713)
        {
            if ((cbInstanceData._m0[_685 + 7u].x + _2703) < 0.5)
            {
                _2869 = true;
                break;
            }
        }
        uint _2810 = _686 + uint(_2663.w);
        if ((cbInstanceData._m0[_2810].w < 1.0) && ((cbInstanceData._m0[_2810].w + _2703) < 0.5))
        {
            _2869 = true;
            break;
        }
        if ((_2687 + 1.0) < _2685.x)
        {
            _2869 = true;
            break;
        }
        _2869 = false;
        break;
    }
    float _3074;
    if (_2869)
    {
        discard_state = true;
        _3074 = 0.0;
    }
    else
    {
        _3074 = cbInstanceData._m0[_2527].w;
    }
    SV_Target.x = _2691;
    SV_Target.y = _2692;
    SV_Target.z = _2693;
    SV_Target.w = _3074;
    SV_Target_1.x = _2696;
    SV_Target_1.y = _2699;
    SV_Target_1.z = _2702;
    SV_Target_1.w = cbInstanceData._m0[_2527].w;
    discard_exit();
}


