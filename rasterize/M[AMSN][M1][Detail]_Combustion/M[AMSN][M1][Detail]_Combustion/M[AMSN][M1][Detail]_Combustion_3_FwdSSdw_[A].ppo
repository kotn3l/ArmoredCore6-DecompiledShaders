#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[18];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_M1_Detail_Combustion_snp_0_Texture2D_10;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_M1_Detail_Combustion_snp_0_Texture2D_12;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_M1_Detail_Combustion_snp_0_Texture2D_13;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_M1_Detail_Combustion_snp_0_Texture2D_14;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_M1_Detail_Combustion_snp_0_Texture2D_20;
layout(set = 0, binding = 5) uniform texture2D M_AMSN_M1_Detail_Combustion_snp_0_Texture2D_23;
layout(set = 0, binding = 6) uniform texture2D M_AMSN_M1_Detail_Combustion_snp_0_Texture2D_4;
layout(set = 0, binding = 7) uniform texture2D M_AMSN_M1_Detail_Combustion_snp_0_Texture2D_7;
layout(set = 0, binding = 8) uniform texture2D M_AMSN_M1_Detail_Combustion_snp_0_Texture2D_9;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in float TEXCOORD;
layout(location = 4, component = 1) in float TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 4, component = 2) in float TEXCOORD_6;
layout(location = 4, component = 3) in float TEXCOORD_7;
layout(location = 6) in float TEXCOORD_8;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1148;
float _3609;
float _3610;
float _3611;
float _3612;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _204 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _205 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _206 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _212 = inversesqrt(dot(vec3(_204, _205, _206), vec3(_204, _205, _206)));
    float _219 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _226 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _248 = texture(sampler2D(M_AMSN_M1_Detail_Combustion_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1) + cbTextureTilingScale._m0[2u].w));
    float _254 = _248.x * cbMtdParam._m0[9u].x;
    float _255 = _248.y * cbMtdParam._m0[9u].y;
    float _256 = _248.z * cbMtdParam._m0[9u].z;
    vec4 _280 = texture(sampler2D(M_AMSN_M1_Detail_Combustion_snp_0_Texture2D_20, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD_1) + cbTextureTilingScale._m0[4u].w));
    vec4 _300 = texture(sampler2D(M_AMSN_M1_Detail_Combustion_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD_1) + cbTextureTilingScale._m0[8u].w));
    float _311 = (TEXCOORD_6 - ((cbMtdParam._m0[15u].w * (1.0 - TEXCOORD_6)) * (_300.x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[15u].z + 1.0);
    float _3621 = isnan(0.0) ? _311 : (isnan(_311) ? 0.0 : max(_311, 0.0));
    float _312 = isnan(1.0) ? _3621 : (isnan(_3621) ? 1.0 : min(_3621, 1.0));
    float _319 = (_312 * ((_280.x * cbMtdParam._m0[12u].x) - _254)) + _254;
    float _320 = (_312 * ((_280.y * cbMtdParam._m0[12u].y) - _255)) + _255;
    float _321 = (_312 * ((_280.z * cbMtdParam._m0[12u].z) - _256)) + _256;
    vec4 _333 = texture(sampler2D(M_AMSN_M1_Detail_Combustion_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_1) + cbTextureTilingScale._m0[3u].w));
    float _335 = _333.x;
    float _337 = _335 - (_335 * _312);
    vec4 _349 = texture(sampler2D(M_AMSN_M1_Detail_Combustion_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1) + cbTextureTilingScale._m0[1u].w));
    vec4 _372 = texture(sampler2D(M_AMSN_M1_Detail_Combustion_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD_1) + cbTextureTilingScale._m0[7u].w));
    float _376 = _372.z;
    float _379 = (_372.x * 2.0) + (-1.0);
    float _380 = (_372.y * 2.0) + (-1.0);
    float _381 = dot(vec2(_379, _380), vec2(_379, _380));
    float _3632 = isnan(0.0) ? _381 : (isnan(_381) ? 0.0 : max(_381, 0.0));
    float _386 = sqrt(1.0 - (isnan(1.0) ? _3632 : (isnan(_3632) ? 1.0 : min(_3632, 1.0))));
    float _394 = (((_349.z - _376) * TEXCOORD_6) * cbMtdParam._m0[16u].x) + _376;
    float _414 = (cbMtdParam._m0[17u].z * cbPerFrame._m0[22u].x) + TEXCOORD;
    float _415 = (cbMtdParam._m0[17u].w * cbPerFrame._m0[22u].x) + TEXCOORD_1;
    vec4 _428 = texture(sampler2D(M_AMSN_M1_Detail_Combustion_snp_0_Texture2D_4, SS_DiffuseMap), vec2((_414 * cbTextureTilingScale._m0[6u].x) + cbTextureTilingScale._m0[6u].z, (_415 * cbTextureTilingScale._m0[6u].y) + cbTextureTilingScale._m0[6u].w));
    float _442 = abs((fract(cbMtdParam._m0[13u].z * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _3643 = isnan(0.0) ? _442 : (isnan(_442) ? 0.0 : max(_442, 0.0));
    float _443 = isnan(1.0) ? _3643 : (isnan(_3643) ? 1.0 : min(_3643, 1.0));
    float _451 = (((_443 * _443) * (3.0 - (_443 * 2.0))) * cbMtdParam._m0[14u].x) - cbMtdParam._m0[14u].y;
    float _460 = cbMtdParam._m0[14u].z * cbPerFrame._m0[22u].x;
    float _468 = abs((fract(cbMtdParam._m0[14u].w * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _3654 = isnan(0.0) ? _468 : (isnan(_468) ? 0.0 : max(_468, 0.0));
    float _469 = isnan(1.0) ? _3654 : (isnan(_3654) ? 1.0 : min(_3654, 1.0));
    float _473 = (_469 * _469) * (3.0 - (_469 * 2.0));
    float _474 = _473 * cbMtdParam._m0[17u].x;
    float _475 = _473 * cbMtdParam._m0[17u].y;
    float _476 = sin(_460);
    float _477 = cos(_460);
    float _478 = TEXCOORD - _474;
    float _479 = TEXCOORD_1 - _475;
    vec4 _499 = texture(sampler2D(M_AMSN_M1_Detail_Combustion_snp_0_Texture2D_10, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (_474 + fma(_479, (-0.0) - _476, _478 * _477))) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (fma(_479, _477, _478 * _476) + _475)) + cbTextureTilingScale._m0[0u].w));
    float _505 = (cbMtdParam._m0[11u].x * cbMtdParam._m0[13u].w) * _499.x;
    float _507 = (cbMtdParam._m0[11u].y * cbMtdParam._m0[13u].w) * _499.y;
    float _509 = (cbMtdParam._m0[11u].z * cbMtdParam._m0[13u].w) * _499.z;
    vec4 _532 = texture(sampler2D(M_AMSN_M1_Detail_Combustion_snp_0_Texture2D_23, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * _414) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _415) + cbTextureTilingScale._m0[5u].w));
    float _541 = (TEXCOORD_3.x - ((cbMtdParam._m0[16u].w * (1.0 - TEXCOORD_3.x)) * (_532.x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[13u].x + 1.0);
    float _3665 = isnan(0.0) ? _541 : (isnan(_541) ? 0.0 : max(_541, 0.0));
    float _542 = isnan(1.0) ? _3665 : (isnan(_3665) ? 1.0 : min(_3665, 1.0));
    float _552 = (((((_349.x * 2.0) + (-1.0)) * TEXCOORD_6) * cbMtdParam._m0[15u].x) + _379) + (cbMtdParam._m0[16u].y * _379);
    float _554 = (((((_349.y * 2.0) + (-1.0)) * TEXCOORD_7) * cbMtdParam._m0[15u].x) + _380) + (cbMtdParam._m0[16u].y * _380);
    float _557 = fma(_386, _219 * NORMAL.x, fma(_554, _226 * TANGENT.x, (_212 * _204) * _552));
    float _560 = fma(_386, _219 * NORMAL.y, fma(_554, _226 * TANGENT.y, (_212 * _205) * _552));
    float _563 = fma(_386, _219 * NORMAL.z, fma(_554, _226 * TANGENT.z, (_212 * _206) * _552));
    float _567 = inversesqrt(dot(vec3(_557, _560, _563), vec3(_557, _560, _563)));
    float _568 = _567 * _557;
    float _569 = _567 * _560;
    float _570 = _567 * _563;
    float _3676 = isnan(0.0) ? _394 : (isnan(_394) ? 0.0 : max(_394, 0.0));
    float _571 = isnan(1.0) ? _3676 : (isnan(_3676) ? 1.0 : min(_3676, 1.0));
    float _3687 = isnan(0.0) ? _319 : (isnan(_319) ? 0.0 : max(_319, 0.0));
    float _3698 = isnan(0.0) ? _320 : (isnan(_320) ? 0.0 : max(_320, 0.0));
    float _3709 = isnan(0.0) ? _321 : (isnan(_321) ? 0.0 : max(_321, 0.0));
    float _3720 = isnan(0.0) ? _337 : (isnan(_337) ? 0.0 : max(_337, 0.0));
    float _575 = isnan(1.0) ? _3720 : (isnan(_3720) ? 1.0 : min(_3720, 1.0));
    float _591 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _631 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _641 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _631);
    float _642 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _631);
    float _643 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _631);
    float _647 = inversesqrt(dot(vec3(_641, _642, _643), vec3(_641, _642, _643)));
    float _648 = _641 * _647;
    float _649 = _642 * _647;
    float _650 = _643 * _647;
    vec4 _655 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _657 = _655.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _828 = sqrt(((_641 * _641) + (_642 * _642)) + (_643 * _643));
        float _834 = (cbMatDynParam._m0[5u].x * _828) + cbMatDynParam._m0[5u].y;
        float _3731 = isnan(0.0) ? _834 : (isnan(_834) ? 0.0 : max(_834, 0.0));
        float _835 = isnan(1.0) ? _3731 : (isnan(_3731) ? 1.0 : min(_3731, 1.0));
        float _839 = (cbMatDynParam._m0[5u].z * _828) + cbMatDynParam._m0[5u].w;
        float _3742 = isnan(0.0) ? _839 : (isnan(_839) ? 0.0 : max(_839, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3742 : (isnan(_3742) ? 1.0 : min(_3742, 1.0))) - _835)) + _835) < ((_657 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _668 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _669 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _687 = fma(_570, cbSceneParam._m0[5u].z, fma(_569, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _568));
    float _690 = fma(_570, cbSceneParam._m0[6u].z, fma(_569, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _568));
    float _693 = fma(_570, cbSceneParam._m0[7u].z, fma(_569, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _568));
    uint _706 = uint(roundEven(NORMAL.w)) * 13u;
    uint _707 = _706 + 9u;
    uint _708 = _707 + uint(cbMatDynParam._m0[0u].w);
    float _714 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3687 : (isnan(_3687) ? 1.0 : min(_3687, 1.0)))) * cbInstanceData._m0[_708].x;
    float _715 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3698 : (isnan(_3698) ? 1.0 : min(_3698, 1.0)))) * cbInstanceData._m0[_708].y;
    float _716 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3709 : (isnan(_3709) ? 1.0 : min(_3709, 1.0)))) * cbInstanceData._m0[_708].z;
    float _3753 = isnan(0.0) ? _714 : (isnan(_714) ? 0.0 : max(_714, 0.0));
    float _717 = isnan(1.0) ? _3753 : (isnan(_3753) ? 1.0 : min(_3753, 1.0));
    float _3764 = isnan(0.0) ? _715 : (isnan(_715) ? 0.0 : max(_715, 0.0));
    float _718 = isnan(1.0) ? _3764 : (isnan(_3764) ? 1.0 : min(_3764, 1.0));
    float _3775 = isnan(0.0) ? _716 : (isnan(_716) ? 0.0 : max(_716, 0.0));
    float _719 = isnan(1.0) ? _3775 : (isnan(_3775) ? 1.0 : min(_3775, 1.0));
    float _720 = 1.0 - _575;
    float _721 = _717 * _720;
    float _722 = _718 * _720;
    float _723 = _719 * _720;
    float _728 = (_717 + (-0.039999999105930328369140625)) * _575;
    float _729 = (_718 + (-0.039999999105930328369140625)) * _575;
    float _730 = (_719 + (-0.039999999105930328369140625)) * _575;
    float _731 = _728 + 0.039999999105930328369140625;
    float _733 = _729 + 0.039999999105930328369140625;
    float _734 = _730 + 0.039999999105930328369140625;
    vec4 _743 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _668, cbSceneParam._m0[86u].y * _669));
    float _746 = _743.x * TEXCOORD_3.w;
    float _747 = dot(vec3(_568, _569, _570), vec3(_648, _649, _650));
    float _750 = _747 * 2.0;
    float _754 = (_750 * _568) - _648;
    float _755 = (_750 * _569) - _649;
    float _756 = (_750 * _570) - _650;
    float _760 = abs(dot(vec3(_648, _649, _650), vec3(_568, _569, _570)));
    float _3786 = isnan(0.0) ? _760 : (isnan(_760) ? 0.0 : max(_760, 0.0));
    float _762 = sqrt(_571);
    float _774 = exp2((_762 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3786 : (isnan(_3786) ? 1.0 : min(_3786, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_762 * 3.0));
    float _780 = (1.0 - _774) * ((_762 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _781 = _774 * _762;
    float _809 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _813 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _817 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1147;
    float _1149;
    float _1150;
    float _1151;
    float _1152;
    float _1153;
    float _1154;
    float _1155;
    float _1156;
    float _1157;
    float _1158;
    float _1159;
    float _1160;
    float _1161;
    float _1162;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _872 = fma(_817, cbModelParam._m0[26u].z, fma(_813, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _809));
        float _876 = fma(_817, cbModelParam._m0[27u].z, fma(_813, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _809));
        float _880 = fma(_817, cbModelParam._m0[28u].z, fma(_813, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _809));
        float _905 = _809 + _568;
        float _906 = _813 + _569;
        float _907 = _817 + _570;
        float _917 = fma(_907, cbModelParam._m0[26u].z, fma(_906, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _905)) - _872;
        float _918 = fma(_907, cbModelParam._m0[27u].z, fma(_906, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _905)) - _876;
        float _919 = fma(_907, cbModelParam._m0[28u].z, fma(_906, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _905)) - _880;
        float _923 = inversesqrt(dot(vec3(_917, _918, _919), vec3(_917, _918, _919)));
        float _936 = ((_923 * _917) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_872 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _937 = ((_923 * _918) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_876 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _938 = ((_923 * _919) / cbModelParam._m0[34u].z) + ((((((_880 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _941 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_936, _937, _938), 0.0);
        vec4 _948 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_936, _937, _938), 0.0);
        vec4 _955 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_936, _937, _938), 0.0);
        vec4 _962 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_936, _937, _938), 0.0);
        float _975 = exp2((_941.w + (-0.5)) * 20.0) * 2.0;
        float _976 = _975 * (_941.x + (-0.5));
        float _977 = _975 * (_941.y + (-0.5));
        float _978 = _975 * (_941.z + (-0.5));
        float _985 = exp2((_948.w + (-0.5)) * 20.0) * 2.0;
        float _986 = _985 * (_948.x + (-0.5));
        float _987 = _985 * (_948.y + (-0.5));
        float _988 = _985 * (_948.z + (-0.5));
        float _995 = exp2((_955.w + (-0.5)) * 20.0) * 2.0;
        float _996 = _995 * (_955.x + (-0.5));
        float _997 = _995 * (_955.y + (-0.5));
        float _998 = _995 * (_955.z + (-0.5));
        float _1005 = exp2((_962.w + (-0.5)) * 20.0) * 2.0;
        float _1006 = _1005 * (_962.x + (-0.5));
        float _1007 = _1005 * (_962.y + (-0.5));
        float _1008 = _1005 * (_962.z + (-0.5));
        float _1009 = isnan(0.0) ? _1006 : (isnan(_1006) ? 0.0 : max(_1006, 0.0));
        float _1010 = isnan(0.0) ? _1007 : (isnan(_1007) ? 0.0 : max(_1007, 0.0));
        float _1011 = isnan(0.0) ? _1008 : (isnan(_1008) ? 0.0 : max(_1008, 0.0));
        float _1012 = _976 * 0.5;
        float _1013 = _986 * 0.5;
        float _1014 = _996 * 0.5;
        float _1015 = dot(vec3(_1012, _1013, _1014), vec3(_1012, _1013, _1014));
        float _1020 = (_1015 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1015);
        float _1029 = (dot(vec3(_568, _569, _570), vec3(_1020 * _1012, _1020 * _1013, _1020 * _1014)) + 1.0) * 0.5;
        float _3812 = isnan(0.0) ? _1029 : (isnan(_1029) ? 0.0 : max(_1029, 0.0));
        float _1039 = sqrt(((_1013 * _1013) + (_1012 * _1012)) + (_1014 * _1014)) / (_1009 + 9.9999997473787516355514526367188e-06);
        float _3823 = isnan(0.0) ? _1039 : (isnan(_1039) ? 0.0 : max(_1039, 0.0));
        float _1040 = isnan(1.0) ? _3823 : (isnan(_3823) ? 1.0 : min(_3823, 1.0));
        float _1041 = _1040 * 2.0;
        float _1045 = (1.0 - _1040) / (_1040 + 1.0);
        float _3834 = isnan(0.0) ? _1045 : (isnan(_1045) ? 0.0 : max(_1045, 0.0));
        float _1046 = isnan(1.0) ? _3834 : (isnan(_3834) ? 1.0 : min(_3834, 1.0));
        float _1055 = ((((1.0 - _1046) * (_1041 + 2.0)) * exp2(log2(isnan(1.0) ? _3812 : (isnan(_3812) ? 1.0 : min(_3812, 1.0))) * (_1041 + 1.0))) + _1046) * _1009;
        float _1056 = _977 * 0.5;
        float _1057 = _987 * 0.5;
        float _1058 = _997 * 0.5;
        float _1059 = dot(vec3(_1056, _1057, _1058), vec3(_1056, _1057, _1058));
        float _1064 = (_1059 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1059);
        float _1072 = (dot(vec3(_568, _569, _570), vec3(_1064 * _1056, _1064 * _1057, _1064 * _1058)) + 1.0) * 0.5;
        float _3845 = isnan(0.0) ? _1072 : (isnan(_1072) ? 0.0 : max(_1072, 0.0));
        float _1081 = sqrt(((_1057 * _1057) + (_1056 * _1056)) + (_1058 * _1058)) / (_1010 + 9.9999997473787516355514526367188e-06);
        float _3856 = isnan(0.0) ? _1081 : (isnan(_1081) ? 0.0 : max(_1081, 0.0));
        float _1082 = isnan(1.0) ? _3856 : (isnan(_3856) ? 1.0 : min(_3856, 1.0));
        float _1083 = _1082 * 2.0;
        float _1087 = (1.0 - _1082) / (_1082 + 1.0);
        float _3867 = isnan(0.0) ? _1087 : (isnan(_1087) ? 0.0 : max(_1087, 0.0));
        float _1088 = isnan(1.0) ? _3867 : (isnan(_3867) ? 1.0 : min(_3867, 1.0));
        float _1097 = ((((1.0 - _1088) * (_1083 + 2.0)) * exp2(log2(isnan(1.0) ? _3845 : (isnan(_3845) ? 1.0 : min(_3845, 1.0))) * (_1083 + 1.0))) + _1088) * _1010;
        float _1098 = _978 * 0.5;
        float _1099 = _988 * 0.5;
        float _1100 = _998 * 0.5;
        float _1101 = dot(vec3(_1098, _1099, _1100), vec3(_1098, _1099, _1100));
        float _1106 = (_1101 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1101);
        float _1114 = (dot(vec3(_568, _569, _570), vec3(_1106 * _1098, _1106 * _1099, _1106 * _1100)) + 1.0) * 0.5;
        float _3878 = isnan(0.0) ? _1114 : (isnan(_1114) ? 0.0 : max(_1114, 0.0));
        float _1123 = sqrt(((_1099 * _1099) + (_1098 * _1098)) + (_1100 * _1100)) / (_1011 + 9.9999997473787516355514526367188e-06);
        float _3889 = isnan(0.0) ? _1123 : (isnan(_1123) ? 0.0 : max(_1123, 0.0));
        float _1124 = isnan(1.0) ? _3889 : (isnan(_3889) ? 1.0 : min(_3889, 1.0));
        float _1125 = _1124 * 2.0;
        float _1129 = (1.0 - _1124) / (_1124 + 1.0);
        float _3900 = isnan(0.0) ? _1129 : (isnan(_1129) ? 0.0 : max(_1129, 0.0));
        float _1130 = isnan(1.0) ? _3900 : (isnan(_3900) ? 1.0 : min(_3900, 1.0));
        float _1139 = ((((1.0 - _1130) * (_1125 + 2.0)) * exp2(log2(isnan(1.0) ? _3878 : (isnan(_3878) ? 1.0 : min(_3878, 1.0))) * (_1125 + 1.0))) + _1130) * _1011;
        _1147 = _978;
        _1149 = _977;
        _1150 = _976;
        _1151 = _988;
        _1152 = _987;
        _1153 = _986;
        _1154 = _998;
        _1155 = _997;
        _1156 = _996;
        _1157 = _1011;
        _1158 = _1010;
        _1159 = _1009;
        _1160 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1055 : (isnan(_1055) ? 0.0 : max(_1055, 0.0)));
        _1161 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1097 : (isnan(_1097) ? 0.0 : max(_1097, 0.0)));
        _1162 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1139 : (isnan(_1139) ? 0.0 : max(_1139, 0.0)));
    }
    else
    {
        _1147 = _1148;
        _1149 = _1148;
        _1150 = _1148;
        _1151 = _1148;
        _1152 = _1148;
        _1153 = _1148;
        _1154 = _1148;
        _1155 = _1148;
        _1156 = _1148;
        _1157 = _1148;
        _1158 = _1148;
        _1159 = _1148;
        _1160 = 0.0;
        _1161 = 0.0;
        _1162 = 0.0;
    }
    float _1460;
    float _1461;
    float _1462;
    float _1463;
    float _1464;
    float _1465;
    float _1466;
    float _1467;
    float _1468;
    float _1469;
    float _1470;
    float _1471;
    float _1472;
    float _1473;
    float _1474;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1191 = fma(_817, cbModelParam._m0[30u].z, fma(_813, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _809));
        float _1195 = fma(_817, cbModelParam._m0[31u].z, fma(_813, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _809));
        float _1199 = fma(_817, cbModelParam._m0[32u].z, fma(_813, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _809));
        float _1222 = _809 + _568;
        float _1223 = _813 + _569;
        float _1224 = _817 + _570;
        float _1234 = fma(_1224, cbModelParam._m0[30u].z, fma(_1223, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1222)) - _1191;
        float _1235 = fma(_1224, cbModelParam._m0[31u].z, fma(_1223, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1222)) - _1195;
        float _1236 = fma(_1224, cbModelParam._m0[32u].z, fma(_1223, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1222)) - _1199;
        float _1240 = inversesqrt(dot(vec3(_1234, _1235, _1236), vec3(_1234, _1235, _1236)));
        float _1253 = ((_1240 * _1234) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1191 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1254 = ((_1240 * _1235) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1195 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1255 = ((_1240 * _1236) / cbModelParam._m0[35u].z) + ((((((_1199 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1257 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1253, _1254, _1255), 0.0);
        vec4 _1264 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1253, _1254, _1255), 0.0);
        vec4 _1271 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1253, _1254, _1255), 0.0);
        vec4 _1278 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1253, _1254, _1255), 0.0);
        float _1290 = exp2((_1257.w + (-0.5)) * 20.0) * 2.0;
        float _1291 = _1290 * (_1257.x + (-0.5));
        float _1292 = _1290 * (_1257.y + (-0.5));
        float _1293 = _1290 * (_1257.z + (-0.5));
        float _1300 = exp2((_1264.w + (-0.5)) * 20.0) * 2.0;
        float _1301 = _1300 * (_1264.x + (-0.5));
        float _1302 = _1300 * (_1264.y + (-0.5));
        float _1303 = _1300 * (_1264.z + (-0.5));
        float _1310 = exp2((_1271.w + (-0.5)) * 20.0) * 2.0;
        float _1311 = _1310 * (_1271.x + (-0.5));
        float _1312 = _1310 * (_1271.y + (-0.5));
        float _1313 = _1310 * (_1271.z + (-0.5));
        float _1320 = exp2((_1278.w + (-0.5)) * 20.0) * 2.0;
        float _1321 = _1320 * (_1278.x + (-0.5));
        float _1322 = _1320 * (_1278.y + (-0.5));
        float _1323 = _1320 * (_1278.z + (-0.5));
        float _1324 = isnan(0.0) ? _1321 : (isnan(_1321) ? 0.0 : max(_1321, 0.0));
        float _1325 = isnan(0.0) ? _1322 : (isnan(_1322) ? 0.0 : max(_1322, 0.0));
        float _1326 = isnan(0.0) ? _1323 : (isnan(_1323) ? 0.0 : max(_1323, 0.0));
        float _1327 = _1291 * 0.5;
        float _1328 = _1301 * 0.5;
        float _1329 = _1311 * 0.5;
        float _1330 = dot(vec3(_1327, _1328, _1329), vec3(_1327, _1328, _1329));
        float _1335 = (_1330 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1330);
        float _1343 = (dot(vec3(_568, _569, _570), vec3(_1335 * _1327, _1335 * _1328, _1335 * _1329)) + 1.0) * 0.5;
        float _3941 = isnan(0.0) ? _1343 : (isnan(_1343) ? 0.0 : max(_1343, 0.0));
        float _1352 = sqrt(((_1328 * _1328) + (_1327 * _1327)) + (_1329 * _1329)) / (_1324 + 9.9999997473787516355514526367188e-06);
        float _3952 = isnan(0.0) ? _1352 : (isnan(_1352) ? 0.0 : max(_1352, 0.0));
        float _1353 = isnan(1.0) ? _3952 : (isnan(_3952) ? 1.0 : min(_3952, 1.0));
        float _1354 = _1353 * 2.0;
        float _1358 = (1.0 - _1353) / (_1353 + 1.0);
        float _3963 = isnan(0.0) ? _1358 : (isnan(_1358) ? 0.0 : max(_1358, 0.0));
        float _1359 = isnan(1.0) ? _3963 : (isnan(_3963) ? 1.0 : min(_3963, 1.0));
        float _1368 = ((((1.0 - _1359) * (_1354 + 2.0)) * exp2(log2(isnan(1.0) ? _3941 : (isnan(_3941) ? 1.0 : min(_3941, 1.0))) * (_1354 + 1.0))) + _1359) * _1324;
        float _1369 = _1292 * 0.5;
        float _1370 = _1302 * 0.5;
        float _1371 = _1312 * 0.5;
        float _1372 = dot(vec3(_1369, _1370, _1371), vec3(_1369, _1370, _1371));
        float _1377 = (_1372 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1372);
        float _1385 = (dot(vec3(_568, _569, _570), vec3(_1377 * _1369, _1377 * _1370, _1377 * _1371)) + 1.0) * 0.5;
        float _3974 = isnan(0.0) ? _1385 : (isnan(_1385) ? 0.0 : max(_1385, 0.0));
        float _1394 = sqrt(((_1370 * _1370) + (_1369 * _1369)) + (_1371 * _1371)) / (_1325 + 9.9999997473787516355514526367188e-06);
        float _3985 = isnan(0.0) ? _1394 : (isnan(_1394) ? 0.0 : max(_1394, 0.0));
        float _1395 = isnan(1.0) ? _3985 : (isnan(_3985) ? 1.0 : min(_3985, 1.0));
        float _1396 = _1395 * 2.0;
        float _1400 = (1.0 - _1395) / (_1395 + 1.0);
        float _3996 = isnan(0.0) ? _1400 : (isnan(_1400) ? 0.0 : max(_1400, 0.0));
        float _1401 = isnan(1.0) ? _3996 : (isnan(_3996) ? 1.0 : min(_3996, 1.0));
        float _1410 = ((((1.0 - _1401) * (_1396 + 2.0)) * exp2(log2(isnan(1.0) ? _3974 : (isnan(_3974) ? 1.0 : min(_3974, 1.0))) * (_1396 + 1.0))) + _1401) * _1325;
        float _1411 = _1293 * 0.5;
        float _1412 = _1303 * 0.5;
        float _1413 = _1313 * 0.5;
        float _1414 = dot(vec3(_1411, _1412, _1413), vec3(_1411, _1412, _1413));
        float _1419 = (_1414 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1414);
        float _1427 = (dot(vec3(_568, _569, _570), vec3(_1419 * _1411, _1419 * _1412, _1419 * _1413)) + 1.0) * 0.5;
        float _4007 = isnan(0.0) ? _1427 : (isnan(_1427) ? 0.0 : max(_1427, 0.0));
        float _1436 = sqrt(((_1412 * _1412) + (_1411 * _1411)) + (_1413 * _1413)) / (_1326 + 9.9999997473787516355514526367188e-06);
        float _4018 = isnan(0.0) ? _1436 : (isnan(_1436) ? 0.0 : max(_1436, 0.0));
        float _1437 = isnan(1.0) ? _4018 : (isnan(_4018) ? 1.0 : min(_4018, 1.0));
        float _1438 = _1437 * 2.0;
        float _1442 = (1.0 - _1437) / (_1437 + 1.0);
        float _4029 = isnan(0.0) ? _1442 : (isnan(_1442) ? 0.0 : max(_1442, 0.0));
        float _1443 = isnan(1.0) ? _4029 : (isnan(_4029) ? 1.0 : min(_4029, 1.0));
        float _1452 = ((((1.0 - _1443) * (_1438 + 2.0)) * exp2(log2(isnan(1.0) ? _4007 : (isnan(_4007) ? 1.0 : min(_4007, 1.0))) * (_1438 + 1.0))) + _1443) * _1326;
        _1460 = _1293;
        _1461 = _1292;
        _1462 = _1291;
        _1463 = _1303;
        _1464 = _1302;
        _1465 = _1301;
        _1466 = _1313;
        _1467 = _1312;
        _1468 = _1311;
        _1469 = _1326;
        _1470 = _1325;
        _1471 = _1324;
        _1472 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1368 : (isnan(_1368) ? 0.0 : max(_1368, 0.0)));
        _1473 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1410 : (isnan(_1410) ? 0.0 : max(_1410, 0.0)));
        _1474 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1452 : (isnan(_1452) ? 0.0 : max(_1452, 0.0)));
    }
    else
    {
        _1460 = _1148;
        _1461 = _1148;
        _1462 = _1148;
        _1463 = _1148;
        _1464 = _1148;
        _1465 = _1148;
        _1466 = _1148;
        _1467 = _1148;
        _1468 = _1148;
        _1469 = _1148;
        _1470 = _1148;
        _1471 = _1148;
        _1472 = 0.0;
        _1473 = 0.0;
        _1474 = 0.0;
    }
    float _1484 = (cbModelParam._m0[1u].x * (_1472 - _1160)) + _1160;
    float _1485 = (cbModelParam._m0[1u].x * (_1473 - _1161)) + _1161;
    float _1486 = (cbModelParam._m0[1u].x * (_1474 - _1162)) + _1162;
    float _1507 = fma(_1486, cbSceneParam._m0[89u].z, fma(_1485, cbSceneParam._m0[89u].y, _1484 * cbSceneParam._m0[89u].x));
    float _1510 = fma(_1486, cbSceneParam._m0[90u].z, fma(_1485, cbSceneParam._m0[90u].y, _1484 * cbSceneParam._m0[90u].x));
    float _1513 = fma(_1486, cbSceneParam._m0[91u].z, fma(_1485, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1484));
    float _1528 = _754 * 0.5;
    float _1529 = _755 * 0.5;
    float _1530 = _756 * 0.5;
    float _1531 = dot(vec4(_1528, _1529, _1530, 1.0), vec4(_1462, _1465, _1468, _1471));
    float _1534 = dot(vec4(_1528, _1529, _1530, 1.0), vec4(_1461, _1464, _1467, _1470));
    float _1537 = dot(vec4(_1528, _1529, _1530, 1.0), vec4(_1460, _1463, _1466, _1469));
    float _1571;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1544 = dot(vec4(_1528, _1529, _1530, 1.0), vec4(_1147, _1151, _1154, _1157));
        float _1548 = dot(vec4(_1528, _1529, _1530, 1.0), vec4(_1149, _1152, _1155, _1158));
        float _1552 = dot(vec4(_1528, _1529, _1530, 1.0), vec4(_1150, _1153, _1156, _1159));
        float _1559 = dot(vec4(cbModelParam._m0[39u]), vec4(_1528, _1529, _1530, 1.0));
        _1571 = dot(vec3(isnan(0.0) ? _1552 : (isnan(_1552) ? 0.0 : max(_1552, 0.0)), isnan(0.0) ? _1548 : (isnan(_1548) ? 0.0 : max(_1548, 0.0)), isnan(0.0) ? _1544 : (isnan(_1544) ? 0.0 : max(_1544, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1559) ? 0.0 : (isnan(0.0) ? _1559 : max(0.0, _1559))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1571 = 1.0;
    }
    float _1582;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1573 = dot(vec4(cbModelParam._m0[40u]), vec4(_1528, _1529, _1530, 1.0));
        _1582 = dot(vec3(isnan(0.0) ? _1531 : (isnan(_1531) ? 0.0 : max(_1531, 0.0)), isnan(0.0) ? _1534 : (isnan(_1534) ? 0.0 : max(_1534, 0.0)), isnan(0.0) ? _1537 : (isnan(_1537) ? 0.0 : max(_1537, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1573) ? 0.0 : (isnan(0.0) ? _1573 : max(0.0, _1573))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1582 = 1.0;
    }
    float _1586 = (_1582 * cbModelParam._m0[1u].x) + (_1571 * (1.0 - cbModelParam._m0[1u].x));
    float _1596 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _571);
    float _1597 = isnan(_1596) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1596 : min(cbModelParam._m0[25u].z, _1596));
    float _1677;
    float _1679;
    float _1681;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1644 = fma(_817, cbModelParam._m0[13u].z, fma(_813, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _809)) + cbModelParam._m0[13u].w;
        float _1648 = fma(_817, cbModelParam._m0[14u].z, fma(_813, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _809)) + cbModelParam._m0[14u].w;
        float _1652 = fma(_817, cbModelParam._m0[15u].z, fma(_813, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _809)) + cbModelParam._m0[15u].w;
        float _1655 = fma(_756, cbModelParam._m0[13u].z, fma(_755, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _754));
        float _1658 = fma(_756, cbModelParam._m0[14u].z, fma(_755, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _754));
        float _1661 = fma(_756, cbModelParam._m0[15u].z, fma(_755, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _754));
        float _1689;
        if (_1655 > 0.0)
        {
            _1689 = abs((1.0 - _1644) / _1655);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1655 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1644 + 1.0) / _1655);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1689 = frontier_phi_17_15_ladder;
        }
        float _1914;
        if (_1658 > 0.0)
        {
            _1914 = abs((1.0 - _1648) / _1658);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1658 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1648 + 1.0) / _1658);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1914 = frontier_phi_26_22_ladder;
        }
        float _2171;
        if (_1661 > 0.0)
        {
            _2171 = abs((1.0 - _1652) / _1661);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1661 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1652 + 1.0) / _1661);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2171 = frontier_phi_38_33_ladder;
        }
        float _2173 = isnan(_1914) ? _1689 : (isnan(_1689) ? _1914 : min(_1689, _1914));
        float _2174 = isnan(_2171) ? _2173 : (isnan(_2173) ? _2171 : min(_2173, _2171));
        float _2178 = (_2174 * _1655) + _1644;
        float _2179 = (_2174 * _1658) + _1648;
        float _2180 = (_2174 * _1661) + _1652;
        float _2181 = _2174 * 9.9999997473787516355514526367188e-05;
        float _2183 = (-1.0) - _2181;
        float _2185 = _2181 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2180 > _2185) || ((_2180 < _2183) || ((_2179 > _2185) || ((_2179 < _2183) || ((_2178 < _2183) || (_2178 > _2185))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2308 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2180, cbModelParam._m0[9u].z, fma(_2179, cbModelParam._m0[9u].y, _2178 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2180, cbModelParam._m0[10u].z, fma(_2179, cbModelParam._m0[10u].y, _2178 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2180, cbModelParam._m0[11u].z, fma(_2179, cbModelParam._m0[11u].y, _2178 * cbModelParam._m0[11u].x))), _1597);
            frontier_phi_16_38_ladder = _2308.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2308.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2308.x * cbModelParam._m0[1u].y;
        }
        _1677 = frontier_phi_16_38_ladder_2;
        _1679 = frontier_phi_16_38_ladder_1;
        _1681 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1665 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_754, _755, _756), _1597);
        _1677 = _1665.x * cbModelParam._m0[1u].y;
        _1679 = _1665.y * cbModelParam._m0[1u].y;
        _1681 = _1665.z * cbModelParam._m0[1u].y;
    }
    float _1685 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _571);
    float _1686 = isnan(_1685) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1685 : min(cbModelParam._m0[25u].w, _1685));
    float _1777;
    float _1779;
    float _1781;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1741 = fma(_817, cbModelParam._m0[21u].z, fma(_813, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _809)) + cbModelParam._m0[21u].w;
        float _1745 = fma(_817, cbModelParam._m0[22u].z, fma(_813, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _809)) + cbModelParam._m0[22u].w;
        float _1749 = fma(_817, cbModelParam._m0[23u].z, fma(_813, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _809)) + cbModelParam._m0[23u].w;
        float _1752 = fma(_756, cbModelParam._m0[21u].z, fma(_755, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _754));
        float _1755 = fma(_756, cbModelParam._m0[22u].z, fma(_755, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _754));
        float _1758 = fma(_756, cbModelParam._m0[23u].z, fma(_755, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _754));
        float _1919;
        if (_1752 > 0.0)
        {
            _1919 = abs((1.0 - _1741) / _1752);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1752 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1741 + 1.0) / _1752);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1919 = frontier_phi_28_24_ladder;
        }
        float _2198;
        if (_1755 > 0.0)
        {
            _2198 = abs((1.0 - _1745) / _1755);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1755 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1745 + 1.0) / _1755);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2198 = frontier_phi_40_35_ladder;
        }
        float _2411;
        if (_1758 > 0.0)
        {
            _2411 = abs((1.0 - _1749) / _1758);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1758 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1749 + 1.0) / _1758);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2411 = frontier_phi_49_46_ladder;
        }
        float _2413 = isnan(_2198) ? _1919 : (isnan(_1919) ? _2198 : min(_1919, _2198));
        float _2414 = isnan(_2411) ? _2413 : (isnan(_2413) ? _2411 : min(_2413, _2411));
        float _2418 = (_2414 * _1752) + _1741;
        float _2419 = (_2414 * _1755) + _1745;
        float _2420 = (_2414 * _1758) + _1749;
        float _2421 = _2414 * 9.9999997473787516355514526367188e-05;
        float _2422 = (-1.0) - _2421;
        float _2424 = _2421 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2420 > _2424) || ((_2420 < _2422) || ((_2419 > _2424) || ((_2419 < _2422) || ((_2418 < _2422) || (_2418 > _2424))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2664 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2420, cbModelParam._m0[17u].z, fma(_2419, cbModelParam._m0[17u].y, _2418 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2420, cbModelParam._m0[18u].z, fma(_2419, cbModelParam._m0[18u].y, _2418 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2420, cbModelParam._m0[19u].z, fma(_2419, cbModelParam._m0[19u].y, _2418 * cbModelParam._m0[19u].x))), _1686);
            frontier_phi_25_49_ladder = _2664.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2664.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2664.x * cbModelParam._m0[1u].z;
        }
        _1777 = frontier_phi_25_49_ladder_2;
        _1779 = frontier_phi_25_49_ladder_1;
        _1781 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1761 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_754, _755, _756), _1686);
        _1777 = _1761.x * cbModelParam._m0[1u].z;
        _1779 = _1761.y * cbModelParam._m0[1u].z;
        _1781 = _1761.z * cbModelParam._m0[1u].z;
    }
    float _1794 = (((_780 * _731) + _781) * _746) * ((cbModelParam._m0[1u].w * (_1777 - _1677)) + _1677);
    float _1796 = (((_780 * _733) + _781) * _746) * ((cbModelParam._m0[1u].w * (_1779 - _1679)) + _1679);
    float _1798 = (((_780 * _734) + _781) * _746) * ((cbModelParam._m0[1u].w * (_1781 - _1681)) + _1681);
    float _1801 = fma(_1798, cbSceneParam._m0[89u].z, fma(_1796, cbSceneParam._m0[89u].y, _1794 * cbSceneParam._m0[89u].x));
    float _1804 = fma(_1798, cbSceneParam._m0[90u].z, fma(_1796, cbSceneParam._m0[90u].y, _1794 * cbSceneParam._m0[90u].x));
    float _1807 = fma(_1798, cbSceneParam._m0[91u].z, fma(_1796, cbSceneParam._m0[91u].y, _1794 * cbSceneParam._m0[91u].x));
    vec4 _1815 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_668, _669));
    float _1817 = _1815.w;
    float _1829 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1817);
    float _1830 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1817);
    float _1831 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1817);
    uvec4 _1835 = floatBitsToUint(cbInstanceData._m0[_706 + 5u]);
    uint _1837 = _1835.x * 14u;
    uint _1838 = _1837 + 13u;
    float _1845 = _746 + (-1.0);
    float _1850 = (cbLight._m0[_1838].x * _1845) + 1.0;
    float _1851 = (cbLight._m0[_1838].y * _1845) + 1.0;
    float _1852 = (cbLight._m0[_1838].z * _1845) + 1.0;
    float _1853 = (cbLight._m0[_1838].w * _1845) + 1.0;
    uint _1854 = _1837 + 5u;
    float _1860 = isnan(1.0) ? _1851 : (isnan(_1851) ? 1.0 : min(_1851, 1.0));
    uint _1864 = _1837 + 4u;
    float _1873 = isnan(1.0) ? _1850 : (isnan(_1850) ? 1.0 : min(_1850, 1.0));
    uint _1877 = _1837 | 1u;
    float _1888 = dot(vec3(cbLight._m0[_1837].xyz), vec3(_568, _569, _570));
    float _1891 = dot(vec3(cbLight._m0[_1877].xyz), vec3(_568, _569, _570));
    float _4165 = isnan(0.0) ? _1888 : (isnan(_1888) ? 0.0 : max(_1888, 0.0));
    float _4176 = isnan(0.0) ? _1891 : (isnan(_1891) ? 0.0 : max(_1891, 0.0));
    float _1896 = (isnan(1.0) ? _4165 : (isnan(_4165) ? 1.0 : min(_4165, 1.0))) * 0.3183098733425140380859375;
    float _1898 = (isnan(1.0) ? _4176 : (isnan(_4176) ? 1.0 : min(_4176, 1.0))) * 0.3183098733425140380859375;
    float _1905 = ((cbLight._m0[_1854].x * _1860) * _1898) + (((cbLight._m0[_1864].x * _1829) * _1873) * _1896);
    float _1906 = ((_1860 * cbLight._m0[_1854].y) * _1898) + (((cbLight._m0[_1864].y * _1830) * _1873) * _1896);
    float _1907 = ((_1860 * cbLight._m0[_1854].z) * _1898) + (((cbLight._m0[_1864].z * _1831) * _1873) * _1896);
    uvec4 _1911 = floatBitsToUint(cbLight._m0[_1837 + 12u]);
    bool _1913 = _1911.x == 0u;
    float _1924;
    float _1926;
    float _1928;
    if (_1913)
    {
        _1924 = _1905;
        _1926 = _1906;
        _1928 = _1907;
    }
    else
    {
        uint _1932 = _1837 + 6u;
        float _1948 = (dot(vec3(cbLight._m0[_1837 + 2u].xyz), vec3(_568, _569, _570)) * 0.5) + 0.5;
        float _1949 = _1948 * _1948;
        float _4187 = isnan(0.0) ? _1949 : (isnan(_1949) ? 0.0 : max(_1949, 0.0));
        float _1950 = isnan(1.0) ? _4187 : (isnan(_4187) ? 1.0 : min(_4187, 1.0));
        float _1951 = isnan(1.0) ? _1852 : (isnan(_1852) ? 1.0 : min(_1852, 1.0));
        _1924 = (((cbLight._m0[_1932].x * 0.3183098733425140380859375) * _1950) * _1951) + _1905;
        _1926 = (((cbLight._m0[_1932].y * 0.3183098733425140380859375) * _1950) * _1951) + _1906;
        _1928 = (((cbLight._m0[_1932].z * 0.3183098733425140380859375) * _1950) * _1951) + _1907;
    }
    bool _1931 = _1911.y == 0u;
    float _1969;
    float _1971;
    float _1973;
    if (_1931)
    {
        _1969 = _1924;
        _1971 = _1926;
        _1973 = _1928;
    }
    else
    {
        uint _2142 = _1837 + 7u;
        float _2158 = (dot(vec3(cbLight._m0[_1837 + 3u].xyz), vec3(_568, _569, _570)) * 0.5) + 0.5;
        float _2159 = _2158 * _2158;
        float _4203 = isnan(0.0) ? _2159 : (isnan(_2159) ? 0.0 : max(_2159, 0.0));
        float _2160 = isnan(1.0) ? _4203 : (isnan(_4203) ? 1.0 : min(_4203, 1.0));
        float _2161 = isnan(1.0) ? _1853 : (isnan(_1853) ? 1.0 : min(_1853, 1.0));
        _1969 = (((cbLight._m0[_2142].x * 0.3183098733425140380859375) * _2160) * _2161) + _1924;
        _1971 = (((cbLight._m0[_2142].y * 0.3183098733425140380859375) * _2160) * _2161) + _1926;
        _1973 = (((cbLight._m0[_2142].z * 0.3183098733425140380859375) * _2160) * _2161) + _1928;
    }
    uint _1976 = _1837 + 8u;
    float _1989 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1837].w)) * _571) * 0.949999988079071044921875);
    float _1990 = _1989 * _1989;
    float _1991 = cbLight._m0[_1837].x + _648;
    float _1992 = cbLight._m0[_1837].y + _649;
    float _1993 = cbLight._m0[_1837].z + _650;
    float _1997 = inversesqrt(dot(vec3(_1991, _1992, _1993), vec3(_1991, _1992, _1993)));
    float _1998 = _1997 * _1991;
    float _1999 = _1997 * _1992;
    float _2000 = _1997 * _1993;
    float _2001 = dot(vec3(_568, _569, _570), vec3(cbLight._m0[_1837].xyz));
    float _4219 = isnan(0.0) ? _2001 : (isnan(_2001) ? 0.0 : max(_2001, 0.0));
    float _2004 = isnan(1.0) ? _4219 : (isnan(_4219) ? 1.0 : min(_4219, 1.0));
    float _4230 = isnan(0.0) ? _747 : (isnan(_747) ? 0.0 : max(_747, 0.0));
    float _2005 = isnan(1.0) ? _4230 : (isnan(_4230) ? 1.0 : min(_4230, 1.0));
    float _2006 = dot(vec3(_568, _569, _570), vec3(_1998, _1999, _2000));
    float _4241 = isnan(0.0) ? _2006 : (isnan(_2006) ? 0.0 : max(_2006, 0.0));
    float _2009 = isnan(1.0) ? _4241 : (isnan(_4241) ? 1.0 : min(_4241, 1.0));
    float _2010 = dot(vec3(cbLight._m0[_1837].xyz), vec3(_1998, _1999, _2000));
    float _4252 = isnan(0.0) ? _2010 : (isnan(_2010) ? 0.0 : max(_2010, 0.0));
    float _2014 = _1990 * _1990;
    float _2018 = ((_2009 * _2009) * (_2014 + (-1.0))) + 1.0;
    float _2026 = exp2(log2(1.0 - (isnan(1.0) ? _4252 : (isnan(_4252) ? 1.0 : min(_4252, 1.0)))) * 5.0);
    float _2027 = 0.959999978542327880859375 - _728;
    float _2029 = 0.959999978542327880859375 - _729;
    float _2030 = 0.959999978542327880859375 - _730;
    float _2037 = 1.0 - _1990;
    float _2048 = (0.5 / (((_2005 * ((_2004 * _2037) + _1990)) + 9.9999999392252902907785028219223e-09) + (((_2005 * _2037) + _1990) * _2004))) * _2004;
    float _4263 = isnan(0.0) ? _2048 : (isnan(_2048) ? 0.0 : max(_2048, 0.0));
    float _2050 = (isnan(1.0) ? _4263 : (isnan(_4263) ? 1.0 : min(_4263, 1.0))) * (_2014 / ((_2018 * _2018) * 3.141590118408203125));
    uint _2064 = _1837 + 9u;
    float _2075 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1877].w)) * _571) * 0.949999988079071044921875);
    float _2076 = _2075 * _2075;
    float _2077 = cbLight._m0[_1877].x + _648;
    float _2078 = cbLight._m0[_1877].y + _649;
    float _2079 = cbLight._m0[_1877].z + _650;
    float _2083 = inversesqrt(dot(vec3(_2077, _2078, _2079), vec3(_2077, _2078, _2079)));
    float _2084 = _2083 * _2077;
    float _2085 = _2083 * _2078;
    float _2086 = _2083 * _2079;
    float _2087 = dot(vec3(_568, _569, _570), vec3(cbLight._m0[_1877].xyz));
    float _4274 = isnan(0.0) ? _2087 : (isnan(_2087) ? 0.0 : max(_2087, 0.0));
    float _2090 = isnan(1.0) ? _4274 : (isnan(_4274) ? 1.0 : min(_4274, 1.0));
    float _2091 = dot(vec3(_568, _569, _570), vec3(_2084, _2085, _2086));
    float _4285 = isnan(0.0) ? _2091 : (isnan(_2091) ? 0.0 : max(_2091, 0.0));
    float _2094 = isnan(1.0) ? _4285 : (isnan(_4285) ? 1.0 : min(_4285, 1.0));
    float _2095 = dot(vec3(cbLight._m0[_1877].xyz), vec3(_2084, _2085, _2086));
    float _4296 = isnan(0.0) ? _2095 : (isnan(_2095) ? 0.0 : max(_2095, 0.0));
    float _2099 = _2076 * _2076;
    float _2103 = ((_2094 * _2094) * (_2099 + (-1.0))) + 1.0;
    float _2110 = exp2(log2(1.0 - (isnan(1.0) ? _4296 : (isnan(_4296) ? 1.0 : min(_4296, 1.0)))) * 5.0);
    float _2117 = 1.0 - _2076;
    float _2127 = (0.5 / (((_2005 * ((_2090 * _2117) + _2076)) + 9.9999999392252902907785028219223e-09) + (((_2005 * _2117) + _2076) * _2090))) * _2090;
    float _4307 = isnan(0.0) ? _2127 : (isnan(_2127) ? 0.0 : max(_2127, 0.0));
    float _2129 = (isnan(1.0) ? _4307 : (isnan(_4307) ? 1.0 : min(_4307, 1.0))) * (_2099 / ((_2103 * _2103) * 3.141590118408203125));
    float _2139 = (((((_2110 * _2027) + _731) * cbLight._m0[_2064].x) * _2129) * _1860) + ((((cbLight._m0[_1976].x * _1829) * ((_2026 * _2027) + _731)) * _2050) * _1873);
    float _2140 = (((((_2110 * _2029) + _733) * cbLight._m0[_2064].y) * _2129) * _1860) + ((((cbLight._m0[_1976].y * _1830) * ((_2026 * _2029) + _733)) * _2050) * _1873);
    float _2141 = (((((_2110 * _2030) + _734) * cbLight._m0[_2064].z) * _2129) * _1860) + ((((cbLight._m0[_1976].z * _1831) * ((_2026 * _2030) + _734)) * _2050) * _1873);
    float _2203;
    float _2205;
    float _2207;
    if (_1913)
    {
        _2203 = _2139;
        _2205 = _2140;
        _2207 = _2141;
    }
    else
    {
        uint _2209 = _1837 + 2u;
        uint _2213 = _1837 + 10u;
        float _2227 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2209].w)) * _571) * 0.949999988079071044921875);
        float _2228 = _2227 * _2227;
        float _2229 = cbLight._m0[_2209].x + _648;
        float _2230 = cbLight._m0[_2209].y + _649;
        float _2231 = cbLight._m0[_2209].z + _650;
        float _2235 = inversesqrt(dot(vec3(_2229, _2230, _2231), vec3(_2229, _2230, _2231)));
        float _2236 = _2235 * _2229;
        float _2237 = _2235 * _2230;
        float _2238 = _2235 * _2231;
        float _2239 = dot(vec3(_568, _569, _570), vec3(cbLight._m0[_2209].xyz));
        float _4318 = isnan(0.0) ? _2239 : (isnan(_2239) ? 0.0 : max(_2239, 0.0));
        float _2242 = isnan(1.0) ? _4318 : (isnan(_4318) ? 1.0 : min(_4318, 1.0));
        float _2243 = dot(vec3(_568, _569, _570), vec3(_2236, _2237, _2238));
        float _4329 = isnan(0.0) ? _2243 : (isnan(_2243) ? 0.0 : max(_2243, 0.0));
        float _2246 = isnan(1.0) ? _4329 : (isnan(_4329) ? 1.0 : min(_4329, 1.0));
        float _2247 = dot(vec3(cbLight._m0[_2209].xyz), vec3(_2236, _2237, _2238));
        float _4340 = isnan(0.0) ? _2247 : (isnan(_2247) ? 0.0 : max(_2247, 0.0));
        float _2251 = _2228 * _2228;
        float _2255 = ((_2246 * _2246) * (_2251 + (-1.0))) + 1.0;
        float _2262 = exp2(log2(1.0 - (isnan(1.0) ? _4340 : (isnan(_4340) ? 1.0 : min(_4340, 1.0)))) * 5.0);
        float _2269 = 1.0 - _2228;
        float _2279 = (0.5 / (((_2005 * ((_2242 * _2269) + _2228)) + 9.9999999392252902907785028219223e-09) + (((_2005 * _2269) + _2228) * _2242))) * _2242;
        float _4351 = isnan(0.0) ? _2279 : (isnan(_2279) ? 0.0 : max(_2279, 0.0));
        float _2281 = (isnan(1.0) ? _4351 : (isnan(_4351) ? 1.0 : min(_4351, 1.0))) * (_2251 / ((_2255 * _2255) * 3.141590118408203125));
        float _2282 = isnan(1.0) ? _1852 : (isnan(_1852) ? 1.0 : min(_1852, 1.0));
        _2203 = (((((_2262 * _2027) + _731) * cbLight._m0[_2213].x) * _2281) * _2282) + _2139;
        _2205 = (((((_2262 * _2029) + _733) * cbLight._m0[_2213].y) * _2281) * _2282) + _2140;
        _2207 = (((((_2262 * _2030) + _734) * cbLight._m0[_2213].z) * _2281) * _2282) + _2141;
    }
    float _2317;
    float _2319;
    float _2321;
    if (_1931)
    {
        _2317 = _2203;
        _2319 = _2205;
        _2321 = _2207;
    }
    else
    {
        uint _2328 = _1837 + 3u;
        uint _2332 = _1837 + 11u;
        float _2346 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2328].w)) * _571) * 0.949999988079071044921875);
        float _2347 = _2346 * _2346;
        float _2348 = cbLight._m0[_2328].x + _648;
        float _2349 = cbLight._m0[_2328].y + _649;
        float _2350 = cbLight._m0[_2328].z + _650;
        float _2354 = inversesqrt(dot(vec3(_2348, _2349, _2350), vec3(_2348, _2349, _2350)));
        float _2355 = _2354 * _2348;
        float _2356 = _2354 * _2349;
        float _2357 = _2354 * _2350;
        float _2358 = dot(vec3(_568, _569, _570), vec3(cbLight._m0[_2328].xyz));
        float _4367 = isnan(0.0) ? _2358 : (isnan(_2358) ? 0.0 : max(_2358, 0.0));
        float _2361 = isnan(1.0) ? _4367 : (isnan(_4367) ? 1.0 : min(_4367, 1.0));
        float _2362 = dot(vec3(_568, _569, _570), vec3(_2355, _2356, _2357));
        float _4378 = isnan(0.0) ? _2362 : (isnan(_2362) ? 0.0 : max(_2362, 0.0));
        float _2365 = isnan(1.0) ? _4378 : (isnan(_4378) ? 1.0 : min(_4378, 1.0));
        float _2366 = dot(vec3(cbLight._m0[_2328].xyz), vec3(_2355, _2356, _2357));
        float _4389 = isnan(0.0) ? _2366 : (isnan(_2366) ? 0.0 : max(_2366, 0.0));
        float _2370 = _2347 * _2347;
        float _2374 = ((_2365 * _2365) * (_2370 + (-1.0))) + 1.0;
        float _2381 = exp2(log2(1.0 - (isnan(1.0) ? _4389 : (isnan(_4389) ? 1.0 : min(_4389, 1.0)))) * 5.0);
        float _2388 = 1.0 - _2347;
        float _2398 = (0.5 / (((_2005 * ((_2361 * _2388) + _2347)) + 9.9999999392252902907785028219223e-09) + (((_2005 * _2388) + _2347) * _2361))) * _2361;
        float _4400 = isnan(0.0) ? _2398 : (isnan(_2398) ? 0.0 : max(_2398, 0.0));
        float _2400 = (isnan(1.0) ? _4400 : (isnan(_4400) ? 1.0 : min(_4400, 1.0))) * (_2370 / ((_2374 * _2374) * 3.141590118408203125));
        float _2401 = isnan(1.0) ? _1853 : (isnan(_1853) ? 1.0 : min(_1853, 1.0));
        _2317 = (((((_2381 * _2027) + _731) * cbLight._m0[_2332].x) * _2400) * _2401) + _2203;
        _2319 = (((((_2381 * _2029) + _733) * cbLight._m0[_2332].y) * _2400) * _2401) + _2205;
        _2321 = (((((_2381 * _2030) + _734) * cbLight._m0[_2332].z) * _2400) * _2401) + _2207;
    }
    float _2536;
    float _2538;
    float _2540;
    float _2542;
    float _2544;
    float _2546;
    if (_1835.y == 0u)
    {
        float _2476 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2477 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2476;
        float _2478 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2476;
        float _2479 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2476;
        uvec4 _2491 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2492 = _2491.x;
        uint _2503 = uint((float(_2491.y) * floor(float(uint(cbSceneParam._m0[85u].y * _669) / _2492))) + floor(float(uint(cbSceneParam._m0[85u].x * _668) / _2492)));
        float _2513 = (log2(_2479 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2514 = isnan(0.0) ? _2513 : (isnan(_2513) ? 0.0 : max(_2513, 0.0));
        uint _2517 = uint(isnan(14.0) ? _2514 : (isnan(_2514) ? 14.0 : min(_2514, 14.0)));
        uvec4 _2522 = texelFetch(g_lightClusterGridBuffer, int(((_2517 << 2u) + (_2503 << 6u)) >> 2u));
        uint _2523 = _2522.x;
        uint _2524 = _2491.z;
        float _2669;
        float _2671;
        float _2673;
        float _2675;
        float _2677;
        float _2679;
        if (((((1u << ((_2524 >> 4u) & 15u)) + 4294967295u) & _2523) == 0u) || ((_2524 & 240u) == 0u))
        {
            _2669 = 0.0;
            _2671 = 0.0;
            _2673 = 0.0;
            _2675 = 0.0;
            _2677 = 0.0;
            _2679 = 0.0;
        }
        else
        {
            float _2670;
            float _2672;
            float _2674;
            float _2676;
            float _2678;
            float _2680;
            float _2830 = 0.0;
            float _2831 = 0.0;
            float _2832 = 0.0;
            float _2833 = 0.0;
            float _2834 = 0.0;
            float _2835 = 0.0;
            uint _2836 = 0u;
            uint _2845;
            bool _2846;
            for (;;)
            {
                _2845 = texelFetch(g_lightClassification, int((((_2517 << 5u) + (_2503 << 9u)) + (_2836 << 2u)) >> 2u)).x;
                _2846 = _2845 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2846)
                {
                    frontier_phi_66_pred = _2830;
                    frontier_phi_66_pred_1 = _2835;
                    frontier_phi_66_pred_2 = _2834;
                    frontier_phi_66_pred_3 = _2833;
                    frontier_phi_66_pred_4 = _2832;
                    frontier_phi_66_pred_5 = _2831;
                }
                else
                {
                    float _2975;
                    float _2976;
                    float _2977;
                    float _2978;
                    float _2979;
                    float _2980;
                    uint _2981;
                    _2975 = _2830;
                    _2976 = _2831;
                    _2977 = _2832;
                    _2978 = _2833;
                    _2979 = _2834;
                    _2980 = _2835;
                    _2981 = _2845;
                    float _2902;
                    float _2903;
                    float _2904;
                    float _2905;
                    float _2906;
                    float _2907;
                    for (;;)
                    {
                        uint _2985 = uint(findLSB(_2981)) + (_2836 << 5u);
                        uint _2982 = (_2981 + 4294967295u) & _2981;
                        uint _2987 = _2985 * 48u;
                        vec4 _3001 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2987)).x, texelFetch(g_PointLightRenderingBuffer, int(_2987 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2987 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2987 + 3u)).x));
                        uint _3007 = (_2985 * 48u) + 4u;
                        vec4 _3020 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3007)).x, texelFetch(g_PointLightRenderingBuffer, int(_3007 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3007 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3007 + 3u)).x));
                        uint _3026 = (_2985 * 48u) + 8u;
                        vec3 _3037 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3026)).x, texelFetch(g_PointLightRenderingBuffer, int(_3026 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3026 + 2u)).x));
                        float _3041 = _3001.x - _2477;
                        float _3042 = _3001.y - _2478;
                        float _3043 = _3001.z - _2479;
                        float _3044 = dot(vec3(_3041, _3042, _3043), vec3(_3041, _3042, _3043));
                        float _3047 = inversesqrt(_3044);
                        float _3048 = _3047 * _3041;
                        float _3049 = _3047 * _3042;
                        float _3050 = _3047 * _3043;
                        float _3051 = dot(vec3(_687, _690, _693), vec3(_3048, _3049, _3050));
                        float _3056 = 1.0 - (_3044 * _3001.w);
                        float _4426 = isnan(0.0) ? _3056 : (isnan(_3056) ? 0.0 : max(_3056, 0.0));
                        float _3057 = isnan(1.0) ? _4426 : (isnan(_4426) ? 1.0 : min(_4426, 1.0));
                        float _3058 = sqrt(_3044) * _3020.w;
                        float _3061 = 1.39999997615814208984375 / (_3058 + 1.39999997615814208984375);
                        float _3062 = _3061 * _3061;
                        float _3065 = ((1.0 - _3062) * _3051) + _3062;
                        float _3068 = _3058 * _3058;
                        float _3072 = ((isnan(0.0) ? _3065 : (isnan(_3065) ? 0.0 : max(_3065, 0.0))) * _3057) / ((_3068 * 0.699999988079071044921875) + 1.0);
                        float _3076 = (-0.0) - _2477;
                        float _3077 = (-0.0) - _2478;
                        float _3078 = (-0.0) - _2479;
                        float _3082 = inversesqrt(dot(vec3(_3076, _3077, _3078), vec3(_3076, _3077, _3078)));
                        float _3083 = _3082 * _3076;
                        float _3084 = _3082 * _3077;
                        float _3085 = _3082 * _3078;
                        float _3093 = exp2(log2(1.0 / ((_3068 * 3.5) + 5.0)) * 0.25);
                        float _3094 = 1.0 - _762;
                        float _3101 = sqrt(1.0 - ((1.0 - (_3094 * _3094)) * (1.0 - (_3093 * _3093))));
                        float _3102 = _3101 * _3101;
                        float _3103 = _3102 * _3102;
                        float _3104 = _3083 + _3048;
                        float _3105 = _3084 + _3049;
                        float _3106 = _3085 + _3050;
                        float _3110 = inversesqrt(dot(vec3(_3104, _3105, _3106), vec3(_3104, _3105, _3106)));
                        float _3114 = dot(vec3(_687, _690, _693), vec3(_3083, _3084, _3085));
                        float _4442 = isnan(0.0) ? _3114 : (isnan(_3114) ? 0.0 : max(_3114, 0.0));
                        float _3117 = isnan(1.0) ? _4442 : (isnan(_4442) ? 1.0 : min(_4442, 1.0));
                        float _3118 = dot(vec3(_687, _690, _693), vec3(_3110 * _3104, _3110 * _3105, _3110 * _3106));
                        float _4453 = isnan(0.0) ? _3118 : (isnan(_3118) ? 0.0 : max(_3118, 0.0));
                        float _3121 = isnan(1.0) ? _4453 : (isnan(_4453) ? 1.0 : min(_4453, 1.0));
                        float _3125 = ((_3121 * _3121) * (_3103 + (-1.0))) + 1.0;
                        float _3126 = _3061 * _3102;
                        float _3127 = _3126 * _3126;
                        float _3130 = ((1.0 - _3127) * _3051) + _3127;
                        float _4464 = isnan(0.0) ? _3130 : (isnan(_3130) ? 0.0 : max(_3130, 0.0));
                        float _3131 = isnan(1.0) ? _4464 : (isnan(_4464) ? 1.0 : min(_4464, 1.0));
                        float _3132 = 1.0 - _3102;
                        float _3142 = (0.5 / (((_3131 * ((_3117 * _3132) + _3102)) + 9.9999999392252902907785028219223e-09) + (((_3131 * _3132) + _3102) * _3117))) * _3131;
                        float _4475 = isnan(0.0) ? _3142 : (isnan(_3142) ? 0.0 : max(_3142, 0.0));
                        float _3153 = (((_3103 * 3.1415927410125732421875) * (isnan(1.0) ? _4475 : (isnan(_4475) ? 1.0 : min(_4475, 1.0)))) / ((_3125 * _3125) * ((_3068 * 2.1991131305694580078125) + 3.141590118408203125))) * _3057;
                        _2905 = (_3072 * _3020.x) + _2978;
                        _2906 = (_3072 * _3020.y) + _2979;
                        _2907 = (_3072 * _3020.z) + _2980;
                        _2902 = (_3153 * _3037.x) + _2975;
                        _2903 = (_3153 * _3037.y) + _2976;
                        _2904 = (_3153 * _3037.z) + _2977;
                        if (_2982 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2975 = _2902;
                            _2976 = _2903;
                            _2977 = _2904;
                            _2978 = _2905;
                            _2979 = _2906;
                            _2980 = _2907;
                            _2981 = _2982;
                        }
                    }
                    frontier_phi_66_pred = _2902;
                    frontier_phi_66_pred_1 = _2907;
                    frontier_phi_66_pred_2 = _2906;
                    frontier_phi_66_pred_3 = _2905;
                    frontier_phi_66_pred_4 = _2904;
                    frontier_phi_66_pred_5 = _2903;
                }
                _2670 = frontier_phi_66_pred;
                _2680 = frontier_phi_66_pred_1;
                _2678 = frontier_phi_66_pred_2;
                _2676 = frontier_phi_66_pred_3;
                _2674 = frontier_phi_66_pred_4;
                _2672 = frontier_phi_66_pred_5;
                uint _2837 = _2836 + 1u;
                if (_2837 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2830 = _2670;
                    _2831 = _2672;
                    _2832 = _2674;
                    _2833 = _2676;
                    _2834 = _2678;
                    _2835 = _2680;
                    _2836 = _2837;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2669 = _2670;
            _2671 = _2672;
            _2673 = _2674;
            _2675 = _2676;
            _2677 = _2678;
            _2679 = _2680;
        }
        uvec4 _2683 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2684 = _2683.z;
        uint _2686 = (_2684 >> 8u) & 15u;
        float _2798;
        float _2800;
        float _2802;
        float _2804;
        float _2806;
        float _2808;
        if (((4294967295u << _2686) & _2523) == 0u)
        {
            _2798 = _2669;
            _2800 = _2671;
            _2802 = _2673;
            _2804 = _2675;
            _2806 = _2677;
            _2808 = _2679;
        }
        else
        {
            float _2823 = inversesqrt(dot(vec3(_2477, _2478, _2479), vec3(_2477, _2478, _2479)));
            float _2824 = _2823 * _2477;
            float _2825 = _2823 * _2478;
            float _2826 = _2823 * _2479;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2686 < ((_2684 >> 12u) & 15u))
            {
                float _2799;
                float _2801;
                float _2803;
                float _2805;
                float _2807;
                float _2809;
                float _2958 = _2669;
                float _2959 = _2671;
                float _2960 = _2673;
                float _2961 = _2675;
                float _2962 = _2677;
                float _2963 = _2679;
                uint _2964 = _2686;
                uint _2973;
                bool _2974;
                for (;;)
                {
                    _2973 = texelFetch(g_lightClassification, int((((_2517 << 5u) + (_2503 << 9u)) + (_2964 << 2u)) >> 2u)).x;
                    _2974 = _2973 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2974)
                    {
                        frontier_phi_77_pred = _2963;
                        frontier_phi_77_pred_1 = _2962;
                        frontier_phi_77_pred_2 = _2961;
                        frontier_phi_77_pred_3 = _2960;
                        frontier_phi_77_pred_4 = _2959;
                        frontier_phi_77_pred_5 = _2958;
                    }
                    else
                    {
                        float _3167;
                        float _3168;
                        float _3169;
                        float _3170;
                        float _3171;
                        float _3172;
                        float _3462;
                        float _3463;
                        float _3464;
                        float _3465;
                        float _3466;
                        float _3467;
                        float _3180 = _2958;
                        float _3181 = _2959;
                        float _3182 = _2960;
                        float _3183 = _2961;
                        float _3184 = _2962;
                        float _3185 = _2963;
                        uint _3186 = _2973;
                        uint _3187;
                        vec4 _3212;
                        float _3213;
                        vec4 _3228;
                        vec3 _3240;
                        vec4 _3255;
                        vec4 _3271;
                        float _3318;
                        bool _3319;
                        for (;;)
                        {
                            uint _3197 = ((_2964 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3186));
                            _3187 = (_3186 + 4294967295u) & _3186;
                            uint _3199 = _3197 * 40u;
                            _3212 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3199)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3199 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3199 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3199 + 3u)).x));
                            _3213 = _3212.w;
                            uint _3215 = (_3197 * 40u) + 4u;
                            _3228 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3215)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3215 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3215 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3215 + 3u)).x));
                            uint _3230 = (_3197 * 40u) + 8u;
                            _3240 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3230)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3230 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3230 + 2u)).x));
                            uint _3242 = (_3197 * 40u) + 16u;
                            _3255 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3242)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3242 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3242 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3242 + 3u)).x));
                            uint _3258 = (_3197 * 40u) + 20u;
                            _3271 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3258)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3258 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3258 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3258 + 3u)).x));
                            uint _3274 = (_3197 * 40u) + 24u;
                            vec4 _3287 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3274)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3274 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3274 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3274 + 3u)).x));
                            uint _3293 = (_3197 * 40u) + 28u;
                            vec4 _3306 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3293)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3293 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3293 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3293 + 3u)).x));
                            _3318 = fma(_2479, _3306.z, fma(_2478, _3306.y, _3306.x * _2477)) + _3306.w;
                            _3319 = !((fma(_2479, _3287.z, fma(_2478, _3287.y, _3287.x * _2477)) + _3287.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3319)
                            {
                                float _3346 = _3212.x - _2477;
                                float _3347 = _3212.y - _2478;
                                float _3348 = _3212.z - _2479;
                                float _3349 = dot(vec3(_3346, _3347, _3348), vec3(_3346, _3347, _3348));
                                float _3352 = inversesqrt(_3349);
                                float _3353 = _3352 * _3346;
                                float _3354 = _3352 * _3347;
                                float _3355 = _3352 * _3348;
                                float _3359 = 1.0 - (_3349 / (_3213 * _3213));
                                float _4486 = isnan(0.0) ? _3359 : (isnan(_3359) ? 0.0 : max(_3359, 0.0));
                                float _3360 = isnan(1.0) ? _4486 : (isnan(_4486) ? 1.0 : min(_4486, 1.0));
                                float _3364 = sqrt(_3349) * _3228.w;
                                float _3366 = 1.39999997615814208984375 / (_3364 + 1.39999997615814208984375);
                                float _3367 = _3366 * _3366;
                                float _3370 = ((1.0 - _3367) * dot(vec3(_3353, _3354, _3355), vec3(_687, _690, _693))) + _3367;
                                float _3373 = _3364 * _3364;
                                float _3377 = (fma(_2479, _3255.z, fma(_2478, _3255.y, _3255.x * _2477)) + _3255.w) / _3318;
                                float _3378 = (fma(_2479, _3271.z, fma(_2478, _3271.y, _3271.x * _2477)) + _3271.w) / _3318;
                                float _3382 = 1.0 - dot(vec2(_3377, _3378), vec2(_3377, _3378));
                                float _4502 = isnan(0.0) ? _3382 : (isnan(_3382) ? 0.0 : max(_3382, 0.0));
                                float _3383 = isnan(1.0) ? _4502 : (isnan(_4502) ? 1.0 : min(_4502, 1.0));
                                float _3384 = _3383 * (((isnan(0.0) ? _3370 : (isnan(_3370) ? 0.0 : max(_3370, 0.0))) * _3360) / ((_3373 * 0.699999988079071044921875) + 1.0));
                                float _3396 = exp2(log2(1.0 / ((_3373 * 3.5) + 5.0)) * 0.25);
                                float _3397 = 1.0 - _762;
                                float _3404 = sqrt(1.0 - ((1.0 - (_3397 * _3397)) * (1.0 - (_3396 * _3396))));
                                float _3405 = _3404 * _3404;
                                float _3406 = _3405 * _3405;
                                float _3407 = _3353 - _2824;
                                float _3408 = _3354 - _2825;
                                float _3409 = _3355 - _2826;
                                float _3413 = inversesqrt(dot(vec3(_3407, _3408, _3409), vec3(_3407, _3408, _3409)));
                                float _3417 = dot(vec3(_687, _690, _693), vec3((-0.0) - _2824, (-0.0) - _2825, (-0.0) - _2826));
                                float _4513 = isnan(0.0) ? _3417 : (isnan(_3417) ? 0.0 : max(_3417, 0.0));
                                float _3420 = isnan(1.0) ? _4513 : (isnan(_4513) ? 1.0 : min(_4513, 1.0));
                                float _3421 = dot(vec3(_687, _690, _693), vec3(_3413 * _3407, _3413 * _3408, _3413 * _3409));
                                float _4524 = isnan(0.0) ? _3421 : (isnan(_3421) ? 0.0 : max(_3421, 0.0));
                                float _3424 = isnan(1.0) ? _4524 : (isnan(_4524) ? 1.0 : min(_4524, 1.0));
                                float _3428 = ((_3424 * _3424) * (_3406 + (-1.0))) + 1.0;
                                float _3429 = _3366 * _3405;
                                float _3430 = _3429 * _3429;
                                float _3436 = ((1.0 - _3430) * dot(vec3(_687, _690, _693), vec3(_3353, _3354, _3355))) + _3430;
                                float _4535 = isnan(0.0) ? _3436 : (isnan(_3436) ? 0.0 : max(_3436, 0.0));
                                float _3437 = isnan(1.0) ? _4535 : (isnan(_4535) ? 1.0 : min(_4535, 1.0));
                                float _3438 = 1.0 - _3405;
                                float _3448 = (0.5 / (((_3437 * ((_3420 * _3438) + _3405)) + 9.9999999392252902907785028219223e-09) + (((_3437 * _3438) + _3405) * _3420))) * _3437;
                                float _4546 = isnan(0.0) ? _3448 : (isnan(_3448) ? 0.0 : max(_3448, 0.0));
                                float _3458 = (_3383 * _3360) * (((_3406 * 3.1415927410125732421875) * (isnan(1.0) ? _4546 : (isnan(_4546) ? 1.0 : min(_4546, 1.0)))) / ((_3428 * _3428) * ((_3373 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3384 * _3228.y;
                                frontier_phi_83_pred_1 = _3384 * _3228.x;
                                frontier_phi_83_pred_2 = _3458 * _3240.z;
                                frontier_phi_83_pred_3 = _3458 * _3240.y;
                                frontier_phi_83_pred_4 = _3458 * _3240.x;
                                frontier_phi_83_pred_5 = _3384 * _3228.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3466 = frontier_phi_83_pred;
                            _3465 = frontier_phi_83_pred_1;
                            _3464 = frontier_phi_83_pred_2;
                            _3463 = frontier_phi_83_pred_3;
                            _3462 = frontier_phi_83_pred_4;
                            _3467 = frontier_phi_83_pred_5;
                            _3170 = _3465 + _3183;
                            _3171 = _3466 + _3184;
                            _3172 = _3467 + _3185;
                            _3167 = _3462 + _3180;
                            _3168 = _3463 + _3181;
                            _3169 = _3464 + _3182;
                            if (_3187 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3180 = _3167;
                                _3181 = _3168;
                                _3182 = _3169;
                                _3183 = _3170;
                                _3184 = _3171;
                                _3185 = _3172;
                                _3186 = _3187;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3172;
                        frontier_phi_77_pred_1 = _3171;
                        frontier_phi_77_pred_2 = _3170;
                        frontier_phi_77_pred_3 = _3169;
                        frontier_phi_77_pred_4 = _3168;
                        frontier_phi_77_pred_5 = _3167;
                    }
                    _2809 = frontier_phi_77_pred;
                    _2807 = frontier_phi_77_pred_1;
                    _2805 = frontier_phi_77_pred_2;
                    _2803 = frontier_phi_77_pred_3;
                    _2801 = frontier_phi_77_pred_4;
                    _2799 = frontier_phi_77_pred_5;
                    uint _2965 = _2964 + 1u;
                    if (_2965 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2958 = _2799;
                        _2959 = _2801;
                        _2960 = _2803;
                        _2961 = _2805;
                        _2962 = _2807;
                        _2963 = _2809;
                        _2964 = _2965;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2803;
                frontier_phi_58_59_ladder_1 = _2809;
                frontier_phi_58_59_ladder_2 = _2807;
                frontier_phi_58_59_ladder_3 = _2805;
                frontier_phi_58_59_ladder_4 = _2801;
                frontier_phi_58_59_ladder_5 = _2799;
            }
            else
            {
                frontier_phi_58_59_ladder = _2673;
                frontier_phi_58_59_ladder_1 = _2679;
                frontier_phi_58_59_ladder_2 = _2677;
                frontier_phi_58_59_ladder_3 = _2675;
                frontier_phi_58_59_ladder_4 = _2671;
                frontier_phi_58_59_ladder_5 = _2669;
            }
            _2798 = frontier_phi_58_59_ladder_5;
            _2800 = frontier_phi_58_59_ladder_4;
            _2802 = frontier_phi_58_59_ladder;
            _2804 = frontier_phi_58_59_ladder_3;
            _2806 = frontier_phi_58_59_ladder_2;
            _2808 = frontier_phi_58_59_ladder_1;
        }
        float _2813 = isnan(1.0) ? _746 : (isnan(_746) ? 1.0 : min(_746, 1.0));
        _2536 = (_2813 * _2804) + _1969;
        _2538 = (_2813 * _2806) + _1971;
        _2540 = (_2813 * _2808) + _1973;
        _2542 = ((_2798 * _731) * _2813) + _2317;
        _2544 = ((_2800 * _733) * _2813) + _2319;
        _2546 = ((_2802 * _734) * _2813) + _2321;
    }
    else
    {
        _2536 = _1969;
        _2538 = _1971;
        _2540 = _1973;
        _2542 = _2317;
        _2544 = _2319;
        _2546 = _2321;
    }
    uint _2552 = _707 + uint(cbMatDynParam._m0[0u].w);
    float _2558 = cbMtdParam._m0[13u].y * cbMtdParam._m0[15u].y;
    float _2564 = (((((_2558 * cbMtdParam._m0[10u].x) * _428.x) * _451) * (((1.0 - _505) * cbMtdParam._m0[16u].z) + _505)) * _542) * cbInstanceData._m0[_2552].x;
    float _2570 = (((((_2558 * cbMtdParam._m0[10u].y) * _428.y) * _451) * (((1.0 - _507) * cbMtdParam._m0[16u].z) + _507)) * _542) * cbInstanceData._m0[_2552].y;
    float _2576 = (((((_2558 * cbMtdParam._m0[10u].z) * _428.z) * _451) * (((1.0 - _509) * cbMtdParam._m0[16u].z) + _509)) * _542) * cbInstanceData._m0[_2552].z;
    float _4562 = isnan(0.0) ? _721 : (isnan(_721) ? 0.0 : max(_721, 0.0));
    float _4573 = isnan(0.0) ? _722 : (isnan(_722) ? 0.0 : max(_722, 0.0));
    float _4584 = isnan(0.0) ? _723 : (isnan(_723) ? 0.0 : max(_723, 0.0));
    float _2593 = (((isnan(1.0) ? _4562 : (isnan(_4562) ? 1.0 : min(_4562, 1.0))) * (_2536 + ((isnan(0.0) ? _1507 : (isnan(_1507) ? 0.0 : max(_1507, 0.0))) * _746))) + ((_2542 + ((isnan(0.0) ? _1801 : (isnan(_1801) ? 0.0 : max(_1801, 0.0))) * _1586)) * cbPerFrame._m0[3u].x)) + _2564;
    float _2595 = (_2570 + ((_2544 + ((isnan(0.0) ? _1804 : (isnan(_1804) ? 0.0 : max(_1804, 0.0))) * _1586)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4573 : (isnan(_4573) ? 1.0 : min(_4573, 1.0))) * (_2538 + ((isnan(0.0) ? _1510 : (isnan(_1510) ? 0.0 : max(_1510, 0.0))) * _746)));
    float _2597 = (_2576 + ((_2546 + ((isnan(0.0) ? _1807 : (isnan(_1807) ? 0.0 : max(_1807, 0.0))) * _1586)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4584 : (isnan(_4584) ? 1.0 : min(_4584, 1.0))) * (_2540 + ((isnan(0.0) ? _1513 : (isnan(_1513) ? 0.0 : max(_1513, 0.0))) * _746)));
    float _2598 = isnan(0.0) ? _2593 : (isnan(_2593) ? 0.0 : max(_2593, 0.0));
    float _2599 = isnan(0.0) ? _2595 : (isnan(_2595) ? 0.0 : max(_2595, 0.0));
    float _2600 = isnan(0.0) ? _2597 : (isnan(_2597) ? 0.0 : max(_2597, 0.0));
    float _2606 = cbMtdParam._m0[2u].x * _2564;
    float _2607 = cbMtdParam._m0[2u].y * _2570;
    float _2608 = cbMtdParam._m0[2u].z * _2576;
    float _4610 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2610 = isnan(1.0) ? _4610 : (isnan(_4610) ? 1.0 : min(_4610, 1.0));
    uint _2611 = _706 + 6u;
    float _2619 = _668 / cbSceneParam._m0[86u].x;
    float _2620 = _669 / cbSceneParam._m0[86u].y;
    vec4 _2634 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2619, _2620, (log2((isnan(cbSceneParam._m0[77u].w) ? _591 : (isnan(_591) ? cbSceneParam._m0[77u].w : min(_591, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2636 = _2634.x;
    float _2637 = _2634.y;
    float _2638 = _2634.z;
    float _2639 = _2634.w;
    float _2731;
    float _2733;
    float _2735;
    float _2737;
    if (_591 > cbSceneParam._m0[78u].w)
    {
        float _2694 = isnan(_591) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _591 : min(cbSceneParam._m0[80u].w, _591));
        float _2695 = _2694 / _591;
        float _2706 = _2695 * _641;
        float _2707 = _642 * _2695;
        float _2708 = (-0.0) - _2707;
        float _2709 = _2695 * _643;
        float _2711 = (cbSceneParam._m0[77u].w * _2708) / _2694;
        float _2712 = _2711 + cbSceneParam._m0[79u].w;
        float _2713 = cbSceneParam._m0[79u].w - _2707;
        float _2719 = sqrt(((_2706 * _2706) + (_2707 * _2707)) + (_2709 * _2709));
        float _2722 = (1.0 - (cbSceneParam._m0[77u].w / _2694)) * _2719;
        float _2727 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2729 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2915;
        if (abs((_2708 - _2711) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2915 = ((((_2712 > 0.0) ? exp2(_2727 * _2712) : (2.0 - exp2(_2729 * _2712))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2722;
        }
        else
        {
            float _2859 = 1.0 / cbSceneParam._m0[80u].x;
            float _2860 = isnan(_2713) ? _2712 : (isnan(_2712) ? _2713 : max(_2712, _2713));
            float _2861 = isnan(_2713) ? _2712 : (isnan(_2712) ? _2713 : min(_2712, _2713));
            float _2870 = isnan(0.0) ? _2860 : (isnan(_2860) ? 0.0 : min(_2860, 0.0));
            float _2871 = isnan(0.0) ? _2861 : (isnan(_2861) ? 0.0 : min(_2861, 0.0));
            _2915 = ((abs(_2719 / _2708) * cbSceneParam._m0[80u].y) * ((((_2870 - _2871) * 2.0) - ((exp2(_2727 * (isnan(0.0) ? _2860 : (isnan(_2860) ? 0.0 : max(_2860, 0.0)))) - exp2(_2727 * (isnan(0.0) ? _2861 : (isnan(_2861) ? 0.0 : max(_2861, 0.0))))) * _2859)) - ((exp2(_2729 * _2870) - exp2(_2729 * _2871)) * _2859))) + (_2722 * cbSceneParam._m0[80u].z);
        }
        vec4 _2917 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2619, _2620, 1.0), 0.0);
        float _2926 = exp2((_2915 * (-1.44269502162933349609375)) * (1.0 - _2917.w));
        float _2927 = log2(_2926);
        float _2943 = log2(_2639);
        _2731 = (exp2(_2943 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2927 * cbSceneParam._m0[78u].x)) * _2917.x) / cbSceneParam._m0[78u].x)) + _2636;
        _2733 = (exp2(_2943 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2927 * cbSceneParam._m0[78u].y)) * _2917.y) / cbSceneParam._m0[78u].y)) + _2637;
        _2735 = (exp2(_2943 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2927 * cbSceneParam._m0[78u].z)) * _2917.z) / cbSceneParam._m0[78u].z)) + _2638;
        _2737 = _2926 * _2639;
    }
    else
    {
        _2731 = _2636;
        _2733 = _2637;
        _2735 = _2638;
        _2737 = _2639;
    }
    bool _2953;
    vec4 _2747;
    vec4 _2769;
    float _2771;
    float _2775;
    float _2776;
    float _2777;
    float _2780;
    float _2783;
    float _2786;
    float _2787;
    bool _2797;
    for (;;)
    {
        _2747 = cbMatDynParam._m0[0u];
        float _2749 = roundEven(_2747.y);
        bool _2750 = _2749 == 3.0;
        float _2751 = log2(_2737);
        float _2755 = exp2(_2751 * cbSceneParam._m0[78u].x);
        float _2756 = exp2(_2751 * cbSceneParam._m0[78u].y);
        float _2757 = exp2(_2751 * cbSceneParam._m0[78u].z);
        float _2758 = _2755 * _2598;
        float _2759 = _2756 * _2599;
        float _2760 = _2757 * _2600;
        float _2767 = _657 + (-0.5);
        _2769 = cbMtdParam._m0[1u];
        _2771 = _2769.y * _2767;
        float _2774 = (_2749 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2775 = _2774 * (_2750 ? _2758 : (_2758 + (cbSceneParam._m0[72u].w * _2731)));
        _2776 = _2774 * (_2750 ? _2759 : (_2759 + (cbSceneParam._m0[72u].w * _2733)));
        _2777 = _2774 * (_2750 ? _2760 : (_2760 + (cbSceneParam._m0[72u].w * _2735)));
        _2780 = ((_2606 * _2610) * _2755) * _2774;
        _2783 = ((_2607 * _2610) * _2756) * _2774;
        _2786 = ((_2608 * _2610) * _2757) * _2774;
        _2787 = _2767 * 0.999000012874603271484375;
        _2797 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2797)
        {
            if ((cbInstanceData._m0[_706 + 7u].x + _2787) < 0.5)
            {
                _2953 = true;
                break;
            }
        }
        uint _2894 = _707 + uint(_2747.w);
        if ((cbInstanceData._m0[_2894].w < 1.0) && ((cbInstanceData._m0[_2894].w + _2787) < 0.5))
        {
            _2953 = true;
            break;
        }
        if ((_2771 + 1.0) < _2769.x)
        {
            _2953 = true;
            break;
        }
        _2953 = false;
        break;
    }
    float _3158;
    if (_2953)
    {
        discard_state = true;
        _3158 = 0.0;
    }
    else
    {
        _3158 = cbInstanceData._m0[_2611].w;
    }
    SV_Target.x = _2775;
    SV_Target.y = _2776;
    SV_Target.z = _2777;
    SV_Target.w = _3158;
    SV_Target_1.x = _2780;
    SV_Target_1.y = _2783;
    SV_Target_1.z = _2786;
    SV_Target_1.w = cbInstanceData._m0[_2611].w;
    discard_exit();
}


