#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[18];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_M1_Detail_Combustion_snp_0_Texture2D_10;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_M1_Detail_Combustion_snp_0_Texture2D_13;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_M1_Detail_Combustion_snp_0_Texture2D_14;
layout(set = 0, binding = 5) uniform texture2D M_AMSN_M1_Detail_Combustion_snp_0_Texture2D_23;
layout(set = 0, binding = 6) uniform texture2D M_AMSN_M1_Detail_Combustion_snp_0_Texture2D_4;
layout(set = 0, binding = 7) uniform texture2D M_AMSN_M1_Detail_Combustion_snp_0_Texture2D_7;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in float TEXCOORD;
layout(location = 4, component = 1) in float TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 4, component = 2) in float TEXCOORD_6;
layout(location = 4, component = 3) in float TEXCOORD_7;
layout(location = 6) in float TEXCOORD_8;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1049;
float _3771;
float _3772;
float _3773;
float _3774;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _198 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _199 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _200 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _206 = inversesqrt(dot(vec3(_198, _199, _200), vec3(_198, _199, _200)));
    float _213 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _220 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _242 = texture(sampler2D(M_AMSN_M1_Detail_Combustion_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1) + cbTextureTilingScale._m0[2u].w));
    float _248 = _242.x * cbMtdParam._m0[9u].x;
    float _249 = _242.y * cbMtdParam._m0[9u].y;
    float _250 = _242.z * cbMtdParam._m0[9u].z;
    vec4 _262 = texture(sampler2D(M_AMSN_M1_Detail_Combustion_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_1) + cbTextureTilingScale._m0[3u].w));
    float _264 = _262.x;
    vec4 _277 = texture(sampler2D(M_AMSN_M1_Detail_Combustion_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD_1) + cbTextureTilingScale._m0[7u].w));
    float _281 = _277.z;
    float _285 = (_277.x * 2.0) + (-1.0);
    float _287 = (_277.y * 2.0) + (-1.0);
    float _288 = dot(vec2(_285, _287), vec2(_285, _287));
    float _3783 = isnan(0.0) ? _288 : (isnan(_288) ? 0.0 : max(_288, 0.0));
    float _294 = sqrt(1.0 - (isnan(1.0) ? _3783 : (isnan(_3783) ? 1.0 : min(_3783, 1.0))));
    float _320 = (cbMtdParam._m0[17u].z * cbPerFrame._m0[22u].x) + TEXCOORD;
    float _321 = (cbMtdParam._m0[17u].w * cbPerFrame._m0[22u].x) + TEXCOORD_1;
    vec4 _334 = texture(sampler2D(M_AMSN_M1_Detail_Combustion_snp_0_Texture2D_4, SS_DiffuseMap), vec2((_320 * cbTextureTilingScale._m0[6u].x) + cbTextureTilingScale._m0[6u].z, (_321 * cbTextureTilingScale._m0[6u].y) + cbTextureTilingScale._m0[6u].w));
    float _348 = abs((fract(cbMtdParam._m0[13u].z * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _3794 = isnan(0.0) ? _348 : (isnan(_348) ? 0.0 : max(_348, 0.0));
    float _349 = isnan(1.0) ? _3794 : (isnan(_3794) ? 1.0 : min(_3794, 1.0));
    float _357 = (((_349 * _349) * (3.0 - (_349 * 2.0))) * cbMtdParam._m0[14u].x) - cbMtdParam._m0[14u].y;
    float _366 = cbMtdParam._m0[14u].z * cbPerFrame._m0[22u].x;
    float _374 = abs((fract(cbMtdParam._m0[14u].w * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _3805 = isnan(0.0) ? _374 : (isnan(_374) ? 0.0 : max(_374, 0.0));
    float _375 = isnan(1.0) ? _3805 : (isnan(_3805) ? 1.0 : min(_3805, 1.0));
    float _379 = (_375 * _375) * (3.0 - (_375 * 2.0));
    float _380 = _379 * cbMtdParam._m0[17u].x;
    float _381 = _379 * cbMtdParam._m0[17u].y;
    float _382 = sin(_366);
    float _383 = cos(_366);
    float _384 = TEXCOORD - _380;
    float _385 = TEXCOORD_1 - _381;
    vec4 _405 = texture(sampler2D(M_AMSN_M1_Detail_Combustion_snp_0_Texture2D_10, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (_380 + fma(_385, (-0.0) - _382, _384 * _383))) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (fma(_385, _383, _384 * _382) + _381)) + cbTextureTilingScale._m0[0u].w));
    float _411 = (cbMtdParam._m0[11u].x * cbMtdParam._m0[13u].w) * _405.x;
    float _413 = (cbMtdParam._m0[11u].y * cbMtdParam._m0[13u].w) * _405.y;
    float _415 = (cbMtdParam._m0[11u].z * cbMtdParam._m0[13u].w) * _405.z;
    vec4 _438 = texture(sampler2D(M_AMSN_M1_Detail_Combustion_snp_0_Texture2D_23, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * _320) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _321) + cbTextureTilingScale._m0[5u].w));
    float _448 = (TEXCOORD_3.x - ((cbMtdParam._m0[16u].w * (1.0 - TEXCOORD_3.x)) * (_438.x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[13u].x + 1.0);
    float _3816 = isnan(0.0) ? _448 : (isnan(_448) ? 0.0 : max(_448, 0.0));
    float _449 = isnan(1.0) ? _3816 : (isnan(_3816) ? 1.0 : min(_3816, 1.0));
    float _453 = (cbMtdParam._m0[16u].y * _285) + _285;
    float _454 = (cbMtdParam._m0[16u].y * _287) + _287;
    float _457 = fma(_294, _213 * NORMAL.x, fma(_454, _220 * TANGENT.x, (_206 * _198) * _453));
    float _460 = fma(_294, _213 * NORMAL.y, fma(_454, _220 * TANGENT.y, (_206 * _199) * _453));
    float _463 = fma(_294, _213 * NORMAL.z, fma(_454, _220 * TANGENT.z, (_206 * _200) * _453));
    float _467 = inversesqrt(dot(vec3(_457, _460, _463), vec3(_457, _460, _463)));
    float _468 = _467 * _457;
    float _469 = _467 * _460;
    float _470 = _467 * _463;
    float _3827 = isnan(0.0) ? _281 : (isnan(_281) ? 0.0 : max(_281, 0.0));
    float _471 = isnan(1.0) ? _3827 : (isnan(_3827) ? 1.0 : min(_3827, 1.0));
    float _3838 = isnan(0.0) ? _248 : (isnan(_248) ? 0.0 : max(_248, 0.0));
    float _3849 = isnan(0.0) ? _249 : (isnan(_249) ? 0.0 : max(_249, 0.0));
    float _3860 = isnan(0.0) ? _250 : (isnan(_250) ? 0.0 : max(_250, 0.0));
    float _3871 = isnan(0.0) ? _264 : (isnan(_264) ? 0.0 : max(_264, 0.0));
    float _475 = isnan(1.0) ? _3871 : (isnan(_3871) ? 1.0 : min(_3871, 1.0));
    float _491 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _532 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _542 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _532);
    float _543 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _532);
    float _544 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _532);
    float _548 = inversesqrt(dot(vec3(_542, _543, _544), vec3(_542, _543, _544)));
    float _549 = _542 * _548;
    float _550 = _543 * _548;
    float _551 = _544 * _548;
    vec4 _556 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _558 = _556.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _729 = sqrt(((_542 * _542) + (_543 * _543)) + (_544 * _544));
        float _735 = (cbMatDynParam._m0[5u].x * _729) + cbMatDynParam._m0[5u].y;
        float _3882 = isnan(0.0) ? _735 : (isnan(_735) ? 0.0 : max(_735, 0.0));
        float _736 = isnan(1.0) ? _3882 : (isnan(_3882) ? 1.0 : min(_3882, 1.0));
        float _740 = (cbMatDynParam._m0[5u].z * _729) + cbMatDynParam._m0[5u].w;
        float _3893 = isnan(0.0) ? _740 : (isnan(_740) ? 0.0 : max(_740, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3893 : (isnan(_3893) ? 1.0 : min(_3893, 1.0))) - _736)) + _736) < ((_558 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _569 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _570 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _588 = fma(_470, cbSceneParam._m0[5u].z, fma(_469, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _468));
    float _591 = fma(_470, cbSceneParam._m0[6u].z, fma(_469, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _468));
    float _594 = fma(_470, cbSceneParam._m0[7u].z, fma(_469, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _468));
    uint _607 = uint(roundEven(NORMAL.w)) * 13u;
    uint _608 = _607 + 9u;
    uint _609 = _608 + uint(cbMatDynParam._m0[0u].w);
    float _615 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3838 : (isnan(_3838) ? 1.0 : min(_3838, 1.0)))) * cbInstanceData._m0[_609].x;
    float _616 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3849 : (isnan(_3849) ? 1.0 : min(_3849, 1.0)))) * cbInstanceData._m0[_609].y;
    float _617 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3860 : (isnan(_3860) ? 1.0 : min(_3860, 1.0)))) * cbInstanceData._m0[_609].z;
    float _3904 = isnan(0.0) ? _615 : (isnan(_615) ? 0.0 : max(_615, 0.0));
    float _618 = isnan(1.0) ? _3904 : (isnan(_3904) ? 1.0 : min(_3904, 1.0));
    float _3915 = isnan(0.0) ? _616 : (isnan(_616) ? 0.0 : max(_616, 0.0));
    float _619 = isnan(1.0) ? _3915 : (isnan(_3915) ? 1.0 : min(_3915, 1.0));
    float _3926 = isnan(0.0) ? _617 : (isnan(_617) ? 0.0 : max(_617, 0.0));
    float _620 = isnan(1.0) ? _3926 : (isnan(_3926) ? 1.0 : min(_3926, 1.0));
    float _621 = 1.0 - _475;
    float _622 = _618 * _621;
    float _623 = _619 * _621;
    float _624 = _620 * _621;
    float _629 = (_618 + (-0.039999999105930328369140625)) * _475;
    float _630 = (_619 + (-0.039999999105930328369140625)) * _475;
    float _631 = (_620 + (-0.039999999105930328369140625)) * _475;
    float _632 = _629 + 0.039999999105930328369140625;
    float _634 = _630 + 0.039999999105930328369140625;
    float _635 = _631 + 0.039999999105930328369140625;
    vec4 _644 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _569, cbSceneParam._m0[86u].y * _570));
    float _647 = _644.x * TEXCOORD_3.w;
    float _648 = dot(vec3(_468, _469, _470), vec3(_549, _550, _551));
    float _651 = _648 * 2.0;
    float _655 = (_651 * _468) - _549;
    float _656 = (_651 * _469) - _550;
    float _657 = (_651 * _470) - _551;
    float _661 = abs(dot(vec3(_549, _550, _551), vec3(_468, _469, _470)));
    float _3937 = isnan(0.0) ? _661 : (isnan(_661) ? 0.0 : max(_661, 0.0));
    float _663 = sqrt(_471);
    float _675 = exp2((_663 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3937 : (isnan(_3937) ? 1.0 : min(_3937, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_663 * 3.0));
    float _681 = (1.0 - _675) * ((_663 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _682 = _675 * _663;
    float _710 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _714 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _718 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1048;
    float _1050;
    float _1051;
    float _1052;
    float _1053;
    float _1054;
    float _1055;
    float _1056;
    float _1057;
    float _1058;
    float _1059;
    float _1060;
    float _1061;
    float _1062;
    float _1063;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _773 = fma(_718, cbModelParam._m0[26u].z, fma(_714, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _710));
        float _777 = fma(_718, cbModelParam._m0[27u].z, fma(_714, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _710));
        float _781 = fma(_718, cbModelParam._m0[28u].z, fma(_714, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _710));
        float _806 = _710 + _468;
        float _807 = _714 + _469;
        float _808 = _718 + _470;
        float _818 = fma(_808, cbModelParam._m0[26u].z, fma(_807, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _806)) - _773;
        float _819 = fma(_808, cbModelParam._m0[27u].z, fma(_807, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _806)) - _777;
        float _820 = fma(_808, cbModelParam._m0[28u].z, fma(_807, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _806)) - _781;
        float _824 = inversesqrt(dot(vec3(_818, _819, _820), vec3(_818, _819, _820)));
        float _837 = ((_824 * _818) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_773 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _838 = ((_824 * _819) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_777 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _839 = ((_824 * _820) / cbModelParam._m0[34u].z) + ((((((_781 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _842 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_837, _838, _839), 0.0);
        vec4 _849 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_837, _838, _839), 0.0);
        vec4 _856 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_837, _838, _839), 0.0);
        vec4 _863 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_837, _838, _839), 0.0);
        float _876 = exp2((_842.w + (-0.5)) * 20.0) * 2.0;
        float _877 = _876 * (_842.x + (-0.5));
        float _878 = _876 * (_842.y + (-0.5));
        float _879 = _876 * (_842.z + (-0.5));
        float _886 = exp2((_849.w + (-0.5)) * 20.0) * 2.0;
        float _887 = _886 * (_849.x + (-0.5));
        float _888 = _886 * (_849.y + (-0.5));
        float _889 = _886 * (_849.z + (-0.5));
        float _896 = exp2((_856.w + (-0.5)) * 20.0) * 2.0;
        float _897 = _896 * (_856.x + (-0.5));
        float _898 = _896 * (_856.y + (-0.5));
        float _899 = _896 * (_856.z + (-0.5));
        float _906 = exp2((_863.w + (-0.5)) * 20.0) * 2.0;
        float _907 = _906 * (_863.x + (-0.5));
        float _908 = _906 * (_863.y + (-0.5));
        float _909 = _906 * (_863.z + (-0.5));
        float _910 = isnan(0.0) ? _907 : (isnan(_907) ? 0.0 : max(_907, 0.0));
        float _911 = isnan(0.0) ? _908 : (isnan(_908) ? 0.0 : max(_908, 0.0));
        float _912 = isnan(0.0) ? _909 : (isnan(_909) ? 0.0 : max(_909, 0.0));
        float _913 = _877 * 0.5;
        float _914 = _887 * 0.5;
        float _915 = _897 * 0.5;
        float _916 = dot(vec3(_913, _914, _915), vec3(_913, _914, _915));
        float _921 = (_916 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_916);
        float _930 = (dot(vec3(_468, _469, _470), vec3(_921 * _913, _921 * _914, _921 * _915)) + 1.0) * 0.5;
        float _3963 = isnan(0.0) ? _930 : (isnan(_930) ? 0.0 : max(_930, 0.0));
        float _940 = sqrt(((_914 * _914) + (_913 * _913)) + (_915 * _915)) / (_910 + 9.9999997473787516355514526367188e-06);
        float _3974 = isnan(0.0) ? _940 : (isnan(_940) ? 0.0 : max(_940, 0.0));
        float _941 = isnan(1.0) ? _3974 : (isnan(_3974) ? 1.0 : min(_3974, 1.0));
        float _942 = _941 * 2.0;
        float _946 = (1.0 - _941) / (_941 + 1.0);
        float _3985 = isnan(0.0) ? _946 : (isnan(_946) ? 0.0 : max(_946, 0.0));
        float _947 = isnan(1.0) ? _3985 : (isnan(_3985) ? 1.0 : min(_3985, 1.0));
        float _956 = ((((1.0 - _947) * (_942 + 2.0)) * exp2(log2(isnan(1.0) ? _3963 : (isnan(_3963) ? 1.0 : min(_3963, 1.0))) * (_942 + 1.0))) + _947) * _910;
        float _957 = _878 * 0.5;
        float _958 = _888 * 0.5;
        float _959 = _898 * 0.5;
        float _960 = dot(vec3(_957, _958, _959), vec3(_957, _958, _959));
        float _965 = (_960 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_960);
        float _973 = (dot(vec3(_468, _469, _470), vec3(_965 * _957, _965 * _958, _965 * _959)) + 1.0) * 0.5;
        float _3996 = isnan(0.0) ? _973 : (isnan(_973) ? 0.0 : max(_973, 0.0));
        float _982 = sqrt(((_958 * _958) + (_957 * _957)) + (_959 * _959)) / (_911 + 9.9999997473787516355514526367188e-06);
        float _4007 = isnan(0.0) ? _982 : (isnan(_982) ? 0.0 : max(_982, 0.0));
        float _983 = isnan(1.0) ? _4007 : (isnan(_4007) ? 1.0 : min(_4007, 1.0));
        float _984 = _983 * 2.0;
        float _988 = (1.0 - _983) / (_983 + 1.0);
        float _4018 = isnan(0.0) ? _988 : (isnan(_988) ? 0.0 : max(_988, 0.0));
        float _989 = isnan(1.0) ? _4018 : (isnan(_4018) ? 1.0 : min(_4018, 1.0));
        float _998 = ((((1.0 - _989) * (_984 + 2.0)) * exp2(log2(isnan(1.0) ? _3996 : (isnan(_3996) ? 1.0 : min(_3996, 1.0))) * (_984 + 1.0))) + _989) * _911;
        float _999 = _879 * 0.5;
        float _1000 = _889 * 0.5;
        float _1001 = _899 * 0.5;
        float _1002 = dot(vec3(_999, _1000, _1001), vec3(_999, _1000, _1001));
        float _1007 = (_1002 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1002);
        float _1015 = (dot(vec3(_468, _469, _470), vec3(_1007 * _999, _1007 * _1000, _1007 * _1001)) + 1.0) * 0.5;
        float _4029 = isnan(0.0) ? _1015 : (isnan(_1015) ? 0.0 : max(_1015, 0.0));
        float _1024 = sqrt(((_1000 * _1000) + (_999 * _999)) + (_1001 * _1001)) / (_912 + 9.9999997473787516355514526367188e-06);
        float _4040 = isnan(0.0) ? _1024 : (isnan(_1024) ? 0.0 : max(_1024, 0.0));
        float _1025 = isnan(1.0) ? _4040 : (isnan(_4040) ? 1.0 : min(_4040, 1.0));
        float _1026 = _1025 * 2.0;
        float _1030 = (1.0 - _1025) / (_1025 + 1.0);
        float _4051 = isnan(0.0) ? _1030 : (isnan(_1030) ? 0.0 : max(_1030, 0.0));
        float _1031 = isnan(1.0) ? _4051 : (isnan(_4051) ? 1.0 : min(_4051, 1.0));
        float _1040 = ((((1.0 - _1031) * (_1026 + 2.0)) * exp2(log2(isnan(1.0) ? _4029 : (isnan(_4029) ? 1.0 : min(_4029, 1.0))) * (_1026 + 1.0))) + _1031) * _912;
        _1048 = _879;
        _1050 = _878;
        _1051 = _877;
        _1052 = _889;
        _1053 = _888;
        _1054 = _887;
        _1055 = _899;
        _1056 = _898;
        _1057 = _897;
        _1058 = _912;
        _1059 = _911;
        _1060 = _910;
        _1061 = cbModelParam._m0[36u].z * (isnan(0.0) ? _956 : (isnan(_956) ? 0.0 : max(_956, 0.0)));
        _1062 = cbModelParam._m0[36u].z * (isnan(0.0) ? _998 : (isnan(_998) ? 0.0 : max(_998, 0.0)));
        _1063 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1040 : (isnan(_1040) ? 0.0 : max(_1040, 0.0)));
    }
    else
    {
        _1048 = _1049;
        _1050 = _1049;
        _1051 = _1049;
        _1052 = _1049;
        _1053 = _1049;
        _1054 = _1049;
        _1055 = _1049;
        _1056 = _1049;
        _1057 = _1049;
        _1058 = _1049;
        _1059 = _1049;
        _1060 = _1049;
        _1061 = 0.0;
        _1062 = 0.0;
        _1063 = 0.0;
    }
    float _1361;
    float _1362;
    float _1363;
    float _1364;
    float _1365;
    float _1366;
    float _1367;
    float _1368;
    float _1369;
    float _1370;
    float _1371;
    float _1372;
    float _1373;
    float _1374;
    float _1375;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1092 = fma(_718, cbModelParam._m0[30u].z, fma(_714, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _710));
        float _1096 = fma(_718, cbModelParam._m0[31u].z, fma(_714, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _710));
        float _1100 = fma(_718, cbModelParam._m0[32u].z, fma(_714, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _710));
        float _1123 = _710 + _468;
        float _1124 = _714 + _469;
        float _1125 = _718 + _470;
        float _1135 = fma(_1125, cbModelParam._m0[30u].z, fma(_1124, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1123)) - _1092;
        float _1136 = fma(_1125, cbModelParam._m0[31u].z, fma(_1124, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1123)) - _1096;
        float _1137 = fma(_1125, cbModelParam._m0[32u].z, fma(_1124, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1123)) - _1100;
        float _1141 = inversesqrt(dot(vec3(_1135, _1136, _1137), vec3(_1135, _1136, _1137)));
        float _1154 = ((_1141 * _1135) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1092 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1155 = ((_1141 * _1136) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1096 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1156 = ((_1141 * _1137) / cbModelParam._m0[35u].z) + ((((((_1100 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1158 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1154, _1155, _1156), 0.0);
        vec4 _1165 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1154, _1155, _1156), 0.0);
        vec4 _1172 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1154, _1155, _1156), 0.0);
        vec4 _1179 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1154, _1155, _1156), 0.0);
        float _1191 = exp2((_1158.w + (-0.5)) * 20.0) * 2.0;
        float _1192 = _1191 * (_1158.x + (-0.5));
        float _1193 = _1191 * (_1158.y + (-0.5));
        float _1194 = _1191 * (_1158.z + (-0.5));
        float _1201 = exp2((_1165.w + (-0.5)) * 20.0) * 2.0;
        float _1202 = _1201 * (_1165.x + (-0.5));
        float _1203 = _1201 * (_1165.y + (-0.5));
        float _1204 = _1201 * (_1165.z + (-0.5));
        float _1211 = exp2((_1172.w + (-0.5)) * 20.0) * 2.0;
        float _1212 = _1211 * (_1172.x + (-0.5));
        float _1213 = _1211 * (_1172.y + (-0.5));
        float _1214 = _1211 * (_1172.z + (-0.5));
        float _1221 = exp2((_1179.w + (-0.5)) * 20.0) * 2.0;
        float _1222 = _1221 * (_1179.x + (-0.5));
        float _1223 = _1221 * (_1179.y + (-0.5));
        float _1224 = _1221 * (_1179.z + (-0.5));
        float _1225 = isnan(0.0) ? _1222 : (isnan(_1222) ? 0.0 : max(_1222, 0.0));
        float _1226 = isnan(0.0) ? _1223 : (isnan(_1223) ? 0.0 : max(_1223, 0.0));
        float _1227 = isnan(0.0) ? _1224 : (isnan(_1224) ? 0.0 : max(_1224, 0.0));
        float _1228 = _1192 * 0.5;
        float _1229 = _1202 * 0.5;
        float _1230 = _1212 * 0.5;
        float _1231 = dot(vec3(_1228, _1229, _1230), vec3(_1228, _1229, _1230));
        float _1236 = (_1231 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1231);
        float _1244 = (dot(vec3(_468, _469, _470), vec3(_1236 * _1228, _1236 * _1229, _1236 * _1230)) + 1.0) * 0.5;
        float _4092 = isnan(0.0) ? _1244 : (isnan(_1244) ? 0.0 : max(_1244, 0.0));
        float _1253 = sqrt(((_1229 * _1229) + (_1228 * _1228)) + (_1230 * _1230)) / (_1225 + 9.9999997473787516355514526367188e-06);
        float _4103 = isnan(0.0) ? _1253 : (isnan(_1253) ? 0.0 : max(_1253, 0.0));
        float _1254 = isnan(1.0) ? _4103 : (isnan(_4103) ? 1.0 : min(_4103, 1.0));
        float _1255 = _1254 * 2.0;
        float _1259 = (1.0 - _1254) / (_1254 + 1.0);
        float _4114 = isnan(0.0) ? _1259 : (isnan(_1259) ? 0.0 : max(_1259, 0.0));
        float _1260 = isnan(1.0) ? _4114 : (isnan(_4114) ? 1.0 : min(_4114, 1.0));
        float _1269 = ((((1.0 - _1260) * (_1255 + 2.0)) * exp2(log2(isnan(1.0) ? _4092 : (isnan(_4092) ? 1.0 : min(_4092, 1.0))) * (_1255 + 1.0))) + _1260) * _1225;
        float _1270 = _1193 * 0.5;
        float _1271 = _1203 * 0.5;
        float _1272 = _1213 * 0.5;
        float _1273 = dot(vec3(_1270, _1271, _1272), vec3(_1270, _1271, _1272));
        float _1278 = (_1273 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1273);
        float _1286 = (dot(vec3(_468, _469, _470), vec3(_1278 * _1270, _1278 * _1271, _1278 * _1272)) + 1.0) * 0.5;
        float _4125 = isnan(0.0) ? _1286 : (isnan(_1286) ? 0.0 : max(_1286, 0.0));
        float _1295 = sqrt(((_1271 * _1271) + (_1270 * _1270)) + (_1272 * _1272)) / (_1226 + 9.9999997473787516355514526367188e-06);
        float _4136 = isnan(0.0) ? _1295 : (isnan(_1295) ? 0.0 : max(_1295, 0.0));
        float _1296 = isnan(1.0) ? _4136 : (isnan(_4136) ? 1.0 : min(_4136, 1.0));
        float _1297 = _1296 * 2.0;
        float _1301 = (1.0 - _1296) / (_1296 + 1.0);
        float _4147 = isnan(0.0) ? _1301 : (isnan(_1301) ? 0.0 : max(_1301, 0.0));
        float _1302 = isnan(1.0) ? _4147 : (isnan(_4147) ? 1.0 : min(_4147, 1.0));
        float _1311 = ((((1.0 - _1302) * (_1297 + 2.0)) * exp2(log2(isnan(1.0) ? _4125 : (isnan(_4125) ? 1.0 : min(_4125, 1.0))) * (_1297 + 1.0))) + _1302) * _1226;
        float _1312 = _1194 * 0.5;
        float _1313 = _1204 * 0.5;
        float _1314 = _1214 * 0.5;
        float _1315 = dot(vec3(_1312, _1313, _1314), vec3(_1312, _1313, _1314));
        float _1320 = (_1315 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1315);
        float _1328 = (dot(vec3(_468, _469, _470), vec3(_1320 * _1312, _1320 * _1313, _1320 * _1314)) + 1.0) * 0.5;
        float _4158 = isnan(0.0) ? _1328 : (isnan(_1328) ? 0.0 : max(_1328, 0.0));
        float _1337 = sqrt(((_1313 * _1313) + (_1312 * _1312)) + (_1314 * _1314)) / (_1227 + 9.9999997473787516355514526367188e-06);
        float _4169 = isnan(0.0) ? _1337 : (isnan(_1337) ? 0.0 : max(_1337, 0.0));
        float _1338 = isnan(1.0) ? _4169 : (isnan(_4169) ? 1.0 : min(_4169, 1.0));
        float _1339 = _1338 * 2.0;
        float _1343 = (1.0 - _1338) / (_1338 + 1.0);
        float _4180 = isnan(0.0) ? _1343 : (isnan(_1343) ? 0.0 : max(_1343, 0.0));
        float _1344 = isnan(1.0) ? _4180 : (isnan(_4180) ? 1.0 : min(_4180, 1.0));
        float _1353 = ((((1.0 - _1344) * (_1339 + 2.0)) * exp2(log2(isnan(1.0) ? _4158 : (isnan(_4158) ? 1.0 : min(_4158, 1.0))) * (_1339 + 1.0))) + _1344) * _1227;
        _1361 = _1194;
        _1362 = _1193;
        _1363 = _1192;
        _1364 = _1204;
        _1365 = _1203;
        _1366 = _1202;
        _1367 = _1214;
        _1368 = _1213;
        _1369 = _1212;
        _1370 = _1227;
        _1371 = _1226;
        _1372 = _1225;
        _1373 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1269 : (isnan(_1269) ? 0.0 : max(_1269, 0.0)));
        _1374 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1311 : (isnan(_1311) ? 0.0 : max(_1311, 0.0)));
        _1375 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1353 : (isnan(_1353) ? 0.0 : max(_1353, 0.0)));
    }
    else
    {
        _1361 = _1049;
        _1362 = _1049;
        _1363 = _1049;
        _1364 = _1049;
        _1365 = _1049;
        _1366 = _1049;
        _1367 = _1049;
        _1368 = _1049;
        _1369 = _1049;
        _1370 = _1049;
        _1371 = _1049;
        _1372 = _1049;
        _1373 = 0.0;
        _1374 = 0.0;
        _1375 = 0.0;
    }
    float _1385 = (cbModelParam._m0[1u].x * (_1373 - _1061)) + _1061;
    float _1386 = (cbModelParam._m0[1u].x * (_1374 - _1062)) + _1062;
    float _1387 = (cbModelParam._m0[1u].x * (_1375 - _1063)) + _1063;
    float _1408 = fma(_1387, cbSceneParam._m0[89u].z, fma(_1386, cbSceneParam._m0[89u].y, _1385 * cbSceneParam._m0[89u].x));
    float _1411 = fma(_1387, cbSceneParam._m0[90u].z, fma(_1386, cbSceneParam._m0[90u].y, _1385 * cbSceneParam._m0[90u].x));
    float _1414 = fma(_1387, cbSceneParam._m0[91u].z, fma(_1386, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1385));
    float _1429 = _655 * 0.5;
    float _1430 = _656 * 0.5;
    float _1431 = _657 * 0.5;
    float _1432 = dot(vec4(_1429, _1430, _1431, 1.0), vec4(_1363, _1366, _1369, _1372));
    float _1435 = dot(vec4(_1429, _1430, _1431, 1.0), vec4(_1362, _1365, _1368, _1371));
    float _1438 = dot(vec4(_1429, _1430, _1431, 1.0), vec4(_1361, _1364, _1367, _1370));
    float _1472;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1445 = dot(vec4(_1429, _1430, _1431, 1.0), vec4(_1048, _1052, _1055, _1058));
        float _1449 = dot(vec4(_1429, _1430, _1431, 1.0), vec4(_1050, _1053, _1056, _1059));
        float _1453 = dot(vec4(_1429, _1430, _1431, 1.0), vec4(_1051, _1054, _1057, _1060));
        float _1460 = dot(vec4(cbModelParam._m0[39u]), vec4(_1429, _1430, _1431, 1.0));
        _1472 = dot(vec3(isnan(0.0) ? _1453 : (isnan(_1453) ? 0.0 : max(_1453, 0.0)), isnan(0.0) ? _1449 : (isnan(_1449) ? 0.0 : max(_1449, 0.0)), isnan(0.0) ? _1445 : (isnan(_1445) ? 0.0 : max(_1445, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1460) ? 0.0 : (isnan(0.0) ? _1460 : max(0.0, _1460))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1472 = 1.0;
    }
    float _1483;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1474 = dot(vec4(cbModelParam._m0[40u]), vec4(_1429, _1430, _1431, 1.0));
        _1483 = dot(vec3(isnan(0.0) ? _1432 : (isnan(_1432) ? 0.0 : max(_1432, 0.0)), isnan(0.0) ? _1435 : (isnan(_1435) ? 0.0 : max(_1435, 0.0)), isnan(0.0) ? _1438 : (isnan(_1438) ? 0.0 : max(_1438, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1474) ? 0.0 : (isnan(0.0) ? _1474 : max(0.0, _1474))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1483 = 1.0;
    }
    float _1487 = (_1483 * cbModelParam._m0[1u].x) + (_1472 * (1.0 - cbModelParam._m0[1u].x));
    float _1497 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _471);
    float _1498 = isnan(_1497) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1497 : min(cbModelParam._m0[25u].z, _1497));
    float _1578;
    float _1580;
    float _1582;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1545 = fma(_718, cbModelParam._m0[13u].z, fma(_714, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _710)) + cbModelParam._m0[13u].w;
        float _1549 = fma(_718, cbModelParam._m0[14u].z, fma(_714, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _710)) + cbModelParam._m0[14u].w;
        float _1553 = fma(_718, cbModelParam._m0[15u].z, fma(_714, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _710)) + cbModelParam._m0[15u].w;
        float _1556 = fma(_657, cbModelParam._m0[13u].z, fma(_656, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _655));
        float _1559 = fma(_657, cbModelParam._m0[14u].z, fma(_656, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _655));
        float _1562 = fma(_657, cbModelParam._m0[15u].z, fma(_656, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _655));
        float _1590;
        if (_1556 > 0.0)
        {
            _1590 = abs((1.0 - _1545) / _1556);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1556 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1545 + 1.0) / _1556);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1590 = frontier_phi_17_15_ladder;
        }
        float _1764;
        if (_1559 > 0.0)
        {
            _1764 = abs((1.0 - _1549) / _1559);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1559 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1549 + 1.0) / _1559);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1764 = frontier_phi_26_22_ladder;
        }
        float _2060;
        if (_1562 > 0.0)
        {
            _2060 = abs((1.0 - _1553) / _1562);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1562 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1553 + 1.0) / _1562);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2060 = frontier_phi_38_33_ladder;
        }
        float _2062 = isnan(_1764) ? _1590 : (isnan(_1590) ? _1764 : min(_1590, _1764));
        float _2063 = isnan(_2060) ? _2062 : (isnan(_2062) ? _2060 : min(_2062, _2060));
        float _2067 = (_2063 * _1556) + _1545;
        float _2068 = (_2063 * _1559) + _1549;
        float _2069 = (_2063 * _1562) + _1553;
        float _2070 = _2063 * 9.9999997473787516355514526367188e-05;
        float _2072 = (-1.0) - _2070;
        float _2074 = _2070 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2069 > _2074) || ((_2069 < _2072) || ((_2068 > _2074) || ((_2068 < _2072) || ((_2067 < _2072) || (_2067 > _2074))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2214 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2069, cbModelParam._m0[9u].z, fma(_2068, cbModelParam._m0[9u].y, _2067 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2069, cbModelParam._m0[10u].z, fma(_2068, cbModelParam._m0[10u].y, _2067 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2069, cbModelParam._m0[11u].z, fma(_2068, cbModelParam._m0[11u].y, _2067 * cbModelParam._m0[11u].x))), _1498);
            frontier_phi_16_38_ladder = _2214.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2214.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2214.x * cbModelParam._m0[1u].y;
        }
        _1578 = frontier_phi_16_38_ladder_2;
        _1580 = frontier_phi_16_38_ladder_1;
        _1582 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1566 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_655, _656, _657), _1498);
        _1578 = _1566.x * cbModelParam._m0[1u].y;
        _1580 = _1566.y * cbModelParam._m0[1u].y;
        _1582 = _1566.z * cbModelParam._m0[1u].y;
    }
    float _1586 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _471);
    float _1587 = isnan(_1586) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1586 : min(cbModelParam._m0[25u].w, _1586));
    float _1678;
    float _1680;
    float _1682;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1642 = fma(_718, cbModelParam._m0[21u].z, fma(_714, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _710)) + cbModelParam._m0[21u].w;
        float _1646 = fma(_718, cbModelParam._m0[22u].z, fma(_714, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _710)) + cbModelParam._m0[22u].w;
        float _1650 = fma(_718, cbModelParam._m0[23u].z, fma(_714, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _710)) + cbModelParam._m0[23u].w;
        float _1653 = fma(_657, cbModelParam._m0[21u].z, fma(_656, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _655));
        float _1656 = fma(_657, cbModelParam._m0[22u].z, fma(_656, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _655));
        float _1659 = fma(_657, cbModelParam._m0[23u].z, fma(_656, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _655));
        float _1769;
        if (_1653 > 0.0)
        {
            _1769 = abs((1.0 - _1642) / _1653);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1653 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1642 + 1.0) / _1653);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1769 = frontier_phi_28_24_ladder;
        }
        float _2087;
        if (_1656 > 0.0)
        {
            _2087 = abs((1.0 - _1646) / _1656);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1656 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1646 + 1.0) / _1656);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2087 = frontier_phi_40_35_ladder;
        }
        float _2425;
        if (_1659 > 0.0)
        {
            _2425 = abs((1.0 - _1650) / _1659);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1659 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1650 + 1.0) / _1659);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2425 = frontier_phi_50_47_ladder;
        }
        float _2427 = isnan(_2087) ? _1769 : (isnan(_1769) ? _2087 : min(_1769, _2087));
        float _2428 = isnan(_2425) ? _2427 : (isnan(_2427) ? _2425 : min(_2427, _2425));
        float _2432 = (_2428 * _1653) + _1642;
        float _2433 = (_2428 * _1656) + _1646;
        float _2434 = (_2428 * _1659) + _1650;
        float _2435 = _2428 * 9.9999997473787516355514526367188e-05;
        float _2436 = (-1.0) - _2435;
        float _2438 = _2435 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2434 > _2438) || ((_2434 < _2436) || ((_2433 > _2438) || ((_2433 < _2436) || ((_2432 < _2436) || (_2432 > _2438))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2556 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2434, cbModelParam._m0[17u].z, fma(_2433, cbModelParam._m0[17u].y, _2432 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2434, cbModelParam._m0[18u].z, fma(_2433, cbModelParam._m0[18u].y, _2432 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2434, cbModelParam._m0[19u].z, fma(_2433, cbModelParam._m0[19u].y, _2432 * cbModelParam._m0[19u].x))), _1587);
            frontier_phi_25_50_ladder = _2556.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2556.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2556.x * cbModelParam._m0[1u].z;
        }
        _1678 = frontier_phi_25_50_ladder_2;
        _1680 = frontier_phi_25_50_ladder_1;
        _1682 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1662 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_655, _656, _657), _1587);
        _1678 = _1662.x * cbModelParam._m0[1u].z;
        _1680 = _1662.y * cbModelParam._m0[1u].z;
        _1682 = _1662.z * cbModelParam._m0[1u].z;
    }
    float _1695 = (((_681 * _632) + _682) * _647) * ((cbModelParam._m0[1u].w * (_1678 - _1578)) + _1578);
    float _1697 = (((_681 * _634) + _682) * _647) * ((cbModelParam._m0[1u].w * (_1680 - _1580)) + _1580);
    float _1699 = (((_681 * _635) + _682) * _647) * ((cbModelParam._m0[1u].w * (_1682 - _1582)) + _1582);
    float _1702 = fma(_1699, cbSceneParam._m0[89u].z, fma(_1697, cbSceneParam._m0[89u].y, _1695 * cbSceneParam._m0[89u].x));
    float _1705 = fma(_1699, cbSceneParam._m0[90u].z, fma(_1697, cbSceneParam._m0[90u].y, _1695 * cbSceneParam._m0[90u].x));
    float _1708 = fma(_1699, cbSceneParam._m0[91u].z, fma(_1697, cbSceneParam._m0[91u].y, _1695 * cbSceneParam._m0[91u].x));
    float _1743 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1747 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1751 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1755 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1756 = _1743 / _1755;
    float _1757 = _1747 / _1755;
    float _1758 = _1751 / _1755;
    float _1905;
    float _1906;
    float _1907;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1785 = ((uint(_1758 > cbSceneParam._m0[59u].y) + uint(_1758 > cbSceneParam._m0[59u].x)) + uint(_1758 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1786 = _1785 + 43u;
        uint _1794 = _1785 + 44u;
        uint _1802 = _1785 + 45u;
        uint _1810 = _1785 + 46u;
        float _1821 = fma(_1755, cbSceneParam._m0[_1786].w, fma(_1751, cbSceneParam._m0[_1786].z, fma(_1747, cbSceneParam._m0[_1786].y, _1743 * cbSceneParam._m0[_1786].x)));
        float _1825 = fma(_1755, cbSceneParam._m0[_1794].w, fma(_1751, cbSceneParam._m0[_1794].z, fma(_1747, cbSceneParam._m0[_1794].y, _1743 * cbSceneParam._m0[_1794].x)));
        float _1833 = fma(_1755, cbSceneParam._m0[_1810].w, fma(_1751, cbSceneParam._m0[_1810].z, fma(_1747, cbSceneParam._m0[_1810].y, _1743 * cbSceneParam._m0[_1810].x)));
        float _1838 = cbSceneParam._m0[33u].z * _1833;
        float _1840 = cbSceneParam._m0[33u].w * _1833;
        float _1843 = fma(_1755, cbSceneParam._m0[_1802].w, fma(_1751, cbSceneParam._m0[_1802].z, fma(_1747, cbSceneParam._m0[_1802].y, _1743 * cbSceneParam._m0[_1802].x))) / _1833;
        float _1891 = (cbSceneParam._m0[33u].x - sqrt(((_1757 * _1757) + (_1756 * _1756)) + (_1758 * _1758))) * cbSceneParam._m0[33u].y;
        float _4306 = isnan(0.0) ? _1891 : (isnan(_1891) ? 0.0 : max(_1891, 0.0));
        float _1898 = (isnan(1.0) ? _4306 : (isnan(_4306) ? 1.0 : min(_4306, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1838 + _1821) / _1833, (_1840 + _1825) / _1833), _1843), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1840 + _1821) / _1833, (_1825 - _1838) / _1833), _1843), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1821 - _1838) / _1833, (_1825 - _1840) / _1833), _1843), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1821 - _1840) / _1833, (_1838 + _1825) / _1833), _1843), 0.0)).x), vec4(0.25)));
        _1905 = 1.0 - (_1898 * cbSceneParam._m0[34u].x);
        _1906 = 1.0 - (_1898 * cbSceneParam._m0[34u].y);
        _1907 = 1.0 - (_1898 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1905 = 1.0;
        _1906 = 1.0;
        _1907 = 1.0;
    }
    float _1971;
    float _1973;
    float _1975;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1959 = fma(_1755, cbSceneParam._m0[63u].w, fma(_1751, cbSceneParam._m0[63u].z, fma(_1747, cbSceneParam._m0[63u].y, _1743 * cbSceneParam._m0[63u].x)));
        float _1960 = fma(_1755, cbSceneParam._m0[60u].w, fma(_1751, cbSceneParam._m0[60u].z, fma(_1747, cbSceneParam._m0[60u].y, _1743 * cbSceneParam._m0[60u].x))) / _1959;
        float _1961 = fma(_1755, cbSceneParam._m0[61u].w, fma(_1751, cbSceneParam._m0[61u].z, fma(_1747, cbSceneParam._m0[61u].y, _1743 * cbSceneParam._m0[61u].x))) / _1959;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_1960 >= cbSceneParam._m0[64u].x) && (_1961 >= cbSceneParam._m0[64u].y)) && (_1960 <= cbSceneParam._m0[64u].z)) && (_1961 <= cbSceneParam._m0[64u].w))
        {
            float _2100 = fma(_1755, cbSceneParam._m0[62u].w, fma(_1751, cbSceneParam._m0[62u].z, fma(_1747, cbSceneParam._m0[62u].y, _1743 * cbSceneParam._m0[62u].x))) / _1959;
            float _2104 = isnan(cbSceneParam._m0[41u].w) ? _2100 : (isnan(_2100) ? cbSceneParam._m0[41u].w : max(_2100, cbSceneParam._m0[41u].w));
            float _2147 = (cbSceneParam._m0[33u].x - sqrt(((_1757 * _1757) + (_1756 * _1756)) + (_1758 * _1758))) * cbSceneParam._m0[33u].y;
            float _4322 = isnan(0.0) ? _2147 : (isnan(_2147) ? 0.0 : max(_2147, 0.0));
            float _2154 = (isnan(1.0) ? _4322 : (isnan(_4322) ? 1.0 : min(_4322, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1960, cbSceneParam._m0[33u].w + _1961), _2104), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1960, _1961 - cbSceneParam._m0[33u].z), _2104), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1960 - cbSceneParam._m0[33u].z, _1961 - cbSceneParam._m0[33u].w), _2104), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1960 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1961), _2104), 0.0)).x), vec4(0.25)));
            float _2158 = 1.0 - (_2154 * cbSceneParam._m0[34u].x);
            float _2159 = 1.0 - (_2154 * cbSceneParam._m0[34u].y);
            float _2160 = 1.0 - (_2154 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2160) ? _1907 : (isnan(_1907) ? _2160 : min(_1907, _2160));
            frontier_phi_37_36_ladder_1 = isnan(_2159) ? _1906 : (isnan(_1906) ? _2159 : min(_1906, _2159));
            frontier_phi_37_36_ladder_2 = isnan(_2158) ? _1905 : (isnan(_1905) ? _2158 : min(_1905, _2158));
        }
        else
        {
            frontier_phi_37_36_ladder = _1907;
            frontier_phi_37_36_ladder_1 = _1906;
            frontier_phi_37_36_ladder_2 = _1905;
        }
        _1971 = frontier_phi_37_36_ladder_2;
        _1973 = frontier_phi_37_36_ladder_1;
        _1975 = frontier_phi_37_36_ladder;
    }
    else
    {
        _1971 = _1905;
        _1973 = _1906;
        _1975 = _1907;
    }
    uvec4 _1980 = floatBitsToUint(cbInstanceData._m0[_607 + 5u]);
    uint _1982 = _1980.x * 14u;
    uint _1983 = _1982 + 13u;
    float _1990 = _647 + (-1.0);
    float _1995 = (cbLight._m0[_1983].x * _1990) + 1.0;
    float _1996 = (cbLight._m0[_1983].y * _1990) + 1.0;
    float _1997 = (cbLight._m0[_1983].z * _1990) + 1.0;
    float _1998 = (cbLight._m0[_1983].w * _1990) + 1.0;
    uint _1999 = _1982 + 5u;
    float _2005 = isnan(1.0) ? _1996 : (isnan(_1996) ? 1.0 : min(_1996, 1.0));
    uint _2009 = _1982 + 4u;
    float _2019 = isnan(1.0) ? _1995 : (isnan(_1995) ? 1.0 : min(_1995, 1.0));
    uint _2023 = _1982 | 1u;
    float _2034 = dot(vec3(cbLight._m0[_1982].xyz), vec3(_468, _469, _470));
    float _2037 = dot(vec3(cbLight._m0[_2023].xyz), vec3(_468, _469, _470));
    float _4358 = isnan(0.0) ? _2034 : (isnan(_2034) ? 0.0 : max(_2034, 0.0));
    float _4369 = isnan(0.0) ? _2037 : (isnan(_2037) ? 0.0 : max(_2037, 0.0));
    float _2042 = (isnan(1.0) ? _4358 : (isnan(_4358) ? 1.0 : min(_4358, 1.0))) * 0.3183098733425140380859375;
    float _2044 = (isnan(1.0) ? _4369 : (isnan(_4369) ? 1.0 : min(_4369, 1.0))) * 0.3183098733425140380859375;
    float _2051 = ((cbLight._m0[_1999].x * _2005) * _2044) + (((cbLight._m0[_2009].x * _1971) * _2019) * _2042);
    float _2052 = ((_2005 * cbLight._m0[_1999].y) * _2044) + (((cbLight._m0[_2009].y * _1973) * _2019) * _2042);
    float _2053 = ((_2005 * cbLight._m0[_1999].z) * _2044) + (((cbLight._m0[_2009].z * _1975) * _2019) * _2042);
    uvec4 _2057 = floatBitsToUint(cbLight._m0[_1982 + 12u]);
    bool _2059 = _2057.x == 0u;
    float _2161;
    float _2163;
    float _2165;
    if (_2059)
    {
        _2161 = _2051;
        _2163 = _2052;
        _2165 = _2053;
    }
    else
    {
        uint _2169 = _1982 + 6u;
        float _2185 = (dot(vec3(cbLight._m0[_1982 + 2u].xyz), vec3(_468, _469, _470)) * 0.5) + 0.5;
        float _2186 = _2185 * _2185;
        float _4380 = isnan(0.0) ? _2186 : (isnan(_2186) ? 0.0 : max(_2186, 0.0));
        float _2187 = isnan(1.0) ? _4380 : (isnan(_4380) ? 1.0 : min(_4380, 1.0));
        float _2188 = isnan(1.0) ? _1997 : (isnan(_1997) ? 1.0 : min(_1997, 1.0));
        _2161 = (((cbLight._m0[_2169].x * 0.3183098733425140380859375) * _2187) * _2188) + _2051;
        _2163 = (((cbLight._m0[_2169].y * 0.3183098733425140380859375) * _2187) * _2188) + _2052;
        _2165 = (((cbLight._m0[_2169].z * 0.3183098733425140380859375) * _2187) * _2188) + _2053;
    }
    bool _2168 = _2057.y == 0u;
    float _2223;
    float _2225;
    float _2227;
    if (_2168)
    {
        _2223 = _2161;
        _2225 = _2163;
        _2227 = _2165;
    }
    else
    {
        uint _2396 = _1982 + 7u;
        float _2412 = (dot(vec3(cbLight._m0[_1982 + 3u].xyz), vec3(_468, _469, _470)) * 0.5) + 0.5;
        float _2413 = _2412 * _2412;
        float _4396 = isnan(0.0) ? _2413 : (isnan(_2413) ? 0.0 : max(_2413, 0.0));
        float _2414 = isnan(1.0) ? _4396 : (isnan(_4396) ? 1.0 : min(_4396, 1.0));
        float _2415 = isnan(1.0) ? _1998 : (isnan(_1998) ? 1.0 : min(_1998, 1.0));
        _2223 = (((cbLight._m0[_2396].x * 0.3183098733425140380859375) * _2414) * _2415) + _2161;
        _2225 = (((cbLight._m0[_2396].y * 0.3183098733425140380859375) * _2414) * _2415) + _2163;
        _2227 = (((cbLight._m0[_2396].z * 0.3183098733425140380859375) * _2414) * _2415) + _2165;
    }
    uint _2230 = _1982 + 8u;
    float _2243 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1982].w)) * _471) * 0.949999988079071044921875);
    float _2244 = _2243 * _2243;
    float _2245 = cbLight._m0[_1982].x + _549;
    float _2246 = cbLight._m0[_1982].y + _550;
    float _2247 = cbLight._m0[_1982].z + _551;
    float _2251 = inversesqrt(dot(vec3(_2245, _2246, _2247), vec3(_2245, _2246, _2247)));
    float _2252 = _2251 * _2245;
    float _2253 = _2251 * _2246;
    float _2254 = _2251 * _2247;
    float _2255 = dot(vec3(_468, _469, _470), vec3(cbLight._m0[_1982].xyz));
    float _4412 = isnan(0.0) ? _2255 : (isnan(_2255) ? 0.0 : max(_2255, 0.0));
    float _2258 = isnan(1.0) ? _4412 : (isnan(_4412) ? 1.0 : min(_4412, 1.0));
    float _4423 = isnan(0.0) ? _648 : (isnan(_648) ? 0.0 : max(_648, 0.0));
    float _2259 = isnan(1.0) ? _4423 : (isnan(_4423) ? 1.0 : min(_4423, 1.0));
    float _2260 = dot(vec3(_468, _469, _470), vec3(_2252, _2253, _2254));
    float _4434 = isnan(0.0) ? _2260 : (isnan(_2260) ? 0.0 : max(_2260, 0.0));
    float _2263 = isnan(1.0) ? _4434 : (isnan(_4434) ? 1.0 : min(_4434, 1.0));
    float _2264 = dot(vec3(cbLight._m0[_1982].xyz), vec3(_2252, _2253, _2254));
    float _4445 = isnan(0.0) ? _2264 : (isnan(_2264) ? 0.0 : max(_2264, 0.0));
    float _2268 = _2244 * _2244;
    float _2272 = ((_2263 * _2263) * (_2268 + (-1.0))) + 1.0;
    float _2280 = exp2(log2(1.0 - (isnan(1.0) ? _4445 : (isnan(_4445) ? 1.0 : min(_4445, 1.0)))) * 5.0);
    float _2281 = 0.959999978542327880859375 - _629;
    float _2283 = 0.959999978542327880859375 - _630;
    float _2284 = 0.959999978542327880859375 - _631;
    float _2291 = 1.0 - _2244;
    float _2302 = (0.5 / (((_2259 * ((_2258 * _2291) + _2244)) + 9.9999999392252902907785028219223e-09) + (((_2259 * _2291) + _2244) * _2258))) * _2258;
    float _4456 = isnan(0.0) ? _2302 : (isnan(_2302) ? 0.0 : max(_2302, 0.0));
    float _2304 = (isnan(1.0) ? _4456 : (isnan(_4456) ? 1.0 : min(_4456, 1.0))) * (_2268 / ((_2272 * _2272) * 3.141590118408203125));
    uint _2318 = _1982 + 9u;
    float _2329 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2023].w)) * _471) * 0.949999988079071044921875);
    float _2330 = _2329 * _2329;
    float _2331 = cbLight._m0[_2023].x + _549;
    float _2332 = cbLight._m0[_2023].y + _550;
    float _2333 = cbLight._m0[_2023].z + _551;
    float _2337 = inversesqrt(dot(vec3(_2331, _2332, _2333), vec3(_2331, _2332, _2333)));
    float _2338 = _2337 * _2331;
    float _2339 = _2337 * _2332;
    float _2340 = _2337 * _2333;
    float _2341 = dot(vec3(_468, _469, _470), vec3(cbLight._m0[_2023].xyz));
    float _4467 = isnan(0.0) ? _2341 : (isnan(_2341) ? 0.0 : max(_2341, 0.0));
    float _2344 = isnan(1.0) ? _4467 : (isnan(_4467) ? 1.0 : min(_4467, 1.0));
    float _2345 = dot(vec3(_468, _469, _470), vec3(_2338, _2339, _2340));
    float _4478 = isnan(0.0) ? _2345 : (isnan(_2345) ? 0.0 : max(_2345, 0.0));
    float _2348 = isnan(1.0) ? _4478 : (isnan(_4478) ? 1.0 : min(_4478, 1.0));
    float _2349 = dot(vec3(cbLight._m0[_2023].xyz), vec3(_2338, _2339, _2340));
    float _4489 = isnan(0.0) ? _2349 : (isnan(_2349) ? 0.0 : max(_2349, 0.0));
    float _2353 = _2330 * _2330;
    float _2357 = ((_2348 * _2348) * (_2353 + (-1.0))) + 1.0;
    float _2364 = exp2(log2(1.0 - (isnan(1.0) ? _4489 : (isnan(_4489) ? 1.0 : min(_4489, 1.0)))) * 5.0);
    float _2371 = 1.0 - _2330;
    float _2381 = (0.5 / (((_2259 * ((_2344 * _2371) + _2330)) + 9.9999999392252902907785028219223e-09) + (((_2259 * _2371) + _2330) * _2344))) * _2344;
    float _4500 = isnan(0.0) ? _2381 : (isnan(_2381) ? 0.0 : max(_2381, 0.0));
    float _2383 = (isnan(1.0) ? _4500 : (isnan(_4500) ? 1.0 : min(_4500, 1.0))) * (_2353 / ((_2357 * _2357) * 3.141590118408203125));
    float _2393 = (((((_2364 * _2281) + _632) * cbLight._m0[_2318].x) * _2383) * _2005) + ((((cbLight._m0[_2230].x * _1971) * ((_2280 * _2281) + _632)) * _2304) * _2019);
    float _2394 = (((((_2364 * _2283) + _634) * cbLight._m0[_2318].y) * _2383) * _2005) + ((((cbLight._m0[_2230].y * _1973) * ((_2280 * _2283) + _634)) * _2304) * _2019);
    float _2395 = (((((_2364 * _2284) + _635) * cbLight._m0[_2318].z) * _2383) * _2005) + ((((cbLight._m0[_2230].z * _1975) * ((_2280 * _2284) + _635)) * _2304) * _2019);
    float _2451;
    float _2453;
    float _2455;
    if (_2059)
    {
        _2451 = _2393;
        _2453 = _2394;
        _2455 = _2395;
    }
    else
    {
        uint _2457 = _1982 + 2u;
        uint _2461 = _1982 + 10u;
        float _2475 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2457].w)) * _471) * 0.949999988079071044921875);
        float _2476 = _2475 * _2475;
        float _2477 = cbLight._m0[_2457].x + _549;
        float _2478 = cbLight._m0[_2457].y + _550;
        float _2479 = cbLight._m0[_2457].z + _551;
        float _2483 = inversesqrt(dot(vec3(_2477, _2478, _2479), vec3(_2477, _2478, _2479)));
        float _2484 = _2483 * _2477;
        float _2485 = _2483 * _2478;
        float _2486 = _2483 * _2479;
        float _2487 = dot(vec3(_468, _469, _470), vec3(cbLight._m0[_2457].xyz));
        float _4511 = isnan(0.0) ? _2487 : (isnan(_2487) ? 0.0 : max(_2487, 0.0));
        float _2490 = isnan(1.0) ? _4511 : (isnan(_4511) ? 1.0 : min(_4511, 1.0));
        float _2491 = dot(vec3(_468, _469, _470), vec3(_2484, _2485, _2486));
        float _4522 = isnan(0.0) ? _2491 : (isnan(_2491) ? 0.0 : max(_2491, 0.0));
        float _2494 = isnan(1.0) ? _4522 : (isnan(_4522) ? 1.0 : min(_4522, 1.0));
        float _2495 = dot(vec3(cbLight._m0[_2457].xyz), vec3(_2484, _2485, _2486));
        float _4533 = isnan(0.0) ? _2495 : (isnan(_2495) ? 0.0 : max(_2495, 0.0));
        float _2499 = _2476 * _2476;
        float _2503 = ((_2494 * _2494) * (_2499 + (-1.0))) + 1.0;
        float _2510 = exp2(log2(1.0 - (isnan(1.0) ? _4533 : (isnan(_4533) ? 1.0 : min(_4533, 1.0)))) * 5.0);
        float _2517 = 1.0 - _2476;
        float _2527 = (0.5 / (((_2259 * ((_2490 * _2517) + _2476)) + 9.9999999392252902907785028219223e-09) + (((_2259 * _2517) + _2476) * _2490))) * _2490;
        float _4544 = isnan(0.0) ? _2527 : (isnan(_2527) ? 0.0 : max(_2527, 0.0));
        float _2529 = (isnan(1.0) ? _4544 : (isnan(_4544) ? 1.0 : min(_4544, 1.0))) * (_2499 / ((_2503 * _2503) * 3.141590118408203125));
        float _2530 = isnan(1.0) ? _1997 : (isnan(_1997) ? 1.0 : min(_1997, 1.0));
        _2451 = (((((_2510 * _2281) + _632) * cbLight._m0[_2461].x) * _2529) * _2530) + _2393;
        _2453 = (((((_2510 * _2283) + _634) * cbLight._m0[_2461].y) * _2529) * _2530) + _2394;
        _2455 = (((((_2510 * _2284) + _635) * cbLight._m0[_2461].z) * _2529) * _2530) + _2395;
    }
    float _2561;
    float _2563;
    float _2565;
    if (_2168)
    {
        _2561 = _2451;
        _2563 = _2453;
        _2565 = _2455;
    }
    else
    {
        uint _2572 = _1982 + 3u;
        uint _2576 = _1982 + 11u;
        float _2590 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2572].w)) * _471) * 0.949999988079071044921875);
        float _2591 = _2590 * _2590;
        float _2592 = cbLight._m0[_2572].x + _549;
        float _2593 = cbLight._m0[_2572].y + _550;
        float _2594 = cbLight._m0[_2572].z + _551;
        float _2598 = inversesqrt(dot(vec3(_2592, _2593, _2594), vec3(_2592, _2593, _2594)));
        float _2599 = _2598 * _2592;
        float _2600 = _2598 * _2593;
        float _2601 = _2598 * _2594;
        float _2602 = dot(vec3(_468, _469, _470), vec3(cbLight._m0[_2572].xyz));
        float _4560 = isnan(0.0) ? _2602 : (isnan(_2602) ? 0.0 : max(_2602, 0.0));
        float _2605 = isnan(1.0) ? _4560 : (isnan(_4560) ? 1.0 : min(_4560, 1.0));
        float _2606 = dot(vec3(_468, _469, _470), vec3(_2599, _2600, _2601));
        float _4571 = isnan(0.0) ? _2606 : (isnan(_2606) ? 0.0 : max(_2606, 0.0));
        float _2609 = isnan(1.0) ? _4571 : (isnan(_4571) ? 1.0 : min(_4571, 1.0));
        float _2610 = dot(vec3(cbLight._m0[_2572].xyz), vec3(_2599, _2600, _2601));
        float _4582 = isnan(0.0) ? _2610 : (isnan(_2610) ? 0.0 : max(_2610, 0.0));
        float _2614 = _2591 * _2591;
        float _2618 = ((_2609 * _2609) * (_2614 + (-1.0))) + 1.0;
        float _2625 = exp2(log2(1.0 - (isnan(1.0) ? _4582 : (isnan(_4582) ? 1.0 : min(_4582, 1.0)))) * 5.0);
        float _2632 = 1.0 - _2591;
        float _2642 = (0.5 / (((_2259 * ((_2605 * _2632) + _2591)) + 9.9999999392252902907785028219223e-09) + (((_2259 * _2632) + _2591) * _2605))) * _2605;
        float _4593 = isnan(0.0) ? _2642 : (isnan(_2642) ? 0.0 : max(_2642, 0.0));
        float _2644 = (isnan(1.0) ? _4593 : (isnan(_4593) ? 1.0 : min(_4593, 1.0))) * (_2614 / ((_2618 * _2618) * 3.141590118408203125));
        float _2645 = isnan(1.0) ? _1998 : (isnan(_1998) ? 1.0 : min(_1998, 1.0));
        _2561 = (((((_2625 * _2281) + _632) * cbLight._m0[_2576].x) * _2644) * _2645) + _2451;
        _2563 = (((((_2625 * _2283) + _634) * cbLight._m0[_2576].y) * _2644) * _2645) + _2453;
        _2565 = (((((_2625 * _2284) + _635) * cbLight._m0[_2576].z) * _2644) * _2645) + _2455;
    }
    float _2711;
    float _2713;
    float _2715;
    float _2717;
    float _2719;
    float _2721;
    if (_1980.y == 0u)
    {
        uvec4 _2666 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2667 = _2666.x;
        uint _2678 = uint((float(_2666.y) * floor(float(uint(cbSceneParam._m0[85u].y * _570) / _2667))) + floor(float(uint(cbSceneParam._m0[85u].x * _569) / _2667)));
        float _2688 = (log2(_1758 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2689 = isnan(0.0) ? _2688 : (isnan(_2688) ? 0.0 : max(_2688, 0.0));
        uint _2692 = uint(isnan(14.0) ? _2689 : (isnan(_2689) ? 14.0 : min(_2689, 14.0)));
        uvec4 _2697 = texelFetch(g_lightClusterGridBuffer, int(((_2692 << 2u) + (_2678 << 6u)) >> 2u));
        uint _2698 = _2697.x;
        uint _2699 = _2666.z;
        float _2823;
        float _2825;
        float _2827;
        float _2829;
        float _2831;
        float _2833;
        if (((((1u << ((_2699 >> 4u) & 15u)) + 4294967295u) & _2698) == 0u) || ((_2699 & 240u) == 0u))
        {
            _2823 = 0.0;
            _2825 = 0.0;
            _2827 = 0.0;
            _2829 = 0.0;
            _2831 = 0.0;
            _2833 = 0.0;
        }
        else
        {
            float _2824;
            float _2826;
            float _2828;
            float _2830;
            float _2832;
            float _2834;
            float _2984 = 0.0;
            float _2985 = 0.0;
            float _2986 = 0.0;
            float _2987 = 0.0;
            float _2988 = 0.0;
            float _2989 = 0.0;
            uint _2990 = 0u;
            uint _2999;
            bool _3000;
            for (;;)
            {
                _2999 = texelFetch(g_lightClassification, int((((_2692 << 5u) + (_2678 << 9u)) + (_2990 << 2u)) >> 2u)).x;
                _3000 = _2999 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3000)
                {
                    frontier_phi_71_pred = _2989;
                    frontier_phi_71_pred_1 = _2988;
                    frontier_phi_71_pred_2 = _2987;
                    frontier_phi_71_pred_3 = _2986;
                    frontier_phi_71_pred_4 = _2985;
                    frontier_phi_71_pred_5 = _2984;
                }
                else
                {
                    float _3129;
                    float _3130;
                    float _3131;
                    float _3132;
                    float _3133;
                    float _3134;
                    uint _3135;
                    _3129 = _2984;
                    _3130 = _2985;
                    _3131 = _2986;
                    _3132 = _2987;
                    _3133 = _2988;
                    _3134 = _2989;
                    _3135 = _2999;
                    float _3056;
                    float _3057;
                    float _3058;
                    float _3059;
                    float _3060;
                    float _3061;
                    for (;;)
                    {
                        uint _3139 = uint(findLSB(_3135)) + (_2990 << 5u);
                        uint _3136 = (_3135 + 4294967295u) & _3135;
                        uint _3141 = _3139 * 48u;
                        vec4 _3155 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3141)).x, texelFetch(g_PointLightRenderingBuffer, int(_3141 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3141 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3141 + 3u)).x));
                        uint _3161 = (_3139 * 48u) + 4u;
                        vec4 _3174 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3161)).x, texelFetch(g_PointLightRenderingBuffer, int(_3161 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3161 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3161 + 3u)).x));
                        uint _3180 = (_3139 * 48u) + 8u;
                        vec3 _3191 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3180)).x, texelFetch(g_PointLightRenderingBuffer, int(_3180 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3180 + 2u)).x));
                        float _3195 = _3155.x - _1756;
                        float _3196 = _3155.y - _1757;
                        float _3197 = _3155.z - _1758;
                        float _3198 = dot(vec3(_3195, _3196, _3197), vec3(_3195, _3196, _3197));
                        float _3201 = inversesqrt(_3198);
                        float _3202 = _3201 * _3195;
                        float _3203 = _3201 * _3196;
                        float _3204 = _3201 * _3197;
                        float _3205 = dot(vec3(_588, _591, _594), vec3(_3202, _3203, _3204));
                        float _3210 = 1.0 - (_3198 * _3155.w);
                        float _4619 = isnan(0.0) ? _3210 : (isnan(_3210) ? 0.0 : max(_3210, 0.0));
                        float _3211 = isnan(1.0) ? _4619 : (isnan(_4619) ? 1.0 : min(_4619, 1.0));
                        float _3212 = sqrt(_3198) * _3174.w;
                        float _3215 = 1.39999997615814208984375 / (_3212 + 1.39999997615814208984375);
                        float _3216 = _3215 * _3215;
                        float _3219 = ((1.0 - _3216) * _3205) + _3216;
                        float _3222 = _3212 * _3212;
                        float _3226 = ((isnan(0.0) ? _3219 : (isnan(_3219) ? 0.0 : max(_3219, 0.0))) * _3211) / ((_3222 * 0.699999988079071044921875) + 1.0);
                        float _3230 = (-0.0) - _1756;
                        float _3231 = (-0.0) - _1757;
                        float _3232 = (-0.0) - _1758;
                        float _3236 = inversesqrt(dot(vec3(_3230, _3231, _3232), vec3(_3230, _3231, _3232)));
                        float _3237 = _3236 * _3230;
                        float _3238 = _3236 * _3231;
                        float _3239 = _3236 * _3232;
                        float _3246 = exp2(log2(1.0 / ((_3222 * 3.5) + 5.0)) * 0.25);
                        float _3247 = 1.0 - _663;
                        float _3254 = sqrt(1.0 - ((1.0 - (_3247 * _3247)) * (1.0 - (_3246 * _3246))));
                        float _3255 = _3254 * _3254;
                        float _3256 = _3255 * _3255;
                        float _3257 = _3237 + _3202;
                        float _3258 = _3238 + _3203;
                        float _3259 = _3239 + _3204;
                        float _3263 = inversesqrt(dot(vec3(_3257, _3258, _3259), vec3(_3257, _3258, _3259)));
                        float _3267 = dot(vec3(_588, _591, _594), vec3(_3237, _3238, _3239));
                        float _4635 = isnan(0.0) ? _3267 : (isnan(_3267) ? 0.0 : max(_3267, 0.0));
                        float _3270 = isnan(1.0) ? _4635 : (isnan(_4635) ? 1.0 : min(_4635, 1.0));
                        float _3271 = dot(vec3(_588, _591, _594), vec3(_3263 * _3257, _3263 * _3258, _3263 * _3259));
                        float _4646 = isnan(0.0) ? _3271 : (isnan(_3271) ? 0.0 : max(_3271, 0.0));
                        float _3274 = isnan(1.0) ? _4646 : (isnan(_4646) ? 1.0 : min(_4646, 1.0));
                        float _3278 = ((_3274 * _3274) * (_3256 + (-1.0))) + 1.0;
                        float _3279 = _3215 * _3255;
                        float _3280 = _3279 * _3279;
                        float _3283 = ((1.0 - _3280) * _3205) + _3280;
                        float _4657 = isnan(0.0) ? _3283 : (isnan(_3283) ? 0.0 : max(_3283, 0.0));
                        float _3284 = isnan(1.0) ? _4657 : (isnan(_4657) ? 1.0 : min(_4657, 1.0));
                        float _3285 = 1.0 - _3255;
                        float _3295 = (0.5 / (((_3284 * ((_3270 * _3285) + _3255)) + 9.9999999392252902907785028219223e-09) + (((_3284 * _3285) + _3255) * _3270))) * _3284;
                        float _4668 = isnan(0.0) ? _3295 : (isnan(_3295) ? 0.0 : max(_3295, 0.0));
                        float _3306 = (((_3256 * 3.1415927410125732421875) * (isnan(1.0) ? _4668 : (isnan(_4668) ? 1.0 : min(_4668, 1.0)))) / ((_3278 * _3278) * ((_3222 * 2.1991131305694580078125) + 3.141590118408203125))) * _3211;
                        _3059 = (_3226 * _3174.x) + _3132;
                        _3060 = (_3226 * _3174.y) + _3133;
                        _3061 = (_3226 * _3174.z) + _3134;
                        _3056 = (_3306 * _3191.x) + _3129;
                        _3057 = (_3306 * _3191.y) + _3130;
                        _3058 = (_3306 * _3191.z) + _3131;
                        if (_3136 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3129 = _3056;
                            _3130 = _3057;
                            _3131 = _3058;
                            _3132 = _3059;
                            _3133 = _3060;
                            _3134 = _3061;
                            _3135 = _3136;
                        }
                    }
                    frontier_phi_71_pred = _3061;
                    frontier_phi_71_pred_1 = _3060;
                    frontier_phi_71_pred_2 = _3059;
                    frontier_phi_71_pred_3 = _3058;
                    frontier_phi_71_pred_4 = _3057;
                    frontier_phi_71_pred_5 = _3056;
                }
                _2834 = frontier_phi_71_pred;
                _2832 = frontier_phi_71_pred_1;
                _2830 = frontier_phi_71_pred_2;
                _2828 = frontier_phi_71_pred_3;
                _2826 = frontier_phi_71_pred_4;
                _2824 = frontier_phi_71_pred_5;
                uint _2991 = _2990 + 1u;
                if (_2991 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2984 = _2824;
                    _2985 = _2826;
                    _2986 = _2828;
                    _2987 = _2830;
                    _2988 = _2832;
                    _2989 = _2834;
                    _2990 = _2991;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2823 = _2824;
            _2825 = _2826;
            _2827 = _2828;
            _2829 = _2830;
            _2831 = _2832;
            _2833 = _2834;
        }
        uvec4 _2837 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2838 = _2837.z;
        uint _2840 = (_2838 >> 8u) & 15u;
        float _2952;
        float _2954;
        float _2956;
        float _2958;
        float _2960;
        float _2962;
        if (((4294967295u << _2840) & _2698) == 0u)
        {
            _2952 = _2823;
            _2954 = _2825;
            _2956 = _2827;
            _2958 = _2829;
            _2960 = _2831;
            _2962 = _2833;
        }
        else
        {
            float _2977 = inversesqrt(dot(vec3(_1756, _1757, _1758), vec3(_1756, _1757, _1758)));
            float _2978 = _2977 * _1756;
            float _2979 = _2977 * _1757;
            float _2980 = _2977 * _1758;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_2840 < ((_2838 >> 12u) & 15u))
            {
                float _2953;
                float _2955;
                float _2957;
                float _2959;
                float _2961;
                float _2963;
                float _3112 = _2823;
                float _3113 = _2825;
                float _3114 = _2827;
                float _3115 = _2829;
                float _3116 = _2831;
                float _3117 = _2833;
                uint _3118 = _2840;
                uint _3127;
                bool _3128;
                for (;;)
                {
                    _3127 = texelFetch(g_lightClassification, int((((_2692 << 5u) + (_2678 << 9u)) + (_3118 << 2u)) >> 2u)).x;
                    _3128 = _3127 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3128)
                    {
                        frontier_phi_82_pred = _3117;
                        frontier_phi_82_pred_1 = _3116;
                        frontier_phi_82_pred_2 = _3115;
                        frontier_phi_82_pred_3 = _3114;
                        frontier_phi_82_pred_4 = _3113;
                        frontier_phi_82_pred_5 = _3112;
                    }
                    else
                    {
                        float _3320;
                        float _3321;
                        float _3322;
                        float _3323;
                        float _3324;
                        float _3325;
                        float _3615;
                        float _3616;
                        float _3617;
                        float _3618;
                        float _3619;
                        float _3620;
                        float _3333 = _3112;
                        float _3334 = _3113;
                        float _3335 = _3114;
                        float _3336 = _3115;
                        float _3337 = _3116;
                        float _3338 = _3117;
                        uint _3339 = _3127;
                        uint _3340;
                        vec4 _3365;
                        float _3366;
                        vec4 _3381;
                        vec3 _3393;
                        vec4 _3408;
                        vec4 _3424;
                        float _3471;
                        bool _3472;
                        for (;;)
                        {
                            uint _3350 = ((_3118 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3339));
                            _3340 = (_3339 + 4294967295u) & _3339;
                            uint _3352 = _3350 * 40u;
                            _3365 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3352)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3352 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3352 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3352 + 3u)).x));
                            _3366 = _3365.w;
                            uint _3368 = (_3350 * 40u) + 4u;
                            _3381 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3368)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3368 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3368 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3368 + 3u)).x));
                            uint _3383 = (_3350 * 40u) + 8u;
                            _3393 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3383)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3383 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3383 + 2u)).x));
                            uint _3395 = (_3350 * 40u) + 16u;
                            _3408 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3395)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3395 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3395 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3395 + 3u)).x));
                            uint _3411 = (_3350 * 40u) + 20u;
                            _3424 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3411)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3411 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3411 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3411 + 3u)).x));
                            uint _3427 = (_3350 * 40u) + 24u;
                            vec4 _3440 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3427)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3427 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3427 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3427 + 3u)).x));
                            uint _3446 = (_3350 * 40u) + 28u;
                            vec4 _3459 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3446)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3446 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3446 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3446 + 3u)).x));
                            _3471 = fma(_1758, _3459.z, fma(_1757, _3459.y, _3459.x * _1756)) + _3459.w;
                            _3472 = !((fma(_1758, _3440.z, fma(_1757, _3440.y, _3440.x * _1756)) + _3440.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3472)
                            {
                                float _3499 = _3365.x - _1756;
                                float _3500 = _3365.y - _1757;
                                float _3501 = _3365.z - _1758;
                                float _3502 = dot(vec3(_3499, _3500, _3501), vec3(_3499, _3500, _3501));
                                float _3505 = inversesqrt(_3502);
                                float _3506 = _3505 * _3499;
                                float _3507 = _3505 * _3500;
                                float _3508 = _3505 * _3501;
                                float _3512 = 1.0 - (_3502 / (_3366 * _3366));
                                float _4679 = isnan(0.0) ? _3512 : (isnan(_3512) ? 0.0 : max(_3512, 0.0));
                                float _3513 = isnan(1.0) ? _4679 : (isnan(_4679) ? 1.0 : min(_4679, 1.0));
                                float _3517 = sqrt(_3502) * _3381.w;
                                float _3519 = 1.39999997615814208984375 / (_3517 + 1.39999997615814208984375);
                                float _3520 = _3519 * _3519;
                                float _3523 = ((1.0 - _3520) * dot(vec3(_3506, _3507, _3508), vec3(_588, _591, _594))) + _3520;
                                float _3526 = _3517 * _3517;
                                float _3530 = (fma(_1758, _3408.z, fma(_1757, _3408.y, _3408.x * _1756)) + _3408.w) / _3471;
                                float _3531 = (fma(_1758, _3424.z, fma(_1757, _3424.y, _3424.x * _1756)) + _3424.w) / _3471;
                                float _3535 = 1.0 - dot(vec2(_3530, _3531), vec2(_3530, _3531));
                                float _4695 = isnan(0.0) ? _3535 : (isnan(_3535) ? 0.0 : max(_3535, 0.0));
                                float _3536 = isnan(1.0) ? _4695 : (isnan(_4695) ? 1.0 : min(_4695, 1.0));
                                float _3537 = _3536 * (((isnan(0.0) ? _3523 : (isnan(_3523) ? 0.0 : max(_3523, 0.0))) * _3513) / ((_3526 * 0.699999988079071044921875) + 1.0));
                                float _3549 = exp2(log2(1.0 / ((_3526 * 3.5) + 5.0)) * 0.25);
                                float _3550 = 1.0 - _663;
                                float _3557 = sqrt(1.0 - ((1.0 - (_3550 * _3550)) * (1.0 - (_3549 * _3549))));
                                float _3558 = _3557 * _3557;
                                float _3559 = _3558 * _3558;
                                float _3560 = _3506 - _2978;
                                float _3561 = _3507 - _2979;
                                float _3562 = _3508 - _2980;
                                float _3566 = inversesqrt(dot(vec3(_3560, _3561, _3562), vec3(_3560, _3561, _3562)));
                                float _3570 = dot(vec3(_588, _591, _594), vec3((-0.0) - _2978, (-0.0) - _2979, (-0.0) - _2980));
                                float _4706 = isnan(0.0) ? _3570 : (isnan(_3570) ? 0.0 : max(_3570, 0.0));
                                float _3573 = isnan(1.0) ? _4706 : (isnan(_4706) ? 1.0 : min(_4706, 1.0));
                                float _3574 = dot(vec3(_588, _591, _594), vec3(_3566 * _3560, _3566 * _3561, _3566 * _3562));
                                float _4717 = isnan(0.0) ? _3574 : (isnan(_3574) ? 0.0 : max(_3574, 0.0));
                                float _3577 = isnan(1.0) ? _4717 : (isnan(_4717) ? 1.0 : min(_4717, 1.0));
                                float _3581 = ((_3577 * _3577) * (_3559 + (-1.0))) + 1.0;
                                float _3582 = _3519 * _3558;
                                float _3583 = _3582 * _3582;
                                float _3589 = ((1.0 - _3583) * dot(vec3(_588, _591, _594), vec3(_3506, _3507, _3508))) + _3583;
                                float _4728 = isnan(0.0) ? _3589 : (isnan(_3589) ? 0.0 : max(_3589, 0.0));
                                float _3590 = isnan(1.0) ? _4728 : (isnan(_4728) ? 1.0 : min(_4728, 1.0));
                                float _3591 = 1.0 - _3558;
                                float _3601 = (0.5 / (((_3590 * ((_3573 * _3591) + _3558)) + 9.9999999392252902907785028219223e-09) + (((_3590 * _3591) + _3558) * _3573))) * _3590;
                                float _4739 = isnan(0.0) ? _3601 : (isnan(_3601) ? 0.0 : max(_3601, 0.0));
                                float _3611 = (_3536 * _3513) * (((_3559 * 3.1415927410125732421875) * (isnan(1.0) ? _4739 : (isnan(_4739) ? 1.0 : min(_4739, 1.0)))) / ((_3581 * _3581) * ((_3526 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3537 * _3381.z;
                                frontier_phi_88_pred_1 = _3537 * _3381.y;
                                frontier_phi_88_pred_2 = _3537 * _3381.x;
                                frontier_phi_88_pred_3 = _3611 * _3393.z;
                                frontier_phi_88_pred_4 = _3611 * _3393.y;
                                frontier_phi_88_pred_5 = _3611 * _3393.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3620 = frontier_phi_88_pred;
                            _3619 = frontier_phi_88_pred_1;
                            _3618 = frontier_phi_88_pred_2;
                            _3617 = frontier_phi_88_pred_3;
                            _3616 = frontier_phi_88_pred_4;
                            _3615 = frontier_phi_88_pred_5;
                            _3323 = _3618 + _3336;
                            _3324 = _3619 + _3337;
                            _3325 = _3620 + _3338;
                            _3320 = _3615 + _3333;
                            _3321 = _3616 + _3334;
                            _3322 = _3617 + _3335;
                            if (_3340 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3333 = _3320;
                                _3334 = _3321;
                                _3335 = _3322;
                                _3336 = _3323;
                                _3337 = _3324;
                                _3338 = _3325;
                                _3339 = _3340;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3325;
                        frontier_phi_82_pred_1 = _3324;
                        frontier_phi_82_pred_2 = _3323;
                        frontier_phi_82_pred_3 = _3322;
                        frontier_phi_82_pred_4 = _3321;
                        frontier_phi_82_pred_5 = _3320;
                    }
                    _2963 = frontier_phi_82_pred;
                    _2961 = frontier_phi_82_pred_1;
                    _2959 = frontier_phi_82_pred_2;
                    _2957 = frontier_phi_82_pred_3;
                    _2955 = frontier_phi_82_pred_4;
                    _2953 = frontier_phi_82_pred_5;
                    uint _3119 = _3118 + 1u;
                    if (_3119 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3112 = _2953;
                        _3113 = _2955;
                        _3114 = _2957;
                        _3115 = _2959;
                        _3116 = _2961;
                        _3117 = _2963;
                        _3118 = _3119;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _2959;
                frontier_phi_63_64_ladder_1 = _2963;
                frontier_phi_63_64_ladder_2 = _2961;
                frontier_phi_63_64_ladder_3 = _2957;
                frontier_phi_63_64_ladder_4 = _2955;
                frontier_phi_63_64_ladder_5 = _2953;
            }
            else
            {
                frontier_phi_63_64_ladder = _2829;
                frontier_phi_63_64_ladder_1 = _2833;
                frontier_phi_63_64_ladder_2 = _2831;
                frontier_phi_63_64_ladder_3 = _2827;
                frontier_phi_63_64_ladder_4 = _2825;
                frontier_phi_63_64_ladder_5 = _2823;
            }
            _2952 = frontier_phi_63_64_ladder_5;
            _2954 = frontier_phi_63_64_ladder_4;
            _2956 = frontier_phi_63_64_ladder_3;
            _2958 = frontier_phi_63_64_ladder;
            _2960 = frontier_phi_63_64_ladder_2;
            _2962 = frontier_phi_63_64_ladder_1;
        }
        float _2967 = isnan(1.0) ? _647 : (isnan(_647) ? 1.0 : min(_647, 1.0));
        _2711 = (_2967 * _2958) + _2223;
        _2713 = (_2967 * _2960) + _2225;
        _2715 = (_2967 * _2962) + _2227;
        _2717 = ((_2952 * _632) * _2967) + _2561;
        _2719 = ((_2954 * _634) * _2967) + _2563;
        _2721 = ((_2956 * _635) * _2967) + _2565;
    }
    else
    {
        _2711 = _2223;
        _2713 = _2225;
        _2715 = _2227;
        _2717 = _2561;
        _2719 = _2563;
        _2721 = _2565;
    }
    uint _2727 = _608 + uint(cbMatDynParam._m0[0u].w);
    float _2733 = cbMtdParam._m0[13u].y * cbMtdParam._m0[15u].y;
    float _2739 = (((((_2733 * cbMtdParam._m0[10u].x) * _334.x) * _357) * (((1.0 - _411) * cbMtdParam._m0[16u].z) + _411)) * _449) * cbInstanceData._m0[_2727].x;
    float _2745 = (((((_2733 * cbMtdParam._m0[10u].y) * _334.y) * _357) * (((1.0 - _413) * cbMtdParam._m0[16u].z) + _413)) * _449) * cbInstanceData._m0[_2727].y;
    float _2751 = (((((_2733 * cbMtdParam._m0[10u].z) * _334.z) * _357) * (((1.0 - _415) * cbMtdParam._m0[16u].z) + _415)) * _449) * cbInstanceData._m0[_2727].z;
    float _4755 = isnan(0.0) ? _622 : (isnan(_622) ? 0.0 : max(_622, 0.0));
    float _4766 = isnan(0.0) ? _623 : (isnan(_623) ? 0.0 : max(_623, 0.0));
    float _4777 = isnan(0.0) ? _624 : (isnan(_624) ? 0.0 : max(_624, 0.0));
    float _2768 = (((isnan(1.0) ? _4755 : (isnan(_4755) ? 1.0 : min(_4755, 1.0))) * (_2711 + ((isnan(0.0) ? _1408 : (isnan(_1408) ? 0.0 : max(_1408, 0.0))) * _647))) + ((_2717 + ((isnan(0.0) ? _1702 : (isnan(_1702) ? 0.0 : max(_1702, 0.0))) * _1487)) * cbPerFrame._m0[3u].x)) + _2739;
    float _2770 = (_2745 + ((_2719 + ((isnan(0.0) ? _1705 : (isnan(_1705) ? 0.0 : max(_1705, 0.0))) * _1487)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4766 : (isnan(_4766) ? 1.0 : min(_4766, 1.0))) * (_2713 + ((isnan(0.0) ? _1411 : (isnan(_1411) ? 0.0 : max(_1411, 0.0))) * _647)));
    float _2772 = (_2751 + ((_2721 + ((isnan(0.0) ? _1708 : (isnan(_1708) ? 0.0 : max(_1708, 0.0))) * _1487)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4777 : (isnan(_4777) ? 1.0 : min(_4777, 1.0))) * (_2715 + ((isnan(0.0) ? _1414 : (isnan(_1414) ? 0.0 : max(_1414, 0.0))) * _647)));
    float _2773 = isnan(0.0) ? _2768 : (isnan(_2768) ? 0.0 : max(_2768, 0.0));
    float _2774 = isnan(0.0) ? _2770 : (isnan(_2770) ? 0.0 : max(_2770, 0.0));
    float _2775 = isnan(0.0) ? _2772 : (isnan(_2772) ? 0.0 : max(_2772, 0.0));
    float _2781 = cbMtdParam._m0[2u].x * _2739;
    float _2782 = cbMtdParam._m0[2u].y * _2745;
    float _2783 = cbMtdParam._m0[2u].z * _2751;
    float _4803 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2785 = isnan(1.0) ? _4803 : (isnan(_4803) ? 1.0 : min(_4803, 1.0));
    uint _2786 = _607 + 6u;
    float _2794 = _569 / cbSceneParam._m0[86u].x;
    float _2795 = _570 / cbSceneParam._m0[86u].y;
    vec4 _2809 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2794, _2795, (log2((isnan(cbSceneParam._m0[77u].w) ? _491 : (isnan(_491) ? cbSceneParam._m0[77u].w : min(_491, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2811 = _2809.x;
    float _2812 = _2809.y;
    float _2813 = _2809.z;
    float _2814 = _2809.w;
    float _2885;
    float _2887;
    float _2889;
    float _2891;
    if (_491 > cbSceneParam._m0[78u].w)
    {
        float _2848 = isnan(_491) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _491 : min(cbSceneParam._m0[80u].w, _491));
        float _2849 = _2848 / _491;
        float _2860 = _2849 * _542;
        float _2861 = _543 * _2849;
        float _2862 = (-0.0) - _2861;
        float _2863 = _2849 * _544;
        float _2865 = (cbSceneParam._m0[77u].w * _2862) / _2848;
        float _2866 = _2865 + cbSceneParam._m0[79u].w;
        float _2867 = cbSceneParam._m0[79u].w - _2861;
        float _2873 = sqrt(((_2860 * _2860) + (_2861 * _2861)) + (_2863 * _2863));
        float _2876 = (1.0 - (cbSceneParam._m0[77u].w / _2848)) * _2873;
        float _2881 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2883 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3069;
        if (abs((_2862 - _2865) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3069 = ((((_2866 > 0.0) ? exp2(_2881 * _2866) : (2.0 - exp2(_2883 * _2866))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2876;
        }
        else
        {
            float _3013 = 1.0 / cbSceneParam._m0[80u].x;
            float _3014 = isnan(_2867) ? _2866 : (isnan(_2866) ? _2867 : max(_2866, _2867));
            float _3015 = isnan(_2867) ? _2866 : (isnan(_2866) ? _2867 : min(_2866, _2867));
            float _3024 = isnan(0.0) ? _3014 : (isnan(_3014) ? 0.0 : min(_3014, 0.0));
            float _3025 = isnan(0.0) ? _3015 : (isnan(_3015) ? 0.0 : min(_3015, 0.0));
            _3069 = ((abs(_2873 / _2862) * cbSceneParam._m0[80u].y) * ((((_3024 - _3025) * 2.0) - ((exp2(_2881 * (isnan(0.0) ? _3014 : (isnan(_3014) ? 0.0 : max(_3014, 0.0)))) - exp2(_2881 * (isnan(0.0) ? _3015 : (isnan(_3015) ? 0.0 : max(_3015, 0.0))))) * _3013)) - ((exp2(_2883 * _3024) - exp2(_2883 * _3025)) * _3013))) + (_2876 * cbSceneParam._m0[80u].z);
        }
        vec4 _3071 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2794, _2795, 1.0), 0.0);
        float _3080 = exp2((_3069 * (-1.44269502162933349609375)) * (1.0 - _3071.w));
        float _3081 = log2(_3080);
        float _3097 = log2(_2814);
        _2885 = (exp2(_3097 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3081 * cbSceneParam._m0[78u].x)) * _3071.x) / cbSceneParam._m0[78u].x)) + _2811;
        _2887 = (exp2(_3097 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3081 * cbSceneParam._m0[78u].y)) * _3071.y) / cbSceneParam._m0[78u].y)) + _2812;
        _2889 = (exp2(_3097 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3081 * cbSceneParam._m0[78u].z)) * _3071.z) / cbSceneParam._m0[78u].z)) + _2813;
        _2891 = _3080 * _2814;
    }
    else
    {
        _2885 = _2811;
        _2887 = _2812;
        _2889 = _2813;
        _2891 = _2814;
    }
    bool _3107;
    vec4 _2901;
    vec4 _2923;
    float _2925;
    float _2929;
    float _2930;
    float _2931;
    float _2934;
    float _2937;
    float _2940;
    float _2941;
    bool _2951;
    for (;;)
    {
        _2901 = cbMatDynParam._m0[0u];
        float _2903 = roundEven(_2901.y);
        bool _2904 = _2903 == 3.0;
        float _2905 = log2(_2891);
        float _2909 = exp2(_2905 * cbSceneParam._m0[78u].x);
        float _2910 = exp2(_2905 * cbSceneParam._m0[78u].y);
        float _2911 = exp2(_2905 * cbSceneParam._m0[78u].z);
        float _2912 = _2909 * _2773;
        float _2913 = _2910 * _2774;
        float _2914 = _2911 * _2775;
        float _2921 = _558 + (-0.5);
        _2923 = cbMtdParam._m0[1u];
        _2925 = _2923.y * _2921;
        float _2928 = (_2903 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2929 = _2928 * (_2904 ? _2912 : (_2912 + (cbSceneParam._m0[72u].w * _2885)));
        _2930 = _2928 * (_2904 ? _2913 : (_2913 + (cbSceneParam._m0[72u].w * _2887)));
        _2931 = _2928 * (_2904 ? _2914 : (_2914 + (cbSceneParam._m0[72u].w * _2889)));
        _2934 = ((_2781 * _2785) * _2909) * _2928;
        _2937 = ((_2782 * _2785) * _2910) * _2928;
        _2940 = ((_2783 * _2785) * _2911) * _2928;
        _2941 = _2921 * 0.999000012874603271484375;
        _2951 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2951)
        {
            if ((cbInstanceData._m0[_607 + 7u].x + _2941) < 0.5)
            {
                _3107 = true;
                break;
            }
        }
        uint _3048 = _608 + uint(_2901.w);
        if ((cbInstanceData._m0[_3048].w < 1.0) && ((cbInstanceData._m0[_3048].w + _2941) < 0.5))
        {
            _3107 = true;
            break;
        }
        if ((_2925 + 1.0) < _2923.x)
        {
            _3107 = true;
            break;
        }
        _3107 = false;
        break;
    }
    float _3311;
    if (_3107)
    {
        discard_state = true;
        _3311 = 0.0;
    }
    else
    {
        _3311 = cbInstanceData._m0[_2786].w;
    }
    SV_Target.x = _2929;
    SV_Target.y = _2930;
    SV_Target.z = _2931;
    SV_Target.w = _3311;
    SV_Target_1.x = _2934;
    SV_Target_1.y = _2937;
    SV_Target_1.z = _2940;
    SV_Target_1.w = cbInstanceData._m0[_2786].w;
    discard_exit();
}


