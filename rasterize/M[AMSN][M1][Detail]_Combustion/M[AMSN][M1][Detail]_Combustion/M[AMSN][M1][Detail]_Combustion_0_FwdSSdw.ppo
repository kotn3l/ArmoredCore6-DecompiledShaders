#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[18];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_M1_Detail_Combustion_snp_0_Texture2D_10;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_M1_Detail_Combustion_snp_0_Texture2D_13;
layout(set = 0, binding = 5) uniform texture2D M_AMSN_M1_Detail_Combustion_snp_0_Texture2D_23;
layout(set = 0, binding = 6) uniform texture2D M_AMSN_M1_Detail_Combustion_snp_0_Texture2D_4;
layout(set = 0, binding = 7) uniform texture2D M_AMSN_M1_Detail_Combustion_snp_0_Texture2D_7;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in float TEXCOORD;
layout(location = 4, component = 1) in float TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 4, component = 2) in float TEXCOORD_6;
layout(location = 4, component = 3) in float TEXCOORD_7;
layout(location = 6) in float TEXCOORD_8;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _968;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _190 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _191 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _192 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _198 = inversesqrt(dot(vec3(_190, _191, _192), vec3(_190, _191, _192)));
    float _205 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _212 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _234 = texture(sampler2D(M_AMSN_M1_Detail_Combustion_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1) + cbTextureTilingScale._m0[2u].w));
    float _240 = _234.x * cbMtdParam._m0[9u].x;
    float _241 = _234.y * cbMtdParam._m0[9u].y;
    float _242 = _234.z * cbMtdParam._m0[9u].z;
    vec4 _255 = texture(sampler2D(M_AMSN_M1_Detail_Combustion_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD_1) + cbTextureTilingScale._m0[7u].w));
    float _259 = _255.z;
    float _263 = (_255.x * 2.0) + (-1.0);
    float _265 = (_255.y * 2.0) + (-1.0);
    float _266 = dot(vec2(_263, _265), vec2(_263, _265));
    float _3356 = isnan(0.0) ? _266 : (isnan(_266) ? 0.0 : max(_266, 0.0));
    float _272 = sqrt(1.0 - (isnan(1.0) ? _3356 : (isnan(_3356) ? 1.0 : min(_3356, 1.0))));
    float _298 = (cbMtdParam._m0[17u].z * cbPerFrame._m0[22u].x) + TEXCOORD;
    float _299 = (cbMtdParam._m0[17u].w * cbPerFrame._m0[22u].x) + TEXCOORD_1;
    vec4 _312 = texture(sampler2D(M_AMSN_M1_Detail_Combustion_snp_0_Texture2D_4, SS_DiffuseMap), vec2((_298 * cbTextureTilingScale._m0[6u].x) + cbTextureTilingScale._m0[6u].z, (_299 * cbTextureTilingScale._m0[6u].y) + cbTextureTilingScale._m0[6u].w));
    float _326 = abs((fract(cbMtdParam._m0[13u].z * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _3367 = isnan(0.0) ? _326 : (isnan(_326) ? 0.0 : max(_326, 0.0));
    float _327 = isnan(1.0) ? _3367 : (isnan(_3367) ? 1.0 : min(_3367, 1.0));
    float _335 = (((_327 * _327) * (3.0 - (_327 * 2.0))) * cbMtdParam._m0[14u].x) - cbMtdParam._m0[14u].y;
    float _344 = cbMtdParam._m0[14u].z * cbPerFrame._m0[22u].x;
    float _352 = abs((fract(cbMtdParam._m0[14u].w * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _3378 = isnan(0.0) ? _352 : (isnan(_352) ? 0.0 : max(_352, 0.0));
    float _353 = isnan(1.0) ? _3378 : (isnan(_3378) ? 1.0 : min(_3378, 1.0));
    float _357 = (_353 * _353) * (3.0 - (_353 * 2.0));
    float _358 = _357 * cbMtdParam._m0[17u].x;
    float _359 = _357 * cbMtdParam._m0[17u].y;
    float _360 = sin(_344);
    float _361 = cos(_344);
    float _362 = TEXCOORD - _358;
    float _363 = TEXCOORD_1 - _359;
    vec4 _383 = texture(sampler2D(M_AMSN_M1_Detail_Combustion_snp_0_Texture2D_10, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (_358 + fma(_363, (-0.0) - _360, _362 * _361))) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (fma(_363, _361, _362 * _360) + _359)) + cbTextureTilingScale._m0[0u].w));
    float _389 = (cbMtdParam._m0[11u].x * cbMtdParam._m0[13u].w) * _383.x;
    float _391 = (cbMtdParam._m0[11u].y * cbMtdParam._m0[13u].w) * _383.y;
    float _393 = (cbMtdParam._m0[11u].z * cbMtdParam._m0[13u].w) * _383.z;
    vec4 _416 = texture(sampler2D(M_AMSN_M1_Detail_Combustion_snp_0_Texture2D_23, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * _298) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _299) + cbTextureTilingScale._m0[5u].w));
    float _426 = (TEXCOORD_3.x - ((cbMtdParam._m0[16u].w * (1.0 - TEXCOORD_3.x)) * (_416.x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[13u].x + 1.0);
    float _3389 = isnan(0.0) ? _426 : (isnan(_426) ? 0.0 : max(_426, 0.0));
    float _427 = isnan(1.0) ? _3389 : (isnan(_3389) ? 1.0 : min(_3389, 1.0));
    float _431 = (cbMtdParam._m0[16u].y * _263) + _263;
    float _432 = (cbMtdParam._m0[16u].y * _265) + _265;
    float _435 = fma(_272, _205 * NORMAL.x, fma(_432, _212 * TANGENT.x, (_198 * _190) * _431));
    float _438 = fma(_272, _205 * NORMAL.y, fma(_432, _212 * TANGENT.y, (_198 * _191) * _431));
    float _441 = fma(_272, _205 * NORMAL.z, fma(_432, _212 * TANGENT.z, (_198 * _192) * _431));
    float _445 = inversesqrt(dot(vec3(_435, _438, _441), vec3(_435, _438, _441)));
    float _446 = _445 * _435;
    float _447 = _445 * _438;
    float _448 = _445 * _441;
    float _3400 = isnan(0.0) ? _259 : (isnan(_259) ? 0.0 : max(_259, 0.0));
    float _449 = isnan(1.0) ? _3400 : (isnan(_3400) ? 1.0 : min(_3400, 1.0));
    float _3411 = isnan(0.0) ? _240 : (isnan(_240) ? 0.0 : max(_240, 0.0));
    float _3422 = isnan(0.0) ? _241 : (isnan(_241) ? 0.0 : max(_241, 0.0));
    float _3433 = isnan(0.0) ? _242 : (isnan(_242) ? 0.0 : max(_242, 0.0));
    float _468 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _509 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _519 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _509);
    float _520 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _509);
    float _521 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _509);
    float _525 = inversesqrt(dot(vec3(_519, _520, _521), vec3(_519, _520, _521)));
    float _526 = _519 * _525;
    float _527 = _520 * _525;
    float _528 = _521 * _525;
    float _534 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _535 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _553 = fma(_448, cbSceneParam._m0[5u].z, fma(_447, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _446));
    float _556 = fma(_448, cbSceneParam._m0[6u].z, fma(_447, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _446));
    float _559 = fma(_448, cbSceneParam._m0[7u].z, fma(_447, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _446));
    uint _572 = uint(roundEven(NORMAL.w)) * 13u;
    uint _573 = _572 + 9u;
    uint _574 = _573 + uint(cbMatDynParam._m0[0u].w);
    float _580 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3411 : (isnan(_3411) ? 1.0 : min(_3411, 1.0)))) * cbInstanceData._m0[_574].x;
    float _581 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3422 : (isnan(_3422) ? 1.0 : min(_3422, 1.0)))) * cbInstanceData._m0[_574].y;
    float _582 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3433 : (isnan(_3433) ? 1.0 : min(_3433, 1.0)))) * cbInstanceData._m0[_574].z;
    float _3444 = isnan(0.0) ? _580 : (isnan(_580) ? 0.0 : max(_580, 0.0));
    float _583 = isnan(1.0) ? _3444 : (isnan(_3444) ? 1.0 : min(_3444, 1.0));
    float _3455 = isnan(0.0) ? _581 : (isnan(_581) ? 0.0 : max(_581, 0.0));
    float _584 = isnan(1.0) ? _3455 : (isnan(_3455) ? 1.0 : min(_3455, 1.0));
    float _3466 = isnan(0.0) ? _582 : (isnan(_582) ? 0.0 : max(_582, 0.0));
    float _585 = isnan(1.0) ? _3466 : (isnan(_3466) ? 1.0 : min(_3466, 1.0));
    vec4 _594 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _534, cbSceneParam._m0[86u].y * _535));
    float _597 = _594.x * TEXCOORD_3.w;
    float _598 = dot(vec3(_446, _447, _448), vec3(_526, _527, _528));
    float _601 = _598 * 2.0;
    float _605 = (_601 * _446) - _526;
    float _606 = (_601 * _447) - _527;
    float _607 = (_601 * _448) - _528;
    float _611 = abs(dot(vec3(_526, _527, _528), vec3(_446, _447, _448)));
    float _3477 = isnan(0.0) ? _611 : (isnan(_611) ? 0.0 : max(_611, 0.0));
    float _613 = sqrt(_449);
    float _625 = exp2((_613 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3477 : (isnan(_3477) ? 1.0 : min(_3477, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_613 * 3.0));
    float _657 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _661 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _665 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _967;
    float _969;
    float _970;
    float _971;
    float _972;
    float _973;
    float _974;
    float _975;
    float _976;
    float _977;
    float _978;
    float _979;
    float _980;
    float _981;
    float _982;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _692 = fma(_665, cbModelParam._m0[26u].z, fma(_661, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _657));
        float _696 = fma(_665, cbModelParam._m0[27u].z, fma(_661, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _657));
        float _700 = fma(_665, cbModelParam._m0[28u].z, fma(_661, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _657));
        float _725 = _657 + _446;
        float _726 = _661 + _447;
        float _727 = _665 + _448;
        float _737 = fma(_727, cbModelParam._m0[26u].z, fma(_726, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _725)) - _692;
        float _738 = fma(_727, cbModelParam._m0[27u].z, fma(_726, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _725)) - _696;
        float _739 = fma(_727, cbModelParam._m0[28u].z, fma(_726, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _725)) - _700;
        float _743 = inversesqrt(dot(vec3(_737, _738, _739), vec3(_737, _738, _739)));
        float _756 = ((_743 * _737) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_692 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _757 = ((_743 * _738) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_696 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _758 = ((_743 * _739) / cbModelParam._m0[34u].z) + ((((((_700 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _761 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_756, _757, _758), 0.0);
        vec4 _768 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_756, _757, _758), 0.0);
        vec4 _775 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_756, _757, _758), 0.0);
        vec4 _782 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_756, _757, _758), 0.0);
        float _795 = exp2((_761.w + (-0.5)) * 20.0) * 2.0;
        float _796 = _795 * (_761.x + (-0.5));
        float _797 = _795 * (_761.y + (-0.5));
        float _798 = _795 * (_761.z + (-0.5));
        float _805 = exp2((_768.w + (-0.5)) * 20.0) * 2.0;
        float _806 = _805 * (_768.x + (-0.5));
        float _807 = _805 * (_768.y + (-0.5));
        float _808 = _805 * (_768.z + (-0.5));
        float _815 = exp2((_775.w + (-0.5)) * 20.0) * 2.0;
        float _816 = _815 * (_775.x + (-0.5));
        float _817 = _815 * (_775.y + (-0.5));
        float _818 = _815 * (_775.z + (-0.5));
        float _825 = exp2((_782.w + (-0.5)) * 20.0) * 2.0;
        float _826 = _825 * (_782.x + (-0.5));
        float _827 = _825 * (_782.y + (-0.5));
        float _828 = _825 * (_782.z + (-0.5));
        float _829 = isnan(0.0) ? _826 : (isnan(_826) ? 0.0 : max(_826, 0.0));
        float _830 = isnan(0.0) ? _827 : (isnan(_827) ? 0.0 : max(_827, 0.0));
        float _831 = isnan(0.0) ? _828 : (isnan(_828) ? 0.0 : max(_828, 0.0));
        float _832 = _796 * 0.5;
        float _833 = _806 * 0.5;
        float _834 = _816 * 0.5;
        float _835 = dot(vec3(_832, _833, _834), vec3(_832, _833, _834));
        float _840 = (_835 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_835);
        float _849 = (dot(vec3(_446, _447, _448), vec3(_840 * _832, _840 * _833, _840 * _834)) + 1.0) * 0.5;
        float _3503 = isnan(0.0) ? _849 : (isnan(_849) ? 0.0 : max(_849, 0.0));
        float _859 = sqrt(((_833 * _833) + (_832 * _832)) + (_834 * _834)) / (_829 + 9.9999997473787516355514526367188e-06);
        float _3514 = isnan(0.0) ? _859 : (isnan(_859) ? 0.0 : max(_859, 0.0));
        float _860 = isnan(1.0) ? _3514 : (isnan(_3514) ? 1.0 : min(_3514, 1.0));
        float _861 = _860 * 2.0;
        float _865 = (1.0 - _860) / (_860 + 1.0);
        float _3525 = isnan(0.0) ? _865 : (isnan(_865) ? 0.0 : max(_865, 0.0));
        float _866 = isnan(1.0) ? _3525 : (isnan(_3525) ? 1.0 : min(_3525, 1.0));
        float _875 = ((((1.0 - _866) * (_861 + 2.0)) * exp2(log2(isnan(1.0) ? _3503 : (isnan(_3503) ? 1.0 : min(_3503, 1.0))) * (_861 + 1.0))) + _866) * _829;
        float _876 = _797 * 0.5;
        float _877 = _807 * 0.5;
        float _878 = _817 * 0.5;
        float _879 = dot(vec3(_876, _877, _878), vec3(_876, _877, _878));
        float _884 = (_879 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_879);
        float _892 = (dot(vec3(_446, _447, _448), vec3(_884 * _876, _884 * _877, _884 * _878)) + 1.0) * 0.5;
        float _3536 = isnan(0.0) ? _892 : (isnan(_892) ? 0.0 : max(_892, 0.0));
        float _901 = sqrt(((_877 * _877) + (_876 * _876)) + (_878 * _878)) / (_830 + 9.9999997473787516355514526367188e-06);
        float _3547 = isnan(0.0) ? _901 : (isnan(_901) ? 0.0 : max(_901, 0.0));
        float _902 = isnan(1.0) ? _3547 : (isnan(_3547) ? 1.0 : min(_3547, 1.0));
        float _903 = _902 * 2.0;
        float _907 = (1.0 - _902) / (_902 + 1.0);
        float _3558 = isnan(0.0) ? _907 : (isnan(_907) ? 0.0 : max(_907, 0.0));
        float _908 = isnan(1.0) ? _3558 : (isnan(_3558) ? 1.0 : min(_3558, 1.0));
        float _917 = ((((1.0 - _908) * (_903 + 2.0)) * exp2(log2(isnan(1.0) ? _3536 : (isnan(_3536) ? 1.0 : min(_3536, 1.0))) * (_903 + 1.0))) + _908) * _830;
        float _918 = _798 * 0.5;
        float _919 = _808 * 0.5;
        float _920 = _818 * 0.5;
        float _921 = dot(vec3(_918, _919, _920), vec3(_918, _919, _920));
        float _926 = (_921 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_921);
        float _934 = (dot(vec3(_446, _447, _448), vec3(_926 * _918, _926 * _919, _926 * _920)) + 1.0) * 0.5;
        float _3569 = isnan(0.0) ? _934 : (isnan(_934) ? 0.0 : max(_934, 0.0));
        float _943 = sqrt(((_919 * _919) + (_918 * _918)) + (_920 * _920)) / (_831 + 9.9999997473787516355514526367188e-06);
        float _3580 = isnan(0.0) ? _943 : (isnan(_943) ? 0.0 : max(_943, 0.0));
        float _944 = isnan(1.0) ? _3580 : (isnan(_3580) ? 1.0 : min(_3580, 1.0));
        float _945 = _944 * 2.0;
        float _949 = (1.0 - _944) / (_944 + 1.0);
        float _3591 = isnan(0.0) ? _949 : (isnan(_949) ? 0.0 : max(_949, 0.0));
        float _950 = isnan(1.0) ? _3591 : (isnan(_3591) ? 1.0 : min(_3591, 1.0));
        float _959 = ((((1.0 - _950) * (_945 + 2.0)) * exp2(log2(isnan(1.0) ? _3569 : (isnan(_3569) ? 1.0 : min(_3569, 1.0))) * (_945 + 1.0))) + _950) * _831;
        _967 = _798;
        _969 = _797;
        _970 = _796;
        _971 = _808;
        _972 = _807;
        _973 = _806;
        _974 = _818;
        _975 = _817;
        _976 = _816;
        _977 = _831;
        _978 = _830;
        _979 = _829;
        _980 = cbModelParam._m0[36u].z * (isnan(0.0) ? _875 : (isnan(_875) ? 0.0 : max(_875, 0.0)));
        _981 = cbModelParam._m0[36u].z * (isnan(0.0) ? _917 : (isnan(_917) ? 0.0 : max(_917, 0.0)));
        _982 = cbModelParam._m0[36u].z * (isnan(0.0) ? _959 : (isnan(_959) ? 0.0 : max(_959, 0.0)));
    }
    else
    {
        _967 = _968;
        _969 = _968;
        _970 = _968;
        _971 = _968;
        _972 = _968;
        _973 = _968;
        _974 = _968;
        _975 = _968;
        _976 = _968;
        _977 = _968;
        _978 = _968;
        _979 = _968;
        _980 = 0.0;
        _981 = 0.0;
        _982 = 0.0;
    }
    float _1277;
    float _1278;
    float _1279;
    float _1280;
    float _1281;
    float _1282;
    float _1283;
    float _1284;
    float _1285;
    float _1286;
    float _1287;
    float _1288;
    float _1289;
    float _1290;
    float _1291;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1008 = fma(_665, cbModelParam._m0[30u].z, fma(_661, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _657));
        float _1012 = fma(_665, cbModelParam._m0[31u].z, fma(_661, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _657));
        float _1016 = fma(_665, cbModelParam._m0[32u].z, fma(_661, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _657));
        float _1039 = _657 + _446;
        float _1040 = _661 + _447;
        float _1041 = _665 + _448;
        float _1051 = fma(_1041, cbModelParam._m0[30u].z, fma(_1040, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1039)) - _1008;
        float _1052 = fma(_1041, cbModelParam._m0[31u].z, fma(_1040, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1039)) - _1012;
        float _1053 = fma(_1041, cbModelParam._m0[32u].z, fma(_1040, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1039)) - _1016;
        float _1057 = inversesqrt(dot(vec3(_1051, _1052, _1053), vec3(_1051, _1052, _1053)));
        float _1070 = ((_1057 * _1051) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1008 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1071 = ((_1057 * _1052) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1012 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1072 = ((_1057 * _1053) / cbModelParam._m0[35u].z) + ((((((_1016 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1074 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1070, _1071, _1072), 0.0);
        vec4 _1081 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1070, _1071, _1072), 0.0);
        vec4 _1088 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1070, _1071, _1072), 0.0);
        vec4 _1095 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1070, _1071, _1072), 0.0);
        float _1107 = exp2((_1074.w + (-0.5)) * 20.0) * 2.0;
        float _1108 = _1107 * (_1074.x + (-0.5));
        float _1109 = _1107 * (_1074.y + (-0.5));
        float _1110 = _1107 * (_1074.z + (-0.5));
        float _1117 = exp2((_1081.w + (-0.5)) * 20.0) * 2.0;
        float _1118 = _1117 * (_1081.x + (-0.5));
        float _1119 = _1117 * (_1081.y + (-0.5));
        float _1120 = _1117 * (_1081.z + (-0.5));
        float _1127 = exp2((_1088.w + (-0.5)) * 20.0) * 2.0;
        float _1128 = _1127 * (_1088.x + (-0.5));
        float _1129 = _1127 * (_1088.y + (-0.5));
        float _1130 = _1127 * (_1088.z + (-0.5));
        float _1137 = exp2((_1095.w + (-0.5)) * 20.0) * 2.0;
        float _1138 = _1137 * (_1095.x + (-0.5));
        float _1139 = _1137 * (_1095.y + (-0.5));
        float _1140 = _1137 * (_1095.z + (-0.5));
        float _1141 = isnan(0.0) ? _1138 : (isnan(_1138) ? 0.0 : max(_1138, 0.0));
        float _1142 = isnan(0.0) ? _1139 : (isnan(_1139) ? 0.0 : max(_1139, 0.0));
        float _1143 = isnan(0.0) ? _1140 : (isnan(_1140) ? 0.0 : max(_1140, 0.0));
        float _1144 = _1108 * 0.5;
        float _1145 = _1118 * 0.5;
        float _1146 = _1128 * 0.5;
        float _1147 = dot(vec3(_1144, _1145, _1146), vec3(_1144, _1145, _1146));
        float _1152 = (_1147 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1147);
        float _1160 = (dot(vec3(_446, _447, _448), vec3(_1152 * _1144, _1152 * _1145, _1152 * _1146)) + 1.0) * 0.5;
        float _3632 = isnan(0.0) ? _1160 : (isnan(_1160) ? 0.0 : max(_1160, 0.0));
        float _1169 = sqrt(((_1145 * _1145) + (_1144 * _1144)) + (_1146 * _1146)) / (_1141 + 9.9999997473787516355514526367188e-06);
        float _3643 = isnan(0.0) ? _1169 : (isnan(_1169) ? 0.0 : max(_1169, 0.0));
        float _1170 = isnan(1.0) ? _3643 : (isnan(_3643) ? 1.0 : min(_3643, 1.0));
        float _1171 = _1170 * 2.0;
        float _1175 = (1.0 - _1170) / (_1170 + 1.0);
        float _3654 = isnan(0.0) ? _1175 : (isnan(_1175) ? 0.0 : max(_1175, 0.0));
        float _1176 = isnan(1.0) ? _3654 : (isnan(_3654) ? 1.0 : min(_3654, 1.0));
        float _1185 = ((((1.0 - _1176) * (_1171 + 2.0)) * exp2(log2(isnan(1.0) ? _3632 : (isnan(_3632) ? 1.0 : min(_3632, 1.0))) * (_1171 + 1.0))) + _1176) * _1141;
        float _1186 = _1109 * 0.5;
        float _1187 = _1119 * 0.5;
        float _1188 = _1129 * 0.5;
        float _1189 = dot(vec3(_1186, _1187, _1188), vec3(_1186, _1187, _1188));
        float _1194 = (_1189 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1189);
        float _1202 = (dot(vec3(_446, _447, _448), vec3(_1194 * _1186, _1194 * _1187, _1194 * _1188)) + 1.0) * 0.5;
        float _3665 = isnan(0.0) ? _1202 : (isnan(_1202) ? 0.0 : max(_1202, 0.0));
        float _1211 = sqrt(((_1187 * _1187) + (_1186 * _1186)) + (_1188 * _1188)) / (_1142 + 9.9999997473787516355514526367188e-06);
        float _3676 = isnan(0.0) ? _1211 : (isnan(_1211) ? 0.0 : max(_1211, 0.0));
        float _1212 = isnan(1.0) ? _3676 : (isnan(_3676) ? 1.0 : min(_3676, 1.0));
        float _1213 = _1212 * 2.0;
        float _1217 = (1.0 - _1212) / (_1212 + 1.0);
        float _3687 = isnan(0.0) ? _1217 : (isnan(_1217) ? 0.0 : max(_1217, 0.0));
        float _1218 = isnan(1.0) ? _3687 : (isnan(_3687) ? 1.0 : min(_3687, 1.0));
        float _1227 = ((((1.0 - _1218) * (_1213 + 2.0)) * exp2(log2(isnan(1.0) ? _3665 : (isnan(_3665) ? 1.0 : min(_3665, 1.0))) * (_1213 + 1.0))) + _1218) * _1142;
        float _1228 = _1110 * 0.5;
        float _1229 = _1120 * 0.5;
        float _1230 = _1130 * 0.5;
        float _1231 = dot(vec3(_1228, _1229, _1230), vec3(_1228, _1229, _1230));
        float _1236 = (_1231 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1231);
        float _1244 = (dot(vec3(_446, _447, _448), vec3(_1236 * _1228, _1236 * _1229, _1236 * _1230)) + 1.0) * 0.5;
        float _3698 = isnan(0.0) ? _1244 : (isnan(_1244) ? 0.0 : max(_1244, 0.0));
        float _1253 = sqrt(((_1229 * _1229) + (_1228 * _1228)) + (_1230 * _1230)) / (_1143 + 9.9999997473787516355514526367188e-06);
        float _3709 = isnan(0.0) ? _1253 : (isnan(_1253) ? 0.0 : max(_1253, 0.0));
        float _1254 = isnan(1.0) ? _3709 : (isnan(_3709) ? 1.0 : min(_3709, 1.0));
        float _1255 = _1254 * 2.0;
        float _1259 = (1.0 - _1254) / (_1254 + 1.0);
        float _3720 = isnan(0.0) ? _1259 : (isnan(_1259) ? 0.0 : max(_1259, 0.0));
        float _1260 = isnan(1.0) ? _3720 : (isnan(_3720) ? 1.0 : min(_3720, 1.0));
        float _1269 = ((((1.0 - _1260) * (_1255 + 2.0)) * exp2(log2(isnan(1.0) ? _3698 : (isnan(_3698) ? 1.0 : min(_3698, 1.0))) * (_1255 + 1.0))) + _1260) * _1143;
        _1277 = _1110;
        _1278 = _1109;
        _1279 = _1108;
        _1280 = _1120;
        _1281 = _1119;
        _1282 = _1118;
        _1283 = _1130;
        _1284 = _1129;
        _1285 = _1128;
        _1286 = _1143;
        _1287 = _1142;
        _1288 = _1141;
        _1289 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1185 : (isnan(_1185) ? 0.0 : max(_1185, 0.0)));
        _1290 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1227 : (isnan(_1227) ? 0.0 : max(_1227, 0.0)));
        _1291 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1269 : (isnan(_1269) ? 0.0 : max(_1269, 0.0)));
    }
    else
    {
        _1277 = _968;
        _1278 = _968;
        _1279 = _968;
        _1280 = _968;
        _1281 = _968;
        _1282 = _968;
        _1283 = _968;
        _1284 = _968;
        _1285 = _968;
        _1286 = _968;
        _1287 = _968;
        _1288 = _968;
        _1289 = 0.0;
        _1290 = 0.0;
        _1291 = 0.0;
    }
    float _1301 = (cbModelParam._m0[1u].x * (_1289 - _980)) + _980;
    float _1302 = (cbModelParam._m0[1u].x * (_1290 - _981)) + _981;
    float _1303 = (cbModelParam._m0[1u].x * (_1291 - _982)) + _982;
    float _1324 = fma(_1303, cbSceneParam._m0[89u].z, fma(_1302, cbSceneParam._m0[89u].y, _1301 * cbSceneParam._m0[89u].x));
    float _1327 = fma(_1303, cbSceneParam._m0[90u].z, fma(_1302, cbSceneParam._m0[90u].y, _1301 * cbSceneParam._m0[90u].x));
    float _1330 = fma(_1303, cbSceneParam._m0[91u].z, fma(_1302, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1301));
    float _1345 = _605 * 0.5;
    float _1346 = _606 * 0.5;
    float _1347 = _607 * 0.5;
    float _1348 = dot(vec4(_1345, _1346, _1347, 1.0), vec4(_1279, _1282, _1285, _1288));
    float _1351 = dot(vec4(_1345, _1346, _1347, 1.0), vec4(_1278, _1281, _1284, _1287));
    float _1354 = dot(vec4(_1345, _1346, _1347, 1.0), vec4(_1277, _1280, _1283, _1286));
    float _1388;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1361 = dot(vec4(_1345, _1346, _1347, 1.0), vec4(_967, _971, _974, _977));
        float _1365 = dot(vec4(_1345, _1346, _1347, 1.0), vec4(_969, _972, _975, _978));
        float _1369 = dot(vec4(_1345, _1346, _1347, 1.0), vec4(_970, _973, _976, _979));
        float _1376 = dot(vec4(cbModelParam._m0[39u]), vec4(_1345, _1346, _1347, 1.0));
        _1388 = dot(vec3(isnan(0.0) ? _1369 : (isnan(_1369) ? 0.0 : max(_1369, 0.0)), isnan(0.0) ? _1365 : (isnan(_1365) ? 0.0 : max(_1365, 0.0)), isnan(0.0) ? _1361 : (isnan(_1361) ? 0.0 : max(_1361, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1376) ? 0.0 : (isnan(0.0) ? _1376 : max(0.0, _1376))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1388 = 1.0;
    }
    float _1399;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1390 = dot(vec4(cbModelParam._m0[40u]), vec4(_1345, _1346, _1347, 1.0));
        _1399 = dot(vec3(isnan(0.0) ? _1348 : (isnan(_1348) ? 0.0 : max(_1348, 0.0)), isnan(0.0) ? _1351 : (isnan(_1351) ? 0.0 : max(_1351, 0.0)), isnan(0.0) ? _1354 : (isnan(_1354) ? 0.0 : max(_1354, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1390) ? 0.0 : (isnan(0.0) ? _1390 : max(0.0, _1390))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1399 = 1.0;
    }
    float _1403 = (_1399 * cbModelParam._m0[1u].x) + (_1388 * (1.0 - cbModelParam._m0[1u].x));
    float _1413 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _449);
    float _1414 = isnan(_1413) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1413 : min(cbModelParam._m0[25u].z, _1413));
    float _1494;
    float _1496;
    float _1498;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1461 = fma(_665, cbModelParam._m0[13u].z, fma(_661, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _657)) + cbModelParam._m0[13u].w;
        float _1465 = fma(_665, cbModelParam._m0[14u].z, fma(_661, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _657)) + cbModelParam._m0[14u].w;
        float _1469 = fma(_665, cbModelParam._m0[15u].z, fma(_661, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _657)) + cbModelParam._m0[15u].w;
        float _1472 = fma(_607, cbModelParam._m0[13u].z, fma(_606, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _605));
        float _1475 = fma(_607, cbModelParam._m0[14u].z, fma(_606, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _605));
        float _1478 = fma(_607, cbModelParam._m0[15u].z, fma(_606, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _605));
        float _1506;
        if (_1472 > 0.0)
        {
            _1506 = abs((1.0 - _1461) / _1472);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1472 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1461 + 1.0) / _1472);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1506 = frontier_phi_14_12_ladder;
        }
        float _1731;
        if (_1475 > 0.0)
        {
            _1731 = abs((1.0 - _1465) / _1475);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1475 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1465 + 1.0) / _1475);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1731 = frontier_phi_23_19_ladder;
        }
        float _1977;
        if (_1478 > 0.0)
        {
            _1977 = abs((1.0 - _1469) / _1478);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1478 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1469 + 1.0) / _1478);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _1977 = frontier_phi_35_30_ladder;
        }
        float _1979 = isnan(_1731) ? _1506 : (isnan(_1506) ? _1731 : min(_1506, _1731));
        float _1980 = isnan(_1977) ? _1979 : (isnan(_1979) ? _1977 : min(_1979, _1977));
        float _1984 = (_1980 * _1472) + _1461;
        float _1985 = (_1980 * _1475) + _1465;
        float _1986 = (_1980 * _1478) + _1469;
        float _1987 = _1980 * 9.9999997473787516355514526367188e-05;
        float _1989 = (-1.0) - _1987;
        float _1991 = _1987 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_1986 > _1991) || ((_1986 < _1989) || ((_1985 > _1991) || ((_1985 < _1989) || ((_1984 < _1989) || (_1984 > _1991))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2110 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1986, cbModelParam._m0[9u].z, fma(_1985, cbModelParam._m0[9u].y, _1984 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1986, cbModelParam._m0[10u].z, fma(_1985, cbModelParam._m0[10u].y, _1984 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1986, cbModelParam._m0[11u].z, fma(_1985, cbModelParam._m0[11u].y, _1984 * cbModelParam._m0[11u].x))), _1414);
            frontier_phi_13_35_ladder = _2110.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2110.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2110.x * cbModelParam._m0[1u].y;
        }
        _1494 = frontier_phi_13_35_ladder_2;
        _1496 = frontier_phi_13_35_ladder_1;
        _1498 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1482 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_605, _606, _607), _1414);
        _1494 = _1482.x * cbModelParam._m0[1u].y;
        _1496 = _1482.y * cbModelParam._m0[1u].y;
        _1498 = _1482.z * cbModelParam._m0[1u].y;
    }
    float _1502 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _449);
    float _1503 = isnan(_1502) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1502 : min(cbModelParam._m0[25u].w, _1502));
    float _1594;
    float _1596;
    float _1598;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1558 = fma(_665, cbModelParam._m0[21u].z, fma(_661, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _657)) + cbModelParam._m0[21u].w;
        float _1562 = fma(_665, cbModelParam._m0[22u].z, fma(_661, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _657)) + cbModelParam._m0[22u].w;
        float _1566 = fma(_665, cbModelParam._m0[23u].z, fma(_661, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _657)) + cbModelParam._m0[23u].w;
        float _1569 = fma(_607, cbModelParam._m0[21u].z, fma(_606, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _605));
        float _1572 = fma(_607, cbModelParam._m0[22u].z, fma(_606, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _605));
        float _1575 = fma(_607, cbModelParam._m0[23u].z, fma(_606, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _605));
        float _1736;
        if (_1569 > 0.0)
        {
            _1736 = abs((1.0 - _1558) / _1569);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1569 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1558 + 1.0) / _1569);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1736 = frontier_phi_25_21_ladder;
        }
        float _2004;
        if (_1572 > 0.0)
        {
            _2004 = abs((1.0 - _1562) / _1572);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1572 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1562 + 1.0) / _1572);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2004 = frontier_phi_37_32_ladder;
        }
        float _2209;
        if (_1575 > 0.0)
        {
            _2209 = abs((1.0 - _1566) / _1575);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1575 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1566 + 1.0) / _1575);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2209 = frontier_phi_46_43_ladder;
        }
        float _2211 = isnan(_2004) ? _1736 : (isnan(_1736) ? _2004 : min(_1736, _2004));
        float _2212 = isnan(_2209) ? _2211 : (isnan(_2211) ? _2209 : min(_2211, _2209));
        float _2216 = (_2212 * _1569) + _1558;
        float _2217 = (_2212 * _1572) + _1562;
        float _2218 = (_2212 * _1575) + _1566;
        float _2219 = _2212 * 9.9999997473787516355514526367188e-05;
        float _2220 = (-1.0) - _2219;
        float _2222 = _2219 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2218 > _2222) || ((_2218 < _2220) || ((_2217 > _2222) || ((_2217 < _2220) || ((_2216 < _2220) || (_2216 > _2222))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2462 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2218, cbModelParam._m0[17u].z, fma(_2217, cbModelParam._m0[17u].y, _2216 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2218, cbModelParam._m0[18u].z, fma(_2217, cbModelParam._m0[18u].y, _2216 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2218, cbModelParam._m0[19u].z, fma(_2217, cbModelParam._m0[19u].y, _2216 * cbModelParam._m0[19u].x))), _1503);
            frontier_phi_22_46_ladder = _2462.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2462.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2462.x * cbModelParam._m0[1u].z;
        }
        _1594 = frontier_phi_22_46_ladder_2;
        _1596 = frontier_phi_22_46_ladder_1;
        _1598 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1578 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_605, _606, _607), _1503);
        _1594 = _1578.x * cbModelParam._m0[1u].z;
        _1596 = _1578.y * cbModelParam._m0[1u].z;
        _1598 = _1578.z * cbModelParam._m0[1u].z;
    }
    float _1610 = ((((1.0 - _625) * ((_613 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_625 * _613)) * _597;
    float _1611 = _1610 * ((cbModelParam._m0[1u].w * (_1594 - _1494)) + _1494);
    float _1612 = _1610 * ((cbModelParam._m0[1u].w * (_1596 - _1496)) + _1496);
    float _1613 = _1610 * ((cbModelParam._m0[1u].w * (_1598 - _1498)) + _1498);
    float _1616 = fma(_1613, cbSceneParam._m0[89u].z, fma(_1612, cbSceneParam._m0[89u].y, _1611 * cbSceneParam._m0[89u].x));
    float _1619 = fma(_1613, cbSceneParam._m0[90u].z, fma(_1612, cbSceneParam._m0[90u].y, _1611 * cbSceneParam._m0[90u].x));
    float _1622 = fma(_1613, cbSceneParam._m0[91u].z, fma(_1612, cbSceneParam._m0[91u].y, _1611 * cbSceneParam._m0[91u].x));
    vec4 _1630 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_534, _535));
    float _1632 = _1630.w;
    float _1644 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1632);
    float _1645 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1632);
    float _1646 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1632);
    uvec4 _1650 = floatBitsToUint(cbInstanceData._m0[_572 + 5u]);
    uint _1652 = _1650.x * 14u;
    uint _1653 = _1652 + 13u;
    float _1660 = _597 + (-1.0);
    float _1665 = (cbLight._m0[_1653].x * _1660) + 1.0;
    float _1666 = (cbLight._m0[_1653].y * _1660) + 1.0;
    float _1667 = (cbLight._m0[_1653].z * _1660) + 1.0;
    float _1668 = (cbLight._m0[_1653].w * _1660) + 1.0;
    uint _1669 = _1652 + 5u;
    float _1675 = isnan(1.0) ? _1666 : (isnan(_1666) ? 1.0 : min(_1666, 1.0));
    uint _1679 = _1652 + 4u;
    float _1689 = isnan(1.0) ? _1665 : (isnan(_1665) ? 1.0 : min(_1665, 1.0));
    uint _1693 = _1652 | 1u;
    float _1704 = dot(vec3(cbLight._m0[_1652].xyz), vec3(_446, _447, _448));
    float _1707 = dot(vec3(cbLight._m0[_1693].xyz), vec3(_446, _447, _448));
    float _3856 = isnan(0.0) ? _1704 : (isnan(_1704) ? 0.0 : max(_1704, 0.0));
    float _3867 = isnan(0.0) ? _1707 : (isnan(_1707) ? 0.0 : max(_1707, 0.0));
    float _1712 = (isnan(1.0) ? _3856 : (isnan(_3856) ? 1.0 : min(_3856, 1.0))) * 0.3183098733425140380859375;
    float _1714 = (isnan(1.0) ? _3867 : (isnan(_3867) ? 1.0 : min(_3867, 1.0))) * 0.3183098733425140380859375;
    float _1721 = ((cbLight._m0[_1669].x * _1675) * _1714) + (((cbLight._m0[_1679].x * _1644) * _1689) * _1712);
    float _1722 = ((_1675 * cbLight._m0[_1669].y) * _1714) + (((cbLight._m0[_1679].y * _1645) * _1689) * _1712);
    float _1723 = ((_1675 * cbLight._m0[_1669].z) * _1714) + (((cbLight._m0[_1679].z * _1646) * _1689) * _1712);
    uvec4 _1728 = floatBitsToUint(cbLight._m0[_1652 + 12u]);
    bool _1730 = _1728.x == 0u;
    float _1741;
    float _1743;
    float _1745;
    if (_1730)
    {
        _1741 = _1721;
        _1743 = _1722;
        _1745 = _1723;
    }
    else
    {
        uint _1749 = _1652 + 6u;
        float _1765 = (dot(vec3(cbLight._m0[_1652 + 2u].xyz), vec3(_446, _447, _448)) * 0.5) + 0.5;
        float _1766 = _1765 * _1765;
        float _3878 = isnan(0.0) ? _1766 : (isnan(_1766) ? 0.0 : max(_1766, 0.0));
        float _1767 = isnan(1.0) ? _3878 : (isnan(_3878) ? 1.0 : min(_3878, 1.0));
        float _1768 = isnan(1.0) ? _1667 : (isnan(_1667) ? 1.0 : min(_1667, 1.0));
        _1741 = (((cbLight._m0[_1749].x * 0.3183098733425140380859375) * _1767) * _1768) + _1721;
        _1743 = (((cbLight._m0[_1749].y * 0.3183098733425140380859375) * _1767) * _1768) + _1722;
        _1745 = (((cbLight._m0[_1749].z * 0.3183098733425140380859375) * _1767) * _1768) + _1723;
    }
    bool _1748 = _1728.y == 0u;
    float _1786;
    float _1788;
    float _1790;
    if (_1748)
    {
        _1786 = _1741;
        _1788 = _1743;
        _1790 = _1745;
    }
    else
    {
        uint _1948 = _1652 + 7u;
        float _1964 = (dot(vec3(cbLight._m0[_1652 + 3u].xyz), vec3(_446, _447, _448)) * 0.5) + 0.5;
        float _1965 = _1964 * _1964;
        float _3894 = isnan(0.0) ? _1965 : (isnan(_1965) ? 0.0 : max(_1965, 0.0));
        float _1966 = isnan(1.0) ? _3894 : (isnan(_3894) ? 1.0 : min(_3894, 1.0));
        float _1967 = isnan(1.0) ? _1668 : (isnan(_1668) ? 1.0 : min(_1668, 1.0));
        _1786 = (((cbLight._m0[_1948].x * 0.3183098733425140380859375) * _1966) * _1967) + _1741;
        _1788 = (((cbLight._m0[_1948].y * 0.3183098733425140380859375) * _1966) * _1967) + _1743;
        _1790 = (((cbLight._m0[_1948].z * 0.3183098733425140380859375) * _1966) * _1967) + _1745;
    }
    uint _1793 = _1652 + 8u;
    float _1806 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1652].w)) * _449) * 0.949999988079071044921875);
    float _1807 = _1806 * _1806;
    float _1808 = cbLight._m0[_1652].x + _526;
    float _1809 = cbLight._m0[_1652].y + _527;
    float _1810 = cbLight._m0[_1652].z + _528;
    float _1814 = inversesqrt(dot(vec3(_1808, _1809, _1810), vec3(_1808, _1809, _1810)));
    float _1815 = _1814 * _1808;
    float _1816 = _1814 * _1809;
    float _1817 = _1814 * _1810;
    float _1818 = dot(vec3(_446, _447, _448), vec3(cbLight._m0[_1652].xyz));
    float _3910 = isnan(0.0) ? _1818 : (isnan(_1818) ? 0.0 : max(_1818, 0.0));
    float _1821 = isnan(1.0) ? _3910 : (isnan(_3910) ? 1.0 : min(_3910, 1.0));
    float _3921 = isnan(0.0) ? _598 : (isnan(_598) ? 0.0 : max(_598, 0.0));
    float _1822 = isnan(1.0) ? _3921 : (isnan(_3921) ? 1.0 : min(_3921, 1.0));
    float _1823 = dot(vec3(_446, _447, _448), vec3(_1815, _1816, _1817));
    float _3932 = isnan(0.0) ? _1823 : (isnan(_1823) ? 0.0 : max(_1823, 0.0));
    float _1826 = isnan(1.0) ? _3932 : (isnan(_3932) ? 1.0 : min(_3932, 1.0));
    float _1827 = dot(vec3(cbLight._m0[_1652].xyz), vec3(_1815, _1816, _1817));
    float _3943 = isnan(0.0) ? _1827 : (isnan(_1827) ? 0.0 : max(_1827, 0.0));
    float _1831 = _1807 * _1807;
    float _1835 = ((_1826 * _1826) * (_1831 + (-1.0))) + 1.0;
    float _1846 = (exp2(log2(1.0 - (isnan(1.0) ? _3943 : (isnan(_3943) ? 1.0 : min(_3943, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1847 = 1.0 - _1807;
    float _1858 = (0.5 / (((_1822 * ((_1821 * _1847) + _1807)) + 9.9999999392252902907785028219223e-09) + (((_1822 * _1847) + _1807) * _1821))) * _1821;
    float _3954 = isnan(0.0) ? _1858 : (isnan(_1858) ? 0.0 : max(_1858, 0.0));
    float _1860 = (isnan(1.0) ? _3954 : (isnan(_3954) ? 1.0 : min(_3954, 1.0))) * (_1831 / ((_1835 * _1835) * 3.141590118408203125));
    uint _1874 = _1652 + 9u;
    float _1885 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1693].w)) * _449) * 0.949999988079071044921875);
    float _1886 = _1885 * _1885;
    float _1887 = cbLight._m0[_1693].x + _526;
    float _1888 = cbLight._m0[_1693].y + _527;
    float _1889 = cbLight._m0[_1693].z + _528;
    float _1893 = inversesqrt(dot(vec3(_1887, _1888, _1889), vec3(_1887, _1888, _1889)));
    float _1894 = _1893 * _1887;
    float _1895 = _1893 * _1888;
    float _1896 = _1893 * _1889;
    float _1897 = dot(vec3(_446, _447, _448), vec3(cbLight._m0[_1693].xyz));
    float _3965 = isnan(0.0) ? _1897 : (isnan(_1897) ? 0.0 : max(_1897, 0.0));
    float _1900 = isnan(1.0) ? _3965 : (isnan(_3965) ? 1.0 : min(_3965, 1.0));
    float _1901 = dot(vec3(_446, _447, _448), vec3(_1894, _1895, _1896));
    float _3976 = isnan(0.0) ? _1901 : (isnan(_1901) ? 0.0 : max(_1901, 0.0));
    float _1904 = isnan(1.0) ? _3976 : (isnan(_3976) ? 1.0 : min(_3976, 1.0));
    float _1905 = dot(vec3(cbLight._m0[_1693].xyz), vec3(_1894, _1895, _1896));
    float _3987 = isnan(0.0) ? _1905 : (isnan(_1905) ? 0.0 : max(_1905, 0.0));
    float _1909 = _1886 * _1886;
    float _1913 = ((_1904 * _1904) * (_1909 + (-1.0))) + 1.0;
    float _1922 = (exp2(log2(1.0 - (isnan(1.0) ? _3987 : (isnan(_3987) ? 1.0 : min(_3987, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1923 = 1.0 - _1886;
    float _1933 = (0.5 / (((_1822 * ((_1900 * _1923) + _1886)) + 9.9999999392252902907785028219223e-09) + (((_1822 * _1923) + _1886) * _1900))) * _1900;
    float _3998 = isnan(0.0) ? _1933 : (isnan(_1933) ? 0.0 : max(_1933, 0.0));
    float _1935 = (isnan(1.0) ? _3998 : (isnan(_3998) ? 1.0 : min(_3998, 1.0))) * (_1909 / ((_1913 * _1913) * 3.141590118408203125));
    float _1945 = (((_1922 * cbLight._m0[_1874].x) * _1935) * _1675) + ((((cbLight._m0[_1793].x * _1644) * _1846) * _1860) * _1689);
    float _1946 = (((_1922 * cbLight._m0[_1874].y) * _1935) * _1675) + ((((cbLight._m0[_1793].y * _1645) * _1846) * _1860) * _1689);
    float _1947 = (((_1922 * cbLight._m0[_1874].z) * _1935) * _1675) + ((((cbLight._m0[_1793].z * _1646) * _1846) * _1860) * _1689);
    float _2009;
    float _2011;
    float _2013;
    if (_1730)
    {
        _2009 = _1945;
        _2011 = _1946;
        _2013 = _1947;
    }
    else
    {
        uint _2015 = _1652 + 2u;
        uint _2019 = _1652 + 10u;
        float _2033 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2015].w)) * _449) * 0.949999988079071044921875);
        float _2034 = _2033 * _2033;
        float _2035 = cbLight._m0[_2015].x + _526;
        float _2036 = cbLight._m0[_2015].y + _527;
        float _2037 = cbLight._m0[_2015].z + _528;
        float _2041 = inversesqrt(dot(vec3(_2035, _2036, _2037), vec3(_2035, _2036, _2037)));
        float _2042 = _2041 * _2035;
        float _2043 = _2041 * _2036;
        float _2044 = _2041 * _2037;
        float _2045 = dot(vec3(_446, _447, _448), vec3(cbLight._m0[_2015].xyz));
        float _4009 = isnan(0.0) ? _2045 : (isnan(_2045) ? 0.0 : max(_2045, 0.0));
        float _2048 = isnan(1.0) ? _4009 : (isnan(_4009) ? 1.0 : min(_4009, 1.0));
        float _2049 = dot(vec3(_446, _447, _448), vec3(_2042, _2043, _2044));
        float _4020 = isnan(0.0) ? _2049 : (isnan(_2049) ? 0.0 : max(_2049, 0.0));
        float _2052 = isnan(1.0) ? _4020 : (isnan(_4020) ? 1.0 : min(_4020, 1.0));
        float _2053 = dot(vec3(cbLight._m0[_2015].xyz), vec3(_2042, _2043, _2044));
        float _4031 = isnan(0.0) ? _2053 : (isnan(_2053) ? 0.0 : max(_2053, 0.0));
        float _2057 = _2034 * _2034;
        float _2061 = ((_2052 * _2052) * (_2057 + (-1.0))) + 1.0;
        float _2070 = (exp2(log2(1.0 - (isnan(1.0) ? _4031 : (isnan(_4031) ? 1.0 : min(_4031, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2071 = 1.0 - _2034;
        float _2081 = (0.5 / (((_1822 * ((_2048 * _2071) + _2034)) + 9.9999999392252902907785028219223e-09) + (((_1822 * _2071) + _2034) * _2048))) * _2048;
        float _4042 = isnan(0.0) ? _2081 : (isnan(_2081) ? 0.0 : max(_2081, 0.0));
        float _2083 = (isnan(1.0) ? _4042 : (isnan(_4042) ? 1.0 : min(_4042, 1.0))) * (_2057 / ((_2061 * _2061) * 3.141590118408203125));
        float _2084 = isnan(1.0) ? _1667 : (isnan(_1667) ? 1.0 : min(_1667, 1.0));
        _2009 = (((_2070 * cbLight._m0[_2019].x) * _2083) * _2084) + _1945;
        _2011 = (((_2070 * cbLight._m0[_2019].y) * _2083) * _2084) + _1946;
        _2013 = (((_2070 * cbLight._m0[_2019].z) * _2083) * _2084) + _1947;
    }
    float _2119;
    float _2121;
    float _2123;
    if (_1748)
    {
        _2119 = _2009;
        _2121 = _2011;
        _2123 = _2013;
    }
    else
    {
        uint _2130 = _1652 + 3u;
        uint _2134 = _1652 + 11u;
        float _2148 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2130].w)) * _449) * 0.949999988079071044921875);
        float _2149 = _2148 * _2148;
        float _2150 = cbLight._m0[_2130].x + _526;
        float _2151 = cbLight._m0[_2130].y + _527;
        float _2152 = cbLight._m0[_2130].z + _528;
        float _2156 = inversesqrt(dot(vec3(_2150, _2151, _2152), vec3(_2150, _2151, _2152)));
        float _2157 = _2156 * _2150;
        float _2158 = _2156 * _2151;
        float _2159 = _2156 * _2152;
        float _2160 = dot(vec3(_446, _447, _448), vec3(cbLight._m0[_2130].xyz));
        float _4058 = isnan(0.0) ? _2160 : (isnan(_2160) ? 0.0 : max(_2160, 0.0));
        float _2163 = isnan(1.0) ? _4058 : (isnan(_4058) ? 1.0 : min(_4058, 1.0));
        float _2164 = dot(vec3(_446, _447, _448), vec3(_2157, _2158, _2159));
        float _4069 = isnan(0.0) ? _2164 : (isnan(_2164) ? 0.0 : max(_2164, 0.0));
        float _2167 = isnan(1.0) ? _4069 : (isnan(_4069) ? 1.0 : min(_4069, 1.0));
        float _2168 = dot(vec3(cbLight._m0[_2130].xyz), vec3(_2157, _2158, _2159));
        float _4080 = isnan(0.0) ? _2168 : (isnan(_2168) ? 0.0 : max(_2168, 0.0));
        float _2172 = _2149 * _2149;
        float _2176 = ((_2167 * _2167) * (_2172 + (-1.0))) + 1.0;
        float _2185 = (exp2(log2(1.0 - (isnan(1.0) ? _4080 : (isnan(_4080) ? 1.0 : min(_4080, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2186 = 1.0 - _2149;
        float _2196 = (0.5 / (((_1822 * ((_2163 * _2186) + _2149)) + 9.9999999392252902907785028219223e-09) + (((_1822 * _2186) + _2149) * _2163))) * _2163;
        float _4091 = isnan(0.0) ? _2196 : (isnan(_2196) ? 0.0 : max(_2196, 0.0));
        float _2198 = (isnan(1.0) ? _4091 : (isnan(_4091) ? 1.0 : min(_4091, 1.0))) * (_2172 / ((_2176 * _2176) * 3.141590118408203125));
        float _2199 = isnan(1.0) ? _1668 : (isnan(_1668) ? 1.0 : min(_1668, 1.0));
        _2119 = (((_2185 * cbLight._m0[_2134].x) * _2198) * _2199) + _2009;
        _2121 = (((_2185 * cbLight._m0[_2134].y) * _2198) * _2199) + _2011;
        _2123 = (((_2185 * cbLight._m0[_2134].z) * _2198) * _2199) + _2013;
    }
    float _2334;
    float _2336;
    float _2338;
    float _2340;
    float _2342;
    float _2344;
    if (_1650.y == 0u)
    {
        float _2274 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2275 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2274;
        float _2276 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2274;
        float _2277 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2274;
        uvec4 _2289 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2290 = _2289.x;
        uint _2301 = uint((float(_2289.y) * floor(float(uint(cbSceneParam._m0[85u].y * _535) / _2290))) + floor(float(uint(cbSceneParam._m0[85u].x * _534) / _2290)));
        float _2311 = (log2(_2277 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2312 = isnan(0.0) ? _2311 : (isnan(_2311) ? 0.0 : max(_2311, 0.0));
        uint _2315 = uint(isnan(14.0) ? _2312 : (isnan(_2312) ? 14.0 : min(_2312, 14.0)));
        uvec4 _2320 = texelFetch(g_lightClusterGridBuffer, int(((_2315 << 2u) + (_2301 << 6u)) >> 2u));
        uint _2321 = _2320.x;
        uint _2322 = _2289.z;
        float _2467;
        float _2469;
        float _2471;
        float _2473;
        float _2475;
        float _2477;
        if (((((1u << ((_2322 >> 4u) & 15u)) + 4294967295u) & _2321) == 0u) || ((_2322 & 240u) == 0u))
        {
            _2467 = 0.0;
            _2469 = 0.0;
            _2471 = 0.0;
            _2473 = 0.0;
            _2475 = 0.0;
            _2477 = 0.0;
        }
        else
        {
            float _2468;
            float _2470;
            float _2472;
            float _2474;
            float _2476;
            float _2478;
            float _2620 = 0.0;
            float _2621 = 0.0;
            float _2622 = 0.0;
            float _2623 = 0.0;
            float _2624 = 0.0;
            float _2625 = 0.0;
            uint _2626 = 0u;
            uint _2635;
            bool _2636;
            for (;;)
            {
                _2635 = texelFetch(g_lightClassification, int((((_2315 << 5u) + (_2301 << 9u)) + (_2626 << 2u)) >> 2u)).x;
                _2636 = _2635 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2636)
                {
                    frontier_phi_61_pred = _2620;
                    frontier_phi_61_pred_1 = _2625;
                    frontier_phi_61_pred_2 = _2624;
                    frontier_phi_61_pred_3 = _2623;
                    frontier_phi_61_pred_4 = _2622;
                    frontier_phi_61_pred_5 = _2621;
                }
                else
                {
                    float _2744;
                    float _2745;
                    float _2746;
                    float _2747;
                    float _2748;
                    float _2749;
                    uint _2750;
                    _2744 = _2620;
                    _2745 = _2621;
                    _2746 = _2622;
                    _2747 = _2623;
                    _2748 = _2624;
                    _2749 = _2625;
                    _2750 = _2635;
                    float _2676;
                    float _2677;
                    float _2678;
                    float _2679;
                    float _2680;
                    float _2681;
                    for (;;)
                    {
                        uint _2754 = uint(findLSB(_2750)) + (_2626 << 5u);
                        uint _2751 = (_2750 + 4294967295u) & _2750;
                        uint _2756 = _2754 * 48u;
                        vec4 _2770 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2756)).x, texelFetch(g_PointLightRenderingBuffer, int(_2756 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2756 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2756 + 3u)).x));
                        uint _2776 = (_2754 * 48u) + 4u;
                        vec4 _2789 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2776)).x, texelFetch(g_PointLightRenderingBuffer, int(_2776 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2776 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2776 + 3u)).x));
                        uint _2795 = (_2754 * 48u) + 8u;
                        vec3 _2806 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2795)).x, texelFetch(g_PointLightRenderingBuffer, int(_2795 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2795 + 2u)).x));
                        float _2810 = _2770.x - _2275;
                        float _2811 = _2770.y - _2276;
                        float _2812 = _2770.z - _2277;
                        float _2813 = dot(vec3(_2810, _2811, _2812), vec3(_2810, _2811, _2812));
                        float _2816 = inversesqrt(_2813);
                        float _2817 = _2816 * _2810;
                        float _2818 = _2816 * _2811;
                        float _2819 = _2816 * _2812;
                        float _2820 = dot(vec3(_553, _556, _559), vec3(_2817, _2818, _2819));
                        float _2825 = 1.0 - (_2813 * _2770.w);
                        float _4117 = isnan(0.0) ? _2825 : (isnan(_2825) ? 0.0 : max(_2825, 0.0));
                        float _2826 = isnan(1.0) ? _4117 : (isnan(_4117) ? 1.0 : min(_4117, 1.0));
                        float _2827 = sqrt(_2813) * _2789.w;
                        float _2830 = 1.39999997615814208984375 / (_2827 + 1.39999997615814208984375);
                        float _2831 = _2830 * _2830;
                        float _2834 = ((1.0 - _2831) * _2820) + _2831;
                        float _2837 = _2827 * _2827;
                        float _2841 = ((isnan(0.0) ? _2834 : (isnan(_2834) ? 0.0 : max(_2834, 0.0))) * _2826) / ((_2837 * 0.699999988079071044921875) + 1.0);
                        float _2845 = (-0.0) - _2275;
                        float _2846 = (-0.0) - _2276;
                        float _2847 = (-0.0) - _2277;
                        float _2851 = inversesqrt(dot(vec3(_2845, _2846, _2847), vec3(_2845, _2846, _2847)));
                        float _2852 = _2851 * _2845;
                        float _2853 = _2851 * _2846;
                        float _2854 = _2851 * _2847;
                        float _2862 = exp2(log2(1.0 / ((_2837 * 3.5) + 5.0)) * 0.25);
                        float _2863 = 1.0 - _613;
                        float _2870 = sqrt(1.0 - ((1.0 - (_2863 * _2863)) * (1.0 - (_2862 * _2862))));
                        float _2871 = _2870 * _2870;
                        float _2872 = _2871 * _2871;
                        float _2873 = _2852 + _2817;
                        float _2874 = _2853 + _2818;
                        float _2875 = _2854 + _2819;
                        float _2879 = inversesqrt(dot(vec3(_2873, _2874, _2875), vec3(_2873, _2874, _2875)));
                        float _2883 = dot(vec3(_553, _556, _559), vec3(_2852, _2853, _2854));
                        float _4133 = isnan(0.0) ? _2883 : (isnan(_2883) ? 0.0 : max(_2883, 0.0));
                        float _2886 = isnan(1.0) ? _4133 : (isnan(_4133) ? 1.0 : min(_4133, 1.0));
                        float _2887 = dot(vec3(_553, _556, _559), vec3(_2879 * _2873, _2879 * _2874, _2879 * _2875));
                        float _4144 = isnan(0.0) ? _2887 : (isnan(_2887) ? 0.0 : max(_2887, 0.0));
                        float _2890 = isnan(1.0) ? _4144 : (isnan(_4144) ? 1.0 : min(_4144, 1.0));
                        float _2894 = ((_2890 * _2890) * (_2872 + (-1.0))) + 1.0;
                        float _2895 = _2830 * _2871;
                        float _2896 = _2895 * _2895;
                        float _2899 = ((1.0 - _2896) * _2820) + _2896;
                        float _4155 = isnan(0.0) ? _2899 : (isnan(_2899) ? 0.0 : max(_2899, 0.0));
                        float _2900 = isnan(1.0) ? _4155 : (isnan(_4155) ? 1.0 : min(_4155, 1.0));
                        float _2901 = 1.0 - _2871;
                        float _2911 = (0.5 / (((_2900 * ((_2886 * _2901) + _2871)) + 9.9999999392252902907785028219223e-09) + (((_2900 * _2901) + _2871) * _2886))) * _2900;
                        float _4166 = isnan(0.0) ? _2911 : (isnan(_2911) ? 0.0 : max(_2911, 0.0));
                        float _2922 = (((_2872 * 3.1415927410125732421875) * (isnan(1.0) ? _4166 : (isnan(_4166) ? 1.0 : min(_4166, 1.0)))) / ((_2894 * _2894) * ((_2837 * 2.1991131305694580078125) + 3.141590118408203125))) * _2826;
                        _2679 = (_2841 * _2789.x) + _2747;
                        _2680 = (_2841 * _2789.y) + _2748;
                        _2681 = (_2841 * _2789.z) + _2749;
                        _2676 = (_2922 * _2806.x) + _2744;
                        _2677 = (_2922 * _2806.y) + _2745;
                        _2678 = (_2922 * _2806.z) + _2746;
                        if (_2751 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2744 = _2676;
                            _2745 = _2677;
                            _2746 = _2678;
                            _2747 = _2679;
                            _2748 = _2680;
                            _2749 = _2681;
                            _2750 = _2751;
                        }
                    }
                    frontier_phi_61_pred = _2676;
                    frontier_phi_61_pred_1 = _2681;
                    frontier_phi_61_pred_2 = _2680;
                    frontier_phi_61_pred_3 = _2679;
                    frontier_phi_61_pred_4 = _2678;
                    frontier_phi_61_pred_5 = _2677;
                }
                _2468 = frontier_phi_61_pred;
                _2478 = frontier_phi_61_pred_1;
                _2476 = frontier_phi_61_pred_2;
                _2474 = frontier_phi_61_pred_3;
                _2472 = frontier_phi_61_pred_4;
                _2470 = frontier_phi_61_pred_5;
                uint _2627 = _2626 + 1u;
                if (_2627 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2620 = _2468;
                    _2621 = _2470;
                    _2622 = _2472;
                    _2623 = _2474;
                    _2624 = _2476;
                    _2625 = _2478;
                    _2626 = _2627;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2467 = _2468;
            _2469 = _2470;
            _2471 = _2472;
            _2473 = _2474;
            _2475 = _2476;
            _2477 = _2478;
        }
        uvec4 _2481 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2482 = _2481.z;
        uint _2484 = (_2482 >> 8u) & 15u;
        float _2588;
        float _2590;
        float _2592;
        float _2594;
        float _2596;
        float _2598;
        if (((4294967295u << _2484) & _2321) == 0u)
        {
            _2588 = _2467;
            _2590 = _2469;
            _2592 = _2471;
            _2594 = _2473;
            _2596 = _2475;
            _2598 = _2477;
        }
        else
        {
            float _2613 = inversesqrt(dot(vec3(_2275, _2276, _2277), vec3(_2275, _2276, _2277)));
            float _2614 = _2613 * _2275;
            float _2615 = _2613 * _2276;
            float _2616 = _2613 * _2277;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2484 < ((_2482 >> 12u) & 15u))
            {
                float _2589;
                float _2591;
                float _2593;
                float _2595;
                float _2597;
                float _2599;
                float _2727 = _2467;
                float _2728 = _2469;
                float _2729 = _2471;
                float _2730 = _2473;
                float _2731 = _2475;
                float _2732 = _2477;
                uint _2733 = _2484;
                uint _2742;
                bool _2743;
                for (;;)
                {
                    _2742 = texelFetch(g_lightClassification, int((((_2315 << 5u) + (_2301 << 9u)) + (_2733 << 2u)) >> 2u)).x;
                    _2743 = _2742 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2743)
                    {
                        frontier_phi_67_pred = _2730;
                        frontier_phi_67_pred_1 = _2731;
                        frontier_phi_67_pred_2 = _2732;
                        frontier_phi_67_pred_3 = _2729;
                        frontier_phi_67_pred_4 = _2728;
                        frontier_phi_67_pred_5 = _2727;
                    }
                    else
                    {
                        float _2927;
                        float _2928;
                        float _2929;
                        float _2930;
                        float _2931;
                        float _2932;
                        float _3222;
                        float _3223;
                        float _3224;
                        float _3225;
                        float _3226;
                        float _3227;
                        float _2940 = _2727;
                        float _2941 = _2728;
                        float _2942 = _2729;
                        float _2943 = _2730;
                        float _2944 = _2731;
                        float _2945 = _2732;
                        uint _2946 = _2742;
                        uint _2947;
                        vec4 _2972;
                        float _2973;
                        vec4 _2988;
                        vec3 _3000;
                        vec4 _3015;
                        vec4 _3031;
                        float _3078;
                        bool _3079;
                        for (;;)
                        {
                            uint _2957 = ((_2733 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2946));
                            _2947 = (_2946 + 4294967295u) & _2946;
                            uint _2959 = _2957 * 40u;
                            _2972 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2959)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2959 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2959 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2959 + 3u)).x));
                            _2973 = _2972.w;
                            uint _2975 = (_2957 * 40u) + 4u;
                            _2988 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2975)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2975 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2975 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2975 + 3u)).x));
                            uint _2990 = (_2957 * 40u) + 8u;
                            _3000 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2990)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2990 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2990 + 2u)).x));
                            uint _3002 = (_2957 * 40u) + 16u;
                            _3015 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3002)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3002 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3002 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3002 + 3u)).x));
                            uint _3018 = (_2957 * 40u) + 20u;
                            _3031 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3018)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3018 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3018 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3018 + 3u)).x));
                            uint _3034 = (_2957 * 40u) + 24u;
                            vec4 _3047 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3034)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3034 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3034 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3034 + 3u)).x));
                            uint _3053 = (_2957 * 40u) + 28u;
                            vec4 _3066 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3053)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3053 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3053 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3053 + 3u)).x));
                            _3078 = fma(_2277, _3066.z, fma(_2276, _3066.y, _3066.x * _2275)) + _3066.w;
                            _3079 = !((fma(_2277, _3047.z, fma(_2276, _3047.y, _3047.x * _2275)) + _3047.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3079)
                            {
                                float _3106 = _2972.x - _2275;
                                float _3107 = _2972.y - _2276;
                                float _3108 = _2972.z - _2277;
                                float _3109 = dot(vec3(_3106, _3107, _3108), vec3(_3106, _3107, _3108));
                                float _3112 = inversesqrt(_3109);
                                float _3113 = _3112 * _3106;
                                float _3114 = _3112 * _3107;
                                float _3115 = _3112 * _3108;
                                float _3119 = 1.0 - (_3109 / (_2973 * _2973));
                                float _4177 = isnan(0.0) ? _3119 : (isnan(_3119) ? 0.0 : max(_3119, 0.0));
                                float _3120 = isnan(1.0) ? _4177 : (isnan(_4177) ? 1.0 : min(_4177, 1.0));
                                float _3124 = sqrt(_3109) * _2988.w;
                                float _3126 = 1.39999997615814208984375 / (_3124 + 1.39999997615814208984375);
                                float _3127 = _3126 * _3126;
                                float _3130 = ((1.0 - _3127) * dot(vec3(_3113, _3114, _3115), vec3(_553, _556, _559))) + _3127;
                                float _3133 = _3124 * _3124;
                                float _3137 = (fma(_2277, _3015.z, fma(_2276, _3015.y, _3015.x * _2275)) + _3015.w) / _3078;
                                float _3138 = (fma(_2277, _3031.z, fma(_2276, _3031.y, _3031.x * _2275)) + _3031.w) / _3078;
                                float _3142 = 1.0 - dot(vec2(_3137, _3138), vec2(_3137, _3138));
                                float _4193 = isnan(0.0) ? _3142 : (isnan(_3142) ? 0.0 : max(_3142, 0.0));
                                float _3143 = isnan(1.0) ? _4193 : (isnan(_4193) ? 1.0 : min(_4193, 1.0));
                                float _3144 = _3143 * (((isnan(0.0) ? _3130 : (isnan(_3130) ? 0.0 : max(_3130, 0.0))) * _3120) / ((_3133 * 0.699999988079071044921875) + 1.0));
                                float _3156 = exp2(log2(1.0 / ((_3133 * 3.5) + 5.0)) * 0.25);
                                float _3157 = 1.0 - _613;
                                float _3164 = sqrt(1.0 - ((1.0 - (_3157 * _3157)) * (1.0 - (_3156 * _3156))));
                                float _3165 = _3164 * _3164;
                                float _3166 = _3165 * _3165;
                                float _3167 = _3113 - _2614;
                                float _3168 = _3114 - _2615;
                                float _3169 = _3115 - _2616;
                                float _3173 = inversesqrt(dot(vec3(_3167, _3168, _3169), vec3(_3167, _3168, _3169)));
                                float _3177 = dot(vec3(_553, _556, _559), vec3((-0.0) - _2614, (-0.0) - _2615, (-0.0) - _2616));
                                float _4204 = isnan(0.0) ? _3177 : (isnan(_3177) ? 0.0 : max(_3177, 0.0));
                                float _3180 = isnan(1.0) ? _4204 : (isnan(_4204) ? 1.0 : min(_4204, 1.0));
                                float _3181 = dot(vec3(_553, _556, _559), vec3(_3173 * _3167, _3173 * _3168, _3173 * _3169));
                                float _4215 = isnan(0.0) ? _3181 : (isnan(_3181) ? 0.0 : max(_3181, 0.0));
                                float _3184 = isnan(1.0) ? _4215 : (isnan(_4215) ? 1.0 : min(_4215, 1.0));
                                float _3188 = ((_3184 * _3184) * (_3166 + (-1.0))) + 1.0;
                                float _3189 = _3126 * _3165;
                                float _3190 = _3189 * _3189;
                                float _3196 = ((1.0 - _3190) * dot(vec3(_553, _556, _559), vec3(_3113, _3114, _3115))) + _3190;
                                float _4226 = isnan(0.0) ? _3196 : (isnan(_3196) ? 0.0 : max(_3196, 0.0));
                                float _3197 = isnan(1.0) ? _4226 : (isnan(_4226) ? 1.0 : min(_4226, 1.0));
                                float _3198 = 1.0 - _3165;
                                float _3208 = (0.5 / (((_3197 * ((_3180 * _3198) + _3165)) + 9.9999999392252902907785028219223e-09) + (((_3197 * _3198) + _3165) * _3180))) * _3197;
                                float _4237 = isnan(0.0) ? _3208 : (isnan(_3208) ? 0.0 : max(_3208, 0.0));
                                float _3218 = (_3143 * _3120) * (((_3166 * 3.1415927410125732421875) * (isnan(1.0) ? _4237 : (isnan(_4237) ? 1.0 : min(_4237, 1.0)))) / ((_3188 * _3188) * ((_3133 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3218 * _3000.x;
                                frontier_phi_73_pred_1 = _3218 * _3000.y;
                                frontier_phi_73_pred_2 = _3144 * _2988.z;
                                frontier_phi_73_pred_3 = _3144 * _2988.y;
                                frontier_phi_73_pred_4 = _3144 * _2988.x;
                                frontier_phi_73_pred_5 = _3218 * _3000.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3222 = frontier_phi_73_pred;
                            _3223 = frontier_phi_73_pred_1;
                            _3227 = frontier_phi_73_pred_2;
                            _3226 = frontier_phi_73_pred_3;
                            _3225 = frontier_phi_73_pred_4;
                            _3224 = frontier_phi_73_pred_5;
                            _2930 = _3225 + _2943;
                            _2931 = _3226 + _2944;
                            _2932 = _3227 + _2945;
                            _2927 = _3222 + _2940;
                            _2928 = _3223 + _2941;
                            _2929 = _3224 + _2942;
                            if (_2947 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2940 = _2927;
                                _2941 = _2928;
                                _2942 = _2929;
                                _2943 = _2930;
                                _2944 = _2931;
                                _2945 = _2932;
                                _2946 = _2947;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _2930;
                        frontier_phi_67_pred_1 = _2931;
                        frontier_phi_67_pred_2 = _2932;
                        frontier_phi_67_pred_3 = _2929;
                        frontier_phi_67_pred_4 = _2928;
                        frontier_phi_67_pred_5 = _2927;
                    }
                    _2595 = frontier_phi_67_pred;
                    _2597 = frontier_phi_67_pred_1;
                    _2599 = frontier_phi_67_pred_2;
                    _2593 = frontier_phi_67_pred_3;
                    _2591 = frontier_phi_67_pred_4;
                    _2589 = frontier_phi_67_pred_5;
                    uint _2734 = _2733 + 1u;
                    if (_2734 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2727 = _2589;
                        _2728 = _2591;
                        _2729 = _2593;
                        _2730 = _2595;
                        _2731 = _2597;
                        _2732 = _2599;
                        _2733 = _2734;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2597;
                frontier_phi_55_56_ladder_1 = _2599;
                frontier_phi_55_56_ladder_2 = _2595;
                frontier_phi_55_56_ladder_3 = _2593;
                frontier_phi_55_56_ladder_4 = _2591;
                frontier_phi_55_56_ladder_5 = _2589;
            }
            else
            {
                frontier_phi_55_56_ladder = _2475;
                frontier_phi_55_56_ladder_1 = _2477;
                frontier_phi_55_56_ladder_2 = _2473;
                frontier_phi_55_56_ladder_3 = _2471;
                frontier_phi_55_56_ladder_4 = _2469;
                frontier_phi_55_56_ladder_5 = _2467;
            }
            _2588 = frontier_phi_55_56_ladder_5;
            _2590 = frontier_phi_55_56_ladder_4;
            _2592 = frontier_phi_55_56_ladder_3;
            _2594 = frontier_phi_55_56_ladder_2;
            _2596 = frontier_phi_55_56_ladder;
            _2598 = frontier_phi_55_56_ladder_1;
        }
        float _2603 = isnan(1.0) ? _597 : (isnan(_597) ? 1.0 : min(_597, 1.0));
        _2334 = (_2603 * _2594) + _1786;
        _2336 = (_2603 * _2596) + _1788;
        _2338 = (_2603 * _2598) + _1790;
        _2340 = ((_2588 * 0.039999999105930328369140625) * _2603) + _2119;
        _2342 = ((_2590 * 0.039999999105930328369140625) * _2603) + _2121;
        _2344 = ((_2592 * 0.039999999105930328369140625) * _2603) + _2123;
    }
    else
    {
        _2334 = _1786;
        _2336 = _1788;
        _2338 = _1790;
        _2340 = _2119;
        _2342 = _2121;
        _2344 = _2123;
    }
    uint _2350 = _573 + uint(cbMatDynParam._m0[0u].w);
    float _2356 = cbMtdParam._m0[13u].y * cbMtdParam._m0[15u].y;
    float _2362 = (((((_2356 * cbMtdParam._m0[10u].x) * _312.x) * _335) * (((1.0 - _389) * cbMtdParam._m0[16u].z) + _389)) * _427) * cbInstanceData._m0[_2350].x;
    float _2368 = (((((_2356 * cbMtdParam._m0[10u].y) * _312.y) * _335) * (((1.0 - _391) * cbMtdParam._m0[16u].z) + _391)) * _427) * cbInstanceData._m0[_2350].y;
    float _2374 = (((((_2356 * cbMtdParam._m0[10u].z) * _312.z) * _335) * (((1.0 - _393) * cbMtdParam._m0[16u].z) + _393)) * _427) * cbInstanceData._m0[_2350].z;
    float _4253 = isnan(0.0) ? _583 : (isnan(_583) ? 0.0 : max(_583, 0.0));
    float _4264 = isnan(0.0) ? _584 : (isnan(_584) ? 0.0 : max(_584, 0.0));
    float _4275 = isnan(0.0) ? _585 : (isnan(_585) ? 0.0 : max(_585, 0.0));
    float _2391 = (((isnan(1.0) ? _4253 : (isnan(_4253) ? 1.0 : min(_4253, 1.0))) * (_2334 + ((isnan(0.0) ? _1324 : (isnan(_1324) ? 0.0 : max(_1324, 0.0))) * _597))) + ((_2340 + ((isnan(0.0) ? _1616 : (isnan(_1616) ? 0.0 : max(_1616, 0.0))) * _1403)) * cbPerFrame._m0[3u].x)) + _2362;
    float _2393 = (_2368 + ((_2342 + ((isnan(0.0) ? _1619 : (isnan(_1619) ? 0.0 : max(_1619, 0.0))) * _1403)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4264 : (isnan(_4264) ? 1.0 : min(_4264, 1.0))) * (_2336 + ((isnan(0.0) ? _1327 : (isnan(_1327) ? 0.0 : max(_1327, 0.0))) * _597)));
    float _2395 = (_2374 + ((_2344 + ((isnan(0.0) ? _1622 : (isnan(_1622) ? 0.0 : max(_1622, 0.0))) * _1403)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4275 : (isnan(_4275) ? 1.0 : min(_4275, 1.0))) * (_2338 + ((isnan(0.0) ? _1330 : (isnan(_1330) ? 0.0 : max(_1330, 0.0))) * _597)));
    float _4301 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2408 = isnan(1.0) ? _4301 : (isnan(_4301) ? 1.0 : min(_4301, 1.0));
    uint _2409 = _572 + 6u;
    float _2417 = _534 / cbSceneParam._m0[86u].x;
    float _2418 = _535 / cbSceneParam._m0[86u].y;
    vec4 _2432 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2417, _2418, (log2((isnan(cbSceneParam._m0[77u].w) ? _468 : (isnan(_468) ? cbSceneParam._m0[77u].w : min(_468, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2434 = _2432.x;
    float _2435 = _2432.y;
    float _2436 = _2432.z;
    float _2437 = _2432.w;
    float _2529;
    float _2531;
    float _2533;
    float _2535;
    if (_468 > cbSceneParam._m0[78u].w)
    {
        float _2492 = isnan(_468) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _468 : min(cbSceneParam._m0[80u].w, _468));
        float _2493 = _2492 / _468;
        float _2504 = _2493 * _519;
        float _2505 = _520 * _2493;
        float _2506 = (-0.0) - _2505;
        float _2507 = _2493 * _521;
        float _2509 = (cbSceneParam._m0[77u].w * _2506) / _2492;
        float _2510 = _2509 + cbSceneParam._m0[79u].w;
        float _2511 = cbSceneParam._m0[79u].w - _2505;
        float _2517 = sqrt(((_2504 * _2504) + (_2505 * _2505)) + (_2507 * _2507));
        float _2520 = (1.0 - (cbSceneParam._m0[77u].w / _2492)) * _2517;
        float _2525 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2527 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2689;
        if (abs((_2506 - _2509) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2689 = ((((_2510 > 0.0) ? exp2(_2525 * _2510) : (2.0 - exp2(_2527 * _2510))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2520;
        }
        else
        {
            float _2649 = 1.0 / cbSceneParam._m0[80u].x;
            float _2650 = isnan(_2511) ? _2510 : (isnan(_2510) ? _2511 : max(_2510, _2511));
            float _2651 = isnan(_2511) ? _2510 : (isnan(_2510) ? _2511 : min(_2510, _2511));
            float _2660 = isnan(0.0) ? _2650 : (isnan(_2650) ? 0.0 : min(_2650, 0.0));
            float _2661 = isnan(0.0) ? _2651 : (isnan(_2651) ? 0.0 : min(_2651, 0.0));
            _2689 = ((abs(_2517 / _2506) * cbSceneParam._m0[80u].y) * ((((_2660 - _2661) * 2.0) - ((exp2(_2525 * (isnan(0.0) ? _2650 : (isnan(_2650) ? 0.0 : max(_2650, 0.0)))) - exp2(_2525 * (isnan(0.0) ? _2651 : (isnan(_2651) ? 0.0 : max(_2651, 0.0))))) * _2649)) - ((exp2(_2527 * _2660) - exp2(_2527 * _2661)) * _2649))) + (_2520 * cbSceneParam._m0[80u].z);
        }
        vec4 _2691 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2417, _2418, 1.0), 0.0);
        float _2700 = exp2((_2689 * (-1.44269502162933349609375)) * (1.0 - _2691.w));
        float _2701 = log2(_2700);
        float _2717 = log2(_2437);
        _2529 = (exp2(_2717 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2701 * cbSceneParam._m0[78u].x)) * _2691.x) / cbSceneParam._m0[78u].x)) + _2434;
        _2531 = (exp2(_2717 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2701 * cbSceneParam._m0[78u].y)) * _2691.y) / cbSceneParam._m0[78u].y)) + _2435;
        _2533 = (exp2(_2717 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2701 * cbSceneParam._m0[78u].z)) * _2691.z) / cbSceneParam._m0[78u].z)) + _2436;
        _2535 = _2700 * _2437;
    }
    else
    {
        _2529 = _2434;
        _2531 = _2435;
        _2533 = _2436;
        _2535 = _2437;
    }
    float _2547 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2548 = _2547 == 3.0;
    float _2549 = log2(_2535);
    float _2553 = exp2(_2549 * cbSceneParam._m0[78u].x);
    float _2554 = exp2(_2549 * cbSceneParam._m0[78u].y);
    float _2555 = exp2(_2549 * cbSceneParam._m0[78u].z);
    float _2556 = _2553 * (isnan(0.0) ? _2391 : (isnan(_2391) ? 0.0 : max(_2391, 0.0)));
    float _2557 = _2554 * (isnan(0.0) ? _2393 : (isnan(_2393) ? 0.0 : max(_2393, 0.0)));
    float _2558 = _2555 * (isnan(0.0) ? _2395 : (isnan(_2395) ? 0.0 : max(_2395, 0.0)));
    float _2567 = (_2547 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2567 * (_2548 ? _2556 : (_2556 + (cbSceneParam._m0[72u].w * _2529)));
    SV_Target.y = _2567 * (_2548 ? _2557 : (_2557 + (cbSceneParam._m0[72u].w * _2531)));
    SV_Target.z = _2567 * (_2548 ? _2558 : (_2558 + (cbSceneParam._m0[72u].w * _2533)));
    SV_Target.w = cbInstanceData._m0[_2409].w;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2362) * _2408) * _2553) * _2567;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2368) * _2408) * _2554) * _2567;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2374) * _2408) * _2555) * _2567;
    SV_Target_1.w = cbInstanceData._m0[_2409].w;
}


