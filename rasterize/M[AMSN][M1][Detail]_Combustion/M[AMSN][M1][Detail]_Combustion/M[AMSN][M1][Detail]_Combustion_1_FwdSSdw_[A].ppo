#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[18];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_M1_Detail_Combustion_snp_0_Texture2D_10;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_M1_Detail_Combustion_snp_0_Texture2D_12;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_M1_Detail_Combustion_snp_0_Texture2D_13;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_M1_Detail_Combustion_snp_0_Texture2D_20;
layout(set = 0, binding = 5) uniform texture2D M_AMSN_M1_Detail_Combustion_snp_0_Texture2D_23;
layout(set = 0, binding = 6) uniform texture2D M_AMSN_M1_Detail_Combustion_snp_0_Texture2D_4;
layout(set = 0, binding = 7) uniform texture2D M_AMSN_M1_Detail_Combustion_snp_0_Texture2D_7;
layout(set = 0, binding = 8) uniform texture2D M_AMSN_M1_Detail_Combustion_snp_0_Texture2D_9;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in float TEXCOORD;
layout(location = 4, component = 1) in float TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 4, component = 2) in float TEXCOORD_6;
layout(location = 4, component = 3) in float TEXCOORD_7;
layout(location = 6) in float TEXCOORD_8;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1111;
float _3551;
float _3552;
float _3553;
float _3554;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _202 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _203 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _204 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _210 = inversesqrt(dot(vec3(_202, _203, _204), vec3(_202, _203, _204)));
    float _217 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _224 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _246 = texture(sampler2D(M_AMSN_M1_Detail_Combustion_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1) + cbTextureTilingScale._m0[2u].w));
    float _252 = _246.x * cbMtdParam._m0[9u].x;
    float _253 = _246.y * cbMtdParam._m0[9u].y;
    float _254 = _246.z * cbMtdParam._m0[9u].z;
    vec4 _278 = texture(sampler2D(M_AMSN_M1_Detail_Combustion_snp_0_Texture2D_20, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD_1) + cbTextureTilingScale._m0[4u].w));
    float _309 = (TEXCOORD_6 - ((cbMtdParam._m0[15u].w * (1.0 - TEXCOORD_6)) * (texture(sampler2D(M_AMSN_M1_Detail_Combustion_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD_1) + cbTextureTilingScale._m0[8u].w)).x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[15u].z + 1.0);
    float _3563 = isnan(0.0) ? _309 : (isnan(_309) ? 0.0 : max(_309, 0.0));
    float _310 = isnan(1.0) ? _3563 : (isnan(_3563) ? 1.0 : min(_3563, 1.0));
    float _317 = (_310 * ((_278.x * cbMtdParam._m0[12u].x) - _252)) + _252;
    float _318 = (_310 * ((_278.y * cbMtdParam._m0[12u].y) - _253)) + _253;
    float _319 = (_310 * ((_278.z * cbMtdParam._m0[12u].z) - _254)) + _254;
    vec4 _331 = texture(sampler2D(M_AMSN_M1_Detail_Combustion_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1) + cbTextureTilingScale._m0[1u].w));
    vec4 _354 = texture(sampler2D(M_AMSN_M1_Detail_Combustion_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD_1) + cbTextureTilingScale._m0[7u].w));
    float _358 = _354.z;
    float _361 = (_354.x * 2.0) + (-1.0);
    float _362 = (_354.y * 2.0) + (-1.0);
    float _363 = dot(vec2(_361, _362), vec2(_361, _362));
    float _3574 = isnan(0.0) ? _363 : (isnan(_363) ? 0.0 : max(_363, 0.0));
    float _368 = sqrt(1.0 - (isnan(1.0) ? _3574 : (isnan(_3574) ? 1.0 : min(_3574, 1.0))));
    float _376 = (((_331.z - _358) * TEXCOORD_6) * cbMtdParam._m0[16u].x) + _358;
    float _396 = (cbMtdParam._m0[17u].z * cbPerFrame._m0[22u].x) + TEXCOORD;
    float _397 = (cbMtdParam._m0[17u].w * cbPerFrame._m0[22u].x) + TEXCOORD_1;
    vec4 _410 = texture(sampler2D(M_AMSN_M1_Detail_Combustion_snp_0_Texture2D_4, SS_DiffuseMap), vec2((_396 * cbTextureTilingScale._m0[6u].x) + cbTextureTilingScale._m0[6u].z, (_397 * cbTextureTilingScale._m0[6u].y) + cbTextureTilingScale._m0[6u].w));
    float _424 = abs((fract(cbMtdParam._m0[13u].z * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _3585 = isnan(0.0) ? _424 : (isnan(_424) ? 0.0 : max(_424, 0.0));
    float _425 = isnan(1.0) ? _3585 : (isnan(_3585) ? 1.0 : min(_3585, 1.0));
    float _433 = (((_425 * _425) * (3.0 - (_425 * 2.0))) * cbMtdParam._m0[14u].x) - cbMtdParam._m0[14u].y;
    float _442 = cbMtdParam._m0[14u].z * cbPerFrame._m0[22u].x;
    float _450 = abs((fract(cbMtdParam._m0[14u].w * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _3596 = isnan(0.0) ? _450 : (isnan(_450) ? 0.0 : max(_450, 0.0));
    float _451 = isnan(1.0) ? _3596 : (isnan(_3596) ? 1.0 : min(_3596, 1.0));
    float _455 = (_451 * _451) * (3.0 - (_451 * 2.0));
    float _456 = _455 * cbMtdParam._m0[17u].x;
    float _457 = _455 * cbMtdParam._m0[17u].y;
    float _458 = sin(_442);
    float _459 = cos(_442);
    float _460 = TEXCOORD - _456;
    float _461 = TEXCOORD_1 - _457;
    vec4 _481 = texture(sampler2D(M_AMSN_M1_Detail_Combustion_snp_0_Texture2D_10, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (_456 + fma(_461, (-0.0) - _458, _460 * _459))) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (fma(_461, _459, _460 * _458) + _457)) + cbTextureTilingScale._m0[0u].w));
    float _487 = (cbMtdParam._m0[11u].x * cbMtdParam._m0[13u].w) * _481.x;
    float _489 = (cbMtdParam._m0[11u].y * cbMtdParam._m0[13u].w) * _481.y;
    float _491 = (cbMtdParam._m0[11u].z * cbMtdParam._m0[13u].w) * _481.z;
    vec4 _514 = texture(sampler2D(M_AMSN_M1_Detail_Combustion_snp_0_Texture2D_23, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * _396) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _397) + cbTextureTilingScale._m0[5u].w));
    float _523 = (TEXCOORD_3.x - ((cbMtdParam._m0[16u].w * (1.0 - TEXCOORD_3.x)) * (_514.x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[13u].x + 1.0);
    float _3607 = isnan(0.0) ? _523 : (isnan(_523) ? 0.0 : max(_523, 0.0));
    float _524 = isnan(1.0) ? _3607 : (isnan(_3607) ? 1.0 : min(_3607, 1.0));
    float _534 = (((((_331.x * 2.0) + (-1.0)) * TEXCOORD_6) * cbMtdParam._m0[15u].x) + _361) + (cbMtdParam._m0[16u].y * _361);
    float _536 = (((((_331.y * 2.0) + (-1.0)) * TEXCOORD_7) * cbMtdParam._m0[15u].x) + _362) + (cbMtdParam._m0[16u].y * _362);
    float _539 = fma(_368, _217 * NORMAL.x, fma(_536, _224 * TANGENT.x, (_210 * _202) * _534));
    float _542 = fma(_368, _217 * NORMAL.y, fma(_536, _224 * TANGENT.y, (_210 * _203) * _534));
    float _545 = fma(_368, _217 * NORMAL.z, fma(_536, _224 * TANGENT.z, (_210 * _204) * _534));
    float _549 = inversesqrt(dot(vec3(_539, _542, _545), vec3(_539, _542, _545)));
    float _550 = _549 * _539;
    float _551 = _549 * _542;
    float _552 = _549 * _545;
    float _3618 = isnan(0.0) ? _376 : (isnan(_376) ? 0.0 : max(_376, 0.0));
    float _553 = isnan(1.0) ? _3618 : (isnan(_3618) ? 1.0 : min(_3618, 1.0));
    float _3629 = isnan(0.0) ? _317 : (isnan(_317) ? 0.0 : max(_317, 0.0));
    float _3640 = isnan(0.0) ? _318 : (isnan(_318) ? 0.0 : max(_318, 0.0));
    float _3651 = isnan(0.0) ? _319 : (isnan(_319) ? 0.0 : max(_319, 0.0));
    float _572 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _612 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _622 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _612);
    float _623 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _612);
    float _624 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _612);
    float _628 = inversesqrt(dot(vec3(_622, _623, _624), vec3(_622, _623, _624)));
    float _629 = _622 * _628;
    float _630 = _623 * _628;
    float _631 = _624 * _628;
    vec4 _636 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _638 = _636.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _791 = sqrt(((_622 * _622) + (_623 * _623)) + (_624 * _624));
        float _797 = (cbMatDynParam._m0[5u].x * _791) + cbMatDynParam._m0[5u].y;
        float _3662 = isnan(0.0) ? _797 : (isnan(_797) ? 0.0 : max(_797, 0.0));
        float _798 = isnan(1.0) ? _3662 : (isnan(_3662) ? 1.0 : min(_3662, 1.0));
        float _802 = (cbMatDynParam._m0[5u].z * _791) + cbMatDynParam._m0[5u].w;
        float _3673 = isnan(0.0) ? _802 : (isnan(_802) ? 0.0 : max(_802, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3673 : (isnan(_3673) ? 1.0 : min(_3673, 1.0))) - _798)) + _798) < ((_638 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _649 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _650 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _668 = fma(_552, cbSceneParam._m0[5u].z, fma(_551, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _550));
    float _671 = fma(_552, cbSceneParam._m0[6u].z, fma(_551, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _550));
    float _674 = fma(_552, cbSceneParam._m0[7u].z, fma(_551, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _550));
    uint _687 = uint(roundEven(NORMAL.w)) * 13u;
    uint _688 = _687 + 9u;
    uint _689 = _688 + uint(cbMatDynParam._m0[0u].w);
    float _695 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3629 : (isnan(_3629) ? 1.0 : min(_3629, 1.0)))) * cbInstanceData._m0[_689].x;
    float _696 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3640 : (isnan(_3640) ? 1.0 : min(_3640, 1.0)))) * cbInstanceData._m0[_689].y;
    float _697 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3651 : (isnan(_3651) ? 1.0 : min(_3651, 1.0)))) * cbInstanceData._m0[_689].z;
    float _3684 = isnan(0.0) ? _695 : (isnan(_695) ? 0.0 : max(_695, 0.0));
    float _698 = isnan(1.0) ? _3684 : (isnan(_3684) ? 1.0 : min(_3684, 1.0));
    float _3695 = isnan(0.0) ? _696 : (isnan(_696) ? 0.0 : max(_696, 0.0));
    float _699 = isnan(1.0) ? _3695 : (isnan(_3695) ? 1.0 : min(_3695, 1.0));
    float _3706 = isnan(0.0) ? _697 : (isnan(_697) ? 0.0 : max(_697, 0.0));
    float _700 = isnan(1.0) ? _3706 : (isnan(_3706) ? 1.0 : min(_3706, 1.0));
    vec4 _709 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _649, cbSceneParam._m0[86u].y * _650));
    float _712 = _709.x * TEXCOORD_3.w;
    float _713 = dot(vec3(_550, _551, _552), vec3(_629, _630, _631));
    float _716 = _713 * 2.0;
    float _720 = (_716 * _550) - _629;
    float _721 = (_716 * _551) - _630;
    float _722 = (_716 * _552) - _631;
    float _726 = abs(dot(vec3(_629, _630, _631), vec3(_550, _551, _552)));
    float _3717 = isnan(0.0) ? _726 : (isnan(_726) ? 0.0 : max(_726, 0.0));
    float _728 = sqrt(_553);
    float _740 = exp2((_728 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3717 : (isnan(_3717) ? 1.0 : min(_3717, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_728 * 3.0));
    float _772 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _776 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _780 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1110;
    float _1112;
    float _1113;
    float _1114;
    float _1115;
    float _1116;
    float _1117;
    float _1118;
    float _1119;
    float _1120;
    float _1121;
    float _1122;
    float _1123;
    float _1124;
    float _1125;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _835 = fma(_780, cbModelParam._m0[26u].z, fma(_776, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _772));
        float _839 = fma(_780, cbModelParam._m0[27u].z, fma(_776, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _772));
        float _843 = fma(_780, cbModelParam._m0[28u].z, fma(_776, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _772));
        float _868 = _772 + _550;
        float _869 = _776 + _551;
        float _870 = _780 + _552;
        float _880 = fma(_870, cbModelParam._m0[26u].z, fma(_869, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _868)) - _835;
        float _881 = fma(_870, cbModelParam._m0[27u].z, fma(_869, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _868)) - _839;
        float _882 = fma(_870, cbModelParam._m0[28u].z, fma(_869, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _868)) - _843;
        float _886 = inversesqrt(dot(vec3(_880, _881, _882), vec3(_880, _881, _882)));
        float _899 = ((_886 * _880) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_835 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _900 = ((_886 * _881) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_839 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _901 = ((_886 * _882) / cbModelParam._m0[34u].z) + ((((((_843 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _904 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_899, _900, _901), 0.0);
        vec4 _911 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_899, _900, _901), 0.0);
        vec4 _918 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_899, _900, _901), 0.0);
        vec4 _925 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_899, _900, _901), 0.0);
        float _938 = exp2((_904.w + (-0.5)) * 20.0) * 2.0;
        float _939 = _938 * (_904.x + (-0.5));
        float _940 = _938 * (_904.y + (-0.5));
        float _941 = _938 * (_904.z + (-0.5));
        float _948 = exp2((_911.w + (-0.5)) * 20.0) * 2.0;
        float _949 = _948 * (_911.x + (-0.5));
        float _950 = _948 * (_911.y + (-0.5));
        float _951 = _948 * (_911.z + (-0.5));
        float _958 = exp2((_918.w + (-0.5)) * 20.0) * 2.0;
        float _959 = _958 * (_918.x + (-0.5));
        float _960 = _958 * (_918.y + (-0.5));
        float _961 = _958 * (_918.z + (-0.5));
        float _968 = exp2((_925.w + (-0.5)) * 20.0) * 2.0;
        float _969 = _968 * (_925.x + (-0.5));
        float _970 = _968 * (_925.y + (-0.5));
        float _971 = _968 * (_925.z + (-0.5));
        float _972 = isnan(0.0) ? _969 : (isnan(_969) ? 0.0 : max(_969, 0.0));
        float _973 = isnan(0.0) ? _970 : (isnan(_970) ? 0.0 : max(_970, 0.0));
        float _974 = isnan(0.0) ? _971 : (isnan(_971) ? 0.0 : max(_971, 0.0));
        float _975 = _939 * 0.5;
        float _976 = _949 * 0.5;
        float _977 = _959 * 0.5;
        float _978 = dot(vec3(_975, _976, _977), vec3(_975, _976, _977));
        float _983 = (_978 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_978);
        float _992 = (dot(vec3(_550, _551, _552), vec3(_983 * _975, _983 * _976, _983 * _977)) + 1.0) * 0.5;
        float _3743 = isnan(0.0) ? _992 : (isnan(_992) ? 0.0 : max(_992, 0.0));
        float _1002 = sqrt(((_976 * _976) + (_975 * _975)) + (_977 * _977)) / (_972 + 9.9999997473787516355514526367188e-06);
        float _3754 = isnan(0.0) ? _1002 : (isnan(_1002) ? 0.0 : max(_1002, 0.0));
        float _1003 = isnan(1.0) ? _3754 : (isnan(_3754) ? 1.0 : min(_3754, 1.0));
        float _1004 = _1003 * 2.0;
        float _1008 = (1.0 - _1003) / (_1003 + 1.0);
        float _3765 = isnan(0.0) ? _1008 : (isnan(_1008) ? 0.0 : max(_1008, 0.0));
        float _1009 = isnan(1.0) ? _3765 : (isnan(_3765) ? 1.0 : min(_3765, 1.0));
        float _1018 = ((((1.0 - _1009) * (_1004 + 2.0)) * exp2(log2(isnan(1.0) ? _3743 : (isnan(_3743) ? 1.0 : min(_3743, 1.0))) * (_1004 + 1.0))) + _1009) * _972;
        float _1019 = _940 * 0.5;
        float _1020 = _950 * 0.5;
        float _1021 = _960 * 0.5;
        float _1022 = dot(vec3(_1019, _1020, _1021), vec3(_1019, _1020, _1021));
        float _1027 = (_1022 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1022);
        float _1035 = (dot(vec3(_550, _551, _552), vec3(_1027 * _1019, _1027 * _1020, _1027 * _1021)) + 1.0) * 0.5;
        float _3776 = isnan(0.0) ? _1035 : (isnan(_1035) ? 0.0 : max(_1035, 0.0));
        float _1044 = sqrt(((_1020 * _1020) + (_1019 * _1019)) + (_1021 * _1021)) / (_973 + 9.9999997473787516355514526367188e-06);
        float _3787 = isnan(0.0) ? _1044 : (isnan(_1044) ? 0.0 : max(_1044, 0.0));
        float _1045 = isnan(1.0) ? _3787 : (isnan(_3787) ? 1.0 : min(_3787, 1.0));
        float _1046 = _1045 * 2.0;
        float _1050 = (1.0 - _1045) / (_1045 + 1.0);
        float _3798 = isnan(0.0) ? _1050 : (isnan(_1050) ? 0.0 : max(_1050, 0.0));
        float _1051 = isnan(1.0) ? _3798 : (isnan(_3798) ? 1.0 : min(_3798, 1.0));
        float _1060 = ((((1.0 - _1051) * (_1046 + 2.0)) * exp2(log2(isnan(1.0) ? _3776 : (isnan(_3776) ? 1.0 : min(_3776, 1.0))) * (_1046 + 1.0))) + _1051) * _973;
        float _1061 = _941 * 0.5;
        float _1062 = _951 * 0.5;
        float _1063 = _961 * 0.5;
        float _1064 = dot(vec3(_1061, _1062, _1063), vec3(_1061, _1062, _1063));
        float _1069 = (_1064 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1064);
        float _1077 = (dot(vec3(_550, _551, _552), vec3(_1069 * _1061, _1069 * _1062, _1069 * _1063)) + 1.0) * 0.5;
        float _3809 = isnan(0.0) ? _1077 : (isnan(_1077) ? 0.0 : max(_1077, 0.0));
        float _1086 = sqrt(((_1062 * _1062) + (_1061 * _1061)) + (_1063 * _1063)) / (_974 + 9.9999997473787516355514526367188e-06);
        float _3820 = isnan(0.0) ? _1086 : (isnan(_1086) ? 0.0 : max(_1086, 0.0));
        float _1087 = isnan(1.0) ? _3820 : (isnan(_3820) ? 1.0 : min(_3820, 1.0));
        float _1088 = _1087 * 2.0;
        float _1092 = (1.0 - _1087) / (_1087 + 1.0);
        float _3831 = isnan(0.0) ? _1092 : (isnan(_1092) ? 0.0 : max(_1092, 0.0));
        float _1093 = isnan(1.0) ? _3831 : (isnan(_3831) ? 1.0 : min(_3831, 1.0));
        float _1102 = ((((1.0 - _1093) * (_1088 + 2.0)) * exp2(log2(isnan(1.0) ? _3809 : (isnan(_3809) ? 1.0 : min(_3809, 1.0))) * (_1088 + 1.0))) + _1093) * _974;
        _1110 = _941;
        _1112 = _940;
        _1113 = _939;
        _1114 = _951;
        _1115 = _950;
        _1116 = _949;
        _1117 = _961;
        _1118 = _960;
        _1119 = _959;
        _1120 = _974;
        _1121 = _973;
        _1122 = _972;
        _1123 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1018 : (isnan(_1018) ? 0.0 : max(_1018, 0.0)));
        _1124 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1060 : (isnan(_1060) ? 0.0 : max(_1060, 0.0)));
        _1125 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1102 : (isnan(_1102) ? 0.0 : max(_1102, 0.0)));
    }
    else
    {
        _1110 = _1111;
        _1112 = _1111;
        _1113 = _1111;
        _1114 = _1111;
        _1115 = _1111;
        _1116 = _1111;
        _1117 = _1111;
        _1118 = _1111;
        _1119 = _1111;
        _1120 = _1111;
        _1121 = _1111;
        _1122 = _1111;
        _1123 = 0.0;
        _1124 = 0.0;
        _1125 = 0.0;
    }
    float _1423;
    float _1424;
    float _1425;
    float _1426;
    float _1427;
    float _1428;
    float _1429;
    float _1430;
    float _1431;
    float _1432;
    float _1433;
    float _1434;
    float _1435;
    float _1436;
    float _1437;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1154 = fma(_780, cbModelParam._m0[30u].z, fma(_776, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _772));
        float _1158 = fma(_780, cbModelParam._m0[31u].z, fma(_776, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _772));
        float _1162 = fma(_780, cbModelParam._m0[32u].z, fma(_776, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _772));
        float _1185 = _772 + _550;
        float _1186 = _776 + _551;
        float _1187 = _780 + _552;
        float _1197 = fma(_1187, cbModelParam._m0[30u].z, fma(_1186, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1185)) - _1154;
        float _1198 = fma(_1187, cbModelParam._m0[31u].z, fma(_1186, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1185)) - _1158;
        float _1199 = fma(_1187, cbModelParam._m0[32u].z, fma(_1186, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1185)) - _1162;
        float _1203 = inversesqrt(dot(vec3(_1197, _1198, _1199), vec3(_1197, _1198, _1199)));
        float _1216 = ((_1203 * _1197) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1154 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1217 = ((_1203 * _1198) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1158 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1218 = ((_1203 * _1199) / cbModelParam._m0[35u].z) + ((((((_1162 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1220 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1216, _1217, _1218), 0.0);
        vec4 _1227 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1216, _1217, _1218), 0.0);
        vec4 _1234 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1216, _1217, _1218), 0.0);
        vec4 _1241 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1216, _1217, _1218), 0.0);
        float _1253 = exp2((_1220.w + (-0.5)) * 20.0) * 2.0;
        float _1254 = _1253 * (_1220.x + (-0.5));
        float _1255 = _1253 * (_1220.y + (-0.5));
        float _1256 = _1253 * (_1220.z + (-0.5));
        float _1263 = exp2((_1227.w + (-0.5)) * 20.0) * 2.0;
        float _1264 = _1263 * (_1227.x + (-0.5));
        float _1265 = _1263 * (_1227.y + (-0.5));
        float _1266 = _1263 * (_1227.z + (-0.5));
        float _1273 = exp2((_1234.w + (-0.5)) * 20.0) * 2.0;
        float _1274 = _1273 * (_1234.x + (-0.5));
        float _1275 = _1273 * (_1234.y + (-0.5));
        float _1276 = _1273 * (_1234.z + (-0.5));
        float _1283 = exp2((_1241.w + (-0.5)) * 20.0) * 2.0;
        float _1284 = _1283 * (_1241.x + (-0.5));
        float _1285 = _1283 * (_1241.y + (-0.5));
        float _1286 = _1283 * (_1241.z + (-0.5));
        float _1287 = isnan(0.0) ? _1284 : (isnan(_1284) ? 0.0 : max(_1284, 0.0));
        float _1288 = isnan(0.0) ? _1285 : (isnan(_1285) ? 0.0 : max(_1285, 0.0));
        float _1289 = isnan(0.0) ? _1286 : (isnan(_1286) ? 0.0 : max(_1286, 0.0));
        float _1290 = _1254 * 0.5;
        float _1291 = _1264 * 0.5;
        float _1292 = _1274 * 0.5;
        float _1293 = dot(vec3(_1290, _1291, _1292), vec3(_1290, _1291, _1292));
        float _1298 = (_1293 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1293);
        float _1306 = (dot(vec3(_550, _551, _552), vec3(_1298 * _1290, _1298 * _1291, _1298 * _1292)) + 1.0) * 0.5;
        float _3872 = isnan(0.0) ? _1306 : (isnan(_1306) ? 0.0 : max(_1306, 0.0));
        float _1315 = sqrt(((_1291 * _1291) + (_1290 * _1290)) + (_1292 * _1292)) / (_1287 + 9.9999997473787516355514526367188e-06);
        float _3883 = isnan(0.0) ? _1315 : (isnan(_1315) ? 0.0 : max(_1315, 0.0));
        float _1316 = isnan(1.0) ? _3883 : (isnan(_3883) ? 1.0 : min(_3883, 1.0));
        float _1317 = _1316 * 2.0;
        float _1321 = (1.0 - _1316) / (_1316 + 1.0);
        float _3894 = isnan(0.0) ? _1321 : (isnan(_1321) ? 0.0 : max(_1321, 0.0));
        float _1322 = isnan(1.0) ? _3894 : (isnan(_3894) ? 1.0 : min(_3894, 1.0));
        float _1331 = ((((1.0 - _1322) * (_1317 + 2.0)) * exp2(log2(isnan(1.0) ? _3872 : (isnan(_3872) ? 1.0 : min(_3872, 1.0))) * (_1317 + 1.0))) + _1322) * _1287;
        float _1332 = _1255 * 0.5;
        float _1333 = _1265 * 0.5;
        float _1334 = _1275 * 0.5;
        float _1335 = dot(vec3(_1332, _1333, _1334), vec3(_1332, _1333, _1334));
        float _1340 = (_1335 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1335);
        float _1348 = (dot(vec3(_550, _551, _552), vec3(_1340 * _1332, _1340 * _1333, _1340 * _1334)) + 1.0) * 0.5;
        float _3905 = isnan(0.0) ? _1348 : (isnan(_1348) ? 0.0 : max(_1348, 0.0));
        float _1357 = sqrt(((_1333 * _1333) + (_1332 * _1332)) + (_1334 * _1334)) / (_1288 + 9.9999997473787516355514526367188e-06);
        float _3916 = isnan(0.0) ? _1357 : (isnan(_1357) ? 0.0 : max(_1357, 0.0));
        float _1358 = isnan(1.0) ? _3916 : (isnan(_3916) ? 1.0 : min(_3916, 1.0));
        float _1359 = _1358 * 2.0;
        float _1363 = (1.0 - _1358) / (_1358 + 1.0);
        float _3927 = isnan(0.0) ? _1363 : (isnan(_1363) ? 0.0 : max(_1363, 0.0));
        float _1364 = isnan(1.0) ? _3927 : (isnan(_3927) ? 1.0 : min(_3927, 1.0));
        float _1373 = ((((1.0 - _1364) * (_1359 + 2.0)) * exp2(log2(isnan(1.0) ? _3905 : (isnan(_3905) ? 1.0 : min(_3905, 1.0))) * (_1359 + 1.0))) + _1364) * _1288;
        float _1374 = _1256 * 0.5;
        float _1375 = _1266 * 0.5;
        float _1376 = _1276 * 0.5;
        float _1377 = dot(vec3(_1374, _1375, _1376), vec3(_1374, _1375, _1376));
        float _1382 = (_1377 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1377);
        float _1390 = (dot(vec3(_550, _551, _552), vec3(_1382 * _1374, _1382 * _1375, _1382 * _1376)) + 1.0) * 0.5;
        float _3938 = isnan(0.0) ? _1390 : (isnan(_1390) ? 0.0 : max(_1390, 0.0));
        float _1399 = sqrt(((_1375 * _1375) + (_1374 * _1374)) + (_1376 * _1376)) / (_1289 + 9.9999997473787516355514526367188e-06);
        float _3949 = isnan(0.0) ? _1399 : (isnan(_1399) ? 0.0 : max(_1399, 0.0));
        float _1400 = isnan(1.0) ? _3949 : (isnan(_3949) ? 1.0 : min(_3949, 1.0));
        float _1401 = _1400 * 2.0;
        float _1405 = (1.0 - _1400) / (_1400 + 1.0);
        float _3960 = isnan(0.0) ? _1405 : (isnan(_1405) ? 0.0 : max(_1405, 0.0));
        float _1406 = isnan(1.0) ? _3960 : (isnan(_3960) ? 1.0 : min(_3960, 1.0));
        float _1415 = ((((1.0 - _1406) * (_1401 + 2.0)) * exp2(log2(isnan(1.0) ? _3938 : (isnan(_3938) ? 1.0 : min(_3938, 1.0))) * (_1401 + 1.0))) + _1406) * _1289;
        _1423 = _1256;
        _1424 = _1255;
        _1425 = _1254;
        _1426 = _1266;
        _1427 = _1265;
        _1428 = _1264;
        _1429 = _1276;
        _1430 = _1275;
        _1431 = _1274;
        _1432 = _1289;
        _1433 = _1288;
        _1434 = _1287;
        _1435 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1331 : (isnan(_1331) ? 0.0 : max(_1331, 0.0)));
        _1436 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1373 : (isnan(_1373) ? 0.0 : max(_1373, 0.0)));
        _1437 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1415 : (isnan(_1415) ? 0.0 : max(_1415, 0.0)));
    }
    else
    {
        _1423 = _1111;
        _1424 = _1111;
        _1425 = _1111;
        _1426 = _1111;
        _1427 = _1111;
        _1428 = _1111;
        _1429 = _1111;
        _1430 = _1111;
        _1431 = _1111;
        _1432 = _1111;
        _1433 = _1111;
        _1434 = _1111;
        _1435 = 0.0;
        _1436 = 0.0;
        _1437 = 0.0;
    }
    float _1447 = (cbModelParam._m0[1u].x * (_1435 - _1123)) + _1123;
    float _1448 = (cbModelParam._m0[1u].x * (_1436 - _1124)) + _1124;
    float _1449 = (cbModelParam._m0[1u].x * (_1437 - _1125)) + _1125;
    float _1470 = fma(_1449, cbSceneParam._m0[89u].z, fma(_1448, cbSceneParam._m0[89u].y, _1447 * cbSceneParam._m0[89u].x));
    float _1473 = fma(_1449, cbSceneParam._m0[90u].z, fma(_1448, cbSceneParam._m0[90u].y, _1447 * cbSceneParam._m0[90u].x));
    float _1476 = fma(_1449, cbSceneParam._m0[91u].z, fma(_1448, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1447));
    float _1491 = _720 * 0.5;
    float _1492 = _721 * 0.5;
    float _1493 = _722 * 0.5;
    float _1494 = dot(vec4(_1491, _1492, _1493, 1.0), vec4(_1425, _1428, _1431, _1434));
    float _1497 = dot(vec4(_1491, _1492, _1493, 1.0), vec4(_1424, _1427, _1430, _1433));
    float _1500 = dot(vec4(_1491, _1492, _1493, 1.0), vec4(_1423, _1426, _1429, _1432));
    float _1534;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1507 = dot(vec4(_1491, _1492, _1493, 1.0), vec4(_1110, _1114, _1117, _1120));
        float _1511 = dot(vec4(_1491, _1492, _1493, 1.0), vec4(_1112, _1115, _1118, _1121));
        float _1515 = dot(vec4(_1491, _1492, _1493, 1.0), vec4(_1113, _1116, _1119, _1122));
        float _1522 = dot(vec4(cbModelParam._m0[39u]), vec4(_1491, _1492, _1493, 1.0));
        _1534 = dot(vec3(isnan(0.0) ? _1515 : (isnan(_1515) ? 0.0 : max(_1515, 0.0)), isnan(0.0) ? _1511 : (isnan(_1511) ? 0.0 : max(_1511, 0.0)), isnan(0.0) ? _1507 : (isnan(_1507) ? 0.0 : max(_1507, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1522) ? 0.0 : (isnan(0.0) ? _1522 : max(0.0, _1522))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1534 = 1.0;
    }
    float _1545;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1536 = dot(vec4(cbModelParam._m0[40u]), vec4(_1491, _1492, _1493, 1.0));
        _1545 = dot(vec3(isnan(0.0) ? _1494 : (isnan(_1494) ? 0.0 : max(_1494, 0.0)), isnan(0.0) ? _1497 : (isnan(_1497) ? 0.0 : max(_1497, 0.0)), isnan(0.0) ? _1500 : (isnan(_1500) ? 0.0 : max(_1500, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1536) ? 0.0 : (isnan(0.0) ? _1536 : max(0.0, _1536))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1545 = 1.0;
    }
    float _1549 = (_1545 * cbModelParam._m0[1u].x) + (_1534 * (1.0 - cbModelParam._m0[1u].x));
    float _1559 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _553);
    float _1560 = isnan(_1559) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1559 : min(cbModelParam._m0[25u].z, _1559));
    float _1640;
    float _1642;
    float _1644;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1607 = fma(_780, cbModelParam._m0[13u].z, fma(_776, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _772)) + cbModelParam._m0[13u].w;
        float _1611 = fma(_780, cbModelParam._m0[14u].z, fma(_776, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _772)) + cbModelParam._m0[14u].w;
        float _1615 = fma(_780, cbModelParam._m0[15u].z, fma(_776, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _772)) + cbModelParam._m0[15u].w;
        float _1618 = fma(_722, cbModelParam._m0[13u].z, fma(_721, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _720));
        float _1621 = fma(_722, cbModelParam._m0[14u].z, fma(_721, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _720));
        float _1624 = fma(_722, cbModelParam._m0[15u].z, fma(_721, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _720));
        float _1652;
        if (_1618 > 0.0)
        {
            _1652 = abs((1.0 - _1607) / _1618);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1618 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1607 + 1.0) / _1618);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1652 = frontier_phi_17_15_ladder;
        }
        float _1875;
        if (_1621 > 0.0)
        {
            _1875 = abs((1.0 - _1611) / _1621);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1621 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1611 + 1.0) / _1621);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1875 = frontier_phi_26_22_ladder;
        }
        float _2121;
        if (_1624 > 0.0)
        {
            _2121 = abs((1.0 - _1615) / _1624);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1624 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1615 + 1.0) / _1624);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2121 = frontier_phi_38_33_ladder;
        }
        float _2123 = isnan(_1875) ? _1652 : (isnan(_1652) ? _1875 : min(_1652, _1875));
        float _2124 = isnan(_2121) ? _2123 : (isnan(_2123) ? _2121 : min(_2123, _2121));
        float _2128 = (_2124 * _1618) + _1607;
        float _2129 = (_2124 * _1621) + _1611;
        float _2130 = (_2124 * _1624) + _1615;
        float _2131 = _2124 * 9.9999997473787516355514526367188e-05;
        float _2133 = (-1.0) - _2131;
        float _2135 = _2131 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2130 > _2135) || ((_2130 < _2133) || ((_2129 > _2135) || ((_2129 < _2133) || ((_2128 < _2133) || (_2128 > _2135))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2254 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2130, cbModelParam._m0[9u].z, fma(_2129, cbModelParam._m0[9u].y, _2128 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2130, cbModelParam._m0[10u].z, fma(_2129, cbModelParam._m0[10u].y, _2128 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2130, cbModelParam._m0[11u].z, fma(_2129, cbModelParam._m0[11u].y, _2128 * cbModelParam._m0[11u].x))), _1560);
            frontier_phi_16_38_ladder = _2254.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2254.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2254.x * cbModelParam._m0[1u].y;
        }
        _1640 = frontier_phi_16_38_ladder_2;
        _1642 = frontier_phi_16_38_ladder_1;
        _1644 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1628 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_720, _721, _722), _1560);
        _1640 = _1628.x * cbModelParam._m0[1u].y;
        _1642 = _1628.y * cbModelParam._m0[1u].y;
        _1644 = _1628.z * cbModelParam._m0[1u].y;
    }
    float _1648 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _553);
    float _1649 = isnan(_1648) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1648 : min(cbModelParam._m0[25u].w, _1648));
    float _1740;
    float _1742;
    float _1744;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1704 = fma(_780, cbModelParam._m0[21u].z, fma(_776, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _772)) + cbModelParam._m0[21u].w;
        float _1708 = fma(_780, cbModelParam._m0[22u].z, fma(_776, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _772)) + cbModelParam._m0[22u].w;
        float _1712 = fma(_780, cbModelParam._m0[23u].z, fma(_776, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _772)) + cbModelParam._m0[23u].w;
        float _1715 = fma(_722, cbModelParam._m0[21u].z, fma(_721, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _720));
        float _1718 = fma(_722, cbModelParam._m0[22u].z, fma(_721, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _720));
        float _1721 = fma(_722, cbModelParam._m0[23u].z, fma(_721, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _720));
        float _1880;
        if (_1715 > 0.0)
        {
            _1880 = abs((1.0 - _1704) / _1715);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1715 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1704 + 1.0) / _1715);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1880 = frontier_phi_28_24_ladder;
        }
        float _2148;
        if (_1718 > 0.0)
        {
            _2148 = abs((1.0 - _1708) / _1718);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1718 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1708 + 1.0) / _1718);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2148 = frontier_phi_40_35_ladder;
        }
        float _2353;
        if (_1721 > 0.0)
        {
            _2353 = abs((1.0 - _1712) / _1721);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1721 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1712 + 1.0) / _1721);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2353 = frontier_phi_49_46_ladder;
        }
        float _2355 = isnan(_2148) ? _1880 : (isnan(_1880) ? _2148 : min(_1880, _2148));
        float _2356 = isnan(_2353) ? _2355 : (isnan(_2355) ? _2353 : min(_2355, _2353));
        float _2360 = (_2356 * _1715) + _1704;
        float _2361 = (_2356 * _1718) + _1708;
        float _2362 = (_2356 * _1721) + _1712;
        float _2363 = _2356 * 9.9999997473787516355514526367188e-05;
        float _2364 = (-1.0) - _2363;
        float _2366 = _2363 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2362 > _2366) || ((_2362 < _2364) || ((_2361 > _2366) || ((_2361 < _2364) || ((_2360 < _2364) || (_2360 > _2366))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2606 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2362, cbModelParam._m0[17u].z, fma(_2361, cbModelParam._m0[17u].y, _2360 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2362, cbModelParam._m0[18u].z, fma(_2361, cbModelParam._m0[18u].y, _2360 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2362, cbModelParam._m0[19u].z, fma(_2361, cbModelParam._m0[19u].y, _2360 * cbModelParam._m0[19u].x))), _1649);
            frontier_phi_25_49_ladder = _2606.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2606.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2606.x * cbModelParam._m0[1u].z;
        }
        _1740 = frontier_phi_25_49_ladder_2;
        _1742 = frontier_phi_25_49_ladder_1;
        _1744 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1724 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_720, _721, _722), _1649);
        _1740 = _1724.x * cbModelParam._m0[1u].z;
        _1742 = _1724.y * cbModelParam._m0[1u].z;
        _1744 = _1724.z * cbModelParam._m0[1u].z;
    }
    float _1756 = ((((1.0 - _740) * ((_728 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_740 * _728)) * _712;
    float _1757 = _1756 * ((cbModelParam._m0[1u].w * (_1740 - _1640)) + _1640);
    float _1758 = _1756 * ((cbModelParam._m0[1u].w * (_1742 - _1642)) + _1642);
    float _1759 = _1756 * ((cbModelParam._m0[1u].w * (_1744 - _1644)) + _1644);
    float _1762 = fma(_1759, cbSceneParam._m0[89u].z, fma(_1758, cbSceneParam._m0[89u].y, _1757 * cbSceneParam._m0[89u].x));
    float _1765 = fma(_1759, cbSceneParam._m0[90u].z, fma(_1758, cbSceneParam._m0[90u].y, _1757 * cbSceneParam._m0[90u].x));
    float _1768 = fma(_1759, cbSceneParam._m0[91u].z, fma(_1758, cbSceneParam._m0[91u].y, _1757 * cbSceneParam._m0[91u].x));
    vec4 _1776 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_649, _650));
    float _1778 = _1776.w;
    float _1790 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1778);
    float _1791 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1778);
    float _1792 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1778);
    uvec4 _1796 = floatBitsToUint(cbInstanceData._m0[_687 + 5u]);
    uint _1798 = _1796.x * 14u;
    uint _1799 = _1798 + 13u;
    float _1806 = _712 + (-1.0);
    float _1811 = (cbLight._m0[_1799].x * _1806) + 1.0;
    float _1812 = (cbLight._m0[_1799].y * _1806) + 1.0;
    float _1813 = (cbLight._m0[_1799].z * _1806) + 1.0;
    float _1814 = (cbLight._m0[_1799].w * _1806) + 1.0;
    uint _1815 = _1798 + 5u;
    float _1821 = isnan(1.0) ? _1812 : (isnan(_1812) ? 1.0 : min(_1812, 1.0));
    uint _1825 = _1798 + 4u;
    float _1834 = isnan(1.0) ? _1811 : (isnan(_1811) ? 1.0 : min(_1811, 1.0));
    uint _1838 = _1798 | 1u;
    float _1849 = dot(vec3(cbLight._m0[_1798].xyz), vec3(_550, _551, _552));
    float _1852 = dot(vec3(cbLight._m0[_1838].xyz), vec3(_550, _551, _552));
    float _4096 = isnan(0.0) ? _1849 : (isnan(_1849) ? 0.0 : max(_1849, 0.0));
    float _4107 = isnan(0.0) ? _1852 : (isnan(_1852) ? 0.0 : max(_1852, 0.0));
    float _1857 = (isnan(1.0) ? _4096 : (isnan(_4096) ? 1.0 : min(_4096, 1.0))) * 0.3183098733425140380859375;
    float _1859 = (isnan(1.0) ? _4107 : (isnan(_4107) ? 1.0 : min(_4107, 1.0))) * 0.3183098733425140380859375;
    float _1866 = ((cbLight._m0[_1815].x * _1821) * _1859) + (((cbLight._m0[_1825].x * _1790) * _1834) * _1857);
    float _1867 = ((_1821 * cbLight._m0[_1815].y) * _1859) + (((cbLight._m0[_1825].y * _1791) * _1834) * _1857);
    float _1868 = ((_1821 * cbLight._m0[_1815].z) * _1859) + (((cbLight._m0[_1825].z * _1792) * _1834) * _1857);
    uvec4 _1872 = floatBitsToUint(cbLight._m0[_1798 + 12u]);
    bool _1874 = _1872.x == 0u;
    float _1885;
    float _1887;
    float _1889;
    if (_1874)
    {
        _1885 = _1866;
        _1887 = _1867;
        _1889 = _1868;
    }
    else
    {
        uint _1893 = _1798 + 6u;
        float _1909 = (dot(vec3(cbLight._m0[_1798 + 2u].xyz), vec3(_550, _551, _552)) * 0.5) + 0.5;
        float _1910 = _1909 * _1909;
        float _4118 = isnan(0.0) ? _1910 : (isnan(_1910) ? 0.0 : max(_1910, 0.0));
        float _1911 = isnan(1.0) ? _4118 : (isnan(_4118) ? 1.0 : min(_4118, 1.0));
        float _1912 = isnan(1.0) ? _1813 : (isnan(_1813) ? 1.0 : min(_1813, 1.0));
        _1885 = (((cbLight._m0[_1893].x * 0.3183098733425140380859375) * _1911) * _1912) + _1866;
        _1887 = (((cbLight._m0[_1893].y * 0.3183098733425140380859375) * _1911) * _1912) + _1867;
        _1889 = (((cbLight._m0[_1893].z * 0.3183098733425140380859375) * _1911) * _1912) + _1868;
    }
    bool _1892 = _1872.y == 0u;
    float _1930;
    float _1932;
    float _1934;
    if (_1892)
    {
        _1930 = _1885;
        _1932 = _1887;
        _1934 = _1889;
    }
    else
    {
        uint _2092 = _1798 + 7u;
        float _2108 = (dot(vec3(cbLight._m0[_1798 + 3u].xyz), vec3(_550, _551, _552)) * 0.5) + 0.5;
        float _2109 = _2108 * _2108;
        float _4134 = isnan(0.0) ? _2109 : (isnan(_2109) ? 0.0 : max(_2109, 0.0));
        float _2110 = isnan(1.0) ? _4134 : (isnan(_4134) ? 1.0 : min(_4134, 1.0));
        float _2111 = isnan(1.0) ? _1814 : (isnan(_1814) ? 1.0 : min(_1814, 1.0));
        _1930 = (((cbLight._m0[_2092].x * 0.3183098733425140380859375) * _2110) * _2111) + _1885;
        _1932 = (((cbLight._m0[_2092].y * 0.3183098733425140380859375) * _2110) * _2111) + _1887;
        _1934 = (((cbLight._m0[_2092].z * 0.3183098733425140380859375) * _2110) * _2111) + _1889;
    }
    uint _1937 = _1798 + 8u;
    float _1950 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1798].w)) * _553) * 0.949999988079071044921875);
    float _1951 = _1950 * _1950;
    float _1952 = cbLight._m0[_1798].x + _629;
    float _1953 = cbLight._m0[_1798].y + _630;
    float _1954 = cbLight._m0[_1798].z + _631;
    float _1958 = inversesqrt(dot(vec3(_1952, _1953, _1954), vec3(_1952, _1953, _1954)));
    float _1959 = _1958 * _1952;
    float _1960 = _1958 * _1953;
    float _1961 = _1958 * _1954;
    float _1962 = dot(vec3(_550, _551, _552), vec3(cbLight._m0[_1798].xyz));
    float _4150 = isnan(0.0) ? _1962 : (isnan(_1962) ? 0.0 : max(_1962, 0.0));
    float _1965 = isnan(1.0) ? _4150 : (isnan(_4150) ? 1.0 : min(_4150, 1.0));
    float _4161 = isnan(0.0) ? _713 : (isnan(_713) ? 0.0 : max(_713, 0.0));
    float _1966 = isnan(1.0) ? _4161 : (isnan(_4161) ? 1.0 : min(_4161, 1.0));
    float _1967 = dot(vec3(_550, _551, _552), vec3(_1959, _1960, _1961));
    float _4172 = isnan(0.0) ? _1967 : (isnan(_1967) ? 0.0 : max(_1967, 0.0));
    float _1970 = isnan(1.0) ? _4172 : (isnan(_4172) ? 1.0 : min(_4172, 1.0));
    float _1971 = dot(vec3(cbLight._m0[_1798].xyz), vec3(_1959, _1960, _1961));
    float _4183 = isnan(0.0) ? _1971 : (isnan(_1971) ? 0.0 : max(_1971, 0.0));
    float _1975 = _1951 * _1951;
    float _1979 = ((_1970 * _1970) * (_1975 + (-1.0))) + 1.0;
    float _1990 = (exp2(log2(1.0 - (isnan(1.0) ? _4183 : (isnan(_4183) ? 1.0 : min(_4183, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1991 = 1.0 - _1951;
    float _2002 = (0.5 / (((_1966 * ((_1965 * _1991) + _1951)) + 9.9999999392252902907785028219223e-09) + (((_1966 * _1991) + _1951) * _1965))) * _1965;
    float _4194 = isnan(0.0) ? _2002 : (isnan(_2002) ? 0.0 : max(_2002, 0.0));
    float _2004 = (isnan(1.0) ? _4194 : (isnan(_4194) ? 1.0 : min(_4194, 1.0))) * (_1975 / ((_1979 * _1979) * 3.141590118408203125));
    uint _2018 = _1798 + 9u;
    float _2029 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1838].w)) * _553) * 0.949999988079071044921875);
    float _2030 = _2029 * _2029;
    float _2031 = cbLight._m0[_1838].x + _629;
    float _2032 = cbLight._m0[_1838].y + _630;
    float _2033 = cbLight._m0[_1838].z + _631;
    float _2037 = inversesqrt(dot(vec3(_2031, _2032, _2033), vec3(_2031, _2032, _2033)));
    float _2038 = _2037 * _2031;
    float _2039 = _2037 * _2032;
    float _2040 = _2037 * _2033;
    float _2041 = dot(vec3(_550, _551, _552), vec3(cbLight._m0[_1838].xyz));
    float _4205 = isnan(0.0) ? _2041 : (isnan(_2041) ? 0.0 : max(_2041, 0.0));
    float _2044 = isnan(1.0) ? _4205 : (isnan(_4205) ? 1.0 : min(_4205, 1.0));
    float _2045 = dot(vec3(_550, _551, _552), vec3(_2038, _2039, _2040));
    float _4216 = isnan(0.0) ? _2045 : (isnan(_2045) ? 0.0 : max(_2045, 0.0));
    float _2048 = isnan(1.0) ? _4216 : (isnan(_4216) ? 1.0 : min(_4216, 1.0));
    float _2049 = dot(vec3(cbLight._m0[_1838].xyz), vec3(_2038, _2039, _2040));
    float _4227 = isnan(0.0) ? _2049 : (isnan(_2049) ? 0.0 : max(_2049, 0.0));
    float _2053 = _2030 * _2030;
    float _2057 = ((_2048 * _2048) * (_2053 + (-1.0))) + 1.0;
    float _2066 = (exp2(log2(1.0 - (isnan(1.0) ? _4227 : (isnan(_4227) ? 1.0 : min(_4227, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2067 = 1.0 - _2030;
    float _2077 = (0.5 / (((_1966 * ((_2044 * _2067) + _2030)) + 9.9999999392252902907785028219223e-09) + (((_1966 * _2067) + _2030) * _2044))) * _2044;
    float _4238 = isnan(0.0) ? _2077 : (isnan(_2077) ? 0.0 : max(_2077, 0.0));
    float _2079 = (isnan(1.0) ? _4238 : (isnan(_4238) ? 1.0 : min(_4238, 1.0))) * (_2053 / ((_2057 * _2057) * 3.141590118408203125));
    float _2089 = (((_2066 * cbLight._m0[_2018].x) * _2079) * _1821) + ((((cbLight._m0[_1937].x * _1790) * _1990) * _2004) * _1834);
    float _2090 = (((_2066 * cbLight._m0[_2018].y) * _2079) * _1821) + ((((cbLight._m0[_1937].y * _1791) * _1990) * _2004) * _1834);
    float _2091 = (((_2066 * cbLight._m0[_2018].z) * _2079) * _1821) + ((((cbLight._m0[_1937].z * _1792) * _1990) * _2004) * _1834);
    float _2153;
    float _2155;
    float _2157;
    if (_1874)
    {
        _2153 = _2089;
        _2155 = _2090;
        _2157 = _2091;
    }
    else
    {
        uint _2159 = _1798 + 2u;
        uint _2163 = _1798 + 10u;
        float _2177 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2159].w)) * _553) * 0.949999988079071044921875);
        float _2178 = _2177 * _2177;
        float _2179 = cbLight._m0[_2159].x + _629;
        float _2180 = cbLight._m0[_2159].y + _630;
        float _2181 = cbLight._m0[_2159].z + _631;
        float _2185 = inversesqrt(dot(vec3(_2179, _2180, _2181), vec3(_2179, _2180, _2181)));
        float _2186 = _2185 * _2179;
        float _2187 = _2185 * _2180;
        float _2188 = _2185 * _2181;
        float _2189 = dot(vec3(_550, _551, _552), vec3(cbLight._m0[_2159].xyz));
        float _4249 = isnan(0.0) ? _2189 : (isnan(_2189) ? 0.0 : max(_2189, 0.0));
        float _2192 = isnan(1.0) ? _4249 : (isnan(_4249) ? 1.0 : min(_4249, 1.0));
        float _2193 = dot(vec3(_550, _551, _552), vec3(_2186, _2187, _2188));
        float _4260 = isnan(0.0) ? _2193 : (isnan(_2193) ? 0.0 : max(_2193, 0.0));
        float _2196 = isnan(1.0) ? _4260 : (isnan(_4260) ? 1.0 : min(_4260, 1.0));
        float _2197 = dot(vec3(cbLight._m0[_2159].xyz), vec3(_2186, _2187, _2188));
        float _4271 = isnan(0.0) ? _2197 : (isnan(_2197) ? 0.0 : max(_2197, 0.0));
        float _2201 = _2178 * _2178;
        float _2205 = ((_2196 * _2196) * (_2201 + (-1.0))) + 1.0;
        float _2214 = (exp2(log2(1.0 - (isnan(1.0) ? _4271 : (isnan(_4271) ? 1.0 : min(_4271, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2215 = 1.0 - _2178;
        float _2225 = (0.5 / (((_1966 * ((_2192 * _2215) + _2178)) + 9.9999999392252902907785028219223e-09) + (((_1966 * _2215) + _2178) * _2192))) * _2192;
        float _4282 = isnan(0.0) ? _2225 : (isnan(_2225) ? 0.0 : max(_2225, 0.0));
        float _2227 = (isnan(1.0) ? _4282 : (isnan(_4282) ? 1.0 : min(_4282, 1.0))) * (_2201 / ((_2205 * _2205) * 3.141590118408203125));
        float _2228 = isnan(1.0) ? _1813 : (isnan(_1813) ? 1.0 : min(_1813, 1.0));
        _2153 = (((_2214 * cbLight._m0[_2163].x) * _2227) * _2228) + _2089;
        _2155 = (((_2214 * cbLight._m0[_2163].y) * _2227) * _2228) + _2090;
        _2157 = (((_2214 * cbLight._m0[_2163].z) * _2227) * _2228) + _2091;
    }
    float _2263;
    float _2265;
    float _2267;
    if (_1892)
    {
        _2263 = _2153;
        _2265 = _2155;
        _2267 = _2157;
    }
    else
    {
        uint _2274 = _1798 + 3u;
        uint _2278 = _1798 + 11u;
        float _2292 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2274].w)) * _553) * 0.949999988079071044921875);
        float _2293 = _2292 * _2292;
        float _2294 = cbLight._m0[_2274].x + _629;
        float _2295 = cbLight._m0[_2274].y + _630;
        float _2296 = cbLight._m0[_2274].z + _631;
        float _2300 = inversesqrt(dot(vec3(_2294, _2295, _2296), vec3(_2294, _2295, _2296)));
        float _2301 = _2300 * _2294;
        float _2302 = _2300 * _2295;
        float _2303 = _2300 * _2296;
        float _2304 = dot(vec3(_550, _551, _552), vec3(cbLight._m0[_2274].xyz));
        float _4298 = isnan(0.0) ? _2304 : (isnan(_2304) ? 0.0 : max(_2304, 0.0));
        float _2307 = isnan(1.0) ? _4298 : (isnan(_4298) ? 1.0 : min(_4298, 1.0));
        float _2308 = dot(vec3(_550, _551, _552), vec3(_2301, _2302, _2303));
        float _4309 = isnan(0.0) ? _2308 : (isnan(_2308) ? 0.0 : max(_2308, 0.0));
        float _2311 = isnan(1.0) ? _4309 : (isnan(_4309) ? 1.0 : min(_4309, 1.0));
        float _2312 = dot(vec3(cbLight._m0[_2274].xyz), vec3(_2301, _2302, _2303));
        float _4320 = isnan(0.0) ? _2312 : (isnan(_2312) ? 0.0 : max(_2312, 0.0));
        float _2316 = _2293 * _2293;
        float _2320 = ((_2311 * _2311) * (_2316 + (-1.0))) + 1.0;
        float _2329 = (exp2(log2(1.0 - (isnan(1.0) ? _4320 : (isnan(_4320) ? 1.0 : min(_4320, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2330 = 1.0 - _2293;
        float _2340 = (0.5 / (((_1966 * ((_2307 * _2330) + _2293)) + 9.9999999392252902907785028219223e-09) + (((_1966 * _2330) + _2293) * _2307))) * _2307;
        float _4331 = isnan(0.0) ? _2340 : (isnan(_2340) ? 0.0 : max(_2340, 0.0));
        float _2342 = (isnan(1.0) ? _4331 : (isnan(_4331) ? 1.0 : min(_4331, 1.0))) * (_2316 / ((_2320 * _2320) * 3.141590118408203125));
        float _2343 = isnan(1.0) ? _1814 : (isnan(_1814) ? 1.0 : min(_1814, 1.0));
        _2263 = (((_2329 * cbLight._m0[_2278].x) * _2342) * _2343) + _2153;
        _2265 = (((_2329 * cbLight._m0[_2278].y) * _2342) * _2343) + _2155;
        _2267 = (((_2329 * cbLight._m0[_2278].z) * _2342) * _2343) + _2157;
    }
    float _2478;
    float _2480;
    float _2482;
    float _2484;
    float _2486;
    float _2488;
    if (_1796.y == 0u)
    {
        float _2418 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2419 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2418;
        float _2420 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2418;
        float _2421 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2418;
        uvec4 _2433 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2434 = _2433.x;
        uint _2445 = uint((float(_2433.y) * floor(float(uint(cbSceneParam._m0[85u].y * _650) / _2434))) + floor(float(uint(cbSceneParam._m0[85u].x * _649) / _2434)));
        float _2455 = (log2(_2421 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2456 = isnan(0.0) ? _2455 : (isnan(_2455) ? 0.0 : max(_2455, 0.0));
        uint _2459 = uint(isnan(14.0) ? _2456 : (isnan(_2456) ? 14.0 : min(_2456, 14.0)));
        uvec4 _2464 = texelFetch(g_lightClusterGridBuffer, int(((_2459 << 2u) + (_2445 << 6u)) >> 2u));
        uint _2465 = _2464.x;
        uint _2466 = _2433.z;
        float _2611;
        float _2613;
        float _2615;
        float _2617;
        float _2619;
        float _2621;
        if (((((1u << ((_2466 >> 4u) & 15u)) + 4294967295u) & _2465) == 0u) || ((_2466 & 240u) == 0u))
        {
            _2611 = 0.0;
            _2613 = 0.0;
            _2615 = 0.0;
            _2617 = 0.0;
            _2619 = 0.0;
            _2621 = 0.0;
        }
        else
        {
            float _2612;
            float _2614;
            float _2616;
            float _2618;
            float _2620;
            float _2622;
            float _2772 = 0.0;
            float _2773 = 0.0;
            float _2774 = 0.0;
            float _2775 = 0.0;
            float _2776 = 0.0;
            float _2777 = 0.0;
            uint _2778 = 0u;
            uint _2787;
            bool _2788;
            for (;;)
            {
                _2787 = texelFetch(g_lightClassification, int((((_2459 << 5u) + (_2445 << 9u)) + (_2778 << 2u)) >> 2u)).x;
                _2788 = _2787 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2788)
                {
                    frontier_phi_66_pred = _2772;
                    frontier_phi_66_pred_1 = _2777;
                    frontier_phi_66_pred_2 = _2776;
                    frontier_phi_66_pred_3 = _2775;
                    frontier_phi_66_pred_4 = _2774;
                    frontier_phi_66_pred_5 = _2773;
                }
                else
                {
                    float _2917;
                    float _2918;
                    float _2919;
                    float _2920;
                    float _2921;
                    float _2922;
                    uint _2923;
                    _2917 = _2772;
                    _2918 = _2773;
                    _2919 = _2774;
                    _2920 = _2775;
                    _2921 = _2776;
                    _2922 = _2777;
                    _2923 = _2787;
                    float _2844;
                    float _2845;
                    float _2846;
                    float _2847;
                    float _2848;
                    float _2849;
                    for (;;)
                    {
                        uint _2927 = uint(findLSB(_2923)) + (_2778 << 5u);
                        uint _2924 = (_2923 + 4294967295u) & _2923;
                        uint _2929 = _2927 * 48u;
                        vec4 _2943 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2929)).x, texelFetch(g_PointLightRenderingBuffer, int(_2929 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2929 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2929 + 3u)).x));
                        uint _2949 = (_2927 * 48u) + 4u;
                        vec4 _2962 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2949)).x, texelFetch(g_PointLightRenderingBuffer, int(_2949 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2949 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2949 + 3u)).x));
                        uint _2968 = (_2927 * 48u) + 8u;
                        vec3 _2979 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2968)).x, texelFetch(g_PointLightRenderingBuffer, int(_2968 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2968 + 2u)).x));
                        float _2983 = _2943.x - _2419;
                        float _2984 = _2943.y - _2420;
                        float _2985 = _2943.z - _2421;
                        float _2986 = dot(vec3(_2983, _2984, _2985), vec3(_2983, _2984, _2985));
                        float _2989 = inversesqrt(_2986);
                        float _2990 = _2989 * _2983;
                        float _2991 = _2989 * _2984;
                        float _2992 = _2989 * _2985;
                        float _2993 = dot(vec3(_668, _671, _674), vec3(_2990, _2991, _2992));
                        float _2998 = 1.0 - (_2986 * _2943.w);
                        float _4357 = isnan(0.0) ? _2998 : (isnan(_2998) ? 0.0 : max(_2998, 0.0));
                        float _2999 = isnan(1.0) ? _4357 : (isnan(_4357) ? 1.0 : min(_4357, 1.0));
                        float _3000 = sqrt(_2986) * _2962.w;
                        float _3003 = 1.39999997615814208984375 / (_3000 + 1.39999997615814208984375);
                        float _3004 = _3003 * _3003;
                        float _3007 = ((1.0 - _3004) * _2993) + _3004;
                        float _3010 = _3000 * _3000;
                        float _3014 = ((isnan(0.0) ? _3007 : (isnan(_3007) ? 0.0 : max(_3007, 0.0))) * _2999) / ((_3010 * 0.699999988079071044921875) + 1.0);
                        float _3018 = (-0.0) - _2419;
                        float _3019 = (-0.0) - _2420;
                        float _3020 = (-0.0) - _2421;
                        float _3024 = inversesqrt(dot(vec3(_3018, _3019, _3020), vec3(_3018, _3019, _3020)));
                        float _3025 = _3024 * _3018;
                        float _3026 = _3024 * _3019;
                        float _3027 = _3024 * _3020;
                        float _3035 = exp2(log2(1.0 / ((_3010 * 3.5) + 5.0)) * 0.25);
                        float _3036 = 1.0 - _728;
                        float _3043 = sqrt(1.0 - ((1.0 - (_3036 * _3036)) * (1.0 - (_3035 * _3035))));
                        float _3044 = _3043 * _3043;
                        float _3045 = _3044 * _3044;
                        float _3046 = _3025 + _2990;
                        float _3047 = _3026 + _2991;
                        float _3048 = _3027 + _2992;
                        float _3052 = inversesqrt(dot(vec3(_3046, _3047, _3048), vec3(_3046, _3047, _3048)));
                        float _3056 = dot(vec3(_668, _671, _674), vec3(_3025, _3026, _3027));
                        float _4373 = isnan(0.0) ? _3056 : (isnan(_3056) ? 0.0 : max(_3056, 0.0));
                        float _3059 = isnan(1.0) ? _4373 : (isnan(_4373) ? 1.0 : min(_4373, 1.0));
                        float _3060 = dot(vec3(_668, _671, _674), vec3(_3052 * _3046, _3052 * _3047, _3052 * _3048));
                        float _4384 = isnan(0.0) ? _3060 : (isnan(_3060) ? 0.0 : max(_3060, 0.0));
                        float _3063 = isnan(1.0) ? _4384 : (isnan(_4384) ? 1.0 : min(_4384, 1.0));
                        float _3067 = ((_3063 * _3063) * (_3045 + (-1.0))) + 1.0;
                        float _3068 = _3003 * _3044;
                        float _3069 = _3068 * _3068;
                        float _3072 = ((1.0 - _3069) * _2993) + _3069;
                        float _4395 = isnan(0.0) ? _3072 : (isnan(_3072) ? 0.0 : max(_3072, 0.0));
                        float _3073 = isnan(1.0) ? _4395 : (isnan(_4395) ? 1.0 : min(_4395, 1.0));
                        float _3074 = 1.0 - _3044;
                        float _3084 = (0.5 / (((_3073 * ((_3059 * _3074) + _3044)) + 9.9999999392252902907785028219223e-09) + (((_3073 * _3074) + _3044) * _3059))) * _3073;
                        float _4406 = isnan(0.0) ? _3084 : (isnan(_3084) ? 0.0 : max(_3084, 0.0));
                        float _3095 = (((_3045 * 3.1415927410125732421875) * (isnan(1.0) ? _4406 : (isnan(_4406) ? 1.0 : min(_4406, 1.0)))) / ((_3067 * _3067) * ((_3010 * 2.1991131305694580078125) + 3.141590118408203125))) * _2999;
                        _2847 = (_3014 * _2962.x) + _2920;
                        _2848 = (_3014 * _2962.y) + _2921;
                        _2849 = (_3014 * _2962.z) + _2922;
                        _2844 = (_3095 * _2979.x) + _2917;
                        _2845 = (_3095 * _2979.y) + _2918;
                        _2846 = (_3095 * _2979.z) + _2919;
                        if (_2924 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2917 = _2844;
                            _2918 = _2845;
                            _2919 = _2846;
                            _2920 = _2847;
                            _2921 = _2848;
                            _2922 = _2849;
                            _2923 = _2924;
                        }
                    }
                    frontier_phi_66_pred = _2844;
                    frontier_phi_66_pred_1 = _2849;
                    frontier_phi_66_pred_2 = _2848;
                    frontier_phi_66_pred_3 = _2847;
                    frontier_phi_66_pred_4 = _2846;
                    frontier_phi_66_pred_5 = _2845;
                }
                _2612 = frontier_phi_66_pred;
                _2622 = frontier_phi_66_pred_1;
                _2620 = frontier_phi_66_pred_2;
                _2618 = frontier_phi_66_pred_3;
                _2616 = frontier_phi_66_pred_4;
                _2614 = frontier_phi_66_pred_5;
                uint _2779 = _2778 + 1u;
                if (_2779 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2772 = _2612;
                    _2773 = _2614;
                    _2774 = _2616;
                    _2775 = _2618;
                    _2776 = _2620;
                    _2777 = _2622;
                    _2778 = _2779;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2611 = _2612;
            _2613 = _2614;
            _2615 = _2616;
            _2617 = _2618;
            _2619 = _2620;
            _2621 = _2622;
        }
        uvec4 _2625 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2626 = _2625.z;
        uint _2628 = (_2626 >> 8u) & 15u;
        float _2740;
        float _2742;
        float _2744;
        float _2746;
        float _2748;
        float _2750;
        if (((4294967295u << _2628) & _2465) == 0u)
        {
            _2740 = _2611;
            _2742 = _2613;
            _2744 = _2615;
            _2746 = _2617;
            _2748 = _2619;
            _2750 = _2621;
        }
        else
        {
            float _2765 = inversesqrt(dot(vec3(_2419, _2420, _2421), vec3(_2419, _2420, _2421)));
            float _2766 = _2765 * _2419;
            float _2767 = _2765 * _2420;
            float _2768 = _2765 * _2421;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2628 < ((_2626 >> 12u) & 15u))
            {
                float _2741;
                float _2743;
                float _2745;
                float _2747;
                float _2749;
                float _2751;
                float _2900 = _2611;
                float _2901 = _2613;
                float _2902 = _2615;
                float _2903 = _2617;
                float _2904 = _2619;
                float _2905 = _2621;
                uint _2906 = _2628;
                uint _2915;
                bool _2916;
                for (;;)
                {
                    _2915 = texelFetch(g_lightClassification, int((((_2459 << 5u) + (_2445 << 9u)) + (_2906 << 2u)) >> 2u)).x;
                    _2916 = _2915 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2916)
                    {
                        frontier_phi_77_pred = _2905;
                        frontier_phi_77_pred_1 = _2904;
                        frontier_phi_77_pred_2 = _2903;
                        frontier_phi_77_pred_3 = _2902;
                        frontier_phi_77_pred_4 = _2901;
                        frontier_phi_77_pred_5 = _2900;
                    }
                    else
                    {
                        float _3109;
                        float _3110;
                        float _3111;
                        float _3112;
                        float _3113;
                        float _3114;
                        float _3404;
                        float _3405;
                        float _3406;
                        float _3407;
                        float _3408;
                        float _3409;
                        float _3122 = _2900;
                        float _3123 = _2901;
                        float _3124 = _2902;
                        float _3125 = _2903;
                        float _3126 = _2904;
                        float _3127 = _2905;
                        uint _3128 = _2915;
                        uint _3129;
                        vec4 _3154;
                        float _3155;
                        vec4 _3170;
                        vec3 _3182;
                        vec4 _3197;
                        vec4 _3213;
                        float _3260;
                        bool _3261;
                        for (;;)
                        {
                            uint _3139 = ((_2906 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3128));
                            _3129 = (_3128 + 4294967295u) & _3128;
                            uint _3141 = _3139 * 40u;
                            _3154 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3141)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3141 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3141 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3141 + 3u)).x));
                            _3155 = _3154.w;
                            uint _3157 = (_3139 * 40u) + 4u;
                            _3170 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3157)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3157 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3157 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3157 + 3u)).x));
                            uint _3172 = (_3139 * 40u) + 8u;
                            _3182 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3172)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3172 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3172 + 2u)).x));
                            uint _3184 = (_3139 * 40u) + 16u;
                            _3197 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3184)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3184 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3184 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3184 + 3u)).x));
                            uint _3200 = (_3139 * 40u) + 20u;
                            _3213 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3200)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3200 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3200 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3200 + 3u)).x));
                            uint _3216 = (_3139 * 40u) + 24u;
                            vec4 _3229 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3216)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3216 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3216 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3216 + 3u)).x));
                            uint _3235 = (_3139 * 40u) + 28u;
                            vec4 _3248 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3235)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3235 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3235 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3235 + 3u)).x));
                            _3260 = fma(_2421, _3248.z, fma(_2420, _3248.y, _3248.x * _2419)) + _3248.w;
                            _3261 = !((fma(_2421, _3229.z, fma(_2420, _3229.y, _3229.x * _2419)) + _3229.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3261)
                            {
                                float _3288 = _3154.x - _2419;
                                float _3289 = _3154.y - _2420;
                                float _3290 = _3154.z - _2421;
                                float _3291 = dot(vec3(_3288, _3289, _3290), vec3(_3288, _3289, _3290));
                                float _3294 = inversesqrt(_3291);
                                float _3295 = _3294 * _3288;
                                float _3296 = _3294 * _3289;
                                float _3297 = _3294 * _3290;
                                float _3301 = 1.0 - (_3291 / (_3155 * _3155));
                                float _4417 = isnan(0.0) ? _3301 : (isnan(_3301) ? 0.0 : max(_3301, 0.0));
                                float _3302 = isnan(1.0) ? _4417 : (isnan(_4417) ? 1.0 : min(_4417, 1.0));
                                float _3306 = sqrt(_3291) * _3170.w;
                                float _3308 = 1.39999997615814208984375 / (_3306 + 1.39999997615814208984375);
                                float _3309 = _3308 * _3308;
                                float _3312 = ((1.0 - _3309) * dot(vec3(_3295, _3296, _3297), vec3(_668, _671, _674))) + _3309;
                                float _3315 = _3306 * _3306;
                                float _3319 = (fma(_2421, _3197.z, fma(_2420, _3197.y, _3197.x * _2419)) + _3197.w) / _3260;
                                float _3320 = (fma(_2421, _3213.z, fma(_2420, _3213.y, _3213.x * _2419)) + _3213.w) / _3260;
                                float _3324 = 1.0 - dot(vec2(_3319, _3320), vec2(_3319, _3320));
                                float _4433 = isnan(0.0) ? _3324 : (isnan(_3324) ? 0.0 : max(_3324, 0.0));
                                float _3325 = isnan(1.0) ? _4433 : (isnan(_4433) ? 1.0 : min(_4433, 1.0));
                                float _3326 = _3325 * (((isnan(0.0) ? _3312 : (isnan(_3312) ? 0.0 : max(_3312, 0.0))) * _3302) / ((_3315 * 0.699999988079071044921875) + 1.0));
                                float _3338 = exp2(log2(1.0 / ((_3315 * 3.5) + 5.0)) * 0.25);
                                float _3339 = 1.0 - _728;
                                float _3346 = sqrt(1.0 - ((1.0 - (_3339 * _3339)) * (1.0 - (_3338 * _3338))));
                                float _3347 = _3346 * _3346;
                                float _3348 = _3347 * _3347;
                                float _3349 = _3295 - _2766;
                                float _3350 = _3296 - _2767;
                                float _3351 = _3297 - _2768;
                                float _3355 = inversesqrt(dot(vec3(_3349, _3350, _3351), vec3(_3349, _3350, _3351)));
                                float _3359 = dot(vec3(_668, _671, _674), vec3((-0.0) - _2766, (-0.0) - _2767, (-0.0) - _2768));
                                float _4444 = isnan(0.0) ? _3359 : (isnan(_3359) ? 0.0 : max(_3359, 0.0));
                                float _3362 = isnan(1.0) ? _4444 : (isnan(_4444) ? 1.0 : min(_4444, 1.0));
                                float _3363 = dot(vec3(_668, _671, _674), vec3(_3355 * _3349, _3355 * _3350, _3355 * _3351));
                                float _4455 = isnan(0.0) ? _3363 : (isnan(_3363) ? 0.0 : max(_3363, 0.0));
                                float _3366 = isnan(1.0) ? _4455 : (isnan(_4455) ? 1.0 : min(_4455, 1.0));
                                float _3370 = ((_3366 * _3366) * (_3348 + (-1.0))) + 1.0;
                                float _3371 = _3308 * _3347;
                                float _3372 = _3371 * _3371;
                                float _3378 = ((1.0 - _3372) * dot(vec3(_668, _671, _674), vec3(_3295, _3296, _3297))) + _3372;
                                float _4466 = isnan(0.0) ? _3378 : (isnan(_3378) ? 0.0 : max(_3378, 0.0));
                                float _3379 = isnan(1.0) ? _4466 : (isnan(_4466) ? 1.0 : min(_4466, 1.0));
                                float _3380 = 1.0 - _3347;
                                float _3390 = (0.5 / (((_3379 * ((_3362 * _3380) + _3347)) + 9.9999999392252902907785028219223e-09) + (((_3379 * _3380) + _3347) * _3362))) * _3379;
                                float _4477 = isnan(0.0) ? _3390 : (isnan(_3390) ? 0.0 : max(_3390, 0.0));
                                float _3400 = (_3325 * _3302) * (((_3348 * 3.1415927410125732421875) * (isnan(1.0) ? _4477 : (isnan(_4477) ? 1.0 : min(_4477, 1.0)))) / ((_3370 * _3370) * ((_3315 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3326 * _3170.y;
                                frontier_phi_83_pred_1 = _3326 * _3170.x;
                                frontier_phi_83_pred_2 = _3400 * _3182.z;
                                frontier_phi_83_pred_3 = _3400 * _3182.y;
                                frontier_phi_83_pred_4 = _3400 * _3182.x;
                                frontier_phi_83_pred_5 = _3326 * _3170.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3408 = frontier_phi_83_pred;
                            _3407 = frontier_phi_83_pred_1;
                            _3406 = frontier_phi_83_pred_2;
                            _3405 = frontier_phi_83_pred_3;
                            _3404 = frontier_phi_83_pred_4;
                            _3409 = frontier_phi_83_pred_5;
                            _3112 = _3407 + _3125;
                            _3113 = _3408 + _3126;
                            _3114 = _3409 + _3127;
                            _3109 = _3404 + _3122;
                            _3110 = _3405 + _3123;
                            _3111 = _3406 + _3124;
                            if (_3129 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3122 = _3109;
                                _3123 = _3110;
                                _3124 = _3111;
                                _3125 = _3112;
                                _3126 = _3113;
                                _3127 = _3114;
                                _3128 = _3129;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3114;
                        frontier_phi_77_pred_1 = _3113;
                        frontier_phi_77_pred_2 = _3112;
                        frontier_phi_77_pred_3 = _3111;
                        frontier_phi_77_pred_4 = _3110;
                        frontier_phi_77_pred_5 = _3109;
                    }
                    _2751 = frontier_phi_77_pred;
                    _2749 = frontier_phi_77_pred_1;
                    _2747 = frontier_phi_77_pred_2;
                    _2745 = frontier_phi_77_pred_3;
                    _2743 = frontier_phi_77_pred_4;
                    _2741 = frontier_phi_77_pred_5;
                    uint _2907 = _2906 + 1u;
                    if (_2907 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2900 = _2741;
                        _2901 = _2743;
                        _2902 = _2745;
                        _2903 = _2747;
                        _2904 = _2749;
                        _2905 = _2751;
                        _2906 = _2907;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2745;
                frontier_phi_58_59_ladder_1 = _2751;
                frontier_phi_58_59_ladder_2 = _2749;
                frontier_phi_58_59_ladder_3 = _2747;
                frontier_phi_58_59_ladder_4 = _2743;
                frontier_phi_58_59_ladder_5 = _2741;
            }
            else
            {
                frontier_phi_58_59_ladder = _2615;
                frontier_phi_58_59_ladder_1 = _2621;
                frontier_phi_58_59_ladder_2 = _2619;
                frontier_phi_58_59_ladder_3 = _2617;
                frontier_phi_58_59_ladder_4 = _2613;
                frontier_phi_58_59_ladder_5 = _2611;
            }
            _2740 = frontier_phi_58_59_ladder_5;
            _2742 = frontier_phi_58_59_ladder_4;
            _2744 = frontier_phi_58_59_ladder;
            _2746 = frontier_phi_58_59_ladder_3;
            _2748 = frontier_phi_58_59_ladder_2;
            _2750 = frontier_phi_58_59_ladder_1;
        }
        float _2755 = isnan(1.0) ? _712 : (isnan(_712) ? 1.0 : min(_712, 1.0));
        _2478 = (_2755 * _2746) + _1930;
        _2480 = (_2755 * _2748) + _1932;
        _2482 = (_2755 * _2750) + _1934;
        _2484 = ((_2740 * 0.039999999105930328369140625) * _2755) + _2263;
        _2486 = ((_2742 * 0.039999999105930328369140625) * _2755) + _2265;
        _2488 = ((_2744 * 0.039999999105930328369140625) * _2755) + _2267;
    }
    else
    {
        _2478 = _1930;
        _2480 = _1932;
        _2482 = _1934;
        _2484 = _2263;
        _2486 = _2265;
        _2488 = _2267;
    }
    uint _2494 = _688 + uint(cbMatDynParam._m0[0u].w);
    float _2500 = cbMtdParam._m0[13u].y * cbMtdParam._m0[15u].y;
    float _2506 = (((((_2500 * cbMtdParam._m0[10u].x) * _410.x) * _433) * (((1.0 - _487) * cbMtdParam._m0[16u].z) + _487)) * _524) * cbInstanceData._m0[_2494].x;
    float _2512 = (((((_2500 * cbMtdParam._m0[10u].y) * _410.y) * _433) * (((1.0 - _489) * cbMtdParam._m0[16u].z) + _489)) * _524) * cbInstanceData._m0[_2494].y;
    float _2518 = (((((_2500 * cbMtdParam._m0[10u].z) * _410.z) * _433) * (((1.0 - _491) * cbMtdParam._m0[16u].z) + _491)) * _524) * cbInstanceData._m0[_2494].z;
    float _4493 = isnan(0.0) ? _698 : (isnan(_698) ? 0.0 : max(_698, 0.0));
    float _4504 = isnan(0.0) ? _699 : (isnan(_699) ? 0.0 : max(_699, 0.0));
    float _4515 = isnan(0.0) ? _700 : (isnan(_700) ? 0.0 : max(_700, 0.0));
    float _2535 = (((isnan(1.0) ? _4493 : (isnan(_4493) ? 1.0 : min(_4493, 1.0))) * (_2478 + ((isnan(0.0) ? _1470 : (isnan(_1470) ? 0.0 : max(_1470, 0.0))) * _712))) + ((_2484 + ((isnan(0.0) ? _1762 : (isnan(_1762) ? 0.0 : max(_1762, 0.0))) * _1549)) * cbPerFrame._m0[3u].x)) + _2506;
    float _2537 = (_2512 + ((_2486 + ((isnan(0.0) ? _1765 : (isnan(_1765) ? 0.0 : max(_1765, 0.0))) * _1549)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4504 : (isnan(_4504) ? 1.0 : min(_4504, 1.0))) * (_2480 + ((isnan(0.0) ? _1473 : (isnan(_1473) ? 0.0 : max(_1473, 0.0))) * _712)));
    float _2539 = (_2518 + ((_2488 + ((isnan(0.0) ? _1768 : (isnan(_1768) ? 0.0 : max(_1768, 0.0))) * _1549)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4515 : (isnan(_4515) ? 1.0 : min(_4515, 1.0))) * (_2482 + ((isnan(0.0) ? _1476 : (isnan(_1476) ? 0.0 : max(_1476, 0.0))) * _712)));
    float _2540 = isnan(0.0) ? _2535 : (isnan(_2535) ? 0.0 : max(_2535, 0.0));
    float _2541 = isnan(0.0) ? _2537 : (isnan(_2537) ? 0.0 : max(_2537, 0.0));
    float _2542 = isnan(0.0) ? _2539 : (isnan(_2539) ? 0.0 : max(_2539, 0.0));
    float _2548 = cbMtdParam._m0[2u].x * _2506;
    float _2549 = cbMtdParam._m0[2u].y * _2512;
    float _2550 = cbMtdParam._m0[2u].z * _2518;
    float _4541 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2552 = isnan(1.0) ? _4541 : (isnan(_4541) ? 1.0 : min(_4541, 1.0));
    uint _2553 = _687 + 6u;
    float _2561 = _649 / cbSceneParam._m0[86u].x;
    float _2562 = _650 / cbSceneParam._m0[86u].y;
    vec4 _2576 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2561, _2562, (log2((isnan(cbSceneParam._m0[77u].w) ? _572 : (isnan(_572) ? cbSceneParam._m0[77u].w : min(_572, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2578 = _2576.x;
    float _2579 = _2576.y;
    float _2580 = _2576.z;
    float _2581 = _2576.w;
    float _2673;
    float _2675;
    float _2677;
    float _2679;
    if (_572 > cbSceneParam._m0[78u].w)
    {
        float _2636 = isnan(_572) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _572 : min(cbSceneParam._m0[80u].w, _572));
        float _2637 = _2636 / _572;
        float _2648 = _2637 * _622;
        float _2649 = _623 * _2637;
        float _2650 = (-0.0) - _2649;
        float _2651 = _2637 * _624;
        float _2653 = (cbSceneParam._m0[77u].w * _2650) / _2636;
        float _2654 = _2653 + cbSceneParam._m0[79u].w;
        float _2655 = cbSceneParam._m0[79u].w - _2649;
        float _2661 = sqrt(((_2648 * _2648) + (_2649 * _2649)) + (_2651 * _2651));
        float _2664 = (1.0 - (cbSceneParam._m0[77u].w / _2636)) * _2661;
        float _2669 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2671 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2857;
        if (abs((_2650 - _2653) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2857 = ((((_2654 > 0.0) ? exp2(_2669 * _2654) : (2.0 - exp2(_2671 * _2654))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2664;
        }
        else
        {
            float _2801 = 1.0 / cbSceneParam._m0[80u].x;
            float _2802 = isnan(_2655) ? _2654 : (isnan(_2654) ? _2655 : max(_2654, _2655));
            float _2803 = isnan(_2655) ? _2654 : (isnan(_2654) ? _2655 : min(_2654, _2655));
            float _2812 = isnan(0.0) ? _2802 : (isnan(_2802) ? 0.0 : min(_2802, 0.0));
            float _2813 = isnan(0.0) ? _2803 : (isnan(_2803) ? 0.0 : min(_2803, 0.0));
            _2857 = ((abs(_2661 / _2650) * cbSceneParam._m0[80u].y) * ((((_2812 - _2813) * 2.0) - ((exp2(_2669 * (isnan(0.0) ? _2802 : (isnan(_2802) ? 0.0 : max(_2802, 0.0)))) - exp2(_2669 * (isnan(0.0) ? _2803 : (isnan(_2803) ? 0.0 : max(_2803, 0.0))))) * _2801)) - ((exp2(_2671 * _2812) - exp2(_2671 * _2813)) * _2801))) + (_2664 * cbSceneParam._m0[80u].z);
        }
        vec4 _2859 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2561, _2562, 1.0), 0.0);
        float _2868 = exp2((_2857 * (-1.44269502162933349609375)) * (1.0 - _2859.w));
        float _2869 = log2(_2868);
        float _2885 = log2(_2581);
        _2673 = (exp2(_2885 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2869 * cbSceneParam._m0[78u].x)) * _2859.x) / cbSceneParam._m0[78u].x)) + _2578;
        _2675 = (exp2(_2885 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2869 * cbSceneParam._m0[78u].y)) * _2859.y) / cbSceneParam._m0[78u].y)) + _2579;
        _2677 = (exp2(_2885 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2869 * cbSceneParam._m0[78u].z)) * _2859.z) / cbSceneParam._m0[78u].z)) + _2580;
        _2679 = _2868 * _2581;
    }
    else
    {
        _2673 = _2578;
        _2675 = _2579;
        _2677 = _2580;
        _2679 = _2581;
    }
    bool _2895;
    vec4 _2689;
    vec4 _2711;
    float _2713;
    float _2717;
    float _2718;
    float _2719;
    float _2722;
    float _2725;
    float _2728;
    float _2729;
    bool _2739;
    for (;;)
    {
        _2689 = cbMatDynParam._m0[0u];
        float _2691 = roundEven(_2689.y);
        bool _2692 = _2691 == 3.0;
        float _2693 = log2(_2679);
        float _2697 = exp2(_2693 * cbSceneParam._m0[78u].x);
        float _2698 = exp2(_2693 * cbSceneParam._m0[78u].y);
        float _2699 = exp2(_2693 * cbSceneParam._m0[78u].z);
        float _2700 = _2697 * _2540;
        float _2701 = _2698 * _2541;
        float _2702 = _2699 * _2542;
        float _2709 = _638 + (-0.5);
        _2711 = cbMtdParam._m0[1u];
        _2713 = _2711.y * _2709;
        float _2716 = (_2691 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2717 = _2716 * (_2692 ? _2700 : (_2700 + (cbSceneParam._m0[72u].w * _2673)));
        _2718 = _2716 * (_2692 ? _2701 : (_2701 + (cbSceneParam._m0[72u].w * _2675)));
        _2719 = _2716 * (_2692 ? _2702 : (_2702 + (cbSceneParam._m0[72u].w * _2677)));
        _2722 = ((_2548 * _2552) * _2697) * _2716;
        _2725 = ((_2549 * _2552) * _2698) * _2716;
        _2728 = ((_2550 * _2552) * _2699) * _2716;
        _2729 = _2709 * 0.999000012874603271484375;
        _2739 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2739)
        {
            if ((cbInstanceData._m0[_687 + 7u].x + _2729) < 0.5)
            {
                _2895 = true;
                break;
            }
        }
        uint _2836 = _688 + uint(_2689.w);
        if ((cbInstanceData._m0[_2836].w < 1.0) && ((cbInstanceData._m0[_2836].w + _2729) < 0.5))
        {
            _2895 = true;
            break;
        }
        if ((_2713 + 1.0) < _2711.x)
        {
            _2895 = true;
            break;
        }
        _2895 = false;
        break;
    }
    float _3100;
    if (_2895)
    {
        discard_state = true;
        _3100 = 0.0;
    }
    else
    {
        _3100 = cbInstanceData._m0[_2553].w;
    }
    SV_Target.x = _2717;
    SV_Target.y = _2718;
    SV_Target.z = _2719;
    SV_Target.w = _3100;
    SV_Target_1.x = _2722;
    SV_Target_1.y = _2725;
    SV_Target_1.z = _2728;
    SV_Target_1.w = cbInstanceData._m0[_2553].w;
    discard_exit();
}


