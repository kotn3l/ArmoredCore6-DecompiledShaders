#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[19];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Planet_GroundSurface_002_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_Planet_GroundSurface_002_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_Planet_GroundSurface_002_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D M_Planet_GroundSurface_002_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D M_Planet_GroundSurface_002_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_Planet_GroundSurface_002_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_Planet_GroundSurface_002_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_Planet_GroundSurface_002_snp_0_Texture2D_2;
layout(set = 0, binding = 7) uniform texture2D M_Planet_GroundSurface_002_snp_0_Texture2D_4;
layout(set = 0, binding = 8) uniform texture2D M_Planet_GroundSurface_002_snp_0_Texture2D_6;
layout(set = 0, binding = 9) uniform texture2D M_Planet_GroundSurface_002_snp_0_Texture2D_8;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1356;
float _3767;
float _3768;
float _3769;
float _3770;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _202 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _203 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _204 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _209 = inversesqrt(dot(vec3(_202, _203, _204), vec3(_202, _203, _204)));
    float _216 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _217 = _216 * NORMAL.x;
    float _218 = _216 * NORMAL.y;
    float _219 = _216 * NORMAL.z;
    float _223 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _231;
    float _232;
    float _233;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _231 = (-0.0) - _217;
        _232 = (-0.0) - _218;
        _233 = (-0.0) - _219;
    }
    else
    {
        _231 = _217;
        _232 = _218;
        _233 = _219;
    }
    float _268 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _272 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _276 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _280 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _290 = cbSceneParam._m0[71u].x - (_268 / _280);
    float _291 = cbSceneParam._m0[71u].y - (_272 / _280);
    float _292 = cbSceneParam._m0[71u].z - (_276 / _280);
    uvec4 _296 = floatBitsToUint(cbMtdParam._m0[9u]);
    bool _298 = _296.z != 0u;
    vec4 _317 = texture(sampler2D(M_Planet_GroundSurface_002_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _320 = _317.x;
    float _321 = _317.y;
    float _322 = _317.z;
    bool _343 = _296.x != 0u;
    vec4 _360 = texture(sampler2D(M_Planet_GroundSurface_002_snp_0_Texture2D_8, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w));
    float _362 = _360.x;
    float _363 = _360.y;
    float _364 = _360.z;
    float _380 = _343 ? ((cbMtdParam._m0[17u].y * (cbMtdParam._m0[10u].x - _362)) + _362) : (_362 * cbMtdParam._m0[10u].x);
    float _381 = _343 ? ((cbMtdParam._m0[17u].y * (cbMtdParam._m0[10u].y - _363)) + _363) : (_363 * cbMtdParam._m0[10u].y);
    float _382 = _343 ? ((cbMtdParam._m0[17u].y * (cbMtdParam._m0[10u].z - _364)) + _364) : (_364 * cbMtdParam._m0[10u].z);
    bool _384 = _296.y != 0u;
    vec4 _402 = texture(sampler2D(M_Planet_GroundSurface_002_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _404 = _402.x;
    float _405 = _402.y;
    float _406 = _402.z;
    vec4 _434 = texture(sampler2D(M_Planet_GroundSurface_002_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w));
    float _436 = _434.x;
    float _437 = _434.y;
    float _448 = ((cbMtdParam._m0[16u].w * (-1.39999997615814208984375)) * (1.0 - _436)) + 1.0;
    float _3779 = isnan(0.0) ? _448 : (isnan(_448) ? 0.0 : max(_448, 0.0));
    float _453 = (cbMtdParam._m0[16u].y * ((isnan(1.0) ? _3779 : (isnan(_3779) ? 1.0 : min(_3779, 1.0))) - _436)) + _436;
    float _460 = (_453 * ((_384 ? ((cbMtdParam._m0[14u].y * (cbMtdParam._m0[11u].x - _404)) + _404) : (_404 * cbMtdParam._m0[11u].x)) - _380)) + _380;
    float _461 = (_453 * ((_384 ? ((cbMtdParam._m0[14u].y * (cbMtdParam._m0[11u].y - _405)) + _405) : (_405 * cbMtdParam._m0[11u].y)) - _381)) + _381;
    float _462 = (_453 * ((_384 ? ((cbMtdParam._m0[14u].y * (cbMtdParam._m0[11u].z - _406)) + _406) : (_406 * cbMtdParam._m0[11u].z)) - _382)) + _382;
    float _466 = (((1.0 - _437) * (-1.39999997615814208984375)) * cbMtdParam._m0[16u].z) + 1.0;
    float _3790 = isnan(0.0) ? _466 : (isnan(_466) ? 0.0 : max(_466, 0.0));
    float _471 = (cbMtdParam._m0[14u].x * ((isnan(1.0) ? _3790 : (isnan(_3790) ? 1.0 : min(_3790, 1.0))) - _437)) + _437;
    float _478 = (_471 * ((_298 ? ((cbMtdParam._m0[14u].z * (cbMtdParam._m0[12u].x - _320)) + _320) : (_320 * cbMtdParam._m0[12u].x)) - _460)) + _460;
    float _479 = (_471 * ((_298 ? ((cbMtdParam._m0[14u].z * (cbMtdParam._m0[12u].y - _321)) + _321) : (_321 * cbMtdParam._m0[12u].y)) - _461)) + _461;
    float _480 = (_471 * ((_298 ? ((cbMtdParam._m0[14u].z * (cbMtdParam._m0[12u].z - _322)) + _322) : (_322 * cbMtdParam._m0[12u].z)) - _462)) + _462;
    vec4 _492 = texture(sampler2D(M_Planet_GroundSurface_002_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    vec4 _509 = texture(sampler2D(M_Planet_GroundSurface_002_snp_0_Texture2D_13, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _516 = cbMtdParam._m0[15u].y * _509.x;
    float _523 = (_516 * (_492.x - _478)) + _478;
    float _524 = (_516 * (_492.y - _479)) + _479;
    float _525 = (_516 * (_492.z - _480)) + _480;
    float _539 = inversesqrt(dot(vec3(_290, _291, _292), vec3(_290, _291, _292)));
    float _546 = dot(vec4(_539 * _290, _539 * _291, _539 * _292, 0.0), vec4(_231, _232, _233, 0.0)) - cbMtdParam._m0[15u].x;
    float _3801 = isnan(0.0) ? _546 : (isnan(_546) ? 0.0 : max(_546, 0.0));
    float _556 = (exp2(log2(1.0 - (isnan(1.0) ? _3801 : (isnan(_3801) ? 1.0 : min(_3801, 1.0)))) * (isnan(0.001000000047497451305389404296875) ? cbMtdParam._m0[14u].w : (isnan(cbMtdParam._m0[14u].w) ? 0.001000000047497451305389404296875 : max(cbMtdParam._m0[14u].w, 0.001000000047497451305389404296875)))) * (cbMtdParam._m0[15u].w - cbMtdParam._m0[15u].z)) + cbMtdParam._m0[15u].z;
    float _566 = (((_556 * cbMtdParam._m0[13u].x) - _523) * _556) + _523;
    float _567 = (((_556 * cbMtdParam._m0[13u].y) - _524) * _556) + _524;
    float _568 = (((_556 * cbMtdParam._m0[13u].z) - _525) * _556) + _525;
    vec4 _580 = texture(sampler2D(M_Planet_GroundSurface_002_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    vec4 _597 = texture(sampler2D(M_Planet_GroundSurface_002_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _599 = _597.x;
    float _600 = _597.y;
    float _601 = _597.z;
    float _608 = ((_580.x - _599) * _453) + _599;
    float _609 = ((_580.y - _600) * _453) + _600;
    float _610 = ((_580.z - _601) * _453) + _601;
    vec4 _622 = texture(sampler2D(M_Planet_GroundSurface_002_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _648 = texture(sampler2D(M_Planet_GroundSurface_002_snp_0_Texture2D_10, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _660 = (((_622.x - _608) * _471) + _608) + ((_648.x + (-0.5)) * cbMtdParam._m0[17u].x);
    float _661 = (((_622.y - _609) * _471) + _609) + ((_648.y + (-0.5)) * cbMtdParam._m0[17u].x);
    float _662 = (((_622.z - _610) * _471) + _610) + ((_648.z + (-0.5)) * cbMtdParam._m0[17u].x);
    vec4 _675 = texture(sampler2D(M_Planet_GroundSurface_002_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _686 = ((_675.x - _660) * _516) + _660;
    float _687 = ((_675.y - _661) * _516) + _661;
    float _688 = ((_675.z - _662) * _516) + _662;
    float _698 = ((1.0 - _688) * _556) + _688;
    float _702 = ((((0.502016007900238037109375 - _686) * _556) + _686) * 2.0) + (-1.0);
    float _704 = ((((0.502016007900238037109375 - _687) * _556) + _687) * 2.0) + (-1.0);
    float _705 = dot(vec2(_702, _704), vec2(_702, _704));
    float _3817 = isnan(0.0) ? _705 : (isnan(_705) ? 0.0 : max(_705, 0.0));
    float _710 = sqrt(1.0 - (isnan(1.0) ? _3817 : (isnan(_3817) ? 1.0 : min(_3817, 1.0))));
    float _715 = inversesqrt(dot(vec3(_268, _272, _276), vec3(_268, _272, _276)));
    bool _720 = _296.w != 0u;
    float _730 = inversesqrt(dot(vec3(cbMtdParam._m0[17u].zw, cbMtdParam._m0[18u].x), vec3(cbMtdParam._m0[17u].zw, cbMtdParam._m0[18u].x)));
    uint _734 = uint(roundEven(NORMAL.w)) * 13u;
    uint _735 = _734 + 5u;
    uint _740 = floatBitsToUint(cbInstanceData._m0[_735]).x * 14u;
    float _746 = _720 ? cbLight._m0[_740].x : (_730 * cbMtdParam._m0[17u].z);
    float _747 = _720 ? cbLight._m0[_740].y : (_730 * cbMtdParam._m0[17u].w);
    float _748 = _720 ? cbLight._m0[_740].z : (_730 * cbMtdParam._m0[18u].x);
    float _752 = inversesqrt(dot(vec3(_746, _747, _748), vec3(_746, _747, _748)));
    float _753 = _746 * _752;
    float _754 = _747 * _752;
    float _755 = _748 * _752;
    float _759 = inversesqrt(dot(vec3(_753, _754, _755), vec3(_753, _754, _755)));
    float _775 = (0.9700000286102294921875 - exp2(log2((dot(vec4(_715 * _268, _715 * _272, _715 * _276, 0.0), vec4(_759 * _753, _759 * _754, _759 * _755, 0.0)) + 1.0) * 0.5) * 0.017999999225139617919921875)) * (-5.0);
    float _3828 = isnan(0.0) ? _775 : (isnan(_775) ? 0.0 : max(_775, 0.0));
    float _777 = isnan(1.0) ? _3828 : (isnan(_3828) ? 1.0 : min(_3828, 1.0));
    float _783 = exp2(log2(_777 * 6.5) * 7.0);
    float _3839 = isnan(0.0) ? _783 : (isnan(_783) ? 0.0 : max(_783, 0.0));
    float _785 = (isnan(1.0) ? _3839 : (isnan(_3839) ? 1.0 : min(_3839, 1.0))) + _777;
    float _3850 = isnan(0.0) ? _785 : (isnan(_785) ? 0.0 : max(_785, 0.0));
    float _786 = isnan(1.0) ? _3850 : (isnan(_3850) ? 1.0 : min(_3850, 1.0));
    float _789 = fma(_710, _231, fma(_704, _223 * TANGENT.x, (_209 * _202) * _702));
    float _792 = fma(_710, _232, fma(_704, _223 * TANGENT.y, (_209 * _203) * _702));
    float _795 = fma(_710, _233, fma(_704, _223 * TANGENT.z, (_209 * _204) * _702));
    float _799 = inversesqrt(dot(vec3(_789, _792, _795), vec3(_789, _792, _795)));
    float _800 = _799 * _789;
    float _801 = _799 * _792;
    float _802 = _799 * _795;
    float _3861 = isnan(0.0) ? _698 : (isnan(_698) ? 0.0 : max(_698, 0.0));
    float _803 = isnan(1.0) ? _3861 : (isnan(_3861) ? 1.0 : min(_3861, 1.0));
    float _3872 = isnan(0.0) ? _566 : (isnan(_566) ? 0.0 : max(_566, 0.0));
    float _3883 = isnan(0.0) ? _567 : (isnan(_567) ? 0.0 : max(_567, 0.0));
    float _3894 = isnan(0.0) ? _568 : (isnan(_568) ? 0.0 : max(_568, 0.0));
    float _819 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _859 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _868 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _859);
    float _869 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _859);
    float _870 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _859);
    float _874 = inversesqrt(dot(vec3(_868, _869, _870), vec3(_868, _869, _870)));
    float _875 = _868 * _874;
    float _876 = _869 * _874;
    float _877 = _870 * _874;
    vec4 _882 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _884 = _882.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1037 = sqrt(((_868 * _868) + (_869 * _869)) + (_870 * _870));
        float _1043 = (cbMatDynParam._m0[5u].x * _1037) + cbMatDynParam._m0[5u].y;
        float _3905 = isnan(0.0) ? _1043 : (isnan(_1043) ? 0.0 : max(_1043, 0.0));
        float _1044 = isnan(1.0) ? _3905 : (isnan(_3905) ? 1.0 : min(_3905, 1.0));
        float _1048 = (cbMatDynParam._m0[5u].z * _1037) + cbMatDynParam._m0[5u].w;
        float _3916 = isnan(0.0) ? _1048 : (isnan(_1048) ? 0.0 : max(_1048, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3916 : (isnan(_3916) ? 1.0 : min(_3916, 1.0))) - _1044)) + _1044) < ((_884 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _895 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _896 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _914 = fma(_802, cbSceneParam._m0[5u].z, fma(_801, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _800));
    float _917 = fma(_802, cbSceneParam._m0[6u].z, fma(_801, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _800));
    float _920 = fma(_802, cbSceneParam._m0[7u].z, fma(_801, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _800));
    uint _933 = _734 + 9u;
    uint _934 = _933 + uint(cbMatDynParam._m0[0u].w);
    float _940 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3872 : (isnan(_3872) ? 1.0 : min(_3872, 1.0)))) * cbInstanceData._m0[_934].x;
    float _941 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3883 : (isnan(_3883) ? 1.0 : min(_3883, 1.0)))) * cbInstanceData._m0[_934].y;
    float _942 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3894 : (isnan(_3894) ? 1.0 : min(_3894, 1.0)))) * cbInstanceData._m0[_934].z;
    float _3927 = isnan(0.0) ? _940 : (isnan(_940) ? 0.0 : max(_940, 0.0));
    float _943 = isnan(1.0) ? _3927 : (isnan(_3927) ? 1.0 : min(_3927, 1.0));
    float _3938 = isnan(0.0) ? _941 : (isnan(_941) ? 0.0 : max(_941, 0.0));
    float _944 = isnan(1.0) ? _3938 : (isnan(_3938) ? 1.0 : min(_3938, 1.0));
    float _3949 = isnan(0.0) ? _942 : (isnan(_942) ? 0.0 : max(_942, 0.0));
    float _945 = isnan(1.0) ? _3949 : (isnan(_3949) ? 1.0 : min(_3949, 1.0));
    vec4 _954 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _895, cbSceneParam._m0[86u].y * _896));
    float _957 = _954.x * TEXCOORD.z;
    float _958 = dot(vec3(_800, _801, _802), vec3(_875, _876, _877));
    float _961 = _958 * 2.0;
    float _965 = (_961 * _800) - _875;
    float _966 = (_961 * _801) - _876;
    float _967 = (_961 * _802) - _877;
    float _971 = abs(dot(vec3(_875, _876, _877), vec3(_800, _801, _802)));
    float _3960 = isnan(0.0) ? _971 : (isnan(_971) ? 0.0 : max(_971, 0.0));
    float _973 = sqrt(_803);
    float _986 = exp2((_973 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3960 : (isnan(_3960) ? 1.0 : min(_3960, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_973 * 3.0));
    float _1018 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1022 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1026 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1355;
    float _1357;
    float _1358;
    float _1359;
    float _1360;
    float _1361;
    float _1362;
    float _1363;
    float _1364;
    float _1365;
    float _1366;
    float _1367;
    float _1368;
    float _1369;
    float _1370;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1082 = fma(_1026, cbModelParam._m0[26u].z, fma(_1022, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1018));
        float _1086 = fma(_1026, cbModelParam._m0[27u].z, fma(_1022, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1018));
        float _1090 = fma(_1026, cbModelParam._m0[28u].z, fma(_1022, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1018));
        float _1113 = _1018 + _800;
        float _1114 = _1022 + _801;
        float _1115 = _1026 + _802;
        float _1125 = fma(_1115, cbModelParam._m0[26u].z, fma(_1114, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1113)) - _1082;
        float _1126 = fma(_1115, cbModelParam._m0[27u].z, fma(_1114, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1113)) - _1086;
        float _1127 = fma(_1115, cbModelParam._m0[28u].z, fma(_1114, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1113)) - _1090;
        float _1131 = inversesqrt(dot(vec3(_1125, _1126, _1127), vec3(_1125, _1126, _1127)));
        float _1144 = ((_1131 * _1125) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1082 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1145 = ((_1131 * _1126) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1086 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1146 = ((_1131 * _1127) / cbModelParam._m0[34u].z) + ((((((_1090 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1149 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1144, _1145, _1146), 0.0);
        vec4 _1156 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1144, _1145, _1146), 0.0);
        vec4 _1163 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1144, _1145, _1146), 0.0);
        vec4 _1170 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1144, _1145, _1146), 0.0);
        float _1183 = exp2((_1149.w + (-0.5)) * 20.0) * 2.0;
        float _1184 = _1183 * (_1149.x + (-0.5));
        float _1185 = _1183 * (_1149.y + (-0.5));
        float _1186 = _1183 * (_1149.z + (-0.5));
        float _1193 = exp2((_1156.w + (-0.5)) * 20.0) * 2.0;
        float _1194 = _1193 * (_1156.x + (-0.5));
        float _1195 = _1193 * (_1156.y + (-0.5));
        float _1196 = _1193 * (_1156.z + (-0.5));
        float _1203 = exp2((_1163.w + (-0.5)) * 20.0) * 2.0;
        float _1204 = _1203 * (_1163.x + (-0.5));
        float _1205 = _1203 * (_1163.y + (-0.5));
        float _1206 = _1203 * (_1163.z + (-0.5));
        float _1213 = exp2((_1170.w + (-0.5)) * 20.0) * 2.0;
        float _1214 = _1213 * (_1170.x + (-0.5));
        float _1215 = _1213 * (_1170.y + (-0.5));
        float _1216 = _1213 * (_1170.z + (-0.5));
        float _1217 = isnan(0.0) ? _1214 : (isnan(_1214) ? 0.0 : max(_1214, 0.0));
        float _1218 = isnan(0.0) ? _1215 : (isnan(_1215) ? 0.0 : max(_1215, 0.0));
        float _1219 = isnan(0.0) ? _1216 : (isnan(_1216) ? 0.0 : max(_1216, 0.0));
        float _1220 = _1184 * 0.5;
        float _1221 = _1194 * 0.5;
        float _1222 = _1204 * 0.5;
        float _1223 = dot(vec3(_1220, _1221, _1222), vec3(_1220, _1221, _1222));
        float _1228 = (_1223 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1223);
        float _1237 = (dot(vec3(_800, _801, _802), vec3(_1228 * _1220, _1228 * _1221, _1228 * _1222)) + 1.0) * 0.5;
        float _3986 = isnan(0.0) ? _1237 : (isnan(_1237) ? 0.0 : max(_1237, 0.0));
        float _1247 = sqrt(((_1221 * _1221) + (_1220 * _1220)) + (_1222 * _1222)) / (_1217 + 9.9999997473787516355514526367188e-06);
        float _3997 = isnan(0.0) ? _1247 : (isnan(_1247) ? 0.0 : max(_1247, 0.0));
        float _1248 = isnan(1.0) ? _3997 : (isnan(_3997) ? 1.0 : min(_3997, 1.0));
        float _1249 = _1248 * 2.0;
        float _1253 = (1.0 - _1248) / (_1248 + 1.0);
        float _4008 = isnan(0.0) ? _1253 : (isnan(_1253) ? 0.0 : max(_1253, 0.0));
        float _1254 = isnan(1.0) ? _4008 : (isnan(_4008) ? 1.0 : min(_4008, 1.0));
        float _1263 = ((((1.0 - _1254) * (_1249 + 2.0)) * exp2(log2(isnan(1.0) ? _3986 : (isnan(_3986) ? 1.0 : min(_3986, 1.0))) * (_1249 + 1.0))) + _1254) * _1217;
        float _1264 = _1185 * 0.5;
        float _1265 = _1195 * 0.5;
        float _1266 = _1205 * 0.5;
        float _1267 = dot(vec3(_1264, _1265, _1266), vec3(_1264, _1265, _1266));
        float _1272 = (_1267 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1267);
        float _1280 = (dot(vec3(_800, _801, _802), vec3(_1272 * _1264, _1272 * _1265, _1272 * _1266)) + 1.0) * 0.5;
        float _4019 = isnan(0.0) ? _1280 : (isnan(_1280) ? 0.0 : max(_1280, 0.0));
        float _1289 = sqrt(((_1265 * _1265) + (_1264 * _1264)) + (_1266 * _1266)) / (_1218 + 9.9999997473787516355514526367188e-06);
        float _4030 = isnan(0.0) ? _1289 : (isnan(_1289) ? 0.0 : max(_1289, 0.0));
        float _1290 = isnan(1.0) ? _4030 : (isnan(_4030) ? 1.0 : min(_4030, 1.0));
        float _1291 = _1290 * 2.0;
        float _1295 = (1.0 - _1290) / (_1290 + 1.0);
        float _4041 = isnan(0.0) ? _1295 : (isnan(_1295) ? 0.0 : max(_1295, 0.0));
        float _1296 = isnan(1.0) ? _4041 : (isnan(_4041) ? 1.0 : min(_4041, 1.0));
        float _1305 = ((((1.0 - _1296) * (_1291 + 2.0)) * exp2(log2(isnan(1.0) ? _4019 : (isnan(_4019) ? 1.0 : min(_4019, 1.0))) * (_1291 + 1.0))) + _1296) * _1218;
        float _1306 = _1186 * 0.5;
        float _1307 = _1196 * 0.5;
        float _1308 = _1206 * 0.5;
        float _1309 = dot(vec3(_1306, _1307, _1308), vec3(_1306, _1307, _1308));
        float _1314 = (_1309 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1309);
        float _1322 = (dot(vec3(_800, _801, _802), vec3(_1314 * _1306, _1314 * _1307, _1314 * _1308)) + 1.0) * 0.5;
        float _4052 = isnan(0.0) ? _1322 : (isnan(_1322) ? 0.0 : max(_1322, 0.0));
        float _1331 = sqrt(((_1307 * _1307) + (_1306 * _1306)) + (_1308 * _1308)) / (_1219 + 9.9999997473787516355514526367188e-06);
        float _4063 = isnan(0.0) ? _1331 : (isnan(_1331) ? 0.0 : max(_1331, 0.0));
        float _1332 = isnan(1.0) ? _4063 : (isnan(_4063) ? 1.0 : min(_4063, 1.0));
        float _1333 = _1332 * 2.0;
        float _1337 = (1.0 - _1332) / (_1332 + 1.0);
        float _4074 = isnan(0.0) ? _1337 : (isnan(_1337) ? 0.0 : max(_1337, 0.0));
        float _1338 = isnan(1.0) ? _4074 : (isnan(_4074) ? 1.0 : min(_4074, 1.0));
        float _1347 = ((((1.0 - _1338) * (_1333 + 2.0)) * exp2(log2(isnan(1.0) ? _4052 : (isnan(_4052) ? 1.0 : min(_4052, 1.0))) * (_1333 + 1.0))) + _1338) * _1219;
        _1355 = _1186;
        _1357 = _1185;
        _1358 = _1184;
        _1359 = _1196;
        _1360 = _1195;
        _1361 = _1194;
        _1362 = _1206;
        _1363 = _1205;
        _1364 = _1204;
        _1365 = _1219;
        _1366 = _1218;
        _1367 = _1217;
        _1368 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1263 : (isnan(_1263) ? 0.0 : max(_1263, 0.0)));
        _1369 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1305 : (isnan(_1305) ? 0.0 : max(_1305, 0.0)));
        _1370 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1347 : (isnan(_1347) ? 0.0 : max(_1347, 0.0)));
    }
    else
    {
        _1355 = _1356;
        _1357 = _1356;
        _1358 = _1356;
        _1359 = _1356;
        _1360 = _1356;
        _1361 = _1356;
        _1362 = _1356;
        _1363 = _1356;
        _1364 = _1356;
        _1365 = _1356;
        _1366 = _1356;
        _1367 = _1356;
        _1368 = 0.0;
        _1369 = 0.0;
        _1370 = 0.0;
    }
    float _1668;
    float _1669;
    float _1670;
    float _1671;
    float _1672;
    float _1673;
    float _1674;
    float _1675;
    float _1676;
    float _1677;
    float _1678;
    float _1679;
    float _1680;
    float _1681;
    float _1682;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1399 = fma(_1026, cbModelParam._m0[30u].z, fma(_1022, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1018));
        float _1403 = fma(_1026, cbModelParam._m0[31u].z, fma(_1022, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1018));
        float _1407 = fma(_1026, cbModelParam._m0[32u].z, fma(_1022, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1018));
        float _1430 = _1018 + _800;
        float _1431 = _1022 + _801;
        float _1432 = _1026 + _802;
        float _1442 = fma(_1432, cbModelParam._m0[30u].z, fma(_1431, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1430)) - _1399;
        float _1443 = fma(_1432, cbModelParam._m0[31u].z, fma(_1431, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1430)) - _1403;
        float _1444 = fma(_1432, cbModelParam._m0[32u].z, fma(_1431, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1430)) - _1407;
        float _1448 = inversesqrt(dot(vec3(_1442, _1443, _1444), vec3(_1442, _1443, _1444)));
        float _1461 = ((_1448 * _1442) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1399 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1462 = ((_1448 * _1443) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1403 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1463 = ((_1448 * _1444) / cbModelParam._m0[35u].z) + ((((((_1407 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1465 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1461, _1462, _1463), 0.0);
        vec4 _1472 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1461, _1462, _1463), 0.0);
        vec4 _1479 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1461, _1462, _1463), 0.0);
        vec4 _1486 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1461, _1462, _1463), 0.0);
        float _1498 = exp2((_1465.w + (-0.5)) * 20.0) * 2.0;
        float _1499 = _1498 * (_1465.x + (-0.5));
        float _1500 = _1498 * (_1465.y + (-0.5));
        float _1501 = _1498 * (_1465.z + (-0.5));
        float _1508 = exp2((_1472.w + (-0.5)) * 20.0) * 2.0;
        float _1509 = _1508 * (_1472.x + (-0.5));
        float _1510 = _1508 * (_1472.y + (-0.5));
        float _1511 = _1508 * (_1472.z + (-0.5));
        float _1518 = exp2((_1479.w + (-0.5)) * 20.0) * 2.0;
        float _1519 = _1518 * (_1479.x + (-0.5));
        float _1520 = _1518 * (_1479.y + (-0.5));
        float _1521 = _1518 * (_1479.z + (-0.5));
        float _1528 = exp2((_1486.w + (-0.5)) * 20.0) * 2.0;
        float _1529 = _1528 * (_1486.x + (-0.5));
        float _1530 = _1528 * (_1486.y + (-0.5));
        float _1531 = _1528 * (_1486.z + (-0.5));
        float _1532 = isnan(0.0) ? _1529 : (isnan(_1529) ? 0.0 : max(_1529, 0.0));
        float _1533 = isnan(0.0) ? _1530 : (isnan(_1530) ? 0.0 : max(_1530, 0.0));
        float _1534 = isnan(0.0) ? _1531 : (isnan(_1531) ? 0.0 : max(_1531, 0.0));
        float _1535 = _1499 * 0.5;
        float _1536 = _1509 * 0.5;
        float _1537 = _1519 * 0.5;
        float _1538 = dot(vec3(_1535, _1536, _1537), vec3(_1535, _1536, _1537));
        float _1543 = (_1538 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1538);
        float _1551 = (dot(vec3(_800, _801, _802), vec3(_1543 * _1535, _1543 * _1536, _1543 * _1537)) + 1.0) * 0.5;
        float _4115 = isnan(0.0) ? _1551 : (isnan(_1551) ? 0.0 : max(_1551, 0.0));
        float _1560 = sqrt(((_1536 * _1536) + (_1535 * _1535)) + (_1537 * _1537)) / (_1532 + 9.9999997473787516355514526367188e-06);
        float _4126 = isnan(0.0) ? _1560 : (isnan(_1560) ? 0.0 : max(_1560, 0.0));
        float _1561 = isnan(1.0) ? _4126 : (isnan(_4126) ? 1.0 : min(_4126, 1.0));
        float _1562 = _1561 * 2.0;
        float _1566 = (1.0 - _1561) / (_1561 + 1.0);
        float _4137 = isnan(0.0) ? _1566 : (isnan(_1566) ? 0.0 : max(_1566, 0.0));
        float _1567 = isnan(1.0) ? _4137 : (isnan(_4137) ? 1.0 : min(_4137, 1.0));
        float _1576 = ((((1.0 - _1567) * (_1562 + 2.0)) * exp2(log2(isnan(1.0) ? _4115 : (isnan(_4115) ? 1.0 : min(_4115, 1.0))) * (_1562 + 1.0))) + _1567) * _1532;
        float _1577 = _1500 * 0.5;
        float _1578 = _1510 * 0.5;
        float _1579 = _1520 * 0.5;
        float _1580 = dot(vec3(_1577, _1578, _1579), vec3(_1577, _1578, _1579));
        float _1585 = (_1580 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1580);
        float _1593 = (dot(vec3(_800, _801, _802), vec3(_1585 * _1577, _1585 * _1578, _1585 * _1579)) + 1.0) * 0.5;
        float _4148 = isnan(0.0) ? _1593 : (isnan(_1593) ? 0.0 : max(_1593, 0.0));
        float _1602 = sqrt(((_1578 * _1578) + (_1577 * _1577)) + (_1579 * _1579)) / (_1533 + 9.9999997473787516355514526367188e-06);
        float _4159 = isnan(0.0) ? _1602 : (isnan(_1602) ? 0.0 : max(_1602, 0.0));
        float _1603 = isnan(1.0) ? _4159 : (isnan(_4159) ? 1.0 : min(_4159, 1.0));
        float _1604 = _1603 * 2.0;
        float _1608 = (1.0 - _1603) / (_1603 + 1.0);
        float _4170 = isnan(0.0) ? _1608 : (isnan(_1608) ? 0.0 : max(_1608, 0.0));
        float _1609 = isnan(1.0) ? _4170 : (isnan(_4170) ? 1.0 : min(_4170, 1.0));
        float _1618 = ((((1.0 - _1609) * (_1604 + 2.0)) * exp2(log2(isnan(1.0) ? _4148 : (isnan(_4148) ? 1.0 : min(_4148, 1.0))) * (_1604 + 1.0))) + _1609) * _1533;
        float _1619 = _1501 * 0.5;
        float _1620 = _1511 * 0.5;
        float _1621 = _1521 * 0.5;
        float _1622 = dot(vec3(_1619, _1620, _1621), vec3(_1619, _1620, _1621));
        float _1627 = (_1622 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1622);
        float _1635 = (dot(vec3(_800, _801, _802), vec3(_1627 * _1619, _1627 * _1620, _1627 * _1621)) + 1.0) * 0.5;
        float _4181 = isnan(0.0) ? _1635 : (isnan(_1635) ? 0.0 : max(_1635, 0.0));
        float _1644 = sqrt(((_1620 * _1620) + (_1619 * _1619)) + (_1621 * _1621)) / (_1534 + 9.9999997473787516355514526367188e-06);
        float _4192 = isnan(0.0) ? _1644 : (isnan(_1644) ? 0.0 : max(_1644, 0.0));
        float _1645 = isnan(1.0) ? _4192 : (isnan(_4192) ? 1.0 : min(_4192, 1.0));
        float _1646 = _1645 * 2.0;
        float _1650 = (1.0 - _1645) / (_1645 + 1.0);
        float _4203 = isnan(0.0) ? _1650 : (isnan(_1650) ? 0.0 : max(_1650, 0.0));
        float _1651 = isnan(1.0) ? _4203 : (isnan(_4203) ? 1.0 : min(_4203, 1.0));
        float _1660 = ((((1.0 - _1651) * (_1646 + 2.0)) * exp2(log2(isnan(1.0) ? _4181 : (isnan(_4181) ? 1.0 : min(_4181, 1.0))) * (_1646 + 1.0))) + _1651) * _1534;
        _1668 = _1501;
        _1669 = _1500;
        _1670 = _1499;
        _1671 = _1511;
        _1672 = _1510;
        _1673 = _1509;
        _1674 = _1521;
        _1675 = _1520;
        _1676 = _1519;
        _1677 = _1534;
        _1678 = _1533;
        _1679 = _1532;
        _1680 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1576 : (isnan(_1576) ? 0.0 : max(_1576, 0.0)));
        _1681 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1618 : (isnan(_1618) ? 0.0 : max(_1618, 0.0)));
        _1682 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1660 : (isnan(_1660) ? 0.0 : max(_1660, 0.0)));
    }
    else
    {
        _1668 = _1356;
        _1669 = _1356;
        _1670 = _1356;
        _1671 = _1356;
        _1672 = _1356;
        _1673 = _1356;
        _1674 = _1356;
        _1675 = _1356;
        _1676 = _1356;
        _1677 = _1356;
        _1678 = _1356;
        _1679 = _1356;
        _1680 = 0.0;
        _1681 = 0.0;
        _1682 = 0.0;
    }
    float _1692 = (cbModelParam._m0[1u].x * (_1680 - _1368)) + _1368;
    float _1693 = (cbModelParam._m0[1u].x * (_1681 - _1369)) + _1369;
    float _1694 = (cbModelParam._m0[1u].x * (_1682 - _1370)) + _1370;
    float _1715 = fma(_1694, cbSceneParam._m0[89u].z, fma(_1693, cbSceneParam._m0[89u].y, _1692 * cbSceneParam._m0[89u].x));
    float _1718 = fma(_1694, cbSceneParam._m0[90u].z, fma(_1693, cbSceneParam._m0[90u].y, _1692 * cbSceneParam._m0[90u].x));
    float _1721 = fma(_1694, cbSceneParam._m0[91u].z, fma(_1693, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1692));
    float _1736 = _965 * 0.5;
    float _1737 = _966 * 0.5;
    float _1738 = _967 * 0.5;
    float _1739 = dot(vec4(_1736, _1737, _1738, 1.0), vec4(_1670, _1673, _1676, _1679));
    float _1742 = dot(vec4(_1736, _1737, _1738, 1.0), vec4(_1669, _1672, _1675, _1678));
    float _1745 = dot(vec4(_1736, _1737, _1738, 1.0), vec4(_1668, _1671, _1674, _1677));
    float _1779;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1752 = dot(vec4(_1736, _1737, _1738, 1.0), vec4(_1355, _1359, _1362, _1365));
        float _1756 = dot(vec4(_1736, _1737, _1738, 1.0), vec4(_1357, _1360, _1363, _1366));
        float _1760 = dot(vec4(_1736, _1737, _1738, 1.0), vec4(_1358, _1361, _1364, _1367));
        float _1767 = dot(vec4(cbModelParam._m0[39u]), vec4(_1736, _1737, _1738, 1.0));
        _1779 = dot(vec3(isnan(0.0) ? _1760 : (isnan(_1760) ? 0.0 : max(_1760, 0.0)), isnan(0.0) ? _1756 : (isnan(_1756) ? 0.0 : max(_1756, 0.0)), isnan(0.0) ? _1752 : (isnan(_1752) ? 0.0 : max(_1752, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1767) ? 0.0 : (isnan(0.0) ? _1767 : max(0.0, _1767))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1779 = 1.0;
    }
    float _1790;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1781 = dot(vec4(cbModelParam._m0[40u]), vec4(_1736, _1737, _1738, 1.0));
        _1790 = dot(vec3(isnan(0.0) ? _1739 : (isnan(_1739) ? 0.0 : max(_1739, 0.0)), isnan(0.0) ? _1742 : (isnan(_1742) ? 0.0 : max(_1742, 0.0)), isnan(0.0) ? _1745 : (isnan(_1745) ? 0.0 : max(_1745, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1781) ? 0.0 : (isnan(0.0) ? _1781 : max(0.0, _1781))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1790 = 1.0;
    }
    float _1794 = (_1790 * cbModelParam._m0[1u].x) + (_1779 * (1.0 - cbModelParam._m0[1u].x));
    float _1804 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _803);
    float _1805 = isnan(_1804) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1804 : min(cbModelParam._m0[25u].z, _1804));
    float _1885;
    float _1887;
    float _1889;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1852 = fma(_1026, cbModelParam._m0[13u].z, fma(_1022, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1018)) + cbModelParam._m0[13u].w;
        float _1856 = fma(_1026, cbModelParam._m0[14u].z, fma(_1022, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1018)) + cbModelParam._m0[14u].w;
        float _1860 = fma(_1026, cbModelParam._m0[15u].z, fma(_1022, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1018)) + cbModelParam._m0[15u].w;
        float _1863 = fma(_967, cbModelParam._m0[13u].z, fma(_966, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _965));
        float _1866 = fma(_967, cbModelParam._m0[14u].z, fma(_966, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _965));
        float _1869 = fma(_967, cbModelParam._m0[15u].z, fma(_966, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _965));
        float _1897;
        if (_1863 > 0.0)
        {
            _1897 = abs((1.0 - _1852) / _1863);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1863 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1852 + 1.0) / _1863);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1897 = frontier_phi_19_17_ladder;
        }
        float _2119;
        if (_1866 > 0.0)
        {
            _2119 = abs((1.0 - _1856) / _1866);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1866 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1856 + 1.0) / _1866);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2119 = frontier_phi_28_24_ladder;
        }
        float _2365;
        if (_1869 > 0.0)
        {
            _2365 = abs((1.0 - _1860) / _1869);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1869 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1860 + 1.0) / _1869);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2365 = frontier_phi_40_35_ladder;
        }
        float _2367 = isnan(_2119) ? _1897 : (isnan(_1897) ? _2119 : min(_1897, _2119));
        float _2368 = isnan(_2365) ? _2367 : (isnan(_2367) ? _2365 : min(_2367, _2365));
        float _2372 = (_2368 * _1863) + _1852;
        float _2373 = (_2368 * _1866) + _1856;
        float _2374 = (_2368 * _1869) + _1860;
        float _2375 = _2368 * 9.9999997473787516355514526367188e-05;
        float _2377 = (-1.0) - _2375;
        float _2379 = _2375 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2374 > _2379) || ((_2374 < _2377) || ((_2373 > _2379) || ((_2373 < _2377) || ((_2372 < _2377) || (_2372 > _2379))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2498 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2374, cbModelParam._m0[9u].z, fma(_2373, cbModelParam._m0[9u].y, _2372 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2374, cbModelParam._m0[10u].z, fma(_2373, cbModelParam._m0[10u].y, _2372 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2374, cbModelParam._m0[11u].z, fma(_2373, cbModelParam._m0[11u].y, _2372 * cbModelParam._m0[11u].x))), _1805);
            frontier_phi_18_40_ladder = _2498.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2498.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2498.x * cbModelParam._m0[1u].y;
        }
        _1885 = frontier_phi_18_40_ladder_2;
        _1887 = frontier_phi_18_40_ladder_1;
        _1889 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1873 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_965, _966, _967), _1805);
        _1885 = _1873.x * cbModelParam._m0[1u].y;
        _1887 = _1873.y * cbModelParam._m0[1u].y;
        _1889 = _1873.z * cbModelParam._m0[1u].y;
    }
    float _1893 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _803);
    float _1894 = isnan(_1893) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1893 : min(cbModelParam._m0[25u].w, _1893));
    float _1985;
    float _1987;
    float _1989;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1949 = fma(_1026, cbModelParam._m0[21u].z, fma(_1022, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1018)) + cbModelParam._m0[21u].w;
        float _1953 = fma(_1026, cbModelParam._m0[22u].z, fma(_1022, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1018)) + cbModelParam._m0[22u].w;
        float _1957 = fma(_1026, cbModelParam._m0[23u].z, fma(_1022, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1018)) + cbModelParam._m0[23u].w;
        float _1960 = fma(_967, cbModelParam._m0[21u].z, fma(_966, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _965));
        float _1963 = fma(_967, cbModelParam._m0[22u].z, fma(_966, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _965));
        float _1966 = fma(_967, cbModelParam._m0[23u].z, fma(_966, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _965));
        float _2124;
        if (_1960 > 0.0)
        {
            _2124 = abs((1.0 - _1949) / _1960);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1960 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1949 + 1.0) / _1960);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _2124 = frontier_phi_30_26_ladder;
        }
        float _2392;
        if (_1963 > 0.0)
        {
            _2392 = abs((1.0 - _1953) / _1963);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1963 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1953 + 1.0) / _1963);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2392 = frontier_phi_42_37_ladder;
        }
        float _2597;
        if (_1966 > 0.0)
        {
            _2597 = abs((1.0 - _1957) / _1966);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1966 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1957 + 1.0) / _1966);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2597 = frontier_phi_51_48_ladder;
        }
        float _2599 = isnan(_2392) ? _2124 : (isnan(_2124) ? _2392 : min(_2124, _2392));
        float _2600 = isnan(_2597) ? _2599 : (isnan(_2599) ? _2597 : min(_2599, _2597));
        float _2604 = (_2600 * _1960) + _1949;
        float _2605 = (_2600 * _1963) + _1953;
        float _2606 = (_2600 * _1966) + _1957;
        float _2607 = _2600 * 9.9999997473787516355514526367188e-05;
        float _2608 = (-1.0) - _2607;
        float _2610 = _2607 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2606 > _2610) || ((_2606 < _2608) || ((_2605 > _2610) || ((_2605 < _2608) || ((_2604 < _2608) || (_2604 > _2610))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2829 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2606, cbModelParam._m0[17u].z, fma(_2605, cbModelParam._m0[17u].y, _2604 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2606, cbModelParam._m0[18u].z, fma(_2605, cbModelParam._m0[18u].y, _2604 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2606, cbModelParam._m0[19u].z, fma(_2605, cbModelParam._m0[19u].y, _2604 * cbModelParam._m0[19u].x))), _1894);
            frontier_phi_27_51_ladder = _2829.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2829.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2829.x * cbModelParam._m0[1u].z;
        }
        _1985 = frontier_phi_27_51_ladder_2;
        _1987 = frontier_phi_27_51_ladder_1;
        _1989 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1969 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_965, _966, _967), _1894);
        _1985 = _1969.x * cbModelParam._m0[1u].z;
        _1987 = _1969.y * cbModelParam._m0[1u].z;
        _1989 = _1969.z * cbModelParam._m0[1u].z;
    }
    float _2001 = ((((1.0 - _986) * ((_973 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_986 * _973)) * _957;
    float _2002 = _2001 * ((cbModelParam._m0[1u].w * (_1985 - _1885)) + _1885);
    float _2003 = _2001 * ((cbModelParam._m0[1u].w * (_1987 - _1887)) + _1887);
    float _2004 = _2001 * ((cbModelParam._m0[1u].w * (_1989 - _1889)) + _1889);
    float _2007 = fma(_2004, cbSceneParam._m0[89u].z, fma(_2003, cbSceneParam._m0[89u].y, _2002 * cbSceneParam._m0[89u].x));
    float _2010 = fma(_2004, cbSceneParam._m0[90u].z, fma(_2003, cbSceneParam._m0[90u].y, _2002 * cbSceneParam._m0[90u].x));
    float _2013 = fma(_2004, cbSceneParam._m0[91u].z, fma(_2003, cbSceneParam._m0[91u].y, _2002 * cbSceneParam._m0[91u].x));
    vec4 _2021 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_895, _896));
    float _2023 = _2021.w;
    float _2035 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2023);
    float _2036 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2023);
    float _2037 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2023);
    uvec4 _2040 = floatBitsToUint(cbInstanceData._m0[_735]);
    uint _2042 = _2040.x * 14u;
    uint _2043 = _2042 + 13u;
    float _2050 = _957 + (-1.0);
    float _2055 = (cbLight._m0[_2043].x * _2050) + 1.0;
    float _2056 = (cbLight._m0[_2043].y * _2050) + 1.0;
    float _2057 = (cbLight._m0[_2043].z * _2050) + 1.0;
    float _2058 = (cbLight._m0[_2043].w * _2050) + 1.0;
    uint _2059 = _2042 + 5u;
    float _2065 = isnan(1.0) ? _2056 : (isnan(_2056) ? 1.0 : min(_2056, 1.0));
    uint _2069 = _2042 + 4u;
    float _2078 = isnan(1.0) ? _2055 : (isnan(_2055) ? 1.0 : min(_2055, 1.0));
    uint _2082 = _2042 | 1u;
    float _2093 = dot(vec3(cbLight._m0[_2042].xyz), vec3(_800, _801, _802));
    float _2096 = dot(vec3(cbLight._m0[_2082].xyz), vec3(_800, _801, _802));
    float _4339 = isnan(0.0) ? _2093 : (isnan(_2093) ? 0.0 : max(_2093, 0.0));
    float _4350 = isnan(0.0) ? _2096 : (isnan(_2096) ? 0.0 : max(_2096, 0.0));
    float _2101 = (isnan(1.0) ? _4339 : (isnan(_4339) ? 1.0 : min(_4339, 1.0))) * 0.3183098733425140380859375;
    float _2103 = (isnan(1.0) ? _4350 : (isnan(_4350) ? 1.0 : min(_4350, 1.0))) * 0.3183098733425140380859375;
    float _2110 = ((cbLight._m0[_2059].x * _2065) * _2103) + (((cbLight._m0[_2069].x * _2035) * _2078) * _2101);
    float _2111 = ((_2065 * cbLight._m0[_2059].y) * _2103) + (((cbLight._m0[_2069].y * _2036) * _2078) * _2101);
    float _2112 = ((_2065 * cbLight._m0[_2059].z) * _2103) + (((cbLight._m0[_2069].z * _2037) * _2078) * _2101);
    uvec4 _2116 = floatBitsToUint(cbLight._m0[_2042 + 12u]);
    bool _2118 = _2116.x == 0u;
    float _2129;
    float _2131;
    float _2133;
    if (_2118)
    {
        _2129 = _2110;
        _2131 = _2111;
        _2133 = _2112;
    }
    else
    {
        uint _2137 = _2042 + 6u;
        float _2153 = (dot(vec3(cbLight._m0[_2042 + 2u].xyz), vec3(_800, _801, _802)) * 0.5) + 0.5;
        float _2154 = _2153 * _2153;
        float _4361 = isnan(0.0) ? _2154 : (isnan(_2154) ? 0.0 : max(_2154, 0.0));
        float _2155 = isnan(1.0) ? _4361 : (isnan(_4361) ? 1.0 : min(_4361, 1.0));
        float _2156 = isnan(1.0) ? _2057 : (isnan(_2057) ? 1.0 : min(_2057, 1.0));
        _2129 = (((cbLight._m0[_2137].x * 0.3183098733425140380859375) * _2155) * _2156) + _2110;
        _2131 = (((cbLight._m0[_2137].y * 0.3183098733425140380859375) * _2155) * _2156) + _2111;
        _2133 = (((cbLight._m0[_2137].z * 0.3183098733425140380859375) * _2155) * _2156) + _2112;
    }
    bool _2136 = _2116.y == 0u;
    float _2174;
    float _2176;
    float _2178;
    if (_2136)
    {
        _2174 = _2129;
        _2176 = _2131;
        _2178 = _2133;
    }
    else
    {
        uint _2336 = _2042 + 7u;
        float _2352 = (dot(vec3(cbLight._m0[_2042 + 3u].xyz), vec3(_800, _801, _802)) * 0.5) + 0.5;
        float _2353 = _2352 * _2352;
        float _4377 = isnan(0.0) ? _2353 : (isnan(_2353) ? 0.0 : max(_2353, 0.0));
        float _2354 = isnan(1.0) ? _4377 : (isnan(_4377) ? 1.0 : min(_4377, 1.0));
        float _2355 = isnan(1.0) ? _2058 : (isnan(_2058) ? 1.0 : min(_2058, 1.0));
        _2174 = (((cbLight._m0[_2336].x * 0.3183098733425140380859375) * _2354) * _2355) + _2129;
        _2176 = (((cbLight._m0[_2336].y * 0.3183098733425140380859375) * _2354) * _2355) + _2131;
        _2178 = (((cbLight._m0[_2336].z * 0.3183098733425140380859375) * _2354) * _2355) + _2133;
    }
    uint _2181 = _2042 + 8u;
    float _2194 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2042].w)) * _803) * 0.949999988079071044921875);
    float _2195 = _2194 * _2194;
    float _2196 = cbLight._m0[_2042].x + _875;
    float _2197 = cbLight._m0[_2042].y + _876;
    float _2198 = cbLight._m0[_2042].z + _877;
    float _2202 = inversesqrt(dot(vec3(_2196, _2197, _2198), vec3(_2196, _2197, _2198)));
    float _2203 = _2202 * _2196;
    float _2204 = _2202 * _2197;
    float _2205 = _2202 * _2198;
    float _2206 = dot(vec3(_800, _801, _802), vec3(cbLight._m0[_2042].xyz));
    float _4393 = isnan(0.0) ? _2206 : (isnan(_2206) ? 0.0 : max(_2206, 0.0));
    float _2209 = isnan(1.0) ? _4393 : (isnan(_4393) ? 1.0 : min(_4393, 1.0));
    float _4404 = isnan(0.0) ? _958 : (isnan(_958) ? 0.0 : max(_958, 0.0));
    float _2210 = isnan(1.0) ? _4404 : (isnan(_4404) ? 1.0 : min(_4404, 1.0));
    float _2211 = dot(vec3(_800, _801, _802), vec3(_2203, _2204, _2205));
    float _4415 = isnan(0.0) ? _2211 : (isnan(_2211) ? 0.0 : max(_2211, 0.0));
    float _2214 = isnan(1.0) ? _4415 : (isnan(_4415) ? 1.0 : min(_4415, 1.0));
    float _2215 = dot(vec3(cbLight._m0[_2042].xyz), vec3(_2203, _2204, _2205));
    float _4426 = isnan(0.0) ? _2215 : (isnan(_2215) ? 0.0 : max(_2215, 0.0));
    float _2219 = _2195 * _2195;
    float _2223 = ((_2214 * _2214) * (_2219 + (-1.0))) + 1.0;
    float _2234 = (exp2(log2(1.0 - (isnan(1.0) ? _4426 : (isnan(_4426) ? 1.0 : min(_4426, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2235 = 1.0 - _2195;
    float _2246 = (0.5 / (((_2210 * ((_2209 * _2235) + _2195)) + 9.9999999392252902907785028219223e-09) + (((_2210 * _2235) + _2195) * _2209))) * _2209;
    float _4437 = isnan(0.0) ? _2246 : (isnan(_2246) ? 0.0 : max(_2246, 0.0));
    float _2248 = (isnan(1.0) ? _4437 : (isnan(_4437) ? 1.0 : min(_4437, 1.0))) * (_2219 / ((_2223 * _2223) * 3.141590118408203125));
    uint _2262 = _2042 + 9u;
    float _2273 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2082].w)) * _803) * 0.949999988079071044921875);
    float _2274 = _2273 * _2273;
    float _2275 = cbLight._m0[_2082].x + _875;
    float _2276 = cbLight._m0[_2082].y + _876;
    float _2277 = cbLight._m0[_2082].z + _877;
    float _2281 = inversesqrt(dot(vec3(_2275, _2276, _2277), vec3(_2275, _2276, _2277)));
    float _2282 = _2281 * _2275;
    float _2283 = _2281 * _2276;
    float _2284 = _2281 * _2277;
    float _2285 = dot(vec3(_800, _801, _802), vec3(cbLight._m0[_2082].xyz));
    float _4448 = isnan(0.0) ? _2285 : (isnan(_2285) ? 0.0 : max(_2285, 0.0));
    float _2288 = isnan(1.0) ? _4448 : (isnan(_4448) ? 1.0 : min(_4448, 1.0));
    float _2289 = dot(vec3(_800, _801, _802), vec3(_2282, _2283, _2284));
    float _4459 = isnan(0.0) ? _2289 : (isnan(_2289) ? 0.0 : max(_2289, 0.0));
    float _2292 = isnan(1.0) ? _4459 : (isnan(_4459) ? 1.0 : min(_4459, 1.0));
    float _2293 = dot(vec3(cbLight._m0[_2082].xyz), vec3(_2282, _2283, _2284));
    float _4470 = isnan(0.0) ? _2293 : (isnan(_2293) ? 0.0 : max(_2293, 0.0));
    float _2297 = _2274 * _2274;
    float _2301 = ((_2292 * _2292) * (_2297 + (-1.0))) + 1.0;
    float _2310 = (exp2(log2(1.0 - (isnan(1.0) ? _4470 : (isnan(_4470) ? 1.0 : min(_4470, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2311 = 1.0 - _2274;
    float _2321 = (0.5 / (((_2210 * ((_2288 * _2311) + _2274)) + 9.9999999392252902907785028219223e-09) + (((_2210 * _2311) + _2274) * _2288))) * _2288;
    float _4481 = isnan(0.0) ? _2321 : (isnan(_2321) ? 0.0 : max(_2321, 0.0));
    float _2323 = (isnan(1.0) ? _4481 : (isnan(_4481) ? 1.0 : min(_4481, 1.0))) * (_2297 / ((_2301 * _2301) * 3.141590118408203125));
    float _2333 = (((_2310 * cbLight._m0[_2262].x) * _2323) * _2065) + ((((cbLight._m0[_2181].x * _2035) * _2234) * _2248) * _2078);
    float _2334 = (((_2310 * cbLight._m0[_2262].y) * _2323) * _2065) + ((((cbLight._m0[_2181].y * _2036) * _2234) * _2248) * _2078);
    float _2335 = (((_2310 * cbLight._m0[_2262].z) * _2323) * _2065) + ((((cbLight._m0[_2181].z * _2037) * _2234) * _2248) * _2078);
    float _2397;
    float _2399;
    float _2401;
    if (_2118)
    {
        _2397 = _2333;
        _2399 = _2334;
        _2401 = _2335;
    }
    else
    {
        uint _2403 = _2042 + 2u;
        uint _2407 = _2042 + 10u;
        float _2421 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2403].w)) * _803) * 0.949999988079071044921875);
        float _2422 = _2421 * _2421;
        float _2423 = cbLight._m0[_2403].x + _875;
        float _2424 = cbLight._m0[_2403].y + _876;
        float _2425 = cbLight._m0[_2403].z + _877;
        float _2429 = inversesqrt(dot(vec3(_2423, _2424, _2425), vec3(_2423, _2424, _2425)));
        float _2430 = _2429 * _2423;
        float _2431 = _2429 * _2424;
        float _2432 = _2429 * _2425;
        float _2433 = dot(vec3(_800, _801, _802), vec3(cbLight._m0[_2403].xyz));
        float _4492 = isnan(0.0) ? _2433 : (isnan(_2433) ? 0.0 : max(_2433, 0.0));
        float _2436 = isnan(1.0) ? _4492 : (isnan(_4492) ? 1.0 : min(_4492, 1.0));
        float _2437 = dot(vec3(_800, _801, _802), vec3(_2430, _2431, _2432));
        float _4503 = isnan(0.0) ? _2437 : (isnan(_2437) ? 0.0 : max(_2437, 0.0));
        float _2440 = isnan(1.0) ? _4503 : (isnan(_4503) ? 1.0 : min(_4503, 1.0));
        float _2441 = dot(vec3(cbLight._m0[_2403].xyz), vec3(_2430, _2431, _2432));
        float _4514 = isnan(0.0) ? _2441 : (isnan(_2441) ? 0.0 : max(_2441, 0.0));
        float _2445 = _2422 * _2422;
        float _2449 = ((_2440 * _2440) * (_2445 + (-1.0))) + 1.0;
        float _2458 = (exp2(log2(1.0 - (isnan(1.0) ? _4514 : (isnan(_4514) ? 1.0 : min(_4514, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2459 = 1.0 - _2422;
        float _2469 = (0.5 / (((_2210 * ((_2436 * _2459) + _2422)) + 9.9999999392252902907785028219223e-09) + (((_2210 * _2459) + _2422) * _2436))) * _2436;
        float _4525 = isnan(0.0) ? _2469 : (isnan(_2469) ? 0.0 : max(_2469, 0.0));
        float _2471 = (isnan(1.0) ? _4525 : (isnan(_4525) ? 1.0 : min(_4525, 1.0))) * (_2445 / ((_2449 * _2449) * 3.141590118408203125));
        float _2472 = isnan(1.0) ? _2057 : (isnan(_2057) ? 1.0 : min(_2057, 1.0));
        _2397 = (((_2458 * cbLight._m0[_2407].x) * _2471) * _2472) + _2333;
        _2399 = (((_2458 * cbLight._m0[_2407].y) * _2471) * _2472) + _2334;
        _2401 = (((_2458 * cbLight._m0[_2407].z) * _2471) * _2472) + _2335;
    }
    float _2507;
    float _2509;
    float _2511;
    if (_2136)
    {
        _2507 = _2397;
        _2509 = _2399;
        _2511 = _2401;
    }
    else
    {
        uint _2518 = _2042 + 3u;
        uint _2522 = _2042 + 11u;
        float _2536 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2518].w)) * _803) * 0.949999988079071044921875);
        float _2537 = _2536 * _2536;
        float _2538 = cbLight._m0[_2518].x + _875;
        float _2539 = cbLight._m0[_2518].y + _876;
        float _2540 = cbLight._m0[_2518].z + _877;
        float _2544 = inversesqrt(dot(vec3(_2538, _2539, _2540), vec3(_2538, _2539, _2540)));
        float _2545 = _2544 * _2538;
        float _2546 = _2544 * _2539;
        float _2547 = _2544 * _2540;
        float _2548 = dot(vec3(_800, _801, _802), vec3(cbLight._m0[_2518].xyz));
        float _4541 = isnan(0.0) ? _2548 : (isnan(_2548) ? 0.0 : max(_2548, 0.0));
        float _2551 = isnan(1.0) ? _4541 : (isnan(_4541) ? 1.0 : min(_4541, 1.0));
        float _2552 = dot(vec3(_800, _801, _802), vec3(_2545, _2546, _2547));
        float _4552 = isnan(0.0) ? _2552 : (isnan(_2552) ? 0.0 : max(_2552, 0.0));
        float _2555 = isnan(1.0) ? _4552 : (isnan(_4552) ? 1.0 : min(_4552, 1.0));
        float _2556 = dot(vec3(cbLight._m0[_2518].xyz), vec3(_2545, _2546, _2547));
        float _4563 = isnan(0.0) ? _2556 : (isnan(_2556) ? 0.0 : max(_2556, 0.0));
        float _2560 = _2537 * _2537;
        float _2564 = ((_2555 * _2555) * (_2560 + (-1.0))) + 1.0;
        float _2573 = (exp2(log2(1.0 - (isnan(1.0) ? _4563 : (isnan(_4563) ? 1.0 : min(_4563, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2574 = 1.0 - _2537;
        float _2584 = (0.5 / (((_2210 * ((_2551 * _2574) + _2537)) + 9.9999999392252902907785028219223e-09) + (((_2210 * _2574) + _2537) * _2551))) * _2551;
        float _4574 = isnan(0.0) ? _2584 : (isnan(_2584) ? 0.0 : max(_2584, 0.0));
        float _2586 = (isnan(1.0) ? _4574 : (isnan(_4574) ? 1.0 : min(_4574, 1.0))) * (_2560 / ((_2564 * _2564) * 3.141590118408203125));
        float _2587 = isnan(1.0) ? _2058 : (isnan(_2058) ? 1.0 : min(_2058, 1.0));
        _2507 = (((_2573 * cbLight._m0[_2522].x) * _2586) * _2587) + _2397;
        _2509 = (((_2573 * cbLight._m0[_2522].y) * _2586) * _2587) + _2399;
        _2511 = (((_2573 * cbLight._m0[_2522].z) * _2586) * _2587) + _2401;
    }
    float _2721;
    float _2723;
    float _2725;
    float _2727;
    float _2729;
    float _2731;
    if (_2040.y == 0u)
    {
        float _2662 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2663 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2662;
        float _2664 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2662;
        float _2665 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2662;
        uvec4 _2677 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2678 = _2677.x;
        uint _2689 = uint((float(_2677.y) * floor(float(uint(cbSceneParam._m0[85u].y * _896) / _2678))) + floor(float(uint(cbSceneParam._m0[85u].x * _895) / _2678)));
        float _2699 = (log2(_2665 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2700 = isnan(0.0) ? _2699 : (isnan(_2699) ? 0.0 : max(_2699, 0.0));
        uint _2703 = uint(isnan(14.0) ? _2700 : (isnan(_2700) ? 14.0 : min(_2700, 14.0)));
        uvec4 _2708 = texelFetch(g_lightClusterGridBuffer, int(((_2703 << 2u) + (_2689 << 6u)) >> 2u));
        uint _2709 = _2708.x;
        uint _2710 = _2677.z;
        float _2834;
        float _2836;
        float _2838;
        float _2840;
        float _2842;
        float _2844;
        if (((((1u << ((_2710 >> 4u) & 15u)) + 4294967295u) & _2709) == 0u) || ((_2710 & 240u) == 0u))
        {
            _2834 = 0.0;
            _2836 = 0.0;
            _2838 = 0.0;
            _2840 = 0.0;
            _2842 = 0.0;
            _2844 = 0.0;
        }
        else
        {
            float _2835;
            float _2837;
            float _2839;
            float _2841;
            float _2843;
            float _2845;
            float _2986 = 0.0;
            float _2987 = 0.0;
            float _2988 = 0.0;
            float _2989 = 0.0;
            float _2990 = 0.0;
            float _2991 = 0.0;
            uint _2992 = 0u;
            uint _3001;
            bool _3002;
            for (;;)
            {
                _3001 = texelFetch(g_lightClassification, int((((_2703 << 5u) + (_2689 << 9u)) + (_2992 << 2u)) >> 2u)).x;
                _3002 = _3001 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_3002)
                {
                    frontier_phi_68_pred = _2988;
                    frontier_phi_68_pred_1 = _2991;
                    frontier_phi_68_pred_2 = _2990;
                    frontier_phi_68_pred_3 = _2989;
                    frontier_phi_68_pred_4 = _2987;
                    frontier_phi_68_pred_5 = _2986;
                }
                else
                {
                    float _3131;
                    float _3132;
                    float _3133;
                    float _3134;
                    float _3135;
                    float _3136;
                    uint _3137;
                    _3131 = _2986;
                    _3132 = _2987;
                    _3133 = _2988;
                    _3134 = _2989;
                    _3135 = _2990;
                    _3136 = _2991;
                    _3137 = _3001;
                    float _3058;
                    float _3059;
                    float _3060;
                    float _3061;
                    float _3062;
                    float _3063;
                    for (;;)
                    {
                        uint _3141 = uint(findLSB(_3137)) + (_2992 << 5u);
                        uint _3138 = (_3137 + 4294967295u) & _3137;
                        uint _3143 = _3141 * 48u;
                        vec4 _3157 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3143)).x, texelFetch(g_PointLightRenderingBuffer, int(_3143 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3143 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3143 + 3u)).x));
                        uint _3163 = (_3141 * 48u) + 4u;
                        vec4 _3176 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3163)).x, texelFetch(g_PointLightRenderingBuffer, int(_3163 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3163 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3163 + 3u)).x));
                        uint _3182 = (_3141 * 48u) + 8u;
                        vec3 _3193 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3182)).x, texelFetch(g_PointLightRenderingBuffer, int(_3182 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3182 + 2u)).x));
                        float _3197 = _3157.x - _2663;
                        float _3198 = _3157.y - _2664;
                        float _3199 = _3157.z - _2665;
                        float _3200 = dot(vec3(_3197, _3198, _3199), vec3(_3197, _3198, _3199));
                        float _3203 = inversesqrt(_3200);
                        float _3204 = _3203 * _3197;
                        float _3205 = _3203 * _3198;
                        float _3206 = _3203 * _3199;
                        float _3207 = dot(vec3(_914, _917, _920), vec3(_3204, _3205, _3206));
                        float _3212 = 1.0 - (_3200 * _3157.w);
                        float _4600 = isnan(0.0) ? _3212 : (isnan(_3212) ? 0.0 : max(_3212, 0.0));
                        float _3213 = isnan(1.0) ? _4600 : (isnan(_4600) ? 1.0 : min(_4600, 1.0));
                        float _3214 = sqrt(_3200) * _3176.w;
                        float _3217 = 1.39999997615814208984375 / (_3214 + 1.39999997615814208984375);
                        float _3218 = _3217 * _3217;
                        float _3221 = ((1.0 - _3218) * _3207) + _3218;
                        float _3224 = _3214 * _3214;
                        float _3228 = ((isnan(0.0) ? _3221 : (isnan(_3221) ? 0.0 : max(_3221, 0.0))) * _3213) / ((_3224 * 0.699999988079071044921875) + 1.0);
                        float _3232 = (-0.0) - _2663;
                        float _3233 = (-0.0) - _2664;
                        float _3234 = (-0.0) - _2665;
                        float _3238 = inversesqrt(dot(vec3(_3232, _3233, _3234), vec3(_3232, _3233, _3234)));
                        float _3239 = _3238 * _3232;
                        float _3240 = _3238 * _3233;
                        float _3241 = _3238 * _3234;
                        float _3249 = exp2(log2(1.0 / ((_3224 * 3.5) + 5.0)) * 0.25);
                        float _3250 = 1.0 - _973;
                        float _3257 = sqrt(1.0 - ((1.0 - (_3250 * _3250)) * (1.0 - (_3249 * _3249))));
                        float _3258 = _3257 * _3257;
                        float _3259 = _3258 * _3258;
                        float _3260 = _3239 + _3204;
                        float _3261 = _3240 + _3205;
                        float _3262 = _3241 + _3206;
                        float _3266 = inversesqrt(dot(vec3(_3260, _3261, _3262), vec3(_3260, _3261, _3262)));
                        float _3270 = dot(vec3(_914, _917, _920), vec3(_3239, _3240, _3241));
                        float _4616 = isnan(0.0) ? _3270 : (isnan(_3270) ? 0.0 : max(_3270, 0.0));
                        float _3273 = isnan(1.0) ? _4616 : (isnan(_4616) ? 1.0 : min(_4616, 1.0));
                        float _3274 = dot(vec3(_914, _917, _920), vec3(_3266 * _3260, _3266 * _3261, _3266 * _3262));
                        float _4627 = isnan(0.0) ? _3274 : (isnan(_3274) ? 0.0 : max(_3274, 0.0));
                        float _3277 = isnan(1.0) ? _4627 : (isnan(_4627) ? 1.0 : min(_4627, 1.0));
                        float _3281 = ((_3277 * _3277) * (_3259 + (-1.0))) + 1.0;
                        float _3282 = _3217 * _3258;
                        float _3283 = _3282 * _3282;
                        float _3286 = ((1.0 - _3283) * _3207) + _3283;
                        float _4638 = isnan(0.0) ? _3286 : (isnan(_3286) ? 0.0 : max(_3286, 0.0));
                        float _3287 = isnan(1.0) ? _4638 : (isnan(_4638) ? 1.0 : min(_4638, 1.0));
                        float _3288 = 1.0 - _3258;
                        float _3298 = (0.5 / (((_3287 * ((_3273 * _3288) + _3258)) + 9.9999999392252902907785028219223e-09) + (((_3287 * _3288) + _3258) * _3273))) * _3287;
                        float _4649 = isnan(0.0) ? _3298 : (isnan(_3298) ? 0.0 : max(_3298, 0.0));
                        float _3309 = (((_3259 * 3.1415927410125732421875) * (isnan(1.0) ? _4649 : (isnan(_4649) ? 1.0 : min(_4649, 1.0)))) / ((_3281 * _3281) * ((_3224 * 2.1991131305694580078125) + 3.141590118408203125))) * _3213;
                        _3061 = (_3228 * _3176.x) + _3134;
                        _3062 = (_3228 * _3176.y) + _3135;
                        _3063 = (_3228 * _3176.z) + _3136;
                        _3058 = (_3309 * _3193.x) + _3131;
                        _3059 = (_3309 * _3193.y) + _3132;
                        _3060 = (_3309 * _3193.z) + _3133;
                        if (_3138 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3131 = _3058;
                            _3132 = _3059;
                            _3133 = _3060;
                            _3134 = _3061;
                            _3135 = _3062;
                            _3136 = _3063;
                            _3137 = _3138;
                        }
                    }
                    frontier_phi_68_pred = _3060;
                    frontier_phi_68_pred_1 = _3063;
                    frontier_phi_68_pred_2 = _3062;
                    frontier_phi_68_pred_3 = _3061;
                    frontier_phi_68_pred_4 = _3059;
                    frontier_phi_68_pred_5 = _3058;
                }
                _2839 = frontier_phi_68_pred;
                _2845 = frontier_phi_68_pred_1;
                _2843 = frontier_phi_68_pred_2;
                _2841 = frontier_phi_68_pred_3;
                _2837 = frontier_phi_68_pred_4;
                _2835 = frontier_phi_68_pred_5;
                uint _2993 = _2992 + 1u;
                if (_2993 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2986 = _2835;
                    _2987 = _2837;
                    _2988 = _2839;
                    _2989 = _2841;
                    _2990 = _2843;
                    _2991 = _2845;
                    _2992 = _2993;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2834 = _2835;
            _2836 = _2837;
            _2838 = _2839;
            _2840 = _2841;
            _2842 = _2843;
            _2844 = _2845;
        }
        uvec4 _2848 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2849 = _2848.z;
        uint _2851 = (_2849 >> 8u) & 15u;
        float _2954;
        float _2956;
        float _2958;
        float _2960;
        float _2962;
        float _2964;
        if (((4294967295u << _2851) & _2709) == 0u)
        {
            _2954 = _2834;
            _2956 = _2836;
            _2958 = _2838;
            _2960 = _2840;
            _2962 = _2842;
            _2964 = _2844;
        }
        else
        {
            float _2979 = inversesqrt(dot(vec3(_2663, _2664, _2665), vec3(_2663, _2664, _2665)));
            float _2980 = _2979 * _2663;
            float _2981 = _2979 * _2664;
            float _2982 = _2979 * _2665;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2851 < ((_2849 >> 12u) & 15u))
            {
                float _2955;
                float _2957;
                float _2959;
                float _2961;
                float _2963;
                float _2965;
                float _3114 = _2834;
                float _3115 = _2836;
                float _3116 = _2838;
                float _3117 = _2840;
                float _3118 = _2842;
                float _3119 = _2844;
                uint _3120 = _2851;
                uint _3129;
                bool _3130;
                for (;;)
                {
                    _3129 = texelFetch(g_lightClassification, int((((_2703 << 5u) + (_2689 << 9u)) + (_3120 << 2u)) >> 2u)).x;
                    _3130 = _3129 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_3130)
                    {
                        frontier_phi_79_pred = _3119;
                        frontier_phi_79_pred_1 = _3118;
                        frontier_phi_79_pred_2 = _3117;
                        frontier_phi_79_pred_3 = _3116;
                        frontier_phi_79_pred_4 = _3115;
                        frontier_phi_79_pred_5 = _3114;
                    }
                    else
                    {
                        float _3323;
                        float _3324;
                        float _3325;
                        float _3326;
                        float _3327;
                        float _3328;
                        float _3618;
                        float _3619;
                        float _3620;
                        float _3621;
                        float _3622;
                        float _3623;
                        float _3336 = _3114;
                        float _3337 = _3115;
                        float _3338 = _3116;
                        float _3339 = _3117;
                        float _3340 = _3118;
                        float _3341 = _3119;
                        uint _3342 = _3129;
                        uint _3343;
                        vec4 _3368;
                        float _3369;
                        vec4 _3384;
                        vec3 _3396;
                        vec4 _3411;
                        vec4 _3427;
                        float _3474;
                        bool _3475;
                        for (;;)
                        {
                            uint _3353 = ((_3120 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3342));
                            _3343 = (_3342 + 4294967295u) & _3342;
                            uint _3355 = _3353 * 40u;
                            _3368 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3355)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3355 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3355 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3355 + 3u)).x));
                            _3369 = _3368.w;
                            uint _3371 = (_3353 * 40u) + 4u;
                            _3384 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3371)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3371 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3371 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3371 + 3u)).x));
                            uint _3386 = (_3353 * 40u) + 8u;
                            _3396 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3386)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3386 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3386 + 2u)).x));
                            uint _3398 = (_3353 * 40u) + 16u;
                            _3411 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3398)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3398 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3398 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3398 + 3u)).x));
                            uint _3414 = (_3353 * 40u) + 20u;
                            _3427 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3414)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3414 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3414 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3414 + 3u)).x));
                            uint _3430 = (_3353 * 40u) + 24u;
                            vec4 _3443 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3430)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3430 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3430 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3430 + 3u)).x));
                            uint _3449 = (_3353 * 40u) + 28u;
                            vec4 _3462 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3449)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3449 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3449 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3449 + 3u)).x));
                            _3474 = fma(_2665, _3462.z, fma(_2664, _3462.y, _3462.x * _2663)) + _3462.w;
                            _3475 = !((fma(_2665, _3443.z, fma(_2664, _3443.y, _3443.x * _2663)) + _3443.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_3475)
                            {
                                float _3502 = _3368.x - _2663;
                                float _3503 = _3368.y - _2664;
                                float _3504 = _3368.z - _2665;
                                float _3505 = dot(vec3(_3502, _3503, _3504), vec3(_3502, _3503, _3504));
                                float _3508 = inversesqrt(_3505);
                                float _3509 = _3508 * _3502;
                                float _3510 = _3508 * _3503;
                                float _3511 = _3508 * _3504;
                                float _3515 = 1.0 - (_3505 / (_3369 * _3369));
                                float _4660 = isnan(0.0) ? _3515 : (isnan(_3515) ? 0.0 : max(_3515, 0.0));
                                float _3516 = isnan(1.0) ? _4660 : (isnan(_4660) ? 1.0 : min(_4660, 1.0));
                                float _3520 = sqrt(_3505) * _3384.w;
                                float _3522 = 1.39999997615814208984375 / (_3520 + 1.39999997615814208984375);
                                float _3523 = _3522 * _3522;
                                float _3526 = ((1.0 - _3523) * dot(vec3(_3509, _3510, _3511), vec3(_914, _917, _920))) + _3523;
                                float _3529 = _3520 * _3520;
                                float _3533 = (fma(_2665, _3411.z, fma(_2664, _3411.y, _3411.x * _2663)) + _3411.w) / _3474;
                                float _3534 = (fma(_2665, _3427.z, fma(_2664, _3427.y, _3427.x * _2663)) + _3427.w) / _3474;
                                float _3538 = 1.0 - dot(vec2(_3533, _3534), vec2(_3533, _3534));
                                float _4676 = isnan(0.0) ? _3538 : (isnan(_3538) ? 0.0 : max(_3538, 0.0));
                                float _3539 = isnan(1.0) ? _4676 : (isnan(_4676) ? 1.0 : min(_4676, 1.0));
                                float _3540 = _3539 * (((isnan(0.0) ? _3526 : (isnan(_3526) ? 0.0 : max(_3526, 0.0))) * _3516) / ((_3529 * 0.699999988079071044921875) + 1.0));
                                float _3552 = exp2(log2(1.0 / ((_3529 * 3.5) + 5.0)) * 0.25);
                                float _3553 = 1.0 - _973;
                                float _3560 = sqrt(1.0 - ((1.0 - (_3553 * _3553)) * (1.0 - (_3552 * _3552))));
                                float _3561 = _3560 * _3560;
                                float _3562 = _3561 * _3561;
                                float _3563 = _3509 - _2980;
                                float _3564 = _3510 - _2981;
                                float _3565 = _3511 - _2982;
                                float _3569 = inversesqrt(dot(vec3(_3563, _3564, _3565), vec3(_3563, _3564, _3565)));
                                float _3573 = dot(vec3(_914, _917, _920), vec3((-0.0) - _2980, (-0.0) - _2981, (-0.0) - _2982));
                                float _4687 = isnan(0.0) ? _3573 : (isnan(_3573) ? 0.0 : max(_3573, 0.0));
                                float _3576 = isnan(1.0) ? _4687 : (isnan(_4687) ? 1.0 : min(_4687, 1.0));
                                float _3577 = dot(vec3(_914, _917, _920), vec3(_3569 * _3563, _3569 * _3564, _3569 * _3565));
                                float _4698 = isnan(0.0) ? _3577 : (isnan(_3577) ? 0.0 : max(_3577, 0.0));
                                float _3580 = isnan(1.0) ? _4698 : (isnan(_4698) ? 1.0 : min(_4698, 1.0));
                                float _3584 = ((_3580 * _3580) * (_3562 + (-1.0))) + 1.0;
                                float _3585 = _3522 * _3561;
                                float _3586 = _3585 * _3585;
                                float _3592 = ((1.0 - _3586) * dot(vec3(_914, _917, _920), vec3(_3509, _3510, _3511))) + _3586;
                                float _4709 = isnan(0.0) ? _3592 : (isnan(_3592) ? 0.0 : max(_3592, 0.0));
                                float _3593 = isnan(1.0) ? _4709 : (isnan(_4709) ? 1.0 : min(_4709, 1.0));
                                float _3594 = 1.0 - _3561;
                                float _3604 = (0.5 / (((_3593 * ((_3576 * _3594) + _3561)) + 9.9999999392252902907785028219223e-09) + (((_3593 * _3594) + _3561) * _3576))) * _3593;
                                float _4720 = isnan(0.0) ? _3604 : (isnan(_3604) ? 0.0 : max(_3604, 0.0));
                                float _3614 = (_3539 * _3516) * (((_3562 * 3.1415927410125732421875) * (isnan(1.0) ? _4720 : (isnan(_4720) ? 1.0 : min(_4720, 1.0)))) / ((_3584 * _3584) * ((_3529 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3540 * _3384.z;
                                frontier_phi_85_pred_1 = _3540 * _3384.y;
                                frontier_phi_85_pred_2 = _3540 * _3384.x;
                                frontier_phi_85_pred_3 = _3614 * _3396.z;
                                frontier_phi_85_pred_4 = _3614 * _3396.y;
                                frontier_phi_85_pred_5 = _3614 * _3396.x;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3623 = frontier_phi_85_pred;
                            _3622 = frontier_phi_85_pred_1;
                            _3621 = frontier_phi_85_pred_2;
                            _3620 = frontier_phi_85_pred_3;
                            _3619 = frontier_phi_85_pred_4;
                            _3618 = frontier_phi_85_pred_5;
                            _3326 = _3621 + _3339;
                            _3327 = _3622 + _3340;
                            _3328 = _3623 + _3341;
                            _3323 = _3618 + _3336;
                            _3324 = _3619 + _3337;
                            _3325 = _3620 + _3338;
                            if (_3343 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3336 = _3323;
                                _3337 = _3324;
                                _3338 = _3325;
                                _3339 = _3326;
                                _3340 = _3327;
                                _3341 = _3328;
                                _3342 = _3343;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _3328;
                        frontier_phi_79_pred_1 = _3327;
                        frontier_phi_79_pred_2 = _3326;
                        frontier_phi_79_pred_3 = _3325;
                        frontier_phi_79_pred_4 = _3324;
                        frontier_phi_79_pred_5 = _3323;
                    }
                    _2965 = frontier_phi_79_pred;
                    _2963 = frontier_phi_79_pred_1;
                    _2961 = frontier_phi_79_pred_2;
                    _2959 = frontier_phi_79_pred_3;
                    _2957 = frontier_phi_79_pred_4;
                    _2955 = frontier_phi_79_pred_5;
                    uint _3121 = _3120 + 1u;
                    if (_3121 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3114 = _2955;
                        _3115 = _2957;
                        _3116 = _2959;
                        _3117 = _2961;
                        _3118 = _2963;
                        _3119 = _2965;
                        _3120 = _3121;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2961;
                frontier_phi_60_61_ladder_1 = _2965;
                frontier_phi_60_61_ladder_2 = _2963;
                frontier_phi_60_61_ladder_3 = _2959;
                frontier_phi_60_61_ladder_4 = _2957;
                frontier_phi_60_61_ladder_5 = _2955;
            }
            else
            {
                frontier_phi_60_61_ladder = _2840;
                frontier_phi_60_61_ladder_1 = _2844;
                frontier_phi_60_61_ladder_2 = _2842;
                frontier_phi_60_61_ladder_3 = _2838;
                frontier_phi_60_61_ladder_4 = _2836;
                frontier_phi_60_61_ladder_5 = _2834;
            }
            _2954 = frontier_phi_60_61_ladder_5;
            _2956 = frontier_phi_60_61_ladder_4;
            _2958 = frontier_phi_60_61_ladder_3;
            _2960 = frontier_phi_60_61_ladder;
            _2962 = frontier_phi_60_61_ladder_2;
            _2964 = frontier_phi_60_61_ladder_1;
        }
        float _2969 = isnan(1.0) ? _957 : (isnan(_957) ? 1.0 : min(_957, 1.0));
        _2721 = (_2969 * _2960) + _2174;
        _2723 = (_2969 * _2962) + _2176;
        _2725 = (_2969 * _2964) + _2178;
        _2727 = ((_2954 * 0.039999999105930328369140625) * _2969) + _2507;
        _2729 = ((_2956 * 0.039999999105930328369140625) * _2969) + _2509;
        _2731 = ((_2958 * 0.039999999105930328369140625) * _2969) + _2511;
    }
    else
    {
        _2721 = _2174;
        _2723 = _2176;
        _2725 = _2178;
        _2727 = _2507;
        _2729 = _2509;
        _2731 = _2511;
    }
    uint _2737 = _933 + uint(cbMatDynParam._m0[0u].w);
    float _4736 = isnan(0.0) ? _943 : (isnan(_943) ? 0.0 : max(_943, 0.0));
    float _4747 = isnan(0.0) ? _944 : (isnan(_944) ? 0.0 : max(_944, 0.0));
    float _4758 = isnan(0.0) ? _945 : (isnan(_945) ? 0.0 : max(_945, 0.0));
    float _2768 = (((isnan(1.0) ? _4736 : (isnan(_4736) ? 1.0 : min(_4736, 1.0))) * (_2721 + ((isnan(0.0) ? _1715 : (isnan(_1715) ? 0.0 : max(_1715, 0.0))) * _957))) + ((_2727 + ((isnan(0.0) ? _2007 : (isnan(_2007) ? 0.0 : max(_2007, 0.0))) * _1794)) * cbPerFrame._m0[3u].x)) + (((cbMtdParam._m0[16u].x * _566) * _786) * cbInstanceData._m0[_2737].x);
    float _2770 = ((((cbMtdParam._m0[16u].x * _567) * _786) * cbInstanceData._m0[_2737].y) + ((_2729 + ((isnan(0.0) ? _2010 : (isnan(_2010) ? 0.0 : max(_2010, 0.0))) * _1794)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4747 : (isnan(_4747) ? 1.0 : min(_4747, 1.0))) * (_2723 + ((isnan(0.0) ? _1718 : (isnan(_1718) ? 0.0 : max(_1718, 0.0))) * _957)));
    float _2772 = ((((cbMtdParam._m0[16u].x * _568) * _786) * cbInstanceData._m0[_2737].z) + ((_2731 + ((isnan(0.0) ? _2013 : (isnan(_2013) ? 0.0 : max(_2013, 0.0))) * _1794)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4758 : (isnan(_4758) ? 1.0 : min(_4758, 1.0))) * (_2725 + ((isnan(0.0) ? _1721 : (isnan(_1721) ? 0.0 : max(_1721, 0.0))) * _957)));
    float _2773 = isnan(0.0) ? _2768 : (isnan(_2768) ? 0.0 : max(_2768, 0.0));
    float _2774 = isnan(0.0) ? _2770 : (isnan(_2770) ? 0.0 : max(_2770, 0.0));
    float _2775 = isnan(0.0) ? _2772 : (isnan(_2772) ? 0.0 : max(_2772, 0.0));
    uint _2776 = _734 + 6u;
    float _2784 = _895 / cbSceneParam._m0[86u].x;
    float _2785 = _896 / cbSceneParam._m0[86u].y;
    vec4 _2799 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2784, _2785, (log2((isnan(cbSceneParam._m0[77u].w) ? _819 : (isnan(_819) ? cbSceneParam._m0[77u].w : min(_819, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2801 = _2799.x;
    float _2802 = _2799.y;
    float _2803 = _2799.z;
    float _2804 = _2799.w;
    float _2896;
    float _2898;
    float _2900;
    float _2902;
    if (_819 > cbSceneParam._m0[78u].w)
    {
        float _2859 = isnan(_819) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _819 : min(cbSceneParam._m0[80u].w, _819));
        float _2860 = _2859 / _819;
        float _2871 = _2860 * _868;
        float _2872 = _869 * _2860;
        float _2873 = (-0.0) - _2872;
        float _2874 = _2860 * _870;
        float _2876 = (cbSceneParam._m0[77u].w * _2873) / _2859;
        float _2877 = _2876 + cbSceneParam._m0[79u].w;
        float _2878 = cbSceneParam._m0[79u].w - _2872;
        float _2884 = sqrt(((_2871 * _2871) + (_2872 * _2872)) + (_2874 * _2874));
        float _2887 = (1.0 - (cbSceneParam._m0[77u].w / _2859)) * _2884;
        float _2892 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2894 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3071;
        if (abs((_2873 - _2876) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3071 = ((((_2877 > 0.0) ? exp2(_2892 * _2877) : (2.0 - exp2(_2894 * _2877))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2887;
        }
        else
        {
            float _3015 = 1.0 / cbSceneParam._m0[80u].x;
            float _3016 = isnan(_2878) ? _2877 : (isnan(_2877) ? _2878 : max(_2877, _2878));
            float _3017 = isnan(_2878) ? _2877 : (isnan(_2877) ? _2878 : min(_2877, _2878));
            float _3026 = isnan(0.0) ? _3016 : (isnan(_3016) ? 0.0 : min(_3016, 0.0));
            float _3027 = isnan(0.0) ? _3017 : (isnan(_3017) ? 0.0 : min(_3017, 0.0));
            _3071 = ((abs(_2884 / _2873) * cbSceneParam._m0[80u].y) * ((((_3026 - _3027) * 2.0) - ((exp2(_2892 * (isnan(0.0) ? _3016 : (isnan(_3016) ? 0.0 : max(_3016, 0.0)))) - exp2(_2892 * (isnan(0.0) ? _3017 : (isnan(_3017) ? 0.0 : max(_3017, 0.0))))) * _3015)) - ((exp2(_2894 * _3026) - exp2(_2894 * _3027)) * _3015))) + (_2887 * cbSceneParam._m0[80u].z);
        }
        vec4 _3073 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2784, _2785, 1.0), 0.0);
        float _3082 = exp2((_3071 * (-1.44269502162933349609375)) * (1.0 - _3073.w));
        float _3083 = log2(_3082);
        float _3099 = log2(_2804);
        _2896 = (exp2(_3099 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3083 * cbSceneParam._m0[78u].x)) * _3073.x) / cbSceneParam._m0[78u].x)) + _2801;
        _2898 = (exp2(_3099 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3083 * cbSceneParam._m0[78u].y)) * _3073.y) / cbSceneParam._m0[78u].y)) + _2802;
        _2900 = (exp2(_3099 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3083 * cbSceneParam._m0[78u].z)) * _3073.z) / cbSceneParam._m0[78u].z)) + _2803;
        _2902 = _3082 * _2804;
    }
    else
    {
        _2896 = _2801;
        _2898 = _2802;
        _2900 = _2803;
        _2902 = _2804;
    }
    bool _3109;
    vec4 _2912;
    vec4 _2934;
    float _2936;
    float _2940;
    float _2941;
    float _2942;
    float _2943;
    bool _2953;
    for (;;)
    {
        _2912 = cbMatDynParam._m0[0u];
        float _2914 = roundEven(_2912.y);
        bool _2915 = _2914 == 3.0;
        float _2916 = log2(_2902);
        float _2923 = exp2(_2916 * cbSceneParam._m0[78u].x) * _2773;
        float _2924 = exp2(_2916 * cbSceneParam._m0[78u].y) * _2774;
        float _2925 = exp2(_2916 * cbSceneParam._m0[78u].z) * _2775;
        float _2932 = _884 + (-0.5);
        _2934 = cbMtdParam._m0[1u];
        _2936 = _2934.y * _2932;
        float _2939 = (_2914 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2940 = _2939 * (_2915 ? _2923 : (_2923 + (cbSceneParam._m0[72u].w * _2896)));
        _2941 = _2939 * (_2915 ? _2924 : (_2924 + (cbSceneParam._m0[72u].w * _2898)));
        _2942 = _2939 * (_2915 ? _2925 : (_2925 + (cbSceneParam._m0[72u].w * _2900)));
        _2943 = _2932 * 0.999000012874603271484375;
        _2953 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2953)
        {
            if ((cbInstanceData._m0[_734 + 7u].x + _2943) < 0.5)
            {
                _3109 = true;
                break;
            }
        }
        uint _3050 = _933 + uint(_2912.w);
        if ((cbInstanceData._m0[_3050].w < 1.0) && ((cbInstanceData._m0[_3050].w + _2943) < 0.5))
        {
            _3109 = true;
            break;
        }
        if ((_2936 + 1.0) < _2934.x)
        {
            _3109 = true;
            break;
        }
        _3109 = false;
        break;
    }
    float _3314;
    if (_3109)
    {
        discard_state = true;
        _3314 = 0.0;
    }
    else
    {
        _3314 = cbInstanceData._m0[_2776].w;
    }
    SV_Target.x = _2940;
    SV_Target.y = _2941;
    SV_Target.z = _2942;
    SV_Target.w = _3314;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2776].w;
    discard_exit();
}


