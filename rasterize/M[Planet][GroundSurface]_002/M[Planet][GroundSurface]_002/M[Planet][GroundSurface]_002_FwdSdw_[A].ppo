#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[19];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Planet_GroundSurface_002_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_Planet_GroundSurface_002_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_Planet_GroundSurface_002_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D M_Planet_GroundSurface_002_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D M_Planet_GroundSurface_002_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_Planet_GroundSurface_002_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_Planet_GroundSurface_002_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_Planet_GroundSurface_002_snp_0_Texture2D_2;
layout(set = 0, binding = 7) uniform texture2D M_Planet_GroundSurface_002_snp_0_Texture2D_4;
layout(set = 0, binding = 8) uniform texture2D M_Planet_GroundSurface_002_snp_0_Texture2D_6;
layout(set = 0, binding = 9) uniform texture2D M_Planet_GroundSurface_002_snp_0_Texture2D_8;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1358;
float _4028;
float _4029;
float _4030;
float _4031;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _204 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _205 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _206 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _211 = inversesqrt(dot(vec3(_204, _205, _206), vec3(_204, _205, _206)));
    float _218 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _219 = _218 * NORMAL.x;
    float _220 = _218 * NORMAL.y;
    float _221 = _218 * NORMAL.z;
    float _225 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _233;
    float _234;
    float _235;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _233 = (-0.0) - _219;
        _234 = (-0.0) - _220;
        _235 = (-0.0) - _221;
    }
    else
    {
        _233 = _219;
        _234 = _220;
        _235 = _221;
    }
    float _270 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _274 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _278 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _282 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _292 = cbSceneParam._m0[71u].x - (_270 / _282);
    float _293 = cbSceneParam._m0[71u].y - (_274 / _282);
    float _294 = cbSceneParam._m0[71u].z - (_278 / _282);
    uvec4 _298 = floatBitsToUint(cbMtdParam._m0[9u]);
    bool _300 = _298.z != 0u;
    vec4 _319 = texture(sampler2D(M_Planet_GroundSurface_002_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _322 = _319.x;
    float _323 = _319.y;
    float _324 = _319.z;
    bool _345 = _298.x != 0u;
    vec4 _362 = texture(sampler2D(M_Planet_GroundSurface_002_snp_0_Texture2D_8, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w));
    float _364 = _362.x;
    float _365 = _362.y;
    float _366 = _362.z;
    float _382 = _345 ? ((cbMtdParam._m0[17u].y * (cbMtdParam._m0[10u].x - _364)) + _364) : (_364 * cbMtdParam._m0[10u].x);
    float _383 = _345 ? ((cbMtdParam._m0[17u].y * (cbMtdParam._m0[10u].y - _365)) + _365) : (_365 * cbMtdParam._m0[10u].y);
    float _384 = _345 ? ((cbMtdParam._m0[17u].y * (cbMtdParam._m0[10u].z - _366)) + _366) : (_366 * cbMtdParam._m0[10u].z);
    bool _386 = _298.y != 0u;
    vec4 _404 = texture(sampler2D(M_Planet_GroundSurface_002_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _406 = _404.x;
    float _407 = _404.y;
    float _408 = _404.z;
    vec4 _436 = texture(sampler2D(M_Planet_GroundSurface_002_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w));
    float _438 = _436.x;
    float _439 = _436.y;
    float _450 = ((cbMtdParam._m0[16u].w * (-1.39999997615814208984375)) * (1.0 - _438)) + 1.0;
    float _4040 = isnan(0.0) ? _450 : (isnan(_450) ? 0.0 : max(_450, 0.0));
    float _455 = (cbMtdParam._m0[16u].y * ((isnan(1.0) ? _4040 : (isnan(_4040) ? 1.0 : min(_4040, 1.0))) - _438)) + _438;
    float _462 = (_455 * ((_386 ? ((cbMtdParam._m0[14u].y * (cbMtdParam._m0[11u].x - _406)) + _406) : (_406 * cbMtdParam._m0[11u].x)) - _382)) + _382;
    float _463 = (_455 * ((_386 ? ((cbMtdParam._m0[14u].y * (cbMtdParam._m0[11u].y - _407)) + _407) : (_407 * cbMtdParam._m0[11u].y)) - _383)) + _383;
    float _464 = (_455 * ((_386 ? ((cbMtdParam._m0[14u].y * (cbMtdParam._m0[11u].z - _408)) + _408) : (_408 * cbMtdParam._m0[11u].z)) - _384)) + _384;
    float _468 = (((1.0 - _439) * (-1.39999997615814208984375)) * cbMtdParam._m0[16u].z) + 1.0;
    float _4051 = isnan(0.0) ? _468 : (isnan(_468) ? 0.0 : max(_468, 0.0));
    float _473 = (cbMtdParam._m0[14u].x * ((isnan(1.0) ? _4051 : (isnan(_4051) ? 1.0 : min(_4051, 1.0))) - _439)) + _439;
    float _480 = (_473 * ((_300 ? ((cbMtdParam._m0[14u].z * (cbMtdParam._m0[12u].x - _322)) + _322) : (_322 * cbMtdParam._m0[12u].x)) - _462)) + _462;
    float _481 = (_473 * ((_300 ? ((cbMtdParam._m0[14u].z * (cbMtdParam._m0[12u].y - _323)) + _323) : (_323 * cbMtdParam._m0[12u].y)) - _463)) + _463;
    float _482 = (_473 * ((_300 ? ((cbMtdParam._m0[14u].z * (cbMtdParam._m0[12u].z - _324)) + _324) : (_324 * cbMtdParam._m0[12u].z)) - _464)) + _464;
    vec4 _494 = texture(sampler2D(M_Planet_GroundSurface_002_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    vec4 _511 = texture(sampler2D(M_Planet_GroundSurface_002_snp_0_Texture2D_13, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _518 = cbMtdParam._m0[15u].y * _511.x;
    float _525 = (_518 * (_494.x - _480)) + _480;
    float _526 = (_518 * (_494.y - _481)) + _481;
    float _527 = (_518 * (_494.z - _482)) + _482;
    float _541 = inversesqrt(dot(vec3(_292, _293, _294), vec3(_292, _293, _294)));
    float _548 = dot(vec4(_541 * _292, _541 * _293, _541 * _294, 0.0), vec4(_233, _234, _235, 0.0)) - cbMtdParam._m0[15u].x;
    float _4062 = isnan(0.0) ? _548 : (isnan(_548) ? 0.0 : max(_548, 0.0));
    float _558 = (exp2(log2(1.0 - (isnan(1.0) ? _4062 : (isnan(_4062) ? 1.0 : min(_4062, 1.0)))) * (isnan(0.001000000047497451305389404296875) ? cbMtdParam._m0[14u].w : (isnan(cbMtdParam._m0[14u].w) ? 0.001000000047497451305389404296875 : max(cbMtdParam._m0[14u].w, 0.001000000047497451305389404296875)))) * (cbMtdParam._m0[15u].w - cbMtdParam._m0[15u].z)) + cbMtdParam._m0[15u].z;
    float _568 = (((_558 * cbMtdParam._m0[13u].x) - _525) * _558) + _525;
    float _569 = (((_558 * cbMtdParam._m0[13u].y) - _526) * _558) + _526;
    float _570 = (((_558 * cbMtdParam._m0[13u].z) - _527) * _558) + _527;
    vec4 _582 = texture(sampler2D(M_Planet_GroundSurface_002_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    vec4 _599 = texture(sampler2D(M_Planet_GroundSurface_002_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _601 = _599.x;
    float _602 = _599.y;
    float _603 = _599.z;
    float _610 = ((_582.x - _601) * _455) + _601;
    float _611 = ((_582.y - _602) * _455) + _602;
    float _612 = ((_582.z - _603) * _455) + _603;
    vec4 _624 = texture(sampler2D(M_Planet_GroundSurface_002_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _650 = texture(sampler2D(M_Planet_GroundSurface_002_snp_0_Texture2D_10, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _662 = (((_624.x - _610) * _473) + _610) + ((_650.x + (-0.5)) * cbMtdParam._m0[17u].x);
    float _663 = (((_624.y - _611) * _473) + _611) + ((_650.y + (-0.5)) * cbMtdParam._m0[17u].x);
    float _664 = (((_624.z - _612) * _473) + _612) + ((_650.z + (-0.5)) * cbMtdParam._m0[17u].x);
    vec4 _677 = texture(sampler2D(M_Planet_GroundSurface_002_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _688 = ((_677.x - _662) * _518) + _662;
    float _689 = ((_677.y - _663) * _518) + _663;
    float _690 = ((_677.z - _664) * _518) + _664;
    float _700 = ((1.0 - _690) * _558) + _690;
    float _704 = ((((0.502016007900238037109375 - _688) * _558) + _688) * 2.0) + (-1.0);
    float _706 = ((((0.502016007900238037109375 - _689) * _558) + _689) * 2.0) + (-1.0);
    float _707 = dot(vec2(_704, _706), vec2(_704, _706));
    float _4078 = isnan(0.0) ? _707 : (isnan(_707) ? 0.0 : max(_707, 0.0));
    float _712 = sqrt(1.0 - (isnan(1.0) ? _4078 : (isnan(_4078) ? 1.0 : min(_4078, 1.0))));
    float _717 = inversesqrt(dot(vec3(_270, _274, _278), vec3(_270, _274, _278)));
    bool _722 = _298.w != 0u;
    float _732 = inversesqrt(dot(vec3(cbMtdParam._m0[17u].zw, cbMtdParam._m0[18u].x), vec3(cbMtdParam._m0[17u].zw, cbMtdParam._m0[18u].x)));
    uint _736 = uint(roundEven(NORMAL.w)) * 13u;
    uint _737 = _736 + 5u;
    uint _742 = floatBitsToUint(cbInstanceData._m0[_737]).x * 14u;
    float _748 = _722 ? cbLight._m0[_742].x : (_732 * cbMtdParam._m0[17u].z);
    float _749 = _722 ? cbLight._m0[_742].y : (_732 * cbMtdParam._m0[17u].w);
    float _750 = _722 ? cbLight._m0[_742].z : (_732 * cbMtdParam._m0[18u].x);
    float _754 = inversesqrt(dot(vec3(_748, _749, _750), vec3(_748, _749, _750)));
    float _755 = _748 * _754;
    float _756 = _749 * _754;
    float _757 = _750 * _754;
    float _761 = inversesqrt(dot(vec3(_755, _756, _757), vec3(_755, _756, _757)));
    float _777 = (0.9700000286102294921875 - exp2(log2((dot(vec4(_717 * _270, _717 * _274, _717 * _278, 0.0), vec4(_761 * _755, _761 * _756, _761 * _757, 0.0)) + 1.0) * 0.5) * 0.017999999225139617919921875)) * (-5.0);
    float _4089 = isnan(0.0) ? _777 : (isnan(_777) ? 0.0 : max(_777, 0.0));
    float _779 = isnan(1.0) ? _4089 : (isnan(_4089) ? 1.0 : min(_4089, 1.0));
    float _785 = exp2(log2(_779 * 6.5) * 7.0);
    float _4100 = isnan(0.0) ? _785 : (isnan(_785) ? 0.0 : max(_785, 0.0));
    float _787 = (isnan(1.0) ? _4100 : (isnan(_4100) ? 1.0 : min(_4100, 1.0))) + _779;
    float _4111 = isnan(0.0) ? _787 : (isnan(_787) ? 0.0 : max(_787, 0.0));
    float _788 = isnan(1.0) ? _4111 : (isnan(_4111) ? 1.0 : min(_4111, 1.0));
    float _791 = fma(_712, _233, fma(_706, _225 * TANGENT.x, (_211 * _204) * _704));
    float _794 = fma(_712, _234, fma(_706, _225 * TANGENT.y, (_211 * _205) * _704));
    float _797 = fma(_712, _235, fma(_706, _225 * TANGENT.z, (_211 * _206) * _704));
    float _801 = inversesqrt(dot(vec3(_791, _794, _797), vec3(_791, _794, _797)));
    float _802 = _801 * _791;
    float _803 = _801 * _794;
    float _804 = _801 * _797;
    float _4122 = isnan(0.0) ? _700 : (isnan(_700) ? 0.0 : max(_700, 0.0));
    float _805 = isnan(1.0) ? _4122 : (isnan(_4122) ? 1.0 : min(_4122, 1.0));
    float _4133 = isnan(0.0) ? _568 : (isnan(_568) ? 0.0 : max(_568, 0.0));
    float _4144 = isnan(0.0) ? _569 : (isnan(_569) ? 0.0 : max(_569, 0.0));
    float _4155 = isnan(0.0) ? _570 : (isnan(_570) ? 0.0 : max(_570, 0.0));
    float _821 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _861 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _870 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _861);
    float _871 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _861);
    float _872 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _861);
    float _876 = inversesqrt(dot(vec3(_870, _871, _872), vec3(_870, _871, _872)));
    float _877 = _870 * _876;
    float _878 = _871 * _876;
    float _879 = _872 * _876;
    vec4 _884 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _886 = _884.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1039 = sqrt(((_870 * _870) + (_871 * _871)) + (_872 * _872));
        float _1045 = (cbMatDynParam._m0[5u].x * _1039) + cbMatDynParam._m0[5u].y;
        float _4166 = isnan(0.0) ? _1045 : (isnan(_1045) ? 0.0 : max(_1045, 0.0));
        float _1046 = isnan(1.0) ? _4166 : (isnan(_4166) ? 1.0 : min(_4166, 1.0));
        float _1050 = (cbMatDynParam._m0[5u].z * _1039) + cbMatDynParam._m0[5u].w;
        float _4177 = isnan(0.0) ? _1050 : (isnan(_1050) ? 0.0 : max(_1050, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4177 : (isnan(_4177) ? 1.0 : min(_4177, 1.0))) - _1046)) + _1046) < ((_886 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _897 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _898 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _916 = fma(_804, cbSceneParam._m0[5u].z, fma(_803, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _802));
    float _919 = fma(_804, cbSceneParam._m0[6u].z, fma(_803, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _802));
    float _922 = fma(_804, cbSceneParam._m0[7u].z, fma(_803, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _802));
    uint _935 = _736 + 9u;
    uint _936 = _935 + uint(cbMatDynParam._m0[0u].w);
    float _942 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4133 : (isnan(_4133) ? 1.0 : min(_4133, 1.0)))) * cbInstanceData._m0[_936].x;
    float _943 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4144 : (isnan(_4144) ? 1.0 : min(_4144, 1.0)))) * cbInstanceData._m0[_936].y;
    float _944 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4155 : (isnan(_4155) ? 1.0 : min(_4155, 1.0)))) * cbInstanceData._m0[_936].z;
    float _4188 = isnan(0.0) ? _942 : (isnan(_942) ? 0.0 : max(_942, 0.0));
    float _945 = isnan(1.0) ? _4188 : (isnan(_4188) ? 1.0 : min(_4188, 1.0));
    float _4199 = isnan(0.0) ? _943 : (isnan(_943) ? 0.0 : max(_943, 0.0));
    float _946 = isnan(1.0) ? _4199 : (isnan(_4199) ? 1.0 : min(_4199, 1.0));
    float _4210 = isnan(0.0) ? _944 : (isnan(_944) ? 0.0 : max(_944, 0.0));
    float _947 = isnan(1.0) ? _4210 : (isnan(_4210) ? 1.0 : min(_4210, 1.0));
    vec4 _956 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _897, cbSceneParam._m0[86u].y * _898));
    float _959 = _956.x * TEXCOORD.z;
    float _960 = dot(vec3(_802, _803, _804), vec3(_877, _878, _879));
    float _963 = _960 * 2.0;
    float _967 = (_963 * _802) - _877;
    float _968 = (_963 * _803) - _878;
    float _969 = (_963 * _804) - _879;
    float _973 = abs(dot(vec3(_877, _878, _879), vec3(_802, _803, _804)));
    float _4221 = isnan(0.0) ? _973 : (isnan(_973) ? 0.0 : max(_973, 0.0));
    float _975 = sqrt(_805);
    float _988 = exp2((_975 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4221 : (isnan(_4221) ? 1.0 : min(_4221, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_975 * 3.0));
    float _1020 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1024 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1028 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1357;
    float _1359;
    float _1360;
    float _1361;
    float _1362;
    float _1363;
    float _1364;
    float _1365;
    float _1366;
    float _1367;
    float _1368;
    float _1369;
    float _1370;
    float _1371;
    float _1372;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1084 = fma(_1028, cbModelParam._m0[26u].z, fma(_1024, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1020));
        float _1088 = fma(_1028, cbModelParam._m0[27u].z, fma(_1024, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1020));
        float _1092 = fma(_1028, cbModelParam._m0[28u].z, fma(_1024, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1020));
        float _1115 = _1020 + _802;
        float _1116 = _1024 + _803;
        float _1117 = _1028 + _804;
        float _1127 = fma(_1117, cbModelParam._m0[26u].z, fma(_1116, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1115)) - _1084;
        float _1128 = fma(_1117, cbModelParam._m0[27u].z, fma(_1116, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1115)) - _1088;
        float _1129 = fma(_1117, cbModelParam._m0[28u].z, fma(_1116, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1115)) - _1092;
        float _1133 = inversesqrt(dot(vec3(_1127, _1128, _1129), vec3(_1127, _1128, _1129)));
        float _1146 = ((_1133 * _1127) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1084 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1147 = ((_1133 * _1128) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1088 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1148 = ((_1133 * _1129) / cbModelParam._m0[34u].z) + ((((((_1092 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1151 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1146, _1147, _1148), 0.0);
        vec4 _1158 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1146, _1147, _1148), 0.0);
        vec4 _1165 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1146, _1147, _1148), 0.0);
        vec4 _1172 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1146, _1147, _1148), 0.0);
        float _1185 = exp2((_1151.w + (-0.5)) * 20.0) * 2.0;
        float _1186 = _1185 * (_1151.x + (-0.5));
        float _1187 = _1185 * (_1151.y + (-0.5));
        float _1188 = _1185 * (_1151.z + (-0.5));
        float _1195 = exp2((_1158.w + (-0.5)) * 20.0) * 2.0;
        float _1196 = _1195 * (_1158.x + (-0.5));
        float _1197 = _1195 * (_1158.y + (-0.5));
        float _1198 = _1195 * (_1158.z + (-0.5));
        float _1205 = exp2((_1165.w + (-0.5)) * 20.0) * 2.0;
        float _1206 = _1205 * (_1165.x + (-0.5));
        float _1207 = _1205 * (_1165.y + (-0.5));
        float _1208 = _1205 * (_1165.z + (-0.5));
        float _1215 = exp2((_1172.w + (-0.5)) * 20.0) * 2.0;
        float _1216 = _1215 * (_1172.x + (-0.5));
        float _1217 = _1215 * (_1172.y + (-0.5));
        float _1218 = _1215 * (_1172.z + (-0.5));
        float _1219 = isnan(0.0) ? _1216 : (isnan(_1216) ? 0.0 : max(_1216, 0.0));
        float _1220 = isnan(0.0) ? _1217 : (isnan(_1217) ? 0.0 : max(_1217, 0.0));
        float _1221 = isnan(0.0) ? _1218 : (isnan(_1218) ? 0.0 : max(_1218, 0.0));
        float _1222 = _1186 * 0.5;
        float _1223 = _1196 * 0.5;
        float _1224 = _1206 * 0.5;
        float _1225 = dot(vec3(_1222, _1223, _1224), vec3(_1222, _1223, _1224));
        float _1230 = (_1225 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1225);
        float _1239 = (dot(vec3(_802, _803, _804), vec3(_1230 * _1222, _1230 * _1223, _1230 * _1224)) + 1.0) * 0.5;
        float _4247 = isnan(0.0) ? _1239 : (isnan(_1239) ? 0.0 : max(_1239, 0.0));
        float _1249 = sqrt(((_1223 * _1223) + (_1222 * _1222)) + (_1224 * _1224)) / (_1219 + 9.9999997473787516355514526367188e-06);
        float _4258 = isnan(0.0) ? _1249 : (isnan(_1249) ? 0.0 : max(_1249, 0.0));
        float _1250 = isnan(1.0) ? _4258 : (isnan(_4258) ? 1.0 : min(_4258, 1.0));
        float _1251 = _1250 * 2.0;
        float _1255 = (1.0 - _1250) / (_1250 + 1.0);
        float _4269 = isnan(0.0) ? _1255 : (isnan(_1255) ? 0.0 : max(_1255, 0.0));
        float _1256 = isnan(1.0) ? _4269 : (isnan(_4269) ? 1.0 : min(_4269, 1.0));
        float _1265 = ((((1.0 - _1256) * (_1251 + 2.0)) * exp2(log2(isnan(1.0) ? _4247 : (isnan(_4247) ? 1.0 : min(_4247, 1.0))) * (_1251 + 1.0))) + _1256) * _1219;
        float _1266 = _1187 * 0.5;
        float _1267 = _1197 * 0.5;
        float _1268 = _1207 * 0.5;
        float _1269 = dot(vec3(_1266, _1267, _1268), vec3(_1266, _1267, _1268));
        float _1274 = (_1269 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1269);
        float _1282 = (dot(vec3(_802, _803, _804), vec3(_1274 * _1266, _1274 * _1267, _1274 * _1268)) + 1.0) * 0.5;
        float _4280 = isnan(0.0) ? _1282 : (isnan(_1282) ? 0.0 : max(_1282, 0.0));
        float _1291 = sqrt(((_1267 * _1267) + (_1266 * _1266)) + (_1268 * _1268)) / (_1220 + 9.9999997473787516355514526367188e-06);
        float _4291 = isnan(0.0) ? _1291 : (isnan(_1291) ? 0.0 : max(_1291, 0.0));
        float _1292 = isnan(1.0) ? _4291 : (isnan(_4291) ? 1.0 : min(_4291, 1.0));
        float _1293 = _1292 * 2.0;
        float _1297 = (1.0 - _1292) / (_1292 + 1.0);
        float _4302 = isnan(0.0) ? _1297 : (isnan(_1297) ? 0.0 : max(_1297, 0.0));
        float _1298 = isnan(1.0) ? _4302 : (isnan(_4302) ? 1.0 : min(_4302, 1.0));
        float _1307 = ((((1.0 - _1298) * (_1293 + 2.0)) * exp2(log2(isnan(1.0) ? _4280 : (isnan(_4280) ? 1.0 : min(_4280, 1.0))) * (_1293 + 1.0))) + _1298) * _1220;
        float _1308 = _1188 * 0.5;
        float _1309 = _1198 * 0.5;
        float _1310 = _1208 * 0.5;
        float _1311 = dot(vec3(_1308, _1309, _1310), vec3(_1308, _1309, _1310));
        float _1316 = (_1311 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1311);
        float _1324 = (dot(vec3(_802, _803, _804), vec3(_1316 * _1308, _1316 * _1309, _1316 * _1310)) + 1.0) * 0.5;
        float _4313 = isnan(0.0) ? _1324 : (isnan(_1324) ? 0.0 : max(_1324, 0.0));
        float _1333 = sqrt(((_1309 * _1309) + (_1308 * _1308)) + (_1310 * _1310)) / (_1221 + 9.9999997473787516355514526367188e-06);
        float _4324 = isnan(0.0) ? _1333 : (isnan(_1333) ? 0.0 : max(_1333, 0.0));
        float _1334 = isnan(1.0) ? _4324 : (isnan(_4324) ? 1.0 : min(_4324, 1.0));
        float _1335 = _1334 * 2.0;
        float _1339 = (1.0 - _1334) / (_1334 + 1.0);
        float _4335 = isnan(0.0) ? _1339 : (isnan(_1339) ? 0.0 : max(_1339, 0.0));
        float _1340 = isnan(1.0) ? _4335 : (isnan(_4335) ? 1.0 : min(_4335, 1.0));
        float _1349 = ((((1.0 - _1340) * (_1335 + 2.0)) * exp2(log2(isnan(1.0) ? _4313 : (isnan(_4313) ? 1.0 : min(_4313, 1.0))) * (_1335 + 1.0))) + _1340) * _1221;
        _1357 = _1188;
        _1359 = _1187;
        _1360 = _1186;
        _1361 = _1198;
        _1362 = _1197;
        _1363 = _1196;
        _1364 = _1208;
        _1365 = _1207;
        _1366 = _1206;
        _1367 = _1221;
        _1368 = _1220;
        _1369 = _1219;
        _1370 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1265 : (isnan(_1265) ? 0.0 : max(_1265, 0.0)));
        _1371 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1307 : (isnan(_1307) ? 0.0 : max(_1307, 0.0)));
        _1372 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1349 : (isnan(_1349) ? 0.0 : max(_1349, 0.0)));
    }
    else
    {
        _1357 = _1358;
        _1359 = _1358;
        _1360 = _1358;
        _1361 = _1358;
        _1362 = _1358;
        _1363 = _1358;
        _1364 = _1358;
        _1365 = _1358;
        _1366 = _1358;
        _1367 = _1358;
        _1368 = _1358;
        _1369 = _1358;
        _1370 = 0.0;
        _1371 = 0.0;
        _1372 = 0.0;
    }
    float _1670;
    float _1671;
    float _1672;
    float _1673;
    float _1674;
    float _1675;
    float _1676;
    float _1677;
    float _1678;
    float _1679;
    float _1680;
    float _1681;
    float _1682;
    float _1683;
    float _1684;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1401 = fma(_1028, cbModelParam._m0[30u].z, fma(_1024, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1020));
        float _1405 = fma(_1028, cbModelParam._m0[31u].z, fma(_1024, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1020));
        float _1409 = fma(_1028, cbModelParam._m0[32u].z, fma(_1024, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1020));
        float _1432 = _1020 + _802;
        float _1433 = _1024 + _803;
        float _1434 = _1028 + _804;
        float _1444 = fma(_1434, cbModelParam._m0[30u].z, fma(_1433, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1432)) - _1401;
        float _1445 = fma(_1434, cbModelParam._m0[31u].z, fma(_1433, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1432)) - _1405;
        float _1446 = fma(_1434, cbModelParam._m0[32u].z, fma(_1433, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1432)) - _1409;
        float _1450 = inversesqrt(dot(vec3(_1444, _1445, _1446), vec3(_1444, _1445, _1446)));
        float _1463 = ((_1450 * _1444) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1401 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1464 = ((_1450 * _1445) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1405 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1465 = ((_1450 * _1446) / cbModelParam._m0[35u].z) + ((((((_1409 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1467 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1463, _1464, _1465), 0.0);
        vec4 _1474 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1463, _1464, _1465), 0.0);
        vec4 _1481 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1463, _1464, _1465), 0.0);
        vec4 _1488 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1463, _1464, _1465), 0.0);
        float _1500 = exp2((_1467.w + (-0.5)) * 20.0) * 2.0;
        float _1501 = _1500 * (_1467.x + (-0.5));
        float _1502 = _1500 * (_1467.y + (-0.5));
        float _1503 = _1500 * (_1467.z + (-0.5));
        float _1510 = exp2((_1474.w + (-0.5)) * 20.0) * 2.0;
        float _1511 = _1510 * (_1474.x + (-0.5));
        float _1512 = _1510 * (_1474.y + (-0.5));
        float _1513 = _1510 * (_1474.z + (-0.5));
        float _1520 = exp2((_1481.w + (-0.5)) * 20.0) * 2.0;
        float _1521 = _1520 * (_1481.x + (-0.5));
        float _1522 = _1520 * (_1481.y + (-0.5));
        float _1523 = _1520 * (_1481.z + (-0.5));
        float _1530 = exp2((_1488.w + (-0.5)) * 20.0) * 2.0;
        float _1531 = _1530 * (_1488.x + (-0.5));
        float _1532 = _1530 * (_1488.y + (-0.5));
        float _1533 = _1530 * (_1488.z + (-0.5));
        float _1534 = isnan(0.0) ? _1531 : (isnan(_1531) ? 0.0 : max(_1531, 0.0));
        float _1535 = isnan(0.0) ? _1532 : (isnan(_1532) ? 0.0 : max(_1532, 0.0));
        float _1536 = isnan(0.0) ? _1533 : (isnan(_1533) ? 0.0 : max(_1533, 0.0));
        float _1537 = _1501 * 0.5;
        float _1538 = _1511 * 0.5;
        float _1539 = _1521 * 0.5;
        float _1540 = dot(vec3(_1537, _1538, _1539), vec3(_1537, _1538, _1539));
        float _1545 = (_1540 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1540);
        float _1553 = (dot(vec3(_802, _803, _804), vec3(_1545 * _1537, _1545 * _1538, _1545 * _1539)) + 1.0) * 0.5;
        float _4376 = isnan(0.0) ? _1553 : (isnan(_1553) ? 0.0 : max(_1553, 0.0));
        float _1562 = sqrt(((_1538 * _1538) + (_1537 * _1537)) + (_1539 * _1539)) / (_1534 + 9.9999997473787516355514526367188e-06);
        float _4387 = isnan(0.0) ? _1562 : (isnan(_1562) ? 0.0 : max(_1562, 0.0));
        float _1563 = isnan(1.0) ? _4387 : (isnan(_4387) ? 1.0 : min(_4387, 1.0));
        float _1564 = _1563 * 2.0;
        float _1568 = (1.0 - _1563) / (_1563 + 1.0);
        float _4398 = isnan(0.0) ? _1568 : (isnan(_1568) ? 0.0 : max(_1568, 0.0));
        float _1569 = isnan(1.0) ? _4398 : (isnan(_4398) ? 1.0 : min(_4398, 1.0));
        float _1578 = ((((1.0 - _1569) * (_1564 + 2.0)) * exp2(log2(isnan(1.0) ? _4376 : (isnan(_4376) ? 1.0 : min(_4376, 1.0))) * (_1564 + 1.0))) + _1569) * _1534;
        float _1579 = _1502 * 0.5;
        float _1580 = _1512 * 0.5;
        float _1581 = _1522 * 0.5;
        float _1582 = dot(vec3(_1579, _1580, _1581), vec3(_1579, _1580, _1581));
        float _1587 = (_1582 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1582);
        float _1595 = (dot(vec3(_802, _803, _804), vec3(_1587 * _1579, _1587 * _1580, _1587 * _1581)) + 1.0) * 0.5;
        float _4409 = isnan(0.0) ? _1595 : (isnan(_1595) ? 0.0 : max(_1595, 0.0));
        float _1604 = sqrt(((_1580 * _1580) + (_1579 * _1579)) + (_1581 * _1581)) / (_1535 + 9.9999997473787516355514526367188e-06);
        float _4420 = isnan(0.0) ? _1604 : (isnan(_1604) ? 0.0 : max(_1604, 0.0));
        float _1605 = isnan(1.0) ? _4420 : (isnan(_4420) ? 1.0 : min(_4420, 1.0));
        float _1606 = _1605 * 2.0;
        float _1610 = (1.0 - _1605) / (_1605 + 1.0);
        float _4431 = isnan(0.0) ? _1610 : (isnan(_1610) ? 0.0 : max(_1610, 0.0));
        float _1611 = isnan(1.0) ? _4431 : (isnan(_4431) ? 1.0 : min(_4431, 1.0));
        float _1620 = ((((1.0 - _1611) * (_1606 + 2.0)) * exp2(log2(isnan(1.0) ? _4409 : (isnan(_4409) ? 1.0 : min(_4409, 1.0))) * (_1606 + 1.0))) + _1611) * _1535;
        float _1621 = _1503 * 0.5;
        float _1622 = _1513 * 0.5;
        float _1623 = _1523 * 0.5;
        float _1624 = dot(vec3(_1621, _1622, _1623), vec3(_1621, _1622, _1623));
        float _1629 = (_1624 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1624);
        float _1637 = (dot(vec3(_802, _803, _804), vec3(_1629 * _1621, _1629 * _1622, _1629 * _1623)) + 1.0) * 0.5;
        float _4442 = isnan(0.0) ? _1637 : (isnan(_1637) ? 0.0 : max(_1637, 0.0));
        float _1646 = sqrt(((_1622 * _1622) + (_1621 * _1621)) + (_1623 * _1623)) / (_1536 + 9.9999997473787516355514526367188e-06);
        float _4453 = isnan(0.0) ? _1646 : (isnan(_1646) ? 0.0 : max(_1646, 0.0));
        float _1647 = isnan(1.0) ? _4453 : (isnan(_4453) ? 1.0 : min(_4453, 1.0));
        float _1648 = _1647 * 2.0;
        float _1652 = (1.0 - _1647) / (_1647 + 1.0);
        float _4464 = isnan(0.0) ? _1652 : (isnan(_1652) ? 0.0 : max(_1652, 0.0));
        float _1653 = isnan(1.0) ? _4464 : (isnan(_4464) ? 1.0 : min(_4464, 1.0));
        float _1662 = ((((1.0 - _1653) * (_1648 + 2.0)) * exp2(log2(isnan(1.0) ? _4442 : (isnan(_4442) ? 1.0 : min(_4442, 1.0))) * (_1648 + 1.0))) + _1653) * _1536;
        _1670 = _1503;
        _1671 = _1502;
        _1672 = _1501;
        _1673 = _1513;
        _1674 = _1512;
        _1675 = _1511;
        _1676 = _1523;
        _1677 = _1522;
        _1678 = _1521;
        _1679 = _1536;
        _1680 = _1535;
        _1681 = _1534;
        _1682 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1578 : (isnan(_1578) ? 0.0 : max(_1578, 0.0)));
        _1683 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1620 : (isnan(_1620) ? 0.0 : max(_1620, 0.0)));
        _1684 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1662 : (isnan(_1662) ? 0.0 : max(_1662, 0.0)));
    }
    else
    {
        _1670 = _1358;
        _1671 = _1358;
        _1672 = _1358;
        _1673 = _1358;
        _1674 = _1358;
        _1675 = _1358;
        _1676 = _1358;
        _1677 = _1358;
        _1678 = _1358;
        _1679 = _1358;
        _1680 = _1358;
        _1681 = _1358;
        _1682 = 0.0;
        _1683 = 0.0;
        _1684 = 0.0;
    }
    float _1694 = (cbModelParam._m0[1u].x * (_1682 - _1370)) + _1370;
    float _1695 = (cbModelParam._m0[1u].x * (_1683 - _1371)) + _1371;
    float _1696 = (cbModelParam._m0[1u].x * (_1684 - _1372)) + _1372;
    float _1717 = fma(_1696, cbSceneParam._m0[89u].z, fma(_1695, cbSceneParam._m0[89u].y, _1694 * cbSceneParam._m0[89u].x));
    float _1720 = fma(_1696, cbSceneParam._m0[90u].z, fma(_1695, cbSceneParam._m0[90u].y, _1694 * cbSceneParam._m0[90u].x));
    float _1723 = fma(_1696, cbSceneParam._m0[91u].z, fma(_1695, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1694));
    float _1738 = _967 * 0.5;
    float _1739 = _968 * 0.5;
    float _1740 = _969 * 0.5;
    float _1741 = dot(vec4(_1738, _1739, _1740, 1.0), vec4(_1672, _1675, _1678, _1681));
    float _1744 = dot(vec4(_1738, _1739, _1740, 1.0), vec4(_1671, _1674, _1677, _1680));
    float _1747 = dot(vec4(_1738, _1739, _1740, 1.0), vec4(_1670, _1673, _1676, _1679));
    float _1781;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1754 = dot(vec4(_1738, _1739, _1740, 1.0), vec4(_1357, _1361, _1364, _1367));
        float _1758 = dot(vec4(_1738, _1739, _1740, 1.0), vec4(_1359, _1362, _1365, _1368));
        float _1762 = dot(vec4(_1738, _1739, _1740, 1.0), vec4(_1360, _1363, _1366, _1369));
        float _1769 = dot(vec4(cbModelParam._m0[39u]), vec4(_1738, _1739, _1740, 1.0));
        _1781 = dot(vec3(isnan(0.0) ? _1762 : (isnan(_1762) ? 0.0 : max(_1762, 0.0)), isnan(0.0) ? _1758 : (isnan(_1758) ? 0.0 : max(_1758, 0.0)), isnan(0.0) ? _1754 : (isnan(_1754) ? 0.0 : max(_1754, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1769) ? 0.0 : (isnan(0.0) ? _1769 : max(0.0, _1769))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1781 = 1.0;
    }
    float _1792;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1783 = dot(vec4(cbModelParam._m0[40u]), vec4(_1738, _1739, _1740, 1.0));
        _1792 = dot(vec3(isnan(0.0) ? _1741 : (isnan(_1741) ? 0.0 : max(_1741, 0.0)), isnan(0.0) ? _1744 : (isnan(_1744) ? 0.0 : max(_1744, 0.0)), isnan(0.0) ? _1747 : (isnan(_1747) ? 0.0 : max(_1747, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1783) ? 0.0 : (isnan(0.0) ? _1783 : max(0.0, _1783))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1792 = 1.0;
    }
    float _1796 = (_1792 * cbModelParam._m0[1u].x) + (_1781 * (1.0 - cbModelParam._m0[1u].x));
    float _1806 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _805);
    float _1807 = isnan(_1806) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1806 : min(cbModelParam._m0[25u].z, _1806));
    float _1887;
    float _1889;
    float _1891;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1854 = fma(_1028, cbModelParam._m0[13u].z, fma(_1024, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1020)) + cbModelParam._m0[13u].w;
        float _1858 = fma(_1028, cbModelParam._m0[14u].z, fma(_1024, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1020)) + cbModelParam._m0[14u].w;
        float _1862 = fma(_1028, cbModelParam._m0[15u].z, fma(_1024, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1020)) + cbModelParam._m0[15u].w;
        float _1865 = fma(_969, cbModelParam._m0[13u].z, fma(_968, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _967));
        float _1868 = fma(_969, cbModelParam._m0[14u].z, fma(_968, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _967));
        float _1871 = fma(_969, cbModelParam._m0[15u].z, fma(_968, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _967));
        float _1899;
        if (_1865 > 0.0)
        {
            _1899 = abs((1.0 - _1854) / _1865);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1865 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1854 + 1.0) / _1865);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1899 = frontier_phi_19_17_ladder;
        }
        float _2070;
        if (_1868 > 0.0)
        {
            _2070 = abs((1.0 - _1858) / _1868);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1868 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1858 + 1.0) / _1868);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2070 = frontier_phi_28_24_ladder;
        }
        float _2364;
        if (_1871 > 0.0)
        {
            _2364 = abs((1.0 - _1862) / _1871);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1871 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1862 + 1.0) / _1871);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2364 = frontier_phi_40_35_ladder;
        }
        float _2366 = isnan(_2070) ? _1899 : (isnan(_1899) ? _2070 : min(_1899, _2070));
        float _2367 = isnan(_2364) ? _2366 : (isnan(_2366) ? _2364 : min(_2366, _2364));
        float _2371 = (_2367 * _1865) + _1854;
        float _2372 = (_2367 * _1868) + _1858;
        float _2373 = (_2367 * _1871) + _1862;
        float _2374 = _2367 * 9.9999997473787516355514526367188e-05;
        float _2376 = (-1.0) - _2374;
        float _2378 = _2374 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2373 > _2378) || ((_2373 < _2376) || ((_2372 > _2378) || ((_2372 < _2376) || ((_2371 < _2376) || (_2371 > _2378))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2518 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2373, cbModelParam._m0[9u].z, fma(_2372, cbModelParam._m0[9u].y, _2371 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2373, cbModelParam._m0[10u].z, fma(_2372, cbModelParam._m0[10u].y, _2371 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2373, cbModelParam._m0[11u].z, fma(_2372, cbModelParam._m0[11u].y, _2371 * cbModelParam._m0[11u].x))), _1807);
            frontier_phi_18_40_ladder = _2518.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2518.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2518.x * cbModelParam._m0[1u].y;
        }
        _1887 = frontier_phi_18_40_ladder_2;
        _1889 = frontier_phi_18_40_ladder_1;
        _1891 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1875 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_967, _968, _969), _1807);
        _1887 = _1875.x * cbModelParam._m0[1u].y;
        _1889 = _1875.y * cbModelParam._m0[1u].y;
        _1891 = _1875.z * cbModelParam._m0[1u].y;
    }
    float _1895 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _805);
    float _1896 = isnan(_1895) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1895 : min(cbModelParam._m0[25u].w, _1895));
    float _1987;
    float _1989;
    float _1991;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1951 = fma(_1028, cbModelParam._m0[21u].z, fma(_1024, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1020)) + cbModelParam._m0[21u].w;
        float _1955 = fma(_1028, cbModelParam._m0[22u].z, fma(_1024, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1020)) + cbModelParam._m0[22u].w;
        float _1959 = fma(_1028, cbModelParam._m0[23u].z, fma(_1024, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1020)) + cbModelParam._m0[23u].w;
        float _1962 = fma(_969, cbModelParam._m0[21u].z, fma(_968, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _967));
        float _1965 = fma(_969, cbModelParam._m0[22u].z, fma(_968, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _967));
        float _1968 = fma(_969, cbModelParam._m0[23u].z, fma(_968, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _967));
        float _2075;
        if (_1962 > 0.0)
        {
            _2075 = abs((1.0 - _1951) / _1962);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1962 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1951 + 1.0) / _1962);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _2075 = frontier_phi_30_26_ladder;
        }
        float _2391;
        if (_1965 > 0.0)
        {
            _2391 = abs((1.0 - _1955) / _1965);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1965 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1955 + 1.0) / _1965);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2391 = frontier_phi_42_37_ladder;
        }
        float _2718;
        if (_1968 > 0.0)
        {
            _2718 = abs((1.0 - _1959) / _1968);
        }
        else
        {
            float frontier_phi_52_49_ladder;
            if (_1968 < 0.0)
            {
                frontier_phi_52_49_ladder = abs((_1959 + 1.0) / _1968);
            }
            else
            {
                frontier_phi_52_49_ladder = 5000.0;
            }
            _2718 = frontier_phi_52_49_ladder;
        }
        float _2720 = isnan(_2391) ? _2075 : (isnan(_2075) ? _2391 : min(_2075, _2391));
        float _2721 = isnan(_2718) ? _2720 : (isnan(_2720) ? _2718 : min(_2720, _2718));
        float _2725 = (_2721 * _1962) + _1951;
        float _2726 = (_2721 * _1965) + _1955;
        float _2727 = (_2721 * _1968) + _1959;
        float _2728 = _2721 * 9.9999997473787516355514526367188e-05;
        float _2729 = (-1.0) - _2728;
        float _2731 = _2728 + 1.0;
        float frontier_phi_27_52_ladder;
        float frontier_phi_27_52_ladder_1;
        float frontier_phi_27_52_ladder_2;
        if ((_2727 > _2731) || ((_2727 < _2729) || ((_2726 > _2731) || ((_2726 < _2729) || ((_2725 < _2729) || (_2725 > _2731))))))
        {
            frontier_phi_27_52_ladder = 0.0;
            frontier_phi_27_52_ladder_1 = 0.0;
            frontier_phi_27_52_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2845 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2727, cbModelParam._m0[17u].z, fma(_2726, cbModelParam._m0[17u].y, _2725 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2727, cbModelParam._m0[18u].z, fma(_2726, cbModelParam._m0[18u].y, _2725 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2727, cbModelParam._m0[19u].z, fma(_2726, cbModelParam._m0[19u].y, _2725 * cbModelParam._m0[19u].x))), _1896);
            frontier_phi_27_52_ladder = _2845.z * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_1 = _2845.y * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_2 = _2845.x * cbModelParam._m0[1u].z;
        }
        _1987 = frontier_phi_27_52_ladder_2;
        _1989 = frontier_phi_27_52_ladder_1;
        _1991 = frontier_phi_27_52_ladder;
    }
    else
    {
        vec4 _1971 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_967, _968, _969), _1896);
        _1987 = _1971.x * cbModelParam._m0[1u].z;
        _1989 = _1971.y * cbModelParam._m0[1u].z;
        _1991 = _1971.z * cbModelParam._m0[1u].z;
    }
    float _2003 = ((((1.0 - _988) * ((_975 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_988 * _975)) * _959;
    float _2004 = _2003 * ((cbModelParam._m0[1u].w * (_1987 - _1887)) + _1887);
    float _2005 = _2003 * ((cbModelParam._m0[1u].w * (_1989 - _1889)) + _1889);
    float _2006 = _2003 * ((cbModelParam._m0[1u].w * (_1991 - _1891)) + _1891);
    float _2009 = fma(_2006, cbSceneParam._m0[89u].z, fma(_2005, cbSceneParam._m0[89u].y, _2004 * cbSceneParam._m0[89u].x));
    float _2012 = fma(_2006, cbSceneParam._m0[90u].z, fma(_2005, cbSceneParam._m0[90u].y, _2004 * cbSceneParam._m0[90u].x));
    float _2015 = fma(_2006, cbSceneParam._m0[91u].z, fma(_2005, cbSceneParam._m0[91u].y, _2004 * cbSceneParam._m0[91u].x));
    float _2049 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2053 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2057 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2061 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2062 = _2049 / _2061;
    float _2063 = _2053 / _2061;
    float _2064 = _2057 / _2061;
    float _2211;
    float _2212;
    float _2213;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2091 = ((uint(_2064 > cbSceneParam._m0[59u].y) + uint(_2064 > cbSceneParam._m0[59u].x)) + uint(_2064 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2092 = _2091 + 43u;
        uint _2100 = _2091 + 44u;
        uint _2108 = _2091 + 45u;
        uint _2116 = _2091 + 46u;
        float _2127 = fma(_2061, cbSceneParam._m0[_2092].w, fma(_2057, cbSceneParam._m0[_2092].z, fma(_2053, cbSceneParam._m0[_2092].y, _2049 * cbSceneParam._m0[_2092].x)));
        float _2131 = fma(_2061, cbSceneParam._m0[_2100].w, fma(_2057, cbSceneParam._m0[_2100].z, fma(_2053, cbSceneParam._m0[_2100].y, _2049 * cbSceneParam._m0[_2100].x)));
        float _2139 = fma(_2061, cbSceneParam._m0[_2116].w, fma(_2057, cbSceneParam._m0[_2116].z, fma(_2053, cbSceneParam._m0[_2116].y, _2049 * cbSceneParam._m0[_2116].x)));
        float _2144 = cbSceneParam._m0[33u].z * _2139;
        float _2146 = cbSceneParam._m0[33u].w * _2139;
        float _2149 = fma(_2061, cbSceneParam._m0[_2108].w, fma(_2057, cbSceneParam._m0[_2108].z, fma(_2053, cbSceneParam._m0[_2108].y, _2049 * cbSceneParam._m0[_2108].x))) / _2139;
        float _2197 = (cbSceneParam._m0[33u].x - sqrt(((_2063 * _2063) + (_2062 * _2062)) + (_2064 * _2064))) * cbSceneParam._m0[33u].y;
        float _4590 = isnan(0.0) ? _2197 : (isnan(_2197) ? 0.0 : max(_2197, 0.0));
        float _2204 = (isnan(1.0) ? _4590 : (isnan(_4590) ? 1.0 : min(_4590, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2144 + _2127) / _2139, (_2146 + _2131) / _2139), _2149), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2146 + _2127) / _2139, (_2131 - _2144) / _2139), _2149), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2127 - _2144) / _2139, (_2131 - _2146) / _2139), _2149), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2127 - _2146) / _2139, (_2144 + _2131) / _2139), _2149), 0.0)).x), vec4(0.25)));
        _2211 = 1.0 - (_2204 * cbSceneParam._m0[34u].x);
        _2212 = 1.0 - (_2204 * cbSceneParam._m0[34u].y);
        _2213 = 1.0 - (_2204 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2211 = 1.0;
        _2212 = 1.0;
        _2213 = 1.0;
    }
    float _2277;
    float _2279;
    float _2281;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2265 = fma(_2061, cbSceneParam._m0[63u].w, fma(_2057, cbSceneParam._m0[63u].z, fma(_2053, cbSceneParam._m0[63u].y, _2049 * cbSceneParam._m0[63u].x)));
        float _2266 = fma(_2061, cbSceneParam._m0[60u].w, fma(_2057, cbSceneParam._m0[60u].z, fma(_2053, cbSceneParam._m0[60u].y, _2049 * cbSceneParam._m0[60u].x))) / _2265;
        float _2267 = fma(_2061, cbSceneParam._m0[61u].w, fma(_2057, cbSceneParam._m0[61u].z, fma(_2053, cbSceneParam._m0[61u].y, _2049 * cbSceneParam._m0[61u].x))) / _2265;
        float frontier_phi_39_38_ladder;
        float frontier_phi_39_38_ladder_1;
        float frontier_phi_39_38_ladder_2;
        if ((((_2266 >= cbSceneParam._m0[64u].x) && (_2267 >= cbSceneParam._m0[64u].y)) && (_2266 <= cbSceneParam._m0[64u].z)) && (_2267 <= cbSceneParam._m0[64u].w))
        {
            float _2404 = fma(_2061, cbSceneParam._m0[62u].w, fma(_2057, cbSceneParam._m0[62u].z, fma(_2053, cbSceneParam._m0[62u].y, _2049 * cbSceneParam._m0[62u].x))) / _2265;
            float _2408 = isnan(cbSceneParam._m0[41u].w) ? _2404 : (isnan(_2404) ? cbSceneParam._m0[41u].w : max(_2404, cbSceneParam._m0[41u].w));
            float _2451 = (cbSceneParam._m0[33u].x - sqrt(((_2063 * _2063) + (_2062 * _2062)) + (_2064 * _2064))) * cbSceneParam._m0[33u].y;
            float _4606 = isnan(0.0) ? _2451 : (isnan(_2451) ? 0.0 : max(_2451, 0.0));
            float _2458 = (isnan(1.0) ? _4606 : (isnan(_4606) ? 1.0 : min(_4606, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2266, cbSceneParam._m0[33u].w + _2267), _2408), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2266, _2267 - cbSceneParam._m0[33u].z), _2408), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2266 - cbSceneParam._m0[33u].z, _2267 - cbSceneParam._m0[33u].w), _2408), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2266 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2267), _2408), 0.0)).x), vec4(0.25)));
            float _2462 = 1.0 - (_2458 * cbSceneParam._m0[34u].x);
            float _2463 = 1.0 - (_2458 * cbSceneParam._m0[34u].y);
            float _2464 = 1.0 - (_2458 * cbSceneParam._m0[34u].z);
            frontier_phi_39_38_ladder = isnan(_2463) ? _2212 : (isnan(_2212) ? _2463 : min(_2212, _2463));
            frontier_phi_39_38_ladder_1 = isnan(_2462) ? _2211 : (isnan(_2211) ? _2462 : min(_2211, _2462));
            frontier_phi_39_38_ladder_2 = isnan(_2464) ? _2213 : (isnan(_2213) ? _2464 : min(_2213, _2464));
        }
        else
        {
            frontier_phi_39_38_ladder = _2212;
            frontier_phi_39_38_ladder_1 = _2211;
            frontier_phi_39_38_ladder_2 = _2213;
        }
        _2277 = frontier_phi_39_38_ladder_1;
        _2279 = frontier_phi_39_38_ladder;
        _2281 = frontier_phi_39_38_ladder_2;
    }
    else
    {
        _2277 = _2211;
        _2279 = _2212;
        _2281 = _2213;
    }
    uvec4 _2285 = floatBitsToUint(cbInstanceData._m0[_737]);
    uint _2287 = _2285.x * 14u;
    uint _2288 = _2287 + 13u;
    float _2295 = _959 + (-1.0);
    float _2300 = (cbLight._m0[_2288].x * _2295) + 1.0;
    float _2301 = (cbLight._m0[_2288].y * _2295) + 1.0;
    float _2302 = (cbLight._m0[_2288].z * _2295) + 1.0;
    float _2303 = (cbLight._m0[_2288].w * _2295) + 1.0;
    uint _2304 = _2287 + 5u;
    float _2310 = isnan(1.0) ? _2301 : (isnan(_2301) ? 1.0 : min(_2301, 1.0));
    uint _2314 = _2287 + 4u;
    float _2323 = isnan(1.0) ? _2300 : (isnan(_2300) ? 1.0 : min(_2300, 1.0));
    uint _2327 = _2287 | 1u;
    float _2338 = dot(vec3(cbLight._m0[_2287].xyz), vec3(_802, _803, _804));
    float _2341 = dot(vec3(cbLight._m0[_2327].xyz), vec3(_802, _803, _804));
    float _4642 = isnan(0.0) ? _2338 : (isnan(_2338) ? 0.0 : max(_2338, 0.0));
    float _4653 = isnan(0.0) ? _2341 : (isnan(_2341) ? 0.0 : max(_2341, 0.0));
    float _2346 = (isnan(1.0) ? _4642 : (isnan(_4642) ? 1.0 : min(_4642, 1.0))) * 0.3183098733425140380859375;
    float _2348 = (isnan(1.0) ? _4653 : (isnan(_4653) ? 1.0 : min(_4653, 1.0))) * 0.3183098733425140380859375;
    float _2355 = ((cbLight._m0[_2304].x * _2310) * _2348) + (((cbLight._m0[_2314].x * _2277) * _2323) * _2346);
    float _2356 = ((_2310 * cbLight._m0[_2304].y) * _2348) + (((cbLight._m0[_2314].y * _2279) * _2323) * _2346);
    float _2357 = ((_2310 * cbLight._m0[_2304].z) * _2348) + (((cbLight._m0[_2314].z * _2281) * _2323) * _2346);
    uvec4 _2361 = floatBitsToUint(cbLight._m0[_2287 + 12u]);
    bool _2363 = _2361.x == 0u;
    float _2465;
    float _2467;
    float _2469;
    if (_2363)
    {
        _2465 = _2355;
        _2467 = _2356;
        _2469 = _2357;
    }
    else
    {
        uint _2473 = _2287 + 6u;
        float _2489 = (dot(vec3(cbLight._m0[_2287 + 2u].xyz), vec3(_802, _803, _804)) * 0.5) + 0.5;
        float _2490 = _2489 * _2489;
        float _4664 = isnan(0.0) ? _2490 : (isnan(_2490) ? 0.0 : max(_2490, 0.0));
        float _2491 = isnan(1.0) ? _4664 : (isnan(_4664) ? 1.0 : min(_4664, 1.0));
        float _2492 = isnan(1.0) ? _2302 : (isnan(_2302) ? 1.0 : min(_2302, 1.0));
        _2465 = (((cbLight._m0[_2473].x * 0.3183098733425140380859375) * _2491) * _2492) + _2355;
        _2467 = (((cbLight._m0[_2473].y * 0.3183098733425140380859375) * _2491) * _2492) + _2356;
        _2469 = (((cbLight._m0[_2473].z * 0.3183098733425140380859375) * _2491) * _2492) + _2357;
    }
    bool _2472 = _2361.y == 0u;
    float _2527;
    float _2529;
    float _2531;
    if (_2472)
    {
        _2527 = _2465;
        _2529 = _2467;
        _2531 = _2469;
    }
    else
    {
        uint _2689 = _2287 + 7u;
        float _2705 = (dot(vec3(cbLight._m0[_2287 + 3u].xyz), vec3(_802, _803, _804)) * 0.5) + 0.5;
        float _2706 = _2705 * _2705;
        float _4680 = isnan(0.0) ? _2706 : (isnan(_2706) ? 0.0 : max(_2706, 0.0));
        float _2707 = isnan(1.0) ? _4680 : (isnan(_4680) ? 1.0 : min(_4680, 1.0));
        float _2708 = isnan(1.0) ? _2303 : (isnan(_2303) ? 1.0 : min(_2303, 1.0));
        _2527 = (((cbLight._m0[_2689].x * 0.3183098733425140380859375) * _2707) * _2708) + _2465;
        _2529 = (((cbLight._m0[_2689].y * 0.3183098733425140380859375) * _2707) * _2708) + _2467;
        _2531 = (((cbLight._m0[_2689].z * 0.3183098733425140380859375) * _2707) * _2708) + _2469;
    }
    uint _2534 = _2287 + 8u;
    float _2547 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2287].w)) * _805) * 0.949999988079071044921875);
    float _2548 = _2547 * _2547;
    float _2549 = cbLight._m0[_2287].x + _877;
    float _2550 = cbLight._m0[_2287].y + _878;
    float _2551 = cbLight._m0[_2287].z + _879;
    float _2555 = inversesqrt(dot(vec3(_2549, _2550, _2551), vec3(_2549, _2550, _2551)));
    float _2556 = _2555 * _2549;
    float _2557 = _2555 * _2550;
    float _2558 = _2555 * _2551;
    float _2559 = dot(vec3(_802, _803, _804), vec3(cbLight._m0[_2287].xyz));
    float _4696 = isnan(0.0) ? _2559 : (isnan(_2559) ? 0.0 : max(_2559, 0.0));
    float _2562 = isnan(1.0) ? _4696 : (isnan(_4696) ? 1.0 : min(_4696, 1.0));
    float _4707 = isnan(0.0) ? _960 : (isnan(_960) ? 0.0 : max(_960, 0.0));
    float _2563 = isnan(1.0) ? _4707 : (isnan(_4707) ? 1.0 : min(_4707, 1.0));
    float _2564 = dot(vec3(_802, _803, _804), vec3(_2556, _2557, _2558));
    float _4718 = isnan(0.0) ? _2564 : (isnan(_2564) ? 0.0 : max(_2564, 0.0));
    float _2567 = isnan(1.0) ? _4718 : (isnan(_4718) ? 1.0 : min(_4718, 1.0));
    float _2568 = dot(vec3(cbLight._m0[_2287].xyz), vec3(_2556, _2557, _2558));
    float _4729 = isnan(0.0) ? _2568 : (isnan(_2568) ? 0.0 : max(_2568, 0.0));
    float _2572 = _2548 * _2548;
    float _2576 = ((_2567 * _2567) * (_2572 + (-1.0))) + 1.0;
    float _2587 = (exp2(log2(1.0 - (isnan(1.0) ? _4729 : (isnan(_4729) ? 1.0 : min(_4729, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2588 = 1.0 - _2548;
    float _2599 = (0.5 / (((_2563 * ((_2562 * _2588) + _2548)) + 9.9999999392252902907785028219223e-09) + (((_2563 * _2588) + _2548) * _2562))) * _2562;
    float _4740 = isnan(0.0) ? _2599 : (isnan(_2599) ? 0.0 : max(_2599, 0.0));
    float _2601 = (isnan(1.0) ? _4740 : (isnan(_4740) ? 1.0 : min(_4740, 1.0))) * (_2572 / ((_2576 * _2576) * 3.141590118408203125));
    uint _2615 = _2287 + 9u;
    float _2626 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2327].w)) * _805) * 0.949999988079071044921875);
    float _2627 = _2626 * _2626;
    float _2628 = cbLight._m0[_2327].x + _877;
    float _2629 = cbLight._m0[_2327].y + _878;
    float _2630 = cbLight._m0[_2327].z + _879;
    float _2634 = inversesqrt(dot(vec3(_2628, _2629, _2630), vec3(_2628, _2629, _2630)));
    float _2635 = _2634 * _2628;
    float _2636 = _2634 * _2629;
    float _2637 = _2634 * _2630;
    float _2638 = dot(vec3(_802, _803, _804), vec3(cbLight._m0[_2327].xyz));
    float _4751 = isnan(0.0) ? _2638 : (isnan(_2638) ? 0.0 : max(_2638, 0.0));
    float _2641 = isnan(1.0) ? _4751 : (isnan(_4751) ? 1.0 : min(_4751, 1.0));
    float _2642 = dot(vec3(_802, _803, _804), vec3(_2635, _2636, _2637));
    float _4762 = isnan(0.0) ? _2642 : (isnan(_2642) ? 0.0 : max(_2642, 0.0));
    float _2645 = isnan(1.0) ? _4762 : (isnan(_4762) ? 1.0 : min(_4762, 1.0));
    float _2646 = dot(vec3(cbLight._m0[_2327].xyz), vec3(_2635, _2636, _2637));
    float _4773 = isnan(0.0) ? _2646 : (isnan(_2646) ? 0.0 : max(_2646, 0.0));
    float _2650 = _2627 * _2627;
    float _2654 = ((_2645 * _2645) * (_2650 + (-1.0))) + 1.0;
    float _2663 = (exp2(log2(1.0 - (isnan(1.0) ? _4773 : (isnan(_4773) ? 1.0 : min(_4773, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2664 = 1.0 - _2627;
    float _2674 = (0.5 / (((_2563 * ((_2641 * _2664) + _2627)) + 9.9999999392252902907785028219223e-09) + (((_2563 * _2664) + _2627) * _2641))) * _2641;
    float _4784 = isnan(0.0) ? _2674 : (isnan(_2674) ? 0.0 : max(_2674, 0.0));
    float _2676 = (isnan(1.0) ? _4784 : (isnan(_4784) ? 1.0 : min(_4784, 1.0))) * (_2650 / ((_2654 * _2654) * 3.141590118408203125));
    float _2686 = (((_2663 * cbLight._m0[_2615].x) * _2676) * _2310) + ((((cbLight._m0[_2534].x * _2277) * _2587) * _2601) * _2323);
    float _2687 = (((_2663 * cbLight._m0[_2615].y) * _2676) * _2310) + ((((cbLight._m0[_2534].y * _2279) * _2587) * _2601) * _2323);
    float _2688 = (((_2663 * cbLight._m0[_2615].z) * _2676) * _2310) + ((((cbLight._m0[_2534].z * _2281) * _2587) * _2601) * _2323);
    float _2744;
    float _2746;
    float _2748;
    if (_2363)
    {
        _2744 = _2686;
        _2746 = _2687;
        _2748 = _2688;
    }
    else
    {
        uint _2750 = _2287 + 2u;
        uint _2754 = _2287 + 10u;
        float _2768 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2750].w)) * _805) * 0.949999988079071044921875);
        float _2769 = _2768 * _2768;
        float _2770 = cbLight._m0[_2750].x + _877;
        float _2771 = cbLight._m0[_2750].y + _878;
        float _2772 = cbLight._m0[_2750].z + _879;
        float _2776 = inversesqrt(dot(vec3(_2770, _2771, _2772), vec3(_2770, _2771, _2772)));
        float _2777 = _2776 * _2770;
        float _2778 = _2776 * _2771;
        float _2779 = _2776 * _2772;
        float _2780 = dot(vec3(_802, _803, _804), vec3(cbLight._m0[_2750].xyz));
        float _4795 = isnan(0.0) ? _2780 : (isnan(_2780) ? 0.0 : max(_2780, 0.0));
        float _2783 = isnan(1.0) ? _4795 : (isnan(_4795) ? 1.0 : min(_4795, 1.0));
        float _2784 = dot(vec3(_802, _803, _804), vec3(_2777, _2778, _2779));
        float _4806 = isnan(0.0) ? _2784 : (isnan(_2784) ? 0.0 : max(_2784, 0.0));
        float _2787 = isnan(1.0) ? _4806 : (isnan(_4806) ? 1.0 : min(_4806, 1.0));
        float _2788 = dot(vec3(cbLight._m0[_2750].xyz), vec3(_2777, _2778, _2779));
        float _4817 = isnan(0.0) ? _2788 : (isnan(_2788) ? 0.0 : max(_2788, 0.0));
        float _2792 = _2769 * _2769;
        float _2796 = ((_2787 * _2787) * (_2792 + (-1.0))) + 1.0;
        float _2805 = (exp2(log2(1.0 - (isnan(1.0) ? _4817 : (isnan(_4817) ? 1.0 : min(_4817, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2806 = 1.0 - _2769;
        float _2816 = (0.5 / (((_2563 * ((_2783 * _2806) + _2769)) + 9.9999999392252902907785028219223e-09) + (((_2563 * _2806) + _2769) * _2783))) * _2783;
        float _4828 = isnan(0.0) ? _2816 : (isnan(_2816) ? 0.0 : max(_2816, 0.0));
        float _2818 = (isnan(1.0) ? _4828 : (isnan(_4828) ? 1.0 : min(_4828, 1.0))) * (_2792 / ((_2796 * _2796) * 3.141590118408203125));
        float _2819 = isnan(1.0) ? _2302 : (isnan(_2302) ? 1.0 : min(_2302, 1.0));
        _2744 = (((_2805 * cbLight._m0[_2754].x) * _2818) * _2819) + _2686;
        _2746 = (((_2805 * cbLight._m0[_2754].y) * _2818) * _2819) + _2687;
        _2748 = (((_2805 * cbLight._m0[_2754].z) * _2818) * _2819) + _2688;
    }
    float _2850;
    float _2852;
    float _2854;
    if (_2472)
    {
        _2850 = _2744;
        _2852 = _2746;
        _2854 = _2748;
    }
    else
    {
        uint _2861 = _2287 + 3u;
        uint _2865 = _2287 + 11u;
        float _2879 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2861].w)) * _805) * 0.949999988079071044921875);
        float _2880 = _2879 * _2879;
        float _2881 = cbLight._m0[_2861].x + _877;
        float _2882 = cbLight._m0[_2861].y + _878;
        float _2883 = cbLight._m0[_2861].z + _879;
        float _2887 = inversesqrt(dot(vec3(_2881, _2882, _2883), vec3(_2881, _2882, _2883)));
        float _2888 = _2887 * _2881;
        float _2889 = _2887 * _2882;
        float _2890 = _2887 * _2883;
        float _2891 = dot(vec3(_802, _803, _804), vec3(cbLight._m0[_2861].xyz));
        float _4844 = isnan(0.0) ? _2891 : (isnan(_2891) ? 0.0 : max(_2891, 0.0));
        float _2894 = isnan(1.0) ? _4844 : (isnan(_4844) ? 1.0 : min(_4844, 1.0));
        float _2895 = dot(vec3(_802, _803, _804), vec3(_2888, _2889, _2890));
        float _4855 = isnan(0.0) ? _2895 : (isnan(_2895) ? 0.0 : max(_2895, 0.0));
        float _2898 = isnan(1.0) ? _4855 : (isnan(_4855) ? 1.0 : min(_4855, 1.0));
        float _2899 = dot(vec3(cbLight._m0[_2861].xyz), vec3(_2888, _2889, _2890));
        float _4866 = isnan(0.0) ? _2899 : (isnan(_2899) ? 0.0 : max(_2899, 0.0));
        float _2903 = _2880 * _2880;
        float _2907 = ((_2898 * _2898) * (_2903 + (-1.0))) + 1.0;
        float _2916 = (exp2(log2(1.0 - (isnan(1.0) ? _4866 : (isnan(_4866) ? 1.0 : min(_4866, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2917 = 1.0 - _2880;
        float _2927 = (0.5 / (((_2563 * ((_2894 * _2917) + _2880)) + 9.9999999392252902907785028219223e-09) + (((_2563 * _2917) + _2880) * _2894))) * _2894;
        float _4877 = isnan(0.0) ? _2927 : (isnan(_2927) ? 0.0 : max(_2927, 0.0));
        float _2929 = (isnan(1.0) ? _4877 : (isnan(_4877) ? 1.0 : min(_4877, 1.0))) * (_2903 / ((_2907 * _2907) * 3.141590118408203125));
        float _2930 = isnan(1.0) ? _2303 : (isnan(_2303) ? 1.0 : min(_2303, 1.0));
        _2850 = (((_2916 * cbLight._m0[_2865].x) * _2929) * _2930) + _2744;
        _2852 = (((_2916 * cbLight._m0[_2865].y) * _2929) * _2930) + _2746;
        _2854 = (((_2916 * cbLight._m0[_2865].z) * _2929) * _2930) + _2748;
    }
    float _2995;
    float _2997;
    float _2999;
    float _3001;
    float _3003;
    float _3005;
    if (_2285.y == 0u)
    {
        uvec4 _2951 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2952 = _2951.x;
        uint _2963 = uint((float(_2951.y) * floor(float(uint(cbSceneParam._m0[85u].y * _898) / _2952))) + floor(float(uint(cbSceneParam._m0[85u].x * _897) / _2952)));
        float _2973 = (log2(_2064 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2974 = isnan(0.0) ? _2973 : (isnan(_2973) ? 0.0 : max(_2973, 0.0));
        uint _2977 = uint(isnan(14.0) ? _2974 : (isnan(_2974) ? 14.0 : min(_2974, 14.0)));
        uvec4 _2982 = texelFetch(g_lightClusterGridBuffer, int(((_2977 << 2u) + (_2963 << 6u)) >> 2u));
        uint _2983 = _2982.x;
        uint _2984 = _2951.z;
        float _3087;
        float _3089;
        float _3091;
        float _3093;
        float _3095;
        float _3097;
        if (((((1u << ((_2984 >> 4u) & 15u)) + 4294967295u) & _2983) == 0u) || ((_2984 & 240u) == 0u))
        {
            _3087 = 0.0;
            _3089 = 0.0;
            _3091 = 0.0;
            _3093 = 0.0;
            _3095 = 0.0;
            _3097 = 0.0;
        }
        else
        {
            float _3088;
            float _3090;
            float _3092;
            float _3094;
            float _3096;
            float _3098;
            float _3239 = 0.0;
            float _3240 = 0.0;
            float _3241 = 0.0;
            float _3242 = 0.0;
            float _3243 = 0.0;
            float _3244 = 0.0;
            uint _3245 = 0u;
            uint _3254;
            bool _3255;
            for (;;)
            {
                _3254 = texelFetch(g_lightClassification, int((((_2977 << 5u) + (_2963 << 9u)) + (_3245 << 2u)) >> 2u)).x;
                _3255 = _3254 == 0u;
                float frontier_phi_73_pred;
                float frontier_phi_73_pred_1;
                float frontier_phi_73_pred_2;
                float frontier_phi_73_pred_3;
                float frontier_phi_73_pred_4;
                float frontier_phi_73_pred_5;
                if (_3255)
                {
                    frontier_phi_73_pred = _3244;
                    frontier_phi_73_pred_1 = _3243;
                    frontier_phi_73_pred_2 = _3242;
                    frontier_phi_73_pred_3 = _3241;
                    frontier_phi_73_pred_4 = _3240;
                    frontier_phi_73_pred_5 = _3239;
                }
                else
                {
                    float _3384;
                    float _3385;
                    float _3386;
                    float _3387;
                    float _3388;
                    float _3389;
                    uint _3390;
                    _3384 = _3239;
                    _3385 = _3240;
                    _3386 = _3241;
                    _3387 = _3242;
                    _3388 = _3243;
                    _3389 = _3244;
                    _3390 = _3254;
                    float _3311;
                    float _3312;
                    float _3313;
                    float _3314;
                    float _3315;
                    float _3316;
                    for (;;)
                    {
                        uint _3394 = uint(findLSB(_3390)) + (_3245 << 5u);
                        uint _3391 = (_3390 + 4294967295u) & _3390;
                        uint _3396 = _3394 * 48u;
                        vec4 _3410 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3396)).x, texelFetch(g_PointLightRenderingBuffer, int(_3396 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3396 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3396 + 3u)).x));
                        uint _3416 = (_3394 * 48u) + 4u;
                        vec4 _3429 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3416)).x, texelFetch(g_PointLightRenderingBuffer, int(_3416 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3416 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3416 + 3u)).x));
                        uint _3435 = (_3394 * 48u) + 8u;
                        vec3 _3446 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3435)).x, texelFetch(g_PointLightRenderingBuffer, int(_3435 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3435 + 2u)).x));
                        float _3450 = _3410.x - _2062;
                        float _3451 = _3410.y - _2063;
                        float _3452 = _3410.z - _2064;
                        float _3453 = dot(vec3(_3450, _3451, _3452), vec3(_3450, _3451, _3452));
                        float _3456 = inversesqrt(_3453);
                        float _3457 = _3456 * _3450;
                        float _3458 = _3456 * _3451;
                        float _3459 = _3456 * _3452;
                        float _3460 = dot(vec3(_916, _919, _922), vec3(_3457, _3458, _3459));
                        float _3465 = 1.0 - (_3453 * _3410.w);
                        float _4903 = isnan(0.0) ? _3465 : (isnan(_3465) ? 0.0 : max(_3465, 0.0));
                        float _3466 = isnan(1.0) ? _4903 : (isnan(_4903) ? 1.0 : min(_4903, 1.0));
                        float _3467 = sqrt(_3453) * _3429.w;
                        float _3470 = 1.39999997615814208984375 / (_3467 + 1.39999997615814208984375);
                        float _3471 = _3470 * _3470;
                        float _3474 = ((1.0 - _3471) * _3460) + _3471;
                        float _3477 = _3467 * _3467;
                        float _3481 = ((isnan(0.0) ? _3474 : (isnan(_3474) ? 0.0 : max(_3474, 0.0))) * _3466) / ((_3477 * 0.699999988079071044921875) + 1.0);
                        float _3485 = (-0.0) - _2062;
                        float _3486 = (-0.0) - _2063;
                        float _3487 = (-0.0) - _2064;
                        float _3491 = inversesqrt(dot(vec3(_3485, _3486, _3487), vec3(_3485, _3486, _3487)));
                        float _3492 = _3491 * _3485;
                        float _3493 = _3491 * _3486;
                        float _3494 = _3491 * _3487;
                        float _3501 = exp2(log2(1.0 / ((_3477 * 3.5) + 5.0)) * 0.25);
                        float _3502 = 1.0 - _975;
                        float _3509 = sqrt(1.0 - ((1.0 - (_3502 * _3502)) * (1.0 - (_3501 * _3501))));
                        float _3510 = _3509 * _3509;
                        float _3511 = _3510 * _3510;
                        float _3512 = _3492 + _3457;
                        float _3513 = _3493 + _3458;
                        float _3514 = _3494 + _3459;
                        float _3518 = inversesqrt(dot(vec3(_3512, _3513, _3514), vec3(_3512, _3513, _3514)));
                        float _3522 = dot(vec3(_916, _919, _922), vec3(_3492, _3493, _3494));
                        float _4919 = isnan(0.0) ? _3522 : (isnan(_3522) ? 0.0 : max(_3522, 0.0));
                        float _3525 = isnan(1.0) ? _4919 : (isnan(_4919) ? 1.0 : min(_4919, 1.0));
                        float _3526 = dot(vec3(_916, _919, _922), vec3(_3518 * _3512, _3518 * _3513, _3518 * _3514));
                        float _4930 = isnan(0.0) ? _3526 : (isnan(_3526) ? 0.0 : max(_3526, 0.0));
                        float _3529 = isnan(1.0) ? _4930 : (isnan(_4930) ? 1.0 : min(_4930, 1.0));
                        float _3533 = ((_3529 * _3529) * (_3511 + (-1.0))) + 1.0;
                        float _3534 = _3470 * _3510;
                        float _3535 = _3534 * _3534;
                        float _3538 = ((1.0 - _3535) * _3460) + _3535;
                        float _4941 = isnan(0.0) ? _3538 : (isnan(_3538) ? 0.0 : max(_3538, 0.0));
                        float _3539 = isnan(1.0) ? _4941 : (isnan(_4941) ? 1.0 : min(_4941, 1.0));
                        float _3540 = 1.0 - _3510;
                        float _3550 = (0.5 / (((_3539 * ((_3525 * _3540) + _3510)) + 9.9999999392252902907785028219223e-09) + (((_3539 * _3540) + _3510) * _3525))) * _3539;
                        float _4952 = isnan(0.0) ? _3550 : (isnan(_3550) ? 0.0 : max(_3550, 0.0));
                        float _3561 = (((_3511 * 3.1415927410125732421875) * (isnan(1.0) ? _4952 : (isnan(_4952) ? 1.0 : min(_4952, 1.0)))) / ((_3533 * _3533) * ((_3477 * 2.1991131305694580078125) + 3.141590118408203125))) * _3466;
                        _3314 = (_3481 * _3429.x) + _3387;
                        _3315 = (_3481 * _3429.y) + _3388;
                        _3316 = (_3481 * _3429.z) + _3389;
                        _3311 = (_3561 * _3446.x) + _3384;
                        _3312 = (_3561 * _3446.y) + _3385;
                        _3313 = (_3561 * _3446.z) + _3386;
                        if (_3391 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3384 = _3311;
                            _3385 = _3312;
                            _3386 = _3313;
                            _3387 = _3314;
                            _3388 = _3315;
                            _3389 = _3316;
                            _3390 = _3391;
                        }
                    }
                    frontier_phi_73_pred = _3316;
                    frontier_phi_73_pred_1 = _3315;
                    frontier_phi_73_pred_2 = _3314;
                    frontier_phi_73_pred_3 = _3313;
                    frontier_phi_73_pred_4 = _3312;
                    frontier_phi_73_pred_5 = _3311;
                }
                _3098 = frontier_phi_73_pred;
                _3096 = frontier_phi_73_pred_1;
                _3094 = frontier_phi_73_pred_2;
                _3092 = frontier_phi_73_pred_3;
                _3090 = frontier_phi_73_pred_4;
                _3088 = frontier_phi_73_pred_5;
                uint _3246 = _3245 + 1u;
                if (_3246 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3239 = _3088;
                    _3240 = _3090;
                    _3241 = _3092;
                    _3242 = _3094;
                    _3243 = _3096;
                    _3244 = _3098;
                    _3245 = _3246;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3087 = _3088;
            _3089 = _3090;
            _3091 = _3092;
            _3093 = _3094;
            _3095 = _3096;
            _3097 = _3098;
        }
        uvec4 _3101 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3102 = _3101.z;
        uint _3104 = (_3102 >> 8u) & 15u;
        float _3207;
        float _3209;
        float _3211;
        float _3213;
        float _3215;
        float _3217;
        if (((4294967295u << _3104) & _2983) == 0u)
        {
            _3207 = _3087;
            _3209 = _3089;
            _3211 = _3091;
            _3213 = _3093;
            _3215 = _3095;
            _3217 = _3097;
        }
        else
        {
            float _3232 = inversesqrt(dot(vec3(_2062, _2063, _2064), vec3(_2062, _2063, _2064)));
            float _3233 = _3232 * _2062;
            float _3234 = _3232 * _2063;
            float _3235 = _3232 * _2064;
            float frontier_phi_65_66_ladder;
            float frontier_phi_65_66_ladder_1;
            float frontier_phi_65_66_ladder_2;
            float frontier_phi_65_66_ladder_3;
            float frontier_phi_65_66_ladder_4;
            float frontier_phi_65_66_ladder_5;
            if (_3104 < ((_3102 >> 12u) & 15u))
            {
                float _3208;
                float _3210;
                float _3212;
                float _3214;
                float _3216;
                float _3218;
                float _3367 = _3087;
                float _3368 = _3089;
                float _3369 = _3091;
                float _3370 = _3093;
                float _3371 = _3095;
                float _3372 = _3097;
                uint _3373 = _3104;
                uint _3382;
                bool _3383;
                for (;;)
                {
                    _3382 = texelFetch(g_lightClassification, int((((_2977 << 5u) + (_2963 << 9u)) + (_3373 << 2u)) >> 2u)).x;
                    _3383 = _3382 == 0u;
                    float frontier_phi_84_pred;
                    float frontier_phi_84_pred_1;
                    float frontier_phi_84_pred_2;
                    float frontier_phi_84_pred_3;
                    float frontier_phi_84_pred_4;
                    float frontier_phi_84_pred_5;
                    if (_3383)
                    {
                        frontier_phi_84_pred = _3371;
                        frontier_phi_84_pred_1 = _3370;
                        frontier_phi_84_pred_2 = _3369;
                        frontier_phi_84_pred_3 = _3368;
                        frontier_phi_84_pred_4 = _3367;
                        frontier_phi_84_pred_5 = _3372;
                    }
                    else
                    {
                        float _3575;
                        float _3576;
                        float _3577;
                        float _3578;
                        float _3579;
                        float _3580;
                        float _3870;
                        float _3871;
                        float _3872;
                        float _3873;
                        float _3874;
                        float _3875;
                        float _3588 = _3367;
                        float _3589 = _3368;
                        float _3590 = _3369;
                        float _3591 = _3370;
                        float _3592 = _3371;
                        float _3593 = _3372;
                        uint _3594 = _3382;
                        uint _3595;
                        vec4 _3620;
                        float _3621;
                        vec4 _3636;
                        vec3 _3648;
                        vec4 _3663;
                        vec4 _3679;
                        float _3726;
                        bool _3727;
                        for (;;)
                        {
                            uint _3605 = ((_3373 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3594));
                            _3595 = (_3594 + 4294967295u) & _3594;
                            uint _3607 = _3605 * 40u;
                            _3620 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3607)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3607 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3607 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3607 + 3u)).x));
                            _3621 = _3620.w;
                            uint _3623 = (_3605 * 40u) + 4u;
                            _3636 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3623)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3623 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3623 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3623 + 3u)).x));
                            uint _3638 = (_3605 * 40u) + 8u;
                            _3648 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3638)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3638 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3638 + 2u)).x));
                            uint _3650 = (_3605 * 40u) + 16u;
                            _3663 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3650)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3650 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3650 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3650 + 3u)).x));
                            uint _3666 = (_3605 * 40u) + 20u;
                            _3679 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3666)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3666 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3666 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3666 + 3u)).x));
                            uint _3682 = (_3605 * 40u) + 24u;
                            vec4 _3695 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3682)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3682 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3682 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3682 + 3u)).x));
                            uint _3701 = (_3605 * 40u) + 28u;
                            vec4 _3714 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3701)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3701 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3701 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3701 + 3u)).x));
                            _3726 = fma(_2064, _3714.z, fma(_2063, _3714.y, _3714.x * _2062)) + _3714.w;
                            _3727 = !((fma(_2064, _3695.z, fma(_2063, _3695.y, _3695.x * _2062)) + _3695.w) <= 0.0);
                            float frontier_phi_90_pred;
                            float frontier_phi_90_pred_1;
                            float frontier_phi_90_pred_2;
                            float frontier_phi_90_pred_3;
                            float frontier_phi_90_pred_4;
                            float frontier_phi_90_pred_5;
                            if (_3727)
                            {
                                float _3754 = _3620.x - _2062;
                                float _3755 = _3620.y - _2063;
                                float _3756 = _3620.z - _2064;
                                float _3757 = dot(vec3(_3754, _3755, _3756), vec3(_3754, _3755, _3756));
                                float _3760 = inversesqrt(_3757);
                                float _3761 = _3760 * _3754;
                                float _3762 = _3760 * _3755;
                                float _3763 = _3760 * _3756;
                                float _3767 = 1.0 - (_3757 / (_3621 * _3621));
                                float _4963 = isnan(0.0) ? _3767 : (isnan(_3767) ? 0.0 : max(_3767, 0.0));
                                float _3768 = isnan(1.0) ? _4963 : (isnan(_4963) ? 1.0 : min(_4963, 1.0));
                                float _3772 = sqrt(_3757) * _3636.w;
                                float _3774 = 1.39999997615814208984375 / (_3772 + 1.39999997615814208984375);
                                float _3775 = _3774 * _3774;
                                float _3778 = ((1.0 - _3775) * dot(vec3(_3761, _3762, _3763), vec3(_916, _919, _922))) + _3775;
                                float _3781 = _3772 * _3772;
                                float _3785 = (fma(_2064, _3663.z, fma(_2063, _3663.y, _3663.x * _2062)) + _3663.w) / _3726;
                                float _3786 = (fma(_2064, _3679.z, fma(_2063, _3679.y, _3679.x * _2062)) + _3679.w) / _3726;
                                float _3790 = 1.0 - dot(vec2(_3785, _3786), vec2(_3785, _3786));
                                float _4979 = isnan(0.0) ? _3790 : (isnan(_3790) ? 0.0 : max(_3790, 0.0));
                                float _3791 = isnan(1.0) ? _4979 : (isnan(_4979) ? 1.0 : min(_4979, 1.0));
                                float _3792 = _3791 * (((isnan(0.0) ? _3778 : (isnan(_3778) ? 0.0 : max(_3778, 0.0))) * _3768) / ((_3781 * 0.699999988079071044921875) + 1.0));
                                float _3804 = exp2(log2(1.0 / ((_3781 * 3.5) + 5.0)) * 0.25);
                                float _3805 = 1.0 - _975;
                                float _3812 = sqrt(1.0 - ((1.0 - (_3805 * _3805)) * (1.0 - (_3804 * _3804))));
                                float _3813 = _3812 * _3812;
                                float _3814 = _3813 * _3813;
                                float _3815 = _3761 - _3233;
                                float _3816 = _3762 - _3234;
                                float _3817 = _3763 - _3235;
                                float _3821 = inversesqrt(dot(vec3(_3815, _3816, _3817), vec3(_3815, _3816, _3817)));
                                float _3825 = dot(vec3(_916, _919, _922), vec3((-0.0) - _3233, (-0.0) - _3234, (-0.0) - _3235));
                                float _4990 = isnan(0.0) ? _3825 : (isnan(_3825) ? 0.0 : max(_3825, 0.0));
                                float _3828 = isnan(1.0) ? _4990 : (isnan(_4990) ? 1.0 : min(_4990, 1.0));
                                float _3829 = dot(vec3(_916, _919, _922), vec3(_3821 * _3815, _3821 * _3816, _3821 * _3817));
                                float _5001 = isnan(0.0) ? _3829 : (isnan(_3829) ? 0.0 : max(_3829, 0.0));
                                float _3832 = isnan(1.0) ? _5001 : (isnan(_5001) ? 1.0 : min(_5001, 1.0));
                                float _3836 = ((_3832 * _3832) * (_3814 + (-1.0))) + 1.0;
                                float _3837 = _3774 * _3813;
                                float _3838 = _3837 * _3837;
                                float _3844 = ((1.0 - _3838) * dot(vec3(_916, _919, _922), vec3(_3761, _3762, _3763))) + _3838;
                                float _5012 = isnan(0.0) ? _3844 : (isnan(_3844) ? 0.0 : max(_3844, 0.0));
                                float _3845 = isnan(1.0) ? _5012 : (isnan(_5012) ? 1.0 : min(_5012, 1.0));
                                float _3846 = 1.0 - _3813;
                                float _3856 = (0.5 / (((_3845 * ((_3828 * _3846) + _3813)) + 9.9999999392252902907785028219223e-09) + (((_3845 * _3846) + _3813) * _3828))) * _3845;
                                float _5023 = isnan(0.0) ? _3856 : (isnan(_3856) ? 0.0 : max(_3856, 0.0));
                                float _3866 = (_3791 * _3768) * (((_3814 * 3.1415927410125732421875) * (isnan(1.0) ? _5023 : (isnan(_5023) ? 1.0 : min(_5023, 1.0)))) / ((_3836 * _3836) * ((_3781 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_90_pred = _3792 * _3636.y;
                                frontier_phi_90_pred_1 = _3792 * _3636.x;
                                frontier_phi_90_pred_2 = _3866 * _3648.z;
                                frontier_phi_90_pred_3 = _3866 * _3648.y;
                                frontier_phi_90_pred_4 = _3866 * _3648.x;
                                frontier_phi_90_pred_5 = _3792 * _3636.z;
                            }
                            else
                            {
                                frontier_phi_90_pred = 0.0;
                                frontier_phi_90_pred_1 = 0.0;
                                frontier_phi_90_pred_2 = 0.0;
                                frontier_phi_90_pred_3 = 0.0;
                                frontier_phi_90_pred_4 = 0.0;
                                frontier_phi_90_pred_5 = 0.0;
                            }
                            _3874 = frontier_phi_90_pred;
                            _3873 = frontier_phi_90_pred_1;
                            _3872 = frontier_phi_90_pred_2;
                            _3871 = frontier_phi_90_pred_3;
                            _3870 = frontier_phi_90_pred_4;
                            _3875 = frontier_phi_90_pred_5;
                            _3578 = _3873 + _3591;
                            _3579 = _3874 + _3592;
                            _3580 = _3875 + _3593;
                            _3575 = _3870 + _3588;
                            _3576 = _3871 + _3589;
                            _3577 = _3872 + _3590;
                            if (_3595 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3588 = _3575;
                                _3589 = _3576;
                                _3590 = _3577;
                                _3591 = _3578;
                                _3592 = _3579;
                                _3593 = _3580;
                                _3594 = _3595;
                                continue;
                            }
                        }
                        frontier_phi_84_pred = _3579;
                        frontier_phi_84_pred_1 = _3578;
                        frontier_phi_84_pred_2 = _3577;
                        frontier_phi_84_pred_3 = _3576;
                        frontier_phi_84_pred_4 = _3575;
                        frontier_phi_84_pred_5 = _3580;
                    }
                    _3216 = frontier_phi_84_pred;
                    _3214 = frontier_phi_84_pred_1;
                    _3212 = frontier_phi_84_pred_2;
                    _3210 = frontier_phi_84_pred_3;
                    _3208 = frontier_phi_84_pred_4;
                    _3218 = frontier_phi_84_pred_5;
                    uint _3374 = _3373 + 1u;
                    if (_3374 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3367 = _3208;
                        _3368 = _3210;
                        _3369 = _3212;
                        _3370 = _3214;
                        _3371 = _3216;
                        _3372 = _3218;
                        _3373 = _3374;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_65_66_ladder = _3218;
                frontier_phi_65_66_ladder_1 = _3214;
                frontier_phi_65_66_ladder_2 = _3216;
                frontier_phi_65_66_ladder_3 = _3210;
                frontier_phi_65_66_ladder_4 = _3208;
                frontier_phi_65_66_ladder_5 = _3212;
            }
            else
            {
                frontier_phi_65_66_ladder = _3097;
                frontier_phi_65_66_ladder_1 = _3093;
                frontier_phi_65_66_ladder_2 = _3095;
                frontier_phi_65_66_ladder_3 = _3089;
                frontier_phi_65_66_ladder_4 = _3087;
                frontier_phi_65_66_ladder_5 = _3091;
            }
            _3207 = frontier_phi_65_66_ladder_4;
            _3209 = frontier_phi_65_66_ladder_3;
            _3211 = frontier_phi_65_66_ladder_5;
            _3213 = frontier_phi_65_66_ladder_1;
            _3215 = frontier_phi_65_66_ladder_2;
            _3217 = frontier_phi_65_66_ladder;
        }
        float _3222 = isnan(1.0) ? _959 : (isnan(_959) ? 1.0 : min(_959, 1.0));
        _2995 = (_3222 * _3213) + _2527;
        _2997 = (_3222 * _3215) + _2529;
        _2999 = (_3222 * _3217) + _2531;
        _3001 = ((_3207 * 0.039999999105930328369140625) * _3222) + _2850;
        _3003 = ((_3209 * 0.039999999105930328369140625) * _3222) + _2852;
        _3005 = ((_3211 * 0.039999999105930328369140625) * _3222) + _2854;
    }
    else
    {
        _2995 = _2527;
        _2997 = _2529;
        _2999 = _2531;
        _3001 = _2850;
        _3003 = _2852;
        _3005 = _2854;
    }
    uint _3011 = _935 + uint(cbMatDynParam._m0[0u].w);
    float _5039 = isnan(0.0) ? _945 : (isnan(_945) ? 0.0 : max(_945, 0.0));
    float _5050 = isnan(0.0) ? _946 : (isnan(_946) ? 0.0 : max(_946, 0.0));
    float _5061 = isnan(0.0) ? _947 : (isnan(_947) ? 0.0 : max(_947, 0.0));
    float _3042 = (((isnan(1.0) ? _5039 : (isnan(_5039) ? 1.0 : min(_5039, 1.0))) * (_2995 + ((isnan(0.0) ? _1717 : (isnan(_1717) ? 0.0 : max(_1717, 0.0))) * _959))) + ((_3001 + ((isnan(0.0) ? _2009 : (isnan(_2009) ? 0.0 : max(_2009, 0.0))) * _1796)) * cbPerFrame._m0[3u].x)) + (((cbMtdParam._m0[16u].x * _568) * _788) * cbInstanceData._m0[_3011].x);
    float _3044 = ((((cbMtdParam._m0[16u].x * _569) * _788) * cbInstanceData._m0[_3011].y) + ((_3003 + ((isnan(0.0) ? _2012 : (isnan(_2012) ? 0.0 : max(_2012, 0.0))) * _1796)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _5050 : (isnan(_5050) ? 1.0 : min(_5050, 1.0))) * (_2997 + ((isnan(0.0) ? _1720 : (isnan(_1720) ? 0.0 : max(_1720, 0.0))) * _959)));
    float _3046 = ((((cbMtdParam._m0[16u].x * _570) * _788) * cbInstanceData._m0[_3011].z) + ((_3005 + ((isnan(0.0) ? _2015 : (isnan(_2015) ? 0.0 : max(_2015, 0.0))) * _1796)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _5061 : (isnan(_5061) ? 1.0 : min(_5061, 1.0))) * (_2999 + ((isnan(0.0) ? _1723 : (isnan(_1723) ? 0.0 : max(_1723, 0.0))) * _959)));
    float _3047 = isnan(0.0) ? _3042 : (isnan(_3042) ? 0.0 : max(_3042, 0.0));
    float _3048 = isnan(0.0) ? _3044 : (isnan(_3044) ? 0.0 : max(_3044, 0.0));
    float _3049 = isnan(0.0) ? _3046 : (isnan(_3046) ? 0.0 : max(_3046, 0.0));
    uint _3050 = _736 + 6u;
    float _3058 = _897 / cbSceneParam._m0[86u].x;
    float _3059 = _898 / cbSceneParam._m0[86u].y;
    vec4 _3073 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3058, _3059, (log2((isnan(cbSceneParam._m0[77u].w) ? _821 : (isnan(_821) ? cbSceneParam._m0[77u].w : min(_821, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3075 = _3073.x;
    float _3076 = _3073.y;
    float _3077 = _3073.z;
    float _3078 = _3073.w;
    float _3149;
    float _3151;
    float _3153;
    float _3155;
    if (_821 > cbSceneParam._m0[78u].w)
    {
        float _3112 = isnan(_821) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _821 : min(cbSceneParam._m0[80u].w, _821));
        float _3113 = _3112 / _821;
        float _3124 = _3113 * _870;
        float _3125 = _871 * _3113;
        float _3126 = (-0.0) - _3125;
        float _3127 = _3113 * _872;
        float _3129 = (cbSceneParam._m0[77u].w * _3126) / _3112;
        float _3130 = _3129 + cbSceneParam._m0[79u].w;
        float _3131 = cbSceneParam._m0[79u].w - _3125;
        float _3137 = sqrt(((_3124 * _3124) + (_3125 * _3125)) + (_3127 * _3127));
        float _3140 = (1.0 - (cbSceneParam._m0[77u].w / _3112)) * _3137;
        float _3145 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3147 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3324;
        if (abs((_3126 - _3129) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3324 = ((((_3130 > 0.0) ? exp2(_3145 * _3130) : (2.0 - exp2(_3147 * _3130))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3140;
        }
        else
        {
            float _3268 = 1.0 / cbSceneParam._m0[80u].x;
            float _3269 = isnan(_3131) ? _3130 : (isnan(_3130) ? _3131 : max(_3130, _3131));
            float _3270 = isnan(_3131) ? _3130 : (isnan(_3130) ? _3131 : min(_3130, _3131));
            float _3279 = isnan(0.0) ? _3269 : (isnan(_3269) ? 0.0 : min(_3269, 0.0));
            float _3280 = isnan(0.0) ? _3270 : (isnan(_3270) ? 0.0 : min(_3270, 0.0));
            _3324 = ((abs(_3137 / _3126) * cbSceneParam._m0[80u].y) * ((((_3279 - _3280) * 2.0) - ((exp2(_3145 * (isnan(0.0) ? _3269 : (isnan(_3269) ? 0.0 : max(_3269, 0.0)))) - exp2(_3145 * (isnan(0.0) ? _3270 : (isnan(_3270) ? 0.0 : max(_3270, 0.0))))) * _3268)) - ((exp2(_3147 * _3279) - exp2(_3147 * _3280)) * _3268))) + (_3140 * cbSceneParam._m0[80u].z);
        }
        vec4 _3326 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3058, _3059, 1.0), 0.0);
        float _3335 = exp2((_3324 * (-1.44269502162933349609375)) * (1.0 - _3326.w));
        float _3336 = log2(_3335);
        float _3352 = log2(_3078);
        _3149 = (exp2(_3352 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3336 * cbSceneParam._m0[78u].x)) * _3326.x) / cbSceneParam._m0[78u].x)) + _3075;
        _3151 = (exp2(_3352 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3336 * cbSceneParam._m0[78u].y)) * _3326.y) / cbSceneParam._m0[78u].y)) + _3076;
        _3153 = (exp2(_3352 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3336 * cbSceneParam._m0[78u].z)) * _3326.z) / cbSceneParam._m0[78u].z)) + _3077;
        _3155 = _3335 * _3078;
    }
    else
    {
        _3149 = _3075;
        _3151 = _3076;
        _3153 = _3077;
        _3155 = _3078;
    }
    bool _3362;
    vec4 _3165;
    vec4 _3187;
    float _3189;
    float _3193;
    float _3194;
    float _3195;
    float _3196;
    bool _3206;
    for (;;)
    {
        _3165 = cbMatDynParam._m0[0u];
        float _3167 = roundEven(_3165.y);
        bool _3168 = _3167 == 3.0;
        float _3169 = log2(_3155);
        float _3176 = exp2(_3169 * cbSceneParam._m0[78u].x) * _3047;
        float _3177 = exp2(_3169 * cbSceneParam._m0[78u].y) * _3048;
        float _3178 = exp2(_3169 * cbSceneParam._m0[78u].z) * _3049;
        float _3185 = _886 + (-0.5);
        _3187 = cbMtdParam._m0[1u];
        _3189 = _3187.y * _3185;
        float _3192 = (_3167 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3193 = _3192 * (_3168 ? _3176 : (_3176 + (cbSceneParam._m0[72u].w * _3149)));
        _3194 = _3192 * (_3168 ? _3177 : (_3177 + (cbSceneParam._m0[72u].w * _3151)));
        _3195 = _3192 * (_3168 ? _3178 : (_3178 + (cbSceneParam._m0[72u].w * _3153)));
        _3196 = _3185 * 0.999000012874603271484375;
        _3206 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3206)
        {
            if ((cbInstanceData._m0[_736 + 7u].x + _3196) < 0.5)
            {
                _3362 = true;
                break;
            }
        }
        uint _3303 = _935 + uint(_3165.w);
        if ((cbInstanceData._m0[_3303].w < 1.0) && ((cbInstanceData._m0[_3303].w + _3196) < 0.5))
        {
            _3362 = true;
            break;
        }
        if ((_3189 + 1.0) < _3187.x)
        {
            _3362 = true;
            break;
        }
        _3362 = false;
        break;
    }
    float _3566;
    if (_3362)
    {
        discard_state = true;
        _3566 = 0.0;
    }
    else
    {
        _3566 = cbInstanceData._m0[_3050].w;
    }
    SV_Target.x = _3193;
    SV_Target.y = _3194;
    SV_Target.z = _3195;
    SV_Target.w = _3566;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3050].w;
    discard_exit();
}


