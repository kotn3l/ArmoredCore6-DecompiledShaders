#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[19];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Planet_GroundSurface_002_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_Planet_GroundSurface_002_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_Planet_GroundSurface_002_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D M_Planet_GroundSurface_002_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D M_Planet_GroundSurface_002_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_Planet_GroundSurface_002_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_Planet_GroundSurface_002_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_Planet_GroundSurface_002_snp_0_Texture2D_2;
layout(set = 0, binding = 7) uniform texture2D M_Planet_GroundSurface_002_snp_0_Texture2D_4;
layout(set = 0, binding = 8) uniform texture2D M_Planet_GroundSurface_002_snp_0_Texture2D_6;
layout(set = 0, binding = 9) uniform texture2D M_Planet_GroundSurface_002_snp_0_Texture2D_8;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1311;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _198 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _199 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _200 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _205 = inversesqrt(dot(vec3(_198, _199, _200), vec3(_198, _199, _200)));
    float _212 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _213 = _212 * NORMAL.x;
    float _214 = _212 * NORMAL.y;
    float _215 = _212 * NORMAL.z;
    float _219 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _227;
    float _228;
    float _229;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _227 = (-0.0) - _213;
        _228 = (-0.0) - _214;
        _229 = (-0.0) - _215;
    }
    else
    {
        _227 = _213;
        _228 = _214;
        _229 = _215;
    }
    float _264 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _268 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _272 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _276 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _286 = cbSceneParam._m0[71u].x - (_264 / _276);
    float _287 = cbSceneParam._m0[71u].y - (_268 / _276);
    float _288 = cbSceneParam._m0[71u].z - (_272 / _276);
    uvec4 _292 = floatBitsToUint(cbMtdParam._m0[9u]);
    bool _294 = _292.z != 0u;
    vec4 _313 = texture(sampler2D(M_Planet_GroundSurface_002_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _316 = _313.x;
    float _317 = _313.y;
    float _318 = _313.z;
    bool _339 = _292.x != 0u;
    vec4 _356 = texture(sampler2D(M_Planet_GroundSurface_002_snp_0_Texture2D_8, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w));
    float _358 = _356.x;
    float _359 = _356.y;
    float _360 = _356.z;
    float _376 = _339 ? ((cbMtdParam._m0[17u].y * (cbMtdParam._m0[10u].x - _358)) + _358) : (_358 * cbMtdParam._m0[10u].x);
    float _377 = _339 ? ((cbMtdParam._m0[17u].y * (cbMtdParam._m0[10u].y - _359)) + _359) : (_359 * cbMtdParam._m0[10u].y);
    float _378 = _339 ? ((cbMtdParam._m0[17u].y * (cbMtdParam._m0[10u].z - _360)) + _360) : (_360 * cbMtdParam._m0[10u].z);
    bool _380 = _292.y != 0u;
    vec4 _398 = texture(sampler2D(M_Planet_GroundSurface_002_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _400 = _398.x;
    float _401 = _398.y;
    float _402 = _398.z;
    vec4 _430 = texture(sampler2D(M_Planet_GroundSurface_002_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w));
    float _432 = _430.x;
    float _433 = _430.y;
    float _444 = ((cbMtdParam._m0[16u].w * (-1.39999997615814208984375)) * (1.0 - _432)) + 1.0;
    float _3668 = isnan(0.0) ? _444 : (isnan(_444) ? 0.0 : max(_444, 0.0));
    float _449 = (cbMtdParam._m0[16u].y * ((isnan(1.0) ? _3668 : (isnan(_3668) ? 1.0 : min(_3668, 1.0))) - _432)) + _432;
    float _456 = (_449 * ((_380 ? ((cbMtdParam._m0[14u].y * (cbMtdParam._m0[11u].x - _400)) + _400) : (_400 * cbMtdParam._m0[11u].x)) - _376)) + _376;
    float _457 = (_449 * ((_380 ? ((cbMtdParam._m0[14u].y * (cbMtdParam._m0[11u].y - _401)) + _401) : (_401 * cbMtdParam._m0[11u].y)) - _377)) + _377;
    float _458 = (_449 * ((_380 ? ((cbMtdParam._m0[14u].y * (cbMtdParam._m0[11u].z - _402)) + _402) : (_402 * cbMtdParam._m0[11u].z)) - _378)) + _378;
    float _462 = (((1.0 - _433) * (-1.39999997615814208984375)) * cbMtdParam._m0[16u].z) + 1.0;
    float _3679 = isnan(0.0) ? _462 : (isnan(_462) ? 0.0 : max(_462, 0.0));
    float _467 = (cbMtdParam._m0[14u].x * ((isnan(1.0) ? _3679 : (isnan(_3679) ? 1.0 : min(_3679, 1.0))) - _433)) + _433;
    float _474 = (_467 * ((_294 ? ((cbMtdParam._m0[14u].z * (cbMtdParam._m0[12u].x - _316)) + _316) : (_316 * cbMtdParam._m0[12u].x)) - _456)) + _456;
    float _475 = (_467 * ((_294 ? ((cbMtdParam._m0[14u].z * (cbMtdParam._m0[12u].y - _317)) + _317) : (_317 * cbMtdParam._m0[12u].y)) - _457)) + _457;
    float _476 = (_467 * ((_294 ? ((cbMtdParam._m0[14u].z * (cbMtdParam._m0[12u].z - _318)) + _318) : (_318 * cbMtdParam._m0[12u].z)) - _458)) + _458;
    vec4 _488 = texture(sampler2D(M_Planet_GroundSurface_002_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    vec4 _505 = texture(sampler2D(M_Planet_GroundSurface_002_snp_0_Texture2D_13, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _512 = cbMtdParam._m0[15u].y * _505.x;
    float _519 = (_512 * (_488.x - _474)) + _474;
    float _520 = (_512 * (_488.y - _475)) + _475;
    float _521 = (_512 * (_488.z - _476)) + _476;
    float _535 = inversesqrt(dot(vec3(_286, _287, _288), vec3(_286, _287, _288)));
    float _542 = dot(vec4(_535 * _286, _535 * _287, _535 * _288, 0.0), vec4(_227, _228, _229, 0.0)) - cbMtdParam._m0[15u].x;
    float _3690 = isnan(0.0) ? _542 : (isnan(_542) ? 0.0 : max(_542, 0.0));
    float _552 = (exp2(log2(1.0 - (isnan(1.0) ? _3690 : (isnan(_3690) ? 1.0 : min(_3690, 1.0)))) * (isnan(0.001000000047497451305389404296875) ? cbMtdParam._m0[14u].w : (isnan(cbMtdParam._m0[14u].w) ? 0.001000000047497451305389404296875 : max(cbMtdParam._m0[14u].w, 0.001000000047497451305389404296875)))) * (cbMtdParam._m0[15u].w - cbMtdParam._m0[15u].z)) + cbMtdParam._m0[15u].z;
    float _562 = (((_552 * cbMtdParam._m0[13u].x) - _519) * _552) + _519;
    float _563 = (((_552 * cbMtdParam._m0[13u].y) - _520) * _552) + _520;
    float _564 = (((_552 * cbMtdParam._m0[13u].z) - _521) * _552) + _521;
    vec4 _576 = texture(sampler2D(M_Planet_GroundSurface_002_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    vec4 _593 = texture(sampler2D(M_Planet_GroundSurface_002_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _595 = _593.x;
    float _596 = _593.y;
    float _597 = _593.z;
    float _604 = ((_576.x - _595) * _449) + _595;
    float _605 = ((_576.y - _596) * _449) + _596;
    float _606 = ((_576.z - _597) * _449) + _597;
    vec4 _618 = texture(sampler2D(M_Planet_GroundSurface_002_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _644 = texture(sampler2D(M_Planet_GroundSurface_002_snp_0_Texture2D_10, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _656 = (((_618.x - _604) * _467) + _604) + ((_644.x + (-0.5)) * cbMtdParam._m0[17u].x);
    float _657 = (((_618.y - _605) * _467) + _605) + ((_644.y + (-0.5)) * cbMtdParam._m0[17u].x);
    float _658 = (((_618.z - _606) * _467) + _606) + ((_644.z + (-0.5)) * cbMtdParam._m0[17u].x);
    vec4 _671 = texture(sampler2D(M_Planet_GroundSurface_002_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _682 = ((_671.x - _656) * _512) + _656;
    float _683 = ((_671.y - _657) * _512) + _657;
    float _684 = ((_671.z - _658) * _512) + _658;
    float _694 = ((1.0 - _684) * _552) + _684;
    float _698 = ((((0.502016007900238037109375 - _682) * _552) + _682) * 2.0) + (-1.0);
    float _700 = ((((0.502016007900238037109375 - _683) * _552) + _683) * 2.0) + (-1.0);
    float _701 = dot(vec2(_698, _700), vec2(_698, _700));
    float _3706 = isnan(0.0) ? _701 : (isnan(_701) ? 0.0 : max(_701, 0.0));
    float _706 = sqrt(1.0 - (isnan(1.0) ? _3706 : (isnan(_3706) ? 1.0 : min(_3706, 1.0))));
    float _711 = inversesqrt(dot(vec3(_264, _268, _272), vec3(_264, _268, _272)));
    bool _716 = _292.w != 0u;
    float _726 = inversesqrt(dot(vec3(cbMtdParam._m0[17u].zw, cbMtdParam._m0[18u].x), vec3(cbMtdParam._m0[17u].zw, cbMtdParam._m0[18u].x)));
    uint _730 = uint(roundEven(NORMAL.w)) * 13u;
    uint _731 = _730 + 5u;
    uint _736 = floatBitsToUint(cbInstanceData._m0[_731]).x * 14u;
    float _742 = _716 ? cbLight._m0[_736].x : (_726 * cbMtdParam._m0[17u].z);
    float _743 = _716 ? cbLight._m0[_736].y : (_726 * cbMtdParam._m0[17u].w);
    float _744 = _716 ? cbLight._m0[_736].z : (_726 * cbMtdParam._m0[18u].x);
    float _748 = inversesqrt(dot(vec3(_742, _743, _744), vec3(_742, _743, _744)));
    float _749 = _742 * _748;
    float _750 = _743 * _748;
    float _751 = _744 * _748;
    float _755 = inversesqrt(dot(vec3(_749, _750, _751), vec3(_749, _750, _751)));
    float _771 = (0.9700000286102294921875 - exp2(log2((dot(vec4(_711 * _264, _711 * _268, _711 * _272, 0.0), vec4(_755 * _749, _755 * _750, _755 * _751, 0.0)) + 1.0) * 0.5) * 0.017999999225139617919921875)) * (-5.0);
    float _3717 = isnan(0.0) ? _771 : (isnan(_771) ? 0.0 : max(_771, 0.0));
    float _773 = isnan(1.0) ? _3717 : (isnan(_3717) ? 1.0 : min(_3717, 1.0));
    float _779 = exp2(log2(_773 * 6.5) * 7.0);
    float _3728 = isnan(0.0) ? _779 : (isnan(_779) ? 0.0 : max(_779, 0.0));
    float _781 = (isnan(1.0) ? _3728 : (isnan(_3728) ? 1.0 : min(_3728, 1.0))) + _773;
    float _3739 = isnan(0.0) ? _781 : (isnan(_781) ? 0.0 : max(_781, 0.0));
    float _782 = isnan(1.0) ? _3739 : (isnan(_3739) ? 1.0 : min(_3739, 1.0));
    float _785 = fma(_706, _227, fma(_700, _219 * TANGENT.x, (_205 * _198) * _698));
    float _788 = fma(_706, _228, fma(_700, _219 * TANGENT.y, (_205 * _199) * _698));
    float _791 = fma(_706, _229, fma(_700, _219 * TANGENT.z, (_205 * _200) * _698));
    float _795 = inversesqrt(dot(vec3(_785, _788, _791), vec3(_785, _788, _791)));
    float _796 = _795 * _785;
    float _797 = _795 * _788;
    float _798 = _795 * _791;
    float _3750 = isnan(0.0) ? _694 : (isnan(_694) ? 0.0 : max(_694, 0.0));
    float _799 = isnan(1.0) ? _3750 : (isnan(_3750) ? 1.0 : min(_3750, 1.0));
    float _3761 = isnan(0.0) ? _562 : (isnan(_562) ? 0.0 : max(_562, 0.0));
    float _3772 = isnan(0.0) ? _563 : (isnan(_563) ? 0.0 : max(_563, 0.0));
    float _3783 = isnan(0.0) ? _564 : (isnan(_564) ? 0.0 : max(_564, 0.0));
    float _815 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _855 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _864 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _855);
    float _865 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _855);
    float _866 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _855);
    float _870 = inversesqrt(dot(vec3(_864, _865, _866), vec3(_864, _865, _866)));
    float _871 = _864 * _870;
    float _872 = _865 * _870;
    float _873 = _866 * _870;
    float _879 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _880 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _898 = fma(_798, cbSceneParam._m0[5u].z, fma(_797, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _796));
    float _901 = fma(_798, cbSceneParam._m0[6u].z, fma(_797, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _796));
    float _904 = fma(_798, cbSceneParam._m0[7u].z, fma(_797, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _796));
    uint _917 = _730 + 9u;
    uint _918 = _917 + uint(cbMatDynParam._m0[0u].w);
    float _924 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3761 : (isnan(_3761) ? 1.0 : min(_3761, 1.0)))) * cbInstanceData._m0[_918].x;
    float _925 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3772 : (isnan(_3772) ? 1.0 : min(_3772, 1.0)))) * cbInstanceData._m0[_918].y;
    float _926 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3783 : (isnan(_3783) ? 1.0 : min(_3783, 1.0)))) * cbInstanceData._m0[_918].z;
    float _3794 = isnan(0.0) ? _924 : (isnan(_924) ? 0.0 : max(_924, 0.0));
    float _927 = isnan(1.0) ? _3794 : (isnan(_3794) ? 1.0 : min(_3794, 1.0));
    float _3805 = isnan(0.0) ? _925 : (isnan(_925) ? 0.0 : max(_925, 0.0));
    float _928 = isnan(1.0) ? _3805 : (isnan(_3805) ? 1.0 : min(_3805, 1.0));
    float _3816 = isnan(0.0) ? _926 : (isnan(_926) ? 0.0 : max(_926, 0.0));
    float _929 = isnan(1.0) ? _3816 : (isnan(_3816) ? 1.0 : min(_3816, 1.0));
    vec4 _938 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _879, cbSceneParam._m0[86u].y * _880));
    float _941 = _938.x * TEXCOORD.z;
    float _942 = dot(vec3(_796, _797, _798), vec3(_871, _872, _873));
    float _945 = _942 * 2.0;
    float _949 = (_945 * _796) - _871;
    float _950 = (_945 * _797) - _872;
    float _951 = (_945 * _798) - _873;
    float _955 = abs(dot(vec3(_871, _872, _873), vec3(_796, _797, _798)));
    float _3827 = isnan(0.0) ? _955 : (isnan(_955) ? 0.0 : max(_955, 0.0));
    float _957 = sqrt(_799);
    float _970 = exp2((_957 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3827 : (isnan(_3827) ? 1.0 : min(_3827, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_957 * 3.0));
    float _1002 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1006 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1010 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1310;
    float _1312;
    float _1313;
    float _1314;
    float _1315;
    float _1316;
    float _1317;
    float _1318;
    float _1319;
    float _1320;
    float _1321;
    float _1322;
    float _1323;
    float _1324;
    float _1325;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1037 = fma(_1010, cbModelParam._m0[26u].z, fma(_1006, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1002));
        float _1041 = fma(_1010, cbModelParam._m0[27u].z, fma(_1006, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1002));
        float _1045 = fma(_1010, cbModelParam._m0[28u].z, fma(_1006, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1002));
        float _1068 = _1002 + _796;
        float _1069 = _1006 + _797;
        float _1070 = _1010 + _798;
        float _1080 = fma(_1070, cbModelParam._m0[26u].z, fma(_1069, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1068)) - _1037;
        float _1081 = fma(_1070, cbModelParam._m0[27u].z, fma(_1069, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1068)) - _1041;
        float _1082 = fma(_1070, cbModelParam._m0[28u].z, fma(_1069, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1068)) - _1045;
        float _1086 = inversesqrt(dot(vec3(_1080, _1081, _1082), vec3(_1080, _1081, _1082)));
        float _1099 = ((_1086 * _1080) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1037 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1100 = ((_1086 * _1081) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1041 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1101 = ((_1086 * _1082) / cbModelParam._m0[34u].z) + ((((((_1045 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1104 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1099, _1100, _1101), 0.0);
        vec4 _1111 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1099, _1100, _1101), 0.0);
        vec4 _1118 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1099, _1100, _1101), 0.0);
        vec4 _1125 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1099, _1100, _1101), 0.0);
        float _1138 = exp2((_1104.w + (-0.5)) * 20.0) * 2.0;
        float _1139 = _1138 * (_1104.x + (-0.5));
        float _1140 = _1138 * (_1104.y + (-0.5));
        float _1141 = _1138 * (_1104.z + (-0.5));
        float _1148 = exp2((_1111.w + (-0.5)) * 20.0) * 2.0;
        float _1149 = _1148 * (_1111.x + (-0.5));
        float _1150 = _1148 * (_1111.y + (-0.5));
        float _1151 = _1148 * (_1111.z + (-0.5));
        float _1158 = exp2((_1118.w + (-0.5)) * 20.0) * 2.0;
        float _1159 = _1158 * (_1118.x + (-0.5));
        float _1160 = _1158 * (_1118.y + (-0.5));
        float _1161 = _1158 * (_1118.z + (-0.5));
        float _1168 = exp2((_1125.w + (-0.5)) * 20.0) * 2.0;
        float _1169 = _1168 * (_1125.x + (-0.5));
        float _1170 = _1168 * (_1125.y + (-0.5));
        float _1171 = _1168 * (_1125.z + (-0.5));
        float _1172 = isnan(0.0) ? _1169 : (isnan(_1169) ? 0.0 : max(_1169, 0.0));
        float _1173 = isnan(0.0) ? _1170 : (isnan(_1170) ? 0.0 : max(_1170, 0.0));
        float _1174 = isnan(0.0) ? _1171 : (isnan(_1171) ? 0.0 : max(_1171, 0.0));
        float _1175 = _1139 * 0.5;
        float _1176 = _1149 * 0.5;
        float _1177 = _1159 * 0.5;
        float _1178 = dot(vec3(_1175, _1176, _1177), vec3(_1175, _1176, _1177));
        float _1183 = (_1178 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1178);
        float _1192 = (dot(vec3(_796, _797, _798), vec3(_1183 * _1175, _1183 * _1176, _1183 * _1177)) + 1.0) * 0.5;
        float _3853 = isnan(0.0) ? _1192 : (isnan(_1192) ? 0.0 : max(_1192, 0.0));
        float _1202 = sqrt(((_1176 * _1176) + (_1175 * _1175)) + (_1177 * _1177)) / (_1172 + 9.9999997473787516355514526367188e-06);
        float _3864 = isnan(0.0) ? _1202 : (isnan(_1202) ? 0.0 : max(_1202, 0.0));
        float _1203 = isnan(1.0) ? _3864 : (isnan(_3864) ? 1.0 : min(_3864, 1.0));
        float _1204 = _1203 * 2.0;
        float _1208 = (1.0 - _1203) / (_1203 + 1.0);
        float _3875 = isnan(0.0) ? _1208 : (isnan(_1208) ? 0.0 : max(_1208, 0.0));
        float _1209 = isnan(1.0) ? _3875 : (isnan(_3875) ? 1.0 : min(_3875, 1.0));
        float _1218 = ((((1.0 - _1209) * (_1204 + 2.0)) * exp2(log2(isnan(1.0) ? _3853 : (isnan(_3853) ? 1.0 : min(_3853, 1.0))) * (_1204 + 1.0))) + _1209) * _1172;
        float _1219 = _1140 * 0.5;
        float _1220 = _1150 * 0.5;
        float _1221 = _1160 * 0.5;
        float _1222 = dot(vec3(_1219, _1220, _1221), vec3(_1219, _1220, _1221));
        float _1227 = (_1222 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1222);
        float _1235 = (dot(vec3(_796, _797, _798), vec3(_1227 * _1219, _1227 * _1220, _1227 * _1221)) + 1.0) * 0.5;
        float _3886 = isnan(0.0) ? _1235 : (isnan(_1235) ? 0.0 : max(_1235, 0.0));
        float _1244 = sqrt(((_1220 * _1220) + (_1219 * _1219)) + (_1221 * _1221)) / (_1173 + 9.9999997473787516355514526367188e-06);
        float _3897 = isnan(0.0) ? _1244 : (isnan(_1244) ? 0.0 : max(_1244, 0.0));
        float _1245 = isnan(1.0) ? _3897 : (isnan(_3897) ? 1.0 : min(_3897, 1.0));
        float _1246 = _1245 * 2.0;
        float _1250 = (1.0 - _1245) / (_1245 + 1.0);
        float _3908 = isnan(0.0) ? _1250 : (isnan(_1250) ? 0.0 : max(_1250, 0.0));
        float _1251 = isnan(1.0) ? _3908 : (isnan(_3908) ? 1.0 : min(_3908, 1.0));
        float _1260 = ((((1.0 - _1251) * (_1246 + 2.0)) * exp2(log2(isnan(1.0) ? _3886 : (isnan(_3886) ? 1.0 : min(_3886, 1.0))) * (_1246 + 1.0))) + _1251) * _1173;
        float _1261 = _1141 * 0.5;
        float _1262 = _1151 * 0.5;
        float _1263 = _1161 * 0.5;
        float _1264 = dot(vec3(_1261, _1262, _1263), vec3(_1261, _1262, _1263));
        float _1269 = (_1264 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1264);
        float _1277 = (dot(vec3(_796, _797, _798), vec3(_1269 * _1261, _1269 * _1262, _1269 * _1263)) + 1.0) * 0.5;
        float _3919 = isnan(0.0) ? _1277 : (isnan(_1277) ? 0.0 : max(_1277, 0.0));
        float _1286 = sqrt(((_1262 * _1262) + (_1261 * _1261)) + (_1263 * _1263)) / (_1174 + 9.9999997473787516355514526367188e-06);
        float _3930 = isnan(0.0) ? _1286 : (isnan(_1286) ? 0.0 : max(_1286, 0.0));
        float _1287 = isnan(1.0) ? _3930 : (isnan(_3930) ? 1.0 : min(_3930, 1.0));
        float _1288 = _1287 * 2.0;
        float _1292 = (1.0 - _1287) / (_1287 + 1.0);
        float _3941 = isnan(0.0) ? _1292 : (isnan(_1292) ? 0.0 : max(_1292, 0.0));
        float _1293 = isnan(1.0) ? _3941 : (isnan(_3941) ? 1.0 : min(_3941, 1.0));
        float _1302 = ((((1.0 - _1293) * (_1288 + 2.0)) * exp2(log2(isnan(1.0) ? _3919 : (isnan(_3919) ? 1.0 : min(_3919, 1.0))) * (_1288 + 1.0))) + _1293) * _1174;
        _1310 = _1141;
        _1312 = _1140;
        _1313 = _1139;
        _1314 = _1151;
        _1315 = _1150;
        _1316 = _1149;
        _1317 = _1161;
        _1318 = _1160;
        _1319 = _1159;
        _1320 = _1174;
        _1321 = _1173;
        _1322 = _1172;
        _1323 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1218 : (isnan(_1218) ? 0.0 : max(_1218, 0.0)));
        _1324 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1260 : (isnan(_1260) ? 0.0 : max(_1260, 0.0)));
        _1325 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1302 : (isnan(_1302) ? 0.0 : max(_1302, 0.0)));
    }
    else
    {
        _1310 = _1311;
        _1312 = _1311;
        _1313 = _1311;
        _1314 = _1311;
        _1315 = _1311;
        _1316 = _1311;
        _1317 = _1311;
        _1318 = _1311;
        _1319 = _1311;
        _1320 = _1311;
        _1321 = _1311;
        _1322 = _1311;
        _1323 = 0.0;
        _1324 = 0.0;
        _1325 = 0.0;
    }
    float _1620;
    float _1621;
    float _1622;
    float _1623;
    float _1624;
    float _1625;
    float _1626;
    float _1627;
    float _1628;
    float _1629;
    float _1630;
    float _1631;
    float _1632;
    float _1633;
    float _1634;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1351 = fma(_1010, cbModelParam._m0[30u].z, fma(_1006, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1002));
        float _1355 = fma(_1010, cbModelParam._m0[31u].z, fma(_1006, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1002));
        float _1359 = fma(_1010, cbModelParam._m0[32u].z, fma(_1006, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1002));
        float _1382 = _1002 + _796;
        float _1383 = _1006 + _797;
        float _1384 = _1010 + _798;
        float _1394 = fma(_1384, cbModelParam._m0[30u].z, fma(_1383, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1382)) - _1351;
        float _1395 = fma(_1384, cbModelParam._m0[31u].z, fma(_1383, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1382)) - _1355;
        float _1396 = fma(_1384, cbModelParam._m0[32u].z, fma(_1383, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1382)) - _1359;
        float _1400 = inversesqrt(dot(vec3(_1394, _1395, _1396), vec3(_1394, _1395, _1396)));
        float _1413 = ((_1400 * _1394) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1351 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1414 = ((_1400 * _1395) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1355 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1415 = ((_1400 * _1396) / cbModelParam._m0[35u].z) + ((((((_1359 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1417 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1413, _1414, _1415), 0.0);
        vec4 _1424 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1413, _1414, _1415), 0.0);
        vec4 _1431 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1413, _1414, _1415), 0.0);
        vec4 _1438 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1413, _1414, _1415), 0.0);
        float _1450 = exp2((_1417.w + (-0.5)) * 20.0) * 2.0;
        float _1451 = _1450 * (_1417.x + (-0.5));
        float _1452 = _1450 * (_1417.y + (-0.5));
        float _1453 = _1450 * (_1417.z + (-0.5));
        float _1460 = exp2((_1424.w + (-0.5)) * 20.0) * 2.0;
        float _1461 = _1460 * (_1424.x + (-0.5));
        float _1462 = _1460 * (_1424.y + (-0.5));
        float _1463 = _1460 * (_1424.z + (-0.5));
        float _1470 = exp2((_1431.w + (-0.5)) * 20.0) * 2.0;
        float _1471 = _1470 * (_1431.x + (-0.5));
        float _1472 = _1470 * (_1431.y + (-0.5));
        float _1473 = _1470 * (_1431.z + (-0.5));
        float _1480 = exp2((_1438.w + (-0.5)) * 20.0) * 2.0;
        float _1481 = _1480 * (_1438.x + (-0.5));
        float _1482 = _1480 * (_1438.y + (-0.5));
        float _1483 = _1480 * (_1438.z + (-0.5));
        float _1484 = isnan(0.0) ? _1481 : (isnan(_1481) ? 0.0 : max(_1481, 0.0));
        float _1485 = isnan(0.0) ? _1482 : (isnan(_1482) ? 0.0 : max(_1482, 0.0));
        float _1486 = isnan(0.0) ? _1483 : (isnan(_1483) ? 0.0 : max(_1483, 0.0));
        float _1487 = _1451 * 0.5;
        float _1488 = _1461 * 0.5;
        float _1489 = _1471 * 0.5;
        float _1490 = dot(vec3(_1487, _1488, _1489), vec3(_1487, _1488, _1489));
        float _1495 = (_1490 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1490);
        float _1503 = (dot(vec3(_796, _797, _798), vec3(_1495 * _1487, _1495 * _1488, _1495 * _1489)) + 1.0) * 0.5;
        float _3982 = isnan(0.0) ? _1503 : (isnan(_1503) ? 0.0 : max(_1503, 0.0));
        float _1512 = sqrt(((_1488 * _1488) + (_1487 * _1487)) + (_1489 * _1489)) / (_1484 + 9.9999997473787516355514526367188e-06);
        float _3993 = isnan(0.0) ? _1512 : (isnan(_1512) ? 0.0 : max(_1512, 0.0));
        float _1513 = isnan(1.0) ? _3993 : (isnan(_3993) ? 1.0 : min(_3993, 1.0));
        float _1514 = _1513 * 2.0;
        float _1518 = (1.0 - _1513) / (_1513 + 1.0);
        float _4004 = isnan(0.0) ? _1518 : (isnan(_1518) ? 0.0 : max(_1518, 0.0));
        float _1519 = isnan(1.0) ? _4004 : (isnan(_4004) ? 1.0 : min(_4004, 1.0));
        float _1528 = ((((1.0 - _1519) * (_1514 + 2.0)) * exp2(log2(isnan(1.0) ? _3982 : (isnan(_3982) ? 1.0 : min(_3982, 1.0))) * (_1514 + 1.0))) + _1519) * _1484;
        float _1529 = _1452 * 0.5;
        float _1530 = _1462 * 0.5;
        float _1531 = _1472 * 0.5;
        float _1532 = dot(vec3(_1529, _1530, _1531), vec3(_1529, _1530, _1531));
        float _1537 = (_1532 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1532);
        float _1545 = (dot(vec3(_796, _797, _798), vec3(_1537 * _1529, _1537 * _1530, _1537 * _1531)) + 1.0) * 0.5;
        float _4015 = isnan(0.0) ? _1545 : (isnan(_1545) ? 0.0 : max(_1545, 0.0));
        float _1554 = sqrt(((_1530 * _1530) + (_1529 * _1529)) + (_1531 * _1531)) / (_1485 + 9.9999997473787516355514526367188e-06);
        float _4026 = isnan(0.0) ? _1554 : (isnan(_1554) ? 0.0 : max(_1554, 0.0));
        float _1555 = isnan(1.0) ? _4026 : (isnan(_4026) ? 1.0 : min(_4026, 1.0));
        float _1556 = _1555 * 2.0;
        float _1560 = (1.0 - _1555) / (_1555 + 1.0);
        float _4037 = isnan(0.0) ? _1560 : (isnan(_1560) ? 0.0 : max(_1560, 0.0));
        float _1561 = isnan(1.0) ? _4037 : (isnan(_4037) ? 1.0 : min(_4037, 1.0));
        float _1570 = ((((1.0 - _1561) * (_1556 + 2.0)) * exp2(log2(isnan(1.0) ? _4015 : (isnan(_4015) ? 1.0 : min(_4015, 1.0))) * (_1556 + 1.0))) + _1561) * _1485;
        float _1571 = _1453 * 0.5;
        float _1572 = _1463 * 0.5;
        float _1573 = _1473 * 0.5;
        float _1574 = dot(vec3(_1571, _1572, _1573), vec3(_1571, _1572, _1573));
        float _1579 = (_1574 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1574);
        float _1587 = (dot(vec3(_796, _797, _798), vec3(_1579 * _1571, _1579 * _1572, _1579 * _1573)) + 1.0) * 0.5;
        float _4048 = isnan(0.0) ? _1587 : (isnan(_1587) ? 0.0 : max(_1587, 0.0));
        float _1596 = sqrt(((_1572 * _1572) + (_1571 * _1571)) + (_1573 * _1573)) / (_1486 + 9.9999997473787516355514526367188e-06);
        float _4059 = isnan(0.0) ? _1596 : (isnan(_1596) ? 0.0 : max(_1596, 0.0));
        float _1597 = isnan(1.0) ? _4059 : (isnan(_4059) ? 1.0 : min(_4059, 1.0));
        float _1598 = _1597 * 2.0;
        float _1602 = (1.0 - _1597) / (_1597 + 1.0);
        float _4070 = isnan(0.0) ? _1602 : (isnan(_1602) ? 0.0 : max(_1602, 0.0));
        float _1603 = isnan(1.0) ? _4070 : (isnan(_4070) ? 1.0 : min(_4070, 1.0));
        float _1612 = ((((1.0 - _1603) * (_1598 + 2.0)) * exp2(log2(isnan(1.0) ? _4048 : (isnan(_4048) ? 1.0 : min(_4048, 1.0))) * (_1598 + 1.0))) + _1603) * _1486;
        _1620 = _1453;
        _1621 = _1452;
        _1622 = _1451;
        _1623 = _1463;
        _1624 = _1462;
        _1625 = _1461;
        _1626 = _1473;
        _1627 = _1472;
        _1628 = _1471;
        _1629 = _1486;
        _1630 = _1485;
        _1631 = _1484;
        _1632 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1528 : (isnan(_1528) ? 0.0 : max(_1528, 0.0)));
        _1633 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1570 : (isnan(_1570) ? 0.0 : max(_1570, 0.0)));
        _1634 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1612 : (isnan(_1612) ? 0.0 : max(_1612, 0.0)));
    }
    else
    {
        _1620 = _1311;
        _1621 = _1311;
        _1622 = _1311;
        _1623 = _1311;
        _1624 = _1311;
        _1625 = _1311;
        _1626 = _1311;
        _1627 = _1311;
        _1628 = _1311;
        _1629 = _1311;
        _1630 = _1311;
        _1631 = _1311;
        _1632 = 0.0;
        _1633 = 0.0;
        _1634 = 0.0;
    }
    float _1644 = (cbModelParam._m0[1u].x * (_1632 - _1323)) + _1323;
    float _1645 = (cbModelParam._m0[1u].x * (_1633 - _1324)) + _1324;
    float _1646 = (cbModelParam._m0[1u].x * (_1634 - _1325)) + _1325;
    float _1667 = fma(_1646, cbSceneParam._m0[89u].z, fma(_1645, cbSceneParam._m0[89u].y, _1644 * cbSceneParam._m0[89u].x));
    float _1670 = fma(_1646, cbSceneParam._m0[90u].z, fma(_1645, cbSceneParam._m0[90u].y, _1644 * cbSceneParam._m0[90u].x));
    float _1673 = fma(_1646, cbSceneParam._m0[91u].z, fma(_1645, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1644));
    float _1688 = _949 * 0.5;
    float _1689 = _950 * 0.5;
    float _1690 = _951 * 0.5;
    float _1691 = dot(vec4(_1688, _1689, _1690, 1.0), vec4(_1622, _1625, _1628, _1631));
    float _1694 = dot(vec4(_1688, _1689, _1690, 1.0), vec4(_1621, _1624, _1627, _1630));
    float _1697 = dot(vec4(_1688, _1689, _1690, 1.0), vec4(_1620, _1623, _1626, _1629));
    float _1731;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1704 = dot(vec4(_1688, _1689, _1690, 1.0), vec4(_1310, _1314, _1317, _1320));
        float _1708 = dot(vec4(_1688, _1689, _1690, 1.0), vec4(_1312, _1315, _1318, _1321));
        float _1712 = dot(vec4(_1688, _1689, _1690, 1.0), vec4(_1313, _1316, _1319, _1322));
        float _1719 = dot(vec4(cbModelParam._m0[39u]), vec4(_1688, _1689, _1690, 1.0));
        _1731 = dot(vec3(isnan(0.0) ? _1712 : (isnan(_1712) ? 0.0 : max(_1712, 0.0)), isnan(0.0) ? _1708 : (isnan(_1708) ? 0.0 : max(_1708, 0.0)), isnan(0.0) ? _1704 : (isnan(_1704) ? 0.0 : max(_1704, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1719) ? 0.0 : (isnan(0.0) ? _1719 : max(0.0, _1719))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1731 = 1.0;
    }
    float _1742;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1733 = dot(vec4(cbModelParam._m0[40u]), vec4(_1688, _1689, _1690, 1.0));
        _1742 = dot(vec3(isnan(0.0) ? _1691 : (isnan(_1691) ? 0.0 : max(_1691, 0.0)), isnan(0.0) ? _1694 : (isnan(_1694) ? 0.0 : max(_1694, 0.0)), isnan(0.0) ? _1697 : (isnan(_1697) ? 0.0 : max(_1697, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1733) ? 0.0 : (isnan(0.0) ? _1733 : max(0.0, _1733))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1742 = 1.0;
    }
    float _1746 = (_1742 * cbModelParam._m0[1u].x) + (_1731 * (1.0 - cbModelParam._m0[1u].x));
    float _1756 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _799);
    float _1757 = isnan(_1756) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1756 : min(cbModelParam._m0[25u].z, _1756));
    float _1837;
    float _1839;
    float _1841;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1804 = fma(_1010, cbModelParam._m0[13u].z, fma(_1006, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1002)) + cbModelParam._m0[13u].w;
        float _1808 = fma(_1010, cbModelParam._m0[14u].z, fma(_1006, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1002)) + cbModelParam._m0[14u].w;
        float _1812 = fma(_1010, cbModelParam._m0[15u].z, fma(_1006, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1002)) + cbModelParam._m0[15u].w;
        float _1815 = fma(_951, cbModelParam._m0[13u].z, fma(_950, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _949));
        float _1818 = fma(_951, cbModelParam._m0[14u].z, fma(_950, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _949));
        float _1821 = fma(_951, cbModelParam._m0[15u].z, fma(_950, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _949));
        float _1849;
        if (_1815 > 0.0)
        {
            _1849 = abs((1.0 - _1804) / _1815);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1815 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1804 + 1.0) / _1815);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1849 = frontier_phi_16_14_ladder;
        }
        float _2071;
        if (_1818 > 0.0)
        {
            _2071 = abs((1.0 - _1808) / _1818);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1818 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1808 + 1.0) / _1818);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2071 = frontier_phi_25_21_ladder;
        }
        float _2317;
        if (_1821 > 0.0)
        {
            _2317 = abs((1.0 - _1812) / _1821);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1821 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1812 + 1.0) / _1821);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2317 = frontier_phi_37_32_ladder;
        }
        float _2319 = isnan(_2071) ? _1849 : (isnan(_1849) ? _2071 : min(_1849, _2071));
        float _2320 = isnan(_2317) ? _2319 : (isnan(_2319) ? _2317 : min(_2319, _2317));
        float _2324 = (_2320 * _1815) + _1804;
        float _2325 = (_2320 * _1818) + _1808;
        float _2326 = (_2320 * _1821) + _1812;
        float _2327 = _2320 * 9.9999997473787516355514526367188e-05;
        float _2329 = (-1.0) - _2327;
        float _2331 = _2327 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_2326 > _2331) || ((_2326 < _2329) || ((_2325 > _2331) || ((_2325 < _2329) || ((_2324 < _2329) || (_2324 > _2331))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2450 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2326, cbModelParam._m0[9u].z, fma(_2325, cbModelParam._m0[9u].y, _2324 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2326, cbModelParam._m0[10u].z, fma(_2325, cbModelParam._m0[10u].y, _2324 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2326, cbModelParam._m0[11u].z, fma(_2325, cbModelParam._m0[11u].y, _2324 * cbModelParam._m0[11u].x))), _1757);
            frontier_phi_15_37_ladder = _2450.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2450.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2450.x * cbModelParam._m0[1u].y;
        }
        _1837 = frontier_phi_15_37_ladder_2;
        _1839 = frontier_phi_15_37_ladder_1;
        _1841 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1825 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_949, _950, _951), _1757);
        _1837 = _1825.x * cbModelParam._m0[1u].y;
        _1839 = _1825.y * cbModelParam._m0[1u].y;
        _1841 = _1825.z * cbModelParam._m0[1u].y;
    }
    float _1845 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _799);
    float _1846 = isnan(_1845) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1845 : min(cbModelParam._m0[25u].w, _1845));
    float _1937;
    float _1939;
    float _1941;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1901 = fma(_1010, cbModelParam._m0[21u].z, fma(_1006, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1002)) + cbModelParam._m0[21u].w;
        float _1905 = fma(_1010, cbModelParam._m0[22u].z, fma(_1006, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1002)) + cbModelParam._m0[22u].w;
        float _1909 = fma(_1010, cbModelParam._m0[23u].z, fma(_1006, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1002)) + cbModelParam._m0[23u].w;
        float _1912 = fma(_951, cbModelParam._m0[21u].z, fma(_950, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _949));
        float _1915 = fma(_951, cbModelParam._m0[22u].z, fma(_950, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _949));
        float _1918 = fma(_951, cbModelParam._m0[23u].z, fma(_950, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _949));
        float _2076;
        if (_1912 > 0.0)
        {
            _2076 = abs((1.0 - _1901) / _1912);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1912 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1901 + 1.0) / _1912);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _2076 = frontier_phi_27_23_ladder;
        }
        float _2344;
        if (_1915 > 0.0)
        {
            _2344 = abs((1.0 - _1905) / _1915);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1915 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1905 + 1.0) / _1915);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _2344 = frontier_phi_39_34_ladder;
        }
        float _2549;
        if (_1918 > 0.0)
        {
            _2549 = abs((1.0 - _1909) / _1918);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1918 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1909 + 1.0) / _1918);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _2549 = frontier_phi_48_45_ladder;
        }
        float _2551 = isnan(_2344) ? _2076 : (isnan(_2076) ? _2344 : min(_2076, _2344));
        float _2552 = isnan(_2549) ? _2551 : (isnan(_2551) ? _2549 : min(_2551, _2549));
        float _2556 = (_2552 * _1912) + _1901;
        float _2557 = (_2552 * _1915) + _1905;
        float _2558 = (_2552 * _1918) + _1909;
        float _2559 = _2552 * 9.9999997473787516355514526367188e-05;
        float _2560 = (-1.0) - _2559;
        float _2562 = _2559 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2558 > _2562) || ((_2558 < _2560) || ((_2557 > _2562) || ((_2557 < _2560) || ((_2556 < _2560) || (_2556 > _2562))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2781 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2558, cbModelParam._m0[17u].z, fma(_2557, cbModelParam._m0[17u].y, _2556 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2558, cbModelParam._m0[18u].z, fma(_2557, cbModelParam._m0[18u].y, _2556 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2558, cbModelParam._m0[19u].z, fma(_2557, cbModelParam._m0[19u].y, _2556 * cbModelParam._m0[19u].x))), _1846);
            frontier_phi_24_48_ladder = _2781.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2781.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2781.x * cbModelParam._m0[1u].z;
        }
        _1937 = frontier_phi_24_48_ladder_2;
        _1939 = frontier_phi_24_48_ladder_1;
        _1941 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1921 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_949, _950, _951), _1846);
        _1937 = _1921.x * cbModelParam._m0[1u].z;
        _1939 = _1921.y * cbModelParam._m0[1u].z;
        _1941 = _1921.z * cbModelParam._m0[1u].z;
    }
    float _1953 = ((((1.0 - _970) * ((_957 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_970 * _957)) * _941;
    float _1954 = _1953 * ((cbModelParam._m0[1u].w * (_1937 - _1837)) + _1837);
    float _1955 = _1953 * ((cbModelParam._m0[1u].w * (_1939 - _1839)) + _1839);
    float _1956 = _1953 * ((cbModelParam._m0[1u].w * (_1941 - _1841)) + _1841);
    float _1959 = fma(_1956, cbSceneParam._m0[89u].z, fma(_1955, cbSceneParam._m0[89u].y, _1954 * cbSceneParam._m0[89u].x));
    float _1962 = fma(_1956, cbSceneParam._m0[90u].z, fma(_1955, cbSceneParam._m0[90u].y, _1954 * cbSceneParam._m0[90u].x));
    float _1965 = fma(_1956, cbSceneParam._m0[91u].z, fma(_1955, cbSceneParam._m0[91u].y, _1954 * cbSceneParam._m0[91u].x));
    vec4 _1973 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_879, _880));
    float _1975 = _1973.w;
    float _1987 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1975);
    float _1988 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1975);
    float _1989 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1975);
    uvec4 _1992 = floatBitsToUint(cbInstanceData._m0[_731]);
    uint _1994 = _1992.x * 14u;
    uint _1995 = _1994 + 13u;
    float _2002 = _941 + (-1.0);
    float _2007 = (cbLight._m0[_1995].x * _2002) + 1.0;
    float _2008 = (cbLight._m0[_1995].y * _2002) + 1.0;
    float _2009 = (cbLight._m0[_1995].z * _2002) + 1.0;
    float _2010 = (cbLight._m0[_1995].w * _2002) + 1.0;
    uint _2011 = _1994 + 5u;
    float _2017 = isnan(1.0) ? _2008 : (isnan(_2008) ? 1.0 : min(_2008, 1.0));
    uint _2021 = _1994 + 4u;
    float _2030 = isnan(1.0) ? _2007 : (isnan(_2007) ? 1.0 : min(_2007, 1.0));
    uint _2034 = _1994 | 1u;
    float _2045 = dot(vec3(cbLight._m0[_1994].xyz), vec3(_796, _797, _798));
    float _2048 = dot(vec3(cbLight._m0[_2034].xyz), vec3(_796, _797, _798));
    float _4206 = isnan(0.0) ? _2045 : (isnan(_2045) ? 0.0 : max(_2045, 0.0));
    float _4217 = isnan(0.0) ? _2048 : (isnan(_2048) ? 0.0 : max(_2048, 0.0));
    float _2053 = (isnan(1.0) ? _4206 : (isnan(_4206) ? 1.0 : min(_4206, 1.0))) * 0.3183098733425140380859375;
    float _2055 = (isnan(1.0) ? _4217 : (isnan(_4217) ? 1.0 : min(_4217, 1.0))) * 0.3183098733425140380859375;
    float _2062 = ((cbLight._m0[_2011].x * _2017) * _2055) + (((cbLight._m0[_2021].x * _1987) * _2030) * _2053);
    float _2063 = ((_2017 * cbLight._m0[_2011].y) * _2055) + (((cbLight._m0[_2021].y * _1988) * _2030) * _2053);
    float _2064 = ((_2017 * cbLight._m0[_2011].z) * _2055) + (((cbLight._m0[_2021].z * _1989) * _2030) * _2053);
    uvec4 _2068 = floatBitsToUint(cbLight._m0[_1994 + 12u]);
    bool _2070 = _2068.x == 0u;
    float _2081;
    float _2083;
    float _2085;
    if (_2070)
    {
        _2081 = _2062;
        _2083 = _2063;
        _2085 = _2064;
    }
    else
    {
        uint _2089 = _1994 + 6u;
        float _2105 = (dot(vec3(cbLight._m0[_1994 + 2u].xyz), vec3(_796, _797, _798)) * 0.5) + 0.5;
        float _2106 = _2105 * _2105;
        float _4228 = isnan(0.0) ? _2106 : (isnan(_2106) ? 0.0 : max(_2106, 0.0));
        float _2107 = isnan(1.0) ? _4228 : (isnan(_4228) ? 1.0 : min(_4228, 1.0));
        float _2108 = isnan(1.0) ? _2009 : (isnan(_2009) ? 1.0 : min(_2009, 1.0));
        _2081 = (((cbLight._m0[_2089].x * 0.3183098733425140380859375) * _2107) * _2108) + _2062;
        _2083 = (((cbLight._m0[_2089].y * 0.3183098733425140380859375) * _2107) * _2108) + _2063;
        _2085 = (((cbLight._m0[_2089].z * 0.3183098733425140380859375) * _2107) * _2108) + _2064;
    }
    bool _2088 = _2068.y == 0u;
    float _2126;
    float _2128;
    float _2130;
    if (_2088)
    {
        _2126 = _2081;
        _2128 = _2083;
        _2130 = _2085;
    }
    else
    {
        uint _2288 = _1994 + 7u;
        float _2304 = (dot(vec3(cbLight._m0[_1994 + 3u].xyz), vec3(_796, _797, _798)) * 0.5) + 0.5;
        float _2305 = _2304 * _2304;
        float _4244 = isnan(0.0) ? _2305 : (isnan(_2305) ? 0.0 : max(_2305, 0.0));
        float _2306 = isnan(1.0) ? _4244 : (isnan(_4244) ? 1.0 : min(_4244, 1.0));
        float _2307 = isnan(1.0) ? _2010 : (isnan(_2010) ? 1.0 : min(_2010, 1.0));
        _2126 = (((cbLight._m0[_2288].x * 0.3183098733425140380859375) * _2306) * _2307) + _2081;
        _2128 = (((cbLight._m0[_2288].y * 0.3183098733425140380859375) * _2306) * _2307) + _2083;
        _2130 = (((cbLight._m0[_2288].z * 0.3183098733425140380859375) * _2306) * _2307) + _2085;
    }
    uint _2133 = _1994 + 8u;
    float _2146 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1994].w)) * _799) * 0.949999988079071044921875);
    float _2147 = _2146 * _2146;
    float _2148 = cbLight._m0[_1994].x + _871;
    float _2149 = cbLight._m0[_1994].y + _872;
    float _2150 = cbLight._m0[_1994].z + _873;
    float _2154 = inversesqrt(dot(vec3(_2148, _2149, _2150), vec3(_2148, _2149, _2150)));
    float _2155 = _2154 * _2148;
    float _2156 = _2154 * _2149;
    float _2157 = _2154 * _2150;
    float _2158 = dot(vec3(_796, _797, _798), vec3(cbLight._m0[_1994].xyz));
    float _4260 = isnan(0.0) ? _2158 : (isnan(_2158) ? 0.0 : max(_2158, 0.0));
    float _2161 = isnan(1.0) ? _4260 : (isnan(_4260) ? 1.0 : min(_4260, 1.0));
    float _4271 = isnan(0.0) ? _942 : (isnan(_942) ? 0.0 : max(_942, 0.0));
    float _2162 = isnan(1.0) ? _4271 : (isnan(_4271) ? 1.0 : min(_4271, 1.0));
    float _2163 = dot(vec3(_796, _797, _798), vec3(_2155, _2156, _2157));
    float _4282 = isnan(0.0) ? _2163 : (isnan(_2163) ? 0.0 : max(_2163, 0.0));
    float _2166 = isnan(1.0) ? _4282 : (isnan(_4282) ? 1.0 : min(_4282, 1.0));
    float _2167 = dot(vec3(cbLight._m0[_1994].xyz), vec3(_2155, _2156, _2157));
    float _4293 = isnan(0.0) ? _2167 : (isnan(_2167) ? 0.0 : max(_2167, 0.0));
    float _2171 = _2147 * _2147;
    float _2175 = ((_2166 * _2166) * (_2171 + (-1.0))) + 1.0;
    float _2186 = (exp2(log2(1.0 - (isnan(1.0) ? _4293 : (isnan(_4293) ? 1.0 : min(_4293, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2187 = 1.0 - _2147;
    float _2198 = (0.5 / (((_2162 * ((_2161 * _2187) + _2147)) + 9.9999999392252902907785028219223e-09) + (((_2162 * _2187) + _2147) * _2161))) * _2161;
    float _4304 = isnan(0.0) ? _2198 : (isnan(_2198) ? 0.0 : max(_2198, 0.0));
    float _2200 = (isnan(1.0) ? _4304 : (isnan(_4304) ? 1.0 : min(_4304, 1.0))) * (_2171 / ((_2175 * _2175) * 3.141590118408203125));
    uint _2214 = _1994 + 9u;
    float _2225 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2034].w)) * _799) * 0.949999988079071044921875);
    float _2226 = _2225 * _2225;
    float _2227 = cbLight._m0[_2034].x + _871;
    float _2228 = cbLight._m0[_2034].y + _872;
    float _2229 = cbLight._m0[_2034].z + _873;
    float _2233 = inversesqrt(dot(vec3(_2227, _2228, _2229), vec3(_2227, _2228, _2229)));
    float _2234 = _2233 * _2227;
    float _2235 = _2233 * _2228;
    float _2236 = _2233 * _2229;
    float _2237 = dot(vec3(_796, _797, _798), vec3(cbLight._m0[_2034].xyz));
    float _4315 = isnan(0.0) ? _2237 : (isnan(_2237) ? 0.0 : max(_2237, 0.0));
    float _2240 = isnan(1.0) ? _4315 : (isnan(_4315) ? 1.0 : min(_4315, 1.0));
    float _2241 = dot(vec3(_796, _797, _798), vec3(_2234, _2235, _2236));
    float _4326 = isnan(0.0) ? _2241 : (isnan(_2241) ? 0.0 : max(_2241, 0.0));
    float _2244 = isnan(1.0) ? _4326 : (isnan(_4326) ? 1.0 : min(_4326, 1.0));
    float _2245 = dot(vec3(cbLight._m0[_2034].xyz), vec3(_2234, _2235, _2236));
    float _4337 = isnan(0.0) ? _2245 : (isnan(_2245) ? 0.0 : max(_2245, 0.0));
    float _2249 = _2226 * _2226;
    float _2253 = ((_2244 * _2244) * (_2249 + (-1.0))) + 1.0;
    float _2262 = (exp2(log2(1.0 - (isnan(1.0) ? _4337 : (isnan(_4337) ? 1.0 : min(_4337, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2263 = 1.0 - _2226;
    float _2273 = (0.5 / (((_2162 * ((_2240 * _2263) + _2226)) + 9.9999999392252902907785028219223e-09) + (((_2162 * _2263) + _2226) * _2240))) * _2240;
    float _4348 = isnan(0.0) ? _2273 : (isnan(_2273) ? 0.0 : max(_2273, 0.0));
    float _2275 = (isnan(1.0) ? _4348 : (isnan(_4348) ? 1.0 : min(_4348, 1.0))) * (_2249 / ((_2253 * _2253) * 3.141590118408203125));
    float _2285 = (((_2262 * cbLight._m0[_2214].x) * _2275) * _2017) + ((((cbLight._m0[_2133].x * _1987) * _2186) * _2200) * _2030);
    float _2286 = (((_2262 * cbLight._m0[_2214].y) * _2275) * _2017) + ((((cbLight._m0[_2133].y * _1988) * _2186) * _2200) * _2030);
    float _2287 = (((_2262 * cbLight._m0[_2214].z) * _2275) * _2017) + ((((cbLight._m0[_2133].z * _1989) * _2186) * _2200) * _2030);
    float _2349;
    float _2351;
    float _2353;
    if (_2070)
    {
        _2349 = _2285;
        _2351 = _2286;
        _2353 = _2287;
    }
    else
    {
        uint _2355 = _1994 + 2u;
        uint _2359 = _1994 + 10u;
        float _2373 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2355].w)) * _799) * 0.949999988079071044921875);
        float _2374 = _2373 * _2373;
        float _2375 = cbLight._m0[_2355].x + _871;
        float _2376 = cbLight._m0[_2355].y + _872;
        float _2377 = cbLight._m0[_2355].z + _873;
        float _2381 = inversesqrt(dot(vec3(_2375, _2376, _2377), vec3(_2375, _2376, _2377)));
        float _2382 = _2381 * _2375;
        float _2383 = _2381 * _2376;
        float _2384 = _2381 * _2377;
        float _2385 = dot(vec3(_796, _797, _798), vec3(cbLight._m0[_2355].xyz));
        float _4359 = isnan(0.0) ? _2385 : (isnan(_2385) ? 0.0 : max(_2385, 0.0));
        float _2388 = isnan(1.0) ? _4359 : (isnan(_4359) ? 1.0 : min(_4359, 1.0));
        float _2389 = dot(vec3(_796, _797, _798), vec3(_2382, _2383, _2384));
        float _4370 = isnan(0.0) ? _2389 : (isnan(_2389) ? 0.0 : max(_2389, 0.0));
        float _2392 = isnan(1.0) ? _4370 : (isnan(_4370) ? 1.0 : min(_4370, 1.0));
        float _2393 = dot(vec3(cbLight._m0[_2355].xyz), vec3(_2382, _2383, _2384));
        float _4381 = isnan(0.0) ? _2393 : (isnan(_2393) ? 0.0 : max(_2393, 0.0));
        float _2397 = _2374 * _2374;
        float _2401 = ((_2392 * _2392) * (_2397 + (-1.0))) + 1.0;
        float _2410 = (exp2(log2(1.0 - (isnan(1.0) ? _4381 : (isnan(_4381) ? 1.0 : min(_4381, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2411 = 1.0 - _2374;
        float _2421 = (0.5 / (((_2162 * ((_2388 * _2411) + _2374)) + 9.9999999392252902907785028219223e-09) + (((_2162 * _2411) + _2374) * _2388))) * _2388;
        float _4392 = isnan(0.0) ? _2421 : (isnan(_2421) ? 0.0 : max(_2421, 0.0));
        float _2423 = (isnan(1.0) ? _4392 : (isnan(_4392) ? 1.0 : min(_4392, 1.0))) * (_2397 / ((_2401 * _2401) * 3.141590118408203125));
        float _2424 = isnan(1.0) ? _2009 : (isnan(_2009) ? 1.0 : min(_2009, 1.0));
        _2349 = (((_2410 * cbLight._m0[_2359].x) * _2423) * _2424) + _2285;
        _2351 = (((_2410 * cbLight._m0[_2359].y) * _2423) * _2424) + _2286;
        _2353 = (((_2410 * cbLight._m0[_2359].z) * _2423) * _2424) + _2287;
    }
    float _2459;
    float _2461;
    float _2463;
    if (_2088)
    {
        _2459 = _2349;
        _2461 = _2351;
        _2463 = _2353;
    }
    else
    {
        uint _2470 = _1994 + 3u;
        uint _2474 = _1994 + 11u;
        float _2488 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2470].w)) * _799) * 0.949999988079071044921875);
        float _2489 = _2488 * _2488;
        float _2490 = cbLight._m0[_2470].x + _871;
        float _2491 = cbLight._m0[_2470].y + _872;
        float _2492 = cbLight._m0[_2470].z + _873;
        float _2496 = inversesqrt(dot(vec3(_2490, _2491, _2492), vec3(_2490, _2491, _2492)));
        float _2497 = _2496 * _2490;
        float _2498 = _2496 * _2491;
        float _2499 = _2496 * _2492;
        float _2500 = dot(vec3(_796, _797, _798), vec3(cbLight._m0[_2470].xyz));
        float _4408 = isnan(0.0) ? _2500 : (isnan(_2500) ? 0.0 : max(_2500, 0.0));
        float _2503 = isnan(1.0) ? _4408 : (isnan(_4408) ? 1.0 : min(_4408, 1.0));
        float _2504 = dot(vec3(_796, _797, _798), vec3(_2497, _2498, _2499));
        float _4419 = isnan(0.0) ? _2504 : (isnan(_2504) ? 0.0 : max(_2504, 0.0));
        float _2507 = isnan(1.0) ? _4419 : (isnan(_4419) ? 1.0 : min(_4419, 1.0));
        float _2508 = dot(vec3(cbLight._m0[_2470].xyz), vec3(_2497, _2498, _2499));
        float _4430 = isnan(0.0) ? _2508 : (isnan(_2508) ? 0.0 : max(_2508, 0.0));
        float _2512 = _2489 * _2489;
        float _2516 = ((_2507 * _2507) * (_2512 + (-1.0))) + 1.0;
        float _2525 = (exp2(log2(1.0 - (isnan(1.0) ? _4430 : (isnan(_4430) ? 1.0 : min(_4430, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2526 = 1.0 - _2489;
        float _2536 = (0.5 / (((_2162 * ((_2503 * _2526) + _2489)) + 9.9999999392252902907785028219223e-09) + (((_2162 * _2526) + _2489) * _2503))) * _2503;
        float _4441 = isnan(0.0) ? _2536 : (isnan(_2536) ? 0.0 : max(_2536, 0.0));
        float _2538 = (isnan(1.0) ? _4441 : (isnan(_4441) ? 1.0 : min(_4441, 1.0))) * (_2512 / ((_2516 * _2516) * 3.141590118408203125));
        float _2539 = isnan(1.0) ? _2010 : (isnan(_2010) ? 1.0 : min(_2010, 1.0));
        _2459 = (((_2525 * cbLight._m0[_2474].x) * _2538) * _2539) + _2349;
        _2461 = (((_2525 * cbLight._m0[_2474].y) * _2538) * _2539) + _2351;
        _2463 = (((_2525 * cbLight._m0[_2474].z) * _2538) * _2539) + _2353;
    }
    float _2673;
    float _2675;
    float _2677;
    float _2679;
    float _2681;
    float _2683;
    if (_1992.y == 0u)
    {
        float _2614 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2615 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2614;
        float _2616 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2614;
        float _2617 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2614;
        uvec4 _2629 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2630 = _2629.x;
        uint _2641 = uint((float(_2629.y) * floor(float(uint(cbSceneParam._m0[85u].y * _880) / _2630))) + floor(float(uint(cbSceneParam._m0[85u].x * _879) / _2630)));
        float _2651 = (log2(_2617 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2652 = isnan(0.0) ? _2651 : (isnan(_2651) ? 0.0 : max(_2651, 0.0));
        uint _2655 = uint(isnan(14.0) ? _2652 : (isnan(_2652) ? 14.0 : min(_2652, 14.0)));
        uvec4 _2660 = texelFetch(g_lightClusterGridBuffer, int(((_2655 << 2u) + (_2641 << 6u)) >> 2u));
        uint _2661 = _2660.x;
        uint _2662 = _2629.z;
        float _2786;
        float _2788;
        float _2790;
        float _2792;
        float _2794;
        float _2796;
        if (((((1u << ((_2662 >> 4u) & 15u)) + 4294967295u) & _2661) == 0u) || ((_2662 & 240u) == 0u))
        {
            _2786 = 0.0;
            _2788 = 0.0;
            _2790 = 0.0;
            _2792 = 0.0;
            _2794 = 0.0;
            _2796 = 0.0;
        }
        else
        {
            float _2787;
            float _2789;
            float _2791;
            float _2793;
            float _2795;
            float _2797;
            float _2930 = 0.0;
            float _2931 = 0.0;
            float _2932 = 0.0;
            float _2933 = 0.0;
            float _2934 = 0.0;
            float _2935 = 0.0;
            uint _2936 = 0u;
            uint _2945;
            bool _2946;
            for (;;)
            {
                _2945 = texelFetch(g_lightClassification, int((((_2655 << 5u) + (_2641 << 9u)) + (_2936 << 2u)) >> 2u)).x;
                _2946 = _2945 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2946)
                {
                    frontier_phi_63_pred = _2935;
                    frontier_phi_63_pred_1 = _2934;
                    frontier_phi_63_pred_2 = _2933;
                    frontier_phi_63_pred_3 = _2932;
                    frontier_phi_63_pred_4 = _2931;
                    frontier_phi_63_pred_5 = _2930;
                }
                else
                {
                    float _3054;
                    float _3055;
                    float _3056;
                    float _3057;
                    float _3058;
                    float _3059;
                    uint _3060;
                    _3054 = _2930;
                    _3055 = _2931;
                    _3056 = _2932;
                    _3057 = _2933;
                    _3058 = _2934;
                    _3059 = _2935;
                    _3060 = _2945;
                    float _2986;
                    float _2987;
                    float _2988;
                    float _2989;
                    float _2990;
                    float _2991;
                    for (;;)
                    {
                        uint _3064 = uint(findLSB(_3060)) + (_2936 << 5u);
                        uint _3061 = (_3060 + 4294967295u) & _3060;
                        uint _3066 = _3064 * 48u;
                        vec4 _3080 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3066)).x, texelFetch(g_PointLightRenderingBuffer, int(_3066 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3066 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3066 + 3u)).x));
                        uint _3086 = (_3064 * 48u) + 4u;
                        vec4 _3099 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3086)).x, texelFetch(g_PointLightRenderingBuffer, int(_3086 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3086 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3086 + 3u)).x));
                        uint _3105 = (_3064 * 48u) + 8u;
                        vec3 _3116 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3105)).x, texelFetch(g_PointLightRenderingBuffer, int(_3105 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3105 + 2u)).x));
                        float _3120 = _3080.x - _2615;
                        float _3121 = _3080.y - _2616;
                        float _3122 = _3080.z - _2617;
                        float _3123 = dot(vec3(_3120, _3121, _3122), vec3(_3120, _3121, _3122));
                        float _3126 = inversesqrt(_3123);
                        float _3127 = _3126 * _3120;
                        float _3128 = _3126 * _3121;
                        float _3129 = _3126 * _3122;
                        float _3130 = dot(vec3(_898, _901, _904), vec3(_3127, _3128, _3129));
                        float _3135 = 1.0 - (_3123 * _3080.w);
                        float _4467 = isnan(0.0) ? _3135 : (isnan(_3135) ? 0.0 : max(_3135, 0.0));
                        float _3136 = isnan(1.0) ? _4467 : (isnan(_4467) ? 1.0 : min(_4467, 1.0));
                        float _3137 = sqrt(_3123) * _3099.w;
                        float _3140 = 1.39999997615814208984375 / (_3137 + 1.39999997615814208984375);
                        float _3141 = _3140 * _3140;
                        float _3144 = ((1.0 - _3141) * _3130) + _3141;
                        float _3147 = _3137 * _3137;
                        float _3151 = ((isnan(0.0) ? _3144 : (isnan(_3144) ? 0.0 : max(_3144, 0.0))) * _3136) / ((_3147 * 0.699999988079071044921875) + 1.0);
                        float _3155 = (-0.0) - _2615;
                        float _3156 = (-0.0) - _2616;
                        float _3157 = (-0.0) - _2617;
                        float _3161 = inversesqrt(dot(vec3(_3155, _3156, _3157), vec3(_3155, _3156, _3157)));
                        float _3162 = _3161 * _3155;
                        float _3163 = _3161 * _3156;
                        float _3164 = _3161 * _3157;
                        float _3172 = exp2(log2(1.0 / ((_3147 * 3.5) + 5.0)) * 0.25);
                        float _3173 = 1.0 - _957;
                        float _3180 = sqrt(1.0 - ((1.0 - (_3173 * _3173)) * (1.0 - (_3172 * _3172))));
                        float _3181 = _3180 * _3180;
                        float _3182 = _3181 * _3181;
                        float _3183 = _3162 + _3127;
                        float _3184 = _3163 + _3128;
                        float _3185 = _3164 + _3129;
                        float _3189 = inversesqrt(dot(vec3(_3183, _3184, _3185), vec3(_3183, _3184, _3185)));
                        float _3193 = dot(vec3(_898, _901, _904), vec3(_3162, _3163, _3164));
                        float _4483 = isnan(0.0) ? _3193 : (isnan(_3193) ? 0.0 : max(_3193, 0.0));
                        float _3196 = isnan(1.0) ? _4483 : (isnan(_4483) ? 1.0 : min(_4483, 1.0));
                        float _3197 = dot(vec3(_898, _901, _904), vec3(_3189 * _3183, _3189 * _3184, _3189 * _3185));
                        float _4494 = isnan(0.0) ? _3197 : (isnan(_3197) ? 0.0 : max(_3197, 0.0));
                        float _3200 = isnan(1.0) ? _4494 : (isnan(_4494) ? 1.0 : min(_4494, 1.0));
                        float _3204 = ((_3200 * _3200) * (_3182 + (-1.0))) + 1.0;
                        float _3205 = _3140 * _3181;
                        float _3206 = _3205 * _3205;
                        float _3209 = ((1.0 - _3206) * _3130) + _3206;
                        float _4505 = isnan(0.0) ? _3209 : (isnan(_3209) ? 0.0 : max(_3209, 0.0));
                        float _3210 = isnan(1.0) ? _4505 : (isnan(_4505) ? 1.0 : min(_4505, 1.0));
                        float _3211 = 1.0 - _3181;
                        float _3221 = (0.5 / (((_3210 * ((_3196 * _3211) + _3181)) + 9.9999999392252902907785028219223e-09) + (((_3210 * _3211) + _3181) * _3196))) * _3210;
                        float _4516 = isnan(0.0) ? _3221 : (isnan(_3221) ? 0.0 : max(_3221, 0.0));
                        float _3232 = (((_3182 * 3.1415927410125732421875) * (isnan(1.0) ? _4516 : (isnan(_4516) ? 1.0 : min(_4516, 1.0)))) / ((_3204 * _3204) * ((_3147 * 2.1991131305694580078125) + 3.141590118408203125))) * _3136;
                        _2989 = (_3151 * _3099.x) + _3057;
                        _2990 = (_3151 * _3099.y) + _3058;
                        _2991 = (_3151 * _3099.z) + _3059;
                        _2986 = (_3232 * _3116.x) + _3054;
                        _2987 = (_3232 * _3116.y) + _3055;
                        _2988 = (_3232 * _3116.z) + _3056;
                        if (_3061 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3054 = _2986;
                            _3055 = _2987;
                            _3056 = _2988;
                            _3057 = _2989;
                            _3058 = _2990;
                            _3059 = _2991;
                            _3060 = _3061;
                        }
                    }
                    frontier_phi_63_pred = _2991;
                    frontier_phi_63_pred_1 = _2990;
                    frontier_phi_63_pred_2 = _2989;
                    frontier_phi_63_pred_3 = _2988;
                    frontier_phi_63_pred_4 = _2987;
                    frontier_phi_63_pred_5 = _2986;
                }
                _2797 = frontier_phi_63_pred;
                _2795 = frontier_phi_63_pred_1;
                _2793 = frontier_phi_63_pred_2;
                _2791 = frontier_phi_63_pred_3;
                _2789 = frontier_phi_63_pred_4;
                _2787 = frontier_phi_63_pred_5;
                uint _2937 = _2936 + 1u;
                if (_2937 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2930 = _2787;
                    _2931 = _2789;
                    _2932 = _2791;
                    _2933 = _2793;
                    _2934 = _2795;
                    _2935 = _2797;
                    _2936 = _2937;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2786 = _2787;
            _2788 = _2789;
            _2790 = _2791;
            _2792 = _2793;
            _2794 = _2795;
            _2796 = _2797;
        }
        uvec4 _2800 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2801 = _2800.z;
        uint _2803 = (_2801 >> 8u) & 15u;
        float _2898;
        float _2900;
        float _2902;
        float _2904;
        float _2906;
        float _2908;
        if (((4294967295u << _2803) & _2661) == 0u)
        {
            _2898 = _2786;
            _2900 = _2788;
            _2902 = _2790;
            _2904 = _2792;
            _2906 = _2794;
            _2908 = _2796;
        }
        else
        {
            float _2923 = inversesqrt(dot(vec3(_2615, _2616, _2617), vec3(_2615, _2616, _2617)));
            float _2924 = _2923 * _2615;
            float _2925 = _2923 * _2616;
            float _2926 = _2923 * _2617;
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2803 < ((_2801 >> 12u) & 15u))
            {
                float _2899;
                float _2901;
                float _2903;
                float _2905;
                float _2907;
                float _2909;
                float _3037 = _2786;
                float _3038 = _2788;
                float _3039 = _2790;
                float _3040 = _2792;
                float _3041 = _2794;
                float _3042 = _2796;
                uint _3043 = _2803;
                uint _3052;
                bool _3053;
                for (;;)
                {
                    _3052 = texelFetch(g_lightClassification, int((((_2655 << 5u) + (_2641 << 9u)) + (_3043 << 2u)) >> 2u)).x;
                    _3053 = _3052 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_3053)
                    {
                        frontier_phi_69_pred = _3042;
                        frontier_phi_69_pred_1 = _3041;
                        frontier_phi_69_pred_2 = _3040;
                        frontier_phi_69_pred_3 = _3039;
                        frontier_phi_69_pred_4 = _3038;
                        frontier_phi_69_pred_5 = _3037;
                    }
                    else
                    {
                        float _3237;
                        float _3238;
                        float _3239;
                        float _3240;
                        float _3241;
                        float _3242;
                        float _3532;
                        float _3533;
                        float _3534;
                        float _3535;
                        float _3536;
                        float _3537;
                        float _3250 = _3037;
                        float _3251 = _3038;
                        float _3252 = _3039;
                        float _3253 = _3040;
                        float _3254 = _3041;
                        float _3255 = _3042;
                        uint _3256 = _3052;
                        uint _3257;
                        vec4 _3282;
                        float _3283;
                        vec4 _3298;
                        vec3 _3310;
                        vec4 _3325;
                        vec4 _3341;
                        float _3388;
                        bool _3389;
                        for (;;)
                        {
                            uint _3267 = ((_3043 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3256));
                            _3257 = (_3256 + 4294967295u) & _3256;
                            uint _3269 = _3267 * 40u;
                            _3282 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3269)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3269 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3269 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3269 + 3u)).x));
                            _3283 = _3282.w;
                            uint _3285 = (_3267 * 40u) + 4u;
                            _3298 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3285)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3285 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3285 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3285 + 3u)).x));
                            uint _3300 = (_3267 * 40u) + 8u;
                            _3310 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3300)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3300 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3300 + 2u)).x));
                            uint _3312 = (_3267 * 40u) + 16u;
                            _3325 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3312)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3312 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3312 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3312 + 3u)).x));
                            uint _3328 = (_3267 * 40u) + 20u;
                            _3341 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3328)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3328 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3328 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3328 + 3u)).x));
                            uint _3344 = (_3267 * 40u) + 24u;
                            vec4 _3357 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3344)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3344 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3344 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3344 + 3u)).x));
                            uint _3363 = (_3267 * 40u) + 28u;
                            vec4 _3376 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3363)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3363 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3363 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3363 + 3u)).x));
                            _3388 = fma(_2617, _3376.z, fma(_2616, _3376.y, _3376.x * _2615)) + _3376.w;
                            _3389 = !((fma(_2617, _3357.z, fma(_2616, _3357.y, _3357.x * _2615)) + _3357.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_3389)
                            {
                                float _3416 = _3282.x - _2615;
                                float _3417 = _3282.y - _2616;
                                float _3418 = _3282.z - _2617;
                                float _3419 = dot(vec3(_3416, _3417, _3418), vec3(_3416, _3417, _3418));
                                float _3422 = inversesqrt(_3419);
                                float _3423 = _3422 * _3416;
                                float _3424 = _3422 * _3417;
                                float _3425 = _3422 * _3418;
                                float _3429 = 1.0 - (_3419 / (_3283 * _3283));
                                float _4527 = isnan(0.0) ? _3429 : (isnan(_3429) ? 0.0 : max(_3429, 0.0));
                                float _3430 = isnan(1.0) ? _4527 : (isnan(_4527) ? 1.0 : min(_4527, 1.0));
                                float _3434 = sqrt(_3419) * _3298.w;
                                float _3436 = 1.39999997615814208984375 / (_3434 + 1.39999997615814208984375);
                                float _3437 = _3436 * _3436;
                                float _3440 = ((1.0 - _3437) * dot(vec3(_3423, _3424, _3425), vec3(_898, _901, _904))) + _3437;
                                float _3443 = _3434 * _3434;
                                float _3447 = (fma(_2617, _3325.z, fma(_2616, _3325.y, _3325.x * _2615)) + _3325.w) / _3388;
                                float _3448 = (fma(_2617, _3341.z, fma(_2616, _3341.y, _3341.x * _2615)) + _3341.w) / _3388;
                                float _3452 = 1.0 - dot(vec2(_3447, _3448), vec2(_3447, _3448));
                                float _4543 = isnan(0.0) ? _3452 : (isnan(_3452) ? 0.0 : max(_3452, 0.0));
                                float _3453 = isnan(1.0) ? _4543 : (isnan(_4543) ? 1.0 : min(_4543, 1.0));
                                float _3454 = _3453 * (((isnan(0.0) ? _3440 : (isnan(_3440) ? 0.0 : max(_3440, 0.0))) * _3430) / ((_3443 * 0.699999988079071044921875) + 1.0));
                                float _3466 = exp2(log2(1.0 / ((_3443 * 3.5) + 5.0)) * 0.25);
                                float _3467 = 1.0 - _957;
                                float _3474 = sqrt(1.0 - ((1.0 - (_3467 * _3467)) * (1.0 - (_3466 * _3466))));
                                float _3475 = _3474 * _3474;
                                float _3476 = _3475 * _3475;
                                float _3477 = _3423 - _2924;
                                float _3478 = _3424 - _2925;
                                float _3479 = _3425 - _2926;
                                float _3483 = inversesqrt(dot(vec3(_3477, _3478, _3479), vec3(_3477, _3478, _3479)));
                                float _3487 = dot(vec3(_898, _901, _904), vec3((-0.0) - _2924, (-0.0) - _2925, (-0.0) - _2926));
                                float _4554 = isnan(0.0) ? _3487 : (isnan(_3487) ? 0.0 : max(_3487, 0.0));
                                float _3490 = isnan(1.0) ? _4554 : (isnan(_4554) ? 1.0 : min(_4554, 1.0));
                                float _3491 = dot(vec3(_898, _901, _904), vec3(_3483 * _3477, _3483 * _3478, _3483 * _3479));
                                float _4565 = isnan(0.0) ? _3491 : (isnan(_3491) ? 0.0 : max(_3491, 0.0));
                                float _3494 = isnan(1.0) ? _4565 : (isnan(_4565) ? 1.0 : min(_4565, 1.0));
                                float _3498 = ((_3494 * _3494) * (_3476 + (-1.0))) + 1.0;
                                float _3499 = _3436 * _3475;
                                float _3500 = _3499 * _3499;
                                float _3506 = ((1.0 - _3500) * dot(vec3(_898, _901, _904), vec3(_3423, _3424, _3425))) + _3500;
                                float _4576 = isnan(0.0) ? _3506 : (isnan(_3506) ? 0.0 : max(_3506, 0.0));
                                float _3507 = isnan(1.0) ? _4576 : (isnan(_4576) ? 1.0 : min(_4576, 1.0));
                                float _3508 = 1.0 - _3475;
                                float _3518 = (0.5 / (((_3507 * ((_3490 * _3508) + _3475)) + 9.9999999392252902907785028219223e-09) + (((_3507 * _3508) + _3475) * _3490))) * _3507;
                                float _4587 = isnan(0.0) ? _3518 : (isnan(_3518) ? 0.0 : max(_3518, 0.0));
                                float _3528 = (_3453 * _3430) * (((_3476 * 3.1415927410125732421875) * (isnan(1.0) ? _4587 : (isnan(_4587) ? 1.0 : min(_4587, 1.0)))) / ((_3498 * _3498) * ((_3443 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_75_pred = _3454 * _3298.z;
                                frontier_phi_75_pred_1 = _3454 * _3298.y;
                                frontier_phi_75_pred_2 = _3454 * _3298.x;
                                frontier_phi_75_pred_3 = _3528 * _3310.z;
                                frontier_phi_75_pred_4 = _3528 * _3310.y;
                                frontier_phi_75_pred_5 = _3528 * _3310.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _3537 = frontier_phi_75_pred;
                            _3536 = frontier_phi_75_pred_1;
                            _3535 = frontier_phi_75_pred_2;
                            _3534 = frontier_phi_75_pred_3;
                            _3533 = frontier_phi_75_pred_4;
                            _3532 = frontier_phi_75_pred_5;
                            _3240 = _3535 + _3253;
                            _3241 = _3536 + _3254;
                            _3242 = _3537 + _3255;
                            _3237 = _3532 + _3250;
                            _3238 = _3533 + _3251;
                            _3239 = _3534 + _3252;
                            if (_3257 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3250 = _3237;
                                _3251 = _3238;
                                _3252 = _3239;
                                _3253 = _3240;
                                _3254 = _3241;
                                _3255 = _3242;
                                _3256 = _3257;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _3242;
                        frontier_phi_69_pred_1 = _3241;
                        frontier_phi_69_pred_2 = _3240;
                        frontier_phi_69_pred_3 = _3239;
                        frontier_phi_69_pred_4 = _3238;
                        frontier_phi_69_pred_5 = _3237;
                    }
                    _2909 = frontier_phi_69_pred;
                    _2907 = frontier_phi_69_pred_1;
                    _2905 = frontier_phi_69_pred_2;
                    _2903 = frontier_phi_69_pred_3;
                    _2901 = frontier_phi_69_pred_4;
                    _2899 = frontier_phi_69_pred_5;
                    uint _3044 = _3043 + 1u;
                    if (_3044 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3037 = _2899;
                        _3038 = _2901;
                        _3039 = _2903;
                        _3040 = _2905;
                        _3041 = _2907;
                        _3042 = _2909;
                        _3043 = _3044;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2909;
                frontier_phi_57_58_ladder_1 = _2907;
                frontier_phi_57_58_ladder_2 = _2905;
                frontier_phi_57_58_ladder_3 = _2903;
                frontier_phi_57_58_ladder_4 = _2901;
                frontier_phi_57_58_ladder_5 = _2899;
            }
            else
            {
                frontier_phi_57_58_ladder = _2796;
                frontier_phi_57_58_ladder_1 = _2794;
                frontier_phi_57_58_ladder_2 = _2792;
                frontier_phi_57_58_ladder_3 = _2790;
                frontier_phi_57_58_ladder_4 = _2788;
                frontier_phi_57_58_ladder_5 = _2786;
            }
            _2898 = frontier_phi_57_58_ladder_5;
            _2900 = frontier_phi_57_58_ladder_4;
            _2902 = frontier_phi_57_58_ladder_3;
            _2904 = frontier_phi_57_58_ladder_2;
            _2906 = frontier_phi_57_58_ladder_1;
            _2908 = frontier_phi_57_58_ladder;
        }
        float _2913 = isnan(1.0) ? _941 : (isnan(_941) ? 1.0 : min(_941, 1.0));
        _2673 = (_2913 * _2904) + _2126;
        _2675 = (_2913 * _2906) + _2128;
        _2677 = (_2913 * _2908) + _2130;
        _2679 = ((_2898 * 0.039999999105930328369140625) * _2913) + _2459;
        _2681 = ((_2900 * 0.039999999105930328369140625) * _2913) + _2461;
        _2683 = ((_2902 * 0.039999999105930328369140625) * _2913) + _2463;
    }
    else
    {
        _2673 = _2126;
        _2675 = _2128;
        _2677 = _2130;
        _2679 = _2459;
        _2681 = _2461;
        _2683 = _2463;
    }
    uint _2689 = _917 + uint(cbMatDynParam._m0[0u].w);
    float _4603 = isnan(0.0) ? _927 : (isnan(_927) ? 0.0 : max(_927, 0.0));
    float _4614 = isnan(0.0) ? _928 : (isnan(_928) ? 0.0 : max(_928, 0.0));
    float _4625 = isnan(0.0) ? _929 : (isnan(_929) ? 0.0 : max(_929, 0.0));
    float _2720 = (((isnan(1.0) ? _4603 : (isnan(_4603) ? 1.0 : min(_4603, 1.0))) * (_2673 + ((isnan(0.0) ? _1667 : (isnan(_1667) ? 0.0 : max(_1667, 0.0))) * _941))) + ((_2679 + ((isnan(0.0) ? _1959 : (isnan(_1959) ? 0.0 : max(_1959, 0.0))) * _1746)) * cbPerFrame._m0[3u].x)) + (((cbMtdParam._m0[16u].x * _562) * _782) * cbInstanceData._m0[_2689].x);
    float _2722 = ((((cbMtdParam._m0[16u].x * _563) * _782) * cbInstanceData._m0[_2689].y) + ((_2681 + ((isnan(0.0) ? _1962 : (isnan(_1962) ? 0.0 : max(_1962, 0.0))) * _1746)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4614 : (isnan(_4614) ? 1.0 : min(_4614, 1.0))) * (_2675 + ((isnan(0.0) ? _1670 : (isnan(_1670) ? 0.0 : max(_1670, 0.0))) * _941)));
    float _2724 = ((((cbMtdParam._m0[16u].x * _564) * _782) * cbInstanceData._m0[_2689].z) + ((_2683 + ((isnan(0.0) ? _1965 : (isnan(_1965) ? 0.0 : max(_1965, 0.0))) * _1746)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4625 : (isnan(_4625) ? 1.0 : min(_4625, 1.0))) * (_2677 + ((isnan(0.0) ? _1673 : (isnan(_1673) ? 0.0 : max(_1673, 0.0))) * _941)));
    uint _2728 = _730 + 6u;
    float _2736 = _879 / cbSceneParam._m0[86u].x;
    float _2737 = _880 / cbSceneParam._m0[86u].y;
    vec4 _2751 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2736, _2737, (log2((isnan(cbSceneParam._m0[77u].w) ? _815 : (isnan(_815) ? cbSceneParam._m0[77u].w : min(_815, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2753 = _2751.x;
    float _2754 = _2751.y;
    float _2755 = _2751.z;
    float _2756 = _2751.w;
    float _2848;
    float _2850;
    float _2852;
    float _2854;
    if (_815 > cbSceneParam._m0[78u].w)
    {
        float _2811 = isnan(_815) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _815 : min(cbSceneParam._m0[80u].w, _815));
        float _2812 = _2811 / _815;
        float _2823 = _2812 * _864;
        float _2824 = _865 * _2812;
        float _2825 = (-0.0) - _2824;
        float _2826 = _2812 * _866;
        float _2828 = (cbSceneParam._m0[77u].w * _2825) / _2811;
        float _2829 = _2828 + cbSceneParam._m0[79u].w;
        float _2830 = cbSceneParam._m0[79u].w - _2824;
        float _2836 = sqrt(((_2823 * _2823) + (_2824 * _2824)) + (_2826 * _2826));
        float _2839 = (1.0 - (cbSceneParam._m0[77u].w / _2811)) * _2836;
        float _2844 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2846 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2999;
        if (abs((_2825 - _2828) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2999 = ((((_2829 > 0.0) ? exp2(_2844 * _2829) : (2.0 - exp2(_2846 * _2829))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2839;
        }
        else
        {
            float _2959 = 1.0 / cbSceneParam._m0[80u].x;
            float _2960 = isnan(_2830) ? _2829 : (isnan(_2829) ? _2830 : max(_2829, _2830));
            float _2961 = isnan(_2830) ? _2829 : (isnan(_2829) ? _2830 : min(_2829, _2830));
            float _2970 = isnan(0.0) ? _2960 : (isnan(_2960) ? 0.0 : min(_2960, 0.0));
            float _2971 = isnan(0.0) ? _2961 : (isnan(_2961) ? 0.0 : min(_2961, 0.0));
            _2999 = ((abs(_2836 / _2825) * cbSceneParam._m0[80u].y) * ((((_2970 - _2971) * 2.0) - ((exp2(_2844 * (isnan(0.0) ? _2960 : (isnan(_2960) ? 0.0 : max(_2960, 0.0)))) - exp2(_2844 * (isnan(0.0) ? _2961 : (isnan(_2961) ? 0.0 : max(_2961, 0.0))))) * _2959)) - ((exp2(_2846 * _2970) - exp2(_2846 * _2971)) * _2959))) + (_2839 * cbSceneParam._m0[80u].z);
        }
        vec4 _3001 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2736, _2737, 1.0), 0.0);
        float _3010 = exp2((_2999 * (-1.44269502162933349609375)) * (1.0 - _3001.w));
        float _3011 = log2(_3010);
        float _3027 = log2(_2756);
        _2848 = (exp2(_3027 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3011 * cbSceneParam._m0[78u].x)) * _3001.x) / cbSceneParam._m0[78u].x)) + _2753;
        _2850 = (exp2(_3027 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3011 * cbSceneParam._m0[78u].y)) * _3001.y) / cbSceneParam._m0[78u].y)) + _2754;
        _2852 = (exp2(_3027 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3011 * cbSceneParam._m0[78u].z)) * _3001.z) / cbSceneParam._m0[78u].z)) + _2755;
        _2854 = _3010 * _2756;
    }
    else
    {
        _2848 = _2753;
        _2850 = _2754;
        _2852 = _2755;
        _2854 = _2756;
    }
    float _2866 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2867 = _2866 == 3.0;
    float _2868 = log2(_2854);
    float _2875 = exp2(_2868 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _2720 : (isnan(_2720) ? 0.0 : max(_2720, 0.0)));
    float _2876 = exp2(_2868 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _2722 : (isnan(_2722) ? 0.0 : max(_2722, 0.0)));
    float _2877 = exp2(_2868 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _2724 : (isnan(_2724) ? 0.0 : max(_2724, 0.0)));
    float _2886 = (_2866 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2886 * (_2867 ? _2875 : (_2875 + (cbSceneParam._m0[72u].w * _2848)));
    SV_Target.y = _2886 * (_2867 ? _2876 : (_2876 + (cbSceneParam._m0[72u].w * _2850)));
    SV_Target.z = _2886 * (_2867 ? _2877 : (_2877 + (cbSceneParam._m0[72u].w * _2852)));
    SV_Target.w = cbInstanceData._m0[_2728].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2728].w;
}


