#version 460

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[12];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 5, std140) uniform cbObjMatrixUBO
{
    vec4 _m0[6];
} cbObjMatrix;

layout(set = 0, binding = 10, std140) uniform cbInstanceIdxParamUBO
{
    vec4 _m0[1];
} cbInstanceIdxParam;

layout(set = 0, binding = 11, std140) uniform cbTexScrollUBO
{
    vec4 _m0[4];
} cbTexScroll;

layout(set = 0, binding = 26) uniform usamplerBuffer g_forceParam;
layout(set = 0, binding = 25) uniform usamplerBuffer g_InstanceIndexBuffer;

layout(location = 0) in vec3 POSITION;
layout(location = 1) in uvec4 NORMAL;
layout(location = 2) in uvec4 TANGENT;
layout(location = 3) in uvec4 BLENDINDICES;
layout(location = 4) in vec4 BLENDWEIGHT;
layout(location = 5) in vec4 COLOR_1;
layout(location = 6) in ivec2 TEXCOORD;
layout(location = 7) in vec4 TEXCOORD_1;
layout(location = 1) out vec4 NORMAL_1;
layout(location = 2) out vec4 TANGENT_1;
layout(location = 3) out float TEXCOORD_2;
layout(location = 3, component = 1) out float TEXCOORD_1_1;
layout(location = 4) out vec4 TEXCOORD_3;
layout(location = 3, component = 2) out vec2 TEXCOORD_7;
layout(location = 5) out float TEXCOORD_11;

uint _925;
uint _1048;

void main()
{
    uint _82 = uint(gl_InstanceIndex) - uint(gl_BaseInstance);
    gl_Position.x = 0.0;
    gl_Position.y = 0.0;
    gl_Position.z = 0.0;
    gl_Position.w = 0.0;
    NORMAL_1.x = 0.0;
    NORMAL_1.y = 0.0;
    NORMAL_1.z = 0.0;
    NORMAL_1.w = 0.0;
    TANGENT_1.x = 0.0;
    TANGENT_1.y = 0.0;
    TANGENT_1.z = 0.0;
    TANGENT_1.w = 0.0;
    TEXCOORD_2 = 0.0;
    TEXCOORD_1_1 = 0.0;
    TEXCOORD_3.x = 0.0;
    TEXCOORD_3.y = 0.0;
    TEXCOORD_3.z = 0.0;
    TEXCOORD_3.w = 0.0;
    TEXCOORD_7.x = 0.0;
    TEXCOORD_7.y = 0.0;
    TEXCOORD_11 = 0.0;
    float _184 = (float(NORMAL.x) + (-127.0)) * 0.0078740157186985015869140625;
    float _186 = (float(NORMAL.y) + (-127.0)) * 0.0078740157186985015869140625;
    float _187 = (float(NORMAL.z) + (-127.0)) * 0.0078740157186985015869140625;
    float _196 = (float(TANGENT.x) + (-127.0)) * 0.0078740157186985015869140625;
    float _197 = (float(TANGENT.y) + (-127.0)) * 0.0078740157186985015869140625;
    float _198 = (float(TANGENT.z) + (-127.0)) * 0.0078740157186985015869140625;
    uint _204 = _82 * 13u;
    uvec4 _210 = floatBitsToUint(cbInstanceData._m0[_204 + 7u]);
    uint _213 = min(_210.y, 8u);
    bool _216 = _213 == 0u;
    precise float _217 = POSITION.x + 0.0;
    precise float _218 = POSITION.y + 0.0;
    precise float _219 = POSITION.z + 0.0;
    uint _224 = floatBitsToUint(cbInstanceIdxParam._m0[0u]).x + _82;
    uvec4 _226 = texelFetch(g_InstanceIndexBuffer, int(_224));
    uint _227 = _226.x;
    precise float _228 = dot(vec4(1.0), vec4(BLENDWEIGHT.x, BLENDWEIGHT.y, BLENDWEIGHT.z, BLENDWEIGHT.w));
    float _232 = isnan(_228) ? 0.001000000047497451305389404296875 : (isnan(0.001000000047497451305389404296875) ? _228 : max(0.001000000047497451305389404296875, _228));
    precise float _234 = BLENDWEIGHT.x / _232;
    precise float _235 = BLENDWEIGHT.y / _232;
    precise float _236 = BLENDWEIGHT.z / _232;
    precise float _237 = BLENDWEIGHT.w / _232;
    uvec4 _243 = floatBitsToUint(cbInstanceData._m0[(_227 * 13u) + 4u]);
    uint _244 = _243.x;
    uint _246 = (_244 + uint(float(BLENDINDICES.x))) * 3u;
    uint _253 = _246 + 1u;
    uint _260 = _246 + 2u;
    precise float _267 = _234 * cbObjMatrix._m0[_246].x;
    precise float _268 = _234 * cbObjMatrix._m0[_253].x;
    precise float _269 = _234 * cbObjMatrix._m0[_260].x;
    precise float _270 = _234 * cbObjMatrix._m0[_246].y;
    precise float _271 = _234 * cbObjMatrix._m0[_253].y;
    precise float _272 = _234 * cbObjMatrix._m0[_260].y;
    precise float _273 = _234 * cbObjMatrix._m0[_246].z;
    precise float _274 = _234 * cbObjMatrix._m0[_253].z;
    precise float _275 = _234 * cbObjMatrix._m0[_260].z;
    precise float _276 = _234 * cbObjMatrix._m0[_246].w;
    precise float _277 = _234 * cbObjMatrix._m0[_253].w;
    precise float _278 = _234 * cbObjMatrix._m0[_260].w;
    uint _281 = (_244 + uint(float(BLENDINDICES.y))) * 3u;
    uint _288 = _281 + 1u;
    uint _295 = _281 + 2u;
    precise float _302 = _235 * cbObjMatrix._m0[_281].x;
    precise float _303 = _235 * cbObjMatrix._m0[_288].x;
    precise float _304 = _235 * cbObjMatrix._m0[_295].x;
    precise float _305 = _235 * cbObjMatrix._m0[_281].y;
    precise float _306 = _235 * cbObjMatrix._m0[_288].y;
    precise float _307 = _235 * cbObjMatrix._m0[_295].y;
    precise float _308 = _235 * cbObjMatrix._m0[_281].z;
    precise float _309 = _235 * cbObjMatrix._m0[_288].z;
    precise float _310 = _235 * cbObjMatrix._m0[_295].z;
    precise float _311 = _235 * cbObjMatrix._m0[_281].w;
    precise float _312 = _235 * cbObjMatrix._m0[_288].w;
    precise float _313 = _235 * cbObjMatrix._m0[_295].w;
    precise float _314 = _267 + _302;
    precise float _315 = _268 + _303;
    precise float _316 = _269 + _304;
    precise float _317 = _270 + _305;
    precise float _318 = _271 + _306;
    precise float _319 = _272 + _307;
    precise float _320 = _273 + _308;
    precise float _321 = _274 + _309;
    precise float _322 = _275 + _310;
    precise float _323 = _276 + _311;
    precise float _324 = _277 + _312;
    precise float _325 = _278 + _313;
    uint _328 = (_244 + uint(float(BLENDINDICES.z))) * 3u;
    uint _335 = _328 + 1u;
    uint _342 = _328 + 2u;
    precise float _349 = _236 * cbObjMatrix._m0[_328].x;
    precise float _350 = _236 * cbObjMatrix._m0[_335].x;
    precise float _351 = _236 * cbObjMatrix._m0[_342].x;
    precise float _352 = _236 * cbObjMatrix._m0[_328].y;
    precise float _353 = _236 * cbObjMatrix._m0[_335].y;
    precise float _354 = _236 * cbObjMatrix._m0[_342].y;
    precise float _355 = _236 * cbObjMatrix._m0[_328].z;
    precise float _356 = _236 * cbObjMatrix._m0[_335].z;
    precise float _357 = _236 * cbObjMatrix._m0[_342].z;
    precise float _358 = _236 * cbObjMatrix._m0[_328].w;
    precise float _359 = _236 * cbObjMatrix._m0[_335].w;
    precise float _360 = _236 * cbObjMatrix._m0[_342].w;
    precise float _361 = _314 + _349;
    precise float _362 = _315 + _350;
    precise float _363 = _316 + _351;
    precise float _364 = _317 + _352;
    precise float _365 = _318 + _353;
    precise float _366 = _319 + _354;
    precise float _367 = _320 + _355;
    precise float _368 = _321 + _356;
    precise float _369 = _322 + _357;
    precise float _370 = _323 + _358;
    precise float _371 = _324 + _359;
    precise float _372 = _325 + _360;
    uint _375 = (_244 + uint(float(BLENDINDICES.w))) * 3u;
    uint _382 = _375 + 1u;
    uint _389 = _375 + 2u;
    precise float _396 = _237 * cbObjMatrix._m0[_375].x;
    precise float _397 = _237 * cbObjMatrix._m0[_382].x;
    precise float _398 = _237 * cbObjMatrix._m0[_389].x;
    precise float _399 = _237 * cbObjMatrix._m0[_375].y;
    precise float _400 = _237 * cbObjMatrix._m0[_382].y;
    precise float _401 = _237 * cbObjMatrix._m0[_389].y;
    precise float _402 = _237 * cbObjMatrix._m0[_375].z;
    precise float _403 = _237 * cbObjMatrix._m0[_382].z;
    precise float _404 = _237 * cbObjMatrix._m0[_389].z;
    precise float _405 = _237 * cbObjMatrix._m0[_375].w;
    precise float _406 = _237 * cbObjMatrix._m0[_382].w;
    precise float _407 = _237 * cbObjMatrix._m0[_389].w;
    precise float _408 = _361 + _396;
    precise float _409 = _362 + _397;
    precise float _410 = _363 + _398;
    precise float _411 = _364 + _399;
    precise float _412 = _365 + _400;
    precise float _413 = _366 + _401;
    precise float _414 = _367 + _402;
    precise float _415 = _368 + _403;
    precise float _416 = _369 + _404;
    precise float _417 = _370 + _405;
    precise float _418 = _371 + _406;
    precise float _419 = _372 + _407;
    precise float _420 = _217 * _408;
    precise float _421 = _218 * _411;
    precise float _422 = _421 + _420;
    precise float _423 = _219 * _414;
    precise float _424 = _423 + _422;
    precise float _425 = 1.0 * _417;
    precise float _426 = _425 + _424;
    precise float _427 = _217 * _409;
    precise float _428 = _218 * _412;
    precise float _429 = _428 + _427;
    precise float _430 = _219 * _415;
    precise float _431 = _430 + _429;
    precise float _432 = 1.0 * _418;
    precise float _433 = _432 + _431;
    precise float _434 = _217 * _410;
    precise float _435 = _218 * _413;
    precise float _436 = _435 + _434;
    precise float _437 = _219 * _416;
    precise float _438 = _437 + _436;
    precise float _439 = 1.0 * _419;
    precise float _440 = _439 + _438;
    float _446 = cbSceneParam._m0[3u].x - _426;
    float _447 = cbSceneParam._m0[3u].y - _433;
    float _448 = cbSceneParam._m0[3u].z - _440;
    uint _480 = _204 + 1u;
    uint _487 = _204 + 2u;
    precise float _494 = TEXCOORD_1.x * cbInstanceData._m0[_204].x;
    precise float _495 = TEXCOORD_1.y * cbInstanceData._m0[_204].y;
    precise float _496 = _495 + _494;
    precise float _497 = TEXCOORD_1.z * cbInstanceData._m0[_204].z;
    precise float _498 = _497 + _496;
    precise float _499 = 1.0 * cbInstanceData._m0[_204].w;
    precise float _500 = _499 + _498;
    precise float _501 = TEXCOORD_1.x * cbInstanceData._m0[_480].x;
    precise float _502 = TEXCOORD_1.y * cbInstanceData._m0[_480].y;
    precise float _503 = _502 + _501;
    precise float _504 = TEXCOORD_1.z * cbInstanceData._m0[_480].z;
    precise float _505 = _504 + _503;
    precise float _506 = 1.0 * cbInstanceData._m0[_480].w;
    precise float _507 = _506 + _505;
    precise float _508 = TEXCOORD_1.x * cbInstanceData._m0[_487].x;
    precise float _509 = TEXCOORD_1.y * cbInstanceData._m0[_487].y;
    precise float _510 = _509 + _508;
    precise float _511 = TEXCOORD_1.z * cbInstanceData._m0[_487].z;
    precise float _512 = _511 + _510;
    precise float _513 = 1.0 * cbInstanceData._m0[_487].w;
    precise float _514 = _513 + _512;
    precise float _520 = _426 - _500;
    precise float _521 = _433 - _507;
    precise float _522 = _440 - _514;
    precise float _523 = _520 * _520;
    precise float _524 = _521 * _521;
    precise float _525 = _523 + _524;
    precise float _526 = _522 * _522;
    precise float _527 = _525 + _526;
    precise float _529 = cbMtdParam._m0[10u].z * sqrt(_527);
    precise float _534 = cbInstanceData._m0[_204].x * 0.0;
    precise float _535 = 0.0 * cbInstanceData._m0[_204].y;
    precise float _536 = _535 + _534;
    precise float _537 = 0.0 * cbInstanceData._m0[_204].z;
    precise float _538 = _537 + _536;
    precise float _539 = 1.0 * cbInstanceData._m0[_204].w;
    precise float _540 = _539 + _538;
    precise float _541 = cbInstanceData._m0[_480].x * 0.0;
    precise float _542 = 0.0 * cbInstanceData._m0[_480].y;
    precise float _543 = _542 + _541;
    precise float _544 = 0.0 * cbInstanceData._m0[_480].z;
    precise float _545 = _544 + _543;
    precise float _546 = 1.0 * cbInstanceData._m0[_480].w;
    precise float _547 = _546 + _545;
    precise float _548 = cbInstanceData._m0[_487].x * 0.0;
    precise float _549 = 0.0 * cbInstanceData._m0[_487].y;
    precise float _550 = _549 + _548;
    precise float _551 = 0.0 * cbInstanceData._m0[_487].z;
    precise float _552 = _551 + _550;
    precise float _553 = 1.0 * cbInstanceData._m0[_487].w;
    precise float _554 = _553 + _552;
    precise float _557 = _426 * _426;
    precise float _558 = _433 * _433;
    precise float _559 = _557 + _558;
    precise float _560 = _440 * _440;
    precise float _561 = _559 + _560;
    precise float _563 = cbMtdParam._m0[11u].x * sqrt(_561);
    precise float _564 = cbPerFrame._m0[22u].x + _563;
    uint _565 = _210.w;
    float _566;
    float _568;
    float _570;
    if (_216)
    {
        _566 = 0.0;
        _568 = 0.0;
        _570 = 0.0;
    }
    else
    {
        uint _690 = _210.z;
        precise float _567;
        precise float _569;
        precise float _571;
        float _1118;
        float _1120;
        float _1122;
        float _857 = 0.0;
        float _858 = 0.0;
        float _859 = 0.0;
        uint _860 = _690;
        uint _862 = 0u;
        float _898;
        float _917;
        vec4 _930;
        float _931;
        float _932;
        float _946;
        float _947;
        float _948;
        float _965;
        float _966;
        float _967;
        float _968;
        bool _969;
        bool _970;
        bool _971;
        precise float _972;
        precise float _973;
        precise float _974;
        float _975;
        float _976;
        float _977;
        precise float _978;
        bool _981;
        for (;;)
        {
            uint _864 = _860 & 255u;
            uint _866 = _864 * 24u;
            uvec3 _876 = uvec3(texelFetch(g_forceParam, int(_866)).x, texelFetch(g_forceParam, int(_866 + 1u)).x, texelFetch(g_forceParam, int(_866 + 2u)).x);
            uint _881 = (_864 * 24u) + 4u;
            vec4 _894 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_881)).x, texelFetch(g_forceParam, int(_881 + 1u)).x, texelFetch(g_forceParam, int(_881 + 2u)).x, texelFetch(g_forceParam, int(_881 + 3u)).x));
            _898 = _894.w;
            uint _900 = (_864 * 24u) + 8u;
            vec4 _913 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_900)).x, texelFetch(g_forceParam, int(_900 + 1u)).x, texelFetch(g_forceParam, int(_900 + 2u)).x, texelFetch(g_forceParam, int(_900 + 3u)).x));
            _917 = _913.w;
            uint _919 = (_864 * 24u) + 12u;
            _930 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_919)).x, texelFetch(g_forceParam, int(_919 + 1u)).x, _925, texelFetch(g_forceParam, int(_919 + 3u)).x));
            _931 = _930.x;
            _932 = _930.w;
            uint _935 = (_864 * 24u) + 16u;
            vec3 _945 = uintBitsToFloat(uvec3(texelFetch(g_forceParam, int(_935)).x, texelFetch(g_forceParam, int(_935 + 1u)).x, texelFetch(g_forceParam, int(_935 + 2u)).x));
            _946 = _945.x;
            _947 = _945.y;
            _948 = _945.z;
            uint _951 = (_864 * 24u) + 20u;
            vec4 _964 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_951)).x, texelFetch(g_forceParam, int(_951 + 1u)).x, texelFetch(g_forceParam, int(_951 + 2u)).x, texelFetch(g_forceParam, int(_951 + 3u)).x));
            _965 = _964.x;
            _966 = _964.y;
            _967 = _964.z;
            _968 = _964.w;
            _969 = _876.x == 1u;
            _970 = _876.y == 1u;
            _971 = _876.z == 1u;
            _972 = _540 - _894.x;
            _973 = _547 - _894.y;
            _974 = _554 - _894.z;
            _975 = _969 ? _913.x : _972;
            _976 = _969 ? _913.y : _973;
            _977 = _969 ? _913.z : _974;
            _978 = dot(vec3(_975, _976, _977), vec3(_975, _976, _977));
            _981 = _978 > 0.0;
            float frontier_phi_8_pred;
            float frontier_phi_8_pred_1;
            float frontier_phi_8_pred_2;
            if (_981)
            {
                precise float _1104 = _972 * _972;
                precise float _1105 = _973 * _973;
                precise float _1106 = _1104 + _1105;
                precise float _1107 = _974 * _974;
                precise float _1108 = _1107 + _1106;
                float _1109 = sqrt(_1108);
                float _1110 = inversesqrt(_978);
                precise float _1111 = _975 * _1110;
                precise float _1112 = _976 * _1110;
                precise float _1113 = _977 * _1110;
                precise float _1115 = _1109 / (isnan(0.001000000047497451305389404296875) ? _930.y : (isnan(_930.y) ? 0.001000000047497451305389404296875 : max(_930.y, 0.001000000047497451305389404296875)));
                precise float _1116 = 1.0 - _1115;
                float _1446 = isnan(0.0) ? _1116 : (isnan(_1116) ? 0.0 : max(_1116, 0.0));
                float _1117 = isnan(1.0) ? _1446 : (isnan(_1446) ? 1.0 : min(_1446, 1.0));
                float _1167;
                if (_971)
                {
                    float _1154 = inversesqrt(dot(vec3(_972, _973, _974), vec3(_972, _973, _974)));
                    precise float _1155 = _972 * _1154;
                    precise float _1156 = _973 * _1154;
                    precise float _1157 = _974 * _1154;
                    precise float _1161 = dot(vec3(_1111, _1112, _1113), vec3(_1155, _1156, _1157)) * 0.800000011920928955078125;
                    precise float _1163 = _1161 + 0.20000000298023223876953125;
                    float _1457 = isnan(0.0) ? _1163 : (isnan(_1163) ? 0.0 : max(_1163, 0.0));
                    precise float _1166 = _1117 * (isnan(1.0) ? _1457 : (isnan(_1457) ? 1.0 : min(_1457, 1.0)));
                    _1167 = _1166;
                }
                else
                {
                    _1167 = _1117;
                }
                float frontier_phi_8_pred_12_ladder;
                float frontier_phi_8_pred_12_ladder_1;
                float frontier_phi_8_pred_12_ladder_2;
                if (_1167 > 0.0)
                {
                    bool _1186 = _969 && (!_971);
                    precise float _1188 = _1109 * (-4.0);
                    precise float _1192 = 6.283184051513671875 / (isnan(0.001000000047497451305389404296875) ? _931 : (isnan(_931) ? 0.001000000047497451305389404296875 : max(_931, 0.001000000047497451305389404296875)));
                    precise float _1194 = dot(vec2(_1111, _1113), vec2(_972, _974));
                    precise float _1197 = _1192 * _1194;
                    precise float _1198 = float(_1186) * _1197;
                    precise float _1199 = _564 * _1192;
                    precise float _1200 = _1199 - _1198;
                    precise float _1201 = (_1186 ? 0.0 : _1188) + _1200;
                    precise float _1203 = _917 * sin(_1201);
                    precise float _1204 = _1112 * 0.0;
                    precise float _1205 = _1204 - _1113;
                    precise float _1206 = _1113 * 0.0;
                    precise float _1207 = _1111 * 0.0;
                    precise float _1208 = _1206 - _1207;
                    precise float _1209 = _1111 - _1204;
                    precise float _1210 = _932 * _1203;
                    float _1211 = _969 ? _1210 : 0.0;
                    float _1280;
                    if (_970)
                    {
                        precise float _1240 = _946 * 2.0;
                        precise float _1242 = _966 + _967;
                        precise float _1243 = _968 + _1242;
                        precise float _1245 = 6.283184051513671875 / (isnan(0.001000000047497451305389404296875) ? _946 : (isnan(_946) ? 0.001000000047497451305389404296875 : max(_946, 0.001000000047497451305389404296875)));
                        precise float _1246 = _965 * _1245;
                        precise float _1247 = (-0.0) - _1111;
                        precise float _1252 = dot(vec2(_1113, _1247), vec2(_972, _974)) / _1240;
                        precise float _1253 = (-0.0) - _1252;
                        float _1256 = fract(abs(_1252));
                        precise float _1257 = (-0.0) - _1256;
                        precise float _1259 = _1240 * ((_1252 >= _1253) ? _1256 : _1257);
                        precise float _1260 = _1259 * 6.283184051513671875;
                        precise float _1261 = _1260 / _1240;
                        precise float _1263 = (isnan(5.0) ? _946 : (isnan(_946) ? 5.0 : min(_946, 5.0))) * sin(_1261);
                        precise float _1264 = _1194 + _1263;
                        precise float _1265 = _946 * 0.25;
                        precise float _1267 = _564 * _965;
                        precise float _1268 = _1267 - _1265;
                        precise float _1269 = _1268 - _1264;
                        precise float _1270 = _965 * _1243;
                        precise float _1272 = _1269 / (isnan(0.001000000047497451305389404296875) ? _1270 : (isnan(_1270) ? 0.001000000047497451305389404296875 : max(_1270, 0.001000000047497451305389404296875)));
                        float _1273 = fract(_1272);
                        precise float _1275 = 1.0 - _1273;
                        float _1276 = (_1272 < 0.0) ? _1275 : _1273;
                        precise float _1277 = _1242 / _1243;
                        precise float _1278 = _966 / _1243;
                        float _1356;
                        if (_1276 < _1278)
                        {
                            precise float _1352 = _1276 / _1278;
                            _1356 = _1352;
                        }
                        else
                        {
                            float frontier_phi_27_24_ladder;
                            if (_1276 < _1277)
                            {
                                precise float _1366 = _1276 - _1278;
                                precise float _1367 = _1277 - _1278;
                                precise float _1368 = _1366 / _1367;
                                precise float _1357 = 1.0 - _1368;
                                frontier_phi_27_24_ladder = _1357;
                            }
                            else
                            {
                                frontier_phi_27_24_ladder = 0.0;
                            }
                            _1356 = frontier_phi_27_24_ladder;
                        }
                        precise float _1358 = _948 * _1356;
                        precise float _1359 = _1245 * _1194;
                        precise float _1360 = _564 * _1246;
                        precise float _1361 = _1360 - _1359;
                        precise float _1363 = _947 + sin(_1361);
                        precise float _1365 = _1358 * abs(_1363);
                        precise float _1281 = _1365 + 0.0;
                        _1280 = _1281;
                    }
                    else
                    {
                        _1280 = 0.0;
                    }
                    precise float _1282 = _898 + _1203;
                    precise float _1283 = _1282 + _1280;
                    precise float _1284 = _1111 * _1283;
                    precise float _1285 = _1112 * _1283;
                    precise float _1286 = _1113 * _1283;
                    precise float _1287 = _1205 * _1211;
                    precise float _1288 = _1208 * _1211;
                    precise float _1289 = _1209 * _1211;
                    precise float _1290 = _1287 + _1284;
                    precise float _1291 = _1288 + _1285;
                    precise float _1292 = _1289 + _1286;
                    precise float _1293 = _1167 * _1290;
                    precise float _1294 = _1167 * _1291;
                    precise float _1295 = _1167 * _1292;
                    precise float _1119 = _1293 * 0.0500000007450580596923828125;
                    precise float _1121 = _1294 * 0.0500000007450580596923828125;
                    precise float _1123 = _1295 * 0.0500000007450580596923828125;
                    frontier_phi_8_pred_12_ladder = _1119;
                    frontier_phi_8_pred_12_ladder_1 = _1121;
                    frontier_phi_8_pred_12_ladder_2 = _1123;
                }
                else
                {
                    frontier_phi_8_pred_12_ladder = 0.0;
                    frontier_phi_8_pred_12_ladder_1 = 0.0;
                    frontier_phi_8_pred_12_ladder_2 = 0.0;
                }
                frontier_phi_8_pred = frontier_phi_8_pred_12_ladder;
                frontier_phi_8_pred_1 = frontier_phi_8_pred_12_ladder_1;
                frontier_phi_8_pred_2 = frontier_phi_8_pred_12_ladder_2;
            }
            else
            {
                frontier_phi_8_pred = 0.0;
                frontier_phi_8_pred_1 = 0.0;
                frontier_phi_8_pred_2 = 0.0;
            }
            _1118 = frontier_phi_8_pred;
            _1120 = frontier_phi_8_pred_1;
            _1122 = frontier_phi_8_pred_2;
            _567 = _857 + _1118;
            _569 = _858 + _1120;
            _571 = _859 + _1122;
            uint _863 = _862 + 1u;
            if (_863 == _213)
            {
                break;
            }
            else
            {
                _857 = _567;
                _858 = _569;
                _859 = _571;
                _860 = (_862 != 3u) ? (_860 >> 8u) : _565;
                _862 = _863;
                continue;
            }
        }
        _566 = _567;
        _568 = _569;
        _570 = _571;
    }
    precise float _572 = _566 * _566;
    precise float _573 = _568 * _568;
    precise float _574 = _572 + _573;
    precise float _575 = _570 * _570;
    precise float _576 = _574 + _575;
    float _577 = sqrt(_576);
    bool _578 = _577 < 0.00011000000085914507508277893066406;
    float _583 = inversesqrt(dot(vec3(cbInstanceData._m0[_204].x, cbInstanceData._m0[_480].x, cbInstanceData._m0[_487].x), vec3(cbInstanceData._m0[_204].x, cbInstanceData._m0[_480].x, cbInstanceData._m0[_487].x)));
    precise float _584 = cbInstanceData._m0[_204].x * _583;
    precise float _585 = cbInstanceData._m0[_480].x * _583;
    precise float _586 = cbInstanceData._m0[_487].x * _583;
    float _590 = inversesqrt(dot(vec3(cbInstanceData._m0[_204].y, cbInstanceData._m0[_480].y, cbInstanceData._m0[_487].y), vec3(cbInstanceData._m0[_204].y, cbInstanceData._m0[_480].y, cbInstanceData._m0[_487].y)));
    precise float _591 = cbInstanceData._m0[_204].y * _590;
    precise float _592 = cbInstanceData._m0[_480].y * _590;
    precise float _593 = cbInstanceData._m0[_487].y * _590;
    float _597 = inversesqrt(dot(vec3(cbInstanceData._m0[_204].z, cbInstanceData._m0[_480].z, cbInstanceData._m0[_487].z), vec3(cbInstanceData._m0[_204].z, cbInstanceData._m0[_480].z, cbInstanceData._m0[_487].z)));
    precise float _598 = cbInstanceData._m0[_204].z * _597;
    precise float _599 = cbInstanceData._m0[_480].z * _597;
    precise float _600 = cbInstanceData._m0[_487].z * _597;
    precise float _601 = _584 * 0.0;
    precise float _602 = 1.0 * _591;
    precise float _603 = _602 + _601;
    precise float _604 = 0.0 * _598;
    precise float _605 = _604 + _603;
    precise float _606 = _585 * 0.0;
    precise float _607 = 1.0 * _592;
    precise float _608 = _607 + _606;
    precise float _609 = 0.0 * _599;
    precise float _610 = _609 + _608;
    precise float _611 = _586 * 0.0;
    precise float _612 = 1.0 * _593;
    precise float _613 = _612 + _611;
    precise float _614 = 0.0 * _600;
    precise float _615 = _614 + _613;
    float _619 = inversesqrt(dot(vec3(_566, _568, _570), vec3(_566, _568, _570)));
    precise float _620 = _566 * _619;
    precise float _621 = _568 * _619;
    precise float _622 = _570 * _619;
    precise float _623 = _610 * _622;
    precise float _624 = _615 * _621;
    precise float _625 = _623 - _624;
    precise float _626 = _615 * _620;
    precise float _627 = _605 * _622;
    precise float _628 = _626 - _627;
    precise float _629 = _605 * _621;
    precise float _630 = _610 * _620;
    precise float _631 = _629 - _630;
    float _635 = inversesqrt(dot(vec3(_625, _628, _631), vec3(_625, _628, _631)));
    precise float _636 = _635 * _625;
    precise float _637 = _635 * _628;
    precise float _638 = _635 * _631;
    precise float _639 = _577 + 1.0;
    precise float _641 = cbMtdParam._m0[10u].w * log2(_639);
    precise float _642 = _426 - _540;
    precise float _643 = _433 - _547;
    precise float _644 = _440 - _554;
    precise float _645 = dot(vec3(_636, _637, _638), vec3(_642, _643, _644));
    precise float _648 = _636 * _645;
    precise float _649 = _637 * _645;
    precise float _650 = _638 * _645;
    precise float _651 = _540 + _648;
    precise float _652 = _547 + _649;
    precise float _653 = _554 + _650;
    precise float _654 = _426 - _651;
    precise float _655 = _433 - _652;
    precise float _656 = _440 - _653;
    precise float _657 = _637 * _656;
    precise float _658 = _638 * _655;
    precise float _659 = _657 - _658;
    precise float _660 = _638 * _654;
    precise float _661 = _636 * _656;
    precise float _662 = _660 - _661;
    precise float _663 = _636 * _655;
    precise float _664 = _637 * _654;
    precise float _665 = _663 - _664;
    float _666 = sin(_641);
    float _667 = cos(_641);
    precise float _668 = _654 * _667;
    precise float _669 = _655 * _667;
    precise float _670 = _656 * _667;
    precise float _671 = _666 * _659;
    precise float _672 = _666 * _662;
    precise float _673 = _666 * _665;
    precise float _674 = _668 + _671;
    precise float _675 = _669 + _672;
    precise float _676 = _673 + _670;
    precise float _677 = _651 + _674;
    precise float _678 = _652 + _675;
    precise float _679 = _653 + _676;
    precise float _680 = _677 - _426;
    precise float _681 = _678 - _433;
    precise float _682 = _679 - _440;
    float _683 = _578 ? 0.0 : _680;
    float _684 = _578 ? 0.0 : _681;
    float _685 = _578 ? 0.0 : _682;
    precise float _686 = _426 + _683;
    precise float _687 = _433 + _684;
    precise float _688 = _440 + _685;
    precise float _689 = cbPerFrame._m0[22u].x + _529;
    float _691;
    float _693;
    float _695;
    if (_216)
    {
        _691 = 0.0;
        _693 = 0.0;
        _695 = 0.0;
    }
    else
    {
        uint _856 = _210.z;
        precise float _692;
        precise float _694;
        precise float _696;
        float _1142;
        float _1144;
        float _1146;
        float _982 = 0.0;
        float _983 = 0.0;
        float _984 = 0.0;
        uint _985 = _856;
        uint _987 = 0u;
        float _1021;
        float _1040;
        vec4 _1053;
        float _1054;
        float _1055;
        float _1068;
        float _1069;
        float _1070;
        float _1086;
        float _1087;
        float _1088;
        float _1089;
        bool _1090;
        bool _1091;
        bool _1092;
        precise float _1093;
        precise float _1094;
        precise float _1095;
        float _1096;
        float _1097;
        float _1098;
        precise float _1099;
        bool _1102;
        for (;;)
        {
            uint _989 = _985 & 255u;
            uint _990 = _989 * 24u;
            uvec3 _999 = uvec3(texelFetch(g_forceParam, int(_990)).x, texelFetch(g_forceParam, int(_990 + 1u)).x, texelFetch(g_forceParam, int(_990 + 2u)).x);
            uint _1004 = (_989 * 24u) + 4u;
            vec4 _1017 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_1004)).x, texelFetch(g_forceParam, int(_1004 + 1u)).x, texelFetch(g_forceParam, int(_1004 + 2u)).x, texelFetch(g_forceParam, int(_1004 + 3u)).x));
            _1021 = _1017.w;
            uint _1023 = (_989 * 24u) + 8u;
            vec4 _1036 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_1023)).x, texelFetch(g_forceParam, int(_1023 + 1u)).x, texelFetch(g_forceParam, int(_1023 + 2u)).x, texelFetch(g_forceParam, int(_1023 + 3u)).x));
            _1040 = _1036.w;
            uint _1042 = (_989 * 24u) + 12u;
            _1053 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_1042)).x, texelFetch(g_forceParam, int(_1042 + 1u)).x, _1048, texelFetch(g_forceParam, int(_1042 + 3u)).x));
            _1054 = _1053.x;
            _1055 = _1053.w;
            uint _1057 = (_989 * 24u) + 16u;
            vec3 _1067 = uintBitsToFloat(uvec3(texelFetch(g_forceParam, int(_1057)).x, texelFetch(g_forceParam, int(_1057 + 1u)).x, texelFetch(g_forceParam, int(_1057 + 2u)).x));
            _1068 = _1067.x;
            _1069 = _1067.y;
            _1070 = _1067.z;
            uint _1072 = (_989 * 24u) + 20u;
            vec4 _1085 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_1072)).x, texelFetch(g_forceParam, int(_1072 + 1u)).x, texelFetch(g_forceParam, int(_1072 + 2u)).x, texelFetch(g_forceParam, int(_1072 + 3u)).x));
            _1086 = _1085.x;
            _1087 = _1085.y;
            _1088 = _1085.z;
            _1089 = _1085.w;
            _1090 = _999.x == 1u;
            _1091 = _999.y == 1u;
            _1092 = _999.z == 1u;
            _1093 = _500 - _1017.x;
            _1094 = _507 - _1017.y;
            _1095 = _514 - _1017.z;
            _1096 = _1090 ? _1036.x : _1093;
            _1097 = _1090 ? _1036.y : _1094;
            _1098 = _1090 ? _1036.z : _1095;
            _1099 = dot(vec3(_1096, _1097, _1098), vec3(_1096, _1097, _1098));
            _1102 = _1099 > 0.0;
            float frontier_phi_10_pred;
            float frontier_phi_10_pred_1;
            float frontier_phi_10_pred_2;
            if (_1102)
            {
                precise float _1128 = _1093 * _1093;
                precise float _1129 = _1094 * _1094;
                precise float _1130 = _1128 + _1129;
                precise float _1131 = _1095 * _1095;
                precise float _1132 = _1131 + _1130;
                float _1133 = sqrt(_1132);
                float _1134 = inversesqrt(_1099);
                precise float _1135 = _1096 * _1134;
                precise float _1136 = _1097 * _1134;
                precise float _1137 = _1098 * _1134;
                precise float _1139 = _1133 / (isnan(0.001000000047497451305389404296875) ? _1053.y : (isnan(_1053.y) ? 0.001000000047497451305389404296875 : max(_1053.y, 0.001000000047497451305389404296875)));
                precise float _1140 = 1.0 - _1139;
                float _1493 = isnan(0.0) ? _1140 : (isnan(_1140) ? 0.0 : max(_1140, 0.0));
                float _1141 = isnan(1.0) ? _1493 : (isnan(_1493) ? 1.0 : min(_1493, 1.0));
                float _1183;
                if (_1092)
                {
                    float _1172 = inversesqrt(dot(vec3(_1093, _1094, _1095), vec3(_1093, _1094, _1095)));
                    precise float _1173 = _1093 * _1172;
                    precise float _1174 = _1094 * _1172;
                    precise float _1175 = _1095 * _1172;
                    precise float _1179 = dot(vec3(_1135, _1136, _1137), vec3(_1173, _1174, _1175)) * 0.800000011920928955078125;
                    precise float _1180 = _1179 + 0.20000000298023223876953125;
                    float _1504 = isnan(0.0) ? _1180 : (isnan(_1180) ? 0.0 : max(_1180, 0.0));
                    precise float _1182 = _1141 * (isnan(1.0) ? _1504 : (isnan(_1504) ? 1.0 : min(_1504, 1.0)));
                    _1183 = _1182;
                }
                else
                {
                    _1183 = _1141;
                }
                float frontier_phi_10_pred_15_ladder;
                float frontier_phi_10_pred_15_ladder_1;
                float frontier_phi_10_pred_15_ladder_2;
                if (_1183 > 0.0)
                {
                    bool _1213 = _1090 && (!_1092);
                    precise float _1215 = _1133 * (-4.0);
                    precise float _1218 = 6.283184051513671875 / (isnan(0.001000000047497451305389404296875) ? _1054 : (isnan(_1054) ? 0.001000000047497451305389404296875 : max(_1054, 0.001000000047497451305389404296875)));
                    precise float _1219 = cbMtdParam._m0[11u].y * _1218;
                    precise float _1220 = dot(vec2(_1135, _1137), vec2(_1093, _1095));
                    precise float _1223 = _1220 * _1219;
                    precise float _1224 = float(_1213) * _1223;
                    precise float _1225 = _689 * _1219;
                    precise float _1226 = _1225 - _1224;
                    precise float _1227 = (_1213 ? 0.0 : _1215) + _1226;
                    precise float _1229 = _1040 * sin(_1227);
                    precise float _1230 = _1136 * 0.0;
                    precise float _1231 = _1230 - _1137;
                    precise float _1232 = _1137 * 0.0;
                    precise float _1233 = _1135 * 0.0;
                    precise float _1234 = _1232 - _1233;
                    precise float _1235 = _1135 - _1230;
                    precise float _1236 = _1055 * _1229;
                    float _1237 = _1090 ? _1236 : 0.0;
                    float _1336;
                    if (_1091)
                    {
                        precise float _1298 = _1068 * 2.0;
                        precise float _1299 = _1087 + _1088;
                        precise float _1300 = _1089 + _1299;
                        precise float _1302 = 6.283184051513671875 / (isnan(0.001000000047497451305389404296875) ? _1068 : (isnan(_1068) ? 0.001000000047497451305389404296875 : max(_1068, 0.001000000047497451305389404296875)));
                        precise float _1303 = cbMtdParam._m0[11u].y * _1302;
                        precise float _1304 = _1086 * _1303;
                        precise float _1305 = (-0.0) - _1135;
                        precise float _1309 = dot(vec2(_1137, _1305), vec2(_1093, _1095)) / _1298;
                        precise float _1310 = (-0.0) - _1309;
                        float _1313 = fract(abs(_1309));
                        precise float _1314 = (-0.0) - _1313;
                        precise float _1316 = _1298 * ((_1309 >= _1310) ? _1313 : _1314);
                        precise float _1317 = _1316 * 6.283184051513671875;
                        precise float _1318 = _1317 / _1298;
                        precise float _1320 = (isnan(5.0) ? _1068 : (isnan(_1068) ? 5.0 : min(_1068, 5.0))) * sin(_1318);
                        precise float _1321 = _1220 + _1320;
                        precise float _1322 = _1068 * 0.25;
                        precise float _1323 = _689 * _1086;
                        precise float _1324 = _1323 - _1322;
                        precise float _1325 = _1324 - _1321;
                        precise float _1326 = _1086 * _1300;
                        precise float _1328 = _1325 / (isnan(0.001000000047497451305389404296875) ? _1326 : (isnan(_1326) ? 0.001000000047497451305389404296875 : max(_1326, 0.001000000047497451305389404296875)));
                        float _1329 = fract(_1328);
                        precise float _1331 = 1.0 - _1329;
                        float _1332 = (_1328 < 0.0) ? _1331 : _1329;
                        precise float _1333 = _1299 / _1300;
                        precise float _1334 = _1087 / _1300;
                        float _1369;
                        if (_1332 < _1334)
                        {
                            precise float _1354 = _1332 / _1334;
                            _1369 = _1354;
                        }
                        else
                        {
                            float frontier_phi_29_26_ladder;
                            if (_1332 < _1333)
                            {
                                precise float _1379 = _1332 - _1334;
                                precise float _1380 = _1333 - _1334;
                                precise float _1381 = _1379 / _1380;
                                precise float _1370 = 1.0 - _1381;
                                frontier_phi_29_26_ladder = _1370;
                            }
                            else
                            {
                                frontier_phi_29_26_ladder = 0.0;
                            }
                            _1369 = frontier_phi_29_26_ladder;
                        }
                        precise float _1371 = _1070 * _1369;
                        precise float _1372 = _1303 * _1220;
                        precise float _1373 = _689 * _1304;
                        precise float _1374 = _1373 - _1372;
                        precise float _1376 = _1069 + sin(_1374);
                        precise float _1378 = _1371 * abs(_1376);
                        precise float _1337 = _1378 + 0.0;
                        _1336 = _1337;
                    }
                    else
                    {
                        _1336 = 0.0;
                    }
                    precise float _1338 = _1021 + _1229;
                    precise float _1339 = _1338 + _1336;
                    precise float _1340 = _1135 * _1339;
                    precise float _1341 = _1136 * _1339;
                    precise float _1342 = _1137 * _1339;
                    precise float _1343 = _1231 * _1237;
                    precise float _1344 = _1234 * _1237;
                    precise float _1345 = _1235 * _1237;
                    precise float _1346 = _1343 + _1340;
                    precise float _1347 = _1344 + _1341;
                    precise float _1348 = _1345 + _1342;
                    precise float _1349 = _1183 * _1346;
                    precise float _1350 = _1183 * _1347;
                    precise float _1351 = _1183 * _1348;
                    precise float _1143 = _1349 * 0.0500000007450580596923828125;
                    precise float _1145 = _1350 * 0.0500000007450580596923828125;
                    precise float _1147 = _1351 * 0.0500000007450580596923828125;
                    frontier_phi_10_pred_15_ladder = _1143;
                    frontier_phi_10_pred_15_ladder_1 = _1145;
                    frontier_phi_10_pred_15_ladder_2 = _1147;
                }
                else
                {
                    frontier_phi_10_pred_15_ladder = 0.0;
                    frontier_phi_10_pred_15_ladder_1 = 0.0;
                    frontier_phi_10_pred_15_ladder_2 = 0.0;
                }
                frontier_phi_10_pred = frontier_phi_10_pred_15_ladder;
                frontier_phi_10_pred_1 = frontier_phi_10_pred_15_ladder_1;
                frontier_phi_10_pred_2 = frontier_phi_10_pred_15_ladder_2;
            }
            else
            {
                frontier_phi_10_pred = 0.0;
                frontier_phi_10_pred_1 = 0.0;
                frontier_phi_10_pred_2 = 0.0;
            }
            _1142 = frontier_phi_10_pred;
            _1144 = frontier_phi_10_pred_1;
            _1146 = frontier_phi_10_pred_2;
            _692 = _982 + _1142;
            _694 = _983 + _1144;
            _696 = _984 + _1146;
            uint _988 = _987 + 1u;
            if (_988 == _213)
            {
                break;
            }
            else
            {
                _982 = _692;
                _983 = _694;
                _984 = _696;
                _985 = (_987 != 3u) ? (_985 >> 8u) : _565;
                _987 = _988;
                continue;
            }
        }
        _691 = _692;
        _693 = _694;
        _695 = _696;
    }
    precise float _697 = _691 * _691;
    precise float _698 = _693 * _693;
    precise float _699 = _697 + _698;
    precise float _700 = _695 * _695;
    precise float _701 = _699 + _700;
    float _702 = sqrt(_701);
    bool _703 = _702 < 0.00011000000085914507508277893066406;
    float _707 = inversesqrt(dot(vec3(_691, _693, _695), vec3(_691, _693, _695)));
    precise float _708 = _691 * _707;
    precise float _709 = _693 * _707;
    precise float _710 = _695 * _707;
    precise float _711 = _610 * _710;
    precise float _712 = _615 * _709;
    precise float _713 = _711 - _712;
    precise float _714 = _615 * _708;
    precise float _715 = _605 * _710;
    precise float _716 = _714 - _715;
    precise float _717 = _605 * _709;
    precise float _718 = _610 * _708;
    precise float _719 = _717 - _718;
    float _723 = inversesqrt(dot(vec3(_713, _716, _719), vec3(_713, _716, _719)));
    precise float _724 = _723 * _713;
    precise float _725 = _723 * _716;
    precise float _726 = _723 * _719;
    precise float _727 = _702 + 1.0;
    precise float _729 = cbMtdParam._m0[10u].y * log2(_727);
    precise float _730 = _686 - _500;
    precise float _731 = _687 - _507;
    precise float _732 = _688 - _514;
    precise float _733 = dot(vec3(_724, _725, _726), vec3(_730, _731, _732));
    precise float _736 = _724 * _733;
    precise float _737 = _725 * _733;
    precise float _738 = _726 * _733;
    precise float _739 = _500 + _736;
    precise float _740 = _507 + _737;
    precise float _741 = _514 + _738;
    precise float _742 = _686 - _739;
    precise float _743 = _687 - _740;
    precise float _744 = _688 - _741;
    precise float _745 = _725 * _744;
    precise float _746 = _726 * _743;
    precise float _747 = _745 - _746;
    precise float _748 = _726 * _742;
    precise float _749 = _724 * _744;
    precise float _750 = _748 - _749;
    precise float _751 = _724 * _743;
    precise float _752 = _725 * _742;
    precise float _753 = _751 - _752;
    float _754 = sin(_729);
    float _755 = cos(_729);
    precise float _756 = _742 * _755;
    precise float _757 = _743 * _755;
    precise float _758 = _744 * _755;
    precise float _759 = _754 * _747;
    precise float _760 = _754 * _750;
    precise float _761 = _754 * _753;
    precise float _762 = _756 + _759;
    precise float _763 = _757 + _760;
    precise float _764 = _761 + _758;
    precise float _765 = _739 + _762;
    precise float _766 = _740 + _763;
    precise float _767 = _741 + _764;
    precise float _768 = _765 - _686;
    precise float _769 = _766 - _687;
    precise float _770 = _767 - _688;
    precise float _774 = _683 + (_703 ? 0.0 : _768);
    precise float _775 = _684 + (_703 ? 0.0 : _769);
    precise float _776 = _685 + (_703 ? 0.0 : _770);
    precise float _777 = _426 + _774;
    precise float _778 = _433 + _775;
    precise float _779 = _440 + _776;
    precise float _780 = _777 - cbSceneParam._m0[3u].x;
    precise float _781 = _778 - cbSceneParam._m0[3u].y;
    precise float _782 = _779 - cbSceneParam._m0[3u].z;
    precise float _810 = cbSceneParam._m0[24u].x * _780;
    precise float _811 = _781 * cbSceneParam._m0[24u].y;
    precise float _812 = _811 + _810;
    precise float _813 = _782 * cbSceneParam._m0[24u].z;
    precise float _814 = _813 + _812;
    precise float _815 = 1.0 * cbSceneParam._m0[24u].w;
    precise float _816 = _815 + _814;
    precise float _817 = cbSceneParam._m0[25u].x * _780;
    precise float _818 = _781 * cbSceneParam._m0[25u].y;
    precise float _819 = _818 + _817;
    precise float _820 = _782 * cbSceneParam._m0[25u].z;
    precise float _821 = _820 + _819;
    precise float _822 = 1.0 * cbSceneParam._m0[25u].w;
    precise float _823 = _822 + _821;
    precise float _824 = cbSceneParam._m0[26u].x * _780;
    precise float _825 = _781 * cbSceneParam._m0[26u].y;
    precise float _826 = _825 + _824;
    precise float _827 = _782 * cbSceneParam._m0[26u].z;
    precise float _828 = _827 + _826;
    precise float _829 = 1.0 * cbSceneParam._m0[26u].w;
    precise float _830 = _829 + _828;
    precise float _831 = cbSceneParam._m0[27u].x * _780;
    precise float _832 = _781 * cbSceneParam._m0[27u].y;
    precise float _833 = _832 + _831;
    precise float _834 = _782 * cbSceneParam._m0[27u].z;
    precise float _835 = _834 + _833;
    precise float _836 = 1.0 * cbSceneParam._m0[27u].w;
    precise float _837 = _836 + _835;
    gl_Position.x = _816;
    gl_Position.y = _823;
    gl_Position.z = _830;
    gl_Position.w = _837;
    NORMAL_1.x = fma(_187, _414, fma(_186, _411, _408 * _184));
    NORMAL_1.y = fma(_187, _415, fma(_186, _412, _409 * _184));
    NORMAL_1.z = fma(_187, _416, fma(_186, _413, _410 * _184));
    NORMAL_1.w = float(_227);
    TANGENT_1.x = fma(_198, _414, fma(_197, _411, _408 * _196));
    TANGENT_1.y = fma(_198, _415, fma(_197, _412, _409 * _196));
    TANGENT_1.z = fma(_198, _416, fma(_197, _413, _410 * _196));
    TANGENT_1.w = (float(TANGENT.w) + (-127.0)) * 0.0078740157186985015869140625;
    TEXCOORD_2 = ((float(int(uint(TEXCOORD.x))) * 0.00048828125) * cbTexScroll._m0[0u].x) + cbTexScroll._m0[0u].z;
    TEXCOORD_1_1 = ((float(int(uint(TEXCOORD.y))) * 0.00048828125) * cbTexScroll._m0[0u].y) + cbTexScroll._m0[0u].w;
    TEXCOORD_3.x = TEXCOORD_1.x;
    TEXCOORD_3.y = TEXCOORD_1.y;
    TEXCOORD_3.z = TEXCOORD_1.z;
    TEXCOORD_3.w = COLOR_1.x;
    TEXCOORD_7.x = _830;
    TEXCOORD_7.y = _837;
    TEXCOORD_11 = sqrt(((_446 * _446) + (_447 * _447)) + (_448 * _448));
}


