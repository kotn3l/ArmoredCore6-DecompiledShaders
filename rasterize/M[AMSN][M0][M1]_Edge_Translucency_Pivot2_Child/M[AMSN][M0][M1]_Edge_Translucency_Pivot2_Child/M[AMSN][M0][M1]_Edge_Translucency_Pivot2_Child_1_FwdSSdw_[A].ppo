#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[12];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_M0_M1_Edge_Translucency_Pivot2_Child_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_M0_M1_Edge_Translucency_Pivot2_Child_snp_0_Texture2D_1;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_M0_M1_Edge_Translucency_Pivot2_Child_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in float TEXCOORD;
layout(location = 4, component = 1) in float TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _867;
float _3491;
float _3492;
float _3493;
float _3494;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _180 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _181 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _182 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _188 = inversesqrt(dot(vec3(_180, _181, _182), vec3(_180, _181, _182)));
    float _195 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _202 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _225 = texture(sampler2D(M_AMSN_M0_M1_Edge_Translucency_Pivot2_Child_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1) + cbTextureTilingScale._m0[0u].w));
    float _231 = _225.w;
    float _232 = _225.x * cbMtdParam._m0[9u].x;
    float _233 = _225.y * cbMtdParam._m0[9u].y;
    float _234 = _225.z * cbMtdParam._m0[9u].z;
    vec4 _246 = texture(sampler2D(M_AMSN_M0_M1_Edge_Translucency_Pivot2_Child_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1) + cbTextureTilingScale._m0[1u].w));
    float _250 = _246.z;
    float _254 = (_246.x * 2.0) + (-1.0);
    float _256 = (_246.y * 2.0) + (-1.0);
    float _257 = dot(vec2(_254, _256), vec2(_254, _256));
    float _3503 = isnan(0.0) ? _257 : (isnan(_257) ? 0.0 : max(_257, 0.0));
    float _263 = sqrt(1.0 - (isnan(1.0) ? _3503 : (isnan(_3503) ? 1.0 : min(_3503, 1.0))));
    vec4 _275 = texture(sampler2D(M_AMSN_M0_M1_Edge_Translucency_Pivot2_Child_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_1) + cbTextureTilingScale._m0[3u].w));
    float _282 = cbMtdParam._m0[10u].x * _275.x;
    float _285 = fma(_263, _195 * NORMAL.x, fma(_256, _202 * TANGENT.x, (_188 * _180) * _254));
    float _288 = fma(_263, _195 * NORMAL.y, fma(_256, _202 * TANGENT.y, (_188 * _181) * _254));
    float _291 = fma(_263, _195 * NORMAL.z, fma(_256, _202 * TANGENT.z, (_188 * _182) * _254));
    float _295 = inversesqrt(dot(vec3(_285, _288, _291), vec3(_285, _288, _291)));
    float _296 = _295 * _285;
    float _297 = _295 * _288;
    float _298 = _295 * _291;
    float _3514 = isnan(0.0) ? _231 : (isnan(_231) ? 0.0 : max(_231, 0.0));
    float _299 = isnan(1.0) ? _3514 : (isnan(_3514) ? 1.0 : min(_3514, 1.0));
    float _3525 = isnan(0.0) ? _250 : (isnan(_250) ? 0.0 : max(_250, 0.0));
    float _300 = isnan(1.0) ? _3525 : (isnan(_3525) ? 1.0 : min(_3525, 1.0));
    float _301 = isnan(0.0) ? _282 : (isnan(_282) ? 0.0 : max(_282, 0.0));
    float _3541 = isnan(0.0) ? _232 : (isnan(_232) ? 0.0 : max(_232, 0.0));
    float _3552 = isnan(0.0) ? _233 : (isnan(_233) ? 0.0 : max(_233, 0.0));
    float _3563 = isnan(0.0) ? _234 : (isnan(_234) ? 0.0 : max(_234, 0.0));
    float _320 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _362 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _372 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _362);
    float _373 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _362);
    float _374 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _362);
    float _378 = inversesqrt(dot(vec3(_372, _373, _374), vec3(_372, _373, _374)));
    float _379 = _372 * _378;
    float _380 = _373 * _378;
    float _381 = _374 * _378;
    vec4 _386 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _388 = _386.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _546 = sqrt(((_372 * _372) + (_373 * _373)) + (_374 * _374));
        float _552 = (cbMatDynParam._m0[5u].x * _546) + cbMatDynParam._m0[5u].y;
        float _3574 = isnan(0.0) ? _552 : (isnan(_552) ? 0.0 : max(_552, 0.0));
        float _553 = isnan(1.0) ? _3574 : (isnan(_3574) ? 1.0 : min(_3574, 1.0));
        float _557 = (cbMatDynParam._m0[5u].z * _546) + cbMatDynParam._m0[5u].w;
        float _3585 = isnan(0.0) ? _557 : (isnan(_557) ? 0.0 : max(_557, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3585 : (isnan(_3585) ? 1.0 : min(_3585, 1.0))) - _553)) + _553) < ((_388 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _400 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _401 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _421 = fma(_298, cbSceneParam._m0[5u].z, fma(_297, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _296));
    float _424 = fma(_298, cbSceneParam._m0[6u].z, fma(_297, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _296));
    float _427 = fma(_298, cbSceneParam._m0[7u].z, fma(_297, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _296));
    uint _440 = uint(roundEven(NORMAL.w)) * 13u;
    uint _442 = _440 + 9u;
    uint _443 = _442 + uint(cbMatDynParam._m0[0u].w);
    float _449 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3541 : (isnan(_3541) ? 1.0 : min(_3541, 1.0)))) * cbInstanceData._m0[_443].x;
    float _450 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3552 : (isnan(_3552) ? 1.0 : min(_3552, 1.0)))) * cbInstanceData._m0[_443].y;
    float _451 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3563 : (isnan(_3563) ? 1.0 : min(_3563, 1.0)))) * cbInstanceData._m0[_443].z;
    float _3596 = isnan(0.0) ? _449 : (isnan(_449) ? 0.0 : max(_449, 0.0));
    float _452 = isnan(1.0) ? _3596 : (isnan(_3596) ? 1.0 : min(_3596, 1.0));
    float _3607 = isnan(0.0) ? _450 : (isnan(_450) ? 0.0 : max(_450, 0.0));
    float _453 = isnan(1.0) ? _3607 : (isnan(_3607) ? 1.0 : min(_3607, 1.0));
    float _3618 = isnan(0.0) ? _451 : (isnan(_451) ? 0.0 : max(_451, 0.0));
    float _454 = isnan(1.0) ? _3618 : (isnan(_3618) ? 1.0 : min(_3618, 1.0));
    vec4 _463 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _400, cbSceneParam._m0[86u].y * _401));
    float _466 = _463.x * TEXCOORD_3.w;
    float _467 = dot(vec3(_296, _297, _298), vec3(_379, _380, _381));
    float _470 = _467 * 2.0;
    float _474 = (_470 * _296) - _379;
    float _475 = (_470 * _297) - _380;
    float _476 = (_470 * _298) - _381;
    float _477 = dot(vec3(_379, _380, _381), vec3(_296, _297, _298));
    float _480 = abs(_477);
    float _3629 = isnan(0.0) ? _480 : (isnan(_480) ? 0.0 : max(_480, 0.0));
    float _482 = sqrt(_300);
    float _495 = exp2((_482 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3629 : (isnan(_3629) ? 1.0 : min(_3629, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_482 * 3.0));
    float _527 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _531 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _535 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _866;
    float _868;
    float _869;
    float _870;
    float _871;
    float _872;
    float _873;
    float _874;
    float _875;
    float _876;
    float _877;
    float _878;
    float _879;
    float _880;
    float _881;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _591 = fma(_535, cbModelParam._m0[26u].z, fma(_531, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _527));
        float _595 = fma(_535, cbModelParam._m0[27u].z, fma(_531, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _527));
        float _599 = fma(_535, cbModelParam._m0[28u].z, fma(_531, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _527));
        float _624 = _527 + _296;
        float _625 = _531 + _297;
        float _626 = _535 + _298;
        float _636 = fma(_626, cbModelParam._m0[26u].z, fma(_625, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _624)) - _591;
        float _637 = fma(_626, cbModelParam._m0[27u].z, fma(_625, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _624)) - _595;
        float _638 = fma(_626, cbModelParam._m0[28u].z, fma(_625, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _624)) - _599;
        float _642 = inversesqrt(dot(vec3(_636, _637, _638), vec3(_636, _637, _638)));
        float _655 = ((_642 * _636) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_591 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _656 = ((_642 * _637) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_595 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _657 = ((_642 * _638) / cbModelParam._m0[34u].z) + ((((((_599 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _660 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_655, _656, _657), 0.0);
        vec4 _667 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_655, _656, _657), 0.0);
        vec4 _674 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_655, _656, _657), 0.0);
        vec4 _681 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_655, _656, _657), 0.0);
        float _694 = exp2((_660.w + (-0.5)) * 20.0) * 2.0;
        float _695 = _694 * (_660.x + (-0.5));
        float _696 = _694 * (_660.y + (-0.5));
        float _697 = _694 * (_660.z + (-0.5));
        float _704 = exp2((_667.w + (-0.5)) * 20.0) * 2.0;
        float _705 = _704 * (_667.x + (-0.5));
        float _706 = _704 * (_667.y + (-0.5));
        float _707 = _704 * (_667.z + (-0.5));
        float _714 = exp2((_674.w + (-0.5)) * 20.0) * 2.0;
        float _715 = _714 * (_674.x + (-0.5));
        float _716 = _714 * (_674.y + (-0.5));
        float _717 = _714 * (_674.z + (-0.5));
        float _724 = exp2((_681.w + (-0.5)) * 20.0) * 2.0;
        float _725 = _724 * (_681.x + (-0.5));
        float _726 = _724 * (_681.y + (-0.5));
        float _727 = _724 * (_681.z + (-0.5));
        float _728 = isnan(0.0) ? _725 : (isnan(_725) ? 0.0 : max(_725, 0.0));
        float _729 = isnan(0.0) ? _726 : (isnan(_726) ? 0.0 : max(_726, 0.0));
        float _730 = isnan(0.0) ? _727 : (isnan(_727) ? 0.0 : max(_727, 0.0));
        float _731 = _695 * 0.5;
        float _732 = _705 * 0.5;
        float _733 = _715 * 0.5;
        float _734 = dot(vec3(_731, _732, _733), vec3(_731, _732, _733));
        float _739 = (_734 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_734);
        float _748 = (dot(vec3(_296, _297, _298), vec3(_739 * _731, _739 * _732, _739 * _733)) + 1.0) * 0.5;
        float _3655 = isnan(0.0) ? _748 : (isnan(_748) ? 0.0 : max(_748, 0.0));
        float _758 = sqrt(((_732 * _732) + (_731 * _731)) + (_733 * _733)) / (_728 + 9.9999997473787516355514526367188e-06);
        float _3666 = isnan(0.0) ? _758 : (isnan(_758) ? 0.0 : max(_758, 0.0));
        float _759 = isnan(1.0) ? _3666 : (isnan(_3666) ? 1.0 : min(_3666, 1.0));
        float _760 = _759 * 2.0;
        float _764 = (1.0 - _759) / (_759 + 1.0);
        float _3677 = isnan(0.0) ? _764 : (isnan(_764) ? 0.0 : max(_764, 0.0));
        float _765 = isnan(1.0) ? _3677 : (isnan(_3677) ? 1.0 : min(_3677, 1.0));
        float _774 = ((((1.0 - _765) * (_760 + 2.0)) * exp2(log2(isnan(1.0) ? _3655 : (isnan(_3655) ? 1.0 : min(_3655, 1.0))) * (_760 + 1.0))) + _765) * _728;
        float _775 = _696 * 0.5;
        float _776 = _706 * 0.5;
        float _777 = _716 * 0.5;
        float _778 = dot(vec3(_775, _776, _777), vec3(_775, _776, _777));
        float _783 = (_778 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_778);
        float _791 = (dot(vec3(_296, _297, _298), vec3(_783 * _775, _783 * _776, _783 * _777)) + 1.0) * 0.5;
        float _3688 = isnan(0.0) ? _791 : (isnan(_791) ? 0.0 : max(_791, 0.0));
        float _800 = sqrt(((_776 * _776) + (_775 * _775)) + (_777 * _777)) / (_729 + 9.9999997473787516355514526367188e-06);
        float _3699 = isnan(0.0) ? _800 : (isnan(_800) ? 0.0 : max(_800, 0.0));
        float _801 = isnan(1.0) ? _3699 : (isnan(_3699) ? 1.0 : min(_3699, 1.0));
        float _802 = _801 * 2.0;
        float _806 = (1.0 - _801) / (_801 + 1.0);
        float _3710 = isnan(0.0) ? _806 : (isnan(_806) ? 0.0 : max(_806, 0.0));
        float _807 = isnan(1.0) ? _3710 : (isnan(_3710) ? 1.0 : min(_3710, 1.0));
        float _816 = ((((1.0 - _807) * (_802 + 2.0)) * exp2(log2(isnan(1.0) ? _3688 : (isnan(_3688) ? 1.0 : min(_3688, 1.0))) * (_802 + 1.0))) + _807) * _729;
        float _817 = _697 * 0.5;
        float _818 = _707 * 0.5;
        float _819 = _717 * 0.5;
        float _820 = dot(vec3(_817, _818, _819), vec3(_817, _818, _819));
        float _825 = (_820 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_820);
        float _833 = (dot(vec3(_296, _297, _298), vec3(_825 * _817, _825 * _818, _825 * _819)) + 1.0) * 0.5;
        float _3721 = isnan(0.0) ? _833 : (isnan(_833) ? 0.0 : max(_833, 0.0));
        float _842 = sqrt(((_818 * _818) + (_817 * _817)) + (_819 * _819)) / (_730 + 9.9999997473787516355514526367188e-06);
        float _3732 = isnan(0.0) ? _842 : (isnan(_842) ? 0.0 : max(_842, 0.0));
        float _843 = isnan(1.0) ? _3732 : (isnan(_3732) ? 1.0 : min(_3732, 1.0));
        float _844 = _843 * 2.0;
        float _848 = (1.0 - _843) / (_843 + 1.0);
        float _3743 = isnan(0.0) ? _848 : (isnan(_848) ? 0.0 : max(_848, 0.0));
        float _849 = isnan(1.0) ? _3743 : (isnan(_3743) ? 1.0 : min(_3743, 1.0));
        float _858 = ((((1.0 - _849) * (_844 + 2.0)) * exp2(log2(isnan(1.0) ? _3721 : (isnan(_3721) ? 1.0 : min(_3721, 1.0))) * (_844 + 1.0))) + _849) * _730;
        _866 = _697;
        _868 = _696;
        _869 = _695;
        _870 = _707;
        _871 = _706;
        _872 = _705;
        _873 = _717;
        _874 = _716;
        _875 = _715;
        _876 = _730;
        _877 = _729;
        _878 = _728;
        _879 = cbModelParam._m0[36u].z * (isnan(0.0) ? _774 : (isnan(_774) ? 0.0 : max(_774, 0.0)));
        _880 = cbModelParam._m0[36u].z * (isnan(0.0) ? _816 : (isnan(_816) ? 0.0 : max(_816, 0.0)));
        _881 = cbModelParam._m0[36u].z * (isnan(0.0) ? _858 : (isnan(_858) ? 0.0 : max(_858, 0.0)));
    }
    else
    {
        _866 = _867;
        _868 = _867;
        _869 = _867;
        _870 = _867;
        _871 = _867;
        _872 = _867;
        _873 = _867;
        _874 = _867;
        _875 = _867;
        _876 = _867;
        _877 = _867;
        _878 = _867;
        _879 = 0.0;
        _880 = 0.0;
        _881 = 0.0;
    }
    float _1179;
    float _1180;
    float _1181;
    float _1182;
    float _1183;
    float _1184;
    float _1185;
    float _1186;
    float _1187;
    float _1188;
    float _1189;
    float _1190;
    float _1191;
    float _1192;
    float _1193;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _910 = fma(_535, cbModelParam._m0[30u].z, fma(_531, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _527));
        float _914 = fma(_535, cbModelParam._m0[31u].z, fma(_531, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _527));
        float _918 = fma(_535, cbModelParam._m0[32u].z, fma(_531, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _527));
        float _941 = _527 + _296;
        float _942 = _531 + _297;
        float _943 = _535 + _298;
        float _953 = fma(_943, cbModelParam._m0[30u].z, fma(_942, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _941)) - _910;
        float _954 = fma(_943, cbModelParam._m0[31u].z, fma(_942, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _941)) - _914;
        float _955 = fma(_943, cbModelParam._m0[32u].z, fma(_942, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _941)) - _918;
        float _959 = inversesqrt(dot(vec3(_953, _954, _955), vec3(_953, _954, _955)));
        float _972 = ((_959 * _953) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_910 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _973 = ((_959 * _954) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_914 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _974 = ((_959 * _955) / cbModelParam._m0[35u].z) + ((((((_918 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _976 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_972, _973, _974), 0.0);
        vec4 _983 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_972, _973, _974), 0.0);
        vec4 _990 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_972, _973, _974), 0.0);
        vec4 _997 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_972, _973, _974), 0.0);
        float _1009 = exp2((_976.w + (-0.5)) * 20.0) * 2.0;
        float _1010 = _1009 * (_976.x + (-0.5));
        float _1011 = _1009 * (_976.y + (-0.5));
        float _1012 = _1009 * (_976.z + (-0.5));
        float _1019 = exp2((_983.w + (-0.5)) * 20.0) * 2.0;
        float _1020 = _1019 * (_983.x + (-0.5));
        float _1021 = _1019 * (_983.y + (-0.5));
        float _1022 = _1019 * (_983.z + (-0.5));
        float _1029 = exp2((_990.w + (-0.5)) * 20.0) * 2.0;
        float _1030 = _1029 * (_990.x + (-0.5));
        float _1031 = _1029 * (_990.y + (-0.5));
        float _1032 = _1029 * (_990.z + (-0.5));
        float _1039 = exp2((_997.w + (-0.5)) * 20.0) * 2.0;
        float _1040 = _1039 * (_997.x + (-0.5));
        float _1041 = _1039 * (_997.y + (-0.5));
        float _1042 = _1039 * (_997.z + (-0.5));
        float _1043 = isnan(0.0) ? _1040 : (isnan(_1040) ? 0.0 : max(_1040, 0.0));
        float _1044 = isnan(0.0) ? _1041 : (isnan(_1041) ? 0.0 : max(_1041, 0.0));
        float _1045 = isnan(0.0) ? _1042 : (isnan(_1042) ? 0.0 : max(_1042, 0.0));
        float _1046 = _1010 * 0.5;
        float _1047 = _1020 * 0.5;
        float _1048 = _1030 * 0.5;
        float _1049 = dot(vec3(_1046, _1047, _1048), vec3(_1046, _1047, _1048));
        float _1054 = (_1049 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1049);
        float _1062 = (dot(vec3(_296, _297, _298), vec3(_1054 * _1046, _1054 * _1047, _1054 * _1048)) + 1.0) * 0.5;
        float _3784 = isnan(0.0) ? _1062 : (isnan(_1062) ? 0.0 : max(_1062, 0.0));
        float _1071 = sqrt(((_1047 * _1047) + (_1046 * _1046)) + (_1048 * _1048)) / (_1043 + 9.9999997473787516355514526367188e-06);
        float _3795 = isnan(0.0) ? _1071 : (isnan(_1071) ? 0.0 : max(_1071, 0.0));
        float _1072 = isnan(1.0) ? _3795 : (isnan(_3795) ? 1.0 : min(_3795, 1.0));
        float _1073 = _1072 * 2.0;
        float _1077 = (1.0 - _1072) / (_1072 + 1.0);
        float _3806 = isnan(0.0) ? _1077 : (isnan(_1077) ? 0.0 : max(_1077, 0.0));
        float _1078 = isnan(1.0) ? _3806 : (isnan(_3806) ? 1.0 : min(_3806, 1.0));
        float _1087 = ((((1.0 - _1078) * (_1073 + 2.0)) * exp2(log2(isnan(1.0) ? _3784 : (isnan(_3784) ? 1.0 : min(_3784, 1.0))) * (_1073 + 1.0))) + _1078) * _1043;
        float _1088 = _1011 * 0.5;
        float _1089 = _1021 * 0.5;
        float _1090 = _1031 * 0.5;
        float _1091 = dot(vec3(_1088, _1089, _1090), vec3(_1088, _1089, _1090));
        float _1096 = (_1091 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1091);
        float _1104 = (dot(vec3(_296, _297, _298), vec3(_1096 * _1088, _1096 * _1089, _1096 * _1090)) + 1.0) * 0.5;
        float _3817 = isnan(0.0) ? _1104 : (isnan(_1104) ? 0.0 : max(_1104, 0.0));
        float _1113 = sqrt(((_1089 * _1089) + (_1088 * _1088)) + (_1090 * _1090)) / (_1044 + 9.9999997473787516355514526367188e-06);
        float _3828 = isnan(0.0) ? _1113 : (isnan(_1113) ? 0.0 : max(_1113, 0.0));
        float _1114 = isnan(1.0) ? _3828 : (isnan(_3828) ? 1.0 : min(_3828, 1.0));
        float _1115 = _1114 * 2.0;
        float _1119 = (1.0 - _1114) / (_1114 + 1.0);
        float _3839 = isnan(0.0) ? _1119 : (isnan(_1119) ? 0.0 : max(_1119, 0.0));
        float _1120 = isnan(1.0) ? _3839 : (isnan(_3839) ? 1.0 : min(_3839, 1.0));
        float _1129 = ((((1.0 - _1120) * (_1115 + 2.0)) * exp2(log2(isnan(1.0) ? _3817 : (isnan(_3817) ? 1.0 : min(_3817, 1.0))) * (_1115 + 1.0))) + _1120) * _1044;
        float _1130 = _1012 * 0.5;
        float _1131 = _1022 * 0.5;
        float _1132 = _1032 * 0.5;
        float _1133 = dot(vec3(_1130, _1131, _1132), vec3(_1130, _1131, _1132));
        float _1138 = (_1133 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1133);
        float _1146 = (dot(vec3(_296, _297, _298), vec3(_1138 * _1130, _1138 * _1131, _1138 * _1132)) + 1.0) * 0.5;
        float _3850 = isnan(0.0) ? _1146 : (isnan(_1146) ? 0.0 : max(_1146, 0.0));
        float _1155 = sqrt(((_1131 * _1131) + (_1130 * _1130)) + (_1132 * _1132)) / (_1045 + 9.9999997473787516355514526367188e-06);
        float _3861 = isnan(0.0) ? _1155 : (isnan(_1155) ? 0.0 : max(_1155, 0.0));
        float _1156 = isnan(1.0) ? _3861 : (isnan(_3861) ? 1.0 : min(_3861, 1.0));
        float _1157 = _1156 * 2.0;
        float _1161 = (1.0 - _1156) / (_1156 + 1.0);
        float _3872 = isnan(0.0) ? _1161 : (isnan(_1161) ? 0.0 : max(_1161, 0.0));
        float _1162 = isnan(1.0) ? _3872 : (isnan(_3872) ? 1.0 : min(_3872, 1.0));
        float _1171 = ((((1.0 - _1162) * (_1157 + 2.0)) * exp2(log2(isnan(1.0) ? _3850 : (isnan(_3850) ? 1.0 : min(_3850, 1.0))) * (_1157 + 1.0))) + _1162) * _1045;
        _1179 = _1012;
        _1180 = _1011;
        _1181 = _1010;
        _1182 = _1022;
        _1183 = _1021;
        _1184 = _1020;
        _1185 = _1032;
        _1186 = _1031;
        _1187 = _1030;
        _1188 = _1045;
        _1189 = _1044;
        _1190 = _1043;
        _1191 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1087 : (isnan(_1087) ? 0.0 : max(_1087, 0.0)));
        _1192 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1129 : (isnan(_1129) ? 0.0 : max(_1129, 0.0)));
        _1193 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1171 : (isnan(_1171) ? 0.0 : max(_1171, 0.0)));
    }
    else
    {
        _1179 = _867;
        _1180 = _867;
        _1181 = _867;
        _1182 = _867;
        _1183 = _867;
        _1184 = _867;
        _1185 = _867;
        _1186 = _867;
        _1187 = _867;
        _1188 = _867;
        _1189 = _867;
        _1190 = _867;
        _1191 = 0.0;
        _1192 = 0.0;
        _1193 = 0.0;
    }
    float _1203 = (cbModelParam._m0[1u].x * (_1191 - _879)) + _879;
    float _1204 = (cbModelParam._m0[1u].x * (_1192 - _880)) + _880;
    float _1205 = (cbModelParam._m0[1u].x * (_1193 - _881)) + _881;
    float _1226 = fma(_1205, cbSceneParam._m0[89u].z, fma(_1204, cbSceneParam._m0[89u].y, _1203 * cbSceneParam._m0[89u].x));
    float _1229 = fma(_1205, cbSceneParam._m0[90u].z, fma(_1204, cbSceneParam._m0[90u].y, _1203 * cbSceneParam._m0[90u].x));
    float _1232 = fma(_1205, cbSceneParam._m0[91u].z, fma(_1204, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1203));
    float _1247 = _474 * 0.5;
    float _1248 = _475 * 0.5;
    float _1249 = _476 * 0.5;
    float _1250 = dot(vec4(_1247, _1248, _1249, 1.0), vec4(_1181, _1184, _1187, _1190));
    float _1253 = dot(vec4(_1247, _1248, _1249, 1.0), vec4(_1180, _1183, _1186, _1189));
    float _1256 = dot(vec4(_1247, _1248, _1249, 1.0), vec4(_1179, _1182, _1185, _1188));
    float _1290;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1263 = dot(vec4(_1247, _1248, _1249, 1.0), vec4(_866, _870, _873, _876));
        float _1267 = dot(vec4(_1247, _1248, _1249, 1.0), vec4(_868, _871, _874, _877));
        float _1271 = dot(vec4(_1247, _1248, _1249, 1.0), vec4(_869, _872, _875, _878));
        float _1278 = dot(vec4(cbModelParam._m0[39u]), vec4(_1247, _1248, _1249, 1.0));
        _1290 = dot(vec3(isnan(0.0) ? _1271 : (isnan(_1271) ? 0.0 : max(_1271, 0.0)), isnan(0.0) ? _1267 : (isnan(_1267) ? 0.0 : max(_1267, 0.0)), isnan(0.0) ? _1263 : (isnan(_1263) ? 0.0 : max(_1263, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1278) ? 0.0 : (isnan(0.0) ? _1278 : max(0.0, _1278))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1290 = 1.0;
    }
    float _1301;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1292 = dot(vec4(cbModelParam._m0[40u]), vec4(_1247, _1248, _1249, 1.0));
        _1301 = dot(vec3(isnan(0.0) ? _1250 : (isnan(_1250) ? 0.0 : max(_1250, 0.0)), isnan(0.0) ? _1253 : (isnan(_1253) ? 0.0 : max(_1253, 0.0)), isnan(0.0) ? _1256 : (isnan(_1256) ? 0.0 : max(_1256, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1292) ? 0.0 : (isnan(0.0) ? _1292 : max(0.0, _1292))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1301 = 1.0;
    }
    float _1305 = (_1301 * cbModelParam._m0[1u].x) + (_1290 * (1.0 - cbModelParam._m0[1u].x));
    float _1315 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _300);
    float _1316 = isnan(_1315) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1315 : min(cbModelParam._m0[25u].z, _1315));
    float _1398;
    float _1400;
    float _1402;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1365 = fma(_535, cbModelParam._m0[13u].z, fma(_531, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _527)) + cbModelParam._m0[13u].w;
        float _1369 = fma(_535, cbModelParam._m0[14u].z, fma(_531, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _527)) + cbModelParam._m0[14u].w;
        float _1373 = fma(_535, cbModelParam._m0[15u].z, fma(_531, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _527)) + cbModelParam._m0[15u].w;
        float _1376 = fma(_476, cbModelParam._m0[13u].z, fma(_475, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _474));
        float _1379 = fma(_476, cbModelParam._m0[14u].z, fma(_475, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _474));
        float _1382 = fma(_476, cbModelParam._m0[15u].z, fma(_475, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _474));
        float _1410;
        if (_1376 > 0.0)
        {
            _1410 = abs((1.0 - _1365) / _1376);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1376 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1365 + 1.0) / _1376);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1410 = frontier_phi_17_15_ladder;
        }
        float _1611;
        if (_1379 > 0.0)
        {
            _1611 = abs((1.0 - _1369) / _1379);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1379 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1369 + 1.0) / _1379);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1611 = frontier_phi_26_22_ladder;
        }
        float _1684;
        if (_1382 > 0.0)
        {
            _1684 = abs((1.0 - _1373) / _1382);
        }
        else
        {
            float frontier_phi_37_33_ladder;
            if (_1382 < 0.0)
            {
                frontier_phi_37_33_ladder = abs((_1373 + 1.0) / _1382);
            }
            else
            {
                frontier_phi_37_33_ladder = 5000.0;
            }
            _1684 = frontier_phi_37_33_ladder;
        }
        float _1686 = isnan(_1611) ? _1410 : (isnan(_1410) ? _1611 : min(_1410, _1611));
        float _1687 = isnan(_1684) ? _1686 : (isnan(_1686) ? _1684 : min(_1686, _1684));
        float _1691 = (_1687 * _1376) + _1365;
        float _1692 = (_1687 * _1379) + _1369;
        float _1693 = (_1687 * _1382) + _1373;
        float _1694 = _1687 * 9.9999997473787516355514526367188e-05;
        float _1696 = (-1.0) - _1694;
        float _1698 = _1694 + 1.0;
        float frontier_phi_16_37_ladder;
        float frontier_phi_16_37_ladder_1;
        float frontier_phi_16_37_ladder_2;
        if ((_1693 > _1698) || ((_1693 < _1696) || ((_1692 > _1698) || ((_1692 < _1696) || ((_1691 < _1696) || (_1691 > _1698))))))
        {
            frontier_phi_16_37_ladder = 0.0;
            frontier_phi_16_37_ladder_1 = 0.0;
            frontier_phi_16_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1769 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1693, cbModelParam._m0[9u].z, fma(_1692, cbModelParam._m0[9u].y, _1691 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1693, cbModelParam._m0[10u].z, fma(_1692, cbModelParam._m0[10u].y, _1691 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1693, cbModelParam._m0[11u].z, fma(_1692, cbModelParam._m0[11u].y, _1691 * cbModelParam._m0[11u].x))), _1316);
            frontier_phi_16_37_ladder = _1769.z * cbModelParam._m0[1u].y;
            frontier_phi_16_37_ladder_1 = _1769.y * cbModelParam._m0[1u].y;
            frontier_phi_16_37_ladder_2 = _1769.x * cbModelParam._m0[1u].y;
        }
        _1398 = frontier_phi_16_37_ladder_2;
        _1400 = frontier_phi_16_37_ladder_1;
        _1402 = frontier_phi_16_37_ladder;
    }
    else
    {
        vec4 _1386 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_474, _475, _476), _1316);
        _1398 = _1386.x * cbModelParam._m0[1u].y;
        _1400 = _1386.y * cbModelParam._m0[1u].y;
        _1402 = _1386.z * cbModelParam._m0[1u].y;
    }
    float _1406 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _300);
    float _1407 = isnan(_1406) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1406 : min(cbModelParam._m0[25u].w, _1406));
    float _1500;
    float _1502;
    float _1504;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1464 = fma(_535, cbModelParam._m0[21u].z, fma(_531, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _527)) + cbModelParam._m0[21u].w;
        float _1468 = fma(_535, cbModelParam._m0[22u].z, fma(_531, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _527)) + cbModelParam._m0[22u].w;
        float _1472 = fma(_535, cbModelParam._m0[23u].z, fma(_531, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _527)) + cbModelParam._m0[23u].w;
        float _1475 = fma(_476, cbModelParam._m0[21u].z, fma(_475, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _474));
        float _1478 = fma(_476, cbModelParam._m0[22u].z, fma(_475, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _474));
        float _1481 = fma(_476, cbModelParam._m0[23u].z, fma(_475, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _474));
        float _1616;
        if (_1475 > 0.0)
        {
            _1616 = abs((1.0 - _1464) / _1475);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1475 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1464 + 1.0) / _1475);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1616 = frontier_phi_28_24_ladder;
        }
        float _1711;
        if (_1478 > 0.0)
        {
            _1711 = abs((1.0 - _1468) / _1478);
        }
        else
        {
            float frontier_phi_39_35_ladder;
            if (_1478 < 0.0)
            {
                frontier_phi_39_35_ladder = abs((_1468 + 1.0) / _1478);
            }
            else
            {
                frontier_phi_39_35_ladder = 5000.0;
            }
            _1711 = frontier_phi_39_35_ladder;
        }
        float _1982;
        if (_1481 > 0.0)
        {
            _1982 = abs((1.0 - _1472) / _1481);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1481 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1472 + 1.0) / _1481);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _1982 = frontier_phi_48_45_ladder;
        }
        float _1984 = isnan(_1711) ? _1616 : (isnan(_1616) ? _1711 : min(_1616, _1711));
        float _1985 = isnan(_1982) ? _1984 : (isnan(_1984) ? _1982 : min(_1984, _1982));
        float _1989 = (_1985 * _1475) + _1464;
        float _1990 = (_1985 * _1478) + _1468;
        float _1991 = (_1985 * _1481) + _1472;
        float _1992 = _1985 * 9.9999997473787516355514526367188e-05;
        float _1993 = (-1.0) - _1992;
        float _1995 = _1992 + 1.0;
        float frontier_phi_25_48_ladder;
        float frontier_phi_25_48_ladder_1;
        float frontier_phi_25_48_ladder_2;
        if ((_1991 > _1995) || ((_1991 < _1993) || ((_1990 > _1995) || ((_1990 < _1993) || ((_1989 < _1993) || (_1989 > _1995))))))
        {
            frontier_phi_25_48_ladder = 0.0;
            frontier_phi_25_48_ladder_1 = 0.0;
            frontier_phi_25_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2109 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_1991, cbModelParam._m0[17u].z, fma(_1990, cbModelParam._m0[17u].y, _1989 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_1991, cbModelParam._m0[18u].z, fma(_1990, cbModelParam._m0[18u].y, _1989 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_1991, cbModelParam._m0[19u].z, fma(_1990, cbModelParam._m0[19u].y, _1989 * cbModelParam._m0[19u].x))), _1407);
            frontier_phi_25_48_ladder = _2109.z * cbModelParam._m0[1u].z;
            frontier_phi_25_48_ladder_1 = _2109.y * cbModelParam._m0[1u].z;
            frontier_phi_25_48_ladder_2 = _2109.x * cbModelParam._m0[1u].z;
        }
        _1500 = frontier_phi_25_48_ladder_2;
        _1502 = frontier_phi_25_48_ladder_1;
        _1504 = frontier_phi_25_48_ladder;
    }
    else
    {
        vec4 _1484 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_474, _475, _476), _1407);
        _1500 = _1484.x * cbModelParam._m0[1u].z;
        _1502 = _1484.y * cbModelParam._m0[1u].z;
        _1504 = _1484.z * cbModelParam._m0[1u].z;
    }
    float _1516 = ((((1.0 - _495) * ((_482 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_495 * _482)) * _466;
    float _1517 = _1516 * ((cbModelParam._m0[1u].w * (_1500 - _1398)) + _1398);
    float _1518 = _1516 * ((cbModelParam._m0[1u].w * (_1502 - _1400)) + _1400);
    float _1519 = _1516 * ((cbModelParam._m0[1u].w * (_1504 - _1402)) + _1402);
    float _1522 = fma(_1519, cbSceneParam._m0[89u].z, fma(_1518, cbSceneParam._m0[89u].y, _1517 * cbSceneParam._m0[89u].x));
    float _1525 = fma(_1519, cbSceneParam._m0[90u].z, fma(_1518, cbSceneParam._m0[90u].y, _1517 * cbSceneParam._m0[90u].x));
    float _1528 = fma(_1519, cbSceneParam._m0[91u].z, fma(_1518, cbSceneParam._m0[91u].y, _1517 * cbSceneParam._m0[91u].x));
    vec4 _1536 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_400, _401));
    float _1538 = _1536.w;
    float _1550 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1538);
    float _1551 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1538);
    float _1552 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1538);
    uvec4 _1556 = floatBitsToUint(cbInstanceData._m0[_440 + 5u]);
    uint _1558 = _1556.x * 14u;
    uint _1559 = _1558 + 13u;
    float _1566 = _466 + (-1.0);
    float _1571 = (cbLight._m0[_1559].x * _1566) + 1.0;
    float _1572 = (cbLight._m0[_1559].y * _1566) + 1.0;
    float _1573 = (cbLight._m0[_1559].z * _1566) + 1.0;
    float _1574 = (cbLight._m0[_1559].w * _1566) + 1.0;
    uint _1576 = _1558 + 4u;
    float _1588 = dot(vec3(cbLight._m0[_1558].xyz), vec3(_296, _297, _298));
    float _1591 = isnan(1.0) ? _1571 : (isnan(_1571) ? 1.0 : min(_1571, 1.0));
    float _1592 = cbLight._m0[_1576].x * _1550;
    float _1593 = cbLight._m0[_1576].y * _1551;
    float _1594 = cbLight._m0[_1576].z * _1552;
    uint _1595 = _1558 + 5u;
    float _1607 = dot(vec3(cbLight._m0[_1558 | 1u].xyz), vec3(_296, _297, _298));
    float _1610 = isnan(1.0) ? _1572 : (isnan(_1572) ? 1.0 : min(_1572, 1.0));
    float _1675;
    float _1676;
    float _1677;
    if (_301 == 0.0)
    {
        float _4008 = isnan(0.0) ? _1588 : (isnan(_1588) ? 0.0 : max(_1588, 0.0));
        float _4019 = isnan(0.0) ? _1607 : (isnan(_1607) ? 0.0 : max(_1607, 0.0));
        float _1629 = (isnan(1.0) ? _4008 : (isnan(_4008) ? 1.0 : min(_4008, 1.0))) * 0.3183098733425140380859375;
        float _1631 = (isnan(1.0) ? _4019 : (isnan(_4019) ? 1.0 : min(_4019, 1.0))) * 0.3183098733425140380859375;
        _1675 = ((cbLight._m0[_1595].x * _1610) * _1631) + ((_1592 * _1591) * _1629);
        _1676 = ((_1610 * cbLight._m0[_1595].y) * _1631) + ((_1593 * _1591) * _1629);
        _1677 = ((_1610 * cbLight._m0[_1595].z) * _1631) + ((_1594 * _1591) * _1629);
    }
    else
    {
        float _1641 = _1588 + _301;
        float _1644 = (_301 * 2.0) + 1.0;
        float _1645 = (isnan(0.0) ? _1641 : (isnan(_1641) ? 0.0 : max(_1641, 0.0))) / _1644;
        float _1652 = _1607 + _301;
        float _1654 = (isnan(0.0) ? _1652 : (isnan(_1652) ? 0.0 : max(_1652, 0.0))) / _1644;
        _1675 = (((_1654 * cbLight._m0[_1595].x) * _1610) + ((_1592 * _1645) * _1591)) * 0.3183098733425140380859375;
        _1676 = (((_1654 * cbLight._m0[_1595].y) * _1610) + ((_1593 * _1645) * _1591)) * 0.3183098733425140380859375;
        _1677 = (((_1654 * cbLight._m0[_1595].z) * _1610) + ((_1594 * _1645) * _1591)) * 0.3183098733425140380859375;
    }
    uvec4 _1681 = floatBitsToUint(cbLight._m0[_1558 + 12u]);
    bool _1683 = _1681.x == 0u;
    float _1716;
    float _1718;
    float _1720;
    if (_1683)
    {
        _1716 = _1675;
        _1718 = _1676;
        _1720 = _1677;
    }
    else
    {
        uint _1724 = _1558 + 6u;
        float _1740 = (dot(vec3(cbLight._m0[_1558 + 2u].xyz), vec3(_296, _297, _298)) * 0.5) + 0.5;
        float _1741 = _1740 * _1740;
        float _4040 = isnan(0.0) ? _1741 : (isnan(_1741) ? 0.0 : max(_1741, 0.0));
        float _1742 = isnan(1.0) ? _4040 : (isnan(_4040) ? 1.0 : min(_4040, 1.0));
        float _1743 = isnan(1.0) ? _1573 : (isnan(_1573) ? 1.0 : min(_1573, 1.0));
        _1716 = (((cbLight._m0[_1724].x * 0.3183098733425140380859375) * _1742) * _1743) + _1675;
        _1718 = (((cbLight._m0[_1724].y * 0.3183098733425140380859375) * _1742) * _1743) + _1676;
        _1720 = (((cbLight._m0[_1724].z * 0.3183098733425140380859375) * _1742) * _1743) + _1677;
    }
    bool _1723 = _1681.y == 0u;
    float _1778;
    float _1780;
    float _1782;
    if (_1723)
    {
        _1778 = _1716;
        _1780 = _1718;
        _1782 = _1720;
    }
    else
    {
        uint _1953 = _1558 + 7u;
        float _1969 = (dot(vec3(cbLight._m0[_1558 + 3u].xyz), vec3(_296, _297, _298)) * 0.5) + 0.5;
        float _1970 = _1969 * _1969;
        float _4056 = isnan(0.0) ? _1970 : (isnan(_1970) ? 0.0 : max(_1970, 0.0));
        float _1971 = isnan(1.0) ? _4056 : (isnan(_4056) ? 1.0 : min(_4056, 1.0));
        float _1972 = isnan(1.0) ? _1574 : (isnan(_1574) ? 1.0 : min(_1574, 1.0));
        _1778 = (((cbLight._m0[_1953].x * 0.3183098733425140380859375) * _1971) * _1972) + _1716;
        _1780 = (((cbLight._m0[_1953].y * 0.3183098733425140380859375) * _1971) * _1972) + _1718;
        _1782 = (((cbLight._m0[_1953].z * 0.3183098733425140380859375) * _1971) * _1972) + _1720;
    }
    uint _1787 = _1558 + 8u;
    float _1803 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1558].w)) * _300) * 0.949999988079071044921875);
    float _1804 = _1803 * _1803;
    float _1805 = cbLight._m0[_1558].x + _379;
    float _1806 = cbLight._m0[_1558].y + _380;
    float _1807 = cbLight._m0[_1558].z + _381;
    float _1811 = inversesqrt(dot(vec3(_1805, _1806, _1807), vec3(_1805, _1806, _1807)));
    float _1812 = _1811 * _1805;
    float _1813 = _1811 * _1806;
    float _1814 = _1811 * _1807;
    float _1815 = dot(vec3(_296, _297, _298), vec3(cbLight._m0[_1558].xyz));
    float _4072 = isnan(0.0) ? _1815 : (isnan(_1815) ? 0.0 : max(_1815, 0.0));
    float _1818 = isnan(1.0) ? _4072 : (isnan(_4072) ? 1.0 : min(_4072, 1.0));
    float _4083 = isnan(0.0) ? _467 : (isnan(_467) ? 0.0 : max(_467, 0.0));
    float _1819 = isnan(1.0) ? _4083 : (isnan(_4083) ? 1.0 : min(_4083, 1.0));
    float _1820 = dot(vec3(_296, _297, _298), vec3(_1812, _1813, _1814));
    float _4094 = isnan(0.0) ? _1820 : (isnan(_1820) ? 0.0 : max(_1820, 0.0));
    float _1823 = isnan(1.0) ? _4094 : (isnan(_4094) ? 1.0 : min(_4094, 1.0));
    float _1824 = dot(vec3(cbLight._m0[_1558].xyz), vec3(_1812, _1813, _1814));
    float _4105 = isnan(0.0) ? _1824 : (isnan(_1824) ? 0.0 : max(_1824, 0.0));
    float _1828 = _1804 * _1804;
    float _1832 = ((_1823 * _1823) * (_1828 + (-1.0))) + 1.0;
    float _1843 = (exp2(log2(1.0 - (isnan(1.0) ? _4105 : (isnan(_4105) ? 1.0 : min(_4105, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1844 = 1.0 - _1804;
    float _1855 = (0.5 / (((_1819 * ((_1818 * _1844) + _1804)) + 9.9999999392252902907785028219223e-09) + (((_1819 * _1844) + _1804) * _1818))) * _1818;
    float _4116 = isnan(0.0) ? _1855 : (isnan(_1855) ? 0.0 : max(_1855, 0.0));
    float _1857 = (isnan(1.0) ? _4116 : (isnan(_4116) ? 1.0 : min(_4116, 1.0))) * (_1828 / ((_1832 * _1832) * 3.141590118408203125));
    float _1858 = isnan(1.0) ? _1571 : (isnan(_1571) ? 1.0 : min(_1571, 1.0));
    uint _1871 = _1558 | 1u;
    uint _1875 = _1558 + 9u;
    float _1889 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1871].w)) * _300) * 0.949999988079071044921875);
    float _1890 = _1889 * _1889;
    float _1891 = cbLight._m0[_1871].x + _379;
    float _1892 = cbLight._m0[_1871].y + _380;
    float _1893 = cbLight._m0[_1871].z + _381;
    float _1897 = inversesqrt(dot(vec3(_1891, _1892, _1893), vec3(_1891, _1892, _1893)));
    float _1898 = _1897 * _1891;
    float _1899 = _1897 * _1892;
    float _1900 = _1897 * _1893;
    float _1901 = dot(vec3(_296, _297, _298), vec3(cbLight._m0[_1871].xyz));
    float _4132 = isnan(0.0) ? _1901 : (isnan(_1901) ? 0.0 : max(_1901, 0.0));
    float _1904 = isnan(1.0) ? _4132 : (isnan(_4132) ? 1.0 : min(_4132, 1.0));
    float _1905 = dot(vec3(_296, _297, _298), vec3(_1898, _1899, _1900));
    float _4143 = isnan(0.0) ? _1905 : (isnan(_1905) ? 0.0 : max(_1905, 0.0));
    float _1908 = isnan(1.0) ? _4143 : (isnan(_4143) ? 1.0 : min(_4143, 1.0));
    float _1909 = dot(vec3(cbLight._m0[_1871].xyz), vec3(_1898, _1899, _1900));
    float _4154 = isnan(0.0) ? _1909 : (isnan(_1909) ? 0.0 : max(_1909, 0.0));
    float _1913 = _1890 * _1890;
    float _1917 = ((_1908 * _1908) * (_1913 + (-1.0))) + 1.0;
    float _1926 = (exp2(log2(1.0 - (isnan(1.0) ? _4154 : (isnan(_4154) ? 1.0 : min(_4154, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1927 = 1.0 - _1890;
    float _1937 = (0.5 / (((_1819 * ((_1904 * _1927) + _1890)) + 9.9999999392252902907785028219223e-09) + (((_1819 * _1927) + _1890) * _1904))) * _1904;
    float _4165 = isnan(0.0) ? _1937 : (isnan(_1937) ? 0.0 : max(_1937, 0.0));
    float _1939 = (isnan(1.0) ? _4165 : (isnan(_4165) ? 1.0 : min(_4165, 1.0))) * (_1913 / ((_1917 * _1917) * 3.141590118408203125));
    float _1940 = isnan(1.0) ? _1572 : (isnan(_1572) ? 1.0 : min(_1572, 1.0));
    float _1950 = (((_1926 * cbLight._m0[_1875].x) * _1939) * _1940) + ((((cbLight._m0[_1787].x * _1550) * _1843) * _1857) * _1858);
    float _1951 = (((_1926 * cbLight._m0[_1875].y) * _1939) * _1940) + ((((cbLight._m0[_1787].y * _1551) * _1843) * _1857) * _1858);
    float _1952 = (((_1926 * cbLight._m0[_1875].z) * _1939) * _1940) + ((((cbLight._m0[_1787].z * _1552) * _1843) * _1857) * _1858);
    float _2008;
    float _2010;
    float _2012;
    if (_1683)
    {
        _2008 = _1950;
        _2010 = _1951;
        _2012 = _1952;
    }
    else
    {
        uint _2014 = _1558 + 2u;
        uint _2018 = _1558 + 10u;
        float _2032 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2014].w)) * _300) * 0.949999988079071044921875);
        float _2033 = _2032 * _2032;
        float _2034 = cbLight._m0[_2014].x + _379;
        float _2035 = cbLight._m0[_2014].y + _380;
        float _2036 = cbLight._m0[_2014].z + _381;
        float _2040 = inversesqrt(dot(vec3(_2034, _2035, _2036), vec3(_2034, _2035, _2036)));
        float _2041 = _2040 * _2034;
        float _2042 = _2040 * _2035;
        float _2043 = _2040 * _2036;
        float _2044 = dot(vec3(_296, _297, _298), vec3(cbLight._m0[_2014].xyz));
        float _4181 = isnan(0.0) ? _2044 : (isnan(_2044) ? 0.0 : max(_2044, 0.0));
        float _2047 = isnan(1.0) ? _4181 : (isnan(_4181) ? 1.0 : min(_4181, 1.0));
        float _2048 = dot(vec3(_296, _297, _298), vec3(_2041, _2042, _2043));
        float _4192 = isnan(0.0) ? _2048 : (isnan(_2048) ? 0.0 : max(_2048, 0.0));
        float _2051 = isnan(1.0) ? _4192 : (isnan(_4192) ? 1.0 : min(_4192, 1.0));
        float _2052 = dot(vec3(cbLight._m0[_2014].xyz), vec3(_2041, _2042, _2043));
        float _4203 = isnan(0.0) ? _2052 : (isnan(_2052) ? 0.0 : max(_2052, 0.0));
        float _2056 = _2033 * _2033;
        float _2060 = ((_2051 * _2051) * (_2056 + (-1.0))) + 1.0;
        float _2069 = (exp2(log2(1.0 - (isnan(1.0) ? _4203 : (isnan(_4203) ? 1.0 : min(_4203, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2070 = 1.0 - _2033;
        float _2080 = (0.5 / (((_1819 * ((_2047 * _2070) + _2033)) + 9.9999999392252902907785028219223e-09) + (((_1819 * _2070) + _2033) * _2047))) * _2047;
        float _4214 = isnan(0.0) ? _2080 : (isnan(_2080) ? 0.0 : max(_2080, 0.0));
        float _2082 = (isnan(1.0) ? _4214 : (isnan(_4214) ? 1.0 : min(_4214, 1.0))) * (_2056 / ((_2060 * _2060) * 3.141590118408203125));
        float _2083 = isnan(1.0) ? _1573 : (isnan(_1573) ? 1.0 : min(_1573, 1.0));
        _2008 = (((_2069 * cbLight._m0[_2018].x) * _2082) * _2083) + _1950;
        _2010 = (((_2069 * cbLight._m0[_2018].y) * _2082) * _2083) + _1951;
        _2012 = (((_2069 * cbLight._m0[_2018].z) * _2082) * _2083) + _1952;
    }
    float _2114;
    float _2116;
    float _2118;
    if (_1723)
    {
        _2114 = _2008;
        _2116 = _2010;
        _2118 = _2012;
    }
    else
    {
        uint _2125 = _1558 + 3u;
        uint _2129 = _1558 + 11u;
        float _2143 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2125].w)) * _300) * 0.949999988079071044921875);
        float _2144 = _2143 * _2143;
        float _2145 = cbLight._m0[_2125].x + _379;
        float _2146 = cbLight._m0[_2125].y + _380;
        float _2147 = cbLight._m0[_2125].z + _381;
        float _2151 = inversesqrt(dot(vec3(_2145, _2146, _2147), vec3(_2145, _2146, _2147)));
        float _2152 = _2151 * _2145;
        float _2153 = _2151 * _2146;
        float _2154 = _2151 * _2147;
        float _2155 = dot(vec3(_296, _297, _298), vec3(cbLight._m0[_2125].xyz));
        float _4230 = isnan(0.0) ? _2155 : (isnan(_2155) ? 0.0 : max(_2155, 0.0));
        float _2158 = isnan(1.0) ? _4230 : (isnan(_4230) ? 1.0 : min(_4230, 1.0));
        float _2159 = dot(vec3(_296, _297, _298), vec3(_2152, _2153, _2154));
        float _4241 = isnan(0.0) ? _2159 : (isnan(_2159) ? 0.0 : max(_2159, 0.0));
        float _2162 = isnan(1.0) ? _4241 : (isnan(_4241) ? 1.0 : min(_4241, 1.0));
        float _2163 = dot(vec3(cbLight._m0[_2125].xyz), vec3(_2152, _2153, _2154));
        float _4252 = isnan(0.0) ? _2163 : (isnan(_2163) ? 0.0 : max(_2163, 0.0));
        float _2167 = _2144 * _2144;
        float _2171 = ((_2162 * _2162) * (_2167 + (-1.0))) + 1.0;
        float _2180 = (exp2(log2(1.0 - (isnan(1.0) ? _4252 : (isnan(_4252) ? 1.0 : min(_4252, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2181 = 1.0 - _2144;
        float _2191 = (0.5 / (((_1819 * ((_2158 * _2181) + _2144)) + 9.9999999392252902907785028219223e-09) + (((_1819 * _2181) + _2144) * _2158))) * _2158;
        float _4263 = isnan(0.0) ? _2191 : (isnan(_2191) ? 0.0 : max(_2191, 0.0));
        float _2193 = (isnan(1.0) ? _4263 : (isnan(_4263) ? 1.0 : min(_4263, 1.0))) * (_2167 / ((_2171 * _2171) * 3.141590118408203125));
        float _2194 = isnan(1.0) ? _1574 : (isnan(_1574) ? 1.0 : min(_1574, 1.0));
        _2114 = (((_2180 * cbLight._m0[_2129].x) * _2193) * _2194) + _2008;
        _2116 = (((_2180 * cbLight._m0[_2129].y) * _2193) * _2194) + _2010;
        _2118 = (((_2180 * cbLight._m0[_2129].z) * _2193) * _2194) + _2012;
    }
    float _2303;
    float _2305;
    float _2307;
    float _2309;
    float _2311;
    float _2313;
    if (_1556.y == 0u)
    {
        float _2243 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2244 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2243;
        float _2245 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2243;
        float _2246 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2243;
        uvec4 _2258 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2259 = _2258.x;
        uint _2270 = uint((float(_2258.y) * floor(float(uint(cbSceneParam._m0[85u].y * _401) / _2259))) + floor(float(uint(cbSceneParam._m0[85u].x * _400) / _2259)));
        float _2280 = (log2(_2246 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2281 = isnan(0.0) ? _2280 : (isnan(_2280) ? 0.0 : max(_2280, 0.0));
        uint _2284 = uint(isnan(14.0) ? _2281 : (isnan(_2281) ? 14.0 : min(_2281, 14.0)));
        uvec4 _2289 = texelFetch(g_lightClusterGridBuffer, int(((_2284 << 2u) + (_2270 << 6u)) >> 2u));
        uint _2290 = _2289.x;
        uint _2291 = _2258.z;
        float _2316;
        float _2318;
        float _2320;
        float _2322;
        float _2324;
        float _2326;
        if (((((1u << ((_2291 >> 4u) & 15u)) + 4294967295u) & _2290) == 0u) || ((_2291 & 240u) == 0u))
        {
            _2316 = 0.0;
            _2318 = 0.0;
            _2320 = 0.0;
            _2322 = 0.0;
            _2324 = 0.0;
            _2326 = 0.0;
        }
        else
        {
            float _2317;
            float _2319;
            float _2321;
            float _2323;
            float _2325;
            float _2327;
            float _2500 = 0.0;
            float _2501 = 0.0;
            float _2502 = 0.0;
            float _2503 = 0.0;
            float _2504 = 0.0;
            float _2505 = 0.0;
            uint _2506 = 0u;
            uint _2515;
            bool _2516;
            for (;;)
            {
                _2515 = texelFetch(g_lightClassification, int((((_2284 << 5u) + (_2270 << 9u)) + (_2506 << 2u)) >> 2u)).x;
                _2516 = _2515 == 0u;
                float frontier_phi_67_pred;
                float frontier_phi_67_pred_1;
                float frontier_phi_67_pred_2;
                float frontier_phi_67_pred_3;
                float frontier_phi_67_pred_4;
                float frontier_phi_67_pred_5;
                if (_2516)
                {
                    frontier_phi_67_pred = _2500;
                    frontier_phi_67_pred_1 = _2505;
                    frontier_phi_67_pred_2 = _2504;
                    frontier_phi_67_pred_3 = _2503;
                    frontier_phi_67_pred_4 = _2502;
                    frontier_phi_67_pred_5 = _2501;
                }
                else
                {
                    float _2701;
                    float _2702;
                    float _2703;
                    float _2704;
                    float _2705;
                    float _2706;
                    uint _2707;
                    _2701 = _2500;
                    _2702 = _2501;
                    _2703 = _2502;
                    _2704 = _2503;
                    _2705 = _2504;
                    _2706 = _2505;
                    _2707 = _2515;
                    float _2616;
                    float _2617;
                    float _2618;
                    float _2619;
                    float _2620;
                    float _2621;
                    for (;;)
                    {
                        uint _2711 = uint(findLSB(_2707)) + (_2506 << 5u);
                        uint _2708 = (_2707 + 4294967295u) & _2707;
                        uint _2713 = _2711 * 48u;
                        vec4 _2727 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2713)).x, texelFetch(g_PointLightRenderingBuffer, int(_2713 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2713 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2713 + 3u)).x));
                        uint _2733 = (_2711 * 48u) + 4u;
                        vec4 _2746 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2733)).x, texelFetch(g_PointLightRenderingBuffer, int(_2733 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2733 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2733 + 3u)).x));
                        float _2747 = _2746.x;
                        float _2748 = _2746.y;
                        float _2749 = _2746.z;
                        uint _2752 = (_2711 * 48u) + 8u;
                        vec3 _2763 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2752)).x, texelFetch(g_PointLightRenderingBuffer, int(_2752 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2752 + 2u)).x));
                        uint _2768 = (_2711 * 48u) + 12u;
                        vec2 _2776 = uintBitsToFloat(uvec2(texelFetch(g_PointLightRenderingBuffer, int(_2768)).x, texelFetch(g_PointLightRenderingBuffer, int(_2768 + 1u)).x));
                        float _2782 = inversesqrt(dot(vec3(_2244, _2245, _2246), vec3(_2244, _2245, _2246)));
                        float _2783 = _2782 * _2244;
                        float _2784 = _2782 * _2245;
                        float _2785 = _2782 * _2246;
                        float _2786 = _2727.x - _2244;
                        float _2787 = _2727.y - _2245;
                        float _2788 = _2727.z - _2246;
                        float _2789 = dot(vec3(_2786, _2787, _2788), vec3(_2786, _2787, _2788));
                        float _2792 = inversesqrt(_2789);
                        float _2793 = _2792 * _2786;
                        float _2794 = _2792 * _2787;
                        float _2795 = _2792 * _2788;
                        float _2796 = dot(vec3(_421, _424, _427), vec3(_2793, _2794, _2795));
                        float _2801 = 1.0 - (_2789 * _2727.w);
                        float _4289 = isnan(0.0) ? _2801 : (isnan(_2801) ? 0.0 : max(_2801, 0.0));
                        float _2802 = isnan(1.0) ? _4289 : (isnan(_4289) ? 1.0 : min(_4289, 1.0));
                        float _2803 = sqrt(_2789) * _2746.w;
                        float _2806 = 1.39999997615814208984375 / (_2803 + 1.39999997615814208984375);
                        float _2807 = _2806 * _2806;
                        float _2808 = 1.0 - _2807;
                        float _2810 = (_2808 * _2808) * _301;
                        float _2813 = ((_2808 * _2796) + _2807) + _2810;
                        float _2818 = _2803 * _2803;
                        float _2823 = ((isnan(0.0) ? _2813 : (isnan(_2813) ? 0.0 : max(_2813, 0.0))) * _2802) / (((_2810 * 2.0) + 1.0) * ((_2818 * 0.699999988079071044921875) + 1.0));
                        float _2827 = dot(vec3(_2793, _2794, _2795), vec3(_2783, _2784, _2785));
                        float _4305 = isnan(0.0) ? _2827 : (isnan(_2827) ? 0.0 : max(_2827, 0.0));
                        float _2834 = dot(vec3((-0.0) - _2783, (-0.0) - _2784, (-0.0) - _2785), vec3(_421, _424, _427)) + 1.0;
                        float _2836 = (isnan(0.0) ? _2834 : (isnan(_2834) ? 0.0 : max(_2834, 0.0))) * 0.5;
                        float _2843 = ((_2836 * _2836) * _2776.x) * exp2((_2776.y * 32.0) * log2(isnan(1.0) ? _4305 : (isnan(_4305) ? 1.0 : min(_4305, 1.0))));
                        float _2845 = _301 / (_301 + 1.0);
                        float _2861 = (-0.0) - _2244;
                        float _2862 = (-0.0) - _2245;
                        float _2863 = (-0.0) - _2246;
                        float _2867 = inversesqrt(dot(vec3(_2861, _2862, _2863), vec3(_2861, _2862, _2863)));
                        float _2868 = _2867 * _2861;
                        float _2869 = _2867 * _2862;
                        float _2870 = _2867 * _2863;
                        float _2878 = exp2(log2(1.0 / ((_2818 * 3.5) + 5.0)) * 0.25);
                        float _2879 = 1.0 - _482;
                        float _2886 = sqrt(1.0 - ((1.0 - (_2879 * _2879)) * (1.0 - (_2878 * _2878))));
                        float _2887 = _2886 * _2886;
                        float _2888 = _2887 * _2887;
                        float _2889 = _2868 + _2793;
                        float _2890 = _2869 + _2794;
                        float _2891 = _2870 + _2795;
                        float _2895 = inversesqrt(dot(vec3(_2889, _2890, _2891), vec3(_2889, _2890, _2891)));
                        float _2899 = dot(vec3(_421, _424, _427), vec3(_2868, _2869, _2870));
                        float _4321 = isnan(0.0) ? _2899 : (isnan(_2899) ? 0.0 : max(_2899, 0.0));
                        float _2902 = isnan(1.0) ? _4321 : (isnan(_4321) ? 1.0 : min(_4321, 1.0));
                        float _2903 = dot(vec3(_421, _424, _427), vec3(_2895 * _2889, _2895 * _2890, _2895 * _2891));
                        float _4332 = isnan(0.0) ? _2903 : (isnan(_2903) ? 0.0 : max(_2903, 0.0));
                        float _2906 = isnan(1.0) ? _4332 : (isnan(_4332) ? 1.0 : min(_4332, 1.0));
                        float _2910 = ((_2906 * _2906) * (_2888 + (-1.0))) + 1.0;
                        float _2911 = _2806 * _2887;
                        float _2912 = _2911 * _2911;
                        float _2915 = ((1.0 - _2912) * _2796) + _2912;
                        float _4343 = isnan(0.0) ? _2915 : (isnan(_2915) ? 0.0 : max(_2915, 0.0));
                        float _2916 = isnan(1.0) ? _4343 : (isnan(_4343) ? 1.0 : min(_4343, 1.0));
                        float _2917 = 1.0 - _2887;
                        float _2927 = (0.5 / (((_2916 * ((_2902 * _2917) + _2887)) + 9.9999999392252902907785028219223e-09) + (((_2916 * _2917) + _2887) * _2902))) * _2916;
                        float _4354 = isnan(0.0) ? _2927 : (isnan(_2927) ? 0.0 : max(_2927, 0.0));
                        float _2938 = (((_2888 * 3.1415927410125732421875) * (isnan(1.0) ? _4354 : (isnan(_4354) ? 1.0 : min(_4354, 1.0)))) / ((_2910 * _2910) * ((_2818 * 2.1991131305694580078125) + 3.141590118408203125))) * _2802;
                        _2619 = (((((_2747 * 0.3183098733425140380859375) * _2845) * _2843) + _2747) * _2823) + _2704;
                        _2620 = (((((_2748 * 0.3183098733425140380859375) * _2845) * _2843) + _2748) * _2823) + _2705;
                        _2621 = (((((_2749 * 0.3183098733425140380859375) * _2845) * _2843) + _2749) * _2823) + _2706;
                        _2616 = (_2938 * _2763.x) + _2701;
                        _2617 = (_2938 * _2763.y) + _2702;
                        _2618 = (_2938 * _2763.z) + _2703;
                        if (_2708 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2701 = _2616;
                            _2702 = _2617;
                            _2703 = _2618;
                            _2704 = _2619;
                            _2705 = _2620;
                            _2706 = _2621;
                            _2707 = _2708;
                        }
                    }
                    frontier_phi_67_pred = _2616;
                    frontier_phi_67_pred_1 = _2621;
                    frontier_phi_67_pred_2 = _2620;
                    frontier_phi_67_pred_3 = _2619;
                    frontier_phi_67_pred_4 = _2618;
                    frontier_phi_67_pred_5 = _2617;
                }
                _2317 = frontier_phi_67_pred;
                _2327 = frontier_phi_67_pred_1;
                _2325 = frontier_phi_67_pred_2;
                _2323 = frontier_phi_67_pred_3;
                _2321 = frontier_phi_67_pred_4;
                _2319 = frontier_phi_67_pred_5;
                uint _2507 = _2506 + 1u;
                if (_2507 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2500 = _2317;
                    _2501 = _2319;
                    _2502 = _2321;
                    _2503 = _2323;
                    _2504 = _2325;
                    _2505 = _2327;
                    _2506 = _2507;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2316 = _2317;
            _2318 = _2319;
            _2320 = _2321;
            _2322 = _2323;
            _2324 = _2325;
            _2326 = _2327;
        }
        uvec4 _2330 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2331 = _2330.z;
        uint _2333 = (_2331 >> 8u) & 15u;
        float _2468;
        float _2470;
        float _2472;
        float _2474;
        float _2476;
        float _2478;
        if (((4294967295u << _2333) & _2290) == 0u)
        {
            _2468 = _2316;
            _2470 = _2318;
            _2472 = _2320;
            _2474 = _2322;
            _2476 = _2324;
            _2478 = _2326;
        }
        else
        {
            float _2493 = inversesqrt(dot(vec3(_2244, _2245, _2246), vec3(_2244, _2245, _2246)));
            float _2494 = _2493 * _2244;
            float _2495 = _2493 * _2245;
            float _2496 = _2493 * _2246;
            float frontier_phi_61_62_ladder;
            float frontier_phi_61_62_ladder_1;
            float frontier_phi_61_62_ladder_2;
            float frontier_phi_61_62_ladder_3;
            float frontier_phi_61_62_ladder_4;
            float frontier_phi_61_62_ladder_5;
            if (_2333 < ((_2331 >> 12u) & 15u))
            {
                float _2469;
                float _2471;
                float _2473;
                float _2475;
                float _2477;
                float _2479;
                float _2684 = _2316;
                float _2685 = _2318;
                float _2686 = _2320;
                float _2687 = _2322;
                float _2688 = _2324;
                float _2689 = _2326;
                uint _2690 = _2333;
                uint _2699;
                bool _2700;
                for (;;)
                {
                    _2699 = texelFetch(g_lightClassification, int((((_2284 << 5u) + (_2270 << 9u)) + (_2690 << 2u)) >> 2u)).x;
                    _2700 = _2699 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_2700)
                    {
                        frontier_phi_79_pred = _2689;
                        frontier_phi_79_pred_1 = _2688;
                        frontier_phi_79_pred_2 = _2687;
                        frontier_phi_79_pred_3 = _2686;
                        frontier_phi_79_pred_4 = _2685;
                        frontier_phi_79_pred_5 = _2684;
                    }
                    else
                    {
                        float _2986;
                        float _2987;
                        float _2988;
                        float _2989;
                        float _2990;
                        float _2991;
                        float _3339;
                        float _3340;
                        float _3341;
                        float _3342;
                        float _3343;
                        float _3344;
                        float _3008 = _2684;
                        float _3009 = _2685;
                        float _3010 = _2686;
                        float _3011 = _2687;
                        float _3012 = _2688;
                        float _3013 = _2689;
                        uint _3014 = _2699;
                        uint _3015;
                        vec4 _3040;
                        float _3041;
                        vec4 _3056;
                        float _3057;
                        float _3058;
                        float _3059;
                        vec3 _3071;
                        vec2 _3080;
                        vec4 _3096;
                        vec4 _3112;
                        float _3159;
                        bool _3160;
                        for (;;)
                        {
                            uint _3025 = ((_2690 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3014));
                            _3015 = (_3014 + 4294967295u) & _3014;
                            uint _3027 = _3025 * 40u;
                            _3040 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3027)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3027 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3027 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3027 + 3u)).x));
                            _3041 = _3040.w;
                            uint _3043 = (_3025 * 40u) + 4u;
                            _3056 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3043)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3043 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3043 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3043 + 3u)).x));
                            _3057 = _3056.x;
                            _3058 = _3056.y;
                            _3059 = _3056.z;
                            uint _3061 = (_3025 * 40u) + 8u;
                            _3071 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3061)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3061 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3061 + 2u)).x));
                            uint _3073 = (_3025 * 40u) + 12u;
                            _3080 = uintBitsToFloat(uvec2(texelFetch(g_SpotLightRenderingBuffer, int(_3073)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3073 + 1u)).x));
                            uint _3083 = (_3025 * 40u) + 16u;
                            _3096 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3083)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3083 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3083 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3083 + 3u)).x));
                            uint _3099 = (_3025 * 40u) + 20u;
                            _3112 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3099)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3099 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3099 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3099 + 3u)).x));
                            uint _3115 = (_3025 * 40u) + 24u;
                            vec4 _3128 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3115)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3115 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3115 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3115 + 3u)).x));
                            uint _3134 = (_3025 * 40u) + 28u;
                            vec4 _3147 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3134)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3134 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3134 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3134 + 3u)).x));
                            _3159 = fma(_2246, _3147.z, fma(_2245, _3147.y, _3147.x * _2244)) + _3147.w;
                            _3160 = !((fma(_2246, _3128.z, fma(_2245, _3128.y, _3128.x * _2244)) + _3128.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3160)
                            {
                                float _3186 = _3040.x - _2244;
                                float _3187 = _3040.y - _2245;
                                float _3188 = _3040.z - _2246;
                                float _3189 = dot(vec3(_3186, _3187, _3188), vec3(_3186, _3187, _3188));
                                float _3192 = inversesqrt(_3189);
                                float _3193 = _3192 * _3186;
                                float _3194 = _3192 * _3187;
                                float _3195 = _3192 * _3188;
                                float _3199 = 1.0 - (_3189 / (_3041 * _3041));
                                float _4365 = isnan(0.0) ? _3199 : (isnan(_3199) ? 0.0 : max(_3199, 0.0));
                                float _3200 = isnan(1.0) ? _4365 : (isnan(_4365) ? 1.0 : min(_4365, 1.0));
                                float _3204 = sqrt(_3189) * _3056.w;
                                float _3206 = 1.39999997615814208984375 / (_3204 + 1.39999997615814208984375);
                                float _3207 = _3206 * _3206;
                                float _3208 = 1.0 - _3207;
                                float _3210 = (_3208 * _3208) * _301;
                                float _3213 = ((_3208 * dot(vec3(_3193, _3194, _3195), vec3(_421, _424, _427))) + _3207) + _3210;
                                float _3218 = _3204 * _3204;
                                float _3223 = (fma(_2246, _3096.z, fma(_2245, _3096.y, _3096.x * _2244)) + _3096.w) / _3159;
                                float _3224 = (fma(_2246, _3112.z, fma(_2245, _3112.y, _3112.x * _2244)) + _3112.w) / _3159;
                                float _3228 = 1.0 - dot(vec2(_3223, _3224), vec2(_3223, _3224));
                                float _4381 = isnan(0.0) ? _3228 : (isnan(_3228) ? 0.0 : max(_3228, 0.0));
                                float _3229 = isnan(1.0) ? _4381 : (isnan(_4381) ? 1.0 : min(_4381, 1.0));
                                float _3230 = _3229 * (((isnan(0.0) ? _3213 : (isnan(_3213) ? 0.0 : max(_3213, 0.0))) * _3200) / (((_3210 * 2.0) + 1.0) * ((_3218 * 0.699999988079071044921875) + 1.0)));
                                float _3231 = (-0.0) - _2494;
                                float _3232 = (-0.0) - _2495;
                                float _3233 = (-0.0) - _2496;
                                float _3234 = dot(vec3(_3193, _3194, _3195), vec3(_2494, _2495, _2496));
                                float _4392 = isnan(0.0) ? _3234 : (isnan(_3234) ? 0.0 : max(_3234, 0.0));
                                float _3241 = dot(vec3(_3231, _3232, _3233), vec3(_421, _424, _427)) + 1.0;
                                float _3243 = (isnan(0.0) ? _3241 : (isnan(_3241) ? 0.0 : max(_3241, 0.0))) * 0.5;
                                float _3250 = ((_3243 * _3243) * _3080.x) * exp2((_3080.y * 32.0) * log2(isnan(1.0) ? _4392 : (isnan(_4392) ? 1.0 : min(_4392, 1.0))));
                                float _3252 = _301 / (_301 + 1.0);
                                float _3273 = exp2(log2(1.0 / ((_3218 * 3.5) + 5.0)) * 0.25);
                                float _3274 = 1.0 - _482;
                                float _3281 = sqrt(1.0 - ((1.0 - (_3274 * _3274)) * (1.0 - (_3273 * _3273))));
                                float _3282 = _3281 * _3281;
                                float _3283 = _3282 * _3282;
                                float _3284 = _3193 - _2494;
                                float _3285 = _3194 - _2495;
                                float _3286 = _3195 - _2496;
                                float _3290 = inversesqrt(dot(vec3(_3284, _3285, _3286), vec3(_3284, _3285, _3286)));
                                float _3294 = dot(vec3(_421, _424, _427), vec3(_3231, _3232, _3233));
                                float _4408 = isnan(0.0) ? _3294 : (isnan(_3294) ? 0.0 : max(_3294, 0.0));
                                float _3297 = isnan(1.0) ? _4408 : (isnan(_4408) ? 1.0 : min(_4408, 1.0));
                                float _3298 = dot(vec3(_421, _424, _427), vec3(_3290 * _3284, _3290 * _3285, _3290 * _3286));
                                float _4419 = isnan(0.0) ? _3298 : (isnan(_3298) ? 0.0 : max(_3298, 0.0));
                                float _3301 = isnan(1.0) ? _4419 : (isnan(_4419) ? 1.0 : min(_4419, 1.0));
                                float _3305 = ((_3301 * _3301) * (_3283 + (-1.0))) + 1.0;
                                float _3306 = _3206 * _3282;
                                float _3307 = _3306 * _3306;
                                float _3313 = ((1.0 - _3307) * dot(vec3(_421, _424, _427), vec3(_3193, _3194, _3195))) + _3307;
                                float _4430 = isnan(0.0) ? _3313 : (isnan(_3313) ? 0.0 : max(_3313, 0.0));
                                float _3314 = isnan(1.0) ? _4430 : (isnan(_4430) ? 1.0 : min(_4430, 1.0));
                                float _3315 = 1.0 - _3282;
                                float _3325 = (0.5 / (((_3314 * ((_3297 * _3315) + _3282)) + 9.9999999392252902907785028219223e-09) + (((_3314 * _3315) + _3282) * _3297))) * _3314;
                                float _4441 = isnan(0.0) ? _3325 : (isnan(_3325) ? 0.0 : max(_3325, 0.0));
                                float _3335 = (_3229 * _3200) * (((_3283 * 3.1415927410125732421875) * (isnan(1.0) ? _4441 : (isnan(_4441) ? 1.0 : min(_4441, 1.0)))) / ((_3305 * _3305) * ((_3218 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = ((((_3059 * 0.3183098733425140380859375) * _3252) * _3250) + _3059) * _3230;
                                frontier_phi_88_pred_1 = ((((_3057 * 0.3183098733425140380859375) * _3252) * _3250) + _3057) * _3230;
                                frontier_phi_88_pred_2 = _3335 * _3071.z;
                                frontier_phi_88_pred_3 = _3335 * _3071.y;
                                frontier_phi_88_pred_4 = _3335 * _3071.x;
                                frontier_phi_88_pred_5 = ((((_3058 * 0.3183098733425140380859375) * _3252) * _3250) + _3058) * _3230;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3344 = frontier_phi_88_pred;
                            _3342 = frontier_phi_88_pred_1;
                            _3341 = frontier_phi_88_pred_2;
                            _3340 = frontier_phi_88_pred_3;
                            _3339 = frontier_phi_88_pred_4;
                            _3343 = frontier_phi_88_pred_5;
                            _2989 = _3342 + _3011;
                            _2990 = _3343 + _3012;
                            _2991 = _3344 + _3013;
                            _2986 = _3339 + _3008;
                            _2987 = _3340 + _3009;
                            _2988 = _3341 + _3010;
                            if (_3015 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3008 = _2986;
                                _3009 = _2987;
                                _3010 = _2988;
                                _3011 = _2989;
                                _3012 = _2990;
                                _3013 = _2991;
                                _3014 = _3015;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _2991;
                        frontier_phi_79_pred_1 = _2990;
                        frontier_phi_79_pred_2 = _2989;
                        frontier_phi_79_pred_3 = _2988;
                        frontier_phi_79_pred_4 = _2987;
                        frontier_phi_79_pred_5 = _2986;
                    }
                    _2479 = frontier_phi_79_pred;
                    _2477 = frontier_phi_79_pred_1;
                    _2475 = frontier_phi_79_pred_2;
                    _2473 = frontier_phi_79_pred_3;
                    _2471 = frontier_phi_79_pred_4;
                    _2469 = frontier_phi_79_pred_5;
                    uint _2691 = _2690 + 1u;
                    if (_2691 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2684 = _2469;
                        _2685 = _2471;
                        _2686 = _2473;
                        _2687 = _2475;
                        _2688 = _2477;
                        _2689 = _2479;
                        _2690 = _2691;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_61_62_ladder = _2469;
                frontier_phi_61_62_ladder_1 = _2479;
                frontier_phi_61_62_ladder_2 = _2477;
                frontier_phi_61_62_ladder_3 = _2475;
                frontier_phi_61_62_ladder_4 = _2473;
                frontier_phi_61_62_ladder_5 = _2471;
            }
            else
            {
                frontier_phi_61_62_ladder = _2316;
                frontier_phi_61_62_ladder_1 = _2326;
                frontier_phi_61_62_ladder_2 = _2324;
                frontier_phi_61_62_ladder_3 = _2322;
                frontier_phi_61_62_ladder_4 = _2320;
                frontier_phi_61_62_ladder_5 = _2318;
            }
            _2468 = frontier_phi_61_62_ladder;
            _2470 = frontier_phi_61_62_ladder_5;
            _2472 = frontier_phi_61_62_ladder_4;
            _2474 = frontier_phi_61_62_ladder_3;
            _2476 = frontier_phi_61_62_ladder_2;
            _2478 = frontier_phi_61_62_ladder_1;
        }
        float _2483 = isnan(1.0) ? _466 : (isnan(_466) ? 1.0 : min(_466, 1.0));
        _2303 = (_2483 * _2474) + _1778;
        _2305 = (_2483 * _2476) + _1780;
        _2307 = (_2483 * _2478) + _1782;
        _2309 = ((_2468 * 0.039999999105930328369140625) * _2483) + _2114;
        _2311 = ((_2470 * 0.039999999105930328369140625) * _2483) + _2116;
        _2313 = ((_2472 * 0.039999999105930328369140625) * _2483) + _2118;
    }
    else
    {
        _2303 = _1778;
        _2305 = _1780;
        _2307 = _1782;
        _2309 = _2114;
        _2311 = _2116;
        _2313 = _2118;
    }
    float _2405;
    float _2406;
    float _2407;
    if (_301 > 0.0)
    {
        uint _2337 = _1558 + 4u;
        float _2343 = (-0.0) - _379;
        float _2345 = (-0.0) - _380;
        float _2346 = (-0.0) - _381;
        float _2347 = dot(vec3(cbLight._m0[_1558].xyz), vec3(_2343, _2345, _2346));
        float _4457 = isnan(0.0) ? _2347 : (isnan(_2347) ? 0.0 : max(_2347, 0.0));
        float _2351 = _477 + 1.0;
        float _2353 = (isnan(0.0) ? _2351 : (isnan(_2351) ? 0.0 : max(_2351, 0.0))) * 0.5;
        float _2358 = _2353 * _2353;
        float _2359 = _2358 * exp2(log2(isnan(1.0) ? _4457 : (isnan(_4457) ? 1.0 : min(_4457, 1.0))) * 32.0);
        float _2361 = _301 / (_301 + 1.0);
        float _2362 = isnan(_1571) ? 1.0 : (isnan(1.0) ? _1571 : min(1.0, _1571));
        uint _2375 = _1558 + 5u;
        float _2381 = dot(vec3(cbLight._m0[_1871].xyz), vec3(_2343, _2345, _2346));
        float _4478 = isnan(0.0) ? _2381 : (isnan(_2381) ? 0.0 : max(_2381, 0.0));
        float _2388 = _2358 * exp2(log2(isnan(1.0) ? _4478 : (isnan(_4478) ? 1.0 : min(_4478, 1.0))) * 32.0);
        float _2389 = isnan(_1572) ? 1.0 : (isnan(1.0) ? _1572 : min(1.0, _1572));
        _2405 = ((((_2388 * cbLight._m0[_2375].x) * _2361) * _2389) + ((((cbLight._m0[_2337].x * _1550) * _2359) * _2361) * _2362)) * 0.3183098733425140380859375;
        _2406 = ((((_2388 * cbLight._m0[_2375].y) * _2361) * _2389) + ((((cbLight._m0[_2337].y * _1551) * _2359) * _2361) * _2362)) * 0.3183098733425140380859375;
        _2407 = ((((_2388 * cbLight._m0[_2375].z) * _2361) * _2389) + ((((cbLight._m0[_2337].z * _1552) * _2359) * _2361) * _2362)) * 0.3183098733425140380859375;
    }
    else
    {
        _2405 = 0.0;
        _2406 = 0.0;
        _2407 = 0.0;
    }
    float _4494 = isnan(0.0) ? _452 : (isnan(_452) ? 0.0 : max(_452, 0.0));
    float _4505 = isnan(0.0) ? _453 : (isnan(_453) ? 0.0 : max(_453, 0.0));
    float _4516 = isnan(0.0) ? _454 : (isnan(_454) ? 0.0 : max(_454, 0.0));
    float _4527 = isnan(0.0) ? _299 : (isnan(_299) ? 0.0 : max(_299, 0.0));
    float _2427 = ((isnan(1.0) ? _4494 : (isnan(_4494) ? 1.0 : min(_4494, 1.0))) * ((_2303 + ((isnan(0.0) ? _1226 : (isnan(_1226) ? 0.0 : max(_1226, 0.0))) * _466)) + _2405)) + ((_2309 + ((isnan(0.0) ? _1522 : (isnan(_1522) ? 0.0 : max(_1522, 0.0))) * _1305)) * cbPerFrame._m0[3u].x);
    float _2428 = ((isnan(1.0) ? _4505 : (isnan(_4505) ? 1.0 : min(_4505, 1.0))) * ((_2305 + ((isnan(0.0) ? _1229 : (isnan(_1229) ? 0.0 : max(_1229, 0.0))) * _466)) + _2406)) + ((_2311 + ((isnan(0.0) ? _1525 : (isnan(_1525) ? 0.0 : max(_1525, 0.0))) * _1305)) * cbPerFrame._m0[3u].x);
    float _2429 = ((isnan(1.0) ? _4516 : (isnan(_4516) ? 1.0 : min(_4516, 1.0))) * ((_2307 + ((isnan(0.0) ? _1232 : (isnan(_1232) ? 0.0 : max(_1232, 0.0))) * _466)) + _2407)) + ((_2313 + ((isnan(0.0) ? _1528 : (isnan(_1528) ? 0.0 : max(_1528, 0.0))) * _1305)) * cbPerFrame._m0[3u].x);
    float _2434 = cbInstanceData._m0[_440 + 6u].w * (isnan(1.0) ? _4527 : (isnan(_4527) ? 1.0 : min(_4527, 1.0)));
    float _2439 = _400 / cbSceneParam._m0[86u].x;
    float _2440 = _401 / cbSceneParam._m0[86u].y;
    vec4 _2454 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2439, _2440, (log2((isnan(cbSceneParam._m0[77u].w) ? _320 : (isnan(_320) ? cbSceneParam._m0[77u].w : min(_320, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2456 = _2454.x;
    float _2457 = _2454.y;
    float _2458 = _2454.z;
    float _2459 = _2454.w;
    float _2558;
    float _2560;
    float _2562;
    float _2564;
    if (_320 > cbSceneParam._m0[78u].w)
    {
        float _2521 = isnan(_320) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _320 : min(cbSceneParam._m0[80u].w, _320));
        float _2522 = _2521 / _320;
        float _2533 = _2522 * _372;
        float _2534 = _373 * _2522;
        float _2535 = (-0.0) - _2534;
        float _2536 = _2522 * _374;
        float _2538 = (cbSceneParam._m0[77u].w * _2535) / _2521;
        float _2539 = _2538 + cbSceneParam._m0[79u].w;
        float _2540 = cbSceneParam._m0[79u].w - _2534;
        float _2546 = sqrt(((_2533 * _2533) + (_2534 * _2534)) + (_2536 * _2536));
        float _2549 = (1.0 - (cbSceneParam._m0[77u].w / _2521)) * _2546;
        float _2554 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2556 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2943;
        if (abs((_2535 - _2538) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2943 = ((((_2539 > 0.0) ? exp2(_2554 * _2539) : (2.0 - exp2(_2556 * _2539))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2549;
        }
        else
        {
            float _2641 = 1.0 / cbSceneParam._m0[80u].x;
            float _2642 = isnan(_2540) ? _2539 : (isnan(_2539) ? _2540 : max(_2539, _2540));
            float _2643 = isnan(_2540) ? _2539 : (isnan(_2539) ? _2540 : min(_2539, _2540));
            float _2652 = isnan(0.0) ? _2642 : (isnan(_2642) ? 0.0 : min(_2642, 0.0));
            float _2653 = isnan(0.0) ? _2643 : (isnan(_2643) ? 0.0 : min(_2643, 0.0));
            _2943 = ((abs(_2546 / _2535) * cbSceneParam._m0[80u].y) * ((((_2652 - _2653) * 2.0) - ((exp2(_2554 * (isnan(0.0) ? _2642 : (isnan(_2642) ? 0.0 : max(_2642, 0.0)))) - exp2(_2554 * (isnan(0.0) ? _2643 : (isnan(_2643) ? 0.0 : max(_2643, 0.0))))) * _2641)) - ((exp2(_2556 * _2652) - exp2(_2556 * _2653)) * _2641))) + (_2549 * cbSceneParam._m0[80u].z);
        }
        vec4 _2945 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2439, _2440, 1.0), 0.0);
        float _2954 = exp2((_2943 * (-1.44269502162933349609375)) * (1.0 - _2945.w));
        float _2955 = log2(_2954);
        float _2971 = log2(_2459);
        _2558 = (exp2(_2971 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2955 * cbSceneParam._m0[78u].x)) * _2945.x) / cbSceneParam._m0[78u].x)) + _2456;
        _2560 = (exp2(_2971 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2955 * cbSceneParam._m0[78u].y)) * _2945.y) / cbSceneParam._m0[78u].y)) + _2457;
        _2562 = (exp2(_2971 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2955 * cbSceneParam._m0[78u].z)) * _2945.z) / cbSceneParam._m0[78u].z)) + _2458;
        _2564 = _2954 * _2459;
    }
    else
    {
        _2558 = _2456;
        _2560 = _2457;
        _2562 = _2458;
        _2564 = _2459;
    }
    bool _2981;
    vec4 _2574;
    vec4 _2596;
    float _2598;
    float _2602;
    float _2603;
    float _2604;
    float _2605;
    bool _2615;
    for (;;)
    {
        _2574 = cbMatDynParam._m0[0u];
        float _2576 = roundEven(_2574.y);
        bool _2577 = _2576 == 3.0;
        float _2578 = log2(_2564);
        float _2585 = exp2(_2578 * cbSceneParam._m0[78u].x) * _2427;
        float _2586 = exp2(_2578 * cbSceneParam._m0[78u].y) * _2428;
        float _2587 = exp2(_2578 * cbSceneParam._m0[78u].z) * _2429;
        float _2594 = _388 + (-0.5);
        _2596 = cbMtdParam._m0[1u];
        _2598 = _2596.y * _2594;
        float _2601 = (_2576 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2602 = _2601 * (_2577 ? _2585 : (_2585 + (cbSceneParam._m0[72u].w * _2558)));
        _2603 = _2601 * (_2577 ? _2586 : (_2586 + (cbSceneParam._m0[72u].w * _2560)));
        _2604 = _2601 * (_2577 ? _2587 : (_2587 + (cbSceneParam._m0[72u].w * _2562)));
        _2605 = _2594 * 0.999000012874603271484375;
        _2615 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2615)
        {
            if ((cbInstanceData._m0[_440 + 7u].x + _2605) < 0.5)
            {
                _2981 = true;
                break;
            }
        }
        uint _2676 = _442 + uint(_2574.w);
        if ((cbInstanceData._m0[_2676].w < 1.0) && ((cbInstanceData._m0[_2676].w + _2605) < 0.5))
        {
            _2981 = true;
            break;
        }
        if ((_2598 + _231) < _2596.x)
        {
            _2981 = true;
            break;
        }
        _2981 = false;
        break;
    }
    float _2999;
    if (_2981)
    {
        discard_state = true;
        _2999 = 0.0;
    }
    else
    {
        _2999 = _2434;
    }
    SV_Target.x = _2602;
    SV_Target.y = _2603;
    SV_Target.z = _2604;
    SV_Target.w = _2999;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2434;
    discard_exit();
}


