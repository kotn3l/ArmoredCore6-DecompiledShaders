#version 460

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[12];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 5, std140) uniform cbObjMatrixUBO
{
    vec4 _m0[6];
} cbObjMatrix;

layout(set = 0, binding = 10, std140) uniform cbInstanceIdxParamUBO
{
    vec4 _m0[1];
} cbInstanceIdxParam;

layout(set = 0, binding = 26) uniform usamplerBuffer g_forceParam;
layout(set = 0, binding = 25) uniform usamplerBuffer g_InstanceIndexBuffer;

layout(location = 0) in vec3 POSITION;
layout(location = 1) in uvec4 NORMAL;
layout(location = 2) in uvec4 TANGENT;
layout(location = 3) in vec4 COLOR_1;
layout(location = 4) in ivec2 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_1;

uint _618;
uint _741;

void main()
{
    uint _65 = uint(gl_InstanceIndex) - uint(gl_BaseInstance);
    gl_Position.x = 0.0;
    gl_Position.y = 0.0;
    gl_Position.z = 0.0;
    gl_Position.w = 0.0;
    uint _96 = _65 * 13u;
    uvec4 _102 = floatBitsToUint(cbInstanceData._m0[_96 + 7u]);
    uint _105 = min(_102.y, 8u);
    bool _108 = _105 == 0u;
    precise float _109 = POSITION.x + 0.0;
    precise float _110 = POSITION.y + 0.0;
    precise float _111 = POSITION.z + 0.0;
    uint _116 = floatBitsToUint(cbInstanceIdxParam._m0[0u]).x + _65;
    uint _129 = (floatBitsToUint(cbInstanceData._m0[(texelFetch(g_InstanceIndexBuffer, int(_116)).x * 13u) + 4u]).x + uint(float(NORMAL.w))) * 3u;
    uint _136 = _129 + 1u;
    uint _143 = _129 + 2u;
    precise float _150 = _109 * cbObjMatrix._m0[_129].x;
    precise float _151 = _110 * cbObjMatrix._m0[_129].y;
    precise float _152 = _151 + _150;
    precise float _153 = _111 * cbObjMatrix._m0[_129].z;
    precise float _154 = _153 + _152;
    precise float _155 = 1.0 * cbObjMatrix._m0[_129].w;
    precise float _157 = _155 + _154;
    precise float _158 = _109 * cbObjMatrix._m0[_136].x;
    precise float _159 = _110 * cbObjMatrix._m0[_136].y;
    precise float _160 = _159 + _158;
    precise float _161 = _111 * cbObjMatrix._m0[_136].z;
    precise float _162 = _161 + _160;
    precise float _163 = 1.0 * cbObjMatrix._m0[_136].w;
    precise float _164 = _163 + _162;
    precise float _165 = _109 * cbObjMatrix._m0[_143].x;
    precise float _166 = _110 * cbObjMatrix._m0[_143].y;
    precise float _167 = _166 + _165;
    precise float _168 = _111 * cbObjMatrix._m0[_143].z;
    precise float _169 = _168 + _167;
    precise float _170 = 1.0 * cbObjMatrix._m0[_143].w;
    precise float _171 = _170 + _169;
    uint _178 = _96 + 1u;
    uint _185 = _96 + 2u;
    precise float _192 = TEXCOORD_1.x * cbInstanceData._m0[_96].x;
    precise float _193 = TEXCOORD_1.y * cbInstanceData._m0[_96].y;
    precise float _194 = _193 + _192;
    precise float _195 = TEXCOORD_1.z * cbInstanceData._m0[_96].z;
    precise float _196 = _195 + _194;
    precise float _197 = 1.0 * cbInstanceData._m0[_96].w;
    precise float _198 = _197 + _196;
    precise float _199 = TEXCOORD_1.x * cbInstanceData._m0[_178].x;
    precise float _200 = TEXCOORD_1.y * cbInstanceData._m0[_178].y;
    precise float _201 = _200 + _199;
    precise float _202 = TEXCOORD_1.z * cbInstanceData._m0[_178].z;
    precise float _203 = _202 + _201;
    precise float _204 = 1.0 * cbInstanceData._m0[_178].w;
    precise float _205 = _204 + _203;
    precise float _206 = TEXCOORD_1.x * cbInstanceData._m0[_185].x;
    precise float _207 = TEXCOORD_1.y * cbInstanceData._m0[_185].y;
    precise float _208 = _207 + _206;
    precise float _209 = TEXCOORD_1.z * cbInstanceData._m0[_185].z;
    precise float _210 = _209 + _208;
    precise float _211 = 1.0 * cbInstanceData._m0[_185].w;
    precise float _212 = _211 + _210;
    precise float _218 = _157 - _198;
    precise float _219 = _164 - _205;
    precise float _220 = _171 - _212;
    precise float _221 = _218 * _218;
    precise float _222 = _219 * _219;
    precise float _223 = _221 + _222;
    precise float _224 = _220 * _220;
    precise float _225 = _223 + _224;
    precise float _227 = cbMtdParam._m0[10u].z * sqrt(_225);
    precise float _232 = cbInstanceData._m0[_96].x * 0.0;
    precise float _233 = 0.0 * cbInstanceData._m0[_96].y;
    precise float _234 = _233 + _232;
    precise float _235 = 0.0 * cbInstanceData._m0[_96].z;
    precise float _236 = _235 + _234;
    precise float _237 = 1.0 * cbInstanceData._m0[_96].w;
    precise float _238 = _237 + _236;
    precise float _239 = cbInstanceData._m0[_178].x * 0.0;
    precise float _240 = 0.0 * cbInstanceData._m0[_178].y;
    precise float _241 = _240 + _239;
    precise float _242 = 0.0 * cbInstanceData._m0[_178].z;
    precise float _243 = _242 + _241;
    precise float _244 = 1.0 * cbInstanceData._m0[_178].w;
    precise float _245 = _244 + _243;
    precise float _246 = cbInstanceData._m0[_185].x * 0.0;
    precise float _247 = 0.0 * cbInstanceData._m0[_185].y;
    precise float _248 = _247 + _246;
    precise float _249 = 0.0 * cbInstanceData._m0[_185].z;
    precise float _250 = _249 + _248;
    precise float _251 = 1.0 * cbInstanceData._m0[_185].w;
    precise float _252 = _251 + _250;
    precise float _255 = _157 * _157;
    precise float _256 = _164 * _164;
    precise float _257 = _255 + _256;
    precise float _258 = _171 * _171;
    precise float _259 = _257 + _258;
    precise float _261 = cbMtdParam._m0[11u].x * sqrt(_259);
    precise float _262 = cbPerFrame._m0[22u].x + _261;
    uint _263 = _102.w;
    float _264;
    float _266;
    float _268;
    if (_108)
    {
        _264 = 0.0;
        _266 = 0.0;
        _268 = 0.0;
    }
    else
    {
        uint _388 = _102.z;
        precise float _265;
        precise float _267;
        precise float _269;
        float _812;
        float _814;
        float _816;
        float _550 = 0.0;
        float _551 = 0.0;
        float _552 = 0.0;
        uint _553 = _388;
        uint _555 = 0u;
        float _591;
        float _610;
        vec4 _623;
        float _624;
        float _625;
        float _639;
        float _640;
        float _641;
        float _658;
        float _659;
        float _660;
        float _661;
        bool _662;
        bool _663;
        bool _664;
        precise float _665;
        precise float _666;
        precise float _667;
        float _668;
        float _669;
        float _670;
        precise float _671;
        bool _674;
        for (;;)
        {
            uint _557 = _553 & 255u;
            uint _559 = _557 * 24u;
            uvec3 _569 = uvec3(texelFetch(g_forceParam, int(_559)).x, texelFetch(g_forceParam, int(_559 + 1u)).x, texelFetch(g_forceParam, int(_559 + 2u)).x);
            uint _574 = (_557 * 24u) + 4u;
            vec4 _587 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_574)).x, texelFetch(g_forceParam, int(_574 + 1u)).x, texelFetch(g_forceParam, int(_574 + 2u)).x, texelFetch(g_forceParam, int(_574 + 3u)).x));
            _591 = _587.w;
            uint _593 = (_557 * 24u) + 8u;
            vec4 _606 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_593)).x, texelFetch(g_forceParam, int(_593 + 1u)).x, texelFetch(g_forceParam, int(_593 + 2u)).x, texelFetch(g_forceParam, int(_593 + 3u)).x));
            _610 = _606.w;
            uint _612 = (_557 * 24u) + 12u;
            _623 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_612)).x, texelFetch(g_forceParam, int(_612 + 1u)).x, _618, texelFetch(g_forceParam, int(_612 + 3u)).x));
            _624 = _623.x;
            _625 = _623.w;
            uint _628 = (_557 * 24u) + 16u;
            vec3 _638 = uintBitsToFloat(uvec3(texelFetch(g_forceParam, int(_628)).x, texelFetch(g_forceParam, int(_628 + 1u)).x, texelFetch(g_forceParam, int(_628 + 2u)).x));
            _639 = _638.x;
            _640 = _638.y;
            _641 = _638.z;
            uint _644 = (_557 * 24u) + 20u;
            vec4 _657 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_644)).x, texelFetch(g_forceParam, int(_644 + 1u)).x, texelFetch(g_forceParam, int(_644 + 2u)).x, texelFetch(g_forceParam, int(_644 + 3u)).x));
            _658 = _657.x;
            _659 = _657.y;
            _660 = _657.z;
            _661 = _657.w;
            _662 = _569.x == 1u;
            _663 = _569.y == 1u;
            _664 = _569.z == 1u;
            _665 = _238 - _587.x;
            _666 = _245 - _587.y;
            _667 = _252 - _587.z;
            _668 = _662 ? _606.x : _665;
            _669 = _662 ? _606.y : _666;
            _670 = _662 ? _606.z : _667;
            _671 = dot(vec3(_668, _669, _670), vec3(_668, _669, _670));
            _674 = _671 > 0.0;
            float frontier_phi_8_pred;
            float frontier_phi_8_pred_1;
            float frontier_phi_8_pred_2;
            if (_674)
            {
                precise float _797 = _665 * _665;
                precise float _798 = _666 * _666;
                precise float _799 = _797 + _798;
                precise float _800 = _667 * _667;
                precise float _801 = _800 + _799;
                float _802 = sqrt(_801);
                float _803 = inversesqrt(_671);
                precise float _804 = _668 * _803;
                precise float _805 = _669 * _803;
                precise float _806 = _670 * _803;
                precise float _809 = _802 / (isnan(0.001000000047497451305389404296875) ? _623.y : (isnan(_623.y) ? 0.001000000047497451305389404296875 : max(_623.y, 0.001000000047497451305389404296875)));
                precise float _810 = 1.0 - _809;
                float _1136 = isnan(0.0) ? _810 : (isnan(_810) ? 0.0 : max(_810, 0.0));
                float _811 = isnan(1.0) ? _1136 : (isnan(_1136) ? 1.0 : min(_1136, 1.0));
                float _861;
                if (_664)
                {
                    float _848 = inversesqrt(dot(vec3(_665, _666, _667), vec3(_665, _666, _667)));
                    precise float _849 = _665 * _848;
                    precise float _850 = _666 * _848;
                    precise float _851 = _667 * _848;
                    precise float _855 = dot(vec3(_804, _805, _806), vec3(_849, _850, _851)) * 0.800000011920928955078125;
                    precise float _857 = _855 + 0.20000000298023223876953125;
                    float _1147 = isnan(0.0) ? _857 : (isnan(_857) ? 0.0 : max(_857, 0.0));
                    precise float _860 = _811 * (isnan(1.0) ? _1147 : (isnan(_1147) ? 1.0 : min(_1147, 1.0)));
                    _861 = _860;
                }
                else
                {
                    _861 = _811;
                }
                float frontier_phi_8_pred_12_ladder;
                float frontier_phi_8_pred_12_ladder_1;
                float frontier_phi_8_pred_12_ladder_2;
                if (_861 > 0.0)
                {
                    bool _880 = _662 && (!_664);
                    precise float _882 = _802 * (-4.0);
                    precise float _886 = 6.283184051513671875 / (isnan(0.001000000047497451305389404296875) ? _624 : (isnan(_624) ? 0.001000000047497451305389404296875 : max(_624, 0.001000000047497451305389404296875)));
                    precise float _888 = dot(vec2(_804, _806), vec2(_665, _667));
                    precise float _892 = _886 * _888;
                    precise float _893 = float(_880) * _892;
                    precise float _894 = _262 * _886;
                    precise float _895 = _894 - _893;
                    precise float _896 = (_880 ? 0.0 : _882) + _895;
                    precise float _898 = _610 * sin(_896);
                    precise float _899 = _805 * 0.0;
                    precise float _900 = _899 - _806;
                    precise float _901 = _806 * 0.0;
                    precise float _902 = _804 * 0.0;
                    precise float _903 = _901 - _902;
                    precise float _904 = _804 - _899;
                    precise float _905 = _625 * _898;
                    float _906 = _662 ? _905 : 0.0;
                    float _975;
                    if (_663)
                    {
                        precise float _935 = _639 * 2.0;
                        precise float _937 = _659 + _660;
                        precise float _938 = _661 + _937;
                        precise float _940 = 6.283184051513671875 / (isnan(0.001000000047497451305389404296875) ? _639 : (isnan(_639) ? 0.001000000047497451305389404296875 : max(_639, 0.001000000047497451305389404296875)));
                        precise float _941 = _658 * _940;
                        precise float _942 = (-0.0) - _804;
                        precise float _947 = dot(vec2(_806, _942), vec2(_665, _667)) / _935;
                        precise float _948 = (-0.0) - _947;
                        float _951 = fract(abs(_947));
                        precise float _952 = (-0.0) - _951;
                        precise float _954 = _935 * ((_947 >= _948) ? _951 : _952);
                        precise float _955 = _954 * 6.283184051513671875;
                        precise float _956 = _955 / _935;
                        precise float _958 = (isnan(5.0) ? _639 : (isnan(_639) ? 5.0 : min(_639, 5.0))) * sin(_956);
                        precise float _959 = _888 + _958;
                        precise float _960 = _639 * 0.25;
                        precise float _962 = _262 * _658;
                        precise float _963 = _962 - _960;
                        precise float _964 = _963 - _959;
                        precise float _965 = _658 * _938;
                        precise float _967 = _964 / (isnan(0.001000000047497451305389404296875) ? _965 : (isnan(_965) ? 0.001000000047497451305389404296875 : max(_965, 0.001000000047497451305389404296875)));
                        float _968 = fract(_967);
                        precise float _970 = 1.0 - _968;
                        float _971 = (_967 < 0.0) ? _970 : _968;
                        precise float _972 = _937 / _938;
                        precise float _973 = _659 / _938;
                        float _1051;
                        if (_971 < _973)
                        {
                            precise float _1047 = _971 / _973;
                            _1051 = _1047;
                        }
                        else
                        {
                            float frontier_phi_27_24_ladder;
                            if (_971 < _972)
                            {
                                precise float _1061 = _971 - _973;
                                precise float _1062 = _972 - _973;
                                precise float _1063 = _1061 / _1062;
                                precise float _1052 = 1.0 - _1063;
                                frontier_phi_27_24_ladder = _1052;
                            }
                            else
                            {
                                frontier_phi_27_24_ladder = 0.0;
                            }
                            _1051 = frontier_phi_27_24_ladder;
                        }
                        precise float _1053 = _641 * _1051;
                        precise float _1054 = _940 * _888;
                        precise float _1055 = _262 * _941;
                        precise float _1056 = _1055 - _1054;
                        precise float _1058 = _640 + sin(_1056);
                        precise float _1060 = _1053 * abs(_1058);
                        precise float _976 = _1060 + 0.0;
                        _975 = _976;
                    }
                    else
                    {
                        _975 = 0.0;
                    }
                    precise float _977 = _591 + _898;
                    precise float _978 = _977 + _975;
                    precise float _979 = _804 * _978;
                    precise float _980 = _805 * _978;
                    precise float _981 = _806 * _978;
                    precise float _982 = _900 * _906;
                    precise float _983 = _903 * _906;
                    precise float _984 = _904 * _906;
                    precise float _985 = _982 + _979;
                    precise float _986 = _983 + _980;
                    precise float _987 = _984 + _981;
                    precise float _988 = _861 * _985;
                    precise float _989 = _861 * _986;
                    precise float _990 = _861 * _987;
                    precise float _813 = _988 * 0.0500000007450580596923828125;
                    precise float _815 = _989 * 0.0500000007450580596923828125;
                    precise float _817 = _990 * 0.0500000007450580596923828125;
                    frontier_phi_8_pred_12_ladder = _813;
                    frontier_phi_8_pred_12_ladder_1 = _815;
                    frontier_phi_8_pred_12_ladder_2 = _817;
                }
                else
                {
                    frontier_phi_8_pred_12_ladder = 0.0;
                    frontier_phi_8_pred_12_ladder_1 = 0.0;
                    frontier_phi_8_pred_12_ladder_2 = 0.0;
                }
                frontier_phi_8_pred = frontier_phi_8_pred_12_ladder;
                frontier_phi_8_pred_1 = frontier_phi_8_pred_12_ladder_1;
                frontier_phi_8_pred_2 = frontier_phi_8_pred_12_ladder_2;
            }
            else
            {
                frontier_phi_8_pred = 0.0;
                frontier_phi_8_pred_1 = 0.0;
                frontier_phi_8_pred_2 = 0.0;
            }
            _812 = frontier_phi_8_pred;
            _814 = frontier_phi_8_pred_1;
            _816 = frontier_phi_8_pred_2;
            _265 = _550 + _812;
            _267 = _551 + _814;
            _269 = _552 + _816;
            uint _556 = _555 + 1u;
            if (_556 == _105)
            {
                break;
            }
            else
            {
                _550 = _265;
                _551 = _267;
                _552 = _269;
                _553 = (_555 != 3u) ? (_553 >> 8u) : _263;
                _555 = _556;
                continue;
            }
        }
        _264 = _265;
        _266 = _267;
        _268 = _269;
    }
    precise float _270 = _264 * _264;
    precise float _271 = _266 * _266;
    precise float _272 = _270 + _271;
    precise float _273 = _268 * _268;
    precise float _274 = _272 + _273;
    float _275 = sqrt(_274);
    bool _276 = _275 < 0.00011000000085914507508277893066406;
    float _281 = inversesqrt(dot(vec3(cbInstanceData._m0[_96].x, cbInstanceData._m0[_178].x, cbInstanceData._m0[_185].x), vec3(cbInstanceData._m0[_96].x, cbInstanceData._m0[_178].x, cbInstanceData._m0[_185].x)));
    precise float _282 = cbInstanceData._m0[_96].x * _281;
    precise float _283 = cbInstanceData._m0[_178].x * _281;
    precise float _284 = cbInstanceData._m0[_185].x * _281;
    float _288 = inversesqrt(dot(vec3(cbInstanceData._m0[_96].y, cbInstanceData._m0[_178].y, cbInstanceData._m0[_185].y), vec3(cbInstanceData._m0[_96].y, cbInstanceData._m0[_178].y, cbInstanceData._m0[_185].y)));
    precise float _289 = cbInstanceData._m0[_96].y * _288;
    precise float _290 = cbInstanceData._m0[_178].y * _288;
    precise float _291 = cbInstanceData._m0[_185].y * _288;
    float _295 = inversesqrt(dot(vec3(cbInstanceData._m0[_96].z, cbInstanceData._m0[_178].z, cbInstanceData._m0[_185].z), vec3(cbInstanceData._m0[_96].z, cbInstanceData._m0[_178].z, cbInstanceData._m0[_185].z)));
    precise float _296 = cbInstanceData._m0[_96].z * _295;
    precise float _297 = cbInstanceData._m0[_178].z * _295;
    precise float _298 = cbInstanceData._m0[_185].z * _295;
    precise float _299 = _282 * 0.0;
    precise float _300 = 1.0 * _289;
    precise float _301 = _300 + _299;
    precise float _302 = 0.0 * _296;
    precise float _303 = _302 + _301;
    precise float _304 = _283 * 0.0;
    precise float _305 = 1.0 * _290;
    precise float _306 = _305 + _304;
    precise float _307 = 0.0 * _297;
    precise float _308 = _307 + _306;
    precise float _309 = _284 * 0.0;
    precise float _310 = 1.0 * _291;
    precise float _311 = _310 + _309;
    precise float _312 = 0.0 * _298;
    precise float _313 = _312 + _311;
    float _317 = inversesqrt(dot(vec3(_264, _266, _268), vec3(_264, _266, _268)));
    precise float _318 = _264 * _317;
    precise float _319 = _266 * _317;
    precise float _320 = _268 * _317;
    precise float _321 = _308 * _320;
    precise float _322 = _313 * _319;
    precise float _323 = _321 - _322;
    precise float _324 = _313 * _318;
    precise float _325 = _303 * _320;
    precise float _326 = _324 - _325;
    precise float _327 = _303 * _319;
    precise float _328 = _308 * _318;
    precise float _329 = _327 - _328;
    float _333 = inversesqrt(dot(vec3(_323, _326, _329), vec3(_323, _326, _329)));
    precise float _334 = _333 * _323;
    precise float _335 = _333 * _326;
    precise float _336 = _333 * _329;
    precise float _337 = _275 + 1.0;
    precise float _339 = cbMtdParam._m0[10u].w * log2(_337);
    precise float _340 = _157 - _238;
    precise float _341 = _164 - _245;
    precise float _342 = _171 - _252;
    precise float _343 = dot(vec3(_334, _335, _336), vec3(_340, _341, _342));
    precise float _346 = _334 * _343;
    precise float _347 = _335 * _343;
    precise float _348 = _336 * _343;
    precise float _349 = _238 + _346;
    precise float _350 = _245 + _347;
    precise float _351 = _252 + _348;
    precise float _352 = _157 - _349;
    precise float _353 = _164 - _350;
    precise float _354 = _171 - _351;
    precise float _355 = _335 * _354;
    precise float _356 = _336 * _353;
    precise float _357 = _355 - _356;
    precise float _358 = _336 * _352;
    precise float _359 = _334 * _354;
    precise float _360 = _358 - _359;
    precise float _361 = _334 * _353;
    precise float _362 = _335 * _352;
    precise float _363 = _361 - _362;
    float _364 = sin(_339);
    float _365 = cos(_339);
    precise float _366 = _352 * _365;
    precise float _367 = _353 * _365;
    precise float _368 = _354 * _365;
    precise float _369 = _364 * _357;
    precise float _370 = _364 * _360;
    precise float _371 = _364 * _363;
    precise float _372 = _366 + _369;
    precise float _373 = _367 + _370;
    precise float _374 = _371 + _368;
    precise float _375 = _349 + _372;
    precise float _376 = _350 + _373;
    precise float _377 = _351 + _374;
    precise float _378 = _375 - _157;
    precise float _379 = _376 - _164;
    precise float _380 = _377 - _171;
    float _381 = _276 ? 0.0 : _378;
    float _382 = _276 ? 0.0 : _379;
    float _383 = _276 ? 0.0 : _380;
    precise float _384 = _157 + _381;
    precise float _385 = _164 + _382;
    precise float _386 = _171 + _383;
    precise float _387 = cbPerFrame._m0[22u].x + _227;
    float _389;
    float _391;
    float _393;
    if (_108)
    {
        _389 = 0.0;
        _391 = 0.0;
        _393 = 0.0;
    }
    else
    {
        uint _549 = _102.z;
        precise float _390;
        precise float _392;
        precise float _394;
        float _836;
        float _838;
        float _840;
        float _675 = 0.0;
        float _676 = 0.0;
        float _677 = 0.0;
        uint _678 = _549;
        uint _680 = 0u;
        float _714;
        float _733;
        vec4 _746;
        float _747;
        float _748;
        float _761;
        float _762;
        float _763;
        float _779;
        float _780;
        float _781;
        float _782;
        bool _783;
        bool _784;
        bool _785;
        precise float _786;
        precise float _787;
        precise float _788;
        float _789;
        float _790;
        float _791;
        precise float _792;
        bool _795;
        for (;;)
        {
            uint _682 = _678 & 255u;
            uint _683 = _682 * 24u;
            uvec3 _692 = uvec3(texelFetch(g_forceParam, int(_683)).x, texelFetch(g_forceParam, int(_683 + 1u)).x, texelFetch(g_forceParam, int(_683 + 2u)).x);
            uint _697 = (_682 * 24u) + 4u;
            vec4 _710 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_697)).x, texelFetch(g_forceParam, int(_697 + 1u)).x, texelFetch(g_forceParam, int(_697 + 2u)).x, texelFetch(g_forceParam, int(_697 + 3u)).x));
            _714 = _710.w;
            uint _716 = (_682 * 24u) + 8u;
            vec4 _729 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_716)).x, texelFetch(g_forceParam, int(_716 + 1u)).x, texelFetch(g_forceParam, int(_716 + 2u)).x, texelFetch(g_forceParam, int(_716 + 3u)).x));
            _733 = _729.w;
            uint _735 = (_682 * 24u) + 12u;
            _746 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_735)).x, texelFetch(g_forceParam, int(_735 + 1u)).x, _741, texelFetch(g_forceParam, int(_735 + 3u)).x));
            _747 = _746.x;
            _748 = _746.w;
            uint _750 = (_682 * 24u) + 16u;
            vec3 _760 = uintBitsToFloat(uvec3(texelFetch(g_forceParam, int(_750)).x, texelFetch(g_forceParam, int(_750 + 1u)).x, texelFetch(g_forceParam, int(_750 + 2u)).x));
            _761 = _760.x;
            _762 = _760.y;
            _763 = _760.z;
            uint _765 = (_682 * 24u) + 20u;
            vec4 _778 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_765)).x, texelFetch(g_forceParam, int(_765 + 1u)).x, texelFetch(g_forceParam, int(_765 + 2u)).x, texelFetch(g_forceParam, int(_765 + 3u)).x));
            _779 = _778.x;
            _780 = _778.y;
            _781 = _778.z;
            _782 = _778.w;
            _783 = _692.x == 1u;
            _784 = _692.y == 1u;
            _785 = _692.z == 1u;
            _786 = _198 - _710.x;
            _787 = _205 - _710.y;
            _788 = _212 - _710.z;
            _789 = _783 ? _729.x : _786;
            _790 = _783 ? _729.y : _787;
            _791 = _783 ? _729.z : _788;
            _792 = dot(vec3(_789, _790, _791), vec3(_789, _790, _791));
            _795 = _792 > 0.0;
            float frontier_phi_10_pred;
            float frontier_phi_10_pred_1;
            float frontier_phi_10_pred_2;
            if (_795)
            {
                precise float _822 = _786 * _786;
                precise float _823 = _787 * _787;
                precise float _824 = _822 + _823;
                precise float _825 = _788 * _788;
                precise float _826 = _825 + _824;
                float _827 = sqrt(_826);
                float _828 = inversesqrt(_792);
                precise float _829 = _789 * _828;
                precise float _830 = _790 * _828;
                precise float _831 = _791 * _828;
                precise float _833 = _827 / (isnan(0.001000000047497451305389404296875) ? _746.y : (isnan(_746.y) ? 0.001000000047497451305389404296875 : max(_746.y, 0.001000000047497451305389404296875)));
                precise float _834 = 1.0 - _833;
                float _1183 = isnan(0.0) ? _834 : (isnan(_834) ? 0.0 : max(_834, 0.0));
                float _835 = isnan(1.0) ? _1183 : (isnan(_1183) ? 1.0 : min(_1183, 1.0));
                float _877;
                if (_785)
                {
                    float _866 = inversesqrt(dot(vec3(_786, _787, _788), vec3(_786, _787, _788)));
                    precise float _867 = _786 * _866;
                    precise float _868 = _787 * _866;
                    precise float _869 = _788 * _866;
                    precise float _873 = dot(vec3(_829, _830, _831), vec3(_867, _868, _869)) * 0.800000011920928955078125;
                    precise float _874 = _873 + 0.20000000298023223876953125;
                    float _1194 = isnan(0.0) ? _874 : (isnan(_874) ? 0.0 : max(_874, 0.0));
                    precise float _876 = _835 * (isnan(1.0) ? _1194 : (isnan(_1194) ? 1.0 : min(_1194, 1.0)));
                    _877 = _876;
                }
                else
                {
                    _877 = _835;
                }
                float frontier_phi_10_pred_15_ladder;
                float frontier_phi_10_pred_15_ladder_1;
                float frontier_phi_10_pred_15_ladder_2;
                if (_877 > 0.0)
                {
                    bool _908 = _783 && (!_785);
                    precise float _910 = _827 * (-4.0);
                    precise float _913 = 6.283184051513671875 / (isnan(0.001000000047497451305389404296875) ? _747 : (isnan(_747) ? 0.001000000047497451305389404296875 : max(_747, 0.001000000047497451305389404296875)));
                    precise float _914 = cbMtdParam._m0[11u].y * _913;
                    precise float _915 = dot(vec2(_829, _831), vec2(_786, _788));
                    precise float _918 = _915 * _914;
                    precise float _919 = float(_908) * _918;
                    precise float _920 = _387 * _914;
                    precise float _921 = _920 - _919;
                    precise float _922 = (_908 ? 0.0 : _910) + _921;
                    precise float _924 = _733 * sin(_922);
                    precise float _925 = _830 * 0.0;
                    precise float _926 = _925 - _831;
                    precise float _927 = _831 * 0.0;
                    precise float _928 = _829 * 0.0;
                    precise float _929 = _927 - _928;
                    precise float _930 = _829 - _925;
                    precise float _931 = _748 * _924;
                    float _932 = _783 ? _931 : 0.0;
                    float _1031;
                    if (_784)
                    {
                        precise float _993 = _761 * 2.0;
                        precise float _994 = _780 + _781;
                        precise float _995 = _782 + _994;
                        precise float _997 = 6.283184051513671875 / (isnan(0.001000000047497451305389404296875) ? _761 : (isnan(_761) ? 0.001000000047497451305389404296875 : max(_761, 0.001000000047497451305389404296875)));
                        precise float _998 = cbMtdParam._m0[11u].y * _997;
                        precise float _999 = _779 * _998;
                        precise float _1000 = (-0.0) - _829;
                        precise float _1004 = dot(vec2(_831, _1000), vec2(_786, _788)) / _993;
                        precise float _1005 = (-0.0) - _1004;
                        float _1008 = fract(abs(_1004));
                        precise float _1009 = (-0.0) - _1008;
                        precise float _1011 = _993 * ((_1004 >= _1005) ? _1008 : _1009);
                        precise float _1012 = _1011 * 6.283184051513671875;
                        precise float _1013 = _1012 / _993;
                        precise float _1015 = (isnan(5.0) ? _761 : (isnan(_761) ? 5.0 : min(_761, 5.0))) * sin(_1013);
                        precise float _1016 = _915 + _1015;
                        precise float _1017 = _761 * 0.25;
                        precise float _1018 = _387 * _779;
                        precise float _1019 = _1018 - _1017;
                        precise float _1020 = _1019 - _1016;
                        precise float _1021 = _779 * _995;
                        precise float _1023 = _1020 / (isnan(0.001000000047497451305389404296875) ? _1021 : (isnan(_1021) ? 0.001000000047497451305389404296875 : max(_1021, 0.001000000047497451305389404296875)));
                        float _1024 = fract(_1023);
                        precise float _1026 = 1.0 - _1024;
                        float _1027 = (_1023 < 0.0) ? _1026 : _1024;
                        precise float _1028 = _994 / _995;
                        precise float _1029 = _780 / _995;
                        float _1064;
                        if (_1027 < _1029)
                        {
                            precise float _1049 = _1027 / _1029;
                            _1064 = _1049;
                        }
                        else
                        {
                            float frontier_phi_29_26_ladder;
                            if (_1027 < _1028)
                            {
                                precise float _1074 = _1027 - _1029;
                                precise float _1075 = _1028 - _1029;
                                precise float _1076 = _1074 / _1075;
                                precise float _1065 = 1.0 - _1076;
                                frontier_phi_29_26_ladder = _1065;
                            }
                            else
                            {
                                frontier_phi_29_26_ladder = 0.0;
                            }
                            _1064 = frontier_phi_29_26_ladder;
                        }
                        precise float _1066 = _763 * _1064;
                        precise float _1067 = _998 * _915;
                        precise float _1068 = _387 * _999;
                        precise float _1069 = _1068 - _1067;
                        precise float _1071 = _762 + sin(_1069);
                        precise float _1073 = _1066 * abs(_1071);
                        precise float _1032 = _1073 + 0.0;
                        _1031 = _1032;
                    }
                    else
                    {
                        _1031 = 0.0;
                    }
                    precise float _1033 = _714 + _924;
                    precise float _1034 = _1033 + _1031;
                    precise float _1035 = _829 * _1034;
                    precise float _1036 = _830 * _1034;
                    precise float _1037 = _831 * _1034;
                    precise float _1038 = _926 * _932;
                    precise float _1039 = _929 * _932;
                    precise float _1040 = _930 * _932;
                    precise float _1041 = _1038 + _1035;
                    precise float _1042 = _1039 + _1036;
                    precise float _1043 = _1040 + _1037;
                    precise float _1044 = _877 * _1041;
                    precise float _1045 = _877 * _1042;
                    precise float _1046 = _877 * _1043;
                    precise float _837 = _1044 * 0.0500000007450580596923828125;
                    precise float _839 = _1045 * 0.0500000007450580596923828125;
                    precise float _841 = _1046 * 0.0500000007450580596923828125;
                    frontier_phi_10_pred_15_ladder = _837;
                    frontier_phi_10_pred_15_ladder_1 = _839;
                    frontier_phi_10_pred_15_ladder_2 = _841;
                }
                else
                {
                    frontier_phi_10_pred_15_ladder = 0.0;
                    frontier_phi_10_pred_15_ladder_1 = 0.0;
                    frontier_phi_10_pred_15_ladder_2 = 0.0;
                }
                frontier_phi_10_pred = frontier_phi_10_pred_15_ladder;
                frontier_phi_10_pred_1 = frontier_phi_10_pred_15_ladder_1;
                frontier_phi_10_pred_2 = frontier_phi_10_pred_15_ladder_2;
            }
            else
            {
                frontier_phi_10_pred = 0.0;
                frontier_phi_10_pred_1 = 0.0;
                frontier_phi_10_pred_2 = 0.0;
            }
            _836 = frontier_phi_10_pred;
            _838 = frontier_phi_10_pred_1;
            _840 = frontier_phi_10_pred_2;
            _390 = _675 + _836;
            _392 = _676 + _838;
            _394 = _677 + _840;
            uint _681 = _680 + 1u;
            if (_681 == _105)
            {
                break;
            }
            else
            {
                _675 = _390;
                _676 = _392;
                _677 = _394;
                _678 = (_680 != 3u) ? (_678 >> 8u) : _263;
                _680 = _681;
                continue;
            }
        }
        _389 = _390;
        _391 = _392;
        _393 = _394;
    }
    precise float _395 = _389 * _389;
    precise float _396 = _391 * _391;
    precise float _397 = _395 + _396;
    precise float _398 = _393 * _393;
    precise float _399 = _397 + _398;
    float _400 = sqrt(_399);
    bool _401 = _400 < 0.00011000000085914507508277893066406;
    float _405 = inversesqrt(dot(vec3(_389, _391, _393), vec3(_389, _391, _393)));
    precise float _406 = _389 * _405;
    precise float _407 = _391 * _405;
    precise float _408 = _393 * _405;
    precise float _409 = _308 * _408;
    precise float _410 = _313 * _407;
    precise float _411 = _409 - _410;
    precise float _412 = _313 * _406;
    precise float _413 = _303 * _408;
    precise float _414 = _412 - _413;
    precise float _415 = _303 * _407;
    precise float _416 = _308 * _406;
    precise float _417 = _415 - _416;
    float _421 = inversesqrt(dot(vec3(_411, _414, _417), vec3(_411, _414, _417)));
    precise float _422 = _421 * _411;
    precise float _423 = _421 * _414;
    precise float _424 = _421 * _417;
    precise float _425 = _400 + 1.0;
    precise float _427 = cbMtdParam._m0[10u].y * log2(_425);
    precise float _428 = _384 - _198;
    precise float _429 = _385 - _205;
    precise float _430 = _386 - _212;
    precise float _431 = dot(vec3(_422, _423, _424), vec3(_428, _429, _430));
    precise float _434 = _422 * _431;
    precise float _435 = _423 * _431;
    precise float _436 = _424 * _431;
    precise float _437 = _198 + _434;
    precise float _438 = _205 + _435;
    precise float _439 = _212 + _436;
    precise float _440 = _384 - _437;
    precise float _441 = _385 - _438;
    precise float _442 = _386 - _439;
    precise float _443 = _423 * _442;
    precise float _444 = _424 * _441;
    precise float _445 = _443 - _444;
    precise float _446 = _424 * _440;
    precise float _447 = _422 * _442;
    precise float _448 = _446 - _447;
    precise float _449 = _422 * _441;
    precise float _450 = _423 * _440;
    precise float _451 = _449 - _450;
    float _452 = sin(_427);
    float _453 = cos(_427);
    precise float _454 = _440 * _453;
    precise float _455 = _441 * _453;
    precise float _456 = _442 * _453;
    precise float _457 = _452 * _445;
    precise float _458 = _452 * _448;
    precise float _459 = _452 * _451;
    precise float _460 = _454 + _457;
    precise float _461 = _455 + _458;
    precise float _462 = _459 + _456;
    precise float _463 = _437 + _460;
    precise float _464 = _438 + _461;
    precise float _465 = _439 + _462;
    precise float _466 = _463 - _384;
    precise float _467 = _464 - _385;
    precise float _468 = _465 - _386;
    precise float _472 = _381 + (_401 ? 0.0 : _466);
    precise float _473 = _382 + (_401 ? 0.0 : _467);
    precise float _474 = _383 + (_401 ? 0.0 : _468);
    precise float _475 = _157 + _472;
    precise float _476 = _164 + _473;
    precise float _477 = _171 + _474;
    precise float _483 = _475 - cbSceneParam._m0[3u].x;
    precise float _484 = _476 - cbSceneParam._m0[3u].y;
    precise float _485 = _477 - cbSceneParam._m0[3u].z;
    precise float _513 = cbSceneParam._m0[24u].x * _483;
    precise float _514 = _484 * cbSceneParam._m0[24u].y;
    precise float _515 = _514 + _513;
    precise float _516 = _485 * cbSceneParam._m0[24u].z;
    precise float _517 = _516 + _515;
    precise float _518 = 1.0 * cbSceneParam._m0[24u].w;
    precise float _519 = _518 + _517;
    precise float _520 = cbSceneParam._m0[25u].x * _483;
    precise float _521 = _484 * cbSceneParam._m0[25u].y;
    precise float _522 = _521 + _520;
    precise float _523 = _485 * cbSceneParam._m0[25u].z;
    precise float _524 = _523 + _522;
    precise float _525 = 1.0 * cbSceneParam._m0[25u].w;
    precise float _526 = _525 + _524;
    precise float _527 = cbSceneParam._m0[26u].x * _483;
    precise float _528 = _484 * cbSceneParam._m0[26u].y;
    precise float _529 = _528 + _527;
    precise float _530 = _485 * cbSceneParam._m0[26u].z;
    precise float _531 = _530 + _529;
    precise float _532 = 1.0 * cbSceneParam._m0[26u].w;
    precise float _533 = _532 + _531;
    precise float _534 = cbSceneParam._m0[27u].x * _483;
    precise float _535 = _484 * cbSceneParam._m0[27u].y;
    precise float _536 = _535 + _534;
    precise float _537 = _485 * cbSceneParam._m0[27u].z;
    precise float _538 = _537 + _536;
    precise float _539 = 1.0 * cbSceneParam._m0[27u].w;
    precise float _540 = _539 + _538;
    gl_Position.x = 0.0;
    gl_Position.y = 0.0;
    gl_Position.z = 0.0;
    gl_Position.w = 0.0;
    gl_Position.x = _519;
    gl_Position.y = _526;
    gl_Position.z = _533;
    gl_Position.w = _540;
}


