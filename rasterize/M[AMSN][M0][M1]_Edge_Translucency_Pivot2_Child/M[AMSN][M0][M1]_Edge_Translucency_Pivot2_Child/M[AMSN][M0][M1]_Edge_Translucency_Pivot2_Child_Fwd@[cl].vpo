#version 460

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[12];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 5, std140) uniform cbObjMatrixUBO
{
    vec4 _m0[6];
} cbObjMatrix;

layout(set = 0, binding = 10, std140) uniform cbInstanceIdxParamUBO
{
    vec4 _m0[1];
} cbInstanceIdxParam;

layout(set = 0, binding = 11, std140) uniform cbTexScrollUBO
{
    vec4 _m0[4];
} cbTexScroll;

layout(set = 0, binding = 26) uniform usamplerBuffer g_forceParam;
layout(set = 0, binding = 25) uniform usamplerBuffer g_InstanceIndexBuffer;

layout(location = 0) in vec3 POSITION;
layout(location = 1) in uvec4 NORMAL;
layout(location = 2) in uvec4 TANGENT;
layout(location = 3) in vec4 COLOR_1;
layout(location = 4) in ivec2 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_1;
layout(location = 1) out vec4 POSITION_1;
layout(location = 2) out vec4 NORMAL_1;
layout(location = 3) out vec4 TANGENT_1;
layout(location = 4) out float TEXCOORD_2;
layout(location = 4, component = 1) out float TEXCOORD_1_1;
layout(location = 5) out vec4 TEXCOORD_3;

uint _736;
uint _859;

void main()
{
    uint _77 = uint(gl_InstanceIndex) - uint(gl_BaseInstance);
    gl_Position.x = 0.0;
    gl_Position.y = 0.0;
    gl_Position.z = 0.0;
    gl_Position.w = 0.0;
    POSITION_1.x = 0.0;
    POSITION_1.y = 0.0;
    POSITION_1.z = 0.0;
    POSITION_1.w = 0.0;
    NORMAL_1.x = 0.0;
    NORMAL_1.y = 0.0;
    NORMAL_1.z = 0.0;
    NORMAL_1.w = 0.0;
    TANGENT_1.x = 0.0;
    TANGENT_1.y = 0.0;
    TANGENT_1.z = 0.0;
    TANGENT_1.w = 0.0;
    TEXCOORD_2 = 0.0;
    TEXCOORD_1_1 = 0.0;
    TEXCOORD_3.x = 0.0;
    TEXCOORD_3.y = 0.0;
    TEXCOORD_3.z = 0.0;
    TEXCOORD_3.w = 0.0;
    float _167 = (float(NORMAL.x) + (-127.0)) * 0.0078740157186985015869140625;
    float _169 = (float(NORMAL.y) + (-127.0)) * 0.0078740157186985015869140625;
    float _170 = (float(NORMAL.z) + (-127.0)) * 0.0078740157186985015869140625;
    float _180 = (float(TANGENT.x) + (-127.0)) * 0.0078740157186985015869140625;
    float _181 = (float(TANGENT.y) + (-127.0)) * 0.0078740157186985015869140625;
    float _182 = (float(TANGENT.z) + (-127.0)) * 0.0078740157186985015869140625;
    uint _184 = _77 * 13u;
    uvec4 _190 = floatBitsToUint(cbInstanceData._m0[_184 + 7u]);
    uint _193 = min(_190.y, 8u);
    bool _196 = _193 == 0u;
    precise float _197 = POSITION.x + 0.0;
    precise float _198 = POSITION.y + 0.0;
    precise float _199 = POSITION.z + 0.0;
    uint _204 = floatBitsToUint(cbInstanceIdxParam._m0[0u]).x + _77;
    uvec4 _206 = texelFetch(g_InstanceIndexBuffer, int(_204));
    uint _207 = _206.x;
    uint _216 = (floatBitsToUint(cbInstanceData._m0[(_207 * 13u) + 4u]).x + uint(float(NORMAL.w))) * 3u;
    uint _223 = _216 + 1u;
    uint _230 = _216 + 2u;
    precise float _237 = _197 * cbObjMatrix._m0[_216].x;
    precise float _238 = _198 * cbObjMatrix._m0[_216].y;
    precise float _239 = _238 + _237;
    precise float _240 = _199 * cbObjMatrix._m0[_216].z;
    precise float _241 = _240 + _239;
    precise float _242 = 1.0 * cbObjMatrix._m0[_216].w;
    precise float _244 = _242 + _241;
    precise float _245 = _197 * cbObjMatrix._m0[_223].x;
    precise float _246 = _198 * cbObjMatrix._m0[_223].y;
    precise float _247 = _246 + _245;
    precise float _248 = _199 * cbObjMatrix._m0[_223].z;
    precise float _249 = _248 + _247;
    precise float _250 = 1.0 * cbObjMatrix._m0[_223].w;
    precise float _251 = _250 + _249;
    precise float _252 = _197 * cbObjMatrix._m0[_230].x;
    precise float _253 = _198 * cbObjMatrix._m0[_230].y;
    precise float _254 = _253 + _252;
    precise float _255 = _199 * cbObjMatrix._m0[_230].z;
    precise float _256 = _255 + _254;
    precise float _257 = 1.0 * cbObjMatrix._m0[_230].w;
    precise float _258 = _257 + _256;
    uint _284 = _184 + 1u;
    uint _291 = _184 + 2u;
    precise float _298 = TEXCOORD_1.x * cbInstanceData._m0[_184].x;
    precise float _299 = TEXCOORD_1.y * cbInstanceData._m0[_184].y;
    precise float _300 = _299 + _298;
    precise float _301 = TEXCOORD_1.z * cbInstanceData._m0[_184].z;
    precise float _302 = _301 + _300;
    precise float _303 = 1.0 * cbInstanceData._m0[_184].w;
    precise float _304 = _303 + _302;
    precise float _305 = TEXCOORD_1.x * cbInstanceData._m0[_284].x;
    precise float _306 = TEXCOORD_1.y * cbInstanceData._m0[_284].y;
    precise float _307 = _306 + _305;
    precise float _308 = TEXCOORD_1.z * cbInstanceData._m0[_284].z;
    precise float _309 = _308 + _307;
    precise float _310 = 1.0 * cbInstanceData._m0[_284].w;
    precise float _311 = _310 + _309;
    precise float _312 = TEXCOORD_1.x * cbInstanceData._m0[_291].x;
    precise float _313 = TEXCOORD_1.y * cbInstanceData._m0[_291].y;
    precise float _314 = _313 + _312;
    precise float _315 = TEXCOORD_1.z * cbInstanceData._m0[_291].z;
    precise float _316 = _315 + _314;
    precise float _317 = 1.0 * cbInstanceData._m0[_291].w;
    precise float _318 = _317 + _316;
    precise float _324 = _244 - _304;
    precise float _325 = _251 - _311;
    precise float _326 = _258 - _318;
    precise float _327 = _324 * _324;
    precise float _328 = _325 * _325;
    precise float _329 = _327 + _328;
    precise float _330 = _326 * _326;
    precise float _331 = _329 + _330;
    precise float _333 = cbMtdParam._m0[10u].z * sqrt(_331);
    precise float _338 = cbInstanceData._m0[_184].x * 0.0;
    precise float _339 = 0.0 * cbInstanceData._m0[_184].y;
    precise float _340 = _339 + _338;
    precise float _341 = 0.0 * cbInstanceData._m0[_184].z;
    precise float _342 = _341 + _340;
    precise float _343 = 1.0 * cbInstanceData._m0[_184].w;
    precise float _344 = _343 + _342;
    precise float _345 = cbInstanceData._m0[_284].x * 0.0;
    precise float _346 = 0.0 * cbInstanceData._m0[_284].y;
    precise float _347 = _346 + _345;
    precise float _348 = 0.0 * cbInstanceData._m0[_284].z;
    precise float _349 = _348 + _347;
    precise float _350 = 1.0 * cbInstanceData._m0[_284].w;
    precise float _351 = _350 + _349;
    precise float _352 = cbInstanceData._m0[_291].x * 0.0;
    precise float _353 = 0.0 * cbInstanceData._m0[_291].y;
    precise float _354 = _353 + _352;
    precise float _355 = 0.0 * cbInstanceData._m0[_291].z;
    precise float _356 = _355 + _354;
    precise float _357 = 1.0 * cbInstanceData._m0[_291].w;
    precise float _358 = _357 + _356;
    precise float _361 = _244 * _244;
    precise float _362 = _251 * _251;
    precise float _363 = _361 + _362;
    precise float _364 = _258 * _258;
    precise float _365 = _363 + _364;
    precise float _367 = cbMtdParam._m0[11u].x * sqrt(_365);
    precise float _368 = cbPerFrame._m0[22u].x + _367;
    uint _369 = _190.w;
    float _370;
    float _372;
    float _374;
    if (_196)
    {
        _370 = 0.0;
        _372 = 0.0;
        _374 = 0.0;
    }
    else
    {
        uint _494 = _190.z;
        precise float _371;
        precise float _373;
        precise float _375;
        float _930;
        float _932;
        float _934;
        float _668 = 0.0;
        float _669 = 0.0;
        float _670 = 0.0;
        uint _671 = _494;
        uint _673 = 0u;
        float _709;
        float _728;
        vec4 _741;
        float _742;
        float _743;
        float _757;
        float _758;
        float _759;
        float _776;
        float _777;
        float _778;
        float _779;
        bool _780;
        bool _781;
        bool _782;
        precise float _783;
        precise float _784;
        precise float _785;
        float _786;
        float _787;
        float _788;
        precise float _789;
        bool _792;
        for (;;)
        {
            uint _675 = _671 & 255u;
            uint _677 = _675 * 24u;
            uvec3 _687 = uvec3(texelFetch(g_forceParam, int(_677)).x, texelFetch(g_forceParam, int(_677 + 1u)).x, texelFetch(g_forceParam, int(_677 + 2u)).x);
            uint _692 = (_675 * 24u) + 4u;
            vec4 _705 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_692)).x, texelFetch(g_forceParam, int(_692 + 1u)).x, texelFetch(g_forceParam, int(_692 + 2u)).x, texelFetch(g_forceParam, int(_692 + 3u)).x));
            _709 = _705.w;
            uint _711 = (_675 * 24u) + 8u;
            vec4 _724 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_711)).x, texelFetch(g_forceParam, int(_711 + 1u)).x, texelFetch(g_forceParam, int(_711 + 2u)).x, texelFetch(g_forceParam, int(_711 + 3u)).x));
            _728 = _724.w;
            uint _730 = (_675 * 24u) + 12u;
            _741 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_730)).x, texelFetch(g_forceParam, int(_730 + 1u)).x, _736, texelFetch(g_forceParam, int(_730 + 3u)).x));
            _742 = _741.x;
            _743 = _741.w;
            uint _746 = (_675 * 24u) + 16u;
            vec3 _756 = uintBitsToFloat(uvec3(texelFetch(g_forceParam, int(_746)).x, texelFetch(g_forceParam, int(_746 + 1u)).x, texelFetch(g_forceParam, int(_746 + 2u)).x));
            _757 = _756.x;
            _758 = _756.y;
            _759 = _756.z;
            uint _762 = (_675 * 24u) + 20u;
            vec4 _775 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_762)).x, texelFetch(g_forceParam, int(_762 + 1u)).x, texelFetch(g_forceParam, int(_762 + 2u)).x, texelFetch(g_forceParam, int(_762 + 3u)).x));
            _776 = _775.x;
            _777 = _775.y;
            _778 = _775.z;
            _779 = _775.w;
            _780 = _687.x == 1u;
            _781 = _687.y == 1u;
            _782 = _687.z == 1u;
            _783 = _344 - _705.x;
            _784 = _351 - _705.y;
            _785 = _358 - _705.z;
            _786 = _780 ? _724.x : _783;
            _787 = _780 ? _724.y : _784;
            _788 = _780 ? _724.z : _785;
            _789 = dot(vec3(_786, _787, _788), vec3(_786, _787, _788));
            _792 = _789 > 0.0;
            float frontier_phi_8_pred;
            float frontier_phi_8_pred_1;
            float frontier_phi_8_pred_2;
            if (_792)
            {
                precise float _915 = _783 * _783;
                precise float _916 = _784 * _784;
                precise float _917 = _915 + _916;
                precise float _918 = _785 * _785;
                precise float _919 = _918 + _917;
                float _920 = sqrt(_919);
                float _921 = inversesqrt(_789);
                precise float _922 = _786 * _921;
                precise float _923 = _787 * _921;
                precise float _924 = _788 * _921;
                precise float _927 = _920 / (isnan(0.001000000047497451305389404296875) ? _741.y : (isnan(_741.y) ? 0.001000000047497451305389404296875 : max(_741.y, 0.001000000047497451305389404296875)));
                precise float _928 = 1.0 - _927;
                float _1254 = isnan(0.0) ? _928 : (isnan(_928) ? 0.0 : max(_928, 0.0));
                float _929 = isnan(1.0) ? _1254 : (isnan(_1254) ? 1.0 : min(_1254, 1.0));
                float _979;
                if (_782)
                {
                    float _966 = inversesqrt(dot(vec3(_783, _784, _785), vec3(_783, _784, _785)));
                    precise float _967 = _783 * _966;
                    precise float _968 = _784 * _966;
                    precise float _969 = _785 * _966;
                    precise float _973 = dot(vec3(_922, _923, _924), vec3(_967, _968, _969)) * 0.800000011920928955078125;
                    precise float _975 = _973 + 0.20000000298023223876953125;
                    float _1265 = isnan(0.0) ? _975 : (isnan(_975) ? 0.0 : max(_975, 0.0));
                    precise float _978 = _929 * (isnan(1.0) ? _1265 : (isnan(_1265) ? 1.0 : min(_1265, 1.0)));
                    _979 = _978;
                }
                else
                {
                    _979 = _929;
                }
                float frontier_phi_8_pred_12_ladder;
                float frontier_phi_8_pred_12_ladder_1;
                float frontier_phi_8_pred_12_ladder_2;
                if (_979 > 0.0)
                {
                    bool _998 = _780 && (!_782);
                    precise float _1000 = _920 * (-4.0);
                    precise float _1004 = 6.283184051513671875 / (isnan(0.001000000047497451305389404296875) ? _742 : (isnan(_742) ? 0.001000000047497451305389404296875 : max(_742, 0.001000000047497451305389404296875)));
                    precise float _1006 = dot(vec2(_922, _924), vec2(_783, _785));
                    precise float _1010 = _1004 * _1006;
                    precise float _1011 = float(_998) * _1010;
                    precise float _1012 = _368 * _1004;
                    precise float _1013 = _1012 - _1011;
                    precise float _1014 = (_998 ? 0.0 : _1000) + _1013;
                    precise float _1016 = _728 * sin(_1014);
                    precise float _1017 = _923 * 0.0;
                    precise float _1018 = _1017 - _924;
                    precise float _1019 = _924 * 0.0;
                    precise float _1020 = _922 * 0.0;
                    precise float _1021 = _1019 - _1020;
                    precise float _1022 = _922 - _1017;
                    precise float _1023 = _743 * _1016;
                    float _1024 = _780 ? _1023 : 0.0;
                    float _1093;
                    if (_781)
                    {
                        precise float _1053 = _757 * 2.0;
                        precise float _1055 = _777 + _778;
                        precise float _1056 = _779 + _1055;
                        precise float _1058 = 6.283184051513671875 / (isnan(0.001000000047497451305389404296875) ? _757 : (isnan(_757) ? 0.001000000047497451305389404296875 : max(_757, 0.001000000047497451305389404296875)));
                        precise float _1059 = _776 * _1058;
                        precise float _1060 = (-0.0) - _922;
                        precise float _1065 = dot(vec2(_924, _1060), vec2(_783, _785)) / _1053;
                        precise float _1066 = (-0.0) - _1065;
                        float _1069 = fract(abs(_1065));
                        precise float _1070 = (-0.0) - _1069;
                        precise float _1072 = _1053 * ((_1065 >= _1066) ? _1069 : _1070);
                        precise float _1073 = _1072 * 6.283184051513671875;
                        precise float _1074 = _1073 / _1053;
                        precise float _1076 = (isnan(5.0) ? _757 : (isnan(_757) ? 5.0 : min(_757, 5.0))) * sin(_1074);
                        precise float _1077 = _1006 + _1076;
                        precise float _1078 = _757 * 0.25;
                        precise float _1080 = _368 * _776;
                        precise float _1081 = _1080 - _1078;
                        precise float _1082 = _1081 - _1077;
                        precise float _1083 = _776 * _1056;
                        precise float _1085 = _1082 / (isnan(0.001000000047497451305389404296875) ? _1083 : (isnan(_1083) ? 0.001000000047497451305389404296875 : max(_1083, 0.001000000047497451305389404296875)));
                        float _1086 = fract(_1085);
                        precise float _1088 = 1.0 - _1086;
                        float _1089 = (_1085 < 0.0) ? _1088 : _1086;
                        precise float _1090 = _1055 / _1056;
                        precise float _1091 = _777 / _1056;
                        float _1169;
                        if (_1089 < _1091)
                        {
                            precise float _1165 = _1089 / _1091;
                            _1169 = _1165;
                        }
                        else
                        {
                            float frontier_phi_27_24_ladder;
                            if (_1089 < _1090)
                            {
                                precise float _1179 = _1089 - _1091;
                                precise float _1180 = _1090 - _1091;
                                precise float _1181 = _1179 / _1180;
                                precise float _1170 = 1.0 - _1181;
                                frontier_phi_27_24_ladder = _1170;
                            }
                            else
                            {
                                frontier_phi_27_24_ladder = 0.0;
                            }
                            _1169 = frontier_phi_27_24_ladder;
                        }
                        precise float _1171 = _759 * _1169;
                        precise float _1172 = _1058 * _1006;
                        precise float _1173 = _368 * _1059;
                        precise float _1174 = _1173 - _1172;
                        precise float _1176 = _758 + sin(_1174);
                        precise float _1178 = _1171 * abs(_1176);
                        precise float _1094 = _1178 + 0.0;
                        _1093 = _1094;
                    }
                    else
                    {
                        _1093 = 0.0;
                    }
                    precise float _1095 = _709 + _1016;
                    precise float _1096 = _1095 + _1093;
                    precise float _1097 = _922 * _1096;
                    precise float _1098 = _923 * _1096;
                    precise float _1099 = _924 * _1096;
                    precise float _1100 = _1018 * _1024;
                    precise float _1101 = _1021 * _1024;
                    precise float _1102 = _1022 * _1024;
                    precise float _1103 = _1100 + _1097;
                    precise float _1104 = _1101 + _1098;
                    precise float _1105 = _1102 + _1099;
                    precise float _1106 = _979 * _1103;
                    precise float _1107 = _979 * _1104;
                    precise float _1108 = _979 * _1105;
                    precise float _931 = _1106 * 0.0500000007450580596923828125;
                    precise float _933 = _1107 * 0.0500000007450580596923828125;
                    precise float _935 = _1108 * 0.0500000007450580596923828125;
                    frontier_phi_8_pred_12_ladder = _931;
                    frontier_phi_8_pred_12_ladder_1 = _933;
                    frontier_phi_8_pred_12_ladder_2 = _935;
                }
                else
                {
                    frontier_phi_8_pred_12_ladder = 0.0;
                    frontier_phi_8_pred_12_ladder_1 = 0.0;
                    frontier_phi_8_pred_12_ladder_2 = 0.0;
                }
                frontier_phi_8_pred = frontier_phi_8_pred_12_ladder;
                frontier_phi_8_pred_1 = frontier_phi_8_pred_12_ladder_1;
                frontier_phi_8_pred_2 = frontier_phi_8_pred_12_ladder_2;
            }
            else
            {
                frontier_phi_8_pred = 0.0;
                frontier_phi_8_pred_1 = 0.0;
                frontier_phi_8_pred_2 = 0.0;
            }
            _930 = frontier_phi_8_pred;
            _932 = frontier_phi_8_pred_1;
            _934 = frontier_phi_8_pred_2;
            _371 = _668 + _930;
            _373 = _669 + _932;
            _375 = _670 + _934;
            uint _674 = _673 + 1u;
            if (_674 == _193)
            {
                break;
            }
            else
            {
                _668 = _371;
                _669 = _373;
                _670 = _375;
                _671 = (_673 != 3u) ? (_671 >> 8u) : _369;
                _673 = _674;
                continue;
            }
        }
        _370 = _371;
        _372 = _373;
        _374 = _375;
    }
    precise float _376 = _370 * _370;
    precise float _377 = _372 * _372;
    precise float _378 = _376 + _377;
    precise float _379 = _374 * _374;
    precise float _380 = _378 + _379;
    float _381 = sqrt(_380);
    bool _382 = _381 < 0.00011000000085914507508277893066406;
    float _387 = inversesqrt(dot(vec3(cbInstanceData._m0[_184].x, cbInstanceData._m0[_284].x, cbInstanceData._m0[_291].x), vec3(cbInstanceData._m0[_184].x, cbInstanceData._m0[_284].x, cbInstanceData._m0[_291].x)));
    precise float _388 = cbInstanceData._m0[_184].x * _387;
    precise float _389 = cbInstanceData._m0[_284].x * _387;
    precise float _390 = cbInstanceData._m0[_291].x * _387;
    float _394 = inversesqrt(dot(vec3(cbInstanceData._m0[_184].y, cbInstanceData._m0[_284].y, cbInstanceData._m0[_291].y), vec3(cbInstanceData._m0[_184].y, cbInstanceData._m0[_284].y, cbInstanceData._m0[_291].y)));
    precise float _395 = cbInstanceData._m0[_184].y * _394;
    precise float _396 = cbInstanceData._m0[_284].y * _394;
    precise float _397 = cbInstanceData._m0[_291].y * _394;
    float _401 = inversesqrt(dot(vec3(cbInstanceData._m0[_184].z, cbInstanceData._m0[_284].z, cbInstanceData._m0[_291].z), vec3(cbInstanceData._m0[_184].z, cbInstanceData._m0[_284].z, cbInstanceData._m0[_291].z)));
    precise float _402 = cbInstanceData._m0[_184].z * _401;
    precise float _403 = cbInstanceData._m0[_284].z * _401;
    precise float _404 = cbInstanceData._m0[_291].z * _401;
    precise float _405 = _388 * 0.0;
    precise float _406 = 1.0 * _395;
    precise float _407 = _406 + _405;
    precise float _408 = 0.0 * _402;
    precise float _409 = _408 + _407;
    precise float _410 = _389 * 0.0;
    precise float _411 = 1.0 * _396;
    precise float _412 = _411 + _410;
    precise float _413 = 0.0 * _403;
    precise float _414 = _413 + _412;
    precise float _415 = _390 * 0.0;
    precise float _416 = 1.0 * _397;
    precise float _417 = _416 + _415;
    precise float _418 = 0.0 * _404;
    precise float _419 = _418 + _417;
    float _423 = inversesqrt(dot(vec3(_370, _372, _374), vec3(_370, _372, _374)));
    precise float _424 = _370 * _423;
    precise float _425 = _372 * _423;
    precise float _426 = _374 * _423;
    precise float _427 = _414 * _426;
    precise float _428 = _419 * _425;
    precise float _429 = _427 - _428;
    precise float _430 = _419 * _424;
    precise float _431 = _409 * _426;
    precise float _432 = _430 - _431;
    precise float _433 = _409 * _425;
    precise float _434 = _414 * _424;
    precise float _435 = _433 - _434;
    float _439 = inversesqrt(dot(vec3(_429, _432, _435), vec3(_429, _432, _435)));
    precise float _440 = _439 * _429;
    precise float _441 = _439 * _432;
    precise float _442 = _439 * _435;
    precise float _443 = _381 + 1.0;
    precise float _445 = cbMtdParam._m0[10u].w * log2(_443);
    precise float _446 = _244 - _344;
    precise float _447 = _251 - _351;
    precise float _448 = _258 - _358;
    precise float _449 = dot(vec3(_440, _441, _442), vec3(_446, _447, _448));
    precise float _452 = _440 * _449;
    precise float _453 = _441 * _449;
    precise float _454 = _442 * _449;
    precise float _455 = _344 + _452;
    precise float _456 = _351 + _453;
    precise float _457 = _358 + _454;
    precise float _458 = _244 - _455;
    precise float _459 = _251 - _456;
    precise float _460 = _258 - _457;
    precise float _461 = _441 * _460;
    precise float _462 = _442 * _459;
    precise float _463 = _461 - _462;
    precise float _464 = _442 * _458;
    precise float _465 = _440 * _460;
    precise float _466 = _464 - _465;
    precise float _467 = _440 * _459;
    precise float _468 = _441 * _458;
    precise float _469 = _467 - _468;
    float _470 = sin(_445);
    float _471 = cos(_445);
    precise float _472 = _458 * _471;
    precise float _473 = _459 * _471;
    precise float _474 = _460 * _471;
    precise float _475 = _470 * _463;
    precise float _476 = _470 * _466;
    precise float _477 = _470 * _469;
    precise float _478 = _472 + _475;
    precise float _479 = _473 + _476;
    precise float _480 = _477 + _474;
    precise float _481 = _455 + _478;
    precise float _482 = _456 + _479;
    precise float _483 = _457 + _480;
    precise float _484 = _481 - _244;
    precise float _485 = _482 - _251;
    precise float _486 = _483 - _258;
    float _487 = _382 ? 0.0 : _484;
    float _488 = _382 ? 0.0 : _485;
    float _489 = _382 ? 0.0 : _486;
    precise float _490 = _244 + _487;
    precise float _491 = _251 + _488;
    precise float _492 = _258 + _489;
    precise float _493 = cbPerFrame._m0[22u].x + _333;
    float _495;
    float _497;
    float _499;
    if (_196)
    {
        _495 = 0.0;
        _497 = 0.0;
        _499 = 0.0;
    }
    else
    {
        uint _667 = _190.z;
        precise float _496;
        precise float _498;
        precise float _500;
        float _954;
        float _956;
        float _958;
        float _793 = 0.0;
        float _794 = 0.0;
        float _795 = 0.0;
        uint _796 = _667;
        uint _798 = 0u;
        float _832;
        float _851;
        vec4 _864;
        float _865;
        float _866;
        float _879;
        float _880;
        float _881;
        float _897;
        float _898;
        float _899;
        float _900;
        bool _901;
        bool _902;
        bool _903;
        precise float _904;
        precise float _905;
        precise float _906;
        float _907;
        float _908;
        float _909;
        precise float _910;
        bool _913;
        for (;;)
        {
            uint _800 = _796 & 255u;
            uint _801 = _800 * 24u;
            uvec3 _810 = uvec3(texelFetch(g_forceParam, int(_801)).x, texelFetch(g_forceParam, int(_801 + 1u)).x, texelFetch(g_forceParam, int(_801 + 2u)).x);
            uint _815 = (_800 * 24u) + 4u;
            vec4 _828 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_815)).x, texelFetch(g_forceParam, int(_815 + 1u)).x, texelFetch(g_forceParam, int(_815 + 2u)).x, texelFetch(g_forceParam, int(_815 + 3u)).x));
            _832 = _828.w;
            uint _834 = (_800 * 24u) + 8u;
            vec4 _847 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_834)).x, texelFetch(g_forceParam, int(_834 + 1u)).x, texelFetch(g_forceParam, int(_834 + 2u)).x, texelFetch(g_forceParam, int(_834 + 3u)).x));
            _851 = _847.w;
            uint _853 = (_800 * 24u) + 12u;
            _864 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_853)).x, texelFetch(g_forceParam, int(_853 + 1u)).x, _859, texelFetch(g_forceParam, int(_853 + 3u)).x));
            _865 = _864.x;
            _866 = _864.w;
            uint _868 = (_800 * 24u) + 16u;
            vec3 _878 = uintBitsToFloat(uvec3(texelFetch(g_forceParam, int(_868)).x, texelFetch(g_forceParam, int(_868 + 1u)).x, texelFetch(g_forceParam, int(_868 + 2u)).x));
            _879 = _878.x;
            _880 = _878.y;
            _881 = _878.z;
            uint _883 = (_800 * 24u) + 20u;
            vec4 _896 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_883)).x, texelFetch(g_forceParam, int(_883 + 1u)).x, texelFetch(g_forceParam, int(_883 + 2u)).x, texelFetch(g_forceParam, int(_883 + 3u)).x));
            _897 = _896.x;
            _898 = _896.y;
            _899 = _896.z;
            _900 = _896.w;
            _901 = _810.x == 1u;
            _902 = _810.y == 1u;
            _903 = _810.z == 1u;
            _904 = _304 - _828.x;
            _905 = _311 - _828.y;
            _906 = _318 - _828.z;
            _907 = _901 ? _847.x : _904;
            _908 = _901 ? _847.y : _905;
            _909 = _901 ? _847.z : _906;
            _910 = dot(vec3(_907, _908, _909), vec3(_907, _908, _909));
            _913 = _910 > 0.0;
            float frontier_phi_10_pred;
            float frontier_phi_10_pred_1;
            float frontier_phi_10_pred_2;
            if (_913)
            {
                precise float _940 = _904 * _904;
                precise float _941 = _905 * _905;
                precise float _942 = _940 + _941;
                precise float _943 = _906 * _906;
                precise float _944 = _943 + _942;
                float _945 = sqrt(_944);
                float _946 = inversesqrt(_910);
                precise float _947 = _907 * _946;
                precise float _948 = _908 * _946;
                precise float _949 = _909 * _946;
                precise float _951 = _945 / (isnan(0.001000000047497451305389404296875) ? _864.y : (isnan(_864.y) ? 0.001000000047497451305389404296875 : max(_864.y, 0.001000000047497451305389404296875)));
                precise float _952 = 1.0 - _951;
                float _1301 = isnan(0.0) ? _952 : (isnan(_952) ? 0.0 : max(_952, 0.0));
                float _953 = isnan(1.0) ? _1301 : (isnan(_1301) ? 1.0 : min(_1301, 1.0));
                float _995;
                if (_903)
                {
                    float _984 = inversesqrt(dot(vec3(_904, _905, _906), vec3(_904, _905, _906)));
                    precise float _985 = _904 * _984;
                    precise float _986 = _905 * _984;
                    precise float _987 = _906 * _984;
                    precise float _991 = dot(vec3(_947, _948, _949), vec3(_985, _986, _987)) * 0.800000011920928955078125;
                    precise float _992 = _991 + 0.20000000298023223876953125;
                    float _1312 = isnan(0.0) ? _992 : (isnan(_992) ? 0.0 : max(_992, 0.0));
                    precise float _994 = _953 * (isnan(1.0) ? _1312 : (isnan(_1312) ? 1.0 : min(_1312, 1.0)));
                    _995 = _994;
                }
                else
                {
                    _995 = _953;
                }
                float frontier_phi_10_pred_15_ladder;
                float frontier_phi_10_pred_15_ladder_1;
                float frontier_phi_10_pred_15_ladder_2;
                if (_995 > 0.0)
                {
                    bool _1026 = _901 && (!_903);
                    precise float _1028 = _945 * (-4.0);
                    precise float _1031 = 6.283184051513671875 / (isnan(0.001000000047497451305389404296875) ? _865 : (isnan(_865) ? 0.001000000047497451305389404296875 : max(_865, 0.001000000047497451305389404296875)));
                    precise float _1032 = cbMtdParam._m0[11u].y * _1031;
                    precise float _1033 = dot(vec2(_947, _949), vec2(_904, _906));
                    precise float _1036 = _1033 * _1032;
                    precise float _1037 = float(_1026) * _1036;
                    precise float _1038 = _493 * _1032;
                    precise float _1039 = _1038 - _1037;
                    precise float _1040 = (_1026 ? 0.0 : _1028) + _1039;
                    precise float _1042 = _851 * sin(_1040);
                    precise float _1043 = _948 * 0.0;
                    precise float _1044 = _1043 - _949;
                    precise float _1045 = _949 * 0.0;
                    precise float _1046 = _947 * 0.0;
                    precise float _1047 = _1045 - _1046;
                    precise float _1048 = _947 - _1043;
                    precise float _1049 = _866 * _1042;
                    float _1050 = _901 ? _1049 : 0.0;
                    float _1149;
                    if (_902)
                    {
                        precise float _1111 = _879 * 2.0;
                        precise float _1112 = _898 + _899;
                        precise float _1113 = _900 + _1112;
                        precise float _1115 = 6.283184051513671875 / (isnan(0.001000000047497451305389404296875) ? _879 : (isnan(_879) ? 0.001000000047497451305389404296875 : max(_879, 0.001000000047497451305389404296875)));
                        precise float _1116 = cbMtdParam._m0[11u].y * _1115;
                        precise float _1117 = _897 * _1116;
                        precise float _1118 = (-0.0) - _947;
                        precise float _1122 = dot(vec2(_949, _1118), vec2(_904, _906)) / _1111;
                        precise float _1123 = (-0.0) - _1122;
                        float _1126 = fract(abs(_1122));
                        precise float _1127 = (-0.0) - _1126;
                        precise float _1129 = _1111 * ((_1122 >= _1123) ? _1126 : _1127);
                        precise float _1130 = _1129 * 6.283184051513671875;
                        precise float _1131 = _1130 / _1111;
                        precise float _1133 = (isnan(5.0) ? _879 : (isnan(_879) ? 5.0 : min(_879, 5.0))) * sin(_1131);
                        precise float _1134 = _1033 + _1133;
                        precise float _1135 = _879 * 0.25;
                        precise float _1136 = _493 * _897;
                        precise float _1137 = _1136 - _1135;
                        precise float _1138 = _1137 - _1134;
                        precise float _1139 = _897 * _1113;
                        precise float _1141 = _1138 / (isnan(0.001000000047497451305389404296875) ? _1139 : (isnan(_1139) ? 0.001000000047497451305389404296875 : max(_1139, 0.001000000047497451305389404296875)));
                        float _1142 = fract(_1141);
                        precise float _1144 = 1.0 - _1142;
                        float _1145 = (_1141 < 0.0) ? _1144 : _1142;
                        precise float _1146 = _1112 / _1113;
                        precise float _1147 = _898 / _1113;
                        float _1182;
                        if (_1145 < _1147)
                        {
                            precise float _1167 = _1145 / _1147;
                            _1182 = _1167;
                        }
                        else
                        {
                            float frontier_phi_29_26_ladder;
                            if (_1145 < _1146)
                            {
                                precise float _1192 = _1145 - _1147;
                                precise float _1193 = _1146 - _1147;
                                precise float _1194 = _1192 / _1193;
                                precise float _1183 = 1.0 - _1194;
                                frontier_phi_29_26_ladder = _1183;
                            }
                            else
                            {
                                frontier_phi_29_26_ladder = 0.0;
                            }
                            _1182 = frontier_phi_29_26_ladder;
                        }
                        precise float _1184 = _881 * _1182;
                        precise float _1185 = _1116 * _1033;
                        precise float _1186 = _493 * _1117;
                        precise float _1187 = _1186 - _1185;
                        precise float _1189 = _880 + sin(_1187);
                        precise float _1191 = _1184 * abs(_1189);
                        precise float _1150 = _1191 + 0.0;
                        _1149 = _1150;
                    }
                    else
                    {
                        _1149 = 0.0;
                    }
                    precise float _1151 = _832 + _1042;
                    precise float _1152 = _1151 + _1149;
                    precise float _1153 = _947 * _1152;
                    precise float _1154 = _948 * _1152;
                    precise float _1155 = _949 * _1152;
                    precise float _1156 = _1044 * _1050;
                    precise float _1157 = _1047 * _1050;
                    precise float _1158 = _1048 * _1050;
                    precise float _1159 = _1156 + _1153;
                    precise float _1160 = _1157 + _1154;
                    precise float _1161 = _1158 + _1155;
                    precise float _1162 = _995 * _1159;
                    precise float _1163 = _995 * _1160;
                    precise float _1164 = _995 * _1161;
                    precise float _955 = _1162 * 0.0500000007450580596923828125;
                    precise float _957 = _1163 * 0.0500000007450580596923828125;
                    precise float _959 = _1164 * 0.0500000007450580596923828125;
                    frontier_phi_10_pred_15_ladder = _955;
                    frontier_phi_10_pred_15_ladder_1 = _957;
                    frontier_phi_10_pred_15_ladder_2 = _959;
                }
                else
                {
                    frontier_phi_10_pred_15_ladder = 0.0;
                    frontier_phi_10_pred_15_ladder_1 = 0.0;
                    frontier_phi_10_pred_15_ladder_2 = 0.0;
                }
                frontier_phi_10_pred = frontier_phi_10_pred_15_ladder;
                frontier_phi_10_pred_1 = frontier_phi_10_pred_15_ladder_1;
                frontier_phi_10_pred_2 = frontier_phi_10_pred_15_ladder_2;
            }
            else
            {
                frontier_phi_10_pred = 0.0;
                frontier_phi_10_pred_1 = 0.0;
                frontier_phi_10_pred_2 = 0.0;
            }
            _954 = frontier_phi_10_pred;
            _956 = frontier_phi_10_pred_1;
            _958 = frontier_phi_10_pred_2;
            _496 = _793 + _954;
            _498 = _794 + _956;
            _500 = _795 + _958;
            uint _799 = _798 + 1u;
            if (_799 == _193)
            {
                break;
            }
            else
            {
                _793 = _496;
                _794 = _498;
                _795 = _500;
                _796 = (_798 != 3u) ? (_796 >> 8u) : _369;
                _798 = _799;
                continue;
            }
        }
        _495 = _496;
        _497 = _498;
        _499 = _500;
    }
    precise float _501 = _495 * _495;
    precise float _502 = _497 * _497;
    precise float _503 = _501 + _502;
    precise float _504 = _499 * _499;
    precise float _505 = _503 + _504;
    float _506 = sqrt(_505);
    bool _507 = _506 < 0.00011000000085914507508277893066406;
    float _511 = inversesqrt(dot(vec3(_495, _497, _499), vec3(_495, _497, _499)));
    precise float _512 = _495 * _511;
    precise float _513 = _497 * _511;
    precise float _514 = _499 * _511;
    precise float _515 = _414 * _514;
    precise float _516 = _419 * _513;
    precise float _517 = _515 - _516;
    precise float _518 = _419 * _512;
    precise float _519 = _409 * _514;
    precise float _520 = _518 - _519;
    precise float _521 = _409 * _513;
    precise float _522 = _414 * _512;
    precise float _523 = _521 - _522;
    float _527 = inversesqrt(dot(vec3(_517, _520, _523), vec3(_517, _520, _523)));
    precise float _528 = _527 * _517;
    precise float _529 = _527 * _520;
    precise float _530 = _527 * _523;
    precise float _531 = _506 + 1.0;
    precise float _533 = cbMtdParam._m0[10u].y * log2(_531);
    precise float _534 = _490 - _304;
    precise float _535 = _491 - _311;
    precise float _536 = _492 - _318;
    precise float _537 = dot(vec3(_528, _529, _530), vec3(_534, _535, _536));
    precise float _540 = _528 * _537;
    precise float _541 = _529 * _537;
    precise float _542 = _530 * _537;
    precise float _543 = _304 + _540;
    precise float _544 = _311 + _541;
    precise float _545 = _318 + _542;
    precise float _546 = _490 - _543;
    precise float _547 = _491 - _544;
    precise float _548 = _492 - _545;
    precise float _549 = _529 * _548;
    precise float _550 = _530 * _547;
    precise float _551 = _549 - _550;
    precise float _552 = _530 * _546;
    precise float _553 = _528 * _548;
    precise float _554 = _552 - _553;
    precise float _555 = _528 * _547;
    precise float _556 = _529 * _546;
    precise float _557 = _555 - _556;
    float _558 = sin(_533);
    float _559 = cos(_533);
    precise float _560 = _546 * _559;
    precise float _561 = _547 * _559;
    precise float _562 = _548 * _559;
    precise float _563 = _558 * _551;
    precise float _564 = _558 * _554;
    precise float _565 = _558 * _557;
    precise float _566 = _560 + _563;
    precise float _567 = _561 + _564;
    precise float _568 = _565 + _562;
    precise float _569 = _543 + _566;
    precise float _570 = _544 + _567;
    precise float _571 = _545 + _568;
    precise float _572 = _569 - _490;
    precise float _573 = _570 - _491;
    precise float _574 = _571 - _492;
    precise float _578 = _487 + (_507 ? 0.0 : _572);
    precise float _579 = _488 + (_507 ? 0.0 : _573);
    precise float _580 = _489 + (_507 ? 0.0 : _574);
    precise float _581 = _244 + _578;
    precise float _582 = _251 + _579;
    precise float _583 = _258 + _580;
    precise float _589 = _581 - cbSceneParam._m0[3u].x;
    precise float _590 = _582 - cbSceneParam._m0[3u].y;
    precise float _591 = _583 - cbSceneParam._m0[3u].z;
    precise float _619 = cbSceneParam._m0[24u].x * _589;
    precise float _620 = _590 * cbSceneParam._m0[24u].y;
    precise float _621 = _620 + _619;
    precise float _622 = _591 * cbSceneParam._m0[24u].z;
    precise float _623 = _622 + _621;
    precise float _624 = 1.0 * cbSceneParam._m0[24u].w;
    precise float _625 = _624 + _623;
    precise float _626 = cbSceneParam._m0[25u].x * _589;
    precise float _627 = _590 * cbSceneParam._m0[25u].y;
    precise float _628 = _627 + _626;
    precise float _629 = _591 * cbSceneParam._m0[25u].z;
    precise float _630 = _629 + _628;
    precise float _631 = 1.0 * cbSceneParam._m0[25u].w;
    precise float _632 = _631 + _630;
    precise float _633 = cbSceneParam._m0[26u].x * _589;
    precise float _634 = _590 * cbSceneParam._m0[26u].y;
    precise float _635 = _634 + _633;
    precise float _636 = _591 * cbSceneParam._m0[26u].z;
    precise float _637 = _636 + _635;
    precise float _638 = 1.0 * cbSceneParam._m0[26u].w;
    precise float _639 = _638 + _637;
    precise float _640 = cbSceneParam._m0[27u].x * _589;
    precise float _641 = _590 * cbSceneParam._m0[27u].y;
    precise float _642 = _641 + _640;
    precise float _643 = _591 * cbSceneParam._m0[27u].z;
    precise float _644 = _643 + _642;
    precise float _645 = 1.0 * cbSceneParam._m0[27u].w;
    precise float _646 = _645 + _644;
    gl_Position.x = _625;
    gl_Position.y = _632;
    gl_Position.z = _639;
    gl_Position.w = _646;
    POSITION_1.x = _625;
    POSITION_1.y = _632;
    POSITION_1.z = _639;
    POSITION_1.w = _646;
    NORMAL_1.x = fma(_170, cbObjMatrix._m0[_216].z, fma(_169, cbObjMatrix._m0[_216].y, cbObjMatrix._m0[_216].x * _167));
    NORMAL_1.y = fma(_170, cbObjMatrix._m0[_223].z, fma(_169, cbObjMatrix._m0[_223].y, cbObjMatrix._m0[_223].x * _167));
    NORMAL_1.z = fma(_170, cbObjMatrix._m0[_230].z, fma(_169, cbObjMatrix._m0[_230].y, cbObjMatrix._m0[_230].x * _167));
    NORMAL_1.w = float(_207);
    TANGENT_1.x = fma(_182, cbObjMatrix._m0[_216].z, fma(_181, cbObjMatrix._m0[_216].y, cbObjMatrix._m0[_216].x * _180));
    TANGENT_1.y = fma(_182, cbObjMatrix._m0[_223].z, fma(_181, cbObjMatrix._m0[_223].y, cbObjMatrix._m0[_223].x * _180));
    TANGENT_1.z = fma(_182, cbObjMatrix._m0[_230].z, fma(_181, cbObjMatrix._m0[_230].y, cbObjMatrix._m0[_230].x * _180));
    TANGENT_1.w = (float(TANGENT.w) + (-127.0)) * 0.0078740157186985015869140625;
    TEXCOORD_2 = ((float(int(uint(TEXCOORD.x))) * 0.00048828125) * cbTexScroll._m0[0u].x) + cbTexScroll._m0[0u].z;
    TEXCOORD_1_1 = ((float(int(uint(TEXCOORD.y))) * 0.00048828125) * cbTexScroll._m0[0u].y) + cbTexScroll._m0[0u].w;
    TEXCOORD_3.x = TEXCOORD_1.x;
    TEXCOORD_3.y = TEXCOORD_1.y;
    TEXCOORD_3.z = TEXCOORD_1.z;
    TEXCOORD_3.w = COLOR_1.x;
}


