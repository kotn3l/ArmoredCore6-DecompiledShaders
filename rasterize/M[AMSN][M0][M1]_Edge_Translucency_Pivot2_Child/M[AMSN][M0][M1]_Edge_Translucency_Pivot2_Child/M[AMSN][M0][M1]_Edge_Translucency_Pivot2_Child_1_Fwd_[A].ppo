#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[12];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_M0_M1_Edge_Translucency_Pivot2_Child_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_M0_M1_Edge_Translucency_Pivot2_Child_snp_0_Texture2D_1;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_M0_M1_Edge_Translucency_Pivot2_Child_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in float TEXCOORD;
layout(location = 4, component = 1) in float TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _865;
float _3462;
float _3463;
float _3464;
float _3465;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _178 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _179 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _180 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _186 = inversesqrt(dot(vec3(_178, _179, _180), vec3(_178, _179, _180)));
    float _193 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _200 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _223 = texture(sampler2D(M_AMSN_M0_M1_Edge_Translucency_Pivot2_Child_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1) + cbTextureTilingScale._m0[0u].w));
    float _229 = _223.w;
    float _230 = _223.x * cbMtdParam._m0[9u].x;
    float _231 = _223.y * cbMtdParam._m0[9u].y;
    float _232 = _223.z * cbMtdParam._m0[9u].z;
    vec4 _244 = texture(sampler2D(M_AMSN_M0_M1_Edge_Translucency_Pivot2_Child_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1) + cbTextureTilingScale._m0[1u].w));
    float _248 = _244.z;
    float _252 = (_244.x * 2.0) + (-1.0);
    float _254 = (_244.y * 2.0) + (-1.0);
    float _255 = dot(vec2(_252, _254), vec2(_252, _254));
    float _3474 = isnan(0.0) ? _255 : (isnan(_255) ? 0.0 : max(_255, 0.0));
    float _261 = sqrt(1.0 - (isnan(1.0) ? _3474 : (isnan(_3474) ? 1.0 : min(_3474, 1.0))));
    vec4 _273 = texture(sampler2D(M_AMSN_M0_M1_Edge_Translucency_Pivot2_Child_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_1) + cbTextureTilingScale._m0[3u].w));
    float _280 = cbMtdParam._m0[10u].x * _273.x;
    float _283 = fma(_261, _193 * NORMAL.x, fma(_254, _200 * TANGENT.x, (_186 * _178) * _252));
    float _286 = fma(_261, _193 * NORMAL.y, fma(_254, _200 * TANGENT.y, (_186 * _179) * _252));
    float _289 = fma(_261, _193 * NORMAL.z, fma(_254, _200 * TANGENT.z, (_186 * _180) * _252));
    float _293 = inversesqrt(dot(vec3(_283, _286, _289), vec3(_283, _286, _289)));
    float _294 = _293 * _283;
    float _295 = _293 * _286;
    float _296 = _293 * _289;
    float _3485 = isnan(0.0) ? _229 : (isnan(_229) ? 0.0 : max(_229, 0.0));
    float _297 = isnan(1.0) ? _3485 : (isnan(_3485) ? 1.0 : min(_3485, 1.0));
    float _3496 = isnan(0.0) ? _248 : (isnan(_248) ? 0.0 : max(_248, 0.0));
    float _298 = isnan(1.0) ? _3496 : (isnan(_3496) ? 1.0 : min(_3496, 1.0));
    float _299 = isnan(0.0) ? _280 : (isnan(_280) ? 0.0 : max(_280, 0.0));
    float _3512 = isnan(0.0) ? _230 : (isnan(_230) ? 0.0 : max(_230, 0.0));
    float _3523 = isnan(0.0) ? _231 : (isnan(_231) ? 0.0 : max(_231, 0.0));
    float _3534 = isnan(0.0) ? _232 : (isnan(_232) ? 0.0 : max(_232, 0.0));
    float _318 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _360 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _370 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _360);
    float _371 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _360);
    float _372 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _360);
    float _376 = inversesqrt(dot(vec3(_370, _371, _372), vec3(_370, _371, _372)));
    float _377 = _370 * _376;
    float _378 = _371 * _376;
    float _379 = _372 * _376;
    vec4 _384 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _386 = _384.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _544 = sqrt(((_370 * _370) + (_371 * _371)) + (_372 * _372));
        float _550 = (cbMatDynParam._m0[5u].x * _544) + cbMatDynParam._m0[5u].y;
        float _3545 = isnan(0.0) ? _550 : (isnan(_550) ? 0.0 : max(_550, 0.0));
        float _551 = isnan(1.0) ? _3545 : (isnan(_3545) ? 1.0 : min(_3545, 1.0));
        float _555 = (cbMatDynParam._m0[5u].z * _544) + cbMatDynParam._m0[5u].w;
        float _3556 = isnan(0.0) ? _555 : (isnan(_555) ? 0.0 : max(_555, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3556 : (isnan(_3556) ? 1.0 : min(_3556, 1.0))) - _551)) + _551) < ((_386 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _398 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _399 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _419 = fma(_296, cbSceneParam._m0[5u].z, fma(_295, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _294));
    float _422 = fma(_296, cbSceneParam._m0[6u].z, fma(_295, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _294));
    float _425 = fma(_296, cbSceneParam._m0[7u].z, fma(_295, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _294));
    uint _438 = uint(roundEven(NORMAL.w)) * 13u;
    uint _440 = _438 + 9u;
    uint _441 = _440 + uint(cbMatDynParam._m0[0u].w);
    float _447 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3512 : (isnan(_3512) ? 1.0 : min(_3512, 1.0)))) * cbInstanceData._m0[_441].x;
    float _448 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3523 : (isnan(_3523) ? 1.0 : min(_3523, 1.0)))) * cbInstanceData._m0[_441].y;
    float _449 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3534 : (isnan(_3534) ? 1.0 : min(_3534, 1.0)))) * cbInstanceData._m0[_441].z;
    float _3567 = isnan(0.0) ? _447 : (isnan(_447) ? 0.0 : max(_447, 0.0));
    float _450 = isnan(1.0) ? _3567 : (isnan(_3567) ? 1.0 : min(_3567, 1.0));
    float _3578 = isnan(0.0) ? _448 : (isnan(_448) ? 0.0 : max(_448, 0.0));
    float _451 = isnan(1.0) ? _3578 : (isnan(_3578) ? 1.0 : min(_3578, 1.0));
    float _3589 = isnan(0.0) ? _449 : (isnan(_449) ? 0.0 : max(_449, 0.0));
    float _452 = isnan(1.0) ? _3589 : (isnan(_3589) ? 1.0 : min(_3589, 1.0));
    vec4 _461 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _398, cbSceneParam._m0[86u].y * _399));
    float _464 = _461.x * TEXCOORD_3.w;
    float _465 = dot(vec3(_294, _295, _296), vec3(_377, _378, _379));
    float _468 = _465 * 2.0;
    float _472 = (_468 * _294) - _377;
    float _473 = (_468 * _295) - _378;
    float _474 = (_468 * _296) - _379;
    float _475 = dot(vec3(_377, _378, _379), vec3(_294, _295, _296));
    float _478 = abs(_475);
    float _3600 = isnan(0.0) ? _478 : (isnan(_478) ? 0.0 : max(_478, 0.0));
    float _480 = sqrt(_298);
    float _493 = exp2((_480 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3600 : (isnan(_3600) ? 1.0 : min(_3600, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_480 * 3.0));
    float _525 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _529 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _533 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _864;
    float _866;
    float _867;
    float _868;
    float _869;
    float _870;
    float _871;
    float _872;
    float _873;
    float _874;
    float _875;
    float _876;
    float _877;
    float _878;
    float _879;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _589 = fma(_533, cbModelParam._m0[26u].z, fma(_529, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _525));
        float _593 = fma(_533, cbModelParam._m0[27u].z, fma(_529, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _525));
        float _597 = fma(_533, cbModelParam._m0[28u].z, fma(_529, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _525));
        float _622 = _525 + _294;
        float _623 = _529 + _295;
        float _624 = _533 + _296;
        float _634 = fma(_624, cbModelParam._m0[26u].z, fma(_623, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _622)) - _589;
        float _635 = fma(_624, cbModelParam._m0[27u].z, fma(_623, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _622)) - _593;
        float _636 = fma(_624, cbModelParam._m0[28u].z, fma(_623, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _622)) - _597;
        float _640 = inversesqrt(dot(vec3(_634, _635, _636), vec3(_634, _635, _636)));
        float _653 = ((_640 * _634) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_589 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _654 = ((_640 * _635) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_593 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _655 = ((_640 * _636) / cbModelParam._m0[34u].z) + ((((((_597 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _658 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_653, _654, _655), 0.0);
        vec4 _665 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_653, _654, _655), 0.0);
        vec4 _672 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_653, _654, _655), 0.0);
        vec4 _679 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_653, _654, _655), 0.0);
        float _692 = exp2((_658.w + (-0.5)) * 20.0) * 2.0;
        float _693 = _692 * (_658.x + (-0.5));
        float _694 = _692 * (_658.y + (-0.5));
        float _695 = _692 * (_658.z + (-0.5));
        float _702 = exp2((_665.w + (-0.5)) * 20.0) * 2.0;
        float _703 = _702 * (_665.x + (-0.5));
        float _704 = _702 * (_665.y + (-0.5));
        float _705 = _702 * (_665.z + (-0.5));
        float _712 = exp2((_672.w + (-0.5)) * 20.0) * 2.0;
        float _713 = _712 * (_672.x + (-0.5));
        float _714 = _712 * (_672.y + (-0.5));
        float _715 = _712 * (_672.z + (-0.5));
        float _722 = exp2((_679.w + (-0.5)) * 20.0) * 2.0;
        float _723 = _722 * (_679.x + (-0.5));
        float _724 = _722 * (_679.y + (-0.5));
        float _725 = _722 * (_679.z + (-0.5));
        float _726 = isnan(0.0) ? _723 : (isnan(_723) ? 0.0 : max(_723, 0.0));
        float _727 = isnan(0.0) ? _724 : (isnan(_724) ? 0.0 : max(_724, 0.0));
        float _728 = isnan(0.0) ? _725 : (isnan(_725) ? 0.0 : max(_725, 0.0));
        float _729 = _693 * 0.5;
        float _730 = _703 * 0.5;
        float _731 = _713 * 0.5;
        float _732 = dot(vec3(_729, _730, _731), vec3(_729, _730, _731));
        float _737 = (_732 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_732);
        float _746 = (dot(vec3(_294, _295, _296), vec3(_737 * _729, _737 * _730, _737 * _731)) + 1.0) * 0.5;
        float _3626 = isnan(0.0) ? _746 : (isnan(_746) ? 0.0 : max(_746, 0.0));
        float _756 = sqrt(((_730 * _730) + (_729 * _729)) + (_731 * _731)) / (_726 + 9.9999997473787516355514526367188e-06);
        float _3637 = isnan(0.0) ? _756 : (isnan(_756) ? 0.0 : max(_756, 0.0));
        float _757 = isnan(1.0) ? _3637 : (isnan(_3637) ? 1.0 : min(_3637, 1.0));
        float _758 = _757 * 2.0;
        float _762 = (1.0 - _757) / (_757 + 1.0);
        float _3648 = isnan(0.0) ? _762 : (isnan(_762) ? 0.0 : max(_762, 0.0));
        float _763 = isnan(1.0) ? _3648 : (isnan(_3648) ? 1.0 : min(_3648, 1.0));
        float _772 = ((((1.0 - _763) * (_758 + 2.0)) * exp2(log2(isnan(1.0) ? _3626 : (isnan(_3626) ? 1.0 : min(_3626, 1.0))) * (_758 + 1.0))) + _763) * _726;
        float _773 = _694 * 0.5;
        float _774 = _704 * 0.5;
        float _775 = _714 * 0.5;
        float _776 = dot(vec3(_773, _774, _775), vec3(_773, _774, _775));
        float _781 = (_776 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_776);
        float _789 = (dot(vec3(_294, _295, _296), vec3(_781 * _773, _781 * _774, _781 * _775)) + 1.0) * 0.5;
        float _3659 = isnan(0.0) ? _789 : (isnan(_789) ? 0.0 : max(_789, 0.0));
        float _798 = sqrt(((_774 * _774) + (_773 * _773)) + (_775 * _775)) / (_727 + 9.9999997473787516355514526367188e-06);
        float _3670 = isnan(0.0) ? _798 : (isnan(_798) ? 0.0 : max(_798, 0.0));
        float _799 = isnan(1.0) ? _3670 : (isnan(_3670) ? 1.0 : min(_3670, 1.0));
        float _800 = _799 * 2.0;
        float _804 = (1.0 - _799) / (_799 + 1.0);
        float _3681 = isnan(0.0) ? _804 : (isnan(_804) ? 0.0 : max(_804, 0.0));
        float _805 = isnan(1.0) ? _3681 : (isnan(_3681) ? 1.0 : min(_3681, 1.0));
        float _814 = ((((1.0 - _805) * (_800 + 2.0)) * exp2(log2(isnan(1.0) ? _3659 : (isnan(_3659) ? 1.0 : min(_3659, 1.0))) * (_800 + 1.0))) + _805) * _727;
        float _815 = _695 * 0.5;
        float _816 = _705 * 0.5;
        float _817 = _715 * 0.5;
        float _818 = dot(vec3(_815, _816, _817), vec3(_815, _816, _817));
        float _823 = (_818 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_818);
        float _831 = (dot(vec3(_294, _295, _296), vec3(_823 * _815, _823 * _816, _823 * _817)) + 1.0) * 0.5;
        float _3692 = isnan(0.0) ? _831 : (isnan(_831) ? 0.0 : max(_831, 0.0));
        float _840 = sqrt(((_816 * _816) + (_815 * _815)) + (_817 * _817)) / (_728 + 9.9999997473787516355514526367188e-06);
        float _3703 = isnan(0.0) ? _840 : (isnan(_840) ? 0.0 : max(_840, 0.0));
        float _841 = isnan(1.0) ? _3703 : (isnan(_3703) ? 1.0 : min(_3703, 1.0));
        float _842 = _841 * 2.0;
        float _846 = (1.0 - _841) / (_841 + 1.0);
        float _3714 = isnan(0.0) ? _846 : (isnan(_846) ? 0.0 : max(_846, 0.0));
        float _847 = isnan(1.0) ? _3714 : (isnan(_3714) ? 1.0 : min(_3714, 1.0));
        float _856 = ((((1.0 - _847) * (_842 + 2.0)) * exp2(log2(isnan(1.0) ? _3692 : (isnan(_3692) ? 1.0 : min(_3692, 1.0))) * (_842 + 1.0))) + _847) * _728;
        _864 = _695;
        _866 = _694;
        _867 = _693;
        _868 = _705;
        _869 = _704;
        _870 = _703;
        _871 = _715;
        _872 = _714;
        _873 = _713;
        _874 = _728;
        _875 = _727;
        _876 = _726;
        _877 = cbModelParam._m0[36u].z * (isnan(0.0) ? _772 : (isnan(_772) ? 0.0 : max(_772, 0.0)));
        _878 = cbModelParam._m0[36u].z * (isnan(0.0) ? _814 : (isnan(_814) ? 0.0 : max(_814, 0.0)));
        _879 = cbModelParam._m0[36u].z * (isnan(0.0) ? _856 : (isnan(_856) ? 0.0 : max(_856, 0.0)));
    }
    else
    {
        _864 = _865;
        _866 = _865;
        _867 = _865;
        _868 = _865;
        _869 = _865;
        _870 = _865;
        _871 = _865;
        _872 = _865;
        _873 = _865;
        _874 = _865;
        _875 = _865;
        _876 = _865;
        _877 = 0.0;
        _878 = 0.0;
        _879 = 0.0;
    }
    float _1177;
    float _1178;
    float _1179;
    float _1180;
    float _1181;
    float _1182;
    float _1183;
    float _1184;
    float _1185;
    float _1186;
    float _1187;
    float _1188;
    float _1189;
    float _1190;
    float _1191;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _908 = fma(_533, cbModelParam._m0[30u].z, fma(_529, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _525));
        float _912 = fma(_533, cbModelParam._m0[31u].z, fma(_529, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _525));
        float _916 = fma(_533, cbModelParam._m0[32u].z, fma(_529, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _525));
        float _939 = _525 + _294;
        float _940 = _529 + _295;
        float _941 = _533 + _296;
        float _951 = fma(_941, cbModelParam._m0[30u].z, fma(_940, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _939)) - _908;
        float _952 = fma(_941, cbModelParam._m0[31u].z, fma(_940, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _939)) - _912;
        float _953 = fma(_941, cbModelParam._m0[32u].z, fma(_940, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _939)) - _916;
        float _957 = inversesqrt(dot(vec3(_951, _952, _953), vec3(_951, _952, _953)));
        float _970 = ((_957 * _951) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_908 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _971 = ((_957 * _952) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_912 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _972 = ((_957 * _953) / cbModelParam._m0[35u].z) + ((((((_916 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _974 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_970, _971, _972), 0.0);
        vec4 _981 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_970, _971, _972), 0.0);
        vec4 _988 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_970, _971, _972), 0.0);
        vec4 _995 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_970, _971, _972), 0.0);
        float _1007 = exp2((_974.w + (-0.5)) * 20.0) * 2.0;
        float _1008 = _1007 * (_974.x + (-0.5));
        float _1009 = _1007 * (_974.y + (-0.5));
        float _1010 = _1007 * (_974.z + (-0.5));
        float _1017 = exp2((_981.w + (-0.5)) * 20.0) * 2.0;
        float _1018 = _1017 * (_981.x + (-0.5));
        float _1019 = _1017 * (_981.y + (-0.5));
        float _1020 = _1017 * (_981.z + (-0.5));
        float _1027 = exp2((_988.w + (-0.5)) * 20.0) * 2.0;
        float _1028 = _1027 * (_988.x + (-0.5));
        float _1029 = _1027 * (_988.y + (-0.5));
        float _1030 = _1027 * (_988.z + (-0.5));
        float _1037 = exp2((_995.w + (-0.5)) * 20.0) * 2.0;
        float _1038 = _1037 * (_995.x + (-0.5));
        float _1039 = _1037 * (_995.y + (-0.5));
        float _1040 = _1037 * (_995.z + (-0.5));
        float _1041 = isnan(0.0) ? _1038 : (isnan(_1038) ? 0.0 : max(_1038, 0.0));
        float _1042 = isnan(0.0) ? _1039 : (isnan(_1039) ? 0.0 : max(_1039, 0.0));
        float _1043 = isnan(0.0) ? _1040 : (isnan(_1040) ? 0.0 : max(_1040, 0.0));
        float _1044 = _1008 * 0.5;
        float _1045 = _1018 * 0.5;
        float _1046 = _1028 * 0.5;
        float _1047 = dot(vec3(_1044, _1045, _1046), vec3(_1044, _1045, _1046));
        float _1052 = (_1047 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1047);
        float _1060 = (dot(vec3(_294, _295, _296), vec3(_1052 * _1044, _1052 * _1045, _1052 * _1046)) + 1.0) * 0.5;
        float _3755 = isnan(0.0) ? _1060 : (isnan(_1060) ? 0.0 : max(_1060, 0.0));
        float _1069 = sqrt(((_1045 * _1045) + (_1044 * _1044)) + (_1046 * _1046)) / (_1041 + 9.9999997473787516355514526367188e-06);
        float _3766 = isnan(0.0) ? _1069 : (isnan(_1069) ? 0.0 : max(_1069, 0.0));
        float _1070 = isnan(1.0) ? _3766 : (isnan(_3766) ? 1.0 : min(_3766, 1.0));
        float _1071 = _1070 * 2.0;
        float _1075 = (1.0 - _1070) / (_1070 + 1.0);
        float _3777 = isnan(0.0) ? _1075 : (isnan(_1075) ? 0.0 : max(_1075, 0.0));
        float _1076 = isnan(1.0) ? _3777 : (isnan(_3777) ? 1.0 : min(_3777, 1.0));
        float _1085 = ((((1.0 - _1076) * (_1071 + 2.0)) * exp2(log2(isnan(1.0) ? _3755 : (isnan(_3755) ? 1.0 : min(_3755, 1.0))) * (_1071 + 1.0))) + _1076) * _1041;
        float _1086 = _1009 * 0.5;
        float _1087 = _1019 * 0.5;
        float _1088 = _1029 * 0.5;
        float _1089 = dot(vec3(_1086, _1087, _1088), vec3(_1086, _1087, _1088));
        float _1094 = (_1089 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1089);
        float _1102 = (dot(vec3(_294, _295, _296), vec3(_1094 * _1086, _1094 * _1087, _1094 * _1088)) + 1.0) * 0.5;
        float _3788 = isnan(0.0) ? _1102 : (isnan(_1102) ? 0.0 : max(_1102, 0.0));
        float _1111 = sqrt(((_1087 * _1087) + (_1086 * _1086)) + (_1088 * _1088)) / (_1042 + 9.9999997473787516355514526367188e-06);
        float _3799 = isnan(0.0) ? _1111 : (isnan(_1111) ? 0.0 : max(_1111, 0.0));
        float _1112 = isnan(1.0) ? _3799 : (isnan(_3799) ? 1.0 : min(_3799, 1.0));
        float _1113 = _1112 * 2.0;
        float _1117 = (1.0 - _1112) / (_1112 + 1.0);
        float _3810 = isnan(0.0) ? _1117 : (isnan(_1117) ? 0.0 : max(_1117, 0.0));
        float _1118 = isnan(1.0) ? _3810 : (isnan(_3810) ? 1.0 : min(_3810, 1.0));
        float _1127 = ((((1.0 - _1118) * (_1113 + 2.0)) * exp2(log2(isnan(1.0) ? _3788 : (isnan(_3788) ? 1.0 : min(_3788, 1.0))) * (_1113 + 1.0))) + _1118) * _1042;
        float _1128 = _1010 * 0.5;
        float _1129 = _1020 * 0.5;
        float _1130 = _1030 * 0.5;
        float _1131 = dot(vec3(_1128, _1129, _1130), vec3(_1128, _1129, _1130));
        float _1136 = (_1131 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1131);
        float _1144 = (dot(vec3(_294, _295, _296), vec3(_1136 * _1128, _1136 * _1129, _1136 * _1130)) + 1.0) * 0.5;
        float _3821 = isnan(0.0) ? _1144 : (isnan(_1144) ? 0.0 : max(_1144, 0.0));
        float _1153 = sqrt(((_1129 * _1129) + (_1128 * _1128)) + (_1130 * _1130)) / (_1043 + 9.9999997473787516355514526367188e-06);
        float _3832 = isnan(0.0) ? _1153 : (isnan(_1153) ? 0.0 : max(_1153, 0.0));
        float _1154 = isnan(1.0) ? _3832 : (isnan(_3832) ? 1.0 : min(_3832, 1.0));
        float _1155 = _1154 * 2.0;
        float _1159 = (1.0 - _1154) / (_1154 + 1.0);
        float _3843 = isnan(0.0) ? _1159 : (isnan(_1159) ? 0.0 : max(_1159, 0.0));
        float _1160 = isnan(1.0) ? _3843 : (isnan(_3843) ? 1.0 : min(_3843, 1.0));
        float _1169 = ((((1.0 - _1160) * (_1155 + 2.0)) * exp2(log2(isnan(1.0) ? _3821 : (isnan(_3821) ? 1.0 : min(_3821, 1.0))) * (_1155 + 1.0))) + _1160) * _1043;
        _1177 = _1010;
        _1178 = _1009;
        _1179 = _1008;
        _1180 = _1020;
        _1181 = _1019;
        _1182 = _1018;
        _1183 = _1030;
        _1184 = _1029;
        _1185 = _1028;
        _1186 = _1043;
        _1187 = _1042;
        _1188 = _1041;
        _1189 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1085 : (isnan(_1085) ? 0.0 : max(_1085, 0.0)));
        _1190 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1127 : (isnan(_1127) ? 0.0 : max(_1127, 0.0)));
        _1191 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1169 : (isnan(_1169) ? 0.0 : max(_1169, 0.0)));
    }
    else
    {
        _1177 = _865;
        _1178 = _865;
        _1179 = _865;
        _1180 = _865;
        _1181 = _865;
        _1182 = _865;
        _1183 = _865;
        _1184 = _865;
        _1185 = _865;
        _1186 = _865;
        _1187 = _865;
        _1188 = _865;
        _1189 = 0.0;
        _1190 = 0.0;
        _1191 = 0.0;
    }
    float _1201 = (cbModelParam._m0[1u].x * (_1189 - _877)) + _877;
    float _1202 = (cbModelParam._m0[1u].x * (_1190 - _878)) + _878;
    float _1203 = (cbModelParam._m0[1u].x * (_1191 - _879)) + _879;
    float _1224 = fma(_1203, cbSceneParam._m0[89u].z, fma(_1202, cbSceneParam._m0[89u].y, _1201 * cbSceneParam._m0[89u].x));
    float _1227 = fma(_1203, cbSceneParam._m0[90u].z, fma(_1202, cbSceneParam._m0[90u].y, _1201 * cbSceneParam._m0[90u].x));
    float _1230 = fma(_1203, cbSceneParam._m0[91u].z, fma(_1202, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1201));
    float _1245 = _472 * 0.5;
    float _1246 = _473 * 0.5;
    float _1247 = _474 * 0.5;
    float _1248 = dot(vec4(_1245, _1246, _1247, 1.0), vec4(_1179, _1182, _1185, _1188));
    float _1251 = dot(vec4(_1245, _1246, _1247, 1.0), vec4(_1178, _1181, _1184, _1187));
    float _1254 = dot(vec4(_1245, _1246, _1247, 1.0), vec4(_1177, _1180, _1183, _1186));
    float _1288;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1261 = dot(vec4(_1245, _1246, _1247, 1.0), vec4(_864, _868, _871, _874));
        float _1265 = dot(vec4(_1245, _1246, _1247, 1.0), vec4(_866, _869, _872, _875));
        float _1269 = dot(vec4(_1245, _1246, _1247, 1.0), vec4(_867, _870, _873, _876));
        float _1276 = dot(vec4(cbModelParam._m0[39u]), vec4(_1245, _1246, _1247, 1.0));
        _1288 = dot(vec3(isnan(0.0) ? _1269 : (isnan(_1269) ? 0.0 : max(_1269, 0.0)), isnan(0.0) ? _1265 : (isnan(_1265) ? 0.0 : max(_1265, 0.0)), isnan(0.0) ? _1261 : (isnan(_1261) ? 0.0 : max(_1261, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1276) ? 0.0 : (isnan(0.0) ? _1276 : max(0.0, _1276))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1288 = 1.0;
    }
    float _1299;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1290 = dot(vec4(cbModelParam._m0[40u]), vec4(_1245, _1246, _1247, 1.0));
        _1299 = dot(vec3(isnan(0.0) ? _1248 : (isnan(_1248) ? 0.0 : max(_1248, 0.0)), isnan(0.0) ? _1251 : (isnan(_1251) ? 0.0 : max(_1251, 0.0)), isnan(0.0) ? _1254 : (isnan(_1254) ? 0.0 : max(_1254, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1290) ? 0.0 : (isnan(0.0) ? _1290 : max(0.0, _1290))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1299 = 1.0;
    }
    float _1303 = (_1299 * cbModelParam._m0[1u].x) + (_1288 * (1.0 - cbModelParam._m0[1u].x));
    float _1313 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _298);
    float _1314 = isnan(_1313) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1313 : min(cbModelParam._m0[25u].z, _1313));
    float _1396;
    float _1398;
    float _1400;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1363 = fma(_533, cbModelParam._m0[13u].z, fma(_529, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _525)) + cbModelParam._m0[13u].w;
        float _1367 = fma(_533, cbModelParam._m0[14u].z, fma(_529, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _525)) + cbModelParam._m0[14u].w;
        float _1371 = fma(_533, cbModelParam._m0[15u].z, fma(_529, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _525)) + cbModelParam._m0[15u].w;
        float _1374 = fma(_474, cbModelParam._m0[13u].z, fma(_473, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _472));
        float _1377 = fma(_474, cbModelParam._m0[14u].z, fma(_473, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _472));
        float _1380 = fma(_474, cbModelParam._m0[15u].z, fma(_473, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _472));
        float _1408;
        if (_1374 > 0.0)
        {
            _1408 = abs((1.0 - _1363) / _1374);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1374 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1363 + 1.0) / _1374);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1408 = frontier_phi_17_15_ladder;
        }
        float _1588;
        if (_1377 > 0.0)
        {
            _1588 = abs((1.0 - _1367) / _1377);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1377 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1367 + 1.0) / _1377);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1588 = frontier_phi_26_22_ladder;
        }
        float _1661;
        if (_1380 > 0.0)
        {
            _1661 = abs((1.0 - _1371) / _1380);
        }
        else
        {
            float frontier_phi_37_33_ladder;
            if (_1380 < 0.0)
            {
                frontier_phi_37_33_ladder = abs((_1371 + 1.0) / _1380);
            }
            else
            {
                frontier_phi_37_33_ladder = 5000.0;
            }
            _1661 = frontier_phi_37_33_ladder;
        }
        float _1663 = isnan(_1588) ? _1408 : (isnan(_1408) ? _1588 : min(_1408, _1588));
        float _1664 = isnan(_1661) ? _1663 : (isnan(_1663) ? _1661 : min(_1663, _1661));
        float _1668 = (_1664 * _1374) + _1363;
        float _1669 = (_1664 * _1377) + _1367;
        float _1670 = (_1664 * _1380) + _1371;
        float _1671 = _1664 * 9.9999997473787516355514526367188e-05;
        float _1673 = (-1.0) - _1671;
        float _1675 = _1671 + 1.0;
        float frontier_phi_16_37_ladder;
        float frontier_phi_16_37_ladder_1;
        float frontier_phi_16_37_ladder_2;
        if ((_1670 > _1675) || ((_1670 < _1673) || ((_1669 > _1675) || ((_1669 < _1673) || ((_1668 < _1673) || (_1668 > _1675))))))
        {
            frontier_phi_16_37_ladder = 0.0;
            frontier_phi_16_37_ladder_1 = 0.0;
            frontier_phi_16_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1746 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1670, cbModelParam._m0[9u].z, fma(_1669, cbModelParam._m0[9u].y, _1668 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1670, cbModelParam._m0[10u].z, fma(_1669, cbModelParam._m0[10u].y, _1668 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1670, cbModelParam._m0[11u].z, fma(_1669, cbModelParam._m0[11u].y, _1668 * cbModelParam._m0[11u].x))), _1314);
            frontier_phi_16_37_ladder = _1746.z * cbModelParam._m0[1u].y;
            frontier_phi_16_37_ladder_1 = _1746.y * cbModelParam._m0[1u].y;
            frontier_phi_16_37_ladder_2 = _1746.x * cbModelParam._m0[1u].y;
        }
        _1396 = frontier_phi_16_37_ladder_2;
        _1398 = frontier_phi_16_37_ladder_1;
        _1400 = frontier_phi_16_37_ladder;
    }
    else
    {
        vec4 _1384 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_472, _473, _474), _1314);
        _1396 = _1384.x * cbModelParam._m0[1u].y;
        _1398 = _1384.y * cbModelParam._m0[1u].y;
        _1400 = _1384.z * cbModelParam._m0[1u].y;
    }
    float _1404 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _298);
    float _1405 = isnan(_1404) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1404 : min(cbModelParam._m0[25u].w, _1404));
    float _1498;
    float _1500;
    float _1502;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1462 = fma(_533, cbModelParam._m0[21u].z, fma(_529, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _525)) + cbModelParam._m0[21u].w;
        float _1466 = fma(_533, cbModelParam._m0[22u].z, fma(_529, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _525)) + cbModelParam._m0[22u].w;
        float _1470 = fma(_533, cbModelParam._m0[23u].z, fma(_529, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _525)) + cbModelParam._m0[23u].w;
        float _1473 = fma(_474, cbModelParam._m0[21u].z, fma(_473, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _472));
        float _1476 = fma(_474, cbModelParam._m0[22u].z, fma(_473, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _472));
        float _1479 = fma(_474, cbModelParam._m0[23u].z, fma(_473, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _472));
        float _1593;
        if (_1473 > 0.0)
        {
            _1593 = abs((1.0 - _1462) / _1473);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1473 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1462 + 1.0) / _1473);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1593 = frontier_phi_28_24_ladder;
        }
        float _1688;
        if (_1476 > 0.0)
        {
            _1688 = abs((1.0 - _1466) / _1476);
        }
        else
        {
            float frontier_phi_39_35_ladder;
            if (_1476 < 0.0)
            {
                frontier_phi_39_35_ladder = abs((_1466 + 1.0) / _1476);
            }
            else
            {
                frontier_phi_39_35_ladder = 5000.0;
            }
            _1688 = frontier_phi_39_35_ladder;
        }
        float _1956;
        if (_1479 > 0.0)
        {
            _1956 = abs((1.0 - _1470) / _1479);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1479 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1470 + 1.0) / _1479);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _1956 = frontier_phi_48_45_ladder;
        }
        float _1958 = isnan(_1688) ? _1593 : (isnan(_1593) ? _1688 : min(_1593, _1688));
        float _1959 = isnan(_1956) ? _1958 : (isnan(_1958) ? _1956 : min(_1958, _1956));
        float _1963 = (_1959 * _1473) + _1462;
        float _1964 = (_1959 * _1476) + _1466;
        float _1965 = (_1959 * _1479) + _1470;
        float _1966 = _1959 * 9.9999997473787516355514526367188e-05;
        float _1967 = (-1.0) - _1966;
        float _1969 = _1966 + 1.0;
        float frontier_phi_25_48_ladder;
        float frontier_phi_25_48_ladder_1;
        float frontier_phi_25_48_ladder_2;
        if ((_1965 > _1969) || ((_1965 < _1967) || ((_1964 > _1969) || ((_1964 < _1967) || ((_1963 < _1967) || (_1963 > _1969))))))
        {
            frontier_phi_25_48_ladder = 0.0;
            frontier_phi_25_48_ladder_1 = 0.0;
            frontier_phi_25_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2083 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_1965, cbModelParam._m0[17u].z, fma(_1964, cbModelParam._m0[17u].y, _1963 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_1965, cbModelParam._m0[18u].z, fma(_1964, cbModelParam._m0[18u].y, _1963 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_1965, cbModelParam._m0[19u].z, fma(_1964, cbModelParam._m0[19u].y, _1963 * cbModelParam._m0[19u].x))), _1405);
            frontier_phi_25_48_ladder = _2083.z * cbModelParam._m0[1u].z;
            frontier_phi_25_48_ladder_1 = _2083.y * cbModelParam._m0[1u].z;
            frontier_phi_25_48_ladder_2 = _2083.x * cbModelParam._m0[1u].z;
        }
        _1498 = frontier_phi_25_48_ladder_2;
        _1500 = frontier_phi_25_48_ladder_1;
        _1502 = frontier_phi_25_48_ladder;
    }
    else
    {
        vec4 _1482 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_472, _473, _474), _1405);
        _1498 = _1482.x * cbModelParam._m0[1u].z;
        _1500 = _1482.y * cbModelParam._m0[1u].z;
        _1502 = _1482.z * cbModelParam._m0[1u].z;
    }
    float _1514 = ((((1.0 - _493) * ((_480 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_493 * _480)) * _464;
    float _1515 = _1514 * ((cbModelParam._m0[1u].w * (_1498 - _1396)) + _1396);
    float _1516 = _1514 * ((cbModelParam._m0[1u].w * (_1500 - _1398)) + _1398);
    float _1517 = _1514 * ((cbModelParam._m0[1u].w * (_1502 - _1400)) + _1400);
    float _1520 = fma(_1517, cbSceneParam._m0[89u].z, fma(_1516, cbSceneParam._m0[89u].y, _1515 * cbSceneParam._m0[89u].x));
    float _1523 = fma(_1517, cbSceneParam._m0[90u].z, fma(_1516, cbSceneParam._m0[90u].y, _1515 * cbSceneParam._m0[90u].x));
    float _1526 = fma(_1517, cbSceneParam._m0[91u].z, fma(_1516, cbSceneParam._m0[91u].y, _1515 * cbSceneParam._m0[91u].x));
    uvec4 _1536 = floatBitsToUint(cbInstanceData._m0[_438 + 5u]);
    uint _1538 = _1536.x * 14u;
    uint _1539 = _1538 + 13u;
    float _1546 = _464 + (-1.0);
    float _1551 = (cbLight._m0[_1539].x * _1546) + 1.0;
    float _1552 = (cbLight._m0[_1539].y * _1546) + 1.0;
    float _1553 = (cbLight._m0[_1539].z * _1546) + 1.0;
    float _1554 = (cbLight._m0[_1539].w * _1546) + 1.0;
    uint _1556 = _1538 + 4u;
    float _1568 = dot(vec3(cbLight._m0[_1538].xyz), vec3(_294, _295, _296));
    float _1571 = isnan(1.0) ? _1551 : (isnan(_1551) ? 1.0 : min(_1551, 1.0));
    uint _1572 = _1538 + 5u;
    float _1584 = dot(vec3(cbLight._m0[_1538 | 1u].xyz), vec3(_294, _295, _296));
    float _1587 = isnan(1.0) ? _1552 : (isnan(_1552) ? 1.0 : min(_1552, 1.0));
    float _1652;
    float _1653;
    float _1654;
    if (_299 == 0.0)
    {
        float _3979 = isnan(0.0) ? _1568 : (isnan(_1568) ? 0.0 : max(_1568, 0.0));
        float _3990 = isnan(0.0) ? _1584 : (isnan(_1584) ? 0.0 : max(_1584, 0.0));
        float _1606 = (isnan(1.0) ? _3979 : (isnan(_3979) ? 1.0 : min(_3979, 1.0))) * 0.3183098733425140380859375;
        float _1608 = (isnan(1.0) ? _3990 : (isnan(_3990) ? 1.0 : min(_3990, 1.0))) * 0.3183098733425140380859375;
        _1652 = ((cbLight._m0[_1572].x * _1587) * _1608) + ((cbLight._m0[_1556].x * _1571) * _1606);
        _1653 = ((_1587 * cbLight._m0[_1572].y) * _1608) + ((_1571 * cbLight._m0[_1556].y) * _1606);
        _1654 = ((_1587 * cbLight._m0[_1572].z) * _1608) + ((_1571 * cbLight._m0[_1556].z) * _1606);
    }
    else
    {
        float _1618 = _1568 + _299;
        float _1621 = (_299 * 2.0) + 1.0;
        float _1622 = (isnan(0.0) ? _1618 : (isnan(_1618) ? 0.0 : max(_1618, 0.0))) / _1621;
        float _1629 = _1584 + _299;
        float _1631 = (isnan(0.0) ? _1629 : (isnan(_1629) ? 0.0 : max(_1629, 0.0))) / _1621;
        _1652 = (((_1631 * cbLight._m0[_1572].x) * _1587) + ((_1622 * cbLight._m0[_1556].x) * _1571)) * 0.3183098733425140380859375;
        _1653 = (((_1631 * cbLight._m0[_1572].y) * _1587) + ((_1622 * cbLight._m0[_1556].y) * _1571)) * 0.3183098733425140380859375;
        _1654 = (((_1631 * cbLight._m0[_1572].z) * _1587) + ((_1622 * cbLight._m0[_1556].z) * _1571)) * 0.3183098733425140380859375;
    }
    uvec4 _1658 = floatBitsToUint(cbLight._m0[_1538 + 12u]);
    bool _1660 = _1658.x == 0u;
    float _1693;
    float _1695;
    float _1697;
    if (_1660)
    {
        _1693 = _1652;
        _1695 = _1653;
        _1697 = _1654;
    }
    else
    {
        uint _1701 = _1538 + 6u;
        float _1717 = (dot(vec3(cbLight._m0[_1538 + 2u].xyz), vec3(_294, _295, _296)) * 0.5) + 0.5;
        float _1718 = _1717 * _1717;
        float _4011 = isnan(0.0) ? _1718 : (isnan(_1718) ? 0.0 : max(_1718, 0.0));
        float _1719 = isnan(1.0) ? _4011 : (isnan(_4011) ? 1.0 : min(_4011, 1.0));
        float _1720 = isnan(1.0) ? _1553 : (isnan(_1553) ? 1.0 : min(_1553, 1.0));
        _1693 = (((cbLight._m0[_1701].x * 0.3183098733425140380859375) * _1719) * _1720) + _1652;
        _1695 = (((cbLight._m0[_1701].y * 0.3183098733425140380859375) * _1719) * _1720) + _1653;
        _1697 = (((cbLight._m0[_1701].z * 0.3183098733425140380859375) * _1719) * _1720) + _1654;
    }
    bool _1700 = _1658.y == 0u;
    float _1755;
    float _1757;
    float _1759;
    if (_1700)
    {
        _1755 = _1693;
        _1757 = _1695;
        _1759 = _1697;
    }
    else
    {
        uint _1927 = _1538 + 7u;
        float _1943 = (dot(vec3(cbLight._m0[_1538 + 3u].xyz), vec3(_294, _295, _296)) * 0.5) + 0.5;
        float _1944 = _1943 * _1943;
        float _4027 = isnan(0.0) ? _1944 : (isnan(_1944) ? 0.0 : max(_1944, 0.0));
        float _1945 = isnan(1.0) ? _4027 : (isnan(_4027) ? 1.0 : min(_4027, 1.0));
        float _1946 = isnan(1.0) ? _1554 : (isnan(_1554) ? 1.0 : min(_1554, 1.0));
        _1755 = (((cbLight._m0[_1927].x * 0.3183098733425140380859375) * _1945) * _1946) + _1693;
        _1757 = (((cbLight._m0[_1927].y * 0.3183098733425140380859375) * _1945) * _1946) + _1695;
        _1759 = (((cbLight._m0[_1927].z * 0.3183098733425140380859375) * _1945) * _1946) + _1697;
    }
    uint _1764 = _1538 + 8u;
    float _1780 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1538].w)) * _298) * 0.949999988079071044921875);
    float _1781 = _1780 * _1780;
    float _1782 = cbLight._m0[_1538].x + _377;
    float _1783 = cbLight._m0[_1538].y + _378;
    float _1784 = cbLight._m0[_1538].z + _379;
    float _1788 = inversesqrt(dot(vec3(_1782, _1783, _1784), vec3(_1782, _1783, _1784)));
    float _1789 = _1788 * _1782;
    float _1790 = _1788 * _1783;
    float _1791 = _1788 * _1784;
    float _1792 = dot(vec3(_294, _295, _296), vec3(cbLight._m0[_1538].xyz));
    float _4043 = isnan(0.0) ? _1792 : (isnan(_1792) ? 0.0 : max(_1792, 0.0));
    float _1795 = isnan(1.0) ? _4043 : (isnan(_4043) ? 1.0 : min(_4043, 1.0));
    float _4054 = isnan(0.0) ? _465 : (isnan(_465) ? 0.0 : max(_465, 0.0));
    float _1796 = isnan(1.0) ? _4054 : (isnan(_4054) ? 1.0 : min(_4054, 1.0));
    float _1797 = dot(vec3(_294, _295, _296), vec3(_1789, _1790, _1791));
    float _4065 = isnan(0.0) ? _1797 : (isnan(_1797) ? 0.0 : max(_1797, 0.0));
    float _1800 = isnan(1.0) ? _4065 : (isnan(_4065) ? 1.0 : min(_4065, 1.0));
    float _1801 = dot(vec3(cbLight._m0[_1538].xyz), vec3(_1789, _1790, _1791));
    float _4076 = isnan(0.0) ? _1801 : (isnan(_1801) ? 0.0 : max(_1801, 0.0));
    float _1805 = _1781 * _1781;
    float _1809 = ((_1800 * _1800) * (_1805 + (-1.0))) + 1.0;
    float _1820 = (exp2(log2(1.0 - (isnan(1.0) ? _4076 : (isnan(_4076) ? 1.0 : min(_4076, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1821 = 1.0 - _1781;
    float _1832 = (0.5 / (((_1796 * ((_1795 * _1821) + _1781)) + 9.9999999392252902907785028219223e-09) + (((_1796 * _1821) + _1781) * _1795))) * _1795;
    float _4087 = isnan(0.0) ? _1832 : (isnan(_1832) ? 0.0 : max(_1832, 0.0));
    float _1834 = (isnan(1.0) ? _4087 : (isnan(_4087) ? 1.0 : min(_4087, 1.0))) * (_1805 / ((_1809 * _1809) * 3.141590118408203125));
    float _1835 = isnan(1.0) ? _1551 : (isnan(_1551) ? 1.0 : min(_1551, 1.0));
    uint _1845 = _1538 | 1u;
    uint _1849 = _1538 + 9u;
    float _1863 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1845].w)) * _298) * 0.949999988079071044921875);
    float _1864 = _1863 * _1863;
    float _1865 = cbLight._m0[_1845].x + _377;
    float _1866 = cbLight._m0[_1845].y + _378;
    float _1867 = cbLight._m0[_1845].z + _379;
    float _1871 = inversesqrt(dot(vec3(_1865, _1866, _1867), vec3(_1865, _1866, _1867)));
    float _1872 = _1871 * _1865;
    float _1873 = _1871 * _1866;
    float _1874 = _1871 * _1867;
    float _1875 = dot(vec3(_294, _295, _296), vec3(cbLight._m0[_1845].xyz));
    float _4103 = isnan(0.0) ? _1875 : (isnan(_1875) ? 0.0 : max(_1875, 0.0));
    float _1878 = isnan(1.0) ? _4103 : (isnan(_4103) ? 1.0 : min(_4103, 1.0));
    float _1879 = dot(vec3(_294, _295, _296), vec3(_1872, _1873, _1874));
    float _4114 = isnan(0.0) ? _1879 : (isnan(_1879) ? 0.0 : max(_1879, 0.0));
    float _1882 = isnan(1.0) ? _4114 : (isnan(_4114) ? 1.0 : min(_4114, 1.0));
    float _1883 = dot(vec3(cbLight._m0[_1845].xyz), vec3(_1872, _1873, _1874));
    float _4125 = isnan(0.0) ? _1883 : (isnan(_1883) ? 0.0 : max(_1883, 0.0));
    float _1887 = _1864 * _1864;
    float _1891 = ((_1882 * _1882) * (_1887 + (-1.0))) + 1.0;
    float _1900 = (exp2(log2(1.0 - (isnan(1.0) ? _4125 : (isnan(_4125) ? 1.0 : min(_4125, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1901 = 1.0 - _1864;
    float _1911 = (0.5 / (((_1796 * ((_1878 * _1901) + _1864)) + 9.9999999392252902907785028219223e-09) + (((_1796 * _1901) + _1864) * _1878))) * _1878;
    float _4136 = isnan(0.0) ? _1911 : (isnan(_1911) ? 0.0 : max(_1911, 0.0));
    float _1913 = (isnan(1.0) ? _4136 : (isnan(_4136) ? 1.0 : min(_4136, 1.0))) * (_1887 / ((_1891 * _1891) * 3.141590118408203125));
    float _1914 = isnan(1.0) ? _1552 : (isnan(_1552) ? 1.0 : min(_1552, 1.0));
    float _1924 = (((_1900 * cbLight._m0[_1849].x) * _1913) * _1914) + (((_1820 * cbLight._m0[_1764].x) * _1834) * _1835);
    float _1925 = (((_1900 * cbLight._m0[_1849].y) * _1913) * _1914) + (((_1820 * cbLight._m0[_1764].y) * _1834) * _1835);
    float _1926 = (((_1900 * cbLight._m0[_1849].z) * _1913) * _1914) + (((_1820 * cbLight._m0[_1764].z) * _1834) * _1835);
    float _1982;
    float _1984;
    float _1986;
    if (_1660)
    {
        _1982 = _1924;
        _1984 = _1925;
        _1986 = _1926;
    }
    else
    {
        uint _1988 = _1538 + 2u;
        uint _1992 = _1538 + 10u;
        float _2006 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1988].w)) * _298) * 0.949999988079071044921875);
        float _2007 = _2006 * _2006;
        float _2008 = cbLight._m0[_1988].x + _377;
        float _2009 = cbLight._m0[_1988].y + _378;
        float _2010 = cbLight._m0[_1988].z + _379;
        float _2014 = inversesqrt(dot(vec3(_2008, _2009, _2010), vec3(_2008, _2009, _2010)));
        float _2015 = _2014 * _2008;
        float _2016 = _2014 * _2009;
        float _2017 = _2014 * _2010;
        float _2018 = dot(vec3(_294, _295, _296), vec3(cbLight._m0[_1988].xyz));
        float _4152 = isnan(0.0) ? _2018 : (isnan(_2018) ? 0.0 : max(_2018, 0.0));
        float _2021 = isnan(1.0) ? _4152 : (isnan(_4152) ? 1.0 : min(_4152, 1.0));
        float _2022 = dot(vec3(_294, _295, _296), vec3(_2015, _2016, _2017));
        float _4163 = isnan(0.0) ? _2022 : (isnan(_2022) ? 0.0 : max(_2022, 0.0));
        float _2025 = isnan(1.0) ? _4163 : (isnan(_4163) ? 1.0 : min(_4163, 1.0));
        float _2026 = dot(vec3(cbLight._m0[_1988].xyz), vec3(_2015, _2016, _2017));
        float _4174 = isnan(0.0) ? _2026 : (isnan(_2026) ? 0.0 : max(_2026, 0.0));
        float _2030 = _2007 * _2007;
        float _2034 = ((_2025 * _2025) * (_2030 + (-1.0))) + 1.0;
        float _2043 = (exp2(log2(1.0 - (isnan(1.0) ? _4174 : (isnan(_4174) ? 1.0 : min(_4174, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2044 = 1.0 - _2007;
        float _2054 = (0.5 / (((_1796 * ((_2021 * _2044) + _2007)) + 9.9999999392252902907785028219223e-09) + (((_1796 * _2044) + _2007) * _2021))) * _2021;
        float _4185 = isnan(0.0) ? _2054 : (isnan(_2054) ? 0.0 : max(_2054, 0.0));
        float _2056 = (isnan(1.0) ? _4185 : (isnan(_4185) ? 1.0 : min(_4185, 1.0))) * (_2030 / ((_2034 * _2034) * 3.141590118408203125));
        float _2057 = isnan(1.0) ? _1553 : (isnan(_1553) ? 1.0 : min(_1553, 1.0));
        _1982 = (((_2043 * cbLight._m0[_1992].x) * _2056) * _2057) + _1924;
        _1984 = (((_2043 * cbLight._m0[_1992].y) * _2056) * _2057) + _1925;
        _1986 = (((_2043 * cbLight._m0[_1992].z) * _2056) * _2057) + _1926;
    }
    float _2088;
    float _2090;
    float _2092;
    if (_1700)
    {
        _2088 = _1982;
        _2090 = _1984;
        _2092 = _1986;
    }
    else
    {
        uint _2099 = _1538 + 3u;
        uint _2103 = _1538 + 11u;
        float _2117 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2099].w)) * _298) * 0.949999988079071044921875);
        float _2118 = _2117 * _2117;
        float _2119 = cbLight._m0[_2099].x + _377;
        float _2120 = cbLight._m0[_2099].y + _378;
        float _2121 = cbLight._m0[_2099].z + _379;
        float _2125 = inversesqrt(dot(vec3(_2119, _2120, _2121), vec3(_2119, _2120, _2121)));
        float _2126 = _2125 * _2119;
        float _2127 = _2125 * _2120;
        float _2128 = _2125 * _2121;
        float _2129 = dot(vec3(_294, _295, _296), vec3(cbLight._m0[_2099].xyz));
        float _4201 = isnan(0.0) ? _2129 : (isnan(_2129) ? 0.0 : max(_2129, 0.0));
        float _2132 = isnan(1.0) ? _4201 : (isnan(_4201) ? 1.0 : min(_4201, 1.0));
        float _2133 = dot(vec3(_294, _295, _296), vec3(_2126, _2127, _2128));
        float _4212 = isnan(0.0) ? _2133 : (isnan(_2133) ? 0.0 : max(_2133, 0.0));
        float _2136 = isnan(1.0) ? _4212 : (isnan(_4212) ? 1.0 : min(_4212, 1.0));
        float _2137 = dot(vec3(cbLight._m0[_2099].xyz), vec3(_2126, _2127, _2128));
        float _4223 = isnan(0.0) ? _2137 : (isnan(_2137) ? 0.0 : max(_2137, 0.0));
        float _2141 = _2118 * _2118;
        float _2145 = ((_2136 * _2136) * (_2141 + (-1.0))) + 1.0;
        float _2154 = (exp2(log2(1.0 - (isnan(1.0) ? _4223 : (isnan(_4223) ? 1.0 : min(_4223, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2155 = 1.0 - _2118;
        float _2165 = (0.5 / (((_1796 * ((_2132 * _2155) + _2118)) + 9.9999999392252902907785028219223e-09) + (((_1796 * _2155) + _2118) * _2132))) * _2132;
        float _4234 = isnan(0.0) ? _2165 : (isnan(_2165) ? 0.0 : max(_2165, 0.0));
        float _2167 = (isnan(1.0) ? _4234 : (isnan(_4234) ? 1.0 : min(_4234, 1.0))) * (_2141 / ((_2145 * _2145) * 3.141590118408203125));
        float _2168 = isnan(1.0) ? _1554 : (isnan(_1554) ? 1.0 : min(_1554, 1.0));
        _2088 = (((_2154 * cbLight._m0[_2103].x) * _2167) * _2168) + _1982;
        _2090 = (((_2154 * cbLight._m0[_2103].y) * _2167) * _2168) + _1984;
        _2092 = (((_2154 * cbLight._m0[_2103].z) * _2167) * _2168) + _1986;
    }
    float _2277;
    float _2279;
    float _2281;
    float _2283;
    float _2285;
    float _2287;
    if (_1536.y == 0u)
    {
        float _2217 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2218 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2217;
        float _2219 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2217;
        float _2220 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2217;
        uvec4 _2232 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2233 = _2232.x;
        uint _2244 = uint((float(_2232.y) * floor(float(uint(cbSceneParam._m0[85u].y * _399) / _2233))) + floor(float(uint(cbSceneParam._m0[85u].x * _398) / _2233)));
        float _2254 = (log2(_2220 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2255 = isnan(0.0) ? _2254 : (isnan(_2254) ? 0.0 : max(_2254, 0.0));
        uint _2258 = uint(isnan(14.0) ? _2255 : (isnan(_2255) ? 14.0 : min(_2255, 14.0)));
        uvec4 _2263 = texelFetch(g_lightClusterGridBuffer, int(((_2258 << 2u) + (_2244 << 6u)) >> 2u));
        uint _2264 = _2263.x;
        uint _2265 = _2232.z;
        float _2290;
        float _2292;
        float _2294;
        float _2296;
        float _2298;
        float _2300;
        if (((((1u << ((_2265 >> 4u) & 15u)) + 4294967295u) & _2264) == 0u) || ((_2265 & 240u) == 0u))
        {
            _2290 = 0.0;
            _2292 = 0.0;
            _2294 = 0.0;
            _2296 = 0.0;
            _2298 = 0.0;
            _2300 = 0.0;
        }
        else
        {
            float _2291;
            float _2293;
            float _2295;
            float _2297;
            float _2299;
            float _2301;
            float _2471 = 0.0;
            float _2472 = 0.0;
            float _2473 = 0.0;
            float _2474 = 0.0;
            float _2475 = 0.0;
            float _2476 = 0.0;
            uint _2477 = 0u;
            uint _2486;
            bool _2487;
            for (;;)
            {
                _2486 = texelFetch(g_lightClassification, int((((_2258 << 5u) + (_2244 << 9u)) + (_2477 << 2u)) >> 2u)).x;
                _2487 = _2486 == 0u;
                float frontier_phi_67_pred;
                float frontier_phi_67_pred_1;
                float frontier_phi_67_pred_2;
                float frontier_phi_67_pred_3;
                float frontier_phi_67_pred_4;
                float frontier_phi_67_pred_5;
                if (_2487)
                {
                    frontier_phi_67_pred = _2471;
                    frontier_phi_67_pred_1 = _2476;
                    frontier_phi_67_pred_2 = _2475;
                    frontier_phi_67_pred_3 = _2474;
                    frontier_phi_67_pred_4 = _2473;
                    frontier_phi_67_pred_5 = _2472;
                }
                else
                {
                    float _2672;
                    float _2673;
                    float _2674;
                    float _2675;
                    float _2676;
                    float _2677;
                    uint _2678;
                    _2672 = _2471;
                    _2673 = _2472;
                    _2674 = _2473;
                    _2675 = _2474;
                    _2676 = _2475;
                    _2677 = _2476;
                    _2678 = _2486;
                    float _2587;
                    float _2588;
                    float _2589;
                    float _2590;
                    float _2591;
                    float _2592;
                    for (;;)
                    {
                        uint _2682 = uint(findLSB(_2678)) + (_2477 << 5u);
                        uint _2679 = (_2678 + 4294967295u) & _2678;
                        uint _2684 = _2682 * 48u;
                        vec4 _2698 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2684)).x, texelFetch(g_PointLightRenderingBuffer, int(_2684 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2684 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2684 + 3u)).x));
                        uint _2704 = (_2682 * 48u) + 4u;
                        vec4 _2717 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2704)).x, texelFetch(g_PointLightRenderingBuffer, int(_2704 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2704 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2704 + 3u)).x));
                        float _2718 = _2717.x;
                        float _2719 = _2717.y;
                        float _2720 = _2717.z;
                        uint _2723 = (_2682 * 48u) + 8u;
                        vec3 _2734 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2723)).x, texelFetch(g_PointLightRenderingBuffer, int(_2723 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2723 + 2u)).x));
                        uint _2739 = (_2682 * 48u) + 12u;
                        vec2 _2747 = uintBitsToFloat(uvec2(texelFetch(g_PointLightRenderingBuffer, int(_2739)).x, texelFetch(g_PointLightRenderingBuffer, int(_2739 + 1u)).x));
                        float _2753 = inversesqrt(dot(vec3(_2218, _2219, _2220), vec3(_2218, _2219, _2220)));
                        float _2754 = _2753 * _2218;
                        float _2755 = _2753 * _2219;
                        float _2756 = _2753 * _2220;
                        float _2757 = _2698.x - _2218;
                        float _2758 = _2698.y - _2219;
                        float _2759 = _2698.z - _2220;
                        float _2760 = dot(vec3(_2757, _2758, _2759), vec3(_2757, _2758, _2759));
                        float _2763 = inversesqrt(_2760);
                        float _2764 = _2763 * _2757;
                        float _2765 = _2763 * _2758;
                        float _2766 = _2763 * _2759;
                        float _2767 = dot(vec3(_419, _422, _425), vec3(_2764, _2765, _2766));
                        float _2772 = 1.0 - (_2760 * _2698.w);
                        float _4260 = isnan(0.0) ? _2772 : (isnan(_2772) ? 0.0 : max(_2772, 0.0));
                        float _2773 = isnan(1.0) ? _4260 : (isnan(_4260) ? 1.0 : min(_4260, 1.0));
                        float _2774 = sqrt(_2760) * _2717.w;
                        float _2777 = 1.39999997615814208984375 / (_2774 + 1.39999997615814208984375);
                        float _2778 = _2777 * _2777;
                        float _2779 = 1.0 - _2778;
                        float _2781 = (_2779 * _2779) * _299;
                        float _2784 = ((_2779 * _2767) + _2778) + _2781;
                        float _2789 = _2774 * _2774;
                        float _2794 = ((isnan(0.0) ? _2784 : (isnan(_2784) ? 0.0 : max(_2784, 0.0))) * _2773) / (((_2781 * 2.0) + 1.0) * ((_2789 * 0.699999988079071044921875) + 1.0));
                        float _2798 = dot(vec3(_2764, _2765, _2766), vec3(_2754, _2755, _2756));
                        float _4276 = isnan(0.0) ? _2798 : (isnan(_2798) ? 0.0 : max(_2798, 0.0));
                        float _2805 = dot(vec3((-0.0) - _2754, (-0.0) - _2755, (-0.0) - _2756), vec3(_419, _422, _425)) + 1.0;
                        float _2807 = (isnan(0.0) ? _2805 : (isnan(_2805) ? 0.0 : max(_2805, 0.0))) * 0.5;
                        float _2814 = ((_2807 * _2807) * _2747.x) * exp2((_2747.y * 32.0) * log2(isnan(1.0) ? _4276 : (isnan(_4276) ? 1.0 : min(_4276, 1.0))));
                        float _2816 = _299 / (_299 + 1.0);
                        float _2832 = (-0.0) - _2218;
                        float _2833 = (-0.0) - _2219;
                        float _2834 = (-0.0) - _2220;
                        float _2838 = inversesqrt(dot(vec3(_2832, _2833, _2834), vec3(_2832, _2833, _2834)));
                        float _2839 = _2838 * _2832;
                        float _2840 = _2838 * _2833;
                        float _2841 = _2838 * _2834;
                        float _2849 = exp2(log2(1.0 / ((_2789 * 3.5) + 5.0)) * 0.25);
                        float _2850 = 1.0 - _480;
                        float _2857 = sqrt(1.0 - ((1.0 - (_2850 * _2850)) * (1.0 - (_2849 * _2849))));
                        float _2858 = _2857 * _2857;
                        float _2859 = _2858 * _2858;
                        float _2860 = _2839 + _2764;
                        float _2861 = _2840 + _2765;
                        float _2862 = _2841 + _2766;
                        float _2866 = inversesqrt(dot(vec3(_2860, _2861, _2862), vec3(_2860, _2861, _2862)));
                        float _2870 = dot(vec3(_419, _422, _425), vec3(_2839, _2840, _2841));
                        float _4292 = isnan(0.0) ? _2870 : (isnan(_2870) ? 0.0 : max(_2870, 0.0));
                        float _2873 = isnan(1.0) ? _4292 : (isnan(_4292) ? 1.0 : min(_4292, 1.0));
                        float _2874 = dot(vec3(_419, _422, _425), vec3(_2866 * _2860, _2866 * _2861, _2866 * _2862));
                        float _4303 = isnan(0.0) ? _2874 : (isnan(_2874) ? 0.0 : max(_2874, 0.0));
                        float _2877 = isnan(1.0) ? _4303 : (isnan(_4303) ? 1.0 : min(_4303, 1.0));
                        float _2881 = ((_2877 * _2877) * (_2859 + (-1.0))) + 1.0;
                        float _2882 = _2777 * _2858;
                        float _2883 = _2882 * _2882;
                        float _2886 = ((1.0 - _2883) * _2767) + _2883;
                        float _4314 = isnan(0.0) ? _2886 : (isnan(_2886) ? 0.0 : max(_2886, 0.0));
                        float _2887 = isnan(1.0) ? _4314 : (isnan(_4314) ? 1.0 : min(_4314, 1.0));
                        float _2888 = 1.0 - _2858;
                        float _2898 = (0.5 / (((_2887 * ((_2873 * _2888) + _2858)) + 9.9999999392252902907785028219223e-09) + (((_2887 * _2888) + _2858) * _2873))) * _2887;
                        float _4325 = isnan(0.0) ? _2898 : (isnan(_2898) ? 0.0 : max(_2898, 0.0));
                        float _2909 = (((_2859 * 3.1415927410125732421875) * (isnan(1.0) ? _4325 : (isnan(_4325) ? 1.0 : min(_4325, 1.0)))) / ((_2881 * _2881) * ((_2789 * 2.1991131305694580078125) + 3.141590118408203125))) * _2773;
                        _2590 = (((((_2718 * 0.3183098733425140380859375) * _2816) * _2814) + _2718) * _2794) + _2675;
                        _2591 = (((((_2719 * 0.3183098733425140380859375) * _2816) * _2814) + _2719) * _2794) + _2676;
                        _2592 = (((((_2720 * 0.3183098733425140380859375) * _2816) * _2814) + _2720) * _2794) + _2677;
                        _2587 = (_2909 * _2734.x) + _2672;
                        _2588 = (_2909 * _2734.y) + _2673;
                        _2589 = (_2909 * _2734.z) + _2674;
                        if (_2679 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2672 = _2587;
                            _2673 = _2588;
                            _2674 = _2589;
                            _2675 = _2590;
                            _2676 = _2591;
                            _2677 = _2592;
                            _2678 = _2679;
                        }
                    }
                    frontier_phi_67_pred = _2587;
                    frontier_phi_67_pred_1 = _2592;
                    frontier_phi_67_pred_2 = _2591;
                    frontier_phi_67_pred_3 = _2590;
                    frontier_phi_67_pred_4 = _2589;
                    frontier_phi_67_pred_5 = _2588;
                }
                _2291 = frontier_phi_67_pred;
                _2301 = frontier_phi_67_pred_1;
                _2299 = frontier_phi_67_pred_2;
                _2297 = frontier_phi_67_pred_3;
                _2295 = frontier_phi_67_pred_4;
                _2293 = frontier_phi_67_pred_5;
                uint _2478 = _2477 + 1u;
                if (_2478 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2471 = _2291;
                    _2472 = _2293;
                    _2473 = _2295;
                    _2474 = _2297;
                    _2475 = _2299;
                    _2476 = _2301;
                    _2477 = _2478;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2290 = _2291;
            _2292 = _2293;
            _2294 = _2295;
            _2296 = _2297;
            _2298 = _2299;
            _2300 = _2301;
        }
        uvec4 _2304 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2305 = _2304.z;
        uint _2307 = (_2305 >> 8u) & 15u;
        float _2439;
        float _2441;
        float _2443;
        float _2445;
        float _2447;
        float _2449;
        if (((4294967295u << _2307) & _2264) == 0u)
        {
            _2439 = _2290;
            _2441 = _2292;
            _2443 = _2294;
            _2445 = _2296;
            _2447 = _2298;
            _2449 = _2300;
        }
        else
        {
            float _2464 = inversesqrt(dot(vec3(_2218, _2219, _2220), vec3(_2218, _2219, _2220)));
            float _2465 = _2464 * _2218;
            float _2466 = _2464 * _2219;
            float _2467 = _2464 * _2220;
            float frontier_phi_61_62_ladder;
            float frontier_phi_61_62_ladder_1;
            float frontier_phi_61_62_ladder_2;
            float frontier_phi_61_62_ladder_3;
            float frontier_phi_61_62_ladder_4;
            float frontier_phi_61_62_ladder_5;
            if (_2307 < ((_2305 >> 12u) & 15u))
            {
                float _2440;
                float _2442;
                float _2444;
                float _2446;
                float _2448;
                float _2450;
                float _2655 = _2290;
                float _2656 = _2292;
                float _2657 = _2294;
                float _2658 = _2296;
                float _2659 = _2298;
                float _2660 = _2300;
                uint _2661 = _2307;
                uint _2670;
                bool _2671;
                for (;;)
                {
                    _2670 = texelFetch(g_lightClassification, int((((_2258 << 5u) + (_2244 << 9u)) + (_2661 << 2u)) >> 2u)).x;
                    _2671 = _2670 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_2671)
                    {
                        frontier_phi_79_pred = _2660;
                        frontier_phi_79_pred_1 = _2659;
                        frontier_phi_79_pred_2 = _2658;
                        frontier_phi_79_pred_3 = _2657;
                        frontier_phi_79_pred_4 = _2656;
                        frontier_phi_79_pred_5 = _2655;
                    }
                    else
                    {
                        float _2957;
                        float _2958;
                        float _2959;
                        float _2960;
                        float _2961;
                        float _2962;
                        float _3310;
                        float _3311;
                        float _3312;
                        float _3313;
                        float _3314;
                        float _3315;
                        float _2979 = _2655;
                        float _2980 = _2656;
                        float _2981 = _2657;
                        float _2982 = _2658;
                        float _2983 = _2659;
                        float _2984 = _2660;
                        uint _2985 = _2670;
                        uint _2986;
                        vec4 _3011;
                        float _3012;
                        vec4 _3027;
                        float _3028;
                        float _3029;
                        float _3030;
                        vec3 _3042;
                        vec2 _3051;
                        vec4 _3067;
                        vec4 _3083;
                        float _3130;
                        bool _3131;
                        for (;;)
                        {
                            uint _2996 = ((_2661 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2985));
                            _2986 = (_2985 + 4294967295u) & _2985;
                            uint _2998 = _2996 * 40u;
                            _3011 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2998)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2998 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2998 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2998 + 3u)).x));
                            _3012 = _3011.w;
                            uint _3014 = (_2996 * 40u) + 4u;
                            _3027 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3014)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3014 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3014 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3014 + 3u)).x));
                            _3028 = _3027.x;
                            _3029 = _3027.y;
                            _3030 = _3027.z;
                            uint _3032 = (_2996 * 40u) + 8u;
                            _3042 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3032)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3032 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3032 + 2u)).x));
                            uint _3044 = (_2996 * 40u) + 12u;
                            _3051 = uintBitsToFloat(uvec2(texelFetch(g_SpotLightRenderingBuffer, int(_3044)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3044 + 1u)).x));
                            uint _3054 = (_2996 * 40u) + 16u;
                            _3067 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3054)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3054 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3054 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3054 + 3u)).x));
                            uint _3070 = (_2996 * 40u) + 20u;
                            _3083 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3070)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3070 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3070 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3070 + 3u)).x));
                            uint _3086 = (_2996 * 40u) + 24u;
                            vec4 _3099 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3086)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3086 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3086 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3086 + 3u)).x));
                            uint _3105 = (_2996 * 40u) + 28u;
                            vec4 _3118 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3105)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3105 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3105 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3105 + 3u)).x));
                            _3130 = fma(_2220, _3118.z, fma(_2219, _3118.y, _3118.x * _2218)) + _3118.w;
                            _3131 = !((fma(_2220, _3099.z, fma(_2219, _3099.y, _3099.x * _2218)) + _3099.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3131)
                            {
                                float _3157 = _3011.x - _2218;
                                float _3158 = _3011.y - _2219;
                                float _3159 = _3011.z - _2220;
                                float _3160 = dot(vec3(_3157, _3158, _3159), vec3(_3157, _3158, _3159));
                                float _3163 = inversesqrt(_3160);
                                float _3164 = _3163 * _3157;
                                float _3165 = _3163 * _3158;
                                float _3166 = _3163 * _3159;
                                float _3170 = 1.0 - (_3160 / (_3012 * _3012));
                                float _4336 = isnan(0.0) ? _3170 : (isnan(_3170) ? 0.0 : max(_3170, 0.0));
                                float _3171 = isnan(1.0) ? _4336 : (isnan(_4336) ? 1.0 : min(_4336, 1.0));
                                float _3175 = sqrt(_3160) * _3027.w;
                                float _3177 = 1.39999997615814208984375 / (_3175 + 1.39999997615814208984375);
                                float _3178 = _3177 * _3177;
                                float _3179 = 1.0 - _3178;
                                float _3181 = (_3179 * _3179) * _299;
                                float _3184 = ((_3179 * dot(vec3(_3164, _3165, _3166), vec3(_419, _422, _425))) + _3178) + _3181;
                                float _3189 = _3175 * _3175;
                                float _3194 = (fma(_2220, _3067.z, fma(_2219, _3067.y, _3067.x * _2218)) + _3067.w) / _3130;
                                float _3195 = (fma(_2220, _3083.z, fma(_2219, _3083.y, _3083.x * _2218)) + _3083.w) / _3130;
                                float _3199 = 1.0 - dot(vec2(_3194, _3195), vec2(_3194, _3195));
                                float _4352 = isnan(0.0) ? _3199 : (isnan(_3199) ? 0.0 : max(_3199, 0.0));
                                float _3200 = isnan(1.0) ? _4352 : (isnan(_4352) ? 1.0 : min(_4352, 1.0));
                                float _3201 = _3200 * (((isnan(0.0) ? _3184 : (isnan(_3184) ? 0.0 : max(_3184, 0.0))) * _3171) / (((_3181 * 2.0) + 1.0) * ((_3189 * 0.699999988079071044921875) + 1.0)));
                                float _3202 = (-0.0) - _2465;
                                float _3203 = (-0.0) - _2466;
                                float _3204 = (-0.0) - _2467;
                                float _3205 = dot(vec3(_3164, _3165, _3166), vec3(_2465, _2466, _2467));
                                float _4363 = isnan(0.0) ? _3205 : (isnan(_3205) ? 0.0 : max(_3205, 0.0));
                                float _3212 = dot(vec3(_3202, _3203, _3204), vec3(_419, _422, _425)) + 1.0;
                                float _3214 = (isnan(0.0) ? _3212 : (isnan(_3212) ? 0.0 : max(_3212, 0.0))) * 0.5;
                                float _3221 = ((_3214 * _3214) * _3051.x) * exp2((_3051.y * 32.0) * log2(isnan(1.0) ? _4363 : (isnan(_4363) ? 1.0 : min(_4363, 1.0))));
                                float _3223 = _299 / (_299 + 1.0);
                                float _3244 = exp2(log2(1.0 / ((_3189 * 3.5) + 5.0)) * 0.25);
                                float _3245 = 1.0 - _480;
                                float _3252 = sqrt(1.0 - ((1.0 - (_3245 * _3245)) * (1.0 - (_3244 * _3244))));
                                float _3253 = _3252 * _3252;
                                float _3254 = _3253 * _3253;
                                float _3255 = _3164 - _2465;
                                float _3256 = _3165 - _2466;
                                float _3257 = _3166 - _2467;
                                float _3261 = inversesqrt(dot(vec3(_3255, _3256, _3257), vec3(_3255, _3256, _3257)));
                                float _3265 = dot(vec3(_419, _422, _425), vec3(_3202, _3203, _3204));
                                float _4379 = isnan(0.0) ? _3265 : (isnan(_3265) ? 0.0 : max(_3265, 0.0));
                                float _3268 = isnan(1.0) ? _4379 : (isnan(_4379) ? 1.0 : min(_4379, 1.0));
                                float _3269 = dot(vec3(_419, _422, _425), vec3(_3261 * _3255, _3261 * _3256, _3261 * _3257));
                                float _4390 = isnan(0.0) ? _3269 : (isnan(_3269) ? 0.0 : max(_3269, 0.0));
                                float _3272 = isnan(1.0) ? _4390 : (isnan(_4390) ? 1.0 : min(_4390, 1.0));
                                float _3276 = ((_3272 * _3272) * (_3254 + (-1.0))) + 1.0;
                                float _3277 = _3177 * _3253;
                                float _3278 = _3277 * _3277;
                                float _3284 = ((1.0 - _3278) * dot(vec3(_419, _422, _425), vec3(_3164, _3165, _3166))) + _3278;
                                float _4401 = isnan(0.0) ? _3284 : (isnan(_3284) ? 0.0 : max(_3284, 0.0));
                                float _3285 = isnan(1.0) ? _4401 : (isnan(_4401) ? 1.0 : min(_4401, 1.0));
                                float _3286 = 1.0 - _3253;
                                float _3296 = (0.5 / (((_3285 * ((_3268 * _3286) + _3253)) + 9.9999999392252902907785028219223e-09) + (((_3285 * _3286) + _3253) * _3268))) * _3285;
                                float _4412 = isnan(0.0) ? _3296 : (isnan(_3296) ? 0.0 : max(_3296, 0.0));
                                float _3306 = (_3200 * _3171) * (((_3254 * 3.1415927410125732421875) * (isnan(1.0) ? _4412 : (isnan(_4412) ? 1.0 : min(_4412, 1.0)))) / ((_3276 * _3276) * ((_3189 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = ((((_3030 * 0.3183098733425140380859375) * _3223) * _3221) + _3030) * _3201;
                                frontier_phi_88_pred_1 = ((((_3028 * 0.3183098733425140380859375) * _3223) * _3221) + _3028) * _3201;
                                frontier_phi_88_pred_2 = _3306 * _3042.z;
                                frontier_phi_88_pred_3 = _3306 * _3042.y;
                                frontier_phi_88_pred_4 = _3306 * _3042.x;
                                frontier_phi_88_pred_5 = ((((_3029 * 0.3183098733425140380859375) * _3223) * _3221) + _3029) * _3201;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3315 = frontier_phi_88_pred;
                            _3313 = frontier_phi_88_pred_1;
                            _3312 = frontier_phi_88_pred_2;
                            _3311 = frontier_phi_88_pred_3;
                            _3310 = frontier_phi_88_pred_4;
                            _3314 = frontier_phi_88_pred_5;
                            _2960 = _3313 + _2982;
                            _2961 = _3314 + _2983;
                            _2962 = _3315 + _2984;
                            _2957 = _3310 + _2979;
                            _2958 = _3311 + _2980;
                            _2959 = _3312 + _2981;
                            if (_2986 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2979 = _2957;
                                _2980 = _2958;
                                _2981 = _2959;
                                _2982 = _2960;
                                _2983 = _2961;
                                _2984 = _2962;
                                _2985 = _2986;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _2962;
                        frontier_phi_79_pred_1 = _2961;
                        frontier_phi_79_pred_2 = _2960;
                        frontier_phi_79_pred_3 = _2959;
                        frontier_phi_79_pred_4 = _2958;
                        frontier_phi_79_pred_5 = _2957;
                    }
                    _2450 = frontier_phi_79_pred;
                    _2448 = frontier_phi_79_pred_1;
                    _2446 = frontier_phi_79_pred_2;
                    _2444 = frontier_phi_79_pred_3;
                    _2442 = frontier_phi_79_pred_4;
                    _2440 = frontier_phi_79_pred_5;
                    uint _2662 = _2661 + 1u;
                    if (_2662 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2655 = _2440;
                        _2656 = _2442;
                        _2657 = _2444;
                        _2658 = _2446;
                        _2659 = _2448;
                        _2660 = _2450;
                        _2661 = _2662;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_61_62_ladder = _2440;
                frontier_phi_61_62_ladder_1 = _2450;
                frontier_phi_61_62_ladder_2 = _2448;
                frontier_phi_61_62_ladder_3 = _2446;
                frontier_phi_61_62_ladder_4 = _2444;
                frontier_phi_61_62_ladder_5 = _2442;
            }
            else
            {
                frontier_phi_61_62_ladder = _2290;
                frontier_phi_61_62_ladder_1 = _2300;
                frontier_phi_61_62_ladder_2 = _2298;
                frontier_phi_61_62_ladder_3 = _2296;
                frontier_phi_61_62_ladder_4 = _2294;
                frontier_phi_61_62_ladder_5 = _2292;
            }
            _2439 = frontier_phi_61_62_ladder;
            _2441 = frontier_phi_61_62_ladder_5;
            _2443 = frontier_phi_61_62_ladder_4;
            _2445 = frontier_phi_61_62_ladder_3;
            _2447 = frontier_phi_61_62_ladder_2;
            _2449 = frontier_phi_61_62_ladder_1;
        }
        float _2454 = isnan(1.0) ? _464 : (isnan(_464) ? 1.0 : min(_464, 1.0));
        _2277 = (_2454 * _2445) + _1755;
        _2279 = (_2454 * _2447) + _1757;
        _2281 = (_2454 * _2449) + _1759;
        _2283 = ((_2439 * 0.039999999105930328369140625) * _2454) + _2088;
        _2285 = ((_2441 * 0.039999999105930328369140625) * _2454) + _2090;
        _2287 = ((_2443 * 0.039999999105930328369140625) * _2454) + _2092;
    }
    else
    {
        _2277 = _1755;
        _2279 = _1757;
        _2281 = _1759;
        _2283 = _2088;
        _2285 = _2090;
        _2287 = _2092;
    }
    float _2376;
    float _2377;
    float _2378;
    if (_299 > 0.0)
    {
        uint _2311 = _1538 + 4u;
        float _2317 = (-0.0) - _377;
        float _2319 = (-0.0) - _378;
        float _2320 = (-0.0) - _379;
        float _2321 = dot(vec3(cbLight._m0[_1538].xyz), vec3(_2317, _2319, _2320));
        float _4428 = isnan(0.0) ? _2321 : (isnan(_2321) ? 0.0 : max(_2321, 0.0));
        float _2325 = _475 + 1.0;
        float _2327 = (isnan(0.0) ? _2325 : (isnan(_2325) ? 0.0 : max(_2325, 0.0))) * 0.5;
        float _2332 = _2327 * _2327;
        float _2333 = _2332 * exp2(log2(isnan(1.0) ? _4428 : (isnan(_4428) ? 1.0 : min(_4428, 1.0))) * 32.0);
        float _2335 = _299 / (_299 + 1.0);
        float _2336 = isnan(_1551) ? 1.0 : (isnan(1.0) ? _1551 : min(1.0, _1551));
        uint _2346 = _1538 + 5u;
        float _2352 = dot(vec3(cbLight._m0[_1845].xyz), vec3(_2317, _2319, _2320));
        float _4449 = isnan(0.0) ? _2352 : (isnan(_2352) ? 0.0 : max(_2352, 0.0));
        float _2359 = _2332 * exp2(log2(isnan(1.0) ? _4449 : (isnan(_4449) ? 1.0 : min(_4449, 1.0))) * 32.0);
        float _2360 = isnan(_1552) ? 1.0 : (isnan(1.0) ? _1552 : min(1.0, _1552));
        _2376 = ((((_2359 * cbLight._m0[_2346].x) * _2335) * _2360) + (((_2333 * cbLight._m0[_2311].x) * _2335) * _2336)) * 0.3183098733425140380859375;
        _2377 = ((((_2359 * cbLight._m0[_2346].y) * _2335) * _2360) + (((_2333 * cbLight._m0[_2311].y) * _2335) * _2336)) * 0.3183098733425140380859375;
        _2378 = ((((_2359 * cbLight._m0[_2346].z) * _2335) * _2360) + (((_2333 * cbLight._m0[_2311].z) * _2335) * _2336)) * 0.3183098733425140380859375;
    }
    else
    {
        _2376 = 0.0;
        _2377 = 0.0;
        _2378 = 0.0;
    }
    float _4465 = isnan(0.0) ? _450 : (isnan(_450) ? 0.0 : max(_450, 0.0));
    float _4476 = isnan(0.0) ? _451 : (isnan(_451) ? 0.0 : max(_451, 0.0));
    float _4487 = isnan(0.0) ? _452 : (isnan(_452) ? 0.0 : max(_452, 0.0));
    float _4498 = isnan(0.0) ? _297 : (isnan(_297) ? 0.0 : max(_297, 0.0));
    float _2398 = ((isnan(1.0) ? _4465 : (isnan(_4465) ? 1.0 : min(_4465, 1.0))) * ((_2277 + ((isnan(0.0) ? _1224 : (isnan(_1224) ? 0.0 : max(_1224, 0.0))) * _464)) + _2376)) + ((_2283 + ((isnan(0.0) ? _1520 : (isnan(_1520) ? 0.0 : max(_1520, 0.0))) * _1303)) * cbPerFrame._m0[3u].x);
    float _2399 = ((isnan(1.0) ? _4476 : (isnan(_4476) ? 1.0 : min(_4476, 1.0))) * ((_2279 + ((isnan(0.0) ? _1227 : (isnan(_1227) ? 0.0 : max(_1227, 0.0))) * _464)) + _2377)) + ((_2285 + ((isnan(0.0) ? _1523 : (isnan(_1523) ? 0.0 : max(_1523, 0.0))) * _1303)) * cbPerFrame._m0[3u].x);
    float _2400 = ((isnan(1.0) ? _4487 : (isnan(_4487) ? 1.0 : min(_4487, 1.0))) * ((_2281 + ((isnan(0.0) ? _1230 : (isnan(_1230) ? 0.0 : max(_1230, 0.0))) * _464)) + _2378)) + ((_2287 + ((isnan(0.0) ? _1526 : (isnan(_1526) ? 0.0 : max(_1526, 0.0))) * _1303)) * cbPerFrame._m0[3u].x);
    float _2405 = cbInstanceData._m0[_438 + 6u].w * (isnan(1.0) ? _4498 : (isnan(_4498) ? 1.0 : min(_4498, 1.0)));
    float _2410 = _398 / cbSceneParam._m0[86u].x;
    float _2411 = _399 / cbSceneParam._m0[86u].y;
    vec4 _2425 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2410, _2411, (log2((isnan(cbSceneParam._m0[77u].w) ? _318 : (isnan(_318) ? cbSceneParam._m0[77u].w : min(_318, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2427 = _2425.x;
    float _2428 = _2425.y;
    float _2429 = _2425.z;
    float _2430 = _2425.w;
    float _2529;
    float _2531;
    float _2533;
    float _2535;
    if (_318 > cbSceneParam._m0[78u].w)
    {
        float _2492 = isnan(_318) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _318 : min(cbSceneParam._m0[80u].w, _318));
        float _2493 = _2492 / _318;
        float _2504 = _2493 * _370;
        float _2505 = _371 * _2493;
        float _2506 = (-0.0) - _2505;
        float _2507 = _2493 * _372;
        float _2509 = (cbSceneParam._m0[77u].w * _2506) / _2492;
        float _2510 = _2509 + cbSceneParam._m0[79u].w;
        float _2511 = cbSceneParam._m0[79u].w - _2505;
        float _2517 = sqrt(((_2504 * _2504) + (_2505 * _2505)) + (_2507 * _2507));
        float _2520 = (1.0 - (cbSceneParam._m0[77u].w / _2492)) * _2517;
        float _2525 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2527 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2914;
        if (abs((_2506 - _2509) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2914 = ((((_2510 > 0.0) ? exp2(_2525 * _2510) : (2.0 - exp2(_2527 * _2510))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2520;
        }
        else
        {
            float _2612 = 1.0 / cbSceneParam._m0[80u].x;
            float _2613 = isnan(_2511) ? _2510 : (isnan(_2510) ? _2511 : max(_2510, _2511));
            float _2614 = isnan(_2511) ? _2510 : (isnan(_2510) ? _2511 : min(_2510, _2511));
            float _2623 = isnan(0.0) ? _2613 : (isnan(_2613) ? 0.0 : min(_2613, 0.0));
            float _2624 = isnan(0.0) ? _2614 : (isnan(_2614) ? 0.0 : min(_2614, 0.0));
            _2914 = ((abs(_2517 / _2506) * cbSceneParam._m0[80u].y) * ((((_2623 - _2624) * 2.0) - ((exp2(_2525 * (isnan(0.0) ? _2613 : (isnan(_2613) ? 0.0 : max(_2613, 0.0)))) - exp2(_2525 * (isnan(0.0) ? _2614 : (isnan(_2614) ? 0.0 : max(_2614, 0.0))))) * _2612)) - ((exp2(_2527 * _2623) - exp2(_2527 * _2624)) * _2612))) + (_2520 * cbSceneParam._m0[80u].z);
        }
        vec4 _2916 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2410, _2411, 1.0), 0.0);
        float _2925 = exp2((_2914 * (-1.44269502162933349609375)) * (1.0 - _2916.w));
        float _2926 = log2(_2925);
        float _2942 = log2(_2430);
        _2529 = (exp2(_2942 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2926 * cbSceneParam._m0[78u].x)) * _2916.x) / cbSceneParam._m0[78u].x)) + _2427;
        _2531 = (exp2(_2942 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2926 * cbSceneParam._m0[78u].y)) * _2916.y) / cbSceneParam._m0[78u].y)) + _2428;
        _2533 = (exp2(_2942 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2926 * cbSceneParam._m0[78u].z)) * _2916.z) / cbSceneParam._m0[78u].z)) + _2429;
        _2535 = _2925 * _2430;
    }
    else
    {
        _2529 = _2427;
        _2531 = _2428;
        _2533 = _2429;
        _2535 = _2430;
    }
    bool _2952;
    vec4 _2545;
    vec4 _2567;
    float _2569;
    float _2573;
    float _2574;
    float _2575;
    float _2576;
    bool _2586;
    for (;;)
    {
        _2545 = cbMatDynParam._m0[0u];
        float _2547 = roundEven(_2545.y);
        bool _2548 = _2547 == 3.0;
        float _2549 = log2(_2535);
        float _2556 = exp2(_2549 * cbSceneParam._m0[78u].x) * _2398;
        float _2557 = exp2(_2549 * cbSceneParam._m0[78u].y) * _2399;
        float _2558 = exp2(_2549 * cbSceneParam._m0[78u].z) * _2400;
        float _2565 = _386 + (-0.5);
        _2567 = cbMtdParam._m0[1u];
        _2569 = _2567.y * _2565;
        float _2572 = (_2547 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2573 = _2572 * (_2548 ? _2556 : (_2556 + (cbSceneParam._m0[72u].w * _2529)));
        _2574 = _2572 * (_2548 ? _2557 : (_2557 + (cbSceneParam._m0[72u].w * _2531)));
        _2575 = _2572 * (_2548 ? _2558 : (_2558 + (cbSceneParam._m0[72u].w * _2533)));
        _2576 = _2565 * 0.999000012874603271484375;
        _2586 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2586)
        {
            if ((cbInstanceData._m0[_438 + 7u].x + _2576) < 0.5)
            {
                _2952 = true;
                break;
            }
        }
        uint _2647 = _440 + uint(_2545.w);
        if ((cbInstanceData._m0[_2647].w < 1.0) && ((cbInstanceData._m0[_2647].w + _2576) < 0.5))
        {
            _2952 = true;
            break;
        }
        if ((_2569 + _229) < _2567.x)
        {
            _2952 = true;
            break;
        }
        _2952 = false;
        break;
    }
    float _2970;
    if (_2952)
    {
        discard_state = true;
        _2970 = 0.0;
    }
    else
    {
        _2970 = _2405;
    }
    SV_Target.x = _2573;
    SV_Target.y = _2574;
    SV_Target.z = _2575;
    SV_Target.w = _2970;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2405;
    discard_exit();
}


