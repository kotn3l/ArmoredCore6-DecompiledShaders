#version 460

out float gl_ClipDistance[2];

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[12];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 5, std140) uniform cbObjMatrixUBO
{
    vec4 _m0[6];
} cbObjMatrix;

layout(set = 0, binding = 6, std140) uniform cbPrevObjMatrixUBO
{
    vec4 _m0[6];
} cbPrevObjMatrix;

layout(set = 0, binding = 10, std140) uniform cbInstanceIdxParamUBO
{
    vec4 _m0[1];
} cbInstanceIdxParam;

layout(set = 0, binding = 11, std140) uniform cbTexScrollUBO
{
    vec4 _m0[4];
} cbTexScroll;

layout(set = 0, binding = 26) uniform usamplerBuffer g_forceParam;
layout(set = 0, binding = 25) uniform usamplerBuffer g_InstanceIndexBuffer;

layout(location = 0) in vec3 POSITION;
layout(location = 1) in uvec4 NORMAL;
layout(location = 2) in uvec4 TANGENT;
layout(location = 3) in vec4 COLOR_1;
layout(location = 4) in ivec2 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_1;
layout(location = 1) out vec4 POSITION_1;
layout(location = 2) out vec4 NORMAL_1;
layout(location = 3) out vec4 TANGENT_1;
layout(location = 4) out float TEXCOORD_2;
layout(location = 4, component = 1) out float TEXCOORD_1_1;
layout(location = 5) out vec4 TEXCOORD_3;
layout(location = 6) out vec4 TEXCOORD_8;
layout(location = 7) out vec4 TEXCOORD_9;
layout(location = 8) out vec3 TEXCOORD_10;

uint _878;
uint _1001;

void main()
{
    uint _89 = uint(gl_InstanceIndex) - uint(gl_BaseInstance);
    gl_Position.x = 0.0;
    gl_Position.y = 0.0;
    gl_Position.z = 0.0;
    gl_Position.w = 0.0;
    POSITION_1.x = 0.0;
    POSITION_1.y = 0.0;
    POSITION_1.z = 0.0;
    POSITION_1.w = 0.0;
    NORMAL_1.x = 0.0;
    NORMAL_1.y = 0.0;
    NORMAL_1.z = 0.0;
    NORMAL_1.w = 0.0;
    TANGENT_1.x = 0.0;
    TANGENT_1.y = 0.0;
    TANGENT_1.z = 0.0;
    TANGENT_1.w = 0.0;
    TEXCOORD_2 = 0.0;
    TEXCOORD_1_1 = 0.0;
    TEXCOORD_3.x = 0.0;
    TEXCOORD_3.y = 0.0;
    TEXCOORD_3.z = 0.0;
    TEXCOORD_3.w = 0.0;
    TEXCOORD_8.x = 0.0;
    TEXCOORD_8.y = 0.0;
    TEXCOORD_8.z = 0.0;
    TEXCOORD_8.w = 0.0;
    TEXCOORD_9.x = 0.0;
    TEXCOORD_9.y = 0.0;
    TEXCOORD_9.z = 0.0;
    TEXCOORD_9.w = 0.0;
    TEXCOORD_10.x = 0.0;
    TEXCOORD_10.y = 0.0;
    TEXCOORD_10.z = 0.0;
    gl_ClipDistance[0u] = 0.0;
    gl_ClipDistance[1u] = 0.0;
    float _191 = (float(NORMAL.x) + (-127.0)) * 0.0078740157186985015869140625;
    float _193 = (float(NORMAL.y) + (-127.0)) * 0.0078740157186985015869140625;
    float _194 = (float(NORMAL.z) + (-127.0)) * 0.0078740157186985015869140625;
    float _204 = (float(TANGENT.x) + (-127.0)) * 0.0078740157186985015869140625;
    float _205 = (float(TANGENT.y) + (-127.0)) * 0.0078740157186985015869140625;
    float _206 = (float(TANGENT.z) + (-127.0)) * 0.0078740157186985015869140625;
    uint _208 = _89 * 13u;
    uvec4 _214 = floatBitsToUint(cbInstanceData._m0[_208 + 7u]);
    uint _217 = min(_214.y, 8u);
    bool _220 = _217 == 0u;
    precise float _221 = POSITION.x + 0.0;
    precise float _222 = POSITION.y + 0.0;
    precise float _223 = POSITION.z + 0.0;
    uint _228 = floatBitsToUint(cbInstanceIdxParam._m0[0u]).x + _89;
    uvec4 _230 = texelFetch(g_InstanceIndexBuffer, int(_228));
    uint _231 = _230.x;
    uint _233 = _231 * 13u;
    uint _240 = (floatBitsToUint(cbInstanceData._m0[_233 + 4u]).x + uint(float(NORMAL.w))) * 3u;
    uint _247 = _240 + 1u;
    uint _254 = _240 + 2u;
    precise float _261 = _221 * cbObjMatrix._m0[_240].x;
    precise float _262 = _222 * cbObjMatrix._m0[_240].y;
    precise float _263 = _262 + _261;
    precise float _264 = _223 * cbObjMatrix._m0[_240].z;
    precise float _265 = _264 + _263;
    precise float _266 = 1.0 * cbObjMatrix._m0[_240].w;
    precise float _268 = _266 + _265;
    precise float _269 = _221 * cbObjMatrix._m0[_247].x;
    precise float _270 = _222 * cbObjMatrix._m0[_247].y;
    precise float _271 = _270 + _269;
    precise float _272 = _223 * cbObjMatrix._m0[_247].z;
    precise float _273 = _272 + _271;
    precise float _274 = 1.0 * cbObjMatrix._m0[_247].w;
    precise float _275 = _274 + _273;
    precise float _276 = _221 * cbObjMatrix._m0[_254].x;
    precise float _277 = _222 * cbObjMatrix._m0[_254].y;
    precise float _278 = _277 + _276;
    precise float _279 = _223 * cbObjMatrix._m0[_254].z;
    precise float _280 = _279 + _278;
    precise float _281 = 1.0 * cbObjMatrix._m0[_254].w;
    precise float _282 = _281 + _280;
    float _315 = fma(_194, cbObjMatrix._m0[_240].z, fma(_193, cbObjMatrix._m0[_240].y, cbObjMatrix._m0[_240].x * _191));
    float _318 = fma(_194, cbObjMatrix._m0[_247].z, fma(_193, cbObjMatrix._m0[_247].y, cbObjMatrix._m0[_247].x * _191));
    float _321 = fma(_194, cbObjMatrix._m0[_254].z, fma(_193, cbObjMatrix._m0[_254].y, cbObjMatrix._m0[_254].x * _191));
    uint _338 = _208 + 1u;
    uint _345 = _208 + 2u;
    precise float _352 = TEXCOORD_1.x * cbInstanceData._m0[_208].x;
    precise float _353 = TEXCOORD_1.y * cbInstanceData._m0[_208].y;
    precise float _354 = _353 + _352;
    precise float _355 = TEXCOORD_1.z * cbInstanceData._m0[_208].z;
    precise float _356 = _355 + _354;
    precise float _357 = 1.0 * cbInstanceData._m0[_208].w;
    precise float _358 = _357 + _356;
    precise float _359 = TEXCOORD_1.x * cbInstanceData._m0[_338].x;
    precise float _360 = TEXCOORD_1.y * cbInstanceData._m0[_338].y;
    precise float _361 = _360 + _359;
    precise float _362 = TEXCOORD_1.z * cbInstanceData._m0[_338].z;
    precise float _363 = _362 + _361;
    precise float _364 = 1.0 * cbInstanceData._m0[_338].w;
    precise float _365 = _364 + _363;
    precise float _366 = TEXCOORD_1.x * cbInstanceData._m0[_345].x;
    precise float _367 = TEXCOORD_1.y * cbInstanceData._m0[_345].y;
    precise float _368 = _367 + _366;
    precise float _369 = TEXCOORD_1.z * cbInstanceData._m0[_345].z;
    precise float _370 = _369 + _368;
    precise float _371 = 1.0 * cbInstanceData._m0[_345].w;
    precise float _372 = _371 + _370;
    precise float _378 = _268 - _358;
    precise float _379 = _275 - _365;
    precise float _380 = _282 - _372;
    precise float _381 = _378 * _378;
    precise float _382 = _379 * _379;
    precise float _383 = _381 + _382;
    precise float _384 = _380 * _380;
    precise float _385 = _383 + _384;
    precise float _387 = cbMtdParam._m0[10u].z * sqrt(_385);
    precise float _392 = cbInstanceData._m0[_208].x * 0.0;
    precise float _393 = 0.0 * cbInstanceData._m0[_208].y;
    precise float _394 = _393 + _392;
    precise float _395 = 0.0 * cbInstanceData._m0[_208].z;
    precise float _396 = _395 + _394;
    precise float _397 = 1.0 * cbInstanceData._m0[_208].w;
    precise float _398 = _397 + _396;
    precise float _399 = cbInstanceData._m0[_338].x * 0.0;
    precise float _400 = 0.0 * cbInstanceData._m0[_338].y;
    precise float _401 = _400 + _399;
    precise float _402 = 0.0 * cbInstanceData._m0[_338].z;
    precise float _403 = _402 + _401;
    precise float _404 = 1.0 * cbInstanceData._m0[_338].w;
    precise float _405 = _404 + _403;
    precise float _406 = cbInstanceData._m0[_345].x * 0.0;
    precise float _407 = 0.0 * cbInstanceData._m0[_345].y;
    precise float _408 = _407 + _406;
    precise float _409 = 0.0 * cbInstanceData._m0[_345].z;
    precise float _410 = _409 + _408;
    precise float _411 = 1.0 * cbInstanceData._m0[_345].w;
    precise float _412 = _411 + _410;
    precise float _415 = _268 * _268;
    precise float _416 = _275 * _275;
    precise float _417 = _415 + _416;
    precise float _418 = _282 * _282;
    precise float _419 = _417 + _418;
    precise float _421 = cbMtdParam._m0[11u].x * sqrt(_419);
    precise float _422 = cbPerFrame._m0[22u].x + _421;
    uint _423 = _214.w;
    float _424;
    float _426;
    float _428;
    if (_220)
    {
        _424 = 0.0;
        _426 = 0.0;
        _428 = 0.0;
    }
    else
    {
        uint _548 = _214.z;
        precise float _425;
        precise float _427;
        precise float _429;
        float _1072;
        float _1074;
        float _1076;
        float _810 = 0.0;
        float _811 = 0.0;
        float _812 = 0.0;
        uint _813 = _548;
        uint _815 = 0u;
        float _851;
        float _870;
        vec4 _883;
        float _884;
        float _885;
        float _899;
        float _900;
        float _901;
        float _918;
        float _919;
        float _920;
        float _921;
        bool _922;
        bool _923;
        bool _924;
        precise float _925;
        precise float _926;
        precise float _927;
        float _928;
        float _929;
        float _930;
        precise float _931;
        bool _934;
        for (;;)
        {
            uint _817 = _813 & 255u;
            uint _819 = _817 * 24u;
            uvec3 _829 = uvec3(texelFetch(g_forceParam, int(_819)).x, texelFetch(g_forceParam, int(_819 + 1u)).x, texelFetch(g_forceParam, int(_819 + 2u)).x);
            uint _834 = (_817 * 24u) + 4u;
            vec4 _847 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_834)).x, texelFetch(g_forceParam, int(_834 + 1u)).x, texelFetch(g_forceParam, int(_834 + 2u)).x, texelFetch(g_forceParam, int(_834 + 3u)).x));
            _851 = _847.w;
            uint _853 = (_817 * 24u) + 8u;
            vec4 _866 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_853)).x, texelFetch(g_forceParam, int(_853 + 1u)).x, texelFetch(g_forceParam, int(_853 + 2u)).x, texelFetch(g_forceParam, int(_853 + 3u)).x));
            _870 = _866.w;
            uint _872 = (_817 * 24u) + 12u;
            _883 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_872)).x, texelFetch(g_forceParam, int(_872 + 1u)).x, _878, texelFetch(g_forceParam, int(_872 + 3u)).x));
            _884 = _883.x;
            _885 = _883.w;
            uint _888 = (_817 * 24u) + 16u;
            vec3 _898 = uintBitsToFloat(uvec3(texelFetch(g_forceParam, int(_888)).x, texelFetch(g_forceParam, int(_888 + 1u)).x, texelFetch(g_forceParam, int(_888 + 2u)).x));
            _899 = _898.x;
            _900 = _898.y;
            _901 = _898.z;
            uint _904 = (_817 * 24u) + 20u;
            vec4 _917 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_904)).x, texelFetch(g_forceParam, int(_904 + 1u)).x, texelFetch(g_forceParam, int(_904 + 2u)).x, texelFetch(g_forceParam, int(_904 + 3u)).x));
            _918 = _917.x;
            _919 = _917.y;
            _920 = _917.z;
            _921 = _917.w;
            _922 = _829.x == 1u;
            _923 = _829.y == 1u;
            _924 = _829.z == 1u;
            _925 = _398 - _847.x;
            _926 = _405 - _847.y;
            _927 = _412 - _847.z;
            _928 = _922 ? _866.x : _925;
            _929 = _922 ? _866.y : _926;
            _930 = _922 ? _866.z : _927;
            _931 = dot(vec3(_928, _929, _930), vec3(_928, _929, _930));
            _934 = _931 > 0.0;
            float frontier_phi_8_pred;
            float frontier_phi_8_pred_1;
            float frontier_phi_8_pred_2;
            if (_934)
            {
                precise float _1057 = _925 * _925;
                precise float _1058 = _926 * _926;
                precise float _1059 = _1057 + _1058;
                precise float _1060 = _927 * _927;
                precise float _1061 = _1060 + _1059;
                float _1062 = sqrt(_1061);
                float _1063 = inversesqrt(_931);
                precise float _1064 = _928 * _1063;
                precise float _1065 = _929 * _1063;
                precise float _1066 = _930 * _1063;
                precise float _1069 = _1062 / (isnan(0.001000000047497451305389404296875) ? _883.y : (isnan(_883.y) ? 0.001000000047497451305389404296875 : max(_883.y, 0.001000000047497451305389404296875)));
                precise float _1070 = 1.0 - _1069;
                float _1396 = isnan(0.0) ? _1070 : (isnan(_1070) ? 0.0 : max(_1070, 0.0));
                float _1071 = isnan(1.0) ? _1396 : (isnan(_1396) ? 1.0 : min(_1396, 1.0));
                float _1121;
                if (_924)
                {
                    float _1108 = inversesqrt(dot(vec3(_925, _926, _927), vec3(_925, _926, _927)));
                    precise float _1109 = _925 * _1108;
                    precise float _1110 = _926 * _1108;
                    precise float _1111 = _927 * _1108;
                    precise float _1115 = dot(vec3(_1064, _1065, _1066), vec3(_1109, _1110, _1111)) * 0.800000011920928955078125;
                    precise float _1117 = _1115 + 0.20000000298023223876953125;
                    float _1407 = isnan(0.0) ? _1117 : (isnan(_1117) ? 0.0 : max(_1117, 0.0));
                    precise float _1120 = _1071 * (isnan(1.0) ? _1407 : (isnan(_1407) ? 1.0 : min(_1407, 1.0)));
                    _1121 = _1120;
                }
                else
                {
                    _1121 = _1071;
                }
                float frontier_phi_8_pred_12_ladder;
                float frontier_phi_8_pred_12_ladder_1;
                float frontier_phi_8_pred_12_ladder_2;
                if (_1121 > 0.0)
                {
                    bool _1140 = _922 && (!_924);
                    precise float _1142 = _1062 * (-4.0);
                    precise float _1146 = 6.283184051513671875 / (isnan(0.001000000047497451305389404296875) ? _884 : (isnan(_884) ? 0.001000000047497451305389404296875 : max(_884, 0.001000000047497451305389404296875)));
                    precise float _1148 = dot(vec2(_1064, _1066), vec2(_925, _927));
                    precise float _1152 = _1146 * _1148;
                    precise float _1153 = float(_1140) * _1152;
                    precise float _1154 = _422 * _1146;
                    precise float _1155 = _1154 - _1153;
                    precise float _1156 = (_1140 ? 0.0 : _1142) + _1155;
                    precise float _1158 = _870 * sin(_1156);
                    precise float _1159 = _1065 * 0.0;
                    precise float _1160 = _1159 - _1066;
                    precise float _1161 = _1066 * 0.0;
                    precise float _1162 = _1064 * 0.0;
                    precise float _1163 = _1161 - _1162;
                    precise float _1164 = _1064 - _1159;
                    precise float _1165 = _885 * _1158;
                    float _1166 = _922 ? _1165 : 0.0;
                    float _1235;
                    if (_923)
                    {
                        precise float _1195 = _899 * 2.0;
                        precise float _1197 = _919 + _920;
                        precise float _1198 = _921 + _1197;
                        precise float _1200 = 6.283184051513671875 / (isnan(0.001000000047497451305389404296875) ? _899 : (isnan(_899) ? 0.001000000047497451305389404296875 : max(_899, 0.001000000047497451305389404296875)));
                        precise float _1201 = _918 * _1200;
                        precise float _1202 = (-0.0) - _1064;
                        precise float _1207 = dot(vec2(_1066, _1202), vec2(_925, _927)) / _1195;
                        precise float _1208 = (-0.0) - _1207;
                        float _1211 = fract(abs(_1207));
                        precise float _1212 = (-0.0) - _1211;
                        precise float _1214 = _1195 * ((_1207 >= _1208) ? _1211 : _1212);
                        precise float _1215 = _1214 * 6.283184051513671875;
                        precise float _1216 = _1215 / _1195;
                        precise float _1218 = (isnan(5.0) ? _899 : (isnan(_899) ? 5.0 : min(_899, 5.0))) * sin(_1216);
                        precise float _1219 = _1148 + _1218;
                        precise float _1220 = _899 * 0.25;
                        precise float _1222 = _422 * _918;
                        precise float _1223 = _1222 - _1220;
                        precise float _1224 = _1223 - _1219;
                        precise float _1225 = _918 * _1198;
                        precise float _1227 = _1224 / (isnan(0.001000000047497451305389404296875) ? _1225 : (isnan(_1225) ? 0.001000000047497451305389404296875 : max(_1225, 0.001000000047497451305389404296875)));
                        float _1228 = fract(_1227);
                        precise float _1230 = 1.0 - _1228;
                        float _1231 = (_1227 < 0.0) ? _1230 : _1228;
                        precise float _1232 = _1197 / _1198;
                        precise float _1233 = _919 / _1198;
                        float _1311;
                        if (_1231 < _1233)
                        {
                            precise float _1307 = _1231 / _1233;
                            _1311 = _1307;
                        }
                        else
                        {
                            float frontier_phi_27_24_ladder;
                            if (_1231 < _1232)
                            {
                                precise float _1321 = _1231 - _1233;
                                precise float _1322 = _1232 - _1233;
                                precise float _1323 = _1321 / _1322;
                                precise float _1312 = 1.0 - _1323;
                                frontier_phi_27_24_ladder = _1312;
                            }
                            else
                            {
                                frontier_phi_27_24_ladder = 0.0;
                            }
                            _1311 = frontier_phi_27_24_ladder;
                        }
                        precise float _1313 = _901 * _1311;
                        precise float _1314 = _1200 * _1148;
                        precise float _1315 = _422 * _1201;
                        precise float _1316 = _1315 - _1314;
                        precise float _1318 = _900 + sin(_1316);
                        precise float _1320 = _1313 * abs(_1318);
                        precise float _1236 = _1320 + 0.0;
                        _1235 = _1236;
                    }
                    else
                    {
                        _1235 = 0.0;
                    }
                    precise float _1237 = _851 + _1158;
                    precise float _1238 = _1237 + _1235;
                    precise float _1239 = _1064 * _1238;
                    precise float _1240 = _1065 * _1238;
                    precise float _1241 = _1066 * _1238;
                    precise float _1242 = _1160 * _1166;
                    precise float _1243 = _1163 * _1166;
                    precise float _1244 = _1164 * _1166;
                    precise float _1245 = _1242 + _1239;
                    precise float _1246 = _1243 + _1240;
                    precise float _1247 = _1244 + _1241;
                    precise float _1248 = _1121 * _1245;
                    precise float _1249 = _1121 * _1246;
                    precise float _1250 = _1121 * _1247;
                    precise float _1073 = _1248 * 0.0500000007450580596923828125;
                    precise float _1075 = _1249 * 0.0500000007450580596923828125;
                    precise float _1077 = _1250 * 0.0500000007450580596923828125;
                    frontier_phi_8_pred_12_ladder = _1073;
                    frontier_phi_8_pred_12_ladder_1 = _1075;
                    frontier_phi_8_pred_12_ladder_2 = _1077;
                }
                else
                {
                    frontier_phi_8_pred_12_ladder = 0.0;
                    frontier_phi_8_pred_12_ladder_1 = 0.0;
                    frontier_phi_8_pred_12_ladder_2 = 0.0;
                }
                frontier_phi_8_pred = frontier_phi_8_pred_12_ladder;
                frontier_phi_8_pred_1 = frontier_phi_8_pred_12_ladder_1;
                frontier_phi_8_pred_2 = frontier_phi_8_pred_12_ladder_2;
            }
            else
            {
                frontier_phi_8_pred = 0.0;
                frontier_phi_8_pred_1 = 0.0;
                frontier_phi_8_pred_2 = 0.0;
            }
            _1072 = frontier_phi_8_pred;
            _1074 = frontier_phi_8_pred_1;
            _1076 = frontier_phi_8_pred_2;
            _425 = _810 + _1072;
            _427 = _811 + _1074;
            _429 = _812 + _1076;
            uint _816 = _815 + 1u;
            if (_816 == _217)
            {
                break;
            }
            else
            {
                _810 = _425;
                _811 = _427;
                _812 = _429;
                _813 = (_815 != 3u) ? (_813 >> 8u) : _423;
                _815 = _816;
                continue;
            }
        }
        _424 = _425;
        _426 = _427;
        _428 = _429;
    }
    precise float _430 = _424 * _424;
    precise float _431 = _426 * _426;
    precise float _432 = _430 + _431;
    precise float _433 = _428 * _428;
    precise float _434 = _432 + _433;
    float _435 = sqrt(_434);
    bool _436 = _435 < 0.00011000000085914507508277893066406;
    float _441 = inversesqrt(dot(vec3(cbInstanceData._m0[_208].x, cbInstanceData._m0[_338].x, cbInstanceData._m0[_345].x), vec3(cbInstanceData._m0[_208].x, cbInstanceData._m0[_338].x, cbInstanceData._m0[_345].x)));
    precise float _442 = cbInstanceData._m0[_208].x * _441;
    precise float _443 = cbInstanceData._m0[_338].x * _441;
    precise float _444 = cbInstanceData._m0[_345].x * _441;
    float _448 = inversesqrt(dot(vec3(cbInstanceData._m0[_208].y, cbInstanceData._m0[_338].y, cbInstanceData._m0[_345].y), vec3(cbInstanceData._m0[_208].y, cbInstanceData._m0[_338].y, cbInstanceData._m0[_345].y)));
    precise float _449 = cbInstanceData._m0[_208].y * _448;
    precise float _450 = cbInstanceData._m0[_338].y * _448;
    precise float _451 = cbInstanceData._m0[_345].y * _448;
    float _455 = inversesqrt(dot(vec3(cbInstanceData._m0[_208].z, cbInstanceData._m0[_338].z, cbInstanceData._m0[_345].z), vec3(cbInstanceData._m0[_208].z, cbInstanceData._m0[_338].z, cbInstanceData._m0[_345].z)));
    precise float _456 = cbInstanceData._m0[_208].z * _455;
    precise float _457 = cbInstanceData._m0[_338].z * _455;
    precise float _458 = cbInstanceData._m0[_345].z * _455;
    precise float _459 = _442 * 0.0;
    precise float _460 = 1.0 * _449;
    precise float _461 = _460 + _459;
    precise float _462 = 0.0 * _456;
    precise float _463 = _462 + _461;
    precise float _464 = _443 * 0.0;
    precise float _465 = 1.0 * _450;
    precise float _466 = _465 + _464;
    precise float _467 = 0.0 * _457;
    precise float _468 = _467 + _466;
    precise float _469 = _444 * 0.0;
    precise float _470 = 1.0 * _451;
    precise float _471 = _470 + _469;
    precise float _472 = 0.0 * _458;
    precise float _473 = _472 + _471;
    float _477 = inversesqrt(dot(vec3(_424, _426, _428), vec3(_424, _426, _428)));
    precise float _478 = _424 * _477;
    precise float _479 = _426 * _477;
    precise float _480 = _428 * _477;
    precise float _481 = _468 * _480;
    precise float _482 = _473 * _479;
    precise float _483 = _481 - _482;
    precise float _484 = _473 * _478;
    precise float _485 = _463 * _480;
    precise float _486 = _484 - _485;
    precise float _487 = _463 * _479;
    precise float _488 = _468 * _478;
    precise float _489 = _487 - _488;
    float _493 = inversesqrt(dot(vec3(_483, _486, _489), vec3(_483, _486, _489)));
    precise float _494 = _493 * _483;
    precise float _495 = _493 * _486;
    precise float _496 = _493 * _489;
    precise float _497 = _435 + 1.0;
    precise float _499 = cbMtdParam._m0[10u].w * log2(_497);
    precise float _500 = _268 - _398;
    precise float _501 = _275 - _405;
    precise float _502 = _282 - _412;
    precise float _503 = dot(vec3(_494, _495, _496), vec3(_500, _501, _502));
    precise float _506 = _494 * _503;
    precise float _507 = _495 * _503;
    precise float _508 = _496 * _503;
    precise float _509 = _398 + _506;
    precise float _510 = _405 + _507;
    precise float _511 = _412 + _508;
    precise float _512 = _268 - _509;
    precise float _513 = _275 - _510;
    precise float _514 = _282 - _511;
    precise float _515 = _495 * _514;
    precise float _516 = _496 * _513;
    precise float _517 = _515 - _516;
    precise float _518 = _496 * _512;
    precise float _519 = _494 * _514;
    precise float _520 = _518 - _519;
    precise float _521 = _494 * _513;
    precise float _522 = _495 * _512;
    precise float _523 = _521 - _522;
    float _524 = sin(_499);
    float _525 = cos(_499);
    precise float _526 = _512 * _525;
    precise float _527 = _513 * _525;
    precise float _528 = _514 * _525;
    precise float _529 = _524 * _517;
    precise float _530 = _524 * _520;
    precise float _531 = _524 * _523;
    precise float _532 = _526 + _529;
    precise float _533 = _527 + _530;
    precise float _534 = _531 + _528;
    precise float _535 = _509 + _532;
    precise float _536 = _510 + _533;
    precise float _537 = _511 + _534;
    precise float _538 = _535 - _268;
    precise float _539 = _536 - _275;
    precise float _540 = _537 - _282;
    float _541 = _436 ? 0.0 : _538;
    float _542 = _436 ? 0.0 : _539;
    float _543 = _436 ? 0.0 : _540;
    precise float _544 = _268 + _541;
    precise float _545 = _275 + _542;
    precise float _546 = _282 + _543;
    precise float _547 = cbPerFrame._m0[22u].x + _387;
    float _549;
    float _551;
    float _553;
    if (_220)
    {
        _549 = 0.0;
        _551 = 0.0;
        _553 = 0.0;
    }
    else
    {
        uint _809 = _214.z;
        precise float _550;
        precise float _552;
        precise float _554;
        float _1096;
        float _1098;
        float _1100;
        float _935 = 0.0;
        float _936 = 0.0;
        float _937 = 0.0;
        uint _938 = _809;
        uint _940 = 0u;
        float _974;
        float _993;
        vec4 _1006;
        float _1007;
        float _1008;
        float _1021;
        float _1022;
        float _1023;
        float _1039;
        float _1040;
        float _1041;
        float _1042;
        bool _1043;
        bool _1044;
        bool _1045;
        precise float _1046;
        precise float _1047;
        precise float _1048;
        float _1049;
        float _1050;
        float _1051;
        precise float _1052;
        bool _1055;
        for (;;)
        {
            uint _942 = _938 & 255u;
            uint _943 = _942 * 24u;
            uvec3 _952 = uvec3(texelFetch(g_forceParam, int(_943)).x, texelFetch(g_forceParam, int(_943 + 1u)).x, texelFetch(g_forceParam, int(_943 + 2u)).x);
            uint _957 = (_942 * 24u) + 4u;
            vec4 _970 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_957)).x, texelFetch(g_forceParam, int(_957 + 1u)).x, texelFetch(g_forceParam, int(_957 + 2u)).x, texelFetch(g_forceParam, int(_957 + 3u)).x));
            _974 = _970.w;
            uint _976 = (_942 * 24u) + 8u;
            vec4 _989 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_976)).x, texelFetch(g_forceParam, int(_976 + 1u)).x, texelFetch(g_forceParam, int(_976 + 2u)).x, texelFetch(g_forceParam, int(_976 + 3u)).x));
            _993 = _989.w;
            uint _995 = (_942 * 24u) + 12u;
            _1006 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_995)).x, texelFetch(g_forceParam, int(_995 + 1u)).x, _1001, texelFetch(g_forceParam, int(_995 + 3u)).x));
            _1007 = _1006.x;
            _1008 = _1006.w;
            uint _1010 = (_942 * 24u) + 16u;
            vec3 _1020 = uintBitsToFloat(uvec3(texelFetch(g_forceParam, int(_1010)).x, texelFetch(g_forceParam, int(_1010 + 1u)).x, texelFetch(g_forceParam, int(_1010 + 2u)).x));
            _1021 = _1020.x;
            _1022 = _1020.y;
            _1023 = _1020.z;
            uint _1025 = (_942 * 24u) + 20u;
            vec4 _1038 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_1025)).x, texelFetch(g_forceParam, int(_1025 + 1u)).x, texelFetch(g_forceParam, int(_1025 + 2u)).x, texelFetch(g_forceParam, int(_1025 + 3u)).x));
            _1039 = _1038.x;
            _1040 = _1038.y;
            _1041 = _1038.z;
            _1042 = _1038.w;
            _1043 = _952.x == 1u;
            _1044 = _952.y == 1u;
            _1045 = _952.z == 1u;
            _1046 = _358 - _970.x;
            _1047 = _365 - _970.y;
            _1048 = _372 - _970.z;
            _1049 = _1043 ? _989.x : _1046;
            _1050 = _1043 ? _989.y : _1047;
            _1051 = _1043 ? _989.z : _1048;
            _1052 = dot(vec3(_1049, _1050, _1051), vec3(_1049, _1050, _1051));
            _1055 = _1052 > 0.0;
            float frontier_phi_10_pred;
            float frontier_phi_10_pred_1;
            float frontier_phi_10_pred_2;
            if (_1055)
            {
                precise float _1082 = _1046 * _1046;
                precise float _1083 = _1047 * _1047;
                precise float _1084 = _1082 + _1083;
                precise float _1085 = _1048 * _1048;
                precise float _1086 = _1085 + _1084;
                float _1087 = sqrt(_1086);
                float _1088 = inversesqrt(_1052);
                precise float _1089 = _1049 * _1088;
                precise float _1090 = _1050 * _1088;
                precise float _1091 = _1051 * _1088;
                precise float _1093 = _1087 / (isnan(0.001000000047497451305389404296875) ? _1006.y : (isnan(_1006.y) ? 0.001000000047497451305389404296875 : max(_1006.y, 0.001000000047497451305389404296875)));
                precise float _1094 = 1.0 - _1093;
                float _1443 = isnan(0.0) ? _1094 : (isnan(_1094) ? 0.0 : max(_1094, 0.0));
                float _1095 = isnan(1.0) ? _1443 : (isnan(_1443) ? 1.0 : min(_1443, 1.0));
                float _1137;
                if (_1045)
                {
                    float _1126 = inversesqrt(dot(vec3(_1046, _1047, _1048), vec3(_1046, _1047, _1048)));
                    precise float _1127 = _1046 * _1126;
                    precise float _1128 = _1047 * _1126;
                    precise float _1129 = _1048 * _1126;
                    precise float _1133 = dot(vec3(_1089, _1090, _1091), vec3(_1127, _1128, _1129)) * 0.800000011920928955078125;
                    precise float _1134 = _1133 + 0.20000000298023223876953125;
                    float _1454 = isnan(0.0) ? _1134 : (isnan(_1134) ? 0.0 : max(_1134, 0.0));
                    precise float _1136 = _1095 * (isnan(1.0) ? _1454 : (isnan(_1454) ? 1.0 : min(_1454, 1.0)));
                    _1137 = _1136;
                }
                else
                {
                    _1137 = _1095;
                }
                float frontier_phi_10_pred_15_ladder;
                float frontier_phi_10_pred_15_ladder_1;
                float frontier_phi_10_pred_15_ladder_2;
                if (_1137 > 0.0)
                {
                    bool _1168 = _1043 && (!_1045);
                    precise float _1170 = _1087 * (-4.0);
                    precise float _1173 = 6.283184051513671875 / (isnan(0.001000000047497451305389404296875) ? _1007 : (isnan(_1007) ? 0.001000000047497451305389404296875 : max(_1007, 0.001000000047497451305389404296875)));
                    precise float _1174 = cbMtdParam._m0[11u].y * _1173;
                    precise float _1175 = dot(vec2(_1089, _1091), vec2(_1046, _1048));
                    precise float _1178 = _1175 * _1174;
                    precise float _1179 = float(_1168) * _1178;
                    precise float _1180 = _547 * _1174;
                    precise float _1181 = _1180 - _1179;
                    precise float _1182 = (_1168 ? 0.0 : _1170) + _1181;
                    precise float _1184 = _993 * sin(_1182);
                    precise float _1185 = _1090 * 0.0;
                    precise float _1186 = _1185 - _1091;
                    precise float _1187 = _1091 * 0.0;
                    precise float _1188 = _1089 * 0.0;
                    precise float _1189 = _1187 - _1188;
                    precise float _1190 = _1089 - _1185;
                    precise float _1191 = _1008 * _1184;
                    float _1192 = _1043 ? _1191 : 0.0;
                    float _1291;
                    if (_1044)
                    {
                        precise float _1253 = _1021 * 2.0;
                        precise float _1254 = _1040 + _1041;
                        precise float _1255 = _1042 + _1254;
                        precise float _1257 = 6.283184051513671875 / (isnan(0.001000000047497451305389404296875) ? _1021 : (isnan(_1021) ? 0.001000000047497451305389404296875 : max(_1021, 0.001000000047497451305389404296875)));
                        precise float _1258 = cbMtdParam._m0[11u].y * _1257;
                        precise float _1259 = _1039 * _1258;
                        precise float _1260 = (-0.0) - _1089;
                        precise float _1264 = dot(vec2(_1091, _1260), vec2(_1046, _1048)) / _1253;
                        precise float _1265 = (-0.0) - _1264;
                        float _1268 = fract(abs(_1264));
                        precise float _1269 = (-0.0) - _1268;
                        precise float _1271 = _1253 * ((_1264 >= _1265) ? _1268 : _1269);
                        precise float _1272 = _1271 * 6.283184051513671875;
                        precise float _1273 = _1272 / _1253;
                        precise float _1275 = (isnan(5.0) ? _1021 : (isnan(_1021) ? 5.0 : min(_1021, 5.0))) * sin(_1273);
                        precise float _1276 = _1175 + _1275;
                        precise float _1277 = _1021 * 0.25;
                        precise float _1278 = _547 * _1039;
                        precise float _1279 = _1278 - _1277;
                        precise float _1280 = _1279 - _1276;
                        precise float _1281 = _1039 * _1255;
                        precise float _1283 = _1280 / (isnan(0.001000000047497451305389404296875) ? _1281 : (isnan(_1281) ? 0.001000000047497451305389404296875 : max(_1281, 0.001000000047497451305389404296875)));
                        float _1284 = fract(_1283);
                        precise float _1286 = 1.0 - _1284;
                        float _1287 = (_1283 < 0.0) ? _1286 : _1284;
                        precise float _1288 = _1254 / _1255;
                        precise float _1289 = _1040 / _1255;
                        float _1324;
                        if (_1287 < _1289)
                        {
                            precise float _1309 = _1287 / _1289;
                            _1324 = _1309;
                        }
                        else
                        {
                            float frontier_phi_29_26_ladder;
                            if (_1287 < _1288)
                            {
                                precise float _1334 = _1287 - _1289;
                                precise float _1335 = _1288 - _1289;
                                precise float _1336 = _1334 / _1335;
                                precise float _1325 = 1.0 - _1336;
                                frontier_phi_29_26_ladder = _1325;
                            }
                            else
                            {
                                frontier_phi_29_26_ladder = 0.0;
                            }
                            _1324 = frontier_phi_29_26_ladder;
                        }
                        precise float _1326 = _1023 * _1324;
                        precise float _1327 = _1258 * _1175;
                        precise float _1328 = _547 * _1259;
                        precise float _1329 = _1328 - _1327;
                        precise float _1331 = _1022 + sin(_1329);
                        precise float _1333 = _1326 * abs(_1331);
                        precise float _1292 = _1333 + 0.0;
                        _1291 = _1292;
                    }
                    else
                    {
                        _1291 = 0.0;
                    }
                    precise float _1293 = _974 + _1184;
                    precise float _1294 = _1293 + _1291;
                    precise float _1295 = _1089 * _1294;
                    precise float _1296 = _1090 * _1294;
                    precise float _1297 = _1091 * _1294;
                    precise float _1298 = _1186 * _1192;
                    precise float _1299 = _1189 * _1192;
                    precise float _1300 = _1190 * _1192;
                    precise float _1301 = _1298 + _1295;
                    precise float _1302 = _1299 + _1296;
                    precise float _1303 = _1300 + _1297;
                    precise float _1304 = _1137 * _1301;
                    precise float _1305 = _1137 * _1302;
                    precise float _1306 = _1137 * _1303;
                    precise float _1097 = _1304 * 0.0500000007450580596923828125;
                    precise float _1099 = _1305 * 0.0500000007450580596923828125;
                    precise float _1101 = _1306 * 0.0500000007450580596923828125;
                    frontier_phi_10_pred_15_ladder = _1097;
                    frontier_phi_10_pred_15_ladder_1 = _1099;
                    frontier_phi_10_pred_15_ladder_2 = _1101;
                }
                else
                {
                    frontier_phi_10_pred_15_ladder = 0.0;
                    frontier_phi_10_pred_15_ladder_1 = 0.0;
                    frontier_phi_10_pred_15_ladder_2 = 0.0;
                }
                frontier_phi_10_pred = frontier_phi_10_pred_15_ladder;
                frontier_phi_10_pred_1 = frontier_phi_10_pred_15_ladder_1;
                frontier_phi_10_pred_2 = frontier_phi_10_pred_15_ladder_2;
            }
            else
            {
                frontier_phi_10_pred = 0.0;
                frontier_phi_10_pred_1 = 0.0;
                frontier_phi_10_pred_2 = 0.0;
            }
            _1096 = frontier_phi_10_pred;
            _1098 = frontier_phi_10_pred_1;
            _1100 = frontier_phi_10_pred_2;
            _550 = _935 + _1096;
            _552 = _936 + _1098;
            _554 = _937 + _1100;
            uint _941 = _940 + 1u;
            if (_941 == _217)
            {
                break;
            }
            else
            {
                _935 = _550;
                _936 = _552;
                _937 = _554;
                _938 = (_940 != 3u) ? (_938 >> 8u) : _423;
                _940 = _941;
                continue;
            }
        }
        _549 = _550;
        _551 = _552;
        _553 = _554;
    }
    precise float _555 = _549 * _549;
    precise float _556 = _551 * _551;
    precise float _557 = _555 + _556;
    precise float _558 = _553 * _553;
    precise float _559 = _557 + _558;
    float _560 = sqrt(_559);
    bool _561 = _560 < 0.00011000000085914507508277893066406;
    float _565 = inversesqrt(dot(vec3(_549, _551, _553), vec3(_549, _551, _553)));
    precise float _566 = _549 * _565;
    precise float _567 = _551 * _565;
    precise float _568 = _553 * _565;
    precise float _569 = _468 * _568;
    precise float _570 = _473 * _567;
    precise float _571 = _569 - _570;
    precise float _572 = _473 * _566;
    precise float _573 = _463 * _568;
    precise float _574 = _572 - _573;
    precise float _575 = _463 * _567;
    precise float _576 = _468 * _566;
    precise float _577 = _575 - _576;
    float _581 = inversesqrt(dot(vec3(_571, _574, _577), vec3(_571, _574, _577)));
    precise float _582 = _581 * _571;
    precise float _583 = _581 * _574;
    precise float _584 = _581 * _577;
    precise float _585 = _560 + 1.0;
    precise float _587 = cbMtdParam._m0[10u].y * log2(_585);
    precise float _588 = _544 - _358;
    precise float _589 = _545 - _365;
    precise float _590 = _546 - _372;
    precise float _591 = dot(vec3(_582, _583, _584), vec3(_588, _589, _590));
    precise float _594 = _582 * _591;
    precise float _595 = _583 * _591;
    precise float _596 = _584 * _591;
    precise float _597 = _358 + _594;
    precise float _598 = _365 + _595;
    precise float _599 = _372 + _596;
    precise float _600 = _544 - _597;
    precise float _601 = _545 - _598;
    precise float _602 = _546 - _599;
    precise float _603 = _583 * _602;
    precise float _604 = _584 * _601;
    precise float _605 = _603 - _604;
    precise float _606 = _584 * _600;
    precise float _607 = _582 * _602;
    precise float _608 = _606 - _607;
    precise float _609 = _582 * _601;
    precise float _610 = _583 * _600;
    precise float _611 = _609 - _610;
    float _612 = sin(_587);
    float _613 = cos(_587);
    precise float _614 = _600 * _613;
    precise float _615 = _601 * _613;
    precise float _616 = _602 * _613;
    precise float _617 = _612 * _605;
    precise float _618 = _612 * _608;
    precise float _619 = _612 * _611;
    precise float _620 = _614 + _617;
    precise float _621 = _615 + _618;
    precise float _622 = _619 + _616;
    precise float _623 = _597 + _620;
    precise float _624 = _598 + _621;
    precise float _625 = _599 + _622;
    precise float _626 = _623 - _544;
    precise float _627 = _624 - _545;
    precise float _628 = _625 - _546;
    precise float _632 = _541 + (_561 ? 0.0 : _626);
    precise float _633 = _542 + (_561 ? 0.0 : _627);
    precise float _634 = _543 + (_561 ? 0.0 : _628);
    precise float _635 = _268 + _632;
    precise float _636 = _275 + _633;
    precise float _637 = _282 + _634;
    float _645 = ((fma(_223, cbPrevObjMatrix._m0[_240].z, fma(_222, cbPrevObjMatrix._m0[_240].y, cbPrevObjMatrix._m0[_240].x * _221)) + cbPrevObjMatrix._m0[_240].w) - cbSceneParam._m0[28u].x) + _632;
    float _647 = ((fma(_223, cbPrevObjMatrix._m0[_247].z, fma(_222, cbPrevObjMatrix._m0[_247].y, cbPrevObjMatrix._m0[_247].x * _221)) + cbPrevObjMatrix._m0[_247].w) - cbSceneParam._m0[28u].y) + _633;
    float _649 = ((fma(_223, cbPrevObjMatrix._m0[_254].z, fma(_222, cbPrevObjMatrix._m0[_254].y, cbPrevObjMatrix._m0[_254].x * _221)) + cbPrevObjMatrix._m0[_254].w) - cbSceneParam._m0[28u].z) + _634;
    precise float _699 = _635 - cbSceneParam._m0[3u].x;
    precise float _700 = _636 - cbSceneParam._m0[3u].y;
    precise float _701 = _637 - cbSceneParam._m0[3u].z;
    precise float _729 = _699 * cbSceneParam._m0[24u].x;
    precise float _730 = _700 * cbSceneParam._m0[24u].y;
    precise float _731 = _730 + _729;
    precise float _732 = _701 * cbSceneParam._m0[24u].z;
    precise float _733 = _732 + _731;
    precise float _734 = 1.0 * cbSceneParam._m0[24u].w;
    precise float _735 = _734 + _733;
    precise float _736 = _699 * cbSceneParam._m0[25u].x;
    precise float _737 = _700 * cbSceneParam._m0[25u].y;
    precise float _738 = _737 + _736;
    precise float _739 = _701 * cbSceneParam._m0[25u].z;
    precise float _740 = _739 + _738;
    precise float _741 = 1.0 * cbSceneParam._m0[25u].w;
    precise float _742 = _741 + _740;
    precise float _743 = _699 * cbSceneParam._m0[26u].x;
    precise float _744 = _700 * cbSceneParam._m0[26u].y;
    precise float _745 = _744 + _743;
    precise float _746 = _701 * cbSceneParam._m0[26u].z;
    precise float _747 = _746 + _745;
    precise float _748 = 1.0 * cbSceneParam._m0[26u].w;
    precise float _749 = _748 + _747;
    precise float _750 = _699 * cbSceneParam._m0[27u].x;
    precise float _751 = _700 * cbSceneParam._m0[27u].y;
    precise float _752 = _751 + _750;
    precise float _753 = _701 * cbSceneParam._m0[27u].z;
    precise float _754 = _753 + _752;
    precise float _755 = 1.0 * cbSceneParam._m0[27u].w;
    precise float _756 = _755 + _754;
    gl_Position.x = _735;
    gl_Position.y = _742;
    gl_Position.z = _749;
    gl_Position.w = _756;
    POSITION_1.x = _735;
    POSITION_1.y = _742;
    POSITION_1.z = _749;
    POSITION_1.w = _756;
    NORMAL_1.x = _315;
    NORMAL_1.y = _318;
    NORMAL_1.z = _321;
    NORMAL_1.w = float(_231);
    TANGENT_1.x = fma(_206, cbObjMatrix._m0[_240].z, fma(_205, cbObjMatrix._m0[_240].y, cbObjMatrix._m0[_240].x * _204));
    TANGENT_1.y = fma(_206, cbObjMatrix._m0[_247].z, fma(_205, cbObjMatrix._m0[_247].y, cbObjMatrix._m0[_247].x * _204));
    TANGENT_1.z = fma(_206, cbObjMatrix._m0[_254].z, fma(_205, cbObjMatrix._m0[_254].y, cbObjMatrix._m0[_254].x * _204));
    TANGENT_1.w = (float(TANGENT.w) + (-127.0)) * 0.0078740157186985015869140625;
    TEXCOORD_2 = ((float(int(uint(TEXCOORD.x))) * 0.00048828125) * cbTexScroll._m0[0u].x) + cbTexScroll._m0[0u].z;
    TEXCOORD_1_1 = ((float(int(uint(TEXCOORD.y))) * 0.00048828125) * cbTexScroll._m0[0u].y) + cbTexScroll._m0[0u].w;
    TEXCOORD_3.x = TEXCOORD_1.x;
    TEXCOORD_3.y = TEXCOORD_1.y;
    TEXCOORD_3.z = TEXCOORD_1.z;
    TEXCOORD_3.w = COLOR_1.x;
    TEXCOORD_8.x = _735;
    TEXCOORD_8.y = _742;
    TEXCOORD_8.z = _749;
    TEXCOORD_8.w = _756;
    TEXCOORD_9.x = fma(_649, cbSceneParam._m0[29u].z, fma(_647, cbSceneParam._m0[29u].y, _645 * cbSceneParam._m0[29u].x)) + cbSceneParam._m0[29u].w;
    TEXCOORD_9.y = fma(_649, cbSceneParam._m0[30u].z, fma(_647, cbSceneParam._m0[30u].y, _645 * cbSceneParam._m0[30u].x)) + cbSceneParam._m0[30u].w;
    TEXCOORD_9.z = fma(_649, cbSceneParam._m0[31u].z, fma(_647, cbSceneParam._m0[31u].y, _645 * cbSceneParam._m0[31u].x)) + cbSceneParam._m0[31u].w;
    TEXCOORD_9.w = fma(_649, cbSceneParam._m0[32u].z, fma(_647, cbSceneParam._m0[32u].y, _645 * cbSceneParam._m0[32u].x)) + cbSceneParam._m0[32u].w;
    TEXCOORD_10.x = _315;
    TEXCOORD_10.y = _318;
    TEXCOORD_10.z = _321;
    gl_ClipDistance[0u] = dot(vec4(_735, _742, _749, _756), vec4(cbSceneParam._m0[4u]));
    gl_ClipDistance[1u] = dot(vec4(_735, _742, _749, _756), vec4(cbInstanceData._m0[_233 + 3u]));
}


