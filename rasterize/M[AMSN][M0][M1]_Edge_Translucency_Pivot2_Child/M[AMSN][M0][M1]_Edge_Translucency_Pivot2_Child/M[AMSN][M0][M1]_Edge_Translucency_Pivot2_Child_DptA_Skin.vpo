#version 460

out float gl_ClipDistance[2];

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[12];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 5, std140) uniform cbObjMatrixUBO
{
    vec4 _m0[6];
} cbObjMatrix;

layout(set = 0, binding = 10, std140) uniform cbInstanceIdxParamUBO
{
    vec4 _m0[1];
} cbInstanceIdxParam;

layout(set = 0, binding = 11, std140) uniform cbTexScrollUBO
{
    vec4 _m0[4];
} cbTexScroll;

layout(set = 0, binding = 26) uniform usamplerBuffer g_forceParam;
layout(set = 0, binding = 25) uniform usamplerBuffer g_InstanceIndexBuffer;

layout(location = 0) in vec3 POSITION;
layout(location = 1) in uvec4 NORMAL;
layout(location = 2) in uvec4 TANGENT;
layout(location = 3) in uvec4 BLENDINDICES;
layout(location = 4) in vec4 BLENDWEIGHT;
layout(location = 5) in vec4 COLOR_1;
layout(location = 6) in ivec2 TEXCOORD;
layout(location = 7) in vec4 TEXCOORD_1;
layout(location = 1) out vec4 NORMAL_1;
layout(location = 2) out vec4 TANGENT_1;
layout(location = 3) out float TEXCOORD_2;
layout(location = 3, component = 1) out float TEXCOORD_1_1;
layout(location = 4) out vec4 TEXCOORD_3;
layout(location = 3, component = 2) out vec2 TEXCOORD_7;
layout(location = 5) out float TEXCOORD_11;

uint _951;
uint _1074;

void main()
{
    uint _86 = uint(gl_InstanceIndex) - uint(gl_BaseInstance);
    gl_Position.x = 0.0;
    gl_Position.y = 0.0;
    gl_Position.z = 0.0;
    gl_Position.w = 0.0;
    NORMAL_1.x = 0.0;
    NORMAL_1.y = 0.0;
    NORMAL_1.z = 0.0;
    NORMAL_1.w = 0.0;
    TANGENT_1.x = 0.0;
    TANGENT_1.y = 0.0;
    TANGENT_1.z = 0.0;
    TANGENT_1.w = 0.0;
    TEXCOORD_2 = 0.0;
    TEXCOORD_1_1 = 0.0;
    TEXCOORD_3.x = 0.0;
    TEXCOORD_3.y = 0.0;
    TEXCOORD_3.z = 0.0;
    TEXCOORD_3.w = 0.0;
    TEXCOORD_7.x = 0.0;
    TEXCOORD_7.y = 0.0;
    TEXCOORD_11 = 0.0;
    gl_ClipDistance[0u] = 0.0;
    gl_ClipDistance[1u] = 0.0;
    float _189 = (float(NORMAL.x) + (-127.0)) * 0.0078740157186985015869140625;
    float _191 = (float(NORMAL.y) + (-127.0)) * 0.0078740157186985015869140625;
    float _192 = (float(NORMAL.z) + (-127.0)) * 0.0078740157186985015869140625;
    float _201 = (float(TANGENT.x) + (-127.0)) * 0.0078740157186985015869140625;
    float _202 = (float(TANGENT.y) + (-127.0)) * 0.0078740157186985015869140625;
    float _203 = (float(TANGENT.z) + (-127.0)) * 0.0078740157186985015869140625;
    uint _209 = _86 * 13u;
    uvec4 _215 = floatBitsToUint(cbInstanceData._m0[_209 + 7u]);
    uint _218 = min(_215.y, 8u);
    bool _221 = _218 == 0u;
    precise float _222 = POSITION.x + 0.0;
    precise float _223 = POSITION.y + 0.0;
    precise float _224 = POSITION.z + 0.0;
    uint _229 = floatBitsToUint(cbInstanceIdxParam._m0[0u]).x + _86;
    uvec4 _231 = texelFetch(g_InstanceIndexBuffer, int(_229));
    uint _232 = _231.x;
    precise float _233 = dot(vec4(1.0), vec4(BLENDWEIGHT.x, BLENDWEIGHT.y, BLENDWEIGHT.z, BLENDWEIGHT.w));
    float _237 = isnan(_233) ? 0.001000000047497451305389404296875 : (isnan(0.001000000047497451305389404296875) ? _233 : max(0.001000000047497451305389404296875, _233));
    precise float _239 = BLENDWEIGHT.x / _237;
    precise float _240 = BLENDWEIGHT.y / _237;
    precise float _241 = BLENDWEIGHT.z / _237;
    precise float _242 = BLENDWEIGHT.w / _237;
    uint _244 = _232 * 13u;
    uvec4 _248 = floatBitsToUint(cbInstanceData._m0[_244 + 4u]);
    uint _249 = _248.x;
    uint _251 = (_249 + uint(float(BLENDINDICES.x))) * 3u;
    uint _258 = _251 + 1u;
    uint _265 = _251 + 2u;
    precise float _272 = _239 * cbObjMatrix._m0[_251].x;
    precise float _273 = _239 * cbObjMatrix._m0[_258].x;
    precise float _274 = _239 * cbObjMatrix._m0[_265].x;
    precise float _275 = _239 * cbObjMatrix._m0[_251].y;
    precise float _276 = _239 * cbObjMatrix._m0[_258].y;
    precise float _277 = _239 * cbObjMatrix._m0[_265].y;
    precise float _278 = _239 * cbObjMatrix._m0[_251].z;
    precise float _279 = _239 * cbObjMatrix._m0[_258].z;
    precise float _280 = _239 * cbObjMatrix._m0[_265].z;
    precise float _281 = _239 * cbObjMatrix._m0[_251].w;
    precise float _282 = _239 * cbObjMatrix._m0[_258].w;
    precise float _283 = _239 * cbObjMatrix._m0[_265].w;
    uint _286 = (_249 + uint(float(BLENDINDICES.y))) * 3u;
    uint _293 = _286 + 1u;
    uint _300 = _286 + 2u;
    precise float _307 = _240 * cbObjMatrix._m0[_286].x;
    precise float _308 = _240 * cbObjMatrix._m0[_293].x;
    precise float _309 = _240 * cbObjMatrix._m0[_300].x;
    precise float _310 = _240 * cbObjMatrix._m0[_286].y;
    precise float _311 = _240 * cbObjMatrix._m0[_293].y;
    precise float _312 = _240 * cbObjMatrix._m0[_300].y;
    precise float _313 = _240 * cbObjMatrix._m0[_286].z;
    precise float _314 = _240 * cbObjMatrix._m0[_293].z;
    precise float _315 = _240 * cbObjMatrix._m0[_300].z;
    precise float _316 = _240 * cbObjMatrix._m0[_286].w;
    precise float _317 = _240 * cbObjMatrix._m0[_293].w;
    precise float _318 = _240 * cbObjMatrix._m0[_300].w;
    precise float _319 = _272 + _307;
    precise float _320 = _273 + _308;
    precise float _321 = _274 + _309;
    precise float _322 = _275 + _310;
    precise float _323 = _276 + _311;
    precise float _324 = _277 + _312;
    precise float _325 = _278 + _313;
    precise float _326 = _279 + _314;
    precise float _327 = _280 + _315;
    precise float _328 = _281 + _316;
    precise float _329 = _282 + _317;
    precise float _330 = _283 + _318;
    uint _333 = (_249 + uint(float(BLENDINDICES.z))) * 3u;
    uint _340 = _333 + 1u;
    uint _347 = _333 + 2u;
    precise float _354 = _241 * cbObjMatrix._m0[_333].x;
    precise float _355 = _241 * cbObjMatrix._m0[_340].x;
    precise float _356 = _241 * cbObjMatrix._m0[_347].x;
    precise float _357 = _241 * cbObjMatrix._m0[_333].y;
    precise float _358 = _241 * cbObjMatrix._m0[_340].y;
    precise float _359 = _241 * cbObjMatrix._m0[_347].y;
    precise float _360 = _241 * cbObjMatrix._m0[_333].z;
    precise float _361 = _241 * cbObjMatrix._m0[_340].z;
    precise float _362 = _241 * cbObjMatrix._m0[_347].z;
    precise float _363 = _241 * cbObjMatrix._m0[_333].w;
    precise float _364 = _241 * cbObjMatrix._m0[_340].w;
    precise float _365 = _241 * cbObjMatrix._m0[_347].w;
    precise float _366 = _319 + _354;
    precise float _367 = _320 + _355;
    precise float _368 = _321 + _356;
    precise float _369 = _322 + _357;
    precise float _370 = _323 + _358;
    precise float _371 = _324 + _359;
    precise float _372 = _325 + _360;
    precise float _373 = _326 + _361;
    precise float _374 = _327 + _362;
    precise float _375 = _328 + _363;
    precise float _376 = _329 + _364;
    precise float _377 = _330 + _365;
    uint _380 = (_249 + uint(float(BLENDINDICES.w))) * 3u;
    uint _387 = _380 + 1u;
    uint _394 = _380 + 2u;
    precise float _401 = _242 * cbObjMatrix._m0[_380].x;
    precise float _402 = _242 * cbObjMatrix._m0[_387].x;
    precise float _403 = _242 * cbObjMatrix._m0[_394].x;
    precise float _404 = _242 * cbObjMatrix._m0[_380].y;
    precise float _405 = _242 * cbObjMatrix._m0[_387].y;
    precise float _406 = _242 * cbObjMatrix._m0[_394].y;
    precise float _407 = _242 * cbObjMatrix._m0[_380].z;
    precise float _408 = _242 * cbObjMatrix._m0[_387].z;
    precise float _409 = _242 * cbObjMatrix._m0[_394].z;
    precise float _410 = _242 * cbObjMatrix._m0[_380].w;
    precise float _411 = _242 * cbObjMatrix._m0[_387].w;
    precise float _412 = _242 * cbObjMatrix._m0[_394].w;
    precise float _413 = _366 + _401;
    precise float _414 = _367 + _402;
    precise float _415 = _368 + _403;
    precise float _416 = _369 + _404;
    precise float _417 = _370 + _405;
    precise float _418 = _371 + _406;
    precise float _419 = _372 + _407;
    precise float _420 = _373 + _408;
    precise float _421 = _374 + _409;
    precise float _422 = _375 + _410;
    precise float _423 = _376 + _411;
    precise float _424 = _377 + _412;
    precise float _425 = _222 * _413;
    precise float _426 = _223 * _416;
    precise float _427 = _426 + _425;
    precise float _428 = _224 * _419;
    precise float _429 = _428 + _427;
    precise float _430 = 1.0 * _422;
    precise float _431 = _430 + _429;
    precise float _432 = _222 * _414;
    precise float _433 = _223 * _417;
    precise float _434 = _433 + _432;
    precise float _435 = _224 * _420;
    precise float _436 = _435 + _434;
    precise float _437 = 1.0 * _423;
    precise float _438 = _437 + _436;
    precise float _439 = _222 * _415;
    precise float _440 = _223 * _418;
    precise float _441 = _440 + _439;
    precise float _442 = _224 * _421;
    precise float _443 = _442 + _441;
    precise float _444 = 1.0 * _424;
    precise float _445 = _444 + _443;
    float _451 = cbSceneParam._m0[3u].x - _431;
    float _452 = cbSceneParam._m0[3u].y - _438;
    float _453 = cbSceneParam._m0[3u].z - _445;
    uint _485 = _209 + 1u;
    uint _492 = _209 + 2u;
    precise float _499 = TEXCOORD_1.x * cbInstanceData._m0[_209].x;
    precise float _500 = TEXCOORD_1.y * cbInstanceData._m0[_209].y;
    precise float _501 = _500 + _499;
    precise float _502 = TEXCOORD_1.z * cbInstanceData._m0[_209].z;
    precise float _503 = _502 + _501;
    precise float _504 = 1.0 * cbInstanceData._m0[_209].w;
    precise float _505 = _504 + _503;
    precise float _506 = TEXCOORD_1.x * cbInstanceData._m0[_485].x;
    precise float _507 = TEXCOORD_1.y * cbInstanceData._m0[_485].y;
    precise float _508 = _507 + _506;
    precise float _509 = TEXCOORD_1.z * cbInstanceData._m0[_485].z;
    precise float _510 = _509 + _508;
    precise float _511 = 1.0 * cbInstanceData._m0[_485].w;
    precise float _512 = _511 + _510;
    precise float _513 = TEXCOORD_1.x * cbInstanceData._m0[_492].x;
    precise float _514 = TEXCOORD_1.y * cbInstanceData._m0[_492].y;
    precise float _515 = _514 + _513;
    precise float _516 = TEXCOORD_1.z * cbInstanceData._m0[_492].z;
    precise float _517 = _516 + _515;
    precise float _518 = 1.0 * cbInstanceData._m0[_492].w;
    precise float _519 = _518 + _517;
    precise float _525 = _431 - _505;
    precise float _526 = _438 - _512;
    precise float _527 = _445 - _519;
    precise float _528 = _525 * _525;
    precise float _529 = _526 * _526;
    precise float _530 = _528 + _529;
    precise float _531 = _527 * _527;
    precise float _532 = _530 + _531;
    precise float _534 = cbMtdParam._m0[10u].z * sqrt(_532);
    precise float _539 = cbInstanceData._m0[_209].x * 0.0;
    precise float _540 = 0.0 * cbInstanceData._m0[_209].y;
    precise float _541 = _540 + _539;
    precise float _542 = 0.0 * cbInstanceData._m0[_209].z;
    precise float _543 = _542 + _541;
    precise float _544 = 1.0 * cbInstanceData._m0[_209].w;
    precise float _545 = _544 + _543;
    precise float _546 = cbInstanceData._m0[_485].x * 0.0;
    precise float _547 = 0.0 * cbInstanceData._m0[_485].y;
    precise float _548 = _547 + _546;
    precise float _549 = 0.0 * cbInstanceData._m0[_485].z;
    precise float _550 = _549 + _548;
    precise float _551 = 1.0 * cbInstanceData._m0[_485].w;
    precise float _552 = _551 + _550;
    precise float _553 = cbInstanceData._m0[_492].x * 0.0;
    precise float _554 = 0.0 * cbInstanceData._m0[_492].y;
    precise float _555 = _554 + _553;
    precise float _556 = 0.0 * cbInstanceData._m0[_492].z;
    precise float _557 = _556 + _555;
    precise float _558 = 1.0 * cbInstanceData._m0[_492].w;
    precise float _559 = _558 + _557;
    precise float _562 = _431 * _431;
    precise float _563 = _438 * _438;
    precise float _564 = _562 + _563;
    precise float _565 = _445 * _445;
    precise float _566 = _564 + _565;
    precise float _568 = cbMtdParam._m0[11u].x * sqrt(_566);
    precise float _569 = cbPerFrame._m0[22u].x + _568;
    uint _570 = _215.w;
    float _571;
    float _573;
    float _575;
    if (_221)
    {
        _571 = 0.0;
        _573 = 0.0;
        _575 = 0.0;
    }
    else
    {
        uint _695 = _215.z;
        precise float _572;
        precise float _574;
        precise float _576;
        float _1144;
        float _1146;
        float _1148;
        float _883 = 0.0;
        float _884 = 0.0;
        float _885 = 0.0;
        uint _886 = _695;
        uint _888 = 0u;
        float _924;
        float _943;
        vec4 _956;
        float _957;
        float _958;
        float _972;
        float _973;
        float _974;
        float _991;
        float _992;
        float _993;
        float _994;
        bool _995;
        bool _996;
        bool _997;
        precise float _998;
        precise float _999;
        precise float _1000;
        float _1001;
        float _1002;
        float _1003;
        precise float _1004;
        bool _1007;
        for (;;)
        {
            uint _890 = _886 & 255u;
            uint _892 = _890 * 24u;
            uvec3 _902 = uvec3(texelFetch(g_forceParam, int(_892)).x, texelFetch(g_forceParam, int(_892 + 1u)).x, texelFetch(g_forceParam, int(_892 + 2u)).x);
            uint _907 = (_890 * 24u) + 4u;
            vec4 _920 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_907)).x, texelFetch(g_forceParam, int(_907 + 1u)).x, texelFetch(g_forceParam, int(_907 + 2u)).x, texelFetch(g_forceParam, int(_907 + 3u)).x));
            _924 = _920.w;
            uint _926 = (_890 * 24u) + 8u;
            vec4 _939 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_926)).x, texelFetch(g_forceParam, int(_926 + 1u)).x, texelFetch(g_forceParam, int(_926 + 2u)).x, texelFetch(g_forceParam, int(_926 + 3u)).x));
            _943 = _939.w;
            uint _945 = (_890 * 24u) + 12u;
            _956 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_945)).x, texelFetch(g_forceParam, int(_945 + 1u)).x, _951, texelFetch(g_forceParam, int(_945 + 3u)).x));
            _957 = _956.x;
            _958 = _956.w;
            uint _961 = (_890 * 24u) + 16u;
            vec3 _971 = uintBitsToFloat(uvec3(texelFetch(g_forceParam, int(_961)).x, texelFetch(g_forceParam, int(_961 + 1u)).x, texelFetch(g_forceParam, int(_961 + 2u)).x));
            _972 = _971.x;
            _973 = _971.y;
            _974 = _971.z;
            uint _977 = (_890 * 24u) + 20u;
            vec4 _990 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_977)).x, texelFetch(g_forceParam, int(_977 + 1u)).x, texelFetch(g_forceParam, int(_977 + 2u)).x, texelFetch(g_forceParam, int(_977 + 3u)).x));
            _991 = _990.x;
            _992 = _990.y;
            _993 = _990.z;
            _994 = _990.w;
            _995 = _902.x == 1u;
            _996 = _902.y == 1u;
            _997 = _902.z == 1u;
            _998 = _545 - _920.x;
            _999 = _552 - _920.y;
            _1000 = _559 - _920.z;
            _1001 = _995 ? _939.x : _998;
            _1002 = _995 ? _939.y : _999;
            _1003 = _995 ? _939.z : _1000;
            _1004 = dot(vec3(_1001, _1002, _1003), vec3(_1001, _1002, _1003));
            _1007 = _1004 > 0.0;
            float frontier_phi_8_pred;
            float frontier_phi_8_pred_1;
            float frontier_phi_8_pred_2;
            if (_1007)
            {
                precise float _1130 = _998 * _998;
                precise float _1131 = _999 * _999;
                precise float _1132 = _1130 + _1131;
                precise float _1133 = _1000 * _1000;
                precise float _1134 = _1133 + _1132;
                float _1135 = sqrt(_1134);
                float _1136 = inversesqrt(_1004);
                precise float _1137 = _1001 * _1136;
                precise float _1138 = _1002 * _1136;
                precise float _1139 = _1003 * _1136;
                precise float _1141 = _1135 / (isnan(0.001000000047497451305389404296875) ? _956.y : (isnan(_956.y) ? 0.001000000047497451305389404296875 : max(_956.y, 0.001000000047497451305389404296875)));
                precise float _1142 = 1.0 - _1141;
                float _1472 = isnan(0.0) ? _1142 : (isnan(_1142) ? 0.0 : max(_1142, 0.0));
                float _1143 = isnan(1.0) ? _1472 : (isnan(_1472) ? 1.0 : min(_1472, 1.0));
                float _1193;
                if (_997)
                {
                    float _1180 = inversesqrt(dot(vec3(_998, _999, _1000), vec3(_998, _999, _1000)));
                    precise float _1181 = _998 * _1180;
                    precise float _1182 = _999 * _1180;
                    precise float _1183 = _1000 * _1180;
                    precise float _1187 = dot(vec3(_1137, _1138, _1139), vec3(_1181, _1182, _1183)) * 0.800000011920928955078125;
                    precise float _1189 = _1187 + 0.20000000298023223876953125;
                    float _1483 = isnan(0.0) ? _1189 : (isnan(_1189) ? 0.0 : max(_1189, 0.0));
                    precise float _1192 = _1143 * (isnan(1.0) ? _1483 : (isnan(_1483) ? 1.0 : min(_1483, 1.0)));
                    _1193 = _1192;
                }
                else
                {
                    _1193 = _1143;
                }
                float frontier_phi_8_pred_12_ladder;
                float frontier_phi_8_pred_12_ladder_1;
                float frontier_phi_8_pred_12_ladder_2;
                if (_1193 > 0.0)
                {
                    bool _1212 = _995 && (!_997);
                    precise float _1214 = _1135 * (-4.0);
                    precise float _1218 = 6.283184051513671875 / (isnan(0.001000000047497451305389404296875) ? _957 : (isnan(_957) ? 0.001000000047497451305389404296875 : max(_957, 0.001000000047497451305389404296875)));
                    precise float _1220 = dot(vec2(_1137, _1139), vec2(_998, _1000));
                    precise float _1223 = _1218 * _1220;
                    precise float _1224 = float(_1212) * _1223;
                    precise float _1225 = _569 * _1218;
                    precise float _1226 = _1225 - _1224;
                    precise float _1227 = (_1212 ? 0.0 : _1214) + _1226;
                    precise float _1229 = _943 * sin(_1227);
                    precise float _1230 = _1138 * 0.0;
                    precise float _1231 = _1230 - _1139;
                    precise float _1232 = _1139 * 0.0;
                    precise float _1233 = _1137 * 0.0;
                    precise float _1234 = _1232 - _1233;
                    precise float _1235 = _1137 - _1230;
                    precise float _1236 = _958 * _1229;
                    float _1237 = _995 ? _1236 : 0.0;
                    float _1306;
                    if (_996)
                    {
                        precise float _1266 = _972 * 2.0;
                        precise float _1268 = _992 + _993;
                        precise float _1269 = _994 + _1268;
                        precise float _1271 = 6.283184051513671875 / (isnan(0.001000000047497451305389404296875) ? _972 : (isnan(_972) ? 0.001000000047497451305389404296875 : max(_972, 0.001000000047497451305389404296875)));
                        precise float _1272 = _991 * _1271;
                        precise float _1273 = (-0.0) - _1137;
                        precise float _1278 = dot(vec2(_1139, _1273), vec2(_998, _1000)) / _1266;
                        precise float _1279 = (-0.0) - _1278;
                        float _1282 = fract(abs(_1278));
                        precise float _1283 = (-0.0) - _1282;
                        precise float _1285 = _1266 * ((_1278 >= _1279) ? _1282 : _1283);
                        precise float _1286 = _1285 * 6.283184051513671875;
                        precise float _1287 = _1286 / _1266;
                        precise float _1289 = (isnan(5.0) ? _972 : (isnan(_972) ? 5.0 : min(_972, 5.0))) * sin(_1287);
                        precise float _1290 = _1220 + _1289;
                        precise float _1291 = _972 * 0.25;
                        precise float _1293 = _569 * _991;
                        precise float _1294 = _1293 - _1291;
                        precise float _1295 = _1294 - _1290;
                        precise float _1296 = _991 * _1269;
                        precise float _1298 = _1295 / (isnan(0.001000000047497451305389404296875) ? _1296 : (isnan(_1296) ? 0.001000000047497451305389404296875 : max(_1296, 0.001000000047497451305389404296875)));
                        float _1299 = fract(_1298);
                        precise float _1301 = 1.0 - _1299;
                        float _1302 = (_1298 < 0.0) ? _1301 : _1299;
                        precise float _1303 = _1268 / _1269;
                        precise float _1304 = _992 / _1269;
                        float _1382;
                        if (_1302 < _1304)
                        {
                            precise float _1378 = _1302 / _1304;
                            _1382 = _1378;
                        }
                        else
                        {
                            float frontier_phi_27_24_ladder;
                            if (_1302 < _1303)
                            {
                                precise float _1392 = _1302 - _1304;
                                precise float _1393 = _1303 - _1304;
                                precise float _1394 = _1392 / _1393;
                                precise float _1383 = 1.0 - _1394;
                                frontier_phi_27_24_ladder = _1383;
                            }
                            else
                            {
                                frontier_phi_27_24_ladder = 0.0;
                            }
                            _1382 = frontier_phi_27_24_ladder;
                        }
                        precise float _1384 = _974 * _1382;
                        precise float _1385 = _1271 * _1220;
                        precise float _1386 = _569 * _1272;
                        precise float _1387 = _1386 - _1385;
                        precise float _1389 = _973 + sin(_1387);
                        precise float _1391 = _1384 * abs(_1389);
                        precise float _1307 = _1391 + 0.0;
                        _1306 = _1307;
                    }
                    else
                    {
                        _1306 = 0.0;
                    }
                    precise float _1308 = _924 + _1229;
                    precise float _1309 = _1308 + _1306;
                    precise float _1310 = _1137 * _1309;
                    precise float _1311 = _1138 * _1309;
                    precise float _1312 = _1139 * _1309;
                    precise float _1313 = _1231 * _1237;
                    precise float _1314 = _1234 * _1237;
                    precise float _1315 = _1235 * _1237;
                    precise float _1316 = _1313 + _1310;
                    precise float _1317 = _1314 + _1311;
                    precise float _1318 = _1315 + _1312;
                    precise float _1319 = _1193 * _1316;
                    precise float _1320 = _1193 * _1317;
                    precise float _1321 = _1193 * _1318;
                    precise float _1145 = _1319 * 0.0500000007450580596923828125;
                    precise float _1147 = _1320 * 0.0500000007450580596923828125;
                    precise float _1149 = _1321 * 0.0500000007450580596923828125;
                    frontier_phi_8_pred_12_ladder = _1145;
                    frontier_phi_8_pred_12_ladder_1 = _1147;
                    frontier_phi_8_pred_12_ladder_2 = _1149;
                }
                else
                {
                    frontier_phi_8_pred_12_ladder = 0.0;
                    frontier_phi_8_pred_12_ladder_1 = 0.0;
                    frontier_phi_8_pred_12_ladder_2 = 0.0;
                }
                frontier_phi_8_pred = frontier_phi_8_pred_12_ladder;
                frontier_phi_8_pred_1 = frontier_phi_8_pred_12_ladder_1;
                frontier_phi_8_pred_2 = frontier_phi_8_pred_12_ladder_2;
            }
            else
            {
                frontier_phi_8_pred = 0.0;
                frontier_phi_8_pred_1 = 0.0;
                frontier_phi_8_pred_2 = 0.0;
            }
            _1144 = frontier_phi_8_pred;
            _1146 = frontier_phi_8_pred_1;
            _1148 = frontier_phi_8_pred_2;
            _572 = _883 + _1144;
            _574 = _884 + _1146;
            _576 = _885 + _1148;
            uint _889 = _888 + 1u;
            if (_889 == _218)
            {
                break;
            }
            else
            {
                _883 = _572;
                _884 = _574;
                _885 = _576;
                _886 = (_888 != 3u) ? (_886 >> 8u) : _570;
                _888 = _889;
                continue;
            }
        }
        _571 = _572;
        _573 = _574;
        _575 = _576;
    }
    precise float _577 = _571 * _571;
    precise float _578 = _573 * _573;
    precise float _579 = _577 + _578;
    precise float _580 = _575 * _575;
    precise float _581 = _579 + _580;
    float _582 = sqrt(_581);
    bool _583 = _582 < 0.00011000000085914507508277893066406;
    float _588 = inversesqrt(dot(vec3(cbInstanceData._m0[_209].x, cbInstanceData._m0[_485].x, cbInstanceData._m0[_492].x), vec3(cbInstanceData._m0[_209].x, cbInstanceData._m0[_485].x, cbInstanceData._m0[_492].x)));
    precise float _589 = cbInstanceData._m0[_209].x * _588;
    precise float _590 = cbInstanceData._m0[_485].x * _588;
    precise float _591 = cbInstanceData._m0[_492].x * _588;
    float _595 = inversesqrt(dot(vec3(cbInstanceData._m0[_209].y, cbInstanceData._m0[_485].y, cbInstanceData._m0[_492].y), vec3(cbInstanceData._m0[_209].y, cbInstanceData._m0[_485].y, cbInstanceData._m0[_492].y)));
    precise float _596 = cbInstanceData._m0[_209].y * _595;
    precise float _597 = cbInstanceData._m0[_485].y * _595;
    precise float _598 = cbInstanceData._m0[_492].y * _595;
    float _602 = inversesqrt(dot(vec3(cbInstanceData._m0[_209].z, cbInstanceData._m0[_485].z, cbInstanceData._m0[_492].z), vec3(cbInstanceData._m0[_209].z, cbInstanceData._m0[_485].z, cbInstanceData._m0[_492].z)));
    precise float _603 = cbInstanceData._m0[_209].z * _602;
    precise float _604 = cbInstanceData._m0[_485].z * _602;
    precise float _605 = cbInstanceData._m0[_492].z * _602;
    precise float _606 = _589 * 0.0;
    precise float _607 = 1.0 * _596;
    precise float _608 = _607 + _606;
    precise float _609 = 0.0 * _603;
    precise float _610 = _609 + _608;
    precise float _611 = _590 * 0.0;
    precise float _612 = 1.0 * _597;
    precise float _613 = _612 + _611;
    precise float _614 = 0.0 * _604;
    precise float _615 = _614 + _613;
    precise float _616 = _591 * 0.0;
    precise float _617 = 1.0 * _598;
    precise float _618 = _617 + _616;
    precise float _619 = 0.0 * _605;
    precise float _620 = _619 + _618;
    float _624 = inversesqrt(dot(vec3(_571, _573, _575), vec3(_571, _573, _575)));
    precise float _625 = _571 * _624;
    precise float _626 = _573 * _624;
    precise float _627 = _575 * _624;
    precise float _628 = _615 * _627;
    precise float _629 = _620 * _626;
    precise float _630 = _628 - _629;
    precise float _631 = _620 * _625;
    precise float _632 = _610 * _627;
    precise float _633 = _631 - _632;
    precise float _634 = _610 * _626;
    precise float _635 = _615 * _625;
    precise float _636 = _634 - _635;
    float _640 = inversesqrt(dot(vec3(_630, _633, _636), vec3(_630, _633, _636)));
    precise float _641 = _640 * _630;
    precise float _642 = _640 * _633;
    precise float _643 = _640 * _636;
    precise float _644 = _582 + 1.0;
    precise float _646 = cbMtdParam._m0[10u].w * log2(_644);
    precise float _647 = _431 - _545;
    precise float _648 = _438 - _552;
    precise float _649 = _445 - _559;
    precise float _650 = dot(vec3(_641, _642, _643), vec3(_647, _648, _649));
    precise float _653 = _641 * _650;
    precise float _654 = _642 * _650;
    precise float _655 = _643 * _650;
    precise float _656 = _545 + _653;
    precise float _657 = _552 + _654;
    precise float _658 = _559 + _655;
    precise float _659 = _431 - _656;
    precise float _660 = _438 - _657;
    precise float _661 = _445 - _658;
    precise float _662 = _642 * _661;
    precise float _663 = _643 * _660;
    precise float _664 = _662 - _663;
    precise float _665 = _643 * _659;
    precise float _666 = _641 * _661;
    precise float _667 = _665 - _666;
    precise float _668 = _641 * _660;
    precise float _669 = _642 * _659;
    precise float _670 = _668 - _669;
    float _671 = sin(_646);
    float _672 = cos(_646);
    precise float _673 = _659 * _672;
    precise float _674 = _660 * _672;
    precise float _675 = _661 * _672;
    precise float _676 = _671 * _664;
    precise float _677 = _671 * _667;
    precise float _678 = _671 * _670;
    precise float _679 = _673 + _676;
    precise float _680 = _674 + _677;
    precise float _681 = _678 + _675;
    precise float _682 = _656 + _679;
    precise float _683 = _657 + _680;
    precise float _684 = _658 + _681;
    precise float _685 = _682 - _431;
    precise float _686 = _683 - _438;
    precise float _687 = _684 - _445;
    float _688 = _583 ? 0.0 : _685;
    float _689 = _583 ? 0.0 : _686;
    float _690 = _583 ? 0.0 : _687;
    precise float _691 = _431 + _688;
    precise float _692 = _438 + _689;
    precise float _693 = _445 + _690;
    precise float _694 = cbPerFrame._m0[22u].x + _534;
    float _696;
    float _698;
    float _700;
    if (_221)
    {
        _696 = 0.0;
        _698 = 0.0;
        _700 = 0.0;
    }
    else
    {
        uint _882 = _215.z;
        precise float _697;
        precise float _699;
        precise float _701;
        float _1168;
        float _1170;
        float _1172;
        float _1008 = 0.0;
        float _1009 = 0.0;
        float _1010 = 0.0;
        uint _1011 = _882;
        uint _1013 = 0u;
        float _1047;
        float _1066;
        vec4 _1079;
        float _1080;
        float _1081;
        float _1094;
        float _1095;
        float _1096;
        float _1112;
        float _1113;
        float _1114;
        float _1115;
        bool _1116;
        bool _1117;
        bool _1118;
        precise float _1119;
        precise float _1120;
        precise float _1121;
        float _1122;
        float _1123;
        float _1124;
        precise float _1125;
        bool _1128;
        for (;;)
        {
            uint _1015 = _1011 & 255u;
            uint _1016 = _1015 * 24u;
            uvec3 _1025 = uvec3(texelFetch(g_forceParam, int(_1016)).x, texelFetch(g_forceParam, int(_1016 + 1u)).x, texelFetch(g_forceParam, int(_1016 + 2u)).x);
            uint _1030 = (_1015 * 24u) + 4u;
            vec4 _1043 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_1030)).x, texelFetch(g_forceParam, int(_1030 + 1u)).x, texelFetch(g_forceParam, int(_1030 + 2u)).x, texelFetch(g_forceParam, int(_1030 + 3u)).x));
            _1047 = _1043.w;
            uint _1049 = (_1015 * 24u) + 8u;
            vec4 _1062 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_1049)).x, texelFetch(g_forceParam, int(_1049 + 1u)).x, texelFetch(g_forceParam, int(_1049 + 2u)).x, texelFetch(g_forceParam, int(_1049 + 3u)).x));
            _1066 = _1062.w;
            uint _1068 = (_1015 * 24u) + 12u;
            _1079 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_1068)).x, texelFetch(g_forceParam, int(_1068 + 1u)).x, _1074, texelFetch(g_forceParam, int(_1068 + 3u)).x));
            _1080 = _1079.x;
            _1081 = _1079.w;
            uint _1083 = (_1015 * 24u) + 16u;
            vec3 _1093 = uintBitsToFloat(uvec3(texelFetch(g_forceParam, int(_1083)).x, texelFetch(g_forceParam, int(_1083 + 1u)).x, texelFetch(g_forceParam, int(_1083 + 2u)).x));
            _1094 = _1093.x;
            _1095 = _1093.y;
            _1096 = _1093.z;
            uint _1098 = (_1015 * 24u) + 20u;
            vec4 _1111 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_1098)).x, texelFetch(g_forceParam, int(_1098 + 1u)).x, texelFetch(g_forceParam, int(_1098 + 2u)).x, texelFetch(g_forceParam, int(_1098 + 3u)).x));
            _1112 = _1111.x;
            _1113 = _1111.y;
            _1114 = _1111.z;
            _1115 = _1111.w;
            _1116 = _1025.x == 1u;
            _1117 = _1025.y == 1u;
            _1118 = _1025.z == 1u;
            _1119 = _505 - _1043.x;
            _1120 = _512 - _1043.y;
            _1121 = _519 - _1043.z;
            _1122 = _1116 ? _1062.x : _1119;
            _1123 = _1116 ? _1062.y : _1120;
            _1124 = _1116 ? _1062.z : _1121;
            _1125 = dot(vec3(_1122, _1123, _1124), vec3(_1122, _1123, _1124));
            _1128 = _1125 > 0.0;
            float frontier_phi_10_pred;
            float frontier_phi_10_pred_1;
            float frontier_phi_10_pred_2;
            if (_1128)
            {
                precise float _1154 = _1119 * _1119;
                precise float _1155 = _1120 * _1120;
                precise float _1156 = _1154 + _1155;
                precise float _1157 = _1121 * _1121;
                precise float _1158 = _1157 + _1156;
                float _1159 = sqrt(_1158);
                float _1160 = inversesqrt(_1125);
                precise float _1161 = _1122 * _1160;
                precise float _1162 = _1123 * _1160;
                precise float _1163 = _1124 * _1160;
                precise float _1165 = _1159 / (isnan(0.001000000047497451305389404296875) ? _1079.y : (isnan(_1079.y) ? 0.001000000047497451305389404296875 : max(_1079.y, 0.001000000047497451305389404296875)));
                precise float _1166 = 1.0 - _1165;
                float _1519 = isnan(0.0) ? _1166 : (isnan(_1166) ? 0.0 : max(_1166, 0.0));
                float _1167 = isnan(1.0) ? _1519 : (isnan(_1519) ? 1.0 : min(_1519, 1.0));
                float _1209;
                if (_1118)
                {
                    float _1198 = inversesqrt(dot(vec3(_1119, _1120, _1121), vec3(_1119, _1120, _1121)));
                    precise float _1199 = _1119 * _1198;
                    precise float _1200 = _1120 * _1198;
                    precise float _1201 = _1121 * _1198;
                    precise float _1205 = dot(vec3(_1161, _1162, _1163), vec3(_1199, _1200, _1201)) * 0.800000011920928955078125;
                    precise float _1206 = _1205 + 0.20000000298023223876953125;
                    float _1530 = isnan(0.0) ? _1206 : (isnan(_1206) ? 0.0 : max(_1206, 0.0));
                    precise float _1208 = _1167 * (isnan(1.0) ? _1530 : (isnan(_1530) ? 1.0 : min(_1530, 1.0)));
                    _1209 = _1208;
                }
                else
                {
                    _1209 = _1167;
                }
                float frontier_phi_10_pred_15_ladder;
                float frontier_phi_10_pred_15_ladder_1;
                float frontier_phi_10_pred_15_ladder_2;
                if (_1209 > 0.0)
                {
                    bool _1239 = _1116 && (!_1118);
                    precise float _1241 = _1159 * (-4.0);
                    precise float _1244 = 6.283184051513671875 / (isnan(0.001000000047497451305389404296875) ? _1080 : (isnan(_1080) ? 0.001000000047497451305389404296875 : max(_1080, 0.001000000047497451305389404296875)));
                    precise float _1245 = cbMtdParam._m0[11u].y * _1244;
                    precise float _1246 = dot(vec2(_1161, _1163), vec2(_1119, _1121));
                    precise float _1249 = _1246 * _1245;
                    precise float _1250 = float(_1239) * _1249;
                    precise float _1251 = _694 * _1245;
                    precise float _1252 = _1251 - _1250;
                    precise float _1253 = (_1239 ? 0.0 : _1241) + _1252;
                    precise float _1255 = _1066 * sin(_1253);
                    precise float _1256 = _1162 * 0.0;
                    precise float _1257 = _1256 - _1163;
                    precise float _1258 = _1163 * 0.0;
                    precise float _1259 = _1161 * 0.0;
                    precise float _1260 = _1258 - _1259;
                    precise float _1261 = _1161 - _1256;
                    precise float _1262 = _1081 * _1255;
                    float _1263 = _1116 ? _1262 : 0.0;
                    float _1362;
                    if (_1117)
                    {
                        precise float _1324 = _1094 * 2.0;
                        precise float _1325 = _1113 + _1114;
                        precise float _1326 = _1115 + _1325;
                        precise float _1328 = 6.283184051513671875 / (isnan(0.001000000047497451305389404296875) ? _1094 : (isnan(_1094) ? 0.001000000047497451305389404296875 : max(_1094, 0.001000000047497451305389404296875)));
                        precise float _1329 = cbMtdParam._m0[11u].y * _1328;
                        precise float _1330 = _1112 * _1329;
                        precise float _1331 = (-0.0) - _1161;
                        precise float _1335 = dot(vec2(_1163, _1331), vec2(_1119, _1121)) / _1324;
                        precise float _1336 = (-0.0) - _1335;
                        float _1339 = fract(abs(_1335));
                        precise float _1340 = (-0.0) - _1339;
                        precise float _1342 = _1324 * ((_1335 >= _1336) ? _1339 : _1340);
                        precise float _1343 = _1342 * 6.283184051513671875;
                        precise float _1344 = _1343 / _1324;
                        precise float _1346 = (isnan(5.0) ? _1094 : (isnan(_1094) ? 5.0 : min(_1094, 5.0))) * sin(_1344);
                        precise float _1347 = _1246 + _1346;
                        precise float _1348 = _1094 * 0.25;
                        precise float _1349 = _694 * _1112;
                        precise float _1350 = _1349 - _1348;
                        precise float _1351 = _1350 - _1347;
                        precise float _1352 = _1112 * _1326;
                        precise float _1354 = _1351 / (isnan(0.001000000047497451305389404296875) ? _1352 : (isnan(_1352) ? 0.001000000047497451305389404296875 : max(_1352, 0.001000000047497451305389404296875)));
                        float _1355 = fract(_1354);
                        precise float _1357 = 1.0 - _1355;
                        float _1358 = (_1354 < 0.0) ? _1357 : _1355;
                        precise float _1359 = _1325 / _1326;
                        precise float _1360 = _1113 / _1326;
                        float _1395;
                        if (_1358 < _1360)
                        {
                            precise float _1380 = _1358 / _1360;
                            _1395 = _1380;
                        }
                        else
                        {
                            float frontier_phi_29_26_ladder;
                            if (_1358 < _1359)
                            {
                                precise float _1405 = _1358 - _1360;
                                precise float _1406 = _1359 - _1360;
                                precise float _1407 = _1405 / _1406;
                                precise float _1396 = 1.0 - _1407;
                                frontier_phi_29_26_ladder = _1396;
                            }
                            else
                            {
                                frontier_phi_29_26_ladder = 0.0;
                            }
                            _1395 = frontier_phi_29_26_ladder;
                        }
                        precise float _1397 = _1096 * _1395;
                        precise float _1398 = _1329 * _1246;
                        precise float _1399 = _694 * _1330;
                        precise float _1400 = _1399 - _1398;
                        precise float _1402 = _1095 + sin(_1400);
                        precise float _1404 = _1397 * abs(_1402);
                        precise float _1363 = _1404 + 0.0;
                        _1362 = _1363;
                    }
                    else
                    {
                        _1362 = 0.0;
                    }
                    precise float _1364 = _1047 + _1255;
                    precise float _1365 = _1364 + _1362;
                    precise float _1366 = _1161 * _1365;
                    precise float _1367 = _1162 * _1365;
                    precise float _1368 = _1163 * _1365;
                    precise float _1369 = _1257 * _1263;
                    precise float _1370 = _1260 * _1263;
                    precise float _1371 = _1261 * _1263;
                    precise float _1372 = _1369 + _1366;
                    precise float _1373 = _1370 + _1367;
                    precise float _1374 = _1371 + _1368;
                    precise float _1375 = _1209 * _1372;
                    precise float _1376 = _1209 * _1373;
                    precise float _1377 = _1209 * _1374;
                    precise float _1169 = _1375 * 0.0500000007450580596923828125;
                    precise float _1171 = _1376 * 0.0500000007450580596923828125;
                    precise float _1173 = _1377 * 0.0500000007450580596923828125;
                    frontier_phi_10_pred_15_ladder = _1169;
                    frontier_phi_10_pred_15_ladder_1 = _1171;
                    frontier_phi_10_pred_15_ladder_2 = _1173;
                }
                else
                {
                    frontier_phi_10_pred_15_ladder = 0.0;
                    frontier_phi_10_pred_15_ladder_1 = 0.0;
                    frontier_phi_10_pred_15_ladder_2 = 0.0;
                }
                frontier_phi_10_pred = frontier_phi_10_pred_15_ladder;
                frontier_phi_10_pred_1 = frontier_phi_10_pred_15_ladder_1;
                frontier_phi_10_pred_2 = frontier_phi_10_pred_15_ladder_2;
            }
            else
            {
                frontier_phi_10_pred = 0.0;
                frontier_phi_10_pred_1 = 0.0;
                frontier_phi_10_pred_2 = 0.0;
            }
            _1168 = frontier_phi_10_pred;
            _1170 = frontier_phi_10_pred_1;
            _1172 = frontier_phi_10_pred_2;
            _697 = _1008 + _1168;
            _699 = _1009 + _1170;
            _701 = _1010 + _1172;
            uint _1014 = _1013 + 1u;
            if (_1014 == _218)
            {
                break;
            }
            else
            {
                _1008 = _697;
                _1009 = _699;
                _1010 = _701;
                _1011 = (_1013 != 3u) ? (_1011 >> 8u) : _570;
                _1013 = _1014;
                continue;
            }
        }
        _696 = _697;
        _698 = _699;
        _700 = _701;
    }
    precise float _702 = _696 * _696;
    precise float _703 = _698 * _698;
    precise float _704 = _702 + _703;
    precise float _705 = _700 * _700;
    precise float _706 = _704 + _705;
    float _707 = sqrt(_706);
    bool _708 = _707 < 0.00011000000085914507508277893066406;
    float _712 = inversesqrt(dot(vec3(_696, _698, _700), vec3(_696, _698, _700)));
    precise float _713 = _696 * _712;
    precise float _714 = _698 * _712;
    precise float _715 = _700 * _712;
    precise float _716 = _615 * _715;
    precise float _717 = _620 * _714;
    precise float _718 = _716 - _717;
    precise float _719 = _620 * _713;
    precise float _720 = _610 * _715;
    precise float _721 = _719 - _720;
    precise float _722 = _610 * _714;
    precise float _723 = _615 * _713;
    precise float _724 = _722 - _723;
    float _728 = inversesqrt(dot(vec3(_718, _721, _724), vec3(_718, _721, _724)));
    precise float _729 = _728 * _718;
    precise float _730 = _728 * _721;
    precise float _731 = _728 * _724;
    precise float _732 = _707 + 1.0;
    precise float _734 = cbMtdParam._m0[10u].y * log2(_732);
    precise float _735 = _691 - _505;
    precise float _736 = _692 - _512;
    precise float _737 = _693 - _519;
    precise float _738 = dot(vec3(_729, _730, _731), vec3(_735, _736, _737));
    precise float _741 = _729 * _738;
    precise float _742 = _730 * _738;
    precise float _743 = _731 * _738;
    precise float _744 = _505 + _741;
    precise float _745 = _512 + _742;
    precise float _746 = _519 + _743;
    precise float _747 = _691 - _744;
    precise float _748 = _692 - _745;
    precise float _749 = _693 - _746;
    precise float _750 = _730 * _749;
    precise float _751 = _731 * _748;
    precise float _752 = _750 - _751;
    precise float _753 = _731 * _747;
    precise float _754 = _729 * _749;
    precise float _755 = _753 - _754;
    precise float _756 = _729 * _748;
    precise float _757 = _730 * _747;
    precise float _758 = _756 - _757;
    float _759 = sin(_734);
    float _760 = cos(_734);
    precise float _761 = _747 * _760;
    precise float _762 = _748 * _760;
    precise float _763 = _749 * _760;
    precise float _764 = _759 * _752;
    precise float _765 = _759 * _755;
    precise float _766 = _759 * _758;
    precise float _767 = _761 + _764;
    precise float _768 = _762 + _765;
    precise float _769 = _766 + _763;
    precise float _770 = _744 + _767;
    precise float _771 = _745 + _768;
    precise float _772 = _746 + _769;
    precise float _773 = _770 - _691;
    precise float _774 = _771 - _692;
    precise float _775 = _772 - _693;
    precise float _779 = _688 + (_708 ? 0.0 : _773);
    precise float _780 = _689 + (_708 ? 0.0 : _774);
    precise float _781 = _690 + (_708 ? 0.0 : _775);
    precise float _782 = _431 + _779;
    precise float _783 = _438 + _780;
    precise float _784 = _445 + _781;
    precise float _785 = _782 - cbSceneParam._m0[3u].x;
    precise float _786 = _783 - cbSceneParam._m0[3u].y;
    precise float _787 = _784 - cbSceneParam._m0[3u].z;
    precise float _815 = cbSceneParam._m0[24u].x * _785;
    precise float _816 = _786 * cbSceneParam._m0[24u].y;
    precise float _817 = _816 + _815;
    precise float _818 = _787 * cbSceneParam._m0[24u].z;
    precise float _819 = _818 + _817;
    precise float _820 = 1.0 * cbSceneParam._m0[24u].w;
    precise float _821 = _820 + _819;
    precise float _822 = cbSceneParam._m0[25u].x * _785;
    precise float _823 = _786 * cbSceneParam._m0[25u].y;
    precise float _824 = _823 + _822;
    precise float _825 = _787 * cbSceneParam._m0[25u].z;
    precise float _826 = _825 + _824;
    precise float _827 = 1.0 * cbSceneParam._m0[25u].w;
    precise float _828 = _827 + _826;
    precise float _829 = cbSceneParam._m0[26u].x * _785;
    precise float _830 = _786 * cbSceneParam._m0[26u].y;
    precise float _831 = _830 + _829;
    precise float _832 = _787 * cbSceneParam._m0[26u].z;
    precise float _833 = _832 + _831;
    precise float _834 = 1.0 * cbSceneParam._m0[26u].w;
    precise float _835 = _834 + _833;
    precise float _836 = cbSceneParam._m0[27u].x * _785;
    precise float _837 = _786 * cbSceneParam._m0[27u].y;
    precise float _838 = _837 + _836;
    precise float _839 = _787 * cbSceneParam._m0[27u].z;
    precise float _840 = _839 + _838;
    precise float _841 = 1.0 * cbSceneParam._m0[27u].w;
    precise float _842 = _841 + _840;
    gl_Position.x = _821;
    gl_Position.y = _828;
    gl_Position.z = _835;
    gl_Position.w = _842;
    NORMAL_1.x = fma(_192, _419, fma(_191, _416, _413 * _189));
    NORMAL_1.y = fma(_192, _420, fma(_191, _417, _414 * _189));
    NORMAL_1.z = fma(_192, _421, fma(_191, _418, _415 * _189));
    NORMAL_1.w = float(_232);
    TANGENT_1.x = fma(_203, _419, fma(_202, _416, _413 * _201));
    TANGENT_1.y = fma(_203, _420, fma(_202, _417, _414 * _201));
    TANGENT_1.z = fma(_203, _421, fma(_202, _418, _415 * _201));
    TANGENT_1.w = (float(TANGENT.w) + (-127.0)) * 0.0078740157186985015869140625;
    TEXCOORD_2 = ((float(int(uint(TEXCOORD.x))) * 0.00048828125) * cbTexScroll._m0[0u].x) + cbTexScroll._m0[0u].z;
    TEXCOORD_1_1 = ((float(int(uint(TEXCOORD.y))) * 0.00048828125) * cbTexScroll._m0[0u].y) + cbTexScroll._m0[0u].w;
    TEXCOORD_3.x = TEXCOORD_1.x;
    TEXCOORD_3.y = TEXCOORD_1.y;
    TEXCOORD_3.z = TEXCOORD_1.z;
    TEXCOORD_3.w = COLOR_1.x;
    TEXCOORD_7.x = _835;
    TEXCOORD_7.y = _842;
    TEXCOORD_11 = sqrt(((_451 * _451) + (_452 * _452)) + (_453 * _453));
    gl_ClipDistance[0u] = dot(vec4(_821, _828, _835, _842), vec4(cbSceneParam._m0[4u]));
    gl_ClipDistance[1u] = dot(vec4(_821, _828, _835, _842), vec4(cbInstanceData._m0[_244 + 3u]));
}


