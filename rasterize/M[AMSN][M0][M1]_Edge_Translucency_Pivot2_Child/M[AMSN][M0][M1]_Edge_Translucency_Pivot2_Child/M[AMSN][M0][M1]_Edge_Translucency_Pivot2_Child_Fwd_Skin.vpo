#version 460

out float gl_ClipDistance[2];

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[12];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 5, std140) uniform cbObjMatrixUBO
{
    vec4 _m0[6];
} cbObjMatrix;

layout(set = 0, binding = 10, std140) uniform cbInstanceIdxParamUBO
{
    vec4 _m0[1];
} cbInstanceIdxParam;

layout(set = 0, binding = 11, std140) uniform cbTexScrollUBO
{
    vec4 _m0[4];
} cbTexScroll;

layout(set = 0, binding = 26) uniform usamplerBuffer g_forceParam;
layout(set = 0, binding = 25) uniform usamplerBuffer g_InstanceIndexBuffer;

layout(location = 0) in vec3 POSITION;
layout(location = 1) in uvec4 NORMAL;
layout(location = 2) in uvec4 TANGENT;
layout(location = 3) in uvec4 BLENDINDICES;
layout(location = 4) in vec4 BLENDWEIGHT;
layout(location = 5) in vec4 COLOR_1;
layout(location = 6) in ivec2 TEXCOORD;
layout(location = 7) in vec4 TEXCOORD_1;
layout(location = 1) out vec4 POSITION_1;
layout(location = 2) out vec4 NORMAL_1;
layout(location = 3) out vec4 TANGENT_1;
layout(location = 4) out float TEXCOORD_2;
layout(location = 4, component = 1) out float TEXCOORD_1_1;
layout(location = 5) out vec4 TEXCOORD_3;

uint _943;
uint _1066;

void main()
{
    uint _83 = uint(gl_InstanceIndex) - uint(gl_BaseInstance);
    gl_Position.x = 0.0;
    gl_Position.y = 0.0;
    gl_Position.z = 0.0;
    gl_Position.w = 0.0;
    POSITION_1.x = 0.0;
    POSITION_1.y = 0.0;
    POSITION_1.z = 0.0;
    POSITION_1.w = 0.0;
    NORMAL_1.x = 0.0;
    NORMAL_1.y = 0.0;
    NORMAL_1.z = 0.0;
    NORMAL_1.w = 0.0;
    TANGENT_1.x = 0.0;
    TANGENT_1.y = 0.0;
    TANGENT_1.z = 0.0;
    TANGENT_1.w = 0.0;
    TEXCOORD_2 = 0.0;
    TEXCOORD_1_1 = 0.0;
    TEXCOORD_3.x = 0.0;
    TEXCOORD_3.y = 0.0;
    TEXCOORD_3.z = 0.0;
    TEXCOORD_3.w = 0.0;
    gl_ClipDistance[0u] = 0.0;
    gl_ClipDistance[1u] = 0.0;
    float _188 = (float(NORMAL.x) + (-127.0)) * 0.0078740157186985015869140625;
    float _190 = (float(NORMAL.y) + (-127.0)) * 0.0078740157186985015869140625;
    float _191 = (float(NORMAL.z) + (-127.0)) * 0.0078740157186985015869140625;
    float _200 = (float(TANGENT.x) + (-127.0)) * 0.0078740157186985015869140625;
    float _201 = (float(TANGENT.y) + (-127.0)) * 0.0078740157186985015869140625;
    float _202 = (float(TANGENT.z) + (-127.0)) * 0.0078740157186985015869140625;
    uint _208 = _83 * 13u;
    uvec4 _214 = floatBitsToUint(cbInstanceData._m0[_208 + 7u]);
    uint _217 = min(_214.y, 8u);
    bool _220 = _217 == 0u;
    precise float _221 = POSITION.x + 0.0;
    precise float _222 = POSITION.y + 0.0;
    precise float _223 = POSITION.z + 0.0;
    uint _228 = floatBitsToUint(cbInstanceIdxParam._m0[0u]).x + _83;
    uvec4 _230 = texelFetch(g_InstanceIndexBuffer, int(_228));
    uint _231 = _230.x;
    precise float _232 = dot(vec4(1.0), vec4(BLENDWEIGHT.x, BLENDWEIGHT.y, BLENDWEIGHT.z, BLENDWEIGHT.w));
    float _236 = isnan(_232) ? 0.001000000047497451305389404296875 : (isnan(0.001000000047497451305389404296875) ? _232 : max(0.001000000047497451305389404296875, _232));
    precise float _238 = BLENDWEIGHT.x / _236;
    precise float _239 = BLENDWEIGHT.y / _236;
    precise float _240 = BLENDWEIGHT.z / _236;
    precise float _241 = BLENDWEIGHT.w / _236;
    uint _243 = _231 * 13u;
    uvec4 _247 = floatBitsToUint(cbInstanceData._m0[_243 + 4u]);
    uint _248 = _247.x;
    uint _250 = (_248 + uint(float(BLENDINDICES.x))) * 3u;
    uint _257 = _250 + 1u;
    uint _264 = _250 + 2u;
    precise float _271 = _238 * cbObjMatrix._m0[_250].x;
    precise float _272 = _238 * cbObjMatrix._m0[_257].x;
    precise float _273 = _238 * cbObjMatrix._m0[_264].x;
    precise float _274 = _238 * cbObjMatrix._m0[_250].y;
    precise float _275 = _238 * cbObjMatrix._m0[_257].y;
    precise float _276 = _238 * cbObjMatrix._m0[_264].y;
    precise float _277 = _238 * cbObjMatrix._m0[_250].z;
    precise float _278 = _238 * cbObjMatrix._m0[_257].z;
    precise float _279 = _238 * cbObjMatrix._m0[_264].z;
    precise float _280 = _238 * cbObjMatrix._m0[_250].w;
    precise float _281 = _238 * cbObjMatrix._m0[_257].w;
    precise float _282 = _238 * cbObjMatrix._m0[_264].w;
    uint _285 = (_248 + uint(float(BLENDINDICES.y))) * 3u;
    uint _292 = _285 + 1u;
    uint _299 = _285 + 2u;
    precise float _306 = _239 * cbObjMatrix._m0[_285].x;
    precise float _307 = _239 * cbObjMatrix._m0[_292].x;
    precise float _308 = _239 * cbObjMatrix._m0[_299].x;
    precise float _309 = _239 * cbObjMatrix._m0[_285].y;
    precise float _310 = _239 * cbObjMatrix._m0[_292].y;
    precise float _311 = _239 * cbObjMatrix._m0[_299].y;
    precise float _312 = _239 * cbObjMatrix._m0[_285].z;
    precise float _313 = _239 * cbObjMatrix._m0[_292].z;
    precise float _314 = _239 * cbObjMatrix._m0[_299].z;
    precise float _315 = _239 * cbObjMatrix._m0[_285].w;
    precise float _316 = _239 * cbObjMatrix._m0[_292].w;
    precise float _317 = _239 * cbObjMatrix._m0[_299].w;
    precise float _318 = _271 + _306;
    precise float _319 = _272 + _307;
    precise float _320 = _273 + _308;
    precise float _321 = _274 + _309;
    precise float _322 = _275 + _310;
    precise float _323 = _276 + _311;
    precise float _324 = _277 + _312;
    precise float _325 = _278 + _313;
    precise float _326 = _279 + _314;
    precise float _327 = _280 + _315;
    precise float _328 = _281 + _316;
    precise float _329 = _282 + _317;
    uint _332 = (_248 + uint(float(BLENDINDICES.z))) * 3u;
    uint _339 = _332 + 1u;
    uint _346 = _332 + 2u;
    precise float _353 = _240 * cbObjMatrix._m0[_332].x;
    precise float _354 = _240 * cbObjMatrix._m0[_339].x;
    precise float _355 = _240 * cbObjMatrix._m0[_346].x;
    precise float _356 = _240 * cbObjMatrix._m0[_332].y;
    precise float _357 = _240 * cbObjMatrix._m0[_339].y;
    precise float _358 = _240 * cbObjMatrix._m0[_346].y;
    precise float _359 = _240 * cbObjMatrix._m0[_332].z;
    precise float _360 = _240 * cbObjMatrix._m0[_339].z;
    precise float _361 = _240 * cbObjMatrix._m0[_346].z;
    precise float _362 = _240 * cbObjMatrix._m0[_332].w;
    precise float _363 = _240 * cbObjMatrix._m0[_339].w;
    precise float _364 = _240 * cbObjMatrix._m0[_346].w;
    precise float _365 = _318 + _353;
    precise float _366 = _319 + _354;
    precise float _367 = _320 + _355;
    precise float _368 = _321 + _356;
    precise float _369 = _322 + _357;
    precise float _370 = _323 + _358;
    precise float _371 = _324 + _359;
    precise float _372 = _325 + _360;
    precise float _373 = _326 + _361;
    precise float _374 = _327 + _362;
    precise float _375 = _328 + _363;
    precise float _376 = _329 + _364;
    uint _379 = (_248 + uint(float(BLENDINDICES.w))) * 3u;
    uint _386 = _379 + 1u;
    uint _393 = _379 + 2u;
    precise float _400 = _241 * cbObjMatrix._m0[_379].x;
    precise float _401 = _241 * cbObjMatrix._m0[_386].x;
    precise float _402 = _241 * cbObjMatrix._m0[_393].x;
    precise float _403 = _241 * cbObjMatrix._m0[_379].y;
    precise float _404 = _241 * cbObjMatrix._m0[_386].y;
    precise float _405 = _241 * cbObjMatrix._m0[_393].y;
    precise float _406 = _241 * cbObjMatrix._m0[_379].z;
    precise float _407 = _241 * cbObjMatrix._m0[_386].z;
    precise float _408 = _241 * cbObjMatrix._m0[_393].z;
    precise float _409 = _241 * cbObjMatrix._m0[_379].w;
    precise float _410 = _241 * cbObjMatrix._m0[_386].w;
    precise float _411 = _241 * cbObjMatrix._m0[_393].w;
    precise float _412 = _365 + _400;
    precise float _413 = _366 + _401;
    precise float _414 = _367 + _402;
    precise float _415 = _368 + _403;
    precise float _416 = _369 + _404;
    precise float _417 = _370 + _405;
    precise float _418 = _371 + _406;
    precise float _419 = _372 + _407;
    precise float _420 = _373 + _408;
    precise float _421 = _374 + _409;
    precise float _422 = _375 + _410;
    precise float _423 = _376 + _411;
    precise float _424 = _221 * _412;
    precise float _425 = _222 * _415;
    precise float _426 = _425 + _424;
    precise float _427 = _223 * _418;
    precise float _428 = _427 + _426;
    precise float _429 = 1.0 * _421;
    precise float _430 = _429 + _428;
    precise float _431 = _221 * _413;
    precise float _432 = _222 * _416;
    precise float _433 = _432 + _431;
    precise float _434 = _223 * _419;
    precise float _435 = _434 + _433;
    precise float _436 = 1.0 * _422;
    precise float _437 = _436 + _435;
    precise float _438 = _221 * _414;
    precise float _439 = _222 * _417;
    precise float _440 = _439 + _438;
    precise float _441 = _223 * _420;
    precise float _442 = _441 + _440;
    precise float _443 = 1.0 * _423;
    precise float _444 = _443 + _442;
    uint _470 = _208 + 1u;
    uint _477 = _208 + 2u;
    precise float _484 = TEXCOORD_1.x * cbInstanceData._m0[_208].x;
    precise float _485 = TEXCOORD_1.y * cbInstanceData._m0[_208].y;
    precise float _486 = _485 + _484;
    precise float _487 = TEXCOORD_1.z * cbInstanceData._m0[_208].z;
    precise float _488 = _487 + _486;
    precise float _489 = 1.0 * cbInstanceData._m0[_208].w;
    precise float _490 = _489 + _488;
    precise float _491 = TEXCOORD_1.x * cbInstanceData._m0[_470].x;
    precise float _492 = TEXCOORD_1.y * cbInstanceData._m0[_470].y;
    precise float _493 = _492 + _491;
    precise float _494 = TEXCOORD_1.z * cbInstanceData._m0[_470].z;
    precise float _495 = _494 + _493;
    precise float _496 = 1.0 * cbInstanceData._m0[_470].w;
    precise float _497 = _496 + _495;
    precise float _498 = TEXCOORD_1.x * cbInstanceData._m0[_477].x;
    precise float _499 = TEXCOORD_1.y * cbInstanceData._m0[_477].y;
    precise float _500 = _499 + _498;
    precise float _501 = TEXCOORD_1.z * cbInstanceData._m0[_477].z;
    precise float _502 = _501 + _500;
    precise float _503 = 1.0 * cbInstanceData._m0[_477].w;
    precise float _504 = _503 + _502;
    precise float _510 = _430 - _490;
    precise float _511 = _437 - _497;
    precise float _512 = _444 - _504;
    precise float _513 = _510 * _510;
    precise float _514 = _511 * _511;
    precise float _515 = _513 + _514;
    precise float _516 = _512 * _512;
    precise float _517 = _515 + _516;
    precise float _519 = cbMtdParam._m0[10u].z * sqrt(_517);
    precise float _524 = cbInstanceData._m0[_208].x * 0.0;
    precise float _525 = 0.0 * cbInstanceData._m0[_208].y;
    precise float _526 = _525 + _524;
    precise float _527 = 0.0 * cbInstanceData._m0[_208].z;
    precise float _528 = _527 + _526;
    precise float _529 = 1.0 * cbInstanceData._m0[_208].w;
    precise float _530 = _529 + _528;
    precise float _531 = cbInstanceData._m0[_470].x * 0.0;
    precise float _532 = 0.0 * cbInstanceData._m0[_470].y;
    precise float _533 = _532 + _531;
    precise float _534 = 0.0 * cbInstanceData._m0[_470].z;
    precise float _535 = _534 + _533;
    precise float _536 = 1.0 * cbInstanceData._m0[_470].w;
    precise float _537 = _536 + _535;
    precise float _538 = cbInstanceData._m0[_477].x * 0.0;
    precise float _539 = 0.0 * cbInstanceData._m0[_477].y;
    precise float _540 = _539 + _538;
    precise float _541 = 0.0 * cbInstanceData._m0[_477].z;
    precise float _542 = _541 + _540;
    precise float _543 = 1.0 * cbInstanceData._m0[_477].w;
    precise float _544 = _543 + _542;
    precise float _547 = _430 * _430;
    precise float _548 = _437 * _437;
    precise float _549 = _547 + _548;
    precise float _550 = _444 * _444;
    precise float _551 = _549 + _550;
    precise float _553 = cbMtdParam._m0[11u].x * sqrt(_551);
    precise float _554 = cbPerFrame._m0[22u].x + _553;
    uint _555 = _214.w;
    float _556;
    float _558;
    float _560;
    if (_220)
    {
        _556 = 0.0;
        _558 = 0.0;
        _560 = 0.0;
    }
    else
    {
        uint _680 = _214.z;
        precise float _557;
        precise float _559;
        precise float _561;
        float _1136;
        float _1138;
        float _1140;
        float _875 = 0.0;
        float _876 = 0.0;
        float _877 = 0.0;
        uint _878 = _680;
        uint _880 = 0u;
        float _916;
        float _935;
        vec4 _948;
        float _949;
        float _950;
        float _964;
        float _965;
        float _966;
        float _983;
        float _984;
        float _985;
        float _986;
        bool _987;
        bool _988;
        bool _989;
        precise float _990;
        precise float _991;
        precise float _992;
        float _993;
        float _994;
        float _995;
        precise float _996;
        bool _999;
        for (;;)
        {
            uint _882 = _878 & 255u;
            uint _884 = _882 * 24u;
            uvec3 _894 = uvec3(texelFetch(g_forceParam, int(_884)).x, texelFetch(g_forceParam, int(_884 + 1u)).x, texelFetch(g_forceParam, int(_884 + 2u)).x);
            uint _899 = (_882 * 24u) + 4u;
            vec4 _912 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_899)).x, texelFetch(g_forceParam, int(_899 + 1u)).x, texelFetch(g_forceParam, int(_899 + 2u)).x, texelFetch(g_forceParam, int(_899 + 3u)).x));
            _916 = _912.w;
            uint _918 = (_882 * 24u) + 8u;
            vec4 _931 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_918)).x, texelFetch(g_forceParam, int(_918 + 1u)).x, texelFetch(g_forceParam, int(_918 + 2u)).x, texelFetch(g_forceParam, int(_918 + 3u)).x));
            _935 = _931.w;
            uint _937 = (_882 * 24u) + 12u;
            _948 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_937)).x, texelFetch(g_forceParam, int(_937 + 1u)).x, _943, texelFetch(g_forceParam, int(_937 + 3u)).x));
            _949 = _948.x;
            _950 = _948.w;
            uint _953 = (_882 * 24u) + 16u;
            vec3 _963 = uintBitsToFloat(uvec3(texelFetch(g_forceParam, int(_953)).x, texelFetch(g_forceParam, int(_953 + 1u)).x, texelFetch(g_forceParam, int(_953 + 2u)).x));
            _964 = _963.x;
            _965 = _963.y;
            _966 = _963.z;
            uint _969 = (_882 * 24u) + 20u;
            vec4 _982 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_969)).x, texelFetch(g_forceParam, int(_969 + 1u)).x, texelFetch(g_forceParam, int(_969 + 2u)).x, texelFetch(g_forceParam, int(_969 + 3u)).x));
            _983 = _982.x;
            _984 = _982.y;
            _985 = _982.z;
            _986 = _982.w;
            _987 = _894.x == 1u;
            _988 = _894.y == 1u;
            _989 = _894.z == 1u;
            _990 = _530 - _912.x;
            _991 = _537 - _912.y;
            _992 = _544 - _912.z;
            _993 = _987 ? _931.x : _990;
            _994 = _987 ? _931.y : _991;
            _995 = _987 ? _931.z : _992;
            _996 = dot(vec3(_993, _994, _995), vec3(_993, _994, _995));
            _999 = _996 > 0.0;
            float frontier_phi_8_pred;
            float frontier_phi_8_pred_1;
            float frontier_phi_8_pred_2;
            if (_999)
            {
                precise float _1122 = _990 * _990;
                precise float _1123 = _991 * _991;
                precise float _1124 = _1122 + _1123;
                precise float _1125 = _992 * _992;
                precise float _1126 = _1125 + _1124;
                float _1127 = sqrt(_1126);
                float _1128 = inversesqrt(_996);
                precise float _1129 = _993 * _1128;
                precise float _1130 = _994 * _1128;
                precise float _1131 = _995 * _1128;
                precise float _1133 = _1127 / (isnan(0.001000000047497451305389404296875) ? _948.y : (isnan(_948.y) ? 0.001000000047497451305389404296875 : max(_948.y, 0.001000000047497451305389404296875)));
                precise float _1134 = 1.0 - _1133;
                float _1465 = isnan(0.0) ? _1134 : (isnan(_1134) ? 0.0 : max(_1134, 0.0));
                float _1135 = isnan(1.0) ? _1465 : (isnan(_1465) ? 1.0 : min(_1465, 1.0));
                float _1185;
                if (_989)
                {
                    float _1172 = inversesqrt(dot(vec3(_990, _991, _992), vec3(_990, _991, _992)));
                    precise float _1173 = _990 * _1172;
                    precise float _1174 = _991 * _1172;
                    precise float _1175 = _992 * _1172;
                    precise float _1179 = dot(vec3(_1129, _1130, _1131), vec3(_1173, _1174, _1175)) * 0.800000011920928955078125;
                    precise float _1181 = _1179 + 0.20000000298023223876953125;
                    float _1476 = isnan(0.0) ? _1181 : (isnan(_1181) ? 0.0 : max(_1181, 0.0));
                    precise float _1184 = _1135 * (isnan(1.0) ? _1476 : (isnan(_1476) ? 1.0 : min(_1476, 1.0)));
                    _1185 = _1184;
                }
                else
                {
                    _1185 = _1135;
                }
                float frontier_phi_8_pred_12_ladder;
                float frontier_phi_8_pred_12_ladder_1;
                float frontier_phi_8_pred_12_ladder_2;
                if (_1185 > 0.0)
                {
                    bool _1204 = _987 && (!_989);
                    precise float _1206 = _1127 * (-4.0);
                    precise float _1210 = 6.283184051513671875 / (isnan(0.001000000047497451305389404296875) ? _949 : (isnan(_949) ? 0.001000000047497451305389404296875 : max(_949, 0.001000000047497451305389404296875)));
                    precise float _1212 = dot(vec2(_1129, _1131), vec2(_990, _992));
                    precise float _1216 = _1210 * _1212;
                    precise float _1217 = float(_1204) * _1216;
                    precise float _1218 = _554 * _1210;
                    precise float _1219 = _1218 - _1217;
                    precise float _1220 = (_1204 ? 0.0 : _1206) + _1219;
                    precise float _1222 = _935 * sin(_1220);
                    precise float _1223 = _1130 * 0.0;
                    precise float _1224 = _1223 - _1131;
                    precise float _1225 = _1131 * 0.0;
                    precise float _1226 = _1129 * 0.0;
                    precise float _1227 = _1225 - _1226;
                    precise float _1228 = _1129 - _1223;
                    precise float _1229 = _950 * _1222;
                    float _1230 = _987 ? _1229 : 0.0;
                    float _1299;
                    if (_988)
                    {
                        precise float _1259 = _964 * 2.0;
                        precise float _1261 = _984 + _985;
                        precise float _1262 = _986 + _1261;
                        precise float _1264 = 6.283184051513671875 / (isnan(0.001000000047497451305389404296875) ? _964 : (isnan(_964) ? 0.001000000047497451305389404296875 : max(_964, 0.001000000047497451305389404296875)));
                        precise float _1265 = _983 * _1264;
                        precise float _1266 = (-0.0) - _1129;
                        precise float _1271 = dot(vec2(_1131, _1266), vec2(_990, _992)) / _1259;
                        precise float _1272 = (-0.0) - _1271;
                        float _1275 = fract(abs(_1271));
                        precise float _1276 = (-0.0) - _1275;
                        precise float _1278 = _1259 * ((_1271 >= _1272) ? _1275 : _1276);
                        precise float _1279 = _1278 * 6.283184051513671875;
                        precise float _1280 = _1279 / _1259;
                        precise float _1282 = (isnan(5.0) ? _964 : (isnan(_964) ? 5.0 : min(_964, 5.0))) * sin(_1280);
                        precise float _1283 = _1212 + _1282;
                        precise float _1284 = _964 * 0.25;
                        precise float _1286 = _554 * _983;
                        precise float _1287 = _1286 - _1284;
                        precise float _1288 = _1287 - _1283;
                        precise float _1289 = _983 * _1262;
                        precise float _1291 = _1288 / (isnan(0.001000000047497451305389404296875) ? _1289 : (isnan(_1289) ? 0.001000000047497451305389404296875 : max(_1289, 0.001000000047497451305389404296875)));
                        float _1292 = fract(_1291);
                        precise float _1294 = 1.0 - _1292;
                        float _1295 = (_1291 < 0.0) ? _1294 : _1292;
                        precise float _1296 = _1261 / _1262;
                        precise float _1297 = _984 / _1262;
                        float _1375;
                        if (_1295 < _1297)
                        {
                            precise float _1371 = _1295 / _1297;
                            _1375 = _1371;
                        }
                        else
                        {
                            float frontier_phi_27_24_ladder;
                            if (_1295 < _1296)
                            {
                                precise float _1385 = _1295 - _1297;
                                precise float _1386 = _1296 - _1297;
                                precise float _1387 = _1385 / _1386;
                                precise float _1376 = 1.0 - _1387;
                                frontier_phi_27_24_ladder = _1376;
                            }
                            else
                            {
                                frontier_phi_27_24_ladder = 0.0;
                            }
                            _1375 = frontier_phi_27_24_ladder;
                        }
                        precise float _1377 = _966 * _1375;
                        precise float _1378 = _1264 * _1212;
                        precise float _1379 = _554 * _1265;
                        precise float _1380 = _1379 - _1378;
                        precise float _1382 = _965 + sin(_1380);
                        precise float _1384 = _1377 * abs(_1382);
                        precise float _1300 = _1384 + 0.0;
                        _1299 = _1300;
                    }
                    else
                    {
                        _1299 = 0.0;
                    }
                    precise float _1301 = _916 + _1222;
                    precise float _1302 = _1301 + _1299;
                    precise float _1303 = _1129 * _1302;
                    precise float _1304 = _1130 * _1302;
                    precise float _1305 = _1131 * _1302;
                    precise float _1306 = _1224 * _1230;
                    precise float _1307 = _1227 * _1230;
                    precise float _1308 = _1228 * _1230;
                    precise float _1309 = _1306 + _1303;
                    precise float _1310 = _1307 + _1304;
                    precise float _1311 = _1308 + _1305;
                    precise float _1312 = _1185 * _1309;
                    precise float _1313 = _1185 * _1310;
                    precise float _1314 = _1185 * _1311;
                    precise float _1137 = _1312 * 0.0500000007450580596923828125;
                    precise float _1139 = _1313 * 0.0500000007450580596923828125;
                    precise float _1141 = _1314 * 0.0500000007450580596923828125;
                    frontier_phi_8_pred_12_ladder = _1137;
                    frontier_phi_8_pred_12_ladder_1 = _1139;
                    frontier_phi_8_pred_12_ladder_2 = _1141;
                }
                else
                {
                    frontier_phi_8_pred_12_ladder = 0.0;
                    frontier_phi_8_pred_12_ladder_1 = 0.0;
                    frontier_phi_8_pred_12_ladder_2 = 0.0;
                }
                frontier_phi_8_pred = frontier_phi_8_pred_12_ladder;
                frontier_phi_8_pred_1 = frontier_phi_8_pred_12_ladder_1;
                frontier_phi_8_pred_2 = frontier_phi_8_pred_12_ladder_2;
            }
            else
            {
                frontier_phi_8_pred = 0.0;
                frontier_phi_8_pred_1 = 0.0;
                frontier_phi_8_pred_2 = 0.0;
            }
            _1136 = frontier_phi_8_pred;
            _1138 = frontier_phi_8_pred_1;
            _1140 = frontier_phi_8_pred_2;
            _557 = _875 + _1136;
            _559 = _876 + _1138;
            _561 = _877 + _1140;
            uint _881 = _880 + 1u;
            if (_881 == _217)
            {
                break;
            }
            else
            {
                _875 = _557;
                _876 = _559;
                _877 = _561;
                _878 = (_880 != 3u) ? (_878 >> 8u) : _555;
                _880 = _881;
                continue;
            }
        }
        _556 = _557;
        _558 = _559;
        _560 = _561;
    }
    precise float _562 = _556 * _556;
    precise float _563 = _558 * _558;
    precise float _564 = _562 + _563;
    precise float _565 = _560 * _560;
    precise float _566 = _564 + _565;
    float _567 = sqrt(_566);
    bool _568 = _567 < 0.00011000000085914507508277893066406;
    float _573 = inversesqrt(dot(vec3(cbInstanceData._m0[_208].x, cbInstanceData._m0[_470].x, cbInstanceData._m0[_477].x), vec3(cbInstanceData._m0[_208].x, cbInstanceData._m0[_470].x, cbInstanceData._m0[_477].x)));
    precise float _574 = cbInstanceData._m0[_208].x * _573;
    precise float _575 = cbInstanceData._m0[_470].x * _573;
    precise float _576 = cbInstanceData._m0[_477].x * _573;
    float _580 = inversesqrt(dot(vec3(cbInstanceData._m0[_208].y, cbInstanceData._m0[_470].y, cbInstanceData._m0[_477].y), vec3(cbInstanceData._m0[_208].y, cbInstanceData._m0[_470].y, cbInstanceData._m0[_477].y)));
    precise float _581 = cbInstanceData._m0[_208].y * _580;
    precise float _582 = cbInstanceData._m0[_470].y * _580;
    precise float _583 = cbInstanceData._m0[_477].y * _580;
    float _587 = inversesqrt(dot(vec3(cbInstanceData._m0[_208].z, cbInstanceData._m0[_470].z, cbInstanceData._m0[_477].z), vec3(cbInstanceData._m0[_208].z, cbInstanceData._m0[_470].z, cbInstanceData._m0[_477].z)));
    precise float _588 = cbInstanceData._m0[_208].z * _587;
    precise float _589 = cbInstanceData._m0[_470].z * _587;
    precise float _590 = cbInstanceData._m0[_477].z * _587;
    precise float _591 = _574 * 0.0;
    precise float _592 = 1.0 * _581;
    precise float _593 = _592 + _591;
    precise float _594 = 0.0 * _588;
    precise float _595 = _594 + _593;
    precise float _596 = _575 * 0.0;
    precise float _597 = 1.0 * _582;
    precise float _598 = _597 + _596;
    precise float _599 = 0.0 * _589;
    precise float _600 = _599 + _598;
    precise float _601 = _576 * 0.0;
    precise float _602 = 1.0 * _583;
    precise float _603 = _602 + _601;
    precise float _604 = 0.0 * _590;
    precise float _605 = _604 + _603;
    float _609 = inversesqrt(dot(vec3(_556, _558, _560), vec3(_556, _558, _560)));
    precise float _610 = _556 * _609;
    precise float _611 = _558 * _609;
    precise float _612 = _560 * _609;
    precise float _613 = _600 * _612;
    precise float _614 = _605 * _611;
    precise float _615 = _613 - _614;
    precise float _616 = _605 * _610;
    precise float _617 = _595 * _612;
    precise float _618 = _616 - _617;
    precise float _619 = _595 * _611;
    precise float _620 = _600 * _610;
    precise float _621 = _619 - _620;
    float _625 = inversesqrt(dot(vec3(_615, _618, _621), vec3(_615, _618, _621)));
    precise float _626 = _625 * _615;
    precise float _627 = _625 * _618;
    precise float _628 = _625 * _621;
    precise float _629 = _567 + 1.0;
    precise float _631 = cbMtdParam._m0[10u].w * log2(_629);
    precise float _632 = _430 - _530;
    precise float _633 = _437 - _537;
    precise float _634 = _444 - _544;
    precise float _635 = dot(vec3(_626, _627, _628), vec3(_632, _633, _634));
    precise float _638 = _626 * _635;
    precise float _639 = _627 * _635;
    precise float _640 = _628 * _635;
    precise float _641 = _530 + _638;
    precise float _642 = _537 + _639;
    precise float _643 = _544 + _640;
    precise float _644 = _430 - _641;
    precise float _645 = _437 - _642;
    precise float _646 = _444 - _643;
    precise float _647 = _627 * _646;
    precise float _648 = _628 * _645;
    precise float _649 = _647 - _648;
    precise float _650 = _628 * _644;
    precise float _651 = _626 * _646;
    precise float _652 = _650 - _651;
    precise float _653 = _626 * _645;
    precise float _654 = _627 * _644;
    precise float _655 = _653 - _654;
    float _656 = sin(_631);
    float _657 = cos(_631);
    precise float _658 = _644 * _657;
    precise float _659 = _645 * _657;
    precise float _660 = _646 * _657;
    precise float _661 = _656 * _649;
    precise float _662 = _656 * _652;
    precise float _663 = _656 * _655;
    precise float _664 = _658 + _661;
    precise float _665 = _659 + _662;
    precise float _666 = _663 + _660;
    precise float _667 = _641 + _664;
    precise float _668 = _642 + _665;
    precise float _669 = _643 + _666;
    precise float _670 = _667 - _430;
    precise float _671 = _668 - _437;
    precise float _672 = _669 - _444;
    float _673 = _568 ? 0.0 : _670;
    float _674 = _568 ? 0.0 : _671;
    float _675 = _568 ? 0.0 : _672;
    precise float _676 = _430 + _673;
    precise float _677 = _437 + _674;
    precise float _678 = _444 + _675;
    precise float _679 = cbPerFrame._m0[22u].x + _519;
    float _681;
    float _683;
    float _685;
    if (_220)
    {
        _681 = 0.0;
        _683 = 0.0;
        _685 = 0.0;
    }
    else
    {
        uint _874 = _214.z;
        precise float _682;
        precise float _684;
        precise float _686;
        float _1160;
        float _1162;
        float _1164;
        float _1000 = 0.0;
        float _1001 = 0.0;
        float _1002 = 0.0;
        uint _1003 = _874;
        uint _1005 = 0u;
        float _1039;
        float _1058;
        vec4 _1071;
        float _1072;
        float _1073;
        float _1086;
        float _1087;
        float _1088;
        float _1104;
        float _1105;
        float _1106;
        float _1107;
        bool _1108;
        bool _1109;
        bool _1110;
        precise float _1111;
        precise float _1112;
        precise float _1113;
        float _1114;
        float _1115;
        float _1116;
        precise float _1117;
        bool _1120;
        for (;;)
        {
            uint _1007 = _1003 & 255u;
            uint _1008 = _1007 * 24u;
            uvec3 _1017 = uvec3(texelFetch(g_forceParam, int(_1008)).x, texelFetch(g_forceParam, int(_1008 + 1u)).x, texelFetch(g_forceParam, int(_1008 + 2u)).x);
            uint _1022 = (_1007 * 24u) + 4u;
            vec4 _1035 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_1022)).x, texelFetch(g_forceParam, int(_1022 + 1u)).x, texelFetch(g_forceParam, int(_1022 + 2u)).x, texelFetch(g_forceParam, int(_1022 + 3u)).x));
            _1039 = _1035.w;
            uint _1041 = (_1007 * 24u) + 8u;
            vec4 _1054 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_1041)).x, texelFetch(g_forceParam, int(_1041 + 1u)).x, texelFetch(g_forceParam, int(_1041 + 2u)).x, texelFetch(g_forceParam, int(_1041 + 3u)).x));
            _1058 = _1054.w;
            uint _1060 = (_1007 * 24u) + 12u;
            _1071 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_1060)).x, texelFetch(g_forceParam, int(_1060 + 1u)).x, _1066, texelFetch(g_forceParam, int(_1060 + 3u)).x));
            _1072 = _1071.x;
            _1073 = _1071.w;
            uint _1075 = (_1007 * 24u) + 16u;
            vec3 _1085 = uintBitsToFloat(uvec3(texelFetch(g_forceParam, int(_1075)).x, texelFetch(g_forceParam, int(_1075 + 1u)).x, texelFetch(g_forceParam, int(_1075 + 2u)).x));
            _1086 = _1085.x;
            _1087 = _1085.y;
            _1088 = _1085.z;
            uint _1090 = (_1007 * 24u) + 20u;
            vec4 _1103 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_1090)).x, texelFetch(g_forceParam, int(_1090 + 1u)).x, texelFetch(g_forceParam, int(_1090 + 2u)).x, texelFetch(g_forceParam, int(_1090 + 3u)).x));
            _1104 = _1103.x;
            _1105 = _1103.y;
            _1106 = _1103.z;
            _1107 = _1103.w;
            _1108 = _1017.x == 1u;
            _1109 = _1017.y == 1u;
            _1110 = _1017.z == 1u;
            _1111 = _490 - _1035.x;
            _1112 = _497 - _1035.y;
            _1113 = _504 - _1035.z;
            _1114 = _1108 ? _1054.x : _1111;
            _1115 = _1108 ? _1054.y : _1112;
            _1116 = _1108 ? _1054.z : _1113;
            _1117 = dot(vec3(_1114, _1115, _1116), vec3(_1114, _1115, _1116));
            _1120 = _1117 > 0.0;
            float frontier_phi_10_pred;
            float frontier_phi_10_pred_1;
            float frontier_phi_10_pred_2;
            if (_1120)
            {
                precise float _1146 = _1111 * _1111;
                precise float _1147 = _1112 * _1112;
                precise float _1148 = _1146 + _1147;
                precise float _1149 = _1113 * _1113;
                precise float _1150 = _1149 + _1148;
                float _1151 = sqrt(_1150);
                float _1152 = inversesqrt(_1117);
                precise float _1153 = _1114 * _1152;
                precise float _1154 = _1115 * _1152;
                precise float _1155 = _1116 * _1152;
                precise float _1157 = _1151 / (isnan(0.001000000047497451305389404296875) ? _1071.y : (isnan(_1071.y) ? 0.001000000047497451305389404296875 : max(_1071.y, 0.001000000047497451305389404296875)));
                precise float _1158 = 1.0 - _1157;
                float _1512 = isnan(0.0) ? _1158 : (isnan(_1158) ? 0.0 : max(_1158, 0.0));
                float _1159 = isnan(1.0) ? _1512 : (isnan(_1512) ? 1.0 : min(_1512, 1.0));
                float _1201;
                if (_1110)
                {
                    float _1190 = inversesqrt(dot(vec3(_1111, _1112, _1113), vec3(_1111, _1112, _1113)));
                    precise float _1191 = _1111 * _1190;
                    precise float _1192 = _1112 * _1190;
                    precise float _1193 = _1113 * _1190;
                    precise float _1197 = dot(vec3(_1153, _1154, _1155), vec3(_1191, _1192, _1193)) * 0.800000011920928955078125;
                    precise float _1198 = _1197 + 0.20000000298023223876953125;
                    float _1523 = isnan(0.0) ? _1198 : (isnan(_1198) ? 0.0 : max(_1198, 0.0));
                    precise float _1200 = _1159 * (isnan(1.0) ? _1523 : (isnan(_1523) ? 1.0 : min(_1523, 1.0)));
                    _1201 = _1200;
                }
                else
                {
                    _1201 = _1159;
                }
                float frontier_phi_10_pred_15_ladder;
                float frontier_phi_10_pred_15_ladder_1;
                float frontier_phi_10_pred_15_ladder_2;
                if (_1201 > 0.0)
                {
                    bool _1232 = _1108 && (!_1110);
                    precise float _1234 = _1151 * (-4.0);
                    precise float _1237 = 6.283184051513671875 / (isnan(0.001000000047497451305389404296875) ? _1072 : (isnan(_1072) ? 0.001000000047497451305389404296875 : max(_1072, 0.001000000047497451305389404296875)));
                    precise float _1238 = cbMtdParam._m0[11u].y * _1237;
                    precise float _1239 = dot(vec2(_1153, _1155), vec2(_1111, _1113));
                    precise float _1242 = _1239 * _1238;
                    precise float _1243 = float(_1232) * _1242;
                    precise float _1244 = _679 * _1238;
                    precise float _1245 = _1244 - _1243;
                    precise float _1246 = (_1232 ? 0.0 : _1234) + _1245;
                    precise float _1248 = _1058 * sin(_1246);
                    precise float _1249 = _1154 * 0.0;
                    precise float _1250 = _1249 - _1155;
                    precise float _1251 = _1155 * 0.0;
                    precise float _1252 = _1153 * 0.0;
                    precise float _1253 = _1251 - _1252;
                    precise float _1254 = _1153 - _1249;
                    precise float _1255 = _1073 * _1248;
                    float _1256 = _1108 ? _1255 : 0.0;
                    float _1355;
                    if (_1109)
                    {
                        precise float _1317 = _1086 * 2.0;
                        precise float _1318 = _1105 + _1106;
                        precise float _1319 = _1107 + _1318;
                        precise float _1321 = 6.283184051513671875 / (isnan(0.001000000047497451305389404296875) ? _1086 : (isnan(_1086) ? 0.001000000047497451305389404296875 : max(_1086, 0.001000000047497451305389404296875)));
                        precise float _1322 = cbMtdParam._m0[11u].y * _1321;
                        precise float _1323 = _1104 * _1322;
                        precise float _1324 = (-0.0) - _1153;
                        precise float _1328 = dot(vec2(_1155, _1324), vec2(_1111, _1113)) / _1317;
                        precise float _1329 = (-0.0) - _1328;
                        float _1332 = fract(abs(_1328));
                        precise float _1333 = (-0.0) - _1332;
                        precise float _1335 = _1317 * ((_1328 >= _1329) ? _1332 : _1333);
                        precise float _1336 = _1335 * 6.283184051513671875;
                        precise float _1337 = _1336 / _1317;
                        precise float _1339 = (isnan(5.0) ? _1086 : (isnan(_1086) ? 5.0 : min(_1086, 5.0))) * sin(_1337);
                        precise float _1340 = _1239 + _1339;
                        precise float _1341 = _1086 * 0.25;
                        precise float _1342 = _679 * _1104;
                        precise float _1343 = _1342 - _1341;
                        precise float _1344 = _1343 - _1340;
                        precise float _1345 = _1104 * _1319;
                        precise float _1347 = _1344 / (isnan(0.001000000047497451305389404296875) ? _1345 : (isnan(_1345) ? 0.001000000047497451305389404296875 : max(_1345, 0.001000000047497451305389404296875)));
                        float _1348 = fract(_1347);
                        precise float _1350 = 1.0 - _1348;
                        float _1351 = (_1347 < 0.0) ? _1350 : _1348;
                        precise float _1352 = _1318 / _1319;
                        precise float _1353 = _1105 / _1319;
                        float _1388;
                        if (_1351 < _1353)
                        {
                            precise float _1373 = _1351 / _1353;
                            _1388 = _1373;
                        }
                        else
                        {
                            float frontier_phi_29_26_ladder;
                            if (_1351 < _1352)
                            {
                                precise float _1398 = _1351 - _1353;
                                precise float _1399 = _1352 - _1353;
                                precise float _1400 = _1398 / _1399;
                                precise float _1389 = 1.0 - _1400;
                                frontier_phi_29_26_ladder = _1389;
                            }
                            else
                            {
                                frontier_phi_29_26_ladder = 0.0;
                            }
                            _1388 = frontier_phi_29_26_ladder;
                        }
                        precise float _1390 = _1088 * _1388;
                        precise float _1391 = _1322 * _1239;
                        precise float _1392 = _679 * _1323;
                        precise float _1393 = _1392 - _1391;
                        precise float _1395 = _1087 + sin(_1393);
                        precise float _1397 = _1390 * abs(_1395);
                        precise float _1356 = _1397 + 0.0;
                        _1355 = _1356;
                    }
                    else
                    {
                        _1355 = 0.0;
                    }
                    precise float _1357 = _1039 + _1248;
                    precise float _1358 = _1357 + _1355;
                    precise float _1359 = _1153 * _1358;
                    precise float _1360 = _1154 * _1358;
                    precise float _1361 = _1155 * _1358;
                    precise float _1362 = _1250 * _1256;
                    precise float _1363 = _1253 * _1256;
                    precise float _1364 = _1254 * _1256;
                    precise float _1365 = _1362 + _1359;
                    precise float _1366 = _1363 + _1360;
                    precise float _1367 = _1364 + _1361;
                    precise float _1368 = _1201 * _1365;
                    precise float _1369 = _1201 * _1366;
                    precise float _1370 = _1201 * _1367;
                    precise float _1161 = _1368 * 0.0500000007450580596923828125;
                    precise float _1163 = _1369 * 0.0500000007450580596923828125;
                    precise float _1165 = _1370 * 0.0500000007450580596923828125;
                    frontier_phi_10_pred_15_ladder = _1161;
                    frontier_phi_10_pred_15_ladder_1 = _1163;
                    frontier_phi_10_pred_15_ladder_2 = _1165;
                }
                else
                {
                    frontier_phi_10_pred_15_ladder = 0.0;
                    frontier_phi_10_pred_15_ladder_1 = 0.0;
                    frontier_phi_10_pred_15_ladder_2 = 0.0;
                }
                frontier_phi_10_pred = frontier_phi_10_pred_15_ladder;
                frontier_phi_10_pred_1 = frontier_phi_10_pred_15_ladder_1;
                frontier_phi_10_pred_2 = frontier_phi_10_pred_15_ladder_2;
            }
            else
            {
                frontier_phi_10_pred = 0.0;
                frontier_phi_10_pred_1 = 0.0;
                frontier_phi_10_pred_2 = 0.0;
            }
            _1160 = frontier_phi_10_pred;
            _1162 = frontier_phi_10_pred_1;
            _1164 = frontier_phi_10_pred_2;
            _682 = _1000 + _1160;
            _684 = _1001 + _1162;
            _686 = _1002 + _1164;
            uint _1006 = _1005 + 1u;
            if (_1006 == _217)
            {
                break;
            }
            else
            {
                _1000 = _682;
                _1001 = _684;
                _1002 = _686;
                _1003 = (_1005 != 3u) ? (_1003 >> 8u) : _555;
                _1005 = _1006;
                continue;
            }
        }
        _681 = _682;
        _683 = _684;
        _685 = _686;
    }
    precise float _687 = _681 * _681;
    precise float _688 = _683 * _683;
    precise float _689 = _687 + _688;
    precise float _690 = _685 * _685;
    precise float _691 = _689 + _690;
    float _692 = sqrt(_691);
    bool _693 = _692 < 0.00011000000085914507508277893066406;
    float _697 = inversesqrt(dot(vec3(_681, _683, _685), vec3(_681, _683, _685)));
    precise float _698 = _681 * _697;
    precise float _699 = _683 * _697;
    precise float _700 = _685 * _697;
    precise float _701 = _600 * _700;
    precise float _702 = _605 * _699;
    precise float _703 = _701 - _702;
    precise float _704 = _605 * _698;
    precise float _705 = _595 * _700;
    precise float _706 = _704 - _705;
    precise float _707 = _595 * _699;
    precise float _708 = _600 * _698;
    precise float _709 = _707 - _708;
    float _713 = inversesqrt(dot(vec3(_703, _706, _709), vec3(_703, _706, _709)));
    precise float _714 = _713 * _703;
    precise float _715 = _713 * _706;
    precise float _716 = _713 * _709;
    precise float _717 = _692 + 1.0;
    precise float _719 = cbMtdParam._m0[10u].y * log2(_717);
    precise float _720 = _676 - _490;
    precise float _721 = _677 - _497;
    precise float _722 = _678 - _504;
    precise float _723 = dot(vec3(_714, _715, _716), vec3(_720, _721, _722));
    precise float _726 = _714 * _723;
    precise float _727 = _715 * _723;
    precise float _728 = _716 * _723;
    precise float _729 = _490 + _726;
    precise float _730 = _497 + _727;
    precise float _731 = _504 + _728;
    precise float _732 = _676 - _729;
    precise float _733 = _677 - _730;
    precise float _734 = _678 - _731;
    precise float _735 = _715 * _734;
    precise float _736 = _716 * _733;
    precise float _737 = _735 - _736;
    precise float _738 = _716 * _732;
    precise float _739 = _714 * _734;
    precise float _740 = _738 - _739;
    precise float _741 = _714 * _733;
    precise float _742 = _715 * _732;
    precise float _743 = _741 - _742;
    float _744 = sin(_719);
    float _745 = cos(_719);
    precise float _746 = _732 * _745;
    precise float _747 = _733 * _745;
    precise float _748 = _734 * _745;
    precise float _749 = _744 * _737;
    precise float _750 = _744 * _740;
    precise float _751 = _744 * _743;
    precise float _752 = _746 + _749;
    precise float _753 = _747 + _750;
    precise float _754 = _751 + _748;
    precise float _755 = _729 + _752;
    precise float _756 = _730 + _753;
    precise float _757 = _731 + _754;
    precise float _758 = _755 - _676;
    precise float _759 = _756 - _677;
    precise float _760 = _757 - _678;
    precise float _764 = _673 + (_693 ? 0.0 : _758);
    precise float _765 = _674 + (_693 ? 0.0 : _759);
    precise float _766 = _675 + (_693 ? 0.0 : _760);
    precise float _767 = _430 + _764;
    precise float _768 = _437 + _765;
    precise float _769 = _444 + _766;
    precise float _775 = _767 - cbSceneParam._m0[3u].x;
    precise float _776 = _768 - cbSceneParam._m0[3u].y;
    precise float _777 = _769 - cbSceneParam._m0[3u].z;
    precise float _805 = cbSceneParam._m0[24u].x * _775;
    precise float _806 = _776 * cbSceneParam._m0[24u].y;
    precise float _807 = _806 + _805;
    precise float _808 = _777 * cbSceneParam._m0[24u].z;
    precise float _809 = _808 + _807;
    precise float _810 = 1.0 * cbSceneParam._m0[24u].w;
    precise float _811 = _810 + _809;
    precise float _812 = cbSceneParam._m0[25u].x * _775;
    precise float _813 = _776 * cbSceneParam._m0[25u].y;
    precise float _814 = _813 + _812;
    precise float _815 = _777 * cbSceneParam._m0[25u].z;
    precise float _816 = _815 + _814;
    precise float _817 = 1.0 * cbSceneParam._m0[25u].w;
    precise float _818 = _817 + _816;
    precise float _819 = cbSceneParam._m0[26u].x * _775;
    precise float _820 = _776 * cbSceneParam._m0[26u].y;
    precise float _821 = _820 + _819;
    precise float _822 = _777 * cbSceneParam._m0[26u].z;
    precise float _823 = _822 + _821;
    precise float _824 = 1.0 * cbSceneParam._m0[26u].w;
    precise float _825 = _824 + _823;
    precise float _826 = cbSceneParam._m0[27u].x * _775;
    precise float _827 = _776 * cbSceneParam._m0[27u].y;
    precise float _828 = _827 + _826;
    precise float _829 = _777 * cbSceneParam._m0[27u].z;
    precise float _830 = _829 + _828;
    precise float _831 = 1.0 * cbSceneParam._m0[27u].w;
    precise float _832 = _831 + _830;
    gl_Position.x = _811;
    gl_Position.y = _818;
    gl_Position.z = _825;
    gl_Position.w = _832;
    POSITION_1.x = _811;
    POSITION_1.y = _818;
    POSITION_1.z = _825;
    POSITION_1.w = _832;
    NORMAL_1.x = fma(_191, _418, fma(_190, _415, _412 * _188));
    NORMAL_1.y = fma(_191, _419, fma(_190, _416, _413 * _188));
    NORMAL_1.z = fma(_191, _420, fma(_190, _417, _414 * _188));
    NORMAL_1.w = float(_231);
    TANGENT_1.x = fma(_202, _418, fma(_201, _415, _412 * _200));
    TANGENT_1.y = fma(_202, _419, fma(_201, _416, _413 * _200));
    TANGENT_1.z = fma(_202, _420, fma(_201, _417, _414 * _200));
    TANGENT_1.w = (float(TANGENT.w) + (-127.0)) * 0.0078740157186985015869140625;
    TEXCOORD_2 = ((float(int(uint(TEXCOORD.x))) * 0.00048828125) * cbTexScroll._m0[0u].x) + cbTexScroll._m0[0u].z;
    TEXCOORD_1_1 = ((float(int(uint(TEXCOORD.y))) * 0.00048828125) * cbTexScroll._m0[0u].y) + cbTexScroll._m0[0u].w;
    TEXCOORD_3.x = TEXCOORD_1.x;
    TEXCOORD_3.y = TEXCOORD_1.y;
    TEXCOORD_3.z = TEXCOORD_1.z;
    TEXCOORD_3.w = COLOR_1.x;
    gl_ClipDistance[0u] = dot(vec4(_811, _818, _825, _832), vec4(cbSceneParam._m0[4u]));
    gl_ClipDistance[1u] = dot(vec4(_811, _818, _825, _832), vec4(cbInstanceData._m0[_243 + 3u]));
}


