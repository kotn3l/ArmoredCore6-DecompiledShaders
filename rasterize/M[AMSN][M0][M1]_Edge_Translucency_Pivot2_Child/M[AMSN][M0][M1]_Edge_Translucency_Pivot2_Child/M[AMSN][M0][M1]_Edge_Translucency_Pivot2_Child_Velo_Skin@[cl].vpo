#version 460

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[12];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 5, std140) uniform cbObjMatrixUBO
{
    vec4 _m0[6];
} cbObjMatrix;

layout(set = 0, binding = 6, std140) uniform cbPrevObjMatrixUBO
{
    vec4 _m0[6];
} cbPrevObjMatrix;

layout(set = 0, binding = 10, std140) uniform cbInstanceIdxParamUBO
{
    vec4 _m0[1];
} cbInstanceIdxParam;

layout(set = 0, binding = 11, std140) uniform cbTexScrollUBO
{
    vec4 _m0[4];
} cbTexScroll;

layout(set = 0, binding = 26) uniform usamplerBuffer g_forceParam;
layout(set = 0, binding = 25) uniform usamplerBuffer g_InstanceIndexBuffer;

layout(location = 0) in vec3 POSITION;
layout(location = 1) in uvec4 NORMAL;
layout(location = 2) in uvec4 TANGENT;
layout(location = 3) in uvec4 BLENDINDICES;
layout(location = 4) in vec4 BLENDWEIGHT;
layout(location = 5) in vec4 COLOR_1;
layout(location = 6) in ivec2 TEXCOORD;
layout(location = 7) in vec4 TEXCOORD_1;
layout(location = 1) out vec4 POSITION_1;
layout(location = 2) out vec4 NORMAL_1;
layout(location = 3) out vec4 TANGENT_1;
layout(location = 4) out float TEXCOORD_2;
layout(location = 4, component = 1) out float TEXCOORD_1_1;
layout(location = 5) out vec4 TEXCOORD_3;
layout(location = 6) out vec4 TEXCOORD_8;
layout(location = 7) out vec4 TEXCOORD_9;
layout(location = 8) out vec3 TEXCOORD_10;

uint _1171;
uint _1294;

void main()
{
    uint _87 = uint(gl_InstanceIndex) - uint(gl_BaseInstance);
    gl_Position.x = 0.0;
    gl_Position.y = 0.0;
    gl_Position.z = 0.0;
    gl_Position.w = 0.0;
    POSITION_1.x = 0.0;
    POSITION_1.y = 0.0;
    POSITION_1.z = 0.0;
    POSITION_1.w = 0.0;
    NORMAL_1.x = 0.0;
    NORMAL_1.y = 0.0;
    NORMAL_1.z = 0.0;
    NORMAL_1.w = 0.0;
    TANGENT_1.x = 0.0;
    TANGENT_1.y = 0.0;
    TANGENT_1.z = 0.0;
    TANGENT_1.w = 0.0;
    TEXCOORD_2 = 0.0;
    TEXCOORD_1_1 = 0.0;
    TEXCOORD_3.x = 0.0;
    TEXCOORD_3.y = 0.0;
    TEXCOORD_3.z = 0.0;
    TEXCOORD_3.w = 0.0;
    TEXCOORD_8.x = 0.0;
    TEXCOORD_8.y = 0.0;
    TEXCOORD_8.z = 0.0;
    TEXCOORD_8.w = 0.0;
    TEXCOORD_9.x = 0.0;
    TEXCOORD_9.y = 0.0;
    TEXCOORD_9.z = 0.0;
    TEXCOORD_9.w = 0.0;
    TEXCOORD_10.x = 0.0;
    TEXCOORD_10.y = 0.0;
    TEXCOORD_10.z = 0.0;
    float _202 = (float(NORMAL.x) + (-127.0)) * 0.0078740157186985015869140625;
    float _204 = (float(NORMAL.y) + (-127.0)) * 0.0078740157186985015869140625;
    float _205 = (float(NORMAL.z) + (-127.0)) * 0.0078740157186985015869140625;
    float _214 = (float(TANGENT.x) + (-127.0)) * 0.0078740157186985015869140625;
    float _215 = (float(TANGENT.y) + (-127.0)) * 0.0078740157186985015869140625;
    float _216 = (float(TANGENT.z) + (-127.0)) * 0.0078740157186985015869140625;
    uint _222 = _87 * 13u;
    uvec4 _228 = floatBitsToUint(cbInstanceData._m0[_222 + 7u]);
    uint _231 = min(_228.y, 8u);
    bool _234 = _231 == 0u;
    precise float _235 = POSITION.x + 0.0;
    precise float _236 = POSITION.y + 0.0;
    precise float _237 = POSITION.z + 0.0;
    uint _242 = floatBitsToUint(cbInstanceIdxParam._m0[0u]).x + _87;
    uvec4 _244 = texelFetch(g_InstanceIndexBuffer, int(_242));
    uint _245 = _244.x;
    precise float _246 = dot(vec4(1.0), vec4(BLENDWEIGHT.x, BLENDWEIGHT.y, BLENDWEIGHT.z, BLENDWEIGHT.w));
    float _250 = isnan(_246) ? 0.001000000047497451305389404296875 : (isnan(0.001000000047497451305389404296875) ? _246 : max(0.001000000047497451305389404296875, _246));
    precise float _252 = BLENDWEIGHT.x / _250;
    precise float _253 = BLENDWEIGHT.y / _250;
    precise float _254 = BLENDWEIGHT.z / _250;
    precise float _255 = BLENDWEIGHT.w / _250;
    uvec4 _261 = floatBitsToUint(cbInstanceData._m0[(_245 * 13u) + 4u]);
    uint _262 = _261.x;
    uint _264 = (_262 + uint(float(BLENDINDICES.x))) * 3u;
    uint _271 = _264 + 1u;
    uint _278 = _264 + 2u;
    precise float _285 = _252 * cbObjMatrix._m0[_264].x;
    precise float _286 = _252 * cbObjMatrix._m0[_271].x;
    precise float _287 = _252 * cbObjMatrix._m0[_278].x;
    precise float _288 = _252 * cbObjMatrix._m0[_264].y;
    precise float _289 = _252 * cbObjMatrix._m0[_271].y;
    precise float _290 = _252 * cbObjMatrix._m0[_278].y;
    precise float _291 = _252 * cbObjMatrix._m0[_264].z;
    precise float _292 = _252 * cbObjMatrix._m0[_271].z;
    precise float _293 = _252 * cbObjMatrix._m0[_278].z;
    precise float _294 = _252 * cbObjMatrix._m0[_264].w;
    precise float _295 = _252 * cbObjMatrix._m0[_271].w;
    precise float _296 = _252 * cbObjMatrix._m0[_278].w;
    uint _299 = (_262 + uint(float(BLENDINDICES.y))) * 3u;
    uint _306 = _299 + 1u;
    uint _313 = _299 + 2u;
    precise float _320 = _253 * cbObjMatrix._m0[_299].x;
    precise float _321 = _253 * cbObjMatrix._m0[_306].x;
    precise float _322 = _253 * cbObjMatrix._m0[_313].x;
    precise float _323 = _253 * cbObjMatrix._m0[_299].y;
    precise float _324 = _253 * cbObjMatrix._m0[_306].y;
    precise float _325 = _253 * cbObjMatrix._m0[_313].y;
    precise float _326 = _253 * cbObjMatrix._m0[_299].z;
    precise float _327 = _253 * cbObjMatrix._m0[_306].z;
    precise float _328 = _253 * cbObjMatrix._m0[_313].z;
    precise float _329 = _253 * cbObjMatrix._m0[_299].w;
    precise float _330 = _253 * cbObjMatrix._m0[_306].w;
    precise float _331 = _253 * cbObjMatrix._m0[_313].w;
    precise float _332 = _285 + _320;
    precise float _333 = _286 + _321;
    precise float _334 = _287 + _322;
    precise float _335 = _288 + _323;
    precise float _336 = _289 + _324;
    precise float _337 = _290 + _325;
    precise float _338 = _291 + _326;
    precise float _339 = _292 + _327;
    precise float _340 = _293 + _328;
    precise float _341 = _294 + _329;
    precise float _342 = _295 + _330;
    precise float _343 = _296 + _331;
    uint _346 = (_262 + uint(float(BLENDINDICES.z))) * 3u;
    uint _353 = _346 + 1u;
    uint _360 = _346 + 2u;
    precise float _367 = _254 * cbObjMatrix._m0[_346].x;
    precise float _368 = _254 * cbObjMatrix._m0[_353].x;
    precise float _369 = _254 * cbObjMatrix._m0[_360].x;
    precise float _370 = _254 * cbObjMatrix._m0[_346].y;
    precise float _371 = _254 * cbObjMatrix._m0[_353].y;
    precise float _372 = _254 * cbObjMatrix._m0[_360].y;
    precise float _373 = _254 * cbObjMatrix._m0[_346].z;
    precise float _374 = _254 * cbObjMatrix._m0[_353].z;
    precise float _375 = _254 * cbObjMatrix._m0[_360].z;
    precise float _376 = _254 * cbObjMatrix._m0[_346].w;
    precise float _377 = _254 * cbObjMatrix._m0[_353].w;
    precise float _378 = _254 * cbObjMatrix._m0[_360].w;
    precise float _379 = _332 + _367;
    precise float _380 = _333 + _368;
    precise float _381 = _334 + _369;
    precise float _382 = _335 + _370;
    precise float _383 = _336 + _371;
    precise float _384 = _337 + _372;
    precise float _385 = _338 + _373;
    precise float _386 = _339 + _374;
    precise float _387 = _340 + _375;
    precise float _388 = _341 + _376;
    precise float _389 = _342 + _377;
    precise float _390 = _343 + _378;
    uint _393 = (_262 + uint(float(BLENDINDICES.w))) * 3u;
    uint _400 = _393 + 1u;
    uint _407 = _393 + 2u;
    precise float _414 = _255 * cbObjMatrix._m0[_393].x;
    precise float _415 = _255 * cbObjMatrix._m0[_400].x;
    precise float _416 = _255 * cbObjMatrix._m0[_407].x;
    precise float _417 = _255 * cbObjMatrix._m0[_393].y;
    precise float _418 = _255 * cbObjMatrix._m0[_400].y;
    precise float _419 = _255 * cbObjMatrix._m0[_407].y;
    precise float _420 = _255 * cbObjMatrix._m0[_393].z;
    precise float _421 = _255 * cbObjMatrix._m0[_400].z;
    precise float _422 = _255 * cbObjMatrix._m0[_407].z;
    precise float _423 = _255 * cbObjMatrix._m0[_393].w;
    precise float _424 = _255 * cbObjMatrix._m0[_400].w;
    precise float _425 = _255 * cbObjMatrix._m0[_407].w;
    precise float _426 = _379 + _414;
    precise float _427 = _380 + _415;
    precise float _428 = _381 + _416;
    precise float _429 = _382 + _417;
    precise float _430 = _383 + _418;
    precise float _431 = _384 + _419;
    precise float _432 = _385 + _420;
    precise float _433 = _386 + _421;
    precise float _434 = _387 + _422;
    precise float _435 = _388 + _423;
    precise float _436 = _389 + _424;
    precise float _437 = _390 + _425;
    precise float _438 = _235 * _426;
    precise float _439 = _236 * _429;
    precise float _440 = _439 + _438;
    precise float _441 = _237 * _432;
    precise float _442 = _441 + _440;
    precise float _443 = 1.0 * _435;
    precise float _444 = _443 + _442;
    precise float _445 = _235 * _427;
    precise float _446 = _236 * _430;
    precise float _447 = _446 + _445;
    precise float _448 = _237 * _433;
    precise float _449 = _448 + _447;
    precise float _450 = 1.0 * _436;
    precise float _451 = _450 + _449;
    precise float _452 = _235 * _428;
    precise float _453 = _236 * _431;
    precise float _454 = _453 + _452;
    precise float _455 = _237 * _434;
    precise float _456 = _455 + _454;
    precise float _457 = 1.0 * _437;
    precise float _458 = _457 + _456;
    float _629 = fma(_205, _432, fma(_204, _429, _426 * _202));
    float _632 = fma(_205, _433, fma(_204, _430, _427 * _202));
    float _635 = fma(_205, _434, fma(_204, _431, _428 * _202));
    uint _652 = _222 + 1u;
    uint _659 = _222 + 2u;
    precise float _666 = TEXCOORD_1.x * cbInstanceData._m0[_222].x;
    precise float _667 = TEXCOORD_1.y * cbInstanceData._m0[_222].y;
    precise float _668 = _667 + _666;
    precise float _669 = TEXCOORD_1.z * cbInstanceData._m0[_222].z;
    precise float _670 = _669 + _668;
    precise float _671 = 1.0 * cbInstanceData._m0[_222].w;
    precise float _672 = _671 + _670;
    precise float _673 = TEXCOORD_1.x * cbInstanceData._m0[_652].x;
    precise float _674 = TEXCOORD_1.y * cbInstanceData._m0[_652].y;
    precise float _675 = _674 + _673;
    precise float _676 = TEXCOORD_1.z * cbInstanceData._m0[_652].z;
    precise float _677 = _676 + _675;
    precise float _678 = 1.0 * cbInstanceData._m0[_652].w;
    precise float _679 = _678 + _677;
    precise float _680 = TEXCOORD_1.x * cbInstanceData._m0[_659].x;
    precise float _681 = TEXCOORD_1.y * cbInstanceData._m0[_659].y;
    precise float _682 = _681 + _680;
    precise float _683 = TEXCOORD_1.z * cbInstanceData._m0[_659].z;
    precise float _684 = _683 + _682;
    precise float _685 = 1.0 * cbInstanceData._m0[_659].w;
    precise float _686 = _685 + _684;
    precise float _692 = _444 - _672;
    precise float _693 = _451 - _679;
    precise float _694 = _458 - _686;
    precise float _695 = _692 * _692;
    precise float _696 = _693 * _693;
    precise float _697 = _695 + _696;
    precise float _698 = _694 * _694;
    precise float _699 = _697 + _698;
    precise float _701 = cbMtdParam._m0[10u].z * sqrt(_699);
    precise float _706 = cbInstanceData._m0[_222].x * 0.0;
    precise float _707 = 0.0 * cbInstanceData._m0[_222].y;
    precise float _708 = _707 + _706;
    precise float _709 = 0.0 * cbInstanceData._m0[_222].z;
    precise float _710 = _709 + _708;
    precise float _711 = 1.0 * cbInstanceData._m0[_222].w;
    precise float _712 = _711 + _710;
    precise float _713 = cbInstanceData._m0[_652].x * 0.0;
    precise float _714 = 0.0 * cbInstanceData._m0[_652].y;
    precise float _715 = _714 + _713;
    precise float _716 = 0.0 * cbInstanceData._m0[_652].z;
    precise float _717 = _716 + _715;
    precise float _718 = 1.0 * cbInstanceData._m0[_652].w;
    precise float _719 = _718 + _717;
    precise float _720 = cbInstanceData._m0[_659].x * 0.0;
    precise float _721 = 0.0 * cbInstanceData._m0[_659].y;
    precise float _722 = _721 + _720;
    precise float _723 = 0.0 * cbInstanceData._m0[_659].z;
    precise float _724 = _723 + _722;
    precise float _725 = 1.0 * cbInstanceData._m0[_659].w;
    precise float _726 = _725 + _724;
    precise float _729 = _444 * _444;
    precise float _730 = _451 * _451;
    precise float _731 = _729 + _730;
    precise float _732 = _458 * _458;
    precise float _733 = _731 + _732;
    precise float _735 = cbMtdParam._m0[11u].x * sqrt(_733);
    precise float _736 = cbPerFrame._m0[22u].x + _735;
    uint _737 = _228.w;
    float _738;
    float _740;
    float _742;
    if (_234)
    {
        _738 = 0.0;
        _740 = 0.0;
        _742 = 0.0;
    }
    else
    {
        uint _862 = _228.z;
        precise float _739;
        precise float _741;
        precise float _743;
        float _1364;
        float _1366;
        float _1368;
        float _1103 = 0.0;
        float _1104 = 0.0;
        float _1105 = 0.0;
        uint _1106 = _862;
        uint _1108 = 0u;
        float _1144;
        float _1163;
        vec4 _1176;
        float _1177;
        float _1178;
        float _1192;
        float _1193;
        float _1194;
        float _1211;
        float _1212;
        float _1213;
        float _1214;
        bool _1215;
        bool _1216;
        bool _1217;
        precise float _1218;
        precise float _1219;
        precise float _1220;
        float _1221;
        float _1222;
        float _1223;
        precise float _1224;
        bool _1227;
        for (;;)
        {
            uint _1110 = _1106 & 255u;
            uint _1112 = _1110 * 24u;
            uvec3 _1122 = uvec3(texelFetch(g_forceParam, int(_1112)).x, texelFetch(g_forceParam, int(_1112 + 1u)).x, texelFetch(g_forceParam, int(_1112 + 2u)).x);
            uint _1127 = (_1110 * 24u) + 4u;
            vec4 _1140 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_1127)).x, texelFetch(g_forceParam, int(_1127 + 1u)).x, texelFetch(g_forceParam, int(_1127 + 2u)).x, texelFetch(g_forceParam, int(_1127 + 3u)).x));
            _1144 = _1140.w;
            uint _1146 = (_1110 * 24u) + 8u;
            vec4 _1159 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_1146)).x, texelFetch(g_forceParam, int(_1146 + 1u)).x, texelFetch(g_forceParam, int(_1146 + 2u)).x, texelFetch(g_forceParam, int(_1146 + 3u)).x));
            _1163 = _1159.w;
            uint _1165 = (_1110 * 24u) + 12u;
            _1176 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_1165)).x, texelFetch(g_forceParam, int(_1165 + 1u)).x, _1171, texelFetch(g_forceParam, int(_1165 + 3u)).x));
            _1177 = _1176.x;
            _1178 = _1176.w;
            uint _1181 = (_1110 * 24u) + 16u;
            vec3 _1191 = uintBitsToFloat(uvec3(texelFetch(g_forceParam, int(_1181)).x, texelFetch(g_forceParam, int(_1181 + 1u)).x, texelFetch(g_forceParam, int(_1181 + 2u)).x));
            _1192 = _1191.x;
            _1193 = _1191.y;
            _1194 = _1191.z;
            uint _1197 = (_1110 * 24u) + 20u;
            vec4 _1210 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_1197)).x, texelFetch(g_forceParam, int(_1197 + 1u)).x, texelFetch(g_forceParam, int(_1197 + 2u)).x, texelFetch(g_forceParam, int(_1197 + 3u)).x));
            _1211 = _1210.x;
            _1212 = _1210.y;
            _1213 = _1210.z;
            _1214 = _1210.w;
            _1215 = _1122.x == 1u;
            _1216 = _1122.y == 1u;
            _1217 = _1122.z == 1u;
            _1218 = _712 - _1140.x;
            _1219 = _719 - _1140.y;
            _1220 = _726 - _1140.z;
            _1221 = _1215 ? _1159.x : _1218;
            _1222 = _1215 ? _1159.y : _1219;
            _1223 = _1215 ? _1159.z : _1220;
            _1224 = dot(vec3(_1221, _1222, _1223), vec3(_1221, _1222, _1223));
            _1227 = _1224 > 0.0;
            float frontier_phi_8_pred;
            float frontier_phi_8_pred_1;
            float frontier_phi_8_pred_2;
            if (_1227)
            {
                precise float _1350 = _1218 * _1218;
                precise float _1351 = _1219 * _1219;
                precise float _1352 = _1350 + _1351;
                precise float _1353 = _1220 * _1220;
                precise float _1354 = _1353 + _1352;
                float _1355 = sqrt(_1354);
                float _1356 = inversesqrt(_1224);
                precise float _1357 = _1221 * _1356;
                precise float _1358 = _1222 * _1356;
                precise float _1359 = _1223 * _1356;
                precise float _1361 = _1355 / (isnan(0.001000000047497451305389404296875) ? _1176.y : (isnan(_1176.y) ? 0.001000000047497451305389404296875 : max(_1176.y, 0.001000000047497451305389404296875)));
                precise float _1362 = 1.0 - _1361;
                float _1693 = isnan(0.0) ? _1362 : (isnan(_1362) ? 0.0 : max(_1362, 0.0));
                float _1363 = isnan(1.0) ? _1693 : (isnan(_1693) ? 1.0 : min(_1693, 1.0));
                float _1413;
                if (_1217)
                {
                    float _1400 = inversesqrt(dot(vec3(_1218, _1219, _1220), vec3(_1218, _1219, _1220)));
                    precise float _1401 = _1218 * _1400;
                    precise float _1402 = _1219 * _1400;
                    precise float _1403 = _1220 * _1400;
                    precise float _1407 = dot(vec3(_1357, _1358, _1359), vec3(_1401, _1402, _1403)) * 0.800000011920928955078125;
                    precise float _1409 = _1407 + 0.20000000298023223876953125;
                    float _1704 = isnan(0.0) ? _1409 : (isnan(_1409) ? 0.0 : max(_1409, 0.0));
                    precise float _1412 = _1363 * (isnan(1.0) ? _1704 : (isnan(_1704) ? 1.0 : min(_1704, 1.0)));
                    _1413 = _1412;
                }
                else
                {
                    _1413 = _1363;
                }
                float frontier_phi_8_pred_12_ladder;
                float frontier_phi_8_pred_12_ladder_1;
                float frontier_phi_8_pred_12_ladder_2;
                if (_1413 > 0.0)
                {
                    bool _1432 = _1215 && (!_1217);
                    precise float _1434 = _1355 * (-4.0);
                    precise float _1438 = 6.283184051513671875 / (isnan(0.001000000047497451305389404296875) ? _1177 : (isnan(_1177) ? 0.001000000047497451305389404296875 : max(_1177, 0.001000000047497451305389404296875)));
                    precise float _1440 = dot(vec2(_1357, _1359), vec2(_1218, _1220));
                    precise float _1444 = _1438 * _1440;
                    precise float _1445 = float(_1432) * _1444;
                    precise float _1446 = _736 * _1438;
                    precise float _1447 = _1446 - _1445;
                    precise float _1448 = (_1432 ? 0.0 : _1434) + _1447;
                    precise float _1450 = _1163 * sin(_1448);
                    precise float _1451 = _1358 * 0.0;
                    precise float _1452 = _1451 - _1359;
                    precise float _1453 = _1359 * 0.0;
                    precise float _1454 = _1357 * 0.0;
                    precise float _1455 = _1453 - _1454;
                    precise float _1456 = _1357 - _1451;
                    precise float _1457 = _1178 * _1450;
                    float _1458 = _1215 ? _1457 : 0.0;
                    float _1527;
                    if (_1216)
                    {
                        precise float _1487 = _1192 * 2.0;
                        precise float _1489 = _1212 + _1213;
                        precise float _1490 = _1214 + _1489;
                        precise float _1492 = 6.283184051513671875 / (isnan(0.001000000047497451305389404296875) ? _1192 : (isnan(_1192) ? 0.001000000047497451305389404296875 : max(_1192, 0.001000000047497451305389404296875)));
                        precise float _1493 = _1211 * _1492;
                        precise float _1494 = (-0.0) - _1357;
                        precise float _1499 = dot(vec2(_1359, _1494), vec2(_1218, _1220)) / _1487;
                        precise float _1500 = (-0.0) - _1499;
                        float _1503 = fract(abs(_1499));
                        precise float _1504 = (-0.0) - _1503;
                        precise float _1506 = _1487 * ((_1499 >= _1500) ? _1503 : _1504);
                        precise float _1507 = _1506 * 6.283184051513671875;
                        precise float _1508 = _1507 / _1487;
                        precise float _1510 = (isnan(5.0) ? _1192 : (isnan(_1192) ? 5.0 : min(_1192, 5.0))) * sin(_1508);
                        precise float _1511 = _1440 + _1510;
                        precise float _1512 = _1192 * 0.25;
                        precise float _1514 = _736 * _1211;
                        precise float _1515 = _1514 - _1512;
                        precise float _1516 = _1515 - _1511;
                        precise float _1517 = _1211 * _1490;
                        precise float _1519 = _1516 / (isnan(0.001000000047497451305389404296875) ? _1517 : (isnan(_1517) ? 0.001000000047497451305389404296875 : max(_1517, 0.001000000047497451305389404296875)));
                        float _1520 = fract(_1519);
                        precise float _1522 = 1.0 - _1520;
                        float _1523 = (_1519 < 0.0) ? _1522 : _1520;
                        precise float _1524 = _1489 / _1490;
                        precise float _1525 = _1212 / _1490;
                        float _1603;
                        if (_1523 < _1525)
                        {
                            precise float _1599 = _1523 / _1525;
                            _1603 = _1599;
                        }
                        else
                        {
                            float frontier_phi_27_24_ladder;
                            if (_1523 < _1524)
                            {
                                precise float _1613 = _1523 - _1525;
                                precise float _1614 = _1524 - _1525;
                                precise float _1615 = _1613 / _1614;
                                precise float _1604 = 1.0 - _1615;
                                frontier_phi_27_24_ladder = _1604;
                            }
                            else
                            {
                                frontier_phi_27_24_ladder = 0.0;
                            }
                            _1603 = frontier_phi_27_24_ladder;
                        }
                        precise float _1605 = _1194 * _1603;
                        precise float _1606 = _1492 * _1440;
                        precise float _1607 = _736 * _1493;
                        precise float _1608 = _1607 - _1606;
                        precise float _1610 = _1193 + sin(_1608);
                        precise float _1612 = _1605 * abs(_1610);
                        precise float _1528 = _1612 + 0.0;
                        _1527 = _1528;
                    }
                    else
                    {
                        _1527 = 0.0;
                    }
                    precise float _1529 = _1144 + _1450;
                    precise float _1530 = _1529 + _1527;
                    precise float _1531 = _1357 * _1530;
                    precise float _1532 = _1358 * _1530;
                    precise float _1533 = _1359 * _1530;
                    precise float _1534 = _1452 * _1458;
                    precise float _1535 = _1455 * _1458;
                    precise float _1536 = _1456 * _1458;
                    precise float _1537 = _1534 + _1531;
                    precise float _1538 = _1535 + _1532;
                    precise float _1539 = _1536 + _1533;
                    precise float _1540 = _1413 * _1537;
                    precise float _1541 = _1413 * _1538;
                    precise float _1542 = _1413 * _1539;
                    precise float _1365 = _1540 * 0.0500000007450580596923828125;
                    precise float _1367 = _1541 * 0.0500000007450580596923828125;
                    precise float _1369 = _1542 * 0.0500000007450580596923828125;
                    frontier_phi_8_pred_12_ladder = _1365;
                    frontier_phi_8_pred_12_ladder_1 = _1367;
                    frontier_phi_8_pred_12_ladder_2 = _1369;
                }
                else
                {
                    frontier_phi_8_pred_12_ladder = 0.0;
                    frontier_phi_8_pred_12_ladder_1 = 0.0;
                    frontier_phi_8_pred_12_ladder_2 = 0.0;
                }
                frontier_phi_8_pred = frontier_phi_8_pred_12_ladder;
                frontier_phi_8_pred_1 = frontier_phi_8_pred_12_ladder_1;
                frontier_phi_8_pred_2 = frontier_phi_8_pred_12_ladder_2;
            }
            else
            {
                frontier_phi_8_pred = 0.0;
                frontier_phi_8_pred_1 = 0.0;
                frontier_phi_8_pred_2 = 0.0;
            }
            _1364 = frontier_phi_8_pred;
            _1366 = frontier_phi_8_pred_1;
            _1368 = frontier_phi_8_pred_2;
            _739 = _1103 + _1364;
            _741 = _1104 + _1366;
            _743 = _1105 + _1368;
            uint _1109 = _1108 + 1u;
            if (_1109 == _231)
            {
                break;
            }
            else
            {
                _1103 = _739;
                _1104 = _741;
                _1105 = _743;
                _1106 = (_1108 != 3u) ? (_1106 >> 8u) : _737;
                _1108 = _1109;
                continue;
            }
        }
        _738 = _739;
        _740 = _741;
        _742 = _743;
    }
    precise float _744 = _738 * _738;
    precise float _745 = _740 * _740;
    precise float _746 = _744 + _745;
    precise float _747 = _742 * _742;
    precise float _748 = _746 + _747;
    float _749 = sqrt(_748);
    bool _750 = _749 < 0.00011000000085914507508277893066406;
    float _755 = inversesqrt(dot(vec3(cbInstanceData._m0[_222].x, cbInstanceData._m0[_652].x, cbInstanceData._m0[_659].x), vec3(cbInstanceData._m0[_222].x, cbInstanceData._m0[_652].x, cbInstanceData._m0[_659].x)));
    precise float _756 = cbInstanceData._m0[_222].x * _755;
    precise float _757 = cbInstanceData._m0[_652].x * _755;
    precise float _758 = cbInstanceData._m0[_659].x * _755;
    float _762 = inversesqrt(dot(vec3(cbInstanceData._m0[_222].y, cbInstanceData._m0[_652].y, cbInstanceData._m0[_659].y), vec3(cbInstanceData._m0[_222].y, cbInstanceData._m0[_652].y, cbInstanceData._m0[_659].y)));
    precise float _763 = cbInstanceData._m0[_222].y * _762;
    precise float _764 = cbInstanceData._m0[_652].y * _762;
    precise float _765 = cbInstanceData._m0[_659].y * _762;
    float _769 = inversesqrt(dot(vec3(cbInstanceData._m0[_222].z, cbInstanceData._m0[_652].z, cbInstanceData._m0[_659].z), vec3(cbInstanceData._m0[_222].z, cbInstanceData._m0[_652].z, cbInstanceData._m0[_659].z)));
    precise float _770 = cbInstanceData._m0[_222].z * _769;
    precise float _771 = cbInstanceData._m0[_652].z * _769;
    precise float _772 = cbInstanceData._m0[_659].z * _769;
    precise float _773 = _756 * 0.0;
    precise float _774 = 1.0 * _763;
    precise float _775 = _774 + _773;
    precise float _776 = 0.0 * _770;
    precise float _777 = _776 + _775;
    precise float _778 = _757 * 0.0;
    precise float _779 = 1.0 * _764;
    precise float _780 = _779 + _778;
    precise float _781 = 0.0 * _771;
    precise float _782 = _781 + _780;
    precise float _783 = _758 * 0.0;
    precise float _784 = 1.0 * _765;
    precise float _785 = _784 + _783;
    precise float _786 = 0.0 * _772;
    precise float _787 = _786 + _785;
    float _791 = inversesqrt(dot(vec3(_738, _740, _742), vec3(_738, _740, _742)));
    precise float _792 = _738 * _791;
    precise float _793 = _740 * _791;
    precise float _794 = _742 * _791;
    precise float _795 = _782 * _794;
    precise float _796 = _787 * _793;
    precise float _797 = _795 - _796;
    precise float _798 = _787 * _792;
    precise float _799 = _777 * _794;
    precise float _800 = _798 - _799;
    precise float _801 = _777 * _793;
    precise float _802 = _782 * _792;
    precise float _803 = _801 - _802;
    float _807 = inversesqrt(dot(vec3(_797, _800, _803), vec3(_797, _800, _803)));
    precise float _808 = _807 * _797;
    precise float _809 = _807 * _800;
    precise float _810 = _807 * _803;
    precise float _811 = _749 + 1.0;
    precise float _813 = cbMtdParam._m0[10u].w * log2(_811);
    precise float _814 = _444 - _712;
    precise float _815 = _451 - _719;
    precise float _816 = _458 - _726;
    precise float _817 = dot(vec3(_808, _809, _810), vec3(_814, _815, _816));
    precise float _820 = _808 * _817;
    precise float _821 = _809 * _817;
    precise float _822 = _810 * _817;
    precise float _823 = _712 + _820;
    precise float _824 = _719 + _821;
    precise float _825 = _726 + _822;
    precise float _826 = _444 - _823;
    precise float _827 = _451 - _824;
    precise float _828 = _458 - _825;
    precise float _829 = _809 * _828;
    precise float _830 = _810 * _827;
    precise float _831 = _829 - _830;
    precise float _832 = _810 * _826;
    precise float _833 = _808 * _828;
    precise float _834 = _832 - _833;
    precise float _835 = _808 * _827;
    precise float _836 = _809 * _826;
    precise float _837 = _835 - _836;
    float _838 = sin(_813);
    float _839 = cos(_813);
    precise float _840 = _826 * _839;
    precise float _841 = _827 * _839;
    precise float _842 = _828 * _839;
    precise float _843 = _838 * _831;
    precise float _844 = _838 * _834;
    precise float _845 = _838 * _837;
    precise float _846 = _840 + _843;
    precise float _847 = _841 + _844;
    precise float _848 = _845 + _842;
    precise float _849 = _823 + _846;
    precise float _850 = _824 + _847;
    precise float _851 = _825 + _848;
    precise float _852 = _849 - _444;
    precise float _853 = _850 - _451;
    precise float _854 = _851 - _458;
    float _855 = _750 ? 0.0 : _852;
    float _856 = _750 ? 0.0 : _853;
    float _857 = _750 ? 0.0 : _854;
    precise float _858 = _444 + _855;
    precise float _859 = _451 + _856;
    precise float _860 = _458 + _857;
    precise float _861 = cbPerFrame._m0[22u].x + _701;
    float _863;
    float _865;
    float _867;
    if (_234)
    {
        _863 = 0.0;
        _865 = 0.0;
        _867 = 0.0;
    }
    else
    {
        uint _1102 = _228.z;
        precise float _864;
        precise float _866;
        precise float _868;
        float _1388;
        float _1390;
        float _1392;
        float _1228 = 0.0;
        float _1229 = 0.0;
        float _1230 = 0.0;
        uint _1231 = _1102;
        uint _1233 = 0u;
        float _1267;
        float _1286;
        vec4 _1299;
        float _1300;
        float _1301;
        float _1314;
        float _1315;
        float _1316;
        float _1332;
        float _1333;
        float _1334;
        float _1335;
        bool _1336;
        bool _1337;
        bool _1338;
        precise float _1339;
        precise float _1340;
        precise float _1341;
        float _1342;
        float _1343;
        float _1344;
        precise float _1345;
        bool _1348;
        for (;;)
        {
            uint _1235 = _1231 & 255u;
            uint _1236 = _1235 * 24u;
            uvec3 _1245 = uvec3(texelFetch(g_forceParam, int(_1236)).x, texelFetch(g_forceParam, int(_1236 + 1u)).x, texelFetch(g_forceParam, int(_1236 + 2u)).x);
            uint _1250 = (_1235 * 24u) + 4u;
            vec4 _1263 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_1250)).x, texelFetch(g_forceParam, int(_1250 + 1u)).x, texelFetch(g_forceParam, int(_1250 + 2u)).x, texelFetch(g_forceParam, int(_1250 + 3u)).x));
            _1267 = _1263.w;
            uint _1269 = (_1235 * 24u) + 8u;
            vec4 _1282 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_1269)).x, texelFetch(g_forceParam, int(_1269 + 1u)).x, texelFetch(g_forceParam, int(_1269 + 2u)).x, texelFetch(g_forceParam, int(_1269 + 3u)).x));
            _1286 = _1282.w;
            uint _1288 = (_1235 * 24u) + 12u;
            _1299 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_1288)).x, texelFetch(g_forceParam, int(_1288 + 1u)).x, _1294, texelFetch(g_forceParam, int(_1288 + 3u)).x));
            _1300 = _1299.x;
            _1301 = _1299.w;
            uint _1303 = (_1235 * 24u) + 16u;
            vec3 _1313 = uintBitsToFloat(uvec3(texelFetch(g_forceParam, int(_1303)).x, texelFetch(g_forceParam, int(_1303 + 1u)).x, texelFetch(g_forceParam, int(_1303 + 2u)).x));
            _1314 = _1313.x;
            _1315 = _1313.y;
            _1316 = _1313.z;
            uint _1318 = (_1235 * 24u) + 20u;
            vec4 _1331 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_1318)).x, texelFetch(g_forceParam, int(_1318 + 1u)).x, texelFetch(g_forceParam, int(_1318 + 2u)).x, texelFetch(g_forceParam, int(_1318 + 3u)).x));
            _1332 = _1331.x;
            _1333 = _1331.y;
            _1334 = _1331.z;
            _1335 = _1331.w;
            _1336 = _1245.x == 1u;
            _1337 = _1245.y == 1u;
            _1338 = _1245.z == 1u;
            _1339 = _672 - _1263.x;
            _1340 = _679 - _1263.y;
            _1341 = _686 - _1263.z;
            _1342 = _1336 ? _1282.x : _1339;
            _1343 = _1336 ? _1282.y : _1340;
            _1344 = _1336 ? _1282.z : _1341;
            _1345 = dot(vec3(_1342, _1343, _1344), vec3(_1342, _1343, _1344));
            _1348 = _1345 > 0.0;
            float frontier_phi_10_pred;
            float frontier_phi_10_pred_1;
            float frontier_phi_10_pred_2;
            if (_1348)
            {
                precise float _1374 = _1339 * _1339;
                precise float _1375 = _1340 * _1340;
                precise float _1376 = _1374 + _1375;
                precise float _1377 = _1341 * _1341;
                precise float _1378 = _1377 + _1376;
                float _1379 = sqrt(_1378);
                float _1380 = inversesqrt(_1345);
                precise float _1381 = _1342 * _1380;
                precise float _1382 = _1343 * _1380;
                precise float _1383 = _1344 * _1380;
                precise float _1385 = _1379 / (isnan(0.001000000047497451305389404296875) ? _1299.y : (isnan(_1299.y) ? 0.001000000047497451305389404296875 : max(_1299.y, 0.001000000047497451305389404296875)));
                precise float _1386 = 1.0 - _1385;
                float _1740 = isnan(0.0) ? _1386 : (isnan(_1386) ? 0.0 : max(_1386, 0.0));
                float _1387 = isnan(1.0) ? _1740 : (isnan(_1740) ? 1.0 : min(_1740, 1.0));
                float _1429;
                if (_1338)
                {
                    float _1418 = inversesqrt(dot(vec3(_1339, _1340, _1341), vec3(_1339, _1340, _1341)));
                    precise float _1419 = _1339 * _1418;
                    precise float _1420 = _1340 * _1418;
                    precise float _1421 = _1341 * _1418;
                    precise float _1425 = dot(vec3(_1381, _1382, _1383), vec3(_1419, _1420, _1421)) * 0.800000011920928955078125;
                    precise float _1426 = _1425 + 0.20000000298023223876953125;
                    float _1751 = isnan(0.0) ? _1426 : (isnan(_1426) ? 0.0 : max(_1426, 0.0));
                    precise float _1428 = _1387 * (isnan(1.0) ? _1751 : (isnan(_1751) ? 1.0 : min(_1751, 1.0)));
                    _1429 = _1428;
                }
                else
                {
                    _1429 = _1387;
                }
                float frontier_phi_10_pred_15_ladder;
                float frontier_phi_10_pred_15_ladder_1;
                float frontier_phi_10_pred_15_ladder_2;
                if (_1429 > 0.0)
                {
                    bool _1460 = _1336 && (!_1338);
                    precise float _1462 = _1379 * (-4.0);
                    precise float _1465 = 6.283184051513671875 / (isnan(0.001000000047497451305389404296875) ? _1300 : (isnan(_1300) ? 0.001000000047497451305389404296875 : max(_1300, 0.001000000047497451305389404296875)));
                    precise float _1466 = cbMtdParam._m0[11u].y * _1465;
                    precise float _1467 = dot(vec2(_1381, _1383), vec2(_1339, _1341));
                    precise float _1470 = _1467 * _1466;
                    precise float _1471 = float(_1460) * _1470;
                    precise float _1472 = _861 * _1466;
                    precise float _1473 = _1472 - _1471;
                    precise float _1474 = (_1460 ? 0.0 : _1462) + _1473;
                    precise float _1476 = _1286 * sin(_1474);
                    precise float _1477 = _1382 * 0.0;
                    precise float _1478 = _1477 - _1383;
                    precise float _1479 = _1383 * 0.0;
                    precise float _1480 = _1381 * 0.0;
                    precise float _1481 = _1479 - _1480;
                    precise float _1482 = _1381 - _1477;
                    precise float _1483 = _1301 * _1476;
                    float _1484 = _1336 ? _1483 : 0.0;
                    float _1583;
                    if (_1337)
                    {
                        precise float _1545 = _1314 * 2.0;
                        precise float _1546 = _1333 + _1334;
                        precise float _1547 = _1335 + _1546;
                        precise float _1549 = 6.283184051513671875 / (isnan(0.001000000047497451305389404296875) ? _1314 : (isnan(_1314) ? 0.001000000047497451305389404296875 : max(_1314, 0.001000000047497451305389404296875)));
                        precise float _1550 = cbMtdParam._m0[11u].y * _1549;
                        precise float _1551 = _1332 * _1550;
                        precise float _1552 = (-0.0) - _1381;
                        precise float _1556 = dot(vec2(_1383, _1552), vec2(_1339, _1341)) / _1545;
                        precise float _1557 = (-0.0) - _1556;
                        float _1560 = fract(abs(_1556));
                        precise float _1561 = (-0.0) - _1560;
                        precise float _1563 = _1545 * ((_1556 >= _1557) ? _1560 : _1561);
                        precise float _1564 = _1563 * 6.283184051513671875;
                        precise float _1565 = _1564 / _1545;
                        precise float _1567 = (isnan(5.0) ? _1314 : (isnan(_1314) ? 5.0 : min(_1314, 5.0))) * sin(_1565);
                        precise float _1568 = _1467 + _1567;
                        precise float _1569 = _1314 * 0.25;
                        precise float _1570 = _861 * _1332;
                        precise float _1571 = _1570 - _1569;
                        precise float _1572 = _1571 - _1568;
                        precise float _1573 = _1332 * _1547;
                        precise float _1575 = _1572 / (isnan(0.001000000047497451305389404296875) ? _1573 : (isnan(_1573) ? 0.001000000047497451305389404296875 : max(_1573, 0.001000000047497451305389404296875)));
                        float _1576 = fract(_1575);
                        precise float _1578 = 1.0 - _1576;
                        float _1579 = (_1575 < 0.0) ? _1578 : _1576;
                        precise float _1580 = _1546 / _1547;
                        precise float _1581 = _1333 / _1547;
                        float _1616;
                        if (_1579 < _1581)
                        {
                            precise float _1601 = _1579 / _1581;
                            _1616 = _1601;
                        }
                        else
                        {
                            float frontier_phi_29_26_ladder;
                            if (_1579 < _1580)
                            {
                                precise float _1626 = _1579 - _1581;
                                precise float _1627 = _1580 - _1581;
                                precise float _1628 = _1626 / _1627;
                                precise float _1617 = 1.0 - _1628;
                                frontier_phi_29_26_ladder = _1617;
                            }
                            else
                            {
                                frontier_phi_29_26_ladder = 0.0;
                            }
                            _1616 = frontier_phi_29_26_ladder;
                        }
                        precise float _1618 = _1316 * _1616;
                        precise float _1619 = _1550 * _1467;
                        precise float _1620 = _861 * _1551;
                        precise float _1621 = _1620 - _1619;
                        precise float _1623 = _1315 + sin(_1621);
                        precise float _1625 = _1618 * abs(_1623);
                        precise float _1584 = _1625 + 0.0;
                        _1583 = _1584;
                    }
                    else
                    {
                        _1583 = 0.0;
                    }
                    precise float _1585 = _1267 + _1476;
                    precise float _1586 = _1585 + _1583;
                    precise float _1587 = _1381 * _1586;
                    precise float _1588 = _1382 * _1586;
                    precise float _1589 = _1383 * _1586;
                    precise float _1590 = _1478 * _1484;
                    precise float _1591 = _1481 * _1484;
                    precise float _1592 = _1482 * _1484;
                    precise float _1593 = _1590 + _1587;
                    precise float _1594 = _1591 + _1588;
                    precise float _1595 = _1592 + _1589;
                    precise float _1596 = _1429 * _1593;
                    precise float _1597 = _1429 * _1594;
                    precise float _1598 = _1429 * _1595;
                    precise float _1389 = _1596 * 0.0500000007450580596923828125;
                    precise float _1391 = _1597 * 0.0500000007450580596923828125;
                    precise float _1393 = _1598 * 0.0500000007450580596923828125;
                    frontier_phi_10_pred_15_ladder = _1389;
                    frontier_phi_10_pred_15_ladder_1 = _1391;
                    frontier_phi_10_pred_15_ladder_2 = _1393;
                }
                else
                {
                    frontier_phi_10_pred_15_ladder = 0.0;
                    frontier_phi_10_pred_15_ladder_1 = 0.0;
                    frontier_phi_10_pred_15_ladder_2 = 0.0;
                }
                frontier_phi_10_pred = frontier_phi_10_pred_15_ladder;
                frontier_phi_10_pred_1 = frontier_phi_10_pred_15_ladder_1;
                frontier_phi_10_pred_2 = frontier_phi_10_pred_15_ladder_2;
            }
            else
            {
                frontier_phi_10_pred = 0.0;
                frontier_phi_10_pred_1 = 0.0;
                frontier_phi_10_pred_2 = 0.0;
            }
            _1388 = frontier_phi_10_pred;
            _1390 = frontier_phi_10_pred_1;
            _1392 = frontier_phi_10_pred_2;
            _864 = _1228 + _1388;
            _866 = _1229 + _1390;
            _868 = _1230 + _1392;
            uint _1234 = _1233 + 1u;
            if (_1234 == _231)
            {
                break;
            }
            else
            {
                _1228 = _864;
                _1229 = _866;
                _1230 = _868;
                _1231 = (_1233 != 3u) ? (_1231 >> 8u) : _737;
                _1233 = _1234;
                continue;
            }
        }
        _863 = _864;
        _865 = _866;
        _867 = _868;
    }
    precise float _869 = _863 * _863;
    precise float _870 = _865 * _865;
    precise float _871 = _869 + _870;
    precise float _872 = _867 * _867;
    precise float _873 = _871 + _872;
    float _874 = sqrt(_873);
    bool _875 = _874 < 0.00011000000085914507508277893066406;
    float _879 = inversesqrt(dot(vec3(_863, _865, _867), vec3(_863, _865, _867)));
    precise float _880 = _863 * _879;
    precise float _881 = _865 * _879;
    precise float _882 = _867 * _879;
    precise float _883 = _782 * _882;
    precise float _884 = _787 * _881;
    precise float _885 = _883 - _884;
    precise float _886 = _787 * _880;
    precise float _887 = _777 * _882;
    precise float _888 = _886 - _887;
    precise float _889 = _777 * _881;
    precise float _890 = _782 * _880;
    precise float _891 = _889 - _890;
    float _895 = inversesqrt(dot(vec3(_885, _888, _891), vec3(_885, _888, _891)));
    precise float _896 = _895 * _885;
    precise float _897 = _895 * _888;
    precise float _898 = _895 * _891;
    precise float _899 = _874 + 1.0;
    precise float _901 = cbMtdParam._m0[10u].y * log2(_899);
    precise float _902 = _858 - _672;
    precise float _903 = _859 - _679;
    precise float _904 = _860 - _686;
    precise float _905 = dot(vec3(_896, _897, _898), vec3(_902, _903, _904));
    precise float _908 = _896 * _905;
    precise float _909 = _897 * _905;
    precise float _910 = _898 * _905;
    precise float _911 = _672 + _908;
    precise float _912 = _679 + _909;
    precise float _913 = _686 + _910;
    precise float _914 = _858 - _911;
    precise float _915 = _859 - _912;
    precise float _916 = _860 - _913;
    precise float _917 = _897 * _916;
    precise float _918 = _898 * _915;
    precise float _919 = _917 - _918;
    precise float _920 = _898 * _914;
    precise float _921 = _896 * _916;
    precise float _922 = _920 - _921;
    precise float _923 = _896 * _915;
    precise float _924 = _897 * _914;
    precise float _925 = _923 - _924;
    float _926 = sin(_901);
    float _927 = cos(_901);
    precise float _928 = _914 * _927;
    precise float _929 = _915 * _927;
    precise float _930 = _916 * _927;
    precise float _931 = _926 * _919;
    precise float _932 = _926 * _922;
    precise float _933 = _926 * _925;
    precise float _934 = _928 + _931;
    precise float _935 = _929 + _932;
    precise float _936 = _933 + _930;
    precise float _937 = _911 + _934;
    precise float _938 = _912 + _935;
    precise float _939 = _913 + _936;
    precise float _940 = _937 - _858;
    precise float _941 = _938 - _859;
    precise float _942 = _939 - _860;
    precise float _946 = _855 + (_875 ? 0.0 : _940);
    precise float _947 = _856 + (_875 ? 0.0 : _941);
    precise float _948 = _857 + (_875 ? 0.0 : _942);
    precise float _949 = _444 + _946;
    precise float _950 = _451 + _947;
    precise float _951 = _458 + _948;
    float _958 = (((((cbPrevObjMatrix._m0[_299].w * _253) + (cbPrevObjMatrix._m0[_264].w * _252)) + (cbPrevObjMatrix._m0[_346].w * _254)) + (cbPrevObjMatrix._m0[_393].w * _255)) + fma(_237, (((cbPrevObjMatrix._m0[_299].z * _253) + (cbPrevObjMatrix._m0[_264].z * _252)) + (cbPrevObjMatrix._m0[_346].z * _254)) + (cbPrevObjMatrix._m0[_393].z * _255), fma(_236, (((cbPrevObjMatrix._m0[_299].y * _253) + (cbPrevObjMatrix._m0[_264].y * _252)) + (cbPrevObjMatrix._m0[_346].y * _254)) + (cbPrevObjMatrix._m0[_393].y * _255), ((((cbPrevObjMatrix._m0[_299].x * _253) + (cbPrevObjMatrix._m0[_264].x * _252)) + (cbPrevObjMatrix._m0[_346].x * _254)) + (cbPrevObjMatrix._m0[_393].x * _255)) * _235))) - cbSceneParam._m0[28u].x;
    float _959 = _958 + _946;
    float _960 = (((((cbPrevObjMatrix._m0[_306].w * _253) + (cbPrevObjMatrix._m0[_271].w * _252)) + (cbPrevObjMatrix._m0[_353].w * _254)) + (cbPrevObjMatrix._m0[_400].w * _255)) + fma(_237, (((cbPrevObjMatrix._m0[_306].z * _253) + (cbPrevObjMatrix._m0[_271].z * _252)) + (cbPrevObjMatrix._m0[_353].z * _254)) + (cbPrevObjMatrix._m0[_400].z * _255), fma(_236, (((cbPrevObjMatrix._m0[_306].y * _253) + (cbPrevObjMatrix._m0[_271].y * _252)) + (cbPrevObjMatrix._m0[_353].y * _254)) + (cbPrevObjMatrix._m0[_400].y * _255), ((((cbPrevObjMatrix._m0[_306].x * _253) + (cbPrevObjMatrix._m0[_271].x * _252)) + (cbPrevObjMatrix._m0[_353].x * _254)) + (cbPrevObjMatrix._m0[_400].x * _255)) * _235))) - cbSceneParam._m0[28u].y;
    float _961 = _960 + _947;
    float _962 = (((((cbPrevObjMatrix._m0[_313].w * _253) + (cbPrevObjMatrix._m0[_278].w * _252)) + (cbPrevObjMatrix._m0[_360].w * _254)) + (cbPrevObjMatrix._m0[_407].w * _255)) + fma(_237, (((cbPrevObjMatrix._m0[_313].z * _253) + (cbPrevObjMatrix._m0[_278].z * _252)) + (cbPrevObjMatrix._m0[_360].z * _254)) + (cbPrevObjMatrix._m0[_407].z * _255), fma(_236, (((cbPrevObjMatrix._m0[_313].y * _253) + (cbPrevObjMatrix._m0[_278].y * _252)) + (cbPrevObjMatrix._m0[_360].y * _254)) + (cbPrevObjMatrix._m0[_407].y * _255), ((((cbPrevObjMatrix._m0[_313].x * _253) + (cbPrevObjMatrix._m0[_278].x * _252)) + (cbPrevObjMatrix._m0[_360].x * _254)) + (cbPrevObjMatrix._m0[_407].x * _255)) * _235))) - cbSceneParam._m0[28u].z;
    float _963 = _962 + _948;
    precise float _1013 = _949 - cbSceneParam._m0[3u].x;
    precise float _1014 = _950 - cbSceneParam._m0[3u].y;
    precise float _1015 = _951 - cbSceneParam._m0[3u].z;
    precise float _1043 = _1013 * cbSceneParam._m0[24u].x;
    precise float _1044 = _1014 * cbSceneParam._m0[24u].y;
    precise float _1045 = _1044 + _1043;
    precise float _1046 = _1015 * cbSceneParam._m0[24u].z;
    precise float _1047 = _1046 + _1045;
    precise float _1048 = 1.0 * cbSceneParam._m0[24u].w;
    precise float _1049 = _1048 + _1047;
    precise float _1050 = _1013 * cbSceneParam._m0[25u].x;
    precise float _1051 = _1014 * cbSceneParam._m0[25u].y;
    precise float _1052 = _1051 + _1050;
    precise float _1053 = _1015 * cbSceneParam._m0[25u].z;
    precise float _1054 = _1053 + _1052;
    precise float _1055 = 1.0 * cbSceneParam._m0[25u].w;
    precise float _1056 = _1055 + _1054;
    precise float _1057 = _1013 * cbSceneParam._m0[26u].x;
    precise float _1058 = _1014 * cbSceneParam._m0[26u].y;
    precise float _1059 = _1058 + _1057;
    precise float _1060 = _1015 * cbSceneParam._m0[26u].z;
    precise float _1061 = _1060 + _1059;
    precise float _1062 = 1.0 * cbSceneParam._m0[26u].w;
    precise float _1063 = _1062 + _1061;
    precise float _1064 = _1013 * cbSceneParam._m0[27u].x;
    precise float _1065 = _1014 * cbSceneParam._m0[27u].y;
    precise float _1066 = _1065 + _1064;
    precise float _1067 = _1015 * cbSceneParam._m0[27u].z;
    precise float _1068 = _1067 + _1066;
    precise float _1069 = 1.0 * cbSceneParam._m0[27u].w;
    precise float _1070 = _1069 + _1068;
    gl_Position.x = _1049;
    gl_Position.y = _1056;
    gl_Position.z = _1063;
    gl_Position.w = _1070;
    POSITION_1.x = _1049;
    POSITION_1.y = _1056;
    POSITION_1.z = _1063;
    POSITION_1.w = _1070;
    NORMAL_1.x = _629;
    NORMAL_1.y = _632;
    NORMAL_1.z = _635;
    NORMAL_1.w = float(_245);
    TANGENT_1.x = fma(_216, _432, fma(_215, _429, _426 * _214));
    TANGENT_1.y = fma(_216, _433, fma(_215, _430, _427 * _214));
    TANGENT_1.z = fma(_216, _434, fma(_215, _431, _428 * _214));
    TANGENT_1.w = (float(TANGENT.w) + (-127.0)) * 0.0078740157186985015869140625;
    TEXCOORD_2 = ((float(int(uint(TEXCOORD.x))) * 0.00048828125) * cbTexScroll._m0[0u].x) + cbTexScroll._m0[0u].z;
    TEXCOORD_1_1 = ((float(int(uint(TEXCOORD.y))) * 0.00048828125) * cbTexScroll._m0[0u].y) + cbTexScroll._m0[0u].w;
    TEXCOORD_3.x = TEXCOORD_1.x;
    TEXCOORD_3.y = TEXCOORD_1.y;
    TEXCOORD_3.z = TEXCOORD_1.z;
    TEXCOORD_3.w = COLOR_1.x;
    TEXCOORD_8.x = _1049;
    TEXCOORD_8.y = _1056;
    TEXCOORD_8.z = _1063;
    TEXCOORD_8.w = _1070;
    TEXCOORD_9.x = fma(_963, cbSceneParam._m0[29u].z, fma(_961, cbSceneParam._m0[29u].y, _959 * cbSceneParam._m0[29u].x)) + cbSceneParam._m0[29u].w;
    TEXCOORD_9.y = fma(_963, cbSceneParam._m0[30u].z, fma(_961, cbSceneParam._m0[30u].y, _959 * cbSceneParam._m0[30u].x)) + cbSceneParam._m0[30u].w;
    TEXCOORD_9.z = fma(_963, cbSceneParam._m0[31u].z, fma(_961, cbSceneParam._m0[31u].y, _959 * cbSceneParam._m0[31u].x)) + cbSceneParam._m0[31u].w;
    TEXCOORD_9.w = fma(_963, cbSceneParam._m0[32u].z, fma(_961, cbSceneParam._m0[32u].y, _959 * cbSceneParam._m0[32u].x)) + cbSceneParam._m0[32u].w;
    TEXCOORD_10.x = _629;
    TEXCOORD_10.y = _632;
    TEXCOORD_10.z = _635;
}


