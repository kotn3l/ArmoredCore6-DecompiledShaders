#version 460

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[12];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 5, std140) uniform cbObjMatrixUBO
{
    vec4 _m0[6];
} cbObjMatrix;

layout(set = 0, binding = 10, std140) uniform cbInstanceIdxParamUBO
{
    vec4 _m0[1];
} cbInstanceIdxParam;

layout(set = 0, binding = 11, std140) uniform cbTexScrollUBO
{
    vec4 _m0[4];
} cbTexScroll;

layout(set = 0, binding = 26) uniform usamplerBuffer g_forceParam;
layout(set = 0, binding = 25) uniform usamplerBuffer g_InstanceIndexBuffer;

layout(location = 0) in vec3 POSITION;
layout(location = 1) in uvec4 NORMAL;
layout(location = 2) in uvec4 TANGENT;
layout(location = 3) in uvec4 BLENDINDICES;
layout(location = 4) in vec4 BLENDWEIGHT;
layout(location = 5) in vec4 COLOR_1;
layout(location = 6) in ivec2 TEXCOORD;
layout(location = 7) in vec4 TEXCOORD_1;
layout(location = 1) out vec4 POSITION_1;
layout(location = 2) out vec4 NORMAL_1;
layout(location = 3) out vec4 TANGENT_1;
layout(location = 4) out float TEXCOORD_2;
layout(location = 4, component = 1) out float TEXCOORD_1_1;
layout(location = 5) out vec4 TEXCOORD_3;

uint _917;
uint _1040;

void main()
{
    uint _79 = uint(gl_InstanceIndex) - uint(gl_BaseInstance);
    gl_Position.x = 0.0;
    gl_Position.y = 0.0;
    gl_Position.z = 0.0;
    gl_Position.w = 0.0;
    POSITION_1.x = 0.0;
    POSITION_1.y = 0.0;
    POSITION_1.z = 0.0;
    POSITION_1.w = 0.0;
    NORMAL_1.x = 0.0;
    NORMAL_1.y = 0.0;
    NORMAL_1.z = 0.0;
    NORMAL_1.w = 0.0;
    TANGENT_1.x = 0.0;
    TANGENT_1.y = 0.0;
    TANGENT_1.z = 0.0;
    TANGENT_1.w = 0.0;
    TEXCOORD_2 = 0.0;
    TEXCOORD_1_1 = 0.0;
    TEXCOORD_3.x = 0.0;
    TEXCOORD_3.y = 0.0;
    TEXCOORD_3.z = 0.0;
    TEXCOORD_3.w = 0.0;
    float _183 = (float(NORMAL.x) + (-127.0)) * 0.0078740157186985015869140625;
    float _185 = (float(NORMAL.y) + (-127.0)) * 0.0078740157186985015869140625;
    float _186 = (float(NORMAL.z) + (-127.0)) * 0.0078740157186985015869140625;
    float _195 = (float(TANGENT.x) + (-127.0)) * 0.0078740157186985015869140625;
    float _196 = (float(TANGENT.y) + (-127.0)) * 0.0078740157186985015869140625;
    float _197 = (float(TANGENT.z) + (-127.0)) * 0.0078740157186985015869140625;
    uint _203 = _79 * 13u;
    uvec4 _209 = floatBitsToUint(cbInstanceData._m0[_203 + 7u]);
    uint _212 = min(_209.y, 8u);
    bool _215 = _212 == 0u;
    precise float _216 = POSITION.x + 0.0;
    precise float _217 = POSITION.y + 0.0;
    precise float _218 = POSITION.z + 0.0;
    uint _223 = floatBitsToUint(cbInstanceIdxParam._m0[0u]).x + _79;
    uvec4 _225 = texelFetch(g_InstanceIndexBuffer, int(_223));
    uint _226 = _225.x;
    precise float _227 = dot(vec4(1.0), vec4(BLENDWEIGHT.x, BLENDWEIGHT.y, BLENDWEIGHT.z, BLENDWEIGHT.w));
    float _231 = isnan(_227) ? 0.001000000047497451305389404296875 : (isnan(0.001000000047497451305389404296875) ? _227 : max(0.001000000047497451305389404296875, _227));
    precise float _233 = BLENDWEIGHT.x / _231;
    precise float _234 = BLENDWEIGHT.y / _231;
    precise float _235 = BLENDWEIGHT.z / _231;
    precise float _236 = BLENDWEIGHT.w / _231;
    uvec4 _242 = floatBitsToUint(cbInstanceData._m0[(_226 * 13u) + 4u]);
    uint _243 = _242.x;
    uint _245 = (_243 + uint(float(BLENDINDICES.x))) * 3u;
    uint _252 = _245 + 1u;
    uint _259 = _245 + 2u;
    precise float _266 = _233 * cbObjMatrix._m0[_245].x;
    precise float _267 = _233 * cbObjMatrix._m0[_252].x;
    precise float _268 = _233 * cbObjMatrix._m0[_259].x;
    precise float _269 = _233 * cbObjMatrix._m0[_245].y;
    precise float _270 = _233 * cbObjMatrix._m0[_252].y;
    precise float _271 = _233 * cbObjMatrix._m0[_259].y;
    precise float _272 = _233 * cbObjMatrix._m0[_245].z;
    precise float _273 = _233 * cbObjMatrix._m0[_252].z;
    precise float _274 = _233 * cbObjMatrix._m0[_259].z;
    precise float _275 = _233 * cbObjMatrix._m0[_245].w;
    precise float _276 = _233 * cbObjMatrix._m0[_252].w;
    precise float _277 = _233 * cbObjMatrix._m0[_259].w;
    uint _280 = (_243 + uint(float(BLENDINDICES.y))) * 3u;
    uint _287 = _280 + 1u;
    uint _294 = _280 + 2u;
    precise float _301 = _234 * cbObjMatrix._m0[_280].x;
    precise float _302 = _234 * cbObjMatrix._m0[_287].x;
    precise float _303 = _234 * cbObjMatrix._m0[_294].x;
    precise float _304 = _234 * cbObjMatrix._m0[_280].y;
    precise float _305 = _234 * cbObjMatrix._m0[_287].y;
    precise float _306 = _234 * cbObjMatrix._m0[_294].y;
    precise float _307 = _234 * cbObjMatrix._m0[_280].z;
    precise float _308 = _234 * cbObjMatrix._m0[_287].z;
    precise float _309 = _234 * cbObjMatrix._m0[_294].z;
    precise float _310 = _234 * cbObjMatrix._m0[_280].w;
    precise float _311 = _234 * cbObjMatrix._m0[_287].w;
    precise float _312 = _234 * cbObjMatrix._m0[_294].w;
    precise float _313 = _266 + _301;
    precise float _314 = _267 + _302;
    precise float _315 = _268 + _303;
    precise float _316 = _269 + _304;
    precise float _317 = _270 + _305;
    precise float _318 = _271 + _306;
    precise float _319 = _272 + _307;
    precise float _320 = _273 + _308;
    precise float _321 = _274 + _309;
    precise float _322 = _275 + _310;
    precise float _323 = _276 + _311;
    precise float _324 = _277 + _312;
    uint _327 = (_243 + uint(float(BLENDINDICES.z))) * 3u;
    uint _334 = _327 + 1u;
    uint _341 = _327 + 2u;
    precise float _348 = _235 * cbObjMatrix._m0[_327].x;
    precise float _349 = _235 * cbObjMatrix._m0[_334].x;
    precise float _350 = _235 * cbObjMatrix._m0[_341].x;
    precise float _351 = _235 * cbObjMatrix._m0[_327].y;
    precise float _352 = _235 * cbObjMatrix._m0[_334].y;
    precise float _353 = _235 * cbObjMatrix._m0[_341].y;
    precise float _354 = _235 * cbObjMatrix._m0[_327].z;
    precise float _355 = _235 * cbObjMatrix._m0[_334].z;
    precise float _356 = _235 * cbObjMatrix._m0[_341].z;
    precise float _357 = _235 * cbObjMatrix._m0[_327].w;
    precise float _358 = _235 * cbObjMatrix._m0[_334].w;
    precise float _359 = _235 * cbObjMatrix._m0[_341].w;
    precise float _360 = _313 + _348;
    precise float _361 = _314 + _349;
    precise float _362 = _315 + _350;
    precise float _363 = _316 + _351;
    precise float _364 = _317 + _352;
    precise float _365 = _318 + _353;
    precise float _366 = _319 + _354;
    precise float _367 = _320 + _355;
    precise float _368 = _321 + _356;
    precise float _369 = _322 + _357;
    precise float _370 = _323 + _358;
    precise float _371 = _324 + _359;
    uint _374 = (_243 + uint(float(BLENDINDICES.w))) * 3u;
    uint _381 = _374 + 1u;
    uint _388 = _374 + 2u;
    precise float _395 = _236 * cbObjMatrix._m0[_374].x;
    precise float _396 = _236 * cbObjMatrix._m0[_381].x;
    precise float _397 = _236 * cbObjMatrix._m0[_388].x;
    precise float _398 = _236 * cbObjMatrix._m0[_374].y;
    precise float _399 = _236 * cbObjMatrix._m0[_381].y;
    precise float _400 = _236 * cbObjMatrix._m0[_388].y;
    precise float _401 = _236 * cbObjMatrix._m0[_374].z;
    precise float _402 = _236 * cbObjMatrix._m0[_381].z;
    precise float _403 = _236 * cbObjMatrix._m0[_388].z;
    precise float _404 = _236 * cbObjMatrix._m0[_374].w;
    precise float _405 = _236 * cbObjMatrix._m0[_381].w;
    precise float _406 = _236 * cbObjMatrix._m0[_388].w;
    precise float _407 = _360 + _395;
    precise float _408 = _361 + _396;
    precise float _409 = _362 + _397;
    precise float _410 = _363 + _398;
    precise float _411 = _364 + _399;
    precise float _412 = _365 + _400;
    precise float _413 = _366 + _401;
    precise float _414 = _367 + _402;
    precise float _415 = _368 + _403;
    precise float _416 = _369 + _404;
    precise float _417 = _370 + _405;
    precise float _418 = _371 + _406;
    precise float _419 = _216 * _407;
    precise float _420 = _217 * _410;
    precise float _421 = _420 + _419;
    precise float _422 = _218 * _413;
    precise float _423 = _422 + _421;
    precise float _424 = 1.0 * _416;
    precise float _425 = _424 + _423;
    precise float _426 = _216 * _408;
    precise float _427 = _217 * _411;
    precise float _428 = _427 + _426;
    precise float _429 = _218 * _414;
    precise float _430 = _429 + _428;
    precise float _431 = 1.0 * _417;
    precise float _432 = _431 + _430;
    precise float _433 = _216 * _409;
    precise float _434 = _217 * _412;
    precise float _435 = _434 + _433;
    precise float _436 = _218 * _415;
    precise float _437 = _436 + _435;
    precise float _438 = 1.0 * _418;
    precise float _439 = _438 + _437;
    uint _465 = _203 + 1u;
    uint _472 = _203 + 2u;
    precise float _479 = TEXCOORD_1.x * cbInstanceData._m0[_203].x;
    precise float _480 = TEXCOORD_1.y * cbInstanceData._m0[_203].y;
    precise float _481 = _480 + _479;
    precise float _482 = TEXCOORD_1.z * cbInstanceData._m0[_203].z;
    precise float _483 = _482 + _481;
    precise float _484 = 1.0 * cbInstanceData._m0[_203].w;
    precise float _485 = _484 + _483;
    precise float _486 = TEXCOORD_1.x * cbInstanceData._m0[_465].x;
    precise float _487 = TEXCOORD_1.y * cbInstanceData._m0[_465].y;
    precise float _488 = _487 + _486;
    precise float _489 = TEXCOORD_1.z * cbInstanceData._m0[_465].z;
    precise float _490 = _489 + _488;
    precise float _491 = 1.0 * cbInstanceData._m0[_465].w;
    precise float _492 = _491 + _490;
    precise float _493 = TEXCOORD_1.x * cbInstanceData._m0[_472].x;
    precise float _494 = TEXCOORD_1.y * cbInstanceData._m0[_472].y;
    precise float _495 = _494 + _493;
    precise float _496 = TEXCOORD_1.z * cbInstanceData._m0[_472].z;
    precise float _497 = _496 + _495;
    precise float _498 = 1.0 * cbInstanceData._m0[_472].w;
    precise float _499 = _498 + _497;
    precise float _505 = _425 - _485;
    precise float _506 = _432 - _492;
    precise float _507 = _439 - _499;
    precise float _508 = _505 * _505;
    precise float _509 = _506 * _506;
    precise float _510 = _508 + _509;
    precise float _511 = _507 * _507;
    precise float _512 = _510 + _511;
    precise float _514 = cbMtdParam._m0[10u].z * sqrt(_512);
    precise float _519 = cbInstanceData._m0[_203].x * 0.0;
    precise float _520 = 0.0 * cbInstanceData._m0[_203].y;
    precise float _521 = _520 + _519;
    precise float _522 = 0.0 * cbInstanceData._m0[_203].z;
    precise float _523 = _522 + _521;
    precise float _524 = 1.0 * cbInstanceData._m0[_203].w;
    precise float _525 = _524 + _523;
    precise float _526 = cbInstanceData._m0[_465].x * 0.0;
    precise float _527 = 0.0 * cbInstanceData._m0[_465].y;
    precise float _528 = _527 + _526;
    precise float _529 = 0.0 * cbInstanceData._m0[_465].z;
    precise float _530 = _529 + _528;
    precise float _531 = 1.0 * cbInstanceData._m0[_465].w;
    precise float _532 = _531 + _530;
    precise float _533 = cbInstanceData._m0[_472].x * 0.0;
    precise float _534 = 0.0 * cbInstanceData._m0[_472].y;
    precise float _535 = _534 + _533;
    precise float _536 = 0.0 * cbInstanceData._m0[_472].z;
    precise float _537 = _536 + _535;
    precise float _538 = 1.0 * cbInstanceData._m0[_472].w;
    precise float _539 = _538 + _537;
    precise float _542 = _425 * _425;
    precise float _543 = _432 * _432;
    precise float _544 = _542 + _543;
    precise float _545 = _439 * _439;
    precise float _546 = _544 + _545;
    precise float _548 = cbMtdParam._m0[11u].x * sqrt(_546);
    precise float _549 = cbPerFrame._m0[22u].x + _548;
    uint _550 = _209.w;
    float _551;
    float _553;
    float _555;
    if (_215)
    {
        _551 = 0.0;
        _553 = 0.0;
        _555 = 0.0;
    }
    else
    {
        uint _675 = _209.z;
        precise float _552;
        precise float _554;
        precise float _556;
        float _1110;
        float _1112;
        float _1114;
        float _849 = 0.0;
        float _850 = 0.0;
        float _851 = 0.0;
        uint _852 = _675;
        uint _854 = 0u;
        float _890;
        float _909;
        vec4 _922;
        float _923;
        float _924;
        float _938;
        float _939;
        float _940;
        float _957;
        float _958;
        float _959;
        float _960;
        bool _961;
        bool _962;
        bool _963;
        precise float _964;
        precise float _965;
        precise float _966;
        float _967;
        float _968;
        float _969;
        precise float _970;
        bool _973;
        for (;;)
        {
            uint _856 = _852 & 255u;
            uint _858 = _856 * 24u;
            uvec3 _868 = uvec3(texelFetch(g_forceParam, int(_858)).x, texelFetch(g_forceParam, int(_858 + 1u)).x, texelFetch(g_forceParam, int(_858 + 2u)).x);
            uint _873 = (_856 * 24u) + 4u;
            vec4 _886 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_873)).x, texelFetch(g_forceParam, int(_873 + 1u)).x, texelFetch(g_forceParam, int(_873 + 2u)).x, texelFetch(g_forceParam, int(_873 + 3u)).x));
            _890 = _886.w;
            uint _892 = (_856 * 24u) + 8u;
            vec4 _905 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_892)).x, texelFetch(g_forceParam, int(_892 + 1u)).x, texelFetch(g_forceParam, int(_892 + 2u)).x, texelFetch(g_forceParam, int(_892 + 3u)).x));
            _909 = _905.w;
            uint _911 = (_856 * 24u) + 12u;
            _922 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_911)).x, texelFetch(g_forceParam, int(_911 + 1u)).x, _917, texelFetch(g_forceParam, int(_911 + 3u)).x));
            _923 = _922.x;
            _924 = _922.w;
            uint _927 = (_856 * 24u) + 16u;
            vec3 _937 = uintBitsToFloat(uvec3(texelFetch(g_forceParam, int(_927)).x, texelFetch(g_forceParam, int(_927 + 1u)).x, texelFetch(g_forceParam, int(_927 + 2u)).x));
            _938 = _937.x;
            _939 = _937.y;
            _940 = _937.z;
            uint _943 = (_856 * 24u) + 20u;
            vec4 _956 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_943)).x, texelFetch(g_forceParam, int(_943 + 1u)).x, texelFetch(g_forceParam, int(_943 + 2u)).x, texelFetch(g_forceParam, int(_943 + 3u)).x));
            _957 = _956.x;
            _958 = _956.y;
            _959 = _956.z;
            _960 = _956.w;
            _961 = _868.x == 1u;
            _962 = _868.y == 1u;
            _963 = _868.z == 1u;
            _964 = _525 - _886.x;
            _965 = _532 - _886.y;
            _966 = _539 - _886.z;
            _967 = _961 ? _905.x : _964;
            _968 = _961 ? _905.y : _965;
            _969 = _961 ? _905.z : _966;
            _970 = dot(vec3(_967, _968, _969), vec3(_967, _968, _969));
            _973 = _970 > 0.0;
            float frontier_phi_8_pred;
            float frontier_phi_8_pred_1;
            float frontier_phi_8_pred_2;
            if (_973)
            {
                precise float _1096 = _964 * _964;
                precise float _1097 = _965 * _965;
                precise float _1098 = _1096 + _1097;
                precise float _1099 = _966 * _966;
                precise float _1100 = _1099 + _1098;
                float _1101 = sqrt(_1100);
                float _1102 = inversesqrt(_970);
                precise float _1103 = _967 * _1102;
                precise float _1104 = _968 * _1102;
                precise float _1105 = _969 * _1102;
                precise float _1107 = _1101 / (isnan(0.001000000047497451305389404296875) ? _922.y : (isnan(_922.y) ? 0.001000000047497451305389404296875 : max(_922.y, 0.001000000047497451305389404296875)));
                precise float _1108 = 1.0 - _1107;
                float _1439 = isnan(0.0) ? _1108 : (isnan(_1108) ? 0.0 : max(_1108, 0.0));
                float _1109 = isnan(1.0) ? _1439 : (isnan(_1439) ? 1.0 : min(_1439, 1.0));
                float _1159;
                if (_963)
                {
                    float _1146 = inversesqrt(dot(vec3(_964, _965, _966), vec3(_964, _965, _966)));
                    precise float _1147 = _964 * _1146;
                    precise float _1148 = _965 * _1146;
                    precise float _1149 = _966 * _1146;
                    precise float _1153 = dot(vec3(_1103, _1104, _1105), vec3(_1147, _1148, _1149)) * 0.800000011920928955078125;
                    precise float _1155 = _1153 + 0.20000000298023223876953125;
                    float _1450 = isnan(0.0) ? _1155 : (isnan(_1155) ? 0.0 : max(_1155, 0.0));
                    precise float _1158 = _1109 * (isnan(1.0) ? _1450 : (isnan(_1450) ? 1.0 : min(_1450, 1.0)));
                    _1159 = _1158;
                }
                else
                {
                    _1159 = _1109;
                }
                float frontier_phi_8_pred_12_ladder;
                float frontier_phi_8_pred_12_ladder_1;
                float frontier_phi_8_pred_12_ladder_2;
                if (_1159 > 0.0)
                {
                    bool _1178 = _961 && (!_963);
                    precise float _1180 = _1101 * (-4.0);
                    precise float _1184 = 6.283184051513671875 / (isnan(0.001000000047497451305389404296875) ? _923 : (isnan(_923) ? 0.001000000047497451305389404296875 : max(_923, 0.001000000047497451305389404296875)));
                    precise float _1186 = dot(vec2(_1103, _1105), vec2(_964, _966));
                    precise float _1190 = _1184 * _1186;
                    precise float _1191 = float(_1178) * _1190;
                    precise float _1192 = _549 * _1184;
                    precise float _1193 = _1192 - _1191;
                    precise float _1194 = (_1178 ? 0.0 : _1180) + _1193;
                    precise float _1196 = _909 * sin(_1194);
                    precise float _1197 = _1104 * 0.0;
                    precise float _1198 = _1197 - _1105;
                    precise float _1199 = _1105 * 0.0;
                    precise float _1200 = _1103 * 0.0;
                    precise float _1201 = _1199 - _1200;
                    precise float _1202 = _1103 - _1197;
                    precise float _1203 = _924 * _1196;
                    float _1204 = _961 ? _1203 : 0.0;
                    float _1273;
                    if (_962)
                    {
                        precise float _1233 = _938 * 2.0;
                        precise float _1235 = _958 + _959;
                        precise float _1236 = _960 + _1235;
                        precise float _1238 = 6.283184051513671875 / (isnan(0.001000000047497451305389404296875) ? _938 : (isnan(_938) ? 0.001000000047497451305389404296875 : max(_938, 0.001000000047497451305389404296875)));
                        precise float _1239 = _957 * _1238;
                        precise float _1240 = (-0.0) - _1103;
                        precise float _1245 = dot(vec2(_1105, _1240), vec2(_964, _966)) / _1233;
                        precise float _1246 = (-0.0) - _1245;
                        float _1249 = fract(abs(_1245));
                        precise float _1250 = (-0.0) - _1249;
                        precise float _1252 = _1233 * ((_1245 >= _1246) ? _1249 : _1250);
                        precise float _1253 = _1252 * 6.283184051513671875;
                        precise float _1254 = _1253 / _1233;
                        precise float _1256 = (isnan(5.0) ? _938 : (isnan(_938) ? 5.0 : min(_938, 5.0))) * sin(_1254);
                        precise float _1257 = _1186 + _1256;
                        precise float _1258 = _938 * 0.25;
                        precise float _1260 = _549 * _957;
                        precise float _1261 = _1260 - _1258;
                        precise float _1262 = _1261 - _1257;
                        precise float _1263 = _957 * _1236;
                        precise float _1265 = _1262 / (isnan(0.001000000047497451305389404296875) ? _1263 : (isnan(_1263) ? 0.001000000047497451305389404296875 : max(_1263, 0.001000000047497451305389404296875)));
                        float _1266 = fract(_1265);
                        precise float _1268 = 1.0 - _1266;
                        float _1269 = (_1265 < 0.0) ? _1268 : _1266;
                        precise float _1270 = _1235 / _1236;
                        precise float _1271 = _958 / _1236;
                        float _1349;
                        if (_1269 < _1271)
                        {
                            precise float _1345 = _1269 / _1271;
                            _1349 = _1345;
                        }
                        else
                        {
                            float frontier_phi_27_24_ladder;
                            if (_1269 < _1270)
                            {
                                precise float _1359 = _1269 - _1271;
                                precise float _1360 = _1270 - _1271;
                                precise float _1361 = _1359 / _1360;
                                precise float _1350 = 1.0 - _1361;
                                frontier_phi_27_24_ladder = _1350;
                            }
                            else
                            {
                                frontier_phi_27_24_ladder = 0.0;
                            }
                            _1349 = frontier_phi_27_24_ladder;
                        }
                        precise float _1351 = _940 * _1349;
                        precise float _1352 = _1238 * _1186;
                        precise float _1353 = _549 * _1239;
                        precise float _1354 = _1353 - _1352;
                        precise float _1356 = _939 + sin(_1354);
                        precise float _1358 = _1351 * abs(_1356);
                        precise float _1274 = _1358 + 0.0;
                        _1273 = _1274;
                    }
                    else
                    {
                        _1273 = 0.0;
                    }
                    precise float _1275 = _890 + _1196;
                    precise float _1276 = _1275 + _1273;
                    precise float _1277 = _1103 * _1276;
                    precise float _1278 = _1104 * _1276;
                    precise float _1279 = _1105 * _1276;
                    precise float _1280 = _1198 * _1204;
                    precise float _1281 = _1201 * _1204;
                    precise float _1282 = _1202 * _1204;
                    precise float _1283 = _1280 + _1277;
                    precise float _1284 = _1281 + _1278;
                    precise float _1285 = _1282 + _1279;
                    precise float _1286 = _1159 * _1283;
                    precise float _1287 = _1159 * _1284;
                    precise float _1288 = _1159 * _1285;
                    precise float _1111 = _1286 * 0.0500000007450580596923828125;
                    precise float _1113 = _1287 * 0.0500000007450580596923828125;
                    precise float _1115 = _1288 * 0.0500000007450580596923828125;
                    frontier_phi_8_pred_12_ladder = _1111;
                    frontier_phi_8_pred_12_ladder_1 = _1113;
                    frontier_phi_8_pred_12_ladder_2 = _1115;
                }
                else
                {
                    frontier_phi_8_pred_12_ladder = 0.0;
                    frontier_phi_8_pred_12_ladder_1 = 0.0;
                    frontier_phi_8_pred_12_ladder_2 = 0.0;
                }
                frontier_phi_8_pred = frontier_phi_8_pred_12_ladder;
                frontier_phi_8_pred_1 = frontier_phi_8_pred_12_ladder_1;
                frontier_phi_8_pred_2 = frontier_phi_8_pred_12_ladder_2;
            }
            else
            {
                frontier_phi_8_pred = 0.0;
                frontier_phi_8_pred_1 = 0.0;
                frontier_phi_8_pred_2 = 0.0;
            }
            _1110 = frontier_phi_8_pred;
            _1112 = frontier_phi_8_pred_1;
            _1114 = frontier_phi_8_pred_2;
            _552 = _849 + _1110;
            _554 = _850 + _1112;
            _556 = _851 + _1114;
            uint _855 = _854 + 1u;
            if (_855 == _212)
            {
                break;
            }
            else
            {
                _849 = _552;
                _850 = _554;
                _851 = _556;
                _852 = (_854 != 3u) ? (_852 >> 8u) : _550;
                _854 = _855;
                continue;
            }
        }
        _551 = _552;
        _553 = _554;
        _555 = _556;
    }
    precise float _557 = _551 * _551;
    precise float _558 = _553 * _553;
    precise float _559 = _557 + _558;
    precise float _560 = _555 * _555;
    precise float _561 = _559 + _560;
    float _562 = sqrt(_561);
    bool _563 = _562 < 0.00011000000085914507508277893066406;
    float _568 = inversesqrt(dot(vec3(cbInstanceData._m0[_203].x, cbInstanceData._m0[_465].x, cbInstanceData._m0[_472].x), vec3(cbInstanceData._m0[_203].x, cbInstanceData._m0[_465].x, cbInstanceData._m0[_472].x)));
    precise float _569 = cbInstanceData._m0[_203].x * _568;
    precise float _570 = cbInstanceData._m0[_465].x * _568;
    precise float _571 = cbInstanceData._m0[_472].x * _568;
    float _575 = inversesqrt(dot(vec3(cbInstanceData._m0[_203].y, cbInstanceData._m0[_465].y, cbInstanceData._m0[_472].y), vec3(cbInstanceData._m0[_203].y, cbInstanceData._m0[_465].y, cbInstanceData._m0[_472].y)));
    precise float _576 = cbInstanceData._m0[_203].y * _575;
    precise float _577 = cbInstanceData._m0[_465].y * _575;
    precise float _578 = cbInstanceData._m0[_472].y * _575;
    float _582 = inversesqrt(dot(vec3(cbInstanceData._m0[_203].z, cbInstanceData._m0[_465].z, cbInstanceData._m0[_472].z), vec3(cbInstanceData._m0[_203].z, cbInstanceData._m0[_465].z, cbInstanceData._m0[_472].z)));
    precise float _583 = cbInstanceData._m0[_203].z * _582;
    precise float _584 = cbInstanceData._m0[_465].z * _582;
    precise float _585 = cbInstanceData._m0[_472].z * _582;
    precise float _586 = _569 * 0.0;
    precise float _587 = 1.0 * _576;
    precise float _588 = _587 + _586;
    precise float _589 = 0.0 * _583;
    precise float _590 = _589 + _588;
    precise float _591 = _570 * 0.0;
    precise float _592 = 1.0 * _577;
    precise float _593 = _592 + _591;
    precise float _594 = 0.0 * _584;
    precise float _595 = _594 + _593;
    precise float _596 = _571 * 0.0;
    precise float _597 = 1.0 * _578;
    precise float _598 = _597 + _596;
    precise float _599 = 0.0 * _585;
    precise float _600 = _599 + _598;
    float _604 = inversesqrt(dot(vec3(_551, _553, _555), vec3(_551, _553, _555)));
    precise float _605 = _551 * _604;
    precise float _606 = _553 * _604;
    precise float _607 = _555 * _604;
    precise float _608 = _595 * _607;
    precise float _609 = _600 * _606;
    precise float _610 = _608 - _609;
    precise float _611 = _600 * _605;
    precise float _612 = _590 * _607;
    precise float _613 = _611 - _612;
    precise float _614 = _590 * _606;
    precise float _615 = _595 * _605;
    precise float _616 = _614 - _615;
    float _620 = inversesqrt(dot(vec3(_610, _613, _616), vec3(_610, _613, _616)));
    precise float _621 = _620 * _610;
    precise float _622 = _620 * _613;
    precise float _623 = _620 * _616;
    precise float _624 = _562 + 1.0;
    precise float _626 = cbMtdParam._m0[10u].w * log2(_624);
    precise float _627 = _425 - _525;
    precise float _628 = _432 - _532;
    precise float _629 = _439 - _539;
    precise float _630 = dot(vec3(_621, _622, _623), vec3(_627, _628, _629));
    precise float _633 = _621 * _630;
    precise float _634 = _622 * _630;
    precise float _635 = _623 * _630;
    precise float _636 = _525 + _633;
    precise float _637 = _532 + _634;
    precise float _638 = _539 + _635;
    precise float _639 = _425 - _636;
    precise float _640 = _432 - _637;
    precise float _641 = _439 - _638;
    precise float _642 = _622 * _641;
    precise float _643 = _623 * _640;
    precise float _644 = _642 - _643;
    precise float _645 = _623 * _639;
    precise float _646 = _621 * _641;
    precise float _647 = _645 - _646;
    precise float _648 = _621 * _640;
    precise float _649 = _622 * _639;
    precise float _650 = _648 - _649;
    float _651 = sin(_626);
    float _652 = cos(_626);
    precise float _653 = _639 * _652;
    precise float _654 = _640 * _652;
    precise float _655 = _641 * _652;
    precise float _656 = _651 * _644;
    precise float _657 = _651 * _647;
    precise float _658 = _651 * _650;
    precise float _659 = _653 + _656;
    precise float _660 = _654 + _657;
    precise float _661 = _658 + _655;
    precise float _662 = _636 + _659;
    precise float _663 = _637 + _660;
    precise float _664 = _638 + _661;
    precise float _665 = _662 - _425;
    precise float _666 = _663 - _432;
    precise float _667 = _664 - _439;
    float _668 = _563 ? 0.0 : _665;
    float _669 = _563 ? 0.0 : _666;
    float _670 = _563 ? 0.0 : _667;
    precise float _671 = _425 + _668;
    precise float _672 = _432 + _669;
    precise float _673 = _439 + _670;
    precise float _674 = cbPerFrame._m0[22u].x + _514;
    float _676;
    float _678;
    float _680;
    if (_215)
    {
        _676 = 0.0;
        _678 = 0.0;
        _680 = 0.0;
    }
    else
    {
        uint _848 = _209.z;
        precise float _677;
        precise float _679;
        precise float _681;
        float _1134;
        float _1136;
        float _1138;
        float _974 = 0.0;
        float _975 = 0.0;
        float _976 = 0.0;
        uint _977 = _848;
        uint _979 = 0u;
        float _1013;
        float _1032;
        vec4 _1045;
        float _1046;
        float _1047;
        float _1060;
        float _1061;
        float _1062;
        float _1078;
        float _1079;
        float _1080;
        float _1081;
        bool _1082;
        bool _1083;
        bool _1084;
        precise float _1085;
        precise float _1086;
        precise float _1087;
        float _1088;
        float _1089;
        float _1090;
        precise float _1091;
        bool _1094;
        for (;;)
        {
            uint _981 = _977 & 255u;
            uint _982 = _981 * 24u;
            uvec3 _991 = uvec3(texelFetch(g_forceParam, int(_982)).x, texelFetch(g_forceParam, int(_982 + 1u)).x, texelFetch(g_forceParam, int(_982 + 2u)).x);
            uint _996 = (_981 * 24u) + 4u;
            vec4 _1009 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_996)).x, texelFetch(g_forceParam, int(_996 + 1u)).x, texelFetch(g_forceParam, int(_996 + 2u)).x, texelFetch(g_forceParam, int(_996 + 3u)).x));
            _1013 = _1009.w;
            uint _1015 = (_981 * 24u) + 8u;
            vec4 _1028 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_1015)).x, texelFetch(g_forceParam, int(_1015 + 1u)).x, texelFetch(g_forceParam, int(_1015 + 2u)).x, texelFetch(g_forceParam, int(_1015 + 3u)).x));
            _1032 = _1028.w;
            uint _1034 = (_981 * 24u) + 12u;
            _1045 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_1034)).x, texelFetch(g_forceParam, int(_1034 + 1u)).x, _1040, texelFetch(g_forceParam, int(_1034 + 3u)).x));
            _1046 = _1045.x;
            _1047 = _1045.w;
            uint _1049 = (_981 * 24u) + 16u;
            vec3 _1059 = uintBitsToFloat(uvec3(texelFetch(g_forceParam, int(_1049)).x, texelFetch(g_forceParam, int(_1049 + 1u)).x, texelFetch(g_forceParam, int(_1049 + 2u)).x));
            _1060 = _1059.x;
            _1061 = _1059.y;
            _1062 = _1059.z;
            uint _1064 = (_981 * 24u) + 20u;
            vec4 _1077 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_1064)).x, texelFetch(g_forceParam, int(_1064 + 1u)).x, texelFetch(g_forceParam, int(_1064 + 2u)).x, texelFetch(g_forceParam, int(_1064 + 3u)).x));
            _1078 = _1077.x;
            _1079 = _1077.y;
            _1080 = _1077.z;
            _1081 = _1077.w;
            _1082 = _991.x == 1u;
            _1083 = _991.y == 1u;
            _1084 = _991.z == 1u;
            _1085 = _485 - _1009.x;
            _1086 = _492 - _1009.y;
            _1087 = _499 - _1009.z;
            _1088 = _1082 ? _1028.x : _1085;
            _1089 = _1082 ? _1028.y : _1086;
            _1090 = _1082 ? _1028.z : _1087;
            _1091 = dot(vec3(_1088, _1089, _1090), vec3(_1088, _1089, _1090));
            _1094 = _1091 > 0.0;
            float frontier_phi_10_pred;
            float frontier_phi_10_pred_1;
            float frontier_phi_10_pred_2;
            if (_1094)
            {
                precise float _1120 = _1085 * _1085;
                precise float _1121 = _1086 * _1086;
                precise float _1122 = _1120 + _1121;
                precise float _1123 = _1087 * _1087;
                precise float _1124 = _1123 + _1122;
                float _1125 = sqrt(_1124);
                float _1126 = inversesqrt(_1091);
                precise float _1127 = _1088 * _1126;
                precise float _1128 = _1089 * _1126;
                precise float _1129 = _1090 * _1126;
                precise float _1131 = _1125 / (isnan(0.001000000047497451305389404296875) ? _1045.y : (isnan(_1045.y) ? 0.001000000047497451305389404296875 : max(_1045.y, 0.001000000047497451305389404296875)));
                precise float _1132 = 1.0 - _1131;
                float _1486 = isnan(0.0) ? _1132 : (isnan(_1132) ? 0.0 : max(_1132, 0.0));
                float _1133 = isnan(1.0) ? _1486 : (isnan(_1486) ? 1.0 : min(_1486, 1.0));
                float _1175;
                if (_1084)
                {
                    float _1164 = inversesqrt(dot(vec3(_1085, _1086, _1087), vec3(_1085, _1086, _1087)));
                    precise float _1165 = _1085 * _1164;
                    precise float _1166 = _1086 * _1164;
                    precise float _1167 = _1087 * _1164;
                    precise float _1171 = dot(vec3(_1127, _1128, _1129), vec3(_1165, _1166, _1167)) * 0.800000011920928955078125;
                    precise float _1172 = _1171 + 0.20000000298023223876953125;
                    float _1497 = isnan(0.0) ? _1172 : (isnan(_1172) ? 0.0 : max(_1172, 0.0));
                    precise float _1174 = _1133 * (isnan(1.0) ? _1497 : (isnan(_1497) ? 1.0 : min(_1497, 1.0)));
                    _1175 = _1174;
                }
                else
                {
                    _1175 = _1133;
                }
                float frontier_phi_10_pred_15_ladder;
                float frontier_phi_10_pred_15_ladder_1;
                float frontier_phi_10_pred_15_ladder_2;
                if (_1175 > 0.0)
                {
                    bool _1206 = _1082 && (!_1084);
                    precise float _1208 = _1125 * (-4.0);
                    precise float _1211 = 6.283184051513671875 / (isnan(0.001000000047497451305389404296875) ? _1046 : (isnan(_1046) ? 0.001000000047497451305389404296875 : max(_1046, 0.001000000047497451305389404296875)));
                    precise float _1212 = cbMtdParam._m0[11u].y * _1211;
                    precise float _1213 = dot(vec2(_1127, _1129), vec2(_1085, _1087));
                    precise float _1216 = _1213 * _1212;
                    precise float _1217 = float(_1206) * _1216;
                    precise float _1218 = _674 * _1212;
                    precise float _1219 = _1218 - _1217;
                    precise float _1220 = (_1206 ? 0.0 : _1208) + _1219;
                    precise float _1222 = _1032 * sin(_1220);
                    precise float _1223 = _1128 * 0.0;
                    precise float _1224 = _1223 - _1129;
                    precise float _1225 = _1129 * 0.0;
                    precise float _1226 = _1127 * 0.0;
                    precise float _1227 = _1225 - _1226;
                    precise float _1228 = _1127 - _1223;
                    precise float _1229 = _1047 * _1222;
                    float _1230 = _1082 ? _1229 : 0.0;
                    float _1329;
                    if (_1083)
                    {
                        precise float _1291 = _1060 * 2.0;
                        precise float _1292 = _1079 + _1080;
                        precise float _1293 = _1081 + _1292;
                        precise float _1295 = 6.283184051513671875 / (isnan(0.001000000047497451305389404296875) ? _1060 : (isnan(_1060) ? 0.001000000047497451305389404296875 : max(_1060, 0.001000000047497451305389404296875)));
                        precise float _1296 = cbMtdParam._m0[11u].y * _1295;
                        precise float _1297 = _1078 * _1296;
                        precise float _1298 = (-0.0) - _1127;
                        precise float _1302 = dot(vec2(_1129, _1298), vec2(_1085, _1087)) / _1291;
                        precise float _1303 = (-0.0) - _1302;
                        float _1306 = fract(abs(_1302));
                        precise float _1307 = (-0.0) - _1306;
                        precise float _1309 = _1291 * ((_1302 >= _1303) ? _1306 : _1307);
                        precise float _1310 = _1309 * 6.283184051513671875;
                        precise float _1311 = _1310 / _1291;
                        precise float _1313 = (isnan(5.0) ? _1060 : (isnan(_1060) ? 5.0 : min(_1060, 5.0))) * sin(_1311);
                        precise float _1314 = _1213 + _1313;
                        precise float _1315 = _1060 * 0.25;
                        precise float _1316 = _674 * _1078;
                        precise float _1317 = _1316 - _1315;
                        precise float _1318 = _1317 - _1314;
                        precise float _1319 = _1078 * _1293;
                        precise float _1321 = _1318 / (isnan(0.001000000047497451305389404296875) ? _1319 : (isnan(_1319) ? 0.001000000047497451305389404296875 : max(_1319, 0.001000000047497451305389404296875)));
                        float _1322 = fract(_1321);
                        precise float _1324 = 1.0 - _1322;
                        float _1325 = (_1321 < 0.0) ? _1324 : _1322;
                        precise float _1326 = _1292 / _1293;
                        precise float _1327 = _1079 / _1293;
                        float _1362;
                        if (_1325 < _1327)
                        {
                            precise float _1347 = _1325 / _1327;
                            _1362 = _1347;
                        }
                        else
                        {
                            float frontier_phi_29_26_ladder;
                            if (_1325 < _1326)
                            {
                                precise float _1372 = _1325 - _1327;
                                precise float _1373 = _1326 - _1327;
                                precise float _1374 = _1372 / _1373;
                                precise float _1363 = 1.0 - _1374;
                                frontier_phi_29_26_ladder = _1363;
                            }
                            else
                            {
                                frontier_phi_29_26_ladder = 0.0;
                            }
                            _1362 = frontier_phi_29_26_ladder;
                        }
                        precise float _1364 = _1062 * _1362;
                        precise float _1365 = _1296 * _1213;
                        precise float _1366 = _674 * _1297;
                        precise float _1367 = _1366 - _1365;
                        precise float _1369 = _1061 + sin(_1367);
                        precise float _1371 = _1364 * abs(_1369);
                        precise float _1330 = _1371 + 0.0;
                        _1329 = _1330;
                    }
                    else
                    {
                        _1329 = 0.0;
                    }
                    precise float _1331 = _1013 + _1222;
                    precise float _1332 = _1331 + _1329;
                    precise float _1333 = _1127 * _1332;
                    precise float _1334 = _1128 * _1332;
                    precise float _1335 = _1129 * _1332;
                    precise float _1336 = _1224 * _1230;
                    precise float _1337 = _1227 * _1230;
                    precise float _1338 = _1228 * _1230;
                    precise float _1339 = _1336 + _1333;
                    precise float _1340 = _1337 + _1334;
                    precise float _1341 = _1338 + _1335;
                    precise float _1342 = _1175 * _1339;
                    precise float _1343 = _1175 * _1340;
                    precise float _1344 = _1175 * _1341;
                    precise float _1135 = _1342 * 0.0500000007450580596923828125;
                    precise float _1137 = _1343 * 0.0500000007450580596923828125;
                    precise float _1139 = _1344 * 0.0500000007450580596923828125;
                    frontier_phi_10_pred_15_ladder = _1135;
                    frontier_phi_10_pred_15_ladder_1 = _1137;
                    frontier_phi_10_pred_15_ladder_2 = _1139;
                }
                else
                {
                    frontier_phi_10_pred_15_ladder = 0.0;
                    frontier_phi_10_pred_15_ladder_1 = 0.0;
                    frontier_phi_10_pred_15_ladder_2 = 0.0;
                }
                frontier_phi_10_pred = frontier_phi_10_pred_15_ladder;
                frontier_phi_10_pred_1 = frontier_phi_10_pred_15_ladder_1;
                frontier_phi_10_pred_2 = frontier_phi_10_pred_15_ladder_2;
            }
            else
            {
                frontier_phi_10_pred = 0.0;
                frontier_phi_10_pred_1 = 0.0;
                frontier_phi_10_pred_2 = 0.0;
            }
            _1134 = frontier_phi_10_pred;
            _1136 = frontier_phi_10_pred_1;
            _1138 = frontier_phi_10_pred_2;
            _677 = _974 + _1134;
            _679 = _975 + _1136;
            _681 = _976 + _1138;
            uint _980 = _979 + 1u;
            if (_980 == _212)
            {
                break;
            }
            else
            {
                _974 = _677;
                _975 = _679;
                _976 = _681;
                _977 = (_979 != 3u) ? (_977 >> 8u) : _550;
                _979 = _980;
                continue;
            }
        }
        _676 = _677;
        _678 = _679;
        _680 = _681;
    }
    precise float _682 = _676 * _676;
    precise float _683 = _678 * _678;
    precise float _684 = _682 + _683;
    precise float _685 = _680 * _680;
    precise float _686 = _684 + _685;
    float _687 = sqrt(_686);
    bool _688 = _687 < 0.00011000000085914507508277893066406;
    float _692 = inversesqrt(dot(vec3(_676, _678, _680), vec3(_676, _678, _680)));
    precise float _693 = _676 * _692;
    precise float _694 = _678 * _692;
    precise float _695 = _680 * _692;
    precise float _696 = _595 * _695;
    precise float _697 = _600 * _694;
    precise float _698 = _696 - _697;
    precise float _699 = _600 * _693;
    precise float _700 = _590 * _695;
    precise float _701 = _699 - _700;
    precise float _702 = _590 * _694;
    precise float _703 = _595 * _693;
    precise float _704 = _702 - _703;
    float _708 = inversesqrt(dot(vec3(_698, _701, _704), vec3(_698, _701, _704)));
    precise float _709 = _708 * _698;
    precise float _710 = _708 * _701;
    precise float _711 = _708 * _704;
    precise float _712 = _687 + 1.0;
    precise float _714 = cbMtdParam._m0[10u].y * log2(_712);
    precise float _715 = _671 - _485;
    precise float _716 = _672 - _492;
    precise float _717 = _673 - _499;
    precise float _718 = dot(vec3(_709, _710, _711), vec3(_715, _716, _717));
    precise float _721 = _709 * _718;
    precise float _722 = _710 * _718;
    precise float _723 = _711 * _718;
    precise float _724 = _485 + _721;
    precise float _725 = _492 + _722;
    precise float _726 = _499 + _723;
    precise float _727 = _671 - _724;
    precise float _728 = _672 - _725;
    precise float _729 = _673 - _726;
    precise float _730 = _710 * _729;
    precise float _731 = _711 * _728;
    precise float _732 = _730 - _731;
    precise float _733 = _711 * _727;
    precise float _734 = _709 * _729;
    precise float _735 = _733 - _734;
    precise float _736 = _709 * _728;
    precise float _737 = _710 * _727;
    precise float _738 = _736 - _737;
    float _739 = sin(_714);
    float _740 = cos(_714);
    precise float _741 = _727 * _740;
    precise float _742 = _728 * _740;
    precise float _743 = _729 * _740;
    precise float _744 = _739 * _732;
    precise float _745 = _739 * _735;
    precise float _746 = _739 * _738;
    precise float _747 = _741 + _744;
    precise float _748 = _742 + _745;
    precise float _749 = _746 + _743;
    precise float _750 = _724 + _747;
    precise float _751 = _725 + _748;
    precise float _752 = _726 + _749;
    precise float _753 = _750 - _671;
    precise float _754 = _751 - _672;
    precise float _755 = _752 - _673;
    precise float _759 = _668 + (_688 ? 0.0 : _753);
    precise float _760 = _669 + (_688 ? 0.0 : _754);
    precise float _761 = _670 + (_688 ? 0.0 : _755);
    precise float _762 = _425 + _759;
    precise float _763 = _432 + _760;
    precise float _764 = _439 + _761;
    precise float _770 = _762 - cbSceneParam._m0[3u].x;
    precise float _771 = _763 - cbSceneParam._m0[3u].y;
    precise float _772 = _764 - cbSceneParam._m0[3u].z;
    precise float _800 = cbSceneParam._m0[24u].x * _770;
    precise float _801 = _771 * cbSceneParam._m0[24u].y;
    precise float _802 = _801 + _800;
    precise float _803 = _772 * cbSceneParam._m0[24u].z;
    precise float _804 = _803 + _802;
    precise float _805 = 1.0 * cbSceneParam._m0[24u].w;
    precise float _806 = _805 + _804;
    precise float _807 = cbSceneParam._m0[25u].x * _770;
    precise float _808 = _771 * cbSceneParam._m0[25u].y;
    precise float _809 = _808 + _807;
    precise float _810 = _772 * cbSceneParam._m0[25u].z;
    precise float _811 = _810 + _809;
    precise float _812 = 1.0 * cbSceneParam._m0[25u].w;
    precise float _813 = _812 + _811;
    precise float _814 = cbSceneParam._m0[26u].x * _770;
    precise float _815 = _771 * cbSceneParam._m0[26u].y;
    precise float _816 = _815 + _814;
    precise float _817 = _772 * cbSceneParam._m0[26u].z;
    precise float _818 = _817 + _816;
    precise float _819 = 1.0 * cbSceneParam._m0[26u].w;
    precise float _820 = _819 + _818;
    precise float _821 = cbSceneParam._m0[27u].x * _770;
    precise float _822 = _771 * cbSceneParam._m0[27u].y;
    precise float _823 = _822 + _821;
    precise float _824 = _772 * cbSceneParam._m0[27u].z;
    precise float _825 = _824 + _823;
    precise float _826 = 1.0 * cbSceneParam._m0[27u].w;
    precise float _827 = _826 + _825;
    gl_Position.x = _806;
    gl_Position.y = _813;
    gl_Position.z = _820;
    gl_Position.w = _827;
    POSITION_1.x = _806;
    POSITION_1.y = _813;
    POSITION_1.z = _820;
    POSITION_1.w = _827;
    NORMAL_1.x = fma(_186, _413, fma(_185, _410, _407 * _183));
    NORMAL_1.y = fma(_186, _414, fma(_185, _411, _408 * _183));
    NORMAL_1.z = fma(_186, _415, fma(_185, _412, _409 * _183));
    NORMAL_1.w = float(_226);
    TANGENT_1.x = fma(_197, _413, fma(_196, _410, _407 * _195));
    TANGENT_1.y = fma(_197, _414, fma(_196, _411, _408 * _195));
    TANGENT_1.z = fma(_197, _415, fma(_196, _412, _409 * _195));
    TANGENT_1.w = (float(TANGENT.w) + (-127.0)) * 0.0078740157186985015869140625;
    TEXCOORD_2 = ((float(int(uint(TEXCOORD.x))) * 0.00048828125) * cbTexScroll._m0[0u].x) + cbTexScroll._m0[0u].z;
    TEXCOORD_1_1 = ((float(int(uint(TEXCOORD.y))) * 0.00048828125) * cbTexScroll._m0[0u].y) + cbTexScroll._m0[0u].w;
    TEXCOORD_3.x = TEXCOORD_1.x;
    TEXCOORD_3.y = TEXCOORD_1.y;
    TEXCOORD_3.z = TEXCOORD_1.z;
    TEXCOORD_3.w = COLOR_1.x;
}


