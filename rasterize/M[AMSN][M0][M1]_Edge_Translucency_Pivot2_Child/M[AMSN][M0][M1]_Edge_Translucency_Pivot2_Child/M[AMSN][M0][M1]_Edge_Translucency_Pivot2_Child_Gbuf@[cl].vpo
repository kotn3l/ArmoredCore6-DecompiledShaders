#version 460

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[12];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 5, std140) uniform cbObjMatrixUBO
{
    vec4 _m0[6];
} cbObjMatrix;

layout(set = 0, binding = 10, std140) uniform cbInstanceIdxParamUBO
{
    vec4 _m0[1];
} cbInstanceIdxParam;

layout(set = 0, binding = 11, std140) uniform cbTexScrollUBO
{
    vec4 _m0[4];
} cbTexScroll;

layout(set = 0, binding = 26) uniform usamplerBuffer g_forceParam;
layout(set = 0, binding = 25) uniform usamplerBuffer g_InstanceIndexBuffer;

layout(location = 0) in vec3 POSITION;
layout(location = 1) in uvec4 NORMAL;
layout(location = 2) in uvec4 TANGENT;
layout(location = 3) in vec4 COLOR_1;
layout(location = 4) in ivec2 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_1;
layout(location = 1) out vec4 NORMAL_1;
layout(location = 2) out vec4 TANGENT_1;
layout(location = 3) out float TEXCOORD_2;
layout(location = 3, component = 1) out float TEXCOORD_1_1;
layout(location = 4) out vec4 TEXCOORD_3;
layout(location = 3, component = 2) out float TEXCOORD_11;

uint _737;
uint _860;

void main()
{
    uint _77 = uint(gl_InstanceIndex) - uint(gl_BaseInstance);
    gl_Position.x = 0.0;
    gl_Position.y = 0.0;
    gl_Position.z = 0.0;
    gl_Position.w = 0.0;
    NORMAL_1.x = 0.0;
    NORMAL_1.y = 0.0;
    NORMAL_1.z = 0.0;
    NORMAL_1.w = 0.0;
    TANGENT_1.x = 0.0;
    TANGENT_1.y = 0.0;
    TANGENT_1.z = 0.0;
    TANGENT_1.w = 0.0;
    TEXCOORD_2 = 0.0;
    TEXCOORD_1_1 = 0.0;
    TEXCOORD_3.x = 0.0;
    TEXCOORD_3.y = 0.0;
    TEXCOORD_3.z = 0.0;
    TEXCOORD_3.w = 0.0;
    TEXCOORD_11 = 0.0;
    float _163 = (float(NORMAL.x) + (-127.0)) * 0.0078740157186985015869140625;
    float _165 = (float(NORMAL.y) + (-127.0)) * 0.0078740157186985015869140625;
    float _166 = (float(NORMAL.z) + (-127.0)) * 0.0078740157186985015869140625;
    float _176 = (float(TANGENT.x) + (-127.0)) * 0.0078740157186985015869140625;
    float _177 = (float(TANGENT.y) + (-127.0)) * 0.0078740157186985015869140625;
    float _178 = (float(TANGENT.z) + (-127.0)) * 0.0078740157186985015869140625;
    uint _180 = _77 * 13u;
    uvec4 _186 = floatBitsToUint(cbInstanceData._m0[_180 + 7u]);
    uint _189 = min(_186.y, 8u);
    bool _192 = _189 == 0u;
    precise float _193 = POSITION.x + 0.0;
    precise float _194 = POSITION.y + 0.0;
    precise float _195 = POSITION.z + 0.0;
    uint _200 = floatBitsToUint(cbInstanceIdxParam._m0[0u]).x + _77;
    uvec4 _202 = texelFetch(g_InstanceIndexBuffer, int(_200));
    uint _203 = _202.x;
    uint _212 = (floatBitsToUint(cbInstanceData._m0[(_203 * 13u) + 4u]).x + uint(float(NORMAL.w))) * 3u;
    uint _219 = _212 + 1u;
    uint _226 = _212 + 2u;
    precise float _233 = _193 * cbObjMatrix._m0[_212].x;
    precise float _234 = _194 * cbObjMatrix._m0[_212].y;
    precise float _235 = _234 + _233;
    precise float _236 = _195 * cbObjMatrix._m0[_212].z;
    precise float _237 = _236 + _235;
    precise float _238 = 1.0 * cbObjMatrix._m0[_212].w;
    precise float _240 = _238 + _237;
    precise float _241 = _193 * cbObjMatrix._m0[_219].x;
    precise float _242 = _194 * cbObjMatrix._m0[_219].y;
    precise float _243 = _242 + _241;
    precise float _244 = _195 * cbObjMatrix._m0[_219].z;
    precise float _245 = _244 + _243;
    precise float _246 = 1.0 * cbObjMatrix._m0[_219].w;
    precise float _247 = _246 + _245;
    precise float _248 = _193 * cbObjMatrix._m0[_226].x;
    precise float _249 = _194 * cbObjMatrix._m0[_226].y;
    precise float _250 = _249 + _248;
    precise float _251 = _195 * cbObjMatrix._m0[_226].z;
    precise float _252 = _251 + _250;
    precise float _253 = 1.0 * cbObjMatrix._m0[_226].w;
    precise float _254 = _253 + _252;
    float _260 = cbSceneParam._m0[3u].x - _240;
    float _261 = cbSceneParam._m0[3u].y - _247;
    float _262 = cbSceneParam._m0[3u].z - _254;
    uint _294 = _180 + 1u;
    uint _301 = _180 + 2u;
    precise float _308 = TEXCOORD_1.x * cbInstanceData._m0[_180].x;
    precise float _309 = TEXCOORD_1.y * cbInstanceData._m0[_180].y;
    precise float _310 = _309 + _308;
    precise float _311 = TEXCOORD_1.z * cbInstanceData._m0[_180].z;
    precise float _312 = _311 + _310;
    precise float _313 = 1.0 * cbInstanceData._m0[_180].w;
    precise float _314 = _313 + _312;
    precise float _315 = TEXCOORD_1.x * cbInstanceData._m0[_294].x;
    precise float _316 = TEXCOORD_1.y * cbInstanceData._m0[_294].y;
    precise float _317 = _316 + _315;
    precise float _318 = TEXCOORD_1.z * cbInstanceData._m0[_294].z;
    precise float _319 = _318 + _317;
    precise float _320 = 1.0 * cbInstanceData._m0[_294].w;
    precise float _321 = _320 + _319;
    precise float _322 = TEXCOORD_1.x * cbInstanceData._m0[_301].x;
    precise float _323 = TEXCOORD_1.y * cbInstanceData._m0[_301].y;
    precise float _324 = _323 + _322;
    precise float _325 = TEXCOORD_1.z * cbInstanceData._m0[_301].z;
    precise float _326 = _325 + _324;
    precise float _327 = 1.0 * cbInstanceData._m0[_301].w;
    precise float _328 = _327 + _326;
    precise float _334 = _240 - _314;
    precise float _335 = _247 - _321;
    precise float _336 = _254 - _328;
    precise float _337 = _334 * _334;
    precise float _338 = _335 * _335;
    precise float _339 = _337 + _338;
    precise float _340 = _336 * _336;
    precise float _341 = _339 + _340;
    precise float _343 = cbMtdParam._m0[10u].z * sqrt(_341);
    precise float _348 = cbInstanceData._m0[_180].x * 0.0;
    precise float _349 = 0.0 * cbInstanceData._m0[_180].y;
    precise float _350 = _349 + _348;
    precise float _351 = 0.0 * cbInstanceData._m0[_180].z;
    precise float _352 = _351 + _350;
    precise float _353 = 1.0 * cbInstanceData._m0[_180].w;
    precise float _354 = _353 + _352;
    precise float _355 = cbInstanceData._m0[_294].x * 0.0;
    precise float _356 = 0.0 * cbInstanceData._m0[_294].y;
    precise float _357 = _356 + _355;
    precise float _358 = 0.0 * cbInstanceData._m0[_294].z;
    precise float _359 = _358 + _357;
    precise float _360 = 1.0 * cbInstanceData._m0[_294].w;
    precise float _361 = _360 + _359;
    precise float _362 = cbInstanceData._m0[_301].x * 0.0;
    precise float _363 = 0.0 * cbInstanceData._m0[_301].y;
    precise float _364 = _363 + _362;
    precise float _365 = 0.0 * cbInstanceData._m0[_301].z;
    precise float _366 = _365 + _364;
    precise float _367 = 1.0 * cbInstanceData._m0[_301].w;
    precise float _368 = _367 + _366;
    precise float _371 = _240 * _240;
    precise float _372 = _247 * _247;
    precise float _373 = _371 + _372;
    precise float _374 = _254 * _254;
    precise float _375 = _373 + _374;
    precise float _377 = cbMtdParam._m0[11u].x * sqrt(_375);
    precise float _378 = cbPerFrame._m0[22u].x + _377;
    uint _379 = _186.w;
    float _380;
    float _382;
    float _384;
    if (_192)
    {
        _380 = 0.0;
        _382 = 0.0;
        _384 = 0.0;
    }
    else
    {
        uint _504 = _186.z;
        precise float _381;
        precise float _383;
        precise float _385;
        float _931;
        float _933;
        float _935;
        float _669 = 0.0;
        float _670 = 0.0;
        float _671 = 0.0;
        uint _672 = _504;
        uint _674 = 0u;
        float _710;
        float _729;
        vec4 _742;
        float _743;
        float _744;
        float _758;
        float _759;
        float _760;
        float _777;
        float _778;
        float _779;
        float _780;
        bool _781;
        bool _782;
        bool _783;
        precise float _784;
        precise float _785;
        precise float _786;
        float _787;
        float _788;
        float _789;
        precise float _790;
        bool _793;
        for (;;)
        {
            uint _676 = _672 & 255u;
            uint _678 = _676 * 24u;
            uvec3 _688 = uvec3(texelFetch(g_forceParam, int(_678)).x, texelFetch(g_forceParam, int(_678 + 1u)).x, texelFetch(g_forceParam, int(_678 + 2u)).x);
            uint _693 = (_676 * 24u) + 4u;
            vec4 _706 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_693)).x, texelFetch(g_forceParam, int(_693 + 1u)).x, texelFetch(g_forceParam, int(_693 + 2u)).x, texelFetch(g_forceParam, int(_693 + 3u)).x));
            _710 = _706.w;
            uint _712 = (_676 * 24u) + 8u;
            vec4 _725 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_712)).x, texelFetch(g_forceParam, int(_712 + 1u)).x, texelFetch(g_forceParam, int(_712 + 2u)).x, texelFetch(g_forceParam, int(_712 + 3u)).x));
            _729 = _725.w;
            uint _731 = (_676 * 24u) + 12u;
            _742 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_731)).x, texelFetch(g_forceParam, int(_731 + 1u)).x, _737, texelFetch(g_forceParam, int(_731 + 3u)).x));
            _743 = _742.x;
            _744 = _742.w;
            uint _747 = (_676 * 24u) + 16u;
            vec3 _757 = uintBitsToFloat(uvec3(texelFetch(g_forceParam, int(_747)).x, texelFetch(g_forceParam, int(_747 + 1u)).x, texelFetch(g_forceParam, int(_747 + 2u)).x));
            _758 = _757.x;
            _759 = _757.y;
            _760 = _757.z;
            uint _763 = (_676 * 24u) + 20u;
            vec4 _776 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_763)).x, texelFetch(g_forceParam, int(_763 + 1u)).x, texelFetch(g_forceParam, int(_763 + 2u)).x, texelFetch(g_forceParam, int(_763 + 3u)).x));
            _777 = _776.x;
            _778 = _776.y;
            _779 = _776.z;
            _780 = _776.w;
            _781 = _688.x == 1u;
            _782 = _688.y == 1u;
            _783 = _688.z == 1u;
            _784 = _354 - _706.x;
            _785 = _361 - _706.y;
            _786 = _368 - _706.z;
            _787 = _781 ? _725.x : _784;
            _788 = _781 ? _725.y : _785;
            _789 = _781 ? _725.z : _786;
            _790 = dot(vec3(_787, _788, _789), vec3(_787, _788, _789));
            _793 = _790 > 0.0;
            float frontier_phi_8_pred;
            float frontier_phi_8_pred_1;
            float frontier_phi_8_pred_2;
            if (_793)
            {
                precise float _916 = _784 * _784;
                precise float _917 = _785 * _785;
                precise float _918 = _916 + _917;
                precise float _919 = _786 * _786;
                precise float _920 = _919 + _918;
                float _921 = sqrt(_920);
                float _922 = inversesqrt(_790);
                precise float _923 = _787 * _922;
                precise float _924 = _788 * _922;
                precise float _925 = _789 * _922;
                precise float _928 = _921 / (isnan(0.001000000047497451305389404296875) ? _742.y : (isnan(_742.y) ? 0.001000000047497451305389404296875 : max(_742.y, 0.001000000047497451305389404296875)));
                precise float _929 = 1.0 - _928;
                float _1255 = isnan(0.0) ? _929 : (isnan(_929) ? 0.0 : max(_929, 0.0));
                float _930 = isnan(1.0) ? _1255 : (isnan(_1255) ? 1.0 : min(_1255, 1.0));
                float _980;
                if (_783)
                {
                    float _967 = inversesqrt(dot(vec3(_784, _785, _786), vec3(_784, _785, _786)));
                    precise float _968 = _784 * _967;
                    precise float _969 = _785 * _967;
                    precise float _970 = _786 * _967;
                    precise float _974 = dot(vec3(_923, _924, _925), vec3(_968, _969, _970)) * 0.800000011920928955078125;
                    precise float _976 = _974 + 0.20000000298023223876953125;
                    float _1266 = isnan(0.0) ? _976 : (isnan(_976) ? 0.0 : max(_976, 0.0));
                    precise float _979 = _930 * (isnan(1.0) ? _1266 : (isnan(_1266) ? 1.0 : min(_1266, 1.0)));
                    _980 = _979;
                }
                else
                {
                    _980 = _930;
                }
                float frontier_phi_8_pred_12_ladder;
                float frontier_phi_8_pred_12_ladder_1;
                float frontier_phi_8_pred_12_ladder_2;
                if (_980 > 0.0)
                {
                    bool _999 = _781 && (!_783);
                    precise float _1001 = _921 * (-4.0);
                    precise float _1005 = 6.283184051513671875 / (isnan(0.001000000047497451305389404296875) ? _743 : (isnan(_743) ? 0.001000000047497451305389404296875 : max(_743, 0.001000000047497451305389404296875)));
                    precise float _1007 = dot(vec2(_923, _925), vec2(_784, _786));
                    precise float _1011 = _1005 * _1007;
                    precise float _1012 = float(_999) * _1011;
                    precise float _1013 = _378 * _1005;
                    precise float _1014 = _1013 - _1012;
                    precise float _1015 = (_999 ? 0.0 : _1001) + _1014;
                    precise float _1017 = _729 * sin(_1015);
                    precise float _1018 = _924 * 0.0;
                    precise float _1019 = _1018 - _925;
                    precise float _1020 = _925 * 0.0;
                    precise float _1021 = _923 * 0.0;
                    precise float _1022 = _1020 - _1021;
                    precise float _1023 = _923 - _1018;
                    precise float _1024 = _744 * _1017;
                    float _1025 = _781 ? _1024 : 0.0;
                    float _1094;
                    if (_782)
                    {
                        precise float _1054 = _758 * 2.0;
                        precise float _1056 = _778 + _779;
                        precise float _1057 = _780 + _1056;
                        precise float _1059 = 6.283184051513671875 / (isnan(0.001000000047497451305389404296875) ? _758 : (isnan(_758) ? 0.001000000047497451305389404296875 : max(_758, 0.001000000047497451305389404296875)));
                        precise float _1060 = _777 * _1059;
                        precise float _1061 = (-0.0) - _923;
                        precise float _1066 = dot(vec2(_925, _1061), vec2(_784, _786)) / _1054;
                        precise float _1067 = (-0.0) - _1066;
                        float _1070 = fract(abs(_1066));
                        precise float _1071 = (-0.0) - _1070;
                        precise float _1073 = _1054 * ((_1066 >= _1067) ? _1070 : _1071);
                        precise float _1074 = _1073 * 6.283184051513671875;
                        precise float _1075 = _1074 / _1054;
                        precise float _1077 = (isnan(5.0) ? _758 : (isnan(_758) ? 5.0 : min(_758, 5.0))) * sin(_1075);
                        precise float _1078 = _1007 + _1077;
                        precise float _1079 = _758 * 0.25;
                        precise float _1081 = _378 * _777;
                        precise float _1082 = _1081 - _1079;
                        precise float _1083 = _1082 - _1078;
                        precise float _1084 = _777 * _1057;
                        precise float _1086 = _1083 / (isnan(0.001000000047497451305389404296875) ? _1084 : (isnan(_1084) ? 0.001000000047497451305389404296875 : max(_1084, 0.001000000047497451305389404296875)));
                        float _1087 = fract(_1086);
                        precise float _1089 = 1.0 - _1087;
                        float _1090 = (_1086 < 0.0) ? _1089 : _1087;
                        precise float _1091 = _1056 / _1057;
                        precise float _1092 = _778 / _1057;
                        float _1170;
                        if (_1090 < _1092)
                        {
                            precise float _1166 = _1090 / _1092;
                            _1170 = _1166;
                        }
                        else
                        {
                            float frontier_phi_27_24_ladder;
                            if (_1090 < _1091)
                            {
                                precise float _1180 = _1090 - _1092;
                                precise float _1181 = _1091 - _1092;
                                precise float _1182 = _1180 / _1181;
                                precise float _1171 = 1.0 - _1182;
                                frontier_phi_27_24_ladder = _1171;
                            }
                            else
                            {
                                frontier_phi_27_24_ladder = 0.0;
                            }
                            _1170 = frontier_phi_27_24_ladder;
                        }
                        precise float _1172 = _760 * _1170;
                        precise float _1173 = _1059 * _1007;
                        precise float _1174 = _378 * _1060;
                        precise float _1175 = _1174 - _1173;
                        precise float _1177 = _759 + sin(_1175);
                        precise float _1179 = _1172 * abs(_1177);
                        precise float _1095 = _1179 + 0.0;
                        _1094 = _1095;
                    }
                    else
                    {
                        _1094 = 0.0;
                    }
                    precise float _1096 = _710 + _1017;
                    precise float _1097 = _1096 + _1094;
                    precise float _1098 = _923 * _1097;
                    precise float _1099 = _924 * _1097;
                    precise float _1100 = _925 * _1097;
                    precise float _1101 = _1019 * _1025;
                    precise float _1102 = _1022 * _1025;
                    precise float _1103 = _1023 * _1025;
                    precise float _1104 = _1101 + _1098;
                    precise float _1105 = _1102 + _1099;
                    precise float _1106 = _1103 + _1100;
                    precise float _1107 = _980 * _1104;
                    precise float _1108 = _980 * _1105;
                    precise float _1109 = _980 * _1106;
                    precise float _932 = _1107 * 0.0500000007450580596923828125;
                    precise float _934 = _1108 * 0.0500000007450580596923828125;
                    precise float _936 = _1109 * 0.0500000007450580596923828125;
                    frontier_phi_8_pred_12_ladder = _932;
                    frontier_phi_8_pred_12_ladder_1 = _934;
                    frontier_phi_8_pred_12_ladder_2 = _936;
                }
                else
                {
                    frontier_phi_8_pred_12_ladder = 0.0;
                    frontier_phi_8_pred_12_ladder_1 = 0.0;
                    frontier_phi_8_pred_12_ladder_2 = 0.0;
                }
                frontier_phi_8_pred = frontier_phi_8_pred_12_ladder;
                frontier_phi_8_pred_1 = frontier_phi_8_pred_12_ladder_1;
                frontier_phi_8_pred_2 = frontier_phi_8_pred_12_ladder_2;
            }
            else
            {
                frontier_phi_8_pred = 0.0;
                frontier_phi_8_pred_1 = 0.0;
                frontier_phi_8_pred_2 = 0.0;
            }
            _931 = frontier_phi_8_pred;
            _933 = frontier_phi_8_pred_1;
            _935 = frontier_phi_8_pred_2;
            _381 = _669 + _931;
            _383 = _670 + _933;
            _385 = _671 + _935;
            uint _675 = _674 + 1u;
            if (_675 == _189)
            {
                break;
            }
            else
            {
                _669 = _381;
                _670 = _383;
                _671 = _385;
                _672 = (_674 != 3u) ? (_672 >> 8u) : _379;
                _674 = _675;
                continue;
            }
        }
        _380 = _381;
        _382 = _383;
        _384 = _385;
    }
    precise float _386 = _380 * _380;
    precise float _387 = _382 * _382;
    precise float _388 = _386 + _387;
    precise float _389 = _384 * _384;
    precise float _390 = _388 + _389;
    float _391 = sqrt(_390);
    bool _392 = _391 < 0.00011000000085914507508277893066406;
    float _397 = inversesqrt(dot(vec3(cbInstanceData._m0[_180].x, cbInstanceData._m0[_294].x, cbInstanceData._m0[_301].x), vec3(cbInstanceData._m0[_180].x, cbInstanceData._m0[_294].x, cbInstanceData._m0[_301].x)));
    precise float _398 = cbInstanceData._m0[_180].x * _397;
    precise float _399 = cbInstanceData._m0[_294].x * _397;
    precise float _400 = cbInstanceData._m0[_301].x * _397;
    float _404 = inversesqrt(dot(vec3(cbInstanceData._m0[_180].y, cbInstanceData._m0[_294].y, cbInstanceData._m0[_301].y), vec3(cbInstanceData._m0[_180].y, cbInstanceData._m0[_294].y, cbInstanceData._m0[_301].y)));
    precise float _405 = cbInstanceData._m0[_180].y * _404;
    precise float _406 = cbInstanceData._m0[_294].y * _404;
    precise float _407 = cbInstanceData._m0[_301].y * _404;
    float _411 = inversesqrt(dot(vec3(cbInstanceData._m0[_180].z, cbInstanceData._m0[_294].z, cbInstanceData._m0[_301].z), vec3(cbInstanceData._m0[_180].z, cbInstanceData._m0[_294].z, cbInstanceData._m0[_301].z)));
    precise float _412 = cbInstanceData._m0[_180].z * _411;
    precise float _413 = cbInstanceData._m0[_294].z * _411;
    precise float _414 = cbInstanceData._m0[_301].z * _411;
    precise float _415 = _398 * 0.0;
    precise float _416 = 1.0 * _405;
    precise float _417 = _416 + _415;
    precise float _418 = 0.0 * _412;
    precise float _419 = _418 + _417;
    precise float _420 = _399 * 0.0;
    precise float _421 = 1.0 * _406;
    precise float _422 = _421 + _420;
    precise float _423 = 0.0 * _413;
    precise float _424 = _423 + _422;
    precise float _425 = _400 * 0.0;
    precise float _426 = 1.0 * _407;
    precise float _427 = _426 + _425;
    precise float _428 = 0.0 * _414;
    precise float _429 = _428 + _427;
    float _433 = inversesqrt(dot(vec3(_380, _382, _384), vec3(_380, _382, _384)));
    precise float _434 = _380 * _433;
    precise float _435 = _382 * _433;
    precise float _436 = _384 * _433;
    precise float _437 = _424 * _436;
    precise float _438 = _429 * _435;
    precise float _439 = _437 - _438;
    precise float _440 = _429 * _434;
    precise float _441 = _419 * _436;
    precise float _442 = _440 - _441;
    precise float _443 = _419 * _435;
    precise float _444 = _424 * _434;
    precise float _445 = _443 - _444;
    float _449 = inversesqrt(dot(vec3(_439, _442, _445), vec3(_439, _442, _445)));
    precise float _450 = _449 * _439;
    precise float _451 = _449 * _442;
    precise float _452 = _449 * _445;
    precise float _453 = _391 + 1.0;
    precise float _455 = cbMtdParam._m0[10u].w * log2(_453);
    precise float _456 = _240 - _354;
    precise float _457 = _247 - _361;
    precise float _458 = _254 - _368;
    precise float _459 = dot(vec3(_450, _451, _452), vec3(_456, _457, _458));
    precise float _462 = _450 * _459;
    precise float _463 = _451 * _459;
    precise float _464 = _452 * _459;
    precise float _465 = _354 + _462;
    precise float _466 = _361 + _463;
    precise float _467 = _368 + _464;
    precise float _468 = _240 - _465;
    precise float _469 = _247 - _466;
    precise float _470 = _254 - _467;
    precise float _471 = _451 * _470;
    precise float _472 = _452 * _469;
    precise float _473 = _471 - _472;
    precise float _474 = _452 * _468;
    precise float _475 = _450 * _470;
    precise float _476 = _474 - _475;
    precise float _477 = _450 * _469;
    precise float _478 = _451 * _468;
    precise float _479 = _477 - _478;
    float _480 = sin(_455);
    float _481 = cos(_455);
    precise float _482 = _468 * _481;
    precise float _483 = _469 * _481;
    precise float _484 = _470 * _481;
    precise float _485 = _480 * _473;
    precise float _486 = _480 * _476;
    precise float _487 = _480 * _479;
    precise float _488 = _482 + _485;
    precise float _489 = _483 + _486;
    precise float _490 = _487 + _484;
    precise float _491 = _465 + _488;
    precise float _492 = _466 + _489;
    precise float _493 = _467 + _490;
    precise float _494 = _491 - _240;
    precise float _495 = _492 - _247;
    precise float _496 = _493 - _254;
    float _497 = _392 ? 0.0 : _494;
    float _498 = _392 ? 0.0 : _495;
    float _499 = _392 ? 0.0 : _496;
    precise float _500 = _240 + _497;
    precise float _501 = _247 + _498;
    precise float _502 = _254 + _499;
    precise float _503 = cbPerFrame._m0[22u].x + _343;
    float _505;
    float _507;
    float _509;
    if (_192)
    {
        _505 = 0.0;
        _507 = 0.0;
        _509 = 0.0;
    }
    else
    {
        uint _668 = _186.z;
        precise float _506;
        precise float _508;
        precise float _510;
        float _955;
        float _957;
        float _959;
        float _794 = 0.0;
        float _795 = 0.0;
        float _796 = 0.0;
        uint _797 = _668;
        uint _799 = 0u;
        float _833;
        float _852;
        vec4 _865;
        float _866;
        float _867;
        float _880;
        float _881;
        float _882;
        float _898;
        float _899;
        float _900;
        float _901;
        bool _902;
        bool _903;
        bool _904;
        precise float _905;
        precise float _906;
        precise float _907;
        float _908;
        float _909;
        float _910;
        precise float _911;
        bool _914;
        for (;;)
        {
            uint _801 = _797 & 255u;
            uint _802 = _801 * 24u;
            uvec3 _811 = uvec3(texelFetch(g_forceParam, int(_802)).x, texelFetch(g_forceParam, int(_802 + 1u)).x, texelFetch(g_forceParam, int(_802 + 2u)).x);
            uint _816 = (_801 * 24u) + 4u;
            vec4 _829 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_816)).x, texelFetch(g_forceParam, int(_816 + 1u)).x, texelFetch(g_forceParam, int(_816 + 2u)).x, texelFetch(g_forceParam, int(_816 + 3u)).x));
            _833 = _829.w;
            uint _835 = (_801 * 24u) + 8u;
            vec4 _848 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_835)).x, texelFetch(g_forceParam, int(_835 + 1u)).x, texelFetch(g_forceParam, int(_835 + 2u)).x, texelFetch(g_forceParam, int(_835 + 3u)).x));
            _852 = _848.w;
            uint _854 = (_801 * 24u) + 12u;
            _865 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_854)).x, texelFetch(g_forceParam, int(_854 + 1u)).x, _860, texelFetch(g_forceParam, int(_854 + 3u)).x));
            _866 = _865.x;
            _867 = _865.w;
            uint _869 = (_801 * 24u) + 16u;
            vec3 _879 = uintBitsToFloat(uvec3(texelFetch(g_forceParam, int(_869)).x, texelFetch(g_forceParam, int(_869 + 1u)).x, texelFetch(g_forceParam, int(_869 + 2u)).x));
            _880 = _879.x;
            _881 = _879.y;
            _882 = _879.z;
            uint _884 = (_801 * 24u) + 20u;
            vec4 _897 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_884)).x, texelFetch(g_forceParam, int(_884 + 1u)).x, texelFetch(g_forceParam, int(_884 + 2u)).x, texelFetch(g_forceParam, int(_884 + 3u)).x));
            _898 = _897.x;
            _899 = _897.y;
            _900 = _897.z;
            _901 = _897.w;
            _902 = _811.x == 1u;
            _903 = _811.y == 1u;
            _904 = _811.z == 1u;
            _905 = _314 - _829.x;
            _906 = _321 - _829.y;
            _907 = _328 - _829.z;
            _908 = _902 ? _848.x : _905;
            _909 = _902 ? _848.y : _906;
            _910 = _902 ? _848.z : _907;
            _911 = dot(vec3(_908, _909, _910), vec3(_908, _909, _910));
            _914 = _911 > 0.0;
            float frontier_phi_10_pred;
            float frontier_phi_10_pred_1;
            float frontier_phi_10_pred_2;
            if (_914)
            {
                precise float _941 = _905 * _905;
                precise float _942 = _906 * _906;
                precise float _943 = _941 + _942;
                precise float _944 = _907 * _907;
                precise float _945 = _944 + _943;
                float _946 = sqrt(_945);
                float _947 = inversesqrt(_911);
                precise float _948 = _908 * _947;
                precise float _949 = _909 * _947;
                precise float _950 = _910 * _947;
                precise float _952 = _946 / (isnan(0.001000000047497451305389404296875) ? _865.y : (isnan(_865.y) ? 0.001000000047497451305389404296875 : max(_865.y, 0.001000000047497451305389404296875)));
                precise float _953 = 1.0 - _952;
                float _1302 = isnan(0.0) ? _953 : (isnan(_953) ? 0.0 : max(_953, 0.0));
                float _954 = isnan(1.0) ? _1302 : (isnan(_1302) ? 1.0 : min(_1302, 1.0));
                float _996;
                if (_904)
                {
                    float _985 = inversesqrt(dot(vec3(_905, _906, _907), vec3(_905, _906, _907)));
                    precise float _986 = _905 * _985;
                    precise float _987 = _906 * _985;
                    precise float _988 = _907 * _985;
                    precise float _992 = dot(vec3(_948, _949, _950), vec3(_986, _987, _988)) * 0.800000011920928955078125;
                    precise float _993 = _992 + 0.20000000298023223876953125;
                    float _1313 = isnan(0.0) ? _993 : (isnan(_993) ? 0.0 : max(_993, 0.0));
                    precise float _995 = _954 * (isnan(1.0) ? _1313 : (isnan(_1313) ? 1.0 : min(_1313, 1.0)));
                    _996 = _995;
                }
                else
                {
                    _996 = _954;
                }
                float frontier_phi_10_pred_15_ladder;
                float frontier_phi_10_pred_15_ladder_1;
                float frontier_phi_10_pred_15_ladder_2;
                if (_996 > 0.0)
                {
                    bool _1027 = _902 && (!_904);
                    precise float _1029 = _946 * (-4.0);
                    precise float _1032 = 6.283184051513671875 / (isnan(0.001000000047497451305389404296875) ? _866 : (isnan(_866) ? 0.001000000047497451305389404296875 : max(_866, 0.001000000047497451305389404296875)));
                    precise float _1033 = cbMtdParam._m0[11u].y * _1032;
                    precise float _1034 = dot(vec2(_948, _950), vec2(_905, _907));
                    precise float _1037 = _1034 * _1033;
                    precise float _1038 = float(_1027) * _1037;
                    precise float _1039 = _503 * _1033;
                    precise float _1040 = _1039 - _1038;
                    precise float _1041 = (_1027 ? 0.0 : _1029) + _1040;
                    precise float _1043 = _852 * sin(_1041);
                    precise float _1044 = _949 * 0.0;
                    precise float _1045 = _1044 - _950;
                    precise float _1046 = _950 * 0.0;
                    precise float _1047 = _948 * 0.0;
                    precise float _1048 = _1046 - _1047;
                    precise float _1049 = _948 - _1044;
                    precise float _1050 = _867 * _1043;
                    float _1051 = _902 ? _1050 : 0.0;
                    float _1150;
                    if (_903)
                    {
                        precise float _1112 = _880 * 2.0;
                        precise float _1113 = _899 + _900;
                        precise float _1114 = _901 + _1113;
                        precise float _1116 = 6.283184051513671875 / (isnan(0.001000000047497451305389404296875) ? _880 : (isnan(_880) ? 0.001000000047497451305389404296875 : max(_880, 0.001000000047497451305389404296875)));
                        precise float _1117 = cbMtdParam._m0[11u].y * _1116;
                        precise float _1118 = _898 * _1117;
                        precise float _1119 = (-0.0) - _948;
                        precise float _1123 = dot(vec2(_950, _1119), vec2(_905, _907)) / _1112;
                        precise float _1124 = (-0.0) - _1123;
                        float _1127 = fract(abs(_1123));
                        precise float _1128 = (-0.0) - _1127;
                        precise float _1130 = _1112 * ((_1123 >= _1124) ? _1127 : _1128);
                        precise float _1131 = _1130 * 6.283184051513671875;
                        precise float _1132 = _1131 / _1112;
                        precise float _1134 = (isnan(5.0) ? _880 : (isnan(_880) ? 5.0 : min(_880, 5.0))) * sin(_1132);
                        precise float _1135 = _1034 + _1134;
                        precise float _1136 = _880 * 0.25;
                        precise float _1137 = _503 * _898;
                        precise float _1138 = _1137 - _1136;
                        precise float _1139 = _1138 - _1135;
                        precise float _1140 = _898 * _1114;
                        precise float _1142 = _1139 / (isnan(0.001000000047497451305389404296875) ? _1140 : (isnan(_1140) ? 0.001000000047497451305389404296875 : max(_1140, 0.001000000047497451305389404296875)));
                        float _1143 = fract(_1142);
                        precise float _1145 = 1.0 - _1143;
                        float _1146 = (_1142 < 0.0) ? _1145 : _1143;
                        precise float _1147 = _1113 / _1114;
                        precise float _1148 = _899 / _1114;
                        float _1183;
                        if (_1146 < _1148)
                        {
                            precise float _1168 = _1146 / _1148;
                            _1183 = _1168;
                        }
                        else
                        {
                            float frontier_phi_29_26_ladder;
                            if (_1146 < _1147)
                            {
                                precise float _1193 = _1146 - _1148;
                                precise float _1194 = _1147 - _1148;
                                precise float _1195 = _1193 / _1194;
                                precise float _1184 = 1.0 - _1195;
                                frontier_phi_29_26_ladder = _1184;
                            }
                            else
                            {
                                frontier_phi_29_26_ladder = 0.0;
                            }
                            _1183 = frontier_phi_29_26_ladder;
                        }
                        precise float _1185 = _882 * _1183;
                        precise float _1186 = _1117 * _1034;
                        precise float _1187 = _503 * _1118;
                        precise float _1188 = _1187 - _1186;
                        precise float _1190 = _881 + sin(_1188);
                        precise float _1192 = _1185 * abs(_1190);
                        precise float _1151 = _1192 + 0.0;
                        _1150 = _1151;
                    }
                    else
                    {
                        _1150 = 0.0;
                    }
                    precise float _1152 = _833 + _1043;
                    precise float _1153 = _1152 + _1150;
                    precise float _1154 = _948 * _1153;
                    precise float _1155 = _949 * _1153;
                    precise float _1156 = _950 * _1153;
                    precise float _1157 = _1045 * _1051;
                    precise float _1158 = _1048 * _1051;
                    precise float _1159 = _1049 * _1051;
                    precise float _1160 = _1157 + _1154;
                    precise float _1161 = _1158 + _1155;
                    precise float _1162 = _1159 + _1156;
                    precise float _1163 = _996 * _1160;
                    precise float _1164 = _996 * _1161;
                    precise float _1165 = _996 * _1162;
                    precise float _956 = _1163 * 0.0500000007450580596923828125;
                    precise float _958 = _1164 * 0.0500000007450580596923828125;
                    precise float _960 = _1165 * 0.0500000007450580596923828125;
                    frontier_phi_10_pred_15_ladder = _956;
                    frontier_phi_10_pred_15_ladder_1 = _958;
                    frontier_phi_10_pred_15_ladder_2 = _960;
                }
                else
                {
                    frontier_phi_10_pred_15_ladder = 0.0;
                    frontier_phi_10_pred_15_ladder_1 = 0.0;
                    frontier_phi_10_pred_15_ladder_2 = 0.0;
                }
                frontier_phi_10_pred = frontier_phi_10_pred_15_ladder;
                frontier_phi_10_pred_1 = frontier_phi_10_pred_15_ladder_1;
                frontier_phi_10_pred_2 = frontier_phi_10_pred_15_ladder_2;
            }
            else
            {
                frontier_phi_10_pred = 0.0;
                frontier_phi_10_pred_1 = 0.0;
                frontier_phi_10_pred_2 = 0.0;
            }
            _955 = frontier_phi_10_pred;
            _957 = frontier_phi_10_pred_1;
            _959 = frontier_phi_10_pred_2;
            _506 = _794 + _955;
            _508 = _795 + _957;
            _510 = _796 + _959;
            uint _800 = _799 + 1u;
            if (_800 == _189)
            {
                break;
            }
            else
            {
                _794 = _506;
                _795 = _508;
                _796 = _510;
                _797 = (_799 != 3u) ? (_797 >> 8u) : _379;
                _799 = _800;
                continue;
            }
        }
        _505 = _506;
        _507 = _508;
        _509 = _510;
    }
    precise float _511 = _505 * _505;
    precise float _512 = _507 * _507;
    precise float _513 = _511 + _512;
    precise float _514 = _509 * _509;
    precise float _515 = _513 + _514;
    float _516 = sqrt(_515);
    bool _517 = _516 < 0.00011000000085914507508277893066406;
    float _521 = inversesqrt(dot(vec3(_505, _507, _509), vec3(_505, _507, _509)));
    precise float _522 = _505 * _521;
    precise float _523 = _507 * _521;
    precise float _524 = _509 * _521;
    precise float _525 = _424 * _524;
    precise float _526 = _429 * _523;
    precise float _527 = _525 - _526;
    precise float _528 = _429 * _522;
    precise float _529 = _419 * _524;
    precise float _530 = _528 - _529;
    precise float _531 = _419 * _523;
    precise float _532 = _424 * _522;
    precise float _533 = _531 - _532;
    float _537 = inversesqrt(dot(vec3(_527, _530, _533), vec3(_527, _530, _533)));
    precise float _538 = _537 * _527;
    precise float _539 = _537 * _530;
    precise float _540 = _537 * _533;
    precise float _541 = _516 + 1.0;
    precise float _543 = cbMtdParam._m0[10u].y * log2(_541);
    precise float _544 = _500 - _314;
    precise float _545 = _501 - _321;
    precise float _546 = _502 - _328;
    precise float _547 = dot(vec3(_538, _539, _540), vec3(_544, _545, _546));
    precise float _550 = _538 * _547;
    precise float _551 = _539 * _547;
    precise float _552 = _540 * _547;
    precise float _553 = _314 + _550;
    precise float _554 = _321 + _551;
    precise float _555 = _328 + _552;
    precise float _556 = _500 - _553;
    precise float _557 = _501 - _554;
    precise float _558 = _502 - _555;
    precise float _559 = _539 * _558;
    precise float _560 = _540 * _557;
    precise float _561 = _559 - _560;
    precise float _562 = _540 * _556;
    precise float _563 = _538 * _558;
    precise float _564 = _562 - _563;
    precise float _565 = _538 * _557;
    precise float _566 = _539 * _556;
    precise float _567 = _565 - _566;
    float _568 = sin(_543);
    float _569 = cos(_543);
    precise float _570 = _556 * _569;
    precise float _571 = _557 * _569;
    precise float _572 = _558 * _569;
    precise float _573 = _568 * _561;
    precise float _574 = _568 * _564;
    precise float _575 = _568 * _567;
    precise float _576 = _570 + _573;
    precise float _577 = _571 + _574;
    precise float _578 = _575 + _572;
    precise float _579 = _553 + _576;
    precise float _580 = _554 + _577;
    precise float _581 = _555 + _578;
    precise float _582 = _579 - _500;
    precise float _583 = _580 - _501;
    precise float _584 = _581 - _502;
    precise float _588 = _497 + (_517 ? 0.0 : _582);
    precise float _589 = _498 + (_517 ? 0.0 : _583);
    precise float _590 = _499 + (_517 ? 0.0 : _584);
    precise float _591 = _240 + _588;
    precise float _592 = _247 + _589;
    precise float _593 = _254 + _590;
    precise float _594 = _591 - cbSceneParam._m0[3u].x;
    precise float _595 = _592 - cbSceneParam._m0[3u].y;
    precise float _596 = _593 - cbSceneParam._m0[3u].z;
    precise float _624 = cbSceneParam._m0[24u].x * _594;
    precise float _625 = _595 * cbSceneParam._m0[24u].y;
    precise float _626 = _625 + _624;
    precise float _627 = _596 * cbSceneParam._m0[24u].z;
    precise float _628 = _627 + _626;
    precise float _629 = 1.0 * cbSceneParam._m0[24u].w;
    precise float _630 = _629 + _628;
    precise float _631 = cbSceneParam._m0[25u].x * _594;
    precise float _632 = _595 * cbSceneParam._m0[25u].y;
    precise float _633 = _632 + _631;
    precise float _634 = _596 * cbSceneParam._m0[25u].z;
    precise float _635 = _634 + _633;
    precise float _636 = 1.0 * cbSceneParam._m0[25u].w;
    precise float _637 = _636 + _635;
    precise float _638 = cbSceneParam._m0[26u].x * _594;
    precise float _639 = _595 * cbSceneParam._m0[26u].y;
    precise float _640 = _639 + _638;
    precise float _641 = _596 * cbSceneParam._m0[26u].z;
    precise float _642 = _641 + _640;
    precise float _643 = 1.0 * cbSceneParam._m0[26u].w;
    precise float _644 = _643 + _642;
    precise float _645 = cbSceneParam._m0[27u].x * _594;
    precise float _646 = _595 * cbSceneParam._m0[27u].y;
    precise float _647 = _646 + _645;
    precise float _648 = _596 * cbSceneParam._m0[27u].z;
    precise float _649 = _648 + _647;
    precise float _650 = 1.0 * cbSceneParam._m0[27u].w;
    precise float _651 = _650 + _649;
    gl_Position.x = _630;
    gl_Position.y = _637;
    gl_Position.z = _644;
    gl_Position.w = _651;
    NORMAL_1.x = fma(_166, cbObjMatrix._m0[_212].z, fma(_165, cbObjMatrix._m0[_212].y, cbObjMatrix._m0[_212].x * _163));
    NORMAL_1.y = fma(_166, cbObjMatrix._m0[_219].z, fma(_165, cbObjMatrix._m0[_219].y, cbObjMatrix._m0[_219].x * _163));
    NORMAL_1.z = fma(_166, cbObjMatrix._m0[_226].z, fma(_165, cbObjMatrix._m0[_226].y, cbObjMatrix._m0[_226].x * _163));
    NORMAL_1.w = float(_203);
    TANGENT_1.x = fma(_178, cbObjMatrix._m0[_212].z, fma(_177, cbObjMatrix._m0[_212].y, cbObjMatrix._m0[_212].x * _176));
    TANGENT_1.y = fma(_178, cbObjMatrix._m0[_219].z, fma(_177, cbObjMatrix._m0[_219].y, cbObjMatrix._m0[_219].x * _176));
    TANGENT_1.z = fma(_178, cbObjMatrix._m0[_226].z, fma(_177, cbObjMatrix._m0[_226].y, cbObjMatrix._m0[_226].x * _176));
    TANGENT_1.w = (float(TANGENT.w) + (-127.0)) * 0.0078740157186985015869140625;
    TEXCOORD_2 = ((float(int(uint(TEXCOORD.x))) * 0.00048828125) * cbTexScroll._m0[0u].x) + cbTexScroll._m0[0u].z;
    TEXCOORD_1_1 = ((float(int(uint(TEXCOORD.y))) * 0.00048828125) * cbTexScroll._m0[0u].y) + cbTexScroll._m0[0u].w;
    TEXCOORD_3.x = TEXCOORD_1.x;
    TEXCOORD_3.y = TEXCOORD_1.y;
    TEXCOORD_3.z = TEXCOORD_1.z;
    TEXCOORD_3.w = COLOR_1.x;
    TEXCOORD_11 = sqrt(((_260 * _260) + (_261 * _261)) + (_262 * _262));
}


