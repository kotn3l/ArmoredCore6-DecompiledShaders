#version 460

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[12];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 5, std140) uniform cbObjMatrixUBO
{
    vec4 _m0[6];
} cbObjMatrix;

layout(set = 0, binding = 10, std140) uniform cbInstanceIdxParamUBO
{
    vec4 _m0[1];
} cbInstanceIdxParam;

layout(set = 0, binding = 26) uniform usamplerBuffer g_forceParam;
layout(set = 0, binding = 25) uniform usamplerBuffer g_InstanceIndexBuffer;

layout(location = 0) in vec3 POSITION;
layout(location = 1) in uvec4 NORMAL;
layout(location = 2) in uvec4 TANGENT;
layout(location = 3) in uvec4 BLENDINDICES;
layout(location = 4) in vec4 BLENDWEIGHT;
layout(location = 5) in vec4 COLOR_1;
layout(location = 6) in ivec2 TEXCOORD;
layout(location = 7) in vec4 TEXCOORD_1;

uint _799;
uint _922;

void main()
{
    uint _67 = uint(gl_InstanceIndex) - uint(gl_BaseInstance);
    gl_Position.x = 0.0;
    gl_Position.y = 0.0;
    gl_Position.z = 0.0;
    gl_Position.w = 0.0;
    uint _115 = _67 * 13u;
    uvec4 _121 = floatBitsToUint(cbInstanceData._m0[_115 + 7u]);
    uint _124 = min(_121.y, 8u);
    bool _127 = _124 == 0u;
    precise float _128 = POSITION.x + 0.0;
    precise float _129 = POSITION.y + 0.0;
    precise float _130 = POSITION.z + 0.0;
    uint _135 = floatBitsToUint(cbInstanceIdxParam._m0[0u]).x + _67;
    precise float _139 = dot(vec4(1.0), vec4(BLENDWEIGHT.x, BLENDWEIGHT.y, BLENDWEIGHT.z, BLENDWEIGHT.w));
    float _143 = isnan(_139) ? 0.001000000047497451305389404296875 : (isnan(0.001000000047497451305389404296875) ? _139 : max(0.001000000047497451305389404296875, _139));
    precise float _145 = BLENDWEIGHT.x / _143;
    precise float _146 = BLENDWEIGHT.y / _143;
    precise float _147 = BLENDWEIGHT.z / _143;
    precise float _148 = BLENDWEIGHT.w / _143;
    uvec4 _155 = floatBitsToUint(cbInstanceData._m0[(texelFetch(g_InstanceIndexBuffer, int(_135)).x * 13u) + 4u]);
    uint _156 = _155.x;
    uint _158 = (_156 + uint(float(BLENDINDICES.x))) * 3u;
    uint _165 = _158 + 1u;
    uint _172 = _158 + 2u;
    precise float _179 = _145 * cbObjMatrix._m0[_158].x;
    precise float _180 = _145 * cbObjMatrix._m0[_165].x;
    precise float _181 = _145 * cbObjMatrix._m0[_172].x;
    precise float _182 = _145 * cbObjMatrix._m0[_158].y;
    precise float _183 = _145 * cbObjMatrix._m0[_165].y;
    precise float _184 = _145 * cbObjMatrix._m0[_172].y;
    precise float _185 = _145 * cbObjMatrix._m0[_158].z;
    precise float _186 = _145 * cbObjMatrix._m0[_165].z;
    precise float _187 = _145 * cbObjMatrix._m0[_172].z;
    precise float _188 = _145 * cbObjMatrix._m0[_158].w;
    precise float _189 = _145 * cbObjMatrix._m0[_165].w;
    precise float _190 = _145 * cbObjMatrix._m0[_172].w;
    uint _193 = (_156 + uint(float(BLENDINDICES.y))) * 3u;
    uint _200 = _193 + 1u;
    uint _207 = _193 + 2u;
    precise float _214 = _146 * cbObjMatrix._m0[_193].x;
    precise float _215 = _146 * cbObjMatrix._m0[_200].x;
    precise float _216 = _146 * cbObjMatrix._m0[_207].x;
    precise float _217 = _146 * cbObjMatrix._m0[_193].y;
    precise float _218 = _146 * cbObjMatrix._m0[_200].y;
    precise float _219 = _146 * cbObjMatrix._m0[_207].y;
    precise float _220 = _146 * cbObjMatrix._m0[_193].z;
    precise float _221 = _146 * cbObjMatrix._m0[_200].z;
    precise float _222 = _146 * cbObjMatrix._m0[_207].z;
    precise float _223 = _146 * cbObjMatrix._m0[_193].w;
    precise float _224 = _146 * cbObjMatrix._m0[_200].w;
    precise float _225 = _146 * cbObjMatrix._m0[_207].w;
    precise float _226 = _179 + _214;
    precise float _227 = _180 + _215;
    precise float _228 = _181 + _216;
    precise float _229 = _182 + _217;
    precise float _230 = _183 + _218;
    precise float _231 = _184 + _219;
    precise float _232 = _185 + _220;
    precise float _233 = _186 + _221;
    precise float _234 = _187 + _222;
    precise float _235 = _188 + _223;
    precise float _236 = _189 + _224;
    precise float _237 = _190 + _225;
    uint _240 = (_156 + uint(float(BLENDINDICES.z))) * 3u;
    uint _247 = _240 + 1u;
    uint _254 = _240 + 2u;
    precise float _261 = _147 * cbObjMatrix._m0[_240].x;
    precise float _262 = _147 * cbObjMatrix._m0[_247].x;
    precise float _263 = _147 * cbObjMatrix._m0[_254].x;
    precise float _264 = _147 * cbObjMatrix._m0[_240].y;
    precise float _265 = _147 * cbObjMatrix._m0[_247].y;
    precise float _266 = _147 * cbObjMatrix._m0[_254].y;
    precise float _267 = _147 * cbObjMatrix._m0[_240].z;
    precise float _268 = _147 * cbObjMatrix._m0[_247].z;
    precise float _269 = _147 * cbObjMatrix._m0[_254].z;
    precise float _270 = _147 * cbObjMatrix._m0[_240].w;
    precise float _271 = _147 * cbObjMatrix._m0[_247].w;
    precise float _272 = _147 * cbObjMatrix._m0[_254].w;
    precise float _273 = _226 + _261;
    precise float _274 = _227 + _262;
    precise float _275 = _228 + _263;
    precise float _276 = _229 + _264;
    precise float _277 = _230 + _265;
    precise float _278 = _231 + _266;
    precise float _279 = _232 + _267;
    precise float _280 = _233 + _268;
    precise float _281 = _234 + _269;
    precise float _282 = _235 + _270;
    precise float _283 = _236 + _271;
    precise float _284 = _237 + _272;
    uint _287 = (_156 + uint(float(BLENDINDICES.w))) * 3u;
    uint _294 = _287 + 1u;
    uint _301 = _287 + 2u;
    precise float _308 = _148 * cbObjMatrix._m0[_287].x;
    precise float _309 = _148 * cbObjMatrix._m0[_294].x;
    precise float _310 = _148 * cbObjMatrix._m0[_301].x;
    precise float _311 = _148 * cbObjMatrix._m0[_287].y;
    precise float _312 = _148 * cbObjMatrix._m0[_294].y;
    precise float _313 = _148 * cbObjMatrix._m0[_301].y;
    precise float _314 = _148 * cbObjMatrix._m0[_287].z;
    precise float _315 = _148 * cbObjMatrix._m0[_294].z;
    precise float _316 = _148 * cbObjMatrix._m0[_301].z;
    precise float _317 = _148 * cbObjMatrix._m0[_287].w;
    precise float _318 = _148 * cbObjMatrix._m0[_294].w;
    precise float _319 = _148 * cbObjMatrix._m0[_301].w;
    precise float _320 = _273 + _308;
    precise float _321 = _274 + _309;
    precise float _322 = _275 + _310;
    precise float _323 = _276 + _311;
    precise float _324 = _277 + _312;
    precise float _325 = _278 + _313;
    precise float _326 = _279 + _314;
    precise float _327 = _280 + _315;
    precise float _328 = _281 + _316;
    precise float _329 = _282 + _317;
    precise float _330 = _283 + _318;
    precise float _331 = _284 + _319;
    precise float _332 = _128 * _320;
    precise float _333 = _129 * _323;
    precise float _334 = _333 + _332;
    precise float _335 = _130 * _326;
    precise float _336 = _335 + _334;
    precise float _337 = 1.0 * _329;
    precise float _338 = _337 + _336;
    precise float _339 = _128 * _321;
    precise float _340 = _129 * _324;
    precise float _341 = _340 + _339;
    precise float _342 = _130 * _327;
    precise float _343 = _342 + _341;
    precise float _344 = 1.0 * _330;
    precise float _345 = _344 + _343;
    precise float _346 = _128 * _322;
    precise float _347 = _129 * _325;
    precise float _348 = _347 + _346;
    precise float _349 = _130 * _328;
    precise float _350 = _349 + _348;
    precise float _351 = 1.0 * _331;
    precise float _352 = _351 + _350;
    uint _359 = _115 + 1u;
    uint _366 = _115 + 2u;
    precise float _373 = TEXCOORD_1.x * cbInstanceData._m0[_115].x;
    precise float _374 = TEXCOORD_1.y * cbInstanceData._m0[_115].y;
    precise float _375 = _374 + _373;
    precise float _376 = TEXCOORD_1.z * cbInstanceData._m0[_115].z;
    precise float _377 = _376 + _375;
    precise float _378 = 1.0 * cbInstanceData._m0[_115].w;
    precise float _379 = _378 + _377;
    precise float _380 = TEXCOORD_1.x * cbInstanceData._m0[_359].x;
    precise float _381 = TEXCOORD_1.y * cbInstanceData._m0[_359].y;
    precise float _382 = _381 + _380;
    precise float _383 = TEXCOORD_1.z * cbInstanceData._m0[_359].z;
    precise float _384 = _383 + _382;
    precise float _385 = 1.0 * cbInstanceData._m0[_359].w;
    precise float _386 = _385 + _384;
    precise float _387 = TEXCOORD_1.x * cbInstanceData._m0[_366].x;
    precise float _388 = TEXCOORD_1.y * cbInstanceData._m0[_366].y;
    precise float _389 = _388 + _387;
    precise float _390 = TEXCOORD_1.z * cbInstanceData._m0[_366].z;
    precise float _391 = _390 + _389;
    precise float _392 = 1.0 * cbInstanceData._m0[_366].w;
    precise float _393 = _392 + _391;
    precise float _399 = _338 - _379;
    precise float _400 = _345 - _386;
    precise float _401 = _352 - _393;
    precise float _402 = _399 * _399;
    precise float _403 = _400 * _400;
    precise float _404 = _402 + _403;
    precise float _405 = _401 * _401;
    precise float _406 = _404 + _405;
    precise float _408 = cbMtdParam._m0[10u].z * sqrt(_406);
    precise float _413 = cbInstanceData._m0[_115].x * 0.0;
    precise float _414 = 0.0 * cbInstanceData._m0[_115].y;
    precise float _415 = _414 + _413;
    precise float _416 = 0.0 * cbInstanceData._m0[_115].z;
    precise float _417 = _416 + _415;
    precise float _418 = 1.0 * cbInstanceData._m0[_115].w;
    precise float _419 = _418 + _417;
    precise float _420 = cbInstanceData._m0[_359].x * 0.0;
    precise float _421 = 0.0 * cbInstanceData._m0[_359].y;
    precise float _422 = _421 + _420;
    precise float _423 = 0.0 * cbInstanceData._m0[_359].z;
    precise float _424 = _423 + _422;
    precise float _425 = 1.0 * cbInstanceData._m0[_359].w;
    precise float _426 = _425 + _424;
    precise float _427 = cbInstanceData._m0[_366].x * 0.0;
    precise float _428 = 0.0 * cbInstanceData._m0[_366].y;
    precise float _429 = _428 + _427;
    precise float _430 = 0.0 * cbInstanceData._m0[_366].z;
    precise float _431 = _430 + _429;
    precise float _432 = 1.0 * cbInstanceData._m0[_366].w;
    precise float _433 = _432 + _431;
    precise float _436 = _338 * _338;
    precise float _437 = _345 * _345;
    precise float _438 = _436 + _437;
    precise float _439 = _352 * _352;
    precise float _440 = _438 + _439;
    precise float _442 = cbMtdParam._m0[11u].x * sqrt(_440);
    precise float _443 = cbPerFrame._m0[22u].x + _442;
    uint _444 = _121.w;
    float _445;
    float _447;
    float _449;
    if (_127)
    {
        _445 = 0.0;
        _447 = 0.0;
        _449 = 0.0;
    }
    else
    {
        uint _569 = _121.z;
        precise float _446;
        precise float _448;
        precise float _450;
        float _992;
        float _994;
        float _996;
        float _731 = 0.0;
        float _732 = 0.0;
        float _733 = 0.0;
        uint _734 = _569;
        uint _736 = 0u;
        float _772;
        float _791;
        vec4 _804;
        float _805;
        float _806;
        float _820;
        float _821;
        float _822;
        float _839;
        float _840;
        float _841;
        float _842;
        bool _843;
        bool _844;
        bool _845;
        precise float _846;
        precise float _847;
        precise float _848;
        float _849;
        float _850;
        float _851;
        precise float _852;
        bool _855;
        for (;;)
        {
            uint _738 = _734 & 255u;
            uint _740 = _738 * 24u;
            uvec3 _750 = uvec3(texelFetch(g_forceParam, int(_740)).x, texelFetch(g_forceParam, int(_740 + 1u)).x, texelFetch(g_forceParam, int(_740 + 2u)).x);
            uint _755 = (_738 * 24u) + 4u;
            vec4 _768 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_755)).x, texelFetch(g_forceParam, int(_755 + 1u)).x, texelFetch(g_forceParam, int(_755 + 2u)).x, texelFetch(g_forceParam, int(_755 + 3u)).x));
            _772 = _768.w;
            uint _774 = (_738 * 24u) + 8u;
            vec4 _787 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_774)).x, texelFetch(g_forceParam, int(_774 + 1u)).x, texelFetch(g_forceParam, int(_774 + 2u)).x, texelFetch(g_forceParam, int(_774 + 3u)).x));
            _791 = _787.w;
            uint _793 = (_738 * 24u) + 12u;
            _804 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_793)).x, texelFetch(g_forceParam, int(_793 + 1u)).x, _799, texelFetch(g_forceParam, int(_793 + 3u)).x));
            _805 = _804.x;
            _806 = _804.w;
            uint _809 = (_738 * 24u) + 16u;
            vec3 _819 = uintBitsToFloat(uvec3(texelFetch(g_forceParam, int(_809)).x, texelFetch(g_forceParam, int(_809 + 1u)).x, texelFetch(g_forceParam, int(_809 + 2u)).x));
            _820 = _819.x;
            _821 = _819.y;
            _822 = _819.z;
            uint _825 = (_738 * 24u) + 20u;
            vec4 _838 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_825)).x, texelFetch(g_forceParam, int(_825 + 1u)).x, texelFetch(g_forceParam, int(_825 + 2u)).x, texelFetch(g_forceParam, int(_825 + 3u)).x));
            _839 = _838.x;
            _840 = _838.y;
            _841 = _838.z;
            _842 = _838.w;
            _843 = _750.x == 1u;
            _844 = _750.y == 1u;
            _845 = _750.z == 1u;
            _846 = _419 - _768.x;
            _847 = _426 - _768.y;
            _848 = _433 - _768.z;
            _849 = _843 ? _787.x : _846;
            _850 = _843 ? _787.y : _847;
            _851 = _843 ? _787.z : _848;
            _852 = dot(vec3(_849, _850, _851), vec3(_849, _850, _851));
            _855 = _852 > 0.0;
            float frontier_phi_8_pred;
            float frontier_phi_8_pred_1;
            float frontier_phi_8_pred_2;
            if (_855)
            {
                precise float _978 = _846 * _846;
                precise float _979 = _847 * _847;
                precise float _980 = _978 + _979;
                precise float _981 = _848 * _848;
                precise float _982 = _981 + _980;
                float _983 = sqrt(_982);
                float _984 = inversesqrt(_852);
                precise float _985 = _849 * _984;
                precise float _986 = _850 * _984;
                precise float _987 = _851 * _984;
                precise float _989 = _983 / (isnan(0.001000000047497451305389404296875) ? _804.y : (isnan(_804.y) ? 0.001000000047497451305389404296875 : max(_804.y, 0.001000000047497451305389404296875)));
                precise float _990 = 1.0 - _989;
                float _1321 = isnan(0.0) ? _990 : (isnan(_990) ? 0.0 : max(_990, 0.0));
                float _991 = isnan(1.0) ? _1321 : (isnan(_1321) ? 1.0 : min(_1321, 1.0));
                float _1041;
                if (_845)
                {
                    float _1028 = inversesqrt(dot(vec3(_846, _847, _848), vec3(_846, _847, _848)));
                    precise float _1029 = _846 * _1028;
                    precise float _1030 = _847 * _1028;
                    precise float _1031 = _848 * _1028;
                    precise float _1035 = dot(vec3(_985, _986, _987), vec3(_1029, _1030, _1031)) * 0.800000011920928955078125;
                    precise float _1037 = _1035 + 0.20000000298023223876953125;
                    float _1332 = isnan(0.0) ? _1037 : (isnan(_1037) ? 0.0 : max(_1037, 0.0));
                    precise float _1040 = _991 * (isnan(1.0) ? _1332 : (isnan(_1332) ? 1.0 : min(_1332, 1.0)));
                    _1041 = _1040;
                }
                else
                {
                    _1041 = _991;
                }
                float frontier_phi_8_pred_12_ladder;
                float frontier_phi_8_pred_12_ladder_1;
                float frontier_phi_8_pred_12_ladder_2;
                if (_1041 > 0.0)
                {
                    bool _1060 = _843 && (!_845);
                    precise float _1062 = _983 * (-4.0);
                    precise float _1066 = 6.283184051513671875 / (isnan(0.001000000047497451305389404296875) ? _805 : (isnan(_805) ? 0.001000000047497451305389404296875 : max(_805, 0.001000000047497451305389404296875)));
                    precise float _1068 = dot(vec2(_985, _987), vec2(_846, _848));
                    precise float _1072 = _1066 * _1068;
                    precise float _1073 = float(_1060) * _1072;
                    precise float _1074 = _443 * _1066;
                    precise float _1075 = _1074 - _1073;
                    precise float _1076 = (_1060 ? 0.0 : _1062) + _1075;
                    precise float _1078 = _791 * sin(_1076);
                    precise float _1079 = _986 * 0.0;
                    precise float _1080 = _1079 - _987;
                    precise float _1081 = _987 * 0.0;
                    precise float _1082 = _985 * 0.0;
                    precise float _1083 = _1081 - _1082;
                    precise float _1084 = _985 - _1079;
                    precise float _1085 = _806 * _1078;
                    float _1086 = _843 ? _1085 : 0.0;
                    float _1155;
                    if (_844)
                    {
                        precise float _1115 = _820 * 2.0;
                        precise float _1117 = _840 + _841;
                        precise float _1118 = _842 + _1117;
                        precise float _1120 = 6.283184051513671875 / (isnan(0.001000000047497451305389404296875) ? _820 : (isnan(_820) ? 0.001000000047497451305389404296875 : max(_820, 0.001000000047497451305389404296875)));
                        precise float _1121 = _839 * _1120;
                        precise float _1122 = (-0.0) - _985;
                        precise float _1127 = dot(vec2(_987, _1122), vec2(_846, _848)) / _1115;
                        precise float _1128 = (-0.0) - _1127;
                        float _1131 = fract(abs(_1127));
                        precise float _1132 = (-0.0) - _1131;
                        precise float _1134 = _1115 * ((_1127 >= _1128) ? _1131 : _1132);
                        precise float _1135 = _1134 * 6.283184051513671875;
                        precise float _1136 = _1135 / _1115;
                        precise float _1138 = (isnan(5.0) ? _820 : (isnan(_820) ? 5.0 : min(_820, 5.0))) * sin(_1136);
                        precise float _1139 = _1068 + _1138;
                        precise float _1140 = _820 * 0.25;
                        precise float _1142 = _443 * _839;
                        precise float _1143 = _1142 - _1140;
                        precise float _1144 = _1143 - _1139;
                        precise float _1145 = _839 * _1118;
                        precise float _1147 = _1144 / (isnan(0.001000000047497451305389404296875) ? _1145 : (isnan(_1145) ? 0.001000000047497451305389404296875 : max(_1145, 0.001000000047497451305389404296875)));
                        float _1148 = fract(_1147);
                        precise float _1150 = 1.0 - _1148;
                        float _1151 = (_1147 < 0.0) ? _1150 : _1148;
                        precise float _1152 = _1117 / _1118;
                        precise float _1153 = _840 / _1118;
                        float _1231;
                        if (_1151 < _1153)
                        {
                            precise float _1227 = _1151 / _1153;
                            _1231 = _1227;
                        }
                        else
                        {
                            float frontier_phi_27_24_ladder;
                            if (_1151 < _1152)
                            {
                                precise float _1241 = _1151 - _1153;
                                precise float _1242 = _1152 - _1153;
                                precise float _1243 = _1241 / _1242;
                                precise float _1232 = 1.0 - _1243;
                                frontier_phi_27_24_ladder = _1232;
                            }
                            else
                            {
                                frontier_phi_27_24_ladder = 0.0;
                            }
                            _1231 = frontier_phi_27_24_ladder;
                        }
                        precise float _1233 = _822 * _1231;
                        precise float _1234 = _1120 * _1068;
                        precise float _1235 = _443 * _1121;
                        precise float _1236 = _1235 - _1234;
                        precise float _1238 = _821 + sin(_1236);
                        precise float _1240 = _1233 * abs(_1238);
                        precise float _1156 = _1240 + 0.0;
                        _1155 = _1156;
                    }
                    else
                    {
                        _1155 = 0.0;
                    }
                    precise float _1157 = _772 + _1078;
                    precise float _1158 = _1157 + _1155;
                    precise float _1159 = _985 * _1158;
                    precise float _1160 = _986 * _1158;
                    precise float _1161 = _987 * _1158;
                    precise float _1162 = _1080 * _1086;
                    precise float _1163 = _1083 * _1086;
                    precise float _1164 = _1084 * _1086;
                    precise float _1165 = _1162 + _1159;
                    precise float _1166 = _1163 + _1160;
                    precise float _1167 = _1164 + _1161;
                    precise float _1168 = _1041 * _1165;
                    precise float _1169 = _1041 * _1166;
                    precise float _1170 = _1041 * _1167;
                    precise float _993 = _1168 * 0.0500000007450580596923828125;
                    precise float _995 = _1169 * 0.0500000007450580596923828125;
                    precise float _997 = _1170 * 0.0500000007450580596923828125;
                    frontier_phi_8_pred_12_ladder = _993;
                    frontier_phi_8_pred_12_ladder_1 = _995;
                    frontier_phi_8_pred_12_ladder_2 = _997;
                }
                else
                {
                    frontier_phi_8_pred_12_ladder = 0.0;
                    frontier_phi_8_pred_12_ladder_1 = 0.0;
                    frontier_phi_8_pred_12_ladder_2 = 0.0;
                }
                frontier_phi_8_pred = frontier_phi_8_pred_12_ladder;
                frontier_phi_8_pred_1 = frontier_phi_8_pred_12_ladder_1;
                frontier_phi_8_pred_2 = frontier_phi_8_pred_12_ladder_2;
            }
            else
            {
                frontier_phi_8_pred = 0.0;
                frontier_phi_8_pred_1 = 0.0;
                frontier_phi_8_pred_2 = 0.0;
            }
            _992 = frontier_phi_8_pred;
            _994 = frontier_phi_8_pred_1;
            _996 = frontier_phi_8_pred_2;
            _446 = _731 + _992;
            _448 = _732 + _994;
            _450 = _733 + _996;
            uint _737 = _736 + 1u;
            if (_737 == _124)
            {
                break;
            }
            else
            {
                _731 = _446;
                _732 = _448;
                _733 = _450;
                _734 = (_736 != 3u) ? (_734 >> 8u) : _444;
                _736 = _737;
                continue;
            }
        }
        _445 = _446;
        _447 = _448;
        _449 = _450;
    }
    precise float _451 = _445 * _445;
    precise float _452 = _447 * _447;
    precise float _453 = _451 + _452;
    precise float _454 = _449 * _449;
    precise float _455 = _453 + _454;
    float _456 = sqrt(_455);
    bool _457 = _456 < 0.00011000000085914507508277893066406;
    float _462 = inversesqrt(dot(vec3(cbInstanceData._m0[_115].x, cbInstanceData._m0[_359].x, cbInstanceData._m0[_366].x), vec3(cbInstanceData._m0[_115].x, cbInstanceData._m0[_359].x, cbInstanceData._m0[_366].x)));
    precise float _463 = cbInstanceData._m0[_115].x * _462;
    precise float _464 = cbInstanceData._m0[_359].x * _462;
    precise float _465 = cbInstanceData._m0[_366].x * _462;
    float _469 = inversesqrt(dot(vec3(cbInstanceData._m0[_115].y, cbInstanceData._m0[_359].y, cbInstanceData._m0[_366].y), vec3(cbInstanceData._m0[_115].y, cbInstanceData._m0[_359].y, cbInstanceData._m0[_366].y)));
    precise float _470 = cbInstanceData._m0[_115].y * _469;
    precise float _471 = cbInstanceData._m0[_359].y * _469;
    precise float _472 = cbInstanceData._m0[_366].y * _469;
    float _476 = inversesqrt(dot(vec3(cbInstanceData._m0[_115].z, cbInstanceData._m0[_359].z, cbInstanceData._m0[_366].z), vec3(cbInstanceData._m0[_115].z, cbInstanceData._m0[_359].z, cbInstanceData._m0[_366].z)));
    precise float _477 = cbInstanceData._m0[_115].z * _476;
    precise float _478 = cbInstanceData._m0[_359].z * _476;
    precise float _479 = cbInstanceData._m0[_366].z * _476;
    precise float _480 = _463 * 0.0;
    precise float _481 = 1.0 * _470;
    precise float _482 = _481 + _480;
    precise float _483 = 0.0 * _477;
    precise float _484 = _483 + _482;
    precise float _485 = _464 * 0.0;
    precise float _486 = 1.0 * _471;
    precise float _487 = _486 + _485;
    precise float _488 = 0.0 * _478;
    precise float _489 = _488 + _487;
    precise float _490 = _465 * 0.0;
    precise float _491 = 1.0 * _472;
    precise float _492 = _491 + _490;
    precise float _493 = 0.0 * _479;
    precise float _494 = _493 + _492;
    float _498 = inversesqrt(dot(vec3(_445, _447, _449), vec3(_445, _447, _449)));
    precise float _499 = _445 * _498;
    precise float _500 = _447 * _498;
    precise float _501 = _449 * _498;
    precise float _502 = _489 * _501;
    precise float _503 = _494 * _500;
    precise float _504 = _502 - _503;
    precise float _505 = _494 * _499;
    precise float _506 = _484 * _501;
    precise float _507 = _505 - _506;
    precise float _508 = _484 * _500;
    precise float _509 = _489 * _499;
    precise float _510 = _508 - _509;
    float _514 = inversesqrt(dot(vec3(_504, _507, _510), vec3(_504, _507, _510)));
    precise float _515 = _514 * _504;
    precise float _516 = _514 * _507;
    precise float _517 = _514 * _510;
    precise float _518 = _456 + 1.0;
    precise float _520 = cbMtdParam._m0[10u].w * log2(_518);
    precise float _521 = _338 - _419;
    precise float _522 = _345 - _426;
    precise float _523 = _352 - _433;
    precise float _524 = dot(vec3(_515, _516, _517), vec3(_521, _522, _523));
    precise float _527 = _515 * _524;
    precise float _528 = _516 * _524;
    precise float _529 = _517 * _524;
    precise float _530 = _419 + _527;
    precise float _531 = _426 + _528;
    precise float _532 = _433 + _529;
    precise float _533 = _338 - _530;
    precise float _534 = _345 - _531;
    precise float _535 = _352 - _532;
    precise float _536 = _516 * _535;
    precise float _537 = _517 * _534;
    precise float _538 = _536 - _537;
    precise float _539 = _517 * _533;
    precise float _540 = _515 * _535;
    precise float _541 = _539 - _540;
    precise float _542 = _515 * _534;
    precise float _543 = _516 * _533;
    precise float _544 = _542 - _543;
    float _545 = sin(_520);
    float _546 = cos(_520);
    precise float _547 = _533 * _546;
    precise float _548 = _534 * _546;
    precise float _549 = _535 * _546;
    precise float _550 = _545 * _538;
    precise float _551 = _545 * _541;
    precise float _552 = _545 * _544;
    precise float _553 = _547 + _550;
    precise float _554 = _548 + _551;
    precise float _555 = _552 + _549;
    precise float _556 = _530 + _553;
    precise float _557 = _531 + _554;
    precise float _558 = _532 + _555;
    precise float _559 = _556 - _338;
    precise float _560 = _557 - _345;
    precise float _561 = _558 - _352;
    float _562 = _457 ? 0.0 : _559;
    float _563 = _457 ? 0.0 : _560;
    float _564 = _457 ? 0.0 : _561;
    precise float _565 = _338 + _562;
    precise float _566 = _345 + _563;
    precise float _567 = _352 + _564;
    precise float _568 = cbPerFrame._m0[22u].x + _408;
    float _570;
    float _572;
    float _574;
    if (_127)
    {
        _570 = 0.0;
        _572 = 0.0;
        _574 = 0.0;
    }
    else
    {
        uint _730 = _121.z;
        precise float _571;
        precise float _573;
        precise float _575;
        float _1016;
        float _1018;
        float _1020;
        float _856 = 0.0;
        float _857 = 0.0;
        float _858 = 0.0;
        uint _859 = _730;
        uint _861 = 0u;
        float _895;
        float _914;
        vec4 _927;
        float _928;
        float _929;
        float _942;
        float _943;
        float _944;
        float _960;
        float _961;
        float _962;
        float _963;
        bool _964;
        bool _965;
        bool _966;
        precise float _967;
        precise float _968;
        precise float _969;
        float _970;
        float _971;
        float _972;
        precise float _973;
        bool _976;
        for (;;)
        {
            uint _863 = _859 & 255u;
            uint _864 = _863 * 24u;
            uvec3 _873 = uvec3(texelFetch(g_forceParam, int(_864)).x, texelFetch(g_forceParam, int(_864 + 1u)).x, texelFetch(g_forceParam, int(_864 + 2u)).x);
            uint _878 = (_863 * 24u) + 4u;
            vec4 _891 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_878)).x, texelFetch(g_forceParam, int(_878 + 1u)).x, texelFetch(g_forceParam, int(_878 + 2u)).x, texelFetch(g_forceParam, int(_878 + 3u)).x));
            _895 = _891.w;
            uint _897 = (_863 * 24u) + 8u;
            vec4 _910 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_897)).x, texelFetch(g_forceParam, int(_897 + 1u)).x, texelFetch(g_forceParam, int(_897 + 2u)).x, texelFetch(g_forceParam, int(_897 + 3u)).x));
            _914 = _910.w;
            uint _916 = (_863 * 24u) + 12u;
            _927 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_916)).x, texelFetch(g_forceParam, int(_916 + 1u)).x, _922, texelFetch(g_forceParam, int(_916 + 3u)).x));
            _928 = _927.x;
            _929 = _927.w;
            uint _931 = (_863 * 24u) + 16u;
            vec3 _941 = uintBitsToFloat(uvec3(texelFetch(g_forceParam, int(_931)).x, texelFetch(g_forceParam, int(_931 + 1u)).x, texelFetch(g_forceParam, int(_931 + 2u)).x));
            _942 = _941.x;
            _943 = _941.y;
            _944 = _941.z;
            uint _946 = (_863 * 24u) + 20u;
            vec4 _959 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_946)).x, texelFetch(g_forceParam, int(_946 + 1u)).x, texelFetch(g_forceParam, int(_946 + 2u)).x, texelFetch(g_forceParam, int(_946 + 3u)).x));
            _960 = _959.x;
            _961 = _959.y;
            _962 = _959.z;
            _963 = _959.w;
            _964 = _873.x == 1u;
            _965 = _873.y == 1u;
            _966 = _873.z == 1u;
            _967 = _379 - _891.x;
            _968 = _386 - _891.y;
            _969 = _393 - _891.z;
            _970 = _964 ? _910.x : _967;
            _971 = _964 ? _910.y : _968;
            _972 = _964 ? _910.z : _969;
            _973 = dot(vec3(_970, _971, _972), vec3(_970, _971, _972));
            _976 = _973 > 0.0;
            float frontier_phi_10_pred;
            float frontier_phi_10_pred_1;
            float frontier_phi_10_pred_2;
            if (_976)
            {
                precise float _1002 = _967 * _967;
                precise float _1003 = _968 * _968;
                precise float _1004 = _1002 + _1003;
                precise float _1005 = _969 * _969;
                precise float _1006 = _1005 + _1004;
                float _1007 = sqrt(_1006);
                float _1008 = inversesqrt(_973);
                precise float _1009 = _970 * _1008;
                precise float _1010 = _971 * _1008;
                precise float _1011 = _972 * _1008;
                precise float _1013 = _1007 / (isnan(0.001000000047497451305389404296875) ? _927.y : (isnan(_927.y) ? 0.001000000047497451305389404296875 : max(_927.y, 0.001000000047497451305389404296875)));
                precise float _1014 = 1.0 - _1013;
                float _1368 = isnan(0.0) ? _1014 : (isnan(_1014) ? 0.0 : max(_1014, 0.0));
                float _1015 = isnan(1.0) ? _1368 : (isnan(_1368) ? 1.0 : min(_1368, 1.0));
                float _1057;
                if (_966)
                {
                    float _1046 = inversesqrt(dot(vec3(_967, _968, _969), vec3(_967, _968, _969)));
                    precise float _1047 = _967 * _1046;
                    precise float _1048 = _968 * _1046;
                    precise float _1049 = _969 * _1046;
                    precise float _1053 = dot(vec3(_1009, _1010, _1011), vec3(_1047, _1048, _1049)) * 0.800000011920928955078125;
                    precise float _1054 = _1053 + 0.20000000298023223876953125;
                    float _1379 = isnan(0.0) ? _1054 : (isnan(_1054) ? 0.0 : max(_1054, 0.0));
                    precise float _1056 = _1015 * (isnan(1.0) ? _1379 : (isnan(_1379) ? 1.0 : min(_1379, 1.0)));
                    _1057 = _1056;
                }
                else
                {
                    _1057 = _1015;
                }
                float frontier_phi_10_pred_15_ladder;
                float frontier_phi_10_pred_15_ladder_1;
                float frontier_phi_10_pred_15_ladder_2;
                if (_1057 > 0.0)
                {
                    bool _1088 = _964 && (!_966);
                    precise float _1090 = _1007 * (-4.0);
                    precise float _1093 = 6.283184051513671875 / (isnan(0.001000000047497451305389404296875) ? _928 : (isnan(_928) ? 0.001000000047497451305389404296875 : max(_928, 0.001000000047497451305389404296875)));
                    precise float _1094 = cbMtdParam._m0[11u].y * _1093;
                    precise float _1095 = dot(vec2(_1009, _1011), vec2(_967, _969));
                    precise float _1098 = _1095 * _1094;
                    precise float _1099 = float(_1088) * _1098;
                    precise float _1100 = _568 * _1094;
                    precise float _1101 = _1100 - _1099;
                    precise float _1102 = (_1088 ? 0.0 : _1090) + _1101;
                    precise float _1104 = _914 * sin(_1102);
                    precise float _1105 = _1010 * 0.0;
                    precise float _1106 = _1105 - _1011;
                    precise float _1107 = _1011 * 0.0;
                    precise float _1108 = _1009 * 0.0;
                    precise float _1109 = _1107 - _1108;
                    precise float _1110 = _1009 - _1105;
                    precise float _1111 = _929 * _1104;
                    float _1112 = _964 ? _1111 : 0.0;
                    float _1211;
                    if (_965)
                    {
                        precise float _1173 = _942 * 2.0;
                        precise float _1174 = _961 + _962;
                        precise float _1175 = _963 + _1174;
                        precise float _1177 = 6.283184051513671875 / (isnan(0.001000000047497451305389404296875) ? _942 : (isnan(_942) ? 0.001000000047497451305389404296875 : max(_942, 0.001000000047497451305389404296875)));
                        precise float _1178 = cbMtdParam._m0[11u].y * _1177;
                        precise float _1179 = _960 * _1178;
                        precise float _1180 = (-0.0) - _1009;
                        precise float _1184 = dot(vec2(_1011, _1180), vec2(_967, _969)) / _1173;
                        precise float _1185 = (-0.0) - _1184;
                        float _1188 = fract(abs(_1184));
                        precise float _1189 = (-0.0) - _1188;
                        precise float _1191 = _1173 * ((_1184 >= _1185) ? _1188 : _1189);
                        precise float _1192 = _1191 * 6.283184051513671875;
                        precise float _1193 = _1192 / _1173;
                        precise float _1195 = (isnan(5.0) ? _942 : (isnan(_942) ? 5.0 : min(_942, 5.0))) * sin(_1193);
                        precise float _1196 = _1095 + _1195;
                        precise float _1197 = _942 * 0.25;
                        precise float _1198 = _568 * _960;
                        precise float _1199 = _1198 - _1197;
                        precise float _1200 = _1199 - _1196;
                        precise float _1201 = _960 * _1175;
                        precise float _1203 = _1200 / (isnan(0.001000000047497451305389404296875) ? _1201 : (isnan(_1201) ? 0.001000000047497451305389404296875 : max(_1201, 0.001000000047497451305389404296875)));
                        float _1204 = fract(_1203);
                        precise float _1206 = 1.0 - _1204;
                        float _1207 = (_1203 < 0.0) ? _1206 : _1204;
                        precise float _1208 = _1174 / _1175;
                        precise float _1209 = _961 / _1175;
                        float _1244;
                        if (_1207 < _1209)
                        {
                            precise float _1229 = _1207 / _1209;
                            _1244 = _1229;
                        }
                        else
                        {
                            float frontier_phi_29_26_ladder;
                            if (_1207 < _1208)
                            {
                                precise float _1254 = _1207 - _1209;
                                precise float _1255 = _1208 - _1209;
                                precise float _1256 = _1254 / _1255;
                                precise float _1245 = 1.0 - _1256;
                                frontier_phi_29_26_ladder = _1245;
                            }
                            else
                            {
                                frontier_phi_29_26_ladder = 0.0;
                            }
                            _1244 = frontier_phi_29_26_ladder;
                        }
                        precise float _1246 = _944 * _1244;
                        precise float _1247 = _1178 * _1095;
                        precise float _1248 = _568 * _1179;
                        precise float _1249 = _1248 - _1247;
                        precise float _1251 = _943 + sin(_1249);
                        precise float _1253 = _1246 * abs(_1251);
                        precise float _1212 = _1253 + 0.0;
                        _1211 = _1212;
                    }
                    else
                    {
                        _1211 = 0.0;
                    }
                    precise float _1213 = _895 + _1104;
                    precise float _1214 = _1213 + _1211;
                    precise float _1215 = _1009 * _1214;
                    precise float _1216 = _1010 * _1214;
                    precise float _1217 = _1011 * _1214;
                    precise float _1218 = _1106 * _1112;
                    precise float _1219 = _1109 * _1112;
                    precise float _1220 = _1110 * _1112;
                    precise float _1221 = _1218 + _1215;
                    precise float _1222 = _1219 + _1216;
                    precise float _1223 = _1220 + _1217;
                    precise float _1224 = _1057 * _1221;
                    precise float _1225 = _1057 * _1222;
                    precise float _1226 = _1057 * _1223;
                    precise float _1017 = _1224 * 0.0500000007450580596923828125;
                    precise float _1019 = _1225 * 0.0500000007450580596923828125;
                    precise float _1021 = _1226 * 0.0500000007450580596923828125;
                    frontier_phi_10_pred_15_ladder = _1017;
                    frontier_phi_10_pred_15_ladder_1 = _1019;
                    frontier_phi_10_pred_15_ladder_2 = _1021;
                }
                else
                {
                    frontier_phi_10_pred_15_ladder = 0.0;
                    frontier_phi_10_pred_15_ladder_1 = 0.0;
                    frontier_phi_10_pred_15_ladder_2 = 0.0;
                }
                frontier_phi_10_pred = frontier_phi_10_pred_15_ladder;
                frontier_phi_10_pred_1 = frontier_phi_10_pred_15_ladder_1;
                frontier_phi_10_pred_2 = frontier_phi_10_pred_15_ladder_2;
            }
            else
            {
                frontier_phi_10_pred = 0.0;
                frontier_phi_10_pred_1 = 0.0;
                frontier_phi_10_pred_2 = 0.0;
            }
            _1016 = frontier_phi_10_pred;
            _1018 = frontier_phi_10_pred_1;
            _1020 = frontier_phi_10_pred_2;
            _571 = _856 + _1016;
            _573 = _857 + _1018;
            _575 = _858 + _1020;
            uint _862 = _861 + 1u;
            if (_862 == _124)
            {
                break;
            }
            else
            {
                _856 = _571;
                _857 = _573;
                _858 = _575;
                _859 = (_861 != 3u) ? (_859 >> 8u) : _444;
                _861 = _862;
                continue;
            }
        }
        _570 = _571;
        _572 = _573;
        _574 = _575;
    }
    precise float _576 = _570 * _570;
    precise float _577 = _572 * _572;
    precise float _578 = _576 + _577;
    precise float _579 = _574 * _574;
    precise float _580 = _578 + _579;
    float _581 = sqrt(_580);
    bool _582 = _581 < 0.00011000000085914507508277893066406;
    float _586 = inversesqrt(dot(vec3(_570, _572, _574), vec3(_570, _572, _574)));
    precise float _587 = _570 * _586;
    precise float _588 = _572 * _586;
    precise float _589 = _574 * _586;
    precise float _590 = _489 * _589;
    precise float _591 = _494 * _588;
    precise float _592 = _590 - _591;
    precise float _593 = _494 * _587;
    precise float _594 = _484 * _589;
    precise float _595 = _593 - _594;
    precise float _596 = _484 * _588;
    precise float _597 = _489 * _587;
    precise float _598 = _596 - _597;
    float _602 = inversesqrt(dot(vec3(_592, _595, _598), vec3(_592, _595, _598)));
    precise float _603 = _602 * _592;
    precise float _604 = _602 * _595;
    precise float _605 = _602 * _598;
    precise float _606 = _581 + 1.0;
    precise float _608 = cbMtdParam._m0[10u].y * log2(_606);
    precise float _609 = _565 - _379;
    precise float _610 = _566 - _386;
    precise float _611 = _567 - _393;
    precise float _612 = dot(vec3(_603, _604, _605), vec3(_609, _610, _611));
    precise float _615 = _603 * _612;
    precise float _616 = _604 * _612;
    precise float _617 = _605 * _612;
    precise float _618 = _379 + _615;
    precise float _619 = _386 + _616;
    precise float _620 = _393 + _617;
    precise float _621 = _565 - _618;
    precise float _622 = _566 - _619;
    precise float _623 = _567 - _620;
    precise float _624 = _604 * _623;
    precise float _625 = _605 * _622;
    precise float _626 = _624 - _625;
    precise float _627 = _605 * _621;
    precise float _628 = _603 * _623;
    precise float _629 = _627 - _628;
    precise float _630 = _603 * _622;
    precise float _631 = _604 * _621;
    precise float _632 = _630 - _631;
    float _633 = sin(_608);
    float _634 = cos(_608);
    precise float _635 = _621 * _634;
    precise float _636 = _622 * _634;
    precise float _637 = _623 * _634;
    precise float _638 = _633 * _626;
    precise float _639 = _633 * _629;
    precise float _640 = _633 * _632;
    precise float _641 = _635 + _638;
    precise float _642 = _636 + _639;
    precise float _643 = _640 + _637;
    precise float _644 = _618 + _641;
    precise float _645 = _619 + _642;
    precise float _646 = _620 + _643;
    precise float _647 = _644 - _565;
    precise float _648 = _645 - _566;
    precise float _649 = _646 - _567;
    precise float _653 = _562 + (_582 ? 0.0 : _647);
    precise float _654 = _563 + (_582 ? 0.0 : _648);
    precise float _655 = _564 + (_582 ? 0.0 : _649);
    precise float _656 = _338 + _653;
    precise float _657 = _345 + _654;
    precise float _658 = _352 + _655;
    precise float _664 = _656 - cbSceneParam._m0[3u].x;
    precise float _665 = _657 - cbSceneParam._m0[3u].y;
    precise float _666 = _658 - cbSceneParam._m0[3u].z;
    precise float _694 = cbSceneParam._m0[24u].x * _664;
    precise float _695 = _665 * cbSceneParam._m0[24u].y;
    precise float _696 = _695 + _694;
    precise float _697 = _666 * cbSceneParam._m0[24u].z;
    precise float _698 = _697 + _696;
    precise float _699 = 1.0 * cbSceneParam._m0[24u].w;
    precise float _700 = _699 + _698;
    precise float _701 = cbSceneParam._m0[25u].x * _664;
    precise float _702 = _665 * cbSceneParam._m0[25u].y;
    precise float _703 = _702 + _701;
    precise float _704 = _666 * cbSceneParam._m0[25u].z;
    precise float _705 = _704 + _703;
    precise float _706 = 1.0 * cbSceneParam._m0[25u].w;
    precise float _707 = _706 + _705;
    precise float _708 = cbSceneParam._m0[26u].x * _664;
    precise float _709 = _665 * cbSceneParam._m0[26u].y;
    precise float _710 = _709 + _708;
    precise float _711 = _666 * cbSceneParam._m0[26u].z;
    precise float _712 = _711 + _710;
    precise float _713 = 1.0 * cbSceneParam._m0[26u].w;
    precise float _714 = _713 + _712;
    precise float _715 = cbSceneParam._m0[27u].x * _664;
    precise float _716 = _665 * cbSceneParam._m0[27u].y;
    precise float _717 = _716 + _715;
    precise float _718 = _666 * cbSceneParam._m0[27u].z;
    precise float _719 = _718 + _717;
    precise float _720 = 1.0 * cbSceneParam._m0[27u].w;
    precise float _721 = _720 + _719;
    gl_Position.x = 0.0;
    gl_Position.y = 0.0;
    gl_Position.z = 0.0;
    gl_Position.w = 0.0;
    gl_Position.x = _700;
    gl_Position.y = _707;
    gl_Position.z = _714;
    gl_Position.w = _721;
}


