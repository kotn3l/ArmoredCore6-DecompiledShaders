#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[12];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_M0_M1_Edge_Translucency_Pivot2_Child_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_M0_M1_Edge_Translucency_Pivot2_Child_snp_0_Texture2D_1;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_M0_M1_Edge_Translucency_Pivot2_Child_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in float TEXCOORD;
layout(location = 4, component = 1) in float TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _822;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _176 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _177 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _178 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _184 = inversesqrt(dot(vec3(_176, _177, _178), vec3(_176, _177, _178)));
    float _191 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _198 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _221 = texture(sampler2D(M_AMSN_M0_M1_Edge_Translucency_Pivot2_Child_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1) + cbTextureTilingScale._m0[0u].w));
    float _227 = _221.w;
    float _228 = _221.x * cbMtdParam._m0[9u].x;
    float _229 = _221.y * cbMtdParam._m0[9u].y;
    float _230 = _221.z * cbMtdParam._m0[9u].z;
    vec4 _242 = texture(sampler2D(M_AMSN_M0_M1_Edge_Translucency_Pivot2_Child_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1) + cbTextureTilingScale._m0[1u].w));
    float _246 = _242.z;
    float _250 = (_242.x * 2.0) + (-1.0);
    float _252 = (_242.y * 2.0) + (-1.0);
    float _253 = dot(vec2(_250, _252), vec2(_250, _252));
    float _3392 = isnan(0.0) ? _253 : (isnan(_253) ? 0.0 : max(_253, 0.0));
    float _259 = sqrt(1.0 - (isnan(1.0) ? _3392 : (isnan(_3392) ? 1.0 : min(_3392, 1.0))));
    vec4 _271 = texture(sampler2D(M_AMSN_M0_M1_Edge_Translucency_Pivot2_Child_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_1) + cbTextureTilingScale._m0[3u].w));
    float _278 = cbMtdParam._m0[10u].x * _271.x;
    float _281 = fma(_259, _191 * NORMAL.x, fma(_252, _198 * TANGENT.x, (_184 * _176) * _250));
    float _284 = fma(_259, _191 * NORMAL.y, fma(_252, _198 * TANGENT.y, (_184 * _177) * _250));
    float _287 = fma(_259, _191 * NORMAL.z, fma(_252, _198 * TANGENT.z, (_184 * _178) * _250));
    float _291 = inversesqrt(dot(vec3(_281, _284, _287), vec3(_281, _284, _287)));
    float _292 = _291 * _281;
    float _293 = _291 * _284;
    float _294 = _291 * _287;
    float _3403 = isnan(0.0) ? _227 : (isnan(_227) ? 0.0 : max(_227, 0.0));
    float _295 = isnan(1.0) ? _3403 : (isnan(_3403) ? 1.0 : min(_3403, 1.0));
    float _3414 = isnan(0.0) ? _246 : (isnan(_246) ? 0.0 : max(_246, 0.0));
    float _296 = isnan(1.0) ? _3414 : (isnan(_3414) ? 1.0 : min(_3414, 1.0));
    float _297 = isnan(0.0) ? _278 : (isnan(_278) ? 0.0 : max(_278, 0.0));
    float _3430 = isnan(0.0) ? _228 : (isnan(_228) ? 0.0 : max(_228, 0.0));
    float _3441 = isnan(0.0) ? _229 : (isnan(_229) ? 0.0 : max(_229, 0.0));
    float _3452 = isnan(0.0) ? _230 : (isnan(_230) ? 0.0 : max(_230, 0.0));
    float _316 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _358 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _368 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _358);
    float _369 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _358);
    float _370 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _358);
    float _374 = inversesqrt(dot(vec3(_368, _369, _370), vec3(_368, _369, _370)));
    float _375 = _368 * _374;
    float _376 = _369 * _374;
    float _377 = _370 * _374;
    float _383 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _384 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _405 = fma(_294, cbSceneParam._m0[5u].z, fma(_293, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _292));
    float _408 = fma(_294, cbSceneParam._m0[6u].z, fma(_293, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _292));
    float _411 = fma(_294, cbSceneParam._m0[7u].z, fma(_293, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _292));
    uint _424 = uint(roundEven(NORMAL.w)) * 13u;
    uint _427 = (_424 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _433 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3430 : (isnan(_3430) ? 1.0 : min(_3430, 1.0)))) * cbInstanceData._m0[_427].x;
    float _434 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3441 : (isnan(_3441) ? 1.0 : min(_3441, 1.0)))) * cbInstanceData._m0[_427].y;
    float _435 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3452 : (isnan(_3452) ? 1.0 : min(_3452, 1.0)))) * cbInstanceData._m0[_427].z;
    float _3463 = isnan(0.0) ? _433 : (isnan(_433) ? 0.0 : max(_433, 0.0));
    float _436 = isnan(1.0) ? _3463 : (isnan(_3463) ? 1.0 : min(_3463, 1.0));
    float _3474 = isnan(0.0) ? _434 : (isnan(_434) ? 0.0 : max(_434, 0.0));
    float _437 = isnan(1.0) ? _3474 : (isnan(_3474) ? 1.0 : min(_3474, 1.0));
    float _3485 = isnan(0.0) ? _435 : (isnan(_435) ? 0.0 : max(_435, 0.0));
    float _438 = isnan(1.0) ? _3485 : (isnan(_3485) ? 1.0 : min(_3485, 1.0));
    vec4 _447 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _383, cbSceneParam._m0[86u].y * _384));
    float _450 = _447.x * TEXCOORD_3.w;
    float _451 = dot(vec3(_292, _293, _294), vec3(_375, _376, _377));
    float _454 = _451 * 2.0;
    float _458 = (_454 * _292) - _375;
    float _459 = (_454 * _293) - _376;
    float _460 = (_454 * _294) - _377;
    float _461 = dot(vec3(_375, _376, _377), vec3(_292, _293, _294));
    float _464 = abs(_461);
    float _3496 = isnan(0.0) ? _464 : (isnan(_464) ? 0.0 : max(_464, 0.0));
    float _466 = sqrt(_296);
    float _479 = exp2((_466 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3496 : (isnan(_3496) ? 1.0 : min(_3496, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_466 * 3.0));
    float _511 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _515 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _519 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _821;
    float _823;
    float _824;
    float _825;
    float _826;
    float _827;
    float _828;
    float _829;
    float _830;
    float _831;
    float _832;
    float _833;
    float _834;
    float _835;
    float _836;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _546 = fma(_519, cbModelParam._m0[26u].z, fma(_515, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _511));
        float _550 = fma(_519, cbModelParam._m0[27u].z, fma(_515, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _511));
        float _554 = fma(_519, cbModelParam._m0[28u].z, fma(_515, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _511));
        float _579 = _511 + _292;
        float _580 = _515 + _293;
        float _581 = _519 + _294;
        float _591 = fma(_581, cbModelParam._m0[26u].z, fma(_580, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _579)) - _546;
        float _592 = fma(_581, cbModelParam._m0[27u].z, fma(_580, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _579)) - _550;
        float _593 = fma(_581, cbModelParam._m0[28u].z, fma(_580, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _579)) - _554;
        float _597 = inversesqrt(dot(vec3(_591, _592, _593), vec3(_591, _592, _593)));
        float _610 = ((_597 * _591) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_546 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _611 = ((_597 * _592) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_550 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _612 = ((_597 * _593) / cbModelParam._m0[34u].z) + ((((((_554 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _615 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_610, _611, _612), 0.0);
        vec4 _622 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_610, _611, _612), 0.0);
        vec4 _629 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_610, _611, _612), 0.0);
        vec4 _636 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_610, _611, _612), 0.0);
        float _649 = exp2((_615.w + (-0.5)) * 20.0) * 2.0;
        float _650 = _649 * (_615.x + (-0.5));
        float _651 = _649 * (_615.y + (-0.5));
        float _652 = _649 * (_615.z + (-0.5));
        float _659 = exp2((_622.w + (-0.5)) * 20.0) * 2.0;
        float _660 = _659 * (_622.x + (-0.5));
        float _661 = _659 * (_622.y + (-0.5));
        float _662 = _659 * (_622.z + (-0.5));
        float _669 = exp2((_629.w + (-0.5)) * 20.0) * 2.0;
        float _670 = _669 * (_629.x + (-0.5));
        float _671 = _669 * (_629.y + (-0.5));
        float _672 = _669 * (_629.z + (-0.5));
        float _679 = exp2((_636.w + (-0.5)) * 20.0) * 2.0;
        float _680 = _679 * (_636.x + (-0.5));
        float _681 = _679 * (_636.y + (-0.5));
        float _682 = _679 * (_636.z + (-0.5));
        float _683 = isnan(0.0) ? _680 : (isnan(_680) ? 0.0 : max(_680, 0.0));
        float _684 = isnan(0.0) ? _681 : (isnan(_681) ? 0.0 : max(_681, 0.0));
        float _685 = isnan(0.0) ? _682 : (isnan(_682) ? 0.0 : max(_682, 0.0));
        float _686 = _650 * 0.5;
        float _687 = _660 * 0.5;
        float _688 = _670 * 0.5;
        float _689 = dot(vec3(_686, _687, _688), vec3(_686, _687, _688));
        float _694 = (_689 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_689);
        float _703 = (dot(vec3(_292, _293, _294), vec3(_694 * _686, _694 * _687, _694 * _688)) + 1.0) * 0.5;
        float _3522 = isnan(0.0) ? _703 : (isnan(_703) ? 0.0 : max(_703, 0.0));
        float _713 = sqrt(((_687 * _687) + (_686 * _686)) + (_688 * _688)) / (_683 + 9.9999997473787516355514526367188e-06);
        float _3533 = isnan(0.0) ? _713 : (isnan(_713) ? 0.0 : max(_713, 0.0));
        float _714 = isnan(1.0) ? _3533 : (isnan(_3533) ? 1.0 : min(_3533, 1.0));
        float _715 = _714 * 2.0;
        float _719 = (1.0 - _714) / (_714 + 1.0);
        float _3544 = isnan(0.0) ? _719 : (isnan(_719) ? 0.0 : max(_719, 0.0));
        float _720 = isnan(1.0) ? _3544 : (isnan(_3544) ? 1.0 : min(_3544, 1.0));
        float _729 = ((((1.0 - _720) * (_715 + 2.0)) * exp2(log2(isnan(1.0) ? _3522 : (isnan(_3522) ? 1.0 : min(_3522, 1.0))) * (_715 + 1.0))) + _720) * _683;
        float _730 = _651 * 0.5;
        float _731 = _661 * 0.5;
        float _732 = _671 * 0.5;
        float _733 = dot(vec3(_730, _731, _732), vec3(_730, _731, _732));
        float _738 = (_733 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_733);
        float _746 = (dot(vec3(_292, _293, _294), vec3(_738 * _730, _738 * _731, _738 * _732)) + 1.0) * 0.5;
        float _3555 = isnan(0.0) ? _746 : (isnan(_746) ? 0.0 : max(_746, 0.0));
        float _755 = sqrt(((_731 * _731) + (_730 * _730)) + (_732 * _732)) / (_684 + 9.9999997473787516355514526367188e-06);
        float _3566 = isnan(0.0) ? _755 : (isnan(_755) ? 0.0 : max(_755, 0.0));
        float _756 = isnan(1.0) ? _3566 : (isnan(_3566) ? 1.0 : min(_3566, 1.0));
        float _757 = _756 * 2.0;
        float _761 = (1.0 - _756) / (_756 + 1.0);
        float _3577 = isnan(0.0) ? _761 : (isnan(_761) ? 0.0 : max(_761, 0.0));
        float _762 = isnan(1.0) ? _3577 : (isnan(_3577) ? 1.0 : min(_3577, 1.0));
        float _771 = ((((1.0 - _762) * (_757 + 2.0)) * exp2(log2(isnan(1.0) ? _3555 : (isnan(_3555) ? 1.0 : min(_3555, 1.0))) * (_757 + 1.0))) + _762) * _684;
        float _772 = _652 * 0.5;
        float _773 = _662 * 0.5;
        float _774 = _672 * 0.5;
        float _775 = dot(vec3(_772, _773, _774), vec3(_772, _773, _774));
        float _780 = (_775 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_775);
        float _788 = (dot(vec3(_292, _293, _294), vec3(_780 * _772, _780 * _773, _780 * _774)) + 1.0) * 0.5;
        float _3588 = isnan(0.0) ? _788 : (isnan(_788) ? 0.0 : max(_788, 0.0));
        float _797 = sqrt(((_773 * _773) + (_772 * _772)) + (_774 * _774)) / (_685 + 9.9999997473787516355514526367188e-06);
        float _3599 = isnan(0.0) ? _797 : (isnan(_797) ? 0.0 : max(_797, 0.0));
        float _798 = isnan(1.0) ? _3599 : (isnan(_3599) ? 1.0 : min(_3599, 1.0));
        float _799 = _798 * 2.0;
        float _803 = (1.0 - _798) / (_798 + 1.0);
        float _3610 = isnan(0.0) ? _803 : (isnan(_803) ? 0.0 : max(_803, 0.0));
        float _804 = isnan(1.0) ? _3610 : (isnan(_3610) ? 1.0 : min(_3610, 1.0));
        float _813 = ((((1.0 - _804) * (_799 + 2.0)) * exp2(log2(isnan(1.0) ? _3588 : (isnan(_3588) ? 1.0 : min(_3588, 1.0))) * (_799 + 1.0))) + _804) * _685;
        _821 = _652;
        _823 = _651;
        _824 = _650;
        _825 = _662;
        _826 = _661;
        _827 = _660;
        _828 = _672;
        _829 = _671;
        _830 = _670;
        _831 = _685;
        _832 = _684;
        _833 = _683;
        _834 = cbModelParam._m0[36u].z * (isnan(0.0) ? _729 : (isnan(_729) ? 0.0 : max(_729, 0.0)));
        _835 = cbModelParam._m0[36u].z * (isnan(0.0) ? _771 : (isnan(_771) ? 0.0 : max(_771, 0.0)));
        _836 = cbModelParam._m0[36u].z * (isnan(0.0) ? _813 : (isnan(_813) ? 0.0 : max(_813, 0.0)));
    }
    else
    {
        _821 = _822;
        _823 = _822;
        _824 = _822;
        _825 = _822;
        _826 = _822;
        _827 = _822;
        _828 = _822;
        _829 = _822;
        _830 = _822;
        _831 = _822;
        _832 = _822;
        _833 = _822;
        _834 = 0.0;
        _835 = 0.0;
        _836 = 0.0;
    }
    float _1131;
    float _1132;
    float _1133;
    float _1134;
    float _1135;
    float _1136;
    float _1137;
    float _1138;
    float _1139;
    float _1140;
    float _1141;
    float _1142;
    float _1143;
    float _1144;
    float _1145;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _862 = fma(_519, cbModelParam._m0[30u].z, fma(_515, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _511));
        float _866 = fma(_519, cbModelParam._m0[31u].z, fma(_515, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _511));
        float _870 = fma(_519, cbModelParam._m0[32u].z, fma(_515, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _511));
        float _893 = _511 + _292;
        float _894 = _515 + _293;
        float _895 = _519 + _294;
        float _905 = fma(_895, cbModelParam._m0[30u].z, fma(_894, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _893)) - _862;
        float _906 = fma(_895, cbModelParam._m0[31u].z, fma(_894, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _893)) - _866;
        float _907 = fma(_895, cbModelParam._m0[32u].z, fma(_894, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _893)) - _870;
        float _911 = inversesqrt(dot(vec3(_905, _906, _907), vec3(_905, _906, _907)));
        float _924 = ((_911 * _905) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_862 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _925 = ((_911 * _906) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_866 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _926 = ((_911 * _907) / cbModelParam._m0[35u].z) + ((((((_870 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _928 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_924, _925, _926), 0.0);
        vec4 _935 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_924, _925, _926), 0.0);
        vec4 _942 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_924, _925, _926), 0.0);
        vec4 _949 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_924, _925, _926), 0.0);
        float _961 = exp2((_928.w + (-0.5)) * 20.0) * 2.0;
        float _962 = _961 * (_928.x + (-0.5));
        float _963 = _961 * (_928.y + (-0.5));
        float _964 = _961 * (_928.z + (-0.5));
        float _971 = exp2((_935.w + (-0.5)) * 20.0) * 2.0;
        float _972 = _971 * (_935.x + (-0.5));
        float _973 = _971 * (_935.y + (-0.5));
        float _974 = _971 * (_935.z + (-0.5));
        float _981 = exp2((_942.w + (-0.5)) * 20.0) * 2.0;
        float _982 = _981 * (_942.x + (-0.5));
        float _983 = _981 * (_942.y + (-0.5));
        float _984 = _981 * (_942.z + (-0.5));
        float _991 = exp2((_949.w + (-0.5)) * 20.0) * 2.0;
        float _992 = _991 * (_949.x + (-0.5));
        float _993 = _991 * (_949.y + (-0.5));
        float _994 = _991 * (_949.z + (-0.5));
        float _995 = isnan(0.0) ? _992 : (isnan(_992) ? 0.0 : max(_992, 0.0));
        float _996 = isnan(0.0) ? _993 : (isnan(_993) ? 0.0 : max(_993, 0.0));
        float _997 = isnan(0.0) ? _994 : (isnan(_994) ? 0.0 : max(_994, 0.0));
        float _998 = _962 * 0.5;
        float _999 = _972 * 0.5;
        float _1000 = _982 * 0.5;
        float _1001 = dot(vec3(_998, _999, _1000), vec3(_998, _999, _1000));
        float _1006 = (_1001 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1001);
        float _1014 = (dot(vec3(_292, _293, _294), vec3(_1006 * _998, _1006 * _999, _1006 * _1000)) + 1.0) * 0.5;
        float _3651 = isnan(0.0) ? _1014 : (isnan(_1014) ? 0.0 : max(_1014, 0.0));
        float _1023 = sqrt(((_999 * _999) + (_998 * _998)) + (_1000 * _1000)) / (_995 + 9.9999997473787516355514526367188e-06);
        float _3662 = isnan(0.0) ? _1023 : (isnan(_1023) ? 0.0 : max(_1023, 0.0));
        float _1024 = isnan(1.0) ? _3662 : (isnan(_3662) ? 1.0 : min(_3662, 1.0));
        float _1025 = _1024 * 2.0;
        float _1029 = (1.0 - _1024) / (_1024 + 1.0);
        float _3673 = isnan(0.0) ? _1029 : (isnan(_1029) ? 0.0 : max(_1029, 0.0));
        float _1030 = isnan(1.0) ? _3673 : (isnan(_3673) ? 1.0 : min(_3673, 1.0));
        float _1039 = ((((1.0 - _1030) * (_1025 + 2.0)) * exp2(log2(isnan(1.0) ? _3651 : (isnan(_3651) ? 1.0 : min(_3651, 1.0))) * (_1025 + 1.0))) + _1030) * _995;
        float _1040 = _963 * 0.5;
        float _1041 = _973 * 0.5;
        float _1042 = _983 * 0.5;
        float _1043 = dot(vec3(_1040, _1041, _1042), vec3(_1040, _1041, _1042));
        float _1048 = (_1043 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1043);
        float _1056 = (dot(vec3(_292, _293, _294), vec3(_1048 * _1040, _1048 * _1041, _1048 * _1042)) + 1.0) * 0.5;
        float _3684 = isnan(0.0) ? _1056 : (isnan(_1056) ? 0.0 : max(_1056, 0.0));
        float _1065 = sqrt(((_1041 * _1041) + (_1040 * _1040)) + (_1042 * _1042)) / (_996 + 9.9999997473787516355514526367188e-06);
        float _3695 = isnan(0.0) ? _1065 : (isnan(_1065) ? 0.0 : max(_1065, 0.0));
        float _1066 = isnan(1.0) ? _3695 : (isnan(_3695) ? 1.0 : min(_3695, 1.0));
        float _1067 = _1066 * 2.0;
        float _1071 = (1.0 - _1066) / (_1066 + 1.0);
        float _3706 = isnan(0.0) ? _1071 : (isnan(_1071) ? 0.0 : max(_1071, 0.0));
        float _1072 = isnan(1.0) ? _3706 : (isnan(_3706) ? 1.0 : min(_3706, 1.0));
        float _1081 = ((((1.0 - _1072) * (_1067 + 2.0)) * exp2(log2(isnan(1.0) ? _3684 : (isnan(_3684) ? 1.0 : min(_3684, 1.0))) * (_1067 + 1.0))) + _1072) * _996;
        float _1082 = _964 * 0.5;
        float _1083 = _974 * 0.5;
        float _1084 = _984 * 0.5;
        float _1085 = dot(vec3(_1082, _1083, _1084), vec3(_1082, _1083, _1084));
        float _1090 = (_1085 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1085);
        float _1098 = (dot(vec3(_292, _293, _294), vec3(_1090 * _1082, _1090 * _1083, _1090 * _1084)) + 1.0) * 0.5;
        float _3717 = isnan(0.0) ? _1098 : (isnan(_1098) ? 0.0 : max(_1098, 0.0));
        float _1107 = sqrt(((_1083 * _1083) + (_1082 * _1082)) + (_1084 * _1084)) / (_997 + 9.9999997473787516355514526367188e-06);
        float _3728 = isnan(0.0) ? _1107 : (isnan(_1107) ? 0.0 : max(_1107, 0.0));
        float _1108 = isnan(1.0) ? _3728 : (isnan(_3728) ? 1.0 : min(_3728, 1.0));
        float _1109 = _1108 * 2.0;
        float _1113 = (1.0 - _1108) / (_1108 + 1.0);
        float _3739 = isnan(0.0) ? _1113 : (isnan(_1113) ? 0.0 : max(_1113, 0.0));
        float _1114 = isnan(1.0) ? _3739 : (isnan(_3739) ? 1.0 : min(_3739, 1.0));
        float _1123 = ((((1.0 - _1114) * (_1109 + 2.0)) * exp2(log2(isnan(1.0) ? _3717 : (isnan(_3717) ? 1.0 : min(_3717, 1.0))) * (_1109 + 1.0))) + _1114) * _997;
        _1131 = _964;
        _1132 = _963;
        _1133 = _962;
        _1134 = _974;
        _1135 = _973;
        _1136 = _972;
        _1137 = _984;
        _1138 = _983;
        _1139 = _982;
        _1140 = _997;
        _1141 = _996;
        _1142 = _995;
        _1143 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1039 : (isnan(_1039) ? 0.0 : max(_1039, 0.0)));
        _1144 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1081 : (isnan(_1081) ? 0.0 : max(_1081, 0.0)));
        _1145 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1123 : (isnan(_1123) ? 0.0 : max(_1123, 0.0)));
    }
    else
    {
        _1131 = _822;
        _1132 = _822;
        _1133 = _822;
        _1134 = _822;
        _1135 = _822;
        _1136 = _822;
        _1137 = _822;
        _1138 = _822;
        _1139 = _822;
        _1140 = _822;
        _1141 = _822;
        _1142 = _822;
        _1143 = 0.0;
        _1144 = 0.0;
        _1145 = 0.0;
    }
    float _1155 = (cbModelParam._m0[1u].x * (_1143 - _834)) + _834;
    float _1156 = (cbModelParam._m0[1u].x * (_1144 - _835)) + _835;
    float _1157 = (cbModelParam._m0[1u].x * (_1145 - _836)) + _836;
    float _1178 = fma(_1157, cbSceneParam._m0[89u].z, fma(_1156, cbSceneParam._m0[89u].y, _1155 * cbSceneParam._m0[89u].x));
    float _1181 = fma(_1157, cbSceneParam._m0[90u].z, fma(_1156, cbSceneParam._m0[90u].y, _1155 * cbSceneParam._m0[90u].x));
    float _1184 = fma(_1157, cbSceneParam._m0[91u].z, fma(_1156, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1155));
    float _1199 = _458 * 0.5;
    float _1200 = _459 * 0.5;
    float _1201 = _460 * 0.5;
    float _1202 = dot(vec4(_1199, _1200, _1201, 1.0), vec4(_1133, _1136, _1139, _1142));
    float _1205 = dot(vec4(_1199, _1200, _1201, 1.0), vec4(_1132, _1135, _1138, _1141));
    float _1208 = dot(vec4(_1199, _1200, _1201, 1.0), vec4(_1131, _1134, _1137, _1140));
    float _1242;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1215 = dot(vec4(_1199, _1200, _1201, 1.0), vec4(_821, _825, _828, _831));
        float _1219 = dot(vec4(_1199, _1200, _1201, 1.0), vec4(_823, _826, _829, _832));
        float _1223 = dot(vec4(_1199, _1200, _1201, 1.0), vec4(_824, _827, _830, _833));
        float _1230 = dot(vec4(cbModelParam._m0[39u]), vec4(_1199, _1200, _1201, 1.0));
        _1242 = dot(vec3(isnan(0.0) ? _1223 : (isnan(_1223) ? 0.0 : max(_1223, 0.0)), isnan(0.0) ? _1219 : (isnan(_1219) ? 0.0 : max(_1219, 0.0)), isnan(0.0) ? _1215 : (isnan(_1215) ? 0.0 : max(_1215, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1230) ? 0.0 : (isnan(0.0) ? _1230 : max(0.0, _1230))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1242 = 1.0;
    }
    float _1253;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1244 = dot(vec4(cbModelParam._m0[40u]), vec4(_1199, _1200, _1201, 1.0));
        _1253 = dot(vec3(isnan(0.0) ? _1202 : (isnan(_1202) ? 0.0 : max(_1202, 0.0)), isnan(0.0) ? _1205 : (isnan(_1205) ? 0.0 : max(_1205, 0.0)), isnan(0.0) ? _1208 : (isnan(_1208) ? 0.0 : max(_1208, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1244) ? 0.0 : (isnan(0.0) ? _1244 : max(0.0, _1244))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1253 = 1.0;
    }
    float _1257 = (_1253 * cbModelParam._m0[1u].x) + (_1242 * (1.0 - cbModelParam._m0[1u].x));
    float _1267 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _296);
    float _1268 = isnan(_1267) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1267 : min(cbModelParam._m0[25u].z, _1267));
    float _1350;
    float _1352;
    float _1354;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1317 = fma(_519, cbModelParam._m0[13u].z, fma(_515, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _511)) + cbModelParam._m0[13u].w;
        float _1321 = fma(_519, cbModelParam._m0[14u].z, fma(_515, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _511)) + cbModelParam._m0[14u].w;
        float _1325 = fma(_519, cbModelParam._m0[15u].z, fma(_515, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _511)) + cbModelParam._m0[15u].w;
        float _1328 = fma(_460, cbModelParam._m0[13u].z, fma(_459, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _458));
        float _1331 = fma(_460, cbModelParam._m0[14u].z, fma(_459, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _458));
        float _1334 = fma(_460, cbModelParam._m0[15u].z, fma(_459, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _458));
        float _1362;
        if (_1328 > 0.0)
        {
            _1362 = abs((1.0 - _1317) / _1328);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1328 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1317 + 1.0) / _1328);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1362 = frontier_phi_14_12_ladder;
        }
        float _1563;
        if (_1331 > 0.0)
        {
            _1563 = abs((1.0 - _1321) / _1331);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1331 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1321 + 1.0) / _1331);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1563 = frontier_phi_23_19_ladder;
        }
        float _1636;
        if (_1334 > 0.0)
        {
            _1636 = abs((1.0 - _1325) / _1334);
        }
        else
        {
            float frontier_phi_34_30_ladder;
            if (_1334 < 0.0)
            {
                frontier_phi_34_30_ladder = abs((_1325 + 1.0) / _1334);
            }
            else
            {
                frontier_phi_34_30_ladder = 5000.0;
            }
            _1636 = frontier_phi_34_30_ladder;
        }
        float _1638 = isnan(_1563) ? _1362 : (isnan(_1362) ? _1563 : min(_1362, _1563));
        float _1639 = isnan(_1636) ? _1638 : (isnan(_1638) ? _1636 : min(_1638, _1636));
        float _1643 = (_1639 * _1328) + _1317;
        float _1644 = (_1639 * _1331) + _1321;
        float _1645 = (_1639 * _1334) + _1325;
        float _1646 = _1639 * 9.9999997473787516355514526367188e-05;
        float _1648 = (-1.0) - _1646;
        float _1650 = _1646 + 1.0;
        float frontier_phi_13_34_ladder;
        float frontier_phi_13_34_ladder_1;
        float frontier_phi_13_34_ladder_2;
        if ((_1645 > _1650) || ((_1645 < _1648) || ((_1644 > _1650) || ((_1644 < _1648) || ((_1643 < _1648) || (_1643 > _1650))))))
        {
            frontier_phi_13_34_ladder = 0.0;
            frontier_phi_13_34_ladder_1 = 0.0;
            frontier_phi_13_34_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1721 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1645, cbModelParam._m0[9u].z, fma(_1644, cbModelParam._m0[9u].y, _1643 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1645, cbModelParam._m0[10u].z, fma(_1644, cbModelParam._m0[10u].y, _1643 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1645, cbModelParam._m0[11u].z, fma(_1644, cbModelParam._m0[11u].y, _1643 * cbModelParam._m0[11u].x))), _1268);
            frontier_phi_13_34_ladder = _1721.z * cbModelParam._m0[1u].y;
            frontier_phi_13_34_ladder_1 = _1721.y * cbModelParam._m0[1u].y;
            frontier_phi_13_34_ladder_2 = _1721.x * cbModelParam._m0[1u].y;
        }
        _1350 = frontier_phi_13_34_ladder_2;
        _1352 = frontier_phi_13_34_ladder_1;
        _1354 = frontier_phi_13_34_ladder;
    }
    else
    {
        vec4 _1338 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_458, _459, _460), _1268);
        _1350 = _1338.x * cbModelParam._m0[1u].y;
        _1352 = _1338.y * cbModelParam._m0[1u].y;
        _1354 = _1338.z * cbModelParam._m0[1u].y;
    }
    float _1358 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _296);
    float _1359 = isnan(_1358) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1358 : min(cbModelParam._m0[25u].w, _1358));
    float _1452;
    float _1454;
    float _1456;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1416 = fma(_519, cbModelParam._m0[21u].z, fma(_515, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _511)) + cbModelParam._m0[21u].w;
        float _1420 = fma(_519, cbModelParam._m0[22u].z, fma(_515, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _511)) + cbModelParam._m0[22u].w;
        float _1424 = fma(_519, cbModelParam._m0[23u].z, fma(_515, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _511)) + cbModelParam._m0[23u].w;
        float _1427 = fma(_460, cbModelParam._m0[21u].z, fma(_459, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _458));
        float _1430 = fma(_460, cbModelParam._m0[22u].z, fma(_459, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _458));
        float _1433 = fma(_460, cbModelParam._m0[23u].z, fma(_459, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _458));
        float _1568;
        if (_1427 > 0.0)
        {
            _1568 = abs((1.0 - _1416) / _1427);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1427 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1416 + 1.0) / _1427);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1568 = frontier_phi_25_21_ladder;
        }
        float _1663;
        if (_1430 > 0.0)
        {
            _1663 = abs((1.0 - _1420) / _1430);
        }
        else
        {
            float frontier_phi_36_32_ladder;
            if (_1430 < 0.0)
            {
                frontier_phi_36_32_ladder = abs((_1420 + 1.0) / _1430);
            }
            else
            {
                frontier_phi_36_32_ladder = 5000.0;
            }
            _1663 = frontier_phi_36_32_ladder;
        }
        float _1934;
        if (_1433 > 0.0)
        {
            _1934 = abs((1.0 - _1424) / _1433);
        }
        else
        {
            float frontier_phi_45_42_ladder;
            if (_1433 < 0.0)
            {
                frontier_phi_45_42_ladder = abs((_1424 + 1.0) / _1433);
            }
            else
            {
                frontier_phi_45_42_ladder = 5000.0;
            }
            _1934 = frontier_phi_45_42_ladder;
        }
        float _1936 = isnan(_1663) ? _1568 : (isnan(_1568) ? _1663 : min(_1568, _1663));
        float _1937 = isnan(_1934) ? _1936 : (isnan(_1936) ? _1934 : min(_1936, _1934));
        float _1941 = (_1937 * _1427) + _1416;
        float _1942 = (_1937 * _1430) + _1420;
        float _1943 = (_1937 * _1433) + _1424;
        float _1944 = _1937 * 9.9999997473787516355514526367188e-05;
        float _1945 = (-1.0) - _1944;
        float _1947 = _1944 + 1.0;
        float frontier_phi_22_45_ladder;
        float frontier_phi_22_45_ladder_1;
        float frontier_phi_22_45_ladder_2;
        if ((_1943 > _1947) || ((_1943 < _1945) || ((_1942 > _1947) || ((_1942 < _1945) || ((_1941 < _1945) || (_1941 > _1947))))))
        {
            frontier_phi_22_45_ladder = 0.0;
            frontier_phi_22_45_ladder_1 = 0.0;
            frontier_phi_22_45_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2061 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_1943, cbModelParam._m0[17u].z, fma(_1942, cbModelParam._m0[17u].y, _1941 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_1943, cbModelParam._m0[18u].z, fma(_1942, cbModelParam._m0[18u].y, _1941 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_1943, cbModelParam._m0[19u].z, fma(_1942, cbModelParam._m0[19u].y, _1941 * cbModelParam._m0[19u].x))), _1359);
            frontier_phi_22_45_ladder = _2061.z * cbModelParam._m0[1u].z;
            frontier_phi_22_45_ladder_1 = _2061.y * cbModelParam._m0[1u].z;
            frontier_phi_22_45_ladder_2 = _2061.x * cbModelParam._m0[1u].z;
        }
        _1452 = frontier_phi_22_45_ladder_2;
        _1454 = frontier_phi_22_45_ladder_1;
        _1456 = frontier_phi_22_45_ladder;
    }
    else
    {
        vec4 _1436 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_458, _459, _460), _1359);
        _1452 = _1436.x * cbModelParam._m0[1u].z;
        _1454 = _1436.y * cbModelParam._m0[1u].z;
        _1456 = _1436.z * cbModelParam._m0[1u].z;
    }
    float _1468 = ((((1.0 - _479) * ((_466 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_479 * _466)) * _450;
    float _1469 = _1468 * ((cbModelParam._m0[1u].w * (_1452 - _1350)) + _1350);
    float _1470 = _1468 * ((cbModelParam._m0[1u].w * (_1454 - _1352)) + _1352);
    float _1471 = _1468 * ((cbModelParam._m0[1u].w * (_1456 - _1354)) + _1354);
    float _1474 = fma(_1471, cbSceneParam._m0[89u].z, fma(_1470, cbSceneParam._m0[89u].y, _1469 * cbSceneParam._m0[89u].x));
    float _1477 = fma(_1471, cbSceneParam._m0[90u].z, fma(_1470, cbSceneParam._m0[90u].y, _1469 * cbSceneParam._m0[90u].x));
    float _1480 = fma(_1471, cbSceneParam._m0[91u].z, fma(_1470, cbSceneParam._m0[91u].y, _1469 * cbSceneParam._m0[91u].x));
    vec4 _1488 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_383, _384));
    float _1490 = _1488.w;
    float _1502 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1490);
    float _1503 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1490);
    float _1504 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1490);
    uvec4 _1508 = floatBitsToUint(cbInstanceData._m0[_424 + 5u]);
    uint _1510 = _1508.x * 14u;
    uint _1511 = _1510 + 13u;
    float _1518 = _450 + (-1.0);
    float _1523 = (cbLight._m0[_1511].x * _1518) + 1.0;
    float _1524 = (cbLight._m0[_1511].y * _1518) + 1.0;
    float _1525 = (cbLight._m0[_1511].z * _1518) + 1.0;
    float _1526 = (cbLight._m0[_1511].w * _1518) + 1.0;
    uint _1528 = _1510 + 4u;
    float _1540 = dot(vec3(cbLight._m0[_1510].xyz), vec3(_292, _293, _294));
    float _1543 = isnan(1.0) ? _1523 : (isnan(_1523) ? 1.0 : min(_1523, 1.0));
    float _1544 = cbLight._m0[_1528].x * _1502;
    float _1545 = cbLight._m0[_1528].y * _1503;
    float _1546 = cbLight._m0[_1528].z * _1504;
    uint _1547 = _1510 + 5u;
    float _1559 = dot(vec3(cbLight._m0[_1510 | 1u].xyz), vec3(_292, _293, _294));
    float _1562 = isnan(1.0) ? _1524 : (isnan(_1524) ? 1.0 : min(_1524, 1.0));
    float _1627;
    float _1628;
    float _1629;
    if (_297 == 0.0)
    {
        float _3875 = isnan(0.0) ? _1540 : (isnan(_1540) ? 0.0 : max(_1540, 0.0));
        float _3886 = isnan(0.0) ? _1559 : (isnan(_1559) ? 0.0 : max(_1559, 0.0));
        float _1581 = (isnan(1.0) ? _3875 : (isnan(_3875) ? 1.0 : min(_3875, 1.0))) * 0.3183098733425140380859375;
        float _1583 = (isnan(1.0) ? _3886 : (isnan(_3886) ? 1.0 : min(_3886, 1.0))) * 0.3183098733425140380859375;
        _1627 = ((cbLight._m0[_1547].x * _1562) * _1583) + ((_1544 * _1543) * _1581);
        _1628 = ((_1562 * cbLight._m0[_1547].y) * _1583) + ((_1545 * _1543) * _1581);
        _1629 = ((_1562 * cbLight._m0[_1547].z) * _1583) + ((_1546 * _1543) * _1581);
    }
    else
    {
        float _1593 = _1540 + _297;
        float _1596 = (_297 * 2.0) + 1.0;
        float _1597 = (isnan(0.0) ? _1593 : (isnan(_1593) ? 0.0 : max(_1593, 0.0))) / _1596;
        float _1604 = _1559 + _297;
        float _1606 = (isnan(0.0) ? _1604 : (isnan(_1604) ? 0.0 : max(_1604, 0.0))) / _1596;
        _1627 = (((_1606 * cbLight._m0[_1547].x) * _1562) + ((_1544 * _1597) * _1543)) * 0.3183098733425140380859375;
        _1628 = (((_1606 * cbLight._m0[_1547].y) * _1562) + ((_1545 * _1597) * _1543)) * 0.3183098733425140380859375;
        _1629 = (((_1606 * cbLight._m0[_1547].z) * _1562) + ((_1546 * _1597) * _1543)) * 0.3183098733425140380859375;
    }
    uvec4 _1633 = floatBitsToUint(cbLight._m0[_1510 + 12u]);
    bool _1635 = _1633.x == 0u;
    float _1668;
    float _1670;
    float _1672;
    if (_1635)
    {
        _1668 = _1627;
        _1670 = _1628;
        _1672 = _1629;
    }
    else
    {
        uint _1676 = _1510 + 6u;
        float _1692 = (dot(vec3(cbLight._m0[_1510 + 2u].xyz), vec3(_292, _293, _294)) * 0.5) + 0.5;
        float _1693 = _1692 * _1692;
        float _3907 = isnan(0.0) ? _1693 : (isnan(_1693) ? 0.0 : max(_1693, 0.0));
        float _1694 = isnan(1.0) ? _3907 : (isnan(_3907) ? 1.0 : min(_3907, 1.0));
        float _1695 = isnan(1.0) ? _1525 : (isnan(_1525) ? 1.0 : min(_1525, 1.0));
        _1668 = (((cbLight._m0[_1676].x * 0.3183098733425140380859375) * _1694) * _1695) + _1627;
        _1670 = (((cbLight._m0[_1676].y * 0.3183098733425140380859375) * _1694) * _1695) + _1628;
        _1672 = (((cbLight._m0[_1676].z * 0.3183098733425140380859375) * _1694) * _1695) + _1629;
    }
    bool _1675 = _1633.y == 0u;
    float _1730;
    float _1732;
    float _1734;
    if (_1675)
    {
        _1730 = _1668;
        _1732 = _1670;
        _1734 = _1672;
    }
    else
    {
        uint _1905 = _1510 + 7u;
        float _1921 = (dot(vec3(cbLight._m0[_1510 + 3u].xyz), vec3(_292, _293, _294)) * 0.5) + 0.5;
        float _1922 = _1921 * _1921;
        float _3923 = isnan(0.0) ? _1922 : (isnan(_1922) ? 0.0 : max(_1922, 0.0));
        float _1923 = isnan(1.0) ? _3923 : (isnan(_3923) ? 1.0 : min(_3923, 1.0));
        float _1924 = isnan(1.0) ? _1526 : (isnan(_1526) ? 1.0 : min(_1526, 1.0));
        _1730 = (((cbLight._m0[_1905].x * 0.3183098733425140380859375) * _1923) * _1924) + _1668;
        _1732 = (((cbLight._m0[_1905].y * 0.3183098733425140380859375) * _1923) * _1924) + _1670;
        _1734 = (((cbLight._m0[_1905].z * 0.3183098733425140380859375) * _1923) * _1924) + _1672;
    }
    uint _1739 = _1510 + 8u;
    float _1755 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1510].w)) * _296) * 0.949999988079071044921875);
    float _1756 = _1755 * _1755;
    float _1757 = cbLight._m0[_1510].x + _375;
    float _1758 = cbLight._m0[_1510].y + _376;
    float _1759 = cbLight._m0[_1510].z + _377;
    float _1763 = inversesqrt(dot(vec3(_1757, _1758, _1759), vec3(_1757, _1758, _1759)));
    float _1764 = _1763 * _1757;
    float _1765 = _1763 * _1758;
    float _1766 = _1763 * _1759;
    float _1767 = dot(vec3(_292, _293, _294), vec3(cbLight._m0[_1510].xyz));
    float _3939 = isnan(0.0) ? _1767 : (isnan(_1767) ? 0.0 : max(_1767, 0.0));
    float _1770 = isnan(1.0) ? _3939 : (isnan(_3939) ? 1.0 : min(_3939, 1.0));
    float _3950 = isnan(0.0) ? _451 : (isnan(_451) ? 0.0 : max(_451, 0.0));
    float _1771 = isnan(1.0) ? _3950 : (isnan(_3950) ? 1.0 : min(_3950, 1.0));
    float _1772 = dot(vec3(_292, _293, _294), vec3(_1764, _1765, _1766));
    float _3961 = isnan(0.0) ? _1772 : (isnan(_1772) ? 0.0 : max(_1772, 0.0));
    float _1775 = isnan(1.0) ? _3961 : (isnan(_3961) ? 1.0 : min(_3961, 1.0));
    float _1776 = dot(vec3(cbLight._m0[_1510].xyz), vec3(_1764, _1765, _1766));
    float _3972 = isnan(0.0) ? _1776 : (isnan(_1776) ? 0.0 : max(_1776, 0.0));
    float _1780 = _1756 * _1756;
    float _1784 = ((_1775 * _1775) * (_1780 + (-1.0))) + 1.0;
    float _1795 = (exp2(log2(1.0 - (isnan(1.0) ? _3972 : (isnan(_3972) ? 1.0 : min(_3972, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1796 = 1.0 - _1756;
    float _1807 = (0.5 / (((_1771 * ((_1770 * _1796) + _1756)) + 9.9999999392252902907785028219223e-09) + (((_1771 * _1796) + _1756) * _1770))) * _1770;
    float _3983 = isnan(0.0) ? _1807 : (isnan(_1807) ? 0.0 : max(_1807, 0.0));
    float _1809 = (isnan(1.0) ? _3983 : (isnan(_3983) ? 1.0 : min(_3983, 1.0))) * (_1780 / ((_1784 * _1784) * 3.141590118408203125));
    float _1810 = isnan(1.0) ? _1523 : (isnan(_1523) ? 1.0 : min(_1523, 1.0));
    uint _1823 = _1510 | 1u;
    uint _1827 = _1510 + 9u;
    float _1841 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1823].w)) * _296) * 0.949999988079071044921875);
    float _1842 = _1841 * _1841;
    float _1843 = cbLight._m0[_1823].x + _375;
    float _1844 = cbLight._m0[_1823].y + _376;
    float _1845 = cbLight._m0[_1823].z + _377;
    float _1849 = inversesqrt(dot(vec3(_1843, _1844, _1845), vec3(_1843, _1844, _1845)));
    float _1850 = _1849 * _1843;
    float _1851 = _1849 * _1844;
    float _1852 = _1849 * _1845;
    float _1853 = dot(vec3(_292, _293, _294), vec3(cbLight._m0[_1823].xyz));
    float _3999 = isnan(0.0) ? _1853 : (isnan(_1853) ? 0.0 : max(_1853, 0.0));
    float _1856 = isnan(1.0) ? _3999 : (isnan(_3999) ? 1.0 : min(_3999, 1.0));
    float _1857 = dot(vec3(_292, _293, _294), vec3(_1850, _1851, _1852));
    float _4010 = isnan(0.0) ? _1857 : (isnan(_1857) ? 0.0 : max(_1857, 0.0));
    float _1860 = isnan(1.0) ? _4010 : (isnan(_4010) ? 1.0 : min(_4010, 1.0));
    float _1861 = dot(vec3(cbLight._m0[_1823].xyz), vec3(_1850, _1851, _1852));
    float _4021 = isnan(0.0) ? _1861 : (isnan(_1861) ? 0.0 : max(_1861, 0.0));
    float _1865 = _1842 * _1842;
    float _1869 = ((_1860 * _1860) * (_1865 + (-1.0))) + 1.0;
    float _1878 = (exp2(log2(1.0 - (isnan(1.0) ? _4021 : (isnan(_4021) ? 1.0 : min(_4021, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1879 = 1.0 - _1842;
    float _1889 = (0.5 / (((_1771 * ((_1856 * _1879) + _1842)) + 9.9999999392252902907785028219223e-09) + (((_1771 * _1879) + _1842) * _1856))) * _1856;
    float _4032 = isnan(0.0) ? _1889 : (isnan(_1889) ? 0.0 : max(_1889, 0.0));
    float _1891 = (isnan(1.0) ? _4032 : (isnan(_4032) ? 1.0 : min(_4032, 1.0))) * (_1865 / ((_1869 * _1869) * 3.141590118408203125));
    float _1892 = isnan(1.0) ? _1524 : (isnan(_1524) ? 1.0 : min(_1524, 1.0));
    float _1902 = (((_1878 * cbLight._m0[_1827].x) * _1891) * _1892) + ((((cbLight._m0[_1739].x * _1502) * _1795) * _1809) * _1810);
    float _1903 = (((_1878 * cbLight._m0[_1827].y) * _1891) * _1892) + ((((cbLight._m0[_1739].y * _1503) * _1795) * _1809) * _1810);
    float _1904 = (((_1878 * cbLight._m0[_1827].z) * _1891) * _1892) + ((((cbLight._m0[_1739].z * _1504) * _1795) * _1809) * _1810);
    float _1960;
    float _1962;
    float _1964;
    if (_1635)
    {
        _1960 = _1902;
        _1962 = _1903;
        _1964 = _1904;
    }
    else
    {
        uint _1966 = _1510 + 2u;
        uint _1970 = _1510 + 10u;
        float _1984 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1966].w)) * _296) * 0.949999988079071044921875);
        float _1985 = _1984 * _1984;
        float _1986 = cbLight._m0[_1966].x + _375;
        float _1987 = cbLight._m0[_1966].y + _376;
        float _1988 = cbLight._m0[_1966].z + _377;
        float _1992 = inversesqrt(dot(vec3(_1986, _1987, _1988), vec3(_1986, _1987, _1988)));
        float _1993 = _1992 * _1986;
        float _1994 = _1992 * _1987;
        float _1995 = _1992 * _1988;
        float _1996 = dot(vec3(_292, _293, _294), vec3(cbLight._m0[_1966].xyz));
        float _4048 = isnan(0.0) ? _1996 : (isnan(_1996) ? 0.0 : max(_1996, 0.0));
        float _1999 = isnan(1.0) ? _4048 : (isnan(_4048) ? 1.0 : min(_4048, 1.0));
        float _2000 = dot(vec3(_292, _293, _294), vec3(_1993, _1994, _1995));
        float _4059 = isnan(0.0) ? _2000 : (isnan(_2000) ? 0.0 : max(_2000, 0.0));
        float _2003 = isnan(1.0) ? _4059 : (isnan(_4059) ? 1.0 : min(_4059, 1.0));
        float _2004 = dot(vec3(cbLight._m0[_1966].xyz), vec3(_1993, _1994, _1995));
        float _4070 = isnan(0.0) ? _2004 : (isnan(_2004) ? 0.0 : max(_2004, 0.0));
        float _2008 = _1985 * _1985;
        float _2012 = ((_2003 * _2003) * (_2008 + (-1.0))) + 1.0;
        float _2021 = (exp2(log2(1.0 - (isnan(1.0) ? _4070 : (isnan(_4070) ? 1.0 : min(_4070, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2022 = 1.0 - _1985;
        float _2032 = (0.5 / (((_1771 * ((_1999 * _2022) + _1985)) + 9.9999999392252902907785028219223e-09) + (((_1771 * _2022) + _1985) * _1999))) * _1999;
        float _4081 = isnan(0.0) ? _2032 : (isnan(_2032) ? 0.0 : max(_2032, 0.0));
        float _2034 = (isnan(1.0) ? _4081 : (isnan(_4081) ? 1.0 : min(_4081, 1.0))) * (_2008 / ((_2012 * _2012) * 3.141590118408203125));
        float _2035 = isnan(1.0) ? _1525 : (isnan(_1525) ? 1.0 : min(_1525, 1.0));
        _1960 = (((_2021 * cbLight._m0[_1970].x) * _2034) * _2035) + _1902;
        _1962 = (((_2021 * cbLight._m0[_1970].y) * _2034) * _2035) + _1903;
        _1964 = (((_2021 * cbLight._m0[_1970].z) * _2034) * _2035) + _1904;
    }
    float _2066;
    float _2068;
    float _2070;
    if (_1675)
    {
        _2066 = _1960;
        _2068 = _1962;
        _2070 = _1964;
    }
    else
    {
        uint _2077 = _1510 + 3u;
        uint _2081 = _1510 + 11u;
        float _2095 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2077].w)) * _296) * 0.949999988079071044921875);
        float _2096 = _2095 * _2095;
        float _2097 = cbLight._m0[_2077].x + _375;
        float _2098 = cbLight._m0[_2077].y + _376;
        float _2099 = cbLight._m0[_2077].z + _377;
        float _2103 = inversesqrt(dot(vec3(_2097, _2098, _2099), vec3(_2097, _2098, _2099)));
        float _2104 = _2103 * _2097;
        float _2105 = _2103 * _2098;
        float _2106 = _2103 * _2099;
        float _2107 = dot(vec3(_292, _293, _294), vec3(cbLight._m0[_2077].xyz));
        float _4097 = isnan(0.0) ? _2107 : (isnan(_2107) ? 0.0 : max(_2107, 0.0));
        float _2110 = isnan(1.0) ? _4097 : (isnan(_4097) ? 1.0 : min(_4097, 1.0));
        float _2111 = dot(vec3(_292, _293, _294), vec3(_2104, _2105, _2106));
        float _4108 = isnan(0.0) ? _2111 : (isnan(_2111) ? 0.0 : max(_2111, 0.0));
        float _2114 = isnan(1.0) ? _4108 : (isnan(_4108) ? 1.0 : min(_4108, 1.0));
        float _2115 = dot(vec3(cbLight._m0[_2077].xyz), vec3(_2104, _2105, _2106));
        float _4119 = isnan(0.0) ? _2115 : (isnan(_2115) ? 0.0 : max(_2115, 0.0));
        float _2119 = _2096 * _2096;
        float _2123 = ((_2114 * _2114) * (_2119 + (-1.0))) + 1.0;
        float _2132 = (exp2(log2(1.0 - (isnan(1.0) ? _4119 : (isnan(_4119) ? 1.0 : min(_4119, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2133 = 1.0 - _2096;
        float _2143 = (0.5 / (((_1771 * ((_2110 * _2133) + _2096)) + 9.9999999392252902907785028219223e-09) + (((_1771 * _2133) + _2096) * _2110))) * _2110;
        float _4130 = isnan(0.0) ? _2143 : (isnan(_2143) ? 0.0 : max(_2143, 0.0));
        float _2145 = (isnan(1.0) ? _4130 : (isnan(_4130) ? 1.0 : min(_4130, 1.0))) * (_2119 / ((_2123 * _2123) * 3.141590118408203125));
        float _2146 = isnan(1.0) ? _1526 : (isnan(_1526) ? 1.0 : min(_1526, 1.0));
        _2066 = (((_2132 * cbLight._m0[_2081].x) * _2145) * _2146) + _1960;
        _2068 = (((_2132 * cbLight._m0[_2081].y) * _2145) * _2146) + _1962;
        _2070 = (((_2132 * cbLight._m0[_2081].z) * _2145) * _2146) + _1964;
    }
    float _2255;
    float _2257;
    float _2259;
    float _2261;
    float _2263;
    float _2265;
    if (_1508.y == 0u)
    {
        float _2195 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2196 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2195;
        float _2197 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2195;
        float _2198 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2195;
        uvec4 _2210 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2211 = _2210.x;
        uint _2222 = uint((float(_2210.y) * floor(float(uint(cbSceneParam._m0[85u].y * _384) / _2211))) + floor(float(uint(cbSceneParam._m0[85u].x * _383) / _2211)));
        float _2232 = (log2(_2198 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2233 = isnan(0.0) ? _2232 : (isnan(_2232) ? 0.0 : max(_2232, 0.0));
        uint _2236 = uint(isnan(14.0) ? _2233 : (isnan(_2233) ? 14.0 : min(_2233, 14.0)));
        uvec4 _2241 = texelFetch(g_lightClusterGridBuffer, int(((_2236 << 2u) + (_2222 << 6u)) >> 2u));
        uint _2242 = _2241.x;
        uint _2243 = _2210.z;
        float _2268;
        float _2270;
        float _2272;
        float _2274;
        float _2276;
        float _2278;
        if (((((1u << ((_2243 >> 4u) & 15u)) + 4294967295u) & _2242) == 0u) || ((_2243 & 240u) == 0u))
        {
            _2268 = 0.0;
            _2270 = 0.0;
            _2272 = 0.0;
            _2274 = 0.0;
            _2276 = 0.0;
            _2278 = 0.0;
        }
        else
        {
            float _2269;
            float _2271;
            float _2273;
            float _2275;
            float _2277;
            float _2279;
            float _2452 = 0.0;
            float _2453 = 0.0;
            float _2454 = 0.0;
            float _2455 = 0.0;
            float _2456 = 0.0;
            float _2457 = 0.0;
            uint _2458 = 0u;
            uint _2467;
            bool _2468;
            for (;;)
            {
                _2467 = texelFetch(g_lightClassification, int((((_2236 << 5u) + (_2222 << 9u)) + (_2458 << 2u)) >> 2u)).x;
                _2468 = _2467 == 0u;
                float frontier_phi_64_pred;
                float frontier_phi_64_pred_1;
                float frontier_phi_64_pred_2;
                float frontier_phi_64_pred_3;
                float frontier_phi_64_pred_4;
                float frontier_phi_64_pred_5;
                if (_2468)
                {
                    frontier_phi_64_pred = _2455;
                    frontier_phi_64_pred_1 = _2457;
                    frontier_phi_64_pred_2 = _2456;
                    frontier_phi_64_pred_3 = _2454;
                    frontier_phi_64_pred_4 = _2453;
                    frontier_phi_64_pred_5 = _2452;
                }
                else
                {
                    float _2629;
                    float _2630;
                    float _2631;
                    float _2632;
                    float _2633;
                    float _2634;
                    uint _2635;
                    _2629 = _2452;
                    _2630 = _2453;
                    _2631 = _2454;
                    _2632 = _2455;
                    _2633 = _2456;
                    _2634 = _2457;
                    _2635 = _2467;
                    float _2560;
                    float _2561;
                    float _2562;
                    float _2563;
                    float _2564;
                    float _2565;
                    for (;;)
                    {
                        uint _2639 = uint(findLSB(_2635)) + (_2458 << 5u);
                        uint _2636 = (_2635 + 4294967295u) & _2635;
                        uint _2641 = _2639 * 48u;
                        vec4 _2655 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2641)).x, texelFetch(g_PointLightRenderingBuffer, int(_2641 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2641 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2641 + 3u)).x));
                        uint _2661 = (_2639 * 48u) + 4u;
                        vec4 _2674 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2661)).x, texelFetch(g_PointLightRenderingBuffer, int(_2661 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2661 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2661 + 3u)).x));
                        float _2675 = _2674.x;
                        float _2676 = _2674.y;
                        float _2677 = _2674.z;
                        uint _2680 = (_2639 * 48u) + 8u;
                        vec3 _2691 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2680)).x, texelFetch(g_PointLightRenderingBuffer, int(_2680 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2680 + 2u)).x));
                        uint _2696 = (_2639 * 48u) + 12u;
                        vec2 _2704 = uintBitsToFloat(uvec2(texelFetch(g_PointLightRenderingBuffer, int(_2696)).x, texelFetch(g_PointLightRenderingBuffer, int(_2696 + 1u)).x));
                        float _2710 = inversesqrt(dot(vec3(_2196, _2197, _2198), vec3(_2196, _2197, _2198)));
                        float _2711 = _2710 * _2196;
                        float _2712 = _2710 * _2197;
                        float _2713 = _2710 * _2198;
                        float _2714 = _2655.x - _2196;
                        float _2715 = _2655.y - _2197;
                        float _2716 = _2655.z - _2198;
                        float _2717 = dot(vec3(_2714, _2715, _2716), vec3(_2714, _2715, _2716));
                        float _2720 = inversesqrt(_2717);
                        float _2721 = _2720 * _2714;
                        float _2722 = _2720 * _2715;
                        float _2723 = _2720 * _2716;
                        float _2724 = dot(vec3(_405, _408, _411), vec3(_2721, _2722, _2723));
                        float _2729 = 1.0 - (_2717 * _2655.w);
                        float _4156 = isnan(0.0) ? _2729 : (isnan(_2729) ? 0.0 : max(_2729, 0.0));
                        float _2730 = isnan(1.0) ? _4156 : (isnan(_4156) ? 1.0 : min(_4156, 1.0));
                        float _2731 = sqrt(_2717) * _2674.w;
                        float _2734 = 1.39999997615814208984375 / (_2731 + 1.39999997615814208984375);
                        float _2735 = _2734 * _2734;
                        float _2736 = 1.0 - _2735;
                        float _2738 = (_2736 * _2736) * _297;
                        float _2741 = ((_2736 * _2724) + _2735) + _2738;
                        float _2746 = _2731 * _2731;
                        float _2751 = ((isnan(0.0) ? _2741 : (isnan(_2741) ? 0.0 : max(_2741, 0.0))) * _2730) / (((_2738 * 2.0) + 1.0) * ((_2746 * 0.699999988079071044921875) + 1.0));
                        float _2755 = dot(vec3(_2721, _2722, _2723), vec3(_2711, _2712, _2713));
                        float _4172 = isnan(0.0) ? _2755 : (isnan(_2755) ? 0.0 : max(_2755, 0.0));
                        float _2762 = dot(vec3((-0.0) - _2711, (-0.0) - _2712, (-0.0) - _2713), vec3(_405, _408, _411)) + 1.0;
                        float _2764 = (isnan(0.0) ? _2762 : (isnan(_2762) ? 0.0 : max(_2762, 0.0))) * 0.5;
                        float _2771 = ((_2764 * _2764) * _2704.x) * exp2((_2704.y * 32.0) * log2(isnan(1.0) ? _4172 : (isnan(_4172) ? 1.0 : min(_4172, 1.0))));
                        float _2773 = _297 / (_297 + 1.0);
                        float _2789 = (-0.0) - _2196;
                        float _2790 = (-0.0) - _2197;
                        float _2791 = (-0.0) - _2198;
                        float _2795 = inversesqrt(dot(vec3(_2789, _2790, _2791), vec3(_2789, _2790, _2791)));
                        float _2796 = _2795 * _2789;
                        float _2797 = _2795 * _2790;
                        float _2798 = _2795 * _2791;
                        float _2806 = exp2(log2(1.0 / ((_2746 * 3.5) + 5.0)) * 0.25);
                        float _2807 = 1.0 - _466;
                        float _2814 = sqrt(1.0 - ((1.0 - (_2807 * _2807)) * (1.0 - (_2806 * _2806))));
                        float _2815 = _2814 * _2814;
                        float _2816 = _2815 * _2815;
                        float _2817 = _2796 + _2721;
                        float _2818 = _2797 + _2722;
                        float _2819 = _2798 + _2723;
                        float _2823 = inversesqrt(dot(vec3(_2817, _2818, _2819), vec3(_2817, _2818, _2819)));
                        float _2827 = dot(vec3(_405, _408, _411), vec3(_2796, _2797, _2798));
                        float _4188 = isnan(0.0) ? _2827 : (isnan(_2827) ? 0.0 : max(_2827, 0.0));
                        float _2830 = isnan(1.0) ? _4188 : (isnan(_4188) ? 1.0 : min(_4188, 1.0));
                        float _2831 = dot(vec3(_405, _408, _411), vec3(_2823 * _2817, _2823 * _2818, _2823 * _2819));
                        float _4199 = isnan(0.0) ? _2831 : (isnan(_2831) ? 0.0 : max(_2831, 0.0));
                        float _2834 = isnan(1.0) ? _4199 : (isnan(_4199) ? 1.0 : min(_4199, 1.0));
                        float _2838 = ((_2834 * _2834) * (_2816 + (-1.0))) + 1.0;
                        float _2839 = _2734 * _2815;
                        float _2840 = _2839 * _2839;
                        float _2843 = ((1.0 - _2840) * _2724) + _2840;
                        float _4210 = isnan(0.0) ? _2843 : (isnan(_2843) ? 0.0 : max(_2843, 0.0));
                        float _2844 = isnan(1.0) ? _4210 : (isnan(_4210) ? 1.0 : min(_4210, 1.0));
                        float _2845 = 1.0 - _2815;
                        float _2855 = (0.5 / (((_2844 * ((_2830 * _2845) + _2815)) + 9.9999999392252902907785028219223e-09) + (((_2844 * _2845) + _2815) * _2830))) * _2844;
                        float _4221 = isnan(0.0) ? _2855 : (isnan(_2855) ? 0.0 : max(_2855, 0.0));
                        float _2866 = (((_2816 * 3.1415927410125732421875) * (isnan(1.0) ? _4221 : (isnan(_4221) ? 1.0 : min(_4221, 1.0)))) / ((_2838 * _2838) * ((_2746 * 2.1991131305694580078125) + 3.141590118408203125))) * _2730;
                        _2563 = (((((_2675 * 0.3183098733425140380859375) * _2773) * _2771) + _2675) * _2751) + _2632;
                        _2564 = (((((_2676 * 0.3183098733425140380859375) * _2773) * _2771) + _2676) * _2751) + _2633;
                        _2565 = (((((_2677 * 0.3183098733425140380859375) * _2773) * _2771) + _2677) * _2751) + _2634;
                        _2560 = (_2866 * _2691.x) + _2629;
                        _2561 = (_2866 * _2691.y) + _2630;
                        _2562 = (_2866 * _2691.z) + _2631;
                        if (_2636 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2629 = _2560;
                            _2630 = _2561;
                            _2631 = _2562;
                            _2632 = _2563;
                            _2633 = _2564;
                            _2634 = _2565;
                            _2635 = _2636;
                        }
                    }
                    frontier_phi_64_pred = _2563;
                    frontier_phi_64_pred_1 = _2565;
                    frontier_phi_64_pred_2 = _2564;
                    frontier_phi_64_pred_3 = _2562;
                    frontier_phi_64_pred_4 = _2561;
                    frontier_phi_64_pred_5 = _2560;
                }
                _2275 = frontier_phi_64_pred;
                _2279 = frontier_phi_64_pred_1;
                _2277 = frontier_phi_64_pred_2;
                _2273 = frontier_phi_64_pred_3;
                _2271 = frontier_phi_64_pred_4;
                _2269 = frontier_phi_64_pred_5;
                uint _2459 = _2458 + 1u;
                if (_2459 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2452 = _2269;
                    _2453 = _2271;
                    _2454 = _2273;
                    _2455 = _2275;
                    _2456 = _2277;
                    _2457 = _2279;
                    _2458 = _2459;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2268 = _2269;
            _2270 = _2271;
            _2272 = _2273;
            _2274 = _2275;
            _2276 = _2277;
            _2278 = _2279;
        }
        uvec4 _2282 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2283 = _2282.z;
        uint _2285 = (_2283 >> 8u) & 15u;
        float _2420;
        float _2422;
        float _2424;
        float _2426;
        float _2428;
        float _2430;
        if (((4294967295u << _2285) & _2242) == 0u)
        {
            _2420 = _2268;
            _2422 = _2270;
            _2424 = _2272;
            _2426 = _2274;
            _2428 = _2276;
            _2430 = _2278;
        }
        else
        {
            float _2445 = inversesqrt(dot(vec3(_2196, _2197, _2198), vec3(_2196, _2197, _2198)));
            float _2446 = _2445 * _2196;
            float _2447 = _2445 * _2197;
            float _2448 = _2445 * _2198;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2285 < ((_2283 >> 12u) & 15u))
            {
                float _2421;
                float _2423;
                float _2425;
                float _2427;
                float _2429;
                float _2431;
                float _2612 = _2268;
                float _2613 = _2270;
                float _2614 = _2272;
                float _2615 = _2274;
                float _2616 = _2276;
                float _2617 = _2278;
                uint _2618 = _2285;
                uint _2627;
                bool _2628;
                for (;;)
                {
                    _2627 = texelFetch(g_lightClassification, int((((_2236 << 5u) + (_2222 << 9u)) + (_2618 << 2u)) >> 2u)).x;
                    _2628 = _2627 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_2628)
                    {
                        frontier_phi_72_pred = _2617;
                        frontier_phi_72_pred_1 = _2616;
                        frontier_phi_72_pred_2 = _2615;
                        frontier_phi_72_pred_3 = _2614;
                        frontier_phi_72_pred_4 = _2613;
                        frontier_phi_72_pred_5 = _2612;
                    }
                    else
                    {
                        float _2909;
                        float _2910;
                        float _2911;
                        float _2912;
                        float _2913;
                        float _2914;
                        float _3253;
                        float _3254;
                        float _3255;
                        float _3256;
                        float _3257;
                        float _3258;
                        float _2922 = _2612;
                        float _2923 = _2613;
                        float _2924 = _2614;
                        float _2925 = _2615;
                        float _2926 = _2616;
                        float _2927 = _2617;
                        uint _2928 = _2627;
                        uint _2929;
                        vec4 _2954;
                        float _2955;
                        vec4 _2970;
                        float _2971;
                        float _2972;
                        float _2973;
                        vec3 _2985;
                        vec2 _2994;
                        vec4 _3010;
                        vec4 _3026;
                        float _3073;
                        bool _3074;
                        for (;;)
                        {
                            uint _2939 = ((_2618 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2928));
                            _2929 = (_2928 + 4294967295u) & _2928;
                            uint _2941 = _2939 * 40u;
                            _2954 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2941)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2941 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2941 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2941 + 3u)).x));
                            _2955 = _2954.w;
                            uint _2957 = (_2939 * 40u) + 4u;
                            _2970 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2957)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2957 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2957 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2957 + 3u)).x));
                            _2971 = _2970.x;
                            _2972 = _2970.y;
                            _2973 = _2970.z;
                            uint _2975 = (_2939 * 40u) + 8u;
                            _2985 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2975)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2975 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2975 + 2u)).x));
                            uint _2987 = (_2939 * 40u) + 12u;
                            _2994 = uintBitsToFloat(uvec2(texelFetch(g_SpotLightRenderingBuffer, int(_2987)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2987 + 1u)).x));
                            uint _2997 = (_2939 * 40u) + 16u;
                            _3010 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2997)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2997 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2997 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2997 + 3u)).x));
                            uint _3013 = (_2939 * 40u) + 20u;
                            _3026 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3013)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3013 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3013 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3013 + 3u)).x));
                            uint _3029 = (_2939 * 40u) + 24u;
                            vec4 _3042 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3029)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3029 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3029 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3029 + 3u)).x));
                            uint _3048 = (_2939 * 40u) + 28u;
                            vec4 _3061 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3048)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3048 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3048 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3048 + 3u)).x));
                            _3073 = fma(_2198, _3061.z, fma(_2197, _3061.y, _3061.x * _2196)) + _3061.w;
                            _3074 = !((fma(_2198, _3042.z, fma(_2197, _3042.y, _3042.x * _2196)) + _3042.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3074)
                            {
                                float _3100 = _2954.x - _2196;
                                float _3101 = _2954.y - _2197;
                                float _3102 = _2954.z - _2198;
                                float _3103 = dot(vec3(_3100, _3101, _3102), vec3(_3100, _3101, _3102));
                                float _3106 = inversesqrt(_3103);
                                float _3107 = _3106 * _3100;
                                float _3108 = _3106 * _3101;
                                float _3109 = _3106 * _3102;
                                float _3113 = 1.0 - (_3103 / (_2955 * _2955));
                                float _4232 = isnan(0.0) ? _3113 : (isnan(_3113) ? 0.0 : max(_3113, 0.0));
                                float _3114 = isnan(1.0) ? _4232 : (isnan(_4232) ? 1.0 : min(_4232, 1.0));
                                float _3118 = sqrt(_3103) * _2970.w;
                                float _3120 = 1.39999997615814208984375 / (_3118 + 1.39999997615814208984375);
                                float _3121 = _3120 * _3120;
                                float _3122 = 1.0 - _3121;
                                float _3124 = (_3122 * _3122) * _297;
                                float _3127 = ((_3122 * dot(vec3(_3107, _3108, _3109), vec3(_405, _408, _411))) + _3121) + _3124;
                                float _3132 = _3118 * _3118;
                                float _3137 = (fma(_2198, _3010.z, fma(_2197, _3010.y, _3010.x * _2196)) + _3010.w) / _3073;
                                float _3138 = (fma(_2198, _3026.z, fma(_2197, _3026.y, _3026.x * _2196)) + _3026.w) / _3073;
                                float _3142 = 1.0 - dot(vec2(_3137, _3138), vec2(_3137, _3138));
                                float _4248 = isnan(0.0) ? _3142 : (isnan(_3142) ? 0.0 : max(_3142, 0.0));
                                float _3143 = isnan(1.0) ? _4248 : (isnan(_4248) ? 1.0 : min(_4248, 1.0));
                                float _3144 = _3143 * (((isnan(0.0) ? _3127 : (isnan(_3127) ? 0.0 : max(_3127, 0.0))) * _3114) / (((_3124 * 2.0) + 1.0) * ((_3132 * 0.699999988079071044921875) + 1.0)));
                                float _3145 = (-0.0) - _2446;
                                float _3146 = (-0.0) - _2447;
                                float _3147 = (-0.0) - _2448;
                                float _3148 = dot(vec3(_3107, _3108, _3109), vec3(_2446, _2447, _2448));
                                float _4259 = isnan(0.0) ? _3148 : (isnan(_3148) ? 0.0 : max(_3148, 0.0));
                                float _3155 = dot(vec3(_3145, _3146, _3147), vec3(_405, _408, _411)) + 1.0;
                                float _3157 = (isnan(0.0) ? _3155 : (isnan(_3155) ? 0.0 : max(_3155, 0.0))) * 0.5;
                                float _3164 = ((_3157 * _3157) * _2994.x) * exp2((_2994.y * 32.0) * log2(isnan(1.0) ? _4259 : (isnan(_4259) ? 1.0 : min(_4259, 1.0))));
                                float _3166 = _297 / (_297 + 1.0);
                                float _3187 = exp2(log2(1.0 / ((_3132 * 3.5) + 5.0)) * 0.25);
                                float _3188 = 1.0 - _466;
                                float _3195 = sqrt(1.0 - ((1.0 - (_3188 * _3188)) * (1.0 - (_3187 * _3187))));
                                float _3196 = _3195 * _3195;
                                float _3197 = _3196 * _3196;
                                float _3198 = _3107 - _2446;
                                float _3199 = _3108 - _2447;
                                float _3200 = _3109 - _2448;
                                float _3204 = inversesqrt(dot(vec3(_3198, _3199, _3200), vec3(_3198, _3199, _3200)));
                                float _3208 = dot(vec3(_405, _408, _411), vec3(_3145, _3146, _3147));
                                float _4275 = isnan(0.0) ? _3208 : (isnan(_3208) ? 0.0 : max(_3208, 0.0));
                                float _3211 = isnan(1.0) ? _4275 : (isnan(_4275) ? 1.0 : min(_4275, 1.0));
                                float _3212 = dot(vec3(_405, _408, _411), vec3(_3204 * _3198, _3204 * _3199, _3204 * _3200));
                                float _4286 = isnan(0.0) ? _3212 : (isnan(_3212) ? 0.0 : max(_3212, 0.0));
                                float _3215 = isnan(1.0) ? _4286 : (isnan(_4286) ? 1.0 : min(_4286, 1.0));
                                float _3219 = ((_3215 * _3215) * (_3197 + (-1.0))) + 1.0;
                                float _3220 = _3120 * _3196;
                                float _3221 = _3220 * _3220;
                                float _3227 = ((1.0 - _3221) * dot(vec3(_405, _408, _411), vec3(_3107, _3108, _3109))) + _3221;
                                float _4297 = isnan(0.0) ? _3227 : (isnan(_3227) ? 0.0 : max(_3227, 0.0));
                                float _3228 = isnan(1.0) ? _4297 : (isnan(_4297) ? 1.0 : min(_4297, 1.0));
                                float _3229 = 1.0 - _3196;
                                float _3239 = (0.5 / (((_3228 * ((_3211 * _3229) + _3196)) + 9.9999999392252902907785028219223e-09) + (((_3228 * _3229) + _3196) * _3211))) * _3228;
                                float _4308 = isnan(0.0) ? _3239 : (isnan(_3239) ? 0.0 : max(_3239, 0.0));
                                float _3249 = (_3143 * _3114) * (((_3197 * 3.1415927410125732421875) * (isnan(1.0) ? _4308 : (isnan(_4308) ? 1.0 : min(_4308, 1.0)))) / ((_3219 * _3219) * ((_3132 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = ((((_2973 * 0.3183098733425140380859375) * _3166) * _3164) + _2973) * _3144;
                                frontier_phi_78_pred_1 = ((((_2972 * 0.3183098733425140380859375) * _3166) * _3164) + _2972) * _3144;
                                frontier_phi_78_pred_2 = ((((_2971 * 0.3183098733425140380859375) * _3166) * _3164) + _2971) * _3144;
                                frontier_phi_78_pred_3 = _3249 * _2985.z;
                                frontier_phi_78_pred_4 = _3249 * _2985.y;
                                frontier_phi_78_pred_5 = _3249 * _2985.x;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3258 = frontier_phi_78_pred;
                            _3257 = frontier_phi_78_pred_1;
                            _3256 = frontier_phi_78_pred_2;
                            _3255 = frontier_phi_78_pred_3;
                            _3254 = frontier_phi_78_pred_4;
                            _3253 = frontier_phi_78_pred_5;
                            _2912 = _3256 + _2925;
                            _2913 = _3257 + _2926;
                            _2914 = _3258 + _2927;
                            _2909 = _3253 + _2922;
                            _2910 = _3254 + _2923;
                            _2911 = _3255 + _2924;
                            if (_2929 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2922 = _2909;
                                _2923 = _2910;
                                _2924 = _2911;
                                _2925 = _2912;
                                _2926 = _2913;
                                _2927 = _2914;
                                _2928 = _2929;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _2914;
                        frontier_phi_72_pred_1 = _2913;
                        frontier_phi_72_pred_2 = _2912;
                        frontier_phi_72_pred_3 = _2911;
                        frontier_phi_72_pred_4 = _2910;
                        frontier_phi_72_pred_5 = _2909;
                    }
                    _2431 = frontier_phi_72_pred;
                    _2429 = frontier_phi_72_pred_1;
                    _2427 = frontier_phi_72_pred_2;
                    _2425 = frontier_phi_72_pred_3;
                    _2423 = frontier_phi_72_pred_4;
                    _2421 = frontier_phi_72_pred_5;
                    uint _2619 = _2618 + 1u;
                    if (_2619 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2612 = _2421;
                        _2613 = _2423;
                        _2614 = _2425;
                        _2615 = _2427;
                        _2616 = _2429;
                        _2617 = _2431;
                        _2618 = _2619;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2425;
                frontier_phi_58_59_ladder_1 = _2431;
                frontier_phi_58_59_ladder_2 = _2429;
                frontier_phi_58_59_ladder_3 = _2427;
                frontier_phi_58_59_ladder_4 = _2423;
                frontier_phi_58_59_ladder_5 = _2421;
            }
            else
            {
                frontier_phi_58_59_ladder = _2272;
                frontier_phi_58_59_ladder_1 = _2278;
                frontier_phi_58_59_ladder_2 = _2276;
                frontier_phi_58_59_ladder_3 = _2274;
                frontier_phi_58_59_ladder_4 = _2270;
                frontier_phi_58_59_ladder_5 = _2268;
            }
            _2420 = frontier_phi_58_59_ladder_5;
            _2422 = frontier_phi_58_59_ladder_4;
            _2424 = frontier_phi_58_59_ladder;
            _2426 = frontier_phi_58_59_ladder_3;
            _2428 = frontier_phi_58_59_ladder_2;
            _2430 = frontier_phi_58_59_ladder_1;
        }
        float _2435 = isnan(1.0) ? _450 : (isnan(_450) ? 1.0 : min(_450, 1.0));
        _2255 = (_2435 * _2426) + _1730;
        _2257 = (_2435 * _2428) + _1732;
        _2259 = (_2435 * _2430) + _1734;
        _2261 = ((_2420 * 0.039999999105930328369140625) * _2435) + _2066;
        _2263 = ((_2422 * 0.039999999105930328369140625) * _2435) + _2068;
        _2265 = ((_2424 * 0.039999999105930328369140625) * _2435) + _2070;
    }
    else
    {
        _2255 = _1730;
        _2257 = _1732;
        _2259 = _1734;
        _2261 = _2066;
        _2263 = _2068;
        _2265 = _2070;
    }
    float _2357;
    float _2358;
    float _2359;
    if (_297 > 0.0)
    {
        uint _2289 = _1510 + 4u;
        float _2295 = (-0.0) - _375;
        float _2297 = (-0.0) - _376;
        float _2298 = (-0.0) - _377;
        float _2299 = dot(vec3(cbLight._m0[_1510].xyz), vec3(_2295, _2297, _2298));
        float _4324 = isnan(0.0) ? _2299 : (isnan(_2299) ? 0.0 : max(_2299, 0.0));
        float _2303 = _461 + 1.0;
        float _2305 = (isnan(0.0) ? _2303 : (isnan(_2303) ? 0.0 : max(_2303, 0.0))) * 0.5;
        float _2310 = _2305 * _2305;
        float _2311 = _2310 * exp2(log2(isnan(1.0) ? _4324 : (isnan(_4324) ? 1.0 : min(_4324, 1.0))) * 32.0);
        float _2313 = _297 / (_297 + 1.0);
        float _2314 = isnan(_1523) ? 1.0 : (isnan(1.0) ? _1523 : min(1.0, _1523));
        uint _2327 = _1510 + 5u;
        float _2333 = dot(vec3(cbLight._m0[_1823].xyz), vec3(_2295, _2297, _2298));
        float _4345 = isnan(0.0) ? _2333 : (isnan(_2333) ? 0.0 : max(_2333, 0.0));
        float _2340 = _2310 * exp2(log2(isnan(1.0) ? _4345 : (isnan(_4345) ? 1.0 : min(_4345, 1.0))) * 32.0);
        float _2341 = isnan(_1524) ? 1.0 : (isnan(1.0) ? _1524 : min(1.0, _1524));
        _2357 = ((((_2340 * cbLight._m0[_2327].x) * _2313) * _2341) + ((((cbLight._m0[_2289].x * _1502) * _2311) * _2313) * _2314)) * 0.3183098733425140380859375;
        _2358 = ((((_2340 * cbLight._m0[_2327].y) * _2313) * _2341) + ((((cbLight._m0[_2289].y * _1503) * _2311) * _2313) * _2314)) * 0.3183098733425140380859375;
        _2359 = ((((_2340 * cbLight._m0[_2327].z) * _2313) * _2341) + ((((cbLight._m0[_2289].z * _1504) * _2311) * _2313) * _2314)) * 0.3183098733425140380859375;
    }
    else
    {
        _2357 = 0.0;
        _2358 = 0.0;
        _2359 = 0.0;
    }
    float _4361 = isnan(0.0) ? _436 : (isnan(_436) ? 0.0 : max(_436, 0.0));
    float _4372 = isnan(0.0) ? _437 : (isnan(_437) ? 0.0 : max(_437, 0.0));
    float _4383 = isnan(0.0) ? _438 : (isnan(_438) ? 0.0 : max(_438, 0.0));
    float _4394 = isnan(0.0) ? _295 : (isnan(_295) ? 0.0 : max(_295, 0.0));
    float _2386 = cbInstanceData._m0[_424 + 6u].w * (isnan(1.0) ? _4394 : (isnan(_4394) ? 1.0 : min(_4394, 1.0)));
    float _2391 = _383 / cbSceneParam._m0[86u].x;
    float _2392 = _384 / cbSceneParam._m0[86u].y;
    vec4 _2406 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2391, _2392, (log2((isnan(cbSceneParam._m0[77u].w) ? _316 : (isnan(_316) ? cbSceneParam._m0[77u].w : min(_316, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2408 = _2406.x;
    float _2409 = _2406.y;
    float _2410 = _2406.z;
    float _2411 = _2406.w;
    float _2510;
    float _2512;
    float _2514;
    float _2516;
    if (_316 > cbSceneParam._m0[78u].w)
    {
        float _2473 = isnan(_316) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _316 : min(cbSceneParam._m0[80u].w, _316));
        float _2474 = _2473 / _316;
        float _2485 = _2474 * _368;
        float _2486 = _369 * _2474;
        float _2487 = (-0.0) - _2486;
        float _2488 = _2474 * _370;
        float _2490 = (cbSceneParam._m0[77u].w * _2487) / _2473;
        float _2491 = _2490 + cbSceneParam._m0[79u].w;
        float _2492 = cbSceneParam._m0[79u].w - _2486;
        float _2498 = sqrt(((_2485 * _2485) + (_2486 * _2486)) + (_2488 * _2488));
        float _2501 = (1.0 - (cbSceneParam._m0[77u].w / _2473)) * _2498;
        float _2506 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2508 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2871;
        if (abs((_2487 - _2490) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2871 = ((((_2491 > 0.0) ? exp2(_2506 * _2491) : (2.0 - exp2(_2508 * _2491))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2501;
        }
        else
        {
            float _2585 = 1.0 / cbSceneParam._m0[80u].x;
            float _2586 = isnan(_2492) ? _2491 : (isnan(_2491) ? _2492 : max(_2491, _2492));
            float _2587 = isnan(_2492) ? _2491 : (isnan(_2491) ? _2492 : min(_2491, _2492));
            float _2596 = isnan(0.0) ? _2586 : (isnan(_2586) ? 0.0 : min(_2586, 0.0));
            float _2597 = isnan(0.0) ? _2587 : (isnan(_2587) ? 0.0 : min(_2587, 0.0));
            _2871 = ((abs(_2498 / _2487) * cbSceneParam._m0[80u].y) * ((((_2596 - _2597) * 2.0) - ((exp2(_2506 * (isnan(0.0) ? _2586 : (isnan(_2586) ? 0.0 : max(_2586, 0.0)))) - exp2(_2506 * (isnan(0.0) ? _2587 : (isnan(_2587) ? 0.0 : max(_2587, 0.0))))) * _2585)) - ((exp2(_2508 * _2596) - exp2(_2508 * _2597)) * _2585))) + (_2501 * cbSceneParam._m0[80u].z);
        }
        vec4 _2873 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2391, _2392, 1.0), 0.0);
        float _2882 = exp2((_2871 * (-1.44269502162933349609375)) * (1.0 - _2873.w));
        float _2883 = log2(_2882);
        float _2899 = log2(_2411);
        _2510 = (exp2(_2899 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2883 * cbSceneParam._m0[78u].x)) * _2873.x) / cbSceneParam._m0[78u].x)) + _2408;
        _2512 = (exp2(_2899 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2883 * cbSceneParam._m0[78u].y)) * _2873.y) / cbSceneParam._m0[78u].y)) + _2409;
        _2514 = (exp2(_2899 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2883 * cbSceneParam._m0[78u].z)) * _2873.z) / cbSceneParam._m0[78u].z)) + _2410;
        _2516 = _2882 * _2411;
    }
    else
    {
        _2510 = _2408;
        _2512 = _2409;
        _2514 = _2410;
        _2516 = _2411;
    }
    float _2528 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2529 = _2528 == 3.0;
    float _2530 = log2(_2516);
    float _2537 = exp2(_2530 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4361 : (isnan(_4361) ? 1.0 : min(_4361, 1.0))) * ((_2255 + ((isnan(0.0) ? _1178 : (isnan(_1178) ? 0.0 : max(_1178, 0.0))) * _450)) + _2357)) + ((_2261 + ((isnan(0.0) ? _1474 : (isnan(_1474) ? 0.0 : max(_1474, 0.0))) * _1257)) * cbPerFrame._m0[3u].x));
    float _2538 = exp2(_2530 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4372 : (isnan(_4372) ? 1.0 : min(_4372, 1.0))) * ((_2257 + ((isnan(0.0) ? _1181 : (isnan(_1181) ? 0.0 : max(_1181, 0.0))) * _450)) + _2358)) + ((_2263 + ((isnan(0.0) ? _1477 : (isnan(_1477) ? 0.0 : max(_1477, 0.0))) * _1257)) * cbPerFrame._m0[3u].x));
    float _2539 = exp2(_2530 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4383 : (isnan(_4383) ? 1.0 : min(_4383, 1.0))) * ((_2259 + ((isnan(0.0) ? _1184 : (isnan(_1184) ? 0.0 : max(_1184, 0.0))) * _450)) + _2359)) + ((_2265 + ((isnan(0.0) ? _1480 : (isnan(_1480) ? 0.0 : max(_1480, 0.0))) * _1257)) * cbPerFrame._m0[3u].x));
    float _2548 = (_2528 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2548 * (_2529 ? _2537 : (_2537 + (cbSceneParam._m0[72u].w * _2510)));
    SV_Target.y = _2548 * (_2529 ? _2538 : (_2538 + (cbSceneParam._m0[72u].w * _2512)));
    SV_Target.z = _2548 * (_2529 ? _2539 : (_2539 + (cbSceneParam._m0[72u].w * _2514)));
    SV_Target.w = _2386;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2386;
}


