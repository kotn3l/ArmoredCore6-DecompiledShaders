#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[12];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_M0_M1_Edge_Translucency_Pivot2_Child_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_M0_M1_Edge_Translucency_Pivot2_Child_snp_0_Texture2D_1;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_M0_M1_Edge_Translucency_Pivot2_Child_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in float TEXCOORD;
layout(location = 4, component = 1) in float TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _820;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _174 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _175 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _176 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _182 = inversesqrt(dot(vec3(_174, _175, _176), vec3(_174, _175, _176)));
    float _189 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _196 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _219 = texture(sampler2D(M_AMSN_M0_M1_Edge_Translucency_Pivot2_Child_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1) + cbTextureTilingScale._m0[0u].w));
    float _225 = _219.w;
    float _226 = _219.x * cbMtdParam._m0[9u].x;
    float _227 = _219.y * cbMtdParam._m0[9u].y;
    float _228 = _219.z * cbMtdParam._m0[9u].z;
    vec4 _240 = texture(sampler2D(M_AMSN_M0_M1_Edge_Translucency_Pivot2_Child_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1) + cbTextureTilingScale._m0[1u].w));
    float _244 = _240.z;
    float _248 = (_240.x * 2.0) + (-1.0);
    float _250 = (_240.y * 2.0) + (-1.0);
    float _251 = dot(vec2(_248, _250), vec2(_248, _250));
    float _3363 = isnan(0.0) ? _251 : (isnan(_251) ? 0.0 : max(_251, 0.0));
    float _257 = sqrt(1.0 - (isnan(1.0) ? _3363 : (isnan(_3363) ? 1.0 : min(_3363, 1.0))));
    vec4 _269 = texture(sampler2D(M_AMSN_M0_M1_Edge_Translucency_Pivot2_Child_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_1) + cbTextureTilingScale._m0[3u].w));
    float _276 = cbMtdParam._m0[10u].x * _269.x;
    float _279 = fma(_257, _189 * NORMAL.x, fma(_250, _196 * TANGENT.x, (_182 * _174) * _248));
    float _282 = fma(_257, _189 * NORMAL.y, fma(_250, _196 * TANGENT.y, (_182 * _175) * _248));
    float _285 = fma(_257, _189 * NORMAL.z, fma(_250, _196 * TANGENT.z, (_182 * _176) * _248));
    float _289 = inversesqrt(dot(vec3(_279, _282, _285), vec3(_279, _282, _285)));
    float _290 = _289 * _279;
    float _291 = _289 * _282;
    float _292 = _289 * _285;
    float _3374 = isnan(0.0) ? _225 : (isnan(_225) ? 0.0 : max(_225, 0.0));
    float _293 = isnan(1.0) ? _3374 : (isnan(_3374) ? 1.0 : min(_3374, 1.0));
    float _3385 = isnan(0.0) ? _244 : (isnan(_244) ? 0.0 : max(_244, 0.0));
    float _294 = isnan(1.0) ? _3385 : (isnan(_3385) ? 1.0 : min(_3385, 1.0));
    float _295 = isnan(0.0) ? _276 : (isnan(_276) ? 0.0 : max(_276, 0.0));
    float _3401 = isnan(0.0) ? _226 : (isnan(_226) ? 0.0 : max(_226, 0.0));
    float _3412 = isnan(0.0) ? _227 : (isnan(_227) ? 0.0 : max(_227, 0.0));
    float _3423 = isnan(0.0) ? _228 : (isnan(_228) ? 0.0 : max(_228, 0.0));
    float _314 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _356 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _366 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _356);
    float _367 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _356);
    float _368 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _356);
    float _372 = inversesqrt(dot(vec3(_366, _367, _368), vec3(_366, _367, _368)));
    float _373 = _366 * _372;
    float _374 = _367 * _372;
    float _375 = _368 * _372;
    float _381 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _382 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _403 = fma(_292, cbSceneParam._m0[5u].z, fma(_291, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _290));
    float _406 = fma(_292, cbSceneParam._m0[6u].z, fma(_291, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _290));
    float _409 = fma(_292, cbSceneParam._m0[7u].z, fma(_291, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _290));
    uint _422 = uint(roundEven(NORMAL.w)) * 13u;
    uint _425 = (_422 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _431 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3401 : (isnan(_3401) ? 1.0 : min(_3401, 1.0)))) * cbInstanceData._m0[_425].x;
    float _432 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3412 : (isnan(_3412) ? 1.0 : min(_3412, 1.0)))) * cbInstanceData._m0[_425].y;
    float _433 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3423 : (isnan(_3423) ? 1.0 : min(_3423, 1.0)))) * cbInstanceData._m0[_425].z;
    float _3434 = isnan(0.0) ? _431 : (isnan(_431) ? 0.0 : max(_431, 0.0));
    float _434 = isnan(1.0) ? _3434 : (isnan(_3434) ? 1.0 : min(_3434, 1.0));
    float _3445 = isnan(0.0) ? _432 : (isnan(_432) ? 0.0 : max(_432, 0.0));
    float _435 = isnan(1.0) ? _3445 : (isnan(_3445) ? 1.0 : min(_3445, 1.0));
    float _3456 = isnan(0.0) ? _433 : (isnan(_433) ? 0.0 : max(_433, 0.0));
    float _436 = isnan(1.0) ? _3456 : (isnan(_3456) ? 1.0 : min(_3456, 1.0));
    vec4 _445 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _381, cbSceneParam._m0[86u].y * _382));
    float _448 = _445.x * TEXCOORD_3.w;
    float _449 = dot(vec3(_290, _291, _292), vec3(_373, _374, _375));
    float _452 = _449 * 2.0;
    float _456 = (_452 * _290) - _373;
    float _457 = (_452 * _291) - _374;
    float _458 = (_452 * _292) - _375;
    float _459 = dot(vec3(_373, _374, _375), vec3(_290, _291, _292));
    float _462 = abs(_459);
    float _3467 = isnan(0.0) ? _462 : (isnan(_462) ? 0.0 : max(_462, 0.0));
    float _464 = sqrt(_294);
    float _477 = exp2((_464 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3467 : (isnan(_3467) ? 1.0 : min(_3467, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_464 * 3.0));
    float _509 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _513 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _517 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _819;
    float _821;
    float _822;
    float _823;
    float _824;
    float _825;
    float _826;
    float _827;
    float _828;
    float _829;
    float _830;
    float _831;
    float _832;
    float _833;
    float _834;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _544 = fma(_517, cbModelParam._m0[26u].z, fma(_513, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _509));
        float _548 = fma(_517, cbModelParam._m0[27u].z, fma(_513, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _509));
        float _552 = fma(_517, cbModelParam._m0[28u].z, fma(_513, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _509));
        float _577 = _509 + _290;
        float _578 = _513 + _291;
        float _579 = _517 + _292;
        float _589 = fma(_579, cbModelParam._m0[26u].z, fma(_578, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _577)) - _544;
        float _590 = fma(_579, cbModelParam._m0[27u].z, fma(_578, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _577)) - _548;
        float _591 = fma(_579, cbModelParam._m0[28u].z, fma(_578, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _577)) - _552;
        float _595 = inversesqrt(dot(vec3(_589, _590, _591), vec3(_589, _590, _591)));
        float _608 = ((_595 * _589) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_544 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _609 = ((_595 * _590) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_548 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _610 = ((_595 * _591) / cbModelParam._m0[34u].z) + ((((((_552 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _613 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_608, _609, _610), 0.0);
        vec4 _620 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_608, _609, _610), 0.0);
        vec4 _627 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_608, _609, _610), 0.0);
        vec4 _634 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_608, _609, _610), 0.0);
        float _647 = exp2((_613.w + (-0.5)) * 20.0) * 2.0;
        float _648 = _647 * (_613.x + (-0.5));
        float _649 = _647 * (_613.y + (-0.5));
        float _650 = _647 * (_613.z + (-0.5));
        float _657 = exp2((_620.w + (-0.5)) * 20.0) * 2.0;
        float _658 = _657 * (_620.x + (-0.5));
        float _659 = _657 * (_620.y + (-0.5));
        float _660 = _657 * (_620.z + (-0.5));
        float _667 = exp2((_627.w + (-0.5)) * 20.0) * 2.0;
        float _668 = _667 * (_627.x + (-0.5));
        float _669 = _667 * (_627.y + (-0.5));
        float _670 = _667 * (_627.z + (-0.5));
        float _677 = exp2((_634.w + (-0.5)) * 20.0) * 2.0;
        float _678 = _677 * (_634.x + (-0.5));
        float _679 = _677 * (_634.y + (-0.5));
        float _680 = _677 * (_634.z + (-0.5));
        float _681 = isnan(0.0) ? _678 : (isnan(_678) ? 0.0 : max(_678, 0.0));
        float _682 = isnan(0.0) ? _679 : (isnan(_679) ? 0.0 : max(_679, 0.0));
        float _683 = isnan(0.0) ? _680 : (isnan(_680) ? 0.0 : max(_680, 0.0));
        float _684 = _648 * 0.5;
        float _685 = _658 * 0.5;
        float _686 = _668 * 0.5;
        float _687 = dot(vec3(_684, _685, _686), vec3(_684, _685, _686));
        float _692 = (_687 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_687);
        float _701 = (dot(vec3(_290, _291, _292), vec3(_692 * _684, _692 * _685, _692 * _686)) + 1.0) * 0.5;
        float _3493 = isnan(0.0) ? _701 : (isnan(_701) ? 0.0 : max(_701, 0.0));
        float _711 = sqrt(((_685 * _685) + (_684 * _684)) + (_686 * _686)) / (_681 + 9.9999997473787516355514526367188e-06);
        float _3504 = isnan(0.0) ? _711 : (isnan(_711) ? 0.0 : max(_711, 0.0));
        float _712 = isnan(1.0) ? _3504 : (isnan(_3504) ? 1.0 : min(_3504, 1.0));
        float _713 = _712 * 2.0;
        float _717 = (1.0 - _712) / (_712 + 1.0);
        float _3515 = isnan(0.0) ? _717 : (isnan(_717) ? 0.0 : max(_717, 0.0));
        float _718 = isnan(1.0) ? _3515 : (isnan(_3515) ? 1.0 : min(_3515, 1.0));
        float _727 = ((((1.0 - _718) * (_713 + 2.0)) * exp2(log2(isnan(1.0) ? _3493 : (isnan(_3493) ? 1.0 : min(_3493, 1.0))) * (_713 + 1.0))) + _718) * _681;
        float _728 = _649 * 0.5;
        float _729 = _659 * 0.5;
        float _730 = _669 * 0.5;
        float _731 = dot(vec3(_728, _729, _730), vec3(_728, _729, _730));
        float _736 = (_731 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_731);
        float _744 = (dot(vec3(_290, _291, _292), vec3(_736 * _728, _736 * _729, _736 * _730)) + 1.0) * 0.5;
        float _3526 = isnan(0.0) ? _744 : (isnan(_744) ? 0.0 : max(_744, 0.0));
        float _753 = sqrt(((_729 * _729) + (_728 * _728)) + (_730 * _730)) / (_682 + 9.9999997473787516355514526367188e-06);
        float _3537 = isnan(0.0) ? _753 : (isnan(_753) ? 0.0 : max(_753, 0.0));
        float _754 = isnan(1.0) ? _3537 : (isnan(_3537) ? 1.0 : min(_3537, 1.0));
        float _755 = _754 * 2.0;
        float _759 = (1.0 - _754) / (_754 + 1.0);
        float _3548 = isnan(0.0) ? _759 : (isnan(_759) ? 0.0 : max(_759, 0.0));
        float _760 = isnan(1.0) ? _3548 : (isnan(_3548) ? 1.0 : min(_3548, 1.0));
        float _769 = ((((1.0 - _760) * (_755 + 2.0)) * exp2(log2(isnan(1.0) ? _3526 : (isnan(_3526) ? 1.0 : min(_3526, 1.0))) * (_755 + 1.0))) + _760) * _682;
        float _770 = _650 * 0.5;
        float _771 = _660 * 0.5;
        float _772 = _670 * 0.5;
        float _773 = dot(vec3(_770, _771, _772), vec3(_770, _771, _772));
        float _778 = (_773 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_773);
        float _786 = (dot(vec3(_290, _291, _292), vec3(_778 * _770, _778 * _771, _778 * _772)) + 1.0) * 0.5;
        float _3559 = isnan(0.0) ? _786 : (isnan(_786) ? 0.0 : max(_786, 0.0));
        float _795 = sqrt(((_771 * _771) + (_770 * _770)) + (_772 * _772)) / (_683 + 9.9999997473787516355514526367188e-06);
        float _3570 = isnan(0.0) ? _795 : (isnan(_795) ? 0.0 : max(_795, 0.0));
        float _796 = isnan(1.0) ? _3570 : (isnan(_3570) ? 1.0 : min(_3570, 1.0));
        float _797 = _796 * 2.0;
        float _801 = (1.0 - _796) / (_796 + 1.0);
        float _3581 = isnan(0.0) ? _801 : (isnan(_801) ? 0.0 : max(_801, 0.0));
        float _802 = isnan(1.0) ? _3581 : (isnan(_3581) ? 1.0 : min(_3581, 1.0));
        float _811 = ((((1.0 - _802) * (_797 + 2.0)) * exp2(log2(isnan(1.0) ? _3559 : (isnan(_3559) ? 1.0 : min(_3559, 1.0))) * (_797 + 1.0))) + _802) * _683;
        _819 = _650;
        _821 = _649;
        _822 = _648;
        _823 = _660;
        _824 = _659;
        _825 = _658;
        _826 = _670;
        _827 = _669;
        _828 = _668;
        _829 = _683;
        _830 = _682;
        _831 = _681;
        _832 = cbModelParam._m0[36u].z * (isnan(0.0) ? _727 : (isnan(_727) ? 0.0 : max(_727, 0.0)));
        _833 = cbModelParam._m0[36u].z * (isnan(0.0) ? _769 : (isnan(_769) ? 0.0 : max(_769, 0.0)));
        _834 = cbModelParam._m0[36u].z * (isnan(0.0) ? _811 : (isnan(_811) ? 0.0 : max(_811, 0.0)));
    }
    else
    {
        _819 = _820;
        _821 = _820;
        _822 = _820;
        _823 = _820;
        _824 = _820;
        _825 = _820;
        _826 = _820;
        _827 = _820;
        _828 = _820;
        _829 = _820;
        _830 = _820;
        _831 = _820;
        _832 = 0.0;
        _833 = 0.0;
        _834 = 0.0;
    }
    float _1129;
    float _1130;
    float _1131;
    float _1132;
    float _1133;
    float _1134;
    float _1135;
    float _1136;
    float _1137;
    float _1138;
    float _1139;
    float _1140;
    float _1141;
    float _1142;
    float _1143;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _860 = fma(_517, cbModelParam._m0[30u].z, fma(_513, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _509));
        float _864 = fma(_517, cbModelParam._m0[31u].z, fma(_513, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _509));
        float _868 = fma(_517, cbModelParam._m0[32u].z, fma(_513, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _509));
        float _891 = _509 + _290;
        float _892 = _513 + _291;
        float _893 = _517 + _292;
        float _903 = fma(_893, cbModelParam._m0[30u].z, fma(_892, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _891)) - _860;
        float _904 = fma(_893, cbModelParam._m0[31u].z, fma(_892, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _891)) - _864;
        float _905 = fma(_893, cbModelParam._m0[32u].z, fma(_892, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _891)) - _868;
        float _909 = inversesqrt(dot(vec3(_903, _904, _905), vec3(_903, _904, _905)));
        float _922 = ((_909 * _903) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_860 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _923 = ((_909 * _904) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_864 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _924 = ((_909 * _905) / cbModelParam._m0[35u].z) + ((((((_868 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _926 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_922, _923, _924), 0.0);
        vec4 _933 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_922, _923, _924), 0.0);
        vec4 _940 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_922, _923, _924), 0.0);
        vec4 _947 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_922, _923, _924), 0.0);
        float _959 = exp2((_926.w + (-0.5)) * 20.0) * 2.0;
        float _960 = _959 * (_926.x + (-0.5));
        float _961 = _959 * (_926.y + (-0.5));
        float _962 = _959 * (_926.z + (-0.5));
        float _969 = exp2((_933.w + (-0.5)) * 20.0) * 2.0;
        float _970 = _969 * (_933.x + (-0.5));
        float _971 = _969 * (_933.y + (-0.5));
        float _972 = _969 * (_933.z + (-0.5));
        float _979 = exp2((_940.w + (-0.5)) * 20.0) * 2.0;
        float _980 = _979 * (_940.x + (-0.5));
        float _981 = _979 * (_940.y + (-0.5));
        float _982 = _979 * (_940.z + (-0.5));
        float _989 = exp2((_947.w + (-0.5)) * 20.0) * 2.0;
        float _990 = _989 * (_947.x + (-0.5));
        float _991 = _989 * (_947.y + (-0.5));
        float _992 = _989 * (_947.z + (-0.5));
        float _993 = isnan(0.0) ? _990 : (isnan(_990) ? 0.0 : max(_990, 0.0));
        float _994 = isnan(0.0) ? _991 : (isnan(_991) ? 0.0 : max(_991, 0.0));
        float _995 = isnan(0.0) ? _992 : (isnan(_992) ? 0.0 : max(_992, 0.0));
        float _996 = _960 * 0.5;
        float _997 = _970 * 0.5;
        float _998 = _980 * 0.5;
        float _999 = dot(vec3(_996, _997, _998), vec3(_996, _997, _998));
        float _1004 = (_999 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_999);
        float _1012 = (dot(vec3(_290, _291, _292), vec3(_1004 * _996, _1004 * _997, _1004 * _998)) + 1.0) * 0.5;
        float _3622 = isnan(0.0) ? _1012 : (isnan(_1012) ? 0.0 : max(_1012, 0.0));
        float _1021 = sqrt(((_997 * _997) + (_996 * _996)) + (_998 * _998)) / (_993 + 9.9999997473787516355514526367188e-06);
        float _3633 = isnan(0.0) ? _1021 : (isnan(_1021) ? 0.0 : max(_1021, 0.0));
        float _1022 = isnan(1.0) ? _3633 : (isnan(_3633) ? 1.0 : min(_3633, 1.0));
        float _1023 = _1022 * 2.0;
        float _1027 = (1.0 - _1022) / (_1022 + 1.0);
        float _3644 = isnan(0.0) ? _1027 : (isnan(_1027) ? 0.0 : max(_1027, 0.0));
        float _1028 = isnan(1.0) ? _3644 : (isnan(_3644) ? 1.0 : min(_3644, 1.0));
        float _1037 = ((((1.0 - _1028) * (_1023 + 2.0)) * exp2(log2(isnan(1.0) ? _3622 : (isnan(_3622) ? 1.0 : min(_3622, 1.0))) * (_1023 + 1.0))) + _1028) * _993;
        float _1038 = _961 * 0.5;
        float _1039 = _971 * 0.5;
        float _1040 = _981 * 0.5;
        float _1041 = dot(vec3(_1038, _1039, _1040), vec3(_1038, _1039, _1040));
        float _1046 = (_1041 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1041);
        float _1054 = (dot(vec3(_290, _291, _292), vec3(_1046 * _1038, _1046 * _1039, _1046 * _1040)) + 1.0) * 0.5;
        float _3655 = isnan(0.0) ? _1054 : (isnan(_1054) ? 0.0 : max(_1054, 0.0));
        float _1063 = sqrt(((_1039 * _1039) + (_1038 * _1038)) + (_1040 * _1040)) / (_994 + 9.9999997473787516355514526367188e-06);
        float _3666 = isnan(0.0) ? _1063 : (isnan(_1063) ? 0.0 : max(_1063, 0.0));
        float _1064 = isnan(1.0) ? _3666 : (isnan(_3666) ? 1.0 : min(_3666, 1.0));
        float _1065 = _1064 * 2.0;
        float _1069 = (1.0 - _1064) / (_1064 + 1.0);
        float _3677 = isnan(0.0) ? _1069 : (isnan(_1069) ? 0.0 : max(_1069, 0.0));
        float _1070 = isnan(1.0) ? _3677 : (isnan(_3677) ? 1.0 : min(_3677, 1.0));
        float _1079 = ((((1.0 - _1070) * (_1065 + 2.0)) * exp2(log2(isnan(1.0) ? _3655 : (isnan(_3655) ? 1.0 : min(_3655, 1.0))) * (_1065 + 1.0))) + _1070) * _994;
        float _1080 = _962 * 0.5;
        float _1081 = _972 * 0.5;
        float _1082 = _982 * 0.5;
        float _1083 = dot(vec3(_1080, _1081, _1082), vec3(_1080, _1081, _1082));
        float _1088 = (_1083 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1083);
        float _1096 = (dot(vec3(_290, _291, _292), vec3(_1088 * _1080, _1088 * _1081, _1088 * _1082)) + 1.0) * 0.5;
        float _3688 = isnan(0.0) ? _1096 : (isnan(_1096) ? 0.0 : max(_1096, 0.0));
        float _1105 = sqrt(((_1081 * _1081) + (_1080 * _1080)) + (_1082 * _1082)) / (_995 + 9.9999997473787516355514526367188e-06);
        float _3699 = isnan(0.0) ? _1105 : (isnan(_1105) ? 0.0 : max(_1105, 0.0));
        float _1106 = isnan(1.0) ? _3699 : (isnan(_3699) ? 1.0 : min(_3699, 1.0));
        float _1107 = _1106 * 2.0;
        float _1111 = (1.0 - _1106) / (_1106 + 1.0);
        float _3710 = isnan(0.0) ? _1111 : (isnan(_1111) ? 0.0 : max(_1111, 0.0));
        float _1112 = isnan(1.0) ? _3710 : (isnan(_3710) ? 1.0 : min(_3710, 1.0));
        float _1121 = ((((1.0 - _1112) * (_1107 + 2.0)) * exp2(log2(isnan(1.0) ? _3688 : (isnan(_3688) ? 1.0 : min(_3688, 1.0))) * (_1107 + 1.0))) + _1112) * _995;
        _1129 = _962;
        _1130 = _961;
        _1131 = _960;
        _1132 = _972;
        _1133 = _971;
        _1134 = _970;
        _1135 = _982;
        _1136 = _981;
        _1137 = _980;
        _1138 = _995;
        _1139 = _994;
        _1140 = _993;
        _1141 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1037 : (isnan(_1037) ? 0.0 : max(_1037, 0.0)));
        _1142 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1079 : (isnan(_1079) ? 0.0 : max(_1079, 0.0)));
        _1143 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1121 : (isnan(_1121) ? 0.0 : max(_1121, 0.0)));
    }
    else
    {
        _1129 = _820;
        _1130 = _820;
        _1131 = _820;
        _1132 = _820;
        _1133 = _820;
        _1134 = _820;
        _1135 = _820;
        _1136 = _820;
        _1137 = _820;
        _1138 = _820;
        _1139 = _820;
        _1140 = _820;
        _1141 = 0.0;
        _1142 = 0.0;
        _1143 = 0.0;
    }
    float _1153 = (cbModelParam._m0[1u].x * (_1141 - _832)) + _832;
    float _1154 = (cbModelParam._m0[1u].x * (_1142 - _833)) + _833;
    float _1155 = (cbModelParam._m0[1u].x * (_1143 - _834)) + _834;
    float _1176 = fma(_1155, cbSceneParam._m0[89u].z, fma(_1154, cbSceneParam._m0[89u].y, _1153 * cbSceneParam._m0[89u].x));
    float _1179 = fma(_1155, cbSceneParam._m0[90u].z, fma(_1154, cbSceneParam._m0[90u].y, _1153 * cbSceneParam._m0[90u].x));
    float _1182 = fma(_1155, cbSceneParam._m0[91u].z, fma(_1154, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1153));
    float _1197 = _456 * 0.5;
    float _1198 = _457 * 0.5;
    float _1199 = _458 * 0.5;
    float _1200 = dot(vec4(_1197, _1198, _1199, 1.0), vec4(_1131, _1134, _1137, _1140));
    float _1203 = dot(vec4(_1197, _1198, _1199, 1.0), vec4(_1130, _1133, _1136, _1139));
    float _1206 = dot(vec4(_1197, _1198, _1199, 1.0), vec4(_1129, _1132, _1135, _1138));
    float _1240;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1213 = dot(vec4(_1197, _1198, _1199, 1.0), vec4(_819, _823, _826, _829));
        float _1217 = dot(vec4(_1197, _1198, _1199, 1.0), vec4(_821, _824, _827, _830));
        float _1221 = dot(vec4(_1197, _1198, _1199, 1.0), vec4(_822, _825, _828, _831));
        float _1228 = dot(vec4(cbModelParam._m0[39u]), vec4(_1197, _1198, _1199, 1.0));
        _1240 = dot(vec3(isnan(0.0) ? _1221 : (isnan(_1221) ? 0.0 : max(_1221, 0.0)), isnan(0.0) ? _1217 : (isnan(_1217) ? 0.0 : max(_1217, 0.0)), isnan(0.0) ? _1213 : (isnan(_1213) ? 0.0 : max(_1213, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1228) ? 0.0 : (isnan(0.0) ? _1228 : max(0.0, _1228))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1240 = 1.0;
    }
    float _1251;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1242 = dot(vec4(cbModelParam._m0[40u]), vec4(_1197, _1198, _1199, 1.0));
        _1251 = dot(vec3(isnan(0.0) ? _1200 : (isnan(_1200) ? 0.0 : max(_1200, 0.0)), isnan(0.0) ? _1203 : (isnan(_1203) ? 0.0 : max(_1203, 0.0)), isnan(0.0) ? _1206 : (isnan(_1206) ? 0.0 : max(_1206, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1242) ? 0.0 : (isnan(0.0) ? _1242 : max(0.0, _1242))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1251 = 1.0;
    }
    float _1255 = (_1251 * cbModelParam._m0[1u].x) + (_1240 * (1.0 - cbModelParam._m0[1u].x));
    float _1265 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _294);
    float _1266 = isnan(_1265) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1265 : min(cbModelParam._m0[25u].z, _1265));
    float _1348;
    float _1350;
    float _1352;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1315 = fma(_517, cbModelParam._m0[13u].z, fma(_513, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _509)) + cbModelParam._m0[13u].w;
        float _1319 = fma(_517, cbModelParam._m0[14u].z, fma(_513, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _509)) + cbModelParam._m0[14u].w;
        float _1323 = fma(_517, cbModelParam._m0[15u].z, fma(_513, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _509)) + cbModelParam._m0[15u].w;
        float _1326 = fma(_458, cbModelParam._m0[13u].z, fma(_457, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _456));
        float _1329 = fma(_458, cbModelParam._m0[14u].z, fma(_457, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _456));
        float _1332 = fma(_458, cbModelParam._m0[15u].z, fma(_457, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _456));
        float _1360;
        if (_1326 > 0.0)
        {
            _1360 = abs((1.0 - _1315) / _1326);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1326 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1315 + 1.0) / _1326);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1360 = frontier_phi_14_12_ladder;
        }
        float _1540;
        if (_1329 > 0.0)
        {
            _1540 = abs((1.0 - _1319) / _1329);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1329 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1319 + 1.0) / _1329);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1540 = frontier_phi_23_19_ladder;
        }
        float _1613;
        if (_1332 > 0.0)
        {
            _1613 = abs((1.0 - _1323) / _1332);
        }
        else
        {
            float frontier_phi_34_30_ladder;
            if (_1332 < 0.0)
            {
                frontier_phi_34_30_ladder = abs((_1323 + 1.0) / _1332);
            }
            else
            {
                frontier_phi_34_30_ladder = 5000.0;
            }
            _1613 = frontier_phi_34_30_ladder;
        }
        float _1615 = isnan(_1540) ? _1360 : (isnan(_1360) ? _1540 : min(_1360, _1540));
        float _1616 = isnan(_1613) ? _1615 : (isnan(_1615) ? _1613 : min(_1615, _1613));
        float _1620 = (_1616 * _1326) + _1315;
        float _1621 = (_1616 * _1329) + _1319;
        float _1622 = (_1616 * _1332) + _1323;
        float _1623 = _1616 * 9.9999997473787516355514526367188e-05;
        float _1625 = (-1.0) - _1623;
        float _1627 = _1623 + 1.0;
        float frontier_phi_13_34_ladder;
        float frontier_phi_13_34_ladder_1;
        float frontier_phi_13_34_ladder_2;
        if ((_1622 > _1627) || ((_1622 < _1625) || ((_1621 > _1627) || ((_1621 < _1625) || ((_1620 < _1625) || (_1620 > _1627))))))
        {
            frontier_phi_13_34_ladder = 0.0;
            frontier_phi_13_34_ladder_1 = 0.0;
            frontier_phi_13_34_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1698 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1622, cbModelParam._m0[9u].z, fma(_1621, cbModelParam._m0[9u].y, _1620 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1622, cbModelParam._m0[10u].z, fma(_1621, cbModelParam._m0[10u].y, _1620 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1622, cbModelParam._m0[11u].z, fma(_1621, cbModelParam._m0[11u].y, _1620 * cbModelParam._m0[11u].x))), _1266);
            frontier_phi_13_34_ladder = _1698.z * cbModelParam._m0[1u].y;
            frontier_phi_13_34_ladder_1 = _1698.y * cbModelParam._m0[1u].y;
            frontier_phi_13_34_ladder_2 = _1698.x * cbModelParam._m0[1u].y;
        }
        _1348 = frontier_phi_13_34_ladder_2;
        _1350 = frontier_phi_13_34_ladder_1;
        _1352 = frontier_phi_13_34_ladder;
    }
    else
    {
        vec4 _1336 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_456, _457, _458), _1266);
        _1348 = _1336.x * cbModelParam._m0[1u].y;
        _1350 = _1336.y * cbModelParam._m0[1u].y;
        _1352 = _1336.z * cbModelParam._m0[1u].y;
    }
    float _1356 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _294);
    float _1357 = isnan(_1356) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1356 : min(cbModelParam._m0[25u].w, _1356));
    float _1450;
    float _1452;
    float _1454;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1414 = fma(_517, cbModelParam._m0[21u].z, fma(_513, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _509)) + cbModelParam._m0[21u].w;
        float _1418 = fma(_517, cbModelParam._m0[22u].z, fma(_513, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _509)) + cbModelParam._m0[22u].w;
        float _1422 = fma(_517, cbModelParam._m0[23u].z, fma(_513, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _509)) + cbModelParam._m0[23u].w;
        float _1425 = fma(_458, cbModelParam._m0[21u].z, fma(_457, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _456));
        float _1428 = fma(_458, cbModelParam._m0[22u].z, fma(_457, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _456));
        float _1431 = fma(_458, cbModelParam._m0[23u].z, fma(_457, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _456));
        float _1545;
        if (_1425 > 0.0)
        {
            _1545 = abs((1.0 - _1414) / _1425);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1425 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1414 + 1.0) / _1425);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1545 = frontier_phi_25_21_ladder;
        }
        float _1640;
        if (_1428 > 0.0)
        {
            _1640 = abs((1.0 - _1418) / _1428);
        }
        else
        {
            float frontier_phi_36_32_ladder;
            if (_1428 < 0.0)
            {
                frontier_phi_36_32_ladder = abs((_1418 + 1.0) / _1428);
            }
            else
            {
                frontier_phi_36_32_ladder = 5000.0;
            }
            _1640 = frontier_phi_36_32_ladder;
        }
        float _1908;
        if (_1431 > 0.0)
        {
            _1908 = abs((1.0 - _1422) / _1431);
        }
        else
        {
            float frontier_phi_45_42_ladder;
            if (_1431 < 0.0)
            {
                frontier_phi_45_42_ladder = abs((_1422 + 1.0) / _1431);
            }
            else
            {
                frontier_phi_45_42_ladder = 5000.0;
            }
            _1908 = frontier_phi_45_42_ladder;
        }
        float _1910 = isnan(_1640) ? _1545 : (isnan(_1545) ? _1640 : min(_1545, _1640));
        float _1911 = isnan(_1908) ? _1910 : (isnan(_1910) ? _1908 : min(_1910, _1908));
        float _1915 = (_1911 * _1425) + _1414;
        float _1916 = (_1911 * _1428) + _1418;
        float _1917 = (_1911 * _1431) + _1422;
        float _1918 = _1911 * 9.9999997473787516355514526367188e-05;
        float _1919 = (-1.0) - _1918;
        float _1921 = _1918 + 1.0;
        float frontier_phi_22_45_ladder;
        float frontier_phi_22_45_ladder_1;
        float frontier_phi_22_45_ladder_2;
        if ((_1917 > _1921) || ((_1917 < _1919) || ((_1916 > _1921) || ((_1916 < _1919) || ((_1915 < _1919) || (_1915 > _1921))))))
        {
            frontier_phi_22_45_ladder = 0.0;
            frontier_phi_22_45_ladder_1 = 0.0;
            frontier_phi_22_45_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2035 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_1917, cbModelParam._m0[17u].z, fma(_1916, cbModelParam._m0[17u].y, _1915 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_1917, cbModelParam._m0[18u].z, fma(_1916, cbModelParam._m0[18u].y, _1915 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_1917, cbModelParam._m0[19u].z, fma(_1916, cbModelParam._m0[19u].y, _1915 * cbModelParam._m0[19u].x))), _1357);
            frontier_phi_22_45_ladder = _2035.z * cbModelParam._m0[1u].z;
            frontier_phi_22_45_ladder_1 = _2035.y * cbModelParam._m0[1u].z;
            frontier_phi_22_45_ladder_2 = _2035.x * cbModelParam._m0[1u].z;
        }
        _1450 = frontier_phi_22_45_ladder_2;
        _1452 = frontier_phi_22_45_ladder_1;
        _1454 = frontier_phi_22_45_ladder;
    }
    else
    {
        vec4 _1434 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_456, _457, _458), _1357);
        _1450 = _1434.x * cbModelParam._m0[1u].z;
        _1452 = _1434.y * cbModelParam._m0[1u].z;
        _1454 = _1434.z * cbModelParam._m0[1u].z;
    }
    float _1466 = ((((1.0 - _477) * ((_464 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_477 * _464)) * _448;
    float _1467 = _1466 * ((cbModelParam._m0[1u].w * (_1450 - _1348)) + _1348);
    float _1468 = _1466 * ((cbModelParam._m0[1u].w * (_1452 - _1350)) + _1350);
    float _1469 = _1466 * ((cbModelParam._m0[1u].w * (_1454 - _1352)) + _1352);
    float _1472 = fma(_1469, cbSceneParam._m0[89u].z, fma(_1468, cbSceneParam._m0[89u].y, _1467 * cbSceneParam._m0[89u].x));
    float _1475 = fma(_1469, cbSceneParam._m0[90u].z, fma(_1468, cbSceneParam._m0[90u].y, _1467 * cbSceneParam._m0[90u].x));
    float _1478 = fma(_1469, cbSceneParam._m0[91u].z, fma(_1468, cbSceneParam._m0[91u].y, _1467 * cbSceneParam._m0[91u].x));
    uvec4 _1488 = floatBitsToUint(cbInstanceData._m0[_422 + 5u]);
    uint _1490 = _1488.x * 14u;
    uint _1491 = _1490 + 13u;
    float _1498 = _448 + (-1.0);
    float _1503 = (cbLight._m0[_1491].x * _1498) + 1.0;
    float _1504 = (cbLight._m0[_1491].y * _1498) + 1.0;
    float _1505 = (cbLight._m0[_1491].z * _1498) + 1.0;
    float _1506 = (cbLight._m0[_1491].w * _1498) + 1.0;
    uint _1508 = _1490 + 4u;
    float _1520 = dot(vec3(cbLight._m0[_1490].xyz), vec3(_290, _291, _292));
    float _1523 = isnan(1.0) ? _1503 : (isnan(_1503) ? 1.0 : min(_1503, 1.0));
    uint _1524 = _1490 + 5u;
    float _1536 = dot(vec3(cbLight._m0[_1490 | 1u].xyz), vec3(_290, _291, _292));
    float _1539 = isnan(1.0) ? _1504 : (isnan(_1504) ? 1.0 : min(_1504, 1.0));
    float _1604;
    float _1605;
    float _1606;
    if (_295 == 0.0)
    {
        float _3846 = isnan(0.0) ? _1520 : (isnan(_1520) ? 0.0 : max(_1520, 0.0));
        float _3857 = isnan(0.0) ? _1536 : (isnan(_1536) ? 0.0 : max(_1536, 0.0));
        float _1558 = (isnan(1.0) ? _3846 : (isnan(_3846) ? 1.0 : min(_3846, 1.0))) * 0.3183098733425140380859375;
        float _1560 = (isnan(1.0) ? _3857 : (isnan(_3857) ? 1.0 : min(_3857, 1.0))) * 0.3183098733425140380859375;
        _1604 = ((cbLight._m0[_1524].x * _1539) * _1560) + ((cbLight._m0[_1508].x * _1523) * _1558);
        _1605 = ((_1539 * cbLight._m0[_1524].y) * _1560) + ((_1523 * cbLight._m0[_1508].y) * _1558);
        _1606 = ((_1539 * cbLight._m0[_1524].z) * _1560) + ((_1523 * cbLight._m0[_1508].z) * _1558);
    }
    else
    {
        float _1570 = _1520 + _295;
        float _1573 = (_295 * 2.0) + 1.0;
        float _1574 = (isnan(0.0) ? _1570 : (isnan(_1570) ? 0.0 : max(_1570, 0.0))) / _1573;
        float _1581 = _1536 + _295;
        float _1583 = (isnan(0.0) ? _1581 : (isnan(_1581) ? 0.0 : max(_1581, 0.0))) / _1573;
        _1604 = (((_1583 * cbLight._m0[_1524].x) * _1539) + ((_1574 * cbLight._m0[_1508].x) * _1523)) * 0.3183098733425140380859375;
        _1605 = (((_1583 * cbLight._m0[_1524].y) * _1539) + ((_1574 * cbLight._m0[_1508].y) * _1523)) * 0.3183098733425140380859375;
        _1606 = (((_1583 * cbLight._m0[_1524].z) * _1539) + ((_1574 * cbLight._m0[_1508].z) * _1523)) * 0.3183098733425140380859375;
    }
    uvec4 _1610 = floatBitsToUint(cbLight._m0[_1490 + 12u]);
    bool _1612 = _1610.x == 0u;
    float _1645;
    float _1647;
    float _1649;
    if (_1612)
    {
        _1645 = _1604;
        _1647 = _1605;
        _1649 = _1606;
    }
    else
    {
        uint _1653 = _1490 + 6u;
        float _1669 = (dot(vec3(cbLight._m0[_1490 + 2u].xyz), vec3(_290, _291, _292)) * 0.5) + 0.5;
        float _1670 = _1669 * _1669;
        float _3878 = isnan(0.0) ? _1670 : (isnan(_1670) ? 0.0 : max(_1670, 0.0));
        float _1671 = isnan(1.0) ? _3878 : (isnan(_3878) ? 1.0 : min(_3878, 1.0));
        float _1672 = isnan(1.0) ? _1505 : (isnan(_1505) ? 1.0 : min(_1505, 1.0));
        _1645 = (((cbLight._m0[_1653].x * 0.3183098733425140380859375) * _1671) * _1672) + _1604;
        _1647 = (((cbLight._m0[_1653].y * 0.3183098733425140380859375) * _1671) * _1672) + _1605;
        _1649 = (((cbLight._m0[_1653].z * 0.3183098733425140380859375) * _1671) * _1672) + _1606;
    }
    bool _1652 = _1610.y == 0u;
    float _1707;
    float _1709;
    float _1711;
    if (_1652)
    {
        _1707 = _1645;
        _1709 = _1647;
        _1711 = _1649;
    }
    else
    {
        uint _1879 = _1490 + 7u;
        float _1895 = (dot(vec3(cbLight._m0[_1490 + 3u].xyz), vec3(_290, _291, _292)) * 0.5) + 0.5;
        float _1896 = _1895 * _1895;
        float _3894 = isnan(0.0) ? _1896 : (isnan(_1896) ? 0.0 : max(_1896, 0.0));
        float _1897 = isnan(1.0) ? _3894 : (isnan(_3894) ? 1.0 : min(_3894, 1.0));
        float _1898 = isnan(1.0) ? _1506 : (isnan(_1506) ? 1.0 : min(_1506, 1.0));
        _1707 = (((cbLight._m0[_1879].x * 0.3183098733425140380859375) * _1897) * _1898) + _1645;
        _1709 = (((cbLight._m0[_1879].y * 0.3183098733425140380859375) * _1897) * _1898) + _1647;
        _1711 = (((cbLight._m0[_1879].z * 0.3183098733425140380859375) * _1897) * _1898) + _1649;
    }
    uint _1716 = _1490 + 8u;
    float _1732 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1490].w)) * _294) * 0.949999988079071044921875);
    float _1733 = _1732 * _1732;
    float _1734 = cbLight._m0[_1490].x + _373;
    float _1735 = cbLight._m0[_1490].y + _374;
    float _1736 = cbLight._m0[_1490].z + _375;
    float _1740 = inversesqrt(dot(vec3(_1734, _1735, _1736), vec3(_1734, _1735, _1736)));
    float _1741 = _1740 * _1734;
    float _1742 = _1740 * _1735;
    float _1743 = _1740 * _1736;
    float _1744 = dot(vec3(_290, _291, _292), vec3(cbLight._m0[_1490].xyz));
    float _3910 = isnan(0.0) ? _1744 : (isnan(_1744) ? 0.0 : max(_1744, 0.0));
    float _1747 = isnan(1.0) ? _3910 : (isnan(_3910) ? 1.0 : min(_3910, 1.0));
    float _3921 = isnan(0.0) ? _449 : (isnan(_449) ? 0.0 : max(_449, 0.0));
    float _1748 = isnan(1.0) ? _3921 : (isnan(_3921) ? 1.0 : min(_3921, 1.0));
    float _1749 = dot(vec3(_290, _291, _292), vec3(_1741, _1742, _1743));
    float _3932 = isnan(0.0) ? _1749 : (isnan(_1749) ? 0.0 : max(_1749, 0.0));
    float _1752 = isnan(1.0) ? _3932 : (isnan(_3932) ? 1.0 : min(_3932, 1.0));
    float _1753 = dot(vec3(cbLight._m0[_1490].xyz), vec3(_1741, _1742, _1743));
    float _3943 = isnan(0.0) ? _1753 : (isnan(_1753) ? 0.0 : max(_1753, 0.0));
    float _1757 = _1733 * _1733;
    float _1761 = ((_1752 * _1752) * (_1757 + (-1.0))) + 1.0;
    float _1772 = (exp2(log2(1.0 - (isnan(1.0) ? _3943 : (isnan(_3943) ? 1.0 : min(_3943, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1773 = 1.0 - _1733;
    float _1784 = (0.5 / (((_1748 * ((_1747 * _1773) + _1733)) + 9.9999999392252902907785028219223e-09) + (((_1748 * _1773) + _1733) * _1747))) * _1747;
    float _3954 = isnan(0.0) ? _1784 : (isnan(_1784) ? 0.0 : max(_1784, 0.0));
    float _1786 = (isnan(1.0) ? _3954 : (isnan(_3954) ? 1.0 : min(_3954, 1.0))) * (_1757 / ((_1761 * _1761) * 3.141590118408203125));
    float _1787 = isnan(1.0) ? _1503 : (isnan(_1503) ? 1.0 : min(_1503, 1.0));
    uint _1797 = _1490 | 1u;
    uint _1801 = _1490 + 9u;
    float _1815 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1797].w)) * _294) * 0.949999988079071044921875);
    float _1816 = _1815 * _1815;
    float _1817 = cbLight._m0[_1797].x + _373;
    float _1818 = cbLight._m0[_1797].y + _374;
    float _1819 = cbLight._m0[_1797].z + _375;
    float _1823 = inversesqrt(dot(vec3(_1817, _1818, _1819), vec3(_1817, _1818, _1819)));
    float _1824 = _1823 * _1817;
    float _1825 = _1823 * _1818;
    float _1826 = _1823 * _1819;
    float _1827 = dot(vec3(_290, _291, _292), vec3(cbLight._m0[_1797].xyz));
    float _3970 = isnan(0.0) ? _1827 : (isnan(_1827) ? 0.0 : max(_1827, 0.0));
    float _1830 = isnan(1.0) ? _3970 : (isnan(_3970) ? 1.0 : min(_3970, 1.0));
    float _1831 = dot(vec3(_290, _291, _292), vec3(_1824, _1825, _1826));
    float _3981 = isnan(0.0) ? _1831 : (isnan(_1831) ? 0.0 : max(_1831, 0.0));
    float _1834 = isnan(1.0) ? _3981 : (isnan(_3981) ? 1.0 : min(_3981, 1.0));
    float _1835 = dot(vec3(cbLight._m0[_1797].xyz), vec3(_1824, _1825, _1826));
    float _3992 = isnan(0.0) ? _1835 : (isnan(_1835) ? 0.0 : max(_1835, 0.0));
    float _1839 = _1816 * _1816;
    float _1843 = ((_1834 * _1834) * (_1839 + (-1.0))) + 1.0;
    float _1852 = (exp2(log2(1.0 - (isnan(1.0) ? _3992 : (isnan(_3992) ? 1.0 : min(_3992, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1853 = 1.0 - _1816;
    float _1863 = (0.5 / (((_1748 * ((_1830 * _1853) + _1816)) + 9.9999999392252902907785028219223e-09) + (((_1748 * _1853) + _1816) * _1830))) * _1830;
    float _4003 = isnan(0.0) ? _1863 : (isnan(_1863) ? 0.0 : max(_1863, 0.0));
    float _1865 = (isnan(1.0) ? _4003 : (isnan(_4003) ? 1.0 : min(_4003, 1.0))) * (_1839 / ((_1843 * _1843) * 3.141590118408203125));
    float _1866 = isnan(1.0) ? _1504 : (isnan(_1504) ? 1.0 : min(_1504, 1.0));
    float _1876 = (((_1852 * cbLight._m0[_1801].x) * _1865) * _1866) + (((_1772 * cbLight._m0[_1716].x) * _1786) * _1787);
    float _1877 = (((_1852 * cbLight._m0[_1801].y) * _1865) * _1866) + (((_1772 * cbLight._m0[_1716].y) * _1786) * _1787);
    float _1878 = (((_1852 * cbLight._m0[_1801].z) * _1865) * _1866) + (((_1772 * cbLight._m0[_1716].z) * _1786) * _1787);
    float _1934;
    float _1936;
    float _1938;
    if (_1612)
    {
        _1934 = _1876;
        _1936 = _1877;
        _1938 = _1878;
    }
    else
    {
        uint _1940 = _1490 + 2u;
        uint _1944 = _1490 + 10u;
        float _1958 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1940].w)) * _294) * 0.949999988079071044921875);
        float _1959 = _1958 * _1958;
        float _1960 = cbLight._m0[_1940].x + _373;
        float _1961 = cbLight._m0[_1940].y + _374;
        float _1962 = cbLight._m0[_1940].z + _375;
        float _1966 = inversesqrt(dot(vec3(_1960, _1961, _1962), vec3(_1960, _1961, _1962)));
        float _1967 = _1966 * _1960;
        float _1968 = _1966 * _1961;
        float _1969 = _1966 * _1962;
        float _1970 = dot(vec3(_290, _291, _292), vec3(cbLight._m0[_1940].xyz));
        float _4019 = isnan(0.0) ? _1970 : (isnan(_1970) ? 0.0 : max(_1970, 0.0));
        float _1973 = isnan(1.0) ? _4019 : (isnan(_4019) ? 1.0 : min(_4019, 1.0));
        float _1974 = dot(vec3(_290, _291, _292), vec3(_1967, _1968, _1969));
        float _4030 = isnan(0.0) ? _1974 : (isnan(_1974) ? 0.0 : max(_1974, 0.0));
        float _1977 = isnan(1.0) ? _4030 : (isnan(_4030) ? 1.0 : min(_4030, 1.0));
        float _1978 = dot(vec3(cbLight._m0[_1940].xyz), vec3(_1967, _1968, _1969));
        float _4041 = isnan(0.0) ? _1978 : (isnan(_1978) ? 0.0 : max(_1978, 0.0));
        float _1982 = _1959 * _1959;
        float _1986 = ((_1977 * _1977) * (_1982 + (-1.0))) + 1.0;
        float _1995 = (exp2(log2(1.0 - (isnan(1.0) ? _4041 : (isnan(_4041) ? 1.0 : min(_4041, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1996 = 1.0 - _1959;
        float _2006 = (0.5 / (((_1748 * ((_1973 * _1996) + _1959)) + 9.9999999392252902907785028219223e-09) + (((_1748 * _1996) + _1959) * _1973))) * _1973;
        float _4052 = isnan(0.0) ? _2006 : (isnan(_2006) ? 0.0 : max(_2006, 0.0));
        float _2008 = (isnan(1.0) ? _4052 : (isnan(_4052) ? 1.0 : min(_4052, 1.0))) * (_1982 / ((_1986 * _1986) * 3.141590118408203125));
        float _2009 = isnan(1.0) ? _1505 : (isnan(_1505) ? 1.0 : min(_1505, 1.0));
        _1934 = (((_1995 * cbLight._m0[_1944].x) * _2008) * _2009) + _1876;
        _1936 = (((_1995 * cbLight._m0[_1944].y) * _2008) * _2009) + _1877;
        _1938 = (((_1995 * cbLight._m0[_1944].z) * _2008) * _2009) + _1878;
    }
    float _2040;
    float _2042;
    float _2044;
    if (_1652)
    {
        _2040 = _1934;
        _2042 = _1936;
        _2044 = _1938;
    }
    else
    {
        uint _2051 = _1490 + 3u;
        uint _2055 = _1490 + 11u;
        float _2069 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2051].w)) * _294) * 0.949999988079071044921875);
        float _2070 = _2069 * _2069;
        float _2071 = cbLight._m0[_2051].x + _373;
        float _2072 = cbLight._m0[_2051].y + _374;
        float _2073 = cbLight._m0[_2051].z + _375;
        float _2077 = inversesqrt(dot(vec3(_2071, _2072, _2073), vec3(_2071, _2072, _2073)));
        float _2078 = _2077 * _2071;
        float _2079 = _2077 * _2072;
        float _2080 = _2077 * _2073;
        float _2081 = dot(vec3(_290, _291, _292), vec3(cbLight._m0[_2051].xyz));
        float _4068 = isnan(0.0) ? _2081 : (isnan(_2081) ? 0.0 : max(_2081, 0.0));
        float _2084 = isnan(1.0) ? _4068 : (isnan(_4068) ? 1.0 : min(_4068, 1.0));
        float _2085 = dot(vec3(_290, _291, _292), vec3(_2078, _2079, _2080));
        float _4079 = isnan(0.0) ? _2085 : (isnan(_2085) ? 0.0 : max(_2085, 0.0));
        float _2088 = isnan(1.0) ? _4079 : (isnan(_4079) ? 1.0 : min(_4079, 1.0));
        float _2089 = dot(vec3(cbLight._m0[_2051].xyz), vec3(_2078, _2079, _2080));
        float _4090 = isnan(0.0) ? _2089 : (isnan(_2089) ? 0.0 : max(_2089, 0.0));
        float _2093 = _2070 * _2070;
        float _2097 = ((_2088 * _2088) * (_2093 + (-1.0))) + 1.0;
        float _2106 = (exp2(log2(1.0 - (isnan(1.0) ? _4090 : (isnan(_4090) ? 1.0 : min(_4090, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2107 = 1.0 - _2070;
        float _2117 = (0.5 / (((_1748 * ((_2084 * _2107) + _2070)) + 9.9999999392252902907785028219223e-09) + (((_1748 * _2107) + _2070) * _2084))) * _2084;
        float _4101 = isnan(0.0) ? _2117 : (isnan(_2117) ? 0.0 : max(_2117, 0.0));
        float _2119 = (isnan(1.0) ? _4101 : (isnan(_4101) ? 1.0 : min(_4101, 1.0))) * (_2093 / ((_2097 * _2097) * 3.141590118408203125));
        float _2120 = isnan(1.0) ? _1506 : (isnan(_1506) ? 1.0 : min(_1506, 1.0));
        _2040 = (((_2106 * cbLight._m0[_2055].x) * _2119) * _2120) + _1934;
        _2042 = (((_2106 * cbLight._m0[_2055].y) * _2119) * _2120) + _1936;
        _2044 = (((_2106 * cbLight._m0[_2055].z) * _2119) * _2120) + _1938;
    }
    float _2229;
    float _2231;
    float _2233;
    float _2235;
    float _2237;
    float _2239;
    if (_1488.y == 0u)
    {
        float _2169 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2170 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2169;
        float _2171 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2169;
        float _2172 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2169;
        uvec4 _2184 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2185 = _2184.x;
        uint _2196 = uint((float(_2184.y) * floor(float(uint(cbSceneParam._m0[85u].y * _382) / _2185))) + floor(float(uint(cbSceneParam._m0[85u].x * _381) / _2185)));
        float _2206 = (log2(_2172 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2207 = isnan(0.0) ? _2206 : (isnan(_2206) ? 0.0 : max(_2206, 0.0));
        uint _2210 = uint(isnan(14.0) ? _2207 : (isnan(_2207) ? 14.0 : min(_2207, 14.0)));
        uvec4 _2215 = texelFetch(g_lightClusterGridBuffer, int(((_2210 << 2u) + (_2196 << 6u)) >> 2u));
        uint _2216 = _2215.x;
        uint _2217 = _2184.z;
        float _2242;
        float _2244;
        float _2246;
        float _2248;
        float _2250;
        float _2252;
        if (((((1u << ((_2217 >> 4u) & 15u)) + 4294967295u) & _2216) == 0u) || ((_2217 & 240u) == 0u))
        {
            _2242 = 0.0;
            _2244 = 0.0;
            _2246 = 0.0;
            _2248 = 0.0;
            _2250 = 0.0;
            _2252 = 0.0;
        }
        else
        {
            float _2243;
            float _2245;
            float _2247;
            float _2249;
            float _2251;
            float _2253;
            float _2423 = 0.0;
            float _2424 = 0.0;
            float _2425 = 0.0;
            float _2426 = 0.0;
            float _2427 = 0.0;
            float _2428 = 0.0;
            uint _2429 = 0u;
            uint _2438;
            bool _2439;
            for (;;)
            {
                _2438 = texelFetch(g_lightClassification, int((((_2210 << 5u) + (_2196 << 9u)) + (_2429 << 2u)) >> 2u)).x;
                _2439 = _2438 == 0u;
                float frontier_phi_64_pred;
                float frontier_phi_64_pred_1;
                float frontier_phi_64_pred_2;
                float frontier_phi_64_pred_3;
                float frontier_phi_64_pred_4;
                float frontier_phi_64_pred_5;
                if (_2439)
                {
                    frontier_phi_64_pred = _2426;
                    frontier_phi_64_pred_1 = _2428;
                    frontier_phi_64_pred_2 = _2427;
                    frontier_phi_64_pred_3 = _2425;
                    frontier_phi_64_pred_4 = _2424;
                    frontier_phi_64_pred_5 = _2423;
                }
                else
                {
                    float _2600;
                    float _2601;
                    float _2602;
                    float _2603;
                    float _2604;
                    float _2605;
                    uint _2606;
                    _2600 = _2423;
                    _2601 = _2424;
                    _2602 = _2425;
                    _2603 = _2426;
                    _2604 = _2427;
                    _2605 = _2428;
                    _2606 = _2438;
                    float _2531;
                    float _2532;
                    float _2533;
                    float _2534;
                    float _2535;
                    float _2536;
                    for (;;)
                    {
                        uint _2610 = uint(findLSB(_2606)) + (_2429 << 5u);
                        uint _2607 = (_2606 + 4294967295u) & _2606;
                        uint _2612 = _2610 * 48u;
                        vec4 _2626 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2612)).x, texelFetch(g_PointLightRenderingBuffer, int(_2612 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2612 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2612 + 3u)).x));
                        uint _2632 = (_2610 * 48u) + 4u;
                        vec4 _2645 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2632)).x, texelFetch(g_PointLightRenderingBuffer, int(_2632 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2632 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2632 + 3u)).x));
                        float _2646 = _2645.x;
                        float _2647 = _2645.y;
                        float _2648 = _2645.z;
                        uint _2651 = (_2610 * 48u) + 8u;
                        vec3 _2662 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2651)).x, texelFetch(g_PointLightRenderingBuffer, int(_2651 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2651 + 2u)).x));
                        uint _2667 = (_2610 * 48u) + 12u;
                        vec2 _2675 = uintBitsToFloat(uvec2(texelFetch(g_PointLightRenderingBuffer, int(_2667)).x, texelFetch(g_PointLightRenderingBuffer, int(_2667 + 1u)).x));
                        float _2681 = inversesqrt(dot(vec3(_2170, _2171, _2172), vec3(_2170, _2171, _2172)));
                        float _2682 = _2681 * _2170;
                        float _2683 = _2681 * _2171;
                        float _2684 = _2681 * _2172;
                        float _2685 = _2626.x - _2170;
                        float _2686 = _2626.y - _2171;
                        float _2687 = _2626.z - _2172;
                        float _2688 = dot(vec3(_2685, _2686, _2687), vec3(_2685, _2686, _2687));
                        float _2691 = inversesqrt(_2688);
                        float _2692 = _2691 * _2685;
                        float _2693 = _2691 * _2686;
                        float _2694 = _2691 * _2687;
                        float _2695 = dot(vec3(_403, _406, _409), vec3(_2692, _2693, _2694));
                        float _2700 = 1.0 - (_2688 * _2626.w);
                        float _4127 = isnan(0.0) ? _2700 : (isnan(_2700) ? 0.0 : max(_2700, 0.0));
                        float _2701 = isnan(1.0) ? _4127 : (isnan(_4127) ? 1.0 : min(_4127, 1.0));
                        float _2702 = sqrt(_2688) * _2645.w;
                        float _2705 = 1.39999997615814208984375 / (_2702 + 1.39999997615814208984375);
                        float _2706 = _2705 * _2705;
                        float _2707 = 1.0 - _2706;
                        float _2709 = (_2707 * _2707) * _295;
                        float _2712 = ((_2707 * _2695) + _2706) + _2709;
                        float _2717 = _2702 * _2702;
                        float _2722 = ((isnan(0.0) ? _2712 : (isnan(_2712) ? 0.0 : max(_2712, 0.0))) * _2701) / (((_2709 * 2.0) + 1.0) * ((_2717 * 0.699999988079071044921875) + 1.0));
                        float _2726 = dot(vec3(_2692, _2693, _2694), vec3(_2682, _2683, _2684));
                        float _4143 = isnan(0.0) ? _2726 : (isnan(_2726) ? 0.0 : max(_2726, 0.0));
                        float _2733 = dot(vec3((-0.0) - _2682, (-0.0) - _2683, (-0.0) - _2684), vec3(_403, _406, _409)) + 1.0;
                        float _2735 = (isnan(0.0) ? _2733 : (isnan(_2733) ? 0.0 : max(_2733, 0.0))) * 0.5;
                        float _2742 = ((_2735 * _2735) * _2675.x) * exp2((_2675.y * 32.0) * log2(isnan(1.0) ? _4143 : (isnan(_4143) ? 1.0 : min(_4143, 1.0))));
                        float _2744 = _295 / (_295 + 1.0);
                        float _2760 = (-0.0) - _2170;
                        float _2761 = (-0.0) - _2171;
                        float _2762 = (-0.0) - _2172;
                        float _2766 = inversesqrt(dot(vec3(_2760, _2761, _2762), vec3(_2760, _2761, _2762)));
                        float _2767 = _2766 * _2760;
                        float _2768 = _2766 * _2761;
                        float _2769 = _2766 * _2762;
                        float _2777 = exp2(log2(1.0 / ((_2717 * 3.5) + 5.0)) * 0.25);
                        float _2778 = 1.0 - _464;
                        float _2785 = sqrt(1.0 - ((1.0 - (_2778 * _2778)) * (1.0 - (_2777 * _2777))));
                        float _2786 = _2785 * _2785;
                        float _2787 = _2786 * _2786;
                        float _2788 = _2767 + _2692;
                        float _2789 = _2768 + _2693;
                        float _2790 = _2769 + _2694;
                        float _2794 = inversesqrt(dot(vec3(_2788, _2789, _2790), vec3(_2788, _2789, _2790)));
                        float _2798 = dot(vec3(_403, _406, _409), vec3(_2767, _2768, _2769));
                        float _4159 = isnan(0.0) ? _2798 : (isnan(_2798) ? 0.0 : max(_2798, 0.0));
                        float _2801 = isnan(1.0) ? _4159 : (isnan(_4159) ? 1.0 : min(_4159, 1.0));
                        float _2802 = dot(vec3(_403, _406, _409), vec3(_2794 * _2788, _2794 * _2789, _2794 * _2790));
                        float _4170 = isnan(0.0) ? _2802 : (isnan(_2802) ? 0.0 : max(_2802, 0.0));
                        float _2805 = isnan(1.0) ? _4170 : (isnan(_4170) ? 1.0 : min(_4170, 1.0));
                        float _2809 = ((_2805 * _2805) * (_2787 + (-1.0))) + 1.0;
                        float _2810 = _2705 * _2786;
                        float _2811 = _2810 * _2810;
                        float _2814 = ((1.0 - _2811) * _2695) + _2811;
                        float _4181 = isnan(0.0) ? _2814 : (isnan(_2814) ? 0.0 : max(_2814, 0.0));
                        float _2815 = isnan(1.0) ? _4181 : (isnan(_4181) ? 1.0 : min(_4181, 1.0));
                        float _2816 = 1.0 - _2786;
                        float _2826 = (0.5 / (((_2815 * ((_2801 * _2816) + _2786)) + 9.9999999392252902907785028219223e-09) + (((_2815 * _2816) + _2786) * _2801))) * _2815;
                        float _4192 = isnan(0.0) ? _2826 : (isnan(_2826) ? 0.0 : max(_2826, 0.0));
                        float _2837 = (((_2787 * 3.1415927410125732421875) * (isnan(1.0) ? _4192 : (isnan(_4192) ? 1.0 : min(_4192, 1.0)))) / ((_2809 * _2809) * ((_2717 * 2.1991131305694580078125) + 3.141590118408203125))) * _2701;
                        _2534 = (((((_2646 * 0.3183098733425140380859375) * _2744) * _2742) + _2646) * _2722) + _2603;
                        _2535 = (((((_2647 * 0.3183098733425140380859375) * _2744) * _2742) + _2647) * _2722) + _2604;
                        _2536 = (((((_2648 * 0.3183098733425140380859375) * _2744) * _2742) + _2648) * _2722) + _2605;
                        _2531 = (_2837 * _2662.x) + _2600;
                        _2532 = (_2837 * _2662.y) + _2601;
                        _2533 = (_2837 * _2662.z) + _2602;
                        if (_2607 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2600 = _2531;
                            _2601 = _2532;
                            _2602 = _2533;
                            _2603 = _2534;
                            _2604 = _2535;
                            _2605 = _2536;
                            _2606 = _2607;
                        }
                    }
                    frontier_phi_64_pred = _2534;
                    frontier_phi_64_pred_1 = _2536;
                    frontier_phi_64_pred_2 = _2535;
                    frontier_phi_64_pred_3 = _2533;
                    frontier_phi_64_pred_4 = _2532;
                    frontier_phi_64_pred_5 = _2531;
                }
                _2249 = frontier_phi_64_pred;
                _2253 = frontier_phi_64_pred_1;
                _2251 = frontier_phi_64_pred_2;
                _2247 = frontier_phi_64_pred_3;
                _2245 = frontier_phi_64_pred_4;
                _2243 = frontier_phi_64_pred_5;
                uint _2430 = _2429 + 1u;
                if (_2430 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2423 = _2243;
                    _2424 = _2245;
                    _2425 = _2247;
                    _2426 = _2249;
                    _2427 = _2251;
                    _2428 = _2253;
                    _2429 = _2430;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2242 = _2243;
            _2244 = _2245;
            _2246 = _2247;
            _2248 = _2249;
            _2250 = _2251;
            _2252 = _2253;
        }
        uvec4 _2256 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2257 = _2256.z;
        uint _2259 = (_2257 >> 8u) & 15u;
        float _2391;
        float _2393;
        float _2395;
        float _2397;
        float _2399;
        float _2401;
        if (((4294967295u << _2259) & _2216) == 0u)
        {
            _2391 = _2242;
            _2393 = _2244;
            _2395 = _2246;
            _2397 = _2248;
            _2399 = _2250;
            _2401 = _2252;
        }
        else
        {
            float _2416 = inversesqrt(dot(vec3(_2170, _2171, _2172), vec3(_2170, _2171, _2172)));
            float _2417 = _2416 * _2170;
            float _2418 = _2416 * _2171;
            float _2419 = _2416 * _2172;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2259 < ((_2257 >> 12u) & 15u))
            {
                float _2392;
                float _2394;
                float _2396;
                float _2398;
                float _2400;
                float _2402;
                float _2583 = _2242;
                float _2584 = _2244;
                float _2585 = _2246;
                float _2586 = _2248;
                float _2587 = _2250;
                float _2588 = _2252;
                uint _2589 = _2259;
                uint _2598;
                bool _2599;
                for (;;)
                {
                    _2598 = texelFetch(g_lightClassification, int((((_2210 << 5u) + (_2196 << 9u)) + (_2589 << 2u)) >> 2u)).x;
                    _2599 = _2598 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_2599)
                    {
                        frontier_phi_72_pred = _2588;
                        frontier_phi_72_pred_1 = _2587;
                        frontier_phi_72_pred_2 = _2586;
                        frontier_phi_72_pred_3 = _2585;
                        frontier_phi_72_pred_4 = _2584;
                        frontier_phi_72_pred_5 = _2583;
                    }
                    else
                    {
                        float _2880;
                        float _2881;
                        float _2882;
                        float _2883;
                        float _2884;
                        float _2885;
                        float _3224;
                        float _3225;
                        float _3226;
                        float _3227;
                        float _3228;
                        float _3229;
                        float _2893 = _2583;
                        float _2894 = _2584;
                        float _2895 = _2585;
                        float _2896 = _2586;
                        float _2897 = _2587;
                        float _2898 = _2588;
                        uint _2899 = _2598;
                        uint _2900;
                        vec4 _2925;
                        float _2926;
                        vec4 _2941;
                        float _2942;
                        float _2943;
                        float _2944;
                        vec3 _2956;
                        vec2 _2965;
                        vec4 _2981;
                        vec4 _2997;
                        float _3044;
                        bool _3045;
                        for (;;)
                        {
                            uint _2910 = ((_2589 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2899));
                            _2900 = (_2899 + 4294967295u) & _2899;
                            uint _2912 = _2910 * 40u;
                            _2925 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2912)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2912 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2912 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2912 + 3u)).x));
                            _2926 = _2925.w;
                            uint _2928 = (_2910 * 40u) + 4u;
                            _2941 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2928)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2928 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2928 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2928 + 3u)).x));
                            _2942 = _2941.x;
                            _2943 = _2941.y;
                            _2944 = _2941.z;
                            uint _2946 = (_2910 * 40u) + 8u;
                            _2956 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2946)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2946 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2946 + 2u)).x));
                            uint _2958 = (_2910 * 40u) + 12u;
                            _2965 = uintBitsToFloat(uvec2(texelFetch(g_SpotLightRenderingBuffer, int(_2958)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2958 + 1u)).x));
                            uint _2968 = (_2910 * 40u) + 16u;
                            _2981 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2968)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2968 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2968 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2968 + 3u)).x));
                            uint _2984 = (_2910 * 40u) + 20u;
                            _2997 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2984)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2984 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2984 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2984 + 3u)).x));
                            uint _3000 = (_2910 * 40u) + 24u;
                            vec4 _3013 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3000)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3000 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3000 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3000 + 3u)).x));
                            uint _3019 = (_2910 * 40u) + 28u;
                            vec4 _3032 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3019)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3019 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3019 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3019 + 3u)).x));
                            _3044 = fma(_2172, _3032.z, fma(_2171, _3032.y, _3032.x * _2170)) + _3032.w;
                            _3045 = !((fma(_2172, _3013.z, fma(_2171, _3013.y, _3013.x * _2170)) + _3013.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3045)
                            {
                                float _3071 = _2925.x - _2170;
                                float _3072 = _2925.y - _2171;
                                float _3073 = _2925.z - _2172;
                                float _3074 = dot(vec3(_3071, _3072, _3073), vec3(_3071, _3072, _3073));
                                float _3077 = inversesqrt(_3074);
                                float _3078 = _3077 * _3071;
                                float _3079 = _3077 * _3072;
                                float _3080 = _3077 * _3073;
                                float _3084 = 1.0 - (_3074 / (_2926 * _2926));
                                float _4203 = isnan(0.0) ? _3084 : (isnan(_3084) ? 0.0 : max(_3084, 0.0));
                                float _3085 = isnan(1.0) ? _4203 : (isnan(_4203) ? 1.0 : min(_4203, 1.0));
                                float _3089 = sqrt(_3074) * _2941.w;
                                float _3091 = 1.39999997615814208984375 / (_3089 + 1.39999997615814208984375);
                                float _3092 = _3091 * _3091;
                                float _3093 = 1.0 - _3092;
                                float _3095 = (_3093 * _3093) * _295;
                                float _3098 = ((_3093 * dot(vec3(_3078, _3079, _3080), vec3(_403, _406, _409))) + _3092) + _3095;
                                float _3103 = _3089 * _3089;
                                float _3108 = (fma(_2172, _2981.z, fma(_2171, _2981.y, _2981.x * _2170)) + _2981.w) / _3044;
                                float _3109 = (fma(_2172, _2997.z, fma(_2171, _2997.y, _2997.x * _2170)) + _2997.w) / _3044;
                                float _3113 = 1.0 - dot(vec2(_3108, _3109), vec2(_3108, _3109));
                                float _4219 = isnan(0.0) ? _3113 : (isnan(_3113) ? 0.0 : max(_3113, 0.0));
                                float _3114 = isnan(1.0) ? _4219 : (isnan(_4219) ? 1.0 : min(_4219, 1.0));
                                float _3115 = _3114 * (((isnan(0.0) ? _3098 : (isnan(_3098) ? 0.0 : max(_3098, 0.0))) * _3085) / (((_3095 * 2.0) + 1.0) * ((_3103 * 0.699999988079071044921875) + 1.0)));
                                float _3116 = (-0.0) - _2417;
                                float _3117 = (-0.0) - _2418;
                                float _3118 = (-0.0) - _2419;
                                float _3119 = dot(vec3(_3078, _3079, _3080), vec3(_2417, _2418, _2419));
                                float _4230 = isnan(0.0) ? _3119 : (isnan(_3119) ? 0.0 : max(_3119, 0.0));
                                float _3126 = dot(vec3(_3116, _3117, _3118), vec3(_403, _406, _409)) + 1.0;
                                float _3128 = (isnan(0.0) ? _3126 : (isnan(_3126) ? 0.0 : max(_3126, 0.0))) * 0.5;
                                float _3135 = ((_3128 * _3128) * _2965.x) * exp2((_2965.y * 32.0) * log2(isnan(1.0) ? _4230 : (isnan(_4230) ? 1.0 : min(_4230, 1.0))));
                                float _3137 = _295 / (_295 + 1.0);
                                float _3158 = exp2(log2(1.0 / ((_3103 * 3.5) + 5.0)) * 0.25);
                                float _3159 = 1.0 - _464;
                                float _3166 = sqrt(1.0 - ((1.0 - (_3159 * _3159)) * (1.0 - (_3158 * _3158))));
                                float _3167 = _3166 * _3166;
                                float _3168 = _3167 * _3167;
                                float _3169 = _3078 - _2417;
                                float _3170 = _3079 - _2418;
                                float _3171 = _3080 - _2419;
                                float _3175 = inversesqrt(dot(vec3(_3169, _3170, _3171), vec3(_3169, _3170, _3171)));
                                float _3179 = dot(vec3(_403, _406, _409), vec3(_3116, _3117, _3118));
                                float _4246 = isnan(0.0) ? _3179 : (isnan(_3179) ? 0.0 : max(_3179, 0.0));
                                float _3182 = isnan(1.0) ? _4246 : (isnan(_4246) ? 1.0 : min(_4246, 1.0));
                                float _3183 = dot(vec3(_403, _406, _409), vec3(_3175 * _3169, _3175 * _3170, _3175 * _3171));
                                float _4257 = isnan(0.0) ? _3183 : (isnan(_3183) ? 0.0 : max(_3183, 0.0));
                                float _3186 = isnan(1.0) ? _4257 : (isnan(_4257) ? 1.0 : min(_4257, 1.0));
                                float _3190 = ((_3186 * _3186) * (_3168 + (-1.0))) + 1.0;
                                float _3191 = _3091 * _3167;
                                float _3192 = _3191 * _3191;
                                float _3198 = ((1.0 - _3192) * dot(vec3(_403, _406, _409), vec3(_3078, _3079, _3080))) + _3192;
                                float _4268 = isnan(0.0) ? _3198 : (isnan(_3198) ? 0.0 : max(_3198, 0.0));
                                float _3199 = isnan(1.0) ? _4268 : (isnan(_4268) ? 1.0 : min(_4268, 1.0));
                                float _3200 = 1.0 - _3167;
                                float _3210 = (0.5 / (((_3199 * ((_3182 * _3200) + _3167)) + 9.9999999392252902907785028219223e-09) + (((_3199 * _3200) + _3167) * _3182))) * _3199;
                                float _4279 = isnan(0.0) ? _3210 : (isnan(_3210) ? 0.0 : max(_3210, 0.0));
                                float _3220 = (_3114 * _3085) * (((_3168 * 3.1415927410125732421875) * (isnan(1.0) ? _4279 : (isnan(_4279) ? 1.0 : min(_4279, 1.0)))) / ((_3190 * _3190) * ((_3103 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = ((((_2944 * 0.3183098733425140380859375) * _3137) * _3135) + _2944) * _3115;
                                frontier_phi_78_pred_1 = ((((_2943 * 0.3183098733425140380859375) * _3137) * _3135) + _2943) * _3115;
                                frontier_phi_78_pred_2 = ((((_2942 * 0.3183098733425140380859375) * _3137) * _3135) + _2942) * _3115;
                                frontier_phi_78_pred_3 = _3220 * _2956.z;
                                frontier_phi_78_pred_4 = _3220 * _2956.y;
                                frontier_phi_78_pred_5 = _3220 * _2956.x;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3229 = frontier_phi_78_pred;
                            _3228 = frontier_phi_78_pred_1;
                            _3227 = frontier_phi_78_pred_2;
                            _3226 = frontier_phi_78_pred_3;
                            _3225 = frontier_phi_78_pred_4;
                            _3224 = frontier_phi_78_pred_5;
                            _2883 = _3227 + _2896;
                            _2884 = _3228 + _2897;
                            _2885 = _3229 + _2898;
                            _2880 = _3224 + _2893;
                            _2881 = _3225 + _2894;
                            _2882 = _3226 + _2895;
                            if (_2900 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2893 = _2880;
                                _2894 = _2881;
                                _2895 = _2882;
                                _2896 = _2883;
                                _2897 = _2884;
                                _2898 = _2885;
                                _2899 = _2900;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _2885;
                        frontier_phi_72_pred_1 = _2884;
                        frontier_phi_72_pred_2 = _2883;
                        frontier_phi_72_pred_3 = _2882;
                        frontier_phi_72_pred_4 = _2881;
                        frontier_phi_72_pred_5 = _2880;
                    }
                    _2402 = frontier_phi_72_pred;
                    _2400 = frontier_phi_72_pred_1;
                    _2398 = frontier_phi_72_pred_2;
                    _2396 = frontier_phi_72_pred_3;
                    _2394 = frontier_phi_72_pred_4;
                    _2392 = frontier_phi_72_pred_5;
                    uint _2590 = _2589 + 1u;
                    if (_2590 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2583 = _2392;
                        _2584 = _2394;
                        _2585 = _2396;
                        _2586 = _2398;
                        _2587 = _2400;
                        _2588 = _2402;
                        _2589 = _2590;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2396;
                frontier_phi_58_59_ladder_1 = _2402;
                frontier_phi_58_59_ladder_2 = _2400;
                frontier_phi_58_59_ladder_3 = _2398;
                frontier_phi_58_59_ladder_4 = _2394;
                frontier_phi_58_59_ladder_5 = _2392;
            }
            else
            {
                frontier_phi_58_59_ladder = _2246;
                frontier_phi_58_59_ladder_1 = _2252;
                frontier_phi_58_59_ladder_2 = _2250;
                frontier_phi_58_59_ladder_3 = _2248;
                frontier_phi_58_59_ladder_4 = _2244;
                frontier_phi_58_59_ladder_5 = _2242;
            }
            _2391 = frontier_phi_58_59_ladder_5;
            _2393 = frontier_phi_58_59_ladder_4;
            _2395 = frontier_phi_58_59_ladder;
            _2397 = frontier_phi_58_59_ladder_3;
            _2399 = frontier_phi_58_59_ladder_2;
            _2401 = frontier_phi_58_59_ladder_1;
        }
        float _2406 = isnan(1.0) ? _448 : (isnan(_448) ? 1.0 : min(_448, 1.0));
        _2229 = (_2406 * _2397) + _1707;
        _2231 = (_2406 * _2399) + _1709;
        _2233 = (_2406 * _2401) + _1711;
        _2235 = ((_2391 * 0.039999999105930328369140625) * _2406) + _2040;
        _2237 = ((_2393 * 0.039999999105930328369140625) * _2406) + _2042;
        _2239 = ((_2395 * 0.039999999105930328369140625) * _2406) + _2044;
    }
    else
    {
        _2229 = _1707;
        _2231 = _1709;
        _2233 = _1711;
        _2235 = _2040;
        _2237 = _2042;
        _2239 = _2044;
    }
    float _2328;
    float _2329;
    float _2330;
    if (_295 > 0.0)
    {
        uint _2263 = _1490 + 4u;
        float _2269 = (-0.0) - _373;
        float _2271 = (-0.0) - _374;
        float _2272 = (-0.0) - _375;
        float _2273 = dot(vec3(cbLight._m0[_1490].xyz), vec3(_2269, _2271, _2272));
        float _4295 = isnan(0.0) ? _2273 : (isnan(_2273) ? 0.0 : max(_2273, 0.0));
        float _2277 = _459 + 1.0;
        float _2279 = (isnan(0.0) ? _2277 : (isnan(_2277) ? 0.0 : max(_2277, 0.0))) * 0.5;
        float _2284 = _2279 * _2279;
        float _2285 = _2284 * exp2(log2(isnan(1.0) ? _4295 : (isnan(_4295) ? 1.0 : min(_4295, 1.0))) * 32.0);
        float _2287 = _295 / (_295 + 1.0);
        float _2288 = isnan(_1503) ? 1.0 : (isnan(1.0) ? _1503 : min(1.0, _1503));
        uint _2298 = _1490 + 5u;
        float _2304 = dot(vec3(cbLight._m0[_1797].xyz), vec3(_2269, _2271, _2272));
        float _4316 = isnan(0.0) ? _2304 : (isnan(_2304) ? 0.0 : max(_2304, 0.0));
        float _2311 = _2284 * exp2(log2(isnan(1.0) ? _4316 : (isnan(_4316) ? 1.0 : min(_4316, 1.0))) * 32.0);
        float _2312 = isnan(_1504) ? 1.0 : (isnan(1.0) ? _1504 : min(1.0, _1504));
        _2328 = ((((_2311 * cbLight._m0[_2298].x) * _2287) * _2312) + (((_2285 * cbLight._m0[_2263].x) * _2287) * _2288)) * 0.3183098733425140380859375;
        _2329 = ((((_2311 * cbLight._m0[_2298].y) * _2287) * _2312) + (((_2285 * cbLight._m0[_2263].y) * _2287) * _2288)) * 0.3183098733425140380859375;
        _2330 = ((((_2311 * cbLight._m0[_2298].z) * _2287) * _2312) + (((_2285 * cbLight._m0[_2263].z) * _2287) * _2288)) * 0.3183098733425140380859375;
    }
    else
    {
        _2328 = 0.0;
        _2329 = 0.0;
        _2330 = 0.0;
    }
    float _4332 = isnan(0.0) ? _434 : (isnan(_434) ? 0.0 : max(_434, 0.0));
    float _4343 = isnan(0.0) ? _435 : (isnan(_435) ? 0.0 : max(_435, 0.0));
    float _4354 = isnan(0.0) ? _436 : (isnan(_436) ? 0.0 : max(_436, 0.0));
    float _4365 = isnan(0.0) ? _293 : (isnan(_293) ? 0.0 : max(_293, 0.0));
    float _2357 = cbInstanceData._m0[_422 + 6u].w * (isnan(1.0) ? _4365 : (isnan(_4365) ? 1.0 : min(_4365, 1.0)));
    float _2362 = _381 / cbSceneParam._m0[86u].x;
    float _2363 = _382 / cbSceneParam._m0[86u].y;
    vec4 _2377 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2362, _2363, (log2((isnan(cbSceneParam._m0[77u].w) ? _314 : (isnan(_314) ? cbSceneParam._m0[77u].w : min(_314, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2379 = _2377.x;
    float _2380 = _2377.y;
    float _2381 = _2377.z;
    float _2382 = _2377.w;
    float _2481;
    float _2483;
    float _2485;
    float _2487;
    if (_314 > cbSceneParam._m0[78u].w)
    {
        float _2444 = isnan(_314) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _314 : min(cbSceneParam._m0[80u].w, _314));
        float _2445 = _2444 / _314;
        float _2456 = _2445 * _366;
        float _2457 = _367 * _2445;
        float _2458 = (-0.0) - _2457;
        float _2459 = _2445 * _368;
        float _2461 = (cbSceneParam._m0[77u].w * _2458) / _2444;
        float _2462 = _2461 + cbSceneParam._m0[79u].w;
        float _2463 = cbSceneParam._m0[79u].w - _2457;
        float _2469 = sqrt(((_2456 * _2456) + (_2457 * _2457)) + (_2459 * _2459));
        float _2472 = (1.0 - (cbSceneParam._m0[77u].w / _2444)) * _2469;
        float _2477 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2479 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2842;
        if (abs((_2458 - _2461) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2842 = ((((_2462 > 0.0) ? exp2(_2477 * _2462) : (2.0 - exp2(_2479 * _2462))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2472;
        }
        else
        {
            float _2556 = 1.0 / cbSceneParam._m0[80u].x;
            float _2557 = isnan(_2463) ? _2462 : (isnan(_2462) ? _2463 : max(_2462, _2463));
            float _2558 = isnan(_2463) ? _2462 : (isnan(_2462) ? _2463 : min(_2462, _2463));
            float _2567 = isnan(0.0) ? _2557 : (isnan(_2557) ? 0.0 : min(_2557, 0.0));
            float _2568 = isnan(0.0) ? _2558 : (isnan(_2558) ? 0.0 : min(_2558, 0.0));
            _2842 = ((abs(_2469 / _2458) * cbSceneParam._m0[80u].y) * ((((_2567 - _2568) * 2.0) - ((exp2(_2477 * (isnan(0.0) ? _2557 : (isnan(_2557) ? 0.0 : max(_2557, 0.0)))) - exp2(_2477 * (isnan(0.0) ? _2558 : (isnan(_2558) ? 0.0 : max(_2558, 0.0))))) * _2556)) - ((exp2(_2479 * _2567) - exp2(_2479 * _2568)) * _2556))) + (_2472 * cbSceneParam._m0[80u].z);
        }
        vec4 _2844 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2362, _2363, 1.0), 0.0);
        float _2853 = exp2((_2842 * (-1.44269502162933349609375)) * (1.0 - _2844.w));
        float _2854 = log2(_2853);
        float _2870 = log2(_2382);
        _2481 = (exp2(_2870 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2854 * cbSceneParam._m0[78u].x)) * _2844.x) / cbSceneParam._m0[78u].x)) + _2379;
        _2483 = (exp2(_2870 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2854 * cbSceneParam._m0[78u].y)) * _2844.y) / cbSceneParam._m0[78u].y)) + _2380;
        _2485 = (exp2(_2870 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2854 * cbSceneParam._m0[78u].z)) * _2844.z) / cbSceneParam._m0[78u].z)) + _2381;
        _2487 = _2853 * _2382;
    }
    else
    {
        _2481 = _2379;
        _2483 = _2380;
        _2485 = _2381;
        _2487 = _2382;
    }
    float _2499 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2500 = _2499 == 3.0;
    float _2501 = log2(_2487);
    float _2508 = exp2(_2501 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4332 : (isnan(_4332) ? 1.0 : min(_4332, 1.0))) * ((_2229 + ((isnan(0.0) ? _1176 : (isnan(_1176) ? 0.0 : max(_1176, 0.0))) * _448)) + _2328)) + ((_2235 + ((isnan(0.0) ? _1472 : (isnan(_1472) ? 0.0 : max(_1472, 0.0))) * _1255)) * cbPerFrame._m0[3u].x));
    float _2509 = exp2(_2501 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4343 : (isnan(_4343) ? 1.0 : min(_4343, 1.0))) * ((_2231 + ((isnan(0.0) ? _1179 : (isnan(_1179) ? 0.0 : max(_1179, 0.0))) * _448)) + _2329)) + ((_2237 + ((isnan(0.0) ? _1475 : (isnan(_1475) ? 0.0 : max(_1475, 0.0))) * _1255)) * cbPerFrame._m0[3u].x));
    float _2510 = exp2(_2501 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4354 : (isnan(_4354) ? 1.0 : min(_4354, 1.0))) * ((_2233 + ((isnan(0.0) ? _1182 : (isnan(_1182) ? 0.0 : max(_1182, 0.0))) * _448)) + _2330)) + ((_2239 + ((isnan(0.0) ? _1478 : (isnan(_1478) ? 0.0 : max(_1478, 0.0))) * _1255)) * cbPerFrame._m0[3u].x));
    float _2519 = (_2499 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2519 * (_2500 ? _2508 : (_2508 + (cbSceneParam._m0[72u].w * _2481)));
    SV_Target.y = _2519 * (_2500 ? _2509 : (_2509 + (cbSceneParam._m0[72u].w * _2483)));
    SV_Target.z = _2519 * (_2500 ? _2510 : (_2510 + (cbSceneParam._m0[72u].w * _2485)));
    SV_Target.w = _2357;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2357;
}


