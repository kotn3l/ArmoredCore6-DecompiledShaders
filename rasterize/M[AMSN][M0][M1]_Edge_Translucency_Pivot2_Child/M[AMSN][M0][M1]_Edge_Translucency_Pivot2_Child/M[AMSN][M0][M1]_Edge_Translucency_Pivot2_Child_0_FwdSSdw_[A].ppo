#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[12];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_M0_M1_Edge_Translucency_Pivot2_Child_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_M0_M1_Edge_Translucency_Pivot2_Child_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_M0_M1_Edge_Translucency_Pivot2_Child_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_M0_M1_Edge_Translucency_Pivot2_Child_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in float TEXCOORD;
layout(location = 4, component = 1) in float TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _902;
float _3547;
float _3548;
float _3549;
float _3550;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _182 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _183 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _184 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _190 = inversesqrt(dot(vec3(_182, _183, _184), vec3(_182, _183, _184)));
    float _197 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _204 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _227 = texture(sampler2D(M_AMSN_M0_M1_Edge_Translucency_Pivot2_Child_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1) + cbTextureTilingScale._m0[0u].w));
    float _233 = _227.w;
    float _234 = _227.x * cbMtdParam._m0[9u].x;
    float _235 = _227.y * cbMtdParam._m0[9u].y;
    float _236 = _227.z * cbMtdParam._m0[9u].z;
    vec4 _248 = texture(sampler2D(M_AMSN_M0_M1_Edge_Translucency_Pivot2_Child_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1) + cbTextureTilingScale._m0[2u].w));
    float _250 = _248.x;
    vec4 _262 = texture(sampler2D(M_AMSN_M0_M1_Edge_Translucency_Pivot2_Child_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1) + cbTextureTilingScale._m0[1u].w));
    float _266 = _262.z;
    float _270 = (_262.x * 2.0) + (-1.0);
    float _272 = (_262.y * 2.0) + (-1.0);
    float _273 = dot(vec2(_270, _272), vec2(_270, _272));
    float _3559 = isnan(0.0) ? _273 : (isnan(_273) ? 0.0 : max(_273, 0.0));
    float _279 = sqrt(1.0 - (isnan(1.0) ? _3559 : (isnan(_3559) ? 1.0 : min(_3559, 1.0))));
    vec4 _291 = texture(sampler2D(M_AMSN_M0_M1_Edge_Translucency_Pivot2_Child_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_1) + cbTextureTilingScale._m0[3u].w));
    float _298 = cbMtdParam._m0[10u].x * _291.x;
    float _301 = fma(_279, _197 * NORMAL.x, fma(_272, _204 * TANGENT.x, (_190 * _182) * _270));
    float _304 = fma(_279, _197 * NORMAL.y, fma(_272, _204 * TANGENT.y, (_190 * _183) * _270));
    float _307 = fma(_279, _197 * NORMAL.z, fma(_272, _204 * TANGENT.z, (_190 * _184) * _270));
    float _311 = inversesqrt(dot(vec3(_301, _304, _307), vec3(_301, _304, _307)));
    float _312 = _311 * _301;
    float _313 = _311 * _304;
    float _314 = _311 * _307;
    float _3570 = isnan(0.0) ? _233 : (isnan(_233) ? 0.0 : max(_233, 0.0));
    float _315 = isnan(1.0) ? _3570 : (isnan(_3570) ? 1.0 : min(_3570, 1.0));
    float _3581 = isnan(0.0) ? _266 : (isnan(_266) ? 0.0 : max(_266, 0.0));
    float _316 = isnan(1.0) ? _3581 : (isnan(_3581) ? 1.0 : min(_3581, 1.0));
    float _317 = isnan(0.0) ? _298 : (isnan(_298) ? 0.0 : max(_298, 0.0));
    float _3597 = isnan(0.0) ? _234 : (isnan(_234) ? 0.0 : max(_234, 0.0));
    float _3608 = isnan(0.0) ? _235 : (isnan(_235) ? 0.0 : max(_235, 0.0));
    float _3619 = isnan(0.0) ? _236 : (isnan(_236) ? 0.0 : max(_236, 0.0));
    float _3630 = isnan(0.0) ? _250 : (isnan(_250) ? 0.0 : max(_250, 0.0));
    float _321 = isnan(1.0) ? _3630 : (isnan(_3630) ? 1.0 : min(_3630, 1.0));
    float _337 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _379 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _389 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _379);
    float _390 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _379);
    float _391 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _379);
    float _395 = inversesqrt(dot(vec3(_389, _390, _391), vec3(_389, _390, _391)));
    float _396 = _389 * _395;
    float _397 = _390 * _395;
    float _398 = _391 * _395;
    vec4 _403 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _405 = _403.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _581 = sqrt(((_389 * _389) + (_390 * _390)) + (_391 * _391));
        float _587 = (cbMatDynParam._m0[5u].x * _581) + cbMatDynParam._m0[5u].y;
        float _3641 = isnan(0.0) ? _587 : (isnan(_587) ? 0.0 : max(_587, 0.0));
        float _588 = isnan(1.0) ? _3641 : (isnan(_3641) ? 1.0 : min(_3641, 1.0));
        float _592 = (cbMatDynParam._m0[5u].z * _581) + cbMatDynParam._m0[5u].w;
        float _3652 = isnan(0.0) ? _592 : (isnan(_592) ? 0.0 : max(_592, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3652 : (isnan(_3652) ? 1.0 : min(_3652, 1.0))) - _588)) + _588) < ((_405 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _417 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _418 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _438 = fma(_314, cbSceneParam._m0[5u].z, fma(_313, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _312));
    float _441 = fma(_314, cbSceneParam._m0[6u].z, fma(_313, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _312));
    float _444 = fma(_314, cbSceneParam._m0[7u].z, fma(_313, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _312));
    uint _457 = uint(roundEven(NORMAL.w)) * 13u;
    uint _459 = _457 + 9u;
    uint _460 = _459 + uint(cbMatDynParam._m0[0u].w);
    float _466 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3597 : (isnan(_3597) ? 1.0 : min(_3597, 1.0)))) * cbInstanceData._m0[_460].x;
    float _467 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3608 : (isnan(_3608) ? 1.0 : min(_3608, 1.0)))) * cbInstanceData._m0[_460].y;
    float _468 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3619 : (isnan(_3619) ? 1.0 : min(_3619, 1.0)))) * cbInstanceData._m0[_460].z;
    float _3663 = isnan(0.0) ? _466 : (isnan(_466) ? 0.0 : max(_466, 0.0));
    float _469 = isnan(1.0) ? _3663 : (isnan(_3663) ? 1.0 : min(_3663, 1.0));
    float _3674 = isnan(0.0) ? _467 : (isnan(_467) ? 0.0 : max(_467, 0.0));
    float _470 = isnan(1.0) ? _3674 : (isnan(_3674) ? 1.0 : min(_3674, 1.0));
    float _3685 = isnan(0.0) ? _468 : (isnan(_468) ? 0.0 : max(_468, 0.0));
    float _471 = isnan(1.0) ? _3685 : (isnan(_3685) ? 1.0 : min(_3685, 1.0));
    float _472 = 1.0 - _321;
    float _473 = _469 * _472;
    float _474 = _470 * _472;
    float _475 = _471 * _472;
    float _480 = (_469 + (-0.039999999105930328369140625)) * _321;
    float _481 = (_470 + (-0.039999999105930328369140625)) * _321;
    float _482 = (_471 + (-0.039999999105930328369140625)) * _321;
    float _483 = _480 + 0.039999999105930328369140625;
    float _485 = _481 + 0.039999999105930328369140625;
    float _486 = _482 + 0.039999999105930328369140625;
    vec4 _495 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _417, cbSceneParam._m0[86u].y * _418));
    float _498 = _495.x * TEXCOORD_3.w;
    float _499 = dot(vec3(_312, _313, _314), vec3(_396, _397, _398));
    float _502 = _499 * 2.0;
    float _506 = (_502 * _312) - _396;
    float _507 = (_502 * _313) - _397;
    float _508 = (_502 * _314) - _398;
    float _509 = dot(vec3(_396, _397, _398), vec3(_312, _313, _314));
    float _512 = abs(_509);
    float _3696 = isnan(0.0) ? _512 : (isnan(_512) ? 0.0 : max(_512, 0.0));
    float _514 = sqrt(_316);
    float _527 = exp2((_514 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3696 : (isnan(_3696) ? 1.0 : min(_3696, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_514 * 3.0));
    float _533 = (1.0 - _527) * ((_514 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _534 = _527 * _514;
    float _562 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _566 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _570 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _901;
    float _903;
    float _904;
    float _905;
    float _906;
    float _907;
    float _908;
    float _909;
    float _910;
    float _911;
    float _912;
    float _913;
    float _914;
    float _915;
    float _916;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _626 = fma(_570, cbModelParam._m0[26u].z, fma(_566, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _562));
        float _630 = fma(_570, cbModelParam._m0[27u].z, fma(_566, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _562));
        float _634 = fma(_570, cbModelParam._m0[28u].z, fma(_566, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _562));
        float _659 = _562 + _312;
        float _660 = _566 + _313;
        float _661 = _570 + _314;
        float _671 = fma(_661, cbModelParam._m0[26u].z, fma(_660, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _659)) - _626;
        float _672 = fma(_661, cbModelParam._m0[27u].z, fma(_660, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _659)) - _630;
        float _673 = fma(_661, cbModelParam._m0[28u].z, fma(_660, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _659)) - _634;
        float _677 = inversesqrt(dot(vec3(_671, _672, _673), vec3(_671, _672, _673)));
        float _690 = ((_677 * _671) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_626 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _691 = ((_677 * _672) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_630 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _692 = ((_677 * _673) / cbModelParam._m0[34u].z) + ((((((_634 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _695 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_690, _691, _692), 0.0);
        vec4 _702 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_690, _691, _692), 0.0);
        vec4 _709 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_690, _691, _692), 0.0);
        vec4 _716 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_690, _691, _692), 0.0);
        float _729 = exp2((_695.w + (-0.5)) * 20.0) * 2.0;
        float _730 = _729 * (_695.x + (-0.5));
        float _731 = _729 * (_695.y + (-0.5));
        float _732 = _729 * (_695.z + (-0.5));
        float _739 = exp2((_702.w + (-0.5)) * 20.0) * 2.0;
        float _740 = _739 * (_702.x + (-0.5));
        float _741 = _739 * (_702.y + (-0.5));
        float _742 = _739 * (_702.z + (-0.5));
        float _749 = exp2((_709.w + (-0.5)) * 20.0) * 2.0;
        float _750 = _749 * (_709.x + (-0.5));
        float _751 = _749 * (_709.y + (-0.5));
        float _752 = _749 * (_709.z + (-0.5));
        float _759 = exp2((_716.w + (-0.5)) * 20.0) * 2.0;
        float _760 = _759 * (_716.x + (-0.5));
        float _761 = _759 * (_716.y + (-0.5));
        float _762 = _759 * (_716.z + (-0.5));
        float _763 = isnan(0.0) ? _760 : (isnan(_760) ? 0.0 : max(_760, 0.0));
        float _764 = isnan(0.0) ? _761 : (isnan(_761) ? 0.0 : max(_761, 0.0));
        float _765 = isnan(0.0) ? _762 : (isnan(_762) ? 0.0 : max(_762, 0.0));
        float _766 = _730 * 0.5;
        float _767 = _740 * 0.5;
        float _768 = _750 * 0.5;
        float _769 = dot(vec3(_766, _767, _768), vec3(_766, _767, _768));
        float _774 = (_769 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_769);
        float _783 = (dot(vec3(_312, _313, _314), vec3(_774 * _766, _774 * _767, _774 * _768)) + 1.0) * 0.5;
        float _3722 = isnan(0.0) ? _783 : (isnan(_783) ? 0.0 : max(_783, 0.0));
        float _793 = sqrt(((_767 * _767) + (_766 * _766)) + (_768 * _768)) / (_763 + 9.9999997473787516355514526367188e-06);
        float _3733 = isnan(0.0) ? _793 : (isnan(_793) ? 0.0 : max(_793, 0.0));
        float _794 = isnan(1.0) ? _3733 : (isnan(_3733) ? 1.0 : min(_3733, 1.0));
        float _795 = _794 * 2.0;
        float _799 = (1.0 - _794) / (_794 + 1.0);
        float _3744 = isnan(0.0) ? _799 : (isnan(_799) ? 0.0 : max(_799, 0.0));
        float _800 = isnan(1.0) ? _3744 : (isnan(_3744) ? 1.0 : min(_3744, 1.0));
        float _809 = ((((1.0 - _800) * (_795 + 2.0)) * exp2(log2(isnan(1.0) ? _3722 : (isnan(_3722) ? 1.0 : min(_3722, 1.0))) * (_795 + 1.0))) + _800) * _763;
        float _810 = _731 * 0.5;
        float _811 = _741 * 0.5;
        float _812 = _751 * 0.5;
        float _813 = dot(vec3(_810, _811, _812), vec3(_810, _811, _812));
        float _818 = (_813 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_813);
        float _826 = (dot(vec3(_312, _313, _314), vec3(_818 * _810, _818 * _811, _818 * _812)) + 1.0) * 0.5;
        float _3755 = isnan(0.0) ? _826 : (isnan(_826) ? 0.0 : max(_826, 0.0));
        float _835 = sqrt(((_811 * _811) + (_810 * _810)) + (_812 * _812)) / (_764 + 9.9999997473787516355514526367188e-06);
        float _3766 = isnan(0.0) ? _835 : (isnan(_835) ? 0.0 : max(_835, 0.0));
        float _836 = isnan(1.0) ? _3766 : (isnan(_3766) ? 1.0 : min(_3766, 1.0));
        float _837 = _836 * 2.0;
        float _841 = (1.0 - _836) / (_836 + 1.0);
        float _3777 = isnan(0.0) ? _841 : (isnan(_841) ? 0.0 : max(_841, 0.0));
        float _842 = isnan(1.0) ? _3777 : (isnan(_3777) ? 1.0 : min(_3777, 1.0));
        float _851 = ((((1.0 - _842) * (_837 + 2.0)) * exp2(log2(isnan(1.0) ? _3755 : (isnan(_3755) ? 1.0 : min(_3755, 1.0))) * (_837 + 1.0))) + _842) * _764;
        float _852 = _732 * 0.5;
        float _853 = _742 * 0.5;
        float _854 = _752 * 0.5;
        float _855 = dot(vec3(_852, _853, _854), vec3(_852, _853, _854));
        float _860 = (_855 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_855);
        float _868 = (dot(vec3(_312, _313, _314), vec3(_860 * _852, _860 * _853, _860 * _854)) + 1.0) * 0.5;
        float _3788 = isnan(0.0) ? _868 : (isnan(_868) ? 0.0 : max(_868, 0.0));
        float _877 = sqrt(((_853 * _853) + (_852 * _852)) + (_854 * _854)) / (_765 + 9.9999997473787516355514526367188e-06);
        float _3799 = isnan(0.0) ? _877 : (isnan(_877) ? 0.0 : max(_877, 0.0));
        float _878 = isnan(1.0) ? _3799 : (isnan(_3799) ? 1.0 : min(_3799, 1.0));
        float _879 = _878 * 2.0;
        float _883 = (1.0 - _878) / (_878 + 1.0);
        float _3810 = isnan(0.0) ? _883 : (isnan(_883) ? 0.0 : max(_883, 0.0));
        float _884 = isnan(1.0) ? _3810 : (isnan(_3810) ? 1.0 : min(_3810, 1.0));
        float _893 = ((((1.0 - _884) * (_879 + 2.0)) * exp2(log2(isnan(1.0) ? _3788 : (isnan(_3788) ? 1.0 : min(_3788, 1.0))) * (_879 + 1.0))) + _884) * _765;
        _901 = _732;
        _903 = _731;
        _904 = _730;
        _905 = _742;
        _906 = _741;
        _907 = _740;
        _908 = _752;
        _909 = _751;
        _910 = _750;
        _911 = _765;
        _912 = _764;
        _913 = _763;
        _914 = cbModelParam._m0[36u].z * (isnan(0.0) ? _809 : (isnan(_809) ? 0.0 : max(_809, 0.0)));
        _915 = cbModelParam._m0[36u].z * (isnan(0.0) ? _851 : (isnan(_851) ? 0.0 : max(_851, 0.0)));
        _916 = cbModelParam._m0[36u].z * (isnan(0.0) ? _893 : (isnan(_893) ? 0.0 : max(_893, 0.0)));
    }
    else
    {
        _901 = _902;
        _903 = _902;
        _904 = _902;
        _905 = _902;
        _906 = _902;
        _907 = _902;
        _908 = _902;
        _909 = _902;
        _910 = _902;
        _911 = _902;
        _912 = _902;
        _913 = _902;
        _914 = 0.0;
        _915 = 0.0;
        _916 = 0.0;
    }
    float _1214;
    float _1215;
    float _1216;
    float _1217;
    float _1218;
    float _1219;
    float _1220;
    float _1221;
    float _1222;
    float _1223;
    float _1224;
    float _1225;
    float _1226;
    float _1227;
    float _1228;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _945 = fma(_570, cbModelParam._m0[30u].z, fma(_566, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _562));
        float _949 = fma(_570, cbModelParam._m0[31u].z, fma(_566, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _562));
        float _953 = fma(_570, cbModelParam._m0[32u].z, fma(_566, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _562));
        float _976 = _562 + _312;
        float _977 = _566 + _313;
        float _978 = _570 + _314;
        float _988 = fma(_978, cbModelParam._m0[30u].z, fma(_977, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _976)) - _945;
        float _989 = fma(_978, cbModelParam._m0[31u].z, fma(_977, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _976)) - _949;
        float _990 = fma(_978, cbModelParam._m0[32u].z, fma(_977, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _976)) - _953;
        float _994 = inversesqrt(dot(vec3(_988, _989, _990), vec3(_988, _989, _990)));
        float _1007 = ((_994 * _988) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_945 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1008 = ((_994 * _989) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_949 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1009 = ((_994 * _990) / cbModelParam._m0[35u].z) + ((((((_953 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1011 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1007, _1008, _1009), 0.0);
        vec4 _1018 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1007, _1008, _1009), 0.0);
        vec4 _1025 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1007, _1008, _1009), 0.0);
        vec4 _1032 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1007, _1008, _1009), 0.0);
        float _1044 = exp2((_1011.w + (-0.5)) * 20.0) * 2.0;
        float _1045 = _1044 * (_1011.x + (-0.5));
        float _1046 = _1044 * (_1011.y + (-0.5));
        float _1047 = _1044 * (_1011.z + (-0.5));
        float _1054 = exp2((_1018.w + (-0.5)) * 20.0) * 2.0;
        float _1055 = _1054 * (_1018.x + (-0.5));
        float _1056 = _1054 * (_1018.y + (-0.5));
        float _1057 = _1054 * (_1018.z + (-0.5));
        float _1064 = exp2((_1025.w + (-0.5)) * 20.0) * 2.0;
        float _1065 = _1064 * (_1025.x + (-0.5));
        float _1066 = _1064 * (_1025.y + (-0.5));
        float _1067 = _1064 * (_1025.z + (-0.5));
        float _1074 = exp2((_1032.w + (-0.5)) * 20.0) * 2.0;
        float _1075 = _1074 * (_1032.x + (-0.5));
        float _1076 = _1074 * (_1032.y + (-0.5));
        float _1077 = _1074 * (_1032.z + (-0.5));
        float _1078 = isnan(0.0) ? _1075 : (isnan(_1075) ? 0.0 : max(_1075, 0.0));
        float _1079 = isnan(0.0) ? _1076 : (isnan(_1076) ? 0.0 : max(_1076, 0.0));
        float _1080 = isnan(0.0) ? _1077 : (isnan(_1077) ? 0.0 : max(_1077, 0.0));
        float _1081 = _1045 * 0.5;
        float _1082 = _1055 * 0.5;
        float _1083 = _1065 * 0.5;
        float _1084 = dot(vec3(_1081, _1082, _1083), vec3(_1081, _1082, _1083));
        float _1089 = (_1084 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1084);
        float _1097 = (dot(vec3(_312, _313, _314), vec3(_1089 * _1081, _1089 * _1082, _1089 * _1083)) + 1.0) * 0.5;
        float _3851 = isnan(0.0) ? _1097 : (isnan(_1097) ? 0.0 : max(_1097, 0.0));
        float _1106 = sqrt(((_1082 * _1082) + (_1081 * _1081)) + (_1083 * _1083)) / (_1078 + 9.9999997473787516355514526367188e-06);
        float _3862 = isnan(0.0) ? _1106 : (isnan(_1106) ? 0.0 : max(_1106, 0.0));
        float _1107 = isnan(1.0) ? _3862 : (isnan(_3862) ? 1.0 : min(_3862, 1.0));
        float _1108 = _1107 * 2.0;
        float _1112 = (1.0 - _1107) / (_1107 + 1.0);
        float _3873 = isnan(0.0) ? _1112 : (isnan(_1112) ? 0.0 : max(_1112, 0.0));
        float _1113 = isnan(1.0) ? _3873 : (isnan(_3873) ? 1.0 : min(_3873, 1.0));
        float _1122 = ((((1.0 - _1113) * (_1108 + 2.0)) * exp2(log2(isnan(1.0) ? _3851 : (isnan(_3851) ? 1.0 : min(_3851, 1.0))) * (_1108 + 1.0))) + _1113) * _1078;
        float _1123 = _1046 * 0.5;
        float _1124 = _1056 * 0.5;
        float _1125 = _1066 * 0.5;
        float _1126 = dot(vec3(_1123, _1124, _1125), vec3(_1123, _1124, _1125));
        float _1131 = (_1126 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1126);
        float _1139 = (dot(vec3(_312, _313, _314), vec3(_1131 * _1123, _1131 * _1124, _1131 * _1125)) + 1.0) * 0.5;
        float _3884 = isnan(0.0) ? _1139 : (isnan(_1139) ? 0.0 : max(_1139, 0.0));
        float _1148 = sqrt(((_1124 * _1124) + (_1123 * _1123)) + (_1125 * _1125)) / (_1079 + 9.9999997473787516355514526367188e-06);
        float _3895 = isnan(0.0) ? _1148 : (isnan(_1148) ? 0.0 : max(_1148, 0.0));
        float _1149 = isnan(1.0) ? _3895 : (isnan(_3895) ? 1.0 : min(_3895, 1.0));
        float _1150 = _1149 * 2.0;
        float _1154 = (1.0 - _1149) / (_1149 + 1.0);
        float _3906 = isnan(0.0) ? _1154 : (isnan(_1154) ? 0.0 : max(_1154, 0.0));
        float _1155 = isnan(1.0) ? _3906 : (isnan(_3906) ? 1.0 : min(_3906, 1.0));
        float _1164 = ((((1.0 - _1155) * (_1150 + 2.0)) * exp2(log2(isnan(1.0) ? _3884 : (isnan(_3884) ? 1.0 : min(_3884, 1.0))) * (_1150 + 1.0))) + _1155) * _1079;
        float _1165 = _1047 * 0.5;
        float _1166 = _1057 * 0.5;
        float _1167 = _1067 * 0.5;
        float _1168 = dot(vec3(_1165, _1166, _1167), vec3(_1165, _1166, _1167));
        float _1173 = (_1168 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1168);
        float _1181 = (dot(vec3(_312, _313, _314), vec3(_1173 * _1165, _1173 * _1166, _1173 * _1167)) + 1.0) * 0.5;
        float _3917 = isnan(0.0) ? _1181 : (isnan(_1181) ? 0.0 : max(_1181, 0.0));
        float _1190 = sqrt(((_1166 * _1166) + (_1165 * _1165)) + (_1167 * _1167)) / (_1080 + 9.9999997473787516355514526367188e-06);
        float _3928 = isnan(0.0) ? _1190 : (isnan(_1190) ? 0.0 : max(_1190, 0.0));
        float _1191 = isnan(1.0) ? _3928 : (isnan(_3928) ? 1.0 : min(_3928, 1.0));
        float _1192 = _1191 * 2.0;
        float _1196 = (1.0 - _1191) / (_1191 + 1.0);
        float _3939 = isnan(0.0) ? _1196 : (isnan(_1196) ? 0.0 : max(_1196, 0.0));
        float _1197 = isnan(1.0) ? _3939 : (isnan(_3939) ? 1.0 : min(_3939, 1.0));
        float _1206 = ((((1.0 - _1197) * (_1192 + 2.0)) * exp2(log2(isnan(1.0) ? _3917 : (isnan(_3917) ? 1.0 : min(_3917, 1.0))) * (_1192 + 1.0))) + _1197) * _1080;
        _1214 = _1047;
        _1215 = _1046;
        _1216 = _1045;
        _1217 = _1057;
        _1218 = _1056;
        _1219 = _1055;
        _1220 = _1067;
        _1221 = _1066;
        _1222 = _1065;
        _1223 = _1080;
        _1224 = _1079;
        _1225 = _1078;
        _1226 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1122 : (isnan(_1122) ? 0.0 : max(_1122, 0.0)));
        _1227 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1164 : (isnan(_1164) ? 0.0 : max(_1164, 0.0)));
        _1228 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1206 : (isnan(_1206) ? 0.0 : max(_1206, 0.0)));
    }
    else
    {
        _1214 = _902;
        _1215 = _902;
        _1216 = _902;
        _1217 = _902;
        _1218 = _902;
        _1219 = _902;
        _1220 = _902;
        _1221 = _902;
        _1222 = _902;
        _1223 = _902;
        _1224 = _902;
        _1225 = _902;
        _1226 = 0.0;
        _1227 = 0.0;
        _1228 = 0.0;
    }
    float _1238 = (cbModelParam._m0[1u].x * (_1226 - _914)) + _914;
    float _1239 = (cbModelParam._m0[1u].x * (_1227 - _915)) + _915;
    float _1240 = (cbModelParam._m0[1u].x * (_1228 - _916)) + _916;
    float _1261 = fma(_1240, cbSceneParam._m0[89u].z, fma(_1239, cbSceneParam._m0[89u].y, _1238 * cbSceneParam._m0[89u].x));
    float _1264 = fma(_1240, cbSceneParam._m0[90u].z, fma(_1239, cbSceneParam._m0[90u].y, _1238 * cbSceneParam._m0[90u].x));
    float _1267 = fma(_1240, cbSceneParam._m0[91u].z, fma(_1239, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1238));
    float _1282 = _506 * 0.5;
    float _1283 = _507 * 0.5;
    float _1284 = _508 * 0.5;
    float _1285 = dot(vec4(_1282, _1283, _1284, 1.0), vec4(_1216, _1219, _1222, _1225));
    float _1288 = dot(vec4(_1282, _1283, _1284, 1.0), vec4(_1215, _1218, _1221, _1224));
    float _1291 = dot(vec4(_1282, _1283, _1284, 1.0), vec4(_1214, _1217, _1220, _1223));
    float _1325;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1298 = dot(vec4(_1282, _1283, _1284, 1.0), vec4(_901, _905, _908, _911));
        float _1302 = dot(vec4(_1282, _1283, _1284, 1.0), vec4(_903, _906, _909, _912));
        float _1306 = dot(vec4(_1282, _1283, _1284, 1.0), vec4(_904, _907, _910, _913));
        float _1313 = dot(vec4(cbModelParam._m0[39u]), vec4(_1282, _1283, _1284, 1.0));
        _1325 = dot(vec3(isnan(0.0) ? _1306 : (isnan(_1306) ? 0.0 : max(_1306, 0.0)), isnan(0.0) ? _1302 : (isnan(_1302) ? 0.0 : max(_1302, 0.0)), isnan(0.0) ? _1298 : (isnan(_1298) ? 0.0 : max(_1298, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1313) ? 0.0 : (isnan(0.0) ? _1313 : max(0.0, _1313))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1325 = 1.0;
    }
    float _1336;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1327 = dot(vec4(cbModelParam._m0[40u]), vec4(_1282, _1283, _1284, 1.0));
        _1336 = dot(vec3(isnan(0.0) ? _1285 : (isnan(_1285) ? 0.0 : max(_1285, 0.0)), isnan(0.0) ? _1288 : (isnan(_1288) ? 0.0 : max(_1288, 0.0)), isnan(0.0) ? _1291 : (isnan(_1291) ? 0.0 : max(_1291, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1327) ? 0.0 : (isnan(0.0) ? _1327 : max(0.0, _1327))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1336 = 1.0;
    }
    float _1340 = (_1336 * cbModelParam._m0[1u].x) + (_1325 * (1.0 - cbModelParam._m0[1u].x));
    float _1350 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _316);
    float _1351 = isnan(_1350) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1350 : min(cbModelParam._m0[25u].z, _1350));
    float _1433;
    float _1435;
    float _1437;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1400 = fma(_570, cbModelParam._m0[13u].z, fma(_566, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _562)) + cbModelParam._m0[13u].w;
        float _1404 = fma(_570, cbModelParam._m0[14u].z, fma(_566, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _562)) + cbModelParam._m0[14u].w;
        float _1408 = fma(_570, cbModelParam._m0[15u].z, fma(_566, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _562)) + cbModelParam._m0[15u].w;
        float _1411 = fma(_508, cbModelParam._m0[13u].z, fma(_507, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _506));
        float _1414 = fma(_508, cbModelParam._m0[14u].z, fma(_507, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _506));
        float _1417 = fma(_508, cbModelParam._m0[15u].z, fma(_507, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _506));
        float _1445;
        if (_1411 > 0.0)
        {
            _1445 = abs((1.0 - _1400) / _1411);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1411 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1400 + 1.0) / _1411);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1445 = frontier_phi_17_15_ladder;
        }
        float _1648;
        if (_1414 > 0.0)
        {
            _1648 = abs((1.0 - _1404) / _1414);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1414 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1404 + 1.0) / _1414);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1648 = frontier_phi_26_22_ladder;
        }
        float _1721;
        if (_1417 > 0.0)
        {
            _1721 = abs((1.0 - _1408) / _1417);
        }
        else
        {
            float frontier_phi_37_33_ladder;
            if (_1417 < 0.0)
            {
                frontier_phi_37_33_ladder = abs((_1408 + 1.0) / _1417);
            }
            else
            {
                frontier_phi_37_33_ladder = 5000.0;
            }
            _1721 = frontier_phi_37_33_ladder;
        }
        float _1723 = isnan(_1648) ? _1445 : (isnan(_1445) ? _1648 : min(_1445, _1648));
        float _1724 = isnan(_1721) ? _1723 : (isnan(_1723) ? _1721 : min(_1723, _1721));
        float _1728 = (_1724 * _1411) + _1400;
        float _1729 = (_1724 * _1414) + _1404;
        float _1730 = (_1724 * _1417) + _1408;
        float _1731 = _1724 * 9.9999997473787516355514526367188e-05;
        float _1733 = (-1.0) - _1731;
        float _1735 = _1731 + 1.0;
        float frontier_phi_16_37_ladder;
        float frontier_phi_16_37_ladder_1;
        float frontier_phi_16_37_ladder_2;
        if ((_1730 > _1735) || ((_1730 < _1733) || ((_1729 > _1735) || ((_1729 < _1733) || ((_1728 < _1733) || (_1728 > _1735))))))
        {
            frontier_phi_16_37_ladder = 0.0;
            frontier_phi_16_37_ladder_1 = 0.0;
            frontier_phi_16_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1806 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1730, cbModelParam._m0[9u].z, fma(_1729, cbModelParam._m0[9u].y, _1728 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1730, cbModelParam._m0[10u].z, fma(_1729, cbModelParam._m0[10u].y, _1728 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1730, cbModelParam._m0[11u].z, fma(_1729, cbModelParam._m0[11u].y, _1728 * cbModelParam._m0[11u].x))), _1351);
            frontier_phi_16_37_ladder = _1806.z * cbModelParam._m0[1u].y;
            frontier_phi_16_37_ladder_1 = _1806.y * cbModelParam._m0[1u].y;
            frontier_phi_16_37_ladder_2 = _1806.x * cbModelParam._m0[1u].y;
        }
        _1433 = frontier_phi_16_37_ladder_2;
        _1435 = frontier_phi_16_37_ladder_1;
        _1437 = frontier_phi_16_37_ladder;
    }
    else
    {
        vec4 _1421 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_506, _507, _508), _1351);
        _1433 = _1421.x * cbModelParam._m0[1u].y;
        _1435 = _1421.y * cbModelParam._m0[1u].y;
        _1437 = _1421.z * cbModelParam._m0[1u].y;
    }
    float _1441 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _316);
    float _1442 = isnan(_1441) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1441 : min(cbModelParam._m0[25u].w, _1441));
    float _1535;
    float _1537;
    float _1539;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1499 = fma(_570, cbModelParam._m0[21u].z, fma(_566, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _562)) + cbModelParam._m0[21u].w;
        float _1503 = fma(_570, cbModelParam._m0[22u].z, fma(_566, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _562)) + cbModelParam._m0[22u].w;
        float _1507 = fma(_570, cbModelParam._m0[23u].z, fma(_566, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _562)) + cbModelParam._m0[23u].w;
        float _1510 = fma(_508, cbModelParam._m0[21u].z, fma(_507, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _506));
        float _1513 = fma(_508, cbModelParam._m0[22u].z, fma(_507, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _506));
        float _1516 = fma(_508, cbModelParam._m0[23u].z, fma(_507, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _506));
        float _1653;
        if (_1510 > 0.0)
        {
            _1653 = abs((1.0 - _1499) / _1510);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1510 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1499 + 1.0) / _1510);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1653 = frontier_phi_28_24_ladder;
        }
        float _1748;
        if (_1513 > 0.0)
        {
            _1748 = abs((1.0 - _1503) / _1513);
        }
        else
        {
            float frontier_phi_39_35_ladder;
            if (_1513 < 0.0)
            {
                frontier_phi_39_35_ladder = abs((_1503 + 1.0) / _1513);
            }
            else
            {
                frontier_phi_39_35_ladder = 5000.0;
            }
            _1748 = frontier_phi_39_35_ladder;
        }
        float _2030;
        if (_1516 > 0.0)
        {
            _2030 = abs((1.0 - _1507) / _1516);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1516 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1507 + 1.0) / _1516);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _2030 = frontier_phi_48_45_ladder;
        }
        float _2032 = isnan(_1748) ? _1653 : (isnan(_1653) ? _1748 : min(_1653, _1748));
        float _2033 = isnan(_2030) ? _2032 : (isnan(_2032) ? _2030 : min(_2032, _2030));
        float _2037 = (_2033 * _1510) + _1499;
        float _2038 = (_2033 * _1513) + _1503;
        float _2039 = (_2033 * _1516) + _1507;
        float _2040 = _2033 * 9.9999997473787516355514526367188e-05;
        float _2041 = (-1.0) - _2040;
        float _2043 = _2040 + 1.0;
        float frontier_phi_25_48_ladder;
        float frontier_phi_25_48_ladder_1;
        float frontier_phi_25_48_ladder_2;
        if ((_2039 > _2043) || ((_2039 < _2041) || ((_2038 > _2043) || ((_2038 < _2041) || ((_2037 < _2041) || (_2037 > _2043))))))
        {
            frontier_phi_25_48_ladder = 0.0;
            frontier_phi_25_48_ladder_1 = 0.0;
            frontier_phi_25_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2161 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2039, cbModelParam._m0[17u].z, fma(_2038, cbModelParam._m0[17u].y, _2037 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2039, cbModelParam._m0[18u].z, fma(_2038, cbModelParam._m0[18u].y, _2037 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2039, cbModelParam._m0[19u].z, fma(_2038, cbModelParam._m0[19u].y, _2037 * cbModelParam._m0[19u].x))), _1442);
            frontier_phi_25_48_ladder = _2161.z * cbModelParam._m0[1u].z;
            frontier_phi_25_48_ladder_1 = _2161.y * cbModelParam._m0[1u].z;
            frontier_phi_25_48_ladder_2 = _2161.x * cbModelParam._m0[1u].z;
        }
        _1535 = frontier_phi_25_48_ladder_2;
        _1537 = frontier_phi_25_48_ladder_1;
        _1539 = frontier_phi_25_48_ladder;
    }
    else
    {
        vec4 _1519 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_506, _507, _508), _1442);
        _1535 = _1519.x * cbModelParam._m0[1u].z;
        _1537 = _1519.y * cbModelParam._m0[1u].z;
        _1539 = _1519.z * cbModelParam._m0[1u].z;
    }
    float _1552 = (((_533 * _483) + _534) * _498) * ((cbModelParam._m0[1u].w * (_1535 - _1433)) + _1433);
    float _1554 = (((_533 * _485) + _534) * _498) * ((cbModelParam._m0[1u].w * (_1537 - _1435)) + _1435);
    float _1556 = (((_533 * _486) + _534) * _498) * ((cbModelParam._m0[1u].w * (_1539 - _1437)) + _1437);
    float _1559 = fma(_1556, cbSceneParam._m0[89u].z, fma(_1554, cbSceneParam._m0[89u].y, _1552 * cbSceneParam._m0[89u].x));
    float _1562 = fma(_1556, cbSceneParam._m0[90u].z, fma(_1554, cbSceneParam._m0[90u].y, _1552 * cbSceneParam._m0[90u].x));
    float _1565 = fma(_1556, cbSceneParam._m0[91u].z, fma(_1554, cbSceneParam._m0[91u].y, _1552 * cbSceneParam._m0[91u].x));
    vec4 _1573 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_417, _418));
    float _1575 = _1573.w;
    float _1587 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1575);
    float _1588 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1575);
    float _1589 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1575);
    uvec4 _1593 = floatBitsToUint(cbInstanceData._m0[_457 + 5u]);
    uint _1595 = _1593.x * 14u;
    uint _1596 = _1595 + 13u;
    float _1603 = _498 + (-1.0);
    float _1608 = (cbLight._m0[_1596].x * _1603) + 1.0;
    float _1609 = (cbLight._m0[_1596].y * _1603) + 1.0;
    float _1610 = (cbLight._m0[_1596].z * _1603) + 1.0;
    float _1611 = (cbLight._m0[_1596].w * _1603) + 1.0;
    uint _1613 = _1595 + 4u;
    float _1625 = dot(vec3(cbLight._m0[_1595].xyz), vec3(_312, _313, _314));
    float _1628 = isnan(1.0) ? _1608 : (isnan(_1608) ? 1.0 : min(_1608, 1.0));
    float _1629 = cbLight._m0[_1613].x * _1587;
    float _1630 = cbLight._m0[_1613].y * _1588;
    float _1631 = cbLight._m0[_1613].z * _1589;
    uint _1632 = _1595 + 5u;
    float _1644 = dot(vec3(cbLight._m0[_1595 | 1u].xyz), vec3(_312, _313, _314));
    float _1647 = isnan(1.0) ? _1609 : (isnan(_1609) ? 1.0 : min(_1609, 1.0));
    float _1712;
    float _1713;
    float _1714;
    if (_317 == 0.0)
    {
        float _4075 = isnan(0.0) ? _1625 : (isnan(_1625) ? 0.0 : max(_1625, 0.0));
        float _4086 = isnan(0.0) ? _1644 : (isnan(_1644) ? 0.0 : max(_1644, 0.0));
        float _1666 = (isnan(1.0) ? _4075 : (isnan(_4075) ? 1.0 : min(_4075, 1.0))) * 0.3183098733425140380859375;
        float _1668 = (isnan(1.0) ? _4086 : (isnan(_4086) ? 1.0 : min(_4086, 1.0))) * 0.3183098733425140380859375;
        _1712 = ((cbLight._m0[_1632].x * _1647) * _1668) + ((_1629 * _1628) * _1666);
        _1713 = ((_1647 * cbLight._m0[_1632].y) * _1668) + ((_1630 * _1628) * _1666);
        _1714 = ((_1647 * cbLight._m0[_1632].z) * _1668) + ((_1631 * _1628) * _1666);
    }
    else
    {
        float _1678 = _1625 + _317;
        float _1681 = (_317 * 2.0) + 1.0;
        float _1682 = (isnan(0.0) ? _1678 : (isnan(_1678) ? 0.0 : max(_1678, 0.0))) / _1681;
        float _1689 = _1644 + _317;
        float _1691 = (isnan(0.0) ? _1689 : (isnan(_1689) ? 0.0 : max(_1689, 0.0))) / _1681;
        _1712 = (((_1691 * cbLight._m0[_1632].x) * _1647) + ((_1629 * _1682) * _1628)) * 0.3183098733425140380859375;
        _1713 = (((_1691 * cbLight._m0[_1632].y) * _1647) + ((_1630 * _1682) * _1628)) * 0.3183098733425140380859375;
        _1714 = (((_1691 * cbLight._m0[_1632].z) * _1647) + ((_1631 * _1682) * _1628)) * 0.3183098733425140380859375;
    }
    uvec4 _1718 = floatBitsToUint(cbLight._m0[_1595 + 12u]);
    bool _1720 = _1718.x == 0u;
    float _1753;
    float _1755;
    float _1757;
    if (_1720)
    {
        _1753 = _1712;
        _1755 = _1713;
        _1757 = _1714;
    }
    else
    {
        uint _1761 = _1595 + 6u;
        float _1777 = (dot(vec3(cbLight._m0[_1595 + 2u].xyz), vec3(_312, _313, _314)) * 0.5) + 0.5;
        float _1778 = _1777 * _1777;
        float _4107 = isnan(0.0) ? _1778 : (isnan(_1778) ? 0.0 : max(_1778, 0.0));
        float _1779 = isnan(1.0) ? _4107 : (isnan(_4107) ? 1.0 : min(_4107, 1.0));
        float _1780 = isnan(1.0) ? _1610 : (isnan(_1610) ? 1.0 : min(_1610, 1.0));
        _1753 = (((cbLight._m0[_1761].x * 0.3183098733425140380859375) * _1779) * _1780) + _1712;
        _1755 = (((cbLight._m0[_1761].y * 0.3183098733425140380859375) * _1779) * _1780) + _1713;
        _1757 = (((cbLight._m0[_1761].z * 0.3183098733425140380859375) * _1779) * _1780) + _1714;
    }
    bool _1760 = _1718.y == 0u;
    float _1815;
    float _1817;
    float _1819;
    if (_1760)
    {
        _1815 = _1753;
        _1817 = _1755;
        _1819 = _1757;
    }
    else
    {
        uint _2001 = _1595 + 7u;
        float _2017 = (dot(vec3(cbLight._m0[_1595 + 3u].xyz), vec3(_312, _313, _314)) * 0.5) + 0.5;
        float _2018 = _2017 * _2017;
        float _4123 = isnan(0.0) ? _2018 : (isnan(_2018) ? 0.0 : max(_2018, 0.0));
        float _2019 = isnan(1.0) ? _4123 : (isnan(_4123) ? 1.0 : min(_4123, 1.0));
        float _2020 = isnan(1.0) ? _1611 : (isnan(_1611) ? 1.0 : min(_1611, 1.0));
        _1815 = (((cbLight._m0[_2001].x * 0.3183098733425140380859375) * _2019) * _2020) + _1753;
        _1817 = (((cbLight._m0[_2001].y * 0.3183098733425140380859375) * _2019) * _2020) + _1755;
        _1819 = (((cbLight._m0[_2001].z * 0.3183098733425140380859375) * _2019) * _2020) + _1757;
    }
    uint _1824 = _1595 + 8u;
    float _1840 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1595].w)) * _316) * 0.949999988079071044921875);
    float _1841 = _1840 * _1840;
    float _1842 = cbLight._m0[_1595].x + _396;
    float _1843 = cbLight._m0[_1595].y + _397;
    float _1844 = cbLight._m0[_1595].z + _398;
    float _1848 = inversesqrt(dot(vec3(_1842, _1843, _1844), vec3(_1842, _1843, _1844)));
    float _1849 = _1848 * _1842;
    float _1850 = _1848 * _1843;
    float _1851 = _1848 * _1844;
    float _1852 = dot(vec3(_312, _313, _314), vec3(cbLight._m0[_1595].xyz));
    float _4139 = isnan(0.0) ? _1852 : (isnan(_1852) ? 0.0 : max(_1852, 0.0));
    float _1855 = isnan(1.0) ? _4139 : (isnan(_4139) ? 1.0 : min(_4139, 1.0));
    float _4150 = isnan(0.0) ? _499 : (isnan(_499) ? 0.0 : max(_499, 0.0));
    float _1856 = isnan(1.0) ? _4150 : (isnan(_4150) ? 1.0 : min(_4150, 1.0));
    float _1857 = dot(vec3(_312, _313, _314), vec3(_1849, _1850, _1851));
    float _4161 = isnan(0.0) ? _1857 : (isnan(_1857) ? 0.0 : max(_1857, 0.0));
    float _1860 = isnan(1.0) ? _4161 : (isnan(_4161) ? 1.0 : min(_4161, 1.0));
    float _1861 = dot(vec3(cbLight._m0[_1595].xyz), vec3(_1849, _1850, _1851));
    float _4172 = isnan(0.0) ? _1861 : (isnan(_1861) ? 0.0 : max(_1861, 0.0));
    float _1865 = _1841 * _1841;
    float _1869 = ((_1860 * _1860) * (_1865 + (-1.0))) + 1.0;
    float _1877 = exp2(log2(1.0 - (isnan(1.0) ? _4172 : (isnan(_4172) ? 1.0 : min(_4172, 1.0)))) * 5.0);
    float _1878 = 0.959999978542327880859375 - _480;
    float _1880 = 0.959999978542327880859375 - _481;
    float _1881 = 0.959999978542327880859375 - _482;
    float _1888 = 1.0 - _1841;
    float _1899 = (0.5 / (((_1856 * ((_1855 * _1888) + _1841)) + 9.9999999392252902907785028219223e-09) + (((_1856 * _1888) + _1841) * _1855))) * _1855;
    float _4183 = isnan(0.0) ? _1899 : (isnan(_1899) ? 0.0 : max(_1899, 0.0));
    float _1901 = (isnan(1.0) ? _4183 : (isnan(_4183) ? 1.0 : min(_4183, 1.0))) * (_1865 / ((_1869 * _1869) * 3.141590118408203125));
    float _1902 = isnan(1.0) ? _1608 : (isnan(_1608) ? 1.0 : min(_1608, 1.0));
    uint _1915 = _1595 | 1u;
    uint _1919 = _1595 + 9u;
    float _1933 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1915].w)) * _316) * 0.949999988079071044921875);
    float _1934 = _1933 * _1933;
    float _1935 = cbLight._m0[_1915].x + _396;
    float _1936 = cbLight._m0[_1915].y + _397;
    float _1937 = cbLight._m0[_1915].z + _398;
    float _1941 = inversesqrt(dot(vec3(_1935, _1936, _1937), vec3(_1935, _1936, _1937)));
    float _1942 = _1941 * _1935;
    float _1943 = _1941 * _1936;
    float _1944 = _1941 * _1937;
    float _1945 = dot(vec3(_312, _313, _314), vec3(cbLight._m0[_1915].xyz));
    float _4199 = isnan(0.0) ? _1945 : (isnan(_1945) ? 0.0 : max(_1945, 0.0));
    float _1948 = isnan(1.0) ? _4199 : (isnan(_4199) ? 1.0 : min(_4199, 1.0));
    float _1949 = dot(vec3(_312, _313, _314), vec3(_1942, _1943, _1944));
    float _4210 = isnan(0.0) ? _1949 : (isnan(_1949) ? 0.0 : max(_1949, 0.0));
    float _1952 = isnan(1.0) ? _4210 : (isnan(_4210) ? 1.0 : min(_4210, 1.0));
    float _1953 = dot(vec3(cbLight._m0[_1915].xyz), vec3(_1942, _1943, _1944));
    float _4221 = isnan(0.0) ? _1953 : (isnan(_1953) ? 0.0 : max(_1953, 0.0));
    float _1957 = _1934 * _1934;
    float _1961 = ((_1952 * _1952) * (_1957 + (-1.0))) + 1.0;
    float _1968 = exp2(log2(1.0 - (isnan(1.0) ? _4221 : (isnan(_4221) ? 1.0 : min(_4221, 1.0)))) * 5.0);
    float _1975 = 1.0 - _1934;
    float _1985 = (0.5 / (((_1856 * ((_1948 * _1975) + _1934)) + 9.9999999392252902907785028219223e-09) + (((_1856 * _1975) + _1934) * _1948))) * _1948;
    float _4232 = isnan(0.0) ? _1985 : (isnan(_1985) ? 0.0 : max(_1985, 0.0));
    float _1987 = (isnan(1.0) ? _4232 : (isnan(_4232) ? 1.0 : min(_4232, 1.0))) * (_1957 / ((_1961 * _1961) * 3.141590118408203125));
    float _1988 = isnan(1.0) ? _1609 : (isnan(_1609) ? 1.0 : min(_1609, 1.0));
    float _1998 = (((((_1968 * _1878) + _483) * cbLight._m0[_1919].x) * _1987) * _1988) + ((((cbLight._m0[_1824].x * _1587) * ((_1877 * _1878) + _483)) * _1901) * _1902);
    float _1999 = (((((_1968 * _1880) + _485) * cbLight._m0[_1919].y) * _1987) * _1988) + ((((cbLight._m0[_1824].y * _1588) * ((_1877 * _1880) + _485)) * _1901) * _1902);
    float _2000 = (((((_1968 * _1881) + _486) * cbLight._m0[_1919].z) * _1987) * _1988) + ((((cbLight._m0[_1824].z * _1589) * ((_1877 * _1881) + _486)) * _1901) * _1902);
    float _2056;
    float _2058;
    float _2060;
    if (_1720)
    {
        _2056 = _1998;
        _2058 = _1999;
        _2060 = _2000;
    }
    else
    {
        uint _2062 = _1595 + 2u;
        uint _2066 = _1595 + 10u;
        float _2080 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2062].w)) * _316) * 0.949999988079071044921875);
        float _2081 = _2080 * _2080;
        float _2082 = cbLight._m0[_2062].x + _396;
        float _2083 = cbLight._m0[_2062].y + _397;
        float _2084 = cbLight._m0[_2062].z + _398;
        float _2088 = inversesqrt(dot(vec3(_2082, _2083, _2084), vec3(_2082, _2083, _2084)));
        float _2089 = _2088 * _2082;
        float _2090 = _2088 * _2083;
        float _2091 = _2088 * _2084;
        float _2092 = dot(vec3(_312, _313, _314), vec3(cbLight._m0[_2062].xyz));
        float _4248 = isnan(0.0) ? _2092 : (isnan(_2092) ? 0.0 : max(_2092, 0.0));
        float _2095 = isnan(1.0) ? _4248 : (isnan(_4248) ? 1.0 : min(_4248, 1.0));
        float _2096 = dot(vec3(_312, _313, _314), vec3(_2089, _2090, _2091));
        float _4259 = isnan(0.0) ? _2096 : (isnan(_2096) ? 0.0 : max(_2096, 0.0));
        float _2099 = isnan(1.0) ? _4259 : (isnan(_4259) ? 1.0 : min(_4259, 1.0));
        float _2100 = dot(vec3(cbLight._m0[_2062].xyz), vec3(_2089, _2090, _2091));
        float _4270 = isnan(0.0) ? _2100 : (isnan(_2100) ? 0.0 : max(_2100, 0.0));
        float _2104 = _2081 * _2081;
        float _2108 = ((_2099 * _2099) * (_2104 + (-1.0))) + 1.0;
        float _2115 = exp2(log2(1.0 - (isnan(1.0) ? _4270 : (isnan(_4270) ? 1.0 : min(_4270, 1.0)))) * 5.0);
        float _2122 = 1.0 - _2081;
        float _2132 = (0.5 / (((_1856 * ((_2095 * _2122) + _2081)) + 9.9999999392252902907785028219223e-09) + (((_1856 * _2122) + _2081) * _2095))) * _2095;
        float _4281 = isnan(0.0) ? _2132 : (isnan(_2132) ? 0.0 : max(_2132, 0.0));
        float _2134 = (isnan(1.0) ? _4281 : (isnan(_4281) ? 1.0 : min(_4281, 1.0))) * (_2104 / ((_2108 * _2108) * 3.141590118408203125));
        float _2135 = isnan(1.0) ? _1610 : (isnan(_1610) ? 1.0 : min(_1610, 1.0));
        _2056 = (((((_2115 * _1878) + _483) * cbLight._m0[_2066].x) * _2134) * _2135) + _1998;
        _2058 = (((((_2115 * _1880) + _485) * cbLight._m0[_2066].y) * _2134) * _2135) + _1999;
        _2060 = (((((_2115 * _1881) + _486) * cbLight._m0[_2066].z) * _2134) * _2135) + _2000;
    }
    float _2166;
    float _2168;
    float _2170;
    if (_1760)
    {
        _2166 = _2056;
        _2168 = _2058;
        _2170 = _2060;
    }
    else
    {
        uint _2177 = _1595 + 3u;
        uint _2181 = _1595 + 11u;
        float _2195 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2177].w)) * _316) * 0.949999988079071044921875);
        float _2196 = _2195 * _2195;
        float _2197 = cbLight._m0[_2177].x + _396;
        float _2198 = cbLight._m0[_2177].y + _397;
        float _2199 = cbLight._m0[_2177].z + _398;
        float _2203 = inversesqrt(dot(vec3(_2197, _2198, _2199), vec3(_2197, _2198, _2199)));
        float _2204 = _2203 * _2197;
        float _2205 = _2203 * _2198;
        float _2206 = _2203 * _2199;
        float _2207 = dot(vec3(_312, _313, _314), vec3(cbLight._m0[_2177].xyz));
        float _4297 = isnan(0.0) ? _2207 : (isnan(_2207) ? 0.0 : max(_2207, 0.0));
        float _2210 = isnan(1.0) ? _4297 : (isnan(_4297) ? 1.0 : min(_4297, 1.0));
        float _2211 = dot(vec3(_312, _313, _314), vec3(_2204, _2205, _2206));
        float _4308 = isnan(0.0) ? _2211 : (isnan(_2211) ? 0.0 : max(_2211, 0.0));
        float _2214 = isnan(1.0) ? _4308 : (isnan(_4308) ? 1.0 : min(_4308, 1.0));
        float _2215 = dot(vec3(cbLight._m0[_2177].xyz), vec3(_2204, _2205, _2206));
        float _4319 = isnan(0.0) ? _2215 : (isnan(_2215) ? 0.0 : max(_2215, 0.0));
        float _2219 = _2196 * _2196;
        float _2223 = ((_2214 * _2214) * (_2219 + (-1.0))) + 1.0;
        float _2230 = exp2(log2(1.0 - (isnan(1.0) ? _4319 : (isnan(_4319) ? 1.0 : min(_4319, 1.0)))) * 5.0);
        float _2237 = 1.0 - _2196;
        float _2247 = (0.5 / (((_1856 * ((_2210 * _2237) + _2196)) + 9.9999999392252902907785028219223e-09) + (((_1856 * _2237) + _2196) * _2210))) * _2210;
        float _4330 = isnan(0.0) ? _2247 : (isnan(_2247) ? 0.0 : max(_2247, 0.0));
        float _2249 = (isnan(1.0) ? _4330 : (isnan(_4330) ? 1.0 : min(_4330, 1.0))) * (_2219 / ((_2223 * _2223) * 3.141590118408203125));
        float _2250 = isnan(1.0) ? _1611 : (isnan(_1611) ? 1.0 : min(_1611, 1.0));
        _2166 = (((((_2230 * _1878) + _483) * cbLight._m0[_2181].x) * _2249) * _2250) + _2056;
        _2168 = (((((_2230 * _1880) + _485) * cbLight._m0[_2181].y) * _2249) * _2250) + _2058;
        _2170 = (((((_2230 * _1881) + _486) * cbLight._m0[_2181].z) * _2249) * _2250) + _2060;
    }
    float _2359;
    float _2361;
    float _2363;
    float _2365;
    float _2367;
    float _2369;
    if (_1593.y == 0u)
    {
        float _2299 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2300 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2299;
        float _2301 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2299;
        float _2302 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2299;
        uvec4 _2314 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2315 = _2314.x;
        uint _2326 = uint((float(_2314.y) * floor(float(uint(cbSceneParam._m0[85u].y * _418) / _2315))) + floor(float(uint(cbSceneParam._m0[85u].x * _417) / _2315)));
        float _2336 = (log2(_2302 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2337 = isnan(0.0) ? _2336 : (isnan(_2336) ? 0.0 : max(_2336, 0.0));
        uint _2340 = uint(isnan(14.0) ? _2337 : (isnan(_2337) ? 14.0 : min(_2337, 14.0)));
        uvec4 _2345 = texelFetch(g_lightClusterGridBuffer, int(((_2340 << 2u) + (_2326 << 6u)) >> 2u));
        uint _2346 = _2345.x;
        uint _2347 = _2314.z;
        float _2372;
        float _2374;
        float _2376;
        float _2378;
        float _2380;
        float _2382;
        if (((((1u << ((_2347 >> 4u) & 15u)) + 4294967295u) & _2346) == 0u) || ((_2347 & 240u) == 0u))
        {
            _2372 = 0.0;
            _2374 = 0.0;
            _2376 = 0.0;
            _2378 = 0.0;
            _2380 = 0.0;
            _2382 = 0.0;
        }
        else
        {
            float _2373;
            float _2375;
            float _2377;
            float _2379;
            float _2381;
            float _2383;
            float _2556 = 0.0;
            float _2557 = 0.0;
            float _2558 = 0.0;
            float _2559 = 0.0;
            float _2560 = 0.0;
            float _2561 = 0.0;
            uint _2562 = 0u;
            uint _2571;
            bool _2572;
            for (;;)
            {
                _2571 = texelFetch(g_lightClassification, int((((_2340 << 5u) + (_2326 << 9u)) + (_2562 << 2u)) >> 2u)).x;
                _2572 = _2571 == 0u;
                float frontier_phi_67_pred;
                float frontier_phi_67_pred_1;
                float frontier_phi_67_pred_2;
                float frontier_phi_67_pred_3;
                float frontier_phi_67_pred_4;
                float frontier_phi_67_pred_5;
                if (_2572)
                {
                    frontier_phi_67_pred = _2556;
                    frontier_phi_67_pred_1 = _2561;
                    frontier_phi_67_pred_2 = _2560;
                    frontier_phi_67_pred_3 = _2559;
                    frontier_phi_67_pred_4 = _2558;
                    frontier_phi_67_pred_5 = _2557;
                }
                else
                {
                    float _2757;
                    float _2758;
                    float _2759;
                    float _2760;
                    float _2761;
                    float _2762;
                    uint _2763;
                    _2757 = _2556;
                    _2758 = _2557;
                    _2759 = _2558;
                    _2760 = _2559;
                    _2761 = _2560;
                    _2762 = _2561;
                    _2763 = _2571;
                    float _2672;
                    float _2673;
                    float _2674;
                    float _2675;
                    float _2676;
                    float _2677;
                    for (;;)
                    {
                        uint _2767 = uint(findLSB(_2763)) + (_2562 << 5u);
                        uint _2764 = (_2763 + 4294967295u) & _2763;
                        uint _2769 = _2767 * 48u;
                        vec4 _2783 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2769)).x, texelFetch(g_PointLightRenderingBuffer, int(_2769 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2769 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2769 + 3u)).x));
                        uint _2789 = (_2767 * 48u) + 4u;
                        vec4 _2802 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2789)).x, texelFetch(g_PointLightRenderingBuffer, int(_2789 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2789 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2789 + 3u)).x));
                        float _2803 = _2802.x;
                        float _2804 = _2802.y;
                        float _2805 = _2802.z;
                        uint _2808 = (_2767 * 48u) + 8u;
                        vec3 _2819 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2808)).x, texelFetch(g_PointLightRenderingBuffer, int(_2808 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2808 + 2u)).x));
                        uint _2824 = (_2767 * 48u) + 12u;
                        vec2 _2832 = uintBitsToFloat(uvec2(texelFetch(g_PointLightRenderingBuffer, int(_2824)).x, texelFetch(g_PointLightRenderingBuffer, int(_2824 + 1u)).x));
                        float _2838 = inversesqrt(dot(vec3(_2300, _2301, _2302), vec3(_2300, _2301, _2302)));
                        float _2839 = _2838 * _2300;
                        float _2840 = _2838 * _2301;
                        float _2841 = _2838 * _2302;
                        float _2842 = _2783.x - _2300;
                        float _2843 = _2783.y - _2301;
                        float _2844 = _2783.z - _2302;
                        float _2845 = dot(vec3(_2842, _2843, _2844), vec3(_2842, _2843, _2844));
                        float _2848 = inversesqrt(_2845);
                        float _2849 = _2848 * _2842;
                        float _2850 = _2848 * _2843;
                        float _2851 = _2848 * _2844;
                        float _2852 = dot(vec3(_438, _441, _444), vec3(_2849, _2850, _2851));
                        float _2857 = 1.0 - (_2845 * _2783.w);
                        float _4356 = isnan(0.0) ? _2857 : (isnan(_2857) ? 0.0 : max(_2857, 0.0));
                        float _2858 = isnan(1.0) ? _4356 : (isnan(_4356) ? 1.0 : min(_4356, 1.0));
                        float _2859 = sqrt(_2845) * _2802.w;
                        float _2862 = 1.39999997615814208984375 / (_2859 + 1.39999997615814208984375);
                        float _2863 = _2862 * _2862;
                        float _2864 = 1.0 - _2863;
                        float _2866 = (_2864 * _2864) * _317;
                        float _2869 = ((_2864 * _2852) + _2863) + _2866;
                        float _2874 = _2859 * _2859;
                        float _2879 = ((isnan(0.0) ? _2869 : (isnan(_2869) ? 0.0 : max(_2869, 0.0))) * _2858) / (((_2866 * 2.0) + 1.0) * ((_2874 * 0.699999988079071044921875) + 1.0));
                        float _2883 = dot(vec3(_2849, _2850, _2851), vec3(_2839, _2840, _2841));
                        float _4372 = isnan(0.0) ? _2883 : (isnan(_2883) ? 0.0 : max(_2883, 0.0));
                        float _2890 = dot(vec3((-0.0) - _2839, (-0.0) - _2840, (-0.0) - _2841), vec3(_438, _441, _444)) + 1.0;
                        float _2892 = (isnan(0.0) ? _2890 : (isnan(_2890) ? 0.0 : max(_2890, 0.0))) * 0.5;
                        float _2899 = ((_2892 * _2892) * _2832.x) * exp2((_2832.y * 32.0) * log2(isnan(1.0) ? _4372 : (isnan(_4372) ? 1.0 : min(_4372, 1.0))));
                        float _2901 = _317 / (_317 + 1.0);
                        float _2917 = (-0.0) - _2300;
                        float _2918 = (-0.0) - _2301;
                        float _2919 = (-0.0) - _2302;
                        float _2923 = inversesqrt(dot(vec3(_2917, _2918, _2919), vec3(_2917, _2918, _2919)));
                        float _2924 = _2923 * _2917;
                        float _2925 = _2923 * _2918;
                        float _2926 = _2923 * _2919;
                        float _2934 = exp2(log2(1.0 / ((_2874 * 3.5) + 5.0)) * 0.25);
                        float _2935 = 1.0 - _514;
                        float _2942 = sqrt(1.0 - ((1.0 - (_2935 * _2935)) * (1.0 - (_2934 * _2934))));
                        float _2943 = _2942 * _2942;
                        float _2944 = _2943 * _2943;
                        float _2945 = _2924 + _2849;
                        float _2946 = _2925 + _2850;
                        float _2947 = _2926 + _2851;
                        float _2951 = inversesqrt(dot(vec3(_2945, _2946, _2947), vec3(_2945, _2946, _2947)));
                        float _2955 = dot(vec3(_438, _441, _444), vec3(_2924, _2925, _2926));
                        float _4388 = isnan(0.0) ? _2955 : (isnan(_2955) ? 0.0 : max(_2955, 0.0));
                        float _2958 = isnan(1.0) ? _4388 : (isnan(_4388) ? 1.0 : min(_4388, 1.0));
                        float _2959 = dot(vec3(_438, _441, _444), vec3(_2951 * _2945, _2951 * _2946, _2951 * _2947));
                        float _4399 = isnan(0.0) ? _2959 : (isnan(_2959) ? 0.0 : max(_2959, 0.0));
                        float _2962 = isnan(1.0) ? _4399 : (isnan(_4399) ? 1.0 : min(_4399, 1.0));
                        float _2966 = ((_2962 * _2962) * (_2944 + (-1.0))) + 1.0;
                        float _2967 = _2862 * _2943;
                        float _2968 = _2967 * _2967;
                        float _2971 = ((1.0 - _2968) * _2852) + _2968;
                        float _4410 = isnan(0.0) ? _2971 : (isnan(_2971) ? 0.0 : max(_2971, 0.0));
                        float _2972 = isnan(1.0) ? _4410 : (isnan(_4410) ? 1.0 : min(_4410, 1.0));
                        float _2973 = 1.0 - _2943;
                        float _2983 = (0.5 / (((_2972 * ((_2958 * _2973) + _2943)) + 9.9999999392252902907785028219223e-09) + (((_2972 * _2973) + _2943) * _2958))) * _2972;
                        float _4421 = isnan(0.0) ? _2983 : (isnan(_2983) ? 0.0 : max(_2983, 0.0));
                        float _2994 = (((_2944 * 3.1415927410125732421875) * (isnan(1.0) ? _4421 : (isnan(_4421) ? 1.0 : min(_4421, 1.0)))) / ((_2966 * _2966) * ((_2874 * 2.1991131305694580078125) + 3.141590118408203125))) * _2858;
                        _2675 = (((((_2803 * 0.3183098733425140380859375) * _2901) * _2899) + _2803) * _2879) + _2760;
                        _2676 = (((((_2804 * 0.3183098733425140380859375) * _2901) * _2899) + _2804) * _2879) + _2761;
                        _2677 = (((((_2805 * 0.3183098733425140380859375) * _2901) * _2899) + _2805) * _2879) + _2762;
                        _2672 = (_2994 * _2819.x) + _2757;
                        _2673 = (_2994 * _2819.y) + _2758;
                        _2674 = (_2994 * _2819.z) + _2759;
                        if (_2764 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2757 = _2672;
                            _2758 = _2673;
                            _2759 = _2674;
                            _2760 = _2675;
                            _2761 = _2676;
                            _2762 = _2677;
                            _2763 = _2764;
                        }
                    }
                    frontier_phi_67_pred = _2672;
                    frontier_phi_67_pred_1 = _2677;
                    frontier_phi_67_pred_2 = _2676;
                    frontier_phi_67_pred_3 = _2675;
                    frontier_phi_67_pred_4 = _2674;
                    frontier_phi_67_pred_5 = _2673;
                }
                _2373 = frontier_phi_67_pred;
                _2383 = frontier_phi_67_pred_1;
                _2381 = frontier_phi_67_pred_2;
                _2379 = frontier_phi_67_pred_3;
                _2377 = frontier_phi_67_pred_4;
                _2375 = frontier_phi_67_pred_5;
                uint _2563 = _2562 + 1u;
                if (_2563 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2556 = _2373;
                    _2557 = _2375;
                    _2558 = _2377;
                    _2559 = _2379;
                    _2560 = _2381;
                    _2561 = _2383;
                    _2562 = _2563;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2372 = _2373;
            _2374 = _2375;
            _2376 = _2377;
            _2378 = _2379;
            _2380 = _2381;
            _2382 = _2383;
        }
        uvec4 _2386 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2387 = _2386.z;
        uint _2389 = (_2387 >> 8u) & 15u;
        float _2524;
        float _2526;
        float _2528;
        float _2530;
        float _2532;
        float _2534;
        if (((4294967295u << _2389) & _2346) == 0u)
        {
            _2524 = _2372;
            _2526 = _2374;
            _2528 = _2376;
            _2530 = _2378;
            _2532 = _2380;
            _2534 = _2382;
        }
        else
        {
            float _2549 = inversesqrt(dot(vec3(_2300, _2301, _2302), vec3(_2300, _2301, _2302)));
            float _2550 = _2549 * _2300;
            float _2551 = _2549 * _2301;
            float _2552 = _2549 * _2302;
            float frontier_phi_61_62_ladder;
            float frontier_phi_61_62_ladder_1;
            float frontier_phi_61_62_ladder_2;
            float frontier_phi_61_62_ladder_3;
            float frontier_phi_61_62_ladder_4;
            float frontier_phi_61_62_ladder_5;
            if (_2389 < ((_2387 >> 12u) & 15u))
            {
                float _2525;
                float _2527;
                float _2529;
                float _2531;
                float _2533;
                float _2535;
                float _2740 = _2372;
                float _2741 = _2374;
                float _2742 = _2376;
                float _2743 = _2378;
                float _2744 = _2380;
                float _2745 = _2382;
                uint _2746 = _2389;
                uint _2755;
                bool _2756;
                for (;;)
                {
                    _2755 = texelFetch(g_lightClassification, int((((_2340 << 5u) + (_2326 << 9u)) + (_2746 << 2u)) >> 2u)).x;
                    _2756 = _2755 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_2756)
                    {
                        frontier_phi_79_pred = _2745;
                        frontier_phi_79_pred_1 = _2744;
                        frontier_phi_79_pred_2 = _2743;
                        frontier_phi_79_pred_3 = _2742;
                        frontier_phi_79_pred_4 = _2741;
                        frontier_phi_79_pred_5 = _2740;
                    }
                    else
                    {
                        float _3042;
                        float _3043;
                        float _3044;
                        float _3045;
                        float _3046;
                        float _3047;
                        float _3395;
                        float _3396;
                        float _3397;
                        float _3398;
                        float _3399;
                        float _3400;
                        float _3064 = _2740;
                        float _3065 = _2741;
                        float _3066 = _2742;
                        float _3067 = _2743;
                        float _3068 = _2744;
                        float _3069 = _2745;
                        uint _3070 = _2755;
                        uint _3071;
                        vec4 _3096;
                        float _3097;
                        vec4 _3112;
                        float _3113;
                        float _3114;
                        float _3115;
                        vec3 _3127;
                        vec2 _3136;
                        vec4 _3152;
                        vec4 _3168;
                        float _3215;
                        bool _3216;
                        for (;;)
                        {
                            uint _3081 = ((_2746 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3070));
                            _3071 = (_3070 + 4294967295u) & _3070;
                            uint _3083 = _3081 * 40u;
                            _3096 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3083)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3083 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3083 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3083 + 3u)).x));
                            _3097 = _3096.w;
                            uint _3099 = (_3081 * 40u) + 4u;
                            _3112 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3099)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3099 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3099 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3099 + 3u)).x));
                            _3113 = _3112.x;
                            _3114 = _3112.y;
                            _3115 = _3112.z;
                            uint _3117 = (_3081 * 40u) + 8u;
                            _3127 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3117)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3117 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3117 + 2u)).x));
                            uint _3129 = (_3081 * 40u) + 12u;
                            _3136 = uintBitsToFloat(uvec2(texelFetch(g_SpotLightRenderingBuffer, int(_3129)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3129 + 1u)).x));
                            uint _3139 = (_3081 * 40u) + 16u;
                            _3152 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3139)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3139 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3139 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3139 + 3u)).x));
                            uint _3155 = (_3081 * 40u) + 20u;
                            _3168 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3155)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3155 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3155 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3155 + 3u)).x));
                            uint _3171 = (_3081 * 40u) + 24u;
                            vec4 _3184 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3171)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3171 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3171 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3171 + 3u)).x));
                            uint _3190 = (_3081 * 40u) + 28u;
                            vec4 _3203 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3190)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3190 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3190 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3190 + 3u)).x));
                            _3215 = fma(_2302, _3203.z, fma(_2301, _3203.y, _3203.x * _2300)) + _3203.w;
                            _3216 = !((fma(_2302, _3184.z, fma(_2301, _3184.y, _3184.x * _2300)) + _3184.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3216)
                            {
                                float _3242 = _3096.x - _2300;
                                float _3243 = _3096.y - _2301;
                                float _3244 = _3096.z - _2302;
                                float _3245 = dot(vec3(_3242, _3243, _3244), vec3(_3242, _3243, _3244));
                                float _3248 = inversesqrt(_3245);
                                float _3249 = _3248 * _3242;
                                float _3250 = _3248 * _3243;
                                float _3251 = _3248 * _3244;
                                float _3255 = 1.0 - (_3245 / (_3097 * _3097));
                                float _4432 = isnan(0.0) ? _3255 : (isnan(_3255) ? 0.0 : max(_3255, 0.0));
                                float _3256 = isnan(1.0) ? _4432 : (isnan(_4432) ? 1.0 : min(_4432, 1.0));
                                float _3260 = sqrt(_3245) * _3112.w;
                                float _3262 = 1.39999997615814208984375 / (_3260 + 1.39999997615814208984375);
                                float _3263 = _3262 * _3262;
                                float _3264 = 1.0 - _3263;
                                float _3266 = (_3264 * _3264) * _317;
                                float _3269 = ((_3264 * dot(vec3(_3249, _3250, _3251), vec3(_438, _441, _444))) + _3263) + _3266;
                                float _3274 = _3260 * _3260;
                                float _3279 = (fma(_2302, _3152.z, fma(_2301, _3152.y, _3152.x * _2300)) + _3152.w) / _3215;
                                float _3280 = (fma(_2302, _3168.z, fma(_2301, _3168.y, _3168.x * _2300)) + _3168.w) / _3215;
                                float _3284 = 1.0 - dot(vec2(_3279, _3280), vec2(_3279, _3280));
                                float _4448 = isnan(0.0) ? _3284 : (isnan(_3284) ? 0.0 : max(_3284, 0.0));
                                float _3285 = isnan(1.0) ? _4448 : (isnan(_4448) ? 1.0 : min(_4448, 1.0));
                                float _3286 = _3285 * (((isnan(0.0) ? _3269 : (isnan(_3269) ? 0.0 : max(_3269, 0.0))) * _3256) / (((_3266 * 2.0) + 1.0) * ((_3274 * 0.699999988079071044921875) + 1.0)));
                                float _3287 = (-0.0) - _2550;
                                float _3288 = (-0.0) - _2551;
                                float _3289 = (-0.0) - _2552;
                                float _3290 = dot(vec3(_3249, _3250, _3251), vec3(_2550, _2551, _2552));
                                float _4459 = isnan(0.0) ? _3290 : (isnan(_3290) ? 0.0 : max(_3290, 0.0));
                                float _3297 = dot(vec3(_3287, _3288, _3289), vec3(_438, _441, _444)) + 1.0;
                                float _3299 = (isnan(0.0) ? _3297 : (isnan(_3297) ? 0.0 : max(_3297, 0.0))) * 0.5;
                                float _3306 = ((_3299 * _3299) * _3136.x) * exp2((_3136.y * 32.0) * log2(isnan(1.0) ? _4459 : (isnan(_4459) ? 1.0 : min(_4459, 1.0))));
                                float _3308 = _317 / (_317 + 1.0);
                                float _3329 = exp2(log2(1.0 / ((_3274 * 3.5) + 5.0)) * 0.25);
                                float _3330 = 1.0 - _514;
                                float _3337 = sqrt(1.0 - ((1.0 - (_3330 * _3330)) * (1.0 - (_3329 * _3329))));
                                float _3338 = _3337 * _3337;
                                float _3339 = _3338 * _3338;
                                float _3340 = _3249 - _2550;
                                float _3341 = _3250 - _2551;
                                float _3342 = _3251 - _2552;
                                float _3346 = inversesqrt(dot(vec3(_3340, _3341, _3342), vec3(_3340, _3341, _3342)));
                                float _3350 = dot(vec3(_438, _441, _444), vec3(_3287, _3288, _3289));
                                float _4475 = isnan(0.0) ? _3350 : (isnan(_3350) ? 0.0 : max(_3350, 0.0));
                                float _3353 = isnan(1.0) ? _4475 : (isnan(_4475) ? 1.0 : min(_4475, 1.0));
                                float _3354 = dot(vec3(_438, _441, _444), vec3(_3346 * _3340, _3346 * _3341, _3346 * _3342));
                                float _4486 = isnan(0.0) ? _3354 : (isnan(_3354) ? 0.0 : max(_3354, 0.0));
                                float _3357 = isnan(1.0) ? _4486 : (isnan(_4486) ? 1.0 : min(_4486, 1.0));
                                float _3361 = ((_3357 * _3357) * (_3339 + (-1.0))) + 1.0;
                                float _3362 = _3262 * _3338;
                                float _3363 = _3362 * _3362;
                                float _3369 = ((1.0 - _3363) * dot(vec3(_438, _441, _444), vec3(_3249, _3250, _3251))) + _3363;
                                float _4497 = isnan(0.0) ? _3369 : (isnan(_3369) ? 0.0 : max(_3369, 0.0));
                                float _3370 = isnan(1.0) ? _4497 : (isnan(_4497) ? 1.0 : min(_4497, 1.0));
                                float _3371 = 1.0 - _3338;
                                float _3381 = (0.5 / (((_3370 * ((_3353 * _3371) + _3338)) + 9.9999999392252902907785028219223e-09) + (((_3370 * _3371) + _3338) * _3353))) * _3370;
                                float _4508 = isnan(0.0) ? _3381 : (isnan(_3381) ? 0.0 : max(_3381, 0.0));
                                float _3391 = (_3285 * _3256) * (((_3339 * 3.1415927410125732421875) * (isnan(1.0) ? _4508 : (isnan(_4508) ? 1.0 : min(_4508, 1.0)))) / ((_3361 * _3361) * ((_3274 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = ((((_3115 * 0.3183098733425140380859375) * _3308) * _3306) + _3115) * _3286;
                                frontier_phi_88_pred_1 = ((((_3113 * 0.3183098733425140380859375) * _3308) * _3306) + _3113) * _3286;
                                frontier_phi_88_pred_2 = _3391 * _3127.z;
                                frontier_phi_88_pred_3 = _3391 * _3127.y;
                                frontier_phi_88_pred_4 = _3391 * _3127.x;
                                frontier_phi_88_pred_5 = ((((_3114 * 0.3183098733425140380859375) * _3308) * _3306) + _3114) * _3286;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3400 = frontier_phi_88_pred;
                            _3398 = frontier_phi_88_pred_1;
                            _3397 = frontier_phi_88_pred_2;
                            _3396 = frontier_phi_88_pred_3;
                            _3395 = frontier_phi_88_pred_4;
                            _3399 = frontier_phi_88_pred_5;
                            _3045 = _3398 + _3067;
                            _3046 = _3399 + _3068;
                            _3047 = _3400 + _3069;
                            _3042 = _3395 + _3064;
                            _3043 = _3396 + _3065;
                            _3044 = _3397 + _3066;
                            if (_3071 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3064 = _3042;
                                _3065 = _3043;
                                _3066 = _3044;
                                _3067 = _3045;
                                _3068 = _3046;
                                _3069 = _3047;
                                _3070 = _3071;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _3047;
                        frontier_phi_79_pred_1 = _3046;
                        frontier_phi_79_pred_2 = _3045;
                        frontier_phi_79_pred_3 = _3044;
                        frontier_phi_79_pred_4 = _3043;
                        frontier_phi_79_pred_5 = _3042;
                    }
                    _2535 = frontier_phi_79_pred;
                    _2533 = frontier_phi_79_pred_1;
                    _2531 = frontier_phi_79_pred_2;
                    _2529 = frontier_phi_79_pred_3;
                    _2527 = frontier_phi_79_pred_4;
                    _2525 = frontier_phi_79_pred_5;
                    uint _2747 = _2746 + 1u;
                    if (_2747 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2740 = _2525;
                        _2741 = _2527;
                        _2742 = _2529;
                        _2743 = _2531;
                        _2744 = _2533;
                        _2745 = _2535;
                        _2746 = _2747;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_61_62_ladder = _2525;
                frontier_phi_61_62_ladder_1 = _2535;
                frontier_phi_61_62_ladder_2 = _2533;
                frontier_phi_61_62_ladder_3 = _2531;
                frontier_phi_61_62_ladder_4 = _2529;
                frontier_phi_61_62_ladder_5 = _2527;
            }
            else
            {
                frontier_phi_61_62_ladder = _2372;
                frontier_phi_61_62_ladder_1 = _2382;
                frontier_phi_61_62_ladder_2 = _2380;
                frontier_phi_61_62_ladder_3 = _2378;
                frontier_phi_61_62_ladder_4 = _2376;
                frontier_phi_61_62_ladder_5 = _2374;
            }
            _2524 = frontier_phi_61_62_ladder;
            _2526 = frontier_phi_61_62_ladder_5;
            _2528 = frontier_phi_61_62_ladder_4;
            _2530 = frontier_phi_61_62_ladder_3;
            _2532 = frontier_phi_61_62_ladder_2;
            _2534 = frontier_phi_61_62_ladder_1;
        }
        float _2539 = isnan(1.0) ? _498 : (isnan(_498) ? 1.0 : min(_498, 1.0));
        _2359 = (_2539 * _2530) + _1815;
        _2361 = (_2539 * _2532) + _1817;
        _2363 = (_2539 * _2534) + _1819;
        _2365 = ((_2524 * _483) * _2539) + _2166;
        _2367 = ((_2526 * _485) * _2539) + _2168;
        _2369 = ((_2528 * _486) * _2539) + _2170;
    }
    else
    {
        _2359 = _1815;
        _2361 = _1817;
        _2363 = _1819;
        _2365 = _2166;
        _2367 = _2168;
        _2369 = _2170;
    }
    float _2461;
    float _2462;
    float _2463;
    if (_317 > 0.0)
    {
        uint _2393 = _1595 + 4u;
        float _2399 = (-0.0) - _396;
        float _2401 = (-0.0) - _397;
        float _2402 = (-0.0) - _398;
        float _2403 = dot(vec3(cbLight._m0[_1595].xyz), vec3(_2399, _2401, _2402));
        float _4524 = isnan(0.0) ? _2403 : (isnan(_2403) ? 0.0 : max(_2403, 0.0));
        float _2407 = _509 + 1.0;
        float _2409 = (isnan(0.0) ? _2407 : (isnan(_2407) ? 0.0 : max(_2407, 0.0))) * 0.5;
        float _2414 = _2409 * _2409;
        float _2415 = _2414 * exp2(log2(isnan(1.0) ? _4524 : (isnan(_4524) ? 1.0 : min(_4524, 1.0))) * 32.0);
        float _2417 = _317 / (_317 + 1.0);
        float _2418 = isnan(_1608) ? 1.0 : (isnan(1.0) ? _1608 : min(1.0, _1608));
        uint _2431 = _1595 + 5u;
        float _2437 = dot(vec3(cbLight._m0[_1915].xyz), vec3(_2399, _2401, _2402));
        float _4545 = isnan(0.0) ? _2437 : (isnan(_2437) ? 0.0 : max(_2437, 0.0));
        float _2444 = _2414 * exp2(log2(isnan(1.0) ? _4545 : (isnan(_4545) ? 1.0 : min(_4545, 1.0))) * 32.0);
        float _2445 = isnan(_1609) ? 1.0 : (isnan(1.0) ? _1609 : min(1.0, _1609));
        _2461 = ((((_2444 * cbLight._m0[_2431].x) * _2417) * _2445) + ((((cbLight._m0[_2393].x * _1587) * _2415) * _2417) * _2418)) * 0.3183098733425140380859375;
        _2462 = ((((_2444 * cbLight._m0[_2431].y) * _2417) * _2445) + ((((cbLight._m0[_2393].y * _1588) * _2415) * _2417) * _2418)) * 0.3183098733425140380859375;
        _2463 = ((((_2444 * cbLight._m0[_2431].z) * _2417) * _2445) + ((((cbLight._m0[_2393].z * _1589) * _2415) * _2417) * _2418)) * 0.3183098733425140380859375;
    }
    else
    {
        _2461 = 0.0;
        _2462 = 0.0;
        _2463 = 0.0;
    }
    float _4561 = isnan(0.0) ? _473 : (isnan(_473) ? 0.0 : max(_473, 0.0));
    float _4572 = isnan(0.0) ? _474 : (isnan(_474) ? 0.0 : max(_474, 0.0));
    float _4583 = isnan(0.0) ? _475 : (isnan(_475) ? 0.0 : max(_475, 0.0));
    float _4594 = isnan(0.0) ? _315 : (isnan(_315) ? 0.0 : max(_315, 0.0));
    float _2483 = ((isnan(1.0) ? _4561 : (isnan(_4561) ? 1.0 : min(_4561, 1.0))) * ((_2359 + ((isnan(0.0) ? _1261 : (isnan(_1261) ? 0.0 : max(_1261, 0.0))) * _498)) + _2461)) + ((_2365 + ((isnan(0.0) ? _1559 : (isnan(_1559) ? 0.0 : max(_1559, 0.0))) * _1340)) * cbPerFrame._m0[3u].x);
    float _2484 = ((isnan(1.0) ? _4572 : (isnan(_4572) ? 1.0 : min(_4572, 1.0))) * ((_2361 + ((isnan(0.0) ? _1264 : (isnan(_1264) ? 0.0 : max(_1264, 0.0))) * _498)) + _2462)) + ((_2367 + ((isnan(0.0) ? _1562 : (isnan(_1562) ? 0.0 : max(_1562, 0.0))) * _1340)) * cbPerFrame._m0[3u].x);
    float _2485 = ((isnan(1.0) ? _4583 : (isnan(_4583) ? 1.0 : min(_4583, 1.0))) * ((_2363 + ((isnan(0.0) ? _1267 : (isnan(_1267) ? 0.0 : max(_1267, 0.0))) * _498)) + _2463)) + ((_2369 + ((isnan(0.0) ? _1565 : (isnan(_1565) ? 0.0 : max(_1565, 0.0))) * _1340)) * cbPerFrame._m0[3u].x);
    float _2490 = cbInstanceData._m0[_457 + 6u].w * (isnan(1.0) ? _4594 : (isnan(_4594) ? 1.0 : min(_4594, 1.0)));
    float _2495 = _417 / cbSceneParam._m0[86u].x;
    float _2496 = _418 / cbSceneParam._m0[86u].y;
    vec4 _2510 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2495, _2496, (log2((isnan(cbSceneParam._m0[77u].w) ? _337 : (isnan(_337) ? cbSceneParam._m0[77u].w : min(_337, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2512 = _2510.x;
    float _2513 = _2510.y;
    float _2514 = _2510.z;
    float _2515 = _2510.w;
    float _2614;
    float _2616;
    float _2618;
    float _2620;
    if (_337 > cbSceneParam._m0[78u].w)
    {
        float _2577 = isnan(_337) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _337 : min(cbSceneParam._m0[80u].w, _337));
        float _2578 = _2577 / _337;
        float _2589 = _2578 * _389;
        float _2590 = _390 * _2578;
        float _2591 = (-0.0) - _2590;
        float _2592 = _2578 * _391;
        float _2594 = (cbSceneParam._m0[77u].w * _2591) / _2577;
        float _2595 = _2594 + cbSceneParam._m0[79u].w;
        float _2596 = cbSceneParam._m0[79u].w - _2590;
        float _2602 = sqrt(((_2589 * _2589) + (_2590 * _2590)) + (_2592 * _2592));
        float _2605 = (1.0 - (cbSceneParam._m0[77u].w / _2577)) * _2602;
        float _2610 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2612 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2999;
        if (abs((_2591 - _2594) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2999 = ((((_2595 > 0.0) ? exp2(_2610 * _2595) : (2.0 - exp2(_2612 * _2595))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2605;
        }
        else
        {
            float _2697 = 1.0 / cbSceneParam._m0[80u].x;
            float _2698 = isnan(_2596) ? _2595 : (isnan(_2595) ? _2596 : max(_2595, _2596));
            float _2699 = isnan(_2596) ? _2595 : (isnan(_2595) ? _2596 : min(_2595, _2596));
            float _2708 = isnan(0.0) ? _2698 : (isnan(_2698) ? 0.0 : min(_2698, 0.0));
            float _2709 = isnan(0.0) ? _2699 : (isnan(_2699) ? 0.0 : min(_2699, 0.0));
            _2999 = ((abs(_2602 / _2591) * cbSceneParam._m0[80u].y) * ((((_2708 - _2709) * 2.0) - ((exp2(_2610 * (isnan(0.0) ? _2698 : (isnan(_2698) ? 0.0 : max(_2698, 0.0)))) - exp2(_2610 * (isnan(0.0) ? _2699 : (isnan(_2699) ? 0.0 : max(_2699, 0.0))))) * _2697)) - ((exp2(_2612 * _2708) - exp2(_2612 * _2709)) * _2697))) + (_2605 * cbSceneParam._m0[80u].z);
        }
        vec4 _3001 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2495, _2496, 1.0), 0.0);
        float _3010 = exp2((_2999 * (-1.44269502162933349609375)) * (1.0 - _3001.w));
        float _3011 = log2(_3010);
        float _3027 = log2(_2515);
        _2614 = (exp2(_3027 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3011 * cbSceneParam._m0[78u].x)) * _3001.x) / cbSceneParam._m0[78u].x)) + _2512;
        _2616 = (exp2(_3027 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3011 * cbSceneParam._m0[78u].y)) * _3001.y) / cbSceneParam._m0[78u].y)) + _2513;
        _2618 = (exp2(_3027 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3011 * cbSceneParam._m0[78u].z)) * _3001.z) / cbSceneParam._m0[78u].z)) + _2514;
        _2620 = _3010 * _2515;
    }
    else
    {
        _2614 = _2512;
        _2616 = _2513;
        _2618 = _2514;
        _2620 = _2515;
    }
    bool _3037;
    vec4 _2630;
    vec4 _2652;
    float _2654;
    float _2658;
    float _2659;
    float _2660;
    float _2661;
    bool _2671;
    for (;;)
    {
        _2630 = cbMatDynParam._m0[0u];
        float _2632 = roundEven(_2630.y);
        bool _2633 = _2632 == 3.0;
        float _2634 = log2(_2620);
        float _2641 = exp2(_2634 * cbSceneParam._m0[78u].x) * _2483;
        float _2642 = exp2(_2634 * cbSceneParam._m0[78u].y) * _2484;
        float _2643 = exp2(_2634 * cbSceneParam._m0[78u].z) * _2485;
        float _2650 = _405 + (-0.5);
        _2652 = cbMtdParam._m0[1u];
        _2654 = _2652.y * _2650;
        float _2657 = (_2632 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2658 = _2657 * (_2633 ? _2641 : (_2641 + (cbSceneParam._m0[72u].w * _2614)));
        _2659 = _2657 * (_2633 ? _2642 : (_2642 + (cbSceneParam._m0[72u].w * _2616)));
        _2660 = _2657 * (_2633 ? _2643 : (_2643 + (cbSceneParam._m0[72u].w * _2618)));
        _2661 = _2650 * 0.999000012874603271484375;
        _2671 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2671)
        {
            if ((cbInstanceData._m0[_457 + 7u].x + _2661) < 0.5)
            {
                _3037 = true;
                break;
            }
        }
        uint _2732 = _459 + uint(_2630.w);
        if ((cbInstanceData._m0[_2732].w < 1.0) && ((cbInstanceData._m0[_2732].w + _2661) < 0.5))
        {
            _3037 = true;
            break;
        }
        if ((_2654 + _233) < _2652.x)
        {
            _3037 = true;
            break;
        }
        _3037 = false;
        break;
    }
    float _3055;
    if (_3037)
    {
        discard_state = true;
        _3055 = 0.0;
    }
    else
    {
        _3055 = _2490;
    }
    SV_Target.x = _2658;
    SV_Target.y = _2659;
    SV_Target.z = _2660;
    SV_Target.w = _3055;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2490;
    discard_exit();
}


