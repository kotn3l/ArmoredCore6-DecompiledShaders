#version 460

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[12];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 5, std140) uniform cbObjMatrixUBO
{
    vec4 _m0[6];
} cbObjMatrix;

layout(set = 0, binding = 10, std140) uniform cbInstanceIdxParamUBO
{
    vec4 _m0[1];
} cbInstanceIdxParam;

layout(set = 0, binding = 11, std140) uniform cbTexScrollUBO
{
    vec4 _m0[4];
} cbTexScroll;

layout(set = 0, binding = 26) uniform usamplerBuffer g_forceParam;
layout(set = 0, binding = 25) uniform usamplerBuffer g_InstanceIndexBuffer;

layout(location = 0) in vec3 POSITION;
layout(location = 1) in uvec4 NORMAL;
layout(location = 2) in uvec4 TANGENT;
layout(location = 3) in vec4 COLOR_1;
layout(location = 4) in ivec2 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_1;
layout(location = 1) out vec4 NORMAL_1;
layout(location = 2) out vec4 TANGENT_1;
layout(location = 3) out float TEXCOORD_2;
layout(location = 3, component = 1) out float TEXCOORD_1_1;
layout(location = 4) out vec4 TEXCOORD_3;
layout(location = 3, component = 2) out vec2 TEXCOORD_7;
layout(location = 5) out float TEXCOORD_11;

uint _744;
uint _867;

void main()
{
    uint _80 = uint(gl_InstanceIndex) - uint(gl_BaseInstance);
    gl_Position.x = 0.0;
    gl_Position.y = 0.0;
    gl_Position.z = 0.0;
    gl_Position.w = 0.0;
    NORMAL_1.x = 0.0;
    NORMAL_1.y = 0.0;
    NORMAL_1.z = 0.0;
    NORMAL_1.w = 0.0;
    TANGENT_1.x = 0.0;
    TANGENT_1.y = 0.0;
    TANGENT_1.z = 0.0;
    TANGENT_1.w = 0.0;
    TEXCOORD_2 = 0.0;
    TEXCOORD_1_1 = 0.0;
    TEXCOORD_3.x = 0.0;
    TEXCOORD_3.y = 0.0;
    TEXCOORD_3.z = 0.0;
    TEXCOORD_3.w = 0.0;
    TEXCOORD_7.x = 0.0;
    TEXCOORD_7.y = 0.0;
    TEXCOORD_11 = 0.0;
    float _168 = (float(NORMAL.x) + (-127.0)) * 0.0078740157186985015869140625;
    float _170 = (float(NORMAL.y) + (-127.0)) * 0.0078740157186985015869140625;
    float _171 = (float(NORMAL.z) + (-127.0)) * 0.0078740157186985015869140625;
    float _181 = (float(TANGENT.x) + (-127.0)) * 0.0078740157186985015869140625;
    float _182 = (float(TANGENT.y) + (-127.0)) * 0.0078740157186985015869140625;
    float _183 = (float(TANGENT.z) + (-127.0)) * 0.0078740157186985015869140625;
    uint _185 = _80 * 13u;
    uvec4 _191 = floatBitsToUint(cbInstanceData._m0[_185 + 7u]);
    uint _194 = min(_191.y, 8u);
    bool _197 = _194 == 0u;
    precise float _198 = POSITION.x + 0.0;
    precise float _199 = POSITION.y + 0.0;
    precise float _200 = POSITION.z + 0.0;
    uint _205 = floatBitsToUint(cbInstanceIdxParam._m0[0u]).x + _80;
    uvec4 _207 = texelFetch(g_InstanceIndexBuffer, int(_205));
    uint _208 = _207.x;
    uint _217 = (floatBitsToUint(cbInstanceData._m0[(_208 * 13u) + 4u]).x + uint(float(NORMAL.w))) * 3u;
    uint _224 = _217 + 1u;
    uint _231 = _217 + 2u;
    precise float _238 = _198 * cbObjMatrix._m0[_217].x;
    precise float _239 = _199 * cbObjMatrix._m0[_217].y;
    precise float _240 = _239 + _238;
    precise float _241 = _200 * cbObjMatrix._m0[_217].z;
    precise float _242 = _241 + _240;
    precise float _243 = 1.0 * cbObjMatrix._m0[_217].w;
    precise float _245 = _243 + _242;
    precise float _246 = _198 * cbObjMatrix._m0[_224].x;
    precise float _247 = _199 * cbObjMatrix._m0[_224].y;
    precise float _248 = _247 + _246;
    precise float _249 = _200 * cbObjMatrix._m0[_224].z;
    precise float _250 = _249 + _248;
    precise float _251 = 1.0 * cbObjMatrix._m0[_224].w;
    precise float _252 = _251 + _250;
    precise float _253 = _198 * cbObjMatrix._m0[_231].x;
    precise float _254 = _199 * cbObjMatrix._m0[_231].y;
    precise float _255 = _254 + _253;
    precise float _256 = _200 * cbObjMatrix._m0[_231].z;
    precise float _257 = _256 + _255;
    precise float _258 = 1.0 * cbObjMatrix._m0[_231].w;
    precise float _259 = _258 + _257;
    float _265 = cbSceneParam._m0[3u].x - _245;
    float _266 = cbSceneParam._m0[3u].y - _252;
    float _267 = cbSceneParam._m0[3u].z - _259;
    uint _299 = _185 + 1u;
    uint _306 = _185 + 2u;
    precise float _313 = TEXCOORD_1.x * cbInstanceData._m0[_185].x;
    precise float _314 = TEXCOORD_1.y * cbInstanceData._m0[_185].y;
    precise float _315 = _314 + _313;
    precise float _316 = TEXCOORD_1.z * cbInstanceData._m0[_185].z;
    precise float _317 = _316 + _315;
    precise float _318 = 1.0 * cbInstanceData._m0[_185].w;
    precise float _319 = _318 + _317;
    precise float _320 = TEXCOORD_1.x * cbInstanceData._m0[_299].x;
    precise float _321 = TEXCOORD_1.y * cbInstanceData._m0[_299].y;
    precise float _322 = _321 + _320;
    precise float _323 = TEXCOORD_1.z * cbInstanceData._m0[_299].z;
    precise float _324 = _323 + _322;
    precise float _325 = 1.0 * cbInstanceData._m0[_299].w;
    precise float _326 = _325 + _324;
    precise float _327 = TEXCOORD_1.x * cbInstanceData._m0[_306].x;
    precise float _328 = TEXCOORD_1.y * cbInstanceData._m0[_306].y;
    precise float _329 = _328 + _327;
    precise float _330 = TEXCOORD_1.z * cbInstanceData._m0[_306].z;
    precise float _331 = _330 + _329;
    precise float _332 = 1.0 * cbInstanceData._m0[_306].w;
    precise float _333 = _332 + _331;
    precise float _339 = _245 - _319;
    precise float _340 = _252 - _326;
    precise float _341 = _259 - _333;
    precise float _342 = _339 * _339;
    precise float _343 = _340 * _340;
    precise float _344 = _342 + _343;
    precise float _345 = _341 * _341;
    precise float _346 = _344 + _345;
    precise float _348 = cbMtdParam._m0[10u].z * sqrt(_346);
    precise float _353 = cbInstanceData._m0[_185].x * 0.0;
    precise float _354 = 0.0 * cbInstanceData._m0[_185].y;
    precise float _355 = _354 + _353;
    precise float _356 = 0.0 * cbInstanceData._m0[_185].z;
    precise float _357 = _356 + _355;
    precise float _358 = 1.0 * cbInstanceData._m0[_185].w;
    precise float _359 = _358 + _357;
    precise float _360 = cbInstanceData._m0[_299].x * 0.0;
    precise float _361 = 0.0 * cbInstanceData._m0[_299].y;
    precise float _362 = _361 + _360;
    precise float _363 = 0.0 * cbInstanceData._m0[_299].z;
    precise float _364 = _363 + _362;
    precise float _365 = 1.0 * cbInstanceData._m0[_299].w;
    precise float _366 = _365 + _364;
    precise float _367 = cbInstanceData._m0[_306].x * 0.0;
    precise float _368 = 0.0 * cbInstanceData._m0[_306].y;
    precise float _369 = _368 + _367;
    precise float _370 = 0.0 * cbInstanceData._m0[_306].z;
    precise float _371 = _370 + _369;
    precise float _372 = 1.0 * cbInstanceData._m0[_306].w;
    precise float _373 = _372 + _371;
    precise float _376 = _245 * _245;
    precise float _377 = _252 * _252;
    precise float _378 = _376 + _377;
    precise float _379 = _259 * _259;
    precise float _380 = _378 + _379;
    precise float _382 = cbMtdParam._m0[11u].x * sqrt(_380);
    precise float _383 = cbPerFrame._m0[22u].x + _382;
    uint _384 = _191.w;
    float _385;
    float _387;
    float _389;
    if (_197)
    {
        _385 = 0.0;
        _387 = 0.0;
        _389 = 0.0;
    }
    else
    {
        uint _509 = _191.z;
        precise float _386;
        precise float _388;
        precise float _390;
        float _938;
        float _940;
        float _942;
        float _676 = 0.0;
        float _677 = 0.0;
        float _678 = 0.0;
        uint _679 = _509;
        uint _681 = 0u;
        float _717;
        float _736;
        vec4 _749;
        float _750;
        float _751;
        float _765;
        float _766;
        float _767;
        float _784;
        float _785;
        float _786;
        float _787;
        bool _788;
        bool _789;
        bool _790;
        precise float _791;
        precise float _792;
        precise float _793;
        float _794;
        float _795;
        float _796;
        precise float _797;
        bool _800;
        for (;;)
        {
            uint _683 = _679 & 255u;
            uint _685 = _683 * 24u;
            uvec3 _695 = uvec3(texelFetch(g_forceParam, int(_685)).x, texelFetch(g_forceParam, int(_685 + 1u)).x, texelFetch(g_forceParam, int(_685 + 2u)).x);
            uint _700 = (_683 * 24u) + 4u;
            vec4 _713 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_700)).x, texelFetch(g_forceParam, int(_700 + 1u)).x, texelFetch(g_forceParam, int(_700 + 2u)).x, texelFetch(g_forceParam, int(_700 + 3u)).x));
            _717 = _713.w;
            uint _719 = (_683 * 24u) + 8u;
            vec4 _732 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_719)).x, texelFetch(g_forceParam, int(_719 + 1u)).x, texelFetch(g_forceParam, int(_719 + 2u)).x, texelFetch(g_forceParam, int(_719 + 3u)).x));
            _736 = _732.w;
            uint _738 = (_683 * 24u) + 12u;
            _749 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_738)).x, texelFetch(g_forceParam, int(_738 + 1u)).x, _744, texelFetch(g_forceParam, int(_738 + 3u)).x));
            _750 = _749.x;
            _751 = _749.w;
            uint _754 = (_683 * 24u) + 16u;
            vec3 _764 = uintBitsToFloat(uvec3(texelFetch(g_forceParam, int(_754)).x, texelFetch(g_forceParam, int(_754 + 1u)).x, texelFetch(g_forceParam, int(_754 + 2u)).x));
            _765 = _764.x;
            _766 = _764.y;
            _767 = _764.z;
            uint _770 = (_683 * 24u) + 20u;
            vec4 _783 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_770)).x, texelFetch(g_forceParam, int(_770 + 1u)).x, texelFetch(g_forceParam, int(_770 + 2u)).x, texelFetch(g_forceParam, int(_770 + 3u)).x));
            _784 = _783.x;
            _785 = _783.y;
            _786 = _783.z;
            _787 = _783.w;
            _788 = _695.x == 1u;
            _789 = _695.y == 1u;
            _790 = _695.z == 1u;
            _791 = _359 - _713.x;
            _792 = _366 - _713.y;
            _793 = _373 - _713.z;
            _794 = _788 ? _732.x : _791;
            _795 = _788 ? _732.y : _792;
            _796 = _788 ? _732.z : _793;
            _797 = dot(vec3(_794, _795, _796), vec3(_794, _795, _796));
            _800 = _797 > 0.0;
            float frontier_phi_8_pred;
            float frontier_phi_8_pred_1;
            float frontier_phi_8_pred_2;
            if (_800)
            {
                precise float _923 = _791 * _791;
                precise float _924 = _792 * _792;
                precise float _925 = _923 + _924;
                precise float _926 = _793 * _793;
                precise float _927 = _926 + _925;
                float _928 = sqrt(_927);
                float _929 = inversesqrt(_797);
                precise float _930 = _794 * _929;
                precise float _931 = _795 * _929;
                precise float _932 = _796 * _929;
                precise float _935 = _928 / (isnan(0.001000000047497451305389404296875) ? _749.y : (isnan(_749.y) ? 0.001000000047497451305389404296875 : max(_749.y, 0.001000000047497451305389404296875)));
                precise float _936 = 1.0 - _935;
                float _1261 = isnan(0.0) ? _936 : (isnan(_936) ? 0.0 : max(_936, 0.0));
                float _937 = isnan(1.0) ? _1261 : (isnan(_1261) ? 1.0 : min(_1261, 1.0));
                float _987;
                if (_790)
                {
                    float _974 = inversesqrt(dot(vec3(_791, _792, _793), vec3(_791, _792, _793)));
                    precise float _975 = _791 * _974;
                    precise float _976 = _792 * _974;
                    precise float _977 = _793 * _974;
                    precise float _981 = dot(vec3(_930, _931, _932), vec3(_975, _976, _977)) * 0.800000011920928955078125;
                    precise float _983 = _981 + 0.20000000298023223876953125;
                    float _1272 = isnan(0.0) ? _983 : (isnan(_983) ? 0.0 : max(_983, 0.0));
                    precise float _986 = _937 * (isnan(1.0) ? _1272 : (isnan(_1272) ? 1.0 : min(_1272, 1.0)));
                    _987 = _986;
                }
                else
                {
                    _987 = _937;
                }
                float frontier_phi_8_pred_12_ladder;
                float frontier_phi_8_pred_12_ladder_1;
                float frontier_phi_8_pred_12_ladder_2;
                if (_987 > 0.0)
                {
                    bool _1006 = _788 && (!_790);
                    precise float _1008 = _928 * (-4.0);
                    precise float _1012 = 6.283184051513671875 / (isnan(0.001000000047497451305389404296875) ? _750 : (isnan(_750) ? 0.001000000047497451305389404296875 : max(_750, 0.001000000047497451305389404296875)));
                    precise float _1014 = dot(vec2(_930, _932), vec2(_791, _793));
                    precise float _1017 = _1012 * _1014;
                    precise float _1018 = float(_1006) * _1017;
                    precise float _1019 = _383 * _1012;
                    precise float _1020 = _1019 - _1018;
                    precise float _1021 = (_1006 ? 0.0 : _1008) + _1020;
                    precise float _1023 = _736 * sin(_1021);
                    precise float _1024 = _931 * 0.0;
                    precise float _1025 = _1024 - _932;
                    precise float _1026 = _932 * 0.0;
                    precise float _1027 = _930 * 0.0;
                    precise float _1028 = _1026 - _1027;
                    precise float _1029 = _930 - _1024;
                    precise float _1030 = _751 * _1023;
                    float _1031 = _788 ? _1030 : 0.0;
                    float _1100;
                    if (_789)
                    {
                        precise float _1060 = _765 * 2.0;
                        precise float _1062 = _785 + _786;
                        precise float _1063 = _787 + _1062;
                        precise float _1065 = 6.283184051513671875 / (isnan(0.001000000047497451305389404296875) ? _765 : (isnan(_765) ? 0.001000000047497451305389404296875 : max(_765, 0.001000000047497451305389404296875)));
                        precise float _1066 = _784 * _1065;
                        precise float _1067 = (-0.0) - _930;
                        precise float _1072 = dot(vec2(_932, _1067), vec2(_791, _793)) / _1060;
                        precise float _1073 = (-0.0) - _1072;
                        float _1076 = fract(abs(_1072));
                        precise float _1077 = (-0.0) - _1076;
                        precise float _1079 = _1060 * ((_1072 >= _1073) ? _1076 : _1077);
                        precise float _1080 = _1079 * 6.283184051513671875;
                        precise float _1081 = _1080 / _1060;
                        precise float _1083 = (isnan(5.0) ? _765 : (isnan(_765) ? 5.0 : min(_765, 5.0))) * sin(_1081);
                        precise float _1084 = _1014 + _1083;
                        precise float _1085 = _765 * 0.25;
                        precise float _1087 = _383 * _784;
                        precise float _1088 = _1087 - _1085;
                        precise float _1089 = _1088 - _1084;
                        precise float _1090 = _784 * _1063;
                        precise float _1092 = _1089 / (isnan(0.001000000047497451305389404296875) ? _1090 : (isnan(_1090) ? 0.001000000047497451305389404296875 : max(_1090, 0.001000000047497451305389404296875)));
                        float _1093 = fract(_1092);
                        precise float _1095 = 1.0 - _1093;
                        float _1096 = (_1092 < 0.0) ? _1095 : _1093;
                        precise float _1097 = _1062 / _1063;
                        precise float _1098 = _785 / _1063;
                        float _1176;
                        if (_1096 < _1098)
                        {
                            precise float _1172 = _1096 / _1098;
                            _1176 = _1172;
                        }
                        else
                        {
                            float frontier_phi_27_24_ladder;
                            if (_1096 < _1097)
                            {
                                precise float _1186 = _1096 - _1098;
                                precise float _1187 = _1097 - _1098;
                                precise float _1188 = _1186 / _1187;
                                precise float _1177 = 1.0 - _1188;
                                frontier_phi_27_24_ladder = _1177;
                            }
                            else
                            {
                                frontier_phi_27_24_ladder = 0.0;
                            }
                            _1176 = frontier_phi_27_24_ladder;
                        }
                        precise float _1178 = _767 * _1176;
                        precise float _1179 = _1065 * _1014;
                        precise float _1180 = _383 * _1066;
                        precise float _1181 = _1180 - _1179;
                        precise float _1183 = _766 + sin(_1181);
                        precise float _1185 = _1178 * abs(_1183);
                        precise float _1101 = _1185 + 0.0;
                        _1100 = _1101;
                    }
                    else
                    {
                        _1100 = 0.0;
                    }
                    precise float _1102 = _717 + _1023;
                    precise float _1103 = _1102 + _1100;
                    precise float _1104 = _930 * _1103;
                    precise float _1105 = _931 * _1103;
                    precise float _1106 = _932 * _1103;
                    precise float _1107 = _1025 * _1031;
                    precise float _1108 = _1028 * _1031;
                    precise float _1109 = _1029 * _1031;
                    precise float _1110 = _1107 + _1104;
                    precise float _1111 = _1108 + _1105;
                    precise float _1112 = _1109 + _1106;
                    precise float _1113 = _987 * _1110;
                    precise float _1114 = _987 * _1111;
                    precise float _1115 = _987 * _1112;
                    precise float _939 = _1113 * 0.0500000007450580596923828125;
                    precise float _941 = _1114 * 0.0500000007450580596923828125;
                    precise float _943 = _1115 * 0.0500000007450580596923828125;
                    frontier_phi_8_pred_12_ladder = _939;
                    frontier_phi_8_pred_12_ladder_1 = _941;
                    frontier_phi_8_pred_12_ladder_2 = _943;
                }
                else
                {
                    frontier_phi_8_pred_12_ladder = 0.0;
                    frontier_phi_8_pred_12_ladder_1 = 0.0;
                    frontier_phi_8_pred_12_ladder_2 = 0.0;
                }
                frontier_phi_8_pred = frontier_phi_8_pred_12_ladder;
                frontier_phi_8_pred_1 = frontier_phi_8_pred_12_ladder_1;
                frontier_phi_8_pred_2 = frontier_phi_8_pred_12_ladder_2;
            }
            else
            {
                frontier_phi_8_pred = 0.0;
                frontier_phi_8_pred_1 = 0.0;
                frontier_phi_8_pred_2 = 0.0;
            }
            _938 = frontier_phi_8_pred;
            _940 = frontier_phi_8_pred_1;
            _942 = frontier_phi_8_pred_2;
            _386 = _676 + _938;
            _388 = _677 + _940;
            _390 = _678 + _942;
            uint _682 = _681 + 1u;
            if (_682 == _194)
            {
                break;
            }
            else
            {
                _676 = _386;
                _677 = _388;
                _678 = _390;
                _679 = (_681 != 3u) ? (_679 >> 8u) : _384;
                _681 = _682;
                continue;
            }
        }
        _385 = _386;
        _387 = _388;
        _389 = _390;
    }
    precise float _391 = _385 * _385;
    precise float _392 = _387 * _387;
    precise float _393 = _391 + _392;
    precise float _394 = _389 * _389;
    precise float _395 = _393 + _394;
    float _396 = sqrt(_395);
    bool _397 = _396 < 0.00011000000085914507508277893066406;
    float _402 = inversesqrt(dot(vec3(cbInstanceData._m0[_185].x, cbInstanceData._m0[_299].x, cbInstanceData._m0[_306].x), vec3(cbInstanceData._m0[_185].x, cbInstanceData._m0[_299].x, cbInstanceData._m0[_306].x)));
    precise float _403 = cbInstanceData._m0[_185].x * _402;
    precise float _404 = cbInstanceData._m0[_299].x * _402;
    precise float _405 = cbInstanceData._m0[_306].x * _402;
    float _409 = inversesqrt(dot(vec3(cbInstanceData._m0[_185].y, cbInstanceData._m0[_299].y, cbInstanceData._m0[_306].y), vec3(cbInstanceData._m0[_185].y, cbInstanceData._m0[_299].y, cbInstanceData._m0[_306].y)));
    precise float _410 = cbInstanceData._m0[_185].y * _409;
    precise float _411 = cbInstanceData._m0[_299].y * _409;
    precise float _412 = cbInstanceData._m0[_306].y * _409;
    float _416 = inversesqrt(dot(vec3(cbInstanceData._m0[_185].z, cbInstanceData._m0[_299].z, cbInstanceData._m0[_306].z), vec3(cbInstanceData._m0[_185].z, cbInstanceData._m0[_299].z, cbInstanceData._m0[_306].z)));
    precise float _417 = cbInstanceData._m0[_185].z * _416;
    precise float _418 = cbInstanceData._m0[_299].z * _416;
    precise float _419 = cbInstanceData._m0[_306].z * _416;
    precise float _420 = _403 * 0.0;
    precise float _421 = 1.0 * _410;
    precise float _422 = _421 + _420;
    precise float _423 = 0.0 * _417;
    precise float _424 = _423 + _422;
    precise float _425 = _404 * 0.0;
    precise float _426 = 1.0 * _411;
    precise float _427 = _426 + _425;
    precise float _428 = 0.0 * _418;
    precise float _429 = _428 + _427;
    precise float _430 = _405 * 0.0;
    precise float _431 = 1.0 * _412;
    precise float _432 = _431 + _430;
    precise float _433 = 0.0 * _419;
    precise float _434 = _433 + _432;
    float _438 = inversesqrt(dot(vec3(_385, _387, _389), vec3(_385, _387, _389)));
    precise float _439 = _385 * _438;
    precise float _440 = _387 * _438;
    precise float _441 = _389 * _438;
    precise float _442 = _429 * _441;
    precise float _443 = _434 * _440;
    precise float _444 = _442 - _443;
    precise float _445 = _434 * _439;
    precise float _446 = _424 * _441;
    precise float _447 = _445 - _446;
    precise float _448 = _424 * _440;
    precise float _449 = _429 * _439;
    precise float _450 = _448 - _449;
    float _454 = inversesqrt(dot(vec3(_444, _447, _450), vec3(_444, _447, _450)));
    precise float _455 = _454 * _444;
    precise float _456 = _454 * _447;
    precise float _457 = _454 * _450;
    precise float _458 = _396 + 1.0;
    precise float _460 = cbMtdParam._m0[10u].w * log2(_458);
    precise float _461 = _245 - _359;
    precise float _462 = _252 - _366;
    precise float _463 = _259 - _373;
    precise float _464 = dot(vec3(_455, _456, _457), vec3(_461, _462, _463));
    precise float _467 = _455 * _464;
    precise float _468 = _456 * _464;
    precise float _469 = _457 * _464;
    precise float _470 = _359 + _467;
    precise float _471 = _366 + _468;
    precise float _472 = _373 + _469;
    precise float _473 = _245 - _470;
    precise float _474 = _252 - _471;
    precise float _475 = _259 - _472;
    precise float _476 = _456 * _475;
    precise float _477 = _457 * _474;
    precise float _478 = _476 - _477;
    precise float _479 = _457 * _473;
    precise float _480 = _455 * _475;
    precise float _481 = _479 - _480;
    precise float _482 = _455 * _474;
    precise float _483 = _456 * _473;
    precise float _484 = _482 - _483;
    float _485 = sin(_460);
    float _486 = cos(_460);
    precise float _487 = _473 * _486;
    precise float _488 = _474 * _486;
    precise float _489 = _475 * _486;
    precise float _490 = _485 * _478;
    precise float _491 = _485 * _481;
    precise float _492 = _485 * _484;
    precise float _493 = _487 + _490;
    precise float _494 = _488 + _491;
    precise float _495 = _492 + _489;
    precise float _496 = _470 + _493;
    precise float _497 = _471 + _494;
    precise float _498 = _472 + _495;
    precise float _499 = _496 - _245;
    precise float _500 = _497 - _252;
    precise float _501 = _498 - _259;
    float _502 = _397 ? 0.0 : _499;
    float _503 = _397 ? 0.0 : _500;
    float _504 = _397 ? 0.0 : _501;
    precise float _505 = _245 + _502;
    precise float _506 = _252 + _503;
    precise float _507 = _259 + _504;
    precise float _508 = cbPerFrame._m0[22u].x + _348;
    float _510;
    float _512;
    float _514;
    if (_197)
    {
        _510 = 0.0;
        _512 = 0.0;
        _514 = 0.0;
    }
    else
    {
        uint _675 = _191.z;
        precise float _511;
        precise float _513;
        precise float _515;
        float _962;
        float _964;
        float _966;
        float _801 = 0.0;
        float _802 = 0.0;
        float _803 = 0.0;
        uint _804 = _675;
        uint _806 = 0u;
        float _840;
        float _859;
        vec4 _872;
        float _873;
        float _874;
        float _887;
        float _888;
        float _889;
        float _905;
        float _906;
        float _907;
        float _908;
        bool _909;
        bool _910;
        bool _911;
        precise float _912;
        precise float _913;
        precise float _914;
        float _915;
        float _916;
        float _917;
        precise float _918;
        bool _921;
        for (;;)
        {
            uint _808 = _804 & 255u;
            uint _809 = _808 * 24u;
            uvec3 _818 = uvec3(texelFetch(g_forceParam, int(_809)).x, texelFetch(g_forceParam, int(_809 + 1u)).x, texelFetch(g_forceParam, int(_809 + 2u)).x);
            uint _823 = (_808 * 24u) + 4u;
            vec4 _836 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_823)).x, texelFetch(g_forceParam, int(_823 + 1u)).x, texelFetch(g_forceParam, int(_823 + 2u)).x, texelFetch(g_forceParam, int(_823 + 3u)).x));
            _840 = _836.w;
            uint _842 = (_808 * 24u) + 8u;
            vec4 _855 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_842)).x, texelFetch(g_forceParam, int(_842 + 1u)).x, texelFetch(g_forceParam, int(_842 + 2u)).x, texelFetch(g_forceParam, int(_842 + 3u)).x));
            _859 = _855.w;
            uint _861 = (_808 * 24u) + 12u;
            _872 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_861)).x, texelFetch(g_forceParam, int(_861 + 1u)).x, _867, texelFetch(g_forceParam, int(_861 + 3u)).x));
            _873 = _872.x;
            _874 = _872.w;
            uint _876 = (_808 * 24u) + 16u;
            vec3 _886 = uintBitsToFloat(uvec3(texelFetch(g_forceParam, int(_876)).x, texelFetch(g_forceParam, int(_876 + 1u)).x, texelFetch(g_forceParam, int(_876 + 2u)).x));
            _887 = _886.x;
            _888 = _886.y;
            _889 = _886.z;
            uint _891 = (_808 * 24u) + 20u;
            vec4 _904 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_891)).x, texelFetch(g_forceParam, int(_891 + 1u)).x, texelFetch(g_forceParam, int(_891 + 2u)).x, texelFetch(g_forceParam, int(_891 + 3u)).x));
            _905 = _904.x;
            _906 = _904.y;
            _907 = _904.z;
            _908 = _904.w;
            _909 = _818.x == 1u;
            _910 = _818.y == 1u;
            _911 = _818.z == 1u;
            _912 = _319 - _836.x;
            _913 = _326 - _836.y;
            _914 = _333 - _836.z;
            _915 = _909 ? _855.x : _912;
            _916 = _909 ? _855.y : _913;
            _917 = _909 ? _855.z : _914;
            _918 = dot(vec3(_915, _916, _917), vec3(_915, _916, _917));
            _921 = _918 > 0.0;
            float frontier_phi_10_pred;
            float frontier_phi_10_pred_1;
            float frontier_phi_10_pred_2;
            if (_921)
            {
                precise float _948 = _912 * _912;
                precise float _949 = _913 * _913;
                precise float _950 = _948 + _949;
                precise float _951 = _914 * _914;
                precise float _952 = _951 + _950;
                float _953 = sqrt(_952);
                float _954 = inversesqrt(_918);
                precise float _955 = _915 * _954;
                precise float _956 = _916 * _954;
                precise float _957 = _917 * _954;
                precise float _959 = _953 / (isnan(0.001000000047497451305389404296875) ? _872.y : (isnan(_872.y) ? 0.001000000047497451305389404296875 : max(_872.y, 0.001000000047497451305389404296875)));
                precise float _960 = 1.0 - _959;
                float _1308 = isnan(0.0) ? _960 : (isnan(_960) ? 0.0 : max(_960, 0.0));
                float _961 = isnan(1.0) ? _1308 : (isnan(_1308) ? 1.0 : min(_1308, 1.0));
                float _1003;
                if (_911)
                {
                    float _992 = inversesqrt(dot(vec3(_912, _913, _914), vec3(_912, _913, _914)));
                    precise float _993 = _912 * _992;
                    precise float _994 = _913 * _992;
                    precise float _995 = _914 * _992;
                    precise float _999 = dot(vec3(_955, _956, _957), vec3(_993, _994, _995)) * 0.800000011920928955078125;
                    precise float _1000 = _999 + 0.20000000298023223876953125;
                    float _1319 = isnan(0.0) ? _1000 : (isnan(_1000) ? 0.0 : max(_1000, 0.0));
                    precise float _1002 = _961 * (isnan(1.0) ? _1319 : (isnan(_1319) ? 1.0 : min(_1319, 1.0)));
                    _1003 = _1002;
                }
                else
                {
                    _1003 = _961;
                }
                float frontier_phi_10_pred_15_ladder;
                float frontier_phi_10_pred_15_ladder_1;
                float frontier_phi_10_pred_15_ladder_2;
                if (_1003 > 0.0)
                {
                    bool _1033 = _909 && (!_911);
                    precise float _1035 = _953 * (-4.0);
                    precise float _1038 = 6.283184051513671875 / (isnan(0.001000000047497451305389404296875) ? _873 : (isnan(_873) ? 0.001000000047497451305389404296875 : max(_873, 0.001000000047497451305389404296875)));
                    precise float _1039 = cbMtdParam._m0[11u].y * _1038;
                    precise float _1040 = dot(vec2(_955, _957), vec2(_912, _914));
                    precise float _1043 = _1040 * _1039;
                    precise float _1044 = float(_1033) * _1043;
                    precise float _1045 = _508 * _1039;
                    precise float _1046 = _1045 - _1044;
                    precise float _1047 = (_1033 ? 0.0 : _1035) + _1046;
                    precise float _1049 = _859 * sin(_1047);
                    precise float _1050 = _956 * 0.0;
                    precise float _1051 = _1050 - _957;
                    precise float _1052 = _957 * 0.0;
                    precise float _1053 = _955 * 0.0;
                    precise float _1054 = _1052 - _1053;
                    precise float _1055 = _955 - _1050;
                    precise float _1056 = _874 * _1049;
                    float _1057 = _909 ? _1056 : 0.0;
                    float _1156;
                    if (_910)
                    {
                        precise float _1118 = _887 * 2.0;
                        precise float _1119 = _906 + _907;
                        precise float _1120 = _908 + _1119;
                        precise float _1122 = 6.283184051513671875 / (isnan(0.001000000047497451305389404296875) ? _887 : (isnan(_887) ? 0.001000000047497451305389404296875 : max(_887, 0.001000000047497451305389404296875)));
                        precise float _1123 = cbMtdParam._m0[11u].y * _1122;
                        precise float _1124 = _905 * _1123;
                        precise float _1125 = (-0.0) - _955;
                        precise float _1129 = dot(vec2(_957, _1125), vec2(_912, _914)) / _1118;
                        precise float _1130 = (-0.0) - _1129;
                        float _1133 = fract(abs(_1129));
                        precise float _1134 = (-0.0) - _1133;
                        precise float _1136 = _1118 * ((_1129 >= _1130) ? _1133 : _1134);
                        precise float _1137 = _1136 * 6.283184051513671875;
                        precise float _1138 = _1137 / _1118;
                        precise float _1140 = (isnan(5.0) ? _887 : (isnan(_887) ? 5.0 : min(_887, 5.0))) * sin(_1138);
                        precise float _1141 = _1040 + _1140;
                        precise float _1142 = _887 * 0.25;
                        precise float _1143 = _508 * _905;
                        precise float _1144 = _1143 - _1142;
                        precise float _1145 = _1144 - _1141;
                        precise float _1146 = _905 * _1120;
                        precise float _1148 = _1145 / (isnan(0.001000000047497451305389404296875) ? _1146 : (isnan(_1146) ? 0.001000000047497451305389404296875 : max(_1146, 0.001000000047497451305389404296875)));
                        float _1149 = fract(_1148);
                        precise float _1151 = 1.0 - _1149;
                        float _1152 = (_1148 < 0.0) ? _1151 : _1149;
                        precise float _1153 = _1119 / _1120;
                        precise float _1154 = _906 / _1120;
                        float _1189;
                        if (_1152 < _1154)
                        {
                            precise float _1174 = _1152 / _1154;
                            _1189 = _1174;
                        }
                        else
                        {
                            float frontier_phi_29_26_ladder;
                            if (_1152 < _1153)
                            {
                                precise float _1199 = _1152 - _1154;
                                precise float _1200 = _1153 - _1154;
                                precise float _1201 = _1199 / _1200;
                                precise float _1190 = 1.0 - _1201;
                                frontier_phi_29_26_ladder = _1190;
                            }
                            else
                            {
                                frontier_phi_29_26_ladder = 0.0;
                            }
                            _1189 = frontier_phi_29_26_ladder;
                        }
                        precise float _1191 = _889 * _1189;
                        precise float _1192 = _1123 * _1040;
                        precise float _1193 = _508 * _1124;
                        precise float _1194 = _1193 - _1192;
                        precise float _1196 = _888 + sin(_1194);
                        precise float _1198 = _1191 * abs(_1196);
                        precise float _1157 = _1198 + 0.0;
                        _1156 = _1157;
                    }
                    else
                    {
                        _1156 = 0.0;
                    }
                    precise float _1158 = _840 + _1049;
                    precise float _1159 = _1158 + _1156;
                    precise float _1160 = _955 * _1159;
                    precise float _1161 = _956 * _1159;
                    precise float _1162 = _957 * _1159;
                    precise float _1163 = _1051 * _1057;
                    precise float _1164 = _1054 * _1057;
                    precise float _1165 = _1055 * _1057;
                    precise float _1166 = _1163 + _1160;
                    precise float _1167 = _1164 + _1161;
                    precise float _1168 = _1165 + _1162;
                    precise float _1169 = _1003 * _1166;
                    precise float _1170 = _1003 * _1167;
                    precise float _1171 = _1003 * _1168;
                    precise float _963 = _1169 * 0.0500000007450580596923828125;
                    precise float _965 = _1170 * 0.0500000007450580596923828125;
                    precise float _967 = _1171 * 0.0500000007450580596923828125;
                    frontier_phi_10_pred_15_ladder = _963;
                    frontier_phi_10_pred_15_ladder_1 = _965;
                    frontier_phi_10_pred_15_ladder_2 = _967;
                }
                else
                {
                    frontier_phi_10_pred_15_ladder = 0.0;
                    frontier_phi_10_pred_15_ladder_1 = 0.0;
                    frontier_phi_10_pred_15_ladder_2 = 0.0;
                }
                frontier_phi_10_pred = frontier_phi_10_pred_15_ladder;
                frontier_phi_10_pred_1 = frontier_phi_10_pred_15_ladder_1;
                frontier_phi_10_pred_2 = frontier_phi_10_pred_15_ladder_2;
            }
            else
            {
                frontier_phi_10_pred = 0.0;
                frontier_phi_10_pred_1 = 0.0;
                frontier_phi_10_pred_2 = 0.0;
            }
            _962 = frontier_phi_10_pred;
            _964 = frontier_phi_10_pred_1;
            _966 = frontier_phi_10_pred_2;
            _511 = _801 + _962;
            _513 = _802 + _964;
            _515 = _803 + _966;
            uint _807 = _806 + 1u;
            if (_807 == _194)
            {
                break;
            }
            else
            {
                _801 = _511;
                _802 = _513;
                _803 = _515;
                _804 = (_806 != 3u) ? (_804 >> 8u) : _384;
                _806 = _807;
                continue;
            }
        }
        _510 = _511;
        _512 = _513;
        _514 = _515;
    }
    precise float _516 = _510 * _510;
    precise float _517 = _512 * _512;
    precise float _518 = _516 + _517;
    precise float _519 = _514 * _514;
    precise float _520 = _518 + _519;
    float _521 = sqrt(_520);
    bool _522 = _521 < 0.00011000000085914507508277893066406;
    float _526 = inversesqrt(dot(vec3(_510, _512, _514), vec3(_510, _512, _514)));
    precise float _527 = _510 * _526;
    precise float _528 = _512 * _526;
    precise float _529 = _514 * _526;
    precise float _530 = _429 * _529;
    precise float _531 = _434 * _528;
    precise float _532 = _530 - _531;
    precise float _533 = _434 * _527;
    precise float _534 = _424 * _529;
    precise float _535 = _533 - _534;
    precise float _536 = _424 * _528;
    precise float _537 = _429 * _527;
    precise float _538 = _536 - _537;
    float _542 = inversesqrt(dot(vec3(_532, _535, _538), vec3(_532, _535, _538)));
    precise float _543 = _542 * _532;
    precise float _544 = _542 * _535;
    precise float _545 = _542 * _538;
    precise float _546 = _521 + 1.0;
    precise float _548 = cbMtdParam._m0[10u].y * log2(_546);
    precise float _549 = _505 - _319;
    precise float _550 = _506 - _326;
    precise float _551 = _507 - _333;
    precise float _552 = dot(vec3(_543, _544, _545), vec3(_549, _550, _551));
    precise float _555 = _543 * _552;
    precise float _556 = _544 * _552;
    precise float _557 = _545 * _552;
    precise float _558 = _319 + _555;
    precise float _559 = _326 + _556;
    precise float _560 = _333 + _557;
    precise float _561 = _505 - _558;
    precise float _562 = _506 - _559;
    precise float _563 = _507 - _560;
    precise float _564 = _544 * _563;
    precise float _565 = _545 * _562;
    precise float _566 = _564 - _565;
    precise float _567 = _545 * _561;
    precise float _568 = _543 * _563;
    precise float _569 = _567 - _568;
    precise float _570 = _543 * _562;
    precise float _571 = _544 * _561;
    precise float _572 = _570 - _571;
    float _573 = sin(_548);
    float _574 = cos(_548);
    precise float _575 = _561 * _574;
    precise float _576 = _562 * _574;
    precise float _577 = _563 * _574;
    precise float _578 = _573 * _566;
    precise float _579 = _573 * _569;
    precise float _580 = _573 * _572;
    precise float _581 = _575 + _578;
    precise float _582 = _576 + _579;
    precise float _583 = _580 + _577;
    precise float _584 = _558 + _581;
    precise float _585 = _559 + _582;
    precise float _586 = _560 + _583;
    precise float _587 = _584 - _505;
    precise float _588 = _585 - _506;
    precise float _589 = _586 - _507;
    precise float _593 = _502 + (_522 ? 0.0 : _587);
    precise float _594 = _503 + (_522 ? 0.0 : _588);
    precise float _595 = _504 + (_522 ? 0.0 : _589);
    precise float _596 = _245 + _593;
    precise float _597 = _252 + _594;
    precise float _598 = _259 + _595;
    precise float _599 = _596 - cbSceneParam._m0[3u].x;
    precise float _600 = _597 - cbSceneParam._m0[3u].y;
    precise float _601 = _598 - cbSceneParam._m0[3u].z;
    precise float _629 = cbSceneParam._m0[24u].x * _599;
    precise float _630 = _600 * cbSceneParam._m0[24u].y;
    precise float _631 = _630 + _629;
    precise float _632 = _601 * cbSceneParam._m0[24u].z;
    precise float _633 = _632 + _631;
    precise float _634 = 1.0 * cbSceneParam._m0[24u].w;
    precise float _635 = _634 + _633;
    precise float _636 = cbSceneParam._m0[25u].x * _599;
    precise float _637 = _600 * cbSceneParam._m0[25u].y;
    precise float _638 = _637 + _636;
    precise float _639 = _601 * cbSceneParam._m0[25u].z;
    precise float _640 = _639 + _638;
    precise float _641 = 1.0 * cbSceneParam._m0[25u].w;
    precise float _642 = _641 + _640;
    precise float _643 = cbSceneParam._m0[26u].x * _599;
    precise float _644 = _600 * cbSceneParam._m0[26u].y;
    precise float _645 = _644 + _643;
    precise float _646 = _601 * cbSceneParam._m0[26u].z;
    precise float _647 = _646 + _645;
    precise float _648 = 1.0 * cbSceneParam._m0[26u].w;
    precise float _649 = _648 + _647;
    precise float _650 = cbSceneParam._m0[27u].x * _599;
    precise float _651 = _600 * cbSceneParam._m0[27u].y;
    precise float _652 = _651 + _650;
    precise float _653 = _601 * cbSceneParam._m0[27u].z;
    precise float _654 = _653 + _652;
    precise float _655 = 1.0 * cbSceneParam._m0[27u].w;
    precise float _656 = _655 + _654;
    gl_Position.x = _635;
    gl_Position.y = _642;
    gl_Position.z = _649;
    gl_Position.w = _656;
    NORMAL_1.x = fma(_171, cbObjMatrix._m0[_217].z, fma(_170, cbObjMatrix._m0[_217].y, cbObjMatrix._m0[_217].x * _168));
    NORMAL_1.y = fma(_171, cbObjMatrix._m0[_224].z, fma(_170, cbObjMatrix._m0[_224].y, cbObjMatrix._m0[_224].x * _168));
    NORMAL_1.z = fma(_171, cbObjMatrix._m0[_231].z, fma(_170, cbObjMatrix._m0[_231].y, cbObjMatrix._m0[_231].x * _168));
    NORMAL_1.w = float(_208);
    TANGENT_1.x = fma(_183, cbObjMatrix._m0[_217].z, fma(_182, cbObjMatrix._m0[_217].y, cbObjMatrix._m0[_217].x * _181));
    TANGENT_1.y = fma(_183, cbObjMatrix._m0[_224].z, fma(_182, cbObjMatrix._m0[_224].y, cbObjMatrix._m0[_224].x * _181));
    TANGENT_1.z = fma(_183, cbObjMatrix._m0[_231].z, fma(_182, cbObjMatrix._m0[_231].y, cbObjMatrix._m0[_231].x * _181));
    TANGENT_1.w = (float(TANGENT.w) + (-127.0)) * 0.0078740157186985015869140625;
    TEXCOORD_2 = ((float(int(uint(TEXCOORD.x))) * 0.00048828125) * cbTexScroll._m0[0u].x) + cbTexScroll._m0[0u].z;
    TEXCOORD_1_1 = ((float(int(uint(TEXCOORD.y))) * 0.00048828125) * cbTexScroll._m0[0u].y) + cbTexScroll._m0[0u].w;
    TEXCOORD_3.x = TEXCOORD_1.x;
    TEXCOORD_3.y = TEXCOORD_1.y;
    TEXCOORD_3.z = TEXCOORD_1.z;
    TEXCOORD_3.w = COLOR_1.x;
    TEXCOORD_7.x = _649;
    TEXCOORD_7.y = _656;
    TEXCOORD_11 = sqrt(((_265 * _265) + (_266 * _266)) + (_267 * _267));
}


