#version 460

out float gl_ClipDistance[2];

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[12];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 5, std140) uniform cbObjMatrixUBO
{
    vec4 _m0[6];
} cbObjMatrix;

layout(set = 0, binding = 10, std140) uniform cbInstanceIdxParamUBO
{
    vec4 _m0[1];
} cbInstanceIdxParam;

layout(set = 0, binding = 26) uniform usamplerBuffer g_forceParam;
layout(set = 0, binding = 25) uniform usamplerBuffer g_InstanceIndexBuffer;

layout(location = 0) in vec3 POSITION;
layout(location = 1) in uvec4 NORMAL;
layout(location = 2) in uvec4 TANGENT;
layout(location = 3) in uvec4 BLENDINDICES;
layout(location = 4) in vec4 BLENDWEIGHT;
layout(location = 5) in vec4 COLOR_1;
layout(location = 6) in ivec2 TEXCOORD;
layout(location = 7) in vec4 TEXCOORD_1;

uint _827;
uint _950;

void main()
{
    uint _71 = uint(gl_InstanceIndex) - uint(gl_BaseInstance);
    gl_Position.x = 0.0;
    gl_Position.y = 0.0;
    gl_Position.z = 0.0;
    gl_Position.w = 0.0;
    gl_ClipDistance[0u] = 0.0;
    gl_ClipDistance[1u] = 0.0;
    uint _120 = _71 * 13u;
    uvec4 _126 = floatBitsToUint(cbInstanceData._m0[_120 + 7u]);
    uint _129 = min(_126.y, 8u);
    bool _132 = _129 == 0u;
    precise float _133 = POSITION.x + 0.0;
    precise float _134 = POSITION.y + 0.0;
    precise float _135 = POSITION.z + 0.0;
    uint _140 = floatBitsToUint(cbInstanceIdxParam._m0[0u]).x + _71;
    precise float _144 = dot(vec4(1.0), vec4(BLENDWEIGHT.x, BLENDWEIGHT.y, BLENDWEIGHT.z, BLENDWEIGHT.w));
    float _148 = isnan(_144) ? 0.001000000047497451305389404296875 : (isnan(0.001000000047497451305389404296875) ? _144 : max(0.001000000047497451305389404296875, _144));
    precise float _150 = BLENDWEIGHT.x / _148;
    precise float _151 = BLENDWEIGHT.y / _148;
    precise float _152 = BLENDWEIGHT.z / _148;
    precise float _153 = BLENDWEIGHT.w / _148;
    uint _155 = texelFetch(g_InstanceIndexBuffer, int(_140)).x * 13u;
    uvec4 _160 = floatBitsToUint(cbInstanceData._m0[_155 + 4u]);
    uint _161 = _160.x;
    uint _163 = (_161 + uint(float(BLENDINDICES.x))) * 3u;
    uint _170 = _163 + 1u;
    uint _177 = _163 + 2u;
    precise float _184 = _150 * cbObjMatrix._m0[_163].x;
    precise float _185 = _150 * cbObjMatrix._m0[_170].x;
    precise float _186 = _150 * cbObjMatrix._m0[_177].x;
    precise float _187 = _150 * cbObjMatrix._m0[_163].y;
    precise float _188 = _150 * cbObjMatrix._m0[_170].y;
    precise float _189 = _150 * cbObjMatrix._m0[_177].y;
    precise float _190 = _150 * cbObjMatrix._m0[_163].z;
    precise float _191 = _150 * cbObjMatrix._m0[_170].z;
    precise float _192 = _150 * cbObjMatrix._m0[_177].z;
    precise float _193 = _150 * cbObjMatrix._m0[_163].w;
    precise float _194 = _150 * cbObjMatrix._m0[_170].w;
    precise float _195 = _150 * cbObjMatrix._m0[_177].w;
    uint _198 = (_161 + uint(float(BLENDINDICES.y))) * 3u;
    uint _205 = _198 + 1u;
    uint _212 = _198 + 2u;
    precise float _219 = _151 * cbObjMatrix._m0[_198].x;
    precise float _220 = _151 * cbObjMatrix._m0[_205].x;
    precise float _221 = _151 * cbObjMatrix._m0[_212].x;
    precise float _222 = _151 * cbObjMatrix._m0[_198].y;
    precise float _223 = _151 * cbObjMatrix._m0[_205].y;
    precise float _224 = _151 * cbObjMatrix._m0[_212].y;
    precise float _225 = _151 * cbObjMatrix._m0[_198].z;
    precise float _226 = _151 * cbObjMatrix._m0[_205].z;
    precise float _227 = _151 * cbObjMatrix._m0[_212].z;
    precise float _228 = _151 * cbObjMatrix._m0[_198].w;
    precise float _229 = _151 * cbObjMatrix._m0[_205].w;
    precise float _230 = _151 * cbObjMatrix._m0[_212].w;
    precise float _231 = _184 + _219;
    precise float _232 = _185 + _220;
    precise float _233 = _186 + _221;
    precise float _234 = _187 + _222;
    precise float _235 = _188 + _223;
    precise float _236 = _189 + _224;
    precise float _237 = _190 + _225;
    precise float _238 = _191 + _226;
    precise float _239 = _192 + _227;
    precise float _240 = _193 + _228;
    precise float _241 = _194 + _229;
    precise float _242 = _195 + _230;
    uint _245 = (_161 + uint(float(BLENDINDICES.z))) * 3u;
    uint _252 = _245 + 1u;
    uint _259 = _245 + 2u;
    precise float _266 = _152 * cbObjMatrix._m0[_245].x;
    precise float _267 = _152 * cbObjMatrix._m0[_252].x;
    precise float _268 = _152 * cbObjMatrix._m0[_259].x;
    precise float _269 = _152 * cbObjMatrix._m0[_245].y;
    precise float _270 = _152 * cbObjMatrix._m0[_252].y;
    precise float _271 = _152 * cbObjMatrix._m0[_259].y;
    precise float _272 = _152 * cbObjMatrix._m0[_245].z;
    precise float _273 = _152 * cbObjMatrix._m0[_252].z;
    precise float _274 = _152 * cbObjMatrix._m0[_259].z;
    precise float _275 = _152 * cbObjMatrix._m0[_245].w;
    precise float _276 = _152 * cbObjMatrix._m0[_252].w;
    precise float _277 = _152 * cbObjMatrix._m0[_259].w;
    precise float _278 = _231 + _266;
    precise float _279 = _232 + _267;
    precise float _280 = _233 + _268;
    precise float _281 = _234 + _269;
    precise float _282 = _235 + _270;
    precise float _283 = _236 + _271;
    precise float _284 = _237 + _272;
    precise float _285 = _238 + _273;
    precise float _286 = _239 + _274;
    precise float _287 = _240 + _275;
    precise float _288 = _241 + _276;
    precise float _289 = _242 + _277;
    uint _292 = (_161 + uint(float(BLENDINDICES.w))) * 3u;
    uint _299 = _292 + 1u;
    uint _306 = _292 + 2u;
    precise float _313 = _153 * cbObjMatrix._m0[_292].x;
    precise float _314 = _153 * cbObjMatrix._m0[_299].x;
    precise float _315 = _153 * cbObjMatrix._m0[_306].x;
    precise float _316 = _153 * cbObjMatrix._m0[_292].y;
    precise float _317 = _153 * cbObjMatrix._m0[_299].y;
    precise float _318 = _153 * cbObjMatrix._m0[_306].y;
    precise float _319 = _153 * cbObjMatrix._m0[_292].z;
    precise float _320 = _153 * cbObjMatrix._m0[_299].z;
    precise float _321 = _153 * cbObjMatrix._m0[_306].z;
    precise float _322 = _153 * cbObjMatrix._m0[_292].w;
    precise float _323 = _153 * cbObjMatrix._m0[_299].w;
    precise float _324 = _153 * cbObjMatrix._m0[_306].w;
    precise float _325 = _278 + _313;
    precise float _326 = _279 + _314;
    precise float _327 = _280 + _315;
    precise float _328 = _281 + _316;
    precise float _329 = _282 + _317;
    precise float _330 = _283 + _318;
    precise float _331 = _284 + _319;
    precise float _332 = _285 + _320;
    precise float _333 = _286 + _321;
    precise float _334 = _287 + _322;
    precise float _335 = _288 + _323;
    precise float _336 = _289 + _324;
    precise float _337 = _133 * _325;
    precise float _338 = _134 * _328;
    precise float _339 = _338 + _337;
    precise float _340 = _135 * _331;
    precise float _341 = _340 + _339;
    precise float _342 = 1.0 * _334;
    precise float _343 = _342 + _341;
    precise float _344 = _133 * _326;
    precise float _345 = _134 * _329;
    precise float _346 = _345 + _344;
    precise float _347 = _135 * _332;
    precise float _348 = _347 + _346;
    precise float _349 = 1.0 * _335;
    precise float _350 = _349 + _348;
    precise float _351 = _133 * _327;
    precise float _352 = _134 * _330;
    precise float _353 = _352 + _351;
    precise float _354 = _135 * _333;
    precise float _355 = _354 + _353;
    precise float _356 = 1.0 * _336;
    precise float _357 = _356 + _355;
    uint _364 = _120 + 1u;
    uint _371 = _120 + 2u;
    precise float _378 = TEXCOORD_1.x * cbInstanceData._m0[_120].x;
    precise float _379 = TEXCOORD_1.y * cbInstanceData._m0[_120].y;
    precise float _380 = _379 + _378;
    precise float _381 = TEXCOORD_1.z * cbInstanceData._m0[_120].z;
    precise float _382 = _381 + _380;
    precise float _383 = 1.0 * cbInstanceData._m0[_120].w;
    precise float _384 = _383 + _382;
    precise float _385 = TEXCOORD_1.x * cbInstanceData._m0[_364].x;
    precise float _386 = TEXCOORD_1.y * cbInstanceData._m0[_364].y;
    precise float _387 = _386 + _385;
    precise float _388 = TEXCOORD_1.z * cbInstanceData._m0[_364].z;
    precise float _389 = _388 + _387;
    precise float _390 = 1.0 * cbInstanceData._m0[_364].w;
    precise float _391 = _390 + _389;
    precise float _392 = TEXCOORD_1.x * cbInstanceData._m0[_371].x;
    precise float _393 = TEXCOORD_1.y * cbInstanceData._m0[_371].y;
    precise float _394 = _393 + _392;
    precise float _395 = TEXCOORD_1.z * cbInstanceData._m0[_371].z;
    precise float _396 = _395 + _394;
    precise float _397 = 1.0 * cbInstanceData._m0[_371].w;
    precise float _398 = _397 + _396;
    precise float _404 = _343 - _384;
    precise float _405 = _350 - _391;
    precise float _406 = _357 - _398;
    precise float _407 = _404 * _404;
    precise float _408 = _405 * _405;
    precise float _409 = _407 + _408;
    precise float _410 = _406 * _406;
    precise float _411 = _409 + _410;
    precise float _413 = cbMtdParam._m0[10u].z * sqrt(_411);
    precise float _418 = cbInstanceData._m0[_120].x * 0.0;
    precise float _419 = 0.0 * cbInstanceData._m0[_120].y;
    precise float _420 = _419 + _418;
    precise float _421 = 0.0 * cbInstanceData._m0[_120].z;
    precise float _422 = _421 + _420;
    precise float _423 = 1.0 * cbInstanceData._m0[_120].w;
    precise float _424 = _423 + _422;
    precise float _425 = cbInstanceData._m0[_364].x * 0.0;
    precise float _426 = 0.0 * cbInstanceData._m0[_364].y;
    precise float _427 = _426 + _425;
    precise float _428 = 0.0 * cbInstanceData._m0[_364].z;
    precise float _429 = _428 + _427;
    precise float _430 = 1.0 * cbInstanceData._m0[_364].w;
    precise float _431 = _430 + _429;
    precise float _432 = cbInstanceData._m0[_371].x * 0.0;
    precise float _433 = 0.0 * cbInstanceData._m0[_371].y;
    precise float _434 = _433 + _432;
    precise float _435 = 0.0 * cbInstanceData._m0[_371].z;
    precise float _436 = _435 + _434;
    precise float _437 = 1.0 * cbInstanceData._m0[_371].w;
    precise float _438 = _437 + _436;
    precise float _441 = _343 * _343;
    precise float _442 = _350 * _350;
    precise float _443 = _441 + _442;
    precise float _444 = _357 * _357;
    precise float _445 = _443 + _444;
    precise float _447 = cbMtdParam._m0[11u].x * sqrt(_445);
    precise float _448 = cbPerFrame._m0[22u].x + _447;
    uint _449 = _126.w;
    float _450;
    float _452;
    float _454;
    if (_132)
    {
        _450 = 0.0;
        _452 = 0.0;
        _454 = 0.0;
    }
    else
    {
        uint _574 = _126.z;
        precise float _451;
        precise float _453;
        precise float _455;
        float _1020;
        float _1022;
        float _1024;
        float _759 = 0.0;
        float _760 = 0.0;
        float _761 = 0.0;
        uint _762 = _574;
        uint _764 = 0u;
        float _800;
        float _819;
        vec4 _832;
        float _833;
        float _834;
        float _848;
        float _849;
        float _850;
        float _867;
        float _868;
        float _869;
        float _870;
        bool _871;
        bool _872;
        bool _873;
        precise float _874;
        precise float _875;
        precise float _876;
        float _877;
        float _878;
        float _879;
        precise float _880;
        bool _883;
        for (;;)
        {
            uint _766 = _762 & 255u;
            uint _768 = _766 * 24u;
            uvec3 _778 = uvec3(texelFetch(g_forceParam, int(_768)).x, texelFetch(g_forceParam, int(_768 + 1u)).x, texelFetch(g_forceParam, int(_768 + 2u)).x);
            uint _783 = (_766 * 24u) + 4u;
            vec4 _796 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_783)).x, texelFetch(g_forceParam, int(_783 + 1u)).x, texelFetch(g_forceParam, int(_783 + 2u)).x, texelFetch(g_forceParam, int(_783 + 3u)).x));
            _800 = _796.w;
            uint _802 = (_766 * 24u) + 8u;
            vec4 _815 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_802)).x, texelFetch(g_forceParam, int(_802 + 1u)).x, texelFetch(g_forceParam, int(_802 + 2u)).x, texelFetch(g_forceParam, int(_802 + 3u)).x));
            _819 = _815.w;
            uint _821 = (_766 * 24u) + 12u;
            _832 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_821)).x, texelFetch(g_forceParam, int(_821 + 1u)).x, _827, texelFetch(g_forceParam, int(_821 + 3u)).x));
            _833 = _832.x;
            _834 = _832.w;
            uint _837 = (_766 * 24u) + 16u;
            vec3 _847 = uintBitsToFloat(uvec3(texelFetch(g_forceParam, int(_837)).x, texelFetch(g_forceParam, int(_837 + 1u)).x, texelFetch(g_forceParam, int(_837 + 2u)).x));
            _848 = _847.x;
            _849 = _847.y;
            _850 = _847.z;
            uint _853 = (_766 * 24u) + 20u;
            vec4 _866 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_853)).x, texelFetch(g_forceParam, int(_853 + 1u)).x, texelFetch(g_forceParam, int(_853 + 2u)).x, texelFetch(g_forceParam, int(_853 + 3u)).x));
            _867 = _866.x;
            _868 = _866.y;
            _869 = _866.z;
            _870 = _866.w;
            _871 = _778.x == 1u;
            _872 = _778.y == 1u;
            _873 = _778.z == 1u;
            _874 = _424 - _796.x;
            _875 = _431 - _796.y;
            _876 = _438 - _796.z;
            _877 = _871 ? _815.x : _874;
            _878 = _871 ? _815.y : _875;
            _879 = _871 ? _815.z : _876;
            _880 = dot(vec3(_877, _878, _879), vec3(_877, _878, _879));
            _883 = _880 > 0.0;
            float frontier_phi_8_pred;
            float frontier_phi_8_pred_1;
            float frontier_phi_8_pred_2;
            if (_883)
            {
                precise float _1006 = _874 * _874;
                precise float _1007 = _875 * _875;
                precise float _1008 = _1006 + _1007;
                precise float _1009 = _876 * _876;
                precise float _1010 = _1009 + _1008;
                float _1011 = sqrt(_1010);
                float _1012 = inversesqrt(_880);
                precise float _1013 = _877 * _1012;
                precise float _1014 = _878 * _1012;
                precise float _1015 = _879 * _1012;
                precise float _1017 = _1011 / (isnan(0.001000000047497451305389404296875) ? _832.y : (isnan(_832.y) ? 0.001000000047497451305389404296875 : max(_832.y, 0.001000000047497451305389404296875)));
                precise float _1018 = 1.0 - _1017;
                float _1349 = isnan(0.0) ? _1018 : (isnan(_1018) ? 0.0 : max(_1018, 0.0));
                float _1019 = isnan(1.0) ? _1349 : (isnan(_1349) ? 1.0 : min(_1349, 1.0));
                float _1069;
                if (_873)
                {
                    float _1056 = inversesqrt(dot(vec3(_874, _875, _876), vec3(_874, _875, _876)));
                    precise float _1057 = _874 * _1056;
                    precise float _1058 = _875 * _1056;
                    precise float _1059 = _876 * _1056;
                    precise float _1063 = dot(vec3(_1013, _1014, _1015), vec3(_1057, _1058, _1059)) * 0.800000011920928955078125;
                    precise float _1065 = _1063 + 0.20000000298023223876953125;
                    float _1360 = isnan(0.0) ? _1065 : (isnan(_1065) ? 0.0 : max(_1065, 0.0));
                    precise float _1068 = _1019 * (isnan(1.0) ? _1360 : (isnan(_1360) ? 1.0 : min(_1360, 1.0)));
                    _1069 = _1068;
                }
                else
                {
                    _1069 = _1019;
                }
                float frontier_phi_8_pred_12_ladder;
                float frontier_phi_8_pred_12_ladder_1;
                float frontier_phi_8_pred_12_ladder_2;
                if (_1069 > 0.0)
                {
                    bool _1088 = _871 && (!_873);
                    precise float _1090 = _1011 * (-4.0);
                    precise float _1094 = 6.283184051513671875 / (isnan(0.001000000047497451305389404296875) ? _833 : (isnan(_833) ? 0.001000000047497451305389404296875 : max(_833, 0.001000000047497451305389404296875)));
                    precise float _1096 = dot(vec2(_1013, _1015), vec2(_874, _876));
                    precise float _1100 = _1094 * _1096;
                    precise float _1101 = float(_1088) * _1100;
                    precise float _1102 = _448 * _1094;
                    precise float _1103 = _1102 - _1101;
                    precise float _1104 = (_1088 ? 0.0 : _1090) + _1103;
                    precise float _1106 = _819 * sin(_1104);
                    precise float _1107 = _1014 * 0.0;
                    precise float _1108 = _1107 - _1015;
                    precise float _1109 = _1015 * 0.0;
                    precise float _1110 = _1013 * 0.0;
                    precise float _1111 = _1109 - _1110;
                    precise float _1112 = _1013 - _1107;
                    precise float _1113 = _834 * _1106;
                    float _1114 = _871 ? _1113 : 0.0;
                    float _1183;
                    if (_872)
                    {
                        precise float _1143 = _848 * 2.0;
                        precise float _1145 = _868 + _869;
                        precise float _1146 = _870 + _1145;
                        precise float _1148 = 6.283184051513671875 / (isnan(0.001000000047497451305389404296875) ? _848 : (isnan(_848) ? 0.001000000047497451305389404296875 : max(_848, 0.001000000047497451305389404296875)));
                        precise float _1149 = _867 * _1148;
                        precise float _1150 = (-0.0) - _1013;
                        precise float _1155 = dot(vec2(_1015, _1150), vec2(_874, _876)) / _1143;
                        precise float _1156 = (-0.0) - _1155;
                        float _1159 = fract(abs(_1155));
                        precise float _1160 = (-0.0) - _1159;
                        precise float _1162 = _1143 * ((_1155 >= _1156) ? _1159 : _1160);
                        precise float _1163 = _1162 * 6.283184051513671875;
                        precise float _1164 = _1163 / _1143;
                        precise float _1166 = (isnan(5.0) ? _848 : (isnan(_848) ? 5.0 : min(_848, 5.0))) * sin(_1164);
                        precise float _1167 = _1096 + _1166;
                        precise float _1168 = _848 * 0.25;
                        precise float _1170 = _448 * _867;
                        precise float _1171 = _1170 - _1168;
                        precise float _1172 = _1171 - _1167;
                        precise float _1173 = _867 * _1146;
                        precise float _1175 = _1172 / (isnan(0.001000000047497451305389404296875) ? _1173 : (isnan(_1173) ? 0.001000000047497451305389404296875 : max(_1173, 0.001000000047497451305389404296875)));
                        float _1176 = fract(_1175);
                        precise float _1178 = 1.0 - _1176;
                        float _1179 = (_1175 < 0.0) ? _1178 : _1176;
                        precise float _1180 = _1145 / _1146;
                        precise float _1181 = _868 / _1146;
                        float _1259;
                        if (_1179 < _1181)
                        {
                            precise float _1255 = _1179 / _1181;
                            _1259 = _1255;
                        }
                        else
                        {
                            float frontier_phi_27_24_ladder;
                            if (_1179 < _1180)
                            {
                                precise float _1269 = _1179 - _1181;
                                precise float _1270 = _1180 - _1181;
                                precise float _1271 = _1269 / _1270;
                                precise float _1260 = 1.0 - _1271;
                                frontier_phi_27_24_ladder = _1260;
                            }
                            else
                            {
                                frontier_phi_27_24_ladder = 0.0;
                            }
                            _1259 = frontier_phi_27_24_ladder;
                        }
                        precise float _1261 = _850 * _1259;
                        precise float _1262 = _1148 * _1096;
                        precise float _1263 = _448 * _1149;
                        precise float _1264 = _1263 - _1262;
                        precise float _1266 = _849 + sin(_1264);
                        precise float _1268 = _1261 * abs(_1266);
                        precise float _1184 = _1268 + 0.0;
                        _1183 = _1184;
                    }
                    else
                    {
                        _1183 = 0.0;
                    }
                    precise float _1185 = _800 + _1106;
                    precise float _1186 = _1185 + _1183;
                    precise float _1187 = _1013 * _1186;
                    precise float _1188 = _1014 * _1186;
                    precise float _1189 = _1015 * _1186;
                    precise float _1190 = _1108 * _1114;
                    precise float _1191 = _1111 * _1114;
                    precise float _1192 = _1112 * _1114;
                    precise float _1193 = _1190 + _1187;
                    precise float _1194 = _1191 + _1188;
                    precise float _1195 = _1192 + _1189;
                    precise float _1196 = _1069 * _1193;
                    precise float _1197 = _1069 * _1194;
                    precise float _1198 = _1069 * _1195;
                    precise float _1021 = _1196 * 0.0500000007450580596923828125;
                    precise float _1023 = _1197 * 0.0500000007450580596923828125;
                    precise float _1025 = _1198 * 0.0500000007450580596923828125;
                    frontier_phi_8_pred_12_ladder = _1021;
                    frontier_phi_8_pred_12_ladder_1 = _1023;
                    frontier_phi_8_pred_12_ladder_2 = _1025;
                }
                else
                {
                    frontier_phi_8_pred_12_ladder = 0.0;
                    frontier_phi_8_pred_12_ladder_1 = 0.0;
                    frontier_phi_8_pred_12_ladder_2 = 0.0;
                }
                frontier_phi_8_pred = frontier_phi_8_pred_12_ladder;
                frontier_phi_8_pred_1 = frontier_phi_8_pred_12_ladder_1;
                frontier_phi_8_pred_2 = frontier_phi_8_pred_12_ladder_2;
            }
            else
            {
                frontier_phi_8_pred = 0.0;
                frontier_phi_8_pred_1 = 0.0;
                frontier_phi_8_pred_2 = 0.0;
            }
            _1020 = frontier_phi_8_pred;
            _1022 = frontier_phi_8_pred_1;
            _1024 = frontier_phi_8_pred_2;
            _451 = _759 + _1020;
            _453 = _760 + _1022;
            _455 = _761 + _1024;
            uint _765 = _764 + 1u;
            if (_765 == _129)
            {
                break;
            }
            else
            {
                _759 = _451;
                _760 = _453;
                _761 = _455;
                _762 = (_764 != 3u) ? (_762 >> 8u) : _449;
                _764 = _765;
                continue;
            }
        }
        _450 = _451;
        _452 = _453;
        _454 = _455;
    }
    precise float _456 = _450 * _450;
    precise float _457 = _452 * _452;
    precise float _458 = _456 + _457;
    precise float _459 = _454 * _454;
    precise float _460 = _458 + _459;
    float _461 = sqrt(_460);
    bool _462 = _461 < 0.00011000000085914507508277893066406;
    float _467 = inversesqrt(dot(vec3(cbInstanceData._m0[_120].x, cbInstanceData._m0[_364].x, cbInstanceData._m0[_371].x), vec3(cbInstanceData._m0[_120].x, cbInstanceData._m0[_364].x, cbInstanceData._m0[_371].x)));
    precise float _468 = cbInstanceData._m0[_120].x * _467;
    precise float _469 = cbInstanceData._m0[_364].x * _467;
    precise float _470 = cbInstanceData._m0[_371].x * _467;
    float _474 = inversesqrt(dot(vec3(cbInstanceData._m0[_120].y, cbInstanceData._m0[_364].y, cbInstanceData._m0[_371].y), vec3(cbInstanceData._m0[_120].y, cbInstanceData._m0[_364].y, cbInstanceData._m0[_371].y)));
    precise float _475 = cbInstanceData._m0[_120].y * _474;
    precise float _476 = cbInstanceData._m0[_364].y * _474;
    precise float _477 = cbInstanceData._m0[_371].y * _474;
    float _481 = inversesqrt(dot(vec3(cbInstanceData._m0[_120].z, cbInstanceData._m0[_364].z, cbInstanceData._m0[_371].z), vec3(cbInstanceData._m0[_120].z, cbInstanceData._m0[_364].z, cbInstanceData._m0[_371].z)));
    precise float _482 = cbInstanceData._m0[_120].z * _481;
    precise float _483 = cbInstanceData._m0[_364].z * _481;
    precise float _484 = cbInstanceData._m0[_371].z * _481;
    precise float _485 = _468 * 0.0;
    precise float _486 = 1.0 * _475;
    precise float _487 = _486 + _485;
    precise float _488 = 0.0 * _482;
    precise float _489 = _488 + _487;
    precise float _490 = _469 * 0.0;
    precise float _491 = 1.0 * _476;
    precise float _492 = _491 + _490;
    precise float _493 = 0.0 * _483;
    precise float _494 = _493 + _492;
    precise float _495 = _470 * 0.0;
    precise float _496 = 1.0 * _477;
    precise float _497 = _496 + _495;
    precise float _498 = 0.0 * _484;
    precise float _499 = _498 + _497;
    float _503 = inversesqrt(dot(vec3(_450, _452, _454), vec3(_450, _452, _454)));
    precise float _504 = _450 * _503;
    precise float _505 = _452 * _503;
    precise float _506 = _454 * _503;
    precise float _507 = _494 * _506;
    precise float _508 = _499 * _505;
    precise float _509 = _507 - _508;
    precise float _510 = _499 * _504;
    precise float _511 = _489 * _506;
    precise float _512 = _510 - _511;
    precise float _513 = _489 * _505;
    precise float _514 = _494 * _504;
    precise float _515 = _513 - _514;
    float _519 = inversesqrt(dot(vec3(_509, _512, _515), vec3(_509, _512, _515)));
    precise float _520 = _519 * _509;
    precise float _521 = _519 * _512;
    precise float _522 = _519 * _515;
    precise float _523 = _461 + 1.0;
    precise float _525 = cbMtdParam._m0[10u].w * log2(_523);
    precise float _526 = _343 - _424;
    precise float _527 = _350 - _431;
    precise float _528 = _357 - _438;
    precise float _529 = dot(vec3(_520, _521, _522), vec3(_526, _527, _528));
    precise float _532 = _520 * _529;
    precise float _533 = _521 * _529;
    precise float _534 = _522 * _529;
    precise float _535 = _424 + _532;
    precise float _536 = _431 + _533;
    precise float _537 = _438 + _534;
    precise float _538 = _343 - _535;
    precise float _539 = _350 - _536;
    precise float _540 = _357 - _537;
    precise float _541 = _521 * _540;
    precise float _542 = _522 * _539;
    precise float _543 = _541 - _542;
    precise float _544 = _522 * _538;
    precise float _545 = _520 * _540;
    precise float _546 = _544 - _545;
    precise float _547 = _520 * _539;
    precise float _548 = _521 * _538;
    precise float _549 = _547 - _548;
    float _550 = sin(_525);
    float _551 = cos(_525);
    precise float _552 = _538 * _551;
    precise float _553 = _539 * _551;
    precise float _554 = _540 * _551;
    precise float _555 = _550 * _543;
    precise float _556 = _550 * _546;
    precise float _557 = _550 * _549;
    precise float _558 = _552 + _555;
    precise float _559 = _553 + _556;
    precise float _560 = _557 + _554;
    precise float _561 = _535 + _558;
    precise float _562 = _536 + _559;
    precise float _563 = _537 + _560;
    precise float _564 = _561 - _343;
    precise float _565 = _562 - _350;
    precise float _566 = _563 - _357;
    float _567 = _462 ? 0.0 : _564;
    float _568 = _462 ? 0.0 : _565;
    float _569 = _462 ? 0.0 : _566;
    precise float _570 = _343 + _567;
    precise float _571 = _350 + _568;
    precise float _572 = _357 + _569;
    precise float _573 = cbPerFrame._m0[22u].x + _413;
    float _575;
    float _577;
    float _579;
    if (_132)
    {
        _575 = 0.0;
        _577 = 0.0;
        _579 = 0.0;
    }
    else
    {
        uint _758 = _126.z;
        precise float _576;
        precise float _578;
        precise float _580;
        float _1044;
        float _1046;
        float _1048;
        float _884 = 0.0;
        float _885 = 0.0;
        float _886 = 0.0;
        uint _887 = _758;
        uint _889 = 0u;
        float _923;
        float _942;
        vec4 _955;
        float _956;
        float _957;
        float _970;
        float _971;
        float _972;
        float _988;
        float _989;
        float _990;
        float _991;
        bool _992;
        bool _993;
        bool _994;
        precise float _995;
        precise float _996;
        precise float _997;
        float _998;
        float _999;
        float _1000;
        precise float _1001;
        bool _1004;
        for (;;)
        {
            uint _891 = _887 & 255u;
            uint _892 = _891 * 24u;
            uvec3 _901 = uvec3(texelFetch(g_forceParam, int(_892)).x, texelFetch(g_forceParam, int(_892 + 1u)).x, texelFetch(g_forceParam, int(_892 + 2u)).x);
            uint _906 = (_891 * 24u) + 4u;
            vec4 _919 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_906)).x, texelFetch(g_forceParam, int(_906 + 1u)).x, texelFetch(g_forceParam, int(_906 + 2u)).x, texelFetch(g_forceParam, int(_906 + 3u)).x));
            _923 = _919.w;
            uint _925 = (_891 * 24u) + 8u;
            vec4 _938 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_925)).x, texelFetch(g_forceParam, int(_925 + 1u)).x, texelFetch(g_forceParam, int(_925 + 2u)).x, texelFetch(g_forceParam, int(_925 + 3u)).x));
            _942 = _938.w;
            uint _944 = (_891 * 24u) + 12u;
            _955 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_944)).x, texelFetch(g_forceParam, int(_944 + 1u)).x, _950, texelFetch(g_forceParam, int(_944 + 3u)).x));
            _956 = _955.x;
            _957 = _955.w;
            uint _959 = (_891 * 24u) + 16u;
            vec3 _969 = uintBitsToFloat(uvec3(texelFetch(g_forceParam, int(_959)).x, texelFetch(g_forceParam, int(_959 + 1u)).x, texelFetch(g_forceParam, int(_959 + 2u)).x));
            _970 = _969.x;
            _971 = _969.y;
            _972 = _969.z;
            uint _974 = (_891 * 24u) + 20u;
            vec4 _987 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_974)).x, texelFetch(g_forceParam, int(_974 + 1u)).x, texelFetch(g_forceParam, int(_974 + 2u)).x, texelFetch(g_forceParam, int(_974 + 3u)).x));
            _988 = _987.x;
            _989 = _987.y;
            _990 = _987.z;
            _991 = _987.w;
            _992 = _901.x == 1u;
            _993 = _901.y == 1u;
            _994 = _901.z == 1u;
            _995 = _384 - _919.x;
            _996 = _391 - _919.y;
            _997 = _398 - _919.z;
            _998 = _992 ? _938.x : _995;
            _999 = _992 ? _938.y : _996;
            _1000 = _992 ? _938.z : _997;
            _1001 = dot(vec3(_998, _999, _1000), vec3(_998, _999, _1000));
            _1004 = _1001 > 0.0;
            float frontier_phi_10_pred;
            float frontier_phi_10_pred_1;
            float frontier_phi_10_pred_2;
            if (_1004)
            {
                precise float _1030 = _995 * _995;
                precise float _1031 = _996 * _996;
                precise float _1032 = _1030 + _1031;
                precise float _1033 = _997 * _997;
                precise float _1034 = _1033 + _1032;
                float _1035 = sqrt(_1034);
                float _1036 = inversesqrt(_1001);
                precise float _1037 = _998 * _1036;
                precise float _1038 = _999 * _1036;
                precise float _1039 = _1000 * _1036;
                precise float _1041 = _1035 / (isnan(0.001000000047497451305389404296875) ? _955.y : (isnan(_955.y) ? 0.001000000047497451305389404296875 : max(_955.y, 0.001000000047497451305389404296875)));
                precise float _1042 = 1.0 - _1041;
                float _1396 = isnan(0.0) ? _1042 : (isnan(_1042) ? 0.0 : max(_1042, 0.0));
                float _1043 = isnan(1.0) ? _1396 : (isnan(_1396) ? 1.0 : min(_1396, 1.0));
                float _1085;
                if (_994)
                {
                    float _1074 = inversesqrt(dot(vec3(_995, _996, _997), vec3(_995, _996, _997)));
                    precise float _1075 = _995 * _1074;
                    precise float _1076 = _996 * _1074;
                    precise float _1077 = _997 * _1074;
                    precise float _1081 = dot(vec3(_1037, _1038, _1039), vec3(_1075, _1076, _1077)) * 0.800000011920928955078125;
                    precise float _1082 = _1081 + 0.20000000298023223876953125;
                    float _1407 = isnan(0.0) ? _1082 : (isnan(_1082) ? 0.0 : max(_1082, 0.0));
                    precise float _1084 = _1043 * (isnan(1.0) ? _1407 : (isnan(_1407) ? 1.0 : min(_1407, 1.0)));
                    _1085 = _1084;
                }
                else
                {
                    _1085 = _1043;
                }
                float frontier_phi_10_pred_15_ladder;
                float frontier_phi_10_pred_15_ladder_1;
                float frontier_phi_10_pred_15_ladder_2;
                if (_1085 > 0.0)
                {
                    bool _1116 = _992 && (!_994);
                    precise float _1118 = _1035 * (-4.0);
                    precise float _1121 = 6.283184051513671875 / (isnan(0.001000000047497451305389404296875) ? _956 : (isnan(_956) ? 0.001000000047497451305389404296875 : max(_956, 0.001000000047497451305389404296875)));
                    precise float _1122 = cbMtdParam._m0[11u].y * _1121;
                    precise float _1123 = dot(vec2(_1037, _1039), vec2(_995, _997));
                    precise float _1126 = _1123 * _1122;
                    precise float _1127 = float(_1116) * _1126;
                    precise float _1128 = _573 * _1122;
                    precise float _1129 = _1128 - _1127;
                    precise float _1130 = (_1116 ? 0.0 : _1118) + _1129;
                    precise float _1132 = _942 * sin(_1130);
                    precise float _1133 = _1038 * 0.0;
                    precise float _1134 = _1133 - _1039;
                    precise float _1135 = _1039 * 0.0;
                    precise float _1136 = _1037 * 0.0;
                    precise float _1137 = _1135 - _1136;
                    precise float _1138 = _1037 - _1133;
                    precise float _1139 = _957 * _1132;
                    float _1140 = _992 ? _1139 : 0.0;
                    float _1239;
                    if (_993)
                    {
                        precise float _1201 = _970 * 2.0;
                        precise float _1202 = _989 + _990;
                        precise float _1203 = _991 + _1202;
                        precise float _1205 = 6.283184051513671875 / (isnan(0.001000000047497451305389404296875) ? _970 : (isnan(_970) ? 0.001000000047497451305389404296875 : max(_970, 0.001000000047497451305389404296875)));
                        precise float _1206 = cbMtdParam._m0[11u].y * _1205;
                        precise float _1207 = _988 * _1206;
                        precise float _1208 = (-0.0) - _1037;
                        precise float _1212 = dot(vec2(_1039, _1208), vec2(_995, _997)) / _1201;
                        precise float _1213 = (-0.0) - _1212;
                        float _1216 = fract(abs(_1212));
                        precise float _1217 = (-0.0) - _1216;
                        precise float _1219 = _1201 * ((_1212 >= _1213) ? _1216 : _1217);
                        precise float _1220 = _1219 * 6.283184051513671875;
                        precise float _1221 = _1220 / _1201;
                        precise float _1223 = (isnan(5.0) ? _970 : (isnan(_970) ? 5.0 : min(_970, 5.0))) * sin(_1221);
                        precise float _1224 = _1123 + _1223;
                        precise float _1225 = _970 * 0.25;
                        precise float _1226 = _573 * _988;
                        precise float _1227 = _1226 - _1225;
                        precise float _1228 = _1227 - _1224;
                        precise float _1229 = _988 * _1203;
                        precise float _1231 = _1228 / (isnan(0.001000000047497451305389404296875) ? _1229 : (isnan(_1229) ? 0.001000000047497451305389404296875 : max(_1229, 0.001000000047497451305389404296875)));
                        float _1232 = fract(_1231);
                        precise float _1234 = 1.0 - _1232;
                        float _1235 = (_1231 < 0.0) ? _1234 : _1232;
                        precise float _1236 = _1202 / _1203;
                        precise float _1237 = _989 / _1203;
                        float _1272;
                        if (_1235 < _1237)
                        {
                            precise float _1257 = _1235 / _1237;
                            _1272 = _1257;
                        }
                        else
                        {
                            float frontier_phi_29_26_ladder;
                            if (_1235 < _1236)
                            {
                                precise float _1282 = _1235 - _1237;
                                precise float _1283 = _1236 - _1237;
                                precise float _1284 = _1282 / _1283;
                                precise float _1273 = 1.0 - _1284;
                                frontier_phi_29_26_ladder = _1273;
                            }
                            else
                            {
                                frontier_phi_29_26_ladder = 0.0;
                            }
                            _1272 = frontier_phi_29_26_ladder;
                        }
                        precise float _1274 = _972 * _1272;
                        precise float _1275 = _1206 * _1123;
                        precise float _1276 = _573 * _1207;
                        precise float _1277 = _1276 - _1275;
                        precise float _1279 = _971 + sin(_1277);
                        precise float _1281 = _1274 * abs(_1279);
                        precise float _1240 = _1281 + 0.0;
                        _1239 = _1240;
                    }
                    else
                    {
                        _1239 = 0.0;
                    }
                    precise float _1241 = _923 + _1132;
                    precise float _1242 = _1241 + _1239;
                    precise float _1243 = _1037 * _1242;
                    precise float _1244 = _1038 * _1242;
                    precise float _1245 = _1039 * _1242;
                    precise float _1246 = _1134 * _1140;
                    precise float _1247 = _1137 * _1140;
                    precise float _1248 = _1138 * _1140;
                    precise float _1249 = _1246 + _1243;
                    precise float _1250 = _1247 + _1244;
                    precise float _1251 = _1248 + _1245;
                    precise float _1252 = _1085 * _1249;
                    precise float _1253 = _1085 * _1250;
                    precise float _1254 = _1085 * _1251;
                    precise float _1045 = _1252 * 0.0500000007450580596923828125;
                    precise float _1047 = _1253 * 0.0500000007450580596923828125;
                    precise float _1049 = _1254 * 0.0500000007450580596923828125;
                    frontier_phi_10_pred_15_ladder = _1045;
                    frontier_phi_10_pred_15_ladder_1 = _1047;
                    frontier_phi_10_pred_15_ladder_2 = _1049;
                }
                else
                {
                    frontier_phi_10_pred_15_ladder = 0.0;
                    frontier_phi_10_pred_15_ladder_1 = 0.0;
                    frontier_phi_10_pred_15_ladder_2 = 0.0;
                }
                frontier_phi_10_pred = frontier_phi_10_pred_15_ladder;
                frontier_phi_10_pred_1 = frontier_phi_10_pred_15_ladder_1;
                frontier_phi_10_pred_2 = frontier_phi_10_pred_15_ladder_2;
            }
            else
            {
                frontier_phi_10_pred = 0.0;
                frontier_phi_10_pred_1 = 0.0;
                frontier_phi_10_pred_2 = 0.0;
            }
            _1044 = frontier_phi_10_pred;
            _1046 = frontier_phi_10_pred_1;
            _1048 = frontier_phi_10_pred_2;
            _576 = _884 + _1044;
            _578 = _885 + _1046;
            _580 = _886 + _1048;
            uint _890 = _889 + 1u;
            if (_890 == _129)
            {
                break;
            }
            else
            {
                _884 = _576;
                _885 = _578;
                _886 = _580;
                _887 = (_889 != 3u) ? (_887 >> 8u) : _449;
                _889 = _890;
                continue;
            }
        }
        _575 = _576;
        _577 = _578;
        _579 = _580;
    }
    precise float _581 = _575 * _575;
    precise float _582 = _577 * _577;
    precise float _583 = _581 + _582;
    precise float _584 = _579 * _579;
    precise float _585 = _583 + _584;
    float _586 = sqrt(_585);
    bool _587 = _586 < 0.00011000000085914507508277893066406;
    float _591 = inversesqrt(dot(vec3(_575, _577, _579), vec3(_575, _577, _579)));
    precise float _592 = _575 * _591;
    precise float _593 = _577 * _591;
    precise float _594 = _579 * _591;
    precise float _595 = _494 * _594;
    precise float _596 = _499 * _593;
    precise float _597 = _595 - _596;
    precise float _598 = _499 * _592;
    precise float _599 = _489 * _594;
    precise float _600 = _598 - _599;
    precise float _601 = _489 * _593;
    precise float _602 = _494 * _592;
    precise float _603 = _601 - _602;
    float _607 = inversesqrt(dot(vec3(_597, _600, _603), vec3(_597, _600, _603)));
    precise float _608 = _607 * _597;
    precise float _609 = _607 * _600;
    precise float _610 = _607 * _603;
    precise float _611 = _586 + 1.0;
    precise float _613 = cbMtdParam._m0[10u].y * log2(_611);
    precise float _614 = _570 - _384;
    precise float _615 = _571 - _391;
    precise float _616 = _572 - _398;
    precise float _617 = dot(vec3(_608, _609, _610), vec3(_614, _615, _616));
    precise float _620 = _608 * _617;
    precise float _621 = _609 * _617;
    precise float _622 = _610 * _617;
    precise float _623 = _384 + _620;
    precise float _624 = _391 + _621;
    precise float _625 = _398 + _622;
    precise float _626 = _570 - _623;
    precise float _627 = _571 - _624;
    precise float _628 = _572 - _625;
    precise float _629 = _609 * _628;
    precise float _630 = _610 * _627;
    precise float _631 = _629 - _630;
    precise float _632 = _610 * _626;
    precise float _633 = _608 * _628;
    precise float _634 = _632 - _633;
    precise float _635 = _608 * _627;
    precise float _636 = _609 * _626;
    precise float _637 = _635 - _636;
    float _638 = sin(_613);
    float _639 = cos(_613);
    precise float _640 = _626 * _639;
    precise float _641 = _627 * _639;
    precise float _642 = _628 * _639;
    precise float _643 = _638 * _631;
    precise float _644 = _638 * _634;
    precise float _645 = _638 * _637;
    precise float _646 = _640 + _643;
    precise float _647 = _641 + _644;
    precise float _648 = _645 + _642;
    precise float _649 = _623 + _646;
    precise float _650 = _624 + _647;
    precise float _651 = _625 + _648;
    precise float _652 = _649 - _570;
    precise float _653 = _650 - _571;
    precise float _654 = _651 - _572;
    precise float _658 = _567 + (_587 ? 0.0 : _652);
    precise float _659 = _568 + (_587 ? 0.0 : _653);
    precise float _660 = _569 + (_587 ? 0.0 : _654);
    precise float _661 = _343 + _658;
    precise float _662 = _350 + _659;
    precise float _663 = _357 + _660;
    precise float _669 = _661 - cbSceneParam._m0[3u].x;
    precise float _670 = _662 - cbSceneParam._m0[3u].y;
    precise float _671 = _663 - cbSceneParam._m0[3u].z;
    precise float _699 = cbSceneParam._m0[24u].x * _669;
    precise float _700 = _670 * cbSceneParam._m0[24u].y;
    precise float _701 = _700 + _699;
    precise float _702 = _671 * cbSceneParam._m0[24u].z;
    precise float _703 = _702 + _701;
    precise float _704 = 1.0 * cbSceneParam._m0[24u].w;
    precise float _705 = _704 + _703;
    precise float _706 = cbSceneParam._m0[25u].x * _669;
    precise float _707 = _670 * cbSceneParam._m0[25u].y;
    precise float _708 = _707 + _706;
    precise float _709 = _671 * cbSceneParam._m0[25u].z;
    precise float _710 = _709 + _708;
    precise float _711 = 1.0 * cbSceneParam._m0[25u].w;
    precise float _712 = _711 + _710;
    precise float _713 = cbSceneParam._m0[26u].x * _669;
    precise float _714 = _670 * cbSceneParam._m0[26u].y;
    precise float _715 = _714 + _713;
    precise float _716 = _671 * cbSceneParam._m0[26u].z;
    precise float _717 = _716 + _715;
    precise float _718 = 1.0 * cbSceneParam._m0[26u].w;
    precise float _719 = _718 + _717;
    precise float _720 = cbSceneParam._m0[27u].x * _669;
    precise float _721 = _670 * cbSceneParam._m0[27u].y;
    precise float _722 = _721 + _720;
    precise float _723 = _671 * cbSceneParam._m0[27u].z;
    precise float _724 = _723 + _722;
    precise float _725 = 1.0 * cbSceneParam._m0[27u].w;
    precise float _726 = _725 + _724;
    gl_Position.x = 0.0;
    gl_Position.y = 0.0;
    gl_Position.z = 0.0;
    gl_Position.w = 0.0;
    gl_ClipDistance[0u] = 0.0;
    gl_ClipDistance[1u] = 0.0;
    gl_Position.x = _705;
    gl_Position.y = _712;
    gl_Position.z = _719;
    gl_Position.w = _726;
    gl_ClipDistance[0u] = dot(vec4(_705, _712, _719, _726), vec4(cbSceneParam._m0[4u]));
    gl_ClipDistance[1u] = dot(vec4(_705, _712, _719, _726), vec4(cbInstanceData._m0[_155 + 3u]));
}


