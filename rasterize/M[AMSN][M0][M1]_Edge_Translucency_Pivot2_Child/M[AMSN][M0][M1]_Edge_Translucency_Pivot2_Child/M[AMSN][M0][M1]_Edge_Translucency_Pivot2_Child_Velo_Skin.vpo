#version 460

out float gl_ClipDistance[2];

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[12];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 5, std140) uniform cbObjMatrixUBO
{
    vec4 _m0[6];
} cbObjMatrix;

layout(set = 0, binding = 6, std140) uniform cbPrevObjMatrixUBO
{
    vec4 _m0[6];
} cbPrevObjMatrix;

layout(set = 0, binding = 10, std140) uniform cbInstanceIdxParamUBO
{
    vec4 _m0[1];
} cbInstanceIdxParam;

layout(set = 0, binding = 11, std140) uniform cbTexScrollUBO
{
    vec4 _m0[4];
} cbTexScroll;

layout(set = 0, binding = 26) uniform usamplerBuffer g_forceParam;
layout(set = 0, binding = 25) uniform usamplerBuffer g_InstanceIndexBuffer;

layout(location = 0) in vec3 POSITION;
layout(location = 1) in uvec4 NORMAL;
layout(location = 2) in uvec4 TANGENT;
layout(location = 3) in uvec4 BLENDINDICES;
layout(location = 4) in vec4 BLENDWEIGHT;
layout(location = 5) in vec4 COLOR_1;
layout(location = 6) in ivec2 TEXCOORD;
layout(location = 7) in vec4 TEXCOORD_1;
layout(location = 1) out vec4 POSITION_1;
layout(location = 2) out vec4 NORMAL_1;
layout(location = 3) out vec4 TANGENT_1;
layout(location = 4) out float TEXCOORD_2;
layout(location = 4, component = 1) out float TEXCOORD_1_1;
layout(location = 5) out vec4 TEXCOORD_3;
layout(location = 6) out vec4 TEXCOORD_8;
layout(location = 7) out vec4 TEXCOORD_9;
layout(location = 8) out vec3 TEXCOORD_10;

uint _1197;
uint _1320;

void main()
{
    uint _91 = uint(gl_InstanceIndex) - uint(gl_BaseInstance);
    gl_Position.x = 0.0;
    gl_Position.y = 0.0;
    gl_Position.z = 0.0;
    gl_Position.w = 0.0;
    POSITION_1.x = 0.0;
    POSITION_1.y = 0.0;
    POSITION_1.z = 0.0;
    POSITION_1.w = 0.0;
    NORMAL_1.x = 0.0;
    NORMAL_1.y = 0.0;
    NORMAL_1.z = 0.0;
    NORMAL_1.w = 0.0;
    TANGENT_1.x = 0.0;
    TANGENT_1.y = 0.0;
    TANGENT_1.z = 0.0;
    TANGENT_1.w = 0.0;
    TEXCOORD_2 = 0.0;
    TEXCOORD_1_1 = 0.0;
    TEXCOORD_3.x = 0.0;
    TEXCOORD_3.y = 0.0;
    TEXCOORD_3.z = 0.0;
    TEXCOORD_3.w = 0.0;
    TEXCOORD_8.x = 0.0;
    TEXCOORD_8.y = 0.0;
    TEXCOORD_8.z = 0.0;
    TEXCOORD_8.w = 0.0;
    TEXCOORD_9.x = 0.0;
    TEXCOORD_9.y = 0.0;
    TEXCOORD_9.z = 0.0;
    TEXCOORD_9.w = 0.0;
    TEXCOORD_10.x = 0.0;
    TEXCOORD_10.y = 0.0;
    TEXCOORD_10.z = 0.0;
    gl_ClipDistance[0u] = 0.0;
    gl_ClipDistance[1u] = 0.0;
    float _207 = (float(NORMAL.x) + (-127.0)) * 0.0078740157186985015869140625;
    float _209 = (float(NORMAL.y) + (-127.0)) * 0.0078740157186985015869140625;
    float _210 = (float(NORMAL.z) + (-127.0)) * 0.0078740157186985015869140625;
    float _219 = (float(TANGENT.x) + (-127.0)) * 0.0078740157186985015869140625;
    float _220 = (float(TANGENT.y) + (-127.0)) * 0.0078740157186985015869140625;
    float _221 = (float(TANGENT.z) + (-127.0)) * 0.0078740157186985015869140625;
    uint _227 = _91 * 13u;
    uvec4 _233 = floatBitsToUint(cbInstanceData._m0[_227 + 7u]);
    uint _236 = min(_233.y, 8u);
    bool _239 = _236 == 0u;
    precise float _240 = POSITION.x + 0.0;
    precise float _241 = POSITION.y + 0.0;
    precise float _242 = POSITION.z + 0.0;
    uint _247 = floatBitsToUint(cbInstanceIdxParam._m0[0u]).x + _91;
    uvec4 _249 = texelFetch(g_InstanceIndexBuffer, int(_247));
    uint _250 = _249.x;
    precise float _251 = dot(vec4(1.0), vec4(BLENDWEIGHT.x, BLENDWEIGHT.y, BLENDWEIGHT.z, BLENDWEIGHT.w));
    float _255 = isnan(_251) ? 0.001000000047497451305389404296875 : (isnan(0.001000000047497451305389404296875) ? _251 : max(0.001000000047497451305389404296875, _251));
    precise float _257 = BLENDWEIGHT.x / _255;
    precise float _258 = BLENDWEIGHT.y / _255;
    precise float _259 = BLENDWEIGHT.z / _255;
    precise float _260 = BLENDWEIGHT.w / _255;
    uint _262 = _250 * 13u;
    uvec4 _266 = floatBitsToUint(cbInstanceData._m0[_262 + 4u]);
    uint _267 = _266.x;
    uint _269 = (_267 + uint(float(BLENDINDICES.x))) * 3u;
    uint _276 = _269 + 1u;
    uint _283 = _269 + 2u;
    precise float _290 = _257 * cbObjMatrix._m0[_269].x;
    precise float _291 = _257 * cbObjMatrix._m0[_276].x;
    precise float _292 = _257 * cbObjMatrix._m0[_283].x;
    precise float _293 = _257 * cbObjMatrix._m0[_269].y;
    precise float _294 = _257 * cbObjMatrix._m0[_276].y;
    precise float _295 = _257 * cbObjMatrix._m0[_283].y;
    precise float _296 = _257 * cbObjMatrix._m0[_269].z;
    precise float _297 = _257 * cbObjMatrix._m0[_276].z;
    precise float _298 = _257 * cbObjMatrix._m0[_283].z;
    precise float _299 = _257 * cbObjMatrix._m0[_269].w;
    precise float _300 = _257 * cbObjMatrix._m0[_276].w;
    precise float _301 = _257 * cbObjMatrix._m0[_283].w;
    uint _304 = (_267 + uint(float(BLENDINDICES.y))) * 3u;
    uint _311 = _304 + 1u;
    uint _318 = _304 + 2u;
    precise float _325 = _258 * cbObjMatrix._m0[_304].x;
    precise float _326 = _258 * cbObjMatrix._m0[_311].x;
    precise float _327 = _258 * cbObjMatrix._m0[_318].x;
    precise float _328 = _258 * cbObjMatrix._m0[_304].y;
    precise float _329 = _258 * cbObjMatrix._m0[_311].y;
    precise float _330 = _258 * cbObjMatrix._m0[_318].y;
    precise float _331 = _258 * cbObjMatrix._m0[_304].z;
    precise float _332 = _258 * cbObjMatrix._m0[_311].z;
    precise float _333 = _258 * cbObjMatrix._m0[_318].z;
    precise float _334 = _258 * cbObjMatrix._m0[_304].w;
    precise float _335 = _258 * cbObjMatrix._m0[_311].w;
    precise float _336 = _258 * cbObjMatrix._m0[_318].w;
    precise float _337 = _290 + _325;
    precise float _338 = _291 + _326;
    precise float _339 = _292 + _327;
    precise float _340 = _293 + _328;
    precise float _341 = _294 + _329;
    precise float _342 = _295 + _330;
    precise float _343 = _296 + _331;
    precise float _344 = _297 + _332;
    precise float _345 = _298 + _333;
    precise float _346 = _299 + _334;
    precise float _347 = _300 + _335;
    precise float _348 = _301 + _336;
    uint _351 = (_267 + uint(float(BLENDINDICES.z))) * 3u;
    uint _358 = _351 + 1u;
    uint _365 = _351 + 2u;
    precise float _372 = _259 * cbObjMatrix._m0[_351].x;
    precise float _373 = _259 * cbObjMatrix._m0[_358].x;
    precise float _374 = _259 * cbObjMatrix._m0[_365].x;
    precise float _375 = _259 * cbObjMatrix._m0[_351].y;
    precise float _376 = _259 * cbObjMatrix._m0[_358].y;
    precise float _377 = _259 * cbObjMatrix._m0[_365].y;
    precise float _378 = _259 * cbObjMatrix._m0[_351].z;
    precise float _379 = _259 * cbObjMatrix._m0[_358].z;
    precise float _380 = _259 * cbObjMatrix._m0[_365].z;
    precise float _381 = _259 * cbObjMatrix._m0[_351].w;
    precise float _382 = _259 * cbObjMatrix._m0[_358].w;
    precise float _383 = _259 * cbObjMatrix._m0[_365].w;
    precise float _384 = _337 + _372;
    precise float _385 = _338 + _373;
    precise float _386 = _339 + _374;
    precise float _387 = _340 + _375;
    precise float _388 = _341 + _376;
    precise float _389 = _342 + _377;
    precise float _390 = _343 + _378;
    precise float _391 = _344 + _379;
    precise float _392 = _345 + _380;
    precise float _393 = _346 + _381;
    precise float _394 = _347 + _382;
    precise float _395 = _348 + _383;
    uint _398 = (_267 + uint(float(BLENDINDICES.w))) * 3u;
    uint _405 = _398 + 1u;
    uint _412 = _398 + 2u;
    precise float _419 = _260 * cbObjMatrix._m0[_398].x;
    precise float _420 = _260 * cbObjMatrix._m0[_405].x;
    precise float _421 = _260 * cbObjMatrix._m0[_412].x;
    precise float _422 = _260 * cbObjMatrix._m0[_398].y;
    precise float _423 = _260 * cbObjMatrix._m0[_405].y;
    precise float _424 = _260 * cbObjMatrix._m0[_412].y;
    precise float _425 = _260 * cbObjMatrix._m0[_398].z;
    precise float _426 = _260 * cbObjMatrix._m0[_405].z;
    precise float _427 = _260 * cbObjMatrix._m0[_412].z;
    precise float _428 = _260 * cbObjMatrix._m0[_398].w;
    precise float _429 = _260 * cbObjMatrix._m0[_405].w;
    precise float _430 = _260 * cbObjMatrix._m0[_412].w;
    precise float _431 = _384 + _419;
    precise float _432 = _385 + _420;
    precise float _433 = _386 + _421;
    precise float _434 = _387 + _422;
    precise float _435 = _388 + _423;
    precise float _436 = _389 + _424;
    precise float _437 = _390 + _425;
    precise float _438 = _391 + _426;
    precise float _439 = _392 + _427;
    precise float _440 = _393 + _428;
    precise float _441 = _394 + _429;
    precise float _442 = _395 + _430;
    precise float _443 = _240 * _431;
    precise float _444 = _241 * _434;
    precise float _445 = _444 + _443;
    precise float _446 = _242 * _437;
    precise float _447 = _446 + _445;
    precise float _448 = 1.0 * _440;
    precise float _449 = _448 + _447;
    precise float _450 = _240 * _432;
    precise float _451 = _241 * _435;
    precise float _452 = _451 + _450;
    precise float _453 = _242 * _438;
    precise float _454 = _453 + _452;
    precise float _455 = 1.0 * _441;
    precise float _456 = _455 + _454;
    precise float _457 = _240 * _433;
    precise float _458 = _241 * _436;
    precise float _459 = _458 + _457;
    precise float _460 = _242 * _439;
    precise float _461 = _460 + _459;
    precise float _462 = 1.0 * _442;
    precise float _463 = _462 + _461;
    float _634 = fma(_210, _437, fma(_209, _434, _431 * _207));
    float _637 = fma(_210, _438, fma(_209, _435, _432 * _207));
    float _640 = fma(_210, _439, fma(_209, _436, _433 * _207));
    uint _657 = _227 + 1u;
    uint _664 = _227 + 2u;
    precise float _671 = TEXCOORD_1.x * cbInstanceData._m0[_227].x;
    precise float _672 = TEXCOORD_1.y * cbInstanceData._m0[_227].y;
    precise float _673 = _672 + _671;
    precise float _674 = TEXCOORD_1.z * cbInstanceData._m0[_227].z;
    precise float _675 = _674 + _673;
    precise float _676 = 1.0 * cbInstanceData._m0[_227].w;
    precise float _677 = _676 + _675;
    precise float _678 = TEXCOORD_1.x * cbInstanceData._m0[_657].x;
    precise float _679 = TEXCOORD_1.y * cbInstanceData._m0[_657].y;
    precise float _680 = _679 + _678;
    precise float _681 = TEXCOORD_1.z * cbInstanceData._m0[_657].z;
    precise float _682 = _681 + _680;
    precise float _683 = 1.0 * cbInstanceData._m0[_657].w;
    precise float _684 = _683 + _682;
    precise float _685 = TEXCOORD_1.x * cbInstanceData._m0[_664].x;
    precise float _686 = TEXCOORD_1.y * cbInstanceData._m0[_664].y;
    precise float _687 = _686 + _685;
    precise float _688 = TEXCOORD_1.z * cbInstanceData._m0[_664].z;
    precise float _689 = _688 + _687;
    precise float _690 = 1.0 * cbInstanceData._m0[_664].w;
    precise float _691 = _690 + _689;
    precise float _697 = _449 - _677;
    precise float _698 = _456 - _684;
    precise float _699 = _463 - _691;
    precise float _700 = _697 * _697;
    precise float _701 = _698 * _698;
    precise float _702 = _700 + _701;
    precise float _703 = _699 * _699;
    precise float _704 = _702 + _703;
    precise float _706 = cbMtdParam._m0[10u].z * sqrt(_704);
    precise float _711 = cbInstanceData._m0[_227].x * 0.0;
    precise float _712 = 0.0 * cbInstanceData._m0[_227].y;
    precise float _713 = _712 + _711;
    precise float _714 = 0.0 * cbInstanceData._m0[_227].z;
    precise float _715 = _714 + _713;
    precise float _716 = 1.0 * cbInstanceData._m0[_227].w;
    precise float _717 = _716 + _715;
    precise float _718 = cbInstanceData._m0[_657].x * 0.0;
    precise float _719 = 0.0 * cbInstanceData._m0[_657].y;
    precise float _720 = _719 + _718;
    precise float _721 = 0.0 * cbInstanceData._m0[_657].z;
    precise float _722 = _721 + _720;
    precise float _723 = 1.0 * cbInstanceData._m0[_657].w;
    precise float _724 = _723 + _722;
    precise float _725 = cbInstanceData._m0[_664].x * 0.0;
    precise float _726 = 0.0 * cbInstanceData._m0[_664].y;
    precise float _727 = _726 + _725;
    precise float _728 = 0.0 * cbInstanceData._m0[_664].z;
    precise float _729 = _728 + _727;
    precise float _730 = 1.0 * cbInstanceData._m0[_664].w;
    precise float _731 = _730 + _729;
    precise float _734 = _449 * _449;
    precise float _735 = _456 * _456;
    precise float _736 = _734 + _735;
    precise float _737 = _463 * _463;
    precise float _738 = _736 + _737;
    precise float _740 = cbMtdParam._m0[11u].x * sqrt(_738);
    precise float _741 = cbPerFrame._m0[22u].x + _740;
    uint _742 = _233.w;
    float _743;
    float _745;
    float _747;
    if (_239)
    {
        _743 = 0.0;
        _745 = 0.0;
        _747 = 0.0;
    }
    else
    {
        uint _867 = _233.z;
        precise float _744;
        precise float _746;
        precise float _748;
        float _1390;
        float _1392;
        float _1394;
        float _1129 = 0.0;
        float _1130 = 0.0;
        float _1131 = 0.0;
        uint _1132 = _867;
        uint _1134 = 0u;
        float _1170;
        float _1189;
        vec4 _1202;
        float _1203;
        float _1204;
        float _1218;
        float _1219;
        float _1220;
        float _1237;
        float _1238;
        float _1239;
        float _1240;
        bool _1241;
        bool _1242;
        bool _1243;
        precise float _1244;
        precise float _1245;
        precise float _1246;
        float _1247;
        float _1248;
        float _1249;
        precise float _1250;
        bool _1253;
        for (;;)
        {
            uint _1136 = _1132 & 255u;
            uint _1138 = _1136 * 24u;
            uvec3 _1148 = uvec3(texelFetch(g_forceParam, int(_1138)).x, texelFetch(g_forceParam, int(_1138 + 1u)).x, texelFetch(g_forceParam, int(_1138 + 2u)).x);
            uint _1153 = (_1136 * 24u) + 4u;
            vec4 _1166 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_1153)).x, texelFetch(g_forceParam, int(_1153 + 1u)).x, texelFetch(g_forceParam, int(_1153 + 2u)).x, texelFetch(g_forceParam, int(_1153 + 3u)).x));
            _1170 = _1166.w;
            uint _1172 = (_1136 * 24u) + 8u;
            vec4 _1185 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_1172)).x, texelFetch(g_forceParam, int(_1172 + 1u)).x, texelFetch(g_forceParam, int(_1172 + 2u)).x, texelFetch(g_forceParam, int(_1172 + 3u)).x));
            _1189 = _1185.w;
            uint _1191 = (_1136 * 24u) + 12u;
            _1202 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_1191)).x, texelFetch(g_forceParam, int(_1191 + 1u)).x, _1197, texelFetch(g_forceParam, int(_1191 + 3u)).x));
            _1203 = _1202.x;
            _1204 = _1202.w;
            uint _1207 = (_1136 * 24u) + 16u;
            vec3 _1217 = uintBitsToFloat(uvec3(texelFetch(g_forceParam, int(_1207)).x, texelFetch(g_forceParam, int(_1207 + 1u)).x, texelFetch(g_forceParam, int(_1207 + 2u)).x));
            _1218 = _1217.x;
            _1219 = _1217.y;
            _1220 = _1217.z;
            uint _1223 = (_1136 * 24u) + 20u;
            vec4 _1236 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_1223)).x, texelFetch(g_forceParam, int(_1223 + 1u)).x, texelFetch(g_forceParam, int(_1223 + 2u)).x, texelFetch(g_forceParam, int(_1223 + 3u)).x));
            _1237 = _1236.x;
            _1238 = _1236.y;
            _1239 = _1236.z;
            _1240 = _1236.w;
            _1241 = _1148.x == 1u;
            _1242 = _1148.y == 1u;
            _1243 = _1148.z == 1u;
            _1244 = _717 - _1166.x;
            _1245 = _724 - _1166.y;
            _1246 = _731 - _1166.z;
            _1247 = _1241 ? _1185.x : _1244;
            _1248 = _1241 ? _1185.y : _1245;
            _1249 = _1241 ? _1185.z : _1246;
            _1250 = dot(vec3(_1247, _1248, _1249), vec3(_1247, _1248, _1249));
            _1253 = _1250 > 0.0;
            float frontier_phi_8_pred;
            float frontier_phi_8_pred_1;
            float frontier_phi_8_pred_2;
            if (_1253)
            {
                precise float _1376 = _1244 * _1244;
                precise float _1377 = _1245 * _1245;
                precise float _1378 = _1376 + _1377;
                precise float _1379 = _1246 * _1246;
                precise float _1380 = _1379 + _1378;
                float _1381 = sqrt(_1380);
                float _1382 = inversesqrt(_1250);
                precise float _1383 = _1247 * _1382;
                precise float _1384 = _1248 * _1382;
                precise float _1385 = _1249 * _1382;
                precise float _1387 = _1381 / (isnan(0.001000000047497451305389404296875) ? _1202.y : (isnan(_1202.y) ? 0.001000000047497451305389404296875 : max(_1202.y, 0.001000000047497451305389404296875)));
                precise float _1388 = 1.0 - _1387;
                float _1719 = isnan(0.0) ? _1388 : (isnan(_1388) ? 0.0 : max(_1388, 0.0));
                float _1389 = isnan(1.0) ? _1719 : (isnan(_1719) ? 1.0 : min(_1719, 1.0));
                float _1439;
                if (_1243)
                {
                    float _1426 = inversesqrt(dot(vec3(_1244, _1245, _1246), vec3(_1244, _1245, _1246)));
                    precise float _1427 = _1244 * _1426;
                    precise float _1428 = _1245 * _1426;
                    precise float _1429 = _1246 * _1426;
                    precise float _1433 = dot(vec3(_1383, _1384, _1385), vec3(_1427, _1428, _1429)) * 0.800000011920928955078125;
                    precise float _1435 = _1433 + 0.20000000298023223876953125;
                    float _1730 = isnan(0.0) ? _1435 : (isnan(_1435) ? 0.0 : max(_1435, 0.0));
                    precise float _1438 = _1389 * (isnan(1.0) ? _1730 : (isnan(_1730) ? 1.0 : min(_1730, 1.0)));
                    _1439 = _1438;
                }
                else
                {
                    _1439 = _1389;
                }
                float frontier_phi_8_pred_12_ladder;
                float frontier_phi_8_pred_12_ladder_1;
                float frontier_phi_8_pred_12_ladder_2;
                if (_1439 > 0.0)
                {
                    bool _1458 = _1241 && (!_1243);
                    precise float _1460 = _1381 * (-4.0);
                    precise float _1464 = 6.283184051513671875 / (isnan(0.001000000047497451305389404296875) ? _1203 : (isnan(_1203) ? 0.001000000047497451305389404296875 : max(_1203, 0.001000000047497451305389404296875)));
                    precise float _1466 = dot(vec2(_1383, _1385), vec2(_1244, _1246));
                    precise float _1470 = _1464 * _1466;
                    precise float _1471 = float(_1458) * _1470;
                    precise float _1472 = _741 * _1464;
                    precise float _1473 = _1472 - _1471;
                    precise float _1474 = (_1458 ? 0.0 : _1460) + _1473;
                    precise float _1476 = _1189 * sin(_1474);
                    precise float _1477 = _1384 * 0.0;
                    precise float _1478 = _1477 - _1385;
                    precise float _1479 = _1385 * 0.0;
                    precise float _1480 = _1383 * 0.0;
                    precise float _1481 = _1479 - _1480;
                    precise float _1482 = _1383 - _1477;
                    precise float _1483 = _1204 * _1476;
                    float _1484 = _1241 ? _1483 : 0.0;
                    float _1553;
                    if (_1242)
                    {
                        precise float _1513 = _1218 * 2.0;
                        precise float _1515 = _1238 + _1239;
                        precise float _1516 = _1240 + _1515;
                        precise float _1518 = 6.283184051513671875 / (isnan(0.001000000047497451305389404296875) ? _1218 : (isnan(_1218) ? 0.001000000047497451305389404296875 : max(_1218, 0.001000000047497451305389404296875)));
                        precise float _1519 = _1237 * _1518;
                        precise float _1520 = (-0.0) - _1383;
                        precise float _1525 = dot(vec2(_1385, _1520), vec2(_1244, _1246)) / _1513;
                        precise float _1526 = (-0.0) - _1525;
                        float _1529 = fract(abs(_1525));
                        precise float _1530 = (-0.0) - _1529;
                        precise float _1532 = _1513 * ((_1525 >= _1526) ? _1529 : _1530);
                        precise float _1533 = _1532 * 6.283184051513671875;
                        precise float _1534 = _1533 / _1513;
                        precise float _1536 = (isnan(5.0) ? _1218 : (isnan(_1218) ? 5.0 : min(_1218, 5.0))) * sin(_1534);
                        precise float _1537 = _1466 + _1536;
                        precise float _1538 = _1218 * 0.25;
                        precise float _1540 = _741 * _1237;
                        precise float _1541 = _1540 - _1538;
                        precise float _1542 = _1541 - _1537;
                        precise float _1543 = _1237 * _1516;
                        precise float _1545 = _1542 / (isnan(0.001000000047497451305389404296875) ? _1543 : (isnan(_1543) ? 0.001000000047497451305389404296875 : max(_1543, 0.001000000047497451305389404296875)));
                        float _1546 = fract(_1545);
                        precise float _1548 = 1.0 - _1546;
                        float _1549 = (_1545 < 0.0) ? _1548 : _1546;
                        precise float _1550 = _1515 / _1516;
                        precise float _1551 = _1238 / _1516;
                        float _1629;
                        if (_1549 < _1551)
                        {
                            precise float _1625 = _1549 / _1551;
                            _1629 = _1625;
                        }
                        else
                        {
                            float frontier_phi_27_24_ladder;
                            if (_1549 < _1550)
                            {
                                precise float _1639 = _1549 - _1551;
                                precise float _1640 = _1550 - _1551;
                                precise float _1641 = _1639 / _1640;
                                precise float _1630 = 1.0 - _1641;
                                frontier_phi_27_24_ladder = _1630;
                            }
                            else
                            {
                                frontier_phi_27_24_ladder = 0.0;
                            }
                            _1629 = frontier_phi_27_24_ladder;
                        }
                        precise float _1631 = _1220 * _1629;
                        precise float _1632 = _1518 * _1466;
                        precise float _1633 = _741 * _1519;
                        precise float _1634 = _1633 - _1632;
                        precise float _1636 = _1219 + sin(_1634);
                        precise float _1638 = _1631 * abs(_1636);
                        precise float _1554 = _1638 + 0.0;
                        _1553 = _1554;
                    }
                    else
                    {
                        _1553 = 0.0;
                    }
                    precise float _1555 = _1170 + _1476;
                    precise float _1556 = _1555 + _1553;
                    precise float _1557 = _1383 * _1556;
                    precise float _1558 = _1384 * _1556;
                    precise float _1559 = _1385 * _1556;
                    precise float _1560 = _1478 * _1484;
                    precise float _1561 = _1481 * _1484;
                    precise float _1562 = _1482 * _1484;
                    precise float _1563 = _1560 + _1557;
                    precise float _1564 = _1561 + _1558;
                    precise float _1565 = _1562 + _1559;
                    precise float _1566 = _1439 * _1563;
                    precise float _1567 = _1439 * _1564;
                    precise float _1568 = _1439 * _1565;
                    precise float _1391 = _1566 * 0.0500000007450580596923828125;
                    precise float _1393 = _1567 * 0.0500000007450580596923828125;
                    precise float _1395 = _1568 * 0.0500000007450580596923828125;
                    frontier_phi_8_pred_12_ladder = _1391;
                    frontier_phi_8_pred_12_ladder_1 = _1393;
                    frontier_phi_8_pred_12_ladder_2 = _1395;
                }
                else
                {
                    frontier_phi_8_pred_12_ladder = 0.0;
                    frontier_phi_8_pred_12_ladder_1 = 0.0;
                    frontier_phi_8_pred_12_ladder_2 = 0.0;
                }
                frontier_phi_8_pred = frontier_phi_8_pred_12_ladder;
                frontier_phi_8_pred_1 = frontier_phi_8_pred_12_ladder_1;
                frontier_phi_8_pred_2 = frontier_phi_8_pred_12_ladder_2;
            }
            else
            {
                frontier_phi_8_pred = 0.0;
                frontier_phi_8_pred_1 = 0.0;
                frontier_phi_8_pred_2 = 0.0;
            }
            _1390 = frontier_phi_8_pred;
            _1392 = frontier_phi_8_pred_1;
            _1394 = frontier_phi_8_pred_2;
            _744 = _1129 + _1390;
            _746 = _1130 + _1392;
            _748 = _1131 + _1394;
            uint _1135 = _1134 + 1u;
            if (_1135 == _236)
            {
                break;
            }
            else
            {
                _1129 = _744;
                _1130 = _746;
                _1131 = _748;
                _1132 = (_1134 != 3u) ? (_1132 >> 8u) : _742;
                _1134 = _1135;
                continue;
            }
        }
        _743 = _744;
        _745 = _746;
        _747 = _748;
    }
    precise float _749 = _743 * _743;
    precise float _750 = _745 * _745;
    precise float _751 = _749 + _750;
    precise float _752 = _747 * _747;
    precise float _753 = _751 + _752;
    float _754 = sqrt(_753);
    bool _755 = _754 < 0.00011000000085914507508277893066406;
    float _760 = inversesqrt(dot(vec3(cbInstanceData._m0[_227].x, cbInstanceData._m0[_657].x, cbInstanceData._m0[_664].x), vec3(cbInstanceData._m0[_227].x, cbInstanceData._m0[_657].x, cbInstanceData._m0[_664].x)));
    precise float _761 = cbInstanceData._m0[_227].x * _760;
    precise float _762 = cbInstanceData._m0[_657].x * _760;
    precise float _763 = cbInstanceData._m0[_664].x * _760;
    float _767 = inversesqrt(dot(vec3(cbInstanceData._m0[_227].y, cbInstanceData._m0[_657].y, cbInstanceData._m0[_664].y), vec3(cbInstanceData._m0[_227].y, cbInstanceData._m0[_657].y, cbInstanceData._m0[_664].y)));
    precise float _768 = cbInstanceData._m0[_227].y * _767;
    precise float _769 = cbInstanceData._m0[_657].y * _767;
    precise float _770 = cbInstanceData._m0[_664].y * _767;
    float _774 = inversesqrt(dot(vec3(cbInstanceData._m0[_227].z, cbInstanceData._m0[_657].z, cbInstanceData._m0[_664].z), vec3(cbInstanceData._m0[_227].z, cbInstanceData._m0[_657].z, cbInstanceData._m0[_664].z)));
    precise float _775 = cbInstanceData._m0[_227].z * _774;
    precise float _776 = cbInstanceData._m0[_657].z * _774;
    precise float _777 = cbInstanceData._m0[_664].z * _774;
    precise float _778 = _761 * 0.0;
    precise float _779 = 1.0 * _768;
    precise float _780 = _779 + _778;
    precise float _781 = 0.0 * _775;
    precise float _782 = _781 + _780;
    precise float _783 = _762 * 0.0;
    precise float _784 = 1.0 * _769;
    precise float _785 = _784 + _783;
    precise float _786 = 0.0 * _776;
    precise float _787 = _786 + _785;
    precise float _788 = _763 * 0.0;
    precise float _789 = 1.0 * _770;
    precise float _790 = _789 + _788;
    precise float _791 = 0.0 * _777;
    precise float _792 = _791 + _790;
    float _796 = inversesqrt(dot(vec3(_743, _745, _747), vec3(_743, _745, _747)));
    precise float _797 = _743 * _796;
    precise float _798 = _745 * _796;
    precise float _799 = _747 * _796;
    precise float _800 = _787 * _799;
    precise float _801 = _792 * _798;
    precise float _802 = _800 - _801;
    precise float _803 = _792 * _797;
    precise float _804 = _782 * _799;
    precise float _805 = _803 - _804;
    precise float _806 = _782 * _798;
    precise float _807 = _787 * _797;
    precise float _808 = _806 - _807;
    float _812 = inversesqrt(dot(vec3(_802, _805, _808), vec3(_802, _805, _808)));
    precise float _813 = _812 * _802;
    precise float _814 = _812 * _805;
    precise float _815 = _812 * _808;
    precise float _816 = _754 + 1.0;
    precise float _818 = cbMtdParam._m0[10u].w * log2(_816);
    precise float _819 = _449 - _717;
    precise float _820 = _456 - _724;
    precise float _821 = _463 - _731;
    precise float _822 = dot(vec3(_813, _814, _815), vec3(_819, _820, _821));
    precise float _825 = _813 * _822;
    precise float _826 = _814 * _822;
    precise float _827 = _815 * _822;
    precise float _828 = _717 + _825;
    precise float _829 = _724 + _826;
    precise float _830 = _731 + _827;
    precise float _831 = _449 - _828;
    precise float _832 = _456 - _829;
    precise float _833 = _463 - _830;
    precise float _834 = _814 * _833;
    precise float _835 = _815 * _832;
    precise float _836 = _834 - _835;
    precise float _837 = _815 * _831;
    precise float _838 = _813 * _833;
    precise float _839 = _837 - _838;
    precise float _840 = _813 * _832;
    precise float _841 = _814 * _831;
    precise float _842 = _840 - _841;
    float _843 = sin(_818);
    float _844 = cos(_818);
    precise float _845 = _831 * _844;
    precise float _846 = _832 * _844;
    precise float _847 = _833 * _844;
    precise float _848 = _843 * _836;
    precise float _849 = _843 * _839;
    precise float _850 = _843 * _842;
    precise float _851 = _845 + _848;
    precise float _852 = _846 + _849;
    precise float _853 = _850 + _847;
    precise float _854 = _828 + _851;
    precise float _855 = _829 + _852;
    precise float _856 = _830 + _853;
    precise float _857 = _854 - _449;
    precise float _858 = _855 - _456;
    precise float _859 = _856 - _463;
    float _860 = _755 ? 0.0 : _857;
    float _861 = _755 ? 0.0 : _858;
    float _862 = _755 ? 0.0 : _859;
    precise float _863 = _449 + _860;
    precise float _864 = _456 + _861;
    precise float _865 = _463 + _862;
    precise float _866 = cbPerFrame._m0[22u].x + _706;
    float _868;
    float _870;
    float _872;
    if (_239)
    {
        _868 = 0.0;
        _870 = 0.0;
        _872 = 0.0;
    }
    else
    {
        uint _1128 = _233.z;
        precise float _869;
        precise float _871;
        precise float _873;
        float _1414;
        float _1416;
        float _1418;
        float _1254 = 0.0;
        float _1255 = 0.0;
        float _1256 = 0.0;
        uint _1257 = _1128;
        uint _1259 = 0u;
        float _1293;
        float _1312;
        vec4 _1325;
        float _1326;
        float _1327;
        float _1340;
        float _1341;
        float _1342;
        float _1358;
        float _1359;
        float _1360;
        float _1361;
        bool _1362;
        bool _1363;
        bool _1364;
        precise float _1365;
        precise float _1366;
        precise float _1367;
        float _1368;
        float _1369;
        float _1370;
        precise float _1371;
        bool _1374;
        for (;;)
        {
            uint _1261 = _1257 & 255u;
            uint _1262 = _1261 * 24u;
            uvec3 _1271 = uvec3(texelFetch(g_forceParam, int(_1262)).x, texelFetch(g_forceParam, int(_1262 + 1u)).x, texelFetch(g_forceParam, int(_1262 + 2u)).x);
            uint _1276 = (_1261 * 24u) + 4u;
            vec4 _1289 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_1276)).x, texelFetch(g_forceParam, int(_1276 + 1u)).x, texelFetch(g_forceParam, int(_1276 + 2u)).x, texelFetch(g_forceParam, int(_1276 + 3u)).x));
            _1293 = _1289.w;
            uint _1295 = (_1261 * 24u) + 8u;
            vec4 _1308 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_1295)).x, texelFetch(g_forceParam, int(_1295 + 1u)).x, texelFetch(g_forceParam, int(_1295 + 2u)).x, texelFetch(g_forceParam, int(_1295 + 3u)).x));
            _1312 = _1308.w;
            uint _1314 = (_1261 * 24u) + 12u;
            _1325 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_1314)).x, texelFetch(g_forceParam, int(_1314 + 1u)).x, _1320, texelFetch(g_forceParam, int(_1314 + 3u)).x));
            _1326 = _1325.x;
            _1327 = _1325.w;
            uint _1329 = (_1261 * 24u) + 16u;
            vec3 _1339 = uintBitsToFloat(uvec3(texelFetch(g_forceParam, int(_1329)).x, texelFetch(g_forceParam, int(_1329 + 1u)).x, texelFetch(g_forceParam, int(_1329 + 2u)).x));
            _1340 = _1339.x;
            _1341 = _1339.y;
            _1342 = _1339.z;
            uint _1344 = (_1261 * 24u) + 20u;
            vec4 _1357 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_1344)).x, texelFetch(g_forceParam, int(_1344 + 1u)).x, texelFetch(g_forceParam, int(_1344 + 2u)).x, texelFetch(g_forceParam, int(_1344 + 3u)).x));
            _1358 = _1357.x;
            _1359 = _1357.y;
            _1360 = _1357.z;
            _1361 = _1357.w;
            _1362 = _1271.x == 1u;
            _1363 = _1271.y == 1u;
            _1364 = _1271.z == 1u;
            _1365 = _677 - _1289.x;
            _1366 = _684 - _1289.y;
            _1367 = _691 - _1289.z;
            _1368 = _1362 ? _1308.x : _1365;
            _1369 = _1362 ? _1308.y : _1366;
            _1370 = _1362 ? _1308.z : _1367;
            _1371 = dot(vec3(_1368, _1369, _1370), vec3(_1368, _1369, _1370));
            _1374 = _1371 > 0.0;
            float frontier_phi_10_pred;
            float frontier_phi_10_pred_1;
            float frontier_phi_10_pred_2;
            if (_1374)
            {
                precise float _1400 = _1365 * _1365;
                precise float _1401 = _1366 * _1366;
                precise float _1402 = _1400 + _1401;
                precise float _1403 = _1367 * _1367;
                precise float _1404 = _1403 + _1402;
                float _1405 = sqrt(_1404);
                float _1406 = inversesqrt(_1371);
                precise float _1407 = _1368 * _1406;
                precise float _1408 = _1369 * _1406;
                precise float _1409 = _1370 * _1406;
                precise float _1411 = _1405 / (isnan(0.001000000047497451305389404296875) ? _1325.y : (isnan(_1325.y) ? 0.001000000047497451305389404296875 : max(_1325.y, 0.001000000047497451305389404296875)));
                precise float _1412 = 1.0 - _1411;
                float _1766 = isnan(0.0) ? _1412 : (isnan(_1412) ? 0.0 : max(_1412, 0.0));
                float _1413 = isnan(1.0) ? _1766 : (isnan(_1766) ? 1.0 : min(_1766, 1.0));
                float _1455;
                if (_1364)
                {
                    float _1444 = inversesqrt(dot(vec3(_1365, _1366, _1367), vec3(_1365, _1366, _1367)));
                    precise float _1445 = _1365 * _1444;
                    precise float _1446 = _1366 * _1444;
                    precise float _1447 = _1367 * _1444;
                    precise float _1451 = dot(vec3(_1407, _1408, _1409), vec3(_1445, _1446, _1447)) * 0.800000011920928955078125;
                    precise float _1452 = _1451 + 0.20000000298023223876953125;
                    float _1777 = isnan(0.0) ? _1452 : (isnan(_1452) ? 0.0 : max(_1452, 0.0));
                    precise float _1454 = _1413 * (isnan(1.0) ? _1777 : (isnan(_1777) ? 1.0 : min(_1777, 1.0)));
                    _1455 = _1454;
                }
                else
                {
                    _1455 = _1413;
                }
                float frontier_phi_10_pred_15_ladder;
                float frontier_phi_10_pred_15_ladder_1;
                float frontier_phi_10_pred_15_ladder_2;
                if (_1455 > 0.0)
                {
                    bool _1486 = _1362 && (!_1364);
                    precise float _1488 = _1405 * (-4.0);
                    precise float _1491 = 6.283184051513671875 / (isnan(0.001000000047497451305389404296875) ? _1326 : (isnan(_1326) ? 0.001000000047497451305389404296875 : max(_1326, 0.001000000047497451305389404296875)));
                    precise float _1492 = cbMtdParam._m0[11u].y * _1491;
                    precise float _1493 = dot(vec2(_1407, _1409), vec2(_1365, _1367));
                    precise float _1496 = _1493 * _1492;
                    precise float _1497 = float(_1486) * _1496;
                    precise float _1498 = _866 * _1492;
                    precise float _1499 = _1498 - _1497;
                    precise float _1500 = (_1486 ? 0.0 : _1488) + _1499;
                    precise float _1502 = _1312 * sin(_1500);
                    precise float _1503 = _1408 * 0.0;
                    precise float _1504 = _1503 - _1409;
                    precise float _1505 = _1409 * 0.0;
                    precise float _1506 = _1407 * 0.0;
                    precise float _1507 = _1505 - _1506;
                    precise float _1508 = _1407 - _1503;
                    precise float _1509 = _1327 * _1502;
                    float _1510 = _1362 ? _1509 : 0.0;
                    float _1609;
                    if (_1363)
                    {
                        precise float _1571 = _1340 * 2.0;
                        precise float _1572 = _1359 + _1360;
                        precise float _1573 = _1361 + _1572;
                        precise float _1575 = 6.283184051513671875 / (isnan(0.001000000047497451305389404296875) ? _1340 : (isnan(_1340) ? 0.001000000047497451305389404296875 : max(_1340, 0.001000000047497451305389404296875)));
                        precise float _1576 = cbMtdParam._m0[11u].y * _1575;
                        precise float _1577 = _1358 * _1576;
                        precise float _1578 = (-0.0) - _1407;
                        precise float _1582 = dot(vec2(_1409, _1578), vec2(_1365, _1367)) / _1571;
                        precise float _1583 = (-0.0) - _1582;
                        float _1586 = fract(abs(_1582));
                        precise float _1587 = (-0.0) - _1586;
                        precise float _1589 = _1571 * ((_1582 >= _1583) ? _1586 : _1587);
                        precise float _1590 = _1589 * 6.283184051513671875;
                        precise float _1591 = _1590 / _1571;
                        precise float _1593 = (isnan(5.0) ? _1340 : (isnan(_1340) ? 5.0 : min(_1340, 5.0))) * sin(_1591);
                        precise float _1594 = _1493 + _1593;
                        precise float _1595 = _1340 * 0.25;
                        precise float _1596 = _866 * _1358;
                        precise float _1597 = _1596 - _1595;
                        precise float _1598 = _1597 - _1594;
                        precise float _1599 = _1358 * _1573;
                        precise float _1601 = _1598 / (isnan(0.001000000047497451305389404296875) ? _1599 : (isnan(_1599) ? 0.001000000047497451305389404296875 : max(_1599, 0.001000000047497451305389404296875)));
                        float _1602 = fract(_1601);
                        precise float _1604 = 1.0 - _1602;
                        float _1605 = (_1601 < 0.0) ? _1604 : _1602;
                        precise float _1606 = _1572 / _1573;
                        precise float _1607 = _1359 / _1573;
                        float _1642;
                        if (_1605 < _1607)
                        {
                            precise float _1627 = _1605 / _1607;
                            _1642 = _1627;
                        }
                        else
                        {
                            float frontier_phi_29_26_ladder;
                            if (_1605 < _1606)
                            {
                                precise float _1652 = _1605 - _1607;
                                precise float _1653 = _1606 - _1607;
                                precise float _1654 = _1652 / _1653;
                                precise float _1643 = 1.0 - _1654;
                                frontier_phi_29_26_ladder = _1643;
                            }
                            else
                            {
                                frontier_phi_29_26_ladder = 0.0;
                            }
                            _1642 = frontier_phi_29_26_ladder;
                        }
                        precise float _1644 = _1342 * _1642;
                        precise float _1645 = _1576 * _1493;
                        precise float _1646 = _866 * _1577;
                        precise float _1647 = _1646 - _1645;
                        precise float _1649 = _1341 + sin(_1647);
                        precise float _1651 = _1644 * abs(_1649);
                        precise float _1610 = _1651 + 0.0;
                        _1609 = _1610;
                    }
                    else
                    {
                        _1609 = 0.0;
                    }
                    precise float _1611 = _1293 + _1502;
                    precise float _1612 = _1611 + _1609;
                    precise float _1613 = _1407 * _1612;
                    precise float _1614 = _1408 * _1612;
                    precise float _1615 = _1409 * _1612;
                    precise float _1616 = _1504 * _1510;
                    precise float _1617 = _1507 * _1510;
                    precise float _1618 = _1508 * _1510;
                    precise float _1619 = _1616 + _1613;
                    precise float _1620 = _1617 + _1614;
                    precise float _1621 = _1618 + _1615;
                    precise float _1622 = _1455 * _1619;
                    precise float _1623 = _1455 * _1620;
                    precise float _1624 = _1455 * _1621;
                    precise float _1415 = _1622 * 0.0500000007450580596923828125;
                    precise float _1417 = _1623 * 0.0500000007450580596923828125;
                    precise float _1419 = _1624 * 0.0500000007450580596923828125;
                    frontier_phi_10_pred_15_ladder = _1415;
                    frontier_phi_10_pred_15_ladder_1 = _1417;
                    frontier_phi_10_pred_15_ladder_2 = _1419;
                }
                else
                {
                    frontier_phi_10_pred_15_ladder = 0.0;
                    frontier_phi_10_pred_15_ladder_1 = 0.0;
                    frontier_phi_10_pred_15_ladder_2 = 0.0;
                }
                frontier_phi_10_pred = frontier_phi_10_pred_15_ladder;
                frontier_phi_10_pred_1 = frontier_phi_10_pred_15_ladder_1;
                frontier_phi_10_pred_2 = frontier_phi_10_pred_15_ladder_2;
            }
            else
            {
                frontier_phi_10_pred = 0.0;
                frontier_phi_10_pred_1 = 0.0;
                frontier_phi_10_pred_2 = 0.0;
            }
            _1414 = frontier_phi_10_pred;
            _1416 = frontier_phi_10_pred_1;
            _1418 = frontier_phi_10_pred_2;
            _869 = _1254 + _1414;
            _871 = _1255 + _1416;
            _873 = _1256 + _1418;
            uint _1260 = _1259 + 1u;
            if (_1260 == _236)
            {
                break;
            }
            else
            {
                _1254 = _869;
                _1255 = _871;
                _1256 = _873;
                _1257 = (_1259 != 3u) ? (_1257 >> 8u) : _742;
                _1259 = _1260;
                continue;
            }
        }
        _868 = _869;
        _870 = _871;
        _872 = _873;
    }
    precise float _874 = _868 * _868;
    precise float _875 = _870 * _870;
    precise float _876 = _874 + _875;
    precise float _877 = _872 * _872;
    precise float _878 = _876 + _877;
    float _879 = sqrt(_878);
    bool _880 = _879 < 0.00011000000085914507508277893066406;
    float _884 = inversesqrt(dot(vec3(_868, _870, _872), vec3(_868, _870, _872)));
    precise float _885 = _868 * _884;
    precise float _886 = _870 * _884;
    precise float _887 = _872 * _884;
    precise float _888 = _787 * _887;
    precise float _889 = _792 * _886;
    precise float _890 = _888 - _889;
    precise float _891 = _792 * _885;
    precise float _892 = _782 * _887;
    precise float _893 = _891 - _892;
    precise float _894 = _782 * _886;
    precise float _895 = _787 * _885;
    precise float _896 = _894 - _895;
    float _900 = inversesqrt(dot(vec3(_890, _893, _896), vec3(_890, _893, _896)));
    precise float _901 = _900 * _890;
    precise float _902 = _900 * _893;
    precise float _903 = _900 * _896;
    precise float _904 = _879 + 1.0;
    precise float _906 = cbMtdParam._m0[10u].y * log2(_904);
    precise float _907 = _863 - _677;
    precise float _908 = _864 - _684;
    precise float _909 = _865 - _691;
    precise float _910 = dot(vec3(_901, _902, _903), vec3(_907, _908, _909));
    precise float _913 = _901 * _910;
    precise float _914 = _902 * _910;
    precise float _915 = _903 * _910;
    precise float _916 = _677 + _913;
    precise float _917 = _684 + _914;
    precise float _918 = _691 + _915;
    precise float _919 = _863 - _916;
    precise float _920 = _864 - _917;
    precise float _921 = _865 - _918;
    precise float _922 = _902 * _921;
    precise float _923 = _903 * _920;
    precise float _924 = _922 - _923;
    precise float _925 = _903 * _919;
    precise float _926 = _901 * _921;
    precise float _927 = _925 - _926;
    precise float _928 = _901 * _920;
    precise float _929 = _902 * _919;
    precise float _930 = _928 - _929;
    float _931 = sin(_906);
    float _932 = cos(_906);
    precise float _933 = _919 * _932;
    precise float _934 = _920 * _932;
    precise float _935 = _921 * _932;
    precise float _936 = _931 * _924;
    precise float _937 = _931 * _927;
    precise float _938 = _931 * _930;
    precise float _939 = _933 + _936;
    precise float _940 = _934 + _937;
    precise float _941 = _938 + _935;
    precise float _942 = _916 + _939;
    precise float _943 = _917 + _940;
    precise float _944 = _918 + _941;
    precise float _945 = _942 - _863;
    precise float _946 = _943 - _864;
    precise float _947 = _944 - _865;
    precise float _951 = _860 + (_880 ? 0.0 : _945);
    precise float _952 = _861 + (_880 ? 0.0 : _946);
    precise float _953 = _862 + (_880 ? 0.0 : _947);
    precise float _954 = _449 + _951;
    precise float _955 = _456 + _952;
    precise float _956 = _463 + _953;
    float _963 = (((((cbPrevObjMatrix._m0[_304].w * _258) + (cbPrevObjMatrix._m0[_269].w * _257)) + (cbPrevObjMatrix._m0[_351].w * _259)) + (cbPrevObjMatrix._m0[_398].w * _260)) + fma(_242, (((cbPrevObjMatrix._m0[_304].z * _258) + (cbPrevObjMatrix._m0[_269].z * _257)) + (cbPrevObjMatrix._m0[_351].z * _259)) + (cbPrevObjMatrix._m0[_398].z * _260), fma(_241, (((cbPrevObjMatrix._m0[_304].y * _258) + (cbPrevObjMatrix._m0[_269].y * _257)) + (cbPrevObjMatrix._m0[_351].y * _259)) + (cbPrevObjMatrix._m0[_398].y * _260), ((((cbPrevObjMatrix._m0[_304].x * _258) + (cbPrevObjMatrix._m0[_269].x * _257)) + (cbPrevObjMatrix._m0[_351].x * _259)) + (cbPrevObjMatrix._m0[_398].x * _260)) * _240))) - cbSceneParam._m0[28u].x;
    float _964 = _963 + _951;
    float _965 = (((((cbPrevObjMatrix._m0[_311].w * _258) + (cbPrevObjMatrix._m0[_276].w * _257)) + (cbPrevObjMatrix._m0[_358].w * _259)) + (cbPrevObjMatrix._m0[_405].w * _260)) + fma(_242, (((cbPrevObjMatrix._m0[_311].z * _258) + (cbPrevObjMatrix._m0[_276].z * _257)) + (cbPrevObjMatrix._m0[_358].z * _259)) + (cbPrevObjMatrix._m0[_405].z * _260), fma(_241, (((cbPrevObjMatrix._m0[_311].y * _258) + (cbPrevObjMatrix._m0[_276].y * _257)) + (cbPrevObjMatrix._m0[_358].y * _259)) + (cbPrevObjMatrix._m0[_405].y * _260), ((((cbPrevObjMatrix._m0[_311].x * _258) + (cbPrevObjMatrix._m0[_276].x * _257)) + (cbPrevObjMatrix._m0[_358].x * _259)) + (cbPrevObjMatrix._m0[_405].x * _260)) * _240))) - cbSceneParam._m0[28u].y;
    float _966 = _965 + _952;
    float _967 = (((((cbPrevObjMatrix._m0[_318].w * _258) + (cbPrevObjMatrix._m0[_283].w * _257)) + (cbPrevObjMatrix._m0[_365].w * _259)) + (cbPrevObjMatrix._m0[_412].w * _260)) + fma(_242, (((cbPrevObjMatrix._m0[_318].z * _258) + (cbPrevObjMatrix._m0[_283].z * _257)) + (cbPrevObjMatrix._m0[_365].z * _259)) + (cbPrevObjMatrix._m0[_412].z * _260), fma(_241, (((cbPrevObjMatrix._m0[_318].y * _258) + (cbPrevObjMatrix._m0[_283].y * _257)) + (cbPrevObjMatrix._m0[_365].y * _259)) + (cbPrevObjMatrix._m0[_412].y * _260), ((((cbPrevObjMatrix._m0[_318].x * _258) + (cbPrevObjMatrix._m0[_283].x * _257)) + (cbPrevObjMatrix._m0[_365].x * _259)) + (cbPrevObjMatrix._m0[_412].x * _260)) * _240))) - cbSceneParam._m0[28u].z;
    float _968 = _967 + _953;
    precise float _1018 = _954 - cbSceneParam._m0[3u].x;
    precise float _1019 = _955 - cbSceneParam._m0[3u].y;
    precise float _1020 = _956 - cbSceneParam._m0[3u].z;
    precise float _1048 = _1018 * cbSceneParam._m0[24u].x;
    precise float _1049 = _1019 * cbSceneParam._m0[24u].y;
    precise float _1050 = _1049 + _1048;
    precise float _1051 = _1020 * cbSceneParam._m0[24u].z;
    precise float _1052 = _1051 + _1050;
    precise float _1053 = 1.0 * cbSceneParam._m0[24u].w;
    precise float _1054 = _1053 + _1052;
    precise float _1055 = _1018 * cbSceneParam._m0[25u].x;
    precise float _1056 = _1019 * cbSceneParam._m0[25u].y;
    precise float _1057 = _1056 + _1055;
    precise float _1058 = _1020 * cbSceneParam._m0[25u].z;
    precise float _1059 = _1058 + _1057;
    precise float _1060 = 1.0 * cbSceneParam._m0[25u].w;
    precise float _1061 = _1060 + _1059;
    precise float _1062 = _1018 * cbSceneParam._m0[26u].x;
    precise float _1063 = _1019 * cbSceneParam._m0[26u].y;
    precise float _1064 = _1063 + _1062;
    precise float _1065 = _1020 * cbSceneParam._m0[26u].z;
    precise float _1066 = _1065 + _1064;
    precise float _1067 = 1.0 * cbSceneParam._m0[26u].w;
    precise float _1068 = _1067 + _1066;
    precise float _1069 = _1018 * cbSceneParam._m0[27u].x;
    precise float _1070 = _1019 * cbSceneParam._m0[27u].y;
    precise float _1071 = _1070 + _1069;
    precise float _1072 = _1020 * cbSceneParam._m0[27u].z;
    precise float _1073 = _1072 + _1071;
    precise float _1074 = 1.0 * cbSceneParam._m0[27u].w;
    precise float _1075 = _1074 + _1073;
    gl_Position.x = _1054;
    gl_Position.y = _1061;
    gl_Position.z = _1068;
    gl_Position.w = _1075;
    POSITION_1.x = _1054;
    POSITION_1.y = _1061;
    POSITION_1.z = _1068;
    POSITION_1.w = _1075;
    NORMAL_1.x = _634;
    NORMAL_1.y = _637;
    NORMAL_1.z = _640;
    NORMAL_1.w = float(_250);
    TANGENT_1.x = fma(_221, _437, fma(_220, _434, _431 * _219));
    TANGENT_1.y = fma(_221, _438, fma(_220, _435, _432 * _219));
    TANGENT_1.z = fma(_221, _439, fma(_220, _436, _433 * _219));
    TANGENT_1.w = (float(TANGENT.w) + (-127.0)) * 0.0078740157186985015869140625;
    TEXCOORD_2 = ((float(int(uint(TEXCOORD.x))) * 0.00048828125) * cbTexScroll._m0[0u].x) + cbTexScroll._m0[0u].z;
    TEXCOORD_1_1 = ((float(int(uint(TEXCOORD.y))) * 0.00048828125) * cbTexScroll._m0[0u].y) + cbTexScroll._m0[0u].w;
    TEXCOORD_3.x = TEXCOORD_1.x;
    TEXCOORD_3.y = TEXCOORD_1.y;
    TEXCOORD_3.z = TEXCOORD_1.z;
    TEXCOORD_3.w = COLOR_1.x;
    TEXCOORD_8.x = _1054;
    TEXCOORD_8.y = _1061;
    TEXCOORD_8.z = _1068;
    TEXCOORD_8.w = _1075;
    TEXCOORD_9.x = fma(_968, cbSceneParam._m0[29u].z, fma(_966, cbSceneParam._m0[29u].y, _964 * cbSceneParam._m0[29u].x)) + cbSceneParam._m0[29u].w;
    TEXCOORD_9.y = fma(_968, cbSceneParam._m0[30u].z, fma(_966, cbSceneParam._m0[30u].y, _964 * cbSceneParam._m0[30u].x)) + cbSceneParam._m0[30u].w;
    TEXCOORD_9.z = fma(_968, cbSceneParam._m0[31u].z, fma(_966, cbSceneParam._m0[31u].y, _964 * cbSceneParam._m0[31u].x)) + cbSceneParam._m0[31u].w;
    TEXCOORD_9.w = fma(_968, cbSceneParam._m0[32u].z, fma(_966, cbSceneParam._m0[32u].y, _964 * cbSceneParam._m0[32u].x)) + cbSceneParam._m0[32u].w;
    TEXCOORD_10.x = _634;
    TEXCOORD_10.y = _637;
    TEXCOORD_10.z = _640;
    gl_ClipDistance[0u] = dot(vec4(_1054, _1061, _1068, _1075), vec4(cbSceneParam._m0[4u]));
    gl_ClipDistance[1u] = dot(vec4(_1054, _1061, _1068, _1075), vec4(cbInstanceData._m0[_262 + 3u]));
}


