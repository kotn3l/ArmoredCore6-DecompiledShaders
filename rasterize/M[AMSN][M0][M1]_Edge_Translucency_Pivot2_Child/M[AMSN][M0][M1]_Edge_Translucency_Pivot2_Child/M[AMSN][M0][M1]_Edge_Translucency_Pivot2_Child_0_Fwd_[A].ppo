#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[12];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_M0_M1_Edge_Translucency_Pivot2_Child_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_M0_M1_Edge_Translucency_Pivot2_Child_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_M0_M1_Edge_Translucency_Pivot2_Child_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_M0_M1_Edge_Translucency_Pivot2_Child_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in float TEXCOORD;
layout(location = 4, component = 1) in float TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _900;
float _3518;
float _3519;
float _3520;
float _3521;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _180 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _181 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _182 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _188 = inversesqrt(dot(vec3(_180, _181, _182), vec3(_180, _181, _182)));
    float _195 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _202 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _225 = texture(sampler2D(M_AMSN_M0_M1_Edge_Translucency_Pivot2_Child_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1) + cbTextureTilingScale._m0[0u].w));
    float _231 = _225.w;
    float _232 = _225.x * cbMtdParam._m0[9u].x;
    float _233 = _225.y * cbMtdParam._m0[9u].y;
    float _234 = _225.z * cbMtdParam._m0[9u].z;
    vec4 _246 = texture(sampler2D(M_AMSN_M0_M1_Edge_Translucency_Pivot2_Child_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1) + cbTextureTilingScale._m0[2u].w));
    float _248 = _246.x;
    vec4 _260 = texture(sampler2D(M_AMSN_M0_M1_Edge_Translucency_Pivot2_Child_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1) + cbTextureTilingScale._m0[1u].w));
    float _264 = _260.z;
    float _268 = (_260.x * 2.0) + (-1.0);
    float _270 = (_260.y * 2.0) + (-1.0);
    float _271 = dot(vec2(_268, _270), vec2(_268, _270));
    float _3530 = isnan(0.0) ? _271 : (isnan(_271) ? 0.0 : max(_271, 0.0));
    float _277 = sqrt(1.0 - (isnan(1.0) ? _3530 : (isnan(_3530) ? 1.0 : min(_3530, 1.0))));
    vec4 _289 = texture(sampler2D(M_AMSN_M0_M1_Edge_Translucency_Pivot2_Child_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_1) + cbTextureTilingScale._m0[3u].w));
    float _296 = cbMtdParam._m0[10u].x * _289.x;
    float _299 = fma(_277, _195 * NORMAL.x, fma(_270, _202 * TANGENT.x, (_188 * _180) * _268));
    float _302 = fma(_277, _195 * NORMAL.y, fma(_270, _202 * TANGENT.y, (_188 * _181) * _268));
    float _305 = fma(_277, _195 * NORMAL.z, fma(_270, _202 * TANGENT.z, (_188 * _182) * _268));
    float _309 = inversesqrt(dot(vec3(_299, _302, _305), vec3(_299, _302, _305)));
    float _310 = _309 * _299;
    float _311 = _309 * _302;
    float _312 = _309 * _305;
    float _3541 = isnan(0.0) ? _231 : (isnan(_231) ? 0.0 : max(_231, 0.0));
    float _313 = isnan(1.0) ? _3541 : (isnan(_3541) ? 1.0 : min(_3541, 1.0));
    float _3552 = isnan(0.0) ? _264 : (isnan(_264) ? 0.0 : max(_264, 0.0));
    float _314 = isnan(1.0) ? _3552 : (isnan(_3552) ? 1.0 : min(_3552, 1.0));
    float _315 = isnan(0.0) ? _296 : (isnan(_296) ? 0.0 : max(_296, 0.0));
    float _3568 = isnan(0.0) ? _232 : (isnan(_232) ? 0.0 : max(_232, 0.0));
    float _3579 = isnan(0.0) ? _233 : (isnan(_233) ? 0.0 : max(_233, 0.0));
    float _3590 = isnan(0.0) ? _234 : (isnan(_234) ? 0.0 : max(_234, 0.0));
    float _3601 = isnan(0.0) ? _248 : (isnan(_248) ? 0.0 : max(_248, 0.0));
    float _319 = isnan(1.0) ? _3601 : (isnan(_3601) ? 1.0 : min(_3601, 1.0));
    float _335 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _377 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _387 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _377);
    float _388 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _377);
    float _389 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _377);
    float _393 = inversesqrt(dot(vec3(_387, _388, _389), vec3(_387, _388, _389)));
    float _394 = _387 * _393;
    float _395 = _388 * _393;
    float _396 = _389 * _393;
    vec4 _401 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _403 = _401.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _579 = sqrt(((_387 * _387) + (_388 * _388)) + (_389 * _389));
        float _585 = (cbMatDynParam._m0[5u].x * _579) + cbMatDynParam._m0[5u].y;
        float _3612 = isnan(0.0) ? _585 : (isnan(_585) ? 0.0 : max(_585, 0.0));
        float _586 = isnan(1.0) ? _3612 : (isnan(_3612) ? 1.0 : min(_3612, 1.0));
        float _590 = (cbMatDynParam._m0[5u].z * _579) + cbMatDynParam._m0[5u].w;
        float _3623 = isnan(0.0) ? _590 : (isnan(_590) ? 0.0 : max(_590, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3623 : (isnan(_3623) ? 1.0 : min(_3623, 1.0))) - _586)) + _586) < ((_403 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _415 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _416 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _436 = fma(_312, cbSceneParam._m0[5u].z, fma(_311, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _310));
    float _439 = fma(_312, cbSceneParam._m0[6u].z, fma(_311, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _310));
    float _442 = fma(_312, cbSceneParam._m0[7u].z, fma(_311, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _310));
    uint _455 = uint(roundEven(NORMAL.w)) * 13u;
    uint _457 = _455 + 9u;
    uint _458 = _457 + uint(cbMatDynParam._m0[0u].w);
    float _464 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3568 : (isnan(_3568) ? 1.0 : min(_3568, 1.0)))) * cbInstanceData._m0[_458].x;
    float _465 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3579 : (isnan(_3579) ? 1.0 : min(_3579, 1.0)))) * cbInstanceData._m0[_458].y;
    float _466 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3590 : (isnan(_3590) ? 1.0 : min(_3590, 1.0)))) * cbInstanceData._m0[_458].z;
    float _3634 = isnan(0.0) ? _464 : (isnan(_464) ? 0.0 : max(_464, 0.0));
    float _467 = isnan(1.0) ? _3634 : (isnan(_3634) ? 1.0 : min(_3634, 1.0));
    float _3645 = isnan(0.0) ? _465 : (isnan(_465) ? 0.0 : max(_465, 0.0));
    float _468 = isnan(1.0) ? _3645 : (isnan(_3645) ? 1.0 : min(_3645, 1.0));
    float _3656 = isnan(0.0) ? _466 : (isnan(_466) ? 0.0 : max(_466, 0.0));
    float _469 = isnan(1.0) ? _3656 : (isnan(_3656) ? 1.0 : min(_3656, 1.0));
    float _470 = 1.0 - _319;
    float _471 = _467 * _470;
    float _472 = _468 * _470;
    float _473 = _469 * _470;
    float _478 = (_467 + (-0.039999999105930328369140625)) * _319;
    float _479 = (_468 + (-0.039999999105930328369140625)) * _319;
    float _480 = (_469 + (-0.039999999105930328369140625)) * _319;
    float _481 = _478 + 0.039999999105930328369140625;
    float _483 = _479 + 0.039999999105930328369140625;
    float _484 = _480 + 0.039999999105930328369140625;
    vec4 _493 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _415, cbSceneParam._m0[86u].y * _416));
    float _496 = _493.x * TEXCOORD_3.w;
    float _497 = dot(vec3(_310, _311, _312), vec3(_394, _395, _396));
    float _500 = _497 * 2.0;
    float _504 = (_500 * _310) - _394;
    float _505 = (_500 * _311) - _395;
    float _506 = (_500 * _312) - _396;
    float _507 = dot(vec3(_394, _395, _396), vec3(_310, _311, _312));
    float _510 = abs(_507);
    float _3667 = isnan(0.0) ? _510 : (isnan(_510) ? 0.0 : max(_510, 0.0));
    float _512 = sqrt(_314);
    float _525 = exp2((_512 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3667 : (isnan(_3667) ? 1.0 : min(_3667, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_512 * 3.0));
    float _531 = (1.0 - _525) * ((_512 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _532 = _525 * _512;
    float _560 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _564 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _568 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _899;
    float _901;
    float _902;
    float _903;
    float _904;
    float _905;
    float _906;
    float _907;
    float _908;
    float _909;
    float _910;
    float _911;
    float _912;
    float _913;
    float _914;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _624 = fma(_568, cbModelParam._m0[26u].z, fma(_564, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _560));
        float _628 = fma(_568, cbModelParam._m0[27u].z, fma(_564, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _560));
        float _632 = fma(_568, cbModelParam._m0[28u].z, fma(_564, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _560));
        float _657 = _560 + _310;
        float _658 = _564 + _311;
        float _659 = _568 + _312;
        float _669 = fma(_659, cbModelParam._m0[26u].z, fma(_658, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _657)) - _624;
        float _670 = fma(_659, cbModelParam._m0[27u].z, fma(_658, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _657)) - _628;
        float _671 = fma(_659, cbModelParam._m0[28u].z, fma(_658, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _657)) - _632;
        float _675 = inversesqrt(dot(vec3(_669, _670, _671), vec3(_669, _670, _671)));
        float _688 = ((_675 * _669) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_624 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _689 = ((_675 * _670) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_628 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _690 = ((_675 * _671) / cbModelParam._m0[34u].z) + ((((((_632 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _693 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_688, _689, _690), 0.0);
        vec4 _700 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_688, _689, _690), 0.0);
        vec4 _707 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_688, _689, _690), 0.0);
        vec4 _714 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_688, _689, _690), 0.0);
        float _727 = exp2((_693.w + (-0.5)) * 20.0) * 2.0;
        float _728 = _727 * (_693.x + (-0.5));
        float _729 = _727 * (_693.y + (-0.5));
        float _730 = _727 * (_693.z + (-0.5));
        float _737 = exp2((_700.w + (-0.5)) * 20.0) * 2.0;
        float _738 = _737 * (_700.x + (-0.5));
        float _739 = _737 * (_700.y + (-0.5));
        float _740 = _737 * (_700.z + (-0.5));
        float _747 = exp2((_707.w + (-0.5)) * 20.0) * 2.0;
        float _748 = _747 * (_707.x + (-0.5));
        float _749 = _747 * (_707.y + (-0.5));
        float _750 = _747 * (_707.z + (-0.5));
        float _757 = exp2((_714.w + (-0.5)) * 20.0) * 2.0;
        float _758 = _757 * (_714.x + (-0.5));
        float _759 = _757 * (_714.y + (-0.5));
        float _760 = _757 * (_714.z + (-0.5));
        float _761 = isnan(0.0) ? _758 : (isnan(_758) ? 0.0 : max(_758, 0.0));
        float _762 = isnan(0.0) ? _759 : (isnan(_759) ? 0.0 : max(_759, 0.0));
        float _763 = isnan(0.0) ? _760 : (isnan(_760) ? 0.0 : max(_760, 0.0));
        float _764 = _728 * 0.5;
        float _765 = _738 * 0.5;
        float _766 = _748 * 0.5;
        float _767 = dot(vec3(_764, _765, _766), vec3(_764, _765, _766));
        float _772 = (_767 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_767);
        float _781 = (dot(vec3(_310, _311, _312), vec3(_772 * _764, _772 * _765, _772 * _766)) + 1.0) * 0.5;
        float _3693 = isnan(0.0) ? _781 : (isnan(_781) ? 0.0 : max(_781, 0.0));
        float _791 = sqrt(((_765 * _765) + (_764 * _764)) + (_766 * _766)) / (_761 + 9.9999997473787516355514526367188e-06);
        float _3704 = isnan(0.0) ? _791 : (isnan(_791) ? 0.0 : max(_791, 0.0));
        float _792 = isnan(1.0) ? _3704 : (isnan(_3704) ? 1.0 : min(_3704, 1.0));
        float _793 = _792 * 2.0;
        float _797 = (1.0 - _792) / (_792 + 1.0);
        float _3715 = isnan(0.0) ? _797 : (isnan(_797) ? 0.0 : max(_797, 0.0));
        float _798 = isnan(1.0) ? _3715 : (isnan(_3715) ? 1.0 : min(_3715, 1.0));
        float _807 = ((((1.0 - _798) * (_793 + 2.0)) * exp2(log2(isnan(1.0) ? _3693 : (isnan(_3693) ? 1.0 : min(_3693, 1.0))) * (_793 + 1.0))) + _798) * _761;
        float _808 = _729 * 0.5;
        float _809 = _739 * 0.5;
        float _810 = _749 * 0.5;
        float _811 = dot(vec3(_808, _809, _810), vec3(_808, _809, _810));
        float _816 = (_811 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_811);
        float _824 = (dot(vec3(_310, _311, _312), vec3(_816 * _808, _816 * _809, _816 * _810)) + 1.0) * 0.5;
        float _3726 = isnan(0.0) ? _824 : (isnan(_824) ? 0.0 : max(_824, 0.0));
        float _833 = sqrt(((_809 * _809) + (_808 * _808)) + (_810 * _810)) / (_762 + 9.9999997473787516355514526367188e-06);
        float _3737 = isnan(0.0) ? _833 : (isnan(_833) ? 0.0 : max(_833, 0.0));
        float _834 = isnan(1.0) ? _3737 : (isnan(_3737) ? 1.0 : min(_3737, 1.0));
        float _835 = _834 * 2.0;
        float _839 = (1.0 - _834) / (_834 + 1.0);
        float _3748 = isnan(0.0) ? _839 : (isnan(_839) ? 0.0 : max(_839, 0.0));
        float _840 = isnan(1.0) ? _3748 : (isnan(_3748) ? 1.0 : min(_3748, 1.0));
        float _849 = ((((1.0 - _840) * (_835 + 2.0)) * exp2(log2(isnan(1.0) ? _3726 : (isnan(_3726) ? 1.0 : min(_3726, 1.0))) * (_835 + 1.0))) + _840) * _762;
        float _850 = _730 * 0.5;
        float _851 = _740 * 0.5;
        float _852 = _750 * 0.5;
        float _853 = dot(vec3(_850, _851, _852), vec3(_850, _851, _852));
        float _858 = (_853 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_853);
        float _866 = (dot(vec3(_310, _311, _312), vec3(_858 * _850, _858 * _851, _858 * _852)) + 1.0) * 0.5;
        float _3759 = isnan(0.0) ? _866 : (isnan(_866) ? 0.0 : max(_866, 0.0));
        float _875 = sqrt(((_851 * _851) + (_850 * _850)) + (_852 * _852)) / (_763 + 9.9999997473787516355514526367188e-06);
        float _3770 = isnan(0.0) ? _875 : (isnan(_875) ? 0.0 : max(_875, 0.0));
        float _876 = isnan(1.0) ? _3770 : (isnan(_3770) ? 1.0 : min(_3770, 1.0));
        float _877 = _876 * 2.0;
        float _881 = (1.0 - _876) / (_876 + 1.0);
        float _3781 = isnan(0.0) ? _881 : (isnan(_881) ? 0.0 : max(_881, 0.0));
        float _882 = isnan(1.0) ? _3781 : (isnan(_3781) ? 1.0 : min(_3781, 1.0));
        float _891 = ((((1.0 - _882) * (_877 + 2.0)) * exp2(log2(isnan(1.0) ? _3759 : (isnan(_3759) ? 1.0 : min(_3759, 1.0))) * (_877 + 1.0))) + _882) * _763;
        _899 = _730;
        _901 = _729;
        _902 = _728;
        _903 = _740;
        _904 = _739;
        _905 = _738;
        _906 = _750;
        _907 = _749;
        _908 = _748;
        _909 = _763;
        _910 = _762;
        _911 = _761;
        _912 = cbModelParam._m0[36u].z * (isnan(0.0) ? _807 : (isnan(_807) ? 0.0 : max(_807, 0.0)));
        _913 = cbModelParam._m0[36u].z * (isnan(0.0) ? _849 : (isnan(_849) ? 0.0 : max(_849, 0.0)));
        _914 = cbModelParam._m0[36u].z * (isnan(0.0) ? _891 : (isnan(_891) ? 0.0 : max(_891, 0.0)));
    }
    else
    {
        _899 = _900;
        _901 = _900;
        _902 = _900;
        _903 = _900;
        _904 = _900;
        _905 = _900;
        _906 = _900;
        _907 = _900;
        _908 = _900;
        _909 = _900;
        _910 = _900;
        _911 = _900;
        _912 = 0.0;
        _913 = 0.0;
        _914 = 0.0;
    }
    float _1212;
    float _1213;
    float _1214;
    float _1215;
    float _1216;
    float _1217;
    float _1218;
    float _1219;
    float _1220;
    float _1221;
    float _1222;
    float _1223;
    float _1224;
    float _1225;
    float _1226;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _943 = fma(_568, cbModelParam._m0[30u].z, fma(_564, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _560));
        float _947 = fma(_568, cbModelParam._m0[31u].z, fma(_564, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _560));
        float _951 = fma(_568, cbModelParam._m0[32u].z, fma(_564, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _560));
        float _974 = _560 + _310;
        float _975 = _564 + _311;
        float _976 = _568 + _312;
        float _986 = fma(_976, cbModelParam._m0[30u].z, fma(_975, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _974)) - _943;
        float _987 = fma(_976, cbModelParam._m0[31u].z, fma(_975, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _974)) - _947;
        float _988 = fma(_976, cbModelParam._m0[32u].z, fma(_975, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _974)) - _951;
        float _992 = inversesqrt(dot(vec3(_986, _987, _988), vec3(_986, _987, _988)));
        float _1005 = ((_992 * _986) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_943 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1006 = ((_992 * _987) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_947 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1007 = ((_992 * _988) / cbModelParam._m0[35u].z) + ((((((_951 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1009 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1005, _1006, _1007), 0.0);
        vec4 _1016 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1005, _1006, _1007), 0.0);
        vec4 _1023 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1005, _1006, _1007), 0.0);
        vec4 _1030 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1005, _1006, _1007), 0.0);
        float _1042 = exp2((_1009.w + (-0.5)) * 20.0) * 2.0;
        float _1043 = _1042 * (_1009.x + (-0.5));
        float _1044 = _1042 * (_1009.y + (-0.5));
        float _1045 = _1042 * (_1009.z + (-0.5));
        float _1052 = exp2((_1016.w + (-0.5)) * 20.0) * 2.0;
        float _1053 = _1052 * (_1016.x + (-0.5));
        float _1054 = _1052 * (_1016.y + (-0.5));
        float _1055 = _1052 * (_1016.z + (-0.5));
        float _1062 = exp2((_1023.w + (-0.5)) * 20.0) * 2.0;
        float _1063 = _1062 * (_1023.x + (-0.5));
        float _1064 = _1062 * (_1023.y + (-0.5));
        float _1065 = _1062 * (_1023.z + (-0.5));
        float _1072 = exp2((_1030.w + (-0.5)) * 20.0) * 2.0;
        float _1073 = _1072 * (_1030.x + (-0.5));
        float _1074 = _1072 * (_1030.y + (-0.5));
        float _1075 = _1072 * (_1030.z + (-0.5));
        float _1076 = isnan(0.0) ? _1073 : (isnan(_1073) ? 0.0 : max(_1073, 0.0));
        float _1077 = isnan(0.0) ? _1074 : (isnan(_1074) ? 0.0 : max(_1074, 0.0));
        float _1078 = isnan(0.0) ? _1075 : (isnan(_1075) ? 0.0 : max(_1075, 0.0));
        float _1079 = _1043 * 0.5;
        float _1080 = _1053 * 0.5;
        float _1081 = _1063 * 0.5;
        float _1082 = dot(vec3(_1079, _1080, _1081), vec3(_1079, _1080, _1081));
        float _1087 = (_1082 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1082);
        float _1095 = (dot(vec3(_310, _311, _312), vec3(_1087 * _1079, _1087 * _1080, _1087 * _1081)) + 1.0) * 0.5;
        float _3822 = isnan(0.0) ? _1095 : (isnan(_1095) ? 0.0 : max(_1095, 0.0));
        float _1104 = sqrt(((_1080 * _1080) + (_1079 * _1079)) + (_1081 * _1081)) / (_1076 + 9.9999997473787516355514526367188e-06);
        float _3833 = isnan(0.0) ? _1104 : (isnan(_1104) ? 0.0 : max(_1104, 0.0));
        float _1105 = isnan(1.0) ? _3833 : (isnan(_3833) ? 1.0 : min(_3833, 1.0));
        float _1106 = _1105 * 2.0;
        float _1110 = (1.0 - _1105) / (_1105 + 1.0);
        float _3844 = isnan(0.0) ? _1110 : (isnan(_1110) ? 0.0 : max(_1110, 0.0));
        float _1111 = isnan(1.0) ? _3844 : (isnan(_3844) ? 1.0 : min(_3844, 1.0));
        float _1120 = ((((1.0 - _1111) * (_1106 + 2.0)) * exp2(log2(isnan(1.0) ? _3822 : (isnan(_3822) ? 1.0 : min(_3822, 1.0))) * (_1106 + 1.0))) + _1111) * _1076;
        float _1121 = _1044 * 0.5;
        float _1122 = _1054 * 0.5;
        float _1123 = _1064 * 0.5;
        float _1124 = dot(vec3(_1121, _1122, _1123), vec3(_1121, _1122, _1123));
        float _1129 = (_1124 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1124);
        float _1137 = (dot(vec3(_310, _311, _312), vec3(_1129 * _1121, _1129 * _1122, _1129 * _1123)) + 1.0) * 0.5;
        float _3855 = isnan(0.0) ? _1137 : (isnan(_1137) ? 0.0 : max(_1137, 0.0));
        float _1146 = sqrt(((_1122 * _1122) + (_1121 * _1121)) + (_1123 * _1123)) / (_1077 + 9.9999997473787516355514526367188e-06);
        float _3866 = isnan(0.0) ? _1146 : (isnan(_1146) ? 0.0 : max(_1146, 0.0));
        float _1147 = isnan(1.0) ? _3866 : (isnan(_3866) ? 1.0 : min(_3866, 1.0));
        float _1148 = _1147 * 2.0;
        float _1152 = (1.0 - _1147) / (_1147 + 1.0);
        float _3877 = isnan(0.0) ? _1152 : (isnan(_1152) ? 0.0 : max(_1152, 0.0));
        float _1153 = isnan(1.0) ? _3877 : (isnan(_3877) ? 1.0 : min(_3877, 1.0));
        float _1162 = ((((1.0 - _1153) * (_1148 + 2.0)) * exp2(log2(isnan(1.0) ? _3855 : (isnan(_3855) ? 1.0 : min(_3855, 1.0))) * (_1148 + 1.0))) + _1153) * _1077;
        float _1163 = _1045 * 0.5;
        float _1164 = _1055 * 0.5;
        float _1165 = _1065 * 0.5;
        float _1166 = dot(vec3(_1163, _1164, _1165), vec3(_1163, _1164, _1165));
        float _1171 = (_1166 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1166);
        float _1179 = (dot(vec3(_310, _311, _312), vec3(_1171 * _1163, _1171 * _1164, _1171 * _1165)) + 1.0) * 0.5;
        float _3888 = isnan(0.0) ? _1179 : (isnan(_1179) ? 0.0 : max(_1179, 0.0));
        float _1188 = sqrt(((_1164 * _1164) + (_1163 * _1163)) + (_1165 * _1165)) / (_1078 + 9.9999997473787516355514526367188e-06);
        float _3899 = isnan(0.0) ? _1188 : (isnan(_1188) ? 0.0 : max(_1188, 0.0));
        float _1189 = isnan(1.0) ? _3899 : (isnan(_3899) ? 1.0 : min(_3899, 1.0));
        float _1190 = _1189 * 2.0;
        float _1194 = (1.0 - _1189) / (_1189 + 1.0);
        float _3910 = isnan(0.0) ? _1194 : (isnan(_1194) ? 0.0 : max(_1194, 0.0));
        float _1195 = isnan(1.0) ? _3910 : (isnan(_3910) ? 1.0 : min(_3910, 1.0));
        float _1204 = ((((1.0 - _1195) * (_1190 + 2.0)) * exp2(log2(isnan(1.0) ? _3888 : (isnan(_3888) ? 1.0 : min(_3888, 1.0))) * (_1190 + 1.0))) + _1195) * _1078;
        _1212 = _1045;
        _1213 = _1044;
        _1214 = _1043;
        _1215 = _1055;
        _1216 = _1054;
        _1217 = _1053;
        _1218 = _1065;
        _1219 = _1064;
        _1220 = _1063;
        _1221 = _1078;
        _1222 = _1077;
        _1223 = _1076;
        _1224 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1120 : (isnan(_1120) ? 0.0 : max(_1120, 0.0)));
        _1225 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1162 : (isnan(_1162) ? 0.0 : max(_1162, 0.0)));
        _1226 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1204 : (isnan(_1204) ? 0.0 : max(_1204, 0.0)));
    }
    else
    {
        _1212 = _900;
        _1213 = _900;
        _1214 = _900;
        _1215 = _900;
        _1216 = _900;
        _1217 = _900;
        _1218 = _900;
        _1219 = _900;
        _1220 = _900;
        _1221 = _900;
        _1222 = _900;
        _1223 = _900;
        _1224 = 0.0;
        _1225 = 0.0;
        _1226 = 0.0;
    }
    float _1236 = (cbModelParam._m0[1u].x * (_1224 - _912)) + _912;
    float _1237 = (cbModelParam._m0[1u].x * (_1225 - _913)) + _913;
    float _1238 = (cbModelParam._m0[1u].x * (_1226 - _914)) + _914;
    float _1259 = fma(_1238, cbSceneParam._m0[89u].z, fma(_1237, cbSceneParam._m0[89u].y, _1236 * cbSceneParam._m0[89u].x));
    float _1262 = fma(_1238, cbSceneParam._m0[90u].z, fma(_1237, cbSceneParam._m0[90u].y, _1236 * cbSceneParam._m0[90u].x));
    float _1265 = fma(_1238, cbSceneParam._m0[91u].z, fma(_1237, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1236));
    float _1280 = _504 * 0.5;
    float _1281 = _505 * 0.5;
    float _1282 = _506 * 0.5;
    float _1283 = dot(vec4(_1280, _1281, _1282, 1.0), vec4(_1214, _1217, _1220, _1223));
    float _1286 = dot(vec4(_1280, _1281, _1282, 1.0), vec4(_1213, _1216, _1219, _1222));
    float _1289 = dot(vec4(_1280, _1281, _1282, 1.0), vec4(_1212, _1215, _1218, _1221));
    float _1323;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1296 = dot(vec4(_1280, _1281, _1282, 1.0), vec4(_899, _903, _906, _909));
        float _1300 = dot(vec4(_1280, _1281, _1282, 1.0), vec4(_901, _904, _907, _910));
        float _1304 = dot(vec4(_1280, _1281, _1282, 1.0), vec4(_902, _905, _908, _911));
        float _1311 = dot(vec4(cbModelParam._m0[39u]), vec4(_1280, _1281, _1282, 1.0));
        _1323 = dot(vec3(isnan(0.0) ? _1304 : (isnan(_1304) ? 0.0 : max(_1304, 0.0)), isnan(0.0) ? _1300 : (isnan(_1300) ? 0.0 : max(_1300, 0.0)), isnan(0.0) ? _1296 : (isnan(_1296) ? 0.0 : max(_1296, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1311) ? 0.0 : (isnan(0.0) ? _1311 : max(0.0, _1311))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1323 = 1.0;
    }
    float _1334;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1325 = dot(vec4(cbModelParam._m0[40u]), vec4(_1280, _1281, _1282, 1.0));
        _1334 = dot(vec3(isnan(0.0) ? _1283 : (isnan(_1283) ? 0.0 : max(_1283, 0.0)), isnan(0.0) ? _1286 : (isnan(_1286) ? 0.0 : max(_1286, 0.0)), isnan(0.0) ? _1289 : (isnan(_1289) ? 0.0 : max(_1289, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1325) ? 0.0 : (isnan(0.0) ? _1325 : max(0.0, _1325))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1334 = 1.0;
    }
    float _1338 = (_1334 * cbModelParam._m0[1u].x) + (_1323 * (1.0 - cbModelParam._m0[1u].x));
    float _1348 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _314);
    float _1349 = isnan(_1348) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1348 : min(cbModelParam._m0[25u].z, _1348));
    float _1431;
    float _1433;
    float _1435;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1398 = fma(_568, cbModelParam._m0[13u].z, fma(_564, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _560)) + cbModelParam._m0[13u].w;
        float _1402 = fma(_568, cbModelParam._m0[14u].z, fma(_564, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _560)) + cbModelParam._m0[14u].w;
        float _1406 = fma(_568, cbModelParam._m0[15u].z, fma(_564, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _560)) + cbModelParam._m0[15u].w;
        float _1409 = fma(_506, cbModelParam._m0[13u].z, fma(_505, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _504));
        float _1412 = fma(_506, cbModelParam._m0[14u].z, fma(_505, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _504));
        float _1415 = fma(_506, cbModelParam._m0[15u].z, fma(_505, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _504));
        float _1443;
        if (_1409 > 0.0)
        {
            _1443 = abs((1.0 - _1398) / _1409);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1409 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1398 + 1.0) / _1409);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1443 = frontier_phi_17_15_ladder;
        }
        float _1625;
        if (_1412 > 0.0)
        {
            _1625 = abs((1.0 - _1402) / _1412);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1412 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1402 + 1.0) / _1412);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1625 = frontier_phi_26_22_ladder;
        }
        float _1698;
        if (_1415 > 0.0)
        {
            _1698 = abs((1.0 - _1406) / _1415);
        }
        else
        {
            float frontier_phi_37_33_ladder;
            if (_1415 < 0.0)
            {
                frontier_phi_37_33_ladder = abs((_1406 + 1.0) / _1415);
            }
            else
            {
                frontier_phi_37_33_ladder = 5000.0;
            }
            _1698 = frontier_phi_37_33_ladder;
        }
        float _1700 = isnan(_1625) ? _1443 : (isnan(_1443) ? _1625 : min(_1443, _1625));
        float _1701 = isnan(_1698) ? _1700 : (isnan(_1700) ? _1698 : min(_1700, _1698));
        float _1705 = (_1701 * _1409) + _1398;
        float _1706 = (_1701 * _1412) + _1402;
        float _1707 = (_1701 * _1415) + _1406;
        float _1708 = _1701 * 9.9999997473787516355514526367188e-05;
        float _1710 = (-1.0) - _1708;
        float _1712 = _1708 + 1.0;
        float frontier_phi_16_37_ladder;
        float frontier_phi_16_37_ladder_1;
        float frontier_phi_16_37_ladder_2;
        if ((_1707 > _1712) || ((_1707 < _1710) || ((_1706 > _1712) || ((_1706 < _1710) || ((_1705 < _1710) || (_1705 > _1712))))))
        {
            frontier_phi_16_37_ladder = 0.0;
            frontier_phi_16_37_ladder_1 = 0.0;
            frontier_phi_16_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1783 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1707, cbModelParam._m0[9u].z, fma(_1706, cbModelParam._m0[9u].y, _1705 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1707, cbModelParam._m0[10u].z, fma(_1706, cbModelParam._m0[10u].y, _1705 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1707, cbModelParam._m0[11u].z, fma(_1706, cbModelParam._m0[11u].y, _1705 * cbModelParam._m0[11u].x))), _1349);
            frontier_phi_16_37_ladder = _1783.z * cbModelParam._m0[1u].y;
            frontier_phi_16_37_ladder_1 = _1783.y * cbModelParam._m0[1u].y;
            frontier_phi_16_37_ladder_2 = _1783.x * cbModelParam._m0[1u].y;
        }
        _1431 = frontier_phi_16_37_ladder_2;
        _1433 = frontier_phi_16_37_ladder_1;
        _1435 = frontier_phi_16_37_ladder;
    }
    else
    {
        vec4 _1419 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_504, _505, _506), _1349);
        _1431 = _1419.x * cbModelParam._m0[1u].y;
        _1433 = _1419.y * cbModelParam._m0[1u].y;
        _1435 = _1419.z * cbModelParam._m0[1u].y;
    }
    float _1439 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _314);
    float _1440 = isnan(_1439) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1439 : min(cbModelParam._m0[25u].w, _1439));
    float _1533;
    float _1535;
    float _1537;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1497 = fma(_568, cbModelParam._m0[21u].z, fma(_564, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _560)) + cbModelParam._m0[21u].w;
        float _1501 = fma(_568, cbModelParam._m0[22u].z, fma(_564, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _560)) + cbModelParam._m0[22u].w;
        float _1505 = fma(_568, cbModelParam._m0[23u].z, fma(_564, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _560)) + cbModelParam._m0[23u].w;
        float _1508 = fma(_506, cbModelParam._m0[21u].z, fma(_505, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _504));
        float _1511 = fma(_506, cbModelParam._m0[22u].z, fma(_505, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _504));
        float _1514 = fma(_506, cbModelParam._m0[23u].z, fma(_505, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _504));
        float _1630;
        if (_1508 > 0.0)
        {
            _1630 = abs((1.0 - _1497) / _1508);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1508 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1497 + 1.0) / _1508);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1630 = frontier_phi_28_24_ladder;
        }
        float _1725;
        if (_1511 > 0.0)
        {
            _1725 = abs((1.0 - _1501) / _1511);
        }
        else
        {
            float frontier_phi_39_35_ladder;
            if (_1511 < 0.0)
            {
                frontier_phi_39_35_ladder = abs((_1501 + 1.0) / _1511);
            }
            else
            {
                frontier_phi_39_35_ladder = 5000.0;
            }
            _1725 = frontier_phi_39_35_ladder;
        }
        float _2004;
        if (_1514 > 0.0)
        {
            _2004 = abs((1.0 - _1505) / _1514);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1514 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1505 + 1.0) / _1514);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _2004 = frontier_phi_48_45_ladder;
        }
        float _2006 = isnan(_1725) ? _1630 : (isnan(_1630) ? _1725 : min(_1630, _1725));
        float _2007 = isnan(_2004) ? _2006 : (isnan(_2006) ? _2004 : min(_2006, _2004));
        float _2011 = (_2007 * _1508) + _1497;
        float _2012 = (_2007 * _1511) + _1501;
        float _2013 = (_2007 * _1514) + _1505;
        float _2014 = _2007 * 9.9999997473787516355514526367188e-05;
        float _2015 = (-1.0) - _2014;
        float _2017 = _2014 + 1.0;
        float frontier_phi_25_48_ladder;
        float frontier_phi_25_48_ladder_1;
        float frontier_phi_25_48_ladder_2;
        if ((_2013 > _2017) || ((_2013 < _2015) || ((_2012 > _2017) || ((_2012 < _2015) || ((_2011 < _2015) || (_2011 > _2017))))))
        {
            frontier_phi_25_48_ladder = 0.0;
            frontier_phi_25_48_ladder_1 = 0.0;
            frontier_phi_25_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2135 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2013, cbModelParam._m0[17u].z, fma(_2012, cbModelParam._m0[17u].y, _2011 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2013, cbModelParam._m0[18u].z, fma(_2012, cbModelParam._m0[18u].y, _2011 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2013, cbModelParam._m0[19u].z, fma(_2012, cbModelParam._m0[19u].y, _2011 * cbModelParam._m0[19u].x))), _1440);
            frontier_phi_25_48_ladder = _2135.z * cbModelParam._m0[1u].z;
            frontier_phi_25_48_ladder_1 = _2135.y * cbModelParam._m0[1u].z;
            frontier_phi_25_48_ladder_2 = _2135.x * cbModelParam._m0[1u].z;
        }
        _1533 = frontier_phi_25_48_ladder_2;
        _1535 = frontier_phi_25_48_ladder_1;
        _1537 = frontier_phi_25_48_ladder;
    }
    else
    {
        vec4 _1517 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_504, _505, _506), _1440);
        _1533 = _1517.x * cbModelParam._m0[1u].z;
        _1535 = _1517.y * cbModelParam._m0[1u].z;
        _1537 = _1517.z * cbModelParam._m0[1u].z;
    }
    float _1550 = (((_531 * _481) + _532) * _496) * ((cbModelParam._m0[1u].w * (_1533 - _1431)) + _1431);
    float _1552 = (((_531 * _483) + _532) * _496) * ((cbModelParam._m0[1u].w * (_1535 - _1433)) + _1433);
    float _1554 = (((_531 * _484) + _532) * _496) * ((cbModelParam._m0[1u].w * (_1537 - _1435)) + _1435);
    float _1557 = fma(_1554, cbSceneParam._m0[89u].z, fma(_1552, cbSceneParam._m0[89u].y, _1550 * cbSceneParam._m0[89u].x));
    float _1560 = fma(_1554, cbSceneParam._m0[90u].z, fma(_1552, cbSceneParam._m0[90u].y, _1550 * cbSceneParam._m0[90u].x));
    float _1563 = fma(_1554, cbSceneParam._m0[91u].z, fma(_1552, cbSceneParam._m0[91u].y, _1550 * cbSceneParam._m0[91u].x));
    uvec4 _1573 = floatBitsToUint(cbInstanceData._m0[_455 + 5u]);
    uint _1575 = _1573.x * 14u;
    uint _1576 = _1575 + 13u;
    float _1583 = _496 + (-1.0);
    float _1588 = (cbLight._m0[_1576].x * _1583) + 1.0;
    float _1589 = (cbLight._m0[_1576].y * _1583) + 1.0;
    float _1590 = (cbLight._m0[_1576].z * _1583) + 1.0;
    float _1591 = (cbLight._m0[_1576].w * _1583) + 1.0;
    uint _1593 = _1575 + 4u;
    float _1605 = dot(vec3(cbLight._m0[_1575].xyz), vec3(_310, _311, _312));
    float _1608 = isnan(1.0) ? _1588 : (isnan(_1588) ? 1.0 : min(_1588, 1.0));
    uint _1609 = _1575 + 5u;
    float _1621 = dot(vec3(cbLight._m0[_1575 | 1u].xyz), vec3(_310, _311, _312));
    float _1624 = isnan(1.0) ? _1589 : (isnan(_1589) ? 1.0 : min(_1589, 1.0));
    float _1689;
    float _1690;
    float _1691;
    if (_315 == 0.0)
    {
        float _4046 = isnan(0.0) ? _1605 : (isnan(_1605) ? 0.0 : max(_1605, 0.0));
        float _4057 = isnan(0.0) ? _1621 : (isnan(_1621) ? 0.0 : max(_1621, 0.0));
        float _1643 = (isnan(1.0) ? _4046 : (isnan(_4046) ? 1.0 : min(_4046, 1.0))) * 0.3183098733425140380859375;
        float _1645 = (isnan(1.0) ? _4057 : (isnan(_4057) ? 1.0 : min(_4057, 1.0))) * 0.3183098733425140380859375;
        _1689 = ((cbLight._m0[_1609].x * _1624) * _1645) + ((cbLight._m0[_1593].x * _1608) * _1643);
        _1690 = ((_1624 * cbLight._m0[_1609].y) * _1645) + ((_1608 * cbLight._m0[_1593].y) * _1643);
        _1691 = ((_1624 * cbLight._m0[_1609].z) * _1645) + ((_1608 * cbLight._m0[_1593].z) * _1643);
    }
    else
    {
        float _1655 = _1605 + _315;
        float _1658 = (_315 * 2.0) + 1.0;
        float _1659 = (isnan(0.0) ? _1655 : (isnan(_1655) ? 0.0 : max(_1655, 0.0))) / _1658;
        float _1666 = _1621 + _315;
        float _1668 = (isnan(0.0) ? _1666 : (isnan(_1666) ? 0.0 : max(_1666, 0.0))) / _1658;
        _1689 = (((_1668 * cbLight._m0[_1609].x) * _1624) + ((_1659 * cbLight._m0[_1593].x) * _1608)) * 0.3183098733425140380859375;
        _1690 = (((_1668 * cbLight._m0[_1609].y) * _1624) + ((_1659 * cbLight._m0[_1593].y) * _1608)) * 0.3183098733425140380859375;
        _1691 = (((_1668 * cbLight._m0[_1609].z) * _1624) + ((_1659 * cbLight._m0[_1593].z) * _1608)) * 0.3183098733425140380859375;
    }
    uvec4 _1695 = floatBitsToUint(cbLight._m0[_1575 + 12u]);
    bool _1697 = _1695.x == 0u;
    float _1730;
    float _1732;
    float _1734;
    if (_1697)
    {
        _1730 = _1689;
        _1732 = _1690;
        _1734 = _1691;
    }
    else
    {
        uint _1738 = _1575 + 6u;
        float _1754 = (dot(vec3(cbLight._m0[_1575 + 2u].xyz), vec3(_310, _311, _312)) * 0.5) + 0.5;
        float _1755 = _1754 * _1754;
        float _4078 = isnan(0.0) ? _1755 : (isnan(_1755) ? 0.0 : max(_1755, 0.0));
        float _1756 = isnan(1.0) ? _4078 : (isnan(_4078) ? 1.0 : min(_4078, 1.0));
        float _1757 = isnan(1.0) ? _1590 : (isnan(_1590) ? 1.0 : min(_1590, 1.0));
        _1730 = (((cbLight._m0[_1738].x * 0.3183098733425140380859375) * _1756) * _1757) + _1689;
        _1732 = (((cbLight._m0[_1738].y * 0.3183098733425140380859375) * _1756) * _1757) + _1690;
        _1734 = (((cbLight._m0[_1738].z * 0.3183098733425140380859375) * _1756) * _1757) + _1691;
    }
    bool _1737 = _1695.y == 0u;
    float _1792;
    float _1794;
    float _1796;
    if (_1737)
    {
        _1792 = _1730;
        _1794 = _1732;
        _1796 = _1734;
    }
    else
    {
        uint _1975 = _1575 + 7u;
        float _1991 = (dot(vec3(cbLight._m0[_1575 + 3u].xyz), vec3(_310, _311, _312)) * 0.5) + 0.5;
        float _1992 = _1991 * _1991;
        float _4094 = isnan(0.0) ? _1992 : (isnan(_1992) ? 0.0 : max(_1992, 0.0));
        float _1993 = isnan(1.0) ? _4094 : (isnan(_4094) ? 1.0 : min(_4094, 1.0));
        float _1994 = isnan(1.0) ? _1591 : (isnan(_1591) ? 1.0 : min(_1591, 1.0));
        _1792 = (((cbLight._m0[_1975].x * 0.3183098733425140380859375) * _1993) * _1994) + _1730;
        _1794 = (((cbLight._m0[_1975].y * 0.3183098733425140380859375) * _1993) * _1994) + _1732;
        _1796 = (((cbLight._m0[_1975].z * 0.3183098733425140380859375) * _1993) * _1994) + _1734;
    }
    uint _1801 = _1575 + 8u;
    float _1817 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1575].w)) * _314) * 0.949999988079071044921875);
    float _1818 = _1817 * _1817;
    float _1819 = cbLight._m0[_1575].x + _394;
    float _1820 = cbLight._m0[_1575].y + _395;
    float _1821 = cbLight._m0[_1575].z + _396;
    float _1825 = inversesqrt(dot(vec3(_1819, _1820, _1821), vec3(_1819, _1820, _1821)));
    float _1826 = _1825 * _1819;
    float _1827 = _1825 * _1820;
    float _1828 = _1825 * _1821;
    float _1829 = dot(vec3(_310, _311, _312), vec3(cbLight._m0[_1575].xyz));
    float _4110 = isnan(0.0) ? _1829 : (isnan(_1829) ? 0.0 : max(_1829, 0.0));
    float _1832 = isnan(1.0) ? _4110 : (isnan(_4110) ? 1.0 : min(_4110, 1.0));
    float _4121 = isnan(0.0) ? _497 : (isnan(_497) ? 0.0 : max(_497, 0.0));
    float _1833 = isnan(1.0) ? _4121 : (isnan(_4121) ? 1.0 : min(_4121, 1.0));
    float _1834 = dot(vec3(_310, _311, _312), vec3(_1826, _1827, _1828));
    float _4132 = isnan(0.0) ? _1834 : (isnan(_1834) ? 0.0 : max(_1834, 0.0));
    float _1837 = isnan(1.0) ? _4132 : (isnan(_4132) ? 1.0 : min(_4132, 1.0));
    float _1838 = dot(vec3(cbLight._m0[_1575].xyz), vec3(_1826, _1827, _1828));
    float _4143 = isnan(0.0) ? _1838 : (isnan(_1838) ? 0.0 : max(_1838, 0.0));
    float _1842 = _1818 * _1818;
    float _1846 = ((_1837 * _1837) * (_1842 + (-1.0))) + 1.0;
    float _1854 = exp2(log2(1.0 - (isnan(1.0) ? _4143 : (isnan(_4143) ? 1.0 : min(_4143, 1.0)))) * 5.0);
    float _1855 = 0.959999978542327880859375 - _478;
    float _1857 = 0.959999978542327880859375 - _479;
    float _1858 = 0.959999978542327880859375 - _480;
    float _1865 = 1.0 - _1818;
    float _1876 = (0.5 / (((_1833 * ((_1832 * _1865) + _1818)) + 9.9999999392252902907785028219223e-09) + (((_1833 * _1865) + _1818) * _1832))) * _1832;
    float _4154 = isnan(0.0) ? _1876 : (isnan(_1876) ? 0.0 : max(_1876, 0.0));
    float _1878 = (isnan(1.0) ? _4154 : (isnan(_4154) ? 1.0 : min(_4154, 1.0))) * (_1842 / ((_1846 * _1846) * 3.141590118408203125));
    float _1879 = isnan(1.0) ? _1588 : (isnan(_1588) ? 1.0 : min(_1588, 1.0));
    uint _1889 = _1575 | 1u;
    uint _1893 = _1575 + 9u;
    float _1907 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1889].w)) * _314) * 0.949999988079071044921875);
    float _1908 = _1907 * _1907;
    float _1909 = cbLight._m0[_1889].x + _394;
    float _1910 = cbLight._m0[_1889].y + _395;
    float _1911 = cbLight._m0[_1889].z + _396;
    float _1915 = inversesqrt(dot(vec3(_1909, _1910, _1911), vec3(_1909, _1910, _1911)));
    float _1916 = _1915 * _1909;
    float _1917 = _1915 * _1910;
    float _1918 = _1915 * _1911;
    float _1919 = dot(vec3(_310, _311, _312), vec3(cbLight._m0[_1889].xyz));
    float _4170 = isnan(0.0) ? _1919 : (isnan(_1919) ? 0.0 : max(_1919, 0.0));
    float _1922 = isnan(1.0) ? _4170 : (isnan(_4170) ? 1.0 : min(_4170, 1.0));
    float _1923 = dot(vec3(_310, _311, _312), vec3(_1916, _1917, _1918));
    float _4181 = isnan(0.0) ? _1923 : (isnan(_1923) ? 0.0 : max(_1923, 0.0));
    float _1926 = isnan(1.0) ? _4181 : (isnan(_4181) ? 1.0 : min(_4181, 1.0));
    float _1927 = dot(vec3(cbLight._m0[_1889].xyz), vec3(_1916, _1917, _1918));
    float _4192 = isnan(0.0) ? _1927 : (isnan(_1927) ? 0.0 : max(_1927, 0.0));
    float _1931 = _1908 * _1908;
    float _1935 = ((_1926 * _1926) * (_1931 + (-1.0))) + 1.0;
    float _1942 = exp2(log2(1.0 - (isnan(1.0) ? _4192 : (isnan(_4192) ? 1.0 : min(_4192, 1.0)))) * 5.0);
    float _1949 = 1.0 - _1908;
    float _1959 = (0.5 / (((_1833 * ((_1922 * _1949) + _1908)) + 9.9999999392252902907785028219223e-09) + (((_1833 * _1949) + _1908) * _1922))) * _1922;
    float _4203 = isnan(0.0) ? _1959 : (isnan(_1959) ? 0.0 : max(_1959, 0.0));
    float _1961 = (isnan(1.0) ? _4203 : (isnan(_4203) ? 1.0 : min(_4203, 1.0))) * (_1931 / ((_1935 * _1935) * 3.141590118408203125));
    float _1962 = isnan(1.0) ? _1589 : (isnan(_1589) ? 1.0 : min(_1589, 1.0));
    float _1972 = (((((_1942 * _1855) + _481) * cbLight._m0[_1893].x) * _1961) * _1962) + (((((_1854 * _1855) + _481) * cbLight._m0[_1801].x) * _1878) * _1879);
    float _1973 = (((((_1942 * _1857) + _483) * cbLight._m0[_1893].y) * _1961) * _1962) + (((((_1854 * _1857) + _483) * cbLight._m0[_1801].y) * _1878) * _1879);
    float _1974 = (((((_1942 * _1858) + _484) * cbLight._m0[_1893].z) * _1961) * _1962) + (((((_1854 * _1858) + _484) * cbLight._m0[_1801].z) * _1878) * _1879);
    float _2030;
    float _2032;
    float _2034;
    if (_1697)
    {
        _2030 = _1972;
        _2032 = _1973;
        _2034 = _1974;
    }
    else
    {
        uint _2036 = _1575 + 2u;
        uint _2040 = _1575 + 10u;
        float _2054 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2036].w)) * _314) * 0.949999988079071044921875);
        float _2055 = _2054 * _2054;
        float _2056 = cbLight._m0[_2036].x + _394;
        float _2057 = cbLight._m0[_2036].y + _395;
        float _2058 = cbLight._m0[_2036].z + _396;
        float _2062 = inversesqrt(dot(vec3(_2056, _2057, _2058), vec3(_2056, _2057, _2058)));
        float _2063 = _2062 * _2056;
        float _2064 = _2062 * _2057;
        float _2065 = _2062 * _2058;
        float _2066 = dot(vec3(_310, _311, _312), vec3(cbLight._m0[_2036].xyz));
        float _4219 = isnan(0.0) ? _2066 : (isnan(_2066) ? 0.0 : max(_2066, 0.0));
        float _2069 = isnan(1.0) ? _4219 : (isnan(_4219) ? 1.0 : min(_4219, 1.0));
        float _2070 = dot(vec3(_310, _311, _312), vec3(_2063, _2064, _2065));
        float _4230 = isnan(0.0) ? _2070 : (isnan(_2070) ? 0.0 : max(_2070, 0.0));
        float _2073 = isnan(1.0) ? _4230 : (isnan(_4230) ? 1.0 : min(_4230, 1.0));
        float _2074 = dot(vec3(cbLight._m0[_2036].xyz), vec3(_2063, _2064, _2065));
        float _4241 = isnan(0.0) ? _2074 : (isnan(_2074) ? 0.0 : max(_2074, 0.0));
        float _2078 = _2055 * _2055;
        float _2082 = ((_2073 * _2073) * (_2078 + (-1.0))) + 1.0;
        float _2089 = exp2(log2(1.0 - (isnan(1.0) ? _4241 : (isnan(_4241) ? 1.0 : min(_4241, 1.0)))) * 5.0);
        float _2096 = 1.0 - _2055;
        float _2106 = (0.5 / (((_1833 * ((_2069 * _2096) + _2055)) + 9.9999999392252902907785028219223e-09) + (((_1833 * _2096) + _2055) * _2069))) * _2069;
        float _4252 = isnan(0.0) ? _2106 : (isnan(_2106) ? 0.0 : max(_2106, 0.0));
        float _2108 = (isnan(1.0) ? _4252 : (isnan(_4252) ? 1.0 : min(_4252, 1.0))) * (_2078 / ((_2082 * _2082) * 3.141590118408203125));
        float _2109 = isnan(1.0) ? _1590 : (isnan(_1590) ? 1.0 : min(_1590, 1.0));
        _2030 = (((((_2089 * _1855) + _481) * cbLight._m0[_2040].x) * _2108) * _2109) + _1972;
        _2032 = (((((_2089 * _1857) + _483) * cbLight._m0[_2040].y) * _2108) * _2109) + _1973;
        _2034 = (((((_2089 * _1858) + _484) * cbLight._m0[_2040].z) * _2108) * _2109) + _1974;
    }
    float _2140;
    float _2142;
    float _2144;
    if (_1737)
    {
        _2140 = _2030;
        _2142 = _2032;
        _2144 = _2034;
    }
    else
    {
        uint _2151 = _1575 + 3u;
        uint _2155 = _1575 + 11u;
        float _2169 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2151].w)) * _314) * 0.949999988079071044921875);
        float _2170 = _2169 * _2169;
        float _2171 = cbLight._m0[_2151].x + _394;
        float _2172 = cbLight._m0[_2151].y + _395;
        float _2173 = cbLight._m0[_2151].z + _396;
        float _2177 = inversesqrt(dot(vec3(_2171, _2172, _2173), vec3(_2171, _2172, _2173)));
        float _2178 = _2177 * _2171;
        float _2179 = _2177 * _2172;
        float _2180 = _2177 * _2173;
        float _2181 = dot(vec3(_310, _311, _312), vec3(cbLight._m0[_2151].xyz));
        float _4268 = isnan(0.0) ? _2181 : (isnan(_2181) ? 0.0 : max(_2181, 0.0));
        float _2184 = isnan(1.0) ? _4268 : (isnan(_4268) ? 1.0 : min(_4268, 1.0));
        float _2185 = dot(vec3(_310, _311, _312), vec3(_2178, _2179, _2180));
        float _4279 = isnan(0.0) ? _2185 : (isnan(_2185) ? 0.0 : max(_2185, 0.0));
        float _2188 = isnan(1.0) ? _4279 : (isnan(_4279) ? 1.0 : min(_4279, 1.0));
        float _2189 = dot(vec3(cbLight._m0[_2151].xyz), vec3(_2178, _2179, _2180));
        float _4290 = isnan(0.0) ? _2189 : (isnan(_2189) ? 0.0 : max(_2189, 0.0));
        float _2193 = _2170 * _2170;
        float _2197 = ((_2188 * _2188) * (_2193 + (-1.0))) + 1.0;
        float _2204 = exp2(log2(1.0 - (isnan(1.0) ? _4290 : (isnan(_4290) ? 1.0 : min(_4290, 1.0)))) * 5.0);
        float _2211 = 1.0 - _2170;
        float _2221 = (0.5 / (((_1833 * ((_2184 * _2211) + _2170)) + 9.9999999392252902907785028219223e-09) + (((_1833 * _2211) + _2170) * _2184))) * _2184;
        float _4301 = isnan(0.0) ? _2221 : (isnan(_2221) ? 0.0 : max(_2221, 0.0));
        float _2223 = (isnan(1.0) ? _4301 : (isnan(_4301) ? 1.0 : min(_4301, 1.0))) * (_2193 / ((_2197 * _2197) * 3.141590118408203125));
        float _2224 = isnan(1.0) ? _1591 : (isnan(_1591) ? 1.0 : min(_1591, 1.0));
        _2140 = (((((_2204 * _1855) + _481) * cbLight._m0[_2155].x) * _2223) * _2224) + _2030;
        _2142 = (((((_2204 * _1857) + _483) * cbLight._m0[_2155].y) * _2223) * _2224) + _2032;
        _2144 = (((((_2204 * _1858) + _484) * cbLight._m0[_2155].z) * _2223) * _2224) + _2034;
    }
    float _2333;
    float _2335;
    float _2337;
    float _2339;
    float _2341;
    float _2343;
    if (_1573.y == 0u)
    {
        float _2273 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2274 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2273;
        float _2275 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2273;
        float _2276 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2273;
        uvec4 _2288 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2289 = _2288.x;
        uint _2300 = uint((float(_2288.y) * floor(float(uint(cbSceneParam._m0[85u].y * _416) / _2289))) + floor(float(uint(cbSceneParam._m0[85u].x * _415) / _2289)));
        float _2310 = (log2(_2276 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2311 = isnan(0.0) ? _2310 : (isnan(_2310) ? 0.0 : max(_2310, 0.0));
        uint _2314 = uint(isnan(14.0) ? _2311 : (isnan(_2311) ? 14.0 : min(_2311, 14.0)));
        uvec4 _2319 = texelFetch(g_lightClusterGridBuffer, int(((_2314 << 2u) + (_2300 << 6u)) >> 2u));
        uint _2320 = _2319.x;
        uint _2321 = _2288.z;
        float _2346;
        float _2348;
        float _2350;
        float _2352;
        float _2354;
        float _2356;
        if (((((1u << ((_2321 >> 4u) & 15u)) + 4294967295u) & _2320) == 0u) || ((_2321 & 240u) == 0u))
        {
            _2346 = 0.0;
            _2348 = 0.0;
            _2350 = 0.0;
            _2352 = 0.0;
            _2354 = 0.0;
            _2356 = 0.0;
        }
        else
        {
            float _2347;
            float _2349;
            float _2351;
            float _2353;
            float _2355;
            float _2357;
            float _2527 = 0.0;
            float _2528 = 0.0;
            float _2529 = 0.0;
            float _2530 = 0.0;
            float _2531 = 0.0;
            float _2532 = 0.0;
            uint _2533 = 0u;
            uint _2542;
            bool _2543;
            for (;;)
            {
                _2542 = texelFetch(g_lightClassification, int((((_2314 << 5u) + (_2300 << 9u)) + (_2533 << 2u)) >> 2u)).x;
                _2543 = _2542 == 0u;
                float frontier_phi_67_pred;
                float frontier_phi_67_pred_1;
                float frontier_phi_67_pred_2;
                float frontier_phi_67_pred_3;
                float frontier_phi_67_pred_4;
                float frontier_phi_67_pred_5;
                if (_2543)
                {
                    frontier_phi_67_pred = _2527;
                    frontier_phi_67_pred_1 = _2532;
                    frontier_phi_67_pred_2 = _2531;
                    frontier_phi_67_pred_3 = _2530;
                    frontier_phi_67_pred_4 = _2529;
                    frontier_phi_67_pred_5 = _2528;
                }
                else
                {
                    float _2728;
                    float _2729;
                    float _2730;
                    float _2731;
                    float _2732;
                    float _2733;
                    uint _2734;
                    _2728 = _2527;
                    _2729 = _2528;
                    _2730 = _2529;
                    _2731 = _2530;
                    _2732 = _2531;
                    _2733 = _2532;
                    _2734 = _2542;
                    float _2643;
                    float _2644;
                    float _2645;
                    float _2646;
                    float _2647;
                    float _2648;
                    for (;;)
                    {
                        uint _2738 = uint(findLSB(_2734)) + (_2533 << 5u);
                        uint _2735 = (_2734 + 4294967295u) & _2734;
                        uint _2740 = _2738 * 48u;
                        vec4 _2754 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2740)).x, texelFetch(g_PointLightRenderingBuffer, int(_2740 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2740 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2740 + 3u)).x));
                        uint _2760 = (_2738 * 48u) + 4u;
                        vec4 _2773 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2760)).x, texelFetch(g_PointLightRenderingBuffer, int(_2760 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2760 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2760 + 3u)).x));
                        float _2774 = _2773.x;
                        float _2775 = _2773.y;
                        float _2776 = _2773.z;
                        uint _2779 = (_2738 * 48u) + 8u;
                        vec3 _2790 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2779)).x, texelFetch(g_PointLightRenderingBuffer, int(_2779 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2779 + 2u)).x));
                        uint _2795 = (_2738 * 48u) + 12u;
                        vec2 _2803 = uintBitsToFloat(uvec2(texelFetch(g_PointLightRenderingBuffer, int(_2795)).x, texelFetch(g_PointLightRenderingBuffer, int(_2795 + 1u)).x));
                        float _2809 = inversesqrt(dot(vec3(_2274, _2275, _2276), vec3(_2274, _2275, _2276)));
                        float _2810 = _2809 * _2274;
                        float _2811 = _2809 * _2275;
                        float _2812 = _2809 * _2276;
                        float _2813 = _2754.x - _2274;
                        float _2814 = _2754.y - _2275;
                        float _2815 = _2754.z - _2276;
                        float _2816 = dot(vec3(_2813, _2814, _2815), vec3(_2813, _2814, _2815));
                        float _2819 = inversesqrt(_2816);
                        float _2820 = _2819 * _2813;
                        float _2821 = _2819 * _2814;
                        float _2822 = _2819 * _2815;
                        float _2823 = dot(vec3(_436, _439, _442), vec3(_2820, _2821, _2822));
                        float _2828 = 1.0 - (_2816 * _2754.w);
                        float _4327 = isnan(0.0) ? _2828 : (isnan(_2828) ? 0.0 : max(_2828, 0.0));
                        float _2829 = isnan(1.0) ? _4327 : (isnan(_4327) ? 1.0 : min(_4327, 1.0));
                        float _2830 = sqrt(_2816) * _2773.w;
                        float _2833 = 1.39999997615814208984375 / (_2830 + 1.39999997615814208984375);
                        float _2834 = _2833 * _2833;
                        float _2835 = 1.0 - _2834;
                        float _2837 = (_2835 * _2835) * _315;
                        float _2840 = ((_2835 * _2823) + _2834) + _2837;
                        float _2845 = _2830 * _2830;
                        float _2850 = ((isnan(0.0) ? _2840 : (isnan(_2840) ? 0.0 : max(_2840, 0.0))) * _2829) / (((_2837 * 2.0) + 1.0) * ((_2845 * 0.699999988079071044921875) + 1.0));
                        float _2854 = dot(vec3(_2820, _2821, _2822), vec3(_2810, _2811, _2812));
                        float _4343 = isnan(0.0) ? _2854 : (isnan(_2854) ? 0.0 : max(_2854, 0.0));
                        float _2861 = dot(vec3((-0.0) - _2810, (-0.0) - _2811, (-0.0) - _2812), vec3(_436, _439, _442)) + 1.0;
                        float _2863 = (isnan(0.0) ? _2861 : (isnan(_2861) ? 0.0 : max(_2861, 0.0))) * 0.5;
                        float _2870 = ((_2863 * _2863) * _2803.x) * exp2((_2803.y * 32.0) * log2(isnan(1.0) ? _4343 : (isnan(_4343) ? 1.0 : min(_4343, 1.0))));
                        float _2872 = _315 / (_315 + 1.0);
                        float _2888 = (-0.0) - _2274;
                        float _2889 = (-0.0) - _2275;
                        float _2890 = (-0.0) - _2276;
                        float _2894 = inversesqrt(dot(vec3(_2888, _2889, _2890), vec3(_2888, _2889, _2890)));
                        float _2895 = _2894 * _2888;
                        float _2896 = _2894 * _2889;
                        float _2897 = _2894 * _2890;
                        float _2905 = exp2(log2(1.0 / ((_2845 * 3.5) + 5.0)) * 0.25);
                        float _2906 = 1.0 - _512;
                        float _2913 = sqrt(1.0 - ((1.0 - (_2906 * _2906)) * (1.0 - (_2905 * _2905))));
                        float _2914 = _2913 * _2913;
                        float _2915 = _2914 * _2914;
                        float _2916 = _2895 + _2820;
                        float _2917 = _2896 + _2821;
                        float _2918 = _2897 + _2822;
                        float _2922 = inversesqrt(dot(vec3(_2916, _2917, _2918), vec3(_2916, _2917, _2918)));
                        float _2926 = dot(vec3(_436, _439, _442), vec3(_2895, _2896, _2897));
                        float _4359 = isnan(0.0) ? _2926 : (isnan(_2926) ? 0.0 : max(_2926, 0.0));
                        float _2929 = isnan(1.0) ? _4359 : (isnan(_4359) ? 1.0 : min(_4359, 1.0));
                        float _2930 = dot(vec3(_436, _439, _442), vec3(_2922 * _2916, _2922 * _2917, _2922 * _2918));
                        float _4370 = isnan(0.0) ? _2930 : (isnan(_2930) ? 0.0 : max(_2930, 0.0));
                        float _2933 = isnan(1.0) ? _4370 : (isnan(_4370) ? 1.0 : min(_4370, 1.0));
                        float _2937 = ((_2933 * _2933) * (_2915 + (-1.0))) + 1.0;
                        float _2938 = _2833 * _2914;
                        float _2939 = _2938 * _2938;
                        float _2942 = ((1.0 - _2939) * _2823) + _2939;
                        float _4381 = isnan(0.0) ? _2942 : (isnan(_2942) ? 0.0 : max(_2942, 0.0));
                        float _2943 = isnan(1.0) ? _4381 : (isnan(_4381) ? 1.0 : min(_4381, 1.0));
                        float _2944 = 1.0 - _2914;
                        float _2954 = (0.5 / (((_2943 * ((_2929 * _2944) + _2914)) + 9.9999999392252902907785028219223e-09) + (((_2943 * _2944) + _2914) * _2929))) * _2943;
                        float _4392 = isnan(0.0) ? _2954 : (isnan(_2954) ? 0.0 : max(_2954, 0.0));
                        float _2965 = (((_2915 * 3.1415927410125732421875) * (isnan(1.0) ? _4392 : (isnan(_4392) ? 1.0 : min(_4392, 1.0)))) / ((_2937 * _2937) * ((_2845 * 2.1991131305694580078125) + 3.141590118408203125))) * _2829;
                        _2646 = (((((_2774 * 0.3183098733425140380859375) * _2872) * _2870) + _2774) * _2850) + _2731;
                        _2647 = (((((_2775 * 0.3183098733425140380859375) * _2872) * _2870) + _2775) * _2850) + _2732;
                        _2648 = (((((_2776 * 0.3183098733425140380859375) * _2872) * _2870) + _2776) * _2850) + _2733;
                        _2643 = (_2965 * _2790.x) + _2728;
                        _2644 = (_2965 * _2790.y) + _2729;
                        _2645 = (_2965 * _2790.z) + _2730;
                        if (_2735 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2728 = _2643;
                            _2729 = _2644;
                            _2730 = _2645;
                            _2731 = _2646;
                            _2732 = _2647;
                            _2733 = _2648;
                            _2734 = _2735;
                        }
                    }
                    frontier_phi_67_pred = _2643;
                    frontier_phi_67_pred_1 = _2648;
                    frontier_phi_67_pred_2 = _2647;
                    frontier_phi_67_pred_3 = _2646;
                    frontier_phi_67_pred_4 = _2645;
                    frontier_phi_67_pred_5 = _2644;
                }
                _2347 = frontier_phi_67_pred;
                _2357 = frontier_phi_67_pred_1;
                _2355 = frontier_phi_67_pred_2;
                _2353 = frontier_phi_67_pred_3;
                _2351 = frontier_phi_67_pred_4;
                _2349 = frontier_phi_67_pred_5;
                uint _2534 = _2533 + 1u;
                if (_2534 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2527 = _2347;
                    _2528 = _2349;
                    _2529 = _2351;
                    _2530 = _2353;
                    _2531 = _2355;
                    _2532 = _2357;
                    _2533 = _2534;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2346 = _2347;
            _2348 = _2349;
            _2350 = _2351;
            _2352 = _2353;
            _2354 = _2355;
            _2356 = _2357;
        }
        uvec4 _2360 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2361 = _2360.z;
        uint _2363 = (_2361 >> 8u) & 15u;
        float _2495;
        float _2497;
        float _2499;
        float _2501;
        float _2503;
        float _2505;
        if (((4294967295u << _2363) & _2320) == 0u)
        {
            _2495 = _2346;
            _2497 = _2348;
            _2499 = _2350;
            _2501 = _2352;
            _2503 = _2354;
            _2505 = _2356;
        }
        else
        {
            float _2520 = inversesqrt(dot(vec3(_2274, _2275, _2276), vec3(_2274, _2275, _2276)));
            float _2521 = _2520 * _2274;
            float _2522 = _2520 * _2275;
            float _2523 = _2520 * _2276;
            float frontier_phi_61_62_ladder;
            float frontier_phi_61_62_ladder_1;
            float frontier_phi_61_62_ladder_2;
            float frontier_phi_61_62_ladder_3;
            float frontier_phi_61_62_ladder_4;
            float frontier_phi_61_62_ladder_5;
            if (_2363 < ((_2361 >> 12u) & 15u))
            {
                float _2496;
                float _2498;
                float _2500;
                float _2502;
                float _2504;
                float _2506;
                float _2711 = _2346;
                float _2712 = _2348;
                float _2713 = _2350;
                float _2714 = _2352;
                float _2715 = _2354;
                float _2716 = _2356;
                uint _2717 = _2363;
                uint _2726;
                bool _2727;
                for (;;)
                {
                    _2726 = texelFetch(g_lightClassification, int((((_2314 << 5u) + (_2300 << 9u)) + (_2717 << 2u)) >> 2u)).x;
                    _2727 = _2726 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_2727)
                    {
                        frontier_phi_79_pred = _2716;
                        frontier_phi_79_pred_1 = _2715;
                        frontier_phi_79_pred_2 = _2714;
                        frontier_phi_79_pred_3 = _2713;
                        frontier_phi_79_pred_4 = _2712;
                        frontier_phi_79_pred_5 = _2711;
                    }
                    else
                    {
                        float _3013;
                        float _3014;
                        float _3015;
                        float _3016;
                        float _3017;
                        float _3018;
                        float _3366;
                        float _3367;
                        float _3368;
                        float _3369;
                        float _3370;
                        float _3371;
                        float _3035 = _2711;
                        float _3036 = _2712;
                        float _3037 = _2713;
                        float _3038 = _2714;
                        float _3039 = _2715;
                        float _3040 = _2716;
                        uint _3041 = _2726;
                        uint _3042;
                        vec4 _3067;
                        float _3068;
                        vec4 _3083;
                        float _3084;
                        float _3085;
                        float _3086;
                        vec3 _3098;
                        vec2 _3107;
                        vec4 _3123;
                        vec4 _3139;
                        float _3186;
                        bool _3187;
                        for (;;)
                        {
                            uint _3052 = ((_2717 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3041));
                            _3042 = (_3041 + 4294967295u) & _3041;
                            uint _3054 = _3052 * 40u;
                            _3067 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3054)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3054 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3054 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3054 + 3u)).x));
                            _3068 = _3067.w;
                            uint _3070 = (_3052 * 40u) + 4u;
                            _3083 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3070)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3070 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3070 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3070 + 3u)).x));
                            _3084 = _3083.x;
                            _3085 = _3083.y;
                            _3086 = _3083.z;
                            uint _3088 = (_3052 * 40u) + 8u;
                            _3098 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3088)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3088 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3088 + 2u)).x));
                            uint _3100 = (_3052 * 40u) + 12u;
                            _3107 = uintBitsToFloat(uvec2(texelFetch(g_SpotLightRenderingBuffer, int(_3100)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3100 + 1u)).x));
                            uint _3110 = (_3052 * 40u) + 16u;
                            _3123 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3110)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3110 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3110 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3110 + 3u)).x));
                            uint _3126 = (_3052 * 40u) + 20u;
                            _3139 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3126)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3126 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3126 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3126 + 3u)).x));
                            uint _3142 = (_3052 * 40u) + 24u;
                            vec4 _3155 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3142)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3142 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3142 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3142 + 3u)).x));
                            uint _3161 = (_3052 * 40u) + 28u;
                            vec4 _3174 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3161)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3161 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3161 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3161 + 3u)).x));
                            _3186 = fma(_2276, _3174.z, fma(_2275, _3174.y, _3174.x * _2274)) + _3174.w;
                            _3187 = !((fma(_2276, _3155.z, fma(_2275, _3155.y, _3155.x * _2274)) + _3155.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3187)
                            {
                                float _3213 = _3067.x - _2274;
                                float _3214 = _3067.y - _2275;
                                float _3215 = _3067.z - _2276;
                                float _3216 = dot(vec3(_3213, _3214, _3215), vec3(_3213, _3214, _3215));
                                float _3219 = inversesqrt(_3216);
                                float _3220 = _3219 * _3213;
                                float _3221 = _3219 * _3214;
                                float _3222 = _3219 * _3215;
                                float _3226 = 1.0 - (_3216 / (_3068 * _3068));
                                float _4403 = isnan(0.0) ? _3226 : (isnan(_3226) ? 0.0 : max(_3226, 0.0));
                                float _3227 = isnan(1.0) ? _4403 : (isnan(_4403) ? 1.0 : min(_4403, 1.0));
                                float _3231 = sqrt(_3216) * _3083.w;
                                float _3233 = 1.39999997615814208984375 / (_3231 + 1.39999997615814208984375);
                                float _3234 = _3233 * _3233;
                                float _3235 = 1.0 - _3234;
                                float _3237 = (_3235 * _3235) * _315;
                                float _3240 = ((_3235 * dot(vec3(_3220, _3221, _3222), vec3(_436, _439, _442))) + _3234) + _3237;
                                float _3245 = _3231 * _3231;
                                float _3250 = (fma(_2276, _3123.z, fma(_2275, _3123.y, _3123.x * _2274)) + _3123.w) / _3186;
                                float _3251 = (fma(_2276, _3139.z, fma(_2275, _3139.y, _3139.x * _2274)) + _3139.w) / _3186;
                                float _3255 = 1.0 - dot(vec2(_3250, _3251), vec2(_3250, _3251));
                                float _4419 = isnan(0.0) ? _3255 : (isnan(_3255) ? 0.0 : max(_3255, 0.0));
                                float _3256 = isnan(1.0) ? _4419 : (isnan(_4419) ? 1.0 : min(_4419, 1.0));
                                float _3257 = _3256 * (((isnan(0.0) ? _3240 : (isnan(_3240) ? 0.0 : max(_3240, 0.0))) * _3227) / (((_3237 * 2.0) + 1.0) * ((_3245 * 0.699999988079071044921875) + 1.0)));
                                float _3258 = (-0.0) - _2521;
                                float _3259 = (-0.0) - _2522;
                                float _3260 = (-0.0) - _2523;
                                float _3261 = dot(vec3(_3220, _3221, _3222), vec3(_2521, _2522, _2523));
                                float _4430 = isnan(0.0) ? _3261 : (isnan(_3261) ? 0.0 : max(_3261, 0.0));
                                float _3268 = dot(vec3(_3258, _3259, _3260), vec3(_436, _439, _442)) + 1.0;
                                float _3270 = (isnan(0.0) ? _3268 : (isnan(_3268) ? 0.0 : max(_3268, 0.0))) * 0.5;
                                float _3277 = ((_3270 * _3270) * _3107.x) * exp2((_3107.y * 32.0) * log2(isnan(1.0) ? _4430 : (isnan(_4430) ? 1.0 : min(_4430, 1.0))));
                                float _3279 = _315 / (_315 + 1.0);
                                float _3300 = exp2(log2(1.0 / ((_3245 * 3.5) + 5.0)) * 0.25);
                                float _3301 = 1.0 - _512;
                                float _3308 = sqrt(1.0 - ((1.0 - (_3301 * _3301)) * (1.0 - (_3300 * _3300))));
                                float _3309 = _3308 * _3308;
                                float _3310 = _3309 * _3309;
                                float _3311 = _3220 - _2521;
                                float _3312 = _3221 - _2522;
                                float _3313 = _3222 - _2523;
                                float _3317 = inversesqrt(dot(vec3(_3311, _3312, _3313), vec3(_3311, _3312, _3313)));
                                float _3321 = dot(vec3(_436, _439, _442), vec3(_3258, _3259, _3260));
                                float _4446 = isnan(0.0) ? _3321 : (isnan(_3321) ? 0.0 : max(_3321, 0.0));
                                float _3324 = isnan(1.0) ? _4446 : (isnan(_4446) ? 1.0 : min(_4446, 1.0));
                                float _3325 = dot(vec3(_436, _439, _442), vec3(_3317 * _3311, _3317 * _3312, _3317 * _3313));
                                float _4457 = isnan(0.0) ? _3325 : (isnan(_3325) ? 0.0 : max(_3325, 0.0));
                                float _3328 = isnan(1.0) ? _4457 : (isnan(_4457) ? 1.0 : min(_4457, 1.0));
                                float _3332 = ((_3328 * _3328) * (_3310 + (-1.0))) + 1.0;
                                float _3333 = _3233 * _3309;
                                float _3334 = _3333 * _3333;
                                float _3340 = ((1.0 - _3334) * dot(vec3(_436, _439, _442), vec3(_3220, _3221, _3222))) + _3334;
                                float _4468 = isnan(0.0) ? _3340 : (isnan(_3340) ? 0.0 : max(_3340, 0.0));
                                float _3341 = isnan(1.0) ? _4468 : (isnan(_4468) ? 1.0 : min(_4468, 1.0));
                                float _3342 = 1.0 - _3309;
                                float _3352 = (0.5 / (((_3341 * ((_3324 * _3342) + _3309)) + 9.9999999392252902907785028219223e-09) + (((_3341 * _3342) + _3309) * _3324))) * _3341;
                                float _4479 = isnan(0.0) ? _3352 : (isnan(_3352) ? 0.0 : max(_3352, 0.0));
                                float _3362 = (_3256 * _3227) * (((_3310 * 3.1415927410125732421875) * (isnan(1.0) ? _4479 : (isnan(_4479) ? 1.0 : min(_4479, 1.0)))) / ((_3332 * _3332) * ((_3245 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = ((((_3086 * 0.3183098733425140380859375) * _3279) * _3277) + _3086) * _3257;
                                frontier_phi_88_pred_1 = ((((_3084 * 0.3183098733425140380859375) * _3279) * _3277) + _3084) * _3257;
                                frontier_phi_88_pred_2 = _3362 * _3098.z;
                                frontier_phi_88_pred_3 = _3362 * _3098.y;
                                frontier_phi_88_pred_4 = _3362 * _3098.x;
                                frontier_phi_88_pred_5 = ((((_3085 * 0.3183098733425140380859375) * _3279) * _3277) + _3085) * _3257;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3371 = frontier_phi_88_pred;
                            _3369 = frontier_phi_88_pred_1;
                            _3368 = frontier_phi_88_pred_2;
                            _3367 = frontier_phi_88_pred_3;
                            _3366 = frontier_phi_88_pred_4;
                            _3370 = frontier_phi_88_pred_5;
                            _3016 = _3369 + _3038;
                            _3017 = _3370 + _3039;
                            _3018 = _3371 + _3040;
                            _3013 = _3366 + _3035;
                            _3014 = _3367 + _3036;
                            _3015 = _3368 + _3037;
                            if (_3042 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3035 = _3013;
                                _3036 = _3014;
                                _3037 = _3015;
                                _3038 = _3016;
                                _3039 = _3017;
                                _3040 = _3018;
                                _3041 = _3042;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _3018;
                        frontier_phi_79_pred_1 = _3017;
                        frontier_phi_79_pred_2 = _3016;
                        frontier_phi_79_pred_3 = _3015;
                        frontier_phi_79_pred_4 = _3014;
                        frontier_phi_79_pred_5 = _3013;
                    }
                    _2506 = frontier_phi_79_pred;
                    _2504 = frontier_phi_79_pred_1;
                    _2502 = frontier_phi_79_pred_2;
                    _2500 = frontier_phi_79_pred_3;
                    _2498 = frontier_phi_79_pred_4;
                    _2496 = frontier_phi_79_pred_5;
                    uint _2718 = _2717 + 1u;
                    if (_2718 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2711 = _2496;
                        _2712 = _2498;
                        _2713 = _2500;
                        _2714 = _2502;
                        _2715 = _2504;
                        _2716 = _2506;
                        _2717 = _2718;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_61_62_ladder = _2496;
                frontier_phi_61_62_ladder_1 = _2506;
                frontier_phi_61_62_ladder_2 = _2504;
                frontier_phi_61_62_ladder_3 = _2502;
                frontier_phi_61_62_ladder_4 = _2500;
                frontier_phi_61_62_ladder_5 = _2498;
            }
            else
            {
                frontier_phi_61_62_ladder = _2346;
                frontier_phi_61_62_ladder_1 = _2356;
                frontier_phi_61_62_ladder_2 = _2354;
                frontier_phi_61_62_ladder_3 = _2352;
                frontier_phi_61_62_ladder_4 = _2350;
                frontier_phi_61_62_ladder_5 = _2348;
            }
            _2495 = frontier_phi_61_62_ladder;
            _2497 = frontier_phi_61_62_ladder_5;
            _2499 = frontier_phi_61_62_ladder_4;
            _2501 = frontier_phi_61_62_ladder_3;
            _2503 = frontier_phi_61_62_ladder_2;
            _2505 = frontier_phi_61_62_ladder_1;
        }
        float _2510 = isnan(1.0) ? _496 : (isnan(_496) ? 1.0 : min(_496, 1.0));
        _2333 = (_2510 * _2501) + _1792;
        _2335 = (_2510 * _2503) + _1794;
        _2337 = (_2510 * _2505) + _1796;
        _2339 = ((_2495 * _481) * _2510) + _2140;
        _2341 = ((_2497 * _483) * _2510) + _2142;
        _2343 = ((_2499 * _484) * _2510) + _2144;
    }
    else
    {
        _2333 = _1792;
        _2335 = _1794;
        _2337 = _1796;
        _2339 = _2140;
        _2341 = _2142;
        _2343 = _2144;
    }
    float _2432;
    float _2433;
    float _2434;
    if (_315 > 0.0)
    {
        uint _2367 = _1575 + 4u;
        float _2373 = (-0.0) - _394;
        float _2375 = (-0.0) - _395;
        float _2376 = (-0.0) - _396;
        float _2377 = dot(vec3(cbLight._m0[_1575].xyz), vec3(_2373, _2375, _2376));
        float _4495 = isnan(0.0) ? _2377 : (isnan(_2377) ? 0.0 : max(_2377, 0.0));
        float _2381 = _507 + 1.0;
        float _2383 = (isnan(0.0) ? _2381 : (isnan(_2381) ? 0.0 : max(_2381, 0.0))) * 0.5;
        float _2388 = _2383 * _2383;
        float _2389 = _2388 * exp2(log2(isnan(1.0) ? _4495 : (isnan(_4495) ? 1.0 : min(_4495, 1.0))) * 32.0);
        float _2391 = _315 / (_315 + 1.0);
        float _2392 = isnan(_1588) ? 1.0 : (isnan(1.0) ? _1588 : min(1.0, _1588));
        uint _2402 = _1575 + 5u;
        float _2408 = dot(vec3(cbLight._m0[_1889].xyz), vec3(_2373, _2375, _2376));
        float _4516 = isnan(0.0) ? _2408 : (isnan(_2408) ? 0.0 : max(_2408, 0.0));
        float _2415 = _2388 * exp2(log2(isnan(1.0) ? _4516 : (isnan(_4516) ? 1.0 : min(_4516, 1.0))) * 32.0);
        float _2416 = isnan(_1589) ? 1.0 : (isnan(1.0) ? _1589 : min(1.0, _1589));
        _2432 = ((((_2415 * cbLight._m0[_2402].x) * _2391) * _2416) + (((_2389 * cbLight._m0[_2367].x) * _2391) * _2392)) * 0.3183098733425140380859375;
        _2433 = ((((_2415 * cbLight._m0[_2402].y) * _2391) * _2416) + (((_2389 * cbLight._m0[_2367].y) * _2391) * _2392)) * 0.3183098733425140380859375;
        _2434 = ((((_2415 * cbLight._m0[_2402].z) * _2391) * _2416) + (((_2389 * cbLight._m0[_2367].z) * _2391) * _2392)) * 0.3183098733425140380859375;
    }
    else
    {
        _2432 = 0.0;
        _2433 = 0.0;
        _2434 = 0.0;
    }
    float _4532 = isnan(0.0) ? _471 : (isnan(_471) ? 0.0 : max(_471, 0.0));
    float _4543 = isnan(0.0) ? _472 : (isnan(_472) ? 0.0 : max(_472, 0.0));
    float _4554 = isnan(0.0) ? _473 : (isnan(_473) ? 0.0 : max(_473, 0.0));
    float _4565 = isnan(0.0) ? _313 : (isnan(_313) ? 0.0 : max(_313, 0.0));
    float _2454 = ((isnan(1.0) ? _4532 : (isnan(_4532) ? 1.0 : min(_4532, 1.0))) * ((_2333 + ((isnan(0.0) ? _1259 : (isnan(_1259) ? 0.0 : max(_1259, 0.0))) * _496)) + _2432)) + ((_2339 + ((isnan(0.0) ? _1557 : (isnan(_1557) ? 0.0 : max(_1557, 0.0))) * _1338)) * cbPerFrame._m0[3u].x);
    float _2455 = ((isnan(1.0) ? _4543 : (isnan(_4543) ? 1.0 : min(_4543, 1.0))) * ((_2335 + ((isnan(0.0) ? _1262 : (isnan(_1262) ? 0.0 : max(_1262, 0.0))) * _496)) + _2433)) + ((_2341 + ((isnan(0.0) ? _1560 : (isnan(_1560) ? 0.0 : max(_1560, 0.0))) * _1338)) * cbPerFrame._m0[3u].x);
    float _2456 = ((isnan(1.0) ? _4554 : (isnan(_4554) ? 1.0 : min(_4554, 1.0))) * ((_2337 + ((isnan(0.0) ? _1265 : (isnan(_1265) ? 0.0 : max(_1265, 0.0))) * _496)) + _2434)) + ((_2343 + ((isnan(0.0) ? _1563 : (isnan(_1563) ? 0.0 : max(_1563, 0.0))) * _1338)) * cbPerFrame._m0[3u].x);
    float _2461 = cbInstanceData._m0[_455 + 6u].w * (isnan(1.0) ? _4565 : (isnan(_4565) ? 1.0 : min(_4565, 1.0)));
    float _2466 = _415 / cbSceneParam._m0[86u].x;
    float _2467 = _416 / cbSceneParam._m0[86u].y;
    vec4 _2481 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2466, _2467, (log2((isnan(cbSceneParam._m0[77u].w) ? _335 : (isnan(_335) ? cbSceneParam._m0[77u].w : min(_335, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2483 = _2481.x;
    float _2484 = _2481.y;
    float _2485 = _2481.z;
    float _2486 = _2481.w;
    float _2585;
    float _2587;
    float _2589;
    float _2591;
    if (_335 > cbSceneParam._m0[78u].w)
    {
        float _2548 = isnan(_335) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _335 : min(cbSceneParam._m0[80u].w, _335));
        float _2549 = _2548 / _335;
        float _2560 = _2549 * _387;
        float _2561 = _388 * _2549;
        float _2562 = (-0.0) - _2561;
        float _2563 = _2549 * _389;
        float _2565 = (cbSceneParam._m0[77u].w * _2562) / _2548;
        float _2566 = _2565 + cbSceneParam._m0[79u].w;
        float _2567 = cbSceneParam._m0[79u].w - _2561;
        float _2573 = sqrt(((_2560 * _2560) + (_2561 * _2561)) + (_2563 * _2563));
        float _2576 = (1.0 - (cbSceneParam._m0[77u].w / _2548)) * _2573;
        float _2581 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2583 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2970;
        if (abs((_2562 - _2565) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2970 = ((((_2566 > 0.0) ? exp2(_2581 * _2566) : (2.0 - exp2(_2583 * _2566))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2576;
        }
        else
        {
            float _2668 = 1.0 / cbSceneParam._m0[80u].x;
            float _2669 = isnan(_2567) ? _2566 : (isnan(_2566) ? _2567 : max(_2566, _2567));
            float _2670 = isnan(_2567) ? _2566 : (isnan(_2566) ? _2567 : min(_2566, _2567));
            float _2679 = isnan(0.0) ? _2669 : (isnan(_2669) ? 0.0 : min(_2669, 0.0));
            float _2680 = isnan(0.0) ? _2670 : (isnan(_2670) ? 0.0 : min(_2670, 0.0));
            _2970 = ((abs(_2573 / _2562) * cbSceneParam._m0[80u].y) * ((((_2679 - _2680) * 2.0) - ((exp2(_2581 * (isnan(0.0) ? _2669 : (isnan(_2669) ? 0.0 : max(_2669, 0.0)))) - exp2(_2581 * (isnan(0.0) ? _2670 : (isnan(_2670) ? 0.0 : max(_2670, 0.0))))) * _2668)) - ((exp2(_2583 * _2679) - exp2(_2583 * _2680)) * _2668))) + (_2576 * cbSceneParam._m0[80u].z);
        }
        vec4 _2972 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2466, _2467, 1.0), 0.0);
        float _2981 = exp2((_2970 * (-1.44269502162933349609375)) * (1.0 - _2972.w));
        float _2982 = log2(_2981);
        float _2998 = log2(_2486);
        _2585 = (exp2(_2998 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2982 * cbSceneParam._m0[78u].x)) * _2972.x) / cbSceneParam._m0[78u].x)) + _2483;
        _2587 = (exp2(_2998 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2982 * cbSceneParam._m0[78u].y)) * _2972.y) / cbSceneParam._m0[78u].y)) + _2484;
        _2589 = (exp2(_2998 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2982 * cbSceneParam._m0[78u].z)) * _2972.z) / cbSceneParam._m0[78u].z)) + _2485;
        _2591 = _2981 * _2486;
    }
    else
    {
        _2585 = _2483;
        _2587 = _2484;
        _2589 = _2485;
        _2591 = _2486;
    }
    bool _3008;
    vec4 _2601;
    vec4 _2623;
    float _2625;
    float _2629;
    float _2630;
    float _2631;
    float _2632;
    bool _2642;
    for (;;)
    {
        _2601 = cbMatDynParam._m0[0u];
        float _2603 = roundEven(_2601.y);
        bool _2604 = _2603 == 3.0;
        float _2605 = log2(_2591);
        float _2612 = exp2(_2605 * cbSceneParam._m0[78u].x) * _2454;
        float _2613 = exp2(_2605 * cbSceneParam._m0[78u].y) * _2455;
        float _2614 = exp2(_2605 * cbSceneParam._m0[78u].z) * _2456;
        float _2621 = _403 + (-0.5);
        _2623 = cbMtdParam._m0[1u];
        _2625 = _2623.y * _2621;
        float _2628 = (_2603 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2629 = _2628 * (_2604 ? _2612 : (_2612 + (cbSceneParam._m0[72u].w * _2585)));
        _2630 = _2628 * (_2604 ? _2613 : (_2613 + (cbSceneParam._m0[72u].w * _2587)));
        _2631 = _2628 * (_2604 ? _2614 : (_2614 + (cbSceneParam._m0[72u].w * _2589)));
        _2632 = _2621 * 0.999000012874603271484375;
        _2642 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2642)
        {
            if ((cbInstanceData._m0[_455 + 7u].x + _2632) < 0.5)
            {
                _3008 = true;
                break;
            }
        }
        uint _2703 = _457 + uint(_2601.w);
        if ((cbInstanceData._m0[_2703].w < 1.0) && ((cbInstanceData._m0[_2703].w + _2632) < 0.5))
        {
            _3008 = true;
            break;
        }
        if ((_2625 + _231) < _2623.x)
        {
            _3008 = true;
            break;
        }
        _3008 = false;
        break;
    }
    float _3026;
    if (_3008)
    {
        discard_state = true;
        _3026 = 0.0;
    }
    else
    {
        _3026 = _2461;
    }
    SV_Target.x = _2629;
    SV_Target.y = _2630;
    SV_Target.z = _2631;
    SV_Target.w = _3026;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2461;
    discard_exit();
}


