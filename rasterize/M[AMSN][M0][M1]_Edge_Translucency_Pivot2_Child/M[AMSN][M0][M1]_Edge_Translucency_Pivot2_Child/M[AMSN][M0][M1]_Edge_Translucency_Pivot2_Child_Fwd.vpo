#version 460

out float gl_ClipDistance[2];

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[12];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 5, std140) uniform cbObjMatrixUBO
{
    vec4 _m0[6];
} cbObjMatrix;

layout(set = 0, binding = 10, std140) uniform cbInstanceIdxParamUBO
{
    vec4 _m0[1];
} cbInstanceIdxParam;

layout(set = 0, binding = 11, std140) uniform cbTexScrollUBO
{
    vec4 _m0[4];
} cbTexScroll;

layout(set = 0, binding = 26) uniform usamplerBuffer g_forceParam;
layout(set = 0, binding = 25) uniform usamplerBuffer g_InstanceIndexBuffer;

layout(location = 0) in vec3 POSITION;
layout(location = 1) in uvec4 NORMAL;
layout(location = 2) in uvec4 TANGENT;
layout(location = 3) in vec4 COLOR_1;
layout(location = 4) in ivec2 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_1;
layout(location = 1) out vec4 POSITION_1;
layout(location = 2) out vec4 NORMAL_1;
layout(location = 3) out vec4 TANGENT_1;
layout(location = 4) out float TEXCOORD_2;
layout(location = 4, component = 1) out float TEXCOORD_1_1;
layout(location = 5) out vec4 TEXCOORD_3;

uint _762;
uint _885;

void main()
{
    uint _81 = uint(gl_InstanceIndex) - uint(gl_BaseInstance);
    gl_Position.x = 0.0;
    gl_Position.y = 0.0;
    gl_Position.z = 0.0;
    gl_Position.w = 0.0;
    POSITION_1.x = 0.0;
    POSITION_1.y = 0.0;
    POSITION_1.z = 0.0;
    POSITION_1.w = 0.0;
    NORMAL_1.x = 0.0;
    NORMAL_1.y = 0.0;
    NORMAL_1.z = 0.0;
    NORMAL_1.w = 0.0;
    TANGENT_1.x = 0.0;
    TANGENT_1.y = 0.0;
    TANGENT_1.z = 0.0;
    TANGENT_1.w = 0.0;
    TEXCOORD_2 = 0.0;
    TEXCOORD_1_1 = 0.0;
    TEXCOORD_3.x = 0.0;
    TEXCOORD_3.y = 0.0;
    TEXCOORD_3.z = 0.0;
    TEXCOORD_3.w = 0.0;
    gl_ClipDistance[0u] = 0.0;
    gl_ClipDistance[1u] = 0.0;
    float _172 = (float(NORMAL.x) + (-127.0)) * 0.0078740157186985015869140625;
    float _174 = (float(NORMAL.y) + (-127.0)) * 0.0078740157186985015869140625;
    float _175 = (float(NORMAL.z) + (-127.0)) * 0.0078740157186985015869140625;
    float _185 = (float(TANGENT.x) + (-127.0)) * 0.0078740157186985015869140625;
    float _186 = (float(TANGENT.y) + (-127.0)) * 0.0078740157186985015869140625;
    float _187 = (float(TANGENT.z) + (-127.0)) * 0.0078740157186985015869140625;
    uint _189 = _81 * 13u;
    uvec4 _195 = floatBitsToUint(cbInstanceData._m0[_189 + 7u]);
    uint _198 = min(_195.y, 8u);
    bool _201 = _198 == 0u;
    precise float _202 = POSITION.x + 0.0;
    precise float _203 = POSITION.y + 0.0;
    precise float _204 = POSITION.z + 0.0;
    uint _209 = floatBitsToUint(cbInstanceIdxParam._m0[0u]).x + _81;
    uvec4 _211 = texelFetch(g_InstanceIndexBuffer, int(_209));
    uint _212 = _211.x;
    uint _214 = _212 * 13u;
    uint _221 = (floatBitsToUint(cbInstanceData._m0[_214 + 4u]).x + uint(float(NORMAL.w))) * 3u;
    uint _228 = _221 + 1u;
    uint _235 = _221 + 2u;
    precise float _242 = _202 * cbObjMatrix._m0[_221].x;
    precise float _243 = _203 * cbObjMatrix._m0[_221].y;
    precise float _244 = _243 + _242;
    precise float _245 = _204 * cbObjMatrix._m0[_221].z;
    precise float _246 = _245 + _244;
    precise float _247 = 1.0 * cbObjMatrix._m0[_221].w;
    precise float _249 = _247 + _246;
    precise float _250 = _202 * cbObjMatrix._m0[_228].x;
    precise float _251 = _203 * cbObjMatrix._m0[_228].y;
    precise float _252 = _251 + _250;
    precise float _253 = _204 * cbObjMatrix._m0[_228].z;
    precise float _254 = _253 + _252;
    precise float _255 = 1.0 * cbObjMatrix._m0[_228].w;
    precise float _256 = _255 + _254;
    precise float _257 = _202 * cbObjMatrix._m0[_235].x;
    precise float _258 = _203 * cbObjMatrix._m0[_235].y;
    precise float _259 = _258 + _257;
    precise float _260 = _204 * cbObjMatrix._m0[_235].z;
    precise float _261 = _260 + _259;
    precise float _262 = 1.0 * cbObjMatrix._m0[_235].w;
    precise float _263 = _262 + _261;
    uint _289 = _189 + 1u;
    uint _296 = _189 + 2u;
    precise float _303 = TEXCOORD_1.x * cbInstanceData._m0[_189].x;
    precise float _304 = TEXCOORD_1.y * cbInstanceData._m0[_189].y;
    precise float _305 = _304 + _303;
    precise float _306 = TEXCOORD_1.z * cbInstanceData._m0[_189].z;
    precise float _307 = _306 + _305;
    precise float _308 = 1.0 * cbInstanceData._m0[_189].w;
    precise float _309 = _308 + _307;
    precise float _310 = TEXCOORD_1.x * cbInstanceData._m0[_289].x;
    precise float _311 = TEXCOORD_1.y * cbInstanceData._m0[_289].y;
    precise float _312 = _311 + _310;
    precise float _313 = TEXCOORD_1.z * cbInstanceData._m0[_289].z;
    precise float _314 = _313 + _312;
    precise float _315 = 1.0 * cbInstanceData._m0[_289].w;
    precise float _316 = _315 + _314;
    precise float _317 = TEXCOORD_1.x * cbInstanceData._m0[_296].x;
    precise float _318 = TEXCOORD_1.y * cbInstanceData._m0[_296].y;
    precise float _319 = _318 + _317;
    precise float _320 = TEXCOORD_1.z * cbInstanceData._m0[_296].z;
    precise float _321 = _320 + _319;
    precise float _322 = 1.0 * cbInstanceData._m0[_296].w;
    precise float _323 = _322 + _321;
    precise float _329 = _249 - _309;
    precise float _330 = _256 - _316;
    precise float _331 = _263 - _323;
    precise float _332 = _329 * _329;
    precise float _333 = _330 * _330;
    precise float _334 = _332 + _333;
    precise float _335 = _331 * _331;
    precise float _336 = _334 + _335;
    precise float _338 = cbMtdParam._m0[10u].z * sqrt(_336);
    precise float _343 = cbInstanceData._m0[_189].x * 0.0;
    precise float _344 = 0.0 * cbInstanceData._m0[_189].y;
    precise float _345 = _344 + _343;
    precise float _346 = 0.0 * cbInstanceData._m0[_189].z;
    precise float _347 = _346 + _345;
    precise float _348 = 1.0 * cbInstanceData._m0[_189].w;
    precise float _349 = _348 + _347;
    precise float _350 = cbInstanceData._m0[_289].x * 0.0;
    precise float _351 = 0.0 * cbInstanceData._m0[_289].y;
    precise float _352 = _351 + _350;
    precise float _353 = 0.0 * cbInstanceData._m0[_289].z;
    precise float _354 = _353 + _352;
    precise float _355 = 1.0 * cbInstanceData._m0[_289].w;
    precise float _356 = _355 + _354;
    precise float _357 = cbInstanceData._m0[_296].x * 0.0;
    precise float _358 = 0.0 * cbInstanceData._m0[_296].y;
    precise float _359 = _358 + _357;
    precise float _360 = 0.0 * cbInstanceData._m0[_296].z;
    precise float _361 = _360 + _359;
    precise float _362 = 1.0 * cbInstanceData._m0[_296].w;
    precise float _363 = _362 + _361;
    precise float _366 = _249 * _249;
    precise float _367 = _256 * _256;
    precise float _368 = _366 + _367;
    precise float _369 = _263 * _263;
    precise float _370 = _368 + _369;
    precise float _372 = cbMtdParam._m0[11u].x * sqrt(_370);
    precise float _373 = cbPerFrame._m0[22u].x + _372;
    uint _374 = _195.w;
    float _375;
    float _377;
    float _379;
    if (_201)
    {
        _375 = 0.0;
        _377 = 0.0;
        _379 = 0.0;
    }
    else
    {
        uint _499 = _195.z;
        precise float _376;
        precise float _378;
        precise float _380;
        float _956;
        float _958;
        float _960;
        float _694 = 0.0;
        float _695 = 0.0;
        float _696 = 0.0;
        uint _697 = _499;
        uint _699 = 0u;
        float _735;
        float _754;
        vec4 _767;
        float _768;
        float _769;
        float _783;
        float _784;
        float _785;
        float _802;
        float _803;
        float _804;
        float _805;
        bool _806;
        bool _807;
        bool _808;
        precise float _809;
        precise float _810;
        precise float _811;
        float _812;
        float _813;
        float _814;
        precise float _815;
        bool _818;
        for (;;)
        {
            uint _701 = _697 & 255u;
            uint _703 = _701 * 24u;
            uvec3 _713 = uvec3(texelFetch(g_forceParam, int(_703)).x, texelFetch(g_forceParam, int(_703 + 1u)).x, texelFetch(g_forceParam, int(_703 + 2u)).x);
            uint _718 = (_701 * 24u) + 4u;
            vec4 _731 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_718)).x, texelFetch(g_forceParam, int(_718 + 1u)).x, texelFetch(g_forceParam, int(_718 + 2u)).x, texelFetch(g_forceParam, int(_718 + 3u)).x));
            _735 = _731.w;
            uint _737 = (_701 * 24u) + 8u;
            vec4 _750 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_737)).x, texelFetch(g_forceParam, int(_737 + 1u)).x, texelFetch(g_forceParam, int(_737 + 2u)).x, texelFetch(g_forceParam, int(_737 + 3u)).x));
            _754 = _750.w;
            uint _756 = (_701 * 24u) + 12u;
            _767 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_756)).x, texelFetch(g_forceParam, int(_756 + 1u)).x, _762, texelFetch(g_forceParam, int(_756 + 3u)).x));
            _768 = _767.x;
            _769 = _767.w;
            uint _772 = (_701 * 24u) + 16u;
            vec3 _782 = uintBitsToFloat(uvec3(texelFetch(g_forceParam, int(_772)).x, texelFetch(g_forceParam, int(_772 + 1u)).x, texelFetch(g_forceParam, int(_772 + 2u)).x));
            _783 = _782.x;
            _784 = _782.y;
            _785 = _782.z;
            uint _788 = (_701 * 24u) + 20u;
            vec4 _801 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_788)).x, texelFetch(g_forceParam, int(_788 + 1u)).x, texelFetch(g_forceParam, int(_788 + 2u)).x, texelFetch(g_forceParam, int(_788 + 3u)).x));
            _802 = _801.x;
            _803 = _801.y;
            _804 = _801.z;
            _805 = _801.w;
            _806 = _713.x == 1u;
            _807 = _713.y == 1u;
            _808 = _713.z == 1u;
            _809 = _349 - _731.x;
            _810 = _356 - _731.y;
            _811 = _363 - _731.z;
            _812 = _806 ? _750.x : _809;
            _813 = _806 ? _750.y : _810;
            _814 = _806 ? _750.z : _811;
            _815 = dot(vec3(_812, _813, _814), vec3(_812, _813, _814));
            _818 = _815 > 0.0;
            float frontier_phi_8_pred;
            float frontier_phi_8_pred_1;
            float frontier_phi_8_pred_2;
            if (_818)
            {
                precise float _941 = _809 * _809;
                precise float _942 = _810 * _810;
                precise float _943 = _941 + _942;
                precise float _944 = _811 * _811;
                precise float _945 = _944 + _943;
                float _946 = sqrt(_945);
                float _947 = inversesqrt(_815);
                precise float _948 = _812 * _947;
                precise float _949 = _813 * _947;
                precise float _950 = _814 * _947;
                precise float _953 = _946 / (isnan(0.001000000047497451305389404296875) ? _767.y : (isnan(_767.y) ? 0.001000000047497451305389404296875 : max(_767.y, 0.001000000047497451305389404296875)));
                precise float _954 = 1.0 - _953;
                float _1280 = isnan(0.0) ? _954 : (isnan(_954) ? 0.0 : max(_954, 0.0));
                float _955 = isnan(1.0) ? _1280 : (isnan(_1280) ? 1.0 : min(_1280, 1.0));
                float _1005;
                if (_808)
                {
                    float _992 = inversesqrt(dot(vec3(_809, _810, _811), vec3(_809, _810, _811)));
                    precise float _993 = _809 * _992;
                    precise float _994 = _810 * _992;
                    precise float _995 = _811 * _992;
                    precise float _999 = dot(vec3(_948, _949, _950), vec3(_993, _994, _995)) * 0.800000011920928955078125;
                    precise float _1001 = _999 + 0.20000000298023223876953125;
                    float _1291 = isnan(0.0) ? _1001 : (isnan(_1001) ? 0.0 : max(_1001, 0.0));
                    precise float _1004 = _955 * (isnan(1.0) ? _1291 : (isnan(_1291) ? 1.0 : min(_1291, 1.0)));
                    _1005 = _1004;
                }
                else
                {
                    _1005 = _955;
                }
                float frontier_phi_8_pred_12_ladder;
                float frontier_phi_8_pred_12_ladder_1;
                float frontier_phi_8_pred_12_ladder_2;
                if (_1005 > 0.0)
                {
                    bool _1024 = _806 && (!_808);
                    precise float _1026 = _946 * (-4.0);
                    precise float _1030 = 6.283184051513671875 / (isnan(0.001000000047497451305389404296875) ? _768 : (isnan(_768) ? 0.001000000047497451305389404296875 : max(_768, 0.001000000047497451305389404296875)));
                    precise float _1032 = dot(vec2(_948, _950), vec2(_809, _811));
                    precise float _1036 = _1030 * _1032;
                    precise float _1037 = float(_1024) * _1036;
                    precise float _1038 = _373 * _1030;
                    precise float _1039 = _1038 - _1037;
                    precise float _1040 = (_1024 ? 0.0 : _1026) + _1039;
                    precise float _1042 = _754 * sin(_1040);
                    precise float _1043 = _949 * 0.0;
                    precise float _1044 = _1043 - _950;
                    precise float _1045 = _950 * 0.0;
                    precise float _1046 = _948 * 0.0;
                    precise float _1047 = _1045 - _1046;
                    precise float _1048 = _948 - _1043;
                    precise float _1049 = _769 * _1042;
                    float _1050 = _806 ? _1049 : 0.0;
                    float _1119;
                    if (_807)
                    {
                        precise float _1079 = _783 * 2.0;
                        precise float _1081 = _803 + _804;
                        precise float _1082 = _805 + _1081;
                        precise float _1084 = 6.283184051513671875 / (isnan(0.001000000047497451305389404296875) ? _783 : (isnan(_783) ? 0.001000000047497451305389404296875 : max(_783, 0.001000000047497451305389404296875)));
                        precise float _1085 = _802 * _1084;
                        precise float _1086 = (-0.0) - _948;
                        precise float _1091 = dot(vec2(_950, _1086), vec2(_809, _811)) / _1079;
                        precise float _1092 = (-0.0) - _1091;
                        float _1095 = fract(abs(_1091));
                        precise float _1096 = (-0.0) - _1095;
                        precise float _1098 = _1079 * ((_1091 >= _1092) ? _1095 : _1096);
                        precise float _1099 = _1098 * 6.283184051513671875;
                        precise float _1100 = _1099 / _1079;
                        precise float _1102 = (isnan(5.0) ? _783 : (isnan(_783) ? 5.0 : min(_783, 5.0))) * sin(_1100);
                        precise float _1103 = _1032 + _1102;
                        precise float _1104 = _783 * 0.25;
                        precise float _1106 = _373 * _802;
                        precise float _1107 = _1106 - _1104;
                        precise float _1108 = _1107 - _1103;
                        precise float _1109 = _802 * _1082;
                        precise float _1111 = _1108 / (isnan(0.001000000047497451305389404296875) ? _1109 : (isnan(_1109) ? 0.001000000047497451305389404296875 : max(_1109, 0.001000000047497451305389404296875)));
                        float _1112 = fract(_1111);
                        precise float _1114 = 1.0 - _1112;
                        float _1115 = (_1111 < 0.0) ? _1114 : _1112;
                        precise float _1116 = _1081 / _1082;
                        precise float _1117 = _803 / _1082;
                        float _1195;
                        if (_1115 < _1117)
                        {
                            precise float _1191 = _1115 / _1117;
                            _1195 = _1191;
                        }
                        else
                        {
                            float frontier_phi_27_24_ladder;
                            if (_1115 < _1116)
                            {
                                precise float _1205 = _1115 - _1117;
                                precise float _1206 = _1116 - _1117;
                                precise float _1207 = _1205 / _1206;
                                precise float _1196 = 1.0 - _1207;
                                frontier_phi_27_24_ladder = _1196;
                            }
                            else
                            {
                                frontier_phi_27_24_ladder = 0.0;
                            }
                            _1195 = frontier_phi_27_24_ladder;
                        }
                        precise float _1197 = _785 * _1195;
                        precise float _1198 = _1084 * _1032;
                        precise float _1199 = _373 * _1085;
                        precise float _1200 = _1199 - _1198;
                        precise float _1202 = _784 + sin(_1200);
                        precise float _1204 = _1197 * abs(_1202);
                        precise float _1120 = _1204 + 0.0;
                        _1119 = _1120;
                    }
                    else
                    {
                        _1119 = 0.0;
                    }
                    precise float _1121 = _735 + _1042;
                    precise float _1122 = _1121 + _1119;
                    precise float _1123 = _948 * _1122;
                    precise float _1124 = _949 * _1122;
                    precise float _1125 = _950 * _1122;
                    precise float _1126 = _1044 * _1050;
                    precise float _1127 = _1047 * _1050;
                    precise float _1128 = _1048 * _1050;
                    precise float _1129 = _1126 + _1123;
                    precise float _1130 = _1127 + _1124;
                    precise float _1131 = _1128 + _1125;
                    precise float _1132 = _1005 * _1129;
                    precise float _1133 = _1005 * _1130;
                    precise float _1134 = _1005 * _1131;
                    precise float _957 = _1132 * 0.0500000007450580596923828125;
                    precise float _959 = _1133 * 0.0500000007450580596923828125;
                    precise float _961 = _1134 * 0.0500000007450580596923828125;
                    frontier_phi_8_pred_12_ladder = _957;
                    frontier_phi_8_pred_12_ladder_1 = _959;
                    frontier_phi_8_pred_12_ladder_2 = _961;
                }
                else
                {
                    frontier_phi_8_pred_12_ladder = 0.0;
                    frontier_phi_8_pred_12_ladder_1 = 0.0;
                    frontier_phi_8_pred_12_ladder_2 = 0.0;
                }
                frontier_phi_8_pred = frontier_phi_8_pred_12_ladder;
                frontier_phi_8_pred_1 = frontier_phi_8_pred_12_ladder_1;
                frontier_phi_8_pred_2 = frontier_phi_8_pred_12_ladder_2;
            }
            else
            {
                frontier_phi_8_pred = 0.0;
                frontier_phi_8_pred_1 = 0.0;
                frontier_phi_8_pred_2 = 0.0;
            }
            _956 = frontier_phi_8_pred;
            _958 = frontier_phi_8_pred_1;
            _960 = frontier_phi_8_pred_2;
            _376 = _694 + _956;
            _378 = _695 + _958;
            _380 = _696 + _960;
            uint _700 = _699 + 1u;
            if (_700 == _198)
            {
                break;
            }
            else
            {
                _694 = _376;
                _695 = _378;
                _696 = _380;
                _697 = (_699 != 3u) ? (_697 >> 8u) : _374;
                _699 = _700;
                continue;
            }
        }
        _375 = _376;
        _377 = _378;
        _379 = _380;
    }
    precise float _381 = _375 * _375;
    precise float _382 = _377 * _377;
    precise float _383 = _381 + _382;
    precise float _384 = _379 * _379;
    precise float _385 = _383 + _384;
    float _386 = sqrt(_385);
    bool _387 = _386 < 0.00011000000085914507508277893066406;
    float _392 = inversesqrt(dot(vec3(cbInstanceData._m0[_189].x, cbInstanceData._m0[_289].x, cbInstanceData._m0[_296].x), vec3(cbInstanceData._m0[_189].x, cbInstanceData._m0[_289].x, cbInstanceData._m0[_296].x)));
    precise float _393 = cbInstanceData._m0[_189].x * _392;
    precise float _394 = cbInstanceData._m0[_289].x * _392;
    precise float _395 = cbInstanceData._m0[_296].x * _392;
    float _399 = inversesqrt(dot(vec3(cbInstanceData._m0[_189].y, cbInstanceData._m0[_289].y, cbInstanceData._m0[_296].y), vec3(cbInstanceData._m0[_189].y, cbInstanceData._m0[_289].y, cbInstanceData._m0[_296].y)));
    precise float _400 = cbInstanceData._m0[_189].y * _399;
    precise float _401 = cbInstanceData._m0[_289].y * _399;
    precise float _402 = cbInstanceData._m0[_296].y * _399;
    float _406 = inversesqrt(dot(vec3(cbInstanceData._m0[_189].z, cbInstanceData._m0[_289].z, cbInstanceData._m0[_296].z), vec3(cbInstanceData._m0[_189].z, cbInstanceData._m0[_289].z, cbInstanceData._m0[_296].z)));
    precise float _407 = cbInstanceData._m0[_189].z * _406;
    precise float _408 = cbInstanceData._m0[_289].z * _406;
    precise float _409 = cbInstanceData._m0[_296].z * _406;
    precise float _410 = _393 * 0.0;
    precise float _411 = 1.0 * _400;
    precise float _412 = _411 + _410;
    precise float _413 = 0.0 * _407;
    precise float _414 = _413 + _412;
    precise float _415 = _394 * 0.0;
    precise float _416 = 1.0 * _401;
    precise float _417 = _416 + _415;
    precise float _418 = 0.0 * _408;
    precise float _419 = _418 + _417;
    precise float _420 = _395 * 0.0;
    precise float _421 = 1.0 * _402;
    precise float _422 = _421 + _420;
    precise float _423 = 0.0 * _409;
    precise float _424 = _423 + _422;
    float _428 = inversesqrt(dot(vec3(_375, _377, _379), vec3(_375, _377, _379)));
    precise float _429 = _375 * _428;
    precise float _430 = _377 * _428;
    precise float _431 = _379 * _428;
    precise float _432 = _419 * _431;
    precise float _433 = _424 * _430;
    precise float _434 = _432 - _433;
    precise float _435 = _424 * _429;
    precise float _436 = _414 * _431;
    precise float _437 = _435 - _436;
    precise float _438 = _414 * _430;
    precise float _439 = _419 * _429;
    precise float _440 = _438 - _439;
    float _444 = inversesqrt(dot(vec3(_434, _437, _440), vec3(_434, _437, _440)));
    precise float _445 = _444 * _434;
    precise float _446 = _444 * _437;
    precise float _447 = _444 * _440;
    precise float _448 = _386 + 1.0;
    precise float _450 = cbMtdParam._m0[10u].w * log2(_448);
    precise float _451 = _249 - _349;
    precise float _452 = _256 - _356;
    precise float _453 = _263 - _363;
    precise float _454 = dot(vec3(_445, _446, _447), vec3(_451, _452, _453));
    precise float _457 = _445 * _454;
    precise float _458 = _446 * _454;
    precise float _459 = _447 * _454;
    precise float _460 = _349 + _457;
    precise float _461 = _356 + _458;
    precise float _462 = _363 + _459;
    precise float _463 = _249 - _460;
    precise float _464 = _256 - _461;
    precise float _465 = _263 - _462;
    precise float _466 = _446 * _465;
    precise float _467 = _447 * _464;
    precise float _468 = _466 - _467;
    precise float _469 = _447 * _463;
    precise float _470 = _445 * _465;
    precise float _471 = _469 - _470;
    precise float _472 = _445 * _464;
    precise float _473 = _446 * _463;
    precise float _474 = _472 - _473;
    float _475 = sin(_450);
    float _476 = cos(_450);
    precise float _477 = _463 * _476;
    precise float _478 = _464 * _476;
    precise float _479 = _465 * _476;
    precise float _480 = _475 * _468;
    precise float _481 = _475 * _471;
    precise float _482 = _475 * _474;
    precise float _483 = _477 + _480;
    precise float _484 = _478 + _481;
    precise float _485 = _482 + _479;
    precise float _486 = _460 + _483;
    precise float _487 = _461 + _484;
    precise float _488 = _462 + _485;
    precise float _489 = _486 - _249;
    precise float _490 = _487 - _256;
    precise float _491 = _488 - _263;
    float _492 = _387 ? 0.0 : _489;
    float _493 = _387 ? 0.0 : _490;
    float _494 = _387 ? 0.0 : _491;
    precise float _495 = _249 + _492;
    precise float _496 = _256 + _493;
    precise float _497 = _263 + _494;
    precise float _498 = cbPerFrame._m0[22u].x + _338;
    float _500;
    float _502;
    float _504;
    if (_201)
    {
        _500 = 0.0;
        _502 = 0.0;
        _504 = 0.0;
    }
    else
    {
        uint _693 = _195.z;
        precise float _501;
        precise float _503;
        precise float _505;
        float _980;
        float _982;
        float _984;
        float _819 = 0.0;
        float _820 = 0.0;
        float _821 = 0.0;
        uint _822 = _693;
        uint _824 = 0u;
        float _858;
        float _877;
        vec4 _890;
        float _891;
        float _892;
        float _905;
        float _906;
        float _907;
        float _923;
        float _924;
        float _925;
        float _926;
        bool _927;
        bool _928;
        bool _929;
        precise float _930;
        precise float _931;
        precise float _932;
        float _933;
        float _934;
        float _935;
        precise float _936;
        bool _939;
        for (;;)
        {
            uint _826 = _822 & 255u;
            uint _827 = _826 * 24u;
            uvec3 _836 = uvec3(texelFetch(g_forceParam, int(_827)).x, texelFetch(g_forceParam, int(_827 + 1u)).x, texelFetch(g_forceParam, int(_827 + 2u)).x);
            uint _841 = (_826 * 24u) + 4u;
            vec4 _854 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_841)).x, texelFetch(g_forceParam, int(_841 + 1u)).x, texelFetch(g_forceParam, int(_841 + 2u)).x, texelFetch(g_forceParam, int(_841 + 3u)).x));
            _858 = _854.w;
            uint _860 = (_826 * 24u) + 8u;
            vec4 _873 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_860)).x, texelFetch(g_forceParam, int(_860 + 1u)).x, texelFetch(g_forceParam, int(_860 + 2u)).x, texelFetch(g_forceParam, int(_860 + 3u)).x));
            _877 = _873.w;
            uint _879 = (_826 * 24u) + 12u;
            _890 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_879)).x, texelFetch(g_forceParam, int(_879 + 1u)).x, _885, texelFetch(g_forceParam, int(_879 + 3u)).x));
            _891 = _890.x;
            _892 = _890.w;
            uint _894 = (_826 * 24u) + 16u;
            vec3 _904 = uintBitsToFloat(uvec3(texelFetch(g_forceParam, int(_894)).x, texelFetch(g_forceParam, int(_894 + 1u)).x, texelFetch(g_forceParam, int(_894 + 2u)).x));
            _905 = _904.x;
            _906 = _904.y;
            _907 = _904.z;
            uint _909 = (_826 * 24u) + 20u;
            vec4 _922 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_909)).x, texelFetch(g_forceParam, int(_909 + 1u)).x, texelFetch(g_forceParam, int(_909 + 2u)).x, texelFetch(g_forceParam, int(_909 + 3u)).x));
            _923 = _922.x;
            _924 = _922.y;
            _925 = _922.z;
            _926 = _922.w;
            _927 = _836.x == 1u;
            _928 = _836.y == 1u;
            _929 = _836.z == 1u;
            _930 = _309 - _854.x;
            _931 = _316 - _854.y;
            _932 = _323 - _854.z;
            _933 = _927 ? _873.x : _930;
            _934 = _927 ? _873.y : _931;
            _935 = _927 ? _873.z : _932;
            _936 = dot(vec3(_933, _934, _935), vec3(_933, _934, _935));
            _939 = _936 > 0.0;
            float frontier_phi_10_pred;
            float frontier_phi_10_pred_1;
            float frontier_phi_10_pred_2;
            if (_939)
            {
                precise float _966 = _930 * _930;
                precise float _967 = _931 * _931;
                precise float _968 = _966 + _967;
                precise float _969 = _932 * _932;
                precise float _970 = _969 + _968;
                float _971 = sqrt(_970);
                float _972 = inversesqrt(_936);
                precise float _973 = _933 * _972;
                precise float _974 = _934 * _972;
                precise float _975 = _935 * _972;
                precise float _977 = _971 / (isnan(0.001000000047497451305389404296875) ? _890.y : (isnan(_890.y) ? 0.001000000047497451305389404296875 : max(_890.y, 0.001000000047497451305389404296875)));
                precise float _978 = 1.0 - _977;
                float _1327 = isnan(0.0) ? _978 : (isnan(_978) ? 0.0 : max(_978, 0.0));
                float _979 = isnan(1.0) ? _1327 : (isnan(_1327) ? 1.0 : min(_1327, 1.0));
                float _1021;
                if (_929)
                {
                    float _1010 = inversesqrt(dot(vec3(_930, _931, _932), vec3(_930, _931, _932)));
                    precise float _1011 = _930 * _1010;
                    precise float _1012 = _931 * _1010;
                    precise float _1013 = _932 * _1010;
                    precise float _1017 = dot(vec3(_973, _974, _975), vec3(_1011, _1012, _1013)) * 0.800000011920928955078125;
                    precise float _1018 = _1017 + 0.20000000298023223876953125;
                    float _1338 = isnan(0.0) ? _1018 : (isnan(_1018) ? 0.0 : max(_1018, 0.0));
                    precise float _1020 = _979 * (isnan(1.0) ? _1338 : (isnan(_1338) ? 1.0 : min(_1338, 1.0)));
                    _1021 = _1020;
                }
                else
                {
                    _1021 = _979;
                }
                float frontier_phi_10_pred_15_ladder;
                float frontier_phi_10_pred_15_ladder_1;
                float frontier_phi_10_pred_15_ladder_2;
                if (_1021 > 0.0)
                {
                    bool _1052 = _927 && (!_929);
                    precise float _1054 = _971 * (-4.0);
                    precise float _1057 = 6.283184051513671875 / (isnan(0.001000000047497451305389404296875) ? _891 : (isnan(_891) ? 0.001000000047497451305389404296875 : max(_891, 0.001000000047497451305389404296875)));
                    precise float _1058 = cbMtdParam._m0[11u].y * _1057;
                    precise float _1059 = dot(vec2(_973, _975), vec2(_930, _932));
                    precise float _1062 = _1059 * _1058;
                    precise float _1063 = float(_1052) * _1062;
                    precise float _1064 = _498 * _1058;
                    precise float _1065 = _1064 - _1063;
                    precise float _1066 = (_1052 ? 0.0 : _1054) + _1065;
                    precise float _1068 = _877 * sin(_1066);
                    precise float _1069 = _974 * 0.0;
                    precise float _1070 = _1069 - _975;
                    precise float _1071 = _975 * 0.0;
                    precise float _1072 = _973 * 0.0;
                    precise float _1073 = _1071 - _1072;
                    precise float _1074 = _973 - _1069;
                    precise float _1075 = _892 * _1068;
                    float _1076 = _927 ? _1075 : 0.0;
                    float _1175;
                    if (_928)
                    {
                        precise float _1137 = _905 * 2.0;
                        precise float _1138 = _924 + _925;
                        precise float _1139 = _926 + _1138;
                        precise float _1141 = 6.283184051513671875 / (isnan(0.001000000047497451305389404296875) ? _905 : (isnan(_905) ? 0.001000000047497451305389404296875 : max(_905, 0.001000000047497451305389404296875)));
                        precise float _1142 = cbMtdParam._m0[11u].y * _1141;
                        precise float _1143 = _923 * _1142;
                        precise float _1144 = (-0.0) - _973;
                        precise float _1148 = dot(vec2(_975, _1144), vec2(_930, _932)) / _1137;
                        precise float _1149 = (-0.0) - _1148;
                        float _1152 = fract(abs(_1148));
                        precise float _1153 = (-0.0) - _1152;
                        precise float _1155 = _1137 * ((_1148 >= _1149) ? _1152 : _1153);
                        precise float _1156 = _1155 * 6.283184051513671875;
                        precise float _1157 = _1156 / _1137;
                        precise float _1159 = (isnan(5.0) ? _905 : (isnan(_905) ? 5.0 : min(_905, 5.0))) * sin(_1157);
                        precise float _1160 = _1059 + _1159;
                        precise float _1161 = _905 * 0.25;
                        precise float _1162 = _498 * _923;
                        precise float _1163 = _1162 - _1161;
                        precise float _1164 = _1163 - _1160;
                        precise float _1165 = _923 * _1139;
                        precise float _1167 = _1164 / (isnan(0.001000000047497451305389404296875) ? _1165 : (isnan(_1165) ? 0.001000000047497451305389404296875 : max(_1165, 0.001000000047497451305389404296875)));
                        float _1168 = fract(_1167);
                        precise float _1170 = 1.0 - _1168;
                        float _1171 = (_1167 < 0.0) ? _1170 : _1168;
                        precise float _1172 = _1138 / _1139;
                        precise float _1173 = _924 / _1139;
                        float _1208;
                        if (_1171 < _1173)
                        {
                            precise float _1193 = _1171 / _1173;
                            _1208 = _1193;
                        }
                        else
                        {
                            float frontier_phi_29_26_ladder;
                            if (_1171 < _1172)
                            {
                                precise float _1218 = _1171 - _1173;
                                precise float _1219 = _1172 - _1173;
                                precise float _1220 = _1218 / _1219;
                                precise float _1209 = 1.0 - _1220;
                                frontier_phi_29_26_ladder = _1209;
                            }
                            else
                            {
                                frontier_phi_29_26_ladder = 0.0;
                            }
                            _1208 = frontier_phi_29_26_ladder;
                        }
                        precise float _1210 = _907 * _1208;
                        precise float _1211 = _1142 * _1059;
                        precise float _1212 = _498 * _1143;
                        precise float _1213 = _1212 - _1211;
                        precise float _1215 = _906 + sin(_1213);
                        precise float _1217 = _1210 * abs(_1215);
                        precise float _1176 = _1217 + 0.0;
                        _1175 = _1176;
                    }
                    else
                    {
                        _1175 = 0.0;
                    }
                    precise float _1177 = _858 + _1068;
                    precise float _1178 = _1177 + _1175;
                    precise float _1179 = _973 * _1178;
                    precise float _1180 = _974 * _1178;
                    precise float _1181 = _975 * _1178;
                    precise float _1182 = _1070 * _1076;
                    precise float _1183 = _1073 * _1076;
                    precise float _1184 = _1074 * _1076;
                    precise float _1185 = _1182 + _1179;
                    precise float _1186 = _1183 + _1180;
                    precise float _1187 = _1184 + _1181;
                    precise float _1188 = _1021 * _1185;
                    precise float _1189 = _1021 * _1186;
                    precise float _1190 = _1021 * _1187;
                    precise float _981 = _1188 * 0.0500000007450580596923828125;
                    precise float _983 = _1189 * 0.0500000007450580596923828125;
                    precise float _985 = _1190 * 0.0500000007450580596923828125;
                    frontier_phi_10_pred_15_ladder = _981;
                    frontier_phi_10_pred_15_ladder_1 = _983;
                    frontier_phi_10_pred_15_ladder_2 = _985;
                }
                else
                {
                    frontier_phi_10_pred_15_ladder = 0.0;
                    frontier_phi_10_pred_15_ladder_1 = 0.0;
                    frontier_phi_10_pred_15_ladder_2 = 0.0;
                }
                frontier_phi_10_pred = frontier_phi_10_pred_15_ladder;
                frontier_phi_10_pred_1 = frontier_phi_10_pred_15_ladder_1;
                frontier_phi_10_pred_2 = frontier_phi_10_pred_15_ladder_2;
            }
            else
            {
                frontier_phi_10_pred = 0.0;
                frontier_phi_10_pred_1 = 0.0;
                frontier_phi_10_pred_2 = 0.0;
            }
            _980 = frontier_phi_10_pred;
            _982 = frontier_phi_10_pred_1;
            _984 = frontier_phi_10_pred_2;
            _501 = _819 + _980;
            _503 = _820 + _982;
            _505 = _821 + _984;
            uint _825 = _824 + 1u;
            if (_825 == _198)
            {
                break;
            }
            else
            {
                _819 = _501;
                _820 = _503;
                _821 = _505;
                _822 = (_824 != 3u) ? (_822 >> 8u) : _374;
                _824 = _825;
                continue;
            }
        }
        _500 = _501;
        _502 = _503;
        _504 = _505;
    }
    precise float _506 = _500 * _500;
    precise float _507 = _502 * _502;
    precise float _508 = _506 + _507;
    precise float _509 = _504 * _504;
    precise float _510 = _508 + _509;
    float _511 = sqrt(_510);
    bool _512 = _511 < 0.00011000000085914507508277893066406;
    float _516 = inversesqrt(dot(vec3(_500, _502, _504), vec3(_500, _502, _504)));
    precise float _517 = _500 * _516;
    precise float _518 = _502 * _516;
    precise float _519 = _504 * _516;
    precise float _520 = _419 * _519;
    precise float _521 = _424 * _518;
    precise float _522 = _520 - _521;
    precise float _523 = _424 * _517;
    precise float _524 = _414 * _519;
    precise float _525 = _523 - _524;
    precise float _526 = _414 * _518;
    precise float _527 = _419 * _517;
    precise float _528 = _526 - _527;
    float _532 = inversesqrt(dot(vec3(_522, _525, _528), vec3(_522, _525, _528)));
    precise float _533 = _532 * _522;
    precise float _534 = _532 * _525;
    precise float _535 = _532 * _528;
    precise float _536 = _511 + 1.0;
    precise float _538 = cbMtdParam._m0[10u].y * log2(_536);
    precise float _539 = _495 - _309;
    precise float _540 = _496 - _316;
    precise float _541 = _497 - _323;
    precise float _542 = dot(vec3(_533, _534, _535), vec3(_539, _540, _541));
    precise float _545 = _533 * _542;
    precise float _546 = _534 * _542;
    precise float _547 = _535 * _542;
    precise float _548 = _309 + _545;
    precise float _549 = _316 + _546;
    precise float _550 = _323 + _547;
    precise float _551 = _495 - _548;
    precise float _552 = _496 - _549;
    precise float _553 = _497 - _550;
    precise float _554 = _534 * _553;
    precise float _555 = _535 * _552;
    precise float _556 = _554 - _555;
    precise float _557 = _535 * _551;
    precise float _558 = _533 * _553;
    precise float _559 = _557 - _558;
    precise float _560 = _533 * _552;
    precise float _561 = _534 * _551;
    precise float _562 = _560 - _561;
    float _563 = sin(_538);
    float _564 = cos(_538);
    precise float _565 = _551 * _564;
    precise float _566 = _552 * _564;
    precise float _567 = _553 * _564;
    precise float _568 = _563 * _556;
    precise float _569 = _563 * _559;
    precise float _570 = _563 * _562;
    precise float _571 = _565 + _568;
    precise float _572 = _566 + _569;
    precise float _573 = _570 + _567;
    precise float _574 = _548 + _571;
    precise float _575 = _549 + _572;
    precise float _576 = _550 + _573;
    precise float _577 = _574 - _495;
    precise float _578 = _575 - _496;
    precise float _579 = _576 - _497;
    precise float _583 = _492 + (_512 ? 0.0 : _577);
    precise float _584 = _493 + (_512 ? 0.0 : _578);
    precise float _585 = _494 + (_512 ? 0.0 : _579);
    precise float _586 = _249 + _583;
    precise float _587 = _256 + _584;
    precise float _588 = _263 + _585;
    precise float _594 = _586 - cbSceneParam._m0[3u].x;
    precise float _595 = _587 - cbSceneParam._m0[3u].y;
    precise float _596 = _588 - cbSceneParam._m0[3u].z;
    precise float _624 = cbSceneParam._m0[24u].x * _594;
    precise float _625 = _595 * cbSceneParam._m0[24u].y;
    precise float _626 = _625 + _624;
    precise float _627 = _596 * cbSceneParam._m0[24u].z;
    precise float _628 = _627 + _626;
    precise float _629 = 1.0 * cbSceneParam._m0[24u].w;
    precise float _630 = _629 + _628;
    precise float _631 = cbSceneParam._m0[25u].x * _594;
    precise float _632 = _595 * cbSceneParam._m0[25u].y;
    precise float _633 = _632 + _631;
    precise float _634 = _596 * cbSceneParam._m0[25u].z;
    precise float _635 = _634 + _633;
    precise float _636 = 1.0 * cbSceneParam._m0[25u].w;
    precise float _637 = _636 + _635;
    precise float _638 = cbSceneParam._m0[26u].x * _594;
    precise float _639 = _595 * cbSceneParam._m0[26u].y;
    precise float _640 = _639 + _638;
    precise float _641 = _596 * cbSceneParam._m0[26u].z;
    precise float _642 = _641 + _640;
    precise float _643 = 1.0 * cbSceneParam._m0[26u].w;
    precise float _644 = _643 + _642;
    precise float _645 = cbSceneParam._m0[27u].x * _594;
    precise float _646 = _595 * cbSceneParam._m0[27u].y;
    precise float _647 = _646 + _645;
    precise float _648 = _596 * cbSceneParam._m0[27u].z;
    precise float _649 = _648 + _647;
    precise float _650 = 1.0 * cbSceneParam._m0[27u].w;
    precise float _651 = _650 + _649;
    gl_Position.x = _630;
    gl_Position.y = _637;
    gl_Position.z = _644;
    gl_Position.w = _651;
    POSITION_1.x = _630;
    POSITION_1.y = _637;
    POSITION_1.z = _644;
    POSITION_1.w = _651;
    NORMAL_1.x = fma(_175, cbObjMatrix._m0[_221].z, fma(_174, cbObjMatrix._m0[_221].y, cbObjMatrix._m0[_221].x * _172));
    NORMAL_1.y = fma(_175, cbObjMatrix._m0[_228].z, fma(_174, cbObjMatrix._m0[_228].y, cbObjMatrix._m0[_228].x * _172));
    NORMAL_1.z = fma(_175, cbObjMatrix._m0[_235].z, fma(_174, cbObjMatrix._m0[_235].y, cbObjMatrix._m0[_235].x * _172));
    NORMAL_1.w = float(_212);
    TANGENT_1.x = fma(_187, cbObjMatrix._m0[_221].z, fma(_186, cbObjMatrix._m0[_221].y, cbObjMatrix._m0[_221].x * _185));
    TANGENT_1.y = fma(_187, cbObjMatrix._m0[_228].z, fma(_186, cbObjMatrix._m0[_228].y, cbObjMatrix._m0[_228].x * _185));
    TANGENT_1.z = fma(_187, cbObjMatrix._m0[_235].z, fma(_186, cbObjMatrix._m0[_235].y, cbObjMatrix._m0[_235].x * _185));
    TANGENT_1.w = (float(TANGENT.w) + (-127.0)) * 0.0078740157186985015869140625;
    TEXCOORD_2 = ((float(int(uint(TEXCOORD.x))) * 0.00048828125) * cbTexScroll._m0[0u].x) + cbTexScroll._m0[0u].z;
    TEXCOORD_1_1 = ((float(int(uint(TEXCOORD.y))) * 0.00048828125) * cbTexScroll._m0[0u].y) + cbTexScroll._m0[0u].w;
    TEXCOORD_3.x = TEXCOORD_1.x;
    TEXCOORD_3.y = TEXCOORD_1.y;
    TEXCOORD_3.z = TEXCOORD_1.z;
    TEXCOORD_3.w = COLOR_1.x;
    gl_ClipDistance[0u] = dot(vec4(_630, _637, _644, _651), vec4(cbSceneParam._m0[4u]));
    gl_ClipDistance[1u] = dot(vec4(_630, _637, _644, _651), vec4(cbInstanceData._m0[_214 + 3u]));
}


