#version 460

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[12];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 5, std140) uniform cbObjMatrixUBO
{
    vec4 _m0[6];
} cbObjMatrix;

layout(set = 0, binding = 10, std140) uniform cbInstanceIdxParamUBO
{
    vec4 _m0[1];
} cbInstanceIdxParam;

layout(set = 0, binding = 11, std140) uniform cbTexScrollUBO
{
    vec4 _m0[4];
} cbTexScroll;

layout(set = 0, binding = 26) uniform usamplerBuffer g_forceParam;
layout(set = 0, binding = 25) uniform usamplerBuffer g_InstanceIndexBuffer;

layout(location = 0) in vec3 POSITION;
layout(location = 1) in uvec4 NORMAL;
layout(location = 2) in uvec4 TANGENT;
layout(location = 3) in uvec4 BLENDINDICES;
layout(location = 4) in vec4 BLENDWEIGHT;
layout(location = 5) in vec4 COLOR_1;
layout(location = 6) in ivec2 TEXCOORD;
layout(location = 7) in vec4 TEXCOORD_1;
layout(location = 1) out vec4 NORMAL_1;
layout(location = 2) out vec4 TANGENT_1;
layout(location = 3) out float TEXCOORD_2;
layout(location = 3, component = 1) out float TEXCOORD_1_1;
layout(location = 4) out vec4 TEXCOORD_3;
layout(location = 3, component = 2) out float TEXCOORD_11;

uint _918;
uint _1041;

void main()
{
    uint _79 = uint(gl_InstanceIndex) - uint(gl_BaseInstance);
    gl_Position.x = 0.0;
    gl_Position.y = 0.0;
    gl_Position.z = 0.0;
    gl_Position.w = 0.0;
    NORMAL_1.x = 0.0;
    NORMAL_1.y = 0.0;
    NORMAL_1.z = 0.0;
    NORMAL_1.w = 0.0;
    TANGENT_1.x = 0.0;
    TANGENT_1.y = 0.0;
    TANGENT_1.z = 0.0;
    TANGENT_1.w = 0.0;
    TEXCOORD_2 = 0.0;
    TEXCOORD_1_1 = 0.0;
    TEXCOORD_3.x = 0.0;
    TEXCOORD_3.y = 0.0;
    TEXCOORD_3.z = 0.0;
    TEXCOORD_3.w = 0.0;
    TEXCOORD_11 = 0.0;
    float _179 = (float(NORMAL.x) + (-127.0)) * 0.0078740157186985015869140625;
    float _181 = (float(NORMAL.y) + (-127.0)) * 0.0078740157186985015869140625;
    float _182 = (float(NORMAL.z) + (-127.0)) * 0.0078740157186985015869140625;
    float _191 = (float(TANGENT.x) + (-127.0)) * 0.0078740157186985015869140625;
    float _192 = (float(TANGENT.y) + (-127.0)) * 0.0078740157186985015869140625;
    float _193 = (float(TANGENT.z) + (-127.0)) * 0.0078740157186985015869140625;
    uint _199 = _79 * 13u;
    uvec4 _205 = floatBitsToUint(cbInstanceData._m0[_199 + 7u]);
    uint _208 = min(_205.y, 8u);
    bool _211 = _208 == 0u;
    precise float _212 = POSITION.x + 0.0;
    precise float _213 = POSITION.y + 0.0;
    precise float _214 = POSITION.z + 0.0;
    uint _219 = floatBitsToUint(cbInstanceIdxParam._m0[0u]).x + _79;
    uvec4 _221 = texelFetch(g_InstanceIndexBuffer, int(_219));
    uint _222 = _221.x;
    precise float _223 = dot(vec4(1.0), vec4(BLENDWEIGHT.x, BLENDWEIGHT.y, BLENDWEIGHT.z, BLENDWEIGHT.w));
    float _227 = isnan(_223) ? 0.001000000047497451305389404296875 : (isnan(0.001000000047497451305389404296875) ? _223 : max(0.001000000047497451305389404296875, _223));
    precise float _229 = BLENDWEIGHT.x / _227;
    precise float _230 = BLENDWEIGHT.y / _227;
    precise float _231 = BLENDWEIGHT.z / _227;
    precise float _232 = BLENDWEIGHT.w / _227;
    uvec4 _238 = floatBitsToUint(cbInstanceData._m0[(_222 * 13u) + 4u]);
    uint _239 = _238.x;
    uint _241 = (_239 + uint(float(BLENDINDICES.x))) * 3u;
    uint _248 = _241 + 1u;
    uint _255 = _241 + 2u;
    precise float _262 = _229 * cbObjMatrix._m0[_241].x;
    precise float _263 = _229 * cbObjMatrix._m0[_248].x;
    precise float _264 = _229 * cbObjMatrix._m0[_255].x;
    precise float _265 = _229 * cbObjMatrix._m0[_241].y;
    precise float _266 = _229 * cbObjMatrix._m0[_248].y;
    precise float _267 = _229 * cbObjMatrix._m0[_255].y;
    precise float _268 = _229 * cbObjMatrix._m0[_241].z;
    precise float _269 = _229 * cbObjMatrix._m0[_248].z;
    precise float _270 = _229 * cbObjMatrix._m0[_255].z;
    precise float _271 = _229 * cbObjMatrix._m0[_241].w;
    precise float _272 = _229 * cbObjMatrix._m0[_248].w;
    precise float _273 = _229 * cbObjMatrix._m0[_255].w;
    uint _276 = (_239 + uint(float(BLENDINDICES.y))) * 3u;
    uint _283 = _276 + 1u;
    uint _290 = _276 + 2u;
    precise float _297 = _230 * cbObjMatrix._m0[_276].x;
    precise float _298 = _230 * cbObjMatrix._m0[_283].x;
    precise float _299 = _230 * cbObjMatrix._m0[_290].x;
    precise float _300 = _230 * cbObjMatrix._m0[_276].y;
    precise float _301 = _230 * cbObjMatrix._m0[_283].y;
    precise float _302 = _230 * cbObjMatrix._m0[_290].y;
    precise float _303 = _230 * cbObjMatrix._m0[_276].z;
    precise float _304 = _230 * cbObjMatrix._m0[_283].z;
    precise float _305 = _230 * cbObjMatrix._m0[_290].z;
    precise float _306 = _230 * cbObjMatrix._m0[_276].w;
    precise float _307 = _230 * cbObjMatrix._m0[_283].w;
    precise float _308 = _230 * cbObjMatrix._m0[_290].w;
    precise float _309 = _262 + _297;
    precise float _310 = _263 + _298;
    precise float _311 = _264 + _299;
    precise float _312 = _265 + _300;
    precise float _313 = _266 + _301;
    precise float _314 = _267 + _302;
    precise float _315 = _268 + _303;
    precise float _316 = _269 + _304;
    precise float _317 = _270 + _305;
    precise float _318 = _271 + _306;
    precise float _319 = _272 + _307;
    precise float _320 = _273 + _308;
    uint _323 = (_239 + uint(float(BLENDINDICES.z))) * 3u;
    uint _330 = _323 + 1u;
    uint _337 = _323 + 2u;
    precise float _344 = _231 * cbObjMatrix._m0[_323].x;
    precise float _345 = _231 * cbObjMatrix._m0[_330].x;
    precise float _346 = _231 * cbObjMatrix._m0[_337].x;
    precise float _347 = _231 * cbObjMatrix._m0[_323].y;
    precise float _348 = _231 * cbObjMatrix._m0[_330].y;
    precise float _349 = _231 * cbObjMatrix._m0[_337].y;
    precise float _350 = _231 * cbObjMatrix._m0[_323].z;
    precise float _351 = _231 * cbObjMatrix._m0[_330].z;
    precise float _352 = _231 * cbObjMatrix._m0[_337].z;
    precise float _353 = _231 * cbObjMatrix._m0[_323].w;
    precise float _354 = _231 * cbObjMatrix._m0[_330].w;
    precise float _355 = _231 * cbObjMatrix._m0[_337].w;
    precise float _356 = _309 + _344;
    precise float _357 = _310 + _345;
    precise float _358 = _311 + _346;
    precise float _359 = _312 + _347;
    precise float _360 = _313 + _348;
    precise float _361 = _314 + _349;
    precise float _362 = _315 + _350;
    precise float _363 = _316 + _351;
    precise float _364 = _317 + _352;
    precise float _365 = _318 + _353;
    precise float _366 = _319 + _354;
    precise float _367 = _320 + _355;
    uint _370 = (_239 + uint(float(BLENDINDICES.w))) * 3u;
    uint _377 = _370 + 1u;
    uint _384 = _370 + 2u;
    precise float _391 = _232 * cbObjMatrix._m0[_370].x;
    precise float _392 = _232 * cbObjMatrix._m0[_377].x;
    precise float _393 = _232 * cbObjMatrix._m0[_384].x;
    precise float _394 = _232 * cbObjMatrix._m0[_370].y;
    precise float _395 = _232 * cbObjMatrix._m0[_377].y;
    precise float _396 = _232 * cbObjMatrix._m0[_384].y;
    precise float _397 = _232 * cbObjMatrix._m0[_370].z;
    precise float _398 = _232 * cbObjMatrix._m0[_377].z;
    precise float _399 = _232 * cbObjMatrix._m0[_384].z;
    precise float _400 = _232 * cbObjMatrix._m0[_370].w;
    precise float _401 = _232 * cbObjMatrix._m0[_377].w;
    precise float _402 = _232 * cbObjMatrix._m0[_384].w;
    precise float _403 = _356 + _391;
    precise float _404 = _357 + _392;
    precise float _405 = _358 + _393;
    precise float _406 = _359 + _394;
    precise float _407 = _360 + _395;
    precise float _408 = _361 + _396;
    precise float _409 = _362 + _397;
    precise float _410 = _363 + _398;
    precise float _411 = _364 + _399;
    precise float _412 = _365 + _400;
    precise float _413 = _366 + _401;
    precise float _414 = _367 + _402;
    precise float _415 = _212 * _403;
    precise float _416 = _213 * _406;
    precise float _417 = _416 + _415;
    precise float _418 = _214 * _409;
    precise float _419 = _418 + _417;
    precise float _420 = 1.0 * _412;
    precise float _421 = _420 + _419;
    precise float _422 = _212 * _404;
    precise float _423 = _213 * _407;
    precise float _424 = _423 + _422;
    precise float _425 = _214 * _410;
    precise float _426 = _425 + _424;
    precise float _427 = 1.0 * _413;
    precise float _428 = _427 + _426;
    precise float _429 = _212 * _405;
    precise float _430 = _213 * _408;
    precise float _431 = _430 + _429;
    precise float _432 = _214 * _411;
    precise float _433 = _432 + _431;
    precise float _434 = 1.0 * _414;
    precise float _435 = _434 + _433;
    float _441 = cbSceneParam._m0[3u].x - _421;
    float _442 = cbSceneParam._m0[3u].y - _428;
    float _443 = cbSceneParam._m0[3u].z - _435;
    uint _475 = _199 + 1u;
    uint _482 = _199 + 2u;
    precise float _489 = TEXCOORD_1.x * cbInstanceData._m0[_199].x;
    precise float _490 = TEXCOORD_1.y * cbInstanceData._m0[_199].y;
    precise float _491 = _490 + _489;
    precise float _492 = TEXCOORD_1.z * cbInstanceData._m0[_199].z;
    precise float _493 = _492 + _491;
    precise float _494 = 1.0 * cbInstanceData._m0[_199].w;
    precise float _495 = _494 + _493;
    precise float _496 = TEXCOORD_1.x * cbInstanceData._m0[_475].x;
    precise float _497 = TEXCOORD_1.y * cbInstanceData._m0[_475].y;
    precise float _498 = _497 + _496;
    precise float _499 = TEXCOORD_1.z * cbInstanceData._m0[_475].z;
    precise float _500 = _499 + _498;
    precise float _501 = 1.0 * cbInstanceData._m0[_475].w;
    precise float _502 = _501 + _500;
    precise float _503 = TEXCOORD_1.x * cbInstanceData._m0[_482].x;
    precise float _504 = TEXCOORD_1.y * cbInstanceData._m0[_482].y;
    precise float _505 = _504 + _503;
    precise float _506 = TEXCOORD_1.z * cbInstanceData._m0[_482].z;
    precise float _507 = _506 + _505;
    precise float _508 = 1.0 * cbInstanceData._m0[_482].w;
    precise float _509 = _508 + _507;
    precise float _515 = _421 - _495;
    precise float _516 = _428 - _502;
    precise float _517 = _435 - _509;
    precise float _518 = _515 * _515;
    precise float _519 = _516 * _516;
    precise float _520 = _518 + _519;
    precise float _521 = _517 * _517;
    precise float _522 = _520 + _521;
    precise float _524 = cbMtdParam._m0[10u].z * sqrt(_522);
    precise float _529 = cbInstanceData._m0[_199].x * 0.0;
    precise float _530 = 0.0 * cbInstanceData._m0[_199].y;
    precise float _531 = _530 + _529;
    precise float _532 = 0.0 * cbInstanceData._m0[_199].z;
    precise float _533 = _532 + _531;
    precise float _534 = 1.0 * cbInstanceData._m0[_199].w;
    precise float _535 = _534 + _533;
    precise float _536 = cbInstanceData._m0[_475].x * 0.0;
    precise float _537 = 0.0 * cbInstanceData._m0[_475].y;
    precise float _538 = _537 + _536;
    precise float _539 = 0.0 * cbInstanceData._m0[_475].z;
    precise float _540 = _539 + _538;
    precise float _541 = 1.0 * cbInstanceData._m0[_475].w;
    precise float _542 = _541 + _540;
    precise float _543 = cbInstanceData._m0[_482].x * 0.0;
    precise float _544 = 0.0 * cbInstanceData._m0[_482].y;
    precise float _545 = _544 + _543;
    precise float _546 = 0.0 * cbInstanceData._m0[_482].z;
    precise float _547 = _546 + _545;
    precise float _548 = 1.0 * cbInstanceData._m0[_482].w;
    precise float _549 = _548 + _547;
    precise float _552 = _421 * _421;
    precise float _553 = _428 * _428;
    precise float _554 = _552 + _553;
    precise float _555 = _435 * _435;
    precise float _556 = _554 + _555;
    precise float _558 = cbMtdParam._m0[11u].x * sqrt(_556);
    precise float _559 = cbPerFrame._m0[22u].x + _558;
    uint _560 = _205.w;
    float _561;
    float _563;
    float _565;
    if (_211)
    {
        _561 = 0.0;
        _563 = 0.0;
        _565 = 0.0;
    }
    else
    {
        uint _685 = _205.z;
        precise float _562;
        precise float _564;
        precise float _566;
        float _1111;
        float _1113;
        float _1115;
        float _850 = 0.0;
        float _851 = 0.0;
        float _852 = 0.0;
        uint _853 = _685;
        uint _855 = 0u;
        float _891;
        float _910;
        vec4 _923;
        float _924;
        float _925;
        float _939;
        float _940;
        float _941;
        float _958;
        float _959;
        float _960;
        float _961;
        bool _962;
        bool _963;
        bool _964;
        precise float _965;
        precise float _966;
        precise float _967;
        float _968;
        float _969;
        float _970;
        precise float _971;
        bool _974;
        for (;;)
        {
            uint _857 = _853 & 255u;
            uint _859 = _857 * 24u;
            uvec3 _869 = uvec3(texelFetch(g_forceParam, int(_859)).x, texelFetch(g_forceParam, int(_859 + 1u)).x, texelFetch(g_forceParam, int(_859 + 2u)).x);
            uint _874 = (_857 * 24u) + 4u;
            vec4 _887 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_874)).x, texelFetch(g_forceParam, int(_874 + 1u)).x, texelFetch(g_forceParam, int(_874 + 2u)).x, texelFetch(g_forceParam, int(_874 + 3u)).x));
            _891 = _887.w;
            uint _893 = (_857 * 24u) + 8u;
            vec4 _906 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_893)).x, texelFetch(g_forceParam, int(_893 + 1u)).x, texelFetch(g_forceParam, int(_893 + 2u)).x, texelFetch(g_forceParam, int(_893 + 3u)).x));
            _910 = _906.w;
            uint _912 = (_857 * 24u) + 12u;
            _923 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_912)).x, texelFetch(g_forceParam, int(_912 + 1u)).x, _918, texelFetch(g_forceParam, int(_912 + 3u)).x));
            _924 = _923.x;
            _925 = _923.w;
            uint _928 = (_857 * 24u) + 16u;
            vec3 _938 = uintBitsToFloat(uvec3(texelFetch(g_forceParam, int(_928)).x, texelFetch(g_forceParam, int(_928 + 1u)).x, texelFetch(g_forceParam, int(_928 + 2u)).x));
            _939 = _938.x;
            _940 = _938.y;
            _941 = _938.z;
            uint _944 = (_857 * 24u) + 20u;
            vec4 _957 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_944)).x, texelFetch(g_forceParam, int(_944 + 1u)).x, texelFetch(g_forceParam, int(_944 + 2u)).x, texelFetch(g_forceParam, int(_944 + 3u)).x));
            _958 = _957.x;
            _959 = _957.y;
            _960 = _957.z;
            _961 = _957.w;
            _962 = _869.x == 1u;
            _963 = _869.y == 1u;
            _964 = _869.z == 1u;
            _965 = _535 - _887.x;
            _966 = _542 - _887.y;
            _967 = _549 - _887.z;
            _968 = _962 ? _906.x : _965;
            _969 = _962 ? _906.y : _966;
            _970 = _962 ? _906.z : _967;
            _971 = dot(vec3(_968, _969, _970), vec3(_968, _969, _970));
            _974 = _971 > 0.0;
            float frontier_phi_8_pred;
            float frontier_phi_8_pred_1;
            float frontier_phi_8_pred_2;
            if (_974)
            {
                precise float _1097 = _965 * _965;
                precise float _1098 = _966 * _966;
                precise float _1099 = _1097 + _1098;
                precise float _1100 = _967 * _967;
                precise float _1101 = _1100 + _1099;
                float _1102 = sqrt(_1101);
                float _1103 = inversesqrt(_971);
                precise float _1104 = _968 * _1103;
                precise float _1105 = _969 * _1103;
                precise float _1106 = _970 * _1103;
                precise float _1108 = _1102 / (isnan(0.001000000047497451305389404296875) ? _923.y : (isnan(_923.y) ? 0.001000000047497451305389404296875 : max(_923.y, 0.001000000047497451305389404296875)));
                precise float _1109 = 1.0 - _1108;
                float _1440 = isnan(0.0) ? _1109 : (isnan(_1109) ? 0.0 : max(_1109, 0.0));
                float _1110 = isnan(1.0) ? _1440 : (isnan(_1440) ? 1.0 : min(_1440, 1.0));
                float _1160;
                if (_964)
                {
                    float _1147 = inversesqrt(dot(vec3(_965, _966, _967), vec3(_965, _966, _967)));
                    precise float _1148 = _965 * _1147;
                    precise float _1149 = _966 * _1147;
                    precise float _1150 = _967 * _1147;
                    precise float _1154 = dot(vec3(_1104, _1105, _1106), vec3(_1148, _1149, _1150)) * 0.800000011920928955078125;
                    precise float _1156 = _1154 + 0.20000000298023223876953125;
                    float _1451 = isnan(0.0) ? _1156 : (isnan(_1156) ? 0.0 : max(_1156, 0.0));
                    precise float _1159 = _1110 * (isnan(1.0) ? _1451 : (isnan(_1451) ? 1.0 : min(_1451, 1.0)));
                    _1160 = _1159;
                }
                else
                {
                    _1160 = _1110;
                }
                float frontier_phi_8_pred_12_ladder;
                float frontier_phi_8_pred_12_ladder_1;
                float frontier_phi_8_pred_12_ladder_2;
                if (_1160 > 0.0)
                {
                    bool _1179 = _962 && (!_964);
                    precise float _1181 = _1102 * (-4.0);
                    precise float _1185 = 6.283184051513671875 / (isnan(0.001000000047497451305389404296875) ? _924 : (isnan(_924) ? 0.001000000047497451305389404296875 : max(_924, 0.001000000047497451305389404296875)));
                    precise float _1187 = dot(vec2(_1104, _1106), vec2(_965, _967));
                    precise float _1191 = _1185 * _1187;
                    precise float _1192 = float(_1179) * _1191;
                    precise float _1193 = _559 * _1185;
                    precise float _1194 = _1193 - _1192;
                    precise float _1195 = (_1179 ? 0.0 : _1181) + _1194;
                    precise float _1197 = _910 * sin(_1195);
                    precise float _1198 = _1105 * 0.0;
                    precise float _1199 = _1198 - _1106;
                    precise float _1200 = _1106 * 0.0;
                    precise float _1201 = _1104 * 0.0;
                    precise float _1202 = _1200 - _1201;
                    precise float _1203 = _1104 - _1198;
                    precise float _1204 = _925 * _1197;
                    float _1205 = _962 ? _1204 : 0.0;
                    float _1274;
                    if (_963)
                    {
                        precise float _1234 = _939 * 2.0;
                        precise float _1236 = _959 + _960;
                        precise float _1237 = _961 + _1236;
                        precise float _1239 = 6.283184051513671875 / (isnan(0.001000000047497451305389404296875) ? _939 : (isnan(_939) ? 0.001000000047497451305389404296875 : max(_939, 0.001000000047497451305389404296875)));
                        precise float _1240 = _958 * _1239;
                        precise float _1241 = (-0.0) - _1104;
                        precise float _1246 = dot(vec2(_1106, _1241), vec2(_965, _967)) / _1234;
                        precise float _1247 = (-0.0) - _1246;
                        float _1250 = fract(abs(_1246));
                        precise float _1251 = (-0.0) - _1250;
                        precise float _1253 = _1234 * ((_1246 >= _1247) ? _1250 : _1251);
                        precise float _1254 = _1253 * 6.283184051513671875;
                        precise float _1255 = _1254 / _1234;
                        precise float _1257 = (isnan(5.0) ? _939 : (isnan(_939) ? 5.0 : min(_939, 5.0))) * sin(_1255);
                        precise float _1258 = _1187 + _1257;
                        precise float _1259 = _939 * 0.25;
                        precise float _1261 = _559 * _958;
                        precise float _1262 = _1261 - _1259;
                        precise float _1263 = _1262 - _1258;
                        precise float _1264 = _958 * _1237;
                        precise float _1266 = _1263 / (isnan(0.001000000047497451305389404296875) ? _1264 : (isnan(_1264) ? 0.001000000047497451305389404296875 : max(_1264, 0.001000000047497451305389404296875)));
                        float _1267 = fract(_1266);
                        precise float _1269 = 1.0 - _1267;
                        float _1270 = (_1266 < 0.0) ? _1269 : _1267;
                        precise float _1271 = _1236 / _1237;
                        precise float _1272 = _959 / _1237;
                        float _1350;
                        if (_1270 < _1272)
                        {
                            precise float _1346 = _1270 / _1272;
                            _1350 = _1346;
                        }
                        else
                        {
                            float frontier_phi_27_24_ladder;
                            if (_1270 < _1271)
                            {
                                precise float _1360 = _1270 - _1272;
                                precise float _1361 = _1271 - _1272;
                                precise float _1362 = _1360 / _1361;
                                precise float _1351 = 1.0 - _1362;
                                frontier_phi_27_24_ladder = _1351;
                            }
                            else
                            {
                                frontier_phi_27_24_ladder = 0.0;
                            }
                            _1350 = frontier_phi_27_24_ladder;
                        }
                        precise float _1352 = _941 * _1350;
                        precise float _1353 = _1239 * _1187;
                        precise float _1354 = _559 * _1240;
                        precise float _1355 = _1354 - _1353;
                        precise float _1357 = _940 + sin(_1355);
                        precise float _1359 = _1352 * abs(_1357);
                        precise float _1275 = _1359 + 0.0;
                        _1274 = _1275;
                    }
                    else
                    {
                        _1274 = 0.0;
                    }
                    precise float _1276 = _891 + _1197;
                    precise float _1277 = _1276 + _1274;
                    precise float _1278 = _1104 * _1277;
                    precise float _1279 = _1105 * _1277;
                    precise float _1280 = _1106 * _1277;
                    precise float _1281 = _1199 * _1205;
                    precise float _1282 = _1202 * _1205;
                    precise float _1283 = _1203 * _1205;
                    precise float _1284 = _1281 + _1278;
                    precise float _1285 = _1282 + _1279;
                    precise float _1286 = _1283 + _1280;
                    precise float _1287 = _1160 * _1284;
                    precise float _1288 = _1160 * _1285;
                    precise float _1289 = _1160 * _1286;
                    precise float _1112 = _1287 * 0.0500000007450580596923828125;
                    precise float _1114 = _1288 * 0.0500000007450580596923828125;
                    precise float _1116 = _1289 * 0.0500000007450580596923828125;
                    frontier_phi_8_pred_12_ladder = _1112;
                    frontier_phi_8_pred_12_ladder_1 = _1114;
                    frontier_phi_8_pred_12_ladder_2 = _1116;
                }
                else
                {
                    frontier_phi_8_pred_12_ladder = 0.0;
                    frontier_phi_8_pred_12_ladder_1 = 0.0;
                    frontier_phi_8_pred_12_ladder_2 = 0.0;
                }
                frontier_phi_8_pred = frontier_phi_8_pred_12_ladder;
                frontier_phi_8_pred_1 = frontier_phi_8_pred_12_ladder_1;
                frontier_phi_8_pred_2 = frontier_phi_8_pred_12_ladder_2;
            }
            else
            {
                frontier_phi_8_pred = 0.0;
                frontier_phi_8_pred_1 = 0.0;
                frontier_phi_8_pred_2 = 0.0;
            }
            _1111 = frontier_phi_8_pred;
            _1113 = frontier_phi_8_pred_1;
            _1115 = frontier_phi_8_pred_2;
            _562 = _850 + _1111;
            _564 = _851 + _1113;
            _566 = _852 + _1115;
            uint _856 = _855 + 1u;
            if (_856 == _208)
            {
                break;
            }
            else
            {
                _850 = _562;
                _851 = _564;
                _852 = _566;
                _853 = (_855 != 3u) ? (_853 >> 8u) : _560;
                _855 = _856;
                continue;
            }
        }
        _561 = _562;
        _563 = _564;
        _565 = _566;
    }
    precise float _567 = _561 * _561;
    precise float _568 = _563 * _563;
    precise float _569 = _567 + _568;
    precise float _570 = _565 * _565;
    precise float _571 = _569 + _570;
    float _572 = sqrt(_571);
    bool _573 = _572 < 0.00011000000085914507508277893066406;
    float _578 = inversesqrt(dot(vec3(cbInstanceData._m0[_199].x, cbInstanceData._m0[_475].x, cbInstanceData._m0[_482].x), vec3(cbInstanceData._m0[_199].x, cbInstanceData._m0[_475].x, cbInstanceData._m0[_482].x)));
    precise float _579 = cbInstanceData._m0[_199].x * _578;
    precise float _580 = cbInstanceData._m0[_475].x * _578;
    precise float _581 = cbInstanceData._m0[_482].x * _578;
    float _585 = inversesqrt(dot(vec3(cbInstanceData._m0[_199].y, cbInstanceData._m0[_475].y, cbInstanceData._m0[_482].y), vec3(cbInstanceData._m0[_199].y, cbInstanceData._m0[_475].y, cbInstanceData._m0[_482].y)));
    precise float _586 = cbInstanceData._m0[_199].y * _585;
    precise float _587 = cbInstanceData._m0[_475].y * _585;
    precise float _588 = cbInstanceData._m0[_482].y * _585;
    float _592 = inversesqrt(dot(vec3(cbInstanceData._m0[_199].z, cbInstanceData._m0[_475].z, cbInstanceData._m0[_482].z), vec3(cbInstanceData._m0[_199].z, cbInstanceData._m0[_475].z, cbInstanceData._m0[_482].z)));
    precise float _593 = cbInstanceData._m0[_199].z * _592;
    precise float _594 = cbInstanceData._m0[_475].z * _592;
    precise float _595 = cbInstanceData._m0[_482].z * _592;
    precise float _596 = _579 * 0.0;
    precise float _597 = 1.0 * _586;
    precise float _598 = _597 + _596;
    precise float _599 = 0.0 * _593;
    precise float _600 = _599 + _598;
    precise float _601 = _580 * 0.0;
    precise float _602 = 1.0 * _587;
    precise float _603 = _602 + _601;
    precise float _604 = 0.0 * _594;
    precise float _605 = _604 + _603;
    precise float _606 = _581 * 0.0;
    precise float _607 = 1.0 * _588;
    precise float _608 = _607 + _606;
    precise float _609 = 0.0 * _595;
    precise float _610 = _609 + _608;
    float _614 = inversesqrt(dot(vec3(_561, _563, _565), vec3(_561, _563, _565)));
    precise float _615 = _561 * _614;
    precise float _616 = _563 * _614;
    precise float _617 = _565 * _614;
    precise float _618 = _605 * _617;
    precise float _619 = _610 * _616;
    precise float _620 = _618 - _619;
    precise float _621 = _610 * _615;
    precise float _622 = _600 * _617;
    precise float _623 = _621 - _622;
    precise float _624 = _600 * _616;
    precise float _625 = _605 * _615;
    precise float _626 = _624 - _625;
    float _630 = inversesqrt(dot(vec3(_620, _623, _626), vec3(_620, _623, _626)));
    precise float _631 = _630 * _620;
    precise float _632 = _630 * _623;
    precise float _633 = _630 * _626;
    precise float _634 = _572 + 1.0;
    precise float _636 = cbMtdParam._m0[10u].w * log2(_634);
    precise float _637 = _421 - _535;
    precise float _638 = _428 - _542;
    precise float _639 = _435 - _549;
    precise float _640 = dot(vec3(_631, _632, _633), vec3(_637, _638, _639));
    precise float _643 = _631 * _640;
    precise float _644 = _632 * _640;
    precise float _645 = _633 * _640;
    precise float _646 = _535 + _643;
    precise float _647 = _542 + _644;
    precise float _648 = _549 + _645;
    precise float _649 = _421 - _646;
    precise float _650 = _428 - _647;
    precise float _651 = _435 - _648;
    precise float _652 = _632 * _651;
    precise float _653 = _633 * _650;
    precise float _654 = _652 - _653;
    precise float _655 = _633 * _649;
    precise float _656 = _631 * _651;
    precise float _657 = _655 - _656;
    precise float _658 = _631 * _650;
    precise float _659 = _632 * _649;
    precise float _660 = _658 - _659;
    float _661 = sin(_636);
    float _662 = cos(_636);
    precise float _663 = _649 * _662;
    precise float _664 = _650 * _662;
    precise float _665 = _651 * _662;
    precise float _666 = _661 * _654;
    precise float _667 = _661 * _657;
    precise float _668 = _661 * _660;
    precise float _669 = _663 + _666;
    precise float _670 = _664 + _667;
    precise float _671 = _668 + _665;
    precise float _672 = _646 + _669;
    precise float _673 = _647 + _670;
    precise float _674 = _648 + _671;
    precise float _675 = _672 - _421;
    precise float _676 = _673 - _428;
    precise float _677 = _674 - _435;
    float _678 = _573 ? 0.0 : _675;
    float _679 = _573 ? 0.0 : _676;
    float _680 = _573 ? 0.0 : _677;
    precise float _681 = _421 + _678;
    precise float _682 = _428 + _679;
    precise float _683 = _435 + _680;
    precise float _684 = cbPerFrame._m0[22u].x + _524;
    float _686;
    float _688;
    float _690;
    if (_211)
    {
        _686 = 0.0;
        _688 = 0.0;
        _690 = 0.0;
    }
    else
    {
        uint _849 = _205.z;
        precise float _687;
        precise float _689;
        precise float _691;
        float _1135;
        float _1137;
        float _1139;
        float _975 = 0.0;
        float _976 = 0.0;
        float _977 = 0.0;
        uint _978 = _849;
        uint _980 = 0u;
        float _1014;
        float _1033;
        vec4 _1046;
        float _1047;
        float _1048;
        float _1061;
        float _1062;
        float _1063;
        float _1079;
        float _1080;
        float _1081;
        float _1082;
        bool _1083;
        bool _1084;
        bool _1085;
        precise float _1086;
        precise float _1087;
        precise float _1088;
        float _1089;
        float _1090;
        float _1091;
        precise float _1092;
        bool _1095;
        for (;;)
        {
            uint _982 = _978 & 255u;
            uint _983 = _982 * 24u;
            uvec3 _992 = uvec3(texelFetch(g_forceParam, int(_983)).x, texelFetch(g_forceParam, int(_983 + 1u)).x, texelFetch(g_forceParam, int(_983 + 2u)).x);
            uint _997 = (_982 * 24u) + 4u;
            vec4 _1010 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_997)).x, texelFetch(g_forceParam, int(_997 + 1u)).x, texelFetch(g_forceParam, int(_997 + 2u)).x, texelFetch(g_forceParam, int(_997 + 3u)).x));
            _1014 = _1010.w;
            uint _1016 = (_982 * 24u) + 8u;
            vec4 _1029 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_1016)).x, texelFetch(g_forceParam, int(_1016 + 1u)).x, texelFetch(g_forceParam, int(_1016 + 2u)).x, texelFetch(g_forceParam, int(_1016 + 3u)).x));
            _1033 = _1029.w;
            uint _1035 = (_982 * 24u) + 12u;
            _1046 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_1035)).x, texelFetch(g_forceParam, int(_1035 + 1u)).x, _1041, texelFetch(g_forceParam, int(_1035 + 3u)).x));
            _1047 = _1046.x;
            _1048 = _1046.w;
            uint _1050 = (_982 * 24u) + 16u;
            vec3 _1060 = uintBitsToFloat(uvec3(texelFetch(g_forceParam, int(_1050)).x, texelFetch(g_forceParam, int(_1050 + 1u)).x, texelFetch(g_forceParam, int(_1050 + 2u)).x));
            _1061 = _1060.x;
            _1062 = _1060.y;
            _1063 = _1060.z;
            uint _1065 = (_982 * 24u) + 20u;
            vec4 _1078 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_1065)).x, texelFetch(g_forceParam, int(_1065 + 1u)).x, texelFetch(g_forceParam, int(_1065 + 2u)).x, texelFetch(g_forceParam, int(_1065 + 3u)).x));
            _1079 = _1078.x;
            _1080 = _1078.y;
            _1081 = _1078.z;
            _1082 = _1078.w;
            _1083 = _992.x == 1u;
            _1084 = _992.y == 1u;
            _1085 = _992.z == 1u;
            _1086 = _495 - _1010.x;
            _1087 = _502 - _1010.y;
            _1088 = _509 - _1010.z;
            _1089 = _1083 ? _1029.x : _1086;
            _1090 = _1083 ? _1029.y : _1087;
            _1091 = _1083 ? _1029.z : _1088;
            _1092 = dot(vec3(_1089, _1090, _1091), vec3(_1089, _1090, _1091));
            _1095 = _1092 > 0.0;
            float frontier_phi_10_pred;
            float frontier_phi_10_pred_1;
            float frontier_phi_10_pred_2;
            if (_1095)
            {
                precise float _1121 = _1086 * _1086;
                precise float _1122 = _1087 * _1087;
                precise float _1123 = _1121 + _1122;
                precise float _1124 = _1088 * _1088;
                precise float _1125 = _1124 + _1123;
                float _1126 = sqrt(_1125);
                float _1127 = inversesqrt(_1092);
                precise float _1128 = _1089 * _1127;
                precise float _1129 = _1090 * _1127;
                precise float _1130 = _1091 * _1127;
                precise float _1132 = _1126 / (isnan(0.001000000047497451305389404296875) ? _1046.y : (isnan(_1046.y) ? 0.001000000047497451305389404296875 : max(_1046.y, 0.001000000047497451305389404296875)));
                precise float _1133 = 1.0 - _1132;
                float _1487 = isnan(0.0) ? _1133 : (isnan(_1133) ? 0.0 : max(_1133, 0.0));
                float _1134 = isnan(1.0) ? _1487 : (isnan(_1487) ? 1.0 : min(_1487, 1.0));
                float _1176;
                if (_1085)
                {
                    float _1165 = inversesqrt(dot(vec3(_1086, _1087, _1088), vec3(_1086, _1087, _1088)));
                    precise float _1166 = _1086 * _1165;
                    precise float _1167 = _1087 * _1165;
                    precise float _1168 = _1088 * _1165;
                    precise float _1172 = dot(vec3(_1128, _1129, _1130), vec3(_1166, _1167, _1168)) * 0.800000011920928955078125;
                    precise float _1173 = _1172 + 0.20000000298023223876953125;
                    float _1498 = isnan(0.0) ? _1173 : (isnan(_1173) ? 0.0 : max(_1173, 0.0));
                    precise float _1175 = _1134 * (isnan(1.0) ? _1498 : (isnan(_1498) ? 1.0 : min(_1498, 1.0)));
                    _1176 = _1175;
                }
                else
                {
                    _1176 = _1134;
                }
                float frontier_phi_10_pred_15_ladder;
                float frontier_phi_10_pred_15_ladder_1;
                float frontier_phi_10_pred_15_ladder_2;
                if (_1176 > 0.0)
                {
                    bool _1207 = _1083 && (!_1085);
                    precise float _1209 = _1126 * (-4.0);
                    precise float _1212 = 6.283184051513671875 / (isnan(0.001000000047497451305389404296875) ? _1047 : (isnan(_1047) ? 0.001000000047497451305389404296875 : max(_1047, 0.001000000047497451305389404296875)));
                    precise float _1213 = cbMtdParam._m0[11u].y * _1212;
                    precise float _1214 = dot(vec2(_1128, _1130), vec2(_1086, _1088));
                    precise float _1217 = _1214 * _1213;
                    precise float _1218 = float(_1207) * _1217;
                    precise float _1219 = _684 * _1213;
                    precise float _1220 = _1219 - _1218;
                    precise float _1221 = (_1207 ? 0.0 : _1209) + _1220;
                    precise float _1223 = _1033 * sin(_1221);
                    precise float _1224 = _1129 * 0.0;
                    precise float _1225 = _1224 - _1130;
                    precise float _1226 = _1130 * 0.0;
                    precise float _1227 = _1128 * 0.0;
                    precise float _1228 = _1226 - _1227;
                    precise float _1229 = _1128 - _1224;
                    precise float _1230 = _1048 * _1223;
                    float _1231 = _1083 ? _1230 : 0.0;
                    float _1330;
                    if (_1084)
                    {
                        precise float _1292 = _1061 * 2.0;
                        precise float _1293 = _1080 + _1081;
                        precise float _1294 = _1082 + _1293;
                        precise float _1296 = 6.283184051513671875 / (isnan(0.001000000047497451305389404296875) ? _1061 : (isnan(_1061) ? 0.001000000047497451305389404296875 : max(_1061, 0.001000000047497451305389404296875)));
                        precise float _1297 = cbMtdParam._m0[11u].y * _1296;
                        precise float _1298 = _1079 * _1297;
                        precise float _1299 = (-0.0) - _1128;
                        precise float _1303 = dot(vec2(_1130, _1299), vec2(_1086, _1088)) / _1292;
                        precise float _1304 = (-0.0) - _1303;
                        float _1307 = fract(abs(_1303));
                        precise float _1308 = (-0.0) - _1307;
                        precise float _1310 = _1292 * ((_1303 >= _1304) ? _1307 : _1308);
                        precise float _1311 = _1310 * 6.283184051513671875;
                        precise float _1312 = _1311 / _1292;
                        precise float _1314 = (isnan(5.0) ? _1061 : (isnan(_1061) ? 5.0 : min(_1061, 5.0))) * sin(_1312);
                        precise float _1315 = _1214 + _1314;
                        precise float _1316 = _1061 * 0.25;
                        precise float _1317 = _684 * _1079;
                        precise float _1318 = _1317 - _1316;
                        precise float _1319 = _1318 - _1315;
                        precise float _1320 = _1079 * _1294;
                        precise float _1322 = _1319 / (isnan(0.001000000047497451305389404296875) ? _1320 : (isnan(_1320) ? 0.001000000047497451305389404296875 : max(_1320, 0.001000000047497451305389404296875)));
                        float _1323 = fract(_1322);
                        precise float _1325 = 1.0 - _1323;
                        float _1326 = (_1322 < 0.0) ? _1325 : _1323;
                        precise float _1327 = _1293 / _1294;
                        precise float _1328 = _1080 / _1294;
                        float _1363;
                        if (_1326 < _1328)
                        {
                            precise float _1348 = _1326 / _1328;
                            _1363 = _1348;
                        }
                        else
                        {
                            float frontier_phi_29_26_ladder;
                            if (_1326 < _1327)
                            {
                                precise float _1373 = _1326 - _1328;
                                precise float _1374 = _1327 - _1328;
                                precise float _1375 = _1373 / _1374;
                                precise float _1364 = 1.0 - _1375;
                                frontier_phi_29_26_ladder = _1364;
                            }
                            else
                            {
                                frontier_phi_29_26_ladder = 0.0;
                            }
                            _1363 = frontier_phi_29_26_ladder;
                        }
                        precise float _1365 = _1063 * _1363;
                        precise float _1366 = _1297 * _1214;
                        precise float _1367 = _684 * _1298;
                        precise float _1368 = _1367 - _1366;
                        precise float _1370 = _1062 + sin(_1368);
                        precise float _1372 = _1365 * abs(_1370);
                        precise float _1331 = _1372 + 0.0;
                        _1330 = _1331;
                    }
                    else
                    {
                        _1330 = 0.0;
                    }
                    precise float _1332 = _1014 + _1223;
                    precise float _1333 = _1332 + _1330;
                    precise float _1334 = _1128 * _1333;
                    precise float _1335 = _1129 * _1333;
                    precise float _1336 = _1130 * _1333;
                    precise float _1337 = _1225 * _1231;
                    precise float _1338 = _1228 * _1231;
                    precise float _1339 = _1229 * _1231;
                    precise float _1340 = _1337 + _1334;
                    precise float _1341 = _1338 + _1335;
                    precise float _1342 = _1339 + _1336;
                    precise float _1343 = _1176 * _1340;
                    precise float _1344 = _1176 * _1341;
                    precise float _1345 = _1176 * _1342;
                    precise float _1136 = _1343 * 0.0500000007450580596923828125;
                    precise float _1138 = _1344 * 0.0500000007450580596923828125;
                    precise float _1140 = _1345 * 0.0500000007450580596923828125;
                    frontier_phi_10_pred_15_ladder = _1136;
                    frontier_phi_10_pred_15_ladder_1 = _1138;
                    frontier_phi_10_pred_15_ladder_2 = _1140;
                }
                else
                {
                    frontier_phi_10_pred_15_ladder = 0.0;
                    frontier_phi_10_pred_15_ladder_1 = 0.0;
                    frontier_phi_10_pred_15_ladder_2 = 0.0;
                }
                frontier_phi_10_pred = frontier_phi_10_pred_15_ladder;
                frontier_phi_10_pred_1 = frontier_phi_10_pred_15_ladder_1;
                frontier_phi_10_pred_2 = frontier_phi_10_pred_15_ladder_2;
            }
            else
            {
                frontier_phi_10_pred = 0.0;
                frontier_phi_10_pred_1 = 0.0;
                frontier_phi_10_pred_2 = 0.0;
            }
            _1135 = frontier_phi_10_pred;
            _1137 = frontier_phi_10_pred_1;
            _1139 = frontier_phi_10_pred_2;
            _687 = _975 + _1135;
            _689 = _976 + _1137;
            _691 = _977 + _1139;
            uint _981 = _980 + 1u;
            if (_981 == _208)
            {
                break;
            }
            else
            {
                _975 = _687;
                _976 = _689;
                _977 = _691;
                _978 = (_980 != 3u) ? (_978 >> 8u) : _560;
                _980 = _981;
                continue;
            }
        }
        _686 = _687;
        _688 = _689;
        _690 = _691;
    }
    precise float _692 = _686 * _686;
    precise float _693 = _688 * _688;
    precise float _694 = _692 + _693;
    precise float _695 = _690 * _690;
    precise float _696 = _694 + _695;
    float _697 = sqrt(_696);
    bool _698 = _697 < 0.00011000000085914507508277893066406;
    float _702 = inversesqrt(dot(vec3(_686, _688, _690), vec3(_686, _688, _690)));
    precise float _703 = _686 * _702;
    precise float _704 = _688 * _702;
    precise float _705 = _690 * _702;
    precise float _706 = _605 * _705;
    precise float _707 = _610 * _704;
    precise float _708 = _706 - _707;
    precise float _709 = _610 * _703;
    precise float _710 = _600 * _705;
    precise float _711 = _709 - _710;
    precise float _712 = _600 * _704;
    precise float _713 = _605 * _703;
    precise float _714 = _712 - _713;
    float _718 = inversesqrt(dot(vec3(_708, _711, _714), vec3(_708, _711, _714)));
    precise float _719 = _718 * _708;
    precise float _720 = _718 * _711;
    precise float _721 = _718 * _714;
    precise float _722 = _697 + 1.0;
    precise float _724 = cbMtdParam._m0[10u].y * log2(_722);
    precise float _725 = _681 - _495;
    precise float _726 = _682 - _502;
    precise float _727 = _683 - _509;
    precise float _728 = dot(vec3(_719, _720, _721), vec3(_725, _726, _727));
    precise float _731 = _719 * _728;
    precise float _732 = _720 * _728;
    precise float _733 = _721 * _728;
    precise float _734 = _495 + _731;
    precise float _735 = _502 + _732;
    precise float _736 = _509 + _733;
    precise float _737 = _681 - _734;
    precise float _738 = _682 - _735;
    precise float _739 = _683 - _736;
    precise float _740 = _720 * _739;
    precise float _741 = _721 * _738;
    precise float _742 = _740 - _741;
    precise float _743 = _721 * _737;
    precise float _744 = _719 * _739;
    precise float _745 = _743 - _744;
    precise float _746 = _719 * _738;
    precise float _747 = _720 * _737;
    precise float _748 = _746 - _747;
    float _749 = sin(_724);
    float _750 = cos(_724);
    precise float _751 = _737 * _750;
    precise float _752 = _738 * _750;
    precise float _753 = _739 * _750;
    precise float _754 = _749 * _742;
    precise float _755 = _749 * _745;
    precise float _756 = _749 * _748;
    precise float _757 = _751 + _754;
    precise float _758 = _752 + _755;
    precise float _759 = _756 + _753;
    precise float _760 = _734 + _757;
    precise float _761 = _735 + _758;
    precise float _762 = _736 + _759;
    precise float _763 = _760 - _681;
    precise float _764 = _761 - _682;
    precise float _765 = _762 - _683;
    precise float _769 = _678 + (_698 ? 0.0 : _763);
    precise float _770 = _679 + (_698 ? 0.0 : _764);
    precise float _771 = _680 + (_698 ? 0.0 : _765);
    precise float _772 = _421 + _769;
    precise float _773 = _428 + _770;
    precise float _774 = _435 + _771;
    precise float _775 = _772 - cbSceneParam._m0[3u].x;
    precise float _776 = _773 - cbSceneParam._m0[3u].y;
    precise float _777 = _774 - cbSceneParam._m0[3u].z;
    precise float _805 = cbSceneParam._m0[24u].x * _775;
    precise float _806 = _776 * cbSceneParam._m0[24u].y;
    precise float _807 = _806 + _805;
    precise float _808 = _777 * cbSceneParam._m0[24u].z;
    precise float _809 = _808 + _807;
    precise float _810 = 1.0 * cbSceneParam._m0[24u].w;
    precise float _811 = _810 + _809;
    precise float _812 = cbSceneParam._m0[25u].x * _775;
    precise float _813 = _776 * cbSceneParam._m0[25u].y;
    precise float _814 = _813 + _812;
    precise float _815 = _777 * cbSceneParam._m0[25u].z;
    precise float _816 = _815 + _814;
    precise float _817 = 1.0 * cbSceneParam._m0[25u].w;
    precise float _818 = _817 + _816;
    precise float _819 = cbSceneParam._m0[26u].x * _775;
    precise float _820 = _776 * cbSceneParam._m0[26u].y;
    precise float _821 = _820 + _819;
    precise float _822 = _777 * cbSceneParam._m0[26u].z;
    precise float _823 = _822 + _821;
    precise float _824 = 1.0 * cbSceneParam._m0[26u].w;
    precise float _825 = _824 + _823;
    precise float _826 = cbSceneParam._m0[27u].x * _775;
    precise float _827 = _776 * cbSceneParam._m0[27u].y;
    precise float _828 = _827 + _826;
    precise float _829 = _777 * cbSceneParam._m0[27u].z;
    precise float _830 = _829 + _828;
    precise float _831 = 1.0 * cbSceneParam._m0[27u].w;
    precise float _832 = _831 + _830;
    gl_Position.x = _811;
    gl_Position.y = _818;
    gl_Position.z = _825;
    gl_Position.w = _832;
    NORMAL_1.x = fma(_182, _409, fma(_181, _406, _403 * _179));
    NORMAL_1.y = fma(_182, _410, fma(_181, _407, _404 * _179));
    NORMAL_1.z = fma(_182, _411, fma(_181, _408, _405 * _179));
    NORMAL_1.w = float(_222);
    TANGENT_1.x = fma(_193, _409, fma(_192, _406, _403 * _191));
    TANGENT_1.y = fma(_193, _410, fma(_192, _407, _404 * _191));
    TANGENT_1.z = fma(_193, _411, fma(_192, _408, _405 * _191));
    TANGENT_1.w = (float(TANGENT.w) + (-127.0)) * 0.0078740157186985015869140625;
    TEXCOORD_2 = ((float(int(uint(TEXCOORD.x))) * 0.00048828125) * cbTexScroll._m0[0u].x) + cbTexScroll._m0[0u].z;
    TEXCOORD_1_1 = ((float(int(uint(TEXCOORD.y))) * 0.00048828125) * cbTexScroll._m0[0u].y) + cbTexScroll._m0[0u].w;
    TEXCOORD_3.x = TEXCOORD_1.x;
    TEXCOORD_3.y = TEXCOORD_1.y;
    TEXCOORD_3.z = TEXCOORD_1.z;
    TEXCOORD_3.w = COLOR_1.x;
    TEXCOORD_11 = sqrt(((_441 * _441) + (_442 * _442)) + (_443 * _443));
}


