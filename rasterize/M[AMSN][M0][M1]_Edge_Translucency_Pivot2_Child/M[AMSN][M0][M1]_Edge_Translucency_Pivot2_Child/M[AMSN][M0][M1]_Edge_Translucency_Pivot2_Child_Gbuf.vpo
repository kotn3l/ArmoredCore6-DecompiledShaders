#version 460

out float gl_ClipDistance[2];

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[12];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 5, std140) uniform cbObjMatrixUBO
{
    vec4 _m0[6];
} cbObjMatrix;

layout(set = 0, binding = 10, std140) uniform cbInstanceIdxParamUBO
{
    vec4 _m0[1];
} cbInstanceIdxParam;

layout(set = 0, binding = 11, std140) uniform cbTexScrollUBO
{
    vec4 _m0[4];
} cbTexScroll;

layout(set = 0, binding = 26) uniform usamplerBuffer g_forceParam;
layout(set = 0, binding = 25) uniform usamplerBuffer g_InstanceIndexBuffer;

layout(location = 0) in vec3 POSITION;
layout(location = 1) in uvec4 NORMAL;
layout(location = 2) in uvec4 TANGENT;
layout(location = 3) in vec4 COLOR_1;
layout(location = 4) in ivec2 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_1;
layout(location = 1) out vec4 NORMAL_1;
layout(location = 2) out vec4 TANGENT_1;
layout(location = 3) out float TEXCOORD_2;
layout(location = 3, component = 1) out float TEXCOORD_1_1;
layout(location = 4) out vec4 TEXCOORD_3;
layout(location = 3, component = 2) out float TEXCOORD_11;

uint _763;
uint _886;

void main()
{
    uint _81 = uint(gl_InstanceIndex) - uint(gl_BaseInstance);
    gl_Position.x = 0.0;
    gl_Position.y = 0.0;
    gl_Position.z = 0.0;
    gl_Position.w = 0.0;
    NORMAL_1.x = 0.0;
    NORMAL_1.y = 0.0;
    NORMAL_1.z = 0.0;
    NORMAL_1.w = 0.0;
    TANGENT_1.x = 0.0;
    TANGENT_1.y = 0.0;
    TANGENT_1.z = 0.0;
    TANGENT_1.w = 0.0;
    TEXCOORD_2 = 0.0;
    TEXCOORD_1_1 = 0.0;
    TEXCOORD_3.x = 0.0;
    TEXCOORD_3.y = 0.0;
    TEXCOORD_3.z = 0.0;
    TEXCOORD_3.w = 0.0;
    TEXCOORD_11 = 0.0;
    gl_ClipDistance[0u] = 0.0;
    gl_ClipDistance[1u] = 0.0;
    float _168 = (float(NORMAL.x) + (-127.0)) * 0.0078740157186985015869140625;
    float _170 = (float(NORMAL.y) + (-127.0)) * 0.0078740157186985015869140625;
    float _171 = (float(NORMAL.z) + (-127.0)) * 0.0078740157186985015869140625;
    float _181 = (float(TANGENT.x) + (-127.0)) * 0.0078740157186985015869140625;
    float _182 = (float(TANGENT.y) + (-127.0)) * 0.0078740157186985015869140625;
    float _183 = (float(TANGENT.z) + (-127.0)) * 0.0078740157186985015869140625;
    uint _185 = _81 * 13u;
    uvec4 _191 = floatBitsToUint(cbInstanceData._m0[_185 + 7u]);
    uint _194 = min(_191.y, 8u);
    bool _197 = _194 == 0u;
    precise float _198 = POSITION.x + 0.0;
    precise float _199 = POSITION.y + 0.0;
    precise float _200 = POSITION.z + 0.0;
    uint _205 = floatBitsToUint(cbInstanceIdxParam._m0[0u]).x + _81;
    uvec4 _207 = texelFetch(g_InstanceIndexBuffer, int(_205));
    uint _208 = _207.x;
    uint _210 = _208 * 13u;
    uint _217 = (floatBitsToUint(cbInstanceData._m0[_210 + 4u]).x + uint(float(NORMAL.w))) * 3u;
    uint _224 = _217 + 1u;
    uint _231 = _217 + 2u;
    precise float _238 = _198 * cbObjMatrix._m0[_217].x;
    precise float _239 = _199 * cbObjMatrix._m0[_217].y;
    precise float _240 = _239 + _238;
    precise float _241 = _200 * cbObjMatrix._m0[_217].z;
    precise float _242 = _241 + _240;
    precise float _243 = 1.0 * cbObjMatrix._m0[_217].w;
    precise float _245 = _243 + _242;
    precise float _246 = _198 * cbObjMatrix._m0[_224].x;
    precise float _247 = _199 * cbObjMatrix._m0[_224].y;
    precise float _248 = _247 + _246;
    precise float _249 = _200 * cbObjMatrix._m0[_224].z;
    precise float _250 = _249 + _248;
    precise float _251 = 1.0 * cbObjMatrix._m0[_224].w;
    precise float _252 = _251 + _250;
    precise float _253 = _198 * cbObjMatrix._m0[_231].x;
    precise float _254 = _199 * cbObjMatrix._m0[_231].y;
    precise float _255 = _254 + _253;
    precise float _256 = _200 * cbObjMatrix._m0[_231].z;
    precise float _257 = _256 + _255;
    precise float _258 = 1.0 * cbObjMatrix._m0[_231].w;
    precise float _259 = _258 + _257;
    float _265 = cbSceneParam._m0[3u].x - _245;
    float _266 = cbSceneParam._m0[3u].y - _252;
    float _267 = cbSceneParam._m0[3u].z - _259;
    uint _299 = _185 + 1u;
    uint _306 = _185 + 2u;
    precise float _313 = TEXCOORD_1.x * cbInstanceData._m0[_185].x;
    precise float _314 = TEXCOORD_1.y * cbInstanceData._m0[_185].y;
    precise float _315 = _314 + _313;
    precise float _316 = TEXCOORD_1.z * cbInstanceData._m0[_185].z;
    precise float _317 = _316 + _315;
    precise float _318 = 1.0 * cbInstanceData._m0[_185].w;
    precise float _319 = _318 + _317;
    precise float _320 = TEXCOORD_1.x * cbInstanceData._m0[_299].x;
    precise float _321 = TEXCOORD_1.y * cbInstanceData._m0[_299].y;
    precise float _322 = _321 + _320;
    precise float _323 = TEXCOORD_1.z * cbInstanceData._m0[_299].z;
    precise float _324 = _323 + _322;
    precise float _325 = 1.0 * cbInstanceData._m0[_299].w;
    precise float _326 = _325 + _324;
    precise float _327 = TEXCOORD_1.x * cbInstanceData._m0[_306].x;
    precise float _328 = TEXCOORD_1.y * cbInstanceData._m0[_306].y;
    precise float _329 = _328 + _327;
    precise float _330 = TEXCOORD_1.z * cbInstanceData._m0[_306].z;
    precise float _331 = _330 + _329;
    precise float _332 = 1.0 * cbInstanceData._m0[_306].w;
    precise float _333 = _332 + _331;
    precise float _339 = _245 - _319;
    precise float _340 = _252 - _326;
    precise float _341 = _259 - _333;
    precise float _342 = _339 * _339;
    precise float _343 = _340 * _340;
    precise float _344 = _342 + _343;
    precise float _345 = _341 * _341;
    precise float _346 = _344 + _345;
    precise float _348 = cbMtdParam._m0[10u].z * sqrt(_346);
    precise float _353 = cbInstanceData._m0[_185].x * 0.0;
    precise float _354 = 0.0 * cbInstanceData._m0[_185].y;
    precise float _355 = _354 + _353;
    precise float _356 = 0.0 * cbInstanceData._m0[_185].z;
    precise float _357 = _356 + _355;
    precise float _358 = 1.0 * cbInstanceData._m0[_185].w;
    precise float _359 = _358 + _357;
    precise float _360 = cbInstanceData._m0[_299].x * 0.0;
    precise float _361 = 0.0 * cbInstanceData._m0[_299].y;
    precise float _362 = _361 + _360;
    precise float _363 = 0.0 * cbInstanceData._m0[_299].z;
    precise float _364 = _363 + _362;
    precise float _365 = 1.0 * cbInstanceData._m0[_299].w;
    precise float _366 = _365 + _364;
    precise float _367 = cbInstanceData._m0[_306].x * 0.0;
    precise float _368 = 0.0 * cbInstanceData._m0[_306].y;
    precise float _369 = _368 + _367;
    precise float _370 = 0.0 * cbInstanceData._m0[_306].z;
    precise float _371 = _370 + _369;
    precise float _372 = 1.0 * cbInstanceData._m0[_306].w;
    precise float _373 = _372 + _371;
    precise float _376 = _245 * _245;
    precise float _377 = _252 * _252;
    precise float _378 = _376 + _377;
    precise float _379 = _259 * _259;
    precise float _380 = _378 + _379;
    precise float _382 = cbMtdParam._m0[11u].x * sqrt(_380);
    precise float _383 = cbPerFrame._m0[22u].x + _382;
    uint _384 = _191.w;
    float _385;
    float _387;
    float _389;
    if (_197)
    {
        _385 = 0.0;
        _387 = 0.0;
        _389 = 0.0;
    }
    else
    {
        uint _509 = _191.z;
        precise float _386;
        precise float _388;
        precise float _390;
        float _957;
        float _959;
        float _961;
        float _695 = 0.0;
        float _696 = 0.0;
        float _697 = 0.0;
        uint _698 = _509;
        uint _700 = 0u;
        float _736;
        float _755;
        vec4 _768;
        float _769;
        float _770;
        float _784;
        float _785;
        float _786;
        float _803;
        float _804;
        float _805;
        float _806;
        bool _807;
        bool _808;
        bool _809;
        precise float _810;
        precise float _811;
        precise float _812;
        float _813;
        float _814;
        float _815;
        precise float _816;
        bool _819;
        for (;;)
        {
            uint _702 = _698 & 255u;
            uint _704 = _702 * 24u;
            uvec3 _714 = uvec3(texelFetch(g_forceParam, int(_704)).x, texelFetch(g_forceParam, int(_704 + 1u)).x, texelFetch(g_forceParam, int(_704 + 2u)).x);
            uint _719 = (_702 * 24u) + 4u;
            vec4 _732 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_719)).x, texelFetch(g_forceParam, int(_719 + 1u)).x, texelFetch(g_forceParam, int(_719 + 2u)).x, texelFetch(g_forceParam, int(_719 + 3u)).x));
            _736 = _732.w;
            uint _738 = (_702 * 24u) + 8u;
            vec4 _751 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_738)).x, texelFetch(g_forceParam, int(_738 + 1u)).x, texelFetch(g_forceParam, int(_738 + 2u)).x, texelFetch(g_forceParam, int(_738 + 3u)).x));
            _755 = _751.w;
            uint _757 = (_702 * 24u) + 12u;
            _768 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_757)).x, texelFetch(g_forceParam, int(_757 + 1u)).x, _763, texelFetch(g_forceParam, int(_757 + 3u)).x));
            _769 = _768.x;
            _770 = _768.w;
            uint _773 = (_702 * 24u) + 16u;
            vec3 _783 = uintBitsToFloat(uvec3(texelFetch(g_forceParam, int(_773)).x, texelFetch(g_forceParam, int(_773 + 1u)).x, texelFetch(g_forceParam, int(_773 + 2u)).x));
            _784 = _783.x;
            _785 = _783.y;
            _786 = _783.z;
            uint _789 = (_702 * 24u) + 20u;
            vec4 _802 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_789)).x, texelFetch(g_forceParam, int(_789 + 1u)).x, texelFetch(g_forceParam, int(_789 + 2u)).x, texelFetch(g_forceParam, int(_789 + 3u)).x));
            _803 = _802.x;
            _804 = _802.y;
            _805 = _802.z;
            _806 = _802.w;
            _807 = _714.x == 1u;
            _808 = _714.y == 1u;
            _809 = _714.z == 1u;
            _810 = _359 - _732.x;
            _811 = _366 - _732.y;
            _812 = _373 - _732.z;
            _813 = _807 ? _751.x : _810;
            _814 = _807 ? _751.y : _811;
            _815 = _807 ? _751.z : _812;
            _816 = dot(vec3(_813, _814, _815), vec3(_813, _814, _815));
            _819 = _816 > 0.0;
            float frontier_phi_8_pred;
            float frontier_phi_8_pred_1;
            float frontier_phi_8_pred_2;
            if (_819)
            {
                precise float _942 = _810 * _810;
                precise float _943 = _811 * _811;
                precise float _944 = _942 + _943;
                precise float _945 = _812 * _812;
                precise float _946 = _945 + _944;
                float _947 = sqrt(_946);
                float _948 = inversesqrt(_816);
                precise float _949 = _813 * _948;
                precise float _950 = _814 * _948;
                precise float _951 = _815 * _948;
                precise float _954 = _947 / (isnan(0.001000000047497451305389404296875) ? _768.y : (isnan(_768.y) ? 0.001000000047497451305389404296875 : max(_768.y, 0.001000000047497451305389404296875)));
                precise float _955 = 1.0 - _954;
                float _1281 = isnan(0.0) ? _955 : (isnan(_955) ? 0.0 : max(_955, 0.0));
                float _956 = isnan(1.0) ? _1281 : (isnan(_1281) ? 1.0 : min(_1281, 1.0));
                float _1006;
                if (_809)
                {
                    float _993 = inversesqrt(dot(vec3(_810, _811, _812), vec3(_810, _811, _812)));
                    precise float _994 = _810 * _993;
                    precise float _995 = _811 * _993;
                    precise float _996 = _812 * _993;
                    precise float _1000 = dot(vec3(_949, _950, _951), vec3(_994, _995, _996)) * 0.800000011920928955078125;
                    precise float _1002 = _1000 + 0.20000000298023223876953125;
                    float _1292 = isnan(0.0) ? _1002 : (isnan(_1002) ? 0.0 : max(_1002, 0.0));
                    precise float _1005 = _956 * (isnan(1.0) ? _1292 : (isnan(_1292) ? 1.0 : min(_1292, 1.0)));
                    _1006 = _1005;
                }
                else
                {
                    _1006 = _956;
                }
                float frontier_phi_8_pred_12_ladder;
                float frontier_phi_8_pred_12_ladder_1;
                float frontier_phi_8_pred_12_ladder_2;
                if (_1006 > 0.0)
                {
                    bool _1025 = _807 && (!_809);
                    precise float _1027 = _947 * (-4.0);
                    precise float _1031 = 6.283184051513671875 / (isnan(0.001000000047497451305389404296875) ? _769 : (isnan(_769) ? 0.001000000047497451305389404296875 : max(_769, 0.001000000047497451305389404296875)));
                    precise float _1033 = dot(vec2(_949, _951), vec2(_810, _812));
                    precise float _1037 = _1031 * _1033;
                    precise float _1038 = float(_1025) * _1037;
                    precise float _1039 = _383 * _1031;
                    precise float _1040 = _1039 - _1038;
                    precise float _1041 = (_1025 ? 0.0 : _1027) + _1040;
                    precise float _1043 = _755 * sin(_1041);
                    precise float _1044 = _950 * 0.0;
                    precise float _1045 = _1044 - _951;
                    precise float _1046 = _951 * 0.0;
                    precise float _1047 = _949 * 0.0;
                    precise float _1048 = _1046 - _1047;
                    precise float _1049 = _949 - _1044;
                    precise float _1050 = _770 * _1043;
                    float _1051 = _807 ? _1050 : 0.0;
                    float _1120;
                    if (_808)
                    {
                        precise float _1080 = _784 * 2.0;
                        precise float _1082 = _804 + _805;
                        precise float _1083 = _806 + _1082;
                        precise float _1085 = 6.283184051513671875 / (isnan(0.001000000047497451305389404296875) ? _784 : (isnan(_784) ? 0.001000000047497451305389404296875 : max(_784, 0.001000000047497451305389404296875)));
                        precise float _1086 = _803 * _1085;
                        precise float _1087 = (-0.0) - _949;
                        precise float _1092 = dot(vec2(_951, _1087), vec2(_810, _812)) / _1080;
                        precise float _1093 = (-0.0) - _1092;
                        float _1096 = fract(abs(_1092));
                        precise float _1097 = (-0.0) - _1096;
                        precise float _1099 = _1080 * ((_1092 >= _1093) ? _1096 : _1097);
                        precise float _1100 = _1099 * 6.283184051513671875;
                        precise float _1101 = _1100 / _1080;
                        precise float _1103 = (isnan(5.0) ? _784 : (isnan(_784) ? 5.0 : min(_784, 5.0))) * sin(_1101);
                        precise float _1104 = _1033 + _1103;
                        precise float _1105 = _784 * 0.25;
                        precise float _1107 = _383 * _803;
                        precise float _1108 = _1107 - _1105;
                        precise float _1109 = _1108 - _1104;
                        precise float _1110 = _803 * _1083;
                        precise float _1112 = _1109 / (isnan(0.001000000047497451305389404296875) ? _1110 : (isnan(_1110) ? 0.001000000047497451305389404296875 : max(_1110, 0.001000000047497451305389404296875)));
                        float _1113 = fract(_1112);
                        precise float _1115 = 1.0 - _1113;
                        float _1116 = (_1112 < 0.0) ? _1115 : _1113;
                        precise float _1117 = _1082 / _1083;
                        precise float _1118 = _804 / _1083;
                        float _1196;
                        if (_1116 < _1118)
                        {
                            precise float _1192 = _1116 / _1118;
                            _1196 = _1192;
                        }
                        else
                        {
                            float frontier_phi_27_24_ladder;
                            if (_1116 < _1117)
                            {
                                precise float _1206 = _1116 - _1118;
                                precise float _1207 = _1117 - _1118;
                                precise float _1208 = _1206 / _1207;
                                precise float _1197 = 1.0 - _1208;
                                frontier_phi_27_24_ladder = _1197;
                            }
                            else
                            {
                                frontier_phi_27_24_ladder = 0.0;
                            }
                            _1196 = frontier_phi_27_24_ladder;
                        }
                        precise float _1198 = _786 * _1196;
                        precise float _1199 = _1085 * _1033;
                        precise float _1200 = _383 * _1086;
                        precise float _1201 = _1200 - _1199;
                        precise float _1203 = _785 + sin(_1201);
                        precise float _1205 = _1198 * abs(_1203);
                        precise float _1121 = _1205 + 0.0;
                        _1120 = _1121;
                    }
                    else
                    {
                        _1120 = 0.0;
                    }
                    precise float _1122 = _736 + _1043;
                    precise float _1123 = _1122 + _1120;
                    precise float _1124 = _949 * _1123;
                    precise float _1125 = _950 * _1123;
                    precise float _1126 = _951 * _1123;
                    precise float _1127 = _1045 * _1051;
                    precise float _1128 = _1048 * _1051;
                    precise float _1129 = _1049 * _1051;
                    precise float _1130 = _1127 + _1124;
                    precise float _1131 = _1128 + _1125;
                    precise float _1132 = _1129 + _1126;
                    precise float _1133 = _1006 * _1130;
                    precise float _1134 = _1006 * _1131;
                    precise float _1135 = _1006 * _1132;
                    precise float _958 = _1133 * 0.0500000007450580596923828125;
                    precise float _960 = _1134 * 0.0500000007450580596923828125;
                    precise float _962 = _1135 * 0.0500000007450580596923828125;
                    frontier_phi_8_pred_12_ladder = _958;
                    frontier_phi_8_pred_12_ladder_1 = _960;
                    frontier_phi_8_pred_12_ladder_2 = _962;
                }
                else
                {
                    frontier_phi_8_pred_12_ladder = 0.0;
                    frontier_phi_8_pred_12_ladder_1 = 0.0;
                    frontier_phi_8_pred_12_ladder_2 = 0.0;
                }
                frontier_phi_8_pred = frontier_phi_8_pred_12_ladder;
                frontier_phi_8_pred_1 = frontier_phi_8_pred_12_ladder_1;
                frontier_phi_8_pred_2 = frontier_phi_8_pred_12_ladder_2;
            }
            else
            {
                frontier_phi_8_pred = 0.0;
                frontier_phi_8_pred_1 = 0.0;
                frontier_phi_8_pred_2 = 0.0;
            }
            _957 = frontier_phi_8_pred;
            _959 = frontier_phi_8_pred_1;
            _961 = frontier_phi_8_pred_2;
            _386 = _695 + _957;
            _388 = _696 + _959;
            _390 = _697 + _961;
            uint _701 = _700 + 1u;
            if (_701 == _194)
            {
                break;
            }
            else
            {
                _695 = _386;
                _696 = _388;
                _697 = _390;
                _698 = (_700 != 3u) ? (_698 >> 8u) : _384;
                _700 = _701;
                continue;
            }
        }
        _385 = _386;
        _387 = _388;
        _389 = _390;
    }
    precise float _391 = _385 * _385;
    precise float _392 = _387 * _387;
    precise float _393 = _391 + _392;
    precise float _394 = _389 * _389;
    precise float _395 = _393 + _394;
    float _396 = sqrt(_395);
    bool _397 = _396 < 0.00011000000085914507508277893066406;
    float _402 = inversesqrt(dot(vec3(cbInstanceData._m0[_185].x, cbInstanceData._m0[_299].x, cbInstanceData._m0[_306].x), vec3(cbInstanceData._m0[_185].x, cbInstanceData._m0[_299].x, cbInstanceData._m0[_306].x)));
    precise float _403 = cbInstanceData._m0[_185].x * _402;
    precise float _404 = cbInstanceData._m0[_299].x * _402;
    precise float _405 = cbInstanceData._m0[_306].x * _402;
    float _409 = inversesqrt(dot(vec3(cbInstanceData._m0[_185].y, cbInstanceData._m0[_299].y, cbInstanceData._m0[_306].y), vec3(cbInstanceData._m0[_185].y, cbInstanceData._m0[_299].y, cbInstanceData._m0[_306].y)));
    precise float _410 = cbInstanceData._m0[_185].y * _409;
    precise float _411 = cbInstanceData._m0[_299].y * _409;
    precise float _412 = cbInstanceData._m0[_306].y * _409;
    float _416 = inversesqrt(dot(vec3(cbInstanceData._m0[_185].z, cbInstanceData._m0[_299].z, cbInstanceData._m0[_306].z), vec3(cbInstanceData._m0[_185].z, cbInstanceData._m0[_299].z, cbInstanceData._m0[_306].z)));
    precise float _417 = cbInstanceData._m0[_185].z * _416;
    precise float _418 = cbInstanceData._m0[_299].z * _416;
    precise float _419 = cbInstanceData._m0[_306].z * _416;
    precise float _420 = _403 * 0.0;
    precise float _421 = 1.0 * _410;
    precise float _422 = _421 + _420;
    precise float _423 = 0.0 * _417;
    precise float _424 = _423 + _422;
    precise float _425 = _404 * 0.0;
    precise float _426 = 1.0 * _411;
    precise float _427 = _426 + _425;
    precise float _428 = 0.0 * _418;
    precise float _429 = _428 + _427;
    precise float _430 = _405 * 0.0;
    precise float _431 = 1.0 * _412;
    precise float _432 = _431 + _430;
    precise float _433 = 0.0 * _419;
    precise float _434 = _433 + _432;
    float _438 = inversesqrt(dot(vec3(_385, _387, _389), vec3(_385, _387, _389)));
    precise float _439 = _385 * _438;
    precise float _440 = _387 * _438;
    precise float _441 = _389 * _438;
    precise float _442 = _429 * _441;
    precise float _443 = _434 * _440;
    precise float _444 = _442 - _443;
    precise float _445 = _434 * _439;
    precise float _446 = _424 * _441;
    precise float _447 = _445 - _446;
    precise float _448 = _424 * _440;
    precise float _449 = _429 * _439;
    precise float _450 = _448 - _449;
    float _454 = inversesqrt(dot(vec3(_444, _447, _450), vec3(_444, _447, _450)));
    precise float _455 = _454 * _444;
    precise float _456 = _454 * _447;
    precise float _457 = _454 * _450;
    precise float _458 = _396 + 1.0;
    precise float _460 = cbMtdParam._m0[10u].w * log2(_458);
    precise float _461 = _245 - _359;
    precise float _462 = _252 - _366;
    precise float _463 = _259 - _373;
    precise float _464 = dot(vec3(_455, _456, _457), vec3(_461, _462, _463));
    precise float _467 = _455 * _464;
    precise float _468 = _456 * _464;
    precise float _469 = _457 * _464;
    precise float _470 = _359 + _467;
    precise float _471 = _366 + _468;
    precise float _472 = _373 + _469;
    precise float _473 = _245 - _470;
    precise float _474 = _252 - _471;
    precise float _475 = _259 - _472;
    precise float _476 = _456 * _475;
    precise float _477 = _457 * _474;
    precise float _478 = _476 - _477;
    precise float _479 = _457 * _473;
    precise float _480 = _455 * _475;
    precise float _481 = _479 - _480;
    precise float _482 = _455 * _474;
    precise float _483 = _456 * _473;
    precise float _484 = _482 - _483;
    float _485 = sin(_460);
    float _486 = cos(_460);
    precise float _487 = _473 * _486;
    precise float _488 = _474 * _486;
    precise float _489 = _475 * _486;
    precise float _490 = _485 * _478;
    precise float _491 = _485 * _481;
    precise float _492 = _485 * _484;
    precise float _493 = _487 + _490;
    precise float _494 = _488 + _491;
    precise float _495 = _492 + _489;
    precise float _496 = _470 + _493;
    precise float _497 = _471 + _494;
    precise float _498 = _472 + _495;
    precise float _499 = _496 - _245;
    precise float _500 = _497 - _252;
    precise float _501 = _498 - _259;
    float _502 = _397 ? 0.0 : _499;
    float _503 = _397 ? 0.0 : _500;
    float _504 = _397 ? 0.0 : _501;
    precise float _505 = _245 + _502;
    precise float _506 = _252 + _503;
    precise float _507 = _259 + _504;
    precise float _508 = cbPerFrame._m0[22u].x + _348;
    float _510;
    float _512;
    float _514;
    if (_197)
    {
        _510 = 0.0;
        _512 = 0.0;
        _514 = 0.0;
    }
    else
    {
        uint _694 = _191.z;
        precise float _511;
        precise float _513;
        precise float _515;
        float _981;
        float _983;
        float _985;
        float _820 = 0.0;
        float _821 = 0.0;
        float _822 = 0.0;
        uint _823 = _694;
        uint _825 = 0u;
        float _859;
        float _878;
        vec4 _891;
        float _892;
        float _893;
        float _906;
        float _907;
        float _908;
        float _924;
        float _925;
        float _926;
        float _927;
        bool _928;
        bool _929;
        bool _930;
        precise float _931;
        precise float _932;
        precise float _933;
        float _934;
        float _935;
        float _936;
        precise float _937;
        bool _940;
        for (;;)
        {
            uint _827 = _823 & 255u;
            uint _828 = _827 * 24u;
            uvec3 _837 = uvec3(texelFetch(g_forceParam, int(_828)).x, texelFetch(g_forceParam, int(_828 + 1u)).x, texelFetch(g_forceParam, int(_828 + 2u)).x);
            uint _842 = (_827 * 24u) + 4u;
            vec4 _855 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_842)).x, texelFetch(g_forceParam, int(_842 + 1u)).x, texelFetch(g_forceParam, int(_842 + 2u)).x, texelFetch(g_forceParam, int(_842 + 3u)).x));
            _859 = _855.w;
            uint _861 = (_827 * 24u) + 8u;
            vec4 _874 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_861)).x, texelFetch(g_forceParam, int(_861 + 1u)).x, texelFetch(g_forceParam, int(_861 + 2u)).x, texelFetch(g_forceParam, int(_861 + 3u)).x));
            _878 = _874.w;
            uint _880 = (_827 * 24u) + 12u;
            _891 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_880)).x, texelFetch(g_forceParam, int(_880 + 1u)).x, _886, texelFetch(g_forceParam, int(_880 + 3u)).x));
            _892 = _891.x;
            _893 = _891.w;
            uint _895 = (_827 * 24u) + 16u;
            vec3 _905 = uintBitsToFloat(uvec3(texelFetch(g_forceParam, int(_895)).x, texelFetch(g_forceParam, int(_895 + 1u)).x, texelFetch(g_forceParam, int(_895 + 2u)).x));
            _906 = _905.x;
            _907 = _905.y;
            _908 = _905.z;
            uint _910 = (_827 * 24u) + 20u;
            vec4 _923 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_910)).x, texelFetch(g_forceParam, int(_910 + 1u)).x, texelFetch(g_forceParam, int(_910 + 2u)).x, texelFetch(g_forceParam, int(_910 + 3u)).x));
            _924 = _923.x;
            _925 = _923.y;
            _926 = _923.z;
            _927 = _923.w;
            _928 = _837.x == 1u;
            _929 = _837.y == 1u;
            _930 = _837.z == 1u;
            _931 = _319 - _855.x;
            _932 = _326 - _855.y;
            _933 = _333 - _855.z;
            _934 = _928 ? _874.x : _931;
            _935 = _928 ? _874.y : _932;
            _936 = _928 ? _874.z : _933;
            _937 = dot(vec3(_934, _935, _936), vec3(_934, _935, _936));
            _940 = _937 > 0.0;
            float frontier_phi_10_pred;
            float frontier_phi_10_pred_1;
            float frontier_phi_10_pred_2;
            if (_940)
            {
                precise float _967 = _931 * _931;
                precise float _968 = _932 * _932;
                precise float _969 = _967 + _968;
                precise float _970 = _933 * _933;
                precise float _971 = _970 + _969;
                float _972 = sqrt(_971);
                float _973 = inversesqrt(_937);
                precise float _974 = _934 * _973;
                precise float _975 = _935 * _973;
                precise float _976 = _936 * _973;
                precise float _978 = _972 / (isnan(0.001000000047497451305389404296875) ? _891.y : (isnan(_891.y) ? 0.001000000047497451305389404296875 : max(_891.y, 0.001000000047497451305389404296875)));
                precise float _979 = 1.0 - _978;
                float _1328 = isnan(0.0) ? _979 : (isnan(_979) ? 0.0 : max(_979, 0.0));
                float _980 = isnan(1.0) ? _1328 : (isnan(_1328) ? 1.0 : min(_1328, 1.0));
                float _1022;
                if (_930)
                {
                    float _1011 = inversesqrt(dot(vec3(_931, _932, _933), vec3(_931, _932, _933)));
                    precise float _1012 = _931 * _1011;
                    precise float _1013 = _932 * _1011;
                    precise float _1014 = _933 * _1011;
                    precise float _1018 = dot(vec3(_974, _975, _976), vec3(_1012, _1013, _1014)) * 0.800000011920928955078125;
                    precise float _1019 = _1018 + 0.20000000298023223876953125;
                    float _1339 = isnan(0.0) ? _1019 : (isnan(_1019) ? 0.0 : max(_1019, 0.0));
                    precise float _1021 = _980 * (isnan(1.0) ? _1339 : (isnan(_1339) ? 1.0 : min(_1339, 1.0)));
                    _1022 = _1021;
                }
                else
                {
                    _1022 = _980;
                }
                float frontier_phi_10_pred_15_ladder;
                float frontier_phi_10_pred_15_ladder_1;
                float frontier_phi_10_pred_15_ladder_2;
                if (_1022 > 0.0)
                {
                    bool _1053 = _928 && (!_930);
                    precise float _1055 = _972 * (-4.0);
                    precise float _1058 = 6.283184051513671875 / (isnan(0.001000000047497451305389404296875) ? _892 : (isnan(_892) ? 0.001000000047497451305389404296875 : max(_892, 0.001000000047497451305389404296875)));
                    precise float _1059 = cbMtdParam._m0[11u].y * _1058;
                    precise float _1060 = dot(vec2(_974, _976), vec2(_931, _933));
                    precise float _1063 = _1060 * _1059;
                    precise float _1064 = float(_1053) * _1063;
                    precise float _1065 = _508 * _1059;
                    precise float _1066 = _1065 - _1064;
                    precise float _1067 = (_1053 ? 0.0 : _1055) + _1066;
                    precise float _1069 = _878 * sin(_1067);
                    precise float _1070 = _975 * 0.0;
                    precise float _1071 = _1070 - _976;
                    precise float _1072 = _976 * 0.0;
                    precise float _1073 = _974 * 0.0;
                    precise float _1074 = _1072 - _1073;
                    precise float _1075 = _974 - _1070;
                    precise float _1076 = _893 * _1069;
                    float _1077 = _928 ? _1076 : 0.0;
                    float _1176;
                    if (_929)
                    {
                        precise float _1138 = _906 * 2.0;
                        precise float _1139 = _925 + _926;
                        precise float _1140 = _927 + _1139;
                        precise float _1142 = 6.283184051513671875 / (isnan(0.001000000047497451305389404296875) ? _906 : (isnan(_906) ? 0.001000000047497451305389404296875 : max(_906, 0.001000000047497451305389404296875)));
                        precise float _1143 = cbMtdParam._m0[11u].y * _1142;
                        precise float _1144 = _924 * _1143;
                        precise float _1145 = (-0.0) - _974;
                        precise float _1149 = dot(vec2(_976, _1145), vec2(_931, _933)) / _1138;
                        precise float _1150 = (-0.0) - _1149;
                        float _1153 = fract(abs(_1149));
                        precise float _1154 = (-0.0) - _1153;
                        precise float _1156 = _1138 * ((_1149 >= _1150) ? _1153 : _1154);
                        precise float _1157 = _1156 * 6.283184051513671875;
                        precise float _1158 = _1157 / _1138;
                        precise float _1160 = (isnan(5.0) ? _906 : (isnan(_906) ? 5.0 : min(_906, 5.0))) * sin(_1158);
                        precise float _1161 = _1060 + _1160;
                        precise float _1162 = _906 * 0.25;
                        precise float _1163 = _508 * _924;
                        precise float _1164 = _1163 - _1162;
                        precise float _1165 = _1164 - _1161;
                        precise float _1166 = _924 * _1140;
                        precise float _1168 = _1165 / (isnan(0.001000000047497451305389404296875) ? _1166 : (isnan(_1166) ? 0.001000000047497451305389404296875 : max(_1166, 0.001000000047497451305389404296875)));
                        float _1169 = fract(_1168);
                        precise float _1171 = 1.0 - _1169;
                        float _1172 = (_1168 < 0.0) ? _1171 : _1169;
                        precise float _1173 = _1139 / _1140;
                        precise float _1174 = _925 / _1140;
                        float _1209;
                        if (_1172 < _1174)
                        {
                            precise float _1194 = _1172 / _1174;
                            _1209 = _1194;
                        }
                        else
                        {
                            float frontier_phi_29_26_ladder;
                            if (_1172 < _1173)
                            {
                                precise float _1219 = _1172 - _1174;
                                precise float _1220 = _1173 - _1174;
                                precise float _1221 = _1219 / _1220;
                                precise float _1210 = 1.0 - _1221;
                                frontier_phi_29_26_ladder = _1210;
                            }
                            else
                            {
                                frontier_phi_29_26_ladder = 0.0;
                            }
                            _1209 = frontier_phi_29_26_ladder;
                        }
                        precise float _1211 = _908 * _1209;
                        precise float _1212 = _1143 * _1060;
                        precise float _1213 = _508 * _1144;
                        precise float _1214 = _1213 - _1212;
                        precise float _1216 = _907 + sin(_1214);
                        precise float _1218 = _1211 * abs(_1216);
                        precise float _1177 = _1218 + 0.0;
                        _1176 = _1177;
                    }
                    else
                    {
                        _1176 = 0.0;
                    }
                    precise float _1178 = _859 + _1069;
                    precise float _1179 = _1178 + _1176;
                    precise float _1180 = _974 * _1179;
                    precise float _1181 = _975 * _1179;
                    precise float _1182 = _976 * _1179;
                    precise float _1183 = _1071 * _1077;
                    precise float _1184 = _1074 * _1077;
                    precise float _1185 = _1075 * _1077;
                    precise float _1186 = _1183 + _1180;
                    precise float _1187 = _1184 + _1181;
                    precise float _1188 = _1185 + _1182;
                    precise float _1189 = _1022 * _1186;
                    precise float _1190 = _1022 * _1187;
                    precise float _1191 = _1022 * _1188;
                    precise float _982 = _1189 * 0.0500000007450580596923828125;
                    precise float _984 = _1190 * 0.0500000007450580596923828125;
                    precise float _986 = _1191 * 0.0500000007450580596923828125;
                    frontier_phi_10_pred_15_ladder = _982;
                    frontier_phi_10_pred_15_ladder_1 = _984;
                    frontier_phi_10_pred_15_ladder_2 = _986;
                }
                else
                {
                    frontier_phi_10_pred_15_ladder = 0.0;
                    frontier_phi_10_pred_15_ladder_1 = 0.0;
                    frontier_phi_10_pred_15_ladder_2 = 0.0;
                }
                frontier_phi_10_pred = frontier_phi_10_pred_15_ladder;
                frontier_phi_10_pred_1 = frontier_phi_10_pred_15_ladder_1;
                frontier_phi_10_pred_2 = frontier_phi_10_pred_15_ladder_2;
            }
            else
            {
                frontier_phi_10_pred = 0.0;
                frontier_phi_10_pred_1 = 0.0;
                frontier_phi_10_pred_2 = 0.0;
            }
            _981 = frontier_phi_10_pred;
            _983 = frontier_phi_10_pred_1;
            _985 = frontier_phi_10_pred_2;
            _511 = _820 + _981;
            _513 = _821 + _983;
            _515 = _822 + _985;
            uint _826 = _825 + 1u;
            if (_826 == _194)
            {
                break;
            }
            else
            {
                _820 = _511;
                _821 = _513;
                _822 = _515;
                _823 = (_825 != 3u) ? (_823 >> 8u) : _384;
                _825 = _826;
                continue;
            }
        }
        _510 = _511;
        _512 = _513;
        _514 = _515;
    }
    precise float _516 = _510 * _510;
    precise float _517 = _512 * _512;
    precise float _518 = _516 + _517;
    precise float _519 = _514 * _514;
    precise float _520 = _518 + _519;
    float _521 = sqrt(_520);
    bool _522 = _521 < 0.00011000000085914507508277893066406;
    float _526 = inversesqrt(dot(vec3(_510, _512, _514), vec3(_510, _512, _514)));
    precise float _527 = _510 * _526;
    precise float _528 = _512 * _526;
    precise float _529 = _514 * _526;
    precise float _530 = _429 * _529;
    precise float _531 = _434 * _528;
    precise float _532 = _530 - _531;
    precise float _533 = _434 * _527;
    precise float _534 = _424 * _529;
    precise float _535 = _533 - _534;
    precise float _536 = _424 * _528;
    precise float _537 = _429 * _527;
    precise float _538 = _536 - _537;
    float _542 = inversesqrt(dot(vec3(_532, _535, _538), vec3(_532, _535, _538)));
    precise float _543 = _542 * _532;
    precise float _544 = _542 * _535;
    precise float _545 = _542 * _538;
    precise float _546 = _521 + 1.0;
    precise float _548 = cbMtdParam._m0[10u].y * log2(_546);
    precise float _549 = _505 - _319;
    precise float _550 = _506 - _326;
    precise float _551 = _507 - _333;
    precise float _552 = dot(vec3(_543, _544, _545), vec3(_549, _550, _551));
    precise float _555 = _543 * _552;
    precise float _556 = _544 * _552;
    precise float _557 = _545 * _552;
    precise float _558 = _319 + _555;
    precise float _559 = _326 + _556;
    precise float _560 = _333 + _557;
    precise float _561 = _505 - _558;
    precise float _562 = _506 - _559;
    precise float _563 = _507 - _560;
    precise float _564 = _544 * _563;
    precise float _565 = _545 * _562;
    precise float _566 = _564 - _565;
    precise float _567 = _545 * _561;
    precise float _568 = _543 * _563;
    precise float _569 = _567 - _568;
    precise float _570 = _543 * _562;
    precise float _571 = _544 * _561;
    precise float _572 = _570 - _571;
    float _573 = sin(_548);
    float _574 = cos(_548);
    precise float _575 = _561 * _574;
    precise float _576 = _562 * _574;
    precise float _577 = _563 * _574;
    precise float _578 = _573 * _566;
    precise float _579 = _573 * _569;
    precise float _580 = _573 * _572;
    precise float _581 = _575 + _578;
    precise float _582 = _576 + _579;
    precise float _583 = _580 + _577;
    precise float _584 = _558 + _581;
    precise float _585 = _559 + _582;
    precise float _586 = _560 + _583;
    precise float _587 = _584 - _505;
    precise float _588 = _585 - _506;
    precise float _589 = _586 - _507;
    precise float _593 = _502 + (_522 ? 0.0 : _587);
    precise float _594 = _503 + (_522 ? 0.0 : _588);
    precise float _595 = _504 + (_522 ? 0.0 : _589);
    precise float _596 = _245 + _593;
    precise float _597 = _252 + _594;
    precise float _598 = _259 + _595;
    precise float _599 = _596 - cbSceneParam._m0[3u].x;
    precise float _600 = _597 - cbSceneParam._m0[3u].y;
    precise float _601 = _598 - cbSceneParam._m0[3u].z;
    precise float _629 = cbSceneParam._m0[24u].x * _599;
    precise float _630 = _600 * cbSceneParam._m0[24u].y;
    precise float _631 = _630 + _629;
    precise float _632 = _601 * cbSceneParam._m0[24u].z;
    precise float _633 = _632 + _631;
    precise float _634 = 1.0 * cbSceneParam._m0[24u].w;
    precise float _635 = _634 + _633;
    precise float _636 = cbSceneParam._m0[25u].x * _599;
    precise float _637 = _600 * cbSceneParam._m0[25u].y;
    precise float _638 = _637 + _636;
    precise float _639 = _601 * cbSceneParam._m0[25u].z;
    precise float _640 = _639 + _638;
    precise float _641 = 1.0 * cbSceneParam._m0[25u].w;
    precise float _642 = _641 + _640;
    precise float _643 = cbSceneParam._m0[26u].x * _599;
    precise float _644 = _600 * cbSceneParam._m0[26u].y;
    precise float _645 = _644 + _643;
    precise float _646 = _601 * cbSceneParam._m0[26u].z;
    precise float _647 = _646 + _645;
    precise float _648 = 1.0 * cbSceneParam._m0[26u].w;
    precise float _649 = _648 + _647;
    precise float _650 = cbSceneParam._m0[27u].x * _599;
    precise float _651 = _600 * cbSceneParam._m0[27u].y;
    precise float _652 = _651 + _650;
    precise float _653 = _601 * cbSceneParam._m0[27u].z;
    precise float _654 = _653 + _652;
    precise float _655 = 1.0 * cbSceneParam._m0[27u].w;
    precise float _656 = _655 + _654;
    gl_Position.x = _635;
    gl_Position.y = _642;
    gl_Position.z = _649;
    gl_Position.w = _656;
    NORMAL_1.x = fma(_171, cbObjMatrix._m0[_217].z, fma(_170, cbObjMatrix._m0[_217].y, cbObjMatrix._m0[_217].x * _168));
    NORMAL_1.y = fma(_171, cbObjMatrix._m0[_224].z, fma(_170, cbObjMatrix._m0[_224].y, cbObjMatrix._m0[_224].x * _168));
    NORMAL_1.z = fma(_171, cbObjMatrix._m0[_231].z, fma(_170, cbObjMatrix._m0[_231].y, cbObjMatrix._m0[_231].x * _168));
    NORMAL_1.w = float(_208);
    TANGENT_1.x = fma(_183, cbObjMatrix._m0[_217].z, fma(_182, cbObjMatrix._m0[_217].y, cbObjMatrix._m0[_217].x * _181));
    TANGENT_1.y = fma(_183, cbObjMatrix._m0[_224].z, fma(_182, cbObjMatrix._m0[_224].y, cbObjMatrix._m0[_224].x * _181));
    TANGENT_1.z = fma(_183, cbObjMatrix._m0[_231].z, fma(_182, cbObjMatrix._m0[_231].y, cbObjMatrix._m0[_231].x * _181));
    TANGENT_1.w = (float(TANGENT.w) + (-127.0)) * 0.0078740157186985015869140625;
    TEXCOORD_2 = ((float(int(uint(TEXCOORD.x))) * 0.00048828125) * cbTexScroll._m0[0u].x) + cbTexScroll._m0[0u].z;
    TEXCOORD_1_1 = ((float(int(uint(TEXCOORD.y))) * 0.00048828125) * cbTexScroll._m0[0u].y) + cbTexScroll._m0[0u].w;
    TEXCOORD_3.x = TEXCOORD_1.x;
    TEXCOORD_3.y = TEXCOORD_1.y;
    TEXCOORD_3.z = TEXCOORD_1.z;
    TEXCOORD_3.w = COLOR_1.x;
    TEXCOORD_11 = sqrt(((_265 * _265) + (_266 * _266)) + (_267 * _267));
    gl_ClipDistance[0u] = dot(vec4(_635, _642, _649, _656), vec4(cbSceneParam._m0[4u]));
    gl_ClipDistance[1u] = dot(vec4(_635, _642, _649, _656), vec4(cbInstanceData._m0[_210 + 3u]));
}


