#version 460

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[12];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 5, std140) uniform cbObjMatrixUBO
{
    vec4 _m0[6];
} cbObjMatrix;

layout(set = 0, binding = 6, std140) uniform cbPrevObjMatrixUBO
{
    vec4 _m0[6];
} cbPrevObjMatrix;

layout(set = 0, binding = 10, std140) uniform cbInstanceIdxParamUBO
{
    vec4 _m0[1];
} cbInstanceIdxParam;

layout(set = 0, binding = 11, std140) uniform cbTexScrollUBO
{
    vec4 _m0[4];
} cbTexScroll;

layout(set = 0, binding = 26) uniform usamplerBuffer g_forceParam;
layout(set = 0, binding = 25) uniform usamplerBuffer g_InstanceIndexBuffer;

layout(location = 0) in vec3 POSITION;
layout(location = 1) in uvec4 NORMAL;
layout(location = 2) in uvec4 TANGENT;
layout(location = 3) in vec4 COLOR_1;
layout(location = 4) in ivec2 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_1;
layout(location = 1) out vec4 POSITION_1;
layout(location = 2) out vec4 NORMAL_1;
layout(location = 3) out vec4 TANGENT_1;
layout(location = 4) out float TEXCOORD_2;
layout(location = 4, component = 1) out float TEXCOORD_1_1;
layout(location = 5) out vec4 TEXCOORD_3;
layout(location = 6) out vec4 TEXCOORD_8;
layout(location = 7) out vec4 TEXCOORD_9;
layout(location = 8) out vec3 TEXCOORD_10;

uint _852;
uint _975;

void main()
{
    uint _85 = uint(gl_InstanceIndex) - uint(gl_BaseInstance);
    gl_Position.x = 0.0;
    gl_Position.y = 0.0;
    gl_Position.z = 0.0;
    gl_Position.w = 0.0;
    POSITION_1.x = 0.0;
    POSITION_1.y = 0.0;
    POSITION_1.z = 0.0;
    POSITION_1.w = 0.0;
    NORMAL_1.x = 0.0;
    NORMAL_1.y = 0.0;
    NORMAL_1.z = 0.0;
    NORMAL_1.w = 0.0;
    TANGENT_1.x = 0.0;
    TANGENT_1.y = 0.0;
    TANGENT_1.z = 0.0;
    TANGENT_1.w = 0.0;
    TEXCOORD_2 = 0.0;
    TEXCOORD_1_1 = 0.0;
    TEXCOORD_3.x = 0.0;
    TEXCOORD_3.y = 0.0;
    TEXCOORD_3.z = 0.0;
    TEXCOORD_3.w = 0.0;
    TEXCOORD_8.x = 0.0;
    TEXCOORD_8.y = 0.0;
    TEXCOORD_8.z = 0.0;
    TEXCOORD_8.w = 0.0;
    TEXCOORD_9.x = 0.0;
    TEXCOORD_9.y = 0.0;
    TEXCOORD_9.z = 0.0;
    TEXCOORD_9.w = 0.0;
    TEXCOORD_10.x = 0.0;
    TEXCOORD_10.y = 0.0;
    TEXCOORD_10.z = 0.0;
    float _186 = (float(NORMAL.x) + (-127.0)) * 0.0078740157186985015869140625;
    float _188 = (float(NORMAL.y) + (-127.0)) * 0.0078740157186985015869140625;
    float _189 = (float(NORMAL.z) + (-127.0)) * 0.0078740157186985015869140625;
    float _199 = (float(TANGENT.x) + (-127.0)) * 0.0078740157186985015869140625;
    float _200 = (float(TANGENT.y) + (-127.0)) * 0.0078740157186985015869140625;
    float _201 = (float(TANGENT.z) + (-127.0)) * 0.0078740157186985015869140625;
    uint _203 = _85 * 13u;
    uvec4 _209 = floatBitsToUint(cbInstanceData._m0[_203 + 7u]);
    uint _212 = min(_209.y, 8u);
    bool _215 = _212 == 0u;
    precise float _216 = POSITION.x + 0.0;
    precise float _217 = POSITION.y + 0.0;
    precise float _218 = POSITION.z + 0.0;
    uint _223 = floatBitsToUint(cbInstanceIdxParam._m0[0u]).x + _85;
    uvec4 _225 = texelFetch(g_InstanceIndexBuffer, int(_223));
    uint _226 = _225.x;
    uint _235 = (floatBitsToUint(cbInstanceData._m0[(_226 * 13u) + 4u]).x + uint(float(NORMAL.w))) * 3u;
    uint _242 = _235 + 1u;
    uint _249 = _235 + 2u;
    precise float _256 = _216 * cbObjMatrix._m0[_235].x;
    precise float _257 = _217 * cbObjMatrix._m0[_235].y;
    precise float _258 = _257 + _256;
    precise float _259 = _218 * cbObjMatrix._m0[_235].z;
    precise float _260 = _259 + _258;
    precise float _261 = 1.0 * cbObjMatrix._m0[_235].w;
    precise float _263 = _261 + _260;
    precise float _264 = _216 * cbObjMatrix._m0[_242].x;
    precise float _265 = _217 * cbObjMatrix._m0[_242].y;
    precise float _266 = _265 + _264;
    precise float _267 = _218 * cbObjMatrix._m0[_242].z;
    precise float _268 = _267 + _266;
    precise float _269 = 1.0 * cbObjMatrix._m0[_242].w;
    precise float _270 = _269 + _268;
    precise float _271 = _216 * cbObjMatrix._m0[_249].x;
    precise float _272 = _217 * cbObjMatrix._m0[_249].y;
    precise float _273 = _272 + _271;
    precise float _274 = _218 * cbObjMatrix._m0[_249].z;
    precise float _275 = _274 + _273;
    precise float _276 = 1.0 * cbObjMatrix._m0[_249].w;
    precise float _277 = _276 + _275;
    float _310 = fma(_189, cbObjMatrix._m0[_235].z, fma(_188, cbObjMatrix._m0[_235].y, cbObjMatrix._m0[_235].x * _186));
    float _313 = fma(_189, cbObjMatrix._m0[_242].z, fma(_188, cbObjMatrix._m0[_242].y, cbObjMatrix._m0[_242].x * _186));
    float _316 = fma(_189, cbObjMatrix._m0[_249].z, fma(_188, cbObjMatrix._m0[_249].y, cbObjMatrix._m0[_249].x * _186));
    uint _333 = _203 + 1u;
    uint _340 = _203 + 2u;
    precise float _347 = TEXCOORD_1.x * cbInstanceData._m0[_203].x;
    precise float _348 = TEXCOORD_1.y * cbInstanceData._m0[_203].y;
    precise float _349 = _348 + _347;
    precise float _350 = TEXCOORD_1.z * cbInstanceData._m0[_203].z;
    precise float _351 = _350 + _349;
    precise float _352 = 1.0 * cbInstanceData._m0[_203].w;
    precise float _353 = _352 + _351;
    precise float _354 = TEXCOORD_1.x * cbInstanceData._m0[_333].x;
    precise float _355 = TEXCOORD_1.y * cbInstanceData._m0[_333].y;
    precise float _356 = _355 + _354;
    precise float _357 = TEXCOORD_1.z * cbInstanceData._m0[_333].z;
    precise float _358 = _357 + _356;
    precise float _359 = 1.0 * cbInstanceData._m0[_333].w;
    precise float _360 = _359 + _358;
    precise float _361 = TEXCOORD_1.x * cbInstanceData._m0[_340].x;
    precise float _362 = TEXCOORD_1.y * cbInstanceData._m0[_340].y;
    precise float _363 = _362 + _361;
    precise float _364 = TEXCOORD_1.z * cbInstanceData._m0[_340].z;
    precise float _365 = _364 + _363;
    precise float _366 = 1.0 * cbInstanceData._m0[_340].w;
    precise float _367 = _366 + _365;
    precise float _373 = _263 - _353;
    precise float _374 = _270 - _360;
    precise float _375 = _277 - _367;
    precise float _376 = _373 * _373;
    precise float _377 = _374 * _374;
    precise float _378 = _376 + _377;
    precise float _379 = _375 * _375;
    precise float _380 = _378 + _379;
    precise float _382 = cbMtdParam._m0[10u].z * sqrt(_380);
    precise float _387 = cbInstanceData._m0[_203].x * 0.0;
    precise float _388 = 0.0 * cbInstanceData._m0[_203].y;
    precise float _389 = _388 + _387;
    precise float _390 = 0.0 * cbInstanceData._m0[_203].z;
    precise float _391 = _390 + _389;
    precise float _392 = 1.0 * cbInstanceData._m0[_203].w;
    precise float _393 = _392 + _391;
    precise float _394 = cbInstanceData._m0[_333].x * 0.0;
    precise float _395 = 0.0 * cbInstanceData._m0[_333].y;
    precise float _396 = _395 + _394;
    precise float _397 = 0.0 * cbInstanceData._m0[_333].z;
    precise float _398 = _397 + _396;
    precise float _399 = 1.0 * cbInstanceData._m0[_333].w;
    precise float _400 = _399 + _398;
    precise float _401 = cbInstanceData._m0[_340].x * 0.0;
    precise float _402 = 0.0 * cbInstanceData._m0[_340].y;
    precise float _403 = _402 + _401;
    precise float _404 = 0.0 * cbInstanceData._m0[_340].z;
    precise float _405 = _404 + _403;
    precise float _406 = 1.0 * cbInstanceData._m0[_340].w;
    precise float _407 = _406 + _405;
    precise float _410 = _263 * _263;
    precise float _411 = _270 * _270;
    precise float _412 = _410 + _411;
    precise float _413 = _277 * _277;
    precise float _414 = _412 + _413;
    precise float _416 = cbMtdParam._m0[11u].x * sqrt(_414);
    precise float _417 = cbPerFrame._m0[22u].x + _416;
    uint _418 = _209.w;
    float _419;
    float _421;
    float _423;
    if (_215)
    {
        _419 = 0.0;
        _421 = 0.0;
        _423 = 0.0;
    }
    else
    {
        uint _543 = _209.z;
        precise float _420;
        precise float _422;
        precise float _424;
        float _1046;
        float _1048;
        float _1050;
        float _784 = 0.0;
        float _785 = 0.0;
        float _786 = 0.0;
        uint _787 = _543;
        uint _789 = 0u;
        float _825;
        float _844;
        vec4 _857;
        float _858;
        float _859;
        float _873;
        float _874;
        float _875;
        float _892;
        float _893;
        float _894;
        float _895;
        bool _896;
        bool _897;
        bool _898;
        precise float _899;
        precise float _900;
        precise float _901;
        float _902;
        float _903;
        float _904;
        precise float _905;
        bool _908;
        for (;;)
        {
            uint _791 = _787 & 255u;
            uint _793 = _791 * 24u;
            uvec3 _803 = uvec3(texelFetch(g_forceParam, int(_793)).x, texelFetch(g_forceParam, int(_793 + 1u)).x, texelFetch(g_forceParam, int(_793 + 2u)).x);
            uint _808 = (_791 * 24u) + 4u;
            vec4 _821 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_808)).x, texelFetch(g_forceParam, int(_808 + 1u)).x, texelFetch(g_forceParam, int(_808 + 2u)).x, texelFetch(g_forceParam, int(_808 + 3u)).x));
            _825 = _821.w;
            uint _827 = (_791 * 24u) + 8u;
            vec4 _840 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_827)).x, texelFetch(g_forceParam, int(_827 + 1u)).x, texelFetch(g_forceParam, int(_827 + 2u)).x, texelFetch(g_forceParam, int(_827 + 3u)).x));
            _844 = _840.w;
            uint _846 = (_791 * 24u) + 12u;
            _857 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_846)).x, texelFetch(g_forceParam, int(_846 + 1u)).x, _852, texelFetch(g_forceParam, int(_846 + 3u)).x));
            _858 = _857.x;
            _859 = _857.w;
            uint _862 = (_791 * 24u) + 16u;
            vec3 _872 = uintBitsToFloat(uvec3(texelFetch(g_forceParam, int(_862)).x, texelFetch(g_forceParam, int(_862 + 1u)).x, texelFetch(g_forceParam, int(_862 + 2u)).x));
            _873 = _872.x;
            _874 = _872.y;
            _875 = _872.z;
            uint _878 = (_791 * 24u) + 20u;
            vec4 _891 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_878)).x, texelFetch(g_forceParam, int(_878 + 1u)).x, texelFetch(g_forceParam, int(_878 + 2u)).x, texelFetch(g_forceParam, int(_878 + 3u)).x));
            _892 = _891.x;
            _893 = _891.y;
            _894 = _891.z;
            _895 = _891.w;
            _896 = _803.x == 1u;
            _897 = _803.y == 1u;
            _898 = _803.z == 1u;
            _899 = _393 - _821.x;
            _900 = _400 - _821.y;
            _901 = _407 - _821.z;
            _902 = _896 ? _840.x : _899;
            _903 = _896 ? _840.y : _900;
            _904 = _896 ? _840.z : _901;
            _905 = dot(vec3(_902, _903, _904), vec3(_902, _903, _904));
            _908 = _905 > 0.0;
            float frontier_phi_8_pred;
            float frontier_phi_8_pred_1;
            float frontier_phi_8_pred_2;
            if (_908)
            {
                precise float _1031 = _899 * _899;
                precise float _1032 = _900 * _900;
                precise float _1033 = _1031 + _1032;
                precise float _1034 = _901 * _901;
                precise float _1035 = _1034 + _1033;
                float _1036 = sqrt(_1035);
                float _1037 = inversesqrt(_905);
                precise float _1038 = _902 * _1037;
                precise float _1039 = _903 * _1037;
                precise float _1040 = _904 * _1037;
                precise float _1043 = _1036 / (isnan(0.001000000047497451305389404296875) ? _857.y : (isnan(_857.y) ? 0.001000000047497451305389404296875 : max(_857.y, 0.001000000047497451305389404296875)));
                precise float _1044 = 1.0 - _1043;
                float _1370 = isnan(0.0) ? _1044 : (isnan(_1044) ? 0.0 : max(_1044, 0.0));
                float _1045 = isnan(1.0) ? _1370 : (isnan(_1370) ? 1.0 : min(_1370, 1.0));
                float _1095;
                if (_898)
                {
                    float _1082 = inversesqrt(dot(vec3(_899, _900, _901), vec3(_899, _900, _901)));
                    precise float _1083 = _899 * _1082;
                    precise float _1084 = _900 * _1082;
                    precise float _1085 = _901 * _1082;
                    precise float _1089 = dot(vec3(_1038, _1039, _1040), vec3(_1083, _1084, _1085)) * 0.800000011920928955078125;
                    precise float _1091 = _1089 + 0.20000000298023223876953125;
                    float _1381 = isnan(0.0) ? _1091 : (isnan(_1091) ? 0.0 : max(_1091, 0.0));
                    precise float _1094 = _1045 * (isnan(1.0) ? _1381 : (isnan(_1381) ? 1.0 : min(_1381, 1.0)));
                    _1095 = _1094;
                }
                else
                {
                    _1095 = _1045;
                }
                float frontier_phi_8_pred_12_ladder;
                float frontier_phi_8_pred_12_ladder_1;
                float frontier_phi_8_pred_12_ladder_2;
                if (_1095 > 0.0)
                {
                    bool _1114 = _896 && (!_898);
                    precise float _1116 = _1036 * (-4.0);
                    precise float _1120 = 6.283184051513671875 / (isnan(0.001000000047497451305389404296875) ? _858 : (isnan(_858) ? 0.001000000047497451305389404296875 : max(_858, 0.001000000047497451305389404296875)));
                    precise float _1122 = dot(vec2(_1038, _1040), vec2(_899, _901));
                    precise float _1126 = _1120 * _1122;
                    precise float _1127 = float(_1114) * _1126;
                    precise float _1128 = _417 * _1120;
                    precise float _1129 = _1128 - _1127;
                    precise float _1130 = (_1114 ? 0.0 : _1116) + _1129;
                    precise float _1132 = _844 * sin(_1130);
                    precise float _1133 = _1039 * 0.0;
                    precise float _1134 = _1133 - _1040;
                    precise float _1135 = _1040 * 0.0;
                    precise float _1136 = _1038 * 0.0;
                    precise float _1137 = _1135 - _1136;
                    precise float _1138 = _1038 - _1133;
                    precise float _1139 = _859 * _1132;
                    float _1140 = _896 ? _1139 : 0.0;
                    float _1209;
                    if (_897)
                    {
                        precise float _1169 = _873 * 2.0;
                        precise float _1171 = _893 + _894;
                        precise float _1172 = _895 + _1171;
                        precise float _1174 = 6.283184051513671875 / (isnan(0.001000000047497451305389404296875) ? _873 : (isnan(_873) ? 0.001000000047497451305389404296875 : max(_873, 0.001000000047497451305389404296875)));
                        precise float _1175 = _892 * _1174;
                        precise float _1176 = (-0.0) - _1038;
                        precise float _1181 = dot(vec2(_1040, _1176), vec2(_899, _901)) / _1169;
                        precise float _1182 = (-0.0) - _1181;
                        float _1185 = fract(abs(_1181));
                        precise float _1186 = (-0.0) - _1185;
                        precise float _1188 = _1169 * ((_1181 >= _1182) ? _1185 : _1186);
                        precise float _1189 = _1188 * 6.283184051513671875;
                        precise float _1190 = _1189 / _1169;
                        precise float _1192 = (isnan(5.0) ? _873 : (isnan(_873) ? 5.0 : min(_873, 5.0))) * sin(_1190);
                        precise float _1193 = _1122 + _1192;
                        precise float _1194 = _873 * 0.25;
                        precise float _1196 = _417 * _892;
                        precise float _1197 = _1196 - _1194;
                        precise float _1198 = _1197 - _1193;
                        precise float _1199 = _892 * _1172;
                        precise float _1201 = _1198 / (isnan(0.001000000047497451305389404296875) ? _1199 : (isnan(_1199) ? 0.001000000047497451305389404296875 : max(_1199, 0.001000000047497451305389404296875)));
                        float _1202 = fract(_1201);
                        precise float _1204 = 1.0 - _1202;
                        float _1205 = (_1201 < 0.0) ? _1204 : _1202;
                        precise float _1206 = _1171 / _1172;
                        precise float _1207 = _893 / _1172;
                        float _1285;
                        if (_1205 < _1207)
                        {
                            precise float _1281 = _1205 / _1207;
                            _1285 = _1281;
                        }
                        else
                        {
                            float frontier_phi_27_24_ladder;
                            if (_1205 < _1206)
                            {
                                precise float _1295 = _1205 - _1207;
                                precise float _1296 = _1206 - _1207;
                                precise float _1297 = _1295 / _1296;
                                precise float _1286 = 1.0 - _1297;
                                frontier_phi_27_24_ladder = _1286;
                            }
                            else
                            {
                                frontier_phi_27_24_ladder = 0.0;
                            }
                            _1285 = frontier_phi_27_24_ladder;
                        }
                        precise float _1287 = _875 * _1285;
                        precise float _1288 = _1174 * _1122;
                        precise float _1289 = _417 * _1175;
                        precise float _1290 = _1289 - _1288;
                        precise float _1292 = _874 + sin(_1290);
                        precise float _1294 = _1287 * abs(_1292);
                        precise float _1210 = _1294 + 0.0;
                        _1209 = _1210;
                    }
                    else
                    {
                        _1209 = 0.0;
                    }
                    precise float _1211 = _825 + _1132;
                    precise float _1212 = _1211 + _1209;
                    precise float _1213 = _1038 * _1212;
                    precise float _1214 = _1039 * _1212;
                    precise float _1215 = _1040 * _1212;
                    precise float _1216 = _1134 * _1140;
                    precise float _1217 = _1137 * _1140;
                    precise float _1218 = _1138 * _1140;
                    precise float _1219 = _1216 + _1213;
                    precise float _1220 = _1217 + _1214;
                    precise float _1221 = _1218 + _1215;
                    precise float _1222 = _1095 * _1219;
                    precise float _1223 = _1095 * _1220;
                    precise float _1224 = _1095 * _1221;
                    precise float _1047 = _1222 * 0.0500000007450580596923828125;
                    precise float _1049 = _1223 * 0.0500000007450580596923828125;
                    precise float _1051 = _1224 * 0.0500000007450580596923828125;
                    frontier_phi_8_pred_12_ladder = _1047;
                    frontier_phi_8_pred_12_ladder_1 = _1049;
                    frontier_phi_8_pred_12_ladder_2 = _1051;
                }
                else
                {
                    frontier_phi_8_pred_12_ladder = 0.0;
                    frontier_phi_8_pred_12_ladder_1 = 0.0;
                    frontier_phi_8_pred_12_ladder_2 = 0.0;
                }
                frontier_phi_8_pred = frontier_phi_8_pred_12_ladder;
                frontier_phi_8_pred_1 = frontier_phi_8_pred_12_ladder_1;
                frontier_phi_8_pred_2 = frontier_phi_8_pred_12_ladder_2;
            }
            else
            {
                frontier_phi_8_pred = 0.0;
                frontier_phi_8_pred_1 = 0.0;
                frontier_phi_8_pred_2 = 0.0;
            }
            _1046 = frontier_phi_8_pred;
            _1048 = frontier_phi_8_pred_1;
            _1050 = frontier_phi_8_pred_2;
            _420 = _784 + _1046;
            _422 = _785 + _1048;
            _424 = _786 + _1050;
            uint _790 = _789 + 1u;
            if (_790 == _212)
            {
                break;
            }
            else
            {
                _784 = _420;
                _785 = _422;
                _786 = _424;
                _787 = (_789 != 3u) ? (_787 >> 8u) : _418;
                _789 = _790;
                continue;
            }
        }
        _419 = _420;
        _421 = _422;
        _423 = _424;
    }
    precise float _425 = _419 * _419;
    precise float _426 = _421 * _421;
    precise float _427 = _425 + _426;
    precise float _428 = _423 * _423;
    precise float _429 = _427 + _428;
    float _430 = sqrt(_429);
    bool _431 = _430 < 0.00011000000085914507508277893066406;
    float _436 = inversesqrt(dot(vec3(cbInstanceData._m0[_203].x, cbInstanceData._m0[_333].x, cbInstanceData._m0[_340].x), vec3(cbInstanceData._m0[_203].x, cbInstanceData._m0[_333].x, cbInstanceData._m0[_340].x)));
    precise float _437 = cbInstanceData._m0[_203].x * _436;
    precise float _438 = cbInstanceData._m0[_333].x * _436;
    precise float _439 = cbInstanceData._m0[_340].x * _436;
    float _443 = inversesqrt(dot(vec3(cbInstanceData._m0[_203].y, cbInstanceData._m0[_333].y, cbInstanceData._m0[_340].y), vec3(cbInstanceData._m0[_203].y, cbInstanceData._m0[_333].y, cbInstanceData._m0[_340].y)));
    precise float _444 = cbInstanceData._m0[_203].y * _443;
    precise float _445 = cbInstanceData._m0[_333].y * _443;
    precise float _446 = cbInstanceData._m0[_340].y * _443;
    float _450 = inversesqrt(dot(vec3(cbInstanceData._m0[_203].z, cbInstanceData._m0[_333].z, cbInstanceData._m0[_340].z), vec3(cbInstanceData._m0[_203].z, cbInstanceData._m0[_333].z, cbInstanceData._m0[_340].z)));
    precise float _451 = cbInstanceData._m0[_203].z * _450;
    precise float _452 = cbInstanceData._m0[_333].z * _450;
    precise float _453 = cbInstanceData._m0[_340].z * _450;
    precise float _454 = _437 * 0.0;
    precise float _455 = 1.0 * _444;
    precise float _456 = _455 + _454;
    precise float _457 = 0.0 * _451;
    precise float _458 = _457 + _456;
    precise float _459 = _438 * 0.0;
    precise float _460 = 1.0 * _445;
    precise float _461 = _460 + _459;
    precise float _462 = 0.0 * _452;
    precise float _463 = _462 + _461;
    precise float _464 = _439 * 0.0;
    precise float _465 = 1.0 * _446;
    precise float _466 = _465 + _464;
    precise float _467 = 0.0 * _453;
    precise float _468 = _467 + _466;
    float _472 = inversesqrt(dot(vec3(_419, _421, _423), vec3(_419, _421, _423)));
    precise float _473 = _419 * _472;
    precise float _474 = _421 * _472;
    precise float _475 = _423 * _472;
    precise float _476 = _463 * _475;
    precise float _477 = _468 * _474;
    precise float _478 = _476 - _477;
    precise float _479 = _468 * _473;
    precise float _480 = _458 * _475;
    precise float _481 = _479 - _480;
    precise float _482 = _458 * _474;
    precise float _483 = _463 * _473;
    precise float _484 = _482 - _483;
    float _488 = inversesqrt(dot(vec3(_478, _481, _484), vec3(_478, _481, _484)));
    precise float _489 = _488 * _478;
    precise float _490 = _488 * _481;
    precise float _491 = _488 * _484;
    precise float _492 = _430 + 1.0;
    precise float _494 = cbMtdParam._m0[10u].w * log2(_492);
    precise float _495 = _263 - _393;
    precise float _496 = _270 - _400;
    precise float _497 = _277 - _407;
    precise float _498 = dot(vec3(_489, _490, _491), vec3(_495, _496, _497));
    precise float _501 = _489 * _498;
    precise float _502 = _490 * _498;
    precise float _503 = _491 * _498;
    precise float _504 = _393 + _501;
    precise float _505 = _400 + _502;
    precise float _506 = _407 + _503;
    precise float _507 = _263 - _504;
    precise float _508 = _270 - _505;
    precise float _509 = _277 - _506;
    precise float _510 = _490 * _509;
    precise float _511 = _491 * _508;
    precise float _512 = _510 - _511;
    precise float _513 = _491 * _507;
    precise float _514 = _489 * _509;
    precise float _515 = _513 - _514;
    precise float _516 = _489 * _508;
    precise float _517 = _490 * _507;
    precise float _518 = _516 - _517;
    float _519 = sin(_494);
    float _520 = cos(_494);
    precise float _521 = _507 * _520;
    precise float _522 = _508 * _520;
    precise float _523 = _509 * _520;
    precise float _524 = _519 * _512;
    precise float _525 = _519 * _515;
    precise float _526 = _519 * _518;
    precise float _527 = _521 + _524;
    precise float _528 = _522 + _525;
    precise float _529 = _526 + _523;
    precise float _530 = _504 + _527;
    precise float _531 = _505 + _528;
    precise float _532 = _506 + _529;
    precise float _533 = _530 - _263;
    precise float _534 = _531 - _270;
    precise float _535 = _532 - _277;
    float _536 = _431 ? 0.0 : _533;
    float _537 = _431 ? 0.0 : _534;
    float _538 = _431 ? 0.0 : _535;
    precise float _539 = _263 + _536;
    precise float _540 = _270 + _537;
    precise float _541 = _277 + _538;
    precise float _542 = cbPerFrame._m0[22u].x + _382;
    float _544;
    float _546;
    float _548;
    if (_215)
    {
        _544 = 0.0;
        _546 = 0.0;
        _548 = 0.0;
    }
    else
    {
        uint _783 = _209.z;
        precise float _545;
        precise float _547;
        precise float _549;
        float _1070;
        float _1072;
        float _1074;
        float _909 = 0.0;
        float _910 = 0.0;
        float _911 = 0.0;
        uint _912 = _783;
        uint _914 = 0u;
        float _948;
        float _967;
        vec4 _980;
        float _981;
        float _982;
        float _995;
        float _996;
        float _997;
        float _1013;
        float _1014;
        float _1015;
        float _1016;
        bool _1017;
        bool _1018;
        bool _1019;
        precise float _1020;
        precise float _1021;
        precise float _1022;
        float _1023;
        float _1024;
        float _1025;
        precise float _1026;
        bool _1029;
        for (;;)
        {
            uint _916 = _912 & 255u;
            uint _917 = _916 * 24u;
            uvec3 _926 = uvec3(texelFetch(g_forceParam, int(_917)).x, texelFetch(g_forceParam, int(_917 + 1u)).x, texelFetch(g_forceParam, int(_917 + 2u)).x);
            uint _931 = (_916 * 24u) + 4u;
            vec4 _944 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_931)).x, texelFetch(g_forceParam, int(_931 + 1u)).x, texelFetch(g_forceParam, int(_931 + 2u)).x, texelFetch(g_forceParam, int(_931 + 3u)).x));
            _948 = _944.w;
            uint _950 = (_916 * 24u) + 8u;
            vec4 _963 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_950)).x, texelFetch(g_forceParam, int(_950 + 1u)).x, texelFetch(g_forceParam, int(_950 + 2u)).x, texelFetch(g_forceParam, int(_950 + 3u)).x));
            _967 = _963.w;
            uint _969 = (_916 * 24u) + 12u;
            _980 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_969)).x, texelFetch(g_forceParam, int(_969 + 1u)).x, _975, texelFetch(g_forceParam, int(_969 + 3u)).x));
            _981 = _980.x;
            _982 = _980.w;
            uint _984 = (_916 * 24u) + 16u;
            vec3 _994 = uintBitsToFloat(uvec3(texelFetch(g_forceParam, int(_984)).x, texelFetch(g_forceParam, int(_984 + 1u)).x, texelFetch(g_forceParam, int(_984 + 2u)).x));
            _995 = _994.x;
            _996 = _994.y;
            _997 = _994.z;
            uint _999 = (_916 * 24u) + 20u;
            vec4 _1012 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_999)).x, texelFetch(g_forceParam, int(_999 + 1u)).x, texelFetch(g_forceParam, int(_999 + 2u)).x, texelFetch(g_forceParam, int(_999 + 3u)).x));
            _1013 = _1012.x;
            _1014 = _1012.y;
            _1015 = _1012.z;
            _1016 = _1012.w;
            _1017 = _926.x == 1u;
            _1018 = _926.y == 1u;
            _1019 = _926.z == 1u;
            _1020 = _353 - _944.x;
            _1021 = _360 - _944.y;
            _1022 = _367 - _944.z;
            _1023 = _1017 ? _963.x : _1020;
            _1024 = _1017 ? _963.y : _1021;
            _1025 = _1017 ? _963.z : _1022;
            _1026 = dot(vec3(_1023, _1024, _1025), vec3(_1023, _1024, _1025));
            _1029 = _1026 > 0.0;
            float frontier_phi_10_pred;
            float frontier_phi_10_pred_1;
            float frontier_phi_10_pred_2;
            if (_1029)
            {
                precise float _1056 = _1020 * _1020;
                precise float _1057 = _1021 * _1021;
                precise float _1058 = _1056 + _1057;
                precise float _1059 = _1022 * _1022;
                precise float _1060 = _1059 + _1058;
                float _1061 = sqrt(_1060);
                float _1062 = inversesqrt(_1026);
                precise float _1063 = _1023 * _1062;
                precise float _1064 = _1024 * _1062;
                precise float _1065 = _1025 * _1062;
                precise float _1067 = _1061 / (isnan(0.001000000047497451305389404296875) ? _980.y : (isnan(_980.y) ? 0.001000000047497451305389404296875 : max(_980.y, 0.001000000047497451305389404296875)));
                precise float _1068 = 1.0 - _1067;
                float _1417 = isnan(0.0) ? _1068 : (isnan(_1068) ? 0.0 : max(_1068, 0.0));
                float _1069 = isnan(1.0) ? _1417 : (isnan(_1417) ? 1.0 : min(_1417, 1.0));
                float _1111;
                if (_1019)
                {
                    float _1100 = inversesqrt(dot(vec3(_1020, _1021, _1022), vec3(_1020, _1021, _1022)));
                    precise float _1101 = _1020 * _1100;
                    precise float _1102 = _1021 * _1100;
                    precise float _1103 = _1022 * _1100;
                    precise float _1107 = dot(vec3(_1063, _1064, _1065), vec3(_1101, _1102, _1103)) * 0.800000011920928955078125;
                    precise float _1108 = _1107 + 0.20000000298023223876953125;
                    float _1428 = isnan(0.0) ? _1108 : (isnan(_1108) ? 0.0 : max(_1108, 0.0));
                    precise float _1110 = _1069 * (isnan(1.0) ? _1428 : (isnan(_1428) ? 1.0 : min(_1428, 1.0)));
                    _1111 = _1110;
                }
                else
                {
                    _1111 = _1069;
                }
                float frontier_phi_10_pred_15_ladder;
                float frontier_phi_10_pred_15_ladder_1;
                float frontier_phi_10_pred_15_ladder_2;
                if (_1111 > 0.0)
                {
                    bool _1142 = _1017 && (!_1019);
                    precise float _1144 = _1061 * (-4.0);
                    precise float _1147 = 6.283184051513671875 / (isnan(0.001000000047497451305389404296875) ? _981 : (isnan(_981) ? 0.001000000047497451305389404296875 : max(_981, 0.001000000047497451305389404296875)));
                    precise float _1148 = cbMtdParam._m0[11u].y * _1147;
                    precise float _1149 = dot(vec2(_1063, _1065), vec2(_1020, _1022));
                    precise float _1152 = _1149 * _1148;
                    precise float _1153 = float(_1142) * _1152;
                    precise float _1154 = _542 * _1148;
                    precise float _1155 = _1154 - _1153;
                    precise float _1156 = (_1142 ? 0.0 : _1144) + _1155;
                    precise float _1158 = _967 * sin(_1156);
                    precise float _1159 = _1064 * 0.0;
                    precise float _1160 = _1159 - _1065;
                    precise float _1161 = _1065 * 0.0;
                    precise float _1162 = _1063 * 0.0;
                    precise float _1163 = _1161 - _1162;
                    precise float _1164 = _1063 - _1159;
                    precise float _1165 = _982 * _1158;
                    float _1166 = _1017 ? _1165 : 0.0;
                    float _1265;
                    if (_1018)
                    {
                        precise float _1227 = _995 * 2.0;
                        precise float _1228 = _1014 + _1015;
                        precise float _1229 = _1016 + _1228;
                        precise float _1231 = 6.283184051513671875 / (isnan(0.001000000047497451305389404296875) ? _995 : (isnan(_995) ? 0.001000000047497451305389404296875 : max(_995, 0.001000000047497451305389404296875)));
                        precise float _1232 = cbMtdParam._m0[11u].y * _1231;
                        precise float _1233 = _1013 * _1232;
                        precise float _1234 = (-0.0) - _1063;
                        precise float _1238 = dot(vec2(_1065, _1234), vec2(_1020, _1022)) / _1227;
                        precise float _1239 = (-0.0) - _1238;
                        float _1242 = fract(abs(_1238));
                        precise float _1243 = (-0.0) - _1242;
                        precise float _1245 = _1227 * ((_1238 >= _1239) ? _1242 : _1243);
                        precise float _1246 = _1245 * 6.283184051513671875;
                        precise float _1247 = _1246 / _1227;
                        precise float _1249 = (isnan(5.0) ? _995 : (isnan(_995) ? 5.0 : min(_995, 5.0))) * sin(_1247);
                        precise float _1250 = _1149 + _1249;
                        precise float _1251 = _995 * 0.25;
                        precise float _1252 = _542 * _1013;
                        precise float _1253 = _1252 - _1251;
                        precise float _1254 = _1253 - _1250;
                        precise float _1255 = _1013 * _1229;
                        precise float _1257 = _1254 / (isnan(0.001000000047497451305389404296875) ? _1255 : (isnan(_1255) ? 0.001000000047497451305389404296875 : max(_1255, 0.001000000047497451305389404296875)));
                        float _1258 = fract(_1257);
                        precise float _1260 = 1.0 - _1258;
                        float _1261 = (_1257 < 0.0) ? _1260 : _1258;
                        precise float _1262 = _1228 / _1229;
                        precise float _1263 = _1014 / _1229;
                        float _1298;
                        if (_1261 < _1263)
                        {
                            precise float _1283 = _1261 / _1263;
                            _1298 = _1283;
                        }
                        else
                        {
                            float frontier_phi_29_26_ladder;
                            if (_1261 < _1262)
                            {
                                precise float _1308 = _1261 - _1263;
                                precise float _1309 = _1262 - _1263;
                                precise float _1310 = _1308 / _1309;
                                precise float _1299 = 1.0 - _1310;
                                frontier_phi_29_26_ladder = _1299;
                            }
                            else
                            {
                                frontier_phi_29_26_ladder = 0.0;
                            }
                            _1298 = frontier_phi_29_26_ladder;
                        }
                        precise float _1300 = _997 * _1298;
                        precise float _1301 = _1232 * _1149;
                        precise float _1302 = _542 * _1233;
                        precise float _1303 = _1302 - _1301;
                        precise float _1305 = _996 + sin(_1303);
                        precise float _1307 = _1300 * abs(_1305);
                        precise float _1266 = _1307 + 0.0;
                        _1265 = _1266;
                    }
                    else
                    {
                        _1265 = 0.0;
                    }
                    precise float _1267 = _948 + _1158;
                    precise float _1268 = _1267 + _1265;
                    precise float _1269 = _1063 * _1268;
                    precise float _1270 = _1064 * _1268;
                    precise float _1271 = _1065 * _1268;
                    precise float _1272 = _1160 * _1166;
                    precise float _1273 = _1163 * _1166;
                    precise float _1274 = _1164 * _1166;
                    precise float _1275 = _1272 + _1269;
                    precise float _1276 = _1273 + _1270;
                    precise float _1277 = _1274 + _1271;
                    precise float _1278 = _1111 * _1275;
                    precise float _1279 = _1111 * _1276;
                    precise float _1280 = _1111 * _1277;
                    precise float _1071 = _1278 * 0.0500000007450580596923828125;
                    precise float _1073 = _1279 * 0.0500000007450580596923828125;
                    precise float _1075 = _1280 * 0.0500000007450580596923828125;
                    frontier_phi_10_pred_15_ladder = _1071;
                    frontier_phi_10_pred_15_ladder_1 = _1073;
                    frontier_phi_10_pred_15_ladder_2 = _1075;
                }
                else
                {
                    frontier_phi_10_pred_15_ladder = 0.0;
                    frontier_phi_10_pred_15_ladder_1 = 0.0;
                    frontier_phi_10_pred_15_ladder_2 = 0.0;
                }
                frontier_phi_10_pred = frontier_phi_10_pred_15_ladder;
                frontier_phi_10_pred_1 = frontier_phi_10_pred_15_ladder_1;
                frontier_phi_10_pred_2 = frontier_phi_10_pred_15_ladder_2;
            }
            else
            {
                frontier_phi_10_pred = 0.0;
                frontier_phi_10_pred_1 = 0.0;
                frontier_phi_10_pred_2 = 0.0;
            }
            _1070 = frontier_phi_10_pred;
            _1072 = frontier_phi_10_pred_1;
            _1074 = frontier_phi_10_pred_2;
            _545 = _909 + _1070;
            _547 = _910 + _1072;
            _549 = _911 + _1074;
            uint _915 = _914 + 1u;
            if (_915 == _212)
            {
                break;
            }
            else
            {
                _909 = _545;
                _910 = _547;
                _911 = _549;
                _912 = (_914 != 3u) ? (_912 >> 8u) : _418;
                _914 = _915;
                continue;
            }
        }
        _544 = _545;
        _546 = _547;
        _548 = _549;
    }
    precise float _550 = _544 * _544;
    precise float _551 = _546 * _546;
    precise float _552 = _550 + _551;
    precise float _553 = _548 * _548;
    precise float _554 = _552 + _553;
    float _555 = sqrt(_554);
    bool _556 = _555 < 0.00011000000085914507508277893066406;
    float _560 = inversesqrt(dot(vec3(_544, _546, _548), vec3(_544, _546, _548)));
    precise float _561 = _544 * _560;
    precise float _562 = _546 * _560;
    precise float _563 = _548 * _560;
    precise float _564 = _463 * _563;
    precise float _565 = _468 * _562;
    precise float _566 = _564 - _565;
    precise float _567 = _468 * _561;
    precise float _568 = _458 * _563;
    precise float _569 = _567 - _568;
    precise float _570 = _458 * _562;
    precise float _571 = _463 * _561;
    precise float _572 = _570 - _571;
    float _576 = inversesqrt(dot(vec3(_566, _569, _572), vec3(_566, _569, _572)));
    precise float _577 = _576 * _566;
    precise float _578 = _576 * _569;
    precise float _579 = _576 * _572;
    precise float _580 = _555 + 1.0;
    precise float _582 = cbMtdParam._m0[10u].y * log2(_580);
    precise float _583 = _539 - _353;
    precise float _584 = _540 - _360;
    precise float _585 = _541 - _367;
    precise float _586 = dot(vec3(_577, _578, _579), vec3(_583, _584, _585));
    precise float _589 = _577 * _586;
    precise float _590 = _578 * _586;
    precise float _591 = _579 * _586;
    precise float _592 = _353 + _589;
    precise float _593 = _360 + _590;
    precise float _594 = _367 + _591;
    precise float _595 = _539 - _592;
    precise float _596 = _540 - _593;
    precise float _597 = _541 - _594;
    precise float _598 = _578 * _597;
    precise float _599 = _579 * _596;
    precise float _600 = _598 - _599;
    precise float _601 = _579 * _595;
    precise float _602 = _577 * _597;
    precise float _603 = _601 - _602;
    precise float _604 = _577 * _596;
    precise float _605 = _578 * _595;
    precise float _606 = _604 - _605;
    float _607 = sin(_582);
    float _608 = cos(_582);
    precise float _609 = _595 * _608;
    precise float _610 = _596 * _608;
    precise float _611 = _597 * _608;
    precise float _612 = _607 * _600;
    precise float _613 = _607 * _603;
    precise float _614 = _607 * _606;
    precise float _615 = _609 + _612;
    precise float _616 = _610 + _613;
    precise float _617 = _614 + _611;
    precise float _618 = _592 + _615;
    precise float _619 = _593 + _616;
    precise float _620 = _594 + _617;
    precise float _621 = _618 - _539;
    precise float _622 = _619 - _540;
    precise float _623 = _620 - _541;
    precise float _627 = _536 + (_556 ? 0.0 : _621);
    precise float _628 = _537 + (_556 ? 0.0 : _622);
    precise float _629 = _538 + (_556 ? 0.0 : _623);
    precise float _630 = _263 + _627;
    precise float _631 = _270 + _628;
    precise float _632 = _277 + _629;
    float _640 = ((fma(_218, cbPrevObjMatrix._m0[_235].z, fma(_217, cbPrevObjMatrix._m0[_235].y, cbPrevObjMatrix._m0[_235].x * _216)) + cbPrevObjMatrix._m0[_235].w) - cbSceneParam._m0[28u].x) + _627;
    float _642 = ((fma(_218, cbPrevObjMatrix._m0[_242].z, fma(_217, cbPrevObjMatrix._m0[_242].y, cbPrevObjMatrix._m0[_242].x * _216)) + cbPrevObjMatrix._m0[_242].w) - cbSceneParam._m0[28u].y) + _628;
    float _644 = ((fma(_218, cbPrevObjMatrix._m0[_249].z, fma(_217, cbPrevObjMatrix._m0[_249].y, cbPrevObjMatrix._m0[_249].x * _216)) + cbPrevObjMatrix._m0[_249].w) - cbSceneParam._m0[28u].z) + _629;
    precise float _694 = _630 - cbSceneParam._m0[3u].x;
    precise float _695 = _631 - cbSceneParam._m0[3u].y;
    precise float _696 = _632 - cbSceneParam._m0[3u].z;
    precise float _724 = _694 * cbSceneParam._m0[24u].x;
    precise float _725 = _695 * cbSceneParam._m0[24u].y;
    precise float _726 = _725 + _724;
    precise float _727 = _696 * cbSceneParam._m0[24u].z;
    precise float _728 = _727 + _726;
    precise float _729 = 1.0 * cbSceneParam._m0[24u].w;
    precise float _730 = _729 + _728;
    precise float _731 = _694 * cbSceneParam._m0[25u].x;
    precise float _732 = _695 * cbSceneParam._m0[25u].y;
    precise float _733 = _732 + _731;
    precise float _734 = _696 * cbSceneParam._m0[25u].z;
    precise float _735 = _734 + _733;
    precise float _736 = 1.0 * cbSceneParam._m0[25u].w;
    precise float _737 = _736 + _735;
    precise float _738 = _694 * cbSceneParam._m0[26u].x;
    precise float _739 = _695 * cbSceneParam._m0[26u].y;
    precise float _740 = _739 + _738;
    precise float _741 = _696 * cbSceneParam._m0[26u].z;
    precise float _742 = _741 + _740;
    precise float _743 = 1.0 * cbSceneParam._m0[26u].w;
    precise float _744 = _743 + _742;
    precise float _745 = _694 * cbSceneParam._m0[27u].x;
    precise float _746 = _695 * cbSceneParam._m0[27u].y;
    precise float _747 = _746 + _745;
    precise float _748 = _696 * cbSceneParam._m0[27u].z;
    precise float _749 = _748 + _747;
    precise float _750 = 1.0 * cbSceneParam._m0[27u].w;
    precise float _751 = _750 + _749;
    gl_Position.x = _730;
    gl_Position.y = _737;
    gl_Position.z = _744;
    gl_Position.w = _751;
    POSITION_1.x = _730;
    POSITION_1.y = _737;
    POSITION_1.z = _744;
    POSITION_1.w = _751;
    NORMAL_1.x = _310;
    NORMAL_1.y = _313;
    NORMAL_1.z = _316;
    NORMAL_1.w = float(_226);
    TANGENT_1.x = fma(_201, cbObjMatrix._m0[_235].z, fma(_200, cbObjMatrix._m0[_235].y, cbObjMatrix._m0[_235].x * _199));
    TANGENT_1.y = fma(_201, cbObjMatrix._m0[_242].z, fma(_200, cbObjMatrix._m0[_242].y, cbObjMatrix._m0[_242].x * _199));
    TANGENT_1.z = fma(_201, cbObjMatrix._m0[_249].z, fma(_200, cbObjMatrix._m0[_249].y, cbObjMatrix._m0[_249].x * _199));
    TANGENT_1.w = (float(TANGENT.w) + (-127.0)) * 0.0078740157186985015869140625;
    TEXCOORD_2 = ((float(int(uint(TEXCOORD.x))) * 0.00048828125) * cbTexScroll._m0[0u].x) + cbTexScroll._m0[0u].z;
    TEXCOORD_1_1 = ((float(int(uint(TEXCOORD.y))) * 0.00048828125) * cbTexScroll._m0[0u].y) + cbTexScroll._m0[0u].w;
    TEXCOORD_3.x = TEXCOORD_1.x;
    TEXCOORD_3.y = TEXCOORD_1.y;
    TEXCOORD_3.z = TEXCOORD_1.z;
    TEXCOORD_3.w = COLOR_1.x;
    TEXCOORD_8.x = _730;
    TEXCOORD_8.y = _737;
    TEXCOORD_8.z = _744;
    TEXCOORD_8.w = _751;
    TEXCOORD_9.x = fma(_644, cbSceneParam._m0[29u].z, fma(_642, cbSceneParam._m0[29u].y, _640 * cbSceneParam._m0[29u].x)) + cbSceneParam._m0[29u].w;
    TEXCOORD_9.y = fma(_644, cbSceneParam._m0[30u].z, fma(_642, cbSceneParam._m0[30u].y, _640 * cbSceneParam._m0[30u].x)) + cbSceneParam._m0[30u].w;
    TEXCOORD_9.z = fma(_644, cbSceneParam._m0[31u].z, fma(_642, cbSceneParam._m0[31u].y, _640 * cbSceneParam._m0[31u].x)) + cbSceneParam._m0[31u].w;
    TEXCOORD_9.w = fma(_644, cbSceneParam._m0[32u].z, fma(_642, cbSceneParam._m0[32u].y, _640 * cbSceneParam._m0[32u].x)) + cbSceneParam._m0[32u].w;
    TEXCOORD_10.x = _310;
    TEXCOORD_10.y = _313;
    TEXCOORD_10.z = _316;
}


