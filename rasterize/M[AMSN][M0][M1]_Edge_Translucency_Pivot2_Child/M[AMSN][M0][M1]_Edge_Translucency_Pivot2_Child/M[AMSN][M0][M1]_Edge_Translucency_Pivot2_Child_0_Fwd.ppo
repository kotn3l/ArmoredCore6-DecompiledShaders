#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[12];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_M0_M1_Edge_Translucency_Pivot2_Child_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_M0_M1_Edge_Translucency_Pivot2_Child_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_M0_M1_Edge_Translucency_Pivot2_Child_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_M0_M1_Edge_Translucency_Pivot2_Child_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in float TEXCOORD;
layout(location = 4, component = 1) in float TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _855;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _176 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _177 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _178 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _184 = inversesqrt(dot(vec3(_176, _177, _178), vec3(_176, _177, _178)));
    float _191 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _198 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _221 = texture(sampler2D(M_AMSN_M0_M1_Edge_Translucency_Pivot2_Child_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1) + cbTextureTilingScale._m0[0u].w));
    float _227 = _221.w;
    float _228 = _221.x * cbMtdParam._m0[9u].x;
    float _229 = _221.y * cbMtdParam._m0[9u].y;
    float _230 = _221.z * cbMtdParam._m0[9u].z;
    vec4 _242 = texture(sampler2D(M_AMSN_M0_M1_Edge_Translucency_Pivot2_Child_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1) + cbTextureTilingScale._m0[2u].w));
    float _244 = _242.x;
    vec4 _256 = texture(sampler2D(M_AMSN_M0_M1_Edge_Translucency_Pivot2_Child_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1) + cbTextureTilingScale._m0[1u].w));
    float _260 = _256.z;
    float _264 = (_256.x * 2.0) + (-1.0);
    float _266 = (_256.y * 2.0) + (-1.0);
    float _267 = dot(vec2(_264, _266), vec2(_264, _266));
    float _3419 = isnan(0.0) ? _267 : (isnan(_267) ? 0.0 : max(_267, 0.0));
    float _273 = sqrt(1.0 - (isnan(1.0) ? _3419 : (isnan(_3419) ? 1.0 : min(_3419, 1.0))));
    vec4 _285 = texture(sampler2D(M_AMSN_M0_M1_Edge_Translucency_Pivot2_Child_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_1) + cbTextureTilingScale._m0[3u].w));
    float _292 = cbMtdParam._m0[10u].x * _285.x;
    float _295 = fma(_273, _191 * NORMAL.x, fma(_266, _198 * TANGENT.x, (_184 * _176) * _264));
    float _298 = fma(_273, _191 * NORMAL.y, fma(_266, _198 * TANGENT.y, (_184 * _177) * _264));
    float _301 = fma(_273, _191 * NORMAL.z, fma(_266, _198 * TANGENT.z, (_184 * _178) * _264));
    float _305 = inversesqrt(dot(vec3(_295, _298, _301), vec3(_295, _298, _301)));
    float _306 = _305 * _295;
    float _307 = _305 * _298;
    float _308 = _305 * _301;
    float _3430 = isnan(0.0) ? _227 : (isnan(_227) ? 0.0 : max(_227, 0.0));
    float _309 = isnan(1.0) ? _3430 : (isnan(_3430) ? 1.0 : min(_3430, 1.0));
    float _3441 = isnan(0.0) ? _260 : (isnan(_260) ? 0.0 : max(_260, 0.0));
    float _310 = isnan(1.0) ? _3441 : (isnan(_3441) ? 1.0 : min(_3441, 1.0));
    float _311 = isnan(0.0) ? _292 : (isnan(_292) ? 0.0 : max(_292, 0.0));
    float _3457 = isnan(0.0) ? _228 : (isnan(_228) ? 0.0 : max(_228, 0.0));
    float _3468 = isnan(0.0) ? _229 : (isnan(_229) ? 0.0 : max(_229, 0.0));
    float _3479 = isnan(0.0) ? _230 : (isnan(_230) ? 0.0 : max(_230, 0.0));
    float _3490 = isnan(0.0) ? _244 : (isnan(_244) ? 0.0 : max(_244, 0.0));
    float _315 = isnan(1.0) ? _3490 : (isnan(_3490) ? 1.0 : min(_3490, 1.0));
    float _331 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _373 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _383 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _373);
    float _384 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _373);
    float _385 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _373);
    float _389 = inversesqrt(dot(vec3(_383, _384, _385), vec3(_383, _384, _385)));
    float _390 = _383 * _389;
    float _391 = _384 * _389;
    float _392 = _385 * _389;
    float _398 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _399 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _420 = fma(_308, cbSceneParam._m0[5u].z, fma(_307, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _306));
    float _423 = fma(_308, cbSceneParam._m0[6u].z, fma(_307, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _306));
    float _426 = fma(_308, cbSceneParam._m0[7u].z, fma(_307, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _306));
    uint _439 = uint(roundEven(NORMAL.w)) * 13u;
    uint _442 = (_439 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _448 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3457 : (isnan(_3457) ? 1.0 : min(_3457, 1.0)))) * cbInstanceData._m0[_442].x;
    float _449 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3468 : (isnan(_3468) ? 1.0 : min(_3468, 1.0)))) * cbInstanceData._m0[_442].y;
    float _450 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3479 : (isnan(_3479) ? 1.0 : min(_3479, 1.0)))) * cbInstanceData._m0[_442].z;
    float _3501 = isnan(0.0) ? _448 : (isnan(_448) ? 0.0 : max(_448, 0.0));
    float _451 = isnan(1.0) ? _3501 : (isnan(_3501) ? 1.0 : min(_3501, 1.0));
    float _3512 = isnan(0.0) ? _449 : (isnan(_449) ? 0.0 : max(_449, 0.0));
    float _452 = isnan(1.0) ? _3512 : (isnan(_3512) ? 1.0 : min(_3512, 1.0));
    float _3523 = isnan(0.0) ? _450 : (isnan(_450) ? 0.0 : max(_450, 0.0));
    float _453 = isnan(1.0) ? _3523 : (isnan(_3523) ? 1.0 : min(_3523, 1.0));
    float _454 = 1.0 - _315;
    float _455 = _451 * _454;
    float _456 = _452 * _454;
    float _457 = _453 * _454;
    float _462 = (_451 + (-0.039999999105930328369140625)) * _315;
    float _463 = (_452 + (-0.039999999105930328369140625)) * _315;
    float _464 = (_453 + (-0.039999999105930328369140625)) * _315;
    float _465 = _462 + 0.039999999105930328369140625;
    float _467 = _463 + 0.039999999105930328369140625;
    float _468 = _464 + 0.039999999105930328369140625;
    vec4 _477 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _398, cbSceneParam._m0[86u].y * _399));
    float _480 = _477.x * TEXCOORD_3.w;
    float _481 = dot(vec3(_306, _307, _308), vec3(_390, _391, _392));
    float _484 = _481 * 2.0;
    float _488 = (_484 * _306) - _390;
    float _489 = (_484 * _307) - _391;
    float _490 = (_484 * _308) - _392;
    float _491 = dot(vec3(_390, _391, _392), vec3(_306, _307, _308));
    float _494 = abs(_491);
    float _3534 = isnan(0.0) ? _494 : (isnan(_494) ? 0.0 : max(_494, 0.0));
    float _496 = sqrt(_310);
    float _509 = exp2((_496 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3534 : (isnan(_3534) ? 1.0 : min(_3534, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_496 * 3.0));
    float _515 = (1.0 - _509) * ((_496 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _516 = _509 * _496;
    float _544 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _548 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _552 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _854;
    float _856;
    float _857;
    float _858;
    float _859;
    float _860;
    float _861;
    float _862;
    float _863;
    float _864;
    float _865;
    float _866;
    float _867;
    float _868;
    float _869;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _579 = fma(_552, cbModelParam._m0[26u].z, fma(_548, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _544));
        float _583 = fma(_552, cbModelParam._m0[27u].z, fma(_548, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _544));
        float _587 = fma(_552, cbModelParam._m0[28u].z, fma(_548, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _544));
        float _612 = _544 + _306;
        float _613 = _548 + _307;
        float _614 = _552 + _308;
        float _624 = fma(_614, cbModelParam._m0[26u].z, fma(_613, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _612)) - _579;
        float _625 = fma(_614, cbModelParam._m0[27u].z, fma(_613, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _612)) - _583;
        float _626 = fma(_614, cbModelParam._m0[28u].z, fma(_613, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _612)) - _587;
        float _630 = inversesqrt(dot(vec3(_624, _625, _626), vec3(_624, _625, _626)));
        float _643 = ((_630 * _624) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_579 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _644 = ((_630 * _625) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_583 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _645 = ((_630 * _626) / cbModelParam._m0[34u].z) + ((((((_587 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _648 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_643, _644, _645), 0.0);
        vec4 _655 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_643, _644, _645), 0.0);
        vec4 _662 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_643, _644, _645), 0.0);
        vec4 _669 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_643, _644, _645), 0.0);
        float _682 = exp2((_648.w + (-0.5)) * 20.0) * 2.0;
        float _683 = _682 * (_648.x + (-0.5));
        float _684 = _682 * (_648.y + (-0.5));
        float _685 = _682 * (_648.z + (-0.5));
        float _692 = exp2((_655.w + (-0.5)) * 20.0) * 2.0;
        float _693 = _692 * (_655.x + (-0.5));
        float _694 = _692 * (_655.y + (-0.5));
        float _695 = _692 * (_655.z + (-0.5));
        float _702 = exp2((_662.w + (-0.5)) * 20.0) * 2.0;
        float _703 = _702 * (_662.x + (-0.5));
        float _704 = _702 * (_662.y + (-0.5));
        float _705 = _702 * (_662.z + (-0.5));
        float _712 = exp2((_669.w + (-0.5)) * 20.0) * 2.0;
        float _713 = _712 * (_669.x + (-0.5));
        float _714 = _712 * (_669.y + (-0.5));
        float _715 = _712 * (_669.z + (-0.5));
        float _716 = isnan(0.0) ? _713 : (isnan(_713) ? 0.0 : max(_713, 0.0));
        float _717 = isnan(0.0) ? _714 : (isnan(_714) ? 0.0 : max(_714, 0.0));
        float _718 = isnan(0.0) ? _715 : (isnan(_715) ? 0.0 : max(_715, 0.0));
        float _719 = _683 * 0.5;
        float _720 = _693 * 0.5;
        float _721 = _703 * 0.5;
        float _722 = dot(vec3(_719, _720, _721), vec3(_719, _720, _721));
        float _727 = (_722 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_722);
        float _736 = (dot(vec3(_306, _307, _308), vec3(_727 * _719, _727 * _720, _727 * _721)) + 1.0) * 0.5;
        float _3560 = isnan(0.0) ? _736 : (isnan(_736) ? 0.0 : max(_736, 0.0));
        float _746 = sqrt(((_720 * _720) + (_719 * _719)) + (_721 * _721)) / (_716 + 9.9999997473787516355514526367188e-06);
        float _3571 = isnan(0.0) ? _746 : (isnan(_746) ? 0.0 : max(_746, 0.0));
        float _747 = isnan(1.0) ? _3571 : (isnan(_3571) ? 1.0 : min(_3571, 1.0));
        float _748 = _747 * 2.0;
        float _752 = (1.0 - _747) / (_747 + 1.0);
        float _3582 = isnan(0.0) ? _752 : (isnan(_752) ? 0.0 : max(_752, 0.0));
        float _753 = isnan(1.0) ? _3582 : (isnan(_3582) ? 1.0 : min(_3582, 1.0));
        float _762 = ((((1.0 - _753) * (_748 + 2.0)) * exp2(log2(isnan(1.0) ? _3560 : (isnan(_3560) ? 1.0 : min(_3560, 1.0))) * (_748 + 1.0))) + _753) * _716;
        float _763 = _684 * 0.5;
        float _764 = _694 * 0.5;
        float _765 = _704 * 0.5;
        float _766 = dot(vec3(_763, _764, _765), vec3(_763, _764, _765));
        float _771 = (_766 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_766);
        float _779 = (dot(vec3(_306, _307, _308), vec3(_771 * _763, _771 * _764, _771 * _765)) + 1.0) * 0.5;
        float _3593 = isnan(0.0) ? _779 : (isnan(_779) ? 0.0 : max(_779, 0.0));
        float _788 = sqrt(((_764 * _764) + (_763 * _763)) + (_765 * _765)) / (_717 + 9.9999997473787516355514526367188e-06);
        float _3604 = isnan(0.0) ? _788 : (isnan(_788) ? 0.0 : max(_788, 0.0));
        float _789 = isnan(1.0) ? _3604 : (isnan(_3604) ? 1.0 : min(_3604, 1.0));
        float _790 = _789 * 2.0;
        float _794 = (1.0 - _789) / (_789 + 1.0);
        float _3615 = isnan(0.0) ? _794 : (isnan(_794) ? 0.0 : max(_794, 0.0));
        float _795 = isnan(1.0) ? _3615 : (isnan(_3615) ? 1.0 : min(_3615, 1.0));
        float _804 = ((((1.0 - _795) * (_790 + 2.0)) * exp2(log2(isnan(1.0) ? _3593 : (isnan(_3593) ? 1.0 : min(_3593, 1.0))) * (_790 + 1.0))) + _795) * _717;
        float _805 = _685 * 0.5;
        float _806 = _695 * 0.5;
        float _807 = _705 * 0.5;
        float _808 = dot(vec3(_805, _806, _807), vec3(_805, _806, _807));
        float _813 = (_808 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_808);
        float _821 = (dot(vec3(_306, _307, _308), vec3(_813 * _805, _813 * _806, _813 * _807)) + 1.0) * 0.5;
        float _3626 = isnan(0.0) ? _821 : (isnan(_821) ? 0.0 : max(_821, 0.0));
        float _830 = sqrt(((_806 * _806) + (_805 * _805)) + (_807 * _807)) / (_718 + 9.9999997473787516355514526367188e-06);
        float _3637 = isnan(0.0) ? _830 : (isnan(_830) ? 0.0 : max(_830, 0.0));
        float _831 = isnan(1.0) ? _3637 : (isnan(_3637) ? 1.0 : min(_3637, 1.0));
        float _832 = _831 * 2.0;
        float _836 = (1.0 - _831) / (_831 + 1.0);
        float _3648 = isnan(0.0) ? _836 : (isnan(_836) ? 0.0 : max(_836, 0.0));
        float _837 = isnan(1.0) ? _3648 : (isnan(_3648) ? 1.0 : min(_3648, 1.0));
        float _846 = ((((1.0 - _837) * (_832 + 2.0)) * exp2(log2(isnan(1.0) ? _3626 : (isnan(_3626) ? 1.0 : min(_3626, 1.0))) * (_832 + 1.0))) + _837) * _718;
        _854 = _685;
        _856 = _684;
        _857 = _683;
        _858 = _695;
        _859 = _694;
        _860 = _693;
        _861 = _705;
        _862 = _704;
        _863 = _703;
        _864 = _718;
        _865 = _717;
        _866 = _716;
        _867 = cbModelParam._m0[36u].z * (isnan(0.0) ? _762 : (isnan(_762) ? 0.0 : max(_762, 0.0)));
        _868 = cbModelParam._m0[36u].z * (isnan(0.0) ? _804 : (isnan(_804) ? 0.0 : max(_804, 0.0)));
        _869 = cbModelParam._m0[36u].z * (isnan(0.0) ? _846 : (isnan(_846) ? 0.0 : max(_846, 0.0)));
    }
    else
    {
        _854 = _855;
        _856 = _855;
        _857 = _855;
        _858 = _855;
        _859 = _855;
        _860 = _855;
        _861 = _855;
        _862 = _855;
        _863 = _855;
        _864 = _855;
        _865 = _855;
        _866 = _855;
        _867 = 0.0;
        _868 = 0.0;
        _869 = 0.0;
    }
    float _1164;
    float _1165;
    float _1166;
    float _1167;
    float _1168;
    float _1169;
    float _1170;
    float _1171;
    float _1172;
    float _1173;
    float _1174;
    float _1175;
    float _1176;
    float _1177;
    float _1178;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _895 = fma(_552, cbModelParam._m0[30u].z, fma(_548, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _544));
        float _899 = fma(_552, cbModelParam._m0[31u].z, fma(_548, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _544));
        float _903 = fma(_552, cbModelParam._m0[32u].z, fma(_548, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _544));
        float _926 = _544 + _306;
        float _927 = _548 + _307;
        float _928 = _552 + _308;
        float _938 = fma(_928, cbModelParam._m0[30u].z, fma(_927, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _926)) - _895;
        float _939 = fma(_928, cbModelParam._m0[31u].z, fma(_927, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _926)) - _899;
        float _940 = fma(_928, cbModelParam._m0[32u].z, fma(_927, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _926)) - _903;
        float _944 = inversesqrt(dot(vec3(_938, _939, _940), vec3(_938, _939, _940)));
        float _957 = ((_944 * _938) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_895 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _958 = ((_944 * _939) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_899 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _959 = ((_944 * _940) / cbModelParam._m0[35u].z) + ((((((_903 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _961 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_957, _958, _959), 0.0);
        vec4 _968 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_957, _958, _959), 0.0);
        vec4 _975 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_957, _958, _959), 0.0);
        vec4 _982 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_957, _958, _959), 0.0);
        float _994 = exp2((_961.w + (-0.5)) * 20.0) * 2.0;
        float _995 = _994 * (_961.x + (-0.5));
        float _996 = _994 * (_961.y + (-0.5));
        float _997 = _994 * (_961.z + (-0.5));
        float _1004 = exp2((_968.w + (-0.5)) * 20.0) * 2.0;
        float _1005 = _1004 * (_968.x + (-0.5));
        float _1006 = _1004 * (_968.y + (-0.5));
        float _1007 = _1004 * (_968.z + (-0.5));
        float _1014 = exp2((_975.w + (-0.5)) * 20.0) * 2.0;
        float _1015 = _1014 * (_975.x + (-0.5));
        float _1016 = _1014 * (_975.y + (-0.5));
        float _1017 = _1014 * (_975.z + (-0.5));
        float _1024 = exp2((_982.w + (-0.5)) * 20.0) * 2.0;
        float _1025 = _1024 * (_982.x + (-0.5));
        float _1026 = _1024 * (_982.y + (-0.5));
        float _1027 = _1024 * (_982.z + (-0.5));
        float _1028 = isnan(0.0) ? _1025 : (isnan(_1025) ? 0.0 : max(_1025, 0.0));
        float _1029 = isnan(0.0) ? _1026 : (isnan(_1026) ? 0.0 : max(_1026, 0.0));
        float _1030 = isnan(0.0) ? _1027 : (isnan(_1027) ? 0.0 : max(_1027, 0.0));
        float _1031 = _995 * 0.5;
        float _1032 = _1005 * 0.5;
        float _1033 = _1015 * 0.5;
        float _1034 = dot(vec3(_1031, _1032, _1033), vec3(_1031, _1032, _1033));
        float _1039 = (_1034 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1034);
        float _1047 = (dot(vec3(_306, _307, _308), vec3(_1039 * _1031, _1039 * _1032, _1039 * _1033)) + 1.0) * 0.5;
        float _3689 = isnan(0.0) ? _1047 : (isnan(_1047) ? 0.0 : max(_1047, 0.0));
        float _1056 = sqrt(((_1032 * _1032) + (_1031 * _1031)) + (_1033 * _1033)) / (_1028 + 9.9999997473787516355514526367188e-06);
        float _3700 = isnan(0.0) ? _1056 : (isnan(_1056) ? 0.0 : max(_1056, 0.0));
        float _1057 = isnan(1.0) ? _3700 : (isnan(_3700) ? 1.0 : min(_3700, 1.0));
        float _1058 = _1057 * 2.0;
        float _1062 = (1.0 - _1057) / (_1057 + 1.0);
        float _3711 = isnan(0.0) ? _1062 : (isnan(_1062) ? 0.0 : max(_1062, 0.0));
        float _1063 = isnan(1.0) ? _3711 : (isnan(_3711) ? 1.0 : min(_3711, 1.0));
        float _1072 = ((((1.0 - _1063) * (_1058 + 2.0)) * exp2(log2(isnan(1.0) ? _3689 : (isnan(_3689) ? 1.0 : min(_3689, 1.0))) * (_1058 + 1.0))) + _1063) * _1028;
        float _1073 = _996 * 0.5;
        float _1074 = _1006 * 0.5;
        float _1075 = _1016 * 0.5;
        float _1076 = dot(vec3(_1073, _1074, _1075), vec3(_1073, _1074, _1075));
        float _1081 = (_1076 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1076);
        float _1089 = (dot(vec3(_306, _307, _308), vec3(_1081 * _1073, _1081 * _1074, _1081 * _1075)) + 1.0) * 0.5;
        float _3722 = isnan(0.0) ? _1089 : (isnan(_1089) ? 0.0 : max(_1089, 0.0));
        float _1098 = sqrt(((_1074 * _1074) + (_1073 * _1073)) + (_1075 * _1075)) / (_1029 + 9.9999997473787516355514526367188e-06);
        float _3733 = isnan(0.0) ? _1098 : (isnan(_1098) ? 0.0 : max(_1098, 0.0));
        float _1099 = isnan(1.0) ? _3733 : (isnan(_3733) ? 1.0 : min(_3733, 1.0));
        float _1100 = _1099 * 2.0;
        float _1104 = (1.0 - _1099) / (_1099 + 1.0);
        float _3744 = isnan(0.0) ? _1104 : (isnan(_1104) ? 0.0 : max(_1104, 0.0));
        float _1105 = isnan(1.0) ? _3744 : (isnan(_3744) ? 1.0 : min(_3744, 1.0));
        float _1114 = ((((1.0 - _1105) * (_1100 + 2.0)) * exp2(log2(isnan(1.0) ? _3722 : (isnan(_3722) ? 1.0 : min(_3722, 1.0))) * (_1100 + 1.0))) + _1105) * _1029;
        float _1115 = _997 * 0.5;
        float _1116 = _1007 * 0.5;
        float _1117 = _1017 * 0.5;
        float _1118 = dot(vec3(_1115, _1116, _1117), vec3(_1115, _1116, _1117));
        float _1123 = (_1118 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1118);
        float _1131 = (dot(vec3(_306, _307, _308), vec3(_1123 * _1115, _1123 * _1116, _1123 * _1117)) + 1.0) * 0.5;
        float _3755 = isnan(0.0) ? _1131 : (isnan(_1131) ? 0.0 : max(_1131, 0.0));
        float _1140 = sqrt(((_1116 * _1116) + (_1115 * _1115)) + (_1117 * _1117)) / (_1030 + 9.9999997473787516355514526367188e-06);
        float _3766 = isnan(0.0) ? _1140 : (isnan(_1140) ? 0.0 : max(_1140, 0.0));
        float _1141 = isnan(1.0) ? _3766 : (isnan(_3766) ? 1.0 : min(_3766, 1.0));
        float _1142 = _1141 * 2.0;
        float _1146 = (1.0 - _1141) / (_1141 + 1.0);
        float _3777 = isnan(0.0) ? _1146 : (isnan(_1146) ? 0.0 : max(_1146, 0.0));
        float _1147 = isnan(1.0) ? _3777 : (isnan(_3777) ? 1.0 : min(_3777, 1.0));
        float _1156 = ((((1.0 - _1147) * (_1142 + 2.0)) * exp2(log2(isnan(1.0) ? _3755 : (isnan(_3755) ? 1.0 : min(_3755, 1.0))) * (_1142 + 1.0))) + _1147) * _1030;
        _1164 = _997;
        _1165 = _996;
        _1166 = _995;
        _1167 = _1007;
        _1168 = _1006;
        _1169 = _1005;
        _1170 = _1017;
        _1171 = _1016;
        _1172 = _1015;
        _1173 = _1030;
        _1174 = _1029;
        _1175 = _1028;
        _1176 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1072 : (isnan(_1072) ? 0.0 : max(_1072, 0.0)));
        _1177 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1114 : (isnan(_1114) ? 0.0 : max(_1114, 0.0)));
        _1178 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1156 : (isnan(_1156) ? 0.0 : max(_1156, 0.0)));
    }
    else
    {
        _1164 = _855;
        _1165 = _855;
        _1166 = _855;
        _1167 = _855;
        _1168 = _855;
        _1169 = _855;
        _1170 = _855;
        _1171 = _855;
        _1172 = _855;
        _1173 = _855;
        _1174 = _855;
        _1175 = _855;
        _1176 = 0.0;
        _1177 = 0.0;
        _1178 = 0.0;
    }
    float _1188 = (cbModelParam._m0[1u].x * (_1176 - _867)) + _867;
    float _1189 = (cbModelParam._m0[1u].x * (_1177 - _868)) + _868;
    float _1190 = (cbModelParam._m0[1u].x * (_1178 - _869)) + _869;
    float _1211 = fma(_1190, cbSceneParam._m0[89u].z, fma(_1189, cbSceneParam._m0[89u].y, _1188 * cbSceneParam._m0[89u].x));
    float _1214 = fma(_1190, cbSceneParam._m0[90u].z, fma(_1189, cbSceneParam._m0[90u].y, _1188 * cbSceneParam._m0[90u].x));
    float _1217 = fma(_1190, cbSceneParam._m0[91u].z, fma(_1189, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1188));
    float _1232 = _488 * 0.5;
    float _1233 = _489 * 0.5;
    float _1234 = _490 * 0.5;
    float _1235 = dot(vec4(_1232, _1233, _1234, 1.0), vec4(_1166, _1169, _1172, _1175));
    float _1238 = dot(vec4(_1232, _1233, _1234, 1.0), vec4(_1165, _1168, _1171, _1174));
    float _1241 = dot(vec4(_1232, _1233, _1234, 1.0), vec4(_1164, _1167, _1170, _1173));
    float _1275;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1248 = dot(vec4(_1232, _1233, _1234, 1.0), vec4(_854, _858, _861, _864));
        float _1252 = dot(vec4(_1232, _1233, _1234, 1.0), vec4(_856, _859, _862, _865));
        float _1256 = dot(vec4(_1232, _1233, _1234, 1.0), vec4(_857, _860, _863, _866));
        float _1263 = dot(vec4(cbModelParam._m0[39u]), vec4(_1232, _1233, _1234, 1.0));
        _1275 = dot(vec3(isnan(0.0) ? _1256 : (isnan(_1256) ? 0.0 : max(_1256, 0.0)), isnan(0.0) ? _1252 : (isnan(_1252) ? 0.0 : max(_1252, 0.0)), isnan(0.0) ? _1248 : (isnan(_1248) ? 0.0 : max(_1248, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1263) ? 0.0 : (isnan(0.0) ? _1263 : max(0.0, _1263))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1275 = 1.0;
    }
    float _1286;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1277 = dot(vec4(cbModelParam._m0[40u]), vec4(_1232, _1233, _1234, 1.0));
        _1286 = dot(vec3(isnan(0.0) ? _1235 : (isnan(_1235) ? 0.0 : max(_1235, 0.0)), isnan(0.0) ? _1238 : (isnan(_1238) ? 0.0 : max(_1238, 0.0)), isnan(0.0) ? _1241 : (isnan(_1241) ? 0.0 : max(_1241, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1277) ? 0.0 : (isnan(0.0) ? _1277 : max(0.0, _1277))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1286 = 1.0;
    }
    float _1290 = (_1286 * cbModelParam._m0[1u].x) + (_1275 * (1.0 - cbModelParam._m0[1u].x));
    float _1300 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _310);
    float _1301 = isnan(_1300) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1300 : min(cbModelParam._m0[25u].z, _1300));
    float _1383;
    float _1385;
    float _1387;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1350 = fma(_552, cbModelParam._m0[13u].z, fma(_548, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _544)) + cbModelParam._m0[13u].w;
        float _1354 = fma(_552, cbModelParam._m0[14u].z, fma(_548, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _544)) + cbModelParam._m0[14u].w;
        float _1358 = fma(_552, cbModelParam._m0[15u].z, fma(_548, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _544)) + cbModelParam._m0[15u].w;
        float _1361 = fma(_490, cbModelParam._m0[13u].z, fma(_489, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _488));
        float _1364 = fma(_490, cbModelParam._m0[14u].z, fma(_489, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _488));
        float _1367 = fma(_490, cbModelParam._m0[15u].z, fma(_489, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _488));
        float _1395;
        if (_1361 > 0.0)
        {
            _1395 = abs((1.0 - _1350) / _1361);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1361 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1350 + 1.0) / _1361);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1395 = frontier_phi_14_12_ladder;
        }
        float _1577;
        if (_1364 > 0.0)
        {
            _1577 = abs((1.0 - _1354) / _1364);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1364 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1354 + 1.0) / _1364);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1577 = frontier_phi_23_19_ladder;
        }
        float _1650;
        if (_1367 > 0.0)
        {
            _1650 = abs((1.0 - _1358) / _1367);
        }
        else
        {
            float frontier_phi_34_30_ladder;
            if (_1367 < 0.0)
            {
                frontier_phi_34_30_ladder = abs((_1358 + 1.0) / _1367);
            }
            else
            {
                frontier_phi_34_30_ladder = 5000.0;
            }
            _1650 = frontier_phi_34_30_ladder;
        }
        float _1652 = isnan(_1577) ? _1395 : (isnan(_1395) ? _1577 : min(_1395, _1577));
        float _1653 = isnan(_1650) ? _1652 : (isnan(_1652) ? _1650 : min(_1652, _1650));
        float _1657 = (_1653 * _1361) + _1350;
        float _1658 = (_1653 * _1364) + _1354;
        float _1659 = (_1653 * _1367) + _1358;
        float _1660 = _1653 * 9.9999997473787516355514526367188e-05;
        float _1662 = (-1.0) - _1660;
        float _1664 = _1660 + 1.0;
        float frontier_phi_13_34_ladder;
        float frontier_phi_13_34_ladder_1;
        float frontier_phi_13_34_ladder_2;
        if ((_1659 > _1664) || ((_1659 < _1662) || ((_1658 > _1664) || ((_1658 < _1662) || ((_1657 < _1662) || (_1657 > _1664))))))
        {
            frontier_phi_13_34_ladder = 0.0;
            frontier_phi_13_34_ladder_1 = 0.0;
            frontier_phi_13_34_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1735 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1659, cbModelParam._m0[9u].z, fma(_1658, cbModelParam._m0[9u].y, _1657 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1659, cbModelParam._m0[10u].z, fma(_1658, cbModelParam._m0[10u].y, _1657 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1659, cbModelParam._m0[11u].z, fma(_1658, cbModelParam._m0[11u].y, _1657 * cbModelParam._m0[11u].x))), _1301);
            frontier_phi_13_34_ladder = _1735.z * cbModelParam._m0[1u].y;
            frontier_phi_13_34_ladder_1 = _1735.y * cbModelParam._m0[1u].y;
            frontier_phi_13_34_ladder_2 = _1735.x * cbModelParam._m0[1u].y;
        }
        _1383 = frontier_phi_13_34_ladder_2;
        _1385 = frontier_phi_13_34_ladder_1;
        _1387 = frontier_phi_13_34_ladder;
    }
    else
    {
        vec4 _1371 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_488, _489, _490), _1301);
        _1383 = _1371.x * cbModelParam._m0[1u].y;
        _1385 = _1371.y * cbModelParam._m0[1u].y;
        _1387 = _1371.z * cbModelParam._m0[1u].y;
    }
    float _1391 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _310);
    float _1392 = isnan(_1391) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1391 : min(cbModelParam._m0[25u].w, _1391));
    float _1485;
    float _1487;
    float _1489;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1449 = fma(_552, cbModelParam._m0[21u].z, fma(_548, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _544)) + cbModelParam._m0[21u].w;
        float _1453 = fma(_552, cbModelParam._m0[22u].z, fma(_548, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _544)) + cbModelParam._m0[22u].w;
        float _1457 = fma(_552, cbModelParam._m0[23u].z, fma(_548, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _544)) + cbModelParam._m0[23u].w;
        float _1460 = fma(_490, cbModelParam._m0[21u].z, fma(_489, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _488));
        float _1463 = fma(_490, cbModelParam._m0[22u].z, fma(_489, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _488));
        float _1466 = fma(_490, cbModelParam._m0[23u].z, fma(_489, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _488));
        float _1582;
        if (_1460 > 0.0)
        {
            _1582 = abs((1.0 - _1449) / _1460);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1460 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1449 + 1.0) / _1460);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1582 = frontier_phi_25_21_ladder;
        }
        float _1677;
        if (_1463 > 0.0)
        {
            _1677 = abs((1.0 - _1453) / _1463);
        }
        else
        {
            float frontier_phi_36_32_ladder;
            if (_1463 < 0.0)
            {
                frontier_phi_36_32_ladder = abs((_1453 + 1.0) / _1463);
            }
            else
            {
                frontier_phi_36_32_ladder = 5000.0;
            }
            _1677 = frontier_phi_36_32_ladder;
        }
        float _1956;
        if (_1466 > 0.0)
        {
            _1956 = abs((1.0 - _1457) / _1466);
        }
        else
        {
            float frontier_phi_45_42_ladder;
            if (_1466 < 0.0)
            {
                frontier_phi_45_42_ladder = abs((_1457 + 1.0) / _1466);
            }
            else
            {
                frontier_phi_45_42_ladder = 5000.0;
            }
            _1956 = frontier_phi_45_42_ladder;
        }
        float _1958 = isnan(_1677) ? _1582 : (isnan(_1582) ? _1677 : min(_1582, _1677));
        float _1959 = isnan(_1956) ? _1958 : (isnan(_1958) ? _1956 : min(_1958, _1956));
        float _1963 = (_1959 * _1460) + _1449;
        float _1964 = (_1959 * _1463) + _1453;
        float _1965 = (_1959 * _1466) + _1457;
        float _1966 = _1959 * 9.9999997473787516355514526367188e-05;
        float _1967 = (-1.0) - _1966;
        float _1969 = _1966 + 1.0;
        float frontier_phi_22_45_ladder;
        float frontier_phi_22_45_ladder_1;
        float frontier_phi_22_45_ladder_2;
        if ((_1965 > _1969) || ((_1965 < _1967) || ((_1964 > _1969) || ((_1964 < _1967) || ((_1963 < _1967) || (_1963 > _1969))))))
        {
            frontier_phi_22_45_ladder = 0.0;
            frontier_phi_22_45_ladder_1 = 0.0;
            frontier_phi_22_45_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2087 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_1965, cbModelParam._m0[17u].z, fma(_1964, cbModelParam._m0[17u].y, _1963 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_1965, cbModelParam._m0[18u].z, fma(_1964, cbModelParam._m0[18u].y, _1963 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_1965, cbModelParam._m0[19u].z, fma(_1964, cbModelParam._m0[19u].y, _1963 * cbModelParam._m0[19u].x))), _1392);
            frontier_phi_22_45_ladder = _2087.z * cbModelParam._m0[1u].z;
            frontier_phi_22_45_ladder_1 = _2087.y * cbModelParam._m0[1u].z;
            frontier_phi_22_45_ladder_2 = _2087.x * cbModelParam._m0[1u].z;
        }
        _1485 = frontier_phi_22_45_ladder_2;
        _1487 = frontier_phi_22_45_ladder_1;
        _1489 = frontier_phi_22_45_ladder;
    }
    else
    {
        vec4 _1469 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_488, _489, _490), _1392);
        _1485 = _1469.x * cbModelParam._m0[1u].z;
        _1487 = _1469.y * cbModelParam._m0[1u].z;
        _1489 = _1469.z * cbModelParam._m0[1u].z;
    }
    float _1502 = (((_515 * _465) + _516) * _480) * ((cbModelParam._m0[1u].w * (_1485 - _1383)) + _1383);
    float _1504 = (((_515 * _467) + _516) * _480) * ((cbModelParam._m0[1u].w * (_1487 - _1385)) + _1385);
    float _1506 = (((_515 * _468) + _516) * _480) * ((cbModelParam._m0[1u].w * (_1489 - _1387)) + _1387);
    float _1509 = fma(_1506, cbSceneParam._m0[89u].z, fma(_1504, cbSceneParam._m0[89u].y, _1502 * cbSceneParam._m0[89u].x));
    float _1512 = fma(_1506, cbSceneParam._m0[90u].z, fma(_1504, cbSceneParam._m0[90u].y, _1502 * cbSceneParam._m0[90u].x));
    float _1515 = fma(_1506, cbSceneParam._m0[91u].z, fma(_1504, cbSceneParam._m0[91u].y, _1502 * cbSceneParam._m0[91u].x));
    uvec4 _1525 = floatBitsToUint(cbInstanceData._m0[_439 + 5u]);
    uint _1527 = _1525.x * 14u;
    uint _1528 = _1527 + 13u;
    float _1535 = _480 + (-1.0);
    float _1540 = (cbLight._m0[_1528].x * _1535) + 1.0;
    float _1541 = (cbLight._m0[_1528].y * _1535) + 1.0;
    float _1542 = (cbLight._m0[_1528].z * _1535) + 1.0;
    float _1543 = (cbLight._m0[_1528].w * _1535) + 1.0;
    uint _1545 = _1527 + 4u;
    float _1557 = dot(vec3(cbLight._m0[_1527].xyz), vec3(_306, _307, _308));
    float _1560 = isnan(1.0) ? _1540 : (isnan(_1540) ? 1.0 : min(_1540, 1.0));
    uint _1561 = _1527 + 5u;
    float _1573 = dot(vec3(cbLight._m0[_1527 | 1u].xyz), vec3(_306, _307, _308));
    float _1576 = isnan(1.0) ? _1541 : (isnan(_1541) ? 1.0 : min(_1541, 1.0));
    float _1641;
    float _1642;
    float _1643;
    if (_311 == 0.0)
    {
        float _3913 = isnan(0.0) ? _1557 : (isnan(_1557) ? 0.0 : max(_1557, 0.0));
        float _3924 = isnan(0.0) ? _1573 : (isnan(_1573) ? 0.0 : max(_1573, 0.0));
        float _1595 = (isnan(1.0) ? _3913 : (isnan(_3913) ? 1.0 : min(_3913, 1.0))) * 0.3183098733425140380859375;
        float _1597 = (isnan(1.0) ? _3924 : (isnan(_3924) ? 1.0 : min(_3924, 1.0))) * 0.3183098733425140380859375;
        _1641 = ((cbLight._m0[_1561].x * _1576) * _1597) + ((cbLight._m0[_1545].x * _1560) * _1595);
        _1642 = ((_1576 * cbLight._m0[_1561].y) * _1597) + ((_1560 * cbLight._m0[_1545].y) * _1595);
        _1643 = ((_1576 * cbLight._m0[_1561].z) * _1597) + ((_1560 * cbLight._m0[_1545].z) * _1595);
    }
    else
    {
        float _1607 = _1557 + _311;
        float _1610 = (_311 * 2.0) + 1.0;
        float _1611 = (isnan(0.0) ? _1607 : (isnan(_1607) ? 0.0 : max(_1607, 0.0))) / _1610;
        float _1618 = _1573 + _311;
        float _1620 = (isnan(0.0) ? _1618 : (isnan(_1618) ? 0.0 : max(_1618, 0.0))) / _1610;
        _1641 = (((_1620 * cbLight._m0[_1561].x) * _1576) + ((_1611 * cbLight._m0[_1545].x) * _1560)) * 0.3183098733425140380859375;
        _1642 = (((_1620 * cbLight._m0[_1561].y) * _1576) + ((_1611 * cbLight._m0[_1545].y) * _1560)) * 0.3183098733425140380859375;
        _1643 = (((_1620 * cbLight._m0[_1561].z) * _1576) + ((_1611 * cbLight._m0[_1545].z) * _1560)) * 0.3183098733425140380859375;
    }
    uvec4 _1647 = floatBitsToUint(cbLight._m0[_1527 + 12u]);
    bool _1649 = _1647.x == 0u;
    float _1682;
    float _1684;
    float _1686;
    if (_1649)
    {
        _1682 = _1641;
        _1684 = _1642;
        _1686 = _1643;
    }
    else
    {
        uint _1690 = _1527 + 6u;
        float _1706 = (dot(vec3(cbLight._m0[_1527 + 2u].xyz), vec3(_306, _307, _308)) * 0.5) + 0.5;
        float _1707 = _1706 * _1706;
        float _3945 = isnan(0.0) ? _1707 : (isnan(_1707) ? 0.0 : max(_1707, 0.0));
        float _1708 = isnan(1.0) ? _3945 : (isnan(_3945) ? 1.0 : min(_3945, 1.0));
        float _1709 = isnan(1.0) ? _1542 : (isnan(_1542) ? 1.0 : min(_1542, 1.0));
        _1682 = (((cbLight._m0[_1690].x * 0.3183098733425140380859375) * _1708) * _1709) + _1641;
        _1684 = (((cbLight._m0[_1690].y * 0.3183098733425140380859375) * _1708) * _1709) + _1642;
        _1686 = (((cbLight._m0[_1690].z * 0.3183098733425140380859375) * _1708) * _1709) + _1643;
    }
    bool _1689 = _1647.y == 0u;
    float _1744;
    float _1746;
    float _1748;
    if (_1689)
    {
        _1744 = _1682;
        _1746 = _1684;
        _1748 = _1686;
    }
    else
    {
        uint _1927 = _1527 + 7u;
        float _1943 = (dot(vec3(cbLight._m0[_1527 + 3u].xyz), vec3(_306, _307, _308)) * 0.5) + 0.5;
        float _1944 = _1943 * _1943;
        float _3961 = isnan(0.0) ? _1944 : (isnan(_1944) ? 0.0 : max(_1944, 0.0));
        float _1945 = isnan(1.0) ? _3961 : (isnan(_3961) ? 1.0 : min(_3961, 1.0));
        float _1946 = isnan(1.0) ? _1543 : (isnan(_1543) ? 1.0 : min(_1543, 1.0));
        _1744 = (((cbLight._m0[_1927].x * 0.3183098733425140380859375) * _1945) * _1946) + _1682;
        _1746 = (((cbLight._m0[_1927].y * 0.3183098733425140380859375) * _1945) * _1946) + _1684;
        _1748 = (((cbLight._m0[_1927].z * 0.3183098733425140380859375) * _1945) * _1946) + _1686;
    }
    uint _1753 = _1527 + 8u;
    float _1769 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1527].w)) * _310) * 0.949999988079071044921875);
    float _1770 = _1769 * _1769;
    float _1771 = cbLight._m0[_1527].x + _390;
    float _1772 = cbLight._m0[_1527].y + _391;
    float _1773 = cbLight._m0[_1527].z + _392;
    float _1777 = inversesqrt(dot(vec3(_1771, _1772, _1773), vec3(_1771, _1772, _1773)));
    float _1778 = _1777 * _1771;
    float _1779 = _1777 * _1772;
    float _1780 = _1777 * _1773;
    float _1781 = dot(vec3(_306, _307, _308), vec3(cbLight._m0[_1527].xyz));
    float _3977 = isnan(0.0) ? _1781 : (isnan(_1781) ? 0.0 : max(_1781, 0.0));
    float _1784 = isnan(1.0) ? _3977 : (isnan(_3977) ? 1.0 : min(_3977, 1.0));
    float _3988 = isnan(0.0) ? _481 : (isnan(_481) ? 0.0 : max(_481, 0.0));
    float _1785 = isnan(1.0) ? _3988 : (isnan(_3988) ? 1.0 : min(_3988, 1.0));
    float _1786 = dot(vec3(_306, _307, _308), vec3(_1778, _1779, _1780));
    float _3999 = isnan(0.0) ? _1786 : (isnan(_1786) ? 0.0 : max(_1786, 0.0));
    float _1789 = isnan(1.0) ? _3999 : (isnan(_3999) ? 1.0 : min(_3999, 1.0));
    float _1790 = dot(vec3(cbLight._m0[_1527].xyz), vec3(_1778, _1779, _1780));
    float _4010 = isnan(0.0) ? _1790 : (isnan(_1790) ? 0.0 : max(_1790, 0.0));
    float _1794 = _1770 * _1770;
    float _1798 = ((_1789 * _1789) * (_1794 + (-1.0))) + 1.0;
    float _1806 = exp2(log2(1.0 - (isnan(1.0) ? _4010 : (isnan(_4010) ? 1.0 : min(_4010, 1.0)))) * 5.0);
    float _1807 = 0.959999978542327880859375 - _462;
    float _1809 = 0.959999978542327880859375 - _463;
    float _1810 = 0.959999978542327880859375 - _464;
    float _1817 = 1.0 - _1770;
    float _1828 = (0.5 / (((_1785 * ((_1784 * _1817) + _1770)) + 9.9999999392252902907785028219223e-09) + (((_1785 * _1817) + _1770) * _1784))) * _1784;
    float _4021 = isnan(0.0) ? _1828 : (isnan(_1828) ? 0.0 : max(_1828, 0.0));
    float _1830 = (isnan(1.0) ? _4021 : (isnan(_4021) ? 1.0 : min(_4021, 1.0))) * (_1794 / ((_1798 * _1798) * 3.141590118408203125));
    float _1831 = isnan(1.0) ? _1540 : (isnan(_1540) ? 1.0 : min(_1540, 1.0));
    uint _1841 = _1527 | 1u;
    uint _1845 = _1527 + 9u;
    float _1859 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1841].w)) * _310) * 0.949999988079071044921875);
    float _1860 = _1859 * _1859;
    float _1861 = cbLight._m0[_1841].x + _390;
    float _1862 = cbLight._m0[_1841].y + _391;
    float _1863 = cbLight._m0[_1841].z + _392;
    float _1867 = inversesqrt(dot(vec3(_1861, _1862, _1863), vec3(_1861, _1862, _1863)));
    float _1868 = _1867 * _1861;
    float _1869 = _1867 * _1862;
    float _1870 = _1867 * _1863;
    float _1871 = dot(vec3(_306, _307, _308), vec3(cbLight._m0[_1841].xyz));
    float _4037 = isnan(0.0) ? _1871 : (isnan(_1871) ? 0.0 : max(_1871, 0.0));
    float _1874 = isnan(1.0) ? _4037 : (isnan(_4037) ? 1.0 : min(_4037, 1.0));
    float _1875 = dot(vec3(_306, _307, _308), vec3(_1868, _1869, _1870));
    float _4048 = isnan(0.0) ? _1875 : (isnan(_1875) ? 0.0 : max(_1875, 0.0));
    float _1878 = isnan(1.0) ? _4048 : (isnan(_4048) ? 1.0 : min(_4048, 1.0));
    float _1879 = dot(vec3(cbLight._m0[_1841].xyz), vec3(_1868, _1869, _1870));
    float _4059 = isnan(0.0) ? _1879 : (isnan(_1879) ? 0.0 : max(_1879, 0.0));
    float _1883 = _1860 * _1860;
    float _1887 = ((_1878 * _1878) * (_1883 + (-1.0))) + 1.0;
    float _1894 = exp2(log2(1.0 - (isnan(1.0) ? _4059 : (isnan(_4059) ? 1.0 : min(_4059, 1.0)))) * 5.0);
    float _1901 = 1.0 - _1860;
    float _1911 = (0.5 / (((_1785 * ((_1874 * _1901) + _1860)) + 9.9999999392252902907785028219223e-09) + (((_1785 * _1901) + _1860) * _1874))) * _1874;
    float _4070 = isnan(0.0) ? _1911 : (isnan(_1911) ? 0.0 : max(_1911, 0.0));
    float _1913 = (isnan(1.0) ? _4070 : (isnan(_4070) ? 1.0 : min(_4070, 1.0))) * (_1883 / ((_1887 * _1887) * 3.141590118408203125));
    float _1914 = isnan(1.0) ? _1541 : (isnan(_1541) ? 1.0 : min(_1541, 1.0));
    float _1924 = (((((_1894 * _1807) + _465) * cbLight._m0[_1845].x) * _1913) * _1914) + (((((_1806 * _1807) + _465) * cbLight._m0[_1753].x) * _1830) * _1831);
    float _1925 = (((((_1894 * _1809) + _467) * cbLight._m0[_1845].y) * _1913) * _1914) + (((((_1806 * _1809) + _467) * cbLight._m0[_1753].y) * _1830) * _1831);
    float _1926 = (((((_1894 * _1810) + _468) * cbLight._m0[_1845].z) * _1913) * _1914) + (((((_1806 * _1810) + _468) * cbLight._m0[_1753].z) * _1830) * _1831);
    float _1982;
    float _1984;
    float _1986;
    if (_1649)
    {
        _1982 = _1924;
        _1984 = _1925;
        _1986 = _1926;
    }
    else
    {
        uint _1988 = _1527 + 2u;
        uint _1992 = _1527 + 10u;
        float _2006 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1988].w)) * _310) * 0.949999988079071044921875);
        float _2007 = _2006 * _2006;
        float _2008 = cbLight._m0[_1988].x + _390;
        float _2009 = cbLight._m0[_1988].y + _391;
        float _2010 = cbLight._m0[_1988].z + _392;
        float _2014 = inversesqrt(dot(vec3(_2008, _2009, _2010), vec3(_2008, _2009, _2010)));
        float _2015 = _2014 * _2008;
        float _2016 = _2014 * _2009;
        float _2017 = _2014 * _2010;
        float _2018 = dot(vec3(_306, _307, _308), vec3(cbLight._m0[_1988].xyz));
        float _4086 = isnan(0.0) ? _2018 : (isnan(_2018) ? 0.0 : max(_2018, 0.0));
        float _2021 = isnan(1.0) ? _4086 : (isnan(_4086) ? 1.0 : min(_4086, 1.0));
        float _2022 = dot(vec3(_306, _307, _308), vec3(_2015, _2016, _2017));
        float _4097 = isnan(0.0) ? _2022 : (isnan(_2022) ? 0.0 : max(_2022, 0.0));
        float _2025 = isnan(1.0) ? _4097 : (isnan(_4097) ? 1.0 : min(_4097, 1.0));
        float _2026 = dot(vec3(cbLight._m0[_1988].xyz), vec3(_2015, _2016, _2017));
        float _4108 = isnan(0.0) ? _2026 : (isnan(_2026) ? 0.0 : max(_2026, 0.0));
        float _2030 = _2007 * _2007;
        float _2034 = ((_2025 * _2025) * (_2030 + (-1.0))) + 1.0;
        float _2041 = exp2(log2(1.0 - (isnan(1.0) ? _4108 : (isnan(_4108) ? 1.0 : min(_4108, 1.0)))) * 5.0);
        float _2048 = 1.0 - _2007;
        float _2058 = (0.5 / (((_1785 * ((_2021 * _2048) + _2007)) + 9.9999999392252902907785028219223e-09) + (((_1785 * _2048) + _2007) * _2021))) * _2021;
        float _4119 = isnan(0.0) ? _2058 : (isnan(_2058) ? 0.0 : max(_2058, 0.0));
        float _2060 = (isnan(1.0) ? _4119 : (isnan(_4119) ? 1.0 : min(_4119, 1.0))) * (_2030 / ((_2034 * _2034) * 3.141590118408203125));
        float _2061 = isnan(1.0) ? _1542 : (isnan(_1542) ? 1.0 : min(_1542, 1.0));
        _1982 = (((((_2041 * _1807) + _465) * cbLight._m0[_1992].x) * _2060) * _2061) + _1924;
        _1984 = (((((_2041 * _1809) + _467) * cbLight._m0[_1992].y) * _2060) * _2061) + _1925;
        _1986 = (((((_2041 * _1810) + _468) * cbLight._m0[_1992].z) * _2060) * _2061) + _1926;
    }
    float _2092;
    float _2094;
    float _2096;
    if (_1689)
    {
        _2092 = _1982;
        _2094 = _1984;
        _2096 = _1986;
    }
    else
    {
        uint _2103 = _1527 + 3u;
        uint _2107 = _1527 + 11u;
        float _2121 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2103].w)) * _310) * 0.949999988079071044921875);
        float _2122 = _2121 * _2121;
        float _2123 = cbLight._m0[_2103].x + _390;
        float _2124 = cbLight._m0[_2103].y + _391;
        float _2125 = cbLight._m0[_2103].z + _392;
        float _2129 = inversesqrt(dot(vec3(_2123, _2124, _2125), vec3(_2123, _2124, _2125)));
        float _2130 = _2129 * _2123;
        float _2131 = _2129 * _2124;
        float _2132 = _2129 * _2125;
        float _2133 = dot(vec3(_306, _307, _308), vec3(cbLight._m0[_2103].xyz));
        float _4135 = isnan(0.0) ? _2133 : (isnan(_2133) ? 0.0 : max(_2133, 0.0));
        float _2136 = isnan(1.0) ? _4135 : (isnan(_4135) ? 1.0 : min(_4135, 1.0));
        float _2137 = dot(vec3(_306, _307, _308), vec3(_2130, _2131, _2132));
        float _4146 = isnan(0.0) ? _2137 : (isnan(_2137) ? 0.0 : max(_2137, 0.0));
        float _2140 = isnan(1.0) ? _4146 : (isnan(_4146) ? 1.0 : min(_4146, 1.0));
        float _2141 = dot(vec3(cbLight._m0[_2103].xyz), vec3(_2130, _2131, _2132));
        float _4157 = isnan(0.0) ? _2141 : (isnan(_2141) ? 0.0 : max(_2141, 0.0));
        float _2145 = _2122 * _2122;
        float _2149 = ((_2140 * _2140) * (_2145 + (-1.0))) + 1.0;
        float _2156 = exp2(log2(1.0 - (isnan(1.0) ? _4157 : (isnan(_4157) ? 1.0 : min(_4157, 1.0)))) * 5.0);
        float _2163 = 1.0 - _2122;
        float _2173 = (0.5 / (((_1785 * ((_2136 * _2163) + _2122)) + 9.9999999392252902907785028219223e-09) + (((_1785 * _2163) + _2122) * _2136))) * _2136;
        float _4168 = isnan(0.0) ? _2173 : (isnan(_2173) ? 0.0 : max(_2173, 0.0));
        float _2175 = (isnan(1.0) ? _4168 : (isnan(_4168) ? 1.0 : min(_4168, 1.0))) * (_2145 / ((_2149 * _2149) * 3.141590118408203125));
        float _2176 = isnan(1.0) ? _1543 : (isnan(_1543) ? 1.0 : min(_1543, 1.0));
        _2092 = (((((_2156 * _1807) + _465) * cbLight._m0[_2107].x) * _2175) * _2176) + _1982;
        _2094 = (((((_2156 * _1809) + _467) * cbLight._m0[_2107].y) * _2175) * _2176) + _1984;
        _2096 = (((((_2156 * _1810) + _468) * cbLight._m0[_2107].z) * _2175) * _2176) + _1986;
    }
    float _2285;
    float _2287;
    float _2289;
    float _2291;
    float _2293;
    float _2295;
    if (_1525.y == 0u)
    {
        float _2225 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2226 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2225;
        float _2227 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2225;
        float _2228 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2225;
        uvec4 _2240 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2241 = _2240.x;
        uint _2252 = uint((float(_2240.y) * floor(float(uint(cbSceneParam._m0[85u].y * _399) / _2241))) + floor(float(uint(cbSceneParam._m0[85u].x * _398) / _2241)));
        float _2262 = (log2(_2228 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2263 = isnan(0.0) ? _2262 : (isnan(_2262) ? 0.0 : max(_2262, 0.0));
        uint _2266 = uint(isnan(14.0) ? _2263 : (isnan(_2263) ? 14.0 : min(_2263, 14.0)));
        uvec4 _2271 = texelFetch(g_lightClusterGridBuffer, int(((_2266 << 2u) + (_2252 << 6u)) >> 2u));
        uint _2272 = _2271.x;
        uint _2273 = _2240.z;
        float _2298;
        float _2300;
        float _2302;
        float _2304;
        float _2306;
        float _2308;
        if (((((1u << ((_2273 >> 4u) & 15u)) + 4294967295u) & _2272) == 0u) || ((_2273 & 240u) == 0u))
        {
            _2298 = 0.0;
            _2300 = 0.0;
            _2302 = 0.0;
            _2304 = 0.0;
            _2306 = 0.0;
            _2308 = 0.0;
        }
        else
        {
            float _2299;
            float _2301;
            float _2303;
            float _2305;
            float _2307;
            float _2309;
            float _2479 = 0.0;
            float _2480 = 0.0;
            float _2481 = 0.0;
            float _2482 = 0.0;
            float _2483 = 0.0;
            float _2484 = 0.0;
            uint _2485 = 0u;
            uint _2494;
            bool _2495;
            for (;;)
            {
                _2494 = texelFetch(g_lightClassification, int((((_2266 << 5u) + (_2252 << 9u)) + (_2485 << 2u)) >> 2u)).x;
                _2495 = _2494 == 0u;
                float frontier_phi_64_pred;
                float frontier_phi_64_pred_1;
                float frontier_phi_64_pred_2;
                float frontier_phi_64_pred_3;
                float frontier_phi_64_pred_4;
                float frontier_phi_64_pred_5;
                if (_2495)
                {
                    frontier_phi_64_pred = _2482;
                    frontier_phi_64_pred_1 = _2484;
                    frontier_phi_64_pred_2 = _2483;
                    frontier_phi_64_pred_3 = _2481;
                    frontier_phi_64_pred_4 = _2480;
                    frontier_phi_64_pred_5 = _2479;
                }
                else
                {
                    float _2656;
                    float _2657;
                    float _2658;
                    float _2659;
                    float _2660;
                    float _2661;
                    uint _2662;
                    _2656 = _2479;
                    _2657 = _2480;
                    _2658 = _2481;
                    _2659 = _2482;
                    _2660 = _2483;
                    _2661 = _2484;
                    _2662 = _2494;
                    float _2587;
                    float _2588;
                    float _2589;
                    float _2590;
                    float _2591;
                    float _2592;
                    for (;;)
                    {
                        uint _2666 = uint(findLSB(_2662)) + (_2485 << 5u);
                        uint _2663 = (_2662 + 4294967295u) & _2662;
                        uint _2668 = _2666 * 48u;
                        vec4 _2682 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2668)).x, texelFetch(g_PointLightRenderingBuffer, int(_2668 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2668 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2668 + 3u)).x));
                        uint _2688 = (_2666 * 48u) + 4u;
                        vec4 _2701 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2688)).x, texelFetch(g_PointLightRenderingBuffer, int(_2688 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2688 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2688 + 3u)).x));
                        float _2702 = _2701.x;
                        float _2703 = _2701.y;
                        float _2704 = _2701.z;
                        uint _2707 = (_2666 * 48u) + 8u;
                        vec3 _2718 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2707)).x, texelFetch(g_PointLightRenderingBuffer, int(_2707 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2707 + 2u)).x));
                        uint _2723 = (_2666 * 48u) + 12u;
                        vec2 _2731 = uintBitsToFloat(uvec2(texelFetch(g_PointLightRenderingBuffer, int(_2723)).x, texelFetch(g_PointLightRenderingBuffer, int(_2723 + 1u)).x));
                        float _2737 = inversesqrt(dot(vec3(_2226, _2227, _2228), vec3(_2226, _2227, _2228)));
                        float _2738 = _2737 * _2226;
                        float _2739 = _2737 * _2227;
                        float _2740 = _2737 * _2228;
                        float _2741 = _2682.x - _2226;
                        float _2742 = _2682.y - _2227;
                        float _2743 = _2682.z - _2228;
                        float _2744 = dot(vec3(_2741, _2742, _2743), vec3(_2741, _2742, _2743));
                        float _2747 = inversesqrt(_2744);
                        float _2748 = _2747 * _2741;
                        float _2749 = _2747 * _2742;
                        float _2750 = _2747 * _2743;
                        float _2751 = dot(vec3(_420, _423, _426), vec3(_2748, _2749, _2750));
                        float _2756 = 1.0 - (_2744 * _2682.w);
                        float _4194 = isnan(0.0) ? _2756 : (isnan(_2756) ? 0.0 : max(_2756, 0.0));
                        float _2757 = isnan(1.0) ? _4194 : (isnan(_4194) ? 1.0 : min(_4194, 1.0));
                        float _2758 = sqrt(_2744) * _2701.w;
                        float _2761 = 1.39999997615814208984375 / (_2758 + 1.39999997615814208984375);
                        float _2762 = _2761 * _2761;
                        float _2763 = 1.0 - _2762;
                        float _2765 = (_2763 * _2763) * _311;
                        float _2768 = ((_2763 * _2751) + _2762) + _2765;
                        float _2773 = _2758 * _2758;
                        float _2778 = ((isnan(0.0) ? _2768 : (isnan(_2768) ? 0.0 : max(_2768, 0.0))) * _2757) / (((_2765 * 2.0) + 1.0) * ((_2773 * 0.699999988079071044921875) + 1.0));
                        float _2782 = dot(vec3(_2748, _2749, _2750), vec3(_2738, _2739, _2740));
                        float _4210 = isnan(0.0) ? _2782 : (isnan(_2782) ? 0.0 : max(_2782, 0.0));
                        float _2789 = dot(vec3((-0.0) - _2738, (-0.0) - _2739, (-0.0) - _2740), vec3(_420, _423, _426)) + 1.0;
                        float _2791 = (isnan(0.0) ? _2789 : (isnan(_2789) ? 0.0 : max(_2789, 0.0))) * 0.5;
                        float _2798 = ((_2791 * _2791) * _2731.x) * exp2((_2731.y * 32.0) * log2(isnan(1.0) ? _4210 : (isnan(_4210) ? 1.0 : min(_4210, 1.0))));
                        float _2800 = _311 / (_311 + 1.0);
                        float _2816 = (-0.0) - _2226;
                        float _2817 = (-0.0) - _2227;
                        float _2818 = (-0.0) - _2228;
                        float _2822 = inversesqrt(dot(vec3(_2816, _2817, _2818), vec3(_2816, _2817, _2818)));
                        float _2823 = _2822 * _2816;
                        float _2824 = _2822 * _2817;
                        float _2825 = _2822 * _2818;
                        float _2833 = exp2(log2(1.0 / ((_2773 * 3.5) + 5.0)) * 0.25);
                        float _2834 = 1.0 - _496;
                        float _2841 = sqrt(1.0 - ((1.0 - (_2834 * _2834)) * (1.0 - (_2833 * _2833))));
                        float _2842 = _2841 * _2841;
                        float _2843 = _2842 * _2842;
                        float _2844 = _2823 + _2748;
                        float _2845 = _2824 + _2749;
                        float _2846 = _2825 + _2750;
                        float _2850 = inversesqrt(dot(vec3(_2844, _2845, _2846), vec3(_2844, _2845, _2846)));
                        float _2854 = dot(vec3(_420, _423, _426), vec3(_2823, _2824, _2825));
                        float _4226 = isnan(0.0) ? _2854 : (isnan(_2854) ? 0.0 : max(_2854, 0.0));
                        float _2857 = isnan(1.0) ? _4226 : (isnan(_4226) ? 1.0 : min(_4226, 1.0));
                        float _2858 = dot(vec3(_420, _423, _426), vec3(_2850 * _2844, _2850 * _2845, _2850 * _2846));
                        float _4237 = isnan(0.0) ? _2858 : (isnan(_2858) ? 0.0 : max(_2858, 0.0));
                        float _2861 = isnan(1.0) ? _4237 : (isnan(_4237) ? 1.0 : min(_4237, 1.0));
                        float _2865 = ((_2861 * _2861) * (_2843 + (-1.0))) + 1.0;
                        float _2866 = _2761 * _2842;
                        float _2867 = _2866 * _2866;
                        float _2870 = ((1.0 - _2867) * _2751) + _2867;
                        float _4248 = isnan(0.0) ? _2870 : (isnan(_2870) ? 0.0 : max(_2870, 0.0));
                        float _2871 = isnan(1.0) ? _4248 : (isnan(_4248) ? 1.0 : min(_4248, 1.0));
                        float _2872 = 1.0 - _2842;
                        float _2882 = (0.5 / (((_2871 * ((_2857 * _2872) + _2842)) + 9.9999999392252902907785028219223e-09) + (((_2871 * _2872) + _2842) * _2857))) * _2871;
                        float _4259 = isnan(0.0) ? _2882 : (isnan(_2882) ? 0.0 : max(_2882, 0.0));
                        float _2893 = (((_2843 * 3.1415927410125732421875) * (isnan(1.0) ? _4259 : (isnan(_4259) ? 1.0 : min(_4259, 1.0)))) / ((_2865 * _2865) * ((_2773 * 2.1991131305694580078125) + 3.141590118408203125))) * _2757;
                        _2590 = (((((_2702 * 0.3183098733425140380859375) * _2800) * _2798) + _2702) * _2778) + _2659;
                        _2591 = (((((_2703 * 0.3183098733425140380859375) * _2800) * _2798) + _2703) * _2778) + _2660;
                        _2592 = (((((_2704 * 0.3183098733425140380859375) * _2800) * _2798) + _2704) * _2778) + _2661;
                        _2587 = (_2893 * _2718.x) + _2656;
                        _2588 = (_2893 * _2718.y) + _2657;
                        _2589 = (_2893 * _2718.z) + _2658;
                        if (_2663 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2656 = _2587;
                            _2657 = _2588;
                            _2658 = _2589;
                            _2659 = _2590;
                            _2660 = _2591;
                            _2661 = _2592;
                            _2662 = _2663;
                        }
                    }
                    frontier_phi_64_pred = _2590;
                    frontier_phi_64_pred_1 = _2592;
                    frontier_phi_64_pred_2 = _2591;
                    frontier_phi_64_pred_3 = _2589;
                    frontier_phi_64_pred_4 = _2588;
                    frontier_phi_64_pred_5 = _2587;
                }
                _2305 = frontier_phi_64_pred;
                _2309 = frontier_phi_64_pred_1;
                _2307 = frontier_phi_64_pred_2;
                _2303 = frontier_phi_64_pred_3;
                _2301 = frontier_phi_64_pred_4;
                _2299 = frontier_phi_64_pred_5;
                uint _2486 = _2485 + 1u;
                if (_2486 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2479 = _2299;
                    _2480 = _2301;
                    _2481 = _2303;
                    _2482 = _2305;
                    _2483 = _2307;
                    _2484 = _2309;
                    _2485 = _2486;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2298 = _2299;
            _2300 = _2301;
            _2302 = _2303;
            _2304 = _2305;
            _2306 = _2307;
            _2308 = _2309;
        }
        uvec4 _2312 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2313 = _2312.z;
        uint _2315 = (_2313 >> 8u) & 15u;
        float _2447;
        float _2449;
        float _2451;
        float _2453;
        float _2455;
        float _2457;
        if (((4294967295u << _2315) & _2272) == 0u)
        {
            _2447 = _2298;
            _2449 = _2300;
            _2451 = _2302;
            _2453 = _2304;
            _2455 = _2306;
            _2457 = _2308;
        }
        else
        {
            float _2472 = inversesqrt(dot(vec3(_2226, _2227, _2228), vec3(_2226, _2227, _2228)));
            float _2473 = _2472 * _2226;
            float _2474 = _2472 * _2227;
            float _2475 = _2472 * _2228;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2315 < ((_2313 >> 12u) & 15u))
            {
                float _2448;
                float _2450;
                float _2452;
                float _2454;
                float _2456;
                float _2458;
                float _2639 = _2298;
                float _2640 = _2300;
                float _2641 = _2302;
                float _2642 = _2304;
                float _2643 = _2306;
                float _2644 = _2308;
                uint _2645 = _2315;
                uint _2654;
                bool _2655;
                for (;;)
                {
                    _2654 = texelFetch(g_lightClassification, int((((_2266 << 5u) + (_2252 << 9u)) + (_2645 << 2u)) >> 2u)).x;
                    _2655 = _2654 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_2655)
                    {
                        frontier_phi_72_pred = _2644;
                        frontier_phi_72_pred_1 = _2643;
                        frontier_phi_72_pred_2 = _2642;
                        frontier_phi_72_pred_3 = _2641;
                        frontier_phi_72_pred_4 = _2640;
                        frontier_phi_72_pred_5 = _2639;
                    }
                    else
                    {
                        float _2936;
                        float _2937;
                        float _2938;
                        float _2939;
                        float _2940;
                        float _2941;
                        float _3280;
                        float _3281;
                        float _3282;
                        float _3283;
                        float _3284;
                        float _3285;
                        float _2949 = _2639;
                        float _2950 = _2640;
                        float _2951 = _2641;
                        float _2952 = _2642;
                        float _2953 = _2643;
                        float _2954 = _2644;
                        uint _2955 = _2654;
                        uint _2956;
                        vec4 _2981;
                        float _2982;
                        vec4 _2997;
                        float _2998;
                        float _2999;
                        float _3000;
                        vec3 _3012;
                        vec2 _3021;
                        vec4 _3037;
                        vec4 _3053;
                        float _3100;
                        bool _3101;
                        for (;;)
                        {
                            uint _2966 = ((_2645 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2955));
                            _2956 = (_2955 + 4294967295u) & _2955;
                            uint _2968 = _2966 * 40u;
                            _2981 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2968)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2968 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2968 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2968 + 3u)).x));
                            _2982 = _2981.w;
                            uint _2984 = (_2966 * 40u) + 4u;
                            _2997 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2984)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2984 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2984 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2984 + 3u)).x));
                            _2998 = _2997.x;
                            _2999 = _2997.y;
                            _3000 = _2997.z;
                            uint _3002 = (_2966 * 40u) + 8u;
                            _3012 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3002)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3002 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3002 + 2u)).x));
                            uint _3014 = (_2966 * 40u) + 12u;
                            _3021 = uintBitsToFloat(uvec2(texelFetch(g_SpotLightRenderingBuffer, int(_3014)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3014 + 1u)).x));
                            uint _3024 = (_2966 * 40u) + 16u;
                            _3037 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3024)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3024 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3024 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3024 + 3u)).x));
                            uint _3040 = (_2966 * 40u) + 20u;
                            _3053 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3040)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3040 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3040 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3040 + 3u)).x));
                            uint _3056 = (_2966 * 40u) + 24u;
                            vec4 _3069 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3056)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3056 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3056 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3056 + 3u)).x));
                            uint _3075 = (_2966 * 40u) + 28u;
                            vec4 _3088 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3075)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3075 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3075 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3075 + 3u)).x));
                            _3100 = fma(_2228, _3088.z, fma(_2227, _3088.y, _3088.x * _2226)) + _3088.w;
                            _3101 = !((fma(_2228, _3069.z, fma(_2227, _3069.y, _3069.x * _2226)) + _3069.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3101)
                            {
                                float _3127 = _2981.x - _2226;
                                float _3128 = _2981.y - _2227;
                                float _3129 = _2981.z - _2228;
                                float _3130 = dot(vec3(_3127, _3128, _3129), vec3(_3127, _3128, _3129));
                                float _3133 = inversesqrt(_3130);
                                float _3134 = _3133 * _3127;
                                float _3135 = _3133 * _3128;
                                float _3136 = _3133 * _3129;
                                float _3140 = 1.0 - (_3130 / (_2982 * _2982));
                                float _4270 = isnan(0.0) ? _3140 : (isnan(_3140) ? 0.0 : max(_3140, 0.0));
                                float _3141 = isnan(1.0) ? _4270 : (isnan(_4270) ? 1.0 : min(_4270, 1.0));
                                float _3145 = sqrt(_3130) * _2997.w;
                                float _3147 = 1.39999997615814208984375 / (_3145 + 1.39999997615814208984375);
                                float _3148 = _3147 * _3147;
                                float _3149 = 1.0 - _3148;
                                float _3151 = (_3149 * _3149) * _311;
                                float _3154 = ((_3149 * dot(vec3(_3134, _3135, _3136), vec3(_420, _423, _426))) + _3148) + _3151;
                                float _3159 = _3145 * _3145;
                                float _3164 = (fma(_2228, _3037.z, fma(_2227, _3037.y, _3037.x * _2226)) + _3037.w) / _3100;
                                float _3165 = (fma(_2228, _3053.z, fma(_2227, _3053.y, _3053.x * _2226)) + _3053.w) / _3100;
                                float _3169 = 1.0 - dot(vec2(_3164, _3165), vec2(_3164, _3165));
                                float _4286 = isnan(0.0) ? _3169 : (isnan(_3169) ? 0.0 : max(_3169, 0.0));
                                float _3170 = isnan(1.0) ? _4286 : (isnan(_4286) ? 1.0 : min(_4286, 1.0));
                                float _3171 = _3170 * (((isnan(0.0) ? _3154 : (isnan(_3154) ? 0.0 : max(_3154, 0.0))) * _3141) / (((_3151 * 2.0) + 1.0) * ((_3159 * 0.699999988079071044921875) + 1.0)));
                                float _3172 = (-0.0) - _2473;
                                float _3173 = (-0.0) - _2474;
                                float _3174 = (-0.0) - _2475;
                                float _3175 = dot(vec3(_3134, _3135, _3136), vec3(_2473, _2474, _2475));
                                float _4297 = isnan(0.0) ? _3175 : (isnan(_3175) ? 0.0 : max(_3175, 0.0));
                                float _3182 = dot(vec3(_3172, _3173, _3174), vec3(_420, _423, _426)) + 1.0;
                                float _3184 = (isnan(0.0) ? _3182 : (isnan(_3182) ? 0.0 : max(_3182, 0.0))) * 0.5;
                                float _3191 = ((_3184 * _3184) * _3021.x) * exp2((_3021.y * 32.0) * log2(isnan(1.0) ? _4297 : (isnan(_4297) ? 1.0 : min(_4297, 1.0))));
                                float _3193 = _311 / (_311 + 1.0);
                                float _3214 = exp2(log2(1.0 / ((_3159 * 3.5) + 5.0)) * 0.25);
                                float _3215 = 1.0 - _496;
                                float _3222 = sqrt(1.0 - ((1.0 - (_3215 * _3215)) * (1.0 - (_3214 * _3214))));
                                float _3223 = _3222 * _3222;
                                float _3224 = _3223 * _3223;
                                float _3225 = _3134 - _2473;
                                float _3226 = _3135 - _2474;
                                float _3227 = _3136 - _2475;
                                float _3231 = inversesqrt(dot(vec3(_3225, _3226, _3227), vec3(_3225, _3226, _3227)));
                                float _3235 = dot(vec3(_420, _423, _426), vec3(_3172, _3173, _3174));
                                float _4313 = isnan(0.0) ? _3235 : (isnan(_3235) ? 0.0 : max(_3235, 0.0));
                                float _3238 = isnan(1.0) ? _4313 : (isnan(_4313) ? 1.0 : min(_4313, 1.0));
                                float _3239 = dot(vec3(_420, _423, _426), vec3(_3231 * _3225, _3231 * _3226, _3231 * _3227));
                                float _4324 = isnan(0.0) ? _3239 : (isnan(_3239) ? 0.0 : max(_3239, 0.0));
                                float _3242 = isnan(1.0) ? _4324 : (isnan(_4324) ? 1.0 : min(_4324, 1.0));
                                float _3246 = ((_3242 * _3242) * (_3224 + (-1.0))) + 1.0;
                                float _3247 = _3147 * _3223;
                                float _3248 = _3247 * _3247;
                                float _3254 = ((1.0 - _3248) * dot(vec3(_420, _423, _426), vec3(_3134, _3135, _3136))) + _3248;
                                float _4335 = isnan(0.0) ? _3254 : (isnan(_3254) ? 0.0 : max(_3254, 0.0));
                                float _3255 = isnan(1.0) ? _4335 : (isnan(_4335) ? 1.0 : min(_4335, 1.0));
                                float _3256 = 1.0 - _3223;
                                float _3266 = (0.5 / (((_3255 * ((_3238 * _3256) + _3223)) + 9.9999999392252902907785028219223e-09) + (((_3255 * _3256) + _3223) * _3238))) * _3255;
                                float _4346 = isnan(0.0) ? _3266 : (isnan(_3266) ? 0.0 : max(_3266, 0.0));
                                float _3276 = (_3170 * _3141) * (((_3224 * 3.1415927410125732421875) * (isnan(1.0) ? _4346 : (isnan(_4346) ? 1.0 : min(_4346, 1.0)))) / ((_3246 * _3246) * ((_3159 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = ((((_3000 * 0.3183098733425140380859375) * _3193) * _3191) + _3000) * _3171;
                                frontier_phi_78_pred_1 = ((((_2999 * 0.3183098733425140380859375) * _3193) * _3191) + _2999) * _3171;
                                frontier_phi_78_pred_2 = ((((_2998 * 0.3183098733425140380859375) * _3193) * _3191) + _2998) * _3171;
                                frontier_phi_78_pred_3 = _3276 * _3012.z;
                                frontier_phi_78_pred_4 = _3276 * _3012.y;
                                frontier_phi_78_pred_5 = _3276 * _3012.x;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3285 = frontier_phi_78_pred;
                            _3284 = frontier_phi_78_pred_1;
                            _3283 = frontier_phi_78_pred_2;
                            _3282 = frontier_phi_78_pred_3;
                            _3281 = frontier_phi_78_pred_4;
                            _3280 = frontier_phi_78_pred_5;
                            _2939 = _3283 + _2952;
                            _2940 = _3284 + _2953;
                            _2941 = _3285 + _2954;
                            _2936 = _3280 + _2949;
                            _2937 = _3281 + _2950;
                            _2938 = _3282 + _2951;
                            if (_2956 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2949 = _2936;
                                _2950 = _2937;
                                _2951 = _2938;
                                _2952 = _2939;
                                _2953 = _2940;
                                _2954 = _2941;
                                _2955 = _2956;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _2941;
                        frontier_phi_72_pred_1 = _2940;
                        frontier_phi_72_pred_2 = _2939;
                        frontier_phi_72_pred_3 = _2938;
                        frontier_phi_72_pred_4 = _2937;
                        frontier_phi_72_pred_5 = _2936;
                    }
                    _2458 = frontier_phi_72_pred;
                    _2456 = frontier_phi_72_pred_1;
                    _2454 = frontier_phi_72_pred_2;
                    _2452 = frontier_phi_72_pred_3;
                    _2450 = frontier_phi_72_pred_4;
                    _2448 = frontier_phi_72_pred_5;
                    uint _2646 = _2645 + 1u;
                    if (_2646 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2639 = _2448;
                        _2640 = _2450;
                        _2641 = _2452;
                        _2642 = _2454;
                        _2643 = _2456;
                        _2644 = _2458;
                        _2645 = _2646;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2452;
                frontier_phi_58_59_ladder_1 = _2458;
                frontier_phi_58_59_ladder_2 = _2456;
                frontier_phi_58_59_ladder_3 = _2454;
                frontier_phi_58_59_ladder_4 = _2450;
                frontier_phi_58_59_ladder_5 = _2448;
            }
            else
            {
                frontier_phi_58_59_ladder = _2302;
                frontier_phi_58_59_ladder_1 = _2308;
                frontier_phi_58_59_ladder_2 = _2306;
                frontier_phi_58_59_ladder_3 = _2304;
                frontier_phi_58_59_ladder_4 = _2300;
                frontier_phi_58_59_ladder_5 = _2298;
            }
            _2447 = frontier_phi_58_59_ladder_5;
            _2449 = frontier_phi_58_59_ladder_4;
            _2451 = frontier_phi_58_59_ladder;
            _2453 = frontier_phi_58_59_ladder_3;
            _2455 = frontier_phi_58_59_ladder_2;
            _2457 = frontier_phi_58_59_ladder_1;
        }
        float _2462 = isnan(1.0) ? _480 : (isnan(_480) ? 1.0 : min(_480, 1.0));
        _2285 = (_2462 * _2453) + _1744;
        _2287 = (_2462 * _2455) + _1746;
        _2289 = (_2462 * _2457) + _1748;
        _2291 = ((_2447 * _465) * _2462) + _2092;
        _2293 = ((_2449 * _467) * _2462) + _2094;
        _2295 = ((_2451 * _468) * _2462) + _2096;
    }
    else
    {
        _2285 = _1744;
        _2287 = _1746;
        _2289 = _1748;
        _2291 = _2092;
        _2293 = _2094;
        _2295 = _2096;
    }
    float _2384;
    float _2385;
    float _2386;
    if (_311 > 0.0)
    {
        uint _2319 = _1527 + 4u;
        float _2325 = (-0.0) - _390;
        float _2327 = (-0.0) - _391;
        float _2328 = (-0.0) - _392;
        float _2329 = dot(vec3(cbLight._m0[_1527].xyz), vec3(_2325, _2327, _2328));
        float _4362 = isnan(0.0) ? _2329 : (isnan(_2329) ? 0.0 : max(_2329, 0.0));
        float _2333 = _491 + 1.0;
        float _2335 = (isnan(0.0) ? _2333 : (isnan(_2333) ? 0.0 : max(_2333, 0.0))) * 0.5;
        float _2340 = _2335 * _2335;
        float _2341 = _2340 * exp2(log2(isnan(1.0) ? _4362 : (isnan(_4362) ? 1.0 : min(_4362, 1.0))) * 32.0);
        float _2343 = _311 / (_311 + 1.0);
        float _2344 = isnan(_1540) ? 1.0 : (isnan(1.0) ? _1540 : min(1.0, _1540));
        uint _2354 = _1527 + 5u;
        float _2360 = dot(vec3(cbLight._m0[_1841].xyz), vec3(_2325, _2327, _2328));
        float _4383 = isnan(0.0) ? _2360 : (isnan(_2360) ? 0.0 : max(_2360, 0.0));
        float _2367 = _2340 * exp2(log2(isnan(1.0) ? _4383 : (isnan(_4383) ? 1.0 : min(_4383, 1.0))) * 32.0);
        float _2368 = isnan(_1541) ? 1.0 : (isnan(1.0) ? _1541 : min(1.0, _1541));
        _2384 = ((((_2367 * cbLight._m0[_2354].x) * _2343) * _2368) + (((_2341 * cbLight._m0[_2319].x) * _2343) * _2344)) * 0.3183098733425140380859375;
        _2385 = ((((_2367 * cbLight._m0[_2354].y) * _2343) * _2368) + (((_2341 * cbLight._m0[_2319].y) * _2343) * _2344)) * 0.3183098733425140380859375;
        _2386 = ((((_2367 * cbLight._m0[_2354].z) * _2343) * _2368) + (((_2341 * cbLight._m0[_2319].z) * _2343) * _2344)) * 0.3183098733425140380859375;
    }
    else
    {
        _2384 = 0.0;
        _2385 = 0.0;
        _2386 = 0.0;
    }
    float _4399 = isnan(0.0) ? _455 : (isnan(_455) ? 0.0 : max(_455, 0.0));
    float _4410 = isnan(0.0) ? _456 : (isnan(_456) ? 0.0 : max(_456, 0.0));
    float _4421 = isnan(0.0) ? _457 : (isnan(_457) ? 0.0 : max(_457, 0.0));
    float _4432 = isnan(0.0) ? _309 : (isnan(_309) ? 0.0 : max(_309, 0.0));
    float _2413 = cbInstanceData._m0[_439 + 6u].w * (isnan(1.0) ? _4432 : (isnan(_4432) ? 1.0 : min(_4432, 1.0)));
    float _2418 = _398 / cbSceneParam._m0[86u].x;
    float _2419 = _399 / cbSceneParam._m0[86u].y;
    vec4 _2433 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2418, _2419, (log2((isnan(cbSceneParam._m0[77u].w) ? _331 : (isnan(_331) ? cbSceneParam._m0[77u].w : min(_331, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2435 = _2433.x;
    float _2436 = _2433.y;
    float _2437 = _2433.z;
    float _2438 = _2433.w;
    float _2537;
    float _2539;
    float _2541;
    float _2543;
    if (_331 > cbSceneParam._m0[78u].w)
    {
        float _2500 = isnan(_331) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _331 : min(cbSceneParam._m0[80u].w, _331));
        float _2501 = _2500 / _331;
        float _2512 = _2501 * _383;
        float _2513 = _384 * _2501;
        float _2514 = (-0.0) - _2513;
        float _2515 = _2501 * _385;
        float _2517 = (cbSceneParam._m0[77u].w * _2514) / _2500;
        float _2518 = _2517 + cbSceneParam._m0[79u].w;
        float _2519 = cbSceneParam._m0[79u].w - _2513;
        float _2525 = sqrt(((_2512 * _2512) + (_2513 * _2513)) + (_2515 * _2515));
        float _2528 = (1.0 - (cbSceneParam._m0[77u].w / _2500)) * _2525;
        float _2533 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2535 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2898;
        if (abs((_2514 - _2517) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2898 = ((((_2518 > 0.0) ? exp2(_2533 * _2518) : (2.0 - exp2(_2535 * _2518))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2528;
        }
        else
        {
            float _2612 = 1.0 / cbSceneParam._m0[80u].x;
            float _2613 = isnan(_2519) ? _2518 : (isnan(_2518) ? _2519 : max(_2518, _2519));
            float _2614 = isnan(_2519) ? _2518 : (isnan(_2518) ? _2519 : min(_2518, _2519));
            float _2623 = isnan(0.0) ? _2613 : (isnan(_2613) ? 0.0 : min(_2613, 0.0));
            float _2624 = isnan(0.0) ? _2614 : (isnan(_2614) ? 0.0 : min(_2614, 0.0));
            _2898 = ((abs(_2525 / _2514) * cbSceneParam._m0[80u].y) * ((((_2623 - _2624) * 2.0) - ((exp2(_2533 * (isnan(0.0) ? _2613 : (isnan(_2613) ? 0.0 : max(_2613, 0.0)))) - exp2(_2533 * (isnan(0.0) ? _2614 : (isnan(_2614) ? 0.0 : max(_2614, 0.0))))) * _2612)) - ((exp2(_2535 * _2623) - exp2(_2535 * _2624)) * _2612))) + (_2528 * cbSceneParam._m0[80u].z);
        }
        vec4 _2900 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2418, _2419, 1.0), 0.0);
        float _2909 = exp2((_2898 * (-1.44269502162933349609375)) * (1.0 - _2900.w));
        float _2910 = log2(_2909);
        float _2926 = log2(_2438);
        _2537 = (exp2(_2926 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2910 * cbSceneParam._m0[78u].x)) * _2900.x) / cbSceneParam._m0[78u].x)) + _2435;
        _2539 = (exp2(_2926 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2910 * cbSceneParam._m0[78u].y)) * _2900.y) / cbSceneParam._m0[78u].y)) + _2436;
        _2541 = (exp2(_2926 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2910 * cbSceneParam._m0[78u].z)) * _2900.z) / cbSceneParam._m0[78u].z)) + _2437;
        _2543 = _2909 * _2438;
    }
    else
    {
        _2537 = _2435;
        _2539 = _2436;
        _2541 = _2437;
        _2543 = _2438;
    }
    float _2555 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2556 = _2555 == 3.0;
    float _2557 = log2(_2543);
    float _2564 = exp2(_2557 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4399 : (isnan(_4399) ? 1.0 : min(_4399, 1.0))) * ((_2285 + ((isnan(0.0) ? _1211 : (isnan(_1211) ? 0.0 : max(_1211, 0.0))) * _480)) + _2384)) + ((_2291 + ((isnan(0.0) ? _1509 : (isnan(_1509) ? 0.0 : max(_1509, 0.0))) * _1290)) * cbPerFrame._m0[3u].x));
    float _2565 = exp2(_2557 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4410 : (isnan(_4410) ? 1.0 : min(_4410, 1.0))) * ((_2287 + ((isnan(0.0) ? _1214 : (isnan(_1214) ? 0.0 : max(_1214, 0.0))) * _480)) + _2385)) + ((_2293 + ((isnan(0.0) ? _1512 : (isnan(_1512) ? 0.0 : max(_1512, 0.0))) * _1290)) * cbPerFrame._m0[3u].x));
    float _2566 = exp2(_2557 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4421 : (isnan(_4421) ? 1.0 : min(_4421, 1.0))) * ((_2289 + ((isnan(0.0) ? _1217 : (isnan(_1217) ? 0.0 : max(_1217, 0.0))) * _480)) + _2386)) + ((_2295 + ((isnan(0.0) ? _1515 : (isnan(_1515) ? 0.0 : max(_1515, 0.0))) * _1290)) * cbPerFrame._m0[3u].x));
    float _2575 = (_2555 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2575 * (_2556 ? _2564 : (_2564 + (cbSceneParam._m0[72u].w * _2537)));
    SV_Target.y = _2575 * (_2556 ? _2565 : (_2565 + (cbSceneParam._m0[72u].w * _2539)));
    SV_Target.z = _2575 * (_2556 ? _2566 : (_2566 + (cbSceneParam._m0[72u].w * _2541)));
    SV_Target.w = _2413;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2413;
}


