#version 460

out float gl_ClipDistance[2];

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[12];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 5, std140) uniform cbObjMatrixUBO
{
    vec4 _m0[6];
} cbObjMatrix;

layout(set = 0, binding = 10, std140) uniform cbInstanceIdxParamUBO
{
    vec4 _m0[1];
} cbInstanceIdxParam;

layout(set = 0, binding = 11, std140) uniform cbTexScrollUBO
{
    vec4 _m0[4];
} cbTexScroll;

layout(set = 0, binding = 26) uniform usamplerBuffer g_forceParam;
layout(set = 0, binding = 25) uniform usamplerBuffer g_InstanceIndexBuffer;

layout(location = 0) in vec3 POSITION;
layout(location = 1) in uvec4 NORMAL;
layout(location = 2) in uvec4 TANGENT;
layout(location = 3) in vec4 COLOR_1;
layout(location = 4) in ivec2 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_1;
layout(location = 1) out vec4 NORMAL_1;
layout(location = 2) out vec4 TANGENT_1;
layout(location = 3) out float TEXCOORD_2;
layout(location = 3, component = 1) out float TEXCOORD_1_1;
layout(location = 4) out vec4 TEXCOORD_3;
layout(location = 3, component = 2) out vec2 TEXCOORD_7;
layout(location = 5) out float TEXCOORD_11;

uint _770;
uint _893;

void main()
{
    uint _84 = uint(gl_InstanceIndex) - uint(gl_BaseInstance);
    gl_Position.x = 0.0;
    gl_Position.y = 0.0;
    gl_Position.z = 0.0;
    gl_Position.w = 0.0;
    NORMAL_1.x = 0.0;
    NORMAL_1.y = 0.0;
    NORMAL_1.z = 0.0;
    NORMAL_1.w = 0.0;
    TANGENT_1.x = 0.0;
    TANGENT_1.y = 0.0;
    TANGENT_1.z = 0.0;
    TANGENT_1.w = 0.0;
    TEXCOORD_2 = 0.0;
    TEXCOORD_1_1 = 0.0;
    TEXCOORD_3.x = 0.0;
    TEXCOORD_3.y = 0.0;
    TEXCOORD_3.z = 0.0;
    TEXCOORD_3.w = 0.0;
    TEXCOORD_7.x = 0.0;
    TEXCOORD_7.y = 0.0;
    TEXCOORD_11 = 0.0;
    gl_ClipDistance[0u] = 0.0;
    gl_ClipDistance[1u] = 0.0;
    float _173 = (float(NORMAL.x) + (-127.0)) * 0.0078740157186985015869140625;
    float _175 = (float(NORMAL.y) + (-127.0)) * 0.0078740157186985015869140625;
    float _176 = (float(NORMAL.z) + (-127.0)) * 0.0078740157186985015869140625;
    float _186 = (float(TANGENT.x) + (-127.0)) * 0.0078740157186985015869140625;
    float _187 = (float(TANGENT.y) + (-127.0)) * 0.0078740157186985015869140625;
    float _188 = (float(TANGENT.z) + (-127.0)) * 0.0078740157186985015869140625;
    uint _190 = _84 * 13u;
    uvec4 _196 = floatBitsToUint(cbInstanceData._m0[_190 + 7u]);
    uint _199 = min(_196.y, 8u);
    bool _202 = _199 == 0u;
    precise float _203 = POSITION.x + 0.0;
    precise float _204 = POSITION.y + 0.0;
    precise float _205 = POSITION.z + 0.0;
    uint _210 = floatBitsToUint(cbInstanceIdxParam._m0[0u]).x + _84;
    uvec4 _212 = texelFetch(g_InstanceIndexBuffer, int(_210));
    uint _213 = _212.x;
    uint _215 = _213 * 13u;
    uint _222 = (floatBitsToUint(cbInstanceData._m0[_215 + 4u]).x + uint(float(NORMAL.w))) * 3u;
    uint _229 = _222 + 1u;
    uint _236 = _222 + 2u;
    precise float _243 = _203 * cbObjMatrix._m0[_222].x;
    precise float _244 = _204 * cbObjMatrix._m0[_222].y;
    precise float _245 = _244 + _243;
    precise float _246 = _205 * cbObjMatrix._m0[_222].z;
    precise float _247 = _246 + _245;
    precise float _248 = 1.0 * cbObjMatrix._m0[_222].w;
    precise float _250 = _248 + _247;
    precise float _251 = _203 * cbObjMatrix._m0[_229].x;
    precise float _252 = _204 * cbObjMatrix._m0[_229].y;
    precise float _253 = _252 + _251;
    precise float _254 = _205 * cbObjMatrix._m0[_229].z;
    precise float _255 = _254 + _253;
    precise float _256 = 1.0 * cbObjMatrix._m0[_229].w;
    precise float _257 = _256 + _255;
    precise float _258 = _203 * cbObjMatrix._m0[_236].x;
    precise float _259 = _204 * cbObjMatrix._m0[_236].y;
    precise float _260 = _259 + _258;
    precise float _261 = _205 * cbObjMatrix._m0[_236].z;
    precise float _262 = _261 + _260;
    precise float _263 = 1.0 * cbObjMatrix._m0[_236].w;
    precise float _264 = _263 + _262;
    float _270 = cbSceneParam._m0[3u].x - _250;
    float _271 = cbSceneParam._m0[3u].y - _257;
    float _272 = cbSceneParam._m0[3u].z - _264;
    uint _304 = _190 + 1u;
    uint _311 = _190 + 2u;
    precise float _318 = TEXCOORD_1.x * cbInstanceData._m0[_190].x;
    precise float _319 = TEXCOORD_1.y * cbInstanceData._m0[_190].y;
    precise float _320 = _319 + _318;
    precise float _321 = TEXCOORD_1.z * cbInstanceData._m0[_190].z;
    precise float _322 = _321 + _320;
    precise float _323 = 1.0 * cbInstanceData._m0[_190].w;
    precise float _324 = _323 + _322;
    precise float _325 = TEXCOORD_1.x * cbInstanceData._m0[_304].x;
    precise float _326 = TEXCOORD_1.y * cbInstanceData._m0[_304].y;
    precise float _327 = _326 + _325;
    precise float _328 = TEXCOORD_1.z * cbInstanceData._m0[_304].z;
    precise float _329 = _328 + _327;
    precise float _330 = 1.0 * cbInstanceData._m0[_304].w;
    precise float _331 = _330 + _329;
    precise float _332 = TEXCOORD_1.x * cbInstanceData._m0[_311].x;
    precise float _333 = TEXCOORD_1.y * cbInstanceData._m0[_311].y;
    precise float _334 = _333 + _332;
    precise float _335 = TEXCOORD_1.z * cbInstanceData._m0[_311].z;
    precise float _336 = _335 + _334;
    precise float _337 = 1.0 * cbInstanceData._m0[_311].w;
    precise float _338 = _337 + _336;
    precise float _344 = _250 - _324;
    precise float _345 = _257 - _331;
    precise float _346 = _264 - _338;
    precise float _347 = _344 * _344;
    precise float _348 = _345 * _345;
    precise float _349 = _347 + _348;
    precise float _350 = _346 * _346;
    precise float _351 = _349 + _350;
    precise float _353 = cbMtdParam._m0[10u].z * sqrt(_351);
    precise float _358 = cbInstanceData._m0[_190].x * 0.0;
    precise float _359 = 0.0 * cbInstanceData._m0[_190].y;
    precise float _360 = _359 + _358;
    precise float _361 = 0.0 * cbInstanceData._m0[_190].z;
    precise float _362 = _361 + _360;
    precise float _363 = 1.0 * cbInstanceData._m0[_190].w;
    precise float _364 = _363 + _362;
    precise float _365 = cbInstanceData._m0[_304].x * 0.0;
    precise float _366 = 0.0 * cbInstanceData._m0[_304].y;
    precise float _367 = _366 + _365;
    precise float _368 = 0.0 * cbInstanceData._m0[_304].z;
    precise float _369 = _368 + _367;
    precise float _370 = 1.0 * cbInstanceData._m0[_304].w;
    precise float _371 = _370 + _369;
    precise float _372 = cbInstanceData._m0[_311].x * 0.0;
    precise float _373 = 0.0 * cbInstanceData._m0[_311].y;
    precise float _374 = _373 + _372;
    precise float _375 = 0.0 * cbInstanceData._m0[_311].z;
    precise float _376 = _375 + _374;
    precise float _377 = 1.0 * cbInstanceData._m0[_311].w;
    precise float _378 = _377 + _376;
    precise float _381 = _250 * _250;
    precise float _382 = _257 * _257;
    precise float _383 = _381 + _382;
    precise float _384 = _264 * _264;
    precise float _385 = _383 + _384;
    precise float _387 = cbMtdParam._m0[11u].x * sqrt(_385);
    precise float _388 = cbPerFrame._m0[22u].x + _387;
    uint _389 = _196.w;
    float _390;
    float _392;
    float _394;
    if (_202)
    {
        _390 = 0.0;
        _392 = 0.0;
        _394 = 0.0;
    }
    else
    {
        uint _514 = _196.z;
        precise float _391;
        precise float _393;
        precise float _395;
        float _964;
        float _966;
        float _968;
        float _702 = 0.0;
        float _703 = 0.0;
        float _704 = 0.0;
        uint _705 = _514;
        uint _707 = 0u;
        float _743;
        float _762;
        vec4 _775;
        float _776;
        float _777;
        float _791;
        float _792;
        float _793;
        float _810;
        float _811;
        float _812;
        float _813;
        bool _814;
        bool _815;
        bool _816;
        precise float _817;
        precise float _818;
        precise float _819;
        float _820;
        float _821;
        float _822;
        precise float _823;
        bool _826;
        for (;;)
        {
            uint _709 = _705 & 255u;
            uint _711 = _709 * 24u;
            uvec3 _721 = uvec3(texelFetch(g_forceParam, int(_711)).x, texelFetch(g_forceParam, int(_711 + 1u)).x, texelFetch(g_forceParam, int(_711 + 2u)).x);
            uint _726 = (_709 * 24u) + 4u;
            vec4 _739 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_726)).x, texelFetch(g_forceParam, int(_726 + 1u)).x, texelFetch(g_forceParam, int(_726 + 2u)).x, texelFetch(g_forceParam, int(_726 + 3u)).x));
            _743 = _739.w;
            uint _745 = (_709 * 24u) + 8u;
            vec4 _758 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_745)).x, texelFetch(g_forceParam, int(_745 + 1u)).x, texelFetch(g_forceParam, int(_745 + 2u)).x, texelFetch(g_forceParam, int(_745 + 3u)).x));
            _762 = _758.w;
            uint _764 = (_709 * 24u) + 12u;
            _775 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_764)).x, texelFetch(g_forceParam, int(_764 + 1u)).x, _770, texelFetch(g_forceParam, int(_764 + 3u)).x));
            _776 = _775.x;
            _777 = _775.w;
            uint _780 = (_709 * 24u) + 16u;
            vec3 _790 = uintBitsToFloat(uvec3(texelFetch(g_forceParam, int(_780)).x, texelFetch(g_forceParam, int(_780 + 1u)).x, texelFetch(g_forceParam, int(_780 + 2u)).x));
            _791 = _790.x;
            _792 = _790.y;
            _793 = _790.z;
            uint _796 = (_709 * 24u) + 20u;
            vec4 _809 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_796)).x, texelFetch(g_forceParam, int(_796 + 1u)).x, texelFetch(g_forceParam, int(_796 + 2u)).x, texelFetch(g_forceParam, int(_796 + 3u)).x));
            _810 = _809.x;
            _811 = _809.y;
            _812 = _809.z;
            _813 = _809.w;
            _814 = _721.x == 1u;
            _815 = _721.y == 1u;
            _816 = _721.z == 1u;
            _817 = _364 - _739.x;
            _818 = _371 - _739.y;
            _819 = _378 - _739.z;
            _820 = _814 ? _758.x : _817;
            _821 = _814 ? _758.y : _818;
            _822 = _814 ? _758.z : _819;
            _823 = dot(vec3(_820, _821, _822), vec3(_820, _821, _822));
            _826 = _823 > 0.0;
            float frontier_phi_8_pred;
            float frontier_phi_8_pred_1;
            float frontier_phi_8_pred_2;
            if (_826)
            {
                precise float _949 = _817 * _817;
                precise float _950 = _818 * _818;
                precise float _951 = _949 + _950;
                precise float _952 = _819 * _819;
                precise float _953 = _952 + _951;
                float _954 = sqrt(_953);
                float _955 = inversesqrt(_823);
                precise float _956 = _820 * _955;
                precise float _957 = _821 * _955;
                precise float _958 = _822 * _955;
                precise float _961 = _954 / (isnan(0.001000000047497451305389404296875) ? _775.y : (isnan(_775.y) ? 0.001000000047497451305389404296875 : max(_775.y, 0.001000000047497451305389404296875)));
                precise float _962 = 1.0 - _961;
                float _1287 = isnan(0.0) ? _962 : (isnan(_962) ? 0.0 : max(_962, 0.0));
                float _963 = isnan(1.0) ? _1287 : (isnan(_1287) ? 1.0 : min(_1287, 1.0));
                float _1013;
                if (_816)
                {
                    float _1000 = inversesqrt(dot(vec3(_817, _818, _819), vec3(_817, _818, _819)));
                    precise float _1001 = _817 * _1000;
                    precise float _1002 = _818 * _1000;
                    precise float _1003 = _819 * _1000;
                    precise float _1007 = dot(vec3(_956, _957, _958), vec3(_1001, _1002, _1003)) * 0.800000011920928955078125;
                    precise float _1009 = _1007 + 0.20000000298023223876953125;
                    float _1298 = isnan(0.0) ? _1009 : (isnan(_1009) ? 0.0 : max(_1009, 0.0));
                    precise float _1012 = _963 * (isnan(1.0) ? _1298 : (isnan(_1298) ? 1.0 : min(_1298, 1.0)));
                    _1013 = _1012;
                }
                else
                {
                    _1013 = _963;
                }
                float frontier_phi_8_pred_12_ladder;
                float frontier_phi_8_pred_12_ladder_1;
                float frontier_phi_8_pred_12_ladder_2;
                if (_1013 > 0.0)
                {
                    bool _1032 = _814 && (!_816);
                    precise float _1034 = _954 * (-4.0);
                    precise float _1038 = 6.283184051513671875 / (isnan(0.001000000047497451305389404296875) ? _776 : (isnan(_776) ? 0.001000000047497451305389404296875 : max(_776, 0.001000000047497451305389404296875)));
                    precise float _1040 = dot(vec2(_956, _958), vec2(_817, _819));
                    precise float _1043 = _1038 * _1040;
                    precise float _1044 = float(_1032) * _1043;
                    precise float _1045 = _388 * _1038;
                    precise float _1046 = _1045 - _1044;
                    precise float _1047 = (_1032 ? 0.0 : _1034) + _1046;
                    precise float _1049 = _762 * sin(_1047);
                    precise float _1050 = _957 * 0.0;
                    precise float _1051 = _1050 - _958;
                    precise float _1052 = _958 * 0.0;
                    precise float _1053 = _956 * 0.0;
                    precise float _1054 = _1052 - _1053;
                    precise float _1055 = _956 - _1050;
                    precise float _1056 = _777 * _1049;
                    float _1057 = _814 ? _1056 : 0.0;
                    float _1126;
                    if (_815)
                    {
                        precise float _1086 = _791 * 2.0;
                        precise float _1088 = _811 + _812;
                        precise float _1089 = _813 + _1088;
                        precise float _1091 = 6.283184051513671875 / (isnan(0.001000000047497451305389404296875) ? _791 : (isnan(_791) ? 0.001000000047497451305389404296875 : max(_791, 0.001000000047497451305389404296875)));
                        precise float _1092 = _810 * _1091;
                        precise float _1093 = (-0.0) - _956;
                        precise float _1098 = dot(vec2(_958, _1093), vec2(_817, _819)) / _1086;
                        precise float _1099 = (-0.0) - _1098;
                        float _1102 = fract(abs(_1098));
                        precise float _1103 = (-0.0) - _1102;
                        precise float _1105 = _1086 * ((_1098 >= _1099) ? _1102 : _1103);
                        precise float _1106 = _1105 * 6.283184051513671875;
                        precise float _1107 = _1106 / _1086;
                        precise float _1109 = (isnan(5.0) ? _791 : (isnan(_791) ? 5.0 : min(_791, 5.0))) * sin(_1107);
                        precise float _1110 = _1040 + _1109;
                        precise float _1111 = _791 * 0.25;
                        precise float _1113 = _388 * _810;
                        precise float _1114 = _1113 - _1111;
                        precise float _1115 = _1114 - _1110;
                        precise float _1116 = _810 * _1089;
                        precise float _1118 = _1115 / (isnan(0.001000000047497451305389404296875) ? _1116 : (isnan(_1116) ? 0.001000000047497451305389404296875 : max(_1116, 0.001000000047497451305389404296875)));
                        float _1119 = fract(_1118);
                        precise float _1121 = 1.0 - _1119;
                        float _1122 = (_1118 < 0.0) ? _1121 : _1119;
                        precise float _1123 = _1088 / _1089;
                        precise float _1124 = _811 / _1089;
                        float _1202;
                        if (_1122 < _1124)
                        {
                            precise float _1198 = _1122 / _1124;
                            _1202 = _1198;
                        }
                        else
                        {
                            float frontier_phi_27_24_ladder;
                            if (_1122 < _1123)
                            {
                                precise float _1212 = _1122 - _1124;
                                precise float _1213 = _1123 - _1124;
                                precise float _1214 = _1212 / _1213;
                                precise float _1203 = 1.0 - _1214;
                                frontier_phi_27_24_ladder = _1203;
                            }
                            else
                            {
                                frontier_phi_27_24_ladder = 0.0;
                            }
                            _1202 = frontier_phi_27_24_ladder;
                        }
                        precise float _1204 = _793 * _1202;
                        precise float _1205 = _1091 * _1040;
                        precise float _1206 = _388 * _1092;
                        precise float _1207 = _1206 - _1205;
                        precise float _1209 = _792 + sin(_1207);
                        precise float _1211 = _1204 * abs(_1209);
                        precise float _1127 = _1211 + 0.0;
                        _1126 = _1127;
                    }
                    else
                    {
                        _1126 = 0.0;
                    }
                    precise float _1128 = _743 + _1049;
                    precise float _1129 = _1128 + _1126;
                    precise float _1130 = _956 * _1129;
                    precise float _1131 = _957 * _1129;
                    precise float _1132 = _958 * _1129;
                    precise float _1133 = _1051 * _1057;
                    precise float _1134 = _1054 * _1057;
                    precise float _1135 = _1055 * _1057;
                    precise float _1136 = _1133 + _1130;
                    precise float _1137 = _1134 + _1131;
                    precise float _1138 = _1135 + _1132;
                    precise float _1139 = _1013 * _1136;
                    precise float _1140 = _1013 * _1137;
                    precise float _1141 = _1013 * _1138;
                    precise float _965 = _1139 * 0.0500000007450580596923828125;
                    precise float _967 = _1140 * 0.0500000007450580596923828125;
                    precise float _969 = _1141 * 0.0500000007450580596923828125;
                    frontier_phi_8_pred_12_ladder = _965;
                    frontier_phi_8_pred_12_ladder_1 = _967;
                    frontier_phi_8_pred_12_ladder_2 = _969;
                }
                else
                {
                    frontier_phi_8_pred_12_ladder = 0.0;
                    frontier_phi_8_pred_12_ladder_1 = 0.0;
                    frontier_phi_8_pred_12_ladder_2 = 0.0;
                }
                frontier_phi_8_pred = frontier_phi_8_pred_12_ladder;
                frontier_phi_8_pred_1 = frontier_phi_8_pred_12_ladder_1;
                frontier_phi_8_pred_2 = frontier_phi_8_pred_12_ladder_2;
            }
            else
            {
                frontier_phi_8_pred = 0.0;
                frontier_phi_8_pred_1 = 0.0;
                frontier_phi_8_pred_2 = 0.0;
            }
            _964 = frontier_phi_8_pred;
            _966 = frontier_phi_8_pred_1;
            _968 = frontier_phi_8_pred_2;
            _391 = _702 + _964;
            _393 = _703 + _966;
            _395 = _704 + _968;
            uint _708 = _707 + 1u;
            if (_708 == _199)
            {
                break;
            }
            else
            {
                _702 = _391;
                _703 = _393;
                _704 = _395;
                _705 = (_707 != 3u) ? (_705 >> 8u) : _389;
                _707 = _708;
                continue;
            }
        }
        _390 = _391;
        _392 = _393;
        _394 = _395;
    }
    precise float _396 = _390 * _390;
    precise float _397 = _392 * _392;
    precise float _398 = _396 + _397;
    precise float _399 = _394 * _394;
    precise float _400 = _398 + _399;
    float _401 = sqrt(_400);
    bool _402 = _401 < 0.00011000000085914507508277893066406;
    float _407 = inversesqrt(dot(vec3(cbInstanceData._m0[_190].x, cbInstanceData._m0[_304].x, cbInstanceData._m0[_311].x), vec3(cbInstanceData._m0[_190].x, cbInstanceData._m0[_304].x, cbInstanceData._m0[_311].x)));
    precise float _408 = cbInstanceData._m0[_190].x * _407;
    precise float _409 = cbInstanceData._m0[_304].x * _407;
    precise float _410 = cbInstanceData._m0[_311].x * _407;
    float _414 = inversesqrt(dot(vec3(cbInstanceData._m0[_190].y, cbInstanceData._m0[_304].y, cbInstanceData._m0[_311].y), vec3(cbInstanceData._m0[_190].y, cbInstanceData._m0[_304].y, cbInstanceData._m0[_311].y)));
    precise float _415 = cbInstanceData._m0[_190].y * _414;
    precise float _416 = cbInstanceData._m0[_304].y * _414;
    precise float _417 = cbInstanceData._m0[_311].y * _414;
    float _421 = inversesqrt(dot(vec3(cbInstanceData._m0[_190].z, cbInstanceData._m0[_304].z, cbInstanceData._m0[_311].z), vec3(cbInstanceData._m0[_190].z, cbInstanceData._m0[_304].z, cbInstanceData._m0[_311].z)));
    precise float _422 = cbInstanceData._m0[_190].z * _421;
    precise float _423 = cbInstanceData._m0[_304].z * _421;
    precise float _424 = cbInstanceData._m0[_311].z * _421;
    precise float _425 = _408 * 0.0;
    precise float _426 = 1.0 * _415;
    precise float _427 = _426 + _425;
    precise float _428 = 0.0 * _422;
    precise float _429 = _428 + _427;
    precise float _430 = _409 * 0.0;
    precise float _431 = 1.0 * _416;
    precise float _432 = _431 + _430;
    precise float _433 = 0.0 * _423;
    precise float _434 = _433 + _432;
    precise float _435 = _410 * 0.0;
    precise float _436 = 1.0 * _417;
    precise float _437 = _436 + _435;
    precise float _438 = 0.0 * _424;
    precise float _439 = _438 + _437;
    float _443 = inversesqrt(dot(vec3(_390, _392, _394), vec3(_390, _392, _394)));
    precise float _444 = _390 * _443;
    precise float _445 = _392 * _443;
    precise float _446 = _394 * _443;
    precise float _447 = _434 * _446;
    precise float _448 = _439 * _445;
    precise float _449 = _447 - _448;
    precise float _450 = _439 * _444;
    precise float _451 = _429 * _446;
    precise float _452 = _450 - _451;
    precise float _453 = _429 * _445;
    precise float _454 = _434 * _444;
    precise float _455 = _453 - _454;
    float _459 = inversesqrt(dot(vec3(_449, _452, _455), vec3(_449, _452, _455)));
    precise float _460 = _459 * _449;
    precise float _461 = _459 * _452;
    precise float _462 = _459 * _455;
    precise float _463 = _401 + 1.0;
    precise float _465 = cbMtdParam._m0[10u].w * log2(_463);
    precise float _466 = _250 - _364;
    precise float _467 = _257 - _371;
    precise float _468 = _264 - _378;
    precise float _469 = dot(vec3(_460, _461, _462), vec3(_466, _467, _468));
    precise float _472 = _460 * _469;
    precise float _473 = _461 * _469;
    precise float _474 = _462 * _469;
    precise float _475 = _364 + _472;
    precise float _476 = _371 + _473;
    precise float _477 = _378 + _474;
    precise float _478 = _250 - _475;
    precise float _479 = _257 - _476;
    precise float _480 = _264 - _477;
    precise float _481 = _461 * _480;
    precise float _482 = _462 * _479;
    precise float _483 = _481 - _482;
    precise float _484 = _462 * _478;
    precise float _485 = _460 * _480;
    precise float _486 = _484 - _485;
    precise float _487 = _460 * _479;
    precise float _488 = _461 * _478;
    precise float _489 = _487 - _488;
    float _490 = sin(_465);
    float _491 = cos(_465);
    precise float _492 = _478 * _491;
    precise float _493 = _479 * _491;
    precise float _494 = _480 * _491;
    precise float _495 = _490 * _483;
    precise float _496 = _490 * _486;
    precise float _497 = _490 * _489;
    precise float _498 = _492 + _495;
    precise float _499 = _493 + _496;
    precise float _500 = _497 + _494;
    precise float _501 = _475 + _498;
    precise float _502 = _476 + _499;
    precise float _503 = _477 + _500;
    precise float _504 = _501 - _250;
    precise float _505 = _502 - _257;
    precise float _506 = _503 - _264;
    float _507 = _402 ? 0.0 : _504;
    float _508 = _402 ? 0.0 : _505;
    float _509 = _402 ? 0.0 : _506;
    precise float _510 = _250 + _507;
    precise float _511 = _257 + _508;
    precise float _512 = _264 + _509;
    precise float _513 = cbPerFrame._m0[22u].x + _353;
    float _515;
    float _517;
    float _519;
    if (_202)
    {
        _515 = 0.0;
        _517 = 0.0;
        _519 = 0.0;
    }
    else
    {
        uint _701 = _196.z;
        precise float _516;
        precise float _518;
        precise float _520;
        float _988;
        float _990;
        float _992;
        float _827 = 0.0;
        float _828 = 0.0;
        float _829 = 0.0;
        uint _830 = _701;
        uint _832 = 0u;
        float _866;
        float _885;
        vec4 _898;
        float _899;
        float _900;
        float _913;
        float _914;
        float _915;
        float _931;
        float _932;
        float _933;
        float _934;
        bool _935;
        bool _936;
        bool _937;
        precise float _938;
        precise float _939;
        precise float _940;
        float _941;
        float _942;
        float _943;
        precise float _944;
        bool _947;
        for (;;)
        {
            uint _834 = _830 & 255u;
            uint _835 = _834 * 24u;
            uvec3 _844 = uvec3(texelFetch(g_forceParam, int(_835)).x, texelFetch(g_forceParam, int(_835 + 1u)).x, texelFetch(g_forceParam, int(_835 + 2u)).x);
            uint _849 = (_834 * 24u) + 4u;
            vec4 _862 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_849)).x, texelFetch(g_forceParam, int(_849 + 1u)).x, texelFetch(g_forceParam, int(_849 + 2u)).x, texelFetch(g_forceParam, int(_849 + 3u)).x));
            _866 = _862.w;
            uint _868 = (_834 * 24u) + 8u;
            vec4 _881 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_868)).x, texelFetch(g_forceParam, int(_868 + 1u)).x, texelFetch(g_forceParam, int(_868 + 2u)).x, texelFetch(g_forceParam, int(_868 + 3u)).x));
            _885 = _881.w;
            uint _887 = (_834 * 24u) + 12u;
            _898 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_887)).x, texelFetch(g_forceParam, int(_887 + 1u)).x, _893, texelFetch(g_forceParam, int(_887 + 3u)).x));
            _899 = _898.x;
            _900 = _898.w;
            uint _902 = (_834 * 24u) + 16u;
            vec3 _912 = uintBitsToFloat(uvec3(texelFetch(g_forceParam, int(_902)).x, texelFetch(g_forceParam, int(_902 + 1u)).x, texelFetch(g_forceParam, int(_902 + 2u)).x));
            _913 = _912.x;
            _914 = _912.y;
            _915 = _912.z;
            uint _917 = (_834 * 24u) + 20u;
            vec4 _930 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_917)).x, texelFetch(g_forceParam, int(_917 + 1u)).x, texelFetch(g_forceParam, int(_917 + 2u)).x, texelFetch(g_forceParam, int(_917 + 3u)).x));
            _931 = _930.x;
            _932 = _930.y;
            _933 = _930.z;
            _934 = _930.w;
            _935 = _844.x == 1u;
            _936 = _844.y == 1u;
            _937 = _844.z == 1u;
            _938 = _324 - _862.x;
            _939 = _331 - _862.y;
            _940 = _338 - _862.z;
            _941 = _935 ? _881.x : _938;
            _942 = _935 ? _881.y : _939;
            _943 = _935 ? _881.z : _940;
            _944 = dot(vec3(_941, _942, _943), vec3(_941, _942, _943));
            _947 = _944 > 0.0;
            float frontier_phi_10_pred;
            float frontier_phi_10_pred_1;
            float frontier_phi_10_pred_2;
            if (_947)
            {
                precise float _974 = _938 * _938;
                precise float _975 = _939 * _939;
                precise float _976 = _974 + _975;
                precise float _977 = _940 * _940;
                precise float _978 = _977 + _976;
                float _979 = sqrt(_978);
                float _980 = inversesqrt(_944);
                precise float _981 = _941 * _980;
                precise float _982 = _942 * _980;
                precise float _983 = _943 * _980;
                precise float _985 = _979 / (isnan(0.001000000047497451305389404296875) ? _898.y : (isnan(_898.y) ? 0.001000000047497451305389404296875 : max(_898.y, 0.001000000047497451305389404296875)));
                precise float _986 = 1.0 - _985;
                float _1334 = isnan(0.0) ? _986 : (isnan(_986) ? 0.0 : max(_986, 0.0));
                float _987 = isnan(1.0) ? _1334 : (isnan(_1334) ? 1.0 : min(_1334, 1.0));
                float _1029;
                if (_937)
                {
                    float _1018 = inversesqrt(dot(vec3(_938, _939, _940), vec3(_938, _939, _940)));
                    precise float _1019 = _938 * _1018;
                    precise float _1020 = _939 * _1018;
                    precise float _1021 = _940 * _1018;
                    precise float _1025 = dot(vec3(_981, _982, _983), vec3(_1019, _1020, _1021)) * 0.800000011920928955078125;
                    precise float _1026 = _1025 + 0.20000000298023223876953125;
                    float _1345 = isnan(0.0) ? _1026 : (isnan(_1026) ? 0.0 : max(_1026, 0.0));
                    precise float _1028 = _987 * (isnan(1.0) ? _1345 : (isnan(_1345) ? 1.0 : min(_1345, 1.0)));
                    _1029 = _1028;
                }
                else
                {
                    _1029 = _987;
                }
                float frontier_phi_10_pred_15_ladder;
                float frontier_phi_10_pred_15_ladder_1;
                float frontier_phi_10_pred_15_ladder_2;
                if (_1029 > 0.0)
                {
                    bool _1059 = _935 && (!_937);
                    precise float _1061 = _979 * (-4.0);
                    precise float _1064 = 6.283184051513671875 / (isnan(0.001000000047497451305389404296875) ? _899 : (isnan(_899) ? 0.001000000047497451305389404296875 : max(_899, 0.001000000047497451305389404296875)));
                    precise float _1065 = cbMtdParam._m0[11u].y * _1064;
                    precise float _1066 = dot(vec2(_981, _983), vec2(_938, _940));
                    precise float _1069 = _1066 * _1065;
                    precise float _1070 = float(_1059) * _1069;
                    precise float _1071 = _513 * _1065;
                    precise float _1072 = _1071 - _1070;
                    precise float _1073 = (_1059 ? 0.0 : _1061) + _1072;
                    precise float _1075 = _885 * sin(_1073);
                    precise float _1076 = _982 * 0.0;
                    precise float _1077 = _1076 - _983;
                    precise float _1078 = _983 * 0.0;
                    precise float _1079 = _981 * 0.0;
                    precise float _1080 = _1078 - _1079;
                    precise float _1081 = _981 - _1076;
                    precise float _1082 = _900 * _1075;
                    float _1083 = _935 ? _1082 : 0.0;
                    float _1182;
                    if (_936)
                    {
                        precise float _1144 = _913 * 2.0;
                        precise float _1145 = _932 + _933;
                        precise float _1146 = _934 + _1145;
                        precise float _1148 = 6.283184051513671875 / (isnan(0.001000000047497451305389404296875) ? _913 : (isnan(_913) ? 0.001000000047497451305389404296875 : max(_913, 0.001000000047497451305389404296875)));
                        precise float _1149 = cbMtdParam._m0[11u].y * _1148;
                        precise float _1150 = _931 * _1149;
                        precise float _1151 = (-0.0) - _981;
                        precise float _1155 = dot(vec2(_983, _1151), vec2(_938, _940)) / _1144;
                        precise float _1156 = (-0.0) - _1155;
                        float _1159 = fract(abs(_1155));
                        precise float _1160 = (-0.0) - _1159;
                        precise float _1162 = _1144 * ((_1155 >= _1156) ? _1159 : _1160);
                        precise float _1163 = _1162 * 6.283184051513671875;
                        precise float _1164 = _1163 / _1144;
                        precise float _1166 = (isnan(5.0) ? _913 : (isnan(_913) ? 5.0 : min(_913, 5.0))) * sin(_1164);
                        precise float _1167 = _1066 + _1166;
                        precise float _1168 = _913 * 0.25;
                        precise float _1169 = _513 * _931;
                        precise float _1170 = _1169 - _1168;
                        precise float _1171 = _1170 - _1167;
                        precise float _1172 = _931 * _1146;
                        precise float _1174 = _1171 / (isnan(0.001000000047497451305389404296875) ? _1172 : (isnan(_1172) ? 0.001000000047497451305389404296875 : max(_1172, 0.001000000047497451305389404296875)));
                        float _1175 = fract(_1174);
                        precise float _1177 = 1.0 - _1175;
                        float _1178 = (_1174 < 0.0) ? _1177 : _1175;
                        precise float _1179 = _1145 / _1146;
                        precise float _1180 = _932 / _1146;
                        float _1215;
                        if (_1178 < _1180)
                        {
                            precise float _1200 = _1178 / _1180;
                            _1215 = _1200;
                        }
                        else
                        {
                            float frontier_phi_29_26_ladder;
                            if (_1178 < _1179)
                            {
                                precise float _1225 = _1178 - _1180;
                                precise float _1226 = _1179 - _1180;
                                precise float _1227 = _1225 / _1226;
                                precise float _1216 = 1.0 - _1227;
                                frontier_phi_29_26_ladder = _1216;
                            }
                            else
                            {
                                frontier_phi_29_26_ladder = 0.0;
                            }
                            _1215 = frontier_phi_29_26_ladder;
                        }
                        precise float _1217 = _915 * _1215;
                        precise float _1218 = _1149 * _1066;
                        precise float _1219 = _513 * _1150;
                        precise float _1220 = _1219 - _1218;
                        precise float _1222 = _914 + sin(_1220);
                        precise float _1224 = _1217 * abs(_1222);
                        precise float _1183 = _1224 + 0.0;
                        _1182 = _1183;
                    }
                    else
                    {
                        _1182 = 0.0;
                    }
                    precise float _1184 = _866 + _1075;
                    precise float _1185 = _1184 + _1182;
                    precise float _1186 = _981 * _1185;
                    precise float _1187 = _982 * _1185;
                    precise float _1188 = _983 * _1185;
                    precise float _1189 = _1077 * _1083;
                    precise float _1190 = _1080 * _1083;
                    precise float _1191 = _1081 * _1083;
                    precise float _1192 = _1189 + _1186;
                    precise float _1193 = _1190 + _1187;
                    precise float _1194 = _1191 + _1188;
                    precise float _1195 = _1029 * _1192;
                    precise float _1196 = _1029 * _1193;
                    precise float _1197 = _1029 * _1194;
                    precise float _989 = _1195 * 0.0500000007450580596923828125;
                    precise float _991 = _1196 * 0.0500000007450580596923828125;
                    precise float _993 = _1197 * 0.0500000007450580596923828125;
                    frontier_phi_10_pred_15_ladder = _989;
                    frontier_phi_10_pred_15_ladder_1 = _991;
                    frontier_phi_10_pred_15_ladder_2 = _993;
                }
                else
                {
                    frontier_phi_10_pred_15_ladder = 0.0;
                    frontier_phi_10_pred_15_ladder_1 = 0.0;
                    frontier_phi_10_pred_15_ladder_2 = 0.0;
                }
                frontier_phi_10_pred = frontier_phi_10_pred_15_ladder;
                frontier_phi_10_pred_1 = frontier_phi_10_pred_15_ladder_1;
                frontier_phi_10_pred_2 = frontier_phi_10_pred_15_ladder_2;
            }
            else
            {
                frontier_phi_10_pred = 0.0;
                frontier_phi_10_pred_1 = 0.0;
                frontier_phi_10_pred_2 = 0.0;
            }
            _988 = frontier_phi_10_pred;
            _990 = frontier_phi_10_pred_1;
            _992 = frontier_phi_10_pred_2;
            _516 = _827 + _988;
            _518 = _828 + _990;
            _520 = _829 + _992;
            uint _833 = _832 + 1u;
            if (_833 == _199)
            {
                break;
            }
            else
            {
                _827 = _516;
                _828 = _518;
                _829 = _520;
                _830 = (_832 != 3u) ? (_830 >> 8u) : _389;
                _832 = _833;
                continue;
            }
        }
        _515 = _516;
        _517 = _518;
        _519 = _520;
    }
    precise float _521 = _515 * _515;
    precise float _522 = _517 * _517;
    precise float _523 = _521 + _522;
    precise float _524 = _519 * _519;
    precise float _525 = _523 + _524;
    float _526 = sqrt(_525);
    bool _527 = _526 < 0.00011000000085914507508277893066406;
    float _531 = inversesqrt(dot(vec3(_515, _517, _519), vec3(_515, _517, _519)));
    precise float _532 = _515 * _531;
    precise float _533 = _517 * _531;
    precise float _534 = _519 * _531;
    precise float _535 = _434 * _534;
    precise float _536 = _439 * _533;
    precise float _537 = _535 - _536;
    precise float _538 = _439 * _532;
    precise float _539 = _429 * _534;
    precise float _540 = _538 - _539;
    precise float _541 = _429 * _533;
    precise float _542 = _434 * _532;
    precise float _543 = _541 - _542;
    float _547 = inversesqrt(dot(vec3(_537, _540, _543), vec3(_537, _540, _543)));
    precise float _548 = _547 * _537;
    precise float _549 = _547 * _540;
    precise float _550 = _547 * _543;
    precise float _551 = _526 + 1.0;
    precise float _553 = cbMtdParam._m0[10u].y * log2(_551);
    precise float _554 = _510 - _324;
    precise float _555 = _511 - _331;
    precise float _556 = _512 - _338;
    precise float _557 = dot(vec3(_548, _549, _550), vec3(_554, _555, _556));
    precise float _560 = _548 * _557;
    precise float _561 = _549 * _557;
    precise float _562 = _550 * _557;
    precise float _563 = _324 + _560;
    precise float _564 = _331 + _561;
    precise float _565 = _338 + _562;
    precise float _566 = _510 - _563;
    precise float _567 = _511 - _564;
    precise float _568 = _512 - _565;
    precise float _569 = _549 * _568;
    precise float _570 = _550 * _567;
    precise float _571 = _569 - _570;
    precise float _572 = _550 * _566;
    precise float _573 = _548 * _568;
    precise float _574 = _572 - _573;
    precise float _575 = _548 * _567;
    precise float _576 = _549 * _566;
    precise float _577 = _575 - _576;
    float _578 = sin(_553);
    float _579 = cos(_553);
    precise float _580 = _566 * _579;
    precise float _581 = _567 * _579;
    precise float _582 = _568 * _579;
    precise float _583 = _578 * _571;
    precise float _584 = _578 * _574;
    precise float _585 = _578 * _577;
    precise float _586 = _580 + _583;
    precise float _587 = _581 + _584;
    precise float _588 = _585 + _582;
    precise float _589 = _563 + _586;
    precise float _590 = _564 + _587;
    precise float _591 = _565 + _588;
    precise float _592 = _589 - _510;
    precise float _593 = _590 - _511;
    precise float _594 = _591 - _512;
    precise float _598 = _507 + (_527 ? 0.0 : _592);
    precise float _599 = _508 + (_527 ? 0.0 : _593);
    precise float _600 = _509 + (_527 ? 0.0 : _594);
    precise float _601 = _250 + _598;
    precise float _602 = _257 + _599;
    precise float _603 = _264 + _600;
    precise float _604 = _601 - cbSceneParam._m0[3u].x;
    precise float _605 = _602 - cbSceneParam._m0[3u].y;
    precise float _606 = _603 - cbSceneParam._m0[3u].z;
    precise float _634 = cbSceneParam._m0[24u].x * _604;
    precise float _635 = _605 * cbSceneParam._m0[24u].y;
    precise float _636 = _635 + _634;
    precise float _637 = _606 * cbSceneParam._m0[24u].z;
    precise float _638 = _637 + _636;
    precise float _639 = 1.0 * cbSceneParam._m0[24u].w;
    precise float _640 = _639 + _638;
    precise float _641 = cbSceneParam._m0[25u].x * _604;
    precise float _642 = _605 * cbSceneParam._m0[25u].y;
    precise float _643 = _642 + _641;
    precise float _644 = _606 * cbSceneParam._m0[25u].z;
    precise float _645 = _644 + _643;
    precise float _646 = 1.0 * cbSceneParam._m0[25u].w;
    precise float _647 = _646 + _645;
    precise float _648 = cbSceneParam._m0[26u].x * _604;
    precise float _649 = _605 * cbSceneParam._m0[26u].y;
    precise float _650 = _649 + _648;
    precise float _651 = _606 * cbSceneParam._m0[26u].z;
    precise float _652 = _651 + _650;
    precise float _653 = 1.0 * cbSceneParam._m0[26u].w;
    precise float _654 = _653 + _652;
    precise float _655 = cbSceneParam._m0[27u].x * _604;
    precise float _656 = _605 * cbSceneParam._m0[27u].y;
    precise float _657 = _656 + _655;
    precise float _658 = _606 * cbSceneParam._m0[27u].z;
    precise float _659 = _658 + _657;
    precise float _660 = 1.0 * cbSceneParam._m0[27u].w;
    precise float _661 = _660 + _659;
    gl_Position.x = _640;
    gl_Position.y = _647;
    gl_Position.z = _654;
    gl_Position.w = _661;
    NORMAL_1.x = fma(_176, cbObjMatrix._m0[_222].z, fma(_175, cbObjMatrix._m0[_222].y, cbObjMatrix._m0[_222].x * _173));
    NORMAL_1.y = fma(_176, cbObjMatrix._m0[_229].z, fma(_175, cbObjMatrix._m0[_229].y, cbObjMatrix._m0[_229].x * _173));
    NORMAL_1.z = fma(_176, cbObjMatrix._m0[_236].z, fma(_175, cbObjMatrix._m0[_236].y, cbObjMatrix._m0[_236].x * _173));
    NORMAL_1.w = float(_213);
    TANGENT_1.x = fma(_188, cbObjMatrix._m0[_222].z, fma(_187, cbObjMatrix._m0[_222].y, cbObjMatrix._m0[_222].x * _186));
    TANGENT_1.y = fma(_188, cbObjMatrix._m0[_229].z, fma(_187, cbObjMatrix._m0[_229].y, cbObjMatrix._m0[_229].x * _186));
    TANGENT_1.z = fma(_188, cbObjMatrix._m0[_236].z, fma(_187, cbObjMatrix._m0[_236].y, cbObjMatrix._m0[_236].x * _186));
    TANGENT_1.w = (float(TANGENT.w) + (-127.0)) * 0.0078740157186985015869140625;
    TEXCOORD_2 = ((float(int(uint(TEXCOORD.x))) * 0.00048828125) * cbTexScroll._m0[0u].x) + cbTexScroll._m0[0u].z;
    TEXCOORD_1_1 = ((float(int(uint(TEXCOORD.y))) * 0.00048828125) * cbTexScroll._m0[0u].y) + cbTexScroll._m0[0u].w;
    TEXCOORD_3.x = TEXCOORD_1.x;
    TEXCOORD_3.y = TEXCOORD_1.y;
    TEXCOORD_3.z = TEXCOORD_1.z;
    TEXCOORD_3.w = COLOR_1.x;
    TEXCOORD_7.x = _654;
    TEXCOORD_7.y = _661;
    TEXCOORD_11 = sqrt(((_270 * _270) + (_271 * _271)) + (_272 * _272));
    gl_ClipDistance[0u] = dot(vec4(_640, _647, _654, _661), vec4(cbSceneParam._m0[4u]));
    gl_ClipDistance[1u] = dot(vec4(_640, _647, _654, _661), vec4(cbInstanceData._m0[_215 + 3u]));
}


