#version 460

out float gl_ClipDistance[2];

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[12];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 5, std140) uniform cbObjMatrixUBO
{
    vec4 _m0[6];
} cbObjMatrix;

layout(set = 0, binding = 10, std140) uniform cbInstanceIdxParamUBO
{
    vec4 _m0[1];
} cbInstanceIdxParam;

layout(set = 0, binding = 26) uniform usamplerBuffer g_forceParam;
layout(set = 0, binding = 25) uniform usamplerBuffer g_InstanceIndexBuffer;

layout(location = 0) in vec3 POSITION;
layout(location = 1) in uvec4 NORMAL;
layout(location = 2) in uvec4 TANGENT;
layout(location = 3) in vec4 COLOR_1;
layout(location = 4) in ivec2 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_1;

uint _646;
uint _769;

void main()
{
    uint _69 = uint(gl_InstanceIndex) - uint(gl_BaseInstance);
    gl_Position.x = 0.0;
    gl_Position.y = 0.0;
    gl_Position.z = 0.0;
    gl_Position.w = 0.0;
    gl_ClipDistance[0u] = 0.0;
    gl_ClipDistance[1u] = 0.0;
    uint _101 = _69 * 13u;
    uvec4 _107 = floatBitsToUint(cbInstanceData._m0[_101 + 7u]);
    uint _110 = min(_107.y, 8u);
    bool _113 = _110 == 0u;
    precise float _114 = POSITION.x + 0.0;
    precise float _115 = POSITION.y + 0.0;
    precise float _116 = POSITION.z + 0.0;
    uint _121 = floatBitsToUint(cbInstanceIdxParam._m0[0u]).x + _69;
    uint _126 = texelFetch(g_InstanceIndexBuffer, int(_121)).x * 13u;
    uint _134 = (floatBitsToUint(cbInstanceData._m0[_126 + 4u]).x + uint(float(NORMAL.w))) * 3u;
    uint _141 = _134 + 1u;
    uint _148 = _134 + 2u;
    precise float _155 = _114 * cbObjMatrix._m0[_134].x;
    precise float _156 = _115 * cbObjMatrix._m0[_134].y;
    precise float _157 = _156 + _155;
    precise float _158 = _116 * cbObjMatrix._m0[_134].z;
    precise float _159 = _158 + _157;
    precise float _160 = 1.0 * cbObjMatrix._m0[_134].w;
    precise float _162 = _160 + _159;
    precise float _163 = _114 * cbObjMatrix._m0[_141].x;
    precise float _164 = _115 * cbObjMatrix._m0[_141].y;
    precise float _165 = _164 + _163;
    precise float _166 = _116 * cbObjMatrix._m0[_141].z;
    precise float _167 = _166 + _165;
    precise float _168 = 1.0 * cbObjMatrix._m0[_141].w;
    precise float _169 = _168 + _167;
    precise float _170 = _114 * cbObjMatrix._m0[_148].x;
    precise float _171 = _115 * cbObjMatrix._m0[_148].y;
    precise float _172 = _171 + _170;
    precise float _173 = _116 * cbObjMatrix._m0[_148].z;
    precise float _174 = _173 + _172;
    precise float _175 = 1.0 * cbObjMatrix._m0[_148].w;
    precise float _176 = _175 + _174;
    uint _183 = _101 + 1u;
    uint _190 = _101 + 2u;
    precise float _197 = TEXCOORD_1.x * cbInstanceData._m0[_101].x;
    precise float _198 = TEXCOORD_1.y * cbInstanceData._m0[_101].y;
    precise float _199 = _198 + _197;
    precise float _200 = TEXCOORD_1.z * cbInstanceData._m0[_101].z;
    precise float _201 = _200 + _199;
    precise float _202 = 1.0 * cbInstanceData._m0[_101].w;
    precise float _203 = _202 + _201;
    precise float _204 = TEXCOORD_1.x * cbInstanceData._m0[_183].x;
    precise float _205 = TEXCOORD_1.y * cbInstanceData._m0[_183].y;
    precise float _206 = _205 + _204;
    precise float _207 = TEXCOORD_1.z * cbInstanceData._m0[_183].z;
    precise float _208 = _207 + _206;
    precise float _209 = 1.0 * cbInstanceData._m0[_183].w;
    precise float _210 = _209 + _208;
    precise float _211 = TEXCOORD_1.x * cbInstanceData._m0[_190].x;
    precise float _212 = TEXCOORD_1.y * cbInstanceData._m0[_190].y;
    precise float _213 = _212 + _211;
    precise float _214 = TEXCOORD_1.z * cbInstanceData._m0[_190].z;
    precise float _215 = _214 + _213;
    precise float _216 = 1.0 * cbInstanceData._m0[_190].w;
    precise float _217 = _216 + _215;
    precise float _223 = _162 - _203;
    precise float _224 = _169 - _210;
    precise float _225 = _176 - _217;
    precise float _226 = _223 * _223;
    precise float _227 = _224 * _224;
    precise float _228 = _226 + _227;
    precise float _229 = _225 * _225;
    precise float _230 = _228 + _229;
    precise float _232 = cbMtdParam._m0[10u].z * sqrt(_230);
    precise float _237 = cbInstanceData._m0[_101].x * 0.0;
    precise float _238 = 0.0 * cbInstanceData._m0[_101].y;
    precise float _239 = _238 + _237;
    precise float _240 = 0.0 * cbInstanceData._m0[_101].z;
    precise float _241 = _240 + _239;
    precise float _242 = 1.0 * cbInstanceData._m0[_101].w;
    precise float _243 = _242 + _241;
    precise float _244 = cbInstanceData._m0[_183].x * 0.0;
    precise float _245 = 0.0 * cbInstanceData._m0[_183].y;
    precise float _246 = _245 + _244;
    precise float _247 = 0.0 * cbInstanceData._m0[_183].z;
    precise float _248 = _247 + _246;
    precise float _249 = 1.0 * cbInstanceData._m0[_183].w;
    precise float _250 = _249 + _248;
    precise float _251 = cbInstanceData._m0[_190].x * 0.0;
    precise float _252 = 0.0 * cbInstanceData._m0[_190].y;
    precise float _253 = _252 + _251;
    precise float _254 = 0.0 * cbInstanceData._m0[_190].z;
    precise float _255 = _254 + _253;
    precise float _256 = 1.0 * cbInstanceData._m0[_190].w;
    precise float _257 = _256 + _255;
    precise float _260 = _162 * _162;
    precise float _261 = _169 * _169;
    precise float _262 = _260 + _261;
    precise float _263 = _176 * _176;
    precise float _264 = _262 + _263;
    precise float _266 = cbMtdParam._m0[11u].x * sqrt(_264);
    precise float _267 = cbPerFrame._m0[22u].x + _266;
    uint _268 = _107.w;
    float _269;
    float _271;
    float _273;
    if (_113)
    {
        _269 = 0.0;
        _271 = 0.0;
        _273 = 0.0;
    }
    else
    {
        uint _393 = _107.z;
        precise float _270;
        precise float _272;
        precise float _274;
        float _840;
        float _842;
        float _844;
        float _578 = 0.0;
        float _579 = 0.0;
        float _580 = 0.0;
        uint _581 = _393;
        uint _583 = 0u;
        float _619;
        float _638;
        vec4 _651;
        float _652;
        float _653;
        float _667;
        float _668;
        float _669;
        float _686;
        float _687;
        float _688;
        float _689;
        bool _690;
        bool _691;
        bool _692;
        precise float _693;
        precise float _694;
        precise float _695;
        float _696;
        float _697;
        float _698;
        precise float _699;
        bool _702;
        for (;;)
        {
            uint _585 = _581 & 255u;
            uint _587 = _585 * 24u;
            uvec3 _597 = uvec3(texelFetch(g_forceParam, int(_587)).x, texelFetch(g_forceParam, int(_587 + 1u)).x, texelFetch(g_forceParam, int(_587 + 2u)).x);
            uint _602 = (_585 * 24u) + 4u;
            vec4 _615 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_602)).x, texelFetch(g_forceParam, int(_602 + 1u)).x, texelFetch(g_forceParam, int(_602 + 2u)).x, texelFetch(g_forceParam, int(_602 + 3u)).x));
            _619 = _615.w;
            uint _621 = (_585 * 24u) + 8u;
            vec4 _634 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_621)).x, texelFetch(g_forceParam, int(_621 + 1u)).x, texelFetch(g_forceParam, int(_621 + 2u)).x, texelFetch(g_forceParam, int(_621 + 3u)).x));
            _638 = _634.w;
            uint _640 = (_585 * 24u) + 12u;
            _651 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_640)).x, texelFetch(g_forceParam, int(_640 + 1u)).x, _646, texelFetch(g_forceParam, int(_640 + 3u)).x));
            _652 = _651.x;
            _653 = _651.w;
            uint _656 = (_585 * 24u) + 16u;
            vec3 _666 = uintBitsToFloat(uvec3(texelFetch(g_forceParam, int(_656)).x, texelFetch(g_forceParam, int(_656 + 1u)).x, texelFetch(g_forceParam, int(_656 + 2u)).x));
            _667 = _666.x;
            _668 = _666.y;
            _669 = _666.z;
            uint _672 = (_585 * 24u) + 20u;
            vec4 _685 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_672)).x, texelFetch(g_forceParam, int(_672 + 1u)).x, texelFetch(g_forceParam, int(_672 + 2u)).x, texelFetch(g_forceParam, int(_672 + 3u)).x));
            _686 = _685.x;
            _687 = _685.y;
            _688 = _685.z;
            _689 = _685.w;
            _690 = _597.x == 1u;
            _691 = _597.y == 1u;
            _692 = _597.z == 1u;
            _693 = _243 - _615.x;
            _694 = _250 - _615.y;
            _695 = _257 - _615.z;
            _696 = _690 ? _634.x : _693;
            _697 = _690 ? _634.y : _694;
            _698 = _690 ? _634.z : _695;
            _699 = dot(vec3(_696, _697, _698), vec3(_696, _697, _698));
            _702 = _699 > 0.0;
            float frontier_phi_8_pred;
            float frontier_phi_8_pred_1;
            float frontier_phi_8_pred_2;
            if (_702)
            {
                precise float _825 = _693 * _693;
                precise float _826 = _694 * _694;
                precise float _827 = _825 + _826;
                precise float _828 = _695 * _695;
                precise float _829 = _828 + _827;
                float _830 = sqrt(_829);
                float _831 = inversesqrt(_699);
                precise float _832 = _696 * _831;
                precise float _833 = _697 * _831;
                precise float _834 = _698 * _831;
                precise float _837 = _830 / (isnan(0.001000000047497451305389404296875) ? _651.y : (isnan(_651.y) ? 0.001000000047497451305389404296875 : max(_651.y, 0.001000000047497451305389404296875)));
                precise float _838 = 1.0 - _837;
                float _1164 = isnan(0.0) ? _838 : (isnan(_838) ? 0.0 : max(_838, 0.0));
                float _839 = isnan(1.0) ? _1164 : (isnan(_1164) ? 1.0 : min(_1164, 1.0));
                float _889;
                if (_692)
                {
                    float _876 = inversesqrt(dot(vec3(_693, _694, _695), vec3(_693, _694, _695)));
                    precise float _877 = _693 * _876;
                    precise float _878 = _694 * _876;
                    precise float _879 = _695 * _876;
                    precise float _883 = dot(vec3(_832, _833, _834), vec3(_877, _878, _879)) * 0.800000011920928955078125;
                    precise float _885 = _883 + 0.20000000298023223876953125;
                    float _1175 = isnan(0.0) ? _885 : (isnan(_885) ? 0.0 : max(_885, 0.0));
                    precise float _888 = _839 * (isnan(1.0) ? _1175 : (isnan(_1175) ? 1.0 : min(_1175, 1.0)));
                    _889 = _888;
                }
                else
                {
                    _889 = _839;
                }
                float frontier_phi_8_pred_12_ladder;
                float frontier_phi_8_pred_12_ladder_1;
                float frontier_phi_8_pred_12_ladder_2;
                if (_889 > 0.0)
                {
                    bool _908 = _690 && (!_692);
                    precise float _910 = _830 * (-4.0);
                    precise float _914 = 6.283184051513671875 / (isnan(0.001000000047497451305389404296875) ? _652 : (isnan(_652) ? 0.001000000047497451305389404296875 : max(_652, 0.001000000047497451305389404296875)));
                    precise float _916 = dot(vec2(_832, _834), vec2(_693, _695));
                    precise float _920 = _914 * _916;
                    precise float _921 = float(_908) * _920;
                    precise float _922 = _267 * _914;
                    precise float _923 = _922 - _921;
                    precise float _924 = (_908 ? 0.0 : _910) + _923;
                    precise float _926 = _638 * sin(_924);
                    precise float _927 = _833 * 0.0;
                    precise float _928 = _927 - _834;
                    precise float _929 = _834 * 0.0;
                    precise float _930 = _832 * 0.0;
                    precise float _931 = _929 - _930;
                    precise float _932 = _832 - _927;
                    precise float _933 = _653 * _926;
                    float _934 = _690 ? _933 : 0.0;
                    float _1003;
                    if (_691)
                    {
                        precise float _963 = _667 * 2.0;
                        precise float _965 = _687 + _688;
                        precise float _966 = _689 + _965;
                        precise float _968 = 6.283184051513671875 / (isnan(0.001000000047497451305389404296875) ? _667 : (isnan(_667) ? 0.001000000047497451305389404296875 : max(_667, 0.001000000047497451305389404296875)));
                        precise float _969 = _686 * _968;
                        precise float _970 = (-0.0) - _832;
                        precise float _975 = dot(vec2(_834, _970), vec2(_693, _695)) / _963;
                        precise float _976 = (-0.0) - _975;
                        float _979 = fract(abs(_975));
                        precise float _980 = (-0.0) - _979;
                        precise float _982 = _963 * ((_975 >= _976) ? _979 : _980);
                        precise float _983 = _982 * 6.283184051513671875;
                        precise float _984 = _983 / _963;
                        precise float _986 = (isnan(5.0) ? _667 : (isnan(_667) ? 5.0 : min(_667, 5.0))) * sin(_984);
                        precise float _987 = _916 + _986;
                        precise float _988 = _667 * 0.25;
                        precise float _990 = _267 * _686;
                        precise float _991 = _990 - _988;
                        precise float _992 = _991 - _987;
                        precise float _993 = _686 * _966;
                        precise float _995 = _992 / (isnan(0.001000000047497451305389404296875) ? _993 : (isnan(_993) ? 0.001000000047497451305389404296875 : max(_993, 0.001000000047497451305389404296875)));
                        float _996 = fract(_995);
                        precise float _998 = 1.0 - _996;
                        float _999 = (_995 < 0.0) ? _998 : _996;
                        precise float _1000 = _965 / _966;
                        precise float _1001 = _687 / _966;
                        float _1079;
                        if (_999 < _1001)
                        {
                            precise float _1075 = _999 / _1001;
                            _1079 = _1075;
                        }
                        else
                        {
                            float frontier_phi_27_24_ladder;
                            if (_999 < _1000)
                            {
                                precise float _1089 = _999 - _1001;
                                precise float _1090 = _1000 - _1001;
                                precise float _1091 = _1089 / _1090;
                                precise float _1080 = 1.0 - _1091;
                                frontier_phi_27_24_ladder = _1080;
                            }
                            else
                            {
                                frontier_phi_27_24_ladder = 0.0;
                            }
                            _1079 = frontier_phi_27_24_ladder;
                        }
                        precise float _1081 = _669 * _1079;
                        precise float _1082 = _968 * _916;
                        precise float _1083 = _267 * _969;
                        precise float _1084 = _1083 - _1082;
                        precise float _1086 = _668 + sin(_1084);
                        precise float _1088 = _1081 * abs(_1086);
                        precise float _1004 = _1088 + 0.0;
                        _1003 = _1004;
                    }
                    else
                    {
                        _1003 = 0.0;
                    }
                    precise float _1005 = _619 + _926;
                    precise float _1006 = _1005 + _1003;
                    precise float _1007 = _832 * _1006;
                    precise float _1008 = _833 * _1006;
                    precise float _1009 = _834 * _1006;
                    precise float _1010 = _928 * _934;
                    precise float _1011 = _931 * _934;
                    precise float _1012 = _932 * _934;
                    precise float _1013 = _1010 + _1007;
                    precise float _1014 = _1011 + _1008;
                    precise float _1015 = _1012 + _1009;
                    precise float _1016 = _889 * _1013;
                    precise float _1017 = _889 * _1014;
                    precise float _1018 = _889 * _1015;
                    precise float _841 = _1016 * 0.0500000007450580596923828125;
                    precise float _843 = _1017 * 0.0500000007450580596923828125;
                    precise float _845 = _1018 * 0.0500000007450580596923828125;
                    frontier_phi_8_pred_12_ladder = _841;
                    frontier_phi_8_pred_12_ladder_1 = _843;
                    frontier_phi_8_pred_12_ladder_2 = _845;
                }
                else
                {
                    frontier_phi_8_pred_12_ladder = 0.0;
                    frontier_phi_8_pred_12_ladder_1 = 0.0;
                    frontier_phi_8_pred_12_ladder_2 = 0.0;
                }
                frontier_phi_8_pred = frontier_phi_8_pred_12_ladder;
                frontier_phi_8_pred_1 = frontier_phi_8_pred_12_ladder_1;
                frontier_phi_8_pred_2 = frontier_phi_8_pred_12_ladder_2;
            }
            else
            {
                frontier_phi_8_pred = 0.0;
                frontier_phi_8_pred_1 = 0.0;
                frontier_phi_8_pred_2 = 0.0;
            }
            _840 = frontier_phi_8_pred;
            _842 = frontier_phi_8_pred_1;
            _844 = frontier_phi_8_pred_2;
            _270 = _578 + _840;
            _272 = _579 + _842;
            _274 = _580 + _844;
            uint _584 = _583 + 1u;
            if (_584 == _110)
            {
                break;
            }
            else
            {
                _578 = _270;
                _579 = _272;
                _580 = _274;
                _581 = (_583 != 3u) ? (_581 >> 8u) : _268;
                _583 = _584;
                continue;
            }
        }
        _269 = _270;
        _271 = _272;
        _273 = _274;
    }
    precise float _275 = _269 * _269;
    precise float _276 = _271 * _271;
    precise float _277 = _275 + _276;
    precise float _278 = _273 * _273;
    precise float _279 = _277 + _278;
    float _280 = sqrt(_279);
    bool _281 = _280 < 0.00011000000085914507508277893066406;
    float _286 = inversesqrt(dot(vec3(cbInstanceData._m0[_101].x, cbInstanceData._m0[_183].x, cbInstanceData._m0[_190].x), vec3(cbInstanceData._m0[_101].x, cbInstanceData._m0[_183].x, cbInstanceData._m0[_190].x)));
    precise float _287 = cbInstanceData._m0[_101].x * _286;
    precise float _288 = cbInstanceData._m0[_183].x * _286;
    precise float _289 = cbInstanceData._m0[_190].x * _286;
    float _293 = inversesqrt(dot(vec3(cbInstanceData._m0[_101].y, cbInstanceData._m0[_183].y, cbInstanceData._m0[_190].y), vec3(cbInstanceData._m0[_101].y, cbInstanceData._m0[_183].y, cbInstanceData._m0[_190].y)));
    precise float _294 = cbInstanceData._m0[_101].y * _293;
    precise float _295 = cbInstanceData._m0[_183].y * _293;
    precise float _296 = cbInstanceData._m0[_190].y * _293;
    float _300 = inversesqrt(dot(vec3(cbInstanceData._m0[_101].z, cbInstanceData._m0[_183].z, cbInstanceData._m0[_190].z), vec3(cbInstanceData._m0[_101].z, cbInstanceData._m0[_183].z, cbInstanceData._m0[_190].z)));
    precise float _301 = cbInstanceData._m0[_101].z * _300;
    precise float _302 = cbInstanceData._m0[_183].z * _300;
    precise float _303 = cbInstanceData._m0[_190].z * _300;
    precise float _304 = _287 * 0.0;
    precise float _305 = 1.0 * _294;
    precise float _306 = _305 + _304;
    precise float _307 = 0.0 * _301;
    precise float _308 = _307 + _306;
    precise float _309 = _288 * 0.0;
    precise float _310 = 1.0 * _295;
    precise float _311 = _310 + _309;
    precise float _312 = 0.0 * _302;
    precise float _313 = _312 + _311;
    precise float _314 = _289 * 0.0;
    precise float _315 = 1.0 * _296;
    precise float _316 = _315 + _314;
    precise float _317 = 0.0 * _303;
    precise float _318 = _317 + _316;
    float _322 = inversesqrt(dot(vec3(_269, _271, _273), vec3(_269, _271, _273)));
    precise float _323 = _269 * _322;
    precise float _324 = _271 * _322;
    precise float _325 = _273 * _322;
    precise float _326 = _313 * _325;
    precise float _327 = _318 * _324;
    precise float _328 = _326 - _327;
    precise float _329 = _318 * _323;
    precise float _330 = _308 * _325;
    precise float _331 = _329 - _330;
    precise float _332 = _308 * _324;
    precise float _333 = _313 * _323;
    precise float _334 = _332 - _333;
    float _338 = inversesqrt(dot(vec3(_328, _331, _334), vec3(_328, _331, _334)));
    precise float _339 = _338 * _328;
    precise float _340 = _338 * _331;
    precise float _341 = _338 * _334;
    precise float _342 = _280 + 1.0;
    precise float _344 = cbMtdParam._m0[10u].w * log2(_342);
    precise float _345 = _162 - _243;
    precise float _346 = _169 - _250;
    precise float _347 = _176 - _257;
    precise float _348 = dot(vec3(_339, _340, _341), vec3(_345, _346, _347));
    precise float _351 = _339 * _348;
    precise float _352 = _340 * _348;
    precise float _353 = _341 * _348;
    precise float _354 = _243 + _351;
    precise float _355 = _250 + _352;
    precise float _356 = _257 + _353;
    precise float _357 = _162 - _354;
    precise float _358 = _169 - _355;
    precise float _359 = _176 - _356;
    precise float _360 = _340 * _359;
    precise float _361 = _341 * _358;
    precise float _362 = _360 - _361;
    precise float _363 = _341 * _357;
    precise float _364 = _339 * _359;
    precise float _365 = _363 - _364;
    precise float _366 = _339 * _358;
    precise float _367 = _340 * _357;
    precise float _368 = _366 - _367;
    float _369 = sin(_344);
    float _370 = cos(_344);
    precise float _371 = _357 * _370;
    precise float _372 = _358 * _370;
    precise float _373 = _359 * _370;
    precise float _374 = _369 * _362;
    precise float _375 = _369 * _365;
    precise float _376 = _369 * _368;
    precise float _377 = _371 + _374;
    precise float _378 = _372 + _375;
    precise float _379 = _376 + _373;
    precise float _380 = _354 + _377;
    precise float _381 = _355 + _378;
    precise float _382 = _356 + _379;
    precise float _383 = _380 - _162;
    precise float _384 = _381 - _169;
    precise float _385 = _382 - _176;
    float _386 = _281 ? 0.0 : _383;
    float _387 = _281 ? 0.0 : _384;
    float _388 = _281 ? 0.0 : _385;
    precise float _389 = _162 + _386;
    precise float _390 = _169 + _387;
    precise float _391 = _176 + _388;
    precise float _392 = cbPerFrame._m0[22u].x + _232;
    float _394;
    float _396;
    float _398;
    if (_113)
    {
        _394 = 0.0;
        _396 = 0.0;
        _398 = 0.0;
    }
    else
    {
        uint _577 = _107.z;
        precise float _395;
        precise float _397;
        precise float _399;
        float _864;
        float _866;
        float _868;
        float _703 = 0.0;
        float _704 = 0.0;
        float _705 = 0.0;
        uint _706 = _577;
        uint _708 = 0u;
        float _742;
        float _761;
        vec4 _774;
        float _775;
        float _776;
        float _789;
        float _790;
        float _791;
        float _807;
        float _808;
        float _809;
        float _810;
        bool _811;
        bool _812;
        bool _813;
        precise float _814;
        precise float _815;
        precise float _816;
        float _817;
        float _818;
        float _819;
        precise float _820;
        bool _823;
        for (;;)
        {
            uint _710 = _706 & 255u;
            uint _711 = _710 * 24u;
            uvec3 _720 = uvec3(texelFetch(g_forceParam, int(_711)).x, texelFetch(g_forceParam, int(_711 + 1u)).x, texelFetch(g_forceParam, int(_711 + 2u)).x);
            uint _725 = (_710 * 24u) + 4u;
            vec4 _738 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_725)).x, texelFetch(g_forceParam, int(_725 + 1u)).x, texelFetch(g_forceParam, int(_725 + 2u)).x, texelFetch(g_forceParam, int(_725 + 3u)).x));
            _742 = _738.w;
            uint _744 = (_710 * 24u) + 8u;
            vec4 _757 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_744)).x, texelFetch(g_forceParam, int(_744 + 1u)).x, texelFetch(g_forceParam, int(_744 + 2u)).x, texelFetch(g_forceParam, int(_744 + 3u)).x));
            _761 = _757.w;
            uint _763 = (_710 * 24u) + 12u;
            _774 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_763)).x, texelFetch(g_forceParam, int(_763 + 1u)).x, _769, texelFetch(g_forceParam, int(_763 + 3u)).x));
            _775 = _774.x;
            _776 = _774.w;
            uint _778 = (_710 * 24u) + 16u;
            vec3 _788 = uintBitsToFloat(uvec3(texelFetch(g_forceParam, int(_778)).x, texelFetch(g_forceParam, int(_778 + 1u)).x, texelFetch(g_forceParam, int(_778 + 2u)).x));
            _789 = _788.x;
            _790 = _788.y;
            _791 = _788.z;
            uint _793 = (_710 * 24u) + 20u;
            vec4 _806 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_793)).x, texelFetch(g_forceParam, int(_793 + 1u)).x, texelFetch(g_forceParam, int(_793 + 2u)).x, texelFetch(g_forceParam, int(_793 + 3u)).x));
            _807 = _806.x;
            _808 = _806.y;
            _809 = _806.z;
            _810 = _806.w;
            _811 = _720.x == 1u;
            _812 = _720.y == 1u;
            _813 = _720.z == 1u;
            _814 = _203 - _738.x;
            _815 = _210 - _738.y;
            _816 = _217 - _738.z;
            _817 = _811 ? _757.x : _814;
            _818 = _811 ? _757.y : _815;
            _819 = _811 ? _757.z : _816;
            _820 = dot(vec3(_817, _818, _819), vec3(_817, _818, _819));
            _823 = _820 > 0.0;
            float frontier_phi_10_pred;
            float frontier_phi_10_pred_1;
            float frontier_phi_10_pred_2;
            if (_823)
            {
                precise float _850 = _814 * _814;
                precise float _851 = _815 * _815;
                precise float _852 = _850 + _851;
                precise float _853 = _816 * _816;
                precise float _854 = _853 + _852;
                float _855 = sqrt(_854);
                float _856 = inversesqrt(_820);
                precise float _857 = _817 * _856;
                precise float _858 = _818 * _856;
                precise float _859 = _819 * _856;
                precise float _861 = _855 / (isnan(0.001000000047497451305389404296875) ? _774.y : (isnan(_774.y) ? 0.001000000047497451305389404296875 : max(_774.y, 0.001000000047497451305389404296875)));
                precise float _862 = 1.0 - _861;
                float _1211 = isnan(0.0) ? _862 : (isnan(_862) ? 0.0 : max(_862, 0.0));
                float _863 = isnan(1.0) ? _1211 : (isnan(_1211) ? 1.0 : min(_1211, 1.0));
                float _905;
                if (_813)
                {
                    float _894 = inversesqrt(dot(vec3(_814, _815, _816), vec3(_814, _815, _816)));
                    precise float _895 = _814 * _894;
                    precise float _896 = _815 * _894;
                    precise float _897 = _816 * _894;
                    precise float _901 = dot(vec3(_857, _858, _859), vec3(_895, _896, _897)) * 0.800000011920928955078125;
                    precise float _902 = _901 + 0.20000000298023223876953125;
                    float _1222 = isnan(0.0) ? _902 : (isnan(_902) ? 0.0 : max(_902, 0.0));
                    precise float _904 = _863 * (isnan(1.0) ? _1222 : (isnan(_1222) ? 1.0 : min(_1222, 1.0)));
                    _905 = _904;
                }
                else
                {
                    _905 = _863;
                }
                float frontier_phi_10_pred_15_ladder;
                float frontier_phi_10_pred_15_ladder_1;
                float frontier_phi_10_pred_15_ladder_2;
                if (_905 > 0.0)
                {
                    bool _936 = _811 && (!_813);
                    precise float _938 = _855 * (-4.0);
                    precise float _941 = 6.283184051513671875 / (isnan(0.001000000047497451305389404296875) ? _775 : (isnan(_775) ? 0.001000000047497451305389404296875 : max(_775, 0.001000000047497451305389404296875)));
                    precise float _942 = cbMtdParam._m0[11u].y * _941;
                    precise float _943 = dot(vec2(_857, _859), vec2(_814, _816));
                    precise float _946 = _943 * _942;
                    precise float _947 = float(_936) * _946;
                    precise float _948 = _392 * _942;
                    precise float _949 = _948 - _947;
                    precise float _950 = (_936 ? 0.0 : _938) + _949;
                    precise float _952 = _761 * sin(_950);
                    precise float _953 = _858 * 0.0;
                    precise float _954 = _953 - _859;
                    precise float _955 = _859 * 0.0;
                    precise float _956 = _857 * 0.0;
                    precise float _957 = _955 - _956;
                    precise float _958 = _857 - _953;
                    precise float _959 = _776 * _952;
                    float _960 = _811 ? _959 : 0.0;
                    float _1059;
                    if (_812)
                    {
                        precise float _1021 = _789 * 2.0;
                        precise float _1022 = _808 + _809;
                        precise float _1023 = _810 + _1022;
                        precise float _1025 = 6.283184051513671875 / (isnan(0.001000000047497451305389404296875) ? _789 : (isnan(_789) ? 0.001000000047497451305389404296875 : max(_789, 0.001000000047497451305389404296875)));
                        precise float _1026 = cbMtdParam._m0[11u].y * _1025;
                        precise float _1027 = _807 * _1026;
                        precise float _1028 = (-0.0) - _857;
                        precise float _1032 = dot(vec2(_859, _1028), vec2(_814, _816)) / _1021;
                        precise float _1033 = (-0.0) - _1032;
                        float _1036 = fract(abs(_1032));
                        precise float _1037 = (-0.0) - _1036;
                        precise float _1039 = _1021 * ((_1032 >= _1033) ? _1036 : _1037);
                        precise float _1040 = _1039 * 6.283184051513671875;
                        precise float _1041 = _1040 / _1021;
                        precise float _1043 = (isnan(5.0) ? _789 : (isnan(_789) ? 5.0 : min(_789, 5.0))) * sin(_1041);
                        precise float _1044 = _943 + _1043;
                        precise float _1045 = _789 * 0.25;
                        precise float _1046 = _392 * _807;
                        precise float _1047 = _1046 - _1045;
                        precise float _1048 = _1047 - _1044;
                        precise float _1049 = _807 * _1023;
                        precise float _1051 = _1048 / (isnan(0.001000000047497451305389404296875) ? _1049 : (isnan(_1049) ? 0.001000000047497451305389404296875 : max(_1049, 0.001000000047497451305389404296875)));
                        float _1052 = fract(_1051);
                        precise float _1054 = 1.0 - _1052;
                        float _1055 = (_1051 < 0.0) ? _1054 : _1052;
                        precise float _1056 = _1022 / _1023;
                        precise float _1057 = _808 / _1023;
                        float _1092;
                        if (_1055 < _1057)
                        {
                            precise float _1077 = _1055 / _1057;
                            _1092 = _1077;
                        }
                        else
                        {
                            float frontier_phi_29_26_ladder;
                            if (_1055 < _1056)
                            {
                                precise float _1102 = _1055 - _1057;
                                precise float _1103 = _1056 - _1057;
                                precise float _1104 = _1102 / _1103;
                                precise float _1093 = 1.0 - _1104;
                                frontier_phi_29_26_ladder = _1093;
                            }
                            else
                            {
                                frontier_phi_29_26_ladder = 0.0;
                            }
                            _1092 = frontier_phi_29_26_ladder;
                        }
                        precise float _1094 = _791 * _1092;
                        precise float _1095 = _1026 * _943;
                        precise float _1096 = _392 * _1027;
                        precise float _1097 = _1096 - _1095;
                        precise float _1099 = _790 + sin(_1097);
                        precise float _1101 = _1094 * abs(_1099);
                        precise float _1060 = _1101 + 0.0;
                        _1059 = _1060;
                    }
                    else
                    {
                        _1059 = 0.0;
                    }
                    precise float _1061 = _742 + _952;
                    precise float _1062 = _1061 + _1059;
                    precise float _1063 = _857 * _1062;
                    precise float _1064 = _858 * _1062;
                    precise float _1065 = _859 * _1062;
                    precise float _1066 = _954 * _960;
                    precise float _1067 = _957 * _960;
                    precise float _1068 = _958 * _960;
                    precise float _1069 = _1066 + _1063;
                    precise float _1070 = _1067 + _1064;
                    precise float _1071 = _1068 + _1065;
                    precise float _1072 = _905 * _1069;
                    precise float _1073 = _905 * _1070;
                    precise float _1074 = _905 * _1071;
                    precise float _865 = _1072 * 0.0500000007450580596923828125;
                    precise float _867 = _1073 * 0.0500000007450580596923828125;
                    precise float _869 = _1074 * 0.0500000007450580596923828125;
                    frontier_phi_10_pred_15_ladder = _865;
                    frontier_phi_10_pred_15_ladder_1 = _867;
                    frontier_phi_10_pred_15_ladder_2 = _869;
                }
                else
                {
                    frontier_phi_10_pred_15_ladder = 0.0;
                    frontier_phi_10_pred_15_ladder_1 = 0.0;
                    frontier_phi_10_pred_15_ladder_2 = 0.0;
                }
                frontier_phi_10_pred = frontier_phi_10_pred_15_ladder;
                frontier_phi_10_pred_1 = frontier_phi_10_pred_15_ladder_1;
                frontier_phi_10_pred_2 = frontier_phi_10_pred_15_ladder_2;
            }
            else
            {
                frontier_phi_10_pred = 0.0;
                frontier_phi_10_pred_1 = 0.0;
                frontier_phi_10_pred_2 = 0.0;
            }
            _864 = frontier_phi_10_pred;
            _866 = frontier_phi_10_pred_1;
            _868 = frontier_phi_10_pred_2;
            _395 = _703 + _864;
            _397 = _704 + _866;
            _399 = _705 + _868;
            uint _709 = _708 + 1u;
            if (_709 == _110)
            {
                break;
            }
            else
            {
                _703 = _395;
                _704 = _397;
                _705 = _399;
                _706 = (_708 != 3u) ? (_706 >> 8u) : _268;
                _708 = _709;
                continue;
            }
        }
        _394 = _395;
        _396 = _397;
        _398 = _399;
    }
    precise float _400 = _394 * _394;
    precise float _401 = _396 * _396;
    precise float _402 = _400 + _401;
    precise float _403 = _398 * _398;
    precise float _404 = _402 + _403;
    float _405 = sqrt(_404);
    bool _406 = _405 < 0.00011000000085914507508277893066406;
    float _410 = inversesqrt(dot(vec3(_394, _396, _398), vec3(_394, _396, _398)));
    precise float _411 = _394 * _410;
    precise float _412 = _396 * _410;
    precise float _413 = _398 * _410;
    precise float _414 = _313 * _413;
    precise float _415 = _318 * _412;
    precise float _416 = _414 - _415;
    precise float _417 = _318 * _411;
    precise float _418 = _308 * _413;
    precise float _419 = _417 - _418;
    precise float _420 = _308 * _412;
    precise float _421 = _313 * _411;
    precise float _422 = _420 - _421;
    float _426 = inversesqrt(dot(vec3(_416, _419, _422), vec3(_416, _419, _422)));
    precise float _427 = _426 * _416;
    precise float _428 = _426 * _419;
    precise float _429 = _426 * _422;
    precise float _430 = _405 + 1.0;
    precise float _432 = cbMtdParam._m0[10u].y * log2(_430);
    precise float _433 = _389 - _203;
    precise float _434 = _390 - _210;
    precise float _435 = _391 - _217;
    precise float _436 = dot(vec3(_427, _428, _429), vec3(_433, _434, _435));
    precise float _439 = _427 * _436;
    precise float _440 = _428 * _436;
    precise float _441 = _429 * _436;
    precise float _442 = _203 + _439;
    precise float _443 = _210 + _440;
    precise float _444 = _217 + _441;
    precise float _445 = _389 - _442;
    precise float _446 = _390 - _443;
    precise float _447 = _391 - _444;
    precise float _448 = _428 * _447;
    precise float _449 = _429 * _446;
    precise float _450 = _448 - _449;
    precise float _451 = _429 * _445;
    precise float _452 = _427 * _447;
    precise float _453 = _451 - _452;
    precise float _454 = _427 * _446;
    precise float _455 = _428 * _445;
    precise float _456 = _454 - _455;
    float _457 = sin(_432);
    float _458 = cos(_432);
    precise float _459 = _445 * _458;
    precise float _460 = _446 * _458;
    precise float _461 = _447 * _458;
    precise float _462 = _457 * _450;
    precise float _463 = _457 * _453;
    precise float _464 = _457 * _456;
    precise float _465 = _459 + _462;
    precise float _466 = _460 + _463;
    precise float _467 = _464 + _461;
    precise float _468 = _442 + _465;
    precise float _469 = _443 + _466;
    precise float _470 = _444 + _467;
    precise float _471 = _468 - _389;
    precise float _472 = _469 - _390;
    precise float _473 = _470 - _391;
    precise float _477 = _386 + (_406 ? 0.0 : _471);
    precise float _478 = _387 + (_406 ? 0.0 : _472);
    precise float _479 = _388 + (_406 ? 0.0 : _473);
    precise float _480 = _162 + _477;
    precise float _481 = _169 + _478;
    precise float _482 = _176 + _479;
    precise float _488 = _480 - cbSceneParam._m0[3u].x;
    precise float _489 = _481 - cbSceneParam._m0[3u].y;
    precise float _490 = _482 - cbSceneParam._m0[3u].z;
    precise float _518 = cbSceneParam._m0[24u].x * _488;
    precise float _519 = _489 * cbSceneParam._m0[24u].y;
    precise float _520 = _519 + _518;
    precise float _521 = _490 * cbSceneParam._m0[24u].z;
    precise float _522 = _521 + _520;
    precise float _523 = 1.0 * cbSceneParam._m0[24u].w;
    precise float _524 = _523 + _522;
    precise float _525 = cbSceneParam._m0[25u].x * _488;
    precise float _526 = _489 * cbSceneParam._m0[25u].y;
    precise float _527 = _526 + _525;
    precise float _528 = _490 * cbSceneParam._m0[25u].z;
    precise float _529 = _528 + _527;
    precise float _530 = 1.0 * cbSceneParam._m0[25u].w;
    precise float _531 = _530 + _529;
    precise float _532 = cbSceneParam._m0[26u].x * _488;
    precise float _533 = _489 * cbSceneParam._m0[26u].y;
    precise float _534 = _533 + _532;
    precise float _535 = _490 * cbSceneParam._m0[26u].z;
    precise float _536 = _535 + _534;
    precise float _537 = 1.0 * cbSceneParam._m0[26u].w;
    precise float _538 = _537 + _536;
    precise float _539 = cbSceneParam._m0[27u].x * _488;
    precise float _540 = _489 * cbSceneParam._m0[27u].y;
    precise float _541 = _540 + _539;
    precise float _542 = _490 * cbSceneParam._m0[27u].z;
    precise float _543 = _542 + _541;
    precise float _544 = 1.0 * cbSceneParam._m0[27u].w;
    precise float _545 = _544 + _543;
    gl_Position.x = 0.0;
    gl_Position.y = 0.0;
    gl_Position.z = 0.0;
    gl_Position.w = 0.0;
    gl_ClipDistance[0u] = 0.0;
    gl_ClipDistance[1u] = 0.0;
    gl_Position.x = _524;
    gl_Position.y = _531;
    gl_Position.z = _538;
    gl_Position.w = _545;
    gl_ClipDistance[0u] = dot(vec4(_524, _531, _538, _545), vec4(cbSceneParam._m0[4u]));
    gl_ClipDistance[1u] = dot(vec4(_524, _531, _538, _545), vec4(cbInstanceData._m0[_126 + 3u]));
}


