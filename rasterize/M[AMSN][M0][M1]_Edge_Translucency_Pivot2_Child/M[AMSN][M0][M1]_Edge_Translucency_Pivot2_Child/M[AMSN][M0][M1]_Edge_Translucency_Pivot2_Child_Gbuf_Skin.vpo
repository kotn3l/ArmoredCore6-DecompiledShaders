#version 460

out float gl_ClipDistance[2];

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[12];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 5, std140) uniform cbObjMatrixUBO
{
    vec4 _m0[6];
} cbObjMatrix;

layout(set = 0, binding = 10, std140) uniform cbInstanceIdxParamUBO
{
    vec4 _m0[1];
} cbInstanceIdxParam;

layout(set = 0, binding = 11, std140) uniform cbTexScrollUBO
{
    vec4 _m0[4];
} cbTexScroll;

layout(set = 0, binding = 26) uniform usamplerBuffer g_forceParam;
layout(set = 0, binding = 25) uniform usamplerBuffer g_InstanceIndexBuffer;

layout(location = 0) in vec3 POSITION;
layout(location = 1) in uvec4 NORMAL;
layout(location = 2) in uvec4 TANGENT;
layout(location = 3) in uvec4 BLENDINDICES;
layout(location = 4) in vec4 BLENDWEIGHT;
layout(location = 5) in vec4 COLOR_1;
layout(location = 6) in ivec2 TEXCOORD;
layout(location = 7) in vec4 TEXCOORD_1;
layout(location = 1) out vec4 NORMAL_1;
layout(location = 2) out vec4 TANGENT_1;
layout(location = 3) out float TEXCOORD_2;
layout(location = 3, component = 1) out float TEXCOORD_1_1;
layout(location = 4) out vec4 TEXCOORD_3;
layout(location = 3, component = 2) out float TEXCOORD_11;

uint _944;
uint _1067;

void main()
{
    uint _83 = uint(gl_InstanceIndex) - uint(gl_BaseInstance);
    gl_Position.x = 0.0;
    gl_Position.y = 0.0;
    gl_Position.z = 0.0;
    gl_Position.w = 0.0;
    NORMAL_1.x = 0.0;
    NORMAL_1.y = 0.0;
    NORMAL_1.z = 0.0;
    NORMAL_1.w = 0.0;
    TANGENT_1.x = 0.0;
    TANGENT_1.y = 0.0;
    TANGENT_1.z = 0.0;
    TANGENT_1.w = 0.0;
    TEXCOORD_2 = 0.0;
    TEXCOORD_1_1 = 0.0;
    TEXCOORD_3.x = 0.0;
    TEXCOORD_3.y = 0.0;
    TEXCOORD_3.z = 0.0;
    TEXCOORD_3.w = 0.0;
    TEXCOORD_11 = 0.0;
    gl_ClipDistance[0u] = 0.0;
    gl_ClipDistance[1u] = 0.0;
    float _184 = (float(NORMAL.x) + (-127.0)) * 0.0078740157186985015869140625;
    float _186 = (float(NORMAL.y) + (-127.0)) * 0.0078740157186985015869140625;
    float _187 = (float(NORMAL.z) + (-127.0)) * 0.0078740157186985015869140625;
    float _196 = (float(TANGENT.x) + (-127.0)) * 0.0078740157186985015869140625;
    float _197 = (float(TANGENT.y) + (-127.0)) * 0.0078740157186985015869140625;
    float _198 = (float(TANGENT.z) + (-127.0)) * 0.0078740157186985015869140625;
    uint _204 = _83 * 13u;
    uvec4 _210 = floatBitsToUint(cbInstanceData._m0[_204 + 7u]);
    uint _213 = min(_210.y, 8u);
    bool _216 = _213 == 0u;
    precise float _217 = POSITION.x + 0.0;
    precise float _218 = POSITION.y + 0.0;
    precise float _219 = POSITION.z + 0.0;
    uint _224 = floatBitsToUint(cbInstanceIdxParam._m0[0u]).x + _83;
    uvec4 _226 = texelFetch(g_InstanceIndexBuffer, int(_224));
    uint _227 = _226.x;
    precise float _228 = dot(vec4(1.0), vec4(BLENDWEIGHT.x, BLENDWEIGHT.y, BLENDWEIGHT.z, BLENDWEIGHT.w));
    float _232 = isnan(_228) ? 0.001000000047497451305389404296875 : (isnan(0.001000000047497451305389404296875) ? _228 : max(0.001000000047497451305389404296875, _228));
    precise float _234 = BLENDWEIGHT.x / _232;
    precise float _235 = BLENDWEIGHT.y / _232;
    precise float _236 = BLENDWEIGHT.z / _232;
    precise float _237 = BLENDWEIGHT.w / _232;
    uint _239 = _227 * 13u;
    uvec4 _243 = floatBitsToUint(cbInstanceData._m0[_239 + 4u]);
    uint _244 = _243.x;
    uint _246 = (_244 + uint(float(BLENDINDICES.x))) * 3u;
    uint _253 = _246 + 1u;
    uint _260 = _246 + 2u;
    precise float _267 = _234 * cbObjMatrix._m0[_246].x;
    precise float _268 = _234 * cbObjMatrix._m0[_253].x;
    precise float _269 = _234 * cbObjMatrix._m0[_260].x;
    precise float _270 = _234 * cbObjMatrix._m0[_246].y;
    precise float _271 = _234 * cbObjMatrix._m0[_253].y;
    precise float _272 = _234 * cbObjMatrix._m0[_260].y;
    precise float _273 = _234 * cbObjMatrix._m0[_246].z;
    precise float _274 = _234 * cbObjMatrix._m0[_253].z;
    precise float _275 = _234 * cbObjMatrix._m0[_260].z;
    precise float _276 = _234 * cbObjMatrix._m0[_246].w;
    precise float _277 = _234 * cbObjMatrix._m0[_253].w;
    precise float _278 = _234 * cbObjMatrix._m0[_260].w;
    uint _281 = (_244 + uint(float(BLENDINDICES.y))) * 3u;
    uint _288 = _281 + 1u;
    uint _295 = _281 + 2u;
    precise float _302 = _235 * cbObjMatrix._m0[_281].x;
    precise float _303 = _235 * cbObjMatrix._m0[_288].x;
    precise float _304 = _235 * cbObjMatrix._m0[_295].x;
    precise float _305 = _235 * cbObjMatrix._m0[_281].y;
    precise float _306 = _235 * cbObjMatrix._m0[_288].y;
    precise float _307 = _235 * cbObjMatrix._m0[_295].y;
    precise float _308 = _235 * cbObjMatrix._m0[_281].z;
    precise float _309 = _235 * cbObjMatrix._m0[_288].z;
    precise float _310 = _235 * cbObjMatrix._m0[_295].z;
    precise float _311 = _235 * cbObjMatrix._m0[_281].w;
    precise float _312 = _235 * cbObjMatrix._m0[_288].w;
    precise float _313 = _235 * cbObjMatrix._m0[_295].w;
    precise float _314 = _267 + _302;
    precise float _315 = _268 + _303;
    precise float _316 = _269 + _304;
    precise float _317 = _270 + _305;
    precise float _318 = _271 + _306;
    precise float _319 = _272 + _307;
    precise float _320 = _273 + _308;
    precise float _321 = _274 + _309;
    precise float _322 = _275 + _310;
    precise float _323 = _276 + _311;
    precise float _324 = _277 + _312;
    precise float _325 = _278 + _313;
    uint _328 = (_244 + uint(float(BLENDINDICES.z))) * 3u;
    uint _335 = _328 + 1u;
    uint _342 = _328 + 2u;
    precise float _349 = _236 * cbObjMatrix._m0[_328].x;
    precise float _350 = _236 * cbObjMatrix._m0[_335].x;
    precise float _351 = _236 * cbObjMatrix._m0[_342].x;
    precise float _352 = _236 * cbObjMatrix._m0[_328].y;
    precise float _353 = _236 * cbObjMatrix._m0[_335].y;
    precise float _354 = _236 * cbObjMatrix._m0[_342].y;
    precise float _355 = _236 * cbObjMatrix._m0[_328].z;
    precise float _356 = _236 * cbObjMatrix._m0[_335].z;
    precise float _357 = _236 * cbObjMatrix._m0[_342].z;
    precise float _358 = _236 * cbObjMatrix._m0[_328].w;
    precise float _359 = _236 * cbObjMatrix._m0[_335].w;
    precise float _360 = _236 * cbObjMatrix._m0[_342].w;
    precise float _361 = _314 + _349;
    precise float _362 = _315 + _350;
    precise float _363 = _316 + _351;
    precise float _364 = _317 + _352;
    precise float _365 = _318 + _353;
    precise float _366 = _319 + _354;
    precise float _367 = _320 + _355;
    precise float _368 = _321 + _356;
    precise float _369 = _322 + _357;
    precise float _370 = _323 + _358;
    precise float _371 = _324 + _359;
    precise float _372 = _325 + _360;
    uint _375 = (_244 + uint(float(BLENDINDICES.w))) * 3u;
    uint _382 = _375 + 1u;
    uint _389 = _375 + 2u;
    precise float _396 = _237 * cbObjMatrix._m0[_375].x;
    precise float _397 = _237 * cbObjMatrix._m0[_382].x;
    precise float _398 = _237 * cbObjMatrix._m0[_389].x;
    precise float _399 = _237 * cbObjMatrix._m0[_375].y;
    precise float _400 = _237 * cbObjMatrix._m0[_382].y;
    precise float _401 = _237 * cbObjMatrix._m0[_389].y;
    precise float _402 = _237 * cbObjMatrix._m0[_375].z;
    precise float _403 = _237 * cbObjMatrix._m0[_382].z;
    precise float _404 = _237 * cbObjMatrix._m0[_389].z;
    precise float _405 = _237 * cbObjMatrix._m0[_375].w;
    precise float _406 = _237 * cbObjMatrix._m0[_382].w;
    precise float _407 = _237 * cbObjMatrix._m0[_389].w;
    precise float _408 = _361 + _396;
    precise float _409 = _362 + _397;
    precise float _410 = _363 + _398;
    precise float _411 = _364 + _399;
    precise float _412 = _365 + _400;
    precise float _413 = _366 + _401;
    precise float _414 = _367 + _402;
    precise float _415 = _368 + _403;
    precise float _416 = _369 + _404;
    precise float _417 = _370 + _405;
    precise float _418 = _371 + _406;
    precise float _419 = _372 + _407;
    precise float _420 = _217 * _408;
    precise float _421 = _218 * _411;
    precise float _422 = _421 + _420;
    precise float _423 = _219 * _414;
    precise float _424 = _423 + _422;
    precise float _425 = 1.0 * _417;
    precise float _426 = _425 + _424;
    precise float _427 = _217 * _409;
    precise float _428 = _218 * _412;
    precise float _429 = _428 + _427;
    precise float _430 = _219 * _415;
    precise float _431 = _430 + _429;
    precise float _432 = 1.0 * _418;
    precise float _433 = _432 + _431;
    precise float _434 = _217 * _410;
    precise float _435 = _218 * _413;
    precise float _436 = _435 + _434;
    precise float _437 = _219 * _416;
    precise float _438 = _437 + _436;
    precise float _439 = 1.0 * _419;
    precise float _440 = _439 + _438;
    float _446 = cbSceneParam._m0[3u].x - _426;
    float _447 = cbSceneParam._m0[3u].y - _433;
    float _448 = cbSceneParam._m0[3u].z - _440;
    uint _480 = _204 + 1u;
    uint _487 = _204 + 2u;
    precise float _494 = TEXCOORD_1.x * cbInstanceData._m0[_204].x;
    precise float _495 = TEXCOORD_1.y * cbInstanceData._m0[_204].y;
    precise float _496 = _495 + _494;
    precise float _497 = TEXCOORD_1.z * cbInstanceData._m0[_204].z;
    precise float _498 = _497 + _496;
    precise float _499 = 1.0 * cbInstanceData._m0[_204].w;
    precise float _500 = _499 + _498;
    precise float _501 = TEXCOORD_1.x * cbInstanceData._m0[_480].x;
    precise float _502 = TEXCOORD_1.y * cbInstanceData._m0[_480].y;
    precise float _503 = _502 + _501;
    precise float _504 = TEXCOORD_1.z * cbInstanceData._m0[_480].z;
    precise float _505 = _504 + _503;
    precise float _506 = 1.0 * cbInstanceData._m0[_480].w;
    precise float _507 = _506 + _505;
    precise float _508 = TEXCOORD_1.x * cbInstanceData._m0[_487].x;
    precise float _509 = TEXCOORD_1.y * cbInstanceData._m0[_487].y;
    precise float _510 = _509 + _508;
    precise float _511 = TEXCOORD_1.z * cbInstanceData._m0[_487].z;
    precise float _512 = _511 + _510;
    precise float _513 = 1.0 * cbInstanceData._m0[_487].w;
    precise float _514 = _513 + _512;
    precise float _520 = _426 - _500;
    precise float _521 = _433 - _507;
    precise float _522 = _440 - _514;
    precise float _523 = _520 * _520;
    precise float _524 = _521 * _521;
    precise float _525 = _523 + _524;
    precise float _526 = _522 * _522;
    precise float _527 = _525 + _526;
    precise float _529 = cbMtdParam._m0[10u].z * sqrt(_527);
    precise float _534 = cbInstanceData._m0[_204].x * 0.0;
    precise float _535 = 0.0 * cbInstanceData._m0[_204].y;
    precise float _536 = _535 + _534;
    precise float _537 = 0.0 * cbInstanceData._m0[_204].z;
    precise float _538 = _537 + _536;
    precise float _539 = 1.0 * cbInstanceData._m0[_204].w;
    precise float _540 = _539 + _538;
    precise float _541 = cbInstanceData._m0[_480].x * 0.0;
    precise float _542 = 0.0 * cbInstanceData._m0[_480].y;
    precise float _543 = _542 + _541;
    precise float _544 = 0.0 * cbInstanceData._m0[_480].z;
    precise float _545 = _544 + _543;
    precise float _546 = 1.0 * cbInstanceData._m0[_480].w;
    precise float _547 = _546 + _545;
    precise float _548 = cbInstanceData._m0[_487].x * 0.0;
    precise float _549 = 0.0 * cbInstanceData._m0[_487].y;
    precise float _550 = _549 + _548;
    precise float _551 = 0.0 * cbInstanceData._m0[_487].z;
    precise float _552 = _551 + _550;
    precise float _553 = 1.0 * cbInstanceData._m0[_487].w;
    precise float _554 = _553 + _552;
    precise float _557 = _426 * _426;
    precise float _558 = _433 * _433;
    precise float _559 = _557 + _558;
    precise float _560 = _440 * _440;
    precise float _561 = _559 + _560;
    precise float _563 = cbMtdParam._m0[11u].x * sqrt(_561);
    precise float _564 = cbPerFrame._m0[22u].x + _563;
    uint _565 = _210.w;
    float _566;
    float _568;
    float _570;
    if (_216)
    {
        _566 = 0.0;
        _568 = 0.0;
        _570 = 0.0;
    }
    else
    {
        uint _690 = _210.z;
        precise float _567;
        precise float _569;
        precise float _571;
        float _1137;
        float _1139;
        float _1141;
        float _876 = 0.0;
        float _877 = 0.0;
        float _878 = 0.0;
        uint _879 = _690;
        uint _881 = 0u;
        float _917;
        float _936;
        vec4 _949;
        float _950;
        float _951;
        float _965;
        float _966;
        float _967;
        float _984;
        float _985;
        float _986;
        float _987;
        bool _988;
        bool _989;
        bool _990;
        precise float _991;
        precise float _992;
        precise float _993;
        float _994;
        float _995;
        float _996;
        precise float _997;
        bool _1000;
        for (;;)
        {
            uint _883 = _879 & 255u;
            uint _885 = _883 * 24u;
            uvec3 _895 = uvec3(texelFetch(g_forceParam, int(_885)).x, texelFetch(g_forceParam, int(_885 + 1u)).x, texelFetch(g_forceParam, int(_885 + 2u)).x);
            uint _900 = (_883 * 24u) + 4u;
            vec4 _913 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_900)).x, texelFetch(g_forceParam, int(_900 + 1u)).x, texelFetch(g_forceParam, int(_900 + 2u)).x, texelFetch(g_forceParam, int(_900 + 3u)).x));
            _917 = _913.w;
            uint _919 = (_883 * 24u) + 8u;
            vec4 _932 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_919)).x, texelFetch(g_forceParam, int(_919 + 1u)).x, texelFetch(g_forceParam, int(_919 + 2u)).x, texelFetch(g_forceParam, int(_919 + 3u)).x));
            _936 = _932.w;
            uint _938 = (_883 * 24u) + 12u;
            _949 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_938)).x, texelFetch(g_forceParam, int(_938 + 1u)).x, _944, texelFetch(g_forceParam, int(_938 + 3u)).x));
            _950 = _949.x;
            _951 = _949.w;
            uint _954 = (_883 * 24u) + 16u;
            vec3 _964 = uintBitsToFloat(uvec3(texelFetch(g_forceParam, int(_954)).x, texelFetch(g_forceParam, int(_954 + 1u)).x, texelFetch(g_forceParam, int(_954 + 2u)).x));
            _965 = _964.x;
            _966 = _964.y;
            _967 = _964.z;
            uint _970 = (_883 * 24u) + 20u;
            vec4 _983 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_970)).x, texelFetch(g_forceParam, int(_970 + 1u)).x, texelFetch(g_forceParam, int(_970 + 2u)).x, texelFetch(g_forceParam, int(_970 + 3u)).x));
            _984 = _983.x;
            _985 = _983.y;
            _986 = _983.z;
            _987 = _983.w;
            _988 = _895.x == 1u;
            _989 = _895.y == 1u;
            _990 = _895.z == 1u;
            _991 = _540 - _913.x;
            _992 = _547 - _913.y;
            _993 = _554 - _913.z;
            _994 = _988 ? _932.x : _991;
            _995 = _988 ? _932.y : _992;
            _996 = _988 ? _932.z : _993;
            _997 = dot(vec3(_994, _995, _996), vec3(_994, _995, _996));
            _1000 = _997 > 0.0;
            float frontier_phi_8_pred;
            float frontier_phi_8_pred_1;
            float frontier_phi_8_pred_2;
            if (_1000)
            {
                precise float _1123 = _991 * _991;
                precise float _1124 = _992 * _992;
                precise float _1125 = _1123 + _1124;
                precise float _1126 = _993 * _993;
                precise float _1127 = _1126 + _1125;
                float _1128 = sqrt(_1127);
                float _1129 = inversesqrt(_997);
                precise float _1130 = _994 * _1129;
                precise float _1131 = _995 * _1129;
                precise float _1132 = _996 * _1129;
                precise float _1134 = _1128 / (isnan(0.001000000047497451305389404296875) ? _949.y : (isnan(_949.y) ? 0.001000000047497451305389404296875 : max(_949.y, 0.001000000047497451305389404296875)));
                precise float _1135 = 1.0 - _1134;
                float _1466 = isnan(0.0) ? _1135 : (isnan(_1135) ? 0.0 : max(_1135, 0.0));
                float _1136 = isnan(1.0) ? _1466 : (isnan(_1466) ? 1.0 : min(_1466, 1.0));
                float _1186;
                if (_990)
                {
                    float _1173 = inversesqrt(dot(vec3(_991, _992, _993), vec3(_991, _992, _993)));
                    precise float _1174 = _991 * _1173;
                    precise float _1175 = _992 * _1173;
                    precise float _1176 = _993 * _1173;
                    precise float _1180 = dot(vec3(_1130, _1131, _1132), vec3(_1174, _1175, _1176)) * 0.800000011920928955078125;
                    precise float _1182 = _1180 + 0.20000000298023223876953125;
                    float _1477 = isnan(0.0) ? _1182 : (isnan(_1182) ? 0.0 : max(_1182, 0.0));
                    precise float _1185 = _1136 * (isnan(1.0) ? _1477 : (isnan(_1477) ? 1.0 : min(_1477, 1.0)));
                    _1186 = _1185;
                }
                else
                {
                    _1186 = _1136;
                }
                float frontier_phi_8_pred_12_ladder;
                float frontier_phi_8_pred_12_ladder_1;
                float frontier_phi_8_pred_12_ladder_2;
                if (_1186 > 0.0)
                {
                    bool _1205 = _988 && (!_990);
                    precise float _1207 = _1128 * (-4.0);
                    precise float _1211 = 6.283184051513671875 / (isnan(0.001000000047497451305389404296875) ? _950 : (isnan(_950) ? 0.001000000047497451305389404296875 : max(_950, 0.001000000047497451305389404296875)));
                    precise float _1213 = dot(vec2(_1130, _1132), vec2(_991, _993));
                    precise float _1217 = _1211 * _1213;
                    precise float _1218 = float(_1205) * _1217;
                    precise float _1219 = _564 * _1211;
                    precise float _1220 = _1219 - _1218;
                    precise float _1221 = (_1205 ? 0.0 : _1207) + _1220;
                    precise float _1223 = _936 * sin(_1221);
                    precise float _1224 = _1131 * 0.0;
                    precise float _1225 = _1224 - _1132;
                    precise float _1226 = _1132 * 0.0;
                    precise float _1227 = _1130 * 0.0;
                    precise float _1228 = _1226 - _1227;
                    precise float _1229 = _1130 - _1224;
                    precise float _1230 = _951 * _1223;
                    float _1231 = _988 ? _1230 : 0.0;
                    float _1300;
                    if (_989)
                    {
                        precise float _1260 = _965 * 2.0;
                        precise float _1262 = _985 + _986;
                        precise float _1263 = _987 + _1262;
                        precise float _1265 = 6.283184051513671875 / (isnan(0.001000000047497451305389404296875) ? _965 : (isnan(_965) ? 0.001000000047497451305389404296875 : max(_965, 0.001000000047497451305389404296875)));
                        precise float _1266 = _984 * _1265;
                        precise float _1267 = (-0.0) - _1130;
                        precise float _1272 = dot(vec2(_1132, _1267), vec2(_991, _993)) / _1260;
                        precise float _1273 = (-0.0) - _1272;
                        float _1276 = fract(abs(_1272));
                        precise float _1277 = (-0.0) - _1276;
                        precise float _1279 = _1260 * ((_1272 >= _1273) ? _1276 : _1277);
                        precise float _1280 = _1279 * 6.283184051513671875;
                        precise float _1281 = _1280 / _1260;
                        precise float _1283 = (isnan(5.0) ? _965 : (isnan(_965) ? 5.0 : min(_965, 5.0))) * sin(_1281);
                        precise float _1284 = _1213 + _1283;
                        precise float _1285 = _965 * 0.25;
                        precise float _1287 = _564 * _984;
                        precise float _1288 = _1287 - _1285;
                        precise float _1289 = _1288 - _1284;
                        precise float _1290 = _984 * _1263;
                        precise float _1292 = _1289 / (isnan(0.001000000047497451305389404296875) ? _1290 : (isnan(_1290) ? 0.001000000047497451305389404296875 : max(_1290, 0.001000000047497451305389404296875)));
                        float _1293 = fract(_1292);
                        precise float _1295 = 1.0 - _1293;
                        float _1296 = (_1292 < 0.0) ? _1295 : _1293;
                        precise float _1297 = _1262 / _1263;
                        precise float _1298 = _985 / _1263;
                        float _1376;
                        if (_1296 < _1298)
                        {
                            precise float _1372 = _1296 / _1298;
                            _1376 = _1372;
                        }
                        else
                        {
                            float frontier_phi_27_24_ladder;
                            if (_1296 < _1297)
                            {
                                precise float _1386 = _1296 - _1298;
                                precise float _1387 = _1297 - _1298;
                                precise float _1388 = _1386 / _1387;
                                precise float _1377 = 1.0 - _1388;
                                frontier_phi_27_24_ladder = _1377;
                            }
                            else
                            {
                                frontier_phi_27_24_ladder = 0.0;
                            }
                            _1376 = frontier_phi_27_24_ladder;
                        }
                        precise float _1378 = _967 * _1376;
                        precise float _1379 = _1265 * _1213;
                        precise float _1380 = _564 * _1266;
                        precise float _1381 = _1380 - _1379;
                        precise float _1383 = _966 + sin(_1381);
                        precise float _1385 = _1378 * abs(_1383);
                        precise float _1301 = _1385 + 0.0;
                        _1300 = _1301;
                    }
                    else
                    {
                        _1300 = 0.0;
                    }
                    precise float _1302 = _917 + _1223;
                    precise float _1303 = _1302 + _1300;
                    precise float _1304 = _1130 * _1303;
                    precise float _1305 = _1131 * _1303;
                    precise float _1306 = _1132 * _1303;
                    precise float _1307 = _1225 * _1231;
                    precise float _1308 = _1228 * _1231;
                    precise float _1309 = _1229 * _1231;
                    precise float _1310 = _1307 + _1304;
                    precise float _1311 = _1308 + _1305;
                    precise float _1312 = _1309 + _1306;
                    precise float _1313 = _1186 * _1310;
                    precise float _1314 = _1186 * _1311;
                    precise float _1315 = _1186 * _1312;
                    precise float _1138 = _1313 * 0.0500000007450580596923828125;
                    precise float _1140 = _1314 * 0.0500000007450580596923828125;
                    precise float _1142 = _1315 * 0.0500000007450580596923828125;
                    frontier_phi_8_pred_12_ladder = _1138;
                    frontier_phi_8_pred_12_ladder_1 = _1140;
                    frontier_phi_8_pred_12_ladder_2 = _1142;
                }
                else
                {
                    frontier_phi_8_pred_12_ladder = 0.0;
                    frontier_phi_8_pred_12_ladder_1 = 0.0;
                    frontier_phi_8_pred_12_ladder_2 = 0.0;
                }
                frontier_phi_8_pred = frontier_phi_8_pred_12_ladder;
                frontier_phi_8_pred_1 = frontier_phi_8_pred_12_ladder_1;
                frontier_phi_8_pred_2 = frontier_phi_8_pred_12_ladder_2;
            }
            else
            {
                frontier_phi_8_pred = 0.0;
                frontier_phi_8_pred_1 = 0.0;
                frontier_phi_8_pred_2 = 0.0;
            }
            _1137 = frontier_phi_8_pred;
            _1139 = frontier_phi_8_pred_1;
            _1141 = frontier_phi_8_pred_2;
            _567 = _876 + _1137;
            _569 = _877 + _1139;
            _571 = _878 + _1141;
            uint _882 = _881 + 1u;
            if (_882 == _213)
            {
                break;
            }
            else
            {
                _876 = _567;
                _877 = _569;
                _878 = _571;
                _879 = (_881 != 3u) ? (_879 >> 8u) : _565;
                _881 = _882;
                continue;
            }
        }
        _566 = _567;
        _568 = _569;
        _570 = _571;
    }
    precise float _572 = _566 * _566;
    precise float _573 = _568 * _568;
    precise float _574 = _572 + _573;
    precise float _575 = _570 * _570;
    precise float _576 = _574 + _575;
    float _577 = sqrt(_576);
    bool _578 = _577 < 0.00011000000085914507508277893066406;
    float _583 = inversesqrt(dot(vec3(cbInstanceData._m0[_204].x, cbInstanceData._m0[_480].x, cbInstanceData._m0[_487].x), vec3(cbInstanceData._m0[_204].x, cbInstanceData._m0[_480].x, cbInstanceData._m0[_487].x)));
    precise float _584 = cbInstanceData._m0[_204].x * _583;
    precise float _585 = cbInstanceData._m0[_480].x * _583;
    precise float _586 = cbInstanceData._m0[_487].x * _583;
    float _590 = inversesqrt(dot(vec3(cbInstanceData._m0[_204].y, cbInstanceData._m0[_480].y, cbInstanceData._m0[_487].y), vec3(cbInstanceData._m0[_204].y, cbInstanceData._m0[_480].y, cbInstanceData._m0[_487].y)));
    precise float _591 = cbInstanceData._m0[_204].y * _590;
    precise float _592 = cbInstanceData._m0[_480].y * _590;
    precise float _593 = cbInstanceData._m0[_487].y * _590;
    float _597 = inversesqrt(dot(vec3(cbInstanceData._m0[_204].z, cbInstanceData._m0[_480].z, cbInstanceData._m0[_487].z), vec3(cbInstanceData._m0[_204].z, cbInstanceData._m0[_480].z, cbInstanceData._m0[_487].z)));
    precise float _598 = cbInstanceData._m0[_204].z * _597;
    precise float _599 = cbInstanceData._m0[_480].z * _597;
    precise float _600 = cbInstanceData._m0[_487].z * _597;
    precise float _601 = _584 * 0.0;
    precise float _602 = 1.0 * _591;
    precise float _603 = _602 + _601;
    precise float _604 = 0.0 * _598;
    precise float _605 = _604 + _603;
    precise float _606 = _585 * 0.0;
    precise float _607 = 1.0 * _592;
    precise float _608 = _607 + _606;
    precise float _609 = 0.0 * _599;
    precise float _610 = _609 + _608;
    precise float _611 = _586 * 0.0;
    precise float _612 = 1.0 * _593;
    precise float _613 = _612 + _611;
    precise float _614 = 0.0 * _600;
    precise float _615 = _614 + _613;
    float _619 = inversesqrt(dot(vec3(_566, _568, _570), vec3(_566, _568, _570)));
    precise float _620 = _566 * _619;
    precise float _621 = _568 * _619;
    precise float _622 = _570 * _619;
    precise float _623 = _610 * _622;
    precise float _624 = _615 * _621;
    precise float _625 = _623 - _624;
    precise float _626 = _615 * _620;
    precise float _627 = _605 * _622;
    precise float _628 = _626 - _627;
    precise float _629 = _605 * _621;
    precise float _630 = _610 * _620;
    precise float _631 = _629 - _630;
    float _635 = inversesqrt(dot(vec3(_625, _628, _631), vec3(_625, _628, _631)));
    precise float _636 = _635 * _625;
    precise float _637 = _635 * _628;
    precise float _638 = _635 * _631;
    precise float _639 = _577 + 1.0;
    precise float _641 = cbMtdParam._m0[10u].w * log2(_639);
    precise float _642 = _426 - _540;
    precise float _643 = _433 - _547;
    precise float _644 = _440 - _554;
    precise float _645 = dot(vec3(_636, _637, _638), vec3(_642, _643, _644));
    precise float _648 = _636 * _645;
    precise float _649 = _637 * _645;
    precise float _650 = _638 * _645;
    precise float _651 = _540 + _648;
    precise float _652 = _547 + _649;
    precise float _653 = _554 + _650;
    precise float _654 = _426 - _651;
    precise float _655 = _433 - _652;
    precise float _656 = _440 - _653;
    precise float _657 = _637 * _656;
    precise float _658 = _638 * _655;
    precise float _659 = _657 - _658;
    precise float _660 = _638 * _654;
    precise float _661 = _636 * _656;
    precise float _662 = _660 - _661;
    precise float _663 = _636 * _655;
    precise float _664 = _637 * _654;
    precise float _665 = _663 - _664;
    float _666 = sin(_641);
    float _667 = cos(_641);
    precise float _668 = _654 * _667;
    precise float _669 = _655 * _667;
    precise float _670 = _656 * _667;
    precise float _671 = _666 * _659;
    precise float _672 = _666 * _662;
    precise float _673 = _666 * _665;
    precise float _674 = _668 + _671;
    precise float _675 = _669 + _672;
    precise float _676 = _673 + _670;
    precise float _677 = _651 + _674;
    precise float _678 = _652 + _675;
    precise float _679 = _653 + _676;
    precise float _680 = _677 - _426;
    precise float _681 = _678 - _433;
    precise float _682 = _679 - _440;
    float _683 = _578 ? 0.0 : _680;
    float _684 = _578 ? 0.0 : _681;
    float _685 = _578 ? 0.0 : _682;
    precise float _686 = _426 + _683;
    precise float _687 = _433 + _684;
    precise float _688 = _440 + _685;
    precise float _689 = cbPerFrame._m0[22u].x + _529;
    float _691;
    float _693;
    float _695;
    if (_216)
    {
        _691 = 0.0;
        _693 = 0.0;
        _695 = 0.0;
    }
    else
    {
        uint _875 = _210.z;
        precise float _692;
        precise float _694;
        precise float _696;
        float _1161;
        float _1163;
        float _1165;
        float _1001 = 0.0;
        float _1002 = 0.0;
        float _1003 = 0.0;
        uint _1004 = _875;
        uint _1006 = 0u;
        float _1040;
        float _1059;
        vec4 _1072;
        float _1073;
        float _1074;
        float _1087;
        float _1088;
        float _1089;
        float _1105;
        float _1106;
        float _1107;
        float _1108;
        bool _1109;
        bool _1110;
        bool _1111;
        precise float _1112;
        precise float _1113;
        precise float _1114;
        float _1115;
        float _1116;
        float _1117;
        precise float _1118;
        bool _1121;
        for (;;)
        {
            uint _1008 = _1004 & 255u;
            uint _1009 = _1008 * 24u;
            uvec3 _1018 = uvec3(texelFetch(g_forceParam, int(_1009)).x, texelFetch(g_forceParam, int(_1009 + 1u)).x, texelFetch(g_forceParam, int(_1009 + 2u)).x);
            uint _1023 = (_1008 * 24u) + 4u;
            vec4 _1036 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_1023)).x, texelFetch(g_forceParam, int(_1023 + 1u)).x, texelFetch(g_forceParam, int(_1023 + 2u)).x, texelFetch(g_forceParam, int(_1023 + 3u)).x));
            _1040 = _1036.w;
            uint _1042 = (_1008 * 24u) + 8u;
            vec4 _1055 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_1042)).x, texelFetch(g_forceParam, int(_1042 + 1u)).x, texelFetch(g_forceParam, int(_1042 + 2u)).x, texelFetch(g_forceParam, int(_1042 + 3u)).x));
            _1059 = _1055.w;
            uint _1061 = (_1008 * 24u) + 12u;
            _1072 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_1061)).x, texelFetch(g_forceParam, int(_1061 + 1u)).x, _1067, texelFetch(g_forceParam, int(_1061 + 3u)).x));
            _1073 = _1072.x;
            _1074 = _1072.w;
            uint _1076 = (_1008 * 24u) + 16u;
            vec3 _1086 = uintBitsToFloat(uvec3(texelFetch(g_forceParam, int(_1076)).x, texelFetch(g_forceParam, int(_1076 + 1u)).x, texelFetch(g_forceParam, int(_1076 + 2u)).x));
            _1087 = _1086.x;
            _1088 = _1086.y;
            _1089 = _1086.z;
            uint _1091 = (_1008 * 24u) + 20u;
            vec4 _1104 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_1091)).x, texelFetch(g_forceParam, int(_1091 + 1u)).x, texelFetch(g_forceParam, int(_1091 + 2u)).x, texelFetch(g_forceParam, int(_1091 + 3u)).x));
            _1105 = _1104.x;
            _1106 = _1104.y;
            _1107 = _1104.z;
            _1108 = _1104.w;
            _1109 = _1018.x == 1u;
            _1110 = _1018.y == 1u;
            _1111 = _1018.z == 1u;
            _1112 = _500 - _1036.x;
            _1113 = _507 - _1036.y;
            _1114 = _514 - _1036.z;
            _1115 = _1109 ? _1055.x : _1112;
            _1116 = _1109 ? _1055.y : _1113;
            _1117 = _1109 ? _1055.z : _1114;
            _1118 = dot(vec3(_1115, _1116, _1117), vec3(_1115, _1116, _1117));
            _1121 = _1118 > 0.0;
            float frontier_phi_10_pred;
            float frontier_phi_10_pred_1;
            float frontier_phi_10_pred_2;
            if (_1121)
            {
                precise float _1147 = _1112 * _1112;
                precise float _1148 = _1113 * _1113;
                precise float _1149 = _1147 + _1148;
                precise float _1150 = _1114 * _1114;
                precise float _1151 = _1150 + _1149;
                float _1152 = sqrt(_1151);
                float _1153 = inversesqrt(_1118);
                precise float _1154 = _1115 * _1153;
                precise float _1155 = _1116 * _1153;
                precise float _1156 = _1117 * _1153;
                precise float _1158 = _1152 / (isnan(0.001000000047497451305389404296875) ? _1072.y : (isnan(_1072.y) ? 0.001000000047497451305389404296875 : max(_1072.y, 0.001000000047497451305389404296875)));
                precise float _1159 = 1.0 - _1158;
                float _1513 = isnan(0.0) ? _1159 : (isnan(_1159) ? 0.0 : max(_1159, 0.0));
                float _1160 = isnan(1.0) ? _1513 : (isnan(_1513) ? 1.0 : min(_1513, 1.0));
                float _1202;
                if (_1111)
                {
                    float _1191 = inversesqrt(dot(vec3(_1112, _1113, _1114), vec3(_1112, _1113, _1114)));
                    precise float _1192 = _1112 * _1191;
                    precise float _1193 = _1113 * _1191;
                    precise float _1194 = _1114 * _1191;
                    precise float _1198 = dot(vec3(_1154, _1155, _1156), vec3(_1192, _1193, _1194)) * 0.800000011920928955078125;
                    precise float _1199 = _1198 + 0.20000000298023223876953125;
                    float _1524 = isnan(0.0) ? _1199 : (isnan(_1199) ? 0.0 : max(_1199, 0.0));
                    precise float _1201 = _1160 * (isnan(1.0) ? _1524 : (isnan(_1524) ? 1.0 : min(_1524, 1.0)));
                    _1202 = _1201;
                }
                else
                {
                    _1202 = _1160;
                }
                float frontier_phi_10_pred_15_ladder;
                float frontier_phi_10_pred_15_ladder_1;
                float frontier_phi_10_pred_15_ladder_2;
                if (_1202 > 0.0)
                {
                    bool _1233 = _1109 && (!_1111);
                    precise float _1235 = _1152 * (-4.0);
                    precise float _1238 = 6.283184051513671875 / (isnan(0.001000000047497451305389404296875) ? _1073 : (isnan(_1073) ? 0.001000000047497451305389404296875 : max(_1073, 0.001000000047497451305389404296875)));
                    precise float _1239 = cbMtdParam._m0[11u].y * _1238;
                    precise float _1240 = dot(vec2(_1154, _1156), vec2(_1112, _1114));
                    precise float _1243 = _1240 * _1239;
                    precise float _1244 = float(_1233) * _1243;
                    precise float _1245 = _689 * _1239;
                    precise float _1246 = _1245 - _1244;
                    precise float _1247 = (_1233 ? 0.0 : _1235) + _1246;
                    precise float _1249 = _1059 * sin(_1247);
                    precise float _1250 = _1155 * 0.0;
                    precise float _1251 = _1250 - _1156;
                    precise float _1252 = _1156 * 0.0;
                    precise float _1253 = _1154 * 0.0;
                    precise float _1254 = _1252 - _1253;
                    precise float _1255 = _1154 - _1250;
                    precise float _1256 = _1074 * _1249;
                    float _1257 = _1109 ? _1256 : 0.0;
                    float _1356;
                    if (_1110)
                    {
                        precise float _1318 = _1087 * 2.0;
                        precise float _1319 = _1106 + _1107;
                        precise float _1320 = _1108 + _1319;
                        precise float _1322 = 6.283184051513671875 / (isnan(0.001000000047497451305389404296875) ? _1087 : (isnan(_1087) ? 0.001000000047497451305389404296875 : max(_1087, 0.001000000047497451305389404296875)));
                        precise float _1323 = cbMtdParam._m0[11u].y * _1322;
                        precise float _1324 = _1105 * _1323;
                        precise float _1325 = (-0.0) - _1154;
                        precise float _1329 = dot(vec2(_1156, _1325), vec2(_1112, _1114)) / _1318;
                        precise float _1330 = (-0.0) - _1329;
                        float _1333 = fract(abs(_1329));
                        precise float _1334 = (-0.0) - _1333;
                        precise float _1336 = _1318 * ((_1329 >= _1330) ? _1333 : _1334);
                        precise float _1337 = _1336 * 6.283184051513671875;
                        precise float _1338 = _1337 / _1318;
                        precise float _1340 = (isnan(5.0) ? _1087 : (isnan(_1087) ? 5.0 : min(_1087, 5.0))) * sin(_1338);
                        precise float _1341 = _1240 + _1340;
                        precise float _1342 = _1087 * 0.25;
                        precise float _1343 = _689 * _1105;
                        precise float _1344 = _1343 - _1342;
                        precise float _1345 = _1344 - _1341;
                        precise float _1346 = _1105 * _1320;
                        precise float _1348 = _1345 / (isnan(0.001000000047497451305389404296875) ? _1346 : (isnan(_1346) ? 0.001000000047497451305389404296875 : max(_1346, 0.001000000047497451305389404296875)));
                        float _1349 = fract(_1348);
                        precise float _1351 = 1.0 - _1349;
                        float _1352 = (_1348 < 0.0) ? _1351 : _1349;
                        precise float _1353 = _1319 / _1320;
                        precise float _1354 = _1106 / _1320;
                        float _1389;
                        if (_1352 < _1354)
                        {
                            precise float _1374 = _1352 / _1354;
                            _1389 = _1374;
                        }
                        else
                        {
                            float frontier_phi_29_26_ladder;
                            if (_1352 < _1353)
                            {
                                precise float _1399 = _1352 - _1354;
                                precise float _1400 = _1353 - _1354;
                                precise float _1401 = _1399 / _1400;
                                precise float _1390 = 1.0 - _1401;
                                frontier_phi_29_26_ladder = _1390;
                            }
                            else
                            {
                                frontier_phi_29_26_ladder = 0.0;
                            }
                            _1389 = frontier_phi_29_26_ladder;
                        }
                        precise float _1391 = _1089 * _1389;
                        precise float _1392 = _1323 * _1240;
                        precise float _1393 = _689 * _1324;
                        precise float _1394 = _1393 - _1392;
                        precise float _1396 = _1088 + sin(_1394);
                        precise float _1398 = _1391 * abs(_1396);
                        precise float _1357 = _1398 + 0.0;
                        _1356 = _1357;
                    }
                    else
                    {
                        _1356 = 0.0;
                    }
                    precise float _1358 = _1040 + _1249;
                    precise float _1359 = _1358 + _1356;
                    precise float _1360 = _1154 * _1359;
                    precise float _1361 = _1155 * _1359;
                    precise float _1362 = _1156 * _1359;
                    precise float _1363 = _1251 * _1257;
                    precise float _1364 = _1254 * _1257;
                    precise float _1365 = _1255 * _1257;
                    precise float _1366 = _1363 + _1360;
                    precise float _1367 = _1364 + _1361;
                    precise float _1368 = _1365 + _1362;
                    precise float _1369 = _1202 * _1366;
                    precise float _1370 = _1202 * _1367;
                    precise float _1371 = _1202 * _1368;
                    precise float _1162 = _1369 * 0.0500000007450580596923828125;
                    precise float _1164 = _1370 * 0.0500000007450580596923828125;
                    precise float _1166 = _1371 * 0.0500000007450580596923828125;
                    frontier_phi_10_pred_15_ladder = _1162;
                    frontier_phi_10_pred_15_ladder_1 = _1164;
                    frontier_phi_10_pred_15_ladder_2 = _1166;
                }
                else
                {
                    frontier_phi_10_pred_15_ladder = 0.0;
                    frontier_phi_10_pred_15_ladder_1 = 0.0;
                    frontier_phi_10_pred_15_ladder_2 = 0.0;
                }
                frontier_phi_10_pred = frontier_phi_10_pred_15_ladder;
                frontier_phi_10_pred_1 = frontier_phi_10_pred_15_ladder_1;
                frontier_phi_10_pred_2 = frontier_phi_10_pred_15_ladder_2;
            }
            else
            {
                frontier_phi_10_pred = 0.0;
                frontier_phi_10_pred_1 = 0.0;
                frontier_phi_10_pred_2 = 0.0;
            }
            _1161 = frontier_phi_10_pred;
            _1163 = frontier_phi_10_pred_1;
            _1165 = frontier_phi_10_pred_2;
            _692 = _1001 + _1161;
            _694 = _1002 + _1163;
            _696 = _1003 + _1165;
            uint _1007 = _1006 + 1u;
            if (_1007 == _213)
            {
                break;
            }
            else
            {
                _1001 = _692;
                _1002 = _694;
                _1003 = _696;
                _1004 = (_1006 != 3u) ? (_1004 >> 8u) : _565;
                _1006 = _1007;
                continue;
            }
        }
        _691 = _692;
        _693 = _694;
        _695 = _696;
    }
    precise float _697 = _691 * _691;
    precise float _698 = _693 * _693;
    precise float _699 = _697 + _698;
    precise float _700 = _695 * _695;
    precise float _701 = _699 + _700;
    float _702 = sqrt(_701);
    bool _703 = _702 < 0.00011000000085914507508277893066406;
    float _707 = inversesqrt(dot(vec3(_691, _693, _695), vec3(_691, _693, _695)));
    precise float _708 = _691 * _707;
    precise float _709 = _693 * _707;
    precise float _710 = _695 * _707;
    precise float _711 = _610 * _710;
    precise float _712 = _615 * _709;
    precise float _713 = _711 - _712;
    precise float _714 = _615 * _708;
    precise float _715 = _605 * _710;
    precise float _716 = _714 - _715;
    precise float _717 = _605 * _709;
    precise float _718 = _610 * _708;
    precise float _719 = _717 - _718;
    float _723 = inversesqrt(dot(vec3(_713, _716, _719), vec3(_713, _716, _719)));
    precise float _724 = _723 * _713;
    precise float _725 = _723 * _716;
    precise float _726 = _723 * _719;
    precise float _727 = _702 + 1.0;
    precise float _729 = cbMtdParam._m0[10u].y * log2(_727);
    precise float _730 = _686 - _500;
    precise float _731 = _687 - _507;
    precise float _732 = _688 - _514;
    precise float _733 = dot(vec3(_724, _725, _726), vec3(_730, _731, _732));
    precise float _736 = _724 * _733;
    precise float _737 = _725 * _733;
    precise float _738 = _726 * _733;
    precise float _739 = _500 + _736;
    precise float _740 = _507 + _737;
    precise float _741 = _514 + _738;
    precise float _742 = _686 - _739;
    precise float _743 = _687 - _740;
    precise float _744 = _688 - _741;
    precise float _745 = _725 * _744;
    precise float _746 = _726 * _743;
    precise float _747 = _745 - _746;
    precise float _748 = _726 * _742;
    precise float _749 = _724 * _744;
    precise float _750 = _748 - _749;
    precise float _751 = _724 * _743;
    precise float _752 = _725 * _742;
    precise float _753 = _751 - _752;
    float _754 = sin(_729);
    float _755 = cos(_729);
    precise float _756 = _742 * _755;
    precise float _757 = _743 * _755;
    precise float _758 = _744 * _755;
    precise float _759 = _754 * _747;
    precise float _760 = _754 * _750;
    precise float _761 = _754 * _753;
    precise float _762 = _756 + _759;
    precise float _763 = _757 + _760;
    precise float _764 = _761 + _758;
    precise float _765 = _739 + _762;
    precise float _766 = _740 + _763;
    precise float _767 = _741 + _764;
    precise float _768 = _765 - _686;
    precise float _769 = _766 - _687;
    precise float _770 = _767 - _688;
    precise float _774 = _683 + (_703 ? 0.0 : _768);
    precise float _775 = _684 + (_703 ? 0.0 : _769);
    precise float _776 = _685 + (_703 ? 0.0 : _770);
    precise float _777 = _426 + _774;
    precise float _778 = _433 + _775;
    precise float _779 = _440 + _776;
    precise float _780 = _777 - cbSceneParam._m0[3u].x;
    precise float _781 = _778 - cbSceneParam._m0[3u].y;
    precise float _782 = _779 - cbSceneParam._m0[3u].z;
    precise float _810 = cbSceneParam._m0[24u].x * _780;
    precise float _811 = _781 * cbSceneParam._m0[24u].y;
    precise float _812 = _811 + _810;
    precise float _813 = _782 * cbSceneParam._m0[24u].z;
    precise float _814 = _813 + _812;
    precise float _815 = 1.0 * cbSceneParam._m0[24u].w;
    precise float _816 = _815 + _814;
    precise float _817 = cbSceneParam._m0[25u].x * _780;
    precise float _818 = _781 * cbSceneParam._m0[25u].y;
    precise float _819 = _818 + _817;
    precise float _820 = _782 * cbSceneParam._m0[25u].z;
    precise float _821 = _820 + _819;
    precise float _822 = 1.0 * cbSceneParam._m0[25u].w;
    precise float _823 = _822 + _821;
    precise float _824 = cbSceneParam._m0[26u].x * _780;
    precise float _825 = _781 * cbSceneParam._m0[26u].y;
    precise float _826 = _825 + _824;
    precise float _827 = _782 * cbSceneParam._m0[26u].z;
    precise float _828 = _827 + _826;
    precise float _829 = 1.0 * cbSceneParam._m0[26u].w;
    precise float _830 = _829 + _828;
    precise float _831 = cbSceneParam._m0[27u].x * _780;
    precise float _832 = _781 * cbSceneParam._m0[27u].y;
    precise float _833 = _832 + _831;
    precise float _834 = _782 * cbSceneParam._m0[27u].z;
    precise float _835 = _834 + _833;
    precise float _836 = 1.0 * cbSceneParam._m0[27u].w;
    precise float _837 = _836 + _835;
    gl_Position.x = _816;
    gl_Position.y = _823;
    gl_Position.z = _830;
    gl_Position.w = _837;
    NORMAL_1.x = fma(_187, _414, fma(_186, _411, _408 * _184));
    NORMAL_1.y = fma(_187, _415, fma(_186, _412, _409 * _184));
    NORMAL_1.z = fma(_187, _416, fma(_186, _413, _410 * _184));
    NORMAL_1.w = float(_227);
    TANGENT_1.x = fma(_198, _414, fma(_197, _411, _408 * _196));
    TANGENT_1.y = fma(_198, _415, fma(_197, _412, _409 * _196));
    TANGENT_1.z = fma(_198, _416, fma(_197, _413, _410 * _196));
    TANGENT_1.w = (float(TANGENT.w) + (-127.0)) * 0.0078740157186985015869140625;
    TEXCOORD_2 = ((float(int(uint(TEXCOORD.x))) * 0.00048828125) * cbTexScroll._m0[0u].x) + cbTexScroll._m0[0u].z;
    TEXCOORD_1_1 = ((float(int(uint(TEXCOORD.y))) * 0.00048828125) * cbTexScroll._m0[0u].y) + cbTexScroll._m0[0u].w;
    TEXCOORD_3.x = TEXCOORD_1.x;
    TEXCOORD_3.y = TEXCOORD_1.y;
    TEXCOORD_3.z = TEXCOORD_1.z;
    TEXCOORD_3.w = COLOR_1.x;
    TEXCOORD_11 = sqrt(((_446 * _446) + (_447 * _447)) + (_448 * _448));
    gl_ClipDistance[0u] = dot(vec4(_816, _823, _830, _837), vec4(cbSceneParam._m0[4u]));
    gl_ClipDistance[1u] = dot(vec4(_816, _823, _830, _837), vec4(cbInstanceData._m0[_239 + 3u]));
}


