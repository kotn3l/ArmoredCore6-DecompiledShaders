#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[10];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_A_M0_Alpha_snp_0_Texture2D_0;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_1;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _753;
float _2920;
float _2921;
float _2922;
float _2923;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _166 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _167 = _166 * NORMAL.x;
    float _168 = _166 * NORMAL.y;
    float _169 = _166 * NORMAL.z;
    float _174;
    float _175;
    float _176;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _174 = (-0.0) - _167;
        _175 = (-0.0) - _168;
        _176 = (-0.0) - _169;
    }
    else
    {
        _174 = _167;
        _175 = _168;
        _176 = _169;
    }
    vec4 _196 = texture(sampler2D(M_A_M0_Alpha_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[0u].w));
    float _202 = _196.w;
    float _203 = _196.x * cbMtdParam._m0[9u].x;
    float _204 = _196.y * cbMtdParam._m0[9u].y;
    float _205 = _196.z * cbMtdParam._m0[9u].z;
    float _206 = _202 * TEXCOORD_1.z;
    float _210 = inversesqrt(dot(vec3(_174, _175, _176), vec3(_174, _175, _176)));
    float _211 = _210 * _174;
    float _212 = _210 * _175;
    float _213 = _210 * _176;
    float _2932 = isnan(0.0) ? _206 : (isnan(_206) ? 0.0 : max(_206, 0.0));
    float _215 = isnan(1.0) ? _2932 : (isnan(_2932) ? 1.0 : min(_2932, 1.0));
    float _2943 = isnan(0.0) ? _203 : (isnan(_203) ? 0.0 : max(_203, 0.0));
    float _2954 = isnan(0.0) ? _204 : (isnan(_204) ? 0.0 : max(_204, 0.0));
    float _2965 = isnan(0.0) ? _205 : (isnan(_205) ? 0.0 : max(_205, 0.0));
    float _234 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _276 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _286 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _276);
    float _287 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _276);
    float _288 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _276);
    float _292 = inversesqrt(dot(vec3(_286, _287, _288), vec3(_286, _287, _288)));
    float _293 = _286 * _292;
    float _294 = _287 * _292;
    float _295 = _288 * _292;
    vec4 _300 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _302 = _300.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _432 = sqrt(((_286 * _286) + (_287 * _287)) + (_288 * _288));
        float _438 = (cbMatDynParam._m0[5u].x * _432) + cbMatDynParam._m0[5u].y;
        float _2976 = isnan(0.0) ? _438 : (isnan(_438) ? 0.0 : max(_438, 0.0));
        float _439 = isnan(1.0) ? _2976 : (isnan(_2976) ? 1.0 : min(_2976, 1.0));
        float _443 = (cbMatDynParam._m0[5u].z * _432) + cbMatDynParam._m0[5u].w;
        float _2987 = isnan(0.0) ? _443 : (isnan(_443) ? 0.0 : max(_443, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _2987 : (isnan(_2987) ? 1.0 : min(_2987, 1.0))) - _439)) + _439) < ((_302 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _314 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _315 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _335 = fma(_213, cbSceneParam._m0[5u].z, fma(_212, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _211));
    float _338 = fma(_213, cbSceneParam._m0[6u].z, fma(_212, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _211));
    float _341 = fma(_213, cbSceneParam._m0[7u].z, fma(_212, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _211));
    uint _354 = uint(roundEven(NORMAL.w)) * 13u;
    uint _356 = _354 + 9u;
    uint _357 = _356 + uint(cbMatDynParam._m0[0u].w);
    float _363 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _2943 : (isnan(_2943) ? 1.0 : min(_2943, 1.0)))) * cbInstanceData._m0[_357].x;
    float _364 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _2954 : (isnan(_2954) ? 1.0 : min(_2954, 1.0)))) * cbInstanceData._m0[_357].y;
    float _365 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _2965 : (isnan(_2965) ? 1.0 : min(_2965, 1.0)))) * cbInstanceData._m0[_357].z;
    float _2998 = isnan(0.0) ? _363 : (isnan(_363) ? 0.0 : max(_363, 0.0));
    float _366 = isnan(1.0) ? _2998 : (isnan(_2998) ? 1.0 : min(_2998, 1.0));
    float _3009 = isnan(0.0) ? _364 : (isnan(_364) ? 0.0 : max(_364, 0.0));
    float _367 = isnan(1.0) ? _3009 : (isnan(_3009) ? 1.0 : min(_3009, 1.0));
    float _3020 = isnan(0.0) ? _365 : (isnan(_365) ? 0.0 : max(_365, 0.0));
    float _368 = isnan(1.0) ? _3020 : (isnan(_3020) ? 1.0 : min(_3020, 1.0));
    vec4 _377 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _314, cbSceneParam._m0[86u].y * _315));
    float _380 = _377.x * TEXCOORD_1.w;
    float _381 = dot(vec3(_211, _212, _213), vec3(_293, _294, _295));
    float _384 = _381 * 2.0;
    float _389 = (_384 * _211) - _293;
    float _390 = (_384 * _212) - _294;
    float _391 = (_384 * _213) - _295;
    float _413 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _417 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _421 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _752;
    float _754;
    float _755;
    float _756;
    float _757;
    float _758;
    float _759;
    float _760;
    float _761;
    float _762;
    float _763;
    float _764;
    float _765;
    float _766;
    float _767;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _477 = fma(_421, cbModelParam._m0[26u].z, fma(_417, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _413));
        float _481 = fma(_421, cbModelParam._m0[27u].z, fma(_417, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _413));
        float _485 = fma(_421, cbModelParam._m0[28u].z, fma(_417, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _413));
        float _510 = _413 + _211;
        float _511 = _417 + _212;
        float _512 = _421 + _213;
        float _522 = fma(_512, cbModelParam._m0[26u].z, fma(_511, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _510)) - _477;
        float _523 = fma(_512, cbModelParam._m0[27u].z, fma(_511, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _510)) - _481;
        float _524 = fma(_512, cbModelParam._m0[28u].z, fma(_511, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _510)) - _485;
        float _528 = inversesqrt(dot(vec3(_522, _523, _524), vec3(_522, _523, _524)));
        float _541 = ((_528 * _522) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_477 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _542 = ((_528 * _523) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_481 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _543 = ((_528 * _524) / cbModelParam._m0[34u].z) + ((((((_485 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _546 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_541, _542, _543), 0.0);
        vec4 _553 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_541, _542, _543), 0.0);
        vec4 _560 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_541, _542, _543), 0.0);
        vec4 _567 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_541, _542, _543), 0.0);
        float _580 = exp2((_546.w + (-0.5)) * 20.0) * 2.0;
        float _581 = _580 * (_546.x + (-0.5));
        float _582 = _580 * (_546.y + (-0.5));
        float _583 = _580 * (_546.z + (-0.5));
        float _590 = exp2((_553.w + (-0.5)) * 20.0) * 2.0;
        float _591 = _590 * (_553.x + (-0.5));
        float _592 = _590 * (_553.y + (-0.5));
        float _593 = _590 * (_553.z + (-0.5));
        float _600 = exp2((_560.w + (-0.5)) * 20.0) * 2.0;
        float _601 = _600 * (_560.x + (-0.5));
        float _602 = _600 * (_560.y + (-0.5));
        float _603 = _600 * (_560.z + (-0.5));
        float _610 = exp2((_567.w + (-0.5)) * 20.0) * 2.0;
        float _611 = _610 * (_567.x + (-0.5));
        float _612 = _610 * (_567.y + (-0.5));
        float _613 = _610 * (_567.z + (-0.5));
        float _614 = isnan(0.0) ? _611 : (isnan(_611) ? 0.0 : max(_611, 0.0));
        float _615 = isnan(0.0) ? _612 : (isnan(_612) ? 0.0 : max(_612, 0.0));
        float _616 = isnan(0.0) ? _613 : (isnan(_613) ? 0.0 : max(_613, 0.0));
        float _617 = _581 * 0.5;
        float _618 = _591 * 0.5;
        float _619 = _601 * 0.5;
        float _620 = dot(vec3(_617, _618, _619), vec3(_617, _618, _619));
        float _625 = (_620 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_620);
        float _634 = (dot(vec3(_211, _212, _213), vec3(_625 * _617, _625 * _618, _625 * _619)) + 1.0) * 0.5;
        float _3046 = isnan(0.0) ? _634 : (isnan(_634) ? 0.0 : max(_634, 0.0));
        float _644 = sqrt(((_618 * _618) + (_617 * _617)) + (_619 * _619)) / (_614 + 9.9999997473787516355514526367188e-06);
        float _3057 = isnan(0.0) ? _644 : (isnan(_644) ? 0.0 : max(_644, 0.0));
        float _645 = isnan(1.0) ? _3057 : (isnan(_3057) ? 1.0 : min(_3057, 1.0));
        float _646 = _645 * 2.0;
        float _650 = (1.0 - _645) / (_645 + 1.0);
        float _3068 = isnan(0.0) ? _650 : (isnan(_650) ? 0.0 : max(_650, 0.0));
        float _651 = isnan(1.0) ? _3068 : (isnan(_3068) ? 1.0 : min(_3068, 1.0));
        float _660 = ((((1.0 - _651) * (_646 + 2.0)) * exp2(log2(isnan(1.0) ? _3046 : (isnan(_3046) ? 1.0 : min(_3046, 1.0))) * (_646 + 1.0))) + _651) * _614;
        float _661 = _582 * 0.5;
        float _662 = _592 * 0.5;
        float _663 = _602 * 0.5;
        float _664 = dot(vec3(_661, _662, _663), vec3(_661, _662, _663));
        float _669 = (_664 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_664);
        float _677 = (dot(vec3(_211, _212, _213), vec3(_669 * _661, _669 * _662, _669 * _663)) + 1.0) * 0.5;
        float _3079 = isnan(0.0) ? _677 : (isnan(_677) ? 0.0 : max(_677, 0.0));
        float _686 = sqrt(((_662 * _662) + (_661 * _661)) + (_663 * _663)) / (_615 + 9.9999997473787516355514526367188e-06);
        float _3090 = isnan(0.0) ? _686 : (isnan(_686) ? 0.0 : max(_686, 0.0));
        float _687 = isnan(1.0) ? _3090 : (isnan(_3090) ? 1.0 : min(_3090, 1.0));
        float _688 = _687 * 2.0;
        float _692 = (1.0 - _687) / (_687 + 1.0);
        float _3101 = isnan(0.0) ? _692 : (isnan(_692) ? 0.0 : max(_692, 0.0));
        float _693 = isnan(1.0) ? _3101 : (isnan(_3101) ? 1.0 : min(_3101, 1.0));
        float _702 = ((((1.0 - _693) * (_688 + 2.0)) * exp2(log2(isnan(1.0) ? _3079 : (isnan(_3079) ? 1.0 : min(_3079, 1.0))) * (_688 + 1.0))) + _693) * _615;
        float _703 = _583 * 0.5;
        float _704 = _593 * 0.5;
        float _705 = _603 * 0.5;
        float _706 = dot(vec3(_703, _704, _705), vec3(_703, _704, _705));
        float _711 = (_706 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_706);
        float _719 = (dot(vec3(_211, _212, _213), vec3(_711 * _703, _711 * _704, _711 * _705)) + 1.0) * 0.5;
        float _3112 = isnan(0.0) ? _719 : (isnan(_719) ? 0.0 : max(_719, 0.0));
        float _728 = sqrt(((_704 * _704) + (_703 * _703)) + (_705 * _705)) / (_616 + 9.9999997473787516355514526367188e-06);
        float _3123 = isnan(0.0) ? _728 : (isnan(_728) ? 0.0 : max(_728, 0.0));
        float _729 = isnan(1.0) ? _3123 : (isnan(_3123) ? 1.0 : min(_3123, 1.0));
        float _730 = _729 * 2.0;
        float _734 = (1.0 - _729) / (_729 + 1.0);
        float _3134 = isnan(0.0) ? _734 : (isnan(_734) ? 0.0 : max(_734, 0.0));
        float _735 = isnan(1.0) ? _3134 : (isnan(_3134) ? 1.0 : min(_3134, 1.0));
        float _744 = ((((1.0 - _735) * (_730 + 2.0)) * exp2(log2(isnan(1.0) ? _3112 : (isnan(_3112) ? 1.0 : min(_3112, 1.0))) * (_730 + 1.0))) + _735) * _616;
        _752 = _583;
        _754 = _582;
        _755 = _581;
        _756 = _593;
        _757 = _592;
        _758 = _591;
        _759 = _603;
        _760 = _602;
        _761 = _601;
        _762 = _616;
        _763 = _615;
        _764 = _614;
        _765 = cbModelParam._m0[36u].z * (isnan(0.0) ? _660 : (isnan(_660) ? 0.0 : max(_660, 0.0)));
        _766 = cbModelParam._m0[36u].z * (isnan(0.0) ? _702 : (isnan(_702) ? 0.0 : max(_702, 0.0)));
        _767 = cbModelParam._m0[36u].z * (isnan(0.0) ? _744 : (isnan(_744) ? 0.0 : max(_744, 0.0)));
    }
    else
    {
        _752 = _753;
        _754 = _753;
        _755 = _753;
        _756 = _753;
        _757 = _753;
        _758 = _753;
        _759 = _753;
        _760 = _753;
        _761 = _753;
        _762 = _753;
        _763 = _753;
        _764 = _753;
        _765 = 0.0;
        _766 = 0.0;
        _767 = 0.0;
    }
    float _1065;
    float _1066;
    float _1067;
    float _1068;
    float _1069;
    float _1070;
    float _1071;
    float _1072;
    float _1073;
    float _1074;
    float _1075;
    float _1076;
    float _1077;
    float _1078;
    float _1079;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _796 = fma(_421, cbModelParam._m0[30u].z, fma(_417, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _413));
        float _800 = fma(_421, cbModelParam._m0[31u].z, fma(_417, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _413));
        float _804 = fma(_421, cbModelParam._m0[32u].z, fma(_417, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _413));
        float _827 = _413 + _211;
        float _828 = _417 + _212;
        float _829 = _421 + _213;
        float _839 = fma(_829, cbModelParam._m0[30u].z, fma(_828, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _827)) - _796;
        float _840 = fma(_829, cbModelParam._m0[31u].z, fma(_828, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _827)) - _800;
        float _841 = fma(_829, cbModelParam._m0[32u].z, fma(_828, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _827)) - _804;
        float _845 = inversesqrt(dot(vec3(_839, _840, _841), vec3(_839, _840, _841)));
        float _858 = ((_845 * _839) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_796 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _859 = ((_845 * _840) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_800 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _860 = ((_845 * _841) / cbModelParam._m0[35u].z) + ((((((_804 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _862 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_858, _859, _860), 0.0);
        vec4 _869 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_858, _859, _860), 0.0);
        vec4 _876 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_858, _859, _860), 0.0);
        vec4 _883 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_858, _859, _860), 0.0);
        float _895 = exp2((_862.w + (-0.5)) * 20.0) * 2.0;
        float _896 = _895 * (_862.x + (-0.5));
        float _897 = _895 * (_862.y + (-0.5));
        float _898 = _895 * (_862.z + (-0.5));
        float _905 = exp2((_869.w + (-0.5)) * 20.0) * 2.0;
        float _906 = _905 * (_869.x + (-0.5));
        float _907 = _905 * (_869.y + (-0.5));
        float _908 = _905 * (_869.z + (-0.5));
        float _915 = exp2((_876.w + (-0.5)) * 20.0) * 2.0;
        float _916 = _915 * (_876.x + (-0.5));
        float _917 = _915 * (_876.y + (-0.5));
        float _918 = _915 * (_876.z + (-0.5));
        float _925 = exp2((_883.w + (-0.5)) * 20.0) * 2.0;
        float _926 = _925 * (_883.x + (-0.5));
        float _927 = _925 * (_883.y + (-0.5));
        float _928 = _925 * (_883.z + (-0.5));
        float _929 = isnan(0.0) ? _926 : (isnan(_926) ? 0.0 : max(_926, 0.0));
        float _930 = isnan(0.0) ? _927 : (isnan(_927) ? 0.0 : max(_927, 0.0));
        float _931 = isnan(0.0) ? _928 : (isnan(_928) ? 0.0 : max(_928, 0.0));
        float _932 = _896 * 0.5;
        float _933 = _906 * 0.5;
        float _934 = _916 * 0.5;
        float _935 = dot(vec3(_932, _933, _934), vec3(_932, _933, _934));
        float _940 = (_935 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_935);
        float _948 = (dot(vec3(_211, _212, _213), vec3(_940 * _932, _940 * _933, _940 * _934)) + 1.0) * 0.5;
        float _3175 = isnan(0.0) ? _948 : (isnan(_948) ? 0.0 : max(_948, 0.0));
        float _957 = sqrt(((_933 * _933) + (_932 * _932)) + (_934 * _934)) / (_929 + 9.9999997473787516355514526367188e-06);
        float _3186 = isnan(0.0) ? _957 : (isnan(_957) ? 0.0 : max(_957, 0.0));
        float _958 = isnan(1.0) ? _3186 : (isnan(_3186) ? 1.0 : min(_3186, 1.0));
        float _959 = _958 * 2.0;
        float _963 = (1.0 - _958) / (_958 + 1.0);
        float _3197 = isnan(0.0) ? _963 : (isnan(_963) ? 0.0 : max(_963, 0.0));
        float _964 = isnan(1.0) ? _3197 : (isnan(_3197) ? 1.0 : min(_3197, 1.0));
        float _973 = ((((1.0 - _964) * (_959 + 2.0)) * exp2(log2(isnan(1.0) ? _3175 : (isnan(_3175) ? 1.0 : min(_3175, 1.0))) * (_959 + 1.0))) + _964) * _929;
        float _974 = _897 * 0.5;
        float _975 = _907 * 0.5;
        float _976 = _917 * 0.5;
        float _977 = dot(vec3(_974, _975, _976), vec3(_974, _975, _976));
        float _982 = (_977 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_977);
        float _990 = (dot(vec3(_211, _212, _213), vec3(_982 * _974, _982 * _975, _982 * _976)) + 1.0) * 0.5;
        float _3208 = isnan(0.0) ? _990 : (isnan(_990) ? 0.0 : max(_990, 0.0));
        float _999 = sqrt(((_975 * _975) + (_974 * _974)) + (_976 * _976)) / (_930 + 9.9999997473787516355514526367188e-06);
        float _3219 = isnan(0.0) ? _999 : (isnan(_999) ? 0.0 : max(_999, 0.0));
        float _1000 = isnan(1.0) ? _3219 : (isnan(_3219) ? 1.0 : min(_3219, 1.0));
        float _1001 = _1000 * 2.0;
        float _1005 = (1.0 - _1000) / (_1000 + 1.0);
        float _3230 = isnan(0.0) ? _1005 : (isnan(_1005) ? 0.0 : max(_1005, 0.0));
        float _1006 = isnan(1.0) ? _3230 : (isnan(_3230) ? 1.0 : min(_3230, 1.0));
        float _1015 = ((((1.0 - _1006) * (_1001 + 2.0)) * exp2(log2(isnan(1.0) ? _3208 : (isnan(_3208) ? 1.0 : min(_3208, 1.0))) * (_1001 + 1.0))) + _1006) * _930;
        float _1016 = _898 * 0.5;
        float _1017 = _908 * 0.5;
        float _1018 = _918 * 0.5;
        float _1019 = dot(vec3(_1016, _1017, _1018), vec3(_1016, _1017, _1018));
        float _1024 = (_1019 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1019);
        float _1032 = (dot(vec3(_211, _212, _213), vec3(_1024 * _1016, _1024 * _1017, _1024 * _1018)) + 1.0) * 0.5;
        float _3241 = isnan(0.0) ? _1032 : (isnan(_1032) ? 0.0 : max(_1032, 0.0));
        float _1041 = sqrt(((_1017 * _1017) + (_1016 * _1016)) + (_1018 * _1018)) / (_931 + 9.9999997473787516355514526367188e-06);
        float _3252 = isnan(0.0) ? _1041 : (isnan(_1041) ? 0.0 : max(_1041, 0.0));
        float _1042 = isnan(1.0) ? _3252 : (isnan(_3252) ? 1.0 : min(_3252, 1.0));
        float _1043 = _1042 * 2.0;
        float _1047 = (1.0 - _1042) / (_1042 + 1.0);
        float _3263 = isnan(0.0) ? _1047 : (isnan(_1047) ? 0.0 : max(_1047, 0.0));
        float _1048 = isnan(1.0) ? _3263 : (isnan(_3263) ? 1.0 : min(_3263, 1.0));
        float _1057 = ((((1.0 - _1048) * (_1043 + 2.0)) * exp2(log2(isnan(1.0) ? _3241 : (isnan(_3241) ? 1.0 : min(_3241, 1.0))) * (_1043 + 1.0))) + _1048) * _931;
        _1065 = _898;
        _1066 = _897;
        _1067 = _896;
        _1068 = _908;
        _1069 = _907;
        _1070 = _906;
        _1071 = _918;
        _1072 = _917;
        _1073 = _916;
        _1074 = _931;
        _1075 = _930;
        _1076 = _929;
        _1077 = cbModelParam._m0[36u].w * (isnan(0.0) ? _973 : (isnan(_973) ? 0.0 : max(_973, 0.0)));
        _1078 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1015 : (isnan(_1015) ? 0.0 : max(_1015, 0.0)));
        _1079 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1057 : (isnan(_1057) ? 0.0 : max(_1057, 0.0)));
    }
    else
    {
        _1065 = _753;
        _1066 = _753;
        _1067 = _753;
        _1068 = _753;
        _1069 = _753;
        _1070 = _753;
        _1071 = _753;
        _1072 = _753;
        _1073 = _753;
        _1074 = _753;
        _1075 = _753;
        _1076 = _753;
        _1077 = 0.0;
        _1078 = 0.0;
        _1079 = 0.0;
    }
    float _1089 = (cbModelParam._m0[1u].x * (_1077 - _765)) + _765;
    float _1090 = (cbModelParam._m0[1u].x * (_1078 - _766)) + _766;
    float _1091 = (cbModelParam._m0[1u].x * (_1079 - _767)) + _767;
    float _1112 = fma(_1091, cbSceneParam._m0[89u].z, fma(_1090, cbSceneParam._m0[89u].y, _1089 * cbSceneParam._m0[89u].x));
    float _1115 = fma(_1091, cbSceneParam._m0[90u].z, fma(_1090, cbSceneParam._m0[90u].y, _1089 * cbSceneParam._m0[90u].x));
    float _1118 = fma(_1091, cbSceneParam._m0[91u].z, fma(_1090, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1089));
    float _1133 = _389 * 0.5;
    float _1134 = _390 * 0.5;
    float _1135 = _391 * 0.5;
    float _1136 = dot(vec4(_1133, _1134, _1135, 1.0), vec4(_1067, _1070, _1073, _1076));
    float _1139 = dot(vec4(_1133, _1134, _1135, 1.0), vec4(_1066, _1069, _1072, _1075));
    float _1142 = dot(vec4(_1133, _1134, _1135, 1.0), vec4(_1065, _1068, _1071, _1074));
    float _1176;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1149 = dot(vec4(_1133, _1134, _1135, 1.0), vec4(_752, _756, _759, _762));
        float _1153 = dot(vec4(_1133, _1134, _1135, 1.0), vec4(_754, _757, _760, _763));
        float _1157 = dot(vec4(_1133, _1134, _1135, 1.0), vec4(_755, _758, _761, _764));
        float _1164 = dot(vec4(cbModelParam._m0[39u]), vec4(_1133, _1134, _1135, 1.0));
        _1176 = dot(vec3(isnan(0.0) ? _1157 : (isnan(_1157) ? 0.0 : max(_1157, 0.0)), isnan(0.0) ? _1153 : (isnan(_1153) ? 0.0 : max(_1153, 0.0)), isnan(0.0) ? _1149 : (isnan(_1149) ? 0.0 : max(_1149, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1164) ? 0.0 : (isnan(0.0) ? _1164 : max(0.0, _1164))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1176 = 1.0;
    }
    float _1187;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1178 = dot(vec4(cbModelParam._m0[40u]), vec4(_1133, _1134, _1135, 1.0));
        _1187 = dot(vec3(isnan(0.0) ? _1136 : (isnan(_1136) ? 0.0 : max(_1136, 0.0)), isnan(0.0) ? _1139 : (isnan(_1139) ? 0.0 : max(_1139, 0.0)), isnan(0.0) ? _1142 : (isnan(_1142) ? 0.0 : max(_1142, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1178) ? 0.0 : (isnan(0.0) ? _1178 : max(0.0, _1178))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1187 = 1.0;
    }
    float _1191 = (_1187 * cbModelParam._m0[1u].x) + (_1176 * (1.0 - cbModelParam._m0[1u].x));
    float _1200 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1282;
    float _1284;
    float _1286;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1249 = fma(_421, cbModelParam._m0[13u].z, fma(_417, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _413)) + cbModelParam._m0[13u].w;
        float _1253 = fma(_421, cbModelParam._m0[14u].z, fma(_417, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _413)) + cbModelParam._m0[14u].w;
        float _1257 = fma(_421, cbModelParam._m0[15u].z, fma(_417, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _413)) + cbModelParam._m0[15u].w;
        float _1260 = fma(_391, cbModelParam._m0[13u].z, fma(_390, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _389));
        float _1263 = fma(_391, cbModelParam._m0[14u].z, fma(_390, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _389));
        float _1266 = fma(_391, cbModelParam._m0[15u].z, fma(_390, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _389));
        float _1292;
        if (_1260 > 0.0)
        {
            _1292 = abs((1.0 - _1249) / _1260);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1260 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1249 + 1.0) / _1260);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1292 = frontier_phi_19_17_ladder;
        }
        float _1500;
        if (_1263 > 0.0)
        {
            _1500 = abs((1.0 - _1253) / _1263);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1263 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1253 + 1.0) / _1263);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1500 = frontier_phi_28_24_ladder;
        }
        float _1689;
        if (_1266 > 0.0)
        {
            _1689 = abs((1.0 - _1257) / _1266);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1266 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1257 + 1.0) / _1266);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1689 = frontier_phi_40_35_ladder;
        }
        float _1691 = isnan(_1500) ? _1292 : (isnan(_1292) ? _1500 : min(_1292, _1500));
        float _1692 = isnan(_1689) ? _1691 : (isnan(_1691) ? _1689 : min(_1691, _1689));
        float _1696 = (_1692 * _1260) + _1249;
        float _1697 = (_1692 * _1263) + _1253;
        float _1698 = (_1692 * _1266) + _1257;
        float _1699 = _1692 * 9.9999997473787516355514526367188e-05;
        float _1701 = (-1.0) - _1699;
        float _1703 = _1699 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_1698 > _1703) || ((_1698 < _1701) || ((_1697 > _1703) || ((_1697 < _1701) || ((_1696 < _1701) || (_1696 > _1703))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1795 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1698, cbModelParam._m0[9u].z, fma(_1697, cbModelParam._m0[9u].y, _1696 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1698, cbModelParam._m0[10u].z, fma(_1697, cbModelParam._m0[10u].y, _1696 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1698, cbModelParam._m0[11u].z, fma(_1697, cbModelParam._m0[11u].y, _1696 * cbModelParam._m0[11u].x))), _1200);
            frontier_phi_18_40_ladder = _1795.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _1795.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _1795.x * cbModelParam._m0[1u].y;
        }
        _1282 = frontier_phi_18_40_ladder_2;
        _1284 = frontier_phi_18_40_ladder_1;
        _1286 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1270 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_389, _390, _391), _1200);
        _1282 = _1270.x * cbModelParam._m0[1u].y;
        _1284 = _1270.y * cbModelParam._m0[1u].y;
        _1286 = _1270.z * cbModelParam._m0[1u].y;
    }
    float _1289 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1382;
    float _1384;
    float _1386;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1346 = fma(_421, cbModelParam._m0[21u].z, fma(_417, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _413)) + cbModelParam._m0[21u].w;
        float _1350 = fma(_421, cbModelParam._m0[22u].z, fma(_417, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _413)) + cbModelParam._m0[22u].w;
        float _1354 = fma(_421, cbModelParam._m0[23u].z, fma(_417, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _413)) + cbModelParam._m0[23u].w;
        float _1357 = fma(_391, cbModelParam._m0[21u].z, fma(_390, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _389));
        float _1360 = fma(_391, cbModelParam._m0[22u].z, fma(_390, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _389));
        float _1363 = fma(_391, cbModelParam._m0[23u].z, fma(_390, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _389));
        float _1505;
        if (_1357 > 0.0)
        {
            _1505 = abs((1.0 - _1346) / _1357);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1357 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1346 + 1.0) / _1357);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1505 = frontier_phi_30_26_ladder;
        }
        float _1716;
        if (_1360 > 0.0)
        {
            _1716 = abs((1.0 - _1350) / _1360);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1360 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1350 + 1.0) / _1360);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _1716 = frontier_phi_42_37_ladder;
        }
        float _1867;
        if (_1363 > 0.0)
        {
            _1867 = abs((1.0 - _1354) / _1363);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1363 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1354 + 1.0) / _1363);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _1867 = frontier_phi_51_48_ladder;
        }
        float _1869 = isnan(_1716) ? _1505 : (isnan(_1505) ? _1716 : min(_1505, _1716));
        float _1870 = isnan(_1867) ? _1869 : (isnan(_1869) ? _1867 : min(_1869, _1867));
        float _1874 = (_1870 * _1357) + _1346;
        float _1875 = (_1870 * _1360) + _1350;
        float _1876 = (_1870 * _1363) + _1354;
        float _1877 = _1870 * 9.9999997473787516355514526367188e-05;
        float _1878 = (-1.0) - _1877;
        float _1880 = _1877 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_1876 > _1880) || ((_1876 < _1878) || ((_1875 > _1880) || ((_1875 < _1878) || ((_1874 < _1878) || (_1874 > _1880))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2076 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_1876, cbModelParam._m0[17u].z, fma(_1875, cbModelParam._m0[17u].y, _1874 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_1876, cbModelParam._m0[18u].z, fma(_1875, cbModelParam._m0[18u].y, _1874 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_1876, cbModelParam._m0[19u].z, fma(_1875, cbModelParam._m0[19u].y, _1874 * cbModelParam._m0[19u].x))), _1289);
            frontier_phi_27_51_ladder = _2076.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2076.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2076.x * cbModelParam._m0[1u].z;
        }
        _1382 = frontier_phi_27_51_ladder_2;
        _1384 = frontier_phi_27_51_ladder_1;
        _1386 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1366 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_389, _390, _391), _1289);
        _1382 = _1366.x * cbModelParam._m0[1u].z;
        _1384 = _1366.y * cbModelParam._m0[1u].z;
        _1386 = _1366.z * cbModelParam._m0[1u].z;
    }
    float _1398 = _380 * 0.01200000010430812835693359375;
    float _1400 = _1398 * ((cbModelParam._m0[1u].w * (_1382 - _1282)) + _1282);
    float _1401 = _1398 * ((cbModelParam._m0[1u].w * (_1384 - _1284)) + _1284);
    float _1402 = _1398 * ((cbModelParam._m0[1u].w * (_1386 - _1286)) + _1286);
    float _1405 = fma(_1402, cbSceneParam._m0[89u].z, fma(_1401, cbSceneParam._m0[89u].y, _1400 * cbSceneParam._m0[89u].x));
    float _1408 = fma(_1402, cbSceneParam._m0[90u].z, fma(_1401, cbSceneParam._m0[90u].y, _1400 * cbSceneParam._m0[90u].x));
    float _1411 = fma(_1402, cbSceneParam._m0[91u].z, fma(_1401, cbSceneParam._m0[91u].y, _1400 * cbSceneParam._m0[91u].x));
    uvec4 _1421 = floatBitsToUint(cbInstanceData._m0[_354 + 5u]);
    uint _1423 = _1421.x * 14u;
    uint _1424 = _1423 + 13u;
    float _1431 = _380 + (-1.0);
    float _1437 = (cbLight._m0[_1424].x * _1431) + 1.0;
    float _1438 = (cbLight._m0[_1424].y * _1431) + 1.0;
    float _1439 = (cbLight._m0[_1424].z * _1431) + 1.0;
    float _1440 = (cbLight._m0[_1424].w * _1431) + 1.0;
    uint _1441 = _1423 + 5u;
    float _1447 = isnan(1.0) ? _1438 : (isnan(_1438) ? 1.0 : min(_1438, 1.0));
    uint _1451 = _1423 + 4u;
    float _1458 = isnan(1.0) ? _1437 : (isnan(_1437) ? 1.0 : min(_1437, 1.0));
    uint _1462 = _1423 | 1u;
    float _1473 = dot(vec3(cbLight._m0[_1423].xyz), vec3(_211, _212, _213));
    float _1476 = dot(vec3(cbLight._m0[_1462].xyz), vec3(_211, _212, _213));
    float _3399 = isnan(0.0) ? _1473 : (isnan(_1473) ? 0.0 : max(_1473, 0.0));
    float _3410 = isnan(0.0) ? _1476 : (isnan(_1476) ? 0.0 : max(_1476, 0.0));
    float _1481 = (isnan(1.0) ? _3399 : (isnan(_3399) ? 1.0 : min(_3399, 1.0))) * 0.3183098733425140380859375;
    float _1483 = (isnan(1.0) ? _3410 : (isnan(_3410) ? 1.0 : min(_3410, 1.0))) * 0.3183098733425140380859375;
    float _1490 = ((cbLight._m0[_1441].x * _1447) * _1483) + ((cbLight._m0[_1451].x * _1458) * _1481);
    float _1491 = ((_1447 * cbLight._m0[_1441].y) * _1483) + ((_1458 * cbLight._m0[_1451].y) * _1481);
    float _1492 = ((_1447 * cbLight._m0[_1441].z) * _1483) + ((_1458 * cbLight._m0[_1451].z) * _1481);
    uvec4 _1497 = floatBitsToUint(cbLight._m0[_1423 + 12u]);
    bool _1499 = _1497.x == 0u;
    float _1510;
    float _1512;
    float _1514;
    if (_1499)
    {
        _1510 = _1490;
        _1512 = _1491;
        _1514 = _1492;
    }
    else
    {
        uint _1518 = _1423 + 6u;
        float _1534 = (dot(vec3(cbLight._m0[_1423 + 2u].xyz), vec3(_211, _212, _213)) * 0.5) + 0.5;
        float _1535 = _1534 * _1534;
        float _3421 = isnan(0.0) ? _1535 : (isnan(_1535) ? 0.0 : max(_1535, 0.0));
        float _1536 = isnan(1.0) ? _3421 : (isnan(_3421) ? 1.0 : min(_3421, 1.0));
        float _1537 = isnan(1.0) ? _1439 : (isnan(_1439) ? 1.0 : min(_1439, 1.0));
        _1510 = (((cbLight._m0[_1518].x * 0.3183098733425140380859375) * _1536) * _1537) + _1490;
        _1512 = (((cbLight._m0[_1518].y * 0.3183098733425140380859375) * _1536) * _1537) + _1491;
        _1514 = (((cbLight._m0[_1518].z * 0.3183098733425140380859375) * _1536) * _1537) + _1492;
    }
    bool _1517 = _1497.y == 0u;
    float _1555;
    float _1557;
    float _1559;
    if (_1517)
    {
        _1555 = _1510;
        _1557 = _1512;
        _1559 = _1514;
    }
    else
    {
        uint _1660 = _1423 + 7u;
        float _1676 = (dot(vec3(cbLight._m0[_1423 + 3u].xyz), vec3(_211, _212, _213)) * 0.5) + 0.5;
        float _1677 = _1676 * _1676;
        float _3437 = isnan(0.0) ? _1677 : (isnan(_1677) ? 0.0 : max(_1677, 0.0));
        float _1678 = isnan(1.0) ? _3437 : (isnan(_3437) ? 1.0 : min(_3437, 1.0));
        float _1679 = isnan(1.0) ? _1440 : (isnan(_1440) ? 1.0 : min(_1440, 1.0));
        _1555 = (((cbLight._m0[_1660].x * 0.3183098733425140380859375) * _1678) * _1679) + _1510;
        _1557 = (((cbLight._m0[_1660].y * 0.3183098733425140380859375) * _1678) * _1679) + _1512;
        _1559 = (((cbLight._m0[_1660].z * 0.3183098733425140380859375) * _1678) * _1679) + _1514;
    }
    uint _1561 = _1423 + 8u;
    float _1567 = cbLight._m0[_1423].x + _293;
    float _1568 = cbLight._m0[_1423].y + _294;
    float _1569 = cbLight._m0[_1423].z + _295;
    float _1573 = inversesqrt(dot(vec3(_1567, _1568, _1569), vec3(_1567, _1568, _1569)));
    float _1577 = dot(vec3(_211, _212, _213), vec3(cbLight._m0[_1423].xyz));
    float _3453 = isnan(0.0) ? _1577 : (isnan(_1577) ? 0.0 : max(_1577, 0.0));
    float _1580 = isnan(1.0) ? _3453 : (isnan(_3453) ? 1.0 : min(_3453, 1.0));
    float _3464 = isnan(0.0) ? _381 : (isnan(_381) ? 0.0 : max(_381, 0.0));
    float _1581 = isnan(1.0) ? _3464 : (isnan(_3464) ? 1.0 : min(_3464, 1.0));
    float _1582 = dot(vec3(cbLight._m0[_1423].xyz), vec3(_1567 * _1573, _1568 * _1573, _1569 * _1573));
    float _3475 = isnan(0.0) ? _1582 : (isnan(_1582) ? 0.0 : max(_1582, 0.0));
    float _1593 = (exp2(log2(1.0 - (isnan(1.0) ? _3475 : (isnan(_3475) ? 1.0 : min(_3475, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1599 = (0.5 / ((_1580 + 9.9999999392252902907785028219223e-09) + _1581)) * _1580;
    float _3486 = isnan(0.0) ? _1599 : (isnan(_1599) ? 0.0 : max(_1599, 0.0));
    float _1601 = (isnan(1.0) ? _3486 : (isnan(_3486) ? 1.0 : min(_3486, 1.0))) * 0.31831014156341552734375;
    uint _1612 = _1423 + 9u;
    float _1618 = cbLight._m0[_1462].x + _293;
    float _1619 = cbLight._m0[_1462].y + _294;
    float _1620 = cbLight._m0[_1462].z + _295;
    float _1624 = inversesqrt(dot(vec3(_1618, _1619, _1620), vec3(_1618, _1619, _1620)));
    float _1628 = dot(vec3(_211, _212, _213), vec3(cbLight._m0[_1462].xyz));
    float _3497 = isnan(0.0) ? _1628 : (isnan(_1628) ? 0.0 : max(_1628, 0.0));
    float _1631 = isnan(1.0) ? _3497 : (isnan(_3497) ? 1.0 : min(_3497, 1.0));
    float _1632 = dot(vec3(cbLight._m0[_1462].xyz), vec3(_1618 * _1624, _1619 * _1624, _1620 * _1624));
    float _3508 = isnan(0.0) ? _1632 : (isnan(_1632) ? 0.0 : max(_1632, 0.0));
    float _1641 = (exp2(log2(1.0 - (isnan(1.0) ? _3508 : (isnan(_3508) ? 1.0 : min(_3508, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1645 = (0.5 / ((_1631 + 9.9999999392252902907785028219223e-09) + _1581)) * _1631;
    float _3519 = isnan(0.0) ? _1645 : (isnan(_1645) ? 0.0 : max(_1645, 0.0));
    float _1647 = (isnan(1.0) ? _3519 : (isnan(_3519) ? 1.0 : min(_3519, 1.0))) * 0.31831014156341552734375;
    float _1657 = (((_1641 * cbLight._m0[_1612].x) * _1647) * _1447) + (((_1593 * cbLight._m0[_1561].x) * _1601) * _1458);
    float _1658 = (((_1641 * cbLight._m0[_1612].y) * _1647) * _1447) + (((_1593 * cbLight._m0[_1561].y) * _1601) * _1458);
    float _1659 = (((_1641 * cbLight._m0[_1612].z) * _1647) * _1447) + (((_1593 * cbLight._m0[_1561].z) * _1601) * _1458);
    float _1721;
    float _1723;
    float _1725;
    if (_1499)
    {
        _1721 = _1657;
        _1723 = _1658;
        _1725 = _1659;
    }
    else
    {
        uint _1727 = _1423 + 10u;
        uint _1733 = _1423 + 2u;
        float _1739 = cbLight._m0[_1733].x + _293;
        float _1740 = cbLight._m0[_1733].y + _294;
        float _1741 = cbLight._m0[_1733].z + _295;
        float _1745 = inversesqrt(dot(vec3(_1739, _1740, _1741), vec3(_1739, _1740, _1741)));
        float _1749 = dot(vec3(_211, _212, _213), vec3(cbLight._m0[_1733].xyz));
        float _3530 = isnan(0.0) ? _1749 : (isnan(_1749) ? 0.0 : max(_1749, 0.0));
        float _1752 = isnan(1.0) ? _3530 : (isnan(_3530) ? 1.0 : min(_3530, 1.0));
        float _1753 = dot(vec3(cbLight._m0[_1733].xyz), vec3(_1739 * _1745, _1740 * _1745, _1741 * _1745));
        float _3541 = isnan(0.0) ? _1753 : (isnan(_1753) ? 0.0 : max(_1753, 0.0));
        float _1762 = (exp2(log2(1.0 - (isnan(1.0) ? _3541 : (isnan(_3541) ? 1.0 : min(_3541, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1766 = (0.5 / ((_1752 + 9.9999999392252902907785028219223e-09) + _1581)) * _1752;
        float _3552 = isnan(0.0) ? _1766 : (isnan(_1766) ? 0.0 : max(_1766, 0.0));
        float _1768 = (isnan(1.0) ? _3552 : (isnan(_3552) ? 1.0 : min(_3552, 1.0))) * 0.31831014156341552734375;
        float _1769 = isnan(1.0) ? _1439 : (isnan(_1439) ? 1.0 : min(_1439, 1.0));
        _1721 = (((_1762 * cbLight._m0[_1727].x) * _1768) * _1769) + _1657;
        _1723 = (((_1762 * cbLight._m0[_1727].y) * _1768) * _1769) + _1658;
        _1725 = (((_1762 * cbLight._m0[_1727].z) * _1768) * _1769) + _1659;
    }
    float _1804;
    float _1806;
    float _1808;
    if (_1517)
    {
        _1804 = _1721;
        _1806 = _1723;
        _1808 = _1725;
    }
    else
    {
        uint _1815 = _1423 + 11u;
        uint _1821 = _1423 + 3u;
        float _1827 = cbLight._m0[_1821].x + _293;
        float _1828 = cbLight._m0[_1821].y + _294;
        float _1829 = cbLight._m0[_1821].z + _295;
        float _1833 = inversesqrt(dot(vec3(_1827, _1828, _1829), vec3(_1827, _1828, _1829)));
        float _1837 = dot(vec3(_211, _212, _213), vec3(cbLight._m0[_1821].xyz));
        float _3568 = isnan(0.0) ? _1837 : (isnan(_1837) ? 0.0 : max(_1837, 0.0));
        float _1840 = isnan(1.0) ? _3568 : (isnan(_3568) ? 1.0 : min(_3568, 1.0));
        float _1841 = dot(vec3(cbLight._m0[_1821].xyz), vec3(_1827 * _1833, _1828 * _1833, _1829 * _1833));
        float _3579 = isnan(0.0) ? _1841 : (isnan(_1841) ? 0.0 : max(_1841, 0.0));
        float _1850 = (exp2(log2(1.0 - (isnan(1.0) ? _3579 : (isnan(_3579) ? 1.0 : min(_3579, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1854 = (0.5 / ((_1840 + 9.9999999392252902907785028219223e-09) + _1581)) * _1840;
        float _3590 = isnan(0.0) ? _1854 : (isnan(_1854) ? 0.0 : max(_1854, 0.0));
        float _1856 = (isnan(1.0) ? _3590 : (isnan(_3590) ? 1.0 : min(_3590, 1.0))) * 0.31831014156341552734375;
        float _1857 = isnan(1.0) ? _1440 : (isnan(_1440) ? 1.0 : min(_1440, 1.0));
        _1804 = (((_1850 * cbLight._m0[_1815].x) * _1856) * _1857) + _1721;
        _1806 = (((_1850 * cbLight._m0[_1815].y) * _1856) * _1857) + _1723;
        _1808 = (((_1850 * cbLight._m0[_1815].z) * _1856) * _1857) + _1725;
    }
    float _1991;
    float _1993;
    float _1995;
    float _1997;
    float _1999;
    float _2001;
    if (_1421.y == 0u)
    {
        float _1932 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1933 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1932;
        float _1934 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1932;
        float _1935 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1932;
        uvec4 _1947 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1948 = _1947.x;
        uint _1959 = uint((float(_1947.y) * floor(float(uint(cbSceneParam._m0[85u].y * _315) / _1948))) + floor(float(uint(cbSceneParam._m0[85u].x * _314) / _1948)));
        float _1969 = (log2(_1935 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _1970 = isnan(0.0) ? _1969 : (isnan(_1969) ? 0.0 : max(_1969, 0.0));
        uint _1973 = uint(isnan(14.0) ? _1970 : (isnan(_1970) ? 14.0 : min(_1970, 14.0)));
        uvec4 _1978 = texelFetch(g_lightClusterGridBuffer, int(((_1973 << 2u) + (_1959 << 6u)) >> 2u));
        uint _1979 = _1978.x;
        uint _1980 = _1947.z;
        float _2081;
        float _2083;
        float _2085;
        float _2087;
        float _2089;
        float _2091;
        if (((((1u << ((_1980 >> 4u) & 15u)) + 4294967295u) & _1979) == 0u) || ((_1980 & 240u) == 0u))
        {
            _2081 = 0.0;
            _2083 = 0.0;
            _2085 = 0.0;
            _2087 = 0.0;
            _2089 = 0.0;
            _2091 = 0.0;
        }
        else
        {
            float _2082;
            float _2084;
            float _2086;
            float _2088;
            float _2090;
            float _2092;
            float _2232 = 0.0;
            float _2233 = 0.0;
            float _2234 = 0.0;
            float _2235 = 0.0;
            float _2236 = 0.0;
            float _2237 = 0.0;
            uint _2238 = 0u;
            uint _2247;
            bool _2248;
            for (;;)
            {
                _2247 = texelFetch(g_lightClassification, int((((_1973 << 5u) + (_1959 << 9u)) + (_2238 << 2u)) >> 2u)).x;
                _2248 = _2247 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2248)
                {
                    frontier_phi_68_pred = _2234;
                    frontier_phi_68_pred_1 = _2237;
                    frontier_phi_68_pred_2 = _2236;
                    frontier_phi_68_pred_3 = _2235;
                    frontier_phi_68_pred_4 = _2233;
                    frontier_phi_68_pred_5 = _2232;
                }
                else
                {
                    float _2377;
                    float _2378;
                    float _2379;
                    float _2380;
                    float _2381;
                    float _2382;
                    uint _2383;
                    _2377 = _2232;
                    _2378 = _2233;
                    _2379 = _2234;
                    _2380 = _2235;
                    _2381 = _2236;
                    _2382 = _2237;
                    _2383 = _2247;
                    float _2304;
                    float _2305;
                    float _2306;
                    float _2307;
                    float _2308;
                    float _2309;
                    for (;;)
                    {
                        uint _2387 = uint(findLSB(_2383)) + (_2238 << 5u);
                        uint _2384 = (_2383 + 4294967295u) & _2383;
                        uint _2389 = _2387 * 48u;
                        vec4 _2403 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2389)).x, texelFetch(g_PointLightRenderingBuffer, int(_2389 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2389 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2389 + 3u)).x));
                        uint _2409 = (_2387 * 48u) + 4u;
                        vec4 _2422 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2409)).x, texelFetch(g_PointLightRenderingBuffer, int(_2409 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2409 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2409 + 3u)).x));
                        uint _2428 = (_2387 * 48u) + 8u;
                        vec3 _2439 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2428)).x, texelFetch(g_PointLightRenderingBuffer, int(_2428 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2428 + 2u)).x));
                        float _2443 = _2403.x - _1933;
                        float _2444 = _2403.y - _1934;
                        float _2445 = _2403.z - _1935;
                        float _2446 = dot(vec3(_2443, _2444, _2445), vec3(_2443, _2444, _2445));
                        float _2449 = inversesqrt(_2446);
                        float _2458 = 1.0 - (_2446 * _2403.w);
                        float _3616 = isnan(0.0) ? _2458 : (isnan(_2458) ? 0.0 : max(_2458, 0.0));
                        float _2459 = isnan(1.0) ? _3616 : (isnan(_3616) ? 1.0 : min(_3616, 1.0));
                        float _2460 = sqrt(_2446) * _2422.w;
                        float _2463 = 1.39999997615814208984375 / (_2460 + 1.39999997615814208984375);
                        float _2464 = _2463 * _2463;
                        float _2467 = ((1.0 - _2464) * dot(vec3(_335, _338, _341), vec3(_2449 * _2443, _2449 * _2444, _2449 * _2445))) + _2464;
                        float _2470 = _2460 * _2460;
                        float _2474 = ((isnan(0.0) ? _2467 : (isnan(_2467) ? 0.0 : max(_2467, 0.0))) * _2459) / ((_2470 * 0.699999988079071044921875) + 1.0);
                        float _2478 = (-0.0) - _1933;
                        float _2479 = (-0.0) - _1934;
                        float _2480 = (-0.0) - _1935;
                        float _2484 = inversesqrt(dot(vec3(_2478, _2479, _2480), vec3(_2478, _2479, _2480)));
                        float _2488 = dot(vec3(_335, _338, _341), vec3(_2484 * _2478, _2484 * _2479, _2484 * _2480));
                        float _3632 = isnan(0.0) ? _2488 : (isnan(_2488) ? 0.0 : max(_2488, 0.0));
                        float _3643 = isnan(0.0) ? _2467 : (isnan(_2467) ? 0.0 : max(_2467, 0.0));
                        float _2492 = isnan(1.0) ? _3643 : (isnan(_3643) ? 1.0 : min(_3643, 1.0));
                        float _2496 = (0.5 / (((isnan(1.0) ? _3632 : (isnan(_3632) ? 1.0 : min(_3632, 1.0))) + 9.9999999392252902907785028219223e-09) + _2492)) * _2492;
                        float _3654 = isnan(0.0) ? _2496 : (isnan(_2496) ? 0.0 : max(_2496, 0.0));
                        float _2505 = (((isnan(1.0) ? _3654 : (isnan(_3654) ? 1.0 : min(_3654, 1.0))) * 3.1415927410125732421875) / ((_2470 * 2.1991131305694580078125) + 3.141590118408203125)) * _2459;
                        _2307 = (_2474 * _2422.x) + _2380;
                        _2308 = (_2474 * _2422.y) + _2381;
                        _2309 = (_2474 * _2422.z) + _2382;
                        _2304 = (_2505 * _2439.x) + _2377;
                        _2305 = (_2505 * _2439.y) + _2378;
                        _2306 = (_2505 * _2439.z) + _2379;
                        if (_2384 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2377 = _2304;
                            _2378 = _2305;
                            _2379 = _2306;
                            _2380 = _2307;
                            _2381 = _2308;
                            _2382 = _2309;
                            _2383 = _2384;
                        }
                    }
                    frontier_phi_68_pred = _2306;
                    frontier_phi_68_pred_1 = _2309;
                    frontier_phi_68_pred_2 = _2308;
                    frontier_phi_68_pred_3 = _2307;
                    frontier_phi_68_pred_4 = _2305;
                    frontier_phi_68_pred_5 = _2304;
                }
                _2086 = frontier_phi_68_pred;
                _2092 = frontier_phi_68_pred_1;
                _2090 = frontier_phi_68_pred_2;
                _2088 = frontier_phi_68_pred_3;
                _2084 = frontier_phi_68_pred_4;
                _2082 = frontier_phi_68_pred_5;
                uint _2239 = _2238 + 1u;
                if (_2239 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2232 = _2082;
                    _2233 = _2084;
                    _2234 = _2086;
                    _2235 = _2088;
                    _2236 = _2090;
                    _2237 = _2092;
                    _2238 = _2239;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2081 = _2082;
            _2083 = _2084;
            _2085 = _2086;
            _2087 = _2088;
            _2089 = _2090;
            _2091 = _2092;
        }
        uvec4 _2095 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2096 = _2095.z;
        uint _2098 = (_2096 >> 8u) & 15u;
        float _2203;
        float _2205;
        float _2207;
        float _2209;
        float _2211;
        float _2213;
        if (((4294967295u << _2098) & _1979) == 0u)
        {
            _2203 = _2081;
            _2205 = _2083;
            _2207 = _2085;
            _2209 = _2087;
            _2211 = _2089;
            _2213 = _2091;
        }
        else
        {
            float _2228 = inversesqrt(dot(vec3(_1933, _1934, _1935), vec3(_1933, _1934, _1935)));
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2098 < ((_2096 >> 12u) & 15u))
            {
                float _2204;
                float _2206;
                float _2208;
                float _2210;
                float _2212;
                float _2214;
                float _2360 = _2081;
                float _2361 = _2083;
                float _2362 = _2085;
                float _2363 = _2087;
                float _2364 = _2089;
                float _2365 = _2091;
                uint _2366 = _2098;
                uint _2375;
                bool _2376;
                for (;;)
                {
                    _2375 = texelFetch(g_lightClassification, int((((_1973 << 5u) + (_1959 << 9u)) + (_2366 << 2u)) >> 2u)).x;
                    _2376 = _2375 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_2376)
                    {
                        frontier_phi_79_pred = _2365;
                        frontier_phi_79_pred_1 = _2364;
                        frontier_phi_79_pred_2 = _2363;
                        frontier_phi_79_pred_3 = _2362;
                        frontier_phi_79_pred_4 = _2361;
                        frontier_phi_79_pred_5 = _2360;
                    }
                    else
                    {
                        float _2519;
                        float _2520;
                        float _2521;
                        float _2522;
                        float _2523;
                        float _2524;
                        float _2771;
                        float _2772;
                        float _2773;
                        float _2774;
                        float _2775;
                        float _2776;
                        float _2532 = _2360;
                        float _2533 = _2361;
                        float _2534 = _2362;
                        float _2535 = _2363;
                        float _2536 = _2364;
                        float _2537 = _2365;
                        uint _2538 = _2375;
                        uint _2539;
                        vec4 _2564;
                        float _2565;
                        vec4 _2580;
                        vec3 _2592;
                        vec4 _2608;
                        vec4 _2624;
                        float _2671;
                        bool _2672;
                        for (;;)
                        {
                            uint _2549 = ((_2366 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2538));
                            _2539 = (_2538 + 4294967295u) & _2538;
                            uint _2551 = _2549 * 40u;
                            _2564 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2551)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2551 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2551 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2551 + 3u)).x));
                            _2565 = _2564.w;
                            uint _2567 = (_2549 * 40u) + 4u;
                            _2580 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2567)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2567 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2567 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2567 + 3u)).x));
                            uint _2582 = (_2549 * 40u) + 8u;
                            _2592 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2582)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2582 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2582 + 2u)).x));
                            uint _2595 = (_2549 * 40u) + 16u;
                            _2608 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2595)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2595 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2595 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2595 + 3u)).x));
                            uint _2611 = (_2549 * 40u) + 20u;
                            _2624 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2611)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2611 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2611 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2611 + 3u)).x));
                            uint _2627 = (_2549 * 40u) + 24u;
                            vec4 _2640 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2627)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2627 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2627 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2627 + 3u)).x));
                            uint _2646 = (_2549 * 40u) + 28u;
                            vec4 _2659 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2646)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2646 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2646 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2646 + 3u)).x));
                            _2671 = fma(_1935, _2659.z, fma(_1934, _2659.y, _2659.x * _1933)) + _2659.w;
                            _2672 = !((fma(_1935, _2640.z, fma(_1934, _2640.y, _2640.x * _1933)) + _2640.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_2672)
                            {
                                float _2699 = _2564.x - _1933;
                                float _2700 = _2564.y - _1934;
                                float _2701 = _2564.z - _1935;
                                float _2702 = dot(vec3(_2699, _2700, _2701), vec3(_2699, _2700, _2701));
                                float _2705 = inversesqrt(_2702);
                                float _2706 = _2705 * _2699;
                                float _2707 = _2705 * _2700;
                                float _2708 = _2705 * _2701;
                                float _2712 = 1.0 - (_2702 / (_2565 * _2565));
                                float _3665 = isnan(0.0) ? _2712 : (isnan(_2712) ? 0.0 : max(_2712, 0.0));
                                float _2713 = isnan(1.0) ? _3665 : (isnan(_3665) ? 1.0 : min(_3665, 1.0));
                                float _2717 = sqrt(_2702) * _2580.w;
                                float _2719 = 1.39999997615814208984375 / (_2717 + 1.39999997615814208984375);
                                float _2720 = _2719 * _2719;
                                float _2721 = 1.0 - _2720;
                                float _2723 = (_2721 * dot(vec3(_2706, _2707, _2708), vec3(_335, _338, _341))) + _2720;
                                float _2726 = _2717 * _2717;
                                float _2730 = (fma(_1935, _2608.z, fma(_1934, _2608.y, _2608.x * _1933)) + _2608.w) / _2671;
                                float _2731 = (fma(_1935, _2624.z, fma(_1934, _2624.y, _2624.x * _1933)) + _2624.w) / _2671;
                                float _2735 = 1.0 - dot(vec2(_2730, _2731), vec2(_2730, _2731));
                                float _3681 = isnan(0.0) ? _2735 : (isnan(_2735) ? 0.0 : max(_2735, 0.0));
                                float _2736 = isnan(1.0) ? _3681 : (isnan(_3681) ? 1.0 : min(_3681, 1.0));
                                float _2737 = _2736 * (((isnan(0.0) ? _2723 : (isnan(_2723) ? 0.0 : max(_2723, 0.0))) * _2713) / ((_2726 * 0.699999988079071044921875) + 1.0));
                                float _2747 = dot(vec3(_335, _338, _341), vec3((-0.0) - (_1933 * _2228), (-0.0) - (_1934 * _2228), (-0.0) - (_1935 * _2228)));
                                float _3692 = isnan(0.0) ? _2747 : (isnan(_2747) ? 0.0 : max(_2747, 0.0));
                                float _2755 = (_2721 * dot(vec3(_335, _338, _341), vec3(_2706, _2707, _2708))) + _2720;
                                float _3703 = isnan(0.0) ? _2755 : (isnan(_2755) ? 0.0 : max(_2755, 0.0));
                                float _2756 = isnan(1.0) ? _3703 : (isnan(_3703) ? 1.0 : min(_3703, 1.0));
                                float _2760 = (0.5 / (((isnan(1.0) ? _3692 : (isnan(_3692) ? 1.0 : min(_3692, 1.0))) + 9.9999999392252902907785028219223e-09) + _2756)) * _2756;
                                float _3714 = isnan(0.0) ? _2760 : (isnan(_2760) ? 0.0 : max(_2760, 0.0));
                                float _2767 = (_2736 * _2713) * (((isnan(1.0) ? _3714 : (isnan(_3714) ? 1.0 : min(_3714, 1.0))) * 3.1415927410125732421875) / ((_2726 * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_85_pred = _2737 * _2580.z;
                                frontier_phi_85_pred_1 = _2737 * _2580.y;
                                frontier_phi_85_pred_2 = _2737 * _2580.x;
                                frontier_phi_85_pred_3 = _2767 * _2592.z;
                                frontier_phi_85_pred_4 = _2767 * _2592.y;
                                frontier_phi_85_pred_5 = _2767 * _2592.x;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _2776 = frontier_phi_85_pred;
                            _2775 = frontier_phi_85_pred_1;
                            _2774 = frontier_phi_85_pred_2;
                            _2773 = frontier_phi_85_pred_3;
                            _2772 = frontier_phi_85_pred_4;
                            _2771 = frontier_phi_85_pred_5;
                            _2522 = _2774 + _2535;
                            _2523 = _2775 + _2536;
                            _2524 = _2776 + _2537;
                            _2519 = _2771 + _2532;
                            _2520 = _2772 + _2533;
                            _2521 = _2773 + _2534;
                            if (_2539 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2532 = _2519;
                                _2533 = _2520;
                                _2534 = _2521;
                                _2535 = _2522;
                                _2536 = _2523;
                                _2537 = _2524;
                                _2538 = _2539;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _2524;
                        frontier_phi_79_pred_1 = _2523;
                        frontier_phi_79_pred_2 = _2522;
                        frontier_phi_79_pred_3 = _2521;
                        frontier_phi_79_pred_4 = _2520;
                        frontier_phi_79_pred_5 = _2519;
                    }
                    _2214 = frontier_phi_79_pred;
                    _2212 = frontier_phi_79_pred_1;
                    _2210 = frontier_phi_79_pred_2;
                    _2208 = frontier_phi_79_pred_3;
                    _2206 = frontier_phi_79_pred_4;
                    _2204 = frontier_phi_79_pred_5;
                    uint _2367 = _2366 + 1u;
                    if (_2367 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2360 = _2204;
                        _2361 = _2206;
                        _2362 = _2208;
                        _2363 = _2210;
                        _2364 = _2212;
                        _2365 = _2214;
                        _2366 = _2367;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2210;
                frontier_phi_60_61_ladder_1 = _2214;
                frontier_phi_60_61_ladder_2 = _2212;
                frontier_phi_60_61_ladder_3 = _2208;
                frontier_phi_60_61_ladder_4 = _2206;
                frontier_phi_60_61_ladder_5 = _2204;
            }
            else
            {
                frontier_phi_60_61_ladder = _2087;
                frontier_phi_60_61_ladder_1 = _2091;
                frontier_phi_60_61_ladder_2 = _2089;
                frontier_phi_60_61_ladder_3 = _2085;
                frontier_phi_60_61_ladder_4 = _2083;
                frontier_phi_60_61_ladder_5 = _2081;
            }
            _2203 = frontier_phi_60_61_ladder_5;
            _2205 = frontier_phi_60_61_ladder_4;
            _2207 = frontier_phi_60_61_ladder_3;
            _2209 = frontier_phi_60_61_ladder;
            _2211 = frontier_phi_60_61_ladder_2;
            _2213 = frontier_phi_60_61_ladder_1;
        }
        float _2218 = isnan(1.0) ? _380 : (isnan(_380) ? 1.0 : min(_380, 1.0));
        _1991 = (_2218 * _2209) + _1555;
        _1993 = (_2218 * _2211) + _1557;
        _1995 = (_2218 * _2213) + _1559;
        _1997 = ((_2203 * 0.039999999105930328369140625) * _2218) + _1804;
        _1999 = ((_2205 * 0.039999999105930328369140625) * _2218) + _1806;
        _2001 = ((_2207 * 0.039999999105930328369140625) * _2218) + _1808;
    }
    else
    {
        _1991 = _1555;
        _1993 = _1557;
        _1995 = _1559;
        _1997 = _1804;
        _1999 = _1806;
        _2001 = _1808;
    }
    float _3730 = isnan(0.0) ? _366 : (isnan(_366) ? 0.0 : max(_366, 0.0));
    float _3741 = isnan(0.0) ? _367 : (isnan(_367) ? 0.0 : max(_367, 0.0));
    float _3752 = isnan(0.0) ? _368 : (isnan(_368) ? 0.0 : max(_368, 0.0));
    float _3763 = isnan(0.0) ? _215 : (isnan(_215) ? 0.0 : max(_215, 0.0));
    float _2019 = ((isnan(1.0) ? _3730 : (isnan(_3730) ? 1.0 : min(_3730, 1.0))) * (_1991 + ((isnan(0.0) ? _1112 : (isnan(_1112) ? 0.0 : max(_1112, 0.0))) * _380))) + ((_1997 + ((isnan(0.0) ? _1405 : (isnan(_1405) ? 0.0 : max(_1405, 0.0))) * _1191)) * cbPerFrame._m0[3u].x);
    float _2020 = ((isnan(1.0) ? _3741 : (isnan(_3741) ? 1.0 : min(_3741, 1.0))) * (_1993 + ((isnan(0.0) ? _1115 : (isnan(_1115) ? 0.0 : max(_1115, 0.0))) * _380))) + ((_1999 + ((isnan(0.0) ? _1408 : (isnan(_1408) ? 0.0 : max(_1408, 0.0))) * _1191)) * cbPerFrame._m0[3u].x);
    float _2021 = ((isnan(1.0) ? _3752 : (isnan(_3752) ? 1.0 : min(_3752, 1.0))) * (_1995 + ((isnan(0.0) ? _1118 : (isnan(_1118) ? 0.0 : max(_1118, 0.0))) * _380))) + ((_2001 + ((isnan(0.0) ? _1411 : (isnan(_1411) ? 0.0 : max(_1411, 0.0))) * _1191)) * cbPerFrame._m0[3u].x);
    float _2026 = cbInstanceData._m0[_354 + 6u].w * (isnan(1.0) ? _3763 : (isnan(_3763) ? 1.0 : min(_3763, 1.0)));
    float _2031 = _314 / cbSceneParam._m0[86u].x;
    float _2032 = _315 / cbSceneParam._m0[86u].y;
    vec4 _2046 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2031, _2032, (log2((isnan(cbSceneParam._m0[77u].w) ? _234 : (isnan(_234) ? cbSceneParam._m0[77u].w : min(_234, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2048 = _2046.x;
    float _2049 = _2046.y;
    float _2050 = _2046.z;
    float _2051 = _2046.w;
    float _2143;
    float _2145;
    float _2147;
    float _2149;
    if (_234 > cbSceneParam._m0[78u].w)
    {
        float _2106 = isnan(_234) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _234 : min(cbSceneParam._m0[80u].w, _234));
        float _2107 = _2106 / _234;
        float _2118 = _2107 * _286;
        float _2119 = _287 * _2107;
        float _2120 = (-0.0) - _2119;
        float _2121 = _2107 * _288;
        float _2123 = (cbSceneParam._m0[77u].w * _2120) / _2106;
        float _2124 = _2123 + cbSceneParam._m0[79u].w;
        float _2125 = cbSceneParam._m0[79u].w - _2119;
        float _2131 = sqrt(((_2118 * _2118) + (_2119 * _2119)) + (_2121 * _2121));
        float _2134 = (1.0 - (cbSceneParam._m0[77u].w / _2106)) * _2131;
        float _2139 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2141 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2317;
        if (abs((_2120 - _2123) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2317 = ((((_2124 > 0.0) ? exp2(_2139 * _2124) : (2.0 - exp2(_2141 * _2124))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2134;
        }
        else
        {
            float _2261 = 1.0 / cbSceneParam._m0[80u].x;
            float _2262 = isnan(_2125) ? _2124 : (isnan(_2124) ? _2125 : max(_2124, _2125));
            float _2263 = isnan(_2125) ? _2124 : (isnan(_2124) ? _2125 : min(_2124, _2125));
            float _2272 = isnan(0.0) ? _2262 : (isnan(_2262) ? 0.0 : min(_2262, 0.0));
            float _2273 = isnan(0.0) ? _2263 : (isnan(_2263) ? 0.0 : min(_2263, 0.0));
            _2317 = ((abs(_2131 / _2120) * cbSceneParam._m0[80u].y) * ((((_2272 - _2273) * 2.0) - ((exp2(_2139 * (isnan(0.0) ? _2262 : (isnan(_2262) ? 0.0 : max(_2262, 0.0)))) - exp2(_2139 * (isnan(0.0) ? _2263 : (isnan(_2263) ? 0.0 : max(_2263, 0.0))))) * _2261)) - ((exp2(_2141 * _2272) - exp2(_2141 * _2273)) * _2261))) + (_2134 * cbSceneParam._m0[80u].z);
        }
        vec4 _2319 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2031, _2032, 1.0), 0.0);
        float _2328 = exp2((_2317 * (-1.44269502162933349609375)) * (1.0 - _2319.w));
        float _2329 = log2(_2328);
        float _2345 = log2(_2051);
        _2143 = (exp2(_2345 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2329 * cbSceneParam._m0[78u].x)) * _2319.x) / cbSceneParam._m0[78u].x)) + _2048;
        _2145 = (exp2(_2345 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2329 * cbSceneParam._m0[78u].y)) * _2319.y) / cbSceneParam._m0[78u].y)) + _2049;
        _2147 = (exp2(_2345 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2329 * cbSceneParam._m0[78u].z)) * _2319.z) / cbSceneParam._m0[78u].z)) + _2050;
        _2149 = _2328 * _2051;
    }
    else
    {
        _2143 = _2048;
        _2145 = _2049;
        _2147 = _2050;
        _2149 = _2051;
    }
    bool _2355;
    vec4 _2159;
    vec4 _2182;
    float _2184;
    float _2188;
    float _2189;
    float _2190;
    float _2191;
    bool _2202;
    for (;;)
    {
        _2159 = cbMatDynParam._m0[0u];
        float _2161 = roundEven(_2159.y);
        bool _2162 = _2161 == 3.0;
        float _2164 = log2(_2149);
        float _2171 = exp2(_2164 * cbSceneParam._m0[78u].x) * _2019;
        float _2172 = exp2(_2164 * cbSceneParam._m0[78u].y) * _2020;
        float _2173 = exp2(_2164 * cbSceneParam._m0[78u].z) * _2021;
        float _2180 = _302 + (-0.5);
        _2182 = cbMtdParam._m0[1u];
        _2184 = _2182.y * _2180;
        float _2187 = (_2161 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2188 = _2187 * (_2162 ? _2171 : (_2171 + (cbSceneParam._m0[72u].w * _2143)));
        _2189 = _2187 * (_2162 ? _2172 : (_2172 + (cbSceneParam._m0[72u].w * _2145)));
        _2190 = _2187 * (_2162 ? _2173 : (_2173 + (cbSceneParam._m0[72u].w * _2147)));
        _2191 = _2180 * 0.999000012874603271484375;
        _2202 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2202)
        {
            if ((cbInstanceData._m0[_354 + 7u].x + _2191) < 0.5)
            {
                _2355 = true;
                break;
            }
        }
        uint _2296 = _356 + uint(_2159.w);
        if ((cbInstanceData._m0[_2296].w < 1.0) && ((cbInstanceData._m0[_2296].w + _2191) < 0.5))
        {
            _2355 = true;
            break;
        }
        if ((_2184 + _202) < _2182.x)
        {
            _2355 = true;
            break;
        }
        _2355 = false;
        break;
    }
    float _2510;
    if (_2355)
    {
        discard_state = true;
        _2510 = 0.0;
    }
    else
    {
        _2510 = _2026;
    }
    SV_Target.x = _2188;
    SV_Target.y = _2189;
    SV_Target.z = _2190;
    SV_Target.w = _2510;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2026;
    discard_exit();
}


