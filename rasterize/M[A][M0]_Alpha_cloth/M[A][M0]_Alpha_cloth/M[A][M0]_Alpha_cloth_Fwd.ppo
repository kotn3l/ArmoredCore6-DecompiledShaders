#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[10];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_A_M0_Alpha_snp_0_Texture2D_0;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_1;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _708;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _162 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _163 = _162 * NORMAL.x;
    float _164 = _162 * NORMAL.y;
    float _165 = _162 * NORMAL.z;
    float _170;
    float _171;
    float _172;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _170 = (-0.0) - _163;
        _171 = (-0.0) - _164;
        _172 = (-0.0) - _165;
    }
    else
    {
        _170 = _163;
        _171 = _164;
        _172 = _165;
    }
    vec4 _192 = texture(sampler2D(M_A_M0_Alpha_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[0u].w));
    float _199 = _192.x * cbMtdParam._m0[9u].x;
    float _200 = _192.y * cbMtdParam._m0[9u].y;
    float _201 = _192.z * cbMtdParam._m0[9u].z;
    float _202 = _192.w * TEXCOORD_1.z;
    float _206 = inversesqrt(dot(vec3(_170, _171, _172), vec3(_170, _171, _172)));
    float _207 = _206 * _170;
    float _208 = _206 * _171;
    float _209 = _206 * _172;
    float _2820 = isnan(0.0) ? _202 : (isnan(_202) ? 0.0 : max(_202, 0.0));
    float _211 = isnan(1.0) ? _2820 : (isnan(_2820) ? 1.0 : min(_2820, 1.0));
    float _2831 = isnan(0.0) ? _199 : (isnan(_199) ? 0.0 : max(_199, 0.0));
    float _2842 = isnan(0.0) ? _200 : (isnan(_200) ? 0.0 : max(_200, 0.0));
    float _2853 = isnan(0.0) ? _201 : (isnan(_201) ? 0.0 : max(_201, 0.0));
    float _230 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _272 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _282 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _272);
    float _283 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _272);
    float _284 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _272);
    float _288 = inversesqrt(dot(vec3(_282, _283, _284), vec3(_282, _283, _284)));
    float _289 = _282 * _288;
    float _290 = _283 * _288;
    float _291 = _284 * _288;
    float _297 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _298 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _319 = fma(_209, cbSceneParam._m0[5u].z, fma(_208, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _207));
    float _322 = fma(_209, cbSceneParam._m0[6u].z, fma(_208, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _207));
    float _325 = fma(_209, cbSceneParam._m0[7u].z, fma(_208, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _207));
    uint _338 = uint(roundEven(NORMAL.w)) * 13u;
    uint _341 = (_338 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _347 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _2831 : (isnan(_2831) ? 1.0 : min(_2831, 1.0)))) * cbInstanceData._m0[_341].x;
    float _348 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _2842 : (isnan(_2842) ? 1.0 : min(_2842, 1.0)))) * cbInstanceData._m0[_341].y;
    float _349 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _2853 : (isnan(_2853) ? 1.0 : min(_2853, 1.0)))) * cbInstanceData._m0[_341].z;
    float _2864 = isnan(0.0) ? _347 : (isnan(_347) ? 0.0 : max(_347, 0.0));
    float _350 = isnan(1.0) ? _2864 : (isnan(_2864) ? 1.0 : min(_2864, 1.0));
    float _2875 = isnan(0.0) ? _348 : (isnan(_348) ? 0.0 : max(_348, 0.0));
    float _351 = isnan(1.0) ? _2875 : (isnan(_2875) ? 1.0 : min(_2875, 1.0));
    float _2886 = isnan(0.0) ? _349 : (isnan(_349) ? 0.0 : max(_349, 0.0));
    float _352 = isnan(1.0) ? _2886 : (isnan(_2886) ? 1.0 : min(_2886, 1.0));
    vec4 _361 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _297, cbSceneParam._m0[86u].y * _298));
    float _364 = _361.x * TEXCOORD_1.w;
    float _365 = dot(vec3(_207, _208, _209), vec3(_289, _290, _291));
    float _368 = _365 * 2.0;
    float _373 = (_368 * _207) - _289;
    float _374 = (_368 * _208) - _290;
    float _375 = (_368 * _209) - _291;
    float _397 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _401 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _405 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _707;
    float _709;
    float _710;
    float _711;
    float _712;
    float _713;
    float _714;
    float _715;
    float _716;
    float _717;
    float _718;
    float _719;
    float _720;
    float _721;
    float _722;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _432 = fma(_405, cbModelParam._m0[26u].z, fma(_401, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _397));
        float _436 = fma(_405, cbModelParam._m0[27u].z, fma(_401, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _397));
        float _440 = fma(_405, cbModelParam._m0[28u].z, fma(_401, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _397));
        float _465 = _397 + _207;
        float _466 = _401 + _208;
        float _467 = _405 + _209;
        float _477 = fma(_467, cbModelParam._m0[26u].z, fma(_466, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _465)) - _432;
        float _478 = fma(_467, cbModelParam._m0[27u].z, fma(_466, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _465)) - _436;
        float _479 = fma(_467, cbModelParam._m0[28u].z, fma(_466, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _465)) - _440;
        float _483 = inversesqrt(dot(vec3(_477, _478, _479), vec3(_477, _478, _479)));
        float _496 = ((_483 * _477) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_432 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _497 = ((_483 * _478) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_436 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _498 = ((_483 * _479) / cbModelParam._m0[34u].z) + ((((((_440 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _501 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_496, _497, _498), 0.0);
        vec4 _508 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_496, _497, _498), 0.0);
        vec4 _515 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_496, _497, _498), 0.0);
        vec4 _522 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_496, _497, _498), 0.0);
        float _535 = exp2((_501.w + (-0.5)) * 20.0) * 2.0;
        float _536 = _535 * (_501.x + (-0.5));
        float _537 = _535 * (_501.y + (-0.5));
        float _538 = _535 * (_501.z + (-0.5));
        float _545 = exp2((_508.w + (-0.5)) * 20.0) * 2.0;
        float _546 = _545 * (_508.x + (-0.5));
        float _547 = _545 * (_508.y + (-0.5));
        float _548 = _545 * (_508.z + (-0.5));
        float _555 = exp2((_515.w + (-0.5)) * 20.0) * 2.0;
        float _556 = _555 * (_515.x + (-0.5));
        float _557 = _555 * (_515.y + (-0.5));
        float _558 = _555 * (_515.z + (-0.5));
        float _565 = exp2((_522.w + (-0.5)) * 20.0) * 2.0;
        float _566 = _565 * (_522.x + (-0.5));
        float _567 = _565 * (_522.y + (-0.5));
        float _568 = _565 * (_522.z + (-0.5));
        float _569 = isnan(0.0) ? _566 : (isnan(_566) ? 0.0 : max(_566, 0.0));
        float _570 = isnan(0.0) ? _567 : (isnan(_567) ? 0.0 : max(_567, 0.0));
        float _571 = isnan(0.0) ? _568 : (isnan(_568) ? 0.0 : max(_568, 0.0));
        float _572 = _536 * 0.5;
        float _573 = _546 * 0.5;
        float _574 = _556 * 0.5;
        float _575 = dot(vec3(_572, _573, _574), vec3(_572, _573, _574));
        float _580 = (_575 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_575);
        float _589 = (dot(vec3(_207, _208, _209), vec3(_580 * _572, _580 * _573, _580 * _574)) + 1.0) * 0.5;
        float _2912 = isnan(0.0) ? _589 : (isnan(_589) ? 0.0 : max(_589, 0.0));
        float _599 = sqrt(((_573 * _573) + (_572 * _572)) + (_574 * _574)) / (_569 + 9.9999997473787516355514526367188e-06);
        float _2923 = isnan(0.0) ? _599 : (isnan(_599) ? 0.0 : max(_599, 0.0));
        float _600 = isnan(1.0) ? _2923 : (isnan(_2923) ? 1.0 : min(_2923, 1.0));
        float _601 = _600 * 2.0;
        float _605 = (1.0 - _600) / (_600 + 1.0);
        float _2934 = isnan(0.0) ? _605 : (isnan(_605) ? 0.0 : max(_605, 0.0));
        float _606 = isnan(1.0) ? _2934 : (isnan(_2934) ? 1.0 : min(_2934, 1.0));
        float _615 = ((((1.0 - _606) * (_601 + 2.0)) * exp2(log2(isnan(1.0) ? _2912 : (isnan(_2912) ? 1.0 : min(_2912, 1.0))) * (_601 + 1.0))) + _606) * _569;
        float _616 = _537 * 0.5;
        float _617 = _547 * 0.5;
        float _618 = _557 * 0.5;
        float _619 = dot(vec3(_616, _617, _618), vec3(_616, _617, _618));
        float _624 = (_619 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_619);
        float _632 = (dot(vec3(_207, _208, _209), vec3(_624 * _616, _624 * _617, _624 * _618)) + 1.0) * 0.5;
        float _2945 = isnan(0.0) ? _632 : (isnan(_632) ? 0.0 : max(_632, 0.0));
        float _641 = sqrt(((_617 * _617) + (_616 * _616)) + (_618 * _618)) / (_570 + 9.9999997473787516355514526367188e-06);
        float _2956 = isnan(0.0) ? _641 : (isnan(_641) ? 0.0 : max(_641, 0.0));
        float _642 = isnan(1.0) ? _2956 : (isnan(_2956) ? 1.0 : min(_2956, 1.0));
        float _643 = _642 * 2.0;
        float _647 = (1.0 - _642) / (_642 + 1.0);
        float _2967 = isnan(0.0) ? _647 : (isnan(_647) ? 0.0 : max(_647, 0.0));
        float _648 = isnan(1.0) ? _2967 : (isnan(_2967) ? 1.0 : min(_2967, 1.0));
        float _657 = ((((1.0 - _648) * (_643 + 2.0)) * exp2(log2(isnan(1.0) ? _2945 : (isnan(_2945) ? 1.0 : min(_2945, 1.0))) * (_643 + 1.0))) + _648) * _570;
        float _658 = _538 * 0.5;
        float _659 = _548 * 0.5;
        float _660 = _558 * 0.5;
        float _661 = dot(vec3(_658, _659, _660), vec3(_658, _659, _660));
        float _666 = (_661 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_661);
        float _674 = (dot(vec3(_207, _208, _209), vec3(_666 * _658, _666 * _659, _666 * _660)) + 1.0) * 0.5;
        float _2978 = isnan(0.0) ? _674 : (isnan(_674) ? 0.0 : max(_674, 0.0));
        float _683 = sqrt(((_659 * _659) + (_658 * _658)) + (_660 * _660)) / (_571 + 9.9999997473787516355514526367188e-06);
        float _2989 = isnan(0.0) ? _683 : (isnan(_683) ? 0.0 : max(_683, 0.0));
        float _684 = isnan(1.0) ? _2989 : (isnan(_2989) ? 1.0 : min(_2989, 1.0));
        float _685 = _684 * 2.0;
        float _689 = (1.0 - _684) / (_684 + 1.0);
        float _3000 = isnan(0.0) ? _689 : (isnan(_689) ? 0.0 : max(_689, 0.0));
        float _690 = isnan(1.0) ? _3000 : (isnan(_3000) ? 1.0 : min(_3000, 1.0));
        float _699 = ((((1.0 - _690) * (_685 + 2.0)) * exp2(log2(isnan(1.0) ? _2978 : (isnan(_2978) ? 1.0 : min(_2978, 1.0))) * (_685 + 1.0))) + _690) * _571;
        _707 = _538;
        _709 = _537;
        _710 = _536;
        _711 = _548;
        _712 = _547;
        _713 = _546;
        _714 = _558;
        _715 = _557;
        _716 = _556;
        _717 = _571;
        _718 = _570;
        _719 = _569;
        _720 = cbModelParam._m0[36u].z * (isnan(0.0) ? _615 : (isnan(_615) ? 0.0 : max(_615, 0.0)));
        _721 = cbModelParam._m0[36u].z * (isnan(0.0) ? _657 : (isnan(_657) ? 0.0 : max(_657, 0.0)));
        _722 = cbModelParam._m0[36u].z * (isnan(0.0) ? _699 : (isnan(_699) ? 0.0 : max(_699, 0.0)));
    }
    else
    {
        _707 = _708;
        _709 = _708;
        _710 = _708;
        _711 = _708;
        _712 = _708;
        _713 = _708;
        _714 = _708;
        _715 = _708;
        _716 = _708;
        _717 = _708;
        _718 = _708;
        _719 = _708;
        _720 = 0.0;
        _721 = 0.0;
        _722 = 0.0;
    }
    float _1017;
    float _1018;
    float _1019;
    float _1020;
    float _1021;
    float _1022;
    float _1023;
    float _1024;
    float _1025;
    float _1026;
    float _1027;
    float _1028;
    float _1029;
    float _1030;
    float _1031;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _748 = fma(_405, cbModelParam._m0[30u].z, fma(_401, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _397));
        float _752 = fma(_405, cbModelParam._m0[31u].z, fma(_401, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _397));
        float _756 = fma(_405, cbModelParam._m0[32u].z, fma(_401, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _397));
        float _779 = _397 + _207;
        float _780 = _401 + _208;
        float _781 = _405 + _209;
        float _791 = fma(_781, cbModelParam._m0[30u].z, fma(_780, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _779)) - _748;
        float _792 = fma(_781, cbModelParam._m0[31u].z, fma(_780, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _779)) - _752;
        float _793 = fma(_781, cbModelParam._m0[32u].z, fma(_780, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _779)) - _756;
        float _797 = inversesqrt(dot(vec3(_791, _792, _793), vec3(_791, _792, _793)));
        float _810 = ((_797 * _791) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_748 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _811 = ((_797 * _792) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_752 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _812 = ((_797 * _793) / cbModelParam._m0[35u].z) + ((((((_756 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _814 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_810, _811, _812), 0.0);
        vec4 _821 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_810, _811, _812), 0.0);
        vec4 _828 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_810, _811, _812), 0.0);
        vec4 _835 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_810, _811, _812), 0.0);
        float _847 = exp2((_814.w + (-0.5)) * 20.0) * 2.0;
        float _848 = _847 * (_814.x + (-0.5));
        float _849 = _847 * (_814.y + (-0.5));
        float _850 = _847 * (_814.z + (-0.5));
        float _857 = exp2((_821.w + (-0.5)) * 20.0) * 2.0;
        float _858 = _857 * (_821.x + (-0.5));
        float _859 = _857 * (_821.y + (-0.5));
        float _860 = _857 * (_821.z + (-0.5));
        float _867 = exp2((_828.w + (-0.5)) * 20.0) * 2.0;
        float _868 = _867 * (_828.x + (-0.5));
        float _869 = _867 * (_828.y + (-0.5));
        float _870 = _867 * (_828.z + (-0.5));
        float _877 = exp2((_835.w + (-0.5)) * 20.0) * 2.0;
        float _878 = _877 * (_835.x + (-0.5));
        float _879 = _877 * (_835.y + (-0.5));
        float _880 = _877 * (_835.z + (-0.5));
        float _881 = isnan(0.0) ? _878 : (isnan(_878) ? 0.0 : max(_878, 0.0));
        float _882 = isnan(0.0) ? _879 : (isnan(_879) ? 0.0 : max(_879, 0.0));
        float _883 = isnan(0.0) ? _880 : (isnan(_880) ? 0.0 : max(_880, 0.0));
        float _884 = _848 * 0.5;
        float _885 = _858 * 0.5;
        float _886 = _868 * 0.5;
        float _887 = dot(vec3(_884, _885, _886), vec3(_884, _885, _886));
        float _892 = (_887 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_887);
        float _900 = (dot(vec3(_207, _208, _209), vec3(_892 * _884, _892 * _885, _892 * _886)) + 1.0) * 0.5;
        float _3041 = isnan(0.0) ? _900 : (isnan(_900) ? 0.0 : max(_900, 0.0));
        float _909 = sqrt(((_885 * _885) + (_884 * _884)) + (_886 * _886)) / (_881 + 9.9999997473787516355514526367188e-06);
        float _3052 = isnan(0.0) ? _909 : (isnan(_909) ? 0.0 : max(_909, 0.0));
        float _910 = isnan(1.0) ? _3052 : (isnan(_3052) ? 1.0 : min(_3052, 1.0));
        float _911 = _910 * 2.0;
        float _915 = (1.0 - _910) / (_910 + 1.0);
        float _3063 = isnan(0.0) ? _915 : (isnan(_915) ? 0.0 : max(_915, 0.0));
        float _916 = isnan(1.0) ? _3063 : (isnan(_3063) ? 1.0 : min(_3063, 1.0));
        float _925 = ((((1.0 - _916) * (_911 + 2.0)) * exp2(log2(isnan(1.0) ? _3041 : (isnan(_3041) ? 1.0 : min(_3041, 1.0))) * (_911 + 1.0))) + _916) * _881;
        float _926 = _849 * 0.5;
        float _927 = _859 * 0.5;
        float _928 = _869 * 0.5;
        float _929 = dot(vec3(_926, _927, _928), vec3(_926, _927, _928));
        float _934 = (_929 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_929);
        float _942 = (dot(vec3(_207, _208, _209), vec3(_934 * _926, _934 * _927, _934 * _928)) + 1.0) * 0.5;
        float _3074 = isnan(0.0) ? _942 : (isnan(_942) ? 0.0 : max(_942, 0.0));
        float _951 = sqrt(((_927 * _927) + (_926 * _926)) + (_928 * _928)) / (_882 + 9.9999997473787516355514526367188e-06);
        float _3085 = isnan(0.0) ? _951 : (isnan(_951) ? 0.0 : max(_951, 0.0));
        float _952 = isnan(1.0) ? _3085 : (isnan(_3085) ? 1.0 : min(_3085, 1.0));
        float _953 = _952 * 2.0;
        float _957 = (1.0 - _952) / (_952 + 1.0);
        float _3096 = isnan(0.0) ? _957 : (isnan(_957) ? 0.0 : max(_957, 0.0));
        float _958 = isnan(1.0) ? _3096 : (isnan(_3096) ? 1.0 : min(_3096, 1.0));
        float _967 = ((((1.0 - _958) * (_953 + 2.0)) * exp2(log2(isnan(1.0) ? _3074 : (isnan(_3074) ? 1.0 : min(_3074, 1.0))) * (_953 + 1.0))) + _958) * _882;
        float _968 = _850 * 0.5;
        float _969 = _860 * 0.5;
        float _970 = _870 * 0.5;
        float _971 = dot(vec3(_968, _969, _970), vec3(_968, _969, _970));
        float _976 = (_971 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_971);
        float _984 = (dot(vec3(_207, _208, _209), vec3(_976 * _968, _976 * _969, _976 * _970)) + 1.0) * 0.5;
        float _3107 = isnan(0.0) ? _984 : (isnan(_984) ? 0.0 : max(_984, 0.0));
        float _993 = sqrt(((_969 * _969) + (_968 * _968)) + (_970 * _970)) / (_883 + 9.9999997473787516355514526367188e-06);
        float _3118 = isnan(0.0) ? _993 : (isnan(_993) ? 0.0 : max(_993, 0.0));
        float _994 = isnan(1.0) ? _3118 : (isnan(_3118) ? 1.0 : min(_3118, 1.0));
        float _995 = _994 * 2.0;
        float _999 = (1.0 - _994) / (_994 + 1.0);
        float _3129 = isnan(0.0) ? _999 : (isnan(_999) ? 0.0 : max(_999, 0.0));
        float _1000 = isnan(1.0) ? _3129 : (isnan(_3129) ? 1.0 : min(_3129, 1.0));
        float _1009 = ((((1.0 - _1000) * (_995 + 2.0)) * exp2(log2(isnan(1.0) ? _3107 : (isnan(_3107) ? 1.0 : min(_3107, 1.0))) * (_995 + 1.0))) + _1000) * _883;
        _1017 = _850;
        _1018 = _849;
        _1019 = _848;
        _1020 = _860;
        _1021 = _859;
        _1022 = _858;
        _1023 = _870;
        _1024 = _869;
        _1025 = _868;
        _1026 = _883;
        _1027 = _882;
        _1028 = _881;
        _1029 = cbModelParam._m0[36u].w * (isnan(0.0) ? _925 : (isnan(_925) ? 0.0 : max(_925, 0.0)));
        _1030 = cbModelParam._m0[36u].w * (isnan(0.0) ? _967 : (isnan(_967) ? 0.0 : max(_967, 0.0)));
        _1031 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1009 : (isnan(_1009) ? 0.0 : max(_1009, 0.0)));
    }
    else
    {
        _1017 = _708;
        _1018 = _708;
        _1019 = _708;
        _1020 = _708;
        _1021 = _708;
        _1022 = _708;
        _1023 = _708;
        _1024 = _708;
        _1025 = _708;
        _1026 = _708;
        _1027 = _708;
        _1028 = _708;
        _1029 = 0.0;
        _1030 = 0.0;
        _1031 = 0.0;
    }
    float _1041 = (cbModelParam._m0[1u].x * (_1029 - _720)) + _720;
    float _1042 = (cbModelParam._m0[1u].x * (_1030 - _721)) + _721;
    float _1043 = (cbModelParam._m0[1u].x * (_1031 - _722)) + _722;
    float _1064 = fma(_1043, cbSceneParam._m0[89u].z, fma(_1042, cbSceneParam._m0[89u].y, _1041 * cbSceneParam._m0[89u].x));
    float _1067 = fma(_1043, cbSceneParam._m0[90u].z, fma(_1042, cbSceneParam._m0[90u].y, _1041 * cbSceneParam._m0[90u].x));
    float _1070 = fma(_1043, cbSceneParam._m0[91u].z, fma(_1042, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1041));
    float _1085 = _373 * 0.5;
    float _1086 = _374 * 0.5;
    float _1087 = _375 * 0.5;
    float _1088 = dot(vec4(_1085, _1086, _1087, 1.0), vec4(_1019, _1022, _1025, _1028));
    float _1091 = dot(vec4(_1085, _1086, _1087, 1.0), vec4(_1018, _1021, _1024, _1027));
    float _1094 = dot(vec4(_1085, _1086, _1087, 1.0), vec4(_1017, _1020, _1023, _1026));
    float _1128;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1101 = dot(vec4(_1085, _1086, _1087, 1.0), vec4(_707, _711, _714, _717));
        float _1105 = dot(vec4(_1085, _1086, _1087, 1.0), vec4(_709, _712, _715, _718));
        float _1109 = dot(vec4(_1085, _1086, _1087, 1.0), vec4(_710, _713, _716, _719));
        float _1116 = dot(vec4(cbModelParam._m0[39u]), vec4(_1085, _1086, _1087, 1.0));
        _1128 = dot(vec3(isnan(0.0) ? _1109 : (isnan(_1109) ? 0.0 : max(_1109, 0.0)), isnan(0.0) ? _1105 : (isnan(_1105) ? 0.0 : max(_1105, 0.0)), isnan(0.0) ? _1101 : (isnan(_1101) ? 0.0 : max(_1101, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1116) ? 0.0 : (isnan(0.0) ? _1116 : max(0.0, _1116))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1128 = 1.0;
    }
    float _1139;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1130 = dot(vec4(cbModelParam._m0[40u]), vec4(_1085, _1086, _1087, 1.0));
        _1139 = dot(vec3(isnan(0.0) ? _1088 : (isnan(_1088) ? 0.0 : max(_1088, 0.0)), isnan(0.0) ? _1091 : (isnan(_1091) ? 0.0 : max(_1091, 0.0)), isnan(0.0) ? _1094 : (isnan(_1094) ? 0.0 : max(_1094, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1130) ? 0.0 : (isnan(0.0) ? _1130 : max(0.0, _1130))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1139 = 1.0;
    }
    float _1143 = (_1139 * cbModelParam._m0[1u].x) + (_1128 * (1.0 - cbModelParam._m0[1u].x));
    float _1152 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1234;
    float _1236;
    float _1238;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1201 = fma(_405, cbModelParam._m0[13u].z, fma(_401, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _397)) + cbModelParam._m0[13u].w;
        float _1205 = fma(_405, cbModelParam._m0[14u].z, fma(_401, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _397)) + cbModelParam._m0[14u].w;
        float _1209 = fma(_405, cbModelParam._m0[15u].z, fma(_401, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _397)) + cbModelParam._m0[15u].w;
        float _1212 = fma(_375, cbModelParam._m0[13u].z, fma(_374, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _373));
        float _1215 = fma(_375, cbModelParam._m0[14u].z, fma(_374, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _373));
        float _1218 = fma(_375, cbModelParam._m0[15u].z, fma(_374, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _373));
        float _1244;
        if (_1212 > 0.0)
        {
            _1244 = abs((1.0 - _1201) / _1212);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1212 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1201 + 1.0) / _1212);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1244 = frontier_phi_16_14_ladder;
        }
        float _1452;
        if (_1215 > 0.0)
        {
            _1452 = abs((1.0 - _1205) / _1215);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1215 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1205 + 1.0) / _1215);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1452 = frontier_phi_25_21_ladder;
        }
        float _1641;
        if (_1218 > 0.0)
        {
            _1641 = abs((1.0 - _1209) / _1218);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1218 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1209 + 1.0) / _1218);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1641 = frontier_phi_37_32_ladder;
        }
        float _1643 = isnan(_1452) ? _1244 : (isnan(_1244) ? _1452 : min(_1244, _1452));
        float _1644 = isnan(_1641) ? _1643 : (isnan(_1643) ? _1641 : min(_1643, _1641));
        float _1648 = (_1644 * _1212) + _1201;
        float _1649 = (_1644 * _1215) + _1205;
        float _1650 = (_1644 * _1218) + _1209;
        float _1651 = _1644 * 9.9999997473787516355514526367188e-05;
        float _1653 = (-1.0) - _1651;
        float _1655 = _1651 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_1650 > _1655) || ((_1650 < _1653) || ((_1649 > _1655) || ((_1649 < _1653) || ((_1648 < _1653) || (_1648 > _1655))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1747 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1650, cbModelParam._m0[9u].z, fma(_1649, cbModelParam._m0[9u].y, _1648 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1650, cbModelParam._m0[10u].z, fma(_1649, cbModelParam._m0[10u].y, _1648 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1650, cbModelParam._m0[11u].z, fma(_1649, cbModelParam._m0[11u].y, _1648 * cbModelParam._m0[11u].x))), _1152);
            frontier_phi_15_37_ladder = _1747.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _1747.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _1747.x * cbModelParam._m0[1u].y;
        }
        _1234 = frontier_phi_15_37_ladder_2;
        _1236 = frontier_phi_15_37_ladder_1;
        _1238 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1222 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_373, _374, _375), _1152);
        _1234 = _1222.x * cbModelParam._m0[1u].y;
        _1236 = _1222.y * cbModelParam._m0[1u].y;
        _1238 = _1222.z * cbModelParam._m0[1u].y;
    }
    float _1241 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1334;
    float _1336;
    float _1338;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1298 = fma(_405, cbModelParam._m0[21u].z, fma(_401, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _397)) + cbModelParam._m0[21u].w;
        float _1302 = fma(_405, cbModelParam._m0[22u].z, fma(_401, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _397)) + cbModelParam._m0[22u].w;
        float _1306 = fma(_405, cbModelParam._m0[23u].z, fma(_401, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _397)) + cbModelParam._m0[23u].w;
        float _1309 = fma(_375, cbModelParam._m0[21u].z, fma(_374, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _373));
        float _1312 = fma(_375, cbModelParam._m0[22u].z, fma(_374, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _373));
        float _1315 = fma(_375, cbModelParam._m0[23u].z, fma(_374, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _373));
        float _1457;
        if (_1309 > 0.0)
        {
            _1457 = abs((1.0 - _1298) / _1309);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1309 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1298 + 1.0) / _1309);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1457 = frontier_phi_27_23_ladder;
        }
        float _1668;
        if (_1312 > 0.0)
        {
            _1668 = abs((1.0 - _1302) / _1312);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1312 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1302 + 1.0) / _1312);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _1668 = frontier_phi_39_34_ladder;
        }
        float _1819;
        if (_1315 > 0.0)
        {
            _1819 = abs((1.0 - _1306) / _1315);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1315 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1306 + 1.0) / _1315);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _1819 = frontier_phi_48_45_ladder;
        }
        float _1821 = isnan(_1668) ? _1457 : (isnan(_1457) ? _1668 : min(_1457, _1668));
        float _1822 = isnan(_1819) ? _1821 : (isnan(_1821) ? _1819 : min(_1821, _1819));
        float _1826 = (_1822 * _1309) + _1298;
        float _1827 = (_1822 * _1312) + _1302;
        float _1828 = (_1822 * _1315) + _1306;
        float _1829 = _1822 * 9.9999997473787516355514526367188e-05;
        float _1830 = (-1.0) - _1829;
        float _1832 = _1829 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_1828 > _1832) || ((_1828 < _1830) || ((_1827 > _1832) || ((_1827 < _1830) || ((_1826 < _1830) || (_1826 > _1832))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2028 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_1828, cbModelParam._m0[17u].z, fma(_1827, cbModelParam._m0[17u].y, _1826 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_1828, cbModelParam._m0[18u].z, fma(_1827, cbModelParam._m0[18u].y, _1826 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_1828, cbModelParam._m0[19u].z, fma(_1827, cbModelParam._m0[19u].y, _1826 * cbModelParam._m0[19u].x))), _1241);
            frontier_phi_24_48_ladder = _2028.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2028.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2028.x * cbModelParam._m0[1u].z;
        }
        _1334 = frontier_phi_24_48_ladder_2;
        _1336 = frontier_phi_24_48_ladder_1;
        _1338 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1318 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_373, _374, _375), _1241);
        _1334 = _1318.x * cbModelParam._m0[1u].z;
        _1336 = _1318.y * cbModelParam._m0[1u].z;
        _1338 = _1318.z * cbModelParam._m0[1u].z;
    }
    float _1350 = _364 * 0.01200000010430812835693359375;
    float _1352 = _1350 * ((cbModelParam._m0[1u].w * (_1334 - _1234)) + _1234);
    float _1353 = _1350 * ((cbModelParam._m0[1u].w * (_1336 - _1236)) + _1236);
    float _1354 = _1350 * ((cbModelParam._m0[1u].w * (_1338 - _1238)) + _1238);
    float _1357 = fma(_1354, cbSceneParam._m0[89u].z, fma(_1353, cbSceneParam._m0[89u].y, _1352 * cbSceneParam._m0[89u].x));
    float _1360 = fma(_1354, cbSceneParam._m0[90u].z, fma(_1353, cbSceneParam._m0[90u].y, _1352 * cbSceneParam._m0[90u].x));
    float _1363 = fma(_1354, cbSceneParam._m0[91u].z, fma(_1353, cbSceneParam._m0[91u].y, _1352 * cbSceneParam._m0[91u].x));
    uvec4 _1373 = floatBitsToUint(cbInstanceData._m0[_338 + 5u]);
    uint _1375 = _1373.x * 14u;
    uint _1376 = _1375 + 13u;
    float _1383 = _364 + (-1.0);
    float _1389 = (cbLight._m0[_1376].x * _1383) + 1.0;
    float _1390 = (cbLight._m0[_1376].y * _1383) + 1.0;
    float _1391 = (cbLight._m0[_1376].z * _1383) + 1.0;
    float _1392 = (cbLight._m0[_1376].w * _1383) + 1.0;
    uint _1393 = _1375 + 5u;
    float _1399 = isnan(1.0) ? _1390 : (isnan(_1390) ? 1.0 : min(_1390, 1.0));
    uint _1403 = _1375 + 4u;
    float _1410 = isnan(1.0) ? _1389 : (isnan(_1389) ? 1.0 : min(_1389, 1.0));
    uint _1414 = _1375 | 1u;
    float _1425 = dot(vec3(cbLight._m0[_1375].xyz), vec3(_207, _208, _209));
    float _1428 = dot(vec3(cbLight._m0[_1414].xyz), vec3(_207, _208, _209));
    float _3265 = isnan(0.0) ? _1425 : (isnan(_1425) ? 0.0 : max(_1425, 0.0));
    float _3276 = isnan(0.0) ? _1428 : (isnan(_1428) ? 0.0 : max(_1428, 0.0));
    float _1433 = (isnan(1.0) ? _3265 : (isnan(_3265) ? 1.0 : min(_3265, 1.0))) * 0.3183098733425140380859375;
    float _1435 = (isnan(1.0) ? _3276 : (isnan(_3276) ? 1.0 : min(_3276, 1.0))) * 0.3183098733425140380859375;
    float _1442 = ((cbLight._m0[_1393].x * _1399) * _1435) + ((cbLight._m0[_1403].x * _1410) * _1433);
    float _1443 = ((_1399 * cbLight._m0[_1393].y) * _1435) + ((_1410 * cbLight._m0[_1403].y) * _1433);
    float _1444 = ((_1399 * cbLight._m0[_1393].z) * _1435) + ((_1410 * cbLight._m0[_1403].z) * _1433);
    uvec4 _1449 = floatBitsToUint(cbLight._m0[_1375 + 12u]);
    bool _1451 = _1449.x == 0u;
    float _1462;
    float _1464;
    float _1466;
    if (_1451)
    {
        _1462 = _1442;
        _1464 = _1443;
        _1466 = _1444;
    }
    else
    {
        uint _1470 = _1375 + 6u;
        float _1486 = (dot(vec3(cbLight._m0[_1375 + 2u].xyz), vec3(_207, _208, _209)) * 0.5) + 0.5;
        float _1487 = _1486 * _1486;
        float _3287 = isnan(0.0) ? _1487 : (isnan(_1487) ? 0.0 : max(_1487, 0.0));
        float _1488 = isnan(1.0) ? _3287 : (isnan(_3287) ? 1.0 : min(_3287, 1.0));
        float _1489 = isnan(1.0) ? _1391 : (isnan(_1391) ? 1.0 : min(_1391, 1.0));
        _1462 = (((cbLight._m0[_1470].x * 0.3183098733425140380859375) * _1488) * _1489) + _1442;
        _1464 = (((cbLight._m0[_1470].y * 0.3183098733425140380859375) * _1488) * _1489) + _1443;
        _1466 = (((cbLight._m0[_1470].z * 0.3183098733425140380859375) * _1488) * _1489) + _1444;
    }
    bool _1469 = _1449.y == 0u;
    float _1507;
    float _1509;
    float _1511;
    if (_1469)
    {
        _1507 = _1462;
        _1509 = _1464;
        _1511 = _1466;
    }
    else
    {
        uint _1612 = _1375 + 7u;
        float _1628 = (dot(vec3(cbLight._m0[_1375 + 3u].xyz), vec3(_207, _208, _209)) * 0.5) + 0.5;
        float _1629 = _1628 * _1628;
        float _3303 = isnan(0.0) ? _1629 : (isnan(_1629) ? 0.0 : max(_1629, 0.0));
        float _1630 = isnan(1.0) ? _3303 : (isnan(_3303) ? 1.0 : min(_3303, 1.0));
        float _1631 = isnan(1.0) ? _1392 : (isnan(_1392) ? 1.0 : min(_1392, 1.0));
        _1507 = (((cbLight._m0[_1612].x * 0.3183098733425140380859375) * _1630) * _1631) + _1462;
        _1509 = (((cbLight._m0[_1612].y * 0.3183098733425140380859375) * _1630) * _1631) + _1464;
        _1511 = (((cbLight._m0[_1612].z * 0.3183098733425140380859375) * _1630) * _1631) + _1466;
    }
    uint _1513 = _1375 + 8u;
    float _1519 = cbLight._m0[_1375].x + _289;
    float _1520 = cbLight._m0[_1375].y + _290;
    float _1521 = cbLight._m0[_1375].z + _291;
    float _1525 = inversesqrt(dot(vec3(_1519, _1520, _1521), vec3(_1519, _1520, _1521)));
    float _1529 = dot(vec3(_207, _208, _209), vec3(cbLight._m0[_1375].xyz));
    float _3319 = isnan(0.0) ? _1529 : (isnan(_1529) ? 0.0 : max(_1529, 0.0));
    float _1532 = isnan(1.0) ? _3319 : (isnan(_3319) ? 1.0 : min(_3319, 1.0));
    float _3330 = isnan(0.0) ? _365 : (isnan(_365) ? 0.0 : max(_365, 0.0));
    float _1533 = isnan(1.0) ? _3330 : (isnan(_3330) ? 1.0 : min(_3330, 1.0));
    float _1534 = dot(vec3(cbLight._m0[_1375].xyz), vec3(_1519 * _1525, _1520 * _1525, _1521 * _1525));
    float _3341 = isnan(0.0) ? _1534 : (isnan(_1534) ? 0.0 : max(_1534, 0.0));
    float _1545 = (exp2(log2(1.0 - (isnan(1.0) ? _3341 : (isnan(_3341) ? 1.0 : min(_3341, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1551 = (0.5 / ((_1532 + 9.9999999392252902907785028219223e-09) + _1533)) * _1532;
    float _3352 = isnan(0.0) ? _1551 : (isnan(_1551) ? 0.0 : max(_1551, 0.0));
    float _1553 = (isnan(1.0) ? _3352 : (isnan(_3352) ? 1.0 : min(_3352, 1.0))) * 0.31831014156341552734375;
    uint _1564 = _1375 + 9u;
    float _1570 = cbLight._m0[_1414].x + _289;
    float _1571 = cbLight._m0[_1414].y + _290;
    float _1572 = cbLight._m0[_1414].z + _291;
    float _1576 = inversesqrt(dot(vec3(_1570, _1571, _1572), vec3(_1570, _1571, _1572)));
    float _1580 = dot(vec3(_207, _208, _209), vec3(cbLight._m0[_1414].xyz));
    float _3363 = isnan(0.0) ? _1580 : (isnan(_1580) ? 0.0 : max(_1580, 0.0));
    float _1583 = isnan(1.0) ? _3363 : (isnan(_3363) ? 1.0 : min(_3363, 1.0));
    float _1584 = dot(vec3(cbLight._m0[_1414].xyz), vec3(_1570 * _1576, _1571 * _1576, _1572 * _1576));
    float _3374 = isnan(0.0) ? _1584 : (isnan(_1584) ? 0.0 : max(_1584, 0.0));
    float _1593 = (exp2(log2(1.0 - (isnan(1.0) ? _3374 : (isnan(_3374) ? 1.0 : min(_3374, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1597 = (0.5 / ((_1583 + 9.9999999392252902907785028219223e-09) + _1533)) * _1583;
    float _3385 = isnan(0.0) ? _1597 : (isnan(_1597) ? 0.0 : max(_1597, 0.0));
    float _1599 = (isnan(1.0) ? _3385 : (isnan(_3385) ? 1.0 : min(_3385, 1.0))) * 0.31831014156341552734375;
    float _1609 = (((_1593 * cbLight._m0[_1564].x) * _1599) * _1399) + (((_1545 * cbLight._m0[_1513].x) * _1553) * _1410);
    float _1610 = (((_1593 * cbLight._m0[_1564].y) * _1599) * _1399) + (((_1545 * cbLight._m0[_1513].y) * _1553) * _1410);
    float _1611 = (((_1593 * cbLight._m0[_1564].z) * _1599) * _1399) + (((_1545 * cbLight._m0[_1513].z) * _1553) * _1410);
    float _1673;
    float _1675;
    float _1677;
    if (_1451)
    {
        _1673 = _1609;
        _1675 = _1610;
        _1677 = _1611;
    }
    else
    {
        uint _1679 = _1375 + 10u;
        uint _1685 = _1375 + 2u;
        float _1691 = cbLight._m0[_1685].x + _289;
        float _1692 = cbLight._m0[_1685].y + _290;
        float _1693 = cbLight._m0[_1685].z + _291;
        float _1697 = inversesqrt(dot(vec3(_1691, _1692, _1693), vec3(_1691, _1692, _1693)));
        float _1701 = dot(vec3(_207, _208, _209), vec3(cbLight._m0[_1685].xyz));
        float _3396 = isnan(0.0) ? _1701 : (isnan(_1701) ? 0.0 : max(_1701, 0.0));
        float _1704 = isnan(1.0) ? _3396 : (isnan(_3396) ? 1.0 : min(_3396, 1.0));
        float _1705 = dot(vec3(cbLight._m0[_1685].xyz), vec3(_1691 * _1697, _1692 * _1697, _1693 * _1697));
        float _3407 = isnan(0.0) ? _1705 : (isnan(_1705) ? 0.0 : max(_1705, 0.0));
        float _1714 = (exp2(log2(1.0 - (isnan(1.0) ? _3407 : (isnan(_3407) ? 1.0 : min(_3407, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1718 = (0.5 / ((_1704 + 9.9999999392252902907785028219223e-09) + _1533)) * _1704;
        float _3418 = isnan(0.0) ? _1718 : (isnan(_1718) ? 0.0 : max(_1718, 0.0));
        float _1720 = (isnan(1.0) ? _3418 : (isnan(_3418) ? 1.0 : min(_3418, 1.0))) * 0.31831014156341552734375;
        float _1721 = isnan(1.0) ? _1391 : (isnan(_1391) ? 1.0 : min(_1391, 1.0));
        _1673 = (((_1714 * cbLight._m0[_1679].x) * _1720) * _1721) + _1609;
        _1675 = (((_1714 * cbLight._m0[_1679].y) * _1720) * _1721) + _1610;
        _1677 = (((_1714 * cbLight._m0[_1679].z) * _1720) * _1721) + _1611;
    }
    float _1756;
    float _1758;
    float _1760;
    if (_1469)
    {
        _1756 = _1673;
        _1758 = _1675;
        _1760 = _1677;
    }
    else
    {
        uint _1767 = _1375 + 11u;
        uint _1773 = _1375 + 3u;
        float _1779 = cbLight._m0[_1773].x + _289;
        float _1780 = cbLight._m0[_1773].y + _290;
        float _1781 = cbLight._m0[_1773].z + _291;
        float _1785 = inversesqrt(dot(vec3(_1779, _1780, _1781), vec3(_1779, _1780, _1781)));
        float _1789 = dot(vec3(_207, _208, _209), vec3(cbLight._m0[_1773].xyz));
        float _3434 = isnan(0.0) ? _1789 : (isnan(_1789) ? 0.0 : max(_1789, 0.0));
        float _1792 = isnan(1.0) ? _3434 : (isnan(_3434) ? 1.0 : min(_3434, 1.0));
        float _1793 = dot(vec3(cbLight._m0[_1773].xyz), vec3(_1779 * _1785, _1780 * _1785, _1781 * _1785));
        float _3445 = isnan(0.0) ? _1793 : (isnan(_1793) ? 0.0 : max(_1793, 0.0));
        float _1802 = (exp2(log2(1.0 - (isnan(1.0) ? _3445 : (isnan(_3445) ? 1.0 : min(_3445, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1806 = (0.5 / ((_1792 + 9.9999999392252902907785028219223e-09) + _1533)) * _1792;
        float _3456 = isnan(0.0) ? _1806 : (isnan(_1806) ? 0.0 : max(_1806, 0.0));
        float _1808 = (isnan(1.0) ? _3456 : (isnan(_3456) ? 1.0 : min(_3456, 1.0))) * 0.31831014156341552734375;
        float _1809 = isnan(1.0) ? _1392 : (isnan(_1392) ? 1.0 : min(_1392, 1.0));
        _1756 = (((_1802 * cbLight._m0[_1767].x) * _1808) * _1809) + _1673;
        _1758 = (((_1802 * cbLight._m0[_1767].y) * _1808) * _1809) + _1675;
        _1760 = (((_1802 * cbLight._m0[_1767].z) * _1808) * _1809) + _1677;
    }
    float _1943;
    float _1945;
    float _1947;
    float _1949;
    float _1951;
    float _1953;
    if (_1373.y == 0u)
    {
        float _1884 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1885 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1884;
        float _1886 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1884;
        float _1887 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1884;
        uvec4 _1899 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1900 = _1899.x;
        uint _1911 = uint((float(_1899.y) * floor(float(uint(cbSceneParam._m0[85u].y * _298) / _1900))) + floor(float(uint(cbSceneParam._m0[85u].x * _297) / _1900)));
        float _1921 = (log2(_1887 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _1922 = isnan(0.0) ? _1921 : (isnan(_1921) ? 0.0 : max(_1921, 0.0));
        uint _1925 = uint(isnan(14.0) ? _1922 : (isnan(_1922) ? 14.0 : min(_1922, 14.0)));
        uvec4 _1930 = texelFetch(g_lightClusterGridBuffer, int(((_1925 << 2u) + (_1911 << 6u)) >> 2u));
        uint _1931 = _1930.x;
        uint _1932 = _1899.z;
        float _2033;
        float _2035;
        float _2037;
        float _2039;
        float _2041;
        float _2043;
        if (((((1u << ((_1932 >> 4u) & 15u)) + 4294967295u) & _1931) == 0u) || ((_1932 & 240u) == 0u))
        {
            _2033 = 0.0;
            _2035 = 0.0;
            _2037 = 0.0;
            _2039 = 0.0;
            _2041 = 0.0;
            _2043 = 0.0;
        }
        else
        {
            float _2034;
            float _2036;
            float _2038;
            float _2040;
            float _2042;
            float _2044;
            float _2175 = 0.0;
            float _2176 = 0.0;
            float _2177 = 0.0;
            float _2178 = 0.0;
            float _2179 = 0.0;
            float _2180 = 0.0;
            uint _2181 = 0u;
            uint _2190;
            bool _2191;
            for (;;)
            {
                _2190 = texelFetch(g_lightClassification, int((((_1925 << 5u) + (_1911 << 9u)) + (_2181 << 2u)) >> 2u)).x;
                _2191 = _2190 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2191)
                {
                    frontier_phi_63_pred = _2180;
                    frontier_phi_63_pred_1 = _2179;
                    frontier_phi_63_pred_2 = _2178;
                    frontier_phi_63_pred_3 = _2177;
                    frontier_phi_63_pred_4 = _2176;
                    frontier_phi_63_pred_5 = _2175;
                }
                else
                {
                    float _2299;
                    float _2300;
                    float _2301;
                    float _2302;
                    float _2303;
                    float _2304;
                    uint _2305;
                    _2299 = _2175;
                    _2300 = _2176;
                    _2301 = _2177;
                    _2302 = _2178;
                    _2303 = _2179;
                    _2304 = _2180;
                    _2305 = _2190;
                    float _2231;
                    float _2232;
                    float _2233;
                    float _2234;
                    float _2235;
                    float _2236;
                    for (;;)
                    {
                        uint _2309 = uint(findLSB(_2305)) + (_2181 << 5u);
                        uint _2306 = (_2305 + 4294967295u) & _2305;
                        uint _2311 = _2309 * 48u;
                        vec4 _2325 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2311)).x, texelFetch(g_PointLightRenderingBuffer, int(_2311 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2311 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2311 + 3u)).x));
                        uint _2331 = (_2309 * 48u) + 4u;
                        vec4 _2344 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2331)).x, texelFetch(g_PointLightRenderingBuffer, int(_2331 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2331 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2331 + 3u)).x));
                        uint _2350 = (_2309 * 48u) + 8u;
                        vec3 _2361 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2350)).x, texelFetch(g_PointLightRenderingBuffer, int(_2350 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2350 + 2u)).x));
                        float _2365 = _2325.x - _1885;
                        float _2366 = _2325.y - _1886;
                        float _2367 = _2325.z - _1887;
                        float _2368 = dot(vec3(_2365, _2366, _2367), vec3(_2365, _2366, _2367));
                        float _2371 = inversesqrt(_2368);
                        float _2380 = 1.0 - (_2368 * _2325.w);
                        float _3482 = isnan(0.0) ? _2380 : (isnan(_2380) ? 0.0 : max(_2380, 0.0));
                        float _2381 = isnan(1.0) ? _3482 : (isnan(_3482) ? 1.0 : min(_3482, 1.0));
                        float _2382 = sqrt(_2368) * _2344.w;
                        float _2385 = 1.39999997615814208984375 / (_2382 + 1.39999997615814208984375);
                        float _2386 = _2385 * _2385;
                        float _2389 = ((1.0 - _2386) * dot(vec3(_319, _322, _325), vec3(_2371 * _2365, _2371 * _2366, _2371 * _2367))) + _2386;
                        float _2392 = _2382 * _2382;
                        float _2396 = ((isnan(0.0) ? _2389 : (isnan(_2389) ? 0.0 : max(_2389, 0.0))) * _2381) / ((_2392 * 0.699999988079071044921875) + 1.0);
                        float _2400 = (-0.0) - _1885;
                        float _2401 = (-0.0) - _1886;
                        float _2402 = (-0.0) - _1887;
                        float _2406 = inversesqrt(dot(vec3(_2400, _2401, _2402), vec3(_2400, _2401, _2402)));
                        float _2410 = dot(vec3(_319, _322, _325), vec3(_2406 * _2400, _2406 * _2401, _2406 * _2402));
                        float _3498 = isnan(0.0) ? _2410 : (isnan(_2410) ? 0.0 : max(_2410, 0.0));
                        float _3509 = isnan(0.0) ? _2389 : (isnan(_2389) ? 0.0 : max(_2389, 0.0));
                        float _2414 = isnan(1.0) ? _3509 : (isnan(_3509) ? 1.0 : min(_3509, 1.0));
                        float _2418 = (0.5 / (((isnan(1.0) ? _3498 : (isnan(_3498) ? 1.0 : min(_3498, 1.0))) + 9.9999999392252902907785028219223e-09) + _2414)) * _2414;
                        float _3520 = isnan(0.0) ? _2418 : (isnan(_2418) ? 0.0 : max(_2418, 0.0));
                        float _2427 = (((isnan(1.0) ? _3520 : (isnan(_3520) ? 1.0 : min(_3520, 1.0))) * 3.1415927410125732421875) / ((_2392 * 2.1991131305694580078125) + 3.141590118408203125)) * _2381;
                        _2234 = (_2396 * _2344.x) + _2302;
                        _2235 = (_2396 * _2344.y) + _2303;
                        _2236 = (_2396 * _2344.z) + _2304;
                        _2231 = (_2427 * _2361.x) + _2299;
                        _2232 = (_2427 * _2361.y) + _2300;
                        _2233 = (_2427 * _2361.z) + _2301;
                        if (_2306 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2299 = _2231;
                            _2300 = _2232;
                            _2301 = _2233;
                            _2302 = _2234;
                            _2303 = _2235;
                            _2304 = _2236;
                            _2305 = _2306;
                        }
                    }
                    frontier_phi_63_pred = _2236;
                    frontier_phi_63_pred_1 = _2235;
                    frontier_phi_63_pred_2 = _2234;
                    frontier_phi_63_pred_3 = _2233;
                    frontier_phi_63_pred_4 = _2232;
                    frontier_phi_63_pred_5 = _2231;
                }
                _2044 = frontier_phi_63_pred;
                _2042 = frontier_phi_63_pred_1;
                _2040 = frontier_phi_63_pred_2;
                _2038 = frontier_phi_63_pred_3;
                _2036 = frontier_phi_63_pred_4;
                _2034 = frontier_phi_63_pred_5;
                uint _2182 = _2181 + 1u;
                if (_2182 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2175 = _2034;
                    _2176 = _2036;
                    _2177 = _2038;
                    _2178 = _2040;
                    _2179 = _2042;
                    _2180 = _2044;
                    _2181 = _2182;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2033 = _2034;
            _2035 = _2036;
            _2037 = _2038;
            _2039 = _2040;
            _2041 = _2042;
            _2043 = _2044;
        }
        uvec4 _2047 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2048 = _2047.z;
        uint _2050 = (_2048 >> 8u) & 15u;
        float _2146;
        float _2148;
        float _2150;
        float _2152;
        float _2154;
        float _2156;
        if (((4294967295u << _2050) & _1931) == 0u)
        {
            _2146 = _2033;
            _2148 = _2035;
            _2150 = _2037;
            _2152 = _2039;
            _2154 = _2041;
            _2156 = _2043;
        }
        else
        {
            float _2171 = inversesqrt(dot(vec3(_1885, _1886, _1887), vec3(_1885, _1886, _1887)));
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2050 < ((_2048 >> 12u) & 15u))
            {
                float _2147;
                float _2149;
                float _2151;
                float _2153;
                float _2155;
                float _2157;
                float _2282 = _2033;
                float _2283 = _2035;
                float _2284 = _2037;
                float _2285 = _2039;
                float _2286 = _2041;
                float _2287 = _2043;
                uint _2288 = _2050;
                uint _2297;
                bool _2298;
                for (;;)
                {
                    _2297 = texelFetch(g_lightClassification, int((((_1925 << 5u) + (_1911 << 9u)) + (_2288 << 2u)) >> 2u)).x;
                    _2298 = _2297 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_2298)
                    {
                        frontier_phi_69_pred = _2287;
                        frontier_phi_69_pred_1 = _2286;
                        frontier_phi_69_pred_2 = _2285;
                        frontier_phi_69_pred_3 = _2284;
                        frontier_phi_69_pred_4 = _2283;
                        frontier_phi_69_pred_5 = _2282;
                    }
                    else
                    {
                        float _2432;
                        float _2433;
                        float _2434;
                        float _2435;
                        float _2436;
                        float _2437;
                        float _2684;
                        float _2685;
                        float _2686;
                        float _2687;
                        float _2688;
                        float _2689;
                        float _2445 = _2282;
                        float _2446 = _2283;
                        float _2447 = _2284;
                        float _2448 = _2285;
                        float _2449 = _2286;
                        float _2450 = _2287;
                        uint _2451 = _2297;
                        uint _2452;
                        vec4 _2477;
                        float _2478;
                        vec4 _2493;
                        vec3 _2505;
                        vec4 _2521;
                        vec4 _2537;
                        float _2584;
                        bool _2585;
                        for (;;)
                        {
                            uint _2462 = ((_2288 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2451));
                            _2452 = (_2451 + 4294967295u) & _2451;
                            uint _2464 = _2462 * 40u;
                            _2477 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2464)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2464 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2464 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2464 + 3u)).x));
                            _2478 = _2477.w;
                            uint _2480 = (_2462 * 40u) + 4u;
                            _2493 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2480)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2480 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2480 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2480 + 3u)).x));
                            uint _2495 = (_2462 * 40u) + 8u;
                            _2505 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2495)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2495 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2495 + 2u)).x));
                            uint _2508 = (_2462 * 40u) + 16u;
                            _2521 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2508)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2508 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2508 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2508 + 3u)).x));
                            uint _2524 = (_2462 * 40u) + 20u;
                            _2537 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2524)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2524 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2524 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2524 + 3u)).x));
                            uint _2540 = (_2462 * 40u) + 24u;
                            vec4 _2553 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2540)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2540 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2540 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2540 + 3u)).x));
                            uint _2559 = (_2462 * 40u) + 28u;
                            vec4 _2572 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2559)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2559 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2559 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2559 + 3u)).x));
                            _2584 = fma(_1887, _2572.z, fma(_1886, _2572.y, _2572.x * _1885)) + _2572.w;
                            _2585 = !((fma(_1887, _2553.z, fma(_1886, _2553.y, _2553.x * _1885)) + _2553.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_2585)
                            {
                                float _2612 = _2477.x - _1885;
                                float _2613 = _2477.y - _1886;
                                float _2614 = _2477.z - _1887;
                                float _2615 = dot(vec3(_2612, _2613, _2614), vec3(_2612, _2613, _2614));
                                float _2618 = inversesqrt(_2615);
                                float _2619 = _2618 * _2612;
                                float _2620 = _2618 * _2613;
                                float _2621 = _2618 * _2614;
                                float _2625 = 1.0 - (_2615 / (_2478 * _2478));
                                float _3531 = isnan(0.0) ? _2625 : (isnan(_2625) ? 0.0 : max(_2625, 0.0));
                                float _2626 = isnan(1.0) ? _3531 : (isnan(_3531) ? 1.0 : min(_3531, 1.0));
                                float _2630 = sqrt(_2615) * _2493.w;
                                float _2632 = 1.39999997615814208984375 / (_2630 + 1.39999997615814208984375);
                                float _2633 = _2632 * _2632;
                                float _2634 = 1.0 - _2633;
                                float _2636 = (_2634 * dot(vec3(_2619, _2620, _2621), vec3(_319, _322, _325))) + _2633;
                                float _2639 = _2630 * _2630;
                                float _2643 = (fma(_1887, _2521.z, fma(_1886, _2521.y, _2521.x * _1885)) + _2521.w) / _2584;
                                float _2644 = (fma(_1887, _2537.z, fma(_1886, _2537.y, _2537.x * _1885)) + _2537.w) / _2584;
                                float _2648 = 1.0 - dot(vec2(_2643, _2644), vec2(_2643, _2644));
                                float _3547 = isnan(0.0) ? _2648 : (isnan(_2648) ? 0.0 : max(_2648, 0.0));
                                float _2649 = isnan(1.0) ? _3547 : (isnan(_3547) ? 1.0 : min(_3547, 1.0));
                                float _2650 = _2649 * (((isnan(0.0) ? _2636 : (isnan(_2636) ? 0.0 : max(_2636, 0.0))) * _2626) / ((_2639 * 0.699999988079071044921875) + 1.0));
                                float _2660 = dot(vec3(_319, _322, _325), vec3((-0.0) - (_1885 * _2171), (-0.0) - (_1886 * _2171), (-0.0) - (_1887 * _2171)));
                                float _3558 = isnan(0.0) ? _2660 : (isnan(_2660) ? 0.0 : max(_2660, 0.0));
                                float _2668 = (_2634 * dot(vec3(_319, _322, _325), vec3(_2619, _2620, _2621))) + _2633;
                                float _3569 = isnan(0.0) ? _2668 : (isnan(_2668) ? 0.0 : max(_2668, 0.0));
                                float _2669 = isnan(1.0) ? _3569 : (isnan(_3569) ? 1.0 : min(_3569, 1.0));
                                float _2673 = (0.5 / (((isnan(1.0) ? _3558 : (isnan(_3558) ? 1.0 : min(_3558, 1.0))) + 9.9999999392252902907785028219223e-09) + _2669)) * _2669;
                                float _3580 = isnan(0.0) ? _2673 : (isnan(_2673) ? 0.0 : max(_2673, 0.0));
                                float _2680 = (_2649 * _2626) * (((isnan(1.0) ? _3580 : (isnan(_3580) ? 1.0 : min(_3580, 1.0))) * 3.1415927410125732421875) / ((_2639 * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_75_pred = _2650 * _2493.z;
                                frontier_phi_75_pred_1 = _2650 * _2493.y;
                                frontier_phi_75_pred_2 = _2650 * _2493.x;
                                frontier_phi_75_pred_3 = _2680 * _2505.z;
                                frontier_phi_75_pred_4 = _2680 * _2505.y;
                                frontier_phi_75_pred_5 = _2680 * _2505.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _2689 = frontier_phi_75_pred;
                            _2688 = frontier_phi_75_pred_1;
                            _2687 = frontier_phi_75_pred_2;
                            _2686 = frontier_phi_75_pred_3;
                            _2685 = frontier_phi_75_pred_4;
                            _2684 = frontier_phi_75_pred_5;
                            _2435 = _2687 + _2448;
                            _2436 = _2688 + _2449;
                            _2437 = _2689 + _2450;
                            _2432 = _2684 + _2445;
                            _2433 = _2685 + _2446;
                            _2434 = _2686 + _2447;
                            if (_2452 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2445 = _2432;
                                _2446 = _2433;
                                _2447 = _2434;
                                _2448 = _2435;
                                _2449 = _2436;
                                _2450 = _2437;
                                _2451 = _2452;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _2437;
                        frontier_phi_69_pred_1 = _2436;
                        frontier_phi_69_pred_2 = _2435;
                        frontier_phi_69_pred_3 = _2434;
                        frontier_phi_69_pred_4 = _2433;
                        frontier_phi_69_pred_5 = _2432;
                    }
                    _2157 = frontier_phi_69_pred;
                    _2155 = frontier_phi_69_pred_1;
                    _2153 = frontier_phi_69_pred_2;
                    _2151 = frontier_phi_69_pred_3;
                    _2149 = frontier_phi_69_pred_4;
                    _2147 = frontier_phi_69_pred_5;
                    uint _2289 = _2288 + 1u;
                    if (_2289 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2282 = _2147;
                        _2283 = _2149;
                        _2284 = _2151;
                        _2285 = _2153;
                        _2286 = _2155;
                        _2287 = _2157;
                        _2288 = _2289;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2157;
                frontier_phi_57_58_ladder_1 = _2155;
                frontier_phi_57_58_ladder_2 = _2153;
                frontier_phi_57_58_ladder_3 = _2151;
                frontier_phi_57_58_ladder_4 = _2149;
                frontier_phi_57_58_ladder_5 = _2147;
            }
            else
            {
                frontier_phi_57_58_ladder = _2043;
                frontier_phi_57_58_ladder_1 = _2041;
                frontier_phi_57_58_ladder_2 = _2039;
                frontier_phi_57_58_ladder_3 = _2037;
                frontier_phi_57_58_ladder_4 = _2035;
                frontier_phi_57_58_ladder_5 = _2033;
            }
            _2146 = frontier_phi_57_58_ladder_5;
            _2148 = frontier_phi_57_58_ladder_4;
            _2150 = frontier_phi_57_58_ladder_3;
            _2152 = frontier_phi_57_58_ladder_2;
            _2154 = frontier_phi_57_58_ladder_1;
            _2156 = frontier_phi_57_58_ladder;
        }
        float _2161 = isnan(1.0) ? _364 : (isnan(_364) ? 1.0 : min(_364, 1.0));
        _1943 = (_2161 * _2152) + _1507;
        _1945 = (_2161 * _2154) + _1509;
        _1947 = (_2161 * _2156) + _1511;
        _1949 = ((_2146 * 0.039999999105930328369140625) * _2161) + _1756;
        _1951 = ((_2148 * 0.039999999105930328369140625) * _2161) + _1758;
        _1953 = ((_2150 * 0.039999999105930328369140625) * _2161) + _1760;
    }
    else
    {
        _1943 = _1507;
        _1945 = _1509;
        _1947 = _1511;
        _1949 = _1756;
        _1951 = _1758;
        _1953 = _1760;
    }
    float _3596 = isnan(0.0) ? _350 : (isnan(_350) ? 0.0 : max(_350, 0.0));
    float _3607 = isnan(0.0) ? _351 : (isnan(_351) ? 0.0 : max(_351, 0.0));
    float _3618 = isnan(0.0) ? _352 : (isnan(_352) ? 0.0 : max(_352, 0.0));
    float _3629 = isnan(0.0) ? _211 : (isnan(_211) ? 0.0 : max(_211, 0.0));
    float _1978 = cbInstanceData._m0[_338 + 6u].w * (isnan(1.0) ? _3629 : (isnan(_3629) ? 1.0 : min(_3629, 1.0)));
    float _1983 = _297 / cbSceneParam._m0[86u].x;
    float _1984 = _298 / cbSceneParam._m0[86u].y;
    vec4 _1998 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1983, _1984, (log2((isnan(cbSceneParam._m0[77u].w) ? _230 : (isnan(_230) ? cbSceneParam._m0[77u].w : min(_230, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2000 = _1998.x;
    float _2001 = _1998.y;
    float _2002 = _1998.z;
    float _2003 = _1998.w;
    float _2095;
    float _2097;
    float _2099;
    float _2101;
    if (_230 > cbSceneParam._m0[78u].w)
    {
        float _2058 = isnan(_230) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _230 : min(cbSceneParam._m0[80u].w, _230));
        float _2059 = _2058 / _230;
        float _2070 = _2059 * _282;
        float _2071 = _283 * _2059;
        float _2072 = (-0.0) - _2071;
        float _2073 = _2059 * _284;
        float _2075 = (cbSceneParam._m0[77u].w * _2072) / _2058;
        float _2076 = _2075 + cbSceneParam._m0[79u].w;
        float _2077 = cbSceneParam._m0[79u].w - _2071;
        float _2083 = sqrt(((_2070 * _2070) + (_2071 * _2071)) + (_2073 * _2073));
        float _2086 = (1.0 - (cbSceneParam._m0[77u].w / _2058)) * _2083;
        float _2091 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2093 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2244;
        if (abs((_2072 - _2075) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2244 = ((((_2076 > 0.0) ? exp2(_2091 * _2076) : (2.0 - exp2(_2093 * _2076))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2086;
        }
        else
        {
            float _2204 = 1.0 / cbSceneParam._m0[80u].x;
            float _2205 = isnan(_2077) ? _2076 : (isnan(_2076) ? _2077 : max(_2076, _2077));
            float _2206 = isnan(_2077) ? _2076 : (isnan(_2076) ? _2077 : min(_2076, _2077));
            float _2215 = isnan(0.0) ? _2205 : (isnan(_2205) ? 0.0 : min(_2205, 0.0));
            float _2216 = isnan(0.0) ? _2206 : (isnan(_2206) ? 0.0 : min(_2206, 0.0));
            _2244 = ((abs(_2083 / _2072) * cbSceneParam._m0[80u].y) * ((((_2215 - _2216) * 2.0) - ((exp2(_2091 * (isnan(0.0) ? _2205 : (isnan(_2205) ? 0.0 : max(_2205, 0.0)))) - exp2(_2091 * (isnan(0.0) ? _2206 : (isnan(_2206) ? 0.0 : max(_2206, 0.0))))) * _2204)) - ((exp2(_2093 * _2215) - exp2(_2093 * _2216)) * _2204))) + (_2086 * cbSceneParam._m0[80u].z);
        }
        vec4 _2246 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1983, _1984, 1.0), 0.0);
        float _2255 = exp2((_2244 * (-1.44269502162933349609375)) * (1.0 - _2246.w));
        float _2256 = log2(_2255);
        float _2272 = log2(_2003);
        _2095 = (exp2(_2272 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2256 * cbSceneParam._m0[78u].x)) * _2246.x) / cbSceneParam._m0[78u].x)) + _2000;
        _2097 = (exp2(_2272 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2256 * cbSceneParam._m0[78u].y)) * _2246.y) / cbSceneParam._m0[78u].y)) + _2001;
        _2099 = (exp2(_2272 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2256 * cbSceneParam._m0[78u].z)) * _2246.z) / cbSceneParam._m0[78u].z)) + _2002;
        _2101 = _2255 * _2003;
    }
    else
    {
        _2095 = _2000;
        _2097 = _2001;
        _2099 = _2002;
        _2101 = _2003;
    }
    float _2113 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2114 = _2113 == 3.0;
    float _2116 = log2(_2101);
    float _2123 = exp2(_2116 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _3596 : (isnan(_3596) ? 1.0 : min(_3596, 1.0))) * (_1943 + ((isnan(0.0) ? _1064 : (isnan(_1064) ? 0.0 : max(_1064, 0.0))) * _364))) + ((_1949 + ((isnan(0.0) ? _1357 : (isnan(_1357) ? 0.0 : max(_1357, 0.0))) * _1143)) * cbPerFrame._m0[3u].x));
    float _2124 = exp2(_2116 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _3607 : (isnan(_3607) ? 1.0 : min(_3607, 1.0))) * (_1945 + ((isnan(0.0) ? _1067 : (isnan(_1067) ? 0.0 : max(_1067, 0.0))) * _364))) + ((_1951 + ((isnan(0.0) ? _1360 : (isnan(_1360) ? 0.0 : max(_1360, 0.0))) * _1143)) * cbPerFrame._m0[3u].x));
    float _2125 = exp2(_2116 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _3618 : (isnan(_3618) ? 1.0 : min(_3618, 1.0))) * (_1947 + ((isnan(0.0) ? _1070 : (isnan(_1070) ? 0.0 : max(_1070, 0.0))) * _364))) + ((_1953 + ((isnan(0.0) ? _1363 : (isnan(_1363) ? 0.0 : max(_1363, 0.0))) * _1143)) * cbPerFrame._m0[3u].x));
    float _2134 = (_2113 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2134 * (_2114 ? _2123 : (_2123 + (cbSceneParam._m0[72u].w * _2095)));
    SV_Target.y = _2134 * (_2114 ? _2124 : (_2124 + (cbSceneParam._m0[72u].w * _2097)));
    SV_Target.z = _2134 * (_2114 ? _2125 : (_2125 + (cbSceneParam._m0[72u].w * _2099)));
    SV_Target.w = _1978;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _1978;
}


