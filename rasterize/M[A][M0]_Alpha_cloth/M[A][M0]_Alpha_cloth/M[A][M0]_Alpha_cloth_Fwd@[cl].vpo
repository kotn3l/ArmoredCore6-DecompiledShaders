#version 460

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 7, std140) uniform cbvModelParamUBO
{
    vec4 _m0[10];
} cbvModelParam;

layout(set = 0, binding = 5, std140) uniform cbObjMatrixUBO
{
    vec4 _m0[6];
} cbObjMatrix;

layout(set = 0, binding = 10, std140) uniform cbInstanceIdxParamUBO
{
    vec4 _m0[1];
} cbInstanceIdxParam;

layout(set = 0, binding = 11, std140) uniform cbTexScrollUBO
{
    vec4 _m0[4];
} cbTexScroll;

layout(set = 0, binding = 25) uniform usamplerBuffer g_InstanceIndexBuffer;

layout(location = 0) in vec3 POSITION;
layout(location = 1) in uvec4 NORMAL;
layout(location = 2) in uvec4 TANGENT;
layout(location = 3) in uint BINORMAL;
layout(location = 4) in vec4 COLOR_1;
layout(location = 5) in ivec2 TEXCOORD;
layout(location = 1) out vec4 POSITION_1;
layout(location = 2) out vec4 NORMAL_1;
layout(location = 3) out vec4 TANGENT_1;
layout(location = 4) out vec4 TEXCOORD_1;

void main()
{
    uint _72 = uint(gl_InstanceIndex) - uint(gl_BaseInstance);
    gl_Position.x = 0.0;
    gl_Position.y = 0.0;
    gl_Position.z = 0.0;
    gl_Position.w = 0.0;
    POSITION_1.x = 0.0;
    POSITION_1.y = 0.0;
    POSITION_1.z = 0.0;
    POSITION_1.w = 0.0;
    NORMAL_1.x = 0.0;
    NORMAL_1.y = 0.0;
    NORMAL_1.z = 0.0;
    NORMAL_1.w = 0.0;
    TANGENT_1.x = 0.0;
    TANGENT_1.y = 0.0;
    TANGENT_1.z = 0.0;
    TANGENT_1.w = 0.0;
    TEXCOORD_1.x = 0.0;
    TEXCOORD_1.y = 0.0;
    TEXCOORD_1.z = 0.0;
    TEXCOORD_1.w = 0.0;
    float _152 = (float(NORMAL.x) + (-127.0)) * 0.0078740157186985015869140625;
    float _154 = (float(NORMAL.y) + (-127.0)) * 0.0078740157186985015869140625;
    float _155 = (float(NORMAL.z) + (-127.0)) * 0.0078740157186985015869140625;
    float _162 = (float(TANGENT.x) + (-127.0)) * 0.0078740157186985015869140625;
    float _163 = (float(TANGENT.y) + (-127.0)) * 0.0078740157186985015869140625;
    float _164 = (float(TANGENT.z) + (-127.0)) * 0.0078740157186985015869140625;
    float _231;
    float _232;
    float _233;
    float _234;
    float _235;
    float _236;
    float _237;
    float _238;
    float _239;
    float _240;
    float _241;
    float _242;
    if (floatBitsToUint(cbMatDynParam._m0[1u]).x == 0u)
    {
        uint _179 = floatBitsToUint(cbInstanceIdxParam._m0[0u]).x + _72;
        uint _192 = (floatBitsToUint(cbInstanceData._m0[(texelFetch(g_InstanceIndexBuffer, int(_179)).x * 13u) + 4u]).x + uint(float(NORMAL.w))) * 3u;
        uint _199 = _192 + 1u;
        uint _206 = _192 + 2u;
        _231 = cbObjMatrix._m0[_192].x;
        _232 = cbObjMatrix._m0[_192].y;
        _233 = cbObjMatrix._m0[_192].z;
        _234 = cbObjMatrix._m0[_192].w;
        _235 = cbObjMatrix._m0[_199].x;
        _236 = cbObjMatrix._m0[_199].y;
        _237 = cbObjMatrix._m0[_199].z;
        _238 = cbObjMatrix._m0[_199].w;
        _239 = cbObjMatrix._m0[_206].x;
        _240 = cbObjMatrix._m0[_206].y;
        _241 = cbObjMatrix._m0[_206].z;
        _242 = cbObjMatrix._m0[_206].w;
    }
    else
    {
        _231 = cbvModelParam._m0[0u].x;
        _232 = cbvModelParam._m0[0u].y;
        _233 = cbvModelParam._m0[0u].z;
        _234 = cbvModelParam._m0[0u].w;
        _235 = cbvModelParam._m0[1u].x;
        _236 = cbvModelParam._m0[1u].y;
        _237 = cbvModelParam._m0[1u].z;
        _238 = cbvModelParam._m0[1u].w;
        _239 = cbvModelParam._m0[2u].x;
        _240 = cbvModelParam._m0[2u].y;
        _241 = cbvModelParam._m0[2u].z;
        _242 = cbvModelParam._m0[2u].w;
    }
    precise float _243 = POSITION.x * _231;
    precise float _244 = POSITION.y * _232;
    precise float _245 = _244 + _243;
    precise float _246 = POSITION.z * _233;
    precise float _247 = _246 + _245;
    precise float _248 = 1.0 * _234;
    precise float _250 = _248 + _247;
    precise float _251 = POSITION.x * _235;
    precise float _252 = POSITION.y * _236;
    precise float _253 = _252 + _251;
    precise float _254 = POSITION.z * _237;
    precise float _255 = _254 + _253;
    precise float _256 = 1.0 * _238;
    precise float _257 = _256 + _255;
    precise float _258 = POSITION.x * _239;
    precise float _259 = POSITION.y * _240;
    precise float _260 = _259 + _258;
    precise float _261 = POSITION.z * _241;
    precise float _262 = _261 + _260;
    precise float _263 = 1.0 * _242;
    precise float _264 = _263 + _262;
    uint _279 = floatBitsToUint(cbInstanceIdxParam._m0[0u]).x + _72;
    precise float _298 = _250 - cbSceneParam._m0[3u].x;
    precise float _299 = _257 - cbSceneParam._m0[3u].y;
    precise float _300 = _264 - cbSceneParam._m0[3u].z;
    precise float _328 = _298 * cbSceneParam._m0[24u].x;
    precise float _329 = _299 * cbSceneParam._m0[24u].y;
    precise float _330 = _329 + _328;
    precise float _331 = _300 * cbSceneParam._m0[24u].z;
    precise float _332 = _331 + _330;
    precise float _333 = 1.0 * cbSceneParam._m0[24u].w;
    precise float _334 = _333 + _332;
    precise float _335 = _298 * cbSceneParam._m0[25u].x;
    precise float _336 = _299 * cbSceneParam._m0[25u].y;
    precise float _337 = _336 + _335;
    precise float _338 = _300 * cbSceneParam._m0[25u].z;
    precise float _339 = _338 + _337;
    precise float _340 = 1.0 * cbSceneParam._m0[25u].w;
    precise float _341 = _340 + _339;
    precise float _342 = _298 * cbSceneParam._m0[26u].x;
    precise float _343 = _299 * cbSceneParam._m0[26u].y;
    precise float _344 = _343 + _342;
    precise float _345 = _300 * cbSceneParam._m0[26u].z;
    precise float _346 = _345 + _344;
    precise float _347 = 1.0 * cbSceneParam._m0[26u].w;
    precise float _348 = _347 + _346;
    precise float _349 = _298 * cbSceneParam._m0[27u].x;
    precise float _350 = _299 * cbSceneParam._m0[27u].y;
    precise float _351 = _350 + _349;
    precise float _352 = _300 * cbSceneParam._m0[27u].z;
    precise float _353 = _352 + _351;
    precise float _354 = 1.0 * cbSceneParam._m0[27u].w;
    precise float _355 = _354 + _353;
    gl_Position.x = _334;
    gl_Position.y = _341;
    gl_Position.z = _348;
    gl_Position.w = _355;
    POSITION_1.x = _334;
    POSITION_1.y = _341;
    POSITION_1.z = _348;
    POSITION_1.w = _355;
    NORMAL_1.x = fma(_155, _233, fma(_154, _232, _231 * _152));
    NORMAL_1.y = fma(_155, _237, fma(_154, _236, _235 * _152));
    NORMAL_1.z = fma(_155, _241, fma(_154, _240, _239 * _152));
    NORMAL_1.w = float(texelFetch(g_InstanceIndexBuffer, int(_279)).x);
    TANGENT_1.x = fma(_164, _233, fma(_163, _232, _231 * _162));
    TANGENT_1.y = fma(_164, _237, fma(_163, _236, _235 * _162));
    TANGENT_1.z = fma(_164, _241, fma(_163, _240, _239 * _162));
    TANGENT_1.w = (float(BINORMAL) + (-127.0)) * 0.0078740157186985015869140625;
    TEXCOORD_1.x = ((float(int(uint(TEXCOORD.x))) * 0.00048828125) * cbTexScroll._m0[0u].x) + cbTexScroll._m0[0u].z;
    TEXCOORD_1.y = ((float(int(uint(TEXCOORD.y))) * 0.00048828125) * cbTexScroll._m0[0u].y) + cbTexScroll._m0[0u].w;
    TEXCOORD_1.z = COLOR_1.w;
    TEXCOORD_1.w = COLOR_1.x;
}


