#version 460

out float gl_CullDistance[1];

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[10];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 12, std140) uniform cbInstanceSlodDataUBO
{
    vec4 _m0[52];
} cbInstanceSlodData;

layout(set = 0, binding = 5, std140) uniform cbObjMatrixUBO
{
    vec4 _m0[6];
} cbObjMatrix;

layout(set = 0, binding = 6, std140) uniform cbPrevObjMatrixUBO
{
    vec4 _m0[6];
} cbPrevObjMatrix;

layout(set = 0, binding = 10, std140) uniform cbInstanceIdxParamUBO
{
    vec4 _m0[1];
} cbInstanceIdxParam;

layout(set = 0, binding = 11, std140) uniform cbTexScrollUBO
{
    vec4 _m0[4];
} cbTexScroll;

layout(set = 0, binding = 26) uniform usamplerBuffer g_forceParam;
layout(set = 0, binding = 25) uniform usamplerBuffer g_InstanceIndexBuffer;

layout(location = 0) in vec3 POSITION;
layout(location = 1) in uvec4 NORMAL;
layout(location = 2) in uvec4 TANGENT;
layout(location = 3) in vec4 COLOR_1;
layout(location = 4) in ivec2 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_1;
layout(location = 1) out vec4 POSITION_1;
layout(location = 2) out vec4 NORMAL_1;
layout(location = 3) out vec4 TANGENT_1;
layout(location = 4) out float TEXCOORD_2;
layout(location = 4, component = 1) out float TEXCOORD_1_1;
layout(location = 5) out vec4 TEXCOORD_3;
layout(location = 6) out vec4 TEXCOORD_8;
layout(location = 7) out vec4 TEXCOORD_9;
layout(location = 8) out vec3 TEXCOORD_10;
layout(location = 4, component = 2) out float TEXCOORD_12;

uint _825;

void main()
{
    uint _94 = uint(gl_InstanceIndex) - uint(gl_BaseInstance);
    gl_Position.x = 0.0;
    gl_Position.y = 0.0;
    gl_Position.z = 0.0;
    gl_Position.w = 0.0;
    POSITION_1.x = 0.0;
    POSITION_1.y = 0.0;
    POSITION_1.z = 0.0;
    POSITION_1.w = 0.0;
    NORMAL_1.x = 0.0;
    NORMAL_1.y = 0.0;
    NORMAL_1.z = 0.0;
    NORMAL_1.w = 0.0;
    TANGENT_1.x = 0.0;
    TANGENT_1.y = 0.0;
    TANGENT_1.z = 0.0;
    TANGENT_1.w = 0.0;
    TEXCOORD_2 = 0.0;
    TEXCOORD_1_1 = 0.0;
    TEXCOORD_3.x = 0.0;
    TEXCOORD_3.y = 0.0;
    TEXCOORD_3.z = 0.0;
    TEXCOORD_3.w = 0.0;
    TEXCOORD_8.x = 0.0;
    TEXCOORD_8.y = 0.0;
    TEXCOORD_8.z = 0.0;
    TEXCOORD_8.w = 0.0;
    TEXCOORD_9.x = 0.0;
    TEXCOORD_9.y = 0.0;
    TEXCOORD_9.z = 0.0;
    TEXCOORD_9.w = 0.0;
    TEXCOORD_10.x = 0.0;
    TEXCOORD_10.y = 0.0;
    TEXCOORD_10.z = 0.0;
    TEXCOORD_12 = 0.0;
    gl_CullDistance[0u] = 0.0;
    float _196 = (float(NORMAL.x) + (-127.0)) * 0.0078740157186985015869140625;
    float _198 = (float(NORMAL.y) + (-127.0)) * 0.0078740157186985015869140625;
    float _199 = (float(NORMAL.z) + (-127.0)) * 0.0078740157186985015869140625;
    float _209 = (float(TANGENT.x) + (-127.0)) * 0.0078740157186985015869140625;
    float _210 = (float(TANGENT.y) + (-127.0)) * 0.0078740157186985015869140625;
    float _211 = (float(TANGENT.z) + (-127.0)) * 0.0078740157186985015869140625;
    uint _213 = _94 * 13u;
    uvec4 _219 = floatBitsToUint(cbInstanceData._m0[_213 + 7u]);
    uint _222 = min(_219.y, 8u);
    precise float _226 = POSITION.x + 0.0;
    precise float _227 = POSITION.y + 0.0;
    precise float _228 = POSITION.z + 0.0;
    uint _233 = floatBitsToUint(cbInstanceIdxParam._m0[0u]).x + _94;
    uvec4 _235 = texelFetch(g_InstanceIndexBuffer, int(_233));
    uint _236 = _235.x;
    uint _245 = (floatBitsToUint(cbInstanceData._m0[(_236 * 13u) + 4u]).x + uint(float(NORMAL.w))) * 3u;
    uint _252 = _245 + 1u;
    uint _259 = _245 + 2u;
    precise float _266 = _226 * cbObjMatrix._m0[_245].x;
    precise float _267 = _227 * cbObjMatrix._m0[_245].y;
    precise float _268 = _267 + _266;
    precise float _269 = _228 * cbObjMatrix._m0[_245].z;
    precise float _270 = _269 + _268;
    precise float _271 = 1.0 * cbObjMatrix._m0[_245].w;
    precise float _273 = _271 + _270;
    precise float _274 = _226 * cbObjMatrix._m0[_252].x;
    precise float _275 = _227 * cbObjMatrix._m0[_252].y;
    precise float _276 = _275 + _274;
    precise float _277 = _228 * cbObjMatrix._m0[_252].z;
    precise float _278 = _277 + _276;
    precise float _279 = 1.0 * cbObjMatrix._m0[_252].w;
    precise float _280 = _279 + _278;
    precise float _281 = _226 * cbObjMatrix._m0[_259].x;
    precise float _282 = _227 * cbObjMatrix._m0[_259].y;
    precise float _283 = _282 + _281;
    precise float _284 = _228 * cbObjMatrix._m0[_259].z;
    precise float _285 = _284 + _283;
    precise float _286 = 1.0 * cbObjMatrix._m0[_259].w;
    precise float _287 = _286 + _285;
    float _320 = fma(_199, cbObjMatrix._m0[_245].z, fma(_198, cbObjMatrix._m0[_245].y, cbObjMatrix._m0[_245].x * _196));
    float _323 = fma(_199, cbObjMatrix._m0[_252].z, fma(_198, cbObjMatrix._m0[_252].y, cbObjMatrix._m0[_252].x * _196));
    float _326 = fma(_199, cbObjMatrix._m0[_259].z, fma(_198, cbObjMatrix._m0[_259].y, cbObjMatrix._m0[_259].x * _196));
    float _332 = cbSceneParam._m0[3u].x - cbObjMatrix._m0[_245].w;
    float _333 = cbSceneParam._m0[3u].y - cbObjMatrix._m0[_252].w;
    float _334 = cbSceneParam._m0[3u].z - cbObjMatrix._m0[_259].w;
    float _338 = inversesqrt(dot(vec3(_332, _333, _334), vec3(_332, _333, _334)));
    float _339 = _332 * _338;
    float _340 = _333 * _338;
    float _341 = _334 * _338;
    uint _342 = _94 * 26u;
    uint _343 = _342 + 24u;
    uint _351 = _342 + 25u;
    float _358 = dot(vec3(cbObjMatrix._m0[_245].x, cbObjMatrix._m0[_252].x, cbObjMatrix._m0[_259].x), vec3(_339, _340, _341));
    float _364 = dot(vec3(cbObjMatrix._m0[_245].z, cbObjMatrix._m0[_252].z, cbObjMatrix._m0[_259].z), vec3(_339, _340, _341));
    float _370 = (_364 * cbObjMatrix._m0[_245].z) + (_358 * cbObjMatrix._m0[_245].x);
    float _371 = (_364 * cbObjMatrix._m0[_252].z) + (_358 * cbObjMatrix._m0[_252].x);
    float _372 = (_364 * cbObjMatrix._m0[_259].z) + (_358 * cbObjMatrix._m0[_259].x);
    float _376 = inversesqrt(dot(vec3(_370, _371, _372), vec3(_370, _371, _372)));
    float _380 = dot(vec3(_370 * _376, _371 * _376, _372 * _376), vec3(_320, _323, _326));
    bool _384 = abs(_198) > 0.999000012874603271484375;
    bool _386 = !_384;
    float _389;
    if ((_380 <= cbInstanceSlodData._m0[_343].x) && _386)
    {
        _389 = -1.0;
    }
    else
    {
        float _468 = inversesqrt(dot(vec3(cbObjMatrix._m0[_245].y, cbObjMatrix._m0[_252].y, cbObjMatrix._m0[_259].y), vec3(cbObjMatrix._m0[_245].y, cbObjMatrix._m0[_252].y, cbObjMatrix._m0[_259].y)));
        float _475 = abs(dot(vec3(_339, _340, _341), vec3(_468 * cbObjMatrix._m0[_245].y, _468 * cbObjMatrix._m0[_252].y, _468 * cbObjMatrix._m0[_259].y)));
        bool _476 = _475 > 0.707106769084930419921875;
        float _882;
        if (_384 && _476)
        {
            float _744 = cbInstanceSlodData._m0[_343].w - cbInstanceSlodData._m0[_343].z;
            float _750 = ((1.0 / (isnan(9.9999997473787516355514526367188e-05) ? _744 : (isnan(_744) ? 9.9999997473787516355514526367188e-05 : max(_744, 9.9999997473787516355514526367188e-05)))) * (_475 - cbInstanceSlodData._m0[_343].w)) + 1.0;
            float _751 = isnan(0.0) ? _750 : (isnan(_750) ? 0.0 : max(_750, 0.0));
            _882 = isnan(1.0) ? _751 : (isnan(_751) ? 1.0 : min(_751, 1.0));
        }
        else
        {
            float frontier_phi_8_6_ladder;
            if ((_475 <= cbInstanceSlodData._m0[_351].z) && (_476 && _386))
            {
                float _888 = cbInstanceSlodData._m0[_351].y - cbInstanceSlodData._m0[_351].x;
                float _893 = ((1.0 / (isnan(9.9999997473787516355514526367188e-05) ? _888 : (isnan(_888) ? 9.9999997473787516355514526367188e-05 : max(_888, 9.9999997473787516355514526367188e-05)))) * (_475 - cbInstanceSlodData._m0[_351].y)) + 1.0;
                float _894 = isnan(0.0) ? _893 : (isnan(_893) ? 0.0 : max(_893, 0.0));
                float _896 = 1.0 - (isnan(1.0) ? _894 : (isnan(_894) ? 1.0 : min(_894, 1.0)));
                float _897 = cbInstanceSlodData._m0[_343].y - cbInstanceSlodData._m0[_343].x;
                float _902 = ((1.0 / (isnan(9.9999997473787516355514526367188e-05) ? _897 : (isnan(_897) ? 9.9999997473787516355514526367188e-05 : max(_897, 9.9999997473787516355514526367188e-05)))) * (_380 - cbInstanceSlodData._m0[_343].y)) + 1.0;
                float _903 = isnan(0.0) ? _902 : (isnan(_902) ? 0.0 : max(_902, 0.0));
                float _904 = isnan(1.0) ? _903 : (isnan(_903) ? 1.0 : min(_903, 1.0));
                frontier_phi_8_6_ladder = isnan(_896) ? _904 : (isnan(_904) ? _896 : min(_904, _896));
            }
            else
            {
                float frontier_phi_8_6_ladder_10_ladder;
                if (_384 || _476)
                {
                    frontier_phi_8_6_ladder_10_ladder = -1.0;
                }
                else
                {
                    float _931 = cbInstanceSlodData._m0[_343].y - cbInstanceSlodData._m0[_343].x;
                    float _936 = ((1.0 / (isnan(9.9999997473787516355514526367188e-05) ? _931 : (isnan(_931) ? 9.9999997473787516355514526367188e-05 : max(_931, 9.9999997473787516355514526367188e-05)))) * (_380 - cbInstanceSlodData._m0[_343].y)) + 1.0;
                    float _937 = isnan(0.0) ? _936 : (isnan(_936) ? 0.0 : max(_936, 0.0));
                    frontier_phi_8_6_ladder_10_ladder = isnan(1.0) ? _937 : (isnan(_937) ? 1.0 : min(_937, 1.0));
                }
                frontier_phi_8_6_ladder = frontier_phi_8_6_ladder_10_ladder;
            }
            _882 = frontier_phi_8_6_ladder;
        }
        float _885 = isnan(-1.0) ? _882 : (isnan(_882) ? (-1.0) : max(_882, -1.0));
        _389 = (isnan(1.0) ? _885 : (isnan(_885) ? 1.0 : min(_885, 1.0))) + 0.0625;
    }
    precise float _409 = TEXCOORD_1.x * cbMtdParam._m0[9u].z;
    uint _417 = _213 + 1u;
    uint _424 = _213 + 2u;
    precise float _431 = TEXCOORD_1.x * cbInstanceData._m0[_213].x;
    precise float _432 = TEXCOORD_1.y * cbInstanceData._m0[_213].y;
    precise float _433 = _432 + _431;
    precise float _434 = TEXCOORD_1.z * cbInstanceData._m0[_213].z;
    precise float _435 = _434 + _433;
    precise float _436 = 1.0 * cbInstanceData._m0[_213].w;
    precise float _437 = _436 + _435;
    precise float _438 = TEXCOORD_1.x * cbInstanceData._m0[_417].x;
    precise float _439 = TEXCOORD_1.y * cbInstanceData._m0[_417].y;
    precise float _440 = _439 + _438;
    precise float _441 = TEXCOORD_1.z * cbInstanceData._m0[_417].z;
    precise float _442 = _441 + _440;
    precise float _443 = 1.0 * cbInstanceData._m0[_417].w;
    precise float _444 = _443 + _442;
    precise float _445 = TEXCOORD_1.x * cbInstanceData._m0[_424].x;
    precise float _446 = TEXCOORD_1.y * cbInstanceData._m0[_424].y;
    precise float _447 = _446 + _445;
    precise float _448 = TEXCOORD_1.z * cbInstanceData._m0[_424].z;
    precise float _449 = _448 + _447;
    precise float _450 = 1.0 * cbInstanceData._m0[_424].w;
    precise float _451 = _450 + _449;
    precise float _452 = _273 - _437;
    precise float _453 = _280 - _444;
    precise float _454 = _287 - _451;
    precise float _455 = _452 * _452;
    precise float _456 = _453 * _453;
    precise float _457 = _455 + _456;
    precise float _458 = _454 * _454;
    precise float _459 = _457 + _458;
    precise float _461 = cbMtdParam._m0[9u].x * sqrt(_459);
    precise float _462 = _409 + _461;
    precise float _463 = cbPerFrame._m0[22u].x + _462;
    uint _464 = _219.w;
    float _479;
    float _481;
    float _483;
    if (_222 == 0u)
    {
        _479 = 0.0;
        _481 = 0.0;
        _483 = 0.0;
    }
    else
    {
        uint _743 = _219.z;
        precise float _480;
        precise float _482;
        precise float _484;
        float _922;
        float _924;
        float _926;
        float _756 = 0.0;
        float _757 = 0.0;
        float _758 = 0.0;
        uint _759 = _743;
        uint _761 = 0u;
        float _797;
        float _816;
        vec4 _830;
        float _831;
        float _832;
        float _846;
        float _847;
        float _848;
        float _865;
        float _866;
        float _867;
        float _868;
        bool _869;
        bool _870;
        bool _871;
        precise float _872;
        precise float _873;
        precise float _874;
        float _875;
        float _876;
        float _877;
        precise float _878;
        bool _881;
        for (;;)
        {
            uint _763 = _759 & 255u;
            uint _765 = _763 * 24u;
            uvec3 _775 = uvec3(texelFetch(g_forceParam, int(_765)).x, texelFetch(g_forceParam, int(_765 + 1u)).x, texelFetch(g_forceParam, int(_765 + 2u)).x);
            uint _780 = (_763 * 24u) + 4u;
            vec4 _793 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_780)).x, texelFetch(g_forceParam, int(_780 + 1u)).x, texelFetch(g_forceParam, int(_780 + 2u)).x, texelFetch(g_forceParam, int(_780 + 3u)).x));
            _797 = _793.w;
            uint _799 = (_763 * 24u) + 8u;
            vec4 _812 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_799)).x, texelFetch(g_forceParam, int(_799 + 1u)).x, texelFetch(g_forceParam, int(_799 + 2u)).x, texelFetch(g_forceParam, int(_799 + 3u)).x));
            _816 = _812.w;
            uint _819 = (_763 * 24u) + 12u;
            _830 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_819)).x, texelFetch(g_forceParam, int(_819 + 1u)).x, _825, texelFetch(g_forceParam, int(_819 + 3u)).x));
            _831 = _830.x;
            _832 = _830.w;
            uint _835 = (_763 * 24u) + 16u;
            vec3 _845 = uintBitsToFloat(uvec3(texelFetch(g_forceParam, int(_835)).x, texelFetch(g_forceParam, int(_835 + 1u)).x, texelFetch(g_forceParam, int(_835 + 2u)).x));
            _846 = _845.x;
            _847 = _845.y;
            _848 = _845.z;
            uint _851 = (_763 * 24u) + 20u;
            vec4 _864 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_851)).x, texelFetch(g_forceParam, int(_851 + 1u)).x, texelFetch(g_forceParam, int(_851 + 2u)).x, texelFetch(g_forceParam, int(_851 + 3u)).x));
            _865 = _864.x;
            _866 = _864.y;
            _867 = _864.z;
            _868 = _864.w;
            _869 = _775.x == 1u;
            _870 = _775.y == 1u;
            _871 = _775.z == 1u;
            _872 = _437 - _793.x;
            _873 = _444 - _793.y;
            _874 = _451 - _793.z;
            _875 = _869 ? _812.x : _872;
            _876 = _869 ? _812.y : _873;
            _877 = _869 ? _812.z : _874;
            _878 = dot(vec3(_875, _876, _877), vec3(_875, _876, _877));
            _881 = _878 > 0.0;
            float frontier_phi_12_pred;
            float frontier_phi_12_pred_1;
            float frontier_phi_12_pred_2;
            if (_881)
            {
                precise float _907 = _872 * _872;
                precise float _908 = _873 * _873;
                precise float _909 = _907 + _908;
                precise float _910 = _874 * _874;
                precise float _911 = _910 + _909;
                float _912 = sqrt(_911);
                float _913 = inversesqrt(_878);
                precise float _914 = _875 * _913;
                precise float _915 = _876 * _913;
                precise float _916 = _877 * _913;
                precise float _919 = _912 / (isnan(0.001000000047497451305389404296875) ? _830.y : (isnan(_830.y) ? 0.001000000047497451305389404296875 : max(_830.y, 0.001000000047497451305389404296875)));
                precise float _920 = 1.0 - _919;
                float _1178 = isnan(0.0) ? _920 : (isnan(_920) ? 0.0 : max(_920, 0.0));
                float _921 = isnan(1.0) ? _1178 : (isnan(_1178) ? 1.0 : min(_1178, 1.0));
                float _954;
                if (_871)
                {
                    float _941 = inversesqrt(dot(vec3(_872, _873, _874), vec3(_872, _873, _874)));
                    precise float _942 = _872 * _941;
                    precise float _943 = _873 * _941;
                    precise float _944 = _874 * _941;
                    precise float _948 = dot(vec3(_914, _915, _916), vec3(_942, _943, _944)) * 0.800000011920928955078125;
                    precise float _950 = _948 + 0.20000000298023223876953125;
                    float _1189 = isnan(0.0) ? _950 : (isnan(_950) ? 0.0 : max(_950, 0.0));
                    precise float _953 = _921 * (isnan(1.0) ? _1189 : (isnan(_1189) ? 1.0 : min(_1189, 1.0)));
                    _954 = _953;
                }
                else
                {
                    _954 = _921;
                }
                float frontier_phi_12_pred_15_ladder;
                float frontier_phi_12_pred_15_ladder_1;
                float frontier_phi_12_pred_15_ladder_2;
                if (_954 > 0.0)
                {
                    bool _957 = _869 && (!_871);
                    precise float _959 = _912 * (-4.0);
                    precise float _963 = 6.283184051513671875 / (isnan(0.001000000047497451305389404296875) ? _831 : (isnan(_831) ? 0.001000000047497451305389404296875 : max(_831, 0.001000000047497451305389404296875)));
                    precise float _965 = dot(vec2(_914, _916), vec2(_872, _874));
                    precise float _969 = _963 * _965;
                    precise float _970 = float(_957) * _969;
                    precise float _971 = _463 * _963;
                    precise float _972 = _971 - _970;
                    precise float _973 = (_957 ? 0.0 : _959) + _972;
                    precise float _975 = _816 * sin(_973);
                    precise float _976 = _915 * 0.0;
                    precise float _977 = _976 - _916;
                    precise float _978 = _916 * 0.0;
                    precise float _979 = _914 * 0.0;
                    precise float _980 = _978 - _979;
                    precise float _981 = _914 - _976;
                    precise float _982 = _832 * _975;
                    float _983 = _869 ? _982 : 0.0;
                    float _1026;
                    if (_870)
                    {
                        precise float _986 = _846 * 2.0;
                        precise float _988 = _866 + _867;
                        precise float _989 = _868 + _988;
                        precise float _991 = 6.283184051513671875 / (isnan(0.001000000047497451305389404296875) ? _846 : (isnan(_846) ? 0.001000000047497451305389404296875 : max(_846, 0.001000000047497451305389404296875)));
                        precise float _992 = _865 * _991;
                        precise float _993 = (-0.0) - _914;
                        precise float _998 = dot(vec2(_916, _993), vec2(_872, _874)) / _986;
                        precise float _999 = (-0.0) - _998;
                        float _1002 = fract(abs(_998));
                        precise float _1003 = (-0.0) - _1002;
                        precise float _1005 = _986 * ((_998 >= _999) ? _1002 : _1003);
                        precise float _1006 = _1005 * 6.283184051513671875;
                        precise float _1007 = _1006 / _986;
                        precise float _1009 = (isnan(5.0) ? _846 : (isnan(_846) ? 5.0 : min(_846, 5.0))) * sin(_1007);
                        precise float _1010 = _965 + _1009;
                        precise float _1011 = _846 * 0.25;
                        precise float _1013 = _463 * _865;
                        precise float _1014 = _1013 - _1011;
                        precise float _1015 = _1014 - _1010;
                        precise float _1016 = _865 * _989;
                        precise float _1018 = _1015 / (isnan(0.001000000047497451305389404296875) ? _1016 : (isnan(_1016) ? 0.001000000047497451305389404296875 : max(_1016, 0.001000000047497451305389404296875)));
                        float _1019 = fract(_1018);
                        precise float _1021 = 1.0 - _1019;
                        float _1022 = (_1018 < 0.0) ? _1021 : _1019;
                        precise float _1023 = _988 / _989;
                        precise float _1024 = _866 / _989;
                        float _1045;
                        if (_1022 < _1024)
                        {
                            precise float _1043 = _1022 / _1024;
                            _1045 = _1043;
                        }
                        else
                        {
                            float frontier_phi_22_21_ladder;
                            if (_1022 < _1023)
                            {
                                precise float _1055 = _1022 - _1024;
                                precise float _1056 = _1023 - _1024;
                                precise float _1057 = _1055 / _1056;
                                precise float _1046 = 1.0 - _1057;
                                frontier_phi_22_21_ladder = _1046;
                            }
                            else
                            {
                                frontier_phi_22_21_ladder = 0.0;
                            }
                            _1045 = frontier_phi_22_21_ladder;
                        }
                        precise float _1047 = _848 * _1045;
                        precise float _1048 = _991 * _965;
                        precise float _1049 = _463 * _992;
                        precise float _1050 = _1049 - _1048;
                        precise float _1052 = _847 + sin(_1050);
                        precise float _1054 = _1047 * abs(_1052);
                        precise float _1027 = _1054 + 0.0;
                        _1026 = _1027;
                    }
                    else
                    {
                        _1026 = 0.0;
                    }
                    precise float _1028 = _797 + _975;
                    precise float _1029 = _1028 + _1026;
                    precise float _1030 = _914 * _1029;
                    precise float _1031 = _915 * _1029;
                    precise float _1032 = _916 * _1029;
                    precise float _1033 = _977 * _983;
                    precise float _1034 = _980 * _983;
                    precise float _1035 = _981 * _983;
                    precise float _1036 = _1033 + _1030;
                    precise float _1037 = _1034 + _1031;
                    precise float _1038 = _1035 + _1032;
                    precise float _1039 = _954 * _1036;
                    precise float _1040 = _954 * _1037;
                    precise float _1041 = _954 * _1038;
                    precise float _923 = _1039 * 0.0500000007450580596923828125;
                    precise float _925 = _1040 * 0.0500000007450580596923828125;
                    precise float _927 = _1041 * 0.0500000007450580596923828125;
                    frontier_phi_12_pred_15_ladder = _923;
                    frontier_phi_12_pred_15_ladder_1 = _925;
                    frontier_phi_12_pred_15_ladder_2 = _927;
                }
                else
                {
                    frontier_phi_12_pred_15_ladder = 0.0;
                    frontier_phi_12_pred_15_ladder_1 = 0.0;
                    frontier_phi_12_pred_15_ladder_2 = 0.0;
                }
                frontier_phi_12_pred = frontier_phi_12_pred_15_ladder;
                frontier_phi_12_pred_1 = frontier_phi_12_pred_15_ladder_1;
                frontier_phi_12_pred_2 = frontier_phi_12_pred_15_ladder_2;
            }
            else
            {
                frontier_phi_12_pred = 0.0;
                frontier_phi_12_pred_1 = 0.0;
                frontier_phi_12_pred_2 = 0.0;
            }
            _922 = frontier_phi_12_pred;
            _924 = frontier_phi_12_pred_1;
            _926 = frontier_phi_12_pred_2;
            _480 = _756 + _922;
            _482 = _757 + _924;
            _484 = _758 + _926;
            uint _762 = _761 + 1u;
            if (_762 == _222)
            {
                break;
            }
            else
            {
                _756 = _480;
                _757 = _482;
                _758 = _484;
                _759 = (_761 != 3u) ? (_759 >> 8u) : _464;
                _761 = _762;
                continue;
            }
        }
        _479 = _480;
        _481 = _482;
        _483 = _484;
    }
    precise float _485 = _479 * _479;
    precise float _486 = _481 * _481;
    precise float _487 = _485 + _486;
    precise float _488 = _483 * _483;
    precise float _489 = _487 + _488;
    float _490 = sqrt(_489);
    bool _491 = _490 < 0.00011000000085914507508277893066406;
    float _496 = inversesqrt(dot(vec3(cbInstanceData._m0[_213].x, cbInstanceData._m0[_417].x, cbInstanceData._m0[_424].x), vec3(cbInstanceData._m0[_213].x, cbInstanceData._m0[_417].x, cbInstanceData._m0[_424].x)));
    precise float _497 = cbInstanceData._m0[_213].x * _496;
    precise float _498 = cbInstanceData._m0[_417].x * _496;
    precise float _499 = cbInstanceData._m0[_424].x * _496;
    float _503 = inversesqrt(dot(vec3(cbInstanceData._m0[_213].y, cbInstanceData._m0[_417].y, cbInstanceData._m0[_424].y), vec3(cbInstanceData._m0[_213].y, cbInstanceData._m0[_417].y, cbInstanceData._m0[_424].y)));
    precise float _504 = cbInstanceData._m0[_213].y * _503;
    precise float _505 = cbInstanceData._m0[_417].y * _503;
    precise float _506 = cbInstanceData._m0[_424].y * _503;
    float _510 = inversesqrt(dot(vec3(cbInstanceData._m0[_213].z, cbInstanceData._m0[_417].z, cbInstanceData._m0[_424].z), vec3(cbInstanceData._m0[_213].z, cbInstanceData._m0[_417].z, cbInstanceData._m0[_424].z)));
    precise float _511 = cbInstanceData._m0[_213].z * _510;
    precise float _512 = cbInstanceData._m0[_417].z * _510;
    precise float _513 = cbInstanceData._m0[_424].z * _510;
    precise float _514 = _497 * 0.0;
    precise float _515 = 1.0 * _504;
    precise float _516 = _515 + _514;
    precise float _517 = 0.0 * _511;
    precise float _518 = _517 + _516;
    precise float _519 = _498 * 0.0;
    precise float _520 = 1.0 * _505;
    precise float _521 = _520 + _519;
    precise float _522 = 0.0 * _512;
    precise float _523 = _522 + _521;
    precise float _524 = _499 * 0.0;
    precise float _525 = 1.0 * _506;
    precise float _526 = _525 + _524;
    precise float _527 = 0.0 * _513;
    precise float _528 = _527 + _526;
    float _532 = inversesqrt(dot(vec3(_479, _481, _483), vec3(_479, _481, _483)));
    precise float _533 = _479 * _532;
    precise float _534 = _481 * _532;
    precise float _535 = _483 * _532;
    precise float _536 = _523 * _535;
    precise float _537 = _528 * _534;
    precise float _538 = _536 - _537;
    precise float _539 = _528 * _533;
    precise float _540 = _518 * _535;
    precise float _541 = _539 - _540;
    precise float _542 = _518 * _534;
    precise float _543 = _523 * _533;
    precise float _544 = _542 - _543;
    float _548 = inversesqrt(dot(vec3(_538, _541, _544), vec3(_538, _541, _544)));
    precise float _549 = _548 * _538;
    precise float _550 = _548 * _541;
    precise float _551 = _548 * _544;
    precise float _552 = _490 + 1.0;
    precise float _554 = cbMtdParam._m0[9u].y * log2(_552);
    precise float _555 = dot(vec3(_549, _550, _551), vec3(_452, _453, _454));
    precise float _558 = _549 * _555;
    precise float _559 = _550 * _555;
    precise float _560 = _551 * _555;
    precise float _561 = _437 + _558;
    precise float _562 = _444 + _559;
    precise float _563 = _451 + _560;
    precise float _564 = _273 - _561;
    precise float _565 = _280 - _562;
    precise float _566 = _287 - _563;
    precise float _567 = _550 * _566;
    precise float _568 = _551 * _565;
    precise float _569 = _567 - _568;
    precise float _570 = _551 * _564;
    precise float _571 = _549 * _566;
    precise float _572 = _570 - _571;
    precise float _573 = _549 * _565;
    precise float _574 = _550 * _564;
    precise float _575 = _573 - _574;
    float _576 = sin(_554);
    float _577 = cos(_554);
    precise float _578 = _564 * _577;
    precise float _579 = _565 * _577;
    precise float _580 = _566 * _577;
    precise float _581 = _576 * _569;
    precise float _582 = _576 * _572;
    precise float _583 = _576 * _575;
    precise float _584 = _578 + _581;
    precise float _585 = _579 + _582;
    precise float _586 = _583 + _580;
    precise float _587 = _561 + _584;
    precise float _588 = _562 + _585;
    precise float _589 = _563 + _586;
    precise float _590 = _587 - _273;
    precise float _591 = _588 - _280;
    precise float _592 = _589 - _287;
    float _593 = _491 ? 0.0 : _590;
    float _594 = _491 ? 0.0 : _591;
    float _595 = _491 ? 0.0 : _592;
    precise float _596 = _273 + _593;
    precise float _597 = _280 + _594;
    precise float _598 = _287 + _595;
    float _606 = ((fma(_228, cbPrevObjMatrix._m0[_245].z, fma(_227, cbPrevObjMatrix._m0[_245].y, cbPrevObjMatrix._m0[_245].x * _226)) + cbPrevObjMatrix._m0[_245].w) - cbSceneParam._m0[28u].x) + _593;
    float _608 = ((fma(_228, cbPrevObjMatrix._m0[_252].z, fma(_227, cbPrevObjMatrix._m0[_252].y, cbPrevObjMatrix._m0[_252].x * _226)) + cbPrevObjMatrix._m0[_252].w) - cbSceneParam._m0[28u].y) + _594;
    float _610 = ((fma(_228, cbPrevObjMatrix._m0[_259].z, fma(_227, cbPrevObjMatrix._m0[_259].y, cbPrevObjMatrix._m0[_259].x * _226)) + cbPrevObjMatrix._m0[_259].w) - cbSceneParam._m0[28u].z) + _595;
    precise float _655 = _596 - cbSceneParam._m0[3u].x;
    precise float _656 = _597 - cbSceneParam._m0[3u].y;
    precise float _657 = _598 - cbSceneParam._m0[3u].z;
    precise float _683 = _655 * cbSceneParam._m0[24u].x;
    precise float _684 = _656 * cbSceneParam._m0[24u].y;
    precise float _685 = _684 + _683;
    precise float _686 = _657 * cbSceneParam._m0[24u].z;
    precise float _687 = _686 + _685;
    precise float _688 = 1.0 * cbSceneParam._m0[24u].w;
    precise float _689 = _688 + _687;
    precise float _690 = _655 * cbSceneParam._m0[25u].x;
    precise float _691 = _656 * cbSceneParam._m0[25u].y;
    precise float _692 = _691 + _690;
    precise float _693 = _657 * cbSceneParam._m0[25u].z;
    precise float _694 = _693 + _692;
    precise float _695 = 1.0 * cbSceneParam._m0[25u].w;
    precise float _696 = _695 + _694;
    precise float _697 = _655 * cbSceneParam._m0[26u].x;
    precise float _698 = _656 * cbSceneParam._m0[26u].y;
    precise float _699 = _698 + _697;
    precise float _700 = _657 * cbSceneParam._m0[26u].z;
    precise float _701 = _700 + _699;
    precise float _702 = 1.0 * cbSceneParam._m0[26u].w;
    precise float _703 = _702 + _701;
    precise float _704 = _655 * cbSceneParam._m0[27u].x;
    precise float _705 = _656 * cbSceneParam._m0[27u].y;
    precise float _706 = _705 + _704;
    precise float _707 = _657 * cbSceneParam._m0[27u].z;
    precise float _708 = _707 + _706;
    precise float _709 = 1.0 * cbSceneParam._m0[27u].w;
    precise float _710 = _709 + _708;
    gl_Position.x = _689;
    gl_Position.y = _696;
    gl_Position.z = _703;
    gl_Position.w = _710;
    POSITION_1.x = _689;
    POSITION_1.y = _696;
    POSITION_1.z = _703;
    POSITION_1.w = _710;
    NORMAL_1.x = _320;
    NORMAL_1.y = _323;
    NORMAL_1.z = _326;
    NORMAL_1.w = float(_236);
    TANGENT_1.x = fma(_211, cbObjMatrix._m0[_245].z, fma(_210, cbObjMatrix._m0[_245].y, cbObjMatrix._m0[_245].x * _209));
    TANGENT_1.y = fma(_211, cbObjMatrix._m0[_252].z, fma(_210, cbObjMatrix._m0[_252].y, cbObjMatrix._m0[_252].x * _209));
    TANGENT_1.z = fma(_211, cbObjMatrix._m0[_259].z, fma(_210, cbObjMatrix._m0[_259].y, cbObjMatrix._m0[_259].x * _209));
    TANGENT_1.w = (float(TANGENT.w) + (-127.0)) * 0.0078740157186985015869140625;
    TEXCOORD_2 = ((float(int(uint(TEXCOORD.x))) * 0.00048828125) * cbTexScroll._m0[0u].x) + cbTexScroll._m0[0u].z;
    TEXCOORD_1_1 = ((float(int(uint(TEXCOORD.y))) * 0.00048828125) * cbTexScroll._m0[0u].y) + cbTexScroll._m0[0u].w;
    TEXCOORD_3.x = TEXCOORD_1.x;
    TEXCOORD_3.y = TEXCOORD_1.y;
    TEXCOORD_3.z = TEXCOORD_1.z;
    TEXCOORD_3.w = COLOR_1.x;
    TEXCOORD_8.x = _689;
    TEXCOORD_8.y = _696;
    TEXCOORD_8.z = _703;
    TEXCOORD_8.w = _710;
    TEXCOORD_9.x = fma(_610, cbSceneParam._m0[29u].z, fma(_608, cbSceneParam._m0[29u].y, _606 * cbSceneParam._m0[29u].x)) + cbSceneParam._m0[29u].w;
    TEXCOORD_9.y = fma(_610, cbSceneParam._m0[30u].z, fma(_608, cbSceneParam._m0[30u].y, _606 * cbSceneParam._m0[30u].x)) + cbSceneParam._m0[30u].w;
    TEXCOORD_9.z = fma(_610, cbSceneParam._m0[31u].z, fma(_608, cbSceneParam._m0[31u].y, _606 * cbSceneParam._m0[31u].x)) + cbSceneParam._m0[31u].w;
    TEXCOORD_9.w = fma(_610, cbSceneParam._m0[32u].z, fma(_608, cbSceneParam._m0[32u].y, cbSceneParam._m0[32u].x * _606)) + cbSceneParam._m0[32u].w;
    TEXCOORD_10.x = _320;
    TEXCOORD_10.y = _323;
    TEXCOORD_10.z = _326;
    TEXCOORD_12 = _389;
    gl_CullDistance[0u] = (_389 < 0.0) ? (-1.0) : 0.0;
}


