#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[10];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D SLOD_CrossBillboard_SAT_PivotAnim_snp_0_Texture2D_17;
layout(set = 0, binding = 1) uniform texture2D SLOD_CrossBillboard_SAT_PivotAnim_snp_0_Texture2D_18;
layout(set = 0, binding = 2) uniform texture2D SLOD_CrossBillboard_SAT_PivotAnim_snp_0_Texture2D_19;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in float TEXCOORD;
layout(location = 4, component = 1) in float TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 4, component = 2) in float TEXCOORD_12;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _867;
float _3538;
float _3539;
float _3540;
float _3541;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _188 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _189 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _190 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _196 = inversesqrt(dot(vec3(_188, _189, _190), vec3(_188, _189, _190)));
    float _203 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _204 = _203 * NORMAL.x;
    float _205 = _203 * NORMAL.y;
    float _206 = _203 * NORMAL.z;
    float _210 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _218;
    float _219;
    float _220;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _218 = (-0.0) - _204;
        _219 = (-0.0) - _205;
        _220 = (-0.0) - _206;
    }
    else
    {
        _218 = _204;
        _219 = _205;
        _220 = _206;
    }
    vec4 _234 = texture(sampler2D(SLOD_CrossBillboard_SAT_PivotAnim_snp_0_Texture2D_17, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1) + cbTextureTilingScale._m0[0u].w));
    float _240 = _234.w;
    float _241 = 1.0 / _240;
    float _243 = _234.x * _241;
    float _244 = _241 * _234.y;
    float _245 = _241 * _234.z;
    vec4 _257 = texture(sampler2D(SLOD_CrossBillboard_SAT_PivotAnim_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1) + cbTextureTilingScale._m0[1u].w));
    float _260 = _257.x * _241;
    vec4 _272 = texture(sampler2D(SLOD_CrossBillboard_SAT_PivotAnim_snp_0_Texture2D_19, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1) + cbTextureTilingScale._m0[2u].w));
    float _280 = (_272.x * 2.0) + (-1.0);
    float _282 = (_272.y * 2.0) + (-1.0);
    float _283 = dot(vec2(_280, _282), vec2(_280, _282));
    float _3550 = isnan(0.0) ? _283 : (isnan(_283) ? 0.0 : max(_283, 0.0));
    float _288 = sqrt(1.0 - (isnan(1.0) ? _3550 : (isnan(_3550) ? 1.0 : min(_3550, 1.0))));
    float _289 = _272.z * _241;
    float _292 = fma(_288, _218, fma(_282, _210 * TANGENT.x, (_196 * _188) * _280));
    float _295 = fma(_288, _219, fma(_282, _210 * TANGENT.y, (_196 * _189) * _280));
    float _298 = fma(_288, _220, fma(_282, _210 * TANGENT.z, (_196 * _190) * _280));
    float _302 = inversesqrt(dot(vec3(_292, _295, _298), vec3(_292, _295, _298)));
    float _303 = _302 * _292;
    float _304 = _302 * _295;
    float _305 = _302 * _298;
    float _3561 = isnan(0.0) ? _240 : (isnan(_240) ? 0.0 : max(_240, 0.0));
    float _306 = isnan(1.0) ? _3561 : (isnan(_3561) ? 1.0 : min(_3561, 1.0));
    float _3572 = isnan(0.0) ? _289 : (isnan(_289) ? 0.0 : max(_289, 0.0));
    float _307 = isnan(1.0) ? _3572 : (isnan(_3572) ? 1.0 : min(_3572, 1.0));
    float _3583 = isnan(0.0) ? _243 : (isnan(_243) ? 0.0 : max(_243, 0.0));
    float _3594 = isnan(0.0) ? _244 : (isnan(_244) ? 0.0 : max(_244, 0.0));
    float _3605 = isnan(0.0) ? _245 : (isnan(_245) ? 0.0 : max(_245, 0.0));
    float _3616 = isnan(0.0) ? _260 : (isnan(_260) ? 0.0 : max(_260, 0.0));
    float _311 = isnan(1.0) ? _3616 : (isnan(_3616) ? 1.0 : min(_3616, 1.0));
    float _314 = gl_FragCoord.x * 0.125;
    float _316 = gl_FragCoord.y * 0.125;
    if (!(!(texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_314, _316)).w > TEXCOORD_12)))
    {
        discard_state = true;
    }
    float _335 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _378 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _388 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _378);
    float _389 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _378);
    float _390 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _378);
    float _394 = inversesqrt(dot(vec3(_388, _389, _390), vec3(_388, _389, _390)));
    float _395 = _388 * _394;
    float _396 = _389 * _394;
    float _397 = _390 * _394;
    vec4 _399 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_314, _316));
    float _401 = _399.w;
    float _407 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _408 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _429 = fma(_305, cbSceneParam._m0[5u].z, fma(_304, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _303));
    float _432 = fma(_305, cbSceneParam._m0[6u].z, fma(_304, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _303));
    float _435 = fma(_305, cbSceneParam._m0[7u].z, fma(_304, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _303));
    uint _448 = uint(roundEven(NORMAL.w)) * 13u;
    uint _450 = _448 + 9u;
    uint _451 = _450 + uint(cbMatDynParam._m0[0u].w);
    float _457 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3583 : (isnan(_3583) ? 1.0 : min(_3583, 1.0)))) * cbInstanceData._m0[_451].x;
    float _458 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3594 : (isnan(_3594) ? 1.0 : min(_3594, 1.0)))) * cbInstanceData._m0[_451].y;
    float _459 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3605 : (isnan(_3605) ? 1.0 : min(_3605, 1.0)))) * cbInstanceData._m0[_451].z;
    float _3627 = isnan(0.0) ? _457 : (isnan(_457) ? 0.0 : max(_457, 0.0));
    float _460 = isnan(1.0) ? _3627 : (isnan(_3627) ? 1.0 : min(_3627, 1.0));
    float _3638 = isnan(0.0) ? _458 : (isnan(_458) ? 0.0 : max(_458, 0.0));
    float _461 = isnan(1.0) ? _3638 : (isnan(_3638) ? 1.0 : min(_3638, 1.0));
    float _3649 = isnan(0.0) ? _459 : (isnan(_459) ? 0.0 : max(_459, 0.0));
    float _462 = isnan(1.0) ? _3649 : (isnan(_3649) ? 1.0 : min(_3649, 1.0));
    float _463 = 1.0 - _311;
    float _464 = _460 * _463;
    float _465 = _461 * _463;
    float _466 = _462 * _463;
    float _471 = (_460 + (-0.039999999105930328369140625)) * _311;
    float _472 = (_461 + (-0.039999999105930328369140625)) * _311;
    float _473 = (_462 + (-0.039999999105930328369140625)) * _311;
    float _474 = _471 + 0.039999999105930328369140625;
    float _476 = _472 + 0.039999999105930328369140625;
    float _477 = _473 + 0.039999999105930328369140625;
    vec4 _486 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _407, cbSceneParam._m0[86u].y * _408));
    float _489 = _486.x * TEXCOORD_3.w;
    float _490 = dot(vec3(_303, _304, _305), vec3(_395, _396, _397));
    float _493 = _490 * 2.0;
    float _497 = (_493 * _303) - _395;
    float _498 = (_493 * _304) - _396;
    float _499 = (_493 * _305) - _397;
    float _503 = abs(dot(vec3(_395, _396, _397), vec3(_303, _304, _305)));
    float _3660 = isnan(0.0) ? _503 : (isnan(_503) ? 0.0 : max(_503, 0.0));
    float _505 = sqrt(_307);
    float _518 = exp2((_505 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3660 : (isnan(_3660) ? 1.0 : min(_3660, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_505 * 3.0));
    float _524 = (1.0 - _518) * ((_505 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _525 = _518 * _505;
    float _553 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _557 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _561 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _866;
    float _868;
    float _869;
    float _870;
    float _871;
    float _872;
    float _873;
    float _874;
    float _875;
    float _876;
    float _877;
    float _878;
    float _879;
    float _880;
    float _881;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _591 = fma(_561, cbModelParam._m0[26u].z, fma(_557, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _553));
        float _595 = fma(_561, cbModelParam._m0[27u].z, fma(_557, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _553));
        float _599 = fma(_561, cbModelParam._m0[28u].z, fma(_557, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _553));
        float _624 = _553 + _303;
        float _625 = _557 + _304;
        float _626 = _561 + _305;
        float _636 = fma(_626, cbModelParam._m0[26u].z, fma(_625, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _624)) - _591;
        float _637 = fma(_626, cbModelParam._m0[27u].z, fma(_625, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _624)) - _595;
        float _638 = fma(_626, cbModelParam._m0[28u].z, fma(_625, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _624)) - _599;
        float _642 = inversesqrt(dot(vec3(_636, _637, _638), vec3(_636, _637, _638)));
        float _655 = ((_642 * _636) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_591 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _656 = ((_642 * _637) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_595 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _657 = ((_642 * _638) / cbModelParam._m0[34u].z) + ((((((_599 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _660 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_655, _656, _657), 0.0);
        vec4 _667 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_655, _656, _657), 0.0);
        vec4 _674 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_655, _656, _657), 0.0);
        vec4 _681 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_655, _656, _657), 0.0);
        float _694 = exp2((_660.w + (-0.5)) * 20.0) * 2.0;
        float _695 = _694 * (_660.x + (-0.5));
        float _696 = _694 * (_660.y + (-0.5));
        float _697 = _694 * (_660.z + (-0.5));
        float _704 = exp2((_667.w + (-0.5)) * 20.0) * 2.0;
        float _705 = _704 * (_667.x + (-0.5));
        float _706 = _704 * (_667.y + (-0.5));
        float _707 = _704 * (_667.z + (-0.5));
        float _714 = exp2((_674.w + (-0.5)) * 20.0) * 2.0;
        float _715 = _714 * (_674.x + (-0.5));
        float _716 = _714 * (_674.y + (-0.5));
        float _717 = _714 * (_674.z + (-0.5));
        float _724 = exp2((_681.w + (-0.5)) * 20.0) * 2.0;
        float _725 = _724 * (_681.x + (-0.5));
        float _726 = _724 * (_681.y + (-0.5));
        float _727 = _724 * (_681.z + (-0.5));
        float _728 = isnan(0.0) ? _725 : (isnan(_725) ? 0.0 : max(_725, 0.0));
        float _729 = isnan(0.0) ? _726 : (isnan(_726) ? 0.0 : max(_726, 0.0));
        float _730 = isnan(0.0) ? _727 : (isnan(_727) ? 0.0 : max(_727, 0.0));
        float _731 = _695 * 0.5;
        float _732 = _705 * 0.5;
        float _733 = _715 * 0.5;
        float _734 = dot(vec3(_731, _732, _733), vec3(_731, _732, _733));
        float _739 = (_734 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_734);
        float _748 = (dot(vec3(_303, _304, _305), vec3(_739 * _731, _739 * _732, _739 * _733)) + 1.0) * 0.5;
        float _3686 = isnan(0.0) ? _748 : (isnan(_748) ? 0.0 : max(_748, 0.0));
        float _758 = sqrt(((_732 * _732) + (_731 * _731)) + (_733 * _733)) / (_728 + 9.9999997473787516355514526367188e-06);
        float _3697 = isnan(0.0) ? _758 : (isnan(_758) ? 0.0 : max(_758, 0.0));
        float _759 = isnan(1.0) ? _3697 : (isnan(_3697) ? 1.0 : min(_3697, 1.0));
        float _760 = _759 * 2.0;
        float _764 = (1.0 - _759) / (_759 + 1.0);
        float _3708 = isnan(0.0) ? _764 : (isnan(_764) ? 0.0 : max(_764, 0.0));
        float _765 = isnan(1.0) ? _3708 : (isnan(_3708) ? 1.0 : min(_3708, 1.0));
        float _774 = ((((1.0 - _765) * (_760 + 2.0)) * exp2(log2(isnan(1.0) ? _3686 : (isnan(_3686) ? 1.0 : min(_3686, 1.0))) * (_760 + 1.0))) + _765) * _728;
        float _775 = _696 * 0.5;
        float _776 = _706 * 0.5;
        float _777 = _716 * 0.5;
        float _778 = dot(vec3(_775, _776, _777), vec3(_775, _776, _777));
        float _783 = (_778 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_778);
        float _791 = (dot(vec3(_303, _304, _305), vec3(_783 * _775, _783 * _776, _783 * _777)) + 1.0) * 0.5;
        float _3719 = isnan(0.0) ? _791 : (isnan(_791) ? 0.0 : max(_791, 0.0));
        float _800 = sqrt(((_776 * _776) + (_775 * _775)) + (_777 * _777)) / (_729 + 9.9999997473787516355514526367188e-06);
        float _3730 = isnan(0.0) ? _800 : (isnan(_800) ? 0.0 : max(_800, 0.0));
        float _801 = isnan(1.0) ? _3730 : (isnan(_3730) ? 1.0 : min(_3730, 1.0));
        float _802 = _801 * 2.0;
        float _806 = (1.0 - _801) / (_801 + 1.0);
        float _3741 = isnan(0.0) ? _806 : (isnan(_806) ? 0.0 : max(_806, 0.0));
        float _807 = isnan(1.0) ? _3741 : (isnan(_3741) ? 1.0 : min(_3741, 1.0));
        float _816 = ((((1.0 - _807) * (_802 + 2.0)) * exp2(log2(isnan(1.0) ? _3719 : (isnan(_3719) ? 1.0 : min(_3719, 1.0))) * (_802 + 1.0))) + _807) * _729;
        float _817 = _697 * 0.5;
        float _818 = _707 * 0.5;
        float _819 = _717 * 0.5;
        float _820 = dot(vec3(_817, _818, _819), vec3(_817, _818, _819));
        float _825 = (_820 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_820);
        float _833 = (dot(vec3(_303, _304, _305), vec3(_825 * _817, _825 * _818, _825 * _819)) + 1.0) * 0.5;
        float _3752 = isnan(0.0) ? _833 : (isnan(_833) ? 0.0 : max(_833, 0.0));
        float _842 = sqrt(((_818 * _818) + (_817 * _817)) + (_819 * _819)) / (_730 + 9.9999997473787516355514526367188e-06);
        float _3763 = isnan(0.0) ? _842 : (isnan(_842) ? 0.0 : max(_842, 0.0));
        float _843 = isnan(1.0) ? _3763 : (isnan(_3763) ? 1.0 : min(_3763, 1.0));
        float _844 = _843 * 2.0;
        float _848 = (1.0 - _843) / (_843 + 1.0);
        float _3774 = isnan(0.0) ? _848 : (isnan(_848) ? 0.0 : max(_848, 0.0));
        float _849 = isnan(1.0) ? _3774 : (isnan(_3774) ? 1.0 : min(_3774, 1.0));
        float _858 = ((((1.0 - _849) * (_844 + 2.0)) * exp2(log2(isnan(1.0) ? _3752 : (isnan(_3752) ? 1.0 : min(_3752, 1.0))) * (_844 + 1.0))) + _849) * _730;
        _866 = _697;
        _868 = _696;
        _869 = _695;
        _870 = _707;
        _871 = _706;
        _872 = _705;
        _873 = _717;
        _874 = _716;
        _875 = _715;
        _876 = _730;
        _877 = _729;
        _878 = _728;
        _879 = cbModelParam._m0[36u].z * (isnan(0.0) ? _774 : (isnan(_774) ? 0.0 : max(_774, 0.0)));
        _880 = cbModelParam._m0[36u].z * (isnan(0.0) ? _816 : (isnan(_816) ? 0.0 : max(_816, 0.0)));
        _881 = cbModelParam._m0[36u].z * (isnan(0.0) ? _858 : (isnan(_858) ? 0.0 : max(_858, 0.0)));
    }
    else
    {
        _866 = _867;
        _868 = _867;
        _869 = _867;
        _870 = _867;
        _871 = _867;
        _872 = _867;
        _873 = _867;
        _874 = _867;
        _875 = _867;
        _876 = _867;
        _877 = _867;
        _878 = _867;
        _879 = 0.0;
        _880 = 0.0;
        _881 = 0.0;
    }
    float _1176;
    float _1177;
    float _1178;
    float _1179;
    float _1180;
    float _1181;
    float _1182;
    float _1183;
    float _1184;
    float _1185;
    float _1186;
    float _1187;
    float _1188;
    float _1189;
    float _1190;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _907 = fma(_561, cbModelParam._m0[30u].z, fma(_557, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _553));
        float _911 = fma(_561, cbModelParam._m0[31u].z, fma(_557, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _553));
        float _915 = fma(_561, cbModelParam._m0[32u].z, fma(_557, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _553));
        float _938 = _553 + _303;
        float _939 = _557 + _304;
        float _940 = _561 + _305;
        float _950 = fma(_940, cbModelParam._m0[30u].z, fma(_939, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _938)) - _907;
        float _951 = fma(_940, cbModelParam._m0[31u].z, fma(_939, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _938)) - _911;
        float _952 = fma(_940, cbModelParam._m0[32u].z, fma(_939, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _938)) - _915;
        float _956 = inversesqrt(dot(vec3(_950, _951, _952), vec3(_950, _951, _952)));
        float _969 = ((_956 * _950) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_907 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _970 = ((_956 * _951) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_911 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _971 = ((_956 * _952) / cbModelParam._m0[35u].z) + ((((((_915 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _973 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_969, _970, _971), 0.0);
        vec4 _980 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_969, _970, _971), 0.0);
        vec4 _987 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_969, _970, _971), 0.0);
        vec4 _994 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_969, _970, _971), 0.0);
        float _1006 = exp2((_973.w + (-0.5)) * 20.0) * 2.0;
        float _1007 = _1006 * (_973.x + (-0.5));
        float _1008 = _1006 * (_973.y + (-0.5));
        float _1009 = _1006 * (_973.z + (-0.5));
        float _1016 = exp2((_980.w + (-0.5)) * 20.0) * 2.0;
        float _1017 = _1016 * (_980.x + (-0.5));
        float _1018 = _1016 * (_980.y + (-0.5));
        float _1019 = _1016 * (_980.z + (-0.5));
        float _1026 = exp2((_987.w + (-0.5)) * 20.0) * 2.0;
        float _1027 = _1026 * (_987.x + (-0.5));
        float _1028 = _1026 * (_987.y + (-0.5));
        float _1029 = _1026 * (_987.z + (-0.5));
        float _1036 = exp2((_994.w + (-0.5)) * 20.0) * 2.0;
        float _1037 = _1036 * (_994.x + (-0.5));
        float _1038 = _1036 * (_994.y + (-0.5));
        float _1039 = _1036 * (_994.z + (-0.5));
        float _1040 = isnan(0.0) ? _1037 : (isnan(_1037) ? 0.0 : max(_1037, 0.0));
        float _1041 = isnan(0.0) ? _1038 : (isnan(_1038) ? 0.0 : max(_1038, 0.0));
        float _1042 = isnan(0.0) ? _1039 : (isnan(_1039) ? 0.0 : max(_1039, 0.0));
        float _1043 = _1007 * 0.5;
        float _1044 = _1017 * 0.5;
        float _1045 = _1027 * 0.5;
        float _1046 = dot(vec3(_1043, _1044, _1045), vec3(_1043, _1044, _1045));
        float _1051 = (_1046 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1046);
        float _1059 = (dot(vec3(_303, _304, _305), vec3(_1051 * _1043, _1051 * _1044, _1051 * _1045)) + 1.0) * 0.5;
        float _3815 = isnan(0.0) ? _1059 : (isnan(_1059) ? 0.0 : max(_1059, 0.0));
        float _1068 = sqrt(((_1044 * _1044) + (_1043 * _1043)) + (_1045 * _1045)) / (_1040 + 9.9999997473787516355514526367188e-06);
        float _3826 = isnan(0.0) ? _1068 : (isnan(_1068) ? 0.0 : max(_1068, 0.0));
        float _1069 = isnan(1.0) ? _3826 : (isnan(_3826) ? 1.0 : min(_3826, 1.0));
        float _1070 = _1069 * 2.0;
        float _1074 = (1.0 - _1069) / (_1069 + 1.0);
        float _3837 = isnan(0.0) ? _1074 : (isnan(_1074) ? 0.0 : max(_1074, 0.0));
        float _1075 = isnan(1.0) ? _3837 : (isnan(_3837) ? 1.0 : min(_3837, 1.0));
        float _1084 = ((((1.0 - _1075) * (_1070 + 2.0)) * exp2(log2(isnan(1.0) ? _3815 : (isnan(_3815) ? 1.0 : min(_3815, 1.0))) * (_1070 + 1.0))) + _1075) * _1040;
        float _1085 = _1008 * 0.5;
        float _1086 = _1018 * 0.5;
        float _1087 = _1028 * 0.5;
        float _1088 = dot(vec3(_1085, _1086, _1087), vec3(_1085, _1086, _1087));
        float _1093 = (_1088 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1088);
        float _1101 = (dot(vec3(_303, _304, _305), vec3(_1093 * _1085, _1093 * _1086, _1093 * _1087)) + 1.0) * 0.5;
        float _3848 = isnan(0.0) ? _1101 : (isnan(_1101) ? 0.0 : max(_1101, 0.0));
        float _1110 = sqrt(((_1086 * _1086) + (_1085 * _1085)) + (_1087 * _1087)) / (_1041 + 9.9999997473787516355514526367188e-06);
        float _3859 = isnan(0.0) ? _1110 : (isnan(_1110) ? 0.0 : max(_1110, 0.0));
        float _1111 = isnan(1.0) ? _3859 : (isnan(_3859) ? 1.0 : min(_3859, 1.0));
        float _1112 = _1111 * 2.0;
        float _1116 = (1.0 - _1111) / (_1111 + 1.0);
        float _3870 = isnan(0.0) ? _1116 : (isnan(_1116) ? 0.0 : max(_1116, 0.0));
        float _1117 = isnan(1.0) ? _3870 : (isnan(_3870) ? 1.0 : min(_3870, 1.0));
        float _1126 = ((((1.0 - _1117) * (_1112 + 2.0)) * exp2(log2(isnan(1.0) ? _3848 : (isnan(_3848) ? 1.0 : min(_3848, 1.0))) * (_1112 + 1.0))) + _1117) * _1041;
        float _1127 = _1009 * 0.5;
        float _1128 = _1019 * 0.5;
        float _1129 = _1029 * 0.5;
        float _1130 = dot(vec3(_1127, _1128, _1129), vec3(_1127, _1128, _1129));
        float _1135 = (_1130 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1130);
        float _1143 = (dot(vec3(_303, _304, _305), vec3(_1135 * _1127, _1135 * _1128, _1135 * _1129)) + 1.0) * 0.5;
        float _3881 = isnan(0.0) ? _1143 : (isnan(_1143) ? 0.0 : max(_1143, 0.0));
        float _1152 = sqrt(((_1128 * _1128) + (_1127 * _1127)) + (_1129 * _1129)) / (_1042 + 9.9999997473787516355514526367188e-06);
        float _3892 = isnan(0.0) ? _1152 : (isnan(_1152) ? 0.0 : max(_1152, 0.0));
        float _1153 = isnan(1.0) ? _3892 : (isnan(_3892) ? 1.0 : min(_3892, 1.0));
        float _1154 = _1153 * 2.0;
        float _1158 = (1.0 - _1153) / (_1153 + 1.0);
        float _3903 = isnan(0.0) ? _1158 : (isnan(_1158) ? 0.0 : max(_1158, 0.0));
        float _1159 = isnan(1.0) ? _3903 : (isnan(_3903) ? 1.0 : min(_3903, 1.0));
        float _1168 = ((((1.0 - _1159) * (_1154 + 2.0)) * exp2(log2(isnan(1.0) ? _3881 : (isnan(_3881) ? 1.0 : min(_3881, 1.0))) * (_1154 + 1.0))) + _1159) * _1042;
        _1176 = _1009;
        _1177 = _1008;
        _1178 = _1007;
        _1179 = _1019;
        _1180 = _1018;
        _1181 = _1017;
        _1182 = _1029;
        _1183 = _1028;
        _1184 = _1027;
        _1185 = _1042;
        _1186 = _1041;
        _1187 = _1040;
        _1188 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1084 : (isnan(_1084) ? 0.0 : max(_1084, 0.0)));
        _1189 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1126 : (isnan(_1126) ? 0.0 : max(_1126, 0.0)));
        _1190 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1168 : (isnan(_1168) ? 0.0 : max(_1168, 0.0)));
    }
    else
    {
        _1176 = _867;
        _1177 = _867;
        _1178 = _867;
        _1179 = _867;
        _1180 = _867;
        _1181 = _867;
        _1182 = _867;
        _1183 = _867;
        _1184 = _867;
        _1185 = _867;
        _1186 = _867;
        _1187 = _867;
        _1188 = 0.0;
        _1189 = 0.0;
        _1190 = 0.0;
    }
    float _1200 = (cbModelParam._m0[1u].x * (_1188 - _879)) + _879;
    float _1201 = (cbModelParam._m0[1u].x * (_1189 - _880)) + _880;
    float _1202 = (cbModelParam._m0[1u].x * (_1190 - _881)) + _881;
    float _1223 = fma(_1202, cbSceneParam._m0[89u].z, fma(_1201, cbSceneParam._m0[89u].y, _1200 * cbSceneParam._m0[89u].x));
    float _1226 = fma(_1202, cbSceneParam._m0[90u].z, fma(_1201, cbSceneParam._m0[90u].y, _1200 * cbSceneParam._m0[90u].x));
    float _1229 = fma(_1202, cbSceneParam._m0[91u].z, fma(_1201, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1200));
    float _1244 = _497 * 0.5;
    float _1245 = _498 * 0.5;
    float _1246 = _499 * 0.5;
    float _1247 = dot(vec4(_1244, _1245, _1246, 1.0), vec4(_1178, _1181, _1184, _1187));
    float _1250 = dot(vec4(_1244, _1245, _1246, 1.0), vec4(_1177, _1180, _1183, _1186));
    float _1253 = dot(vec4(_1244, _1245, _1246, 1.0), vec4(_1176, _1179, _1182, _1185));
    float _1287;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1260 = dot(vec4(_1244, _1245, _1246, 1.0), vec4(_866, _870, _873, _876));
        float _1264 = dot(vec4(_1244, _1245, _1246, 1.0), vec4(_868, _871, _874, _877));
        float _1268 = dot(vec4(_1244, _1245, _1246, 1.0), vec4(_869, _872, _875, _878));
        float _1275 = dot(vec4(cbModelParam._m0[39u]), vec4(_1244, _1245, _1246, 1.0));
        _1287 = dot(vec3(isnan(0.0) ? _1268 : (isnan(_1268) ? 0.0 : max(_1268, 0.0)), isnan(0.0) ? _1264 : (isnan(_1264) ? 0.0 : max(_1264, 0.0)), isnan(0.0) ? _1260 : (isnan(_1260) ? 0.0 : max(_1260, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1275) ? 0.0 : (isnan(0.0) ? _1275 : max(0.0, _1275))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1287 = 1.0;
    }
    float _1298;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1289 = dot(vec4(cbModelParam._m0[40u]), vec4(_1244, _1245, _1246, 1.0));
        _1298 = dot(vec3(isnan(0.0) ? _1247 : (isnan(_1247) ? 0.0 : max(_1247, 0.0)), isnan(0.0) ? _1250 : (isnan(_1250) ? 0.0 : max(_1250, 0.0)), isnan(0.0) ? _1253 : (isnan(_1253) ? 0.0 : max(_1253, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1289) ? 0.0 : (isnan(0.0) ? _1289 : max(0.0, _1289))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1298 = 1.0;
    }
    float _1302 = (_1298 * cbModelParam._m0[1u].x) + (_1287 * (1.0 - cbModelParam._m0[1u].x));
    float _1312 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _307);
    float _1313 = isnan(_1312) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1312 : min(cbModelParam._m0[25u].z, _1312));
    float _1395;
    float _1397;
    float _1399;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1362 = fma(_561, cbModelParam._m0[13u].z, fma(_557, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _553)) + cbModelParam._m0[13u].w;
        float _1366 = fma(_561, cbModelParam._m0[14u].z, fma(_557, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _553)) + cbModelParam._m0[14u].w;
        float _1370 = fma(_561, cbModelParam._m0[15u].z, fma(_557, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _553)) + cbModelParam._m0[15u].w;
        float _1373 = fma(_499, cbModelParam._m0[13u].z, fma(_498, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _497));
        float _1376 = fma(_499, cbModelParam._m0[14u].z, fma(_498, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _497));
        float _1379 = fma(_499, cbModelParam._m0[15u].z, fma(_498, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _497));
        float _1407;
        if (_1373 > 0.0)
        {
            _1407 = abs((1.0 - _1362) / _1373);
        }
        else
        {
            float frontier_phi_18_16_ladder;
            if (_1373 < 0.0)
            {
                frontier_phi_18_16_ladder = abs((_1362 + 1.0) / _1373);
            }
            else
            {
                frontier_phi_18_16_ladder = 5000.0;
            }
            _1407 = frontier_phi_18_16_ladder;
        }
        float _1583;
        if (_1376 > 0.0)
        {
            _1583 = abs((1.0 - _1366) / _1376);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1376 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1366 + 1.0) / _1376);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1583 = frontier_phi_27_23_ladder;
        }
        float _1879;
        if (_1379 > 0.0)
        {
            _1879 = abs((1.0 - _1370) / _1379);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1379 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1370 + 1.0) / _1379);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _1879 = frontier_phi_39_34_ladder;
        }
        float _1881 = isnan(_1583) ? _1407 : (isnan(_1407) ? _1583 : min(_1407, _1583));
        float _1882 = isnan(_1879) ? _1881 : (isnan(_1881) ? _1879 : min(_1881, _1879));
        float _1886 = (_1882 * _1373) + _1362;
        float _1887 = (_1882 * _1376) + _1366;
        float _1888 = (_1882 * _1379) + _1370;
        float _1889 = _1882 * 9.9999997473787516355514526367188e-05;
        float _1891 = (-1.0) - _1889;
        float _1893 = _1889 + 1.0;
        float frontier_phi_17_39_ladder;
        float frontier_phi_17_39_ladder_1;
        float frontier_phi_17_39_ladder_2;
        if ((_1888 > _1893) || ((_1888 < _1891) || ((_1887 > _1893) || ((_1887 < _1891) || ((_1886 < _1891) || (_1886 > _1893))))))
        {
            frontier_phi_17_39_ladder = 0.0;
            frontier_phi_17_39_ladder_1 = 0.0;
            frontier_phi_17_39_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2033 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1888, cbModelParam._m0[9u].z, fma(_1887, cbModelParam._m0[9u].y, _1886 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1888, cbModelParam._m0[10u].z, fma(_1887, cbModelParam._m0[10u].y, _1886 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1888, cbModelParam._m0[11u].z, fma(_1887, cbModelParam._m0[11u].y, _1886 * cbModelParam._m0[11u].x))), _1313);
            frontier_phi_17_39_ladder = _2033.z * cbModelParam._m0[1u].y;
            frontier_phi_17_39_ladder_1 = _2033.y * cbModelParam._m0[1u].y;
            frontier_phi_17_39_ladder_2 = _2033.x * cbModelParam._m0[1u].y;
        }
        _1395 = frontier_phi_17_39_ladder_2;
        _1397 = frontier_phi_17_39_ladder_1;
        _1399 = frontier_phi_17_39_ladder;
    }
    else
    {
        vec4 _1383 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_497, _498, _499), _1313);
        _1395 = _1383.x * cbModelParam._m0[1u].y;
        _1397 = _1383.y * cbModelParam._m0[1u].y;
        _1399 = _1383.z * cbModelParam._m0[1u].y;
    }
    float _1403 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _307);
    float _1404 = isnan(_1403) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1403 : min(cbModelParam._m0[25u].w, _1403));
    float _1497;
    float _1499;
    float _1501;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1461 = fma(_561, cbModelParam._m0[21u].z, fma(_557, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _553)) + cbModelParam._m0[21u].w;
        float _1465 = fma(_561, cbModelParam._m0[22u].z, fma(_557, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _553)) + cbModelParam._m0[22u].w;
        float _1469 = fma(_561, cbModelParam._m0[23u].z, fma(_557, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _553)) + cbModelParam._m0[23u].w;
        float _1472 = fma(_499, cbModelParam._m0[21u].z, fma(_498, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _497));
        float _1475 = fma(_499, cbModelParam._m0[22u].z, fma(_498, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _497));
        float _1478 = fma(_499, cbModelParam._m0[23u].z, fma(_498, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _497));
        float _1588;
        if (_1472 > 0.0)
        {
            _1588 = abs((1.0 - _1461) / _1472);
        }
        else
        {
            float frontier_phi_29_25_ladder;
            if (_1472 < 0.0)
            {
                frontier_phi_29_25_ladder = abs((_1461 + 1.0) / _1472);
            }
            else
            {
                frontier_phi_29_25_ladder = 5000.0;
            }
            _1588 = frontier_phi_29_25_ladder;
        }
        float _1906;
        if (_1475 > 0.0)
        {
            _1906 = abs((1.0 - _1465) / _1475);
        }
        else
        {
            float frontier_phi_41_36_ladder;
            if (_1475 < 0.0)
            {
                frontier_phi_41_36_ladder = abs((_1465 + 1.0) / _1475);
            }
            else
            {
                frontier_phi_41_36_ladder = 5000.0;
            }
            _1906 = frontier_phi_41_36_ladder;
        }
        float _2244;
        if (_1478 > 0.0)
        {
            _2244 = abs((1.0 - _1469) / _1478);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1478 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1469 + 1.0) / _1478);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2244 = frontier_phi_51_48_ladder;
        }
        float _2246 = isnan(_1906) ? _1588 : (isnan(_1588) ? _1906 : min(_1588, _1906));
        float _2247 = isnan(_2244) ? _2246 : (isnan(_2246) ? _2244 : min(_2246, _2244));
        float _2251 = (_2247 * _1472) + _1461;
        float _2252 = (_2247 * _1475) + _1465;
        float _2253 = (_2247 * _1478) + _1469;
        float _2254 = _2247 * 9.9999997473787516355514526367188e-05;
        float _2255 = (-1.0) - _2254;
        float _2257 = _2254 + 1.0;
        float frontier_phi_26_51_ladder;
        float frontier_phi_26_51_ladder_1;
        float frontier_phi_26_51_ladder_2;
        if ((_2253 > _2257) || ((_2253 < _2255) || ((_2252 > _2257) || ((_2252 < _2255) || ((_2251 < _2255) || (_2251 > _2257))))))
        {
            frontier_phi_26_51_ladder = 0.0;
            frontier_phi_26_51_ladder_1 = 0.0;
            frontier_phi_26_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2375 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2253, cbModelParam._m0[17u].z, fma(_2252, cbModelParam._m0[17u].y, _2251 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2253, cbModelParam._m0[18u].z, fma(_2252, cbModelParam._m0[18u].y, _2251 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2253, cbModelParam._m0[19u].z, fma(_2252, cbModelParam._m0[19u].y, _2251 * cbModelParam._m0[19u].x))), _1404);
            frontier_phi_26_51_ladder = _2375.z * cbModelParam._m0[1u].z;
            frontier_phi_26_51_ladder_1 = _2375.y * cbModelParam._m0[1u].z;
            frontier_phi_26_51_ladder_2 = _2375.x * cbModelParam._m0[1u].z;
        }
        _1497 = frontier_phi_26_51_ladder_2;
        _1499 = frontier_phi_26_51_ladder_1;
        _1501 = frontier_phi_26_51_ladder;
    }
    else
    {
        vec4 _1481 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_497, _498, _499), _1404);
        _1497 = _1481.x * cbModelParam._m0[1u].z;
        _1499 = _1481.y * cbModelParam._m0[1u].z;
        _1501 = _1481.z * cbModelParam._m0[1u].z;
    }
    float _1514 = (((_524 * _474) + _525) * _489) * ((cbModelParam._m0[1u].w * (_1497 - _1395)) + _1395);
    float _1516 = (((_524 * _476) + _525) * _489) * ((cbModelParam._m0[1u].w * (_1499 - _1397)) + _1397);
    float _1518 = (((_524 * _477) + _525) * _489) * ((cbModelParam._m0[1u].w * (_1501 - _1399)) + _1399);
    float _1521 = fma(_1518, cbSceneParam._m0[89u].z, fma(_1516, cbSceneParam._m0[89u].y, _1514 * cbSceneParam._m0[89u].x));
    float _1524 = fma(_1518, cbSceneParam._m0[90u].z, fma(_1516, cbSceneParam._m0[90u].y, _1514 * cbSceneParam._m0[90u].x));
    float _1527 = fma(_1518, cbSceneParam._m0[91u].z, fma(_1516, cbSceneParam._m0[91u].y, _1514 * cbSceneParam._m0[91u].x));
    float _1562 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1566 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1570 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1574 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1575 = _1562 / _1574;
    float _1576 = _1566 / _1574;
    float _1577 = _1570 / _1574;
    float _1724;
    float _1725;
    float _1726;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1604 = ((uint(_1577 > cbSceneParam._m0[59u].y) + uint(_1577 > cbSceneParam._m0[59u].x)) + uint(_1577 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1605 = _1604 + 43u;
        uint _1613 = _1604 + 44u;
        uint _1621 = _1604 + 45u;
        uint _1629 = _1604 + 46u;
        float _1640 = fma(_1574, cbSceneParam._m0[_1605].w, fma(_1570, cbSceneParam._m0[_1605].z, fma(_1566, cbSceneParam._m0[_1605].y, _1562 * cbSceneParam._m0[_1605].x)));
        float _1644 = fma(_1574, cbSceneParam._m0[_1613].w, fma(_1570, cbSceneParam._m0[_1613].z, fma(_1566, cbSceneParam._m0[_1613].y, _1562 * cbSceneParam._m0[_1613].x)));
        float _1652 = fma(_1574, cbSceneParam._m0[_1629].w, fma(_1570, cbSceneParam._m0[_1629].z, fma(_1566, cbSceneParam._m0[_1629].y, _1562 * cbSceneParam._m0[_1629].x)));
        float _1657 = cbSceneParam._m0[33u].z * _1652;
        float _1659 = cbSceneParam._m0[33u].w * _1652;
        float _1662 = fma(_1574, cbSceneParam._m0[_1621].w, fma(_1570, cbSceneParam._m0[_1621].z, fma(_1566, cbSceneParam._m0[_1621].y, _1562 * cbSceneParam._m0[_1621].x))) / _1652;
        float _1710 = (cbSceneParam._m0[33u].x - sqrt(((_1576 * _1576) + (_1575 * _1575)) + (_1577 * _1577))) * cbSceneParam._m0[33u].y;
        float _4029 = isnan(0.0) ? _1710 : (isnan(_1710) ? 0.0 : max(_1710, 0.0));
        float _1717 = (isnan(1.0) ? _4029 : (isnan(_4029) ? 1.0 : min(_4029, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1657 + _1640) / _1652, (_1659 + _1644) / _1652), _1662), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1659 + _1640) / _1652, (_1644 - _1657) / _1652), _1662), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1640 - _1657) / _1652, (_1644 - _1659) / _1652), _1662), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1640 - _1659) / _1652, (_1657 + _1644) / _1652), _1662), 0.0)).x), vec4(0.25)));
        _1724 = 1.0 - (_1717 * cbSceneParam._m0[34u].x);
        _1725 = 1.0 - (_1717 * cbSceneParam._m0[34u].y);
        _1726 = 1.0 - (_1717 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1724 = 1.0;
        _1725 = 1.0;
        _1726 = 1.0;
    }
    float _1790;
    float _1792;
    float _1794;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1778 = fma(_1574, cbSceneParam._m0[63u].w, fma(_1570, cbSceneParam._m0[63u].z, fma(_1566, cbSceneParam._m0[63u].y, _1562 * cbSceneParam._m0[63u].x)));
        float _1779 = fma(_1574, cbSceneParam._m0[60u].w, fma(_1570, cbSceneParam._m0[60u].z, fma(_1566, cbSceneParam._m0[60u].y, _1562 * cbSceneParam._m0[60u].x))) / _1778;
        float _1780 = fma(_1574, cbSceneParam._m0[61u].w, fma(_1570, cbSceneParam._m0[61u].z, fma(_1566, cbSceneParam._m0[61u].y, _1562 * cbSceneParam._m0[61u].x))) / _1778;
        float frontier_phi_38_37_ladder;
        float frontier_phi_38_37_ladder_1;
        float frontier_phi_38_37_ladder_2;
        if ((((_1779 >= cbSceneParam._m0[64u].x) && (_1780 >= cbSceneParam._m0[64u].y)) && (_1779 <= cbSceneParam._m0[64u].z)) && (_1780 <= cbSceneParam._m0[64u].w))
        {
            float _1919 = fma(_1574, cbSceneParam._m0[62u].w, fma(_1570, cbSceneParam._m0[62u].z, fma(_1566, cbSceneParam._m0[62u].y, _1562 * cbSceneParam._m0[62u].x))) / _1778;
            float _1923 = isnan(cbSceneParam._m0[41u].w) ? _1919 : (isnan(_1919) ? cbSceneParam._m0[41u].w : max(_1919, cbSceneParam._m0[41u].w));
            float _1966 = (cbSceneParam._m0[33u].x - sqrt(((_1576 * _1576) + (_1575 * _1575)) + (_1577 * _1577))) * cbSceneParam._m0[33u].y;
            float _4045 = isnan(0.0) ? _1966 : (isnan(_1966) ? 0.0 : max(_1966, 0.0));
            float _1973 = (isnan(1.0) ? _4045 : (isnan(_4045) ? 1.0 : min(_4045, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1779, cbSceneParam._m0[33u].w + _1780), _1923), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1779, _1780 - cbSceneParam._m0[33u].z), _1923), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1779 - cbSceneParam._m0[33u].z, _1780 - cbSceneParam._m0[33u].w), _1923), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1779 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1780), _1923), 0.0)).x), vec4(0.25)));
            float _1977 = 1.0 - (_1973 * cbSceneParam._m0[34u].x);
            float _1978 = 1.0 - (_1973 * cbSceneParam._m0[34u].y);
            float _1979 = 1.0 - (_1973 * cbSceneParam._m0[34u].z);
            frontier_phi_38_37_ladder = isnan(_1978) ? _1725 : (isnan(_1725) ? _1978 : min(_1725, _1978));
            frontier_phi_38_37_ladder_1 = isnan(_1977) ? _1724 : (isnan(_1724) ? _1977 : min(_1724, _1977));
            frontier_phi_38_37_ladder_2 = isnan(_1979) ? _1726 : (isnan(_1726) ? _1979 : min(_1726, _1979));
        }
        else
        {
            frontier_phi_38_37_ladder = _1725;
            frontier_phi_38_37_ladder_1 = _1724;
            frontier_phi_38_37_ladder_2 = _1726;
        }
        _1790 = frontier_phi_38_37_ladder_1;
        _1792 = frontier_phi_38_37_ladder;
        _1794 = frontier_phi_38_37_ladder_2;
    }
    else
    {
        _1790 = _1724;
        _1792 = _1725;
        _1794 = _1726;
    }
    uvec4 _1799 = floatBitsToUint(cbInstanceData._m0[_448 + 5u]);
    uint _1801 = _1799.x * 14u;
    uint _1802 = _1801 + 13u;
    float _1809 = _489 + (-1.0);
    float _1814 = (cbLight._m0[_1802].x * _1809) + 1.0;
    float _1815 = (cbLight._m0[_1802].y * _1809) + 1.0;
    float _1816 = (cbLight._m0[_1802].z * _1809) + 1.0;
    float _1817 = (cbLight._m0[_1802].w * _1809) + 1.0;
    uint _1818 = _1801 + 5u;
    float _1824 = isnan(1.0) ? _1815 : (isnan(_1815) ? 1.0 : min(_1815, 1.0));
    uint _1828 = _1801 + 4u;
    float _1838 = isnan(1.0) ? _1814 : (isnan(_1814) ? 1.0 : min(_1814, 1.0));
    uint _1842 = _1801 | 1u;
    float _1853 = dot(vec3(cbLight._m0[_1801].xyz), vec3(_303, _304, _305));
    float _1856 = dot(vec3(cbLight._m0[_1842].xyz), vec3(_303, _304, _305));
    float _4081 = isnan(0.0) ? _1853 : (isnan(_1853) ? 0.0 : max(_1853, 0.0));
    float _4092 = isnan(0.0) ? _1856 : (isnan(_1856) ? 0.0 : max(_1856, 0.0));
    float _1861 = (isnan(1.0) ? _4081 : (isnan(_4081) ? 1.0 : min(_4081, 1.0))) * 0.3183098733425140380859375;
    float _1863 = (isnan(1.0) ? _4092 : (isnan(_4092) ? 1.0 : min(_4092, 1.0))) * 0.3183098733425140380859375;
    float _1870 = ((cbLight._m0[_1818].x * _1824) * _1863) + (((cbLight._m0[_1828].x * _1790) * _1838) * _1861);
    float _1871 = ((_1824 * cbLight._m0[_1818].y) * _1863) + (((cbLight._m0[_1828].y * _1792) * _1838) * _1861);
    float _1872 = ((_1824 * cbLight._m0[_1818].z) * _1863) + (((cbLight._m0[_1828].z * _1794) * _1838) * _1861);
    uvec4 _1876 = floatBitsToUint(cbLight._m0[_1801 + 12u]);
    bool _1878 = _1876.x == 0u;
    float _1980;
    float _1982;
    float _1984;
    if (_1878)
    {
        _1980 = _1870;
        _1982 = _1871;
        _1984 = _1872;
    }
    else
    {
        uint _1988 = _1801 + 6u;
        float _2004 = (dot(vec3(cbLight._m0[_1801 + 2u].xyz), vec3(_303, _304, _305)) * 0.5) + 0.5;
        float _2005 = _2004 * _2004;
        float _4103 = isnan(0.0) ? _2005 : (isnan(_2005) ? 0.0 : max(_2005, 0.0));
        float _2006 = isnan(1.0) ? _4103 : (isnan(_4103) ? 1.0 : min(_4103, 1.0));
        float _2007 = isnan(1.0) ? _1816 : (isnan(_1816) ? 1.0 : min(_1816, 1.0));
        _1980 = (((cbLight._m0[_1988].x * 0.3183098733425140380859375) * _2006) * _2007) + _1870;
        _1982 = (((cbLight._m0[_1988].y * 0.3183098733425140380859375) * _2006) * _2007) + _1871;
        _1984 = (((cbLight._m0[_1988].z * 0.3183098733425140380859375) * _2006) * _2007) + _1872;
    }
    bool _1987 = _1876.y == 0u;
    float _2042;
    float _2044;
    float _2046;
    if (_1987)
    {
        _2042 = _1980;
        _2044 = _1982;
        _2046 = _1984;
    }
    else
    {
        uint _2215 = _1801 + 7u;
        float _2231 = (dot(vec3(cbLight._m0[_1801 + 3u].xyz), vec3(_303, _304, _305)) * 0.5) + 0.5;
        float _2232 = _2231 * _2231;
        float _4119 = isnan(0.0) ? _2232 : (isnan(_2232) ? 0.0 : max(_2232, 0.0));
        float _2233 = isnan(1.0) ? _4119 : (isnan(_4119) ? 1.0 : min(_4119, 1.0));
        float _2234 = isnan(1.0) ? _1817 : (isnan(_1817) ? 1.0 : min(_1817, 1.0));
        _2042 = (((cbLight._m0[_2215].x * 0.3183098733425140380859375) * _2233) * _2234) + _1980;
        _2044 = (((cbLight._m0[_2215].y * 0.3183098733425140380859375) * _2233) * _2234) + _1982;
        _2046 = (((cbLight._m0[_2215].z * 0.3183098733425140380859375) * _2233) * _2234) + _1984;
    }
    uint _2049 = _1801 + 8u;
    float _2062 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1801].w)) * _307) * 0.949999988079071044921875);
    float _2063 = _2062 * _2062;
    float _2064 = cbLight._m0[_1801].x + _395;
    float _2065 = cbLight._m0[_1801].y + _396;
    float _2066 = cbLight._m0[_1801].z + _397;
    float _2070 = inversesqrt(dot(vec3(_2064, _2065, _2066), vec3(_2064, _2065, _2066)));
    float _2071 = _2070 * _2064;
    float _2072 = _2070 * _2065;
    float _2073 = _2070 * _2066;
    float _2074 = dot(vec3(_303, _304, _305), vec3(cbLight._m0[_1801].xyz));
    float _4135 = isnan(0.0) ? _2074 : (isnan(_2074) ? 0.0 : max(_2074, 0.0));
    float _2077 = isnan(1.0) ? _4135 : (isnan(_4135) ? 1.0 : min(_4135, 1.0));
    float _4146 = isnan(0.0) ? _490 : (isnan(_490) ? 0.0 : max(_490, 0.0));
    float _2078 = isnan(1.0) ? _4146 : (isnan(_4146) ? 1.0 : min(_4146, 1.0));
    float _2079 = dot(vec3(_303, _304, _305), vec3(_2071, _2072, _2073));
    float _4157 = isnan(0.0) ? _2079 : (isnan(_2079) ? 0.0 : max(_2079, 0.0));
    float _2082 = isnan(1.0) ? _4157 : (isnan(_4157) ? 1.0 : min(_4157, 1.0));
    float _2083 = dot(vec3(cbLight._m0[_1801].xyz), vec3(_2071, _2072, _2073));
    float _4168 = isnan(0.0) ? _2083 : (isnan(_2083) ? 0.0 : max(_2083, 0.0));
    float _2087 = _2063 * _2063;
    float _2091 = ((_2082 * _2082) * (_2087 + (-1.0))) + 1.0;
    float _2099 = exp2(log2(1.0 - (isnan(1.0) ? _4168 : (isnan(_4168) ? 1.0 : min(_4168, 1.0)))) * 5.0);
    float _2100 = 0.959999978542327880859375 - _471;
    float _2102 = 0.959999978542327880859375 - _472;
    float _2103 = 0.959999978542327880859375 - _473;
    float _2110 = 1.0 - _2063;
    float _2121 = (0.5 / (((_2078 * ((_2077 * _2110) + _2063)) + 9.9999999392252902907785028219223e-09) + (((_2078 * _2110) + _2063) * _2077))) * _2077;
    float _4179 = isnan(0.0) ? _2121 : (isnan(_2121) ? 0.0 : max(_2121, 0.0));
    float _2123 = (isnan(1.0) ? _4179 : (isnan(_4179) ? 1.0 : min(_4179, 1.0))) * (_2087 / ((_2091 * _2091) * 3.141590118408203125));
    uint _2137 = _1801 + 9u;
    float _2148 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1842].w)) * _307) * 0.949999988079071044921875);
    float _2149 = _2148 * _2148;
    float _2150 = cbLight._m0[_1842].x + _395;
    float _2151 = cbLight._m0[_1842].y + _396;
    float _2152 = cbLight._m0[_1842].z + _397;
    float _2156 = inversesqrt(dot(vec3(_2150, _2151, _2152), vec3(_2150, _2151, _2152)));
    float _2157 = _2156 * _2150;
    float _2158 = _2156 * _2151;
    float _2159 = _2156 * _2152;
    float _2160 = dot(vec3(_303, _304, _305), vec3(cbLight._m0[_1842].xyz));
    float _4190 = isnan(0.0) ? _2160 : (isnan(_2160) ? 0.0 : max(_2160, 0.0));
    float _2163 = isnan(1.0) ? _4190 : (isnan(_4190) ? 1.0 : min(_4190, 1.0));
    float _2164 = dot(vec3(_303, _304, _305), vec3(_2157, _2158, _2159));
    float _4201 = isnan(0.0) ? _2164 : (isnan(_2164) ? 0.0 : max(_2164, 0.0));
    float _2167 = isnan(1.0) ? _4201 : (isnan(_4201) ? 1.0 : min(_4201, 1.0));
    float _2168 = dot(vec3(cbLight._m0[_1842].xyz), vec3(_2157, _2158, _2159));
    float _4212 = isnan(0.0) ? _2168 : (isnan(_2168) ? 0.0 : max(_2168, 0.0));
    float _2172 = _2149 * _2149;
    float _2176 = ((_2167 * _2167) * (_2172 + (-1.0))) + 1.0;
    float _2183 = exp2(log2(1.0 - (isnan(1.0) ? _4212 : (isnan(_4212) ? 1.0 : min(_4212, 1.0)))) * 5.0);
    float _2190 = 1.0 - _2149;
    float _2200 = (0.5 / (((_2078 * ((_2163 * _2190) + _2149)) + 9.9999999392252902907785028219223e-09) + (((_2078 * _2190) + _2149) * _2163))) * _2163;
    float _4223 = isnan(0.0) ? _2200 : (isnan(_2200) ? 0.0 : max(_2200, 0.0));
    float _2202 = (isnan(1.0) ? _4223 : (isnan(_4223) ? 1.0 : min(_4223, 1.0))) * (_2172 / ((_2176 * _2176) * 3.141590118408203125));
    float _2212 = (((((_2183 * _2100) + _474) * cbLight._m0[_2137].x) * _2202) * _1824) + ((((cbLight._m0[_2049].x * _1790) * ((_2099 * _2100) + _474)) * _2123) * _1838);
    float _2213 = (((((_2183 * _2102) + _476) * cbLight._m0[_2137].y) * _2202) * _1824) + ((((cbLight._m0[_2049].y * _1792) * ((_2099 * _2102) + _476)) * _2123) * _1838);
    float _2214 = (((((_2183 * _2103) + _477) * cbLight._m0[_2137].z) * _2202) * _1824) + ((((cbLight._m0[_2049].z * _1794) * ((_2099 * _2103) + _477)) * _2123) * _1838);
    float _2270;
    float _2272;
    float _2274;
    if (_1878)
    {
        _2270 = _2212;
        _2272 = _2213;
        _2274 = _2214;
    }
    else
    {
        uint _2276 = _1801 + 2u;
        uint _2280 = _1801 + 10u;
        float _2294 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2276].w)) * _307) * 0.949999988079071044921875);
        float _2295 = _2294 * _2294;
        float _2296 = cbLight._m0[_2276].x + _395;
        float _2297 = cbLight._m0[_2276].y + _396;
        float _2298 = cbLight._m0[_2276].z + _397;
        float _2302 = inversesqrt(dot(vec3(_2296, _2297, _2298), vec3(_2296, _2297, _2298)));
        float _2303 = _2302 * _2296;
        float _2304 = _2302 * _2297;
        float _2305 = _2302 * _2298;
        float _2306 = dot(vec3(_303, _304, _305), vec3(cbLight._m0[_2276].xyz));
        float _4234 = isnan(0.0) ? _2306 : (isnan(_2306) ? 0.0 : max(_2306, 0.0));
        float _2309 = isnan(1.0) ? _4234 : (isnan(_4234) ? 1.0 : min(_4234, 1.0));
        float _2310 = dot(vec3(_303, _304, _305), vec3(_2303, _2304, _2305));
        float _4245 = isnan(0.0) ? _2310 : (isnan(_2310) ? 0.0 : max(_2310, 0.0));
        float _2313 = isnan(1.0) ? _4245 : (isnan(_4245) ? 1.0 : min(_4245, 1.0));
        float _2314 = dot(vec3(cbLight._m0[_2276].xyz), vec3(_2303, _2304, _2305));
        float _4256 = isnan(0.0) ? _2314 : (isnan(_2314) ? 0.0 : max(_2314, 0.0));
        float _2318 = _2295 * _2295;
        float _2322 = ((_2313 * _2313) * (_2318 + (-1.0))) + 1.0;
        float _2329 = exp2(log2(1.0 - (isnan(1.0) ? _4256 : (isnan(_4256) ? 1.0 : min(_4256, 1.0)))) * 5.0);
        float _2336 = 1.0 - _2295;
        float _2346 = (0.5 / (((_2078 * ((_2309 * _2336) + _2295)) + 9.9999999392252902907785028219223e-09) + (((_2078 * _2336) + _2295) * _2309))) * _2309;
        float _4267 = isnan(0.0) ? _2346 : (isnan(_2346) ? 0.0 : max(_2346, 0.0));
        float _2348 = (isnan(1.0) ? _4267 : (isnan(_4267) ? 1.0 : min(_4267, 1.0))) * (_2318 / ((_2322 * _2322) * 3.141590118408203125));
        float _2349 = isnan(1.0) ? _1816 : (isnan(_1816) ? 1.0 : min(_1816, 1.0));
        _2270 = (((((_2329 * _2100) + _474) * cbLight._m0[_2280].x) * _2348) * _2349) + _2212;
        _2272 = (((((_2329 * _2102) + _476) * cbLight._m0[_2280].y) * _2348) * _2349) + _2213;
        _2274 = (((((_2329 * _2103) + _477) * cbLight._m0[_2280].z) * _2348) * _2349) + _2214;
    }
    float _2380;
    float _2382;
    float _2384;
    if (_1987)
    {
        _2380 = _2270;
        _2382 = _2272;
        _2384 = _2274;
    }
    else
    {
        uint _2391 = _1801 + 3u;
        uint _2395 = _1801 + 11u;
        float _2409 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2391].w)) * _307) * 0.949999988079071044921875);
        float _2410 = _2409 * _2409;
        float _2411 = cbLight._m0[_2391].x + _395;
        float _2412 = cbLight._m0[_2391].y + _396;
        float _2413 = cbLight._m0[_2391].z + _397;
        float _2417 = inversesqrt(dot(vec3(_2411, _2412, _2413), vec3(_2411, _2412, _2413)));
        float _2418 = _2417 * _2411;
        float _2419 = _2417 * _2412;
        float _2420 = _2417 * _2413;
        float _2421 = dot(vec3(_303, _304, _305), vec3(cbLight._m0[_2391].xyz));
        float _4283 = isnan(0.0) ? _2421 : (isnan(_2421) ? 0.0 : max(_2421, 0.0));
        float _2424 = isnan(1.0) ? _4283 : (isnan(_4283) ? 1.0 : min(_4283, 1.0));
        float _2425 = dot(vec3(_303, _304, _305), vec3(_2418, _2419, _2420));
        float _4294 = isnan(0.0) ? _2425 : (isnan(_2425) ? 0.0 : max(_2425, 0.0));
        float _2428 = isnan(1.0) ? _4294 : (isnan(_4294) ? 1.0 : min(_4294, 1.0));
        float _2429 = dot(vec3(cbLight._m0[_2391].xyz), vec3(_2418, _2419, _2420));
        float _4305 = isnan(0.0) ? _2429 : (isnan(_2429) ? 0.0 : max(_2429, 0.0));
        float _2433 = _2410 * _2410;
        float _2437 = ((_2428 * _2428) * (_2433 + (-1.0))) + 1.0;
        float _2444 = exp2(log2(1.0 - (isnan(1.0) ? _4305 : (isnan(_4305) ? 1.0 : min(_4305, 1.0)))) * 5.0);
        float _2451 = 1.0 - _2410;
        float _2461 = (0.5 / (((_2078 * ((_2424 * _2451) + _2410)) + 9.9999999392252902907785028219223e-09) + (((_2078 * _2451) + _2410) * _2424))) * _2424;
        float _4316 = isnan(0.0) ? _2461 : (isnan(_2461) ? 0.0 : max(_2461, 0.0));
        float _2463 = (isnan(1.0) ? _4316 : (isnan(_4316) ? 1.0 : min(_4316, 1.0))) * (_2433 / ((_2437 * _2437) * 3.141590118408203125));
        float _2464 = isnan(1.0) ? _1817 : (isnan(_1817) ? 1.0 : min(_1817, 1.0));
        _2380 = (((((_2444 * _2100) + _474) * cbLight._m0[_2395].x) * _2463) * _2464) + _2270;
        _2382 = (((((_2444 * _2102) + _476) * cbLight._m0[_2395].y) * _2463) * _2464) + _2272;
        _2384 = (((((_2444 * _2103) + _477) * cbLight._m0[_2395].z) * _2463) * _2464) + _2274;
    }
    float _2529;
    float _2531;
    float _2533;
    float _2535;
    float _2537;
    float _2539;
    if (_1799.y == 0u)
    {
        uvec4 _2485 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2486 = _2485.x;
        uint _2497 = uint((float(_2485.y) * floor(float(uint(cbSceneParam._m0[85u].y * _408) / _2486))) + floor(float(uint(cbSceneParam._m0[85u].x * _407) / _2486)));
        float _2507 = (log2(_1577 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2508 = isnan(0.0) ? _2507 : (isnan(_2507) ? 0.0 : max(_2507, 0.0));
        uint _2511 = uint(isnan(14.0) ? _2508 : (isnan(_2508) ? 14.0 : min(_2508, 14.0)));
        uvec4 _2516 = texelFetch(g_lightClusterGridBuffer, int(((_2511 << 2u) + (_2497 << 6u)) >> 2u));
        uint _2517 = _2516.x;
        uint _2518 = _2485.z;
        float _2598;
        float _2600;
        float _2602;
        float _2604;
        float _2606;
        float _2608;
        if (((((1u << ((_2518 >> 4u) & 15u)) + 4294967295u) & _2517) == 0u) || ((_2518 & 240u) == 0u))
        {
            _2598 = 0.0;
            _2600 = 0.0;
            _2602 = 0.0;
            _2604 = 0.0;
            _2606 = 0.0;
            _2608 = 0.0;
        }
        else
        {
            float _2599;
            float _2601;
            float _2603;
            float _2605;
            float _2607;
            float _2609;
            float _2750 = 0.0;
            float _2751 = 0.0;
            float _2752 = 0.0;
            float _2753 = 0.0;
            float _2754 = 0.0;
            float _2755 = 0.0;
            uint _2756 = 0u;
            uint _2765;
            bool _2766;
            for (;;)
            {
                _2765 = texelFetch(g_lightClassification, int((((_2511 << 5u) + (_2497 << 9u)) + (_2756 << 2u)) >> 2u)).x;
                _2766 = _2765 == 0u;
                float frontier_phi_72_pred;
                float frontier_phi_72_pred_1;
                float frontier_phi_72_pred_2;
                float frontier_phi_72_pred_3;
                float frontier_phi_72_pred_4;
                float frontier_phi_72_pred_5;
                if (_2766)
                {
                    frontier_phi_72_pred = _2755;
                    frontier_phi_72_pred_1 = _2754;
                    frontier_phi_72_pred_2 = _2753;
                    frontier_phi_72_pred_3 = _2752;
                    frontier_phi_72_pred_4 = _2751;
                    frontier_phi_72_pred_5 = _2750;
                }
                else
                {
                    float _2895;
                    float _2896;
                    float _2897;
                    float _2898;
                    float _2899;
                    float _2900;
                    uint _2901;
                    _2895 = _2750;
                    _2896 = _2751;
                    _2897 = _2752;
                    _2898 = _2753;
                    _2899 = _2754;
                    _2900 = _2755;
                    _2901 = _2765;
                    float _2822;
                    float _2823;
                    float _2824;
                    float _2825;
                    float _2826;
                    float _2827;
                    for (;;)
                    {
                        uint _2905 = uint(findLSB(_2901)) + (_2756 << 5u);
                        uint _2902 = (_2901 + 4294967295u) & _2901;
                        uint _2907 = _2905 * 48u;
                        vec4 _2921 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2907)).x, texelFetch(g_PointLightRenderingBuffer, int(_2907 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2907 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2907 + 3u)).x));
                        uint _2927 = (_2905 * 48u) + 4u;
                        vec4 _2940 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2927)).x, texelFetch(g_PointLightRenderingBuffer, int(_2927 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2927 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2927 + 3u)).x));
                        uint _2946 = (_2905 * 48u) + 8u;
                        vec3 _2957 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2946)).x, texelFetch(g_PointLightRenderingBuffer, int(_2946 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2946 + 2u)).x));
                        float _2961 = _2921.x - _1575;
                        float _2962 = _2921.y - _1576;
                        float _2963 = _2921.z - _1577;
                        float _2964 = dot(vec3(_2961, _2962, _2963), vec3(_2961, _2962, _2963));
                        float _2967 = inversesqrt(_2964);
                        float _2968 = _2967 * _2961;
                        float _2969 = _2967 * _2962;
                        float _2970 = _2967 * _2963;
                        float _2971 = dot(vec3(_429, _432, _435), vec3(_2968, _2969, _2970));
                        float _2976 = 1.0 - (_2964 * _2921.w);
                        float _4342 = isnan(0.0) ? _2976 : (isnan(_2976) ? 0.0 : max(_2976, 0.0));
                        float _2977 = isnan(1.0) ? _4342 : (isnan(_4342) ? 1.0 : min(_4342, 1.0));
                        float _2978 = sqrt(_2964) * _2940.w;
                        float _2981 = 1.39999997615814208984375 / (_2978 + 1.39999997615814208984375);
                        float _2982 = _2981 * _2981;
                        float _2985 = ((1.0 - _2982) * _2971) + _2982;
                        float _2988 = _2978 * _2978;
                        float _2992 = ((isnan(0.0) ? _2985 : (isnan(_2985) ? 0.0 : max(_2985, 0.0))) * _2977) / ((_2988 * 0.699999988079071044921875) + 1.0);
                        float _2996 = (-0.0) - _1575;
                        float _2997 = (-0.0) - _1576;
                        float _2998 = (-0.0) - _1577;
                        float _3002 = inversesqrt(dot(vec3(_2996, _2997, _2998), vec3(_2996, _2997, _2998)));
                        float _3003 = _3002 * _2996;
                        float _3004 = _3002 * _2997;
                        float _3005 = _3002 * _2998;
                        float _3012 = exp2(log2(1.0 / ((_2988 * 3.5) + 5.0)) * 0.25);
                        float _3013 = 1.0 - _505;
                        float _3020 = sqrt(1.0 - ((1.0 - (_3013 * _3013)) * (1.0 - (_3012 * _3012))));
                        float _3021 = _3020 * _3020;
                        float _3022 = _3021 * _3021;
                        float _3023 = _3003 + _2968;
                        float _3024 = _3004 + _2969;
                        float _3025 = _3005 + _2970;
                        float _3029 = inversesqrt(dot(vec3(_3023, _3024, _3025), vec3(_3023, _3024, _3025)));
                        float _3033 = dot(vec3(_429, _432, _435), vec3(_3003, _3004, _3005));
                        float _4358 = isnan(0.0) ? _3033 : (isnan(_3033) ? 0.0 : max(_3033, 0.0));
                        float _3036 = isnan(1.0) ? _4358 : (isnan(_4358) ? 1.0 : min(_4358, 1.0));
                        float _3037 = dot(vec3(_429, _432, _435), vec3(_3029 * _3023, _3029 * _3024, _3029 * _3025));
                        float _4369 = isnan(0.0) ? _3037 : (isnan(_3037) ? 0.0 : max(_3037, 0.0));
                        float _3040 = isnan(1.0) ? _4369 : (isnan(_4369) ? 1.0 : min(_4369, 1.0));
                        float _3044 = ((_3040 * _3040) * (_3022 + (-1.0))) + 1.0;
                        float _3045 = _2981 * _3021;
                        float _3046 = _3045 * _3045;
                        float _3049 = ((1.0 - _3046) * _2971) + _3046;
                        float _4380 = isnan(0.0) ? _3049 : (isnan(_3049) ? 0.0 : max(_3049, 0.0));
                        float _3050 = isnan(1.0) ? _4380 : (isnan(_4380) ? 1.0 : min(_4380, 1.0));
                        float _3051 = 1.0 - _3021;
                        float _3061 = (0.5 / (((_3050 * ((_3036 * _3051) + _3021)) + 9.9999999392252902907785028219223e-09) + (((_3050 * _3051) + _3021) * _3036))) * _3050;
                        float _4391 = isnan(0.0) ? _3061 : (isnan(_3061) ? 0.0 : max(_3061, 0.0));
                        float _3072 = (((_3022 * 3.1415927410125732421875) * (isnan(1.0) ? _4391 : (isnan(_4391) ? 1.0 : min(_4391, 1.0)))) / ((_3044 * _3044) * ((_2988 * 2.1991131305694580078125) + 3.141590118408203125))) * _2977;
                        _2825 = (_2992 * _2940.x) + _2898;
                        _2826 = (_2992 * _2940.y) + _2899;
                        _2827 = (_2992 * _2940.z) + _2900;
                        _2822 = (_3072 * _2957.x) + _2895;
                        _2823 = (_3072 * _2957.y) + _2896;
                        _2824 = (_3072 * _2957.z) + _2897;
                        if (_2902 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2895 = _2822;
                            _2896 = _2823;
                            _2897 = _2824;
                            _2898 = _2825;
                            _2899 = _2826;
                            _2900 = _2827;
                            _2901 = _2902;
                        }
                    }
                    frontier_phi_72_pred = _2827;
                    frontier_phi_72_pred_1 = _2826;
                    frontier_phi_72_pred_2 = _2825;
                    frontier_phi_72_pred_3 = _2824;
                    frontier_phi_72_pred_4 = _2823;
                    frontier_phi_72_pred_5 = _2822;
                }
                _2609 = frontier_phi_72_pred;
                _2607 = frontier_phi_72_pred_1;
                _2605 = frontier_phi_72_pred_2;
                _2603 = frontier_phi_72_pred_3;
                _2601 = frontier_phi_72_pred_4;
                _2599 = frontier_phi_72_pred_5;
                uint _2757 = _2756 + 1u;
                if (_2757 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2750 = _2599;
                    _2751 = _2601;
                    _2752 = _2603;
                    _2753 = _2605;
                    _2754 = _2607;
                    _2755 = _2609;
                    _2756 = _2757;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2598 = _2599;
            _2600 = _2601;
            _2602 = _2603;
            _2604 = _2605;
            _2606 = _2607;
            _2608 = _2609;
        }
        uvec4 _2612 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2613 = _2612.z;
        uint _2615 = (_2613 >> 8u) & 15u;
        float _2718;
        float _2720;
        float _2722;
        float _2724;
        float _2726;
        float _2728;
        if (((4294967295u << _2615) & _2517) == 0u)
        {
            _2718 = _2598;
            _2720 = _2600;
            _2722 = _2602;
            _2724 = _2604;
            _2726 = _2606;
            _2728 = _2608;
        }
        else
        {
            float _2743 = inversesqrt(dot(vec3(_1575, _1576, _1577), vec3(_1575, _1576, _1577)));
            float _2744 = _2743 * _1575;
            float _2745 = _2743 * _1576;
            float _2746 = _2743 * _1577;
            float frontier_phi_64_65_ladder;
            float frontier_phi_64_65_ladder_1;
            float frontier_phi_64_65_ladder_2;
            float frontier_phi_64_65_ladder_3;
            float frontier_phi_64_65_ladder_4;
            float frontier_phi_64_65_ladder_5;
            if (_2615 < ((_2613 >> 12u) & 15u))
            {
                float _2719;
                float _2721;
                float _2723;
                float _2725;
                float _2727;
                float _2729;
                float _2878 = _2598;
                float _2879 = _2600;
                float _2880 = _2602;
                float _2881 = _2604;
                float _2882 = _2606;
                float _2883 = _2608;
                uint _2884 = _2615;
                uint _2893;
                bool _2894;
                for (;;)
                {
                    _2893 = texelFetch(g_lightClassification, int((((_2511 << 5u) + (_2497 << 9u)) + (_2884 << 2u)) >> 2u)).x;
                    _2894 = _2893 == 0u;
                    float frontier_phi_83_pred;
                    float frontier_phi_83_pred_1;
                    float frontier_phi_83_pred_2;
                    float frontier_phi_83_pred_3;
                    float frontier_phi_83_pred_4;
                    float frontier_phi_83_pred_5;
                    if (_2894)
                    {
                        frontier_phi_83_pred = _2882;
                        frontier_phi_83_pred_1 = _2881;
                        frontier_phi_83_pred_2 = _2880;
                        frontier_phi_83_pred_3 = _2879;
                        frontier_phi_83_pred_4 = _2878;
                        frontier_phi_83_pred_5 = _2883;
                    }
                    else
                    {
                        float _3086;
                        float _3087;
                        float _3088;
                        float _3089;
                        float _3090;
                        float _3091;
                        float _3382;
                        float _3383;
                        float _3384;
                        float _3385;
                        float _3386;
                        float _3387;
                        float _3099 = _2878;
                        float _3100 = _2879;
                        float _3101 = _2880;
                        float _3102 = _2881;
                        float _3103 = _2882;
                        float _3104 = _2883;
                        uint _3105 = _2893;
                        uint _3106;
                        vec4 _3131;
                        float _3132;
                        vec4 _3147;
                        vec3 _3159;
                        vec4 _3175;
                        vec4 _3191;
                        float _3238;
                        bool _3239;
                        for (;;)
                        {
                            uint _3116 = ((_2884 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3105));
                            _3106 = (_3105 + 4294967295u) & _3105;
                            uint _3118 = _3116 * 40u;
                            _3131 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3118)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3118 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3118 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3118 + 3u)).x));
                            _3132 = _3131.w;
                            uint _3134 = (_3116 * 40u) + 4u;
                            _3147 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3134)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3134 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3134 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3134 + 3u)).x));
                            uint _3149 = (_3116 * 40u) + 8u;
                            _3159 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3149)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3149 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3149 + 2u)).x));
                            uint _3162 = (_3116 * 40u) + 16u;
                            _3175 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3162)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3162 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3162 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3162 + 3u)).x));
                            uint _3178 = (_3116 * 40u) + 20u;
                            _3191 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3178)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3178 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3178 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3178 + 3u)).x));
                            uint _3194 = (_3116 * 40u) + 24u;
                            vec4 _3207 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3194)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3194 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3194 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3194 + 3u)).x));
                            uint _3213 = (_3116 * 40u) + 28u;
                            vec4 _3226 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3213)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3213 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3213 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3213 + 3u)).x));
                            _3238 = fma(_1577, _3226.z, fma(_1576, _3226.y, _3226.x * _1575)) + _3226.w;
                            _3239 = !((fma(_1577, _3207.z, fma(_1576, _3207.y, _3207.x * _1575)) + _3207.w) <= 0.0);
                            float frontier_phi_89_pred;
                            float frontier_phi_89_pred_1;
                            float frontier_phi_89_pred_2;
                            float frontier_phi_89_pred_3;
                            float frontier_phi_89_pred_4;
                            float frontier_phi_89_pred_5;
                            if (_3239)
                            {
                                float _3266 = _3131.x - _1575;
                                float _3267 = _3131.y - _1576;
                                float _3268 = _3131.z - _1577;
                                float _3269 = dot(vec3(_3266, _3267, _3268), vec3(_3266, _3267, _3268));
                                float _3272 = inversesqrt(_3269);
                                float _3273 = _3272 * _3266;
                                float _3274 = _3272 * _3267;
                                float _3275 = _3272 * _3268;
                                float _3279 = 1.0 - (_3269 / (_3132 * _3132));
                                float _4402 = isnan(0.0) ? _3279 : (isnan(_3279) ? 0.0 : max(_3279, 0.0));
                                float _3280 = isnan(1.0) ? _4402 : (isnan(_4402) ? 1.0 : min(_4402, 1.0));
                                float _3284 = sqrt(_3269) * _3147.w;
                                float _3286 = 1.39999997615814208984375 / (_3284 + 1.39999997615814208984375);
                                float _3287 = _3286 * _3286;
                                float _3290 = ((1.0 - _3287) * dot(vec3(_3273, _3274, _3275), vec3(_429, _432, _435))) + _3287;
                                float _3293 = _3284 * _3284;
                                float _3297 = (fma(_1577, _3175.z, fma(_1576, _3175.y, _3175.x * _1575)) + _3175.w) / _3238;
                                float _3298 = (fma(_1577, _3191.z, fma(_1576, _3191.y, _3191.x * _1575)) + _3191.w) / _3238;
                                float _3302 = 1.0 - dot(vec2(_3297, _3298), vec2(_3297, _3298));
                                float _4418 = isnan(0.0) ? _3302 : (isnan(_3302) ? 0.0 : max(_3302, 0.0));
                                float _3303 = isnan(1.0) ? _4418 : (isnan(_4418) ? 1.0 : min(_4418, 1.0));
                                float _3304 = _3303 * (((isnan(0.0) ? _3290 : (isnan(_3290) ? 0.0 : max(_3290, 0.0))) * _3280) / ((_3293 * 0.699999988079071044921875) + 1.0));
                                float _3316 = exp2(log2(1.0 / ((_3293 * 3.5) + 5.0)) * 0.25);
                                float _3317 = 1.0 - _505;
                                float _3324 = sqrt(1.0 - ((1.0 - (_3317 * _3317)) * (1.0 - (_3316 * _3316))));
                                float _3325 = _3324 * _3324;
                                float _3326 = _3325 * _3325;
                                float _3327 = _3273 - _2744;
                                float _3328 = _3274 - _2745;
                                float _3329 = _3275 - _2746;
                                float _3333 = inversesqrt(dot(vec3(_3327, _3328, _3329), vec3(_3327, _3328, _3329)));
                                float _3337 = dot(vec3(_429, _432, _435), vec3((-0.0) - _2744, (-0.0) - _2745, (-0.0) - _2746));
                                float _4429 = isnan(0.0) ? _3337 : (isnan(_3337) ? 0.0 : max(_3337, 0.0));
                                float _3340 = isnan(1.0) ? _4429 : (isnan(_4429) ? 1.0 : min(_4429, 1.0));
                                float _3341 = dot(vec3(_429, _432, _435), vec3(_3333 * _3327, _3333 * _3328, _3333 * _3329));
                                float _4440 = isnan(0.0) ? _3341 : (isnan(_3341) ? 0.0 : max(_3341, 0.0));
                                float _3344 = isnan(1.0) ? _4440 : (isnan(_4440) ? 1.0 : min(_4440, 1.0));
                                float _3348 = ((_3344 * _3344) * (_3326 + (-1.0))) + 1.0;
                                float _3349 = _3286 * _3325;
                                float _3350 = _3349 * _3349;
                                float _3356 = ((1.0 - _3350) * dot(vec3(_429, _432, _435), vec3(_3273, _3274, _3275))) + _3350;
                                float _4451 = isnan(0.0) ? _3356 : (isnan(_3356) ? 0.0 : max(_3356, 0.0));
                                float _3357 = isnan(1.0) ? _4451 : (isnan(_4451) ? 1.0 : min(_4451, 1.0));
                                float _3358 = 1.0 - _3325;
                                float _3368 = (0.5 / (((_3357 * ((_3340 * _3358) + _3325)) + 9.9999999392252902907785028219223e-09) + (((_3357 * _3358) + _3325) * _3340))) * _3357;
                                float _4462 = isnan(0.0) ? _3368 : (isnan(_3368) ? 0.0 : max(_3368, 0.0));
                                float _3378 = (_3303 * _3280) * (((_3326 * 3.1415927410125732421875) * (isnan(1.0) ? _4462 : (isnan(_4462) ? 1.0 : min(_4462, 1.0)))) / ((_3348 * _3348) * ((_3293 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_89_pred = _3304 * _3147.y;
                                frontier_phi_89_pred_1 = _3304 * _3147.x;
                                frontier_phi_89_pred_2 = _3378 * _3159.z;
                                frontier_phi_89_pred_3 = _3378 * _3159.y;
                                frontier_phi_89_pred_4 = _3378 * _3159.x;
                                frontier_phi_89_pred_5 = _3304 * _3147.z;
                            }
                            else
                            {
                                frontier_phi_89_pred = 0.0;
                                frontier_phi_89_pred_1 = 0.0;
                                frontier_phi_89_pred_2 = 0.0;
                                frontier_phi_89_pred_3 = 0.0;
                                frontier_phi_89_pred_4 = 0.0;
                                frontier_phi_89_pred_5 = 0.0;
                            }
                            _3386 = frontier_phi_89_pred;
                            _3385 = frontier_phi_89_pred_1;
                            _3384 = frontier_phi_89_pred_2;
                            _3383 = frontier_phi_89_pred_3;
                            _3382 = frontier_phi_89_pred_4;
                            _3387 = frontier_phi_89_pred_5;
                            _3089 = _3385 + _3102;
                            _3090 = _3386 + _3103;
                            _3091 = _3387 + _3104;
                            _3086 = _3382 + _3099;
                            _3087 = _3383 + _3100;
                            _3088 = _3384 + _3101;
                            if (_3106 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3099 = _3086;
                                _3100 = _3087;
                                _3101 = _3088;
                                _3102 = _3089;
                                _3103 = _3090;
                                _3104 = _3091;
                                _3105 = _3106;
                                continue;
                            }
                        }
                        frontier_phi_83_pred = _3090;
                        frontier_phi_83_pred_1 = _3089;
                        frontier_phi_83_pred_2 = _3088;
                        frontier_phi_83_pred_3 = _3087;
                        frontier_phi_83_pred_4 = _3086;
                        frontier_phi_83_pred_5 = _3091;
                    }
                    _2727 = frontier_phi_83_pred;
                    _2725 = frontier_phi_83_pred_1;
                    _2723 = frontier_phi_83_pred_2;
                    _2721 = frontier_phi_83_pred_3;
                    _2719 = frontier_phi_83_pred_4;
                    _2729 = frontier_phi_83_pred_5;
                    uint _2885 = _2884 + 1u;
                    if (_2885 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2878 = _2719;
                        _2879 = _2721;
                        _2880 = _2723;
                        _2881 = _2725;
                        _2882 = _2727;
                        _2883 = _2729;
                        _2884 = _2885;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_64_65_ladder = _2729;
                frontier_phi_64_65_ladder_1 = _2725;
                frontier_phi_64_65_ladder_2 = _2727;
                frontier_phi_64_65_ladder_3 = _2721;
                frontier_phi_64_65_ladder_4 = _2719;
                frontier_phi_64_65_ladder_5 = _2723;
            }
            else
            {
                frontier_phi_64_65_ladder = _2608;
                frontier_phi_64_65_ladder_1 = _2604;
                frontier_phi_64_65_ladder_2 = _2606;
                frontier_phi_64_65_ladder_3 = _2600;
                frontier_phi_64_65_ladder_4 = _2598;
                frontier_phi_64_65_ladder_5 = _2602;
            }
            _2718 = frontier_phi_64_65_ladder_4;
            _2720 = frontier_phi_64_65_ladder_3;
            _2722 = frontier_phi_64_65_ladder_5;
            _2724 = frontier_phi_64_65_ladder_1;
            _2726 = frontier_phi_64_65_ladder_2;
            _2728 = frontier_phi_64_65_ladder;
        }
        float _2733 = isnan(1.0) ? _489 : (isnan(_489) ? 1.0 : min(_489, 1.0));
        _2529 = (_2733 * _2724) + _2042;
        _2531 = (_2733 * _2726) + _2044;
        _2533 = (_2733 * _2728) + _2046;
        _2535 = ((_2718 * _474) * _2733) + _2380;
        _2537 = ((_2720 * _476) * _2733) + _2382;
        _2539 = ((_2722 * _477) * _2733) + _2384;
    }
    else
    {
        _2529 = _2042;
        _2531 = _2044;
        _2533 = _2046;
        _2535 = _2380;
        _2537 = _2382;
        _2539 = _2384;
    }
    float _4478 = isnan(0.0) ? _464 : (isnan(_464) ? 0.0 : max(_464, 0.0));
    float _4489 = isnan(0.0) ? _465 : (isnan(_465) ? 0.0 : max(_465, 0.0));
    float _4500 = isnan(0.0) ? _466 : (isnan(_466) ? 0.0 : max(_466, 0.0));
    float _4511 = isnan(0.0) ? _306 : (isnan(_306) ? 0.0 : max(_306, 0.0));
    float _2557 = ((isnan(1.0) ? _4478 : (isnan(_4478) ? 1.0 : min(_4478, 1.0))) * (_2529 + ((isnan(0.0) ? _1223 : (isnan(_1223) ? 0.0 : max(_1223, 0.0))) * _489))) + ((_2535 + ((isnan(0.0) ? _1521 : (isnan(_1521) ? 0.0 : max(_1521, 0.0))) * _1302)) * cbPerFrame._m0[3u].x);
    float _2558 = ((isnan(1.0) ? _4489 : (isnan(_4489) ? 1.0 : min(_4489, 1.0))) * (_2531 + ((isnan(0.0) ? _1226 : (isnan(_1226) ? 0.0 : max(_1226, 0.0))) * _489))) + ((_2537 + ((isnan(0.0) ? _1524 : (isnan(_1524) ? 0.0 : max(_1524, 0.0))) * _1302)) * cbPerFrame._m0[3u].x);
    float _2559 = ((isnan(1.0) ? _4500 : (isnan(_4500) ? 1.0 : min(_4500, 1.0))) * (_2533 + ((isnan(0.0) ? _1229 : (isnan(_1229) ? 0.0 : max(_1229, 0.0))) * _489))) + ((_2539 + ((isnan(0.0) ? _1527 : (isnan(_1527) ? 0.0 : max(_1527, 0.0))) * _1302)) * cbPerFrame._m0[3u].x);
    float _2564 = cbInstanceData._m0[_448 + 6u].w * (isnan(1.0) ? _4511 : (isnan(_4511) ? 1.0 : min(_4511, 1.0)));
    float _2569 = _407 / cbSceneParam._m0[86u].x;
    float _2570 = _408 / cbSceneParam._m0[86u].y;
    vec4 _2584 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2569, _2570, (log2((isnan(cbSceneParam._m0[77u].w) ? _335 : (isnan(_335) ? cbSceneParam._m0[77u].w : min(_335, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2586 = _2584.x;
    float _2587 = _2584.y;
    float _2588 = _2584.z;
    float _2589 = _2584.w;
    float _2660;
    float _2662;
    float _2664;
    float _2666;
    if (_335 > cbSceneParam._m0[78u].w)
    {
        float _2623 = isnan(_335) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _335 : min(cbSceneParam._m0[80u].w, _335));
        float _2624 = _2623 / _335;
        float _2635 = _2624 * _388;
        float _2636 = _389 * _2624;
        float _2637 = (-0.0) - _2636;
        float _2638 = _2624 * _390;
        float _2640 = (cbSceneParam._m0[77u].w * _2637) / _2623;
        float _2641 = _2640 + cbSceneParam._m0[79u].w;
        float _2642 = cbSceneParam._m0[79u].w - _2636;
        float _2648 = sqrt(((_2635 * _2635) + (_2636 * _2636)) + (_2638 * _2638));
        float _2651 = (1.0 - (cbSceneParam._m0[77u].w / _2623)) * _2648;
        float _2656 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2658 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2835;
        if (abs((_2637 - _2640) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2835 = ((((_2641 > 0.0) ? exp2(_2656 * _2641) : (2.0 - exp2(_2658 * _2641))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2651;
        }
        else
        {
            float _2779 = 1.0 / cbSceneParam._m0[80u].x;
            float _2780 = isnan(_2642) ? _2641 : (isnan(_2641) ? _2642 : max(_2641, _2642));
            float _2781 = isnan(_2642) ? _2641 : (isnan(_2641) ? _2642 : min(_2641, _2642));
            float _2790 = isnan(0.0) ? _2780 : (isnan(_2780) ? 0.0 : min(_2780, 0.0));
            float _2791 = isnan(0.0) ? _2781 : (isnan(_2781) ? 0.0 : min(_2781, 0.0));
            _2835 = ((abs(_2648 / _2637) * cbSceneParam._m0[80u].y) * ((((_2790 - _2791) * 2.0) - ((exp2(_2656 * (isnan(0.0) ? _2780 : (isnan(_2780) ? 0.0 : max(_2780, 0.0)))) - exp2(_2656 * (isnan(0.0) ? _2781 : (isnan(_2781) ? 0.0 : max(_2781, 0.0))))) * _2779)) - ((exp2(_2658 * _2790) - exp2(_2658 * _2791)) * _2779))) + (_2651 * cbSceneParam._m0[80u].z);
        }
        vec4 _2837 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2569, _2570, 1.0), 0.0);
        float _2846 = exp2((_2835 * (-1.44269502162933349609375)) * (1.0 - _2837.w));
        float _2847 = log2(_2846);
        float _2863 = log2(_2589);
        _2660 = (exp2(_2863 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2847 * cbSceneParam._m0[78u].x)) * _2837.x) / cbSceneParam._m0[78u].x)) + _2586;
        _2662 = (exp2(_2863 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2847 * cbSceneParam._m0[78u].y)) * _2837.y) / cbSceneParam._m0[78u].y)) + _2587;
        _2664 = (exp2(_2863 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2847 * cbSceneParam._m0[78u].z)) * _2837.z) / cbSceneParam._m0[78u].z)) + _2588;
        _2666 = _2846 * _2589;
    }
    else
    {
        _2660 = _2586;
        _2662 = _2587;
        _2664 = _2588;
        _2666 = _2589;
    }
    bool _2873;
    vec4 _2676;
    vec4 _2698;
    float _2700;
    float _2704;
    float _2705;
    float _2706;
    float _2707;
    bool _2717;
    for (;;)
    {
        _2676 = cbMatDynParam._m0[0u];
        float _2678 = roundEven(_2676.y);
        bool _2679 = _2678 == 3.0;
        float _2680 = log2(_2666);
        float _2687 = exp2(_2680 * cbSceneParam._m0[78u].x) * _2557;
        float _2688 = exp2(_2680 * cbSceneParam._m0[78u].y) * _2558;
        float _2689 = exp2(_2680 * cbSceneParam._m0[78u].z) * _2559;
        float _2696 = _401 + (-0.5);
        _2698 = cbMtdParam._m0[1u];
        _2700 = _2698.y * _2696;
        float _2703 = (_2678 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2704 = _2703 * (_2679 ? _2687 : (_2687 + (cbSceneParam._m0[72u].w * _2660)));
        _2705 = _2703 * (_2679 ? _2688 : (_2688 + (cbSceneParam._m0[72u].w * _2662)));
        _2706 = _2703 * (_2679 ? _2689 : (_2689 + (cbSceneParam._m0[72u].w * _2664)));
        _2707 = _2696 * 0.999000012874603271484375;
        _2717 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2717)
        {
            if ((cbInstanceData._m0[_448 + 7u].x + _2707) < 0.5)
            {
                _2873 = true;
                break;
            }
        }
        uint _2814 = _450 + uint(_2676.w);
        if ((cbInstanceData._m0[_2814].w < 1.0) && ((cbInstanceData._m0[_2814].w + _2707) < 0.5))
        {
            _2873 = true;
            break;
        }
        if ((_2700 + _240) < _2698.x)
        {
            _2873 = true;
            break;
        }
        _2873 = false;
        break;
    }
    float _3077;
    if (_2873)
    {
        discard_state = true;
        _3077 = 0.0;
    }
    else
    {
        _3077 = _2564;
    }
    SV_Target.x = _2704;
    SV_Target.y = _2705;
    SV_Target.z = _2706;
    SV_Target.w = _3077;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2564;
    discard_exit();
}


