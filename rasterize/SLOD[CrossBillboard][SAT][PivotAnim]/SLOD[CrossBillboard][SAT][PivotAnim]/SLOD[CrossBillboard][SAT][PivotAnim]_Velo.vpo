#version 460

out float gl_ClipDistance[2];
out float gl_CullDistance[1];

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[10];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 12, std140) uniform cbInstanceSlodDataUBO
{
    vec4 _m0[52];
} cbInstanceSlodData;

layout(set = 0, binding = 5, std140) uniform cbObjMatrixUBO
{
    vec4 _m0[6];
} cbObjMatrix;

layout(set = 0, binding = 6, std140) uniform cbPrevObjMatrixUBO
{
    vec4 _m0[6];
} cbPrevObjMatrix;

layout(set = 0, binding = 10, std140) uniform cbInstanceIdxParamUBO
{
    vec4 _m0[1];
} cbInstanceIdxParam;

layout(set = 0, binding = 11, std140) uniform cbTexScrollUBO
{
    vec4 _m0[4];
} cbTexScroll;

layout(set = 0, binding = 26) uniform usamplerBuffer g_forceParam;
layout(set = 0, binding = 25) uniform usamplerBuffer g_InstanceIndexBuffer;

layout(location = 0) in vec3 POSITION;
layout(location = 1) in uvec4 NORMAL;
layout(location = 2) in uvec4 TANGENT;
layout(location = 3) in vec4 COLOR_1;
layout(location = 4) in ivec2 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_1;
layout(location = 1) out vec4 POSITION_1;
layout(location = 2) out vec4 NORMAL_1;
layout(location = 3) out vec4 TANGENT_1;
layout(location = 4) out float TEXCOORD_2;
layout(location = 4, component = 1) out float TEXCOORD_1_1;
layout(location = 5) out vec4 TEXCOORD_3;
layout(location = 6) out vec4 TEXCOORD_8;
layout(location = 7) out vec4 TEXCOORD_9;
layout(location = 8) out vec3 TEXCOORD_10;
layout(location = 4, component = 2) out float TEXCOORD_12;

uint _851;

void main()
{
    uint _98 = uint(gl_InstanceIndex) - uint(gl_BaseInstance);
    gl_Position.x = 0.0;
    gl_Position.y = 0.0;
    gl_Position.z = 0.0;
    gl_Position.w = 0.0;
    POSITION_1.x = 0.0;
    POSITION_1.y = 0.0;
    POSITION_1.z = 0.0;
    POSITION_1.w = 0.0;
    NORMAL_1.x = 0.0;
    NORMAL_1.y = 0.0;
    NORMAL_1.z = 0.0;
    NORMAL_1.w = 0.0;
    TANGENT_1.x = 0.0;
    TANGENT_1.y = 0.0;
    TANGENT_1.z = 0.0;
    TANGENT_1.w = 0.0;
    TEXCOORD_2 = 0.0;
    TEXCOORD_1_1 = 0.0;
    TEXCOORD_3.x = 0.0;
    TEXCOORD_3.y = 0.0;
    TEXCOORD_3.z = 0.0;
    TEXCOORD_3.w = 0.0;
    TEXCOORD_8.x = 0.0;
    TEXCOORD_8.y = 0.0;
    TEXCOORD_8.z = 0.0;
    TEXCOORD_8.w = 0.0;
    TEXCOORD_9.x = 0.0;
    TEXCOORD_9.y = 0.0;
    TEXCOORD_9.z = 0.0;
    TEXCOORD_9.w = 0.0;
    TEXCOORD_10.x = 0.0;
    TEXCOORD_10.y = 0.0;
    TEXCOORD_10.z = 0.0;
    TEXCOORD_12 = 0.0;
    gl_ClipDistance[0u] = 0.0;
    gl_ClipDistance[1u] = 0.0;
    gl_CullDistance[0u] = 0.0;
    float _201 = (float(NORMAL.x) + (-127.0)) * 0.0078740157186985015869140625;
    float _203 = (float(NORMAL.y) + (-127.0)) * 0.0078740157186985015869140625;
    float _204 = (float(NORMAL.z) + (-127.0)) * 0.0078740157186985015869140625;
    float _214 = (float(TANGENT.x) + (-127.0)) * 0.0078740157186985015869140625;
    float _215 = (float(TANGENT.y) + (-127.0)) * 0.0078740157186985015869140625;
    float _216 = (float(TANGENT.z) + (-127.0)) * 0.0078740157186985015869140625;
    uint _218 = _98 * 13u;
    uvec4 _224 = floatBitsToUint(cbInstanceData._m0[_218 + 7u]);
    uint _227 = min(_224.y, 8u);
    precise float _231 = POSITION.x + 0.0;
    precise float _232 = POSITION.y + 0.0;
    precise float _233 = POSITION.z + 0.0;
    uint _238 = floatBitsToUint(cbInstanceIdxParam._m0[0u]).x + _98;
    uvec4 _240 = texelFetch(g_InstanceIndexBuffer, int(_238));
    uint _241 = _240.x;
    uint _243 = _241 * 13u;
    uint _250 = (floatBitsToUint(cbInstanceData._m0[_243 + 4u]).x + uint(float(NORMAL.w))) * 3u;
    uint _257 = _250 + 1u;
    uint _264 = _250 + 2u;
    precise float _271 = _231 * cbObjMatrix._m0[_250].x;
    precise float _272 = _232 * cbObjMatrix._m0[_250].y;
    precise float _273 = _272 + _271;
    precise float _274 = _233 * cbObjMatrix._m0[_250].z;
    precise float _275 = _274 + _273;
    precise float _276 = 1.0 * cbObjMatrix._m0[_250].w;
    precise float _278 = _276 + _275;
    precise float _279 = _231 * cbObjMatrix._m0[_257].x;
    precise float _280 = _232 * cbObjMatrix._m0[_257].y;
    precise float _281 = _280 + _279;
    precise float _282 = _233 * cbObjMatrix._m0[_257].z;
    precise float _283 = _282 + _281;
    precise float _284 = 1.0 * cbObjMatrix._m0[_257].w;
    precise float _285 = _284 + _283;
    precise float _286 = _231 * cbObjMatrix._m0[_264].x;
    precise float _287 = _232 * cbObjMatrix._m0[_264].y;
    precise float _288 = _287 + _286;
    precise float _289 = _233 * cbObjMatrix._m0[_264].z;
    precise float _290 = _289 + _288;
    precise float _291 = 1.0 * cbObjMatrix._m0[_264].w;
    precise float _292 = _291 + _290;
    float _325 = fma(_204, cbObjMatrix._m0[_250].z, fma(_203, cbObjMatrix._m0[_250].y, cbObjMatrix._m0[_250].x * _201));
    float _328 = fma(_204, cbObjMatrix._m0[_257].z, fma(_203, cbObjMatrix._m0[_257].y, cbObjMatrix._m0[_257].x * _201));
    float _331 = fma(_204, cbObjMatrix._m0[_264].z, fma(_203, cbObjMatrix._m0[_264].y, cbObjMatrix._m0[_264].x * _201));
    float _337 = cbSceneParam._m0[3u].x - cbObjMatrix._m0[_250].w;
    float _338 = cbSceneParam._m0[3u].y - cbObjMatrix._m0[_257].w;
    float _339 = cbSceneParam._m0[3u].z - cbObjMatrix._m0[_264].w;
    float _343 = inversesqrt(dot(vec3(_337, _338, _339), vec3(_337, _338, _339)));
    float _344 = _337 * _343;
    float _345 = _338 * _343;
    float _346 = _339 * _343;
    uint _347 = _98 * 26u;
    uint _348 = _347 + 24u;
    uint _356 = _347 + 25u;
    float _363 = dot(vec3(cbObjMatrix._m0[_250].x, cbObjMatrix._m0[_257].x, cbObjMatrix._m0[_264].x), vec3(_344, _345, _346));
    float _369 = dot(vec3(cbObjMatrix._m0[_250].z, cbObjMatrix._m0[_257].z, cbObjMatrix._m0[_264].z), vec3(_344, _345, _346));
    float _375 = (_369 * cbObjMatrix._m0[_250].z) + (_363 * cbObjMatrix._m0[_250].x);
    float _376 = (_369 * cbObjMatrix._m0[_257].z) + (_363 * cbObjMatrix._m0[_257].x);
    float _377 = (_369 * cbObjMatrix._m0[_264].z) + (_363 * cbObjMatrix._m0[_264].x);
    float _381 = inversesqrt(dot(vec3(_375, _376, _377), vec3(_375, _376, _377)));
    float _385 = dot(vec3(_375 * _381, _376 * _381, _377 * _381), vec3(_325, _328, _331));
    bool _389 = abs(_203) > 0.999000012874603271484375;
    bool _391 = !_389;
    float _394;
    if ((_385 <= cbInstanceSlodData._m0[_348].x) && _391)
    {
        _394 = -1.0;
    }
    else
    {
        float _473 = inversesqrt(dot(vec3(cbObjMatrix._m0[_250].y, cbObjMatrix._m0[_257].y, cbObjMatrix._m0[_264].y), vec3(cbObjMatrix._m0[_250].y, cbObjMatrix._m0[_257].y, cbObjMatrix._m0[_264].y)));
        float _480 = abs(dot(vec3(_344, _345, _346), vec3(_473 * cbObjMatrix._m0[_250].y, _473 * cbObjMatrix._m0[_257].y, _473 * cbObjMatrix._m0[_264].y)));
        bool _481 = _480 > 0.707106769084930419921875;
        float _908;
        if (_389 && _481)
        {
            float _770 = cbInstanceSlodData._m0[_348].w - cbInstanceSlodData._m0[_348].z;
            float _776 = ((1.0 / (isnan(9.9999997473787516355514526367188e-05) ? _770 : (isnan(_770) ? 9.9999997473787516355514526367188e-05 : max(_770, 9.9999997473787516355514526367188e-05)))) * (_480 - cbInstanceSlodData._m0[_348].w)) + 1.0;
            float _777 = isnan(0.0) ? _776 : (isnan(_776) ? 0.0 : max(_776, 0.0));
            _908 = isnan(1.0) ? _777 : (isnan(_777) ? 1.0 : min(_777, 1.0));
        }
        else
        {
            float frontier_phi_8_6_ladder;
            if ((_480 <= cbInstanceSlodData._m0[_356].z) && (_481 && _391))
            {
                float _914 = cbInstanceSlodData._m0[_356].y - cbInstanceSlodData._m0[_356].x;
                float _919 = ((1.0 / (isnan(9.9999997473787516355514526367188e-05) ? _914 : (isnan(_914) ? 9.9999997473787516355514526367188e-05 : max(_914, 9.9999997473787516355514526367188e-05)))) * (_480 - cbInstanceSlodData._m0[_356].y)) + 1.0;
                float _920 = isnan(0.0) ? _919 : (isnan(_919) ? 0.0 : max(_919, 0.0));
                float _922 = 1.0 - (isnan(1.0) ? _920 : (isnan(_920) ? 1.0 : min(_920, 1.0)));
                float _923 = cbInstanceSlodData._m0[_348].y - cbInstanceSlodData._m0[_348].x;
                float _928 = ((1.0 / (isnan(9.9999997473787516355514526367188e-05) ? _923 : (isnan(_923) ? 9.9999997473787516355514526367188e-05 : max(_923, 9.9999997473787516355514526367188e-05)))) * (_385 - cbInstanceSlodData._m0[_348].y)) + 1.0;
                float _929 = isnan(0.0) ? _928 : (isnan(_928) ? 0.0 : max(_928, 0.0));
                float _930 = isnan(1.0) ? _929 : (isnan(_929) ? 1.0 : min(_929, 1.0));
                frontier_phi_8_6_ladder = isnan(_922) ? _930 : (isnan(_930) ? _922 : min(_930, _922));
            }
            else
            {
                float frontier_phi_8_6_ladder_10_ladder;
                if (_389 || _481)
                {
                    frontier_phi_8_6_ladder_10_ladder = -1.0;
                }
                else
                {
                    float _957 = cbInstanceSlodData._m0[_348].y - cbInstanceSlodData._m0[_348].x;
                    float _962 = ((1.0 / (isnan(9.9999997473787516355514526367188e-05) ? _957 : (isnan(_957) ? 9.9999997473787516355514526367188e-05 : max(_957, 9.9999997473787516355514526367188e-05)))) * (_385 - cbInstanceSlodData._m0[_348].y)) + 1.0;
                    float _963 = isnan(0.0) ? _962 : (isnan(_962) ? 0.0 : max(_962, 0.0));
                    frontier_phi_8_6_ladder_10_ladder = isnan(1.0) ? _963 : (isnan(_963) ? 1.0 : min(_963, 1.0));
                }
                frontier_phi_8_6_ladder = frontier_phi_8_6_ladder_10_ladder;
            }
            _908 = frontier_phi_8_6_ladder;
        }
        float _911 = isnan(-1.0) ? _908 : (isnan(_908) ? (-1.0) : max(_908, -1.0));
        _394 = (isnan(1.0) ? _911 : (isnan(_911) ? 1.0 : min(_911, 1.0))) + 0.0625;
    }
    precise float _414 = TEXCOORD_1.x * cbMtdParam._m0[9u].z;
    uint _422 = _218 + 1u;
    uint _429 = _218 + 2u;
    precise float _436 = TEXCOORD_1.x * cbInstanceData._m0[_218].x;
    precise float _437 = TEXCOORD_1.y * cbInstanceData._m0[_218].y;
    precise float _438 = _437 + _436;
    precise float _439 = TEXCOORD_1.z * cbInstanceData._m0[_218].z;
    precise float _440 = _439 + _438;
    precise float _441 = 1.0 * cbInstanceData._m0[_218].w;
    precise float _442 = _441 + _440;
    precise float _443 = TEXCOORD_1.x * cbInstanceData._m0[_422].x;
    precise float _444 = TEXCOORD_1.y * cbInstanceData._m0[_422].y;
    precise float _445 = _444 + _443;
    precise float _446 = TEXCOORD_1.z * cbInstanceData._m0[_422].z;
    precise float _447 = _446 + _445;
    precise float _448 = 1.0 * cbInstanceData._m0[_422].w;
    precise float _449 = _448 + _447;
    precise float _450 = TEXCOORD_1.x * cbInstanceData._m0[_429].x;
    precise float _451 = TEXCOORD_1.y * cbInstanceData._m0[_429].y;
    precise float _452 = _451 + _450;
    precise float _453 = TEXCOORD_1.z * cbInstanceData._m0[_429].z;
    precise float _454 = _453 + _452;
    precise float _455 = 1.0 * cbInstanceData._m0[_429].w;
    precise float _456 = _455 + _454;
    precise float _457 = _278 - _442;
    precise float _458 = _285 - _449;
    precise float _459 = _292 - _456;
    precise float _460 = _457 * _457;
    precise float _461 = _458 * _458;
    precise float _462 = _460 + _461;
    precise float _463 = _459 * _459;
    precise float _464 = _462 + _463;
    precise float _466 = cbMtdParam._m0[9u].x * sqrt(_464);
    precise float _467 = _414 + _466;
    precise float _468 = cbPerFrame._m0[22u].x + _467;
    uint _469 = _224.w;
    float _484;
    float _486;
    float _488;
    if (_227 == 0u)
    {
        _484 = 0.0;
        _486 = 0.0;
        _488 = 0.0;
    }
    else
    {
        uint _769 = _224.z;
        precise float _485;
        precise float _487;
        precise float _489;
        float _948;
        float _950;
        float _952;
        float _782 = 0.0;
        float _783 = 0.0;
        float _784 = 0.0;
        uint _785 = _769;
        uint _787 = 0u;
        float _823;
        float _842;
        vec4 _856;
        float _857;
        float _858;
        float _872;
        float _873;
        float _874;
        float _891;
        float _892;
        float _893;
        float _894;
        bool _895;
        bool _896;
        bool _897;
        precise float _898;
        precise float _899;
        precise float _900;
        float _901;
        float _902;
        float _903;
        precise float _904;
        bool _907;
        for (;;)
        {
            uint _789 = _785 & 255u;
            uint _791 = _789 * 24u;
            uvec3 _801 = uvec3(texelFetch(g_forceParam, int(_791)).x, texelFetch(g_forceParam, int(_791 + 1u)).x, texelFetch(g_forceParam, int(_791 + 2u)).x);
            uint _806 = (_789 * 24u) + 4u;
            vec4 _819 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_806)).x, texelFetch(g_forceParam, int(_806 + 1u)).x, texelFetch(g_forceParam, int(_806 + 2u)).x, texelFetch(g_forceParam, int(_806 + 3u)).x));
            _823 = _819.w;
            uint _825 = (_789 * 24u) + 8u;
            vec4 _838 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_825)).x, texelFetch(g_forceParam, int(_825 + 1u)).x, texelFetch(g_forceParam, int(_825 + 2u)).x, texelFetch(g_forceParam, int(_825 + 3u)).x));
            _842 = _838.w;
            uint _845 = (_789 * 24u) + 12u;
            _856 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_845)).x, texelFetch(g_forceParam, int(_845 + 1u)).x, _851, texelFetch(g_forceParam, int(_845 + 3u)).x));
            _857 = _856.x;
            _858 = _856.w;
            uint _861 = (_789 * 24u) + 16u;
            vec3 _871 = uintBitsToFloat(uvec3(texelFetch(g_forceParam, int(_861)).x, texelFetch(g_forceParam, int(_861 + 1u)).x, texelFetch(g_forceParam, int(_861 + 2u)).x));
            _872 = _871.x;
            _873 = _871.y;
            _874 = _871.z;
            uint _877 = (_789 * 24u) + 20u;
            vec4 _890 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_877)).x, texelFetch(g_forceParam, int(_877 + 1u)).x, texelFetch(g_forceParam, int(_877 + 2u)).x, texelFetch(g_forceParam, int(_877 + 3u)).x));
            _891 = _890.x;
            _892 = _890.y;
            _893 = _890.z;
            _894 = _890.w;
            _895 = _801.x == 1u;
            _896 = _801.y == 1u;
            _897 = _801.z == 1u;
            _898 = _442 - _819.x;
            _899 = _449 - _819.y;
            _900 = _456 - _819.z;
            _901 = _895 ? _838.x : _898;
            _902 = _895 ? _838.y : _899;
            _903 = _895 ? _838.z : _900;
            _904 = dot(vec3(_901, _902, _903), vec3(_901, _902, _903));
            _907 = _904 > 0.0;
            float frontier_phi_12_pred;
            float frontier_phi_12_pred_1;
            float frontier_phi_12_pred_2;
            if (_907)
            {
                precise float _933 = _898 * _898;
                precise float _934 = _899 * _899;
                precise float _935 = _933 + _934;
                precise float _936 = _900 * _900;
                precise float _937 = _936 + _935;
                float _938 = sqrt(_937);
                float _939 = inversesqrt(_904);
                precise float _940 = _901 * _939;
                precise float _941 = _902 * _939;
                precise float _942 = _903 * _939;
                precise float _945 = _938 / (isnan(0.001000000047497451305389404296875) ? _856.y : (isnan(_856.y) ? 0.001000000047497451305389404296875 : max(_856.y, 0.001000000047497451305389404296875)));
                precise float _946 = 1.0 - _945;
                float _1204 = isnan(0.0) ? _946 : (isnan(_946) ? 0.0 : max(_946, 0.0));
                float _947 = isnan(1.0) ? _1204 : (isnan(_1204) ? 1.0 : min(_1204, 1.0));
                float _980;
                if (_897)
                {
                    float _967 = inversesqrt(dot(vec3(_898, _899, _900), vec3(_898, _899, _900)));
                    precise float _968 = _898 * _967;
                    precise float _969 = _899 * _967;
                    precise float _970 = _900 * _967;
                    precise float _974 = dot(vec3(_940, _941, _942), vec3(_968, _969, _970)) * 0.800000011920928955078125;
                    precise float _976 = _974 + 0.20000000298023223876953125;
                    float _1215 = isnan(0.0) ? _976 : (isnan(_976) ? 0.0 : max(_976, 0.0));
                    precise float _979 = _947 * (isnan(1.0) ? _1215 : (isnan(_1215) ? 1.0 : min(_1215, 1.0)));
                    _980 = _979;
                }
                else
                {
                    _980 = _947;
                }
                float frontier_phi_12_pred_15_ladder;
                float frontier_phi_12_pred_15_ladder_1;
                float frontier_phi_12_pred_15_ladder_2;
                if (_980 > 0.0)
                {
                    bool _983 = _895 && (!_897);
                    precise float _985 = _938 * (-4.0);
                    precise float _989 = 6.283184051513671875 / (isnan(0.001000000047497451305389404296875) ? _857 : (isnan(_857) ? 0.001000000047497451305389404296875 : max(_857, 0.001000000047497451305389404296875)));
                    precise float _991 = dot(vec2(_940, _942), vec2(_898, _900));
                    precise float _995 = _989 * _991;
                    precise float _996 = float(_983) * _995;
                    precise float _997 = _468 * _989;
                    precise float _998 = _997 - _996;
                    precise float _999 = (_983 ? 0.0 : _985) + _998;
                    precise float _1001 = _842 * sin(_999);
                    precise float _1002 = _941 * 0.0;
                    precise float _1003 = _1002 - _942;
                    precise float _1004 = _942 * 0.0;
                    precise float _1005 = _940 * 0.0;
                    precise float _1006 = _1004 - _1005;
                    precise float _1007 = _940 - _1002;
                    precise float _1008 = _858 * _1001;
                    float _1009 = _895 ? _1008 : 0.0;
                    float _1052;
                    if (_896)
                    {
                        precise float _1012 = _872 * 2.0;
                        precise float _1014 = _892 + _893;
                        precise float _1015 = _894 + _1014;
                        precise float _1017 = 6.283184051513671875 / (isnan(0.001000000047497451305389404296875) ? _872 : (isnan(_872) ? 0.001000000047497451305389404296875 : max(_872, 0.001000000047497451305389404296875)));
                        precise float _1018 = _891 * _1017;
                        precise float _1019 = (-0.0) - _940;
                        precise float _1024 = dot(vec2(_942, _1019), vec2(_898, _900)) / _1012;
                        precise float _1025 = (-0.0) - _1024;
                        float _1028 = fract(abs(_1024));
                        precise float _1029 = (-0.0) - _1028;
                        precise float _1031 = _1012 * ((_1024 >= _1025) ? _1028 : _1029);
                        precise float _1032 = _1031 * 6.283184051513671875;
                        precise float _1033 = _1032 / _1012;
                        precise float _1035 = (isnan(5.0) ? _872 : (isnan(_872) ? 5.0 : min(_872, 5.0))) * sin(_1033);
                        precise float _1036 = _991 + _1035;
                        precise float _1037 = _872 * 0.25;
                        precise float _1039 = _468 * _891;
                        precise float _1040 = _1039 - _1037;
                        precise float _1041 = _1040 - _1036;
                        precise float _1042 = _891 * _1015;
                        precise float _1044 = _1041 / (isnan(0.001000000047497451305389404296875) ? _1042 : (isnan(_1042) ? 0.001000000047497451305389404296875 : max(_1042, 0.001000000047497451305389404296875)));
                        float _1045 = fract(_1044);
                        precise float _1047 = 1.0 - _1045;
                        float _1048 = (_1044 < 0.0) ? _1047 : _1045;
                        precise float _1049 = _1014 / _1015;
                        precise float _1050 = _892 / _1015;
                        float _1071;
                        if (_1048 < _1050)
                        {
                            precise float _1069 = _1048 / _1050;
                            _1071 = _1069;
                        }
                        else
                        {
                            float frontier_phi_22_21_ladder;
                            if (_1048 < _1049)
                            {
                                precise float _1081 = _1048 - _1050;
                                precise float _1082 = _1049 - _1050;
                                precise float _1083 = _1081 / _1082;
                                precise float _1072 = 1.0 - _1083;
                                frontier_phi_22_21_ladder = _1072;
                            }
                            else
                            {
                                frontier_phi_22_21_ladder = 0.0;
                            }
                            _1071 = frontier_phi_22_21_ladder;
                        }
                        precise float _1073 = _874 * _1071;
                        precise float _1074 = _1017 * _991;
                        precise float _1075 = _468 * _1018;
                        precise float _1076 = _1075 - _1074;
                        precise float _1078 = _873 + sin(_1076);
                        precise float _1080 = _1073 * abs(_1078);
                        precise float _1053 = _1080 + 0.0;
                        _1052 = _1053;
                    }
                    else
                    {
                        _1052 = 0.0;
                    }
                    precise float _1054 = _823 + _1001;
                    precise float _1055 = _1054 + _1052;
                    precise float _1056 = _940 * _1055;
                    precise float _1057 = _941 * _1055;
                    precise float _1058 = _942 * _1055;
                    precise float _1059 = _1003 * _1009;
                    precise float _1060 = _1006 * _1009;
                    precise float _1061 = _1007 * _1009;
                    precise float _1062 = _1059 + _1056;
                    precise float _1063 = _1060 + _1057;
                    precise float _1064 = _1061 + _1058;
                    precise float _1065 = _980 * _1062;
                    precise float _1066 = _980 * _1063;
                    precise float _1067 = _980 * _1064;
                    precise float _949 = _1065 * 0.0500000007450580596923828125;
                    precise float _951 = _1066 * 0.0500000007450580596923828125;
                    precise float _953 = _1067 * 0.0500000007450580596923828125;
                    frontier_phi_12_pred_15_ladder = _949;
                    frontier_phi_12_pred_15_ladder_1 = _951;
                    frontier_phi_12_pred_15_ladder_2 = _953;
                }
                else
                {
                    frontier_phi_12_pred_15_ladder = 0.0;
                    frontier_phi_12_pred_15_ladder_1 = 0.0;
                    frontier_phi_12_pred_15_ladder_2 = 0.0;
                }
                frontier_phi_12_pred = frontier_phi_12_pred_15_ladder;
                frontier_phi_12_pred_1 = frontier_phi_12_pred_15_ladder_1;
                frontier_phi_12_pred_2 = frontier_phi_12_pred_15_ladder_2;
            }
            else
            {
                frontier_phi_12_pred = 0.0;
                frontier_phi_12_pred_1 = 0.0;
                frontier_phi_12_pred_2 = 0.0;
            }
            _948 = frontier_phi_12_pred;
            _950 = frontier_phi_12_pred_1;
            _952 = frontier_phi_12_pred_2;
            _485 = _782 + _948;
            _487 = _783 + _950;
            _489 = _784 + _952;
            uint _788 = _787 + 1u;
            if (_788 == _227)
            {
                break;
            }
            else
            {
                _782 = _485;
                _783 = _487;
                _784 = _489;
                _785 = (_787 != 3u) ? (_785 >> 8u) : _469;
                _787 = _788;
                continue;
            }
        }
        _484 = _485;
        _486 = _487;
        _488 = _489;
    }
    precise float _490 = _484 * _484;
    precise float _491 = _486 * _486;
    precise float _492 = _490 + _491;
    precise float _493 = _488 * _488;
    precise float _494 = _492 + _493;
    float _495 = sqrt(_494);
    bool _496 = _495 < 0.00011000000085914507508277893066406;
    float _501 = inversesqrt(dot(vec3(cbInstanceData._m0[_218].x, cbInstanceData._m0[_422].x, cbInstanceData._m0[_429].x), vec3(cbInstanceData._m0[_218].x, cbInstanceData._m0[_422].x, cbInstanceData._m0[_429].x)));
    precise float _502 = cbInstanceData._m0[_218].x * _501;
    precise float _503 = cbInstanceData._m0[_422].x * _501;
    precise float _504 = cbInstanceData._m0[_429].x * _501;
    float _508 = inversesqrt(dot(vec3(cbInstanceData._m0[_218].y, cbInstanceData._m0[_422].y, cbInstanceData._m0[_429].y), vec3(cbInstanceData._m0[_218].y, cbInstanceData._m0[_422].y, cbInstanceData._m0[_429].y)));
    precise float _509 = cbInstanceData._m0[_218].y * _508;
    precise float _510 = cbInstanceData._m0[_422].y * _508;
    precise float _511 = cbInstanceData._m0[_429].y * _508;
    float _515 = inversesqrt(dot(vec3(cbInstanceData._m0[_218].z, cbInstanceData._m0[_422].z, cbInstanceData._m0[_429].z), vec3(cbInstanceData._m0[_218].z, cbInstanceData._m0[_422].z, cbInstanceData._m0[_429].z)));
    precise float _516 = cbInstanceData._m0[_218].z * _515;
    precise float _517 = cbInstanceData._m0[_422].z * _515;
    precise float _518 = cbInstanceData._m0[_429].z * _515;
    precise float _519 = _502 * 0.0;
    precise float _520 = 1.0 * _509;
    precise float _521 = _520 + _519;
    precise float _522 = 0.0 * _516;
    precise float _523 = _522 + _521;
    precise float _524 = _503 * 0.0;
    precise float _525 = 1.0 * _510;
    precise float _526 = _525 + _524;
    precise float _527 = 0.0 * _517;
    precise float _528 = _527 + _526;
    precise float _529 = _504 * 0.0;
    precise float _530 = 1.0 * _511;
    precise float _531 = _530 + _529;
    precise float _532 = 0.0 * _518;
    precise float _533 = _532 + _531;
    float _537 = inversesqrt(dot(vec3(_484, _486, _488), vec3(_484, _486, _488)));
    precise float _538 = _484 * _537;
    precise float _539 = _486 * _537;
    precise float _540 = _488 * _537;
    precise float _541 = _528 * _540;
    precise float _542 = _533 * _539;
    precise float _543 = _541 - _542;
    precise float _544 = _533 * _538;
    precise float _545 = _523 * _540;
    precise float _546 = _544 - _545;
    precise float _547 = _523 * _539;
    precise float _548 = _528 * _538;
    precise float _549 = _547 - _548;
    float _553 = inversesqrt(dot(vec3(_543, _546, _549), vec3(_543, _546, _549)));
    precise float _554 = _553 * _543;
    precise float _555 = _553 * _546;
    precise float _556 = _553 * _549;
    precise float _557 = _495 + 1.0;
    precise float _559 = cbMtdParam._m0[9u].y * log2(_557);
    precise float _560 = dot(vec3(_554, _555, _556), vec3(_457, _458, _459));
    precise float _563 = _554 * _560;
    precise float _564 = _555 * _560;
    precise float _565 = _556 * _560;
    precise float _566 = _442 + _563;
    precise float _567 = _449 + _564;
    precise float _568 = _456 + _565;
    precise float _569 = _278 - _566;
    precise float _570 = _285 - _567;
    precise float _571 = _292 - _568;
    precise float _572 = _555 * _571;
    precise float _573 = _556 * _570;
    precise float _574 = _572 - _573;
    precise float _575 = _556 * _569;
    precise float _576 = _554 * _571;
    precise float _577 = _575 - _576;
    precise float _578 = _554 * _570;
    precise float _579 = _555 * _569;
    precise float _580 = _578 - _579;
    float _581 = sin(_559);
    float _582 = cos(_559);
    precise float _583 = _569 * _582;
    precise float _584 = _570 * _582;
    precise float _585 = _571 * _582;
    precise float _586 = _581 * _574;
    precise float _587 = _581 * _577;
    precise float _588 = _581 * _580;
    precise float _589 = _583 + _586;
    precise float _590 = _584 + _587;
    precise float _591 = _588 + _585;
    precise float _592 = _566 + _589;
    precise float _593 = _567 + _590;
    precise float _594 = _568 + _591;
    precise float _595 = _592 - _278;
    precise float _596 = _593 - _285;
    precise float _597 = _594 - _292;
    float _598 = _496 ? 0.0 : _595;
    float _599 = _496 ? 0.0 : _596;
    float _600 = _496 ? 0.0 : _597;
    precise float _601 = _278 + _598;
    precise float _602 = _285 + _599;
    precise float _603 = _292 + _600;
    float _611 = ((fma(_233, cbPrevObjMatrix._m0[_250].z, fma(_232, cbPrevObjMatrix._m0[_250].y, cbPrevObjMatrix._m0[_250].x * _231)) + cbPrevObjMatrix._m0[_250].w) - cbSceneParam._m0[28u].x) + _598;
    float _613 = ((fma(_233, cbPrevObjMatrix._m0[_257].z, fma(_232, cbPrevObjMatrix._m0[_257].y, cbPrevObjMatrix._m0[_257].x * _231)) + cbPrevObjMatrix._m0[_257].w) - cbSceneParam._m0[28u].y) + _599;
    float _615 = ((fma(_233, cbPrevObjMatrix._m0[_264].z, fma(_232, cbPrevObjMatrix._m0[_264].y, cbPrevObjMatrix._m0[_264].x * _231)) + cbPrevObjMatrix._m0[_264].w) - cbSceneParam._m0[28u].z) + _600;
    precise float _660 = _601 - cbSceneParam._m0[3u].x;
    precise float _661 = _602 - cbSceneParam._m0[3u].y;
    precise float _662 = _603 - cbSceneParam._m0[3u].z;
    precise float _688 = _660 * cbSceneParam._m0[24u].x;
    precise float _689 = _661 * cbSceneParam._m0[24u].y;
    precise float _690 = _689 + _688;
    precise float _691 = _662 * cbSceneParam._m0[24u].z;
    precise float _692 = _691 + _690;
    precise float _693 = 1.0 * cbSceneParam._m0[24u].w;
    precise float _694 = _693 + _692;
    precise float _695 = _660 * cbSceneParam._m0[25u].x;
    precise float _696 = _661 * cbSceneParam._m0[25u].y;
    precise float _697 = _696 + _695;
    precise float _698 = _662 * cbSceneParam._m0[25u].z;
    precise float _699 = _698 + _697;
    precise float _700 = 1.0 * cbSceneParam._m0[25u].w;
    precise float _701 = _700 + _699;
    precise float _702 = _660 * cbSceneParam._m0[26u].x;
    precise float _703 = _661 * cbSceneParam._m0[26u].y;
    precise float _704 = _703 + _702;
    precise float _705 = _662 * cbSceneParam._m0[26u].z;
    precise float _706 = _705 + _704;
    precise float _707 = 1.0 * cbSceneParam._m0[26u].w;
    precise float _708 = _707 + _706;
    precise float _709 = _660 * cbSceneParam._m0[27u].x;
    precise float _710 = _661 * cbSceneParam._m0[27u].y;
    precise float _711 = _710 + _709;
    precise float _712 = _662 * cbSceneParam._m0[27u].z;
    precise float _713 = _712 + _711;
    precise float _714 = 1.0 * cbSceneParam._m0[27u].w;
    precise float _715 = _714 + _713;
    gl_Position.x = _694;
    gl_Position.y = _701;
    gl_Position.z = _708;
    gl_Position.w = _715;
    POSITION_1.x = _694;
    POSITION_1.y = _701;
    POSITION_1.z = _708;
    POSITION_1.w = _715;
    NORMAL_1.x = _325;
    NORMAL_1.y = _328;
    NORMAL_1.z = _331;
    NORMAL_1.w = float(_241);
    TANGENT_1.x = fma(_216, cbObjMatrix._m0[_250].z, fma(_215, cbObjMatrix._m0[_250].y, cbObjMatrix._m0[_250].x * _214));
    TANGENT_1.y = fma(_216, cbObjMatrix._m0[_257].z, fma(_215, cbObjMatrix._m0[_257].y, cbObjMatrix._m0[_257].x * _214));
    TANGENT_1.z = fma(_216, cbObjMatrix._m0[_264].z, fma(_215, cbObjMatrix._m0[_264].y, cbObjMatrix._m0[_264].x * _214));
    TANGENT_1.w = (float(TANGENT.w) + (-127.0)) * 0.0078740157186985015869140625;
    TEXCOORD_2 = ((float(int(uint(TEXCOORD.x))) * 0.00048828125) * cbTexScroll._m0[0u].x) + cbTexScroll._m0[0u].z;
    TEXCOORD_1_1 = ((float(int(uint(TEXCOORD.y))) * 0.00048828125) * cbTexScroll._m0[0u].y) + cbTexScroll._m0[0u].w;
    TEXCOORD_3.x = TEXCOORD_1.x;
    TEXCOORD_3.y = TEXCOORD_1.y;
    TEXCOORD_3.z = TEXCOORD_1.z;
    TEXCOORD_3.w = COLOR_1.x;
    TEXCOORD_8.x = _694;
    TEXCOORD_8.y = _701;
    TEXCOORD_8.z = _708;
    TEXCOORD_8.w = _715;
    TEXCOORD_9.x = fma(_615, cbSceneParam._m0[29u].z, fma(_613, cbSceneParam._m0[29u].y, _611 * cbSceneParam._m0[29u].x)) + cbSceneParam._m0[29u].w;
    TEXCOORD_9.y = fma(_615, cbSceneParam._m0[30u].z, fma(_613, cbSceneParam._m0[30u].y, _611 * cbSceneParam._m0[30u].x)) + cbSceneParam._m0[30u].w;
    TEXCOORD_9.z = fma(_615, cbSceneParam._m0[31u].z, fma(_613, cbSceneParam._m0[31u].y, _611 * cbSceneParam._m0[31u].x)) + cbSceneParam._m0[31u].w;
    TEXCOORD_9.w = fma(_615, cbSceneParam._m0[32u].z, fma(_613, cbSceneParam._m0[32u].y, cbSceneParam._m0[32u].x * _611)) + cbSceneParam._m0[32u].w;
    TEXCOORD_10.x = _325;
    TEXCOORD_10.y = _328;
    TEXCOORD_10.z = _331;
    TEXCOORD_12 = _394;
    gl_ClipDistance[0u] = dot(vec4(_694, _701, _708, _715), vec4(cbSceneParam._m0[4u]));
    gl_ClipDistance[1u] = dot(vec4(_694, _701, _708, _715), vec4(cbInstanceData._m0[_243 + 3u]));
    gl_CullDistance[0u] = (_394 < 0.0) ? (-1.0) : 0.0;
}


