#version 460

out float gl_CullDistance[1];

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[10];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 12, std140) uniform cbInstanceSlodDataUBO
{
    vec4 _m0[52];
} cbInstanceSlodData;

layout(set = 0, binding = 5, std140) uniform cbObjMatrixUBO
{
    vec4 _m0[6];
} cbObjMatrix;

layout(set = 0, binding = 10, std140) uniform cbInstanceIdxParamUBO
{
    vec4 _m0[1];
} cbInstanceIdxParam;

layout(set = 0, binding = 11, std140) uniform cbTexScrollUBO
{
    vec4 _m0[4];
} cbTexScroll;

layout(set = 0, binding = 26) uniform usamplerBuffer g_forceParam;
layout(set = 0, binding = 25) uniform usamplerBuffer g_InstanceIndexBuffer;

layout(location = 0) in vec3 POSITION;
layout(location = 1) in uvec4 NORMAL;
layout(location = 2) in uvec4 TANGENT;
layout(location = 3) in vec4 COLOR_1;
layout(location = 4) in ivec2 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_1;
layout(location = 1) out vec4 POSITION_1;
layout(location = 2) out vec4 NORMAL_1;
layout(location = 3) out vec4 TANGENT_1;
layout(location = 4) out float TEXCOORD_2;
layout(location = 4, component = 1) out float TEXCOORD_1_1;
layout(location = 5) out vec4 TEXCOORD_3;
layout(location = 4, component = 2) out float TEXCOORD_12;

uint _709;

void main()
{
    uint _86 = uint(gl_InstanceIndex) - uint(gl_BaseInstance);
    gl_Position.x = 0.0;
    gl_Position.y = 0.0;
    gl_Position.z = 0.0;
    gl_Position.w = 0.0;
    POSITION_1.x = 0.0;
    POSITION_1.y = 0.0;
    POSITION_1.z = 0.0;
    POSITION_1.w = 0.0;
    NORMAL_1.x = 0.0;
    NORMAL_1.y = 0.0;
    NORMAL_1.z = 0.0;
    NORMAL_1.w = 0.0;
    TANGENT_1.x = 0.0;
    TANGENT_1.y = 0.0;
    TANGENT_1.z = 0.0;
    TANGENT_1.w = 0.0;
    TEXCOORD_2 = 0.0;
    TEXCOORD_1_1 = 0.0;
    TEXCOORD_3.x = 0.0;
    TEXCOORD_3.y = 0.0;
    TEXCOORD_3.z = 0.0;
    TEXCOORD_3.w = 0.0;
    TEXCOORD_12 = 0.0;
    gl_CullDistance[0u] = 0.0;
    float _177 = (float(NORMAL.x) + (-127.0)) * 0.0078740157186985015869140625;
    float _179 = (float(NORMAL.y) + (-127.0)) * 0.0078740157186985015869140625;
    float _180 = (float(NORMAL.z) + (-127.0)) * 0.0078740157186985015869140625;
    float _190 = (float(TANGENT.x) + (-127.0)) * 0.0078740157186985015869140625;
    float _191 = (float(TANGENT.y) + (-127.0)) * 0.0078740157186985015869140625;
    float _192 = (float(TANGENT.z) + (-127.0)) * 0.0078740157186985015869140625;
    uint _194 = _86 * 13u;
    uvec4 _200 = floatBitsToUint(cbInstanceData._m0[_194 + 7u]);
    uint _203 = min(_200.y, 8u);
    precise float _207 = POSITION.x + 0.0;
    precise float _208 = POSITION.y + 0.0;
    precise float _209 = POSITION.z + 0.0;
    uint _214 = floatBitsToUint(cbInstanceIdxParam._m0[0u]).x + _86;
    uvec4 _216 = texelFetch(g_InstanceIndexBuffer, int(_214));
    uint _217 = _216.x;
    uint _226 = (floatBitsToUint(cbInstanceData._m0[(_217 * 13u) + 4u]).x + uint(float(NORMAL.w))) * 3u;
    uint _233 = _226 + 1u;
    uint _240 = _226 + 2u;
    precise float _247 = _207 * cbObjMatrix._m0[_226].x;
    precise float _248 = _208 * cbObjMatrix._m0[_226].y;
    precise float _249 = _248 + _247;
    precise float _250 = _209 * cbObjMatrix._m0[_226].z;
    precise float _251 = _250 + _249;
    precise float _252 = 1.0 * cbObjMatrix._m0[_226].w;
    precise float _254 = _252 + _251;
    precise float _255 = _207 * cbObjMatrix._m0[_233].x;
    precise float _256 = _208 * cbObjMatrix._m0[_233].y;
    precise float _257 = _256 + _255;
    precise float _258 = _209 * cbObjMatrix._m0[_233].z;
    precise float _259 = _258 + _257;
    precise float _260 = 1.0 * cbObjMatrix._m0[_233].w;
    precise float _261 = _260 + _259;
    precise float _262 = _207 * cbObjMatrix._m0[_240].x;
    precise float _263 = _208 * cbObjMatrix._m0[_240].y;
    precise float _264 = _263 + _262;
    precise float _265 = _209 * cbObjMatrix._m0[_240].z;
    precise float _266 = _265 + _264;
    precise float _267 = 1.0 * cbObjMatrix._m0[_240].w;
    precise float _268 = _267 + _266;
    float _271 = fma(_180, cbObjMatrix._m0[_226].z, fma(_179, cbObjMatrix._m0[_226].y, cbObjMatrix._m0[_226].x * _177));
    float _274 = fma(_180, cbObjMatrix._m0[_233].z, fma(_179, cbObjMatrix._m0[_233].y, cbObjMatrix._m0[_233].x * _177));
    float _277 = fma(_180, cbObjMatrix._m0[_240].z, fma(_179, cbObjMatrix._m0[_240].y, cbObjMatrix._m0[_240].x * _177));
    float _283 = cbSceneParam._m0[3u].x - cbObjMatrix._m0[_226].w;
    float _284 = cbSceneParam._m0[3u].y - cbObjMatrix._m0[_233].w;
    float _285 = cbSceneParam._m0[3u].z - cbObjMatrix._m0[_240].w;
    float _289 = inversesqrt(dot(vec3(_283, _284, _285), vec3(_283, _284, _285)));
    float _290 = _283 * _289;
    float _291 = _284 * _289;
    float _292 = _285 * _289;
    uint _293 = _86 * 26u;
    uint _294 = _293 + 24u;
    uint _302 = _293 + 25u;
    float _309 = dot(vec3(cbObjMatrix._m0[_226].x, cbObjMatrix._m0[_233].x, cbObjMatrix._m0[_240].x), vec3(_290, _291, _292));
    float _315 = dot(vec3(cbObjMatrix._m0[_226].z, cbObjMatrix._m0[_233].z, cbObjMatrix._m0[_240].z), vec3(_290, _291, _292));
    float _321 = (_315 * cbObjMatrix._m0[_226].z) + (_309 * cbObjMatrix._m0[_226].x);
    float _322 = (_315 * cbObjMatrix._m0[_233].z) + (_309 * cbObjMatrix._m0[_233].x);
    float _323 = (_315 * cbObjMatrix._m0[_240].z) + (_309 * cbObjMatrix._m0[_240].x);
    float _327 = inversesqrt(dot(vec3(_321, _322, _323), vec3(_321, _322, _323)));
    float _331 = dot(vec3(_321 * _327, _322 * _327, _323 * _327), vec3(_271, _274, _277));
    bool _335 = abs(_179) > 0.999000012874603271484375;
    bool _337 = !_335;
    float _340;
    if ((_331 <= cbInstanceSlodData._m0[_294].x) && _337)
    {
        _340 = -1.0;
    }
    else
    {
        float _419 = inversesqrt(dot(vec3(cbObjMatrix._m0[_226].y, cbObjMatrix._m0[_233].y, cbObjMatrix._m0[_240].y), vec3(cbObjMatrix._m0[_226].y, cbObjMatrix._m0[_233].y, cbObjMatrix._m0[_240].y)));
        float _426 = abs(dot(vec3(_290, _291, _292), vec3(_419 * cbObjMatrix._m0[_226].y, _419 * cbObjMatrix._m0[_233].y, _419 * cbObjMatrix._m0[_240].y)));
        bool _427 = _426 > 0.707106769084930419921875;
        float _766;
        if (_335 && _427)
        {
            float _628 = cbInstanceSlodData._m0[_294].w - cbInstanceSlodData._m0[_294].z;
            float _634 = ((1.0 / (isnan(9.9999997473787516355514526367188e-05) ? _628 : (isnan(_628) ? 9.9999997473787516355514526367188e-05 : max(_628, 9.9999997473787516355514526367188e-05)))) * (_426 - cbInstanceSlodData._m0[_294].w)) + 1.0;
            float _635 = isnan(0.0) ? _634 : (isnan(_634) ? 0.0 : max(_634, 0.0));
            _766 = isnan(1.0) ? _635 : (isnan(_635) ? 1.0 : min(_635, 1.0));
        }
        else
        {
            float frontier_phi_8_6_ladder;
            if ((_426 <= cbInstanceSlodData._m0[_302].z) && (_427 && _337))
            {
                float _772 = cbInstanceSlodData._m0[_302].y - cbInstanceSlodData._m0[_302].x;
                float _777 = ((1.0 / (isnan(9.9999997473787516355514526367188e-05) ? _772 : (isnan(_772) ? 9.9999997473787516355514526367188e-05 : max(_772, 9.9999997473787516355514526367188e-05)))) * (_426 - cbInstanceSlodData._m0[_302].y)) + 1.0;
                float _778 = isnan(0.0) ? _777 : (isnan(_777) ? 0.0 : max(_777, 0.0));
                float _780 = 1.0 - (isnan(1.0) ? _778 : (isnan(_778) ? 1.0 : min(_778, 1.0)));
                float _781 = cbInstanceSlodData._m0[_294].y - cbInstanceSlodData._m0[_294].x;
                float _786 = ((1.0 / (isnan(9.9999997473787516355514526367188e-05) ? _781 : (isnan(_781) ? 9.9999997473787516355514526367188e-05 : max(_781, 9.9999997473787516355514526367188e-05)))) * (_331 - cbInstanceSlodData._m0[_294].y)) + 1.0;
                float _787 = isnan(0.0) ? _786 : (isnan(_786) ? 0.0 : max(_786, 0.0));
                float _788 = isnan(1.0) ? _787 : (isnan(_787) ? 1.0 : min(_787, 1.0));
                frontier_phi_8_6_ladder = isnan(_780) ? _788 : (isnan(_788) ? _780 : min(_788, _780));
            }
            else
            {
                float frontier_phi_8_6_ladder_10_ladder;
                if (_335 || _427)
                {
                    frontier_phi_8_6_ladder_10_ladder = -1.0;
                }
                else
                {
                    float _815 = cbInstanceSlodData._m0[_294].y - cbInstanceSlodData._m0[_294].x;
                    float _820 = ((1.0 / (isnan(9.9999997473787516355514526367188e-05) ? _815 : (isnan(_815) ? 9.9999997473787516355514526367188e-05 : max(_815, 9.9999997473787516355514526367188e-05)))) * (_331 - cbInstanceSlodData._m0[_294].y)) + 1.0;
                    float _821 = isnan(0.0) ? _820 : (isnan(_820) ? 0.0 : max(_820, 0.0));
                    frontier_phi_8_6_ladder_10_ladder = isnan(1.0) ? _821 : (isnan(_821) ? 1.0 : min(_821, 1.0));
                }
                frontier_phi_8_6_ladder = frontier_phi_8_6_ladder_10_ladder;
            }
            _766 = frontier_phi_8_6_ladder;
        }
        float _769 = isnan(-1.0) ? _766 : (isnan(_766) ? (-1.0) : max(_766, -1.0));
        _340 = (isnan(1.0) ? _769 : (isnan(_769) ? 1.0 : min(_769, 1.0))) + 0.0625;
    }
    precise float _360 = TEXCOORD_1.x * cbMtdParam._m0[9u].z;
    uint _368 = _194 + 1u;
    uint _375 = _194 + 2u;
    precise float _382 = TEXCOORD_1.x * cbInstanceData._m0[_194].x;
    precise float _383 = TEXCOORD_1.y * cbInstanceData._m0[_194].y;
    precise float _384 = _383 + _382;
    precise float _385 = TEXCOORD_1.z * cbInstanceData._m0[_194].z;
    precise float _386 = _385 + _384;
    precise float _387 = 1.0 * cbInstanceData._m0[_194].w;
    precise float _388 = _387 + _386;
    precise float _389 = TEXCOORD_1.x * cbInstanceData._m0[_368].x;
    precise float _390 = TEXCOORD_1.y * cbInstanceData._m0[_368].y;
    precise float _391 = _390 + _389;
    precise float _392 = TEXCOORD_1.z * cbInstanceData._m0[_368].z;
    precise float _393 = _392 + _391;
    precise float _394 = 1.0 * cbInstanceData._m0[_368].w;
    precise float _395 = _394 + _393;
    precise float _396 = TEXCOORD_1.x * cbInstanceData._m0[_375].x;
    precise float _397 = TEXCOORD_1.y * cbInstanceData._m0[_375].y;
    precise float _398 = _397 + _396;
    precise float _399 = TEXCOORD_1.z * cbInstanceData._m0[_375].z;
    precise float _400 = _399 + _398;
    precise float _401 = 1.0 * cbInstanceData._m0[_375].w;
    precise float _402 = _401 + _400;
    precise float _403 = _254 - _388;
    precise float _404 = _261 - _395;
    precise float _405 = _268 - _402;
    precise float _406 = _403 * _403;
    precise float _407 = _404 * _404;
    precise float _408 = _406 + _407;
    precise float _409 = _405 * _405;
    precise float _410 = _408 + _409;
    precise float _412 = cbMtdParam._m0[9u].x * sqrt(_410);
    precise float _413 = _360 + _412;
    precise float _414 = cbPerFrame._m0[22u].x + _413;
    uint _415 = _200.w;
    float _430;
    float _432;
    float _434;
    if (_203 == 0u)
    {
        _430 = 0.0;
        _432 = 0.0;
        _434 = 0.0;
    }
    else
    {
        uint _627 = _200.z;
        precise float _431;
        precise float _433;
        precise float _435;
        float _806;
        float _808;
        float _810;
        float _640 = 0.0;
        float _641 = 0.0;
        float _642 = 0.0;
        uint _643 = _627;
        uint _645 = 0u;
        float _681;
        float _700;
        vec4 _714;
        float _715;
        float _716;
        float _730;
        float _731;
        float _732;
        float _749;
        float _750;
        float _751;
        float _752;
        bool _753;
        bool _754;
        bool _755;
        precise float _756;
        precise float _757;
        precise float _758;
        float _759;
        float _760;
        float _761;
        precise float _762;
        bool _765;
        for (;;)
        {
            uint _647 = _643 & 255u;
            uint _649 = _647 * 24u;
            uvec3 _659 = uvec3(texelFetch(g_forceParam, int(_649)).x, texelFetch(g_forceParam, int(_649 + 1u)).x, texelFetch(g_forceParam, int(_649 + 2u)).x);
            uint _664 = (_647 * 24u) + 4u;
            vec4 _677 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_664)).x, texelFetch(g_forceParam, int(_664 + 1u)).x, texelFetch(g_forceParam, int(_664 + 2u)).x, texelFetch(g_forceParam, int(_664 + 3u)).x));
            _681 = _677.w;
            uint _683 = (_647 * 24u) + 8u;
            vec4 _696 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_683)).x, texelFetch(g_forceParam, int(_683 + 1u)).x, texelFetch(g_forceParam, int(_683 + 2u)).x, texelFetch(g_forceParam, int(_683 + 3u)).x));
            _700 = _696.w;
            uint _703 = (_647 * 24u) + 12u;
            _714 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_703)).x, texelFetch(g_forceParam, int(_703 + 1u)).x, _709, texelFetch(g_forceParam, int(_703 + 3u)).x));
            _715 = _714.x;
            _716 = _714.w;
            uint _719 = (_647 * 24u) + 16u;
            vec3 _729 = uintBitsToFloat(uvec3(texelFetch(g_forceParam, int(_719)).x, texelFetch(g_forceParam, int(_719 + 1u)).x, texelFetch(g_forceParam, int(_719 + 2u)).x));
            _730 = _729.x;
            _731 = _729.y;
            _732 = _729.z;
            uint _735 = (_647 * 24u) + 20u;
            vec4 _748 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_735)).x, texelFetch(g_forceParam, int(_735 + 1u)).x, texelFetch(g_forceParam, int(_735 + 2u)).x, texelFetch(g_forceParam, int(_735 + 3u)).x));
            _749 = _748.x;
            _750 = _748.y;
            _751 = _748.z;
            _752 = _748.w;
            _753 = _659.x == 1u;
            _754 = _659.y == 1u;
            _755 = _659.z == 1u;
            _756 = _388 - _677.x;
            _757 = _395 - _677.y;
            _758 = _402 - _677.z;
            _759 = _753 ? _696.x : _756;
            _760 = _753 ? _696.y : _757;
            _761 = _753 ? _696.z : _758;
            _762 = dot(vec3(_759, _760, _761), vec3(_759, _760, _761));
            _765 = _762 > 0.0;
            float frontier_phi_12_pred;
            float frontier_phi_12_pred_1;
            float frontier_phi_12_pred_2;
            if (_765)
            {
                precise float _791 = _756 * _756;
                precise float _792 = _757 * _757;
                precise float _793 = _791 + _792;
                precise float _794 = _758 * _758;
                precise float _795 = _794 + _793;
                float _796 = sqrt(_795);
                float _797 = inversesqrt(_762);
                precise float _798 = _759 * _797;
                precise float _799 = _760 * _797;
                precise float _800 = _761 * _797;
                precise float _803 = _796 / (isnan(0.001000000047497451305389404296875) ? _714.y : (isnan(_714.y) ? 0.001000000047497451305389404296875 : max(_714.y, 0.001000000047497451305389404296875)));
                precise float _804 = 1.0 - _803;
                float _1062 = isnan(0.0) ? _804 : (isnan(_804) ? 0.0 : max(_804, 0.0));
                float _805 = isnan(1.0) ? _1062 : (isnan(_1062) ? 1.0 : min(_1062, 1.0));
                float _838;
                if (_755)
                {
                    float _825 = inversesqrt(dot(vec3(_756, _757, _758), vec3(_756, _757, _758)));
                    precise float _826 = _756 * _825;
                    precise float _827 = _757 * _825;
                    precise float _828 = _758 * _825;
                    precise float _832 = dot(vec3(_798, _799, _800), vec3(_826, _827, _828)) * 0.800000011920928955078125;
                    precise float _834 = _832 + 0.20000000298023223876953125;
                    float _1073 = isnan(0.0) ? _834 : (isnan(_834) ? 0.0 : max(_834, 0.0));
                    precise float _837 = _805 * (isnan(1.0) ? _1073 : (isnan(_1073) ? 1.0 : min(_1073, 1.0)));
                    _838 = _837;
                }
                else
                {
                    _838 = _805;
                }
                float frontier_phi_12_pred_15_ladder;
                float frontier_phi_12_pred_15_ladder_1;
                float frontier_phi_12_pred_15_ladder_2;
                if (_838 > 0.0)
                {
                    bool _841 = _753 && (!_755);
                    precise float _843 = _796 * (-4.0);
                    precise float _847 = 6.283184051513671875 / (isnan(0.001000000047497451305389404296875) ? _715 : (isnan(_715) ? 0.001000000047497451305389404296875 : max(_715, 0.001000000047497451305389404296875)));
                    precise float _849 = dot(vec2(_798, _800), vec2(_756, _758));
                    precise float _853 = _847 * _849;
                    precise float _854 = float(_841) * _853;
                    precise float _855 = _414 * _847;
                    precise float _856 = _855 - _854;
                    precise float _857 = (_841 ? 0.0 : _843) + _856;
                    precise float _859 = _700 * sin(_857);
                    precise float _860 = _799 * 0.0;
                    precise float _861 = _860 - _800;
                    precise float _862 = _800 * 0.0;
                    precise float _863 = _798 * 0.0;
                    precise float _864 = _862 - _863;
                    precise float _865 = _798 - _860;
                    precise float _866 = _716 * _859;
                    float _867 = _753 ? _866 : 0.0;
                    float _910;
                    if (_754)
                    {
                        precise float _870 = _730 * 2.0;
                        precise float _872 = _750 + _751;
                        precise float _873 = _752 + _872;
                        precise float _875 = 6.283184051513671875 / (isnan(0.001000000047497451305389404296875) ? _730 : (isnan(_730) ? 0.001000000047497451305389404296875 : max(_730, 0.001000000047497451305389404296875)));
                        precise float _876 = _749 * _875;
                        precise float _877 = (-0.0) - _798;
                        precise float _882 = dot(vec2(_800, _877), vec2(_756, _758)) / _870;
                        precise float _883 = (-0.0) - _882;
                        float _886 = fract(abs(_882));
                        precise float _887 = (-0.0) - _886;
                        precise float _889 = _870 * ((_882 >= _883) ? _886 : _887);
                        precise float _890 = _889 * 6.283184051513671875;
                        precise float _891 = _890 / _870;
                        precise float _893 = (isnan(5.0) ? _730 : (isnan(_730) ? 5.0 : min(_730, 5.0))) * sin(_891);
                        precise float _894 = _849 + _893;
                        precise float _895 = _730 * 0.25;
                        precise float _897 = _414 * _749;
                        precise float _898 = _897 - _895;
                        precise float _899 = _898 - _894;
                        precise float _900 = _749 * _873;
                        precise float _902 = _899 / (isnan(0.001000000047497451305389404296875) ? _900 : (isnan(_900) ? 0.001000000047497451305389404296875 : max(_900, 0.001000000047497451305389404296875)));
                        float _903 = fract(_902);
                        precise float _905 = 1.0 - _903;
                        float _906 = (_902 < 0.0) ? _905 : _903;
                        precise float _907 = _872 / _873;
                        precise float _908 = _750 / _873;
                        float _929;
                        if (_906 < _908)
                        {
                            precise float _927 = _906 / _908;
                            _929 = _927;
                        }
                        else
                        {
                            float frontier_phi_22_21_ladder;
                            if (_906 < _907)
                            {
                                precise float _939 = _906 - _908;
                                precise float _940 = _907 - _908;
                                precise float _941 = _939 / _940;
                                precise float _930 = 1.0 - _941;
                                frontier_phi_22_21_ladder = _930;
                            }
                            else
                            {
                                frontier_phi_22_21_ladder = 0.0;
                            }
                            _929 = frontier_phi_22_21_ladder;
                        }
                        precise float _931 = _732 * _929;
                        precise float _932 = _875 * _849;
                        precise float _933 = _414 * _876;
                        precise float _934 = _933 - _932;
                        precise float _936 = _731 + sin(_934);
                        precise float _938 = _931 * abs(_936);
                        precise float _911 = _938 + 0.0;
                        _910 = _911;
                    }
                    else
                    {
                        _910 = 0.0;
                    }
                    precise float _912 = _681 + _859;
                    precise float _913 = _912 + _910;
                    precise float _914 = _798 * _913;
                    precise float _915 = _799 * _913;
                    precise float _916 = _800 * _913;
                    precise float _917 = _861 * _867;
                    precise float _918 = _864 * _867;
                    precise float _919 = _865 * _867;
                    precise float _920 = _917 + _914;
                    precise float _921 = _918 + _915;
                    precise float _922 = _919 + _916;
                    precise float _923 = _838 * _920;
                    precise float _924 = _838 * _921;
                    precise float _925 = _838 * _922;
                    precise float _807 = _923 * 0.0500000007450580596923828125;
                    precise float _809 = _924 * 0.0500000007450580596923828125;
                    precise float _811 = _925 * 0.0500000007450580596923828125;
                    frontier_phi_12_pred_15_ladder = _807;
                    frontier_phi_12_pred_15_ladder_1 = _809;
                    frontier_phi_12_pred_15_ladder_2 = _811;
                }
                else
                {
                    frontier_phi_12_pred_15_ladder = 0.0;
                    frontier_phi_12_pred_15_ladder_1 = 0.0;
                    frontier_phi_12_pred_15_ladder_2 = 0.0;
                }
                frontier_phi_12_pred = frontier_phi_12_pred_15_ladder;
                frontier_phi_12_pred_1 = frontier_phi_12_pred_15_ladder_1;
                frontier_phi_12_pred_2 = frontier_phi_12_pred_15_ladder_2;
            }
            else
            {
                frontier_phi_12_pred = 0.0;
                frontier_phi_12_pred_1 = 0.0;
                frontier_phi_12_pred_2 = 0.0;
            }
            _806 = frontier_phi_12_pred;
            _808 = frontier_phi_12_pred_1;
            _810 = frontier_phi_12_pred_2;
            _431 = _640 + _806;
            _433 = _641 + _808;
            _435 = _642 + _810;
            uint _646 = _645 + 1u;
            if (_646 == _203)
            {
                break;
            }
            else
            {
                _640 = _431;
                _641 = _433;
                _642 = _435;
                _643 = (_645 != 3u) ? (_643 >> 8u) : _415;
                _645 = _646;
                continue;
            }
        }
        _430 = _431;
        _432 = _433;
        _434 = _435;
    }
    precise float _436 = _430 * _430;
    precise float _437 = _432 * _432;
    precise float _438 = _436 + _437;
    precise float _439 = _434 * _434;
    precise float _440 = _438 + _439;
    float _441 = sqrt(_440);
    bool _442 = _441 < 0.00011000000085914507508277893066406;
    float _447 = inversesqrt(dot(vec3(cbInstanceData._m0[_194].x, cbInstanceData._m0[_368].x, cbInstanceData._m0[_375].x), vec3(cbInstanceData._m0[_194].x, cbInstanceData._m0[_368].x, cbInstanceData._m0[_375].x)));
    precise float _448 = cbInstanceData._m0[_194].x * _447;
    precise float _449 = cbInstanceData._m0[_368].x * _447;
    precise float _450 = cbInstanceData._m0[_375].x * _447;
    float _454 = inversesqrt(dot(vec3(cbInstanceData._m0[_194].y, cbInstanceData._m0[_368].y, cbInstanceData._m0[_375].y), vec3(cbInstanceData._m0[_194].y, cbInstanceData._m0[_368].y, cbInstanceData._m0[_375].y)));
    precise float _455 = cbInstanceData._m0[_194].y * _454;
    precise float _456 = cbInstanceData._m0[_368].y * _454;
    precise float _457 = cbInstanceData._m0[_375].y * _454;
    float _461 = inversesqrt(dot(vec3(cbInstanceData._m0[_194].z, cbInstanceData._m0[_368].z, cbInstanceData._m0[_375].z), vec3(cbInstanceData._m0[_194].z, cbInstanceData._m0[_368].z, cbInstanceData._m0[_375].z)));
    precise float _462 = cbInstanceData._m0[_194].z * _461;
    precise float _463 = cbInstanceData._m0[_368].z * _461;
    precise float _464 = cbInstanceData._m0[_375].z * _461;
    precise float _465 = _448 * 0.0;
    precise float _466 = 1.0 * _455;
    precise float _467 = _466 + _465;
    precise float _468 = 0.0 * _462;
    precise float _469 = _468 + _467;
    precise float _470 = _449 * 0.0;
    precise float _471 = 1.0 * _456;
    precise float _472 = _471 + _470;
    precise float _473 = 0.0 * _463;
    precise float _474 = _473 + _472;
    precise float _475 = _450 * 0.0;
    precise float _476 = 1.0 * _457;
    precise float _477 = _476 + _475;
    precise float _478 = 0.0 * _464;
    precise float _479 = _478 + _477;
    float _483 = inversesqrt(dot(vec3(_430, _432, _434), vec3(_430, _432, _434)));
    precise float _484 = _430 * _483;
    precise float _485 = _432 * _483;
    precise float _486 = _434 * _483;
    precise float _487 = _474 * _486;
    precise float _488 = _479 * _485;
    precise float _489 = _487 - _488;
    precise float _490 = _479 * _484;
    precise float _491 = _469 * _486;
    precise float _492 = _490 - _491;
    precise float _493 = _469 * _485;
    precise float _494 = _474 * _484;
    precise float _495 = _493 - _494;
    float _499 = inversesqrt(dot(vec3(_489, _492, _495), vec3(_489, _492, _495)));
    precise float _500 = _499 * _489;
    precise float _501 = _499 * _492;
    precise float _502 = _499 * _495;
    precise float _503 = _441 + 1.0;
    precise float _505 = cbMtdParam._m0[9u].y * log2(_503);
    precise float _506 = dot(vec3(_500, _501, _502), vec3(_403, _404, _405));
    precise float _509 = _500 * _506;
    precise float _510 = _501 * _506;
    precise float _511 = _502 * _506;
    precise float _512 = _388 + _509;
    precise float _513 = _395 + _510;
    precise float _514 = _402 + _511;
    precise float _515 = _254 - _512;
    precise float _516 = _261 - _513;
    precise float _517 = _268 - _514;
    precise float _518 = _501 * _517;
    precise float _519 = _502 * _516;
    precise float _520 = _518 - _519;
    precise float _521 = _502 * _515;
    precise float _522 = _500 * _517;
    precise float _523 = _521 - _522;
    precise float _524 = _500 * _516;
    precise float _525 = _501 * _515;
    precise float _526 = _524 - _525;
    float _527 = sin(_505);
    float _528 = cos(_505);
    precise float _529 = _515 * _528;
    precise float _530 = _516 * _528;
    precise float _531 = _517 * _528;
    precise float _532 = _527 * _520;
    precise float _533 = _527 * _523;
    precise float _534 = _527 * _526;
    precise float _535 = _529 + _532;
    precise float _536 = _530 + _533;
    precise float _537 = _534 + _531;
    precise float _538 = _512 + _535;
    precise float _539 = _513 + _536;
    precise float _540 = _514 + _537;
    precise float _541 = _538 - _254;
    precise float _542 = _539 - _261;
    precise float _543 = _540 - _268;
    precise float _547 = _254 + (_442 ? 0.0 : _541);
    precise float _548 = _261 + (_442 ? 0.0 : _542);
    precise float _549 = _268 + (_442 ? 0.0 : _543);
    precise float _550 = _547 - cbSceneParam._m0[3u].x;
    precise float _551 = _548 - cbSceneParam._m0[3u].y;
    precise float _552 = _549 - cbSceneParam._m0[3u].z;
    precise float _578 = cbSceneParam._m0[24u].x * _550;
    precise float _579 = _551 * cbSceneParam._m0[24u].y;
    precise float _580 = _579 + _578;
    precise float _581 = _552 * cbSceneParam._m0[24u].z;
    precise float _582 = _581 + _580;
    precise float _583 = 1.0 * cbSceneParam._m0[24u].w;
    precise float _584 = _583 + _582;
    precise float _585 = cbSceneParam._m0[25u].x * _550;
    precise float _586 = _551 * cbSceneParam._m0[25u].y;
    precise float _587 = _586 + _585;
    precise float _588 = _552 * cbSceneParam._m0[25u].z;
    precise float _589 = _588 + _587;
    precise float _590 = 1.0 * cbSceneParam._m0[25u].w;
    precise float _591 = _590 + _589;
    precise float _592 = cbSceneParam._m0[26u].x * _550;
    precise float _593 = _551 * cbSceneParam._m0[26u].y;
    precise float _594 = _593 + _592;
    precise float _595 = _552 * cbSceneParam._m0[26u].z;
    precise float _596 = _595 + _594;
    precise float _597 = 1.0 * cbSceneParam._m0[26u].w;
    precise float _598 = _597 + _596;
    precise float _599 = _550 * cbSceneParam._m0[27u].x;
    precise float _600 = _551 * cbSceneParam._m0[27u].y;
    precise float _601 = _600 + _599;
    precise float _602 = _552 * cbSceneParam._m0[27u].z;
    precise float _603 = _602 + _601;
    precise float _604 = 1.0 * cbSceneParam._m0[27u].w;
    precise float _605 = _604 + _603;
    gl_Position.x = _584;
    gl_Position.y = _591;
    gl_Position.z = _598;
    gl_Position.w = _605;
    POSITION_1.x = _584;
    POSITION_1.y = _591;
    POSITION_1.z = _598;
    POSITION_1.w = _605;
    NORMAL_1.x = _271;
    NORMAL_1.y = _274;
    NORMAL_1.z = _277;
    NORMAL_1.w = float(_217);
    TANGENT_1.x = fma(_192, cbObjMatrix._m0[_226].z, fma(_191, cbObjMatrix._m0[_226].y, cbObjMatrix._m0[_226].x * _190));
    TANGENT_1.y = fma(_192, cbObjMatrix._m0[_233].z, fma(_191, cbObjMatrix._m0[_233].y, cbObjMatrix._m0[_233].x * _190));
    TANGENT_1.z = fma(_192, cbObjMatrix._m0[_240].z, fma(_191, cbObjMatrix._m0[_240].y, cbObjMatrix._m0[_240].x * _190));
    TANGENT_1.w = (float(TANGENT.w) + (-127.0)) * 0.0078740157186985015869140625;
    TEXCOORD_2 = ((float(int(uint(TEXCOORD.x))) * 0.00048828125) * cbTexScroll._m0[0u].x) + cbTexScroll._m0[0u].z;
    TEXCOORD_1_1 = ((float(int(uint(TEXCOORD.y))) * 0.00048828125) * cbTexScroll._m0[0u].y) + cbTexScroll._m0[0u].w;
    TEXCOORD_3.x = TEXCOORD_1.x;
    TEXCOORD_3.y = TEXCOORD_1.y;
    TEXCOORD_3.z = TEXCOORD_1.z;
    TEXCOORD_3.w = COLOR_1.x;
    TEXCOORD_12 = _340;
    gl_CullDistance[0u] = (_340 < 0.0) ? (-1.0) : 0.0;
}


