#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[10];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D SLOD_CrossBillboard_SAT_PivotAnim_snp_0_Texture2D_17;
layout(set = 0, binding = 1) uniform texture2D SLOD_CrossBillboard_SAT_PivotAnim_snp_0_Texture2D_18;
layout(set = 0, binding = 2) uniform texture2D SLOD_CrossBillboard_SAT_PivotAnim_snp_0_Texture2D_19;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in float TEXCOORD;
layout(location = 4, component = 1) in float TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 4, component = 2) in float TEXCOORD_12;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _863;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _188 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _189 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _190 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _196 = inversesqrt(dot(vec3(_188, _189, _190), vec3(_188, _189, _190)));
    float _203 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _204 = _203 * NORMAL.x;
    float _205 = _203 * NORMAL.y;
    float _206 = _203 * NORMAL.z;
    float _210 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _218;
    float _219;
    float _220;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _218 = (-0.0) - _204;
        _219 = (-0.0) - _205;
        _220 = (-0.0) - _206;
    }
    else
    {
        _218 = _204;
        _219 = _205;
        _220 = _206;
    }
    vec4 _234 = texture(sampler2D(SLOD_CrossBillboard_SAT_PivotAnim_snp_0_Texture2D_17, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1) + cbTextureTilingScale._m0[0u].w));
    float _240 = _234.w;
    float _241 = 1.0 / _240;
    float _243 = _234.x * _241;
    float _244 = _241 * _234.y;
    float _245 = _241 * _234.z;
    vec4 _257 = texture(sampler2D(SLOD_CrossBillboard_SAT_PivotAnim_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1) + cbTextureTilingScale._m0[1u].w));
    float _260 = _257.x * _241;
    vec4 _272 = texture(sampler2D(SLOD_CrossBillboard_SAT_PivotAnim_snp_0_Texture2D_19, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1) + cbTextureTilingScale._m0[2u].w));
    float _280 = (_272.x * 2.0) + (-1.0);
    float _282 = (_272.y * 2.0) + (-1.0);
    float _283 = dot(vec2(_280, _282), vec2(_280, _282));
    float _3495 = isnan(0.0) ? _283 : (isnan(_283) ? 0.0 : max(_283, 0.0));
    float _288 = sqrt(1.0 - (isnan(1.0) ? _3495 : (isnan(_3495) ? 1.0 : min(_3495, 1.0))));
    float _289 = _272.z * _241;
    float _292 = fma(_288, _218, fma(_282, _210 * TANGENT.x, (_196 * _188) * _280));
    float _295 = fma(_288, _219, fma(_282, _210 * TANGENT.y, (_196 * _189) * _280));
    float _298 = fma(_288, _220, fma(_282, _210 * TANGENT.z, (_196 * _190) * _280));
    float _302 = inversesqrt(dot(vec3(_292, _295, _298), vec3(_292, _295, _298)));
    float _303 = _302 * _292;
    float _304 = _302 * _295;
    float _305 = _302 * _298;
    float _3506 = isnan(0.0) ? _240 : (isnan(_240) ? 0.0 : max(_240, 0.0));
    float _306 = isnan(1.0) ? _3506 : (isnan(_3506) ? 1.0 : min(_3506, 1.0));
    float _3517 = isnan(0.0) ? _289 : (isnan(_289) ? 0.0 : max(_289, 0.0));
    float _307 = isnan(1.0) ? _3517 : (isnan(_3517) ? 1.0 : min(_3517, 1.0));
    float _3528 = isnan(0.0) ? _243 : (isnan(_243) ? 0.0 : max(_243, 0.0));
    float _3539 = isnan(0.0) ? _244 : (isnan(_244) ? 0.0 : max(_244, 0.0));
    float _3550 = isnan(0.0) ? _245 : (isnan(_245) ? 0.0 : max(_245, 0.0));
    float _3561 = isnan(0.0) ? _260 : (isnan(_260) ? 0.0 : max(_260, 0.0));
    float _311 = isnan(1.0) ? _3561 : (isnan(_3561) ? 1.0 : min(_3561, 1.0));
    if (!(!(texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125)).w > TEXCOORD_12)))
    {
        discard_state = true;
    }
    float _335 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _378 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _388 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _378);
    float _389 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _378);
    float _390 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _378);
    float _394 = inversesqrt(dot(vec3(_388, _389, _390), vec3(_388, _389, _390)));
    float _395 = _388 * _394;
    float _396 = _389 * _394;
    float _397 = _390 * _394;
    float _403 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _404 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _425 = fma(_305, cbSceneParam._m0[5u].z, fma(_304, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _303));
    float _428 = fma(_305, cbSceneParam._m0[6u].z, fma(_304, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _303));
    float _431 = fma(_305, cbSceneParam._m0[7u].z, fma(_304, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _303));
    uint _444 = uint(roundEven(NORMAL.w)) * 13u;
    uint _447 = (_444 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _453 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3528 : (isnan(_3528) ? 1.0 : min(_3528, 1.0)))) * cbInstanceData._m0[_447].x;
    float _454 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3539 : (isnan(_3539) ? 1.0 : min(_3539, 1.0)))) * cbInstanceData._m0[_447].y;
    float _455 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3550 : (isnan(_3550) ? 1.0 : min(_3550, 1.0)))) * cbInstanceData._m0[_447].z;
    float _3572 = isnan(0.0) ? _453 : (isnan(_453) ? 0.0 : max(_453, 0.0));
    float _456 = isnan(1.0) ? _3572 : (isnan(_3572) ? 1.0 : min(_3572, 1.0));
    float _3583 = isnan(0.0) ? _454 : (isnan(_454) ? 0.0 : max(_454, 0.0));
    float _457 = isnan(1.0) ? _3583 : (isnan(_3583) ? 1.0 : min(_3583, 1.0));
    float _3594 = isnan(0.0) ? _455 : (isnan(_455) ? 0.0 : max(_455, 0.0));
    float _458 = isnan(1.0) ? _3594 : (isnan(_3594) ? 1.0 : min(_3594, 1.0));
    float _459 = 1.0 - _311;
    float _460 = _456 * _459;
    float _461 = _457 * _459;
    float _462 = _458 * _459;
    float _467 = (_456 + (-0.039999999105930328369140625)) * _311;
    float _468 = (_457 + (-0.039999999105930328369140625)) * _311;
    float _469 = (_458 + (-0.039999999105930328369140625)) * _311;
    float _470 = _467 + 0.039999999105930328369140625;
    float _472 = _468 + 0.039999999105930328369140625;
    float _473 = _469 + 0.039999999105930328369140625;
    vec4 _482 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _403, cbSceneParam._m0[86u].y * _404));
    float _485 = _482.x * TEXCOORD_3.w;
    float _486 = dot(vec3(_303, _304, _305), vec3(_395, _396, _397));
    float _489 = _486 * 2.0;
    float _493 = (_489 * _303) - _395;
    float _494 = (_489 * _304) - _396;
    float _495 = (_489 * _305) - _397;
    float _499 = abs(dot(vec3(_395, _396, _397), vec3(_303, _304, _305)));
    float _3605 = isnan(0.0) ? _499 : (isnan(_499) ? 0.0 : max(_499, 0.0));
    float _501 = sqrt(_307);
    float _514 = exp2((_501 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3605 : (isnan(_3605) ? 1.0 : min(_3605, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_501 * 3.0));
    float _520 = (1.0 - _514) * ((_501 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _521 = _514 * _501;
    float _549 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _553 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _557 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _862;
    float _864;
    float _865;
    float _866;
    float _867;
    float _868;
    float _869;
    float _870;
    float _871;
    float _872;
    float _873;
    float _874;
    float _875;
    float _876;
    float _877;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _587 = fma(_557, cbModelParam._m0[26u].z, fma(_553, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _549));
        float _591 = fma(_557, cbModelParam._m0[27u].z, fma(_553, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _549));
        float _595 = fma(_557, cbModelParam._m0[28u].z, fma(_553, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _549));
        float _620 = _549 + _303;
        float _621 = _553 + _304;
        float _622 = _557 + _305;
        float _632 = fma(_622, cbModelParam._m0[26u].z, fma(_621, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _620)) - _587;
        float _633 = fma(_622, cbModelParam._m0[27u].z, fma(_621, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _620)) - _591;
        float _634 = fma(_622, cbModelParam._m0[28u].z, fma(_621, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _620)) - _595;
        float _638 = inversesqrt(dot(vec3(_632, _633, _634), vec3(_632, _633, _634)));
        float _651 = ((_638 * _632) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_587 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _652 = ((_638 * _633) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_591 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _653 = ((_638 * _634) / cbModelParam._m0[34u].z) + ((((((_595 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _656 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_651, _652, _653), 0.0);
        vec4 _663 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_651, _652, _653), 0.0);
        vec4 _670 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_651, _652, _653), 0.0);
        vec4 _677 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_651, _652, _653), 0.0);
        float _690 = exp2((_656.w + (-0.5)) * 20.0) * 2.0;
        float _691 = _690 * (_656.x + (-0.5));
        float _692 = _690 * (_656.y + (-0.5));
        float _693 = _690 * (_656.z + (-0.5));
        float _700 = exp2((_663.w + (-0.5)) * 20.0) * 2.0;
        float _701 = _700 * (_663.x + (-0.5));
        float _702 = _700 * (_663.y + (-0.5));
        float _703 = _700 * (_663.z + (-0.5));
        float _710 = exp2((_670.w + (-0.5)) * 20.0) * 2.0;
        float _711 = _710 * (_670.x + (-0.5));
        float _712 = _710 * (_670.y + (-0.5));
        float _713 = _710 * (_670.z + (-0.5));
        float _720 = exp2((_677.w + (-0.5)) * 20.0) * 2.0;
        float _721 = _720 * (_677.x + (-0.5));
        float _722 = _720 * (_677.y + (-0.5));
        float _723 = _720 * (_677.z + (-0.5));
        float _724 = isnan(0.0) ? _721 : (isnan(_721) ? 0.0 : max(_721, 0.0));
        float _725 = isnan(0.0) ? _722 : (isnan(_722) ? 0.0 : max(_722, 0.0));
        float _726 = isnan(0.0) ? _723 : (isnan(_723) ? 0.0 : max(_723, 0.0));
        float _727 = _691 * 0.5;
        float _728 = _701 * 0.5;
        float _729 = _711 * 0.5;
        float _730 = dot(vec3(_727, _728, _729), vec3(_727, _728, _729));
        float _735 = (_730 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_730);
        float _744 = (dot(vec3(_303, _304, _305), vec3(_735 * _727, _735 * _728, _735 * _729)) + 1.0) * 0.5;
        float _3631 = isnan(0.0) ? _744 : (isnan(_744) ? 0.0 : max(_744, 0.0));
        float _754 = sqrt(((_728 * _728) + (_727 * _727)) + (_729 * _729)) / (_724 + 9.9999997473787516355514526367188e-06);
        float _3642 = isnan(0.0) ? _754 : (isnan(_754) ? 0.0 : max(_754, 0.0));
        float _755 = isnan(1.0) ? _3642 : (isnan(_3642) ? 1.0 : min(_3642, 1.0));
        float _756 = _755 * 2.0;
        float _760 = (1.0 - _755) / (_755 + 1.0);
        float _3653 = isnan(0.0) ? _760 : (isnan(_760) ? 0.0 : max(_760, 0.0));
        float _761 = isnan(1.0) ? _3653 : (isnan(_3653) ? 1.0 : min(_3653, 1.0));
        float _770 = ((((1.0 - _761) * (_756 + 2.0)) * exp2(log2(isnan(1.0) ? _3631 : (isnan(_3631) ? 1.0 : min(_3631, 1.0))) * (_756 + 1.0))) + _761) * _724;
        float _771 = _692 * 0.5;
        float _772 = _702 * 0.5;
        float _773 = _712 * 0.5;
        float _774 = dot(vec3(_771, _772, _773), vec3(_771, _772, _773));
        float _779 = (_774 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_774);
        float _787 = (dot(vec3(_303, _304, _305), vec3(_779 * _771, _779 * _772, _779 * _773)) + 1.0) * 0.5;
        float _3664 = isnan(0.0) ? _787 : (isnan(_787) ? 0.0 : max(_787, 0.0));
        float _796 = sqrt(((_772 * _772) + (_771 * _771)) + (_773 * _773)) / (_725 + 9.9999997473787516355514526367188e-06);
        float _3675 = isnan(0.0) ? _796 : (isnan(_796) ? 0.0 : max(_796, 0.0));
        float _797 = isnan(1.0) ? _3675 : (isnan(_3675) ? 1.0 : min(_3675, 1.0));
        float _798 = _797 * 2.0;
        float _802 = (1.0 - _797) / (_797 + 1.0);
        float _3686 = isnan(0.0) ? _802 : (isnan(_802) ? 0.0 : max(_802, 0.0));
        float _803 = isnan(1.0) ? _3686 : (isnan(_3686) ? 1.0 : min(_3686, 1.0));
        float _812 = ((((1.0 - _803) * (_798 + 2.0)) * exp2(log2(isnan(1.0) ? _3664 : (isnan(_3664) ? 1.0 : min(_3664, 1.0))) * (_798 + 1.0))) + _803) * _725;
        float _813 = _693 * 0.5;
        float _814 = _703 * 0.5;
        float _815 = _713 * 0.5;
        float _816 = dot(vec3(_813, _814, _815), vec3(_813, _814, _815));
        float _821 = (_816 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_816);
        float _829 = (dot(vec3(_303, _304, _305), vec3(_821 * _813, _821 * _814, _821 * _815)) + 1.0) * 0.5;
        float _3697 = isnan(0.0) ? _829 : (isnan(_829) ? 0.0 : max(_829, 0.0));
        float _838 = sqrt(((_814 * _814) + (_813 * _813)) + (_815 * _815)) / (_726 + 9.9999997473787516355514526367188e-06);
        float _3708 = isnan(0.0) ? _838 : (isnan(_838) ? 0.0 : max(_838, 0.0));
        float _839 = isnan(1.0) ? _3708 : (isnan(_3708) ? 1.0 : min(_3708, 1.0));
        float _840 = _839 * 2.0;
        float _844 = (1.0 - _839) / (_839 + 1.0);
        float _3719 = isnan(0.0) ? _844 : (isnan(_844) ? 0.0 : max(_844, 0.0));
        float _845 = isnan(1.0) ? _3719 : (isnan(_3719) ? 1.0 : min(_3719, 1.0));
        float _854 = ((((1.0 - _845) * (_840 + 2.0)) * exp2(log2(isnan(1.0) ? _3697 : (isnan(_3697) ? 1.0 : min(_3697, 1.0))) * (_840 + 1.0))) + _845) * _726;
        _862 = _693;
        _864 = _692;
        _865 = _691;
        _866 = _703;
        _867 = _702;
        _868 = _701;
        _869 = _713;
        _870 = _712;
        _871 = _711;
        _872 = _726;
        _873 = _725;
        _874 = _724;
        _875 = cbModelParam._m0[36u].z * (isnan(0.0) ? _770 : (isnan(_770) ? 0.0 : max(_770, 0.0)));
        _876 = cbModelParam._m0[36u].z * (isnan(0.0) ? _812 : (isnan(_812) ? 0.0 : max(_812, 0.0)));
        _877 = cbModelParam._m0[36u].z * (isnan(0.0) ? _854 : (isnan(_854) ? 0.0 : max(_854, 0.0)));
    }
    else
    {
        _862 = _863;
        _864 = _863;
        _865 = _863;
        _866 = _863;
        _867 = _863;
        _868 = _863;
        _869 = _863;
        _870 = _863;
        _871 = _863;
        _872 = _863;
        _873 = _863;
        _874 = _863;
        _875 = 0.0;
        _876 = 0.0;
        _877 = 0.0;
    }
    float _1172;
    float _1173;
    float _1174;
    float _1175;
    float _1176;
    float _1177;
    float _1178;
    float _1179;
    float _1180;
    float _1181;
    float _1182;
    float _1183;
    float _1184;
    float _1185;
    float _1186;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _903 = fma(_557, cbModelParam._m0[30u].z, fma(_553, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _549));
        float _907 = fma(_557, cbModelParam._m0[31u].z, fma(_553, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _549));
        float _911 = fma(_557, cbModelParam._m0[32u].z, fma(_553, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _549));
        float _934 = _549 + _303;
        float _935 = _553 + _304;
        float _936 = _557 + _305;
        float _946 = fma(_936, cbModelParam._m0[30u].z, fma(_935, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _934)) - _903;
        float _947 = fma(_936, cbModelParam._m0[31u].z, fma(_935, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _934)) - _907;
        float _948 = fma(_936, cbModelParam._m0[32u].z, fma(_935, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _934)) - _911;
        float _952 = inversesqrt(dot(vec3(_946, _947, _948), vec3(_946, _947, _948)));
        float _965 = ((_952 * _946) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_903 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _966 = ((_952 * _947) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_907 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _967 = ((_952 * _948) / cbModelParam._m0[35u].z) + ((((((_911 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _969 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_965, _966, _967), 0.0);
        vec4 _976 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_965, _966, _967), 0.0);
        vec4 _983 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_965, _966, _967), 0.0);
        vec4 _990 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_965, _966, _967), 0.0);
        float _1002 = exp2((_969.w + (-0.5)) * 20.0) * 2.0;
        float _1003 = _1002 * (_969.x + (-0.5));
        float _1004 = _1002 * (_969.y + (-0.5));
        float _1005 = _1002 * (_969.z + (-0.5));
        float _1012 = exp2((_976.w + (-0.5)) * 20.0) * 2.0;
        float _1013 = _1012 * (_976.x + (-0.5));
        float _1014 = _1012 * (_976.y + (-0.5));
        float _1015 = _1012 * (_976.z + (-0.5));
        float _1022 = exp2((_983.w + (-0.5)) * 20.0) * 2.0;
        float _1023 = _1022 * (_983.x + (-0.5));
        float _1024 = _1022 * (_983.y + (-0.5));
        float _1025 = _1022 * (_983.z + (-0.5));
        float _1032 = exp2((_990.w + (-0.5)) * 20.0) * 2.0;
        float _1033 = _1032 * (_990.x + (-0.5));
        float _1034 = _1032 * (_990.y + (-0.5));
        float _1035 = _1032 * (_990.z + (-0.5));
        float _1036 = isnan(0.0) ? _1033 : (isnan(_1033) ? 0.0 : max(_1033, 0.0));
        float _1037 = isnan(0.0) ? _1034 : (isnan(_1034) ? 0.0 : max(_1034, 0.0));
        float _1038 = isnan(0.0) ? _1035 : (isnan(_1035) ? 0.0 : max(_1035, 0.0));
        float _1039 = _1003 * 0.5;
        float _1040 = _1013 * 0.5;
        float _1041 = _1023 * 0.5;
        float _1042 = dot(vec3(_1039, _1040, _1041), vec3(_1039, _1040, _1041));
        float _1047 = (_1042 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1042);
        float _1055 = (dot(vec3(_303, _304, _305), vec3(_1047 * _1039, _1047 * _1040, _1047 * _1041)) + 1.0) * 0.5;
        float _3760 = isnan(0.0) ? _1055 : (isnan(_1055) ? 0.0 : max(_1055, 0.0));
        float _1064 = sqrt(((_1040 * _1040) + (_1039 * _1039)) + (_1041 * _1041)) / (_1036 + 9.9999997473787516355514526367188e-06);
        float _3771 = isnan(0.0) ? _1064 : (isnan(_1064) ? 0.0 : max(_1064, 0.0));
        float _1065 = isnan(1.0) ? _3771 : (isnan(_3771) ? 1.0 : min(_3771, 1.0));
        float _1066 = _1065 * 2.0;
        float _1070 = (1.0 - _1065) / (_1065 + 1.0);
        float _3782 = isnan(0.0) ? _1070 : (isnan(_1070) ? 0.0 : max(_1070, 0.0));
        float _1071 = isnan(1.0) ? _3782 : (isnan(_3782) ? 1.0 : min(_3782, 1.0));
        float _1080 = ((((1.0 - _1071) * (_1066 + 2.0)) * exp2(log2(isnan(1.0) ? _3760 : (isnan(_3760) ? 1.0 : min(_3760, 1.0))) * (_1066 + 1.0))) + _1071) * _1036;
        float _1081 = _1004 * 0.5;
        float _1082 = _1014 * 0.5;
        float _1083 = _1024 * 0.5;
        float _1084 = dot(vec3(_1081, _1082, _1083), vec3(_1081, _1082, _1083));
        float _1089 = (_1084 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1084);
        float _1097 = (dot(vec3(_303, _304, _305), vec3(_1089 * _1081, _1089 * _1082, _1089 * _1083)) + 1.0) * 0.5;
        float _3793 = isnan(0.0) ? _1097 : (isnan(_1097) ? 0.0 : max(_1097, 0.0));
        float _1106 = sqrt(((_1082 * _1082) + (_1081 * _1081)) + (_1083 * _1083)) / (_1037 + 9.9999997473787516355514526367188e-06);
        float _3804 = isnan(0.0) ? _1106 : (isnan(_1106) ? 0.0 : max(_1106, 0.0));
        float _1107 = isnan(1.0) ? _3804 : (isnan(_3804) ? 1.0 : min(_3804, 1.0));
        float _1108 = _1107 * 2.0;
        float _1112 = (1.0 - _1107) / (_1107 + 1.0);
        float _3815 = isnan(0.0) ? _1112 : (isnan(_1112) ? 0.0 : max(_1112, 0.0));
        float _1113 = isnan(1.0) ? _3815 : (isnan(_3815) ? 1.0 : min(_3815, 1.0));
        float _1122 = ((((1.0 - _1113) * (_1108 + 2.0)) * exp2(log2(isnan(1.0) ? _3793 : (isnan(_3793) ? 1.0 : min(_3793, 1.0))) * (_1108 + 1.0))) + _1113) * _1037;
        float _1123 = _1005 * 0.5;
        float _1124 = _1015 * 0.5;
        float _1125 = _1025 * 0.5;
        float _1126 = dot(vec3(_1123, _1124, _1125), vec3(_1123, _1124, _1125));
        float _1131 = (_1126 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1126);
        float _1139 = (dot(vec3(_303, _304, _305), vec3(_1131 * _1123, _1131 * _1124, _1131 * _1125)) + 1.0) * 0.5;
        float _3826 = isnan(0.0) ? _1139 : (isnan(_1139) ? 0.0 : max(_1139, 0.0));
        float _1148 = sqrt(((_1124 * _1124) + (_1123 * _1123)) + (_1125 * _1125)) / (_1038 + 9.9999997473787516355514526367188e-06);
        float _3837 = isnan(0.0) ? _1148 : (isnan(_1148) ? 0.0 : max(_1148, 0.0));
        float _1149 = isnan(1.0) ? _3837 : (isnan(_3837) ? 1.0 : min(_3837, 1.0));
        float _1150 = _1149 * 2.0;
        float _1154 = (1.0 - _1149) / (_1149 + 1.0);
        float _3848 = isnan(0.0) ? _1154 : (isnan(_1154) ? 0.0 : max(_1154, 0.0));
        float _1155 = isnan(1.0) ? _3848 : (isnan(_3848) ? 1.0 : min(_3848, 1.0));
        float _1164 = ((((1.0 - _1155) * (_1150 + 2.0)) * exp2(log2(isnan(1.0) ? _3826 : (isnan(_3826) ? 1.0 : min(_3826, 1.0))) * (_1150 + 1.0))) + _1155) * _1038;
        _1172 = _1005;
        _1173 = _1004;
        _1174 = _1003;
        _1175 = _1015;
        _1176 = _1014;
        _1177 = _1013;
        _1178 = _1025;
        _1179 = _1024;
        _1180 = _1023;
        _1181 = _1038;
        _1182 = _1037;
        _1183 = _1036;
        _1184 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1080 : (isnan(_1080) ? 0.0 : max(_1080, 0.0)));
        _1185 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1122 : (isnan(_1122) ? 0.0 : max(_1122, 0.0)));
        _1186 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1164 : (isnan(_1164) ? 0.0 : max(_1164, 0.0)));
    }
    else
    {
        _1172 = _863;
        _1173 = _863;
        _1174 = _863;
        _1175 = _863;
        _1176 = _863;
        _1177 = _863;
        _1178 = _863;
        _1179 = _863;
        _1180 = _863;
        _1181 = _863;
        _1182 = _863;
        _1183 = _863;
        _1184 = 0.0;
        _1185 = 0.0;
        _1186 = 0.0;
    }
    float _1196 = (cbModelParam._m0[1u].x * (_1184 - _875)) + _875;
    float _1197 = (cbModelParam._m0[1u].x * (_1185 - _876)) + _876;
    float _1198 = (cbModelParam._m0[1u].x * (_1186 - _877)) + _877;
    float _1219 = fma(_1198, cbSceneParam._m0[89u].z, fma(_1197, cbSceneParam._m0[89u].y, _1196 * cbSceneParam._m0[89u].x));
    float _1222 = fma(_1198, cbSceneParam._m0[90u].z, fma(_1197, cbSceneParam._m0[90u].y, _1196 * cbSceneParam._m0[90u].x));
    float _1225 = fma(_1198, cbSceneParam._m0[91u].z, fma(_1197, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1196));
    float _1240 = _493 * 0.5;
    float _1241 = _494 * 0.5;
    float _1242 = _495 * 0.5;
    float _1243 = dot(vec4(_1240, _1241, _1242, 1.0), vec4(_1174, _1177, _1180, _1183));
    float _1246 = dot(vec4(_1240, _1241, _1242, 1.0), vec4(_1173, _1176, _1179, _1182));
    float _1249 = dot(vec4(_1240, _1241, _1242, 1.0), vec4(_1172, _1175, _1178, _1181));
    float _1283;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1256 = dot(vec4(_1240, _1241, _1242, 1.0), vec4(_862, _866, _869, _872));
        float _1260 = dot(vec4(_1240, _1241, _1242, 1.0), vec4(_864, _867, _870, _873));
        float _1264 = dot(vec4(_1240, _1241, _1242, 1.0), vec4(_865, _868, _871, _874));
        float _1271 = dot(vec4(cbModelParam._m0[39u]), vec4(_1240, _1241, _1242, 1.0));
        _1283 = dot(vec3(isnan(0.0) ? _1264 : (isnan(_1264) ? 0.0 : max(_1264, 0.0)), isnan(0.0) ? _1260 : (isnan(_1260) ? 0.0 : max(_1260, 0.0)), isnan(0.0) ? _1256 : (isnan(_1256) ? 0.0 : max(_1256, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1271) ? 0.0 : (isnan(0.0) ? _1271 : max(0.0, _1271))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1283 = 1.0;
    }
    float _1294;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1285 = dot(vec4(cbModelParam._m0[40u]), vec4(_1240, _1241, _1242, 1.0));
        _1294 = dot(vec3(isnan(0.0) ? _1243 : (isnan(_1243) ? 0.0 : max(_1243, 0.0)), isnan(0.0) ? _1246 : (isnan(_1246) ? 0.0 : max(_1246, 0.0)), isnan(0.0) ? _1249 : (isnan(_1249) ? 0.0 : max(_1249, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1285) ? 0.0 : (isnan(0.0) ? _1285 : max(0.0, _1285))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1294 = 1.0;
    }
    float _1298 = (_1294 * cbModelParam._m0[1u].x) + (_1283 * (1.0 - cbModelParam._m0[1u].x));
    float _1308 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _307);
    float _1309 = isnan(_1308) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1308 : min(cbModelParam._m0[25u].z, _1308));
    float _1391;
    float _1393;
    float _1395;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1358 = fma(_557, cbModelParam._m0[13u].z, fma(_553, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _549)) + cbModelParam._m0[13u].w;
        float _1362 = fma(_557, cbModelParam._m0[14u].z, fma(_553, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _549)) + cbModelParam._m0[14u].w;
        float _1366 = fma(_557, cbModelParam._m0[15u].z, fma(_553, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _549)) + cbModelParam._m0[15u].w;
        float _1369 = fma(_495, cbModelParam._m0[13u].z, fma(_494, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _493));
        float _1372 = fma(_495, cbModelParam._m0[14u].z, fma(_494, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _493));
        float _1375 = fma(_495, cbModelParam._m0[15u].z, fma(_494, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _493));
        float _1403;
        if (_1369 > 0.0)
        {
            _1403 = abs((1.0 - _1358) / _1369);
        }
        else
        {
            float frontier_phi_18_16_ladder;
            if (_1369 < 0.0)
            {
                frontier_phi_18_16_ladder = abs((_1358 + 1.0) / _1369);
            }
            else
            {
                frontier_phi_18_16_ladder = 5000.0;
            }
            _1403 = frontier_phi_18_16_ladder;
        }
        float _1579;
        if (_1372 > 0.0)
        {
            _1579 = abs((1.0 - _1362) / _1372);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1372 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1362 + 1.0) / _1372);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1579 = frontier_phi_27_23_ladder;
        }
        float _1875;
        if (_1375 > 0.0)
        {
            _1875 = abs((1.0 - _1366) / _1375);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1375 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1366 + 1.0) / _1375);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _1875 = frontier_phi_39_34_ladder;
        }
        float _1877 = isnan(_1579) ? _1403 : (isnan(_1403) ? _1579 : min(_1403, _1579));
        float _1878 = isnan(_1875) ? _1877 : (isnan(_1877) ? _1875 : min(_1877, _1875));
        float _1882 = (_1878 * _1369) + _1358;
        float _1883 = (_1878 * _1372) + _1362;
        float _1884 = (_1878 * _1375) + _1366;
        float _1885 = _1878 * 9.9999997473787516355514526367188e-05;
        float _1887 = (-1.0) - _1885;
        float _1889 = _1885 + 1.0;
        float frontier_phi_17_39_ladder;
        float frontier_phi_17_39_ladder_1;
        float frontier_phi_17_39_ladder_2;
        if ((_1884 > _1889) || ((_1884 < _1887) || ((_1883 > _1889) || ((_1883 < _1887) || ((_1882 < _1887) || (_1882 > _1889))))))
        {
            frontier_phi_17_39_ladder = 0.0;
            frontier_phi_17_39_ladder_1 = 0.0;
            frontier_phi_17_39_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2029 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1884, cbModelParam._m0[9u].z, fma(_1883, cbModelParam._m0[9u].y, _1882 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1884, cbModelParam._m0[10u].z, fma(_1883, cbModelParam._m0[10u].y, _1882 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1884, cbModelParam._m0[11u].z, fma(_1883, cbModelParam._m0[11u].y, _1882 * cbModelParam._m0[11u].x))), _1309);
            frontier_phi_17_39_ladder = _2029.y * cbModelParam._m0[1u].y;
            frontier_phi_17_39_ladder_1 = _2029.x * cbModelParam._m0[1u].y;
            frontier_phi_17_39_ladder_2 = _2029.z * cbModelParam._m0[1u].y;
        }
        _1391 = frontier_phi_17_39_ladder_1;
        _1393 = frontier_phi_17_39_ladder;
        _1395 = frontier_phi_17_39_ladder_2;
    }
    else
    {
        vec4 _1379 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_493, _494, _495), _1309);
        _1391 = _1379.x * cbModelParam._m0[1u].y;
        _1393 = _1379.y * cbModelParam._m0[1u].y;
        _1395 = _1379.z * cbModelParam._m0[1u].y;
    }
    float _1399 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _307);
    float _1400 = isnan(_1399) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1399 : min(cbModelParam._m0[25u].w, _1399));
    float _1493;
    float _1495;
    float _1497;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1457 = fma(_557, cbModelParam._m0[21u].z, fma(_553, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _549)) + cbModelParam._m0[21u].w;
        float _1461 = fma(_557, cbModelParam._m0[22u].z, fma(_553, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _549)) + cbModelParam._m0[22u].w;
        float _1465 = fma(_557, cbModelParam._m0[23u].z, fma(_553, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _549)) + cbModelParam._m0[23u].w;
        float _1468 = fma(_495, cbModelParam._m0[21u].z, fma(_494, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _493));
        float _1471 = fma(_495, cbModelParam._m0[22u].z, fma(_494, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _493));
        float _1474 = fma(_495, cbModelParam._m0[23u].z, fma(_494, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _493));
        float _1584;
        if (_1468 > 0.0)
        {
            _1584 = abs((1.0 - _1457) / _1468);
        }
        else
        {
            float frontier_phi_29_25_ladder;
            if (_1468 < 0.0)
            {
                frontier_phi_29_25_ladder = abs((_1457 + 1.0) / _1468);
            }
            else
            {
                frontier_phi_29_25_ladder = 5000.0;
            }
            _1584 = frontier_phi_29_25_ladder;
        }
        float _1902;
        if (_1471 > 0.0)
        {
            _1902 = abs((1.0 - _1461) / _1471);
        }
        else
        {
            float frontier_phi_41_36_ladder;
            if (_1471 < 0.0)
            {
                frontier_phi_41_36_ladder = abs((_1461 + 1.0) / _1471);
            }
            else
            {
                frontier_phi_41_36_ladder = 5000.0;
            }
            _1902 = frontier_phi_41_36_ladder;
        }
        float _2240;
        if (_1474 > 0.0)
        {
            _2240 = abs((1.0 - _1465) / _1474);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1474 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1465 + 1.0) / _1474);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2240 = frontier_phi_51_48_ladder;
        }
        float _2242 = isnan(_1902) ? _1584 : (isnan(_1584) ? _1902 : min(_1584, _1902));
        float _2243 = isnan(_2240) ? _2242 : (isnan(_2242) ? _2240 : min(_2242, _2240));
        float _2247 = (_2243 * _1468) + _1457;
        float _2248 = (_2243 * _1471) + _1461;
        float _2249 = (_2243 * _1474) + _1465;
        float _2250 = _2243 * 9.9999997473787516355514526367188e-05;
        float _2251 = (-1.0) - _2250;
        float _2253 = _2250 + 1.0;
        float frontier_phi_26_51_ladder;
        float frontier_phi_26_51_ladder_1;
        float frontier_phi_26_51_ladder_2;
        if ((_2249 > _2253) || ((_2249 < _2251) || ((_2248 > _2253) || ((_2248 < _2251) || ((_2247 < _2251) || (_2247 > _2253))))))
        {
            frontier_phi_26_51_ladder = 0.0;
            frontier_phi_26_51_ladder_1 = 0.0;
            frontier_phi_26_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2371 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2249, cbModelParam._m0[17u].z, fma(_2248, cbModelParam._m0[17u].y, _2247 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2249, cbModelParam._m0[18u].z, fma(_2248, cbModelParam._m0[18u].y, _2247 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2249, cbModelParam._m0[19u].z, fma(_2248, cbModelParam._m0[19u].y, _2247 * cbModelParam._m0[19u].x))), _1400);
            frontier_phi_26_51_ladder = _2371.z * cbModelParam._m0[1u].z;
            frontier_phi_26_51_ladder_1 = _2371.y * cbModelParam._m0[1u].z;
            frontier_phi_26_51_ladder_2 = _2371.x * cbModelParam._m0[1u].z;
        }
        _1493 = frontier_phi_26_51_ladder_2;
        _1495 = frontier_phi_26_51_ladder_1;
        _1497 = frontier_phi_26_51_ladder;
    }
    else
    {
        vec4 _1477 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_493, _494, _495), _1400);
        _1493 = _1477.x * cbModelParam._m0[1u].z;
        _1495 = _1477.y * cbModelParam._m0[1u].z;
        _1497 = _1477.z * cbModelParam._m0[1u].z;
    }
    float _1510 = (((_520 * _470) + _521) * _485) * ((cbModelParam._m0[1u].w * (_1493 - _1391)) + _1391);
    float _1512 = (((_520 * _472) + _521) * _485) * ((cbModelParam._m0[1u].w * (_1495 - _1393)) + _1393);
    float _1514 = (((_520 * _473) + _521) * _485) * ((cbModelParam._m0[1u].w * (_1497 - _1395)) + _1395);
    float _1517 = fma(_1514, cbSceneParam._m0[89u].z, fma(_1512, cbSceneParam._m0[89u].y, _1510 * cbSceneParam._m0[89u].x));
    float _1520 = fma(_1514, cbSceneParam._m0[90u].z, fma(_1512, cbSceneParam._m0[90u].y, _1510 * cbSceneParam._m0[90u].x));
    float _1523 = fma(_1514, cbSceneParam._m0[91u].z, fma(_1512, cbSceneParam._m0[91u].y, _1510 * cbSceneParam._m0[91u].x));
    float _1558 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1562 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1566 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1570 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1571 = _1558 / _1570;
    float _1572 = _1562 / _1570;
    float _1573 = _1566 / _1570;
    float _1720;
    float _1721;
    float _1722;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1600 = ((uint(_1573 > cbSceneParam._m0[59u].y) + uint(_1573 > cbSceneParam._m0[59u].x)) + uint(_1573 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1601 = _1600 + 43u;
        uint _1609 = _1600 + 44u;
        uint _1617 = _1600 + 45u;
        uint _1625 = _1600 + 46u;
        float _1636 = fma(_1570, cbSceneParam._m0[_1601].w, fma(_1566, cbSceneParam._m0[_1601].z, fma(_1562, cbSceneParam._m0[_1601].y, _1558 * cbSceneParam._m0[_1601].x)));
        float _1640 = fma(_1570, cbSceneParam._m0[_1609].w, fma(_1566, cbSceneParam._m0[_1609].z, fma(_1562, cbSceneParam._m0[_1609].y, _1558 * cbSceneParam._m0[_1609].x)));
        float _1648 = fma(_1570, cbSceneParam._m0[_1625].w, fma(_1566, cbSceneParam._m0[_1625].z, fma(_1562, cbSceneParam._m0[_1625].y, _1558 * cbSceneParam._m0[_1625].x)));
        float _1653 = cbSceneParam._m0[33u].z * _1648;
        float _1655 = cbSceneParam._m0[33u].w * _1648;
        float _1658 = fma(_1570, cbSceneParam._m0[_1617].w, fma(_1566, cbSceneParam._m0[_1617].z, fma(_1562, cbSceneParam._m0[_1617].y, _1558 * cbSceneParam._m0[_1617].x))) / _1648;
        float _1706 = (cbSceneParam._m0[33u].x - sqrt(((_1572 * _1572) + (_1571 * _1571)) + (_1573 * _1573))) * cbSceneParam._m0[33u].y;
        float _3974 = isnan(0.0) ? _1706 : (isnan(_1706) ? 0.0 : max(_1706, 0.0));
        float _1713 = (isnan(1.0) ? _3974 : (isnan(_3974) ? 1.0 : min(_3974, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1653 + _1636) / _1648, (_1655 + _1640) / _1648), _1658), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1655 + _1636) / _1648, (_1640 - _1653) / _1648), _1658), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1636 - _1653) / _1648, (_1640 - _1655) / _1648), _1658), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1636 - _1655) / _1648, (_1653 + _1640) / _1648), _1658), 0.0)).x), vec4(0.25)));
        _1720 = 1.0 - (_1713 * cbSceneParam._m0[34u].x);
        _1721 = 1.0 - (_1713 * cbSceneParam._m0[34u].y);
        _1722 = 1.0 - (_1713 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1720 = 1.0;
        _1721 = 1.0;
        _1722 = 1.0;
    }
    float _1786;
    float _1788;
    float _1790;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1774 = fma(_1570, cbSceneParam._m0[63u].w, fma(_1566, cbSceneParam._m0[63u].z, fma(_1562, cbSceneParam._m0[63u].y, _1558 * cbSceneParam._m0[63u].x)));
        float _1775 = fma(_1570, cbSceneParam._m0[60u].w, fma(_1566, cbSceneParam._m0[60u].z, fma(_1562, cbSceneParam._m0[60u].y, _1558 * cbSceneParam._m0[60u].x))) / _1774;
        float _1776 = fma(_1570, cbSceneParam._m0[61u].w, fma(_1566, cbSceneParam._m0[61u].z, fma(_1562, cbSceneParam._m0[61u].y, _1558 * cbSceneParam._m0[61u].x))) / _1774;
        float frontier_phi_38_37_ladder;
        float frontier_phi_38_37_ladder_1;
        float frontier_phi_38_37_ladder_2;
        if ((((_1775 >= cbSceneParam._m0[64u].x) && (_1776 >= cbSceneParam._m0[64u].y)) && (_1775 <= cbSceneParam._m0[64u].z)) && (_1776 <= cbSceneParam._m0[64u].w))
        {
            float _1915 = fma(_1570, cbSceneParam._m0[62u].w, fma(_1566, cbSceneParam._m0[62u].z, fma(_1562, cbSceneParam._m0[62u].y, _1558 * cbSceneParam._m0[62u].x))) / _1774;
            float _1919 = isnan(cbSceneParam._m0[41u].w) ? _1915 : (isnan(_1915) ? cbSceneParam._m0[41u].w : max(_1915, cbSceneParam._m0[41u].w));
            float _1962 = (cbSceneParam._m0[33u].x - sqrt(((_1572 * _1572) + (_1571 * _1571)) + (_1573 * _1573))) * cbSceneParam._m0[33u].y;
            float _3990 = isnan(0.0) ? _1962 : (isnan(_1962) ? 0.0 : max(_1962, 0.0));
            float _1969 = (isnan(1.0) ? _3990 : (isnan(_3990) ? 1.0 : min(_3990, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1775, cbSceneParam._m0[33u].w + _1776), _1919), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1775, _1776 - cbSceneParam._m0[33u].z), _1919), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1775 - cbSceneParam._m0[33u].z, _1776 - cbSceneParam._m0[33u].w), _1919), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1775 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1776), _1919), 0.0)).x), vec4(0.25)));
            float _1973 = 1.0 - (_1969 * cbSceneParam._m0[34u].x);
            float _1974 = 1.0 - (_1969 * cbSceneParam._m0[34u].y);
            float _1975 = 1.0 - (_1969 * cbSceneParam._m0[34u].z);
            frontier_phi_38_37_ladder = isnan(_1974) ? _1721 : (isnan(_1721) ? _1974 : min(_1721, _1974));
            frontier_phi_38_37_ladder_1 = isnan(_1975) ? _1722 : (isnan(_1722) ? _1975 : min(_1722, _1975));
            frontier_phi_38_37_ladder_2 = isnan(_1973) ? _1720 : (isnan(_1720) ? _1973 : min(_1720, _1973));
        }
        else
        {
            frontier_phi_38_37_ladder = _1721;
            frontier_phi_38_37_ladder_1 = _1722;
            frontier_phi_38_37_ladder_2 = _1720;
        }
        _1786 = frontier_phi_38_37_ladder_2;
        _1788 = frontier_phi_38_37_ladder;
        _1790 = frontier_phi_38_37_ladder_1;
    }
    else
    {
        _1786 = _1720;
        _1788 = _1721;
        _1790 = _1722;
    }
    uvec4 _1795 = floatBitsToUint(cbInstanceData._m0[_444 + 5u]);
    uint _1797 = _1795.x * 14u;
    uint _1798 = _1797 + 13u;
    float _1805 = _485 + (-1.0);
    float _1810 = (cbLight._m0[_1798].x * _1805) + 1.0;
    float _1811 = (cbLight._m0[_1798].y * _1805) + 1.0;
    float _1812 = (cbLight._m0[_1798].z * _1805) + 1.0;
    float _1813 = (cbLight._m0[_1798].w * _1805) + 1.0;
    uint _1814 = _1797 + 5u;
    float _1820 = isnan(1.0) ? _1811 : (isnan(_1811) ? 1.0 : min(_1811, 1.0));
    uint _1824 = _1797 + 4u;
    float _1834 = isnan(1.0) ? _1810 : (isnan(_1810) ? 1.0 : min(_1810, 1.0));
    uint _1838 = _1797 | 1u;
    float _1849 = dot(vec3(cbLight._m0[_1797].xyz), vec3(_303, _304, _305));
    float _1852 = dot(vec3(cbLight._m0[_1838].xyz), vec3(_303, _304, _305));
    float _4026 = isnan(0.0) ? _1849 : (isnan(_1849) ? 0.0 : max(_1849, 0.0));
    float _4037 = isnan(0.0) ? _1852 : (isnan(_1852) ? 0.0 : max(_1852, 0.0));
    float _1857 = (isnan(1.0) ? _4026 : (isnan(_4026) ? 1.0 : min(_4026, 1.0))) * 0.3183098733425140380859375;
    float _1859 = (isnan(1.0) ? _4037 : (isnan(_4037) ? 1.0 : min(_4037, 1.0))) * 0.3183098733425140380859375;
    float _1866 = ((cbLight._m0[_1814].x * _1820) * _1859) + (((cbLight._m0[_1824].x * _1786) * _1834) * _1857);
    float _1867 = ((_1820 * cbLight._m0[_1814].y) * _1859) + (((cbLight._m0[_1824].y * _1788) * _1834) * _1857);
    float _1868 = ((_1820 * cbLight._m0[_1814].z) * _1859) + (((cbLight._m0[_1824].z * _1790) * _1834) * _1857);
    uvec4 _1872 = floatBitsToUint(cbLight._m0[_1797 + 12u]);
    bool _1874 = _1872.x == 0u;
    float _1976;
    float _1978;
    float _1980;
    if (_1874)
    {
        _1976 = _1866;
        _1978 = _1867;
        _1980 = _1868;
    }
    else
    {
        uint _1984 = _1797 + 6u;
        float _2000 = (dot(vec3(cbLight._m0[_1797 + 2u].xyz), vec3(_303, _304, _305)) * 0.5) + 0.5;
        float _2001 = _2000 * _2000;
        float _4048 = isnan(0.0) ? _2001 : (isnan(_2001) ? 0.0 : max(_2001, 0.0));
        float _2002 = isnan(1.0) ? _4048 : (isnan(_4048) ? 1.0 : min(_4048, 1.0));
        float _2003 = isnan(1.0) ? _1812 : (isnan(_1812) ? 1.0 : min(_1812, 1.0));
        _1976 = (((cbLight._m0[_1984].x * 0.3183098733425140380859375) * _2002) * _2003) + _1866;
        _1978 = (((cbLight._m0[_1984].y * 0.3183098733425140380859375) * _2002) * _2003) + _1867;
        _1980 = (((cbLight._m0[_1984].z * 0.3183098733425140380859375) * _2002) * _2003) + _1868;
    }
    bool _1983 = _1872.y == 0u;
    float _2038;
    float _2040;
    float _2042;
    if (_1983)
    {
        _2038 = _1976;
        _2040 = _1978;
        _2042 = _1980;
    }
    else
    {
        uint _2211 = _1797 + 7u;
        float _2227 = (dot(vec3(cbLight._m0[_1797 + 3u].xyz), vec3(_303, _304, _305)) * 0.5) + 0.5;
        float _2228 = _2227 * _2227;
        float _4064 = isnan(0.0) ? _2228 : (isnan(_2228) ? 0.0 : max(_2228, 0.0));
        float _2229 = isnan(1.0) ? _4064 : (isnan(_4064) ? 1.0 : min(_4064, 1.0));
        float _2230 = isnan(1.0) ? _1813 : (isnan(_1813) ? 1.0 : min(_1813, 1.0));
        _2038 = (((cbLight._m0[_2211].x * 0.3183098733425140380859375) * _2229) * _2230) + _1976;
        _2040 = (((cbLight._m0[_2211].y * 0.3183098733425140380859375) * _2229) * _2230) + _1978;
        _2042 = (((cbLight._m0[_2211].z * 0.3183098733425140380859375) * _2229) * _2230) + _1980;
    }
    uint _2045 = _1797 + 8u;
    float _2058 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1797].w)) * _307) * 0.949999988079071044921875);
    float _2059 = _2058 * _2058;
    float _2060 = cbLight._m0[_1797].x + _395;
    float _2061 = cbLight._m0[_1797].y + _396;
    float _2062 = cbLight._m0[_1797].z + _397;
    float _2066 = inversesqrt(dot(vec3(_2060, _2061, _2062), vec3(_2060, _2061, _2062)));
    float _2067 = _2066 * _2060;
    float _2068 = _2066 * _2061;
    float _2069 = _2066 * _2062;
    float _2070 = dot(vec3(_303, _304, _305), vec3(cbLight._m0[_1797].xyz));
    float _4080 = isnan(0.0) ? _2070 : (isnan(_2070) ? 0.0 : max(_2070, 0.0));
    float _2073 = isnan(1.0) ? _4080 : (isnan(_4080) ? 1.0 : min(_4080, 1.0));
    float _4091 = isnan(0.0) ? _486 : (isnan(_486) ? 0.0 : max(_486, 0.0));
    float _2074 = isnan(1.0) ? _4091 : (isnan(_4091) ? 1.0 : min(_4091, 1.0));
    float _2075 = dot(vec3(_303, _304, _305), vec3(_2067, _2068, _2069));
    float _4102 = isnan(0.0) ? _2075 : (isnan(_2075) ? 0.0 : max(_2075, 0.0));
    float _2078 = isnan(1.0) ? _4102 : (isnan(_4102) ? 1.0 : min(_4102, 1.0));
    float _2079 = dot(vec3(cbLight._m0[_1797].xyz), vec3(_2067, _2068, _2069));
    float _4113 = isnan(0.0) ? _2079 : (isnan(_2079) ? 0.0 : max(_2079, 0.0));
    float _2083 = _2059 * _2059;
    float _2087 = ((_2078 * _2078) * (_2083 + (-1.0))) + 1.0;
    float _2095 = exp2(log2(1.0 - (isnan(1.0) ? _4113 : (isnan(_4113) ? 1.0 : min(_4113, 1.0)))) * 5.0);
    float _2096 = 0.959999978542327880859375 - _467;
    float _2098 = 0.959999978542327880859375 - _468;
    float _2099 = 0.959999978542327880859375 - _469;
    float _2106 = 1.0 - _2059;
    float _2117 = (0.5 / (((_2074 * ((_2073 * _2106) + _2059)) + 9.9999999392252902907785028219223e-09) + (((_2074 * _2106) + _2059) * _2073))) * _2073;
    float _4124 = isnan(0.0) ? _2117 : (isnan(_2117) ? 0.0 : max(_2117, 0.0));
    float _2119 = (isnan(1.0) ? _4124 : (isnan(_4124) ? 1.0 : min(_4124, 1.0))) * (_2083 / ((_2087 * _2087) * 3.141590118408203125));
    uint _2133 = _1797 + 9u;
    float _2144 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1838].w)) * _307) * 0.949999988079071044921875);
    float _2145 = _2144 * _2144;
    float _2146 = cbLight._m0[_1838].x + _395;
    float _2147 = cbLight._m0[_1838].y + _396;
    float _2148 = cbLight._m0[_1838].z + _397;
    float _2152 = inversesqrt(dot(vec3(_2146, _2147, _2148), vec3(_2146, _2147, _2148)));
    float _2153 = _2152 * _2146;
    float _2154 = _2152 * _2147;
    float _2155 = _2152 * _2148;
    float _2156 = dot(vec3(_303, _304, _305), vec3(cbLight._m0[_1838].xyz));
    float _4135 = isnan(0.0) ? _2156 : (isnan(_2156) ? 0.0 : max(_2156, 0.0));
    float _2159 = isnan(1.0) ? _4135 : (isnan(_4135) ? 1.0 : min(_4135, 1.0));
    float _2160 = dot(vec3(_303, _304, _305), vec3(_2153, _2154, _2155));
    float _4146 = isnan(0.0) ? _2160 : (isnan(_2160) ? 0.0 : max(_2160, 0.0));
    float _2163 = isnan(1.0) ? _4146 : (isnan(_4146) ? 1.0 : min(_4146, 1.0));
    float _2164 = dot(vec3(cbLight._m0[_1838].xyz), vec3(_2153, _2154, _2155));
    float _4157 = isnan(0.0) ? _2164 : (isnan(_2164) ? 0.0 : max(_2164, 0.0));
    float _2168 = _2145 * _2145;
    float _2172 = ((_2163 * _2163) * (_2168 + (-1.0))) + 1.0;
    float _2179 = exp2(log2(1.0 - (isnan(1.0) ? _4157 : (isnan(_4157) ? 1.0 : min(_4157, 1.0)))) * 5.0);
    float _2186 = 1.0 - _2145;
    float _2196 = (0.5 / (((_2074 * ((_2159 * _2186) + _2145)) + 9.9999999392252902907785028219223e-09) + (((_2074 * _2186) + _2145) * _2159))) * _2159;
    float _4168 = isnan(0.0) ? _2196 : (isnan(_2196) ? 0.0 : max(_2196, 0.0));
    float _2198 = (isnan(1.0) ? _4168 : (isnan(_4168) ? 1.0 : min(_4168, 1.0))) * (_2168 / ((_2172 * _2172) * 3.141590118408203125));
    float _2208 = (((((_2179 * _2096) + _470) * cbLight._m0[_2133].x) * _2198) * _1820) + ((((cbLight._m0[_2045].x * _1786) * ((_2095 * _2096) + _470)) * _2119) * _1834);
    float _2209 = (((((_2179 * _2098) + _472) * cbLight._m0[_2133].y) * _2198) * _1820) + ((((cbLight._m0[_2045].y * _1788) * ((_2095 * _2098) + _472)) * _2119) * _1834);
    float _2210 = (((((_2179 * _2099) + _473) * cbLight._m0[_2133].z) * _2198) * _1820) + ((((cbLight._m0[_2045].z * _1790) * ((_2095 * _2099) + _473)) * _2119) * _1834);
    float _2266;
    float _2268;
    float _2270;
    if (_1874)
    {
        _2266 = _2208;
        _2268 = _2209;
        _2270 = _2210;
    }
    else
    {
        uint _2272 = _1797 + 2u;
        uint _2276 = _1797 + 10u;
        float _2290 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2272].w)) * _307) * 0.949999988079071044921875);
        float _2291 = _2290 * _2290;
        float _2292 = cbLight._m0[_2272].x + _395;
        float _2293 = cbLight._m0[_2272].y + _396;
        float _2294 = cbLight._m0[_2272].z + _397;
        float _2298 = inversesqrt(dot(vec3(_2292, _2293, _2294), vec3(_2292, _2293, _2294)));
        float _2299 = _2298 * _2292;
        float _2300 = _2298 * _2293;
        float _2301 = _2298 * _2294;
        float _2302 = dot(vec3(_303, _304, _305), vec3(cbLight._m0[_2272].xyz));
        float _4179 = isnan(0.0) ? _2302 : (isnan(_2302) ? 0.0 : max(_2302, 0.0));
        float _2305 = isnan(1.0) ? _4179 : (isnan(_4179) ? 1.0 : min(_4179, 1.0));
        float _2306 = dot(vec3(_303, _304, _305), vec3(_2299, _2300, _2301));
        float _4190 = isnan(0.0) ? _2306 : (isnan(_2306) ? 0.0 : max(_2306, 0.0));
        float _2309 = isnan(1.0) ? _4190 : (isnan(_4190) ? 1.0 : min(_4190, 1.0));
        float _2310 = dot(vec3(cbLight._m0[_2272].xyz), vec3(_2299, _2300, _2301));
        float _4201 = isnan(0.0) ? _2310 : (isnan(_2310) ? 0.0 : max(_2310, 0.0));
        float _2314 = _2291 * _2291;
        float _2318 = ((_2309 * _2309) * (_2314 + (-1.0))) + 1.0;
        float _2325 = exp2(log2(1.0 - (isnan(1.0) ? _4201 : (isnan(_4201) ? 1.0 : min(_4201, 1.0)))) * 5.0);
        float _2332 = 1.0 - _2291;
        float _2342 = (0.5 / (((_2074 * ((_2305 * _2332) + _2291)) + 9.9999999392252902907785028219223e-09) + (((_2074 * _2332) + _2291) * _2305))) * _2305;
        float _4212 = isnan(0.0) ? _2342 : (isnan(_2342) ? 0.0 : max(_2342, 0.0));
        float _2344 = (isnan(1.0) ? _4212 : (isnan(_4212) ? 1.0 : min(_4212, 1.0))) * (_2314 / ((_2318 * _2318) * 3.141590118408203125));
        float _2345 = isnan(1.0) ? _1812 : (isnan(_1812) ? 1.0 : min(_1812, 1.0));
        _2266 = (((((_2325 * _2096) + _470) * cbLight._m0[_2276].x) * _2344) * _2345) + _2208;
        _2268 = (((((_2325 * _2098) + _472) * cbLight._m0[_2276].y) * _2344) * _2345) + _2209;
        _2270 = (((((_2325 * _2099) + _473) * cbLight._m0[_2276].z) * _2344) * _2345) + _2210;
    }
    float _2376;
    float _2378;
    float _2380;
    if (_1983)
    {
        _2376 = _2266;
        _2378 = _2268;
        _2380 = _2270;
    }
    else
    {
        uint _2387 = _1797 + 3u;
        uint _2391 = _1797 + 11u;
        float _2405 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2387].w)) * _307) * 0.949999988079071044921875);
        float _2406 = _2405 * _2405;
        float _2407 = cbLight._m0[_2387].x + _395;
        float _2408 = cbLight._m0[_2387].y + _396;
        float _2409 = cbLight._m0[_2387].z + _397;
        float _2413 = inversesqrt(dot(vec3(_2407, _2408, _2409), vec3(_2407, _2408, _2409)));
        float _2414 = _2413 * _2407;
        float _2415 = _2413 * _2408;
        float _2416 = _2413 * _2409;
        float _2417 = dot(vec3(_303, _304, _305), vec3(cbLight._m0[_2387].xyz));
        float _4228 = isnan(0.0) ? _2417 : (isnan(_2417) ? 0.0 : max(_2417, 0.0));
        float _2420 = isnan(1.0) ? _4228 : (isnan(_4228) ? 1.0 : min(_4228, 1.0));
        float _2421 = dot(vec3(_303, _304, _305), vec3(_2414, _2415, _2416));
        float _4239 = isnan(0.0) ? _2421 : (isnan(_2421) ? 0.0 : max(_2421, 0.0));
        float _2424 = isnan(1.0) ? _4239 : (isnan(_4239) ? 1.0 : min(_4239, 1.0));
        float _2425 = dot(vec3(cbLight._m0[_2387].xyz), vec3(_2414, _2415, _2416));
        float _4250 = isnan(0.0) ? _2425 : (isnan(_2425) ? 0.0 : max(_2425, 0.0));
        float _2429 = _2406 * _2406;
        float _2433 = ((_2424 * _2424) * (_2429 + (-1.0))) + 1.0;
        float _2440 = exp2(log2(1.0 - (isnan(1.0) ? _4250 : (isnan(_4250) ? 1.0 : min(_4250, 1.0)))) * 5.0);
        float _2447 = 1.0 - _2406;
        float _2457 = (0.5 / (((_2074 * ((_2420 * _2447) + _2406)) + 9.9999999392252902907785028219223e-09) + (((_2074 * _2447) + _2406) * _2420))) * _2420;
        float _4261 = isnan(0.0) ? _2457 : (isnan(_2457) ? 0.0 : max(_2457, 0.0));
        float _2459 = (isnan(1.0) ? _4261 : (isnan(_4261) ? 1.0 : min(_4261, 1.0))) * (_2429 / ((_2433 * _2433) * 3.141590118408203125));
        float _2460 = isnan(1.0) ? _1813 : (isnan(_1813) ? 1.0 : min(_1813, 1.0));
        _2376 = (((((_2440 * _2096) + _470) * cbLight._m0[_2391].x) * _2459) * _2460) + _2266;
        _2378 = (((((_2440 * _2098) + _472) * cbLight._m0[_2391].y) * _2459) * _2460) + _2268;
        _2380 = (((((_2440 * _2099) + _473) * cbLight._m0[_2391].z) * _2459) * _2460) + _2270;
    }
    float _2525;
    float _2527;
    float _2529;
    float _2531;
    float _2533;
    float _2535;
    if (_1795.y == 0u)
    {
        uvec4 _2481 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2482 = _2481.x;
        uint _2493 = uint((float(_2481.y) * floor(float(uint(cbSceneParam._m0[85u].y * _404) / _2482))) + floor(float(uint(cbSceneParam._m0[85u].x * _403) / _2482)));
        float _2503 = (log2(_1573 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2504 = isnan(0.0) ? _2503 : (isnan(_2503) ? 0.0 : max(_2503, 0.0));
        uint _2507 = uint(isnan(14.0) ? _2504 : (isnan(_2504) ? 14.0 : min(_2504, 14.0)));
        uvec4 _2512 = texelFetch(g_lightClusterGridBuffer, int(((_2507 << 2u) + (_2493 << 6u)) >> 2u));
        uint _2513 = _2512.x;
        uint _2514 = _2481.z;
        float _2594;
        float _2596;
        float _2598;
        float _2600;
        float _2602;
        float _2604;
        if (((((1u << ((_2514 >> 4u) & 15u)) + 4294967295u) & _2513) == 0u) || ((_2514 & 240u) == 0u))
        {
            _2594 = 0.0;
            _2596 = 0.0;
            _2598 = 0.0;
            _2600 = 0.0;
            _2602 = 0.0;
            _2604 = 0.0;
        }
        else
        {
            float _2595;
            float _2597;
            float _2599;
            float _2601;
            float _2603;
            float _2605;
            float _2738 = 0.0;
            float _2739 = 0.0;
            float _2740 = 0.0;
            float _2741 = 0.0;
            float _2742 = 0.0;
            float _2743 = 0.0;
            uint _2744 = 0u;
            uint _2753;
            bool _2754;
            for (;;)
            {
                _2753 = texelFetch(g_lightClassification, int((((_2507 << 5u) + (_2493 << 9u)) + (_2744 << 2u)) >> 2u)).x;
                _2754 = _2753 == 0u;
                float frontier_phi_70_pred;
                float frontier_phi_70_pred_1;
                float frontier_phi_70_pred_2;
                float frontier_phi_70_pred_3;
                float frontier_phi_70_pred_4;
                float frontier_phi_70_pred_5;
                if (_2754)
                {
                    frontier_phi_70_pred = _2743;
                    frontier_phi_70_pred_1 = _2742;
                    frontier_phi_70_pred_2 = _2741;
                    frontier_phi_70_pred_3 = _2739;
                    frontier_phi_70_pred_4 = _2738;
                    frontier_phi_70_pred_5 = _2740;
                }
                else
                {
                    float _2862;
                    float _2863;
                    float _2864;
                    float _2865;
                    float _2866;
                    float _2867;
                    uint _2868;
                    _2862 = _2738;
                    _2863 = _2739;
                    _2864 = _2740;
                    _2865 = _2741;
                    _2866 = _2742;
                    _2867 = _2743;
                    _2868 = _2753;
                    float _2794;
                    float _2795;
                    float _2796;
                    float _2797;
                    float _2798;
                    float _2799;
                    for (;;)
                    {
                        uint _2872 = uint(findLSB(_2868)) + (_2744 << 5u);
                        uint _2869 = (_2868 + 4294967295u) & _2868;
                        uint _2874 = _2872 * 48u;
                        vec4 _2888 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2874)).x, texelFetch(g_PointLightRenderingBuffer, int(_2874 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2874 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2874 + 3u)).x));
                        uint _2894 = (_2872 * 48u) + 4u;
                        vec4 _2907 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2894)).x, texelFetch(g_PointLightRenderingBuffer, int(_2894 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2894 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2894 + 3u)).x));
                        uint _2913 = (_2872 * 48u) + 8u;
                        vec3 _2924 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2913)).x, texelFetch(g_PointLightRenderingBuffer, int(_2913 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2913 + 2u)).x));
                        float _2928 = _2888.x - _1571;
                        float _2929 = _2888.y - _1572;
                        float _2930 = _2888.z - _1573;
                        float _2931 = dot(vec3(_2928, _2929, _2930), vec3(_2928, _2929, _2930));
                        float _2934 = inversesqrt(_2931);
                        float _2935 = _2934 * _2928;
                        float _2936 = _2934 * _2929;
                        float _2937 = _2934 * _2930;
                        float _2938 = dot(vec3(_425, _428, _431), vec3(_2935, _2936, _2937));
                        float _2943 = 1.0 - (_2931 * _2888.w);
                        float _4287 = isnan(0.0) ? _2943 : (isnan(_2943) ? 0.0 : max(_2943, 0.0));
                        float _2944 = isnan(1.0) ? _4287 : (isnan(_4287) ? 1.0 : min(_4287, 1.0));
                        float _2945 = sqrt(_2931) * _2907.w;
                        float _2948 = 1.39999997615814208984375 / (_2945 + 1.39999997615814208984375);
                        float _2949 = _2948 * _2948;
                        float _2952 = ((1.0 - _2949) * _2938) + _2949;
                        float _2955 = _2945 * _2945;
                        float _2959 = ((isnan(0.0) ? _2952 : (isnan(_2952) ? 0.0 : max(_2952, 0.0))) * _2944) / ((_2955 * 0.699999988079071044921875) + 1.0);
                        float _2963 = (-0.0) - _1571;
                        float _2964 = (-0.0) - _1572;
                        float _2965 = (-0.0) - _1573;
                        float _2969 = inversesqrt(dot(vec3(_2963, _2964, _2965), vec3(_2963, _2964, _2965)));
                        float _2970 = _2969 * _2963;
                        float _2971 = _2969 * _2964;
                        float _2972 = _2969 * _2965;
                        float _2979 = exp2(log2(1.0 / ((_2955 * 3.5) + 5.0)) * 0.25);
                        float _2980 = 1.0 - _501;
                        float _2987 = sqrt(1.0 - ((1.0 - (_2980 * _2980)) * (1.0 - (_2979 * _2979))));
                        float _2988 = _2987 * _2987;
                        float _2989 = _2988 * _2988;
                        float _2990 = _2970 + _2935;
                        float _2991 = _2971 + _2936;
                        float _2992 = _2972 + _2937;
                        float _2996 = inversesqrt(dot(vec3(_2990, _2991, _2992), vec3(_2990, _2991, _2992)));
                        float _3000 = dot(vec3(_425, _428, _431), vec3(_2970, _2971, _2972));
                        float _4303 = isnan(0.0) ? _3000 : (isnan(_3000) ? 0.0 : max(_3000, 0.0));
                        float _3003 = isnan(1.0) ? _4303 : (isnan(_4303) ? 1.0 : min(_4303, 1.0));
                        float _3004 = dot(vec3(_425, _428, _431), vec3(_2996 * _2990, _2996 * _2991, _2996 * _2992));
                        float _4314 = isnan(0.0) ? _3004 : (isnan(_3004) ? 0.0 : max(_3004, 0.0));
                        float _3007 = isnan(1.0) ? _4314 : (isnan(_4314) ? 1.0 : min(_4314, 1.0));
                        float _3011 = ((_3007 * _3007) * (_2989 + (-1.0))) + 1.0;
                        float _3012 = _2948 * _2988;
                        float _3013 = _3012 * _3012;
                        float _3016 = ((1.0 - _3013) * _2938) + _3013;
                        float _4325 = isnan(0.0) ? _3016 : (isnan(_3016) ? 0.0 : max(_3016, 0.0));
                        float _3017 = isnan(1.0) ? _4325 : (isnan(_4325) ? 1.0 : min(_4325, 1.0));
                        float _3018 = 1.0 - _2988;
                        float _3028 = (0.5 / (((_3017 * ((_3003 * _3018) + _2988)) + 9.9999999392252902907785028219223e-09) + (((_3017 * _3018) + _2988) * _3003))) * _3017;
                        float _4336 = isnan(0.0) ? _3028 : (isnan(_3028) ? 0.0 : max(_3028, 0.0));
                        float _3039 = (((_2989 * 3.1415927410125732421875) * (isnan(1.0) ? _4336 : (isnan(_4336) ? 1.0 : min(_4336, 1.0)))) / ((_3011 * _3011) * ((_2955 * 2.1991131305694580078125) + 3.141590118408203125))) * _2944;
                        _2797 = (_2959 * _2907.x) + _2865;
                        _2798 = (_2959 * _2907.y) + _2866;
                        _2799 = (_2959 * _2907.z) + _2867;
                        _2794 = (_3039 * _2924.x) + _2862;
                        _2795 = (_3039 * _2924.y) + _2863;
                        _2796 = (_3039 * _2924.z) + _2864;
                        if (_2869 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2862 = _2794;
                            _2863 = _2795;
                            _2864 = _2796;
                            _2865 = _2797;
                            _2866 = _2798;
                            _2867 = _2799;
                            _2868 = _2869;
                        }
                    }
                    frontier_phi_70_pred = _2799;
                    frontier_phi_70_pred_1 = _2798;
                    frontier_phi_70_pred_2 = _2797;
                    frontier_phi_70_pred_3 = _2795;
                    frontier_phi_70_pred_4 = _2794;
                    frontier_phi_70_pred_5 = _2796;
                }
                _2605 = frontier_phi_70_pred;
                _2603 = frontier_phi_70_pred_1;
                _2601 = frontier_phi_70_pred_2;
                _2597 = frontier_phi_70_pred_3;
                _2595 = frontier_phi_70_pred_4;
                _2599 = frontier_phi_70_pred_5;
                uint _2745 = _2744 + 1u;
                if (_2745 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2738 = _2595;
                    _2739 = _2597;
                    _2740 = _2599;
                    _2741 = _2601;
                    _2742 = _2603;
                    _2743 = _2605;
                    _2744 = _2745;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2594 = _2595;
            _2596 = _2597;
            _2598 = _2599;
            _2600 = _2601;
            _2602 = _2603;
            _2604 = _2605;
        }
        uvec4 _2608 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2609 = _2608.z;
        uint _2611 = (_2609 >> 8u) & 15u;
        float _2706;
        float _2708;
        float _2710;
        float _2712;
        float _2714;
        float _2716;
        if (((4294967295u << _2611) & _2513) == 0u)
        {
            _2706 = _2594;
            _2708 = _2596;
            _2710 = _2598;
            _2712 = _2600;
            _2714 = _2602;
            _2716 = _2604;
        }
        else
        {
            float _2731 = inversesqrt(dot(vec3(_1571, _1572, _1573), vec3(_1571, _1572, _1573)));
            float _2732 = _2731 * _1571;
            float _2733 = _2731 * _1572;
            float _2734 = _2731 * _1573;
            float frontier_phi_64_65_ladder;
            float frontier_phi_64_65_ladder_1;
            float frontier_phi_64_65_ladder_2;
            float frontier_phi_64_65_ladder_3;
            float frontier_phi_64_65_ladder_4;
            float frontier_phi_64_65_ladder_5;
            if (_2611 < ((_2609 >> 12u) & 15u))
            {
                float _2707;
                float _2709;
                float _2711;
                float _2713;
                float _2715;
                float _2717;
                float _2845 = _2594;
                float _2846 = _2596;
                float _2847 = _2598;
                float _2848 = _2600;
                float _2849 = _2602;
                float _2850 = _2604;
                uint _2851 = _2611;
                uint _2860;
                bool _2861;
                for (;;)
                {
                    _2860 = texelFetch(g_lightClassification, int((((_2507 << 5u) + (_2493 << 9u)) + (_2851 << 2u)) >> 2u)).x;
                    _2861 = _2860 == 0u;
                    float frontier_phi_76_pred;
                    float frontier_phi_76_pred_1;
                    float frontier_phi_76_pred_2;
                    float frontier_phi_76_pred_3;
                    float frontier_phi_76_pred_4;
                    float frontier_phi_76_pred_5;
                    if (_2861)
                    {
                        frontier_phi_76_pred = _2847;
                        frontier_phi_76_pred_1 = _2846;
                        frontier_phi_76_pred_2 = _2845;
                        frontier_phi_76_pred_3 = _2850;
                        frontier_phi_76_pred_4 = _2849;
                        frontier_phi_76_pred_5 = _2848;
                    }
                    else
                    {
                        float _3044;
                        float _3045;
                        float _3046;
                        float _3047;
                        float _3048;
                        float _3049;
                        float _3340;
                        float _3341;
                        float _3342;
                        float _3343;
                        float _3344;
                        float _3345;
                        float _3057 = _2845;
                        float _3058 = _2846;
                        float _3059 = _2847;
                        float _3060 = _2848;
                        float _3061 = _2849;
                        float _3062 = _2850;
                        uint _3063 = _2860;
                        uint _3064;
                        vec4 _3089;
                        float _3090;
                        vec4 _3105;
                        vec3 _3117;
                        vec4 _3133;
                        vec4 _3149;
                        float _3196;
                        bool _3197;
                        for (;;)
                        {
                            uint _3074 = ((_2851 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3063));
                            _3064 = (_3063 + 4294967295u) & _3063;
                            uint _3076 = _3074 * 40u;
                            _3089 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3076)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3076 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3076 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3076 + 3u)).x));
                            _3090 = _3089.w;
                            uint _3092 = (_3074 * 40u) + 4u;
                            _3105 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3092)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3092 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3092 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3092 + 3u)).x));
                            uint _3107 = (_3074 * 40u) + 8u;
                            _3117 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3107)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3107 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3107 + 2u)).x));
                            uint _3120 = (_3074 * 40u) + 16u;
                            _3133 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3120)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3120 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3120 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3120 + 3u)).x));
                            uint _3136 = (_3074 * 40u) + 20u;
                            _3149 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3136)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3136 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3136 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3136 + 3u)).x));
                            uint _3152 = (_3074 * 40u) + 24u;
                            vec4 _3165 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3152)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3152 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3152 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3152 + 3u)).x));
                            uint _3171 = (_3074 * 40u) + 28u;
                            vec4 _3184 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3171)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3171 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3171 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3171 + 3u)).x));
                            _3196 = fma(_1573, _3184.z, fma(_1572, _3184.y, _3184.x * _1571)) + _3184.w;
                            _3197 = !((fma(_1573, _3165.z, fma(_1572, _3165.y, _3165.x * _1571)) + _3165.w) <= 0.0);
                            float frontier_phi_82_pred;
                            float frontier_phi_82_pred_1;
                            float frontier_phi_82_pred_2;
                            float frontier_phi_82_pred_3;
                            float frontier_phi_82_pred_4;
                            float frontier_phi_82_pred_5;
                            if (_3197)
                            {
                                float _3224 = _3089.x - _1571;
                                float _3225 = _3089.y - _1572;
                                float _3226 = _3089.z - _1573;
                                float _3227 = dot(vec3(_3224, _3225, _3226), vec3(_3224, _3225, _3226));
                                float _3230 = inversesqrt(_3227);
                                float _3231 = _3230 * _3224;
                                float _3232 = _3230 * _3225;
                                float _3233 = _3230 * _3226;
                                float _3237 = 1.0 - (_3227 / (_3090 * _3090));
                                float _4347 = isnan(0.0) ? _3237 : (isnan(_3237) ? 0.0 : max(_3237, 0.0));
                                float _3238 = isnan(1.0) ? _4347 : (isnan(_4347) ? 1.0 : min(_4347, 1.0));
                                float _3242 = sqrt(_3227) * _3105.w;
                                float _3244 = 1.39999997615814208984375 / (_3242 + 1.39999997615814208984375);
                                float _3245 = _3244 * _3244;
                                float _3248 = ((1.0 - _3245) * dot(vec3(_3231, _3232, _3233), vec3(_425, _428, _431))) + _3245;
                                float _3251 = _3242 * _3242;
                                float _3255 = (fma(_1573, _3133.z, fma(_1572, _3133.y, _3133.x * _1571)) + _3133.w) / _3196;
                                float _3256 = (fma(_1573, _3149.z, fma(_1572, _3149.y, _3149.x * _1571)) + _3149.w) / _3196;
                                float _3260 = 1.0 - dot(vec2(_3255, _3256), vec2(_3255, _3256));
                                float _4363 = isnan(0.0) ? _3260 : (isnan(_3260) ? 0.0 : max(_3260, 0.0));
                                float _3261 = isnan(1.0) ? _4363 : (isnan(_4363) ? 1.0 : min(_4363, 1.0));
                                float _3262 = _3261 * (((isnan(0.0) ? _3248 : (isnan(_3248) ? 0.0 : max(_3248, 0.0))) * _3238) / ((_3251 * 0.699999988079071044921875) + 1.0));
                                float _3274 = exp2(log2(1.0 / ((_3251 * 3.5) + 5.0)) * 0.25);
                                float _3275 = 1.0 - _501;
                                float _3282 = sqrt(1.0 - ((1.0 - (_3275 * _3275)) * (1.0 - (_3274 * _3274))));
                                float _3283 = _3282 * _3282;
                                float _3284 = _3283 * _3283;
                                float _3285 = _3231 - _2732;
                                float _3286 = _3232 - _2733;
                                float _3287 = _3233 - _2734;
                                float _3291 = inversesqrt(dot(vec3(_3285, _3286, _3287), vec3(_3285, _3286, _3287)));
                                float _3295 = dot(vec3(_425, _428, _431), vec3((-0.0) - _2732, (-0.0) - _2733, (-0.0) - _2734));
                                float _4374 = isnan(0.0) ? _3295 : (isnan(_3295) ? 0.0 : max(_3295, 0.0));
                                float _3298 = isnan(1.0) ? _4374 : (isnan(_4374) ? 1.0 : min(_4374, 1.0));
                                float _3299 = dot(vec3(_425, _428, _431), vec3(_3291 * _3285, _3291 * _3286, _3291 * _3287));
                                float _4385 = isnan(0.0) ? _3299 : (isnan(_3299) ? 0.0 : max(_3299, 0.0));
                                float _3302 = isnan(1.0) ? _4385 : (isnan(_4385) ? 1.0 : min(_4385, 1.0));
                                float _3306 = ((_3302 * _3302) * (_3284 + (-1.0))) + 1.0;
                                float _3307 = _3244 * _3283;
                                float _3308 = _3307 * _3307;
                                float _3314 = ((1.0 - _3308) * dot(vec3(_425, _428, _431), vec3(_3231, _3232, _3233))) + _3308;
                                float _4396 = isnan(0.0) ? _3314 : (isnan(_3314) ? 0.0 : max(_3314, 0.0));
                                float _3315 = isnan(1.0) ? _4396 : (isnan(_4396) ? 1.0 : min(_4396, 1.0));
                                float _3316 = 1.0 - _3283;
                                float _3326 = (0.5 / (((_3315 * ((_3298 * _3316) + _3283)) + 9.9999999392252902907785028219223e-09) + (((_3315 * _3316) + _3283) * _3298))) * _3315;
                                float _4407 = isnan(0.0) ? _3326 : (isnan(_3326) ? 0.0 : max(_3326, 0.0));
                                float _3336 = (_3261 * _3238) * (((_3284 * 3.1415927410125732421875) * (isnan(1.0) ? _4407 : (isnan(_4407) ? 1.0 : min(_4407, 1.0)))) / ((_3306 * _3306) * ((_3251 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_82_pred = _3336 * _3117.z;
                                frontier_phi_82_pred_1 = _3336 * _3117.y;
                                frontier_phi_82_pred_2 = _3336 * _3117.x;
                                frontier_phi_82_pred_3 = _3262 * _3105.z;
                                frontier_phi_82_pred_4 = _3262 * _3105.y;
                                frontier_phi_82_pred_5 = _3262 * _3105.x;
                            }
                            else
                            {
                                frontier_phi_82_pred = 0.0;
                                frontier_phi_82_pred_1 = 0.0;
                                frontier_phi_82_pred_2 = 0.0;
                                frontier_phi_82_pred_3 = 0.0;
                                frontier_phi_82_pred_4 = 0.0;
                                frontier_phi_82_pred_5 = 0.0;
                            }
                            _3342 = frontier_phi_82_pred;
                            _3341 = frontier_phi_82_pred_1;
                            _3340 = frontier_phi_82_pred_2;
                            _3345 = frontier_phi_82_pred_3;
                            _3344 = frontier_phi_82_pred_4;
                            _3343 = frontier_phi_82_pred_5;
                            _3047 = _3343 + _3060;
                            _3048 = _3344 + _3061;
                            _3049 = _3345 + _3062;
                            _3044 = _3340 + _3057;
                            _3045 = _3341 + _3058;
                            _3046 = _3342 + _3059;
                            if (_3064 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3057 = _3044;
                                _3058 = _3045;
                                _3059 = _3046;
                                _3060 = _3047;
                                _3061 = _3048;
                                _3062 = _3049;
                                _3063 = _3064;
                                continue;
                            }
                        }
                        frontier_phi_76_pred = _3046;
                        frontier_phi_76_pred_1 = _3045;
                        frontier_phi_76_pred_2 = _3044;
                        frontier_phi_76_pred_3 = _3049;
                        frontier_phi_76_pred_4 = _3048;
                        frontier_phi_76_pred_5 = _3047;
                    }
                    _2711 = frontier_phi_76_pred;
                    _2709 = frontier_phi_76_pred_1;
                    _2707 = frontier_phi_76_pred_2;
                    _2717 = frontier_phi_76_pred_3;
                    _2715 = frontier_phi_76_pred_4;
                    _2713 = frontier_phi_76_pred_5;
                    uint _2852 = _2851 + 1u;
                    if (_2852 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2845 = _2707;
                        _2846 = _2709;
                        _2847 = _2711;
                        _2848 = _2713;
                        _2849 = _2715;
                        _2850 = _2717;
                        _2851 = _2852;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_64_65_ladder = _2715;
                frontier_phi_64_65_ladder_1 = _2713;
                frontier_phi_64_65_ladder_2 = _2711;
                frontier_phi_64_65_ladder_3 = _2717;
                frontier_phi_64_65_ladder_4 = _2709;
                frontier_phi_64_65_ladder_5 = _2707;
            }
            else
            {
                frontier_phi_64_65_ladder = _2602;
                frontier_phi_64_65_ladder_1 = _2600;
                frontier_phi_64_65_ladder_2 = _2598;
                frontier_phi_64_65_ladder_3 = _2604;
                frontier_phi_64_65_ladder_4 = _2596;
                frontier_phi_64_65_ladder_5 = _2594;
            }
            _2706 = frontier_phi_64_65_ladder_5;
            _2708 = frontier_phi_64_65_ladder_4;
            _2710 = frontier_phi_64_65_ladder_2;
            _2712 = frontier_phi_64_65_ladder_1;
            _2714 = frontier_phi_64_65_ladder;
            _2716 = frontier_phi_64_65_ladder_3;
        }
        float _2721 = isnan(1.0) ? _485 : (isnan(_485) ? 1.0 : min(_485, 1.0));
        _2525 = (_2721 * _2712) + _2038;
        _2527 = (_2721 * _2714) + _2040;
        _2529 = (_2721 * _2716) + _2042;
        _2531 = ((_2706 * _470) * _2721) + _2376;
        _2533 = ((_2708 * _472) * _2721) + _2378;
        _2535 = ((_2710 * _473) * _2721) + _2380;
    }
    else
    {
        _2525 = _2038;
        _2527 = _2040;
        _2529 = _2042;
        _2531 = _2376;
        _2533 = _2378;
        _2535 = _2380;
    }
    float _4423 = isnan(0.0) ? _460 : (isnan(_460) ? 0.0 : max(_460, 0.0));
    float _4434 = isnan(0.0) ? _461 : (isnan(_461) ? 0.0 : max(_461, 0.0));
    float _4445 = isnan(0.0) ? _462 : (isnan(_462) ? 0.0 : max(_462, 0.0));
    float _4456 = isnan(0.0) ? _306 : (isnan(_306) ? 0.0 : max(_306, 0.0));
    float _2560 = cbInstanceData._m0[_444 + 6u].w * (isnan(1.0) ? _4456 : (isnan(_4456) ? 1.0 : min(_4456, 1.0)));
    float _2565 = _403 / cbSceneParam._m0[86u].x;
    float _2566 = _404 / cbSceneParam._m0[86u].y;
    vec4 _2580 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2565, _2566, (log2((isnan(cbSceneParam._m0[77u].w) ? _335 : (isnan(_335) ? cbSceneParam._m0[77u].w : min(_335, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2582 = _2580.x;
    float _2583 = _2580.y;
    float _2584 = _2580.z;
    float _2585 = _2580.w;
    float _2656;
    float _2658;
    float _2660;
    float _2662;
    if (_335 > cbSceneParam._m0[78u].w)
    {
        float _2619 = isnan(_335) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _335 : min(cbSceneParam._m0[80u].w, _335));
        float _2620 = _2619 / _335;
        float _2631 = _2620 * _388;
        float _2632 = _389 * _2620;
        float _2633 = (-0.0) - _2632;
        float _2634 = _2620 * _390;
        float _2636 = (cbSceneParam._m0[77u].w * _2633) / _2619;
        float _2637 = _2636 + cbSceneParam._m0[79u].w;
        float _2638 = cbSceneParam._m0[79u].w - _2632;
        float _2644 = sqrt(((_2631 * _2631) + (_2632 * _2632)) + (_2634 * _2634));
        float _2647 = (1.0 - (cbSceneParam._m0[77u].w / _2619)) * _2644;
        float _2652 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2654 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2807;
        if (abs((_2633 - _2636) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2807 = ((((_2637 > 0.0) ? exp2(_2652 * _2637) : (2.0 - exp2(_2654 * _2637))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2647;
        }
        else
        {
            float _2767 = 1.0 / cbSceneParam._m0[80u].x;
            float _2768 = isnan(_2638) ? _2637 : (isnan(_2637) ? _2638 : max(_2637, _2638));
            float _2769 = isnan(_2638) ? _2637 : (isnan(_2637) ? _2638 : min(_2637, _2638));
            float _2778 = isnan(0.0) ? _2768 : (isnan(_2768) ? 0.0 : min(_2768, 0.0));
            float _2779 = isnan(0.0) ? _2769 : (isnan(_2769) ? 0.0 : min(_2769, 0.0));
            _2807 = ((abs(_2644 / _2633) * cbSceneParam._m0[80u].y) * ((((_2778 - _2779) * 2.0) - ((exp2(_2652 * (isnan(0.0) ? _2768 : (isnan(_2768) ? 0.0 : max(_2768, 0.0)))) - exp2(_2652 * (isnan(0.0) ? _2769 : (isnan(_2769) ? 0.0 : max(_2769, 0.0))))) * _2767)) - ((exp2(_2654 * _2778) - exp2(_2654 * _2779)) * _2767))) + (_2647 * cbSceneParam._m0[80u].z);
        }
        vec4 _2809 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2565, _2566, 1.0), 0.0);
        float _2818 = exp2((_2807 * (-1.44269502162933349609375)) * (1.0 - _2809.w));
        float _2819 = log2(_2818);
        float _2835 = log2(_2585);
        _2656 = (exp2(_2835 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2819 * cbSceneParam._m0[78u].x)) * _2809.x) / cbSceneParam._m0[78u].x)) + _2582;
        _2658 = (exp2(_2835 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2819 * cbSceneParam._m0[78u].y)) * _2809.y) / cbSceneParam._m0[78u].y)) + _2583;
        _2660 = (exp2(_2835 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2819 * cbSceneParam._m0[78u].z)) * _2809.z) / cbSceneParam._m0[78u].z)) + _2584;
        _2662 = _2818 * _2585;
    }
    else
    {
        _2656 = _2582;
        _2658 = _2583;
        _2660 = _2584;
        _2662 = _2585;
    }
    float _2674 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2675 = _2674 == 3.0;
    float _2676 = log2(_2662);
    float _2683 = exp2(_2676 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4423 : (isnan(_4423) ? 1.0 : min(_4423, 1.0))) * (_2525 + ((isnan(0.0) ? _1219 : (isnan(_1219) ? 0.0 : max(_1219, 0.0))) * _485))) + ((_2531 + ((isnan(0.0) ? _1517 : (isnan(_1517) ? 0.0 : max(_1517, 0.0))) * _1298)) * cbPerFrame._m0[3u].x));
    float _2684 = exp2(_2676 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4434 : (isnan(_4434) ? 1.0 : min(_4434, 1.0))) * (_2527 + ((isnan(0.0) ? _1222 : (isnan(_1222) ? 0.0 : max(_1222, 0.0))) * _485))) + ((_2533 + ((isnan(0.0) ? _1520 : (isnan(_1520) ? 0.0 : max(_1520, 0.0))) * _1298)) * cbPerFrame._m0[3u].x));
    float _2685 = exp2(_2676 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4445 : (isnan(_4445) ? 1.0 : min(_4445, 1.0))) * (_2529 + ((isnan(0.0) ? _1225 : (isnan(_1225) ? 0.0 : max(_1225, 0.0))) * _485))) + ((_2535 + ((isnan(0.0) ? _1523 : (isnan(_1523) ? 0.0 : max(_1523, 0.0))) * _1298)) * cbPerFrame._m0[3u].x));
    float _2694 = (_2674 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2694 * (_2675 ? _2683 : (_2683 + (cbSceneParam._m0[72u].w * _2656)));
    SV_Target.y = _2694 * (_2675 ? _2684 : (_2684 + (cbSceneParam._m0[72u].w * _2658)));
    SV_Target.z = _2694 * (_2675 ? _2685 : (_2685 + (cbSceneParam._m0[72u].w * _2660)));
    SV_Target.w = _2560;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2560;
    discard_exit();
}


