#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[10];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D SLOD_CrossBillboard_SAT_PivotAnim_snp_0_Texture2D_17;
layout(set = 0, binding = 1) uniform texture2D SLOD_CrossBillboard_SAT_PivotAnim_snp_0_Texture2D_18;
layout(set = 0, binding = 2) uniform texture2D SLOD_CrossBillboard_SAT_PivotAnim_snp_0_Texture2D_19;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in float TEXCOORD;
layout(location = 4, component = 1) in float TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 4, component = 2) in float TEXCOORD_12;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _859;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _184 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _185 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _186 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _192 = inversesqrt(dot(vec3(_184, _185, _186), vec3(_184, _185, _186)));
    float _199 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _200 = _199 * NORMAL.x;
    float _201 = _199 * NORMAL.y;
    float _202 = _199 * NORMAL.z;
    float _206 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _214;
    float _215;
    float _216;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _214 = (-0.0) - _200;
        _215 = (-0.0) - _201;
        _216 = (-0.0) - _202;
    }
    else
    {
        _214 = _200;
        _215 = _201;
        _216 = _202;
    }
    vec4 _230 = texture(sampler2D(SLOD_CrossBillboard_SAT_PivotAnim_snp_0_Texture2D_17, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1) + cbTextureTilingScale._m0[0u].w));
    float _236 = _230.w;
    float _237 = 1.0 / _236;
    float _239 = _230.x * _237;
    float _240 = _237 * _230.y;
    float _241 = _237 * _230.z;
    vec4 _253 = texture(sampler2D(SLOD_CrossBillboard_SAT_PivotAnim_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1) + cbTextureTilingScale._m0[1u].w));
    float _256 = _253.x * _237;
    vec4 _268 = texture(sampler2D(SLOD_CrossBillboard_SAT_PivotAnim_snp_0_Texture2D_19, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1) + cbTextureTilingScale._m0[2u].w));
    float _276 = (_268.x * 2.0) + (-1.0);
    float _278 = (_268.y * 2.0) + (-1.0);
    float _279 = dot(vec2(_276, _278), vec2(_276, _278));
    float _3208 = isnan(0.0) ? _279 : (isnan(_279) ? 0.0 : max(_279, 0.0));
    float _284 = sqrt(1.0 - (isnan(1.0) ? _3208 : (isnan(_3208) ? 1.0 : min(_3208, 1.0))));
    float _285 = _268.z * _237;
    float _288 = fma(_284, _214, fma(_278, _206 * TANGENT.x, (_192 * _184) * _276));
    float _291 = fma(_284, _215, fma(_278, _206 * TANGENT.y, (_192 * _185) * _276));
    float _294 = fma(_284, _216, fma(_278, _206 * TANGENT.z, (_192 * _186) * _276));
    float _298 = inversesqrt(dot(vec3(_288, _291, _294), vec3(_288, _291, _294)));
    float _299 = _298 * _288;
    float _300 = _298 * _291;
    float _301 = _298 * _294;
    float _3219 = isnan(0.0) ? _236 : (isnan(_236) ? 0.0 : max(_236, 0.0));
    float _302 = isnan(1.0) ? _3219 : (isnan(_3219) ? 1.0 : min(_3219, 1.0));
    float _3230 = isnan(0.0) ? _285 : (isnan(_285) ? 0.0 : max(_285, 0.0));
    float _303 = isnan(1.0) ? _3230 : (isnan(_3230) ? 1.0 : min(_3230, 1.0));
    float _3241 = isnan(0.0) ? _239 : (isnan(_239) ? 0.0 : max(_239, 0.0));
    float _3252 = isnan(0.0) ? _240 : (isnan(_240) ? 0.0 : max(_240, 0.0));
    float _3263 = isnan(0.0) ? _241 : (isnan(_241) ? 0.0 : max(_241, 0.0));
    float _3274 = isnan(0.0) ? _256 : (isnan(_256) ? 0.0 : max(_256, 0.0));
    float _307 = isnan(1.0) ? _3274 : (isnan(_3274) ? 1.0 : min(_3274, 1.0));
    if (!(!(texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125)).w > TEXCOORD_12)))
    {
        discard_state = true;
    }
    float _331 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _374 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _384 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _374);
    float _385 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _374);
    float _386 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _374);
    float _390 = inversesqrt(dot(vec3(_384, _385, _386), vec3(_384, _385, _386)));
    float _391 = _384 * _390;
    float _392 = _385 * _390;
    float _393 = _386 * _390;
    float _399 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _400 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _421 = fma(_301, cbSceneParam._m0[5u].z, fma(_300, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _299));
    float _424 = fma(_301, cbSceneParam._m0[6u].z, fma(_300, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _299));
    float _427 = fma(_301, cbSceneParam._m0[7u].z, fma(_300, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _299));
    uint _440 = uint(roundEven(NORMAL.w)) * 13u;
    uint _443 = (_440 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _449 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3241 : (isnan(_3241) ? 1.0 : min(_3241, 1.0)))) * cbInstanceData._m0[_443].x;
    float _450 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3252 : (isnan(_3252) ? 1.0 : min(_3252, 1.0)))) * cbInstanceData._m0[_443].y;
    float _451 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3263 : (isnan(_3263) ? 1.0 : min(_3263, 1.0)))) * cbInstanceData._m0[_443].z;
    float _3285 = isnan(0.0) ? _449 : (isnan(_449) ? 0.0 : max(_449, 0.0));
    float _452 = isnan(1.0) ? _3285 : (isnan(_3285) ? 1.0 : min(_3285, 1.0));
    float _3296 = isnan(0.0) ? _450 : (isnan(_450) ? 0.0 : max(_450, 0.0));
    float _453 = isnan(1.0) ? _3296 : (isnan(_3296) ? 1.0 : min(_3296, 1.0));
    float _3307 = isnan(0.0) ? _451 : (isnan(_451) ? 0.0 : max(_451, 0.0));
    float _454 = isnan(1.0) ? _3307 : (isnan(_3307) ? 1.0 : min(_3307, 1.0));
    float _455 = 1.0 - _307;
    float _456 = _452 * _455;
    float _457 = _453 * _455;
    float _458 = _454 * _455;
    float _463 = (_452 + (-0.039999999105930328369140625)) * _307;
    float _464 = (_453 + (-0.039999999105930328369140625)) * _307;
    float _465 = (_454 + (-0.039999999105930328369140625)) * _307;
    float _466 = _463 + 0.039999999105930328369140625;
    float _468 = _464 + 0.039999999105930328369140625;
    float _469 = _465 + 0.039999999105930328369140625;
    vec4 _478 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _399, cbSceneParam._m0[86u].y * _400));
    float _481 = _478.x * TEXCOORD_3.w;
    float _482 = dot(vec3(_299, _300, _301), vec3(_391, _392, _393));
    float _485 = _482 * 2.0;
    float _489 = (_485 * _299) - _391;
    float _490 = (_485 * _300) - _392;
    float _491 = (_485 * _301) - _393;
    float _495 = abs(dot(vec3(_391, _392, _393), vec3(_299, _300, _301)));
    float _3318 = isnan(0.0) ? _495 : (isnan(_495) ? 0.0 : max(_495, 0.0));
    float _497 = sqrt(_303);
    float _510 = exp2((_497 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3318 : (isnan(_3318) ? 1.0 : min(_3318, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_497 * 3.0));
    float _516 = (1.0 - _510) * ((_497 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _517 = _510 * _497;
    float _545 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _549 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _553 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _858;
    float _860;
    float _861;
    float _862;
    float _863;
    float _864;
    float _865;
    float _866;
    float _867;
    float _868;
    float _869;
    float _870;
    float _871;
    float _872;
    float _873;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _583 = fma(_553, cbModelParam._m0[26u].z, fma(_549, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _545));
        float _587 = fma(_553, cbModelParam._m0[27u].z, fma(_549, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _545));
        float _591 = fma(_553, cbModelParam._m0[28u].z, fma(_549, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _545));
        float _616 = _545 + _299;
        float _617 = _549 + _300;
        float _618 = _553 + _301;
        float _628 = fma(_618, cbModelParam._m0[26u].z, fma(_617, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _616)) - _583;
        float _629 = fma(_618, cbModelParam._m0[27u].z, fma(_617, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _616)) - _587;
        float _630 = fma(_618, cbModelParam._m0[28u].z, fma(_617, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _616)) - _591;
        float _634 = inversesqrt(dot(vec3(_628, _629, _630), vec3(_628, _629, _630)));
        float _647 = ((_634 * _628) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_583 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _648 = ((_634 * _629) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_587 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _649 = ((_634 * _630) / cbModelParam._m0[34u].z) + ((((((_591 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _652 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_647, _648, _649), 0.0);
        vec4 _659 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_647, _648, _649), 0.0);
        vec4 _666 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_647, _648, _649), 0.0);
        vec4 _673 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_647, _648, _649), 0.0);
        float _686 = exp2((_652.w + (-0.5)) * 20.0) * 2.0;
        float _687 = _686 * (_652.x + (-0.5));
        float _688 = _686 * (_652.y + (-0.5));
        float _689 = _686 * (_652.z + (-0.5));
        float _696 = exp2((_659.w + (-0.5)) * 20.0) * 2.0;
        float _697 = _696 * (_659.x + (-0.5));
        float _698 = _696 * (_659.y + (-0.5));
        float _699 = _696 * (_659.z + (-0.5));
        float _706 = exp2((_666.w + (-0.5)) * 20.0) * 2.0;
        float _707 = _706 * (_666.x + (-0.5));
        float _708 = _706 * (_666.y + (-0.5));
        float _709 = _706 * (_666.z + (-0.5));
        float _716 = exp2((_673.w + (-0.5)) * 20.0) * 2.0;
        float _717 = _716 * (_673.x + (-0.5));
        float _718 = _716 * (_673.y + (-0.5));
        float _719 = _716 * (_673.z + (-0.5));
        float _720 = isnan(0.0) ? _717 : (isnan(_717) ? 0.0 : max(_717, 0.0));
        float _721 = isnan(0.0) ? _718 : (isnan(_718) ? 0.0 : max(_718, 0.0));
        float _722 = isnan(0.0) ? _719 : (isnan(_719) ? 0.0 : max(_719, 0.0));
        float _723 = _687 * 0.5;
        float _724 = _697 * 0.5;
        float _725 = _707 * 0.5;
        float _726 = dot(vec3(_723, _724, _725), vec3(_723, _724, _725));
        float _731 = (_726 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_726);
        float _740 = (dot(vec3(_299, _300, _301), vec3(_731 * _723, _731 * _724, _731 * _725)) + 1.0) * 0.5;
        float _3344 = isnan(0.0) ? _740 : (isnan(_740) ? 0.0 : max(_740, 0.0));
        float _750 = sqrt(((_724 * _724) + (_723 * _723)) + (_725 * _725)) / (_720 + 9.9999997473787516355514526367188e-06);
        float _3355 = isnan(0.0) ? _750 : (isnan(_750) ? 0.0 : max(_750, 0.0));
        float _751 = isnan(1.0) ? _3355 : (isnan(_3355) ? 1.0 : min(_3355, 1.0));
        float _752 = _751 * 2.0;
        float _756 = (1.0 - _751) / (_751 + 1.0);
        float _3366 = isnan(0.0) ? _756 : (isnan(_756) ? 0.0 : max(_756, 0.0));
        float _757 = isnan(1.0) ? _3366 : (isnan(_3366) ? 1.0 : min(_3366, 1.0));
        float _766 = ((((1.0 - _757) * (_752 + 2.0)) * exp2(log2(isnan(1.0) ? _3344 : (isnan(_3344) ? 1.0 : min(_3344, 1.0))) * (_752 + 1.0))) + _757) * _720;
        float _767 = _688 * 0.5;
        float _768 = _698 * 0.5;
        float _769 = _708 * 0.5;
        float _770 = dot(vec3(_767, _768, _769), vec3(_767, _768, _769));
        float _775 = (_770 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_770);
        float _783 = (dot(vec3(_299, _300, _301), vec3(_775 * _767, _775 * _768, _775 * _769)) + 1.0) * 0.5;
        float _3377 = isnan(0.0) ? _783 : (isnan(_783) ? 0.0 : max(_783, 0.0));
        float _792 = sqrt(((_768 * _768) + (_767 * _767)) + (_769 * _769)) / (_721 + 9.9999997473787516355514526367188e-06);
        float _3388 = isnan(0.0) ? _792 : (isnan(_792) ? 0.0 : max(_792, 0.0));
        float _793 = isnan(1.0) ? _3388 : (isnan(_3388) ? 1.0 : min(_3388, 1.0));
        float _794 = _793 * 2.0;
        float _798 = (1.0 - _793) / (_793 + 1.0);
        float _3399 = isnan(0.0) ? _798 : (isnan(_798) ? 0.0 : max(_798, 0.0));
        float _799 = isnan(1.0) ? _3399 : (isnan(_3399) ? 1.0 : min(_3399, 1.0));
        float _808 = ((((1.0 - _799) * (_794 + 2.0)) * exp2(log2(isnan(1.0) ? _3377 : (isnan(_3377) ? 1.0 : min(_3377, 1.0))) * (_794 + 1.0))) + _799) * _721;
        float _809 = _689 * 0.5;
        float _810 = _699 * 0.5;
        float _811 = _709 * 0.5;
        float _812 = dot(vec3(_809, _810, _811), vec3(_809, _810, _811));
        float _817 = (_812 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_812);
        float _825 = (dot(vec3(_299, _300, _301), vec3(_817 * _809, _817 * _810, _817 * _811)) + 1.0) * 0.5;
        float _3410 = isnan(0.0) ? _825 : (isnan(_825) ? 0.0 : max(_825, 0.0));
        float _834 = sqrt(((_810 * _810) + (_809 * _809)) + (_811 * _811)) / (_722 + 9.9999997473787516355514526367188e-06);
        float _3421 = isnan(0.0) ? _834 : (isnan(_834) ? 0.0 : max(_834, 0.0));
        float _835 = isnan(1.0) ? _3421 : (isnan(_3421) ? 1.0 : min(_3421, 1.0));
        float _836 = _835 * 2.0;
        float _840 = (1.0 - _835) / (_835 + 1.0);
        float _3432 = isnan(0.0) ? _840 : (isnan(_840) ? 0.0 : max(_840, 0.0));
        float _841 = isnan(1.0) ? _3432 : (isnan(_3432) ? 1.0 : min(_3432, 1.0));
        float _850 = ((((1.0 - _841) * (_836 + 2.0)) * exp2(log2(isnan(1.0) ? _3410 : (isnan(_3410) ? 1.0 : min(_3410, 1.0))) * (_836 + 1.0))) + _841) * _722;
        _858 = _689;
        _860 = _688;
        _861 = _687;
        _862 = _699;
        _863 = _698;
        _864 = _697;
        _865 = _709;
        _866 = _708;
        _867 = _707;
        _868 = _722;
        _869 = _721;
        _870 = _720;
        _871 = cbModelParam._m0[36u].z * (isnan(0.0) ? _766 : (isnan(_766) ? 0.0 : max(_766, 0.0)));
        _872 = cbModelParam._m0[36u].z * (isnan(0.0) ? _808 : (isnan(_808) ? 0.0 : max(_808, 0.0)));
        _873 = cbModelParam._m0[36u].z * (isnan(0.0) ? _850 : (isnan(_850) ? 0.0 : max(_850, 0.0)));
    }
    else
    {
        _858 = _859;
        _860 = _859;
        _861 = _859;
        _862 = _859;
        _863 = _859;
        _864 = _859;
        _865 = _859;
        _866 = _859;
        _867 = _859;
        _868 = _859;
        _869 = _859;
        _870 = _859;
        _871 = 0.0;
        _872 = 0.0;
        _873 = 0.0;
    }
    float _1168;
    float _1169;
    float _1170;
    float _1171;
    float _1172;
    float _1173;
    float _1174;
    float _1175;
    float _1176;
    float _1177;
    float _1178;
    float _1179;
    float _1180;
    float _1181;
    float _1182;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _899 = fma(_553, cbModelParam._m0[30u].z, fma(_549, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _545));
        float _903 = fma(_553, cbModelParam._m0[31u].z, fma(_549, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _545));
        float _907 = fma(_553, cbModelParam._m0[32u].z, fma(_549, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _545));
        float _930 = _545 + _299;
        float _931 = _549 + _300;
        float _932 = _553 + _301;
        float _942 = fma(_932, cbModelParam._m0[30u].z, fma(_931, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _930)) - _899;
        float _943 = fma(_932, cbModelParam._m0[31u].z, fma(_931, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _930)) - _903;
        float _944 = fma(_932, cbModelParam._m0[32u].z, fma(_931, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _930)) - _907;
        float _948 = inversesqrt(dot(vec3(_942, _943, _944), vec3(_942, _943, _944)));
        float _961 = ((_948 * _942) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_899 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _962 = ((_948 * _943) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_903 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _963 = ((_948 * _944) / cbModelParam._m0[35u].z) + ((((((_907 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _965 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_961, _962, _963), 0.0);
        vec4 _972 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_961, _962, _963), 0.0);
        vec4 _979 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_961, _962, _963), 0.0);
        vec4 _986 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_961, _962, _963), 0.0);
        float _998 = exp2((_965.w + (-0.5)) * 20.0) * 2.0;
        float _999 = _998 * (_965.x + (-0.5));
        float _1000 = _998 * (_965.y + (-0.5));
        float _1001 = _998 * (_965.z + (-0.5));
        float _1008 = exp2((_972.w + (-0.5)) * 20.0) * 2.0;
        float _1009 = _1008 * (_972.x + (-0.5));
        float _1010 = _1008 * (_972.y + (-0.5));
        float _1011 = _1008 * (_972.z + (-0.5));
        float _1018 = exp2((_979.w + (-0.5)) * 20.0) * 2.0;
        float _1019 = _1018 * (_979.x + (-0.5));
        float _1020 = _1018 * (_979.y + (-0.5));
        float _1021 = _1018 * (_979.z + (-0.5));
        float _1028 = exp2((_986.w + (-0.5)) * 20.0) * 2.0;
        float _1029 = _1028 * (_986.x + (-0.5));
        float _1030 = _1028 * (_986.y + (-0.5));
        float _1031 = _1028 * (_986.z + (-0.5));
        float _1032 = isnan(0.0) ? _1029 : (isnan(_1029) ? 0.0 : max(_1029, 0.0));
        float _1033 = isnan(0.0) ? _1030 : (isnan(_1030) ? 0.0 : max(_1030, 0.0));
        float _1034 = isnan(0.0) ? _1031 : (isnan(_1031) ? 0.0 : max(_1031, 0.0));
        float _1035 = _999 * 0.5;
        float _1036 = _1009 * 0.5;
        float _1037 = _1019 * 0.5;
        float _1038 = dot(vec3(_1035, _1036, _1037), vec3(_1035, _1036, _1037));
        float _1043 = (_1038 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1038);
        float _1051 = (dot(vec3(_299, _300, _301), vec3(_1043 * _1035, _1043 * _1036, _1043 * _1037)) + 1.0) * 0.5;
        float _3473 = isnan(0.0) ? _1051 : (isnan(_1051) ? 0.0 : max(_1051, 0.0));
        float _1060 = sqrt(((_1036 * _1036) + (_1035 * _1035)) + (_1037 * _1037)) / (_1032 + 9.9999997473787516355514526367188e-06);
        float _3484 = isnan(0.0) ? _1060 : (isnan(_1060) ? 0.0 : max(_1060, 0.0));
        float _1061 = isnan(1.0) ? _3484 : (isnan(_3484) ? 1.0 : min(_3484, 1.0));
        float _1062 = _1061 * 2.0;
        float _1066 = (1.0 - _1061) / (_1061 + 1.0);
        float _3495 = isnan(0.0) ? _1066 : (isnan(_1066) ? 0.0 : max(_1066, 0.0));
        float _1067 = isnan(1.0) ? _3495 : (isnan(_3495) ? 1.0 : min(_3495, 1.0));
        float _1076 = ((((1.0 - _1067) * (_1062 + 2.0)) * exp2(log2(isnan(1.0) ? _3473 : (isnan(_3473) ? 1.0 : min(_3473, 1.0))) * (_1062 + 1.0))) + _1067) * _1032;
        float _1077 = _1000 * 0.5;
        float _1078 = _1010 * 0.5;
        float _1079 = _1020 * 0.5;
        float _1080 = dot(vec3(_1077, _1078, _1079), vec3(_1077, _1078, _1079));
        float _1085 = (_1080 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1080);
        float _1093 = (dot(vec3(_299, _300, _301), vec3(_1085 * _1077, _1085 * _1078, _1085 * _1079)) + 1.0) * 0.5;
        float _3506 = isnan(0.0) ? _1093 : (isnan(_1093) ? 0.0 : max(_1093, 0.0));
        float _1102 = sqrt(((_1078 * _1078) + (_1077 * _1077)) + (_1079 * _1079)) / (_1033 + 9.9999997473787516355514526367188e-06);
        float _3517 = isnan(0.0) ? _1102 : (isnan(_1102) ? 0.0 : max(_1102, 0.0));
        float _1103 = isnan(1.0) ? _3517 : (isnan(_3517) ? 1.0 : min(_3517, 1.0));
        float _1104 = _1103 * 2.0;
        float _1108 = (1.0 - _1103) / (_1103 + 1.0);
        float _3528 = isnan(0.0) ? _1108 : (isnan(_1108) ? 0.0 : max(_1108, 0.0));
        float _1109 = isnan(1.0) ? _3528 : (isnan(_3528) ? 1.0 : min(_3528, 1.0));
        float _1118 = ((((1.0 - _1109) * (_1104 + 2.0)) * exp2(log2(isnan(1.0) ? _3506 : (isnan(_3506) ? 1.0 : min(_3506, 1.0))) * (_1104 + 1.0))) + _1109) * _1033;
        float _1119 = _1001 * 0.5;
        float _1120 = _1011 * 0.5;
        float _1121 = _1021 * 0.5;
        float _1122 = dot(vec3(_1119, _1120, _1121), vec3(_1119, _1120, _1121));
        float _1127 = (_1122 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1122);
        float _1135 = (dot(vec3(_299, _300, _301), vec3(_1127 * _1119, _1127 * _1120, _1127 * _1121)) + 1.0) * 0.5;
        float _3539 = isnan(0.0) ? _1135 : (isnan(_1135) ? 0.0 : max(_1135, 0.0));
        float _1144 = sqrt(((_1120 * _1120) + (_1119 * _1119)) + (_1121 * _1121)) / (_1034 + 9.9999997473787516355514526367188e-06);
        float _3550 = isnan(0.0) ? _1144 : (isnan(_1144) ? 0.0 : max(_1144, 0.0));
        float _1145 = isnan(1.0) ? _3550 : (isnan(_3550) ? 1.0 : min(_3550, 1.0));
        float _1146 = _1145 * 2.0;
        float _1150 = (1.0 - _1145) / (_1145 + 1.0);
        float _3561 = isnan(0.0) ? _1150 : (isnan(_1150) ? 0.0 : max(_1150, 0.0));
        float _1151 = isnan(1.0) ? _3561 : (isnan(_3561) ? 1.0 : min(_3561, 1.0));
        float _1160 = ((((1.0 - _1151) * (_1146 + 2.0)) * exp2(log2(isnan(1.0) ? _3539 : (isnan(_3539) ? 1.0 : min(_3539, 1.0))) * (_1146 + 1.0))) + _1151) * _1034;
        _1168 = _1001;
        _1169 = _1000;
        _1170 = _999;
        _1171 = _1011;
        _1172 = _1010;
        _1173 = _1009;
        _1174 = _1021;
        _1175 = _1020;
        _1176 = _1019;
        _1177 = _1034;
        _1178 = _1033;
        _1179 = _1032;
        _1180 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1076 : (isnan(_1076) ? 0.0 : max(_1076, 0.0)));
        _1181 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1118 : (isnan(_1118) ? 0.0 : max(_1118, 0.0)));
        _1182 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1160 : (isnan(_1160) ? 0.0 : max(_1160, 0.0)));
    }
    else
    {
        _1168 = _859;
        _1169 = _859;
        _1170 = _859;
        _1171 = _859;
        _1172 = _859;
        _1173 = _859;
        _1174 = _859;
        _1175 = _859;
        _1176 = _859;
        _1177 = _859;
        _1178 = _859;
        _1179 = _859;
        _1180 = 0.0;
        _1181 = 0.0;
        _1182 = 0.0;
    }
    float _1192 = (cbModelParam._m0[1u].x * (_1180 - _871)) + _871;
    float _1193 = (cbModelParam._m0[1u].x * (_1181 - _872)) + _872;
    float _1194 = (cbModelParam._m0[1u].x * (_1182 - _873)) + _873;
    float _1215 = fma(_1194, cbSceneParam._m0[89u].z, fma(_1193, cbSceneParam._m0[89u].y, _1192 * cbSceneParam._m0[89u].x));
    float _1218 = fma(_1194, cbSceneParam._m0[90u].z, fma(_1193, cbSceneParam._m0[90u].y, _1192 * cbSceneParam._m0[90u].x));
    float _1221 = fma(_1194, cbSceneParam._m0[91u].z, fma(_1193, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1192));
    float _1236 = _489 * 0.5;
    float _1237 = _490 * 0.5;
    float _1238 = _491 * 0.5;
    float _1239 = dot(vec4(_1236, _1237, _1238, 1.0), vec4(_1170, _1173, _1176, _1179));
    float _1242 = dot(vec4(_1236, _1237, _1238, 1.0), vec4(_1169, _1172, _1175, _1178));
    float _1245 = dot(vec4(_1236, _1237, _1238, 1.0), vec4(_1168, _1171, _1174, _1177));
    float _1279;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1252 = dot(vec4(_1236, _1237, _1238, 1.0), vec4(_858, _862, _865, _868));
        float _1256 = dot(vec4(_1236, _1237, _1238, 1.0), vec4(_860, _863, _866, _869));
        float _1260 = dot(vec4(_1236, _1237, _1238, 1.0), vec4(_861, _864, _867, _870));
        float _1267 = dot(vec4(cbModelParam._m0[39u]), vec4(_1236, _1237, _1238, 1.0));
        _1279 = dot(vec3(isnan(0.0) ? _1260 : (isnan(_1260) ? 0.0 : max(_1260, 0.0)), isnan(0.0) ? _1256 : (isnan(_1256) ? 0.0 : max(_1256, 0.0)), isnan(0.0) ? _1252 : (isnan(_1252) ? 0.0 : max(_1252, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1267) ? 0.0 : (isnan(0.0) ? _1267 : max(0.0, _1267))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1279 = 1.0;
    }
    float _1290;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1281 = dot(vec4(cbModelParam._m0[40u]), vec4(_1236, _1237, _1238, 1.0));
        _1290 = dot(vec3(isnan(0.0) ? _1239 : (isnan(_1239) ? 0.0 : max(_1239, 0.0)), isnan(0.0) ? _1242 : (isnan(_1242) ? 0.0 : max(_1242, 0.0)), isnan(0.0) ? _1245 : (isnan(_1245) ? 0.0 : max(_1245, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1281) ? 0.0 : (isnan(0.0) ? _1281 : max(0.0, _1281))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1290 = 1.0;
    }
    float _1294 = (_1290 * cbModelParam._m0[1u].x) + (_1279 * (1.0 - cbModelParam._m0[1u].x));
    float _1304 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _303);
    float _1305 = isnan(_1304) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1304 : min(cbModelParam._m0[25u].z, _1304));
    float _1387;
    float _1389;
    float _1391;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1354 = fma(_553, cbModelParam._m0[13u].z, fma(_549, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _545)) + cbModelParam._m0[13u].w;
        float _1358 = fma(_553, cbModelParam._m0[14u].z, fma(_549, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _545)) + cbModelParam._m0[14u].w;
        float _1362 = fma(_553, cbModelParam._m0[15u].z, fma(_549, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _545)) + cbModelParam._m0[15u].w;
        float _1365 = fma(_491, cbModelParam._m0[13u].z, fma(_490, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _489));
        float _1368 = fma(_491, cbModelParam._m0[14u].z, fma(_490, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _489));
        float _1371 = fma(_491, cbModelParam._m0[15u].z, fma(_490, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _489));
        float _1399;
        if (_1365 > 0.0)
        {
            _1399 = abs((1.0 - _1354) / _1365);
        }
        else
        {
            float frontier_phi_18_16_ladder;
            if (_1365 < 0.0)
            {
                frontier_phi_18_16_ladder = abs((_1354 + 1.0) / _1365);
            }
            else
            {
                frontier_phi_18_16_ladder = 5000.0;
            }
            _1399 = frontier_phi_18_16_ladder;
        }
        float _1607;
        if (_1368 > 0.0)
        {
            _1607 = abs((1.0 - _1358) / _1368);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1368 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1358 + 1.0) / _1368);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1607 = frontier_phi_27_23_ladder;
        }
        float _1861;
        if (_1371 > 0.0)
        {
            _1861 = abs((1.0 - _1362) / _1371);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1371 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1362 + 1.0) / _1371);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _1861 = frontier_phi_39_34_ladder;
        }
        float _1863 = isnan(_1607) ? _1399 : (isnan(_1399) ? _1607 : min(_1399, _1607));
        float _1864 = isnan(_1861) ? _1863 : (isnan(_1863) ? _1861 : min(_1863, _1861));
        float _1868 = (_1864 * _1365) + _1354;
        float _1869 = (_1864 * _1368) + _1358;
        float _1870 = (_1864 * _1371) + _1362;
        float _1871 = _1864 * 9.9999997473787516355514526367188e-05;
        float _1873 = (-1.0) - _1871;
        float _1875 = _1871 + 1.0;
        float frontier_phi_17_39_ladder;
        float frontier_phi_17_39_ladder_1;
        float frontier_phi_17_39_ladder_2;
        if ((_1870 > _1875) || ((_1870 < _1873) || ((_1869 > _1875) || ((_1869 < _1873) || ((_1868 < _1873) || (_1868 > _1875))))))
        {
            frontier_phi_17_39_ladder = 0.0;
            frontier_phi_17_39_ladder_1 = 0.0;
            frontier_phi_17_39_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1998 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1870, cbModelParam._m0[9u].z, fma(_1869, cbModelParam._m0[9u].y, _1868 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1870, cbModelParam._m0[10u].z, fma(_1869, cbModelParam._m0[10u].y, _1868 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1870, cbModelParam._m0[11u].z, fma(_1869, cbModelParam._m0[11u].y, _1868 * cbModelParam._m0[11u].x))), _1305);
            frontier_phi_17_39_ladder = _1998.z * cbModelParam._m0[1u].y;
            frontier_phi_17_39_ladder_1 = _1998.y * cbModelParam._m0[1u].y;
            frontier_phi_17_39_ladder_2 = _1998.x * cbModelParam._m0[1u].y;
        }
        _1387 = frontier_phi_17_39_ladder_2;
        _1389 = frontier_phi_17_39_ladder_1;
        _1391 = frontier_phi_17_39_ladder;
    }
    else
    {
        vec4 _1375 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_489, _490, _491), _1305);
        _1387 = _1375.x * cbModelParam._m0[1u].y;
        _1389 = _1375.y * cbModelParam._m0[1u].y;
        _1391 = _1375.z * cbModelParam._m0[1u].y;
    }
    float _1395 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _303);
    float _1396 = isnan(_1395) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1395 : min(cbModelParam._m0[25u].w, _1395));
    float _1489;
    float _1491;
    float _1493;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1453 = fma(_553, cbModelParam._m0[21u].z, fma(_549, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _545)) + cbModelParam._m0[21u].w;
        float _1457 = fma(_553, cbModelParam._m0[22u].z, fma(_549, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _545)) + cbModelParam._m0[22u].w;
        float _1461 = fma(_553, cbModelParam._m0[23u].z, fma(_549, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _545)) + cbModelParam._m0[23u].w;
        float _1464 = fma(_491, cbModelParam._m0[21u].z, fma(_490, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _489));
        float _1467 = fma(_491, cbModelParam._m0[22u].z, fma(_490, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _489));
        float _1470 = fma(_491, cbModelParam._m0[23u].z, fma(_490, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _489));
        float _1612;
        if (_1464 > 0.0)
        {
            _1612 = abs((1.0 - _1453) / _1464);
        }
        else
        {
            float frontier_phi_29_25_ladder;
            if (_1464 < 0.0)
            {
                frontier_phi_29_25_ladder = abs((_1453 + 1.0) / _1464);
            }
            else
            {
                frontier_phi_29_25_ladder = 5000.0;
            }
            _1612 = frontier_phi_29_25_ladder;
        }
        float _1888;
        if (_1467 > 0.0)
        {
            _1888 = abs((1.0 - _1457) / _1467);
        }
        else
        {
            float frontier_phi_41_36_ladder;
            if (_1467 < 0.0)
            {
                frontier_phi_41_36_ladder = abs((_1457 + 1.0) / _1467);
            }
            else
            {
                frontier_phi_41_36_ladder = 5000.0;
            }
            _1888 = frontier_phi_41_36_ladder;
        }
        float _2101;
        if (_1470 > 0.0)
        {
            _2101 = abs((1.0 - _1461) / _1470);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1470 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1461 + 1.0) / _1470);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2101 = frontier_phi_50_47_ladder;
        }
        float _2103 = isnan(_1888) ? _1612 : (isnan(_1612) ? _1888 : min(_1612, _1888));
        float _2104 = isnan(_2101) ? _2103 : (isnan(_2103) ? _2101 : min(_2103, _2101));
        float _2108 = (_2104 * _1464) + _1453;
        float _2109 = (_2104 * _1467) + _1457;
        float _2110 = (_2104 * _1470) + _1461;
        float _2111 = _2104 * 9.9999997473787516355514526367188e-05;
        float _2112 = (-1.0) - _2111;
        float _2114 = _2111 + 1.0;
        float frontier_phi_26_50_ladder;
        float frontier_phi_26_50_ladder_1;
        float frontier_phi_26_50_ladder_2;
        if ((_2110 > _2114) || ((_2110 < _2112) || ((_2109 > _2114) || ((_2109 < _2112) || ((_2108 < _2112) || (_2108 > _2114))))))
        {
            frontier_phi_26_50_ladder = 0.0;
            frontier_phi_26_50_ladder_1 = 0.0;
            frontier_phi_26_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2310 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2110, cbModelParam._m0[17u].z, fma(_2109, cbModelParam._m0[17u].y, _2108 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2110, cbModelParam._m0[18u].z, fma(_2109, cbModelParam._m0[18u].y, _2108 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2110, cbModelParam._m0[19u].z, fma(_2109, cbModelParam._m0[19u].y, _2108 * cbModelParam._m0[19u].x))), _1396);
            frontier_phi_26_50_ladder = _2310.z * cbModelParam._m0[1u].z;
            frontier_phi_26_50_ladder_1 = _2310.y * cbModelParam._m0[1u].z;
            frontier_phi_26_50_ladder_2 = _2310.x * cbModelParam._m0[1u].z;
        }
        _1489 = frontier_phi_26_50_ladder_2;
        _1491 = frontier_phi_26_50_ladder_1;
        _1493 = frontier_phi_26_50_ladder;
    }
    else
    {
        vec4 _1473 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_489, _490, _491), _1396);
        _1489 = _1473.x * cbModelParam._m0[1u].z;
        _1491 = _1473.y * cbModelParam._m0[1u].z;
        _1493 = _1473.z * cbModelParam._m0[1u].z;
    }
    float _1506 = (((_516 * _466) + _517) * _481) * ((cbModelParam._m0[1u].w * (_1489 - _1387)) + _1387);
    float _1508 = (((_516 * _468) + _517) * _481) * ((cbModelParam._m0[1u].w * (_1491 - _1389)) + _1389);
    float _1510 = (((_516 * _469) + _517) * _481) * ((cbModelParam._m0[1u].w * (_1493 - _1391)) + _1391);
    float _1513 = fma(_1510, cbSceneParam._m0[89u].z, fma(_1508, cbSceneParam._m0[89u].y, _1506 * cbSceneParam._m0[89u].x));
    float _1516 = fma(_1510, cbSceneParam._m0[90u].z, fma(_1508, cbSceneParam._m0[90u].y, _1506 * cbSceneParam._m0[90u].x));
    float _1519 = fma(_1510, cbSceneParam._m0[91u].z, fma(_1508, cbSceneParam._m0[91u].y, _1506 * cbSceneParam._m0[91u].x));
    uvec4 _1529 = floatBitsToUint(cbInstanceData._m0[_440 + 5u]);
    uint _1531 = _1529.x * 14u;
    uint _1532 = _1531 + 13u;
    float _1539 = _481 + (-1.0);
    float _1544 = (cbLight._m0[_1532].x * _1539) + 1.0;
    float _1545 = (cbLight._m0[_1532].y * _1539) + 1.0;
    float _1546 = (cbLight._m0[_1532].z * _1539) + 1.0;
    float _1547 = (cbLight._m0[_1532].w * _1539) + 1.0;
    uint _1548 = _1531 + 5u;
    float _1554 = isnan(1.0) ? _1545 : (isnan(_1545) ? 1.0 : min(_1545, 1.0));
    uint _1558 = _1531 + 4u;
    float _1565 = isnan(1.0) ? _1544 : (isnan(_1544) ? 1.0 : min(_1544, 1.0));
    uint _1569 = _1531 | 1u;
    float _1580 = dot(vec3(cbLight._m0[_1531].xyz), vec3(_299, _300, _301));
    float _1583 = dot(vec3(cbLight._m0[_1569].xyz), vec3(_299, _300, _301));
    float _3697 = isnan(0.0) ? _1580 : (isnan(_1580) ? 0.0 : max(_1580, 0.0));
    float _3708 = isnan(0.0) ? _1583 : (isnan(_1583) ? 0.0 : max(_1583, 0.0));
    float _1588 = (isnan(1.0) ? _3697 : (isnan(_3697) ? 1.0 : min(_3697, 1.0))) * 0.3183098733425140380859375;
    float _1590 = (isnan(1.0) ? _3708 : (isnan(_3708) ? 1.0 : min(_3708, 1.0))) * 0.3183098733425140380859375;
    float _1597 = ((cbLight._m0[_1548].x * _1554) * _1590) + ((cbLight._m0[_1558].x * _1565) * _1588);
    float _1598 = ((_1554 * cbLight._m0[_1548].y) * _1590) + ((_1565 * cbLight._m0[_1558].y) * _1588);
    float _1599 = ((_1554 * cbLight._m0[_1548].z) * _1590) + ((_1565 * cbLight._m0[_1558].z) * _1588);
    uvec4 _1604 = floatBitsToUint(cbLight._m0[_1531 + 12u]);
    bool _1606 = _1604.x == 0u;
    float _1617;
    float _1619;
    float _1621;
    if (_1606)
    {
        _1617 = _1597;
        _1619 = _1598;
        _1621 = _1599;
    }
    else
    {
        uint _1625 = _1531 + 6u;
        float _1641 = (dot(vec3(cbLight._m0[_1531 + 2u].xyz), vec3(_299, _300, _301)) * 0.5) + 0.5;
        float _1642 = _1641 * _1641;
        float _3719 = isnan(0.0) ? _1642 : (isnan(_1642) ? 0.0 : max(_1642, 0.0));
        float _1643 = isnan(1.0) ? _3719 : (isnan(_3719) ? 1.0 : min(_3719, 1.0));
        float _1644 = isnan(1.0) ? _1546 : (isnan(_1546) ? 1.0 : min(_1546, 1.0));
        _1617 = (((cbLight._m0[_1625].x * 0.3183098733425140380859375) * _1643) * _1644) + _1597;
        _1619 = (((cbLight._m0[_1625].y * 0.3183098733425140380859375) * _1643) * _1644) + _1598;
        _1621 = (((cbLight._m0[_1625].z * 0.3183098733425140380859375) * _1643) * _1644) + _1599;
    }
    bool _1624 = _1604.y == 0u;
    float _1662;
    float _1664;
    float _1666;
    if (_1624)
    {
        _1662 = _1617;
        _1664 = _1619;
        _1666 = _1621;
    }
    else
    {
        uint _1832 = _1531 + 7u;
        float _1848 = (dot(vec3(cbLight._m0[_1531 + 3u].xyz), vec3(_299, _300, _301)) * 0.5) + 0.5;
        float _1849 = _1848 * _1848;
        float _3735 = isnan(0.0) ? _1849 : (isnan(_1849) ? 0.0 : max(_1849, 0.0));
        float _1850 = isnan(1.0) ? _3735 : (isnan(_3735) ? 1.0 : min(_3735, 1.0));
        float _1851 = isnan(1.0) ? _1547 : (isnan(_1547) ? 1.0 : min(_1547, 1.0));
        _1662 = (((cbLight._m0[_1832].x * 0.3183098733425140380859375) * _1850) * _1851) + _1617;
        _1664 = (((cbLight._m0[_1832].y * 0.3183098733425140380859375) * _1850) * _1851) + _1619;
        _1666 = (((cbLight._m0[_1832].z * 0.3183098733425140380859375) * _1850) * _1851) + _1621;
    }
    uint _1669 = _1531 + 8u;
    float _1682 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1531].w)) * _303) * 0.949999988079071044921875);
    float _1683 = _1682 * _1682;
    float _1684 = cbLight._m0[_1531].x + _391;
    float _1685 = cbLight._m0[_1531].y + _392;
    float _1686 = cbLight._m0[_1531].z + _393;
    float _1690 = inversesqrt(dot(vec3(_1684, _1685, _1686), vec3(_1684, _1685, _1686)));
    float _1691 = _1690 * _1684;
    float _1692 = _1690 * _1685;
    float _1693 = _1690 * _1686;
    float _1694 = dot(vec3(_299, _300, _301), vec3(cbLight._m0[_1531].xyz));
    float _3751 = isnan(0.0) ? _1694 : (isnan(_1694) ? 0.0 : max(_1694, 0.0));
    float _1697 = isnan(1.0) ? _3751 : (isnan(_3751) ? 1.0 : min(_3751, 1.0));
    float _3762 = isnan(0.0) ? _482 : (isnan(_482) ? 0.0 : max(_482, 0.0));
    float _1698 = isnan(1.0) ? _3762 : (isnan(_3762) ? 1.0 : min(_3762, 1.0));
    float _1699 = dot(vec3(_299, _300, _301), vec3(_1691, _1692, _1693));
    float _3773 = isnan(0.0) ? _1699 : (isnan(_1699) ? 0.0 : max(_1699, 0.0));
    float _1702 = isnan(1.0) ? _3773 : (isnan(_3773) ? 1.0 : min(_3773, 1.0));
    float _1703 = dot(vec3(cbLight._m0[_1531].xyz), vec3(_1691, _1692, _1693));
    float _3784 = isnan(0.0) ? _1703 : (isnan(_1703) ? 0.0 : max(_1703, 0.0));
    float _1707 = _1683 * _1683;
    float _1711 = ((_1702 * _1702) * (_1707 + (-1.0))) + 1.0;
    float _1719 = exp2(log2(1.0 - (isnan(1.0) ? _3784 : (isnan(_3784) ? 1.0 : min(_3784, 1.0)))) * 5.0);
    float _1720 = 0.959999978542327880859375 - _463;
    float _1722 = 0.959999978542327880859375 - _464;
    float _1723 = 0.959999978542327880859375 - _465;
    float _1730 = 1.0 - _1683;
    float _1741 = (0.5 / (((_1698 * ((_1697 * _1730) + _1683)) + 9.9999999392252902907785028219223e-09) + (((_1698 * _1730) + _1683) * _1697))) * _1697;
    float _3795 = isnan(0.0) ? _1741 : (isnan(_1741) ? 0.0 : max(_1741, 0.0));
    float _1743 = (isnan(1.0) ? _3795 : (isnan(_3795) ? 1.0 : min(_3795, 1.0))) * (_1707 / ((_1711 * _1711) * 3.141590118408203125));
    uint _1754 = _1531 + 9u;
    float _1765 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1569].w)) * _303) * 0.949999988079071044921875);
    float _1766 = _1765 * _1765;
    float _1767 = cbLight._m0[_1569].x + _391;
    float _1768 = cbLight._m0[_1569].y + _392;
    float _1769 = cbLight._m0[_1569].z + _393;
    float _1773 = inversesqrt(dot(vec3(_1767, _1768, _1769), vec3(_1767, _1768, _1769)));
    float _1774 = _1773 * _1767;
    float _1775 = _1773 * _1768;
    float _1776 = _1773 * _1769;
    float _1777 = dot(vec3(_299, _300, _301), vec3(cbLight._m0[_1569].xyz));
    float _3806 = isnan(0.0) ? _1777 : (isnan(_1777) ? 0.0 : max(_1777, 0.0));
    float _1780 = isnan(1.0) ? _3806 : (isnan(_3806) ? 1.0 : min(_3806, 1.0));
    float _1781 = dot(vec3(_299, _300, _301), vec3(_1774, _1775, _1776));
    float _3817 = isnan(0.0) ? _1781 : (isnan(_1781) ? 0.0 : max(_1781, 0.0));
    float _1784 = isnan(1.0) ? _3817 : (isnan(_3817) ? 1.0 : min(_3817, 1.0));
    float _1785 = dot(vec3(cbLight._m0[_1569].xyz), vec3(_1774, _1775, _1776));
    float _3828 = isnan(0.0) ? _1785 : (isnan(_1785) ? 0.0 : max(_1785, 0.0));
    float _1789 = _1766 * _1766;
    float _1793 = ((_1784 * _1784) * (_1789 + (-1.0))) + 1.0;
    float _1800 = exp2(log2(1.0 - (isnan(1.0) ? _3828 : (isnan(_3828) ? 1.0 : min(_3828, 1.0)))) * 5.0);
    float _1807 = 1.0 - _1766;
    float _1817 = (0.5 / (((_1698 * ((_1780 * _1807) + _1766)) + 9.9999999392252902907785028219223e-09) + (((_1698 * _1807) + _1766) * _1780))) * _1780;
    float _3839 = isnan(0.0) ? _1817 : (isnan(_1817) ? 0.0 : max(_1817, 0.0));
    float _1819 = (isnan(1.0) ? _3839 : (isnan(_3839) ? 1.0 : min(_3839, 1.0))) * (_1789 / ((_1793 * _1793) * 3.141590118408203125));
    float _1829 = (((((_1800 * _1720) + _466) * cbLight._m0[_1754].x) * _1819) * _1554) + (((((_1719 * _1720) + _466) * cbLight._m0[_1669].x) * _1743) * _1565);
    float _1830 = (((((_1800 * _1722) + _468) * cbLight._m0[_1754].y) * _1819) * _1554) + (((((_1719 * _1722) + _468) * cbLight._m0[_1669].y) * _1743) * _1565);
    float _1831 = (((((_1800 * _1723) + _469) * cbLight._m0[_1754].z) * _1819) * _1554) + (((((_1719 * _1723) + _469) * cbLight._m0[_1669].z) * _1743) * _1565);
    float _1893;
    float _1895;
    float _1897;
    if (_1606)
    {
        _1893 = _1829;
        _1895 = _1830;
        _1897 = _1831;
    }
    else
    {
        uint _1899 = _1531 + 2u;
        uint _1903 = _1531 + 10u;
        float _1917 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1899].w)) * _303) * 0.949999988079071044921875);
        float _1918 = _1917 * _1917;
        float _1919 = cbLight._m0[_1899].x + _391;
        float _1920 = cbLight._m0[_1899].y + _392;
        float _1921 = cbLight._m0[_1899].z + _393;
        float _1925 = inversesqrt(dot(vec3(_1919, _1920, _1921), vec3(_1919, _1920, _1921)));
        float _1926 = _1925 * _1919;
        float _1927 = _1925 * _1920;
        float _1928 = _1925 * _1921;
        float _1929 = dot(vec3(_299, _300, _301), vec3(cbLight._m0[_1899].xyz));
        float _3850 = isnan(0.0) ? _1929 : (isnan(_1929) ? 0.0 : max(_1929, 0.0));
        float _1932 = isnan(1.0) ? _3850 : (isnan(_3850) ? 1.0 : min(_3850, 1.0));
        float _1933 = dot(vec3(_299, _300, _301), vec3(_1926, _1927, _1928));
        float _3861 = isnan(0.0) ? _1933 : (isnan(_1933) ? 0.0 : max(_1933, 0.0));
        float _1936 = isnan(1.0) ? _3861 : (isnan(_3861) ? 1.0 : min(_3861, 1.0));
        float _1937 = dot(vec3(cbLight._m0[_1899].xyz), vec3(_1926, _1927, _1928));
        float _3872 = isnan(0.0) ? _1937 : (isnan(_1937) ? 0.0 : max(_1937, 0.0));
        float _1941 = _1918 * _1918;
        float _1945 = ((_1936 * _1936) * (_1941 + (-1.0))) + 1.0;
        float _1952 = exp2(log2(1.0 - (isnan(1.0) ? _3872 : (isnan(_3872) ? 1.0 : min(_3872, 1.0)))) * 5.0);
        float _1959 = 1.0 - _1918;
        float _1969 = (0.5 / (((_1698 * ((_1932 * _1959) + _1918)) + 9.9999999392252902907785028219223e-09) + (((_1698 * _1959) + _1918) * _1932))) * _1932;
        float _3883 = isnan(0.0) ? _1969 : (isnan(_1969) ? 0.0 : max(_1969, 0.0));
        float _1971 = (isnan(1.0) ? _3883 : (isnan(_3883) ? 1.0 : min(_3883, 1.0))) * (_1941 / ((_1945 * _1945) * 3.141590118408203125));
        float _1972 = isnan(1.0) ? _1546 : (isnan(_1546) ? 1.0 : min(_1546, 1.0));
        _1893 = (((((_1952 * _1720) + _466) * cbLight._m0[_1903].x) * _1971) * _1972) + _1829;
        _1895 = (((((_1952 * _1722) + _468) * cbLight._m0[_1903].y) * _1971) * _1972) + _1830;
        _1897 = (((((_1952 * _1723) + _469) * cbLight._m0[_1903].z) * _1971) * _1972) + _1831;
    }
    float _2007;
    float _2009;
    float _2011;
    if (_1624)
    {
        _2007 = _1893;
        _2009 = _1895;
        _2011 = _1897;
    }
    else
    {
        uint _2018 = _1531 + 3u;
        uint _2022 = _1531 + 11u;
        float _2036 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2018].w)) * _303) * 0.949999988079071044921875);
        float _2037 = _2036 * _2036;
        float _2038 = cbLight._m0[_2018].x + _391;
        float _2039 = cbLight._m0[_2018].y + _392;
        float _2040 = cbLight._m0[_2018].z + _393;
        float _2044 = inversesqrt(dot(vec3(_2038, _2039, _2040), vec3(_2038, _2039, _2040)));
        float _2045 = _2044 * _2038;
        float _2046 = _2044 * _2039;
        float _2047 = _2044 * _2040;
        float _2048 = dot(vec3(_299, _300, _301), vec3(cbLight._m0[_2018].xyz));
        float _3899 = isnan(0.0) ? _2048 : (isnan(_2048) ? 0.0 : max(_2048, 0.0));
        float _2051 = isnan(1.0) ? _3899 : (isnan(_3899) ? 1.0 : min(_3899, 1.0));
        float _2052 = dot(vec3(_299, _300, _301), vec3(_2045, _2046, _2047));
        float _3910 = isnan(0.0) ? _2052 : (isnan(_2052) ? 0.0 : max(_2052, 0.0));
        float _2055 = isnan(1.0) ? _3910 : (isnan(_3910) ? 1.0 : min(_3910, 1.0));
        float _2056 = dot(vec3(cbLight._m0[_2018].xyz), vec3(_2045, _2046, _2047));
        float _3921 = isnan(0.0) ? _2056 : (isnan(_2056) ? 0.0 : max(_2056, 0.0));
        float _2060 = _2037 * _2037;
        float _2064 = ((_2055 * _2055) * (_2060 + (-1.0))) + 1.0;
        float _2071 = exp2(log2(1.0 - (isnan(1.0) ? _3921 : (isnan(_3921) ? 1.0 : min(_3921, 1.0)))) * 5.0);
        float _2078 = 1.0 - _2037;
        float _2088 = (0.5 / (((_1698 * ((_2051 * _2078) + _2037)) + 9.9999999392252902907785028219223e-09) + (((_1698 * _2078) + _2037) * _2051))) * _2051;
        float _3932 = isnan(0.0) ? _2088 : (isnan(_2088) ? 0.0 : max(_2088, 0.0));
        float _2090 = (isnan(1.0) ? _3932 : (isnan(_3932) ? 1.0 : min(_3932, 1.0))) * (_2060 / ((_2064 * _2064) * 3.141590118408203125));
        float _2091 = isnan(1.0) ? _1547 : (isnan(_1547) ? 1.0 : min(_1547, 1.0));
        _2007 = (((((_2071 * _1720) + _466) * cbLight._m0[_2022].x) * _2090) * _2091) + _1893;
        _2009 = (((((_2071 * _1722) + _468) * cbLight._m0[_2022].y) * _2090) * _2091) + _1895;
        _2011 = (((((_2071 * _1723) + _469) * cbLight._m0[_2022].z) * _2090) * _2091) + _1897;
    }
    float _2225;
    float _2227;
    float _2229;
    float _2231;
    float _2233;
    float _2235;
    if (_1529.y == 0u)
    {
        float _2166 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2167 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2166;
        float _2168 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2166;
        float _2169 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2166;
        uvec4 _2181 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2182 = _2181.x;
        uint _2193 = uint((float(_2181.y) * floor(float(uint(cbSceneParam._m0[85u].y * _400) / _2182))) + floor(float(uint(cbSceneParam._m0[85u].x * _399) / _2182)));
        float _2203 = (log2(_2169 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2204 = isnan(0.0) ? _2203 : (isnan(_2203) ? 0.0 : max(_2203, 0.0));
        uint _2207 = uint(isnan(14.0) ? _2204 : (isnan(_2204) ? 14.0 : min(_2204, 14.0)));
        uvec4 _2212 = texelFetch(g_lightClusterGridBuffer, int(((_2207 << 2u) + (_2193 << 6u)) >> 2u));
        uint _2213 = _2212.x;
        uint _2214 = _2181.z;
        float _2315;
        float _2317;
        float _2319;
        float _2321;
        float _2323;
        float _2325;
        if (((((1u << ((_2214 >> 4u) & 15u)) + 4294967295u) & _2213) == 0u) || ((_2214 & 240u) == 0u))
        {
            _2315 = 0.0;
            _2317 = 0.0;
            _2319 = 0.0;
            _2321 = 0.0;
            _2323 = 0.0;
            _2325 = 0.0;
        }
        else
        {
            float _2316;
            float _2318;
            float _2320;
            float _2322;
            float _2324;
            float _2326;
            float _2459 = 0.0;
            float _2460 = 0.0;
            float _2461 = 0.0;
            float _2462 = 0.0;
            float _2463 = 0.0;
            float _2464 = 0.0;
            uint _2465 = 0u;
            uint _2474;
            bool _2475;
            for (;;)
            {
                _2474 = texelFetch(g_lightClassification, int((((_2207 << 5u) + (_2193 << 9u)) + (_2465 << 2u)) >> 2u)).x;
                _2475 = _2474 == 0u;
                float frontier_phi_65_pred;
                float frontier_phi_65_pred_1;
                float frontier_phi_65_pred_2;
                float frontier_phi_65_pred_3;
                float frontier_phi_65_pred_4;
                float frontier_phi_65_pred_5;
                if (_2475)
                {
                    frontier_phi_65_pred = _2464;
                    frontier_phi_65_pred_1 = _2463;
                    frontier_phi_65_pred_2 = _2462;
                    frontier_phi_65_pred_3 = _2461;
                    frontier_phi_65_pred_4 = _2460;
                    frontier_phi_65_pred_5 = _2459;
                }
                else
                {
                    float _2583;
                    float _2584;
                    float _2585;
                    float _2586;
                    float _2587;
                    float _2588;
                    uint _2589;
                    _2583 = _2459;
                    _2584 = _2460;
                    _2585 = _2461;
                    _2586 = _2462;
                    _2587 = _2463;
                    _2588 = _2464;
                    _2589 = _2474;
                    float _2515;
                    float _2516;
                    float _2517;
                    float _2518;
                    float _2519;
                    float _2520;
                    for (;;)
                    {
                        uint _2593 = uint(findLSB(_2589)) + (_2465 << 5u);
                        uint _2590 = (_2589 + 4294967295u) & _2589;
                        uint _2595 = _2593 * 48u;
                        vec4 _2609 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2595)).x, texelFetch(g_PointLightRenderingBuffer, int(_2595 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2595 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2595 + 3u)).x));
                        uint _2615 = (_2593 * 48u) + 4u;
                        vec4 _2628 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2615)).x, texelFetch(g_PointLightRenderingBuffer, int(_2615 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2615 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2615 + 3u)).x));
                        uint _2634 = (_2593 * 48u) + 8u;
                        vec3 _2645 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2634)).x, texelFetch(g_PointLightRenderingBuffer, int(_2634 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2634 + 2u)).x));
                        float _2649 = _2609.x - _2167;
                        float _2650 = _2609.y - _2168;
                        float _2651 = _2609.z - _2169;
                        float _2652 = dot(vec3(_2649, _2650, _2651), vec3(_2649, _2650, _2651));
                        float _2655 = inversesqrt(_2652);
                        float _2656 = _2655 * _2649;
                        float _2657 = _2655 * _2650;
                        float _2658 = _2655 * _2651;
                        float _2659 = dot(vec3(_421, _424, _427), vec3(_2656, _2657, _2658));
                        float _2664 = 1.0 - (_2652 * _2609.w);
                        float _3958 = isnan(0.0) ? _2664 : (isnan(_2664) ? 0.0 : max(_2664, 0.0));
                        float _2665 = isnan(1.0) ? _3958 : (isnan(_3958) ? 1.0 : min(_3958, 1.0));
                        float _2666 = sqrt(_2652) * _2628.w;
                        float _2669 = 1.39999997615814208984375 / (_2666 + 1.39999997615814208984375);
                        float _2670 = _2669 * _2669;
                        float _2673 = ((1.0 - _2670) * _2659) + _2670;
                        float _2676 = _2666 * _2666;
                        float _2680 = ((isnan(0.0) ? _2673 : (isnan(_2673) ? 0.0 : max(_2673, 0.0))) * _2665) / ((_2676 * 0.699999988079071044921875) + 1.0);
                        float _2684 = (-0.0) - _2167;
                        float _2685 = (-0.0) - _2168;
                        float _2686 = (-0.0) - _2169;
                        float _2690 = inversesqrt(dot(vec3(_2684, _2685, _2686), vec3(_2684, _2685, _2686)));
                        float _2691 = _2690 * _2684;
                        float _2692 = _2690 * _2685;
                        float _2693 = _2690 * _2686;
                        float _2701 = exp2(log2(1.0 / ((_2676 * 3.5) + 5.0)) * 0.25);
                        float _2702 = 1.0 - _497;
                        float _2709 = sqrt(1.0 - ((1.0 - (_2702 * _2702)) * (1.0 - (_2701 * _2701))));
                        float _2710 = _2709 * _2709;
                        float _2711 = _2710 * _2710;
                        float _2712 = _2691 + _2656;
                        float _2713 = _2692 + _2657;
                        float _2714 = _2693 + _2658;
                        float _2718 = inversesqrt(dot(vec3(_2712, _2713, _2714), vec3(_2712, _2713, _2714)));
                        float _2722 = dot(vec3(_421, _424, _427), vec3(_2691, _2692, _2693));
                        float _3974 = isnan(0.0) ? _2722 : (isnan(_2722) ? 0.0 : max(_2722, 0.0));
                        float _2725 = isnan(1.0) ? _3974 : (isnan(_3974) ? 1.0 : min(_3974, 1.0));
                        float _2726 = dot(vec3(_421, _424, _427), vec3(_2718 * _2712, _2718 * _2713, _2718 * _2714));
                        float _3985 = isnan(0.0) ? _2726 : (isnan(_2726) ? 0.0 : max(_2726, 0.0));
                        float _2729 = isnan(1.0) ? _3985 : (isnan(_3985) ? 1.0 : min(_3985, 1.0));
                        float _2733 = ((_2729 * _2729) * (_2711 + (-1.0))) + 1.0;
                        float _2734 = _2669 * _2710;
                        float _2735 = _2734 * _2734;
                        float _2738 = ((1.0 - _2735) * _2659) + _2735;
                        float _3996 = isnan(0.0) ? _2738 : (isnan(_2738) ? 0.0 : max(_2738, 0.0));
                        float _2739 = isnan(1.0) ? _3996 : (isnan(_3996) ? 1.0 : min(_3996, 1.0));
                        float _2740 = 1.0 - _2710;
                        float _2750 = (0.5 / (((_2739 * ((_2725 * _2740) + _2710)) + 9.9999999392252902907785028219223e-09) + (((_2739 * _2740) + _2710) * _2725))) * _2739;
                        float _4007 = isnan(0.0) ? _2750 : (isnan(_2750) ? 0.0 : max(_2750, 0.0));
                        float _2761 = (((_2711 * 3.1415927410125732421875) * (isnan(1.0) ? _4007 : (isnan(_4007) ? 1.0 : min(_4007, 1.0)))) / ((_2733 * _2733) * ((_2676 * 2.1991131305694580078125) + 3.141590118408203125))) * _2665;
                        _2518 = (_2680 * _2628.x) + _2586;
                        _2519 = (_2680 * _2628.y) + _2587;
                        _2520 = (_2680 * _2628.z) + _2588;
                        _2515 = (_2761 * _2645.x) + _2583;
                        _2516 = (_2761 * _2645.y) + _2584;
                        _2517 = (_2761 * _2645.z) + _2585;
                        if (_2590 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2583 = _2515;
                            _2584 = _2516;
                            _2585 = _2517;
                            _2586 = _2518;
                            _2587 = _2519;
                            _2588 = _2520;
                            _2589 = _2590;
                        }
                    }
                    frontier_phi_65_pred = _2520;
                    frontier_phi_65_pred_1 = _2519;
                    frontier_phi_65_pred_2 = _2518;
                    frontier_phi_65_pred_3 = _2517;
                    frontier_phi_65_pred_4 = _2516;
                    frontier_phi_65_pred_5 = _2515;
                }
                _2326 = frontier_phi_65_pred;
                _2324 = frontier_phi_65_pred_1;
                _2322 = frontier_phi_65_pred_2;
                _2320 = frontier_phi_65_pred_3;
                _2318 = frontier_phi_65_pred_4;
                _2316 = frontier_phi_65_pred_5;
                uint _2466 = _2465 + 1u;
                if (_2466 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2459 = _2316;
                    _2460 = _2318;
                    _2461 = _2320;
                    _2462 = _2322;
                    _2463 = _2324;
                    _2464 = _2326;
                    _2465 = _2466;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2315 = _2316;
            _2317 = _2318;
            _2319 = _2320;
            _2321 = _2322;
            _2323 = _2324;
            _2325 = _2326;
        }
        uvec4 _2329 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2330 = _2329.z;
        uint _2332 = (_2330 >> 8u) & 15u;
        float _2427;
        float _2429;
        float _2431;
        float _2433;
        float _2435;
        float _2437;
        if (((4294967295u << _2332) & _2213) == 0u)
        {
            _2427 = _2315;
            _2429 = _2317;
            _2431 = _2319;
            _2433 = _2321;
            _2435 = _2323;
            _2437 = _2325;
        }
        else
        {
            float _2452 = inversesqrt(dot(vec3(_2167, _2168, _2169), vec3(_2167, _2168, _2169)));
            float _2453 = _2452 * _2167;
            float _2454 = _2452 * _2168;
            float _2455 = _2452 * _2169;
            float frontier_phi_59_60_ladder;
            float frontier_phi_59_60_ladder_1;
            float frontier_phi_59_60_ladder_2;
            float frontier_phi_59_60_ladder_3;
            float frontier_phi_59_60_ladder_4;
            float frontier_phi_59_60_ladder_5;
            if (_2332 < ((_2330 >> 12u) & 15u))
            {
                float _2428;
                float _2430;
                float _2432;
                float _2434;
                float _2436;
                float _2438;
                float _2566 = _2315;
                float _2567 = _2317;
                float _2568 = _2319;
                float _2569 = _2321;
                float _2570 = _2323;
                float _2571 = _2325;
                uint _2572 = _2332;
                uint _2581;
                bool _2582;
                for (;;)
                {
                    _2581 = texelFetch(g_lightClassification, int((((_2207 << 5u) + (_2193 << 9u)) + (_2572 << 2u)) >> 2u)).x;
                    _2582 = _2581 == 0u;
                    float frontier_phi_71_pred;
                    float frontier_phi_71_pred_1;
                    float frontier_phi_71_pred_2;
                    float frontier_phi_71_pred_3;
                    float frontier_phi_71_pred_4;
                    float frontier_phi_71_pred_5;
                    if (_2582)
                    {
                        frontier_phi_71_pred = _2571;
                        frontier_phi_71_pred_1 = _2570;
                        frontier_phi_71_pred_2 = _2569;
                        frontier_phi_71_pred_3 = _2568;
                        frontier_phi_71_pred_4 = _2567;
                        frontier_phi_71_pred_5 = _2566;
                    }
                    else
                    {
                        float _2766;
                        float _2767;
                        float _2768;
                        float _2769;
                        float _2770;
                        float _2771;
                        float _3062;
                        float _3063;
                        float _3064;
                        float _3065;
                        float _3066;
                        float _3067;
                        float _2779 = _2566;
                        float _2780 = _2567;
                        float _2781 = _2568;
                        float _2782 = _2569;
                        float _2783 = _2570;
                        float _2784 = _2571;
                        uint _2785 = _2581;
                        uint _2786;
                        vec4 _2811;
                        float _2812;
                        vec4 _2827;
                        vec3 _2839;
                        vec4 _2855;
                        vec4 _2871;
                        float _2918;
                        bool _2919;
                        for (;;)
                        {
                            uint _2796 = ((_2572 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2785));
                            _2786 = (_2785 + 4294967295u) & _2785;
                            uint _2798 = _2796 * 40u;
                            _2811 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2798)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2798 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2798 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2798 + 3u)).x));
                            _2812 = _2811.w;
                            uint _2814 = (_2796 * 40u) + 4u;
                            _2827 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2814)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2814 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2814 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2814 + 3u)).x));
                            uint _2829 = (_2796 * 40u) + 8u;
                            _2839 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2829)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2829 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2829 + 2u)).x));
                            uint _2842 = (_2796 * 40u) + 16u;
                            _2855 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2842)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2842 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2842 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2842 + 3u)).x));
                            uint _2858 = (_2796 * 40u) + 20u;
                            _2871 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2858)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2858 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2858 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2858 + 3u)).x));
                            uint _2874 = (_2796 * 40u) + 24u;
                            vec4 _2887 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2874)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2874 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2874 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2874 + 3u)).x));
                            uint _2893 = (_2796 * 40u) + 28u;
                            vec4 _2906 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2893)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2893 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2893 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2893 + 3u)).x));
                            _2918 = fma(_2169, _2906.z, fma(_2168, _2906.y, _2906.x * _2167)) + _2906.w;
                            _2919 = !((fma(_2169, _2887.z, fma(_2168, _2887.y, _2887.x * _2167)) + _2887.w) <= 0.0);
                            float frontier_phi_77_pred;
                            float frontier_phi_77_pred_1;
                            float frontier_phi_77_pred_2;
                            float frontier_phi_77_pred_3;
                            float frontier_phi_77_pred_4;
                            float frontier_phi_77_pred_5;
                            if (_2919)
                            {
                                float _2946 = _2811.x - _2167;
                                float _2947 = _2811.y - _2168;
                                float _2948 = _2811.z - _2169;
                                float _2949 = dot(vec3(_2946, _2947, _2948), vec3(_2946, _2947, _2948));
                                float _2952 = inversesqrt(_2949);
                                float _2953 = _2952 * _2946;
                                float _2954 = _2952 * _2947;
                                float _2955 = _2952 * _2948;
                                float _2959 = 1.0 - (_2949 / (_2812 * _2812));
                                float _4018 = isnan(0.0) ? _2959 : (isnan(_2959) ? 0.0 : max(_2959, 0.0));
                                float _2960 = isnan(1.0) ? _4018 : (isnan(_4018) ? 1.0 : min(_4018, 1.0));
                                float _2964 = sqrt(_2949) * _2827.w;
                                float _2966 = 1.39999997615814208984375 / (_2964 + 1.39999997615814208984375);
                                float _2967 = _2966 * _2966;
                                float _2970 = ((1.0 - _2967) * dot(vec3(_2953, _2954, _2955), vec3(_421, _424, _427))) + _2967;
                                float _2973 = _2964 * _2964;
                                float _2977 = (fma(_2169, _2855.z, fma(_2168, _2855.y, _2855.x * _2167)) + _2855.w) / _2918;
                                float _2978 = (fma(_2169, _2871.z, fma(_2168, _2871.y, _2871.x * _2167)) + _2871.w) / _2918;
                                float _2982 = 1.0 - dot(vec2(_2977, _2978), vec2(_2977, _2978));
                                float _4034 = isnan(0.0) ? _2982 : (isnan(_2982) ? 0.0 : max(_2982, 0.0));
                                float _2983 = isnan(1.0) ? _4034 : (isnan(_4034) ? 1.0 : min(_4034, 1.0));
                                float _2984 = _2983 * (((isnan(0.0) ? _2970 : (isnan(_2970) ? 0.0 : max(_2970, 0.0))) * _2960) / ((_2973 * 0.699999988079071044921875) + 1.0));
                                float _2996 = exp2(log2(1.0 / ((_2973 * 3.5) + 5.0)) * 0.25);
                                float _2997 = 1.0 - _497;
                                float _3004 = sqrt(1.0 - ((1.0 - (_2997 * _2997)) * (1.0 - (_2996 * _2996))));
                                float _3005 = _3004 * _3004;
                                float _3006 = _3005 * _3005;
                                float _3007 = _2953 - _2453;
                                float _3008 = _2954 - _2454;
                                float _3009 = _2955 - _2455;
                                float _3013 = inversesqrt(dot(vec3(_3007, _3008, _3009), vec3(_3007, _3008, _3009)));
                                float _3017 = dot(vec3(_421, _424, _427), vec3((-0.0) - _2453, (-0.0) - _2454, (-0.0) - _2455));
                                float _4045 = isnan(0.0) ? _3017 : (isnan(_3017) ? 0.0 : max(_3017, 0.0));
                                float _3020 = isnan(1.0) ? _4045 : (isnan(_4045) ? 1.0 : min(_4045, 1.0));
                                float _3021 = dot(vec3(_421, _424, _427), vec3(_3013 * _3007, _3013 * _3008, _3013 * _3009));
                                float _4056 = isnan(0.0) ? _3021 : (isnan(_3021) ? 0.0 : max(_3021, 0.0));
                                float _3024 = isnan(1.0) ? _4056 : (isnan(_4056) ? 1.0 : min(_4056, 1.0));
                                float _3028 = ((_3024 * _3024) * (_3006 + (-1.0))) + 1.0;
                                float _3029 = _2966 * _3005;
                                float _3030 = _3029 * _3029;
                                float _3036 = ((1.0 - _3030) * dot(vec3(_421, _424, _427), vec3(_2953, _2954, _2955))) + _3030;
                                float _4067 = isnan(0.0) ? _3036 : (isnan(_3036) ? 0.0 : max(_3036, 0.0));
                                float _3037 = isnan(1.0) ? _4067 : (isnan(_4067) ? 1.0 : min(_4067, 1.0));
                                float _3038 = 1.0 - _3005;
                                float _3048 = (0.5 / (((_3037 * ((_3020 * _3038) + _3005)) + 9.9999999392252902907785028219223e-09) + (((_3037 * _3038) + _3005) * _3020))) * _3037;
                                float _4078 = isnan(0.0) ? _3048 : (isnan(_3048) ? 0.0 : max(_3048, 0.0));
                                float _3058 = (_2983 * _2960) * (((_3006 * 3.1415927410125732421875) * (isnan(1.0) ? _4078 : (isnan(_4078) ? 1.0 : min(_4078, 1.0)))) / ((_3028 * _3028) * ((_2973 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_77_pred = _2984 * _2827.z;
                                frontier_phi_77_pred_1 = _2984 * _2827.y;
                                frontier_phi_77_pred_2 = _2984 * _2827.x;
                                frontier_phi_77_pred_3 = _3058 * _2839.z;
                                frontier_phi_77_pred_4 = _3058 * _2839.y;
                                frontier_phi_77_pred_5 = _3058 * _2839.x;
                            }
                            else
                            {
                                frontier_phi_77_pred = 0.0;
                                frontier_phi_77_pred_1 = 0.0;
                                frontier_phi_77_pred_2 = 0.0;
                                frontier_phi_77_pred_3 = 0.0;
                                frontier_phi_77_pred_4 = 0.0;
                                frontier_phi_77_pred_5 = 0.0;
                            }
                            _3067 = frontier_phi_77_pred;
                            _3066 = frontier_phi_77_pred_1;
                            _3065 = frontier_phi_77_pred_2;
                            _3064 = frontier_phi_77_pred_3;
                            _3063 = frontier_phi_77_pred_4;
                            _3062 = frontier_phi_77_pred_5;
                            _2769 = _3065 + _2782;
                            _2770 = _3066 + _2783;
                            _2771 = _3067 + _2784;
                            _2766 = _3062 + _2779;
                            _2767 = _3063 + _2780;
                            _2768 = _3064 + _2781;
                            if (_2786 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2779 = _2766;
                                _2780 = _2767;
                                _2781 = _2768;
                                _2782 = _2769;
                                _2783 = _2770;
                                _2784 = _2771;
                                _2785 = _2786;
                                continue;
                            }
                        }
                        frontier_phi_71_pred = _2771;
                        frontier_phi_71_pred_1 = _2770;
                        frontier_phi_71_pred_2 = _2769;
                        frontier_phi_71_pred_3 = _2768;
                        frontier_phi_71_pred_4 = _2767;
                        frontier_phi_71_pred_5 = _2766;
                    }
                    _2438 = frontier_phi_71_pred;
                    _2436 = frontier_phi_71_pred_1;
                    _2434 = frontier_phi_71_pred_2;
                    _2432 = frontier_phi_71_pred_3;
                    _2430 = frontier_phi_71_pred_4;
                    _2428 = frontier_phi_71_pred_5;
                    uint _2573 = _2572 + 1u;
                    if (_2573 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2566 = _2428;
                        _2567 = _2430;
                        _2568 = _2432;
                        _2569 = _2434;
                        _2570 = _2436;
                        _2571 = _2438;
                        _2572 = _2573;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_59_60_ladder = _2438;
                frontier_phi_59_60_ladder_1 = _2436;
                frontier_phi_59_60_ladder_2 = _2434;
                frontier_phi_59_60_ladder_3 = _2432;
                frontier_phi_59_60_ladder_4 = _2430;
                frontier_phi_59_60_ladder_5 = _2428;
            }
            else
            {
                frontier_phi_59_60_ladder = _2325;
                frontier_phi_59_60_ladder_1 = _2323;
                frontier_phi_59_60_ladder_2 = _2321;
                frontier_phi_59_60_ladder_3 = _2319;
                frontier_phi_59_60_ladder_4 = _2317;
                frontier_phi_59_60_ladder_5 = _2315;
            }
            _2427 = frontier_phi_59_60_ladder_5;
            _2429 = frontier_phi_59_60_ladder_4;
            _2431 = frontier_phi_59_60_ladder_3;
            _2433 = frontier_phi_59_60_ladder_2;
            _2435 = frontier_phi_59_60_ladder_1;
            _2437 = frontier_phi_59_60_ladder;
        }
        float _2442 = isnan(1.0) ? _481 : (isnan(_481) ? 1.0 : min(_481, 1.0));
        _2225 = (_2442 * _2433) + _1662;
        _2227 = (_2442 * _2435) + _1664;
        _2229 = (_2442 * _2437) + _1666;
        _2231 = ((_2427 * _466) * _2442) + _2007;
        _2233 = ((_2429 * _468) * _2442) + _2009;
        _2235 = ((_2431 * _469) * _2442) + _2011;
    }
    else
    {
        _2225 = _1662;
        _2227 = _1664;
        _2229 = _1666;
        _2231 = _2007;
        _2233 = _2009;
        _2235 = _2011;
    }
    float _4094 = isnan(0.0) ? _456 : (isnan(_456) ? 0.0 : max(_456, 0.0));
    float _4105 = isnan(0.0) ? _457 : (isnan(_457) ? 0.0 : max(_457, 0.0));
    float _4116 = isnan(0.0) ? _458 : (isnan(_458) ? 0.0 : max(_458, 0.0));
    float _4127 = isnan(0.0) ? _302 : (isnan(_302) ? 0.0 : max(_302, 0.0));
    float _2260 = cbInstanceData._m0[_440 + 6u].w * (isnan(1.0) ? _4127 : (isnan(_4127) ? 1.0 : min(_4127, 1.0)));
    float _2265 = _399 / cbSceneParam._m0[86u].x;
    float _2266 = _400 / cbSceneParam._m0[86u].y;
    vec4 _2280 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2265, _2266, (log2((isnan(cbSceneParam._m0[77u].w) ? _331 : (isnan(_331) ? cbSceneParam._m0[77u].w : min(_331, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2282 = _2280.x;
    float _2283 = _2280.y;
    float _2284 = _2280.z;
    float _2285 = _2280.w;
    float _2377;
    float _2379;
    float _2381;
    float _2383;
    if (_331 > cbSceneParam._m0[78u].w)
    {
        float _2340 = isnan(_331) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _331 : min(cbSceneParam._m0[80u].w, _331));
        float _2341 = _2340 / _331;
        float _2352 = _2341 * _384;
        float _2353 = _385 * _2341;
        float _2354 = (-0.0) - _2353;
        float _2355 = _2341 * _386;
        float _2357 = (cbSceneParam._m0[77u].w * _2354) / _2340;
        float _2358 = _2357 + cbSceneParam._m0[79u].w;
        float _2359 = cbSceneParam._m0[79u].w - _2353;
        float _2365 = sqrt(((_2352 * _2352) + (_2353 * _2353)) + (_2355 * _2355));
        float _2368 = (1.0 - (cbSceneParam._m0[77u].w / _2340)) * _2365;
        float _2373 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2375 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2528;
        if (abs((_2354 - _2357) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2528 = ((((_2358 > 0.0) ? exp2(_2373 * _2358) : (2.0 - exp2(_2375 * _2358))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2368;
        }
        else
        {
            float _2488 = 1.0 / cbSceneParam._m0[80u].x;
            float _2489 = isnan(_2359) ? _2358 : (isnan(_2358) ? _2359 : max(_2358, _2359));
            float _2490 = isnan(_2359) ? _2358 : (isnan(_2358) ? _2359 : min(_2358, _2359));
            float _2499 = isnan(0.0) ? _2489 : (isnan(_2489) ? 0.0 : min(_2489, 0.0));
            float _2500 = isnan(0.0) ? _2490 : (isnan(_2490) ? 0.0 : min(_2490, 0.0));
            _2528 = ((abs(_2365 / _2354) * cbSceneParam._m0[80u].y) * ((((_2499 - _2500) * 2.0) - ((exp2(_2373 * (isnan(0.0) ? _2489 : (isnan(_2489) ? 0.0 : max(_2489, 0.0)))) - exp2(_2373 * (isnan(0.0) ? _2490 : (isnan(_2490) ? 0.0 : max(_2490, 0.0))))) * _2488)) - ((exp2(_2375 * _2499) - exp2(_2375 * _2500)) * _2488))) + (_2368 * cbSceneParam._m0[80u].z);
        }
        vec4 _2530 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2265, _2266, 1.0), 0.0);
        float _2539 = exp2((_2528 * (-1.44269502162933349609375)) * (1.0 - _2530.w));
        float _2540 = log2(_2539);
        float _2556 = log2(_2285);
        _2377 = (exp2(_2556 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2540 * cbSceneParam._m0[78u].x)) * _2530.x) / cbSceneParam._m0[78u].x)) + _2282;
        _2379 = (exp2(_2556 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2540 * cbSceneParam._m0[78u].y)) * _2530.y) / cbSceneParam._m0[78u].y)) + _2283;
        _2381 = (exp2(_2556 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2540 * cbSceneParam._m0[78u].z)) * _2530.z) / cbSceneParam._m0[78u].z)) + _2284;
        _2383 = _2539 * _2285;
    }
    else
    {
        _2377 = _2282;
        _2379 = _2283;
        _2381 = _2284;
        _2383 = _2285;
    }
    float _2395 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2396 = _2395 == 3.0;
    float _2397 = log2(_2383);
    float _2404 = exp2(_2397 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4094 : (isnan(_4094) ? 1.0 : min(_4094, 1.0))) * (_2225 + ((isnan(0.0) ? _1215 : (isnan(_1215) ? 0.0 : max(_1215, 0.0))) * _481))) + ((_2231 + ((isnan(0.0) ? _1513 : (isnan(_1513) ? 0.0 : max(_1513, 0.0))) * _1294)) * cbPerFrame._m0[3u].x));
    float _2405 = exp2(_2397 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4105 : (isnan(_4105) ? 1.0 : min(_4105, 1.0))) * (_2227 + ((isnan(0.0) ? _1218 : (isnan(_1218) ? 0.0 : max(_1218, 0.0))) * _481))) + ((_2233 + ((isnan(0.0) ? _1516 : (isnan(_1516) ? 0.0 : max(_1516, 0.0))) * _1294)) * cbPerFrame._m0[3u].x));
    float _2406 = exp2(_2397 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4116 : (isnan(_4116) ? 1.0 : min(_4116, 1.0))) * (_2229 + ((isnan(0.0) ? _1221 : (isnan(_1221) ? 0.0 : max(_1221, 0.0))) * _481))) + ((_2235 + ((isnan(0.0) ? _1519 : (isnan(_1519) ? 0.0 : max(_1519, 0.0))) * _1294)) * cbPerFrame._m0[3u].x));
    float _2415 = (_2395 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2415 * (_2396 ? _2404 : (_2404 + (cbSceneParam._m0[72u].w * _2377)));
    SV_Target.y = _2415 * (_2396 ? _2405 : (_2405 + (cbSceneParam._m0[72u].w * _2379)));
    SV_Target.z = _2415 * (_2396 ? _2406 : (_2406 + (cbSceneParam._m0[72u].w * _2381)));
    SV_Target.w = _2260;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2260;
    discard_exit();
}


