#version 460

out float gl_ClipDistance[2];
out float gl_CullDistance[1];

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[10];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 12, std140) uniform cbInstanceSlodDataUBO
{
    vec4 _m0[52];
} cbInstanceSlodData;

layout(set = 0, binding = 5, std140) uniform cbObjMatrixUBO
{
    vec4 _m0[6];
} cbObjMatrix;

layout(set = 0, binding = 10, std140) uniform cbInstanceIdxParamUBO
{
    vec4 _m0[1];
} cbInstanceIdxParam;

layout(set = 0, binding = 11, std140) uniform cbTexScrollUBO
{
    vec4 _m0[4];
} cbTexScroll;

layout(set = 0, binding = 26) uniform usamplerBuffer g_forceParam;
layout(set = 0, binding = 25) uniform usamplerBuffer g_InstanceIndexBuffer;

layout(location = 0) in vec3 POSITION;
layout(location = 1) in uvec4 NORMAL;
layout(location = 2) in uvec4 TANGENT;
layout(location = 3) in vec4 COLOR_1;
layout(location = 4) in ivec2 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_1;
layout(location = 1) out vec4 POSITION_1;
layout(location = 2) out vec4 NORMAL_1;
layout(location = 3) out vec4 TANGENT_1;
layout(location = 4) out float TEXCOORD_2;
layout(location = 4, component = 1) out float TEXCOORD_1_1;
layout(location = 5) out vec4 TEXCOORD_3;
layout(location = 4, component = 2) out float TEXCOORD_12;

uint _735;

void main()
{
    uint _90 = uint(gl_InstanceIndex) - uint(gl_BaseInstance);
    gl_Position.x = 0.0;
    gl_Position.y = 0.0;
    gl_Position.z = 0.0;
    gl_Position.w = 0.0;
    POSITION_1.x = 0.0;
    POSITION_1.y = 0.0;
    POSITION_1.z = 0.0;
    POSITION_1.w = 0.0;
    NORMAL_1.x = 0.0;
    NORMAL_1.y = 0.0;
    NORMAL_1.z = 0.0;
    NORMAL_1.w = 0.0;
    TANGENT_1.x = 0.0;
    TANGENT_1.y = 0.0;
    TANGENT_1.z = 0.0;
    TANGENT_1.w = 0.0;
    TEXCOORD_2 = 0.0;
    TEXCOORD_1_1 = 0.0;
    TEXCOORD_3.x = 0.0;
    TEXCOORD_3.y = 0.0;
    TEXCOORD_3.z = 0.0;
    TEXCOORD_3.w = 0.0;
    TEXCOORD_12 = 0.0;
    gl_ClipDistance[0u] = 0.0;
    gl_ClipDistance[1u] = 0.0;
    gl_CullDistance[0u] = 0.0;
    float _182 = (float(NORMAL.x) + (-127.0)) * 0.0078740157186985015869140625;
    float _184 = (float(NORMAL.y) + (-127.0)) * 0.0078740157186985015869140625;
    float _185 = (float(NORMAL.z) + (-127.0)) * 0.0078740157186985015869140625;
    float _195 = (float(TANGENT.x) + (-127.0)) * 0.0078740157186985015869140625;
    float _196 = (float(TANGENT.y) + (-127.0)) * 0.0078740157186985015869140625;
    float _197 = (float(TANGENT.z) + (-127.0)) * 0.0078740157186985015869140625;
    uint _199 = _90 * 13u;
    uvec4 _205 = floatBitsToUint(cbInstanceData._m0[_199 + 7u]);
    uint _208 = min(_205.y, 8u);
    precise float _212 = POSITION.x + 0.0;
    precise float _213 = POSITION.y + 0.0;
    precise float _214 = POSITION.z + 0.0;
    uint _219 = floatBitsToUint(cbInstanceIdxParam._m0[0u]).x + _90;
    uvec4 _221 = texelFetch(g_InstanceIndexBuffer, int(_219));
    uint _222 = _221.x;
    uint _224 = _222 * 13u;
    uint _231 = (floatBitsToUint(cbInstanceData._m0[_224 + 4u]).x + uint(float(NORMAL.w))) * 3u;
    uint _238 = _231 + 1u;
    uint _245 = _231 + 2u;
    precise float _252 = _212 * cbObjMatrix._m0[_231].x;
    precise float _253 = _213 * cbObjMatrix._m0[_231].y;
    precise float _254 = _253 + _252;
    precise float _255 = _214 * cbObjMatrix._m0[_231].z;
    precise float _256 = _255 + _254;
    precise float _257 = 1.0 * cbObjMatrix._m0[_231].w;
    precise float _259 = _257 + _256;
    precise float _260 = _212 * cbObjMatrix._m0[_238].x;
    precise float _261 = _213 * cbObjMatrix._m0[_238].y;
    precise float _262 = _261 + _260;
    precise float _263 = _214 * cbObjMatrix._m0[_238].z;
    precise float _264 = _263 + _262;
    precise float _265 = 1.0 * cbObjMatrix._m0[_238].w;
    precise float _266 = _265 + _264;
    precise float _267 = _212 * cbObjMatrix._m0[_245].x;
    precise float _268 = _213 * cbObjMatrix._m0[_245].y;
    precise float _269 = _268 + _267;
    precise float _270 = _214 * cbObjMatrix._m0[_245].z;
    precise float _271 = _270 + _269;
    precise float _272 = 1.0 * cbObjMatrix._m0[_245].w;
    precise float _273 = _272 + _271;
    float _276 = fma(_185, cbObjMatrix._m0[_231].z, fma(_184, cbObjMatrix._m0[_231].y, cbObjMatrix._m0[_231].x * _182));
    float _279 = fma(_185, cbObjMatrix._m0[_238].z, fma(_184, cbObjMatrix._m0[_238].y, cbObjMatrix._m0[_238].x * _182));
    float _282 = fma(_185, cbObjMatrix._m0[_245].z, fma(_184, cbObjMatrix._m0[_245].y, cbObjMatrix._m0[_245].x * _182));
    float _288 = cbSceneParam._m0[3u].x - cbObjMatrix._m0[_231].w;
    float _289 = cbSceneParam._m0[3u].y - cbObjMatrix._m0[_238].w;
    float _290 = cbSceneParam._m0[3u].z - cbObjMatrix._m0[_245].w;
    float _294 = inversesqrt(dot(vec3(_288, _289, _290), vec3(_288, _289, _290)));
    float _295 = _288 * _294;
    float _296 = _289 * _294;
    float _297 = _290 * _294;
    uint _298 = _90 * 26u;
    uint _299 = _298 + 24u;
    uint _307 = _298 + 25u;
    float _314 = dot(vec3(cbObjMatrix._m0[_231].x, cbObjMatrix._m0[_238].x, cbObjMatrix._m0[_245].x), vec3(_295, _296, _297));
    float _320 = dot(vec3(cbObjMatrix._m0[_231].z, cbObjMatrix._m0[_238].z, cbObjMatrix._m0[_245].z), vec3(_295, _296, _297));
    float _326 = (_320 * cbObjMatrix._m0[_231].z) + (_314 * cbObjMatrix._m0[_231].x);
    float _327 = (_320 * cbObjMatrix._m0[_238].z) + (_314 * cbObjMatrix._m0[_238].x);
    float _328 = (_320 * cbObjMatrix._m0[_245].z) + (_314 * cbObjMatrix._m0[_245].x);
    float _332 = inversesqrt(dot(vec3(_326, _327, _328), vec3(_326, _327, _328)));
    float _336 = dot(vec3(_326 * _332, _327 * _332, _328 * _332), vec3(_276, _279, _282));
    bool _340 = abs(_184) > 0.999000012874603271484375;
    bool _342 = !_340;
    float _345;
    if ((_336 <= cbInstanceSlodData._m0[_299].x) && _342)
    {
        _345 = -1.0;
    }
    else
    {
        float _424 = inversesqrt(dot(vec3(cbObjMatrix._m0[_231].y, cbObjMatrix._m0[_238].y, cbObjMatrix._m0[_245].y), vec3(cbObjMatrix._m0[_231].y, cbObjMatrix._m0[_238].y, cbObjMatrix._m0[_245].y)));
        float _431 = abs(dot(vec3(_295, _296, _297), vec3(_424 * cbObjMatrix._m0[_231].y, _424 * cbObjMatrix._m0[_238].y, _424 * cbObjMatrix._m0[_245].y)));
        bool _432 = _431 > 0.707106769084930419921875;
        float _792;
        if (_340 && _432)
        {
            float _654 = cbInstanceSlodData._m0[_299].w - cbInstanceSlodData._m0[_299].z;
            float _660 = ((1.0 / (isnan(9.9999997473787516355514526367188e-05) ? _654 : (isnan(_654) ? 9.9999997473787516355514526367188e-05 : max(_654, 9.9999997473787516355514526367188e-05)))) * (_431 - cbInstanceSlodData._m0[_299].w)) + 1.0;
            float _661 = isnan(0.0) ? _660 : (isnan(_660) ? 0.0 : max(_660, 0.0));
            _792 = isnan(1.0) ? _661 : (isnan(_661) ? 1.0 : min(_661, 1.0));
        }
        else
        {
            float frontier_phi_8_6_ladder;
            if ((_431 <= cbInstanceSlodData._m0[_307].z) && (_432 && _342))
            {
                float _798 = cbInstanceSlodData._m0[_307].y - cbInstanceSlodData._m0[_307].x;
                float _803 = ((1.0 / (isnan(9.9999997473787516355514526367188e-05) ? _798 : (isnan(_798) ? 9.9999997473787516355514526367188e-05 : max(_798, 9.9999997473787516355514526367188e-05)))) * (_431 - cbInstanceSlodData._m0[_307].y)) + 1.0;
                float _804 = isnan(0.0) ? _803 : (isnan(_803) ? 0.0 : max(_803, 0.0));
                float _806 = 1.0 - (isnan(1.0) ? _804 : (isnan(_804) ? 1.0 : min(_804, 1.0)));
                float _807 = cbInstanceSlodData._m0[_299].y - cbInstanceSlodData._m0[_299].x;
                float _812 = ((1.0 / (isnan(9.9999997473787516355514526367188e-05) ? _807 : (isnan(_807) ? 9.9999997473787516355514526367188e-05 : max(_807, 9.9999997473787516355514526367188e-05)))) * (_336 - cbInstanceSlodData._m0[_299].y)) + 1.0;
                float _813 = isnan(0.0) ? _812 : (isnan(_812) ? 0.0 : max(_812, 0.0));
                float _814 = isnan(1.0) ? _813 : (isnan(_813) ? 1.0 : min(_813, 1.0));
                frontier_phi_8_6_ladder = isnan(_806) ? _814 : (isnan(_814) ? _806 : min(_814, _806));
            }
            else
            {
                float frontier_phi_8_6_ladder_10_ladder;
                if (_340 || _432)
                {
                    frontier_phi_8_6_ladder_10_ladder = -1.0;
                }
                else
                {
                    float _841 = cbInstanceSlodData._m0[_299].y - cbInstanceSlodData._m0[_299].x;
                    float _846 = ((1.0 / (isnan(9.9999997473787516355514526367188e-05) ? _841 : (isnan(_841) ? 9.9999997473787516355514526367188e-05 : max(_841, 9.9999997473787516355514526367188e-05)))) * (_336 - cbInstanceSlodData._m0[_299].y)) + 1.0;
                    float _847 = isnan(0.0) ? _846 : (isnan(_846) ? 0.0 : max(_846, 0.0));
                    frontier_phi_8_6_ladder_10_ladder = isnan(1.0) ? _847 : (isnan(_847) ? 1.0 : min(_847, 1.0));
                }
                frontier_phi_8_6_ladder = frontier_phi_8_6_ladder_10_ladder;
            }
            _792 = frontier_phi_8_6_ladder;
        }
        float _795 = isnan(-1.0) ? _792 : (isnan(_792) ? (-1.0) : max(_792, -1.0));
        _345 = (isnan(1.0) ? _795 : (isnan(_795) ? 1.0 : min(_795, 1.0))) + 0.0625;
    }
    precise float _365 = TEXCOORD_1.x * cbMtdParam._m0[9u].z;
    uint _373 = _199 + 1u;
    uint _380 = _199 + 2u;
    precise float _387 = TEXCOORD_1.x * cbInstanceData._m0[_199].x;
    precise float _388 = TEXCOORD_1.y * cbInstanceData._m0[_199].y;
    precise float _389 = _388 + _387;
    precise float _390 = TEXCOORD_1.z * cbInstanceData._m0[_199].z;
    precise float _391 = _390 + _389;
    precise float _392 = 1.0 * cbInstanceData._m0[_199].w;
    precise float _393 = _392 + _391;
    precise float _394 = TEXCOORD_1.x * cbInstanceData._m0[_373].x;
    precise float _395 = TEXCOORD_1.y * cbInstanceData._m0[_373].y;
    precise float _396 = _395 + _394;
    precise float _397 = TEXCOORD_1.z * cbInstanceData._m0[_373].z;
    precise float _398 = _397 + _396;
    precise float _399 = 1.0 * cbInstanceData._m0[_373].w;
    precise float _400 = _399 + _398;
    precise float _401 = TEXCOORD_1.x * cbInstanceData._m0[_380].x;
    precise float _402 = TEXCOORD_1.y * cbInstanceData._m0[_380].y;
    precise float _403 = _402 + _401;
    precise float _404 = TEXCOORD_1.z * cbInstanceData._m0[_380].z;
    precise float _405 = _404 + _403;
    precise float _406 = 1.0 * cbInstanceData._m0[_380].w;
    precise float _407 = _406 + _405;
    precise float _408 = _259 - _393;
    precise float _409 = _266 - _400;
    precise float _410 = _273 - _407;
    precise float _411 = _408 * _408;
    precise float _412 = _409 * _409;
    precise float _413 = _411 + _412;
    precise float _414 = _410 * _410;
    precise float _415 = _413 + _414;
    precise float _417 = cbMtdParam._m0[9u].x * sqrt(_415);
    precise float _418 = _365 + _417;
    precise float _419 = cbPerFrame._m0[22u].x + _418;
    uint _420 = _205.w;
    float _435;
    float _437;
    float _439;
    if (_208 == 0u)
    {
        _435 = 0.0;
        _437 = 0.0;
        _439 = 0.0;
    }
    else
    {
        uint _653 = _205.z;
        precise float _436;
        precise float _438;
        precise float _440;
        float _832;
        float _834;
        float _836;
        float _666 = 0.0;
        float _667 = 0.0;
        float _668 = 0.0;
        uint _669 = _653;
        uint _671 = 0u;
        float _707;
        float _726;
        vec4 _740;
        float _741;
        float _742;
        float _756;
        float _757;
        float _758;
        float _775;
        float _776;
        float _777;
        float _778;
        bool _779;
        bool _780;
        bool _781;
        precise float _782;
        precise float _783;
        precise float _784;
        float _785;
        float _786;
        float _787;
        precise float _788;
        bool _791;
        for (;;)
        {
            uint _673 = _669 & 255u;
            uint _675 = _673 * 24u;
            uvec3 _685 = uvec3(texelFetch(g_forceParam, int(_675)).x, texelFetch(g_forceParam, int(_675 + 1u)).x, texelFetch(g_forceParam, int(_675 + 2u)).x);
            uint _690 = (_673 * 24u) + 4u;
            vec4 _703 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_690)).x, texelFetch(g_forceParam, int(_690 + 1u)).x, texelFetch(g_forceParam, int(_690 + 2u)).x, texelFetch(g_forceParam, int(_690 + 3u)).x));
            _707 = _703.w;
            uint _709 = (_673 * 24u) + 8u;
            vec4 _722 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_709)).x, texelFetch(g_forceParam, int(_709 + 1u)).x, texelFetch(g_forceParam, int(_709 + 2u)).x, texelFetch(g_forceParam, int(_709 + 3u)).x));
            _726 = _722.w;
            uint _729 = (_673 * 24u) + 12u;
            _740 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_729)).x, texelFetch(g_forceParam, int(_729 + 1u)).x, _735, texelFetch(g_forceParam, int(_729 + 3u)).x));
            _741 = _740.x;
            _742 = _740.w;
            uint _745 = (_673 * 24u) + 16u;
            vec3 _755 = uintBitsToFloat(uvec3(texelFetch(g_forceParam, int(_745)).x, texelFetch(g_forceParam, int(_745 + 1u)).x, texelFetch(g_forceParam, int(_745 + 2u)).x));
            _756 = _755.x;
            _757 = _755.y;
            _758 = _755.z;
            uint _761 = (_673 * 24u) + 20u;
            vec4 _774 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_761)).x, texelFetch(g_forceParam, int(_761 + 1u)).x, texelFetch(g_forceParam, int(_761 + 2u)).x, texelFetch(g_forceParam, int(_761 + 3u)).x));
            _775 = _774.x;
            _776 = _774.y;
            _777 = _774.z;
            _778 = _774.w;
            _779 = _685.x == 1u;
            _780 = _685.y == 1u;
            _781 = _685.z == 1u;
            _782 = _393 - _703.x;
            _783 = _400 - _703.y;
            _784 = _407 - _703.z;
            _785 = _779 ? _722.x : _782;
            _786 = _779 ? _722.y : _783;
            _787 = _779 ? _722.z : _784;
            _788 = dot(vec3(_785, _786, _787), vec3(_785, _786, _787));
            _791 = _788 > 0.0;
            float frontier_phi_12_pred;
            float frontier_phi_12_pred_1;
            float frontier_phi_12_pred_2;
            if (_791)
            {
                precise float _817 = _782 * _782;
                precise float _818 = _783 * _783;
                precise float _819 = _817 + _818;
                precise float _820 = _784 * _784;
                precise float _821 = _820 + _819;
                float _822 = sqrt(_821);
                float _823 = inversesqrt(_788);
                precise float _824 = _785 * _823;
                precise float _825 = _786 * _823;
                precise float _826 = _787 * _823;
                precise float _829 = _822 / (isnan(0.001000000047497451305389404296875) ? _740.y : (isnan(_740.y) ? 0.001000000047497451305389404296875 : max(_740.y, 0.001000000047497451305389404296875)));
                precise float _830 = 1.0 - _829;
                float _1088 = isnan(0.0) ? _830 : (isnan(_830) ? 0.0 : max(_830, 0.0));
                float _831 = isnan(1.0) ? _1088 : (isnan(_1088) ? 1.0 : min(_1088, 1.0));
                float _864;
                if (_781)
                {
                    float _851 = inversesqrt(dot(vec3(_782, _783, _784), vec3(_782, _783, _784)));
                    precise float _852 = _782 * _851;
                    precise float _853 = _783 * _851;
                    precise float _854 = _784 * _851;
                    precise float _858 = dot(vec3(_824, _825, _826), vec3(_852, _853, _854)) * 0.800000011920928955078125;
                    precise float _860 = _858 + 0.20000000298023223876953125;
                    float _1099 = isnan(0.0) ? _860 : (isnan(_860) ? 0.0 : max(_860, 0.0));
                    precise float _863 = _831 * (isnan(1.0) ? _1099 : (isnan(_1099) ? 1.0 : min(_1099, 1.0)));
                    _864 = _863;
                }
                else
                {
                    _864 = _831;
                }
                float frontier_phi_12_pred_15_ladder;
                float frontier_phi_12_pred_15_ladder_1;
                float frontier_phi_12_pred_15_ladder_2;
                if (_864 > 0.0)
                {
                    bool _867 = _779 && (!_781);
                    precise float _869 = _822 * (-4.0);
                    precise float _873 = 6.283184051513671875 / (isnan(0.001000000047497451305389404296875) ? _741 : (isnan(_741) ? 0.001000000047497451305389404296875 : max(_741, 0.001000000047497451305389404296875)));
                    precise float _875 = dot(vec2(_824, _826), vec2(_782, _784));
                    precise float _879 = _873 * _875;
                    precise float _880 = float(_867) * _879;
                    precise float _881 = _419 * _873;
                    precise float _882 = _881 - _880;
                    precise float _883 = (_867 ? 0.0 : _869) + _882;
                    precise float _885 = _726 * sin(_883);
                    precise float _886 = _825 * 0.0;
                    precise float _887 = _886 - _826;
                    precise float _888 = _826 * 0.0;
                    precise float _889 = _824 * 0.0;
                    precise float _890 = _888 - _889;
                    precise float _891 = _824 - _886;
                    precise float _892 = _742 * _885;
                    float _893 = _779 ? _892 : 0.0;
                    float _936;
                    if (_780)
                    {
                        precise float _896 = _756 * 2.0;
                        precise float _898 = _776 + _777;
                        precise float _899 = _778 + _898;
                        precise float _901 = 6.283184051513671875 / (isnan(0.001000000047497451305389404296875) ? _756 : (isnan(_756) ? 0.001000000047497451305389404296875 : max(_756, 0.001000000047497451305389404296875)));
                        precise float _902 = _775 * _901;
                        precise float _903 = (-0.0) - _824;
                        precise float _908 = dot(vec2(_826, _903), vec2(_782, _784)) / _896;
                        precise float _909 = (-0.0) - _908;
                        float _912 = fract(abs(_908));
                        precise float _913 = (-0.0) - _912;
                        precise float _915 = _896 * ((_908 >= _909) ? _912 : _913);
                        precise float _916 = _915 * 6.283184051513671875;
                        precise float _917 = _916 / _896;
                        precise float _919 = (isnan(5.0) ? _756 : (isnan(_756) ? 5.0 : min(_756, 5.0))) * sin(_917);
                        precise float _920 = _875 + _919;
                        precise float _921 = _756 * 0.25;
                        precise float _923 = _419 * _775;
                        precise float _924 = _923 - _921;
                        precise float _925 = _924 - _920;
                        precise float _926 = _775 * _899;
                        precise float _928 = _925 / (isnan(0.001000000047497451305389404296875) ? _926 : (isnan(_926) ? 0.001000000047497451305389404296875 : max(_926, 0.001000000047497451305389404296875)));
                        float _929 = fract(_928);
                        precise float _931 = 1.0 - _929;
                        float _932 = (_928 < 0.0) ? _931 : _929;
                        precise float _933 = _898 / _899;
                        precise float _934 = _776 / _899;
                        float _955;
                        if (_932 < _934)
                        {
                            precise float _953 = _932 / _934;
                            _955 = _953;
                        }
                        else
                        {
                            float frontier_phi_22_21_ladder;
                            if (_932 < _933)
                            {
                                precise float _965 = _932 - _934;
                                precise float _966 = _933 - _934;
                                precise float _967 = _965 / _966;
                                precise float _956 = 1.0 - _967;
                                frontier_phi_22_21_ladder = _956;
                            }
                            else
                            {
                                frontier_phi_22_21_ladder = 0.0;
                            }
                            _955 = frontier_phi_22_21_ladder;
                        }
                        precise float _957 = _758 * _955;
                        precise float _958 = _901 * _875;
                        precise float _959 = _419 * _902;
                        precise float _960 = _959 - _958;
                        precise float _962 = _757 + sin(_960);
                        precise float _964 = _957 * abs(_962);
                        precise float _937 = _964 + 0.0;
                        _936 = _937;
                    }
                    else
                    {
                        _936 = 0.0;
                    }
                    precise float _938 = _707 + _885;
                    precise float _939 = _938 + _936;
                    precise float _940 = _824 * _939;
                    precise float _941 = _825 * _939;
                    precise float _942 = _826 * _939;
                    precise float _943 = _887 * _893;
                    precise float _944 = _890 * _893;
                    precise float _945 = _891 * _893;
                    precise float _946 = _943 + _940;
                    precise float _947 = _944 + _941;
                    precise float _948 = _945 + _942;
                    precise float _949 = _864 * _946;
                    precise float _950 = _864 * _947;
                    precise float _951 = _864 * _948;
                    precise float _833 = _949 * 0.0500000007450580596923828125;
                    precise float _835 = _950 * 0.0500000007450580596923828125;
                    precise float _837 = _951 * 0.0500000007450580596923828125;
                    frontier_phi_12_pred_15_ladder = _833;
                    frontier_phi_12_pred_15_ladder_1 = _835;
                    frontier_phi_12_pred_15_ladder_2 = _837;
                }
                else
                {
                    frontier_phi_12_pred_15_ladder = 0.0;
                    frontier_phi_12_pred_15_ladder_1 = 0.0;
                    frontier_phi_12_pred_15_ladder_2 = 0.0;
                }
                frontier_phi_12_pred = frontier_phi_12_pred_15_ladder;
                frontier_phi_12_pred_1 = frontier_phi_12_pred_15_ladder_1;
                frontier_phi_12_pred_2 = frontier_phi_12_pred_15_ladder_2;
            }
            else
            {
                frontier_phi_12_pred = 0.0;
                frontier_phi_12_pred_1 = 0.0;
                frontier_phi_12_pred_2 = 0.0;
            }
            _832 = frontier_phi_12_pred;
            _834 = frontier_phi_12_pred_1;
            _836 = frontier_phi_12_pred_2;
            _436 = _666 + _832;
            _438 = _667 + _834;
            _440 = _668 + _836;
            uint _672 = _671 + 1u;
            if (_672 == _208)
            {
                break;
            }
            else
            {
                _666 = _436;
                _667 = _438;
                _668 = _440;
                _669 = (_671 != 3u) ? (_669 >> 8u) : _420;
                _671 = _672;
                continue;
            }
        }
        _435 = _436;
        _437 = _438;
        _439 = _440;
    }
    precise float _441 = _435 * _435;
    precise float _442 = _437 * _437;
    precise float _443 = _441 + _442;
    precise float _444 = _439 * _439;
    precise float _445 = _443 + _444;
    float _446 = sqrt(_445);
    bool _447 = _446 < 0.00011000000085914507508277893066406;
    float _452 = inversesqrt(dot(vec3(cbInstanceData._m0[_199].x, cbInstanceData._m0[_373].x, cbInstanceData._m0[_380].x), vec3(cbInstanceData._m0[_199].x, cbInstanceData._m0[_373].x, cbInstanceData._m0[_380].x)));
    precise float _453 = cbInstanceData._m0[_199].x * _452;
    precise float _454 = cbInstanceData._m0[_373].x * _452;
    precise float _455 = cbInstanceData._m0[_380].x * _452;
    float _459 = inversesqrt(dot(vec3(cbInstanceData._m0[_199].y, cbInstanceData._m0[_373].y, cbInstanceData._m0[_380].y), vec3(cbInstanceData._m0[_199].y, cbInstanceData._m0[_373].y, cbInstanceData._m0[_380].y)));
    precise float _460 = cbInstanceData._m0[_199].y * _459;
    precise float _461 = cbInstanceData._m0[_373].y * _459;
    precise float _462 = cbInstanceData._m0[_380].y * _459;
    float _466 = inversesqrt(dot(vec3(cbInstanceData._m0[_199].z, cbInstanceData._m0[_373].z, cbInstanceData._m0[_380].z), vec3(cbInstanceData._m0[_199].z, cbInstanceData._m0[_373].z, cbInstanceData._m0[_380].z)));
    precise float _467 = cbInstanceData._m0[_199].z * _466;
    precise float _468 = cbInstanceData._m0[_373].z * _466;
    precise float _469 = cbInstanceData._m0[_380].z * _466;
    precise float _470 = _453 * 0.0;
    precise float _471 = 1.0 * _460;
    precise float _472 = _471 + _470;
    precise float _473 = 0.0 * _467;
    precise float _474 = _473 + _472;
    precise float _475 = _454 * 0.0;
    precise float _476 = 1.0 * _461;
    precise float _477 = _476 + _475;
    precise float _478 = 0.0 * _468;
    precise float _479 = _478 + _477;
    precise float _480 = _455 * 0.0;
    precise float _481 = 1.0 * _462;
    precise float _482 = _481 + _480;
    precise float _483 = 0.0 * _469;
    precise float _484 = _483 + _482;
    float _488 = inversesqrt(dot(vec3(_435, _437, _439), vec3(_435, _437, _439)));
    precise float _489 = _435 * _488;
    precise float _490 = _437 * _488;
    precise float _491 = _439 * _488;
    precise float _492 = _479 * _491;
    precise float _493 = _484 * _490;
    precise float _494 = _492 - _493;
    precise float _495 = _484 * _489;
    precise float _496 = _474 * _491;
    precise float _497 = _495 - _496;
    precise float _498 = _474 * _490;
    precise float _499 = _479 * _489;
    precise float _500 = _498 - _499;
    float _504 = inversesqrt(dot(vec3(_494, _497, _500), vec3(_494, _497, _500)));
    precise float _505 = _504 * _494;
    precise float _506 = _504 * _497;
    precise float _507 = _504 * _500;
    precise float _508 = _446 + 1.0;
    precise float _510 = cbMtdParam._m0[9u].y * log2(_508);
    precise float _511 = dot(vec3(_505, _506, _507), vec3(_408, _409, _410));
    precise float _514 = _505 * _511;
    precise float _515 = _506 * _511;
    precise float _516 = _507 * _511;
    precise float _517 = _393 + _514;
    precise float _518 = _400 + _515;
    precise float _519 = _407 + _516;
    precise float _520 = _259 - _517;
    precise float _521 = _266 - _518;
    precise float _522 = _273 - _519;
    precise float _523 = _506 * _522;
    precise float _524 = _507 * _521;
    precise float _525 = _523 - _524;
    precise float _526 = _507 * _520;
    precise float _527 = _505 * _522;
    precise float _528 = _526 - _527;
    precise float _529 = _505 * _521;
    precise float _530 = _506 * _520;
    precise float _531 = _529 - _530;
    float _532 = sin(_510);
    float _533 = cos(_510);
    precise float _534 = _520 * _533;
    precise float _535 = _521 * _533;
    precise float _536 = _522 * _533;
    precise float _537 = _532 * _525;
    precise float _538 = _532 * _528;
    precise float _539 = _532 * _531;
    precise float _540 = _534 + _537;
    precise float _541 = _535 + _538;
    precise float _542 = _539 + _536;
    precise float _543 = _517 + _540;
    precise float _544 = _518 + _541;
    precise float _545 = _519 + _542;
    precise float _546 = _543 - _259;
    precise float _547 = _544 - _266;
    precise float _548 = _545 - _273;
    precise float _552 = _259 + (_447 ? 0.0 : _546);
    precise float _553 = _266 + (_447 ? 0.0 : _547);
    precise float _554 = _273 + (_447 ? 0.0 : _548);
    precise float _555 = _552 - cbSceneParam._m0[3u].x;
    precise float _556 = _553 - cbSceneParam._m0[3u].y;
    precise float _557 = _554 - cbSceneParam._m0[3u].z;
    precise float _583 = cbSceneParam._m0[24u].x * _555;
    precise float _584 = _556 * cbSceneParam._m0[24u].y;
    precise float _585 = _584 + _583;
    precise float _586 = _557 * cbSceneParam._m0[24u].z;
    precise float _587 = _586 + _585;
    precise float _588 = 1.0 * cbSceneParam._m0[24u].w;
    precise float _589 = _588 + _587;
    precise float _590 = cbSceneParam._m0[25u].x * _555;
    precise float _591 = _556 * cbSceneParam._m0[25u].y;
    precise float _592 = _591 + _590;
    precise float _593 = _557 * cbSceneParam._m0[25u].z;
    precise float _594 = _593 + _592;
    precise float _595 = 1.0 * cbSceneParam._m0[25u].w;
    precise float _596 = _595 + _594;
    precise float _597 = cbSceneParam._m0[26u].x * _555;
    precise float _598 = _556 * cbSceneParam._m0[26u].y;
    precise float _599 = _598 + _597;
    precise float _600 = _557 * cbSceneParam._m0[26u].z;
    precise float _601 = _600 + _599;
    precise float _602 = 1.0 * cbSceneParam._m0[26u].w;
    precise float _603 = _602 + _601;
    precise float _604 = _555 * cbSceneParam._m0[27u].x;
    precise float _605 = _556 * cbSceneParam._m0[27u].y;
    precise float _606 = _605 + _604;
    precise float _607 = _557 * cbSceneParam._m0[27u].z;
    precise float _608 = _607 + _606;
    precise float _609 = 1.0 * cbSceneParam._m0[27u].w;
    precise float _610 = _609 + _608;
    gl_Position.x = _589;
    gl_Position.y = _596;
    gl_Position.z = _603;
    gl_Position.w = _610;
    POSITION_1.x = _589;
    POSITION_1.y = _596;
    POSITION_1.z = _603;
    POSITION_1.w = _610;
    NORMAL_1.x = _276;
    NORMAL_1.y = _279;
    NORMAL_1.z = _282;
    NORMAL_1.w = float(_222);
    TANGENT_1.x = fma(_197, cbObjMatrix._m0[_231].z, fma(_196, cbObjMatrix._m0[_231].y, cbObjMatrix._m0[_231].x * _195));
    TANGENT_1.y = fma(_197, cbObjMatrix._m0[_238].z, fma(_196, cbObjMatrix._m0[_238].y, cbObjMatrix._m0[_238].x * _195));
    TANGENT_1.z = fma(_197, cbObjMatrix._m0[_245].z, fma(_196, cbObjMatrix._m0[_245].y, cbObjMatrix._m0[_245].x * _195));
    TANGENT_1.w = (float(TANGENT.w) + (-127.0)) * 0.0078740157186985015869140625;
    TEXCOORD_2 = ((float(int(uint(TEXCOORD.x))) * 0.00048828125) * cbTexScroll._m0[0u].x) + cbTexScroll._m0[0u].z;
    TEXCOORD_1_1 = ((float(int(uint(TEXCOORD.y))) * 0.00048828125) * cbTexScroll._m0[0u].y) + cbTexScroll._m0[0u].w;
    TEXCOORD_3.x = TEXCOORD_1.x;
    TEXCOORD_3.y = TEXCOORD_1.y;
    TEXCOORD_3.z = TEXCOORD_1.z;
    TEXCOORD_3.w = COLOR_1.x;
    TEXCOORD_12 = _345;
    gl_ClipDistance[0u] = dot(vec4(_589, _596, _603, _610), vec4(cbSceneParam._m0[4u]));
    gl_ClipDistance[1u] = dot(vec4(_589, _596, _603, _610), vec4(cbInstanceData._m0[_224 + 3u]));
    gl_CullDistance[0u] = (_345 < 0.0) ? (-1.0) : 0.0;
}


