#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[10];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D SLOD_CrossBillboard_SAT_PivotAnim_snp_0_Texture2D_17;
layout(set = 0, binding = 1) uniform texture2D SLOD_CrossBillboard_SAT_PivotAnim_snp_0_Texture2D_18;
layout(set = 0, binding = 2) uniform texture2D SLOD_CrossBillboard_SAT_PivotAnim_snp_0_Texture2D_19;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in float TEXCOORD;
layout(location = 4, component = 1) in float TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 4, component = 2) in float TEXCOORD_12;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _863;
float _3251;
float _3252;
float _3253;
float _3254;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _184 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _185 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _186 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _192 = inversesqrt(dot(vec3(_184, _185, _186), vec3(_184, _185, _186)));
    float _199 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _200 = _199 * NORMAL.x;
    float _201 = _199 * NORMAL.y;
    float _202 = _199 * NORMAL.z;
    float _206 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _214;
    float _215;
    float _216;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _214 = (-0.0) - _200;
        _215 = (-0.0) - _201;
        _216 = (-0.0) - _202;
    }
    else
    {
        _214 = _200;
        _215 = _201;
        _216 = _202;
    }
    vec4 _230 = texture(sampler2D(SLOD_CrossBillboard_SAT_PivotAnim_snp_0_Texture2D_17, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1) + cbTextureTilingScale._m0[0u].w));
    float _236 = _230.w;
    float _237 = 1.0 / _236;
    float _239 = _230.x * _237;
    float _240 = _237 * _230.y;
    float _241 = _237 * _230.z;
    vec4 _253 = texture(sampler2D(SLOD_CrossBillboard_SAT_PivotAnim_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1) + cbTextureTilingScale._m0[1u].w));
    float _256 = _253.x * _237;
    vec4 _268 = texture(sampler2D(SLOD_CrossBillboard_SAT_PivotAnim_snp_0_Texture2D_19, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1) + cbTextureTilingScale._m0[2u].w));
    float _276 = (_268.x * 2.0) + (-1.0);
    float _278 = (_268.y * 2.0) + (-1.0);
    float _279 = dot(vec2(_276, _278), vec2(_276, _278));
    float _3263 = isnan(0.0) ? _279 : (isnan(_279) ? 0.0 : max(_279, 0.0));
    float _284 = sqrt(1.0 - (isnan(1.0) ? _3263 : (isnan(_3263) ? 1.0 : min(_3263, 1.0))));
    float _285 = _268.z * _237;
    float _288 = fma(_284, _214, fma(_278, _206 * TANGENT.x, (_192 * _184) * _276));
    float _291 = fma(_284, _215, fma(_278, _206 * TANGENT.y, (_192 * _185) * _276));
    float _294 = fma(_284, _216, fma(_278, _206 * TANGENT.z, (_192 * _186) * _276));
    float _298 = inversesqrt(dot(vec3(_288, _291, _294), vec3(_288, _291, _294)));
    float _299 = _298 * _288;
    float _300 = _298 * _291;
    float _301 = _298 * _294;
    float _3274 = isnan(0.0) ? _236 : (isnan(_236) ? 0.0 : max(_236, 0.0));
    float _302 = isnan(1.0) ? _3274 : (isnan(_3274) ? 1.0 : min(_3274, 1.0));
    float _3285 = isnan(0.0) ? _285 : (isnan(_285) ? 0.0 : max(_285, 0.0));
    float _303 = isnan(1.0) ? _3285 : (isnan(_3285) ? 1.0 : min(_3285, 1.0));
    float _3296 = isnan(0.0) ? _239 : (isnan(_239) ? 0.0 : max(_239, 0.0));
    float _3307 = isnan(0.0) ? _240 : (isnan(_240) ? 0.0 : max(_240, 0.0));
    float _3318 = isnan(0.0) ? _241 : (isnan(_241) ? 0.0 : max(_241, 0.0));
    float _3329 = isnan(0.0) ? _256 : (isnan(_256) ? 0.0 : max(_256, 0.0));
    float _307 = isnan(1.0) ? _3329 : (isnan(_3329) ? 1.0 : min(_3329, 1.0));
    float _310 = gl_FragCoord.x * 0.125;
    float _312 = gl_FragCoord.y * 0.125;
    if (!(!(texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_310, _312)).w > TEXCOORD_12)))
    {
        discard_state = true;
    }
    float _331 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _374 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _384 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _374);
    float _385 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _374);
    float _386 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _374);
    float _390 = inversesqrt(dot(vec3(_384, _385, _386), vec3(_384, _385, _386)));
    float _391 = _384 * _390;
    float _392 = _385 * _390;
    float _393 = _386 * _390;
    vec4 _395 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_310, _312));
    float _397 = _395.w;
    float _403 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _404 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _425 = fma(_301, cbSceneParam._m0[5u].z, fma(_300, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _299));
    float _428 = fma(_301, cbSceneParam._m0[6u].z, fma(_300, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _299));
    float _431 = fma(_301, cbSceneParam._m0[7u].z, fma(_300, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _299));
    uint _444 = uint(roundEven(NORMAL.w)) * 13u;
    uint _446 = _444 + 9u;
    uint _447 = _446 + uint(cbMatDynParam._m0[0u].w);
    float _453 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3296 : (isnan(_3296) ? 1.0 : min(_3296, 1.0)))) * cbInstanceData._m0[_447].x;
    float _454 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3307 : (isnan(_3307) ? 1.0 : min(_3307, 1.0)))) * cbInstanceData._m0[_447].y;
    float _455 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3318 : (isnan(_3318) ? 1.0 : min(_3318, 1.0)))) * cbInstanceData._m0[_447].z;
    float _3340 = isnan(0.0) ? _453 : (isnan(_453) ? 0.0 : max(_453, 0.0));
    float _456 = isnan(1.0) ? _3340 : (isnan(_3340) ? 1.0 : min(_3340, 1.0));
    float _3351 = isnan(0.0) ? _454 : (isnan(_454) ? 0.0 : max(_454, 0.0));
    float _457 = isnan(1.0) ? _3351 : (isnan(_3351) ? 1.0 : min(_3351, 1.0));
    float _3362 = isnan(0.0) ? _455 : (isnan(_455) ? 0.0 : max(_455, 0.0));
    float _458 = isnan(1.0) ? _3362 : (isnan(_3362) ? 1.0 : min(_3362, 1.0));
    float _459 = 1.0 - _307;
    float _460 = _456 * _459;
    float _461 = _457 * _459;
    float _462 = _458 * _459;
    float _467 = (_456 + (-0.039999999105930328369140625)) * _307;
    float _468 = (_457 + (-0.039999999105930328369140625)) * _307;
    float _469 = (_458 + (-0.039999999105930328369140625)) * _307;
    float _470 = _467 + 0.039999999105930328369140625;
    float _472 = _468 + 0.039999999105930328369140625;
    float _473 = _469 + 0.039999999105930328369140625;
    vec4 _482 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _403, cbSceneParam._m0[86u].y * _404));
    float _485 = _482.x * TEXCOORD_3.w;
    float _486 = dot(vec3(_299, _300, _301), vec3(_391, _392, _393));
    float _489 = _486 * 2.0;
    float _493 = (_489 * _299) - _391;
    float _494 = (_489 * _300) - _392;
    float _495 = (_489 * _301) - _393;
    float _499 = abs(dot(vec3(_391, _392, _393), vec3(_299, _300, _301)));
    float _3373 = isnan(0.0) ? _499 : (isnan(_499) ? 0.0 : max(_499, 0.0));
    float _501 = sqrt(_303);
    float _514 = exp2((_501 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3373 : (isnan(_3373) ? 1.0 : min(_3373, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_501 * 3.0));
    float _520 = (1.0 - _514) * ((_501 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _521 = _514 * _501;
    float _549 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _553 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _557 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _862;
    float _864;
    float _865;
    float _866;
    float _867;
    float _868;
    float _869;
    float _870;
    float _871;
    float _872;
    float _873;
    float _874;
    float _875;
    float _876;
    float _877;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _587 = fma(_557, cbModelParam._m0[26u].z, fma(_553, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _549));
        float _591 = fma(_557, cbModelParam._m0[27u].z, fma(_553, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _549));
        float _595 = fma(_557, cbModelParam._m0[28u].z, fma(_553, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _549));
        float _620 = _549 + _299;
        float _621 = _553 + _300;
        float _622 = _557 + _301;
        float _632 = fma(_622, cbModelParam._m0[26u].z, fma(_621, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _620)) - _587;
        float _633 = fma(_622, cbModelParam._m0[27u].z, fma(_621, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _620)) - _591;
        float _634 = fma(_622, cbModelParam._m0[28u].z, fma(_621, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _620)) - _595;
        float _638 = inversesqrt(dot(vec3(_632, _633, _634), vec3(_632, _633, _634)));
        float _651 = ((_638 * _632) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_587 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _652 = ((_638 * _633) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_591 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _653 = ((_638 * _634) / cbModelParam._m0[34u].z) + ((((((_595 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _656 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_651, _652, _653), 0.0);
        vec4 _663 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_651, _652, _653), 0.0);
        vec4 _670 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_651, _652, _653), 0.0);
        vec4 _677 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_651, _652, _653), 0.0);
        float _690 = exp2((_656.w + (-0.5)) * 20.0) * 2.0;
        float _691 = _690 * (_656.x + (-0.5));
        float _692 = _690 * (_656.y + (-0.5));
        float _693 = _690 * (_656.z + (-0.5));
        float _700 = exp2((_663.w + (-0.5)) * 20.0) * 2.0;
        float _701 = _700 * (_663.x + (-0.5));
        float _702 = _700 * (_663.y + (-0.5));
        float _703 = _700 * (_663.z + (-0.5));
        float _710 = exp2((_670.w + (-0.5)) * 20.0) * 2.0;
        float _711 = _710 * (_670.x + (-0.5));
        float _712 = _710 * (_670.y + (-0.5));
        float _713 = _710 * (_670.z + (-0.5));
        float _720 = exp2((_677.w + (-0.5)) * 20.0) * 2.0;
        float _721 = _720 * (_677.x + (-0.5));
        float _722 = _720 * (_677.y + (-0.5));
        float _723 = _720 * (_677.z + (-0.5));
        float _724 = isnan(0.0) ? _721 : (isnan(_721) ? 0.0 : max(_721, 0.0));
        float _725 = isnan(0.0) ? _722 : (isnan(_722) ? 0.0 : max(_722, 0.0));
        float _726 = isnan(0.0) ? _723 : (isnan(_723) ? 0.0 : max(_723, 0.0));
        float _727 = _691 * 0.5;
        float _728 = _701 * 0.5;
        float _729 = _711 * 0.5;
        float _730 = dot(vec3(_727, _728, _729), vec3(_727, _728, _729));
        float _735 = (_730 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_730);
        float _744 = (dot(vec3(_299, _300, _301), vec3(_735 * _727, _735 * _728, _735 * _729)) + 1.0) * 0.5;
        float _3399 = isnan(0.0) ? _744 : (isnan(_744) ? 0.0 : max(_744, 0.0));
        float _754 = sqrt(((_728 * _728) + (_727 * _727)) + (_729 * _729)) / (_724 + 9.9999997473787516355514526367188e-06);
        float _3410 = isnan(0.0) ? _754 : (isnan(_754) ? 0.0 : max(_754, 0.0));
        float _755 = isnan(1.0) ? _3410 : (isnan(_3410) ? 1.0 : min(_3410, 1.0));
        float _756 = _755 * 2.0;
        float _760 = (1.0 - _755) / (_755 + 1.0);
        float _3421 = isnan(0.0) ? _760 : (isnan(_760) ? 0.0 : max(_760, 0.0));
        float _761 = isnan(1.0) ? _3421 : (isnan(_3421) ? 1.0 : min(_3421, 1.0));
        float _770 = ((((1.0 - _761) * (_756 + 2.0)) * exp2(log2(isnan(1.0) ? _3399 : (isnan(_3399) ? 1.0 : min(_3399, 1.0))) * (_756 + 1.0))) + _761) * _724;
        float _771 = _692 * 0.5;
        float _772 = _702 * 0.5;
        float _773 = _712 * 0.5;
        float _774 = dot(vec3(_771, _772, _773), vec3(_771, _772, _773));
        float _779 = (_774 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_774);
        float _787 = (dot(vec3(_299, _300, _301), vec3(_779 * _771, _779 * _772, _779 * _773)) + 1.0) * 0.5;
        float _3432 = isnan(0.0) ? _787 : (isnan(_787) ? 0.0 : max(_787, 0.0));
        float _796 = sqrt(((_772 * _772) + (_771 * _771)) + (_773 * _773)) / (_725 + 9.9999997473787516355514526367188e-06);
        float _3443 = isnan(0.0) ? _796 : (isnan(_796) ? 0.0 : max(_796, 0.0));
        float _797 = isnan(1.0) ? _3443 : (isnan(_3443) ? 1.0 : min(_3443, 1.0));
        float _798 = _797 * 2.0;
        float _802 = (1.0 - _797) / (_797 + 1.0);
        float _3454 = isnan(0.0) ? _802 : (isnan(_802) ? 0.0 : max(_802, 0.0));
        float _803 = isnan(1.0) ? _3454 : (isnan(_3454) ? 1.0 : min(_3454, 1.0));
        float _812 = ((((1.0 - _803) * (_798 + 2.0)) * exp2(log2(isnan(1.0) ? _3432 : (isnan(_3432) ? 1.0 : min(_3432, 1.0))) * (_798 + 1.0))) + _803) * _725;
        float _813 = _693 * 0.5;
        float _814 = _703 * 0.5;
        float _815 = _713 * 0.5;
        float _816 = dot(vec3(_813, _814, _815), vec3(_813, _814, _815));
        float _821 = (_816 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_816);
        float _829 = (dot(vec3(_299, _300, _301), vec3(_821 * _813, _821 * _814, _821 * _815)) + 1.0) * 0.5;
        float _3465 = isnan(0.0) ? _829 : (isnan(_829) ? 0.0 : max(_829, 0.0));
        float _838 = sqrt(((_814 * _814) + (_813 * _813)) + (_815 * _815)) / (_726 + 9.9999997473787516355514526367188e-06);
        float _3476 = isnan(0.0) ? _838 : (isnan(_838) ? 0.0 : max(_838, 0.0));
        float _839 = isnan(1.0) ? _3476 : (isnan(_3476) ? 1.0 : min(_3476, 1.0));
        float _840 = _839 * 2.0;
        float _844 = (1.0 - _839) / (_839 + 1.0);
        float _3487 = isnan(0.0) ? _844 : (isnan(_844) ? 0.0 : max(_844, 0.0));
        float _845 = isnan(1.0) ? _3487 : (isnan(_3487) ? 1.0 : min(_3487, 1.0));
        float _854 = ((((1.0 - _845) * (_840 + 2.0)) * exp2(log2(isnan(1.0) ? _3465 : (isnan(_3465) ? 1.0 : min(_3465, 1.0))) * (_840 + 1.0))) + _845) * _726;
        _862 = _693;
        _864 = _692;
        _865 = _691;
        _866 = _703;
        _867 = _702;
        _868 = _701;
        _869 = _713;
        _870 = _712;
        _871 = _711;
        _872 = _726;
        _873 = _725;
        _874 = _724;
        _875 = cbModelParam._m0[36u].z * (isnan(0.0) ? _770 : (isnan(_770) ? 0.0 : max(_770, 0.0)));
        _876 = cbModelParam._m0[36u].z * (isnan(0.0) ? _812 : (isnan(_812) ? 0.0 : max(_812, 0.0)));
        _877 = cbModelParam._m0[36u].z * (isnan(0.0) ? _854 : (isnan(_854) ? 0.0 : max(_854, 0.0)));
    }
    else
    {
        _862 = _863;
        _864 = _863;
        _865 = _863;
        _866 = _863;
        _867 = _863;
        _868 = _863;
        _869 = _863;
        _870 = _863;
        _871 = _863;
        _872 = _863;
        _873 = _863;
        _874 = _863;
        _875 = 0.0;
        _876 = 0.0;
        _877 = 0.0;
    }
    float _1172;
    float _1173;
    float _1174;
    float _1175;
    float _1176;
    float _1177;
    float _1178;
    float _1179;
    float _1180;
    float _1181;
    float _1182;
    float _1183;
    float _1184;
    float _1185;
    float _1186;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _903 = fma(_557, cbModelParam._m0[30u].z, fma(_553, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _549));
        float _907 = fma(_557, cbModelParam._m0[31u].z, fma(_553, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _549));
        float _911 = fma(_557, cbModelParam._m0[32u].z, fma(_553, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _549));
        float _934 = _549 + _299;
        float _935 = _553 + _300;
        float _936 = _557 + _301;
        float _946 = fma(_936, cbModelParam._m0[30u].z, fma(_935, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _934)) - _903;
        float _947 = fma(_936, cbModelParam._m0[31u].z, fma(_935, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _934)) - _907;
        float _948 = fma(_936, cbModelParam._m0[32u].z, fma(_935, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _934)) - _911;
        float _952 = inversesqrt(dot(vec3(_946, _947, _948), vec3(_946, _947, _948)));
        float _965 = ((_952 * _946) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_903 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _966 = ((_952 * _947) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_907 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _967 = ((_952 * _948) / cbModelParam._m0[35u].z) + ((((((_911 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _969 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_965, _966, _967), 0.0);
        vec4 _976 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_965, _966, _967), 0.0);
        vec4 _983 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_965, _966, _967), 0.0);
        vec4 _990 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_965, _966, _967), 0.0);
        float _1002 = exp2((_969.w + (-0.5)) * 20.0) * 2.0;
        float _1003 = _1002 * (_969.x + (-0.5));
        float _1004 = _1002 * (_969.y + (-0.5));
        float _1005 = _1002 * (_969.z + (-0.5));
        float _1012 = exp2((_976.w + (-0.5)) * 20.0) * 2.0;
        float _1013 = _1012 * (_976.x + (-0.5));
        float _1014 = _1012 * (_976.y + (-0.5));
        float _1015 = _1012 * (_976.z + (-0.5));
        float _1022 = exp2((_983.w + (-0.5)) * 20.0) * 2.0;
        float _1023 = _1022 * (_983.x + (-0.5));
        float _1024 = _1022 * (_983.y + (-0.5));
        float _1025 = _1022 * (_983.z + (-0.5));
        float _1032 = exp2((_990.w + (-0.5)) * 20.0) * 2.0;
        float _1033 = _1032 * (_990.x + (-0.5));
        float _1034 = _1032 * (_990.y + (-0.5));
        float _1035 = _1032 * (_990.z + (-0.5));
        float _1036 = isnan(0.0) ? _1033 : (isnan(_1033) ? 0.0 : max(_1033, 0.0));
        float _1037 = isnan(0.0) ? _1034 : (isnan(_1034) ? 0.0 : max(_1034, 0.0));
        float _1038 = isnan(0.0) ? _1035 : (isnan(_1035) ? 0.0 : max(_1035, 0.0));
        float _1039 = _1003 * 0.5;
        float _1040 = _1013 * 0.5;
        float _1041 = _1023 * 0.5;
        float _1042 = dot(vec3(_1039, _1040, _1041), vec3(_1039, _1040, _1041));
        float _1047 = (_1042 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1042);
        float _1055 = (dot(vec3(_299, _300, _301), vec3(_1047 * _1039, _1047 * _1040, _1047 * _1041)) + 1.0) * 0.5;
        float _3528 = isnan(0.0) ? _1055 : (isnan(_1055) ? 0.0 : max(_1055, 0.0));
        float _1064 = sqrt(((_1040 * _1040) + (_1039 * _1039)) + (_1041 * _1041)) / (_1036 + 9.9999997473787516355514526367188e-06);
        float _3539 = isnan(0.0) ? _1064 : (isnan(_1064) ? 0.0 : max(_1064, 0.0));
        float _1065 = isnan(1.0) ? _3539 : (isnan(_3539) ? 1.0 : min(_3539, 1.0));
        float _1066 = _1065 * 2.0;
        float _1070 = (1.0 - _1065) / (_1065 + 1.0);
        float _3550 = isnan(0.0) ? _1070 : (isnan(_1070) ? 0.0 : max(_1070, 0.0));
        float _1071 = isnan(1.0) ? _3550 : (isnan(_3550) ? 1.0 : min(_3550, 1.0));
        float _1080 = ((((1.0 - _1071) * (_1066 + 2.0)) * exp2(log2(isnan(1.0) ? _3528 : (isnan(_3528) ? 1.0 : min(_3528, 1.0))) * (_1066 + 1.0))) + _1071) * _1036;
        float _1081 = _1004 * 0.5;
        float _1082 = _1014 * 0.5;
        float _1083 = _1024 * 0.5;
        float _1084 = dot(vec3(_1081, _1082, _1083), vec3(_1081, _1082, _1083));
        float _1089 = (_1084 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1084);
        float _1097 = (dot(vec3(_299, _300, _301), vec3(_1089 * _1081, _1089 * _1082, _1089 * _1083)) + 1.0) * 0.5;
        float _3561 = isnan(0.0) ? _1097 : (isnan(_1097) ? 0.0 : max(_1097, 0.0));
        float _1106 = sqrt(((_1082 * _1082) + (_1081 * _1081)) + (_1083 * _1083)) / (_1037 + 9.9999997473787516355514526367188e-06);
        float _3572 = isnan(0.0) ? _1106 : (isnan(_1106) ? 0.0 : max(_1106, 0.0));
        float _1107 = isnan(1.0) ? _3572 : (isnan(_3572) ? 1.0 : min(_3572, 1.0));
        float _1108 = _1107 * 2.0;
        float _1112 = (1.0 - _1107) / (_1107 + 1.0);
        float _3583 = isnan(0.0) ? _1112 : (isnan(_1112) ? 0.0 : max(_1112, 0.0));
        float _1113 = isnan(1.0) ? _3583 : (isnan(_3583) ? 1.0 : min(_3583, 1.0));
        float _1122 = ((((1.0 - _1113) * (_1108 + 2.0)) * exp2(log2(isnan(1.0) ? _3561 : (isnan(_3561) ? 1.0 : min(_3561, 1.0))) * (_1108 + 1.0))) + _1113) * _1037;
        float _1123 = _1005 * 0.5;
        float _1124 = _1015 * 0.5;
        float _1125 = _1025 * 0.5;
        float _1126 = dot(vec3(_1123, _1124, _1125), vec3(_1123, _1124, _1125));
        float _1131 = (_1126 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1126);
        float _1139 = (dot(vec3(_299, _300, _301), vec3(_1131 * _1123, _1131 * _1124, _1131 * _1125)) + 1.0) * 0.5;
        float _3594 = isnan(0.0) ? _1139 : (isnan(_1139) ? 0.0 : max(_1139, 0.0));
        float _1148 = sqrt(((_1124 * _1124) + (_1123 * _1123)) + (_1125 * _1125)) / (_1038 + 9.9999997473787516355514526367188e-06);
        float _3605 = isnan(0.0) ? _1148 : (isnan(_1148) ? 0.0 : max(_1148, 0.0));
        float _1149 = isnan(1.0) ? _3605 : (isnan(_3605) ? 1.0 : min(_3605, 1.0));
        float _1150 = _1149 * 2.0;
        float _1154 = (1.0 - _1149) / (_1149 + 1.0);
        float _3616 = isnan(0.0) ? _1154 : (isnan(_1154) ? 0.0 : max(_1154, 0.0));
        float _1155 = isnan(1.0) ? _3616 : (isnan(_3616) ? 1.0 : min(_3616, 1.0));
        float _1164 = ((((1.0 - _1155) * (_1150 + 2.0)) * exp2(log2(isnan(1.0) ? _3594 : (isnan(_3594) ? 1.0 : min(_3594, 1.0))) * (_1150 + 1.0))) + _1155) * _1038;
        _1172 = _1005;
        _1173 = _1004;
        _1174 = _1003;
        _1175 = _1015;
        _1176 = _1014;
        _1177 = _1013;
        _1178 = _1025;
        _1179 = _1024;
        _1180 = _1023;
        _1181 = _1038;
        _1182 = _1037;
        _1183 = _1036;
        _1184 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1080 : (isnan(_1080) ? 0.0 : max(_1080, 0.0)));
        _1185 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1122 : (isnan(_1122) ? 0.0 : max(_1122, 0.0)));
        _1186 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1164 : (isnan(_1164) ? 0.0 : max(_1164, 0.0)));
    }
    else
    {
        _1172 = _863;
        _1173 = _863;
        _1174 = _863;
        _1175 = _863;
        _1176 = _863;
        _1177 = _863;
        _1178 = _863;
        _1179 = _863;
        _1180 = _863;
        _1181 = _863;
        _1182 = _863;
        _1183 = _863;
        _1184 = 0.0;
        _1185 = 0.0;
        _1186 = 0.0;
    }
    float _1196 = (cbModelParam._m0[1u].x * (_1184 - _875)) + _875;
    float _1197 = (cbModelParam._m0[1u].x * (_1185 - _876)) + _876;
    float _1198 = (cbModelParam._m0[1u].x * (_1186 - _877)) + _877;
    float _1219 = fma(_1198, cbSceneParam._m0[89u].z, fma(_1197, cbSceneParam._m0[89u].y, _1196 * cbSceneParam._m0[89u].x));
    float _1222 = fma(_1198, cbSceneParam._m0[90u].z, fma(_1197, cbSceneParam._m0[90u].y, _1196 * cbSceneParam._m0[90u].x));
    float _1225 = fma(_1198, cbSceneParam._m0[91u].z, fma(_1197, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1196));
    float _1240 = _493 * 0.5;
    float _1241 = _494 * 0.5;
    float _1242 = _495 * 0.5;
    float _1243 = dot(vec4(_1240, _1241, _1242, 1.0), vec4(_1174, _1177, _1180, _1183));
    float _1246 = dot(vec4(_1240, _1241, _1242, 1.0), vec4(_1173, _1176, _1179, _1182));
    float _1249 = dot(vec4(_1240, _1241, _1242, 1.0), vec4(_1172, _1175, _1178, _1181));
    float _1283;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1256 = dot(vec4(_1240, _1241, _1242, 1.0), vec4(_862, _866, _869, _872));
        float _1260 = dot(vec4(_1240, _1241, _1242, 1.0), vec4(_864, _867, _870, _873));
        float _1264 = dot(vec4(_1240, _1241, _1242, 1.0), vec4(_865, _868, _871, _874));
        float _1271 = dot(vec4(cbModelParam._m0[39u]), vec4(_1240, _1241, _1242, 1.0));
        _1283 = dot(vec3(isnan(0.0) ? _1264 : (isnan(_1264) ? 0.0 : max(_1264, 0.0)), isnan(0.0) ? _1260 : (isnan(_1260) ? 0.0 : max(_1260, 0.0)), isnan(0.0) ? _1256 : (isnan(_1256) ? 0.0 : max(_1256, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1271) ? 0.0 : (isnan(0.0) ? _1271 : max(0.0, _1271))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1283 = 1.0;
    }
    float _1294;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1285 = dot(vec4(cbModelParam._m0[40u]), vec4(_1240, _1241, _1242, 1.0));
        _1294 = dot(vec3(isnan(0.0) ? _1243 : (isnan(_1243) ? 0.0 : max(_1243, 0.0)), isnan(0.0) ? _1246 : (isnan(_1246) ? 0.0 : max(_1246, 0.0)), isnan(0.0) ? _1249 : (isnan(_1249) ? 0.0 : max(_1249, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1285) ? 0.0 : (isnan(0.0) ? _1285 : max(0.0, _1285))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1294 = 1.0;
    }
    float _1298 = (_1294 * cbModelParam._m0[1u].x) + (_1283 * (1.0 - cbModelParam._m0[1u].x));
    float _1308 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _303);
    float _1309 = isnan(_1308) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1308 : min(cbModelParam._m0[25u].z, _1308));
    float _1391;
    float _1393;
    float _1395;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1358 = fma(_557, cbModelParam._m0[13u].z, fma(_553, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _549)) + cbModelParam._m0[13u].w;
        float _1362 = fma(_557, cbModelParam._m0[14u].z, fma(_553, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _549)) + cbModelParam._m0[14u].w;
        float _1366 = fma(_557, cbModelParam._m0[15u].z, fma(_553, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _549)) + cbModelParam._m0[15u].w;
        float _1369 = fma(_495, cbModelParam._m0[13u].z, fma(_494, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _493));
        float _1372 = fma(_495, cbModelParam._m0[14u].z, fma(_494, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _493));
        float _1375 = fma(_495, cbModelParam._m0[15u].z, fma(_494, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _493));
        float _1403;
        if (_1369 > 0.0)
        {
            _1403 = abs((1.0 - _1358) / _1369);
        }
        else
        {
            float frontier_phi_18_16_ladder;
            if (_1369 < 0.0)
            {
                frontier_phi_18_16_ladder = abs((_1358 + 1.0) / _1369);
            }
            else
            {
                frontier_phi_18_16_ladder = 5000.0;
            }
            _1403 = frontier_phi_18_16_ladder;
        }
        float _1611;
        if (_1372 > 0.0)
        {
            _1611 = abs((1.0 - _1362) / _1372);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1372 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1362 + 1.0) / _1372);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1611 = frontier_phi_27_23_ladder;
        }
        float _1865;
        if (_1375 > 0.0)
        {
            _1865 = abs((1.0 - _1366) / _1375);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1375 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1366 + 1.0) / _1375);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _1865 = frontier_phi_39_34_ladder;
        }
        float _1867 = isnan(_1611) ? _1403 : (isnan(_1403) ? _1611 : min(_1403, _1611));
        float _1868 = isnan(_1865) ? _1867 : (isnan(_1867) ? _1865 : min(_1867, _1865));
        float _1872 = (_1868 * _1369) + _1358;
        float _1873 = (_1868 * _1372) + _1362;
        float _1874 = (_1868 * _1375) + _1366;
        float _1875 = _1868 * 9.9999997473787516355514526367188e-05;
        float _1877 = (-1.0) - _1875;
        float _1879 = _1875 + 1.0;
        float frontier_phi_17_39_ladder;
        float frontier_phi_17_39_ladder_1;
        float frontier_phi_17_39_ladder_2;
        if ((_1874 > _1879) || ((_1874 < _1877) || ((_1873 > _1879) || ((_1873 < _1877) || ((_1872 < _1877) || (_1872 > _1879))))))
        {
            frontier_phi_17_39_ladder = 0.0;
            frontier_phi_17_39_ladder_1 = 0.0;
            frontier_phi_17_39_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2002 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1874, cbModelParam._m0[9u].z, fma(_1873, cbModelParam._m0[9u].y, _1872 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1874, cbModelParam._m0[10u].z, fma(_1873, cbModelParam._m0[10u].y, _1872 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1874, cbModelParam._m0[11u].z, fma(_1873, cbModelParam._m0[11u].y, _1872 * cbModelParam._m0[11u].x))), _1309);
            frontier_phi_17_39_ladder = _2002.z * cbModelParam._m0[1u].y;
            frontier_phi_17_39_ladder_1 = _2002.y * cbModelParam._m0[1u].y;
            frontier_phi_17_39_ladder_2 = _2002.x * cbModelParam._m0[1u].y;
        }
        _1391 = frontier_phi_17_39_ladder_2;
        _1393 = frontier_phi_17_39_ladder_1;
        _1395 = frontier_phi_17_39_ladder;
    }
    else
    {
        vec4 _1379 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_493, _494, _495), _1309);
        _1391 = _1379.x * cbModelParam._m0[1u].y;
        _1393 = _1379.y * cbModelParam._m0[1u].y;
        _1395 = _1379.z * cbModelParam._m0[1u].y;
    }
    float _1399 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _303);
    float _1400 = isnan(_1399) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1399 : min(cbModelParam._m0[25u].w, _1399));
    float _1493;
    float _1495;
    float _1497;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1457 = fma(_557, cbModelParam._m0[21u].z, fma(_553, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _549)) + cbModelParam._m0[21u].w;
        float _1461 = fma(_557, cbModelParam._m0[22u].z, fma(_553, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _549)) + cbModelParam._m0[22u].w;
        float _1465 = fma(_557, cbModelParam._m0[23u].z, fma(_553, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _549)) + cbModelParam._m0[23u].w;
        float _1468 = fma(_495, cbModelParam._m0[21u].z, fma(_494, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _493));
        float _1471 = fma(_495, cbModelParam._m0[22u].z, fma(_494, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _493));
        float _1474 = fma(_495, cbModelParam._m0[23u].z, fma(_494, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _493));
        float _1616;
        if (_1468 > 0.0)
        {
            _1616 = abs((1.0 - _1457) / _1468);
        }
        else
        {
            float frontier_phi_29_25_ladder;
            if (_1468 < 0.0)
            {
                frontier_phi_29_25_ladder = abs((_1457 + 1.0) / _1468);
            }
            else
            {
                frontier_phi_29_25_ladder = 5000.0;
            }
            _1616 = frontier_phi_29_25_ladder;
        }
        float _1892;
        if (_1471 > 0.0)
        {
            _1892 = abs((1.0 - _1461) / _1471);
        }
        else
        {
            float frontier_phi_41_36_ladder;
            if (_1471 < 0.0)
            {
                frontier_phi_41_36_ladder = abs((_1461 + 1.0) / _1471);
            }
            else
            {
                frontier_phi_41_36_ladder = 5000.0;
            }
            _1892 = frontier_phi_41_36_ladder;
        }
        float _2105;
        if (_1474 > 0.0)
        {
            _2105 = abs((1.0 - _1465) / _1474);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1474 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1465 + 1.0) / _1474);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2105 = frontier_phi_50_47_ladder;
        }
        float _2107 = isnan(_1892) ? _1616 : (isnan(_1616) ? _1892 : min(_1616, _1892));
        float _2108 = isnan(_2105) ? _2107 : (isnan(_2107) ? _2105 : min(_2107, _2105));
        float _2112 = (_2108 * _1468) + _1457;
        float _2113 = (_2108 * _1471) + _1461;
        float _2114 = (_2108 * _1474) + _1465;
        float _2115 = _2108 * 9.9999997473787516355514526367188e-05;
        float _2116 = (-1.0) - _2115;
        float _2118 = _2115 + 1.0;
        float frontier_phi_26_50_ladder;
        float frontier_phi_26_50_ladder_1;
        float frontier_phi_26_50_ladder_2;
        if ((_2114 > _2118) || ((_2114 < _2116) || ((_2113 > _2118) || ((_2113 < _2116) || ((_2112 < _2116) || (_2112 > _2118))))))
        {
            frontier_phi_26_50_ladder = 0.0;
            frontier_phi_26_50_ladder_1 = 0.0;
            frontier_phi_26_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2314 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2114, cbModelParam._m0[17u].z, fma(_2113, cbModelParam._m0[17u].y, _2112 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2114, cbModelParam._m0[18u].z, fma(_2113, cbModelParam._m0[18u].y, _2112 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2114, cbModelParam._m0[19u].z, fma(_2113, cbModelParam._m0[19u].y, _2112 * cbModelParam._m0[19u].x))), _1400);
            frontier_phi_26_50_ladder = _2314.z * cbModelParam._m0[1u].z;
            frontier_phi_26_50_ladder_1 = _2314.y * cbModelParam._m0[1u].z;
            frontier_phi_26_50_ladder_2 = _2314.x * cbModelParam._m0[1u].z;
        }
        _1493 = frontier_phi_26_50_ladder_2;
        _1495 = frontier_phi_26_50_ladder_1;
        _1497 = frontier_phi_26_50_ladder;
    }
    else
    {
        vec4 _1477 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_493, _494, _495), _1400);
        _1493 = _1477.x * cbModelParam._m0[1u].z;
        _1495 = _1477.y * cbModelParam._m0[1u].z;
        _1497 = _1477.z * cbModelParam._m0[1u].z;
    }
    float _1510 = (((_520 * _470) + _521) * _485) * ((cbModelParam._m0[1u].w * (_1493 - _1391)) + _1391);
    float _1512 = (((_520 * _472) + _521) * _485) * ((cbModelParam._m0[1u].w * (_1495 - _1393)) + _1393);
    float _1514 = (((_520 * _473) + _521) * _485) * ((cbModelParam._m0[1u].w * (_1497 - _1395)) + _1395);
    float _1517 = fma(_1514, cbSceneParam._m0[89u].z, fma(_1512, cbSceneParam._m0[89u].y, _1510 * cbSceneParam._m0[89u].x));
    float _1520 = fma(_1514, cbSceneParam._m0[90u].z, fma(_1512, cbSceneParam._m0[90u].y, _1510 * cbSceneParam._m0[90u].x));
    float _1523 = fma(_1514, cbSceneParam._m0[91u].z, fma(_1512, cbSceneParam._m0[91u].y, _1510 * cbSceneParam._m0[91u].x));
    uvec4 _1533 = floatBitsToUint(cbInstanceData._m0[_444 + 5u]);
    uint _1535 = _1533.x * 14u;
    uint _1536 = _1535 + 13u;
    float _1543 = _485 + (-1.0);
    float _1548 = (cbLight._m0[_1536].x * _1543) + 1.0;
    float _1549 = (cbLight._m0[_1536].y * _1543) + 1.0;
    float _1550 = (cbLight._m0[_1536].z * _1543) + 1.0;
    float _1551 = (cbLight._m0[_1536].w * _1543) + 1.0;
    uint _1552 = _1535 + 5u;
    float _1558 = isnan(1.0) ? _1549 : (isnan(_1549) ? 1.0 : min(_1549, 1.0));
    uint _1562 = _1535 + 4u;
    float _1569 = isnan(1.0) ? _1548 : (isnan(_1548) ? 1.0 : min(_1548, 1.0));
    uint _1573 = _1535 | 1u;
    float _1584 = dot(vec3(cbLight._m0[_1535].xyz), vec3(_299, _300, _301));
    float _1587 = dot(vec3(cbLight._m0[_1573].xyz), vec3(_299, _300, _301));
    float _3752 = isnan(0.0) ? _1584 : (isnan(_1584) ? 0.0 : max(_1584, 0.0));
    float _3763 = isnan(0.0) ? _1587 : (isnan(_1587) ? 0.0 : max(_1587, 0.0));
    float _1592 = (isnan(1.0) ? _3752 : (isnan(_3752) ? 1.0 : min(_3752, 1.0))) * 0.3183098733425140380859375;
    float _1594 = (isnan(1.0) ? _3763 : (isnan(_3763) ? 1.0 : min(_3763, 1.0))) * 0.3183098733425140380859375;
    float _1601 = ((cbLight._m0[_1552].x * _1558) * _1594) + ((cbLight._m0[_1562].x * _1569) * _1592);
    float _1602 = ((_1558 * cbLight._m0[_1552].y) * _1594) + ((_1569 * cbLight._m0[_1562].y) * _1592);
    float _1603 = ((_1558 * cbLight._m0[_1552].z) * _1594) + ((_1569 * cbLight._m0[_1562].z) * _1592);
    uvec4 _1608 = floatBitsToUint(cbLight._m0[_1535 + 12u]);
    bool _1610 = _1608.x == 0u;
    float _1621;
    float _1623;
    float _1625;
    if (_1610)
    {
        _1621 = _1601;
        _1623 = _1602;
        _1625 = _1603;
    }
    else
    {
        uint _1629 = _1535 + 6u;
        float _1645 = (dot(vec3(cbLight._m0[_1535 + 2u].xyz), vec3(_299, _300, _301)) * 0.5) + 0.5;
        float _1646 = _1645 * _1645;
        float _3774 = isnan(0.0) ? _1646 : (isnan(_1646) ? 0.0 : max(_1646, 0.0));
        float _1647 = isnan(1.0) ? _3774 : (isnan(_3774) ? 1.0 : min(_3774, 1.0));
        float _1648 = isnan(1.0) ? _1550 : (isnan(_1550) ? 1.0 : min(_1550, 1.0));
        _1621 = (((cbLight._m0[_1629].x * 0.3183098733425140380859375) * _1647) * _1648) + _1601;
        _1623 = (((cbLight._m0[_1629].y * 0.3183098733425140380859375) * _1647) * _1648) + _1602;
        _1625 = (((cbLight._m0[_1629].z * 0.3183098733425140380859375) * _1647) * _1648) + _1603;
    }
    bool _1628 = _1608.y == 0u;
    float _1666;
    float _1668;
    float _1670;
    if (_1628)
    {
        _1666 = _1621;
        _1668 = _1623;
        _1670 = _1625;
    }
    else
    {
        uint _1836 = _1535 + 7u;
        float _1852 = (dot(vec3(cbLight._m0[_1535 + 3u].xyz), vec3(_299, _300, _301)) * 0.5) + 0.5;
        float _1853 = _1852 * _1852;
        float _3790 = isnan(0.0) ? _1853 : (isnan(_1853) ? 0.0 : max(_1853, 0.0));
        float _1854 = isnan(1.0) ? _3790 : (isnan(_3790) ? 1.0 : min(_3790, 1.0));
        float _1855 = isnan(1.0) ? _1551 : (isnan(_1551) ? 1.0 : min(_1551, 1.0));
        _1666 = (((cbLight._m0[_1836].x * 0.3183098733425140380859375) * _1854) * _1855) + _1621;
        _1668 = (((cbLight._m0[_1836].y * 0.3183098733425140380859375) * _1854) * _1855) + _1623;
        _1670 = (((cbLight._m0[_1836].z * 0.3183098733425140380859375) * _1854) * _1855) + _1625;
    }
    uint _1673 = _1535 + 8u;
    float _1686 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1535].w)) * _303) * 0.949999988079071044921875);
    float _1687 = _1686 * _1686;
    float _1688 = cbLight._m0[_1535].x + _391;
    float _1689 = cbLight._m0[_1535].y + _392;
    float _1690 = cbLight._m0[_1535].z + _393;
    float _1694 = inversesqrt(dot(vec3(_1688, _1689, _1690), vec3(_1688, _1689, _1690)));
    float _1695 = _1694 * _1688;
    float _1696 = _1694 * _1689;
    float _1697 = _1694 * _1690;
    float _1698 = dot(vec3(_299, _300, _301), vec3(cbLight._m0[_1535].xyz));
    float _3806 = isnan(0.0) ? _1698 : (isnan(_1698) ? 0.0 : max(_1698, 0.0));
    float _1701 = isnan(1.0) ? _3806 : (isnan(_3806) ? 1.0 : min(_3806, 1.0));
    float _3817 = isnan(0.0) ? _486 : (isnan(_486) ? 0.0 : max(_486, 0.0));
    float _1702 = isnan(1.0) ? _3817 : (isnan(_3817) ? 1.0 : min(_3817, 1.0));
    float _1703 = dot(vec3(_299, _300, _301), vec3(_1695, _1696, _1697));
    float _3828 = isnan(0.0) ? _1703 : (isnan(_1703) ? 0.0 : max(_1703, 0.0));
    float _1706 = isnan(1.0) ? _3828 : (isnan(_3828) ? 1.0 : min(_3828, 1.0));
    float _1707 = dot(vec3(cbLight._m0[_1535].xyz), vec3(_1695, _1696, _1697));
    float _3839 = isnan(0.0) ? _1707 : (isnan(_1707) ? 0.0 : max(_1707, 0.0));
    float _1711 = _1687 * _1687;
    float _1715 = ((_1706 * _1706) * (_1711 + (-1.0))) + 1.0;
    float _1723 = exp2(log2(1.0 - (isnan(1.0) ? _3839 : (isnan(_3839) ? 1.0 : min(_3839, 1.0)))) * 5.0);
    float _1724 = 0.959999978542327880859375 - _467;
    float _1726 = 0.959999978542327880859375 - _468;
    float _1727 = 0.959999978542327880859375 - _469;
    float _1734 = 1.0 - _1687;
    float _1745 = (0.5 / (((_1702 * ((_1701 * _1734) + _1687)) + 9.9999999392252902907785028219223e-09) + (((_1702 * _1734) + _1687) * _1701))) * _1701;
    float _3850 = isnan(0.0) ? _1745 : (isnan(_1745) ? 0.0 : max(_1745, 0.0));
    float _1747 = (isnan(1.0) ? _3850 : (isnan(_3850) ? 1.0 : min(_3850, 1.0))) * (_1711 / ((_1715 * _1715) * 3.141590118408203125));
    uint _1758 = _1535 + 9u;
    float _1769 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1573].w)) * _303) * 0.949999988079071044921875);
    float _1770 = _1769 * _1769;
    float _1771 = cbLight._m0[_1573].x + _391;
    float _1772 = cbLight._m0[_1573].y + _392;
    float _1773 = cbLight._m0[_1573].z + _393;
    float _1777 = inversesqrt(dot(vec3(_1771, _1772, _1773), vec3(_1771, _1772, _1773)));
    float _1778 = _1777 * _1771;
    float _1779 = _1777 * _1772;
    float _1780 = _1777 * _1773;
    float _1781 = dot(vec3(_299, _300, _301), vec3(cbLight._m0[_1573].xyz));
    float _3861 = isnan(0.0) ? _1781 : (isnan(_1781) ? 0.0 : max(_1781, 0.0));
    float _1784 = isnan(1.0) ? _3861 : (isnan(_3861) ? 1.0 : min(_3861, 1.0));
    float _1785 = dot(vec3(_299, _300, _301), vec3(_1778, _1779, _1780));
    float _3872 = isnan(0.0) ? _1785 : (isnan(_1785) ? 0.0 : max(_1785, 0.0));
    float _1788 = isnan(1.0) ? _3872 : (isnan(_3872) ? 1.0 : min(_3872, 1.0));
    float _1789 = dot(vec3(cbLight._m0[_1573].xyz), vec3(_1778, _1779, _1780));
    float _3883 = isnan(0.0) ? _1789 : (isnan(_1789) ? 0.0 : max(_1789, 0.0));
    float _1793 = _1770 * _1770;
    float _1797 = ((_1788 * _1788) * (_1793 + (-1.0))) + 1.0;
    float _1804 = exp2(log2(1.0 - (isnan(1.0) ? _3883 : (isnan(_3883) ? 1.0 : min(_3883, 1.0)))) * 5.0);
    float _1811 = 1.0 - _1770;
    float _1821 = (0.5 / (((_1702 * ((_1784 * _1811) + _1770)) + 9.9999999392252902907785028219223e-09) + (((_1702 * _1811) + _1770) * _1784))) * _1784;
    float _3894 = isnan(0.0) ? _1821 : (isnan(_1821) ? 0.0 : max(_1821, 0.0));
    float _1823 = (isnan(1.0) ? _3894 : (isnan(_3894) ? 1.0 : min(_3894, 1.0))) * (_1793 / ((_1797 * _1797) * 3.141590118408203125));
    float _1833 = (((((_1804 * _1724) + _470) * cbLight._m0[_1758].x) * _1823) * _1558) + (((((_1723 * _1724) + _470) * cbLight._m0[_1673].x) * _1747) * _1569);
    float _1834 = (((((_1804 * _1726) + _472) * cbLight._m0[_1758].y) * _1823) * _1558) + (((((_1723 * _1726) + _472) * cbLight._m0[_1673].y) * _1747) * _1569);
    float _1835 = (((((_1804 * _1727) + _473) * cbLight._m0[_1758].z) * _1823) * _1558) + (((((_1723 * _1727) + _473) * cbLight._m0[_1673].z) * _1747) * _1569);
    float _1897;
    float _1899;
    float _1901;
    if (_1610)
    {
        _1897 = _1833;
        _1899 = _1834;
        _1901 = _1835;
    }
    else
    {
        uint _1903 = _1535 + 2u;
        uint _1907 = _1535 + 10u;
        float _1921 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1903].w)) * _303) * 0.949999988079071044921875);
        float _1922 = _1921 * _1921;
        float _1923 = cbLight._m0[_1903].x + _391;
        float _1924 = cbLight._m0[_1903].y + _392;
        float _1925 = cbLight._m0[_1903].z + _393;
        float _1929 = inversesqrt(dot(vec3(_1923, _1924, _1925), vec3(_1923, _1924, _1925)));
        float _1930 = _1929 * _1923;
        float _1931 = _1929 * _1924;
        float _1932 = _1929 * _1925;
        float _1933 = dot(vec3(_299, _300, _301), vec3(cbLight._m0[_1903].xyz));
        float _3905 = isnan(0.0) ? _1933 : (isnan(_1933) ? 0.0 : max(_1933, 0.0));
        float _1936 = isnan(1.0) ? _3905 : (isnan(_3905) ? 1.0 : min(_3905, 1.0));
        float _1937 = dot(vec3(_299, _300, _301), vec3(_1930, _1931, _1932));
        float _3916 = isnan(0.0) ? _1937 : (isnan(_1937) ? 0.0 : max(_1937, 0.0));
        float _1940 = isnan(1.0) ? _3916 : (isnan(_3916) ? 1.0 : min(_3916, 1.0));
        float _1941 = dot(vec3(cbLight._m0[_1903].xyz), vec3(_1930, _1931, _1932));
        float _3927 = isnan(0.0) ? _1941 : (isnan(_1941) ? 0.0 : max(_1941, 0.0));
        float _1945 = _1922 * _1922;
        float _1949 = ((_1940 * _1940) * (_1945 + (-1.0))) + 1.0;
        float _1956 = exp2(log2(1.0 - (isnan(1.0) ? _3927 : (isnan(_3927) ? 1.0 : min(_3927, 1.0)))) * 5.0);
        float _1963 = 1.0 - _1922;
        float _1973 = (0.5 / (((_1702 * ((_1936 * _1963) + _1922)) + 9.9999999392252902907785028219223e-09) + (((_1702 * _1963) + _1922) * _1936))) * _1936;
        float _3938 = isnan(0.0) ? _1973 : (isnan(_1973) ? 0.0 : max(_1973, 0.0));
        float _1975 = (isnan(1.0) ? _3938 : (isnan(_3938) ? 1.0 : min(_3938, 1.0))) * (_1945 / ((_1949 * _1949) * 3.141590118408203125));
        float _1976 = isnan(1.0) ? _1550 : (isnan(_1550) ? 1.0 : min(_1550, 1.0));
        _1897 = (((((_1956 * _1724) + _470) * cbLight._m0[_1907].x) * _1975) * _1976) + _1833;
        _1899 = (((((_1956 * _1726) + _472) * cbLight._m0[_1907].y) * _1975) * _1976) + _1834;
        _1901 = (((((_1956 * _1727) + _473) * cbLight._m0[_1907].z) * _1975) * _1976) + _1835;
    }
    float _2011;
    float _2013;
    float _2015;
    if (_1628)
    {
        _2011 = _1897;
        _2013 = _1899;
        _2015 = _1901;
    }
    else
    {
        uint _2022 = _1535 + 3u;
        uint _2026 = _1535 + 11u;
        float _2040 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2022].w)) * _303) * 0.949999988079071044921875);
        float _2041 = _2040 * _2040;
        float _2042 = cbLight._m0[_2022].x + _391;
        float _2043 = cbLight._m0[_2022].y + _392;
        float _2044 = cbLight._m0[_2022].z + _393;
        float _2048 = inversesqrt(dot(vec3(_2042, _2043, _2044), vec3(_2042, _2043, _2044)));
        float _2049 = _2048 * _2042;
        float _2050 = _2048 * _2043;
        float _2051 = _2048 * _2044;
        float _2052 = dot(vec3(_299, _300, _301), vec3(cbLight._m0[_2022].xyz));
        float _3954 = isnan(0.0) ? _2052 : (isnan(_2052) ? 0.0 : max(_2052, 0.0));
        float _2055 = isnan(1.0) ? _3954 : (isnan(_3954) ? 1.0 : min(_3954, 1.0));
        float _2056 = dot(vec3(_299, _300, _301), vec3(_2049, _2050, _2051));
        float _3965 = isnan(0.0) ? _2056 : (isnan(_2056) ? 0.0 : max(_2056, 0.0));
        float _2059 = isnan(1.0) ? _3965 : (isnan(_3965) ? 1.0 : min(_3965, 1.0));
        float _2060 = dot(vec3(cbLight._m0[_2022].xyz), vec3(_2049, _2050, _2051));
        float _3976 = isnan(0.0) ? _2060 : (isnan(_2060) ? 0.0 : max(_2060, 0.0));
        float _2064 = _2041 * _2041;
        float _2068 = ((_2059 * _2059) * (_2064 + (-1.0))) + 1.0;
        float _2075 = exp2(log2(1.0 - (isnan(1.0) ? _3976 : (isnan(_3976) ? 1.0 : min(_3976, 1.0)))) * 5.0);
        float _2082 = 1.0 - _2041;
        float _2092 = (0.5 / (((_1702 * ((_2055 * _2082) + _2041)) + 9.9999999392252902907785028219223e-09) + (((_1702 * _2082) + _2041) * _2055))) * _2055;
        float _3987 = isnan(0.0) ? _2092 : (isnan(_2092) ? 0.0 : max(_2092, 0.0));
        float _2094 = (isnan(1.0) ? _3987 : (isnan(_3987) ? 1.0 : min(_3987, 1.0))) * (_2064 / ((_2068 * _2068) * 3.141590118408203125));
        float _2095 = isnan(1.0) ? _1551 : (isnan(_1551) ? 1.0 : min(_1551, 1.0));
        _2011 = (((((_2075 * _1724) + _470) * cbLight._m0[_2026].x) * _2094) * _2095) + _1897;
        _2013 = (((((_2075 * _1726) + _472) * cbLight._m0[_2026].y) * _2094) * _2095) + _1899;
        _2015 = (((((_2075 * _1727) + _473) * cbLight._m0[_2026].z) * _2094) * _2095) + _1901;
    }
    float _2229;
    float _2231;
    float _2233;
    float _2235;
    float _2237;
    float _2239;
    if (_1533.y == 0u)
    {
        float _2170 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2171 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2170;
        float _2172 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2170;
        float _2173 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2170;
        uvec4 _2185 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2186 = _2185.x;
        uint _2197 = uint((float(_2185.y) * floor(float(uint(cbSceneParam._m0[85u].y * _404) / _2186))) + floor(float(uint(cbSceneParam._m0[85u].x * _403) / _2186)));
        float _2207 = (log2(_2173 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2208 = isnan(0.0) ? _2207 : (isnan(_2207) ? 0.0 : max(_2207, 0.0));
        uint _2211 = uint(isnan(14.0) ? _2208 : (isnan(_2208) ? 14.0 : min(_2208, 14.0)));
        uvec4 _2216 = texelFetch(g_lightClusterGridBuffer, int(((_2211 << 2u) + (_2197 << 6u)) >> 2u));
        uint _2217 = _2216.x;
        uint _2218 = _2185.z;
        float _2319;
        float _2321;
        float _2323;
        float _2325;
        float _2327;
        float _2329;
        if (((((1u << ((_2218 >> 4u) & 15u)) + 4294967295u) & _2217) == 0u) || ((_2218 & 240u) == 0u))
        {
            _2319 = 0.0;
            _2321 = 0.0;
            _2323 = 0.0;
            _2325 = 0.0;
            _2327 = 0.0;
            _2329 = 0.0;
        }
        else
        {
            float _2320;
            float _2322;
            float _2324;
            float _2326;
            float _2328;
            float _2330;
            float _2471 = 0.0;
            float _2472 = 0.0;
            float _2473 = 0.0;
            float _2474 = 0.0;
            float _2475 = 0.0;
            float _2476 = 0.0;
            uint _2477 = 0u;
            uint _2486;
            bool _2487;
            for (;;)
            {
                _2486 = texelFetch(g_lightClassification, int((((_2211 << 5u) + (_2197 << 9u)) + (_2477 << 2u)) >> 2u)).x;
                _2487 = _2486 == 0u;
                float frontier_phi_67_pred;
                float frontier_phi_67_pred_1;
                float frontier_phi_67_pred_2;
                float frontier_phi_67_pred_3;
                float frontier_phi_67_pred_4;
                float frontier_phi_67_pred_5;
                if (_2487)
                {
                    frontier_phi_67_pred = _2473;
                    frontier_phi_67_pred_1 = _2476;
                    frontier_phi_67_pred_2 = _2475;
                    frontier_phi_67_pred_3 = _2474;
                    frontier_phi_67_pred_4 = _2472;
                    frontier_phi_67_pred_5 = _2471;
                }
                else
                {
                    float _2616;
                    float _2617;
                    float _2618;
                    float _2619;
                    float _2620;
                    float _2621;
                    uint _2622;
                    _2616 = _2471;
                    _2617 = _2472;
                    _2618 = _2473;
                    _2619 = _2474;
                    _2620 = _2475;
                    _2621 = _2476;
                    _2622 = _2486;
                    float _2543;
                    float _2544;
                    float _2545;
                    float _2546;
                    float _2547;
                    float _2548;
                    for (;;)
                    {
                        uint _2626 = uint(findLSB(_2622)) + (_2477 << 5u);
                        uint _2623 = (_2622 + 4294967295u) & _2622;
                        uint _2628 = _2626 * 48u;
                        vec4 _2642 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2628)).x, texelFetch(g_PointLightRenderingBuffer, int(_2628 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2628 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2628 + 3u)).x));
                        uint _2648 = (_2626 * 48u) + 4u;
                        vec4 _2661 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2648)).x, texelFetch(g_PointLightRenderingBuffer, int(_2648 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2648 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2648 + 3u)).x));
                        uint _2667 = (_2626 * 48u) + 8u;
                        vec3 _2678 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2667)).x, texelFetch(g_PointLightRenderingBuffer, int(_2667 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2667 + 2u)).x));
                        float _2682 = _2642.x - _2171;
                        float _2683 = _2642.y - _2172;
                        float _2684 = _2642.z - _2173;
                        float _2685 = dot(vec3(_2682, _2683, _2684), vec3(_2682, _2683, _2684));
                        float _2688 = inversesqrt(_2685);
                        float _2689 = _2688 * _2682;
                        float _2690 = _2688 * _2683;
                        float _2691 = _2688 * _2684;
                        float _2692 = dot(vec3(_425, _428, _431), vec3(_2689, _2690, _2691));
                        float _2697 = 1.0 - (_2685 * _2642.w);
                        float _4013 = isnan(0.0) ? _2697 : (isnan(_2697) ? 0.0 : max(_2697, 0.0));
                        float _2698 = isnan(1.0) ? _4013 : (isnan(_4013) ? 1.0 : min(_4013, 1.0));
                        float _2699 = sqrt(_2685) * _2661.w;
                        float _2702 = 1.39999997615814208984375 / (_2699 + 1.39999997615814208984375);
                        float _2703 = _2702 * _2702;
                        float _2706 = ((1.0 - _2703) * _2692) + _2703;
                        float _2709 = _2699 * _2699;
                        float _2713 = ((isnan(0.0) ? _2706 : (isnan(_2706) ? 0.0 : max(_2706, 0.0))) * _2698) / ((_2709 * 0.699999988079071044921875) + 1.0);
                        float _2717 = (-0.0) - _2171;
                        float _2718 = (-0.0) - _2172;
                        float _2719 = (-0.0) - _2173;
                        float _2723 = inversesqrt(dot(vec3(_2717, _2718, _2719), vec3(_2717, _2718, _2719)));
                        float _2724 = _2723 * _2717;
                        float _2725 = _2723 * _2718;
                        float _2726 = _2723 * _2719;
                        float _2734 = exp2(log2(1.0 / ((_2709 * 3.5) + 5.0)) * 0.25);
                        float _2735 = 1.0 - _501;
                        float _2742 = sqrt(1.0 - ((1.0 - (_2735 * _2735)) * (1.0 - (_2734 * _2734))));
                        float _2743 = _2742 * _2742;
                        float _2744 = _2743 * _2743;
                        float _2745 = _2724 + _2689;
                        float _2746 = _2725 + _2690;
                        float _2747 = _2726 + _2691;
                        float _2751 = inversesqrt(dot(vec3(_2745, _2746, _2747), vec3(_2745, _2746, _2747)));
                        float _2755 = dot(vec3(_425, _428, _431), vec3(_2724, _2725, _2726));
                        float _4029 = isnan(0.0) ? _2755 : (isnan(_2755) ? 0.0 : max(_2755, 0.0));
                        float _2758 = isnan(1.0) ? _4029 : (isnan(_4029) ? 1.0 : min(_4029, 1.0));
                        float _2759 = dot(vec3(_425, _428, _431), vec3(_2751 * _2745, _2751 * _2746, _2751 * _2747));
                        float _4040 = isnan(0.0) ? _2759 : (isnan(_2759) ? 0.0 : max(_2759, 0.0));
                        float _2762 = isnan(1.0) ? _4040 : (isnan(_4040) ? 1.0 : min(_4040, 1.0));
                        float _2766 = ((_2762 * _2762) * (_2744 + (-1.0))) + 1.0;
                        float _2767 = _2702 * _2743;
                        float _2768 = _2767 * _2767;
                        float _2771 = ((1.0 - _2768) * _2692) + _2768;
                        float _4051 = isnan(0.0) ? _2771 : (isnan(_2771) ? 0.0 : max(_2771, 0.0));
                        float _2772 = isnan(1.0) ? _4051 : (isnan(_4051) ? 1.0 : min(_4051, 1.0));
                        float _2773 = 1.0 - _2743;
                        float _2783 = (0.5 / (((_2772 * ((_2758 * _2773) + _2743)) + 9.9999999392252902907785028219223e-09) + (((_2772 * _2773) + _2743) * _2758))) * _2772;
                        float _4062 = isnan(0.0) ? _2783 : (isnan(_2783) ? 0.0 : max(_2783, 0.0));
                        float _2794 = (((_2744 * 3.1415927410125732421875) * (isnan(1.0) ? _4062 : (isnan(_4062) ? 1.0 : min(_4062, 1.0)))) / ((_2766 * _2766) * ((_2709 * 2.1991131305694580078125) + 3.141590118408203125))) * _2698;
                        _2546 = (_2713 * _2661.x) + _2619;
                        _2547 = (_2713 * _2661.y) + _2620;
                        _2548 = (_2713 * _2661.z) + _2621;
                        _2543 = (_2794 * _2678.x) + _2616;
                        _2544 = (_2794 * _2678.y) + _2617;
                        _2545 = (_2794 * _2678.z) + _2618;
                        if (_2623 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2616 = _2543;
                            _2617 = _2544;
                            _2618 = _2545;
                            _2619 = _2546;
                            _2620 = _2547;
                            _2621 = _2548;
                            _2622 = _2623;
                        }
                    }
                    frontier_phi_67_pred = _2545;
                    frontier_phi_67_pred_1 = _2548;
                    frontier_phi_67_pred_2 = _2547;
                    frontier_phi_67_pred_3 = _2546;
                    frontier_phi_67_pred_4 = _2544;
                    frontier_phi_67_pred_5 = _2543;
                }
                _2324 = frontier_phi_67_pred;
                _2330 = frontier_phi_67_pred_1;
                _2328 = frontier_phi_67_pred_2;
                _2326 = frontier_phi_67_pred_3;
                _2322 = frontier_phi_67_pred_4;
                _2320 = frontier_phi_67_pred_5;
                uint _2478 = _2477 + 1u;
                if (_2478 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2471 = _2320;
                    _2472 = _2322;
                    _2473 = _2324;
                    _2474 = _2326;
                    _2475 = _2328;
                    _2476 = _2330;
                    _2477 = _2478;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2319 = _2320;
            _2321 = _2322;
            _2323 = _2324;
            _2325 = _2326;
            _2327 = _2328;
            _2329 = _2330;
        }
        uvec4 _2333 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2334 = _2333.z;
        uint _2336 = (_2334 >> 8u) & 15u;
        float _2439;
        float _2441;
        float _2443;
        float _2445;
        float _2447;
        float _2449;
        if (((4294967295u << _2336) & _2217) == 0u)
        {
            _2439 = _2319;
            _2441 = _2321;
            _2443 = _2323;
            _2445 = _2325;
            _2447 = _2327;
            _2449 = _2329;
        }
        else
        {
            float _2464 = inversesqrt(dot(vec3(_2171, _2172, _2173), vec3(_2171, _2172, _2173)));
            float _2465 = _2464 * _2171;
            float _2466 = _2464 * _2172;
            float _2467 = _2464 * _2173;
            float frontier_phi_59_60_ladder;
            float frontier_phi_59_60_ladder_1;
            float frontier_phi_59_60_ladder_2;
            float frontier_phi_59_60_ladder_3;
            float frontier_phi_59_60_ladder_4;
            float frontier_phi_59_60_ladder_5;
            if (_2336 < ((_2334 >> 12u) & 15u))
            {
                float _2440;
                float _2442;
                float _2444;
                float _2446;
                float _2448;
                float _2450;
                float _2599 = _2319;
                float _2600 = _2321;
                float _2601 = _2323;
                float _2602 = _2325;
                float _2603 = _2327;
                float _2604 = _2329;
                uint _2605 = _2336;
                uint _2614;
                bool _2615;
                for (;;)
                {
                    _2614 = texelFetch(g_lightClassification, int((((_2211 << 5u) + (_2197 << 9u)) + (_2605 << 2u)) >> 2u)).x;
                    _2615 = _2614 == 0u;
                    float frontier_phi_78_pred;
                    float frontier_phi_78_pred_1;
                    float frontier_phi_78_pred_2;
                    float frontier_phi_78_pred_3;
                    float frontier_phi_78_pred_4;
                    float frontier_phi_78_pred_5;
                    if (_2615)
                    {
                        frontier_phi_78_pred = _2604;
                        frontier_phi_78_pred_1 = _2603;
                        frontier_phi_78_pred_2 = _2602;
                        frontier_phi_78_pred_3 = _2601;
                        frontier_phi_78_pred_4 = _2600;
                        frontier_phi_78_pred_5 = _2599;
                    }
                    else
                    {
                        float _2808;
                        float _2809;
                        float _2810;
                        float _2811;
                        float _2812;
                        float _2813;
                        float _3104;
                        float _3105;
                        float _3106;
                        float _3107;
                        float _3108;
                        float _3109;
                        float _2821 = _2599;
                        float _2822 = _2600;
                        float _2823 = _2601;
                        float _2824 = _2602;
                        float _2825 = _2603;
                        float _2826 = _2604;
                        uint _2827 = _2614;
                        uint _2828;
                        vec4 _2853;
                        float _2854;
                        vec4 _2869;
                        vec3 _2881;
                        vec4 _2897;
                        vec4 _2913;
                        float _2960;
                        bool _2961;
                        for (;;)
                        {
                            uint _2838 = ((_2605 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2827));
                            _2828 = (_2827 + 4294967295u) & _2827;
                            uint _2840 = _2838 * 40u;
                            _2853 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2840)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2840 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2840 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2840 + 3u)).x));
                            _2854 = _2853.w;
                            uint _2856 = (_2838 * 40u) + 4u;
                            _2869 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2856)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2856 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2856 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2856 + 3u)).x));
                            uint _2871 = (_2838 * 40u) + 8u;
                            _2881 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2871)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2871 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2871 + 2u)).x));
                            uint _2884 = (_2838 * 40u) + 16u;
                            _2897 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2884)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2884 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2884 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2884 + 3u)).x));
                            uint _2900 = (_2838 * 40u) + 20u;
                            _2913 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2900)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2900 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2900 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2900 + 3u)).x));
                            uint _2916 = (_2838 * 40u) + 24u;
                            vec4 _2929 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2916)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2916 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2916 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2916 + 3u)).x));
                            uint _2935 = (_2838 * 40u) + 28u;
                            vec4 _2948 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2935)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2935 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2935 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2935 + 3u)).x));
                            _2960 = fma(_2173, _2948.z, fma(_2172, _2948.y, _2948.x * _2171)) + _2948.w;
                            _2961 = !((fma(_2173, _2929.z, fma(_2172, _2929.y, _2929.x * _2171)) + _2929.w) <= 0.0);
                            float frontier_phi_84_pred;
                            float frontier_phi_84_pred_1;
                            float frontier_phi_84_pred_2;
                            float frontier_phi_84_pred_3;
                            float frontier_phi_84_pred_4;
                            float frontier_phi_84_pred_5;
                            if (_2961)
                            {
                                float _2988 = _2853.x - _2171;
                                float _2989 = _2853.y - _2172;
                                float _2990 = _2853.z - _2173;
                                float _2991 = dot(vec3(_2988, _2989, _2990), vec3(_2988, _2989, _2990));
                                float _2994 = inversesqrt(_2991);
                                float _2995 = _2994 * _2988;
                                float _2996 = _2994 * _2989;
                                float _2997 = _2994 * _2990;
                                float _3001 = 1.0 - (_2991 / (_2854 * _2854));
                                float _4073 = isnan(0.0) ? _3001 : (isnan(_3001) ? 0.0 : max(_3001, 0.0));
                                float _3002 = isnan(1.0) ? _4073 : (isnan(_4073) ? 1.0 : min(_4073, 1.0));
                                float _3006 = sqrt(_2991) * _2869.w;
                                float _3008 = 1.39999997615814208984375 / (_3006 + 1.39999997615814208984375);
                                float _3009 = _3008 * _3008;
                                float _3012 = ((1.0 - _3009) * dot(vec3(_2995, _2996, _2997), vec3(_425, _428, _431))) + _3009;
                                float _3015 = _3006 * _3006;
                                float _3019 = (fma(_2173, _2897.z, fma(_2172, _2897.y, _2897.x * _2171)) + _2897.w) / _2960;
                                float _3020 = (fma(_2173, _2913.z, fma(_2172, _2913.y, _2913.x * _2171)) + _2913.w) / _2960;
                                float _3024 = 1.0 - dot(vec2(_3019, _3020), vec2(_3019, _3020));
                                float _4089 = isnan(0.0) ? _3024 : (isnan(_3024) ? 0.0 : max(_3024, 0.0));
                                float _3025 = isnan(1.0) ? _4089 : (isnan(_4089) ? 1.0 : min(_4089, 1.0));
                                float _3026 = _3025 * (((isnan(0.0) ? _3012 : (isnan(_3012) ? 0.0 : max(_3012, 0.0))) * _3002) / ((_3015 * 0.699999988079071044921875) + 1.0));
                                float _3038 = exp2(log2(1.0 / ((_3015 * 3.5) + 5.0)) * 0.25);
                                float _3039 = 1.0 - _501;
                                float _3046 = sqrt(1.0 - ((1.0 - (_3039 * _3039)) * (1.0 - (_3038 * _3038))));
                                float _3047 = _3046 * _3046;
                                float _3048 = _3047 * _3047;
                                float _3049 = _2995 - _2465;
                                float _3050 = _2996 - _2466;
                                float _3051 = _2997 - _2467;
                                float _3055 = inversesqrt(dot(vec3(_3049, _3050, _3051), vec3(_3049, _3050, _3051)));
                                float _3059 = dot(vec3(_425, _428, _431), vec3((-0.0) - _2465, (-0.0) - _2466, (-0.0) - _2467));
                                float _4100 = isnan(0.0) ? _3059 : (isnan(_3059) ? 0.0 : max(_3059, 0.0));
                                float _3062 = isnan(1.0) ? _4100 : (isnan(_4100) ? 1.0 : min(_4100, 1.0));
                                float _3063 = dot(vec3(_425, _428, _431), vec3(_3055 * _3049, _3055 * _3050, _3055 * _3051));
                                float _4111 = isnan(0.0) ? _3063 : (isnan(_3063) ? 0.0 : max(_3063, 0.0));
                                float _3066 = isnan(1.0) ? _4111 : (isnan(_4111) ? 1.0 : min(_4111, 1.0));
                                float _3070 = ((_3066 * _3066) * (_3048 + (-1.0))) + 1.0;
                                float _3071 = _3008 * _3047;
                                float _3072 = _3071 * _3071;
                                float _3078 = ((1.0 - _3072) * dot(vec3(_425, _428, _431), vec3(_2995, _2996, _2997))) + _3072;
                                float _4122 = isnan(0.0) ? _3078 : (isnan(_3078) ? 0.0 : max(_3078, 0.0));
                                float _3079 = isnan(1.0) ? _4122 : (isnan(_4122) ? 1.0 : min(_4122, 1.0));
                                float _3080 = 1.0 - _3047;
                                float _3090 = (0.5 / (((_3079 * ((_3062 * _3080) + _3047)) + 9.9999999392252902907785028219223e-09) + (((_3079 * _3080) + _3047) * _3062))) * _3079;
                                float _4133 = isnan(0.0) ? _3090 : (isnan(_3090) ? 0.0 : max(_3090, 0.0));
                                float _3100 = (_3025 * _3002) * (((_3048 * 3.1415927410125732421875) * (isnan(1.0) ? _4133 : (isnan(_4133) ? 1.0 : min(_4133, 1.0)))) / ((_3070 * _3070) * ((_3015 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_84_pred = _3026 * _2869.z;
                                frontier_phi_84_pred_1 = _3026 * _2869.y;
                                frontier_phi_84_pred_2 = _3026 * _2869.x;
                                frontier_phi_84_pred_3 = _3100 * _2881.z;
                                frontier_phi_84_pred_4 = _3100 * _2881.y;
                                frontier_phi_84_pred_5 = _3100 * _2881.x;
                            }
                            else
                            {
                                frontier_phi_84_pred = 0.0;
                                frontier_phi_84_pred_1 = 0.0;
                                frontier_phi_84_pred_2 = 0.0;
                                frontier_phi_84_pred_3 = 0.0;
                                frontier_phi_84_pred_4 = 0.0;
                                frontier_phi_84_pred_5 = 0.0;
                            }
                            _3109 = frontier_phi_84_pred;
                            _3108 = frontier_phi_84_pred_1;
                            _3107 = frontier_phi_84_pred_2;
                            _3106 = frontier_phi_84_pred_3;
                            _3105 = frontier_phi_84_pred_4;
                            _3104 = frontier_phi_84_pred_5;
                            _2811 = _3107 + _2824;
                            _2812 = _3108 + _2825;
                            _2813 = _3109 + _2826;
                            _2808 = _3104 + _2821;
                            _2809 = _3105 + _2822;
                            _2810 = _3106 + _2823;
                            if (_2828 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2821 = _2808;
                                _2822 = _2809;
                                _2823 = _2810;
                                _2824 = _2811;
                                _2825 = _2812;
                                _2826 = _2813;
                                _2827 = _2828;
                                continue;
                            }
                        }
                        frontier_phi_78_pred = _2813;
                        frontier_phi_78_pred_1 = _2812;
                        frontier_phi_78_pred_2 = _2811;
                        frontier_phi_78_pred_3 = _2810;
                        frontier_phi_78_pred_4 = _2809;
                        frontier_phi_78_pred_5 = _2808;
                    }
                    _2450 = frontier_phi_78_pred;
                    _2448 = frontier_phi_78_pred_1;
                    _2446 = frontier_phi_78_pred_2;
                    _2444 = frontier_phi_78_pred_3;
                    _2442 = frontier_phi_78_pred_4;
                    _2440 = frontier_phi_78_pred_5;
                    uint _2606 = _2605 + 1u;
                    if (_2606 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2599 = _2440;
                        _2600 = _2442;
                        _2601 = _2444;
                        _2602 = _2446;
                        _2603 = _2448;
                        _2604 = _2450;
                        _2605 = _2606;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_59_60_ladder = _2446;
                frontier_phi_59_60_ladder_1 = _2450;
                frontier_phi_59_60_ladder_2 = _2448;
                frontier_phi_59_60_ladder_3 = _2444;
                frontier_phi_59_60_ladder_4 = _2442;
                frontier_phi_59_60_ladder_5 = _2440;
            }
            else
            {
                frontier_phi_59_60_ladder = _2325;
                frontier_phi_59_60_ladder_1 = _2329;
                frontier_phi_59_60_ladder_2 = _2327;
                frontier_phi_59_60_ladder_3 = _2323;
                frontier_phi_59_60_ladder_4 = _2321;
                frontier_phi_59_60_ladder_5 = _2319;
            }
            _2439 = frontier_phi_59_60_ladder_5;
            _2441 = frontier_phi_59_60_ladder_4;
            _2443 = frontier_phi_59_60_ladder_3;
            _2445 = frontier_phi_59_60_ladder;
            _2447 = frontier_phi_59_60_ladder_2;
            _2449 = frontier_phi_59_60_ladder_1;
        }
        float _2454 = isnan(1.0) ? _485 : (isnan(_485) ? 1.0 : min(_485, 1.0));
        _2229 = (_2454 * _2445) + _1666;
        _2231 = (_2454 * _2447) + _1668;
        _2233 = (_2454 * _2449) + _1670;
        _2235 = ((_2439 * _470) * _2454) + _2011;
        _2237 = ((_2441 * _472) * _2454) + _2013;
        _2239 = ((_2443 * _473) * _2454) + _2015;
    }
    else
    {
        _2229 = _1666;
        _2231 = _1668;
        _2233 = _1670;
        _2235 = _2011;
        _2237 = _2013;
        _2239 = _2015;
    }
    float _4149 = isnan(0.0) ? _460 : (isnan(_460) ? 0.0 : max(_460, 0.0));
    float _4160 = isnan(0.0) ? _461 : (isnan(_461) ? 0.0 : max(_461, 0.0));
    float _4171 = isnan(0.0) ? _462 : (isnan(_462) ? 0.0 : max(_462, 0.0));
    float _4182 = isnan(0.0) ? _302 : (isnan(_302) ? 0.0 : max(_302, 0.0));
    float _2257 = ((isnan(1.0) ? _4149 : (isnan(_4149) ? 1.0 : min(_4149, 1.0))) * (_2229 + ((isnan(0.0) ? _1219 : (isnan(_1219) ? 0.0 : max(_1219, 0.0))) * _485))) + ((_2235 + ((isnan(0.0) ? _1517 : (isnan(_1517) ? 0.0 : max(_1517, 0.0))) * _1298)) * cbPerFrame._m0[3u].x);
    float _2258 = ((isnan(1.0) ? _4160 : (isnan(_4160) ? 1.0 : min(_4160, 1.0))) * (_2231 + ((isnan(0.0) ? _1222 : (isnan(_1222) ? 0.0 : max(_1222, 0.0))) * _485))) + ((_2237 + ((isnan(0.0) ? _1520 : (isnan(_1520) ? 0.0 : max(_1520, 0.0))) * _1298)) * cbPerFrame._m0[3u].x);
    float _2259 = ((isnan(1.0) ? _4171 : (isnan(_4171) ? 1.0 : min(_4171, 1.0))) * (_2233 + ((isnan(0.0) ? _1225 : (isnan(_1225) ? 0.0 : max(_1225, 0.0))) * _485))) + ((_2239 + ((isnan(0.0) ? _1523 : (isnan(_1523) ? 0.0 : max(_1523, 0.0))) * _1298)) * cbPerFrame._m0[3u].x);
    float _2264 = cbInstanceData._m0[_444 + 6u].w * (isnan(1.0) ? _4182 : (isnan(_4182) ? 1.0 : min(_4182, 1.0)));
    float _2269 = _403 / cbSceneParam._m0[86u].x;
    float _2270 = _404 / cbSceneParam._m0[86u].y;
    vec4 _2284 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2269, _2270, (log2((isnan(cbSceneParam._m0[77u].w) ? _331 : (isnan(_331) ? cbSceneParam._m0[77u].w : min(_331, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2286 = _2284.x;
    float _2287 = _2284.y;
    float _2288 = _2284.z;
    float _2289 = _2284.w;
    float _2381;
    float _2383;
    float _2385;
    float _2387;
    if (_331 > cbSceneParam._m0[78u].w)
    {
        float _2344 = isnan(_331) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _331 : min(cbSceneParam._m0[80u].w, _331));
        float _2345 = _2344 / _331;
        float _2356 = _2345 * _384;
        float _2357 = _385 * _2345;
        float _2358 = (-0.0) - _2357;
        float _2359 = _2345 * _386;
        float _2361 = (cbSceneParam._m0[77u].w * _2358) / _2344;
        float _2362 = _2361 + cbSceneParam._m0[79u].w;
        float _2363 = cbSceneParam._m0[79u].w - _2357;
        float _2369 = sqrt(((_2356 * _2356) + (_2357 * _2357)) + (_2359 * _2359));
        float _2372 = (1.0 - (cbSceneParam._m0[77u].w / _2344)) * _2369;
        float _2377 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2379 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2556;
        if (abs((_2358 - _2361) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2556 = ((((_2362 > 0.0) ? exp2(_2377 * _2362) : (2.0 - exp2(_2379 * _2362))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2372;
        }
        else
        {
            float _2500 = 1.0 / cbSceneParam._m0[80u].x;
            float _2501 = isnan(_2363) ? _2362 : (isnan(_2362) ? _2363 : max(_2362, _2363));
            float _2502 = isnan(_2363) ? _2362 : (isnan(_2362) ? _2363 : min(_2362, _2363));
            float _2511 = isnan(0.0) ? _2501 : (isnan(_2501) ? 0.0 : min(_2501, 0.0));
            float _2512 = isnan(0.0) ? _2502 : (isnan(_2502) ? 0.0 : min(_2502, 0.0));
            _2556 = ((abs(_2369 / _2358) * cbSceneParam._m0[80u].y) * ((((_2511 - _2512) * 2.0) - ((exp2(_2377 * (isnan(0.0) ? _2501 : (isnan(_2501) ? 0.0 : max(_2501, 0.0)))) - exp2(_2377 * (isnan(0.0) ? _2502 : (isnan(_2502) ? 0.0 : max(_2502, 0.0))))) * _2500)) - ((exp2(_2379 * _2511) - exp2(_2379 * _2512)) * _2500))) + (_2372 * cbSceneParam._m0[80u].z);
        }
        vec4 _2558 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2269, _2270, 1.0), 0.0);
        float _2567 = exp2((_2556 * (-1.44269502162933349609375)) * (1.0 - _2558.w));
        float _2568 = log2(_2567);
        float _2584 = log2(_2289);
        _2381 = (exp2(_2584 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2568 * cbSceneParam._m0[78u].x)) * _2558.x) / cbSceneParam._m0[78u].x)) + _2286;
        _2383 = (exp2(_2584 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2568 * cbSceneParam._m0[78u].y)) * _2558.y) / cbSceneParam._m0[78u].y)) + _2287;
        _2385 = (exp2(_2584 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2568 * cbSceneParam._m0[78u].z)) * _2558.z) / cbSceneParam._m0[78u].z)) + _2288;
        _2387 = _2567 * _2289;
    }
    else
    {
        _2381 = _2286;
        _2383 = _2287;
        _2385 = _2288;
        _2387 = _2289;
    }
    bool _2594;
    vec4 _2397;
    vec4 _2419;
    float _2421;
    float _2425;
    float _2426;
    float _2427;
    float _2428;
    bool _2438;
    for (;;)
    {
        _2397 = cbMatDynParam._m0[0u];
        float _2399 = roundEven(_2397.y);
        bool _2400 = _2399 == 3.0;
        float _2401 = log2(_2387);
        float _2408 = exp2(_2401 * cbSceneParam._m0[78u].x) * _2257;
        float _2409 = exp2(_2401 * cbSceneParam._m0[78u].y) * _2258;
        float _2410 = exp2(_2401 * cbSceneParam._m0[78u].z) * _2259;
        float _2417 = _397 + (-0.5);
        _2419 = cbMtdParam._m0[1u];
        _2421 = _2419.y * _2417;
        float _2424 = (_2399 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2425 = _2424 * (_2400 ? _2408 : (_2408 + (cbSceneParam._m0[72u].w * _2381)));
        _2426 = _2424 * (_2400 ? _2409 : (_2409 + (cbSceneParam._m0[72u].w * _2383)));
        _2427 = _2424 * (_2400 ? _2410 : (_2410 + (cbSceneParam._m0[72u].w * _2385)));
        _2428 = _2417 * 0.999000012874603271484375;
        _2438 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2438)
        {
            if ((cbInstanceData._m0[_444 + 7u].x + _2428) < 0.5)
            {
                _2594 = true;
                break;
            }
        }
        uint _2535 = _446 + uint(_2397.w);
        if ((cbInstanceData._m0[_2535].w < 1.0) && ((cbInstanceData._m0[_2535].w + _2428) < 0.5))
        {
            _2594 = true;
            break;
        }
        if ((_2421 + _236) < _2419.x)
        {
            _2594 = true;
            break;
        }
        _2594 = false;
        break;
    }
    float _2799;
    if (_2594)
    {
        discard_state = true;
        _2799 = 0.0;
    }
    else
    {
        _2799 = _2264;
    }
    SV_Target.x = _2425;
    SV_Target.y = _2426;
    SV_Target.z = _2427;
    SV_Target.w = _2799;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2264;
    discard_exit();
}


