#version 460

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[10];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 5, std140) uniform cbObjMatrixUBO
{
    vec4 _m0[6];
} cbObjMatrix;

layout(set = 0, binding = 10, std140) uniform cbInstanceIdxParamUBO
{
    vec4 _m0[1];
} cbInstanceIdxParam;

layout(set = 0, binding = 26) uniform usamplerBuffer g_forceParam;
layout(set = 0, binding = 25) uniform usamplerBuffer g_InstanceIndexBuffer;

layout(location = 0) in vec3 POSITION;
layout(location = 1) in uvec4 NORMAL;
layout(location = 2) in uvec4 TANGENT;
layout(location = 3) in vec4 COLOR_1;
layout(location = 4) in ivec2 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_1;

uint _494;

void main()
{
    uint _65 = uint(gl_InstanceIndex) - uint(gl_BaseInstance);
    gl_Position.x = 0.0;
    gl_Position.y = 0.0;
    gl_Position.z = 0.0;
    gl_Position.w = 0.0;
    uint _96 = _65 * 13u;
    uvec4 _102 = floatBitsToUint(cbInstanceData._m0[_96 + 7u]);
    uint _105 = min(_102.y, 8u);
    precise float _109 = POSITION.x + 0.0;
    precise float _110 = POSITION.y + 0.0;
    precise float _111 = POSITION.z + 0.0;
    uint _116 = floatBitsToUint(cbInstanceIdxParam._m0[0u]).x + _65;
    uint _129 = (floatBitsToUint(cbInstanceData._m0[(texelFetch(g_InstanceIndexBuffer, int(_116)).x * 13u) + 4u]).x + uint(float(NORMAL.w))) * 3u;
    uint _136 = _129 + 1u;
    uint _143 = _129 + 2u;
    precise float _150 = _109 * cbObjMatrix._m0[_129].x;
    precise float _151 = _110 * cbObjMatrix._m0[_129].y;
    precise float _152 = _151 + _150;
    precise float _153 = _111 * cbObjMatrix._m0[_129].z;
    precise float _154 = _153 + _152;
    precise float _155 = 1.0 * cbObjMatrix._m0[_129].w;
    precise float _157 = _155 + _154;
    precise float _158 = _109 * cbObjMatrix._m0[_136].x;
    precise float _159 = _110 * cbObjMatrix._m0[_136].y;
    precise float _160 = _159 + _158;
    precise float _161 = _111 * cbObjMatrix._m0[_136].z;
    precise float _162 = _161 + _160;
    precise float _163 = 1.0 * cbObjMatrix._m0[_136].w;
    precise float _164 = _163 + _162;
    precise float _165 = _109 * cbObjMatrix._m0[_143].x;
    precise float _166 = _110 * cbObjMatrix._m0[_143].y;
    precise float _167 = _166 + _165;
    precise float _168 = _111 * cbObjMatrix._m0[_143].z;
    precise float _169 = _168 + _167;
    precise float _170 = 1.0 * cbObjMatrix._m0[_143].w;
    precise float _171 = _170 + _169;
    precise float _177 = TEXCOORD_1.x * cbMtdParam._m0[9u].z;
    uint _185 = _96 + 1u;
    uint _192 = _96 + 2u;
    precise float _199 = TEXCOORD_1.x * cbInstanceData._m0[_96].x;
    precise float _200 = TEXCOORD_1.y * cbInstanceData._m0[_96].y;
    precise float _201 = _200 + _199;
    precise float _202 = TEXCOORD_1.z * cbInstanceData._m0[_96].z;
    precise float _203 = _202 + _201;
    precise float _204 = 1.0 * cbInstanceData._m0[_96].w;
    precise float _205 = _204 + _203;
    precise float _206 = TEXCOORD_1.x * cbInstanceData._m0[_185].x;
    precise float _207 = TEXCOORD_1.y * cbInstanceData._m0[_185].y;
    precise float _208 = _207 + _206;
    precise float _209 = TEXCOORD_1.z * cbInstanceData._m0[_185].z;
    precise float _210 = _209 + _208;
    precise float _211 = 1.0 * cbInstanceData._m0[_185].w;
    precise float _212 = _211 + _210;
    precise float _213 = TEXCOORD_1.x * cbInstanceData._m0[_192].x;
    precise float _214 = TEXCOORD_1.y * cbInstanceData._m0[_192].y;
    precise float _215 = _214 + _213;
    precise float _216 = TEXCOORD_1.z * cbInstanceData._m0[_192].z;
    precise float _217 = _216 + _215;
    precise float _218 = 1.0 * cbInstanceData._m0[_192].w;
    precise float _219 = _218 + _217;
    precise float _220 = _157 - _205;
    precise float _221 = _164 - _212;
    precise float _222 = _171 - _219;
    precise float _223 = _220 * _220;
    precise float _224 = _221 * _221;
    precise float _225 = _223 + _224;
    precise float _226 = _222 * _222;
    precise float _227 = _225 + _226;
    precise float _229 = cbMtdParam._m0[9u].x * sqrt(_227);
    precise float _230 = _177 + _229;
    precise float _231 = cbPerFrame._m0[22u].x + _230;
    uint _232 = _102.w;
    float _233;
    float _235;
    float _237;
    if (_105 == 0u)
    {
        _233 = 0.0;
        _235 = 0.0;
        _237 = 0.0;
    }
    else
    {
        uint _424 = _102.z;
        precise float _234;
        precise float _236;
        precise float _238;
        float _567;
        float _569;
        float _571;
        float _425 = 0.0;
        float _426 = 0.0;
        float _427 = 0.0;
        uint _428 = _424;
        uint _430 = 0u;
        float _466;
        float _485;
        vec4 _499;
        float _500;
        float _501;
        float _515;
        float _516;
        float _517;
        float _534;
        float _535;
        float _536;
        float _537;
        bool _538;
        bool _539;
        bool _540;
        precise float _541;
        precise float _542;
        precise float _543;
        float _544;
        float _545;
        float _546;
        precise float _547;
        bool _550;
        for (;;)
        {
            uint _432 = _428 & 255u;
            uint _434 = _432 * 24u;
            uvec3 _444 = uvec3(texelFetch(g_forceParam, int(_434)).x, texelFetch(g_forceParam, int(_434 + 1u)).x, texelFetch(g_forceParam, int(_434 + 2u)).x);
            uint _449 = (_432 * 24u) + 4u;
            vec4 _462 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_449)).x, texelFetch(g_forceParam, int(_449 + 1u)).x, texelFetch(g_forceParam, int(_449 + 2u)).x, texelFetch(g_forceParam, int(_449 + 3u)).x));
            _466 = _462.w;
            uint _468 = (_432 * 24u) + 8u;
            vec4 _481 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_468)).x, texelFetch(g_forceParam, int(_468 + 1u)).x, texelFetch(g_forceParam, int(_468 + 2u)).x, texelFetch(g_forceParam, int(_468 + 3u)).x));
            _485 = _481.w;
            uint _488 = (_432 * 24u) + 12u;
            _499 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_488)).x, texelFetch(g_forceParam, int(_488 + 1u)).x, _494, texelFetch(g_forceParam, int(_488 + 3u)).x));
            _500 = _499.x;
            _501 = _499.w;
            uint _504 = (_432 * 24u) + 16u;
            vec3 _514 = uintBitsToFloat(uvec3(texelFetch(g_forceParam, int(_504)).x, texelFetch(g_forceParam, int(_504 + 1u)).x, texelFetch(g_forceParam, int(_504 + 2u)).x));
            _515 = _514.x;
            _516 = _514.y;
            _517 = _514.z;
            uint _520 = (_432 * 24u) + 20u;
            vec4 _533 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_520)).x, texelFetch(g_forceParam, int(_520 + 1u)).x, texelFetch(g_forceParam, int(_520 + 2u)).x, texelFetch(g_forceParam, int(_520 + 3u)).x));
            _534 = _533.x;
            _535 = _533.y;
            _536 = _533.z;
            _537 = _533.w;
            _538 = _444.x == 1u;
            _539 = _444.y == 1u;
            _540 = _444.z == 1u;
            _541 = _205 - _462.x;
            _542 = _212 - _462.y;
            _543 = _219 - _462.z;
            _544 = _538 ? _481.x : _541;
            _545 = _538 ? _481.y : _542;
            _546 = _538 ? _481.z : _543;
            _547 = dot(vec3(_544, _545, _546), vec3(_544, _545, _546));
            _550 = _547 > 0.0;
            float frontier_phi_5_pred;
            float frontier_phi_5_pred_1;
            float frontier_phi_5_pred_2;
            if (_550)
            {
                precise float _552 = _541 * _541;
                precise float _553 = _542 * _542;
                precise float _554 = _552 + _553;
                precise float _555 = _543 * _543;
                precise float _556 = _555 + _554;
                float _557 = sqrt(_556);
                float _558 = inversesqrt(_547);
                precise float _559 = _544 * _558;
                precise float _560 = _545 * _558;
                precise float _561 = _546 * _558;
                precise float _564 = _557 / (isnan(0.001000000047497451305389404296875) ? _499.y : (isnan(_499.y) ? 0.001000000047497451305389404296875 : max(_499.y, 0.001000000047497451305389404296875)));
                precise float _565 = 1.0 - _564;
                float _729 = isnan(0.0) ? _565 : (isnan(_565) ? 0.0 : max(_565, 0.0));
                float _566 = isnan(1.0) ? _729 : (isnan(_729) ? 1.0 : min(_729, 1.0));
                float _592;
                if (_540)
                {
                    float _579 = inversesqrt(dot(vec3(_541, _542, _543), vec3(_541, _542, _543)));
                    precise float _580 = _541 * _579;
                    precise float _581 = _542 * _579;
                    precise float _582 = _543 * _579;
                    precise float _586 = dot(vec3(_559, _560, _561), vec3(_580, _581, _582)) * 0.800000011920928955078125;
                    precise float _588 = _586 + 0.20000000298023223876953125;
                    float _740 = isnan(0.0) ? _588 : (isnan(_588) ? 0.0 : max(_588, 0.0));
                    precise float _591 = _566 * (isnan(1.0) ? _740 : (isnan(_740) ? 1.0 : min(_740, 1.0)));
                    _592 = _591;
                }
                else
                {
                    _592 = _566;
                }
                float frontier_phi_5_pred_7_ladder;
                float frontier_phi_5_pred_7_ladder_1;
                float frontier_phi_5_pred_7_ladder_2;
                if (_592 > 0.0)
                {
                    bool _595 = _538 && (!_540);
                    precise float _597 = _557 * (-4.0);
                    precise float _601 = 6.283184051513671875 / (isnan(0.001000000047497451305389404296875) ? _500 : (isnan(_500) ? 0.001000000047497451305389404296875 : max(_500, 0.001000000047497451305389404296875)));
                    precise float _603 = dot(vec2(_559, _561), vec2(_541, _543));
                    precise float _607 = _601 * _603;
                    precise float _608 = float(_595) * _607;
                    precise float _609 = _231 * _601;
                    precise float _610 = _609 - _608;
                    precise float _611 = (_595 ? 0.0 : _597) + _610;
                    precise float _613 = _485 * sin(_611);
                    precise float _614 = _560 * 0.0;
                    precise float _615 = _614 - _561;
                    precise float _616 = _561 * 0.0;
                    precise float _617 = _559 * 0.0;
                    precise float _618 = _616 - _617;
                    precise float _619 = _559 - _614;
                    precise float _620 = _501 * _613;
                    float _621 = _538 ? _620 : 0.0;
                    float _664;
                    if (_539)
                    {
                        precise float _624 = _515 * 2.0;
                        precise float _626 = _535 + _536;
                        precise float _627 = _537 + _626;
                        precise float _629 = 6.283184051513671875 / (isnan(0.001000000047497451305389404296875) ? _515 : (isnan(_515) ? 0.001000000047497451305389404296875 : max(_515, 0.001000000047497451305389404296875)));
                        precise float _630 = _534 * _629;
                        precise float _631 = (-0.0) - _559;
                        precise float _636 = dot(vec2(_561, _631), vec2(_541, _543)) / _624;
                        precise float _637 = (-0.0) - _636;
                        float _640 = fract(abs(_636));
                        precise float _641 = (-0.0) - _640;
                        precise float _643 = _624 * ((_636 >= _637) ? _640 : _641);
                        precise float _644 = _643 * 6.283184051513671875;
                        precise float _645 = _644 / _624;
                        precise float _647 = (isnan(5.0) ? _515 : (isnan(_515) ? 5.0 : min(_515, 5.0))) * sin(_645);
                        precise float _648 = _603 + _647;
                        precise float _649 = _515 * 0.25;
                        precise float _651 = _231 * _534;
                        precise float _652 = _651 - _649;
                        precise float _653 = _652 - _648;
                        precise float _654 = _534 * _627;
                        precise float _656 = _653 / (isnan(0.001000000047497451305389404296875) ? _654 : (isnan(_654) ? 0.001000000047497451305389404296875 : max(_654, 0.001000000047497451305389404296875)));
                        float _657 = fract(_656);
                        precise float _659 = 1.0 - _657;
                        float _660 = (_656 < 0.0) ? _659 : _657;
                        precise float _661 = _626 / _627;
                        precise float _662 = _535 / _627;
                        float _683;
                        if (_660 < _662)
                        {
                            precise float _681 = _660 / _662;
                            _683 = _681;
                        }
                        else
                        {
                            float frontier_phi_14_13_ladder;
                            if (_660 < _661)
                            {
                                precise float _693 = _660 - _662;
                                precise float _694 = _661 - _662;
                                precise float _695 = _693 / _694;
                                precise float _684 = 1.0 - _695;
                                frontier_phi_14_13_ladder = _684;
                            }
                            else
                            {
                                frontier_phi_14_13_ladder = 0.0;
                            }
                            _683 = frontier_phi_14_13_ladder;
                        }
                        precise float _685 = _517 * _683;
                        precise float _686 = _629 * _603;
                        precise float _687 = _231 * _630;
                        precise float _688 = _687 - _686;
                        precise float _690 = _516 + sin(_688);
                        precise float _692 = _685 * abs(_690);
                        precise float _665 = _692 + 0.0;
                        _664 = _665;
                    }
                    else
                    {
                        _664 = 0.0;
                    }
                    precise float _666 = _466 + _613;
                    precise float _667 = _666 + _664;
                    precise float _668 = _559 * _667;
                    precise float _669 = _560 * _667;
                    precise float _670 = _561 * _667;
                    precise float _671 = _615 * _621;
                    precise float _672 = _618 * _621;
                    precise float _673 = _619 * _621;
                    precise float _674 = _671 + _668;
                    precise float _675 = _672 + _669;
                    precise float _676 = _673 + _670;
                    precise float _677 = _592 * _674;
                    precise float _678 = _592 * _675;
                    precise float _679 = _592 * _676;
                    precise float _568 = _677 * 0.0500000007450580596923828125;
                    precise float _570 = _678 * 0.0500000007450580596923828125;
                    precise float _572 = _679 * 0.0500000007450580596923828125;
                    frontier_phi_5_pred_7_ladder = _568;
                    frontier_phi_5_pred_7_ladder_1 = _570;
                    frontier_phi_5_pred_7_ladder_2 = _572;
                }
                else
                {
                    frontier_phi_5_pred_7_ladder = 0.0;
                    frontier_phi_5_pred_7_ladder_1 = 0.0;
                    frontier_phi_5_pred_7_ladder_2 = 0.0;
                }
                frontier_phi_5_pred = frontier_phi_5_pred_7_ladder;
                frontier_phi_5_pred_1 = frontier_phi_5_pred_7_ladder_1;
                frontier_phi_5_pred_2 = frontier_phi_5_pred_7_ladder_2;
            }
            else
            {
                frontier_phi_5_pred = 0.0;
                frontier_phi_5_pred_1 = 0.0;
                frontier_phi_5_pred_2 = 0.0;
            }
            _567 = frontier_phi_5_pred;
            _569 = frontier_phi_5_pred_1;
            _571 = frontier_phi_5_pred_2;
            _234 = _425 + _567;
            _236 = _426 + _569;
            _238 = _427 + _571;
            uint _431 = _430 + 1u;
            if (_431 == _105)
            {
                break;
            }
            else
            {
                _425 = _234;
                _426 = _236;
                _427 = _238;
                _428 = (_430 != 3u) ? (_428 >> 8u) : _232;
                _430 = _431;
                continue;
            }
        }
        _233 = _234;
        _235 = _236;
        _237 = _238;
    }
    precise float _239 = _233 * _233;
    precise float _240 = _235 * _235;
    precise float _241 = _239 + _240;
    precise float _242 = _237 * _237;
    precise float _243 = _241 + _242;
    float _244 = sqrt(_243);
    bool _245 = _244 < 0.00011000000085914507508277893066406;
    float _250 = inversesqrt(dot(vec3(cbInstanceData._m0[_96].x, cbInstanceData._m0[_185].x, cbInstanceData._m0[_192].x), vec3(cbInstanceData._m0[_96].x, cbInstanceData._m0[_185].x, cbInstanceData._m0[_192].x)));
    precise float _251 = cbInstanceData._m0[_96].x * _250;
    precise float _252 = cbInstanceData._m0[_185].x * _250;
    precise float _253 = cbInstanceData._m0[_192].x * _250;
    float _257 = inversesqrt(dot(vec3(cbInstanceData._m0[_96].y, cbInstanceData._m0[_185].y, cbInstanceData._m0[_192].y), vec3(cbInstanceData._m0[_96].y, cbInstanceData._m0[_185].y, cbInstanceData._m0[_192].y)));
    precise float _258 = cbInstanceData._m0[_96].y * _257;
    precise float _259 = cbInstanceData._m0[_185].y * _257;
    precise float _260 = cbInstanceData._m0[_192].y * _257;
    float _264 = inversesqrt(dot(vec3(cbInstanceData._m0[_96].z, cbInstanceData._m0[_185].z, cbInstanceData._m0[_192].z), vec3(cbInstanceData._m0[_96].z, cbInstanceData._m0[_185].z, cbInstanceData._m0[_192].z)));
    precise float _265 = cbInstanceData._m0[_96].z * _264;
    precise float _266 = cbInstanceData._m0[_185].z * _264;
    precise float _267 = cbInstanceData._m0[_192].z * _264;
    precise float _268 = _251 * 0.0;
    precise float _269 = 1.0 * _258;
    precise float _270 = _269 + _268;
    precise float _271 = 0.0 * _265;
    precise float _272 = _271 + _270;
    precise float _273 = _252 * 0.0;
    precise float _274 = 1.0 * _259;
    precise float _275 = _274 + _273;
    precise float _276 = 0.0 * _266;
    precise float _277 = _276 + _275;
    precise float _278 = _253 * 0.0;
    precise float _279 = 1.0 * _260;
    precise float _280 = _279 + _278;
    precise float _281 = 0.0 * _267;
    precise float _282 = _281 + _280;
    float _286 = inversesqrt(dot(vec3(_233, _235, _237), vec3(_233, _235, _237)));
    precise float _287 = _233 * _286;
    precise float _288 = _235 * _286;
    precise float _289 = _237 * _286;
    precise float _290 = _277 * _289;
    precise float _291 = _282 * _288;
    precise float _292 = _290 - _291;
    precise float _293 = _282 * _287;
    precise float _294 = _272 * _289;
    precise float _295 = _293 - _294;
    precise float _296 = _272 * _288;
    precise float _297 = _277 * _287;
    precise float _298 = _296 - _297;
    float _302 = inversesqrt(dot(vec3(_292, _295, _298), vec3(_292, _295, _298)));
    precise float _303 = _302 * _292;
    precise float _304 = _302 * _295;
    precise float _305 = _302 * _298;
    precise float _306 = _244 + 1.0;
    precise float _308 = cbMtdParam._m0[9u].y * log2(_306);
    precise float _309 = dot(vec3(_303, _304, _305), vec3(_220, _221, _222));
    precise float _312 = _303 * _309;
    precise float _313 = _304 * _309;
    precise float _314 = _305 * _309;
    precise float _315 = _205 + _312;
    precise float _316 = _212 + _313;
    precise float _317 = _219 + _314;
    precise float _318 = _157 - _315;
    precise float _319 = _164 - _316;
    precise float _320 = _171 - _317;
    precise float _321 = _304 * _320;
    precise float _322 = _305 * _319;
    precise float _323 = _321 - _322;
    precise float _324 = _305 * _318;
    precise float _325 = _303 * _320;
    precise float _326 = _324 - _325;
    precise float _327 = _303 * _319;
    precise float _328 = _304 * _318;
    precise float _329 = _327 - _328;
    float _330 = sin(_308);
    float _331 = cos(_308);
    precise float _332 = _318 * _331;
    precise float _333 = _319 * _331;
    precise float _334 = _320 * _331;
    precise float _335 = _330 * _323;
    precise float _336 = _330 * _326;
    precise float _337 = _330 * _329;
    precise float _338 = _332 + _335;
    precise float _339 = _333 + _336;
    precise float _340 = _337 + _334;
    precise float _341 = _315 + _338;
    precise float _342 = _316 + _339;
    precise float _343 = _317 + _340;
    precise float _344 = _341 - _157;
    precise float _345 = _342 - _164;
    precise float _346 = _343 - _171;
    precise float _350 = _157 + (_245 ? 0.0 : _344);
    precise float _351 = _164 + (_245 ? 0.0 : _345);
    precise float _352 = _171 + (_245 ? 0.0 : _346);
    precise float _358 = _350 - cbSceneParam._m0[3u].x;
    precise float _359 = _351 - cbSceneParam._m0[3u].y;
    precise float _360 = _352 - cbSceneParam._m0[3u].z;
    precise float _388 = cbSceneParam._m0[24u].x * _358;
    precise float _389 = _359 * cbSceneParam._m0[24u].y;
    precise float _390 = _389 + _388;
    precise float _391 = _360 * cbSceneParam._m0[24u].z;
    precise float _392 = _391 + _390;
    precise float _393 = 1.0 * cbSceneParam._m0[24u].w;
    precise float _394 = _393 + _392;
    precise float _395 = cbSceneParam._m0[25u].x * _358;
    precise float _396 = _359 * cbSceneParam._m0[25u].y;
    precise float _397 = _396 + _395;
    precise float _398 = _360 * cbSceneParam._m0[25u].z;
    precise float _399 = _398 + _397;
    precise float _400 = 1.0 * cbSceneParam._m0[25u].w;
    precise float _401 = _400 + _399;
    precise float _402 = cbSceneParam._m0[26u].x * _358;
    precise float _403 = _359 * cbSceneParam._m0[26u].y;
    precise float _404 = _403 + _402;
    precise float _405 = _360 * cbSceneParam._m0[26u].z;
    precise float _406 = _405 + _404;
    precise float _407 = 1.0 * cbSceneParam._m0[26u].w;
    precise float _408 = _407 + _406;
    precise float _409 = _358 * cbSceneParam._m0[27u].x;
    precise float _410 = _359 * cbSceneParam._m0[27u].y;
    precise float _411 = _410 + _409;
    precise float _412 = _360 * cbSceneParam._m0[27u].z;
    precise float _413 = _412 + _411;
    precise float _414 = 1.0 * cbSceneParam._m0[27u].w;
    precise float _415 = _414 + _413;
    gl_Position.x = 0.0;
    gl_Position.y = 0.0;
    gl_Position.z = 0.0;
    gl_Position.w = 0.0;
    gl_Position.x = _394;
    gl_Position.y = _401;
    gl_Position.z = _408;
    gl_Position.w = _415;
}


