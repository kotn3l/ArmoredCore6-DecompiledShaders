#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[10];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D SLOD_CrossBillboard_SAT_PivotAnim_snp_0_Texture2D_17;
layout(set = 0, binding = 1) uniform texture2D SLOD_CrossBillboard_SAT_PivotAnim_snp_0_Texture2D_18;
layout(set = 0, binding = 2) uniform texture2D SLOD_CrossBillboard_SAT_PivotAnim_snp_0_Texture2D_19;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in float TEXCOORD;
layout(location = 4, component = 1) in float TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 4, component = 2) in float TEXCOORD_12;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _865;
float _3277;
float _3278;
float _3279;
float _3280;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _186 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _187 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _188 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _194 = inversesqrt(dot(vec3(_186, _187, _188), vec3(_186, _187, _188)));
    float _201 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _202 = _201 * NORMAL.x;
    float _203 = _201 * NORMAL.y;
    float _204 = _201 * NORMAL.z;
    float _208 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _216;
    float _217;
    float _218;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _216 = (-0.0) - _202;
        _217 = (-0.0) - _203;
        _218 = (-0.0) - _204;
    }
    else
    {
        _216 = _202;
        _217 = _203;
        _218 = _204;
    }
    vec4 _232 = texture(sampler2D(SLOD_CrossBillboard_SAT_PivotAnim_snp_0_Texture2D_17, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1) + cbTextureTilingScale._m0[0u].w));
    float _238 = _232.w;
    float _239 = 1.0 / _238;
    float _241 = _232.x * _239;
    float _242 = _239 * _232.y;
    float _243 = _239 * _232.z;
    vec4 _255 = texture(sampler2D(SLOD_CrossBillboard_SAT_PivotAnim_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1) + cbTextureTilingScale._m0[1u].w));
    float _258 = _255.x * _239;
    vec4 _270 = texture(sampler2D(SLOD_CrossBillboard_SAT_PivotAnim_snp_0_Texture2D_19, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1) + cbTextureTilingScale._m0[2u].w));
    float _278 = (_270.x * 2.0) + (-1.0);
    float _280 = (_270.y * 2.0) + (-1.0);
    float _281 = dot(vec2(_278, _280), vec2(_278, _280));
    float _3289 = isnan(0.0) ? _281 : (isnan(_281) ? 0.0 : max(_281, 0.0));
    float _286 = sqrt(1.0 - (isnan(1.0) ? _3289 : (isnan(_3289) ? 1.0 : min(_3289, 1.0))));
    float _287 = _270.z * _239;
    float _290 = fma(_286, _216, fma(_280, _208 * TANGENT.x, (_194 * _186) * _278));
    float _293 = fma(_286, _217, fma(_280, _208 * TANGENT.y, (_194 * _187) * _278));
    float _296 = fma(_286, _218, fma(_280, _208 * TANGENT.z, (_194 * _188) * _278));
    float _300 = inversesqrt(dot(vec3(_290, _293, _296), vec3(_290, _293, _296)));
    float _301 = _300 * _290;
    float _302 = _300 * _293;
    float _303 = _300 * _296;
    float _3300 = isnan(0.0) ? _238 : (isnan(_238) ? 0.0 : max(_238, 0.0));
    float _304 = isnan(1.0) ? _3300 : (isnan(_3300) ? 1.0 : min(_3300, 1.0));
    float _3311 = isnan(0.0) ? _287 : (isnan(_287) ? 0.0 : max(_287, 0.0));
    float _305 = isnan(1.0) ? _3311 : (isnan(_3311) ? 1.0 : min(_3311, 1.0));
    float _3322 = isnan(0.0) ? _241 : (isnan(_241) ? 0.0 : max(_241, 0.0));
    float _3333 = isnan(0.0) ? _242 : (isnan(_242) ? 0.0 : max(_242, 0.0));
    float _3344 = isnan(0.0) ? _243 : (isnan(_243) ? 0.0 : max(_243, 0.0));
    float _3355 = isnan(0.0) ? _258 : (isnan(_258) ? 0.0 : max(_258, 0.0));
    float _309 = isnan(1.0) ? _3355 : (isnan(_3355) ? 1.0 : min(_3355, 1.0));
    float _312 = gl_FragCoord.x * 0.125;
    float _314 = gl_FragCoord.y * 0.125;
    if (!(!(texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_312, _314)).w > TEXCOORD_12)))
    {
        discard_state = true;
    }
    float _333 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _376 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _386 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _376);
    float _387 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _376);
    float _388 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _376);
    float _392 = inversesqrt(dot(vec3(_386, _387, _388), vec3(_386, _387, _388)));
    float _393 = _386 * _392;
    float _394 = _387 * _392;
    float _395 = _388 * _392;
    vec4 _397 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_312, _314));
    float _399 = _397.w;
    float _405 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _406 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _427 = fma(_303, cbSceneParam._m0[5u].z, fma(_302, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _301));
    float _430 = fma(_303, cbSceneParam._m0[6u].z, fma(_302, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _301));
    float _433 = fma(_303, cbSceneParam._m0[7u].z, fma(_302, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _301));
    uint _446 = uint(roundEven(NORMAL.w)) * 13u;
    uint _448 = _446 + 9u;
    uint _449 = _448 + uint(cbMatDynParam._m0[0u].w);
    float _455 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3322 : (isnan(_3322) ? 1.0 : min(_3322, 1.0)))) * cbInstanceData._m0[_449].x;
    float _456 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3333 : (isnan(_3333) ? 1.0 : min(_3333, 1.0)))) * cbInstanceData._m0[_449].y;
    float _457 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3344 : (isnan(_3344) ? 1.0 : min(_3344, 1.0)))) * cbInstanceData._m0[_449].z;
    float _3366 = isnan(0.0) ? _455 : (isnan(_455) ? 0.0 : max(_455, 0.0));
    float _458 = isnan(1.0) ? _3366 : (isnan(_3366) ? 1.0 : min(_3366, 1.0));
    float _3377 = isnan(0.0) ? _456 : (isnan(_456) ? 0.0 : max(_456, 0.0));
    float _459 = isnan(1.0) ? _3377 : (isnan(_3377) ? 1.0 : min(_3377, 1.0));
    float _3388 = isnan(0.0) ? _457 : (isnan(_457) ? 0.0 : max(_457, 0.0));
    float _460 = isnan(1.0) ? _3388 : (isnan(_3388) ? 1.0 : min(_3388, 1.0));
    float _461 = 1.0 - _309;
    float _462 = _458 * _461;
    float _463 = _459 * _461;
    float _464 = _460 * _461;
    float _469 = (_458 + (-0.039999999105930328369140625)) * _309;
    float _470 = (_459 + (-0.039999999105930328369140625)) * _309;
    float _471 = (_460 + (-0.039999999105930328369140625)) * _309;
    float _472 = _469 + 0.039999999105930328369140625;
    float _474 = _470 + 0.039999999105930328369140625;
    float _475 = _471 + 0.039999999105930328369140625;
    vec4 _484 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _405, cbSceneParam._m0[86u].y * _406));
    float _487 = _484.x * TEXCOORD_3.w;
    float _488 = dot(vec3(_301, _302, _303), vec3(_393, _394, _395));
    float _491 = _488 * 2.0;
    float _495 = (_491 * _301) - _393;
    float _496 = (_491 * _302) - _394;
    float _497 = (_491 * _303) - _395;
    float _501 = abs(dot(vec3(_393, _394, _395), vec3(_301, _302, _303)));
    float _3399 = isnan(0.0) ? _501 : (isnan(_501) ? 0.0 : max(_501, 0.0));
    float _503 = sqrt(_305);
    float _516 = exp2((_503 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3399 : (isnan(_3399) ? 1.0 : min(_3399, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_503 * 3.0));
    float _522 = (1.0 - _516) * ((_503 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _523 = _516 * _503;
    float _551 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _555 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _559 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _864;
    float _866;
    float _867;
    float _868;
    float _869;
    float _870;
    float _871;
    float _872;
    float _873;
    float _874;
    float _875;
    float _876;
    float _877;
    float _878;
    float _879;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _589 = fma(_559, cbModelParam._m0[26u].z, fma(_555, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _551));
        float _593 = fma(_559, cbModelParam._m0[27u].z, fma(_555, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _551));
        float _597 = fma(_559, cbModelParam._m0[28u].z, fma(_555, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _551));
        float _622 = _551 + _301;
        float _623 = _555 + _302;
        float _624 = _559 + _303;
        float _634 = fma(_624, cbModelParam._m0[26u].z, fma(_623, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _622)) - _589;
        float _635 = fma(_624, cbModelParam._m0[27u].z, fma(_623, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _622)) - _593;
        float _636 = fma(_624, cbModelParam._m0[28u].z, fma(_623, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _622)) - _597;
        float _640 = inversesqrt(dot(vec3(_634, _635, _636), vec3(_634, _635, _636)));
        float _653 = ((_640 * _634) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_589 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _654 = ((_640 * _635) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_593 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _655 = ((_640 * _636) / cbModelParam._m0[34u].z) + ((((((_597 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _658 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_653, _654, _655), 0.0);
        vec4 _665 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_653, _654, _655), 0.0);
        vec4 _672 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_653, _654, _655), 0.0);
        vec4 _679 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_653, _654, _655), 0.0);
        float _692 = exp2((_658.w + (-0.5)) * 20.0) * 2.0;
        float _693 = _692 * (_658.x + (-0.5));
        float _694 = _692 * (_658.y + (-0.5));
        float _695 = _692 * (_658.z + (-0.5));
        float _702 = exp2((_665.w + (-0.5)) * 20.0) * 2.0;
        float _703 = _702 * (_665.x + (-0.5));
        float _704 = _702 * (_665.y + (-0.5));
        float _705 = _702 * (_665.z + (-0.5));
        float _712 = exp2((_672.w + (-0.5)) * 20.0) * 2.0;
        float _713 = _712 * (_672.x + (-0.5));
        float _714 = _712 * (_672.y + (-0.5));
        float _715 = _712 * (_672.z + (-0.5));
        float _722 = exp2((_679.w + (-0.5)) * 20.0) * 2.0;
        float _723 = _722 * (_679.x + (-0.5));
        float _724 = _722 * (_679.y + (-0.5));
        float _725 = _722 * (_679.z + (-0.5));
        float _726 = isnan(0.0) ? _723 : (isnan(_723) ? 0.0 : max(_723, 0.0));
        float _727 = isnan(0.0) ? _724 : (isnan(_724) ? 0.0 : max(_724, 0.0));
        float _728 = isnan(0.0) ? _725 : (isnan(_725) ? 0.0 : max(_725, 0.0));
        float _729 = _693 * 0.5;
        float _730 = _703 * 0.5;
        float _731 = _713 * 0.5;
        float _732 = dot(vec3(_729, _730, _731), vec3(_729, _730, _731));
        float _737 = (_732 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_732);
        float _746 = (dot(vec3(_301, _302, _303), vec3(_737 * _729, _737 * _730, _737 * _731)) + 1.0) * 0.5;
        float _3425 = isnan(0.0) ? _746 : (isnan(_746) ? 0.0 : max(_746, 0.0));
        float _756 = sqrt(((_730 * _730) + (_729 * _729)) + (_731 * _731)) / (_726 + 9.9999997473787516355514526367188e-06);
        float _3436 = isnan(0.0) ? _756 : (isnan(_756) ? 0.0 : max(_756, 0.0));
        float _757 = isnan(1.0) ? _3436 : (isnan(_3436) ? 1.0 : min(_3436, 1.0));
        float _758 = _757 * 2.0;
        float _762 = (1.0 - _757) / (_757 + 1.0);
        float _3447 = isnan(0.0) ? _762 : (isnan(_762) ? 0.0 : max(_762, 0.0));
        float _763 = isnan(1.0) ? _3447 : (isnan(_3447) ? 1.0 : min(_3447, 1.0));
        float _772 = ((((1.0 - _763) * (_758 + 2.0)) * exp2(log2(isnan(1.0) ? _3425 : (isnan(_3425) ? 1.0 : min(_3425, 1.0))) * (_758 + 1.0))) + _763) * _726;
        float _773 = _694 * 0.5;
        float _774 = _704 * 0.5;
        float _775 = _714 * 0.5;
        float _776 = dot(vec3(_773, _774, _775), vec3(_773, _774, _775));
        float _781 = (_776 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_776);
        float _789 = (dot(vec3(_301, _302, _303), vec3(_781 * _773, _781 * _774, _781 * _775)) + 1.0) * 0.5;
        float _3458 = isnan(0.0) ? _789 : (isnan(_789) ? 0.0 : max(_789, 0.0));
        float _798 = sqrt(((_774 * _774) + (_773 * _773)) + (_775 * _775)) / (_727 + 9.9999997473787516355514526367188e-06);
        float _3469 = isnan(0.0) ? _798 : (isnan(_798) ? 0.0 : max(_798, 0.0));
        float _799 = isnan(1.0) ? _3469 : (isnan(_3469) ? 1.0 : min(_3469, 1.0));
        float _800 = _799 * 2.0;
        float _804 = (1.0 - _799) / (_799 + 1.0);
        float _3480 = isnan(0.0) ? _804 : (isnan(_804) ? 0.0 : max(_804, 0.0));
        float _805 = isnan(1.0) ? _3480 : (isnan(_3480) ? 1.0 : min(_3480, 1.0));
        float _814 = ((((1.0 - _805) * (_800 + 2.0)) * exp2(log2(isnan(1.0) ? _3458 : (isnan(_3458) ? 1.0 : min(_3458, 1.0))) * (_800 + 1.0))) + _805) * _727;
        float _815 = _695 * 0.5;
        float _816 = _705 * 0.5;
        float _817 = _715 * 0.5;
        float _818 = dot(vec3(_815, _816, _817), vec3(_815, _816, _817));
        float _823 = (_818 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_818);
        float _831 = (dot(vec3(_301, _302, _303), vec3(_823 * _815, _823 * _816, _823 * _817)) + 1.0) * 0.5;
        float _3491 = isnan(0.0) ? _831 : (isnan(_831) ? 0.0 : max(_831, 0.0));
        float _840 = sqrt(((_816 * _816) + (_815 * _815)) + (_817 * _817)) / (_728 + 9.9999997473787516355514526367188e-06);
        float _3502 = isnan(0.0) ? _840 : (isnan(_840) ? 0.0 : max(_840, 0.0));
        float _841 = isnan(1.0) ? _3502 : (isnan(_3502) ? 1.0 : min(_3502, 1.0));
        float _842 = _841 * 2.0;
        float _846 = (1.0 - _841) / (_841 + 1.0);
        float _3513 = isnan(0.0) ? _846 : (isnan(_846) ? 0.0 : max(_846, 0.0));
        float _847 = isnan(1.0) ? _3513 : (isnan(_3513) ? 1.0 : min(_3513, 1.0));
        float _856 = ((((1.0 - _847) * (_842 + 2.0)) * exp2(log2(isnan(1.0) ? _3491 : (isnan(_3491) ? 1.0 : min(_3491, 1.0))) * (_842 + 1.0))) + _847) * _728;
        _864 = _695;
        _866 = _694;
        _867 = _693;
        _868 = _705;
        _869 = _704;
        _870 = _703;
        _871 = _715;
        _872 = _714;
        _873 = _713;
        _874 = _728;
        _875 = _727;
        _876 = _726;
        _877 = cbModelParam._m0[36u].z * (isnan(0.0) ? _772 : (isnan(_772) ? 0.0 : max(_772, 0.0)));
        _878 = cbModelParam._m0[36u].z * (isnan(0.0) ? _814 : (isnan(_814) ? 0.0 : max(_814, 0.0)));
        _879 = cbModelParam._m0[36u].z * (isnan(0.0) ? _856 : (isnan(_856) ? 0.0 : max(_856, 0.0)));
    }
    else
    {
        _864 = _865;
        _866 = _865;
        _867 = _865;
        _868 = _865;
        _869 = _865;
        _870 = _865;
        _871 = _865;
        _872 = _865;
        _873 = _865;
        _874 = _865;
        _875 = _865;
        _876 = _865;
        _877 = 0.0;
        _878 = 0.0;
        _879 = 0.0;
    }
    float _1174;
    float _1175;
    float _1176;
    float _1177;
    float _1178;
    float _1179;
    float _1180;
    float _1181;
    float _1182;
    float _1183;
    float _1184;
    float _1185;
    float _1186;
    float _1187;
    float _1188;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _905 = fma(_559, cbModelParam._m0[30u].z, fma(_555, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _551));
        float _909 = fma(_559, cbModelParam._m0[31u].z, fma(_555, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _551));
        float _913 = fma(_559, cbModelParam._m0[32u].z, fma(_555, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _551));
        float _936 = _551 + _301;
        float _937 = _555 + _302;
        float _938 = _559 + _303;
        float _948 = fma(_938, cbModelParam._m0[30u].z, fma(_937, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _936)) - _905;
        float _949 = fma(_938, cbModelParam._m0[31u].z, fma(_937, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _936)) - _909;
        float _950 = fma(_938, cbModelParam._m0[32u].z, fma(_937, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _936)) - _913;
        float _954 = inversesqrt(dot(vec3(_948, _949, _950), vec3(_948, _949, _950)));
        float _967 = ((_954 * _948) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_905 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _968 = ((_954 * _949) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_909 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _969 = ((_954 * _950) / cbModelParam._m0[35u].z) + ((((((_913 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _971 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_967, _968, _969), 0.0);
        vec4 _978 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_967, _968, _969), 0.0);
        vec4 _985 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_967, _968, _969), 0.0);
        vec4 _992 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_967, _968, _969), 0.0);
        float _1004 = exp2((_971.w + (-0.5)) * 20.0) * 2.0;
        float _1005 = _1004 * (_971.x + (-0.5));
        float _1006 = _1004 * (_971.y + (-0.5));
        float _1007 = _1004 * (_971.z + (-0.5));
        float _1014 = exp2((_978.w + (-0.5)) * 20.0) * 2.0;
        float _1015 = _1014 * (_978.x + (-0.5));
        float _1016 = _1014 * (_978.y + (-0.5));
        float _1017 = _1014 * (_978.z + (-0.5));
        float _1024 = exp2((_985.w + (-0.5)) * 20.0) * 2.0;
        float _1025 = _1024 * (_985.x + (-0.5));
        float _1026 = _1024 * (_985.y + (-0.5));
        float _1027 = _1024 * (_985.z + (-0.5));
        float _1034 = exp2((_992.w + (-0.5)) * 20.0) * 2.0;
        float _1035 = _1034 * (_992.x + (-0.5));
        float _1036 = _1034 * (_992.y + (-0.5));
        float _1037 = _1034 * (_992.z + (-0.5));
        float _1038 = isnan(0.0) ? _1035 : (isnan(_1035) ? 0.0 : max(_1035, 0.0));
        float _1039 = isnan(0.0) ? _1036 : (isnan(_1036) ? 0.0 : max(_1036, 0.0));
        float _1040 = isnan(0.0) ? _1037 : (isnan(_1037) ? 0.0 : max(_1037, 0.0));
        float _1041 = _1005 * 0.5;
        float _1042 = _1015 * 0.5;
        float _1043 = _1025 * 0.5;
        float _1044 = dot(vec3(_1041, _1042, _1043), vec3(_1041, _1042, _1043));
        float _1049 = (_1044 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1044);
        float _1057 = (dot(vec3(_301, _302, _303), vec3(_1049 * _1041, _1049 * _1042, _1049 * _1043)) + 1.0) * 0.5;
        float _3554 = isnan(0.0) ? _1057 : (isnan(_1057) ? 0.0 : max(_1057, 0.0));
        float _1066 = sqrt(((_1042 * _1042) + (_1041 * _1041)) + (_1043 * _1043)) / (_1038 + 9.9999997473787516355514526367188e-06);
        float _3565 = isnan(0.0) ? _1066 : (isnan(_1066) ? 0.0 : max(_1066, 0.0));
        float _1067 = isnan(1.0) ? _3565 : (isnan(_3565) ? 1.0 : min(_3565, 1.0));
        float _1068 = _1067 * 2.0;
        float _1072 = (1.0 - _1067) / (_1067 + 1.0);
        float _3576 = isnan(0.0) ? _1072 : (isnan(_1072) ? 0.0 : max(_1072, 0.0));
        float _1073 = isnan(1.0) ? _3576 : (isnan(_3576) ? 1.0 : min(_3576, 1.0));
        float _1082 = ((((1.0 - _1073) * (_1068 + 2.0)) * exp2(log2(isnan(1.0) ? _3554 : (isnan(_3554) ? 1.0 : min(_3554, 1.0))) * (_1068 + 1.0))) + _1073) * _1038;
        float _1083 = _1006 * 0.5;
        float _1084 = _1016 * 0.5;
        float _1085 = _1026 * 0.5;
        float _1086 = dot(vec3(_1083, _1084, _1085), vec3(_1083, _1084, _1085));
        float _1091 = (_1086 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1086);
        float _1099 = (dot(vec3(_301, _302, _303), vec3(_1091 * _1083, _1091 * _1084, _1091 * _1085)) + 1.0) * 0.5;
        float _3587 = isnan(0.0) ? _1099 : (isnan(_1099) ? 0.0 : max(_1099, 0.0));
        float _1108 = sqrt(((_1084 * _1084) + (_1083 * _1083)) + (_1085 * _1085)) / (_1039 + 9.9999997473787516355514526367188e-06);
        float _3598 = isnan(0.0) ? _1108 : (isnan(_1108) ? 0.0 : max(_1108, 0.0));
        float _1109 = isnan(1.0) ? _3598 : (isnan(_3598) ? 1.0 : min(_3598, 1.0));
        float _1110 = _1109 * 2.0;
        float _1114 = (1.0 - _1109) / (_1109 + 1.0);
        float _3609 = isnan(0.0) ? _1114 : (isnan(_1114) ? 0.0 : max(_1114, 0.0));
        float _1115 = isnan(1.0) ? _3609 : (isnan(_3609) ? 1.0 : min(_3609, 1.0));
        float _1124 = ((((1.0 - _1115) * (_1110 + 2.0)) * exp2(log2(isnan(1.0) ? _3587 : (isnan(_3587) ? 1.0 : min(_3587, 1.0))) * (_1110 + 1.0))) + _1115) * _1039;
        float _1125 = _1007 * 0.5;
        float _1126 = _1017 * 0.5;
        float _1127 = _1027 * 0.5;
        float _1128 = dot(vec3(_1125, _1126, _1127), vec3(_1125, _1126, _1127));
        float _1133 = (_1128 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1128);
        float _1141 = (dot(vec3(_301, _302, _303), vec3(_1133 * _1125, _1133 * _1126, _1133 * _1127)) + 1.0) * 0.5;
        float _3620 = isnan(0.0) ? _1141 : (isnan(_1141) ? 0.0 : max(_1141, 0.0));
        float _1150 = sqrt(((_1126 * _1126) + (_1125 * _1125)) + (_1127 * _1127)) / (_1040 + 9.9999997473787516355514526367188e-06);
        float _3631 = isnan(0.0) ? _1150 : (isnan(_1150) ? 0.0 : max(_1150, 0.0));
        float _1151 = isnan(1.0) ? _3631 : (isnan(_3631) ? 1.0 : min(_3631, 1.0));
        float _1152 = _1151 * 2.0;
        float _1156 = (1.0 - _1151) / (_1151 + 1.0);
        float _3642 = isnan(0.0) ? _1156 : (isnan(_1156) ? 0.0 : max(_1156, 0.0));
        float _1157 = isnan(1.0) ? _3642 : (isnan(_3642) ? 1.0 : min(_3642, 1.0));
        float _1166 = ((((1.0 - _1157) * (_1152 + 2.0)) * exp2(log2(isnan(1.0) ? _3620 : (isnan(_3620) ? 1.0 : min(_3620, 1.0))) * (_1152 + 1.0))) + _1157) * _1040;
        _1174 = _1007;
        _1175 = _1006;
        _1176 = _1005;
        _1177 = _1017;
        _1178 = _1016;
        _1179 = _1015;
        _1180 = _1027;
        _1181 = _1026;
        _1182 = _1025;
        _1183 = _1040;
        _1184 = _1039;
        _1185 = _1038;
        _1186 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1082 : (isnan(_1082) ? 0.0 : max(_1082, 0.0)));
        _1187 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1124 : (isnan(_1124) ? 0.0 : max(_1124, 0.0)));
        _1188 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1166 : (isnan(_1166) ? 0.0 : max(_1166, 0.0)));
    }
    else
    {
        _1174 = _865;
        _1175 = _865;
        _1176 = _865;
        _1177 = _865;
        _1178 = _865;
        _1179 = _865;
        _1180 = _865;
        _1181 = _865;
        _1182 = _865;
        _1183 = _865;
        _1184 = _865;
        _1185 = _865;
        _1186 = 0.0;
        _1187 = 0.0;
        _1188 = 0.0;
    }
    float _1198 = (cbModelParam._m0[1u].x * (_1186 - _877)) + _877;
    float _1199 = (cbModelParam._m0[1u].x * (_1187 - _878)) + _878;
    float _1200 = (cbModelParam._m0[1u].x * (_1188 - _879)) + _879;
    float _1221 = fma(_1200, cbSceneParam._m0[89u].z, fma(_1199, cbSceneParam._m0[89u].y, _1198 * cbSceneParam._m0[89u].x));
    float _1224 = fma(_1200, cbSceneParam._m0[90u].z, fma(_1199, cbSceneParam._m0[90u].y, _1198 * cbSceneParam._m0[90u].x));
    float _1227 = fma(_1200, cbSceneParam._m0[91u].z, fma(_1199, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1198));
    float _1242 = _495 * 0.5;
    float _1243 = _496 * 0.5;
    float _1244 = _497 * 0.5;
    float _1245 = dot(vec4(_1242, _1243, _1244, 1.0), vec4(_1176, _1179, _1182, _1185));
    float _1248 = dot(vec4(_1242, _1243, _1244, 1.0), vec4(_1175, _1178, _1181, _1184));
    float _1251 = dot(vec4(_1242, _1243, _1244, 1.0), vec4(_1174, _1177, _1180, _1183));
    float _1285;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1258 = dot(vec4(_1242, _1243, _1244, 1.0), vec4(_864, _868, _871, _874));
        float _1262 = dot(vec4(_1242, _1243, _1244, 1.0), vec4(_866, _869, _872, _875));
        float _1266 = dot(vec4(_1242, _1243, _1244, 1.0), vec4(_867, _870, _873, _876));
        float _1273 = dot(vec4(cbModelParam._m0[39u]), vec4(_1242, _1243, _1244, 1.0));
        _1285 = dot(vec3(isnan(0.0) ? _1266 : (isnan(_1266) ? 0.0 : max(_1266, 0.0)), isnan(0.0) ? _1262 : (isnan(_1262) ? 0.0 : max(_1262, 0.0)), isnan(0.0) ? _1258 : (isnan(_1258) ? 0.0 : max(_1258, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1273) ? 0.0 : (isnan(0.0) ? _1273 : max(0.0, _1273))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1285 = 1.0;
    }
    float _1296;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1287 = dot(vec4(cbModelParam._m0[40u]), vec4(_1242, _1243, _1244, 1.0));
        _1296 = dot(vec3(isnan(0.0) ? _1245 : (isnan(_1245) ? 0.0 : max(_1245, 0.0)), isnan(0.0) ? _1248 : (isnan(_1248) ? 0.0 : max(_1248, 0.0)), isnan(0.0) ? _1251 : (isnan(_1251) ? 0.0 : max(_1251, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1287) ? 0.0 : (isnan(0.0) ? _1287 : max(0.0, _1287))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1296 = 1.0;
    }
    float _1300 = (_1296 * cbModelParam._m0[1u].x) + (_1285 * (1.0 - cbModelParam._m0[1u].x));
    float _1310 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _305);
    float _1311 = isnan(_1310) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1310 : min(cbModelParam._m0[25u].z, _1310));
    float _1393;
    float _1395;
    float _1397;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1360 = fma(_559, cbModelParam._m0[13u].z, fma(_555, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _551)) + cbModelParam._m0[13u].w;
        float _1364 = fma(_559, cbModelParam._m0[14u].z, fma(_555, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _551)) + cbModelParam._m0[14u].w;
        float _1368 = fma(_559, cbModelParam._m0[15u].z, fma(_555, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _551)) + cbModelParam._m0[15u].w;
        float _1371 = fma(_497, cbModelParam._m0[13u].z, fma(_496, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _495));
        float _1374 = fma(_497, cbModelParam._m0[14u].z, fma(_496, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _495));
        float _1377 = fma(_497, cbModelParam._m0[15u].z, fma(_496, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _495));
        float _1405;
        if (_1371 > 0.0)
        {
            _1405 = abs((1.0 - _1360) / _1371);
        }
        else
        {
            float frontier_phi_18_16_ladder;
            if (_1371 < 0.0)
            {
                frontier_phi_18_16_ladder = abs((_1360 + 1.0) / _1371);
            }
            else
            {
                frontier_phi_18_16_ladder = 5000.0;
            }
            _1405 = frontier_phi_18_16_ladder;
        }
        float _1634;
        if (_1374 > 0.0)
        {
            _1634 = abs((1.0 - _1364) / _1374);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1374 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1364 + 1.0) / _1374);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1634 = frontier_phi_27_23_ladder;
        }
        float _1891;
        if (_1377 > 0.0)
        {
            _1891 = abs((1.0 - _1368) / _1377);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1377 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1368 + 1.0) / _1377);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _1891 = frontier_phi_39_34_ladder;
        }
        float _1893 = isnan(_1634) ? _1405 : (isnan(_1405) ? _1634 : min(_1405, _1634));
        float _1894 = isnan(_1891) ? _1893 : (isnan(_1893) ? _1891 : min(_1893, _1891));
        float _1898 = (_1894 * _1371) + _1360;
        float _1899 = (_1894 * _1374) + _1364;
        float _1900 = (_1894 * _1377) + _1368;
        float _1901 = _1894 * 9.9999997473787516355514526367188e-05;
        float _1903 = (-1.0) - _1901;
        float _1905 = _1901 + 1.0;
        float frontier_phi_17_39_ladder;
        float frontier_phi_17_39_ladder_1;
        float frontier_phi_17_39_ladder_2;
        if ((_1900 > _1905) || ((_1900 < _1903) || ((_1899 > _1905) || ((_1899 < _1903) || ((_1898 < _1903) || (_1898 > _1905))))))
        {
            frontier_phi_17_39_ladder = 0.0;
            frontier_phi_17_39_ladder_1 = 0.0;
            frontier_phi_17_39_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2028 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1900, cbModelParam._m0[9u].z, fma(_1899, cbModelParam._m0[9u].y, _1898 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1900, cbModelParam._m0[10u].z, fma(_1899, cbModelParam._m0[10u].y, _1898 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1900, cbModelParam._m0[11u].z, fma(_1899, cbModelParam._m0[11u].y, _1898 * cbModelParam._m0[11u].x))), _1311);
            frontier_phi_17_39_ladder = _2028.z * cbModelParam._m0[1u].y;
            frontier_phi_17_39_ladder_1 = _2028.y * cbModelParam._m0[1u].y;
            frontier_phi_17_39_ladder_2 = _2028.x * cbModelParam._m0[1u].y;
        }
        _1393 = frontier_phi_17_39_ladder_2;
        _1395 = frontier_phi_17_39_ladder_1;
        _1397 = frontier_phi_17_39_ladder;
    }
    else
    {
        vec4 _1381 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_495, _496, _497), _1311);
        _1393 = _1381.x * cbModelParam._m0[1u].y;
        _1395 = _1381.y * cbModelParam._m0[1u].y;
        _1397 = _1381.z * cbModelParam._m0[1u].y;
    }
    float _1401 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _305);
    float _1402 = isnan(_1401) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1401 : min(cbModelParam._m0[25u].w, _1401));
    float _1495;
    float _1497;
    float _1499;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1459 = fma(_559, cbModelParam._m0[21u].z, fma(_555, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _551)) + cbModelParam._m0[21u].w;
        float _1463 = fma(_559, cbModelParam._m0[22u].z, fma(_555, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _551)) + cbModelParam._m0[22u].w;
        float _1467 = fma(_559, cbModelParam._m0[23u].z, fma(_555, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _551)) + cbModelParam._m0[23u].w;
        float _1470 = fma(_497, cbModelParam._m0[21u].z, fma(_496, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _495));
        float _1473 = fma(_497, cbModelParam._m0[22u].z, fma(_496, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _495));
        float _1476 = fma(_497, cbModelParam._m0[23u].z, fma(_496, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _495));
        float _1639;
        if (_1470 > 0.0)
        {
            _1639 = abs((1.0 - _1459) / _1470);
        }
        else
        {
            float frontier_phi_29_25_ladder;
            if (_1470 < 0.0)
            {
                frontier_phi_29_25_ladder = abs((_1459 + 1.0) / _1470);
            }
            else
            {
                frontier_phi_29_25_ladder = 5000.0;
            }
            _1639 = frontier_phi_29_25_ladder;
        }
        float _1918;
        if (_1473 > 0.0)
        {
            _1918 = abs((1.0 - _1463) / _1473);
        }
        else
        {
            float frontier_phi_41_36_ladder;
            if (_1473 < 0.0)
            {
                frontier_phi_41_36_ladder = abs((_1463 + 1.0) / _1473);
            }
            else
            {
                frontier_phi_41_36_ladder = 5000.0;
            }
            _1918 = frontier_phi_41_36_ladder;
        }
        float _2131;
        if (_1476 > 0.0)
        {
            _2131 = abs((1.0 - _1467) / _1476);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1476 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1467 + 1.0) / _1476);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2131 = frontier_phi_50_47_ladder;
        }
        float _2133 = isnan(_1918) ? _1639 : (isnan(_1639) ? _1918 : min(_1639, _1918));
        float _2134 = isnan(_2131) ? _2133 : (isnan(_2133) ? _2131 : min(_2133, _2131));
        float _2138 = (_2134 * _1470) + _1459;
        float _2139 = (_2134 * _1473) + _1463;
        float _2140 = (_2134 * _1476) + _1467;
        float _2141 = _2134 * 9.9999997473787516355514526367188e-05;
        float _2142 = (-1.0) - _2141;
        float _2144 = _2141 + 1.0;
        float frontier_phi_26_50_ladder;
        float frontier_phi_26_50_ladder_1;
        float frontier_phi_26_50_ladder_2;
        if ((_2140 > _2144) || ((_2140 < _2142) || ((_2139 > _2144) || ((_2139 < _2142) || ((_2138 < _2142) || (_2138 > _2144))))))
        {
            frontier_phi_26_50_ladder = 0.0;
            frontier_phi_26_50_ladder_1 = 0.0;
            frontier_phi_26_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2340 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2140, cbModelParam._m0[17u].z, fma(_2139, cbModelParam._m0[17u].y, _2138 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2140, cbModelParam._m0[18u].z, fma(_2139, cbModelParam._m0[18u].y, _2138 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2140, cbModelParam._m0[19u].z, fma(_2139, cbModelParam._m0[19u].y, _2138 * cbModelParam._m0[19u].x))), _1402);
            frontier_phi_26_50_ladder = _2340.z * cbModelParam._m0[1u].z;
            frontier_phi_26_50_ladder_1 = _2340.y * cbModelParam._m0[1u].z;
            frontier_phi_26_50_ladder_2 = _2340.x * cbModelParam._m0[1u].z;
        }
        _1495 = frontier_phi_26_50_ladder_2;
        _1497 = frontier_phi_26_50_ladder_1;
        _1499 = frontier_phi_26_50_ladder;
    }
    else
    {
        vec4 _1479 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_495, _496, _497), _1402);
        _1495 = _1479.x * cbModelParam._m0[1u].z;
        _1497 = _1479.y * cbModelParam._m0[1u].z;
        _1499 = _1479.z * cbModelParam._m0[1u].z;
    }
    float _1512 = (((_522 * _472) + _523) * _487) * ((cbModelParam._m0[1u].w * (_1495 - _1393)) + _1393);
    float _1514 = (((_522 * _474) + _523) * _487) * ((cbModelParam._m0[1u].w * (_1497 - _1395)) + _1395);
    float _1516 = (((_522 * _475) + _523) * _487) * ((cbModelParam._m0[1u].w * (_1499 - _1397)) + _1397);
    float _1519 = fma(_1516, cbSceneParam._m0[89u].z, fma(_1514, cbSceneParam._m0[89u].y, _1512 * cbSceneParam._m0[89u].x));
    float _1522 = fma(_1516, cbSceneParam._m0[90u].z, fma(_1514, cbSceneParam._m0[90u].y, _1512 * cbSceneParam._m0[90u].x));
    float _1525 = fma(_1516, cbSceneParam._m0[91u].z, fma(_1514, cbSceneParam._m0[91u].y, _1512 * cbSceneParam._m0[91u].x));
    vec4 _1533 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_405, _406));
    float _1535 = _1533.w;
    float _1547 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1535);
    float _1548 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1535);
    float _1549 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1535);
    uvec4 _1553 = floatBitsToUint(cbInstanceData._m0[_446 + 5u]);
    uint _1555 = _1553.x * 14u;
    uint _1556 = _1555 + 13u;
    float _1563 = _487 + (-1.0);
    float _1568 = (cbLight._m0[_1556].x * _1563) + 1.0;
    float _1569 = (cbLight._m0[_1556].y * _1563) + 1.0;
    float _1570 = (cbLight._m0[_1556].z * _1563) + 1.0;
    float _1571 = (cbLight._m0[_1556].w * _1563) + 1.0;
    uint _1572 = _1555 + 5u;
    float _1578 = isnan(1.0) ? _1569 : (isnan(_1569) ? 1.0 : min(_1569, 1.0));
    uint _1582 = _1555 + 4u;
    float _1592 = isnan(1.0) ? _1568 : (isnan(_1568) ? 1.0 : min(_1568, 1.0));
    uint _1596 = _1555 | 1u;
    float _1607 = dot(vec3(cbLight._m0[_1555].xyz), vec3(_301, _302, _303));
    float _1610 = dot(vec3(cbLight._m0[_1596].xyz), vec3(_301, _302, _303));
    float _3778 = isnan(0.0) ? _1607 : (isnan(_1607) ? 0.0 : max(_1607, 0.0));
    float _3789 = isnan(0.0) ? _1610 : (isnan(_1610) ? 0.0 : max(_1610, 0.0));
    float _1615 = (isnan(1.0) ? _3778 : (isnan(_3778) ? 1.0 : min(_3778, 1.0))) * 0.3183098733425140380859375;
    float _1617 = (isnan(1.0) ? _3789 : (isnan(_3789) ? 1.0 : min(_3789, 1.0))) * 0.3183098733425140380859375;
    float _1624 = ((cbLight._m0[_1572].x * _1578) * _1617) + (((cbLight._m0[_1582].x * _1547) * _1592) * _1615);
    float _1625 = ((_1578 * cbLight._m0[_1572].y) * _1617) + (((cbLight._m0[_1582].y * _1548) * _1592) * _1615);
    float _1626 = ((_1578 * cbLight._m0[_1572].z) * _1617) + (((cbLight._m0[_1582].z * _1549) * _1592) * _1615);
    uvec4 _1631 = floatBitsToUint(cbLight._m0[_1555 + 12u]);
    bool _1633 = _1631.x == 0u;
    float _1644;
    float _1646;
    float _1648;
    if (_1633)
    {
        _1644 = _1624;
        _1646 = _1625;
        _1648 = _1626;
    }
    else
    {
        uint _1652 = _1555 + 6u;
        float _1668 = (dot(vec3(cbLight._m0[_1555 + 2u].xyz), vec3(_301, _302, _303)) * 0.5) + 0.5;
        float _1669 = _1668 * _1668;
        float _3800 = isnan(0.0) ? _1669 : (isnan(_1669) ? 0.0 : max(_1669, 0.0));
        float _1670 = isnan(1.0) ? _3800 : (isnan(_3800) ? 1.0 : min(_3800, 1.0));
        float _1671 = isnan(1.0) ? _1570 : (isnan(_1570) ? 1.0 : min(_1570, 1.0));
        _1644 = (((cbLight._m0[_1652].x * 0.3183098733425140380859375) * _1670) * _1671) + _1624;
        _1646 = (((cbLight._m0[_1652].y * 0.3183098733425140380859375) * _1670) * _1671) + _1625;
        _1648 = (((cbLight._m0[_1652].z * 0.3183098733425140380859375) * _1670) * _1671) + _1626;
    }
    bool _1651 = _1631.y == 0u;
    float _1689;
    float _1691;
    float _1693;
    if (_1651)
    {
        _1689 = _1644;
        _1691 = _1646;
        _1693 = _1648;
    }
    else
    {
        uint _1862 = _1555 + 7u;
        float _1878 = (dot(vec3(cbLight._m0[_1555 + 3u].xyz), vec3(_301, _302, _303)) * 0.5) + 0.5;
        float _1879 = _1878 * _1878;
        float _3816 = isnan(0.0) ? _1879 : (isnan(_1879) ? 0.0 : max(_1879, 0.0));
        float _1880 = isnan(1.0) ? _3816 : (isnan(_3816) ? 1.0 : min(_3816, 1.0));
        float _1881 = isnan(1.0) ? _1571 : (isnan(_1571) ? 1.0 : min(_1571, 1.0));
        _1689 = (((cbLight._m0[_1862].x * 0.3183098733425140380859375) * _1880) * _1881) + _1644;
        _1691 = (((cbLight._m0[_1862].y * 0.3183098733425140380859375) * _1880) * _1881) + _1646;
        _1693 = (((cbLight._m0[_1862].z * 0.3183098733425140380859375) * _1880) * _1881) + _1648;
    }
    uint _1696 = _1555 + 8u;
    float _1709 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1555].w)) * _305) * 0.949999988079071044921875);
    float _1710 = _1709 * _1709;
    float _1711 = cbLight._m0[_1555].x + _393;
    float _1712 = cbLight._m0[_1555].y + _394;
    float _1713 = cbLight._m0[_1555].z + _395;
    float _1717 = inversesqrt(dot(vec3(_1711, _1712, _1713), vec3(_1711, _1712, _1713)));
    float _1718 = _1717 * _1711;
    float _1719 = _1717 * _1712;
    float _1720 = _1717 * _1713;
    float _1721 = dot(vec3(_301, _302, _303), vec3(cbLight._m0[_1555].xyz));
    float _3832 = isnan(0.0) ? _1721 : (isnan(_1721) ? 0.0 : max(_1721, 0.0));
    float _1724 = isnan(1.0) ? _3832 : (isnan(_3832) ? 1.0 : min(_3832, 1.0));
    float _3843 = isnan(0.0) ? _488 : (isnan(_488) ? 0.0 : max(_488, 0.0));
    float _1725 = isnan(1.0) ? _3843 : (isnan(_3843) ? 1.0 : min(_3843, 1.0));
    float _1726 = dot(vec3(_301, _302, _303), vec3(_1718, _1719, _1720));
    float _3854 = isnan(0.0) ? _1726 : (isnan(_1726) ? 0.0 : max(_1726, 0.0));
    float _1729 = isnan(1.0) ? _3854 : (isnan(_3854) ? 1.0 : min(_3854, 1.0));
    float _1730 = dot(vec3(cbLight._m0[_1555].xyz), vec3(_1718, _1719, _1720));
    float _3865 = isnan(0.0) ? _1730 : (isnan(_1730) ? 0.0 : max(_1730, 0.0));
    float _1734 = _1710 * _1710;
    float _1738 = ((_1729 * _1729) * (_1734 + (-1.0))) + 1.0;
    float _1746 = exp2(log2(1.0 - (isnan(1.0) ? _3865 : (isnan(_3865) ? 1.0 : min(_3865, 1.0)))) * 5.0);
    float _1747 = 0.959999978542327880859375 - _469;
    float _1749 = 0.959999978542327880859375 - _470;
    float _1750 = 0.959999978542327880859375 - _471;
    float _1757 = 1.0 - _1710;
    float _1768 = (0.5 / (((_1725 * ((_1724 * _1757) + _1710)) + 9.9999999392252902907785028219223e-09) + (((_1725 * _1757) + _1710) * _1724))) * _1724;
    float _3876 = isnan(0.0) ? _1768 : (isnan(_1768) ? 0.0 : max(_1768, 0.0));
    float _1770 = (isnan(1.0) ? _3876 : (isnan(_3876) ? 1.0 : min(_3876, 1.0))) * (_1734 / ((_1738 * _1738) * 3.141590118408203125));
    uint _1784 = _1555 + 9u;
    float _1795 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1596].w)) * _305) * 0.949999988079071044921875);
    float _1796 = _1795 * _1795;
    float _1797 = cbLight._m0[_1596].x + _393;
    float _1798 = cbLight._m0[_1596].y + _394;
    float _1799 = cbLight._m0[_1596].z + _395;
    float _1803 = inversesqrt(dot(vec3(_1797, _1798, _1799), vec3(_1797, _1798, _1799)));
    float _1804 = _1803 * _1797;
    float _1805 = _1803 * _1798;
    float _1806 = _1803 * _1799;
    float _1807 = dot(vec3(_301, _302, _303), vec3(cbLight._m0[_1596].xyz));
    float _3887 = isnan(0.0) ? _1807 : (isnan(_1807) ? 0.0 : max(_1807, 0.0));
    float _1810 = isnan(1.0) ? _3887 : (isnan(_3887) ? 1.0 : min(_3887, 1.0));
    float _1811 = dot(vec3(_301, _302, _303), vec3(_1804, _1805, _1806));
    float _3898 = isnan(0.0) ? _1811 : (isnan(_1811) ? 0.0 : max(_1811, 0.0));
    float _1814 = isnan(1.0) ? _3898 : (isnan(_3898) ? 1.0 : min(_3898, 1.0));
    float _1815 = dot(vec3(cbLight._m0[_1596].xyz), vec3(_1804, _1805, _1806));
    float _3909 = isnan(0.0) ? _1815 : (isnan(_1815) ? 0.0 : max(_1815, 0.0));
    float _1819 = _1796 * _1796;
    float _1823 = ((_1814 * _1814) * (_1819 + (-1.0))) + 1.0;
    float _1830 = exp2(log2(1.0 - (isnan(1.0) ? _3909 : (isnan(_3909) ? 1.0 : min(_3909, 1.0)))) * 5.0);
    float _1837 = 1.0 - _1796;
    float _1847 = (0.5 / (((_1725 * ((_1810 * _1837) + _1796)) + 9.9999999392252902907785028219223e-09) + (((_1725 * _1837) + _1796) * _1810))) * _1810;
    float _3920 = isnan(0.0) ? _1847 : (isnan(_1847) ? 0.0 : max(_1847, 0.0));
    float _1849 = (isnan(1.0) ? _3920 : (isnan(_3920) ? 1.0 : min(_3920, 1.0))) * (_1819 / ((_1823 * _1823) * 3.141590118408203125));
    float _1859 = (((((_1830 * _1747) + _472) * cbLight._m0[_1784].x) * _1849) * _1578) + ((((cbLight._m0[_1696].x * _1547) * ((_1746 * _1747) + _472)) * _1770) * _1592);
    float _1860 = (((((_1830 * _1749) + _474) * cbLight._m0[_1784].y) * _1849) * _1578) + ((((cbLight._m0[_1696].y * _1548) * ((_1746 * _1749) + _474)) * _1770) * _1592);
    float _1861 = (((((_1830 * _1750) + _475) * cbLight._m0[_1784].z) * _1849) * _1578) + ((((cbLight._m0[_1696].z * _1549) * ((_1746 * _1750) + _475)) * _1770) * _1592);
    float _1923;
    float _1925;
    float _1927;
    if (_1633)
    {
        _1923 = _1859;
        _1925 = _1860;
        _1927 = _1861;
    }
    else
    {
        uint _1929 = _1555 + 2u;
        uint _1933 = _1555 + 10u;
        float _1947 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1929].w)) * _305) * 0.949999988079071044921875);
        float _1948 = _1947 * _1947;
        float _1949 = cbLight._m0[_1929].x + _393;
        float _1950 = cbLight._m0[_1929].y + _394;
        float _1951 = cbLight._m0[_1929].z + _395;
        float _1955 = inversesqrt(dot(vec3(_1949, _1950, _1951), vec3(_1949, _1950, _1951)));
        float _1956 = _1955 * _1949;
        float _1957 = _1955 * _1950;
        float _1958 = _1955 * _1951;
        float _1959 = dot(vec3(_301, _302, _303), vec3(cbLight._m0[_1929].xyz));
        float _3931 = isnan(0.0) ? _1959 : (isnan(_1959) ? 0.0 : max(_1959, 0.0));
        float _1962 = isnan(1.0) ? _3931 : (isnan(_3931) ? 1.0 : min(_3931, 1.0));
        float _1963 = dot(vec3(_301, _302, _303), vec3(_1956, _1957, _1958));
        float _3942 = isnan(0.0) ? _1963 : (isnan(_1963) ? 0.0 : max(_1963, 0.0));
        float _1966 = isnan(1.0) ? _3942 : (isnan(_3942) ? 1.0 : min(_3942, 1.0));
        float _1967 = dot(vec3(cbLight._m0[_1929].xyz), vec3(_1956, _1957, _1958));
        float _3953 = isnan(0.0) ? _1967 : (isnan(_1967) ? 0.0 : max(_1967, 0.0));
        float _1971 = _1948 * _1948;
        float _1975 = ((_1966 * _1966) * (_1971 + (-1.0))) + 1.0;
        float _1982 = exp2(log2(1.0 - (isnan(1.0) ? _3953 : (isnan(_3953) ? 1.0 : min(_3953, 1.0)))) * 5.0);
        float _1989 = 1.0 - _1948;
        float _1999 = (0.5 / (((_1725 * ((_1962 * _1989) + _1948)) + 9.9999999392252902907785028219223e-09) + (((_1725 * _1989) + _1948) * _1962))) * _1962;
        float _3964 = isnan(0.0) ? _1999 : (isnan(_1999) ? 0.0 : max(_1999, 0.0));
        float _2001 = (isnan(1.0) ? _3964 : (isnan(_3964) ? 1.0 : min(_3964, 1.0))) * (_1971 / ((_1975 * _1975) * 3.141590118408203125));
        float _2002 = isnan(1.0) ? _1570 : (isnan(_1570) ? 1.0 : min(_1570, 1.0));
        _1923 = (((((_1982 * _1747) + _472) * cbLight._m0[_1933].x) * _2001) * _2002) + _1859;
        _1925 = (((((_1982 * _1749) + _474) * cbLight._m0[_1933].y) * _2001) * _2002) + _1860;
        _1927 = (((((_1982 * _1750) + _475) * cbLight._m0[_1933].z) * _2001) * _2002) + _1861;
    }
    float _2037;
    float _2039;
    float _2041;
    if (_1651)
    {
        _2037 = _1923;
        _2039 = _1925;
        _2041 = _1927;
    }
    else
    {
        uint _2048 = _1555 + 3u;
        uint _2052 = _1555 + 11u;
        float _2066 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2048].w)) * _305) * 0.949999988079071044921875);
        float _2067 = _2066 * _2066;
        float _2068 = cbLight._m0[_2048].x + _393;
        float _2069 = cbLight._m0[_2048].y + _394;
        float _2070 = cbLight._m0[_2048].z + _395;
        float _2074 = inversesqrt(dot(vec3(_2068, _2069, _2070), vec3(_2068, _2069, _2070)));
        float _2075 = _2074 * _2068;
        float _2076 = _2074 * _2069;
        float _2077 = _2074 * _2070;
        float _2078 = dot(vec3(_301, _302, _303), vec3(cbLight._m0[_2048].xyz));
        float _3980 = isnan(0.0) ? _2078 : (isnan(_2078) ? 0.0 : max(_2078, 0.0));
        float _2081 = isnan(1.0) ? _3980 : (isnan(_3980) ? 1.0 : min(_3980, 1.0));
        float _2082 = dot(vec3(_301, _302, _303), vec3(_2075, _2076, _2077));
        float _3991 = isnan(0.0) ? _2082 : (isnan(_2082) ? 0.0 : max(_2082, 0.0));
        float _2085 = isnan(1.0) ? _3991 : (isnan(_3991) ? 1.0 : min(_3991, 1.0));
        float _2086 = dot(vec3(cbLight._m0[_2048].xyz), vec3(_2075, _2076, _2077));
        float _4002 = isnan(0.0) ? _2086 : (isnan(_2086) ? 0.0 : max(_2086, 0.0));
        float _2090 = _2067 * _2067;
        float _2094 = ((_2085 * _2085) * (_2090 + (-1.0))) + 1.0;
        float _2101 = exp2(log2(1.0 - (isnan(1.0) ? _4002 : (isnan(_4002) ? 1.0 : min(_4002, 1.0)))) * 5.0);
        float _2108 = 1.0 - _2067;
        float _2118 = (0.5 / (((_1725 * ((_2081 * _2108) + _2067)) + 9.9999999392252902907785028219223e-09) + (((_1725 * _2108) + _2067) * _2081))) * _2081;
        float _4013 = isnan(0.0) ? _2118 : (isnan(_2118) ? 0.0 : max(_2118, 0.0));
        float _2120 = (isnan(1.0) ? _4013 : (isnan(_4013) ? 1.0 : min(_4013, 1.0))) * (_2090 / ((_2094 * _2094) * 3.141590118408203125));
        float _2121 = isnan(1.0) ? _1571 : (isnan(_1571) ? 1.0 : min(_1571, 1.0));
        _2037 = (((((_2101 * _1747) + _472) * cbLight._m0[_2052].x) * _2120) * _2121) + _1923;
        _2039 = (((((_2101 * _1749) + _474) * cbLight._m0[_2052].y) * _2120) * _2121) + _1925;
        _2041 = (((((_2101 * _1750) + _475) * cbLight._m0[_2052].z) * _2120) * _2121) + _1927;
    }
    float _2255;
    float _2257;
    float _2259;
    float _2261;
    float _2263;
    float _2265;
    if (_1553.y == 0u)
    {
        float _2196 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2197 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2196;
        float _2198 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2196;
        float _2199 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2196;
        uvec4 _2211 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2212 = _2211.x;
        uint _2223 = uint((float(_2211.y) * floor(float(uint(cbSceneParam._m0[85u].y * _406) / _2212))) + floor(float(uint(cbSceneParam._m0[85u].x * _405) / _2212)));
        float _2233 = (log2(_2199 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2234 = isnan(0.0) ? _2233 : (isnan(_2233) ? 0.0 : max(_2233, 0.0));
        uint _2237 = uint(isnan(14.0) ? _2234 : (isnan(_2234) ? 14.0 : min(_2234, 14.0)));
        uvec4 _2242 = texelFetch(g_lightClusterGridBuffer, int(((_2237 << 2u) + (_2223 << 6u)) >> 2u));
        uint _2243 = _2242.x;
        uint _2244 = _2211.z;
        float _2345;
        float _2347;
        float _2349;
        float _2351;
        float _2353;
        float _2355;
        if (((((1u << ((_2244 >> 4u) & 15u)) + 4294967295u) & _2243) == 0u) || ((_2244 & 240u) == 0u))
        {
            _2345 = 0.0;
            _2347 = 0.0;
            _2349 = 0.0;
            _2351 = 0.0;
            _2353 = 0.0;
            _2355 = 0.0;
        }
        else
        {
            float _2346;
            float _2348;
            float _2350;
            float _2352;
            float _2354;
            float _2356;
            float _2497 = 0.0;
            float _2498 = 0.0;
            float _2499 = 0.0;
            float _2500 = 0.0;
            float _2501 = 0.0;
            float _2502 = 0.0;
            uint _2503 = 0u;
            uint _2512;
            bool _2513;
            for (;;)
            {
                _2512 = texelFetch(g_lightClassification, int((((_2237 << 5u) + (_2223 << 9u)) + (_2503 << 2u)) >> 2u)).x;
                _2513 = _2512 == 0u;
                float frontier_phi_67_pred;
                float frontier_phi_67_pred_1;
                float frontier_phi_67_pred_2;
                float frontier_phi_67_pred_3;
                float frontier_phi_67_pred_4;
                float frontier_phi_67_pred_5;
                if (_2513)
                {
                    frontier_phi_67_pred = _2499;
                    frontier_phi_67_pred_1 = _2502;
                    frontier_phi_67_pred_2 = _2501;
                    frontier_phi_67_pred_3 = _2500;
                    frontier_phi_67_pred_4 = _2498;
                    frontier_phi_67_pred_5 = _2497;
                }
                else
                {
                    float _2642;
                    float _2643;
                    float _2644;
                    float _2645;
                    float _2646;
                    float _2647;
                    uint _2648;
                    _2642 = _2497;
                    _2643 = _2498;
                    _2644 = _2499;
                    _2645 = _2500;
                    _2646 = _2501;
                    _2647 = _2502;
                    _2648 = _2512;
                    float _2569;
                    float _2570;
                    float _2571;
                    float _2572;
                    float _2573;
                    float _2574;
                    for (;;)
                    {
                        uint _2652 = uint(findLSB(_2648)) + (_2503 << 5u);
                        uint _2649 = (_2648 + 4294967295u) & _2648;
                        uint _2654 = _2652 * 48u;
                        vec4 _2668 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2654)).x, texelFetch(g_PointLightRenderingBuffer, int(_2654 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2654 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2654 + 3u)).x));
                        uint _2674 = (_2652 * 48u) + 4u;
                        vec4 _2687 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2674)).x, texelFetch(g_PointLightRenderingBuffer, int(_2674 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2674 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2674 + 3u)).x));
                        uint _2693 = (_2652 * 48u) + 8u;
                        vec3 _2704 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2693)).x, texelFetch(g_PointLightRenderingBuffer, int(_2693 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2693 + 2u)).x));
                        float _2708 = _2668.x - _2197;
                        float _2709 = _2668.y - _2198;
                        float _2710 = _2668.z - _2199;
                        float _2711 = dot(vec3(_2708, _2709, _2710), vec3(_2708, _2709, _2710));
                        float _2714 = inversesqrt(_2711);
                        float _2715 = _2714 * _2708;
                        float _2716 = _2714 * _2709;
                        float _2717 = _2714 * _2710;
                        float _2718 = dot(vec3(_427, _430, _433), vec3(_2715, _2716, _2717));
                        float _2723 = 1.0 - (_2711 * _2668.w);
                        float _4039 = isnan(0.0) ? _2723 : (isnan(_2723) ? 0.0 : max(_2723, 0.0));
                        float _2724 = isnan(1.0) ? _4039 : (isnan(_4039) ? 1.0 : min(_4039, 1.0));
                        float _2725 = sqrt(_2711) * _2687.w;
                        float _2728 = 1.39999997615814208984375 / (_2725 + 1.39999997615814208984375);
                        float _2729 = _2728 * _2728;
                        float _2732 = ((1.0 - _2729) * _2718) + _2729;
                        float _2735 = _2725 * _2725;
                        float _2739 = ((isnan(0.0) ? _2732 : (isnan(_2732) ? 0.0 : max(_2732, 0.0))) * _2724) / ((_2735 * 0.699999988079071044921875) + 1.0);
                        float _2743 = (-0.0) - _2197;
                        float _2744 = (-0.0) - _2198;
                        float _2745 = (-0.0) - _2199;
                        float _2749 = inversesqrt(dot(vec3(_2743, _2744, _2745), vec3(_2743, _2744, _2745)));
                        float _2750 = _2749 * _2743;
                        float _2751 = _2749 * _2744;
                        float _2752 = _2749 * _2745;
                        float _2760 = exp2(log2(1.0 / ((_2735 * 3.5) + 5.0)) * 0.25);
                        float _2761 = 1.0 - _503;
                        float _2768 = sqrt(1.0 - ((1.0 - (_2761 * _2761)) * (1.0 - (_2760 * _2760))));
                        float _2769 = _2768 * _2768;
                        float _2770 = _2769 * _2769;
                        float _2771 = _2750 + _2715;
                        float _2772 = _2751 + _2716;
                        float _2773 = _2752 + _2717;
                        float _2777 = inversesqrt(dot(vec3(_2771, _2772, _2773), vec3(_2771, _2772, _2773)));
                        float _2781 = dot(vec3(_427, _430, _433), vec3(_2750, _2751, _2752));
                        float _4055 = isnan(0.0) ? _2781 : (isnan(_2781) ? 0.0 : max(_2781, 0.0));
                        float _2784 = isnan(1.0) ? _4055 : (isnan(_4055) ? 1.0 : min(_4055, 1.0));
                        float _2785 = dot(vec3(_427, _430, _433), vec3(_2777 * _2771, _2777 * _2772, _2777 * _2773));
                        float _4066 = isnan(0.0) ? _2785 : (isnan(_2785) ? 0.0 : max(_2785, 0.0));
                        float _2788 = isnan(1.0) ? _4066 : (isnan(_4066) ? 1.0 : min(_4066, 1.0));
                        float _2792 = ((_2788 * _2788) * (_2770 + (-1.0))) + 1.0;
                        float _2793 = _2728 * _2769;
                        float _2794 = _2793 * _2793;
                        float _2797 = ((1.0 - _2794) * _2718) + _2794;
                        float _4077 = isnan(0.0) ? _2797 : (isnan(_2797) ? 0.0 : max(_2797, 0.0));
                        float _2798 = isnan(1.0) ? _4077 : (isnan(_4077) ? 1.0 : min(_4077, 1.0));
                        float _2799 = 1.0 - _2769;
                        float _2809 = (0.5 / (((_2798 * ((_2784 * _2799) + _2769)) + 9.9999999392252902907785028219223e-09) + (((_2798 * _2799) + _2769) * _2784))) * _2798;
                        float _4088 = isnan(0.0) ? _2809 : (isnan(_2809) ? 0.0 : max(_2809, 0.0));
                        float _2820 = (((_2770 * 3.1415927410125732421875) * (isnan(1.0) ? _4088 : (isnan(_4088) ? 1.0 : min(_4088, 1.0)))) / ((_2792 * _2792) * ((_2735 * 2.1991131305694580078125) + 3.141590118408203125))) * _2724;
                        _2572 = (_2739 * _2687.x) + _2645;
                        _2573 = (_2739 * _2687.y) + _2646;
                        _2574 = (_2739 * _2687.z) + _2647;
                        _2569 = (_2820 * _2704.x) + _2642;
                        _2570 = (_2820 * _2704.y) + _2643;
                        _2571 = (_2820 * _2704.z) + _2644;
                        if (_2649 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2642 = _2569;
                            _2643 = _2570;
                            _2644 = _2571;
                            _2645 = _2572;
                            _2646 = _2573;
                            _2647 = _2574;
                            _2648 = _2649;
                        }
                    }
                    frontier_phi_67_pred = _2571;
                    frontier_phi_67_pred_1 = _2574;
                    frontier_phi_67_pred_2 = _2573;
                    frontier_phi_67_pred_3 = _2572;
                    frontier_phi_67_pred_4 = _2570;
                    frontier_phi_67_pred_5 = _2569;
                }
                _2350 = frontier_phi_67_pred;
                _2356 = frontier_phi_67_pred_1;
                _2354 = frontier_phi_67_pred_2;
                _2352 = frontier_phi_67_pred_3;
                _2348 = frontier_phi_67_pred_4;
                _2346 = frontier_phi_67_pred_5;
                uint _2504 = _2503 + 1u;
                if (_2504 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2497 = _2346;
                    _2498 = _2348;
                    _2499 = _2350;
                    _2500 = _2352;
                    _2501 = _2354;
                    _2502 = _2356;
                    _2503 = _2504;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2345 = _2346;
            _2347 = _2348;
            _2349 = _2350;
            _2351 = _2352;
            _2353 = _2354;
            _2355 = _2356;
        }
        uvec4 _2359 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2360 = _2359.z;
        uint _2362 = (_2360 >> 8u) & 15u;
        float _2465;
        float _2467;
        float _2469;
        float _2471;
        float _2473;
        float _2475;
        if (((4294967295u << _2362) & _2243) == 0u)
        {
            _2465 = _2345;
            _2467 = _2347;
            _2469 = _2349;
            _2471 = _2351;
            _2473 = _2353;
            _2475 = _2355;
        }
        else
        {
            float _2490 = inversesqrt(dot(vec3(_2197, _2198, _2199), vec3(_2197, _2198, _2199)));
            float _2491 = _2490 * _2197;
            float _2492 = _2490 * _2198;
            float _2493 = _2490 * _2199;
            float frontier_phi_59_60_ladder;
            float frontier_phi_59_60_ladder_1;
            float frontier_phi_59_60_ladder_2;
            float frontier_phi_59_60_ladder_3;
            float frontier_phi_59_60_ladder_4;
            float frontier_phi_59_60_ladder_5;
            if (_2362 < ((_2360 >> 12u) & 15u))
            {
                float _2466;
                float _2468;
                float _2470;
                float _2472;
                float _2474;
                float _2476;
                float _2625 = _2345;
                float _2626 = _2347;
                float _2627 = _2349;
                float _2628 = _2351;
                float _2629 = _2353;
                float _2630 = _2355;
                uint _2631 = _2362;
                uint _2640;
                bool _2641;
                for (;;)
                {
                    _2640 = texelFetch(g_lightClassification, int((((_2237 << 5u) + (_2223 << 9u)) + (_2631 << 2u)) >> 2u)).x;
                    _2641 = _2640 == 0u;
                    float frontier_phi_78_pred;
                    float frontier_phi_78_pred_1;
                    float frontier_phi_78_pred_2;
                    float frontier_phi_78_pred_3;
                    float frontier_phi_78_pred_4;
                    float frontier_phi_78_pred_5;
                    if (_2641)
                    {
                        frontier_phi_78_pred = _2630;
                        frontier_phi_78_pred_1 = _2629;
                        frontier_phi_78_pred_2 = _2628;
                        frontier_phi_78_pred_3 = _2627;
                        frontier_phi_78_pred_4 = _2626;
                        frontier_phi_78_pred_5 = _2625;
                    }
                    else
                    {
                        float _2834;
                        float _2835;
                        float _2836;
                        float _2837;
                        float _2838;
                        float _2839;
                        float _3130;
                        float _3131;
                        float _3132;
                        float _3133;
                        float _3134;
                        float _3135;
                        float _2847 = _2625;
                        float _2848 = _2626;
                        float _2849 = _2627;
                        float _2850 = _2628;
                        float _2851 = _2629;
                        float _2852 = _2630;
                        uint _2853 = _2640;
                        uint _2854;
                        vec4 _2879;
                        float _2880;
                        vec4 _2895;
                        vec3 _2907;
                        vec4 _2923;
                        vec4 _2939;
                        float _2986;
                        bool _2987;
                        for (;;)
                        {
                            uint _2864 = ((_2631 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2853));
                            _2854 = (_2853 + 4294967295u) & _2853;
                            uint _2866 = _2864 * 40u;
                            _2879 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2866)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2866 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2866 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2866 + 3u)).x));
                            _2880 = _2879.w;
                            uint _2882 = (_2864 * 40u) + 4u;
                            _2895 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2882)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2882 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2882 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2882 + 3u)).x));
                            uint _2897 = (_2864 * 40u) + 8u;
                            _2907 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2897)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2897 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2897 + 2u)).x));
                            uint _2910 = (_2864 * 40u) + 16u;
                            _2923 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2910)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2910 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2910 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2910 + 3u)).x));
                            uint _2926 = (_2864 * 40u) + 20u;
                            _2939 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2926)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2926 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2926 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2926 + 3u)).x));
                            uint _2942 = (_2864 * 40u) + 24u;
                            vec4 _2955 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2942)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2942 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2942 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2942 + 3u)).x));
                            uint _2961 = (_2864 * 40u) + 28u;
                            vec4 _2974 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2961)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2961 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2961 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2961 + 3u)).x));
                            _2986 = fma(_2199, _2974.z, fma(_2198, _2974.y, _2974.x * _2197)) + _2974.w;
                            _2987 = !((fma(_2199, _2955.z, fma(_2198, _2955.y, _2955.x * _2197)) + _2955.w) <= 0.0);
                            float frontier_phi_84_pred;
                            float frontier_phi_84_pred_1;
                            float frontier_phi_84_pred_2;
                            float frontier_phi_84_pred_3;
                            float frontier_phi_84_pred_4;
                            float frontier_phi_84_pred_5;
                            if (_2987)
                            {
                                float _3014 = _2879.x - _2197;
                                float _3015 = _2879.y - _2198;
                                float _3016 = _2879.z - _2199;
                                float _3017 = dot(vec3(_3014, _3015, _3016), vec3(_3014, _3015, _3016));
                                float _3020 = inversesqrt(_3017);
                                float _3021 = _3020 * _3014;
                                float _3022 = _3020 * _3015;
                                float _3023 = _3020 * _3016;
                                float _3027 = 1.0 - (_3017 / (_2880 * _2880));
                                float _4099 = isnan(0.0) ? _3027 : (isnan(_3027) ? 0.0 : max(_3027, 0.0));
                                float _3028 = isnan(1.0) ? _4099 : (isnan(_4099) ? 1.0 : min(_4099, 1.0));
                                float _3032 = sqrt(_3017) * _2895.w;
                                float _3034 = 1.39999997615814208984375 / (_3032 + 1.39999997615814208984375);
                                float _3035 = _3034 * _3034;
                                float _3038 = ((1.0 - _3035) * dot(vec3(_3021, _3022, _3023), vec3(_427, _430, _433))) + _3035;
                                float _3041 = _3032 * _3032;
                                float _3045 = (fma(_2199, _2923.z, fma(_2198, _2923.y, _2923.x * _2197)) + _2923.w) / _2986;
                                float _3046 = (fma(_2199, _2939.z, fma(_2198, _2939.y, _2939.x * _2197)) + _2939.w) / _2986;
                                float _3050 = 1.0 - dot(vec2(_3045, _3046), vec2(_3045, _3046));
                                float _4115 = isnan(0.0) ? _3050 : (isnan(_3050) ? 0.0 : max(_3050, 0.0));
                                float _3051 = isnan(1.0) ? _4115 : (isnan(_4115) ? 1.0 : min(_4115, 1.0));
                                float _3052 = _3051 * (((isnan(0.0) ? _3038 : (isnan(_3038) ? 0.0 : max(_3038, 0.0))) * _3028) / ((_3041 * 0.699999988079071044921875) + 1.0));
                                float _3064 = exp2(log2(1.0 / ((_3041 * 3.5) + 5.0)) * 0.25);
                                float _3065 = 1.0 - _503;
                                float _3072 = sqrt(1.0 - ((1.0 - (_3065 * _3065)) * (1.0 - (_3064 * _3064))));
                                float _3073 = _3072 * _3072;
                                float _3074 = _3073 * _3073;
                                float _3075 = _3021 - _2491;
                                float _3076 = _3022 - _2492;
                                float _3077 = _3023 - _2493;
                                float _3081 = inversesqrt(dot(vec3(_3075, _3076, _3077), vec3(_3075, _3076, _3077)));
                                float _3085 = dot(vec3(_427, _430, _433), vec3((-0.0) - _2491, (-0.0) - _2492, (-0.0) - _2493));
                                float _4126 = isnan(0.0) ? _3085 : (isnan(_3085) ? 0.0 : max(_3085, 0.0));
                                float _3088 = isnan(1.0) ? _4126 : (isnan(_4126) ? 1.0 : min(_4126, 1.0));
                                float _3089 = dot(vec3(_427, _430, _433), vec3(_3081 * _3075, _3081 * _3076, _3081 * _3077));
                                float _4137 = isnan(0.0) ? _3089 : (isnan(_3089) ? 0.0 : max(_3089, 0.0));
                                float _3092 = isnan(1.0) ? _4137 : (isnan(_4137) ? 1.0 : min(_4137, 1.0));
                                float _3096 = ((_3092 * _3092) * (_3074 + (-1.0))) + 1.0;
                                float _3097 = _3034 * _3073;
                                float _3098 = _3097 * _3097;
                                float _3104 = ((1.0 - _3098) * dot(vec3(_427, _430, _433), vec3(_3021, _3022, _3023))) + _3098;
                                float _4148 = isnan(0.0) ? _3104 : (isnan(_3104) ? 0.0 : max(_3104, 0.0));
                                float _3105 = isnan(1.0) ? _4148 : (isnan(_4148) ? 1.0 : min(_4148, 1.0));
                                float _3106 = 1.0 - _3073;
                                float _3116 = (0.5 / (((_3105 * ((_3088 * _3106) + _3073)) + 9.9999999392252902907785028219223e-09) + (((_3105 * _3106) + _3073) * _3088))) * _3105;
                                float _4159 = isnan(0.0) ? _3116 : (isnan(_3116) ? 0.0 : max(_3116, 0.0));
                                float _3126 = (_3051 * _3028) * (((_3074 * 3.1415927410125732421875) * (isnan(1.0) ? _4159 : (isnan(_4159) ? 1.0 : min(_4159, 1.0)))) / ((_3096 * _3096) * ((_3041 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_84_pred = _3052 * _2895.z;
                                frontier_phi_84_pred_1 = _3052 * _2895.y;
                                frontier_phi_84_pred_2 = _3052 * _2895.x;
                                frontier_phi_84_pred_3 = _3126 * _2907.z;
                                frontier_phi_84_pred_4 = _3126 * _2907.y;
                                frontier_phi_84_pred_5 = _3126 * _2907.x;
                            }
                            else
                            {
                                frontier_phi_84_pred = 0.0;
                                frontier_phi_84_pred_1 = 0.0;
                                frontier_phi_84_pred_2 = 0.0;
                                frontier_phi_84_pred_3 = 0.0;
                                frontier_phi_84_pred_4 = 0.0;
                                frontier_phi_84_pred_5 = 0.0;
                            }
                            _3135 = frontier_phi_84_pred;
                            _3134 = frontier_phi_84_pred_1;
                            _3133 = frontier_phi_84_pred_2;
                            _3132 = frontier_phi_84_pred_3;
                            _3131 = frontier_phi_84_pred_4;
                            _3130 = frontier_phi_84_pred_5;
                            _2837 = _3133 + _2850;
                            _2838 = _3134 + _2851;
                            _2839 = _3135 + _2852;
                            _2834 = _3130 + _2847;
                            _2835 = _3131 + _2848;
                            _2836 = _3132 + _2849;
                            if (_2854 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2847 = _2834;
                                _2848 = _2835;
                                _2849 = _2836;
                                _2850 = _2837;
                                _2851 = _2838;
                                _2852 = _2839;
                                _2853 = _2854;
                                continue;
                            }
                        }
                        frontier_phi_78_pred = _2839;
                        frontier_phi_78_pred_1 = _2838;
                        frontier_phi_78_pred_2 = _2837;
                        frontier_phi_78_pred_3 = _2836;
                        frontier_phi_78_pred_4 = _2835;
                        frontier_phi_78_pred_5 = _2834;
                    }
                    _2476 = frontier_phi_78_pred;
                    _2474 = frontier_phi_78_pred_1;
                    _2472 = frontier_phi_78_pred_2;
                    _2470 = frontier_phi_78_pred_3;
                    _2468 = frontier_phi_78_pred_4;
                    _2466 = frontier_phi_78_pred_5;
                    uint _2632 = _2631 + 1u;
                    if (_2632 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2625 = _2466;
                        _2626 = _2468;
                        _2627 = _2470;
                        _2628 = _2472;
                        _2629 = _2474;
                        _2630 = _2476;
                        _2631 = _2632;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_59_60_ladder = _2472;
                frontier_phi_59_60_ladder_1 = _2476;
                frontier_phi_59_60_ladder_2 = _2474;
                frontier_phi_59_60_ladder_3 = _2470;
                frontier_phi_59_60_ladder_4 = _2468;
                frontier_phi_59_60_ladder_5 = _2466;
            }
            else
            {
                frontier_phi_59_60_ladder = _2351;
                frontier_phi_59_60_ladder_1 = _2355;
                frontier_phi_59_60_ladder_2 = _2353;
                frontier_phi_59_60_ladder_3 = _2349;
                frontier_phi_59_60_ladder_4 = _2347;
                frontier_phi_59_60_ladder_5 = _2345;
            }
            _2465 = frontier_phi_59_60_ladder_5;
            _2467 = frontier_phi_59_60_ladder_4;
            _2469 = frontier_phi_59_60_ladder_3;
            _2471 = frontier_phi_59_60_ladder;
            _2473 = frontier_phi_59_60_ladder_2;
            _2475 = frontier_phi_59_60_ladder_1;
        }
        float _2480 = isnan(1.0) ? _487 : (isnan(_487) ? 1.0 : min(_487, 1.0));
        _2255 = (_2480 * _2471) + _1689;
        _2257 = (_2480 * _2473) + _1691;
        _2259 = (_2480 * _2475) + _1693;
        _2261 = ((_2465 * _472) * _2480) + _2037;
        _2263 = ((_2467 * _474) * _2480) + _2039;
        _2265 = ((_2469 * _475) * _2480) + _2041;
    }
    else
    {
        _2255 = _1689;
        _2257 = _1691;
        _2259 = _1693;
        _2261 = _2037;
        _2263 = _2039;
        _2265 = _2041;
    }
    float _4175 = isnan(0.0) ? _462 : (isnan(_462) ? 0.0 : max(_462, 0.0));
    float _4186 = isnan(0.0) ? _463 : (isnan(_463) ? 0.0 : max(_463, 0.0));
    float _4197 = isnan(0.0) ? _464 : (isnan(_464) ? 0.0 : max(_464, 0.0));
    float _4208 = isnan(0.0) ? _304 : (isnan(_304) ? 0.0 : max(_304, 0.0));
    float _2283 = ((isnan(1.0) ? _4175 : (isnan(_4175) ? 1.0 : min(_4175, 1.0))) * (_2255 + ((isnan(0.0) ? _1221 : (isnan(_1221) ? 0.0 : max(_1221, 0.0))) * _487))) + ((_2261 + ((isnan(0.0) ? _1519 : (isnan(_1519) ? 0.0 : max(_1519, 0.0))) * _1300)) * cbPerFrame._m0[3u].x);
    float _2284 = ((isnan(1.0) ? _4186 : (isnan(_4186) ? 1.0 : min(_4186, 1.0))) * (_2257 + ((isnan(0.0) ? _1224 : (isnan(_1224) ? 0.0 : max(_1224, 0.0))) * _487))) + ((_2263 + ((isnan(0.0) ? _1522 : (isnan(_1522) ? 0.0 : max(_1522, 0.0))) * _1300)) * cbPerFrame._m0[3u].x);
    float _2285 = ((isnan(1.0) ? _4197 : (isnan(_4197) ? 1.0 : min(_4197, 1.0))) * (_2259 + ((isnan(0.0) ? _1227 : (isnan(_1227) ? 0.0 : max(_1227, 0.0))) * _487))) + ((_2265 + ((isnan(0.0) ? _1525 : (isnan(_1525) ? 0.0 : max(_1525, 0.0))) * _1300)) * cbPerFrame._m0[3u].x);
    float _2290 = cbInstanceData._m0[_446 + 6u].w * (isnan(1.0) ? _4208 : (isnan(_4208) ? 1.0 : min(_4208, 1.0)));
    float _2295 = _405 / cbSceneParam._m0[86u].x;
    float _2296 = _406 / cbSceneParam._m0[86u].y;
    vec4 _2310 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2295, _2296, (log2((isnan(cbSceneParam._m0[77u].w) ? _333 : (isnan(_333) ? cbSceneParam._m0[77u].w : min(_333, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2312 = _2310.x;
    float _2313 = _2310.y;
    float _2314 = _2310.z;
    float _2315 = _2310.w;
    float _2407;
    float _2409;
    float _2411;
    float _2413;
    if (_333 > cbSceneParam._m0[78u].w)
    {
        float _2370 = isnan(_333) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _333 : min(cbSceneParam._m0[80u].w, _333));
        float _2371 = _2370 / _333;
        float _2382 = _2371 * _386;
        float _2383 = _387 * _2371;
        float _2384 = (-0.0) - _2383;
        float _2385 = _2371 * _388;
        float _2387 = (cbSceneParam._m0[77u].w * _2384) / _2370;
        float _2388 = _2387 + cbSceneParam._m0[79u].w;
        float _2389 = cbSceneParam._m0[79u].w - _2383;
        float _2395 = sqrt(((_2382 * _2382) + (_2383 * _2383)) + (_2385 * _2385));
        float _2398 = (1.0 - (cbSceneParam._m0[77u].w / _2370)) * _2395;
        float _2403 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2405 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2582;
        if (abs((_2384 - _2387) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2582 = ((((_2388 > 0.0) ? exp2(_2403 * _2388) : (2.0 - exp2(_2405 * _2388))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2398;
        }
        else
        {
            float _2526 = 1.0 / cbSceneParam._m0[80u].x;
            float _2527 = isnan(_2389) ? _2388 : (isnan(_2388) ? _2389 : max(_2388, _2389));
            float _2528 = isnan(_2389) ? _2388 : (isnan(_2388) ? _2389 : min(_2388, _2389));
            float _2537 = isnan(0.0) ? _2527 : (isnan(_2527) ? 0.0 : min(_2527, 0.0));
            float _2538 = isnan(0.0) ? _2528 : (isnan(_2528) ? 0.0 : min(_2528, 0.0));
            _2582 = ((abs(_2395 / _2384) * cbSceneParam._m0[80u].y) * ((((_2537 - _2538) * 2.0) - ((exp2(_2403 * (isnan(0.0) ? _2527 : (isnan(_2527) ? 0.0 : max(_2527, 0.0)))) - exp2(_2403 * (isnan(0.0) ? _2528 : (isnan(_2528) ? 0.0 : max(_2528, 0.0))))) * _2526)) - ((exp2(_2405 * _2537) - exp2(_2405 * _2538)) * _2526))) + (_2398 * cbSceneParam._m0[80u].z);
        }
        vec4 _2584 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2295, _2296, 1.0), 0.0);
        float _2593 = exp2((_2582 * (-1.44269502162933349609375)) * (1.0 - _2584.w));
        float _2594 = log2(_2593);
        float _2610 = log2(_2315);
        _2407 = (exp2(_2610 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2594 * cbSceneParam._m0[78u].x)) * _2584.x) / cbSceneParam._m0[78u].x)) + _2312;
        _2409 = (exp2(_2610 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2594 * cbSceneParam._m0[78u].y)) * _2584.y) / cbSceneParam._m0[78u].y)) + _2313;
        _2411 = (exp2(_2610 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2594 * cbSceneParam._m0[78u].z)) * _2584.z) / cbSceneParam._m0[78u].z)) + _2314;
        _2413 = _2593 * _2315;
    }
    else
    {
        _2407 = _2312;
        _2409 = _2313;
        _2411 = _2314;
        _2413 = _2315;
    }
    bool _2620;
    vec4 _2423;
    vec4 _2445;
    float _2447;
    float _2451;
    float _2452;
    float _2453;
    float _2454;
    bool _2464;
    for (;;)
    {
        _2423 = cbMatDynParam._m0[0u];
        float _2425 = roundEven(_2423.y);
        bool _2426 = _2425 == 3.0;
        float _2427 = log2(_2413);
        float _2434 = exp2(_2427 * cbSceneParam._m0[78u].x) * _2283;
        float _2435 = exp2(_2427 * cbSceneParam._m0[78u].y) * _2284;
        float _2436 = exp2(_2427 * cbSceneParam._m0[78u].z) * _2285;
        float _2443 = _399 + (-0.5);
        _2445 = cbMtdParam._m0[1u];
        _2447 = _2445.y * _2443;
        float _2450 = (_2425 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2451 = _2450 * (_2426 ? _2434 : (_2434 + (cbSceneParam._m0[72u].w * _2407)));
        _2452 = _2450 * (_2426 ? _2435 : (_2435 + (cbSceneParam._m0[72u].w * _2409)));
        _2453 = _2450 * (_2426 ? _2436 : (_2436 + (cbSceneParam._m0[72u].w * _2411)));
        _2454 = _2443 * 0.999000012874603271484375;
        _2464 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2464)
        {
            if ((cbInstanceData._m0[_446 + 7u].x + _2454) < 0.5)
            {
                _2620 = true;
                break;
            }
        }
        uint _2561 = _448 + uint(_2423.w);
        if ((cbInstanceData._m0[_2561].w < 1.0) && ((cbInstanceData._m0[_2561].w + _2454) < 0.5))
        {
            _2620 = true;
            break;
        }
        if ((_2447 + _238) < _2445.x)
        {
            _2620 = true;
            break;
        }
        _2620 = false;
        break;
    }
    float _2825;
    if (_2620)
    {
        discard_state = true;
        _2825 = 0.0;
    }
    else
    {
        _2825 = _2290;
    }
    SV_Target.x = _2451;
    SV_Target.y = _2452;
    SV_Target.z = _2453;
    SV_Target.w = _2825;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2290;
    discard_exit();
}


