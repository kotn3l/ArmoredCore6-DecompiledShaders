#version 460

out float gl_CullDistance[1];

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[10];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 12, std140) uniform cbInstanceSlodDataUBO
{
    vec4 _m0[52];
} cbInstanceSlodData;

layout(set = 0, binding = 5, std140) uniform cbObjMatrixUBO
{
    vec4 _m0[6];
} cbObjMatrix;

layout(set = 0, binding = 10, std140) uniform cbInstanceIdxParamUBO
{
    vec4 _m0[1];
} cbInstanceIdxParam;

layout(set = 0, binding = 11, std140) uniform cbTexScrollUBO
{
    vec4 _m0[4];
} cbTexScroll;

layout(set = 0, binding = 26) uniform usamplerBuffer g_forceParam;
layout(set = 0, binding = 25) uniform usamplerBuffer g_InstanceIndexBuffer;

layout(location = 0) in vec3 POSITION;
layout(location = 1) in uvec4 NORMAL;
layout(location = 2) in uvec4 TANGENT;
layout(location = 3) in vec4 COLOR_1;
layout(location = 4) in ivec2 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_1;
layout(location = 1) out vec4 NORMAL_1;
layout(location = 2) out vec4 TANGENT_1;
layout(location = 3) out float TEXCOORD_2;
layout(location = 3, component = 1) out float TEXCOORD_1_1;
layout(location = 4) out vec4 TEXCOORD_3;
layout(location = 3, component = 2) out float TEXCOORD_12;

uint _700;

void main()
{
    uint _85 = uint(gl_InstanceIndex) - uint(gl_BaseInstance);
    gl_Position.x = 0.0;
    gl_Position.y = 0.0;
    gl_Position.z = 0.0;
    gl_Position.w = 0.0;
    NORMAL_1.x = 0.0;
    NORMAL_1.y = 0.0;
    NORMAL_1.z = 0.0;
    NORMAL_1.w = 0.0;
    TANGENT_1.x = 0.0;
    TANGENT_1.y = 0.0;
    TANGENT_1.z = 0.0;
    TANGENT_1.w = 0.0;
    TEXCOORD_2 = 0.0;
    TEXCOORD_1_1 = 0.0;
    TEXCOORD_3.x = 0.0;
    TEXCOORD_3.y = 0.0;
    TEXCOORD_3.z = 0.0;
    TEXCOORD_3.w = 0.0;
    TEXCOORD_12 = 0.0;
    gl_CullDistance[0u] = 0.0;
    float _172 = (float(NORMAL.x) + (-127.0)) * 0.0078740157186985015869140625;
    float _174 = (float(NORMAL.y) + (-127.0)) * 0.0078740157186985015869140625;
    float _175 = (float(NORMAL.z) + (-127.0)) * 0.0078740157186985015869140625;
    float _185 = (float(TANGENT.x) + (-127.0)) * 0.0078740157186985015869140625;
    float _186 = (float(TANGENT.y) + (-127.0)) * 0.0078740157186985015869140625;
    float _187 = (float(TANGENT.z) + (-127.0)) * 0.0078740157186985015869140625;
    uint _189 = _85 * 13u;
    uvec4 _195 = floatBitsToUint(cbInstanceData._m0[_189 + 7u]);
    uint _198 = min(_195.y, 8u);
    precise float _202 = POSITION.x + 0.0;
    precise float _203 = POSITION.y + 0.0;
    precise float _204 = POSITION.z + 0.0;
    uint _209 = floatBitsToUint(cbInstanceIdxParam._m0[0u]).x + _85;
    uvec4 _211 = texelFetch(g_InstanceIndexBuffer, int(_209));
    uint _212 = _211.x;
    uint _221 = (floatBitsToUint(cbInstanceData._m0[(_212 * 13u) + 4u]).x + uint(float(NORMAL.w))) * 3u;
    uint _228 = _221 + 1u;
    uint _235 = _221 + 2u;
    precise float _242 = _202 * cbObjMatrix._m0[_221].x;
    precise float _243 = _203 * cbObjMatrix._m0[_221].y;
    precise float _244 = _243 + _242;
    precise float _245 = _204 * cbObjMatrix._m0[_221].z;
    precise float _246 = _245 + _244;
    precise float _247 = 1.0 * cbObjMatrix._m0[_221].w;
    precise float _249 = _247 + _246;
    precise float _250 = _202 * cbObjMatrix._m0[_228].x;
    precise float _251 = _203 * cbObjMatrix._m0[_228].y;
    precise float _252 = _251 + _250;
    precise float _253 = _204 * cbObjMatrix._m0[_228].z;
    precise float _254 = _253 + _252;
    precise float _255 = 1.0 * cbObjMatrix._m0[_228].w;
    precise float _256 = _255 + _254;
    precise float _257 = _202 * cbObjMatrix._m0[_235].x;
    precise float _258 = _203 * cbObjMatrix._m0[_235].y;
    precise float _259 = _258 + _257;
    precise float _260 = _204 * cbObjMatrix._m0[_235].z;
    precise float _261 = _260 + _259;
    precise float _262 = 1.0 * cbObjMatrix._m0[_235].w;
    precise float _263 = _262 + _261;
    float _266 = fma(_175, cbObjMatrix._m0[_221].z, fma(_174, cbObjMatrix._m0[_221].y, cbObjMatrix._m0[_221].x * _172));
    float _269 = fma(_175, cbObjMatrix._m0[_228].z, fma(_174, cbObjMatrix._m0[_228].y, cbObjMatrix._m0[_228].x * _172));
    float _272 = fma(_175, cbObjMatrix._m0[_235].z, fma(_174, cbObjMatrix._m0[_235].y, cbObjMatrix._m0[_235].x * _172));
    float _278 = cbSceneParam._m0[3u].x - cbObjMatrix._m0[_221].w;
    float _279 = cbSceneParam._m0[3u].y - cbObjMatrix._m0[_228].w;
    float _280 = cbSceneParam._m0[3u].z - cbObjMatrix._m0[_235].w;
    float _284 = inversesqrt(dot(vec3(_278, _279, _280), vec3(_278, _279, _280)));
    float _285 = _278 * _284;
    float _286 = _279 * _284;
    float _287 = _280 * _284;
    uint _288 = _85 * 26u;
    uint _289 = _288 + 24u;
    uint _297 = _288 + 25u;
    float _304 = dot(vec3(cbObjMatrix._m0[_221].x, cbObjMatrix._m0[_228].x, cbObjMatrix._m0[_235].x), vec3(_285, _286, _287));
    float _310 = dot(vec3(cbObjMatrix._m0[_221].z, cbObjMatrix._m0[_228].z, cbObjMatrix._m0[_235].z), vec3(_285, _286, _287));
    float _316 = (_310 * cbObjMatrix._m0[_221].z) + (_304 * cbObjMatrix._m0[_221].x);
    float _317 = (_310 * cbObjMatrix._m0[_228].z) + (_304 * cbObjMatrix._m0[_228].x);
    float _318 = (_310 * cbObjMatrix._m0[_235].z) + (_304 * cbObjMatrix._m0[_235].x);
    float _322 = inversesqrt(dot(vec3(_316, _317, _318), vec3(_316, _317, _318)));
    float _326 = dot(vec3(_316 * _322, _317 * _322, _318 * _322), vec3(_266, _269, _272));
    bool _330 = abs(_174) > 0.999000012874603271484375;
    bool _332 = !_330;
    float _335;
    if ((_326 <= cbInstanceSlodData._m0[_289].x) && _332)
    {
        _335 = -1.0;
    }
    else
    {
        float _414 = inversesqrt(dot(vec3(cbObjMatrix._m0[_221].y, cbObjMatrix._m0[_228].y, cbObjMatrix._m0[_235].y), vec3(cbObjMatrix._m0[_221].y, cbObjMatrix._m0[_228].y, cbObjMatrix._m0[_235].y)));
        float _421 = abs(dot(vec3(_285, _286, _287), vec3(_414 * cbObjMatrix._m0[_221].y, _414 * cbObjMatrix._m0[_228].y, _414 * cbObjMatrix._m0[_235].y)));
        bool _422 = _421 > 0.707106769084930419921875;
        float _757;
        if (_330 && _422)
        {
            float _619 = cbInstanceSlodData._m0[_289].w - cbInstanceSlodData._m0[_289].z;
            float _625 = ((1.0 / (isnan(9.9999997473787516355514526367188e-05) ? _619 : (isnan(_619) ? 9.9999997473787516355514526367188e-05 : max(_619, 9.9999997473787516355514526367188e-05)))) * (_421 - cbInstanceSlodData._m0[_289].w)) + 1.0;
            float _626 = isnan(0.0) ? _625 : (isnan(_625) ? 0.0 : max(_625, 0.0));
            _757 = isnan(1.0) ? _626 : (isnan(_626) ? 1.0 : min(_626, 1.0));
        }
        else
        {
            float frontier_phi_8_6_ladder;
            if ((_421 <= cbInstanceSlodData._m0[_297].z) && (_422 && _332))
            {
                float _763 = cbInstanceSlodData._m0[_297].y - cbInstanceSlodData._m0[_297].x;
                float _768 = ((1.0 / (isnan(9.9999997473787516355514526367188e-05) ? _763 : (isnan(_763) ? 9.9999997473787516355514526367188e-05 : max(_763, 9.9999997473787516355514526367188e-05)))) * (_421 - cbInstanceSlodData._m0[_297].y)) + 1.0;
                float _769 = isnan(0.0) ? _768 : (isnan(_768) ? 0.0 : max(_768, 0.0));
                float _771 = 1.0 - (isnan(1.0) ? _769 : (isnan(_769) ? 1.0 : min(_769, 1.0)));
                float _772 = cbInstanceSlodData._m0[_289].y - cbInstanceSlodData._m0[_289].x;
                float _777 = ((1.0 / (isnan(9.9999997473787516355514526367188e-05) ? _772 : (isnan(_772) ? 9.9999997473787516355514526367188e-05 : max(_772, 9.9999997473787516355514526367188e-05)))) * (_326 - cbInstanceSlodData._m0[_289].y)) + 1.0;
                float _778 = isnan(0.0) ? _777 : (isnan(_777) ? 0.0 : max(_777, 0.0));
                float _779 = isnan(1.0) ? _778 : (isnan(_778) ? 1.0 : min(_778, 1.0));
                frontier_phi_8_6_ladder = isnan(_771) ? _779 : (isnan(_779) ? _771 : min(_779, _771));
            }
            else
            {
                float frontier_phi_8_6_ladder_10_ladder;
                if (_330 || _422)
                {
                    frontier_phi_8_6_ladder_10_ladder = -1.0;
                }
                else
                {
                    float _806 = cbInstanceSlodData._m0[_289].y - cbInstanceSlodData._m0[_289].x;
                    float _811 = ((1.0 / (isnan(9.9999997473787516355514526367188e-05) ? _806 : (isnan(_806) ? 9.9999997473787516355514526367188e-05 : max(_806, 9.9999997473787516355514526367188e-05)))) * (_326 - cbInstanceSlodData._m0[_289].y)) + 1.0;
                    float _812 = isnan(0.0) ? _811 : (isnan(_811) ? 0.0 : max(_811, 0.0));
                    frontier_phi_8_6_ladder_10_ladder = isnan(1.0) ? _812 : (isnan(_812) ? 1.0 : min(_812, 1.0));
                }
                frontier_phi_8_6_ladder = frontier_phi_8_6_ladder_10_ladder;
            }
            _757 = frontier_phi_8_6_ladder;
        }
        float _760 = isnan(-1.0) ? _757 : (isnan(_757) ? (-1.0) : max(_757, -1.0));
        _335 = (isnan(1.0) ? _760 : (isnan(_760) ? 1.0 : min(_760, 1.0))) + 0.0625;
    }
    precise float _355 = TEXCOORD_1.x * cbMtdParam._m0[9u].z;
    uint _363 = _189 + 1u;
    uint _370 = _189 + 2u;
    precise float _377 = TEXCOORD_1.x * cbInstanceData._m0[_189].x;
    precise float _378 = TEXCOORD_1.y * cbInstanceData._m0[_189].y;
    precise float _379 = _378 + _377;
    precise float _380 = TEXCOORD_1.z * cbInstanceData._m0[_189].z;
    precise float _381 = _380 + _379;
    precise float _382 = 1.0 * cbInstanceData._m0[_189].w;
    precise float _383 = _382 + _381;
    precise float _384 = TEXCOORD_1.x * cbInstanceData._m0[_363].x;
    precise float _385 = TEXCOORD_1.y * cbInstanceData._m0[_363].y;
    precise float _386 = _385 + _384;
    precise float _387 = TEXCOORD_1.z * cbInstanceData._m0[_363].z;
    precise float _388 = _387 + _386;
    precise float _389 = 1.0 * cbInstanceData._m0[_363].w;
    precise float _390 = _389 + _388;
    precise float _391 = TEXCOORD_1.x * cbInstanceData._m0[_370].x;
    precise float _392 = TEXCOORD_1.y * cbInstanceData._m0[_370].y;
    precise float _393 = _392 + _391;
    precise float _394 = TEXCOORD_1.z * cbInstanceData._m0[_370].z;
    precise float _395 = _394 + _393;
    precise float _396 = 1.0 * cbInstanceData._m0[_370].w;
    precise float _397 = _396 + _395;
    precise float _398 = _249 - _383;
    precise float _399 = _256 - _390;
    precise float _400 = _263 - _397;
    precise float _401 = _398 * _398;
    precise float _402 = _399 * _399;
    precise float _403 = _401 + _402;
    precise float _404 = _400 * _400;
    precise float _405 = _403 + _404;
    precise float _407 = cbMtdParam._m0[9u].x * sqrt(_405);
    precise float _408 = _355 + _407;
    precise float _409 = cbPerFrame._m0[22u].x + _408;
    uint _410 = _195.w;
    float _425;
    float _427;
    float _429;
    if (_198 == 0u)
    {
        _425 = 0.0;
        _427 = 0.0;
        _429 = 0.0;
    }
    else
    {
        uint _618 = _195.z;
        precise float _426;
        precise float _428;
        precise float _430;
        float _797;
        float _799;
        float _801;
        float _631 = 0.0;
        float _632 = 0.0;
        float _633 = 0.0;
        uint _634 = _618;
        uint _636 = 0u;
        float _672;
        float _691;
        vec4 _705;
        float _706;
        float _707;
        float _721;
        float _722;
        float _723;
        float _740;
        float _741;
        float _742;
        float _743;
        bool _744;
        bool _745;
        bool _746;
        precise float _747;
        precise float _748;
        precise float _749;
        float _750;
        float _751;
        float _752;
        precise float _753;
        bool _756;
        for (;;)
        {
            uint _638 = _634 & 255u;
            uint _640 = _638 * 24u;
            uvec3 _650 = uvec3(texelFetch(g_forceParam, int(_640)).x, texelFetch(g_forceParam, int(_640 + 1u)).x, texelFetch(g_forceParam, int(_640 + 2u)).x);
            uint _655 = (_638 * 24u) + 4u;
            vec4 _668 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_655)).x, texelFetch(g_forceParam, int(_655 + 1u)).x, texelFetch(g_forceParam, int(_655 + 2u)).x, texelFetch(g_forceParam, int(_655 + 3u)).x));
            _672 = _668.w;
            uint _674 = (_638 * 24u) + 8u;
            vec4 _687 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_674)).x, texelFetch(g_forceParam, int(_674 + 1u)).x, texelFetch(g_forceParam, int(_674 + 2u)).x, texelFetch(g_forceParam, int(_674 + 3u)).x));
            _691 = _687.w;
            uint _694 = (_638 * 24u) + 12u;
            _705 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_694)).x, texelFetch(g_forceParam, int(_694 + 1u)).x, _700, texelFetch(g_forceParam, int(_694 + 3u)).x));
            _706 = _705.x;
            _707 = _705.w;
            uint _710 = (_638 * 24u) + 16u;
            vec3 _720 = uintBitsToFloat(uvec3(texelFetch(g_forceParam, int(_710)).x, texelFetch(g_forceParam, int(_710 + 1u)).x, texelFetch(g_forceParam, int(_710 + 2u)).x));
            _721 = _720.x;
            _722 = _720.y;
            _723 = _720.z;
            uint _726 = (_638 * 24u) + 20u;
            vec4 _739 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_726)).x, texelFetch(g_forceParam, int(_726 + 1u)).x, texelFetch(g_forceParam, int(_726 + 2u)).x, texelFetch(g_forceParam, int(_726 + 3u)).x));
            _740 = _739.x;
            _741 = _739.y;
            _742 = _739.z;
            _743 = _739.w;
            _744 = _650.x == 1u;
            _745 = _650.y == 1u;
            _746 = _650.z == 1u;
            _747 = _383 - _668.x;
            _748 = _390 - _668.y;
            _749 = _397 - _668.z;
            _750 = _744 ? _687.x : _747;
            _751 = _744 ? _687.y : _748;
            _752 = _744 ? _687.z : _749;
            _753 = dot(vec3(_750, _751, _752), vec3(_750, _751, _752));
            _756 = _753 > 0.0;
            float frontier_phi_12_pred;
            float frontier_phi_12_pred_1;
            float frontier_phi_12_pred_2;
            if (_756)
            {
                precise float _782 = _747 * _747;
                precise float _783 = _748 * _748;
                precise float _784 = _782 + _783;
                precise float _785 = _749 * _749;
                precise float _786 = _785 + _784;
                float _787 = sqrt(_786);
                float _788 = inversesqrt(_753);
                precise float _789 = _750 * _788;
                precise float _790 = _751 * _788;
                precise float _791 = _752 * _788;
                precise float _794 = _787 / (isnan(0.001000000047497451305389404296875) ? _705.y : (isnan(_705.y) ? 0.001000000047497451305389404296875 : max(_705.y, 0.001000000047497451305389404296875)));
                precise float _795 = 1.0 - _794;
                float _1053 = isnan(0.0) ? _795 : (isnan(_795) ? 0.0 : max(_795, 0.0));
                float _796 = isnan(1.0) ? _1053 : (isnan(_1053) ? 1.0 : min(_1053, 1.0));
                float _829;
                if (_746)
                {
                    float _816 = inversesqrt(dot(vec3(_747, _748, _749), vec3(_747, _748, _749)));
                    precise float _817 = _747 * _816;
                    precise float _818 = _748 * _816;
                    precise float _819 = _749 * _816;
                    precise float _823 = dot(vec3(_789, _790, _791), vec3(_817, _818, _819)) * 0.800000011920928955078125;
                    precise float _825 = _823 + 0.20000000298023223876953125;
                    float _1064 = isnan(0.0) ? _825 : (isnan(_825) ? 0.0 : max(_825, 0.0));
                    precise float _828 = _796 * (isnan(1.0) ? _1064 : (isnan(_1064) ? 1.0 : min(_1064, 1.0)));
                    _829 = _828;
                }
                else
                {
                    _829 = _796;
                }
                float frontier_phi_12_pred_15_ladder;
                float frontier_phi_12_pred_15_ladder_1;
                float frontier_phi_12_pred_15_ladder_2;
                if (_829 > 0.0)
                {
                    bool _832 = _744 && (!_746);
                    precise float _834 = _787 * (-4.0);
                    precise float _838 = 6.283184051513671875 / (isnan(0.001000000047497451305389404296875) ? _706 : (isnan(_706) ? 0.001000000047497451305389404296875 : max(_706, 0.001000000047497451305389404296875)));
                    precise float _840 = dot(vec2(_789, _791), vec2(_747, _749));
                    precise float _844 = _838 * _840;
                    precise float _845 = float(_832) * _844;
                    precise float _846 = _409 * _838;
                    precise float _847 = _846 - _845;
                    precise float _848 = (_832 ? 0.0 : _834) + _847;
                    precise float _850 = _691 * sin(_848);
                    precise float _851 = _790 * 0.0;
                    precise float _852 = _851 - _791;
                    precise float _853 = _791 * 0.0;
                    precise float _854 = _789 * 0.0;
                    precise float _855 = _853 - _854;
                    precise float _856 = _789 - _851;
                    precise float _857 = _707 * _850;
                    float _858 = _744 ? _857 : 0.0;
                    float _901;
                    if (_745)
                    {
                        precise float _861 = _721 * 2.0;
                        precise float _863 = _741 + _742;
                        precise float _864 = _743 + _863;
                        precise float _866 = 6.283184051513671875 / (isnan(0.001000000047497451305389404296875) ? _721 : (isnan(_721) ? 0.001000000047497451305389404296875 : max(_721, 0.001000000047497451305389404296875)));
                        precise float _867 = _740 * _866;
                        precise float _868 = (-0.0) - _789;
                        precise float _873 = dot(vec2(_791, _868), vec2(_747, _749)) / _861;
                        precise float _874 = (-0.0) - _873;
                        float _877 = fract(abs(_873));
                        precise float _878 = (-0.0) - _877;
                        precise float _880 = _861 * ((_873 >= _874) ? _877 : _878);
                        precise float _881 = _880 * 6.283184051513671875;
                        precise float _882 = _881 / _861;
                        precise float _884 = (isnan(5.0) ? _721 : (isnan(_721) ? 5.0 : min(_721, 5.0))) * sin(_882);
                        precise float _885 = _840 + _884;
                        precise float _886 = _721 * 0.25;
                        precise float _888 = _409 * _740;
                        precise float _889 = _888 - _886;
                        precise float _890 = _889 - _885;
                        precise float _891 = _740 * _864;
                        precise float _893 = _890 / (isnan(0.001000000047497451305389404296875) ? _891 : (isnan(_891) ? 0.001000000047497451305389404296875 : max(_891, 0.001000000047497451305389404296875)));
                        float _894 = fract(_893);
                        precise float _896 = 1.0 - _894;
                        float _897 = (_893 < 0.0) ? _896 : _894;
                        precise float _898 = _863 / _864;
                        precise float _899 = _741 / _864;
                        float _920;
                        if (_897 < _899)
                        {
                            precise float _918 = _897 / _899;
                            _920 = _918;
                        }
                        else
                        {
                            float frontier_phi_22_21_ladder;
                            if (_897 < _898)
                            {
                                precise float _930 = _897 - _899;
                                precise float _931 = _898 - _899;
                                precise float _932 = _930 / _931;
                                precise float _921 = 1.0 - _932;
                                frontier_phi_22_21_ladder = _921;
                            }
                            else
                            {
                                frontier_phi_22_21_ladder = 0.0;
                            }
                            _920 = frontier_phi_22_21_ladder;
                        }
                        precise float _922 = _723 * _920;
                        precise float _923 = _866 * _840;
                        precise float _924 = _409 * _867;
                        precise float _925 = _924 - _923;
                        precise float _927 = _722 + sin(_925);
                        precise float _929 = _922 * abs(_927);
                        precise float _902 = _929 + 0.0;
                        _901 = _902;
                    }
                    else
                    {
                        _901 = 0.0;
                    }
                    precise float _903 = _672 + _850;
                    precise float _904 = _903 + _901;
                    precise float _905 = _789 * _904;
                    precise float _906 = _790 * _904;
                    precise float _907 = _791 * _904;
                    precise float _908 = _852 * _858;
                    precise float _909 = _855 * _858;
                    precise float _910 = _856 * _858;
                    precise float _911 = _908 + _905;
                    precise float _912 = _909 + _906;
                    precise float _913 = _910 + _907;
                    precise float _914 = _829 * _911;
                    precise float _915 = _829 * _912;
                    precise float _916 = _829 * _913;
                    precise float _798 = _914 * 0.0500000007450580596923828125;
                    precise float _800 = _915 * 0.0500000007450580596923828125;
                    precise float _802 = _916 * 0.0500000007450580596923828125;
                    frontier_phi_12_pred_15_ladder = _798;
                    frontier_phi_12_pred_15_ladder_1 = _800;
                    frontier_phi_12_pred_15_ladder_2 = _802;
                }
                else
                {
                    frontier_phi_12_pred_15_ladder = 0.0;
                    frontier_phi_12_pred_15_ladder_1 = 0.0;
                    frontier_phi_12_pred_15_ladder_2 = 0.0;
                }
                frontier_phi_12_pred = frontier_phi_12_pred_15_ladder;
                frontier_phi_12_pred_1 = frontier_phi_12_pred_15_ladder_1;
                frontier_phi_12_pred_2 = frontier_phi_12_pred_15_ladder_2;
            }
            else
            {
                frontier_phi_12_pred = 0.0;
                frontier_phi_12_pred_1 = 0.0;
                frontier_phi_12_pred_2 = 0.0;
            }
            _797 = frontier_phi_12_pred;
            _799 = frontier_phi_12_pred_1;
            _801 = frontier_phi_12_pred_2;
            _426 = _631 + _797;
            _428 = _632 + _799;
            _430 = _633 + _801;
            uint _637 = _636 + 1u;
            if (_637 == _198)
            {
                break;
            }
            else
            {
                _631 = _426;
                _632 = _428;
                _633 = _430;
                _634 = (_636 != 3u) ? (_634 >> 8u) : _410;
                _636 = _637;
                continue;
            }
        }
        _425 = _426;
        _427 = _428;
        _429 = _430;
    }
    precise float _431 = _425 * _425;
    precise float _432 = _427 * _427;
    precise float _433 = _431 + _432;
    precise float _434 = _429 * _429;
    precise float _435 = _433 + _434;
    float _436 = sqrt(_435);
    bool _437 = _436 < 0.00011000000085914507508277893066406;
    float _442 = inversesqrt(dot(vec3(cbInstanceData._m0[_189].x, cbInstanceData._m0[_363].x, cbInstanceData._m0[_370].x), vec3(cbInstanceData._m0[_189].x, cbInstanceData._m0[_363].x, cbInstanceData._m0[_370].x)));
    precise float _443 = cbInstanceData._m0[_189].x * _442;
    precise float _444 = cbInstanceData._m0[_363].x * _442;
    precise float _445 = cbInstanceData._m0[_370].x * _442;
    float _449 = inversesqrt(dot(vec3(cbInstanceData._m0[_189].y, cbInstanceData._m0[_363].y, cbInstanceData._m0[_370].y), vec3(cbInstanceData._m0[_189].y, cbInstanceData._m0[_363].y, cbInstanceData._m0[_370].y)));
    precise float _450 = cbInstanceData._m0[_189].y * _449;
    precise float _451 = cbInstanceData._m0[_363].y * _449;
    precise float _452 = cbInstanceData._m0[_370].y * _449;
    float _456 = inversesqrt(dot(vec3(cbInstanceData._m0[_189].z, cbInstanceData._m0[_363].z, cbInstanceData._m0[_370].z), vec3(cbInstanceData._m0[_189].z, cbInstanceData._m0[_363].z, cbInstanceData._m0[_370].z)));
    precise float _457 = cbInstanceData._m0[_189].z * _456;
    precise float _458 = cbInstanceData._m0[_363].z * _456;
    precise float _459 = cbInstanceData._m0[_370].z * _456;
    precise float _460 = _443 * 0.0;
    precise float _461 = 1.0 * _450;
    precise float _462 = _461 + _460;
    precise float _463 = 0.0 * _457;
    precise float _464 = _463 + _462;
    precise float _465 = _444 * 0.0;
    precise float _466 = 1.0 * _451;
    precise float _467 = _466 + _465;
    precise float _468 = 0.0 * _458;
    precise float _469 = _468 + _467;
    precise float _470 = _445 * 0.0;
    precise float _471 = 1.0 * _452;
    precise float _472 = _471 + _470;
    precise float _473 = 0.0 * _459;
    precise float _474 = _473 + _472;
    float _478 = inversesqrt(dot(vec3(_425, _427, _429), vec3(_425, _427, _429)));
    precise float _479 = _425 * _478;
    precise float _480 = _427 * _478;
    precise float _481 = _429 * _478;
    precise float _482 = _469 * _481;
    precise float _483 = _474 * _480;
    precise float _484 = _482 - _483;
    precise float _485 = _474 * _479;
    precise float _486 = _464 * _481;
    precise float _487 = _485 - _486;
    precise float _488 = _464 * _480;
    precise float _489 = _469 * _479;
    precise float _490 = _488 - _489;
    float _494 = inversesqrt(dot(vec3(_484, _487, _490), vec3(_484, _487, _490)));
    precise float _495 = _494 * _484;
    precise float _496 = _494 * _487;
    precise float _497 = _494 * _490;
    precise float _498 = _436 + 1.0;
    precise float _500 = cbMtdParam._m0[9u].y * log2(_498);
    precise float _501 = dot(vec3(_495, _496, _497), vec3(_398, _399, _400));
    precise float _504 = _495 * _501;
    precise float _505 = _496 * _501;
    precise float _506 = _497 * _501;
    precise float _507 = _383 + _504;
    precise float _508 = _390 + _505;
    precise float _509 = _397 + _506;
    precise float _510 = _249 - _507;
    precise float _511 = _256 - _508;
    precise float _512 = _263 - _509;
    precise float _513 = _496 * _512;
    precise float _514 = _497 * _511;
    precise float _515 = _513 - _514;
    precise float _516 = _497 * _510;
    precise float _517 = _495 * _512;
    precise float _518 = _516 - _517;
    precise float _519 = _495 * _511;
    precise float _520 = _496 * _510;
    precise float _521 = _519 - _520;
    float _522 = sin(_500);
    float _523 = cos(_500);
    precise float _524 = _510 * _523;
    precise float _525 = _511 * _523;
    precise float _526 = _512 * _523;
    precise float _527 = _522 * _515;
    precise float _528 = _522 * _518;
    precise float _529 = _522 * _521;
    precise float _530 = _524 + _527;
    precise float _531 = _525 + _528;
    precise float _532 = _529 + _526;
    precise float _533 = _507 + _530;
    precise float _534 = _508 + _531;
    precise float _535 = _509 + _532;
    precise float _536 = _533 - _249;
    precise float _537 = _534 - _256;
    precise float _538 = _535 - _263;
    precise float _542 = _249 + (_437 ? 0.0 : _536);
    precise float _543 = _256 + (_437 ? 0.0 : _537);
    precise float _544 = _263 + (_437 ? 0.0 : _538);
    precise float _545 = _542 - cbSceneParam._m0[3u].x;
    precise float _546 = _543 - cbSceneParam._m0[3u].y;
    precise float _547 = _544 - cbSceneParam._m0[3u].z;
    precise float _573 = cbSceneParam._m0[24u].x * _545;
    precise float _574 = _546 * cbSceneParam._m0[24u].y;
    precise float _575 = _574 + _573;
    precise float _576 = _547 * cbSceneParam._m0[24u].z;
    precise float _577 = _576 + _575;
    precise float _578 = 1.0 * cbSceneParam._m0[24u].w;
    precise float _579 = _578 + _577;
    precise float _580 = cbSceneParam._m0[25u].x * _545;
    precise float _581 = _546 * cbSceneParam._m0[25u].y;
    precise float _582 = _581 + _580;
    precise float _583 = _547 * cbSceneParam._m0[25u].z;
    precise float _584 = _583 + _582;
    precise float _585 = 1.0 * cbSceneParam._m0[25u].w;
    precise float _586 = _585 + _584;
    precise float _587 = cbSceneParam._m0[26u].x * _545;
    precise float _588 = _546 * cbSceneParam._m0[26u].y;
    precise float _589 = _588 + _587;
    precise float _590 = _547 * cbSceneParam._m0[26u].z;
    precise float _591 = _590 + _589;
    precise float _592 = 1.0 * cbSceneParam._m0[26u].w;
    precise float _593 = _592 + _591;
    precise float _594 = _545 * cbSceneParam._m0[27u].x;
    precise float _595 = _546 * cbSceneParam._m0[27u].y;
    precise float _596 = _595 + _594;
    precise float _597 = _547 * cbSceneParam._m0[27u].z;
    precise float _598 = _597 + _596;
    precise float _599 = 1.0 * cbSceneParam._m0[27u].w;
    precise float _600 = _599 + _598;
    gl_Position.x = _579;
    gl_Position.y = _586;
    gl_Position.z = _593;
    gl_Position.w = _600;
    NORMAL_1.x = _266;
    NORMAL_1.y = _269;
    NORMAL_1.z = _272;
    NORMAL_1.w = float(_212);
    TANGENT_1.x = fma(_187, cbObjMatrix._m0[_221].z, fma(_186, cbObjMatrix._m0[_221].y, cbObjMatrix._m0[_221].x * _185));
    TANGENT_1.y = fma(_187, cbObjMatrix._m0[_228].z, fma(_186, cbObjMatrix._m0[_228].y, cbObjMatrix._m0[_228].x * _185));
    TANGENT_1.z = fma(_187, cbObjMatrix._m0[_235].z, fma(_186, cbObjMatrix._m0[_235].y, cbObjMatrix._m0[_235].x * _185));
    TANGENT_1.w = (float(TANGENT.w) + (-127.0)) * 0.0078740157186985015869140625;
    TEXCOORD_2 = ((float(int(uint(TEXCOORD.x))) * 0.00048828125) * cbTexScroll._m0[0u].x) + cbTexScroll._m0[0u].z;
    TEXCOORD_1_1 = ((float(int(uint(TEXCOORD.y))) * 0.00048828125) * cbTexScroll._m0[0u].y) + cbTexScroll._m0[0u].w;
    TEXCOORD_3.x = TEXCOORD_1.x;
    TEXCOORD_3.y = TEXCOORD_1.y;
    TEXCOORD_3.z = TEXCOORD_1.z;
    TEXCOORD_3.w = COLOR_1.x;
    TEXCOORD_12 = _335;
    gl_CullDistance[0u] = (_335 < 0.0) ? (-1.0) : 0.0;
}


