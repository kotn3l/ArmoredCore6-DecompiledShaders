#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[28];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 44) uniform texture2D g_RLRTexture;
layout(set = 0, binding = 55) uniform texture2D g_RefractionTexture;
layout(set = 0, binding = 57) uniform texture2D g_WaterSimulationNormalTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 56) uniform texture2D g_DepthTexture;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Water_oceanB2_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_Water_oceanB2_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_Water_oceanB2_snp_0_Texture2D_2;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 7) uniform sampler SS_ClampPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 6) in vec3 TEXCOORD_8;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1258;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _208 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _209 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _210 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _215 = inversesqrt(dot(vec3(_208, _209, _210), vec3(_208, _209, _210)));
    float _216 = _215 * _208;
    float _217 = _215 * _209;
    float _218 = _215 * _210;
    float _222 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _223 = _222 * NORMAL.x;
    float _224 = _222 * NORMAL.y;
    float _225 = _222 * NORMAL.z;
    float _229 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _237;
    float _238;
    float _239;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _237 = (-0.0) - _223;
        _238 = (-0.0) - _224;
        _239 = (-0.0) - _225;
    }
    else
    {
        _237 = _223;
        _238 = _224;
        _239 = _225;
    }
    float _283 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _293 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _283);
    float _294 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _283);
    float _295 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _283);
    float _312 = cbMtdParam._m0[11u].z * cbPerFrame._m0[22u].x;
    vec4 _329 = texture(sampler2D(M_Water_oceanB2_snp_0_Texture2D_2, SS_BumpMap), vec2((((_312 * cbMtdParam._m0[20u].w) + TEXCOORD.x) * cbTextureTilingScale._m0[2u].x) + cbTextureTilingScale._m0[2u].z, (((_312 * cbMtdParam._m0[21u].x) + TEXCOORD.y) * cbTextureTilingScale._m0[2u].y) + cbTextureTilingScale._m0[2u].w));
    float _332 = _329.x;
    float _333 = _329.y;
    float _353 = cbMtdParam._m0[13u].y - cbMtdParam._m0[13u].x;
    float _355 = (sqrt(((_293 * _293) + (_294 * _294)) + (_295 * _295)) - cbMtdParam._m0[13u].x) / (isnan(0.0) ? _353 : (isnan(_353) ? 0.0 : max(_353, 0.0)));
    float _362 = (cbMtdParam._m0[13u].w + _355) * cbMtdParam._m0[15u].y;
    float _3629 = isnan(0.0) ? _362 : (isnan(_362) ? 0.0 : max(_362, 0.0));
    vec4 _376 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(cbSceneParam._m0[85u].z * gl_FragCoord.x, cbSceneParam._m0[85u].w * gl_FragCoord.y));
    float _378 = _376.x;
    bool _385 = floatBitsToUint(cbSceneParam._m0[88u]).x != 0u;
    float _401 = ((_385 ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _378)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _378))) - POSITION_1.w) / (((isnan(1.0) ? _3629 : (isnan(_3629) ? 1.0 : min(_3629, 1.0))) * (cbMtdParam._m0[12u].w - cbMtdParam._m0[12u].y)) + cbMtdParam._m0[12u].y);
    float _3640 = isnan(0.0) ? _401 : (isnan(_401) ? 0.0 : max(_401, 0.0));
    float _402 = isnan(1.0) ? _3640 : (isnan(_3640) ? 1.0 : min(_3640, 1.0));
    float _408 = 1.0 - (isnan(cbMtdParam._m0[16u].z) ? _402 : (isnan(_402) ? cbMtdParam._m0[16u].z : max(_402, cbMtdParam._m0[16u].z)));
    float _3656 = isnan(0.0) ? _355 : (isnan(_355) ? 0.0 : max(_355, 0.0));
    float _409 = isnan(1.0) ? _3656 : (isnan(_3656) ? 1.0 : min(_3656, 1.0));
    float _410 = _329.z - _409;
    float _3667 = isnan(0.0) ? _410 : (isnan(_410) ? 0.0 : max(_410, 0.0));
    float _411 = isnan(1.0) ? _3667 : (isnan(_3667) ? 1.0 : min(_3667, 1.0));
    float _412 = _411 * 0.004999999888241291046142578125;
    float _414 = _411 * (-0.004999999888241291046142578125);
    vec4 _447 = texture(sampler2D(M_Water_oceanB2_snp_0_Texture2D_0, SS_BumpMap), vec2(((((cbMtdParam._m0[18u].y * _312) + _412) + (cbMtdParam._m0[19u].w * TEXCOORD.x)) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((((cbMtdParam._m0[18u].z * _312) + _414) + (cbMtdParam._m0[20u].x * TEXCOORD.y)) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    float _451 = _447.z;
    vec4 _470 = texture(sampler2D(M_Water_oceanB2_snp_0_Texture2D_0, SS_BumpMap), vec2(((((cbMtdParam._m0[17u].w * _312) + _412) + (cbMtdParam._m0[20u].y * TEXCOORD.x)) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((((cbMtdParam._m0[18u].x * _312) + _414) + (cbMtdParam._m0[20u].z * TEXCOORD.y)) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    float _474 = _470.z;
    float _477 = (_408 - _329.w) + (isnan(_474) ? _451 : (isnan(_451) ? _474 : max(_451, _474)));
    float _3683 = isnan(0.0) ? _477 : (isnan(_477) ? 0.0 : max(_477, 0.0));
    float _481 = (TEXCOORD_5.x - _408) + cbMtdParam._m0[16u].y;
    float _482 = _481 * (isnan(1.0) ? _3683 : (isnan(_3683) ? 1.0 : min(_3683, 1.0)));
    float _494 = (_482 + cbMtdParam._m0[9u].x) + (cbMtdParam._m0[10u].x * _411);
    float _495 = (_482 + cbMtdParam._m0[9u].y) + (cbMtdParam._m0[10u].y * _411);
    float _496 = (_482 + cbMtdParam._m0[9u].z) + (cbMtdParam._m0[10u].z * _411);
    float _3694 = isnan(0.0) ? _481 : (isnan(_481) ? 0.0 : max(_481, 0.0));
    float _498 = 1.0 - (isnan(1.0) ? _3694 : (isnan(_3694) ? 1.0 : min(_3694, 1.0)));
    float _505 = ((_498 - _494) * _409) + _494;
    float _506 = ((_498 - _495) * _409) + _495;
    float _507 = ((_498 - _496) * _409) + _496;
    float _512 = _355 / cbMtdParam._m0[15u].w;
    float _3705 = isnan(0.0) ? _512 : (isnan(_512) ? 0.0 : max(_512, 0.0));
    float _515 = (1.0 - (isnan(1.0) ? _3705 : (isnan(_3705) ? 1.0 : min(_3705, 1.0)))) * cbMtdParam._m0[15u].z;
    float _528 = (cbMtdParam._m0[15u].x + _355) * cbMtdParam._m0[14u].y;
    float _3716 = isnan(0.0) ? _528 : (isnan(_528) ? 0.0 : max(_528, 0.0));
    float _532 = ((isnan(1.0) ? _3716 : (isnan(_3716) ? 1.0 : min(_3716, 1.0))) * (cbMtdParam._m0[12u].z - cbMtdParam._m0[11u].x)) + cbMtdParam._m0[11u].x;
    float _3727 = isnan(0.0) ? TEXCOORD_5.y : (isnan(TEXCOORD_5.y) ? 0.0 : max(TEXCOORD_5.y, 0.0));
    float _533 = isnan(1.0) ? _3727 : (isnan(_3727) ? 1.0 : min(_3727, 1.0));
    float _542 = _355 / cbMtdParam._m0[14u].w;
    float _3738 = isnan(0.0) ? _542 : (isnan(_542) ? 0.0 : max(_542, 0.0));
    float _543 = isnan(1.0) ? _3738 : (isnan(_3738) ? 1.0 : min(_3738, 1.0));
    vec4 _563 = texture(sampler2D(M_Water_oceanB2_snp_0_Texture2D_1, SS_BumpMap), vec2((((cbMtdParam._m0[21u].y * _312) + TEXCOORD.z) * cbTextureTilingScale._m0[1u].x) + cbTextureTilingScale._m0[1u].z, (((cbMtdParam._m0[21u].z * _312) + TEXCOORD.w) * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w));
    float _572 = ((_470.x + (-0.5)) * 0.5) + _447.x;
    float _573 = ((_470.y + (-0.5)) * 0.5) + _447.y;
    float _581 = _411 * 0.119999997317790985107421875;
    float _583 = _411 * (-0.100000001490116119384765625);
    float _593 = cbMtdParam._m0[22u].y * TEXCOORD.x;
    float _594 = cbMtdParam._m0[22u].z * TEXCOORD.y;
    vec4 _603 = texture(sampler2D(M_Water_oceanB2_snp_0_Texture2D_0, SS_BumpMap), vec2(((((cbMtdParam._m0[21u].w * _312) + _581) + _593) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((((cbMtdParam._m0[22u].x * _312) + _583) + _594) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    vec4 _621 = texture(sampler2D(M_Water_oceanB2_snp_0_Texture2D_0, SS_BumpMap), vec2((((_593 + _581) + (cbMtdParam._m0[22u].w * _312)) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, (((_594 + _583) + (cbMtdParam._m0[23u].x * _312)) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    float _633 = (((0.5 - _572) * 0.10999999940395355224609375) + _572) + (((_603.x + (-1.0)) + _621.x) * cbMtdParam._m0[16u].x);
    float _634 = (((0.5 - _573) * 0.10999999940395355224609375) + _573) + (((_603.y + (-1.0)) + _621.y) * cbMtdParam._m0[16u].x);
    float _639 = ((_563.x - _633) * _543) + _633;
    float _640 = ((_563.y - _634) * _543) + _634;
    float _642 = _355 / cbMtdParam._m0[14u].z;
    float _3749 = isnan(0.0) ? _642 : (isnan(_642) ? 0.0 : max(_642, 0.0));
    float _643 = isnan(1.0) ? _3749 : (isnan(_3749) ? 1.0 : min(_3749, 1.0));
    float _660 = ((((_533 * (0.5 - _332)) + _332) + (((_639 + (-0.5)) + ((0.5 - _639) * _643)) * 0.60000002384185791015625)) * 2.0) + (-1.0);
    float _661 = ((((_533 * (0.5 - _333)) + _333) + (((_640 + (-0.5)) + ((0.5 - _640) * _643)) * 0.60000002384185791015625)) * 2.0) + (-1.0);
    float _662 = dot(vec2(_660, _661), vec2(_660, _661));
    float _3760 = isnan(0.0) ? _662 : (isnan(_662) ? 0.0 : max(_662, 0.0));
    float _667 = sqrt(1.0 - (isnan(1.0) ? _3760 : (isnan(_3760) ? 1.0 : min(_3760, 1.0))));
    float _675 = (cbMtdParam._m0[13u].z + _355) * cbMtdParam._m0[14u].x;
    float _3771 = isnan(0.0) ? _675 : (isnan(_675) ? 0.0 : max(_675, 0.0));
    float _677 = (isnan(1.0) ? _3771 : (isnan(_3771) ? 1.0 : min(_3771, 1.0))) * cbMtdParam._m0[17u].x;
    float _3782 = isnan(0.0) ? _677 : (isnan(_677) ? 0.0 : max(_677, 0.0));
    float _678 = isnan(1.0) ? _3782 : (isnan(_3782) ? 1.0 : min(_3782, 1.0));
    float _693 = fma(_667, _237, fma(_661, _229 * TANGENT.x, _660 * _216));
    float _696 = fma(_667, _238, fma(_661, _229 * TANGENT.y, _660 * _217));
    float _699 = fma(_667, _239, fma(_661, _229 * TANGENT.z, _660 * _218));
    float _703 = inversesqrt(dot(vec3(_693, _696, _699), vec3(_693, _696, _699)));
    float _704 = _703 * _693;
    float _705 = _703 * _696;
    float _706 = _703 * _699;
    float _3793 = isnan(0.0) ? _515 : (isnan(_515) ? 0.0 : max(_515, 0.0));
    float _3804 = isnan(0.0) ? _532 : (isnan(_532) ? 0.0 : max(_532, 0.0));
    float _708 = isnan(1.0) ? _3804 : (isnan(_3804) ? 1.0 : min(_3804, 1.0));
    float _3815 = isnan(0.0) ? _505 : (isnan(_505) ? 0.0 : max(_505, 0.0));
    float _3826 = isnan(0.0) ? _506 : (isnan(_506) ? 0.0 : max(_506, 0.0));
    float _3837 = isnan(0.0) ? _507 : (isnan(_507) ? 0.0 : max(_507, 0.0));
    float _716 = _385 ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _756 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _765 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _756);
    float _766 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _756);
    float _767 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _756);
    float _771 = inversesqrt(dot(vec3(_765, _766, _767), vec3(_765, _766, _767)));
    float _772 = _765 * _771;
    float _773 = _766 * _771;
    float _774 = _767 * _771;
    float _779 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _780 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _782 = texture(sampler2D(g_WaterSimulationNormalTexture, SS_ClampLinear), vec2(TEXCOORD_8.x, TEXCOORD_8.y));
    float _791 = (_782.x * 2.0) + (-1.0);
    float _792 = (_782.y * 2.0) + (-1.0);
    float _793 = (_782.z * 2.0) + (-1.0);
    float _797 = inversesqrt(dot(vec3(_791, _792, _793), vec3(_791, _792, _793)));
    float _808 = ((TEXCOORD_8.y >= 1.0) || (((TEXCOORD_8.x <= 0.0) || (TEXCOORD_8.x >= 1.0)) || (TEXCOORD_8.y <= 0.0))) ? 0.0 : _782.w;
    float _815 = (((_791 * _797) - _704) * _808) + _704;
    float _816 = (((_792 * _797) - _705) * _808) + _705;
    float _817 = (((_793 * _797) - _706) * _808) + _706;
    float _838 = fma(_817, cbSceneParam._m0[5u].z, fma(_816, cbSceneParam._m0[5u].y, _815 * cbSceneParam._m0[5u].x));
    float _841 = fma(_817, cbSceneParam._m0[6u].z, fma(_816, cbSceneParam._m0[6u].y, _815 * cbSceneParam._m0[6u].x));
    float _844 = fma(_817, cbSceneParam._m0[7u].z, fma(_816, cbSceneParam._m0[7u].y, _815 * cbSceneParam._m0[7u].x));
    uint _857 = uint(roundEven(NORMAL.w)) * 13u;
    uint _859 = (_857 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _865 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3815 : (isnan(_3815) ? 1.0 : min(_3815, 1.0)))) * cbInstanceData._m0[_859].x;
    float _866 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3826 : (isnan(_3826) ? 1.0 : min(_3826, 1.0)))) * cbInstanceData._m0[_859].y;
    float _867 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3837 : (isnan(_3837) ? 1.0 : min(_3837, 1.0)))) * cbInstanceData._m0[_859].z;
    float _3848 = isnan(0.0) ? _865 : (isnan(_865) ? 0.0 : max(_865, 0.0));
    float _868 = isnan(1.0) ? _3848 : (isnan(_3848) ? 1.0 : min(_3848, 1.0));
    float _3859 = isnan(0.0) ? _866 : (isnan(_866) ? 0.0 : max(_866, 0.0));
    float _869 = isnan(1.0) ? _3859 : (isnan(_3859) ? 1.0 : min(_3859, 1.0));
    float _3870 = isnan(0.0) ? _867 : (isnan(_867) ? 0.0 : max(_867, 0.0));
    float _870 = isnan(1.0) ? _3870 : (isnan(_3870) ? 1.0 : min(_3870, 1.0));
    vec4 _879 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _779, cbSceneParam._m0[86u].y * _780));
    float _882 = _879.x * TEXCOORD_5.w;
    float _883 = dot(vec3(_815, _816, _817), vec3(_772, _773, _774));
    float _886 = _883 * 2.0;
    float _890 = (_886 * _815) - _772;
    float _891 = (_886 * _816) - _773;
    float _892 = (_886 * _817) - _774;
    float _896 = abs(dot(vec3(_772, _773, _774), vec3(_815, _816, _817)));
    float _3881 = isnan(0.0) ? _896 : (isnan(_896) ? 0.0 : max(_896, 0.0));
    float _897 = isnan(1.0) ? _3881 : (isnan(_3881) ? 1.0 : min(_3881, 1.0));
    float _905 = 10.0 / (_716 + 10.0);
    float _906 = sqrt(_708);
    float _918 = exp2((_906 * 5.0) * log2(1.0 - (_897 * 0.999000012874603271484375))) / (4.0 - (_906 * 3.0));
    float _949 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _953 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _957 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1257;
    float _1259;
    float _1260;
    float _1261;
    float _1262;
    float _1263;
    float _1264;
    float _1265;
    float _1266;
    float _1267;
    float _1268;
    float _1269;
    float _1270;
    float _1271;
    float _1272;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _984 = fma(_957, cbModelParam._m0[26u].z, fma(_953, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _949));
        float _988 = fma(_957, cbModelParam._m0[27u].z, fma(_953, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _949));
        float _992 = fma(_957, cbModelParam._m0[28u].z, fma(_953, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _949));
        float _1015 = _949 + _815;
        float _1016 = _953 + _816;
        float _1017 = _957 + _817;
        float _1027 = fma(_1017, cbModelParam._m0[26u].z, fma(_1016, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1015)) - _984;
        float _1028 = fma(_1017, cbModelParam._m0[27u].z, fma(_1016, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1015)) - _988;
        float _1029 = fma(_1017, cbModelParam._m0[28u].z, fma(_1016, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1015)) - _992;
        float _1033 = inversesqrt(dot(vec3(_1027, _1028, _1029), vec3(_1027, _1028, _1029)));
        float _1046 = ((_1033 * _1027) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_984 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1047 = ((_1033 * _1028) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_988 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1048 = ((_1033 * _1029) / cbModelParam._m0[34u].z) + ((((((_992 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1051 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1046, _1047, _1048), 0.0);
        vec4 _1058 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1046, _1047, _1048), 0.0);
        vec4 _1065 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1046, _1047, _1048), 0.0);
        vec4 _1072 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1046, _1047, _1048), 0.0);
        float _1085 = exp2((_1051.w + (-0.5)) * 20.0) * 2.0;
        float _1086 = _1085 * (_1051.x + (-0.5));
        float _1087 = _1085 * (_1051.y + (-0.5));
        float _1088 = _1085 * (_1051.z + (-0.5));
        float _1095 = exp2((_1058.w + (-0.5)) * 20.0) * 2.0;
        float _1096 = _1095 * (_1058.x + (-0.5));
        float _1097 = _1095 * (_1058.y + (-0.5));
        float _1098 = _1095 * (_1058.z + (-0.5));
        float _1105 = exp2((_1065.w + (-0.5)) * 20.0) * 2.0;
        float _1106 = _1105 * (_1065.x + (-0.5));
        float _1107 = _1105 * (_1065.y + (-0.5));
        float _1108 = _1105 * (_1065.z + (-0.5));
        float _1115 = exp2((_1072.w + (-0.5)) * 20.0) * 2.0;
        float _1116 = _1115 * (_1072.x + (-0.5));
        float _1117 = _1115 * (_1072.y + (-0.5));
        float _1118 = _1115 * (_1072.z + (-0.5));
        float _1119 = isnan(0.0) ? _1116 : (isnan(_1116) ? 0.0 : max(_1116, 0.0));
        float _1120 = isnan(0.0) ? _1117 : (isnan(_1117) ? 0.0 : max(_1117, 0.0));
        float _1121 = isnan(0.0) ? _1118 : (isnan(_1118) ? 0.0 : max(_1118, 0.0));
        float _1122 = _1086 * 0.5;
        float _1123 = _1096 * 0.5;
        float _1124 = _1106 * 0.5;
        float _1125 = dot(vec3(_1122, _1123, _1124), vec3(_1122, _1123, _1124));
        float _1130 = (_1125 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1125);
        float _1139 = (dot(vec3(_815, _816, _817), vec3(_1130 * _1122, _1130 * _1123, _1130 * _1124)) + 1.0) * 0.5;
        float _3907 = isnan(0.0) ? _1139 : (isnan(_1139) ? 0.0 : max(_1139, 0.0));
        float _1149 = sqrt(((_1123 * _1123) + (_1122 * _1122)) + (_1124 * _1124)) / (_1119 + 9.9999997473787516355514526367188e-06);
        float _3918 = isnan(0.0) ? _1149 : (isnan(_1149) ? 0.0 : max(_1149, 0.0));
        float _1150 = isnan(1.0) ? _3918 : (isnan(_3918) ? 1.0 : min(_3918, 1.0));
        float _1151 = _1150 * 2.0;
        float _1155 = (1.0 - _1150) / (_1150 + 1.0);
        float _3929 = isnan(0.0) ? _1155 : (isnan(_1155) ? 0.0 : max(_1155, 0.0));
        float _1156 = isnan(1.0) ? _3929 : (isnan(_3929) ? 1.0 : min(_3929, 1.0));
        float _1165 = ((((1.0 - _1156) * (_1151 + 2.0)) * exp2(log2(isnan(1.0) ? _3907 : (isnan(_3907) ? 1.0 : min(_3907, 1.0))) * (_1151 + 1.0))) + _1156) * _1119;
        float _1166 = _1087 * 0.5;
        float _1167 = _1097 * 0.5;
        float _1168 = _1107 * 0.5;
        float _1169 = dot(vec3(_1166, _1167, _1168), vec3(_1166, _1167, _1168));
        float _1174 = (_1169 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1169);
        float _1182 = (dot(vec3(_815, _816, _817), vec3(_1174 * _1166, _1174 * _1167, _1174 * _1168)) + 1.0) * 0.5;
        float _3940 = isnan(0.0) ? _1182 : (isnan(_1182) ? 0.0 : max(_1182, 0.0));
        float _1191 = sqrt(((_1167 * _1167) + (_1166 * _1166)) + (_1168 * _1168)) / (_1120 + 9.9999997473787516355514526367188e-06);
        float _3951 = isnan(0.0) ? _1191 : (isnan(_1191) ? 0.0 : max(_1191, 0.0));
        float _1192 = isnan(1.0) ? _3951 : (isnan(_3951) ? 1.0 : min(_3951, 1.0));
        float _1193 = _1192 * 2.0;
        float _1197 = (1.0 - _1192) / (_1192 + 1.0);
        float _3962 = isnan(0.0) ? _1197 : (isnan(_1197) ? 0.0 : max(_1197, 0.0));
        float _1198 = isnan(1.0) ? _3962 : (isnan(_3962) ? 1.0 : min(_3962, 1.0));
        float _1207 = ((((1.0 - _1198) * (_1193 + 2.0)) * exp2(log2(isnan(1.0) ? _3940 : (isnan(_3940) ? 1.0 : min(_3940, 1.0))) * (_1193 + 1.0))) + _1198) * _1120;
        float _1208 = _1088 * 0.5;
        float _1209 = _1098 * 0.5;
        float _1210 = _1108 * 0.5;
        float _1211 = dot(vec3(_1208, _1209, _1210), vec3(_1208, _1209, _1210));
        float _1216 = (_1211 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1211);
        float _1224 = (dot(vec3(_815, _816, _817), vec3(_1216 * _1208, _1216 * _1209, _1216 * _1210)) + 1.0) * 0.5;
        float _3973 = isnan(0.0) ? _1224 : (isnan(_1224) ? 0.0 : max(_1224, 0.0));
        float _1233 = sqrt(((_1209 * _1209) + (_1208 * _1208)) + (_1210 * _1210)) / (_1121 + 9.9999997473787516355514526367188e-06);
        float _3984 = isnan(0.0) ? _1233 : (isnan(_1233) ? 0.0 : max(_1233, 0.0));
        float _1234 = isnan(1.0) ? _3984 : (isnan(_3984) ? 1.0 : min(_3984, 1.0));
        float _1235 = _1234 * 2.0;
        float _1239 = (1.0 - _1234) / (_1234 + 1.0);
        float _3995 = isnan(0.0) ? _1239 : (isnan(_1239) ? 0.0 : max(_1239, 0.0));
        float _1240 = isnan(1.0) ? _3995 : (isnan(_3995) ? 1.0 : min(_3995, 1.0));
        float _1249 = ((((1.0 - _1240) * (_1235 + 2.0)) * exp2(log2(isnan(1.0) ? _3973 : (isnan(_3973) ? 1.0 : min(_3973, 1.0))) * (_1235 + 1.0))) + _1240) * _1121;
        _1257 = _1088;
        _1259 = _1087;
        _1260 = _1086;
        _1261 = _1098;
        _1262 = _1097;
        _1263 = _1096;
        _1264 = _1108;
        _1265 = _1107;
        _1266 = _1106;
        _1267 = _1121;
        _1268 = _1120;
        _1269 = _1119;
        _1270 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1165 : (isnan(_1165) ? 0.0 : max(_1165, 0.0)));
        _1271 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1207 : (isnan(_1207) ? 0.0 : max(_1207, 0.0)));
        _1272 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1249 : (isnan(_1249) ? 0.0 : max(_1249, 0.0)));
    }
    else
    {
        _1257 = _1258;
        _1259 = _1258;
        _1260 = _1258;
        _1261 = _1258;
        _1262 = _1258;
        _1263 = _1258;
        _1264 = _1258;
        _1265 = _1258;
        _1266 = _1258;
        _1267 = _1258;
        _1268 = _1258;
        _1269 = _1258;
        _1270 = 0.0;
        _1271 = 0.0;
        _1272 = 0.0;
    }
    float _1567;
    float _1568;
    float _1569;
    float _1570;
    float _1571;
    float _1572;
    float _1573;
    float _1574;
    float _1575;
    float _1576;
    float _1577;
    float _1578;
    float _1579;
    float _1580;
    float _1581;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1298 = fma(_957, cbModelParam._m0[30u].z, fma(_953, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _949));
        float _1302 = fma(_957, cbModelParam._m0[31u].z, fma(_953, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _949));
        float _1306 = fma(_957, cbModelParam._m0[32u].z, fma(_953, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _949));
        float _1329 = _949 + _815;
        float _1330 = _953 + _816;
        float _1331 = _957 + _817;
        float _1341 = fma(_1331, cbModelParam._m0[30u].z, fma(_1330, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1329)) - _1298;
        float _1342 = fma(_1331, cbModelParam._m0[31u].z, fma(_1330, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1329)) - _1302;
        float _1343 = fma(_1331, cbModelParam._m0[32u].z, fma(_1330, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1329)) - _1306;
        float _1347 = inversesqrt(dot(vec3(_1341, _1342, _1343), vec3(_1341, _1342, _1343)));
        float _1360 = ((_1347 * _1341) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1298 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1361 = ((_1347 * _1342) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1302 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1362 = ((_1347 * _1343) / cbModelParam._m0[35u].z) + ((((((_1306 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1364 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1360, _1361, _1362), 0.0);
        vec4 _1371 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1360, _1361, _1362), 0.0);
        vec4 _1378 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1360, _1361, _1362), 0.0);
        vec4 _1385 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1360, _1361, _1362), 0.0);
        float _1397 = exp2((_1364.w + (-0.5)) * 20.0) * 2.0;
        float _1398 = _1397 * (_1364.x + (-0.5));
        float _1399 = _1397 * (_1364.y + (-0.5));
        float _1400 = _1397 * (_1364.z + (-0.5));
        float _1407 = exp2((_1371.w + (-0.5)) * 20.0) * 2.0;
        float _1408 = _1407 * (_1371.x + (-0.5));
        float _1409 = _1407 * (_1371.y + (-0.5));
        float _1410 = _1407 * (_1371.z + (-0.5));
        float _1417 = exp2((_1378.w + (-0.5)) * 20.0) * 2.0;
        float _1418 = _1417 * (_1378.x + (-0.5));
        float _1419 = _1417 * (_1378.y + (-0.5));
        float _1420 = _1417 * (_1378.z + (-0.5));
        float _1427 = exp2((_1385.w + (-0.5)) * 20.0) * 2.0;
        float _1428 = _1427 * (_1385.x + (-0.5));
        float _1429 = _1427 * (_1385.y + (-0.5));
        float _1430 = _1427 * (_1385.z + (-0.5));
        float _1431 = isnan(0.0) ? _1428 : (isnan(_1428) ? 0.0 : max(_1428, 0.0));
        float _1432 = isnan(0.0) ? _1429 : (isnan(_1429) ? 0.0 : max(_1429, 0.0));
        float _1433 = isnan(0.0) ? _1430 : (isnan(_1430) ? 0.0 : max(_1430, 0.0));
        float _1434 = _1398 * 0.5;
        float _1435 = _1408 * 0.5;
        float _1436 = _1418 * 0.5;
        float _1437 = dot(vec3(_1434, _1435, _1436), vec3(_1434, _1435, _1436));
        float _1442 = (_1437 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1437);
        float _1450 = (dot(vec3(_815, _816, _817), vec3(_1442 * _1434, _1442 * _1435, _1442 * _1436)) + 1.0) * 0.5;
        float _4036 = isnan(0.0) ? _1450 : (isnan(_1450) ? 0.0 : max(_1450, 0.0));
        float _1459 = sqrt(((_1435 * _1435) + (_1434 * _1434)) + (_1436 * _1436)) / (_1431 + 9.9999997473787516355514526367188e-06);
        float _4047 = isnan(0.0) ? _1459 : (isnan(_1459) ? 0.0 : max(_1459, 0.0));
        float _1460 = isnan(1.0) ? _4047 : (isnan(_4047) ? 1.0 : min(_4047, 1.0));
        float _1461 = _1460 * 2.0;
        float _1465 = (1.0 - _1460) / (_1460 + 1.0);
        float _4058 = isnan(0.0) ? _1465 : (isnan(_1465) ? 0.0 : max(_1465, 0.0));
        float _1466 = isnan(1.0) ? _4058 : (isnan(_4058) ? 1.0 : min(_4058, 1.0));
        float _1475 = ((((1.0 - _1466) * (_1461 + 2.0)) * exp2(log2(isnan(1.0) ? _4036 : (isnan(_4036) ? 1.0 : min(_4036, 1.0))) * (_1461 + 1.0))) + _1466) * _1431;
        float _1476 = _1399 * 0.5;
        float _1477 = _1409 * 0.5;
        float _1478 = _1419 * 0.5;
        float _1479 = dot(vec3(_1476, _1477, _1478), vec3(_1476, _1477, _1478));
        float _1484 = (_1479 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1479);
        float _1492 = (dot(vec3(_815, _816, _817), vec3(_1484 * _1476, _1484 * _1477, _1484 * _1478)) + 1.0) * 0.5;
        float _4069 = isnan(0.0) ? _1492 : (isnan(_1492) ? 0.0 : max(_1492, 0.0));
        float _1501 = sqrt(((_1477 * _1477) + (_1476 * _1476)) + (_1478 * _1478)) / (_1432 + 9.9999997473787516355514526367188e-06);
        float _4080 = isnan(0.0) ? _1501 : (isnan(_1501) ? 0.0 : max(_1501, 0.0));
        float _1502 = isnan(1.0) ? _4080 : (isnan(_4080) ? 1.0 : min(_4080, 1.0));
        float _1503 = _1502 * 2.0;
        float _1507 = (1.0 - _1502) / (_1502 + 1.0);
        float _4091 = isnan(0.0) ? _1507 : (isnan(_1507) ? 0.0 : max(_1507, 0.0));
        float _1508 = isnan(1.0) ? _4091 : (isnan(_4091) ? 1.0 : min(_4091, 1.0));
        float _1517 = ((((1.0 - _1508) * (_1503 + 2.0)) * exp2(log2(isnan(1.0) ? _4069 : (isnan(_4069) ? 1.0 : min(_4069, 1.0))) * (_1503 + 1.0))) + _1508) * _1432;
        float _1518 = _1400 * 0.5;
        float _1519 = _1410 * 0.5;
        float _1520 = _1420 * 0.5;
        float _1521 = dot(vec3(_1518, _1519, _1520), vec3(_1518, _1519, _1520));
        float _1526 = (_1521 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1521);
        float _1534 = (dot(vec3(_815, _816, _817), vec3(_1526 * _1518, _1526 * _1519, _1526 * _1520)) + 1.0) * 0.5;
        float _4102 = isnan(0.0) ? _1534 : (isnan(_1534) ? 0.0 : max(_1534, 0.0));
        float _1543 = sqrt(((_1519 * _1519) + (_1518 * _1518)) + (_1520 * _1520)) / (_1433 + 9.9999997473787516355514526367188e-06);
        float _4113 = isnan(0.0) ? _1543 : (isnan(_1543) ? 0.0 : max(_1543, 0.0));
        float _1544 = isnan(1.0) ? _4113 : (isnan(_4113) ? 1.0 : min(_4113, 1.0));
        float _1545 = _1544 * 2.0;
        float _1549 = (1.0 - _1544) / (_1544 + 1.0);
        float _4124 = isnan(0.0) ? _1549 : (isnan(_1549) ? 0.0 : max(_1549, 0.0));
        float _1550 = isnan(1.0) ? _4124 : (isnan(_4124) ? 1.0 : min(_4124, 1.0));
        float _1559 = ((((1.0 - _1550) * (_1545 + 2.0)) * exp2(log2(isnan(1.0) ? _4102 : (isnan(_4102) ? 1.0 : min(_4102, 1.0))) * (_1545 + 1.0))) + _1550) * _1433;
        _1567 = _1400;
        _1568 = _1399;
        _1569 = _1398;
        _1570 = _1410;
        _1571 = _1409;
        _1572 = _1408;
        _1573 = _1420;
        _1574 = _1419;
        _1575 = _1418;
        _1576 = _1433;
        _1577 = _1432;
        _1578 = _1431;
        _1579 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1475 : (isnan(_1475) ? 0.0 : max(_1475, 0.0)));
        _1580 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1517 : (isnan(_1517) ? 0.0 : max(_1517, 0.0)));
        _1581 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1559 : (isnan(_1559) ? 0.0 : max(_1559, 0.0)));
    }
    else
    {
        _1567 = _1258;
        _1568 = _1258;
        _1569 = _1258;
        _1570 = _1258;
        _1571 = _1258;
        _1572 = _1258;
        _1573 = _1258;
        _1574 = _1258;
        _1575 = _1258;
        _1576 = _1258;
        _1577 = _1258;
        _1578 = _1258;
        _1579 = 0.0;
        _1580 = 0.0;
        _1581 = 0.0;
    }
    float _1591 = (cbModelParam._m0[1u].x * (_1579 - _1270)) + _1270;
    float _1592 = (cbModelParam._m0[1u].x * (_1580 - _1271)) + _1271;
    float _1593 = (cbModelParam._m0[1u].x * (_1581 - _1272)) + _1272;
    float _1614 = fma(_1593, cbSceneParam._m0[89u].z, fma(_1592, cbSceneParam._m0[89u].y, _1591 * cbSceneParam._m0[89u].x));
    float _1617 = fma(_1593, cbSceneParam._m0[90u].z, fma(_1592, cbSceneParam._m0[90u].y, _1591 * cbSceneParam._m0[90u].x));
    float _1620 = fma(_1593, cbSceneParam._m0[91u].z, fma(_1592, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1591));
    float _1635 = _890 * 0.5;
    float _1636 = _891 * 0.5;
    float _1637 = _892 * 0.5;
    float _1638 = dot(vec4(_1635, _1636, _1637, 1.0), vec4(_1569, _1572, _1575, _1578));
    float _1641 = dot(vec4(_1635, _1636, _1637, 1.0), vec4(_1568, _1571, _1574, _1577));
    float _1644 = dot(vec4(_1635, _1636, _1637, 1.0), vec4(_1567, _1570, _1573, _1576));
    float _1678;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1651 = dot(vec4(_1635, _1636, _1637, 1.0), vec4(_1257, _1261, _1264, _1267));
        float _1655 = dot(vec4(_1635, _1636, _1637, 1.0), vec4(_1259, _1262, _1265, _1268));
        float _1659 = dot(vec4(_1635, _1636, _1637, 1.0), vec4(_1260, _1263, _1266, _1269));
        float _1666 = dot(vec4(cbModelParam._m0[39u]), vec4(_1635, _1636, _1637, 1.0));
        _1678 = dot(vec3(isnan(0.0) ? _1659 : (isnan(_1659) ? 0.0 : max(_1659, 0.0)), isnan(0.0) ? _1655 : (isnan(_1655) ? 0.0 : max(_1655, 0.0)), isnan(0.0) ? _1651 : (isnan(_1651) ? 0.0 : max(_1651, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1666) ? 0.0 : (isnan(0.0) ? _1666 : max(0.0, _1666))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1678 = 1.0;
    }
    float _1689;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1680 = dot(vec4(cbModelParam._m0[40u]), vec4(_1635, _1636, _1637, 1.0));
        _1689 = dot(vec3(isnan(0.0) ? _1638 : (isnan(_1638) ? 0.0 : max(_1638, 0.0)), isnan(0.0) ? _1641 : (isnan(_1641) ? 0.0 : max(_1641, 0.0)), isnan(0.0) ? _1644 : (isnan(_1644) ? 0.0 : max(_1644, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1680) ? 0.0 : (isnan(0.0) ? _1680 : max(0.0, _1680))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1689 = 1.0;
    }
    float _1693 = (_1689 * cbModelParam._m0[1u].x) + (_1678 * (1.0 - cbModelParam._m0[1u].x));
    float _1703 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _708);
    float _1704 = isnan(_1703) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1703 : min(cbModelParam._m0[25u].z, _1703));
    float _1784;
    float _1786;
    float _1788;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1751 = fma(_957, cbModelParam._m0[13u].z, fma(_953, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _949)) + cbModelParam._m0[13u].w;
        float _1755 = fma(_957, cbModelParam._m0[14u].z, fma(_953, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _949)) + cbModelParam._m0[14u].w;
        float _1759 = fma(_957, cbModelParam._m0[15u].z, fma(_953, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _949)) + cbModelParam._m0[15u].w;
        float _1762 = fma(_892, cbModelParam._m0[13u].z, fma(_891, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _890));
        float _1765 = fma(_892, cbModelParam._m0[14u].z, fma(_891, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _890));
        float _1768 = fma(_892, cbModelParam._m0[15u].z, fma(_891, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _890));
        float _1796;
        if (_1762 > 0.0)
        {
            _1796 = abs((1.0 - _1751) / _1762);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1762 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1751 + 1.0) / _1762);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1796 = frontier_phi_16_14_ladder;
        }
        float _2219;
        if (_1765 > 0.0)
        {
            _2219 = abs((1.0 - _1755) / _1765);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1765 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1755 + 1.0) / _1765);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2219 = frontier_phi_25_21_ladder;
        }
        float _2637;
        if (_1768 > 0.0)
        {
            _2637 = abs((1.0 - _1759) / _1768);
        }
        else
        {
            float frontier_phi_39_32_ladder;
            if (_1768 < 0.0)
            {
                frontier_phi_39_32_ladder = abs((_1759 + 1.0) / _1768);
            }
            else
            {
                frontier_phi_39_32_ladder = 5000.0;
            }
            _2637 = frontier_phi_39_32_ladder;
        }
        float _2639 = isnan(_2219) ? _1796 : (isnan(_1796) ? _2219 : min(_1796, _2219));
        float _2640 = isnan(_2637) ? _2639 : (isnan(_2639) ? _2637 : min(_2639, _2637));
        float _2644 = (_2640 * _1762) + _1751;
        float _2645 = (_2640 * _1765) + _1755;
        float _2646 = (_2640 * _1768) + _1759;
        float _2647 = _2640 * 9.9999997473787516355514526367188e-05;
        float _2649 = (-1.0) - _2647;
        float _2651 = _2647 + 1.0;
        float frontier_phi_15_39_ladder;
        float frontier_phi_15_39_ladder_1;
        float frontier_phi_15_39_ladder_2;
        if ((_2646 > _2651) || ((_2646 < _2649) || ((_2645 > _2651) || ((_2645 < _2649) || ((_2644 < _2649) || (_2644 > _2651))))))
        {
            frontier_phi_15_39_ladder = 0.0;
            frontier_phi_15_39_ladder_1 = 0.0;
            frontier_phi_15_39_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2855 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2646, cbModelParam._m0[9u].z, fma(_2645, cbModelParam._m0[9u].y, _2644 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2646, cbModelParam._m0[10u].z, fma(_2645, cbModelParam._m0[10u].y, _2644 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2646, cbModelParam._m0[11u].z, fma(_2645, cbModelParam._m0[11u].y, _2644 * cbModelParam._m0[11u].x))), _1704);
            frontier_phi_15_39_ladder = _2855.z * cbModelParam._m0[1u].y;
            frontier_phi_15_39_ladder_1 = _2855.y * cbModelParam._m0[1u].y;
            frontier_phi_15_39_ladder_2 = _2855.x * cbModelParam._m0[1u].y;
        }
        _1784 = frontier_phi_15_39_ladder_2;
        _1786 = frontier_phi_15_39_ladder_1;
        _1788 = frontier_phi_15_39_ladder;
    }
    else
    {
        vec4 _1772 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_890, _891, _892), _1704);
        _1784 = _1772.x * cbModelParam._m0[1u].y;
        _1786 = _1772.y * cbModelParam._m0[1u].y;
        _1788 = _1772.z * cbModelParam._m0[1u].y;
    }
    float _1792 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _708);
    float _1793 = isnan(_1792) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1792 : min(cbModelParam._m0[25u].w, _1792));
    float _1882;
    float _1884;
    float _1886;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1846 = fma(_957, cbModelParam._m0[21u].z, fma(_953, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _949)) + cbModelParam._m0[21u].w;
        float _1850 = fma(_957, cbModelParam._m0[22u].z, fma(_953, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _949)) + cbModelParam._m0[22u].w;
        float _1854 = fma(_957, cbModelParam._m0[23u].z, fma(_953, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _949)) + cbModelParam._m0[23u].w;
        float _1857 = fma(_892, cbModelParam._m0[21u].z, fma(_891, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _890));
        float _1860 = fma(_892, cbModelParam._m0[22u].z, fma(_891, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _890));
        float _1863 = fma(_892, cbModelParam._m0[23u].z, fma(_891, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _890));
        float _2224;
        if (_1857 > 0.0)
        {
            _2224 = abs((1.0 - _1846) / _1857);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1857 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1846 + 1.0) / _1857);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _2224 = frontier_phi_27_23_ladder;
        }
        float _2664;
        if (_1860 > 0.0)
        {
            _2664 = abs((1.0 - _1850) / _1860);
        }
        else
        {
            float frontier_phi_41_34_ladder;
            if (_1860 < 0.0)
            {
                frontier_phi_41_34_ladder = abs((_1850 + 1.0) / _1860);
            }
            else
            {
                frontier_phi_41_34_ladder = 5000.0;
            }
            _2664 = frontier_phi_41_34_ladder;
        }
        float _2916;
        if (_1863 > 0.0)
        {
            _2916 = abs((1.0 - _1854) / _1863);
        }
        else
        {
            float frontier_phi_56_50_ladder;
            if (_1863 < 0.0)
            {
                frontier_phi_56_50_ladder = abs((_1854 + 1.0) / _1863);
            }
            else
            {
                frontier_phi_56_50_ladder = 5000.0;
            }
            _2916 = frontier_phi_56_50_ladder;
        }
        float _2918 = isnan(_2664) ? _2224 : (isnan(_2224) ? _2664 : min(_2224, _2664));
        float _2919 = isnan(_2916) ? _2918 : (isnan(_2918) ? _2916 : min(_2918, _2916));
        float _2923 = (_2919 * _1857) + _1846;
        float _2924 = (_2919 * _1860) + _1850;
        float _2925 = (_2919 * _1863) + _1854;
        float _2926 = _2919 * 9.9999997473787516355514526367188e-05;
        float _2927 = (-1.0) - _2926;
        float _2929 = _2926 + 1.0;
        float frontier_phi_24_56_ladder;
        float frontier_phi_24_56_ladder_1;
        float frontier_phi_24_56_ladder_2;
        if ((_2925 > _2929) || ((_2925 < _2927) || ((_2924 > _2929) || ((_2924 < _2927) || ((_2923 < _2927) || (_2923 > _2929))))))
        {
            frontier_phi_24_56_ladder = 0.0;
            frontier_phi_24_56_ladder_1 = 0.0;
            frontier_phi_24_56_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3196 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2925, cbModelParam._m0[17u].z, fma(_2924, cbModelParam._m0[17u].y, _2923 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2925, cbModelParam._m0[18u].z, fma(_2924, cbModelParam._m0[18u].y, _2923 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2925, cbModelParam._m0[19u].z, fma(_2924, cbModelParam._m0[19u].y, _2923 * cbModelParam._m0[19u].x))), _1793);
            frontier_phi_24_56_ladder = _3196.y * cbModelParam._m0[1u].z;
            frontier_phi_24_56_ladder_1 = _3196.z * cbModelParam._m0[1u].z;
            frontier_phi_24_56_ladder_2 = _3196.x * cbModelParam._m0[1u].z;
        }
        _1882 = frontier_phi_24_56_ladder_2;
        _1884 = frontier_phi_24_56_ladder;
        _1886 = frontier_phi_24_56_ladder_1;
    }
    else
    {
        vec4 _1866 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_890, _891, _892), _1793);
        _1882 = _1866.x * cbModelParam._m0[1u].z;
        _1884 = _1866.y * cbModelParam._m0[1u].z;
        _1886 = _1866.z * cbModelParam._m0[1u].z;
    }
    float _1898 = ((((1.0 - _918) * ((_906 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_918 * _906)) * _882;
    float _1899 = _1898 * ((cbModelParam._m0[1u].w * (_1882 - _1784)) + _1784);
    float _1900 = _1898 * ((cbModelParam._m0[1u].w * (_1884 - _1786)) + _1786);
    float _1901 = _1898 * ((cbModelParam._m0[1u].w * (_1886 - _1788)) + _1788);
    float _1904 = fma(_1901, cbSceneParam._m0[89u].z, fma(_1900, cbSceneParam._m0[89u].y, _1899 * cbSceneParam._m0[89u].x));
    float _1907 = fma(_1901, cbSceneParam._m0[90u].z, fma(_1900, cbSceneParam._m0[90u].y, _1899 * cbSceneParam._m0[90u].x));
    float _1910 = fma(_1901, cbSceneParam._m0[91u].z, fma(_1900, cbSceneParam._m0[91u].y, _1899 * cbSceneParam._m0[91u].x));
    float _1921 = _779 / cbSceneParam._m0[86u].x;
    float _1929 = (cbSceneParam._m0[88u].y * (1.0 - _708)) + cbSceneParam._m0[88u].z;
    float _4250 = isnan(0.0) ? _1929 : (isnan(_1929) ? 0.0 : max(_1929, 0.0));
    float _1931 = (isnan(1.0) ? _4250 : (isnan(_4250) ? 1.0 : min(_4250, 1.0))) * 5.0;
    float _1936 = (_905 * cbMtdParam._m0[11u].w) * dot(vec3(_815, _816, _817), vec3(1.0, 0.0, 0.0));
    vec4 _1946 = textureLod(sampler2D(g_RLRTexture, SS_ClampLinear), vec2(((_1936 * textureLod(sampler2D(g_RLRTexture, SS_ClampLinear), vec2((_1936 + _1921) * cbSceneParam._m0[86u].x, _780), _1931).w) + _1921) * cbSceneParam._m0[86u].x, _780), _1931);
    float _1962 = 1.0 - _1946.w;
    vec4 _1970 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_779, _780));
    float _1972 = _1970.w;
    float _1984 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1972);
    float _1985 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1972);
    float _1986 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1972);
    uint _1987 = _857 + 5u;
    uvec4 _1990 = floatBitsToUint(cbInstanceData._m0[_1987]);
    uint _1992 = _1990.x * 14u;
    uint _1993 = _1992 + 13u;
    float _1998 = _882 + (-1.0);
    float _2001 = (cbLight._m0[_1993].x * _1998) + 1.0;
    float _2002 = (cbLight._m0[_1993].y * _1998) + 1.0;
    uint _2003 = _1992 + 5u;
    float _2009 = isnan(1.0) ? _2002 : (isnan(_2002) ? 1.0 : min(_2002, 1.0));
    uint _2013 = _1992 + 4u;
    float _2023 = isnan(1.0) ? _2001 : (isnan(_2001) ? 1.0 : min(_2001, 1.0));
    uint _2027 = _1992 | 1u;
    float _2038 = dot(vec3(cbLight._m0[_1992].xyz), vec3(_815, _816, _817));
    float _2041 = dot(vec3(cbLight._m0[_2027].xyz), vec3(_815, _816, _817));
    float _4271 = isnan(0.0) ? _2038 : (isnan(_2038) ? 0.0 : max(_2038, 0.0));
    float _4282 = isnan(0.0) ? _2041 : (isnan(_2041) ? 0.0 : max(_2041, 0.0));
    float _2046 = (isnan(1.0) ? _4271 : (isnan(_4271) ? 1.0 : min(_4271, 1.0))) * 0.3183098733425140380859375;
    float _2048 = (isnan(1.0) ? _4282 : (isnan(_4282) ? 1.0 : min(_4282, 1.0))) * 0.3183098733425140380859375;
    float _2055 = ((cbLight._m0[_2003].x * _2009) * _2048) + (((cbLight._m0[_2013].x * _1984) * _2023) * _2046);
    float _2056 = ((_2009 * cbLight._m0[_2003].y) * _2048) + (((cbLight._m0[_2013].y * _1985) * _2023) * _2046);
    float _2057 = ((_2009 * cbLight._m0[_2003].z) * _2048) + (((cbLight._m0[_2013].z * _1986) * _2023) * _2046);
    uint _2059 = _1992 + 8u;
    float _2072 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1992].w)) * _708) * 0.949999988079071044921875);
    float _2073 = _2072 * _2072;
    float _2074 = cbLight._m0[_1992].x + _772;
    float _2075 = cbLight._m0[_1992].y + _773;
    float _2076 = cbLight._m0[_1992].z + _774;
    float _2080 = inversesqrt(dot(vec3(_2074, _2075, _2076), vec3(_2074, _2075, _2076)));
    float _2081 = _2080 * _2074;
    float _2082 = _2080 * _2075;
    float _2083 = _2080 * _2076;
    float _2084 = dot(vec3(_815, _816, _817), vec3(cbLight._m0[_1992].xyz));
    float _4293 = isnan(0.0) ? _2084 : (isnan(_2084) ? 0.0 : max(_2084, 0.0));
    float _2087 = isnan(1.0) ? _4293 : (isnan(_4293) ? 1.0 : min(_4293, 1.0));
    float _4304 = isnan(0.0) ? _883 : (isnan(_883) ? 0.0 : max(_883, 0.0));
    float _2088 = isnan(1.0) ? _4304 : (isnan(_4304) ? 1.0 : min(_4304, 1.0));
    float _2089 = dot(vec3(_815, _816, _817), vec3(_2081, _2082, _2083));
    float _4315 = isnan(0.0) ? _2089 : (isnan(_2089) ? 0.0 : max(_2089, 0.0));
    float _2092 = isnan(1.0) ? _4315 : (isnan(_4315) ? 1.0 : min(_4315, 1.0));
    float _2093 = dot(vec3(cbLight._m0[_1992].xyz), vec3(_2081, _2082, _2083));
    float _4326 = isnan(0.0) ? _2093 : (isnan(_2093) ? 0.0 : max(_2093, 0.0));
    float _2097 = _2073 * _2073;
    float _2101 = ((_2092 * _2092) * (_2097 + (-1.0))) + 1.0;
    float _2112 = (exp2(log2(1.0 - (isnan(1.0) ? _4326 : (isnan(_4326) ? 1.0 : min(_4326, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2113 = 1.0 - _2073;
    float _2124 = (0.5 / (((_2088 * ((_2087 * _2113) + _2073)) + 9.9999999392252902907785028219223e-09) + (((_2088 * _2113) + _2073) * _2087))) * _2087;
    float _4337 = isnan(0.0) ? _2124 : (isnan(_2124) ? 0.0 : max(_2124, 0.0));
    float _2126 = (isnan(1.0) ? _4337 : (isnan(_4337) ? 1.0 : min(_4337, 1.0))) * (_2097 / ((_2101 * _2101) * 3.141590118408203125));
    uint _2140 = _1992 + 9u;
    float _2151 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2027].w)) * _708) * 0.949999988079071044921875);
    float _2152 = _2151 * _2151;
    float _2153 = cbLight._m0[_2027].x + _772;
    float _2154 = cbLight._m0[_2027].y + _773;
    float _2155 = cbLight._m0[_2027].z + _774;
    float _2159 = inversesqrt(dot(vec3(_2153, _2154, _2155), vec3(_2153, _2154, _2155)));
    float _2160 = _2159 * _2153;
    float _2161 = _2159 * _2154;
    float _2162 = _2159 * _2155;
    float _2163 = dot(vec3(_815, _816, _817), vec3(cbLight._m0[_2027].xyz));
    float _4348 = isnan(0.0) ? _2163 : (isnan(_2163) ? 0.0 : max(_2163, 0.0));
    float _2166 = isnan(1.0) ? _4348 : (isnan(_4348) ? 1.0 : min(_4348, 1.0));
    float _2167 = dot(vec3(_815, _816, _817), vec3(_2160, _2161, _2162));
    float _4359 = isnan(0.0) ? _2167 : (isnan(_2167) ? 0.0 : max(_2167, 0.0));
    float _2170 = isnan(1.0) ? _4359 : (isnan(_4359) ? 1.0 : min(_4359, 1.0));
    float _2171 = dot(vec3(cbLight._m0[_2027].xyz), vec3(_2160, _2161, _2162));
    float _4370 = isnan(0.0) ? _2171 : (isnan(_2171) ? 0.0 : max(_2171, 0.0));
    float _2175 = _2152 * _2152;
    float _2179 = ((_2170 * _2170) * (_2175 + (-1.0))) + 1.0;
    float _2188 = (exp2(log2(1.0 - (isnan(1.0) ? _4370 : (isnan(_4370) ? 1.0 : min(_4370, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2189 = 1.0 - _2152;
    float _2199 = (0.5 / (((_2088 * ((_2166 * _2189) + _2152)) + 9.9999999392252902907785028219223e-09) + (((_2088 * _2189) + _2152) * _2166))) * _2166;
    float _4381 = isnan(0.0) ? _2199 : (isnan(_2199) ? 0.0 : max(_2199, 0.0));
    float _2201 = (isnan(1.0) ? _4381 : (isnan(_4381) ? 1.0 : min(_4381, 1.0))) * (_2175 / ((_2179 * _2179) * 3.141590118408203125));
    float _2211 = (((_2188 * cbLight._m0[_2140].x) * _2201) * _2009) + ((((cbLight._m0[_2059].x * _1984) * _2112) * _2126) * _2023);
    float _2212 = (((_2188 * cbLight._m0[_2140].y) * _2201) * _2009) + ((((cbLight._m0[_2059].y * _1985) * _2112) * _2126) * _2023);
    float _2213 = (((_2188 * cbLight._m0[_2140].z) * _2201) * _2009) + ((((cbLight._m0[_2059].z * _1986) * _2112) * _2126) * _2023);
    float _2327;
    float _2329;
    float _2331;
    float _2333;
    float _2335;
    float _2337;
    if (_1990.y == 0u)
    {
        float _2268 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2269 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2268;
        float _2270 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2268;
        float _2271 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2268;
        uvec4 _2283 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2284 = _2283.x;
        uint _2295 = uint((float(_2283.y) * floor(float(uint(cbSceneParam._m0[85u].y * _780) / _2284))) + floor(float(uint(cbSceneParam._m0[85u].x * _779) / _2284)));
        float _2305 = (log2(_2271 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2306 = isnan(0.0) ? _2305 : (isnan(_2305) ? 0.0 : max(_2305, 0.0));
        uint _2309 = uint(isnan(14.0) ? _2306 : (isnan(_2306) ? 14.0 : min(_2306, 14.0)));
        uvec4 _2314 = texelFetch(g_lightClusterGridBuffer, int(((_2309 << 2u) + (_2295 << 6u)) >> 2u));
        uint _2315 = _2314.x;
        uint _2316 = _2283.z;
        float _2461;
        float _2463;
        float _2465;
        float _2467;
        float _2469;
        float _2471;
        if (((((1u << ((_2316 >> 4u) & 15u)) + 4294967295u) & _2315) == 0u) || ((_2316 & 240u) == 0u))
        {
            _2461 = 0.0;
            _2463 = 0.0;
            _2465 = 0.0;
            _2467 = 0.0;
            _2469 = 0.0;
            _2471 = 0.0;
        }
        else
        {
            float _2462;
            float _2464;
            float _2466;
            float _2468;
            float _2470;
            float _2472;
            float _2701 = 0.0;
            float _2702 = 0.0;
            float _2703 = 0.0;
            float _2704 = 0.0;
            float _2705 = 0.0;
            float _2706 = 0.0;
            uint _2707 = 0u;
            uint _2716;
            bool _2717;
            for (;;)
            {
                _2716 = texelFetch(g_lightClassification, int((((_2309 << 5u) + (_2295 << 9u)) + (_2707 << 2u)) >> 2u)).x;
                _2717 = _2716 == 0u;
                float frontier_phi_52_pred;
                float frontier_phi_52_pred_1;
                float frontier_phi_52_pred_2;
                float frontier_phi_52_pred_3;
                float frontier_phi_52_pred_4;
                float frontier_phi_52_pred_5;
                if (_2717)
                {
                    frontier_phi_52_pred = _2703;
                    frontier_phi_52_pred_1 = _2706;
                    frontier_phi_52_pred_2 = _2705;
                    frontier_phi_52_pred_3 = _2704;
                    frontier_phi_52_pred_4 = _2702;
                    frontier_phi_52_pred_5 = _2701;
                }
                else
                {
                    float _2959;
                    float _2960;
                    float _2961;
                    float _2962;
                    float _2963;
                    float _2964;
                    uint _2965;
                    _2959 = _2701;
                    _2960 = _2702;
                    _2961 = _2703;
                    _2962 = _2704;
                    _2963 = _2705;
                    _2964 = _2706;
                    _2965 = _2716;
                    float _2864;
                    float _2865;
                    float _2866;
                    float _2867;
                    float _2868;
                    float _2869;
                    for (;;)
                    {
                        uint _2969 = uint(findLSB(_2965)) + (_2707 << 5u);
                        uint _2966 = (_2965 + 4294967295u) & _2965;
                        uint _2971 = _2969 * 48u;
                        vec4 _2985 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2971)).x, texelFetch(g_PointLightRenderingBuffer, int(_2971 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2971 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2971 + 3u)).x));
                        uint _2991 = (_2969 * 48u) + 4u;
                        vec4 _3004 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2991)).x, texelFetch(g_PointLightRenderingBuffer, int(_2991 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2991 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2991 + 3u)).x));
                        uint _3010 = (_2969 * 48u) + 8u;
                        vec3 _3021 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3010)).x, texelFetch(g_PointLightRenderingBuffer, int(_3010 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3010 + 2u)).x));
                        float _3025 = _2985.x - _2269;
                        float _3026 = _2985.y - _2270;
                        float _3027 = _2985.z - _2271;
                        float _3028 = dot(vec3(_3025, _3026, _3027), vec3(_3025, _3026, _3027));
                        float _3031 = inversesqrt(_3028);
                        float _3032 = _3031 * _3025;
                        float _3033 = _3031 * _3026;
                        float _3034 = _3031 * _3027;
                        float _3035 = dot(vec3(_838, _841, _844), vec3(_3032, _3033, _3034));
                        float _3040 = 1.0 - (_3028 * _2985.w);
                        float _4402 = isnan(0.0) ? _3040 : (isnan(_3040) ? 0.0 : max(_3040, 0.0));
                        float _3041 = isnan(1.0) ? _4402 : (isnan(_4402) ? 1.0 : min(_4402, 1.0));
                        float _3042 = sqrt(_3028) * _3004.w;
                        float _3045 = 1.39999997615814208984375 / (_3042 + 1.39999997615814208984375);
                        float _3046 = _3045 * _3045;
                        float _3049 = ((1.0 - _3046) * _3035) + _3046;
                        float _3052 = _3042 * _3042;
                        float _3056 = ((isnan(0.0) ? _3049 : (isnan(_3049) ? 0.0 : max(_3049, 0.0))) * _3041) / ((_3052 * 0.699999988079071044921875) + 1.0);
                        float _3060 = (-0.0) - _2269;
                        float _3061 = (-0.0) - _2270;
                        float _3062 = (-0.0) - _2271;
                        float _3066 = inversesqrt(dot(vec3(_3060, _3061, _3062), vec3(_3060, _3061, _3062)));
                        float _3067 = _3066 * _3060;
                        float _3068 = _3066 * _3061;
                        float _3069 = _3066 * _3062;
                        float _3077 = exp2(log2(1.0 / ((_3052 * 3.5) + 5.0)) * 0.25);
                        float _3078 = 1.0 - _906;
                        float _3085 = sqrt(1.0 - ((1.0 - (_3078 * _3078)) * (1.0 - (_3077 * _3077))));
                        float _3086 = _3085 * _3085;
                        float _3087 = _3086 * _3086;
                        float _3088 = _3067 + _3032;
                        float _3089 = _3068 + _3033;
                        float _3090 = _3069 + _3034;
                        float _3094 = inversesqrt(dot(vec3(_3088, _3089, _3090), vec3(_3088, _3089, _3090)));
                        float _3098 = dot(vec3(_838, _841, _844), vec3(_3067, _3068, _3069));
                        float _4418 = isnan(0.0) ? _3098 : (isnan(_3098) ? 0.0 : max(_3098, 0.0));
                        float _3101 = isnan(1.0) ? _4418 : (isnan(_4418) ? 1.0 : min(_4418, 1.0));
                        float _3102 = dot(vec3(_838, _841, _844), vec3(_3094 * _3088, _3094 * _3089, _3094 * _3090));
                        float _4429 = isnan(0.0) ? _3102 : (isnan(_3102) ? 0.0 : max(_3102, 0.0));
                        float _3105 = isnan(1.0) ? _4429 : (isnan(_4429) ? 1.0 : min(_4429, 1.0));
                        float _3109 = ((_3105 * _3105) * (_3087 + (-1.0))) + 1.0;
                        float _3110 = _3045 * _3086;
                        float _3111 = _3110 * _3110;
                        float _3114 = ((1.0 - _3111) * _3035) + _3111;
                        float _4440 = isnan(0.0) ? _3114 : (isnan(_3114) ? 0.0 : max(_3114, 0.0));
                        float _3115 = isnan(1.0) ? _4440 : (isnan(_4440) ? 1.0 : min(_4440, 1.0));
                        float _3116 = 1.0 - _3086;
                        float _3126 = (0.5 / (((_3115 * ((_3101 * _3116) + _3086)) + 9.9999999392252902907785028219223e-09) + (((_3115 * _3116) + _3086) * _3101))) * _3115;
                        float _4451 = isnan(0.0) ? _3126 : (isnan(_3126) ? 0.0 : max(_3126, 0.0));
                        float _3137 = (((_3087 * 3.1415927410125732421875) * (isnan(1.0) ? _4451 : (isnan(_4451) ? 1.0 : min(_4451, 1.0)))) / ((_3109 * _3109) * ((_3052 * 2.1991131305694580078125) + 3.141590118408203125))) * _3041;
                        _2867 = (_3056 * _3004.x) + _2962;
                        _2868 = (_3056 * _3004.y) + _2963;
                        _2869 = (_3056 * _3004.z) + _2964;
                        _2864 = (_3137 * _3021.x) + _2959;
                        _2865 = (_3137 * _3021.y) + _2960;
                        _2866 = (_3137 * _3021.z) + _2961;
                        if (_2966 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2959 = _2864;
                            _2960 = _2865;
                            _2961 = _2866;
                            _2962 = _2867;
                            _2963 = _2868;
                            _2964 = _2869;
                            _2965 = _2966;
                        }
                    }
                    frontier_phi_52_pred = _2866;
                    frontier_phi_52_pred_1 = _2869;
                    frontier_phi_52_pred_2 = _2868;
                    frontier_phi_52_pred_3 = _2867;
                    frontier_phi_52_pred_4 = _2865;
                    frontier_phi_52_pred_5 = _2864;
                }
                _2466 = frontier_phi_52_pred;
                _2472 = frontier_phi_52_pred_1;
                _2470 = frontier_phi_52_pred_2;
                _2468 = frontier_phi_52_pred_3;
                _2464 = frontier_phi_52_pred_4;
                _2462 = frontier_phi_52_pred_5;
                uint _2708 = _2707 + 1u;
                if (_2708 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2701 = _2462;
                    _2702 = _2464;
                    _2703 = _2466;
                    _2704 = _2468;
                    _2705 = _2470;
                    _2706 = _2472;
                    _2707 = _2708;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2461 = _2462;
            _2463 = _2464;
            _2465 = _2466;
            _2467 = _2468;
            _2469 = _2470;
            _2471 = _2472;
        }
        uvec4 _2475 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2476 = _2475.z;
        uint _2478 = (_2476 >> 8u) & 15u;
        float _2669;
        float _2671;
        float _2673;
        float _2675;
        float _2677;
        float _2679;
        if (((4294967295u << _2478) & _2315) == 0u)
        {
            _2669 = _2461;
            _2671 = _2463;
            _2673 = _2465;
            _2675 = _2467;
            _2677 = _2469;
            _2679 = _2471;
        }
        else
        {
            float _2694 = inversesqrt(dot(vec3(_2269, _2270, _2271), vec3(_2269, _2270, _2271)));
            float _2695 = _2694 * _2269;
            float _2696 = _2694 * _2270;
            float _2697 = _2694 * _2271;
            float frontier_phi_43_44_ladder;
            float frontier_phi_43_44_ladder_1;
            float frontier_phi_43_44_ladder_2;
            float frontier_phi_43_44_ladder_3;
            float frontier_phi_43_44_ladder_4;
            float frontier_phi_43_44_ladder_5;
            if (_2478 < ((_2476 >> 12u) & 15u))
            {
                float _2670;
                float _2672;
                float _2674;
                float _2676;
                float _2678;
                float _2680;
                float _2942 = _2461;
                float _2943 = _2463;
                float _2944 = _2465;
                float _2945 = _2467;
                float _2946 = _2469;
                float _2947 = _2471;
                uint _2948 = _2478;
                uint _2957;
                bool _2958;
                for (;;)
                {
                    _2957 = texelFetch(g_lightClassification, int((((_2309 << 5u) + (_2295 << 9u)) + (_2948 << 2u)) >> 2u)).x;
                    _2958 = _2957 == 0u;
                    float frontier_phi_63_pred;
                    float frontier_phi_63_pred_1;
                    float frontier_phi_63_pred_2;
                    float frontier_phi_63_pred_3;
                    float frontier_phi_63_pred_4;
                    float frontier_phi_63_pred_5;
                    if (_2958)
                    {
                        frontier_phi_63_pred = _2947;
                        frontier_phi_63_pred_1 = _2946;
                        frontier_phi_63_pred_2 = _2945;
                        frontier_phi_63_pred_3 = _2944;
                        frontier_phi_63_pred_4 = _2943;
                        frontier_phi_63_pred_5 = _2942;
                    }
                    else
                    {
                        float _3201;
                        float _3202;
                        float _3203;
                        float _3204;
                        float _3205;
                        float _3206;
                        float _3494;
                        float _3495;
                        float _3496;
                        float _3497;
                        float _3498;
                        float _3499;
                        float _3214 = _2942;
                        float _3215 = _2943;
                        float _3216 = _2944;
                        float _3217 = _2945;
                        float _3218 = _2946;
                        float _3219 = _2947;
                        uint _3220 = _2957;
                        uint _3221;
                        vec4 _3246;
                        float _3247;
                        vec4 _3262;
                        vec3 _3274;
                        vec4 _3289;
                        vec4 _3304;
                        float _3350;
                        bool _3351;
                        for (;;)
                        {
                            uint _3231 = ((_2948 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3220));
                            _3221 = (_3220 + 4294967295u) & _3220;
                            uint _3233 = _3231 * 40u;
                            _3246 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3233)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3233 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3233 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3233 + 3u)).x));
                            _3247 = _3246.w;
                            uint _3249 = (_3231 * 40u) + 4u;
                            _3262 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3249)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3249 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3249 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3249 + 3u)).x));
                            uint _3264 = (_3231 * 40u) + 8u;
                            _3274 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3264)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3264 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3264 + 2u)).x));
                            uint _3276 = (_3231 * 40u) + 16u;
                            _3289 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3276)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3276 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3276 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3276 + 3u)).x));
                            uint _3291 = (_3231 * 40u) + 20u;
                            _3304 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3291)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3291 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3291 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3291 + 3u)).x));
                            uint _3306 = (_3231 * 40u) + 24u;
                            vec4 _3319 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3306)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3306 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3306 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3306 + 3u)).x));
                            uint _3325 = (_3231 * 40u) + 28u;
                            vec4 _3338 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3325)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3325 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3325 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3325 + 3u)).x));
                            _3350 = fma(_2271, _3338.z, fma(_2270, _3338.y, _3338.x * _2269)) + _3338.w;
                            _3351 = !((fma(_2271, _3319.z, fma(_2270, _3319.y, _3319.x * _2269)) + _3319.w) <= 0.0);
                            float frontier_phi_69_pred;
                            float frontier_phi_69_pred_1;
                            float frontier_phi_69_pred_2;
                            float frontier_phi_69_pred_3;
                            float frontier_phi_69_pred_4;
                            float frontier_phi_69_pred_5;
                            if (_3351)
                            {
                                float _3378 = _3246.x - _2269;
                                float _3379 = _3246.y - _2270;
                                float _3380 = _3246.z - _2271;
                                float _3381 = dot(vec3(_3378, _3379, _3380), vec3(_3378, _3379, _3380));
                                float _3384 = inversesqrt(_3381);
                                float _3385 = _3384 * _3378;
                                float _3386 = _3384 * _3379;
                                float _3387 = _3384 * _3380;
                                float _3391 = 1.0 - (_3381 / (_3247 * _3247));
                                float _4462 = isnan(0.0) ? _3391 : (isnan(_3391) ? 0.0 : max(_3391, 0.0));
                                float _3392 = isnan(1.0) ? _4462 : (isnan(_4462) ? 1.0 : min(_4462, 1.0));
                                float _3396 = sqrt(_3381) * _3262.w;
                                float _3398 = 1.39999997615814208984375 / (_3396 + 1.39999997615814208984375);
                                float _3399 = _3398 * _3398;
                                float _3402 = ((1.0 - _3399) * dot(vec3(_3385, _3386, _3387), vec3(_838, _841, _844))) + _3399;
                                float _3405 = _3396 * _3396;
                                float _3409 = (fma(_2271, _3289.z, fma(_2270, _3289.y, _3289.x * _2269)) + _3289.w) / _3350;
                                float _3410 = (fma(_2271, _3304.z, fma(_2270, _3304.y, _3304.x * _2269)) + _3304.w) / _3350;
                                float _3414 = 1.0 - dot(vec2(_3409, _3410), vec2(_3409, _3410));
                                float _4478 = isnan(0.0) ? _3414 : (isnan(_3414) ? 0.0 : max(_3414, 0.0));
                                float _3415 = isnan(1.0) ? _4478 : (isnan(_4478) ? 1.0 : min(_4478, 1.0));
                                float _3416 = _3415 * (((isnan(0.0) ? _3402 : (isnan(_3402) ? 0.0 : max(_3402, 0.0))) * _3392) / ((_3405 * 0.699999988079071044921875) + 1.0));
                                float _3428 = exp2(log2(1.0 / ((_3405 * 3.5) + 5.0)) * 0.25);
                                float _3429 = 1.0 - _906;
                                float _3436 = sqrt(1.0 - ((1.0 - (_3429 * _3429)) * (1.0 - (_3428 * _3428))));
                                float _3437 = _3436 * _3436;
                                float _3438 = _3437 * _3437;
                                float _3439 = _3385 - _2695;
                                float _3440 = _3386 - _2696;
                                float _3441 = _3387 - _2697;
                                float _3445 = inversesqrt(dot(vec3(_3439, _3440, _3441), vec3(_3439, _3440, _3441)));
                                float _3449 = dot(vec3(_838, _841, _844), vec3((-0.0) - _2695, (-0.0) - _2696, (-0.0) - _2697));
                                float _4489 = isnan(0.0) ? _3449 : (isnan(_3449) ? 0.0 : max(_3449, 0.0));
                                float _3452 = isnan(1.0) ? _4489 : (isnan(_4489) ? 1.0 : min(_4489, 1.0));
                                float _3453 = dot(vec3(_838, _841, _844), vec3(_3445 * _3439, _3445 * _3440, _3445 * _3441));
                                float _4500 = isnan(0.0) ? _3453 : (isnan(_3453) ? 0.0 : max(_3453, 0.0));
                                float _3456 = isnan(1.0) ? _4500 : (isnan(_4500) ? 1.0 : min(_4500, 1.0));
                                float _3460 = ((_3456 * _3456) * (_3438 + (-1.0))) + 1.0;
                                float _3461 = _3398 * _3437;
                                float _3462 = _3461 * _3461;
                                float _3468 = ((1.0 - _3462) * dot(vec3(_838, _841, _844), vec3(_3385, _3386, _3387))) + _3462;
                                float _4511 = isnan(0.0) ? _3468 : (isnan(_3468) ? 0.0 : max(_3468, 0.0));
                                float _3469 = isnan(1.0) ? _4511 : (isnan(_4511) ? 1.0 : min(_4511, 1.0));
                                float _3470 = 1.0 - _3437;
                                float _3480 = (0.5 / (((_3469 * ((_3452 * _3470) + _3437)) + 9.9999999392252902907785028219223e-09) + (((_3469 * _3470) + _3437) * _3452))) * _3469;
                                float _4522 = isnan(0.0) ? _3480 : (isnan(_3480) ? 0.0 : max(_3480, 0.0));
                                float _3490 = (_3415 * _3392) * (((_3438 * 3.1415927410125732421875) * (isnan(1.0) ? _4522 : (isnan(_4522) ? 1.0 : min(_4522, 1.0)))) / ((_3460 * _3460) * ((_3405 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_69_pred = _3490 * _3274.z;
                                frontier_phi_69_pred_1 = _3416 * _3262.z;
                                frontier_phi_69_pred_2 = _3416 * _3262.y;
                                frontier_phi_69_pred_3 = _3416 * _3262.x;
                                frontier_phi_69_pred_4 = _3490 * _3274.y;
                                frontier_phi_69_pred_5 = _3490 * _3274.x;
                            }
                            else
                            {
                                frontier_phi_69_pred = 0.0;
                                frontier_phi_69_pred_1 = 0.0;
                                frontier_phi_69_pred_2 = 0.0;
                                frontier_phi_69_pred_3 = 0.0;
                                frontier_phi_69_pred_4 = 0.0;
                                frontier_phi_69_pred_5 = 0.0;
                            }
                            _3496 = frontier_phi_69_pred;
                            _3499 = frontier_phi_69_pred_1;
                            _3498 = frontier_phi_69_pred_2;
                            _3497 = frontier_phi_69_pred_3;
                            _3495 = frontier_phi_69_pred_4;
                            _3494 = frontier_phi_69_pred_5;
                            _3204 = _3497 + _3217;
                            _3205 = _3498 + _3218;
                            _3206 = _3499 + _3219;
                            _3201 = _3494 + _3214;
                            _3202 = _3495 + _3215;
                            _3203 = _3496 + _3216;
                            if (_3221 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3214 = _3201;
                                _3215 = _3202;
                                _3216 = _3203;
                                _3217 = _3204;
                                _3218 = _3205;
                                _3219 = _3206;
                                _3220 = _3221;
                                continue;
                            }
                        }
                        frontier_phi_63_pred = _3206;
                        frontier_phi_63_pred_1 = _3205;
                        frontier_phi_63_pred_2 = _3204;
                        frontier_phi_63_pred_3 = _3203;
                        frontier_phi_63_pred_4 = _3202;
                        frontier_phi_63_pred_5 = _3201;
                    }
                    _2680 = frontier_phi_63_pred;
                    _2678 = frontier_phi_63_pred_1;
                    _2676 = frontier_phi_63_pred_2;
                    _2674 = frontier_phi_63_pred_3;
                    _2672 = frontier_phi_63_pred_4;
                    _2670 = frontier_phi_63_pred_5;
                    uint _2949 = _2948 + 1u;
                    if (_2949 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2942 = _2670;
                        _2943 = _2672;
                        _2944 = _2674;
                        _2945 = _2676;
                        _2946 = _2678;
                        _2947 = _2680;
                        _2948 = _2949;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_43_44_ladder = _2680;
                frontier_phi_43_44_ladder_1 = _2670;
                frontier_phi_43_44_ladder_2 = _2678;
                frontier_phi_43_44_ladder_3 = _2676;
                frontier_phi_43_44_ladder_4 = _2674;
                frontier_phi_43_44_ladder_5 = _2672;
            }
            else
            {
                frontier_phi_43_44_ladder = _2471;
                frontier_phi_43_44_ladder_1 = _2461;
                frontier_phi_43_44_ladder_2 = _2469;
                frontier_phi_43_44_ladder_3 = _2467;
                frontier_phi_43_44_ladder_4 = _2465;
                frontier_phi_43_44_ladder_5 = _2463;
            }
            _2669 = frontier_phi_43_44_ladder_1;
            _2671 = frontier_phi_43_44_ladder_5;
            _2673 = frontier_phi_43_44_ladder_4;
            _2675 = frontier_phi_43_44_ladder_3;
            _2677 = frontier_phi_43_44_ladder_2;
            _2679 = frontier_phi_43_44_ladder;
        }
        float _2684 = isnan(1.0) ? _882 : (isnan(_882) ? 1.0 : min(_882, 1.0));
        _2327 = (_2684 * _2675) + _2055;
        _2329 = (_2684 * _2677) + _2056;
        _2331 = (_2684 * _2679) + _2057;
        _2333 = ((_2669 * 0.039999999105930328369140625) * _2684) + _2211;
        _2335 = ((_2671 * 0.039999999105930328369140625) * _2684) + _2212;
        _2337 = ((_2673 * 0.039999999105930328369140625) * _2684) + _2213;
    }
    else
    {
        _2327 = _2055;
        _2329 = _2056;
        _2331 = _2057;
        _2333 = _2211;
        _2335 = _2212;
        _2337 = _2213;
    }
    float _2357 = cbSceneParam._m0[86u].x - (cbSceneParam._m0[85u].z * 0.5);
    float _2358 = cbSceneParam._m0[86u].y - (cbSceneParam._m0[85u].w * 0.5);
    float _2359 = cbSceneParam._m0[86u].x * ((_779 / cbSceneParam._m0[86u].x) + ((_905 * cbMtdParam._m0[11u].y) * dot(vec3(_815, _816, _817), vec3(_216, _217, _218))));
    float _2360 = isnan(_2357) ? _2359 : (isnan(_2359) ? _2357 : min(_2359, _2357));
    float _2361 = isnan(_2358) ? _780 : (isnan(_780) ? _2358 : min(_780, _2358));
    vec4 _2363 = textureLod(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_2360, _2361), 0.0);
    float _2365 = _2363.x;
    bool _2385 = ((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _2365)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2365))) > _716;
    float _2386 = _2385 ? _2360 : _779;
    float _2387 = _2385 ? _2361 : _780;
    vec4 _2389 = texture(sampler2D(g_RefractionTexture, SS_ClampLinear), vec2(_2386, _2387));
    vec4 _2394 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_2386, _2387));
    float _2396 = _2394.x;
    bool _2401 = floatBitsToUint(cbSceneParam._m0[88u]).x != 0u;
    float _2410 = (-0.0) - cbSceneParam._m0[2u].z;
    float _2416 = (_2401 ? (_2410 / (cbSceneParam._m0[2u].x - _2396)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2396))) - _716;
    float _2418 = cbMtdParam._m0[25u].y + cbMtdParam._m0[23u].w;
    float _2419 = cbMtdParam._m0[25u].z + cbMtdParam._m0[24u].x;
    float _2420 = cbMtdParam._m0[25u].w + cbMtdParam._m0[24u].y;
    bool _2426 = floatBitsToUint(cbSceneParam._m0[69u]).z != 0u;
    float _2430 = (isnan(_2416) ? 0.0 : (isnan(0.0) ? _2416 : max(0.0, _2416))) * (-1.44269502162933349609375);
    float _4553 = isnan(0.0) ? _868 : (isnan(_868) ? 0.0 : max(_868, 0.0));
    float _4564 = isnan(0.0) ? _869 : (isnan(_869) ? 0.0 : max(_869, 0.0));
    float _4575 = isnan(0.0) ? _870 : (isnan(_870) ? 0.0 : max(_870, 0.0));
    float _2564;
    float _2565;
    float _2566;
    if ((1.0 - _678) > 0.00999999977648258209228515625)
    {
        vec4 _2483 = textureLod(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_2386, _2387), 0.0);
        float _2485 = _2483.x;
        float _2491 = (_2401 ? (_2410 / (cbSceneParam._m0[2u].x - _2485)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2485))) - _716;
        uint _2497 = floatBitsToUint(cbInstanceData._m0[_1987]).x * 14u;
        uint _2503 = _2497 + 4u;
        float _2512 = dot(vec3(cbLight._m0[_2497].xyz), vec3(_237, _238, _239));
        float _2520 = dot(vec3((-0.0) - _772, (-0.0) - _773, (-0.0) - _774), vec3((-0.0) - _237, (-0.0) - _238, (-0.0) - _239));
        float _2525 = ((isnan(0.0) ? _2520 : (isnan(_2520) ? 0.0 : max(_2520, 0.0))) / (isnan(0.001000000047497451305389404296875) ? _2512 : (isnan(_2512) ? 0.001000000047497451305389404296875 : max(_2512, 0.001000000047497451305389404296875)))) + 1.0;
        float _2527 = (-0.0) - ((isnan(_2491) ? 0.0 : (isnan(0.0) ? _2491 : max(0.0, _2491))) * _2525);
        _2564 = _2426 ? 0.0 : ((((cbMtdParam._m0[23u].w * 0.079577468335628509521484375) * cbLight._m0[_2503].x) / ((_2525 * _2418) + 9.9999999747524270787835121154785e-07)) * (1.0 - exp2((_2418 * 1.44269502162933349609375) * _2527)));
        _2565 = _2426 ? 0.0 : ((((cbMtdParam._m0[24u].x * 0.079577468335628509521484375) * cbLight._m0[_2503].y) / ((_2525 * _2419) + 9.9999999747524270787835121154785e-07)) * (1.0 - exp2((_2419 * 1.44269502162933349609375) * _2527)));
        _2566 = _2426 ? 0.0 : ((((cbMtdParam._m0[24u].y * 0.079577468335628509521484375) * cbLight._m0[_2503].z) / ((_2525 * _2420) + 9.9999999747524270787835121154785e-07)) * (1.0 - exp2((_2420 * 1.44269502162933349609375) * _2527)));
    }
    else
    {
        _2564 = 0.0;
        _2565 = 0.0;
        _2566 = 0.0;
    }
    float _2583 = 0.959999978542327880859375 - (exp2(log2(1.0 - _897) * 5.0) * 0.959999978542327880859375);
    float _2584 = (_2564 + ((exp2(_2430 * (_2426 ? 0.0 : _2418)) * _2389.x) * cbSceneParam._m0[72u].w)) * _2583;
    float _2585 = (_2565 + ((exp2(_2430 * (_2426 ? 0.0 : _2419)) * _2389.y) * cbSceneParam._m0[72u].w)) * _2583;
    float _2586 = (_2566 + ((exp2(_2430 * (_2426 ? 0.0 : _2420)) * _2389.z) * cbSceneParam._m0[72u].w)) * _2583;
    float _2608 = _779 / cbSceneParam._m0[86u].x;
    float _2609 = _780 / cbSceneParam._m0[86u].y;
    vec4 _2623 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2608, _2609, (log2((isnan(cbSceneParam._m0[77u].w) ? _716 : (isnan(_716) ? cbSceneParam._m0[77u].w : min(_716, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2625 = _2623.x;
    float _2626 = _2623.y;
    float _2627 = _2623.z;
    float _2628 = _2623.w;
    float _2757;
    float _2759;
    float _2761;
    float _2763;
    if (_716 > cbSceneParam._m0[78u].w)
    {
        float _2722 = isnan(_716) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _716 : min(cbSceneParam._m0[80u].w, _716));
        float _2723 = _2722 / _716;
        float _2734 = _2723 * _765;
        float _2735 = _766 * _2723;
        float _2736 = (-0.0) - _2735;
        float _2737 = _2723 * _767;
        float _2739 = (cbSceneParam._m0[77u].w * _2736) / _2722;
        float _2740 = _2739 + cbSceneParam._m0[79u].w;
        float _2741 = cbSceneParam._m0[79u].w - _2735;
        float _2747 = sqrt(((_2734 * _2734) + (_2735 * _2735)) + (_2737 * _2737));
        float _2750 = (1.0 - (cbSceneParam._m0[77u].w / _2722)) * _2747;
        float _2755 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2756 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3142;
        if (abs((_2736 - _2739) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3142 = ((((_2740 > 0.0) ? exp2(_2755 * _2740) : (2.0 - exp2(_2756 * _2740))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2750;
        }
        else
        {
            float _2889 = 1.0 / cbSceneParam._m0[80u].x;
            float _2890 = isnan(_2741) ? _2740 : (isnan(_2740) ? _2741 : max(_2740, _2741));
            float _2891 = isnan(_2741) ? _2740 : (isnan(_2740) ? _2741 : min(_2740, _2741));
            float _2900 = isnan(0.0) ? _2890 : (isnan(_2890) ? 0.0 : min(_2890, 0.0));
            float _2901 = isnan(0.0) ? _2891 : (isnan(_2891) ? 0.0 : min(_2891, 0.0));
            _3142 = ((abs(_2747 / _2736) * cbSceneParam._m0[80u].y) * ((((_2900 - _2901) * 2.0) - ((exp2(_2755 * (isnan(0.0) ? _2890 : (isnan(_2890) ? 0.0 : max(_2890, 0.0)))) - exp2(_2755 * (isnan(0.0) ? _2891 : (isnan(_2891) ? 0.0 : max(_2891, 0.0))))) * _2889)) - ((exp2(_2756 * _2900) - exp2(_2756 * _2901)) * _2889))) + (_2750 * cbSceneParam._m0[80u].z);
        }
        vec4 _3144 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2608, _2609, 1.0), 0.0);
        float _3153 = exp2((_3142 * (-1.44269502162933349609375)) * (1.0 - _3144.w));
        float _3154 = log2(_3153);
        float _3170 = log2(_2628);
        _2757 = (exp2(_3170 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3154 * cbSceneParam._m0[78u].x)) * _3144.x) / cbSceneParam._m0[78u].x)) + _2625;
        _2759 = (exp2(_3170 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3154 * cbSceneParam._m0[78u].y)) * _3144.y) / cbSceneParam._m0[78u].y)) + _2626;
        _2761 = (exp2(_3170 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3154 * cbSceneParam._m0[78u].z)) * _3144.z) / cbSceneParam._m0[78u].z)) + _2627;
        _2763 = _3153 * _2628;
    }
    else
    {
        _2757 = _2625;
        _2759 = _2626;
        _2761 = _2627;
        _2763 = _2628;
    }
    bool _2775 = roundEven(cbMatDynParam._m0[0u].y) == 3.0;
    float _2776 = log2(_2763);
    float _2783 = exp2(_2776 * cbSceneParam._m0[78u].x) * ((_2584 + (((((_1898 * _1946.x) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _1904 : (isnan(_1904) ? 0.0 : max(_1904, 0.0))) * _1693) * _1962)) + _2333) * cbPerFrame._m0[3u].x)) + ((((isnan(1.0) ? _4553 : (isnan(_4553) ? 1.0 : min(_4553, 1.0))) * (_2327 + ((isnan(0.0) ? _1614 : (isnan(_1614) ? 0.0 : max(_1614, 0.0))) * _882))) - _2584) * _678));
    float _2784 = exp2(_2776 * cbSceneParam._m0[78u].y) * ((_2585 + (((((_1898 * _1946.y) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _1907 : (isnan(_1907) ? 0.0 : max(_1907, 0.0))) * _1693) * _1962)) + _2335) * cbPerFrame._m0[3u].x)) + ((((isnan(1.0) ? _4564 : (isnan(_4564) ? 1.0 : min(_4564, 1.0))) * (_2329 + ((isnan(0.0) ? _1617 : (isnan(_1617) ? 0.0 : max(_1617, 0.0))) * _882))) - _2585) * _678));
    float _2785 = exp2(_2776 * cbSceneParam._m0[78u].z) * ((_2586 + (((((_1898 * _1946.z) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _1910 : (isnan(_1910) ? 0.0 : max(_1910, 0.0))) * _1693) * _1962)) + _2337) * cbPerFrame._m0[3u].x)) + ((((isnan(1.0) ? _4575 : (isnan(_4575) ? 1.0 : min(_4575, 1.0))) * (_2331 + ((isnan(0.0) ? _1620 : (isnan(_1620) ? 0.0 : max(_1620, 0.0))) * _882))) - _2586) * _678));
    vec4 _2793 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_779, _780));
    float _2795 = _2793.x;
    float _2816 = (((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _2795)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2795))) - _716) * 3.0;
    float _4641 = isnan(0.0) ? _2816 : (isnan(_2816) ? 0.0 : max(_2816, 0.0));
    float _2818 = (cbInstanceData._m0[_857 + 6u].w * (isnan(1.0) ? _3793 : (isnan(_3793) ? 1.0 : min(_3793, 1.0)))) * (isnan(1.0) ? _4641 : (isnan(_4641) ? 1.0 : min(_4641, 1.0)));
    float _2827 = (roundEven(cbMatDynParam._m0[0u].y) != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2827 * (_2775 ? _2783 : (_2783 + (cbSceneParam._m0[72u].w * _2757)));
    SV_Target.y = _2827 * (_2775 ? _2784 : (_2784 + (cbSceneParam._m0[72u].w * _2759)));
    SV_Target.z = _2827 * (_2775 ? _2785 : (_2785 + (cbSceneParam._m0[72u].w * _2761)));
    SV_Target.w = _2818;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2818;
}


