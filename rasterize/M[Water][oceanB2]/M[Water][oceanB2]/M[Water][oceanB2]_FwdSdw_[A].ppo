#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[28];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 44) uniform texture2D g_RLRTexture;
layout(set = 0, binding = 55) uniform texture2D g_RefractionTexture;
layout(set = 0, binding = 57) uniform texture2D g_WaterSimulationNormalTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 56) uniform texture2D g_DepthTexture;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Water_oceanB2_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_Water_oceanB2_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_Water_oceanB2_snp_0_Texture2D_2;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 7) uniform sampler SS_ClampPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 6) in vec3 TEXCOORD_8;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1305;
float _3977;
float _3978;
float _3979;
float _3980;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _214 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _215 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _216 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _221 = inversesqrt(dot(vec3(_214, _215, _216), vec3(_214, _215, _216)));
    float _222 = _221 * _214;
    float _223 = _221 * _215;
    float _224 = _221 * _216;
    float _228 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _229 = _228 * NORMAL.x;
    float _230 = _228 * NORMAL.y;
    float _231 = _228 * NORMAL.z;
    float _235 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _243;
    float _244;
    float _245;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _243 = (-0.0) - _229;
        _244 = (-0.0) - _230;
        _245 = (-0.0) - _231;
    }
    else
    {
        _243 = _229;
        _244 = _230;
        _245 = _231;
    }
    float _289 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _299 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _289);
    float _300 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _289);
    float _301 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _289);
    float _318 = cbMtdParam._m0[11u].z * cbPerFrame._m0[22u].x;
    vec4 _335 = texture(sampler2D(M_Water_oceanB2_snp_0_Texture2D_2, SS_BumpMap), vec2((((_318 * cbMtdParam._m0[20u].w) + TEXCOORD.x) * cbTextureTilingScale._m0[2u].x) + cbTextureTilingScale._m0[2u].z, (((_318 * cbMtdParam._m0[21u].x) + TEXCOORD.y) * cbTextureTilingScale._m0[2u].y) + cbTextureTilingScale._m0[2u].w));
    float _338 = _335.x;
    float _339 = _335.y;
    float _359 = cbMtdParam._m0[13u].y - cbMtdParam._m0[13u].x;
    float _361 = (sqrt(((_299 * _299) + (_300 * _300)) + (_301 * _301)) - cbMtdParam._m0[13u].x) / (isnan(0.0) ? _359 : (isnan(_359) ? 0.0 : max(_359, 0.0)));
    float _368 = (cbMtdParam._m0[13u].w + _361) * cbMtdParam._m0[15u].y;
    float _3994 = isnan(0.0) ? _368 : (isnan(_368) ? 0.0 : max(_368, 0.0));
    vec4 _382 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(cbSceneParam._m0[85u].z * gl_FragCoord.x, cbSceneParam._m0[85u].w * gl_FragCoord.y));
    float _384 = _382.x;
    bool _391 = floatBitsToUint(cbSceneParam._m0[88u]).x != 0u;
    float _407 = ((_391 ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _384)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _384))) - POSITION_1.w) / (((isnan(1.0) ? _3994 : (isnan(_3994) ? 1.0 : min(_3994, 1.0))) * (cbMtdParam._m0[12u].w - cbMtdParam._m0[12u].y)) + cbMtdParam._m0[12u].y);
    float _4005 = isnan(0.0) ? _407 : (isnan(_407) ? 0.0 : max(_407, 0.0));
    float _408 = isnan(1.0) ? _4005 : (isnan(_4005) ? 1.0 : min(_4005, 1.0));
    float _414 = 1.0 - (isnan(cbMtdParam._m0[16u].z) ? _408 : (isnan(_408) ? cbMtdParam._m0[16u].z : max(_408, cbMtdParam._m0[16u].z)));
    float _4021 = isnan(0.0) ? _361 : (isnan(_361) ? 0.0 : max(_361, 0.0));
    float _415 = isnan(1.0) ? _4021 : (isnan(_4021) ? 1.0 : min(_4021, 1.0));
    float _416 = _335.z - _415;
    float _4032 = isnan(0.0) ? _416 : (isnan(_416) ? 0.0 : max(_416, 0.0));
    float _417 = isnan(1.0) ? _4032 : (isnan(_4032) ? 1.0 : min(_4032, 1.0));
    float _418 = _417 * 0.004999999888241291046142578125;
    float _420 = _417 * (-0.004999999888241291046142578125);
    vec4 _453 = texture(sampler2D(M_Water_oceanB2_snp_0_Texture2D_0, SS_BumpMap), vec2(((((cbMtdParam._m0[18u].y * _318) + _418) + (cbMtdParam._m0[19u].w * TEXCOORD.x)) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((((cbMtdParam._m0[18u].z * _318) + _420) + (cbMtdParam._m0[20u].x * TEXCOORD.y)) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    float _457 = _453.z;
    vec4 _476 = texture(sampler2D(M_Water_oceanB2_snp_0_Texture2D_0, SS_BumpMap), vec2(((((cbMtdParam._m0[17u].w * _318) + _418) + (cbMtdParam._m0[20u].y * TEXCOORD.x)) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((((cbMtdParam._m0[18u].x * _318) + _420) + (cbMtdParam._m0[20u].z * TEXCOORD.y)) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    float _480 = _476.z;
    float _483 = (_414 - _335.w) + (isnan(_480) ? _457 : (isnan(_457) ? _480 : max(_457, _480)));
    float _4048 = isnan(0.0) ? _483 : (isnan(_483) ? 0.0 : max(_483, 0.0));
    float _487 = (TEXCOORD_5.x - _414) + cbMtdParam._m0[16u].y;
    float _488 = _487 * (isnan(1.0) ? _4048 : (isnan(_4048) ? 1.0 : min(_4048, 1.0)));
    float _500 = (_488 + cbMtdParam._m0[9u].x) + (cbMtdParam._m0[10u].x * _417);
    float _501 = (_488 + cbMtdParam._m0[9u].y) + (cbMtdParam._m0[10u].y * _417);
    float _502 = (_488 + cbMtdParam._m0[9u].z) + (cbMtdParam._m0[10u].z * _417);
    float _4059 = isnan(0.0) ? _487 : (isnan(_487) ? 0.0 : max(_487, 0.0));
    float _504 = 1.0 - (isnan(1.0) ? _4059 : (isnan(_4059) ? 1.0 : min(_4059, 1.0)));
    float _511 = ((_504 - _500) * _415) + _500;
    float _512 = ((_504 - _501) * _415) + _501;
    float _513 = ((_504 - _502) * _415) + _502;
    float _518 = _361 / cbMtdParam._m0[15u].w;
    float _4070 = isnan(0.0) ? _518 : (isnan(_518) ? 0.0 : max(_518, 0.0));
    float _521 = (1.0 - (isnan(1.0) ? _4070 : (isnan(_4070) ? 1.0 : min(_4070, 1.0)))) * cbMtdParam._m0[15u].z;
    float _534 = (cbMtdParam._m0[15u].x + _361) * cbMtdParam._m0[14u].y;
    float _4081 = isnan(0.0) ? _534 : (isnan(_534) ? 0.0 : max(_534, 0.0));
    float _538 = ((isnan(1.0) ? _4081 : (isnan(_4081) ? 1.0 : min(_4081, 1.0))) * (cbMtdParam._m0[12u].z - cbMtdParam._m0[11u].x)) + cbMtdParam._m0[11u].x;
    float _4092 = isnan(0.0) ? TEXCOORD_5.y : (isnan(TEXCOORD_5.y) ? 0.0 : max(TEXCOORD_5.y, 0.0));
    float _539 = isnan(1.0) ? _4092 : (isnan(_4092) ? 1.0 : min(_4092, 1.0));
    float _548 = _361 / cbMtdParam._m0[14u].w;
    float _4103 = isnan(0.0) ? _548 : (isnan(_548) ? 0.0 : max(_548, 0.0));
    float _549 = isnan(1.0) ? _4103 : (isnan(_4103) ? 1.0 : min(_4103, 1.0));
    vec4 _569 = texture(sampler2D(M_Water_oceanB2_snp_0_Texture2D_1, SS_BumpMap), vec2((((cbMtdParam._m0[21u].y * _318) + TEXCOORD.z) * cbTextureTilingScale._m0[1u].x) + cbTextureTilingScale._m0[1u].z, (((cbMtdParam._m0[21u].z * _318) + TEXCOORD.w) * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w));
    float _578 = ((_476.x + (-0.5)) * 0.5) + _453.x;
    float _579 = ((_476.y + (-0.5)) * 0.5) + _453.y;
    float _587 = _417 * 0.119999997317790985107421875;
    float _589 = _417 * (-0.100000001490116119384765625);
    float _599 = cbMtdParam._m0[22u].y * TEXCOORD.x;
    float _600 = cbMtdParam._m0[22u].z * TEXCOORD.y;
    vec4 _609 = texture(sampler2D(M_Water_oceanB2_snp_0_Texture2D_0, SS_BumpMap), vec2(((((cbMtdParam._m0[21u].w * _318) + _587) + _599) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((((cbMtdParam._m0[22u].x * _318) + _589) + _600) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    vec4 _627 = texture(sampler2D(M_Water_oceanB2_snp_0_Texture2D_0, SS_BumpMap), vec2((((_599 + _587) + (cbMtdParam._m0[22u].w * _318)) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, (((_600 + _589) + (cbMtdParam._m0[23u].x * _318)) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    float _639 = (((0.5 - _578) * 0.10999999940395355224609375) + _578) + (((_609.x + (-1.0)) + _627.x) * cbMtdParam._m0[16u].x);
    float _640 = (((0.5 - _579) * 0.10999999940395355224609375) + _579) + (((_609.y + (-1.0)) + _627.y) * cbMtdParam._m0[16u].x);
    float _645 = ((_569.x - _639) * _549) + _639;
    float _646 = ((_569.y - _640) * _549) + _640;
    float _648 = _361 / cbMtdParam._m0[14u].z;
    float _4114 = isnan(0.0) ? _648 : (isnan(_648) ? 0.0 : max(_648, 0.0));
    float _649 = isnan(1.0) ? _4114 : (isnan(_4114) ? 1.0 : min(_4114, 1.0));
    float _666 = ((((_539 * (0.5 - _338)) + _338) + (((_645 + (-0.5)) + ((0.5 - _645) * _649)) * 0.60000002384185791015625)) * 2.0) + (-1.0);
    float _667 = ((((_539 * (0.5 - _339)) + _339) + (((_646 + (-0.5)) + ((0.5 - _646) * _649)) * 0.60000002384185791015625)) * 2.0) + (-1.0);
    float _668 = dot(vec2(_666, _667), vec2(_666, _667));
    float _4125 = isnan(0.0) ? _668 : (isnan(_668) ? 0.0 : max(_668, 0.0));
    float _673 = sqrt(1.0 - (isnan(1.0) ? _4125 : (isnan(_4125) ? 1.0 : min(_4125, 1.0))));
    float _681 = (cbMtdParam._m0[13u].z + _361) * cbMtdParam._m0[14u].x;
    float _4136 = isnan(0.0) ? _681 : (isnan(_681) ? 0.0 : max(_681, 0.0));
    float _683 = (isnan(1.0) ? _4136 : (isnan(_4136) ? 1.0 : min(_4136, 1.0))) * cbMtdParam._m0[17u].x;
    float _4147 = isnan(0.0) ? _683 : (isnan(_683) ? 0.0 : max(_683, 0.0));
    float _684 = isnan(1.0) ? _4147 : (isnan(_4147) ? 1.0 : min(_4147, 1.0));
    float _699 = fma(_673, _243, fma(_667, _235 * TANGENT.x, _666 * _222));
    float _702 = fma(_673, _244, fma(_667, _235 * TANGENT.y, _666 * _223));
    float _705 = fma(_673, _245, fma(_667, _235 * TANGENT.z, _666 * _224));
    float _709 = inversesqrt(dot(vec3(_699, _702, _705), vec3(_699, _702, _705)));
    float _710 = _709 * _699;
    float _711 = _709 * _702;
    float _712 = _709 * _705;
    float _4158 = isnan(0.0) ? _521 : (isnan(_521) ? 0.0 : max(_521, 0.0));
    float _4169 = isnan(0.0) ? _538 : (isnan(_538) ? 0.0 : max(_538, 0.0));
    float _714 = isnan(1.0) ? _4169 : (isnan(_4169) ? 1.0 : min(_4169, 1.0));
    float _4180 = isnan(0.0) ? _511 : (isnan(_511) ? 0.0 : max(_511, 0.0));
    float _4191 = isnan(0.0) ? _512 : (isnan(_512) ? 0.0 : max(_512, 0.0));
    float _4202 = isnan(0.0) ? _513 : (isnan(_513) ? 0.0 : max(_513, 0.0));
    float _722 = _391 ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _762 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _771 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _762);
    float _772 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _762);
    float _773 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _762);
    float _777 = inversesqrt(dot(vec3(_771, _772, _773), vec3(_771, _772, _773)));
    float _778 = _771 * _777;
    float _779 = _772 * _777;
    float _780 = _773 * _777;
    vec4 _785 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _787 = _785.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _986 = sqrt(((_771 * _771) + (_772 * _772)) + (_773 * _773));
        float _992 = (cbMatDynParam._m0[5u].x * _986) + cbMatDynParam._m0[5u].y;
        float _4213 = isnan(0.0) ? _992 : (isnan(_992) ? 0.0 : max(_992, 0.0));
        float _993 = isnan(1.0) ? _4213 : (isnan(_4213) ? 1.0 : min(_4213, 1.0));
        float _997 = (cbMatDynParam._m0[5u].z * _986) + cbMatDynParam._m0[5u].w;
        float _4224 = isnan(0.0) ? _997 : (isnan(_997) ? 0.0 : max(_997, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4224 : (isnan(_4224) ? 1.0 : min(_4224, 1.0))) - _993)) + _993) < ((_787 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _798 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _799 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _801 = texture(sampler2D(g_WaterSimulationNormalTexture, SS_ClampLinear), vec2(TEXCOORD_8.x, TEXCOORD_8.y));
    float _810 = (_801.x * 2.0) + (-1.0);
    float _811 = (_801.y * 2.0) + (-1.0);
    float _812 = (_801.z * 2.0) + (-1.0);
    float _816 = inversesqrt(dot(vec3(_810, _811, _812), vec3(_810, _811, _812)));
    float _827 = ((TEXCOORD_8.y >= 1.0) || (((TEXCOORD_8.x <= 0.0) || (TEXCOORD_8.x >= 1.0)) || (TEXCOORD_8.y <= 0.0))) ? 0.0 : _801.w;
    float _834 = (((_810 * _816) - _710) * _827) + _710;
    float _835 = (((_811 * _816) - _711) * _827) + _711;
    float _836 = (((_812 * _816) - _712) * _827) + _712;
    float _856 = fma(_836, cbSceneParam._m0[5u].z, fma(_835, cbSceneParam._m0[5u].y, _834 * cbSceneParam._m0[5u].x));
    float _859 = fma(_836, cbSceneParam._m0[6u].z, fma(_835, cbSceneParam._m0[6u].y, _834 * cbSceneParam._m0[6u].x));
    float _862 = fma(_836, cbSceneParam._m0[7u].z, fma(_835, cbSceneParam._m0[7u].y, _834 * cbSceneParam._m0[7u].x));
    uint _875 = uint(roundEven(NORMAL.w)) * 13u;
    uint _876 = _875 + 9u;
    uint _877 = _876 + uint(cbMatDynParam._m0[0u].w);
    float _883 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4180 : (isnan(_4180) ? 1.0 : min(_4180, 1.0)))) * cbInstanceData._m0[_877].x;
    float _884 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4191 : (isnan(_4191) ? 1.0 : min(_4191, 1.0)))) * cbInstanceData._m0[_877].y;
    float _885 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4202 : (isnan(_4202) ? 1.0 : min(_4202, 1.0)))) * cbInstanceData._m0[_877].z;
    float _4235 = isnan(0.0) ? _883 : (isnan(_883) ? 0.0 : max(_883, 0.0));
    float _886 = isnan(1.0) ? _4235 : (isnan(_4235) ? 1.0 : min(_4235, 1.0));
    float _4246 = isnan(0.0) ? _884 : (isnan(_884) ? 0.0 : max(_884, 0.0));
    float _887 = isnan(1.0) ? _4246 : (isnan(_4246) ? 1.0 : min(_4246, 1.0));
    float _4257 = isnan(0.0) ? _885 : (isnan(_885) ? 0.0 : max(_885, 0.0));
    float _888 = isnan(1.0) ? _4257 : (isnan(_4257) ? 1.0 : min(_4257, 1.0));
    vec4 _897 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _798, cbSceneParam._m0[86u].y * _799));
    float _900 = _897.x * TEXCOORD_5.w;
    float _901 = dot(vec3(_834, _835, _836), vec3(_778, _779, _780));
    float _904 = _901 * 2.0;
    float _908 = (_904 * _834) - _778;
    float _909 = (_904 * _835) - _779;
    float _910 = (_904 * _836) - _780;
    float _914 = abs(dot(vec3(_778, _779, _780), vec3(_834, _835, _836)));
    float _4268 = isnan(0.0) ? _914 : (isnan(_914) ? 0.0 : max(_914, 0.0));
    float _915 = isnan(1.0) ? _4268 : (isnan(_4268) ? 1.0 : min(_4268, 1.0));
    float _923 = 10.0 / (_722 + 10.0);
    float _924 = sqrt(_714);
    float _936 = exp2((_924 * 5.0) * log2(1.0 - (_915 * 0.999000012874603271484375))) / (4.0 - (_924 * 3.0));
    float _967 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _971 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _975 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1304;
    float _1306;
    float _1307;
    float _1308;
    float _1309;
    float _1310;
    float _1311;
    float _1312;
    float _1313;
    float _1314;
    float _1315;
    float _1316;
    float _1317;
    float _1318;
    float _1319;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1031 = fma(_975, cbModelParam._m0[26u].z, fma(_971, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _967));
        float _1035 = fma(_975, cbModelParam._m0[27u].z, fma(_971, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _967));
        float _1039 = fma(_975, cbModelParam._m0[28u].z, fma(_971, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _967));
        float _1062 = _967 + _834;
        float _1063 = _971 + _835;
        float _1064 = _975 + _836;
        float _1074 = fma(_1064, cbModelParam._m0[26u].z, fma(_1063, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1062)) - _1031;
        float _1075 = fma(_1064, cbModelParam._m0[27u].z, fma(_1063, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1062)) - _1035;
        float _1076 = fma(_1064, cbModelParam._m0[28u].z, fma(_1063, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1062)) - _1039;
        float _1080 = inversesqrt(dot(vec3(_1074, _1075, _1076), vec3(_1074, _1075, _1076)));
        float _1093 = ((_1080 * _1074) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1031 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1094 = ((_1080 * _1075) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1035 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1095 = ((_1080 * _1076) / cbModelParam._m0[34u].z) + ((((((_1039 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1098 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1093, _1094, _1095), 0.0);
        vec4 _1105 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1093, _1094, _1095), 0.0);
        vec4 _1112 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1093, _1094, _1095), 0.0);
        vec4 _1119 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1093, _1094, _1095), 0.0);
        float _1132 = exp2((_1098.w + (-0.5)) * 20.0) * 2.0;
        float _1133 = _1132 * (_1098.x + (-0.5));
        float _1134 = _1132 * (_1098.y + (-0.5));
        float _1135 = _1132 * (_1098.z + (-0.5));
        float _1142 = exp2((_1105.w + (-0.5)) * 20.0) * 2.0;
        float _1143 = _1142 * (_1105.x + (-0.5));
        float _1144 = _1142 * (_1105.y + (-0.5));
        float _1145 = _1142 * (_1105.z + (-0.5));
        float _1152 = exp2((_1112.w + (-0.5)) * 20.0) * 2.0;
        float _1153 = _1152 * (_1112.x + (-0.5));
        float _1154 = _1152 * (_1112.y + (-0.5));
        float _1155 = _1152 * (_1112.z + (-0.5));
        float _1162 = exp2((_1119.w + (-0.5)) * 20.0) * 2.0;
        float _1163 = _1162 * (_1119.x + (-0.5));
        float _1164 = _1162 * (_1119.y + (-0.5));
        float _1165 = _1162 * (_1119.z + (-0.5));
        float _1166 = isnan(0.0) ? _1163 : (isnan(_1163) ? 0.0 : max(_1163, 0.0));
        float _1167 = isnan(0.0) ? _1164 : (isnan(_1164) ? 0.0 : max(_1164, 0.0));
        float _1168 = isnan(0.0) ? _1165 : (isnan(_1165) ? 0.0 : max(_1165, 0.0));
        float _1169 = _1133 * 0.5;
        float _1170 = _1143 * 0.5;
        float _1171 = _1153 * 0.5;
        float _1172 = dot(vec3(_1169, _1170, _1171), vec3(_1169, _1170, _1171));
        float _1177 = (_1172 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1172);
        float _1186 = (dot(vec3(_834, _835, _836), vec3(_1177 * _1169, _1177 * _1170, _1177 * _1171)) + 1.0) * 0.5;
        float _4294 = isnan(0.0) ? _1186 : (isnan(_1186) ? 0.0 : max(_1186, 0.0));
        float _1196 = sqrt(((_1170 * _1170) + (_1169 * _1169)) + (_1171 * _1171)) / (_1166 + 9.9999997473787516355514526367188e-06);
        float _4305 = isnan(0.0) ? _1196 : (isnan(_1196) ? 0.0 : max(_1196, 0.0));
        float _1197 = isnan(1.0) ? _4305 : (isnan(_4305) ? 1.0 : min(_4305, 1.0));
        float _1198 = _1197 * 2.0;
        float _1202 = (1.0 - _1197) / (_1197 + 1.0);
        float _4316 = isnan(0.0) ? _1202 : (isnan(_1202) ? 0.0 : max(_1202, 0.0));
        float _1203 = isnan(1.0) ? _4316 : (isnan(_4316) ? 1.0 : min(_4316, 1.0));
        float _1212 = ((((1.0 - _1203) * (_1198 + 2.0)) * exp2(log2(isnan(1.0) ? _4294 : (isnan(_4294) ? 1.0 : min(_4294, 1.0))) * (_1198 + 1.0))) + _1203) * _1166;
        float _1213 = _1134 * 0.5;
        float _1214 = _1144 * 0.5;
        float _1215 = _1154 * 0.5;
        float _1216 = dot(vec3(_1213, _1214, _1215), vec3(_1213, _1214, _1215));
        float _1221 = (_1216 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1216);
        float _1229 = (dot(vec3(_834, _835, _836), vec3(_1221 * _1213, _1221 * _1214, _1221 * _1215)) + 1.0) * 0.5;
        float _4327 = isnan(0.0) ? _1229 : (isnan(_1229) ? 0.0 : max(_1229, 0.0));
        float _1238 = sqrt(((_1214 * _1214) + (_1213 * _1213)) + (_1215 * _1215)) / (_1167 + 9.9999997473787516355514526367188e-06);
        float _4338 = isnan(0.0) ? _1238 : (isnan(_1238) ? 0.0 : max(_1238, 0.0));
        float _1239 = isnan(1.0) ? _4338 : (isnan(_4338) ? 1.0 : min(_4338, 1.0));
        float _1240 = _1239 * 2.0;
        float _1244 = (1.0 - _1239) / (_1239 + 1.0);
        float _4349 = isnan(0.0) ? _1244 : (isnan(_1244) ? 0.0 : max(_1244, 0.0));
        float _1245 = isnan(1.0) ? _4349 : (isnan(_4349) ? 1.0 : min(_4349, 1.0));
        float _1254 = ((((1.0 - _1245) * (_1240 + 2.0)) * exp2(log2(isnan(1.0) ? _4327 : (isnan(_4327) ? 1.0 : min(_4327, 1.0))) * (_1240 + 1.0))) + _1245) * _1167;
        float _1255 = _1135 * 0.5;
        float _1256 = _1145 * 0.5;
        float _1257 = _1155 * 0.5;
        float _1258 = dot(vec3(_1255, _1256, _1257), vec3(_1255, _1256, _1257));
        float _1263 = (_1258 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1258);
        float _1271 = (dot(vec3(_834, _835, _836), vec3(_1263 * _1255, _1263 * _1256, _1263 * _1257)) + 1.0) * 0.5;
        float _4360 = isnan(0.0) ? _1271 : (isnan(_1271) ? 0.0 : max(_1271, 0.0));
        float _1280 = sqrt(((_1256 * _1256) + (_1255 * _1255)) + (_1257 * _1257)) / (_1168 + 9.9999997473787516355514526367188e-06);
        float _4371 = isnan(0.0) ? _1280 : (isnan(_1280) ? 0.0 : max(_1280, 0.0));
        float _1281 = isnan(1.0) ? _4371 : (isnan(_4371) ? 1.0 : min(_4371, 1.0));
        float _1282 = _1281 * 2.0;
        float _1286 = (1.0 - _1281) / (_1281 + 1.0);
        float _4382 = isnan(0.0) ? _1286 : (isnan(_1286) ? 0.0 : max(_1286, 0.0));
        float _1287 = isnan(1.0) ? _4382 : (isnan(_4382) ? 1.0 : min(_4382, 1.0));
        float _1296 = ((((1.0 - _1287) * (_1282 + 2.0)) * exp2(log2(isnan(1.0) ? _4360 : (isnan(_4360) ? 1.0 : min(_4360, 1.0))) * (_1282 + 1.0))) + _1287) * _1168;
        _1304 = _1135;
        _1306 = _1134;
        _1307 = _1133;
        _1308 = _1145;
        _1309 = _1144;
        _1310 = _1143;
        _1311 = _1155;
        _1312 = _1154;
        _1313 = _1153;
        _1314 = _1168;
        _1315 = _1167;
        _1316 = _1166;
        _1317 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1212 : (isnan(_1212) ? 0.0 : max(_1212, 0.0)));
        _1318 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1254 : (isnan(_1254) ? 0.0 : max(_1254, 0.0)));
        _1319 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1296 : (isnan(_1296) ? 0.0 : max(_1296, 0.0)));
    }
    else
    {
        _1304 = _1305;
        _1306 = _1305;
        _1307 = _1305;
        _1308 = _1305;
        _1309 = _1305;
        _1310 = _1305;
        _1311 = _1305;
        _1312 = _1305;
        _1313 = _1305;
        _1314 = _1305;
        _1315 = _1305;
        _1316 = _1305;
        _1317 = 0.0;
        _1318 = 0.0;
        _1319 = 0.0;
    }
    float _1617;
    float _1618;
    float _1619;
    float _1620;
    float _1621;
    float _1622;
    float _1623;
    float _1624;
    float _1625;
    float _1626;
    float _1627;
    float _1628;
    float _1629;
    float _1630;
    float _1631;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1348 = fma(_975, cbModelParam._m0[30u].z, fma(_971, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _967));
        float _1352 = fma(_975, cbModelParam._m0[31u].z, fma(_971, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _967));
        float _1356 = fma(_975, cbModelParam._m0[32u].z, fma(_971, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _967));
        float _1379 = _967 + _834;
        float _1380 = _971 + _835;
        float _1381 = _975 + _836;
        float _1391 = fma(_1381, cbModelParam._m0[30u].z, fma(_1380, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1379)) - _1348;
        float _1392 = fma(_1381, cbModelParam._m0[31u].z, fma(_1380, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1379)) - _1352;
        float _1393 = fma(_1381, cbModelParam._m0[32u].z, fma(_1380, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1379)) - _1356;
        float _1397 = inversesqrt(dot(vec3(_1391, _1392, _1393), vec3(_1391, _1392, _1393)));
        float _1410 = ((_1397 * _1391) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1348 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1411 = ((_1397 * _1392) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1352 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1412 = ((_1397 * _1393) / cbModelParam._m0[35u].z) + ((((((_1356 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1414 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1410, _1411, _1412), 0.0);
        vec4 _1421 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1410, _1411, _1412), 0.0);
        vec4 _1428 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1410, _1411, _1412), 0.0);
        vec4 _1435 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1410, _1411, _1412), 0.0);
        float _1447 = exp2((_1414.w + (-0.5)) * 20.0) * 2.0;
        float _1448 = _1447 * (_1414.x + (-0.5));
        float _1449 = _1447 * (_1414.y + (-0.5));
        float _1450 = _1447 * (_1414.z + (-0.5));
        float _1457 = exp2((_1421.w + (-0.5)) * 20.0) * 2.0;
        float _1458 = _1457 * (_1421.x + (-0.5));
        float _1459 = _1457 * (_1421.y + (-0.5));
        float _1460 = _1457 * (_1421.z + (-0.5));
        float _1467 = exp2((_1428.w + (-0.5)) * 20.0) * 2.0;
        float _1468 = _1467 * (_1428.x + (-0.5));
        float _1469 = _1467 * (_1428.y + (-0.5));
        float _1470 = _1467 * (_1428.z + (-0.5));
        float _1477 = exp2((_1435.w + (-0.5)) * 20.0) * 2.0;
        float _1478 = _1477 * (_1435.x + (-0.5));
        float _1479 = _1477 * (_1435.y + (-0.5));
        float _1480 = _1477 * (_1435.z + (-0.5));
        float _1481 = isnan(0.0) ? _1478 : (isnan(_1478) ? 0.0 : max(_1478, 0.0));
        float _1482 = isnan(0.0) ? _1479 : (isnan(_1479) ? 0.0 : max(_1479, 0.0));
        float _1483 = isnan(0.0) ? _1480 : (isnan(_1480) ? 0.0 : max(_1480, 0.0));
        float _1484 = _1448 * 0.5;
        float _1485 = _1458 * 0.5;
        float _1486 = _1468 * 0.5;
        float _1487 = dot(vec3(_1484, _1485, _1486), vec3(_1484, _1485, _1486));
        float _1492 = (_1487 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1487);
        float _1500 = (dot(vec3(_834, _835, _836), vec3(_1492 * _1484, _1492 * _1485, _1492 * _1486)) + 1.0) * 0.5;
        float _4423 = isnan(0.0) ? _1500 : (isnan(_1500) ? 0.0 : max(_1500, 0.0));
        float _1509 = sqrt(((_1485 * _1485) + (_1484 * _1484)) + (_1486 * _1486)) / (_1481 + 9.9999997473787516355514526367188e-06);
        float _4434 = isnan(0.0) ? _1509 : (isnan(_1509) ? 0.0 : max(_1509, 0.0));
        float _1510 = isnan(1.0) ? _4434 : (isnan(_4434) ? 1.0 : min(_4434, 1.0));
        float _1511 = _1510 * 2.0;
        float _1515 = (1.0 - _1510) / (_1510 + 1.0);
        float _4445 = isnan(0.0) ? _1515 : (isnan(_1515) ? 0.0 : max(_1515, 0.0));
        float _1516 = isnan(1.0) ? _4445 : (isnan(_4445) ? 1.0 : min(_4445, 1.0));
        float _1525 = ((((1.0 - _1516) * (_1511 + 2.0)) * exp2(log2(isnan(1.0) ? _4423 : (isnan(_4423) ? 1.0 : min(_4423, 1.0))) * (_1511 + 1.0))) + _1516) * _1481;
        float _1526 = _1449 * 0.5;
        float _1527 = _1459 * 0.5;
        float _1528 = _1469 * 0.5;
        float _1529 = dot(vec3(_1526, _1527, _1528), vec3(_1526, _1527, _1528));
        float _1534 = (_1529 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1529);
        float _1542 = (dot(vec3(_834, _835, _836), vec3(_1534 * _1526, _1534 * _1527, _1534 * _1528)) + 1.0) * 0.5;
        float _4456 = isnan(0.0) ? _1542 : (isnan(_1542) ? 0.0 : max(_1542, 0.0));
        float _1551 = sqrt(((_1527 * _1527) + (_1526 * _1526)) + (_1528 * _1528)) / (_1482 + 9.9999997473787516355514526367188e-06);
        float _4467 = isnan(0.0) ? _1551 : (isnan(_1551) ? 0.0 : max(_1551, 0.0));
        float _1552 = isnan(1.0) ? _4467 : (isnan(_4467) ? 1.0 : min(_4467, 1.0));
        float _1553 = _1552 * 2.0;
        float _1557 = (1.0 - _1552) / (_1552 + 1.0);
        float _4478 = isnan(0.0) ? _1557 : (isnan(_1557) ? 0.0 : max(_1557, 0.0));
        float _1558 = isnan(1.0) ? _4478 : (isnan(_4478) ? 1.0 : min(_4478, 1.0));
        float _1567 = ((((1.0 - _1558) * (_1553 + 2.0)) * exp2(log2(isnan(1.0) ? _4456 : (isnan(_4456) ? 1.0 : min(_4456, 1.0))) * (_1553 + 1.0))) + _1558) * _1482;
        float _1568 = _1450 * 0.5;
        float _1569 = _1460 * 0.5;
        float _1570 = _1470 * 0.5;
        float _1571 = dot(vec3(_1568, _1569, _1570), vec3(_1568, _1569, _1570));
        float _1576 = (_1571 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1571);
        float _1584 = (dot(vec3(_834, _835, _836), vec3(_1576 * _1568, _1576 * _1569, _1576 * _1570)) + 1.0) * 0.5;
        float _4489 = isnan(0.0) ? _1584 : (isnan(_1584) ? 0.0 : max(_1584, 0.0));
        float _1593 = sqrt(((_1569 * _1569) + (_1568 * _1568)) + (_1570 * _1570)) / (_1483 + 9.9999997473787516355514526367188e-06);
        float _4500 = isnan(0.0) ? _1593 : (isnan(_1593) ? 0.0 : max(_1593, 0.0));
        float _1594 = isnan(1.0) ? _4500 : (isnan(_4500) ? 1.0 : min(_4500, 1.0));
        float _1595 = _1594 * 2.0;
        float _1599 = (1.0 - _1594) / (_1594 + 1.0);
        float _4511 = isnan(0.0) ? _1599 : (isnan(_1599) ? 0.0 : max(_1599, 0.0));
        float _1600 = isnan(1.0) ? _4511 : (isnan(_4511) ? 1.0 : min(_4511, 1.0));
        float _1609 = ((((1.0 - _1600) * (_1595 + 2.0)) * exp2(log2(isnan(1.0) ? _4489 : (isnan(_4489) ? 1.0 : min(_4489, 1.0))) * (_1595 + 1.0))) + _1600) * _1483;
        _1617 = _1450;
        _1618 = _1449;
        _1619 = _1448;
        _1620 = _1460;
        _1621 = _1459;
        _1622 = _1458;
        _1623 = _1470;
        _1624 = _1469;
        _1625 = _1468;
        _1626 = _1483;
        _1627 = _1482;
        _1628 = _1481;
        _1629 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1525 : (isnan(_1525) ? 0.0 : max(_1525, 0.0)));
        _1630 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1567 : (isnan(_1567) ? 0.0 : max(_1567, 0.0)));
        _1631 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1609 : (isnan(_1609) ? 0.0 : max(_1609, 0.0)));
    }
    else
    {
        _1617 = _1305;
        _1618 = _1305;
        _1619 = _1305;
        _1620 = _1305;
        _1621 = _1305;
        _1622 = _1305;
        _1623 = _1305;
        _1624 = _1305;
        _1625 = _1305;
        _1626 = _1305;
        _1627 = _1305;
        _1628 = _1305;
        _1629 = 0.0;
        _1630 = 0.0;
        _1631 = 0.0;
    }
    float _1641 = (cbModelParam._m0[1u].x * (_1629 - _1317)) + _1317;
    float _1642 = (cbModelParam._m0[1u].x * (_1630 - _1318)) + _1318;
    float _1643 = (cbModelParam._m0[1u].x * (_1631 - _1319)) + _1319;
    float _1664 = fma(_1643, cbSceneParam._m0[89u].z, fma(_1642, cbSceneParam._m0[89u].y, _1641 * cbSceneParam._m0[89u].x));
    float _1667 = fma(_1643, cbSceneParam._m0[90u].z, fma(_1642, cbSceneParam._m0[90u].y, _1641 * cbSceneParam._m0[90u].x));
    float _1670 = fma(_1643, cbSceneParam._m0[91u].z, fma(_1642, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1641));
    float _1685 = _908 * 0.5;
    float _1686 = _909 * 0.5;
    float _1687 = _910 * 0.5;
    float _1688 = dot(vec4(_1685, _1686, _1687, 1.0), vec4(_1619, _1622, _1625, _1628));
    float _1691 = dot(vec4(_1685, _1686, _1687, 1.0), vec4(_1618, _1621, _1624, _1627));
    float _1694 = dot(vec4(_1685, _1686, _1687, 1.0), vec4(_1617, _1620, _1623, _1626));
    float _1728;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1701 = dot(vec4(_1685, _1686, _1687, 1.0), vec4(_1304, _1308, _1311, _1314));
        float _1705 = dot(vec4(_1685, _1686, _1687, 1.0), vec4(_1306, _1309, _1312, _1315));
        float _1709 = dot(vec4(_1685, _1686, _1687, 1.0), vec4(_1307, _1310, _1313, _1316));
        float _1716 = dot(vec4(cbModelParam._m0[39u]), vec4(_1685, _1686, _1687, 1.0));
        _1728 = dot(vec3(isnan(0.0) ? _1709 : (isnan(_1709) ? 0.0 : max(_1709, 0.0)), isnan(0.0) ? _1705 : (isnan(_1705) ? 0.0 : max(_1705, 0.0)), isnan(0.0) ? _1701 : (isnan(_1701) ? 0.0 : max(_1701, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1716) ? 0.0 : (isnan(0.0) ? _1716 : max(0.0, _1716))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1728 = 1.0;
    }
    float _1739;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1730 = dot(vec4(cbModelParam._m0[40u]), vec4(_1685, _1686, _1687, 1.0));
        _1739 = dot(vec3(isnan(0.0) ? _1688 : (isnan(_1688) ? 0.0 : max(_1688, 0.0)), isnan(0.0) ? _1691 : (isnan(_1691) ? 0.0 : max(_1691, 0.0)), isnan(0.0) ? _1694 : (isnan(_1694) ? 0.0 : max(_1694, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1730) ? 0.0 : (isnan(0.0) ? _1730 : max(0.0, _1730))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1739 = 1.0;
    }
    float _1743 = (_1739 * cbModelParam._m0[1u].x) + (_1728 * (1.0 - cbModelParam._m0[1u].x));
    float _1753 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _714);
    float _1754 = isnan(_1753) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1753 : min(cbModelParam._m0[25u].z, _1753));
    float _1834;
    float _1836;
    float _1838;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1801 = fma(_975, cbModelParam._m0[13u].z, fma(_971, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _967)) + cbModelParam._m0[13u].w;
        float _1805 = fma(_975, cbModelParam._m0[14u].z, fma(_971, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _967)) + cbModelParam._m0[14u].w;
        float _1809 = fma(_975, cbModelParam._m0[15u].z, fma(_971, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _967)) + cbModelParam._m0[15u].w;
        float _1812 = fma(_910, cbModelParam._m0[13u].z, fma(_909, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _908));
        float _1815 = fma(_910, cbModelParam._m0[14u].z, fma(_909, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _908));
        float _1818 = fma(_910, cbModelParam._m0[15u].z, fma(_909, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _908));
        float _1846;
        if (_1812 > 0.0)
        {
            _1846 = abs((1.0 - _1801) / _1812);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1812 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1801 + 1.0) / _1812);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1846 = frontier_phi_19_17_ladder;
        }
        float _2067;
        if (_1815 > 0.0)
        {
            _2067 = abs((1.0 - _1805) / _1815);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1815 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1805 + 1.0) / _1815);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2067 = frontier_phi_28_24_ladder;
        }
        float _2512;
        if (_1818 > 0.0)
        {
            _2512 = abs((1.0 - _1809) / _1818);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1818 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1809 + 1.0) / _1818);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2512 = frontier_phi_40_35_ladder;
        }
        float _2514 = isnan(_2067) ? _1846 : (isnan(_1846) ? _2067 : min(_1846, _2067));
        float _2515 = isnan(_2512) ? _2514 : (isnan(_2514) ? _2512 : min(_2514, _2512));
        float _2519 = (_2515 * _1812) + _1801;
        float _2520 = (_2515 * _1815) + _1805;
        float _2521 = (_2515 * _1818) + _1809;
        float _2522 = _2515 * 9.9999997473787516355514526367188e-05;
        float _2524 = (-1.0) - _2522;
        float _2526 = _2522 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2521 > _2526) || ((_2521 < _2524) || ((_2520 > _2526) || ((_2520 < _2524) || ((_2519 < _2524) || (_2519 > _2526))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2803 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2521, cbModelParam._m0[9u].z, fma(_2520, cbModelParam._m0[9u].y, _2519 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2521, cbModelParam._m0[10u].z, fma(_2520, cbModelParam._m0[10u].y, _2519 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2521, cbModelParam._m0[11u].z, fma(_2520, cbModelParam._m0[11u].y, _2519 * cbModelParam._m0[11u].x))), _1754);
            frontier_phi_18_40_ladder = _2803.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2803.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2803.x * cbModelParam._m0[1u].y;
        }
        _1834 = frontier_phi_18_40_ladder_2;
        _1836 = frontier_phi_18_40_ladder_1;
        _1838 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1822 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_908, _909, _910), _1754);
        _1834 = _1822.x * cbModelParam._m0[1u].y;
        _1836 = _1822.y * cbModelParam._m0[1u].y;
        _1838 = _1822.z * cbModelParam._m0[1u].y;
    }
    float _1842 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _714);
    float _1843 = isnan(_1842) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1842 : min(cbModelParam._m0[25u].w, _1842));
    float _1932;
    float _1934;
    float _1936;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1896 = fma(_975, cbModelParam._m0[21u].z, fma(_971, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _967)) + cbModelParam._m0[21u].w;
        float _1900 = fma(_975, cbModelParam._m0[22u].z, fma(_971, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _967)) + cbModelParam._m0[22u].w;
        float _1904 = fma(_975, cbModelParam._m0[23u].z, fma(_971, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _967)) + cbModelParam._m0[23u].w;
        float _1907 = fma(_910, cbModelParam._m0[21u].z, fma(_909, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _908));
        float _1910 = fma(_910, cbModelParam._m0[22u].z, fma(_909, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _908));
        float _1913 = fma(_910, cbModelParam._m0[23u].z, fma(_909, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _908));
        float _2072;
        if (_1907 > 0.0)
        {
            _2072 = abs((1.0 - _1896) / _1907);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1907 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1896 + 1.0) / _1907);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _2072 = frontier_phi_30_26_ladder;
        }
        float _2539;
        if (_1910 > 0.0)
        {
            _2539 = abs((1.0 - _1900) / _1910);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1910 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1900 + 1.0) / _1910);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2539 = frontier_phi_42_37_ladder;
        }
        float _2988;
        if (_1913 > 0.0)
        {
            _2988 = abs((1.0 - _1904) / _1913);
        }
        else
        {
            float frontier_phi_54_49_ladder;
            if (_1913 < 0.0)
            {
                frontier_phi_54_49_ladder = abs((_1904 + 1.0) / _1913);
            }
            else
            {
                frontier_phi_54_49_ladder = 5000.0;
            }
            _2988 = frontier_phi_54_49_ladder;
        }
        float _2990 = isnan(_2539) ? _2072 : (isnan(_2072) ? _2539 : min(_2072, _2539));
        float _2991 = isnan(_2988) ? _2990 : (isnan(_2990) ? _2988 : min(_2990, _2988));
        float _2995 = (_2991 * _1907) + _1896;
        float _2996 = (_2991 * _1910) + _1900;
        float _2997 = (_2991 * _1913) + _1904;
        float _2998 = _2991 * 9.9999997473787516355514526367188e-05;
        float _2999 = (-1.0) - _2998;
        float _3001 = _2998 + 1.0;
        float frontier_phi_27_54_ladder;
        float frontier_phi_27_54_ladder_1;
        float frontier_phi_27_54_ladder_2;
        if ((_2997 > _3001) || ((_2997 < _2999) || ((_2996 > _3001) || ((_2996 < _2999) || ((_2995 < _2999) || (_2995 > _3001))))))
        {
            frontier_phi_27_54_ladder = 0.0;
            frontier_phi_27_54_ladder_1 = 0.0;
            frontier_phi_27_54_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3208 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2997, cbModelParam._m0[17u].z, fma(_2996, cbModelParam._m0[17u].y, _2995 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2997, cbModelParam._m0[18u].z, fma(_2996, cbModelParam._m0[18u].y, _2995 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2997, cbModelParam._m0[19u].z, fma(_2996, cbModelParam._m0[19u].y, _2995 * cbModelParam._m0[19u].x))), _1843);
            frontier_phi_27_54_ladder = _3208.z * cbModelParam._m0[1u].z;
            frontier_phi_27_54_ladder_1 = _3208.y * cbModelParam._m0[1u].z;
            frontier_phi_27_54_ladder_2 = _3208.x * cbModelParam._m0[1u].z;
        }
        _1932 = frontier_phi_27_54_ladder_2;
        _1934 = frontier_phi_27_54_ladder_1;
        _1936 = frontier_phi_27_54_ladder;
    }
    else
    {
        vec4 _1916 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_908, _909, _910), _1843);
        _1932 = _1916.x * cbModelParam._m0[1u].z;
        _1934 = _1916.y * cbModelParam._m0[1u].z;
        _1936 = _1916.z * cbModelParam._m0[1u].z;
    }
    float _1948 = ((((1.0 - _936) * ((_924 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_936 * _924)) * _900;
    float _1949 = _1948 * ((cbModelParam._m0[1u].w * (_1932 - _1834)) + _1834);
    float _1950 = _1948 * ((cbModelParam._m0[1u].w * (_1934 - _1836)) + _1836);
    float _1951 = _1948 * ((cbModelParam._m0[1u].w * (_1936 - _1838)) + _1838);
    float _1954 = fma(_1951, cbSceneParam._m0[89u].z, fma(_1950, cbSceneParam._m0[89u].y, _1949 * cbSceneParam._m0[89u].x));
    float _1957 = fma(_1951, cbSceneParam._m0[90u].z, fma(_1950, cbSceneParam._m0[90u].y, _1949 * cbSceneParam._m0[90u].x));
    float _1960 = fma(_1951, cbSceneParam._m0[91u].z, fma(_1950, cbSceneParam._m0[91u].y, _1949 * cbSceneParam._m0[91u].x));
    float _1971 = _798 / cbSceneParam._m0[86u].x;
    float _1979 = (cbSceneParam._m0[88u].y * (1.0 - _714)) + cbSceneParam._m0[88u].z;
    float _4637 = isnan(0.0) ? _1979 : (isnan(_1979) ? 0.0 : max(_1979, 0.0));
    float _1981 = (isnan(1.0) ? _4637 : (isnan(_4637) ? 1.0 : min(_4637, 1.0))) * 5.0;
    float _1986 = (_923 * cbMtdParam._m0[11u].w) * dot(vec3(_834, _835, _836), vec3(1.0, 0.0, 0.0));
    vec4 _1996 = textureLod(sampler2D(g_RLRTexture, SS_ClampLinear), vec2(((_1986 * textureLod(sampler2D(g_RLRTexture, SS_ClampLinear), vec2((_1986 + _1971) * cbSceneParam._m0[86u].x, _799), _1981).w) + _1971) * cbSceneParam._m0[86u].x, _799), _1981);
    float _2012 = 1.0 - _1996.w;
    float _2046 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2050 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2054 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2058 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2059 = _2046 / _2058;
    float _2060 = _2050 / _2058;
    float _2061 = _2054 / _2058;
    float _2208;
    float _2209;
    float _2210;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2088 = ((uint(_2061 > cbSceneParam._m0[59u].y) + uint(_2061 > cbSceneParam._m0[59u].x)) + uint(_2061 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2089 = _2088 + 43u;
        uint _2097 = _2088 + 44u;
        uint _2105 = _2088 + 45u;
        uint _2113 = _2088 + 46u;
        float _2124 = fma(_2058, cbSceneParam._m0[_2089].w, fma(_2054, cbSceneParam._m0[_2089].z, fma(_2050, cbSceneParam._m0[_2089].y, _2046 * cbSceneParam._m0[_2089].x)));
        float _2128 = fma(_2058, cbSceneParam._m0[_2097].w, fma(_2054, cbSceneParam._m0[_2097].z, fma(_2050, cbSceneParam._m0[_2097].y, _2046 * cbSceneParam._m0[_2097].x)));
        float _2136 = fma(_2058, cbSceneParam._m0[_2113].w, fma(_2054, cbSceneParam._m0[_2113].z, fma(_2050, cbSceneParam._m0[_2113].y, _2046 * cbSceneParam._m0[_2113].x)));
        float _2141 = cbSceneParam._m0[33u].z * _2136;
        float _2143 = cbSceneParam._m0[33u].w * _2136;
        float _2146 = fma(_2058, cbSceneParam._m0[_2105].w, fma(_2054, cbSceneParam._m0[_2105].z, fma(_2050, cbSceneParam._m0[_2105].y, _2046 * cbSceneParam._m0[_2105].x))) / _2136;
        float _2194 = (cbSceneParam._m0[33u].x - sqrt(((_2060 * _2060) + (_2059 * _2059)) + (_2061 * _2061))) * cbSceneParam._m0[33u].y;
        float _4648 = isnan(0.0) ? _2194 : (isnan(_2194) ? 0.0 : max(_2194, 0.0));
        float _2201 = (isnan(1.0) ? _4648 : (isnan(_4648) ? 1.0 : min(_4648, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2141 + _2124) / _2136, (_2143 + _2128) / _2136), _2146), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2143 + _2124) / _2136, (_2128 - _2141) / _2136), _2146), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2124 - _2141) / _2136, (_2128 - _2143) / _2136), _2146), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2124 - _2143) / _2136, (_2141 + _2128) / _2136), _2146), 0.0)).x), vec4(0.25)));
        _2208 = 1.0 - (_2201 * cbSceneParam._m0[34u].x);
        _2209 = 1.0 - (_2201 * cbSceneParam._m0[34u].y);
        _2210 = 1.0 - (_2201 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2208 = 1.0;
        _2209 = 1.0;
        _2210 = 1.0;
    }
    float _2274;
    float _2276;
    float _2278;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2262 = fma(_2058, cbSceneParam._m0[63u].w, fma(_2054, cbSceneParam._m0[63u].z, fma(_2050, cbSceneParam._m0[63u].y, _2046 * cbSceneParam._m0[63u].x)));
        float _2263 = fma(_2058, cbSceneParam._m0[60u].w, fma(_2054, cbSceneParam._m0[60u].z, fma(_2050, cbSceneParam._m0[60u].y, _2046 * cbSceneParam._m0[60u].x))) / _2262;
        float _2264 = fma(_2058, cbSceneParam._m0[61u].w, fma(_2054, cbSceneParam._m0[61u].z, fma(_2050, cbSceneParam._m0[61u].y, _2046 * cbSceneParam._m0[61u].x))) / _2262;
        float frontier_phi_39_38_ladder;
        float frontier_phi_39_38_ladder_1;
        float frontier_phi_39_38_ladder_2;
        if ((((_2263 >= cbSceneParam._m0[64u].x) && (_2264 >= cbSceneParam._m0[64u].y)) && (_2263 <= cbSceneParam._m0[64u].z)) && (_2264 <= cbSceneParam._m0[64u].w))
        {
            float _2552 = fma(_2058, cbSceneParam._m0[62u].w, fma(_2054, cbSceneParam._m0[62u].z, fma(_2050, cbSceneParam._m0[62u].y, _2046 * cbSceneParam._m0[62u].x))) / _2262;
            float _2556 = isnan(cbSceneParam._m0[41u].w) ? _2552 : (isnan(_2552) ? cbSceneParam._m0[41u].w : max(_2552, cbSceneParam._m0[41u].w));
            float _2599 = (cbSceneParam._m0[33u].x - sqrt(((_2060 * _2060) + (_2059 * _2059)) + (_2061 * _2061))) * cbSceneParam._m0[33u].y;
            float _4664 = isnan(0.0) ? _2599 : (isnan(_2599) ? 0.0 : max(_2599, 0.0));
            float _2606 = (isnan(1.0) ? _4664 : (isnan(_4664) ? 1.0 : min(_4664, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2263, cbSceneParam._m0[33u].w + _2264), _2556), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2263, _2264 - cbSceneParam._m0[33u].z), _2556), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2263 - cbSceneParam._m0[33u].z, _2264 - cbSceneParam._m0[33u].w), _2556), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2263 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2264), _2556), 0.0)).x), vec4(0.25)));
            float _2610 = 1.0 - (_2606 * cbSceneParam._m0[34u].x);
            float _2611 = 1.0 - (_2606 * cbSceneParam._m0[34u].y);
            float _2612 = 1.0 - (_2606 * cbSceneParam._m0[34u].z);
            frontier_phi_39_38_ladder = isnan(_2612) ? _2210 : (isnan(_2210) ? _2612 : min(_2210, _2612));
            frontier_phi_39_38_ladder_1 = isnan(_2611) ? _2209 : (isnan(_2209) ? _2611 : min(_2209, _2611));
            frontier_phi_39_38_ladder_2 = isnan(_2610) ? _2208 : (isnan(_2208) ? _2610 : min(_2208, _2610));
        }
        else
        {
            frontier_phi_39_38_ladder = _2210;
            frontier_phi_39_38_ladder_1 = _2209;
            frontier_phi_39_38_ladder_2 = _2208;
        }
        _2274 = frontier_phi_39_38_ladder_2;
        _2276 = frontier_phi_39_38_ladder_1;
        _2278 = frontier_phi_39_38_ladder;
    }
    else
    {
        _2274 = _2208;
        _2276 = _2209;
        _2278 = _2210;
    }
    uint _2280 = _875 + 5u;
    uvec4 _2283 = floatBitsToUint(cbInstanceData._m0[_2280]);
    uint _2285 = _2283.x * 14u;
    uint _2286 = _2285 + 13u;
    float _2291 = _900 + (-1.0);
    float _2294 = (cbLight._m0[_2286].x * _2291) + 1.0;
    float _2295 = (cbLight._m0[_2286].y * _2291) + 1.0;
    uint _2296 = _2285 + 5u;
    float _2302 = isnan(1.0) ? _2295 : (isnan(_2295) ? 1.0 : min(_2295, 1.0));
    uint _2306 = _2285 + 4u;
    float _2316 = isnan(1.0) ? _2294 : (isnan(_2294) ? 1.0 : min(_2294, 1.0));
    uint _2320 = _2285 | 1u;
    float _2331 = dot(vec3(cbLight._m0[_2285].xyz), vec3(_834, _835, _836));
    float _2334 = dot(vec3(cbLight._m0[_2320].xyz), vec3(_834, _835, _836));
    float _4700 = isnan(0.0) ? _2331 : (isnan(_2331) ? 0.0 : max(_2331, 0.0));
    float _4711 = isnan(0.0) ? _2334 : (isnan(_2334) ? 0.0 : max(_2334, 0.0));
    float _2339 = (isnan(1.0) ? _4700 : (isnan(_4700) ? 1.0 : min(_4700, 1.0))) * 0.3183098733425140380859375;
    float _2341 = (isnan(1.0) ? _4711 : (isnan(_4711) ? 1.0 : min(_4711, 1.0))) * 0.3183098733425140380859375;
    float _2348 = ((cbLight._m0[_2296].x * _2302) * _2341) + (((cbLight._m0[_2306].x * _2274) * _2316) * _2339);
    float _2349 = ((_2302 * cbLight._m0[_2296].y) * _2341) + (((cbLight._m0[_2306].y * _2276) * _2316) * _2339);
    float _2350 = ((_2302 * cbLight._m0[_2296].z) * _2341) + (((cbLight._m0[_2306].z * _2278) * _2316) * _2339);
    uint _2352 = _2285 + 8u;
    float _2365 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2285].w)) * _714) * 0.949999988079071044921875);
    float _2366 = _2365 * _2365;
    float _2367 = cbLight._m0[_2285].x + _778;
    float _2368 = cbLight._m0[_2285].y + _779;
    float _2369 = cbLight._m0[_2285].z + _780;
    float _2373 = inversesqrt(dot(vec3(_2367, _2368, _2369), vec3(_2367, _2368, _2369)));
    float _2374 = _2373 * _2367;
    float _2375 = _2373 * _2368;
    float _2376 = _2373 * _2369;
    float _2377 = dot(vec3(_834, _835, _836), vec3(cbLight._m0[_2285].xyz));
    float _4722 = isnan(0.0) ? _2377 : (isnan(_2377) ? 0.0 : max(_2377, 0.0));
    float _2380 = isnan(1.0) ? _4722 : (isnan(_4722) ? 1.0 : min(_4722, 1.0));
    float _4733 = isnan(0.0) ? _901 : (isnan(_901) ? 0.0 : max(_901, 0.0));
    float _2381 = isnan(1.0) ? _4733 : (isnan(_4733) ? 1.0 : min(_4733, 1.0));
    float _2382 = dot(vec3(_834, _835, _836), vec3(_2374, _2375, _2376));
    float _4744 = isnan(0.0) ? _2382 : (isnan(_2382) ? 0.0 : max(_2382, 0.0));
    float _2385 = isnan(1.0) ? _4744 : (isnan(_4744) ? 1.0 : min(_4744, 1.0));
    float _2386 = dot(vec3(cbLight._m0[_2285].xyz), vec3(_2374, _2375, _2376));
    float _4755 = isnan(0.0) ? _2386 : (isnan(_2386) ? 0.0 : max(_2386, 0.0));
    float _2390 = _2366 * _2366;
    float _2394 = ((_2385 * _2385) * (_2390 + (-1.0))) + 1.0;
    float _2405 = (exp2(log2(1.0 - (isnan(1.0) ? _4755 : (isnan(_4755) ? 1.0 : min(_4755, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2406 = 1.0 - _2366;
    float _2417 = (0.5 / (((_2381 * ((_2380 * _2406) + _2366)) + 9.9999999392252902907785028219223e-09) + (((_2381 * _2406) + _2366) * _2380))) * _2380;
    float _4766 = isnan(0.0) ? _2417 : (isnan(_2417) ? 0.0 : max(_2417, 0.0));
    float _2419 = (isnan(1.0) ? _4766 : (isnan(_4766) ? 1.0 : min(_4766, 1.0))) * (_2390 / ((_2394 * _2394) * 3.141590118408203125));
    uint _2433 = _2285 + 9u;
    float _2444 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2320].w)) * _714) * 0.949999988079071044921875);
    float _2445 = _2444 * _2444;
    float _2446 = cbLight._m0[_2320].x + _778;
    float _2447 = cbLight._m0[_2320].y + _779;
    float _2448 = cbLight._m0[_2320].z + _780;
    float _2452 = inversesqrt(dot(vec3(_2446, _2447, _2448), vec3(_2446, _2447, _2448)));
    float _2453 = _2452 * _2446;
    float _2454 = _2452 * _2447;
    float _2455 = _2452 * _2448;
    float _2456 = dot(vec3(_834, _835, _836), vec3(cbLight._m0[_2320].xyz));
    float _4777 = isnan(0.0) ? _2456 : (isnan(_2456) ? 0.0 : max(_2456, 0.0));
    float _2459 = isnan(1.0) ? _4777 : (isnan(_4777) ? 1.0 : min(_4777, 1.0));
    float _2460 = dot(vec3(_834, _835, _836), vec3(_2453, _2454, _2455));
    float _4788 = isnan(0.0) ? _2460 : (isnan(_2460) ? 0.0 : max(_2460, 0.0));
    float _2463 = isnan(1.0) ? _4788 : (isnan(_4788) ? 1.0 : min(_4788, 1.0));
    float _2464 = dot(vec3(cbLight._m0[_2320].xyz), vec3(_2453, _2454, _2455));
    float _4799 = isnan(0.0) ? _2464 : (isnan(_2464) ? 0.0 : max(_2464, 0.0));
    float _2468 = _2445 * _2445;
    float _2472 = ((_2463 * _2463) * (_2468 + (-1.0))) + 1.0;
    float _2481 = (exp2(log2(1.0 - (isnan(1.0) ? _4799 : (isnan(_4799) ? 1.0 : min(_4799, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2482 = 1.0 - _2445;
    float _2492 = (0.5 / (((_2381 * ((_2459 * _2482) + _2445)) + 9.9999999392252902907785028219223e-09) + (((_2381 * _2482) + _2445) * _2459))) * _2459;
    float _4810 = isnan(0.0) ? _2492 : (isnan(_2492) ? 0.0 : max(_2492, 0.0));
    float _2494 = (isnan(1.0) ? _4810 : (isnan(_4810) ? 1.0 : min(_4810, 1.0))) * (_2468 / ((_2472 * _2472) * 3.141590118408203125));
    float _2504 = (((_2481 * cbLight._m0[_2433].x) * _2494) * _2302) + ((((cbLight._m0[_2352].x * _2274) * _2405) * _2419) * _2316);
    float _2505 = (((_2481 * cbLight._m0[_2433].y) * _2494) * _2302) + ((((cbLight._m0[_2352].y * _2276) * _2405) * _2419) * _2316);
    float _2506 = (((_2481 * cbLight._m0[_2433].z) * _2494) * _2302) + ((((cbLight._m0[_2352].z * _2278) * _2405) * _2419) * _2316);
    float _2668;
    float _2670;
    float _2672;
    float _2674;
    float _2676;
    float _2678;
    if (_2283.y == 0u)
    {
        uvec4 _2624 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2625 = _2624.x;
        uint _2636 = uint((float(_2624.y) * floor(float(uint(cbSceneParam._m0[85u].y * _799) / _2625))) + floor(float(uint(cbSceneParam._m0[85u].x * _798) / _2625)));
        float _2646 = (log2(_2061 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2647 = isnan(0.0) ? _2646 : (isnan(_2646) ? 0.0 : max(_2646, 0.0));
        uint _2650 = uint(isnan(14.0) ? _2647 : (isnan(_2647) ? 14.0 : min(_2647, 14.0)));
        uvec4 _2655 = texelFetch(g_lightClusterGridBuffer, int(((_2650 << 2u) + (_2636 << 6u)) >> 2u));
        uint _2656 = _2655.x;
        uint _2657 = _2624.z;
        float _2812;
        float _2814;
        float _2816;
        float _2818;
        float _2820;
        float _2822;
        if (((((1u << ((_2657 >> 4u) & 15u)) + 4294967295u) & _2656) == 0u) || ((_2657 & 240u) == 0u))
        {
            _2812 = 0.0;
            _2814 = 0.0;
            _2816 = 0.0;
            _2818 = 0.0;
            _2820 = 0.0;
            _2822 = 0.0;
        }
        else
        {
            float _2813;
            float _2815;
            float _2817;
            float _2819;
            float _2821;
            float _2823;
            float _3046 = 0.0;
            float _3047 = 0.0;
            float _3048 = 0.0;
            float _3049 = 0.0;
            float _3050 = 0.0;
            float _3051 = 0.0;
            uint _3052 = 0u;
            uint _3061;
            bool _3062;
            for (;;)
            {
                _3061 = texelFetch(g_lightClassification, int((((_2650 << 5u) + (_2636 << 9u)) + (_3052 << 2u)) >> 2u)).x;
                _3062 = _3061 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_3062)
                {
                    frontier_phi_63_pred = _3051;
                    frontier_phi_63_pred_1 = _3050;
                    frontier_phi_63_pred_2 = _3049;
                    frontier_phi_63_pred_3 = _3048;
                    frontier_phi_63_pred_4 = _3047;
                    frontier_phi_63_pred_5 = _3046;
                }
                else
                {
                    float _3298;
                    float _3299;
                    float _3300;
                    float _3301;
                    float _3302;
                    float _3303;
                    uint _3304;
                    _3298 = _3046;
                    _3299 = _3047;
                    _3300 = _3048;
                    _3301 = _3049;
                    _3302 = _3050;
                    _3303 = _3051;
                    _3304 = _3061;
                    float _3213;
                    float _3214;
                    float _3215;
                    float _3216;
                    float _3217;
                    float _3218;
                    for (;;)
                    {
                        uint _3308 = uint(findLSB(_3304)) + (_3052 << 5u);
                        uint _3305 = (_3304 + 4294967295u) & _3304;
                        uint _3310 = _3308 * 48u;
                        vec4 _3324 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3310)).x, texelFetch(g_PointLightRenderingBuffer, int(_3310 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3310 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3310 + 3u)).x));
                        uint _3330 = (_3308 * 48u) + 4u;
                        vec4 _3343 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3330)).x, texelFetch(g_PointLightRenderingBuffer, int(_3330 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3330 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3330 + 3u)).x));
                        uint _3349 = (_3308 * 48u) + 8u;
                        vec3 _3360 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3349)).x, texelFetch(g_PointLightRenderingBuffer, int(_3349 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3349 + 2u)).x));
                        float _3364 = _3324.x - _2059;
                        float _3365 = _3324.y - _2060;
                        float _3366 = _3324.z - _2061;
                        float _3367 = dot(vec3(_3364, _3365, _3366), vec3(_3364, _3365, _3366));
                        float _3370 = inversesqrt(_3367);
                        float _3371 = _3370 * _3364;
                        float _3372 = _3370 * _3365;
                        float _3373 = _3370 * _3366;
                        float _3374 = dot(vec3(_856, _859, _862), vec3(_3371, _3372, _3373));
                        float _3379 = 1.0 - (_3367 * _3324.w);
                        float _4831 = isnan(0.0) ? _3379 : (isnan(_3379) ? 0.0 : max(_3379, 0.0));
                        float _3380 = isnan(1.0) ? _4831 : (isnan(_4831) ? 1.0 : min(_4831, 1.0));
                        float _3381 = sqrt(_3367) * _3343.w;
                        float _3384 = 1.39999997615814208984375 / (_3381 + 1.39999997615814208984375);
                        float _3385 = _3384 * _3384;
                        float _3388 = ((1.0 - _3385) * _3374) + _3385;
                        float _3391 = _3381 * _3381;
                        float _3395 = ((isnan(0.0) ? _3388 : (isnan(_3388) ? 0.0 : max(_3388, 0.0))) * _3380) / ((_3391 * 0.699999988079071044921875) + 1.0);
                        float _3399 = (-0.0) - _2059;
                        float _3400 = (-0.0) - _2060;
                        float _3401 = (-0.0) - _2061;
                        float _3405 = inversesqrt(dot(vec3(_3399, _3400, _3401), vec3(_3399, _3400, _3401)));
                        float _3406 = _3405 * _3399;
                        float _3407 = _3405 * _3400;
                        float _3408 = _3405 * _3401;
                        float _3415 = exp2(log2(1.0 / ((_3391 * 3.5) + 5.0)) * 0.25);
                        float _3416 = 1.0 - _924;
                        float _3423 = sqrt(1.0 - ((1.0 - (_3416 * _3416)) * (1.0 - (_3415 * _3415))));
                        float _3424 = _3423 * _3423;
                        float _3425 = _3424 * _3424;
                        float _3426 = _3406 + _3371;
                        float _3427 = _3407 + _3372;
                        float _3428 = _3408 + _3373;
                        float _3432 = inversesqrt(dot(vec3(_3426, _3427, _3428), vec3(_3426, _3427, _3428)));
                        float _3436 = dot(vec3(_856, _859, _862), vec3(_3406, _3407, _3408));
                        float _4847 = isnan(0.0) ? _3436 : (isnan(_3436) ? 0.0 : max(_3436, 0.0));
                        float _3439 = isnan(1.0) ? _4847 : (isnan(_4847) ? 1.0 : min(_4847, 1.0));
                        float _3440 = dot(vec3(_856, _859, _862), vec3(_3432 * _3426, _3432 * _3427, _3432 * _3428));
                        float _4858 = isnan(0.0) ? _3440 : (isnan(_3440) ? 0.0 : max(_3440, 0.0));
                        float _3443 = isnan(1.0) ? _4858 : (isnan(_4858) ? 1.0 : min(_4858, 1.0));
                        float _3447 = ((_3443 * _3443) * (_3425 + (-1.0))) + 1.0;
                        float _3448 = _3384 * _3424;
                        float _3449 = _3448 * _3448;
                        float _3452 = ((1.0 - _3449) * _3374) + _3449;
                        float _4869 = isnan(0.0) ? _3452 : (isnan(_3452) ? 0.0 : max(_3452, 0.0));
                        float _3453 = isnan(1.0) ? _4869 : (isnan(_4869) ? 1.0 : min(_4869, 1.0));
                        float _3454 = 1.0 - _3424;
                        float _3464 = (0.5 / (((_3453 * ((_3439 * _3454) + _3424)) + 9.9999999392252902907785028219223e-09) + (((_3453 * _3454) + _3424) * _3439))) * _3453;
                        float _4880 = isnan(0.0) ? _3464 : (isnan(_3464) ? 0.0 : max(_3464, 0.0));
                        float _3475 = (((_3425 * 3.1415927410125732421875) * (isnan(1.0) ? _4880 : (isnan(_4880) ? 1.0 : min(_4880, 1.0)))) / ((_3447 * _3447) * ((_3391 * 2.1991131305694580078125) + 3.141590118408203125))) * _3380;
                        _3216 = (_3395 * _3343.x) + _3301;
                        _3217 = (_3395 * _3343.y) + _3302;
                        _3218 = (_3395 * _3343.z) + _3303;
                        _3213 = (_3475 * _3360.x) + _3298;
                        _3214 = (_3475 * _3360.y) + _3299;
                        _3215 = (_3475 * _3360.z) + _3300;
                        if (_3305 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3298 = _3213;
                            _3299 = _3214;
                            _3300 = _3215;
                            _3301 = _3216;
                            _3302 = _3217;
                            _3303 = _3218;
                            _3304 = _3305;
                        }
                    }
                    frontier_phi_63_pred = _3218;
                    frontier_phi_63_pred_1 = _3217;
                    frontier_phi_63_pred_2 = _3216;
                    frontier_phi_63_pred_3 = _3215;
                    frontier_phi_63_pred_4 = _3214;
                    frontier_phi_63_pred_5 = _3213;
                }
                _2823 = frontier_phi_63_pred;
                _2821 = frontier_phi_63_pred_1;
                _2819 = frontier_phi_63_pred_2;
                _2817 = frontier_phi_63_pred_3;
                _2815 = frontier_phi_63_pred_4;
                _2813 = frontier_phi_63_pred_5;
                uint _3053 = _3052 + 1u;
                if (_3053 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3046 = _2813;
                    _3047 = _2815;
                    _3048 = _2817;
                    _3049 = _2819;
                    _3050 = _2821;
                    _3051 = _2823;
                    _3052 = _3053;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2812 = _2813;
            _2814 = _2815;
            _2816 = _2817;
            _2818 = _2819;
            _2820 = _2821;
            _2822 = _2823;
        }
        uvec4 _2826 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2827 = _2826.z;
        uint _2829 = (_2827 >> 8u) & 15u;
        float _3014;
        float _3016;
        float _3018;
        float _3020;
        float _3022;
        float _3024;
        if (((4294967295u << _2829) & _2656) == 0u)
        {
            _3014 = _2812;
            _3016 = _2814;
            _3018 = _2816;
            _3020 = _2818;
            _3022 = _2820;
            _3024 = _2822;
        }
        else
        {
            float _3039 = inversesqrt(dot(vec3(_2059, _2060, _2061), vec3(_2059, _2060, _2061)));
            float _3040 = _3039 * _2059;
            float _3041 = _3039 * _2060;
            float _3042 = _3039 * _2061;
            float frontier_phi_56_57_ladder;
            float frontier_phi_56_57_ladder_1;
            float frontier_phi_56_57_ladder_2;
            float frontier_phi_56_57_ladder_3;
            float frontier_phi_56_57_ladder_4;
            float frontier_phi_56_57_ladder_5;
            if (_2829 < ((_2827 >> 12u) & 15u))
            {
                float _3015;
                float _3017;
                float _3019;
                float _3021;
                float _3023;
                float _3025;
                float _3281 = _2812;
                float _3282 = _2814;
                float _3283 = _2816;
                float _3284 = _2818;
                float _3285 = _2820;
                float _3286 = _2822;
                uint _3287 = _2829;
                uint _3296;
                bool _3297;
                for (;;)
                {
                    _3296 = texelFetch(g_lightClassification, int((((_2650 << 5u) + (_2636 << 9u)) + (_3287 << 2u)) >> 2u)).x;
                    _3297 = _3296 == 0u;
                    float frontier_phi_75_pred;
                    float frontier_phi_75_pred_1;
                    float frontier_phi_75_pred_2;
                    float frontier_phi_75_pred_3;
                    float frontier_phi_75_pred_4;
                    float frontier_phi_75_pred_5;
                    if (_3297)
                    {
                        frontier_phi_75_pred = _3285;
                        frontier_phi_75_pred_1 = _3284;
                        frontier_phi_75_pred_2 = _3283;
                        frontier_phi_75_pred_3 = _3282;
                        frontier_phi_75_pred_4 = _3281;
                        frontier_phi_75_pred_5 = _3286;
                    }
                    else
                    {
                        float _3523;
                        float _3524;
                        float _3525;
                        float _3526;
                        float _3527;
                        float _3528;
                        float _3825;
                        float _3826;
                        float _3827;
                        float _3828;
                        float _3829;
                        float _3830;
                        float _3545 = _3281;
                        float _3546 = _3282;
                        float _3547 = _3283;
                        float _3548 = _3284;
                        float _3549 = _3285;
                        float _3550 = _3286;
                        uint _3551 = _3296;
                        uint _3552;
                        vec4 _3577;
                        float _3578;
                        vec4 _3593;
                        vec3 _3605;
                        vec4 _3620;
                        vec4 _3635;
                        float _3681;
                        bool _3682;
                        for (;;)
                        {
                            uint _3562 = ((_3287 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3551));
                            _3552 = (_3551 + 4294967295u) & _3551;
                            uint _3564 = _3562 * 40u;
                            _3577 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3564)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3564 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3564 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3564 + 3u)).x));
                            _3578 = _3577.w;
                            uint _3580 = (_3562 * 40u) + 4u;
                            _3593 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3580)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3580 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3580 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3580 + 3u)).x));
                            uint _3595 = (_3562 * 40u) + 8u;
                            _3605 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3595)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3595 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3595 + 2u)).x));
                            uint _3607 = (_3562 * 40u) + 16u;
                            _3620 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3607)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3607 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3607 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3607 + 3u)).x));
                            uint _3622 = (_3562 * 40u) + 20u;
                            _3635 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3622)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3622 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3622 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3622 + 3u)).x));
                            uint _3637 = (_3562 * 40u) + 24u;
                            vec4 _3650 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3637)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3637 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3637 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3637 + 3u)).x));
                            uint _3656 = (_3562 * 40u) + 28u;
                            vec4 _3669 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3656)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3656 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3656 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3656 + 3u)).x));
                            _3681 = fma(_2061, _3669.z, fma(_2060, _3669.y, _3669.x * _2059)) + _3669.w;
                            _3682 = !((fma(_2061, _3650.z, fma(_2060, _3650.y, _3650.x * _2059)) + _3650.w) <= 0.0);
                            float frontier_phi_84_pred;
                            float frontier_phi_84_pred_1;
                            float frontier_phi_84_pred_2;
                            float frontier_phi_84_pred_3;
                            float frontier_phi_84_pred_4;
                            float frontier_phi_84_pred_5;
                            if (_3682)
                            {
                                float _3709 = _3577.x - _2059;
                                float _3710 = _3577.y - _2060;
                                float _3711 = _3577.z - _2061;
                                float _3712 = dot(vec3(_3709, _3710, _3711), vec3(_3709, _3710, _3711));
                                float _3715 = inversesqrt(_3712);
                                float _3716 = _3715 * _3709;
                                float _3717 = _3715 * _3710;
                                float _3718 = _3715 * _3711;
                                float _3722 = 1.0 - (_3712 / (_3578 * _3578));
                                float _4891 = isnan(0.0) ? _3722 : (isnan(_3722) ? 0.0 : max(_3722, 0.0));
                                float _3723 = isnan(1.0) ? _4891 : (isnan(_4891) ? 1.0 : min(_4891, 1.0));
                                float _3727 = sqrt(_3712) * _3593.w;
                                float _3729 = 1.39999997615814208984375 / (_3727 + 1.39999997615814208984375);
                                float _3730 = _3729 * _3729;
                                float _3733 = ((1.0 - _3730) * dot(vec3(_3716, _3717, _3718), vec3(_856, _859, _862))) + _3730;
                                float _3736 = _3727 * _3727;
                                float _3740 = (fma(_2061, _3620.z, fma(_2060, _3620.y, _3620.x * _2059)) + _3620.w) / _3681;
                                float _3741 = (fma(_2061, _3635.z, fma(_2060, _3635.y, _3635.x * _2059)) + _3635.w) / _3681;
                                float _3745 = 1.0 - dot(vec2(_3740, _3741), vec2(_3740, _3741));
                                float _4907 = isnan(0.0) ? _3745 : (isnan(_3745) ? 0.0 : max(_3745, 0.0));
                                float _3746 = isnan(1.0) ? _4907 : (isnan(_4907) ? 1.0 : min(_4907, 1.0));
                                float _3747 = _3746 * (((isnan(0.0) ? _3733 : (isnan(_3733) ? 0.0 : max(_3733, 0.0))) * _3723) / ((_3736 * 0.699999988079071044921875) + 1.0));
                                float _3759 = exp2(log2(1.0 / ((_3736 * 3.5) + 5.0)) * 0.25);
                                float _3760 = 1.0 - _924;
                                float _3767 = sqrt(1.0 - ((1.0 - (_3760 * _3760)) * (1.0 - (_3759 * _3759))));
                                float _3768 = _3767 * _3767;
                                float _3769 = _3768 * _3768;
                                float _3770 = _3716 - _3040;
                                float _3771 = _3717 - _3041;
                                float _3772 = _3718 - _3042;
                                float _3776 = inversesqrt(dot(vec3(_3770, _3771, _3772), vec3(_3770, _3771, _3772)));
                                float _3780 = dot(vec3(_856, _859, _862), vec3((-0.0) - _3040, (-0.0) - _3041, (-0.0) - _3042));
                                float _4918 = isnan(0.0) ? _3780 : (isnan(_3780) ? 0.0 : max(_3780, 0.0));
                                float _3783 = isnan(1.0) ? _4918 : (isnan(_4918) ? 1.0 : min(_4918, 1.0));
                                float _3784 = dot(vec3(_856, _859, _862), vec3(_3776 * _3770, _3776 * _3771, _3776 * _3772));
                                float _4929 = isnan(0.0) ? _3784 : (isnan(_3784) ? 0.0 : max(_3784, 0.0));
                                float _3787 = isnan(1.0) ? _4929 : (isnan(_4929) ? 1.0 : min(_4929, 1.0));
                                float _3791 = ((_3787 * _3787) * (_3769 + (-1.0))) + 1.0;
                                float _3792 = _3729 * _3768;
                                float _3793 = _3792 * _3792;
                                float _3799 = ((1.0 - _3793) * dot(vec3(_856, _859, _862), vec3(_3716, _3717, _3718))) + _3793;
                                float _4940 = isnan(0.0) ? _3799 : (isnan(_3799) ? 0.0 : max(_3799, 0.0));
                                float _3800 = isnan(1.0) ? _4940 : (isnan(_4940) ? 1.0 : min(_4940, 1.0));
                                float _3801 = 1.0 - _3768;
                                float _3811 = (0.5 / (((_3800 * ((_3783 * _3801) + _3768)) + 9.9999999392252902907785028219223e-09) + (((_3800 * _3801) + _3768) * _3783))) * _3800;
                                float _4951 = isnan(0.0) ? _3811 : (isnan(_3811) ? 0.0 : max(_3811, 0.0));
                                float _3821 = (_3746 * _3723) * (((_3769 * 3.1415927410125732421875) * (isnan(1.0) ? _4951 : (isnan(_4951) ? 1.0 : min(_4951, 1.0)))) / ((_3791 * _3791) * ((_3736 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_84_pred = _3747 * _3593.z;
                                frontier_phi_84_pred_1 = _3747 * _3593.y;
                                frontier_phi_84_pred_2 = _3747 * _3593.x;
                                frontier_phi_84_pred_3 = _3821 * _3605.z;
                                frontier_phi_84_pred_4 = _3821 * _3605.y;
                                frontier_phi_84_pred_5 = _3821 * _3605.x;
                            }
                            else
                            {
                                frontier_phi_84_pred = 0.0;
                                frontier_phi_84_pred_1 = 0.0;
                                frontier_phi_84_pred_2 = 0.0;
                                frontier_phi_84_pred_3 = 0.0;
                                frontier_phi_84_pred_4 = 0.0;
                                frontier_phi_84_pred_5 = 0.0;
                            }
                            _3830 = frontier_phi_84_pred;
                            _3829 = frontier_phi_84_pred_1;
                            _3828 = frontier_phi_84_pred_2;
                            _3827 = frontier_phi_84_pred_3;
                            _3826 = frontier_phi_84_pred_4;
                            _3825 = frontier_phi_84_pred_5;
                            _3526 = _3828 + _3548;
                            _3527 = _3829 + _3549;
                            _3528 = _3830 + _3550;
                            _3523 = _3825 + _3545;
                            _3524 = _3826 + _3546;
                            _3525 = _3827 + _3547;
                            if (_3552 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3545 = _3523;
                                _3546 = _3524;
                                _3547 = _3525;
                                _3548 = _3526;
                                _3549 = _3527;
                                _3550 = _3528;
                                _3551 = _3552;
                                continue;
                            }
                        }
                        frontier_phi_75_pred = _3527;
                        frontier_phi_75_pred_1 = _3526;
                        frontier_phi_75_pred_2 = _3525;
                        frontier_phi_75_pred_3 = _3524;
                        frontier_phi_75_pred_4 = _3523;
                        frontier_phi_75_pred_5 = _3528;
                    }
                    _3023 = frontier_phi_75_pred;
                    _3021 = frontier_phi_75_pred_1;
                    _3019 = frontier_phi_75_pred_2;
                    _3017 = frontier_phi_75_pred_3;
                    _3015 = frontier_phi_75_pred_4;
                    _3025 = frontier_phi_75_pred_5;
                    uint _3288 = _3287 + 1u;
                    if (_3288 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3281 = _3015;
                        _3282 = _3017;
                        _3283 = _3019;
                        _3284 = _3021;
                        _3285 = _3023;
                        _3286 = _3025;
                        _3287 = _3288;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_56_57_ladder = _3025;
                frontier_phi_56_57_ladder_1 = _3023;
                frontier_phi_56_57_ladder_2 = _3021;
                frontier_phi_56_57_ladder_3 = _3019;
                frontier_phi_56_57_ladder_4 = _3017;
                frontier_phi_56_57_ladder_5 = _3015;
            }
            else
            {
                frontier_phi_56_57_ladder = _2822;
                frontier_phi_56_57_ladder_1 = _2820;
                frontier_phi_56_57_ladder_2 = _2818;
                frontier_phi_56_57_ladder_3 = _2816;
                frontier_phi_56_57_ladder_4 = _2814;
                frontier_phi_56_57_ladder_5 = _2812;
            }
            _3014 = frontier_phi_56_57_ladder_5;
            _3016 = frontier_phi_56_57_ladder_4;
            _3018 = frontier_phi_56_57_ladder_3;
            _3020 = frontier_phi_56_57_ladder_2;
            _3022 = frontier_phi_56_57_ladder_1;
            _3024 = frontier_phi_56_57_ladder;
        }
        float _3029 = isnan(1.0) ? _900 : (isnan(_900) ? 1.0 : min(_900, 1.0));
        _2668 = (_3029 * _3020) + _2348;
        _2670 = (_3029 * _3022) + _2349;
        _2672 = (_3029 * _3024) + _2350;
        _2674 = ((_3014 * 0.039999999105930328369140625) * _3029) + _2504;
        _2676 = ((_3016 * 0.039999999105930328369140625) * _3029) + _2505;
        _2678 = ((_3018 * 0.039999999105930328369140625) * _3029) + _2506;
    }
    else
    {
        _2668 = _2348;
        _2670 = _2349;
        _2672 = _2350;
        _2674 = _2504;
        _2676 = _2505;
        _2678 = _2506;
    }
    float _2692 = cbSceneParam._m0[86u].x - (cbSceneParam._m0[85u].z * 0.5);
    float _2693 = cbSceneParam._m0[86u].y - (cbSceneParam._m0[85u].w * 0.5);
    float _2694 = cbSceneParam._m0[86u].x * (_1971 + ((_923 * cbMtdParam._m0[11u].y) * dot(vec3(_834, _835, _836), vec3(_222, _223, _224))));
    float _2695 = isnan(_2692) ? _2694 : (isnan(_2694) ? _2692 : min(_2694, _2692));
    float _2696 = isnan(_2693) ? _799 : (isnan(_799) ? _2693 : min(_799, _2693));
    vec4 _2698 = textureLod(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_2695, _2696), 0.0);
    float _2700 = _2698.x;
    bool _2720 = ((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _2700)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2700))) > _722;
    float _2721 = _2720 ? _2695 : _798;
    float _2722 = _2720 ? _2696 : _799;
    vec4 _2724 = texture(sampler2D(g_RefractionTexture, SS_ClampLinear), vec2(_2721, _2722));
    vec4 _2729 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_2721, _2722));
    float _2731 = _2729.x;
    bool _2736 = floatBitsToUint(cbSceneParam._m0[88u]).x != 0u;
    float _2745 = (-0.0) - cbSceneParam._m0[2u].z;
    float _2751 = (_2736 ? (_2745 / (cbSceneParam._m0[2u].x - _2731)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2731))) - _722;
    float _2753 = cbMtdParam._m0[25u].y + cbMtdParam._m0[23u].w;
    float _2754 = cbMtdParam._m0[25u].z + cbMtdParam._m0[24u].x;
    float _2755 = cbMtdParam._m0[25u].w + cbMtdParam._m0[24u].y;
    bool _2761 = floatBitsToUint(cbSceneParam._m0[69u]).z != 0u;
    float _2765 = (isnan(_2751) ? 0.0 : (isnan(0.0) ? _2751 : max(0.0, _2751))) * (-1.44269502162933349609375);
    float _4982 = isnan(0.0) ? _886 : (isnan(_886) ? 0.0 : max(_886, 0.0));
    float _4993 = isnan(0.0) ? _887 : (isnan(_887) ? 0.0 : max(_887, 0.0));
    float _5004 = isnan(0.0) ? _888 : (isnan(_888) ? 0.0 : max(_888, 0.0));
    float _2915;
    float _2916;
    float _2917;
    if ((1.0 - _684) > 0.00999999977648258209228515625)
    {
        vec4 _2834 = textureLod(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_2721, _2722), 0.0);
        float _2836 = _2834.x;
        float _2842 = (_2736 ? (_2745 / (cbSceneParam._m0[2u].x - _2836)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2836))) - _722;
        uint _2848 = floatBitsToUint(cbInstanceData._m0[_2280]).x * 14u;
        uint _2854 = _2848 + 4u;
        float _2863 = dot(vec3(cbLight._m0[_2848].xyz), vec3(_243, _244, _245));
        float _2871 = dot(vec3((-0.0) - _778, (-0.0) - _779, (-0.0) - _780), vec3((-0.0) - _243, (-0.0) - _244, (-0.0) - _245));
        float _2876 = ((isnan(0.0) ? _2871 : (isnan(_2871) ? 0.0 : max(_2871, 0.0))) / (isnan(0.001000000047497451305389404296875) ? _2863 : (isnan(_2863) ? 0.001000000047497451305389404296875 : max(_2863, 0.001000000047497451305389404296875)))) + 1.0;
        float _2878 = (-0.0) - ((isnan(_2842) ? 0.0 : (isnan(0.0) ? _2842 : max(0.0, _2842))) * _2876);
        _2915 = _2761 ? 0.0 : ((((cbMtdParam._m0[23u].w * 0.079577468335628509521484375) * cbLight._m0[_2854].x) / ((_2876 * _2753) + 9.9999999747524270787835121154785e-07)) * (1.0 - exp2((_2753 * 1.44269502162933349609375) * _2878)));
        _2916 = _2761 ? 0.0 : ((((cbMtdParam._m0[24u].x * 0.079577468335628509521484375) * cbLight._m0[_2854].y) / ((_2876 * _2754) + 9.9999999747524270787835121154785e-07)) * (1.0 - exp2((_2754 * 1.44269502162933349609375) * _2878)));
        _2917 = _2761 ? 0.0 : ((((cbMtdParam._m0[24u].y * 0.079577468335628509521484375) * cbLight._m0[_2854].z) / ((_2876 * _2755) + 9.9999999747524270787835121154785e-07)) * (1.0 - exp2((_2755 * 1.44269502162933349609375) * _2878)));
    }
    else
    {
        _2915 = 0.0;
        _2916 = 0.0;
        _2917 = 0.0;
    }
    float _2934 = 0.959999978542327880859375 - (exp2(log2(1.0 - _915) * 5.0) * 0.959999978542327880859375);
    float _2935 = (_2915 + ((exp2(_2765 * (_2761 ? 0.0 : _2753)) * _2724.x) * cbSceneParam._m0[72u].w)) * _2934;
    float _2936 = (_2916 + ((exp2(_2765 * (_2761 ? 0.0 : _2754)) * _2724.y) * cbSceneParam._m0[72u].w)) * _2934;
    float _2937 = (_2917 + ((exp2(_2765 * (_2761 ? 0.0 : _2755)) * _2724.z) * cbSceneParam._m0[72u].w)) * _2934;
    float _2945 = (_2935 + (((((_1948 * _1996.x) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _1954 : (isnan(_1954) ? 0.0 : max(_1954, 0.0))) * _1743) * _2012)) + _2674) * cbPerFrame._m0[3u].x)) + ((((isnan(1.0) ? _4982 : (isnan(_4982) ? 1.0 : min(_4982, 1.0))) * (_2668 + ((isnan(0.0) ? _1664 : (isnan(_1664) ? 0.0 : max(_1664, 0.0))) * _900))) - _2935) * _684);
    float _2947 = (_2936 + (((((_1948 * _1996.y) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _1957 : (isnan(_1957) ? 0.0 : max(_1957, 0.0))) * _1743) * _2012)) + _2676) * cbPerFrame._m0[3u].x)) + ((((isnan(1.0) ? _4993 : (isnan(_4993) ? 1.0 : min(_4993, 1.0))) * (_2670 + ((isnan(0.0) ? _1667 : (isnan(_1667) ? 0.0 : max(_1667, 0.0))) * _900))) - _2936) * _684);
    float _2949 = (_2937 + (((((_1948 * _1996.z) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _1960 : (isnan(_1960) ? 0.0 : max(_1960, 0.0))) * _1743) * _2012)) + _2678) * cbPerFrame._m0[3u].x)) + ((((isnan(1.0) ? _5004 : (isnan(_5004) ? 1.0 : min(_5004, 1.0))) * (_2672 + ((isnan(0.0) ? _1670 : (isnan(_1670) ? 0.0 : max(_1670, 0.0))) * _900))) - _2937) * _684);
    float _2954 = cbInstanceData._m0[_875 + 6u].w * (isnan(1.0) ? _4158 : (isnan(_4158) ? 1.0 : min(_4158, 1.0)));
    float _2959 = _798 / cbSceneParam._m0[86u].x;
    float _2960 = _799 / cbSceneParam._m0[86u].y;
    vec4 _2974 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2959, _2960, (log2((isnan(cbSceneParam._m0[77u].w) ? _722 : (isnan(_722) ? cbSceneParam._m0[77u].w : min(_722, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2976 = _2974.x;
    float _2977 = _2974.y;
    float _2978 = _2974.z;
    float _2979 = _2974.w;
    float _3102;
    float _3104;
    float _3106;
    float _3108;
    if (_722 > cbSceneParam._m0[78u].w)
    {
        float _3067 = isnan(_722) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _722 : min(cbSceneParam._m0[80u].w, _722));
        float _3068 = _3067 / _722;
        float _3079 = _3068 * _771;
        float _3080 = _772 * _3068;
        float _3081 = (-0.0) - _3080;
        float _3082 = _3068 * _773;
        float _3084 = (cbSceneParam._m0[77u].w * _3081) / _3067;
        float _3085 = _3084 + cbSceneParam._m0[79u].w;
        float _3086 = cbSceneParam._m0[79u].w - _3080;
        float _3092 = sqrt(((_3079 * _3079) + (_3080 * _3080)) + (_3082 * _3082));
        float _3095 = (1.0 - (cbSceneParam._m0[77u].w / _3067)) * _3092;
        float _3100 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3101 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3480;
        if (abs((_3081 - _3084) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3480 = ((((_3085 > 0.0) ? exp2(_3100 * _3085) : (2.0 - exp2(_3101 * _3085))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3095;
        }
        else
        {
            float _3238 = 1.0 / cbSceneParam._m0[80u].x;
            float _3239 = isnan(_3086) ? _3085 : (isnan(_3085) ? _3086 : max(_3085, _3086));
            float _3240 = isnan(_3086) ? _3085 : (isnan(_3085) ? _3086 : min(_3085, _3086));
            float _3249 = isnan(0.0) ? _3239 : (isnan(_3239) ? 0.0 : min(_3239, 0.0));
            float _3250 = isnan(0.0) ? _3240 : (isnan(_3240) ? 0.0 : min(_3240, 0.0));
            _3480 = ((abs(_3092 / _3081) * cbSceneParam._m0[80u].y) * ((((_3249 - _3250) * 2.0) - ((exp2(_3100 * (isnan(0.0) ? _3239 : (isnan(_3239) ? 0.0 : max(_3239, 0.0)))) - exp2(_3100 * (isnan(0.0) ? _3240 : (isnan(_3240) ? 0.0 : max(_3240, 0.0))))) * _3238)) - ((exp2(_3101 * _3249) - exp2(_3101 * _3250)) * _3238))) + (_3095 * cbSceneParam._m0[80u].z);
        }
        vec4 _3482 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2959, _2960, 1.0), 0.0);
        float _3491 = exp2((_3480 * (-1.44269502162933349609375)) * (1.0 - _3482.w));
        float _3492 = log2(_3491);
        float _3508 = log2(_2979);
        _3102 = (exp2(_3508 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3492 * cbSceneParam._m0[78u].x)) * _3482.x) / cbSceneParam._m0[78u].x)) + _2976;
        _3104 = (exp2(_3508 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3492 * cbSceneParam._m0[78u].y)) * _3482.y) / cbSceneParam._m0[78u].y)) + _2977;
        _3106 = (exp2(_3508 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3492 * cbSceneParam._m0[78u].z)) * _3482.z) / cbSceneParam._m0[78u].z)) + _2978;
        _3108 = _3491 * _2979;
    }
    else
    {
        _3102 = _2976;
        _3104 = _2977;
        _3106 = _2978;
        _3108 = _2979;
    }
    bool _3518;
    float _3163;
    vec4 _3166;
    float _3168;
    vec4 _3170;
    float _3178;
    float _3179;
    float _3180;
    float _3181;
    bool _3191;
    for (;;)
    {
        bool _3120 = roundEven(cbMatDynParam._m0[0u].y) == 3.0;
        float _3121 = log2(_3108);
        float _3128 = exp2(_3121 * cbSceneParam._m0[78u].x) * _2945;
        float _3129 = exp2(_3121 * cbSceneParam._m0[78u].y) * _2947;
        float _3130 = exp2(_3121 * cbSceneParam._m0[78u].z) * _2949;
        vec4 _3138 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_798, _799));
        float _3140 = _3138.x;
        float _3161 = (((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _3140)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _3140))) - _722) * 3.0;
        float _5070 = isnan(0.0) ? _3161 : (isnan(_3161) ? 0.0 : max(_3161, 0.0));
        _3163 = _2954 * (isnan(1.0) ? _5070 : (isnan(_5070) ? 1.0 : min(_5070, 1.0)));
        float _3164 = _787 + (-0.5);
        _3166 = cbMtdParam._m0[1u];
        _3168 = _3166.y * _3164;
        _3170 = cbMatDynParam._m0[0u];
        float _3177 = (roundEven(_3170.y) != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3178 = _3177 * (_3120 ? _3128 : (_3128 + (cbSceneParam._m0[72u].w * _3102)));
        _3179 = _3177 * (_3120 ? _3129 : (_3129 + (cbSceneParam._m0[72u].w * _3104)));
        _3180 = _3177 * (_3120 ? _3130 : (_3130 + (cbSceneParam._m0[72u].w * _3106)));
        _3181 = _3164 * 0.999000012874603271484375;
        _3191 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3191)
        {
            if ((cbInstanceData._m0[_875 + 7u].x + _3181) < 0.5)
            {
                _3518 = true;
                break;
            }
        }
        uint _3273 = _876 + uint(_3170.w);
        if ((cbInstanceData._m0[_3273].w < 1.0) && ((cbInstanceData._m0[_3273].w + _3181) < 0.5))
        {
            _3518 = true;
            break;
        }
        if ((_3168 + 1.0) < _3166.x)
        {
            _3518 = true;
            break;
        }
        _3518 = false;
        break;
    }
    float _3536;
    if (_3518)
    {
        discard_state = true;
        _3536 = 0.0;
    }
    else
    {
        _3536 = _3163;
    }
    SV_Target.x = _3178;
    SV_Target.y = _3179;
    SV_Target.z = _3180;
    SV_Target.w = _3536;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _3163;
    discard_exit();
}


