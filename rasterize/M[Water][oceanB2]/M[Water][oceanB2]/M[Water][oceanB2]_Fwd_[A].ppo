#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[28];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 44) uniform texture2D g_RLRTexture;
layout(set = 0, binding = 55) uniform texture2D g_RefractionTexture;
layout(set = 0, binding = 57) uniform texture2D g_WaterSimulationNormalTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 56) uniform texture2D g_DepthTexture;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Water_oceanB2_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_Water_oceanB2_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_Water_oceanB2_snp_0_Texture2D_2;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 7) uniform sampler SS_ClampPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 6) in vec3 TEXCOORD_8;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1301;
float _3690;
float _3691;
float _3692;
float _3693;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _210 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _211 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _212 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _217 = inversesqrt(dot(vec3(_210, _211, _212), vec3(_210, _211, _212)));
    float _218 = _217 * _210;
    float _219 = _217 * _211;
    float _220 = _217 * _212;
    float _224 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _225 = _224 * NORMAL.x;
    float _226 = _224 * NORMAL.y;
    float _227 = _224 * NORMAL.z;
    float _231 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _239;
    float _240;
    float _241;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _239 = (-0.0) - _225;
        _240 = (-0.0) - _226;
        _241 = (-0.0) - _227;
    }
    else
    {
        _239 = _225;
        _240 = _226;
        _241 = _227;
    }
    float _285 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _295 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _285);
    float _296 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _285);
    float _297 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _285);
    float _314 = cbMtdParam._m0[11u].z * cbPerFrame._m0[22u].x;
    vec4 _331 = texture(sampler2D(M_Water_oceanB2_snp_0_Texture2D_2, SS_BumpMap), vec2((((_314 * cbMtdParam._m0[20u].w) + TEXCOORD.x) * cbTextureTilingScale._m0[2u].x) + cbTextureTilingScale._m0[2u].z, (((_314 * cbMtdParam._m0[21u].x) + TEXCOORD.y) * cbTextureTilingScale._m0[2u].y) + cbTextureTilingScale._m0[2u].w));
    float _334 = _331.x;
    float _335 = _331.y;
    float _355 = cbMtdParam._m0[13u].y - cbMtdParam._m0[13u].x;
    float _357 = (sqrt(((_295 * _295) + (_296 * _296)) + (_297 * _297)) - cbMtdParam._m0[13u].x) / (isnan(0.0) ? _355 : (isnan(_355) ? 0.0 : max(_355, 0.0)));
    float _364 = (cbMtdParam._m0[13u].w + _357) * cbMtdParam._m0[15u].y;
    float _3707 = isnan(0.0) ? _364 : (isnan(_364) ? 0.0 : max(_364, 0.0));
    vec4 _378 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(cbSceneParam._m0[85u].z * gl_FragCoord.x, cbSceneParam._m0[85u].w * gl_FragCoord.y));
    float _380 = _378.x;
    bool _387 = floatBitsToUint(cbSceneParam._m0[88u]).x != 0u;
    float _403 = ((_387 ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _380)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _380))) - POSITION_1.w) / (((isnan(1.0) ? _3707 : (isnan(_3707) ? 1.0 : min(_3707, 1.0))) * (cbMtdParam._m0[12u].w - cbMtdParam._m0[12u].y)) + cbMtdParam._m0[12u].y);
    float _3718 = isnan(0.0) ? _403 : (isnan(_403) ? 0.0 : max(_403, 0.0));
    float _404 = isnan(1.0) ? _3718 : (isnan(_3718) ? 1.0 : min(_3718, 1.0));
    float _410 = 1.0 - (isnan(cbMtdParam._m0[16u].z) ? _404 : (isnan(_404) ? cbMtdParam._m0[16u].z : max(_404, cbMtdParam._m0[16u].z)));
    float _3734 = isnan(0.0) ? _357 : (isnan(_357) ? 0.0 : max(_357, 0.0));
    float _411 = isnan(1.0) ? _3734 : (isnan(_3734) ? 1.0 : min(_3734, 1.0));
    float _412 = _331.z - _411;
    float _3745 = isnan(0.0) ? _412 : (isnan(_412) ? 0.0 : max(_412, 0.0));
    float _413 = isnan(1.0) ? _3745 : (isnan(_3745) ? 1.0 : min(_3745, 1.0));
    float _414 = _413 * 0.004999999888241291046142578125;
    float _416 = _413 * (-0.004999999888241291046142578125);
    vec4 _449 = texture(sampler2D(M_Water_oceanB2_snp_0_Texture2D_0, SS_BumpMap), vec2(((((cbMtdParam._m0[18u].y * _314) + _414) + (cbMtdParam._m0[19u].w * TEXCOORD.x)) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((((cbMtdParam._m0[18u].z * _314) + _416) + (cbMtdParam._m0[20u].x * TEXCOORD.y)) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    float _453 = _449.z;
    vec4 _472 = texture(sampler2D(M_Water_oceanB2_snp_0_Texture2D_0, SS_BumpMap), vec2(((((cbMtdParam._m0[17u].w * _314) + _414) + (cbMtdParam._m0[20u].y * TEXCOORD.x)) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((((cbMtdParam._m0[18u].x * _314) + _416) + (cbMtdParam._m0[20u].z * TEXCOORD.y)) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    float _476 = _472.z;
    float _479 = (_410 - _331.w) + (isnan(_476) ? _453 : (isnan(_453) ? _476 : max(_453, _476)));
    float _3761 = isnan(0.0) ? _479 : (isnan(_479) ? 0.0 : max(_479, 0.0));
    float _483 = (TEXCOORD_5.x - _410) + cbMtdParam._m0[16u].y;
    float _484 = _483 * (isnan(1.0) ? _3761 : (isnan(_3761) ? 1.0 : min(_3761, 1.0)));
    float _496 = (_484 + cbMtdParam._m0[9u].x) + (cbMtdParam._m0[10u].x * _413);
    float _497 = (_484 + cbMtdParam._m0[9u].y) + (cbMtdParam._m0[10u].y * _413);
    float _498 = (_484 + cbMtdParam._m0[9u].z) + (cbMtdParam._m0[10u].z * _413);
    float _3772 = isnan(0.0) ? _483 : (isnan(_483) ? 0.0 : max(_483, 0.0));
    float _500 = 1.0 - (isnan(1.0) ? _3772 : (isnan(_3772) ? 1.0 : min(_3772, 1.0)));
    float _507 = ((_500 - _496) * _411) + _496;
    float _508 = ((_500 - _497) * _411) + _497;
    float _509 = ((_500 - _498) * _411) + _498;
    float _514 = _357 / cbMtdParam._m0[15u].w;
    float _3783 = isnan(0.0) ? _514 : (isnan(_514) ? 0.0 : max(_514, 0.0));
    float _517 = (1.0 - (isnan(1.0) ? _3783 : (isnan(_3783) ? 1.0 : min(_3783, 1.0)))) * cbMtdParam._m0[15u].z;
    float _530 = (cbMtdParam._m0[15u].x + _357) * cbMtdParam._m0[14u].y;
    float _3794 = isnan(0.0) ? _530 : (isnan(_530) ? 0.0 : max(_530, 0.0));
    float _534 = ((isnan(1.0) ? _3794 : (isnan(_3794) ? 1.0 : min(_3794, 1.0))) * (cbMtdParam._m0[12u].z - cbMtdParam._m0[11u].x)) + cbMtdParam._m0[11u].x;
    float _3805 = isnan(0.0) ? TEXCOORD_5.y : (isnan(TEXCOORD_5.y) ? 0.0 : max(TEXCOORD_5.y, 0.0));
    float _535 = isnan(1.0) ? _3805 : (isnan(_3805) ? 1.0 : min(_3805, 1.0));
    float _544 = _357 / cbMtdParam._m0[14u].w;
    float _3816 = isnan(0.0) ? _544 : (isnan(_544) ? 0.0 : max(_544, 0.0));
    float _545 = isnan(1.0) ? _3816 : (isnan(_3816) ? 1.0 : min(_3816, 1.0));
    vec4 _565 = texture(sampler2D(M_Water_oceanB2_snp_0_Texture2D_1, SS_BumpMap), vec2((((cbMtdParam._m0[21u].y * _314) + TEXCOORD.z) * cbTextureTilingScale._m0[1u].x) + cbTextureTilingScale._m0[1u].z, (((cbMtdParam._m0[21u].z * _314) + TEXCOORD.w) * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w));
    float _574 = ((_472.x + (-0.5)) * 0.5) + _449.x;
    float _575 = ((_472.y + (-0.5)) * 0.5) + _449.y;
    float _583 = _413 * 0.119999997317790985107421875;
    float _585 = _413 * (-0.100000001490116119384765625);
    float _595 = cbMtdParam._m0[22u].y * TEXCOORD.x;
    float _596 = cbMtdParam._m0[22u].z * TEXCOORD.y;
    vec4 _605 = texture(sampler2D(M_Water_oceanB2_snp_0_Texture2D_0, SS_BumpMap), vec2(((((cbMtdParam._m0[21u].w * _314) + _583) + _595) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((((cbMtdParam._m0[22u].x * _314) + _585) + _596) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    vec4 _623 = texture(sampler2D(M_Water_oceanB2_snp_0_Texture2D_0, SS_BumpMap), vec2((((_595 + _583) + (cbMtdParam._m0[22u].w * _314)) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, (((_596 + _585) + (cbMtdParam._m0[23u].x * _314)) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    float _635 = (((0.5 - _574) * 0.10999999940395355224609375) + _574) + (((_605.x + (-1.0)) + _623.x) * cbMtdParam._m0[16u].x);
    float _636 = (((0.5 - _575) * 0.10999999940395355224609375) + _575) + (((_605.y + (-1.0)) + _623.y) * cbMtdParam._m0[16u].x);
    float _641 = ((_565.x - _635) * _545) + _635;
    float _642 = ((_565.y - _636) * _545) + _636;
    float _644 = _357 / cbMtdParam._m0[14u].z;
    float _3827 = isnan(0.0) ? _644 : (isnan(_644) ? 0.0 : max(_644, 0.0));
    float _645 = isnan(1.0) ? _3827 : (isnan(_3827) ? 1.0 : min(_3827, 1.0));
    float _662 = ((((_535 * (0.5 - _334)) + _334) + (((_641 + (-0.5)) + ((0.5 - _641) * _645)) * 0.60000002384185791015625)) * 2.0) + (-1.0);
    float _663 = ((((_535 * (0.5 - _335)) + _335) + (((_642 + (-0.5)) + ((0.5 - _642) * _645)) * 0.60000002384185791015625)) * 2.0) + (-1.0);
    float _664 = dot(vec2(_662, _663), vec2(_662, _663));
    float _3838 = isnan(0.0) ? _664 : (isnan(_664) ? 0.0 : max(_664, 0.0));
    float _669 = sqrt(1.0 - (isnan(1.0) ? _3838 : (isnan(_3838) ? 1.0 : min(_3838, 1.0))));
    float _677 = (cbMtdParam._m0[13u].z + _357) * cbMtdParam._m0[14u].x;
    float _3849 = isnan(0.0) ? _677 : (isnan(_677) ? 0.0 : max(_677, 0.0));
    float _679 = (isnan(1.0) ? _3849 : (isnan(_3849) ? 1.0 : min(_3849, 1.0))) * cbMtdParam._m0[17u].x;
    float _3860 = isnan(0.0) ? _679 : (isnan(_679) ? 0.0 : max(_679, 0.0));
    float _680 = isnan(1.0) ? _3860 : (isnan(_3860) ? 1.0 : min(_3860, 1.0));
    float _695 = fma(_669, _239, fma(_663, _231 * TANGENT.x, _662 * _218));
    float _698 = fma(_669, _240, fma(_663, _231 * TANGENT.y, _662 * _219));
    float _701 = fma(_669, _241, fma(_663, _231 * TANGENT.z, _662 * _220));
    float _705 = inversesqrt(dot(vec3(_695, _698, _701), vec3(_695, _698, _701)));
    float _706 = _705 * _695;
    float _707 = _705 * _698;
    float _708 = _705 * _701;
    float _3871 = isnan(0.0) ? _517 : (isnan(_517) ? 0.0 : max(_517, 0.0));
    float _3882 = isnan(0.0) ? _534 : (isnan(_534) ? 0.0 : max(_534, 0.0));
    float _710 = isnan(1.0) ? _3882 : (isnan(_3882) ? 1.0 : min(_3882, 1.0));
    float _3893 = isnan(0.0) ? _507 : (isnan(_507) ? 0.0 : max(_507, 0.0));
    float _3904 = isnan(0.0) ? _508 : (isnan(_508) ? 0.0 : max(_508, 0.0));
    float _3915 = isnan(0.0) ? _509 : (isnan(_509) ? 0.0 : max(_509, 0.0));
    float _718 = _387 ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _758 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _767 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _758);
    float _768 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _758);
    float _769 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _758);
    float _773 = inversesqrt(dot(vec3(_767, _768, _769), vec3(_767, _768, _769)));
    float _774 = _767 * _773;
    float _775 = _768 * _773;
    float _776 = _769 * _773;
    vec4 _781 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _783 = _781.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _982 = sqrt(((_767 * _767) + (_768 * _768)) + (_769 * _769));
        float _988 = (cbMatDynParam._m0[5u].x * _982) + cbMatDynParam._m0[5u].y;
        float _3926 = isnan(0.0) ? _988 : (isnan(_988) ? 0.0 : max(_988, 0.0));
        float _989 = isnan(1.0) ? _3926 : (isnan(_3926) ? 1.0 : min(_3926, 1.0));
        float _993 = (cbMatDynParam._m0[5u].z * _982) + cbMatDynParam._m0[5u].w;
        float _3937 = isnan(0.0) ? _993 : (isnan(_993) ? 0.0 : max(_993, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3937 : (isnan(_3937) ? 1.0 : min(_3937, 1.0))) - _989)) + _989) < ((_783 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _794 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _795 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _797 = texture(sampler2D(g_WaterSimulationNormalTexture, SS_ClampLinear), vec2(TEXCOORD_8.x, TEXCOORD_8.y));
    float _806 = (_797.x * 2.0) + (-1.0);
    float _807 = (_797.y * 2.0) + (-1.0);
    float _808 = (_797.z * 2.0) + (-1.0);
    float _812 = inversesqrt(dot(vec3(_806, _807, _808), vec3(_806, _807, _808)));
    float _823 = ((TEXCOORD_8.y >= 1.0) || (((TEXCOORD_8.x <= 0.0) || (TEXCOORD_8.x >= 1.0)) || (TEXCOORD_8.y <= 0.0))) ? 0.0 : _797.w;
    float _830 = (((_806 * _812) - _706) * _823) + _706;
    float _831 = (((_807 * _812) - _707) * _823) + _707;
    float _832 = (((_808 * _812) - _708) * _823) + _708;
    float _852 = fma(_832, cbSceneParam._m0[5u].z, fma(_831, cbSceneParam._m0[5u].y, _830 * cbSceneParam._m0[5u].x));
    float _855 = fma(_832, cbSceneParam._m0[6u].z, fma(_831, cbSceneParam._m0[6u].y, _830 * cbSceneParam._m0[6u].x));
    float _858 = fma(_832, cbSceneParam._m0[7u].z, fma(_831, cbSceneParam._m0[7u].y, _830 * cbSceneParam._m0[7u].x));
    uint _871 = uint(roundEven(NORMAL.w)) * 13u;
    uint _872 = _871 + 9u;
    uint _873 = _872 + uint(cbMatDynParam._m0[0u].w);
    float _879 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3893 : (isnan(_3893) ? 1.0 : min(_3893, 1.0)))) * cbInstanceData._m0[_873].x;
    float _880 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3904 : (isnan(_3904) ? 1.0 : min(_3904, 1.0)))) * cbInstanceData._m0[_873].y;
    float _881 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3915 : (isnan(_3915) ? 1.0 : min(_3915, 1.0)))) * cbInstanceData._m0[_873].z;
    float _3948 = isnan(0.0) ? _879 : (isnan(_879) ? 0.0 : max(_879, 0.0));
    float _882 = isnan(1.0) ? _3948 : (isnan(_3948) ? 1.0 : min(_3948, 1.0));
    float _3959 = isnan(0.0) ? _880 : (isnan(_880) ? 0.0 : max(_880, 0.0));
    float _883 = isnan(1.0) ? _3959 : (isnan(_3959) ? 1.0 : min(_3959, 1.0));
    float _3970 = isnan(0.0) ? _881 : (isnan(_881) ? 0.0 : max(_881, 0.0));
    float _884 = isnan(1.0) ? _3970 : (isnan(_3970) ? 1.0 : min(_3970, 1.0));
    vec4 _893 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _794, cbSceneParam._m0[86u].y * _795));
    float _896 = _893.x * TEXCOORD_5.w;
    float _897 = dot(vec3(_830, _831, _832), vec3(_774, _775, _776));
    float _900 = _897 * 2.0;
    float _904 = (_900 * _830) - _774;
    float _905 = (_900 * _831) - _775;
    float _906 = (_900 * _832) - _776;
    float _910 = abs(dot(vec3(_774, _775, _776), vec3(_830, _831, _832)));
    float _3981 = isnan(0.0) ? _910 : (isnan(_910) ? 0.0 : max(_910, 0.0));
    float _911 = isnan(1.0) ? _3981 : (isnan(_3981) ? 1.0 : min(_3981, 1.0));
    float _919 = 10.0 / (_718 + 10.0);
    float _920 = sqrt(_710);
    float _932 = exp2((_920 * 5.0) * log2(1.0 - (_911 * 0.999000012874603271484375))) / (4.0 - (_920 * 3.0));
    float _963 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _967 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _971 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1300;
    float _1302;
    float _1303;
    float _1304;
    float _1305;
    float _1306;
    float _1307;
    float _1308;
    float _1309;
    float _1310;
    float _1311;
    float _1312;
    float _1313;
    float _1314;
    float _1315;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1027 = fma(_971, cbModelParam._m0[26u].z, fma(_967, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _963));
        float _1031 = fma(_971, cbModelParam._m0[27u].z, fma(_967, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _963));
        float _1035 = fma(_971, cbModelParam._m0[28u].z, fma(_967, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _963));
        float _1058 = _963 + _830;
        float _1059 = _967 + _831;
        float _1060 = _971 + _832;
        float _1070 = fma(_1060, cbModelParam._m0[26u].z, fma(_1059, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1058)) - _1027;
        float _1071 = fma(_1060, cbModelParam._m0[27u].z, fma(_1059, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1058)) - _1031;
        float _1072 = fma(_1060, cbModelParam._m0[28u].z, fma(_1059, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1058)) - _1035;
        float _1076 = inversesqrt(dot(vec3(_1070, _1071, _1072), vec3(_1070, _1071, _1072)));
        float _1089 = ((_1076 * _1070) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1027 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1090 = ((_1076 * _1071) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1031 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1091 = ((_1076 * _1072) / cbModelParam._m0[34u].z) + ((((((_1035 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1094 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1089, _1090, _1091), 0.0);
        vec4 _1101 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1089, _1090, _1091), 0.0);
        vec4 _1108 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1089, _1090, _1091), 0.0);
        vec4 _1115 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1089, _1090, _1091), 0.0);
        float _1128 = exp2((_1094.w + (-0.5)) * 20.0) * 2.0;
        float _1129 = _1128 * (_1094.x + (-0.5));
        float _1130 = _1128 * (_1094.y + (-0.5));
        float _1131 = _1128 * (_1094.z + (-0.5));
        float _1138 = exp2((_1101.w + (-0.5)) * 20.0) * 2.0;
        float _1139 = _1138 * (_1101.x + (-0.5));
        float _1140 = _1138 * (_1101.y + (-0.5));
        float _1141 = _1138 * (_1101.z + (-0.5));
        float _1148 = exp2((_1108.w + (-0.5)) * 20.0) * 2.0;
        float _1149 = _1148 * (_1108.x + (-0.5));
        float _1150 = _1148 * (_1108.y + (-0.5));
        float _1151 = _1148 * (_1108.z + (-0.5));
        float _1158 = exp2((_1115.w + (-0.5)) * 20.0) * 2.0;
        float _1159 = _1158 * (_1115.x + (-0.5));
        float _1160 = _1158 * (_1115.y + (-0.5));
        float _1161 = _1158 * (_1115.z + (-0.5));
        float _1162 = isnan(0.0) ? _1159 : (isnan(_1159) ? 0.0 : max(_1159, 0.0));
        float _1163 = isnan(0.0) ? _1160 : (isnan(_1160) ? 0.0 : max(_1160, 0.0));
        float _1164 = isnan(0.0) ? _1161 : (isnan(_1161) ? 0.0 : max(_1161, 0.0));
        float _1165 = _1129 * 0.5;
        float _1166 = _1139 * 0.5;
        float _1167 = _1149 * 0.5;
        float _1168 = dot(vec3(_1165, _1166, _1167), vec3(_1165, _1166, _1167));
        float _1173 = (_1168 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1168);
        float _1182 = (dot(vec3(_830, _831, _832), vec3(_1173 * _1165, _1173 * _1166, _1173 * _1167)) + 1.0) * 0.5;
        float _4007 = isnan(0.0) ? _1182 : (isnan(_1182) ? 0.0 : max(_1182, 0.0));
        float _1192 = sqrt(((_1166 * _1166) + (_1165 * _1165)) + (_1167 * _1167)) / (_1162 + 9.9999997473787516355514526367188e-06);
        float _4018 = isnan(0.0) ? _1192 : (isnan(_1192) ? 0.0 : max(_1192, 0.0));
        float _1193 = isnan(1.0) ? _4018 : (isnan(_4018) ? 1.0 : min(_4018, 1.0));
        float _1194 = _1193 * 2.0;
        float _1198 = (1.0 - _1193) / (_1193 + 1.0);
        float _4029 = isnan(0.0) ? _1198 : (isnan(_1198) ? 0.0 : max(_1198, 0.0));
        float _1199 = isnan(1.0) ? _4029 : (isnan(_4029) ? 1.0 : min(_4029, 1.0));
        float _1208 = ((((1.0 - _1199) * (_1194 + 2.0)) * exp2(log2(isnan(1.0) ? _4007 : (isnan(_4007) ? 1.0 : min(_4007, 1.0))) * (_1194 + 1.0))) + _1199) * _1162;
        float _1209 = _1130 * 0.5;
        float _1210 = _1140 * 0.5;
        float _1211 = _1150 * 0.5;
        float _1212 = dot(vec3(_1209, _1210, _1211), vec3(_1209, _1210, _1211));
        float _1217 = (_1212 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1212);
        float _1225 = (dot(vec3(_830, _831, _832), vec3(_1217 * _1209, _1217 * _1210, _1217 * _1211)) + 1.0) * 0.5;
        float _4040 = isnan(0.0) ? _1225 : (isnan(_1225) ? 0.0 : max(_1225, 0.0));
        float _1234 = sqrt(((_1210 * _1210) + (_1209 * _1209)) + (_1211 * _1211)) / (_1163 + 9.9999997473787516355514526367188e-06);
        float _4051 = isnan(0.0) ? _1234 : (isnan(_1234) ? 0.0 : max(_1234, 0.0));
        float _1235 = isnan(1.0) ? _4051 : (isnan(_4051) ? 1.0 : min(_4051, 1.0));
        float _1236 = _1235 * 2.0;
        float _1240 = (1.0 - _1235) / (_1235 + 1.0);
        float _4062 = isnan(0.0) ? _1240 : (isnan(_1240) ? 0.0 : max(_1240, 0.0));
        float _1241 = isnan(1.0) ? _4062 : (isnan(_4062) ? 1.0 : min(_4062, 1.0));
        float _1250 = ((((1.0 - _1241) * (_1236 + 2.0)) * exp2(log2(isnan(1.0) ? _4040 : (isnan(_4040) ? 1.0 : min(_4040, 1.0))) * (_1236 + 1.0))) + _1241) * _1163;
        float _1251 = _1131 * 0.5;
        float _1252 = _1141 * 0.5;
        float _1253 = _1151 * 0.5;
        float _1254 = dot(vec3(_1251, _1252, _1253), vec3(_1251, _1252, _1253));
        float _1259 = (_1254 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1254);
        float _1267 = (dot(vec3(_830, _831, _832), vec3(_1259 * _1251, _1259 * _1252, _1259 * _1253)) + 1.0) * 0.5;
        float _4073 = isnan(0.0) ? _1267 : (isnan(_1267) ? 0.0 : max(_1267, 0.0));
        float _1276 = sqrt(((_1252 * _1252) + (_1251 * _1251)) + (_1253 * _1253)) / (_1164 + 9.9999997473787516355514526367188e-06);
        float _4084 = isnan(0.0) ? _1276 : (isnan(_1276) ? 0.0 : max(_1276, 0.0));
        float _1277 = isnan(1.0) ? _4084 : (isnan(_4084) ? 1.0 : min(_4084, 1.0));
        float _1278 = _1277 * 2.0;
        float _1282 = (1.0 - _1277) / (_1277 + 1.0);
        float _4095 = isnan(0.0) ? _1282 : (isnan(_1282) ? 0.0 : max(_1282, 0.0));
        float _1283 = isnan(1.0) ? _4095 : (isnan(_4095) ? 1.0 : min(_4095, 1.0));
        float _1292 = ((((1.0 - _1283) * (_1278 + 2.0)) * exp2(log2(isnan(1.0) ? _4073 : (isnan(_4073) ? 1.0 : min(_4073, 1.0))) * (_1278 + 1.0))) + _1283) * _1164;
        _1300 = _1131;
        _1302 = _1130;
        _1303 = _1129;
        _1304 = _1141;
        _1305 = _1140;
        _1306 = _1139;
        _1307 = _1151;
        _1308 = _1150;
        _1309 = _1149;
        _1310 = _1164;
        _1311 = _1163;
        _1312 = _1162;
        _1313 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1208 : (isnan(_1208) ? 0.0 : max(_1208, 0.0)));
        _1314 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1250 : (isnan(_1250) ? 0.0 : max(_1250, 0.0)));
        _1315 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1292 : (isnan(_1292) ? 0.0 : max(_1292, 0.0)));
    }
    else
    {
        _1300 = _1301;
        _1302 = _1301;
        _1303 = _1301;
        _1304 = _1301;
        _1305 = _1301;
        _1306 = _1301;
        _1307 = _1301;
        _1308 = _1301;
        _1309 = _1301;
        _1310 = _1301;
        _1311 = _1301;
        _1312 = _1301;
        _1313 = 0.0;
        _1314 = 0.0;
        _1315 = 0.0;
    }
    float _1613;
    float _1614;
    float _1615;
    float _1616;
    float _1617;
    float _1618;
    float _1619;
    float _1620;
    float _1621;
    float _1622;
    float _1623;
    float _1624;
    float _1625;
    float _1626;
    float _1627;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1344 = fma(_971, cbModelParam._m0[30u].z, fma(_967, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _963));
        float _1348 = fma(_971, cbModelParam._m0[31u].z, fma(_967, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _963));
        float _1352 = fma(_971, cbModelParam._m0[32u].z, fma(_967, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _963));
        float _1375 = _963 + _830;
        float _1376 = _967 + _831;
        float _1377 = _971 + _832;
        float _1387 = fma(_1377, cbModelParam._m0[30u].z, fma(_1376, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1375)) - _1344;
        float _1388 = fma(_1377, cbModelParam._m0[31u].z, fma(_1376, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1375)) - _1348;
        float _1389 = fma(_1377, cbModelParam._m0[32u].z, fma(_1376, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1375)) - _1352;
        float _1393 = inversesqrt(dot(vec3(_1387, _1388, _1389), vec3(_1387, _1388, _1389)));
        float _1406 = ((_1393 * _1387) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1344 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1407 = ((_1393 * _1388) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1348 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1408 = ((_1393 * _1389) / cbModelParam._m0[35u].z) + ((((((_1352 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1410 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1406, _1407, _1408), 0.0);
        vec4 _1417 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1406, _1407, _1408), 0.0);
        vec4 _1424 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1406, _1407, _1408), 0.0);
        vec4 _1431 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1406, _1407, _1408), 0.0);
        float _1443 = exp2((_1410.w + (-0.5)) * 20.0) * 2.0;
        float _1444 = _1443 * (_1410.x + (-0.5));
        float _1445 = _1443 * (_1410.y + (-0.5));
        float _1446 = _1443 * (_1410.z + (-0.5));
        float _1453 = exp2((_1417.w + (-0.5)) * 20.0) * 2.0;
        float _1454 = _1453 * (_1417.x + (-0.5));
        float _1455 = _1453 * (_1417.y + (-0.5));
        float _1456 = _1453 * (_1417.z + (-0.5));
        float _1463 = exp2((_1424.w + (-0.5)) * 20.0) * 2.0;
        float _1464 = _1463 * (_1424.x + (-0.5));
        float _1465 = _1463 * (_1424.y + (-0.5));
        float _1466 = _1463 * (_1424.z + (-0.5));
        float _1473 = exp2((_1431.w + (-0.5)) * 20.0) * 2.0;
        float _1474 = _1473 * (_1431.x + (-0.5));
        float _1475 = _1473 * (_1431.y + (-0.5));
        float _1476 = _1473 * (_1431.z + (-0.5));
        float _1477 = isnan(0.0) ? _1474 : (isnan(_1474) ? 0.0 : max(_1474, 0.0));
        float _1478 = isnan(0.0) ? _1475 : (isnan(_1475) ? 0.0 : max(_1475, 0.0));
        float _1479 = isnan(0.0) ? _1476 : (isnan(_1476) ? 0.0 : max(_1476, 0.0));
        float _1480 = _1444 * 0.5;
        float _1481 = _1454 * 0.5;
        float _1482 = _1464 * 0.5;
        float _1483 = dot(vec3(_1480, _1481, _1482), vec3(_1480, _1481, _1482));
        float _1488 = (_1483 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1483);
        float _1496 = (dot(vec3(_830, _831, _832), vec3(_1488 * _1480, _1488 * _1481, _1488 * _1482)) + 1.0) * 0.5;
        float _4136 = isnan(0.0) ? _1496 : (isnan(_1496) ? 0.0 : max(_1496, 0.0));
        float _1505 = sqrt(((_1481 * _1481) + (_1480 * _1480)) + (_1482 * _1482)) / (_1477 + 9.9999997473787516355514526367188e-06);
        float _4147 = isnan(0.0) ? _1505 : (isnan(_1505) ? 0.0 : max(_1505, 0.0));
        float _1506 = isnan(1.0) ? _4147 : (isnan(_4147) ? 1.0 : min(_4147, 1.0));
        float _1507 = _1506 * 2.0;
        float _1511 = (1.0 - _1506) / (_1506 + 1.0);
        float _4158 = isnan(0.0) ? _1511 : (isnan(_1511) ? 0.0 : max(_1511, 0.0));
        float _1512 = isnan(1.0) ? _4158 : (isnan(_4158) ? 1.0 : min(_4158, 1.0));
        float _1521 = ((((1.0 - _1512) * (_1507 + 2.0)) * exp2(log2(isnan(1.0) ? _4136 : (isnan(_4136) ? 1.0 : min(_4136, 1.0))) * (_1507 + 1.0))) + _1512) * _1477;
        float _1522 = _1445 * 0.5;
        float _1523 = _1455 * 0.5;
        float _1524 = _1465 * 0.5;
        float _1525 = dot(vec3(_1522, _1523, _1524), vec3(_1522, _1523, _1524));
        float _1530 = (_1525 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1525);
        float _1538 = (dot(vec3(_830, _831, _832), vec3(_1530 * _1522, _1530 * _1523, _1530 * _1524)) + 1.0) * 0.5;
        float _4169 = isnan(0.0) ? _1538 : (isnan(_1538) ? 0.0 : max(_1538, 0.0));
        float _1547 = sqrt(((_1523 * _1523) + (_1522 * _1522)) + (_1524 * _1524)) / (_1478 + 9.9999997473787516355514526367188e-06);
        float _4180 = isnan(0.0) ? _1547 : (isnan(_1547) ? 0.0 : max(_1547, 0.0));
        float _1548 = isnan(1.0) ? _4180 : (isnan(_4180) ? 1.0 : min(_4180, 1.0));
        float _1549 = _1548 * 2.0;
        float _1553 = (1.0 - _1548) / (_1548 + 1.0);
        float _4191 = isnan(0.0) ? _1553 : (isnan(_1553) ? 0.0 : max(_1553, 0.0));
        float _1554 = isnan(1.0) ? _4191 : (isnan(_4191) ? 1.0 : min(_4191, 1.0));
        float _1563 = ((((1.0 - _1554) * (_1549 + 2.0)) * exp2(log2(isnan(1.0) ? _4169 : (isnan(_4169) ? 1.0 : min(_4169, 1.0))) * (_1549 + 1.0))) + _1554) * _1478;
        float _1564 = _1446 * 0.5;
        float _1565 = _1456 * 0.5;
        float _1566 = _1466 * 0.5;
        float _1567 = dot(vec3(_1564, _1565, _1566), vec3(_1564, _1565, _1566));
        float _1572 = (_1567 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1567);
        float _1580 = (dot(vec3(_830, _831, _832), vec3(_1572 * _1564, _1572 * _1565, _1572 * _1566)) + 1.0) * 0.5;
        float _4202 = isnan(0.0) ? _1580 : (isnan(_1580) ? 0.0 : max(_1580, 0.0));
        float _1589 = sqrt(((_1565 * _1565) + (_1564 * _1564)) + (_1566 * _1566)) / (_1479 + 9.9999997473787516355514526367188e-06);
        float _4213 = isnan(0.0) ? _1589 : (isnan(_1589) ? 0.0 : max(_1589, 0.0));
        float _1590 = isnan(1.0) ? _4213 : (isnan(_4213) ? 1.0 : min(_4213, 1.0));
        float _1591 = _1590 * 2.0;
        float _1595 = (1.0 - _1590) / (_1590 + 1.0);
        float _4224 = isnan(0.0) ? _1595 : (isnan(_1595) ? 0.0 : max(_1595, 0.0));
        float _1596 = isnan(1.0) ? _4224 : (isnan(_4224) ? 1.0 : min(_4224, 1.0));
        float _1605 = ((((1.0 - _1596) * (_1591 + 2.0)) * exp2(log2(isnan(1.0) ? _4202 : (isnan(_4202) ? 1.0 : min(_4202, 1.0))) * (_1591 + 1.0))) + _1596) * _1479;
        _1613 = _1446;
        _1614 = _1445;
        _1615 = _1444;
        _1616 = _1456;
        _1617 = _1455;
        _1618 = _1454;
        _1619 = _1466;
        _1620 = _1465;
        _1621 = _1464;
        _1622 = _1479;
        _1623 = _1478;
        _1624 = _1477;
        _1625 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1521 : (isnan(_1521) ? 0.0 : max(_1521, 0.0)));
        _1626 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1563 : (isnan(_1563) ? 0.0 : max(_1563, 0.0)));
        _1627 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1605 : (isnan(_1605) ? 0.0 : max(_1605, 0.0)));
    }
    else
    {
        _1613 = _1301;
        _1614 = _1301;
        _1615 = _1301;
        _1616 = _1301;
        _1617 = _1301;
        _1618 = _1301;
        _1619 = _1301;
        _1620 = _1301;
        _1621 = _1301;
        _1622 = _1301;
        _1623 = _1301;
        _1624 = _1301;
        _1625 = 0.0;
        _1626 = 0.0;
        _1627 = 0.0;
    }
    float _1637 = (cbModelParam._m0[1u].x * (_1625 - _1313)) + _1313;
    float _1638 = (cbModelParam._m0[1u].x * (_1626 - _1314)) + _1314;
    float _1639 = (cbModelParam._m0[1u].x * (_1627 - _1315)) + _1315;
    float _1660 = fma(_1639, cbSceneParam._m0[89u].z, fma(_1638, cbSceneParam._m0[89u].y, _1637 * cbSceneParam._m0[89u].x));
    float _1663 = fma(_1639, cbSceneParam._m0[90u].z, fma(_1638, cbSceneParam._m0[90u].y, _1637 * cbSceneParam._m0[90u].x));
    float _1666 = fma(_1639, cbSceneParam._m0[91u].z, fma(_1638, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1637));
    float _1681 = _904 * 0.5;
    float _1682 = _905 * 0.5;
    float _1683 = _906 * 0.5;
    float _1684 = dot(vec4(_1681, _1682, _1683, 1.0), vec4(_1615, _1618, _1621, _1624));
    float _1687 = dot(vec4(_1681, _1682, _1683, 1.0), vec4(_1614, _1617, _1620, _1623));
    float _1690 = dot(vec4(_1681, _1682, _1683, 1.0), vec4(_1613, _1616, _1619, _1622));
    float _1724;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1697 = dot(vec4(_1681, _1682, _1683, 1.0), vec4(_1300, _1304, _1307, _1310));
        float _1701 = dot(vec4(_1681, _1682, _1683, 1.0), vec4(_1302, _1305, _1308, _1311));
        float _1705 = dot(vec4(_1681, _1682, _1683, 1.0), vec4(_1303, _1306, _1309, _1312));
        float _1712 = dot(vec4(cbModelParam._m0[39u]), vec4(_1681, _1682, _1683, 1.0));
        _1724 = dot(vec3(isnan(0.0) ? _1705 : (isnan(_1705) ? 0.0 : max(_1705, 0.0)), isnan(0.0) ? _1701 : (isnan(_1701) ? 0.0 : max(_1701, 0.0)), isnan(0.0) ? _1697 : (isnan(_1697) ? 0.0 : max(_1697, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1712) ? 0.0 : (isnan(0.0) ? _1712 : max(0.0, _1712))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1724 = 1.0;
    }
    float _1735;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1726 = dot(vec4(cbModelParam._m0[40u]), vec4(_1681, _1682, _1683, 1.0));
        _1735 = dot(vec3(isnan(0.0) ? _1684 : (isnan(_1684) ? 0.0 : max(_1684, 0.0)), isnan(0.0) ? _1687 : (isnan(_1687) ? 0.0 : max(_1687, 0.0)), isnan(0.0) ? _1690 : (isnan(_1690) ? 0.0 : max(_1690, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1726) ? 0.0 : (isnan(0.0) ? _1726 : max(0.0, _1726))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1735 = 1.0;
    }
    float _1739 = (_1735 * cbModelParam._m0[1u].x) + (_1724 * (1.0 - cbModelParam._m0[1u].x));
    float _1749 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _710);
    float _1750 = isnan(_1749) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1749 : min(cbModelParam._m0[25u].z, _1749));
    float _1830;
    float _1832;
    float _1834;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1797 = fma(_971, cbModelParam._m0[13u].z, fma(_967, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _963)) + cbModelParam._m0[13u].w;
        float _1801 = fma(_971, cbModelParam._m0[14u].z, fma(_967, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _963)) + cbModelParam._m0[14u].w;
        float _1805 = fma(_971, cbModelParam._m0[15u].z, fma(_967, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _963)) + cbModelParam._m0[15u].w;
        float _1808 = fma(_906, cbModelParam._m0[13u].z, fma(_905, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _904));
        float _1811 = fma(_906, cbModelParam._m0[14u].z, fma(_905, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _904));
        float _1814 = fma(_906, cbModelParam._m0[15u].z, fma(_905, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _904));
        float _1842;
        if (_1808 > 0.0)
        {
            _1842 = abs((1.0 - _1797) / _1808);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1808 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1797 + 1.0) / _1808);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1842 = frontier_phi_19_17_ladder;
        }
        float _2241;
        if (_1811 > 0.0)
        {
            _2241 = abs((1.0 - _1801) / _1811);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1811 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1801 + 1.0) / _1811);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2241 = frontier_phi_28_24_ladder;
        }
        float _2652;
        if (_1814 > 0.0)
        {
            _2652 = abs((1.0 - _1805) / _1814);
        }
        else
        {
            float frontier_phi_42_35_ladder;
            if (_1814 < 0.0)
            {
                frontier_phi_42_35_ladder = abs((_1805 + 1.0) / _1814);
            }
            else
            {
                frontier_phi_42_35_ladder = 5000.0;
            }
            _2652 = frontier_phi_42_35_ladder;
        }
        float _2654 = isnan(_2241) ? _1842 : (isnan(_1842) ? _2241 : min(_1842, _2241));
        float _2655 = isnan(_2652) ? _2654 : (isnan(_2654) ? _2652 : min(_2654, _2652));
        float _2659 = (_2655 * _1808) + _1797;
        float _2660 = (_2655 * _1811) + _1801;
        float _2661 = (_2655 * _1814) + _1805;
        float _2662 = _2655 * 9.9999997473787516355514526367188e-05;
        float _2664 = (-1.0) - _2662;
        float _2666 = _2662 + 1.0;
        float frontier_phi_18_42_ladder;
        float frontier_phi_18_42_ladder_1;
        float frontier_phi_18_42_ladder_2;
        if ((_2661 > _2666) || ((_2661 < _2664) || ((_2660 > _2666) || ((_2660 < _2664) || ((_2659 < _2664) || (_2659 > _2666))))))
        {
            frontier_phi_18_42_ladder = 0.0;
            frontier_phi_18_42_ladder_1 = 0.0;
            frontier_phi_18_42_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2878 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2661, cbModelParam._m0[9u].z, fma(_2660, cbModelParam._m0[9u].y, _2659 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2661, cbModelParam._m0[10u].z, fma(_2660, cbModelParam._m0[10u].y, _2659 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2661, cbModelParam._m0[11u].z, fma(_2660, cbModelParam._m0[11u].y, _2659 * cbModelParam._m0[11u].x))), _1750);
            frontier_phi_18_42_ladder = _2878.z * cbModelParam._m0[1u].y;
            frontier_phi_18_42_ladder_1 = _2878.y * cbModelParam._m0[1u].y;
            frontier_phi_18_42_ladder_2 = _2878.x * cbModelParam._m0[1u].y;
        }
        _1830 = frontier_phi_18_42_ladder_2;
        _1832 = frontier_phi_18_42_ladder_1;
        _1834 = frontier_phi_18_42_ladder;
    }
    else
    {
        vec4 _1818 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_904, _905, _906), _1750);
        _1830 = _1818.x * cbModelParam._m0[1u].y;
        _1832 = _1818.y * cbModelParam._m0[1u].y;
        _1834 = _1818.z * cbModelParam._m0[1u].y;
    }
    float _1838 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _710);
    float _1839 = isnan(_1838) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1838 : min(cbModelParam._m0[25u].w, _1838));
    float _1928;
    float _1930;
    float _1932;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1892 = fma(_971, cbModelParam._m0[21u].z, fma(_967, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _963)) + cbModelParam._m0[21u].w;
        float _1896 = fma(_971, cbModelParam._m0[22u].z, fma(_967, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _963)) + cbModelParam._m0[22u].w;
        float _1900 = fma(_971, cbModelParam._m0[23u].z, fma(_967, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _963)) + cbModelParam._m0[23u].w;
        float _1903 = fma(_906, cbModelParam._m0[21u].z, fma(_905, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _904));
        float _1906 = fma(_906, cbModelParam._m0[22u].z, fma(_905, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _904));
        float _1909 = fma(_906, cbModelParam._m0[23u].z, fma(_905, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _904));
        float _2246;
        if (_1903 > 0.0)
        {
            _2246 = abs((1.0 - _1892) / _1903);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1903 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1892 + 1.0) / _1903);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _2246 = frontier_phi_30_26_ladder;
        }
        float _2679;
        if (_1906 > 0.0)
        {
            _2679 = abs((1.0 - _1896) / _1906);
        }
        else
        {
            float frontier_phi_44_37_ladder;
            if (_1906 < 0.0)
            {
                frontier_phi_44_37_ladder = abs((_1896 + 1.0) / _1906);
            }
            else
            {
                frontier_phi_44_37_ladder = 5000.0;
            }
            _2679 = frontier_phi_44_37_ladder;
        }
        float _2955;
        if (_1909 > 0.0)
        {
            _2955 = abs((1.0 - _1900) / _1909);
        }
        else
        {
            float frontier_phi_61_53_ladder;
            if (_1909 < 0.0)
            {
                frontier_phi_61_53_ladder = abs((_1900 + 1.0) / _1909);
            }
            else
            {
                frontier_phi_61_53_ladder = 5000.0;
            }
            _2955 = frontier_phi_61_53_ladder;
        }
        float _2957 = isnan(_2679) ? _2246 : (isnan(_2246) ? _2679 : min(_2246, _2679));
        float _2958 = isnan(_2955) ? _2957 : (isnan(_2957) ? _2955 : min(_2957, _2955));
        float _2962 = (_2958 * _1903) + _1892;
        float _2963 = (_2958 * _1906) + _1896;
        float _2964 = (_2958 * _1909) + _1900;
        float _2965 = _2958 * 9.9999997473787516355514526367188e-05;
        float _2966 = (-1.0) - _2965;
        float _2968 = _2965 + 1.0;
        float frontier_phi_27_61_ladder;
        float frontier_phi_27_61_ladder_1;
        float frontier_phi_27_61_ladder_2;
        if ((_2964 > _2968) || ((_2964 < _2966) || ((_2963 > _2968) || ((_2963 < _2966) || ((_2962 < _2966) || (_2962 > _2968))))))
        {
            frontier_phi_27_61_ladder = 0.0;
            frontier_phi_27_61_ladder_1 = 0.0;
            frontier_phi_27_61_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3240 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2964, cbModelParam._m0[17u].z, fma(_2963, cbModelParam._m0[17u].y, _2962 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2964, cbModelParam._m0[18u].z, fma(_2963, cbModelParam._m0[18u].y, _2962 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2964, cbModelParam._m0[19u].z, fma(_2963, cbModelParam._m0[19u].y, _2962 * cbModelParam._m0[19u].x))), _1839);
            frontier_phi_27_61_ladder = _3240.y * cbModelParam._m0[1u].z;
            frontier_phi_27_61_ladder_1 = _3240.z * cbModelParam._m0[1u].z;
            frontier_phi_27_61_ladder_2 = _3240.x * cbModelParam._m0[1u].z;
        }
        _1928 = frontier_phi_27_61_ladder_2;
        _1930 = frontier_phi_27_61_ladder;
        _1932 = frontier_phi_27_61_ladder_1;
    }
    else
    {
        vec4 _1912 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_904, _905, _906), _1839);
        _1928 = _1912.x * cbModelParam._m0[1u].z;
        _1930 = _1912.y * cbModelParam._m0[1u].z;
        _1932 = _1912.z * cbModelParam._m0[1u].z;
    }
    float _1944 = ((((1.0 - _932) * ((_920 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_932 * _920)) * _896;
    float _1945 = _1944 * ((cbModelParam._m0[1u].w * (_1928 - _1830)) + _1830);
    float _1946 = _1944 * ((cbModelParam._m0[1u].w * (_1930 - _1832)) + _1832);
    float _1947 = _1944 * ((cbModelParam._m0[1u].w * (_1932 - _1834)) + _1834);
    float _1950 = fma(_1947, cbSceneParam._m0[89u].z, fma(_1946, cbSceneParam._m0[89u].y, _1945 * cbSceneParam._m0[89u].x));
    float _1953 = fma(_1947, cbSceneParam._m0[90u].z, fma(_1946, cbSceneParam._m0[90u].y, _1945 * cbSceneParam._m0[90u].x));
    float _1956 = fma(_1947, cbSceneParam._m0[91u].z, fma(_1946, cbSceneParam._m0[91u].y, _1945 * cbSceneParam._m0[91u].x));
    float _1967 = _794 / cbSceneParam._m0[86u].x;
    float _1975 = (cbSceneParam._m0[88u].y * (1.0 - _710)) + cbSceneParam._m0[88u].z;
    float _4350 = isnan(0.0) ? _1975 : (isnan(_1975) ? 0.0 : max(_1975, 0.0));
    float _1977 = (isnan(1.0) ? _4350 : (isnan(_4350) ? 1.0 : min(_4350, 1.0))) * 5.0;
    float _1982 = (_919 * cbMtdParam._m0[11u].w) * dot(vec3(_830, _831, _832), vec3(1.0, 0.0, 0.0));
    vec4 _1992 = textureLod(sampler2D(g_RLRTexture, SS_ClampLinear), vec2(((_1982 * textureLod(sampler2D(g_RLRTexture, SS_ClampLinear), vec2((_1982 + _1967) * cbSceneParam._m0[86u].x, _795), _1977).w) + _1967) * cbSceneParam._m0[86u].x, _795), _1977);
    float _2008 = 1.0 - _1992.w;
    uint _2015 = _871 + 5u;
    uvec4 _2018 = floatBitsToUint(cbInstanceData._m0[_2015]);
    uint _2020 = _2018.x * 14u;
    uint _2021 = _2020 + 13u;
    float _2026 = _896 + (-1.0);
    float _2029 = (cbLight._m0[_2021].x * _2026) + 1.0;
    float _2030 = (cbLight._m0[_2021].y * _2026) + 1.0;
    uint _2031 = _2020 + 5u;
    float _2037 = isnan(1.0) ? _2030 : (isnan(_2030) ? 1.0 : min(_2030, 1.0));
    uint _2041 = _2020 + 4u;
    float _2048 = isnan(1.0) ? _2029 : (isnan(_2029) ? 1.0 : min(_2029, 1.0));
    uint _2052 = _2020 | 1u;
    float _2063 = dot(vec3(cbLight._m0[_2020].xyz), vec3(_830, _831, _832));
    float _2066 = dot(vec3(cbLight._m0[_2052].xyz), vec3(_830, _831, _832));
    float _4371 = isnan(0.0) ? _2063 : (isnan(_2063) ? 0.0 : max(_2063, 0.0));
    float _4382 = isnan(0.0) ? _2066 : (isnan(_2066) ? 0.0 : max(_2066, 0.0));
    float _2071 = (isnan(1.0) ? _4371 : (isnan(_4371) ? 1.0 : min(_4371, 1.0))) * 0.3183098733425140380859375;
    float _2073 = (isnan(1.0) ? _4382 : (isnan(_4382) ? 1.0 : min(_4382, 1.0))) * 0.3183098733425140380859375;
    float _2080 = ((cbLight._m0[_2031].x * _2037) * _2073) + ((cbLight._m0[_2041].x * _2048) * _2071);
    float _2081 = ((_2037 * cbLight._m0[_2031].y) * _2073) + ((_2048 * cbLight._m0[_2041].y) * _2071);
    float _2082 = ((_2037 * cbLight._m0[_2031].z) * _2073) + ((_2048 * cbLight._m0[_2041].z) * _2071);
    uint _2084 = _2020 + 8u;
    float _2097 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2020].w)) * _710) * 0.949999988079071044921875);
    float _2098 = _2097 * _2097;
    float _2099 = cbLight._m0[_2020].x + _774;
    float _2100 = cbLight._m0[_2020].y + _775;
    float _2101 = cbLight._m0[_2020].z + _776;
    float _2105 = inversesqrt(dot(vec3(_2099, _2100, _2101), vec3(_2099, _2100, _2101)));
    float _2106 = _2105 * _2099;
    float _2107 = _2105 * _2100;
    float _2108 = _2105 * _2101;
    float _2109 = dot(vec3(_830, _831, _832), vec3(cbLight._m0[_2020].xyz));
    float _4393 = isnan(0.0) ? _2109 : (isnan(_2109) ? 0.0 : max(_2109, 0.0));
    float _2112 = isnan(1.0) ? _4393 : (isnan(_4393) ? 1.0 : min(_4393, 1.0));
    float _4404 = isnan(0.0) ? _897 : (isnan(_897) ? 0.0 : max(_897, 0.0));
    float _2113 = isnan(1.0) ? _4404 : (isnan(_4404) ? 1.0 : min(_4404, 1.0));
    float _2114 = dot(vec3(_830, _831, _832), vec3(_2106, _2107, _2108));
    float _4415 = isnan(0.0) ? _2114 : (isnan(_2114) ? 0.0 : max(_2114, 0.0));
    float _2117 = isnan(1.0) ? _4415 : (isnan(_4415) ? 1.0 : min(_4415, 1.0));
    float _2118 = dot(vec3(cbLight._m0[_2020].xyz), vec3(_2106, _2107, _2108));
    float _4426 = isnan(0.0) ? _2118 : (isnan(_2118) ? 0.0 : max(_2118, 0.0));
    float _2122 = _2098 * _2098;
    float _2126 = ((_2117 * _2117) * (_2122 + (-1.0))) + 1.0;
    float _2137 = (exp2(log2(1.0 - (isnan(1.0) ? _4426 : (isnan(_4426) ? 1.0 : min(_4426, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2138 = 1.0 - _2098;
    float _2149 = (0.5 / (((_2113 * ((_2112 * _2138) + _2098)) + 9.9999999392252902907785028219223e-09) + (((_2113 * _2138) + _2098) * _2112))) * _2112;
    float _4437 = isnan(0.0) ? _2149 : (isnan(_2149) ? 0.0 : max(_2149, 0.0));
    float _2151 = (isnan(1.0) ? _4437 : (isnan(_4437) ? 1.0 : min(_4437, 1.0))) * (_2122 / ((_2126 * _2126) * 3.141590118408203125));
    uint _2162 = _2020 + 9u;
    float _2173 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2052].w)) * _710) * 0.949999988079071044921875);
    float _2174 = _2173 * _2173;
    float _2175 = cbLight._m0[_2052].x + _774;
    float _2176 = cbLight._m0[_2052].y + _775;
    float _2177 = cbLight._m0[_2052].z + _776;
    float _2181 = inversesqrt(dot(vec3(_2175, _2176, _2177), vec3(_2175, _2176, _2177)));
    float _2182 = _2181 * _2175;
    float _2183 = _2181 * _2176;
    float _2184 = _2181 * _2177;
    float _2185 = dot(vec3(_830, _831, _832), vec3(cbLight._m0[_2052].xyz));
    float _4448 = isnan(0.0) ? _2185 : (isnan(_2185) ? 0.0 : max(_2185, 0.0));
    float _2188 = isnan(1.0) ? _4448 : (isnan(_4448) ? 1.0 : min(_4448, 1.0));
    float _2189 = dot(vec3(_830, _831, _832), vec3(_2182, _2183, _2184));
    float _4459 = isnan(0.0) ? _2189 : (isnan(_2189) ? 0.0 : max(_2189, 0.0));
    float _2192 = isnan(1.0) ? _4459 : (isnan(_4459) ? 1.0 : min(_4459, 1.0));
    float _2193 = dot(vec3(cbLight._m0[_2052].xyz), vec3(_2182, _2183, _2184));
    float _4470 = isnan(0.0) ? _2193 : (isnan(_2193) ? 0.0 : max(_2193, 0.0));
    float _2197 = _2174 * _2174;
    float _2201 = ((_2192 * _2192) * (_2197 + (-1.0))) + 1.0;
    float _2210 = (exp2(log2(1.0 - (isnan(1.0) ? _4470 : (isnan(_4470) ? 1.0 : min(_4470, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2211 = 1.0 - _2174;
    float _2221 = (0.5 / (((_2113 * ((_2188 * _2211) + _2174)) + 9.9999999392252902907785028219223e-09) + (((_2113 * _2211) + _2174) * _2188))) * _2188;
    float _4481 = isnan(0.0) ? _2221 : (isnan(_2221) ? 0.0 : max(_2221, 0.0));
    float _2223 = (isnan(1.0) ? _4481 : (isnan(_4481) ? 1.0 : min(_4481, 1.0))) * (_2197 / ((_2201 * _2201) * 3.141590118408203125));
    float _2233 = (((_2210 * cbLight._m0[_2162].x) * _2223) * _2037) + (((_2137 * cbLight._m0[_2084].x) * _2151) * _2048);
    float _2234 = (((_2210 * cbLight._m0[_2162].y) * _2223) * _2037) + (((_2137 * cbLight._m0[_2084].y) * _2151) * _2048);
    float _2235 = (((_2210 * cbLight._m0[_2162].z) * _2223) * _2037) + (((_2137 * cbLight._m0[_2084].z) * _2151) * _2048);
    float _2349;
    float _2351;
    float _2353;
    float _2355;
    float _2357;
    float _2359;
    if (_2018.y == 0u)
    {
        float _2290 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2291 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2290;
        float _2292 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2290;
        float _2293 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2290;
        uvec4 _2305 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2306 = _2305.x;
        uint _2317 = uint((float(_2305.y) * floor(float(uint(cbSceneParam._m0[85u].y * _795) / _2306))) + floor(float(uint(cbSceneParam._m0[85u].x * _794) / _2306)));
        float _2327 = (log2(_2293 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2328 = isnan(0.0) ? _2327 : (isnan(_2327) ? 0.0 : max(_2327, 0.0));
        uint _2331 = uint(isnan(14.0) ? _2328 : (isnan(_2328) ? 14.0 : min(_2328, 14.0)));
        uvec4 _2336 = texelFetch(g_lightClusterGridBuffer, int(((_2331 << 2u) + (_2317 << 6u)) >> 2u));
        uint _2337 = _2336.x;
        uint _2338 = _2305.z;
        float _2476;
        float _2478;
        float _2480;
        float _2482;
        float _2484;
        float _2486;
        if (((((1u << ((_2338 >> 4u) & 15u)) + 4294967295u) & _2337) == 0u) || ((_2338 & 240u) == 0u))
        {
            _2476 = 0.0;
            _2478 = 0.0;
            _2480 = 0.0;
            _2482 = 0.0;
            _2484 = 0.0;
            _2486 = 0.0;
        }
        else
        {
            float _2477;
            float _2479;
            float _2481;
            float _2483;
            float _2485;
            float _2487;
            float _2716 = 0.0;
            float _2717 = 0.0;
            float _2718 = 0.0;
            float _2719 = 0.0;
            float _2720 = 0.0;
            float _2721 = 0.0;
            uint _2722 = 0u;
            uint _2731;
            bool _2732;
            for (;;)
            {
                _2731 = texelFetch(g_lightClassification, int((((_2331 << 5u) + (_2317 << 9u)) + (_2722 << 2u)) >> 2u)).x;
                _2732 = _2731 == 0u;
                float frontier_phi_55_pred;
                float frontier_phi_55_pred_1;
                float frontier_phi_55_pred_2;
                float frontier_phi_55_pred_3;
                float frontier_phi_55_pred_4;
                float frontier_phi_55_pred_5;
                if (_2732)
                {
                    frontier_phi_55_pred = _2720;
                    frontier_phi_55_pred_1 = _2721;
                    frontier_phi_55_pred_2 = _2719;
                    frontier_phi_55_pred_3 = _2718;
                    frontier_phi_55_pred_4 = _2717;
                    frontier_phi_55_pred_5 = _2716;
                }
                else
                {
                    float _2998;
                    float _2999;
                    float _3000;
                    float _3001;
                    float _3002;
                    float _3003;
                    uint _3004;
                    _2998 = _2716;
                    _2999 = _2717;
                    _3000 = _2718;
                    _3001 = _2719;
                    _3002 = _2720;
                    _3003 = _2721;
                    _3004 = _2731;
                    float _2887;
                    float _2888;
                    float _2889;
                    float _2890;
                    float _2891;
                    float _2892;
                    for (;;)
                    {
                        uint _3008 = uint(findLSB(_3004)) + (_2722 << 5u);
                        uint _3005 = (_3004 + 4294967295u) & _3004;
                        uint _3010 = _3008 * 48u;
                        vec4 _3024 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3010)).x, texelFetch(g_PointLightRenderingBuffer, int(_3010 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3010 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3010 + 3u)).x));
                        uint _3030 = (_3008 * 48u) + 4u;
                        vec4 _3043 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3030)).x, texelFetch(g_PointLightRenderingBuffer, int(_3030 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3030 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3030 + 3u)).x));
                        uint _3049 = (_3008 * 48u) + 8u;
                        vec3 _3060 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3049)).x, texelFetch(g_PointLightRenderingBuffer, int(_3049 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3049 + 2u)).x));
                        float _3064 = _3024.x - _2291;
                        float _3065 = _3024.y - _2292;
                        float _3066 = _3024.z - _2293;
                        float _3067 = dot(vec3(_3064, _3065, _3066), vec3(_3064, _3065, _3066));
                        float _3070 = inversesqrt(_3067);
                        float _3071 = _3070 * _3064;
                        float _3072 = _3070 * _3065;
                        float _3073 = _3070 * _3066;
                        float _3074 = dot(vec3(_852, _855, _858), vec3(_3071, _3072, _3073));
                        float _3079 = 1.0 - (_3067 * _3024.w);
                        float _4502 = isnan(0.0) ? _3079 : (isnan(_3079) ? 0.0 : max(_3079, 0.0));
                        float _3080 = isnan(1.0) ? _4502 : (isnan(_4502) ? 1.0 : min(_4502, 1.0));
                        float _3081 = sqrt(_3067) * _3043.w;
                        float _3084 = 1.39999997615814208984375 / (_3081 + 1.39999997615814208984375);
                        float _3085 = _3084 * _3084;
                        float _3088 = ((1.0 - _3085) * _3074) + _3085;
                        float _3091 = _3081 * _3081;
                        float _3095 = ((isnan(0.0) ? _3088 : (isnan(_3088) ? 0.0 : max(_3088, 0.0))) * _3080) / ((_3091 * 0.699999988079071044921875) + 1.0);
                        float _3099 = (-0.0) - _2291;
                        float _3100 = (-0.0) - _2292;
                        float _3101 = (-0.0) - _2293;
                        float _3105 = inversesqrt(dot(vec3(_3099, _3100, _3101), vec3(_3099, _3100, _3101)));
                        float _3106 = _3105 * _3099;
                        float _3107 = _3105 * _3100;
                        float _3108 = _3105 * _3101;
                        float _3116 = exp2(log2(1.0 / ((_3091 * 3.5) + 5.0)) * 0.25);
                        float _3117 = 1.0 - _920;
                        float _3124 = sqrt(1.0 - ((1.0 - (_3117 * _3117)) * (1.0 - (_3116 * _3116))));
                        float _3125 = _3124 * _3124;
                        float _3126 = _3125 * _3125;
                        float _3127 = _3106 + _3071;
                        float _3128 = _3107 + _3072;
                        float _3129 = _3108 + _3073;
                        float _3133 = inversesqrt(dot(vec3(_3127, _3128, _3129), vec3(_3127, _3128, _3129)));
                        float _3137 = dot(vec3(_852, _855, _858), vec3(_3106, _3107, _3108));
                        float _4518 = isnan(0.0) ? _3137 : (isnan(_3137) ? 0.0 : max(_3137, 0.0));
                        float _3140 = isnan(1.0) ? _4518 : (isnan(_4518) ? 1.0 : min(_4518, 1.0));
                        float _3141 = dot(vec3(_852, _855, _858), vec3(_3133 * _3127, _3133 * _3128, _3133 * _3129));
                        float _4529 = isnan(0.0) ? _3141 : (isnan(_3141) ? 0.0 : max(_3141, 0.0));
                        float _3144 = isnan(1.0) ? _4529 : (isnan(_4529) ? 1.0 : min(_4529, 1.0));
                        float _3148 = ((_3144 * _3144) * (_3126 + (-1.0))) + 1.0;
                        float _3149 = _3084 * _3125;
                        float _3150 = _3149 * _3149;
                        float _3153 = ((1.0 - _3150) * _3074) + _3150;
                        float _4540 = isnan(0.0) ? _3153 : (isnan(_3153) ? 0.0 : max(_3153, 0.0));
                        float _3154 = isnan(1.0) ? _4540 : (isnan(_4540) ? 1.0 : min(_4540, 1.0));
                        float _3155 = 1.0 - _3125;
                        float _3165 = (0.5 / (((_3154 * ((_3140 * _3155) + _3125)) + 9.9999999392252902907785028219223e-09) + (((_3154 * _3155) + _3125) * _3140))) * _3154;
                        float _4551 = isnan(0.0) ? _3165 : (isnan(_3165) ? 0.0 : max(_3165, 0.0));
                        float _3176 = (((_3126 * 3.1415927410125732421875) * (isnan(1.0) ? _4551 : (isnan(_4551) ? 1.0 : min(_4551, 1.0)))) / ((_3148 * _3148) * ((_3091 * 2.1991131305694580078125) + 3.141590118408203125))) * _3080;
                        _2890 = (_3095 * _3043.x) + _3001;
                        _2891 = (_3095 * _3043.y) + _3002;
                        _2892 = (_3095 * _3043.z) + _3003;
                        _2887 = (_3176 * _3060.x) + _2998;
                        _2888 = (_3176 * _3060.y) + _2999;
                        _2889 = (_3176 * _3060.z) + _3000;
                        if (_3005 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2998 = _2887;
                            _2999 = _2888;
                            _3000 = _2889;
                            _3001 = _2890;
                            _3002 = _2891;
                            _3003 = _2892;
                            _3004 = _3005;
                        }
                    }
                    frontier_phi_55_pred = _2891;
                    frontier_phi_55_pred_1 = _2892;
                    frontier_phi_55_pred_2 = _2890;
                    frontier_phi_55_pred_3 = _2889;
                    frontier_phi_55_pred_4 = _2888;
                    frontier_phi_55_pred_5 = _2887;
                }
                _2485 = frontier_phi_55_pred;
                _2487 = frontier_phi_55_pred_1;
                _2483 = frontier_phi_55_pred_2;
                _2481 = frontier_phi_55_pred_3;
                _2479 = frontier_phi_55_pred_4;
                _2477 = frontier_phi_55_pred_5;
                uint _2723 = _2722 + 1u;
                if (_2723 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2716 = _2477;
                    _2717 = _2479;
                    _2718 = _2481;
                    _2719 = _2483;
                    _2720 = _2485;
                    _2721 = _2487;
                    _2722 = _2723;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2476 = _2477;
            _2478 = _2479;
            _2480 = _2481;
            _2482 = _2483;
            _2484 = _2485;
            _2486 = _2487;
        }
        uvec4 _2490 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2491 = _2490.z;
        uint _2493 = (_2491 >> 8u) & 15u;
        float _2684;
        float _2686;
        float _2688;
        float _2690;
        float _2692;
        float _2694;
        if (((4294967295u << _2493) & _2337) == 0u)
        {
            _2684 = _2476;
            _2686 = _2478;
            _2688 = _2480;
            _2690 = _2482;
            _2692 = _2484;
            _2694 = _2486;
        }
        else
        {
            float _2709 = inversesqrt(dot(vec3(_2291, _2292, _2293), vec3(_2291, _2292, _2293)));
            float _2710 = _2709 * _2291;
            float _2711 = _2709 * _2292;
            float _2712 = _2709 * _2293;
            float frontier_phi_46_47_ladder;
            float frontier_phi_46_47_ladder_1;
            float frontier_phi_46_47_ladder_2;
            float frontier_phi_46_47_ladder_3;
            float frontier_phi_46_47_ladder_4;
            float frontier_phi_46_47_ladder_5;
            if (_2493 < ((_2491 >> 12u) & 15u))
            {
                float _2685;
                float _2687;
                float _2689;
                float _2691;
                float _2693;
                float _2695;
                float _2981 = _2476;
                float _2982 = _2478;
                float _2983 = _2480;
                float _2984 = _2482;
                float _2985 = _2484;
                float _2986 = _2486;
                uint _2987 = _2493;
                uint _2996;
                bool _2997;
                for (;;)
                {
                    _2996 = texelFetch(g_lightClassification, int((((_2331 << 5u) + (_2317 << 9u)) + (_2987 << 2u)) >> 2u)).x;
                    _2997 = _2996 == 0u;
                    float frontier_phi_70_pred;
                    float frontier_phi_70_pred_1;
                    float frontier_phi_70_pred_2;
                    float frontier_phi_70_pred_3;
                    float frontier_phi_70_pred_4;
                    float frontier_phi_70_pred_5;
                    if (_2997)
                    {
                        frontier_phi_70_pred = _2981;
                        frontier_phi_70_pred_1 = _2986;
                        frontier_phi_70_pred_2 = _2985;
                        frontier_phi_70_pred_3 = _2984;
                        frontier_phi_70_pred_4 = _2983;
                        frontier_phi_70_pred_5 = _2982;
                    }
                    else
                    {
                        float _3245;
                        float _3246;
                        float _3247;
                        float _3248;
                        float _3249;
                        float _3250;
                        float _3547;
                        float _3548;
                        float _3549;
                        float _3550;
                        float _3551;
                        float _3552;
                        float _3267 = _2981;
                        float _3268 = _2982;
                        float _3269 = _2983;
                        float _3270 = _2984;
                        float _3271 = _2985;
                        float _3272 = _2986;
                        uint _3273 = _2996;
                        uint _3274;
                        vec4 _3299;
                        float _3300;
                        vec4 _3315;
                        vec3 _3327;
                        vec4 _3342;
                        vec4 _3357;
                        float _3403;
                        bool _3404;
                        for (;;)
                        {
                            uint _3284 = ((_2987 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3273));
                            _3274 = (_3273 + 4294967295u) & _3273;
                            uint _3286 = _3284 * 40u;
                            _3299 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3286)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3286 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3286 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3286 + 3u)).x));
                            _3300 = _3299.w;
                            uint _3302 = (_3284 * 40u) + 4u;
                            _3315 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3302)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3302 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3302 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3302 + 3u)).x));
                            uint _3317 = (_3284 * 40u) + 8u;
                            _3327 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3317)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3317 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3317 + 2u)).x));
                            uint _3329 = (_3284 * 40u) + 16u;
                            _3342 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3329)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3329 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3329 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3329 + 3u)).x));
                            uint _3344 = (_3284 * 40u) + 20u;
                            _3357 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3344)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3344 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3344 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3344 + 3u)).x));
                            uint _3359 = (_3284 * 40u) + 24u;
                            vec4 _3372 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3359)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3359 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3359 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3359 + 3u)).x));
                            uint _3378 = (_3284 * 40u) + 28u;
                            vec4 _3391 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3378)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3378 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3378 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3378 + 3u)).x));
                            _3403 = fma(_2293, _3391.z, fma(_2292, _3391.y, _3391.x * _2291)) + _3391.w;
                            _3404 = !((fma(_2293, _3372.z, fma(_2292, _3372.y, _3372.x * _2291)) + _3372.w) <= 0.0);
                            float frontier_phi_79_pred;
                            float frontier_phi_79_pred_1;
                            float frontier_phi_79_pred_2;
                            float frontier_phi_79_pred_3;
                            float frontier_phi_79_pred_4;
                            float frontier_phi_79_pred_5;
                            if (_3404)
                            {
                                float _3431 = _3299.x - _2291;
                                float _3432 = _3299.y - _2292;
                                float _3433 = _3299.z - _2293;
                                float _3434 = dot(vec3(_3431, _3432, _3433), vec3(_3431, _3432, _3433));
                                float _3437 = inversesqrt(_3434);
                                float _3438 = _3437 * _3431;
                                float _3439 = _3437 * _3432;
                                float _3440 = _3437 * _3433;
                                float _3444 = 1.0 - (_3434 / (_3300 * _3300));
                                float _4562 = isnan(0.0) ? _3444 : (isnan(_3444) ? 0.0 : max(_3444, 0.0));
                                float _3445 = isnan(1.0) ? _4562 : (isnan(_4562) ? 1.0 : min(_4562, 1.0));
                                float _3449 = sqrt(_3434) * _3315.w;
                                float _3451 = 1.39999997615814208984375 / (_3449 + 1.39999997615814208984375);
                                float _3452 = _3451 * _3451;
                                float _3455 = ((1.0 - _3452) * dot(vec3(_3438, _3439, _3440), vec3(_852, _855, _858))) + _3452;
                                float _3458 = _3449 * _3449;
                                float _3462 = (fma(_2293, _3342.z, fma(_2292, _3342.y, _3342.x * _2291)) + _3342.w) / _3403;
                                float _3463 = (fma(_2293, _3357.z, fma(_2292, _3357.y, _3357.x * _2291)) + _3357.w) / _3403;
                                float _3467 = 1.0 - dot(vec2(_3462, _3463), vec2(_3462, _3463));
                                float _4578 = isnan(0.0) ? _3467 : (isnan(_3467) ? 0.0 : max(_3467, 0.0));
                                float _3468 = isnan(1.0) ? _4578 : (isnan(_4578) ? 1.0 : min(_4578, 1.0));
                                float _3469 = _3468 * (((isnan(0.0) ? _3455 : (isnan(_3455) ? 0.0 : max(_3455, 0.0))) * _3445) / ((_3458 * 0.699999988079071044921875) + 1.0));
                                float _3481 = exp2(log2(1.0 / ((_3458 * 3.5) + 5.0)) * 0.25);
                                float _3482 = 1.0 - _920;
                                float _3489 = sqrt(1.0 - ((1.0 - (_3482 * _3482)) * (1.0 - (_3481 * _3481))));
                                float _3490 = _3489 * _3489;
                                float _3491 = _3490 * _3490;
                                float _3492 = _3438 - _2710;
                                float _3493 = _3439 - _2711;
                                float _3494 = _3440 - _2712;
                                float _3498 = inversesqrt(dot(vec3(_3492, _3493, _3494), vec3(_3492, _3493, _3494)));
                                float _3502 = dot(vec3(_852, _855, _858), vec3((-0.0) - _2710, (-0.0) - _2711, (-0.0) - _2712));
                                float _4589 = isnan(0.0) ? _3502 : (isnan(_3502) ? 0.0 : max(_3502, 0.0));
                                float _3505 = isnan(1.0) ? _4589 : (isnan(_4589) ? 1.0 : min(_4589, 1.0));
                                float _3506 = dot(vec3(_852, _855, _858), vec3(_3498 * _3492, _3498 * _3493, _3498 * _3494));
                                float _4600 = isnan(0.0) ? _3506 : (isnan(_3506) ? 0.0 : max(_3506, 0.0));
                                float _3509 = isnan(1.0) ? _4600 : (isnan(_4600) ? 1.0 : min(_4600, 1.0));
                                float _3513 = ((_3509 * _3509) * (_3491 + (-1.0))) + 1.0;
                                float _3514 = _3451 * _3490;
                                float _3515 = _3514 * _3514;
                                float _3521 = ((1.0 - _3515) * dot(vec3(_852, _855, _858), vec3(_3438, _3439, _3440))) + _3515;
                                float _4611 = isnan(0.0) ? _3521 : (isnan(_3521) ? 0.0 : max(_3521, 0.0));
                                float _3522 = isnan(1.0) ? _4611 : (isnan(_4611) ? 1.0 : min(_4611, 1.0));
                                float _3523 = 1.0 - _3490;
                                float _3533 = (0.5 / (((_3522 * ((_3505 * _3523) + _3490)) + 9.9999999392252902907785028219223e-09) + (((_3522 * _3523) + _3490) * _3505))) * _3522;
                                float _4622 = isnan(0.0) ? _3533 : (isnan(_3533) ? 0.0 : max(_3533, 0.0));
                                float _3543 = (_3468 * _3445) * (((_3491 * 3.1415927410125732421875) * (isnan(1.0) ? _4622 : (isnan(_4622) ? 1.0 : min(_4622, 1.0)))) / ((_3513 * _3513) * ((_3458 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_79_pred = _3543 * _3327.z;
                                frontier_phi_79_pred_1 = _3469 * _3315.z;
                                frontier_phi_79_pred_2 = _3469 * _3315.y;
                                frontier_phi_79_pred_3 = _3469 * _3315.x;
                                frontier_phi_79_pred_4 = _3543 * _3327.y;
                                frontier_phi_79_pred_5 = _3543 * _3327.x;
                            }
                            else
                            {
                                frontier_phi_79_pred = 0.0;
                                frontier_phi_79_pred_1 = 0.0;
                                frontier_phi_79_pred_2 = 0.0;
                                frontier_phi_79_pred_3 = 0.0;
                                frontier_phi_79_pred_4 = 0.0;
                                frontier_phi_79_pred_5 = 0.0;
                            }
                            _3549 = frontier_phi_79_pred;
                            _3552 = frontier_phi_79_pred_1;
                            _3551 = frontier_phi_79_pred_2;
                            _3550 = frontier_phi_79_pred_3;
                            _3548 = frontier_phi_79_pred_4;
                            _3547 = frontier_phi_79_pred_5;
                            _3248 = _3550 + _3270;
                            _3249 = _3551 + _3271;
                            _3250 = _3552 + _3272;
                            _3245 = _3547 + _3267;
                            _3246 = _3548 + _3268;
                            _3247 = _3549 + _3269;
                            if (_3274 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3267 = _3245;
                                _3268 = _3246;
                                _3269 = _3247;
                                _3270 = _3248;
                                _3271 = _3249;
                                _3272 = _3250;
                                _3273 = _3274;
                                continue;
                            }
                        }
                        frontier_phi_70_pred = _3245;
                        frontier_phi_70_pred_1 = _3250;
                        frontier_phi_70_pred_2 = _3249;
                        frontier_phi_70_pred_3 = _3248;
                        frontier_phi_70_pred_4 = _3247;
                        frontier_phi_70_pred_5 = _3246;
                    }
                    _2685 = frontier_phi_70_pred;
                    _2695 = frontier_phi_70_pred_1;
                    _2693 = frontier_phi_70_pred_2;
                    _2691 = frontier_phi_70_pred_3;
                    _2689 = frontier_phi_70_pred_4;
                    _2687 = frontier_phi_70_pred_5;
                    uint _2988 = _2987 + 1u;
                    if (_2988 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2981 = _2685;
                        _2982 = _2687;
                        _2983 = _2689;
                        _2984 = _2691;
                        _2985 = _2693;
                        _2986 = _2695;
                        _2987 = _2988;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_46_47_ladder = _2689;
                frontier_phi_46_47_ladder_1 = _2691;
                frontier_phi_46_47_ladder_2 = _2693;
                frontier_phi_46_47_ladder_3 = _2695;
                frontier_phi_46_47_ladder_4 = _2687;
                frontier_phi_46_47_ladder_5 = _2685;
            }
            else
            {
                frontier_phi_46_47_ladder = _2480;
                frontier_phi_46_47_ladder_1 = _2482;
                frontier_phi_46_47_ladder_2 = _2484;
                frontier_phi_46_47_ladder_3 = _2486;
                frontier_phi_46_47_ladder_4 = _2478;
                frontier_phi_46_47_ladder_5 = _2476;
            }
            _2684 = frontier_phi_46_47_ladder_5;
            _2686 = frontier_phi_46_47_ladder_4;
            _2688 = frontier_phi_46_47_ladder;
            _2690 = frontier_phi_46_47_ladder_1;
            _2692 = frontier_phi_46_47_ladder_2;
            _2694 = frontier_phi_46_47_ladder_3;
        }
        float _2699 = isnan(1.0) ? _896 : (isnan(_896) ? 1.0 : min(_896, 1.0));
        _2349 = (_2699 * _2690) + _2080;
        _2351 = (_2699 * _2692) + _2081;
        _2353 = (_2699 * _2694) + _2082;
        _2355 = ((_2684 * 0.039999999105930328369140625) * _2699) + _2233;
        _2357 = ((_2686 * 0.039999999105930328369140625) * _2699) + _2234;
        _2359 = ((_2688 * 0.039999999105930328369140625) * _2699) + _2235;
    }
    else
    {
        _2349 = _2080;
        _2351 = _2081;
        _2353 = _2082;
        _2355 = _2233;
        _2357 = _2234;
        _2359 = _2235;
    }
    float _2373 = cbSceneParam._m0[86u].x - (cbSceneParam._m0[85u].z * 0.5);
    float _2374 = cbSceneParam._m0[86u].y - (cbSceneParam._m0[85u].w * 0.5);
    float _2375 = cbSceneParam._m0[86u].x * (_1967 + ((_919 * cbMtdParam._m0[11u].y) * dot(vec3(_830, _831, _832), vec3(_218, _219, _220))));
    float _2376 = isnan(_2373) ? _2375 : (isnan(_2375) ? _2373 : min(_2375, _2373));
    float _2377 = isnan(_2374) ? _795 : (isnan(_795) ? _2374 : min(_795, _2374));
    vec4 _2379 = textureLod(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_2376, _2377), 0.0);
    float _2381 = _2379.x;
    bool _2401 = ((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _2381)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2381))) > _718;
    float _2402 = _2401 ? _2376 : _794;
    float _2403 = _2401 ? _2377 : _795;
    vec4 _2405 = texture(sampler2D(g_RefractionTexture, SS_ClampLinear), vec2(_2402, _2403));
    vec4 _2410 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_2402, _2403));
    float _2412 = _2410.x;
    bool _2417 = floatBitsToUint(cbSceneParam._m0[88u]).x != 0u;
    float _2426 = (-0.0) - cbSceneParam._m0[2u].z;
    float _2432 = (_2417 ? (_2426 / (cbSceneParam._m0[2u].x - _2412)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2412))) - _718;
    float _2434 = cbMtdParam._m0[25u].y + cbMtdParam._m0[23u].w;
    float _2435 = cbMtdParam._m0[25u].z + cbMtdParam._m0[24u].x;
    float _2436 = cbMtdParam._m0[25u].w + cbMtdParam._m0[24u].y;
    bool _2442 = floatBitsToUint(cbSceneParam._m0[69u]).z != 0u;
    float _2446 = (isnan(_2432) ? 0.0 : (isnan(0.0) ? _2432 : max(0.0, _2432))) * (-1.44269502162933349609375);
    float _4653 = isnan(0.0) ? _882 : (isnan(_882) ? 0.0 : max(_882, 0.0));
    float _4664 = isnan(0.0) ? _883 : (isnan(_883) ? 0.0 : max(_883, 0.0));
    float _4675 = isnan(0.0) ? _884 : (isnan(_884) ? 0.0 : max(_884, 0.0));
    float _2579;
    float _2580;
    float _2581;
    if ((1.0 - _680) > 0.00999999977648258209228515625)
    {
        vec4 _2498 = textureLod(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_2402, _2403), 0.0);
        float _2500 = _2498.x;
        float _2506 = (_2417 ? (_2426 / (cbSceneParam._m0[2u].x - _2500)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2500))) - _718;
        uint _2512 = floatBitsToUint(cbInstanceData._m0[_2015]).x * 14u;
        uint _2518 = _2512 + 4u;
        float _2527 = dot(vec3(cbLight._m0[_2512].xyz), vec3(_239, _240, _241));
        float _2535 = dot(vec3((-0.0) - _774, (-0.0) - _775, (-0.0) - _776), vec3((-0.0) - _239, (-0.0) - _240, (-0.0) - _241));
        float _2540 = ((isnan(0.0) ? _2535 : (isnan(_2535) ? 0.0 : max(_2535, 0.0))) / (isnan(0.001000000047497451305389404296875) ? _2527 : (isnan(_2527) ? 0.001000000047497451305389404296875 : max(_2527, 0.001000000047497451305389404296875)))) + 1.0;
        float _2542 = (-0.0) - ((isnan(_2506) ? 0.0 : (isnan(0.0) ? _2506 : max(0.0, _2506))) * _2540);
        _2579 = _2442 ? 0.0 : ((((cbMtdParam._m0[23u].w * 0.079577468335628509521484375) * cbLight._m0[_2518].x) / ((_2540 * _2434) + 9.9999999747524270787835121154785e-07)) * (1.0 - exp2((_2434 * 1.44269502162933349609375) * _2542)));
        _2580 = _2442 ? 0.0 : ((((cbMtdParam._m0[24u].x * 0.079577468335628509521484375) * cbLight._m0[_2518].y) / ((_2540 * _2435) + 9.9999999747524270787835121154785e-07)) * (1.0 - exp2((_2435 * 1.44269502162933349609375) * _2542)));
        _2581 = _2442 ? 0.0 : ((((cbMtdParam._m0[24u].y * 0.079577468335628509521484375) * cbLight._m0[_2518].z) / ((_2540 * _2436) + 9.9999999747524270787835121154785e-07)) * (1.0 - exp2((_2436 * 1.44269502162933349609375) * _2542)));
    }
    else
    {
        _2579 = 0.0;
        _2580 = 0.0;
        _2581 = 0.0;
    }
    float _2598 = 0.959999978542327880859375 - (exp2(log2(1.0 - _911) * 5.0) * 0.959999978542327880859375);
    float _2599 = (_2579 + ((exp2(_2446 * (_2442 ? 0.0 : _2434)) * _2405.x) * cbSceneParam._m0[72u].w)) * _2598;
    float _2600 = (_2580 + ((exp2(_2446 * (_2442 ? 0.0 : _2435)) * _2405.y) * cbSceneParam._m0[72u].w)) * _2598;
    float _2601 = (_2581 + ((exp2(_2446 * (_2442 ? 0.0 : _2436)) * _2405.z) * cbSceneParam._m0[72u].w)) * _2598;
    float _2609 = (_2599 + (((((_1944 * _1992.x) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _1950 : (isnan(_1950) ? 0.0 : max(_1950, 0.0))) * _1739) * _2008)) + _2355) * cbPerFrame._m0[3u].x)) + ((((isnan(1.0) ? _4653 : (isnan(_4653) ? 1.0 : min(_4653, 1.0))) * (_2349 + ((isnan(0.0) ? _1660 : (isnan(_1660) ? 0.0 : max(_1660, 0.0))) * _896))) - _2599) * _680);
    float _2611 = (_2600 + (((((_1944 * _1992.y) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _1953 : (isnan(_1953) ? 0.0 : max(_1953, 0.0))) * _1739) * _2008)) + _2357) * cbPerFrame._m0[3u].x)) + ((((isnan(1.0) ? _4664 : (isnan(_4664) ? 1.0 : min(_4664, 1.0))) * (_2351 + ((isnan(0.0) ? _1663 : (isnan(_1663) ? 0.0 : max(_1663, 0.0))) * _896))) - _2600) * _680);
    float _2613 = (_2601 + (((((_1944 * _1992.z) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _1956 : (isnan(_1956) ? 0.0 : max(_1956, 0.0))) * _1739) * _2008)) + _2359) * cbPerFrame._m0[3u].x)) + ((((isnan(1.0) ? _4675 : (isnan(_4675) ? 1.0 : min(_4675, 1.0))) * (_2353 + ((isnan(0.0) ? _1666 : (isnan(_1666) ? 0.0 : max(_1666, 0.0))) * _896))) - _2601) * _680);
    float _2618 = cbInstanceData._m0[_871 + 6u].w * (isnan(1.0) ? _3871 : (isnan(_3871) ? 1.0 : min(_3871, 1.0)));
    float _2623 = _794 / cbSceneParam._m0[86u].x;
    float _2624 = _795 / cbSceneParam._m0[86u].y;
    vec4 _2638 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2623, _2624, (log2((isnan(cbSceneParam._m0[77u].w) ? _718 : (isnan(_718) ? cbSceneParam._m0[77u].w : min(_718, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2640 = _2638.x;
    float _2641 = _2638.y;
    float _2642 = _2638.z;
    float _2643 = _2638.w;
    float _2772;
    float _2774;
    float _2776;
    float _2778;
    if (_718 > cbSceneParam._m0[78u].w)
    {
        float _2737 = isnan(_718) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _718 : min(cbSceneParam._m0[80u].w, _718));
        float _2738 = _2737 / _718;
        float _2749 = _2738 * _767;
        float _2750 = _768 * _2738;
        float _2751 = (-0.0) - _2750;
        float _2752 = _2738 * _769;
        float _2754 = (cbSceneParam._m0[77u].w * _2751) / _2737;
        float _2755 = _2754 + cbSceneParam._m0[79u].w;
        float _2756 = cbSceneParam._m0[79u].w - _2750;
        float _2762 = sqrt(((_2749 * _2749) + (_2750 * _2750)) + (_2752 * _2752));
        float _2765 = (1.0 - (cbSceneParam._m0[77u].w / _2737)) * _2762;
        float _2770 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2771 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3181;
        if (abs((_2751 - _2754) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3181 = ((((_2755 > 0.0) ? exp2(_2770 * _2755) : (2.0 - exp2(_2771 * _2755))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2765;
        }
        else
        {
            float _2912 = 1.0 / cbSceneParam._m0[80u].x;
            float _2913 = isnan(_2756) ? _2755 : (isnan(_2755) ? _2756 : max(_2755, _2756));
            float _2914 = isnan(_2756) ? _2755 : (isnan(_2755) ? _2756 : min(_2755, _2756));
            float _2923 = isnan(0.0) ? _2913 : (isnan(_2913) ? 0.0 : min(_2913, 0.0));
            float _2924 = isnan(0.0) ? _2914 : (isnan(_2914) ? 0.0 : min(_2914, 0.0));
            _3181 = ((abs(_2762 / _2751) * cbSceneParam._m0[80u].y) * ((((_2923 - _2924) * 2.0) - ((exp2(_2770 * (isnan(0.0) ? _2913 : (isnan(_2913) ? 0.0 : max(_2913, 0.0)))) - exp2(_2770 * (isnan(0.0) ? _2914 : (isnan(_2914) ? 0.0 : max(_2914, 0.0))))) * _2912)) - ((exp2(_2771 * _2923) - exp2(_2771 * _2924)) * _2912))) + (_2765 * cbSceneParam._m0[80u].z);
        }
        vec4 _3183 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2623, _2624, 1.0), 0.0);
        float _3192 = exp2((_3181 * (-1.44269502162933349609375)) * (1.0 - _3183.w));
        float _3193 = log2(_3192);
        float _3209 = log2(_2643);
        _2772 = (exp2(_3209 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3193 * cbSceneParam._m0[78u].x)) * _3183.x) / cbSceneParam._m0[78u].x)) + _2640;
        _2774 = (exp2(_3209 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3193 * cbSceneParam._m0[78u].y)) * _3183.y) / cbSceneParam._m0[78u].y)) + _2641;
        _2776 = (exp2(_3209 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3193 * cbSceneParam._m0[78u].z)) * _3183.z) / cbSceneParam._m0[78u].z)) + _2642;
        _2778 = _3192 * _2643;
    }
    else
    {
        _2772 = _2640;
        _2774 = _2641;
        _2776 = _2642;
        _2778 = _2643;
    }
    bool _3219;
    float _2833;
    vec4 _2836;
    float _2838;
    vec4 _2840;
    float _2848;
    float _2849;
    float _2850;
    float _2851;
    bool _2861;
    for (;;)
    {
        bool _2790 = roundEven(cbMatDynParam._m0[0u].y) == 3.0;
        float _2791 = log2(_2778);
        float _2798 = exp2(_2791 * cbSceneParam._m0[78u].x) * _2609;
        float _2799 = exp2(_2791 * cbSceneParam._m0[78u].y) * _2611;
        float _2800 = exp2(_2791 * cbSceneParam._m0[78u].z) * _2613;
        vec4 _2808 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_794, _795));
        float _2810 = _2808.x;
        float _2831 = (((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _2810)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2810))) - _718) * 3.0;
        float _4741 = isnan(0.0) ? _2831 : (isnan(_2831) ? 0.0 : max(_2831, 0.0));
        _2833 = _2618 * (isnan(1.0) ? _4741 : (isnan(_4741) ? 1.0 : min(_4741, 1.0)));
        float _2834 = _783 + (-0.5);
        _2836 = cbMtdParam._m0[1u];
        _2838 = _2836.y * _2834;
        _2840 = cbMatDynParam._m0[0u];
        float _2847 = (roundEven(_2840.y) != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2848 = _2847 * (_2790 ? _2798 : (_2798 + (cbSceneParam._m0[72u].w * _2772)));
        _2849 = _2847 * (_2790 ? _2799 : (_2799 + (cbSceneParam._m0[72u].w * _2774)));
        _2850 = _2847 * (_2790 ? _2800 : (_2800 + (cbSceneParam._m0[72u].w * _2776)));
        _2851 = _2834 * 0.999000012874603271484375;
        _2861 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2861)
        {
            if ((cbInstanceData._m0[_871 + 7u].x + _2851) < 0.5)
            {
                _3219 = true;
                break;
            }
        }
        uint _2947 = _872 + uint(_2840.w);
        if ((cbInstanceData._m0[_2947].w < 1.0) && ((cbInstanceData._m0[_2947].w + _2851) < 0.5))
        {
            _3219 = true;
            break;
        }
        if ((_2838 + 1.0) < _2836.x)
        {
            _3219 = true;
            break;
        }
        _3219 = false;
        break;
    }
    float _3258;
    if (_3219)
    {
        discard_state = true;
        _3258 = 0.0;
    }
    else
    {
        _3258 = _2833;
    }
    SV_Target.x = _2848;
    SV_Target.y = _2849;
    SV_Target.z = _2850;
    SV_Target.w = _3258;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2833;
    discard_exit();
}


