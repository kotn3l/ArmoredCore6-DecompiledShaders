#version 460

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[28];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 0, std140) uniform cbPerSceneUBO
{
    vec4 _m0[39];
} cbPerScene;

layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 26) uniform texture2D g_PrevFrameTexture;
layout(set = 0, binding = 27) uniform texture2D g_ConvertedDepthTexture;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 7) uniform sampler SS_ClampPoint;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 6) in vec3 TEXCOORD_8;
layout(location = 0) out vec4 SV_Target;
bool discard_state;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    float _96 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _97 = _96 * NORMAL.x;
    float _98 = _96 * NORMAL.y;
    float _99 = _96 * NORMAL.z;
    float _104;
    float _105;
    float _106;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _104 = (-0.0) - _97;
        _105 = (-0.0) - _98;
        _106 = (-0.0) - _99;
    }
    else
    {
        _104 = _97;
        _105 = _98;
        _106 = _99;
    }
    float _151 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _161 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _151);
    float _162 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _151);
    float _163 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _151);
    float _173 = sqrt(((_161 * _161) + (_162 * _162)) + (_163 * _163));
    float _176 = cbMtdParam._m0[13u].y - cbMtdParam._m0[13u].x;
    float _195 = (cbMtdParam._m0[15u].x + ((_173 - cbMtdParam._m0[13u].x) / (isnan(0.0) ? _176 : (isnan(_176) ? 0.0 : max(_176, 0.0))))) * cbMtdParam._m0[14u].y;
    float _809 = isnan(0.0) ? _195 : (isnan(_195) ? 0.0 : max(_195, 0.0));
    float _200 = ((isnan(1.0) ? _809 : (isnan(_809) ? 1.0 : min(_809, 1.0))) * (cbMtdParam._m0[12u].z - cbMtdParam._m0[11u].x)) + cbMtdParam._m0[11u].x;
    float _820 = isnan(0.0) ? _200 : (isnan(_200) ? 0.0 : max(_200, 0.0));
    float _201 = isnan(1.0) ? _820 : (isnan(_820) ? 1.0 : min(_820, 1.0));
    float _215 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _249 = (cbMatDynParam._m0[5u].x * _173) + cbMatDynParam._m0[5u].y;
        float _831 = isnan(0.0) ? _249 : (isnan(_249) ? 0.0 : max(_249, 0.0));
        float _250 = isnan(1.0) ? _831 : (isnan(_831) ? 1.0 : min(_831, 1.0));
        float _254 = (cbMatDynParam._m0[5u].z * _173) + cbMatDynParam._m0[5u].w;
        float _842 = isnan(0.0) ? _254 : (isnan(_254) ? 0.0 : max(_254, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _842 : (isnan(_842) ? 1.0 : min(_842, 1.0))) - _250)) + _250) < ((texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125)).w * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _225 = POSITION_1.x / POSITION_1.w;
    float _226 = POSITION_1.y / POSITION_1.w;
    float _230 = (_225 * 0.5) + 0.5;
    float _231 = 0.5 - (_226 * 0.5);
    float _267;
    float _269;
    float _271;
    float _273;
    if (_201 < cbPerScene._m0[22u].z)
    {
        _267 = 0.0;
        _269 = 0.0;
        _271 = 0.0;
        _273 = 0.0;
    }
    else
    {
        float _279 = 1.0 / _215;
        float frontier_phi_5_6_ladder;
        float frontier_phi_5_6_ladder_1;
        float frontier_phi_5_6_ladder_2;
        float frontier_phi_5_6_ladder_3;
        if (!(cbPerScene._m0[21u].y >= _279))
        {
            float _305 = fma(_106, cbPerScene._m0[8u].z, fma(_105, cbPerScene._m0[8u].y, cbPerScene._m0[8u].x * _104));
            float _308 = fma(_106, cbPerScene._m0[9u].z, fma(_105, cbPerScene._m0[9u].y, cbPerScene._m0[9u].x * _104));
            float _311 = fma(_106, cbPerScene._m0[10u].z, fma(_105, cbPerScene._m0[10u].y, cbPerScene._m0[10u].x * _104));
            float _317 = (_225 * _215) * cbPerScene._m0[28u].x;
            float _319 = (_226 * _215) * cbPerScene._m0[28u].y;
            float _323 = inversesqrt(dot(vec3(_317, _319, _215), vec3(_317, _319, _215)));
            float _324 = _317 * _323;
            float _325 = _319 * _323;
            float _326 = _323 * _215;
            float _330 = dot(vec3(_324, _325, _326), vec3(_305, _308, _311)) * 2.0;
            float _335 = _324 - (_330 * _305);
            float _336 = _325 - (_330 * _308);
            float _337 = _326 - (_330 * _311);
            float _341 = inversesqrt(dot(vec3(_335, _336, _337), vec3(_335, _336, _337)));
            float _344 = _337 * _341;
            float frontier_phi_5_6_ladder_8_ladder;
            float frontier_phi_5_6_ladder_8_ladder_1;
            float frontier_phi_5_6_ladder_8_ladder_2;
            float frontier_phi_5_6_ladder_8_ladder_3;
            if (_344 < cbPerScene._m0[16u].x)
            {
                frontier_phi_5_6_ladder_8_ladder = 0.0;
                frontier_phi_5_6_ladder_8_ladder_1 = 0.0;
                frontier_phi_5_6_ladder_8_ladder_2 = 0.0;
                frontier_phi_5_6_ladder_8_ladder_3 = 0.0;
            }
            else
            {
                float _356 = abs(dot(vec3((-0.0) - _324, (-0.0) - _325, (-0.0) - _326), vec3(_305, _308, _311)));
                float _853 = isnan(0.0) ? _356 : (isnan(_356) ? 0.0 : max(_356, 0.0));
                float _367 = (((_201 * _201) * 0.959999978542327880859375) * exp2(log2(1.0 - (isnan(1.0) ? _853 : (isnan(_853) ? 1.0 : min(_853, 1.0)))) * 5.0)) + 0.039999999105930328369140625;
                float _376 = (cbPerScene._m0[29u].x * (1.0 - _201)) + cbPerScene._m0[29u].y;
                float _864 = isnan(0.0) ? _376 : (isnan(_376) ? 0.0 : max(_376, 0.0));
                float _385 = ((cbPerScene._m0[23u].w - cbPerScene._m0[23u].z) * (isnan(1.0) ? _864 : (isnan(_864) ? 1.0 : min(_864, 1.0)))) + cbPerScene._m0[23u].z;
                float frontier_phi_5_6_ladder_8_ladder_9_ladder;
                float frontier_phi_5_6_ladder_8_ladder_9_ladder_1;
                float frontier_phi_5_6_ladder_8_ladder_9_ladder_2;
                float frontier_phi_5_6_ladder_8_ladder_9_ladder_3;
                if (_367 < cbPerScene._m0[22u].x)
                {
                    frontier_phi_5_6_ladder_8_ladder_9_ladder = 0.0;
                    frontier_phi_5_6_ladder_8_ladder_9_ladder_1 = 0.0;
                    frontier_phi_5_6_ladder_8_ladder_9_ladder_2 = 0.0;
                    frontier_phi_5_6_ladder_8_ladder_9_ladder_3 = 0.0;
                }
                else
                {
                    float _388 = _344 - cbPerScene._m0[16u].x;
                    float _875 = isnan(0.0) ? _388 : (isnan(_388) ? 0.0 : max(_388, 0.0));
                    float _389 = isnan(1.0) ? _875 : (isnan(_875) ? 1.0 : min(_875, 1.0));
                    float _390 = _389 * _389;
                    float _392 = (_367 - cbPerScene._m0[22u].x) * 10.0;
                    float _886 = isnan(0.0) ? _392 : (isnan(_392) ? 0.0 : max(_392, 0.0));
                    float _394 = isnan(1.0) ? _886 : (isnan(_886) ? 1.0 : min(_886, 1.0));
                    float _395 = isnan(_394) ? _390 : (isnan(_390) ? _394 : min(_390, _394));
                    float _399 = (cbPerScene._m0[21u].x - _215) * cbPerScene._m0[21u].z;
                    float _902 = isnan(0.0) ? _399 : (isnan(_399) ? 0.0 : max(_399, 0.0));
                    float _400 = isnan(1.0) ? _902 : (isnan(_902) ? 1.0 : min(_902, 1.0));
                    float _401 = isnan(_400) ? _395 : (isnan(_395) ? _400 : min(_395, _400));
                    float _402 = (_335 * _341) + _317;
                    float _403 = (_336 * _341) + _319;
                    float _404 = _344 + _215;
                    float _436 = fma(_404, cbPerScene._m0[7u].z, fma(_403, cbPerScene._m0[7u].y, cbPerScene._m0[7u].x * _402)) + cbPerScene._m0[7u].w;
                    float _440 = ((fma(_404, cbPerScene._m0[4u].z, fma(_403, cbPerScene._m0[4u].y, cbPerScene._m0[4u].x * _402)) + cbPerScene._m0[4u].w) / _436) - _230;
                    float _441 = ((fma(_404, cbPerScene._m0[5u].z, fma(_403, cbPerScene._m0[5u].y, cbPerScene._m0[5u].x * _402)) + cbPerScene._m0[5u].w) / _436) - _231;
                    float _448 = cbPerScene._m0[18u].x * _440;
                    float _449 = cbPerScene._m0[18u].y * _441;
                    float _454 = sqrt((_448 * _448) + (_449 * _449)) + 9.9999997473787516355514526367188e-06;
                    float _459 = (_440 / _454) * _385;
                    float _460 = (_441 / _454) * _385;
                    float _461 = (((1.0 / _404) - _279) / _454) * _385;
                    float _490 = abs(float(_459 > 0.0) - _230) / (abs(_459) + 1.0000000116860974230803549289703e-07);
                    float _491 = abs(float(_460 > 0.0) - _231) / (abs(_460) + 1.0000000116860974230803549289703e-07);
                    float _493 = (abs(((_461 > 0.0) ? cbPerScene._m0[20u].x : cbPerScene._m0[20u].y) - _279) / (abs(_461) + 1.0000000116860974230803549289703e-07)) + 2.0;
                    float _494 = isnan(_491) ? _490 : (isnan(_490) ? _491 : min(_490, _491));
                    float _495 = isnan(_493) ? _494 : (isnan(_494) ? _493 : min(_494, _493));
                    uint _498 = uint(int(isnan(cbPerScene._m0[23u].y) ? _495 : (isnan(_495) ? cbPerScene._m0[23u].y : min(_495, cbPerScene._m0[23u].y))));
                    float _274;
                    float _503;
                    float _505;
                    float _507;
                    if (int(_498) > int(0u))
                    {
                        float _500 = _461 + _279;
                        float _501 = _460 + _231;
                        float _502 = _459 + _230;
                        float _504;
                        float _506;
                        float _508;
                        float _509;
                        uint _520;
                        float _522;
                        float _524;
                        float _526;
                        float _528;
                        float _530;
                        float _532;
                        float _534;
                        uint _536;
                        float _538;
                        float _540;
                        float _542;
                        float _515 = 0.0;
                        float _516 = 0.0;
                        float _517 = 0.0;
                        float _518 = 0.0;
                        uint _519 = 0u;
                        float _521 = _279;
                        float _523 = _502;
                        float _525 = _501;
                        float _527 = _500;
                        float _529 = _230;
                        float _531 = _231;
                        float _533 = _279;
                        uint _535 = 1u;
                        float _537 = 0.0;
                        float _539 = 0.0;
                        float _541 = 0.0;
                        float _553;
                        float _559;
                        float _560;
                        float _561;
                        float _562;
                        float _563;
                        float _564;
                        uint _565;
                        float _566;
                        bool _573;
                        for (;;)
                        {
                            _553 = textureLod(sampler2D(g_ConvertedDepthTexture, SS_ClampPoint), vec2(cbSceneParam._m0[86u].x * _523, cbSceneParam._m0[86u].y * _525), 0.0).x;
                            bool _558 = _519 == (_498 + 4294967295u);
                            _559 = _558 ? _537 : _523;
                            _560 = _558 ? _539 : _525;
                            _561 = _558 ? _541 : _527;
                            _562 = _558 ? _537 : _529;
                            _563 = _558 ? _539 : _531;
                            _564 = _558 ? _541 : _533;
                            _565 = _558 ? 1u : _535;
                            _566 = _558 ? (-1.0) : (_527 - _553);
                            _573 = (_565 != 0u) && ((_566 <= 0.0) && ((_558 ? (-1.0) : (_553 - (_521 * cbPerScene._m0[19u].y))) < 0.0));
                            float frontier_phi_19_pred;
                            float frontier_phi_19_pred_1;
                            float frontier_phi_19_pred_2;
                            float frontier_phi_19_pred_3;
                            float frontier_phi_19_pred_4;
                            float frontier_phi_19_pred_5;
                            float frontier_phi_19_pred_6;
                            uint frontier_phi_19_pred_7;
                            float frontier_phi_19_pred_8;
                            float frontier_phi_19_pred_9;
                            float frontier_phi_19_pred_10;
                            float frontier_phi_19_pred_11;
                            float frontier_phi_19_pred_12;
                            float frontier_phi_19_pred_13;
                            float frontier_phi_19_pred_14;
                            uint frontier_phi_19_pred_15;
                            if (_573)
                            {
                                uint _583 = uint(int(log2(_385) + 0.999000012874603271484375));
                                float _594;
                                float _596;
                                float _598;
                                float _600;
                                float _602;
                                float _604;
                                float _606;
                                if (int(_583) > int(0u))
                                {
                                    uint _705;
                                    float _707;
                                    float _708;
                                    float _709;
                                    float _710;
                                    float _711;
                                    float _712;
                                    float _713;
                                    _705 = 0u;
                                    _707 = _559;
                                    _708 = _560;
                                    _709 = _561;
                                    _710 = _562;
                                    _711 = _563;
                                    _712 = _564;
                                    _713 = _553;
                                    float _595;
                                    float _597;
                                    float _599;
                                    float _601;
                                    float _603;
                                    float _605;
                                    float _607;
                                    for (;;)
                                    {
                                        float _717 = (_710 + _707) * 0.5;
                                        float _718 = (_711 + _708) * 0.5;
                                        float _719 = (_712 + _709) * 0.5;
                                        vec4 _727 = textureLod(sampler2D(g_ConvertedDepthTexture, SS_ClampPoint), vec2(cbSceneParam._m0[86u].x * _717, cbSceneParam._m0[86u].y * _718), 0.0);
                                        float _729 = _727.x;
                                        bool _731 = (_719 - _729) < 0.0;
                                        _595 = _731 ? _717 : _707;
                                        _597 = _731 ? _718 : _708;
                                        _599 = _731 ? _719 : _709;
                                        _601 = _731 ? _710 : _717;
                                        _603 = _731 ? _711 : _718;
                                        _605 = _731 ? _712 : _719;
                                        _607 = _731 ? _729 : _713;
                                        uint _706 = _705 + 1u;
                                        if (_706 == _583)
                                        {
                                            break;
                                        }
                                        else
                                        {
                                            _705 = _706;
                                            _707 = _595;
                                            _708 = _597;
                                            _709 = _599;
                                            _710 = _601;
                                            _711 = _603;
                                            _712 = _605;
                                            _713 = _607;
                                        }
                                    }
                                    _594 = _595;
                                    _596 = _597;
                                    _598 = _599;
                                    _600 = _601;
                                    _602 = _603;
                                    _604 = _605;
                                    _606 = _607;
                                }
                                else
                                {
                                    _594 = _559;
                                    _596 = _560;
                                    _598 = _561;
                                    _600 = _562;
                                    _602 = _563;
                                    _604 = _564;
                                    _606 = _553;
                                }
                                float _616 = cbPerScene._m0[28u].x * ((_594 * 2.0) + (-1.0));
                                float _617 = cbPerScene._m0[28u].y * (1.0 - (_596 * 2.0));
                                float _650 = fma(_606, cbPerScene._m0[27u].w, fma(_617, cbPerScene._m0[27u].y, cbPerScene._m0[27u].x * _616) + cbPerScene._m0[27u].z);
                                float _651 = fma(_606, cbPerScene._m0[24u].w, fma(_617, cbPerScene._m0[24u].y, _616 * cbPerScene._m0[24u].x) + cbPerScene._m0[24u].z) / _650;
                                float _652 = fma(_606, cbPerScene._m0[25u].w, fma(_617, cbPerScene._m0[25u].y, cbPerScene._m0[25u].x * _616) + cbPerScene._m0[25u].z) / _650;
                                vec4 _661 = textureLod(sampler2D(g_PrevFrameTexture, SS_ClampLinear), vec2(cbSceneParam._m0[87u].z * _651, cbSceneParam._m0[87u].w * _652), 0.0);
                                float _666 = isnan(_401) ? 1.0 : (isnan(1.0) ? _401 : min(1.0, _401));
                                float _667 = 0.5 - _651;
                                float _668 = 0.5 - _652;
                                float _669 = _667 * 2.0;
                                float _670 = _668 * 2.0;
                                float _671 = _669 * _669;
                                float _672 = _670 * _670;
                                float _938 = isnan(0.0) ? _671 : (isnan(_671) ? 0.0 : max(_671, 0.0));
                                float _949 = isnan(0.0) ? _672 : (isnan(_672) ? 0.0 : max(_672, 0.0));
                                float _681 = inversesqrt(dot(vec2(_459, _460), vec2(_459, _460)));
                                float _687 = inversesqrt(dot(vec2(_669, _670), vec2(_669, _670)));
                                float _693 = dot(vec2((_667 * (-2.0)) * _687, (_668 * (-2.0)) * _687), vec2(_681 * _459, _681 * _460));
                                float _960 = isnan(0.0) ? _693 : (isnan(_693) ? 0.0 : max(_693, 0.0));
                                float _700 = ((1.0 - (isnan(1.0) ? _949 : (isnan(_949) ? 1.0 : min(_949, 1.0)))) * (1.0 - (isnan(1.0) ? _938 : (isnan(_938) ? 1.0 : min(_938, 1.0))))) * (4.0 - ((isnan(1.0) ? _960 : (isnan(_960) ? 1.0 : min(_960, 1.0))) * 2.0));
                                float _971 = isnan(0.0) ? _700 : (isnan(_700) ? 0.0 : max(_700, 0.0));
                                float _701 = isnan(1.0) ? _971 : (isnan(_971) ? 1.0 : min(_971, 1.0));
                                float _702 = _701 * _701;
                                frontier_phi_19_pred = _604;
                                frontier_phi_19_pred_1 = _602;
                                frontier_phi_19_pred_2 = _539;
                                frontier_phi_19_pred_3 = _600;
                                frontier_phi_19_pred_4 = _598;
                                frontier_phi_19_pred_5 = _596;
                                frontier_phi_19_pred_6 = _521;
                                frontier_phi_19_pred_7 = _498;
                                frontier_phi_19_pred_8 = isnan(_702) ? _666 : (isnan(_666) ? _702 : min(_666, _702));
                                frontier_phi_19_pred_9 = _661.z;
                                frontier_phi_19_pred_10 = _661.y;
                                frontier_phi_19_pred_11 = _661.x;
                                frontier_phi_19_pred_12 = _594;
                                frontier_phi_19_pred_13 = _541;
                                frontier_phi_19_pred_14 = _537;
                                frontier_phi_19_pred_15 = _565;
                            }
                            else
                            {
                                bool _585 = _566 > 0.0;
                                frontier_phi_19_pred = _561;
                                frontier_phi_19_pred_1 = _560;
                                frontier_phi_19_pred_2 = _585 ? _560 : _539;
                                frontier_phi_19_pred_3 = _559;
                                frontier_phi_19_pred_4 = _561 + _461;
                                frontier_phi_19_pred_5 = _560 + _460;
                                frontier_phi_19_pred_6 = _553;
                                frontier_phi_19_pred_7 = _519 + 1u;
                                frontier_phi_19_pred_8 = _518;
                                frontier_phi_19_pred_9 = _517;
                                frontier_phi_19_pred_10 = _516;
                                frontier_phi_19_pred_11 = _515;
                                frontier_phi_19_pred_12 = _559 + _459;
                                frontier_phi_19_pred_13 = _585 ? _561 : _541;
                                frontier_phi_19_pred_14 = _585 ? _559 : _537;
                                frontier_phi_19_pred_15 = uint(_585);
                            }
                            _534 = frontier_phi_19_pred;
                            _532 = frontier_phi_19_pred_1;
                            _540 = frontier_phi_19_pred_2;
                            _530 = frontier_phi_19_pred_3;
                            _528 = frontier_phi_19_pred_4;
                            _526 = frontier_phi_19_pred_5;
                            _522 = frontier_phi_19_pred_6;
                            _520 = frontier_phi_19_pred_7;
                            _509 = frontier_phi_19_pred_8;
                            _508 = frontier_phi_19_pred_9;
                            _506 = frontier_phi_19_pred_10;
                            _504 = frontier_phi_19_pred_11;
                            _524 = frontier_phi_19_pred_12;
                            _542 = frontier_phi_19_pred_13;
                            _538 = frontier_phi_19_pred_14;
                            _536 = frontier_phi_19_pred_15;
                            if (int(_520) < int(_498))
                            {
                                _515 = _504;
                                _516 = _506;
                                _517 = _508;
                                _518 = _509;
                                _519 = _520;
                                _521 = _522;
                                _523 = _524;
                                _525 = _526;
                                _527 = _528;
                                _529 = _530;
                                _531 = _532;
                                _533 = _534;
                                _535 = _536;
                                _537 = _538;
                                _539 = _540;
                                _541 = _542;
                                continue;
                            }
                            else
                            {
                                break;
                            }
                        }
                        _503 = _504;
                        _505 = _506;
                        _507 = _508;
                        _274 = _509;
                    }
                    else
                    {
                        _503 = 0.0;
                        _505 = 0.0;
                        _507 = 0.0;
                        _274 = 0.0;
                    }
                    float frontier_phi_5_6_ladder_8_ladder_9_ladder_12_ladder;
                    float frontier_phi_5_6_ladder_8_ladder_9_ladder_12_ladder_1;
                    float frontier_phi_5_6_ladder_8_ladder_9_ladder_12_ladder_2;
                    float frontier_phi_5_6_ladder_8_ladder_9_ladder_12_ladder_3;
                    if ((isnan(_503) || isnan(_505)) || isnan(_507))
                    {
                        frontier_phi_5_6_ladder_8_ladder_9_ladder_12_ladder = 0.0;
                        frontier_phi_5_6_ladder_8_ladder_9_ladder_12_ladder_1 = 0.0;
                        frontier_phi_5_6_ladder_8_ladder_9_ladder_12_ladder_2 = 0.0;
                        frontier_phi_5_6_ladder_8_ladder_9_ladder_12_ladder_3 = 0.0;
                    }
                    else
                    {
                        frontier_phi_5_6_ladder_8_ladder_9_ladder_12_ladder = (_274 * _503) * cbPerScene._m0[28u].w;
                        frontier_phi_5_6_ladder_8_ladder_9_ladder_12_ladder_1 = _274;
                        frontier_phi_5_6_ladder_8_ladder_9_ladder_12_ladder_2 = (_274 * _507) * cbPerScene._m0[28u].w;
                        frontier_phi_5_6_ladder_8_ladder_9_ladder_12_ladder_3 = (_274 * _505) * cbPerScene._m0[28u].w;
                    }
                    frontier_phi_5_6_ladder_8_ladder_9_ladder = frontier_phi_5_6_ladder_8_ladder_9_ladder_12_ladder;
                    frontier_phi_5_6_ladder_8_ladder_9_ladder_1 = frontier_phi_5_6_ladder_8_ladder_9_ladder_12_ladder_1;
                    frontier_phi_5_6_ladder_8_ladder_9_ladder_2 = frontier_phi_5_6_ladder_8_ladder_9_ladder_12_ladder_2;
                    frontier_phi_5_6_ladder_8_ladder_9_ladder_3 = frontier_phi_5_6_ladder_8_ladder_9_ladder_12_ladder_3;
                }
                frontier_phi_5_6_ladder_8_ladder = frontier_phi_5_6_ladder_8_ladder_9_ladder;
                frontier_phi_5_6_ladder_8_ladder_1 = frontier_phi_5_6_ladder_8_ladder_9_ladder_1;
                frontier_phi_5_6_ladder_8_ladder_2 = frontier_phi_5_6_ladder_8_ladder_9_ladder_2;
                frontier_phi_5_6_ladder_8_ladder_3 = frontier_phi_5_6_ladder_8_ladder_9_ladder_3;
            }
            frontier_phi_5_6_ladder = frontier_phi_5_6_ladder_8_ladder;
            frontier_phi_5_6_ladder_1 = frontier_phi_5_6_ladder_8_ladder_1;
            frontier_phi_5_6_ladder_2 = frontier_phi_5_6_ladder_8_ladder_2;
            frontier_phi_5_6_ladder_3 = frontier_phi_5_6_ladder_8_ladder_3;
        }
        else
        {
            frontier_phi_5_6_ladder = 0.0;
            frontier_phi_5_6_ladder_1 = 0.0;
            frontier_phi_5_6_ladder_2 = 0.0;
            frontier_phi_5_6_ladder_3 = 0.0;
        }
        _267 = frontier_phi_5_6_ladder;
        _269 = frontier_phi_5_6_ladder_3;
        _271 = frontier_phi_5_6_ladder_2;
        _273 = frontier_phi_5_6_ladder_1;
    }
    SV_Target.x = _267;
    SV_Target.y = _269;
    SV_Target.z = _271;
    SV_Target.w = _273;
    discard_exit();
}


