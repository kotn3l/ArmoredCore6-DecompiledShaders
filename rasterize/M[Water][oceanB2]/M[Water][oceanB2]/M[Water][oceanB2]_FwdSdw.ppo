#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[28];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 44) uniform texture2D g_RLRTexture;
layout(set = 0, binding = 55) uniform texture2D g_RefractionTexture;
layout(set = 0, binding = 57) uniform texture2D g_WaterSimulationNormalTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 56) uniform texture2D g_DepthTexture;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Water_oceanB2_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_Water_oceanB2_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_Water_oceanB2_snp_0_Texture2D_2;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 7) uniform sampler SS_ClampPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 6) in vec3 TEXCOORD_8;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1260;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _210 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _211 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _212 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _217 = inversesqrt(dot(vec3(_210, _211, _212), vec3(_210, _211, _212)));
    float _218 = _217 * _210;
    float _219 = _217 * _211;
    float _220 = _217 * _212;
    float _224 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _225 = _224 * NORMAL.x;
    float _226 = _224 * NORMAL.y;
    float _227 = _224 * NORMAL.z;
    float _231 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _239;
    float _240;
    float _241;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _239 = (-0.0) - _225;
        _240 = (-0.0) - _226;
        _241 = (-0.0) - _227;
    }
    else
    {
        _239 = _225;
        _240 = _226;
        _241 = _227;
    }
    float _285 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _295 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _285);
    float _296 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _285);
    float _297 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _285);
    float _314 = cbMtdParam._m0[11u].z * cbPerFrame._m0[22u].x;
    vec4 _331 = texture(sampler2D(M_Water_oceanB2_snp_0_Texture2D_2, SS_BumpMap), vec2((((_314 * cbMtdParam._m0[20u].w) + TEXCOORD.x) * cbTextureTilingScale._m0[2u].x) + cbTextureTilingScale._m0[2u].z, (((_314 * cbMtdParam._m0[21u].x) + TEXCOORD.y) * cbTextureTilingScale._m0[2u].y) + cbTextureTilingScale._m0[2u].w));
    float _334 = _331.x;
    float _335 = _331.y;
    float _355 = cbMtdParam._m0[13u].y - cbMtdParam._m0[13u].x;
    float _357 = (sqrt(((_295 * _295) + (_296 * _296)) + (_297 * _297)) - cbMtdParam._m0[13u].x) / (isnan(0.0) ? _355 : (isnan(_355) ? 0.0 : max(_355, 0.0)));
    float _364 = (cbMtdParam._m0[13u].w + _357) * cbMtdParam._m0[15u].y;
    float _3884 = isnan(0.0) ? _364 : (isnan(_364) ? 0.0 : max(_364, 0.0));
    vec4 _378 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(cbSceneParam._m0[85u].z * gl_FragCoord.x, cbSceneParam._m0[85u].w * gl_FragCoord.y));
    float _380 = _378.x;
    bool _387 = floatBitsToUint(cbSceneParam._m0[88u]).x != 0u;
    float _403 = ((_387 ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _380)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _380))) - POSITION_1.w) / (((isnan(1.0) ? _3884 : (isnan(_3884) ? 1.0 : min(_3884, 1.0))) * (cbMtdParam._m0[12u].w - cbMtdParam._m0[12u].y)) + cbMtdParam._m0[12u].y);
    float _3895 = isnan(0.0) ? _403 : (isnan(_403) ? 0.0 : max(_403, 0.0));
    float _404 = isnan(1.0) ? _3895 : (isnan(_3895) ? 1.0 : min(_3895, 1.0));
    float _410 = 1.0 - (isnan(cbMtdParam._m0[16u].z) ? _404 : (isnan(_404) ? cbMtdParam._m0[16u].z : max(_404, cbMtdParam._m0[16u].z)));
    float _3911 = isnan(0.0) ? _357 : (isnan(_357) ? 0.0 : max(_357, 0.0));
    float _411 = isnan(1.0) ? _3911 : (isnan(_3911) ? 1.0 : min(_3911, 1.0));
    float _412 = _331.z - _411;
    float _3922 = isnan(0.0) ? _412 : (isnan(_412) ? 0.0 : max(_412, 0.0));
    float _413 = isnan(1.0) ? _3922 : (isnan(_3922) ? 1.0 : min(_3922, 1.0));
    float _414 = _413 * 0.004999999888241291046142578125;
    float _416 = _413 * (-0.004999999888241291046142578125);
    vec4 _449 = texture(sampler2D(M_Water_oceanB2_snp_0_Texture2D_0, SS_BumpMap), vec2(((((cbMtdParam._m0[18u].y * _314) + _414) + (cbMtdParam._m0[19u].w * TEXCOORD.x)) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((((cbMtdParam._m0[18u].z * _314) + _416) + (cbMtdParam._m0[20u].x * TEXCOORD.y)) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    float _453 = _449.z;
    vec4 _472 = texture(sampler2D(M_Water_oceanB2_snp_0_Texture2D_0, SS_BumpMap), vec2(((((cbMtdParam._m0[17u].w * _314) + _414) + (cbMtdParam._m0[20u].y * TEXCOORD.x)) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((((cbMtdParam._m0[18u].x * _314) + _416) + (cbMtdParam._m0[20u].z * TEXCOORD.y)) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    float _476 = _472.z;
    float _479 = (_410 - _331.w) + (isnan(_476) ? _453 : (isnan(_453) ? _476 : max(_453, _476)));
    float _3938 = isnan(0.0) ? _479 : (isnan(_479) ? 0.0 : max(_479, 0.0));
    float _483 = (TEXCOORD_5.x - _410) + cbMtdParam._m0[16u].y;
    float _484 = _483 * (isnan(1.0) ? _3938 : (isnan(_3938) ? 1.0 : min(_3938, 1.0)));
    float _496 = (_484 + cbMtdParam._m0[9u].x) + (cbMtdParam._m0[10u].x * _413);
    float _497 = (_484 + cbMtdParam._m0[9u].y) + (cbMtdParam._m0[10u].y * _413);
    float _498 = (_484 + cbMtdParam._m0[9u].z) + (cbMtdParam._m0[10u].z * _413);
    float _3949 = isnan(0.0) ? _483 : (isnan(_483) ? 0.0 : max(_483, 0.0));
    float _500 = 1.0 - (isnan(1.0) ? _3949 : (isnan(_3949) ? 1.0 : min(_3949, 1.0)));
    float _507 = ((_500 - _496) * _411) + _496;
    float _508 = ((_500 - _497) * _411) + _497;
    float _509 = ((_500 - _498) * _411) + _498;
    float _514 = _357 / cbMtdParam._m0[15u].w;
    float _3960 = isnan(0.0) ? _514 : (isnan(_514) ? 0.0 : max(_514, 0.0));
    float _517 = (1.0 - (isnan(1.0) ? _3960 : (isnan(_3960) ? 1.0 : min(_3960, 1.0)))) * cbMtdParam._m0[15u].z;
    float _530 = (cbMtdParam._m0[15u].x + _357) * cbMtdParam._m0[14u].y;
    float _3971 = isnan(0.0) ? _530 : (isnan(_530) ? 0.0 : max(_530, 0.0));
    float _534 = ((isnan(1.0) ? _3971 : (isnan(_3971) ? 1.0 : min(_3971, 1.0))) * (cbMtdParam._m0[12u].z - cbMtdParam._m0[11u].x)) + cbMtdParam._m0[11u].x;
    float _3982 = isnan(0.0) ? TEXCOORD_5.y : (isnan(TEXCOORD_5.y) ? 0.0 : max(TEXCOORD_5.y, 0.0));
    float _535 = isnan(1.0) ? _3982 : (isnan(_3982) ? 1.0 : min(_3982, 1.0));
    float _544 = _357 / cbMtdParam._m0[14u].w;
    float _3993 = isnan(0.0) ? _544 : (isnan(_544) ? 0.0 : max(_544, 0.0));
    float _545 = isnan(1.0) ? _3993 : (isnan(_3993) ? 1.0 : min(_3993, 1.0));
    vec4 _565 = texture(sampler2D(M_Water_oceanB2_snp_0_Texture2D_1, SS_BumpMap), vec2((((cbMtdParam._m0[21u].y * _314) + TEXCOORD.z) * cbTextureTilingScale._m0[1u].x) + cbTextureTilingScale._m0[1u].z, (((cbMtdParam._m0[21u].z * _314) + TEXCOORD.w) * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w));
    float _574 = ((_472.x + (-0.5)) * 0.5) + _449.x;
    float _575 = ((_472.y + (-0.5)) * 0.5) + _449.y;
    float _583 = _413 * 0.119999997317790985107421875;
    float _585 = _413 * (-0.100000001490116119384765625);
    float _595 = cbMtdParam._m0[22u].y * TEXCOORD.x;
    float _596 = cbMtdParam._m0[22u].z * TEXCOORD.y;
    vec4 _605 = texture(sampler2D(M_Water_oceanB2_snp_0_Texture2D_0, SS_BumpMap), vec2(((((cbMtdParam._m0[21u].w * _314) + _583) + _595) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((((cbMtdParam._m0[22u].x * _314) + _585) + _596) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    vec4 _623 = texture(sampler2D(M_Water_oceanB2_snp_0_Texture2D_0, SS_BumpMap), vec2((((_595 + _583) + (cbMtdParam._m0[22u].w * _314)) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, (((_596 + _585) + (cbMtdParam._m0[23u].x * _314)) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    float _635 = (((0.5 - _574) * 0.10999999940395355224609375) + _574) + (((_605.x + (-1.0)) + _623.x) * cbMtdParam._m0[16u].x);
    float _636 = (((0.5 - _575) * 0.10999999940395355224609375) + _575) + (((_605.y + (-1.0)) + _623.y) * cbMtdParam._m0[16u].x);
    float _641 = ((_565.x - _635) * _545) + _635;
    float _642 = ((_565.y - _636) * _545) + _636;
    float _644 = _357 / cbMtdParam._m0[14u].z;
    float _4004 = isnan(0.0) ? _644 : (isnan(_644) ? 0.0 : max(_644, 0.0));
    float _645 = isnan(1.0) ? _4004 : (isnan(_4004) ? 1.0 : min(_4004, 1.0));
    float _662 = ((((_535 * (0.5 - _334)) + _334) + (((_641 + (-0.5)) + ((0.5 - _641) * _645)) * 0.60000002384185791015625)) * 2.0) + (-1.0);
    float _663 = ((((_535 * (0.5 - _335)) + _335) + (((_642 + (-0.5)) + ((0.5 - _642) * _645)) * 0.60000002384185791015625)) * 2.0) + (-1.0);
    float _664 = dot(vec2(_662, _663), vec2(_662, _663));
    float _4015 = isnan(0.0) ? _664 : (isnan(_664) ? 0.0 : max(_664, 0.0));
    float _669 = sqrt(1.0 - (isnan(1.0) ? _4015 : (isnan(_4015) ? 1.0 : min(_4015, 1.0))));
    float _677 = (cbMtdParam._m0[13u].z + _357) * cbMtdParam._m0[14u].x;
    float _4026 = isnan(0.0) ? _677 : (isnan(_677) ? 0.0 : max(_677, 0.0));
    float _679 = (isnan(1.0) ? _4026 : (isnan(_4026) ? 1.0 : min(_4026, 1.0))) * cbMtdParam._m0[17u].x;
    float _4037 = isnan(0.0) ? _679 : (isnan(_679) ? 0.0 : max(_679, 0.0));
    float _680 = isnan(1.0) ? _4037 : (isnan(_4037) ? 1.0 : min(_4037, 1.0));
    float _695 = fma(_669, _239, fma(_663, _231 * TANGENT.x, _662 * _218));
    float _698 = fma(_669, _240, fma(_663, _231 * TANGENT.y, _662 * _219));
    float _701 = fma(_669, _241, fma(_663, _231 * TANGENT.z, _662 * _220));
    float _705 = inversesqrt(dot(vec3(_695, _698, _701), vec3(_695, _698, _701)));
    float _706 = _705 * _695;
    float _707 = _705 * _698;
    float _708 = _705 * _701;
    float _4048 = isnan(0.0) ? _517 : (isnan(_517) ? 0.0 : max(_517, 0.0));
    float _4059 = isnan(0.0) ? _534 : (isnan(_534) ? 0.0 : max(_534, 0.0));
    float _710 = isnan(1.0) ? _4059 : (isnan(_4059) ? 1.0 : min(_4059, 1.0));
    float _4070 = isnan(0.0) ? _507 : (isnan(_507) ? 0.0 : max(_507, 0.0));
    float _4081 = isnan(0.0) ? _508 : (isnan(_508) ? 0.0 : max(_508, 0.0));
    float _4092 = isnan(0.0) ? _509 : (isnan(_509) ? 0.0 : max(_509, 0.0));
    float _718 = _387 ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _758 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _767 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _758);
    float _768 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _758);
    float _769 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _758);
    float _773 = inversesqrt(dot(vec3(_767, _768, _769), vec3(_767, _768, _769)));
    float _774 = _767 * _773;
    float _775 = _768 * _773;
    float _776 = _769 * _773;
    float _781 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _782 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _784 = texture(sampler2D(g_WaterSimulationNormalTexture, SS_ClampLinear), vec2(TEXCOORD_8.x, TEXCOORD_8.y));
    float _793 = (_784.x * 2.0) + (-1.0);
    float _794 = (_784.y * 2.0) + (-1.0);
    float _795 = (_784.z * 2.0) + (-1.0);
    float _799 = inversesqrt(dot(vec3(_793, _794, _795), vec3(_793, _794, _795)));
    float _810 = ((TEXCOORD_8.y >= 1.0) || (((TEXCOORD_8.x <= 0.0) || (TEXCOORD_8.x >= 1.0)) || (TEXCOORD_8.y <= 0.0))) ? 0.0 : _784.w;
    float _817 = (((_793 * _799) - _706) * _810) + _706;
    float _818 = (((_794 * _799) - _707) * _810) + _707;
    float _819 = (((_795 * _799) - _708) * _810) + _708;
    float _840 = fma(_819, cbSceneParam._m0[5u].z, fma(_818, cbSceneParam._m0[5u].y, _817 * cbSceneParam._m0[5u].x));
    float _843 = fma(_819, cbSceneParam._m0[6u].z, fma(_818, cbSceneParam._m0[6u].y, _817 * cbSceneParam._m0[6u].x));
    float _846 = fma(_819, cbSceneParam._m0[7u].z, fma(_818, cbSceneParam._m0[7u].y, _817 * cbSceneParam._m0[7u].x));
    uint _859 = uint(roundEven(NORMAL.w)) * 13u;
    uint _861 = (_859 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _867 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4070 : (isnan(_4070) ? 1.0 : min(_4070, 1.0)))) * cbInstanceData._m0[_861].x;
    float _868 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4081 : (isnan(_4081) ? 1.0 : min(_4081, 1.0)))) * cbInstanceData._m0[_861].y;
    float _869 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4092 : (isnan(_4092) ? 1.0 : min(_4092, 1.0)))) * cbInstanceData._m0[_861].z;
    float _4103 = isnan(0.0) ? _867 : (isnan(_867) ? 0.0 : max(_867, 0.0));
    float _870 = isnan(1.0) ? _4103 : (isnan(_4103) ? 1.0 : min(_4103, 1.0));
    float _4114 = isnan(0.0) ? _868 : (isnan(_868) ? 0.0 : max(_868, 0.0));
    float _871 = isnan(1.0) ? _4114 : (isnan(_4114) ? 1.0 : min(_4114, 1.0));
    float _4125 = isnan(0.0) ? _869 : (isnan(_869) ? 0.0 : max(_869, 0.0));
    float _872 = isnan(1.0) ? _4125 : (isnan(_4125) ? 1.0 : min(_4125, 1.0));
    vec4 _881 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _781, cbSceneParam._m0[86u].y * _782));
    float _884 = _881.x * TEXCOORD_5.w;
    float _885 = dot(vec3(_817, _818, _819), vec3(_774, _775, _776));
    float _888 = _885 * 2.0;
    float _892 = (_888 * _817) - _774;
    float _893 = (_888 * _818) - _775;
    float _894 = (_888 * _819) - _776;
    float _898 = abs(dot(vec3(_774, _775, _776), vec3(_817, _818, _819)));
    float _4136 = isnan(0.0) ? _898 : (isnan(_898) ? 0.0 : max(_898, 0.0));
    float _899 = isnan(1.0) ? _4136 : (isnan(_4136) ? 1.0 : min(_4136, 1.0));
    float _907 = 10.0 / (_718 + 10.0);
    float _908 = sqrt(_710);
    float _920 = exp2((_908 * 5.0) * log2(1.0 - (_899 * 0.999000012874603271484375))) / (4.0 - (_908 * 3.0));
    float _951 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _955 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _959 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1259;
    float _1261;
    float _1262;
    float _1263;
    float _1264;
    float _1265;
    float _1266;
    float _1267;
    float _1268;
    float _1269;
    float _1270;
    float _1271;
    float _1272;
    float _1273;
    float _1274;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _986 = fma(_959, cbModelParam._m0[26u].z, fma(_955, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _951));
        float _990 = fma(_959, cbModelParam._m0[27u].z, fma(_955, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _951));
        float _994 = fma(_959, cbModelParam._m0[28u].z, fma(_955, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _951));
        float _1017 = _951 + _817;
        float _1018 = _955 + _818;
        float _1019 = _959 + _819;
        float _1029 = fma(_1019, cbModelParam._m0[26u].z, fma(_1018, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1017)) - _986;
        float _1030 = fma(_1019, cbModelParam._m0[27u].z, fma(_1018, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1017)) - _990;
        float _1031 = fma(_1019, cbModelParam._m0[28u].z, fma(_1018, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1017)) - _994;
        float _1035 = inversesqrt(dot(vec3(_1029, _1030, _1031), vec3(_1029, _1030, _1031)));
        float _1048 = ((_1035 * _1029) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_986 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1049 = ((_1035 * _1030) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_990 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1050 = ((_1035 * _1031) / cbModelParam._m0[34u].z) + ((((((_994 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1053 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1048, _1049, _1050), 0.0);
        vec4 _1060 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1048, _1049, _1050), 0.0);
        vec4 _1067 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1048, _1049, _1050), 0.0);
        vec4 _1074 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1048, _1049, _1050), 0.0);
        float _1087 = exp2((_1053.w + (-0.5)) * 20.0) * 2.0;
        float _1088 = _1087 * (_1053.x + (-0.5));
        float _1089 = _1087 * (_1053.y + (-0.5));
        float _1090 = _1087 * (_1053.z + (-0.5));
        float _1097 = exp2((_1060.w + (-0.5)) * 20.0) * 2.0;
        float _1098 = _1097 * (_1060.x + (-0.5));
        float _1099 = _1097 * (_1060.y + (-0.5));
        float _1100 = _1097 * (_1060.z + (-0.5));
        float _1107 = exp2((_1067.w + (-0.5)) * 20.0) * 2.0;
        float _1108 = _1107 * (_1067.x + (-0.5));
        float _1109 = _1107 * (_1067.y + (-0.5));
        float _1110 = _1107 * (_1067.z + (-0.5));
        float _1117 = exp2((_1074.w + (-0.5)) * 20.0) * 2.0;
        float _1118 = _1117 * (_1074.x + (-0.5));
        float _1119 = _1117 * (_1074.y + (-0.5));
        float _1120 = _1117 * (_1074.z + (-0.5));
        float _1121 = isnan(0.0) ? _1118 : (isnan(_1118) ? 0.0 : max(_1118, 0.0));
        float _1122 = isnan(0.0) ? _1119 : (isnan(_1119) ? 0.0 : max(_1119, 0.0));
        float _1123 = isnan(0.0) ? _1120 : (isnan(_1120) ? 0.0 : max(_1120, 0.0));
        float _1124 = _1088 * 0.5;
        float _1125 = _1098 * 0.5;
        float _1126 = _1108 * 0.5;
        float _1127 = dot(vec3(_1124, _1125, _1126), vec3(_1124, _1125, _1126));
        float _1132 = (_1127 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1127);
        float _1141 = (dot(vec3(_817, _818, _819), vec3(_1132 * _1124, _1132 * _1125, _1132 * _1126)) + 1.0) * 0.5;
        float _4162 = isnan(0.0) ? _1141 : (isnan(_1141) ? 0.0 : max(_1141, 0.0));
        float _1151 = sqrt(((_1125 * _1125) + (_1124 * _1124)) + (_1126 * _1126)) / (_1121 + 9.9999997473787516355514526367188e-06);
        float _4173 = isnan(0.0) ? _1151 : (isnan(_1151) ? 0.0 : max(_1151, 0.0));
        float _1152 = isnan(1.0) ? _4173 : (isnan(_4173) ? 1.0 : min(_4173, 1.0));
        float _1153 = _1152 * 2.0;
        float _1157 = (1.0 - _1152) / (_1152 + 1.0);
        float _4184 = isnan(0.0) ? _1157 : (isnan(_1157) ? 0.0 : max(_1157, 0.0));
        float _1158 = isnan(1.0) ? _4184 : (isnan(_4184) ? 1.0 : min(_4184, 1.0));
        float _1167 = ((((1.0 - _1158) * (_1153 + 2.0)) * exp2(log2(isnan(1.0) ? _4162 : (isnan(_4162) ? 1.0 : min(_4162, 1.0))) * (_1153 + 1.0))) + _1158) * _1121;
        float _1168 = _1089 * 0.5;
        float _1169 = _1099 * 0.5;
        float _1170 = _1109 * 0.5;
        float _1171 = dot(vec3(_1168, _1169, _1170), vec3(_1168, _1169, _1170));
        float _1176 = (_1171 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1171);
        float _1184 = (dot(vec3(_817, _818, _819), vec3(_1176 * _1168, _1176 * _1169, _1176 * _1170)) + 1.0) * 0.5;
        float _4195 = isnan(0.0) ? _1184 : (isnan(_1184) ? 0.0 : max(_1184, 0.0));
        float _1193 = sqrt(((_1169 * _1169) + (_1168 * _1168)) + (_1170 * _1170)) / (_1122 + 9.9999997473787516355514526367188e-06);
        float _4206 = isnan(0.0) ? _1193 : (isnan(_1193) ? 0.0 : max(_1193, 0.0));
        float _1194 = isnan(1.0) ? _4206 : (isnan(_4206) ? 1.0 : min(_4206, 1.0));
        float _1195 = _1194 * 2.0;
        float _1199 = (1.0 - _1194) / (_1194 + 1.0);
        float _4217 = isnan(0.0) ? _1199 : (isnan(_1199) ? 0.0 : max(_1199, 0.0));
        float _1200 = isnan(1.0) ? _4217 : (isnan(_4217) ? 1.0 : min(_4217, 1.0));
        float _1209 = ((((1.0 - _1200) * (_1195 + 2.0)) * exp2(log2(isnan(1.0) ? _4195 : (isnan(_4195) ? 1.0 : min(_4195, 1.0))) * (_1195 + 1.0))) + _1200) * _1122;
        float _1210 = _1090 * 0.5;
        float _1211 = _1100 * 0.5;
        float _1212 = _1110 * 0.5;
        float _1213 = dot(vec3(_1210, _1211, _1212), vec3(_1210, _1211, _1212));
        float _1218 = (_1213 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1213);
        float _1226 = (dot(vec3(_817, _818, _819), vec3(_1218 * _1210, _1218 * _1211, _1218 * _1212)) + 1.0) * 0.5;
        float _4228 = isnan(0.0) ? _1226 : (isnan(_1226) ? 0.0 : max(_1226, 0.0));
        float _1235 = sqrt(((_1211 * _1211) + (_1210 * _1210)) + (_1212 * _1212)) / (_1123 + 9.9999997473787516355514526367188e-06);
        float _4239 = isnan(0.0) ? _1235 : (isnan(_1235) ? 0.0 : max(_1235, 0.0));
        float _1236 = isnan(1.0) ? _4239 : (isnan(_4239) ? 1.0 : min(_4239, 1.0));
        float _1237 = _1236 * 2.0;
        float _1241 = (1.0 - _1236) / (_1236 + 1.0);
        float _4250 = isnan(0.0) ? _1241 : (isnan(_1241) ? 0.0 : max(_1241, 0.0));
        float _1242 = isnan(1.0) ? _4250 : (isnan(_4250) ? 1.0 : min(_4250, 1.0));
        float _1251 = ((((1.0 - _1242) * (_1237 + 2.0)) * exp2(log2(isnan(1.0) ? _4228 : (isnan(_4228) ? 1.0 : min(_4228, 1.0))) * (_1237 + 1.0))) + _1242) * _1123;
        _1259 = _1090;
        _1261 = _1089;
        _1262 = _1088;
        _1263 = _1100;
        _1264 = _1099;
        _1265 = _1098;
        _1266 = _1110;
        _1267 = _1109;
        _1268 = _1108;
        _1269 = _1123;
        _1270 = _1122;
        _1271 = _1121;
        _1272 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1167 : (isnan(_1167) ? 0.0 : max(_1167, 0.0)));
        _1273 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1209 : (isnan(_1209) ? 0.0 : max(_1209, 0.0)));
        _1274 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1251 : (isnan(_1251) ? 0.0 : max(_1251, 0.0)));
    }
    else
    {
        _1259 = _1260;
        _1261 = _1260;
        _1262 = _1260;
        _1263 = _1260;
        _1264 = _1260;
        _1265 = _1260;
        _1266 = _1260;
        _1267 = _1260;
        _1268 = _1260;
        _1269 = _1260;
        _1270 = _1260;
        _1271 = _1260;
        _1272 = 0.0;
        _1273 = 0.0;
        _1274 = 0.0;
    }
    float _1569;
    float _1570;
    float _1571;
    float _1572;
    float _1573;
    float _1574;
    float _1575;
    float _1576;
    float _1577;
    float _1578;
    float _1579;
    float _1580;
    float _1581;
    float _1582;
    float _1583;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1300 = fma(_959, cbModelParam._m0[30u].z, fma(_955, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _951));
        float _1304 = fma(_959, cbModelParam._m0[31u].z, fma(_955, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _951));
        float _1308 = fma(_959, cbModelParam._m0[32u].z, fma(_955, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _951));
        float _1331 = _951 + _817;
        float _1332 = _955 + _818;
        float _1333 = _959 + _819;
        float _1343 = fma(_1333, cbModelParam._m0[30u].z, fma(_1332, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1331)) - _1300;
        float _1344 = fma(_1333, cbModelParam._m0[31u].z, fma(_1332, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1331)) - _1304;
        float _1345 = fma(_1333, cbModelParam._m0[32u].z, fma(_1332, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1331)) - _1308;
        float _1349 = inversesqrt(dot(vec3(_1343, _1344, _1345), vec3(_1343, _1344, _1345)));
        float _1362 = ((_1349 * _1343) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1300 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1363 = ((_1349 * _1344) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1304 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1364 = ((_1349 * _1345) / cbModelParam._m0[35u].z) + ((((((_1308 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1366 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1362, _1363, _1364), 0.0);
        vec4 _1373 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1362, _1363, _1364), 0.0);
        vec4 _1380 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1362, _1363, _1364), 0.0);
        vec4 _1387 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1362, _1363, _1364), 0.0);
        float _1399 = exp2((_1366.w + (-0.5)) * 20.0) * 2.0;
        float _1400 = _1399 * (_1366.x + (-0.5));
        float _1401 = _1399 * (_1366.y + (-0.5));
        float _1402 = _1399 * (_1366.z + (-0.5));
        float _1409 = exp2((_1373.w + (-0.5)) * 20.0) * 2.0;
        float _1410 = _1409 * (_1373.x + (-0.5));
        float _1411 = _1409 * (_1373.y + (-0.5));
        float _1412 = _1409 * (_1373.z + (-0.5));
        float _1419 = exp2((_1380.w + (-0.5)) * 20.0) * 2.0;
        float _1420 = _1419 * (_1380.x + (-0.5));
        float _1421 = _1419 * (_1380.y + (-0.5));
        float _1422 = _1419 * (_1380.z + (-0.5));
        float _1429 = exp2((_1387.w + (-0.5)) * 20.0) * 2.0;
        float _1430 = _1429 * (_1387.x + (-0.5));
        float _1431 = _1429 * (_1387.y + (-0.5));
        float _1432 = _1429 * (_1387.z + (-0.5));
        float _1433 = isnan(0.0) ? _1430 : (isnan(_1430) ? 0.0 : max(_1430, 0.0));
        float _1434 = isnan(0.0) ? _1431 : (isnan(_1431) ? 0.0 : max(_1431, 0.0));
        float _1435 = isnan(0.0) ? _1432 : (isnan(_1432) ? 0.0 : max(_1432, 0.0));
        float _1436 = _1400 * 0.5;
        float _1437 = _1410 * 0.5;
        float _1438 = _1420 * 0.5;
        float _1439 = dot(vec3(_1436, _1437, _1438), vec3(_1436, _1437, _1438));
        float _1444 = (_1439 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1439);
        float _1452 = (dot(vec3(_817, _818, _819), vec3(_1444 * _1436, _1444 * _1437, _1444 * _1438)) + 1.0) * 0.5;
        float _4291 = isnan(0.0) ? _1452 : (isnan(_1452) ? 0.0 : max(_1452, 0.0));
        float _1461 = sqrt(((_1437 * _1437) + (_1436 * _1436)) + (_1438 * _1438)) / (_1433 + 9.9999997473787516355514526367188e-06);
        float _4302 = isnan(0.0) ? _1461 : (isnan(_1461) ? 0.0 : max(_1461, 0.0));
        float _1462 = isnan(1.0) ? _4302 : (isnan(_4302) ? 1.0 : min(_4302, 1.0));
        float _1463 = _1462 * 2.0;
        float _1467 = (1.0 - _1462) / (_1462 + 1.0);
        float _4313 = isnan(0.0) ? _1467 : (isnan(_1467) ? 0.0 : max(_1467, 0.0));
        float _1468 = isnan(1.0) ? _4313 : (isnan(_4313) ? 1.0 : min(_4313, 1.0));
        float _1477 = ((((1.0 - _1468) * (_1463 + 2.0)) * exp2(log2(isnan(1.0) ? _4291 : (isnan(_4291) ? 1.0 : min(_4291, 1.0))) * (_1463 + 1.0))) + _1468) * _1433;
        float _1478 = _1401 * 0.5;
        float _1479 = _1411 * 0.5;
        float _1480 = _1421 * 0.5;
        float _1481 = dot(vec3(_1478, _1479, _1480), vec3(_1478, _1479, _1480));
        float _1486 = (_1481 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1481);
        float _1494 = (dot(vec3(_817, _818, _819), vec3(_1486 * _1478, _1486 * _1479, _1486 * _1480)) + 1.0) * 0.5;
        float _4324 = isnan(0.0) ? _1494 : (isnan(_1494) ? 0.0 : max(_1494, 0.0));
        float _1503 = sqrt(((_1479 * _1479) + (_1478 * _1478)) + (_1480 * _1480)) / (_1434 + 9.9999997473787516355514526367188e-06);
        float _4335 = isnan(0.0) ? _1503 : (isnan(_1503) ? 0.0 : max(_1503, 0.0));
        float _1504 = isnan(1.0) ? _4335 : (isnan(_4335) ? 1.0 : min(_4335, 1.0));
        float _1505 = _1504 * 2.0;
        float _1509 = (1.0 - _1504) / (_1504 + 1.0);
        float _4346 = isnan(0.0) ? _1509 : (isnan(_1509) ? 0.0 : max(_1509, 0.0));
        float _1510 = isnan(1.0) ? _4346 : (isnan(_4346) ? 1.0 : min(_4346, 1.0));
        float _1519 = ((((1.0 - _1510) * (_1505 + 2.0)) * exp2(log2(isnan(1.0) ? _4324 : (isnan(_4324) ? 1.0 : min(_4324, 1.0))) * (_1505 + 1.0))) + _1510) * _1434;
        float _1520 = _1402 * 0.5;
        float _1521 = _1412 * 0.5;
        float _1522 = _1422 * 0.5;
        float _1523 = dot(vec3(_1520, _1521, _1522), vec3(_1520, _1521, _1522));
        float _1528 = (_1523 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1523);
        float _1536 = (dot(vec3(_817, _818, _819), vec3(_1528 * _1520, _1528 * _1521, _1528 * _1522)) + 1.0) * 0.5;
        float _4357 = isnan(0.0) ? _1536 : (isnan(_1536) ? 0.0 : max(_1536, 0.0));
        float _1545 = sqrt(((_1521 * _1521) + (_1520 * _1520)) + (_1522 * _1522)) / (_1435 + 9.9999997473787516355514526367188e-06);
        float _4368 = isnan(0.0) ? _1545 : (isnan(_1545) ? 0.0 : max(_1545, 0.0));
        float _1546 = isnan(1.0) ? _4368 : (isnan(_4368) ? 1.0 : min(_4368, 1.0));
        float _1547 = _1546 * 2.0;
        float _1551 = (1.0 - _1546) / (_1546 + 1.0);
        float _4379 = isnan(0.0) ? _1551 : (isnan(_1551) ? 0.0 : max(_1551, 0.0));
        float _1552 = isnan(1.0) ? _4379 : (isnan(_4379) ? 1.0 : min(_4379, 1.0));
        float _1561 = ((((1.0 - _1552) * (_1547 + 2.0)) * exp2(log2(isnan(1.0) ? _4357 : (isnan(_4357) ? 1.0 : min(_4357, 1.0))) * (_1547 + 1.0))) + _1552) * _1435;
        _1569 = _1402;
        _1570 = _1401;
        _1571 = _1400;
        _1572 = _1412;
        _1573 = _1411;
        _1574 = _1410;
        _1575 = _1422;
        _1576 = _1421;
        _1577 = _1420;
        _1578 = _1435;
        _1579 = _1434;
        _1580 = _1433;
        _1581 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1477 : (isnan(_1477) ? 0.0 : max(_1477, 0.0)));
        _1582 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1519 : (isnan(_1519) ? 0.0 : max(_1519, 0.0)));
        _1583 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1561 : (isnan(_1561) ? 0.0 : max(_1561, 0.0)));
    }
    else
    {
        _1569 = _1260;
        _1570 = _1260;
        _1571 = _1260;
        _1572 = _1260;
        _1573 = _1260;
        _1574 = _1260;
        _1575 = _1260;
        _1576 = _1260;
        _1577 = _1260;
        _1578 = _1260;
        _1579 = _1260;
        _1580 = _1260;
        _1581 = 0.0;
        _1582 = 0.0;
        _1583 = 0.0;
    }
    float _1593 = (cbModelParam._m0[1u].x * (_1581 - _1272)) + _1272;
    float _1594 = (cbModelParam._m0[1u].x * (_1582 - _1273)) + _1273;
    float _1595 = (cbModelParam._m0[1u].x * (_1583 - _1274)) + _1274;
    float _1616 = fma(_1595, cbSceneParam._m0[89u].z, fma(_1594, cbSceneParam._m0[89u].y, _1593 * cbSceneParam._m0[89u].x));
    float _1619 = fma(_1595, cbSceneParam._m0[90u].z, fma(_1594, cbSceneParam._m0[90u].y, _1593 * cbSceneParam._m0[90u].x));
    float _1622 = fma(_1595, cbSceneParam._m0[91u].z, fma(_1594, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1593));
    float _1637 = _892 * 0.5;
    float _1638 = _893 * 0.5;
    float _1639 = _894 * 0.5;
    float _1640 = dot(vec4(_1637, _1638, _1639, 1.0), vec4(_1571, _1574, _1577, _1580));
    float _1643 = dot(vec4(_1637, _1638, _1639, 1.0), vec4(_1570, _1573, _1576, _1579));
    float _1646 = dot(vec4(_1637, _1638, _1639, 1.0), vec4(_1569, _1572, _1575, _1578));
    float _1680;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1653 = dot(vec4(_1637, _1638, _1639, 1.0), vec4(_1259, _1263, _1266, _1269));
        float _1657 = dot(vec4(_1637, _1638, _1639, 1.0), vec4(_1261, _1264, _1267, _1270));
        float _1661 = dot(vec4(_1637, _1638, _1639, 1.0), vec4(_1262, _1265, _1268, _1271));
        float _1668 = dot(vec4(cbModelParam._m0[39u]), vec4(_1637, _1638, _1639, 1.0));
        _1680 = dot(vec3(isnan(0.0) ? _1661 : (isnan(_1661) ? 0.0 : max(_1661, 0.0)), isnan(0.0) ? _1657 : (isnan(_1657) ? 0.0 : max(_1657, 0.0)), isnan(0.0) ? _1653 : (isnan(_1653) ? 0.0 : max(_1653, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1668) ? 0.0 : (isnan(0.0) ? _1668 : max(0.0, _1668))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1680 = 1.0;
    }
    float _1691;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1682 = dot(vec4(cbModelParam._m0[40u]), vec4(_1637, _1638, _1639, 1.0));
        _1691 = dot(vec3(isnan(0.0) ? _1640 : (isnan(_1640) ? 0.0 : max(_1640, 0.0)), isnan(0.0) ? _1643 : (isnan(_1643) ? 0.0 : max(_1643, 0.0)), isnan(0.0) ? _1646 : (isnan(_1646) ? 0.0 : max(_1646, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1682) ? 0.0 : (isnan(0.0) ? _1682 : max(0.0, _1682))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1691 = 1.0;
    }
    float _1695 = (_1691 * cbModelParam._m0[1u].x) + (_1680 * (1.0 - cbModelParam._m0[1u].x));
    float _1705 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _710);
    float _1706 = isnan(_1705) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1705 : min(cbModelParam._m0[25u].z, _1705));
    float _1786;
    float _1788;
    float _1790;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1753 = fma(_959, cbModelParam._m0[13u].z, fma(_955, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _951)) + cbModelParam._m0[13u].w;
        float _1757 = fma(_959, cbModelParam._m0[14u].z, fma(_955, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _951)) + cbModelParam._m0[14u].w;
        float _1761 = fma(_959, cbModelParam._m0[15u].z, fma(_955, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _951)) + cbModelParam._m0[15u].w;
        float _1764 = fma(_894, cbModelParam._m0[13u].z, fma(_893, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _892));
        float _1767 = fma(_894, cbModelParam._m0[14u].z, fma(_893, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _892));
        float _1770 = fma(_894, cbModelParam._m0[15u].z, fma(_893, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _892));
        float _1798;
        if (_1764 > 0.0)
        {
            _1798 = abs((1.0 - _1753) / _1764);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1764 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1753 + 1.0) / _1764);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1798 = frontier_phi_16_14_ladder;
        }
        float _2019;
        if (_1767 > 0.0)
        {
            _2019 = abs((1.0 - _1757) / _1767);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1767 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1757 + 1.0) / _1767);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2019 = frontier_phi_25_21_ladder;
        }
        float _2464;
        if (_1770 > 0.0)
        {
            _2464 = abs((1.0 - _1761) / _1770);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1770 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1761 + 1.0) / _1770);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2464 = frontier_phi_37_32_ladder;
        }
        float _2466 = isnan(_2019) ? _1798 : (isnan(_1798) ? _2019 : min(_1798, _2019));
        float _2467 = isnan(_2464) ? _2466 : (isnan(_2466) ? _2464 : min(_2466, _2464));
        float _2471 = (_2467 * _1764) + _1753;
        float _2472 = (_2467 * _1767) + _1757;
        float _2473 = (_2467 * _1770) + _1761;
        float _2474 = _2467 * 9.9999997473787516355514526367188e-05;
        float _2476 = (-1.0) - _2474;
        float _2478 = _2474 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_2473 > _2478) || ((_2473 < _2476) || ((_2472 > _2478) || ((_2472 < _2476) || ((_2471 < _2476) || (_2471 > _2478))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2756 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2473, cbModelParam._m0[9u].z, fma(_2472, cbModelParam._m0[9u].y, _2471 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2473, cbModelParam._m0[10u].z, fma(_2472, cbModelParam._m0[10u].y, _2471 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2473, cbModelParam._m0[11u].z, fma(_2472, cbModelParam._m0[11u].y, _2471 * cbModelParam._m0[11u].x))), _1706);
            frontier_phi_15_37_ladder = _2756.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2756.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2756.x * cbModelParam._m0[1u].y;
        }
        _1786 = frontier_phi_15_37_ladder_2;
        _1788 = frontier_phi_15_37_ladder_1;
        _1790 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1774 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_892, _893, _894), _1706);
        _1786 = _1774.x * cbModelParam._m0[1u].y;
        _1788 = _1774.y * cbModelParam._m0[1u].y;
        _1790 = _1774.z * cbModelParam._m0[1u].y;
    }
    float _1794 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _710);
    float _1795 = isnan(_1794) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1794 : min(cbModelParam._m0[25u].w, _1794));
    float _1884;
    float _1886;
    float _1888;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1848 = fma(_959, cbModelParam._m0[21u].z, fma(_955, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _951)) + cbModelParam._m0[21u].w;
        float _1852 = fma(_959, cbModelParam._m0[22u].z, fma(_955, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _951)) + cbModelParam._m0[22u].w;
        float _1856 = fma(_959, cbModelParam._m0[23u].z, fma(_955, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _951)) + cbModelParam._m0[23u].w;
        float _1859 = fma(_894, cbModelParam._m0[21u].z, fma(_893, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _892));
        float _1862 = fma(_894, cbModelParam._m0[22u].z, fma(_893, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _892));
        float _1865 = fma(_894, cbModelParam._m0[23u].z, fma(_893, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _892));
        float _2024;
        if (_1859 > 0.0)
        {
            _2024 = abs((1.0 - _1848) / _1859);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1859 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1848 + 1.0) / _1859);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _2024 = frontier_phi_27_23_ladder;
        }
        float _2491;
        if (_1862 > 0.0)
        {
            _2491 = abs((1.0 - _1852) / _1862);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1862 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1852 + 1.0) / _1862);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _2491 = frontier_phi_39_34_ladder;
        }
        float _2941;
        if (_1865 > 0.0)
        {
            _2941 = abs((1.0 - _1856) / _1865);
        }
        else
        {
            float frontier_phi_51_46_ladder;
            if (_1865 < 0.0)
            {
                frontier_phi_51_46_ladder = abs((_1856 + 1.0) / _1865);
            }
            else
            {
                frontier_phi_51_46_ladder = 5000.0;
            }
            _2941 = frontier_phi_51_46_ladder;
        }
        float _2943 = isnan(_2491) ? _2024 : (isnan(_2024) ? _2491 : min(_2024, _2491));
        float _2944 = isnan(_2941) ? _2943 : (isnan(_2943) ? _2941 : min(_2943, _2941));
        float _2948 = (_2944 * _1859) + _1848;
        float _2949 = (_2944 * _1862) + _1852;
        float _2950 = (_2944 * _1865) + _1856;
        float _2951 = _2944 * 9.9999997473787516355514526367188e-05;
        float _2952 = (-1.0) - _2951;
        float _2954 = _2951 + 1.0;
        float frontier_phi_24_51_ladder;
        float frontier_phi_24_51_ladder_1;
        float frontier_phi_24_51_ladder_2;
        if ((_2950 > _2954) || ((_2950 < _2952) || ((_2949 > _2954) || ((_2949 < _2952) || ((_2948 < _2952) || (_2948 > _2954))))))
        {
            frontier_phi_24_51_ladder = 0.0;
            frontier_phi_24_51_ladder_1 = 0.0;
            frontier_phi_24_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3153 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2950, cbModelParam._m0[17u].z, fma(_2949, cbModelParam._m0[17u].y, _2948 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2950, cbModelParam._m0[18u].z, fma(_2949, cbModelParam._m0[18u].y, _2948 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2950, cbModelParam._m0[19u].z, fma(_2949, cbModelParam._m0[19u].y, _2948 * cbModelParam._m0[19u].x))), _1795);
            frontier_phi_24_51_ladder = _3153.z * cbModelParam._m0[1u].z;
            frontier_phi_24_51_ladder_1 = _3153.y * cbModelParam._m0[1u].z;
            frontier_phi_24_51_ladder_2 = _3153.x * cbModelParam._m0[1u].z;
        }
        _1884 = frontier_phi_24_51_ladder_2;
        _1886 = frontier_phi_24_51_ladder_1;
        _1888 = frontier_phi_24_51_ladder;
    }
    else
    {
        vec4 _1868 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_892, _893, _894), _1795);
        _1884 = _1868.x * cbModelParam._m0[1u].z;
        _1886 = _1868.y * cbModelParam._m0[1u].z;
        _1888 = _1868.z * cbModelParam._m0[1u].z;
    }
    float _1900 = ((((1.0 - _920) * ((_908 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_920 * _908)) * _884;
    float _1901 = _1900 * ((cbModelParam._m0[1u].w * (_1884 - _1786)) + _1786);
    float _1902 = _1900 * ((cbModelParam._m0[1u].w * (_1886 - _1788)) + _1788);
    float _1903 = _1900 * ((cbModelParam._m0[1u].w * (_1888 - _1790)) + _1790);
    float _1906 = fma(_1903, cbSceneParam._m0[89u].z, fma(_1902, cbSceneParam._m0[89u].y, _1901 * cbSceneParam._m0[89u].x));
    float _1909 = fma(_1903, cbSceneParam._m0[90u].z, fma(_1902, cbSceneParam._m0[90u].y, _1901 * cbSceneParam._m0[90u].x));
    float _1912 = fma(_1903, cbSceneParam._m0[91u].z, fma(_1902, cbSceneParam._m0[91u].y, _1901 * cbSceneParam._m0[91u].x));
    float _1923 = _781 / cbSceneParam._m0[86u].x;
    float _1931 = (cbSceneParam._m0[88u].y * (1.0 - _710)) + cbSceneParam._m0[88u].z;
    float _4505 = isnan(0.0) ? _1931 : (isnan(_1931) ? 0.0 : max(_1931, 0.0));
    float _1933 = (isnan(1.0) ? _4505 : (isnan(_4505) ? 1.0 : min(_4505, 1.0))) * 5.0;
    float _1938 = (_907 * cbMtdParam._m0[11u].w) * dot(vec3(_817, _818, _819), vec3(1.0, 0.0, 0.0));
    vec4 _1948 = textureLod(sampler2D(g_RLRTexture, SS_ClampLinear), vec2(((_1938 * textureLod(sampler2D(g_RLRTexture, SS_ClampLinear), vec2((_1938 + _1923) * cbSceneParam._m0[86u].x, _782), _1933).w) + _1923) * cbSceneParam._m0[86u].x, _782), _1933);
    float _1964 = 1.0 - _1948.w;
    float _1998 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2002 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2006 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2010 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2011 = _1998 / _2010;
    float _2012 = _2002 / _2010;
    float _2013 = _2006 / _2010;
    float _2160;
    float _2161;
    float _2162;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2040 = ((uint(_2013 > cbSceneParam._m0[59u].y) + uint(_2013 > cbSceneParam._m0[59u].x)) + uint(_2013 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2041 = _2040 + 43u;
        uint _2049 = _2040 + 44u;
        uint _2057 = _2040 + 45u;
        uint _2065 = _2040 + 46u;
        float _2076 = fma(_2010, cbSceneParam._m0[_2041].w, fma(_2006, cbSceneParam._m0[_2041].z, fma(_2002, cbSceneParam._m0[_2041].y, _1998 * cbSceneParam._m0[_2041].x)));
        float _2080 = fma(_2010, cbSceneParam._m0[_2049].w, fma(_2006, cbSceneParam._m0[_2049].z, fma(_2002, cbSceneParam._m0[_2049].y, _1998 * cbSceneParam._m0[_2049].x)));
        float _2088 = fma(_2010, cbSceneParam._m0[_2065].w, fma(_2006, cbSceneParam._m0[_2065].z, fma(_2002, cbSceneParam._m0[_2065].y, _1998 * cbSceneParam._m0[_2065].x)));
        float _2093 = cbSceneParam._m0[33u].z * _2088;
        float _2095 = cbSceneParam._m0[33u].w * _2088;
        float _2098 = fma(_2010, cbSceneParam._m0[_2057].w, fma(_2006, cbSceneParam._m0[_2057].z, fma(_2002, cbSceneParam._m0[_2057].y, _1998 * cbSceneParam._m0[_2057].x))) / _2088;
        float _2146 = (cbSceneParam._m0[33u].x - sqrt(((_2012 * _2012) + (_2011 * _2011)) + (_2013 * _2013))) * cbSceneParam._m0[33u].y;
        float _4516 = isnan(0.0) ? _2146 : (isnan(_2146) ? 0.0 : max(_2146, 0.0));
        float _2153 = (isnan(1.0) ? _4516 : (isnan(_4516) ? 1.0 : min(_4516, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2093 + _2076) / _2088, (_2095 + _2080) / _2088), _2098), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2095 + _2076) / _2088, (_2080 - _2093) / _2088), _2098), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2076 - _2093) / _2088, (_2080 - _2095) / _2088), _2098), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2076 - _2095) / _2088, (_2093 + _2080) / _2088), _2098), 0.0)).x), vec4(0.25)));
        _2160 = 1.0 - (_2153 * cbSceneParam._m0[34u].x);
        _2161 = 1.0 - (_2153 * cbSceneParam._m0[34u].y);
        _2162 = 1.0 - (_2153 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2160 = 1.0;
        _2161 = 1.0;
        _2162 = 1.0;
    }
    float _2226;
    float _2228;
    float _2230;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2214 = fma(_2010, cbSceneParam._m0[63u].w, fma(_2006, cbSceneParam._m0[63u].z, fma(_2002, cbSceneParam._m0[63u].y, _1998 * cbSceneParam._m0[63u].x)));
        float _2215 = fma(_2010, cbSceneParam._m0[60u].w, fma(_2006, cbSceneParam._m0[60u].z, fma(_2002, cbSceneParam._m0[60u].y, _1998 * cbSceneParam._m0[60u].x))) / _2214;
        float _2216 = fma(_2010, cbSceneParam._m0[61u].w, fma(_2006, cbSceneParam._m0[61u].z, fma(_2002, cbSceneParam._m0[61u].y, _1998 * cbSceneParam._m0[61u].x))) / _2214;
        float frontier_phi_36_35_ladder;
        float frontier_phi_36_35_ladder_1;
        float frontier_phi_36_35_ladder_2;
        if ((((_2215 >= cbSceneParam._m0[64u].x) && (_2216 >= cbSceneParam._m0[64u].y)) && (_2215 <= cbSceneParam._m0[64u].z)) && (_2216 <= cbSceneParam._m0[64u].w))
        {
            float _2504 = fma(_2010, cbSceneParam._m0[62u].w, fma(_2006, cbSceneParam._m0[62u].z, fma(_2002, cbSceneParam._m0[62u].y, _1998 * cbSceneParam._m0[62u].x))) / _2214;
            float _2508 = isnan(cbSceneParam._m0[41u].w) ? _2504 : (isnan(_2504) ? cbSceneParam._m0[41u].w : max(_2504, cbSceneParam._m0[41u].w));
            float _2551 = (cbSceneParam._m0[33u].x - sqrt(((_2012 * _2012) + (_2011 * _2011)) + (_2013 * _2013))) * cbSceneParam._m0[33u].y;
            float _4532 = isnan(0.0) ? _2551 : (isnan(_2551) ? 0.0 : max(_2551, 0.0));
            float _2558 = (isnan(1.0) ? _4532 : (isnan(_4532) ? 1.0 : min(_4532, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2215, cbSceneParam._m0[33u].w + _2216), _2508), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2215, _2216 - cbSceneParam._m0[33u].z), _2508), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2215 - cbSceneParam._m0[33u].z, _2216 - cbSceneParam._m0[33u].w), _2508), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2215 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2216), _2508), 0.0)).x), vec4(0.25)));
            float _2562 = 1.0 - (_2558 * cbSceneParam._m0[34u].x);
            float _2563 = 1.0 - (_2558 * cbSceneParam._m0[34u].y);
            float _2564 = 1.0 - (_2558 * cbSceneParam._m0[34u].z);
            frontier_phi_36_35_ladder = isnan(_2564) ? _2162 : (isnan(_2162) ? _2564 : min(_2162, _2564));
            frontier_phi_36_35_ladder_1 = isnan(_2563) ? _2161 : (isnan(_2161) ? _2563 : min(_2161, _2563));
            frontier_phi_36_35_ladder_2 = isnan(_2562) ? _2160 : (isnan(_2160) ? _2562 : min(_2160, _2562));
        }
        else
        {
            frontier_phi_36_35_ladder = _2162;
            frontier_phi_36_35_ladder_1 = _2161;
            frontier_phi_36_35_ladder_2 = _2160;
        }
        _2226 = frontier_phi_36_35_ladder_2;
        _2228 = frontier_phi_36_35_ladder_1;
        _2230 = frontier_phi_36_35_ladder;
    }
    else
    {
        _2226 = _2160;
        _2228 = _2161;
        _2230 = _2162;
    }
    uint _2232 = _859 + 5u;
    uvec4 _2235 = floatBitsToUint(cbInstanceData._m0[_2232]);
    uint _2237 = _2235.x * 14u;
    uint _2238 = _2237 + 13u;
    float _2243 = _884 + (-1.0);
    float _2246 = (cbLight._m0[_2238].x * _2243) + 1.0;
    float _2247 = (cbLight._m0[_2238].y * _2243) + 1.0;
    uint _2248 = _2237 + 5u;
    float _2254 = isnan(1.0) ? _2247 : (isnan(_2247) ? 1.0 : min(_2247, 1.0));
    uint _2258 = _2237 + 4u;
    float _2268 = isnan(1.0) ? _2246 : (isnan(_2246) ? 1.0 : min(_2246, 1.0));
    uint _2272 = _2237 | 1u;
    float _2283 = dot(vec3(cbLight._m0[_2237].xyz), vec3(_817, _818, _819));
    float _2286 = dot(vec3(cbLight._m0[_2272].xyz), vec3(_817, _818, _819));
    float _4568 = isnan(0.0) ? _2283 : (isnan(_2283) ? 0.0 : max(_2283, 0.0));
    float _4579 = isnan(0.0) ? _2286 : (isnan(_2286) ? 0.0 : max(_2286, 0.0));
    float _2291 = (isnan(1.0) ? _4568 : (isnan(_4568) ? 1.0 : min(_4568, 1.0))) * 0.3183098733425140380859375;
    float _2293 = (isnan(1.0) ? _4579 : (isnan(_4579) ? 1.0 : min(_4579, 1.0))) * 0.3183098733425140380859375;
    float _2300 = ((cbLight._m0[_2248].x * _2254) * _2293) + (((cbLight._m0[_2258].x * _2226) * _2268) * _2291);
    float _2301 = ((_2254 * cbLight._m0[_2248].y) * _2293) + (((cbLight._m0[_2258].y * _2228) * _2268) * _2291);
    float _2302 = ((_2254 * cbLight._m0[_2248].z) * _2293) + (((cbLight._m0[_2258].z * _2230) * _2268) * _2291);
    uint _2304 = _2237 + 8u;
    float _2317 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2237].w)) * _710) * 0.949999988079071044921875);
    float _2318 = _2317 * _2317;
    float _2319 = cbLight._m0[_2237].x + _774;
    float _2320 = cbLight._m0[_2237].y + _775;
    float _2321 = cbLight._m0[_2237].z + _776;
    float _2325 = inversesqrt(dot(vec3(_2319, _2320, _2321), vec3(_2319, _2320, _2321)));
    float _2326 = _2325 * _2319;
    float _2327 = _2325 * _2320;
    float _2328 = _2325 * _2321;
    float _2329 = dot(vec3(_817, _818, _819), vec3(cbLight._m0[_2237].xyz));
    float _4590 = isnan(0.0) ? _2329 : (isnan(_2329) ? 0.0 : max(_2329, 0.0));
    float _2332 = isnan(1.0) ? _4590 : (isnan(_4590) ? 1.0 : min(_4590, 1.0));
    float _4601 = isnan(0.0) ? _885 : (isnan(_885) ? 0.0 : max(_885, 0.0));
    float _2333 = isnan(1.0) ? _4601 : (isnan(_4601) ? 1.0 : min(_4601, 1.0));
    float _2334 = dot(vec3(_817, _818, _819), vec3(_2326, _2327, _2328));
    float _4612 = isnan(0.0) ? _2334 : (isnan(_2334) ? 0.0 : max(_2334, 0.0));
    float _2337 = isnan(1.0) ? _4612 : (isnan(_4612) ? 1.0 : min(_4612, 1.0));
    float _2338 = dot(vec3(cbLight._m0[_2237].xyz), vec3(_2326, _2327, _2328));
    float _4623 = isnan(0.0) ? _2338 : (isnan(_2338) ? 0.0 : max(_2338, 0.0));
    float _2342 = _2318 * _2318;
    float _2346 = ((_2337 * _2337) * (_2342 + (-1.0))) + 1.0;
    float _2357 = (exp2(log2(1.0 - (isnan(1.0) ? _4623 : (isnan(_4623) ? 1.0 : min(_4623, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2358 = 1.0 - _2318;
    float _2369 = (0.5 / (((_2333 * ((_2332 * _2358) + _2318)) + 9.9999999392252902907785028219223e-09) + (((_2333 * _2358) + _2318) * _2332))) * _2332;
    float _4634 = isnan(0.0) ? _2369 : (isnan(_2369) ? 0.0 : max(_2369, 0.0));
    float _2371 = (isnan(1.0) ? _4634 : (isnan(_4634) ? 1.0 : min(_4634, 1.0))) * (_2342 / ((_2346 * _2346) * 3.141590118408203125));
    uint _2385 = _2237 + 9u;
    float _2396 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2272].w)) * _710) * 0.949999988079071044921875);
    float _2397 = _2396 * _2396;
    float _2398 = cbLight._m0[_2272].x + _774;
    float _2399 = cbLight._m0[_2272].y + _775;
    float _2400 = cbLight._m0[_2272].z + _776;
    float _2404 = inversesqrt(dot(vec3(_2398, _2399, _2400), vec3(_2398, _2399, _2400)));
    float _2405 = _2404 * _2398;
    float _2406 = _2404 * _2399;
    float _2407 = _2404 * _2400;
    float _2408 = dot(vec3(_817, _818, _819), vec3(cbLight._m0[_2272].xyz));
    float _4645 = isnan(0.0) ? _2408 : (isnan(_2408) ? 0.0 : max(_2408, 0.0));
    float _2411 = isnan(1.0) ? _4645 : (isnan(_4645) ? 1.0 : min(_4645, 1.0));
    float _2412 = dot(vec3(_817, _818, _819), vec3(_2405, _2406, _2407));
    float _4656 = isnan(0.0) ? _2412 : (isnan(_2412) ? 0.0 : max(_2412, 0.0));
    float _2415 = isnan(1.0) ? _4656 : (isnan(_4656) ? 1.0 : min(_4656, 1.0));
    float _2416 = dot(vec3(cbLight._m0[_2272].xyz), vec3(_2405, _2406, _2407));
    float _4667 = isnan(0.0) ? _2416 : (isnan(_2416) ? 0.0 : max(_2416, 0.0));
    float _2420 = _2397 * _2397;
    float _2424 = ((_2415 * _2415) * (_2420 + (-1.0))) + 1.0;
    float _2433 = (exp2(log2(1.0 - (isnan(1.0) ? _4667 : (isnan(_4667) ? 1.0 : min(_4667, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2434 = 1.0 - _2397;
    float _2444 = (0.5 / (((_2333 * ((_2411 * _2434) + _2397)) + 9.9999999392252902907785028219223e-09) + (((_2333 * _2434) + _2397) * _2411))) * _2411;
    float _4678 = isnan(0.0) ? _2444 : (isnan(_2444) ? 0.0 : max(_2444, 0.0));
    float _2446 = (isnan(1.0) ? _4678 : (isnan(_4678) ? 1.0 : min(_4678, 1.0))) * (_2420 / ((_2424 * _2424) * 3.141590118408203125));
    float _2456 = (((_2433 * cbLight._m0[_2385].x) * _2446) * _2254) + ((((cbLight._m0[_2304].x * _2226) * _2357) * _2371) * _2268);
    float _2457 = (((_2433 * cbLight._m0[_2385].y) * _2446) * _2254) + ((((cbLight._m0[_2304].y * _2228) * _2357) * _2371) * _2268);
    float _2458 = (((_2433 * cbLight._m0[_2385].z) * _2446) * _2254) + ((((cbLight._m0[_2304].z * _2230) * _2357) * _2371) * _2268);
    float _2620;
    float _2622;
    float _2624;
    float _2626;
    float _2628;
    float _2630;
    if (_2235.y == 0u)
    {
        uvec4 _2576 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2577 = _2576.x;
        uint _2588 = uint((float(_2576.y) * floor(float(uint(cbSceneParam._m0[85u].y * _782) / _2577))) + floor(float(uint(cbSceneParam._m0[85u].x * _781) / _2577)));
        float _2598 = (log2(_2013 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2599 = isnan(0.0) ? _2598 : (isnan(_2598) ? 0.0 : max(_2598, 0.0));
        uint _2602 = uint(isnan(14.0) ? _2599 : (isnan(_2599) ? 14.0 : min(_2599, 14.0)));
        uvec4 _2607 = texelFetch(g_lightClusterGridBuffer, int(((_2602 << 2u) + (_2588 << 6u)) >> 2u));
        uint _2608 = _2607.x;
        uint _2609 = _2576.z;
        float _2765;
        float _2767;
        float _2769;
        float _2771;
        float _2773;
        float _2775;
        if (((((1u << ((_2609 >> 4u) & 15u)) + 4294967295u) & _2608) == 0u) || ((_2609 & 240u) == 0u))
        {
            _2765 = 0.0;
            _2767 = 0.0;
            _2769 = 0.0;
            _2771 = 0.0;
            _2773 = 0.0;
            _2775 = 0.0;
        }
        else
        {
            float _2766;
            float _2768;
            float _2770;
            float _2772;
            float _2774;
            float _2776;
            float _2999 = 0.0;
            float _3000 = 0.0;
            float _3001 = 0.0;
            float _3002 = 0.0;
            float _3003 = 0.0;
            float _3004 = 0.0;
            uint _3005 = 0u;
            uint _3014;
            bool _3015;
            for (;;)
            {
                _3014 = texelFetch(g_lightClassification, int((((_2602 << 5u) + (_2588 << 9u)) + (_3005 << 2u)) >> 2u)).x;
                _3015 = _3014 == 0u;
                float frontier_phi_60_pred;
                float frontier_phi_60_pred_1;
                float frontier_phi_60_pred_2;
                float frontier_phi_60_pred_3;
                float frontier_phi_60_pred_4;
                float frontier_phi_60_pred_5;
                if (_3015)
                {
                    frontier_phi_60_pred = _3002;
                    frontier_phi_60_pred_1 = _3001;
                    frontier_phi_60_pred_2 = _3000;
                    frontier_phi_60_pred_3 = _2999;
                    frontier_phi_60_pred_4 = _3003;
                    frontier_phi_60_pred_5 = _3004;
                }
                else
                {
                    float _3227;
                    float _3228;
                    float _3229;
                    float _3230;
                    float _3231;
                    float _3232;
                    uint _3233;
                    _3227 = _2999;
                    _3228 = _3000;
                    _3229 = _3001;
                    _3230 = _3002;
                    _3231 = _3003;
                    _3232 = _3004;
                    _3233 = _3014;
                    float _3158;
                    float _3159;
                    float _3160;
                    float _3161;
                    float _3162;
                    float _3163;
                    for (;;)
                    {
                        uint _3237 = uint(findLSB(_3233)) + (_3005 << 5u);
                        uint _3234 = (_3233 + 4294967295u) & _3233;
                        uint _3239 = _3237 * 48u;
                        vec4 _3253 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3239)).x, texelFetch(g_PointLightRenderingBuffer, int(_3239 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3239 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3239 + 3u)).x));
                        uint _3259 = (_3237 * 48u) + 4u;
                        vec4 _3272 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3259)).x, texelFetch(g_PointLightRenderingBuffer, int(_3259 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3259 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3259 + 3u)).x));
                        uint _3278 = (_3237 * 48u) + 8u;
                        vec3 _3289 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3278)).x, texelFetch(g_PointLightRenderingBuffer, int(_3278 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3278 + 2u)).x));
                        float _3293 = _3253.x - _2011;
                        float _3294 = _3253.y - _2012;
                        float _3295 = _3253.z - _2013;
                        float _3296 = dot(vec3(_3293, _3294, _3295), vec3(_3293, _3294, _3295));
                        float _3299 = inversesqrt(_3296);
                        float _3300 = _3299 * _3293;
                        float _3301 = _3299 * _3294;
                        float _3302 = _3299 * _3295;
                        float _3303 = dot(vec3(_840, _843, _846), vec3(_3300, _3301, _3302));
                        float _3308 = 1.0 - (_3296 * _3253.w);
                        float _4699 = isnan(0.0) ? _3308 : (isnan(_3308) ? 0.0 : max(_3308, 0.0));
                        float _3309 = isnan(1.0) ? _4699 : (isnan(_4699) ? 1.0 : min(_4699, 1.0));
                        float _3310 = sqrt(_3296) * _3272.w;
                        float _3313 = 1.39999997615814208984375 / (_3310 + 1.39999997615814208984375);
                        float _3314 = _3313 * _3313;
                        float _3317 = ((1.0 - _3314) * _3303) + _3314;
                        float _3320 = _3310 * _3310;
                        float _3324 = ((isnan(0.0) ? _3317 : (isnan(_3317) ? 0.0 : max(_3317, 0.0))) * _3309) / ((_3320 * 0.699999988079071044921875) + 1.0);
                        float _3328 = (-0.0) - _2011;
                        float _3329 = (-0.0) - _2012;
                        float _3330 = (-0.0) - _2013;
                        float _3334 = inversesqrt(dot(vec3(_3328, _3329, _3330), vec3(_3328, _3329, _3330)));
                        float _3335 = _3334 * _3328;
                        float _3336 = _3334 * _3329;
                        float _3337 = _3334 * _3330;
                        float _3344 = exp2(log2(1.0 / ((_3320 * 3.5) + 5.0)) * 0.25);
                        float _3345 = 1.0 - _908;
                        float _3352 = sqrt(1.0 - ((1.0 - (_3345 * _3345)) * (1.0 - (_3344 * _3344))));
                        float _3353 = _3352 * _3352;
                        float _3354 = _3353 * _3353;
                        float _3355 = _3335 + _3300;
                        float _3356 = _3336 + _3301;
                        float _3357 = _3337 + _3302;
                        float _3361 = inversesqrt(dot(vec3(_3355, _3356, _3357), vec3(_3355, _3356, _3357)));
                        float _3365 = dot(vec3(_840, _843, _846), vec3(_3335, _3336, _3337));
                        float _4715 = isnan(0.0) ? _3365 : (isnan(_3365) ? 0.0 : max(_3365, 0.0));
                        float _3368 = isnan(1.0) ? _4715 : (isnan(_4715) ? 1.0 : min(_4715, 1.0));
                        float _3369 = dot(vec3(_840, _843, _846), vec3(_3361 * _3355, _3361 * _3356, _3361 * _3357));
                        float _4726 = isnan(0.0) ? _3369 : (isnan(_3369) ? 0.0 : max(_3369, 0.0));
                        float _3372 = isnan(1.0) ? _4726 : (isnan(_4726) ? 1.0 : min(_4726, 1.0));
                        float _3376 = ((_3372 * _3372) * (_3354 + (-1.0))) + 1.0;
                        float _3377 = _3313 * _3353;
                        float _3378 = _3377 * _3377;
                        float _3381 = ((1.0 - _3378) * _3303) + _3378;
                        float _4737 = isnan(0.0) ? _3381 : (isnan(_3381) ? 0.0 : max(_3381, 0.0));
                        float _3382 = isnan(1.0) ? _4737 : (isnan(_4737) ? 1.0 : min(_4737, 1.0));
                        float _3383 = 1.0 - _3353;
                        float _3393 = (0.5 / (((_3382 * ((_3368 * _3383) + _3353)) + 9.9999999392252902907785028219223e-09) + (((_3382 * _3383) + _3353) * _3368))) * _3382;
                        float _4748 = isnan(0.0) ? _3393 : (isnan(_3393) ? 0.0 : max(_3393, 0.0));
                        float _3404 = (((_3354 * 3.1415927410125732421875) * (isnan(1.0) ? _4748 : (isnan(_4748) ? 1.0 : min(_4748, 1.0)))) / ((_3376 * _3376) * ((_3320 * 2.1991131305694580078125) + 3.141590118408203125))) * _3309;
                        _3161 = (_3324 * _3272.x) + _3230;
                        _3162 = (_3324 * _3272.y) + _3231;
                        _3163 = (_3324 * _3272.z) + _3232;
                        _3158 = (_3404 * _3289.x) + _3227;
                        _3159 = (_3404 * _3289.y) + _3228;
                        _3160 = (_3404 * _3289.z) + _3229;
                        if (_3234 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3227 = _3158;
                            _3228 = _3159;
                            _3229 = _3160;
                            _3230 = _3161;
                            _3231 = _3162;
                            _3232 = _3163;
                            _3233 = _3234;
                        }
                    }
                    frontier_phi_60_pred = _3161;
                    frontier_phi_60_pred_1 = _3160;
                    frontier_phi_60_pred_2 = _3159;
                    frontier_phi_60_pred_3 = _3158;
                    frontier_phi_60_pred_4 = _3162;
                    frontier_phi_60_pred_5 = _3163;
                }
                _2772 = frontier_phi_60_pred;
                _2770 = frontier_phi_60_pred_1;
                _2768 = frontier_phi_60_pred_2;
                _2766 = frontier_phi_60_pred_3;
                _2774 = frontier_phi_60_pred_4;
                _2776 = frontier_phi_60_pred_5;
                uint _3006 = _3005 + 1u;
                if (_3006 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2999 = _2766;
                    _3000 = _2768;
                    _3001 = _2770;
                    _3002 = _2772;
                    _3003 = _2774;
                    _3004 = _2776;
                    _3005 = _3006;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2765 = _2766;
            _2767 = _2768;
            _2769 = _2770;
            _2771 = _2772;
            _2773 = _2774;
            _2775 = _2776;
        }
        uvec4 _2779 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2780 = _2779.z;
        uint _2782 = (_2780 >> 8u) & 15u;
        float _2967;
        float _2969;
        float _2971;
        float _2973;
        float _2975;
        float _2977;
        if (((4294967295u << _2782) & _2608) == 0u)
        {
            _2967 = _2765;
            _2969 = _2767;
            _2971 = _2769;
            _2973 = _2771;
            _2975 = _2773;
            _2977 = _2775;
        }
        else
        {
            float _2992 = inversesqrt(dot(vec3(_2011, _2012, _2013), vec3(_2011, _2012, _2013)));
            float _2993 = _2992 * _2011;
            float _2994 = _2992 * _2012;
            float _2995 = _2992 * _2013;
            float frontier_phi_53_54_ladder;
            float frontier_phi_53_54_ladder_1;
            float frontier_phi_53_54_ladder_2;
            float frontier_phi_53_54_ladder_3;
            float frontier_phi_53_54_ladder_4;
            float frontier_phi_53_54_ladder_5;
            if (_2782 < ((_2780 >> 12u) & 15u))
            {
                float _2968;
                float _2970;
                float _2972;
                float _2974;
                float _2976;
                float _2978;
                float _3210 = _2765;
                float _3211 = _2767;
                float _3212 = _2769;
                float _3213 = _2771;
                float _3214 = _2773;
                float _3215 = _2775;
                uint _3216 = _2782;
                uint _3225;
                bool _3226;
                for (;;)
                {
                    _3225 = texelFetch(g_lightClassification, int((((_2602 << 5u) + (_2588 << 9u)) + (_3216 << 2u)) >> 2u)).x;
                    _3226 = _3225 == 0u;
                    float frontier_phi_68_pred;
                    float frontier_phi_68_pred_1;
                    float frontier_phi_68_pred_2;
                    float frontier_phi_68_pred_3;
                    float frontier_phi_68_pred_4;
                    float frontier_phi_68_pred_5;
                    if (_3226)
                    {
                        frontier_phi_68_pred = _3213;
                        frontier_phi_68_pred_1 = _3212;
                        frontier_phi_68_pred_2 = _3211;
                        frontier_phi_68_pred_3 = _3210;
                        frontier_phi_68_pred_4 = _3215;
                        frontier_phi_68_pred_5 = _3214;
                    }
                    else
                    {
                        float _3447;
                        float _3448;
                        float _3449;
                        float _3450;
                        float _3451;
                        float _3452;
                        float _3740;
                        float _3741;
                        float _3742;
                        float _3743;
                        float _3744;
                        float _3745;
                        float _3460 = _3210;
                        float _3461 = _3211;
                        float _3462 = _3212;
                        float _3463 = _3213;
                        float _3464 = _3214;
                        float _3465 = _3215;
                        uint _3466 = _3225;
                        uint _3467;
                        vec4 _3492;
                        float _3493;
                        vec4 _3508;
                        vec3 _3520;
                        vec4 _3535;
                        vec4 _3550;
                        float _3596;
                        bool _3597;
                        for (;;)
                        {
                            uint _3477 = ((_3216 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3466));
                            _3467 = (_3466 + 4294967295u) & _3466;
                            uint _3479 = _3477 * 40u;
                            _3492 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3479)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3479 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3479 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3479 + 3u)).x));
                            _3493 = _3492.w;
                            uint _3495 = (_3477 * 40u) + 4u;
                            _3508 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3495)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3495 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3495 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3495 + 3u)).x));
                            uint _3510 = (_3477 * 40u) + 8u;
                            _3520 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3510)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3510 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3510 + 2u)).x));
                            uint _3522 = (_3477 * 40u) + 16u;
                            _3535 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3522)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3522 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3522 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3522 + 3u)).x));
                            uint _3537 = (_3477 * 40u) + 20u;
                            _3550 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3537)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3537 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3537 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3537 + 3u)).x));
                            uint _3552 = (_3477 * 40u) + 24u;
                            vec4 _3565 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3552)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3552 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3552 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3552 + 3u)).x));
                            uint _3571 = (_3477 * 40u) + 28u;
                            vec4 _3584 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3571)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3571 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3571 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3571 + 3u)).x));
                            _3596 = fma(_2013, _3584.z, fma(_2012, _3584.y, _3584.x * _2011)) + _3584.w;
                            _3597 = !((fma(_2013, _3565.z, fma(_2012, _3565.y, _3565.x * _2011)) + _3565.w) <= 0.0);
                            float frontier_phi_74_pred;
                            float frontier_phi_74_pred_1;
                            float frontier_phi_74_pred_2;
                            float frontier_phi_74_pred_3;
                            float frontier_phi_74_pred_4;
                            float frontier_phi_74_pred_5;
                            if (_3597)
                            {
                                float _3624 = _3492.x - _2011;
                                float _3625 = _3492.y - _2012;
                                float _3626 = _3492.z - _2013;
                                float _3627 = dot(vec3(_3624, _3625, _3626), vec3(_3624, _3625, _3626));
                                float _3630 = inversesqrt(_3627);
                                float _3631 = _3630 * _3624;
                                float _3632 = _3630 * _3625;
                                float _3633 = _3630 * _3626;
                                float _3637 = 1.0 - (_3627 / (_3493 * _3493));
                                float _4759 = isnan(0.0) ? _3637 : (isnan(_3637) ? 0.0 : max(_3637, 0.0));
                                float _3638 = isnan(1.0) ? _4759 : (isnan(_4759) ? 1.0 : min(_4759, 1.0));
                                float _3642 = sqrt(_3627) * _3508.w;
                                float _3644 = 1.39999997615814208984375 / (_3642 + 1.39999997615814208984375);
                                float _3645 = _3644 * _3644;
                                float _3648 = ((1.0 - _3645) * dot(vec3(_3631, _3632, _3633), vec3(_840, _843, _846))) + _3645;
                                float _3651 = _3642 * _3642;
                                float _3655 = (fma(_2013, _3535.z, fma(_2012, _3535.y, _3535.x * _2011)) + _3535.w) / _3596;
                                float _3656 = (fma(_2013, _3550.z, fma(_2012, _3550.y, _3550.x * _2011)) + _3550.w) / _3596;
                                float _3660 = 1.0 - dot(vec2(_3655, _3656), vec2(_3655, _3656));
                                float _4775 = isnan(0.0) ? _3660 : (isnan(_3660) ? 0.0 : max(_3660, 0.0));
                                float _3661 = isnan(1.0) ? _4775 : (isnan(_4775) ? 1.0 : min(_4775, 1.0));
                                float _3662 = _3661 * (((isnan(0.0) ? _3648 : (isnan(_3648) ? 0.0 : max(_3648, 0.0))) * _3638) / ((_3651 * 0.699999988079071044921875) + 1.0));
                                float _3674 = exp2(log2(1.0 / ((_3651 * 3.5) + 5.0)) * 0.25);
                                float _3675 = 1.0 - _908;
                                float _3682 = sqrt(1.0 - ((1.0 - (_3675 * _3675)) * (1.0 - (_3674 * _3674))));
                                float _3683 = _3682 * _3682;
                                float _3684 = _3683 * _3683;
                                float _3685 = _3631 - _2993;
                                float _3686 = _3632 - _2994;
                                float _3687 = _3633 - _2995;
                                float _3691 = inversesqrt(dot(vec3(_3685, _3686, _3687), vec3(_3685, _3686, _3687)));
                                float _3695 = dot(vec3(_840, _843, _846), vec3((-0.0) - _2993, (-0.0) - _2994, (-0.0) - _2995));
                                float _4786 = isnan(0.0) ? _3695 : (isnan(_3695) ? 0.0 : max(_3695, 0.0));
                                float _3698 = isnan(1.0) ? _4786 : (isnan(_4786) ? 1.0 : min(_4786, 1.0));
                                float _3699 = dot(vec3(_840, _843, _846), vec3(_3691 * _3685, _3691 * _3686, _3691 * _3687));
                                float _4797 = isnan(0.0) ? _3699 : (isnan(_3699) ? 0.0 : max(_3699, 0.0));
                                float _3702 = isnan(1.0) ? _4797 : (isnan(_4797) ? 1.0 : min(_4797, 1.0));
                                float _3706 = ((_3702 * _3702) * (_3684 + (-1.0))) + 1.0;
                                float _3707 = _3644 * _3683;
                                float _3708 = _3707 * _3707;
                                float _3714 = ((1.0 - _3708) * dot(vec3(_840, _843, _846), vec3(_3631, _3632, _3633))) + _3708;
                                float _4808 = isnan(0.0) ? _3714 : (isnan(_3714) ? 0.0 : max(_3714, 0.0));
                                float _3715 = isnan(1.0) ? _4808 : (isnan(_4808) ? 1.0 : min(_4808, 1.0));
                                float _3716 = 1.0 - _3683;
                                float _3726 = (0.5 / (((_3715 * ((_3698 * _3716) + _3683)) + 9.9999999392252902907785028219223e-09) + (((_3715 * _3716) + _3683) * _3698))) * _3715;
                                float _4819 = isnan(0.0) ? _3726 : (isnan(_3726) ? 0.0 : max(_3726, 0.0));
                                float _3736 = (_3661 * _3638) * (((_3684 * 3.1415927410125732421875) * (isnan(1.0) ? _4819 : (isnan(_4819) ? 1.0 : min(_4819, 1.0)))) / ((_3706 * _3706) * ((_3651 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_74_pred = _3662 * _3508.x;
                                frontier_phi_74_pred_1 = _3736 * _3520.z;
                                frontier_phi_74_pred_2 = _3736 * _3520.y;
                                frontier_phi_74_pred_3 = _3736 * _3520.x;
                                frontier_phi_74_pred_4 = _3662 * _3508.y;
                                frontier_phi_74_pred_5 = _3662 * _3508.z;
                            }
                            else
                            {
                                frontier_phi_74_pred = 0.0;
                                frontier_phi_74_pred_1 = 0.0;
                                frontier_phi_74_pred_2 = 0.0;
                                frontier_phi_74_pred_3 = 0.0;
                                frontier_phi_74_pred_4 = 0.0;
                                frontier_phi_74_pred_5 = 0.0;
                            }
                            _3743 = frontier_phi_74_pred;
                            _3742 = frontier_phi_74_pred_1;
                            _3741 = frontier_phi_74_pred_2;
                            _3740 = frontier_phi_74_pred_3;
                            _3744 = frontier_phi_74_pred_4;
                            _3745 = frontier_phi_74_pred_5;
                            _3450 = _3743 + _3463;
                            _3451 = _3744 + _3464;
                            _3452 = _3745 + _3465;
                            _3447 = _3740 + _3460;
                            _3448 = _3741 + _3461;
                            _3449 = _3742 + _3462;
                            if (_3467 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3460 = _3447;
                                _3461 = _3448;
                                _3462 = _3449;
                                _3463 = _3450;
                                _3464 = _3451;
                                _3465 = _3452;
                                _3466 = _3467;
                                continue;
                            }
                        }
                        frontier_phi_68_pred = _3450;
                        frontier_phi_68_pred_1 = _3449;
                        frontier_phi_68_pred_2 = _3448;
                        frontier_phi_68_pred_3 = _3447;
                        frontier_phi_68_pred_4 = _3452;
                        frontier_phi_68_pred_5 = _3451;
                    }
                    _2974 = frontier_phi_68_pred;
                    _2972 = frontier_phi_68_pred_1;
                    _2970 = frontier_phi_68_pred_2;
                    _2968 = frontier_phi_68_pred_3;
                    _2978 = frontier_phi_68_pred_4;
                    _2976 = frontier_phi_68_pred_5;
                    uint _3217 = _3216 + 1u;
                    if (_3217 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3210 = _2968;
                        _3211 = _2970;
                        _3212 = _2972;
                        _3213 = _2974;
                        _3214 = _2976;
                        _3215 = _2978;
                        _3216 = _3217;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_53_54_ladder = _2978;
                frontier_phi_53_54_ladder_1 = _2976;
                frontier_phi_53_54_ladder_2 = _2974;
                frontier_phi_53_54_ladder_3 = _2972;
                frontier_phi_53_54_ladder_4 = _2968;
                frontier_phi_53_54_ladder_5 = _2970;
            }
            else
            {
                frontier_phi_53_54_ladder = _2775;
                frontier_phi_53_54_ladder_1 = _2773;
                frontier_phi_53_54_ladder_2 = _2771;
                frontier_phi_53_54_ladder_3 = _2769;
                frontier_phi_53_54_ladder_4 = _2765;
                frontier_phi_53_54_ladder_5 = _2767;
            }
            _2967 = frontier_phi_53_54_ladder_4;
            _2969 = frontier_phi_53_54_ladder_5;
            _2971 = frontier_phi_53_54_ladder_3;
            _2973 = frontier_phi_53_54_ladder_2;
            _2975 = frontier_phi_53_54_ladder_1;
            _2977 = frontier_phi_53_54_ladder;
        }
        float _2982 = isnan(1.0) ? _884 : (isnan(_884) ? 1.0 : min(_884, 1.0));
        _2620 = (_2982 * _2973) + _2300;
        _2622 = (_2982 * _2975) + _2301;
        _2624 = (_2982 * _2977) + _2302;
        _2626 = ((_2967 * 0.039999999105930328369140625) * _2982) + _2456;
        _2628 = ((_2969 * 0.039999999105930328369140625) * _2982) + _2457;
        _2630 = ((_2971 * 0.039999999105930328369140625) * _2982) + _2458;
    }
    else
    {
        _2620 = _2300;
        _2622 = _2301;
        _2624 = _2302;
        _2626 = _2456;
        _2628 = _2457;
        _2630 = _2458;
    }
    float _2644 = cbSceneParam._m0[86u].x - (cbSceneParam._m0[85u].z * 0.5);
    float _2645 = cbSceneParam._m0[86u].y - (cbSceneParam._m0[85u].w * 0.5);
    float _2646 = cbSceneParam._m0[86u].x * (_1923 + ((_907 * cbMtdParam._m0[11u].y) * dot(vec3(_817, _818, _819), vec3(_218, _219, _220))));
    float _2647 = isnan(_2644) ? _2646 : (isnan(_2646) ? _2644 : min(_2646, _2644));
    float _2648 = isnan(_2645) ? _782 : (isnan(_782) ? _2645 : min(_782, _2645));
    vec4 _2650 = textureLod(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_2647, _2648), 0.0);
    float _2652 = _2650.x;
    bool _2672 = ((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _2652)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2652))) > _718;
    float _2673 = _2672 ? _2647 : _781;
    float _2674 = _2672 ? _2648 : _782;
    vec4 _2676 = texture(sampler2D(g_RefractionTexture, SS_ClampLinear), vec2(_2673, _2674));
    vec4 _2681 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_2673, _2674));
    float _2683 = _2681.x;
    bool _2688 = floatBitsToUint(cbSceneParam._m0[88u]).x != 0u;
    float _2697 = (-0.0) - cbSceneParam._m0[2u].z;
    float _2703 = (_2688 ? (_2697 / (cbSceneParam._m0[2u].x - _2683)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2683))) - _718;
    float _2705 = cbMtdParam._m0[25u].y + cbMtdParam._m0[23u].w;
    float _2706 = cbMtdParam._m0[25u].z + cbMtdParam._m0[24u].x;
    float _2707 = cbMtdParam._m0[25u].w + cbMtdParam._m0[24u].y;
    bool _2713 = floatBitsToUint(cbSceneParam._m0[69u]).z != 0u;
    float _2717 = (isnan(_2703) ? 0.0 : (isnan(0.0) ? _2703 : max(0.0, _2703))) * (-1.44269502162933349609375);
    float _4850 = isnan(0.0) ? _870 : (isnan(_870) ? 0.0 : max(_870, 0.0));
    float _4861 = isnan(0.0) ? _871 : (isnan(_871) ? 0.0 : max(_871, 0.0));
    float _4872 = isnan(0.0) ? _872 : (isnan(_872) ? 0.0 : max(_872, 0.0));
    float _2868;
    float _2869;
    float _2870;
    if ((1.0 - _680) > 0.00999999977648258209228515625)
    {
        vec4 _2787 = textureLod(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_2673, _2674), 0.0);
        float _2789 = _2787.x;
        float _2795 = (_2688 ? (_2697 / (cbSceneParam._m0[2u].x - _2789)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2789))) - _718;
        uint _2801 = floatBitsToUint(cbInstanceData._m0[_2232]).x * 14u;
        uint _2807 = _2801 + 4u;
        float _2816 = dot(vec3(cbLight._m0[_2801].xyz), vec3(_239, _240, _241));
        float _2824 = dot(vec3((-0.0) - _774, (-0.0) - _775, (-0.0) - _776), vec3((-0.0) - _239, (-0.0) - _240, (-0.0) - _241));
        float _2829 = ((isnan(0.0) ? _2824 : (isnan(_2824) ? 0.0 : max(_2824, 0.0))) / (isnan(0.001000000047497451305389404296875) ? _2816 : (isnan(_2816) ? 0.001000000047497451305389404296875 : max(_2816, 0.001000000047497451305389404296875)))) + 1.0;
        float _2831 = (-0.0) - ((isnan(_2795) ? 0.0 : (isnan(0.0) ? _2795 : max(0.0, _2795))) * _2829);
        _2868 = _2713 ? 0.0 : ((((cbMtdParam._m0[23u].w * 0.079577468335628509521484375) * cbLight._m0[_2807].x) / ((_2829 * _2705) + 9.9999999747524270787835121154785e-07)) * (1.0 - exp2((_2705 * 1.44269502162933349609375) * _2831)));
        _2869 = _2713 ? 0.0 : ((((cbMtdParam._m0[24u].x * 0.079577468335628509521484375) * cbLight._m0[_2807].y) / ((_2829 * _2706) + 9.9999999747524270787835121154785e-07)) * (1.0 - exp2((_2706 * 1.44269502162933349609375) * _2831)));
        _2870 = _2713 ? 0.0 : ((((cbMtdParam._m0[24u].y * 0.079577468335628509521484375) * cbLight._m0[_2807].z) / ((_2829 * _2707) + 9.9999999747524270787835121154785e-07)) * (1.0 - exp2((_2707 * 1.44269502162933349609375) * _2831)));
    }
    else
    {
        _2868 = 0.0;
        _2869 = 0.0;
        _2870 = 0.0;
    }
    float _2887 = 0.959999978542327880859375 - (exp2(log2(1.0 - _899) * 5.0) * 0.959999978542327880859375);
    float _2888 = (_2868 + ((exp2(_2717 * (_2713 ? 0.0 : _2705)) * _2676.x) * cbSceneParam._m0[72u].w)) * _2887;
    float _2889 = (_2869 + ((exp2(_2717 * (_2713 ? 0.0 : _2706)) * _2676.y) * cbSceneParam._m0[72u].w)) * _2887;
    float _2890 = (_2870 + ((exp2(_2717 * (_2713 ? 0.0 : _2707)) * _2676.z) * cbSceneParam._m0[72u].w)) * _2887;
    float _2912 = _781 / cbSceneParam._m0[86u].x;
    float _2913 = _782 / cbSceneParam._m0[86u].y;
    vec4 _2927 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2912, _2913, (log2((isnan(cbSceneParam._m0[77u].w) ? _718 : (isnan(_718) ? cbSceneParam._m0[77u].w : min(_718, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2929 = _2927.x;
    float _2930 = _2927.y;
    float _2931 = _2927.z;
    float _2932 = _2927.w;
    float _3055;
    float _3057;
    float _3059;
    float _3061;
    if (_718 > cbSceneParam._m0[78u].w)
    {
        float _3020 = isnan(_718) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _718 : min(cbSceneParam._m0[80u].w, _718));
        float _3021 = _3020 / _718;
        float _3032 = _3021 * _767;
        float _3033 = _768 * _3021;
        float _3034 = (-0.0) - _3033;
        float _3035 = _3021 * _769;
        float _3037 = (cbSceneParam._m0[77u].w * _3034) / _3020;
        float _3038 = _3037 + cbSceneParam._m0[79u].w;
        float _3039 = cbSceneParam._m0[79u].w - _3033;
        float _3045 = sqrt(((_3032 * _3032) + (_3033 * _3033)) + (_3035 * _3035));
        float _3048 = (1.0 - (cbSceneParam._m0[77u].w / _3020)) * _3045;
        float _3053 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3054 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3409;
        if (abs((_3034 - _3037) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3409 = ((((_3038 > 0.0) ? exp2(_3053 * _3038) : (2.0 - exp2(_3054 * _3038))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3048;
        }
        else
        {
            float _3183 = 1.0 / cbSceneParam._m0[80u].x;
            float _3184 = isnan(_3039) ? _3038 : (isnan(_3038) ? _3039 : max(_3038, _3039));
            float _3185 = isnan(_3039) ? _3038 : (isnan(_3038) ? _3039 : min(_3038, _3039));
            float _3194 = isnan(0.0) ? _3184 : (isnan(_3184) ? 0.0 : min(_3184, 0.0));
            float _3195 = isnan(0.0) ? _3185 : (isnan(_3185) ? 0.0 : min(_3185, 0.0));
            _3409 = ((abs(_3045 / _3034) * cbSceneParam._m0[80u].y) * ((((_3194 - _3195) * 2.0) - ((exp2(_3053 * (isnan(0.0) ? _3184 : (isnan(_3184) ? 0.0 : max(_3184, 0.0)))) - exp2(_3053 * (isnan(0.0) ? _3185 : (isnan(_3185) ? 0.0 : max(_3185, 0.0))))) * _3183)) - ((exp2(_3054 * _3194) - exp2(_3054 * _3195)) * _3183))) + (_3048 * cbSceneParam._m0[80u].z);
        }
        vec4 _3411 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2912, _2913, 1.0), 0.0);
        float _3420 = exp2((_3409 * (-1.44269502162933349609375)) * (1.0 - _3411.w));
        float _3421 = log2(_3420);
        float _3437 = log2(_2932);
        _3055 = (exp2(_3437 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3421 * cbSceneParam._m0[78u].x)) * _3411.x) / cbSceneParam._m0[78u].x)) + _2929;
        _3057 = (exp2(_3437 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3421 * cbSceneParam._m0[78u].y)) * _3411.y) / cbSceneParam._m0[78u].y)) + _2930;
        _3059 = (exp2(_3437 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3421 * cbSceneParam._m0[78u].z)) * _3411.z) / cbSceneParam._m0[78u].z)) + _2931;
        _3061 = _3420 * _2932;
    }
    else
    {
        _3055 = _2929;
        _3057 = _2930;
        _3059 = _2931;
        _3061 = _2932;
    }
    bool _3073 = roundEven(cbMatDynParam._m0[0u].y) == 3.0;
    float _3074 = log2(_3061);
    float _3081 = exp2(_3074 * cbSceneParam._m0[78u].x) * ((_2888 + (((((_1900 * _1948.x) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _1906 : (isnan(_1906) ? 0.0 : max(_1906, 0.0))) * _1695) * _1964)) + _2626) * cbPerFrame._m0[3u].x)) + ((((isnan(1.0) ? _4850 : (isnan(_4850) ? 1.0 : min(_4850, 1.0))) * (_2620 + ((isnan(0.0) ? _1616 : (isnan(_1616) ? 0.0 : max(_1616, 0.0))) * _884))) - _2888) * _680));
    float _3082 = exp2(_3074 * cbSceneParam._m0[78u].y) * ((_2889 + (((((_1900 * _1948.y) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _1909 : (isnan(_1909) ? 0.0 : max(_1909, 0.0))) * _1695) * _1964)) + _2628) * cbPerFrame._m0[3u].x)) + ((((isnan(1.0) ? _4861 : (isnan(_4861) ? 1.0 : min(_4861, 1.0))) * (_2622 + ((isnan(0.0) ? _1619 : (isnan(_1619) ? 0.0 : max(_1619, 0.0))) * _884))) - _2889) * _680));
    float _3083 = exp2(_3074 * cbSceneParam._m0[78u].z) * ((_2890 + (((((_1900 * _1948.z) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _1912 : (isnan(_1912) ? 0.0 : max(_1912, 0.0))) * _1695) * _1964)) + _2630) * cbPerFrame._m0[3u].x)) + ((((isnan(1.0) ? _4872 : (isnan(_4872) ? 1.0 : min(_4872, 1.0))) * (_2624 + ((isnan(0.0) ? _1622 : (isnan(_1622) ? 0.0 : max(_1622, 0.0))) * _884))) - _2890) * _680));
    vec4 _3091 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_781, _782));
    float _3093 = _3091.x;
    float _3114 = (((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _3093)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _3093))) - _718) * 3.0;
    float _4938 = isnan(0.0) ? _3114 : (isnan(_3114) ? 0.0 : max(_3114, 0.0));
    float _3116 = (cbInstanceData._m0[_859 + 6u].w * (isnan(1.0) ? _4048 : (isnan(_4048) ? 1.0 : min(_4048, 1.0)))) * (isnan(1.0) ? _4938 : (isnan(_4938) ? 1.0 : min(_4938, 1.0)));
    float _3125 = (roundEven(cbMatDynParam._m0[0u].y) != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3125 * (_3073 ? _3081 : (_3081 + (cbSceneParam._m0[72u].w * _3055)));
    SV_Target.y = _3125 * (_3073 ? _3082 : (_3082 + (cbSceneParam._m0[72u].w * _3057)));
    SV_Target.z = _3125 * (_3073 ? _3083 : (_3083 + (cbSceneParam._m0[72u].w * _3059)));
    SV_Target.w = _3116;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _3116;
}


