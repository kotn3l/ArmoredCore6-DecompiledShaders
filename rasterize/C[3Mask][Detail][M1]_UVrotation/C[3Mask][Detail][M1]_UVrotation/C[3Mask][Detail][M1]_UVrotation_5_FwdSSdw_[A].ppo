#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[20];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_19;
layout(set = 0, binding = 11) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_3;
layout(set = 0, binding = 14) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_5;
layout(set = 0, binding = 15) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_6;
layout(set = 0, binding = 16) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_7;
layout(set = 0, binding = 17) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_8;
layout(set = 0, binding = 2) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_11;
layout(set = 0, binding = 5) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_14;
layout(set = 0, binding = 6) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_15;
layout(set = 0, binding = 7) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_16;
layout(set = 0, binding = 8) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_17;
layout(set = 0, binding = 9) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_18;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1254;
float _3661;
float _3662;
float _3663;
float _3664;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _205 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _206 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _207 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _213 = inversesqrt(dot(vec3(_205, _206, _207), vec3(_205, _206, _207)));
    float _220 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _227 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _250 = sin(cbMtdParam._m0[18u].x);
    float _251 = cos(cbMtdParam._m0[18u].x);
    float _252 = TEXCOORD.x - cbMtdParam._m0[17u].w;
    float _253 = TEXCOORD.y - cbMtdParam._m0[17u].w;
    float _261 = (cbMtdParam._m0[17u].w + cbMtdParam._m0[19u].y) + fma(_253, (-0.0) - _250, _251 * _252);
    float _263 = (cbMtdParam._m0[17u].w + cbMtdParam._m0[19u].z) + fma(_253, _251, _252 * _250);
    vec4 _276 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * _261) + cbTextureTilingScale._m0[1u].z, (_263 * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w));
    float _282 = _276.x * cbMtdParam._m0[10u].x;
    float _283 = _276.y * cbMtdParam._m0[10u].y;
    float _284 = _276.z * cbMtdParam._m0[10u].z;
    vec4 _302 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w));
    vec4 _321 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_0, SS_WrapLinear), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _346 = cbMtdParam._m0[19u].x * texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.x) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD.y) + cbTextureTilingScale._m0[13u].w)).x;
    float _357 = ((cbMtdParam._m0[15u].x * (-1.39999997615814208984375)) * (((1.0 - _321.x) * 2.0) - _346)) + 1.0;
    float _3673 = isnan(0.0) ? _357 : (isnan(_357) ? 0.0 : max(_357, 0.0));
    float _358 = isnan(1.0) ? _3673 : (isnan(_3673) ? 1.0 : min(_3673, 1.0));
    float _365 = (_358 * ((_302.x * cbMtdParam._m0[11u].x) - _282)) + _282;
    float _366 = (_358 * ((_302.y * cbMtdParam._m0[11u].y) - _283)) + _283;
    float _367 = (_358 * ((_302.z * cbMtdParam._m0[11u].z) - _284)) + _284;
    vec4 _385 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_8, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[17u].x * TEXCOORD.x) + cbTextureTilingScale._m0[17u].z, (cbTextureTilingScale._m0[17u].y * TEXCOORD.y) + cbTextureTilingScale._m0[17u].w));
    float _398 = (((((1.0 - _321.y) * 2.0) - _346) * (-1.39999997615814208984375)) * cbMtdParam._m0[18u].z) + 1.0;
    float _3684 = isnan(0.0) ? _398 : (isnan(_398) ? 0.0 : max(_398, 0.0));
    float _399 = isnan(1.0) ? _3684 : (isnan(_3684) ? 1.0 : min(_3684, 1.0));
    float _406 = (((_385.x * cbMtdParam._m0[12u].x) - _365) * _399) + _365;
    float _407 = (_399 * ((_385.y * cbMtdParam._m0[12u].y) - _366)) + _366;
    float _408 = (_399 * ((_385.z * cbMtdParam._m0[12u].z) - _367)) + _367;
    vec4 _425 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _438 = (((((1.0 - _321.z) * 2.0) - _346) * (-1.39999997615814208984375)) * cbMtdParam._m0[18u].w) + 1.0;
    float _3695 = isnan(0.0) ? _438 : (isnan(_438) ? 0.0 : max(_438, 0.0));
    float _439 = isnan(1.0) ? _3695 : (isnan(_3695) ? 1.0 : min(_3695, 1.0));
    float _446 = (((_425.x * cbMtdParam._m0[13u].x) - _406) * _439) + _406;
    float _447 = (_439 * ((_425.y * cbMtdParam._m0[13u].y) - _407)) + _407;
    float _448 = (_439 * ((_425.z * cbMtdParam._m0[13u].z) - _408)) + _408;
    vec4 _461 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * _261) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _263) + cbTextureTilingScale._m0[5u].w));
    float _463 = _461.x;
    float _481 = ((texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w)).x - _463) * _358) + _463;
    float _499 = ((texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w)).x - _481) * _399) + _481;
    float _518 = (((texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w)).x - _499) * _439) + _499) * cbMtdParam._m0[18u].y;
    vec4 _531 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[14u].x * _261) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _263) + cbTextureTilingScale._m0[14u].w));
    float _533 = _531.x;
    float _534 = _531.y;
    float _537 = cbMtdParam._m0[17u].y * _531.z;
    vec4 _549 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * TEXCOORD.x) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * TEXCOORD.y) + cbTextureTilingScale._m0[15u].w));
    float _558 = (((cbMtdParam._m0[17u].x * _549.z) - _537) * _358) + _537;
    vec4 _571 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_15, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _583 = (((cbMtdParam._m0[16u].w * _571.z) - _558) * _399) + _558;
    vec4 _596 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _605 = (((cbMtdParam._m0[16u].z * _596.z) - _583) * _439) + _583;
    vec4 _618 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[16u].x * TEXCOORD.x) + cbTextureTilingScale._m0[16u].z, (cbTextureTilingScale._m0[16u].y * TEXCOORD.y) + cbTextureTilingScale._m0[16u].w));
    float _631 = ((_549.x - _533) * _358) + _533;
    float _632 = ((_549.y - _534) * _358) + _534;
    float _637 = ((_571.x - _631) * _399) + _631;
    float _638 = ((_571.y - _632) * _399) + _632;
    float _647 = ((((_596.x - _637) * _439) + _637) * 2.0) + (-1.0);
    float _648 = ((((_596.y - _638) * _439) + _638) * 2.0) + (-1.0);
    float _649 = dot(vec2(_647, _648), vec2(_647, _648));
    float _3706 = isnan(0.0) ? _649 : (isnan(_649) ? 0.0 : max(_649, 0.0));
    float _654 = sqrt(1.0 - (isnan(1.0) ? _3706 : (isnan(_3706) ? 1.0 : min(_3706, 1.0))));
    float _657 = (((_618.x * 2.0) + (-1.0)) * cbMtdParam._m0[16u].y) + _647;
    float _658 = (((_618.y * 2.0) + (-1.0)) * cbMtdParam._m0[16u].y) + _648;
    float _661 = fma(_654, _220 * NORMAL.x, fma(_658, _227 * TANGENT.x, (_213 * _205) * _657));
    float _664 = fma(_654, _220 * NORMAL.y, fma(_658, _227 * TANGENT.y, (_213 * _206) * _657));
    float _667 = fma(_654, _220 * NORMAL.z, fma(_658, _227 * TANGENT.z, (_213 * _207) * _657));
    float _671 = inversesqrt(dot(vec3(_661, _664, _667), vec3(_661, _664, _667)));
    float _672 = _671 * _661;
    float _673 = _671 * _664;
    float _674 = _671 * _667;
    float _3717 = isnan(0.0) ? _605 : (isnan(_605) ? 0.0 : max(_605, 0.0));
    float _675 = isnan(1.0) ? _3717 : (isnan(_3717) ? 1.0 : min(_3717, 1.0));
    float _3728 = isnan(0.0) ? _446 : (isnan(_446) ? 0.0 : max(_446, 0.0));
    float _3739 = isnan(0.0) ? _447 : (isnan(_447) ? 0.0 : max(_447, 0.0));
    float _3750 = isnan(0.0) ? _448 : (isnan(_448) ? 0.0 : max(_448, 0.0));
    float _3761 = isnan(0.0) ? _518 : (isnan(_518) ? 0.0 : max(_518, 0.0));
    float _679 = isnan(1.0) ? _3761 : (isnan(_3761) ? 1.0 : min(_3761, 1.0));
    float _695 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _735 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _745 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _735);
    float _746 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _735);
    float _747 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _735);
    float _751 = inversesqrt(dot(vec3(_745, _746, _747), vec3(_745, _746, _747)));
    float _752 = _745 * _751;
    float _753 = _746 * _751;
    float _754 = _747 * _751;
    vec4 _759 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _761 = _759.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _933 = sqrt(((_745 * _745) + (_746 * _746)) + (_747 * _747));
        float _939 = (cbMatDynParam._m0[5u].x * _933) + cbMatDynParam._m0[5u].y;
        float _3772 = isnan(0.0) ? _939 : (isnan(_939) ? 0.0 : max(_939, 0.0));
        float _940 = isnan(1.0) ? _3772 : (isnan(_3772) ? 1.0 : min(_3772, 1.0));
        float _944 = (cbMatDynParam._m0[5u].z * _933) + cbMatDynParam._m0[5u].w;
        float _3783 = isnan(0.0) ? _944 : (isnan(_944) ? 0.0 : max(_944, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3783 : (isnan(_3783) ? 1.0 : min(_3783, 1.0))) - _940)) + _940) < ((_761 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _772 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _773 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _791 = fma(_674, cbSceneParam._m0[5u].z, fma(_673, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _672));
    float _794 = fma(_674, cbSceneParam._m0[6u].z, fma(_673, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _672));
    float _797 = fma(_674, cbSceneParam._m0[7u].z, fma(_673, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _672));
    uint _810 = uint(roundEven(NORMAL.w)) * 13u;
    uint _811 = _810 + 9u;
    uint _812 = _811 + uint(cbMatDynParam._m0[0u].w);
    float _818 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3728 : (isnan(_3728) ? 1.0 : min(_3728, 1.0)))) * cbInstanceData._m0[_812].x;
    float _819 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3739 : (isnan(_3739) ? 1.0 : min(_3739, 1.0)))) * cbInstanceData._m0[_812].y;
    float _820 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3750 : (isnan(_3750) ? 1.0 : min(_3750, 1.0)))) * cbInstanceData._m0[_812].z;
    float _3794 = isnan(0.0) ? _818 : (isnan(_818) ? 0.0 : max(_818, 0.0));
    float _821 = isnan(1.0) ? _3794 : (isnan(_3794) ? 1.0 : min(_3794, 1.0));
    float _3805 = isnan(0.0) ? _819 : (isnan(_819) ? 0.0 : max(_819, 0.0));
    float _822 = isnan(1.0) ? _3805 : (isnan(_3805) ? 1.0 : min(_3805, 1.0));
    float _3816 = isnan(0.0) ? _820 : (isnan(_820) ? 0.0 : max(_820, 0.0));
    float _823 = isnan(1.0) ? _3816 : (isnan(_3816) ? 1.0 : min(_3816, 1.0));
    float _824 = 1.0 - _679;
    float _825 = _821 * _824;
    float _826 = _822 * _824;
    float _827 = _823 * _824;
    float _832 = (_821 + (-0.039999999105930328369140625)) * _679;
    float _833 = (_822 + (-0.039999999105930328369140625)) * _679;
    float _834 = (_823 + (-0.039999999105930328369140625)) * _679;
    float _835 = _832 + 0.039999999105930328369140625;
    float _837 = _833 + 0.039999999105930328369140625;
    float _838 = _834 + 0.039999999105930328369140625;
    vec4 _847 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _772, cbSceneParam._m0[86u].y * _773));
    float _850 = _847.x * TEXCOORD_5.w;
    float _851 = dot(vec3(_672, _673, _674), vec3(_752, _753, _754));
    float _854 = _851 * 2.0;
    float _858 = (_854 * _672) - _752;
    float _859 = (_854 * _673) - _753;
    float _860 = (_854 * _674) - _754;
    float _864 = abs(dot(vec3(_752, _753, _754), vec3(_672, _673, _674)));
    float _3827 = isnan(0.0) ? _864 : (isnan(_864) ? 0.0 : max(_864, 0.0));
    float _866 = sqrt(_675);
    float _879 = exp2((_866 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3827 : (isnan(_3827) ? 1.0 : min(_3827, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_866 * 3.0));
    float _885 = (1.0 - _879) * ((_866 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _886 = _879 * _866;
    float _914 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _918 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _922 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1253;
    float _1255;
    float _1256;
    float _1257;
    float _1258;
    float _1259;
    float _1260;
    float _1261;
    float _1262;
    float _1263;
    float _1264;
    float _1265;
    float _1266;
    float _1267;
    float _1268;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _978 = fma(_922, cbModelParam._m0[26u].z, fma(_918, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _914));
        float _982 = fma(_922, cbModelParam._m0[27u].z, fma(_918, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _914));
        float _986 = fma(_922, cbModelParam._m0[28u].z, fma(_918, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _914));
        float _1011 = _914 + _672;
        float _1012 = _918 + _673;
        float _1013 = _922 + _674;
        float _1023 = fma(_1013, cbModelParam._m0[26u].z, fma(_1012, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1011)) - _978;
        float _1024 = fma(_1013, cbModelParam._m0[27u].z, fma(_1012, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1011)) - _982;
        float _1025 = fma(_1013, cbModelParam._m0[28u].z, fma(_1012, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1011)) - _986;
        float _1029 = inversesqrt(dot(vec3(_1023, _1024, _1025), vec3(_1023, _1024, _1025)));
        float _1042 = ((_1029 * _1023) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_978 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1043 = ((_1029 * _1024) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_982 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1044 = ((_1029 * _1025) / cbModelParam._m0[34u].z) + ((((((_986 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1047 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1042, _1043, _1044), 0.0);
        vec4 _1054 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1042, _1043, _1044), 0.0);
        vec4 _1061 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1042, _1043, _1044), 0.0);
        vec4 _1068 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1042, _1043, _1044), 0.0);
        float _1081 = exp2((_1047.w + (-0.5)) * 20.0) * 2.0;
        float _1082 = _1081 * (_1047.x + (-0.5));
        float _1083 = _1081 * (_1047.y + (-0.5));
        float _1084 = _1081 * (_1047.z + (-0.5));
        float _1091 = exp2((_1054.w + (-0.5)) * 20.0) * 2.0;
        float _1092 = _1091 * (_1054.x + (-0.5));
        float _1093 = _1091 * (_1054.y + (-0.5));
        float _1094 = _1091 * (_1054.z + (-0.5));
        float _1101 = exp2((_1061.w + (-0.5)) * 20.0) * 2.0;
        float _1102 = _1101 * (_1061.x + (-0.5));
        float _1103 = _1101 * (_1061.y + (-0.5));
        float _1104 = _1101 * (_1061.z + (-0.5));
        float _1111 = exp2((_1068.w + (-0.5)) * 20.0) * 2.0;
        float _1112 = _1111 * (_1068.x + (-0.5));
        float _1113 = _1111 * (_1068.y + (-0.5));
        float _1114 = _1111 * (_1068.z + (-0.5));
        float _1115 = isnan(0.0) ? _1112 : (isnan(_1112) ? 0.0 : max(_1112, 0.0));
        float _1116 = isnan(0.0) ? _1113 : (isnan(_1113) ? 0.0 : max(_1113, 0.0));
        float _1117 = isnan(0.0) ? _1114 : (isnan(_1114) ? 0.0 : max(_1114, 0.0));
        float _1118 = _1082 * 0.5;
        float _1119 = _1092 * 0.5;
        float _1120 = _1102 * 0.5;
        float _1121 = dot(vec3(_1118, _1119, _1120), vec3(_1118, _1119, _1120));
        float _1126 = (_1121 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1121);
        float _1135 = (dot(vec3(_672, _673, _674), vec3(_1126 * _1118, _1126 * _1119, _1126 * _1120)) + 1.0) * 0.5;
        float _3853 = isnan(0.0) ? _1135 : (isnan(_1135) ? 0.0 : max(_1135, 0.0));
        float _1145 = sqrt(((_1119 * _1119) + (_1118 * _1118)) + (_1120 * _1120)) / (_1115 + 9.9999997473787516355514526367188e-06);
        float _3864 = isnan(0.0) ? _1145 : (isnan(_1145) ? 0.0 : max(_1145, 0.0));
        float _1146 = isnan(1.0) ? _3864 : (isnan(_3864) ? 1.0 : min(_3864, 1.0));
        float _1147 = _1146 * 2.0;
        float _1151 = (1.0 - _1146) / (_1146 + 1.0);
        float _3875 = isnan(0.0) ? _1151 : (isnan(_1151) ? 0.0 : max(_1151, 0.0));
        float _1152 = isnan(1.0) ? _3875 : (isnan(_3875) ? 1.0 : min(_3875, 1.0));
        float _1161 = ((((1.0 - _1152) * (_1147 + 2.0)) * exp2(log2(isnan(1.0) ? _3853 : (isnan(_3853) ? 1.0 : min(_3853, 1.0))) * (_1147 + 1.0))) + _1152) * _1115;
        float _1162 = _1083 * 0.5;
        float _1163 = _1093 * 0.5;
        float _1164 = _1103 * 0.5;
        float _1165 = dot(vec3(_1162, _1163, _1164), vec3(_1162, _1163, _1164));
        float _1170 = (_1165 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1165);
        float _1178 = (dot(vec3(_672, _673, _674), vec3(_1170 * _1162, _1170 * _1163, _1170 * _1164)) + 1.0) * 0.5;
        float _3886 = isnan(0.0) ? _1178 : (isnan(_1178) ? 0.0 : max(_1178, 0.0));
        float _1187 = sqrt(((_1163 * _1163) + (_1162 * _1162)) + (_1164 * _1164)) / (_1116 + 9.9999997473787516355514526367188e-06);
        float _3897 = isnan(0.0) ? _1187 : (isnan(_1187) ? 0.0 : max(_1187, 0.0));
        float _1188 = isnan(1.0) ? _3897 : (isnan(_3897) ? 1.0 : min(_3897, 1.0));
        float _1189 = _1188 * 2.0;
        float _1193 = (1.0 - _1188) / (_1188 + 1.0);
        float _3908 = isnan(0.0) ? _1193 : (isnan(_1193) ? 0.0 : max(_1193, 0.0));
        float _1194 = isnan(1.0) ? _3908 : (isnan(_3908) ? 1.0 : min(_3908, 1.0));
        float _1203 = ((((1.0 - _1194) * (_1189 + 2.0)) * exp2(log2(isnan(1.0) ? _3886 : (isnan(_3886) ? 1.0 : min(_3886, 1.0))) * (_1189 + 1.0))) + _1194) * _1116;
        float _1204 = _1084 * 0.5;
        float _1205 = _1094 * 0.5;
        float _1206 = _1104 * 0.5;
        float _1207 = dot(vec3(_1204, _1205, _1206), vec3(_1204, _1205, _1206));
        float _1212 = (_1207 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1207);
        float _1220 = (dot(vec3(_672, _673, _674), vec3(_1212 * _1204, _1212 * _1205, _1212 * _1206)) + 1.0) * 0.5;
        float _3919 = isnan(0.0) ? _1220 : (isnan(_1220) ? 0.0 : max(_1220, 0.0));
        float _1229 = sqrt(((_1205 * _1205) + (_1204 * _1204)) + (_1206 * _1206)) / (_1117 + 9.9999997473787516355514526367188e-06);
        float _3930 = isnan(0.0) ? _1229 : (isnan(_1229) ? 0.0 : max(_1229, 0.0));
        float _1230 = isnan(1.0) ? _3930 : (isnan(_3930) ? 1.0 : min(_3930, 1.0));
        float _1231 = _1230 * 2.0;
        float _1235 = (1.0 - _1230) / (_1230 + 1.0);
        float _3941 = isnan(0.0) ? _1235 : (isnan(_1235) ? 0.0 : max(_1235, 0.0));
        float _1236 = isnan(1.0) ? _3941 : (isnan(_3941) ? 1.0 : min(_3941, 1.0));
        float _1245 = ((((1.0 - _1236) * (_1231 + 2.0)) * exp2(log2(isnan(1.0) ? _3919 : (isnan(_3919) ? 1.0 : min(_3919, 1.0))) * (_1231 + 1.0))) + _1236) * _1117;
        _1253 = _1084;
        _1255 = _1083;
        _1256 = _1082;
        _1257 = _1094;
        _1258 = _1093;
        _1259 = _1092;
        _1260 = _1104;
        _1261 = _1103;
        _1262 = _1102;
        _1263 = _1117;
        _1264 = _1116;
        _1265 = _1115;
        _1266 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1161 : (isnan(_1161) ? 0.0 : max(_1161, 0.0)));
        _1267 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1203 : (isnan(_1203) ? 0.0 : max(_1203, 0.0)));
        _1268 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1245 : (isnan(_1245) ? 0.0 : max(_1245, 0.0)));
    }
    else
    {
        _1253 = _1254;
        _1255 = _1254;
        _1256 = _1254;
        _1257 = _1254;
        _1258 = _1254;
        _1259 = _1254;
        _1260 = _1254;
        _1261 = _1254;
        _1262 = _1254;
        _1263 = _1254;
        _1264 = _1254;
        _1265 = _1254;
        _1266 = 0.0;
        _1267 = 0.0;
        _1268 = 0.0;
    }
    float _1566;
    float _1567;
    float _1568;
    float _1569;
    float _1570;
    float _1571;
    float _1572;
    float _1573;
    float _1574;
    float _1575;
    float _1576;
    float _1577;
    float _1578;
    float _1579;
    float _1580;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1297 = fma(_922, cbModelParam._m0[30u].z, fma(_918, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _914));
        float _1301 = fma(_922, cbModelParam._m0[31u].z, fma(_918, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _914));
        float _1305 = fma(_922, cbModelParam._m0[32u].z, fma(_918, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _914));
        float _1328 = _914 + _672;
        float _1329 = _918 + _673;
        float _1330 = _922 + _674;
        float _1340 = fma(_1330, cbModelParam._m0[30u].z, fma(_1329, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1328)) - _1297;
        float _1341 = fma(_1330, cbModelParam._m0[31u].z, fma(_1329, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1328)) - _1301;
        float _1342 = fma(_1330, cbModelParam._m0[32u].z, fma(_1329, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1328)) - _1305;
        float _1346 = inversesqrt(dot(vec3(_1340, _1341, _1342), vec3(_1340, _1341, _1342)));
        float _1359 = ((_1346 * _1340) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1297 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1360 = ((_1346 * _1341) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1301 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1361 = ((_1346 * _1342) / cbModelParam._m0[35u].z) + ((((((_1305 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1363 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1359, _1360, _1361), 0.0);
        vec4 _1370 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1359, _1360, _1361), 0.0);
        vec4 _1377 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1359, _1360, _1361), 0.0);
        vec4 _1384 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1359, _1360, _1361), 0.0);
        float _1396 = exp2((_1363.w + (-0.5)) * 20.0) * 2.0;
        float _1397 = _1396 * (_1363.x + (-0.5));
        float _1398 = _1396 * (_1363.y + (-0.5));
        float _1399 = _1396 * (_1363.z + (-0.5));
        float _1406 = exp2((_1370.w + (-0.5)) * 20.0) * 2.0;
        float _1407 = _1406 * (_1370.x + (-0.5));
        float _1408 = _1406 * (_1370.y + (-0.5));
        float _1409 = _1406 * (_1370.z + (-0.5));
        float _1416 = exp2((_1377.w + (-0.5)) * 20.0) * 2.0;
        float _1417 = _1416 * (_1377.x + (-0.5));
        float _1418 = _1416 * (_1377.y + (-0.5));
        float _1419 = _1416 * (_1377.z + (-0.5));
        float _1426 = exp2((_1384.w + (-0.5)) * 20.0) * 2.0;
        float _1427 = _1426 * (_1384.x + (-0.5));
        float _1428 = _1426 * (_1384.y + (-0.5));
        float _1429 = _1426 * (_1384.z + (-0.5));
        float _1430 = isnan(0.0) ? _1427 : (isnan(_1427) ? 0.0 : max(_1427, 0.0));
        float _1431 = isnan(0.0) ? _1428 : (isnan(_1428) ? 0.0 : max(_1428, 0.0));
        float _1432 = isnan(0.0) ? _1429 : (isnan(_1429) ? 0.0 : max(_1429, 0.0));
        float _1433 = _1397 * 0.5;
        float _1434 = _1407 * 0.5;
        float _1435 = _1417 * 0.5;
        float _1436 = dot(vec3(_1433, _1434, _1435), vec3(_1433, _1434, _1435));
        float _1441 = (_1436 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1436);
        float _1449 = (dot(vec3(_672, _673, _674), vec3(_1441 * _1433, _1441 * _1434, _1441 * _1435)) + 1.0) * 0.5;
        float _3982 = isnan(0.0) ? _1449 : (isnan(_1449) ? 0.0 : max(_1449, 0.0));
        float _1458 = sqrt(((_1434 * _1434) + (_1433 * _1433)) + (_1435 * _1435)) / (_1430 + 9.9999997473787516355514526367188e-06);
        float _3993 = isnan(0.0) ? _1458 : (isnan(_1458) ? 0.0 : max(_1458, 0.0));
        float _1459 = isnan(1.0) ? _3993 : (isnan(_3993) ? 1.0 : min(_3993, 1.0));
        float _1460 = _1459 * 2.0;
        float _1464 = (1.0 - _1459) / (_1459 + 1.0);
        float _4004 = isnan(0.0) ? _1464 : (isnan(_1464) ? 0.0 : max(_1464, 0.0));
        float _1465 = isnan(1.0) ? _4004 : (isnan(_4004) ? 1.0 : min(_4004, 1.0));
        float _1474 = ((((1.0 - _1465) * (_1460 + 2.0)) * exp2(log2(isnan(1.0) ? _3982 : (isnan(_3982) ? 1.0 : min(_3982, 1.0))) * (_1460 + 1.0))) + _1465) * _1430;
        float _1475 = _1398 * 0.5;
        float _1476 = _1408 * 0.5;
        float _1477 = _1418 * 0.5;
        float _1478 = dot(vec3(_1475, _1476, _1477), vec3(_1475, _1476, _1477));
        float _1483 = (_1478 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1478);
        float _1491 = (dot(vec3(_672, _673, _674), vec3(_1483 * _1475, _1483 * _1476, _1483 * _1477)) + 1.0) * 0.5;
        float _4015 = isnan(0.0) ? _1491 : (isnan(_1491) ? 0.0 : max(_1491, 0.0));
        float _1500 = sqrt(((_1476 * _1476) + (_1475 * _1475)) + (_1477 * _1477)) / (_1431 + 9.9999997473787516355514526367188e-06);
        float _4026 = isnan(0.0) ? _1500 : (isnan(_1500) ? 0.0 : max(_1500, 0.0));
        float _1501 = isnan(1.0) ? _4026 : (isnan(_4026) ? 1.0 : min(_4026, 1.0));
        float _1502 = _1501 * 2.0;
        float _1506 = (1.0 - _1501) / (_1501 + 1.0);
        float _4037 = isnan(0.0) ? _1506 : (isnan(_1506) ? 0.0 : max(_1506, 0.0));
        float _1507 = isnan(1.0) ? _4037 : (isnan(_4037) ? 1.0 : min(_4037, 1.0));
        float _1516 = ((((1.0 - _1507) * (_1502 + 2.0)) * exp2(log2(isnan(1.0) ? _4015 : (isnan(_4015) ? 1.0 : min(_4015, 1.0))) * (_1502 + 1.0))) + _1507) * _1431;
        float _1517 = _1399 * 0.5;
        float _1518 = _1409 * 0.5;
        float _1519 = _1419 * 0.5;
        float _1520 = dot(vec3(_1517, _1518, _1519), vec3(_1517, _1518, _1519));
        float _1525 = (_1520 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1520);
        float _1533 = (dot(vec3(_672, _673, _674), vec3(_1525 * _1517, _1525 * _1518, _1525 * _1519)) + 1.0) * 0.5;
        float _4048 = isnan(0.0) ? _1533 : (isnan(_1533) ? 0.0 : max(_1533, 0.0));
        float _1542 = sqrt(((_1518 * _1518) + (_1517 * _1517)) + (_1519 * _1519)) / (_1432 + 9.9999997473787516355514526367188e-06);
        float _4059 = isnan(0.0) ? _1542 : (isnan(_1542) ? 0.0 : max(_1542, 0.0));
        float _1543 = isnan(1.0) ? _4059 : (isnan(_4059) ? 1.0 : min(_4059, 1.0));
        float _1544 = _1543 * 2.0;
        float _1548 = (1.0 - _1543) / (_1543 + 1.0);
        float _4070 = isnan(0.0) ? _1548 : (isnan(_1548) ? 0.0 : max(_1548, 0.0));
        float _1549 = isnan(1.0) ? _4070 : (isnan(_4070) ? 1.0 : min(_4070, 1.0));
        float _1558 = ((((1.0 - _1549) * (_1544 + 2.0)) * exp2(log2(isnan(1.0) ? _4048 : (isnan(_4048) ? 1.0 : min(_4048, 1.0))) * (_1544 + 1.0))) + _1549) * _1432;
        _1566 = _1399;
        _1567 = _1398;
        _1568 = _1397;
        _1569 = _1409;
        _1570 = _1408;
        _1571 = _1407;
        _1572 = _1419;
        _1573 = _1418;
        _1574 = _1417;
        _1575 = _1432;
        _1576 = _1431;
        _1577 = _1430;
        _1578 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1474 : (isnan(_1474) ? 0.0 : max(_1474, 0.0)));
        _1579 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1516 : (isnan(_1516) ? 0.0 : max(_1516, 0.0)));
        _1580 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1558 : (isnan(_1558) ? 0.0 : max(_1558, 0.0)));
    }
    else
    {
        _1566 = _1254;
        _1567 = _1254;
        _1568 = _1254;
        _1569 = _1254;
        _1570 = _1254;
        _1571 = _1254;
        _1572 = _1254;
        _1573 = _1254;
        _1574 = _1254;
        _1575 = _1254;
        _1576 = _1254;
        _1577 = _1254;
        _1578 = 0.0;
        _1579 = 0.0;
        _1580 = 0.0;
    }
    float _1590 = (cbModelParam._m0[1u].x * (_1578 - _1266)) + _1266;
    float _1591 = (cbModelParam._m0[1u].x * (_1579 - _1267)) + _1267;
    float _1592 = (cbModelParam._m0[1u].x * (_1580 - _1268)) + _1268;
    float _1613 = fma(_1592, cbSceneParam._m0[89u].z, fma(_1591, cbSceneParam._m0[89u].y, _1590 * cbSceneParam._m0[89u].x));
    float _1616 = fma(_1592, cbSceneParam._m0[90u].z, fma(_1591, cbSceneParam._m0[90u].y, _1590 * cbSceneParam._m0[90u].x));
    float _1619 = fma(_1592, cbSceneParam._m0[91u].z, fma(_1591, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1590));
    float _1634 = _858 * 0.5;
    float _1635 = _859 * 0.5;
    float _1636 = _860 * 0.5;
    float _1637 = dot(vec4(_1634, _1635, _1636, 1.0), vec4(_1568, _1571, _1574, _1577));
    float _1640 = dot(vec4(_1634, _1635, _1636, 1.0), vec4(_1567, _1570, _1573, _1576));
    float _1643 = dot(vec4(_1634, _1635, _1636, 1.0), vec4(_1566, _1569, _1572, _1575));
    float _1677;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1650 = dot(vec4(_1634, _1635, _1636, 1.0), vec4(_1253, _1257, _1260, _1263));
        float _1654 = dot(vec4(_1634, _1635, _1636, 1.0), vec4(_1255, _1258, _1261, _1264));
        float _1658 = dot(vec4(_1634, _1635, _1636, 1.0), vec4(_1256, _1259, _1262, _1265));
        float _1665 = dot(vec4(cbModelParam._m0[39u]), vec4(_1634, _1635, _1636, 1.0));
        _1677 = dot(vec3(isnan(0.0) ? _1658 : (isnan(_1658) ? 0.0 : max(_1658, 0.0)), isnan(0.0) ? _1654 : (isnan(_1654) ? 0.0 : max(_1654, 0.0)), isnan(0.0) ? _1650 : (isnan(_1650) ? 0.0 : max(_1650, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1665) ? 0.0 : (isnan(0.0) ? _1665 : max(0.0, _1665))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1677 = 1.0;
    }
    float _1688;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1679 = dot(vec4(cbModelParam._m0[40u]), vec4(_1634, _1635, _1636, 1.0));
        _1688 = dot(vec3(isnan(0.0) ? _1637 : (isnan(_1637) ? 0.0 : max(_1637, 0.0)), isnan(0.0) ? _1640 : (isnan(_1640) ? 0.0 : max(_1640, 0.0)), isnan(0.0) ? _1643 : (isnan(_1643) ? 0.0 : max(_1643, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1679) ? 0.0 : (isnan(0.0) ? _1679 : max(0.0, _1679))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1688 = 1.0;
    }
    float _1692 = (_1688 * cbModelParam._m0[1u].x) + (_1677 * (1.0 - cbModelParam._m0[1u].x));
    float _1702 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _675);
    float _1703 = isnan(_1702) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1702 : min(cbModelParam._m0[25u].z, _1702));
    float _1783;
    float _1785;
    float _1787;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1750 = fma(_922, cbModelParam._m0[13u].z, fma(_918, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _914)) + cbModelParam._m0[13u].w;
        float _1754 = fma(_922, cbModelParam._m0[14u].z, fma(_918, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _914)) + cbModelParam._m0[14u].w;
        float _1758 = fma(_922, cbModelParam._m0[15u].z, fma(_918, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _914)) + cbModelParam._m0[15u].w;
        float _1761 = fma(_860, cbModelParam._m0[13u].z, fma(_859, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _858));
        float _1764 = fma(_860, cbModelParam._m0[14u].z, fma(_859, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _858));
        float _1767 = fma(_860, cbModelParam._m0[15u].z, fma(_859, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _858));
        float _1795;
        if (_1761 > 0.0)
        {
            _1795 = abs((1.0 - _1750) / _1761);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1761 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1750 + 1.0) / _1761);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1795 = frontier_phi_17_15_ladder;
        }
        float _2021;
        if (_1764 > 0.0)
        {
            _2021 = abs((1.0 - _1754) / _1764);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1764 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1754 + 1.0) / _1764);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2021 = frontier_phi_26_22_ladder;
        }
        float _2278;
        if (_1767 > 0.0)
        {
            _2278 = abs((1.0 - _1758) / _1767);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1767 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1758 + 1.0) / _1767);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2278 = frontier_phi_38_33_ladder;
        }
        float _2280 = isnan(_2021) ? _1795 : (isnan(_1795) ? _2021 : min(_1795, _2021));
        float _2281 = isnan(_2278) ? _2280 : (isnan(_2280) ? _2278 : min(_2280, _2278));
        float _2285 = (_2281 * _1761) + _1750;
        float _2286 = (_2281 * _1764) + _1754;
        float _2287 = (_2281 * _1767) + _1758;
        float _2288 = _2281 * 9.9999997473787516355514526367188e-05;
        float _2290 = (-1.0) - _2288;
        float _2292 = _2288 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2287 > _2292) || ((_2287 < _2290) || ((_2286 > _2292) || ((_2286 < _2290) || ((_2285 < _2290) || (_2285 > _2292))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2415 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2287, cbModelParam._m0[9u].z, fma(_2286, cbModelParam._m0[9u].y, _2285 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2287, cbModelParam._m0[10u].z, fma(_2286, cbModelParam._m0[10u].y, _2285 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2287, cbModelParam._m0[11u].z, fma(_2286, cbModelParam._m0[11u].y, _2285 * cbModelParam._m0[11u].x))), _1703);
            frontier_phi_16_38_ladder = _2415.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2415.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2415.x * cbModelParam._m0[1u].y;
        }
        _1783 = frontier_phi_16_38_ladder_2;
        _1785 = frontier_phi_16_38_ladder_1;
        _1787 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1771 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_858, _859, _860), _1703);
        _1783 = _1771.x * cbModelParam._m0[1u].y;
        _1785 = _1771.y * cbModelParam._m0[1u].y;
        _1787 = _1771.z * cbModelParam._m0[1u].y;
    }
    float _1791 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _675);
    float _1792 = isnan(_1791) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1791 : min(cbModelParam._m0[25u].w, _1791));
    float _1883;
    float _1885;
    float _1887;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1847 = fma(_922, cbModelParam._m0[21u].z, fma(_918, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _914)) + cbModelParam._m0[21u].w;
        float _1851 = fma(_922, cbModelParam._m0[22u].z, fma(_918, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _914)) + cbModelParam._m0[22u].w;
        float _1855 = fma(_922, cbModelParam._m0[23u].z, fma(_918, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _914)) + cbModelParam._m0[23u].w;
        float _1858 = fma(_860, cbModelParam._m0[21u].z, fma(_859, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _858));
        float _1861 = fma(_860, cbModelParam._m0[22u].z, fma(_859, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _858));
        float _1864 = fma(_860, cbModelParam._m0[23u].z, fma(_859, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _858));
        float _2026;
        if (_1858 > 0.0)
        {
            _2026 = abs((1.0 - _1847) / _1858);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1858 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1847 + 1.0) / _1858);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2026 = frontier_phi_28_24_ladder;
        }
        float _2305;
        if (_1861 > 0.0)
        {
            _2305 = abs((1.0 - _1851) / _1861);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1861 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1851 + 1.0) / _1861);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2305 = frontier_phi_40_35_ladder;
        }
        float _2518;
        if (_1864 > 0.0)
        {
            _2518 = abs((1.0 - _1855) / _1864);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1864 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1855 + 1.0) / _1864);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2518 = frontier_phi_49_46_ladder;
        }
        float _2520 = isnan(_2305) ? _2026 : (isnan(_2026) ? _2305 : min(_2026, _2305));
        float _2521 = isnan(_2518) ? _2520 : (isnan(_2520) ? _2518 : min(_2520, _2518));
        float _2525 = (_2521 * _1858) + _1847;
        float _2526 = (_2521 * _1861) + _1851;
        float _2527 = (_2521 * _1864) + _1855;
        float _2528 = _2521 * 9.9999997473787516355514526367188e-05;
        float _2529 = (-1.0) - _2528;
        float _2531 = _2528 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2527 > _2531) || ((_2527 < _2529) || ((_2526 > _2531) || ((_2526 < _2529) || ((_2525 < _2529) || (_2525 > _2531))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2726 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2527, cbModelParam._m0[17u].z, fma(_2526, cbModelParam._m0[17u].y, _2525 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2527, cbModelParam._m0[18u].z, fma(_2526, cbModelParam._m0[18u].y, _2525 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2527, cbModelParam._m0[19u].z, fma(_2526, cbModelParam._m0[19u].y, _2525 * cbModelParam._m0[19u].x))), _1792);
            frontier_phi_25_49_ladder = _2726.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2726.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2726.x * cbModelParam._m0[1u].z;
        }
        _1883 = frontier_phi_25_49_ladder_2;
        _1885 = frontier_phi_25_49_ladder_1;
        _1887 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1867 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_858, _859, _860), _1792);
        _1883 = _1867.x * cbModelParam._m0[1u].z;
        _1885 = _1867.y * cbModelParam._m0[1u].z;
        _1887 = _1867.z * cbModelParam._m0[1u].z;
    }
    float _1900 = (((_885 * _835) + _886) * _850) * ((cbModelParam._m0[1u].w * (_1883 - _1783)) + _1783);
    float _1902 = (((_885 * _837) + _886) * _850) * ((cbModelParam._m0[1u].w * (_1885 - _1785)) + _1785);
    float _1904 = (((_885 * _838) + _886) * _850) * ((cbModelParam._m0[1u].w * (_1887 - _1787)) + _1787);
    float _1907 = fma(_1904, cbSceneParam._m0[89u].z, fma(_1902, cbSceneParam._m0[89u].y, _1900 * cbSceneParam._m0[89u].x));
    float _1910 = fma(_1904, cbSceneParam._m0[90u].z, fma(_1902, cbSceneParam._m0[90u].y, _1900 * cbSceneParam._m0[90u].x));
    float _1913 = fma(_1904, cbSceneParam._m0[91u].z, fma(_1902, cbSceneParam._m0[91u].y, _1900 * cbSceneParam._m0[91u].x));
    vec4 _1921 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_772, _773));
    float _1923 = _1921.w;
    float _1935 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1923);
    float _1936 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1923);
    float _1937 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1923);
    uvec4 _1941 = floatBitsToUint(cbInstanceData._m0[_810 + 5u]);
    uint _1943 = _1941.x * 14u;
    uint _1944 = _1943 + 13u;
    float _1951 = _850 + (-1.0);
    float _1956 = (cbLight._m0[_1944].x * _1951) + 1.0;
    float _1957 = (cbLight._m0[_1944].y * _1951) + 1.0;
    float _1958 = (cbLight._m0[_1944].z * _1951) + 1.0;
    float _1959 = (cbLight._m0[_1944].w * _1951) + 1.0;
    uint _1960 = _1943 + 5u;
    float _1966 = isnan(1.0) ? _1957 : (isnan(_1957) ? 1.0 : min(_1957, 1.0));
    uint _1970 = _1943 + 4u;
    float _1980 = isnan(1.0) ? _1956 : (isnan(_1956) ? 1.0 : min(_1956, 1.0));
    uint _1984 = _1943 | 1u;
    float _1995 = dot(vec3(cbLight._m0[_1943].xyz), vec3(_672, _673, _674));
    float _1998 = dot(vec3(cbLight._m0[_1984].xyz), vec3(_672, _673, _674));
    float _4206 = isnan(0.0) ? _1995 : (isnan(_1995) ? 0.0 : max(_1995, 0.0));
    float _4217 = isnan(0.0) ? _1998 : (isnan(_1998) ? 0.0 : max(_1998, 0.0));
    float _2003 = (isnan(1.0) ? _4206 : (isnan(_4206) ? 1.0 : min(_4206, 1.0))) * 0.3183098733425140380859375;
    float _2005 = (isnan(1.0) ? _4217 : (isnan(_4217) ? 1.0 : min(_4217, 1.0))) * 0.3183098733425140380859375;
    float _2012 = ((cbLight._m0[_1960].x * _1966) * _2005) + (((cbLight._m0[_1970].x * _1935) * _1980) * _2003);
    float _2013 = ((_1966 * cbLight._m0[_1960].y) * _2005) + (((cbLight._m0[_1970].y * _1936) * _1980) * _2003);
    float _2014 = ((_1966 * cbLight._m0[_1960].z) * _2005) + (((cbLight._m0[_1970].z * _1937) * _1980) * _2003);
    uvec4 _2018 = floatBitsToUint(cbLight._m0[_1943 + 12u]);
    bool _2020 = _2018.x == 0u;
    float _2031;
    float _2033;
    float _2035;
    if (_2020)
    {
        _2031 = _2012;
        _2033 = _2013;
        _2035 = _2014;
    }
    else
    {
        uint _2039 = _1943 + 6u;
        float _2055 = (dot(vec3(cbLight._m0[_1943 + 2u].xyz), vec3(_672, _673, _674)) * 0.5) + 0.5;
        float _2056 = _2055 * _2055;
        float _4228 = isnan(0.0) ? _2056 : (isnan(_2056) ? 0.0 : max(_2056, 0.0));
        float _2057 = isnan(1.0) ? _4228 : (isnan(_4228) ? 1.0 : min(_4228, 1.0));
        float _2058 = isnan(1.0) ? _1958 : (isnan(_1958) ? 1.0 : min(_1958, 1.0));
        _2031 = (((cbLight._m0[_2039].x * 0.3183098733425140380859375) * _2057) * _2058) + _2012;
        _2033 = (((cbLight._m0[_2039].y * 0.3183098733425140380859375) * _2057) * _2058) + _2013;
        _2035 = (((cbLight._m0[_2039].z * 0.3183098733425140380859375) * _2057) * _2058) + _2014;
    }
    bool _2038 = _2018.y == 0u;
    float _2076;
    float _2078;
    float _2080;
    if (_2038)
    {
        _2076 = _2031;
        _2078 = _2033;
        _2080 = _2035;
    }
    else
    {
        uint _2249 = _1943 + 7u;
        float _2265 = (dot(vec3(cbLight._m0[_1943 + 3u].xyz), vec3(_672, _673, _674)) * 0.5) + 0.5;
        float _2266 = _2265 * _2265;
        float _4244 = isnan(0.0) ? _2266 : (isnan(_2266) ? 0.0 : max(_2266, 0.0));
        float _2267 = isnan(1.0) ? _4244 : (isnan(_4244) ? 1.0 : min(_4244, 1.0));
        float _2268 = isnan(1.0) ? _1959 : (isnan(_1959) ? 1.0 : min(_1959, 1.0));
        _2076 = (((cbLight._m0[_2249].x * 0.3183098733425140380859375) * _2267) * _2268) + _2031;
        _2078 = (((cbLight._m0[_2249].y * 0.3183098733425140380859375) * _2267) * _2268) + _2033;
        _2080 = (((cbLight._m0[_2249].z * 0.3183098733425140380859375) * _2267) * _2268) + _2035;
    }
    uint _2083 = _1943 + 8u;
    float _2096 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1943].w)) * _675) * 0.949999988079071044921875);
    float _2097 = _2096 * _2096;
    float _2098 = cbLight._m0[_1943].x + _752;
    float _2099 = cbLight._m0[_1943].y + _753;
    float _2100 = cbLight._m0[_1943].z + _754;
    float _2104 = inversesqrt(dot(vec3(_2098, _2099, _2100), vec3(_2098, _2099, _2100)));
    float _2105 = _2104 * _2098;
    float _2106 = _2104 * _2099;
    float _2107 = _2104 * _2100;
    float _2108 = dot(vec3(_672, _673, _674), vec3(cbLight._m0[_1943].xyz));
    float _4260 = isnan(0.0) ? _2108 : (isnan(_2108) ? 0.0 : max(_2108, 0.0));
    float _2111 = isnan(1.0) ? _4260 : (isnan(_4260) ? 1.0 : min(_4260, 1.0));
    float _4271 = isnan(0.0) ? _851 : (isnan(_851) ? 0.0 : max(_851, 0.0));
    float _2112 = isnan(1.0) ? _4271 : (isnan(_4271) ? 1.0 : min(_4271, 1.0));
    float _2113 = dot(vec3(_672, _673, _674), vec3(_2105, _2106, _2107));
    float _4282 = isnan(0.0) ? _2113 : (isnan(_2113) ? 0.0 : max(_2113, 0.0));
    float _2116 = isnan(1.0) ? _4282 : (isnan(_4282) ? 1.0 : min(_4282, 1.0));
    float _2117 = dot(vec3(cbLight._m0[_1943].xyz), vec3(_2105, _2106, _2107));
    float _4293 = isnan(0.0) ? _2117 : (isnan(_2117) ? 0.0 : max(_2117, 0.0));
    float _2121 = _2097 * _2097;
    float _2125 = ((_2116 * _2116) * (_2121 + (-1.0))) + 1.0;
    float _2133 = exp2(log2(1.0 - (isnan(1.0) ? _4293 : (isnan(_4293) ? 1.0 : min(_4293, 1.0)))) * 5.0);
    float _2134 = 0.959999978542327880859375 - _832;
    float _2136 = 0.959999978542327880859375 - _833;
    float _2137 = 0.959999978542327880859375 - _834;
    float _2144 = 1.0 - _2097;
    float _2155 = (0.5 / (((_2112 * ((_2111 * _2144) + _2097)) + 9.9999999392252902907785028219223e-09) + (((_2112 * _2144) + _2097) * _2111))) * _2111;
    float _4304 = isnan(0.0) ? _2155 : (isnan(_2155) ? 0.0 : max(_2155, 0.0));
    float _2157 = (isnan(1.0) ? _4304 : (isnan(_4304) ? 1.0 : min(_4304, 1.0))) * (_2121 / ((_2125 * _2125) * 3.141590118408203125));
    uint _2171 = _1943 + 9u;
    float _2182 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1984].w)) * _675) * 0.949999988079071044921875);
    float _2183 = _2182 * _2182;
    float _2184 = cbLight._m0[_1984].x + _752;
    float _2185 = cbLight._m0[_1984].y + _753;
    float _2186 = cbLight._m0[_1984].z + _754;
    float _2190 = inversesqrt(dot(vec3(_2184, _2185, _2186), vec3(_2184, _2185, _2186)));
    float _2191 = _2190 * _2184;
    float _2192 = _2190 * _2185;
    float _2193 = _2190 * _2186;
    float _2194 = dot(vec3(_672, _673, _674), vec3(cbLight._m0[_1984].xyz));
    float _4315 = isnan(0.0) ? _2194 : (isnan(_2194) ? 0.0 : max(_2194, 0.0));
    float _2197 = isnan(1.0) ? _4315 : (isnan(_4315) ? 1.0 : min(_4315, 1.0));
    float _2198 = dot(vec3(_672, _673, _674), vec3(_2191, _2192, _2193));
    float _4326 = isnan(0.0) ? _2198 : (isnan(_2198) ? 0.0 : max(_2198, 0.0));
    float _2201 = isnan(1.0) ? _4326 : (isnan(_4326) ? 1.0 : min(_4326, 1.0));
    float _2202 = dot(vec3(cbLight._m0[_1984].xyz), vec3(_2191, _2192, _2193));
    float _4337 = isnan(0.0) ? _2202 : (isnan(_2202) ? 0.0 : max(_2202, 0.0));
    float _2206 = _2183 * _2183;
    float _2210 = ((_2201 * _2201) * (_2206 + (-1.0))) + 1.0;
    float _2217 = exp2(log2(1.0 - (isnan(1.0) ? _4337 : (isnan(_4337) ? 1.0 : min(_4337, 1.0)))) * 5.0);
    float _2224 = 1.0 - _2183;
    float _2234 = (0.5 / (((_2112 * ((_2197 * _2224) + _2183)) + 9.9999999392252902907785028219223e-09) + (((_2112 * _2224) + _2183) * _2197))) * _2197;
    float _4348 = isnan(0.0) ? _2234 : (isnan(_2234) ? 0.0 : max(_2234, 0.0));
    float _2236 = (isnan(1.0) ? _4348 : (isnan(_4348) ? 1.0 : min(_4348, 1.0))) * (_2206 / ((_2210 * _2210) * 3.141590118408203125));
    float _2246 = (((((_2217 * _2134) + _835) * cbLight._m0[_2171].x) * _2236) * _1966) + ((((cbLight._m0[_2083].x * _1935) * ((_2133 * _2134) + _835)) * _2157) * _1980);
    float _2247 = (((((_2217 * _2136) + _837) * cbLight._m0[_2171].y) * _2236) * _1966) + ((((cbLight._m0[_2083].y * _1936) * ((_2133 * _2136) + _837)) * _2157) * _1980);
    float _2248 = (((((_2217 * _2137) + _838) * cbLight._m0[_2171].z) * _2236) * _1966) + ((((cbLight._m0[_2083].z * _1937) * ((_2133 * _2137) + _838)) * _2157) * _1980);
    float _2310;
    float _2312;
    float _2314;
    if (_2020)
    {
        _2310 = _2246;
        _2312 = _2247;
        _2314 = _2248;
    }
    else
    {
        uint _2316 = _1943 + 2u;
        uint _2320 = _1943 + 10u;
        float _2334 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2316].w)) * _675) * 0.949999988079071044921875);
        float _2335 = _2334 * _2334;
        float _2336 = cbLight._m0[_2316].x + _752;
        float _2337 = cbLight._m0[_2316].y + _753;
        float _2338 = cbLight._m0[_2316].z + _754;
        float _2342 = inversesqrt(dot(vec3(_2336, _2337, _2338), vec3(_2336, _2337, _2338)));
        float _2343 = _2342 * _2336;
        float _2344 = _2342 * _2337;
        float _2345 = _2342 * _2338;
        float _2346 = dot(vec3(_672, _673, _674), vec3(cbLight._m0[_2316].xyz));
        float _4359 = isnan(0.0) ? _2346 : (isnan(_2346) ? 0.0 : max(_2346, 0.0));
        float _2349 = isnan(1.0) ? _4359 : (isnan(_4359) ? 1.0 : min(_4359, 1.0));
        float _2350 = dot(vec3(_672, _673, _674), vec3(_2343, _2344, _2345));
        float _4370 = isnan(0.0) ? _2350 : (isnan(_2350) ? 0.0 : max(_2350, 0.0));
        float _2353 = isnan(1.0) ? _4370 : (isnan(_4370) ? 1.0 : min(_4370, 1.0));
        float _2354 = dot(vec3(cbLight._m0[_2316].xyz), vec3(_2343, _2344, _2345));
        float _4381 = isnan(0.0) ? _2354 : (isnan(_2354) ? 0.0 : max(_2354, 0.0));
        float _2358 = _2335 * _2335;
        float _2362 = ((_2353 * _2353) * (_2358 + (-1.0))) + 1.0;
        float _2369 = exp2(log2(1.0 - (isnan(1.0) ? _4381 : (isnan(_4381) ? 1.0 : min(_4381, 1.0)))) * 5.0);
        float _2376 = 1.0 - _2335;
        float _2386 = (0.5 / (((_2112 * ((_2349 * _2376) + _2335)) + 9.9999999392252902907785028219223e-09) + (((_2112 * _2376) + _2335) * _2349))) * _2349;
        float _4392 = isnan(0.0) ? _2386 : (isnan(_2386) ? 0.0 : max(_2386, 0.0));
        float _2388 = (isnan(1.0) ? _4392 : (isnan(_4392) ? 1.0 : min(_4392, 1.0))) * (_2358 / ((_2362 * _2362) * 3.141590118408203125));
        float _2389 = isnan(1.0) ? _1958 : (isnan(_1958) ? 1.0 : min(_1958, 1.0));
        _2310 = (((((_2369 * _2134) + _835) * cbLight._m0[_2320].x) * _2388) * _2389) + _2246;
        _2312 = (((((_2369 * _2136) + _837) * cbLight._m0[_2320].y) * _2388) * _2389) + _2247;
        _2314 = (((((_2369 * _2137) + _838) * cbLight._m0[_2320].z) * _2388) * _2389) + _2248;
    }
    float _2424;
    float _2426;
    float _2428;
    if (_2038)
    {
        _2424 = _2310;
        _2426 = _2312;
        _2428 = _2314;
    }
    else
    {
        uint _2435 = _1943 + 3u;
        uint _2439 = _1943 + 11u;
        float _2453 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2435].w)) * _675) * 0.949999988079071044921875);
        float _2454 = _2453 * _2453;
        float _2455 = cbLight._m0[_2435].x + _752;
        float _2456 = cbLight._m0[_2435].y + _753;
        float _2457 = cbLight._m0[_2435].z + _754;
        float _2461 = inversesqrt(dot(vec3(_2455, _2456, _2457), vec3(_2455, _2456, _2457)));
        float _2462 = _2461 * _2455;
        float _2463 = _2461 * _2456;
        float _2464 = _2461 * _2457;
        float _2465 = dot(vec3(_672, _673, _674), vec3(cbLight._m0[_2435].xyz));
        float _4408 = isnan(0.0) ? _2465 : (isnan(_2465) ? 0.0 : max(_2465, 0.0));
        float _2468 = isnan(1.0) ? _4408 : (isnan(_4408) ? 1.0 : min(_4408, 1.0));
        float _2469 = dot(vec3(_672, _673, _674), vec3(_2462, _2463, _2464));
        float _4419 = isnan(0.0) ? _2469 : (isnan(_2469) ? 0.0 : max(_2469, 0.0));
        float _2472 = isnan(1.0) ? _4419 : (isnan(_4419) ? 1.0 : min(_4419, 1.0));
        float _2473 = dot(vec3(cbLight._m0[_2435].xyz), vec3(_2462, _2463, _2464));
        float _4430 = isnan(0.0) ? _2473 : (isnan(_2473) ? 0.0 : max(_2473, 0.0));
        float _2477 = _2454 * _2454;
        float _2481 = ((_2472 * _2472) * (_2477 + (-1.0))) + 1.0;
        float _2488 = exp2(log2(1.0 - (isnan(1.0) ? _4430 : (isnan(_4430) ? 1.0 : min(_4430, 1.0)))) * 5.0);
        float _2495 = 1.0 - _2454;
        float _2505 = (0.5 / (((_2112 * ((_2468 * _2495) + _2454)) + 9.9999999392252902907785028219223e-09) + (((_2112 * _2495) + _2454) * _2468))) * _2468;
        float _4441 = isnan(0.0) ? _2505 : (isnan(_2505) ? 0.0 : max(_2505, 0.0));
        float _2507 = (isnan(1.0) ? _4441 : (isnan(_4441) ? 1.0 : min(_4441, 1.0))) * (_2477 / ((_2481 * _2481) * 3.141590118408203125));
        float _2508 = isnan(1.0) ? _1959 : (isnan(_1959) ? 1.0 : min(_1959, 1.0));
        _2424 = (((((_2488 * _2134) + _835) * cbLight._m0[_2439].x) * _2507) * _2508) + _2310;
        _2426 = (((((_2488 * _2136) + _837) * cbLight._m0[_2439].y) * _2507) * _2508) + _2312;
        _2428 = (((((_2488 * _2137) + _838) * cbLight._m0[_2439].z) * _2507) * _2508) + _2314;
    }
    float _2643;
    float _2645;
    float _2647;
    float _2649;
    float _2651;
    float _2653;
    if (_1941.y == 0u)
    {
        float _2583 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2584 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2583;
        float _2585 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2583;
        float _2586 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2583;
        uvec4 _2598 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2599 = _2598.x;
        uint _2610 = uint((float(_2598.y) * floor(float(uint(cbSceneParam._m0[85u].y * _773) / _2599))) + floor(float(uint(cbSceneParam._m0[85u].x * _772) / _2599)));
        float _2620 = (log2(_2586 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2621 = isnan(0.0) ? _2620 : (isnan(_2620) ? 0.0 : max(_2620, 0.0));
        uint _2624 = uint(isnan(14.0) ? _2621 : (isnan(_2621) ? 14.0 : min(_2621, 14.0)));
        uvec4 _2629 = texelFetch(g_lightClusterGridBuffer, int(((_2624 << 2u) + (_2610 << 6u)) >> 2u));
        uint _2630 = _2629.x;
        uint _2631 = _2598.z;
        float _2731;
        float _2733;
        float _2735;
        float _2737;
        float _2739;
        float _2741;
        if (((((1u << ((_2631 >> 4u) & 15u)) + 4294967295u) & _2630) == 0u) || ((_2631 & 240u) == 0u))
        {
            _2731 = 0.0;
            _2733 = 0.0;
            _2735 = 0.0;
            _2737 = 0.0;
            _2739 = 0.0;
            _2741 = 0.0;
        }
        else
        {
            float _2732;
            float _2734;
            float _2736;
            float _2738;
            float _2740;
            float _2742;
            float _2883 = 0.0;
            float _2884 = 0.0;
            float _2885 = 0.0;
            float _2886 = 0.0;
            float _2887 = 0.0;
            float _2888 = 0.0;
            uint _2889 = 0u;
            uint _2898;
            bool _2899;
            for (;;)
            {
                _2898 = texelFetch(g_lightClassification, int((((_2624 << 5u) + (_2610 << 9u)) + (_2889 << 2u)) >> 2u)).x;
                _2899 = _2898 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2899)
                {
                    frontier_phi_66_pred = _2883;
                    frontier_phi_66_pred_1 = _2888;
                    frontier_phi_66_pred_2 = _2887;
                    frontier_phi_66_pred_3 = _2886;
                    frontier_phi_66_pred_4 = _2885;
                    frontier_phi_66_pred_5 = _2884;
                }
                else
                {
                    float _3028;
                    float _3029;
                    float _3030;
                    float _3031;
                    float _3032;
                    float _3033;
                    uint _3034;
                    _3028 = _2883;
                    _3029 = _2884;
                    _3030 = _2885;
                    _3031 = _2886;
                    _3032 = _2887;
                    _3033 = _2888;
                    _3034 = _2898;
                    float _2955;
                    float _2956;
                    float _2957;
                    float _2958;
                    float _2959;
                    float _2960;
                    for (;;)
                    {
                        uint _3038 = uint(findLSB(_3034)) + (_2889 << 5u);
                        uint _3035 = (_3034 + 4294967295u) & _3034;
                        uint _3040 = _3038 * 48u;
                        vec4 _3054 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3040)).x, texelFetch(g_PointLightRenderingBuffer, int(_3040 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3040 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3040 + 3u)).x));
                        uint _3060 = (_3038 * 48u) + 4u;
                        vec4 _3073 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3060)).x, texelFetch(g_PointLightRenderingBuffer, int(_3060 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3060 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3060 + 3u)).x));
                        uint _3079 = (_3038 * 48u) + 8u;
                        vec3 _3090 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3079)).x, texelFetch(g_PointLightRenderingBuffer, int(_3079 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3079 + 2u)).x));
                        float _3094 = _3054.x - _2584;
                        float _3095 = _3054.y - _2585;
                        float _3096 = _3054.z - _2586;
                        float _3097 = dot(vec3(_3094, _3095, _3096), vec3(_3094, _3095, _3096));
                        float _3100 = inversesqrt(_3097);
                        float _3101 = _3100 * _3094;
                        float _3102 = _3100 * _3095;
                        float _3103 = _3100 * _3096;
                        float _3104 = dot(vec3(_791, _794, _797), vec3(_3101, _3102, _3103));
                        float _3109 = 1.0 - (_3097 * _3054.w);
                        float _4467 = isnan(0.0) ? _3109 : (isnan(_3109) ? 0.0 : max(_3109, 0.0));
                        float _3110 = isnan(1.0) ? _4467 : (isnan(_4467) ? 1.0 : min(_4467, 1.0));
                        float _3111 = sqrt(_3097) * _3073.w;
                        float _3114 = 1.39999997615814208984375 / (_3111 + 1.39999997615814208984375);
                        float _3115 = _3114 * _3114;
                        float _3118 = ((1.0 - _3115) * _3104) + _3115;
                        float _3121 = _3111 * _3111;
                        float _3125 = ((isnan(0.0) ? _3118 : (isnan(_3118) ? 0.0 : max(_3118, 0.0))) * _3110) / ((_3121 * 0.699999988079071044921875) + 1.0);
                        float _3129 = (-0.0) - _2584;
                        float _3130 = (-0.0) - _2585;
                        float _3131 = (-0.0) - _2586;
                        float _3135 = inversesqrt(dot(vec3(_3129, _3130, _3131), vec3(_3129, _3130, _3131)));
                        float _3136 = _3135 * _3129;
                        float _3137 = _3135 * _3130;
                        float _3138 = _3135 * _3131;
                        float _3146 = exp2(log2(1.0 / ((_3121 * 3.5) + 5.0)) * 0.25);
                        float _3147 = 1.0 - _866;
                        float _3154 = sqrt(1.0 - ((1.0 - (_3147 * _3147)) * (1.0 - (_3146 * _3146))));
                        float _3155 = _3154 * _3154;
                        float _3156 = _3155 * _3155;
                        float _3157 = _3136 + _3101;
                        float _3158 = _3137 + _3102;
                        float _3159 = _3138 + _3103;
                        float _3163 = inversesqrt(dot(vec3(_3157, _3158, _3159), vec3(_3157, _3158, _3159)));
                        float _3167 = dot(vec3(_791, _794, _797), vec3(_3136, _3137, _3138));
                        float _4483 = isnan(0.0) ? _3167 : (isnan(_3167) ? 0.0 : max(_3167, 0.0));
                        float _3170 = isnan(1.0) ? _4483 : (isnan(_4483) ? 1.0 : min(_4483, 1.0));
                        float _3171 = dot(vec3(_791, _794, _797), vec3(_3163 * _3157, _3163 * _3158, _3163 * _3159));
                        float _4494 = isnan(0.0) ? _3171 : (isnan(_3171) ? 0.0 : max(_3171, 0.0));
                        float _3174 = isnan(1.0) ? _4494 : (isnan(_4494) ? 1.0 : min(_4494, 1.0));
                        float _3178 = ((_3174 * _3174) * (_3156 + (-1.0))) + 1.0;
                        float _3179 = _3114 * _3155;
                        float _3180 = _3179 * _3179;
                        float _3183 = ((1.0 - _3180) * _3104) + _3180;
                        float _4505 = isnan(0.0) ? _3183 : (isnan(_3183) ? 0.0 : max(_3183, 0.0));
                        float _3184 = isnan(1.0) ? _4505 : (isnan(_4505) ? 1.0 : min(_4505, 1.0));
                        float _3185 = 1.0 - _3155;
                        float _3195 = (0.5 / (((_3184 * ((_3170 * _3185) + _3155)) + 9.9999999392252902907785028219223e-09) + (((_3184 * _3185) + _3155) * _3170))) * _3184;
                        float _4516 = isnan(0.0) ? _3195 : (isnan(_3195) ? 0.0 : max(_3195, 0.0));
                        float _3206 = (((_3156 * 3.1415927410125732421875) * (isnan(1.0) ? _4516 : (isnan(_4516) ? 1.0 : min(_4516, 1.0)))) / ((_3178 * _3178) * ((_3121 * 2.1991131305694580078125) + 3.141590118408203125))) * _3110;
                        _2958 = (_3125 * _3073.x) + _3031;
                        _2959 = (_3125 * _3073.y) + _3032;
                        _2960 = (_3125 * _3073.z) + _3033;
                        _2955 = (_3206 * _3090.x) + _3028;
                        _2956 = (_3206 * _3090.y) + _3029;
                        _2957 = (_3206 * _3090.z) + _3030;
                        if (_3035 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3028 = _2955;
                            _3029 = _2956;
                            _3030 = _2957;
                            _3031 = _2958;
                            _3032 = _2959;
                            _3033 = _2960;
                            _3034 = _3035;
                        }
                    }
                    frontier_phi_66_pred = _2955;
                    frontier_phi_66_pred_1 = _2960;
                    frontier_phi_66_pred_2 = _2959;
                    frontier_phi_66_pred_3 = _2958;
                    frontier_phi_66_pred_4 = _2957;
                    frontier_phi_66_pred_5 = _2956;
                }
                _2732 = frontier_phi_66_pred;
                _2742 = frontier_phi_66_pred_1;
                _2740 = frontier_phi_66_pred_2;
                _2738 = frontier_phi_66_pred_3;
                _2736 = frontier_phi_66_pred_4;
                _2734 = frontier_phi_66_pred_5;
                uint _2890 = _2889 + 1u;
                if (_2890 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2883 = _2732;
                    _2884 = _2734;
                    _2885 = _2736;
                    _2886 = _2738;
                    _2887 = _2740;
                    _2888 = _2742;
                    _2889 = _2890;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2731 = _2732;
            _2733 = _2734;
            _2735 = _2736;
            _2737 = _2738;
            _2739 = _2740;
            _2741 = _2742;
        }
        uvec4 _2745 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2746 = _2745.z;
        uint _2748 = (_2746 >> 8u) & 15u;
        float _2851;
        float _2853;
        float _2855;
        float _2857;
        float _2859;
        float _2861;
        if (((4294967295u << _2748) & _2630) == 0u)
        {
            _2851 = _2731;
            _2853 = _2733;
            _2855 = _2735;
            _2857 = _2737;
            _2859 = _2739;
            _2861 = _2741;
        }
        else
        {
            float _2876 = inversesqrt(dot(vec3(_2584, _2585, _2586), vec3(_2584, _2585, _2586)));
            float _2877 = _2876 * _2584;
            float _2878 = _2876 * _2585;
            float _2879 = _2876 * _2586;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2748 < ((_2746 >> 12u) & 15u))
            {
                float _2852;
                float _2854;
                float _2856;
                float _2858;
                float _2860;
                float _2862;
                float _3011 = _2731;
                float _3012 = _2733;
                float _3013 = _2735;
                float _3014 = _2737;
                float _3015 = _2739;
                float _3016 = _2741;
                uint _3017 = _2748;
                uint _3026;
                bool _3027;
                for (;;)
                {
                    _3026 = texelFetch(g_lightClassification, int((((_2624 << 5u) + (_2610 << 9u)) + (_3017 << 2u)) >> 2u)).x;
                    _3027 = _3026 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3027)
                    {
                        frontier_phi_77_pred = _3016;
                        frontier_phi_77_pred_1 = _3015;
                        frontier_phi_77_pred_2 = _3014;
                        frontier_phi_77_pred_3 = _3013;
                        frontier_phi_77_pred_4 = _3012;
                        frontier_phi_77_pred_5 = _3011;
                    }
                    else
                    {
                        float _3220;
                        float _3221;
                        float _3222;
                        float _3223;
                        float _3224;
                        float _3225;
                        float _3514;
                        float _3515;
                        float _3516;
                        float _3517;
                        float _3518;
                        float _3519;
                        float _3233 = _3011;
                        float _3234 = _3012;
                        float _3235 = _3013;
                        float _3236 = _3014;
                        float _3237 = _3015;
                        float _3238 = _3016;
                        uint _3239 = _3026;
                        uint _3240;
                        vec4 _3265;
                        float _3266;
                        vec4 _3281;
                        vec3 _3293;
                        vec4 _3308;
                        vec4 _3323;
                        float _3370;
                        bool _3371;
                        for (;;)
                        {
                            uint _3250 = ((_3017 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3239));
                            _3240 = (_3239 + 4294967295u) & _3239;
                            uint _3252 = _3250 * 40u;
                            _3265 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3252)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3252 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3252 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3252 + 3u)).x));
                            _3266 = _3265.w;
                            uint _3268 = (_3250 * 40u) + 4u;
                            _3281 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3268)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3268 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3268 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3268 + 3u)).x));
                            uint _3283 = (_3250 * 40u) + 8u;
                            _3293 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3283)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3283 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3283 + 2u)).x));
                            uint _3295 = (_3250 * 40u) + 16u;
                            _3308 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3295)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3295 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3295 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3295 + 3u)).x));
                            uint _3310 = (_3250 * 40u) + 20u;
                            _3323 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3310)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3310 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3310 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3310 + 3u)).x));
                            uint _3326 = (_3250 * 40u) + 24u;
                            vec4 _3339 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3326)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3326 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3326 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3326 + 3u)).x));
                            uint _3345 = (_3250 * 40u) + 28u;
                            vec4 _3358 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3345)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3345 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3345 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3345 + 3u)).x));
                            _3370 = fma(_2586, _3358.z, fma(_2585, _3358.y, _3358.x * _2584)) + _3358.w;
                            _3371 = !((fma(_2586, _3339.z, fma(_2585, _3339.y, _3339.x * _2584)) + _3339.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3371)
                            {
                                float _3398 = _3265.x - _2584;
                                float _3399 = _3265.y - _2585;
                                float _3400 = _3265.z - _2586;
                                float _3401 = dot(vec3(_3398, _3399, _3400), vec3(_3398, _3399, _3400));
                                float _3404 = inversesqrt(_3401);
                                float _3405 = _3404 * _3398;
                                float _3406 = _3404 * _3399;
                                float _3407 = _3404 * _3400;
                                float _3411 = 1.0 - (_3401 / (_3266 * _3266));
                                float _4527 = isnan(0.0) ? _3411 : (isnan(_3411) ? 0.0 : max(_3411, 0.0));
                                float _3412 = isnan(1.0) ? _4527 : (isnan(_4527) ? 1.0 : min(_4527, 1.0));
                                float _3416 = sqrt(_3401) * _3281.w;
                                float _3418 = 1.39999997615814208984375 / (_3416 + 1.39999997615814208984375);
                                float _3419 = _3418 * _3418;
                                float _3422 = ((1.0 - _3419) * dot(vec3(_3405, _3406, _3407), vec3(_791, _794, _797))) + _3419;
                                float _3425 = _3416 * _3416;
                                float _3429 = (fma(_2586, _3308.z, fma(_2585, _3308.y, _3308.x * _2584)) + _3308.w) / _3370;
                                float _3430 = (fma(_2586, _3323.z, fma(_2585, _3323.y, _3323.x * _2584)) + _3323.w) / _3370;
                                float _3434 = 1.0 - dot(vec2(_3429, _3430), vec2(_3429, _3430));
                                float _4543 = isnan(0.0) ? _3434 : (isnan(_3434) ? 0.0 : max(_3434, 0.0));
                                float _3435 = isnan(1.0) ? _4543 : (isnan(_4543) ? 1.0 : min(_4543, 1.0));
                                float _3436 = _3435 * (((isnan(0.0) ? _3422 : (isnan(_3422) ? 0.0 : max(_3422, 0.0))) * _3412) / ((_3425 * 0.699999988079071044921875) + 1.0));
                                float _3448 = exp2(log2(1.0 / ((_3425 * 3.5) + 5.0)) * 0.25);
                                float _3449 = 1.0 - _866;
                                float _3456 = sqrt(1.0 - ((1.0 - (_3449 * _3449)) * (1.0 - (_3448 * _3448))));
                                float _3457 = _3456 * _3456;
                                float _3458 = _3457 * _3457;
                                float _3459 = _3405 - _2877;
                                float _3460 = _3406 - _2878;
                                float _3461 = _3407 - _2879;
                                float _3465 = inversesqrt(dot(vec3(_3459, _3460, _3461), vec3(_3459, _3460, _3461)));
                                float _3469 = dot(vec3(_791, _794, _797), vec3((-0.0) - _2877, (-0.0) - _2878, (-0.0) - _2879));
                                float _4554 = isnan(0.0) ? _3469 : (isnan(_3469) ? 0.0 : max(_3469, 0.0));
                                float _3472 = isnan(1.0) ? _4554 : (isnan(_4554) ? 1.0 : min(_4554, 1.0));
                                float _3473 = dot(vec3(_791, _794, _797), vec3(_3465 * _3459, _3465 * _3460, _3465 * _3461));
                                float _4565 = isnan(0.0) ? _3473 : (isnan(_3473) ? 0.0 : max(_3473, 0.0));
                                float _3476 = isnan(1.0) ? _4565 : (isnan(_4565) ? 1.0 : min(_4565, 1.0));
                                float _3480 = ((_3476 * _3476) * (_3458 + (-1.0))) + 1.0;
                                float _3481 = _3418 * _3457;
                                float _3482 = _3481 * _3481;
                                float _3488 = ((1.0 - _3482) * dot(vec3(_791, _794, _797), vec3(_3405, _3406, _3407))) + _3482;
                                float _4576 = isnan(0.0) ? _3488 : (isnan(_3488) ? 0.0 : max(_3488, 0.0));
                                float _3489 = isnan(1.0) ? _4576 : (isnan(_4576) ? 1.0 : min(_4576, 1.0));
                                float _3490 = 1.0 - _3457;
                                float _3500 = (0.5 / (((_3489 * ((_3472 * _3490) + _3457)) + 9.9999999392252902907785028219223e-09) + (((_3489 * _3490) + _3457) * _3472))) * _3489;
                                float _4587 = isnan(0.0) ? _3500 : (isnan(_3500) ? 0.0 : max(_3500, 0.0));
                                float _3510 = (_3435 * _3412) * (((_3458 * 3.1415927410125732421875) * (isnan(1.0) ? _4587 : (isnan(_4587) ? 1.0 : min(_4587, 1.0)))) / ((_3480 * _3480) * ((_3425 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3436 * _3281.y;
                                frontier_phi_83_pred_1 = _3436 * _3281.x;
                                frontier_phi_83_pred_2 = _3510 * _3293.z;
                                frontier_phi_83_pred_3 = _3510 * _3293.y;
                                frontier_phi_83_pred_4 = _3510 * _3293.x;
                                frontier_phi_83_pred_5 = _3436 * _3281.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3518 = frontier_phi_83_pred;
                            _3517 = frontier_phi_83_pred_1;
                            _3516 = frontier_phi_83_pred_2;
                            _3515 = frontier_phi_83_pred_3;
                            _3514 = frontier_phi_83_pred_4;
                            _3519 = frontier_phi_83_pred_5;
                            _3223 = _3517 + _3236;
                            _3224 = _3518 + _3237;
                            _3225 = _3519 + _3238;
                            _3220 = _3514 + _3233;
                            _3221 = _3515 + _3234;
                            _3222 = _3516 + _3235;
                            if (_3240 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3233 = _3220;
                                _3234 = _3221;
                                _3235 = _3222;
                                _3236 = _3223;
                                _3237 = _3224;
                                _3238 = _3225;
                                _3239 = _3240;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3225;
                        frontier_phi_77_pred_1 = _3224;
                        frontier_phi_77_pred_2 = _3223;
                        frontier_phi_77_pred_3 = _3222;
                        frontier_phi_77_pred_4 = _3221;
                        frontier_phi_77_pred_5 = _3220;
                    }
                    _2862 = frontier_phi_77_pred;
                    _2860 = frontier_phi_77_pred_1;
                    _2858 = frontier_phi_77_pred_2;
                    _2856 = frontier_phi_77_pred_3;
                    _2854 = frontier_phi_77_pred_4;
                    _2852 = frontier_phi_77_pred_5;
                    uint _3018 = _3017 + 1u;
                    if (_3018 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3011 = _2852;
                        _3012 = _2854;
                        _3013 = _2856;
                        _3014 = _2858;
                        _3015 = _2860;
                        _3016 = _2862;
                        _3017 = _3018;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2856;
                frontier_phi_58_59_ladder_1 = _2862;
                frontier_phi_58_59_ladder_2 = _2860;
                frontier_phi_58_59_ladder_3 = _2858;
                frontier_phi_58_59_ladder_4 = _2854;
                frontier_phi_58_59_ladder_5 = _2852;
            }
            else
            {
                frontier_phi_58_59_ladder = _2735;
                frontier_phi_58_59_ladder_1 = _2741;
                frontier_phi_58_59_ladder_2 = _2739;
                frontier_phi_58_59_ladder_3 = _2737;
                frontier_phi_58_59_ladder_4 = _2733;
                frontier_phi_58_59_ladder_5 = _2731;
            }
            _2851 = frontier_phi_58_59_ladder_5;
            _2853 = frontier_phi_58_59_ladder_4;
            _2855 = frontier_phi_58_59_ladder;
            _2857 = frontier_phi_58_59_ladder_3;
            _2859 = frontier_phi_58_59_ladder_2;
            _2861 = frontier_phi_58_59_ladder_1;
        }
        float _2866 = isnan(1.0) ? _850 : (isnan(_850) ? 1.0 : min(_850, 1.0));
        _2643 = (_2866 * _2857) + _2076;
        _2645 = (_2866 * _2859) + _2078;
        _2647 = (_2866 * _2861) + _2080;
        _2649 = ((_2851 * _835) * _2866) + _2424;
        _2651 = ((_2853 * _837) * _2866) + _2426;
        _2653 = ((_2855 * _838) * _2866) + _2428;
    }
    else
    {
        _2643 = _2076;
        _2645 = _2078;
        _2647 = _2080;
        _2649 = _2424;
        _2651 = _2426;
        _2653 = _2428;
    }
    float _4603 = isnan(0.0) ? _825 : (isnan(_825) ? 0.0 : max(_825, 0.0));
    float _4614 = isnan(0.0) ? _826 : (isnan(_826) ? 0.0 : max(_826, 0.0));
    float _4625 = isnan(0.0) ? _827 : (isnan(_827) ? 0.0 : max(_827, 0.0));
    float _2670 = ((isnan(1.0) ? _4603 : (isnan(_4603) ? 1.0 : min(_4603, 1.0))) * (_2643 + ((isnan(0.0) ? _1613 : (isnan(_1613) ? 0.0 : max(_1613, 0.0))) * _850))) + ((_2649 + ((isnan(0.0) ? _1907 : (isnan(_1907) ? 0.0 : max(_1907, 0.0))) * _1692)) * cbPerFrame._m0[3u].x);
    float _2671 = ((isnan(1.0) ? _4614 : (isnan(_4614) ? 1.0 : min(_4614, 1.0))) * (_2645 + ((isnan(0.0) ? _1616 : (isnan(_1616) ? 0.0 : max(_1616, 0.0))) * _850))) + ((_2651 + ((isnan(0.0) ? _1910 : (isnan(_1910) ? 0.0 : max(_1910, 0.0))) * _1692)) * cbPerFrame._m0[3u].x);
    float _2672 = ((isnan(1.0) ? _4625 : (isnan(_4625) ? 1.0 : min(_4625, 1.0))) * (_2647 + ((isnan(0.0) ? _1619 : (isnan(_1619) ? 0.0 : max(_1619, 0.0))) * _850))) + ((_2653 + ((isnan(0.0) ? _1913 : (isnan(_1913) ? 0.0 : max(_1913, 0.0))) * _1692)) * cbPerFrame._m0[3u].x);
    uint _2673 = _810 + 6u;
    float _2681 = _772 / cbSceneParam._m0[86u].x;
    float _2682 = _773 / cbSceneParam._m0[86u].y;
    vec4 _2696 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2681, _2682, (log2((isnan(cbSceneParam._m0[77u].w) ? _695 : (isnan(_695) ? cbSceneParam._m0[77u].w : min(_695, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2698 = _2696.x;
    float _2699 = _2696.y;
    float _2700 = _2696.z;
    float _2701 = _2696.w;
    float _2793;
    float _2795;
    float _2797;
    float _2799;
    if (_695 > cbSceneParam._m0[78u].w)
    {
        float _2756 = isnan(_695) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _695 : min(cbSceneParam._m0[80u].w, _695));
        float _2757 = _2756 / _695;
        float _2768 = _2757 * _745;
        float _2769 = _746 * _2757;
        float _2770 = (-0.0) - _2769;
        float _2771 = _2757 * _747;
        float _2773 = (cbSceneParam._m0[77u].w * _2770) / _2756;
        float _2774 = _2773 + cbSceneParam._m0[79u].w;
        float _2775 = cbSceneParam._m0[79u].w - _2769;
        float _2781 = sqrt(((_2768 * _2768) + (_2769 * _2769)) + (_2771 * _2771));
        float _2784 = (1.0 - (cbSceneParam._m0[77u].w / _2756)) * _2781;
        float _2789 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2791 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2968;
        if (abs((_2770 - _2773) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2968 = ((((_2774 > 0.0) ? exp2(_2789 * _2774) : (2.0 - exp2(_2791 * _2774))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2784;
        }
        else
        {
            float _2912 = 1.0 / cbSceneParam._m0[80u].x;
            float _2913 = isnan(_2775) ? _2774 : (isnan(_2774) ? _2775 : max(_2774, _2775));
            float _2914 = isnan(_2775) ? _2774 : (isnan(_2774) ? _2775 : min(_2774, _2775));
            float _2923 = isnan(0.0) ? _2913 : (isnan(_2913) ? 0.0 : min(_2913, 0.0));
            float _2924 = isnan(0.0) ? _2914 : (isnan(_2914) ? 0.0 : min(_2914, 0.0));
            _2968 = ((abs(_2781 / _2770) * cbSceneParam._m0[80u].y) * ((((_2923 - _2924) * 2.0) - ((exp2(_2789 * (isnan(0.0) ? _2913 : (isnan(_2913) ? 0.0 : max(_2913, 0.0)))) - exp2(_2789 * (isnan(0.0) ? _2914 : (isnan(_2914) ? 0.0 : max(_2914, 0.0))))) * _2912)) - ((exp2(_2791 * _2923) - exp2(_2791 * _2924)) * _2912))) + (_2784 * cbSceneParam._m0[80u].z);
        }
        vec4 _2970 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2681, _2682, 1.0), 0.0);
        float _2979 = exp2((_2968 * (-1.44269502162933349609375)) * (1.0 - _2970.w));
        float _2980 = log2(_2979);
        float _2996 = log2(_2701);
        _2793 = (exp2(_2996 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2980 * cbSceneParam._m0[78u].x)) * _2970.x) / cbSceneParam._m0[78u].x)) + _2698;
        _2795 = (exp2(_2996 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2980 * cbSceneParam._m0[78u].y)) * _2970.y) / cbSceneParam._m0[78u].y)) + _2699;
        _2797 = (exp2(_2996 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2980 * cbSceneParam._m0[78u].z)) * _2970.z) / cbSceneParam._m0[78u].z)) + _2700;
        _2799 = _2979 * _2701;
    }
    else
    {
        _2793 = _2698;
        _2795 = _2699;
        _2797 = _2700;
        _2799 = _2701;
    }
    bool _3006;
    vec4 _2809;
    vec4 _2831;
    float _2833;
    float _2837;
    float _2838;
    float _2839;
    float _2840;
    bool _2850;
    for (;;)
    {
        _2809 = cbMatDynParam._m0[0u];
        float _2811 = roundEven(_2809.y);
        bool _2812 = _2811 == 3.0;
        float _2813 = log2(_2799);
        float _2820 = exp2(_2813 * cbSceneParam._m0[78u].x) * _2670;
        float _2821 = exp2(_2813 * cbSceneParam._m0[78u].y) * _2671;
        float _2822 = exp2(_2813 * cbSceneParam._m0[78u].z) * _2672;
        float _2829 = _761 + (-0.5);
        _2831 = cbMtdParam._m0[1u];
        _2833 = _2831.y * _2829;
        float _2836 = (_2811 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2837 = _2836 * (_2812 ? _2820 : (_2820 + (cbSceneParam._m0[72u].w * _2793)));
        _2838 = _2836 * (_2812 ? _2821 : (_2821 + (cbSceneParam._m0[72u].w * _2795)));
        _2839 = _2836 * (_2812 ? _2822 : (_2822 + (cbSceneParam._m0[72u].w * _2797)));
        _2840 = _2829 * 0.999000012874603271484375;
        _2850 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2850)
        {
            if ((cbInstanceData._m0[_810 + 7u].x + _2840) < 0.5)
            {
                _3006 = true;
                break;
            }
        }
        uint _2947 = _811 + uint(_2809.w);
        if ((cbInstanceData._m0[_2947].w < 1.0) && ((cbInstanceData._m0[_2947].w + _2840) < 0.5))
        {
            _3006 = true;
            break;
        }
        if ((_2833 + 1.0) < _2831.x)
        {
            _3006 = true;
            break;
        }
        _3006 = false;
        break;
    }
    float _3211;
    if (_3006)
    {
        discard_state = true;
        _3211 = 0.0;
    }
    else
    {
        _3211 = cbInstanceData._m0[_2673].w;
    }
    SV_Target.x = _2837;
    SV_Target.y = _2838;
    SV_Target.z = _2839;
    SV_Target.w = _3211;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2673].w;
    discard_exit();
}


