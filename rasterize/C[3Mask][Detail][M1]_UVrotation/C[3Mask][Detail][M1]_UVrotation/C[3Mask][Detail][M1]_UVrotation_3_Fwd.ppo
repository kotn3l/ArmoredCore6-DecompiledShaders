#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[20];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_19;
layout(set = 0, binding = 11) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_2;
layout(set = 0, binding = 12) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_20;
layout(set = 0, binding = 13) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_3;
layout(set = 0, binding = 14) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_5;
layout(set = 0, binding = 15) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_6;
layout(set = 0, binding = 17) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_8;
layout(set = 0, binding = 18) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_11;
layout(set = 0, binding = 3) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_14;
layout(set = 0, binding = 6) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_15;
layout(set = 0, binding = 7) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_16;
layout(set = 0, binding = 8) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_17;
layout(set = 0, binding = 9) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_18;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1289;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _211 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _212 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _213 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _219 = inversesqrt(dot(vec3(_211, _212, _213), vec3(_211, _212, _213)));
    float _226 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _233 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _256 = sin(cbMtdParam._m0[18u].x);
    float _257 = cos(cbMtdParam._m0[18u].x);
    float _258 = TEXCOORD.x - cbMtdParam._m0[17u].w;
    float _259 = TEXCOORD.y - cbMtdParam._m0[17u].w;
    float _267 = (cbMtdParam._m0[17u].w + cbMtdParam._m0[19u].y) + fma(_259, (-0.0) - _256, _257 * _258);
    float _269 = (cbMtdParam._m0[17u].w + cbMtdParam._m0[19u].z) + fma(_259, _257, _258 * _256);
    vec4 _282 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * _267) + cbTextureTilingScale._m0[1u].z, (_269 * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w));
    float _288 = _282.x * cbMtdParam._m0[10u].x;
    float _289 = _282.y * cbMtdParam._m0[10u].y;
    float _290 = _282.z * cbMtdParam._m0[10u].z;
    vec4 _308 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w));
    vec4 _327 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_0, SS_WrapLinear), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _352 = cbMtdParam._m0[19u].x * texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.x) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD.y) + cbTextureTilingScale._m0[13u].w)).x;
    float _363 = ((cbMtdParam._m0[15u].x * (-1.39999997615814208984375)) * (((1.0 - _327.x) * 2.0) - _352)) + 1.0;
    float _3618 = isnan(0.0) ? _363 : (isnan(_363) ? 0.0 : max(_363, 0.0));
    float _364 = isnan(1.0) ? _3618 : (isnan(_3618) ? 1.0 : min(_3618, 1.0));
    float _371 = (_364 * ((_308.x * cbMtdParam._m0[11u].x) - _288)) + _288;
    float _372 = (_364 * ((_308.y * cbMtdParam._m0[11u].y) - _289)) + _289;
    float _373 = (_364 * ((_308.z * cbMtdParam._m0[11u].z) - _290)) + _290;
    vec4 _391 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_8, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[17u].x * TEXCOORD.x) + cbTextureTilingScale._m0[17u].z, (cbTextureTilingScale._m0[17u].y * TEXCOORD.y) + cbTextureTilingScale._m0[17u].w));
    float _404 = (((((1.0 - _327.y) * 2.0) - _352) * (-1.39999997615814208984375)) * cbMtdParam._m0[18u].z) + 1.0;
    float _3629 = isnan(0.0) ? _404 : (isnan(_404) ? 0.0 : max(_404, 0.0));
    float _405 = isnan(1.0) ? _3629 : (isnan(_3629) ? 1.0 : min(_3629, 1.0));
    float _412 = (((_391.x * cbMtdParam._m0[12u].x) - _371) * _405) + _371;
    float _413 = (_405 * ((_391.y * cbMtdParam._m0[12u].y) - _372)) + _372;
    float _414 = (_405 * ((_391.z * cbMtdParam._m0[12u].z) - _373)) + _373;
    vec4 _431 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _444 = (((((1.0 - _327.z) * 2.0) - _352) * (-1.39999997615814208984375)) * cbMtdParam._m0[18u].w) + 1.0;
    float _3640 = isnan(0.0) ? _444 : (isnan(_444) ? 0.0 : max(_444, 0.0));
    float _445 = isnan(1.0) ? _3640 : (isnan(_3640) ? 1.0 : min(_3640, 1.0));
    float _452 = (((_431.x * cbMtdParam._m0[13u].x) - _412) * _445) + _412;
    float _453 = (_445 * ((_431.y * cbMtdParam._m0[13u].y) - _413)) + _413;
    float _454 = (_445 * ((_431.z * cbMtdParam._m0[13u].z) - _414)) + _414;
    vec4 _474 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_20, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.z) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.w) + cbTextureTilingScale._m0[12u].w));
    float _503 = (TEXCOORD_5.x - ((cbMtdParam._m0[15u].w * (1.0 - TEXCOORD_5.x)) * (texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[18u].x * TEXCOORD.z) + cbTextureTilingScale._m0[18u].z, (cbTextureTilingScale._m0[18u].y * TEXCOORD.w) + cbTextureTilingScale._m0[18u].w)).x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[15u].z + 1.0);
    float _3651 = isnan(0.0) ? _503 : (isnan(_503) ? 0.0 : max(_503, 0.0));
    float _504 = isnan(1.0) ? _3651 : (isnan(_3651) ? 1.0 : min(_3651, 1.0));
    float _511 = (_504 * ((_474.x * cbMtdParam._m0[14u].x) - _452)) + _452;
    float _512 = (_504 * ((_474.y * cbMtdParam._m0[14u].y) - _453)) + _453;
    float _513 = (_504 * ((_474.z * cbMtdParam._m0[14u].z) - _454)) + _454;
    vec4 _526 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * _267) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _269) + cbTextureTilingScale._m0[5u].w));
    float _528 = _526.x;
    float _546 = ((texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w)).x - _528) * _364) + _528;
    float _564 = ((texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w)).x - _546) * _405) + _546;
    float _581 = ((texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w)).x - _564) * _445) + _564;
    float _585 = (_581 - (_581 * TEXCOORD_5.x)) * cbMtdParam._m0[18u].y;
    vec4 _598 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.z) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.w) + cbTextureTilingScale._m0[3u].w));
    vec4 _620 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[14u].x * _267) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _269) + cbTextureTilingScale._m0[14u].w));
    float _622 = _620.x;
    float _623 = _620.y;
    float _626 = cbMtdParam._m0[17u].y * _620.z;
    vec4 _638 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * TEXCOORD.x) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * TEXCOORD.y) + cbTextureTilingScale._m0[15u].w));
    float _647 = (((cbMtdParam._m0[17u].x * _638.z) - _626) * _364) + _626;
    vec4 _660 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_15, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _672 = (((cbMtdParam._m0[16u].w * _660.z) - _647) * _405) + _647;
    vec4 _685 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _694 = (((cbMtdParam._m0[16u].z * _685.z) - _672) * _445) + _672;
    float _699 = ((cbMtdParam._m0[16u].x * TEXCOORD_5.x) * ((_598.z * cbMtdParam._m0[17u].z) - _694)) + _694;
    float _704 = ((_638.x - _622) * _364) + _622;
    float _705 = ((_638.y - _623) * _364) + _623;
    float _710 = ((_660.x - _704) * _405) + _704;
    float _711 = ((_660.y - _705) * _405) + _705;
    float _720 = ((((_685.x - _710) * _445) + _710) * 2.0) + (-1.0);
    float _721 = ((((_685.y - _711) * _445) + _711) * 2.0) + (-1.0);
    float _722 = dot(vec2(_720, _721), vec2(_720, _721));
    float _3662 = isnan(0.0) ? _722 : (isnan(_722) ? 0.0 : max(_722, 0.0));
    float _727 = sqrt(1.0 - (isnan(1.0) ? _3662 : (isnan(_3662) ? 1.0 : min(_3662, 1.0))));
    float _733 = ((((_598.x * 2.0) + (-1.0)) * TEXCOORD_5.x) * cbMtdParam._m0[15u].y) + _720;
    float _734 = ((((_598.y * 2.0) + (-1.0)) * TEXCOORD_5.y) * cbMtdParam._m0[15u].y) + _721;
    float _737 = fma(_727, _226 * NORMAL.x, fma(_734, _233 * TANGENT.x, (_219 * _211) * _733));
    float _740 = fma(_727, _226 * NORMAL.y, fma(_734, _233 * TANGENT.y, (_219 * _212) * _733));
    float _743 = fma(_727, _226 * NORMAL.z, fma(_734, _233 * TANGENT.z, (_219 * _213) * _733));
    float _747 = inversesqrt(dot(vec3(_737, _740, _743), vec3(_737, _740, _743)));
    float _748 = _747 * _737;
    float _749 = _747 * _740;
    float _750 = _747 * _743;
    float _3673 = isnan(0.0) ? _699 : (isnan(_699) ? 0.0 : max(_699, 0.0));
    float _751 = isnan(1.0) ? _3673 : (isnan(_3673) ? 1.0 : min(_3673, 1.0));
    float _3684 = isnan(0.0) ? _511 : (isnan(_511) ? 0.0 : max(_511, 0.0));
    float _3695 = isnan(0.0) ? _512 : (isnan(_512) ? 0.0 : max(_512, 0.0));
    float _3706 = isnan(0.0) ? _513 : (isnan(_513) ? 0.0 : max(_513, 0.0));
    float _3717 = isnan(0.0) ? _585 : (isnan(_585) ? 0.0 : max(_585, 0.0));
    float _755 = isnan(1.0) ? _3717 : (isnan(_3717) ? 1.0 : min(_3717, 1.0));
    float _771 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _811 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _821 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _811);
    float _822 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _811);
    float _823 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _811);
    float _827 = inversesqrt(dot(vec3(_821, _822, _823), vec3(_821, _822, _823)));
    float _828 = _821 * _827;
    float _829 = _822 * _827;
    float _830 = _823 * _827;
    float _836 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _837 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _855 = fma(_750, cbSceneParam._m0[5u].z, fma(_749, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _748));
    float _858 = fma(_750, cbSceneParam._m0[6u].z, fma(_749, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _748));
    float _861 = fma(_750, cbSceneParam._m0[7u].z, fma(_749, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _748));
    uint _874 = uint(roundEven(NORMAL.w)) * 13u;
    uint _876 = (_874 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _882 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3684 : (isnan(_3684) ? 1.0 : min(_3684, 1.0)))) * cbInstanceData._m0[_876].x;
    float _883 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3695 : (isnan(_3695) ? 1.0 : min(_3695, 1.0)))) * cbInstanceData._m0[_876].y;
    float _884 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3706 : (isnan(_3706) ? 1.0 : min(_3706, 1.0)))) * cbInstanceData._m0[_876].z;
    float _3728 = isnan(0.0) ? _882 : (isnan(_882) ? 0.0 : max(_882, 0.0));
    float _885 = isnan(1.0) ? _3728 : (isnan(_3728) ? 1.0 : min(_3728, 1.0));
    float _3739 = isnan(0.0) ? _883 : (isnan(_883) ? 0.0 : max(_883, 0.0));
    float _886 = isnan(1.0) ? _3739 : (isnan(_3739) ? 1.0 : min(_3739, 1.0));
    float _3750 = isnan(0.0) ? _884 : (isnan(_884) ? 0.0 : max(_884, 0.0));
    float _887 = isnan(1.0) ? _3750 : (isnan(_3750) ? 1.0 : min(_3750, 1.0));
    float _888 = 1.0 - _755;
    float _889 = _885 * _888;
    float _890 = _886 * _888;
    float _891 = _887 * _888;
    float _896 = (_885 + (-0.039999999105930328369140625)) * _755;
    float _897 = (_886 + (-0.039999999105930328369140625)) * _755;
    float _898 = (_887 + (-0.039999999105930328369140625)) * _755;
    float _899 = _896 + 0.039999999105930328369140625;
    float _901 = _897 + 0.039999999105930328369140625;
    float _902 = _898 + 0.039999999105930328369140625;
    vec4 _911 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _836, cbSceneParam._m0[86u].y * _837));
    float _914 = _911.x * TEXCOORD_5.w;
    float _915 = dot(vec3(_748, _749, _750), vec3(_828, _829, _830));
    float _918 = _915 * 2.0;
    float _922 = (_918 * _748) - _828;
    float _923 = (_918 * _749) - _829;
    float _924 = (_918 * _750) - _830;
    float _928 = abs(dot(vec3(_828, _829, _830), vec3(_748, _749, _750)));
    float _3761 = isnan(0.0) ? _928 : (isnan(_928) ? 0.0 : max(_928, 0.0));
    float _930 = sqrt(_751);
    float _943 = exp2((_930 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3761 : (isnan(_3761) ? 1.0 : min(_3761, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_930 * 3.0));
    float _949 = (1.0 - _943) * ((_930 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _950 = _943 * _930;
    float _978 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _982 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _986 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1288;
    float _1290;
    float _1291;
    float _1292;
    float _1293;
    float _1294;
    float _1295;
    float _1296;
    float _1297;
    float _1298;
    float _1299;
    float _1300;
    float _1301;
    float _1302;
    float _1303;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1013 = fma(_986, cbModelParam._m0[26u].z, fma(_982, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _978));
        float _1017 = fma(_986, cbModelParam._m0[27u].z, fma(_982, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _978));
        float _1021 = fma(_986, cbModelParam._m0[28u].z, fma(_982, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _978));
        float _1046 = _978 + _748;
        float _1047 = _982 + _749;
        float _1048 = _986 + _750;
        float _1058 = fma(_1048, cbModelParam._m0[26u].z, fma(_1047, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1046)) - _1013;
        float _1059 = fma(_1048, cbModelParam._m0[27u].z, fma(_1047, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1046)) - _1017;
        float _1060 = fma(_1048, cbModelParam._m0[28u].z, fma(_1047, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1046)) - _1021;
        float _1064 = inversesqrt(dot(vec3(_1058, _1059, _1060), vec3(_1058, _1059, _1060)));
        float _1077 = ((_1064 * _1058) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1013 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1078 = ((_1064 * _1059) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1017 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1079 = ((_1064 * _1060) / cbModelParam._m0[34u].z) + ((((((_1021 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1082 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1077, _1078, _1079), 0.0);
        vec4 _1089 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1077, _1078, _1079), 0.0);
        vec4 _1096 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1077, _1078, _1079), 0.0);
        vec4 _1103 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1077, _1078, _1079), 0.0);
        float _1116 = exp2((_1082.w + (-0.5)) * 20.0) * 2.0;
        float _1117 = _1116 * (_1082.x + (-0.5));
        float _1118 = _1116 * (_1082.y + (-0.5));
        float _1119 = _1116 * (_1082.z + (-0.5));
        float _1126 = exp2((_1089.w + (-0.5)) * 20.0) * 2.0;
        float _1127 = _1126 * (_1089.x + (-0.5));
        float _1128 = _1126 * (_1089.y + (-0.5));
        float _1129 = _1126 * (_1089.z + (-0.5));
        float _1136 = exp2((_1096.w + (-0.5)) * 20.0) * 2.0;
        float _1137 = _1136 * (_1096.x + (-0.5));
        float _1138 = _1136 * (_1096.y + (-0.5));
        float _1139 = _1136 * (_1096.z + (-0.5));
        float _1146 = exp2((_1103.w + (-0.5)) * 20.0) * 2.0;
        float _1147 = _1146 * (_1103.x + (-0.5));
        float _1148 = _1146 * (_1103.y + (-0.5));
        float _1149 = _1146 * (_1103.z + (-0.5));
        float _1150 = isnan(0.0) ? _1147 : (isnan(_1147) ? 0.0 : max(_1147, 0.0));
        float _1151 = isnan(0.0) ? _1148 : (isnan(_1148) ? 0.0 : max(_1148, 0.0));
        float _1152 = isnan(0.0) ? _1149 : (isnan(_1149) ? 0.0 : max(_1149, 0.0));
        float _1153 = _1117 * 0.5;
        float _1154 = _1127 * 0.5;
        float _1155 = _1137 * 0.5;
        float _1156 = dot(vec3(_1153, _1154, _1155), vec3(_1153, _1154, _1155));
        float _1161 = (_1156 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1156);
        float _1170 = (dot(vec3(_748, _749, _750), vec3(_1161 * _1153, _1161 * _1154, _1161 * _1155)) + 1.0) * 0.5;
        float _3787 = isnan(0.0) ? _1170 : (isnan(_1170) ? 0.0 : max(_1170, 0.0));
        float _1180 = sqrt(((_1154 * _1154) + (_1153 * _1153)) + (_1155 * _1155)) / (_1150 + 9.9999997473787516355514526367188e-06);
        float _3798 = isnan(0.0) ? _1180 : (isnan(_1180) ? 0.0 : max(_1180, 0.0));
        float _1181 = isnan(1.0) ? _3798 : (isnan(_3798) ? 1.0 : min(_3798, 1.0));
        float _1182 = _1181 * 2.0;
        float _1186 = (1.0 - _1181) / (_1181 + 1.0);
        float _3809 = isnan(0.0) ? _1186 : (isnan(_1186) ? 0.0 : max(_1186, 0.0));
        float _1187 = isnan(1.0) ? _3809 : (isnan(_3809) ? 1.0 : min(_3809, 1.0));
        float _1196 = ((((1.0 - _1187) * (_1182 + 2.0)) * exp2(log2(isnan(1.0) ? _3787 : (isnan(_3787) ? 1.0 : min(_3787, 1.0))) * (_1182 + 1.0))) + _1187) * _1150;
        float _1197 = _1118 * 0.5;
        float _1198 = _1128 * 0.5;
        float _1199 = _1138 * 0.5;
        float _1200 = dot(vec3(_1197, _1198, _1199), vec3(_1197, _1198, _1199));
        float _1205 = (_1200 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1200);
        float _1213 = (dot(vec3(_748, _749, _750), vec3(_1205 * _1197, _1205 * _1198, _1205 * _1199)) + 1.0) * 0.5;
        float _3820 = isnan(0.0) ? _1213 : (isnan(_1213) ? 0.0 : max(_1213, 0.0));
        float _1222 = sqrt(((_1198 * _1198) + (_1197 * _1197)) + (_1199 * _1199)) / (_1151 + 9.9999997473787516355514526367188e-06);
        float _3831 = isnan(0.0) ? _1222 : (isnan(_1222) ? 0.0 : max(_1222, 0.0));
        float _1223 = isnan(1.0) ? _3831 : (isnan(_3831) ? 1.0 : min(_3831, 1.0));
        float _1224 = _1223 * 2.0;
        float _1228 = (1.0 - _1223) / (_1223 + 1.0);
        float _3842 = isnan(0.0) ? _1228 : (isnan(_1228) ? 0.0 : max(_1228, 0.0));
        float _1229 = isnan(1.0) ? _3842 : (isnan(_3842) ? 1.0 : min(_3842, 1.0));
        float _1238 = ((((1.0 - _1229) * (_1224 + 2.0)) * exp2(log2(isnan(1.0) ? _3820 : (isnan(_3820) ? 1.0 : min(_3820, 1.0))) * (_1224 + 1.0))) + _1229) * _1151;
        float _1239 = _1119 * 0.5;
        float _1240 = _1129 * 0.5;
        float _1241 = _1139 * 0.5;
        float _1242 = dot(vec3(_1239, _1240, _1241), vec3(_1239, _1240, _1241));
        float _1247 = (_1242 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1242);
        float _1255 = (dot(vec3(_748, _749, _750), vec3(_1247 * _1239, _1247 * _1240, _1247 * _1241)) + 1.0) * 0.5;
        float _3853 = isnan(0.0) ? _1255 : (isnan(_1255) ? 0.0 : max(_1255, 0.0));
        float _1264 = sqrt(((_1240 * _1240) + (_1239 * _1239)) + (_1241 * _1241)) / (_1152 + 9.9999997473787516355514526367188e-06);
        float _3864 = isnan(0.0) ? _1264 : (isnan(_1264) ? 0.0 : max(_1264, 0.0));
        float _1265 = isnan(1.0) ? _3864 : (isnan(_3864) ? 1.0 : min(_3864, 1.0));
        float _1266 = _1265 * 2.0;
        float _1270 = (1.0 - _1265) / (_1265 + 1.0);
        float _3875 = isnan(0.0) ? _1270 : (isnan(_1270) ? 0.0 : max(_1270, 0.0));
        float _1271 = isnan(1.0) ? _3875 : (isnan(_3875) ? 1.0 : min(_3875, 1.0));
        float _1280 = ((((1.0 - _1271) * (_1266 + 2.0)) * exp2(log2(isnan(1.0) ? _3853 : (isnan(_3853) ? 1.0 : min(_3853, 1.0))) * (_1266 + 1.0))) + _1271) * _1152;
        _1288 = _1119;
        _1290 = _1118;
        _1291 = _1117;
        _1292 = _1129;
        _1293 = _1128;
        _1294 = _1127;
        _1295 = _1139;
        _1296 = _1138;
        _1297 = _1137;
        _1298 = _1152;
        _1299 = _1151;
        _1300 = _1150;
        _1301 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1196 : (isnan(_1196) ? 0.0 : max(_1196, 0.0)));
        _1302 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1238 : (isnan(_1238) ? 0.0 : max(_1238, 0.0)));
        _1303 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1280 : (isnan(_1280) ? 0.0 : max(_1280, 0.0)));
    }
    else
    {
        _1288 = _1289;
        _1290 = _1289;
        _1291 = _1289;
        _1292 = _1289;
        _1293 = _1289;
        _1294 = _1289;
        _1295 = _1289;
        _1296 = _1289;
        _1297 = _1289;
        _1298 = _1289;
        _1299 = _1289;
        _1300 = _1289;
        _1301 = 0.0;
        _1302 = 0.0;
        _1303 = 0.0;
    }
    float _1598;
    float _1599;
    float _1600;
    float _1601;
    float _1602;
    float _1603;
    float _1604;
    float _1605;
    float _1606;
    float _1607;
    float _1608;
    float _1609;
    float _1610;
    float _1611;
    float _1612;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1329 = fma(_986, cbModelParam._m0[30u].z, fma(_982, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _978));
        float _1333 = fma(_986, cbModelParam._m0[31u].z, fma(_982, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _978));
        float _1337 = fma(_986, cbModelParam._m0[32u].z, fma(_982, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _978));
        float _1360 = _978 + _748;
        float _1361 = _982 + _749;
        float _1362 = _986 + _750;
        float _1372 = fma(_1362, cbModelParam._m0[30u].z, fma(_1361, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1360)) - _1329;
        float _1373 = fma(_1362, cbModelParam._m0[31u].z, fma(_1361, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1360)) - _1333;
        float _1374 = fma(_1362, cbModelParam._m0[32u].z, fma(_1361, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1360)) - _1337;
        float _1378 = inversesqrt(dot(vec3(_1372, _1373, _1374), vec3(_1372, _1373, _1374)));
        float _1391 = ((_1378 * _1372) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1329 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1392 = ((_1378 * _1373) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1333 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1393 = ((_1378 * _1374) / cbModelParam._m0[35u].z) + ((((((_1337 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1395 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1391, _1392, _1393), 0.0);
        vec4 _1402 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1391, _1392, _1393), 0.0);
        vec4 _1409 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1391, _1392, _1393), 0.0);
        vec4 _1416 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1391, _1392, _1393), 0.0);
        float _1428 = exp2((_1395.w + (-0.5)) * 20.0) * 2.0;
        float _1429 = _1428 * (_1395.x + (-0.5));
        float _1430 = _1428 * (_1395.y + (-0.5));
        float _1431 = _1428 * (_1395.z + (-0.5));
        float _1438 = exp2((_1402.w + (-0.5)) * 20.0) * 2.0;
        float _1439 = _1438 * (_1402.x + (-0.5));
        float _1440 = _1438 * (_1402.y + (-0.5));
        float _1441 = _1438 * (_1402.z + (-0.5));
        float _1448 = exp2((_1409.w + (-0.5)) * 20.0) * 2.0;
        float _1449 = _1448 * (_1409.x + (-0.5));
        float _1450 = _1448 * (_1409.y + (-0.5));
        float _1451 = _1448 * (_1409.z + (-0.5));
        float _1458 = exp2((_1416.w + (-0.5)) * 20.0) * 2.0;
        float _1459 = _1458 * (_1416.x + (-0.5));
        float _1460 = _1458 * (_1416.y + (-0.5));
        float _1461 = _1458 * (_1416.z + (-0.5));
        float _1462 = isnan(0.0) ? _1459 : (isnan(_1459) ? 0.0 : max(_1459, 0.0));
        float _1463 = isnan(0.0) ? _1460 : (isnan(_1460) ? 0.0 : max(_1460, 0.0));
        float _1464 = isnan(0.0) ? _1461 : (isnan(_1461) ? 0.0 : max(_1461, 0.0));
        float _1465 = _1429 * 0.5;
        float _1466 = _1439 * 0.5;
        float _1467 = _1449 * 0.5;
        float _1468 = dot(vec3(_1465, _1466, _1467), vec3(_1465, _1466, _1467));
        float _1473 = (_1468 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1468);
        float _1481 = (dot(vec3(_748, _749, _750), vec3(_1473 * _1465, _1473 * _1466, _1473 * _1467)) + 1.0) * 0.5;
        float _3916 = isnan(0.0) ? _1481 : (isnan(_1481) ? 0.0 : max(_1481, 0.0));
        float _1490 = sqrt(((_1466 * _1466) + (_1465 * _1465)) + (_1467 * _1467)) / (_1462 + 9.9999997473787516355514526367188e-06);
        float _3927 = isnan(0.0) ? _1490 : (isnan(_1490) ? 0.0 : max(_1490, 0.0));
        float _1491 = isnan(1.0) ? _3927 : (isnan(_3927) ? 1.0 : min(_3927, 1.0));
        float _1492 = _1491 * 2.0;
        float _1496 = (1.0 - _1491) / (_1491 + 1.0);
        float _3938 = isnan(0.0) ? _1496 : (isnan(_1496) ? 0.0 : max(_1496, 0.0));
        float _1497 = isnan(1.0) ? _3938 : (isnan(_3938) ? 1.0 : min(_3938, 1.0));
        float _1506 = ((((1.0 - _1497) * (_1492 + 2.0)) * exp2(log2(isnan(1.0) ? _3916 : (isnan(_3916) ? 1.0 : min(_3916, 1.0))) * (_1492 + 1.0))) + _1497) * _1462;
        float _1507 = _1430 * 0.5;
        float _1508 = _1440 * 0.5;
        float _1509 = _1450 * 0.5;
        float _1510 = dot(vec3(_1507, _1508, _1509), vec3(_1507, _1508, _1509));
        float _1515 = (_1510 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1510);
        float _1523 = (dot(vec3(_748, _749, _750), vec3(_1515 * _1507, _1515 * _1508, _1515 * _1509)) + 1.0) * 0.5;
        float _3949 = isnan(0.0) ? _1523 : (isnan(_1523) ? 0.0 : max(_1523, 0.0));
        float _1532 = sqrt(((_1508 * _1508) + (_1507 * _1507)) + (_1509 * _1509)) / (_1463 + 9.9999997473787516355514526367188e-06);
        float _3960 = isnan(0.0) ? _1532 : (isnan(_1532) ? 0.0 : max(_1532, 0.0));
        float _1533 = isnan(1.0) ? _3960 : (isnan(_3960) ? 1.0 : min(_3960, 1.0));
        float _1534 = _1533 * 2.0;
        float _1538 = (1.0 - _1533) / (_1533 + 1.0);
        float _3971 = isnan(0.0) ? _1538 : (isnan(_1538) ? 0.0 : max(_1538, 0.0));
        float _1539 = isnan(1.0) ? _3971 : (isnan(_3971) ? 1.0 : min(_3971, 1.0));
        float _1548 = ((((1.0 - _1539) * (_1534 + 2.0)) * exp2(log2(isnan(1.0) ? _3949 : (isnan(_3949) ? 1.0 : min(_3949, 1.0))) * (_1534 + 1.0))) + _1539) * _1463;
        float _1549 = _1431 * 0.5;
        float _1550 = _1441 * 0.5;
        float _1551 = _1451 * 0.5;
        float _1552 = dot(vec3(_1549, _1550, _1551), vec3(_1549, _1550, _1551));
        float _1557 = (_1552 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1552);
        float _1565 = (dot(vec3(_748, _749, _750), vec3(_1557 * _1549, _1557 * _1550, _1557 * _1551)) + 1.0) * 0.5;
        float _3982 = isnan(0.0) ? _1565 : (isnan(_1565) ? 0.0 : max(_1565, 0.0));
        float _1574 = sqrt(((_1550 * _1550) + (_1549 * _1549)) + (_1551 * _1551)) / (_1464 + 9.9999997473787516355514526367188e-06);
        float _3993 = isnan(0.0) ? _1574 : (isnan(_1574) ? 0.0 : max(_1574, 0.0));
        float _1575 = isnan(1.0) ? _3993 : (isnan(_3993) ? 1.0 : min(_3993, 1.0));
        float _1576 = _1575 * 2.0;
        float _1580 = (1.0 - _1575) / (_1575 + 1.0);
        float _4004 = isnan(0.0) ? _1580 : (isnan(_1580) ? 0.0 : max(_1580, 0.0));
        float _1581 = isnan(1.0) ? _4004 : (isnan(_4004) ? 1.0 : min(_4004, 1.0));
        float _1590 = ((((1.0 - _1581) * (_1576 + 2.0)) * exp2(log2(isnan(1.0) ? _3982 : (isnan(_3982) ? 1.0 : min(_3982, 1.0))) * (_1576 + 1.0))) + _1581) * _1464;
        _1598 = _1431;
        _1599 = _1430;
        _1600 = _1429;
        _1601 = _1441;
        _1602 = _1440;
        _1603 = _1439;
        _1604 = _1451;
        _1605 = _1450;
        _1606 = _1449;
        _1607 = _1464;
        _1608 = _1463;
        _1609 = _1462;
        _1610 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1506 : (isnan(_1506) ? 0.0 : max(_1506, 0.0)));
        _1611 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1548 : (isnan(_1548) ? 0.0 : max(_1548, 0.0)));
        _1612 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1590 : (isnan(_1590) ? 0.0 : max(_1590, 0.0)));
    }
    else
    {
        _1598 = _1289;
        _1599 = _1289;
        _1600 = _1289;
        _1601 = _1289;
        _1602 = _1289;
        _1603 = _1289;
        _1604 = _1289;
        _1605 = _1289;
        _1606 = _1289;
        _1607 = _1289;
        _1608 = _1289;
        _1609 = _1289;
        _1610 = 0.0;
        _1611 = 0.0;
        _1612 = 0.0;
    }
    float _1622 = (cbModelParam._m0[1u].x * (_1610 - _1301)) + _1301;
    float _1623 = (cbModelParam._m0[1u].x * (_1611 - _1302)) + _1302;
    float _1624 = (cbModelParam._m0[1u].x * (_1612 - _1303)) + _1303;
    float _1645 = fma(_1624, cbSceneParam._m0[89u].z, fma(_1623, cbSceneParam._m0[89u].y, _1622 * cbSceneParam._m0[89u].x));
    float _1648 = fma(_1624, cbSceneParam._m0[90u].z, fma(_1623, cbSceneParam._m0[90u].y, _1622 * cbSceneParam._m0[90u].x));
    float _1651 = fma(_1624, cbSceneParam._m0[91u].z, fma(_1623, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1622));
    float _1666 = _922 * 0.5;
    float _1667 = _923 * 0.5;
    float _1668 = _924 * 0.5;
    float _1669 = dot(vec4(_1666, _1667, _1668, 1.0), vec4(_1600, _1603, _1606, _1609));
    float _1672 = dot(vec4(_1666, _1667, _1668, 1.0), vec4(_1599, _1602, _1605, _1608));
    float _1675 = dot(vec4(_1666, _1667, _1668, 1.0), vec4(_1598, _1601, _1604, _1607));
    float _1709;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1682 = dot(vec4(_1666, _1667, _1668, 1.0), vec4(_1288, _1292, _1295, _1298));
        float _1686 = dot(vec4(_1666, _1667, _1668, 1.0), vec4(_1290, _1293, _1296, _1299));
        float _1690 = dot(vec4(_1666, _1667, _1668, 1.0), vec4(_1291, _1294, _1297, _1300));
        float _1697 = dot(vec4(cbModelParam._m0[39u]), vec4(_1666, _1667, _1668, 1.0));
        _1709 = dot(vec3(isnan(0.0) ? _1690 : (isnan(_1690) ? 0.0 : max(_1690, 0.0)), isnan(0.0) ? _1686 : (isnan(_1686) ? 0.0 : max(_1686, 0.0)), isnan(0.0) ? _1682 : (isnan(_1682) ? 0.0 : max(_1682, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1697) ? 0.0 : (isnan(0.0) ? _1697 : max(0.0, _1697))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1709 = 1.0;
    }
    float _1720;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1711 = dot(vec4(cbModelParam._m0[40u]), vec4(_1666, _1667, _1668, 1.0));
        _1720 = dot(vec3(isnan(0.0) ? _1669 : (isnan(_1669) ? 0.0 : max(_1669, 0.0)), isnan(0.0) ? _1672 : (isnan(_1672) ? 0.0 : max(_1672, 0.0)), isnan(0.0) ? _1675 : (isnan(_1675) ? 0.0 : max(_1675, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1711) ? 0.0 : (isnan(0.0) ? _1711 : max(0.0, _1711))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1720 = 1.0;
    }
    float _1724 = (_1720 * cbModelParam._m0[1u].x) + (_1709 * (1.0 - cbModelParam._m0[1u].x));
    float _1734 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _751);
    float _1735 = isnan(_1734) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1734 : min(cbModelParam._m0[25u].z, _1734));
    float _1815;
    float _1817;
    float _1819;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1782 = fma(_986, cbModelParam._m0[13u].z, fma(_982, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _978)) + cbModelParam._m0[13u].w;
        float _1786 = fma(_986, cbModelParam._m0[14u].z, fma(_982, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _978)) + cbModelParam._m0[14u].w;
        float _1790 = fma(_986, cbModelParam._m0[15u].z, fma(_982, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _978)) + cbModelParam._m0[15u].w;
        float _1793 = fma(_924, cbModelParam._m0[13u].z, fma(_923, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _922));
        float _1796 = fma(_924, cbModelParam._m0[14u].z, fma(_923, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _922));
        float _1799 = fma(_924, cbModelParam._m0[15u].z, fma(_923, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _922));
        float _1827;
        if (_1793 > 0.0)
        {
            _1827 = abs((1.0 - _1782) / _1793);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1793 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1782 + 1.0) / _1793);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1827 = frontier_phi_14_12_ladder;
        }
        float _2032;
        if (_1796 > 0.0)
        {
            _2032 = abs((1.0 - _1786) / _1796);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1796 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1786 + 1.0) / _1796);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2032 = frontier_phi_23_19_ladder;
        }
        float _2286;
        if (_1799 > 0.0)
        {
            _2286 = abs((1.0 - _1790) / _1799);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1799 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1790 + 1.0) / _1799);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2286 = frontier_phi_35_30_ladder;
        }
        float _2288 = isnan(_2032) ? _1827 : (isnan(_1827) ? _2032 : min(_1827, _2032));
        float _2289 = isnan(_2286) ? _2288 : (isnan(_2288) ? _2286 : min(_2288, _2286));
        float _2293 = (_2289 * _1793) + _1782;
        float _2294 = (_2289 * _1796) + _1786;
        float _2295 = (_2289 * _1799) + _1790;
        float _2296 = _2289 * 9.9999997473787516355514526367188e-05;
        float _2298 = (-1.0) - _2296;
        float _2300 = _2296 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2295 > _2300) || ((_2295 < _2298) || ((_2294 > _2300) || ((_2294 < _2298) || ((_2293 < _2298) || (_2293 > _2300))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2423 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2295, cbModelParam._m0[9u].z, fma(_2294, cbModelParam._m0[9u].y, _2293 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2295, cbModelParam._m0[10u].z, fma(_2294, cbModelParam._m0[10u].y, _2293 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2295, cbModelParam._m0[11u].z, fma(_2294, cbModelParam._m0[11u].y, _2293 * cbModelParam._m0[11u].x))), _1735);
            frontier_phi_13_35_ladder = _2423.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2423.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2423.x * cbModelParam._m0[1u].y;
        }
        _1815 = frontier_phi_13_35_ladder_2;
        _1817 = frontier_phi_13_35_ladder_1;
        _1819 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1803 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_922, _923, _924), _1735);
        _1815 = _1803.x * cbModelParam._m0[1u].y;
        _1817 = _1803.y * cbModelParam._m0[1u].y;
        _1819 = _1803.z * cbModelParam._m0[1u].y;
    }
    float _1823 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _751);
    float _1824 = isnan(_1823) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1823 : min(cbModelParam._m0[25u].w, _1823));
    float _1915;
    float _1917;
    float _1919;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1879 = fma(_986, cbModelParam._m0[21u].z, fma(_982, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _978)) + cbModelParam._m0[21u].w;
        float _1883 = fma(_986, cbModelParam._m0[22u].z, fma(_982, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _978)) + cbModelParam._m0[22u].w;
        float _1887 = fma(_986, cbModelParam._m0[23u].z, fma(_982, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _978)) + cbModelParam._m0[23u].w;
        float _1890 = fma(_924, cbModelParam._m0[21u].z, fma(_923, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _922));
        float _1893 = fma(_924, cbModelParam._m0[22u].z, fma(_923, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _922));
        float _1896 = fma(_924, cbModelParam._m0[23u].z, fma(_923, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _922));
        float _2037;
        if (_1890 > 0.0)
        {
            _2037 = abs((1.0 - _1879) / _1890);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1890 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1879 + 1.0) / _1890);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2037 = frontier_phi_25_21_ladder;
        }
        float _2313;
        if (_1893 > 0.0)
        {
            _2313 = abs((1.0 - _1883) / _1893);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1893 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1883 + 1.0) / _1893);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2313 = frontier_phi_37_32_ladder;
        }
        float _2526;
        if (_1896 > 0.0)
        {
            _2526 = abs((1.0 - _1887) / _1896);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1896 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1887 + 1.0) / _1896);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2526 = frontier_phi_46_43_ladder;
        }
        float _2528 = isnan(_2313) ? _2037 : (isnan(_2037) ? _2313 : min(_2037, _2313));
        float _2529 = isnan(_2526) ? _2528 : (isnan(_2528) ? _2526 : min(_2528, _2526));
        float _2533 = (_2529 * _1890) + _1879;
        float _2534 = (_2529 * _1893) + _1883;
        float _2535 = (_2529 * _1896) + _1887;
        float _2536 = _2529 * 9.9999997473787516355514526367188e-05;
        float _2537 = (-1.0) - _2536;
        float _2539 = _2536 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2535 > _2539) || ((_2535 < _2537) || ((_2534 > _2539) || ((_2534 < _2537) || ((_2533 < _2537) || (_2533 > _2539))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2734 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2535, cbModelParam._m0[17u].z, fma(_2534, cbModelParam._m0[17u].y, _2533 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2535, cbModelParam._m0[18u].z, fma(_2534, cbModelParam._m0[18u].y, _2533 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2535, cbModelParam._m0[19u].z, fma(_2534, cbModelParam._m0[19u].y, _2533 * cbModelParam._m0[19u].x))), _1824);
            frontier_phi_22_46_ladder = _2734.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2734.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2734.x * cbModelParam._m0[1u].z;
        }
        _1915 = frontier_phi_22_46_ladder_2;
        _1917 = frontier_phi_22_46_ladder_1;
        _1919 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1899 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_922, _923, _924), _1824);
        _1915 = _1899.x * cbModelParam._m0[1u].z;
        _1917 = _1899.y * cbModelParam._m0[1u].z;
        _1919 = _1899.z * cbModelParam._m0[1u].z;
    }
    float _1932 = (((_949 * _899) + _950) * _914) * ((cbModelParam._m0[1u].w * (_1915 - _1815)) + _1815);
    float _1934 = (((_949 * _901) + _950) * _914) * ((cbModelParam._m0[1u].w * (_1917 - _1817)) + _1817);
    float _1936 = (((_949 * _902) + _950) * _914) * ((cbModelParam._m0[1u].w * (_1919 - _1819)) + _1819);
    float _1939 = fma(_1936, cbSceneParam._m0[89u].z, fma(_1934, cbSceneParam._m0[89u].y, _1932 * cbSceneParam._m0[89u].x));
    float _1942 = fma(_1936, cbSceneParam._m0[90u].z, fma(_1934, cbSceneParam._m0[90u].y, _1932 * cbSceneParam._m0[90u].x));
    float _1945 = fma(_1936, cbSceneParam._m0[91u].z, fma(_1934, cbSceneParam._m0[91u].y, _1932 * cbSceneParam._m0[91u].x));
    uvec4 _1955 = floatBitsToUint(cbInstanceData._m0[_874 + 5u]);
    uint _1957 = _1955.x * 14u;
    uint _1958 = _1957 + 13u;
    float _1965 = _914 + (-1.0);
    float _1970 = (cbLight._m0[_1958].x * _1965) + 1.0;
    float _1971 = (cbLight._m0[_1958].y * _1965) + 1.0;
    float _1972 = (cbLight._m0[_1958].z * _1965) + 1.0;
    float _1973 = (cbLight._m0[_1958].w * _1965) + 1.0;
    uint _1974 = _1957 + 5u;
    float _1980 = isnan(1.0) ? _1971 : (isnan(_1971) ? 1.0 : min(_1971, 1.0));
    uint _1984 = _1957 + 4u;
    float _1991 = isnan(1.0) ? _1970 : (isnan(_1970) ? 1.0 : min(_1970, 1.0));
    uint _1995 = _1957 | 1u;
    float _2006 = dot(vec3(cbLight._m0[_1957].xyz), vec3(_748, _749, _750));
    float _2009 = dot(vec3(cbLight._m0[_1995].xyz), vec3(_748, _749, _750));
    float _4140 = isnan(0.0) ? _2006 : (isnan(_2006) ? 0.0 : max(_2006, 0.0));
    float _4151 = isnan(0.0) ? _2009 : (isnan(_2009) ? 0.0 : max(_2009, 0.0));
    float _2014 = (isnan(1.0) ? _4140 : (isnan(_4140) ? 1.0 : min(_4140, 1.0))) * 0.3183098733425140380859375;
    float _2016 = (isnan(1.0) ? _4151 : (isnan(_4151) ? 1.0 : min(_4151, 1.0))) * 0.3183098733425140380859375;
    float _2023 = ((cbLight._m0[_1974].x * _1980) * _2016) + ((cbLight._m0[_1984].x * _1991) * _2014);
    float _2024 = ((_1980 * cbLight._m0[_1974].y) * _2016) + ((_1991 * cbLight._m0[_1984].y) * _2014);
    float _2025 = ((_1980 * cbLight._m0[_1974].z) * _2016) + ((_1991 * cbLight._m0[_1984].z) * _2014);
    uvec4 _2029 = floatBitsToUint(cbLight._m0[_1957 + 12u]);
    bool _2031 = _2029.x == 0u;
    float _2042;
    float _2044;
    float _2046;
    if (_2031)
    {
        _2042 = _2023;
        _2044 = _2024;
        _2046 = _2025;
    }
    else
    {
        uint _2050 = _1957 + 6u;
        float _2066 = (dot(vec3(cbLight._m0[_1957 + 2u].xyz), vec3(_748, _749, _750)) * 0.5) + 0.5;
        float _2067 = _2066 * _2066;
        float _4162 = isnan(0.0) ? _2067 : (isnan(_2067) ? 0.0 : max(_2067, 0.0));
        float _2068 = isnan(1.0) ? _4162 : (isnan(_4162) ? 1.0 : min(_4162, 1.0));
        float _2069 = isnan(1.0) ? _1972 : (isnan(_1972) ? 1.0 : min(_1972, 1.0));
        _2042 = (((cbLight._m0[_2050].x * 0.3183098733425140380859375) * _2068) * _2069) + _2023;
        _2044 = (((cbLight._m0[_2050].y * 0.3183098733425140380859375) * _2068) * _2069) + _2024;
        _2046 = (((cbLight._m0[_2050].z * 0.3183098733425140380859375) * _2068) * _2069) + _2025;
    }
    bool _2049 = _2029.y == 0u;
    float _2087;
    float _2089;
    float _2091;
    if (_2049)
    {
        _2087 = _2042;
        _2089 = _2044;
        _2091 = _2046;
    }
    else
    {
        uint _2257 = _1957 + 7u;
        float _2273 = (dot(vec3(cbLight._m0[_1957 + 3u].xyz), vec3(_748, _749, _750)) * 0.5) + 0.5;
        float _2274 = _2273 * _2273;
        float _4178 = isnan(0.0) ? _2274 : (isnan(_2274) ? 0.0 : max(_2274, 0.0));
        float _2275 = isnan(1.0) ? _4178 : (isnan(_4178) ? 1.0 : min(_4178, 1.0));
        float _2276 = isnan(1.0) ? _1973 : (isnan(_1973) ? 1.0 : min(_1973, 1.0));
        _2087 = (((cbLight._m0[_2257].x * 0.3183098733425140380859375) * _2275) * _2276) + _2042;
        _2089 = (((cbLight._m0[_2257].y * 0.3183098733425140380859375) * _2275) * _2276) + _2044;
        _2091 = (((cbLight._m0[_2257].z * 0.3183098733425140380859375) * _2275) * _2276) + _2046;
    }
    uint _2094 = _1957 + 8u;
    float _2107 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1957].w)) * _751) * 0.949999988079071044921875);
    float _2108 = _2107 * _2107;
    float _2109 = cbLight._m0[_1957].x + _828;
    float _2110 = cbLight._m0[_1957].y + _829;
    float _2111 = cbLight._m0[_1957].z + _830;
    float _2115 = inversesqrt(dot(vec3(_2109, _2110, _2111), vec3(_2109, _2110, _2111)));
    float _2116 = _2115 * _2109;
    float _2117 = _2115 * _2110;
    float _2118 = _2115 * _2111;
    float _2119 = dot(vec3(_748, _749, _750), vec3(cbLight._m0[_1957].xyz));
    float _4194 = isnan(0.0) ? _2119 : (isnan(_2119) ? 0.0 : max(_2119, 0.0));
    float _2122 = isnan(1.0) ? _4194 : (isnan(_4194) ? 1.0 : min(_4194, 1.0));
    float _4205 = isnan(0.0) ? _915 : (isnan(_915) ? 0.0 : max(_915, 0.0));
    float _2123 = isnan(1.0) ? _4205 : (isnan(_4205) ? 1.0 : min(_4205, 1.0));
    float _2124 = dot(vec3(_748, _749, _750), vec3(_2116, _2117, _2118));
    float _4216 = isnan(0.0) ? _2124 : (isnan(_2124) ? 0.0 : max(_2124, 0.0));
    float _2127 = isnan(1.0) ? _4216 : (isnan(_4216) ? 1.0 : min(_4216, 1.0));
    float _2128 = dot(vec3(cbLight._m0[_1957].xyz), vec3(_2116, _2117, _2118));
    float _4227 = isnan(0.0) ? _2128 : (isnan(_2128) ? 0.0 : max(_2128, 0.0));
    float _2132 = _2108 * _2108;
    float _2136 = ((_2127 * _2127) * (_2132 + (-1.0))) + 1.0;
    float _2144 = exp2(log2(1.0 - (isnan(1.0) ? _4227 : (isnan(_4227) ? 1.0 : min(_4227, 1.0)))) * 5.0);
    float _2145 = 0.959999978542327880859375 - _896;
    float _2147 = 0.959999978542327880859375 - _897;
    float _2148 = 0.959999978542327880859375 - _898;
    float _2155 = 1.0 - _2108;
    float _2166 = (0.5 / (((_2123 * ((_2122 * _2155) + _2108)) + 9.9999999392252902907785028219223e-09) + (((_2123 * _2155) + _2108) * _2122))) * _2122;
    float _4238 = isnan(0.0) ? _2166 : (isnan(_2166) ? 0.0 : max(_2166, 0.0));
    float _2168 = (isnan(1.0) ? _4238 : (isnan(_4238) ? 1.0 : min(_4238, 1.0))) * (_2132 / ((_2136 * _2136) * 3.141590118408203125));
    uint _2179 = _1957 + 9u;
    float _2190 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1995].w)) * _751) * 0.949999988079071044921875);
    float _2191 = _2190 * _2190;
    float _2192 = cbLight._m0[_1995].x + _828;
    float _2193 = cbLight._m0[_1995].y + _829;
    float _2194 = cbLight._m0[_1995].z + _830;
    float _2198 = inversesqrt(dot(vec3(_2192, _2193, _2194), vec3(_2192, _2193, _2194)));
    float _2199 = _2198 * _2192;
    float _2200 = _2198 * _2193;
    float _2201 = _2198 * _2194;
    float _2202 = dot(vec3(_748, _749, _750), vec3(cbLight._m0[_1995].xyz));
    float _4249 = isnan(0.0) ? _2202 : (isnan(_2202) ? 0.0 : max(_2202, 0.0));
    float _2205 = isnan(1.0) ? _4249 : (isnan(_4249) ? 1.0 : min(_4249, 1.0));
    float _2206 = dot(vec3(_748, _749, _750), vec3(_2199, _2200, _2201));
    float _4260 = isnan(0.0) ? _2206 : (isnan(_2206) ? 0.0 : max(_2206, 0.0));
    float _2209 = isnan(1.0) ? _4260 : (isnan(_4260) ? 1.0 : min(_4260, 1.0));
    float _2210 = dot(vec3(cbLight._m0[_1995].xyz), vec3(_2199, _2200, _2201));
    float _4271 = isnan(0.0) ? _2210 : (isnan(_2210) ? 0.0 : max(_2210, 0.0));
    float _2214 = _2191 * _2191;
    float _2218 = ((_2209 * _2209) * (_2214 + (-1.0))) + 1.0;
    float _2225 = exp2(log2(1.0 - (isnan(1.0) ? _4271 : (isnan(_4271) ? 1.0 : min(_4271, 1.0)))) * 5.0);
    float _2232 = 1.0 - _2191;
    float _2242 = (0.5 / (((_2123 * ((_2205 * _2232) + _2191)) + 9.9999999392252902907785028219223e-09) + (((_2123 * _2232) + _2191) * _2205))) * _2205;
    float _4282 = isnan(0.0) ? _2242 : (isnan(_2242) ? 0.0 : max(_2242, 0.0));
    float _2244 = (isnan(1.0) ? _4282 : (isnan(_4282) ? 1.0 : min(_4282, 1.0))) * (_2214 / ((_2218 * _2218) * 3.141590118408203125));
    float _2254 = (((((_2225 * _2145) + _899) * cbLight._m0[_2179].x) * _2244) * _1980) + (((((_2144 * _2145) + _899) * cbLight._m0[_2094].x) * _2168) * _1991);
    float _2255 = (((((_2225 * _2147) + _901) * cbLight._m0[_2179].y) * _2244) * _1980) + (((((_2144 * _2147) + _901) * cbLight._m0[_2094].y) * _2168) * _1991);
    float _2256 = (((((_2225 * _2148) + _902) * cbLight._m0[_2179].z) * _2244) * _1980) + (((((_2144 * _2148) + _902) * cbLight._m0[_2094].z) * _2168) * _1991);
    float _2318;
    float _2320;
    float _2322;
    if (_2031)
    {
        _2318 = _2254;
        _2320 = _2255;
        _2322 = _2256;
    }
    else
    {
        uint _2324 = _1957 + 2u;
        uint _2328 = _1957 + 10u;
        float _2342 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2324].w)) * _751) * 0.949999988079071044921875);
        float _2343 = _2342 * _2342;
        float _2344 = cbLight._m0[_2324].x + _828;
        float _2345 = cbLight._m0[_2324].y + _829;
        float _2346 = cbLight._m0[_2324].z + _830;
        float _2350 = inversesqrt(dot(vec3(_2344, _2345, _2346), vec3(_2344, _2345, _2346)));
        float _2351 = _2350 * _2344;
        float _2352 = _2350 * _2345;
        float _2353 = _2350 * _2346;
        float _2354 = dot(vec3(_748, _749, _750), vec3(cbLight._m0[_2324].xyz));
        float _4293 = isnan(0.0) ? _2354 : (isnan(_2354) ? 0.0 : max(_2354, 0.0));
        float _2357 = isnan(1.0) ? _4293 : (isnan(_4293) ? 1.0 : min(_4293, 1.0));
        float _2358 = dot(vec3(_748, _749, _750), vec3(_2351, _2352, _2353));
        float _4304 = isnan(0.0) ? _2358 : (isnan(_2358) ? 0.0 : max(_2358, 0.0));
        float _2361 = isnan(1.0) ? _4304 : (isnan(_4304) ? 1.0 : min(_4304, 1.0));
        float _2362 = dot(vec3(cbLight._m0[_2324].xyz), vec3(_2351, _2352, _2353));
        float _4315 = isnan(0.0) ? _2362 : (isnan(_2362) ? 0.0 : max(_2362, 0.0));
        float _2366 = _2343 * _2343;
        float _2370 = ((_2361 * _2361) * (_2366 + (-1.0))) + 1.0;
        float _2377 = exp2(log2(1.0 - (isnan(1.0) ? _4315 : (isnan(_4315) ? 1.0 : min(_4315, 1.0)))) * 5.0);
        float _2384 = 1.0 - _2343;
        float _2394 = (0.5 / (((_2123 * ((_2357 * _2384) + _2343)) + 9.9999999392252902907785028219223e-09) + (((_2123 * _2384) + _2343) * _2357))) * _2357;
        float _4326 = isnan(0.0) ? _2394 : (isnan(_2394) ? 0.0 : max(_2394, 0.0));
        float _2396 = (isnan(1.0) ? _4326 : (isnan(_4326) ? 1.0 : min(_4326, 1.0))) * (_2366 / ((_2370 * _2370) * 3.141590118408203125));
        float _2397 = isnan(1.0) ? _1972 : (isnan(_1972) ? 1.0 : min(_1972, 1.0));
        _2318 = (((((_2377 * _2145) + _899) * cbLight._m0[_2328].x) * _2396) * _2397) + _2254;
        _2320 = (((((_2377 * _2147) + _901) * cbLight._m0[_2328].y) * _2396) * _2397) + _2255;
        _2322 = (((((_2377 * _2148) + _902) * cbLight._m0[_2328].z) * _2396) * _2397) + _2256;
    }
    float _2432;
    float _2434;
    float _2436;
    if (_2049)
    {
        _2432 = _2318;
        _2434 = _2320;
        _2436 = _2322;
    }
    else
    {
        uint _2443 = _1957 + 3u;
        uint _2447 = _1957 + 11u;
        float _2461 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2443].w)) * _751) * 0.949999988079071044921875);
        float _2462 = _2461 * _2461;
        float _2463 = cbLight._m0[_2443].x + _828;
        float _2464 = cbLight._m0[_2443].y + _829;
        float _2465 = cbLight._m0[_2443].z + _830;
        float _2469 = inversesqrt(dot(vec3(_2463, _2464, _2465), vec3(_2463, _2464, _2465)));
        float _2470 = _2469 * _2463;
        float _2471 = _2469 * _2464;
        float _2472 = _2469 * _2465;
        float _2473 = dot(vec3(_748, _749, _750), vec3(cbLight._m0[_2443].xyz));
        float _4342 = isnan(0.0) ? _2473 : (isnan(_2473) ? 0.0 : max(_2473, 0.0));
        float _2476 = isnan(1.0) ? _4342 : (isnan(_4342) ? 1.0 : min(_4342, 1.0));
        float _2477 = dot(vec3(_748, _749, _750), vec3(_2470, _2471, _2472));
        float _4353 = isnan(0.0) ? _2477 : (isnan(_2477) ? 0.0 : max(_2477, 0.0));
        float _2480 = isnan(1.0) ? _4353 : (isnan(_4353) ? 1.0 : min(_4353, 1.0));
        float _2481 = dot(vec3(cbLight._m0[_2443].xyz), vec3(_2470, _2471, _2472));
        float _4364 = isnan(0.0) ? _2481 : (isnan(_2481) ? 0.0 : max(_2481, 0.0));
        float _2485 = _2462 * _2462;
        float _2489 = ((_2480 * _2480) * (_2485 + (-1.0))) + 1.0;
        float _2496 = exp2(log2(1.0 - (isnan(1.0) ? _4364 : (isnan(_4364) ? 1.0 : min(_4364, 1.0)))) * 5.0);
        float _2503 = 1.0 - _2462;
        float _2513 = (0.5 / (((_2123 * ((_2476 * _2503) + _2462)) + 9.9999999392252902907785028219223e-09) + (((_2123 * _2503) + _2462) * _2476))) * _2476;
        float _4375 = isnan(0.0) ? _2513 : (isnan(_2513) ? 0.0 : max(_2513, 0.0));
        float _2515 = (isnan(1.0) ? _4375 : (isnan(_4375) ? 1.0 : min(_4375, 1.0))) * (_2485 / ((_2489 * _2489) * 3.141590118408203125));
        float _2516 = isnan(1.0) ? _1973 : (isnan(_1973) ? 1.0 : min(_1973, 1.0));
        _2432 = (((((_2496 * _2145) + _899) * cbLight._m0[_2447].x) * _2515) * _2516) + _2318;
        _2434 = (((((_2496 * _2147) + _901) * cbLight._m0[_2447].y) * _2515) * _2516) + _2320;
        _2436 = (((((_2496 * _2148) + _902) * cbLight._m0[_2447].z) * _2515) * _2516) + _2322;
    }
    float _2651;
    float _2653;
    float _2655;
    float _2657;
    float _2659;
    float _2661;
    if (_1955.y == 0u)
    {
        float _2591 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2592 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2591;
        float _2593 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2591;
        float _2594 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2591;
        uvec4 _2606 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2607 = _2606.x;
        uint _2618 = uint((float(_2606.y) * floor(float(uint(cbSceneParam._m0[85u].y * _837) / _2607))) + floor(float(uint(cbSceneParam._m0[85u].x * _836) / _2607)));
        float _2628 = (log2(_2594 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2629 = isnan(0.0) ? _2628 : (isnan(_2628) ? 0.0 : max(_2628, 0.0));
        uint _2632 = uint(isnan(14.0) ? _2629 : (isnan(_2629) ? 14.0 : min(_2629, 14.0)));
        uvec4 _2637 = texelFetch(g_lightClusterGridBuffer, int(((_2632 << 2u) + (_2618 << 6u)) >> 2u));
        uint _2638 = _2637.x;
        uint _2639 = _2606.z;
        float _2739;
        float _2741;
        float _2743;
        float _2745;
        float _2747;
        float _2749;
        if (((((1u << ((_2639 >> 4u) & 15u)) + 4294967295u) & _2638) == 0u) || ((_2639 & 240u) == 0u))
        {
            _2739 = 0.0;
            _2741 = 0.0;
            _2743 = 0.0;
            _2745 = 0.0;
            _2747 = 0.0;
            _2749 = 0.0;
        }
        else
        {
            float _2740;
            float _2742;
            float _2744;
            float _2746;
            float _2748;
            float _2750;
            float _2883 = 0.0;
            float _2884 = 0.0;
            float _2885 = 0.0;
            float _2886 = 0.0;
            float _2887 = 0.0;
            float _2888 = 0.0;
            uint _2889 = 0u;
            uint _2898;
            bool _2899;
            for (;;)
            {
                _2898 = texelFetch(g_lightClassification, int((((_2632 << 5u) + (_2618 << 9u)) + (_2889 << 2u)) >> 2u)).x;
                _2899 = _2898 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2899)
                {
                    frontier_phi_61_pred = _2883;
                    frontier_phi_61_pred_1 = _2888;
                    frontier_phi_61_pred_2 = _2887;
                    frontier_phi_61_pred_3 = _2886;
                    frontier_phi_61_pred_4 = _2885;
                    frontier_phi_61_pred_5 = _2884;
                }
                else
                {
                    float _3007;
                    float _3008;
                    float _3009;
                    float _3010;
                    float _3011;
                    float _3012;
                    uint _3013;
                    _3007 = _2883;
                    _3008 = _2884;
                    _3009 = _2885;
                    _3010 = _2886;
                    _3011 = _2887;
                    _3012 = _2888;
                    _3013 = _2898;
                    float _2939;
                    float _2940;
                    float _2941;
                    float _2942;
                    float _2943;
                    float _2944;
                    for (;;)
                    {
                        uint _3017 = uint(findLSB(_3013)) + (_2889 << 5u);
                        uint _3014 = (_3013 + 4294967295u) & _3013;
                        uint _3019 = _3017 * 48u;
                        vec4 _3033 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3019)).x, texelFetch(g_PointLightRenderingBuffer, int(_3019 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3019 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3019 + 3u)).x));
                        uint _3039 = (_3017 * 48u) + 4u;
                        vec4 _3052 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3039)).x, texelFetch(g_PointLightRenderingBuffer, int(_3039 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3039 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3039 + 3u)).x));
                        uint _3058 = (_3017 * 48u) + 8u;
                        vec3 _3069 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3058)).x, texelFetch(g_PointLightRenderingBuffer, int(_3058 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3058 + 2u)).x));
                        float _3073 = _3033.x - _2592;
                        float _3074 = _3033.y - _2593;
                        float _3075 = _3033.z - _2594;
                        float _3076 = dot(vec3(_3073, _3074, _3075), vec3(_3073, _3074, _3075));
                        float _3079 = inversesqrt(_3076);
                        float _3080 = _3079 * _3073;
                        float _3081 = _3079 * _3074;
                        float _3082 = _3079 * _3075;
                        float _3083 = dot(vec3(_855, _858, _861), vec3(_3080, _3081, _3082));
                        float _3088 = 1.0 - (_3076 * _3033.w);
                        float _4401 = isnan(0.0) ? _3088 : (isnan(_3088) ? 0.0 : max(_3088, 0.0));
                        float _3089 = isnan(1.0) ? _4401 : (isnan(_4401) ? 1.0 : min(_4401, 1.0));
                        float _3090 = sqrt(_3076) * _3052.w;
                        float _3093 = 1.39999997615814208984375 / (_3090 + 1.39999997615814208984375);
                        float _3094 = _3093 * _3093;
                        float _3097 = ((1.0 - _3094) * _3083) + _3094;
                        float _3100 = _3090 * _3090;
                        float _3104 = ((isnan(0.0) ? _3097 : (isnan(_3097) ? 0.0 : max(_3097, 0.0))) * _3089) / ((_3100 * 0.699999988079071044921875) + 1.0);
                        float _3108 = (-0.0) - _2592;
                        float _3109 = (-0.0) - _2593;
                        float _3110 = (-0.0) - _2594;
                        float _3114 = inversesqrt(dot(vec3(_3108, _3109, _3110), vec3(_3108, _3109, _3110)));
                        float _3115 = _3114 * _3108;
                        float _3116 = _3114 * _3109;
                        float _3117 = _3114 * _3110;
                        float _3125 = exp2(log2(1.0 / ((_3100 * 3.5) + 5.0)) * 0.25);
                        float _3126 = 1.0 - _930;
                        float _3133 = sqrt(1.0 - ((1.0 - (_3126 * _3126)) * (1.0 - (_3125 * _3125))));
                        float _3134 = _3133 * _3133;
                        float _3135 = _3134 * _3134;
                        float _3136 = _3115 + _3080;
                        float _3137 = _3116 + _3081;
                        float _3138 = _3117 + _3082;
                        float _3142 = inversesqrt(dot(vec3(_3136, _3137, _3138), vec3(_3136, _3137, _3138)));
                        float _3146 = dot(vec3(_855, _858, _861), vec3(_3115, _3116, _3117));
                        float _4417 = isnan(0.0) ? _3146 : (isnan(_3146) ? 0.0 : max(_3146, 0.0));
                        float _3149 = isnan(1.0) ? _4417 : (isnan(_4417) ? 1.0 : min(_4417, 1.0));
                        float _3150 = dot(vec3(_855, _858, _861), vec3(_3142 * _3136, _3142 * _3137, _3142 * _3138));
                        float _4428 = isnan(0.0) ? _3150 : (isnan(_3150) ? 0.0 : max(_3150, 0.0));
                        float _3153 = isnan(1.0) ? _4428 : (isnan(_4428) ? 1.0 : min(_4428, 1.0));
                        float _3157 = ((_3153 * _3153) * (_3135 + (-1.0))) + 1.0;
                        float _3158 = _3093 * _3134;
                        float _3159 = _3158 * _3158;
                        float _3162 = ((1.0 - _3159) * _3083) + _3159;
                        float _4439 = isnan(0.0) ? _3162 : (isnan(_3162) ? 0.0 : max(_3162, 0.0));
                        float _3163 = isnan(1.0) ? _4439 : (isnan(_4439) ? 1.0 : min(_4439, 1.0));
                        float _3164 = 1.0 - _3134;
                        float _3174 = (0.5 / (((_3163 * ((_3149 * _3164) + _3134)) + 9.9999999392252902907785028219223e-09) + (((_3163 * _3164) + _3134) * _3149))) * _3163;
                        float _4450 = isnan(0.0) ? _3174 : (isnan(_3174) ? 0.0 : max(_3174, 0.0));
                        float _3185 = (((_3135 * 3.1415927410125732421875) * (isnan(1.0) ? _4450 : (isnan(_4450) ? 1.0 : min(_4450, 1.0)))) / ((_3157 * _3157) * ((_3100 * 2.1991131305694580078125) + 3.141590118408203125))) * _3089;
                        _2942 = (_3104 * _3052.x) + _3010;
                        _2943 = (_3104 * _3052.y) + _3011;
                        _2944 = (_3104 * _3052.z) + _3012;
                        _2939 = (_3185 * _3069.x) + _3007;
                        _2940 = (_3185 * _3069.y) + _3008;
                        _2941 = (_3185 * _3069.z) + _3009;
                        if (_3014 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3007 = _2939;
                            _3008 = _2940;
                            _3009 = _2941;
                            _3010 = _2942;
                            _3011 = _2943;
                            _3012 = _2944;
                            _3013 = _3014;
                        }
                    }
                    frontier_phi_61_pred = _2939;
                    frontier_phi_61_pred_1 = _2944;
                    frontier_phi_61_pred_2 = _2943;
                    frontier_phi_61_pred_3 = _2942;
                    frontier_phi_61_pred_4 = _2941;
                    frontier_phi_61_pred_5 = _2940;
                }
                _2740 = frontier_phi_61_pred;
                _2750 = frontier_phi_61_pred_1;
                _2748 = frontier_phi_61_pred_2;
                _2746 = frontier_phi_61_pred_3;
                _2744 = frontier_phi_61_pred_4;
                _2742 = frontier_phi_61_pred_5;
                uint _2890 = _2889 + 1u;
                if (_2890 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2883 = _2740;
                    _2884 = _2742;
                    _2885 = _2744;
                    _2886 = _2746;
                    _2887 = _2748;
                    _2888 = _2750;
                    _2889 = _2890;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2739 = _2740;
            _2741 = _2742;
            _2743 = _2744;
            _2745 = _2746;
            _2747 = _2748;
            _2749 = _2750;
        }
        uvec4 _2753 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2754 = _2753.z;
        uint _2756 = (_2754 >> 8u) & 15u;
        float _2851;
        float _2853;
        float _2855;
        float _2857;
        float _2859;
        float _2861;
        if (((4294967295u << _2756) & _2638) == 0u)
        {
            _2851 = _2739;
            _2853 = _2741;
            _2855 = _2743;
            _2857 = _2745;
            _2859 = _2747;
            _2861 = _2749;
        }
        else
        {
            float _2876 = inversesqrt(dot(vec3(_2592, _2593, _2594), vec3(_2592, _2593, _2594)));
            float _2877 = _2876 * _2592;
            float _2878 = _2876 * _2593;
            float _2879 = _2876 * _2594;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2756 < ((_2754 >> 12u) & 15u))
            {
                float _2852;
                float _2854;
                float _2856;
                float _2858;
                float _2860;
                float _2862;
                float _2990 = _2739;
                float _2991 = _2741;
                float _2992 = _2743;
                float _2993 = _2745;
                float _2994 = _2747;
                float _2995 = _2749;
                uint _2996 = _2756;
                uint _3005;
                bool _3006;
                for (;;)
                {
                    _3005 = texelFetch(g_lightClassification, int((((_2632 << 5u) + (_2618 << 9u)) + (_2996 << 2u)) >> 2u)).x;
                    _3006 = _3005 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3006)
                    {
                        frontier_phi_67_pred = _2993;
                        frontier_phi_67_pred_1 = _2994;
                        frontier_phi_67_pred_2 = _2995;
                        frontier_phi_67_pred_3 = _2992;
                        frontier_phi_67_pred_4 = _2991;
                        frontier_phi_67_pred_5 = _2990;
                    }
                    else
                    {
                        float _3190;
                        float _3191;
                        float _3192;
                        float _3193;
                        float _3194;
                        float _3195;
                        float _3484;
                        float _3485;
                        float _3486;
                        float _3487;
                        float _3488;
                        float _3489;
                        float _3203 = _2990;
                        float _3204 = _2991;
                        float _3205 = _2992;
                        float _3206 = _2993;
                        float _3207 = _2994;
                        float _3208 = _2995;
                        uint _3209 = _3005;
                        uint _3210;
                        vec4 _3235;
                        float _3236;
                        vec4 _3251;
                        vec3 _3263;
                        vec4 _3278;
                        vec4 _3293;
                        float _3340;
                        bool _3341;
                        for (;;)
                        {
                            uint _3220 = ((_2996 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3209));
                            _3210 = (_3209 + 4294967295u) & _3209;
                            uint _3222 = _3220 * 40u;
                            _3235 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3222)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3222 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3222 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3222 + 3u)).x));
                            _3236 = _3235.w;
                            uint _3238 = (_3220 * 40u) + 4u;
                            _3251 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3238)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3238 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3238 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3238 + 3u)).x));
                            uint _3253 = (_3220 * 40u) + 8u;
                            _3263 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3253)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3253 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3253 + 2u)).x));
                            uint _3265 = (_3220 * 40u) + 16u;
                            _3278 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3265)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3265 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3265 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3265 + 3u)).x));
                            uint _3280 = (_3220 * 40u) + 20u;
                            _3293 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3280)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3280 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3280 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3280 + 3u)).x));
                            uint _3296 = (_3220 * 40u) + 24u;
                            vec4 _3309 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3296)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3296 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3296 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3296 + 3u)).x));
                            uint _3315 = (_3220 * 40u) + 28u;
                            vec4 _3328 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3315)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3315 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3315 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3315 + 3u)).x));
                            _3340 = fma(_2594, _3328.z, fma(_2593, _3328.y, _3328.x * _2592)) + _3328.w;
                            _3341 = !((fma(_2594, _3309.z, fma(_2593, _3309.y, _3309.x * _2592)) + _3309.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3341)
                            {
                                float _3368 = _3235.x - _2592;
                                float _3369 = _3235.y - _2593;
                                float _3370 = _3235.z - _2594;
                                float _3371 = dot(vec3(_3368, _3369, _3370), vec3(_3368, _3369, _3370));
                                float _3374 = inversesqrt(_3371);
                                float _3375 = _3374 * _3368;
                                float _3376 = _3374 * _3369;
                                float _3377 = _3374 * _3370;
                                float _3381 = 1.0 - (_3371 / (_3236 * _3236));
                                float _4461 = isnan(0.0) ? _3381 : (isnan(_3381) ? 0.0 : max(_3381, 0.0));
                                float _3382 = isnan(1.0) ? _4461 : (isnan(_4461) ? 1.0 : min(_4461, 1.0));
                                float _3386 = sqrt(_3371) * _3251.w;
                                float _3388 = 1.39999997615814208984375 / (_3386 + 1.39999997615814208984375);
                                float _3389 = _3388 * _3388;
                                float _3392 = ((1.0 - _3389) * dot(vec3(_3375, _3376, _3377), vec3(_855, _858, _861))) + _3389;
                                float _3395 = _3386 * _3386;
                                float _3399 = (fma(_2594, _3278.z, fma(_2593, _3278.y, _3278.x * _2592)) + _3278.w) / _3340;
                                float _3400 = (fma(_2594, _3293.z, fma(_2593, _3293.y, _3293.x * _2592)) + _3293.w) / _3340;
                                float _3404 = 1.0 - dot(vec2(_3399, _3400), vec2(_3399, _3400));
                                float _4477 = isnan(0.0) ? _3404 : (isnan(_3404) ? 0.0 : max(_3404, 0.0));
                                float _3405 = isnan(1.0) ? _4477 : (isnan(_4477) ? 1.0 : min(_4477, 1.0));
                                float _3406 = _3405 * (((isnan(0.0) ? _3392 : (isnan(_3392) ? 0.0 : max(_3392, 0.0))) * _3382) / ((_3395 * 0.699999988079071044921875) + 1.0));
                                float _3418 = exp2(log2(1.0 / ((_3395 * 3.5) + 5.0)) * 0.25);
                                float _3419 = 1.0 - _930;
                                float _3426 = sqrt(1.0 - ((1.0 - (_3419 * _3419)) * (1.0 - (_3418 * _3418))));
                                float _3427 = _3426 * _3426;
                                float _3428 = _3427 * _3427;
                                float _3429 = _3375 - _2877;
                                float _3430 = _3376 - _2878;
                                float _3431 = _3377 - _2879;
                                float _3435 = inversesqrt(dot(vec3(_3429, _3430, _3431), vec3(_3429, _3430, _3431)));
                                float _3439 = dot(vec3(_855, _858, _861), vec3((-0.0) - _2877, (-0.0) - _2878, (-0.0) - _2879));
                                float _4488 = isnan(0.0) ? _3439 : (isnan(_3439) ? 0.0 : max(_3439, 0.0));
                                float _3442 = isnan(1.0) ? _4488 : (isnan(_4488) ? 1.0 : min(_4488, 1.0));
                                float _3443 = dot(vec3(_855, _858, _861), vec3(_3435 * _3429, _3435 * _3430, _3435 * _3431));
                                float _4499 = isnan(0.0) ? _3443 : (isnan(_3443) ? 0.0 : max(_3443, 0.0));
                                float _3446 = isnan(1.0) ? _4499 : (isnan(_4499) ? 1.0 : min(_4499, 1.0));
                                float _3450 = ((_3446 * _3446) * (_3428 + (-1.0))) + 1.0;
                                float _3451 = _3388 * _3427;
                                float _3452 = _3451 * _3451;
                                float _3458 = ((1.0 - _3452) * dot(vec3(_855, _858, _861), vec3(_3375, _3376, _3377))) + _3452;
                                float _4510 = isnan(0.0) ? _3458 : (isnan(_3458) ? 0.0 : max(_3458, 0.0));
                                float _3459 = isnan(1.0) ? _4510 : (isnan(_4510) ? 1.0 : min(_4510, 1.0));
                                float _3460 = 1.0 - _3427;
                                float _3470 = (0.5 / (((_3459 * ((_3442 * _3460) + _3427)) + 9.9999999392252902907785028219223e-09) + (((_3459 * _3460) + _3427) * _3442))) * _3459;
                                float _4521 = isnan(0.0) ? _3470 : (isnan(_3470) ? 0.0 : max(_3470, 0.0));
                                float _3480 = (_3405 * _3382) * (((_3428 * 3.1415927410125732421875) * (isnan(1.0) ? _4521 : (isnan(_4521) ? 1.0 : min(_4521, 1.0)))) / ((_3450 * _3450) * ((_3395 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3480 * _3263.x;
                                frontier_phi_73_pred_1 = _3480 * _3263.y;
                                frontier_phi_73_pred_2 = _3406 * _3251.z;
                                frontier_phi_73_pred_3 = _3406 * _3251.y;
                                frontier_phi_73_pred_4 = _3406 * _3251.x;
                                frontier_phi_73_pred_5 = _3480 * _3263.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3484 = frontier_phi_73_pred;
                            _3485 = frontier_phi_73_pred_1;
                            _3489 = frontier_phi_73_pred_2;
                            _3488 = frontier_phi_73_pred_3;
                            _3487 = frontier_phi_73_pred_4;
                            _3486 = frontier_phi_73_pred_5;
                            _3193 = _3487 + _3206;
                            _3194 = _3488 + _3207;
                            _3195 = _3489 + _3208;
                            _3190 = _3484 + _3203;
                            _3191 = _3485 + _3204;
                            _3192 = _3486 + _3205;
                            if (_3210 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3203 = _3190;
                                _3204 = _3191;
                                _3205 = _3192;
                                _3206 = _3193;
                                _3207 = _3194;
                                _3208 = _3195;
                                _3209 = _3210;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3193;
                        frontier_phi_67_pred_1 = _3194;
                        frontier_phi_67_pred_2 = _3195;
                        frontier_phi_67_pred_3 = _3192;
                        frontier_phi_67_pred_4 = _3191;
                        frontier_phi_67_pred_5 = _3190;
                    }
                    _2858 = frontier_phi_67_pred;
                    _2860 = frontier_phi_67_pred_1;
                    _2862 = frontier_phi_67_pred_2;
                    _2856 = frontier_phi_67_pred_3;
                    _2854 = frontier_phi_67_pred_4;
                    _2852 = frontier_phi_67_pred_5;
                    uint _2997 = _2996 + 1u;
                    if (_2997 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2990 = _2852;
                        _2991 = _2854;
                        _2992 = _2856;
                        _2993 = _2858;
                        _2994 = _2860;
                        _2995 = _2862;
                        _2996 = _2997;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2860;
                frontier_phi_55_56_ladder_1 = _2862;
                frontier_phi_55_56_ladder_2 = _2858;
                frontier_phi_55_56_ladder_3 = _2856;
                frontier_phi_55_56_ladder_4 = _2854;
                frontier_phi_55_56_ladder_5 = _2852;
            }
            else
            {
                frontier_phi_55_56_ladder = _2747;
                frontier_phi_55_56_ladder_1 = _2749;
                frontier_phi_55_56_ladder_2 = _2745;
                frontier_phi_55_56_ladder_3 = _2743;
                frontier_phi_55_56_ladder_4 = _2741;
                frontier_phi_55_56_ladder_5 = _2739;
            }
            _2851 = frontier_phi_55_56_ladder_5;
            _2853 = frontier_phi_55_56_ladder_4;
            _2855 = frontier_phi_55_56_ladder_3;
            _2857 = frontier_phi_55_56_ladder_2;
            _2859 = frontier_phi_55_56_ladder;
            _2861 = frontier_phi_55_56_ladder_1;
        }
        float _2866 = isnan(1.0) ? _914 : (isnan(_914) ? 1.0 : min(_914, 1.0));
        _2651 = (_2866 * _2857) + _2087;
        _2653 = (_2866 * _2859) + _2089;
        _2655 = (_2866 * _2861) + _2091;
        _2657 = ((_2851 * _899) * _2866) + _2432;
        _2659 = ((_2853 * _901) * _2866) + _2434;
        _2661 = ((_2855 * _902) * _2866) + _2436;
    }
    else
    {
        _2651 = _2087;
        _2653 = _2089;
        _2655 = _2091;
        _2657 = _2432;
        _2659 = _2434;
        _2661 = _2436;
    }
    float _4537 = isnan(0.0) ? _889 : (isnan(_889) ? 0.0 : max(_889, 0.0));
    float _4548 = isnan(0.0) ? _890 : (isnan(_890) ? 0.0 : max(_890, 0.0));
    float _4559 = isnan(0.0) ? _891 : (isnan(_891) ? 0.0 : max(_891, 0.0));
    uint _2681 = _874 + 6u;
    float _2689 = _836 / cbSceneParam._m0[86u].x;
    float _2690 = _837 / cbSceneParam._m0[86u].y;
    vec4 _2704 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2689, _2690, (log2((isnan(cbSceneParam._m0[77u].w) ? _771 : (isnan(_771) ? cbSceneParam._m0[77u].w : min(_771, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2706 = _2704.x;
    float _2707 = _2704.y;
    float _2708 = _2704.z;
    float _2709 = _2704.w;
    float _2801;
    float _2803;
    float _2805;
    float _2807;
    if (_771 > cbSceneParam._m0[78u].w)
    {
        float _2764 = isnan(_771) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _771 : min(cbSceneParam._m0[80u].w, _771));
        float _2765 = _2764 / _771;
        float _2776 = _2765 * _821;
        float _2777 = _822 * _2765;
        float _2778 = (-0.0) - _2777;
        float _2779 = _2765 * _823;
        float _2781 = (cbSceneParam._m0[77u].w * _2778) / _2764;
        float _2782 = _2781 + cbSceneParam._m0[79u].w;
        float _2783 = cbSceneParam._m0[79u].w - _2777;
        float _2789 = sqrt(((_2776 * _2776) + (_2777 * _2777)) + (_2779 * _2779));
        float _2792 = (1.0 - (cbSceneParam._m0[77u].w / _2764)) * _2789;
        float _2797 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2799 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2952;
        if (abs((_2778 - _2781) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2952 = ((((_2782 > 0.0) ? exp2(_2797 * _2782) : (2.0 - exp2(_2799 * _2782))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2792;
        }
        else
        {
            float _2912 = 1.0 / cbSceneParam._m0[80u].x;
            float _2913 = isnan(_2783) ? _2782 : (isnan(_2782) ? _2783 : max(_2782, _2783));
            float _2914 = isnan(_2783) ? _2782 : (isnan(_2782) ? _2783 : min(_2782, _2783));
            float _2923 = isnan(0.0) ? _2913 : (isnan(_2913) ? 0.0 : min(_2913, 0.0));
            float _2924 = isnan(0.0) ? _2914 : (isnan(_2914) ? 0.0 : min(_2914, 0.0));
            _2952 = ((abs(_2789 / _2778) * cbSceneParam._m0[80u].y) * ((((_2923 - _2924) * 2.0) - ((exp2(_2797 * (isnan(0.0) ? _2913 : (isnan(_2913) ? 0.0 : max(_2913, 0.0)))) - exp2(_2797 * (isnan(0.0) ? _2914 : (isnan(_2914) ? 0.0 : max(_2914, 0.0))))) * _2912)) - ((exp2(_2799 * _2923) - exp2(_2799 * _2924)) * _2912))) + (_2792 * cbSceneParam._m0[80u].z);
        }
        vec4 _2954 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2689, _2690, 1.0), 0.0);
        float _2963 = exp2((_2952 * (-1.44269502162933349609375)) * (1.0 - _2954.w));
        float _2964 = log2(_2963);
        float _2980 = log2(_2709);
        _2801 = (exp2(_2980 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2964 * cbSceneParam._m0[78u].x)) * _2954.x) / cbSceneParam._m0[78u].x)) + _2706;
        _2803 = (exp2(_2980 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2964 * cbSceneParam._m0[78u].y)) * _2954.y) / cbSceneParam._m0[78u].y)) + _2707;
        _2805 = (exp2(_2980 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2964 * cbSceneParam._m0[78u].z)) * _2954.z) / cbSceneParam._m0[78u].z)) + _2708;
        _2807 = _2963 * _2709;
    }
    else
    {
        _2801 = _2706;
        _2803 = _2707;
        _2805 = _2708;
        _2807 = _2709;
    }
    float _2819 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2820 = _2819 == 3.0;
    float _2821 = log2(_2807);
    float _2828 = exp2(_2821 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4537 : (isnan(_4537) ? 1.0 : min(_4537, 1.0))) * (_2651 + ((isnan(0.0) ? _1645 : (isnan(_1645) ? 0.0 : max(_1645, 0.0))) * _914))) + ((_2657 + ((isnan(0.0) ? _1939 : (isnan(_1939) ? 0.0 : max(_1939, 0.0))) * _1724)) * cbPerFrame._m0[3u].x));
    float _2829 = exp2(_2821 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4548 : (isnan(_4548) ? 1.0 : min(_4548, 1.0))) * (_2653 + ((isnan(0.0) ? _1648 : (isnan(_1648) ? 0.0 : max(_1648, 0.0))) * _914))) + ((_2659 + ((isnan(0.0) ? _1942 : (isnan(_1942) ? 0.0 : max(_1942, 0.0))) * _1724)) * cbPerFrame._m0[3u].x));
    float _2830 = exp2(_2821 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4559 : (isnan(_4559) ? 1.0 : min(_4559, 1.0))) * (_2655 + ((isnan(0.0) ? _1651 : (isnan(_1651) ? 0.0 : max(_1651, 0.0))) * _914))) + ((_2661 + ((isnan(0.0) ? _1945 : (isnan(_1945) ? 0.0 : max(_1945, 0.0))) * _1724)) * cbPerFrame._m0[3u].x));
    float _2839 = (_2819 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2839 * (_2820 ? _2828 : (_2828 + (cbSceneParam._m0[72u].w * _2801)));
    SV_Target.y = _2839 * (_2820 ? _2829 : (_2829 + (cbSceneParam._m0[72u].w * _2803)));
    SV_Target.z = _2839 * (_2820 ? _2830 : (_2830 + (cbSceneParam._m0[72u].w * _2805)));
    SV_Target.w = cbInstanceData._m0[_2681].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2681].w;
}


