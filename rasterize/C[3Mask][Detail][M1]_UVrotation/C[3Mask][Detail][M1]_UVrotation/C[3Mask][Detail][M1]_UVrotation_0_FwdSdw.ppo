#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[20];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_19;
layout(set = 0, binding = 11) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_2;
layout(set = 0, binding = 12) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_20;
layout(set = 0, binding = 13) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_3;
layout(set = 0, binding = 14) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_5;
layout(set = 0, binding = 15) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_6;
layout(set = 0, binding = 16) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_7;
layout(set = 0, binding = 17) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_8;
layout(set = 0, binding = 18) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_11;
layout(set = 0, binding = 3) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_12;
layout(set = 0, binding = 4) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_13;
layout(set = 0, binding = 5) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_14;
layout(set = 0, binding = 6) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_15;
layout(set = 0, binding = 7) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_16;
layout(set = 0, binding = 8) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_17;
layout(set = 0, binding = 9) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_18;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1353;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _219 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _220 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _221 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _227 = inversesqrt(dot(vec3(_219, _220, _221), vec3(_219, _220, _221)));
    float _234 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _241 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _264 = sin(cbMtdParam._m0[18u].x);
    float _265 = cos(cbMtdParam._m0[18u].x);
    float _266 = TEXCOORD.x - cbMtdParam._m0[17u].w;
    float _267 = TEXCOORD.y - cbMtdParam._m0[17u].w;
    float _275 = (cbMtdParam._m0[17u].w + cbMtdParam._m0[19u].y) + fma(_267, (-0.0) - _264, _265 * _266);
    float _277 = (cbMtdParam._m0[17u].w + cbMtdParam._m0[19u].z) + fma(_267, _265, _266 * _264);
    vec4 _290 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * _275) + cbTextureTilingScale._m0[1u].z, (_277 * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w));
    float _296 = _290.x * cbMtdParam._m0[10u].x;
    float _297 = _290.y * cbMtdParam._m0[10u].y;
    float _298 = _290.z * cbMtdParam._m0[10u].z;
    vec4 _316 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w));
    vec4 _335 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_0, SS_WrapLinear), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _360 = cbMtdParam._m0[19u].x * texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.x) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD.y) + cbTextureTilingScale._m0[13u].w)).x;
    float _371 = ((cbMtdParam._m0[15u].x * (-1.39999997615814208984375)) * (((1.0 - _335.x) * 2.0) - _360)) + 1.0;
    float _3964 = isnan(0.0) ? _371 : (isnan(_371) ? 0.0 : max(_371, 0.0));
    float _372 = isnan(1.0) ? _3964 : (isnan(_3964) ? 1.0 : min(_3964, 1.0));
    float _379 = (_372 * ((_316.x * cbMtdParam._m0[11u].x) - _296)) + _296;
    float _380 = (_372 * ((_316.y * cbMtdParam._m0[11u].y) - _297)) + _297;
    float _381 = (_372 * ((_316.z * cbMtdParam._m0[11u].z) - _298)) + _298;
    vec4 _399 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_8, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[17u].x * TEXCOORD.x) + cbTextureTilingScale._m0[17u].z, (cbTextureTilingScale._m0[17u].y * TEXCOORD.y) + cbTextureTilingScale._m0[17u].w));
    float _412 = (((((1.0 - _335.y) * 2.0) - _360) * (-1.39999997615814208984375)) * cbMtdParam._m0[18u].z) + 1.0;
    float _3975 = isnan(0.0) ? _412 : (isnan(_412) ? 0.0 : max(_412, 0.0));
    float _413 = isnan(1.0) ? _3975 : (isnan(_3975) ? 1.0 : min(_3975, 1.0));
    float _420 = (((_399.x * cbMtdParam._m0[12u].x) - _379) * _413) + _379;
    float _421 = (_413 * ((_399.y * cbMtdParam._m0[12u].y) - _380)) + _380;
    float _422 = (_413 * ((_399.z * cbMtdParam._m0[12u].z) - _381)) + _381;
    vec4 _439 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _452 = (((((1.0 - _335.z) * 2.0) - _360) * (-1.39999997615814208984375)) * cbMtdParam._m0[18u].w) + 1.0;
    float _3986 = isnan(0.0) ? _452 : (isnan(_452) ? 0.0 : max(_452, 0.0));
    float _453 = isnan(1.0) ? _3986 : (isnan(_3986) ? 1.0 : min(_3986, 1.0));
    vec4 _481 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _489 = ((((((_439.x * cbMtdParam._m0[13u].x) - _420) * _453) + _420) * 4.55000019073486328125) * cbMtdParam._m0[9u].x) * _481.x;
    float _492 = ((((_453 * ((_439.y * cbMtdParam._m0[13u].y) - _421)) + _421) * 4.55000019073486328125) * cbMtdParam._m0[9u].y) * _481.y;
    float _495 = ((((_453 * ((_439.z * cbMtdParam._m0[13u].z) - _422)) + _422) * 4.55000019073486328125) * cbMtdParam._m0[9u].z) * _481.z;
    vec4 _515 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_20, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.z) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.w) + cbTextureTilingScale._m0[12u].w));
    float _544 = (TEXCOORD_5.x - ((cbMtdParam._m0[15u].w * (1.0 - TEXCOORD_5.x)) * (texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[18u].x * TEXCOORD.z) + cbTextureTilingScale._m0[18u].z, (cbTextureTilingScale._m0[18u].y * TEXCOORD.w) + cbTextureTilingScale._m0[18u].w)).x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[15u].z + 1.0);
    float _3997 = isnan(0.0) ? _544 : (isnan(_544) ? 0.0 : max(_544, 0.0));
    float _545 = isnan(1.0) ? _3997 : (isnan(_3997) ? 1.0 : min(_3997, 1.0));
    float _552 = (_545 * ((_515.x * cbMtdParam._m0[14u].x) - _489)) + _489;
    float _553 = (_545 * ((_515.y * cbMtdParam._m0[14u].y) - _492)) + _492;
    float _554 = (_545 * ((_515.z * cbMtdParam._m0[14u].z) - _495)) + _495;
    vec4 _567 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * _275) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _277) + cbTextureTilingScale._m0[5u].w));
    float _569 = _567.x;
    float _587 = ((texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w)).x - _569) * _372) + _569;
    float _604 = ((texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w)).x - _587) * _413) + _587;
    float _621 = ((texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w)).x - _604) * _453) + _604;
    float _625 = (_621 - (_621 * TEXCOORD_5.x)) * cbMtdParam._m0[18u].y;
    vec4 _638 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.z) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.w) + cbTextureTilingScale._m0[3u].w));
    vec4 _660 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[14u].x * _275) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _277) + cbTextureTilingScale._m0[14u].w));
    float _662 = _660.x;
    float _663 = _660.y;
    float _666 = cbMtdParam._m0[17u].y * _660.z;
    vec4 _678 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * TEXCOORD.x) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * TEXCOORD.y) + cbTextureTilingScale._m0[15u].w));
    float _687 = (((cbMtdParam._m0[17u].x * _678.z) - _666) * _372) + _666;
    vec4 _700 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_15, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _712 = (((cbMtdParam._m0[16u].w * _700.z) - _687) * _413) + _687;
    vec4 _725 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _734 = (((cbMtdParam._m0[16u].z * _725.z) - _712) * _453) + _712;
    float _739 = ((cbMtdParam._m0[16u].x * TEXCOORD_5.x) * ((_638.z * cbMtdParam._m0[17u].z) - _734)) + _734;
    vec4 _752 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[16u].x * TEXCOORD.x) + cbTextureTilingScale._m0[16u].z, (cbTextureTilingScale._m0[16u].y * TEXCOORD.y) + cbTextureTilingScale._m0[16u].w));
    float _764 = ((_678.x - _662) * _372) + _662;
    float _765 = ((_678.y - _663) * _372) + _663;
    float _770 = ((_700.x - _764) * _413) + _764;
    float _771 = ((_700.y - _765) * _413) + _765;
    float _780 = ((((_725.x - _770) * _453) + _770) * 2.0) + (-1.0);
    float _781 = ((((_725.y - _771) * _453) + _771) * 2.0) + (-1.0);
    float _782 = dot(vec2(_780, _781), vec2(_780, _781));
    float _4008 = isnan(0.0) ? _782 : (isnan(_782) ? 0.0 : max(_782, 0.0));
    float _787 = sqrt(1.0 - (isnan(1.0) ? _4008 : (isnan(_4008) ? 1.0 : min(_4008, 1.0))));
    float _797 = ((((_752.x * 2.0) + (-1.0)) * cbMtdParam._m0[16u].y) + _780) + ((((_638.x * 2.0) + (-1.0)) * TEXCOORD_5.x) * cbMtdParam._m0[15u].y);
    float _798 = ((((_752.y * 2.0) + (-1.0)) * cbMtdParam._m0[16u].y) + _781) + ((((_638.y * 2.0) + (-1.0)) * TEXCOORD_5.y) * cbMtdParam._m0[15u].y);
    float _801 = fma(_787, _234 * NORMAL.x, fma(_798, _241 * TANGENT.x, (_227 * _219) * _797));
    float _804 = fma(_787, _234 * NORMAL.y, fma(_798, _241 * TANGENT.y, (_227 * _220) * _797));
    float _807 = fma(_787, _234 * NORMAL.z, fma(_798, _241 * TANGENT.z, (_227 * _221) * _797));
    float _811 = inversesqrt(dot(vec3(_801, _804, _807), vec3(_801, _804, _807)));
    float _812 = _811 * _801;
    float _813 = _811 * _804;
    float _814 = _811 * _807;
    float _4019 = isnan(0.0) ? _739 : (isnan(_739) ? 0.0 : max(_739, 0.0));
    float _815 = isnan(1.0) ? _4019 : (isnan(_4019) ? 1.0 : min(_4019, 1.0));
    float _4030 = isnan(0.0) ? _552 : (isnan(_552) ? 0.0 : max(_552, 0.0));
    float _4041 = isnan(0.0) ? _553 : (isnan(_553) ? 0.0 : max(_553, 0.0));
    float _4052 = isnan(0.0) ? _554 : (isnan(_554) ? 0.0 : max(_554, 0.0));
    float _4063 = isnan(0.0) ? _625 : (isnan(_625) ? 0.0 : max(_625, 0.0));
    float _819 = isnan(1.0) ? _4063 : (isnan(_4063) ? 1.0 : min(_4063, 1.0));
    float _835 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _875 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _885 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _875);
    float _886 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _875);
    float _887 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _875);
    float _891 = inversesqrt(dot(vec3(_885, _886, _887), vec3(_885, _886, _887)));
    float _892 = _885 * _891;
    float _893 = _886 * _891;
    float _894 = _887 * _891;
    float _900 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _901 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _919 = fma(_814, cbSceneParam._m0[5u].z, fma(_813, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _812));
    float _922 = fma(_814, cbSceneParam._m0[6u].z, fma(_813, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _812));
    float _925 = fma(_814, cbSceneParam._m0[7u].z, fma(_813, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _812));
    uint _938 = uint(roundEven(NORMAL.w)) * 13u;
    uint _940 = (_938 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _946 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4030 : (isnan(_4030) ? 1.0 : min(_4030, 1.0)))) * cbInstanceData._m0[_940].x;
    float _947 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4041 : (isnan(_4041) ? 1.0 : min(_4041, 1.0)))) * cbInstanceData._m0[_940].y;
    float _948 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4052 : (isnan(_4052) ? 1.0 : min(_4052, 1.0)))) * cbInstanceData._m0[_940].z;
    float _4074 = isnan(0.0) ? _946 : (isnan(_946) ? 0.0 : max(_946, 0.0));
    float _949 = isnan(1.0) ? _4074 : (isnan(_4074) ? 1.0 : min(_4074, 1.0));
    float _4085 = isnan(0.0) ? _947 : (isnan(_947) ? 0.0 : max(_947, 0.0));
    float _950 = isnan(1.0) ? _4085 : (isnan(_4085) ? 1.0 : min(_4085, 1.0));
    float _4096 = isnan(0.0) ? _948 : (isnan(_948) ? 0.0 : max(_948, 0.0));
    float _951 = isnan(1.0) ? _4096 : (isnan(_4096) ? 1.0 : min(_4096, 1.0));
    float _952 = 1.0 - _819;
    float _953 = _949 * _952;
    float _954 = _950 * _952;
    float _955 = _951 * _952;
    float _960 = (_949 + (-0.039999999105930328369140625)) * _819;
    float _961 = (_950 + (-0.039999999105930328369140625)) * _819;
    float _962 = (_951 + (-0.039999999105930328369140625)) * _819;
    float _963 = _960 + 0.039999999105930328369140625;
    float _965 = _961 + 0.039999999105930328369140625;
    float _966 = _962 + 0.039999999105930328369140625;
    vec4 _975 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _900, cbSceneParam._m0[86u].y * _901));
    float _978 = _975.x * TEXCOORD_5.w;
    float _979 = dot(vec3(_812, _813, _814), vec3(_892, _893, _894));
    float _982 = _979 * 2.0;
    float _986 = (_982 * _812) - _892;
    float _987 = (_982 * _813) - _893;
    float _988 = (_982 * _814) - _894;
    float _992 = abs(dot(vec3(_892, _893, _894), vec3(_812, _813, _814)));
    float _4107 = isnan(0.0) ? _992 : (isnan(_992) ? 0.0 : max(_992, 0.0));
    float _994 = sqrt(_815);
    float _1007 = exp2((_994 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4107 : (isnan(_4107) ? 1.0 : min(_4107, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_994 * 3.0));
    float _1013 = (1.0 - _1007) * ((_994 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1014 = _1007 * _994;
    float _1042 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1046 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1050 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1352;
    float _1354;
    float _1355;
    float _1356;
    float _1357;
    float _1358;
    float _1359;
    float _1360;
    float _1361;
    float _1362;
    float _1363;
    float _1364;
    float _1365;
    float _1366;
    float _1367;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1077 = fma(_1050, cbModelParam._m0[26u].z, fma(_1046, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1042));
        float _1081 = fma(_1050, cbModelParam._m0[27u].z, fma(_1046, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1042));
        float _1085 = fma(_1050, cbModelParam._m0[28u].z, fma(_1046, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1042));
        float _1110 = _1042 + _812;
        float _1111 = _1046 + _813;
        float _1112 = _1050 + _814;
        float _1122 = fma(_1112, cbModelParam._m0[26u].z, fma(_1111, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1110)) - _1077;
        float _1123 = fma(_1112, cbModelParam._m0[27u].z, fma(_1111, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1110)) - _1081;
        float _1124 = fma(_1112, cbModelParam._m0[28u].z, fma(_1111, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1110)) - _1085;
        float _1128 = inversesqrt(dot(vec3(_1122, _1123, _1124), vec3(_1122, _1123, _1124)));
        float _1141 = ((_1128 * _1122) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1077 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1142 = ((_1128 * _1123) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1081 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1143 = ((_1128 * _1124) / cbModelParam._m0[34u].z) + ((((((_1085 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1146 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1141, _1142, _1143), 0.0);
        vec4 _1153 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1141, _1142, _1143), 0.0);
        vec4 _1160 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1141, _1142, _1143), 0.0);
        vec4 _1167 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1141, _1142, _1143), 0.0);
        float _1180 = exp2((_1146.w + (-0.5)) * 20.0) * 2.0;
        float _1181 = _1180 * (_1146.x + (-0.5));
        float _1182 = _1180 * (_1146.y + (-0.5));
        float _1183 = _1180 * (_1146.z + (-0.5));
        float _1190 = exp2((_1153.w + (-0.5)) * 20.0) * 2.0;
        float _1191 = _1190 * (_1153.x + (-0.5));
        float _1192 = _1190 * (_1153.y + (-0.5));
        float _1193 = _1190 * (_1153.z + (-0.5));
        float _1200 = exp2((_1160.w + (-0.5)) * 20.0) * 2.0;
        float _1201 = _1200 * (_1160.x + (-0.5));
        float _1202 = _1200 * (_1160.y + (-0.5));
        float _1203 = _1200 * (_1160.z + (-0.5));
        float _1210 = exp2((_1167.w + (-0.5)) * 20.0) * 2.0;
        float _1211 = _1210 * (_1167.x + (-0.5));
        float _1212 = _1210 * (_1167.y + (-0.5));
        float _1213 = _1210 * (_1167.z + (-0.5));
        float _1214 = isnan(0.0) ? _1211 : (isnan(_1211) ? 0.0 : max(_1211, 0.0));
        float _1215 = isnan(0.0) ? _1212 : (isnan(_1212) ? 0.0 : max(_1212, 0.0));
        float _1216 = isnan(0.0) ? _1213 : (isnan(_1213) ? 0.0 : max(_1213, 0.0));
        float _1217 = _1181 * 0.5;
        float _1218 = _1191 * 0.5;
        float _1219 = _1201 * 0.5;
        float _1220 = dot(vec3(_1217, _1218, _1219), vec3(_1217, _1218, _1219));
        float _1225 = (_1220 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1220);
        float _1234 = (dot(vec3(_812, _813, _814), vec3(_1225 * _1217, _1225 * _1218, _1225 * _1219)) + 1.0) * 0.5;
        float _4133 = isnan(0.0) ? _1234 : (isnan(_1234) ? 0.0 : max(_1234, 0.0));
        float _1244 = sqrt(((_1218 * _1218) + (_1217 * _1217)) + (_1219 * _1219)) / (_1214 + 9.9999997473787516355514526367188e-06);
        float _4144 = isnan(0.0) ? _1244 : (isnan(_1244) ? 0.0 : max(_1244, 0.0));
        float _1245 = isnan(1.0) ? _4144 : (isnan(_4144) ? 1.0 : min(_4144, 1.0));
        float _1246 = _1245 * 2.0;
        float _1250 = (1.0 - _1245) / (_1245 + 1.0);
        float _4155 = isnan(0.0) ? _1250 : (isnan(_1250) ? 0.0 : max(_1250, 0.0));
        float _1251 = isnan(1.0) ? _4155 : (isnan(_4155) ? 1.0 : min(_4155, 1.0));
        float _1260 = ((((1.0 - _1251) * (_1246 + 2.0)) * exp2(log2(isnan(1.0) ? _4133 : (isnan(_4133) ? 1.0 : min(_4133, 1.0))) * (_1246 + 1.0))) + _1251) * _1214;
        float _1261 = _1182 * 0.5;
        float _1262 = _1192 * 0.5;
        float _1263 = _1202 * 0.5;
        float _1264 = dot(vec3(_1261, _1262, _1263), vec3(_1261, _1262, _1263));
        float _1269 = (_1264 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1264);
        float _1277 = (dot(vec3(_812, _813, _814), vec3(_1269 * _1261, _1269 * _1262, _1269 * _1263)) + 1.0) * 0.5;
        float _4166 = isnan(0.0) ? _1277 : (isnan(_1277) ? 0.0 : max(_1277, 0.0));
        float _1286 = sqrt(((_1262 * _1262) + (_1261 * _1261)) + (_1263 * _1263)) / (_1215 + 9.9999997473787516355514526367188e-06);
        float _4177 = isnan(0.0) ? _1286 : (isnan(_1286) ? 0.0 : max(_1286, 0.0));
        float _1287 = isnan(1.0) ? _4177 : (isnan(_4177) ? 1.0 : min(_4177, 1.0));
        float _1288 = _1287 * 2.0;
        float _1292 = (1.0 - _1287) / (_1287 + 1.0);
        float _4188 = isnan(0.0) ? _1292 : (isnan(_1292) ? 0.0 : max(_1292, 0.0));
        float _1293 = isnan(1.0) ? _4188 : (isnan(_4188) ? 1.0 : min(_4188, 1.0));
        float _1302 = ((((1.0 - _1293) * (_1288 + 2.0)) * exp2(log2(isnan(1.0) ? _4166 : (isnan(_4166) ? 1.0 : min(_4166, 1.0))) * (_1288 + 1.0))) + _1293) * _1215;
        float _1303 = _1183 * 0.5;
        float _1304 = _1193 * 0.5;
        float _1305 = _1203 * 0.5;
        float _1306 = dot(vec3(_1303, _1304, _1305), vec3(_1303, _1304, _1305));
        float _1311 = (_1306 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1306);
        float _1319 = (dot(vec3(_812, _813, _814), vec3(_1311 * _1303, _1311 * _1304, _1311 * _1305)) + 1.0) * 0.5;
        float _4199 = isnan(0.0) ? _1319 : (isnan(_1319) ? 0.0 : max(_1319, 0.0));
        float _1328 = sqrt(((_1304 * _1304) + (_1303 * _1303)) + (_1305 * _1305)) / (_1216 + 9.9999997473787516355514526367188e-06);
        float _4210 = isnan(0.0) ? _1328 : (isnan(_1328) ? 0.0 : max(_1328, 0.0));
        float _1329 = isnan(1.0) ? _4210 : (isnan(_4210) ? 1.0 : min(_4210, 1.0));
        float _1330 = _1329 * 2.0;
        float _1334 = (1.0 - _1329) / (_1329 + 1.0);
        float _4221 = isnan(0.0) ? _1334 : (isnan(_1334) ? 0.0 : max(_1334, 0.0));
        float _1335 = isnan(1.0) ? _4221 : (isnan(_4221) ? 1.0 : min(_4221, 1.0));
        float _1344 = ((((1.0 - _1335) * (_1330 + 2.0)) * exp2(log2(isnan(1.0) ? _4199 : (isnan(_4199) ? 1.0 : min(_4199, 1.0))) * (_1330 + 1.0))) + _1335) * _1216;
        _1352 = _1183;
        _1354 = _1182;
        _1355 = _1181;
        _1356 = _1193;
        _1357 = _1192;
        _1358 = _1191;
        _1359 = _1203;
        _1360 = _1202;
        _1361 = _1201;
        _1362 = _1216;
        _1363 = _1215;
        _1364 = _1214;
        _1365 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1260 : (isnan(_1260) ? 0.0 : max(_1260, 0.0)));
        _1366 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1302 : (isnan(_1302) ? 0.0 : max(_1302, 0.0)));
        _1367 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1344 : (isnan(_1344) ? 0.0 : max(_1344, 0.0)));
    }
    else
    {
        _1352 = _1353;
        _1354 = _1353;
        _1355 = _1353;
        _1356 = _1353;
        _1357 = _1353;
        _1358 = _1353;
        _1359 = _1353;
        _1360 = _1353;
        _1361 = _1353;
        _1362 = _1353;
        _1363 = _1353;
        _1364 = _1353;
        _1365 = 0.0;
        _1366 = 0.0;
        _1367 = 0.0;
    }
    float _1662;
    float _1663;
    float _1664;
    float _1665;
    float _1666;
    float _1667;
    float _1668;
    float _1669;
    float _1670;
    float _1671;
    float _1672;
    float _1673;
    float _1674;
    float _1675;
    float _1676;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1393 = fma(_1050, cbModelParam._m0[30u].z, fma(_1046, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1042));
        float _1397 = fma(_1050, cbModelParam._m0[31u].z, fma(_1046, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1042));
        float _1401 = fma(_1050, cbModelParam._m0[32u].z, fma(_1046, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1042));
        float _1424 = _1042 + _812;
        float _1425 = _1046 + _813;
        float _1426 = _1050 + _814;
        float _1436 = fma(_1426, cbModelParam._m0[30u].z, fma(_1425, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1424)) - _1393;
        float _1437 = fma(_1426, cbModelParam._m0[31u].z, fma(_1425, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1424)) - _1397;
        float _1438 = fma(_1426, cbModelParam._m0[32u].z, fma(_1425, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1424)) - _1401;
        float _1442 = inversesqrt(dot(vec3(_1436, _1437, _1438), vec3(_1436, _1437, _1438)));
        float _1455 = ((_1442 * _1436) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1393 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1456 = ((_1442 * _1437) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1397 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1457 = ((_1442 * _1438) / cbModelParam._m0[35u].z) + ((((((_1401 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1459 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1455, _1456, _1457), 0.0);
        vec4 _1466 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1455, _1456, _1457), 0.0);
        vec4 _1473 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1455, _1456, _1457), 0.0);
        vec4 _1480 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1455, _1456, _1457), 0.0);
        float _1492 = exp2((_1459.w + (-0.5)) * 20.0) * 2.0;
        float _1493 = _1492 * (_1459.x + (-0.5));
        float _1494 = _1492 * (_1459.y + (-0.5));
        float _1495 = _1492 * (_1459.z + (-0.5));
        float _1502 = exp2((_1466.w + (-0.5)) * 20.0) * 2.0;
        float _1503 = _1502 * (_1466.x + (-0.5));
        float _1504 = _1502 * (_1466.y + (-0.5));
        float _1505 = _1502 * (_1466.z + (-0.5));
        float _1512 = exp2((_1473.w + (-0.5)) * 20.0) * 2.0;
        float _1513 = _1512 * (_1473.x + (-0.5));
        float _1514 = _1512 * (_1473.y + (-0.5));
        float _1515 = _1512 * (_1473.z + (-0.5));
        float _1522 = exp2((_1480.w + (-0.5)) * 20.0) * 2.0;
        float _1523 = _1522 * (_1480.x + (-0.5));
        float _1524 = _1522 * (_1480.y + (-0.5));
        float _1525 = _1522 * (_1480.z + (-0.5));
        float _1526 = isnan(0.0) ? _1523 : (isnan(_1523) ? 0.0 : max(_1523, 0.0));
        float _1527 = isnan(0.0) ? _1524 : (isnan(_1524) ? 0.0 : max(_1524, 0.0));
        float _1528 = isnan(0.0) ? _1525 : (isnan(_1525) ? 0.0 : max(_1525, 0.0));
        float _1529 = _1493 * 0.5;
        float _1530 = _1503 * 0.5;
        float _1531 = _1513 * 0.5;
        float _1532 = dot(vec3(_1529, _1530, _1531), vec3(_1529, _1530, _1531));
        float _1537 = (_1532 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1532);
        float _1545 = (dot(vec3(_812, _813, _814), vec3(_1537 * _1529, _1537 * _1530, _1537 * _1531)) + 1.0) * 0.5;
        float _4262 = isnan(0.0) ? _1545 : (isnan(_1545) ? 0.0 : max(_1545, 0.0));
        float _1554 = sqrt(((_1530 * _1530) + (_1529 * _1529)) + (_1531 * _1531)) / (_1526 + 9.9999997473787516355514526367188e-06);
        float _4273 = isnan(0.0) ? _1554 : (isnan(_1554) ? 0.0 : max(_1554, 0.0));
        float _1555 = isnan(1.0) ? _4273 : (isnan(_4273) ? 1.0 : min(_4273, 1.0));
        float _1556 = _1555 * 2.0;
        float _1560 = (1.0 - _1555) / (_1555 + 1.0);
        float _4284 = isnan(0.0) ? _1560 : (isnan(_1560) ? 0.0 : max(_1560, 0.0));
        float _1561 = isnan(1.0) ? _4284 : (isnan(_4284) ? 1.0 : min(_4284, 1.0));
        float _1570 = ((((1.0 - _1561) * (_1556 + 2.0)) * exp2(log2(isnan(1.0) ? _4262 : (isnan(_4262) ? 1.0 : min(_4262, 1.0))) * (_1556 + 1.0))) + _1561) * _1526;
        float _1571 = _1494 * 0.5;
        float _1572 = _1504 * 0.5;
        float _1573 = _1514 * 0.5;
        float _1574 = dot(vec3(_1571, _1572, _1573), vec3(_1571, _1572, _1573));
        float _1579 = (_1574 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1574);
        float _1587 = (dot(vec3(_812, _813, _814), vec3(_1579 * _1571, _1579 * _1572, _1579 * _1573)) + 1.0) * 0.5;
        float _4295 = isnan(0.0) ? _1587 : (isnan(_1587) ? 0.0 : max(_1587, 0.0));
        float _1596 = sqrt(((_1572 * _1572) + (_1571 * _1571)) + (_1573 * _1573)) / (_1527 + 9.9999997473787516355514526367188e-06);
        float _4306 = isnan(0.0) ? _1596 : (isnan(_1596) ? 0.0 : max(_1596, 0.0));
        float _1597 = isnan(1.0) ? _4306 : (isnan(_4306) ? 1.0 : min(_4306, 1.0));
        float _1598 = _1597 * 2.0;
        float _1602 = (1.0 - _1597) / (_1597 + 1.0);
        float _4317 = isnan(0.0) ? _1602 : (isnan(_1602) ? 0.0 : max(_1602, 0.0));
        float _1603 = isnan(1.0) ? _4317 : (isnan(_4317) ? 1.0 : min(_4317, 1.0));
        float _1612 = ((((1.0 - _1603) * (_1598 + 2.0)) * exp2(log2(isnan(1.0) ? _4295 : (isnan(_4295) ? 1.0 : min(_4295, 1.0))) * (_1598 + 1.0))) + _1603) * _1527;
        float _1613 = _1495 * 0.5;
        float _1614 = _1505 * 0.5;
        float _1615 = _1515 * 0.5;
        float _1616 = dot(vec3(_1613, _1614, _1615), vec3(_1613, _1614, _1615));
        float _1621 = (_1616 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1616);
        float _1629 = (dot(vec3(_812, _813, _814), vec3(_1621 * _1613, _1621 * _1614, _1621 * _1615)) + 1.0) * 0.5;
        float _4328 = isnan(0.0) ? _1629 : (isnan(_1629) ? 0.0 : max(_1629, 0.0));
        float _1638 = sqrt(((_1614 * _1614) + (_1613 * _1613)) + (_1615 * _1615)) / (_1528 + 9.9999997473787516355514526367188e-06);
        float _4339 = isnan(0.0) ? _1638 : (isnan(_1638) ? 0.0 : max(_1638, 0.0));
        float _1639 = isnan(1.0) ? _4339 : (isnan(_4339) ? 1.0 : min(_4339, 1.0));
        float _1640 = _1639 * 2.0;
        float _1644 = (1.0 - _1639) / (_1639 + 1.0);
        float _4350 = isnan(0.0) ? _1644 : (isnan(_1644) ? 0.0 : max(_1644, 0.0));
        float _1645 = isnan(1.0) ? _4350 : (isnan(_4350) ? 1.0 : min(_4350, 1.0));
        float _1654 = ((((1.0 - _1645) * (_1640 + 2.0)) * exp2(log2(isnan(1.0) ? _4328 : (isnan(_4328) ? 1.0 : min(_4328, 1.0))) * (_1640 + 1.0))) + _1645) * _1528;
        _1662 = _1495;
        _1663 = _1494;
        _1664 = _1493;
        _1665 = _1505;
        _1666 = _1504;
        _1667 = _1503;
        _1668 = _1515;
        _1669 = _1514;
        _1670 = _1513;
        _1671 = _1528;
        _1672 = _1527;
        _1673 = _1526;
        _1674 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1570 : (isnan(_1570) ? 0.0 : max(_1570, 0.0)));
        _1675 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1612 : (isnan(_1612) ? 0.0 : max(_1612, 0.0)));
        _1676 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1654 : (isnan(_1654) ? 0.0 : max(_1654, 0.0)));
    }
    else
    {
        _1662 = _1353;
        _1663 = _1353;
        _1664 = _1353;
        _1665 = _1353;
        _1666 = _1353;
        _1667 = _1353;
        _1668 = _1353;
        _1669 = _1353;
        _1670 = _1353;
        _1671 = _1353;
        _1672 = _1353;
        _1673 = _1353;
        _1674 = 0.0;
        _1675 = 0.0;
        _1676 = 0.0;
    }
    float _1686 = (cbModelParam._m0[1u].x * (_1674 - _1365)) + _1365;
    float _1687 = (cbModelParam._m0[1u].x * (_1675 - _1366)) + _1366;
    float _1688 = (cbModelParam._m0[1u].x * (_1676 - _1367)) + _1367;
    float _1709 = fma(_1688, cbSceneParam._m0[89u].z, fma(_1687, cbSceneParam._m0[89u].y, _1686 * cbSceneParam._m0[89u].x));
    float _1712 = fma(_1688, cbSceneParam._m0[90u].z, fma(_1687, cbSceneParam._m0[90u].y, _1686 * cbSceneParam._m0[90u].x));
    float _1715 = fma(_1688, cbSceneParam._m0[91u].z, fma(_1687, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1686));
    float _1730 = _986 * 0.5;
    float _1731 = _987 * 0.5;
    float _1732 = _988 * 0.5;
    float _1733 = dot(vec4(_1730, _1731, _1732, 1.0), vec4(_1664, _1667, _1670, _1673));
    float _1736 = dot(vec4(_1730, _1731, _1732, 1.0), vec4(_1663, _1666, _1669, _1672));
    float _1739 = dot(vec4(_1730, _1731, _1732, 1.0), vec4(_1662, _1665, _1668, _1671));
    float _1773;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1746 = dot(vec4(_1730, _1731, _1732, 1.0), vec4(_1352, _1356, _1359, _1362));
        float _1750 = dot(vec4(_1730, _1731, _1732, 1.0), vec4(_1354, _1357, _1360, _1363));
        float _1754 = dot(vec4(_1730, _1731, _1732, 1.0), vec4(_1355, _1358, _1361, _1364));
        float _1761 = dot(vec4(cbModelParam._m0[39u]), vec4(_1730, _1731, _1732, 1.0));
        _1773 = dot(vec3(isnan(0.0) ? _1754 : (isnan(_1754) ? 0.0 : max(_1754, 0.0)), isnan(0.0) ? _1750 : (isnan(_1750) ? 0.0 : max(_1750, 0.0)), isnan(0.0) ? _1746 : (isnan(_1746) ? 0.0 : max(_1746, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1761) ? 0.0 : (isnan(0.0) ? _1761 : max(0.0, _1761))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1773 = 1.0;
    }
    float _1784;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1775 = dot(vec4(cbModelParam._m0[40u]), vec4(_1730, _1731, _1732, 1.0));
        _1784 = dot(vec3(isnan(0.0) ? _1733 : (isnan(_1733) ? 0.0 : max(_1733, 0.0)), isnan(0.0) ? _1736 : (isnan(_1736) ? 0.0 : max(_1736, 0.0)), isnan(0.0) ? _1739 : (isnan(_1739) ? 0.0 : max(_1739, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1775) ? 0.0 : (isnan(0.0) ? _1775 : max(0.0, _1775))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1784 = 1.0;
    }
    float _1788 = (_1784 * cbModelParam._m0[1u].x) + (_1773 * (1.0 - cbModelParam._m0[1u].x));
    float _1798 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _815);
    float _1799 = isnan(_1798) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1798 : min(cbModelParam._m0[25u].z, _1798));
    float _1879;
    float _1881;
    float _1883;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1846 = fma(_1050, cbModelParam._m0[13u].z, fma(_1046, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1042)) + cbModelParam._m0[13u].w;
        float _1850 = fma(_1050, cbModelParam._m0[14u].z, fma(_1046, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1042)) + cbModelParam._m0[14u].w;
        float _1854 = fma(_1050, cbModelParam._m0[15u].z, fma(_1046, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1042)) + cbModelParam._m0[15u].w;
        float _1857 = fma(_988, cbModelParam._m0[13u].z, fma(_987, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _986));
        float _1860 = fma(_988, cbModelParam._m0[14u].z, fma(_987, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _986));
        float _1863 = fma(_988, cbModelParam._m0[15u].z, fma(_987, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _986));
        float _1891;
        if (_1857 > 0.0)
        {
            _1891 = abs((1.0 - _1846) / _1857);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1857 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1846 + 1.0) / _1857);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1891 = frontier_phi_14_12_ladder;
        }
        float _2064;
        if (_1860 > 0.0)
        {
            _2064 = abs((1.0 - _1850) / _1860);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1860 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1850 + 1.0) / _1860);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2064 = frontier_phi_23_19_ladder;
        }
        float _2359;
        if (_1863 > 0.0)
        {
            _2359 = abs((1.0 - _1854) / _1863);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1863 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1854 + 1.0) / _1863);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2359 = frontier_phi_35_30_ladder;
        }
        float _2361 = isnan(_2064) ? _1891 : (isnan(_1891) ? _2064 : min(_1891, _2064));
        float _2362 = isnan(_2359) ? _2361 : (isnan(_2361) ? _2359 : min(_2361, _2359));
        float _2366 = (_2362 * _1857) + _1846;
        float _2367 = (_2362 * _1860) + _1850;
        float _2368 = (_2362 * _1863) + _1854;
        float _2369 = _2362 * 9.9999997473787516355514526367188e-05;
        float _2371 = (-1.0) - _2369;
        float _2373 = _2369 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2368 > _2373) || ((_2368 < _2371) || ((_2367 > _2373) || ((_2367 < _2371) || ((_2366 < _2371) || (_2366 > _2373))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2513 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2368, cbModelParam._m0[9u].z, fma(_2367, cbModelParam._m0[9u].y, _2366 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2368, cbModelParam._m0[10u].z, fma(_2367, cbModelParam._m0[10u].y, _2366 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2368, cbModelParam._m0[11u].z, fma(_2367, cbModelParam._m0[11u].y, _2366 * cbModelParam._m0[11u].x))), _1799);
            frontier_phi_13_35_ladder = _2513.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2513.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2513.x * cbModelParam._m0[1u].y;
        }
        _1879 = frontier_phi_13_35_ladder_2;
        _1881 = frontier_phi_13_35_ladder_1;
        _1883 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1867 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_986, _987, _988), _1799);
        _1879 = _1867.x * cbModelParam._m0[1u].y;
        _1881 = _1867.y * cbModelParam._m0[1u].y;
        _1883 = _1867.z * cbModelParam._m0[1u].y;
    }
    float _1887 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _815);
    float _1888 = isnan(_1887) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1887 : min(cbModelParam._m0[25u].w, _1887));
    float _1979;
    float _1981;
    float _1983;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1943 = fma(_1050, cbModelParam._m0[21u].z, fma(_1046, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1042)) + cbModelParam._m0[21u].w;
        float _1947 = fma(_1050, cbModelParam._m0[22u].z, fma(_1046, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1042)) + cbModelParam._m0[22u].w;
        float _1951 = fma(_1050, cbModelParam._m0[23u].z, fma(_1046, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1042)) + cbModelParam._m0[23u].w;
        float _1954 = fma(_988, cbModelParam._m0[21u].z, fma(_987, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _986));
        float _1957 = fma(_988, cbModelParam._m0[22u].z, fma(_987, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _986));
        float _1960 = fma(_988, cbModelParam._m0[23u].z, fma(_987, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _986));
        float _2069;
        if (_1954 > 0.0)
        {
            _2069 = abs((1.0 - _1943) / _1954);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1954 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1943 + 1.0) / _1954);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2069 = frontier_phi_25_21_ladder;
        }
        float _2386;
        if (_1957 > 0.0)
        {
            _2386 = abs((1.0 - _1947) / _1957);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1957 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1947 + 1.0) / _1957);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2386 = frontier_phi_37_32_ladder;
        }
        float _2724;
        if (_1960 > 0.0)
        {
            _2724 = abs((1.0 - _1951) / _1960);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1960 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1951 + 1.0) / _1960);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2724 = frontier_phi_47_44_ladder;
        }
        float _2726 = isnan(_2386) ? _2069 : (isnan(_2069) ? _2386 : min(_2069, _2386));
        float _2727 = isnan(_2724) ? _2726 : (isnan(_2726) ? _2724 : min(_2726, _2724));
        float _2731 = (_2727 * _1954) + _1943;
        float _2732 = (_2727 * _1957) + _1947;
        float _2733 = (_2727 * _1960) + _1951;
        float _2734 = _2727 * 9.9999997473787516355514526367188e-05;
        float _2735 = (-1.0) - _2734;
        float _2737 = _2734 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2733 > _2737) || ((_2733 < _2735) || ((_2732 > _2737) || ((_2732 < _2735) || ((_2731 < _2735) || (_2731 > _2737))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2855 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2733, cbModelParam._m0[17u].z, fma(_2732, cbModelParam._m0[17u].y, _2731 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2733, cbModelParam._m0[18u].z, fma(_2732, cbModelParam._m0[18u].y, _2731 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2733, cbModelParam._m0[19u].z, fma(_2732, cbModelParam._m0[19u].y, _2731 * cbModelParam._m0[19u].x))), _1888);
            frontier_phi_22_47_ladder = _2855.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2855.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2855.x * cbModelParam._m0[1u].z;
        }
        _1979 = frontier_phi_22_47_ladder_2;
        _1981 = frontier_phi_22_47_ladder_1;
        _1983 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1963 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_986, _987, _988), _1888);
        _1979 = _1963.x * cbModelParam._m0[1u].z;
        _1981 = _1963.y * cbModelParam._m0[1u].z;
        _1983 = _1963.z * cbModelParam._m0[1u].z;
    }
    float _1996 = (((_1013 * _963) + _1014) * _978) * ((cbModelParam._m0[1u].w * (_1979 - _1879)) + _1879);
    float _1998 = (((_1013 * _965) + _1014) * _978) * ((cbModelParam._m0[1u].w * (_1981 - _1881)) + _1881);
    float _2000 = (((_1013 * _966) + _1014) * _978) * ((cbModelParam._m0[1u].w * (_1983 - _1883)) + _1883);
    float _2003 = fma(_2000, cbSceneParam._m0[89u].z, fma(_1998, cbSceneParam._m0[89u].y, _1996 * cbSceneParam._m0[89u].x));
    float _2006 = fma(_2000, cbSceneParam._m0[90u].z, fma(_1998, cbSceneParam._m0[90u].y, _1996 * cbSceneParam._m0[90u].x));
    float _2009 = fma(_2000, cbSceneParam._m0[91u].z, fma(_1998, cbSceneParam._m0[91u].y, _1996 * cbSceneParam._m0[91u].x));
    float _2043 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2047 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2051 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2055 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2056 = _2043 / _2055;
    float _2057 = _2047 / _2055;
    float _2058 = _2051 / _2055;
    float _2205;
    float _2206;
    float _2207;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2085 = ((uint(_2058 > cbSceneParam._m0[59u].y) + uint(_2058 > cbSceneParam._m0[59u].x)) + uint(_2058 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2086 = _2085 + 43u;
        uint _2094 = _2085 + 44u;
        uint _2102 = _2085 + 45u;
        uint _2110 = _2085 + 46u;
        float _2121 = fma(_2055, cbSceneParam._m0[_2086].w, fma(_2051, cbSceneParam._m0[_2086].z, fma(_2047, cbSceneParam._m0[_2086].y, _2043 * cbSceneParam._m0[_2086].x)));
        float _2125 = fma(_2055, cbSceneParam._m0[_2094].w, fma(_2051, cbSceneParam._m0[_2094].z, fma(_2047, cbSceneParam._m0[_2094].y, _2043 * cbSceneParam._m0[_2094].x)));
        float _2133 = fma(_2055, cbSceneParam._m0[_2110].w, fma(_2051, cbSceneParam._m0[_2110].z, fma(_2047, cbSceneParam._m0[_2110].y, _2043 * cbSceneParam._m0[_2110].x)));
        float _2138 = cbSceneParam._m0[33u].z * _2133;
        float _2140 = cbSceneParam._m0[33u].w * _2133;
        float _2143 = fma(_2055, cbSceneParam._m0[_2102].w, fma(_2051, cbSceneParam._m0[_2102].z, fma(_2047, cbSceneParam._m0[_2102].y, _2043 * cbSceneParam._m0[_2102].x))) / _2133;
        float _2191 = (cbSceneParam._m0[33u].x - sqrt(((_2057 * _2057) + (_2056 * _2056)) + (_2058 * _2058))) * cbSceneParam._m0[33u].y;
        float _4476 = isnan(0.0) ? _2191 : (isnan(_2191) ? 0.0 : max(_2191, 0.0));
        float _2198 = (isnan(1.0) ? _4476 : (isnan(_4476) ? 1.0 : min(_4476, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2138 + _2121) / _2133, (_2140 + _2125) / _2133), _2143), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2140 + _2121) / _2133, (_2125 - _2138) / _2133), _2143), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2121 - _2138) / _2133, (_2125 - _2140) / _2133), _2143), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2121 - _2140) / _2133, (_2138 + _2125) / _2133), _2143), 0.0)).x), vec4(0.25)));
        _2205 = 1.0 - (_2198 * cbSceneParam._m0[34u].x);
        _2206 = 1.0 - (_2198 * cbSceneParam._m0[34u].y);
        _2207 = 1.0 - (_2198 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2205 = 1.0;
        _2206 = 1.0;
        _2207 = 1.0;
    }
    float _2271;
    float _2273;
    float _2275;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2259 = fma(_2055, cbSceneParam._m0[63u].w, fma(_2051, cbSceneParam._m0[63u].z, fma(_2047, cbSceneParam._m0[63u].y, _2043 * cbSceneParam._m0[63u].x)));
        float _2260 = fma(_2055, cbSceneParam._m0[60u].w, fma(_2051, cbSceneParam._m0[60u].z, fma(_2047, cbSceneParam._m0[60u].y, _2043 * cbSceneParam._m0[60u].x))) / _2259;
        float _2261 = fma(_2055, cbSceneParam._m0[61u].w, fma(_2051, cbSceneParam._m0[61u].z, fma(_2047, cbSceneParam._m0[61u].y, _2043 * cbSceneParam._m0[61u].x))) / _2259;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2260 >= cbSceneParam._m0[64u].x) && (_2261 >= cbSceneParam._m0[64u].y)) && (_2260 <= cbSceneParam._m0[64u].z)) && (_2261 <= cbSceneParam._m0[64u].w))
        {
            float _2399 = fma(_2055, cbSceneParam._m0[62u].w, fma(_2051, cbSceneParam._m0[62u].z, fma(_2047, cbSceneParam._m0[62u].y, _2043 * cbSceneParam._m0[62u].x))) / _2259;
            float _2403 = isnan(cbSceneParam._m0[41u].w) ? _2399 : (isnan(_2399) ? cbSceneParam._m0[41u].w : max(_2399, cbSceneParam._m0[41u].w));
            float _2446 = (cbSceneParam._m0[33u].x - sqrt(((_2057 * _2057) + (_2056 * _2056)) + (_2058 * _2058))) * cbSceneParam._m0[33u].y;
            float _4492 = isnan(0.0) ? _2446 : (isnan(_2446) ? 0.0 : max(_2446, 0.0));
            float _2453 = (isnan(1.0) ? _4492 : (isnan(_4492) ? 1.0 : min(_4492, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2260, cbSceneParam._m0[33u].w + _2261), _2403), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2260, _2261 - cbSceneParam._m0[33u].z), _2403), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2260 - cbSceneParam._m0[33u].z, _2261 - cbSceneParam._m0[33u].w), _2403), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2260 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2261), _2403), 0.0)).x), vec4(0.25)));
            float _2457 = 1.0 - (_2453 * cbSceneParam._m0[34u].x);
            float _2458 = 1.0 - (_2453 * cbSceneParam._m0[34u].y);
            float _2459 = 1.0 - (_2453 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2459) ? _2207 : (isnan(_2207) ? _2459 : min(_2207, _2459));
            frontier_phi_34_33_ladder_1 = isnan(_2458) ? _2206 : (isnan(_2206) ? _2458 : min(_2206, _2458));
            frontier_phi_34_33_ladder_2 = isnan(_2457) ? _2205 : (isnan(_2205) ? _2457 : min(_2205, _2457));
        }
        else
        {
            frontier_phi_34_33_ladder = _2207;
            frontier_phi_34_33_ladder_1 = _2206;
            frontier_phi_34_33_ladder_2 = _2205;
        }
        _2271 = frontier_phi_34_33_ladder_2;
        _2273 = frontier_phi_34_33_ladder_1;
        _2275 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2271 = _2205;
        _2273 = _2206;
        _2275 = _2207;
    }
    uvec4 _2280 = floatBitsToUint(cbInstanceData._m0[_938 + 5u]);
    uint _2282 = _2280.x * 14u;
    uint _2283 = _2282 + 13u;
    float _2290 = _978 + (-1.0);
    float _2295 = (cbLight._m0[_2283].x * _2290) + 1.0;
    float _2296 = (cbLight._m0[_2283].y * _2290) + 1.0;
    float _2297 = (cbLight._m0[_2283].z * _2290) + 1.0;
    float _2298 = (cbLight._m0[_2283].w * _2290) + 1.0;
    uint _2299 = _2282 + 5u;
    float _2305 = isnan(1.0) ? _2296 : (isnan(_2296) ? 1.0 : min(_2296, 1.0));
    uint _2309 = _2282 + 4u;
    float _2318 = isnan(1.0) ? _2295 : (isnan(_2295) ? 1.0 : min(_2295, 1.0));
    uint _2322 = _2282 | 1u;
    float _2333 = dot(vec3(cbLight._m0[_2282].xyz), vec3(_812, _813, _814));
    float _2336 = dot(vec3(cbLight._m0[_2322].xyz), vec3(_812, _813, _814));
    float _4528 = isnan(0.0) ? _2333 : (isnan(_2333) ? 0.0 : max(_2333, 0.0));
    float _4539 = isnan(0.0) ? _2336 : (isnan(_2336) ? 0.0 : max(_2336, 0.0));
    float _2341 = (isnan(1.0) ? _4528 : (isnan(_4528) ? 1.0 : min(_4528, 1.0))) * 0.3183098733425140380859375;
    float _2343 = (isnan(1.0) ? _4539 : (isnan(_4539) ? 1.0 : min(_4539, 1.0))) * 0.3183098733425140380859375;
    float _2350 = ((cbLight._m0[_2299].x * _2305) * _2343) + (((cbLight._m0[_2309].x * _2271) * _2318) * _2341);
    float _2351 = ((_2305 * cbLight._m0[_2299].y) * _2343) + (((cbLight._m0[_2309].y * _2273) * _2318) * _2341);
    float _2352 = ((_2305 * cbLight._m0[_2299].z) * _2343) + (((cbLight._m0[_2309].z * _2275) * _2318) * _2341);
    uvec4 _2356 = floatBitsToUint(cbLight._m0[_2282 + 12u]);
    bool _2358 = _2356.x == 0u;
    float _2460;
    float _2462;
    float _2464;
    if (_2358)
    {
        _2460 = _2350;
        _2462 = _2351;
        _2464 = _2352;
    }
    else
    {
        uint _2468 = _2282 + 6u;
        float _2484 = (dot(vec3(cbLight._m0[_2282 + 2u].xyz), vec3(_812, _813, _814)) * 0.5) + 0.5;
        float _2485 = _2484 * _2484;
        float _4550 = isnan(0.0) ? _2485 : (isnan(_2485) ? 0.0 : max(_2485, 0.0));
        float _2486 = isnan(1.0) ? _4550 : (isnan(_4550) ? 1.0 : min(_4550, 1.0));
        float _2487 = isnan(1.0) ? _2297 : (isnan(_2297) ? 1.0 : min(_2297, 1.0));
        _2460 = (((cbLight._m0[_2468].x * 0.3183098733425140380859375) * _2486) * _2487) + _2350;
        _2462 = (((cbLight._m0[_2468].y * 0.3183098733425140380859375) * _2486) * _2487) + _2351;
        _2464 = (((cbLight._m0[_2468].z * 0.3183098733425140380859375) * _2486) * _2487) + _2352;
    }
    bool _2467 = _2356.y == 0u;
    float _2522;
    float _2524;
    float _2526;
    if (_2467)
    {
        _2522 = _2460;
        _2524 = _2462;
        _2526 = _2464;
    }
    else
    {
        uint _2695 = _2282 + 7u;
        float _2711 = (dot(vec3(cbLight._m0[_2282 + 3u].xyz), vec3(_812, _813, _814)) * 0.5) + 0.5;
        float _2712 = _2711 * _2711;
        float _4566 = isnan(0.0) ? _2712 : (isnan(_2712) ? 0.0 : max(_2712, 0.0));
        float _2713 = isnan(1.0) ? _4566 : (isnan(_4566) ? 1.0 : min(_4566, 1.0));
        float _2714 = isnan(1.0) ? _2298 : (isnan(_2298) ? 1.0 : min(_2298, 1.0));
        _2522 = (((cbLight._m0[_2695].x * 0.3183098733425140380859375) * _2713) * _2714) + _2460;
        _2524 = (((cbLight._m0[_2695].y * 0.3183098733425140380859375) * _2713) * _2714) + _2462;
        _2526 = (((cbLight._m0[_2695].z * 0.3183098733425140380859375) * _2713) * _2714) + _2464;
    }
    uint _2529 = _2282 + 8u;
    float _2542 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2282].w)) * _815) * 0.949999988079071044921875);
    float _2543 = _2542 * _2542;
    float _2544 = cbLight._m0[_2282].x + _892;
    float _2545 = cbLight._m0[_2282].y + _893;
    float _2546 = cbLight._m0[_2282].z + _894;
    float _2550 = inversesqrt(dot(vec3(_2544, _2545, _2546), vec3(_2544, _2545, _2546)));
    float _2551 = _2550 * _2544;
    float _2552 = _2550 * _2545;
    float _2553 = _2550 * _2546;
    float _2554 = dot(vec3(_812, _813, _814), vec3(cbLight._m0[_2282].xyz));
    float _4582 = isnan(0.0) ? _2554 : (isnan(_2554) ? 0.0 : max(_2554, 0.0));
    float _2557 = isnan(1.0) ? _4582 : (isnan(_4582) ? 1.0 : min(_4582, 1.0));
    float _4593 = isnan(0.0) ? _979 : (isnan(_979) ? 0.0 : max(_979, 0.0));
    float _2558 = isnan(1.0) ? _4593 : (isnan(_4593) ? 1.0 : min(_4593, 1.0));
    float _2559 = dot(vec3(_812, _813, _814), vec3(_2551, _2552, _2553));
    float _4604 = isnan(0.0) ? _2559 : (isnan(_2559) ? 0.0 : max(_2559, 0.0));
    float _2562 = isnan(1.0) ? _4604 : (isnan(_4604) ? 1.0 : min(_4604, 1.0));
    float _2563 = dot(vec3(cbLight._m0[_2282].xyz), vec3(_2551, _2552, _2553));
    float _4615 = isnan(0.0) ? _2563 : (isnan(_2563) ? 0.0 : max(_2563, 0.0));
    float _2567 = _2543 * _2543;
    float _2571 = ((_2562 * _2562) * (_2567 + (-1.0))) + 1.0;
    float _2579 = exp2(log2(1.0 - (isnan(1.0) ? _4615 : (isnan(_4615) ? 1.0 : min(_4615, 1.0)))) * 5.0);
    float _2580 = 0.959999978542327880859375 - _960;
    float _2582 = 0.959999978542327880859375 - _961;
    float _2583 = 0.959999978542327880859375 - _962;
    float _2590 = 1.0 - _2543;
    float _2601 = (0.5 / (((_2558 * ((_2557 * _2590) + _2543)) + 9.9999999392252902907785028219223e-09) + (((_2558 * _2590) + _2543) * _2557))) * _2557;
    float _4626 = isnan(0.0) ? _2601 : (isnan(_2601) ? 0.0 : max(_2601, 0.0));
    float _2603 = (isnan(1.0) ? _4626 : (isnan(_4626) ? 1.0 : min(_4626, 1.0))) * (_2567 / ((_2571 * _2571) * 3.141590118408203125));
    uint _2617 = _2282 + 9u;
    float _2628 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2322].w)) * _815) * 0.949999988079071044921875);
    float _2629 = _2628 * _2628;
    float _2630 = cbLight._m0[_2322].x + _892;
    float _2631 = cbLight._m0[_2322].y + _893;
    float _2632 = cbLight._m0[_2322].z + _894;
    float _2636 = inversesqrt(dot(vec3(_2630, _2631, _2632), vec3(_2630, _2631, _2632)));
    float _2637 = _2636 * _2630;
    float _2638 = _2636 * _2631;
    float _2639 = _2636 * _2632;
    float _2640 = dot(vec3(_812, _813, _814), vec3(cbLight._m0[_2322].xyz));
    float _4637 = isnan(0.0) ? _2640 : (isnan(_2640) ? 0.0 : max(_2640, 0.0));
    float _2643 = isnan(1.0) ? _4637 : (isnan(_4637) ? 1.0 : min(_4637, 1.0));
    float _2644 = dot(vec3(_812, _813, _814), vec3(_2637, _2638, _2639));
    float _4648 = isnan(0.0) ? _2644 : (isnan(_2644) ? 0.0 : max(_2644, 0.0));
    float _2647 = isnan(1.0) ? _4648 : (isnan(_4648) ? 1.0 : min(_4648, 1.0));
    float _2648 = dot(vec3(cbLight._m0[_2322].xyz), vec3(_2637, _2638, _2639));
    float _4659 = isnan(0.0) ? _2648 : (isnan(_2648) ? 0.0 : max(_2648, 0.0));
    float _2652 = _2629 * _2629;
    float _2656 = ((_2647 * _2647) * (_2652 + (-1.0))) + 1.0;
    float _2663 = exp2(log2(1.0 - (isnan(1.0) ? _4659 : (isnan(_4659) ? 1.0 : min(_4659, 1.0)))) * 5.0);
    float _2670 = 1.0 - _2629;
    float _2680 = (0.5 / (((_2558 * ((_2643 * _2670) + _2629)) + 9.9999999392252902907785028219223e-09) + (((_2558 * _2670) + _2629) * _2643))) * _2643;
    float _4670 = isnan(0.0) ? _2680 : (isnan(_2680) ? 0.0 : max(_2680, 0.0));
    float _2682 = (isnan(1.0) ? _4670 : (isnan(_4670) ? 1.0 : min(_4670, 1.0))) * (_2652 / ((_2656 * _2656) * 3.141590118408203125));
    float _2692 = (((((_2663 * _2580) + _963) * cbLight._m0[_2617].x) * _2682) * _2305) + ((((cbLight._m0[_2529].x * _2271) * ((_2579 * _2580) + _963)) * _2603) * _2318);
    float _2693 = (((((_2663 * _2582) + _965) * cbLight._m0[_2617].y) * _2682) * _2305) + ((((cbLight._m0[_2529].y * _2273) * ((_2579 * _2582) + _965)) * _2603) * _2318);
    float _2694 = (((((_2663 * _2583) + _966) * cbLight._m0[_2617].z) * _2682) * _2305) + ((((cbLight._m0[_2529].z * _2275) * ((_2579 * _2583) + _966)) * _2603) * _2318);
    float _2750;
    float _2752;
    float _2754;
    if (_2358)
    {
        _2750 = _2692;
        _2752 = _2693;
        _2754 = _2694;
    }
    else
    {
        uint _2756 = _2282 + 2u;
        uint _2760 = _2282 + 10u;
        float _2774 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2756].w)) * _815) * 0.949999988079071044921875);
        float _2775 = _2774 * _2774;
        float _2776 = cbLight._m0[_2756].x + _892;
        float _2777 = cbLight._m0[_2756].y + _893;
        float _2778 = cbLight._m0[_2756].z + _894;
        float _2782 = inversesqrt(dot(vec3(_2776, _2777, _2778), vec3(_2776, _2777, _2778)));
        float _2783 = _2782 * _2776;
        float _2784 = _2782 * _2777;
        float _2785 = _2782 * _2778;
        float _2786 = dot(vec3(_812, _813, _814), vec3(cbLight._m0[_2756].xyz));
        float _4681 = isnan(0.0) ? _2786 : (isnan(_2786) ? 0.0 : max(_2786, 0.0));
        float _2789 = isnan(1.0) ? _4681 : (isnan(_4681) ? 1.0 : min(_4681, 1.0));
        float _2790 = dot(vec3(_812, _813, _814), vec3(_2783, _2784, _2785));
        float _4692 = isnan(0.0) ? _2790 : (isnan(_2790) ? 0.0 : max(_2790, 0.0));
        float _2793 = isnan(1.0) ? _4692 : (isnan(_4692) ? 1.0 : min(_4692, 1.0));
        float _2794 = dot(vec3(cbLight._m0[_2756].xyz), vec3(_2783, _2784, _2785));
        float _4703 = isnan(0.0) ? _2794 : (isnan(_2794) ? 0.0 : max(_2794, 0.0));
        float _2798 = _2775 * _2775;
        float _2802 = ((_2793 * _2793) * (_2798 + (-1.0))) + 1.0;
        float _2809 = exp2(log2(1.0 - (isnan(1.0) ? _4703 : (isnan(_4703) ? 1.0 : min(_4703, 1.0)))) * 5.0);
        float _2816 = 1.0 - _2775;
        float _2826 = (0.5 / (((_2558 * ((_2789 * _2816) + _2775)) + 9.9999999392252902907785028219223e-09) + (((_2558 * _2816) + _2775) * _2789))) * _2789;
        float _4714 = isnan(0.0) ? _2826 : (isnan(_2826) ? 0.0 : max(_2826, 0.0));
        float _2828 = (isnan(1.0) ? _4714 : (isnan(_4714) ? 1.0 : min(_4714, 1.0))) * (_2798 / ((_2802 * _2802) * 3.141590118408203125));
        float _2829 = isnan(1.0) ? _2297 : (isnan(_2297) ? 1.0 : min(_2297, 1.0));
        _2750 = (((((_2809 * _2580) + _963) * cbLight._m0[_2760].x) * _2828) * _2829) + _2692;
        _2752 = (((((_2809 * _2582) + _965) * cbLight._m0[_2760].y) * _2828) * _2829) + _2693;
        _2754 = (((((_2809 * _2583) + _966) * cbLight._m0[_2760].z) * _2828) * _2829) + _2694;
    }
    float _2860;
    float _2862;
    float _2864;
    if (_2467)
    {
        _2860 = _2750;
        _2862 = _2752;
        _2864 = _2754;
    }
    else
    {
        uint _2871 = _2282 + 3u;
        uint _2875 = _2282 + 11u;
        float _2889 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2871].w)) * _815) * 0.949999988079071044921875);
        float _2890 = _2889 * _2889;
        float _2891 = cbLight._m0[_2871].x + _892;
        float _2892 = cbLight._m0[_2871].y + _893;
        float _2893 = cbLight._m0[_2871].z + _894;
        float _2897 = inversesqrt(dot(vec3(_2891, _2892, _2893), vec3(_2891, _2892, _2893)));
        float _2898 = _2897 * _2891;
        float _2899 = _2897 * _2892;
        float _2900 = _2897 * _2893;
        float _2901 = dot(vec3(_812, _813, _814), vec3(cbLight._m0[_2871].xyz));
        float _4730 = isnan(0.0) ? _2901 : (isnan(_2901) ? 0.0 : max(_2901, 0.0));
        float _2904 = isnan(1.0) ? _4730 : (isnan(_4730) ? 1.0 : min(_4730, 1.0));
        float _2905 = dot(vec3(_812, _813, _814), vec3(_2898, _2899, _2900));
        float _4741 = isnan(0.0) ? _2905 : (isnan(_2905) ? 0.0 : max(_2905, 0.0));
        float _2908 = isnan(1.0) ? _4741 : (isnan(_4741) ? 1.0 : min(_4741, 1.0));
        float _2909 = dot(vec3(cbLight._m0[_2871].xyz), vec3(_2898, _2899, _2900));
        float _4752 = isnan(0.0) ? _2909 : (isnan(_2909) ? 0.0 : max(_2909, 0.0));
        float _2913 = _2890 * _2890;
        float _2917 = ((_2908 * _2908) * (_2913 + (-1.0))) + 1.0;
        float _2924 = exp2(log2(1.0 - (isnan(1.0) ? _4752 : (isnan(_4752) ? 1.0 : min(_4752, 1.0)))) * 5.0);
        float _2931 = 1.0 - _2890;
        float _2941 = (0.5 / (((_2558 * ((_2904 * _2931) + _2890)) + 9.9999999392252902907785028219223e-09) + (((_2558 * _2931) + _2890) * _2904))) * _2904;
        float _4763 = isnan(0.0) ? _2941 : (isnan(_2941) ? 0.0 : max(_2941, 0.0));
        float _2943 = (isnan(1.0) ? _4763 : (isnan(_4763) ? 1.0 : min(_4763, 1.0))) * (_2913 / ((_2917 * _2917) * 3.141590118408203125));
        float _2944 = isnan(1.0) ? _2298 : (isnan(_2298) ? 1.0 : min(_2298, 1.0));
        _2860 = (((((_2924 * _2580) + _963) * cbLight._m0[_2875].x) * _2943) * _2944) + _2750;
        _2862 = (((((_2924 * _2582) + _965) * cbLight._m0[_2875].y) * _2943) * _2944) + _2752;
        _2864 = (((((_2924 * _2583) + _966) * cbLight._m0[_2875].z) * _2943) * _2944) + _2754;
    }
    float _3010;
    float _3012;
    float _3014;
    float _3016;
    float _3018;
    float _3020;
    if (_2280.y == 0u)
    {
        uvec4 _2965 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2966 = _2965.x;
        uint _2977 = uint((float(_2965.y) * floor(float(uint(cbSceneParam._m0[85u].y * _901) / _2966))) + floor(float(uint(cbSceneParam._m0[85u].x * _900) / _2966)));
        float _2987 = (log2(_2058 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2988 = isnan(0.0) ? _2987 : (isnan(_2987) ? 0.0 : max(_2987, 0.0));
        uint _2991 = uint(isnan(14.0) ? _2988 : (isnan(_2988) ? 14.0 : min(_2988, 14.0)));
        uvec4 _2996 = texelFetch(g_lightClusterGridBuffer, int(((_2991 << 2u) + (_2977 << 6u)) >> 2u));
        uint _2997 = _2996.x;
        uint _2998 = _2965.z;
        float _3077;
        float _3079;
        float _3081;
        float _3083;
        float _3085;
        float _3087;
        if (((((1u << ((_2998 >> 4u) & 15u)) + 4294967295u) & _2997) == 0u) || ((_2998 & 240u) == 0u))
        {
            _3077 = 0.0;
            _3079 = 0.0;
            _3081 = 0.0;
            _3083 = 0.0;
            _3085 = 0.0;
            _3087 = 0.0;
        }
        else
        {
            float _3078;
            float _3080;
            float _3082;
            float _3084;
            float _3086;
            float _3088;
            float _3221 = 0.0;
            float _3222 = 0.0;
            float _3223 = 0.0;
            float _3224 = 0.0;
            float _3225 = 0.0;
            float _3226 = 0.0;
            uint _3227 = 0u;
            uint _3236;
            bool _3237;
            for (;;)
            {
                _3236 = texelFetch(g_lightClassification, int((((_2991 << 5u) + (_2977 << 9u)) + (_3227 << 2u)) >> 2u)).x;
                _3237 = _3236 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3237)
                {
                    frontier_phi_66_pred = _3226;
                    frontier_phi_66_pred_1 = _3225;
                    frontier_phi_66_pred_2 = _3224;
                    frontier_phi_66_pred_3 = _3223;
                    frontier_phi_66_pred_4 = _3222;
                    frontier_phi_66_pred_5 = _3221;
                }
                else
                {
                    float _3345;
                    float _3346;
                    float _3347;
                    float _3348;
                    float _3349;
                    float _3350;
                    uint _3351;
                    _3345 = _3221;
                    _3346 = _3222;
                    _3347 = _3223;
                    _3348 = _3224;
                    _3349 = _3225;
                    _3350 = _3226;
                    _3351 = _3236;
                    float _3277;
                    float _3278;
                    float _3279;
                    float _3280;
                    float _3281;
                    float _3282;
                    for (;;)
                    {
                        uint _3355 = uint(findLSB(_3351)) + (_3227 << 5u);
                        uint _3352 = (_3351 + 4294967295u) & _3351;
                        uint _3357 = _3355 * 48u;
                        vec4 _3371 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3357)).x, texelFetch(g_PointLightRenderingBuffer, int(_3357 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3357 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3357 + 3u)).x));
                        uint _3377 = (_3355 * 48u) + 4u;
                        vec4 _3390 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3377)).x, texelFetch(g_PointLightRenderingBuffer, int(_3377 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3377 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3377 + 3u)).x));
                        uint _3396 = (_3355 * 48u) + 8u;
                        vec3 _3407 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3396)).x, texelFetch(g_PointLightRenderingBuffer, int(_3396 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3396 + 2u)).x));
                        float _3411 = _3371.x - _2056;
                        float _3412 = _3371.y - _2057;
                        float _3413 = _3371.z - _2058;
                        float _3414 = dot(vec3(_3411, _3412, _3413), vec3(_3411, _3412, _3413));
                        float _3417 = inversesqrt(_3414);
                        float _3418 = _3417 * _3411;
                        float _3419 = _3417 * _3412;
                        float _3420 = _3417 * _3413;
                        float _3421 = dot(vec3(_919, _922, _925), vec3(_3418, _3419, _3420));
                        float _3426 = 1.0 - (_3414 * _3371.w);
                        float _4789 = isnan(0.0) ? _3426 : (isnan(_3426) ? 0.0 : max(_3426, 0.0));
                        float _3427 = isnan(1.0) ? _4789 : (isnan(_4789) ? 1.0 : min(_4789, 1.0));
                        float _3428 = sqrt(_3414) * _3390.w;
                        float _3431 = 1.39999997615814208984375 / (_3428 + 1.39999997615814208984375);
                        float _3432 = _3431 * _3431;
                        float _3435 = ((1.0 - _3432) * _3421) + _3432;
                        float _3438 = _3428 * _3428;
                        float _3442 = ((isnan(0.0) ? _3435 : (isnan(_3435) ? 0.0 : max(_3435, 0.0))) * _3427) / ((_3438 * 0.699999988079071044921875) + 1.0);
                        float _3446 = (-0.0) - _2056;
                        float _3447 = (-0.0) - _2057;
                        float _3448 = (-0.0) - _2058;
                        float _3452 = inversesqrt(dot(vec3(_3446, _3447, _3448), vec3(_3446, _3447, _3448)));
                        float _3453 = _3452 * _3446;
                        float _3454 = _3452 * _3447;
                        float _3455 = _3452 * _3448;
                        float _3462 = exp2(log2(1.0 / ((_3438 * 3.5) + 5.0)) * 0.25);
                        float _3463 = 1.0 - _994;
                        float _3470 = sqrt(1.0 - ((1.0 - (_3463 * _3463)) * (1.0 - (_3462 * _3462))));
                        float _3471 = _3470 * _3470;
                        float _3472 = _3471 * _3471;
                        float _3473 = _3453 + _3418;
                        float _3474 = _3454 + _3419;
                        float _3475 = _3455 + _3420;
                        float _3479 = inversesqrt(dot(vec3(_3473, _3474, _3475), vec3(_3473, _3474, _3475)));
                        float _3483 = dot(vec3(_919, _922, _925), vec3(_3453, _3454, _3455));
                        float _4805 = isnan(0.0) ? _3483 : (isnan(_3483) ? 0.0 : max(_3483, 0.0));
                        float _3486 = isnan(1.0) ? _4805 : (isnan(_4805) ? 1.0 : min(_4805, 1.0));
                        float _3487 = dot(vec3(_919, _922, _925), vec3(_3479 * _3473, _3479 * _3474, _3479 * _3475));
                        float _4816 = isnan(0.0) ? _3487 : (isnan(_3487) ? 0.0 : max(_3487, 0.0));
                        float _3490 = isnan(1.0) ? _4816 : (isnan(_4816) ? 1.0 : min(_4816, 1.0));
                        float _3494 = ((_3490 * _3490) * (_3472 + (-1.0))) + 1.0;
                        float _3495 = _3431 * _3471;
                        float _3496 = _3495 * _3495;
                        float _3499 = ((1.0 - _3496) * _3421) + _3496;
                        float _4827 = isnan(0.0) ? _3499 : (isnan(_3499) ? 0.0 : max(_3499, 0.0));
                        float _3500 = isnan(1.0) ? _4827 : (isnan(_4827) ? 1.0 : min(_4827, 1.0));
                        float _3501 = 1.0 - _3471;
                        float _3511 = (0.5 / (((_3500 * ((_3486 * _3501) + _3471)) + 9.9999999392252902907785028219223e-09) + (((_3500 * _3501) + _3471) * _3486))) * _3500;
                        float _4838 = isnan(0.0) ? _3511 : (isnan(_3511) ? 0.0 : max(_3511, 0.0));
                        float _3522 = (((_3472 * 3.1415927410125732421875) * (isnan(1.0) ? _4838 : (isnan(_4838) ? 1.0 : min(_4838, 1.0)))) / ((_3494 * _3494) * ((_3438 * 2.1991131305694580078125) + 3.141590118408203125))) * _3427;
                        _3280 = (_3442 * _3390.x) + _3348;
                        _3281 = (_3442 * _3390.y) + _3349;
                        _3282 = (_3442 * _3390.z) + _3350;
                        _3277 = (_3522 * _3407.x) + _3345;
                        _3278 = (_3522 * _3407.y) + _3346;
                        _3279 = (_3522 * _3407.z) + _3347;
                        if (_3352 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3345 = _3277;
                            _3346 = _3278;
                            _3347 = _3279;
                            _3348 = _3280;
                            _3349 = _3281;
                            _3350 = _3282;
                            _3351 = _3352;
                        }
                    }
                    frontier_phi_66_pred = _3282;
                    frontier_phi_66_pred_1 = _3281;
                    frontier_phi_66_pred_2 = _3280;
                    frontier_phi_66_pred_3 = _3279;
                    frontier_phi_66_pred_4 = _3278;
                    frontier_phi_66_pred_5 = _3277;
                }
                _3088 = frontier_phi_66_pred;
                _3086 = frontier_phi_66_pred_1;
                _3084 = frontier_phi_66_pred_2;
                _3082 = frontier_phi_66_pred_3;
                _3080 = frontier_phi_66_pred_4;
                _3078 = frontier_phi_66_pred_5;
                uint _3228 = _3227 + 1u;
                if (_3228 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3221 = _3078;
                    _3222 = _3080;
                    _3223 = _3082;
                    _3224 = _3084;
                    _3225 = _3086;
                    _3226 = _3088;
                    _3227 = _3228;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3077 = _3078;
            _3079 = _3080;
            _3081 = _3082;
            _3083 = _3084;
            _3085 = _3086;
            _3087 = _3088;
        }
        uvec4 _3091 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3092 = _3091.z;
        uint _3094 = (_3092 >> 8u) & 15u;
        float _3189;
        float _3191;
        float _3193;
        float _3195;
        float _3197;
        float _3199;
        if (((4294967295u << _3094) & _2997) == 0u)
        {
            _3189 = _3077;
            _3191 = _3079;
            _3193 = _3081;
            _3195 = _3083;
            _3197 = _3085;
            _3199 = _3087;
        }
        else
        {
            float _3214 = inversesqrt(dot(vec3(_2056, _2057, _2058), vec3(_2056, _2057, _2058)));
            float _3215 = _3214 * _2056;
            float _3216 = _3214 * _2057;
            float _3217 = _3214 * _2058;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_3094 < ((_3092 >> 12u) & 15u))
            {
                float _3190;
                float _3192;
                float _3194;
                float _3196;
                float _3198;
                float _3200;
                float _3328 = _3077;
                float _3329 = _3079;
                float _3330 = _3081;
                float _3331 = _3083;
                float _3332 = _3085;
                float _3333 = _3087;
                uint _3334 = _3094;
                uint _3343;
                bool _3344;
                for (;;)
                {
                    _3343 = texelFetch(g_lightClassification, int((((_2991 << 5u) + (_2977 << 9u)) + (_3334 << 2u)) >> 2u)).x;
                    _3344 = _3343 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3344)
                    {
                        frontier_phi_72_pred = _3333;
                        frontier_phi_72_pred_1 = _3332;
                        frontier_phi_72_pred_2 = _3331;
                        frontier_phi_72_pred_3 = _3330;
                        frontier_phi_72_pred_4 = _3329;
                        frontier_phi_72_pred_5 = _3328;
                    }
                    else
                    {
                        float _3527;
                        float _3528;
                        float _3529;
                        float _3530;
                        float _3531;
                        float _3532;
                        float _3821;
                        float _3822;
                        float _3823;
                        float _3824;
                        float _3825;
                        float _3826;
                        float _3540 = _3328;
                        float _3541 = _3329;
                        float _3542 = _3330;
                        float _3543 = _3331;
                        float _3544 = _3332;
                        float _3545 = _3333;
                        uint _3546 = _3343;
                        uint _3547;
                        vec4 _3572;
                        float _3573;
                        vec4 _3588;
                        vec3 _3600;
                        vec4 _3615;
                        vec4 _3630;
                        float _3677;
                        bool _3678;
                        for (;;)
                        {
                            uint _3557 = ((_3334 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3546));
                            _3547 = (_3546 + 4294967295u) & _3546;
                            uint _3559 = _3557 * 40u;
                            _3572 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3559)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3559 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3559 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3559 + 3u)).x));
                            _3573 = _3572.w;
                            uint _3575 = (_3557 * 40u) + 4u;
                            _3588 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3575)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3575 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3575 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3575 + 3u)).x));
                            uint _3590 = (_3557 * 40u) + 8u;
                            _3600 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3590)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3590 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3590 + 2u)).x));
                            uint _3602 = (_3557 * 40u) + 16u;
                            _3615 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3602)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3602 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3602 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3602 + 3u)).x));
                            uint _3617 = (_3557 * 40u) + 20u;
                            _3630 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3617)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3617 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3617 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3617 + 3u)).x));
                            uint _3633 = (_3557 * 40u) + 24u;
                            vec4 _3646 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3633)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3633 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3633 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3633 + 3u)).x));
                            uint _3652 = (_3557 * 40u) + 28u;
                            vec4 _3665 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3652)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3652 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3652 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3652 + 3u)).x));
                            _3677 = fma(_2058, _3665.z, fma(_2057, _3665.y, _3665.x * _2056)) + _3665.w;
                            _3678 = !((fma(_2058, _3646.z, fma(_2057, _3646.y, _3646.x * _2056)) + _3646.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3678)
                            {
                                float _3705 = _3572.x - _2056;
                                float _3706 = _3572.y - _2057;
                                float _3707 = _3572.z - _2058;
                                float _3708 = dot(vec3(_3705, _3706, _3707), vec3(_3705, _3706, _3707));
                                float _3711 = inversesqrt(_3708);
                                float _3712 = _3711 * _3705;
                                float _3713 = _3711 * _3706;
                                float _3714 = _3711 * _3707;
                                float _3718 = 1.0 - (_3708 / (_3573 * _3573));
                                float _4849 = isnan(0.0) ? _3718 : (isnan(_3718) ? 0.0 : max(_3718, 0.0));
                                float _3719 = isnan(1.0) ? _4849 : (isnan(_4849) ? 1.0 : min(_4849, 1.0));
                                float _3723 = sqrt(_3708) * _3588.w;
                                float _3725 = 1.39999997615814208984375 / (_3723 + 1.39999997615814208984375);
                                float _3726 = _3725 * _3725;
                                float _3729 = ((1.0 - _3726) * dot(vec3(_3712, _3713, _3714), vec3(_919, _922, _925))) + _3726;
                                float _3732 = _3723 * _3723;
                                float _3736 = (fma(_2058, _3615.z, fma(_2057, _3615.y, _3615.x * _2056)) + _3615.w) / _3677;
                                float _3737 = (fma(_2058, _3630.z, fma(_2057, _3630.y, _3630.x * _2056)) + _3630.w) / _3677;
                                float _3741 = 1.0 - dot(vec2(_3736, _3737), vec2(_3736, _3737));
                                float _4865 = isnan(0.0) ? _3741 : (isnan(_3741) ? 0.0 : max(_3741, 0.0));
                                float _3742 = isnan(1.0) ? _4865 : (isnan(_4865) ? 1.0 : min(_4865, 1.0));
                                float _3743 = _3742 * (((isnan(0.0) ? _3729 : (isnan(_3729) ? 0.0 : max(_3729, 0.0))) * _3719) / ((_3732 * 0.699999988079071044921875) + 1.0));
                                float _3755 = exp2(log2(1.0 / ((_3732 * 3.5) + 5.0)) * 0.25);
                                float _3756 = 1.0 - _994;
                                float _3763 = sqrt(1.0 - ((1.0 - (_3756 * _3756)) * (1.0 - (_3755 * _3755))));
                                float _3764 = _3763 * _3763;
                                float _3765 = _3764 * _3764;
                                float _3766 = _3712 - _3215;
                                float _3767 = _3713 - _3216;
                                float _3768 = _3714 - _3217;
                                float _3772 = inversesqrt(dot(vec3(_3766, _3767, _3768), vec3(_3766, _3767, _3768)));
                                float _3776 = dot(vec3(_919, _922, _925), vec3((-0.0) - _3215, (-0.0) - _3216, (-0.0) - _3217));
                                float _4876 = isnan(0.0) ? _3776 : (isnan(_3776) ? 0.0 : max(_3776, 0.0));
                                float _3779 = isnan(1.0) ? _4876 : (isnan(_4876) ? 1.0 : min(_4876, 1.0));
                                float _3780 = dot(vec3(_919, _922, _925), vec3(_3772 * _3766, _3772 * _3767, _3772 * _3768));
                                float _4887 = isnan(0.0) ? _3780 : (isnan(_3780) ? 0.0 : max(_3780, 0.0));
                                float _3783 = isnan(1.0) ? _4887 : (isnan(_4887) ? 1.0 : min(_4887, 1.0));
                                float _3787 = ((_3783 * _3783) * (_3765 + (-1.0))) + 1.0;
                                float _3788 = _3725 * _3764;
                                float _3789 = _3788 * _3788;
                                float _3795 = ((1.0 - _3789) * dot(vec3(_919, _922, _925), vec3(_3712, _3713, _3714))) + _3789;
                                float _4898 = isnan(0.0) ? _3795 : (isnan(_3795) ? 0.0 : max(_3795, 0.0));
                                float _3796 = isnan(1.0) ? _4898 : (isnan(_4898) ? 1.0 : min(_4898, 1.0));
                                float _3797 = 1.0 - _3764;
                                float _3807 = (0.5 / (((_3796 * ((_3779 * _3797) + _3764)) + 9.9999999392252902907785028219223e-09) + (((_3796 * _3797) + _3764) * _3779))) * _3796;
                                float _4909 = isnan(0.0) ? _3807 : (isnan(_3807) ? 0.0 : max(_3807, 0.0));
                                float _3817 = (_3742 * _3719) * (((_3765 * 3.1415927410125732421875) * (isnan(1.0) ? _4909 : (isnan(_4909) ? 1.0 : min(_4909, 1.0)))) / ((_3787 * _3787) * ((_3732 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3743 * _3588.y;
                                frontier_phi_78_pred_1 = _3743 * _3588.x;
                                frontier_phi_78_pred_2 = _3817 * _3600.z;
                                frontier_phi_78_pred_3 = _3817 * _3600.y;
                                frontier_phi_78_pred_4 = _3817 * _3600.x;
                                frontier_phi_78_pred_5 = _3743 * _3588.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3825 = frontier_phi_78_pred;
                            _3824 = frontier_phi_78_pred_1;
                            _3823 = frontier_phi_78_pred_2;
                            _3822 = frontier_phi_78_pred_3;
                            _3821 = frontier_phi_78_pred_4;
                            _3826 = frontier_phi_78_pred_5;
                            _3530 = _3824 + _3543;
                            _3531 = _3825 + _3544;
                            _3532 = _3826 + _3545;
                            _3527 = _3821 + _3540;
                            _3528 = _3822 + _3541;
                            _3529 = _3823 + _3542;
                            if (_3547 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3540 = _3527;
                                _3541 = _3528;
                                _3542 = _3529;
                                _3543 = _3530;
                                _3544 = _3531;
                                _3545 = _3532;
                                _3546 = _3547;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3532;
                        frontier_phi_72_pred_1 = _3531;
                        frontier_phi_72_pred_2 = _3530;
                        frontier_phi_72_pred_3 = _3529;
                        frontier_phi_72_pred_4 = _3528;
                        frontier_phi_72_pred_5 = _3527;
                    }
                    _3200 = frontier_phi_72_pred;
                    _3198 = frontier_phi_72_pred_1;
                    _3196 = frontier_phi_72_pred_2;
                    _3194 = frontier_phi_72_pred_3;
                    _3192 = frontier_phi_72_pred_4;
                    _3190 = frontier_phi_72_pred_5;
                    uint _3335 = _3334 + 1u;
                    if (_3335 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3328 = _3190;
                        _3329 = _3192;
                        _3330 = _3194;
                        _3331 = _3196;
                        _3332 = _3198;
                        _3333 = _3200;
                        _3334 = _3335;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3200;
                frontier_phi_60_61_ladder_1 = _3198;
                frontier_phi_60_61_ladder_2 = _3194;
                frontier_phi_60_61_ladder_3 = _3192;
                frontier_phi_60_61_ladder_4 = _3190;
                frontier_phi_60_61_ladder_5 = _3196;
            }
            else
            {
                frontier_phi_60_61_ladder = _3087;
                frontier_phi_60_61_ladder_1 = _3085;
                frontier_phi_60_61_ladder_2 = _3081;
                frontier_phi_60_61_ladder_3 = _3079;
                frontier_phi_60_61_ladder_4 = _3077;
                frontier_phi_60_61_ladder_5 = _3083;
            }
            _3189 = frontier_phi_60_61_ladder_4;
            _3191 = frontier_phi_60_61_ladder_3;
            _3193 = frontier_phi_60_61_ladder_2;
            _3195 = frontier_phi_60_61_ladder_5;
            _3197 = frontier_phi_60_61_ladder_1;
            _3199 = frontier_phi_60_61_ladder;
        }
        float _3204 = isnan(1.0) ? _978 : (isnan(_978) ? 1.0 : min(_978, 1.0));
        _3010 = (_3204 * _3195) + _2522;
        _3012 = (_3204 * _3197) + _2524;
        _3014 = (_3204 * _3199) + _2526;
        _3016 = ((_3189 * _963) * _3204) + _2860;
        _3018 = ((_3191 * _965) * _3204) + _2862;
        _3020 = ((_3193 * _966) * _3204) + _2864;
    }
    else
    {
        _3010 = _2522;
        _3012 = _2524;
        _3014 = _2526;
        _3016 = _2860;
        _3018 = _2862;
        _3020 = _2864;
    }
    float _4925 = isnan(0.0) ? _953 : (isnan(_953) ? 0.0 : max(_953, 0.0));
    float _4936 = isnan(0.0) ? _954 : (isnan(_954) ? 0.0 : max(_954, 0.0));
    float _4947 = isnan(0.0) ? _955 : (isnan(_955) ? 0.0 : max(_955, 0.0));
    uint _3040 = _938 + 6u;
    float _3048 = _900 / cbSceneParam._m0[86u].x;
    float _3049 = _901 / cbSceneParam._m0[86u].y;
    vec4 _3063 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3048, _3049, (log2((isnan(cbSceneParam._m0[77u].w) ? _835 : (isnan(_835) ? cbSceneParam._m0[77u].w : min(_835, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3065 = _3063.x;
    float _3066 = _3063.y;
    float _3067 = _3063.z;
    float _3068 = _3063.w;
    float _3139;
    float _3141;
    float _3143;
    float _3145;
    if (_835 > cbSceneParam._m0[78u].w)
    {
        float _3102 = isnan(_835) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _835 : min(cbSceneParam._m0[80u].w, _835));
        float _3103 = _3102 / _835;
        float _3114 = _3103 * _885;
        float _3115 = _886 * _3103;
        float _3116 = (-0.0) - _3115;
        float _3117 = _3103 * _887;
        float _3119 = (cbSceneParam._m0[77u].w * _3116) / _3102;
        float _3120 = _3119 + cbSceneParam._m0[79u].w;
        float _3121 = cbSceneParam._m0[79u].w - _3115;
        float _3127 = sqrt(((_3114 * _3114) + (_3115 * _3115)) + (_3117 * _3117));
        float _3130 = (1.0 - (cbSceneParam._m0[77u].w / _3102)) * _3127;
        float _3135 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3137 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3290;
        if (abs((_3116 - _3119) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3290 = ((((_3120 > 0.0) ? exp2(_3135 * _3120) : (2.0 - exp2(_3137 * _3120))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3130;
        }
        else
        {
            float _3250 = 1.0 / cbSceneParam._m0[80u].x;
            float _3251 = isnan(_3121) ? _3120 : (isnan(_3120) ? _3121 : max(_3120, _3121));
            float _3252 = isnan(_3121) ? _3120 : (isnan(_3120) ? _3121 : min(_3120, _3121));
            float _3261 = isnan(0.0) ? _3251 : (isnan(_3251) ? 0.0 : min(_3251, 0.0));
            float _3262 = isnan(0.0) ? _3252 : (isnan(_3252) ? 0.0 : min(_3252, 0.0));
            _3290 = ((abs(_3127 / _3116) * cbSceneParam._m0[80u].y) * ((((_3261 - _3262) * 2.0) - ((exp2(_3135 * (isnan(0.0) ? _3251 : (isnan(_3251) ? 0.0 : max(_3251, 0.0)))) - exp2(_3135 * (isnan(0.0) ? _3252 : (isnan(_3252) ? 0.0 : max(_3252, 0.0))))) * _3250)) - ((exp2(_3137 * _3261) - exp2(_3137 * _3262)) * _3250))) + (_3130 * cbSceneParam._m0[80u].z);
        }
        vec4 _3292 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3048, _3049, 1.0), 0.0);
        float _3301 = exp2((_3290 * (-1.44269502162933349609375)) * (1.0 - _3292.w));
        float _3302 = log2(_3301);
        float _3318 = log2(_3068);
        _3139 = (exp2(_3318 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3302 * cbSceneParam._m0[78u].x)) * _3292.x) / cbSceneParam._m0[78u].x)) + _3065;
        _3141 = (exp2(_3318 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3302 * cbSceneParam._m0[78u].y)) * _3292.y) / cbSceneParam._m0[78u].y)) + _3066;
        _3143 = (exp2(_3318 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3302 * cbSceneParam._m0[78u].z)) * _3292.z) / cbSceneParam._m0[78u].z)) + _3067;
        _3145 = _3301 * _3068;
    }
    else
    {
        _3139 = _3065;
        _3141 = _3066;
        _3143 = _3067;
        _3145 = _3068;
    }
    float _3157 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3158 = _3157 == 3.0;
    float _3159 = log2(_3145);
    float _3166 = exp2(_3159 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4925 : (isnan(_4925) ? 1.0 : min(_4925, 1.0))) * (_3010 + ((isnan(0.0) ? _1709 : (isnan(_1709) ? 0.0 : max(_1709, 0.0))) * _978))) + ((_3016 + ((isnan(0.0) ? _2003 : (isnan(_2003) ? 0.0 : max(_2003, 0.0))) * _1788)) * cbPerFrame._m0[3u].x));
    float _3167 = exp2(_3159 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4936 : (isnan(_4936) ? 1.0 : min(_4936, 1.0))) * (_3012 + ((isnan(0.0) ? _1712 : (isnan(_1712) ? 0.0 : max(_1712, 0.0))) * _978))) + ((_3018 + ((isnan(0.0) ? _2006 : (isnan(_2006) ? 0.0 : max(_2006, 0.0))) * _1788)) * cbPerFrame._m0[3u].x));
    float _3168 = exp2(_3159 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4947 : (isnan(_4947) ? 1.0 : min(_4947, 1.0))) * (_3014 + ((isnan(0.0) ? _1715 : (isnan(_1715) ? 0.0 : max(_1715, 0.0))) * _978))) + ((_3020 + ((isnan(0.0) ? _2009 : (isnan(_2009) ? 0.0 : max(_2009, 0.0))) * _1788)) * cbPerFrame._m0[3u].x));
    float _3177 = (_3157 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3177 * (_3158 ? _3166 : (_3166 + (cbSceneParam._m0[72u].w * _3139)));
    SV_Target.y = _3177 * (_3158 ? _3167 : (_3167 + (cbSceneParam._m0[72u].w * _3141)));
    SV_Target.z = _3177 * (_3158 ? _3168 : (_3168 + (cbSceneParam._m0[72u].w * _3143)));
    SV_Target.w = cbInstanceData._m0[_3040].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3040].w;
}


