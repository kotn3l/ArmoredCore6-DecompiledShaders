#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[20];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_19;
layout(set = 0, binding = 11) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_3;
layout(set = 0, binding = 14) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_5;
layout(set = 0, binding = 15) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_6;
layout(set = 0, binding = 16) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_7;
layout(set = 0, binding = 17) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_8;
layout(set = 0, binding = 2) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_13;
layout(set = 0, binding = 5) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_14;
layout(set = 0, binding = 6) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_15;
layout(set = 0, binding = 7) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_16;
layout(set = 0, binding = 8) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_17;
layout(set = 0, binding = 9) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_18;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1243;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _203 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _204 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _205 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _211 = inversesqrt(dot(vec3(_203, _204, _205), vec3(_203, _204, _205)));
    float _218 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _225 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _248 = sin(cbMtdParam._m0[18u].x);
    float _249 = cos(cbMtdParam._m0[18u].x);
    float _250 = TEXCOORD.x - cbMtdParam._m0[17u].w;
    float _251 = TEXCOORD.y - cbMtdParam._m0[17u].w;
    float _259 = (cbMtdParam._m0[17u].w + cbMtdParam._m0[19u].y) + fma(_251, (-0.0) - _248, _249 * _250);
    float _261 = (cbMtdParam._m0[17u].w + cbMtdParam._m0[19u].z) + fma(_251, _249, _250 * _248);
    vec4 _274 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * _259) + cbTextureTilingScale._m0[1u].z, (_261 * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w));
    float _280 = _274.x * cbMtdParam._m0[10u].x;
    float _281 = _274.y * cbMtdParam._m0[10u].y;
    float _282 = _274.z * cbMtdParam._m0[10u].z;
    vec4 _300 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w));
    vec4 _319 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_0, SS_WrapLinear), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _344 = cbMtdParam._m0[19u].x * texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.x) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD.y) + cbTextureTilingScale._m0[13u].w)).x;
    float _355 = ((cbMtdParam._m0[15u].x * (-1.39999997615814208984375)) * (((1.0 - _319.x) * 2.0) - _344)) + 1.0;
    float _3595 = isnan(0.0) ? _355 : (isnan(_355) ? 0.0 : max(_355, 0.0));
    float _356 = isnan(1.0) ? _3595 : (isnan(_3595) ? 1.0 : min(_3595, 1.0));
    float _363 = (_356 * ((_300.x * cbMtdParam._m0[11u].x) - _280)) + _280;
    float _364 = (_356 * ((_300.y * cbMtdParam._m0[11u].y) - _281)) + _281;
    float _365 = (_356 * ((_300.z * cbMtdParam._m0[11u].z) - _282)) + _282;
    vec4 _383 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_8, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[17u].x * TEXCOORD.x) + cbTextureTilingScale._m0[17u].z, (cbTextureTilingScale._m0[17u].y * TEXCOORD.y) + cbTextureTilingScale._m0[17u].w));
    float _396 = (((((1.0 - _319.y) * 2.0) - _344) * (-1.39999997615814208984375)) * cbMtdParam._m0[18u].z) + 1.0;
    float _3606 = isnan(0.0) ? _396 : (isnan(_396) ? 0.0 : max(_396, 0.0));
    float _397 = isnan(1.0) ? _3606 : (isnan(_3606) ? 1.0 : min(_3606, 1.0));
    float _404 = (((_383.x * cbMtdParam._m0[12u].x) - _363) * _397) + _363;
    float _405 = (_397 * ((_383.y * cbMtdParam._m0[12u].y) - _364)) + _364;
    float _406 = (_397 * ((_383.z * cbMtdParam._m0[12u].z) - _365)) + _365;
    vec4 _423 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _436 = (((((1.0 - _319.z) * 2.0) - _344) * (-1.39999997615814208984375)) * cbMtdParam._m0[18u].w) + 1.0;
    float _3617 = isnan(0.0) ? _436 : (isnan(_436) ? 0.0 : max(_436, 0.0));
    float _437 = isnan(1.0) ? _3617 : (isnan(_3617) ? 1.0 : min(_3617, 1.0));
    vec4 _465 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _473 = ((((((_423.x * cbMtdParam._m0[13u].x) - _404) * _437) + _404) * 4.55000019073486328125) * cbMtdParam._m0[9u].x) * _465.x;
    float _476 = ((((_437 * ((_423.y * cbMtdParam._m0[13u].y) - _405)) + _405) * 4.55000019073486328125) * cbMtdParam._m0[9u].y) * _465.y;
    float _479 = ((((_437 * ((_423.z * cbMtdParam._m0[13u].z) - _406)) + _406) * 4.55000019073486328125) * cbMtdParam._m0[9u].z) * _465.z;
    vec4 _492 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * _259) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _261) + cbTextureTilingScale._m0[5u].w));
    float _494 = _492.x;
    float _512 = ((texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w)).x - _494) * _356) + _494;
    float _529 = ((texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w)).x - _512) * _397) + _512;
    float _548 = (((texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w)).x - _529) * _437) + _529) * cbMtdParam._m0[18u].y;
    vec4 _561 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[14u].x * _259) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _261) + cbTextureTilingScale._m0[14u].w));
    float _563 = _561.x;
    float _564 = _561.y;
    float _567 = cbMtdParam._m0[17u].y * _561.z;
    vec4 _579 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * TEXCOORD.x) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * TEXCOORD.y) + cbTextureTilingScale._m0[15u].w));
    float _588 = (((cbMtdParam._m0[17u].x * _579.z) - _567) * _356) + _567;
    vec4 _601 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_15, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _613 = (((cbMtdParam._m0[16u].w * _601.z) - _588) * _397) + _588;
    vec4 _626 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _635 = (((cbMtdParam._m0[16u].z * _626.z) - _613) * _437) + _613;
    vec4 _648 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[16u].x * TEXCOORD.x) + cbTextureTilingScale._m0[16u].z, (cbTextureTilingScale._m0[16u].y * TEXCOORD.y) + cbTextureTilingScale._m0[16u].w));
    float _661 = ((_579.x - _563) * _356) + _563;
    float _662 = ((_579.y - _564) * _356) + _564;
    float _667 = ((_601.x - _661) * _397) + _661;
    float _668 = ((_601.y - _662) * _397) + _662;
    float _677 = ((((_626.x - _667) * _437) + _667) * 2.0) + (-1.0);
    float _678 = ((((_626.y - _668) * _437) + _668) * 2.0) + (-1.0);
    float _679 = dot(vec2(_677, _678), vec2(_677, _678));
    float _3628 = isnan(0.0) ? _679 : (isnan(_679) ? 0.0 : max(_679, 0.0));
    float _684 = sqrt(1.0 - (isnan(1.0) ? _3628 : (isnan(_3628) ? 1.0 : min(_3628, 1.0))));
    float _687 = (((_648.x * 2.0) + (-1.0)) * cbMtdParam._m0[16u].y) + _677;
    float _688 = (((_648.y * 2.0) + (-1.0)) * cbMtdParam._m0[16u].y) + _678;
    float _691 = fma(_684, _218 * NORMAL.x, fma(_688, _225 * TANGENT.x, (_211 * _203) * _687));
    float _694 = fma(_684, _218 * NORMAL.y, fma(_688, _225 * TANGENT.y, (_211 * _204) * _687));
    float _697 = fma(_684, _218 * NORMAL.z, fma(_688, _225 * TANGENT.z, (_211 * _205) * _687));
    float _701 = inversesqrt(dot(vec3(_691, _694, _697), vec3(_691, _694, _697)));
    float _702 = _701 * _691;
    float _703 = _701 * _694;
    float _704 = _701 * _697;
    float _3639 = isnan(0.0) ? _635 : (isnan(_635) ? 0.0 : max(_635, 0.0));
    float _705 = isnan(1.0) ? _3639 : (isnan(_3639) ? 1.0 : min(_3639, 1.0));
    float _3650 = isnan(0.0) ? _473 : (isnan(_473) ? 0.0 : max(_473, 0.0));
    float _3661 = isnan(0.0) ? _476 : (isnan(_476) ? 0.0 : max(_476, 0.0));
    float _3672 = isnan(0.0) ? _479 : (isnan(_479) ? 0.0 : max(_479, 0.0));
    float _3683 = isnan(0.0) ? _548 : (isnan(_548) ? 0.0 : max(_548, 0.0));
    float _709 = isnan(1.0) ? _3683 : (isnan(_3683) ? 1.0 : min(_3683, 1.0));
    float _725 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _765 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _775 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _765);
    float _776 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _765);
    float _777 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _765);
    float _781 = inversesqrt(dot(vec3(_775, _776, _777), vec3(_775, _776, _777)));
    float _782 = _775 * _781;
    float _783 = _776 * _781;
    float _784 = _777 * _781;
    float _790 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _791 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _809 = fma(_704, cbSceneParam._m0[5u].z, fma(_703, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _702));
    float _812 = fma(_704, cbSceneParam._m0[6u].z, fma(_703, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _702));
    float _815 = fma(_704, cbSceneParam._m0[7u].z, fma(_703, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _702));
    uint _828 = uint(roundEven(NORMAL.w)) * 13u;
    uint _830 = (_828 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _836 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3650 : (isnan(_3650) ? 1.0 : min(_3650, 1.0)))) * cbInstanceData._m0[_830].x;
    float _837 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3661 : (isnan(_3661) ? 1.0 : min(_3661, 1.0)))) * cbInstanceData._m0[_830].y;
    float _838 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3672 : (isnan(_3672) ? 1.0 : min(_3672, 1.0)))) * cbInstanceData._m0[_830].z;
    float _3694 = isnan(0.0) ? _836 : (isnan(_836) ? 0.0 : max(_836, 0.0));
    float _839 = isnan(1.0) ? _3694 : (isnan(_3694) ? 1.0 : min(_3694, 1.0));
    float _3705 = isnan(0.0) ? _837 : (isnan(_837) ? 0.0 : max(_837, 0.0));
    float _840 = isnan(1.0) ? _3705 : (isnan(_3705) ? 1.0 : min(_3705, 1.0));
    float _3716 = isnan(0.0) ? _838 : (isnan(_838) ? 0.0 : max(_838, 0.0));
    float _841 = isnan(1.0) ? _3716 : (isnan(_3716) ? 1.0 : min(_3716, 1.0));
    float _842 = 1.0 - _709;
    float _843 = _839 * _842;
    float _844 = _840 * _842;
    float _845 = _841 * _842;
    float _850 = (_839 + (-0.039999999105930328369140625)) * _709;
    float _851 = (_840 + (-0.039999999105930328369140625)) * _709;
    float _852 = (_841 + (-0.039999999105930328369140625)) * _709;
    float _853 = _850 + 0.039999999105930328369140625;
    float _855 = _851 + 0.039999999105930328369140625;
    float _856 = _852 + 0.039999999105930328369140625;
    vec4 _865 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _790, cbSceneParam._m0[86u].y * _791));
    float _868 = _865.x * TEXCOORD_5.w;
    float _869 = dot(vec3(_702, _703, _704), vec3(_782, _783, _784));
    float _872 = _869 * 2.0;
    float _876 = (_872 * _702) - _782;
    float _877 = (_872 * _703) - _783;
    float _878 = (_872 * _704) - _784;
    float _882 = abs(dot(vec3(_782, _783, _784), vec3(_702, _703, _704)));
    float _3727 = isnan(0.0) ? _882 : (isnan(_882) ? 0.0 : max(_882, 0.0));
    float _884 = sqrt(_705);
    float _897 = exp2((_884 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3727 : (isnan(_3727) ? 1.0 : min(_3727, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_884 * 3.0));
    float _903 = (1.0 - _897) * ((_884 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _904 = _897 * _884;
    float _932 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _936 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _940 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1242;
    float _1244;
    float _1245;
    float _1246;
    float _1247;
    float _1248;
    float _1249;
    float _1250;
    float _1251;
    float _1252;
    float _1253;
    float _1254;
    float _1255;
    float _1256;
    float _1257;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _967 = fma(_940, cbModelParam._m0[26u].z, fma(_936, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _932));
        float _971 = fma(_940, cbModelParam._m0[27u].z, fma(_936, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _932));
        float _975 = fma(_940, cbModelParam._m0[28u].z, fma(_936, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _932));
        float _1000 = _932 + _702;
        float _1001 = _936 + _703;
        float _1002 = _940 + _704;
        float _1012 = fma(_1002, cbModelParam._m0[26u].z, fma(_1001, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1000)) - _967;
        float _1013 = fma(_1002, cbModelParam._m0[27u].z, fma(_1001, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1000)) - _971;
        float _1014 = fma(_1002, cbModelParam._m0[28u].z, fma(_1001, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1000)) - _975;
        float _1018 = inversesqrt(dot(vec3(_1012, _1013, _1014), vec3(_1012, _1013, _1014)));
        float _1031 = ((_1018 * _1012) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_967 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1032 = ((_1018 * _1013) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_971 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1033 = ((_1018 * _1014) / cbModelParam._m0[34u].z) + ((((((_975 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1036 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1031, _1032, _1033), 0.0);
        vec4 _1043 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1031, _1032, _1033), 0.0);
        vec4 _1050 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1031, _1032, _1033), 0.0);
        vec4 _1057 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1031, _1032, _1033), 0.0);
        float _1070 = exp2((_1036.w + (-0.5)) * 20.0) * 2.0;
        float _1071 = _1070 * (_1036.x + (-0.5));
        float _1072 = _1070 * (_1036.y + (-0.5));
        float _1073 = _1070 * (_1036.z + (-0.5));
        float _1080 = exp2((_1043.w + (-0.5)) * 20.0) * 2.0;
        float _1081 = _1080 * (_1043.x + (-0.5));
        float _1082 = _1080 * (_1043.y + (-0.5));
        float _1083 = _1080 * (_1043.z + (-0.5));
        float _1090 = exp2((_1050.w + (-0.5)) * 20.0) * 2.0;
        float _1091 = _1090 * (_1050.x + (-0.5));
        float _1092 = _1090 * (_1050.y + (-0.5));
        float _1093 = _1090 * (_1050.z + (-0.5));
        float _1100 = exp2((_1057.w + (-0.5)) * 20.0) * 2.0;
        float _1101 = _1100 * (_1057.x + (-0.5));
        float _1102 = _1100 * (_1057.y + (-0.5));
        float _1103 = _1100 * (_1057.z + (-0.5));
        float _1104 = isnan(0.0) ? _1101 : (isnan(_1101) ? 0.0 : max(_1101, 0.0));
        float _1105 = isnan(0.0) ? _1102 : (isnan(_1102) ? 0.0 : max(_1102, 0.0));
        float _1106 = isnan(0.0) ? _1103 : (isnan(_1103) ? 0.0 : max(_1103, 0.0));
        float _1107 = _1071 * 0.5;
        float _1108 = _1081 * 0.5;
        float _1109 = _1091 * 0.5;
        float _1110 = dot(vec3(_1107, _1108, _1109), vec3(_1107, _1108, _1109));
        float _1115 = (_1110 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1110);
        float _1124 = (dot(vec3(_702, _703, _704), vec3(_1115 * _1107, _1115 * _1108, _1115 * _1109)) + 1.0) * 0.5;
        float _3753 = isnan(0.0) ? _1124 : (isnan(_1124) ? 0.0 : max(_1124, 0.0));
        float _1134 = sqrt(((_1108 * _1108) + (_1107 * _1107)) + (_1109 * _1109)) / (_1104 + 9.9999997473787516355514526367188e-06);
        float _3764 = isnan(0.0) ? _1134 : (isnan(_1134) ? 0.0 : max(_1134, 0.0));
        float _1135 = isnan(1.0) ? _3764 : (isnan(_3764) ? 1.0 : min(_3764, 1.0));
        float _1136 = _1135 * 2.0;
        float _1140 = (1.0 - _1135) / (_1135 + 1.0);
        float _3775 = isnan(0.0) ? _1140 : (isnan(_1140) ? 0.0 : max(_1140, 0.0));
        float _1141 = isnan(1.0) ? _3775 : (isnan(_3775) ? 1.0 : min(_3775, 1.0));
        float _1150 = ((((1.0 - _1141) * (_1136 + 2.0)) * exp2(log2(isnan(1.0) ? _3753 : (isnan(_3753) ? 1.0 : min(_3753, 1.0))) * (_1136 + 1.0))) + _1141) * _1104;
        float _1151 = _1072 * 0.5;
        float _1152 = _1082 * 0.5;
        float _1153 = _1092 * 0.5;
        float _1154 = dot(vec3(_1151, _1152, _1153), vec3(_1151, _1152, _1153));
        float _1159 = (_1154 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1154);
        float _1167 = (dot(vec3(_702, _703, _704), vec3(_1159 * _1151, _1159 * _1152, _1159 * _1153)) + 1.0) * 0.5;
        float _3786 = isnan(0.0) ? _1167 : (isnan(_1167) ? 0.0 : max(_1167, 0.0));
        float _1176 = sqrt(((_1152 * _1152) + (_1151 * _1151)) + (_1153 * _1153)) / (_1105 + 9.9999997473787516355514526367188e-06);
        float _3797 = isnan(0.0) ? _1176 : (isnan(_1176) ? 0.0 : max(_1176, 0.0));
        float _1177 = isnan(1.0) ? _3797 : (isnan(_3797) ? 1.0 : min(_3797, 1.0));
        float _1178 = _1177 * 2.0;
        float _1182 = (1.0 - _1177) / (_1177 + 1.0);
        float _3808 = isnan(0.0) ? _1182 : (isnan(_1182) ? 0.0 : max(_1182, 0.0));
        float _1183 = isnan(1.0) ? _3808 : (isnan(_3808) ? 1.0 : min(_3808, 1.0));
        float _1192 = ((((1.0 - _1183) * (_1178 + 2.0)) * exp2(log2(isnan(1.0) ? _3786 : (isnan(_3786) ? 1.0 : min(_3786, 1.0))) * (_1178 + 1.0))) + _1183) * _1105;
        float _1193 = _1073 * 0.5;
        float _1194 = _1083 * 0.5;
        float _1195 = _1093 * 0.5;
        float _1196 = dot(vec3(_1193, _1194, _1195), vec3(_1193, _1194, _1195));
        float _1201 = (_1196 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1196);
        float _1209 = (dot(vec3(_702, _703, _704), vec3(_1201 * _1193, _1201 * _1194, _1201 * _1195)) + 1.0) * 0.5;
        float _3819 = isnan(0.0) ? _1209 : (isnan(_1209) ? 0.0 : max(_1209, 0.0));
        float _1218 = sqrt(((_1194 * _1194) + (_1193 * _1193)) + (_1195 * _1195)) / (_1106 + 9.9999997473787516355514526367188e-06);
        float _3830 = isnan(0.0) ? _1218 : (isnan(_1218) ? 0.0 : max(_1218, 0.0));
        float _1219 = isnan(1.0) ? _3830 : (isnan(_3830) ? 1.0 : min(_3830, 1.0));
        float _1220 = _1219 * 2.0;
        float _1224 = (1.0 - _1219) / (_1219 + 1.0);
        float _3841 = isnan(0.0) ? _1224 : (isnan(_1224) ? 0.0 : max(_1224, 0.0));
        float _1225 = isnan(1.0) ? _3841 : (isnan(_3841) ? 1.0 : min(_3841, 1.0));
        float _1234 = ((((1.0 - _1225) * (_1220 + 2.0)) * exp2(log2(isnan(1.0) ? _3819 : (isnan(_3819) ? 1.0 : min(_3819, 1.0))) * (_1220 + 1.0))) + _1225) * _1106;
        _1242 = _1073;
        _1244 = _1072;
        _1245 = _1071;
        _1246 = _1083;
        _1247 = _1082;
        _1248 = _1081;
        _1249 = _1093;
        _1250 = _1092;
        _1251 = _1091;
        _1252 = _1106;
        _1253 = _1105;
        _1254 = _1104;
        _1255 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1150 : (isnan(_1150) ? 0.0 : max(_1150, 0.0)));
        _1256 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1192 : (isnan(_1192) ? 0.0 : max(_1192, 0.0)));
        _1257 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1234 : (isnan(_1234) ? 0.0 : max(_1234, 0.0)));
    }
    else
    {
        _1242 = _1243;
        _1244 = _1243;
        _1245 = _1243;
        _1246 = _1243;
        _1247 = _1243;
        _1248 = _1243;
        _1249 = _1243;
        _1250 = _1243;
        _1251 = _1243;
        _1252 = _1243;
        _1253 = _1243;
        _1254 = _1243;
        _1255 = 0.0;
        _1256 = 0.0;
        _1257 = 0.0;
    }
    float _1552;
    float _1553;
    float _1554;
    float _1555;
    float _1556;
    float _1557;
    float _1558;
    float _1559;
    float _1560;
    float _1561;
    float _1562;
    float _1563;
    float _1564;
    float _1565;
    float _1566;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1283 = fma(_940, cbModelParam._m0[30u].z, fma(_936, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _932));
        float _1287 = fma(_940, cbModelParam._m0[31u].z, fma(_936, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _932));
        float _1291 = fma(_940, cbModelParam._m0[32u].z, fma(_936, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _932));
        float _1314 = _932 + _702;
        float _1315 = _936 + _703;
        float _1316 = _940 + _704;
        float _1326 = fma(_1316, cbModelParam._m0[30u].z, fma(_1315, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1314)) - _1283;
        float _1327 = fma(_1316, cbModelParam._m0[31u].z, fma(_1315, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1314)) - _1287;
        float _1328 = fma(_1316, cbModelParam._m0[32u].z, fma(_1315, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1314)) - _1291;
        float _1332 = inversesqrt(dot(vec3(_1326, _1327, _1328), vec3(_1326, _1327, _1328)));
        float _1345 = ((_1332 * _1326) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1283 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1346 = ((_1332 * _1327) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1287 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1347 = ((_1332 * _1328) / cbModelParam._m0[35u].z) + ((((((_1291 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1349 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1345, _1346, _1347), 0.0);
        vec4 _1356 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1345, _1346, _1347), 0.0);
        vec4 _1363 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1345, _1346, _1347), 0.0);
        vec4 _1370 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1345, _1346, _1347), 0.0);
        float _1382 = exp2((_1349.w + (-0.5)) * 20.0) * 2.0;
        float _1383 = _1382 * (_1349.x + (-0.5));
        float _1384 = _1382 * (_1349.y + (-0.5));
        float _1385 = _1382 * (_1349.z + (-0.5));
        float _1392 = exp2((_1356.w + (-0.5)) * 20.0) * 2.0;
        float _1393 = _1392 * (_1356.x + (-0.5));
        float _1394 = _1392 * (_1356.y + (-0.5));
        float _1395 = _1392 * (_1356.z + (-0.5));
        float _1402 = exp2((_1363.w + (-0.5)) * 20.0) * 2.0;
        float _1403 = _1402 * (_1363.x + (-0.5));
        float _1404 = _1402 * (_1363.y + (-0.5));
        float _1405 = _1402 * (_1363.z + (-0.5));
        float _1412 = exp2((_1370.w + (-0.5)) * 20.0) * 2.0;
        float _1413 = _1412 * (_1370.x + (-0.5));
        float _1414 = _1412 * (_1370.y + (-0.5));
        float _1415 = _1412 * (_1370.z + (-0.5));
        float _1416 = isnan(0.0) ? _1413 : (isnan(_1413) ? 0.0 : max(_1413, 0.0));
        float _1417 = isnan(0.0) ? _1414 : (isnan(_1414) ? 0.0 : max(_1414, 0.0));
        float _1418 = isnan(0.0) ? _1415 : (isnan(_1415) ? 0.0 : max(_1415, 0.0));
        float _1419 = _1383 * 0.5;
        float _1420 = _1393 * 0.5;
        float _1421 = _1403 * 0.5;
        float _1422 = dot(vec3(_1419, _1420, _1421), vec3(_1419, _1420, _1421));
        float _1427 = (_1422 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1422);
        float _1435 = (dot(vec3(_702, _703, _704), vec3(_1427 * _1419, _1427 * _1420, _1427 * _1421)) + 1.0) * 0.5;
        float _3882 = isnan(0.0) ? _1435 : (isnan(_1435) ? 0.0 : max(_1435, 0.0));
        float _1444 = sqrt(((_1420 * _1420) + (_1419 * _1419)) + (_1421 * _1421)) / (_1416 + 9.9999997473787516355514526367188e-06);
        float _3893 = isnan(0.0) ? _1444 : (isnan(_1444) ? 0.0 : max(_1444, 0.0));
        float _1445 = isnan(1.0) ? _3893 : (isnan(_3893) ? 1.0 : min(_3893, 1.0));
        float _1446 = _1445 * 2.0;
        float _1450 = (1.0 - _1445) / (_1445 + 1.0);
        float _3904 = isnan(0.0) ? _1450 : (isnan(_1450) ? 0.0 : max(_1450, 0.0));
        float _1451 = isnan(1.0) ? _3904 : (isnan(_3904) ? 1.0 : min(_3904, 1.0));
        float _1460 = ((((1.0 - _1451) * (_1446 + 2.0)) * exp2(log2(isnan(1.0) ? _3882 : (isnan(_3882) ? 1.0 : min(_3882, 1.0))) * (_1446 + 1.0))) + _1451) * _1416;
        float _1461 = _1384 * 0.5;
        float _1462 = _1394 * 0.5;
        float _1463 = _1404 * 0.5;
        float _1464 = dot(vec3(_1461, _1462, _1463), vec3(_1461, _1462, _1463));
        float _1469 = (_1464 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1464);
        float _1477 = (dot(vec3(_702, _703, _704), vec3(_1469 * _1461, _1469 * _1462, _1469 * _1463)) + 1.0) * 0.5;
        float _3915 = isnan(0.0) ? _1477 : (isnan(_1477) ? 0.0 : max(_1477, 0.0));
        float _1486 = sqrt(((_1462 * _1462) + (_1461 * _1461)) + (_1463 * _1463)) / (_1417 + 9.9999997473787516355514526367188e-06);
        float _3926 = isnan(0.0) ? _1486 : (isnan(_1486) ? 0.0 : max(_1486, 0.0));
        float _1487 = isnan(1.0) ? _3926 : (isnan(_3926) ? 1.0 : min(_3926, 1.0));
        float _1488 = _1487 * 2.0;
        float _1492 = (1.0 - _1487) / (_1487 + 1.0);
        float _3937 = isnan(0.0) ? _1492 : (isnan(_1492) ? 0.0 : max(_1492, 0.0));
        float _1493 = isnan(1.0) ? _3937 : (isnan(_3937) ? 1.0 : min(_3937, 1.0));
        float _1502 = ((((1.0 - _1493) * (_1488 + 2.0)) * exp2(log2(isnan(1.0) ? _3915 : (isnan(_3915) ? 1.0 : min(_3915, 1.0))) * (_1488 + 1.0))) + _1493) * _1417;
        float _1503 = _1385 * 0.5;
        float _1504 = _1395 * 0.5;
        float _1505 = _1405 * 0.5;
        float _1506 = dot(vec3(_1503, _1504, _1505), vec3(_1503, _1504, _1505));
        float _1511 = (_1506 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1506);
        float _1519 = (dot(vec3(_702, _703, _704), vec3(_1511 * _1503, _1511 * _1504, _1511 * _1505)) + 1.0) * 0.5;
        float _3948 = isnan(0.0) ? _1519 : (isnan(_1519) ? 0.0 : max(_1519, 0.0));
        float _1528 = sqrt(((_1504 * _1504) + (_1503 * _1503)) + (_1505 * _1505)) / (_1418 + 9.9999997473787516355514526367188e-06);
        float _3959 = isnan(0.0) ? _1528 : (isnan(_1528) ? 0.0 : max(_1528, 0.0));
        float _1529 = isnan(1.0) ? _3959 : (isnan(_3959) ? 1.0 : min(_3959, 1.0));
        float _1530 = _1529 * 2.0;
        float _1534 = (1.0 - _1529) / (_1529 + 1.0);
        float _3970 = isnan(0.0) ? _1534 : (isnan(_1534) ? 0.0 : max(_1534, 0.0));
        float _1535 = isnan(1.0) ? _3970 : (isnan(_3970) ? 1.0 : min(_3970, 1.0));
        float _1544 = ((((1.0 - _1535) * (_1530 + 2.0)) * exp2(log2(isnan(1.0) ? _3948 : (isnan(_3948) ? 1.0 : min(_3948, 1.0))) * (_1530 + 1.0))) + _1535) * _1418;
        _1552 = _1385;
        _1553 = _1384;
        _1554 = _1383;
        _1555 = _1395;
        _1556 = _1394;
        _1557 = _1393;
        _1558 = _1405;
        _1559 = _1404;
        _1560 = _1403;
        _1561 = _1418;
        _1562 = _1417;
        _1563 = _1416;
        _1564 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1460 : (isnan(_1460) ? 0.0 : max(_1460, 0.0)));
        _1565 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1502 : (isnan(_1502) ? 0.0 : max(_1502, 0.0)));
        _1566 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1544 : (isnan(_1544) ? 0.0 : max(_1544, 0.0)));
    }
    else
    {
        _1552 = _1243;
        _1553 = _1243;
        _1554 = _1243;
        _1555 = _1243;
        _1556 = _1243;
        _1557 = _1243;
        _1558 = _1243;
        _1559 = _1243;
        _1560 = _1243;
        _1561 = _1243;
        _1562 = _1243;
        _1563 = _1243;
        _1564 = 0.0;
        _1565 = 0.0;
        _1566 = 0.0;
    }
    float _1576 = (cbModelParam._m0[1u].x * (_1564 - _1255)) + _1255;
    float _1577 = (cbModelParam._m0[1u].x * (_1565 - _1256)) + _1256;
    float _1578 = (cbModelParam._m0[1u].x * (_1566 - _1257)) + _1257;
    float _1599 = fma(_1578, cbSceneParam._m0[89u].z, fma(_1577, cbSceneParam._m0[89u].y, _1576 * cbSceneParam._m0[89u].x));
    float _1602 = fma(_1578, cbSceneParam._m0[90u].z, fma(_1577, cbSceneParam._m0[90u].y, _1576 * cbSceneParam._m0[90u].x));
    float _1605 = fma(_1578, cbSceneParam._m0[91u].z, fma(_1577, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1576));
    float _1620 = _876 * 0.5;
    float _1621 = _877 * 0.5;
    float _1622 = _878 * 0.5;
    float _1623 = dot(vec4(_1620, _1621, _1622, 1.0), vec4(_1554, _1557, _1560, _1563));
    float _1626 = dot(vec4(_1620, _1621, _1622, 1.0), vec4(_1553, _1556, _1559, _1562));
    float _1629 = dot(vec4(_1620, _1621, _1622, 1.0), vec4(_1552, _1555, _1558, _1561));
    float _1663;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1636 = dot(vec4(_1620, _1621, _1622, 1.0), vec4(_1242, _1246, _1249, _1252));
        float _1640 = dot(vec4(_1620, _1621, _1622, 1.0), vec4(_1244, _1247, _1250, _1253));
        float _1644 = dot(vec4(_1620, _1621, _1622, 1.0), vec4(_1245, _1248, _1251, _1254));
        float _1651 = dot(vec4(cbModelParam._m0[39u]), vec4(_1620, _1621, _1622, 1.0));
        _1663 = dot(vec3(isnan(0.0) ? _1644 : (isnan(_1644) ? 0.0 : max(_1644, 0.0)), isnan(0.0) ? _1640 : (isnan(_1640) ? 0.0 : max(_1640, 0.0)), isnan(0.0) ? _1636 : (isnan(_1636) ? 0.0 : max(_1636, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1651) ? 0.0 : (isnan(0.0) ? _1651 : max(0.0, _1651))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1663 = 1.0;
    }
    float _1674;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1665 = dot(vec4(cbModelParam._m0[40u]), vec4(_1620, _1621, _1622, 1.0));
        _1674 = dot(vec3(isnan(0.0) ? _1623 : (isnan(_1623) ? 0.0 : max(_1623, 0.0)), isnan(0.0) ? _1626 : (isnan(_1626) ? 0.0 : max(_1626, 0.0)), isnan(0.0) ? _1629 : (isnan(_1629) ? 0.0 : max(_1629, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1665) ? 0.0 : (isnan(0.0) ? _1665 : max(0.0, _1665))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1674 = 1.0;
    }
    float _1678 = (_1674 * cbModelParam._m0[1u].x) + (_1663 * (1.0 - cbModelParam._m0[1u].x));
    float _1688 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _705);
    float _1689 = isnan(_1688) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1688 : min(cbModelParam._m0[25u].z, _1688));
    float _1769;
    float _1771;
    float _1773;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1736 = fma(_940, cbModelParam._m0[13u].z, fma(_936, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _932)) + cbModelParam._m0[13u].w;
        float _1740 = fma(_940, cbModelParam._m0[14u].z, fma(_936, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _932)) + cbModelParam._m0[14u].w;
        float _1744 = fma(_940, cbModelParam._m0[15u].z, fma(_936, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _932)) + cbModelParam._m0[15u].w;
        float _1747 = fma(_878, cbModelParam._m0[13u].z, fma(_877, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _876));
        float _1750 = fma(_878, cbModelParam._m0[14u].z, fma(_877, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _876));
        float _1753 = fma(_878, cbModelParam._m0[15u].z, fma(_877, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _876));
        float _1781;
        if (_1747 > 0.0)
        {
            _1781 = abs((1.0 - _1736) / _1747);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1747 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1736 + 1.0) / _1747);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1781 = frontier_phi_14_12_ladder;
        }
        float _2006;
        if (_1750 > 0.0)
        {
            _2006 = abs((1.0 - _1740) / _1750);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1750 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1740 + 1.0) / _1750);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2006 = frontier_phi_23_19_ladder;
        }
        float _2263;
        if (_1753 > 0.0)
        {
            _2263 = abs((1.0 - _1744) / _1753);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1753 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1744 + 1.0) / _1753);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2263 = frontier_phi_35_30_ladder;
        }
        float _2265 = isnan(_2006) ? _1781 : (isnan(_1781) ? _2006 : min(_1781, _2006));
        float _2266 = isnan(_2263) ? _2265 : (isnan(_2265) ? _2263 : min(_2265, _2263));
        float _2270 = (_2266 * _1747) + _1736;
        float _2271 = (_2266 * _1750) + _1740;
        float _2272 = (_2266 * _1753) + _1744;
        float _2273 = _2266 * 9.9999997473787516355514526367188e-05;
        float _2275 = (-1.0) - _2273;
        float _2277 = _2273 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2272 > _2277) || ((_2272 < _2275) || ((_2271 > _2277) || ((_2271 < _2275) || ((_2270 < _2275) || (_2270 > _2277))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2400 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2272, cbModelParam._m0[9u].z, fma(_2271, cbModelParam._m0[9u].y, _2270 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2272, cbModelParam._m0[10u].z, fma(_2271, cbModelParam._m0[10u].y, _2270 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2272, cbModelParam._m0[11u].z, fma(_2271, cbModelParam._m0[11u].y, _2270 * cbModelParam._m0[11u].x))), _1689);
            frontier_phi_13_35_ladder = _2400.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2400.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2400.x * cbModelParam._m0[1u].y;
        }
        _1769 = frontier_phi_13_35_ladder_2;
        _1771 = frontier_phi_13_35_ladder_1;
        _1773 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1757 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_876, _877, _878), _1689);
        _1769 = _1757.x * cbModelParam._m0[1u].y;
        _1771 = _1757.y * cbModelParam._m0[1u].y;
        _1773 = _1757.z * cbModelParam._m0[1u].y;
    }
    float _1777 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _705);
    float _1778 = isnan(_1777) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1777 : min(cbModelParam._m0[25u].w, _1777));
    float _1869;
    float _1871;
    float _1873;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1833 = fma(_940, cbModelParam._m0[21u].z, fma(_936, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _932)) + cbModelParam._m0[21u].w;
        float _1837 = fma(_940, cbModelParam._m0[22u].z, fma(_936, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _932)) + cbModelParam._m0[22u].w;
        float _1841 = fma(_940, cbModelParam._m0[23u].z, fma(_936, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _932)) + cbModelParam._m0[23u].w;
        float _1844 = fma(_878, cbModelParam._m0[21u].z, fma(_877, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _876));
        float _1847 = fma(_878, cbModelParam._m0[22u].z, fma(_877, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _876));
        float _1850 = fma(_878, cbModelParam._m0[23u].z, fma(_877, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _876));
        float _2011;
        if (_1844 > 0.0)
        {
            _2011 = abs((1.0 - _1833) / _1844);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1844 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1833 + 1.0) / _1844);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2011 = frontier_phi_25_21_ladder;
        }
        float _2290;
        if (_1847 > 0.0)
        {
            _2290 = abs((1.0 - _1837) / _1847);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1847 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1837 + 1.0) / _1847);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2290 = frontier_phi_37_32_ladder;
        }
        float _2503;
        if (_1850 > 0.0)
        {
            _2503 = abs((1.0 - _1841) / _1850);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1850 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1841 + 1.0) / _1850);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2503 = frontier_phi_46_43_ladder;
        }
        float _2505 = isnan(_2290) ? _2011 : (isnan(_2011) ? _2290 : min(_2011, _2290));
        float _2506 = isnan(_2503) ? _2505 : (isnan(_2505) ? _2503 : min(_2505, _2503));
        float _2510 = (_2506 * _1844) + _1833;
        float _2511 = (_2506 * _1847) + _1837;
        float _2512 = (_2506 * _1850) + _1841;
        float _2513 = _2506 * 9.9999997473787516355514526367188e-05;
        float _2514 = (-1.0) - _2513;
        float _2516 = _2513 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2512 > _2516) || ((_2512 < _2514) || ((_2511 > _2516) || ((_2511 < _2514) || ((_2510 < _2514) || (_2510 > _2516))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2711 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2512, cbModelParam._m0[17u].z, fma(_2511, cbModelParam._m0[17u].y, _2510 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2512, cbModelParam._m0[18u].z, fma(_2511, cbModelParam._m0[18u].y, _2510 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2512, cbModelParam._m0[19u].z, fma(_2511, cbModelParam._m0[19u].y, _2510 * cbModelParam._m0[19u].x))), _1778);
            frontier_phi_22_46_ladder = _2711.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2711.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2711.x * cbModelParam._m0[1u].z;
        }
        _1869 = frontier_phi_22_46_ladder_2;
        _1871 = frontier_phi_22_46_ladder_1;
        _1873 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1853 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_876, _877, _878), _1778);
        _1869 = _1853.x * cbModelParam._m0[1u].z;
        _1871 = _1853.y * cbModelParam._m0[1u].z;
        _1873 = _1853.z * cbModelParam._m0[1u].z;
    }
    float _1886 = (((_903 * _853) + _904) * _868) * ((cbModelParam._m0[1u].w * (_1869 - _1769)) + _1769);
    float _1888 = (((_903 * _855) + _904) * _868) * ((cbModelParam._m0[1u].w * (_1871 - _1771)) + _1771);
    float _1890 = (((_903 * _856) + _904) * _868) * ((cbModelParam._m0[1u].w * (_1873 - _1773)) + _1773);
    float _1893 = fma(_1890, cbSceneParam._m0[89u].z, fma(_1888, cbSceneParam._m0[89u].y, _1886 * cbSceneParam._m0[89u].x));
    float _1896 = fma(_1890, cbSceneParam._m0[90u].z, fma(_1888, cbSceneParam._m0[90u].y, _1886 * cbSceneParam._m0[90u].x));
    float _1899 = fma(_1890, cbSceneParam._m0[91u].z, fma(_1888, cbSceneParam._m0[91u].y, _1886 * cbSceneParam._m0[91u].x));
    vec4 _1907 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_790, _791));
    float _1909 = _1907.w;
    float _1921 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1909);
    float _1922 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1909);
    float _1923 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1909);
    uvec4 _1927 = floatBitsToUint(cbInstanceData._m0[_828 + 5u]);
    uint _1929 = _1927.x * 14u;
    uint _1930 = _1929 + 13u;
    float _1937 = _868 + (-1.0);
    float _1942 = (cbLight._m0[_1930].x * _1937) + 1.0;
    float _1943 = (cbLight._m0[_1930].y * _1937) + 1.0;
    float _1944 = (cbLight._m0[_1930].z * _1937) + 1.0;
    float _1945 = (cbLight._m0[_1930].w * _1937) + 1.0;
    uint _1946 = _1929 + 5u;
    float _1952 = isnan(1.0) ? _1943 : (isnan(_1943) ? 1.0 : min(_1943, 1.0));
    uint _1956 = _1929 + 4u;
    float _1965 = isnan(1.0) ? _1942 : (isnan(_1942) ? 1.0 : min(_1942, 1.0));
    uint _1969 = _1929 | 1u;
    float _1980 = dot(vec3(cbLight._m0[_1929].xyz), vec3(_702, _703, _704));
    float _1983 = dot(vec3(cbLight._m0[_1969].xyz), vec3(_702, _703, _704));
    float _4106 = isnan(0.0) ? _1980 : (isnan(_1980) ? 0.0 : max(_1980, 0.0));
    float _4117 = isnan(0.0) ? _1983 : (isnan(_1983) ? 0.0 : max(_1983, 0.0));
    float _1988 = (isnan(1.0) ? _4106 : (isnan(_4106) ? 1.0 : min(_4106, 1.0))) * 0.3183098733425140380859375;
    float _1990 = (isnan(1.0) ? _4117 : (isnan(_4117) ? 1.0 : min(_4117, 1.0))) * 0.3183098733425140380859375;
    float _1997 = ((cbLight._m0[_1946].x * _1952) * _1990) + (((cbLight._m0[_1956].x * _1921) * _1965) * _1988);
    float _1998 = ((_1952 * cbLight._m0[_1946].y) * _1990) + (((cbLight._m0[_1956].y * _1922) * _1965) * _1988);
    float _1999 = ((_1952 * cbLight._m0[_1946].z) * _1990) + (((cbLight._m0[_1956].z * _1923) * _1965) * _1988);
    uvec4 _2003 = floatBitsToUint(cbLight._m0[_1929 + 12u]);
    bool _2005 = _2003.x == 0u;
    float _2016;
    float _2018;
    float _2020;
    if (_2005)
    {
        _2016 = _1997;
        _2018 = _1998;
        _2020 = _1999;
    }
    else
    {
        uint _2024 = _1929 + 6u;
        float _2040 = (dot(vec3(cbLight._m0[_1929 + 2u].xyz), vec3(_702, _703, _704)) * 0.5) + 0.5;
        float _2041 = _2040 * _2040;
        float _4128 = isnan(0.0) ? _2041 : (isnan(_2041) ? 0.0 : max(_2041, 0.0));
        float _2042 = isnan(1.0) ? _4128 : (isnan(_4128) ? 1.0 : min(_4128, 1.0));
        float _2043 = isnan(1.0) ? _1944 : (isnan(_1944) ? 1.0 : min(_1944, 1.0));
        _2016 = (((cbLight._m0[_2024].x * 0.3183098733425140380859375) * _2042) * _2043) + _1997;
        _2018 = (((cbLight._m0[_2024].y * 0.3183098733425140380859375) * _2042) * _2043) + _1998;
        _2020 = (((cbLight._m0[_2024].z * 0.3183098733425140380859375) * _2042) * _2043) + _1999;
    }
    bool _2023 = _2003.y == 0u;
    float _2061;
    float _2063;
    float _2065;
    if (_2023)
    {
        _2061 = _2016;
        _2063 = _2018;
        _2065 = _2020;
    }
    else
    {
        uint _2234 = _1929 + 7u;
        float _2250 = (dot(vec3(cbLight._m0[_1929 + 3u].xyz), vec3(_702, _703, _704)) * 0.5) + 0.5;
        float _2251 = _2250 * _2250;
        float _4144 = isnan(0.0) ? _2251 : (isnan(_2251) ? 0.0 : max(_2251, 0.0));
        float _2252 = isnan(1.0) ? _4144 : (isnan(_4144) ? 1.0 : min(_4144, 1.0));
        float _2253 = isnan(1.0) ? _1945 : (isnan(_1945) ? 1.0 : min(_1945, 1.0));
        _2061 = (((cbLight._m0[_2234].x * 0.3183098733425140380859375) * _2252) * _2253) + _2016;
        _2063 = (((cbLight._m0[_2234].y * 0.3183098733425140380859375) * _2252) * _2253) + _2018;
        _2065 = (((cbLight._m0[_2234].z * 0.3183098733425140380859375) * _2252) * _2253) + _2020;
    }
    uint _2068 = _1929 + 8u;
    float _2081 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1929].w)) * _705) * 0.949999988079071044921875);
    float _2082 = _2081 * _2081;
    float _2083 = cbLight._m0[_1929].x + _782;
    float _2084 = cbLight._m0[_1929].y + _783;
    float _2085 = cbLight._m0[_1929].z + _784;
    float _2089 = inversesqrt(dot(vec3(_2083, _2084, _2085), vec3(_2083, _2084, _2085)));
    float _2090 = _2089 * _2083;
    float _2091 = _2089 * _2084;
    float _2092 = _2089 * _2085;
    float _2093 = dot(vec3(_702, _703, _704), vec3(cbLight._m0[_1929].xyz));
    float _4160 = isnan(0.0) ? _2093 : (isnan(_2093) ? 0.0 : max(_2093, 0.0));
    float _2096 = isnan(1.0) ? _4160 : (isnan(_4160) ? 1.0 : min(_4160, 1.0));
    float _4171 = isnan(0.0) ? _869 : (isnan(_869) ? 0.0 : max(_869, 0.0));
    float _2097 = isnan(1.0) ? _4171 : (isnan(_4171) ? 1.0 : min(_4171, 1.0));
    float _2098 = dot(vec3(_702, _703, _704), vec3(_2090, _2091, _2092));
    float _4182 = isnan(0.0) ? _2098 : (isnan(_2098) ? 0.0 : max(_2098, 0.0));
    float _2101 = isnan(1.0) ? _4182 : (isnan(_4182) ? 1.0 : min(_4182, 1.0));
    float _2102 = dot(vec3(cbLight._m0[_1929].xyz), vec3(_2090, _2091, _2092));
    float _4193 = isnan(0.0) ? _2102 : (isnan(_2102) ? 0.0 : max(_2102, 0.0));
    float _2106 = _2082 * _2082;
    float _2110 = ((_2101 * _2101) * (_2106 + (-1.0))) + 1.0;
    float _2118 = exp2(log2(1.0 - (isnan(1.0) ? _4193 : (isnan(_4193) ? 1.0 : min(_4193, 1.0)))) * 5.0);
    float _2119 = 0.959999978542327880859375 - _850;
    float _2121 = 0.959999978542327880859375 - _851;
    float _2122 = 0.959999978542327880859375 - _852;
    float _2129 = 1.0 - _2082;
    float _2140 = (0.5 / (((_2097 * ((_2096 * _2129) + _2082)) + 9.9999999392252902907785028219223e-09) + (((_2097 * _2129) + _2082) * _2096))) * _2096;
    float _4204 = isnan(0.0) ? _2140 : (isnan(_2140) ? 0.0 : max(_2140, 0.0));
    float _2142 = (isnan(1.0) ? _4204 : (isnan(_4204) ? 1.0 : min(_4204, 1.0))) * (_2106 / ((_2110 * _2110) * 3.141590118408203125));
    uint _2156 = _1929 + 9u;
    float _2167 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1969].w)) * _705) * 0.949999988079071044921875);
    float _2168 = _2167 * _2167;
    float _2169 = cbLight._m0[_1969].x + _782;
    float _2170 = cbLight._m0[_1969].y + _783;
    float _2171 = cbLight._m0[_1969].z + _784;
    float _2175 = inversesqrt(dot(vec3(_2169, _2170, _2171), vec3(_2169, _2170, _2171)));
    float _2176 = _2175 * _2169;
    float _2177 = _2175 * _2170;
    float _2178 = _2175 * _2171;
    float _2179 = dot(vec3(_702, _703, _704), vec3(cbLight._m0[_1969].xyz));
    float _4215 = isnan(0.0) ? _2179 : (isnan(_2179) ? 0.0 : max(_2179, 0.0));
    float _2182 = isnan(1.0) ? _4215 : (isnan(_4215) ? 1.0 : min(_4215, 1.0));
    float _2183 = dot(vec3(_702, _703, _704), vec3(_2176, _2177, _2178));
    float _4226 = isnan(0.0) ? _2183 : (isnan(_2183) ? 0.0 : max(_2183, 0.0));
    float _2186 = isnan(1.0) ? _4226 : (isnan(_4226) ? 1.0 : min(_4226, 1.0));
    float _2187 = dot(vec3(cbLight._m0[_1969].xyz), vec3(_2176, _2177, _2178));
    float _4237 = isnan(0.0) ? _2187 : (isnan(_2187) ? 0.0 : max(_2187, 0.0));
    float _2191 = _2168 * _2168;
    float _2195 = ((_2186 * _2186) * (_2191 + (-1.0))) + 1.0;
    float _2202 = exp2(log2(1.0 - (isnan(1.0) ? _4237 : (isnan(_4237) ? 1.0 : min(_4237, 1.0)))) * 5.0);
    float _2209 = 1.0 - _2168;
    float _2219 = (0.5 / (((_2097 * ((_2182 * _2209) + _2168)) + 9.9999999392252902907785028219223e-09) + (((_2097 * _2209) + _2168) * _2182))) * _2182;
    float _4248 = isnan(0.0) ? _2219 : (isnan(_2219) ? 0.0 : max(_2219, 0.0));
    float _2221 = (isnan(1.0) ? _4248 : (isnan(_4248) ? 1.0 : min(_4248, 1.0))) * (_2191 / ((_2195 * _2195) * 3.141590118408203125));
    float _2231 = (((((_2202 * _2119) + _853) * cbLight._m0[_2156].x) * _2221) * _1952) + ((((cbLight._m0[_2068].x * _1921) * ((_2118 * _2119) + _853)) * _2142) * _1965);
    float _2232 = (((((_2202 * _2121) + _855) * cbLight._m0[_2156].y) * _2221) * _1952) + ((((cbLight._m0[_2068].y * _1922) * ((_2118 * _2121) + _855)) * _2142) * _1965);
    float _2233 = (((((_2202 * _2122) + _856) * cbLight._m0[_2156].z) * _2221) * _1952) + ((((cbLight._m0[_2068].z * _1923) * ((_2118 * _2122) + _856)) * _2142) * _1965);
    float _2295;
    float _2297;
    float _2299;
    if (_2005)
    {
        _2295 = _2231;
        _2297 = _2232;
        _2299 = _2233;
    }
    else
    {
        uint _2301 = _1929 + 2u;
        uint _2305 = _1929 + 10u;
        float _2319 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2301].w)) * _705) * 0.949999988079071044921875);
        float _2320 = _2319 * _2319;
        float _2321 = cbLight._m0[_2301].x + _782;
        float _2322 = cbLight._m0[_2301].y + _783;
        float _2323 = cbLight._m0[_2301].z + _784;
        float _2327 = inversesqrt(dot(vec3(_2321, _2322, _2323), vec3(_2321, _2322, _2323)));
        float _2328 = _2327 * _2321;
        float _2329 = _2327 * _2322;
        float _2330 = _2327 * _2323;
        float _2331 = dot(vec3(_702, _703, _704), vec3(cbLight._m0[_2301].xyz));
        float _4259 = isnan(0.0) ? _2331 : (isnan(_2331) ? 0.0 : max(_2331, 0.0));
        float _2334 = isnan(1.0) ? _4259 : (isnan(_4259) ? 1.0 : min(_4259, 1.0));
        float _2335 = dot(vec3(_702, _703, _704), vec3(_2328, _2329, _2330));
        float _4270 = isnan(0.0) ? _2335 : (isnan(_2335) ? 0.0 : max(_2335, 0.0));
        float _2338 = isnan(1.0) ? _4270 : (isnan(_4270) ? 1.0 : min(_4270, 1.0));
        float _2339 = dot(vec3(cbLight._m0[_2301].xyz), vec3(_2328, _2329, _2330));
        float _4281 = isnan(0.0) ? _2339 : (isnan(_2339) ? 0.0 : max(_2339, 0.0));
        float _2343 = _2320 * _2320;
        float _2347 = ((_2338 * _2338) * (_2343 + (-1.0))) + 1.0;
        float _2354 = exp2(log2(1.0 - (isnan(1.0) ? _4281 : (isnan(_4281) ? 1.0 : min(_4281, 1.0)))) * 5.0);
        float _2361 = 1.0 - _2320;
        float _2371 = (0.5 / (((_2097 * ((_2334 * _2361) + _2320)) + 9.9999999392252902907785028219223e-09) + (((_2097 * _2361) + _2320) * _2334))) * _2334;
        float _4292 = isnan(0.0) ? _2371 : (isnan(_2371) ? 0.0 : max(_2371, 0.0));
        float _2373 = (isnan(1.0) ? _4292 : (isnan(_4292) ? 1.0 : min(_4292, 1.0))) * (_2343 / ((_2347 * _2347) * 3.141590118408203125));
        float _2374 = isnan(1.0) ? _1944 : (isnan(_1944) ? 1.0 : min(_1944, 1.0));
        _2295 = (((((_2354 * _2119) + _853) * cbLight._m0[_2305].x) * _2373) * _2374) + _2231;
        _2297 = (((((_2354 * _2121) + _855) * cbLight._m0[_2305].y) * _2373) * _2374) + _2232;
        _2299 = (((((_2354 * _2122) + _856) * cbLight._m0[_2305].z) * _2373) * _2374) + _2233;
    }
    float _2409;
    float _2411;
    float _2413;
    if (_2023)
    {
        _2409 = _2295;
        _2411 = _2297;
        _2413 = _2299;
    }
    else
    {
        uint _2420 = _1929 + 3u;
        uint _2424 = _1929 + 11u;
        float _2438 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2420].w)) * _705) * 0.949999988079071044921875);
        float _2439 = _2438 * _2438;
        float _2440 = cbLight._m0[_2420].x + _782;
        float _2441 = cbLight._m0[_2420].y + _783;
        float _2442 = cbLight._m0[_2420].z + _784;
        float _2446 = inversesqrt(dot(vec3(_2440, _2441, _2442), vec3(_2440, _2441, _2442)));
        float _2447 = _2446 * _2440;
        float _2448 = _2446 * _2441;
        float _2449 = _2446 * _2442;
        float _2450 = dot(vec3(_702, _703, _704), vec3(cbLight._m0[_2420].xyz));
        float _4308 = isnan(0.0) ? _2450 : (isnan(_2450) ? 0.0 : max(_2450, 0.0));
        float _2453 = isnan(1.0) ? _4308 : (isnan(_4308) ? 1.0 : min(_4308, 1.0));
        float _2454 = dot(vec3(_702, _703, _704), vec3(_2447, _2448, _2449));
        float _4319 = isnan(0.0) ? _2454 : (isnan(_2454) ? 0.0 : max(_2454, 0.0));
        float _2457 = isnan(1.0) ? _4319 : (isnan(_4319) ? 1.0 : min(_4319, 1.0));
        float _2458 = dot(vec3(cbLight._m0[_2420].xyz), vec3(_2447, _2448, _2449));
        float _4330 = isnan(0.0) ? _2458 : (isnan(_2458) ? 0.0 : max(_2458, 0.0));
        float _2462 = _2439 * _2439;
        float _2466 = ((_2457 * _2457) * (_2462 + (-1.0))) + 1.0;
        float _2473 = exp2(log2(1.0 - (isnan(1.0) ? _4330 : (isnan(_4330) ? 1.0 : min(_4330, 1.0)))) * 5.0);
        float _2480 = 1.0 - _2439;
        float _2490 = (0.5 / (((_2097 * ((_2453 * _2480) + _2439)) + 9.9999999392252902907785028219223e-09) + (((_2097 * _2480) + _2439) * _2453))) * _2453;
        float _4341 = isnan(0.0) ? _2490 : (isnan(_2490) ? 0.0 : max(_2490, 0.0));
        float _2492 = (isnan(1.0) ? _4341 : (isnan(_4341) ? 1.0 : min(_4341, 1.0))) * (_2462 / ((_2466 * _2466) * 3.141590118408203125));
        float _2493 = isnan(1.0) ? _1945 : (isnan(_1945) ? 1.0 : min(_1945, 1.0));
        _2409 = (((((_2473 * _2119) + _853) * cbLight._m0[_2424].x) * _2492) * _2493) + _2295;
        _2411 = (((((_2473 * _2121) + _855) * cbLight._m0[_2424].y) * _2492) * _2493) + _2297;
        _2413 = (((((_2473 * _2122) + _856) * cbLight._m0[_2424].z) * _2492) * _2493) + _2299;
    }
    float _2628;
    float _2630;
    float _2632;
    float _2634;
    float _2636;
    float _2638;
    if (_1927.y == 0u)
    {
        float _2568 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2569 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2568;
        float _2570 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2568;
        float _2571 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2568;
        uvec4 _2583 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2584 = _2583.x;
        uint _2595 = uint((float(_2583.y) * floor(float(uint(cbSceneParam._m0[85u].y * _791) / _2584))) + floor(float(uint(cbSceneParam._m0[85u].x * _790) / _2584)));
        float _2605 = (log2(_2571 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2606 = isnan(0.0) ? _2605 : (isnan(_2605) ? 0.0 : max(_2605, 0.0));
        uint _2609 = uint(isnan(14.0) ? _2606 : (isnan(_2606) ? 14.0 : min(_2606, 14.0)));
        uvec4 _2614 = texelFetch(g_lightClusterGridBuffer, int(((_2609 << 2u) + (_2595 << 6u)) >> 2u));
        uint _2615 = _2614.x;
        uint _2616 = _2583.z;
        float _2716;
        float _2718;
        float _2720;
        float _2722;
        float _2724;
        float _2726;
        if (((((1u << ((_2616 >> 4u) & 15u)) + 4294967295u) & _2615) == 0u) || ((_2616 & 240u) == 0u))
        {
            _2716 = 0.0;
            _2718 = 0.0;
            _2720 = 0.0;
            _2722 = 0.0;
            _2724 = 0.0;
            _2726 = 0.0;
        }
        else
        {
            float _2717;
            float _2719;
            float _2721;
            float _2723;
            float _2725;
            float _2727;
            float _2860 = 0.0;
            float _2861 = 0.0;
            float _2862 = 0.0;
            float _2863 = 0.0;
            float _2864 = 0.0;
            float _2865 = 0.0;
            uint _2866 = 0u;
            uint _2875;
            bool _2876;
            for (;;)
            {
                _2875 = texelFetch(g_lightClassification, int((((_2609 << 5u) + (_2595 << 9u)) + (_2866 << 2u)) >> 2u)).x;
                _2876 = _2875 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2876)
                {
                    frontier_phi_61_pred = _2860;
                    frontier_phi_61_pred_1 = _2865;
                    frontier_phi_61_pred_2 = _2864;
                    frontier_phi_61_pred_3 = _2863;
                    frontier_phi_61_pred_4 = _2862;
                    frontier_phi_61_pred_5 = _2861;
                }
                else
                {
                    float _2984;
                    float _2985;
                    float _2986;
                    float _2987;
                    float _2988;
                    float _2989;
                    uint _2990;
                    _2984 = _2860;
                    _2985 = _2861;
                    _2986 = _2862;
                    _2987 = _2863;
                    _2988 = _2864;
                    _2989 = _2865;
                    _2990 = _2875;
                    float _2916;
                    float _2917;
                    float _2918;
                    float _2919;
                    float _2920;
                    float _2921;
                    for (;;)
                    {
                        uint _2994 = uint(findLSB(_2990)) + (_2866 << 5u);
                        uint _2991 = (_2990 + 4294967295u) & _2990;
                        uint _2996 = _2994 * 48u;
                        vec4 _3010 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2996)).x, texelFetch(g_PointLightRenderingBuffer, int(_2996 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2996 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2996 + 3u)).x));
                        uint _3016 = (_2994 * 48u) + 4u;
                        vec4 _3029 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3016)).x, texelFetch(g_PointLightRenderingBuffer, int(_3016 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3016 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3016 + 3u)).x));
                        uint _3035 = (_2994 * 48u) + 8u;
                        vec3 _3046 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3035)).x, texelFetch(g_PointLightRenderingBuffer, int(_3035 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3035 + 2u)).x));
                        float _3050 = _3010.x - _2569;
                        float _3051 = _3010.y - _2570;
                        float _3052 = _3010.z - _2571;
                        float _3053 = dot(vec3(_3050, _3051, _3052), vec3(_3050, _3051, _3052));
                        float _3056 = inversesqrt(_3053);
                        float _3057 = _3056 * _3050;
                        float _3058 = _3056 * _3051;
                        float _3059 = _3056 * _3052;
                        float _3060 = dot(vec3(_809, _812, _815), vec3(_3057, _3058, _3059));
                        float _3065 = 1.0 - (_3053 * _3010.w);
                        float _4367 = isnan(0.0) ? _3065 : (isnan(_3065) ? 0.0 : max(_3065, 0.0));
                        float _3066 = isnan(1.0) ? _4367 : (isnan(_4367) ? 1.0 : min(_4367, 1.0));
                        float _3067 = sqrt(_3053) * _3029.w;
                        float _3070 = 1.39999997615814208984375 / (_3067 + 1.39999997615814208984375);
                        float _3071 = _3070 * _3070;
                        float _3074 = ((1.0 - _3071) * _3060) + _3071;
                        float _3077 = _3067 * _3067;
                        float _3081 = ((isnan(0.0) ? _3074 : (isnan(_3074) ? 0.0 : max(_3074, 0.0))) * _3066) / ((_3077 * 0.699999988079071044921875) + 1.0);
                        float _3085 = (-0.0) - _2569;
                        float _3086 = (-0.0) - _2570;
                        float _3087 = (-0.0) - _2571;
                        float _3091 = inversesqrt(dot(vec3(_3085, _3086, _3087), vec3(_3085, _3086, _3087)));
                        float _3092 = _3091 * _3085;
                        float _3093 = _3091 * _3086;
                        float _3094 = _3091 * _3087;
                        float _3102 = exp2(log2(1.0 / ((_3077 * 3.5) + 5.0)) * 0.25);
                        float _3103 = 1.0 - _884;
                        float _3110 = sqrt(1.0 - ((1.0 - (_3103 * _3103)) * (1.0 - (_3102 * _3102))));
                        float _3111 = _3110 * _3110;
                        float _3112 = _3111 * _3111;
                        float _3113 = _3092 + _3057;
                        float _3114 = _3093 + _3058;
                        float _3115 = _3094 + _3059;
                        float _3119 = inversesqrt(dot(vec3(_3113, _3114, _3115), vec3(_3113, _3114, _3115)));
                        float _3123 = dot(vec3(_809, _812, _815), vec3(_3092, _3093, _3094));
                        float _4383 = isnan(0.0) ? _3123 : (isnan(_3123) ? 0.0 : max(_3123, 0.0));
                        float _3126 = isnan(1.0) ? _4383 : (isnan(_4383) ? 1.0 : min(_4383, 1.0));
                        float _3127 = dot(vec3(_809, _812, _815), vec3(_3119 * _3113, _3119 * _3114, _3119 * _3115));
                        float _4394 = isnan(0.0) ? _3127 : (isnan(_3127) ? 0.0 : max(_3127, 0.0));
                        float _3130 = isnan(1.0) ? _4394 : (isnan(_4394) ? 1.0 : min(_4394, 1.0));
                        float _3134 = ((_3130 * _3130) * (_3112 + (-1.0))) + 1.0;
                        float _3135 = _3070 * _3111;
                        float _3136 = _3135 * _3135;
                        float _3139 = ((1.0 - _3136) * _3060) + _3136;
                        float _4405 = isnan(0.0) ? _3139 : (isnan(_3139) ? 0.0 : max(_3139, 0.0));
                        float _3140 = isnan(1.0) ? _4405 : (isnan(_4405) ? 1.0 : min(_4405, 1.0));
                        float _3141 = 1.0 - _3111;
                        float _3151 = (0.5 / (((_3140 * ((_3126 * _3141) + _3111)) + 9.9999999392252902907785028219223e-09) + (((_3140 * _3141) + _3111) * _3126))) * _3140;
                        float _4416 = isnan(0.0) ? _3151 : (isnan(_3151) ? 0.0 : max(_3151, 0.0));
                        float _3162 = (((_3112 * 3.1415927410125732421875) * (isnan(1.0) ? _4416 : (isnan(_4416) ? 1.0 : min(_4416, 1.0)))) / ((_3134 * _3134) * ((_3077 * 2.1991131305694580078125) + 3.141590118408203125))) * _3066;
                        _2919 = (_3081 * _3029.x) + _2987;
                        _2920 = (_3081 * _3029.y) + _2988;
                        _2921 = (_3081 * _3029.z) + _2989;
                        _2916 = (_3162 * _3046.x) + _2984;
                        _2917 = (_3162 * _3046.y) + _2985;
                        _2918 = (_3162 * _3046.z) + _2986;
                        if (_2991 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2984 = _2916;
                            _2985 = _2917;
                            _2986 = _2918;
                            _2987 = _2919;
                            _2988 = _2920;
                            _2989 = _2921;
                            _2990 = _2991;
                        }
                    }
                    frontier_phi_61_pred = _2916;
                    frontier_phi_61_pred_1 = _2921;
                    frontier_phi_61_pred_2 = _2920;
                    frontier_phi_61_pred_3 = _2919;
                    frontier_phi_61_pred_4 = _2918;
                    frontier_phi_61_pred_5 = _2917;
                }
                _2717 = frontier_phi_61_pred;
                _2727 = frontier_phi_61_pred_1;
                _2725 = frontier_phi_61_pred_2;
                _2723 = frontier_phi_61_pred_3;
                _2721 = frontier_phi_61_pred_4;
                _2719 = frontier_phi_61_pred_5;
                uint _2867 = _2866 + 1u;
                if (_2867 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2860 = _2717;
                    _2861 = _2719;
                    _2862 = _2721;
                    _2863 = _2723;
                    _2864 = _2725;
                    _2865 = _2727;
                    _2866 = _2867;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2716 = _2717;
            _2718 = _2719;
            _2720 = _2721;
            _2722 = _2723;
            _2724 = _2725;
            _2726 = _2727;
        }
        uvec4 _2730 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2731 = _2730.z;
        uint _2733 = (_2731 >> 8u) & 15u;
        float _2828;
        float _2830;
        float _2832;
        float _2834;
        float _2836;
        float _2838;
        if (((4294967295u << _2733) & _2615) == 0u)
        {
            _2828 = _2716;
            _2830 = _2718;
            _2832 = _2720;
            _2834 = _2722;
            _2836 = _2724;
            _2838 = _2726;
        }
        else
        {
            float _2853 = inversesqrt(dot(vec3(_2569, _2570, _2571), vec3(_2569, _2570, _2571)));
            float _2854 = _2853 * _2569;
            float _2855 = _2853 * _2570;
            float _2856 = _2853 * _2571;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2733 < ((_2731 >> 12u) & 15u))
            {
                float _2829;
                float _2831;
                float _2833;
                float _2835;
                float _2837;
                float _2839;
                float _2967 = _2716;
                float _2968 = _2718;
                float _2969 = _2720;
                float _2970 = _2722;
                float _2971 = _2724;
                float _2972 = _2726;
                uint _2973 = _2733;
                uint _2982;
                bool _2983;
                for (;;)
                {
                    _2982 = texelFetch(g_lightClassification, int((((_2609 << 5u) + (_2595 << 9u)) + (_2973 << 2u)) >> 2u)).x;
                    _2983 = _2982 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2983)
                    {
                        frontier_phi_67_pred = _2970;
                        frontier_phi_67_pred_1 = _2971;
                        frontier_phi_67_pred_2 = _2972;
                        frontier_phi_67_pred_3 = _2969;
                        frontier_phi_67_pred_4 = _2968;
                        frontier_phi_67_pred_5 = _2967;
                    }
                    else
                    {
                        float _3167;
                        float _3168;
                        float _3169;
                        float _3170;
                        float _3171;
                        float _3172;
                        float _3461;
                        float _3462;
                        float _3463;
                        float _3464;
                        float _3465;
                        float _3466;
                        float _3180 = _2967;
                        float _3181 = _2968;
                        float _3182 = _2969;
                        float _3183 = _2970;
                        float _3184 = _2971;
                        float _3185 = _2972;
                        uint _3186 = _2982;
                        uint _3187;
                        vec4 _3212;
                        float _3213;
                        vec4 _3228;
                        vec3 _3240;
                        vec4 _3255;
                        vec4 _3270;
                        float _3317;
                        bool _3318;
                        for (;;)
                        {
                            uint _3197 = ((_2973 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3186));
                            _3187 = (_3186 + 4294967295u) & _3186;
                            uint _3199 = _3197 * 40u;
                            _3212 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3199)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3199 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3199 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3199 + 3u)).x));
                            _3213 = _3212.w;
                            uint _3215 = (_3197 * 40u) + 4u;
                            _3228 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3215)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3215 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3215 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3215 + 3u)).x));
                            uint _3230 = (_3197 * 40u) + 8u;
                            _3240 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3230)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3230 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3230 + 2u)).x));
                            uint _3242 = (_3197 * 40u) + 16u;
                            _3255 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3242)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3242 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3242 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3242 + 3u)).x));
                            uint _3257 = (_3197 * 40u) + 20u;
                            _3270 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3257)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3257 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3257 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3257 + 3u)).x));
                            uint _3273 = (_3197 * 40u) + 24u;
                            vec4 _3286 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3273)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3273 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3273 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3273 + 3u)).x));
                            uint _3292 = (_3197 * 40u) + 28u;
                            vec4 _3305 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3292)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3292 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3292 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3292 + 3u)).x));
                            _3317 = fma(_2571, _3305.z, fma(_2570, _3305.y, _3305.x * _2569)) + _3305.w;
                            _3318 = !((fma(_2571, _3286.z, fma(_2570, _3286.y, _3286.x * _2569)) + _3286.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3318)
                            {
                                float _3345 = _3212.x - _2569;
                                float _3346 = _3212.y - _2570;
                                float _3347 = _3212.z - _2571;
                                float _3348 = dot(vec3(_3345, _3346, _3347), vec3(_3345, _3346, _3347));
                                float _3351 = inversesqrt(_3348);
                                float _3352 = _3351 * _3345;
                                float _3353 = _3351 * _3346;
                                float _3354 = _3351 * _3347;
                                float _3358 = 1.0 - (_3348 / (_3213 * _3213));
                                float _4427 = isnan(0.0) ? _3358 : (isnan(_3358) ? 0.0 : max(_3358, 0.0));
                                float _3359 = isnan(1.0) ? _4427 : (isnan(_4427) ? 1.0 : min(_4427, 1.0));
                                float _3363 = sqrt(_3348) * _3228.w;
                                float _3365 = 1.39999997615814208984375 / (_3363 + 1.39999997615814208984375);
                                float _3366 = _3365 * _3365;
                                float _3369 = ((1.0 - _3366) * dot(vec3(_3352, _3353, _3354), vec3(_809, _812, _815))) + _3366;
                                float _3372 = _3363 * _3363;
                                float _3376 = (fma(_2571, _3255.z, fma(_2570, _3255.y, _3255.x * _2569)) + _3255.w) / _3317;
                                float _3377 = (fma(_2571, _3270.z, fma(_2570, _3270.y, _3270.x * _2569)) + _3270.w) / _3317;
                                float _3381 = 1.0 - dot(vec2(_3376, _3377), vec2(_3376, _3377));
                                float _4443 = isnan(0.0) ? _3381 : (isnan(_3381) ? 0.0 : max(_3381, 0.0));
                                float _3382 = isnan(1.0) ? _4443 : (isnan(_4443) ? 1.0 : min(_4443, 1.0));
                                float _3383 = _3382 * (((isnan(0.0) ? _3369 : (isnan(_3369) ? 0.0 : max(_3369, 0.0))) * _3359) / ((_3372 * 0.699999988079071044921875) + 1.0));
                                float _3395 = exp2(log2(1.0 / ((_3372 * 3.5) + 5.0)) * 0.25);
                                float _3396 = 1.0 - _884;
                                float _3403 = sqrt(1.0 - ((1.0 - (_3396 * _3396)) * (1.0 - (_3395 * _3395))));
                                float _3404 = _3403 * _3403;
                                float _3405 = _3404 * _3404;
                                float _3406 = _3352 - _2854;
                                float _3407 = _3353 - _2855;
                                float _3408 = _3354 - _2856;
                                float _3412 = inversesqrt(dot(vec3(_3406, _3407, _3408), vec3(_3406, _3407, _3408)));
                                float _3416 = dot(vec3(_809, _812, _815), vec3((-0.0) - _2854, (-0.0) - _2855, (-0.0) - _2856));
                                float _4454 = isnan(0.0) ? _3416 : (isnan(_3416) ? 0.0 : max(_3416, 0.0));
                                float _3419 = isnan(1.0) ? _4454 : (isnan(_4454) ? 1.0 : min(_4454, 1.0));
                                float _3420 = dot(vec3(_809, _812, _815), vec3(_3412 * _3406, _3412 * _3407, _3412 * _3408));
                                float _4465 = isnan(0.0) ? _3420 : (isnan(_3420) ? 0.0 : max(_3420, 0.0));
                                float _3423 = isnan(1.0) ? _4465 : (isnan(_4465) ? 1.0 : min(_4465, 1.0));
                                float _3427 = ((_3423 * _3423) * (_3405 + (-1.0))) + 1.0;
                                float _3428 = _3365 * _3404;
                                float _3429 = _3428 * _3428;
                                float _3435 = ((1.0 - _3429) * dot(vec3(_809, _812, _815), vec3(_3352, _3353, _3354))) + _3429;
                                float _4476 = isnan(0.0) ? _3435 : (isnan(_3435) ? 0.0 : max(_3435, 0.0));
                                float _3436 = isnan(1.0) ? _4476 : (isnan(_4476) ? 1.0 : min(_4476, 1.0));
                                float _3437 = 1.0 - _3404;
                                float _3447 = (0.5 / (((_3436 * ((_3419 * _3437) + _3404)) + 9.9999999392252902907785028219223e-09) + (((_3436 * _3437) + _3404) * _3419))) * _3436;
                                float _4487 = isnan(0.0) ? _3447 : (isnan(_3447) ? 0.0 : max(_3447, 0.0));
                                float _3457 = (_3382 * _3359) * (((_3405 * 3.1415927410125732421875) * (isnan(1.0) ? _4487 : (isnan(_4487) ? 1.0 : min(_4487, 1.0)))) / ((_3427 * _3427) * ((_3372 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3457 * _3240.x;
                                frontier_phi_73_pred_1 = _3457 * _3240.y;
                                frontier_phi_73_pred_2 = _3383 * _3228.z;
                                frontier_phi_73_pred_3 = _3383 * _3228.y;
                                frontier_phi_73_pred_4 = _3383 * _3228.x;
                                frontier_phi_73_pred_5 = _3457 * _3240.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3461 = frontier_phi_73_pred;
                            _3462 = frontier_phi_73_pred_1;
                            _3466 = frontier_phi_73_pred_2;
                            _3465 = frontier_phi_73_pred_3;
                            _3464 = frontier_phi_73_pred_4;
                            _3463 = frontier_phi_73_pred_5;
                            _3170 = _3464 + _3183;
                            _3171 = _3465 + _3184;
                            _3172 = _3466 + _3185;
                            _3167 = _3461 + _3180;
                            _3168 = _3462 + _3181;
                            _3169 = _3463 + _3182;
                            if (_3187 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3180 = _3167;
                                _3181 = _3168;
                                _3182 = _3169;
                                _3183 = _3170;
                                _3184 = _3171;
                                _3185 = _3172;
                                _3186 = _3187;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3170;
                        frontier_phi_67_pred_1 = _3171;
                        frontier_phi_67_pred_2 = _3172;
                        frontier_phi_67_pred_3 = _3169;
                        frontier_phi_67_pred_4 = _3168;
                        frontier_phi_67_pred_5 = _3167;
                    }
                    _2835 = frontier_phi_67_pred;
                    _2837 = frontier_phi_67_pred_1;
                    _2839 = frontier_phi_67_pred_2;
                    _2833 = frontier_phi_67_pred_3;
                    _2831 = frontier_phi_67_pred_4;
                    _2829 = frontier_phi_67_pred_5;
                    uint _2974 = _2973 + 1u;
                    if (_2974 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2967 = _2829;
                        _2968 = _2831;
                        _2969 = _2833;
                        _2970 = _2835;
                        _2971 = _2837;
                        _2972 = _2839;
                        _2973 = _2974;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2837;
                frontier_phi_55_56_ladder_1 = _2839;
                frontier_phi_55_56_ladder_2 = _2835;
                frontier_phi_55_56_ladder_3 = _2833;
                frontier_phi_55_56_ladder_4 = _2831;
                frontier_phi_55_56_ladder_5 = _2829;
            }
            else
            {
                frontier_phi_55_56_ladder = _2724;
                frontier_phi_55_56_ladder_1 = _2726;
                frontier_phi_55_56_ladder_2 = _2722;
                frontier_phi_55_56_ladder_3 = _2720;
                frontier_phi_55_56_ladder_4 = _2718;
                frontier_phi_55_56_ladder_5 = _2716;
            }
            _2828 = frontier_phi_55_56_ladder_5;
            _2830 = frontier_phi_55_56_ladder_4;
            _2832 = frontier_phi_55_56_ladder_3;
            _2834 = frontier_phi_55_56_ladder_2;
            _2836 = frontier_phi_55_56_ladder;
            _2838 = frontier_phi_55_56_ladder_1;
        }
        float _2843 = isnan(1.0) ? _868 : (isnan(_868) ? 1.0 : min(_868, 1.0));
        _2628 = (_2843 * _2834) + _2061;
        _2630 = (_2843 * _2836) + _2063;
        _2632 = (_2843 * _2838) + _2065;
        _2634 = ((_2828 * _853) * _2843) + _2409;
        _2636 = ((_2830 * _855) * _2843) + _2411;
        _2638 = ((_2832 * _856) * _2843) + _2413;
    }
    else
    {
        _2628 = _2061;
        _2630 = _2063;
        _2632 = _2065;
        _2634 = _2409;
        _2636 = _2411;
        _2638 = _2413;
    }
    float _4503 = isnan(0.0) ? _843 : (isnan(_843) ? 0.0 : max(_843, 0.0));
    float _4514 = isnan(0.0) ? _844 : (isnan(_844) ? 0.0 : max(_844, 0.0));
    float _4525 = isnan(0.0) ? _845 : (isnan(_845) ? 0.0 : max(_845, 0.0));
    uint _2658 = _828 + 6u;
    float _2666 = _790 / cbSceneParam._m0[86u].x;
    float _2667 = _791 / cbSceneParam._m0[86u].y;
    vec4 _2681 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2666, _2667, (log2((isnan(cbSceneParam._m0[77u].w) ? _725 : (isnan(_725) ? cbSceneParam._m0[77u].w : min(_725, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2683 = _2681.x;
    float _2684 = _2681.y;
    float _2685 = _2681.z;
    float _2686 = _2681.w;
    float _2778;
    float _2780;
    float _2782;
    float _2784;
    if (_725 > cbSceneParam._m0[78u].w)
    {
        float _2741 = isnan(_725) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _725 : min(cbSceneParam._m0[80u].w, _725));
        float _2742 = _2741 / _725;
        float _2753 = _2742 * _775;
        float _2754 = _776 * _2742;
        float _2755 = (-0.0) - _2754;
        float _2756 = _2742 * _777;
        float _2758 = (cbSceneParam._m0[77u].w * _2755) / _2741;
        float _2759 = _2758 + cbSceneParam._m0[79u].w;
        float _2760 = cbSceneParam._m0[79u].w - _2754;
        float _2766 = sqrt(((_2753 * _2753) + (_2754 * _2754)) + (_2756 * _2756));
        float _2769 = (1.0 - (cbSceneParam._m0[77u].w / _2741)) * _2766;
        float _2774 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2776 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2929;
        if (abs((_2755 - _2758) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2929 = ((((_2759 > 0.0) ? exp2(_2774 * _2759) : (2.0 - exp2(_2776 * _2759))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2769;
        }
        else
        {
            float _2889 = 1.0 / cbSceneParam._m0[80u].x;
            float _2890 = isnan(_2760) ? _2759 : (isnan(_2759) ? _2760 : max(_2759, _2760));
            float _2891 = isnan(_2760) ? _2759 : (isnan(_2759) ? _2760 : min(_2759, _2760));
            float _2900 = isnan(0.0) ? _2890 : (isnan(_2890) ? 0.0 : min(_2890, 0.0));
            float _2901 = isnan(0.0) ? _2891 : (isnan(_2891) ? 0.0 : min(_2891, 0.0));
            _2929 = ((abs(_2766 / _2755) * cbSceneParam._m0[80u].y) * ((((_2900 - _2901) * 2.0) - ((exp2(_2774 * (isnan(0.0) ? _2890 : (isnan(_2890) ? 0.0 : max(_2890, 0.0)))) - exp2(_2774 * (isnan(0.0) ? _2891 : (isnan(_2891) ? 0.0 : max(_2891, 0.0))))) * _2889)) - ((exp2(_2776 * _2900) - exp2(_2776 * _2901)) * _2889))) + (_2769 * cbSceneParam._m0[80u].z);
        }
        vec4 _2931 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2666, _2667, 1.0), 0.0);
        float _2940 = exp2((_2929 * (-1.44269502162933349609375)) * (1.0 - _2931.w));
        float _2941 = log2(_2940);
        float _2957 = log2(_2686);
        _2778 = (exp2(_2957 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2941 * cbSceneParam._m0[78u].x)) * _2931.x) / cbSceneParam._m0[78u].x)) + _2683;
        _2780 = (exp2(_2957 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2941 * cbSceneParam._m0[78u].y)) * _2931.y) / cbSceneParam._m0[78u].y)) + _2684;
        _2782 = (exp2(_2957 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2941 * cbSceneParam._m0[78u].z)) * _2931.z) / cbSceneParam._m0[78u].z)) + _2685;
        _2784 = _2940 * _2686;
    }
    else
    {
        _2778 = _2683;
        _2780 = _2684;
        _2782 = _2685;
        _2784 = _2686;
    }
    float _2796 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2797 = _2796 == 3.0;
    float _2798 = log2(_2784);
    float _2805 = exp2(_2798 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4503 : (isnan(_4503) ? 1.0 : min(_4503, 1.0))) * (_2628 + ((isnan(0.0) ? _1599 : (isnan(_1599) ? 0.0 : max(_1599, 0.0))) * _868))) + ((_2634 + ((isnan(0.0) ? _1893 : (isnan(_1893) ? 0.0 : max(_1893, 0.0))) * _1678)) * cbPerFrame._m0[3u].x));
    float _2806 = exp2(_2798 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4514 : (isnan(_4514) ? 1.0 : min(_4514, 1.0))) * (_2630 + ((isnan(0.0) ? _1602 : (isnan(_1602) ? 0.0 : max(_1602, 0.0))) * _868))) + ((_2636 + ((isnan(0.0) ? _1896 : (isnan(_1896) ? 0.0 : max(_1896, 0.0))) * _1678)) * cbPerFrame._m0[3u].x));
    float _2807 = exp2(_2798 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4525 : (isnan(_4525) ? 1.0 : min(_4525, 1.0))) * (_2632 + ((isnan(0.0) ? _1605 : (isnan(_1605) ? 0.0 : max(_1605, 0.0))) * _868))) + ((_2638 + ((isnan(0.0) ? _1899 : (isnan(_1899) ? 0.0 : max(_1899, 0.0))) * _1678)) * cbPerFrame._m0[3u].x));
    float _2816 = (_2796 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2816 * (_2797 ? _2805 : (_2805 + (cbSceneParam._m0[72u].w * _2778)));
    SV_Target.y = _2816 * (_2797 ? _2806 : (_2806 + (cbSceneParam._m0[72u].w * _2780)));
    SV_Target.z = _2816 * (_2797 ? _2807 : (_2807 + (cbSceneParam._m0[72u].w * _2782)));
    SV_Target.w = cbInstanceData._m0[_2658].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2658].w;
}


