#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[20];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_19;
layout(set = 0, binding = 11) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_3;
layout(set = 0, binding = 14) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_5;
layout(set = 0, binding = 15) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_6;
layout(set = 0, binding = 17) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_8;
layout(set = 0, binding = 2) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_13;
layout(set = 0, binding = 5) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_14;
layout(set = 0, binding = 6) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_15;
layout(set = 0, binding = 7) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_16;
layout(set = 0, binding = 8) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_17;
layout(set = 0, binding = 9) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_18;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1260;
float _3642;
float _3643;
float _3644;
float _3645;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _203 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _204 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _205 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _211 = inversesqrt(dot(vec3(_203, _204, _205), vec3(_203, _204, _205)));
    float _218 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _225 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _248 = sin(cbMtdParam._m0[18u].x);
    float _249 = cos(cbMtdParam._m0[18u].x);
    float _250 = TEXCOORD.x - cbMtdParam._m0[17u].w;
    float _251 = TEXCOORD.y - cbMtdParam._m0[17u].w;
    float _259 = (cbMtdParam._m0[17u].w + cbMtdParam._m0[19u].y) + fma(_251, (-0.0) - _248, _249 * _250);
    float _261 = (cbMtdParam._m0[17u].w + cbMtdParam._m0[19u].z) + fma(_251, _249, _250 * _248);
    vec4 _274 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * _259) + cbTextureTilingScale._m0[1u].z, (_261 * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w));
    float _280 = _274.x * cbMtdParam._m0[10u].x;
    float _281 = _274.y * cbMtdParam._m0[10u].y;
    float _282 = _274.z * cbMtdParam._m0[10u].z;
    vec4 _300 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w));
    vec4 _319 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_0, SS_WrapLinear), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _344 = cbMtdParam._m0[19u].x * texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.x) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD.y) + cbTextureTilingScale._m0[13u].w)).x;
    float _355 = ((cbMtdParam._m0[15u].x * (-1.39999997615814208984375)) * (((1.0 - _319.x) * 2.0) - _344)) + 1.0;
    float _3654 = isnan(0.0) ? _355 : (isnan(_355) ? 0.0 : max(_355, 0.0));
    float _356 = isnan(1.0) ? _3654 : (isnan(_3654) ? 1.0 : min(_3654, 1.0));
    float _363 = (_356 * ((_300.x * cbMtdParam._m0[11u].x) - _280)) + _280;
    float _364 = (_356 * ((_300.y * cbMtdParam._m0[11u].y) - _281)) + _281;
    float _365 = (_356 * ((_300.z * cbMtdParam._m0[11u].z) - _282)) + _282;
    vec4 _383 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_8, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[17u].x * TEXCOORD.x) + cbTextureTilingScale._m0[17u].z, (cbTextureTilingScale._m0[17u].y * TEXCOORD.y) + cbTextureTilingScale._m0[17u].w));
    float _396 = (((((1.0 - _319.y) * 2.0) - _344) * (-1.39999997615814208984375)) * cbMtdParam._m0[18u].z) + 1.0;
    float _3665 = isnan(0.0) ? _396 : (isnan(_396) ? 0.0 : max(_396, 0.0));
    float _397 = isnan(1.0) ? _3665 : (isnan(_3665) ? 1.0 : min(_3665, 1.0));
    float _404 = (((_383.x * cbMtdParam._m0[12u].x) - _363) * _397) + _363;
    float _405 = (_397 * ((_383.y * cbMtdParam._m0[12u].y) - _364)) + _364;
    float _406 = (_397 * ((_383.z * cbMtdParam._m0[12u].z) - _365)) + _365;
    vec4 _423 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _436 = (((((1.0 - _319.z) * 2.0) - _344) * (-1.39999997615814208984375)) * cbMtdParam._m0[18u].w) + 1.0;
    float _3676 = isnan(0.0) ? _436 : (isnan(_436) ? 0.0 : max(_436, 0.0));
    float _437 = isnan(1.0) ? _3676 : (isnan(_3676) ? 1.0 : min(_3676, 1.0));
    vec4 _465 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _473 = ((((((_423.x * cbMtdParam._m0[13u].x) - _404) * _437) + _404) * 4.55000019073486328125) * cbMtdParam._m0[9u].x) * _465.x;
    float _476 = ((((_437 * ((_423.y * cbMtdParam._m0[13u].y) - _405)) + _405) * 4.55000019073486328125) * cbMtdParam._m0[9u].y) * _465.y;
    float _479 = ((((_437 * ((_423.z * cbMtdParam._m0[13u].z) - _406)) + _406) * 4.55000019073486328125) * cbMtdParam._m0[9u].z) * _465.z;
    vec4 _492 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * _259) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _261) + cbTextureTilingScale._m0[5u].w));
    float _494 = _492.x;
    float _512 = ((texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w)).x - _494) * _356) + _494;
    float _529 = ((texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w)).x - _512) * _397) + _512;
    float _548 = (((texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w)).x - _529) * _437) + _529) * cbMtdParam._m0[18u].y;
    vec4 _561 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[14u].x * _259) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _261) + cbTextureTilingScale._m0[14u].w));
    float _563 = _561.x;
    float _564 = _561.y;
    float _567 = cbMtdParam._m0[17u].y * _561.z;
    vec4 _579 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * TEXCOORD.x) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * TEXCOORD.y) + cbTextureTilingScale._m0[15u].w));
    float _588 = (((cbMtdParam._m0[17u].x * _579.z) - _567) * _356) + _567;
    vec4 _601 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_15, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _613 = (((cbMtdParam._m0[16u].w * _601.z) - _588) * _397) + _588;
    vec4 _626 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _635 = (((cbMtdParam._m0[16u].z * _626.z) - _613) * _437) + _613;
    float _640 = ((_579.x - _563) * _356) + _563;
    float _641 = ((_579.y - _564) * _356) + _564;
    float _646 = ((_601.x - _640) * _397) + _640;
    float _647 = ((_601.y - _641) * _397) + _641;
    float _656 = ((((_626.x - _646) * _437) + _646) * 2.0) + (-1.0);
    float _658 = ((((_626.y - _647) * _437) + _647) * 2.0) + (-1.0);
    float _659 = dot(vec2(_656, _658), vec2(_656, _658));
    float _3687 = isnan(0.0) ? _659 : (isnan(_659) ? 0.0 : max(_659, 0.0));
    float _664 = sqrt(1.0 - (isnan(1.0) ? _3687 : (isnan(_3687) ? 1.0 : min(_3687, 1.0))));
    float _667 = fma(_664, _218 * NORMAL.x, fma(_658, _225 * TANGENT.x, (_211 * _203) * _656));
    float _670 = fma(_664, _218 * NORMAL.y, fma(_658, _225 * TANGENT.y, (_211 * _204) * _656));
    float _673 = fma(_664, _218 * NORMAL.z, fma(_658, _225 * TANGENT.z, (_211 * _205) * _656));
    float _677 = inversesqrt(dot(vec3(_667, _670, _673), vec3(_667, _670, _673)));
    float _678 = _677 * _667;
    float _679 = _677 * _670;
    float _680 = _677 * _673;
    float _3698 = isnan(0.0) ? _635 : (isnan(_635) ? 0.0 : max(_635, 0.0));
    float _681 = isnan(1.0) ? _3698 : (isnan(_3698) ? 1.0 : min(_3698, 1.0));
    float _3709 = isnan(0.0) ? _473 : (isnan(_473) ? 0.0 : max(_473, 0.0));
    float _3720 = isnan(0.0) ? _476 : (isnan(_476) ? 0.0 : max(_476, 0.0));
    float _3731 = isnan(0.0) ? _479 : (isnan(_479) ? 0.0 : max(_479, 0.0));
    float _3742 = isnan(0.0) ? _548 : (isnan(_548) ? 0.0 : max(_548, 0.0));
    float _685 = isnan(1.0) ? _3742 : (isnan(_3742) ? 1.0 : min(_3742, 1.0));
    float _701 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _741 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _751 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _741);
    float _752 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _741);
    float _753 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _741);
    float _757 = inversesqrt(dot(vec3(_751, _752, _753), vec3(_751, _752, _753)));
    float _758 = _751 * _757;
    float _759 = _752 * _757;
    float _760 = _753 * _757;
    vec4 _765 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _767 = _765.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _939 = sqrt(((_751 * _751) + (_752 * _752)) + (_753 * _753));
        float _945 = (cbMatDynParam._m0[5u].x * _939) + cbMatDynParam._m0[5u].y;
        float _3753 = isnan(0.0) ? _945 : (isnan(_945) ? 0.0 : max(_945, 0.0));
        float _946 = isnan(1.0) ? _3753 : (isnan(_3753) ? 1.0 : min(_3753, 1.0));
        float _950 = (cbMatDynParam._m0[5u].z * _939) + cbMatDynParam._m0[5u].w;
        float _3764 = isnan(0.0) ? _950 : (isnan(_950) ? 0.0 : max(_950, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3764 : (isnan(_3764) ? 1.0 : min(_3764, 1.0))) - _946)) + _946) < ((_767 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _778 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _779 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _797 = fma(_680, cbSceneParam._m0[5u].z, fma(_679, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _678));
    float _800 = fma(_680, cbSceneParam._m0[6u].z, fma(_679, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _678));
    float _803 = fma(_680, cbSceneParam._m0[7u].z, fma(_679, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _678));
    uint _816 = uint(roundEven(NORMAL.w)) * 13u;
    uint _817 = _816 + 9u;
    uint _818 = _817 + uint(cbMatDynParam._m0[0u].w);
    float _824 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3709 : (isnan(_3709) ? 1.0 : min(_3709, 1.0)))) * cbInstanceData._m0[_818].x;
    float _825 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3720 : (isnan(_3720) ? 1.0 : min(_3720, 1.0)))) * cbInstanceData._m0[_818].y;
    float _826 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3731 : (isnan(_3731) ? 1.0 : min(_3731, 1.0)))) * cbInstanceData._m0[_818].z;
    float _3775 = isnan(0.0) ? _824 : (isnan(_824) ? 0.0 : max(_824, 0.0));
    float _827 = isnan(1.0) ? _3775 : (isnan(_3775) ? 1.0 : min(_3775, 1.0));
    float _3786 = isnan(0.0) ? _825 : (isnan(_825) ? 0.0 : max(_825, 0.0));
    float _828 = isnan(1.0) ? _3786 : (isnan(_3786) ? 1.0 : min(_3786, 1.0));
    float _3797 = isnan(0.0) ? _826 : (isnan(_826) ? 0.0 : max(_826, 0.0));
    float _829 = isnan(1.0) ? _3797 : (isnan(_3797) ? 1.0 : min(_3797, 1.0));
    float _830 = 1.0 - _685;
    float _831 = _827 * _830;
    float _832 = _828 * _830;
    float _833 = _829 * _830;
    float _838 = (_827 + (-0.039999999105930328369140625)) * _685;
    float _839 = (_828 + (-0.039999999105930328369140625)) * _685;
    float _840 = (_829 + (-0.039999999105930328369140625)) * _685;
    float _841 = _838 + 0.039999999105930328369140625;
    float _843 = _839 + 0.039999999105930328369140625;
    float _844 = _840 + 0.039999999105930328369140625;
    vec4 _853 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _778, cbSceneParam._m0[86u].y * _779));
    float _856 = _853.x * TEXCOORD_5.w;
    float _857 = dot(vec3(_678, _679, _680), vec3(_758, _759, _760));
    float _860 = _857 * 2.0;
    float _864 = (_860 * _678) - _758;
    float _865 = (_860 * _679) - _759;
    float _866 = (_860 * _680) - _760;
    float _870 = abs(dot(vec3(_758, _759, _760), vec3(_678, _679, _680)));
    float _3808 = isnan(0.0) ? _870 : (isnan(_870) ? 0.0 : max(_870, 0.0));
    float _872 = sqrt(_681);
    float _885 = exp2((_872 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3808 : (isnan(_3808) ? 1.0 : min(_3808, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_872 * 3.0));
    float _891 = (1.0 - _885) * ((_872 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _892 = _885 * _872;
    float _920 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _924 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _928 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1259;
    float _1261;
    float _1262;
    float _1263;
    float _1264;
    float _1265;
    float _1266;
    float _1267;
    float _1268;
    float _1269;
    float _1270;
    float _1271;
    float _1272;
    float _1273;
    float _1274;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _984 = fma(_928, cbModelParam._m0[26u].z, fma(_924, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _920));
        float _988 = fma(_928, cbModelParam._m0[27u].z, fma(_924, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _920));
        float _992 = fma(_928, cbModelParam._m0[28u].z, fma(_924, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _920));
        float _1017 = _920 + _678;
        float _1018 = _924 + _679;
        float _1019 = _928 + _680;
        float _1029 = fma(_1019, cbModelParam._m0[26u].z, fma(_1018, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1017)) - _984;
        float _1030 = fma(_1019, cbModelParam._m0[27u].z, fma(_1018, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1017)) - _988;
        float _1031 = fma(_1019, cbModelParam._m0[28u].z, fma(_1018, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1017)) - _992;
        float _1035 = inversesqrt(dot(vec3(_1029, _1030, _1031), vec3(_1029, _1030, _1031)));
        float _1048 = ((_1035 * _1029) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_984 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1049 = ((_1035 * _1030) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_988 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1050 = ((_1035 * _1031) / cbModelParam._m0[34u].z) + ((((((_992 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1053 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1048, _1049, _1050), 0.0);
        vec4 _1060 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1048, _1049, _1050), 0.0);
        vec4 _1067 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1048, _1049, _1050), 0.0);
        vec4 _1074 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1048, _1049, _1050), 0.0);
        float _1087 = exp2((_1053.w + (-0.5)) * 20.0) * 2.0;
        float _1088 = _1087 * (_1053.x + (-0.5));
        float _1089 = _1087 * (_1053.y + (-0.5));
        float _1090 = _1087 * (_1053.z + (-0.5));
        float _1097 = exp2((_1060.w + (-0.5)) * 20.0) * 2.0;
        float _1098 = _1097 * (_1060.x + (-0.5));
        float _1099 = _1097 * (_1060.y + (-0.5));
        float _1100 = _1097 * (_1060.z + (-0.5));
        float _1107 = exp2((_1067.w + (-0.5)) * 20.0) * 2.0;
        float _1108 = _1107 * (_1067.x + (-0.5));
        float _1109 = _1107 * (_1067.y + (-0.5));
        float _1110 = _1107 * (_1067.z + (-0.5));
        float _1117 = exp2((_1074.w + (-0.5)) * 20.0) * 2.0;
        float _1118 = _1117 * (_1074.x + (-0.5));
        float _1119 = _1117 * (_1074.y + (-0.5));
        float _1120 = _1117 * (_1074.z + (-0.5));
        float _1121 = isnan(0.0) ? _1118 : (isnan(_1118) ? 0.0 : max(_1118, 0.0));
        float _1122 = isnan(0.0) ? _1119 : (isnan(_1119) ? 0.0 : max(_1119, 0.0));
        float _1123 = isnan(0.0) ? _1120 : (isnan(_1120) ? 0.0 : max(_1120, 0.0));
        float _1124 = _1088 * 0.5;
        float _1125 = _1098 * 0.5;
        float _1126 = _1108 * 0.5;
        float _1127 = dot(vec3(_1124, _1125, _1126), vec3(_1124, _1125, _1126));
        float _1132 = (_1127 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1127);
        float _1141 = (dot(vec3(_678, _679, _680), vec3(_1132 * _1124, _1132 * _1125, _1132 * _1126)) + 1.0) * 0.5;
        float _3834 = isnan(0.0) ? _1141 : (isnan(_1141) ? 0.0 : max(_1141, 0.0));
        float _1151 = sqrt(((_1125 * _1125) + (_1124 * _1124)) + (_1126 * _1126)) / (_1121 + 9.9999997473787516355514526367188e-06);
        float _3845 = isnan(0.0) ? _1151 : (isnan(_1151) ? 0.0 : max(_1151, 0.0));
        float _1152 = isnan(1.0) ? _3845 : (isnan(_3845) ? 1.0 : min(_3845, 1.0));
        float _1153 = _1152 * 2.0;
        float _1157 = (1.0 - _1152) / (_1152 + 1.0);
        float _3856 = isnan(0.0) ? _1157 : (isnan(_1157) ? 0.0 : max(_1157, 0.0));
        float _1158 = isnan(1.0) ? _3856 : (isnan(_3856) ? 1.0 : min(_3856, 1.0));
        float _1167 = ((((1.0 - _1158) * (_1153 + 2.0)) * exp2(log2(isnan(1.0) ? _3834 : (isnan(_3834) ? 1.0 : min(_3834, 1.0))) * (_1153 + 1.0))) + _1158) * _1121;
        float _1168 = _1089 * 0.5;
        float _1169 = _1099 * 0.5;
        float _1170 = _1109 * 0.5;
        float _1171 = dot(vec3(_1168, _1169, _1170), vec3(_1168, _1169, _1170));
        float _1176 = (_1171 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1171);
        float _1184 = (dot(vec3(_678, _679, _680), vec3(_1176 * _1168, _1176 * _1169, _1176 * _1170)) + 1.0) * 0.5;
        float _3867 = isnan(0.0) ? _1184 : (isnan(_1184) ? 0.0 : max(_1184, 0.0));
        float _1193 = sqrt(((_1169 * _1169) + (_1168 * _1168)) + (_1170 * _1170)) / (_1122 + 9.9999997473787516355514526367188e-06);
        float _3878 = isnan(0.0) ? _1193 : (isnan(_1193) ? 0.0 : max(_1193, 0.0));
        float _1194 = isnan(1.0) ? _3878 : (isnan(_3878) ? 1.0 : min(_3878, 1.0));
        float _1195 = _1194 * 2.0;
        float _1199 = (1.0 - _1194) / (_1194 + 1.0);
        float _3889 = isnan(0.0) ? _1199 : (isnan(_1199) ? 0.0 : max(_1199, 0.0));
        float _1200 = isnan(1.0) ? _3889 : (isnan(_3889) ? 1.0 : min(_3889, 1.0));
        float _1209 = ((((1.0 - _1200) * (_1195 + 2.0)) * exp2(log2(isnan(1.0) ? _3867 : (isnan(_3867) ? 1.0 : min(_3867, 1.0))) * (_1195 + 1.0))) + _1200) * _1122;
        float _1210 = _1090 * 0.5;
        float _1211 = _1100 * 0.5;
        float _1212 = _1110 * 0.5;
        float _1213 = dot(vec3(_1210, _1211, _1212), vec3(_1210, _1211, _1212));
        float _1218 = (_1213 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1213);
        float _1226 = (dot(vec3(_678, _679, _680), vec3(_1218 * _1210, _1218 * _1211, _1218 * _1212)) + 1.0) * 0.5;
        float _3900 = isnan(0.0) ? _1226 : (isnan(_1226) ? 0.0 : max(_1226, 0.0));
        float _1235 = sqrt(((_1211 * _1211) + (_1210 * _1210)) + (_1212 * _1212)) / (_1123 + 9.9999997473787516355514526367188e-06);
        float _3911 = isnan(0.0) ? _1235 : (isnan(_1235) ? 0.0 : max(_1235, 0.0));
        float _1236 = isnan(1.0) ? _3911 : (isnan(_3911) ? 1.0 : min(_3911, 1.0));
        float _1237 = _1236 * 2.0;
        float _1241 = (1.0 - _1236) / (_1236 + 1.0);
        float _3922 = isnan(0.0) ? _1241 : (isnan(_1241) ? 0.0 : max(_1241, 0.0));
        float _1242 = isnan(1.0) ? _3922 : (isnan(_3922) ? 1.0 : min(_3922, 1.0));
        float _1251 = ((((1.0 - _1242) * (_1237 + 2.0)) * exp2(log2(isnan(1.0) ? _3900 : (isnan(_3900) ? 1.0 : min(_3900, 1.0))) * (_1237 + 1.0))) + _1242) * _1123;
        _1259 = _1090;
        _1261 = _1089;
        _1262 = _1088;
        _1263 = _1100;
        _1264 = _1099;
        _1265 = _1098;
        _1266 = _1110;
        _1267 = _1109;
        _1268 = _1108;
        _1269 = _1123;
        _1270 = _1122;
        _1271 = _1121;
        _1272 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1167 : (isnan(_1167) ? 0.0 : max(_1167, 0.0)));
        _1273 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1209 : (isnan(_1209) ? 0.0 : max(_1209, 0.0)));
        _1274 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1251 : (isnan(_1251) ? 0.0 : max(_1251, 0.0)));
    }
    else
    {
        _1259 = _1260;
        _1261 = _1260;
        _1262 = _1260;
        _1263 = _1260;
        _1264 = _1260;
        _1265 = _1260;
        _1266 = _1260;
        _1267 = _1260;
        _1268 = _1260;
        _1269 = _1260;
        _1270 = _1260;
        _1271 = _1260;
        _1272 = 0.0;
        _1273 = 0.0;
        _1274 = 0.0;
    }
    float _1572;
    float _1573;
    float _1574;
    float _1575;
    float _1576;
    float _1577;
    float _1578;
    float _1579;
    float _1580;
    float _1581;
    float _1582;
    float _1583;
    float _1584;
    float _1585;
    float _1586;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1303 = fma(_928, cbModelParam._m0[30u].z, fma(_924, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _920));
        float _1307 = fma(_928, cbModelParam._m0[31u].z, fma(_924, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _920));
        float _1311 = fma(_928, cbModelParam._m0[32u].z, fma(_924, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _920));
        float _1334 = _920 + _678;
        float _1335 = _924 + _679;
        float _1336 = _928 + _680;
        float _1346 = fma(_1336, cbModelParam._m0[30u].z, fma(_1335, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1334)) - _1303;
        float _1347 = fma(_1336, cbModelParam._m0[31u].z, fma(_1335, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1334)) - _1307;
        float _1348 = fma(_1336, cbModelParam._m0[32u].z, fma(_1335, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1334)) - _1311;
        float _1352 = inversesqrt(dot(vec3(_1346, _1347, _1348), vec3(_1346, _1347, _1348)));
        float _1365 = ((_1352 * _1346) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1303 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1366 = ((_1352 * _1347) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1307 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1367 = ((_1352 * _1348) / cbModelParam._m0[35u].z) + ((((((_1311 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1369 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1365, _1366, _1367), 0.0);
        vec4 _1376 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1365, _1366, _1367), 0.0);
        vec4 _1383 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1365, _1366, _1367), 0.0);
        vec4 _1390 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1365, _1366, _1367), 0.0);
        float _1402 = exp2((_1369.w + (-0.5)) * 20.0) * 2.0;
        float _1403 = _1402 * (_1369.x + (-0.5));
        float _1404 = _1402 * (_1369.y + (-0.5));
        float _1405 = _1402 * (_1369.z + (-0.5));
        float _1412 = exp2((_1376.w + (-0.5)) * 20.0) * 2.0;
        float _1413 = _1412 * (_1376.x + (-0.5));
        float _1414 = _1412 * (_1376.y + (-0.5));
        float _1415 = _1412 * (_1376.z + (-0.5));
        float _1422 = exp2((_1383.w + (-0.5)) * 20.0) * 2.0;
        float _1423 = _1422 * (_1383.x + (-0.5));
        float _1424 = _1422 * (_1383.y + (-0.5));
        float _1425 = _1422 * (_1383.z + (-0.5));
        float _1432 = exp2((_1390.w + (-0.5)) * 20.0) * 2.0;
        float _1433 = _1432 * (_1390.x + (-0.5));
        float _1434 = _1432 * (_1390.y + (-0.5));
        float _1435 = _1432 * (_1390.z + (-0.5));
        float _1436 = isnan(0.0) ? _1433 : (isnan(_1433) ? 0.0 : max(_1433, 0.0));
        float _1437 = isnan(0.0) ? _1434 : (isnan(_1434) ? 0.0 : max(_1434, 0.0));
        float _1438 = isnan(0.0) ? _1435 : (isnan(_1435) ? 0.0 : max(_1435, 0.0));
        float _1439 = _1403 * 0.5;
        float _1440 = _1413 * 0.5;
        float _1441 = _1423 * 0.5;
        float _1442 = dot(vec3(_1439, _1440, _1441), vec3(_1439, _1440, _1441));
        float _1447 = (_1442 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1442);
        float _1455 = (dot(vec3(_678, _679, _680), vec3(_1447 * _1439, _1447 * _1440, _1447 * _1441)) + 1.0) * 0.5;
        float _3963 = isnan(0.0) ? _1455 : (isnan(_1455) ? 0.0 : max(_1455, 0.0));
        float _1464 = sqrt(((_1440 * _1440) + (_1439 * _1439)) + (_1441 * _1441)) / (_1436 + 9.9999997473787516355514526367188e-06);
        float _3974 = isnan(0.0) ? _1464 : (isnan(_1464) ? 0.0 : max(_1464, 0.0));
        float _1465 = isnan(1.0) ? _3974 : (isnan(_3974) ? 1.0 : min(_3974, 1.0));
        float _1466 = _1465 * 2.0;
        float _1470 = (1.0 - _1465) / (_1465 + 1.0);
        float _3985 = isnan(0.0) ? _1470 : (isnan(_1470) ? 0.0 : max(_1470, 0.0));
        float _1471 = isnan(1.0) ? _3985 : (isnan(_3985) ? 1.0 : min(_3985, 1.0));
        float _1480 = ((((1.0 - _1471) * (_1466 + 2.0)) * exp2(log2(isnan(1.0) ? _3963 : (isnan(_3963) ? 1.0 : min(_3963, 1.0))) * (_1466 + 1.0))) + _1471) * _1436;
        float _1481 = _1404 * 0.5;
        float _1482 = _1414 * 0.5;
        float _1483 = _1424 * 0.5;
        float _1484 = dot(vec3(_1481, _1482, _1483), vec3(_1481, _1482, _1483));
        float _1489 = (_1484 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1484);
        float _1497 = (dot(vec3(_678, _679, _680), vec3(_1489 * _1481, _1489 * _1482, _1489 * _1483)) + 1.0) * 0.5;
        float _3996 = isnan(0.0) ? _1497 : (isnan(_1497) ? 0.0 : max(_1497, 0.0));
        float _1506 = sqrt(((_1482 * _1482) + (_1481 * _1481)) + (_1483 * _1483)) / (_1437 + 9.9999997473787516355514526367188e-06);
        float _4007 = isnan(0.0) ? _1506 : (isnan(_1506) ? 0.0 : max(_1506, 0.0));
        float _1507 = isnan(1.0) ? _4007 : (isnan(_4007) ? 1.0 : min(_4007, 1.0));
        float _1508 = _1507 * 2.0;
        float _1512 = (1.0 - _1507) / (_1507 + 1.0);
        float _4018 = isnan(0.0) ? _1512 : (isnan(_1512) ? 0.0 : max(_1512, 0.0));
        float _1513 = isnan(1.0) ? _4018 : (isnan(_4018) ? 1.0 : min(_4018, 1.0));
        float _1522 = ((((1.0 - _1513) * (_1508 + 2.0)) * exp2(log2(isnan(1.0) ? _3996 : (isnan(_3996) ? 1.0 : min(_3996, 1.0))) * (_1508 + 1.0))) + _1513) * _1437;
        float _1523 = _1405 * 0.5;
        float _1524 = _1415 * 0.5;
        float _1525 = _1425 * 0.5;
        float _1526 = dot(vec3(_1523, _1524, _1525), vec3(_1523, _1524, _1525));
        float _1531 = (_1526 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1526);
        float _1539 = (dot(vec3(_678, _679, _680), vec3(_1531 * _1523, _1531 * _1524, _1531 * _1525)) + 1.0) * 0.5;
        float _4029 = isnan(0.0) ? _1539 : (isnan(_1539) ? 0.0 : max(_1539, 0.0));
        float _1548 = sqrt(((_1524 * _1524) + (_1523 * _1523)) + (_1525 * _1525)) / (_1438 + 9.9999997473787516355514526367188e-06);
        float _4040 = isnan(0.0) ? _1548 : (isnan(_1548) ? 0.0 : max(_1548, 0.0));
        float _1549 = isnan(1.0) ? _4040 : (isnan(_4040) ? 1.0 : min(_4040, 1.0));
        float _1550 = _1549 * 2.0;
        float _1554 = (1.0 - _1549) / (_1549 + 1.0);
        float _4051 = isnan(0.0) ? _1554 : (isnan(_1554) ? 0.0 : max(_1554, 0.0));
        float _1555 = isnan(1.0) ? _4051 : (isnan(_4051) ? 1.0 : min(_4051, 1.0));
        float _1564 = ((((1.0 - _1555) * (_1550 + 2.0)) * exp2(log2(isnan(1.0) ? _4029 : (isnan(_4029) ? 1.0 : min(_4029, 1.0))) * (_1550 + 1.0))) + _1555) * _1438;
        _1572 = _1405;
        _1573 = _1404;
        _1574 = _1403;
        _1575 = _1415;
        _1576 = _1414;
        _1577 = _1413;
        _1578 = _1425;
        _1579 = _1424;
        _1580 = _1423;
        _1581 = _1438;
        _1582 = _1437;
        _1583 = _1436;
        _1584 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1480 : (isnan(_1480) ? 0.0 : max(_1480, 0.0)));
        _1585 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1522 : (isnan(_1522) ? 0.0 : max(_1522, 0.0)));
        _1586 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1564 : (isnan(_1564) ? 0.0 : max(_1564, 0.0)));
    }
    else
    {
        _1572 = _1260;
        _1573 = _1260;
        _1574 = _1260;
        _1575 = _1260;
        _1576 = _1260;
        _1577 = _1260;
        _1578 = _1260;
        _1579 = _1260;
        _1580 = _1260;
        _1581 = _1260;
        _1582 = _1260;
        _1583 = _1260;
        _1584 = 0.0;
        _1585 = 0.0;
        _1586 = 0.0;
    }
    float _1596 = (cbModelParam._m0[1u].x * (_1584 - _1272)) + _1272;
    float _1597 = (cbModelParam._m0[1u].x * (_1585 - _1273)) + _1273;
    float _1598 = (cbModelParam._m0[1u].x * (_1586 - _1274)) + _1274;
    float _1619 = fma(_1598, cbSceneParam._m0[89u].z, fma(_1597, cbSceneParam._m0[89u].y, _1596 * cbSceneParam._m0[89u].x));
    float _1622 = fma(_1598, cbSceneParam._m0[90u].z, fma(_1597, cbSceneParam._m0[90u].y, _1596 * cbSceneParam._m0[90u].x));
    float _1625 = fma(_1598, cbSceneParam._m0[91u].z, fma(_1597, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1596));
    float _1640 = _864 * 0.5;
    float _1641 = _865 * 0.5;
    float _1642 = _866 * 0.5;
    float _1643 = dot(vec4(_1640, _1641, _1642, 1.0), vec4(_1574, _1577, _1580, _1583));
    float _1646 = dot(vec4(_1640, _1641, _1642, 1.0), vec4(_1573, _1576, _1579, _1582));
    float _1649 = dot(vec4(_1640, _1641, _1642, 1.0), vec4(_1572, _1575, _1578, _1581));
    float _1683;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1656 = dot(vec4(_1640, _1641, _1642, 1.0), vec4(_1259, _1263, _1266, _1269));
        float _1660 = dot(vec4(_1640, _1641, _1642, 1.0), vec4(_1261, _1264, _1267, _1270));
        float _1664 = dot(vec4(_1640, _1641, _1642, 1.0), vec4(_1262, _1265, _1268, _1271));
        float _1671 = dot(vec4(cbModelParam._m0[39u]), vec4(_1640, _1641, _1642, 1.0));
        _1683 = dot(vec3(isnan(0.0) ? _1664 : (isnan(_1664) ? 0.0 : max(_1664, 0.0)), isnan(0.0) ? _1660 : (isnan(_1660) ? 0.0 : max(_1660, 0.0)), isnan(0.0) ? _1656 : (isnan(_1656) ? 0.0 : max(_1656, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1671) ? 0.0 : (isnan(0.0) ? _1671 : max(0.0, _1671))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1683 = 1.0;
    }
    float _1694;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1685 = dot(vec4(cbModelParam._m0[40u]), vec4(_1640, _1641, _1642, 1.0));
        _1694 = dot(vec3(isnan(0.0) ? _1643 : (isnan(_1643) ? 0.0 : max(_1643, 0.0)), isnan(0.0) ? _1646 : (isnan(_1646) ? 0.0 : max(_1646, 0.0)), isnan(0.0) ? _1649 : (isnan(_1649) ? 0.0 : max(_1649, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1685) ? 0.0 : (isnan(0.0) ? _1685 : max(0.0, _1685))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1694 = 1.0;
    }
    float _1698 = (_1694 * cbModelParam._m0[1u].x) + (_1683 * (1.0 - cbModelParam._m0[1u].x));
    float _1708 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _681);
    float _1709 = isnan(_1708) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1708 : min(cbModelParam._m0[25u].z, _1708));
    float _1789;
    float _1791;
    float _1793;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1756 = fma(_928, cbModelParam._m0[13u].z, fma(_924, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _920)) + cbModelParam._m0[13u].w;
        float _1760 = fma(_928, cbModelParam._m0[14u].z, fma(_924, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _920)) + cbModelParam._m0[14u].w;
        float _1764 = fma(_928, cbModelParam._m0[15u].z, fma(_924, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _920)) + cbModelParam._m0[15u].w;
        float _1767 = fma(_866, cbModelParam._m0[13u].z, fma(_865, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _864));
        float _1770 = fma(_866, cbModelParam._m0[14u].z, fma(_865, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _864));
        float _1773 = fma(_866, cbModelParam._m0[15u].z, fma(_865, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _864));
        float _1801;
        if (_1767 > 0.0)
        {
            _1801 = abs((1.0 - _1756) / _1767);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1767 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1756 + 1.0) / _1767);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1801 = frontier_phi_17_15_ladder;
        }
        float _2005;
        if (_1770 > 0.0)
        {
            _2005 = abs((1.0 - _1760) / _1770);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1770 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1760 + 1.0) / _1770);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2005 = frontier_phi_26_22_ladder;
        }
        float _2259;
        if (_1773 > 0.0)
        {
            _2259 = abs((1.0 - _1764) / _1773);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1773 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1764 + 1.0) / _1773);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2259 = frontier_phi_38_33_ladder;
        }
        float _2261 = isnan(_2005) ? _1801 : (isnan(_1801) ? _2005 : min(_1801, _2005));
        float _2262 = isnan(_2259) ? _2261 : (isnan(_2261) ? _2259 : min(_2261, _2259));
        float _2266 = (_2262 * _1767) + _1756;
        float _2267 = (_2262 * _1770) + _1760;
        float _2268 = (_2262 * _1773) + _1764;
        float _2269 = _2262 * 9.9999997473787516355514526367188e-05;
        float _2271 = (-1.0) - _2269;
        float _2273 = _2269 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2268 > _2273) || ((_2268 < _2271) || ((_2267 > _2273) || ((_2267 < _2271) || ((_2266 < _2271) || (_2266 > _2273))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2396 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2268, cbModelParam._m0[9u].z, fma(_2267, cbModelParam._m0[9u].y, _2266 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2268, cbModelParam._m0[10u].z, fma(_2267, cbModelParam._m0[10u].y, _2266 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2268, cbModelParam._m0[11u].z, fma(_2267, cbModelParam._m0[11u].y, _2266 * cbModelParam._m0[11u].x))), _1709);
            frontier_phi_16_38_ladder = _2396.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2396.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2396.x * cbModelParam._m0[1u].y;
        }
        _1789 = frontier_phi_16_38_ladder_2;
        _1791 = frontier_phi_16_38_ladder_1;
        _1793 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1777 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_864, _865, _866), _1709);
        _1789 = _1777.x * cbModelParam._m0[1u].y;
        _1791 = _1777.y * cbModelParam._m0[1u].y;
        _1793 = _1777.z * cbModelParam._m0[1u].y;
    }
    float _1797 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _681);
    float _1798 = isnan(_1797) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1797 : min(cbModelParam._m0[25u].w, _1797));
    float _1889;
    float _1891;
    float _1893;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1853 = fma(_928, cbModelParam._m0[21u].z, fma(_924, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _920)) + cbModelParam._m0[21u].w;
        float _1857 = fma(_928, cbModelParam._m0[22u].z, fma(_924, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _920)) + cbModelParam._m0[22u].w;
        float _1861 = fma(_928, cbModelParam._m0[23u].z, fma(_924, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _920)) + cbModelParam._m0[23u].w;
        float _1864 = fma(_866, cbModelParam._m0[21u].z, fma(_865, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _864));
        float _1867 = fma(_866, cbModelParam._m0[22u].z, fma(_865, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _864));
        float _1870 = fma(_866, cbModelParam._m0[23u].z, fma(_865, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _864));
        float _2010;
        if (_1864 > 0.0)
        {
            _2010 = abs((1.0 - _1853) / _1864);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1864 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1853 + 1.0) / _1864);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2010 = frontier_phi_28_24_ladder;
        }
        float _2286;
        if (_1867 > 0.0)
        {
            _2286 = abs((1.0 - _1857) / _1867);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1867 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1857 + 1.0) / _1867);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2286 = frontier_phi_40_35_ladder;
        }
        float _2499;
        if (_1870 > 0.0)
        {
            _2499 = abs((1.0 - _1861) / _1870);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1870 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1861 + 1.0) / _1870);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2499 = frontier_phi_49_46_ladder;
        }
        float _2501 = isnan(_2286) ? _2010 : (isnan(_2010) ? _2286 : min(_2010, _2286));
        float _2502 = isnan(_2499) ? _2501 : (isnan(_2501) ? _2499 : min(_2501, _2499));
        float _2506 = (_2502 * _1864) + _1853;
        float _2507 = (_2502 * _1867) + _1857;
        float _2508 = (_2502 * _1870) + _1861;
        float _2509 = _2502 * 9.9999997473787516355514526367188e-05;
        float _2510 = (-1.0) - _2509;
        float _2512 = _2509 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2508 > _2512) || ((_2508 < _2510) || ((_2507 > _2512) || ((_2507 < _2510) || ((_2506 < _2510) || (_2506 > _2512))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2707 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2508, cbModelParam._m0[17u].z, fma(_2507, cbModelParam._m0[17u].y, _2506 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2508, cbModelParam._m0[18u].z, fma(_2507, cbModelParam._m0[18u].y, _2506 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2508, cbModelParam._m0[19u].z, fma(_2507, cbModelParam._m0[19u].y, _2506 * cbModelParam._m0[19u].x))), _1798);
            frontier_phi_25_49_ladder = _2707.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2707.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2707.x * cbModelParam._m0[1u].z;
        }
        _1889 = frontier_phi_25_49_ladder_2;
        _1891 = frontier_phi_25_49_ladder_1;
        _1893 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1873 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_864, _865, _866), _1798);
        _1889 = _1873.x * cbModelParam._m0[1u].z;
        _1891 = _1873.y * cbModelParam._m0[1u].z;
        _1893 = _1873.z * cbModelParam._m0[1u].z;
    }
    float _1906 = (((_891 * _841) + _892) * _856) * ((cbModelParam._m0[1u].w * (_1889 - _1789)) + _1789);
    float _1908 = (((_891 * _843) + _892) * _856) * ((cbModelParam._m0[1u].w * (_1891 - _1791)) + _1791);
    float _1910 = (((_891 * _844) + _892) * _856) * ((cbModelParam._m0[1u].w * (_1893 - _1793)) + _1793);
    float _1913 = fma(_1910, cbSceneParam._m0[89u].z, fma(_1908, cbSceneParam._m0[89u].y, _1906 * cbSceneParam._m0[89u].x));
    float _1916 = fma(_1910, cbSceneParam._m0[90u].z, fma(_1908, cbSceneParam._m0[90u].y, _1906 * cbSceneParam._m0[90u].x));
    float _1919 = fma(_1910, cbSceneParam._m0[91u].z, fma(_1908, cbSceneParam._m0[91u].y, _1906 * cbSceneParam._m0[91u].x));
    uvec4 _1929 = floatBitsToUint(cbInstanceData._m0[_816 + 5u]);
    uint _1931 = _1929.x * 14u;
    uint _1932 = _1931 + 13u;
    float _1939 = _856 + (-1.0);
    float _1944 = (cbLight._m0[_1932].x * _1939) + 1.0;
    float _1945 = (cbLight._m0[_1932].y * _1939) + 1.0;
    float _1946 = (cbLight._m0[_1932].z * _1939) + 1.0;
    float _1947 = (cbLight._m0[_1932].w * _1939) + 1.0;
    uint _1948 = _1931 + 5u;
    float _1954 = isnan(1.0) ? _1945 : (isnan(_1945) ? 1.0 : min(_1945, 1.0));
    uint _1958 = _1931 + 4u;
    float _1964 = isnan(1.0) ? _1944 : (isnan(_1944) ? 1.0 : min(_1944, 1.0));
    uint _1968 = _1931 | 1u;
    float _1979 = dot(vec3(cbLight._m0[_1931].xyz), vec3(_678, _679, _680));
    float _1982 = dot(vec3(cbLight._m0[_1968].xyz), vec3(_678, _679, _680));
    float _4187 = isnan(0.0) ? _1979 : (isnan(_1979) ? 0.0 : max(_1979, 0.0));
    float _4198 = isnan(0.0) ? _1982 : (isnan(_1982) ? 0.0 : max(_1982, 0.0));
    float _1987 = (isnan(1.0) ? _4187 : (isnan(_4187) ? 1.0 : min(_4187, 1.0))) * 0.3183098733425140380859375;
    float _1989 = (isnan(1.0) ? _4198 : (isnan(_4198) ? 1.0 : min(_4198, 1.0))) * 0.3183098733425140380859375;
    float _1996 = ((cbLight._m0[_1948].x * _1954) * _1989) + ((cbLight._m0[_1958].x * _1964) * _1987);
    float _1997 = ((_1954 * cbLight._m0[_1948].y) * _1989) + ((_1964 * cbLight._m0[_1958].y) * _1987);
    float _1998 = ((_1954 * cbLight._m0[_1948].z) * _1989) + ((_1964 * cbLight._m0[_1958].z) * _1987);
    uvec4 _2002 = floatBitsToUint(cbLight._m0[_1931 + 12u]);
    bool _2004 = _2002.x == 0u;
    float _2015;
    float _2017;
    float _2019;
    if (_2004)
    {
        _2015 = _1996;
        _2017 = _1997;
        _2019 = _1998;
    }
    else
    {
        uint _2023 = _1931 + 6u;
        float _2039 = (dot(vec3(cbLight._m0[_1931 + 2u].xyz), vec3(_678, _679, _680)) * 0.5) + 0.5;
        float _2040 = _2039 * _2039;
        float _4209 = isnan(0.0) ? _2040 : (isnan(_2040) ? 0.0 : max(_2040, 0.0));
        float _2041 = isnan(1.0) ? _4209 : (isnan(_4209) ? 1.0 : min(_4209, 1.0));
        float _2042 = isnan(1.0) ? _1946 : (isnan(_1946) ? 1.0 : min(_1946, 1.0));
        _2015 = (((cbLight._m0[_2023].x * 0.3183098733425140380859375) * _2041) * _2042) + _1996;
        _2017 = (((cbLight._m0[_2023].y * 0.3183098733425140380859375) * _2041) * _2042) + _1997;
        _2019 = (((cbLight._m0[_2023].z * 0.3183098733425140380859375) * _2041) * _2042) + _1998;
    }
    bool _2022 = _2002.y == 0u;
    float _2060;
    float _2062;
    float _2064;
    if (_2022)
    {
        _2060 = _2015;
        _2062 = _2017;
        _2064 = _2019;
    }
    else
    {
        uint _2230 = _1931 + 7u;
        float _2246 = (dot(vec3(cbLight._m0[_1931 + 3u].xyz), vec3(_678, _679, _680)) * 0.5) + 0.5;
        float _2247 = _2246 * _2246;
        float _4225 = isnan(0.0) ? _2247 : (isnan(_2247) ? 0.0 : max(_2247, 0.0));
        float _2248 = isnan(1.0) ? _4225 : (isnan(_4225) ? 1.0 : min(_4225, 1.0));
        float _2249 = isnan(1.0) ? _1947 : (isnan(_1947) ? 1.0 : min(_1947, 1.0));
        _2060 = (((cbLight._m0[_2230].x * 0.3183098733425140380859375) * _2248) * _2249) + _2015;
        _2062 = (((cbLight._m0[_2230].y * 0.3183098733425140380859375) * _2248) * _2249) + _2017;
        _2064 = (((cbLight._m0[_2230].z * 0.3183098733425140380859375) * _2248) * _2249) + _2019;
    }
    uint _2067 = _1931 + 8u;
    float _2080 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1931].w)) * _681) * 0.949999988079071044921875);
    float _2081 = _2080 * _2080;
    float _2082 = cbLight._m0[_1931].x + _758;
    float _2083 = cbLight._m0[_1931].y + _759;
    float _2084 = cbLight._m0[_1931].z + _760;
    float _2088 = inversesqrt(dot(vec3(_2082, _2083, _2084), vec3(_2082, _2083, _2084)));
    float _2089 = _2088 * _2082;
    float _2090 = _2088 * _2083;
    float _2091 = _2088 * _2084;
    float _2092 = dot(vec3(_678, _679, _680), vec3(cbLight._m0[_1931].xyz));
    float _4241 = isnan(0.0) ? _2092 : (isnan(_2092) ? 0.0 : max(_2092, 0.0));
    float _2095 = isnan(1.0) ? _4241 : (isnan(_4241) ? 1.0 : min(_4241, 1.0));
    float _4252 = isnan(0.0) ? _857 : (isnan(_857) ? 0.0 : max(_857, 0.0));
    float _2096 = isnan(1.0) ? _4252 : (isnan(_4252) ? 1.0 : min(_4252, 1.0));
    float _2097 = dot(vec3(_678, _679, _680), vec3(_2089, _2090, _2091));
    float _4263 = isnan(0.0) ? _2097 : (isnan(_2097) ? 0.0 : max(_2097, 0.0));
    float _2100 = isnan(1.0) ? _4263 : (isnan(_4263) ? 1.0 : min(_4263, 1.0));
    float _2101 = dot(vec3(cbLight._m0[_1931].xyz), vec3(_2089, _2090, _2091));
    float _4274 = isnan(0.0) ? _2101 : (isnan(_2101) ? 0.0 : max(_2101, 0.0));
    float _2105 = _2081 * _2081;
    float _2109 = ((_2100 * _2100) * (_2105 + (-1.0))) + 1.0;
    float _2117 = exp2(log2(1.0 - (isnan(1.0) ? _4274 : (isnan(_4274) ? 1.0 : min(_4274, 1.0)))) * 5.0);
    float _2118 = 0.959999978542327880859375 - _838;
    float _2120 = 0.959999978542327880859375 - _839;
    float _2121 = 0.959999978542327880859375 - _840;
    float _2128 = 1.0 - _2081;
    float _2139 = (0.5 / (((_2096 * ((_2095 * _2128) + _2081)) + 9.9999999392252902907785028219223e-09) + (((_2096 * _2128) + _2081) * _2095))) * _2095;
    float _4285 = isnan(0.0) ? _2139 : (isnan(_2139) ? 0.0 : max(_2139, 0.0));
    float _2141 = (isnan(1.0) ? _4285 : (isnan(_4285) ? 1.0 : min(_4285, 1.0))) * (_2105 / ((_2109 * _2109) * 3.141590118408203125));
    uint _2152 = _1931 + 9u;
    float _2163 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1968].w)) * _681) * 0.949999988079071044921875);
    float _2164 = _2163 * _2163;
    float _2165 = cbLight._m0[_1968].x + _758;
    float _2166 = cbLight._m0[_1968].y + _759;
    float _2167 = cbLight._m0[_1968].z + _760;
    float _2171 = inversesqrt(dot(vec3(_2165, _2166, _2167), vec3(_2165, _2166, _2167)));
    float _2172 = _2171 * _2165;
    float _2173 = _2171 * _2166;
    float _2174 = _2171 * _2167;
    float _2175 = dot(vec3(_678, _679, _680), vec3(cbLight._m0[_1968].xyz));
    float _4296 = isnan(0.0) ? _2175 : (isnan(_2175) ? 0.0 : max(_2175, 0.0));
    float _2178 = isnan(1.0) ? _4296 : (isnan(_4296) ? 1.0 : min(_4296, 1.0));
    float _2179 = dot(vec3(_678, _679, _680), vec3(_2172, _2173, _2174));
    float _4307 = isnan(0.0) ? _2179 : (isnan(_2179) ? 0.0 : max(_2179, 0.0));
    float _2182 = isnan(1.0) ? _4307 : (isnan(_4307) ? 1.0 : min(_4307, 1.0));
    float _2183 = dot(vec3(cbLight._m0[_1968].xyz), vec3(_2172, _2173, _2174));
    float _4318 = isnan(0.0) ? _2183 : (isnan(_2183) ? 0.0 : max(_2183, 0.0));
    float _2187 = _2164 * _2164;
    float _2191 = ((_2182 * _2182) * (_2187 + (-1.0))) + 1.0;
    float _2198 = exp2(log2(1.0 - (isnan(1.0) ? _4318 : (isnan(_4318) ? 1.0 : min(_4318, 1.0)))) * 5.0);
    float _2205 = 1.0 - _2164;
    float _2215 = (0.5 / (((_2096 * ((_2178 * _2205) + _2164)) + 9.9999999392252902907785028219223e-09) + (((_2096 * _2205) + _2164) * _2178))) * _2178;
    float _4329 = isnan(0.0) ? _2215 : (isnan(_2215) ? 0.0 : max(_2215, 0.0));
    float _2217 = (isnan(1.0) ? _4329 : (isnan(_4329) ? 1.0 : min(_4329, 1.0))) * (_2187 / ((_2191 * _2191) * 3.141590118408203125));
    float _2227 = (((((_2198 * _2118) + _841) * cbLight._m0[_2152].x) * _2217) * _1954) + (((((_2117 * _2118) + _841) * cbLight._m0[_2067].x) * _2141) * _1964);
    float _2228 = (((((_2198 * _2120) + _843) * cbLight._m0[_2152].y) * _2217) * _1954) + (((((_2117 * _2120) + _843) * cbLight._m0[_2067].y) * _2141) * _1964);
    float _2229 = (((((_2198 * _2121) + _844) * cbLight._m0[_2152].z) * _2217) * _1954) + (((((_2117 * _2121) + _844) * cbLight._m0[_2067].z) * _2141) * _1964);
    float _2291;
    float _2293;
    float _2295;
    if (_2004)
    {
        _2291 = _2227;
        _2293 = _2228;
        _2295 = _2229;
    }
    else
    {
        uint _2297 = _1931 + 2u;
        uint _2301 = _1931 + 10u;
        float _2315 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2297].w)) * _681) * 0.949999988079071044921875);
        float _2316 = _2315 * _2315;
        float _2317 = cbLight._m0[_2297].x + _758;
        float _2318 = cbLight._m0[_2297].y + _759;
        float _2319 = cbLight._m0[_2297].z + _760;
        float _2323 = inversesqrt(dot(vec3(_2317, _2318, _2319), vec3(_2317, _2318, _2319)));
        float _2324 = _2323 * _2317;
        float _2325 = _2323 * _2318;
        float _2326 = _2323 * _2319;
        float _2327 = dot(vec3(_678, _679, _680), vec3(cbLight._m0[_2297].xyz));
        float _4340 = isnan(0.0) ? _2327 : (isnan(_2327) ? 0.0 : max(_2327, 0.0));
        float _2330 = isnan(1.0) ? _4340 : (isnan(_4340) ? 1.0 : min(_4340, 1.0));
        float _2331 = dot(vec3(_678, _679, _680), vec3(_2324, _2325, _2326));
        float _4351 = isnan(0.0) ? _2331 : (isnan(_2331) ? 0.0 : max(_2331, 0.0));
        float _2334 = isnan(1.0) ? _4351 : (isnan(_4351) ? 1.0 : min(_4351, 1.0));
        float _2335 = dot(vec3(cbLight._m0[_2297].xyz), vec3(_2324, _2325, _2326));
        float _4362 = isnan(0.0) ? _2335 : (isnan(_2335) ? 0.0 : max(_2335, 0.0));
        float _2339 = _2316 * _2316;
        float _2343 = ((_2334 * _2334) * (_2339 + (-1.0))) + 1.0;
        float _2350 = exp2(log2(1.0 - (isnan(1.0) ? _4362 : (isnan(_4362) ? 1.0 : min(_4362, 1.0)))) * 5.0);
        float _2357 = 1.0 - _2316;
        float _2367 = (0.5 / (((_2096 * ((_2330 * _2357) + _2316)) + 9.9999999392252902907785028219223e-09) + (((_2096 * _2357) + _2316) * _2330))) * _2330;
        float _4373 = isnan(0.0) ? _2367 : (isnan(_2367) ? 0.0 : max(_2367, 0.0));
        float _2369 = (isnan(1.0) ? _4373 : (isnan(_4373) ? 1.0 : min(_4373, 1.0))) * (_2339 / ((_2343 * _2343) * 3.141590118408203125));
        float _2370 = isnan(1.0) ? _1946 : (isnan(_1946) ? 1.0 : min(_1946, 1.0));
        _2291 = (((((_2350 * _2118) + _841) * cbLight._m0[_2301].x) * _2369) * _2370) + _2227;
        _2293 = (((((_2350 * _2120) + _843) * cbLight._m0[_2301].y) * _2369) * _2370) + _2228;
        _2295 = (((((_2350 * _2121) + _844) * cbLight._m0[_2301].z) * _2369) * _2370) + _2229;
    }
    float _2405;
    float _2407;
    float _2409;
    if (_2022)
    {
        _2405 = _2291;
        _2407 = _2293;
        _2409 = _2295;
    }
    else
    {
        uint _2416 = _1931 + 3u;
        uint _2420 = _1931 + 11u;
        float _2434 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2416].w)) * _681) * 0.949999988079071044921875);
        float _2435 = _2434 * _2434;
        float _2436 = cbLight._m0[_2416].x + _758;
        float _2437 = cbLight._m0[_2416].y + _759;
        float _2438 = cbLight._m0[_2416].z + _760;
        float _2442 = inversesqrt(dot(vec3(_2436, _2437, _2438), vec3(_2436, _2437, _2438)));
        float _2443 = _2442 * _2436;
        float _2444 = _2442 * _2437;
        float _2445 = _2442 * _2438;
        float _2446 = dot(vec3(_678, _679, _680), vec3(cbLight._m0[_2416].xyz));
        float _4389 = isnan(0.0) ? _2446 : (isnan(_2446) ? 0.0 : max(_2446, 0.0));
        float _2449 = isnan(1.0) ? _4389 : (isnan(_4389) ? 1.0 : min(_4389, 1.0));
        float _2450 = dot(vec3(_678, _679, _680), vec3(_2443, _2444, _2445));
        float _4400 = isnan(0.0) ? _2450 : (isnan(_2450) ? 0.0 : max(_2450, 0.0));
        float _2453 = isnan(1.0) ? _4400 : (isnan(_4400) ? 1.0 : min(_4400, 1.0));
        float _2454 = dot(vec3(cbLight._m0[_2416].xyz), vec3(_2443, _2444, _2445));
        float _4411 = isnan(0.0) ? _2454 : (isnan(_2454) ? 0.0 : max(_2454, 0.0));
        float _2458 = _2435 * _2435;
        float _2462 = ((_2453 * _2453) * (_2458 + (-1.0))) + 1.0;
        float _2469 = exp2(log2(1.0 - (isnan(1.0) ? _4411 : (isnan(_4411) ? 1.0 : min(_4411, 1.0)))) * 5.0);
        float _2476 = 1.0 - _2435;
        float _2486 = (0.5 / (((_2096 * ((_2449 * _2476) + _2435)) + 9.9999999392252902907785028219223e-09) + (((_2096 * _2476) + _2435) * _2449))) * _2449;
        float _4422 = isnan(0.0) ? _2486 : (isnan(_2486) ? 0.0 : max(_2486, 0.0));
        float _2488 = (isnan(1.0) ? _4422 : (isnan(_4422) ? 1.0 : min(_4422, 1.0))) * (_2458 / ((_2462 * _2462) * 3.141590118408203125));
        float _2489 = isnan(1.0) ? _1947 : (isnan(_1947) ? 1.0 : min(_1947, 1.0));
        _2405 = (((((_2469 * _2118) + _841) * cbLight._m0[_2420].x) * _2488) * _2489) + _2291;
        _2407 = (((((_2469 * _2120) + _843) * cbLight._m0[_2420].y) * _2488) * _2489) + _2293;
        _2409 = (((((_2469 * _2121) + _844) * cbLight._m0[_2420].z) * _2488) * _2489) + _2295;
    }
    float _2624;
    float _2626;
    float _2628;
    float _2630;
    float _2632;
    float _2634;
    if (_1929.y == 0u)
    {
        float _2564 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2565 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2564;
        float _2566 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2564;
        float _2567 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2564;
        uvec4 _2579 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2580 = _2579.x;
        uint _2591 = uint((float(_2579.y) * floor(float(uint(cbSceneParam._m0[85u].y * _779) / _2580))) + floor(float(uint(cbSceneParam._m0[85u].x * _778) / _2580)));
        float _2601 = (log2(_2567 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2602 = isnan(0.0) ? _2601 : (isnan(_2601) ? 0.0 : max(_2601, 0.0));
        uint _2605 = uint(isnan(14.0) ? _2602 : (isnan(_2602) ? 14.0 : min(_2602, 14.0)));
        uvec4 _2610 = texelFetch(g_lightClusterGridBuffer, int(((_2605 << 2u) + (_2591 << 6u)) >> 2u));
        uint _2611 = _2610.x;
        uint _2612 = _2579.z;
        float _2712;
        float _2714;
        float _2716;
        float _2718;
        float _2720;
        float _2722;
        if (((((1u << ((_2612 >> 4u) & 15u)) + 4294967295u) & _2611) == 0u) || ((_2612 & 240u) == 0u))
        {
            _2712 = 0.0;
            _2714 = 0.0;
            _2716 = 0.0;
            _2718 = 0.0;
            _2720 = 0.0;
            _2722 = 0.0;
        }
        else
        {
            float _2713;
            float _2715;
            float _2717;
            float _2719;
            float _2721;
            float _2723;
            float _2864 = 0.0;
            float _2865 = 0.0;
            float _2866 = 0.0;
            float _2867 = 0.0;
            float _2868 = 0.0;
            float _2869 = 0.0;
            uint _2870 = 0u;
            uint _2879;
            bool _2880;
            for (;;)
            {
                _2879 = texelFetch(g_lightClassification, int((((_2605 << 5u) + (_2591 << 9u)) + (_2870 << 2u)) >> 2u)).x;
                _2880 = _2879 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2880)
                {
                    frontier_phi_66_pred = _2864;
                    frontier_phi_66_pred_1 = _2869;
                    frontier_phi_66_pred_2 = _2868;
                    frontier_phi_66_pred_3 = _2867;
                    frontier_phi_66_pred_4 = _2866;
                    frontier_phi_66_pred_5 = _2865;
                }
                else
                {
                    float _3009;
                    float _3010;
                    float _3011;
                    float _3012;
                    float _3013;
                    float _3014;
                    uint _3015;
                    _3009 = _2864;
                    _3010 = _2865;
                    _3011 = _2866;
                    _3012 = _2867;
                    _3013 = _2868;
                    _3014 = _2869;
                    _3015 = _2879;
                    float _2936;
                    float _2937;
                    float _2938;
                    float _2939;
                    float _2940;
                    float _2941;
                    for (;;)
                    {
                        uint _3019 = uint(findLSB(_3015)) + (_2870 << 5u);
                        uint _3016 = (_3015 + 4294967295u) & _3015;
                        uint _3021 = _3019 * 48u;
                        vec4 _3035 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3021)).x, texelFetch(g_PointLightRenderingBuffer, int(_3021 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3021 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3021 + 3u)).x));
                        uint _3041 = (_3019 * 48u) + 4u;
                        vec4 _3054 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3041)).x, texelFetch(g_PointLightRenderingBuffer, int(_3041 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3041 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3041 + 3u)).x));
                        uint _3060 = (_3019 * 48u) + 8u;
                        vec3 _3071 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3060)).x, texelFetch(g_PointLightRenderingBuffer, int(_3060 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3060 + 2u)).x));
                        float _3075 = _3035.x - _2565;
                        float _3076 = _3035.y - _2566;
                        float _3077 = _3035.z - _2567;
                        float _3078 = dot(vec3(_3075, _3076, _3077), vec3(_3075, _3076, _3077));
                        float _3081 = inversesqrt(_3078);
                        float _3082 = _3081 * _3075;
                        float _3083 = _3081 * _3076;
                        float _3084 = _3081 * _3077;
                        float _3085 = dot(vec3(_797, _800, _803), vec3(_3082, _3083, _3084));
                        float _3090 = 1.0 - (_3078 * _3035.w);
                        float _4448 = isnan(0.0) ? _3090 : (isnan(_3090) ? 0.0 : max(_3090, 0.0));
                        float _3091 = isnan(1.0) ? _4448 : (isnan(_4448) ? 1.0 : min(_4448, 1.0));
                        float _3092 = sqrt(_3078) * _3054.w;
                        float _3095 = 1.39999997615814208984375 / (_3092 + 1.39999997615814208984375);
                        float _3096 = _3095 * _3095;
                        float _3099 = ((1.0 - _3096) * _3085) + _3096;
                        float _3102 = _3092 * _3092;
                        float _3106 = ((isnan(0.0) ? _3099 : (isnan(_3099) ? 0.0 : max(_3099, 0.0))) * _3091) / ((_3102 * 0.699999988079071044921875) + 1.0);
                        float _3110 = (-0.0) - _2565;
                        float _3111 = (-0.0) - _2566;
                        float _3112 = (-0.0) - _2567;
                        float _3116 = inversesqrt(dot(vec3(_3110, _3111, _3112), vec3(_3110, _3111, _3112)));
                        float _3117 = _3116 * _3110;
                        float _3118 = _3116 * _3111;
                        float _3119 = _3116 * _3112;
                        float _3127 = exp2(log2(1.0 / ((_3102 * 3.5) + 5.0)) * 0.25);
                        float _3128 = 1.0 - _872;
                        float _3135 = sqrt(1.0 - ((1.0 - (_3128 * _3128)) * (1.0 - (_3127 * _3127))));
                        float _3136 = _3135 * _3135;
                        float _3137 = _3136 * _3136;
                        float _3138 = _3117 + _3082;
                        float _3139 = _3118 + _3083;
                        float _3140 = _3119 + _3084;
                        float _3144 = inversesqrt(dot(vec3(_3138, _3139, _3140), vec3(_3138, _3139, _3140)));
                        float _3148 = dot(vec3(_797, _800, _803), vec3(_3117, _3118, _3119));
                        float _4464 = isnan(0.0) ? _3148 : (isnan(_3148) ? 0.0 : max(_3148, 0.0));
                        float _3151 = isnan(1.0) ? _4464 : (isnan(_4464) ? 1.0 : min(_4464, 1.0));
                        float _3152 = dot(vec3(_797, _800, _803), vec3(_3144 * _3138, _3144 * _3139, _3144 * _3140));
                        float _4475 = isnan(0.0) ? _3152 : (isnan(_3152) ? 0.0 : max(_3152, 0.0));
                        float _3155 = isnan(1.0) ? _4475 : (isnan(_4475) ? 1.0 : min(_4475, 1.0));
                        float _3159 = ((_3155 * _3155) * (_3137 + (-1.0))) + 1.0;
                        float _3160 = _3095 * _3136;
                        float _3161 = _3160 * _3160;
                        float _3164 = ((1.0 - _3161) * _3085) + _3161;
                        float _4486 = isnan(0.0) ? _3164 : (isnan(_3164) ? 0.0 : max(_3164, 0.0));
                        float _3165 = isnan(1.0) ? _4486 : (isnan(_4486) ? 1.0 : min(_4486, 1.0));
                        float _3166 = 1.0 - _3136;
                        float _3176 = (0.5 / (((_3165 * ((_3151 * _3166) + _3136)) + 9.9999999392252902907785028219223e-09) + (((_3165 * _3166) + _3136) * _3151))) * _3165;
                        float _4497 = isnan(0.0) ? _3176 : (isnan(_3176) ? 0.0 : max(_3176, 0.0));
                        float _3187 = (((_3137 * 3.1415927410125732421875) * (isnan(1.0) ? _4497 : (isnan(_4497) ? 1.0 : min(_4497, 1.0)))) / ((_3159 * _3159) * ((_3102 * 2.1991131305694580078125) + 3.141590118408203125))) * _3091;
                        _2939 = (_3106 * _3054.x) + _3012;
                        _2940 = (_3106 * _3054.y) + _3013;
                        _2941 = (_3106 * _3054.z) + _3014;
                        _2936 = (_3187 * _3071.x) + _3009;
                        _2937 = (_3187 * _3071.y) + _3010;
                        _2938 = (_3187 * _3071.z) + _3011;
                        if (_3016 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3009 = _2936;
                            _3010 = _2937;
                            _3011 = _2938;
                            _3012 = _2939;
                            _3013 = _2940;
                            _3014 = _2941;
                            _3015 = _3016;
                        }
                    }
                    frontier_phi_66_pred = _2936;
                    frontier_phi_66_pred_1 = _2941;
                    frontier_phi_66_pred_2 = _2940;
                    frontier_phi_66_pred_3 = _2939;
                    frontier_phi_66_pred_4 = _2938;
                    frontier_phi_66_pred_5 = _2937;
                }
                _2713 = frontier_phi_66_pred;
                _2723 = frontier_phi_66_pred_1;
                _2721 = frontier_phi_66_pred_2;
                _2719 = frontier_phi_66_pred_3;
                _2717 = frontier_phi_66_pred_4;
                _2715 = frontier_phi_66_pred_5;
                uint _2871 = _2870 + 1u;
                if (_2871 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2864 = _2713;
                    _2865 = _2715;
                    _2866 = _2717;
                    _2867 = _2719;
                    _2868 = _2721;
                    _2869 = _2723;
                    _2870 = _2871;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2712 = _2713;
            _2714 = _2715;
            _2716 = _2717;
            _2718 = _2719;
            _2720 = _2721;
            _2722 = _2723;
        }
        uvec4 _2726 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2727 = _2726.z;
        uint _2729 = (_2727 >> 8u) & 15u;
        float _2832;
        float _2834;
        float _2836;
        float _2838;
        float _2840;
        float _2842;
        if (((4294967295u << _2729) & _2611) == 0u)
        {
            _2832 = _2712;
            _2834 = _2714;
            _2836 = _2716;
            _2838 = _2718;
            _2840 = _2720;
            _2842 = _2722;
        }
        else
        {
            float _2857 = inversesqrt(dot(vec3(_2565, _2566, _2567), vec3(_2565, _2566, _2567)));
            float _2858 = _2857 * _2565;
            float _2859 = _2857 * _2566;
            float _2860 = _2857 * _2567;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2729 < ((_2727 >> 12u) & 15u))
            {
                float _2833;
                float _2835;
                float _2837;
                float _2839;
                float _2841;
                float _2843;
                float _2992 = _2712;
                float _2993 = _2714;
                float _2994 = _2716;
                float _2995 = _2718;
                float _2996 = _2720;
                float _2997 = _2722;
                uint _2998 = _2729;
                uint _3007;
                bool _3008;
                for (;;)
                {
                    _3007 = texelFetch(g_lightClassification, int((((_2605 << 5u) + (_2591 << 9u)) + (_2998 << 2u)) >> 2u)).x;
                    _3008 = _3007 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3008)
                    {
                        frontier_phi_77_pred = _2997;
                        frontier_phi_77_pred_1 = _2996;
                        frontier_phi_77_pred_2 = _2995;
                        frontier_phi_77_pred_3 = _2994;
                        frontier_phi_77_pred_4 = _2993;
                        frontier_phi_77_pred_5 = _2992;
                    }
                    else
                    {
                        float _3201;
                        float _3202;
                        float _3203;
                        float _3204;
                        float _3205;
                        float _3206;
                        float _3495;
                        float _3496;
                        float _3497;
                        float _3498;
                        float _3499;
                        float _3500;
                        float _3214 = _2992;
                        float _3215 = _2993;
                        float _3216 = _2994;
                        float _3217 = _2995;
                        float _3218 = _2996;
                        float _3219 = _2997;
                        uint _3220 = _3007;
                        uint _3221;
                        vec4 _3246;
                        float _3247;
                        vec4 _3262;
                        vec3 _3274;
                        vec4 _3289;
                        vec4 _3304;
                        float _3351;
                        bool _3352;
                        for (;;)
                        {
                            uint _3231 = ((_2998 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3220));
                            _3221 = (_3220 + 4294967295u) & _3220;
                            uint _3233 = _3231 * 40u;
                            _3246 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3233)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3233 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3233 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3233 + 3u)).x));
                            _3247 = _3246.w;
                            uint _3249 = (_3231 * 40u) + 4u;
                            _3262 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3249)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3249 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3249 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3249 + 3u)).x));
                            uint _3264 = (_3231 * 40u) + 8u;
                            _3274 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3264)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3264 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3264 + 2u)).x));
                            uint _3276 = (_3231 * 40u) + 16u;
                            _3289 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3276)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3276 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3276 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3276 + 3u)).x));
                            uint _3291 = (_3231 * 40u) + 20u;
                            _3304 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3291)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3291 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3291 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3291 + 3u)).x));
                            uint _3307 = (_3231 * 40u) + 24u;
                            vec4 _3320 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3307)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3307 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3307 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3307 + 3u)).x));
                            uint _3326 = (_3231 * 40u) + 28u;
                            vec4 _3339 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3326)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3326 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3326 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3326 + 3u)).x));
                            _3351 = fma(_2567, _3339.z, fma(_2566, _3339.y, _3339.x * _2565)) + _3339.w;
                            _3352 = !((fma(_2567, _3320.z, fma(_2566, _3320.y, _3320.x * _2565)) + _3320.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3352)
                            {
                                float _3379 = _3246.x - _2565;
                                float _3380 = _3246.y - _2566;
                                float _3381 = _3246.z - _2567;
                                float _3382 = dot(vec3(_3379, _3380, _3381), vec3(_3379, _3380, _3381));
                                float _3385 = inversesqrt(_3382);
                                float _3386 = _3385 * _3379;
                                float _3387 = _3385 * _3380;
                                float _3388 = _3385 * _3381;
                                float _3392 = 1.0 - (_3382 / (_3247 * _3247));
                                float _4508 = isnan(0.0) ? _3392 : (isnan(_3392) ? 0.0 : max(_3392, 0.0));
                                float _3393 = isnan(1.0) ? _4508 : (isnan(_4508) ? 1.0 : min(_4508, 1.0));
                                float _3397 = sqrt(_3382) * _3262.w;
                                float _3399 = 1.39999997615814208984375 / (_3397 + 1.39999997615814208984375);
                                float _3400 = _3399 * _3399;
                                float _3403 = ((1.0 - _3400) * dot(vec3(_3386, _3387, _3388), vec3(_797, _800, _803))) + _3400;
                                float _3406 = _3397 * _3397;
                                float _3410 = (fma(_2567, _3289.z, fma(_2566, _3289.y, _3289.x * _2565)) + _3289.w) / _3351;
                                float _3411 = (fma(_2567, _3304.z, fma(_2566, _3304.y, _3304.x * _2565)) + _3304.w) / _3351;
                                float _3415 = 1.0 - dot(vec2(_3410, _3411), vec2(_3410, _3411));
                                float _4524 = isnan(0.0) ? _3415 : (isnan(_3415) ? 0.0 : max(_3415, 0.0));
                                float _3416 = isnan(1.0) ? _4524 : (isnan(_4524) ? 1.0 : min(_4524, 1.0));
                                float _3417 = _3416 * (((isnan(0.0) ? _3403 : (isnan(_3403) ? 0.0 : max(_3403, 0.0))) * _3393) / ((_3406 * 0.699999988079071044921875) + 1.0));
                                float _3429 = exp2(log2(1.0 / ((_3406 * 3.5) + 5.0)) * 0.25);
                                float _3430 = 1.0 - _872;
                                float _3437 = sqrt(1.0 - ((1.0 - (_3430 * _3430)) * (1.0 - (_3429 * _3429))));
                                float _3438 = _3437 * _3437;
                                float _3439 = _3438 * _3438;
                                float _3440 = _3386 - _2858;
                                float _3441 = _3387 - _2859;
                                float _3442 = _3388 - _2860;
                                float _3446 = inversesqrt(dot(vec3(_3440, _3441, _3442), vec3(_3440, _3441, _3442)));
                                float _3450 = dot(vec3(_797, _800, _803), vec3((-0.0) - _2858, (-0.0) - _2859, (-0.0) - _2860));
                                float _4535 = isnan(0.0) ? _3450 : (isnan(_3450) ? 0.0 : max(_3450, 0.0));
                                float _3453 = isnan(1.0) ? _4535 : (isnan(_4535) ? 1.0 : min(_4535, 1.0));
                                float _3454 = dot(vec3(_797, _800, _803), vec3(_3446 * _3440, _3446 * _3441, _3446 * _3442));
                                float _4546 = isnan(0.0) ? _3454 : (isnan(_3454) ? 0.0 : max(_3454, 0.0));
                                float _3457 = isnan(1.0) ? _4546 : (isnan(_4546) ? 1.0 : min(_4546, 1.0));
                                float _3461 = ((_3457 * _3457) * (_3439 + (-1.0))) + 1.0;
                                float _3462 = _3399 * _3438;
                                float _3463 = _3462 * _3462;
                                float _3469 = ((1.0 - _3463) * dot(vec3(_797, _800, _803), vec3(_3386, _3387, _3388))) + _3463;
                                float _4557 = isnan(0.0) ? _3469 : (isnan(_3469) ? 0.0 : max(_3469, 0.0));
                                float _3470 = isnan(1.0) ? _4557 : (isnan(_4557) ? 1.0 : min(_4557, 1.0));
                                float _3471 = 1.0 - _3438;
                                float _3481 = (0.5 / (((_3470 * ((_3453 * _3471) + _3438)) + 9.9999999392252902907785028219223e-09) + (((_3470 * _3471) + _3438) * _3453))) * _3470;
                                float _4568 = isnan(0.0) ? _3481 : (isnan(_3481) ? 0.0 : max(_3481, 0.0));
                                float _3491 = (_3416 * _3393) * (((_3439 * 3.1415927410125732421875) * (isnan(1.0) ? _4568 : (isnan(_4568) ? 1.0 : min(_4568, 1.0)))) / ((_3461 * _3461) * ((_3406 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3417 * _3262.y;
                                frontier_phi_83_pred_1 = _3417 * _3262.x;
                                frontier_phi_83_pred_2 = _3491 * _3274.z;
                                frontier_phi_83_pred_3 = _3491 * _3274.y;
                                frontier_phi_83_pred_4 = _3491 * _3274.x;
                                frontier_phi_83_pred_5 = _3417 * _3262.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3499 = frontier_phi_83_pred;
                            _3498 = frontier_phi_83_pred_1;
                            _3497 = frontier_phi_83_pred_2;
                            _3496 = frontier_phi_83_pred_3;
                            _3495 = frontier_phi_83_pred_4;
                            _3500 = frontier_phi_83_pred_5;
                            _3204 = _3498 + _3217;
                            _3205 = _3499 + _3218;
                            _3206 = _3500 + _3219;
                            _3201 = _3495 + _3214;
                            _3202 = _3496 + _3215;
                            _3203 = _3497 + _3216;
                            if (_3221 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3214 = _3201;
                                _3215 = _3202;
                                _3216 = _3203;
                                _3217 = _3204;
                                _3218 = _3205;
                                _3219 = _3206;
                                _3220 = _3221;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3206;
                        frontier_phi_77_pred_1 = _3205;
                        frontier_phi_77_pred_2 = _3204;
                        frontier_phi_77_pred_3 = _3203;
                        frontier_phi_77_pred_4 = _3202;
                        frontier_phi_77_pred_5 = _3201;
                    }
                    _2843 = frontier_phi_77_pred;
                    _2841 = frontier_phi_77_pred_1;
                    _2839 = frontier_phi_77_pred_2;
                    _2837 = frontier_phi_77_pred_3;
                    _2835 = frontier_phi_77_pred_4;
                    _2833 = frontier_phi_77_pred_5;
                    uint _2999 = _2998 + 1u;
                    if (_2999 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2992 = _2833;
                        _2993 = _2835;
                        _2994 = _2837;
                        _2995 = _2839;
                        _2996 = _2841;
                        _2997 = _2843;
                        _2998 = _2999;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2837;
                frontier_phi_58_59_ladder_1 = _2843;
                frontier_phi_58_59_ladder_2 = _2841;
                frontier_phi_58_59_ladder_3 = _2839;
                frontier_phi_58_59_ladder_4 = _2835;
                frontier_phi_58_59_ladder_5 = _2833;
            }
            else
            {
                frontier_phi_58_59_ladder = _2716;
                frontier_phi_58_59_ladder_1 = _2722;
                frontier_phi_58_59_ladder_2 = _2720;
                frontier_phi_58_59_ladder_3 = _2718;
                frontier_phi_58_59_ladder_4 = _2714;
                frontier_phi_58_59_ladder_5 = _2712;
            }
            _2832 = frontier_phi_58_59_ladder_5;
            _2834 = frontier_phi_58_59_ladder_4;
            _2836 = frontier_phi_58_59_ladder;
            _2838 = frontier_phi_58_59_ladder_3;
            _2840 = frontier_phi_58_59_ladder_2;
            _2842 = frontier_phi_58_59_ladder_1;
        }
        float _2847 = isnan(1.0) ? _856 : (isnan(_856) ? 1.0 : min(_856, 1.0));
        _2624 = (_2847 * _2838) + _2060;
        _2626 = (_2847 * _2840) + _2062;
        _2628 = (_2847 * _2842) + _2064;
        _2630 = ((_2832 * _841) * _2847) + _2405;
        _2632 = ((_2834 * _843) * _2847) + _2407;
        _2634 = ((_2836 * _844) * _2847) + _2409;
    }
    else
    {
        _2624 = _2060;
        _2626 = _2062;
        _2628 = _2064;
        _2630 = _2405;
        _2632 = _2407;
        _2634 = _2409;
    }
    float _4584 = isnan(0.0) ? _831 : (isnan(_831) ? 0.0 : max(_831, 0.0));
    float _4595 = isnan(0.0) ? _832 : (isnan(_832) ? 0.0 : max(_832, 0.0));
    float _4606 = isnan(0.0) ? _833 : (isnan(_833) ? 0.0 : max(_833, 0.0));
    float _2651 = ((isnan(1.0) ? _4584 : (isnan(_4584) ? 1.0 : min(_4584, 1.0))) * (_2624 + ((isnan(0.0) ? _1619 : (isnan(_1619) ? 0.0 : max(_1619, 0.0))) * _856))) + ((_2630 + ((isnan(0.0) ? _1913 : (isnan(_1913) ? 0.0 : max(_1913, 0.0))) * _1698)) * cbPerFrame._m0[3u].x);
    float _2652 = ((isnan(1.0) ? _4595 : (isnan(_4595) ? 1.0 : min(_4595, 1.0))) * (_2626 + ((isnan(0.0) ? _1622 : (isnan(_1622) ? 0.0 : max(_1622, 0.0))) * _856))) + ((_2632 + ((isnan(0.0) ? _1916 : (isnan(_1916) ? 0.0 : max(_1916, 0.0))) * _1698)) * cbPerFrame._m0[3u].x);
    float _2653 = ((isnan(1.0) ? _4606 : (isnan(_4606) ? 1.0 : min(_4606, 1.0))) * (_2628 + ((isnan(0.0) ? _1625 : (isnan(_1625) ? 0.0 : max(_1625, 0.0))) * _856))) + ((_2634 + ((isnan(0.0) ? _1919 : (isnan(_1919) ? 0.0 : max(_1919, 0.0))) * _1698)) * cbPerFrame._m0[3u].x);
    uint _2654 = _816 + 6u;
    float _2662 = _778 / cbSceneParam._m0[86u].x;
    float _2663 = _779 / cbSceneParam._m0[86u].y;
    vec4 _2677 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2662, _2663, (log2((isnan(cbSceneParam._m0[77u].w) ? _701 : (isnan(_701) ? cbSceneParam._m0[77u].w : min(_701, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2679 = _2677.x;
    float _2680 = _2677.y;
    float _2681 = _2677.z;
    float _2682 = _2677.w;
    float _2774;
    float _2776;
    float _2778;
    float _2780;
    if (_701 > cbSceneParam._m0[78u].w)
    {
        float _2737 = isnan(_701) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _701 : min(cbSceneParam._m0[80u].w, _701));
        float _2738 = _2737 / _701;
        float _2749 = _2738 * _751;
        float _2750 = _752 * _2738;
        float _2751 = (-0.0) - _2750;
        float _2752 = _2738 * _753;
        float _2754 = (cbSceneParam._m0[77u].w * _2751) / _2737;
        float _2755 = _2754 + cbSceneParam._m0[79u].w;
        float _2756 = cbSceneParam._m0[79u].w - _2750;
        float _2762 = sqrt(((_2749 * _2749) + (_2750 * _2750)) + (_2752 * _2752));
        float _2765 = (1.0 - (cbSceneParam._m0[77u].w / _2737)) * _2762;
        float _2770 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2772 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2949;
        if (abs((_2751 - _2754) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2949 = ((((_2755 > 0.0) ? exp2(_2770 * _2755) : (2.0 - exp2(_2772 * _2755))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2765;
        }
        else
        {
            float _2893 = 1.0 / cbSceneParam._m0[80u].x;
            float _2894 = isnan(_2756) ? _2755 : (isnan(_2755) ? _2756 : max(_2755, _2756));
            float _2895 = isnan(_2756) ? _2755 : (isnan(_2755) ? _2756 : min(_2755, _2756));
            float _2904 = isnan(0.0) ? _2894 : (isnan(_2894) ? 0.0 : min(_2894, 0.0));
            float _2905 = isnan(0.0) ? _2895 : (isnan(_2895) ? 0.0 : min(_2895, 0.0));
            _2949 = ((abs(_2762 / _2751) * cbSceneParam._m0[80u].y) * ((((_2904 - _2905) * 2.0) - ((exp2(_2770 * (isnan(0.0) ? _2894 : (isnan(_2894) ? 0.0 : max(_2894, 0.0)))) - exp2(_2770 * (isnan(0.0) ? _2895 : (isnan(_2895) ? 0.0 : max(_2895, 0.0))))) * _2893)) - ((exp2(_2772 * _2904) - exp2(_2772 * _2905)) * _2893))) + (_2765 * cbSceneParam._m0[80u].z);
        }
        vec4 _2951 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2662, _2663, 1.0), 0.0);
        float _2960 = exp2((_2949 * (-1.44269502162933349609375)) * (1.0 - _2951.w));
        float _2961 = log2(_2960);
        float _2977 = log2(_2682);
        _2774 = (exp2(_2977 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2961 * cbSceneParam._m0[78u].x)) * _2951.x) / cbSceneParam._m0[78u].x)) + _2679;
        _2776 = (exp2(_2977 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2961 * cbSceneParam._m0[78u].y)) * _2951.y) / cbSceneParam._m0[78u].y)) + _2680;
        _2778 = (exp2(_2977 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2961 * cbSceneParam._m0[78u].z)) * _2951.z) / cbSceneParam._m0[78u].z)) + _2681;
        _2780 = _2960 * _2682;
    }
    else
    {
        _2774 = _2679;
        _2776 = _2680;
        _2778 = _2681;
        _2780 = _2682;
    }
    bool _2987;
    vec4 _2790;
    vec4 _2812;
    float _2814;
    float _2818;
    float _2819;
    float _2820;
    float _2821;
    bool _2831;
    for (;;)
    {
        _2790 = cbMatDynParam._m0[0u];
        float _2792 = roundEven(_2790.y);
        bool _2793 = _2792 == 3.0;
        float _2794 = log2(_2780);
        float _2801 = exp2(_2794 * cbSceneParam._m0[78u].x) * _2651;
        float _2802 = exp2(_2794 * cbSceneParam._m0[78u].y) * _2652;
        float _2803 = exp2(_2794 * cbSceneParam._m0[78u].z) * _2653;
        float _2810 = _767 + (-0.5);
        _2812 = cbMtdParam._m0[1u];
        _2814 = _2812.y * _2810;
        float _2817 = (_2792 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2818 = _2817 * (_2793 ? _2801 : (_2801 + (cbSceneParam._m0[72u].w * _2774)));
        _2819 = _2817 * (_2793 ? _2802 : (_2802 + (cbSceneParam._m0[72u].w * _2776)));
        _2820 = _2817 * (_2793 ? _2803 : (_2803 + (cbSceneParam._m0[72u].w * _2778)));
        _2821 = _2810 * 0.999000012874603271484375;
        _2831 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2831)
        {
            if ((cbInstanceData._m0[_816 + 7u].x + _2821) < 0.5)
            {
                _2987 = true;
                break;
            }
        }
        uint _2928 = _817 + uint(_2790.w);
        if ((cbInstanceData._m0[_2928].w < 1.0) && ((cbInstanceData._m0[_2928].w + _2821) < 0.5))
        {
            _2987 = true;
            break;
        }
        if ((_2814 + 1.0) < _2812.x)
        {
            _2987 = true;
            break;
        }
        _2987 = false;
        break;
    }
    float _3192;
    if (_2987)
    {
        discard_state = true;
        _3192 = 0.0;
    }
    else
    {
        _3192 = cbInstanceData._m0[_2654].w;
    }
    SV_Target.x = _2818;
    SV_Target.y = _2819;
    SV_Target.z = _2820;
    SV_Target.w = _3192;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2654].w;
    discard_exit();
}


