#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[20];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_19;
layout(set = 0, binding = 11) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_2;
layout(set = 0, binding = 12) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_20;
layout(set = 0, binding = 13) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_3;
layout(set = 0, binding = 14) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_5;
layout(set = 0, binding = 15) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_6;
layout(set = 0, binding = 16) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_7;
layout(set = 0, binding = 17) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_8;
layout(set = 0, binding = 18) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_11;
layout(set = 0, binding = 3) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_12;
layout(set = 0, binding = 4) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_13;
layout(set = 0, binding = 5) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_14;
layout(set = 0, binding = 6) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_15;
layout(set = 0, binding = 7) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_16;
layout(set = 0, binding = 8) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_17;
layout(set = 0, binding = 9) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_18;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1397;
float _4062;
float _4063;
float _4064;
float _4065;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _223 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _224 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _225 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _231 = inversesqrt(dot(vec3(_223, _224, _225), vec3(_223, _224, _225)));
    float _238 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _245 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _268 = sin(cbMtdParam._m0[18u].x);
    float _269 = cos(cbMtdParam._m0[18u].x);
    float _270 = TEXCOORD.x - cbMtdParam._m0[17u].w;
    float _271 = TEXCOORD.y - cbMtdParam._m0[17u].w;
    float _279 = (cbMtdParam._m0[17u].w + cbMtdParam._m0[19u].y) + fma(_271, (-0.0) - _268, _269 * _270);
    float _281 = (cbMtdParam._m0[17u].w + cbMtdParam._m0[19u].z) + fma(_271, _269, _270 * _268);
    vec4 _294 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * _279) + cbTextureTilingScale._m0[1u].z, (_281 * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w));
    float _300 = _294.x * cbMtdParam._m0[10u].x;
    float _301 = _294.y * cbMtdParam._m0[10u].y;
    float _302 = _294.z * cbMtdParam._m0[10u].z;
    vec4 _320 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w));
    vec4 _339 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_0, SS_WrapLinear), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _364 = cbMtdParam._m0[19u].x * texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.x) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD.y) + cbTextureTilingScale._m0[13u].w)).x;
    float _375 = ((cbMtdParam._m0[15u].x * (-1.39999997615814208984375)) * (((1.0 - _339.x) * 2.0) - _364)) + 1.0;
    float _4074 = isnan(0.0) ? _375 : (isnan(_375) ? 0.0 : max(_375, 0.0));
    float _376 = isnan(1.0) ? _4074 : (isnan(_4074) ? 1.0 : min(_4074, 1.0));
    float _383 = (_376 * ((_320.x * cbMtdParam._m0[11u].x) - _300)) + _300;
    float _384 = (_376 * ((_320.y * cbMtdParam._m0[11u].y) - _301)) + _301;
    float _385 = (_376 * ((_320.z * cbMtdParam._m0[11u].z) - _302)) + _302;
    vec4 _403 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_8, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[17u].x * TEXCOORD.x) + cbTextureTilingScale._m0[17u].z, (cbTextureTilingScale._m0[17u].y * TEXCOORD.y) + cbTextureTilingScale._m0[17u].w));
    float _416 = (((((1.0 - _339.y) * 2.0) - _364) * (-1.39999997615814208984375)) * cbMtdParam._m0[18u].z) + 1.0;
    float _4085 = isnan(0.0) ? _416 : (isnan(_416) ? 0.0 : max(_416, 0.0));
    float _417 = isnan(1.0) ? _4085 : (isnan(_4085) ? 1.0 : min(_4085, 1.0));
    float _424 = (((_403.x * cbMtdParam._m0[12u].x) - _383) * _417) + _383;
    float _425 = (_417 * ((_403.y * cbMtdParam._m0[12u].y) - _384)) + _384;
    float _426 = (_417 * ((_403.z * cbMtdParam._m0[12u].z) - _385)) + _385;
    vec4 _443 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _456 = (((((1.0 - _339.z) * 2.0) - _364) * (-1.39999997615814208984375)) * cbMtdParam._m0[18u].w) + 1.0;
    float _4096 = isnan(0.0) ? _456 : (isnan(_456) ? 0.0 : max(_456, 0.0));
    float _457 = isnan(1.0) ? _4096 : (isnan(_4096) ? 1.0 : min(_4096, 1.0));
    vec4 _485 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _493 = ((((((_443.x * cbMtdParam._m0[13u].x) - _424) * _457) + _424) * 4.55000019073486328125) * cbMtdParam._m0[9u].x) * _485.x;
    float _496 = ((((_457 * ((_443.y * cbMtdParam._m0[13u].y) - _425)) + _425) * 4.55000019073486328125) * cbMtdParam._m0[9u].y) * _485.y;
    float _499 = ((((_457 * ((_443.z * cbMtdParam._m0[13u].z) - _426)) + _426) * 4.55000019073486328125) * cbMtdParam._m0[9u].z) * _485.z;
    vec4 _519 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_20, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.z) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.w) + cbTextureTilingScale._m0[12u].w));
    float _548 = (TEXCOORD_5.x - ((cbMtdParam._m0[15u].w * (1.0 - TEXCOORD_5.x)) * (texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[18u].x * TEXCOORD.z) + cbTextureTilingScale._m0[18u].z, (cbTextureTilingScale._m0[18u].y * TEXCOORD.w) + cbTextureTilingScale._m0[18u].w)).x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[15u].z + 1.0);
    float _4107 = isnan(0.0) ? _548 : (isnan(_548) ? 0.0 : max(_548, 0.0));
    float _549 = isnan(1.0) ? _4107 : (isnan(_4107) ? 1.0 : min(_4107, 1.0));
    float _556 = (_549 * ((_519.x * cbMtdParam._m0[14u].x) - _493)) + _493;
    float _557 = (_549 * ((_519.y * cbMtdParam._m0[14u].y) - _496)) + _496;
    float _558 = (_549 * ((_519.z * cbMtdParam._m0[14u].z) - _499)) + _499;
    vec4 _571 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * _279) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _281) + cbTextureTilingScale._m0[5u].w));
    float _573 = _571.x;
    float _591 = ((texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w)).x - _573) * _376) + _573;
    float _608 = ((texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w)).x - _591) * _417) + _591;
    float _625 = ((texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w)).x - _608) * _457) + _608;
    float _629 = (_625 - (_625 * TEXCOORD_5.x)) * cbMtdParam._m0[18u].y;
    vec4 _642 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.z) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.w) + cbTextureTilingScale._m0[3u].w));
    vec4 _664 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[14u].x * _279) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _281) + cbTextureTilingScale._m0[14u].w));
    float _666 = _664.x;
    float _667 = _664.y;
    float _670 = cbMtdParam._m0[17u].y * _664.z;
    vec4 _682 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * TEXCOORD.x) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * TEXCOORD.y) + cbTextureTilingScale._m0[15u].w));
    float _691 = (((cbMtdParam._m0[17u].x * _682.z) - _670) * _376) + _670;
    vec4 _704 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_15, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _716 = (((cbMtdParam._m0[16u].w * _704.z) - _691) * _417) + _691;
    vec4 _729 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _738 = (((cbMtdParam._m0[16u].z * _729.z) - _716) * _457) + _716;
    float _743 = ((cbMtdParam._m0[16u].x * TEXCOORD_5.x) * ((_642.z * cbMtdParam._m0[17u].z) - _738)) + _738;
    vec4 _756 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[16u].x * TEXCOORD.x) + cbTextureTilingScale._m0[16u].z, (cbTextureTilingScale._m0[16u].y * TEXCOORD.y) + cbTextureTilingScale._m0[16u].w));
    float _768 = ((_682.x - _666) * _376) + _666;
    float _769 = ((_682.y - _667) * _376) + _667;
    float _774 = ((_704.x - _768) * _417) + _768;
    float _775 = ((_704.y - _769) * _417) + _769;
    float _784 = ((((_729.x - _774) * _457) + _774) * 2.0) + (-1.0);
    float _785 = ((((_729.y - _775) * _457) + _775) * 2.0) + (-1.0);
    float _786 = dot(vec2(_784, _785), vec2(_784, _785));
    float _4118 = isnan(0.0) ? _786 : (isnan(_786) ? 0.0 : max(_786, 0.0));
    float _791 = sqrt(1.0 - (isnan(1.0) ? _4118 : (isnan(_4118) ? 1.0 : min(_4118, 1.0))));
    float _801 = ((((_756.x * 2.0) + (-1.0)) * cbMtdParam._m0[16u].y) + _784) + ((((_642.x * 2.0) + (-1.0)) * TEXCOORD_5.x) * cbMtdParam._m0[15u].y);
    float _802 = ((((_756.y * 2.0) + (-1.0)) * cbMtdParam._m0[16u].y) + _785) + ((((_642.y * 2.0) + (-1.0)) * TEXCOORD_5.y) * cbMtdParam._m0[15u].y);
    float _805 = fma(_791, _238 * NORMAL.x, fma(_802, _245 * TANGENT.x, (_231 * _223) * _801));
    float _808 = fma(_791, _238 * NORMAL.y, fma(_802, _245 * TANGENT.y, (_231 * _224) * _801));
    float _811 = fma(_791, _238 * NORMAL.z, fma(_802, _245 * TANGENT.z, (_231 * _225) * _801));
    float _815 = inversesqrt(dot(vec3(_805, _808, _811), vec3(_805, _808, _811)));
    float _816 = _815 * _805;
    float _817 = _815 * _808;
    float _818 = _815 * _811;
    float _4129 = isnan(0.0) ? _743 : (isnan(_743) ? 0.0 : max(_743, 0.0));
    float _819 = isnan(1.0) ? _4129 : (isnan(_4129) ? 1.0 : min(_4129, 1.0));
    float _4140 = isnan(0.0) ? _556 : (isnan(_556) ? 0.0 : max(_556, 0.0));
    float _4151 = isnan(0.0) ? _557 : (isnan(_557) ? 0.0 : max(_557, 0.0));
    float _4162 = isnan(0.0) ? _558 : (isnan(_558) ? 0.0 : max(_558, 0.0));
    float _4173 = isnan(0.0) ? _629 : (isnan(_629) ? 0.0 : max(_629, 0.0));
    float _823 = isnan(1.0) ? _4173 : (isnan(_4173) ? 1.0 : min(_4173, 1.0));
    float _839 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _879 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _889 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _879);
    float _890 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _879);
    float _891 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _879);
    float _895 = inversesqrt(dot(vec3(_889, _890, _891), vec3(_889, _890, _891)));
    float _896 = _889 * _895;
    float _897 = _890 * _895;
    float _898 = _891 * _895;
    vec4 _903 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _905 = _903.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1077 = sqrt(((_889 * _889) + (_890 * _890)) + (_891 * _891));
        float _1083 = (cbMatDynParam._m0[5u].x * _1077) + cbMatDynParam._m0[5u].y;
        float _4184 = isnan(0.0) ? _1083 : (isnan(_1083) ? 0.0 : max(_1083, 0.0));
        float _1084 = isnan(1.0) ? _4184 : (isnan(_4184) ? 1.0 : min(_4184, 1.0));
        float _1088 = (cbMatDynParam._m0[5u].z * _1077) + cbMatDynParam._m0[5u].w;
        float _4195 = isnan(0.0) ? _1088 : (isnan(_1088) ? 0.0 : max(_1088, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4195 : (isnan(_4195) ? 1.0 : min(_4195, 1.0))) - _1084)) + _1084) < ((_905 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _916 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _917 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _935 = fma(_818, cbSceneParam._m0[5u].z, fma(_817, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _816));
    float _938 = fma(_818, cbSceneParam._m0[6u].z, fma(_817, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _816));
    float _941 = fma(_818, cbSceneParam._m0[7u].z, fma(_817, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _816));
    uint _954 = uint(roundEven(NORMAL.w)) * 13u;
    uint _955 = _954 + 9u;
    uint _956 = _955 + uint(cbMatDynParam._m0[0u].w);
    float _962 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4140 : (isnan(_4140) ? 1.0 : min(_4140, 1.0)))) * cbInstanceData._m0[_956].x;
    float _963 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4151 : (isnan(_4151) ? 1.0 : min(_4151, 1.0)))) * cbInstanceData._m0[_956].y;
    float _964 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4162 : (isnan(_4162) ? 1.0 : min(_4162, 1.0)))) * cbInstanceData._m0[_956].z;
    float _4206 = isnan(0.0) ? _962 : (isnan(_962) ? 0.0 : max(_962, 0.0));
    float _965 = isnan(1.0) ? _4206 : (isnan(_4206) ? 1.0 : min(_4206, 1.0));
    float _4217 = isnan(0.0) ? _963 : (isnan(_963) ? 0.0 : max(_963, 0.0));
    float _966 = isnan(1.0) ? _4217 : (isnan(_4217) ? 1.0 : min(_4217, 1.0));
    float _4228 = isnan(0.0) ? _964 : (isnan(_964) ? 0.0 : max(_964, 0.0));
    float _967 = isnan(1.0) ? _4228 : (isnan(_4228) ? 1.0 : min(_4228, 1.0));
    float _968 = 1.0 - _823;
    float _969 = _965 * _968;
    float _970 = _966 * _968;
    float _971 = _967 * _968;
    float _976 = (_965 + (-0.039999999105930328369140625)) * _823;
    float _977 = (_966 + (-0.039999999105930328369140625)) * _823;
    float _978 = (_967 + (-0.039999999105930328369140625)) * _823;
    float _979 = _976 + 0.039999999105930328369140625;
    float _981 = _977 + 0.039999999105930328369140625;
    float _982 = _978 + 0.039999999105930328369140625;
    vec4 _991 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _916, cbSceneParam._m0[86u].y * _917));
    float _994 = _991.x * TEXCOORD_5.w;
    float _995 = dot(vec3(_816, _817, _818), vec3(_896, _897, _898));
    float _998 = _995 * 2.0;
    float _1002 = (_998 * _816) - _896;
    float _1003 = (_998 * _817) - _897;
    float _1004 = (_998 * _818) - _898;
    float _1008 = abs(dot(vec3(_896, _897, _898), vec3(_816, _817, _818)));
    float _4239 = isnan(0.0) ? _1008 : (isnan(_1008) ? 0.0 : max(_1008, 0.0));
    float _1010 = sqrt(_819);
    float _1023 = exp2((_1010 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4239 : (isnan(_4239) ? 1.0 : min(_4239, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1010 * 3.0));
    float _1029 = (1.0 - _1023) * ((_1010 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1030 = _1023 * _1010;
    float _1058 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1062 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1066 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1396;
    float _1398;
    float _1399;
    float _1400;
    float _1401;
    float _1402;
    float _1403;
    float _1404;
    float _1405;
    float _1406;
    float _1407;
    float _1408;
    float _1409;
    float _1410;
    float _1411;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1121 = fma(_1066, cbModelParam._m0[26u].z, fma(_1062, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1058));
        float _1125 = fma(_1066, cbModelParam._m0[27u].z, fma(_1062, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1058));
        float _1129 = fma(_1066, cbModelParam._m0[28u].z, fma(_1062, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1058));
        float _1154 = _1058 + _816;
        float _1155 = _1062 + _817;
        float _1156 = _1066 + _818;
        float _1166 = fma(_1156, cbModelParam._m0[26u].z, fma(_1155, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1154)) - _1121;
        float _1167 = fma(_1156, cbModelParam._m0[27u].z, fma(_1155, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1154)) - _1125;
        float _1168 = fma(_1156, cbModelParam._m0[28u].z, fma(_1155, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1154)) - _1129;
        float _1172 = inversesqrt(dot(vec3(_1166, _1167, _1168), vec3(_1166, _1167, _1168)));
        float _1185 = ((_1172 * _1166) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1121 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1186 = ((_1172 * _1167) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1125 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1187 = ((_1172 * _1168) / cbModelParam._m0[34u].z) + ((((((_1129 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1190 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1185, _1186, _1187), 0.0);
        vec4 _1197 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1185, _1186, _1187), 0.0);
        vec4 _1204 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1185, _1186, _1187), 0.0);
        vec4 _1211 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1185, _1186, _1187), 0.0);
        float _1224 = exp2((_1190.w + (-0.5)) * 20.0) * 2.0;
        float _1225 = _1224 * (_1190.x + (-0.5));
        float _1226 = _1224 * (_1190.y + (-0.5));
        float _1227 = _1224 * (_1190.z + (-0.5));
        float _1234 = exp2((_1197.w + (-0.5)) * 20.0) * 2.0;
        float _1235 = _1234 * (_1197.x + (-0.5));
        float _1236 = _1234 * (_1197.y + (-0.5));
        float _1237 = _1234 * (_1197.z + (-0.5));
        float _1244 = exp2((_1204.w + (-0.5)) * 20.0) * 2.0;
        float _1245 = _1244 * (_1204.x + (-0.5));
        float _1246 = _1244 * (_1204.y + (-0.5));
        float _1247 = _1244 * (_1204.z + (-0.5));
        float _1254 = exp2((_1211.w + (-0.5)) * 20.0) * 2.0;
        float _1255 = _1254 * (_1211.x + (-0.5));
        float _1256 = _1254 * (_1211.y + (-0.5));
        float _1257 = _1254 * (_1211.z + (-0.5));
        float _1258 = isnan(0.0) ? _1255 : (isnan(_1255) ? 0.0 : max(_1255, 0.0));
        float _1259 = isnan(0.0) ? _1256 : (isnan(_1256) ? 0.0 : max(_1256, 0.0));
        float _1260 = isnan(0.0) ? _1257 : (isnan(_1257) ? 0.0 : max(_1257, 0.0));
        float _1261 = _1225 * 0.5;
        float _1262 = _1235 * 0.5;
        float _1263 = _1245 * 0.5;
        float _1264 = dot(vec3(_1261, _1262, _1263), vec3(_1261, _1262, _1263));
        float _1269 = (_1264 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1264);
        float _1278 = (dot(vec3(_816, _817, _818), vec3(_1269 * _1261, _1269 * _1262, _1269 * _1263)) + 1.0) * 0.5;
        float _4265 = isnan(0.0) ? _1278 : (isnan(_1278) ? 0.0 : max(_1278, 0.0));
        float _1288 = sqrt(((_1262 * _1262) + (_1261 * _1261)) + (_1263 * _1263)) / (_1258 + 9.9999997473787516355514526367188e-06);
        float _4276 = isnan(0.0) ? _1288 : (isnan(_1288) ? 0.0 : max(_1288, 0.0));
        float _1289 = isnan(1.0) ? _4276 : (isnan(_4276) ? 1.0 : min(_4276, 1.0));
        float _1290 = _1289 * 2.0;
        float _1294 = (1.0 - _1289) / (_1289 + 1.0);
        float _4287 = isnan(0.0) ? _1294 : (isnan(_1294) ? 0.0 : max(_1294, 0.0));
        float _1295 = isnan(1.0) ? _4287 : (isnan(_4287) ? 1.0 : min(_4287, 1.0));
        float _1304 = ((((1.0 - _1295) * (_1290 + 2.0)) * exp2(log2(isnan(1.0) ? _4265 : (isnan(_4265) ? 1.0 : min(_4265, 1.0))) * (_1290 + 1.0))) + _1295) * _1258;
        float _1305 = _1226 * 0.5;
        float _1306 = _1236 * 0.5;
        float _1307 = _1246 * 0.5;
        float _1308 = dot(vec3(_1305, _1306, _1307), vec3(_1305, _1306, _1307));
        float _1313 = (_1308 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1308);
        float _1321 = (dot(vec3(_816, _817, _818), vec3(_1313 * _1305, _1313 * _1306, _1313 * _1307)) + 1.0) * 0.5;
        float _4298 = isnan(0.0) ? _1321 : (isnan(_1321) ? 0.0 : max(_1321, 0.0));
        float _1330 = sqrt(((_1306 * _1306) + (_1305 * _1305)) + (_1307 * _1307)) / (_1259 + 9.9999997473787516355514526367188e-06);
        float _4309 = isnan(0.0) ? _1330 : (isnan(_1330) ? 0.0 : max(_1330, 0.0));
        float _1331 = isnan(1.0) ? _4309 : (isnan(_4309) ? 1.0 : min(_4309, 1.0));
        float _1332 = _1331 * 2.0;
        float _1336 = (1.0 - _1331) / (_1331 + 1.0);
        float _4320 = isnan(0.0) ? _1336 : (isnan(_1336) ? 0.0 : max(_1336, 0.0));
        float _1337 = isnan(1.0) ? _4320 : (isnan(_4320) ? 1.0 : min(_4320, 1.0));
        float _1346 = ((((1.0 - _1337) * (_1332 + 2.0)) * exp2(log2(isnan(1.0) ? _4298 : (isnan(_4298) ? 1.0 : min(_4298, 1.0))) * (_1332 + 1.0))) + _1337) * _1259;
        float _1347 = _1227 * 0.5;
        float _1348 = _1237 * 0.5;
        float _1349 = _1247 * 0.5;
        float _1350 = dot(vec3(_1347, _1348, _1349), vec3(_1347, _1348, _1349));
        float _1355 = (_1350 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1350);
        float _1363 = (dot(vec3(_816, _817, _818), vec3(_1355 * _1347, _1355 * _1348, _1355 * _1349)) + 1.0) * 0.5;
        float _4331 = isnan(0.0) ? _1363 : (isnan(_1363) ? 0.0 : max(_1363, 0.0));
        float _1372 = sqrt(((_1348 * _1348) + (_1347 * _1347)) + (_1349 * _1349)) / (_1260 + 9.9999997473787516355514526367188e-06);
        float _4342 = isnan(0.0) ? _1372 : (isnan(_1372) ? 0.0 : max(_1372, 0.0));
        float _1373 = isnan(1.0) ? _4342 : (isnan(_4342) ? 1.0 : min(_4342, 1.0));
        float _1374 = _1373 * 2.0;
        float _1378 = (1.0 - _1373) / (_1373 + 1.0);
        float _4353 = isnan(0.0) ? _1378 : (isnan(_1378) ? 0.0 : max(_1378, 0.0));
        float _1379 = isnan(1.0) ? _4353 : (isnan(_4353) ? 1.0 : min(_4353, 1.0));
        float _1388 = ((((1.0 - _1379) * (_1374 + 2.0)) * exp2(log2(isnan(1.0) ? _4331 : (isnan(_4331) ? 1.0 : min(_4331, 1.0))) * (_1374 + 1.0))) + _1379) * _1260;
        _1396 = _1227;
        _1398 = _1226;
        _1399 = _1225;
        _1400 = _1237;
        _1401 = _1236;
        _1402 = _1235;
        _1403 = _1247;
        _1404 = _1246;
        _1405 = _1245;
        _1406 = _1260;
        _1407 = _1259;
        _1408 = _1258;
        _1409 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1304 : (isnan(_1304) ? 0.0 : max(_1304, 0.0)));
        _1410 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1346 : (isnan(_1346) ? 0.0 : max(_1346, 0.0)));
        _1411 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1388 : (isnan(_1388) ? 0.0 : max(_1388, 0.0)));
    }
    else
    {
        _1396 = _1397;
        _1398 = _1397;
        _1399 = _1397;
        _1400 = _1397;
        _1401 = _1397;
        _1402 = _1397;
        _1403 = _1397;
        _1404 = _1397;
        _1405 = _1397;
        _1406 = _1397;
        _1407 = _1397;
        _1408 = _1397;
        _1409 = 0.0;
        _1410 = 0.0;
        _1411 = 0.0;
    }
    float _1709;
    float _1710;
    float _1711;
    float _1712;
    float _1713;
    float _1714;
    float _1715;
    float _1716;
    float _1717;
    float _1718;
    float _1719;
    float _1720;
    float _1721;
    float _1722;
    float _1723;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1440 = fma(_1066, cbModelParam._m0[30u].z, fma(_1062, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1058));
        float _1444 = fma(_1066, cbModelParam._m0[31u].z, fma(_1062, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1058));
        float _1448 = fma(_1066, cbModelParam._m0[32u].z, fma(_1062, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1058));
        float _1471 = _1058 + _816;
        float _1472 = _1062 + _817;
        float _1473 = _1066 + _818;
        float _1483 = fma(_1473, cbModelParam._m0[30u].z, fma(_1472, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1471)) - _1440;
        float _1484 = fma(_1473, cbModelParam._m0[31u].z, fma(_1472, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1471)) - _1444;
        float _1485 = fma(_1473, cbModelParam._m0[32u].z, fma(_1472, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1471)) - _1448;
        float _1489 = inversesqrt(dot(vec3(_1483, _1484, _1485), vec3(_1483, _1484, _1485)));
        float _1502 = ((_1489 * _1483) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1440 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1503 = ((_1489 * _1484) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1444 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1504 = ((_1489 * _1485) / cbModelParam._m0[35u].z) + ((((((_1448 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1506 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1502, _1503, _1504), 0.0);
        vec4 _1513 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1502, _1503, _1504), 0.0);
        vec4 _1520 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1502, _1503, _1504), 0.0);
        vec4 _1527 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1502, _1503, _1504), 0.0);
        float _1539 = exp2((_1506.w + (-0.5)) * 20.0) * 2.0;
        float _1540 = _1539 * (_1506.x + (-0.5));
        float _1541 = _1539 * (_1506.y + (-0.5));
        float _1542 = _1539 * (_1506.z + (-0.5));
        float _1549 = exp2((_1513.w + (-0.5)) * 20.0) * 2.0;
        float _1550 = _1549 * (_1513.x + (-0.5));
        float _1551 = _1549 * (_1513.y + (-0.5));
        float _1552 = _1549 * (_1513.z + (-0.5));
        float _1559 = exp2((_1520.w + (-0.5)) * 20.0) * 2.0;
        float _1560 = _1559 * (_1520.x + (-0.5));
        float _1561 = _1559 * (_1520.y + (-0.5));
        float _1562 = _1559 * (_1520.z + (-0.5));
        float _1569 = exp2((_1527.w + (-0.5)) * 20.0) * 2.0;
        float _1570 = _1569 * (_1527.x + (-0.5));
        float _1571 = _1569 * (_1527.y + (-0.5));
        float _1572 = _1569 * (_1527.z + (-0.5));
        float _1573 = isnan(0.0) ? _1570 : (isnan(_1570) ? 0.0 : max(_1570, 0.0));
        float _1574 = isnan(0.0) ? _1571 : (isnan(_1571) ? 0.0 : max(_1571, 0.0));
        float _1575 = isnan(0.0) ? _1572 : (isnan(_1572) ? 0.0 : max(_1572, 0.0));
        float _1576 = _1540 * 0.5;
        float _1577 = _1550 * 0.5;
        float _1578 = _1560 * 0.5;
        float _1579 = dot(vec3(_1576, _1577, _1578), vec3(_1576, _1577, _1578));
        float _1584 = (_1579 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1579);
        float _1592 = (dot(vec3(_816, _817, _818), vec3(_1584 * _1576, _1584 * _1577, _1584 * _1578)) + 1.0) * 0.5;
        float _4394 = isnan(0.0) ? _1592 : (isnan(_1592) ? 0.0 : max(_1592, 0.0));
        float _1601 = sqrt(((_1577 * _1577) + (_1576 * _1576)) + (_1578 * _1578)) / (_1573 + 9.9999997473787516355514526367188e-06);
        float _4405 = isnan(0.0) ? _1601 : (isnan(_1601) ? 0.0 : max(_1601, 0.0));
        float _1602 = isnan(1.0) ? _4405 : (isnan(_4405) ? 1.0 : min(_4405, 1.0));
        float _1603 = _1602 * 2.0;
        float _1607 = (1.0 - _1602) / (_1602 + 1.0);
        float _4416 = isnan(0.0) ? _1607 : (isnan(_1607) ? 0.0 : max(_1607, 0.0));
        float _1608 = isnan(1.0) ? _4416 : (isnan(_4416) ? 1.0 : min(_4416, 1.0));
        float _1617 = ((((1.0 - _1608) * (_1603 + 2.0)) * exp2(log2(isnan(1.0) ? _4394 : (isnan(_4394) ? 1.0 : min(_4394, 1.0))) * (_1603 + 1.0))) + _1608) * _1573;
        float _1618 = _1541 * 0.5;
        float _1619 = _1551 * 0.5;
        float _1620 = _1561 * 0.5;
        float _1621 = dot(vec3(_1618, _1619, _1620), vec3(_1618, _1619, _1620));
        float _1626 = (_1621 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1621);
        float _1634 = (dot(vec3(_816, _817, _818), vec3(_1626 * _1618, _1626 * _1619, _1626 * _1620)) + 1.0) * 0.5;
        float _4427 = isnan(0.0) ? _1634 : (isnan(_1634) ? 0.0 : max(_1634, 0.0));
        float _1643 = sqrt(((_1619 * _1619) + (_1618 * _1618)) + (_1620 * _1620)) / (_1574 + 9.9999997473787516355514526367188e-06);
        float _4438 = isnan(0.0) ? _1643 : (isnan(_1643) ? 0.0 : max(_1643, 0.0));
        float _1644 = isnan(1.0) ? _4438 : (isnan(_4438) ? 1.0 : min(_4438, 1.0));
        float _1645 = _1644 * 2.0;
        float _1649 = (1.0 - _1644) / (_1644 + 1.0);
        float _4449 = isnan(0.0) ? _1649 : (isnan(_1649) ? 0.0 : max(_1649, 0.0));
        float _1650 = isnan(1.0) ? _4449 : (isnan(_4449) ? 1.0 : min(_4449, 1.0));
        float _1659 = ((((1.0 - _1650) * (_1645 + 2.0)) * exp2(log2(isnan(1.0) ? _4427 : (isnan(_4427) ? 1.0 : min(_4427, 1.0))) * (_1645 + 1.0))) + _1650) * _1574;
        float _1660 = _1542 * 0.5;
        float _1661 = _1552 * 0.5;
        float _1662 = _1562 * 0.5;
        float _1663 = dot(vec3(_1660, _1661, _1662), vec3(_1660, _1661, _1662));
        float _1668 = (_1663 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1663);
        float _1676 = (dot(vec3(_816, _817, _818), vec3(_1668 * _1660, _1668 * _1661, _1668 * _1662)) + 1.0) * 0.5;
        float _4460 = isnan(0.0) ? _1676 : (isnan(_1676) ? 0.0 : max(_1676, 0.0));
        float _1685 = sqrt(((_1661 * _1661) + (_1660 * _1660)) + (_1662 * _1662)) / (_1575 + 9.9999997473787516355514526367188e-06);
        float _4471 = isnan(0.0) ? _1685 : (isnan(_1685) ? 0.0 : max(_1685, 0.0));
        float _1686 = isnan(1.0) ? _4471 : (isnan(_4471) ? 1.0 : min(_4471, 1.0));
        float _1687 = _1686 * 2.0;
        float _1691 = (1.0 - _1686) / (_1686 + 1.0);
        float _4482 = isnan(0.0) ? _1691 : (isnan(_1691) ? 0.0 : max(_1691, 0.0));
        float _1692 = isnan(1.0) ? _4482 : (isnan(_4482) ? 1.0 : min(_4482, 1.0));
        float _1701 = ((((1.0 - _1692) * (_1687 + 2.0)) * exp2(log2(isnan(1.0) ? _4460 : (isnan(_4460) ? 1.0 : min(_4460, 1.0))) * (_1687 + 1.0))) + _1692) * _1575;
        _1709 = _1542;
        _1710 = _1541;
        _1711 = _1540;
        _1712 = _1552;
        _1713 = _1551;
        _1714 = _1550;
        _1715 = _1562;
        _1716 = _1561;
        _1717 = _1560;
        _1718 = _1575;
        _1719 = _1574;
        _1720 = _1573;
        _1721 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1617 : (isnan(_1617) ? 0.0 : max(_1617, 0.0)));
        _1722 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1659 : (isnan(_1659) ? 0.0 : max(_1659, 0.0)));
        _1723 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1701 : (isnan(_1701) ? 0.0 : max(_1701, 0.0)));
    }
    else
    {
        _1709 = _1397;
        _1710 = _1397;
        _1711 = _1397;
        _1712 = _1397;
        _1713 = _1397;
        _1714 = _1397;
        _1715 = _1397;
        _1716 = _1397;
        _1717 = _1397;
        _1718 = _1397;
        _1719 = _1397;
        _1720 = _1397;
        _1721 = 0.0;
        _1722 = 0.0;
        _1723 = 0.0;
    }
    float _1733 = (cbModelParam._m0[1u].x * (_1721 - _1409)) + _1409;
    float _1734 = (cbModelParam._m0[1u].x * (_1722 - _1410)) + _1410;
    float _1735 = (cbModelParam._m0[1u].x * (_1723 - _1411)) + _1411;
    float _1756 = fma(_1735, cbSceneParam._m0[89u].z, fma(_1734, cbSceneParam._m0[89u].y, _1733 * cbSceneParam._m0[89u].x));
    float _1759 = fma(_1735, cbSceneParam._m0[90u].z, fma(_1734, cbSceneParam._m0[90u].y, _1733 * cbSceneParam._m0[90u].x));
    float _1762 = fma(_1735, cbSceneParam._m0[91u].z, fma(_1734, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1733));
    float _1777 = _1002 * 0.5;
    float _1778 = _1003 * 0.5;
    float _1779 = _1004 * 0.5;
    float _1780 = dot(vec4(_1777, _1778, _1779, 1.0), vec4(_1711, _1714, _1717, _1720));
    float _1783 = dot(vec4(_1777, _1778, _1779, 1.0), vec4(_1710, _1713, _1716, _1719));
    float _1786 = dot(vec4(_1777, _1778, _1779, 1.0), vec4(_1709, _1712, _1715, _1718));
    float _1820;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1793 = dot(vec4(_1777, _1778, _1779, 1.0), vec4(_1396, _1400, _1403, _1406));
        float _1797 = dot(vec4(_1777, _1778, _1779, 1.0), vec4(_1398, _1401, _1404, _1407));
        float _1801 = dot(vec4(_1777, _1778, _1779, 1.0), vec4(_1399, _1402, _1405, _1408));
        float _1808 = dot(vec4(cbModelParam._m0[39u]), vec4(_1777, _1778, _1779, 1.0));
        _1820 = dot(vec3(isnan(0.0) ? _1801 : (isnan(_1801) ? 0.0 : max(_1801, 0.0)), isnan(0.0) ? _1797 : (isnan(_1797) ? 0.0 : max(_1797, 0.0)), isnan(0.0) ? _1793 : (isnan(_1793) ? 0.0 : max(_1793, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1808) ? 0.0 : (isnan(0.0) ? _1808 : max(0.0, _1808))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1820 = 1.0;
    }
    float _1831;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1822 = dot(vec4(cbModelParam._m0[40u]), vec4(_1777, _1778, _1779, 1.0));
        _1831 = dot(vec3(isnan(0.0) ? _1780 : (isnan(_1780) ? 0.0 : max(_1780, 0.0)), isnan(0.0) ? _1783 : (isnan(_1783) ? 0.0 : max(_1783, 0.0)), isnan(0.0) ? _1786 : (isnan(_1786) ? 0.0 : max(_1786, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1822) ? 0.0 : (isnan(0.0) ? _1822 : max(0.0, _1822))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1831 = 1.0;
    }
    float _1835 = (_1831 * cbModelParam._m0[1u].x) + (_1820 * (1.0 - cbModelParam._m0[1u].x));
    float _1845 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _819);
    float _1846 = isnan(_1845) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1845 : min(cbModelParam._m0[25u].z, _1845));
    float _1926;
    float _1928;
    float _1930;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1893 = fma(_1066, cbModelParam._m0[13u].z, fma(_1062, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1058)) + cbModelParam._m0[13u].w;
        float _1897 = fma(_1066, cbModelParam._m0[14u].z, fma(_1062, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1058)) + cbModelParam._m0[14u].w;
        float _1901 = fma(_1066, cbModelParam._m0[15u].z, fma(_1062, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1058)) + cbModelParam._m0[15u].w;
        float _1904 = fma(_1004, cbModelParam._m0[13u].z, fma(_1003, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1002));
        float _1907 = fma(_1004, cbModelParam._m0[14u].z, fma(_1003, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1002));
        float _1910 = fma(_1004, cbModelParam._m0[15u].z, fma(_1003, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1002));
        float _1938;
        if (_1904 > 0.0)
        {
            _1938 = abs((1.0 - _1893) / _1904);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1904 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1893 + 1.0) / _1904);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1938 = frontier_phi_17_15_ladder;
        }
        float _2111;
        if (_1907 > 0.0)
        {
            _2111 = abs((1.0 - _1897) / _1907);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1907 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1897 + 1.0) / _1907);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2111 = frontier_phi_26_22_ladder;
        }
        float _2406;
        if (_1910 > 0.0)
        {
            _2406 = abs((1.0 - _1901) / _1910);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1910 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1901 + 1.0) / _1910);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2406 = frontier_phi_38_33_ladder;
        }
        float _2408 = isnan(_2111) ? _1938 : (isnan(_1938) ? _2111 : min(_1938, _2111));
        float _2409 = isnan(_2406) ? _2408 : (isnan(_2408) ? _2406 : min(_2408, _2406));
        float _2413 = (_2409 * _1904) + _1893;
        float _2414 = (_2409 * _1907) + _1897;
        float _2415 = (_2409 * _1910) + _1901;
        float _2416 = _2409 * 9.9999997473787516355514526367188e-05;
        float _2418 = (-1.0) - _2416;
        float _2420 = _2416 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2415 > _2420) || ((_2415 < _2418) || ((_2414 > _2420) || ((_2414 < _2418) || ((_2413 < _2418) || (_2413 > _2420))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2560 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2415, cbModelParam._m0[9u].z, fma(_2414, cbModelParam._m0[9u].y, _2413 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2415, cbModelParam._m0[10u].z, fma(_2414, cbModelParam._m0[10u].y, _2413 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2415, cbModelParam._m0[11u].z, fma(_2414, cbModelParam._m0[11u].y, _2413 * cbModelParam._m0[11u].x))), _1846);
            frontier_phi_16_38_ladder = _2560.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2560.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2560.x * cbModelParam._m0[1u].y;
        }
        _1926 = frontier_phi_16_38_ladder_2;
        _1928 = frontier_phi_16_38_ladder_1;
        _1930 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1914 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1002, _1003, _1004), _1846);
        _1926 = _1914.x * cbModelParam._m0[1u].y;
        _1928 = _1914.y * cbModelParam._m0[1u].y;
        _1930 = _1914.z * cbModelParam._m0[1u].y;
    }
    float _1934 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _819);
    float _1935 = isnan(_1934) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1934 : min(cbModelParam._m0[25u].w, _1934));
    float _2026;
    float _2028;
    float _2030;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1990 = fma(_1066, cbModelParam._m0[21u].z, fma(_1062, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1058)) + cbModelParam._m0[21u].w;
        float _1994 = fma(_1066, cbModelParam._m0[22u].z, fma(_1062, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1058)) + cbModelParam._m0[22u].w;
        float _1998 = fma(_1066, cbModelParam._m0[23u].z, fma(_1062, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1058)) + cbModelParam._m0[23u].w;
        float _2001 = fma(_1004, cbModelParam._m0[21u].z, fma(_1003, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1002));
        float _2004 = fma(_1004, cbModelParam._m0[22u].z, fma(_1003, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1002));
        float _2007 = fma(_1004, cbModelParam._m0[23u].z, fma(_1003, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1002));
        float _2116;
        if (_2001 > 0.0)
        {
            _2116 = abs((1.0 - _1990) / _2001);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2001 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1990 + 1.0) / _2001);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2116 = frontier_phi_28_24_ladder;
        }
        float _2433;
        if (_2004 > 0.0)
        {
            _2433 = abs((1.0 - _1994) / _2004);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2004 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1994 + 1.0) / _2004);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2433 = frontier_phi_40_35_ladder;
        }
        float _2771;
        if (_2007 > 0.0)
        {
            _2771 = abs((1.0 - _1998) / _2007);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_2007 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1998 + 1.0) / _2007);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2771 = frontier_phi_50_47_ladder;
        }
        float _2773 = isnan(_2433) ? _2116 : (isnan(_2116) ? _2433 : min(_2116, _2433));
        float _2774 = isnan(_2771) ? _2773 : (isnan(_2773) ? _2771 : min(_2773, _2771));
        float _2778 = (_2774 * _2001) + _1990;
        float _2779 = (_2774 * _2004) + _1994;
        float _2780 = (_2774 * _2007) + _1998;
        float _2781 = _2774 * 9.9999997473787516355514526367188e-05;
        float _2782 = (-1.0) - _2781;
        float _2784 = _2781 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2780 > _2784) || ((_2780 < _2782) || ((_2779 > _2784) || ((_2779 < _2782) || ((_2778 < _2782) || (_2778 > _2784))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2902 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2780, cbModelParam._m0[17u].z, fma(_2779, cbModelParam._m0[17u].y, _2778 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2780, cbModelParam._m0[18u].z, fma(_2779, cbModelParam._m0[18u].y, _2778 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2780, cbModelParam._m0[19u].z, fma(_2779, cbModelParam._m0[19u].y, _2778 * cbModelParam._m0[19u].x))), _1935);
            frontier_phi_25_50_ladder = _2902.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2902.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2902.x * cbModelParam._m0[1u].z;
        }
        _2026 = frontier_phi_25_50_ladder_2;
        _2028 = frontier_phi_25_50_ladder_1;
        _2030 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _2010 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1002, _1003, _1004), _1935);
        _2026 = _2010.x * cbModelParam._m0[1u].z;
        _2028 = _2010.y * cbModelParam._m0[1u].z;
        _2030 = _2010.z * cbModelParam._m0[1u].z;
    }
    float _2043 = (((_1029 * _979) + _1030) * _994) * ((cbModelParam._m0[1u].w * (_2026 - _1926)) + _1926);
    float _2045 = (((_1029 * _981) + _1030) * _994) * ((cbModelParam._m0[1u].w * (_2028 - _1928)) + _1928);
    float _2047 = (((_1029 * _982) + _1030) * _994) * ((cbModelParam._m0[1u].w * (_2030 - _1930)) + _1930);
    float _2050 = fma(_2047, cbSceneParam._m0[89u].z, fma(_2045, cbSceneParam._m0[89u].y, _2043 * cbSceneParam._m0[89u].x));
    float _2053 = fma(_2047, cbSceneParam._m0[90u].z, fma(_2045, cbSceneParam._m0[90u].y, _2043 * cbSceneParam._m0[90u].x));
    float _2056 = fma(_2047, cbSceneParam._m0[91u].z, fma(_2045, cbSceneParam._m0[91u].y, _2043 * cbSceneParam._m0[91u].x));
    float _2090 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2094 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2098 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2102 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2103 = _2090 / _2102;
    float _2104 = _2094 / _2102;
    float _2105 = _2098 / _2102;
    float _2252;
    float _2253;
    float _2254;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2132 = ((uint(_2105 > cbSceneParam._m0[59u].y) + uint(_2105 > cbSceneParam._m0[59u].x)) + uint(_2105 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2133 = _2132 + 43u;
        uint _2141 = _2132 + 44u;
        uint _2149 = _2132 + 45u;
        uint _2157 = _2132 + 46u;
        float _2168 = fma(_2102, cbSceneParam._m0[_2133].w, fma(_2098, cbSceneParam._m0[_2133].z, fma(_2094, cbSceneParam._m0[_2133].y, _2090 * cbSceneParam._m0[_2133].x)));
        float _2172 = fma(_2102, cbSceneParam._m0[_2141].w, fma(_2098, cbSceneParam._m0[_2141].z, fma(_2094, cbSceneParam._m0[_2141].y, _2090 * cbSceneParam._m0[_2141].x)));
        float _2180 = fma(_2102, cbSceneParam._m0[_2157].w, fma(_2098, cbSceneParam._m0[_2157].z, fma(_2094, cbSceneParam._m0[_2157].y, _2090 * cbSceneParam._m0[_2157].x)));
        float _2185 = cbSceneParam._m0[33u].z * _2180;
        float _2187 = cbSceneParam._m0[33u].w * _2180;
        float _2190 = fma(_2102, cbSceneParam._m0[_2149].w, fma(_2098, cbSceneParam._m0[_2149].z, fma(_2094, cbSceneParam._m0[_2149].y, _2090 * cbSceneParam._m0[_2149].x))) / _2180;
        float _2238 = (cbSceneParam._m0[33u].x - sqrt(((_2104 * _2104) + (_2103 * _2103)) + (_2105 * _2105))) * cbSceneParam._m0[33u].y;
        float _4608 = isnan(0.0) ? _2238 : (isnan(_2238) ? 0.0 : max(_2238, 0.0));
        float _2245 = (isnan(1.0) ? _4608 : (isnan(_4608) ? 1.0 : min(_4608, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2185 + _2168) / _2180, (_2187 + _2172) / _2180), _2190), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2187 + _2168) / _2180, (_2172 - _2185) / _2180), _2190), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2168 - _2185) / _2180, (_2172 - _2187) / _2180), _2190), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2168 - _2187) / _2180, (_2185 + _2172) / _2180), _2190), 0.0)).x), vec4(0.25)));
        _2252 = 1.0 - (_2245 * cbSceneParam._m0[34u].x);
        _2253 = 1.0 - (_2245 * cbSceneParam._m0[34u].y);
        _2254 = 1.0 - (_2245 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2252 = 1.0;
        _2253 = 1.0;
        _2254 = 1.0;
    }
    float _2318;
    float _2320;
    float _2322;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2306 = fma(_2102, cbSceneParam._m0[63u].w, fma(_2098, cbSceneParam._m0[63u].z, fma(_2094, cbSceneParam._m0[63u].y, _2090 * cbSceneParam._m0[63u].x)));
        float _2307 = fma(_2102, cbSceneParam._m0[60u].w, fma(_2098, cbSceneParam._m0[60u].z, fma(_2094, cbSceneParam._m0[60u].y, _2090 * cbSceneParam._m0[60u].x))) / _2306;
        float _2308 = fma(_2102, cbSceneParam._m0[61u].w, fma(_2098, cbSceneParam._m0[61u].z, fma(_2094, cbSceneParam._m0[61u].y, _2090 * cbSceneParam._m0[61u].x))) / _2306;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2307 >= cbSceneParam._m0[64u].x) && (_2308 >= cbSceneParam._m0[64u].y)) && (_2307 <= cbSceneParam._m0[64u].z)) && (_2308 <= cbSceneParam._m0[64u].w))
        {
            float _2446 = fma(_2102, cbSceneParam._m0[62u].w, fma(_2098, cbSceneParam._m0[62u].z, fma(_2094, cbSceneParam._m0[62u].y, _2090 * cbSceneParam._m0[62u].x))) / _2306;
            float _2450 = isnan(cbSceneParam._m0[41u].w) ? _2446 : (isnan(_2446) ? cbSceneParam._m0[41u].w : max(_2446, cbSceneParam._m0[41u].w));
            float _2493 = (cbSceneParam._m0[33u].x - sqrt(((_2104 * _2104) + (_2103 * _2103)) + (_2105 * _2105))) * cbSceneParam._m0[33u].y;
            float _4624 = isnan(0.0) ? _2493 : (isnan(_2493) ? 0.0 : max(_2493, 0.0));
            float _2500 = (isnan(1.0) ? _4624 : (isnan(_4624) ? 1.0 : min(_4624, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2307, cbSceneParam._m0[33u].w + _2308), _2450), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2307, _2308 - cbSceneParam._m0[33u].z), _2450), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2307 - cbSceneParam._m0[33u].z, _2308 - cbSceneParam._m0[33u].w), _2450), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2307 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2308), _2450), 0.0)).x), vec4(0.25)));
            float _2504 = 1.0 - (_2500 * cbSceneParam._m0[34u].x);
            float _2505 = 1.0 - (_2500 * cbSceneParam._m0[34u].y);
            float _2506 = 1.0 - (_2500 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2506) ? _2254 : (isnan(_2254) ? _2506 : min(_2254, _2506));
            frontier_phi_37_36_ladder_1 = isnan(_2505) ? _2253 : (isnan(_2253) ? _2505 : min(_2253, _2505));
            frontier_phi_37_36_ladder_2 = isnan(_2504) ? _2252 : (isnan(_2252) ? _2504 : min(_2252, _2504));
        }
        else
        {
            frontier_phi_37_36_ladder = _2254;
            frontier_phi_37_36_ladder_1 = _2253;
            frontier_phi_37_36_ladder_2 = _2252;
        }
        _2318 = frontier_phi_37_36_ladder_2;
        _2320 = frontier_phi_37_36_ladder_1;
        _2322 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2318 = _2252;
        _2320 = _2253;
        _2322 = _2254;
    }
    uvec4 _2327 = floatBitsToUint(cbInstanceData._m0[_954 + 5u]);
    uint _2329 = _2327.x * 14u;
    uint _2330 = _2329 + 13u;
    float _2337 = _994 + (-1.0);
    float _2342 = (cbLight._m0[_2330].x * _2337) + 1.0;
    float _2343 = (cbLight._m0[_2330].y * _2337) + 1.0;
    float _2344 = (cbLight._m0[_2330].z * _2337) + 1.0;
    float _2345 = (cbLight._m0[_2330].w * _2337) + 1.0;
    uint _2346 = _2329 + 5u;
    float _2352 = isnan(1.0) ? _2343 : (isnan(_2343) ? 1.0 : min(_2343, 1.0));
    uint _2356 = _2329 + 4u;
    float _2365 = isnan(1.0) ? _2342 : (isnan(_2342) ? 1.0 : min(_2342, 1.0));
    uint _2369 = _2329 | 1u;
    float _2380 = dot(vec3(cbLight._m0[_2329].xyz), vec3(_816, _817, _818));
    float _2383 = dot(vec3(cbLight._m0[_2369].xyz), vec3(_816, _817, _818));
    float _4660 = isnan(0.0) ? _2380 : (isnan(_2380) ? 0.0 : max(_2380, 0.0));
    float _4671 = isnan(0.0) ? _2383 : (isnan(_2383) ? 0.0 : max(_2383, 0.0));
    float _2388 = (isnan(1.0) ? _4660 : (isnan(_4660) ? 1.0 : min(_4660, 1.0))) * 0.3183098733425140380859375;
    float _2390 = (isnan(1.0) ? _4671 : (isnan(_4671) ? 1.0 : min(_4671, 1.0))) * 0.3183098733425140380859375;
    float _2397 = ((cbLight._m0[_2346].x * _2352) * _2390) + (((cbLight._m0[_2356].x * _2318) * _2365) * _2388);
    float _2398 = ((_2352 * cbLight._m0[_2346].y) * _2390) + (((cbLight._m0[_2356].y * _2320) * _2365) * _2388);
    float _2399 = ((_2352 * cbLight._m0[_2346].z) * _2390) + (((cbLight._m0[_2356].z * _2322) * _2365) * _2388);
    uvec4 _2403 = floatBitsToUint(cbLight._m0[_2329 + 12u]);
    bool _2405 = _2403.x == 0u;
    float _2507;
    float _2509;
    float _2511;
    if (_2405)
    {
        _2507 = _2397;
        _2509 = _2398;
        _2511 = _2399;
    }
    else
    {
        uint _2515 = _2329 + 6u;
        float _2531 = (dot(vec3(cbLight._m0[_2329 + 2u].xyz), vec3(_816, _817, _818)) * 0.5) + 0.5;
        float _2532 = _2531 * _2531;
        float _4682 = isnan(0.0) ? _2532 : (isnan(_2532) ? 0.0 : max(_2532, 0.0));
        float _2533 = isnan(1.0) ? _4682 : (isnan(_4682) ? 1.0 : min(_4682, 1.0));
        float _2534 = isnan(1.0) ? _2344 : (isnan(_2344) ? 1.0 : min(_2344, 1.0));
        _2507 = (((cbLight._m0[_2515].x * 0.3183098733425140380859375) * _2533) * _2534) + _2397;
        _2509 = (((cbLight._m0[_2515].y * 0.3183098733425140380859375) * _2533) * _2534) + _2398;
        _2511 = (((cbLight._m0[_2515].z * 0.3183098733425140380859375) * _2533) * _2534) + _2399;
    }
    bool _2514 = _2403.y == 0u;
    float _2569;
    float _2571;
    float _2573;
    if (_2514)
    {
        _2569 = _2507;
        _2571 = _2509;
        _2573 = _2511;
    }
    else
    {
        uint _2742 = _2329 + 7u;
        float _2758 = (dot(vec3(cbLight._m0[_2329 + 3u].xyz), vec3(_816, _817, _818)) * 0.5) + 0.5;
        float _2759 = _2758 * _2758;
        float _4698 = isnan(0.0) ? _2759 : (isnan(_2759) ? 0.0 : max(_2759, 0.0));
        float _2760 = isnan(1.0) ? _4698 : (isnan(_4698) ? 1.0 : min(_4698, 1.0));
        float _2761 = isnan(1.0) ? _2345 : (isnan(_2345) ? 1.0 : min(_2345, 1.0));
        _2569 = (((cbLight._m0[_2742].x * 0.3183098733425140380859375) * _2760) * _2761) + _2507;
        _2571 = (((cbLight._m0[_2742].y * 0.3183098733425140380859375) * _2760) * _2761) + _2509;
        _2573 = (((cbLight._m0[_2742].z * 0.3183098733425140380859375) * _2760) * _2761) + _2511;
    }
    uint _2576 = _2329 + 8u;
    float _2589 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2329].w)) * _819) * 0.949999988079071044921875);
    float _2590 = _2589 * _2589;
    float _2591 = cbLight._m0[_2329].x + _896;
    float _2592 = cbLight._m0[_2329].y + _897;
    float _2593 = cbLight._m0[_2329].z + _898;
    float _2597 = inversesqrt(dot(vec3(_2591, _2592, _2593), vec3(_2591, _2592, _2593)));
    float _2598 = _2597 * _2591;
    float _2599 = _2597 * _2592;
    float _2600 = _2597 * _2593;
    float _2601 = dot(vec3(_816, _817, _818), vec3(cbLight._m0[_2329].xyz));
    float _4714 = isnan(0.0) ? _2601 : (isnan(_2601) ? 0.0 : max(_2601, 0.0));
    float _2604 = isnan(1.0) ? _4714 : (isnan(_4714) ? 1.0 : min(_4714, 1.0));
    float _4725 = isnan(0.0) ? _995 : (isnan(_995) ? 0.0 : max(_995, 0.0));
    float _2605 = isnan(1.0) ? _4725 : (isnan(_4725) ? 1.0 : min(_4725, 1.0));
    float _2606 = dot(vec3(_816, _817, _818), vec3(_2598, _2599, _2600));
    float _4736 = isnan(0.0) ? _2606 : (isnan(_2606) ? 0.0 : max(_2606, 0.0));
    float _2609 = isnan(1.0) ? _4736 : (isnan(_4736) ? 1.0 : min(_4736, 1.0));
    float _2610 = dot(vec3(cbLight._m0[_2329].xyz), vec3(_2598, _2599, _2600));
    float _4747 = isnan(0.0) ? _2610 : (isnan(_2610) ? 0.0 : max(_2610, 0.0));
    float _2614 = _2590 * _2590;
    float _2618 = ((_2609 * _2609) * (_2614 + (-1.0))) + 1.0;
    float _2626 = exp2(log2(1.0 - (isnan(1.0) ? _4747 : (isnan(_4747) ? 1.0 : min(_4747, 1.0)))) * 5.0);
    float _2627 = 0.959999978542327880859375 - _976;
    float _2629 = 0.959999978542327880859375 - _977;
    float _2630 = 0.959999978542327880859375 - _978;
    float _2637 = 1.0 - _2590;
    float _2648 = (0.5 / (((_2605 * ((_2604 * _2637) + _2590)) + 9.9999999392252902907785028219223e-09) + (((_2605 * _2637) + _2590) * _2604))) * _2604;
    float _4758 = isnan(0.0) ? _2648 : (isnan(_2648) ? 0.0 : max(_2648, 0.0));
    float _2650 = (isnan(1.0) ? _4758 : (isnan(_4758) ? 1.0 : min(_4758, 1.0))) * (_2614 / ((_2618 * _2618) * 3.141590118408203125));
    uint _2664 = _2329 + 9u;
    float _2675 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2369].w)) * _819) * 0.949999988079071044921875);
    float _2676 = _2675 * _2675;
    float _2677 = cbLight._m0[_2369].x + _896;
    float _2678 = cbLight._m0[_2369].y + _897;
    float _2679 = cbLight._m0[_2369].z + _898;
    float _2683 = inversesqrt(dot(vec3(_2677, _2678, _2679), vec3(_2677, _2678, _2679)));
    float _2684 = _2683 * _2677;
    float _2685 = _2683 * _2678;
    float _2686 = _2683 * _2679;
    float _2687 = dot(vec3(_816, _817, _818), vec3(cbLight._m0[_2369].xyz));
    float _4769 = isnan(0.0) ? _2687 : (isnan(_2687) ? 0.0 : max(_2687, 0.0));
    float _2690 = isnan(1.0) ? _4769 : (isnan(_4769) ? 1.0 : min(_4769, 1.0));
    float _2691 = dot(vec3(_816, _817, _818), vec3(_2684, _2685, _2686));
    float _4780 = isnan(0.0) ? _2691 : (isnan(_2691) ? 0.0 : max(_2691, 0.0));
    float _2694 = isnan(1.0) ? _4780 : (isnan(_4780) ? 1.0 : min(_4780, 1.0));
    float _2695 = dot(vec3(cbLight._m0[_2369].xyz), vec3(_2684, _2685, _2686));
    float _4791 = isnan(0.0) ? _2695 : (isnan(_2695) ? 0.0 : max(_2695, 0.0));
    float _2699 = _2676 * _2676;
    float _2703 = ((_2694 * _2694) * (_2699 + (-1.0))) + 1.0;
    float _2710 = exp2(log2(1.0 - (isnan(1.0) ? _4791 : (isnan(_4791) ? 1.0 : min(_4791, 1.0)))) * 5.0);
    float _2717 = 1.0 - _2676;
    float _2727 = (0.5 / (((_2605 * ((_2690 * _2717) + _2676)) + 9.9999999392252902907785028219223e-09) + (((_2605 * _2717) + _2676) * _2690))) * _2690;
    float _4802 = isnan(0.0) ? _2727 : (isnan(_2727) ? 0.0 : max(_2727, 0.0));
    float _2729 = (isnan(1.0) ? _4802 : (isnan(_4802) ? 1.0 : min(_4802, 1.0))) * (_2699 / ((_2703 * _2703) * 3.141590118408203125));
    float _2739 = (((((_2710 * _2627) + _979) * cbLight._m0[_2664].x) * _2729) * _2352) + ((((cbLight._m0[_2576].x * _2318) * ((_2626 * _2627) + _979)) * _2650) * _2365);
    float _2740 = (((((_2710 * _2629) + _981) * cbLight._m0[_2664].y) * _2729) * _2352) + ((((cbLight._m0[_2576].y * _2320) * ((_2626 * _2629) + _981)) * _2650) * _2365);
    float _2741 = (((((_2710 * _2630) + _982) * cbLight._m0[_2664].z) * _2729) * _2352) + ((((cbLight._m0[_2576].z * _2322) * ((_2626 * _2630) + _982)) * _2650) * _2365);
    float _2797;
    float _2799;
    float _2801;
    if (_2405)
    {
        _2797 = _2739;
        _2799 = _2740;
        _2801 = _2741;
    }
    else
    {
        uint _2803 = _2329 + 2u;
        uint _2807 = _2329 + 10u;
        float _2821 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2803].w)) * _819) * 0.949999988079071044921875);
        float _2822 = _2821 * _2821;
        float _2823 = cbLight._m0[_2803].x + _896;
        float _2824 = cbLight._m0[_2803].y + _897;
        float _2825 = cbLight._m0[_2803].z + _898;
        float _2829 = inversesqrt(dot(vec3(_2823, _2824, _2825), vec3(_2823, _2824, _2825)));
        float _2830 = _2829 * _2823;
        float _2831 = _2829 * _2824;
        float _2832 = _2829 * _2825;
        float _2833 = dot(vec3(_816, _817, _818), vec3(cbLight._m0[_2803].xyz));
        float _4813 = isnan(0.0) ? _2833 : (isnan(_2833) ? 0.0 : max(_2833, 0.0));
        float _2836 = isnan(1.0) ? _4813 : (isnan(_4813) ? 1.0 : min(_4813, 1.0));
        float _2837 = dot(vec3(_816, _817, _818), vec3(_2830, _2831, _2832));
        float _4824 = isnan(0.0) ? _2837 : (isnan(_2837) ? 0.0 : max(_2837, 0.0));
        float _2840 = isnan(1.0) ? _4824 : (isnan(_4824) ? 1.0 : min(_4824, 1.0));
        float _2841 = dot(vec3(cbLight._m0[_2803].xyz), vec3(_2830, _2831, _2832));
        float _4835 = isnan(0.0) ? _2841 : (isnan(_2841) ? 0.0 : max(_2841, 0.0));
        float _2845 = _2822 * _2822;
        float _2849 = ((_2840 * _2840) * (_2845 + (-1.0))) + 1.0;
        float _2856 = exp2(log2(1.0 - (isnan(1.0) ? _4835 : (isnan(_4835) ? 1.0 : min(_4835, 1.0)))) * 5.0);
        float _2863 = 1.0 - _2822;
        float _2873 = (0.5 / (((_2605 * ((_2836 * _2863) + _2822)) + 9.9999999392252902907785028219223e-09) + (((_2605 * _2863) + _2822) * _2836))) * _2836;
        float _4846 = isnan(0.0) ? _2873 : (isnan(_2873) ? 0.0 : max(_2873, 0.0));
        float _2875 = (isnan(1.0) ? _4846 : (isnan(_4846) ? 1.0 : min(_4846, 1.0))) * (_2845 / ((_2849 * _2849) * 3.141590118408203125));
        float _2876 = isnan(1.0) ? _2344 : (isnan(_2344) ? 1.0 : min(_2344, 1.0));
        _2797 = (((((_2856 * _2627) + _979) * cbLight._m0[_2807].x) * _2875) * _2876) + _2739;
        _2799 = (((((_2856 * _2629) + _981) * cbLight._m0[_2807].y) * _2875) * _2876) + _2740;
        _2801 = (((((_2856 * _2630) + _982) * cbLight._m0[_2807].z) * _2875) * _2876) + _2741;
    }
    float _2907;
    float _2909;
    float _2911;
    if (_2514)
    {
        _2907 = _2797;
        _2909 = _2799;
        _2911 = _2801;
    }
    else
    {
        uint _2918 = _2329 + 3u;
        uint _2922 = _2329 + 11u;
        float _2936 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2918].w)) * _819) * 0.949999988079071044921875);
        float _2937 = _2936 * _2936;
        float _2938 = cbLight._m0[_2918].x + _896;
        float _2939 = cbLight._m0[_2918].y + _897;
        float _2940 = cbLight._m0[_2918].z + _898;
        float _2944 = inversesqrt(dot(vec3(_2938, _2939, _2940), vec3(_2938, _2939, _2940)));
        float _2945 = _2944 * _2938;
        float _2946 = _2944 * _2939;
        float _2947 = _2944 * _2940;
        float _2948 = dot(vec3(_816, _817, _818), vec3(cbLight._m0[_2918].xyz));
        float _4862 = isnan(0.0) ? _2948 : (isnan(_2948) ? 0.0 : max(_2948, 0.0));
        float _2951 = isnan(1.0) ? _4862 : (isnan(_4862) ? 1.0 : min(_4862, 1.0));
        float _2952 = dot(vec3(_816, _817, _818), vec3(_2945, _2946, _2947));
        float _4873 = isnan(0.0) ? _2952 : (isnan(_2952) ? 0.0 : max(_2952, 0.0));
        float _2955 = isnan(1.0) ? _4873 : (isnan(_4873) ? 1.0 : min(_4873, 1.0));
        float _2956 = dot(vec3(cbLight._m0[_2918].xyz), vec3(_2945, _2946, _2947));
        float _4884 = isnan(0.0) ? _2956 : (isnan(_2956) ? 0.0 : max(_2956, 0.0));
        float _2960 = _2937 * _2937;
        float _2964 = ((_2955 * _2955) * (_2960 + (-1.0))) + 1.0;
        float _2971 = exp2(log2(1.0 - (isnan(1.0) ? _4884 : (isnan(_4884) ? 1.0 : min(_4884, 1.0)))) * 5.0);
        float _2978 = 1.0 - _2937;
        float _2988 = (0.5 / (((_2605 * ((_2951 * _2978) + _2937)) + 9.9999999392252902907785028219223e-09) + (((_2605 * _2978) + _2937) * _2951))) * _2951;
        float _4895 = isnan(0.0) ? _2988 : (isnan(_2988) ? 0.0 : max(_2988, 0.0));
        float _2990 = (isnan(1.0) ? _4895 : (isnan(_4895) ? 1.0 : min(_4895, 1.0))) * (_2960 / ((_2964 * _2964) * 3.141590118408203125));
        float _2991 = isnan(1.0) ? _2345 : (isnan(_2345) ? 1.0 : min(_2345, 1.0));
        _2907 = (((((_2971 * _2627) + _979) * cbLight._m0[_2922].x) * _2990) * _2991) + _2797;
        _2909 = (((((_2971 * _2629) + _981) * cbLight._m0[_2922].y) * _2990) * _2991) + _2799;
        _2911 = (((((_2971 * _2630) + _982) * cbLight._m0[_2922].z) * _2990) * _2991) + _2801;
    }
    float _3057;
    float _3059;
    float _3061;
    float _3063;
    float _3065;
    float _3067;
    if (_2327.y == 0u)
    {
        uvec4 _3012 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3013 = _3012.x;
        uint _3024 = uint((float(_3012.y) * floor(float(uint(cbSceneParam._m0[85u].y * _917) / _3013))) + floor(float(uint(cbSceneParam._m0[85u].x * _916) / _3013)));
        float _3034 = (log2(_2105 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3035 = isnan(0.0) ? _3034 : (isnan(_3034) ? 0.0 : max(_3034, 0.0));
        uint _3038 = uint(isnan(14.0) ? _3035 : (isnan(_3035) ? 14.0 : min(_3035, 14.0)));
        uvec4 _3043 = texelFetch(g_lightClusterGridBuffer, int(((_3038 << 2u) + (_3024 << 6u)) >> 2u));
        uint _3044 = _3043.x;
        uint _3045 = _3012.z;
        float _3124;
        float _3126;
        float _3128;
        float _3130;
        float _3132;
        float _3134;
        if (((((1u << ((_3045 >> 4u) & 15u)) + 4294967295u) & _3044) == 0u) || ((_3045 & 240u) == 0u))
        {
            _3124 = 0.0;
            _3126 = 0.0;
            _3128 = 0.0;
            _3130 = 0.0;
            _3132 = 0.0;
            _3134 = 0.0;
        }
        else
        {
            float _3125;
            float _3127;
            float _3129;
            float _3131;
            float _3133;
            float _3135;
            float _3276 = 0.0;
            float _3277 = 0.0;
            float _3278 = 0.0;
            float _3279 = 0.0;
            float _3280 = 0.0;
            float _3281 = 0.0;
            uint _3282 = 0u;
            uint _3291;
            bool _3292;
            for (;;)
            {
                _3291 = texelFetch(g_lightClassification, int((((_3038 << 5u) + (_3024 << 9u)) + (_3282 << 2u)) >> 2u)).x;
                _3292 = _3291 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3292)
                {
                    frontier_phi_71_pred = _3281;
                    frontier_phi_71_pred_1 = _3280;
                    frontier_phi_71_pred_2 = _3279;
                    frontier_phi_71_pred_3 = _3278;
                    frontier_phi_71_pred_4 = _3277;
                    frontier_phi_71_pred_5 = _3276;
                }
                else
                {
                    float _3421;
                    float _3422;
                    float _3423;
                    float _3424;
                    float _3425;
                    float _3426;
                    uint _3427;
                    _3421 = _3276;
                    _3422 = _3277;
                    _3423 = _3278;
                    _3424 = _3279;
                    _3425 = _3280;
                    _3426 = _3281;
                    _3427 = _3291;
                    float _3348;
                    float _3349;
                    float _3350;
                    float _3351;
                    float _3352;
                    float _3353;
                    for (;;)
                    {
                        uint _3431 = uint(findLSB(_3427)) + (_3282 << 5u);
                        uint _3428 = (_3427 + 4294967295u) & _3427;
                        uint _3433 = _3431 * 48u;
                        vec4 _3447 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3433)).x, texelFetch(g_PointLightRenderingBuffer, int(_3433 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3433 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3433 + 3u)).x));
                        uint _3453 = (_3431 * 48u) + 4u;
                        vec4 _3466 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3453)).x, texelFetch(g_PointLightRenderingBuffer, int(_3453 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3453 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3453 + 3u)).x));
                        uint _3472 = (_3431 * 48u) + 8u;
                        vec3 _3483 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3472)).x, texelFetch(g_PointLightRenderingBuffer, int(_3472 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3472 + 2u)).x));
                        float _3487 = _3447.x - _2103;
                        float _3488 = _3447.y - _2104;
                        float _3489 = _3447.z - _2105;
                        float _3490 = dot(vec3(_3487, _3488, _3489), vec3(_3487, _3488, _3489));
                        float _3493 = inversesqrt(_3490);
                        float _3494 = _3493 * _3487;
                        float _3495 = _3493 * _3488;
                        float _3496 = _3493 * _3489;
                        float _3497 = dot(vec3(_935, _938, _941), vec3(_3494, _3495, _3496));
                        float _3502 = 1.0 - (_3490 * _3447.w);
                        float _4921 = isnan(0.0) ? _3502 : (isnan(_3502) ? 0.0 : max(_3502, 0.0));
                        float _3503 = isnan(1.0) ? _4921 : (isnan(_4921) ? 1.0 : min(_4921, 1.0));
                        float _3504 = sqrt(_3490) * _3466.w;
                        float _3507 = 1.39999997615814208984375 / (_3504 + 1.39999997615814208984375);
                        float _3508 = _3507 * _3507;
                        float _3511 = ((1.0 - _3508) * _3497) + _3508;
                        float _3514 = _3504 * _3504;
                        float _3518 = ((isnan(0.0) ? _3511 : (isnan(_3511) ? 0.0 : max(_3511, 0.0))) * _3503) / ((_3514 * 0.699999988079071044921875) + 1.0);
                        float _3522 = (-0.0) - _2103;
                        float _3523 = (-0.0) - _2104;
                        float _3524 = (-0.0) - _2105;
                        float _3528 = inversesqrt(dot(vec3(_3522, _3523, _3524), vec3(_3522, _3523, _3524)));
                        float _3529 = _3528 * _3522;
                        float _3530 = _3528 * _3523;
                        float _3531 = _3528 * _3524;
                        float _3538 = exp2(log2(1.0 / ((_3514 * 3.5) + 5.0)) * 0.25);
                        float _3539 = 1.0 - _1010;
                        float _3546 = sqrt(1.0 - ((1.0 - (_3539 * _3539)) * (1.0 - (_3538 * _3538))));
                        float _3547 = _3546 * _3546;
                        float _3548 = _3547 * _3547;
                        float _3549 = _3529 + _3494;
                        float _3550 = _3530 + _3495;
                        float _3551 = _3531 + _3496;
                        float _3555 = inversesqrt(dot(vec3(_3549, _3550, _3551), vec3(_3549, _3550, _3551)));
                        float _3559 = dot(vec3(_935, _938, _941), vec3(_3529, _3530, _3531));
                        float _4937 = isnan(0.0) ? _3559 : (isnan(_3559) ? 0.0 : max(_3559, 0.0));
                        float _3562 = isnan(1.0) ? _4937 : (isnan(_4937) ? 1.0 : min(_4937, 1.0));
                        float _3563 = dot(vec3(_935, _938, _941), vec3(_3555 * _3549, _3555 * _3550, _3555 * _3551));
                        float _4948 = isnan(0.0) ? _3563 : (isnan(_3563) ? 0.0 : max(_3563, 0.0));
                        float _3566 = isnan(1.0) ? _4948 : (isnan(_4948) ? 1.0 : min(_4948, 1.0));
                        float _3570 = ((_3566 * _3566) * (_3548 + (-1.0))) + 1.0;
                        float _3571 = _3507 * _3547;
                        float _3572 = _3571 * _3571;
                        float _3575 = ((1.0 - _3572) * _3497) + _3572;
                        float _4959 = isnan(0.0) ? _3575 : (isnan(_3575) ? 0.0 : max(_3575, 0.0));
                        float _3576 = isnan(1.0) ? _4959 : (isnan(_4959) ? 1.0 : min(_4959, 1.0));
                        float _3577 = 1.0 - _3547;
                        float _3587 = (0.5 / (((_3576 * ((_3562 * _3577) + _3547)) + 9.9999999392252902907785028219223e-09) + (((_3576 * _3577) + _3547) * _3562))) * _3576;
                        float _4970 = isnan(0.0) ? _3587 : (isnan(_3587) ? 0.0 : max(_3587, 0.0));
                        float _3598 = (((_3548 * 3.1415927410125732421875) * (isnan(1.0) ? _4970 : (isnan(_4970) ? 1.0 : min(_4970, 1.0)))) / ((_3570 * _3570) * ((_3514 * 2.1991131305694580078125) + 3.141590118408203125))) * _3503;
                        _3351 = (_3518 * _3466.x) + _3424;
                        _3352 = (_3518 * _3466.y) + _3425;
                        _3353 = (_3518 * _3466.z) + _3426;
                        _3348 = (_3598 * _3483.x) + _3421;
                        _3349 = (_3598 * _3483.y) + _3422;
                        _3350 = (_3598 * _3483.z) + _3423;
                        if (_3428 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3421 = _3348;
                            _3422 = _3349;
                            _3423 = _3350;
                            _3424 = _3351;
                            _3425 = _3352;
                            _3426 = _3353;
                            _3427 = _3428;
                        }
                    }
                    frontier_phi_71_pred = _3353;
                    frontier_phi_71_pred_1 = _3352;
                    frontier_phi_71_pred_2 = _3351;
                    frontier_phi_71_pred_3 = _3350;
                    frontier_phi_71_pred_4 = _3349;
                    frontier_phi_71_pred_5 = _3348;
                }
                _3135 = frontier_phi_71_pred;
                _3133 = frontier_phi_71_pred_1;
                _3131 = frontier_phi_71_pred_2;
                _3129 = frontier_phi_71_pred_3;
                _3127 = frontier_phi_71_pred_4;
                _3125 = frontier_phi_71_pred_5;
                uint _3283 = _3282 + 1u;
                if (_3283 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3276 = _3125;
                    _3277 = _3127;
                    _3278 = _3129;
                    _3279 = _3131;
                    _3280 = _3133;
                    _3281 = _3135;
                    _3282 = _3283;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3124 = _3125;
            _3126 = _3127;
            _3128 = _3129;
            _3130 = _3131;
            _3132 = _3133;
            _3134 = _3135;
        }
        uvec4 _3138 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3139 = _3138.z;
        uint _3141 = (_3139 >> 8u) & 15u;
        float _3244;
        float _3246;
        float _3248;
        float _3250;
        float _3252;
        float _3254;
        if (((4294967295u << _3141) & _3044) == 0u)
        {
            _3244 = _3124;
            _3246 = _3126;
            _3248 = _3128;
            _3250 = _3130;
            _3252 = _3132;
            _3254 = _3134;
        }
        else
        {
            float _3269 = inversesqrt(dot(vec3(_2103, _2104, _2105), vec3(_2103, _2104, _2105)));
            float _3270 = _3269 * _2103;
            float _3271 = _3269 * _2104;
            float _3272 = _3269 * _2105;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3141 < ((_3139 >> 12u) & 15u))
            {
                float _3245;
                float _3247;
                float _3249;
                float _3251;
                float _3253;
                float _3255;
                float _3404 = _3124;
                float _3405 = _3126;
                float _3406 = _3128;
                float _3407 = _3130;
                float _3408 = _3132;
                float _3409 = _3134;
                uint _3410 = _3141;
                uint _3419;
                bool _3420;
                for (;;)
                {
                    _3419 = texelFetch(g_lightClassification, int((((_3038 << 5u) + (_3024 << 9u)) + (_3410 << 2u)) >> 2u)).x;
                    _3420 = _3419 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3420)
                    {
                        frontier_phi_82_pred = _3409;
                        frontier_phi_82_pred_1 = _3408;
                        frontier_phi_82_pred_2 = _3407;
                        frontier_phi_82_pred_3 = _3406;
                        frontier_phi_82_pred_4 = _3405;
                        frontier_phi_82_pred_5 = _3404;
                    }
                    else
                    {
                        float _3612;
                        float _3613;
                        float _3614;
                        float _3615;
                        float _3616;
                        float _3617;
                        float _3906;
                        float _3907;
                        float _3908;
                        float _3909;
                        float _3910;
                        float _3911;
                        float _3625 = _3404;
                        float _3626 = _3405;
                        float _3627 = _3406;
                        float _3628 = _3407;
                        float _3629 = _3408;
                        float _3630 = _3409;
                        uint _3631 = _3419;
                        uint _3632;
                        vec4 _3657;
                        float _3658;
                        vec4 _3673;
                        vec3 _3685;
                        vec4 _3700;
                        vec4 _3715;
                        float _3762;
                        bool _3763;
                        for (;;)
                        {
                            uint _3642 = ((_3410 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3631));
                            _3632 = (_3631 + 4294967295u) & _3631;
                            uint _3644 = _3642 * 40u;
                            _3657 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3644)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3644 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3644 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3644 + 3u)).x));
                            _3658 = _3657.w;
                            uint _3660 = (_3642 * 40u) + 4u;
                            _3673 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3660)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3660 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3660 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3660 + 3u)).x));
                            uint _3675 = (_3642 * 40u) + 8u;
                            _3685 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3675)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3675 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3675 + 2u)).x));
                            uint _3687 = (_3642 * 40u) + 16u;
                            _3700 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3687)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3687 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3687 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3687 + 3u)).x));
                            uint _3702 = (_3642 * 40u) + 20u;
                            _3715 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3702)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3702 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3702 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3702 + 3u)).x));
                            uint _3718 = (_3642 * 40u) + 24u;
                            vec4 _3731 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3718)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3718 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3718 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3718 + 3u)).x));
                            uint _3737 = (_3642 * 40u) + 28u;
                            vec4 _3750 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3737)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3737 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3737 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3737 + 3u)).x));
                            _3762 = fma(_2105, _3750.z, fma(_2104, _3750.y, _3750.x * _2103)) + _3750.w;
                            _3763 = !((fma(_2105, _3731.z, fma(_2104, _3731.y, _3731.x * _2103)) + _3731.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3763)
                            {
                                float _3790 = _3657.x - _2103;
                                float _3791 = _3657.y - _2104;
                                float _3792 = _3657.z - _2105;
                                float _3793 = dot(vec3(_3790, _3791, _3792), vec3(_3790, _3791, _3792));
                                float _3796 = inversesqrt(_3793);
                                float _3797 = _3796 * _3790;
                                float _3798 = _3796 * _3791;
                                float _3799 = _3796 * _3792;
                                float _3803 = 1.0 - (_3793 / (_3658 * _3658));
                                float _4981 = isnan(0.0) ? _3803 : (isnan(_3803) ? 0.0 : max(_3803, 0.0));
                                float _3804 = isnan(1.0) ? _4981 : (isnan(_4981) ? 1.0 : min(_4981, 1.0));
                                float _3808 = sqrt(_3793) * _3673.w;
                                float _3810 = 1.39999997615814208984375 / (_3808 + 1.39999997615814208984375);
                                float _3811 = _3810 * _3810;
                                float _3814 = ((1.0 - _3811) * dot(vec3(_3797, _3798, _3799), vec3(_935, _938, _941))) + _3811;
                                float _3817 = _3808 * _3808;
                                float _3821 = (fma(_2105, _3700.z, fma(_2104, _3700.y, _3700.x * _2103)) + _3700.w) / _3762;
                                float _3822 = (fma(_2105, _3715.z, fma(_2104, _3715.y, _3715.x * _2103)) + _3715.w) / _3762;
                                float _3826 = 1.0 - dot(vec2(_3821, _3822), vec2(_3821, _3822));
                                float _4997 = isnan(0.0) ? _3826 : (isnan(_3826) ? 0.0 : max(_3826, 0.0));
                                float _3827 = isnan(1.0) ? _4997 : (isnan(_4997) ? 1.0 : min(_4997, 1.0));
                                float _3828 = _3827 * (((isnan(0.0) ? _3814 : (isnan(_3814) ? 0.0 : max(_3814, 0.0))) * _3804) / ((_3817 * 0.699999988079071044921875) + 1.0));
                                float _3840 = exp2(log2(1.0 / ((_3817 * 3.5) + 5.0)) * 0.25);
                                float _3841 = 1.0 - _1010;
                                float _3848 = sqrt(1.0 - ((1.0 - (_3841 * _3841)) * (1.0 - (_3840 * _3840))));
                                float _3849 = _3848 * _3848;
                                float _3850 = _3849 * _3849;
                                float _3851 = _3797 - _3270;
                                float _3852 = _3798 - _3271;
                                float _3853 = _3799 - _3272;
                                float _3857 = inversesqrt(dot(vec3(_3851, _3852, _3853), vec3(_3851, _3852, _3853)));
                                float _3861 = dot(vec3(_935, _938, _941), vec3((-0.0) - _3270, (-0.0) - _3271, (-0.0) - _3272));
                                float _5008 = isnan(0.0) ? _3861 : (isnan(_3861) ? 0.0 : max(_3861, 0.0));
                                float _3864 = isnan(1.0) ? _5008 : (isnan(_5008) ? 1.0 : min(_5008, 1.0));
                                float _3865 = dot(vec3(_935, _938, _941), vec3(_3857 * _3851, _3857 * _3852, _3857 * _3853));
                                float _5019 = isnan(0.0) ? _3865 : (isnan(_3865) ? 0.0 : max(_3865, 0.0));
                                float _3868 = isnan(1.0) ? _5019 : (isnan(_5019) ? 1.0 : min(_5019, 1.0));
                                float _3872 = ((_3868 * _3868) * (_3850 + (-1.0))) + 1.0;
                                float _3873 = _3810 * _3849;
                                float _3874 = _3873 * _3873;
                                float _3880 = ((1.0 - _3874) * dot(vec3(_935, _938, _941), vec3(_3797, _3798, _3799))) + _3874;
                                float _5030 = isnan(0.0) ? _3880 : (isnan(_3880) ? 0.0 : max(_3880, 0.0));
                                float _3881 = isnan(1.0) ? _5030 : (isnan(_5030) ? 1.0 : min(_5030, 1.0));
                                float _3882 = 1.0 - _3849;
                                float _3892 = (0.5 / (((_3881 * ((_3864 * _3882) + _3849)) + 9.9999999392252902907785028219223e-09) + (((_3881 * _3882) + _3849) * _3864))) * _3881;
                                float _5041 = isnan(0.0) ? _3892 : (isnan(_3892) ? 0.0 : max(_3892, 0.0));
                                float _3902 = (_3827 * _3804) * (((_3850 * 3.1415927410125732421875) * (isnan(1.0) ? _5041 : (isnan(_5041) ? 1.0 : min(_5041, 1.0)))) / ((_3872 * _3872) * ((_3817 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3828 * _3673.z;
                                frontier_phi_88_pred_1 = _3828 * _3673.y;
                                frontier_phi_88_pred_2 = _3828 * _3673.x;
                                frontier_phi_88_pred_3 = _3902 * _3685.z;
                                frontier_phi_88_pred_4 = _3902 * _3685.y;
                                frontier_phi_88_pred_5 = _3902 * _3685.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3911 = frontier_phi_88_pred;
                            _3910 = frontier_phi_88_pred_1;
                            _3909 = frontier_phi_88_pred_2;
                            _3908 = frontier_phi_88_pred_3;
                            _3907 = frontier_phi_88_pred_4;
                            _3906 = frontier_phi_88_pred_5;
                            _3615 = _3909 + _3628;
                            _3616 = _3910 + _3629;
                            _3617 = _3911 + _3630;
                            _3612 = _3906 + _3625;
                            _3613 = _3907 + _3626;
                            _3614 = _3908 + _3627;
                            if (_3632 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3625 = _3612;
                                _3626 = _3613;
                                _3627 = _3614;
                                _3628 = _3615;
                                _3629 = _3616;
                                _3630 = _3617;
                                _3631 = _3632;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3617;
                        frontier_phi_82_pred_1 = _3616;
                        frontier_phi_82_pred_2 = _3615;
                        frontier_phi_82_pred_3 = _3614;
                        frontier_phi_82_pred_4 = _3613;
                        frontier_phi_82_pred_5 = _3612;
                    }
                    _3255 = frontier_phi_82_pred;
                    _3253 = frontier_phi_82_pred_1;
                    _3251 = frontier_phi_82_pred_2;
                    _3249 = frontier_phi_82_pred_3;
                    _3247 = frontier_phi_82_pred_4;
                    _3245 = frontier_phi_82_pred_5;
                    uint _3411 = _3410 + 1u;
                    if (_3411 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3404 = _3245;
                        _3405 = _3247;
                        _3406 = _3249;
                        _3407 = _3251;
                        _3408 = _3253;
                        _3409 = _3255;
                        _3410 = _3411;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3251;
                frontier_phi_63_64_ladder_1 = _3255;
                frontier_phi_63_64_ladder_2 = _3253;
                frontier_phi_63_64_ladder_3 = _3249;
                frontier_phi_63_64_ladder_4 = _3247;
                frontier_phi_63_64_ladder_5 = _3245;
            }
            else
            {
                frontier_phi_63_64_ladder = _3130;
                frontier_phi_63_64_ladder_1 = _3134;
                frontier_phi_63_64_ladder_2 = _3132;
                frontier_phi_63_64_ladder_3 = _3128;
                frontier_phi_63_64_ladder_4 = _3126;
                frontier_phi_63_64_ladder_5 = _3124;
            }
            _3244 = frontier_phi_63_64_ladder_5;
            _3246 = frontier_phi_63_64_ladder_4;
            _3248 = frontier_phi_63_64_ladder_3;
            _3250 = frontier_phi_63_64_ladder;
            _3252 = frontier_phi_63_64_ladder_2;
            _3254 = frontier_phi_63_64_ladder_1;
        }
        float _3259 = isnan(1.0) ? _994 : (isnan(_994) ? 1.0 : min(_994, 1.0));
        _3057 = (_3259 * _3250) + _2569;
        _3059 = (_3259 * _3252) + _2571;
        _3061 = (_3259 * _3254) + _2573;
        _3063 = ((_3244 * _979) * _3259) + _2907;
        _3065 = ((_3246 * _981) * _3259) + _2909;
        _3067 = ((_3248 * _982) * _3259) + _2911;
    }
    else
    {
        _3057 = _2569;
        _3059 = _2571;
        _3061 = _2573;
        _3063 = _2907;
        _3065 = _2909;
        _3067 = _2911;
    }
    float _5057 = isnan(0.0) ? _969 : (isnan(_969) ? 0.0 : max(_969, 0.0));
    float _5068 = isnan(0.0) ? _970 : (isnan(_970) ? 0.0 : max(_970, 0.0));
    float _5079 = isnan(0.0) ? _971 : (isnan(_971) ? 0.0 : max(_971, 0.0));
    float _3084 = ((isnan(1.0) ? _5057 : (isnan(_5057) ? 1.0 : min(_5057, 1.0))) * (_3057 + ((isnan(0.0) ? _1756 : (isnan(_1756) ? 0.0 : max(_1756, 0.0))) * _994))) + ((_3063 + ((isnan(0.0) ? _2050 : (isnan(_2050) ? 0.0 : max(_2050, 0.0))) * _1835)) * cbPerFrame._m0[3u].x);
    float _3085 = ((isnan(1.0) ? _5068 : (isnan(_5068) ? 1.0 : min(_5068, 1.0))) * (_3059 + ((isnan(0.0) ? _1759 : (isnan(_1759) ? 0.0 : max(_1759, 0.0))) * _994))) + ((_3065 + ((isnan(0.0) ? _2053 : (isnan(_2053) ? 0.0 : max(_2053, 0.0))) * _1835)) * cbPerFrame._m0[3u].x);
    float _3086 = ((isnan(1.0) ? _5079 : (isnan(_5079) ? 1.0 : min(_5079, 1.0))) * (_3061 + ((isnan(0.0) ? _1762 : (isnan(_1762) ? 0.0 : max(_1762, 0.0))) * _994))) + ((_3067 + ((isnan(0.0) ? _2056 : (isnan(_2056) ? 0.0 : max(_2056, 0.0))) * _1835)) * cbPerFrame._m0[3u].x);
    uint _3087 = _954 + 6u;
    float _3095 = _916 / cbSceneParam._m0[86u].x;
    float _3096 = _917 / cbSceneParam._m0[86u].y;
    vec4 _3110 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3095, _3096, (log2((isnan(cbSceneParam._m0[77u].w) ? _839 : (isnan(_839) ? cbSceneParam._m0[77u].w : min(_839, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3112 = _3110.x;
    float _3113 = _3110.y;
    float _3114 = _3110.z;
    float _3115 = _3110.w;
    float _3186;
    float _3188;
    float _3190;
    float _3192;
    if (_839 > cbSceneParam._m0[78u].w)
    {
        float _3149 = isnan(_839) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _839 : min(cbSceneParam._m0[80u].w, _839));
        float _3150 = _3149 / _839;
        float _3161 = _3150 * _889;
        float _3162 = _890 * _3150;
        float _3163 = (-0.0) - _3162;
        float _3164 = _3150 * _891;
        float _3166 = (cbSceneParam._m0[77u].w * _3163) / _3149;
        float _3167 = _3166 + cbSceneParam._m0[79u].w;
        float _3168 = cbSceneParam._m0[79u].w - _3162;
        float _3174 = sqrt(((_3161 * _3161) + (_3162 * _3162)) + (_3164 * _3164));
        float _3177 = (1.0 - (cbSceneParam._m0[77u].w / _3149)) * _3174;
        float _3182 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3184 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3361;
        if (abs((_3163 - _3166) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3361 = ((((_3167 > 0.0) ? exp2(_3182 * _3167) : (2.0 - exp2(_3184 * _3167))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3177;
        }
        else
        {
            float _3305 = 1.0 / cbSceneParam._m0[80u].x;
            float _3306 = isnan(_3168) ? _3167 : (isnan(_3167) ? _3168 : max(_3167, _3168));
            float _3307 = isnan(_3168) ? _3167 : (isnan(_3167) ? _3168 : min(_3167, _3168));
            float _3316 = isnan(0.0) ? _3306 : (isnan(_3306) ? 0.0 : min(_3306, 0.0));
            float _3317 = isnan(0.0) ? _3307 : (isnan(_3307) ? 0.0 : min(_3307, 0.0));
            _3361 = ((abs(_3174 / _3163) * cbSceneParam._m0[80u].y) * ((((_3316 - _3317) * 2.0) - ((exp2(_3182 * (isnan(0.0) ? _3306 : (isnan(_3306) ? 0.0 : max(_3306, 0.0)))) - exp2(_3182 * (isnan(0.0) ? _3307 : (isnan(_3307) ? 0.0 : max(_3307, 0.0))))) * _3305)) - ((exp2(_3184 * _3316) - exp2(_3184 * _3317)) * _3305))) + (_3177 * cbSceneParam._m0[80u].z);
        }
        vec4 _3363 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3095, _3096, 1.0), 0.0);
        float _3372 = exp2((_3361 * (-1.44269502162933349609375)) * (1.0 - _3363.w));
        float _3373 = log2(_3372);
        float _3389 = log2(_3115);
        _3186 = (exp2(_3389 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3373 * cbSceneParam._m0[78u].x)) * _3363.x) / cbSceneParam._m0[78u].x)) + _3112;
        _3188 = (exp2(_3389 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3373 * cbSceneParam._m0[78u].y)) * _3363.y) / cbSceneParam._m0[78u].y)) + _3113;
        _3190 = (exp2(_3389 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3373 * cbSceneParam._m0[78u].z)) * _3363.z) / cbSceneParam._m0[78u].z)) + _3114;
        _3192 = _3372 * _3115;
    }
    else
    {
        _3186 = _3112;
        _3188 = _3113;
        _3190 = _3114;
        _3192 = _3115;
    }
    bool _3399;
    vec4 _3202;
    vec4 _3224;
    float _3226;
    float _3230;
    float _3231;
    float _3232;
    float _3233;
    bool _3243;
    for (;;)
    {
        _3202 = cbMatDynParam._m0[0u];
        float _3204 = roundEven(_3202.y);
        bool _3205 = _3204 == 3.0;
        float _3206 = log2(_3192);
        float _3213 = exp2(_3206 * cbSceneParam._m0[78u].x) * _3084;
        float _3214 = exp2(_3206 * cbSceneParam._m0[78u].y) * _3085;
        float _3215 = exp2(_3206 * cbSceneParam._m0[78u].z) * _3086;
        float _3222 = _905 + (-0.5);
        _3224 = cbMtdParam._m0[1u];
        _3226 = _3224.y * _3222;
        float _3229 = (_3204 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3230 = _3229 * (_3205 ? _3213 : (_3213 + (cbSceneParam._m0[72u].w * _3186)));
        _3231 = _3229 * (_3205 ? _3214 : (_3214 + (cbSceneParam._m0[72u].w * _3188)));
        _3232 = _3229 * (_3205 ? _3215 : (_3215 + (cbSceneParam._m0[72u].w * _3190)));
        _3233 = _3222 * 0.999000012874603271484375;
        _3243 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3243)
        {
            if ((cbInstanceData._m0[_954 + 7u].x + _3233) < 0.5)
            {
                _3399 = true;
                break;
            }
        }
        uint _3340 = _955 + uint(_3202.w);
        if ((cbInstanceData._m0[_3340].w < 1.0) && ((cbInstanceData._m0[_3340].w + _3233) < 0.5))
        {
            _3399 = true;
            break;
        }
        if ((_3226 + 1.0) < _3224.x)
        {
            _3399 = true;
            break;
        }
        _3399 = false;
        break;
    }
    float _3603;
    if (_3399)
    {
        discard_state = true;
        _3603 = 0.0;
    }
    else
    {
        _3603 = cbInstanceData._m0[_3087].w;
    }
    SV_Target.x = _3230;
    SV_Target.y = _3231;
    SV_Target.z = _3232;
    SV_Target.w = _3603;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3087].w;
    discard_exit();
}


