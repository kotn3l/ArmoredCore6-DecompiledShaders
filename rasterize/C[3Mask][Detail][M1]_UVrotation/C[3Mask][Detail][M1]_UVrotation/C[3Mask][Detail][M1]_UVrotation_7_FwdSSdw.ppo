#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[20];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_19;
layout(set = 0, binding = 11) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_3;
layout(set = 0, binding = 14) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_5;
layout(set = 0, binding = 15) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_6;
layout(set = 0, binding = 17) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_8;
layout(set = 0, binding = 2) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_11;
layout(set = 0, binding = 5) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_14;
layout(set = 0, binding = 6) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_15;
layout(set = 0, binding = 7) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_16;
layout(set = 0, binding = 8) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_17;
layout(set = 0, binding = 9) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_18;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1183;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _199 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _200 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _201 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _207 = inversesqrt(dot(vec3(_199, _200, _201), vec3(_199, _200, _201)));
    float _214 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _221 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _244 = sin(cbMtdParam._m0[18u].x);
    float _245 = cos(cbMtdParam._m0[18u].x);
    float _246 = TEXCOORD.x - cbMtdParam._m0[17u].w;
    float _247 = TEXCOORD.y - cbMtdParam._m0[17u].w;
    float _255 = (cbMtdParam._m0[17u].w + cbMtdParam._m0[19u].y) + fma(_247, (-0.0) - _244, _245 * _246);
    float _257 = (cbMtdParam._m0[17u].w + cbMtdParam._m0[19u].z) + fma(_247, _245, _246 * _244);
    vec4 _270 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * _255) + cbTextureTilingScale._m0[1u].z, (_257 * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w));
    float _276 = _270.x * cbMtdParam._m0[10u].x;
    float _277 = _270.y * cbMtdParam._m0[10u].y;
    float _278 = _270.z * cbMtdParam._m0[10u].z;
    vec4 _296 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w));
    vec4 _315 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_0, SS_WrapLinear), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _340 = cbMtdParam._m0[19u].x * texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.x) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD.y) + cbTextureTilingScale._m0[13u].w)).x;
    float _351 = ((cbMtdParam._m0[15u].x * (-1.39999997615814208984375)) * (((1.0 - _315.x) * 2.0) - _340)) + 1.0;
    float _3536 = isnan(0.0) ? _351 : (isnan(_351) ? 0.0 : max(_351, 0.0));
    float _352 = isnan(1.0) ? _3536 : (isnan(_3536) ? 1.0 : min(_3536, 1.0));
    float _359 = (_352 * ((_296.x * cbMtdParam._m0[11u].x) - _276)) + _276;
    float _360 = (_352 * ((_296.y * cbMtdParam._m0[11u].y) - _277)) + _277;
    float _361 = (_352 * ((_296.z * cbMtdParam._m0[11u].z) - _278)) + _278;
    vec4 _379 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_8, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[17u].x * TEXCOORD.x) + cbTextureTilingScale._m0[17u].z, (cbTextureTilingScale._m0[17u].y * TEXCOORD.y) + cbTextureTilingScale._m0[17u].w));
    float _392 = (((((1.0 - _315.y) * 2.0) - _340) * (-1.39999997615814208984375)) * cbMtdParam._m0[18u].z) + 1.0;
    float _3547 = isnan(0.0) ? _392 : (isnan(_392) ? 0.0 : max(_392, 0.0));
    float _393 = isnan(1.0) ? _3547 : (isnan(_3547) ? 1.0 : min(_3547, 1.0));
    float _400 = (((_379.x * cbMtdParam._m0[12u].x) - _359) * _393) + _359;
    float _401 = (_393 * ((_379.y * cbMtdParam._m0[12u].y) - _360)) + _360;
    float _402 = (_393 * ((_379.z * cbMtdParam._m0[12u].z) - _361)) + _361;
    vec4 _419 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _432 = (((((1.0 - _315.z) * 2.0) - _340) * (-1.39999997615814208984375)) * cbMtdParam._m0[18u].w) + 1.0;
    float _3558 = isnan(0.0) ? _432 : (isnan(_432) ? 0.0 : max(_432, 0.0));
    float _433 = isnan(1.0) ? _3558 : (isnan(_3558) ? 1.0 : min(_3558, 1.0));
    float _440 = (((_419.x * cbMtdParam._m0[13u].x) - _400) * _433) + _400;
    float _441 = (_433 * ((_419.y * cbMtdParam._m0[13u].y) - _401)) + _401;
    float _442 = (_433 * ((_419.z * cbMtdParam._m0[13u].z) - _402)) + _402;
    vec4 _455 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * _255) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _257) + cbTextureTilingScale._m0[5u].w));
    float _457 = _455.x;
    float _475 = ((texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w)).x - _457) * _352) + _457;
    float _493 = ((texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w)).x - _475) * _393) + _475;
    float _512 = (((texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w)).x - _493) * _433) + _493) * cbMtdParam._m0[18u].y;
    vec4 _525 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[14u].x * _255) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _257) + cbTextureTilingScale._m0[14u].w));
    float _527 = _525.x;
    float _528 = _525.y;
    float _531 = cbMtdParam._m0[17u].y * _525.z;
    vec4 _543 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * TEXCOORD.x) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * TEXCOORD.y) + cbTextureTilingScale._m0[15u].w));
    float _552 = (((cbMtdParam._m0[17u].x * _543.z) - _531) * _352) + _531;
    vec4 _565 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_15, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _577 = (((cbMtdParam._m0[16u].w * _565.z) - _552) * _393) + _552;
    vec4 _590 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _599 = (((cbMtdParam._m0[16u].z * _590.z) - _577) * _433) + _577;
    float _604 = ((_543.x - _527) * _352) + _527;
    float _605 = ((_543.y - _528) * _352) + _528;
    float _610 = ((_565.x - _604) * _393) + _604;
    float _611 = ((_565.y - _605) * _393) + _605;
    float _620 = ((((_590.x - _610) * _433) + _610) * 2.0) + (-1.0);
    float _622 = ((((_590.y - _611) * _433) + _611) * 2.0) + (-1.0);
    float _623 = dot(vec2(_620, _622), vec2(_620, _622));
    float _3569 = isnan(0.0) ? _623 : (isnan(_623) ? 0.0 : max(_623, 0.0));
    float _628 = sqrt(1.0 - (isnan(1.0) ? _3569 : (isnan(_3569) ? 1.0 : min(_3569, 1.0))));
    float _631 = fma(_628, _214 * NORMAL.x, fma(_622, _221 * TANGENT.x, (_207 * _199) * _620));
    float _634 = fma(_628, _214 * NORMAL.y, fma(_622, _221 * TANGENT.y, (_207 * _200) * _620));
    float _637 = fma(_628, _214 * NORMAL.z, fma(_622, _221 * TANGENT.z, (_207 * _201) * _620));
    float _641 = inversesqrt(dot(vec3(_631, _634, _637), vec3(_631, _634, _637)));
    float _642 = _641 * _631;
    float _643 = _641 * _634;
    float _644 = _641 * _637;
    float _3580 = isnan(0.0) ? _599 : (isnan(_599) ? 0.0 : max(_599, 0.0));
    float _645 = isnan(1.0) ? _3580 : (isnan(_3580) ? 1.0 : min(_3580, 1.0));
    float _3591 = isnan(0.0) ? _440 : (isnan(_440) ? 0.0 : max(_440, 0.0));
    float _3602 = isnan(0.0) ? _441 : (isnan(_441) ? 0.0 : max(_441, 0.0));
    float _3613 = isnan(0.0) ? _442 : (isnan(_442) ? 0.0 : max(_442, 0.0));
    float _3624 = isnan(0.0) ? _512 : (isnan(_512) ? 0.0 : max(_512, 0.0));
    float _649 = isnan(1.0) ? _3624 : (isnan(_3624) ? 1.0 : min(_3624, 1.0));
    float _665 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _705 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _715 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _705);
    float _716 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _705);
    float _717 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _705);
    float _721 = inversesqrt(dot(vec3(_715, _716, _717), vec3(_715, _716, _717)));
    float _722 = _715 * _721;
    float _723 = _716 * _721;
    float _724 = _717 * _721;
    float _730 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _731 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _749 = fma(_644, cbSceneParam._m0[5u].z, fma(_643, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _642));
    float _752 = fma(_644, cbSceneParam._m0[6u].z, fma(_643, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _642));
    float _755 = fma(_644, cbSceneParam._m0[7u].z, fma(_643, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _642));
    uint _768 = uint(roundEven(NORMAL.w)) * 13u;
    uint _770 = (_768 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _776 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3591 : (isnan(_3591) ? 1.0 : min(_3591, 1.0)))) * cbInstanceData._m0[_770].x;
    float _777 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3602 : (isnan(_3602) ? 1.0 : min(_3602, 1.0)))) * cbInstanceData._m0[_770].y;
    float _778 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3613 : (isnan(_3613) ? 1.0 : min(_3613, 1.0)))) * cbInstanceData._m0[_770].z;
    float _3635 = isnan(0.0) ? _776 : (isnan(_776) ? 0.0 : max(_776, 0.0));
    float _779 = isnan(1.0) ? _3635 : (isnan(_3635) ? 1.0 : min(_3635, 1.0));
    float _3646 = isnan(0.0) ? _777 : (isnan(_777) ? 0.0 : max(_777, 0.0));
    float _780 = isnan(1.0) ? _3646 : (isnan(_3646) ? 1.0 : min(_3646, 1.0));
    float _3657 = isnan(0.0) ? _778 : (isnan(_778) ? 0.0 : max(_778, 0.0));
    float _781 = isnan(1.0) ? _3657 : (isnan(_3657) ? 1.0 : min(_3657, 1.0));
    float _782 = 1.0 - _649;
    float _783 = _779 * _782;
    float _784 = _780 * _782;
    float _785 = _781 * _782;
    float _790 = (_779 + (-0.039999999105930328369140625)) * _649;
    float _791 = (_780 + (-0.039999999105930328369140625)) * _649;
    float _792 = (_781 + (-0.039999999105930328369140625)) * _649;
    float _793 = _790 + 0.039999999105930328369140625;
    float _795 = _791 + 0.039999999105930328369140625;
    float _796 = _792 + 0.039999999105930328369140625;
    vec4 _805 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _730, cbSceneParam._m0[86u].y * _731));
    float _808 = _805.x * TEXCOORD_5.w;
    float _809 = dot(vec3(_642, _643, _644), vec3(_722, _723, _724));
    float _812 = _809 * 2.0;
    float _816 = (_812 * _642) - _722;
    float _817 = (_812 * _643) - _723;
    float _818 = (_812 * _644) - _724;
    float _822 = abs(dot(vec3(_722, _723, _724), vec3(_642, _643, _644)));
    float _3668 = isnan(0.0) ? _822 : (isnan(_822) ? 0.0 : max(_822, 0.0));
    float _824 = sqrt(_645);
    float _837 = exp2((_824 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3668 : (isnan(_3668) ? 1.0 : min(_3668, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_824 * 3.0));
    float _843 = (1.0 - _837) * ((_824 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _844 = _837 * _824;
    float _872 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _876 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _880 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1182;
    float _1184;
    float _1185;
    float _1186;
    float _1187;
    float _1188;
    float _1189;
    float _1190;
    float _1191;
    float _1192;
    float _1193;
    float _1194;
    float _1195;
    float _1196;
    float _1197;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _907 = fma(_880, cbModelParam._m0[26u].z, fma(_876, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _872));
        float _911 = fma(_880, cbModelParam._m0[27u].z, fma(_876, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _872));
        float _915 = fma(_880, cbModelParam._m0[28u].z, fma(_876, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _872));
        float _940 = _872 + _642;
        float _941 = _876 + _643;
        float _942 = _880 + _644;
        float _952 = fma(_942, cbModelParam._m0[26u].z, fma(_941, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _940)) - _907;
        float _953 = fma(_942, cbModelParam._m0[27u].z, fma(_941, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _940)) - _911;
        float _954 = fma(_942, cbModelParam._m0[28u].z, fma(_941, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _940)) - _915;
        float _958 = inversesqrt(dot(vec3(_952, _953, _954), vec3(_952, _953, _954)));
        float _971 = ((_958 * _952) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_907 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _972 = ((_958 * _953) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_911 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _973 = ((_958 * _954) / cbModelParam._m0[34u].z) + ((((((_915 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _976 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_971, _972, _973), 0.0);
        vec4 _983 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_971, _972, _973), 0.0);
        vec4 _990 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_971, _972, _973), 0.0);
        vec4 _997 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_971, _972, _973), 0.0);
        float _1010 = exp2((_976.w + (-0.5)) * 20.0) * 2.0;
        float _1011 = _1010 * (_976.x + (-0.5));
        float _1012 = _1010 * (_976.y + (-0.5));
        float _1013 = _1010 * (_976.z + (-0.5));
        float _1020 = exp2((_983.w + (-0.5)) * 20.0) * 2.0;
        float _1021 = _1020 * (_983.x + (-0.5));
        float _1022 = _1020 * (_983.y + (-0.5));
        float _1023 = _1020 * (_983.z + (-0.5));
        float _1030 = exp2((_990.w + (-0.5)) * 20.0) * 2.0;
        float _1031 = _1030 * (_990.x + (-0.5));
        float _1032 = _1030 * (_990.y + (-0.5));
        float _1033 = _1030 * (_990.z + (-0.5));
        float _1040 = exp2((_997.w + (-0.5)) * 20.0) * 2.0;
        float _1041 = _1040 * (_997.x + (-0.5));
        float _1042 = _1040 * (_997.y + (-0.5));
        float _1043 = _1040 * (_997.z + (-0.5));
        float _1044 = isnan(0.0) ? _1041 : (isnan(_1041) ? 0.0 : max(_1041, 0.0));
        float _1045 = isnan(0.0) ? _1042 : (isnan(_1042) ? 0.0 : max(_1042, 0.0));
        float _1046 = isnan(0.0) ? _1043 : (isnan(_1043) ? 0.0 : max(_1043, 0.0));
        float _1047 = _1011 * 0.5;
        float _1048 = _1021 * 0.5;
        float _1049 = _1031 * 0.5;
        float _1050 = dot(vec3(_1047, _1048, _1049), vec3(_1047, _1048, _1049));
        float _1055 = (_1050 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1050);
        float _1064 = (dot(vec3(_642, _643, _644), vec3(_1055 * _1047, _1055 * _1048, _1055 * _1049)) + 1.0) * 0.5;
        float _3694 = isnan(0.0) ? _1064 : (isnan(_1064) ? 0.0 : max(_1064, 0.0));
        float _1074 = sqrt(((_1048 * _1048) + (_1047 * _1047)) + (_1049 * _1049)) / (_1044 + 9.9999997473787516355514526367188e-06);
        float _3705 = isnan(0.0) ? _1074 : (isnan(_1074) ? 0.0 : max(_1074, 0.0));
        float _1075 = isnan(1.0) ? _3705 : (isnan(_3705) ? 1.0 : min(_3705, 1.0));
        float _1076 = _1075 * 2.0;
        float _1080 = (1.0 - _1075) / (_1075 + 1.0);
        float _3716 = isnan(0.0) ? _1080 : (isnan(_1080) ? 0.0 : max(_1080, 0.0));
        float _1081 = isnan(1.0) ? _3716 : (isnan(_3716) ? 1.0 : min(_3716, 1.0));
        float _1090 = ((((1.0 - _1081) * (_1076 + 2.0)) * exp2(log2(isnan(1.0) ? _3694 : (isnan(_3694) ? 1.0 : min(_3694, 1.0))) * (_1076 + 1.0))) + _1081) * _1044;
        float _1091 = _1012 * 0.5;
        float _1092 = _1022 * 0.5;
        float _1093 = _1032 * 0.5;
        float _1094 = dot(vec3(_1091, _1092, _1093), vec3(_1091, _1092, _1093));
        float _1099 = (_1094 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1094);
        float _1107 = (dot(vec3(_642, _643, _644), vec3(_1099 * _1091, _1099 * _1092, _1099 * _1093)) + 1.0) * 0.5;
        float _3727 = isnan(0.0) ? _1107 : (isnan(_1107) ? 0.0 : max(_1107, 0.0));
        float _1116 = sqrt(((_1092 * _1092) + (_1091 * _1091)) + (_1093 * _1093)) / (_1045 + 9.9999997473787516355514526367188e-06);
        float _3738 = isnan(0.0) ? _1116 : (isnan(_1116) ? 0.0 : max(_1116, 0.0));
        float _1117 = isnan(1.0) ? _3738 : (isnan(_3738) ? 1.0 : min(_3738, 1.0));
        float _1118 = _1117 * 2.0;
        float _1122 = (1.0 - _1117) / (_1117 + 1.0);
        float _3749 = isnan(0.0) ? _1122 : (isnan(_1122) ? 0.0 : max(_1122, 0.0));
        float _1123 = isnan(1.0) ? _3749 : (isnan(_3749) ? 1.0 : min(_3749, 1.0));
        float _1132 = ((((1.0 - _1123) * (_1118 + 2.0)) * exp2(log2(isnan(1.0) ? _3727 : (isnan(_3727) ? 1.0 : min(_3727, 1.0))) * (_1118 + 1.0))) + _1123) * _1045;
        float _1133 = _1013 * 0.5;
        float _1134 = _1023 * 0.5;
        float _1135 = _1033 * 0.5;
        float _1136 = dot(vec3(_1133, _1134, _1135), vec3(_1133, _1134, _1135));
        float _1141 = (_1136 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1136);
        float _1149 = (dot(vec3(_642, _643, _644), vec3(_1141 * _1133, _1141 * _1134, _1141 * _1135)) + 1.0) * 0.5;
        float _3760 = isnan(0.0) ? _1149 : (isnan(_1149) ? 0.0 : max(_1149, 0.0));
        float _1158 = sqrt(((_1134 * _1134) + (_1133 * _1133)) + (_1135 * _1135)) / (_1046 + 9.9999997473787516355514526367188e-06);
        float _3771 = isnan(0.0) ? _1158 : (isnan(_1158) ? 0.0 : max(_1158, 0.0));
        float _1159 = isnan(1.0) ? _3771 : (isnan(_3771) ? 1.0 : min(_3771, 1.0));
        float _1160 = _1159 * 2.0;
        float _1164 = (1.0 - _1159) / (_1159 + 1.0);
        float _3782 = isnan(0.0) ? _1164 : (isnan(_1164) ? 0.0 : max(_1164, 0.0));
        float _1165 = isnan(1.0) ? _3782 : (isnan(_3782) ? 1.0 : min(_3782, 1.0));
        float _1174 = ((((1.0 - _1165) * (_1160 + 2.0)) * exp2(log2(isnan(1.0) ? _3760 : (isnan(_3760) ? 1.0 : min(_3760, 1.0))) * (_1160 + 1.0))) + _1165) * _1046;
        _1182 = _1013;
        _1184 = _1012;
        _1185 = _1011;
        _1186 = _1023;
        _1187 = _1022;
        _1188 = _1021;
        _1189 = _1033;
        _1190 = _1032;
        _1191 = _1031;
        _1192 = _1046;
        _1193 = _1045;
        _1194 = _1044;
        _1195 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1090 : (isnan(_1090) ? 0.0 : max(_1090, 0.0)));
        _1196 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1132 : (isnan(_1132) ? 0.0 : max(_1132, 0.0)));
        _1197 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1174 : (isnan(_1174) ? 0.0 : max(_1174, 0.0)));
    }
    else
    {
        _1182 = _1183;
        _1184 = _1183;
        _1185 = _1183;
        _1186 = _1183;
        _1187 = _1183;
        _1188 = _1183;
        _1189 = _1183;
        _1190 = _1183;
        _1191 = _1183;
        _1192 = _1183;
        _1193 = _1183;
        _1194 = _1183;
        _1195 = 0.0;
        _1196 = 0.0;
        _1197 = 0.0;
    }
    float _1492;
    float _1493;
    float _1494;
    float _1495;
    float _1496;
    float _1497;
    float _1498;
    float _1499;
    float _1500;
    float _1501;
    float _1502;
    float _1503;
    float _1504;
    float _1505;
    float _1506;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1223 = fma(_880, cbModelParam._m0[30u].z, fma(_876, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _872));
        float _1227 = fma(_880, cbModelParam._m0[31u].z, fma(_876, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _872));
        float _1231 = fma(_880, cbModelParam._m0[32u].z, fma(_876, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _872));
        float _1254 = _872 + _642;
        float _1255 = _876 + _643;
        float _1256 = _880 + _644;
        float _1266 = fma(_1256, cbModelParam._m0[30u].z, fma(_1255, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1254)) - _1223;
        float _1267 = fma(_1256, cbModelParam._m0[31u].z, fma(_1255, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1254)) - _1227;
        float _1268 = fma(_1256, cbModelParam._m0[32u].z, fma(_1255, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1254)) - _1231;
        float _1272 = inversesqrt(dot(vec3(_1266, _1267, _1268), vec3(_1266, _1267, _1268)));
        float _1285 = ((_1272 * _1266) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1223 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1286 = ((_1272 * _1267) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1227 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1287 = ((_1272 * _1268) / cbModelParam._m0[35u].z) + ((((((_1231 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1289 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1285, _1286, _1287), 0.0);
        vec4 _1296 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1285, _1286, _1287), 0.0);
        vec4 _1303 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1285, _1286, _1287), 0.0);
        vec4 _1310 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1285, _1286, _1287), 0.0);
        float _1322 = exp2((_1289.w + (-0.5)) * 20.0) * 2.0;
        float _1323 = _1322 * (_1289.x + (-0.5));
        float _1324 = _1322 * (_1289.y + (-0.5));
        float _1325 = _1322 * (_1289.z + (-0.5));
        float _1332 = exp2((_1296.w + (-0.5)) * 20.0) * 2.0;
        float _1333 = _1332 * (_1296.x + (-0.5));
        float _1334 = _1332 * (_1296.y + (-0.5));
        float _1335 = _1332 * (_1296.z + (-0.5));
        float _1342 = exp2((_1303.w + (-0.5)) * 20.0) * 2.0;
        float _1343 = _1342 * (_1303.x + (-0.5));
        float _1344 = _1342 * (_1303.y + (-0.5));
        float _1345 = _1342 * (_1303.z + (-0.5));
        float _1352 = exp2((_1310.w + (-0.5)) * 20.0) * 2.0;
        float _1353 = _1352 * (_1310.x + (-0.5));
        float _1354 = _1352 * (_1310.y + (-0.5));
        float _1355 = _1352 * (_1310.z + (-0.5));
        float _1356 = isnan(0.0) ? _1353 : (isnan(_1353) ? 0.0 : max(_1353, 0.0));
        float _1357 = isnan(0.0) ? _1354 : (isnan(_1354) ? 0.0 : max(_1354, 0.0));
        float _1358 = isnan(0.0) ? _1355 : (isnan(_1355) ? 0.0 : max(_1355, 0.0));
        float _1359 = _1323 * 0.5;
        float _1360 = _1333 * 0.5;
        float _1361 = _1343 * 0.5;
        float _1362 = dot(vec3(_1359, _1360, _1361), vec3(_1359, _1360, _1361));
        float _1367 = (_1362 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1362);
        float _1375 = (dot(vec3(_642, _643, _644), vec3(_1367 * _1359, _1367 * _1360, _1367 * _1361)) + 1.0) * 0.5;
        float _3823 = isnan(0.0) ? _1375 : (isnan(_1375) ? 0.0 : max(_1375, 0.0));
        float _1384 = sqrt(((_1360 * _1360) + (_1359 * _1359)) + (_1361 * _1361)) / (_1356 + 9.9999997473787516355514526367188e-06);
        float _3834 = isnan(0.0) ? _1384 : (isnan(_1384) ? 0.0 : max(_1384, 0.0));
        float _1385 = isnan(1.0) ? _3834 : (isnan(_3834) ? 1.0 : min(_3834, 1.0));
        float _1386 = _1385 * 2.0;
        float _1390 = (1.0 - _1385) / (_1385 + 1.0);
        float _3845 = isnan(0.0) ? _1390 : (isnan(_1390) ? 0.0 : max(_1390, 0.0));
        float _1391 = isnan(1.0) ? _3845 : (isnan(_3845) ? 1.0 : min(_3845, 1.0));
        float _1400 = ((((1.0 - _1391) * (_1386 + 2.0)) * exp2(log2(isnan(1.0) ? _3823 : (isnan(_3823) ? 1.0 : min(_3823, 1.0))) * (_1386 + 1.0))) + _1391) * _1356;
        float _1401 = _1324 * 0.5;
        float _1402 = _1334 * 0.5;
        float _1403 = _1344 * 0.5;
        float _1404 = dot(vec3(_1401, _1402, _1403), vec3(_1401, _1402, _1403));
        float _1409 = (_1404 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1404);
        float _1417 = (dot(vec3(_642, _643, _644), vec3(_1409 * _1401, _1409 * _1402, _1409 * _1403)) + 1.0) * 0.5;
        float _3856 = isnan(0.0) ? _1417 : (isnan(_1417) ? 0.0 : max(_1417, 0.0));
        float _1426 = sqrt(((_1402 * _1402) + (_1401 * _1401)) + (_1403 * _1403)) / (_1357 + 9.9999997473787516355514526367188e-06);
        float _3867 = isnan(0.0) ? _1426 : (isnan(_1426) ? 0.0 : max(_1426, 0.0));
        float _1427 = isnan(1.0) ? _3867 : (isnan(_3867) ? 1.0 : min(_3867, 1.0));
        float _1428 = _1427 * 2.0;
        float _1432 = (1.0 - _1427) / (_1427 + 1.0);
        float _3878 = isnan(0.0) ? _1432 : (isnan(_1432) ? 0.0 : max(_1432, 0.0));
        float _1433 = isnan(1.0) ? _3878 : (isnan(_3878) ? 1.0 : min(_3878, 1.0));
        float _1442 = ((((1.0 - _1433) * (_1428 + 2.0)) * exp2(log2(isnan(1.0) ? _3856 : (isnan(_3856) ? 1.0 : min(_3856, 1.0))) * (_1428 + 1.0))) + _1433) * _1357;
        float _1443 = _1325 * 0.5;
        float _1444 = _1335 * 0.5;
        float _1445 = _1345 * 0.5;
        float _1446 = dot(vec3(_1443, _1444, _1445), vec3(_1443, _1444, _1445));
        float _1451 = (_1446 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1446);
        float _1459 = (dot(vec3(_642, _643, _644), vec3(_1451 * _1443, _1451 * _1444, _1451 * _1445)) + 1.0) * 0.5;
        float _3889 = isnan(0.0) ? _1459 : (isnan(_1459) ? 0.0 : max(_1459, 0.0));
        float _1468 = sqrt(((_1444 * _1444) + (_1443 * _1443)) + (_1445 * _1445)) / (_1358 + 9.9999997473787516355514526367188e-06);
        float _3900 = isnan(0.0) ? _1468 : (isnan(_1468) ? 0.0 : max(_1468, 0.0));
        float _1469 = isnan(1.0) ? _3900 : (isnan(_3900) ? 1.0 : min(_3900, 1.0));
        float _1470 = _1469 * 2.0;
        float _1474 = (1.0 - _1469) / (_1469 + 1.0);
        float _3911 = isnan(0.0) ? _1474 : (isnan(_1474) ? 0.0 : max(_1474, 0.0));
        float _1475 = isnan(1.0) ? _3911 : (isnan(_3911) ? 1.0 : min(_3911, 1.0));
        float _1484 = ((((1.0 - _1475) * (_1470 + 2.0)) * exp2(log2(isnan(1.0) ? _3889 : (isnan(_3889) ? 1.0 : min(_3889, 1.0))) * (_1470 + 1.0))) + _1475) * _1358;
        _1492 = _1325;
        _1493 = _1324;
        _1494 = _1323;
        _1495 = _1335;
        _1496 = _1334;
        _1497 = _1333;
        _1498 = _1345;
        _1499 = _1344;
        _1500 = _1343;
        _1501 = _1358;
        _1502 = _1357;
        _1503 = _1356;
        _1504 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1400 : (isnan(_1400) ? 0.0 : max(_1400, 0.0)));
        _1505 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1442 : (isnan(_1442) ? 0.0 : max(_1442, 0.0)));
        _1506 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1484 : (isnan(_1484) ? 0.0 : max(_1484, 0.0)));
    }
    else
    {
        _1492 = _1183;
        _1493 = _1183;
        _1494 = _1183;
        _1495 = _1183;
        _1496 = _1183;
        _1497 = _1183;
        _1498 = _1183;
        _1499 = _1183;
        _1500 = _1183;
        _1501 = _1183;
        _1502 = _1183;
        _1503 = _1183;
        _1504 = 0.0;
        _1505 = 0.0;
        _1506 = 0.0;
    }
    float _1516 = (cbModelParam._m0[1u].x * (_1504 - _1195)) + _1195;
    float _1517 = (cbModelParam._m0[1u].x * (_1505 - _1196)) + _1196;
    float _1518 = (cbModelParam._m0[1u].x * (_1506 - _1197)) + _1197;
    float _1539 = fma(_1518, cbSceneParam._m0[89u].z, fma(_1517, cbSceneParam._m0[89u].y, _1516 * cbSceneParam._m0[89u].x));
    float _1542 = fma(_1518, cbSceneParam._m0[90u].z, fma(_1517, cbSceneParam._m0[90u].y, _1516 * cbSceneParam._m0[90u].x));
    float _1545 = fma(_1518, cbSceneParam._m0[91u].z, fma(_1517, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1516));
    float _1560 = _816 * 0.5;
    float _1561 = _817 * 0.5;
    float _1562 = _818 * 0.5;
    float _1563 = dot(vec4(_1560, _1561, _1562, 1.0), vec4(_1494, _1497, _1500, _1503));
    float _1566 = dot(vec4(_1560, _1561, _1562, 1.0), vec4(_1493, _1496, _1499, _1502));
    float _1569 = dot(vec4(_1560, _1561, _1562, 1.0), vec4(_1492, _1495, _1498, _1501));
    float _1603;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1576 = dot(vec4(_1560, _1561, _1562, 1.0), vec4(_1182, _1186, _1189, _1192));
        float _1580 = dot(vec4(_1560, _1561, _1562, 1.0), vec4(_1184, _1187, _1190, _1193));
        float _1584 = dot(vec4(_1560, _1561, _1562, 1.0), vec4(_1185, _1188, _1191, _1194));
        float _1591 = dot(vec4(cbModelParam._m0[39u]), vec4(_1560, _1561, _1562, 1.0));
        _1603 = dot(vec3(isnan(0.0) ? _1584 : (isnan(_1584) ? 0.0 : max(_1584, 0.0)), isnan(0.0) ? _1580 : (isnan(_1580) ? 0.0 : max(_1580, 0.0)), isnan(0.0) ? _1576 : (isnan(_1576) ? 0.0 : max(_1576, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1591) ? 0.0 : (isnan(0.0) ? _1591 : max(0.0, _1591))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1603 = 1.0;
    }
    float _1614;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1605 = dot(vec4(cbModelParam._m0[40u]), vec4(_1560, _1561, _1562, 1.0));
        _1614 = dot(vec3(isnan(0.0) ? _1563 : (isnan(_1563) ? 0.0 : max(_1563, 0.0)), isnan(0.0) ? _1566 : (isnan(_1566) ? 0.0 : max(_1566, 0.0)), isnan(0.0) ? _1569 : (isnan(_1569) ? 0.0 : max(_1569, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1605) ? 0.0 : (isnan(0.0) ? _1605 : max(0.0, _1605))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1614 = 1.0;
    }
    float _1618 = (_1614 * cbModelParam._m0[1u].x) + (_1603 * (1.0 - cbModelParam._m0[1u].x));
    float _1628 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _645);
    float _1629 = isnan(_1628) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1628 : min(cbModelParam._m0[25u].z, _1628));
    float _1709;
    float _1711;
    float _1713;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1676 = fma(_880, cbModelParam._m0[13u].z, fma(_876, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _872)) + cbModelParam._m0[13u].w;
        float _1680 = fma(_880, cbModelParam._m0[14u].z, fma(_876, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _872)) + cbModelParam._m0[14u].w;
        float _1684 = fma(_880, cbModelParam._m0[15u].z, fma(_876, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _872)) + cbModelParam._m0[15u].w;
        float _1687 = fma(_818, cbModelParam._m0[13u].z, fma(_817, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _816));
        float _1690 = fma(_818, cbModelParam._m0[14u].z, fma(_817, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _816));
        float _1693 = fma(_818, cbModelParam._m0[15u].z, fma(_817, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _816));
        float _1721;
        if (_1687 > 0.0)
        {
            _1721 = abs((1.0 - _1676) / _1687);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1687 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1676 + 1.0) / _1687);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1721 = frontier_phi_14_12_ladder;
        }
        float _1947;
        if (_1690 > 0.0)
        {
            _1947 = abs((1.0 - _1680) / _1690);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1690 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1680 + 1.0) / _1690);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1947 = frontier_phi_23_19_ladder;
        }
        float _2204;
        if (_1693 > 0.0)
        {
            _2204 = abs((1.0 - _1684) / _1693);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1693 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1684 + 1.0) / _1693);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2204 = frontier_phi_35_30_ladder;
        }
        float _2206 = isnan(_1947) ? _1721 : (isnan(_1721) ? _1947 : min(_1721, _1947));
        float _2207 = isnan(_2204) ? _2206 : (isnan(_2206) ? _2204 : min(_2206, _2204));
        float _2211 = (_2207 * _1687) + _1676;
        float _2212 = (_2207 * _1690) + _1680;
        float _2213 = (_2207 * _1693) + _1684;
        float _2214 = _2207 * 9.9999997473787516355514526367188e-05;
        float _2216 = (-1.0) - _2214;
        float _2218 = _2214 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2213 > _2218) || ((_2213 < _2216) || ((_2212 > _2218) || ((_2212 < _2216) || ((_2211 < _2216) || (_2211 > _2218))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2341 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2213, cbModelParam._m0[9u].z, fma(_2212, cbModelParam._m0[9u].y, _2211 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2213, cbModelParam._m0[10u].z, fma(_2212, cbModelParam._m0[10u].y, _2211 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2213, cbModelParam._m0[11u].z, fma(_2212, cbModelParam._m0[11u].y, _2211 * cbModelParam._m0[11u].x))), _1629);
            frontier_phi_13_35_ladder = _2341.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2341.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2341.x * cbModelParam._m0[1u].y;
        }
        _1709 = frontier_phi_13_35_ladder_2;
        _1711 = frontier_phi_13_35_ladder_1;
        _1713 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1697 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_816, _817, _818), _1629);
        _1709 = _1697.x * cbModelParam._m0[1u].y;
        _1711 = _1697.y * cbModelParam._m0[1u].y;
        _1713 = _1697.z * cbModelParam._m0[1u].y;
    }
    float _1717 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _645);
    float _1718 = isnan(_1717) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1717 : min(cbModelParam._m0[25u].w, _1717));
    float _1809;
    float _1811;
    float _1813;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1773 = fma(_880, cbModelParam._m0[21u].z, fma(_876, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _872)) + cbModelParam._m0[21u].w;
        float _1777 = fma(_880, cbModelParam._m0[22u].z, fma(_876, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _872)) + cbModelParam._m0[22u].w;
        float _1781 = fma(_880, cbModelParam._m0[23u].z, fma(_876, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _872)) + cbModelParam._m0[23u].w;
        float _1784 = fma(_818, cbModelParam._m0[21u].z, fma(_817, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _816));
        float _1787 = fma(_818, cbModelParam._m0[22u].z, fma(_817, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _816));
        float _1790 = fma(_818, cbModelParam._m0[23u].z, fma(_817, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _816));
        float _1952;
        if (_1784 > 0.0)
        {
            _1952 = abs((1.0 - _1773) / _1784);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1784 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1773 + 1.0) / _1784);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1952 = frontier_phi_25_21_ladder;
        }
        float _2231;
        if (_1787 > 0.0)
        {
            _2231 = abs((1.0 - _1777) / _1787);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1787 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1777 + 1.0) / _1787);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2231 = frontier_phi_37_32_ladder;
        }
        float _2444;
        if (_1790 > 0.0)
        {
            _2444 = abs((1.0 - _1781) / _1790);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1790 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1781 + 1.0) / _1790);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2444 = frontier_phi_46_43_ladder;
        }
        float _2446 = isnan(_2231) ? _1952 : (isnan(_1952) ? _2231 : min(_1952, _2231));
        float _2447 = isnan(_2444) ? _2446 : (isnan(_2446) ? _2444 : min(_2446, _2444));
        float _2451 = (_2447 * _1784) + _1773;
        float _2452 = (_2447 * _1787) + _1777;
        float _2453 = (_2447 * _1790) + _1781;
        float _2454 = _2447 * 9.9999997473787516355514526367188e-05;
        float _2455 = (-1.0) - _2454;
        float _2457 = _2454 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2453 > _2457) || ((_2453 < _2455) || ((_2452 > _2457) || ((_2452 < _2455) || ((_2451 < _2455) || (_2451 > _2457))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2652 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2453, cbModelParam._m0[17u].z, fma(_2452, cbModelParam._m0[17u].y, _2451 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2453, cbModelParam._m0[18u].z, fma(_2452, cbModelParam._m0[18u].y, _2451 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2453, cbModelParam._m0[19u].z, fma(_2452, cbModelParam._m0[19u].y, _2451 * cbModelParam._m0[19u].x))), _1718);
            frontier_phi_22_46_ladder = _2652.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2652.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2652.x * cbModelParam._m0[1u].z;
        }
        _1809 = frontier_phi_22_46_ladder_2;
        _1811 = frontier_phi_22_46_ladder_1;
        _1813 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1793 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_816, _817, _818), _1718);
        _1809 = _1793.x * cbModelParam._m0[1u].z;
        _1811 = _1793.y * cbModelParam._m0[1u].z;
        _1813 = _1793.z * cbModelParam._m0[1u].z;
    }
    float _1826 = (((_843 * _793) + _844) * _808) * ((cbModelParam._m0[1u].w * (_1809 - _1709)) + _1709);
    float _1828 = (((_843 * _795) + _844) * _808) * ((cbModelParam._m0[1u].w * (_1811 - _1711)) + _1711);
    float _1830 = (((_843 * _796) + _844) * _808) * ((cbModelParam._m0[1u].w * (_1813 - _1713)) + _1713);
    float _1833 = fma(_1830, cbSceneParam._m0[89u].z, fma(_1828, cbSceneParam._m0[89u].y, _1826 * cbSceneParam._m0[89u].x));
    float _1836 = fma(_1830, cbSceneParam._m0[90u].z, fma(_1828, cbSceneParam._m0[90u].y, _1826 * cbSceneParam._m0[90u].x));
    float _1839 = fma(_1830, cbSceneParam._m0[91u].z, fma(_1828, cbSceneParam._m0[91u].y, _1826 * cbSceneParam._m0[91u].x));
    vec4 _1847 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_730, _731));
    float _1849 = _1847.w;
    float _1861 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1849);
    float _1862 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1849);
    float _1863 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1849);
    uvec4 _1867 = floatBitsToUint(cbInstanceData._m0[_768 + 5u]);
    uint _1869 = _1867.x * 14u;
    uint _1870 = _1869 + 13u;
    float _1877 = _808 + (-1.0);
    float _1882 = (cbLight._m0[_1870].x * _1877) + 1.0;
    float _1883 = (cbLight._m0[_1870].y * _1877) + 1.0;
    float _1884 = (cbLight._m0[_1870].z * _1877) + 1.0;
    float _1885 = (cbLight._m0[_1870].w * _1877) + 1.0;
    uint _1886 = _1869 + 5u;
    float _1892 = isnan(1.0) ? _1883 : (isnan(_1883) ? 1.0 : min(_1883, 1.0));
    uint _1896 = _1869 + 4u;
    float _1906 = isnan(1.0) ? _1882 : (isnan(_1882) ? 1.0 : min(_1882, 1.0));
    uint _1910 = _1869 | 1u;
    float _1921 = dot(vec3(cbLight._m0[_1869].xyz), vec3(_642, _643, _644));
    float _1924 = dot(vec3(cbLight._m0[_1910].xyz), vec3(_642, _643, _644));
    float _4047 = isnan(0.0) ? _1921 : (isnan(_1921) ? 0.0 : max(_1921, 0.0));
    float _4058 = isnan(0.0) ? _1924 : (isnan(_1924) ? 0.0 : max(_1924, 0.0));
    float _1929 = (isnan(1.0) ? _4047 : (isnan(_4047) ? 1.0 : min(_4047, 1.0))) * 0.3183098733425140380859375;
    float _1931 = (isnan(1.0) ? _4058 : (isnan(_4058) ? 1.0 : min(_4058, 1.0))) * 0.3183098733425140380859375;
    float _1938 = ((cbLight._m0[_1886].x * _1892) * _1931) + (((cbLight._m0[_1896].x * _1861) * _1906) * _1929);
    float _1939 = ((_1892 * cbLight._m0[_1886].y) * _1931) + (((cbLight._m0[_1896].y * _1862) * _1906) * _1929);
    float _1940 = ((_1892 * cbLight._m0[_1886].z) * _1931) + (((cbLight._m0[_1896].z * _1863) * _1906) * _1929);
    uvec4 _1944 = floatBitsToUint(cbLight._m0[_1869 + 12u]);
    bool _1946 = _1944.x == 0u;
    float _1957;
    float _1959;
    float _1961;
    if (_1946)
    {
        _1957 = _1938;
        _1959 = _1939;
        _1961 = _1940;
    }
    else
    {
        uint _1965 = _1869 + 6u;
        float _1981 = (dot(vec3(cbLight._m0[_1869 + 2u].xyz), vec3(_642, _643, _644)) * 0.5) + 0.5;
        float _1982 = _1981 * _1981;
        float _4069 = isnan(0.0) ? _1982 : (isnan(_1982) ? 0.0 : max(_1982, 0.0));
        float _1983 = isnan(1.0) ? _4069 : (isnan(_4069) ? 1.0 : min(_4069, 1.0));
        float _1984 = isnan(1.0) ? _1884 : (isnan(_1884) ? 1.0 : min(_1884, 1.0));
        _1957 = (((cbLight._m0[_1965].x * 0.3183098733425140380859375) * _1983) * _1984) + _1938;
        _1959 = (((cbLight._m0[_1965].y * 0.3183098733425140380859375) * _1983) * _1984) + _1939;
        _1961 = (((cbLight._m0[_1965].z * 0.3183098733425140380859375) * _1983) * _1984) + _1940;
    }
    bool _1964 = _1944.y == 0u;
    float _2002;
    float _2004;
    float _2006;
    if (_1964)
    {
        _2002 = _1957;
        _2004 = _1959;
        _2006 = _1961;
    }
    else
    {
        uint _2175 = _1869 + 7u;
        float _2191 = (dot(vec3(cbLight._m0[_1869 + 3u].xyz), vec3(_642, _643, _644)) * 0.5) + 0.5;
        float _2192 = _2191 * _2191;
        float _4085 = isnan(0.0) ? _2192 : (isnan(_2192) ? 0.0 : max(_2192, 0.0));
        float _2193 = isnan(1.0) ? _4085 : (isnan(_4085) ? 1.0 : min(_4085, 1.0));
        float _2194 = isnan(1.0) ? _1885 : (isnan(_1885) ? 1.0 : min(_1885, 1.0));
        _2002 = (((cbLight._m0[_2175].x * 0.3183098733425140380859375) * _2193) * _2194) + _1957;
        _2004 = (((cbLight._m0[_2175].y * 0.3183098733425140380859375) * _2193) * _2194) + _1959;
        _2006 = (((cbLight._m0[_2175].z * 0.3183098733425140380859375) * _2193) * _2194) + _1961;
    }
    uint _2009 = _1869 + 8u;
    float _2022 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1869].w)) * _645) * 0.949999988079071044921875);
    float _2023 = _2022 * _2022;
    float _2024 = cbLight._m0[_1869].x + _722;
    float _2025 = cbLight._m0[_1869].y + _723;
    float _2026 = cbLight._m0[_1869].z + _724;
    float _2030 = inversesqrt(dot(vec3(_2024, _2025, _2026), vec3(_2024, _2025, _2026)));
    float _2031 = _2030 * _2024;
    float _2032 = _2030 * _2025;
    float _2033 = _2030 * _2026;
    float _2034 = dot(vec3(_642, _643, _644), vec3(cbLight._m0[_1869].xyz));
    float _4101 = isnan(0.0) ? _2034 : (isnan(_2034) ? 0.0 : max(_2034, 0.0));
    float _2037 = isnan(1.0) ? _4101 : (isnan(_4101) ? 1.0 : min(_4101, 1.0));
    float _4112 = isnan(0.0) ? _809 : (isnan(_809) ? 0.0 : max(_809, 0.0));
    float _2038 = isnan(1.0) ? _4112 : (isnan(_4112) ? 1.0 : min(_4112, 1.0));
    float _2039 = dot(vec3(_642, _643, _644), vec3(_2031, _2032, _2033));
    float _4123 = isnan(0.0) ? _2039 : (isnan(_2039) ? 0.0 : max(_2039, 0.0));
    float _2042 = isnan(1.0) ? _4123 : (isnan(_4123) ? 1.0 : min(_4123, 1.0));
    float _2043 = dot(vec3(cbLight._m0[_1869].xyz), vec3(_2031, _2032, _2033));
    float _4134 = isnan(0.0) ? _2043 : (isnan(_2043) ? 0.0 : max(_2043, 0.0));
    float _2047 = _2023 * _2023;
    float _2051 = ((_2042 * _2042) * (_2047 + (-1.0))) + 1.0;
    float _2059 = exp2(log2(1.0 - (isnan(1.0) ? _4134 : (isnan(_4134) ? 1.0 : min(_4134, 1.0)))) * 5.0);
    float _2060 = 0.959999978542327880859375 - _790;
    float _2062 = 0.959999978542327880859375 - _791;
    float _2063 = 0.959999978542327880859375 - _792;
    float _2070 = 1.0 - _2023;
    float _2081 = (0.5 / (((_2038 * ((_2037 * _2070) + _2023)) + 9.9999999392252902907785028219223e-09) + (((_2038 * _2070) + _2023) * _2037))) * _2037;
    float _4145 = isnan(0.0) ? _2081 : (isnan(_2081) ? 0.0 : max(_2081, 0.0));
    float _2083 = (isnan(1.0) ? _4145 : (isnan(_4145) ? 1.0 : min(_4145, 1.0))) * (_2047 / ((_2051 * _2051) * 3.141590118408203125));
    uint _2097 = _1869 + 9u;
    float _2108 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1910].w)) * _645) * 0.949999988079071044921875);
    float _2109 = _2108 * _2108;
    float _2110 = cbLight._m0[_1910].x + _722;
    float _2111 = cbLight._m0[_1910].y + _723;
    float _2112 = cbLight._m0[_1910].z + _724;
    float _2116 = inversesqrt(dot(vec3(_2110, _2111, _2112), vec3(_2110, _2111, _2112)));
    float _2117 = _2116 * _2110;
    float _2118 = _2116 * _2111;
    float _2119 = _2116 * _2112;
    float _2120 = dot(vec3(_642, _643, _644), vec3(cbLight._m0[_1910].xyz));
    float _4156 = isnan(0.0) ? _2120 : (isnan(_2120) ? 0.0 : max(_2120, 0.0));
    float _2123 = isnan(1.0) ? _4156 : (isnan(_4156) ? 1.0 : min(_4156, 1.0));
    float _2124 = dot(vec3(_642, _643, _644), vec3(_2117, _2118, _2119));
    float _4167 = isnan(0.0) ? _2124 : (isnan(_2124) ? 0.0 : max(_2124, 0.0));
    float _2127 = isnan(1.0) ? _4167 : (isnan(_4167) ? 1.0 : min(_4167, 1.0));
    float _2128 = dot(vec3(cbLight._m0[_1910].xyz), vec3(_2117, _2118, _2119));
    float _4178 = isnan(0.0) ? _2128 : (isnan(_2128) ? 0.0 : max(_2128, 0.0));
    float _2132 = _2109 * _2109;
    float _2136 = ((_2127 * _2127) * (_2132 + (-1.0))) + 1.0;
    float _2143 = exp2(log2(1.0 - (isnan(1.0) ? _4178 : (isnan(_4178) ? 1.0 : min(_4178, 1.0)))) * 5.0);
    float _2150 = 1.0 - _2109;
    float _2160 = (0.5 / (((_2038 * ((_2123 * _2150) + _2109)) + 9.9999999392252902907785028219223e-09) + (((_2038 * _2150) + _2109) * _2123))) * _2123;
    float _4189 = isnan(0.0) ? _2160 : (isnan(_2160) ? 0.0 : max(_2160, 0.0));
    float _2162 = (isnan(1.0) ? _4189 : (isnan(_4189) ? 1.0 : min(_4189, 1.0))) * (_2132 / ((_2136 * _2136) * 3.141590118408203125));
    float _2172 = (((((_2143 * _2060) + _793) * cbLight._m0[_2097].x) * _2162) * _1892) + ((((cbLight._m0[_2009].x * _1861) * ((_2059 * _2060) + _793)) * _2083) * _1906);
    float _2173 = (((((_2143 * _2062) + _795) * cbLight._m0[_2097].y) * _2162) * _1892) + ((((cbLight._m0[_2009].y * _1862) * ((_2059 * _2062) + _795)) * _2083) * _1906);
    float _2174 = (((((_2143 * _2063) + _796) * cbLight._m0[_2097].z) * _2162) * _1892) + ((((cbLight._m0[_2009].z * _1863) * ((_2059 * _2063) + _796)) * _2083) * _1906);
    float _2236;
    float _2238;
    float _2240;
    if (_1946)
    {
        _2236 = _2172;
        _2238 = _2173;
        _2240 = _2174;
    }
    else
    {
        uint _2242 = _1869 + 2u;
        uint _2246 = _1869 + 10u;
        float _2260 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2242].w)) * _645) * 0.949999988079071044921875);
        float _2261 = _2260 * _2260;
        float _2262 = cbLight._m0[_2242].x + _722;
        float _2263 = cbLight._m0[_2242].y + _723;
        float _2264 = cbLight._m0[_2242].z + _724;
        float _2268 = inversesqrt(dot(vec3(_2262, _2263, _2264), vec3(_2262, _2263, _2264)));
        float _2269 = _2268 * _2262;
        float _2270 = _2268 * _2263;
        float _2271 = _2268 * _2264;
        float _2272 = dot(vec3(_642, _643, _644), vec3(cbLight._m0[_2242].xyz));
        float _4200 = isnan(0.0) ? _2272 : (isnan(_2272) ? 0.0 : max(_2272, 0.0));
        float _2275 = isnan(1.0) ? _4200 : (isnan(_4200) ? 1.0 : min(_4200, 1.0));
        float _2276 = dot(vec3(_642, _643, _644), vec3(_2269, _2270, _2271));
        float _4211 = isnan(0.0) ? _2276 : (isnan(_2276) ? 0.0 : max(_2276, 0.0));
        float _2279 = isnan(1.0) ? _4211 : (isnan(_4211) ? 1.0 : min(_4211, 1.0));
        float _2280 = dot(vec3(cbLight._m0[_2242].xyz), vec3(_2269, _2270, _2271));
        float _4222 = isnan(0.0) ? _2280 : (isnan(_2280) ? 0.0 : max(_2280, 0.0));
        float _2284 = _2261 * _2261;
        float _2288 = ((_2279 * _2279) * (_2284 + (-1.0))) + 1.0;
        float _2295 = exp2(log2(1.0 - (isnan(1.0) ? _4222 : (isnan(_4222) ? 1.0 : min(_4222, 1.0)))) * 5.0);
        float _2302 = 1.0 - _2261;
        float _2312 = (0.5 / (((_2038 * ((_2275 * _2302) + _2261)) + 9.9999999392252902907785028219223e-09) + (((_2038 * _2302) + _2261) * _2275))) * _2275;
        float _4233 = isnan(0.0) ? _2312 : (isnan(_2312) ? 0.0 : max(_2312, 0.0));
        float _2314 = (isnan(1.0) ? _4233 : (isnan(_4233) ? 1.0 : min(_4233, 1.0))) * (_2284 / ((_2288 * _2288) * 3.141590118408203125));
        float _2315 = isnan(1.0) ? _1884 : (isnan(_1884) ? 1.0 : min(_1884, 1.0));
        _2236 = (((((_2295 * _2060) + _793) * cbLight._m0[_2246].x) * _2314) * _2315) + _2172;
        _2238 = (((((_2295 * _2062) + _795) * cbLight._m0[_2246].y) * _2314) * _2315) + _2173;
        _2240 = (((((_2295 * _2063) + _796) * cbLight._m0[_2246].z) * _2314) * _2315) + _2174;
    }
    float _2350;
    float _2352;
    float _2354;
    if (_1964)
    {
        _2350 = _2236;
        _2352 = _2238;
        _2354 = _2240;
    }
    else
    {
        uint _2361 = _1869 + 3u;
        uint _2365 = _1869 + 11u;
        float _2379 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2361].w)) * _645) * 0.949999988079071044921875);
        float _2380 = _2379 * _2379;
        float _2381 = cbLight._m0[_2361].x + _722;
        float _2382 = cbLight._m0[_2361].y + _723;
        float _2383 = cbLight._m0[_2361].z + _724;
        float _2387 = inversesqrt(dot(vec3(_2381, _2382, _2383), vec3(_2381, _2382, _2383)));
        float _2388 = _2387 * _2381;
        float _2389 = _2387 * _2382;
        float _2390 = _2387 * _2383;
        float _2391 = dot(vec3(_642, _643, _644), vec3(cbLight._m0[_2361].xyz));
        float _4249 = isnan(0.0) ? _2391 : (isnan(_2391) ? 0.0 : max(_2391, 0.0));
        float _2394 = isnan(1.0) ? _4249 : (isnan(_4249) ? 1.0 : min(_4249, 1.0));
        float _2395 = dot(vec3(_642, _643, _644), vec3(_2388, _2389, _2390));
        float _4260 = isnan(0.0) ? _2395 : (isnan(_2395) ? 0.0 : max(_2395, 0.0));
        float _2398 = isnan(1.0) ? _4260 : (isnan(_4260) ? 1.0 : min(_4260, 1.0));
        float _2399 = dot(vec3(cbLight._m0[_2361].xyz), vec3(_2388, _2389, _2390));
        float _4271 = isnan(0.0) ? _2399 : (isnan(_2399) ? 0.0 : max(_2399, 0.0));
        float _2403 = _2380 * _2380;
        float _2407 = ((_2398 * _2398) * (_2403 + (-1.0))) + 1.0;
        float _2414 = exp2(log2(1.0 - (isnan(1.0) ? _4271 : (isnan(_4271) ? 1.0 : min(_4271, 1.0)))) * 5.0);
        float _2421 = 1.0 - _2380;
        float _2431 = (0.5 / (((_2038 * ((_2394 * _2421) + _2380)) + 9.9999999392252902907785028219223e-09) + (((_2038 * _2421) + _2380) * _2394))) * _2394;
        float _4282 = isnan(0.0) ? _2431 : (isnan(_2431) ? 0.0 : max(_2431, 0.0));
        float _2433 = (isnan(1.0) ? _4282 : (isnan(_4282) ? 1.0 : min(_4282, 1.0))) * (_2403 / ((_2407 * _2407) * 3.141590118408203125));
        float _2434 = isnan(1.0) ? _1885 : (isnan(_1885) ? 1.0 : min(_1885, 1.0));
        _2350 = (((((_2414 * _2060) + _793) * cbLight._m0[_2365].x) * _2433) * _2434) + _2236;
        _2352 = (((((_2414 * _2062) + _795) * cbLight._m0[_2365].y) * _2433) * _2434) + _2238;
        _2354 = (((((_2414 * _2063) + _796) * cbLight._m0[_2365].z) * _2433) * _2434) + _2240;
    }
    float _2569;
    float _2571;
    float _2573;
    float _2575;
    float _2577;
    float _2579;
    if (_1867.y == 0u)
    {
        float _2509 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2510 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2509;
        float _2511 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2509;
        float _2512 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2509;
        uvec4 _2524 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2525 = _2524.x;
        uint _2536 = uint((float(_2524.y) * floor(float(uint(cbSceneParam._m0[85u].y * _731) / _2525))) + floor(float(uint(cbSceneParam._m0[85u].x * _730) / _2525)));
        float _2546 = (log2(_2512 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2547 = isnan(0.0) ? _2546 : (isnan(_2546) ? 0.0 : max(_2546, 0.0));
        uint _2550 = uint(isnan(14.0) ? _2547 : (isnan(_2547) ? 14.0 : min(_2547, 14.0)));
        uvec4 _2555 = texelFetch(g_lightClusterGridBuffer, int(((_2550 << 2u) + (_2536 << 6u)) >> 2u));
        uint _2556 = _2555.x;
        uint _2557 = _2524.z;
        float _2657;
        float _2659;
        float _2661;
        float _2663;
        float _2665;
        float _2667;
        if (((((1u << ((_2557 >> 4u) & 15u)) + 4294967295u) & _2556) == 0u) || ((_2557 & 240u) == 0u))
        {
            _2657 = 0.0;
            _2659 = 0.0;
            _2661 = 0.0;
            _2663 = 0.0;
            _2665 = 0.0;
            _2667 = 0.0;
        }
        else
        {
            float _2658;
            float _2660;
            float _2662;
            float _2664;
            float _2666;
            float _2668;
            float _2801 = 0.0;
            float _2802 = 0.0;
            float _2803 = 0.0;
            float _2804 = 0.0;
            float _2805 = 0.0;
            float _2806 = 0.0;
            uint _2807 = 0u;
            uint _2816;
            bool _2817;
            for (;;)
            {
                _2816 = texelFetch(g_lightClassification, int((((_2550 << 5u) + (_2536 << 9u)) + (_2807 << 2u)) >> 2u)).x;
                _2817 = _2816 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2817)
                {
                    frontier_phi_61_pred = _2801;
                    frontier_phi_61_pred_1 = _2806;
                    frontier_phi_61_pred_2 = _2805;
                    frontier_phi_61_pred_3 = _2804;
                    frontier_phi_61_pred_4 = _2803;
                    frontier_phi_61_pred_5 = _2802;
                }
                else
                {
                    float _2925;
                    float _2926;
                    float _2927;
                    float _2928;
                    float _2929;
                    float _2930;
                    uint _2931;
                    _2925 = _2801;
                    _2926 = _2802;
                    _2927 = _2803;
                    _2928 = _2804;
                    _2929 = _2805;
                    _2930 = _2806;
                    _2931 = _2816;
                    float _2857;
                    float _2858;
                    float _2859;
                    float _2860;
                    float _2861;
                    float _2862;
                    for (;;)
                    {
                        uint _2935 = uint(findLSB(_2931)) + (_2807 << 5u);
                        uint _2932 = (_2931 + 4294967295u) & _2931;
                        uint _2937 = _2935 * 48u;
                        vec4 _2951 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2937)).x, texelFetch(g_PointLightRenderingBuffer, int(_2937 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2937 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2937 + 3u)).x));
                        uint _2957 = (_2935 * 48u) + 4u;
                        vec4 _2970 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2957)).x, texelFetch(g_PointLightRenderingBuffer, int(_2957 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2957 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2957 + 3u)).x));
                        uint _2976 = (_2935 * 48u) + 8u;
                        vec3 _2987 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2976)).x, texelFetch(g_PointLightRenderingBuffer, int(_2976 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2976 + 2u)).x));
                        float _2991 = _2951.x - _2510;
                        float _2992 = _2951.y - _2511;
                        float _2993 = _2951.z - _2512;
                        float _2994 = dot(vec3(_2991, _2992, _2993), vec3(_2991, _2992, _2993));
                        float _2997 = inversesqrt(_2994);
                        float _2998 = _2997 * _2991;
                        float _2999 = _2997 * _2992;
                        float _3000 = _2997 * _2993;
                        float _3001 = dot(vec3(_749, _752, _755), vec3(_2998, _2999, _3000));
                        float _3006 = 1.0 - (_2994 * _2951.w);
                        float _4308 = isnan(0.0) ? _3006 : (isnan(_3006) ? 0.0 : max(_3006, 0.0));
                        float _3007 = isnan(1.0) ? _4308 : (isnan(_4308) ? 1.0 : min(_4308, 1.0));
                        float _3008 = sqrt(_2994) * _2970.w;
                        float _3011 = 1.39999997615814208984375 / (_3008 + 1.39999997615814208984375);
                        float _3012 = _3011 * _3011;
                        float _3015 = ((1.0 - _3012) * _3001) + _3012;
                        float _3018 = _3008 * _3008;
                        float _3022 = ((isnan(0.0) ? _3015 : (isnan(_3015) ? 0.0 : max(_3015, 0.0))) * _3007) / ((_3018 * 0.699999988079071044921875) + 1.0);
                        float _3026 = (-0.0) - _2510;
                        float _3027 = (-0.0) - _2511;
                        float _3028 = (-0.0) - _2512;
                        float _3032 = inversesqrt(dot(vec3(_3026, _3027, _3028), vec3(_3026, _3027, _3028)));
                        float _3033 = _3032 * _3026;
                        float _3034 = _3032 * _3027;
                        float _3035 = _3032 * _3028;
                        float _3043 = exp2(log2(1.0 / ((_3018 * 3.5) + 5.0)) * 0.25);
                        float _3044 = 1.0 - _824;
                        float _3051 = sqrt(1.0 - ((1.0 - (_3044 * _3044)) * (1.0 - (_3043 * _3043))));
                        float _3052 = _3051 * _3051;
                        float _3053 = _3052 * _3052;
                        float _3054 = _3033 + _2998;
                        float _3055 = _3034 + _2999;
                        float _3056 = _3035 + _3000;
                        float _3060 = inversesqrt(dot(vec3(_3054, _3055, _3056), vec3(_3054, _3055, _3056)));
                        float _3064 = dot(vec3(_749, _752, _755), vec3(_3033, _3034, _3035));
                        float _4324 = isnan(0.0) ? _3064 : (isnan(_3064) ? 0.0 : max(_3064, 0.0));
                        float _3067 = isnan(1.0) ? _4324 : (isnan(_4324) ? 1.0 : min(_4324, 1.0));
                        float _3068 = dot(vec3(_749, _752, _755), vec3(_3060 * _3054, _3060 * _3055, _3060 * _3056));
                        float _4335 = isnan(0.0) ? _3068 : (isnan(_3068) ? 0.0 : max(_3068, 0.0));
                        float _3071 = isnan(1.0) ? _4335 : (isnan(_4335) ? 1.0 : min(_4335, 1.0));
                        float _3075 = ((_3071 * _3071) * (_3053 + (-1.0))) + 1.0;
                        float _3076 = _3011 * _3052;
                        float _3077 = _3076 * _3076;
                        float _3080 = ((1.0 - _3077) * _3001) + _3077;
                        float _4346 = isnan(0.0) ? _3080 : (isnan(_3080) ? 0.0 : max(_3080, 0.0));
                        float _3081 = isnan(1.0) ? _4346 : (isnan(_4346) ? 1.0 : min(_4346, 1.0));
                        float _3082 = 1.0 - _3052;
                        float _3092 = (0.5 / (((_3081 * ((_3067 * _3082) + _3052)) + 9.9999999392252902907785028219223e-09) + (((_3081 * _3082) + _3052) * _3067))) * _3081;
                        float _4357 = isnan(0.0) ? _3092 : (isnan(_3092) ? 0.0 : max(_3092, 0.0));
                        float _3103 = (((_3053 * 3.1415927410125732421875) * (isnan(1.0) ? _4357 : (isnan(_4357) ? 1.0 : min(_4357, 1.0)))) / ((_3075 * _3075) * ((_3018 * 2.1991131305694580078125) + 3.141590118408203125))) * _3007;
                        _2860 = (_3022 * _2970.x) + _2928;
                        _2861 = (_3022 * _2970.y) + _2929;
                        _2862 = (_3022 * _2970.z) + _2930;
                        _2857 = (_3103 * _2987.x) + _2925;
                        _2858 = (_3103 * _2987.y) + _2926;
                        _2859 = (_3103 * _2987.z) + _2927;
                        if (_2932 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2925 = _2857;
                            _2926 = _2858;
                            _2927 = _2859;
                            _2928 = _2860;
                            _2929 = _2861;
                            _2930 = _2862;
                            _2931 = _2932;
                        }
                    }
                    frontier_phi_61_pred = _2857;
                    frontier_phi_61_pred_1 = _2862;
                    frontier_phi_61_pred_2 = _2861;
                    frontier_phi_61_pred_3 = _2860;
                    frontier_phi_61_pred_4 = _2859;
                    frontier_phi_61_pred_5 = _2858;
                }
                _2658 = frontier_phi_61_pred;
                _2668 = frontier_phi_61_pred_1;
                _2666 = frontier_phi_61_pred_2;
                _2664 = frontier_phi_61_pred_3;
                _2662 = frontier_phi_61_pred_4;
                _2660 = frontier_phi_61_pred_5;
                uint _2808 = _2807 + 1u;
                if (_2808 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2801 = _2658;
                    _2802 = _2660;
                    _2803 = _2662;
                    _2804 = _2664;
                    _2805 = _2666;
                    _2806 = _2668;
                    _2807 = _2808;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2657 = _2658;
            _2659 = _2660;
            _2661 = _2662;
            _2663 = _2664;
            _2665 = _2666;
            _2667 = _2668;
        }
        uvec4 _2671 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2672 = _2671.z;
        uint _2674 = (_2672 >> 8u) & 15u;
        float _2769;
        float _2771;
        float _2773;
        float _2775;
        float _2777;
        float _2779;
        if (((4294967295u << _2674) & _2556) == 0u)
        {
            _2769 = _2657;
            _2771 = _2659;
            _2773 = _2661;
            _2775 = _2663;
            _2777 = _2665;
            _2779 = _2667;
        }
        else
        {
            float _2794 = inversesqrt(dot(vec3(_2510, _2511, _2512), vec3(_2510, _2511, _2512)));
            float _2795 = _2794 * _2510;
            float _2796 = _2794 * _2511;
            float _2797 = _2794 * _2512;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2674 < ((_2672 >> 12u) & 15u))
            {
                float _2770;
                float _2772;
                float _2774;
                float _2776;
                float _2778;
                float _2780;
                float _2908 = _2657;
                float _2909 = _2659;
                float _2910 = _2661;
                float _2911 = _2663;
                float _2912 = _2665;
                float _2913 = _2667;
                uint _2914 = _2674;
                uint _2923;
                bool _2924;
                for (;;)
                {
                    _2923 = texelFetch(g_lightClassification, int((((_2550 << 5u) + (_2536 << 9u)) + (_2914 << 2u)) >> 2u)).x;
                    _2924 = _2923 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2924)
                    {
                        frontier_phi_67_pred = _2911;
                        frontier_phi_67_pred_1 = _2912;
                        frontier_phi_67_pred_2 = _2913;
                        frontier_phi_67_pred_3 = _2910;
                        frontier_phi_67_pred_4 = _2909;
                        frontier_phi_67_pred_5 = _2908;
                    }
                    else
                    {
                        float _3108;
                        float _3109;
                        float _3110;
                        float _3111;
                        float _3112;
                        float _3113;
                        float _3402;
                        float _3403;
                        float _3404;
                        float _3405;
                        float _3406;
                        float _3407;
                        float _3121 = _2908;
                        float _3122 = _2909;
                        float _3123 = _2910;
                        float _3124 = _2911;
                        float _3125 = _2912;
                        float _3126 = _2913;
                        uint _3127 = _2923;
                        uint _3128;
                        vec4 _3153;
                        float _3154;
                        vec4 _3169;
                        vec3 _3181;
                        vec4 _3196;
                        vec4 _3211;
                        float _3258;
                        bool _3259;
                        for (;;)
                        {
                            uint _3138 = ((_2914 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3127));
                            _3128 = (_3127 + 4294967295u) & _3127;
                            uint _3140 = _3138 * 40u;
                            _3153 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3140)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3140 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3140 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3140 + 3u)).x));
                            _3154 = _3153.w;
                            uint _3156 = (_3138 * 40u) + 4u;
                            _3169 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3156)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3156 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3156 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3156 + 3u)).x));
                            uint _3171 = (_3138 * 40u) + 8u;
                            _3181 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3171)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3171 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3171 + 2u)).x));
                            uint _3183 = (_3138 * 40u) + 16u;
                            _3196 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3183)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3183 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3183 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3183 + 3u)).x));
                            uint _3198 = (_3138 * 40u) + 20u;
                            _3211 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3198)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3198 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3198 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3198 + 3u)).x));
                            uint _3214 = (_3138 * 40u) + 24u;
                            vec4 _3227 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3214)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3214 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3214 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3214 + 3u)).x));
                            uint _3233 = (_3138 * 40u) + 28u;
                            vec4 _3246 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3233)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3233 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3233 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3233 + 3u)).x));
                            _3258 = fma(_2512, _3246.z, fma(_2511, _3246.y, _3246.x * _2510)) + _3246.w;
                            _3259 = !((fma(_2512, _3227.z, fma(_2511, _3227.y, _3227.x * _2510)) + _3227.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3259)
                            {
                                float _3286 = _3153.x - _2510;
                                float _3287 = _3153.y - _2511;
                                float _3288 = _3153.z - _2512;
                                float _3289 = dot(vec3(_3286, _3287, _3288), vec3(_3286, _3287, _3288));
                                float _3292 = inversesqrt(_3289);
                                float _3293 = _3292 * _3286;
                                float _3294 = _3292 * _3287;
                                float _3295 = _3292 * _3288;
                                float _3299 = 1.0 - (_3289 / (_3154 * _3154));
                                float _4368 = isnan(0.0) ? _3299 : (isnan(_3299) ? 0.0 : max(_3299, 0.0));
                                float _3300 = isnan(1.0) ? _4368 : (isnan(_4368) ? 1.0 : min(_4368, 1.0));
                                float _3304 = sqrt(_3289) * _3169.w;
                                float _3306 = 1.39999997615814208984375 / (_3304 + 1.39999997615814208984375);
                                float _3307 = _3306 * _3306;
                                float _3310 = ((1.0 - _3307) * dot(vec3(_3293, _3294, _3295), vec3(_749, _752, _755))) + _3307;
                                float _3313 = _3304 * _3304;
                                float _3317 = (fma(_2512, _3196.z, fma(_2511, _3196.y, _3196.x * _2510)) + _3196.w) / _3258;
                                float _3318 = (fma(_2512, _3211.z, fma(_2511, _3211.y, _3211.x * _2510)) + _3211.w) / _3258;
                                float _3322 = 1.0 - dot(vec2(_3317, _3318), vec2(_3317, _3318));
                                float _4384 = isnan(0.0) ? _3322 : (isnan(_3322) ? 0.0 : max(_3322, 0.0));
                                float _3323 = isnan(1.0) ? _4384 : (isnan(_4384) ? 1.0 : min(_4384, 1.0));
                                float _3324 = _3323 * (((isnan(0.0) ? _3310 : (isnan(_3310) ? 0.0 : max(_3310, 0.0))) * _3300) / ((_3313 * 0.699999988079071044921875) + 1.0));
                                float _3336 = exp2(log2(1.0 / ((_3313 * 3.5) + 5.0)) * 0.25);
                                float _3337 = 1.0 - _824;
                                float _3344 = sqrt(1.0 - ((1.0 - (_3337 * _3337)) * (1.0 - (_3336 * _3336))));
                                float _3345 = _3344 * _3344;
                                float _3346 = _3345 * _3345;
                                float _3347 = _3293 - _2795;
                                float _3348 = _3294 - _2796;
                                float _3349 = _3295 - _2797;
                                float _3353 = inversesqrt(dot(vec3(_3347, _3348, _3349), vec3(_3347, _3348, _3349)));
                                float _3357 = dot(vec3(_749, _752, _755), vec3((-0.0) - _2795, (-0.0) - _2796, (-0.0) - _2797));
                                float _4395 = isnan(0.0) ? _3357 : (isnan(_3357) ? 0.0 : max(_3357, 0.0));
                                float _3360 = isnan(1.0) ? _4395 : (isnan(_4395) ? 1.0 : min(_4395, 1.0));
                                float _3361 = dot(vec3(_749, _752, _755), vec3(_3353 * _3347, _3353 * _3348, _3353 * _3349));
                                float _4406 = isnan(0.0) ? _3361 : (isnan(_3361) ? 0.0 : max(_3361, 0.0));
                                float _3364 = isnan(1.0) ? _4406 : (isnan(_4406) ? 1.0 : min(_4406, 1.0));
                                float _3368 = ((_3364 * _3364) * (_3346 + (-1.0))) + 1.0;
                                float _3369 = _3306 * _3345;
                                float _3370 = _3369 * _3369;
                                float _3376 = ((1.0 - _3370) * dot(vec3(_749, _752, _755), vec3(_3293, _3294, _3295))) + _3370;
                                float _4417 = isnan(0.0) ? _3376 : (isnan(_3376) ? 0.0 : max(_3376, 0.0));
                                float _3377 = isnan(1.0) ? _4417 : (isnan(_4417) ? 1.0 : min(_4417, 1.0));
                                float _3378 = 1.0 - _3345;
                                float _3388 = (0.5 / (((_3377 * ((_3360 * _3378) + _3345)) + 9.9999999392252902907785028219223e-09) + (((_3377 * _3378) + _3345) * _3360))) * _3377;
                                float _4428 = isnan(0.0) ? _3388 : (isnan(_3388) ? 0.0 : max(_3388, 0.0));
                                float _3398 = (_3323 * _3300) * (((_3346 * 3.1415927410125732421875) * (isnan(1.0) ? _4428 : (isnan(_4428) ? 1.0 : min(_4428, 1.0)))) / ((_3368 * _3368) * ((_3313 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3398 * _3181.x;
                                frontier_phi_73_pred_1 = _3398 * _3181.y;
                                frontier_phi_73_pred_2 = _3324 * _3169.z;
                                frontier_phi_73_pred_3 = _3324 * _3169.y;
                                frontier_phi_73_pred_4 = _3324 * _3169.x;
                                frontier_phi_73_pred_5 = _3398 * _3181.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3402 = frontier_phi_73_pred;
                            _3403 = frontier_phi_73_pred_1;
                            _3407 = frontier_phi_73_pred_2;
                            _3406 = frontier_phi_73_pred_3;
                            _3405 = frontier_phi_73_pred_4;
                            _3404 = frontier_phi_73_pred_5;
                            _3111 = _3405 + _3124;
                            _3112 = _3406 + _3125;
                            _3113 = _3407 + _3126;
                            _3108 = _3402 + _3121;
                            _3109 = _3403 + _3122;
                            _3110 = _3404 + _3123;
                            if (_3128 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3121 = _3108;
                                _3122 = _3109;
                                _3123 = _3110;
                                _3124 = _3111;
                                _3125 = _3112;
                                _3126 = _3113;
                                _3127 = _3128;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3111;
                        frontier_phi_67_pred_1 = _3112;
                        frontier_phi_67_pred_2 = _3113;
                        frontier_phi_67_pred_3 = _3110;
                        frontier_phi_67_pred_4 = _3109;
                        frontier_phi_67_pred_5 = _3108;
                    }
                    _2776 = frontier_phi_67_pred;
                    _2778 = frontier_phi_67_pred_1;
                    _2780 = frontier_phi_67_pred_2;
                    _2774 = frontier_phi_67_pred_3;
                    _2772 = frontier_phi_67_pred_4;
                    _2770 = frontier_phi_67_pred_5;
                    uint _2915 = _2914 + 1u;
                    if (_2915 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2908 = _2770;
                        _2909 = _2772;
                        _2910 = _2774;
                        _2911 = _2776;
                        _2912 = _2778;
                        _2913 = _2780;
                        _2914 = _2915;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2778;
                frontier_phi_55_56_ladder_1 = _2780;
                frontier_phi_55_56_ladder_2 = _2776;
                frontier_phi_55_56_ladder_3 = _2774;
                frontier_phi_55_56_ladder_4 = _2772;
                frontier_phi_55_56_ladder_5 = _2770;
            }
            else
            {
                frontier_phi_55_56_ladder = _2665;
                frontier_phi_55_56_ladder_1 = _2667;
                frontier_phi_55_56_ladder_2 = _2663;
                frontier_phi_55_56_ladder_3 = _2661;
                frontier_phi_55_56_ladder_4 = _2659;
                frontier_phi_55_56_ladder_5 = _2657;
            }
            _2769 = frontier_phi_55_56_ladder_5;
            _2771 = frontier_phi_55_56_ladder_4;
            _2773 = frontier_phi_55_56_ladder_3;
            _2775 = frontier_phi_55_56_ladder_2;
            _2777 = frontier_phi_55_56_ladder;
            _2779 = frontier_phi_55_56_ladder_1;
        }
        float _2784 = isnan(1.0) ? _808 : (isnan(_808) ? 1.0 : min(_808, 1.0));
        _2569 = (_2784 * _2775) + _2002;
        _2571 = (_2784 * _2777) + _2004;
        _2573 = (_2784 * _2779) + _2006;
        _2575 = ((_2769 * _793) * _2784) + _2350;
        _2577 = ((_2771 * _795) * _2784) + _2352;
        _2579 = ((_2773 * _796) * _2784) + _2354;
    }
    else
    {
        _2569 = _2002;
        _2571 = _2004;
        _2573 = _2006;
        _2575 = _2350;
        _2577 = _2352;
        _2579 = _2354;
    }
    float _4444 = isnan(0.0) ? _783 : (isnan(_783) ? 0.0 : max(_783, 0.0));
    float _4455 = isnan(0.0) ? _784 : (isnan(_784) ? 0.0 : max(_784, 0.0));
    float _4466 = isnan(0.0) ? _785 : (isnan(_785) ? 0.0 : max(_785, 0.0));
    uint _2599 = _768 + 6u;
    float _2607 = _730 / cbSceneParam._m0[86u].x;
    float _2608 = _731 / cbSceneParam._m0[86u].y;
    vec4 _2622 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2607, _2608, (log2((isnan(cbSceneParam._m0[77u].w) ? _665 : (isnan(_665) ? cbSceneParam._m0[77u].w : min(_665, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2624 = _2622.x;
    float _2625 = _2622.y;
    float _2626 = _2622.z;
    float _2627 = _2622.w;
    float _2719;
    float _2721;
    float _2723;
    float _2725;
    if (_665 > cbSceneParam._m0[78u].w)
    {
        float _2682 = isnan(_665) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _665 : min(cbSceneParam._m0[80u].w, _665));
        float _2683 = _2682 / _665;
        float _2694 = _2683 * _715;
        float _2695 = _716 * _2683;
        float _2696 = (-0.0) - _2695;
        float _2697 = _2683 * _717;
        float _2699 = (cbSceneParam._m0[77u].w * _2696) / _2682;
        float _2700 = _2699 + cbSceneParam._m0[79u].w;
        float _2701 = cbSceneParam._m0[79u].w - _2695;
        float _2707 = sqrt(((_2694 * _2694) + (_2695 * _2695)) + (_2697 * _2697));
        float _2710 = (1.0 - (cbSceneParam._m0[77u].w / _2682)) * _2707;
        float _2715 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2717 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2870;
        if (abs((_2696 - _2699) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2870 = ((((_2700 > 0.0) ? exp2(_2715 * _2700) : (2.0 - exp2(_2717 * _2700))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2710;
        }
        else
        {
            float _2830 = 1.0 / cbSceneParam._m0[80u].x;
            float _2831 = isnan(_2701) ? _2700 : (isnan(_2700) ? _2701 : max(_2700, _2701));
            float _2832 = isnan(_2701) ? _2700 : (isnan(_2700) ? _2701 : min(_2700, _2701));
            float _2841 = isnan(0.0) ? _2831 : (isnan(_2831) ? 0.0 : min(_2831, 0.0));
            float _2842 = isnan(0.0) ? _2832 : (isnan(_2832) ? 0.0 : min(_2832, 0.0));
            _2870 = ((abs(_2707 / _2696) * cbSceneParam._m0[80u].y) * ((((_2841 - _2842) * 2.0) - ((exp2(_2715 * (isnan(0.0) ? _2831 : (isnan(_2831) ? 0.0 : max(_2831, 0.0)))) - exp2(_2715 * (isnan(0.0) ? _2832 : (isnan(_2832) ? 0.0 : max(_2832, 0.0))))) * _2830)) - ((exp2(_2717 * _2841) - exp2(_2717 * _2842)) * _2830))) + (_2710 * cbSceneParam._m0[80u].z);
        }
        vec4 _2872 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2607, _2608, 1.0), 0.0);
        float _2881 = exp2((_2870 * (-1.44269502162933349609375)) * (1.0 - _2872.w));
        float _2882 = log2(_2881);
        float _2898 = log2(_2627);
        _2719 = (exp2(_2898 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2882 * cbSceneParam._m0[78u].x)) * _2872.x) / cbSceneParam._m0[78u].x)) + _2624;
        _2721 = (exp2(_2898 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2882 * cbSceneParam._m0[78u].y)) * _2872.y) / cbSceneParam._m0[78u].y)) + _2625;
        _2723 = (exp2(_2898 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2882 * cbSceneParam._m0[78u].z)) * _2872.z) / cbSceneParam._m0[78u].z)) + _2626;
        _2725 = _2881 * _2627;
    }
    else
    {
        _2719 = _2624;
        _2721 = _2625;
        _2723 = _2626;
        _2725 = _2627;
    }
    float _2737 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2738 = _2737 == 3.0;
    float _2739 = log2(_2725);
    float _2746 = exp2(_2739 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4444 : (isnan(_4444) ? 1.0 : min(_4444, 1.0))) * (_2569 + ((isnan(0.0) ? _1539 : (isnan(_1539) ? 0.0 : max(_1539, 0.0))) * _808))) + ((_2575 + ((isnan(0.0) ? _1833 : (isnan(_1833) ? 0.0 : max(_1833, 0.0))) * _1618)) * cbPerFrame._m0[3u].x));
    float _2747 = exp2(_2739 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4455 : (isnan(_4455) ? 1.0 : min(_4455, 1.0))) * (_2571 + ((isnan(0.0) ? _1542 : (isnan(_1542) ? 0.0 : max(_1542, 0.0))) * _808))) + ((_2577 + ((isnan(0.0) ? _1836 : (isnan(_1836) ? 0.0 : max(_1836, 0.0))) * _1618)) * cbPerFrame._m0[3u].x));
    float _2748 = exp2(_2739 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4466 : (isnan(_4466) ? 1.0 : min(_4466, 1.0))) * (_2573 + ((isnan(0.0) ? _1545 : (isnan(_1545) ? 0.0 : max(_1545, 0.0))) * _808))) + ((_2579 + ((isnan(0.0) ? _1839 : (isnan(_1839) ? 0.0 : max(_1839, 0.0))) * _1618)) * cbPerFrame._m0[3u].x));
    float _2757 = (_2737 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2757 * (_2738 ? _2746 : (_2746 + (cbSceneParam._m0[72u].w * _2719)));
    SV_Target.y = _2757 * (_2738 ? _2747 : (_2747 + (cbSceneParam._m0[72u].w * _2721)));
    SV_Target.z = _2757 * (_2738 ? _2748 : (_2748 + (cbSceneParam._m0[72u].w * _2723)));
    SV_Target.w = cbInstanceData._m0[_2599].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2599].w;
}


