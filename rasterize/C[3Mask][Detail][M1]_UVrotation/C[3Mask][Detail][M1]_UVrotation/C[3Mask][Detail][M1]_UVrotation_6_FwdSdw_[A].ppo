#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[20];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_19;
layout(set = 0, binding = 11) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_3;
layout(set = 0, binding = 14) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_5;
layout(set = 0, binding = 15) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_6;
layout(set = 0, binding = 17) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_8;
layout(set = 0, binding = 2) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_13;
layout(set = 0, binding = 5) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_14;
layout(set = 0, binding = 6) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_15;
layout(set = 0, binding = 7) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_16;
layout(set = 0, binding = 8) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_17;
layout(set = 0, binding = 9) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_18;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1264;
float _3929;
float _3930;
float _3931;
float _3932;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _207 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _208 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _209 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _215 = inversesqrt(dot(vec3(_207, _208, _209), vec3(_207, _208, _209)));
    float _222 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _229 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _252 = sin(cbMtdParam._m0[18u].x);
    float _253 = cos(cbMtdParam._m0[18u].x);
    float _254 = TEXCOORD.x - cbMtdParam._m0[17u].w;
    float _255 = TEXCOORD.y - cbMtdParam._m0[17u].w;
    float _263 = (cbMtdParam._m0[17u].w + cbMtdParam._m0[19u].y) + fma(_255, (-0.0) - _252, _253 * _254);
    float _265 = (cbMtdParam._m0[17u].w + cbMtdParam._m0[19u].z) + fma(_255, _253, _254 * _252);
    vec4 _278 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * _263) + cbTextureTilingScale._m0[1u].z, (_265 * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w));
    float _284 = _278.x * cbMtdParam._m0[10u].x;
    float _285 = _278.y * cbMtdParam._m0[10u].y;
    float _286 = _278.z * cbMtdParam._m0[10u].z;
    vec4 _304 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w));
    vec4 _323 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_0, SS_WrapLinear), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _348 = cbMtdParam._m0[19u].x * texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.x) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD.y) + cbTextureTilingScale._m0[13u].w)).x;
    float _359 = ((cbMtdParam._m0[15u].x * (-1.39999997615814208984375)) * (((1.0 - _323.x) * 2.0) - _348)) + 1.0;
    float _3941 = isnan(0.0) ? _359 : (isnan(_359) ? 0.0 : max(_359, 0.0));
    float _360 = isnan(1.0) ? _3941 : (isnan(_3941) ? 1.0 : min(_3941, 1.0));
    float _367 = (_360 * ((_304.x * cbMtdParam._m0[11u].x) - _284)) + _284;
    float _368 = (_360 * ((_304.y * cbMtdParam._m0[11u].y) - _285)) + _285;
    float _369 = (_360 * ((_304.z * cbMtdParam._m0[11u].z) - _286)) + _286;
    vec4 _387 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_8, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[17u].x * TEXCOORD.x) + cbTextureTilingScale._m0[17u].z, (cbTextureTilingScale._m0[17u].y * TEXCOORD.y) + cbTextureTilingScale._m0[17u].w));
    float _400 = (((((1.0 - _323.y) * 2.0) - _348) * (-1.39999997615814208984375)) * cbMtdParam._m0[18u].z) + 1.0;
    float _3952 = isnan(0.0) ? _400 : (isnan(_400) ? 0.0 : max(_400, 0.0));
    float _401 = isnan(1.0) ? _3952 : (isnan(_3952) ? 1.0 : min(_3952, 1.0));
    float _408 = (((_387.x * cbMtdParam._m0[12u].x) - _367) * _401) + _367;
    float _409 = (_401 * ((_387.y * cbMtdParam._m0[12u].y) - _368)) + _368;
    float _410 = (_401 * ((_387.z * cbMtdParam._m0[12u].z) - _369)) + _369;
    vec4 _427 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _440 = (((((1.0 - _323.z) * 2.0) - _348) * (-1.39999997615814208984375)) * cbMtdParam._m0[18u].w) + 1.0;
    float _3963 = isnan(0.0) ? _440 : (isnan(_440) ? 0.0 : max(_440, 0.0));
    float _441 = isnan(1.0) ? _3963 : (isnan(_3963) ? 1.0 : min(_3963, 1.0));
    vec4 _469 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _477 = ((((((_427.x * cbMtdParam._m0[13u].x) - _408) * _441) + _408) * 4.55000019073486328125) * cbMtdParam._m0[9u].x) * _469.x;
    float _480 = ((((_441 * ((_427.y * cbMtdParam._m0[13u].y) - _409)) + _409) * 4.55000019073486328125) * cbMtdParam._m0[9u].y) * _469.y;
    float _483 = ((((_441 * ((_427.z * cbMtdParam._m0[13u].z) - _410)) + _410) * 4.55000019073486328125) * cbMtdParam._m0[9u].z) * _469.z;
    vec4 _496 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * _263) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _265) + cbTextureTilingScale._m0[5u].w));
    float _498 = _496.x;
    float _516 = ((texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w)).x - _498) * _360) + _498;
    float _533 = ((texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w)).x - _516) * _401) + _516;
    float _552 = (((texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w)).x - _533) * _441) + _533) * cbMtdParam._m0[18u].y;
    vec4 _565 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[14u].x * _263) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _265) + cbTextureTilingScale._m0[14u].w));
    float _567 = _565.x;
    float _568 = _565.y;
    float _571 = cbMtdParam._m0[17u].y * _565.z;
    vec4 _583 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * TEXCOORD.x) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * TEXCOORD.y) + cbTextureTilingScale._m0[15u].w));
    float _592 = (((cbMtdParam._m0[17u].x * _583.z) - _571) * _360) + _571;
    vec4 _605 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_15, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _617 = (((cbMtdParam._m0[16u].w * _605.z) - _592) * _401) + _592;
    vec4 _630 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _639 = (((cbMtdParam._m0[16u].z * _630.z) - _617) * _441) + _617;
    float _644 = ((_583.x - _567) * _360) + _567;
    float _645 = ((_583.y - _568) * _360) + _568;
    float _650 = ((_605.x - _644) * _401) + _644;
    float _651 = ((_605.y - _645) * _401) + _645;
    float _660 = ((((_630.x - _650) * _441) + _650) * 2.0) + (-1.0);
    float _662 = ((((_630.y - _651) * _441) + _651) * 2.0) + (-1.0);
    float _663 = dot(vec2(_660, _662), vec2(_660, _662));
    float _3974 = isnan(0.0) ? _663 : (isnan(_663) ? 0.0 : max(_663, 0.0));
    float _668 = sqrt(1.0 - (isnan(1.0) ? _3974 : (isnan(_3974) ? 1.0 : min(_3974, 1.0))));
    float _671 = fma(_668, _222 * NORMAL.x, fma(_662, _229 * TANGENT.x, (_215 * _207) * _660));
    float _674 = fma(_668, _222 * NORMAL.y, fma(_662, _229 * TANGENT.y, (_215 * _208) * _660));
    float _677 = fma(_668, _222 * NORMAL.z, fma(_662, _229 * TANGENT.z, (_215 * _209) * _660));
    float _681 = inversesqrt(dot(vec3(_671, _674, _677), vec3(_671, _674, _677)));
    float _682 = _681 * _671;
    float _683 = _681 * _674;
    float _684 = _681 * _677;
    float _3985 = isnan(0.0) ? _639 : (isnan(_639) ? 0.0 : max(_639, 0.0));
    float _685 = isnan(1.0) ? _3985 : (isnan(_3985) ? 1.0 : min(_3985, 1.0));
    float _3996 = isnan(0.0) ? _477 : (isnan(_477) ? 0.0 : max(_477, 0.0));
    float _4007 = isnan(0.0) ? _480 : (isnan(_480) ? 0.0 : max(_480, 0.0));
    float _4018 = isnan(0.0) ? _483 : (isnan(_483) ? 0.0 : max(_483, 0.0));
    float _4029 = isnan(0.0) ? _552 : (isnan(_552) ? 0.0 : max(_552, 0.0));
    float _689 = isnan(1.0) ? _4029 : (isnan(_4029) ? 1.0 : min(_4029, 1.0));
    float _705 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _745 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _755 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _745);
    float _756 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _745);
    float _757 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _745);
    float _761 = inversesqrt(dot(vec3(_755, _756, _757), vec3(_755, _756, _757)));
    float _762 = _755 * _761;
    float _763 = _756 * _761;
    float _764 = _757 * _761;
    vec4 _769 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _771 = _769.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _943 = sqrt(((_755 * _755) + (_756 * _756)) + (_757 * _757));
        float _949 = (cbMatDynParam._m0[5u].x * _943) + cbMatDynParam._m0[5u].y;
        float _4040 = isnan(0.0) ? _949 : (isnan(_949) ? 0.0 : max(_949, 0.0));
        float _950 = isnan(1.0) ? _4040 : (isnan(_4040) ? 1.0 : min(_4040, 1.0));
        float _954 = (cbMatDynParam._m0[5u].z * _943) + cbMatDynParam._m0[5u].w;
        float _4051 = isnan(0.0) ? _954 : (isnan(_954) ? 0.0 : max(_954, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4051 : (isnan(_4051) ? 1.0 : min(_4051, 1.0))) - _950)) + _950) < ((_771 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _782 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _783 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _801 = fma(_684, cbSceneParam._m0[5u].z, fma(_683, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _682));
    float _804 = fma(_684, cbSceneParam._m0[6u].z, fma(_683, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _682));
    float _807 = fma(_684, cbSceneParam._m0[7u].z, fma(_683, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _682));
    uint _820 = uint(roundEven(NORMAL.w)) * 13u;
    uint _821 = _820 + 9u;
    uint _822 = _821 + uint(cbMatDynParam._m0[0u].w);
    float _828 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3996 : (isnan(_3996) ? 1.0 : min(_3996, 1.0)))) * cbInstanceData._m0[_822].x;
    float _829 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4007 : (isnan(_4007) ? 1.0 : min(_4007, 1.0)))) * cbInstanceData._m0[_822].y;
    float _830 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4018 : (isnan(_4018) ? 1.0 : min(_4018, 1.0)))) * cbInstanceData._m0[_822].z;
    float _4062 = isnan(0.0) ? _828 : (isnan(_828) ? 0.0 : max(_828, 0.0));
    float _831 = isnan(1.0) ? _4062 : (isnan(_4062) ? 1.0 : min(_4062, 1.0));
    float _4073 = isnan(0.0) ? _829 : (isnan(_829) ? 0.0 : max(_829, 0.0));
    float _832 = isnan(1.0) ? _4073 : (isnan(_4073) ? 1.0 : min(_4073, 1.0));
    float _4084 = isnan(0.0) ? _830 : (isnan(_830) ? 0.0 : max(_830, 0.0));
    float _833 = isnan(1.0) ? _4084 : (isnan(_4084) ? 1.0 : min(_4084, 1.0));
    float _834 = 1.0 - _689;
    float _835 = _831 * _834;
    float _836 = _832 * _834;
    float _837 = _833 * _834;
    float _842 = (_831 + (-0.039999999105930328369140625)) * _689;
    float _843 = (_832 + (-0.039999999105930328369140625)) * _689;
    float _844 = (_833 + (-0.039999999105930328369140625)) * _689;
    float _845 = _842 + 0.039999999105930328369140625;
    float _847 = _843 + 0.039999999105930328369140625;
    float _848 = _844 + 0.039999999105930328369140625;
    vec4 _857 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _782, cbSceneParam._m0[86u].y * _783));
    float _860 = _857.x * TEXCOORD_5.w;
    float _861 = dot(vec3(_682, _683, _684), vec3(_762, _763, _764));
    float _864 = _861 * 2.0;
    float _868 = (_864 * _682) - _762;
    float _869 = (_864 * _683) - _763;
    float _870 = (_864 * _684) - _764;
    float _874 = abs(dot(vec3(_762, _763, _764), vec3(_682, _683, _684)));
    float _4095 = isnan(0.0) ? _874 : (isnan(_874) ? 0.0 : max(_874, 0.0));
    float _876 = sqrt(_685);
    float _889 = exp2((_876 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4095 : (isnan(_4095) ? 1.0 : min(_4095, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_876 * 3.0));
    float _895 = (1.0 - _889) * ((_876 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _896 = _889 * _876;
    float _924 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _928 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _932 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1263;
    float _1265;
    float _1266;
    float _1267;
    float _1268;
    float _1269;
    float _1270;
    float _1271;
    float _1272;
    float _1273;
    float _1274;
    float _1275;
    float _1276;
    float _1277;
    float _1278;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _988 = fma(_932, cbModelParam._m0[26u].z, fma(_928, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _924));
        float _992 = fma(_932, cbModelParam._m0[27u].z, fma(_928, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _924));
        float _996 = fma(_932, cbModelParam._m0[28u].z, fma(_928, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _924));
        float _1021 = _924 + _682;
        float _1022 = _928 + _683;
        float _1023 = _932 + _684;
        float _1033 = fma(_1023, cbModelParam._m0[26u].z, fma(_1022, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1021)) - _988;
        float _1034 = fma(_1023, cbModelParam._m0[27u].z, fma(_1022, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1021)) - _992;
        float _1035 = fma(_1023, cbModelParam._m0[28u].z, fma(_1022, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1021)) - _996;
        float _1039 = inversesqrt(dot(vec3(_1033, _1034, _1035), vec3(_1033, _1034, _1035)));
        float _1052 = ((_1039 * _1033) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_988 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1053 = ((_1039 * _1034) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_992 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1054 = ((_1039 * _1035) / cbModelParam._m0[34u].z) + ((((((_996 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1057 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1052, _1053, _1054), 0.0);
        vec4 _1064 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1052, _1053, _1054), 0.0);
        vec4 _1071 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1052, _1053, _1054), 0.0);
        vec4 _1078 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1052, _1053, _1054), 0.0);
        float _1091 = exp2((_1057.w + (-0.5)) * 20.0) * 2.0;
        float _1092 = _1091 * (_1057.x + (-0.5));
        float _1093 = _1091 * (_1057.y + (-0.5));
        float _1094 = _1091 * (_1057.z + (-0.5));
        float _1101 = exp2((_1064.w + (-0.5)) * 20.0) * 2.0;
        float _1102 = _1101 * (_1064.x + (-0.5));
        float _1103 = _1101 * (_1064.y + (-0.5));
        float _1104 = _1101 * (_1064.z + (-0.5));
        float _1111 = exp2((_1071.w + (-0.5)) * 20.0) * 2.0;
        float _1112 = _1111 * (_1071.x + (-0.5));
        float _1113 = _1111 * (_1071.y + (-0.5));
        float _1114 = _1111 * (_1071.z + (-0.5));
        float _1121 = exp2((_1078.w + (-0.5)) * 20.0) * 2.0;
        float _1122 = _1121 * (_1078.x + (-0.5));
        float _1123 = _1121 * (_1078.y + (-0.5));
        float _1124 = _1121 * (_1078.z + (-0.5));
        float _1125 = isnan(0.0) ? _1122 : (isnan(_1122) ? 0.0 : max(_1122, 0.0));
        float _1126 = isnan(0.0) ? _1123 : (isnan(_1123) ? 0.0 : max(_1123, 0.0));
        float _1127 = isnan(0.0) ? _1124 : (isnan(_1124) ? 0.0 : max(_1124, 0.0));
        float _1128 = _1092 * 0.5;
        float _1129 = _1102 * 0.5;
        float _1130 = _1112 * 0.5;
        float _1131 = dot(vec3(_1128, _1129, _1130), vec3(_1128, _1129, _1130));
        float _1136 = (_1131 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1131);
        float _1145 = (dot(vec3(_682, _683, _684), vec3(_1136 * _1128, _1136 * _1129, _1136 * _1130)) + 1.0) * 0.5;
        float _4121 = isnan(0.0) ? _1145 : (isnan(_1145) ? 0.0 : max(_1145, 0.0));
        float _1155 = sqrt(((_1129 * _1129) + (_1128 * _1128)) + (_1130 * _1130)) / (_1125 + 9.9999997473787516355514526367188e-06);
        float _4132 = isnan(0.0) ? _1155 : (isnan(_1155) ? 0.0 : max(_1155, 0.0));
        float _1156 = isnan(1.0) ? _4132 : (isnan(_4132) ? 1.0 : min(_4132, 1.0));
        float _1157 = _1156 * 2.0;
        float _1161 = (1.0 - _1156) / (_1156 + 1.0);
        float _4143 = isnan(0.0) ? _1161 : (isnan(_1161) ? 0.0 : max(_1161, 0.0));
        float _1162 = isnan(1.0) ? _4143 : (isnan(_4143) ? 1.0 : min(_4143, 1.0));
        float _1171 = ((((1.0 - _1162) * (_1157 + 2.0)) * exp2(log2(isnan(1.0) ? _4121 : (isnan(_4121) ? 1.0 : min(_4121, 1.0))) * (_1157 + 1.0))) + _1162) * _1125;
        float _1172 = _1093 * 0.5;
        float _1173 = _1103 * 0.5;
        float _1174 = _1113 * 0.5;
        float _1175 = dot(vec3(_1172, _1173, _1174), vec3(_1172, _1173, _1174));
        float _1180 = (_1175 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1175);
        float _1188 = (dot(vec3(_682, _683, _684), vec3(_1180 * _1172, _1180 * _1173, _1180 * _1174)) + 1.0) * 0.5;
        float _4154 = isnan(0.0) ? _1188 : (isnan(_1188) ? 0.0 : max(_1188, 0.0));
        float _1197 = sqrt(((_1173 * _1173) + (_1172 * _1172)) + (_1174 * _1174)) / (_1126 + 9.9999997473787516355514526367188e-06);
        float _4165 = isnan(0.0) ? _1197 : (isnan(_1197) ? 0.0 : max(_1197, 0.0));
        float _1198 = isnan(1.0) ? _4165 : (isnan(_4165) ? 1.0 : min(_4165, 1.0));
        float _1199 = _1198 * 2.0;
        float _1203 = (1.0 - _1198) / (_1198 + 1.0);
        float _4176 = isnan(0.0) ? _1203 : (isnan(_1203) ? 0.0 : max(_1203, 0.0));
        float _1204 = isnan(1.0) ? _4176 : (isnan(_4176) ? 1.0 : min(_4176, 1.0));
        float _1213 = ((((1.0 - _1204) * (_1199 + 2.0)) * exp2(log2(isnan(1.0) ? _4154 : (isnan(_4154) ? 1.0 : min(_4154, 1.0))) * (_1199 + 1.0))) + _1204) * _1126;
        float _1214 = _1094 * 0.5;
        float _1215 = _1104 * 0.5;
        float _1216 = _1114 * 0.5;
        float _1217 = dot(vec3(_1214, _1215, _1216), vec3(_1214, _1215, _1216));
        float _1222 = (_1217 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1217);
        float _1230 = (dot(vec3(_682, _683, _684), vec3(_1222 * _1214, _1222 * _1215, _1222 * _1216)) + 1.0) * 0.5;
        float _4187 = isnan(0.0) ? _1230 : (isnan(_1230) ? 0.0 : max(_1230, 0.0));
        float _1239 = sqrt(((_1215 * _1215) + (_1214 * _1214)) + (_1216 * _1216)) / (_1127 + 9.9999997473787516355514526367188e-06);
        float _4198 = isnan(0.0) ? _1239 : (isnan(_1239) ? 0.0 : max(_1239, 0.0));
        float _1240 = isnan(1.0) ? _4198 : (isnan(_4198) ? 1.0 : min(_4198, 1.0));
        float _1241 = _1240 * 2.0;
        float _1245 = (1.0 - _1240) / (_1240 + 1.0);
        float _4209 = isnan(0.0) ? _1245 : (isnan(_1245) ? 0.0 : max(_1245, 0.0));
        float _1246 = isnan(1.0) ? _4209 : (isnan(_4209) ? 1.0 : min(_4209, 1.0));
        float _1255 = ((((1.0 - _1246) * (_1241 + 2.0)) * exp2(log2(isnan(1.0) ? _4187 : (isnan(_4187) ? 1.0 : min(_4187, 1.0))) * (_1241 + 1.0))) + _1246) * _1127;
        _1263 = _1094;
        _1265 = _1093;
        _1266 = _1092;
        _1267 = _1104;
        _1268 = _1103;
        _1269 = _1102;
        _1270 = _1114;
        _1271 = _1113;
        _1272 = _1112;
        _1273 = _1127;
        _1274 = _1126;
        _1275 = _1125;
        _1276 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1171 : (isnan(_1171) ? 0.0 : max(_1171, 0.0)));
        _1277 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1213 : (isnan(_1213) ? 0.0 : max(_1213, 0.0)));
        _1278 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1255 : (isnan(_1255) ? 0.0 : max(_1255, 0.0)));
    }
    else
    {
        _1263 = _1264;
        _1265 = _1264;
        _1266 = _1264;
        _1267 = _1264;
        _1268 = _1264;
        _1269 = _1264;
        _1270 = _1264;
        _1271 = _1264;
        _1272 = _1264;
        _1273 = _1264;
        _1274 = _1264;
        _1275 = _1264;
        _1276 = 0.0;
        _1277 = 0.0;
        _1278 = 0.0;
    }
    float _1576;
    float _1577;
    float _1578;
    float _1579;
    float _1580;
    float _1581;
    float _1582;
    float _1583;
    float _1584;
    float _1585;
    float _1586;
    float _1587;
    float _1588;
    float _1589;
    float _1590;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1307 = fma(_932, cbModelParam._m0[30u].z, fma(_928, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _924));
        float _1311 = fma(_932, cbModelParam._m0[31u].z, fma(_928, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _924));
        float _1315 = fma(_932, cbModelParam._m0[32u].z, fma(_928, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _924));
        float _1338 = _924 + _682;
        float _1339 = _928 + _683;
        float _1340 = _932 + _684;
        float _1350 = fma(_1340, cbModelParam._m0[30u].z, fma(_1339, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1338)) - _1307;
        float _1351 = fma(_1340, cbModelParam._m0[31u].z, fma(_1339, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1338)) - _1311;
        float _1352 = fma(_1340, cbModelParam._m0[32u].z, fma(_1339, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1338)) - _1315;
        float _1356 = inversesqrt(dot(vec3(_1350, _1351, _1352), vec3(_1350, _1351, _1352)));
        float _1369 = ((_1356 * _1350) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1307 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1370 = ((_1356 * _1351) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1311 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1371 = ((_1356 * _1352) / cbModelParam._m0[35u].z) + ((((((_1315 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1373 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1369, _1370, _1371), 0.0);
        vec4 _1380 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1369, _1370, _1371), 0.0);
        vec4 _1387 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1369, _1370, _1371), 0.0);
        vec4 _1394 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1369, _1370, _1371), 0.0);
        float _1406 = exp2((_1373.w + (-0.5)) * 20.0) * 2.0;
        float _1407 = _1406 * (_1373.x + (-0.5));
        float _1408 = _1406 * (_1373.y + (-0.5));
        float _1409 = _1406 * (_1373.z + (-0.5));
        float _1416 = exp2((_1380.w + (-0.5)) * 20.0) * 2.0;
        float _1417 = _1416 * (_1380.x + (-0.5));
        float _1418 = _1416 * (_1380.y + (-0.5));
        float _1419 = _1416 * (_1380.z + (-0.5));
        float _1426 = exp2((_1387.w + (-0.5)) * 20.0) * 2.0;
        float _1427 = _1426 * (_1387.x + (-0.5));
        float _1428 = _1426 * (_1387.y + (-0.5));
        float _1429 = _1426 * (_1387.z + (-0.5));
        float _1436 = exp2((_1394.w + (-0.5)) * 20.0) * 2.0;
        float _1437 = _1436 * (_1394.x + (-0.5));
        float _1438 = _1436 * (_1394.y + (-0.5));
        float _1439 = _1436 * (_1394.z + (-0.5));
        float _1440 = isnan(0.0) ? _1437 : (isnan(_1437) ? 0.0 : max(_1437, 0.0));
        float _1441 = isnan(0.0) ? _1438 : (isnan(_1438) ? 0.0 : max(_1438, 0.0));
        float _1442 = isnan(0.0) ? _1439 : (isnan(_1439) ? 0.0 : max(_1439, 0.0));
        float _1443 = _1407 * 0.5;
        float _1444 = _1417 * 0.5;
        float _1445 = _1427 * 0.5;
        float _1446 = dot(vec3(_1443, _1444, _1445), vec3(_1443, _1444, _1445));
        float _1451 = (_1446 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1446);
        float _1459 = (dot(vec3(_682, _683, _684), vec3(_1451 * _1443, _1451 * _1444, _1451 * _1445)) + 1.0) * 0.5;
        float _4250 = isnan(0.0) ? _1459 : (isnan(_1459) ? 0.0 : max(_1459, 0.0));
        float _1468 = sqrt(((_1444 * _1444) + (_1443 * _1443)) + (_1445 * _1445)) / (_1440 + 9.9999997473787516355514526367188e-06);
        float _4261 = isnan(0.0) ? _1468 : (isnan(_1468) ? 0.0 : max(_1468, 0.0));
        float _1469 = isnan(1.0) ? _4261 : (isnan(_4261) ? 1.0 : min(_4261, 1.0));
        float _1470 = _1469 * 2.0;
        float _1474 = (1.0 - _1469) / (_1469 + 1.0);
        float _4272 = isnan(0.0) ? _1474 : (isnan(_1474) ? 0.0 : max(_1474, 0.0));
        float _1475 = isnan(1.0) ? _4272 : (isnan(_4272) ? 1.0 : min(_4272, 1.0));
        float _1484 = ((((1.0 - _1475) * (_1470 + 2.0)) * exp2(log2(isnan(1.0) ? _4250 : (isnan(_4250) ? 1.0 : min(_4250, 1.0))) * (_1470 + 1.0))) + _1475) * _1440;
        float _1485 = _1408 * 0.5;
        float _1486 = _1418 * 0.5;
        float _1487 = _1428 * 0.5;
        float _1488 = dot(vec3(_1485, _1486, _1487), vec3(_1485, _1486, _1487));
        float _1493 = (_1488 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1488);
        float _1501 = (dot(vec3(_682, _683, _684), vec3(_1493 * _1485, _1493 * _1486, _1493 * _1487)) + 1.0) * 0.5;
        float _4283 = isnan(0.0) ? _1501 : (isnan(_1501) ? 0.0 : max(_1501, 0.0));
        float _1510 = sqrt(((_1486 * _1486) + (_1485 * _1485)) + (_1487 * _1487)) / (_1441 + 9.9999997473787516355514526367188e-06);
        float _4294 = isnan(0.0) ? _1510 : (isnan(_1510) ? 0.0 : max(_1510, 0.0));
        float _1511 = isnan(1.0) ? _4294 : (isnan(_4294) ? 1.0 : min(_4294, 1.0));
        float _1512 = _1511 * 2.0;
        float _1516 = (1.0 - _1511) / (_1511 + 1.0);
        float _4305 = isnan(0.0) ? _1516 : (isnan(_1516) ? 0.0 : max(_1516, 0.0));
        float _1517 = isnan(1.0) ? _4305 : (isnan(_4305) ? 1.0 : min(_4305, 1.0));
        float _1526 = ((((1.0 - _1517) * (_1512 + 2.0)) * exp2(log2(isnan(1.0) ? _4283 : (isnan(_4283) ? 1.0 : min(_4283, 1.0))) * (_1512 + 1.0))) + _1517) * _1441;
        float _1527 = _1409 * 0.5;
        float _1528 = _1419 * 0.5;
        float _1529 = _1429 * 0.5;
        float _1530 = dot(vec3(_1527, _1528, _1529), vec3(_1527, _1528, _1529));
        float _1535 = (_1530 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1530);
        float _1543 = (dot(vec3(_682, _683, _684), vec3(_1535 * _1527, _1535 * _1528, _1535 * _1529)) + 1.0) * 0.5;
        float _4316 = isnan(0.0) ? _1543 : (isnan(_1543) ? 0.0 : max(_1543, 0.0));
        float _1552 = sqrt(((_1528 * _1528) + (_1527 * _1527)) + (_1529 * _1529)) / (_1442 + 9.9999997473787516355514526367188e-06);
        float _4327 = isnan(0.0) ? _1552 : (isnan(_1552) ? 0.0 : max(_1552, 0.0));
        float _1553 = isnan(1.0) ? _4327 : (isnan(_4327) ? 1.0 : min(_4327, 1.0));
        float _1554 = _1553 * 2.0;
        float _1558 = (1.0 - _1553) / (_1553 + 1.0);
        float _4338 = isnan(0.0) ? _1558 : (isnan(_1558) ? 0.0 : max(_1558, 0.0));
        float _1559 = isnan(1.0) ? _4338 : (isnan(_4338) ? 1.0 : min(_4338, 1.0));
        float _1568 = ((((1.0 - _1559) * (_1554 + 2.0)) * exp2(log2(isnan(1.0) ? _4316 : (isnan(_4316) ? 1.0 : min(_4316, 1.0))) * (_1554 + 1.0))) + _1559) * _1442;
        _1576 = _1409;
        _1577 = _1408;
        _1578 = _1407;
        _1579 = _1419;
        _1580 = _1418;
        _1581 = _1417;
        _1582 = _1429;
        _1583 = _1428;
        _1584 = _1427;
        _1585 = _1442;
        _1586 = _1441;
        _1587 = _1440;
        _1588 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1484 : (isnan(_1484) ? 0.0 : max(_1484, 0.0)));
        _1589 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1526 : (isnan(_1526) ? 0.0 : max(_1526, 0.0)));
        _1590 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1568 : (isnan(_1568) ? 0.0 : max(_1568, 0.0)));
    }
    else
    {
        _1576 = _1264;
        _1577 = _1264;
        _1578 = _1264;
        _1579 = _1264;
        _1580 = _1264;
        _1581 = _1264;
        _1582 = _1264;
        _1583 = _1264;
        _1584 = _1264;
        _1585 = _1264;
        _1586 = _1264;
        _1587 = _1264;
        _1588 = 0.0;
        _1589 = 0.0;
        _1590 = 0.0;
    }
    float _1600 = (cbModelParam._m0[1u].x * (_1588 - _1276)) + _1276;
    float _1601 = (cbModelParam._m0[1u].x * (_1589 - _1277)) + _1277;
    float _1602 = (cbModelParam._m0[1u].x * (_1590 - _1278)) + _1278;
    float _1623 = fma(_1602, cbSceneParam._m0[89u].z, fma(_1601, cbSceneParam._m0[89u].y, _1600 * cbSceneParam._m0[89u].x));
    float _1626 = fma(_1602, cbSceneParam._m0[90u].z, fma(_1601, cbSceneParam._m0[90u].y, _1600 * cbSceneParam._m0[90u].x));
    float _1629 = fma(_1602, cbSceneParam._m0[91u].z, fma(_1601, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1600));
    float _1644 = _868 * 0.5;
    float _1645 = _869 * 0.5;
    float _1646 = _870 * 0.5;
    float _1647 = dot(vec4(_1644, _1645, _1646, 1.0), vec4(_1578, _1581, _1584, _1587));
    float _1650 = dot(vec4(_1644, _1645, _1646, 1.0), vec4(_1577, _1580, _1583, _1586));
    float _1653 = dot(vec4(_1644, _1645, _1646, 1.0), vec4(_1576, _1579, _1582, _1585));
    float _1687;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1660 = dot(vec4(_1644, _1645, _1646, 1.0), vec4(_1263, _1267, _1270, _1273));
        float _1664 = dot(vec4(_1644, _1645, _1646, 1.0), vec4(_1265, _1268, _1271, _1274));
        float _1668 = dot(vec4(_1644, _1645, _1646, 1.0), vec4(_1266, _1269, _1272, _1275));
        float _1675 = dot(vec4(cbModelParam._m0[39u]), vec4(_1644, _1645, _1646, 1.0));
        _1687 = dot(vec3(isnan(0.0) ? _1668 : (isnan(_1668) ? 0.0 : max(_1668, 0.0)), isnan(0.0) ? _1664 : (isnan(_1664) ? 0.0 : max(_1664, 0.0)), isnan(0.0) ? _1660 : (isnan(_1660) ? 0.0 : max(_1660, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1675) ? 0.0 : (isnan(0.0) ? _1675 : max(0.0, _1675))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1687 = 1.0;
    }
    float _1698;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1689 = dot(vec4(cbModelParam._m0[40u]), vec4(_1644, _1645, _1646, 1.0));
        _1698 = dot(vec3(isnan(0.0) ? _1647 : (isnan(_1647) ? 0.0 : max(_1647, 0.0)), isnan(0.0) ? _1650 : (isnan(_1650) ? 0.0 : max(_1650, 0.0)), isnan(0.0) ? _1653 : (isnan(_1653) ? 0.0 : max(_1653, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1689) ? 0.0 : (isnan(0.0) ? _1689 : max(0.0, _1689))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1698 = 1.0;
    }
    float _1702 = (_1698 * cbModelParam._m0[1u].x) + (_1687 * (1.0 - cbModelParam._m0[1u].x));
    float _1712 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _685);
    float _1713 = isnan(_1712) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1712 : min(cbModelParam._m0[25u].z, _1712));
    float _1793;
    float _1795;
    float _1797;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1760 = fma(_932, cbModelParam._m0[13u].z, fma(_928, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _924)) + cbModelParam._m0[13u].w;
        float _1764 = fma(_932, cbModelParam._m0[14u].z, fma(_928, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _924)) + cbModelParam._m0[14u].w;
        float _1768 = fma(_932, cbModelParam._m0[15u].z, fma(_928, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _924)) + cbModelParam._m0[15u].w;
        float _1771 = fma(_870, cbModelParam._m0[13u].z, fma(_869, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _868));
        float _1774 = fma(_870, cbModelParam._m0[14u].z, fma(_869, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _868));
        float _1777 = fma(_870, cbModelParam._m0[15u].z, fma(_869, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _868));
        float _1805;
        if (_1771 > 0.0)
        {
            _1805 = abs((1.0 - _1760) / _1771);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1771 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1760 + 1.0) / _1771);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1805 = frontier_phi_17_15_ladder;
        }
        float _1978;
        if (_1774 > 0.0)
        {
            _1978 = abs((1.0 - _1764) / _1774);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1774 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1764 + 1.0) / _1774);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1978 = frontier_phi_26_22_ladder;
        }
        float _2273;
        if (_1777 > 0.0)
        {
            _2273 = abs((1.0 - _1768) / _1777);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1777 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1768 + 1.0) / _1777);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2273 = frontier_phi_38_33_ladder;
        }
        float _2275 = isnan(_1978) ? _1805 : (isnan(_1805) ? _1978 : min(_1805, _1978));
        float _2276 = isnan(_2273) ? _2275 : (isnan(_2275) ? _2273 : min(_2275, _2273));
        float _2280 = (_2276 * _1771) + _1760;
        float _2281 = (_2276 * _1774) + _1764;
        float _2282 = (_2276 * _1777) + _1768;
        float _2283 = _2276 * 9.9999997473787516355514526367188e-05;
        float _2285 = (-1.0) - _2283;
        float _2287 = _2283 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2282 > _2287) || ((_2282 < _2285) || ((_2281 > _2287) || ((_2281 < _2285) || ((_2280 < _2285) || (_2280 > _2287))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2427 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2282, cbModelParam._m0[9u].z, fma(_2281, cbModelParam._m0[9u].y, _2280 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2282, cbModelParam._m0[10u].z, fma(_2281, cbModelParam._m0[10u].y, _2280 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2282, cbModelParam._m0[11u].z, fma(_2281, cbModelParam._m0[11u].y, _2280 * cbModelParam._m0[11u].x))), _1713);
            frontier_phi_16_38_ladder = _2427.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2427.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2427.x * cbModelParam._m0[1u].y;
        }
        _1793 = frontier_phi_16_38_ladder_2;
        _1795 = frontier_phi_16_38_ladder_1;
        _1797 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1781 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_868, _869, _870), _1713);
        _1793 = _1781.x * cbModelParam._m0[1u].y;
        _1795 = _1781.y * cbModelParam._m0[1u].y;
        _1797 = _1781.z * cbModelParam._m0[1u].y;
    }
    float _1801 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _685);
    float _1802 = isnan(_1801) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1801 : min(cbModelParam._m0[25u].w, _1801));
    float _1893;
    float _1895;
    float _1897;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1857 = fma(_932, cbModelParam._m0[21u].z, fma(_928, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _924)) + cbModelParam._m0[21u].w;
        float _1861 = fma(_932, cbModelParam._m0[22u].z, fma(_928, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _924)) + cbModelParam._m0[22u].w;
        float _1865 = fma(_932, cbModelParam._m0[23u].z, fma(_928, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _924)) + cbModelParam._m0[23u].w;
        float _1868 = fma(_870, cbModelParam._m0[21u].z, fma(_869, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _868));
        float _1871 = fma(_870, cbModelParam._m0[22u].z, fma(_869, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _868));
        float _1874 = fma(_870, cbModelParam._m0[23u].z, fma(_869, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _868));
        float _1983;
        if (_1868 > 0.0)
        {
            _1983 = abs((1.0 - _1857) / _1868);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1868 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1857 + 1.0) / _1868);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1983 = frontier_phi_28_24_ladder;
        }
        float _2300;
        if (_1871 > 0.0)
        {
            _2300 = abs((1.0 - _1861) / _1871);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1871 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1861 + 1.0) / _1871);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2300 = frontier_phi_40_35_ladder;
        }
        float _2638;
        if (_1874 > 0.0)
        {
            _2638 = abs((1.0 - _1865) / _1874);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1874 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1865 + 1.0) / _1874);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2638 = frontier_phi_50_47_ladder;
        }
        float _2640 = isnan(_2300) ? _1983 : (isnan(_1983) ? _2300 : min(_1983, _2300));
        float _2641 = isnan(_2638) ? _2640 : (isnan(_2640) ? _2638 : min(_2640, _2638));
        float _2645 = (_2641 * _1868) + _1857;
        float _2646 = (_2641 * _1871) + _1861;
        float _2647 = (_2641 * _1874) + _1865;
        float _2648 = _2641 * 9.9999997473787516355514526367188e-05;
        float _2649 = (-1.0) - _2648;
        float _2651 = _2648 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2647 > _2651) || ((_2647 < _2649) || ((_2646 > _2651) || ((_2646 < _2649) || ((_2645 < _2649) || (_2645 > _2651))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2769 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2647, cbModelParam._m0[17u].z, fma(_2646, cbModelParam._m0[17u].y, _2645 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2647, cbModelParam._m0[18u].z, fma(_2646, cbModelParam._m0[18u].y, _2645 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2647, cbModelParam._m0[19u].z, fma(_2646, cbModelParam._m0[19u].y, _2645 * cbModelParam._m0[19u].x))), _1802);
            frontier_phi_25_50_ladder = _2769.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2769.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2769.x * cbModelParam._m0[1u].z;
        }
        _1893 = frontier_phi_25_50_ladder_2;
        _1895 = frontier_phi_25_50_ladder_1;
        _1897 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1877 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_868, _869, _870), _1802);
        _1893 = _1877.x * cbModelParam._m0[1u].z;
        _1895 = _1877.y * cbModelParam._m0[1u].z;
        _1897 = _1877.z * cbModelParam._m0[1u].z;
    }
    float _1910 = (((_895 * _845) + _896) * _860) * ((cbModelParam._m0[1u].w * (_1893 - _1793)) + _1793);
    float _1912 = (((_895 * _847) + _896) * _860) * ((cbModelParam._m0[1u].w * (_1895 - _1795)) + _1795);
    float _1914 = (((_895 * _848) + _896) * _860) * ((cbModelParam._m0[1u].w * (_1897 - _1797)) + _1797);
    float _1917 = fma(_1914, cbSceneParam._m0[89u].z, fma(_1912, cbSceneParam._m0[89u].y, _1910 * cbSceneParam._m0[89u].x));
    float _1920 = fma(_1914, cbSceneParam._m0[90u].z, fma(_1912, cbSceneParam._m0[90u].y, _1910 * cbSceneParam._m0[90u].x));
    float _1923 = fma(_1914, cbSceneParam._m0[91u].z, fma(_1912, cbSceneParam._m0[91u].y, _1910 * cbSceneParam._m0[91u].x));
    float _1957 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1961 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1965 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1969 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1970 = _1957 / _1969;
    float _1971 = _1961 / _1969;
    float _1972 = _1965 / _1969;
    float _2119;
    float _2120;
    float _2121;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1999 = ((uint(_1972 > cbSceneParam._m0[59u].y) + uint(_1972 > cbSceneParam._m0[59u].x)) + uint(_1972 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2000 = _1999 + 43u;
        uint _2008 = _1999 + 44u;
        uint _2016 = _1999 + 45u;
        uint _2024 = _1999 + 46u;
        float _2035 = fma(_1969, cbSceneParam._m0[_2000].w, fma(_1965, cbSceneParam._m0[_2000].z, fma(_1961, cbSceneParam._m0[_2000].y, _1957 * cbSceneParam._m0[_2000].x)));
        float _2039 = fma(_1969, cbSceneParam._m0[_2008].w, fma(_1965, cbSceneParam._m0[_2008].z, fma(_1961, cbSceneParam._m0[_2008].y, _1957 * cbSceneParam._m0[_2008].x)));
        float _2047 = fma(_1969, cbSceneParam._m0[_2024].w, fma(_1965, cbSceneParam._m0[_2024].z, fma(_1961, cbSceneParam._m0[_2024].y, _1957 * cbSceneParam._m0[_2024].x)));
        float _2052 = cbSceneParam._m0[33u].z * _2047;
        float _2054 = cbSceneParam._m0[33u].w * _2047;
        float _2057 = fma(_1969, cbSceneParam._m0[_2016].w, fma(_1965, cbSceneParam._m0[_2016].z, fma(_1961, cbSceneParam._m0[_2016].y, _1957 * cbSceneParam._m0[_2016].x))) / _2047;
        float _2105 = (cbSceneParam._m0[33u].x - sqrt(((_1971 * _1971) + (_1970 * _1970)) + (_1972 * _1972))) * cbSceneParam._m0[33u].y;
        float _4464 = isnan(0.0) ? _2105 : (isnan(_2105) ? 0.0 : max(_2105, 0.0));
        float _2112 = (isnan(1.0) ? _4464 : (isnan(_4464) ? 1.0 : min(_4464, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2052 + _2035) / _2047, (_2054 + _2039) / _2047), _2057), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2054 + _2035) / _2047, (_2039 - _2052) / _2047), _2057), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2035 - _2052) / _2047, (_2039 - _2054) / _2047), _2057), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2035 - _2054) / _2047, (_2052 + _2039) / _2047), _2057), 0.0)).x), vec4(0.25)));
        _2119 = 1.0 - (_2112 * cbSceneParam._m0[34u].x);
        _2120 = 1.0 - (_2112 * cbSceneParam._m0[34u].y);
        _2121 = 1.0 - (_2112 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2119 = 1.0;
        _2120 = 1.0;
        _2121 = 1.0;
    }
    float _2185;
    float _2187;
    float _2189;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2173 = fma(_1969, cbSceneParam._m0[63u].w, fma(_1965, cbSceneParam._m0[63u].z, fma(_1961, cbSceneParam._m0[63u].y, _1957 * cbSceneParam._m0[63u].x)));
        float _2174 = fma(_1969, cbSceneParam._m0[60u].w, fma(_1965, cbSceneParam._m0[60u].z, fma(_1961, cbSceneParam._m0[60u].y, _1957 * cbSceneParam._m0[60u].x))) / _2173;
        float _2175 = fma(_1969, cbSceneParam._m0[61u].w, fma(_1965, cbSceneParam._m0[61u].z, fma(_1961, cbSceneParam._m0[61u].y, _1957 * cbSceneParam._m0[61u].x))) / _2173;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2174 >= cbSceneParam._m0[64u].x) && (_2175 >= cbSceneParam._m0[64u].y)) && (_2174 <= cbSceneParam._m0[64u].z)) && (_2175 <= cbSceneParam._m0[64u].w))
        {
            float _2313 = fma(_1969, cbSceneParam._m0[62u].w, fma(_1965, cbSceneParam._m0[62u].z, fma(_1961, cbSceneParam._m0[62u].y, _1957 * cbSceneParam._m0[62u].x))) / _2173;
            float _2317 = isnan(cbSceneParam._m0[41u].w) ? _2313 : (isnan(_2313) ? cbSceneParam._m0[41u].w : max(_2313, cbSceneParam._m0[41u].w));
            float _2360 = (cbSceneParam._m0[33u].x - sqrt(((_1971 * _1971) + (_1970 * _1970)) + (_1972 * _1972))) * cbSceneParam._m0[33u].y;
            float _4480 = isnan(0.0) ? _2360 : (isnan(_2360) ? 0.0 : max(_2360, 0.0));
            float _2367 = (isnan(1.0) ? _4480 : (isnan(_4480) ? 1.0 : min(_4480, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2174, cbSceneParam._m0[33u].w + _2175), _2317), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2174, _2175 - cbSceneParam._m0[33u].z), _2317), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2174 - cbSceneParam._m0[33u].z, _2175 - cbSceneParam._m0[33u].w), _2317), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2174 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2175), _2317), 0.0)).x), vec4(0.25)));
            float _2371 = 1.0 - (_2367 * cbSceneParam._m0[34u].x);
            float _2372 = 1.0 - (_2367 * cbSceneParam._m0[34u].y);
            float _2373 = 1.0 - (_2367 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2373) ? _2121 : (isnan(_2121) ? _2373 : min(_2121, _2373));
            frontier_phi_37_36_ladder_1 = isnan(_2372) ? _2120 : (isnan(_2120) ? _2372 : min(_2120, _2372));
            frontier_phi_37_36_ladder_2 = isnan(_2371) ? _2119 : (isnan(_2119) ? _2371 : min(_2119, _2371));
        }
        else
        {
            frontier_phi_37_36_ladder = _2121;
            frontier_phi_37_36_ladder_1 = _2120;
            frontier_phi_37_36_ladder_2 = _2119;
        }
        _2185 = frontier_phi_37_36_ladder_2;
        _2187 = frontier_phi_37_36_ladder_1;
        _2189 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2185 = _2119;
        _2187 = _2120;
        _2189 = _2121;
    }
    uvec4 _2194 = floatBitsToUint(cbInstanceData._m0[_820 + 5u]);
    uint _2196 = _2194.x * 14u;
    uint _2197 = _2196 + 13u;
    float _2204 = _860 + (-1.0);
    float _2209 = (cbLight._m0[_2197].x * _2204) + 1.0;
    float _2210 = (cbLight._m0[_2197].y * _2204) + 1.0;
    float _2211 = (cbLight._m0[_2197].z * _2204) + 1.0;
    float _2212 = (cbLight._m0[_2197].w * _2204) + 1.0;
    uint _2213 = _2196 + 5u;
    float _2219 = isnan(1.0) ? _2210 : (isnan(_2210) ? 1.0 : min(_2210, 1.0));
    uint _2223 = _2196 + 4u;
    float _2232 = isnan(1.0) ? _2209 : (isnan(_2209) ? 1.0 : min(_2209, 1.0));
    uint _2236 = _2196 | 1u;
    float _2247 = dot(vec3(cbLight._m0[_2196].xyz), vec3(_682, _683, _684));
    float _2250 = dot(vec3(cbLight._m0[_2236].xyz), vec3(_682, _683, _684));
    float _4516 = isnan(0.0) ? _2247 : (isnan(_2247) ? 0.0 : max(_2247, 0.0));
    float _4527 = isnan(0.0) ? _2250 : (isnan(_2250) ? 0.0 : max(_2250, 0.0));
    float _2255 = (isnan(1.0) ? _4516 : (isnan(_4516) ? 1.0 : min(_4516, 1.0))) * 0.3183098733425140380859375;
    float _2257 = (isnan(1.0) ? _4527 : (isnan(_4527) ? 1.0 : min(_4527, 1.0))) * 0.3183098733425140380859375;
    float _2264 = ((cbLight._m0[_2213].x * _2219) * _2257) + (((cbLight._m0[_2223].x * _2185) * _2232) * _2255);
    float _2265 = ((_2219 * cbLight._m0[_2213].y) * _2257) + (((cbLight._m0[_2223].y * _2187) * _2232) * _2255);
    float _2266 = ((_2219 * cbLight._m0[_2213].z) * _2257) + (((cbLight._m0[_2223].z * _2189) * _2232) * _2255);
    uvec4 _2270 = floatBitsToUint(cbLight._m0[_2196 + 12u]);
    bool _2272 = _2270.x == 0u;
    float _2374;
    float _2376;
    float _2378;
    if (_2272)
    {
        _2374 = _2264;
        _2376 = _2265;
        _2378 = _2266;
    }
    else
    {
        uint _2382 = _2196 + 6u;
        float _2398 = (dot(vec3(cbLight._m0[_2196 + 2u].xyz), vec3(_682, _683, _684)) * 0.5) + 0.5;
        float _2399 = _2398 * _2398;
        float _4538 = isnan(0.0) ? _2399 : (isnan(_2399) ? 0.0 : max(_2399, 0.0));
        float _2400 = isnan(1.0) ? _4538 : (isnan(_4538) ? 1.0 : min(_4538, 1.0));
        float _2401 = isnan(1.0) ? _2211 : (isnan(_2211) ? 1.0 : min(_2211, 1.0));
        _2374 = (((cbLight._m0[_2382].x * 0.3183098733425140380859375) * _2400) * _2401) + _2264;
        _2376 = (((cbLight._m0[_2382].y * 0.3183098733425140380859375) * _2400) * _2401) + _2265;
        _2378 = (((cbLight._m0[_2382].z * 0.3183098733425140380859375) * _2400) * _2401) + _2266;
    }
    bool _2381 = _2270.y == 0u;
    float _2436;
    float _2438;
    float _2440;
    if (_2381)
    {
        _2436 = _2374;
        _2438 = _2376;
        _2440 = _2378;
    }
    else
    {
        uint _2609 = _2196 + 7u;
        float _2625 = (dot(vec3(cbLight._m0[_2196 + 3u].xyz), vec3(_682, _683, _684)) * 0.5) + 0.5;
        float _2626 = _2625 * _2625;
        float _4554 = isnan(0.0) ? _2626 : (isnan(_2626) ? 0.0 : max(_2626, 0.0));
        float _2627 = isnan(1.0) ? _4554 : (isnan(_4554) ? 1.0 : min(_4554, 1.0));
        float _2628 = isnan(1.0) ? _2212 : (isnan(_2212) ? 1.0 : min(_2212, 1.0));
        _2436 = (((cbLight._m0[_2609].x * 0.3183098733425140380859375) * _2627) * _2628) + _2374;
        _2438 = (((cbLight._m0[_2609].y * 0.3183098733425140380859375) * _2627) * _2628) + _2376;
        _2440 = (((cbLight._m0[_2609].z * 0.3183098733425140380859375) * _2627) * _2628) + _2378;
    }
    uint _2443 = _2196 + 8u;
    float _2456 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2196].w)) * _685) * 0.949999988079071044921875);
    float _2457 = _2456 * _2456;
    float _2458 = cbLight._m0[_2196].x + _762;
    float _2459 = cbLight._m0[_2196].y + _763;
    float _2460 = cbLight._m0[_2196].z + _764;
    float _2464 = inversesqrt(dot(vec3(_2458, _2459, _2460), vec3(_2458, _2459, _2460)));
    float _2465 = _2464 * _2458;
    float _2466 = _2464 * _2459;
    float _2467 = _2464 * _2460;
    float _2468 = dot(vec3(_682, _683, _684), vec3(cbLight._m0[_2196].xyz));
    float _4570 = isnan(0.0) ? _2468 : (isnan(_2468) ? 0.0 : max(_2468, 0.0));
    float _2471 = isnan(1.0) ? _4570 : (isnan(_4570) ? 1.0 : min(_4570, 1.0));
    float _4581 = isnan(0.0) ? _861 : (isnan(_861) ? 0.0 : max(_861, 0.0));
    float _2472 = isnan(1.0) ? _4581 : (isnan(_4581) ? 1.0 : min(_4581, 1.0));
    float _2473 = dot(vec3(_682, _683, _684), vec3(_2465, _2466, _2467));
    float _4592 = isnan(0.0) ? _2473 : (isnan(_2473) ? 0.0 : max(_2473, 0.0));
    float _2476 = isnan(1.0) ? _4592 : (isnan(_4592) ? 1.0 : min(_4592, 1.0));
    float _2477 = dot(vec3(cbLight._m0[_2196].xyz), vec3(_2465, _2466, _2467));
    float _4603 = isnan(0.0) ? _2477 : (isnan(_2477) ? 0.0 : max(_2477, 0.0));
    float _2481 = _2457 * _2457;
    float _2485 = ((_2476 * _2476) * (_2481 + (-1.0))) + 1.0;
    float _2493 = exp2(log2(1.0 - (isnan(1.0) ? _4603 : (isnan(_4603) ? 1.0 : min(_4603, 1.0)))) * 5.0);
    float _2494 = 0.959999978542327880859375 - _842;
    float _2496 = 0.959999978542327880859375 - _843;
    float _2497 = 0.959999978542327880859375 - _844;
    float _2504 = 1.0 - _2457;
    float _2515 = (0.5 / (((_2472 * ((_2471 * _2504) + _2457)) + 9.9999999392252902907785028219223e-09) + (((_2472 * _2504) + _2457) * _2471))) * _2471;
    float _4614 = isnan(0.0) ? _2515 : (isnan(_2515) ? 0.0 : max(_2515, 0.0));
    float _2517 = (isnan(1.0) ? _4614 : (isnan(_4614) ? 1.0 : min(_4614, 1.0))) * (_2481 / ((_2485 * _2485) * 3.141590118408203125));
    uint _2531 = _2196 + 9u;
    float _2542 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2236].w)) * _685) * 0.949999988079071044921875);
    float _2543 = _2542 * _2542;
    float _2544 = cbLight._m0[_2236].x + _762;
    float _2545 = cbLight._m0[_2236].y + _763;
    float _2546 = cbLight._m0[_2236].z + _764;
    float _2550 = inversesqrt(dot(vec3(_2544, _2545, _2546), vec3(_2544, _2545, _2546)));
    float _2551 = _2550 * _2544;
    float _2552 = _2550 * _2545;
    float _2553 = _2550 * _2546;
    float _2554 = dot(vec3(_682, _683, _684), vec3(cbLight._m0[_2236].xyz));
    float _4625 = isnan(0.0) ? _2554 : (isnan(_2554) ? 0.0 : max(_2554, 0.0));
    float _2557 = isnan(1.0) ? _4625 : (isnan(_4625) ? 1.0 : min(_4625, 1.0));
    float _2558 = dot(vec3(_682, _683, _684), vec3(_2551, _2552, _2553));
    float _4636 = isnan(0.0) ? _2558 : (isnan(_2558) ? 0.0 : max(_2558, 0.0));
    float _2561 = isnan(1.0) ? _4636 : (isnan(_4636) ? 1.0 : min(_4636, 1.0));
    float _2562 = dot(vec3(cbLight._m0[_2236].xyz), vec3(_2551, _2552, _2553));
    float _4647 = isnan(0.0) ? _2562 : (isnan(_2562) ? 0.0 : max(_2562, 0.0));
    float _2566 = _2543 * _2543;
    float _2570 = ((_2561 * _2561) * (_2566 + (-1.0))) + 1.0;
    float _2577 = exp2(log2(1.0 - (isnan(1.0) ? _4647 : (isnan(_4647) ? 1.0 : min(_4647, 1.0)))) * 5.0);
    float _2584 = 1.0 - _2543;
    float _2594 = (0.5 / (((_2472 * ((_2557 * _2584) + _2543)) + 9.9999999392252902907785028219223e-09) + (((_2472 * _2584) + _2543) * _2557))) * _2557;
    float _4658 = isnan(0.0) ? _2594 : (isnan(_2594) ? 0.0 : max(_2594, 0.0));
    float _2596 = (isnan(1.0) ? _4658 : (isnan(_4658) ? 1.0 : min(_4658, 1.0))) * (_2566 / ((_2570 * _2570) * 3.141590118408203125));
    float _2606 = (((((_2577 * _2494) + _845) * cbLight._m0[_2531].x) * _2596) * _2219) + ((((cbLight._m0[_2443].x * _2185) * ((_2493 * _2494) + _845)) * _2517) * _2232);
    float _2607 = (((((_2577 * _2496) + _847) * cbLight._m0[_2531].y) * _2596) * _2219) + ((((cbLight._m0[_2443].y * _2187) * ((_2493 * _2496) + _847)) * _2517) * _2232);
    float _2608 = (((((_2577 * _2497) + _848) * cbLight._m0[_2531].z) * _2596) * _2219) + ((((cbLight._m0[_2443].z * _2189) * ((_2493 * _2497) + _848)) * _2517) * _2232);
    float _2664;
    float _2666;
    float _2668;
    if (_2272)
    {
        _2664 = _2606;
        _2666 = _2607;
        _2668 = _2608;
    }
    else
    {
        uint _2670 = _2196 + 2u;
        uint _2674 = _2196 + 10u;
        float _2688 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2670].w)) * _685) * 0.949999988079071044921875);
        float _2689 = _2688 * _2688;
        float _2690 = cbLight._m0[_2670].x + _762;
        float _2691 = cbLight._m0[_2670].y + _763;
        float _2692 = cbLight._m0[_2670].z + _764;
        float _2696 = inversesqrt(dot(vec3(_2690, _2691, _2692), vec3(_2690, _2691, _2692)));
        float _2697 = _2696 * _2690;
        float _2698 = _2696 * _2691;
        float _2699 = _2696 * _2692;
        float _2700 = dot(vec3(_682, _683, _684), vec3(cbLight._m0[_2670].xyz));
        float _4669 = isnan(0.0) ? _2700 : (isnan(_2700) ? 0.0 : max(_2700, 0.0));
        float _2703 = isnan(1.0) ? _4669 : (isnan(_4669) ? 1.0 : min(_4669, 1.0));
        float _2704 = dot(vec3(_682, _683, _684), vec3(_2697, _2698, _2699));
        float _4680 = isnan(0.0) ? _2704 : (isnan(_2704) ? 0.0 : max(_2704, 0.0));
        float _2707 = isnan(1.0) ? _4680 : (isnan(_4680) ? 1.0 : min(_4680, 1.0));
        float _2708 = dot(vec3(cbLight._m0[_2670].xyz), vec3(_2697, _2698, _2699));
        float _4691 = isnan(0.0) ? _2708 : (isnan(_2708) ? 0.0 : max(_2708, 0.0));
        float _2712 = _2689 * _2689;
        float _2716 = ((_2707 * _2707) * (_2712 + (-1.0))) + 1.0;
        float _2723 = exp2(log2(1.0 - (isnan(1.0) ? _4691 : (isnan(_4691) ? 1.0 : min(_4691, 1.0)))) * 5.0);
        float _2730 = 1.0 - _2689;
        float _2740 = (0.5 / (((_2472 * ((_2703 * _2730) + _2689)) + 9.9999999392252902907785028219223e-09) + (((_2472 * _2730) + _2689) * _2703))) * _2703;
        float _4702 = isnan(0.0) ? _2740 : (isnan(_2740) ? 0.0 : max(_2740, 0.0));
        float _2742 = (isnan(1.0) ? _4702 : (isnan(_4702) ? 1.0 : min(_4702, 1.0))) * (_2712 / ((_2716 * _2716) * 3.141590118408203125));
        float _2743 = isnan(1.0) ? _2211 : (isnan(_2211) ? 1.0 : min(_2211, 1.0));
        _2664 = (((((_2723 * _2494) + _845) * cbLight._m0[_2674].x) * _2742) * _2743) + _2606;
        _2666 = (((((_2723 * _2496) + _847) * cbLight._m0[_2674].y) * _2742) * _2743) + _2607;
        _2668 = (((((_2723 * _2497) + _848) * cbLight._m0[_2674].z) * _2742) * _2743) + _2608;
    }
    float _2774;
    float _2776;
    float _2778;
    if (_2381)
    {
        _2774 = _2664;
        _2776 = _2666;
        _2778 = _2668;
    }
    else
    {
        uint _2785 = _2196 + 3u;
        uint _2789 = _2196 + 11u;
        float _2803 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2785].w)) * _685) * 0.949999988079071044921875);
        float _2804 = _2803 * _2803;
        float _2805 = cbLight._m0[_2785].x + _762;
        float _2806 = cbLight._m0[_2785].y + _763;
        float _2807 = cbLight._m0[_2785].z + _764;
        float _2811 = inversesqrt(dot(vec3(_2805, _2806, _2807), vec3(_2805, _2806, _2807)));
        float _2812 = _2811 * _2805;
        float _2813 = _2811 * _2806;
        float _2814 = _2811 * _2807;
        float _2815 = dot(vec3(_682, _683, _684), vec3(cbLight._m0[_2785].xyz));
        float _4718 = isnan(0.0) ? _2815 : (isnan(_2815) ? 0.0 : max(_2815, 0.0));
        float _2818 = isnan(1.0) ? _4718 : (isnan(_4718) ? 1.0 : min(_4718, 1.0));
        float _2819 = dot(vec3(_682, _683, _684), vec3(_2812, _2813, _2814));
        float _4729 = isnan(0.0) ? _2819 : (isnan(_2819) ? 0.0 : max(_2819, 0.0));
        float _2822 = isnan(1.0) ? _4729 : (isnan(_4729) ? 1.0 : min(_4729, 1.0));
        float _2823 = dot(vec3(cbLight._m0[_2785].xyz), vec3(_2812, _2813, _2814));
        float _4740 = isnan(0.0) ? _2823 : (isnan(_2823) ? 0.0 : max(_2823, 0.0));
        float _2827 = _2804 * _2804;
        float _2831 = ((_2822 * _2822) * (_2827 + (-1.0))) + 1.0;
        float _2838 = exp2(log2(1.0 - (isnan(1.0) ? _4740 : (isnan(_4740) ? 1.0 : min(_4740, 1.0)))) * 5.0);
        float _2845 = 1.0 - _2804;
        float _2855 = (0.5 / (((_2472 * ((_2818 * _2845) + _2804)) + 9.9999999392252902907785028219223e-09) + (((_2472 * _2845) + _2804) * _2818))) * _2818;
        float _4751 = isnan(0.0) ? _2855 : (isnan(_2855) ? 0.0 : max(_2855, 0.0));
        float _2857 = (isnan(1.0) ? _4751 : (isnan(_4751) ? 1.0 : min(_4751, 1.0))) * (_2827 / ((_2831 * _2831) * 3.141590118408203125));
        float _2858 = isnan(1.0) ? _2212 : (isnan(_2212) ? 1.0 : min(_2212, 1.0));
        _2774 = (((((_2838 * _2494) + _845) * cbLight._m0[_2789].x) * _2857) * _2858) + _2664;
        _2776 = (((((_2838 * _2496) + _847) * cbLight._m0[_2789].y) * _2857) * _2858) + _2666;
        _2778 = (((((_2838 * _2497) + _848) * cbLight._m0[_2789].z) * _2857) * _2858) + _2668;
    }
    float _2924;
    float _2926;
    float _2928;
    float _2930;
    float _2932;
    float _2934;
    if (_2194.y == 0u)
    {
        uvec4 _2879 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2880 = _2879.x;
        uint _2891 = uint((float(_2879.y) * floor(float(uint(cbSceneParam._m0[85u].y * _783) / _2880))) + floor(float(uint(cbSceneParam._m0[85u].x * _782) / _2880)));
        float _2901 = (log2(_1972 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2902 = isnan(0.0) ? _2901 : (isnan(_2901) ? 0.0 : max(_2901, 0.0));
        uint _2905 = uint(isnan(14.0) ? _2902 : (isnan(_2902) ? 14.0 : min(_2902, 14.0)));
        uvec4 _2910 = texelFetch(g_lightClusterGridBuffer, int(((_2905 << 2u) + (_2891 << 6u)) >> 2u));
        uint _2911 = _2910.x;
        uint _2912 = _2879.z;
        float _2991;
        float _2993;
        float _2995;
        float _2997;
        float _2999;
        float _3001;
        if (((((1u << ((_2912 >> 4u) & 15u)) + 4294967295u) & _2911) == 0u) || ((_2912 & 240u) == 0u))
        {
            _2991 = 0.0;
            _2993 = 0.0;
            _2995 = 0.0;
            _2997 = 0.0;
            _2999 = 0.0;
            _3001 = 0.0;
        }
        else
        {
            float _2992;
            float _2994;
            float _2996;
            float _2998;
            float _3000;
            float _3002;
            float _3143 = 0.0;
            float _3144 = 0.0;
            float _3145 = 0.0;
            float _3146 = 0.0;
            float _3147 = 0.0;
            float _3148 = 0.0;
            uint _3149 = 0u;
            uint _3158;
            bool _3159;
            for (;;)
            {
                _3158 = texelFetch(g_lightClassification, int((((_2905 << 5u) + (_2891 << 9u)) + (_3149 << 2u)) >> 2u)).x;
                _3159 = _3158 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3159)
                {
                    frontier_phi_71_pred = _3148;
                    frontier_phi_71_pred_1 = _3147;
                    frontier_phi_71_pred_2 = _3146;
                    frontier_phi_71_pred_3 = _3145;
                    frontier_phi_71_pred_4 = _3144;
                    frontier_phi_71_pred_5 = _3143;
                }
                else
                {
                    float _3288;
                    float _3289;
                    float _3290;
                    float _3291;
                    float _3292;
                    float _3293;
                    uint _3294;
                    _3288 = _3143;
                    _3289 = _3144;
                    _3290 = _3145;
                    _3291 = _3146;
                    _3292 = _3147;
                    _3293 = _3148;
                    _3294 = _3158;
                    float _3215;
                    float _3216;
                    float _3217;
                    float _3218;
                    float _3219;
                    float _3220;
                    for (;;)
                    {
                        uint _3298 = uint(findLSB(_3294)) + (_3149 << 5u);
                        uint _3295 = (_3294 + 4294967295u) & _3294;
                        uint _3300 = _3298 * 48u;
                        vec4 _3314 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3300)).x, texelFetch(g_PointLightRenderingBuffer, int(_3300 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3300 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3300 + 3u)).x));
                        uint _3320 = (_3298 * 48u) + 4u;
                        vec4 _3333 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3320)).x, texelFetch(g_PointLightRenderingBuffer, int(_3320 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3320 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3320 + 3u)).x));
                        uint _3339 = (_3298 * 48u) + 8u;
                        vec3 _3350 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3339)).x, texelFetch(g_PointLightRenderingBuffer, int(_3339 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3339 + 2u)).x));
                        float _3354 = _3314.x - _1970;
                        float _3355 = _3314.y - _1971;
                        float _3356 = _3314.z - _1972;
                        float _3357 = dot(vec3(_3354, _3355, _3356), vec3(_3354, _3355, _3356));
                        float _3360 = inversesqrt(_3357);
                        float _3361 = _3360 * _3354;
                        float _3362 = _3360 * _3355;
                        float _3363 = _3360 * _3356;
                        float _3364 = dot(vec3(_801, _804, _807), vec3(_3361, _3362, _3363));
                        float _3369 = 1.0 - (_3357 * _3314.w);
                        float _4777 = isnan(0.0) ? _3369 : (isnan(_3369) ? 0.0 : max(_3369, 0.0));
                        float _3370 = isnan(1.0) ? _4777 : (isnan(_4777) ? 1.0 : min(_4777, 1.0));
                        float _3371 = sqrt(_3357) * _3333.w;
                        float _3374 = 1.39999997615814208984375 / (_3371 + 1.39999997615814208984375);
                        float _3375 = _3374 * _3374;
                        float _3378 = ((1.0 - _3375) * _3364) + _3375;
                        float _3381 = _3371 * _3371;
                        float _3385 = ((isnan(0.0) ? _3378 : (isnan(_3378) ? 0.0 : max(_3378, 0.0))) * _3370) / ((_3381 * 0.699999988079071044921875) + 1.0);
                        float _3389 = (-0.0) - _1970;
                        float _3390 = (-0.0) - _1971;
                        float _3391 = (-0.0) - _1972;
                        float _3395 = inversesqrt(dot(vec3(_3389, _3390, _3391), vec3(_3389, _3390, _3391)));
                        float _3396 = _3395 * _3389;
                        float _3397 = _3395 * _3390;
                        float _3398 = _3395 * _3391;
                        float _3405 = exp2(log2(1.0 / ((_3381 * 3.5) + 5.0)) * 0.25);
                        float _3406 = 1.0 - _876;
                        float _3413 = sqrt(1.0 - ((1.0 - (_3406 * _3406)) * (1.0 - (_3405 * _3405))));
                        float _3414 = _3413 * _3413;
                        float _3415 = _3414 * _3414;
                        float _3416 = _3396 + _3361;
                        float _3417 = _3397 + _3362;
                        float _3418 = _3398 + _3363;
                        float _3422 = inversesqrt(dot(vec3(_3416, _3417, _3418), vec3(_3416, _3417, _3418)));
                        float _3426 = dot(vec3(_801, _804, _807), vec3(_3396, _3397, _3398));
                        float _4793 = isnan(0.0) ? _3426 : (isnan(_3426) ? 0.0 : max(_3426, 0.0));
                        float _3429 = isnan(1.0) ? _4793 : (isnan(_4793) ? 1.0 : min(_4793, 1.0));
                        float _3430 = dot(vec3(_801, _804, _807), vec3(_3422 * _3416, _3422 * _3417, _3422 * _3418));
                        float _4804 = isnan(0.0) ? _3430 : (isnan(_3430) ? 0.0 : max(_3430, 0.0));
                        float _3433 = isnan(1.0) ? _4804 : (isnan(_4804) ? 1.0 : min(_4804, 1.0));
                        float _3437 = ((_3433 * _3433) * (_3415 + (-1.0))) + 1.0;
                        float _3438 = _3374 * _3414;
                        float _3439 = _3438 * _3438;
                        float _3442 = ((1.0 - _3439) * _3364) + _3439;
                        float _4815 = isnan(0.0) ? _3442 : (isnan(_3442) ? 0.0 : max(_3442, 0.0));
                        float _3443 = isnan(1.0) ? _4815 : (isnan(_4815) ? 1.0 : min(_4815, 1.0));
                        float _3444 = 1.0 - _3414;
                        float _3454 = (0.5 / (((_3443 * ((_3429 * _3444) + _3414)) + 9.9999999392252902907785028219223e-09) + (((_3443 * _3444) + _3414) * _3429))) * _3443;
                        float _4826 = isnan(0.0) ? _3454 : (isnan(_3454) ? 0.0 : max(_3454, 0.0));
                        float _3465 = (((_3415 * 3.1415927410125732421875) * (isnan(1.0) ? _4826 : (isnan(_4826) ? 1.0 : min(_4826, 1.0)))) / ((_3437 * _3437) * ((_3381 * 2.1991131305694580078125) + 3.141590118408203125))) * _3370;
                        _3218 = (_3385 * _3333.x) + _3291;
                        _3219 = (_3385 * _3333.y) + _3292;
                        _3220 = (_3385 * _3333.z) + _3293;
                        _3215 = (_3465 * _3350.x) + _3288;
                        _3216 = (_3465 * _3350.y) + _3289;
                        _3217 = (_3465 * _3350.z) + _3290;
                        if (_3295 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3288 = _3215;
                            _3289 = _3216;
                            _3290 = _3217;
                            _3291 = _3218;
                            _3292 = _3219;
                            _3293 = _3220;
                            _3294 = _3295;
                        }
                    }
                    frontier_phi_71_pred = _3220;
                    frontier_phi_71_pred_1 = _3219;
                    frontier_phi_71_pred_2 = _3218;
                    frontier_phi_71_pred_3 = _3217;
                    frontier_phi_71_pred_4 = _3216;
                    frontier_phi_71_pred_5 = _3215;
                }
                _3002 = frontier_phi_71_pred;
                _3000 = frontier_phi_71_pred_1;
                _2998 = frontier_phi_71_pred_2;
                _2996 = frontier_phi_71_pred_3;
                _2994 = frontier_phi_71_pred_4;
                _2992 = frontier_phi_71_pred_5;
                uint _3150 = _3149 + 1u;
                if (_3150 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3143 = _2992;
                    _3144 = _2994;
                    _3145 = _2996;
                    _3146 = _2998;
                    _3147 = _3000;
                    _3148 = _3002;
                    _3149 = _3150;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2991 = _2992;
            _2993 = _2994;
            _2995 = _2996;
            _2997 = _2998;
            _2999 = _3000;
            _3001 = _3002;
        }
        uvec4 _3005 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3006 = _3005.z;
        uint _3008 = (_3006 >> 8u) & 15u;
        float _3111;
        float _3113;
        float _3115;
        float _3117;
        float _3119;
        float _3121;
        if (((4294967295u << _3008) & _2911) == 0u)
        {
            _3111 = _2991;
            _3113 = _2993;
            _3115 = _2995;
            _3117 = _2997;
            _3119 = _2999;
            _3121 = _3001;
        }
        else
        {
            float _3136 = inversesqrt(dot(vec3(_1970, _1971, _1972), vec3(_1970, _1971, _1972)));
            float _3137 = _3136 * _1970;
            float _3138 = _3136 * _1971;
            float _3139 = _3136 * _1972;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3008 < ((_3006 >> 12u) & 15u))
            {
                float _3112;
                float _3114;
                float _3116;
                float _3118;
                float _3120;
                float _3122;
                float _3271 = _2991;
                float _3272 = _2993;
                float _3273 = _2995;
                float _3274 = _2997;
                float _3275 = _2999;
                float _3276 = _3001;
                uint _3277 = _3008;
                uint _3286;
                bool _3287;
                for (;;)
                {
                    _3286 = texelFetch(g_lightClassification, int((((_2905 << 5u) + (_2891 << 9u)) + (_3277 << 2u)) >> 2u)).x;
                    _3287 = _3286 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3287)
                    {
                        frontier_phi_82_pred = _3276;
                        frontier_phi_82_pred_1 = _3275;
                        frontier_phi_82_pred_2 = _3274;
                        frontier_phi_82_pred_3 = _3273;
                        frontier_phi_82_pred_4 = _3272;
                        frontier_phi_82_pred_5 = _3271;
                    }
                    else
                    {
                        float _3479;
                        float _3480;
                        float _3481;
                        float _3482;
                        float _3483;
                        float _3484;
                        float _3773;
                        float _3774;
                        float _3775;
                        float _3776;
                        float _3777;
                        float _3778;
                        float _3492 = _3271;
                        float _3493 = _3272;
                        float _3494 = _3273;
                        float _3495 = _3274;
                        float _3496 = _3275;
                        float _3497 = _3276;
                        uint _3498 = _3286;
                        uint _3499;
                        vec4 _3524;
                        float _3525;
                        vec4 _3540;
                        vec3 _3552;
                        vec4 _3567;
                        vec4 _3582;
                        float _3629;
                        bool _3630;
                        for (;;)
                        {
                            uint _3509 = ((_3277 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3498));
                            _3499 = (_3498 + 4294967295u) & _3498;
                            uint _3511 = _3509 * 40u;
                            _3524 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3511)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3511 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3511 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3511 + 3u)).x));
                            _3525 = _3524.w;
                            uint _3527 = (_3509 * 40u) + 4u;
                            _3540 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3527)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3527 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3527 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3527 + 3u)).x));
                            uint _3542 = (_3509 * 40u) + 8u;
                            _3552 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3542)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3542 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3542 + 2u)).x));
                            uint _3554 = (_3509 * 40u) + 16u;
                            _3567 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3554)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3554 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3554 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3554 + 3u)).x));
                            uint _3569 = (_3509 * 40u) + 20u;
                            _3582 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3569)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3569 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3569 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3569 + 3u)).x));
                            uint _3585 = (_3509 * 40u) + 24u;
                            vec4 _3598 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3585)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3585 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3585 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3585 + 3u)).x));
                            uint _3604 = (_3509 * 40u) + 28u;
                            vec4 _3617 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3604)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3604 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3604 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3604 + 3u)).x));
                            _3629 = fma(_1972, _3617.z, fma(_1971, _3617.y, _3617.x * _1970)) + _3617.w;
                            _3630 = !((fma(_1972, _3598.z, fma(_1971, _3598.y, _3598.x * _1970)) + _3598.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3630)
                            {
                                float _3657 = _3524.x - _1970;
                                float _3658 = _3524.y - _1971;
                                float _3659 = _3524.z - _1972;
                                float _3660 = dot(vec3(_3657, _3658, _3659), vec3(_3657, _3658, _3659));
                                float _3663 = inversesqrt(_3660);
                                float _3664 = _3663 * _3657;
                                float _3665 = _3663 * _3658;
                                float _3666 = _3663 * _3659;
                                float _3670 = 1.0 - (_3660 / (_3525 * _3525));
                                float _4837 = isnan(0.0) ? _3670 : (isnan(_3670) ? 0.0 : max(_3670, 0.0));
                                float _3671 = isnan(1.0) ? _4837 : (isnan(_4837) ? 1.0 : min(_4837, 1.0));
                                float _3675 = sqrt(_3660) * _3540.w;
                                float _3677 = 1.39999997615814208984375 / (_3675 + 1.39999997615814208984375);
                                float _3678 = _3677 * _3677;
                                float _3681 = ((1.0 - _3678) * dot(vec3(_3664, _3665, _3666), vec3(_801, _804, _807))) + _3678;
                                float _3684 = _3675 * _3675;
                                float _3688 = (fma(_1972, _3567.z, fma(_1971, _3567.y, _3567.x * _1970)) + _3567.w) / _3629;
                                float _3689 = (fma(_1972, _3582.z, fma(_1971, _3582.y, _3582.x * _1970)) + _3582.w) / _3629;
                                float _3693 = 1.0 - dot(vec2(_3688, _3689), vec2(_3688, _3689));
                                float _4853 = isnan(0.0) ? _3693 : (isnan(_3693) ? 0.0 : max(_3693, 0.0));
                                float _3694 = isnan(1.0) ? _4853 : (isnan(_4853) ? 1.0 : min(_4853, 1.0));
                                float _3695 = _3694 * (((isnan(0.0) ? _3681 : (isnan(_3681) ? 0.0 : max(_3681, 0.0))) * _3671) / ((_3684 * 0.699999988079071044921875) + 1.0));
                                float _3707 = exp2(log2(1.0 / ((_3684 * 3.5) + 5.0)) * 0.25);
                                float _3708 = 1.0 - _876;
                                float _3715 = sqrt(1.0 - ((1.0 - (_3708 * _3708)) * (1.0 - (_3707 * _3707))));
                                float _3716 = _3715 * _3715;
                                float _3717 = _3716 * _3716;
                                float _3718 = _3664 - _3137;
                                float _3719 = _3665 - _3138;
                                float _3720 = _3666 - _3139;
                                float _3724 = inversesqrt(dot(vec3(_3718, _3719, _3720), vec3(_3718, _3719, _3720)));
                                float _3728 = dot(vec3(_801, _804, _807), vec3((-0.0) - _3137, (-0.0) - _3138, (-0.0) - _3139));
                                float _4864 = isnan(0.0) ? _3728 : (isnan(_3728) ? 0.0 : max(_3728, 0.0));
                                float _3731 = isnan(1.0) ? _4864 : (isnan(_4864) ? 1.0 : min(_4864, 1.0));
                                float _3732 = dot(vec3(_801, _804, _807), vec3(_3724 * _3718, _3724 * _3719, _3724 * _3720));
                                float _4875 = isnan(0.0) ? _3732 : (isnan(_3732) ? 0.0 : max(_3732, 0.0));
                                float _3735 = isnan(1.0) ? _4875 : (isnan(_4875) ? 1.0 : min(_4875, 1.0));
                                float _3739 = ((_3735 * _3735) * (_3717 + (-1.0))) + 1.0;
                                float _3740 = _3677 * _3716;
                                float _3741 = _3740 * _3740;
                                float _3747 = ((1.0 - _3741) * dot(vec3(_801, _804, _807), vec3(_3664, _3665, _3666))) + _3741;
                                float _4886 = isnan(0.0) ? _3747 : (isnan(_3747) ? 0.0 : max(_3747, 0.0));
                                float _3748 = isnan(1.0) ? _4886 : (isnan(_4886) ? 1.0 : min(_4886, 1.0));
                                float _3749 = 1.0 - _3716;
                                float _3759 = (0.5 / (((_3748 * ((_3731 * _3749) + _3716)) + 9.9999999392252902907785028219223e-09) + (((_3748 * _3749) + _3716) * _3731))) * _3748;
                                float _4897 = isnan(0.0) ? _3759 : (isnan(_3759) ? 0.0 : max(_3759, 0.0));
                                float _3769 = (_3694 * _3671) * (((_3717 * 3.1415927410125732421875) * (isnan(1.0) ? _4897 : (isnan(_4897) ? 1.0 : min(_4897, 1.0)))) / ((_3739 * _3739) * ((_3684 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3695 * _3540.z;
                                frontier_phi_88_pred_1 = _3695 * _3540.y;
                                frontier_phi_88_pred_2 = _3695 * _3540.x;
                                frontier_phi_88_pred_3 = _3769 * _3552.z;
                                frontier_phi_88_pred_4 = _3769 * _3552.y;
                                frontier_phi_88_pred_5 = _3769 * _3552.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3778 = frontier_phi_88_pred;
                            _3777 = frontier_phi_88_pred_1;
                            _3776 = frontier_phi_88_pred_2;
                            _3775 = frontier_phi_88_pred_3;
                            _3774 = frontier_phi_88_pred_4;
                            _3773 = frontier_phi_88_pred_5;
                            _3482 = _3776 + _3495;
                            _3483 = _3777 + _3496;
                            _3484 = _3778 + _3497;
                            _3479 = _3773 + _3492;
                            _3480 = _3774 + _3493;
                            _3481 = _3775 + _3494;
                            if (_3499 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3492 = _3479;
                                _3493 = _3480;
                                _3494 = _3481;
                                _3495 = _3482;
                                _3496 = _3483;
                                _3497 = _3484;
                                _3498 = _3499;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3484;
                        frontier_phi_82_pred_1 = _3483;
                        frontier_phi_82_pred_2 = _3482;
                        frontier_phi_82_pred_3 = _3481;
                        frontier_phi_82_pred_4 = _3480;
                        frontier_phi_82_pred_5 = _3479;
                    }
                    _3122 = frontier_phi_82_pred;
                    _3120 = frontier_phi_82_pred_1;
                    _3118 = frontier_phi_82_pred_2;
                    _3116 = frontier_phi_82_pred_3;
                    _3114 = frontier_phi_82_pred_4;
                    _3112 = frontier_phi_82_pred_5;
                    uint _3278 = _3277 + 1u;
                    if (_3278 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3271 = _3112;
                        _3272 = _3114;
                        _3273 = _3116;
                        _3274 = _3118;
                        _3275 = _3120;
                        _3276 = _3122;
                        _3277 = _3278;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3118;
                frontier_phi_63_64_ladder_1 = _3122;
                frontier_phi_63_64_ladder_2 = _3120;
                frontier_phi_63_64_ladder_3 = _3116;
                frontier_phi_63_64_ladder_4 = _3114;
                frontier_phi_63_64_ladder_5 = _3112;
            }
            else
            {
                frontier_phi_63_64_ladder = _2997;
                frontier_phi_63_64_ladder_1 = _3001;
                frontier_phi_63_64_ladder_2 = _2999;
                frontier_phi_63_64_ladder_3 = _2995;
                frontier_phi_63_64_ladder_4 = _2993;
                frontier_phi_63_64_ladder_5 = _2991;
            }
            _3111 = frontier_phi_63_64_ladder_5;
            _3113 = frontier_phi_63_64_ladder_4;
            _3115 = frontier_phi_63_64_ladder_3;
            _3117 = frontier_phi_63_64_ladder;
            _3119 = frontier_phi_63_64_ladder_2;
            _3121 = frontier_phi_63_64_ladder_1;
        }
        float _3126 = isnan(1.0) ? _860 : (isnan(_860) ? 1.0 : min(_860, 1.0));
        _2924 = (_3126 * _3117) + _2436;
        _2926 = (_3126 * _3119) + _2438;
        _2928 = (_3126 * _3121) + _2440;
        _2930 = ((_3111 * _845) * _3126) + _2774;
        _2932 = ((_3113 * _847) * _3126) + _2776;
        _2934 = ((_3115 * _848) * _3126) + _2778;
    }
    else
    {
        _2924 = _2436;
        _2926 = _2438;
        _2928 = _2440;
        _2930 = _2774;
        _2932 = _2776;
        _2934 = _2778;
    }
    float _4913 = isnan(0.0) ? _835 : (isnan(_835) ? 0.0 : max(_835, 0.0));
    float _4924 = isnan(0.0) ? _836 : (isnan(_836) ? 0.0 : max(_836, 0.0));
    float _4935 = isnan(0.0) ? _837 : (isnan(_837) ? 0.0 : max(_837, 0.0));
    float _2951 = ((isnan(1.0) ? _4913 : (isnan(_4913) ? 1.0 : min(_4913, 1.0))) * (_2924 + ((isnan(0.0) ? _1623 : (isnan(_1623) ? 0.0 : max(_1623, 0.0))) * _860))) + ((_2930 + ((isnan(0.0) ? _1917 : (isnan(_1917) ? 0.0 : max(_1917, 0.0))) * _1702)) * cbPerFrame._m0[3u].x);
    float _2952 = ((isnan(1.0) ? _4924 : (isnan(_4924) ? 1.0 : min(_4924, 1.0))) * (_2926 + ((isnan(0.0) ? _1626 : (isnan(_1626) ? 0.0 : max(_1626, 0.0))) * _860))) + ((_2932 + ((isnan(0.0) ? _1920 : (isnan(_1920) ? 0.0 : max(_1920, 0.0))) * _1702)) * cbPerFrame._m0[3u].x);
    float _2953 = ((isnan(1.0) ? _4935 : (isnan(_4935) ? 1.0 : min(_4935, 1.0))) * (_2928 + ((isnan(0.0) ? _1629 : (isnan(_1629) ? 0.0 : max(_1629, 0.0))) * _860))) + ((_2934 + ((isnan(0.0) ? _1923 : (isnan(_1923) ? 0.0 : max(_1923, 0.0))) * _1702)) * cbPerFrame._m0[3u].x);
    uint _2954 = _820 + 6u;
    float _2962 = _782 / cbSceneParam._m0[86u].x;
    float _2963 = _783 / cbSceneParam._m0[86u].y;
    vec4 _2977 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2962, _2963, (log2((isnan(cbSceneParam._m0[77u].w) ? _705 : (isnan(_705) ? cbSceneParam._m0[77u].w : min(_705, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2979 = _2977.x;
    float _2980 = _2977.y;
    float _2981 = _2977.z;
    float _2982 = _2977.w;
    float _3053;
    float _3055;
    float _3057;
    float _3059;
    if (_705 > cbSceneParam._m0[78u].w)
    {
        float _3016 = isnan(_705) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _705 : min(cbSceneParam._m0[80u].w, _705));
        float _3017 = _3016 / _705;
        float _3028 = _3017 * _755;
        float _3029 = _756 * _3017;
        float _3030 = (-0.0) - _3029;
        float _3031 = _3017 * _757;
        float _3033 = (cbSceneParam._m0[77u].w * _3030) / _3016;
        float _3034 = _3033 + cbSceneParam._m0[79u].w;
        float _3035 = cbSceneParam._m0[79u].w - _3029;
        float _3041 = sqrt(((_3028 * _3028) + (_3029 * _3029)) + (_3031 * _3031));
        float _3044 = (1.0 - (cbSceneParam._m0[77u].w / _3016)) * _3041;
        float _3049 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3051 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3228;
        if (abs((_3030 - _3033) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3228 = ((((_3034 > 0.0) ? exp2(_3049 * _3034) : (2.0 - exp2(_3051 * _3034))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3044;
        }
        else
        {
            float _3172 = 1.0 / cbSceneParam._m0[80u].x;
            float _3173 = isnan(_3035) ? _3034 : (isnan(_3034) ? _3035 : max(_3034, _3035));
            float _3174 = isnan(_3035) ? _3034 : (isnan(_3034) ? _3035 : min(_3034, _3035));
            float _3183 = isnan(0.0) ? _3173 : (isnan(_3173) ? 0.0 : min(_3173, 0.0));
            float _3184 = isnan(0.0) ? _3174 : (isnan(_3174) ? 0.0 : min(_3174, 0.0));
            _3228 = ((abs(_3041 / _3030) * cbSceneParam._m0[80u].y) * ((((_3183 - _3184) * 2.0) - ((exp2(_3049 * (isnan(0.0) ? _3173 : (isnan(_3173) ? 0.0 : max(_3173, 0.0)))) - exp2(_3049 * (isnan(0.0) ? _3174 : (isnan(_3174) ? 0.0 : max(_3174, 0.0))))) * _3172)) - ((exp2(_3051 * _3183) - exp2(_3051 * _3184)) * _3172))) + (_3044 * cbSceneParam._m0[80u].z);
        }
        vec4 _3230 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2962, _2963, 1.0), 0.0);
        float _3239 = exp2((_3228 * (-1.44269502162933349609375)) * (1.0 - _3230.w));
        float _3240 = log2(_3239);
        float _3256 = log2(_2982);
        _3053 = (exp2(_3256 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3240 * cbSceneParam._m0[78u].x)) * _3230.x) / cbSceneParam._m0[78u].x)) + _2979;
        _3055 = (exp2(_3256 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3240 * cbSceneParam._m0[78u].y)) * _3230.y) / cbSceneParam._m0[78u].y)) + _2980;
        _3057 = (exp2(_3256 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3240 * cbSceneParam._m0[78u].z)) * _3230.z) / cbSceneParam._m0[78u].z)) + _2981;
        _3059 = _3239 * _2982;
    }
    else
    {
        _3053 = _2979;
        _3055 = _2980;
        _3057 = _2981;
        _3059 = _2982;
    }
    bool _3266;
    vec4 _3069;
    vec4 _3091;
    float _3093;
    float _3097;
    float _3098;
    float _3099;
    float _3100;
    bool _3110;
    for (;;)
    {
        _3069 = cbMatDynParam._m0[0u];
        float _3071 = roundEven(_3069.y);
        bool _3072 = _3071 == 3.0;
        float _3073 = log2(_3059);
        float _3080 = exp2(_3073 * cbSceneParam._m0[78u].x) * _2951;
        float _3081 = exp2(_3073 * cbSceneParam._m0[78u].y) * _2952;
        float _3082 = exp2(_3073 * cbSceneParam._m0[78u].z) * _2953;
        float _3089 = _771 + (-0.5);
        _3091 = cbMtdParam._m0[1u];
        _3093 = _3091.y * _3089;
        float _3096 = (_3071 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3097 = _3096 * (_3072 ? _3080 : (_3080 + (cbSceneParam._m0[72u].w * _3053)));
        _3098 = _3096 * (_3072 ? _3081 : (_3081 + (cbSceneParam._m0[72u].w * _3055)));
        _3099 = _3096 * (_3072 ? _3082 : (_3082 + (cbSceneParam._m0[72u].w * _3057)));
        _3100 = _3089 * 0.999000012874603271484375;
        _3110 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3110)
        {
            if ((cbInstanceData._m0[_820 + 7u].x + _3100) < 0.5)
            {
                _3266 = true;
                break;
            }
        }
        uint _3207 = _821 + uint(_3069.w);
        if ((cbInstanceData._m0[_3207].w < 1.0) && ((cbInstanceData._m0[_3207].w + _3100) < 0.5))
        {
            _3266 = true;
            break;
        }
        if ((_3093 + 1.0) < _3091.x)
        {
            _3266 = true;
            break;
        }
        _3266 = false;
        break;
    }
    float _3470;
    if (_3266)
    {
        discard_state = true;
        _3470 = 0.0;
    }
    else
    {
        _3470 = cbInstanceData._m0[_2954].w;
    }
    SV_Target.x = _3097;
    SV_Target.y = _3098;
    SV_Target.z = _3099;
    SV_Target.w = _3470;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2954].w;
    discard_exit();
}


