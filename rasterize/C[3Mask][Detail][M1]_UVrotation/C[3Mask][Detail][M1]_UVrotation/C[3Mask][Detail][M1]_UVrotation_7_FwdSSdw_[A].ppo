#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[20];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_19;
layout(set = 0, binding = 11) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_3;
layout(set = 0, binding = 14) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_5;
layout(set = 0, binding = 15) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_6;
layout(set = 0, binding = 17) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_8;
layout(set = 0, binding = 2) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_11;
layout(set = 0, binding = 5) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_14;
layout(set = 0, binding = 6) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_15;
layout(set = 0, binding = 7) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_16;
layout(set = 0, binding = 8) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_17;
layout(set = 0, binding = 9) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_18;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1228;
float _3635;
float _3636;
float _3637;
float _3638;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _203 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _204 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _205 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _211 = inversesqrt(dot(vec3(_203, _204, _205), vec3(_203, _204, _205)));
    float _218 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _225 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _248 = sin(cbMtdParam._m0[18u].x);
    float _249 = cos(cbMtdParam._m0[18u].x);
    float _250 = TEXCOORD.x - cbMtdParam._m0[17u].w;
    float _251 = TEXCOORD.y - cbMtdParam._m0[17u].w;
    float _259 = (cbMtdParam._m0[17u].w + cbMtdParam._m0[19u].y) + fma(_251, (-0.0) - _248, _249 * _250);
    float _261 = (cbMtdParam._m0[17u].w + cbMtdParam._m0[19u].z) + fma(_251, _249, _250 * _248);
    vec4 _274 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * _259) + cbTextureTilingScale._m0[1u].z, (_261 * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w));
    float _280 = _274.x * cbMtdParam._m0[10u].x;
    float _281 = _274.y * cbMtdParam._m0[10u].y;
    float _282 = _274.z * cbMtdParam._m0[10u].z;
    vec4 _300 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w));
    vec4 _319 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_0, SS_WrapLinear), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _344 = cbMtdParam._m0[19u].x * texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.x) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD.y) + cbTextureTilingScale._m0[13u].w)).x;
    float _355 = ((cbMtdParam._m0[15u].x * (-1.39999997615814208984375)) * (((1.0 - _319.x) * 2.0) - _344)) + 1.0;
    float _3647 = isnan(0.0) ? _355 : (isnan(_355) ? 0.0 : max(_355, 0.0));
    float _356 = isnan(1.0) ? _3647 : (isnan(_3647) ? 1.0 : min(_3647, 1.0));
    float _363 = (_356 * ((_300.x * cbMtdParam._m0[11u].x) - _280)) + _280;
    float _364 = (_356 * ((_300.y * cbMtdParam._m0[11u].y) - _281)) + _281;
    float _365 = (_356 * ((_300.z * cbMtdParam._m0[11u].z) - _282)) + _282;
    vec4 _383 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_8, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[17u].x * TEXCOORD.x) + cbTextureTilingScale._m0[17u].z, (cbTextureTilingScale._m0[17u].y * TEXCOORD.y) + cbTextureTilingScale._m0[17u].w));
    float _396 = (((((1.0 - _319.y) * 2.0) - _344) * (-1.39999997615814208984375)) * cbMtdParam._m0[18u].z) + 1.0;
    float _3658 = isnan(0.0) ? _396 : (isnan(_396) ? 0.0 : max(_396, 0.0));
    float _397 = isnan(1.0) ? _3658 : (isnan(_3658) ? 1.0 : min(_3658, 1.0));
    float _404 = (((_383.x * cbMtdParam._m0[12u].x) - _363) * _397) + _363;
    float _405 = (_397 * ((_383.y * cbMtdParam._m0[12u].y) - _364)) + _364;
    float _406 = (_397 * ((_383.z * cbMtdParam._m0[12u].z) - _365)) + _365;
    vec4 _423 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _436 = (((((1.0 - _319.z) * 2.0) - _344) * (-1.39999997615814208984375)) * cbMtdParam._m0[18u].w) + 1.0;
    float _3669 = isnan(0.0) ? _436 : (isnan(_436) ? 0.0 : max(_436, 0.0));
    float _437 = isnan(1.0) ? _3669 : (isnan(_3669) ? 1.0 : min(_3669, 1.0));
    float _444 = (((_423.x * cbMtdParam._m0[13u].x) - _404) * _437) + _404;
    float _445 = (_437 * ((_423.y * cbMtdParam._m0[13u].y) - _405)) + _405;
    float _446 = (_437 * ((_423.z * cbMtdParam._m0[13u].z) - _406)) + _406;
    vec4 _459 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * _259) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _261) + cbTextureTilingScale._m0[5u].w));
    float _461 = _459.x;
    float _479 = ((texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w)).x - _461) * _356) + _461;
    float _497 = ((texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w)).x - _479) * _397) + _479;
    float _516 = (((texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w)).x - _497) * _437) + _497) * cbMtdParam._m0[18u].y;
    vec4 _529 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[14u].x * _259) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _261) + cbTextureTilingScale._m0[14u].w));
    float _531 = _529.x;
    float _532 = _529.y;
    float _535 = cbMtdParam._m0[17u].y * _529.z;
    vec4 _547 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * TEXCOORD.x) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * TEXCOORD.y) + cbTextureTilingScale._m0[15u].w));
    float _556 = (((cbMtdParam._m0[17u].x * _547.z) - _535) * _356) + _535;
    vec4 _569 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_15, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _581 = (((cbMtdParam._m0[16u].w * _569.z) - _556) * _397) + _556;
    vec4 _594 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _603 = (((cbMtdParam._m0[16u].z * _594.z) - _581) * _437) + _581;
    float _608 = ((_547.x - _531) * _356) + _531;
    float _609 = ((_547.y - _532) * _356) + _532;
    float _614 = ((_569.x - _608) * _397) + _608;
    float _615 = ((_569.y - _609) * _397) + _609;
    float _624 = ((((_594.x - _614) * _437) + _614) * 2.0) + (-1.0);
    float _626 = ((((_594.y - _615) * _437) + _615) * 2.0) + (-1.0);
    float _627 = dot(vec2(_624, _626), vec2(_624, _626));
    float _3680 = isnan(0.0) ? _627 : (isnan(_627) ? 0.0 : max(_627, 0.0));
    float _632 = sqrt(1.0 - (isnan(1.0) ? _3680 : (isnan(_3680) ? 1.0 : min(_3680, 1.0))));
    float _635 = fma(_632, _218 * NORMAL.x, fma(_626, _225 * TANGENT.x, (_211 * _203) * _624));
    float _638 = fma(_632, _218 * NORMAL.y, fma(_626, _225 * TANGENT.y, (_211 * _204) * _624));
    float _641 = fma(_632, _218 * NORMAL.z, fma(_626, _225 * TANGENT.z, (_211 * _205) * _624));
    float _645 = inversesqrt(dot(vec3(_635, _638, _641), vec3(_635, _638, _641)));
    float _646 = _645 * _635;
    float _647 = _645 * _638;
    float _648 = _645 * _641;
    float _3691 = isnan(0.0) ? _603 : (isnan(_603) ? 0.0 : max(_603, 0.0));
    float _649 = isnan(1.0) ? _3691 : (isnan(_3691) ? 1.0 : min(_3691, 1.0));
    float _3702 = isnan(0.0) ? _444 : (isnan(_444) ? 0.0 : max(_444, 0.0));
    float _3713 = isnan(0.0) ? _445 : (isnan(_445) ? 0.0 : max(_445, 0.0));
    float _3724 = isnan(0.0) ? _446 : (isnan(_446) ? 0.0 : max(_446, 0.0));
    float _3735 = isnan(0.0) ? _516 : (isnan(_516) ? 0.0 : max(_516, 0.0));
    float _653 = isnan(1.0) ? _3735 : (isnan(_3735) ? 1.0 : min(_3735, 1.0));
    float _669 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _709 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _719 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _709);
    float _720 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _709);
    float _721 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _709);
    float _725 = inversesqrt(dot(vec3(_719, _720, _721), vec3(_719, _720, _721)));
    float _726 = _719 * _725;
    float _727 = _720 * _725;
    float _728 = _721 * _725;
    vec4 _733 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _735 = _733.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _907 = sqrt(((_719 * _719) + (_720 * _720)) + (_721 * _721));
        float _913 = (cbMatDynParam._m0[5u].x * _907) + cbMatDynParam._m0[5u].y;
        float _3746 = isnan(0.0) ? _913 : (isnan(_913) ? 0.0 : max(_913, 0.0));
        float _914 = isnan(1.0) ? _3746 : (isnan(_3746) ? 1.0 : min(_3746, 1.0));
        float _918 = (cbMatDynParam._m0[5u].z * _907) + cbMatDynParam._m0[5u].w;
        float _3757 = isnan(0.0) ? _918 : (isnan(_918) ? 0.0 : max(_918, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3757 : (isnan(_3757) ? 1.0 : min(_3757, 1.0))) - _914)) + _914) < ((_735 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _746 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _747 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _765 = fma(_648, cbSceneParam._m0[5u].z, fma(_647, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _646));
    float _768 = fma(_648, cbSceneParam._m0[6u].z, fma(_647, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _646));
    float _771 = fma(_648, cbSceneParam._m0[7u].z, fma(_647, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _646));
    uint _784 = uint(roundEven(NORMAL.w)) * 13u;
    uint _785 = _784 + 9u;
    uint _786 = _785 + uint(cbMatDynParam._m0[0u].w);
    float _792 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3702 : (isnan(_3702) ? 1.0 : min(_3702, 1.0)))) * cbInstanceData._m0[_786].x;
    float _793 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3713 : (isnan(_3713) ? 1.0 : min(_3713, 1.0)))) * cbInstanceData._m0[_786].y;
    float _794 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3724 : (isnan(_3724) ? 1.0 : min(_3724, 1.0)))) * cbInstanceData._m0[_786].z;
    float _3768 = isnan(0.0) ? _792 : (isnan(_792) ? 0.0 : max(_792, 0.0));
    float _795 = isnan(1.0) ? _3768 : (isnan(_3768) ? 1.0 : min(_3768, 1.0));
    float _3779 = isnan(0.0) ? _793 : (isnan(_793) ? 0.0 : max(_793, 0.0));
    float _796 = isnan(1.0) ? _3779 : (isnan(_3779) ? 1.0 : min(_3779, 1.0));
    float _3790 = isnan(0.0) ? _794 : (isnan(_794) ? 0.0 : max(_794, 0.0));
    float _797 = isnan(1.0) ? _3790 : (isnan(_3790) ? 1.0 : min(_3790, 1.0));
    float _798 = 1.0 - _653;
    float _799 = _795 * _798;
    float _800 = _796 * _798;
    float _801 = _797 * _798;
    float _806 = (_795 + (-0.039999999105930328369140625)) * _653;
    float _807 = (_796 + (-0.039999999105930328369140625)) * _653;
    float _808 = (_797 + (-0.039999999105930328369140625)) * _653;
    float _809 = _806 + 0.039999999105930328369140625;
    float _811 = _807 + 0.039999999105930328369140625;
    float _812 = _808 + 0.039999999105930328369140625;
    vec4 _821 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _746, cbSceneParam._m0[86u].y * _747));
    float _824 = _821.x * TEXCOORD_5.w;
    float _825 = dot(vec3(_646, _647, _648), vec3(_726, _727, _728));
    float _828 = _825 * 2.0;
    float _832 = (_828 * _646) - _726;
    float _833 = (_828 * _647) - _727;
    float _834 = (_828 * _648) - _728;
    float _838 = abs(dot(vec3(_726, _727, _728), vec3(_646, _647, _648)));
    float _3801 = isnan(0.0) ? _838 : (isnan(_838) ? 0.0 : max(_838, 0.0));
    float _840 = sqrt(_649);
    float _853 = exp2((_840 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3801 : (isnan(_3801) ? 1.0 : min(_3801, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_840 * 3.0));
    float _859 = (1.0 - _853) * ((_840 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _860 = _853 * _840;
    float _888 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _892 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _896 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1227;
    float _1229;
    float _1230;
    float _1231;
    float _1232;
    float _1233;
    float _1234;
    float _1235;
    float _1236;
    float _1237;
    float _1238;
    float _1239;
    float _1240;
    float _1241;
    float _1242;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _952 = fma(_896, cbModelParam._m0[26u].z, fma(_892, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _888));
        float _956 = fma(_896, cbModelParam._m0[27u].z, fma(_892, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _888));
        float _960 = fma(_896, cbModelParam._m0[28u].z, fma(_892, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _888));
        float _985 = _888 + _646;
        float _986 = _892 + _647;
        float _987 = _896 + _648;
        float _997 = fma(_987, cbModelParam._m0[26u].z, fma(_986, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _985)) - _952;
        float _998 = fma(_987, cbModelParam._m0[27u].z, fma(_986, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _985)) - _956;
        float _999 = fma(_987, cbModelParam._m0[28u].z, fma(_986, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _985)) - _960;
        float _1003 = inversesqrt(dot(vec3(_997, _998, _999), vec3(_997, _998, _999)));
        float _1016 = ((_1003 * _997) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_952 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1017 = ((_1003 * _998) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_956 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1018 = ((_1003 * _999) / cbModelParam._m0[34u].z) + ((((((_960 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1021 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1016, _1017, _1018), 0.0);
        vec4 _1028 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1016, _1017, _1018), 0.0);
        vec4 _1035 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1016, _1017, _1018), 0.0);
        vec4 _1042 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1016, _1017, _1018), 0.0);
        float _1055 = exp2((_1021.w + (-0.5)) * 20.0) * 2.0;
        float _1056 = _1055 * (_1021.x + (-0.5));
        float _1057 = _1055 * (_1021.y + (-0.5));
        float _1058 = _1055 * (_1021.z + (-0.5));
        float _1065 = exp2((_1028.w + (-0.5)) * 20.0) * 2.0;
        float _1066 = _1065 * (_1028.x + (-0.5));
        float _1067 = _1065 * (_1028.y + (-0.5));
        float _1068 = _1065 * (_1028.z + (-0.5));
        float _1075 = exp2((_1035.w + (-0.5)) * 20.0) * 2.0;
        float _1076 = _1075 * (_1035.x + (-0.5));
        float _1077 = _1075 * (_1035.y + (-0.5));
        float _1078 = _1075 * (_1035.z + (-0.5));
        float _1085 = exp2((_1042.w + (-0.5)) * 20.0) * 2.0;
        float _1086 = _1085 * (_1042.x + (-0.5));
        float _1087 = _1085 * (_1042.y + (-0.5));
        float _1088 = _1085 * (_1042.z + (-0.5));
        float _1089 = isnan(0.0) ? _1086 : (isnan(_1086) ? 0.0 : max(_1086, 0.0));
        float _1090 = isnan(0.0) ? _1087 : (isnan(_1087) ? 0.0 : max(_1087, 0.0));
        float _1091 = isnan(0.0) ? _1088 : (isnan(_1088) ? 0.0 : max(_1088, 0.0));
        float _1092 = _1056 * 0.5;
        float _1093 = _1066 * 0.5;
        float _1094 = _1076 * 0.5;
        float _1095 = dot(vec3(_1092, _1093, _1094), vec3(_1092, _1093, _1094));
        float _1100 = (_1095 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1095);
        float _1109 = (dot(vec3(_646, _647, _648), vec3(_1100 * _1092, _1100 * _1093, _1100 * _1094)) + 1.0) * 0.5;
        float _3827 = isnan(0.0) ? _1109 : (isnan(_1109) ? 0.0 : max(_1109, 0.0));
        float _1119 = sqrt(((_1093 * _1093) + (_1092 * _1092)) + (_1094 * _1094)) / (_1089 + 9.9999997473787516355514526367188e-06);
        float _3838 = isnan(0.0) ? _1119 : (isnan(_1119) ? 0.0 : max(_1119, 0.0));
        float _1120 = isnan(1.0) ? _3838 : (isnan(_3838) ? 1.0 : min(_3838, 1.0));
        float _1121 = _1120 * 2.0;
        float _1125 = (1.0 - _1120) / (_1120 + 1.0);
        float _3849 = isnan(0.0) ? _1125 : (isnan(_1125) ? 0.0 : max(_1125, 0.0));
        float _1126 = isnan(1.0) ? _3849 : (isnan(_3849) ? 1.0 : min(_3849, 1.0));
        float _1135 = ((((1.0 - _1126) * (_1121 + 2.0)) * exp2(log2(isnan(1.0) ? _3827 : (isnan(_3827) ? 1.0 : min(_3827, 1.0))) * (_1121 + 1.0))) + _1126) * _1089;
        float _1136 = _1057 * 0.5;
        float _1137 = _1067 * 0.5;
        float _1138 = _1077 * 0.5;
        float _1139 = dot(vec3(_1136, _1137, _1138), vec3(_1136, _1137, _1138));
        float _1144 = (_1139 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1139);
        float _1152 = (dot(vec3(_646, _647, _648), vec3(_1144 * _1136, _1144 * _1137, _1144 * _1138)) + 1.0) * 0.5;
        float _3860 = isnan(0.0) ? _1152 : (isnan(_1152) ? 0.0 : max(_1152, 0.0));
        float _1161 = sqrt(((_1137 * _1137) + (_1136 * _1136)) + (_1138 * _1138)) / (_1090 + 9.9999997473787516355514526367188e-06);
        float _3871 = isnan(0.0) ? _1161 : (isnan(_1161) ? 0.0 : max(_1161, 0.0));
        float _1162 = isnan(1.0) ? _3871 : (isnan(_3871) ? 1.0 : min(_3871, 1.0));
        float _1163 = _1162 * 2.0;
        float _1167 = (1.0 - _1162) / (_1162 + 1.0);
        float _3882 = isnan(0.0) ? _1167 : (isnan(_1167) ? 0.0 : max(_1167, 0.0));
        float _1168 = isnan(1.0) ? _3882 : (isnan(_3882) ? 1.0 : min(_3882, 1.0));
        float _1177 = ((((1.0 - _1168) * (_1163 + 2.0)) * exp2(log2(isnan(1.0) ? _3860 : (isnan(_3860) ? 1.0 : min(_3860, 1.0))) * (_1163 + 1.0))) + _1168) * _1090;
        float _1178 = _1058 * 0.5;
        float _1179 = _1068 * 0.5;
        float _1180 = _1078 * 0.5;
        float _1181 = dot(vec3(_1178, _1179, _1180), vec3(_1178, _1179, _1180));
        float _1186 = (_1181 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1181);
        float _1194 = (dot(vec3(_646, _647, _648), vec3(_1186 * _1178, _1186 * _1179, _1186 * _1180)) + 1.0) * 0.5;
        float _3893 = isnan(0.0) ? _1194 : (isnan(_1194) ? 0.0 : max(_1194, 0.0));
        float _1203 = sqrt(((_1179 * _1179) + (_1178 * _1178)) + (_1180 * _1180)) / (_1091 + 9.9999997473787516355514526367188e-06);
        float _3904 = isnan(0.0) ? _1203 : (isnan(_1203) ? 0.0 : max(_1203, 0.0));
        float _1204 = isnan(1.0) ? _3904 : (isnan(_3904) ? 1.0 : min(_3904, 1.0));
        float _1205 = _1204 * 2.0;
        float _1209 = (1.0 - _1204) / (_1204 + 1.0);
        float _3915 = isnan(0.0) ? _1209 : (isnan(_1209) ? 0.0 : max(_1209, 0.0));
        float _1210 = isnan(1.0) ? _3915 : (isnan(_3915) ? 1.0 : min(_3915, 1.0));
        float _1219 = ((((1.0 - _1210) * (_1205 + 2.0)) * exp2(log2(isnan(1.0) ? _3893 : (isnan(_3893) ? 1.0 : min(_3893, 1.0))) * (_1205 + 1.0))) + _1210) * _1091;
        _1227 = _1058;
        _1229 = _1057;
        _1230 = _1056;
        _1231 = _1068;
        _1232 = _1067;
        _1233 = _1066;
        _1234 = _1078;
        _1235 = _1077;
        _1236 = _1076;
        _1237 = _1091;
        _1238 = _1090;
        _1239 = _1089;
        _1240 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1135 : (isnan(_1135) ? 0.0 : max(_1135, 0.0)));
        _1241 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1177 : (isnan(_1177) ? 0.0 : max(_1177, 0.0)));
        _1242 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1219 : (isnan(_1219) ? 0.0 : max(_1219, 0.0)));
    }
    else
    {
        _1227 = _1228;
        _1229 = _1228;
        _1230 = _1228;
        _1231 = _1228;
        _1232 = _1228;
        _1233 = _1228;
        _1234 = _1228;
        _1235 = _1228;
        _1236 = _1228;
        _1237 = _1228;
        _1238 = _1228;
        _1239 = _1228;
        _1240 = 0.0;
        _1241 = 0.0;
        _1242 = 0.0;
    }
    float _1540;
    float _1541;
    float _1542;
    float _1543;
    float _1544;
    float _1545;
    float _1546;
    float _1547;
    float _1548;
    float _1549;
    float _1550;
    float _1551;
    float _1552;
    float _1553;
    float _1554;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1271 = fma(_896, cbModelParam._m0[30u].z, fma(_892, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _888));
        float _1275 = fma(_896, cbModelParam._m0[31u].z, fma(_892, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _888));
        float _1279 = fma(_896, cbModelParam._m0[32u].z, fma(_892, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _888));
        float _1302 = _888 + _646;
        float _1303 = _892 + _647;
        float _1304 = _896 + _648;
        float _1314 = fma(_1304, cbModelParam._m0[30u].z, fma(_1303, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1302)) - _1271;
        float _1315 = fma(_1304, cbModelParam._m0[31u].z, fma(_1303, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1302)) - _1275;
        float _1316 = fma(_1304, cbModelParam._m0[32u].z, fma(_1303, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1302)) - _1279;
        float _1320 = inversesqrt(dot(vec3(_1314, _1315, _1316), vec3(_1314, _1315, _1316)));
        float _1333 = ((_1320 * _1314) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1271 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1334 = ((_1320 * _1315) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1275 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1335 = ((_1320 * _1316) / cbModelParam._m0[35u].z) + ((((((_1279 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1337 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1333, _1334, _1335), 0.0);
        vec4 _1344 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1333, _1334, _1335), 0.0);
        vec4 _1351 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1333, _1334, _1335), 0.0);
        vec4 _1358 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1333, _1334, _1335), 0.0);
        float _1370 = exp2((_1337.w + (-0.5)) * 20.0) * 2.0;
        float _1371 = _1370 * (_1337.x + (-0.5));
        float _1372 = _1370 * (_1337.y + (-0.5));
        float _1373 = _1370 * (_1337.z + (-0.5));
        float _1380 = exp2((_1344.w + (-0.5)) * 20.0) * 2.0;
        float _1381 = _1380 * (_1344.x + (-0.5));
        float _1382 = _1380 * (_1344.y + (-0.5));
        float _1383 = _1380 * (_1344.z + (-0.5));
        float _1390 = exp2((_1351.w + (-0.5)) * 20.0) * 2.0;
        float _1391 = _1390 * (_1351.x + (-0.5));
        float _1392 = _1390 * (_1351.y + (-0.5));
        float _1393 = _1390 * (_1351.z + (-0.5));
        float _1400 = exp2((_1358.w + (-0.5)) * 20.0) * 2.0;
        float _1401 = _1400 * (_1358.x + (-0.5));
        float _1402 = _1400 * (_1358.y + (-0.5));
        float _1403 = _1400 * (_1358.z + (-0.5));
        float _1404 = isnan(0.0) ? _1401 : (isnan(_1401) ? 0.0 : max(_1401, 0.0));
        float _1405 = isnan(0.0) ? _1402 : (isnan(_1402) ? 0.0 : max(_1402, 0.0));
        float _1406 = isnan(0.0) ? _1403 : (isnan(_1403) ? 0.0 : max(_1403, 0.0));
        float _1407 = _1371 * 0.5;
        float _1408 = _1381 * 0.5;
        float _1409 = _1391 * 0.5;
        float _1410 = dot(vec3(_1407, _1408, _1409), vec3(_1407, _1408, _1409));
        float _1415 = (_1410 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1410);
        float _1423 = (dot(vec3(_646, _647, _648), vec3(_1415 * _1407, _1415 * _1408, _1415 * _1409)) + 1.0) * 0.5;
        float _3956 = isnan(0.0) ? _1423 : (isnan(_1423) ? 0.0 : max(_1423, 0.0));
        float _1432 = sqrt(((_1408 * _1408) + (_1407 * _1407)) + (_1409 * _1409)) / (_1404 + 9.9999997473787516355514526367188e-06);
        float _3967 = isnan(0.0) ? _1432 : (isnan(_1432) ? 0.0 : max(_1432, 0.0));
        float _1433 = isnan(1.0) ? _3967 : (isnan(_3967) ? 1.0 : min(_3967, 1.0));
        float _1434 = _1433 * 2.0;
        float _1438 = (1.0 - _1433) / (_1433 + 1.0);
        float _3978 = isnan(0.0) ? _1438 : (isnan(_1438) ? 0.0 : max(_1438, 0.0));
        float _1439 = isnan(1.0) ? _3978 : (isnan(_3978) ? 1.0 : min(_3978, 1.0));
        float _1448 = ((((1.0 - _1439) * (_1434 + 2.0)) * exp2(log2(isnan(1.0) ? _3956 : (isnan(_3956) ? 1.0 : min(_3956, 1.0))) * (_1434 + 1.0))) + _1439) * _1404;
        float _1449 = _1372 * 0.5;
        float _1450 = _1382 * 0.5;
        float _1451 = _1392 * 0.5;
        float _1452 = dot(vec3(_1449, _1450, _1451), vec3(_1449, _1450, _1451));
        float _1457 = (_1452 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1452);
        float _1465 = (dot(vec3(_646, _647, _648), vec3(_1457 * _1449, _1457 * _1450, _1457 * _1451)) + 1.0) * 0.5;
        float _3989 = isnan(0.0) ? _1465 : (isnan(_1465) ? 0.0 : max(_1465, 0.0));
        float _1474 = sqrt(((_1450 * _1450) + (_1449 * _1449)) + (_1451 * _1451)) / (_1405 + 9.9999997473787516355514526367188e-06);
        float _4000 = isnan(0.0) ? _1474 : (isnan(_1474) ? 0.0 : max(_1474, 0.0));
        float _1475 = isnan(1.0) ? _4000 : (isnan(_4000) ? 1.0 : min(_4000, 1.0));
        float _1476 = _1475 * 2.0;
        float _1480 = (1.0 - _1475) / (_1475 + 1.0);
        float _4011 = isnan(0.0) ? _1480 : (isnan(_1480) ? 0.0 : max(_1480, 0.0));
        float _1481 = isnan(1.0) ? _4011 : (isnan(_4011) ? 1.0 : min(_4011, 1.0));
        float _1490 = ((((1.0 - _1481) * (_1476 + 2.0)) * exp2(log2(isnan(1.0) ? _3989 : (isnan(_3989) ? 1.0 : min(_3989, 1.0))) * (_1476 + 1.0))) + _1481) * _1405;
        float _1491 = _1373 * 0.5;
        float _1492 = _1383 * 0.5;
        float _1493 = _1393 * 0.5;
        float _1494 = dot(vec3(_1491, _1492, _1493), vec3(_1491, _1492, _1493));
        float _1499 = (_1494 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1494);
        float _1507 = (dot(vec3(_646, _647, _648), vec3(_1499 * _1491, _1499 * _1492, _1499 * _1493)) + 1.0) * 0.5;
        float _4022 = isnan(0.0) ? _1507 : (isnan(_1507) ? 0.0 : max(_1507, 0.0));
        float _1516 = sqrt(((_1492 * _1492) + (_1491 * _1491)) + (_1493 * _1493)) / (_1406 + 9.9999997473787516355514526367188e-06);
        float _4033 = isnan(0.0) ? _1516 : (isnan(_1516) ? 0.0 : max(_1516, 0.0));
        float _1517 = isnan(1.0) ? _4033 : (isnan(_4033) ? 1.0 : min(_4033, 1.0));
        float _1518 = _1517 * 2.0;
        float _1522 = (1.0 - _1517) / (_1517 + 1.0);
        float _4044 = isnan(0.0) ? _1522 : (isnan(_1522) ? 0.0 : max(_1522, 0.0));
        float _1523 = isnan(1.0) ? _4044 : (isnan(_4044) ? 1.0 : min(_4044, 1.0));
        float _1532 = ((((1.0 - _1523) * (_1518 + 2.0)) * exp2(log2(isnan(1.0) ? _4022 : (isnan(_4022) ? 1.0 : min(_4022, 1.0))) * (_1518 + 1.0))) + _1523) * _1406;
        _1540 = _1373;
        _1541 = _1372;
        _1542 = _1371;
        _1543 = _1383;
        _1544 = _1382;
        _1545 = _1381;
        _1546 = _1393;
        _1547 = _1392;
        _1548 = _1391;
        _1549 = _1406;
        _1550 = _1405;
        _1551 = _1404;
        _1552 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1448 : (isnan(_1448) ? 0.0 : max(_1448, 0.0)));
        _1553 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1490 : (isnan(_1490) ? 0.0 : max(_1490, 0.0)));
        _1554 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1532 : (isnan(_1532) ? 0.0 : max(_1532, 0.0)));
    }
    else
    {
        _1540 = _1228;
        _1541 = _1228;
        _1542 = _1228;
        _1543 = _1228;
        _1544 = _1228;
        _1545 = _1228;
        _1546 = _1228;
        _1547 = _1228;
        _1548 = _1228;
        _1549 = _1228;
        _1550 = _1228;
        _1551 = _1228;
        _1552 = 0.0;
        _1553 = 0.0;
        _1554 = 0.0;
    }
    float _1564 = (cbModelParam._m0[1u].x * (_1552 - _1240)) + _1240;
    float _1565 = (cbModelParam._m0[1u].x * (_1553 - _1241)) + _1241;
    float _1566 = (cbModelParam._m0[1u].x * (_1554 - _1242)) + _1242;
    float _1587 = fma(_1566, cbSceneParam._m0[89u].z, fma(_1565, cbSceneParam._m0[89u].y, _1564 * cbSceneParam._m0[89u].x));
    float _1590 = fma(_1566, cbSceneParam._m0[90u].z, fma(_1565, cbSceneParam._m0[90u].y, _1564 * cbSceneParam._m0[90u].x));
    float _1593 = fma(_1566, cbSceneParam._m0[91u].z, fma(_1565, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1564));
    float _1608 = _832 * 0.5;
    float _1609 = _833 * 0.5;
    float _1610 = _834 * 0.5;
    float _1611 = dot(vec4(_1608, _1609, _1610, 1.0), vec4(_1542, _1545, _1548, _1551));
    float _1614 = dot(vec4(_1608, _1609, _1610, 1.0), vec4(_1541, _1544, _1547, _1550));
    float _1617 = dot(vec4(_1608, _1609, _1610, 1.0), vec4(_1540, _1543, _1546, _1549));
    float _1651;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1624 = dot(vec4(_1608, _1609, _1610, 1.0), vec4(_1227, _1231, _1234, _1237));
        float _1628 = dot(vec4(_1608, _1609, _1610, 1.0), vec4(_1229, _1232, _1235, _1238));
        float _1632 = dot(vec4(_1608, _1609, _1610, 1.0), vec4(_1230, _1233, _1236, _1239));
        float _1639 = dot(vec4(cbModelParam._m0[39u]), vec4(_1608, _1609, _1610, 1.0));
        _1651 = dot(vec3(isnan(0.0) ? _1632 : (isnan(_1632) ? 0.0 : max(_1632, 0.0)), isnan(0.0) ? _1628 : (isnan(_1628) ? 0.0 : max(_1628, 0.0)), isnan(0.0) ? _1624 : (isnan(_1624) ? 0.0 : max(_1624, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1639) ? 0.0 : (isnan(0.0) ? _1639 : max(0.0, _1639))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1651 = 1.0;
    }
    float _1662;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1653 = dot(vec4(cbModelParam._m0[40u]), vec4(_1608, _1609, _1610, 1.0));
        _1662 = dot(vec3(isnan(0.0) ? _1611 : (isnan(_1611) ? 0.0 : max(_1611, 0.0)), isnan(0.0) ? _1614 : (isnan(_1614) ? 0.0 : max(_1614, 0.0)), isnan(0.0) ? _1617 : (isnan(_1617) ? 0.0 : max(_1617, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1653) ? 0.0 : (isnan(0.0) ? _1653 : max(0.0, _1653))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1662 = 1.0;
    }
    float _1666 = (_1662 * cbModelParam._m0[1u].x) + (_1651 * (1.0 - cbModelParam._m0[1u].x));
    float _1676 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _649);
    float _1677 = isnan(_1676) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1676 : min(cbModelParam._m0[25u].z, _1676));
    float _1757;
    float _1759;
    float _1761;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1724 = fma(_896, cbModelParam._m0[13u].z, fma(_892, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _888)) + cbModelParam._m0[13u].w;
        float _1728 = fma(_896, cbModelParam._m0[14u].z, fma(_892, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _888)) + cbModelParam._m0[14u].w;
        float _1732 = fma(_896, cbModelParam._m0[15u].z, fma(_892, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _888)) + cbModelParam._m0[15u].w;
        float _1735 = fma(_834, cbModelParam._m0[13u].z, fma(_833, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _832));
        float _1738 = fma(_834, cbModelParam._m0[14u].z, fma(_833, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _832));
        float _1741 = fma(_834, cbModelParam._m0[15u].z, fma(_833, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _832));
        float _1769;
        if (_1735 > 0.0)
        {
            _1769 = abs((1.0 - _1724) / _1735);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1735 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1724 + 1.0) / _1735);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1769 = frontier_phi_17_15_ladder;
        }
        float _1995;
        if (_1738 > 0.0)
        {
            _1995 = abs((1.0 - _1728) / _1738);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1738 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1728 + 1.0) / _1738);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1995 = frontier_phi_26_22_ladder;
        }
        float _2252;
        if (_1741 > 0.0)
        {
            _2252 = abs((1.0 - _1732) / _1741);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1741 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1732 + 1.0) / _1741);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2252 = frontier_phi_38_33_ladder;
        }
        float _2254 = isnan(_1995) ? _1769 : (isnan(_1769) ? _1995 : min(_1769, _1995));
        float _2255 = isnan(_2252) ? _2254 : (isnan(_2254) ? _2252 : min(_2254, _2252));
        float _2259 = (_2255 * _1735) + _1724;
        float _2260 = (_2255 * _1738) + _1728;
        float _2261 = (_2255 * _1741) + _1732;
        float _2262 = _2255 * 9.9999997473787516355514526367188e-05;
        float _2264 = (-1.0) - _2262;
        float _2266 = _2262 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2261 > _2266) || ((_2261 < _2264) || ((_2260 > _2266) || ((_2260 < _2264) || ((_2259 < _2264) || (_2259 > _2266))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2389 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2261, cbModelParam._m0[9u].z, fma(_2260, cbModelParam._m0[9u].y, _2259 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2261, cbModelParam._m0[10u].z, fma(_2260, cbModelParam._m0[10u].y, _2259 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2261, cbModelParam._m0[11u].z, fma(_2260, cbModelParam._m0[11u].y, _2259 * cbModelParam._m0[11u].x))), _1677);
            frontier_phi_16_38_ladder = _2389.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2389.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2389.x * cbModelParam._m0[1u].y;
        }
        _1757 = frontier_phi_16_38_ladder_2;
        _1759 = frontier_phi_16_38_ladder_1;
        _1761 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1745 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_832, _833, _834), _1677);
        _1757 = _1745.x * cbModelParam._m0[1u].y;
        _1759 = _1745.y * cbModelParam._m0[1u].y;
        _1761 = _1745.z * cbModelParam._m0[1u].y;
    }
    float _1765 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _649);
    float _1766 = isnan(_1765) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1765 : min(cbModelParam._m0[25u].w, _1765));
    float _1857;
    float _1859;
    float _1861;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1821 = fma(_896, cbModelParam._m0[21u].z, fma(_892, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _888)) + cbModelParam._m0[21u].w;
        float _1825 = fma(_896, cbModelParam._m0[22u].z, fma(_892, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _888)) + cbModelParam._m0[22u].w;
        float _1829 = fma(_896, cbModelParam._m0[23u].z, fma(_892, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _888)) + cbModelParam._m0[23u].w;
        float _1832 = fma(_834, cbModelParam._m0[21u].z, fma(_833, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _832));
        float _1835 = fma(_834, cbModelParam._m0[22u].z, fma(_833, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _832));
        float _1838 = fma(_834, cbModelParam._m0[23u].z, fma(_833, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _832));
        float _2000;
        if (_1832 > 0.0)
        {
            _2000 = abs((1.0 - _1821) / _1832);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1832 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1821 + 1.0) / _1832);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2000 = frontier_phi_28_24_ladder;
        }
        float _2279;
        if (_1835 > 0.0)
        {
            _2279 = abs((1.0 - _1825) / _1835);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1835 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1825 + 1.0) / _1835);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2279 = frontier_phi_40_35_ladder;
        }
        float _2492;
        if (_1838 > 0.0)
        {
            _2492 = abs((1.0 - _1829) / _1838);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1838 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1829 + 1.0) / _1838);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2492 = frontier_phi_49_46_ladder;
        }
        float _2494 = isnan(_2279) ? _2000 : (isnan(_2000) ? _2279 : min(_2000, _2279));
        float _2495 = isnan(_2492) ? _2494 : (isnan(_2494) ? _2492 : min(_2494, _2492));
        float _2499 = (_2495 * _1832) + _1821;
        float _2500 = (_2495 * _1835) + _1825;
        float _2501 = (_2495 * _1838) + _1829;
        float _2502 = _2495 * 9.9999997473787516355514526367188e-05;
        float _2503 = (-1.0) - _2502;
        float _2505 = _2502 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2501 > _2505) || ((_2501 < _2503) || ((_2500 > _2505) || ((_2500 < _2503) || ((_2499 < _2503) || (_2499 > _2505))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2700 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2501, cbModelParam._m0[17u].z, fma(_2500, cbModelParam._m0[17u].y, _2499 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2501, cbModelParam._m0[18u].z, fma(_2500, cbModelParam._m0[18u].y, _2499 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2501, cbModelParam._m0[19u].z, fma(_2500, cbModelParam._m0[19u].y, _2499 * cbModelParam._m0[19u].x))), _1766);
            frontier_phi_25_49_ladder = _2700.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2700.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2700.x * cbModelParam._m0[1u].z;
        }
        _1857 = frontier_phi_25_49_ladder_2;
        _1859 = frontier_phi_25_49_ladder_1;
        _1861 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1841 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_832, _833, _834), _1766);
        _1857 = _1841.x * cbModelParam._m0[1u].z;
        _1859 = _1841.y * cbModelParam._m0[1u].z;
        _1861 = _1841.z * cbModelParam._m0[1u].z;
    }
    float _1874 = (((_859 * _809) + _860) * _824) * ((cbModelParam._m0[1u].w * (_1857 - _1757)) + _1757);
    float _1876 = (((_859 * _811) + _860) * _824) * ((cbModelParam._m0[1u].w * (_1859 - _1759)) + _1759);
    float _1878 = (((_859 * _812) + _860) * _824) * ((cbModelParam._m0[1u].w * (_1861 - _1761)) + _1761);
    float _1881 = fma(_1878, cbSceneParam._m0[89u].z, fma(_1876, cbSceneParam._m0[89u].y, _1874 * cbSceneParam._m0[89u].x));
    float _1884 = fma(_1878, cbSceneParam._m0[90u].z, fma(_1876, cbSceneParam._m0[90u].y, _1874 * cbSceneParam._m0[90u].x));
    float _1887 = fma(_1878, cbSceneParam._m0[91u].z, fma(_1876, cbSceneParam._m0[91u].y, _1874 * cbSceneParam._m0[91u].x));
    vec4 _1895 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_746, _747));
    float _1897 = _1895.w;
    float _1909 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1897);
    float _1910 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1897);
    float _1911 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1897);
    uvec4 _1915 = floatBitsToUint(cbInstanceData._m0[_784 + 5u]);
    uint _1917 = _1915.x * 14u;
    uint _1918 = _1917 + 13u;
    float _1925 = _824 + (-1.0);
    float _1930 = (cbLight._m0[_1918].x * _1925) + 1.0;
    float _1931 = (cbLight._m0[_1918].y * _1925) + 1.0;
    float _1932 = (cbLight._m0[_1918].z * _1925) + 1.0;
    float _1933 = (cbLight._m0[_1918].w * _1925) + 1.0;
    uint _1934 = _1917 + 5u;
    float _1940 = isnan(1.0) ? _1931 : (isnan(_1931) ? 1.0 : min(_1931, 1.0));
    uint _1944 = _1917 + 4u;
    float _1954 = isnan(1.0) ? _1930 : (isnan(_1930) ? 1.0 : min(_1930, 1.0));
    uint _1958 = _1917 | 1u;
    float _1969 = dot(vec3(cbLight._m0[_1917].xyz), vec3(_646, _647, _648));
    float _1972 = dot(vec3(cbLight._m0[_1958].xyz), vec3(_646, _647, _648));
    float _4180 = isnan(0.0) ? _1969 : (isnan(_1969) ? 0.0 : max(_1969, 0.0));
    float _4191 = isnan(0.0) ? _1972 : (isnan(_1972) ? 0.0 : max(_1972, 0.0));
    float _1977 = (isnan(1.0) ? _4180 : (isnan(_4180) ? 1.0 : min(_4180, 1.0))) * 0.3183098733425140380859375;
    float _1979 = (isnan(1.0) ? _4191 : (isnan(_4191) ? 1.0 : min(_4191, 1.0))) * 0.3183098733425140380859375;
    float _1986 = ((cbLight._m0[_1934].x * _1940) * _1979) + (((cbLight._m0[_1944].x * _1909) * _1954) * _1977);
    float _1987 = ((_1940 * cbLight._m0[_1934].y) * _1979) + (((cbLight._m0[_1944].y * _1910) * _1954) * _1977);
    float _1988 = ((_1940 * cbLight._m0[_1934].z) * _1979) + (((cbLight._m0[_1944].z * _1911) * _1954) * _1977);
    uvec4 _1992 = floatBitsToUint(cbLight._m0[_1917 + 12u]);
    bool _1994 = _1992.x == 0u;
    float _2005;
    float _2007;
    float _2009;
    if (_1994)
    {
        _2005 = _1986;
        _2007 = _1987;
        _2009 = _1988;
    }
    else
    {
        uint _2013 = _1917 + 6u;
        float _2029 = (dot(vec3(cbLight._m0[_1917 + 2u].xyz), vec3(_646, _647, _648)) * 0.5) + 0.5;
        float _2030 = _2029 * _2029;
        float _4202 = isnan(0.0) ? _2030 : (isnan(_2030) ? 0.0 : max(_2030, 0.0));
        float _2031 = isnan(1.0) ? _4202 : (isnan(_4202) ? 1.0 : min(_4202, 1.0));
        float _2032 = isnan(1.0) ? _1932 : (isnan(_1932) ? 1.0 : min(_1932, 1.0));
        _2005 = (((cbLight._m0[_2013].x * 0.3183098733425140380859375) * _2031) * _2032) + _1986;
        _2007 = (((cbLight._m0[_2013].y * 0.3183098733425140380859375) * _2031) * _2032) + _1987;
        _2009 = (((cbLight._m0[_2013].z * 0.3183098733425140380859375) * _2031) * _2032) + _1988;
    }
    bool _2012 = _1992.y == 0u;
    float _2050;
    float _2052;
    float _2054;
    if (_2012)
    {
        _2050 = _2005;
        _2052 = _2007;
        _2054 = _2009;
    }
    else
    {
        uint _2223 = _1917 + 7u;
        float _2239 = (dot(vec3(cbLight._m0[_1917 + 3u].xyz), vec3(_646, _647, _648)) * 0.5) + 0.5;
        float _2240 = _2239 * _2239;
        float _4218 = isnan(0.0) ? _2240 : (isnan(_2240) ? 0.0 : max(_2240, 0.0));
        float _2241 = isnan(1.0) ? _4218 : (isnan(_4218) ? 1.0 : min(_4218, 1.0));
        float _2242 = isnan(1.0) ? _1933 : (isnan(_1933) ? 1.0 : min(_1933, 1.0));
        _2050 = (((cbLight._m0[_2223].x * 0.3183098733425140380859375) * _2241) * _2242) + _2005;
        _2052 = (((cbLight._m0[_2223].y * 0.3183098733425140380859375) * _2241) * _2242) + _2007;
        _2054 = (((cbLight._m0[_2223].z * 0.3183098733425140380859375) * _2241) * _2242) + _2009;
    }
    uint _2057 = _1917 + 8u;
    float _2070 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1917].w)) * _649) * 0.949999988079071044921875);
    float _2071 = _2070 * _2070;
    float _2072 = cbLight._m0[_1917].x + _726;
    float _2073 = cbLight._m0[_1917].y + _727;
    float _2074 = cbLight._m0[_1917].z + _728;
    float _2078 = inversesqrt(dot(vec3(_2072, _2073, _2074), vec3(_2072, _2073, _2074)));
    float _2079 = _2078 * _2072;
    float _2080 = _2078 * _2073;
    float _2081 = _2078 * _2074;
    float _2082 = dot(vec3(_646, _647, _648), vec3(cbLight._m0[_1917].xyz));
    float _4234 = isnan(0.0) ? _2082 : (isnan(_2082) ? 0.0 : max(_2082, 0.0));
    float _2085 = isnan(1.0) ? _4234 : (isnan(_4234) ? 1.0 : min(_4234, 1.0));
    float _4245 = isnan(0.0) ? _825 : (isnan(_825) ? 0.0 : max(_825, 0.0));
    float _2086 = isnan(1.0) ? _4245 : (isnan(_4245) ? 1.0 : min(_4245, 1.0));
    float _2087 = dot(vec3(_646, _647, _648), vec3(_2079, _2080, _2081));
    float _4256 = isnan(0.0) ? _2087 : (isnan(_2087) ? 0.0 : max(_2087, 0.0));
    float _2090 = isnan(1.0) ? _4256 : (isnan(_4256) ? 1.0 : min(_4256, 1.0));
    float _2091 = dot(vec3(cbLight._m0[_1917].xyz), vec3(_2079, _2080, _2081));
    float _4267 = isnan(0.0) ? _2091 : (isnan(_2091) ? 0.0 : max(_2091, 0.0));
    float _2095 = _2071 * _2071;
    float _2099 = ((_2090 * _2090) * (_2095 + (-1.0))) + 1.0;
    float _2107 = exp2(log2(1.0 - (isnan(1.0) ? _4267 : (isnan(_4267) ? 1.0 : min(_4267, 1.0)))) * 5.0);
    float _2108 = 0.959999978542327880859375 - _806;
    float _2110 = 0.959999978542327880859375 - _807;
    float _2111 = 0.959999978542327880859375 - _808;
    float _2118 = 1.0 - _2071;
    float _2129 = (0.5 / (((_2086 * ((_2085 * _2118) + _2071)) + 9.9999999392252902907785028219223e-09) + (((_2086 * _2118) + _2071) * _2085))) * _2085;
    float _4278 = isnan(0.0) ? _2129 : (isnan(_2129) ? 0.0 : max(_2129, 0.0));
    float _2131 = (isnan(1.0) ? _4278 : (isnan(_4278) ? 1.0 : min(_4278, 1.0))) * (_2095 / ((_2099 * _2099) * 3.141590118408203125));
    uint _2145 = _1917 + 9u;
    float _2156 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1958].w)) * _649) * 0.949999988079071044921875);
    float _2157 = _2156 * _2156;
    float _2158 = cbLight._m0[_1958].x + _726;
    float _2159 = cbLight._m0[_1958].y + _727;
    float _2160 = cbLight._m0[_1958].z + _728;
    float _2164 = inversesqrt(dot(vec3(_2158, _2159, _2160), vec3(_2158, _2159, _2160)));
    float _2165 = _2164 * _2158;
    float _2166 = _2164 * _2159;
    float _2167 = _2164 * _2160;
    float _2168 = dot(vec3(_646, _647, _648), vec3(cbLight._m0[_1958].xyz));
    float _4289 = isnan(0.0) ? _2168 : (isnan(_2168) ? 0.0 : max(_2168, 0.0));
    float _2171 = isnan(1.0) ? _4289 : (isnan(_4289) ? 1.0 : min(_4289, 1.0));
    float _2172 = dot(vec3(_646, _647, _648), vec3(_2165, _2166, _2167));
    float _4300 = isnan(0.0) ? _2172 : (isnan(_2172) ? 0.0 : max(_2172, 0.0));
    float _2175 = isnan(1.0) ? _4300 : (isnan(_4300) ? 1.0 : min(_4300, 1.0));
    float _2176 = dot(vec3(cbLight._m0[_1958].xyz), vec3(_2165, _2166, _2167));
    float _4311 = isnan(0.0) ? _2176 : (isnan(_2176) ? 0.0 : max(_2176, 0.0));
    float _2180 = _2157 * _2157;
    float _2184 = ((_2175 * _2175) * (_2180 + (-1.0))) + 1.0;
    float _2191 = exp2(log2(1.0 - (isnan(1.0) ? _4311 : (isnan(_4311) ? 1.0 : min(_4311, 1.0)))) * 5.0);
    float _2198 = 1.0 - _2157;
    float _2208 = (0.5 / (((_2086 * ((_2171 * _2198) + _2157)) + 9.9999999392252902907785028219223e-09) + (((_2086 * _2198) + _2157) * _2171))) * _2171;
    float _4322 = isnan(0.0) ? _2208 : (isnan(_2208) ? 0.0 : max(_2208, 0.0));
    float _2210 = (isnan(1.0) ? _4322 : (isnan(_4322) ? 1.0 : min(_4322, 1.0))) * (_2180 / ((_2184 * _2184) * 3.141590118408203125));
    float _2220 = (((((_2191 * _2108) + _809) * cbLight._m0[_2145].x) * _2210) * _1940) + ((((cbLight._m0[_2057].x * _1909) * ((_2107 * _2108) + _809)) * _2131) * _1954);
    float _2221 = (((((_2191 * _2110) + _811) * cbLight._m0[_2145].y) * _2210) * _1940) + ((((cbLight._m0[_2057].y * _1910) * ((_2107 * _2110) + _811)) * _2131) * _1954);
    float _2222 = (((((_2191 * _2111) + _812) * cbLight._m0[_2145].z) * _2210) * _1940) + ((((cbLight._m0[_2057].z * _1911) * ((_2107 * _2111) + _812)) * _2131) * _1954);
    float _2284;
    float _2286;
    float _2288;
    if (_1994)
    {
        _2284 = _2220;
        _2286 = _2221;
        _2288 = _2222;
    }
    else
    {
        uint _2290 = _1917 + 2u;
        uint _2294 = _1917 + 10u;
        float _2308 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2290].w)) * _649) * 0.949999988079071044921875);
        float _2309 = _2308 * _2308;
        float _2310 = cbLight._m0[_2290].x + _726;
        float _2311 = cbLight._m0[_2290].y + _727;
        float _2312 = cbLight._m0[_2290].z + _728;
        float _2316 = inversesqrt(dot(vec3(_2310, _2311, _2312), vec3(_2310, _2311, _2312)));
        float _2317 = _2316 * _2310;
        float _2318 = _2316 * _2311;
        float _2319 = _2316 * _2312;
        float _2320 = dot(vec3(_646, _647, _648), vec3(cbLight._m0[_2290].xyz));
        float _4333 = isnan(0.0) ? _2320 : (isnan(_2320) ? 0.0 : max(_2320, 0.0));
        float _2323 = isnan(1.0) ? _4333 : (isnan(_4333) ? 1.0 : min(_4333, 1.0));
        float _2324 = dot(vec3(_646, _647, _648), vec3(_2317, _2318, _2319));
        float _4344 = isnan(0.0) ? _2324 : (isnan(_2324) ? 0.0 : max(_2324, 0.0));
        float _2327 = isnan(1.0) ? _4344 : (isnan(_4344) ? 1.0 : min(_4344, 1.0));
        float _2328 = dot(vec3(cbLight._m0[_2290].xyz), vec3(_2317, _2318, _2319));
        float _4355 = isnan(0.0) ? _2328 : (isnan(_2328) ? 0.0 : max(_2328, 0.0));
        float _2332 = _2309 * _2309;
        float _2336 = ((_2327 * _2327) * (_2332 + (-1.0))) + 1.0;
        float _2343 = exp2(log2(1.0 - (isnan(1.0) ? _4355 : (isnan(_4355) ? 1.0 : min(_4355, 1.0)))) * 5.0);
        float _2350 = 1.0 - _2309;
        float _2360 = (0.5 / (((_2086 * ((_2323 * _2350) + _2309)) + 9.9999999392252902907785028219223e-09) + (((_2086 * _2350) + _2309) * _2323))) * _2323;
        float _4366 = isnan(0.0) ? _2360 : (isnan(_2360) ? 0.0 : max(_2360, 0.0));
        float _2362 = (isnan(1.0) ? _4366 : (isnan(_4366) ? 1.0 : min(_4366, 1.0))) * (_2332 / ((_2336 * _2336) * 3.141590118408203125));
        float _2363 = isnan(1.0) ? _1932 : (isnan(_1932) ? 1.0 : min(_1932, 1.0));
        _2284 = (((((_2343 * _2108) + _809) * cbLight._m0[_2294].x) * _2362) * _2363) + _2220;
        _2286 = (((((_2343 * _2110) + _811) * cbLight._m0[_2294].y) * _2362) * _2363) + _2221;
        _2288 = (((((_2343 * _2111) + _812) * cbLight._m0[_2294].z) * _2362) * _2363) + _2222;
    }
    float _2398;
    float _2400;
    float _2402;
    if (_2012)
    {
        _2398 = _2284;
        _2400 = _2286;
        _2402 = _2288;
    }
    else
    {
        uint _2409 = _1917 + 3u;
        uint _2413 = _1917 + 11u;
        float _2427 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2409].w)) * _649) * 0.949999988079071044921875);
        float _2428 = _2427 * _2427;
        float _2429 = cbLight._m0[_2409].x + _726;
        float _2430 = cbLight._m0[_2409].y + _727;
        float _2431 = cbLight._m0[_2409].z + _728;
        float _2435 = inversesqrt(dot(vec3(_2429, _2430, _2431), vec3(_2429, _2430, _2431)));
        float _2436 = _2435 * _2429;
        float _2437 = _2435 * _2430;
        float _2438 = _2435 * _2431;
        float _2439 = dot(vec3(_646, _647, _648), vec3(cbLight._m0[_2409].xyz));
        float _4382 = isnan(0.0) ? _2439 : (isnan(_2439) ? 0.0 : max(_2439, 0.0));
        float _2442 = isnan(1.0) ? _4382 : (isnan(_4382) ? 1.0 : min(_4382, 1.0));
        float _2443 = dot(vec3(_646, _647, _648), vec3(_2436, _2437, _2438));
        float _4393 = isnan(0.0) ? _2443 : (isnan(_2443) ? 0.0 : max(_2443, 0.0));
        float _2446 = isnan(1.0) ? _4393 : (isnan(_4393) ? 1.0 : min(_4393, 1.0));
        float _2447 = dot(vec3(cbLight._m0[_2409].xyz), vec3(_2436, _2437, _2438));
        float _4404 = isnan(0.0) ? _2447 : (isnan(_2447) ? 0.0 : max(_2447, 0.0));
        float _2451 = _2428 * _2428;
        float _2455 = ((_2446 * _2446) * (_2451 + (-1.0))) + 1.0;
        float _2462 = exp2(log2(1.0 - (isnan(1.0) ? _4404 : (isnan(_4404) ? 1.0 : min(_4404, 1.0)))) * 5.0);
        float _2469 = 1.0 - _2428;
        float _2479 = (0.5 / (((_2086 * ((_2442 * _2469) + _2428)) + 9.9999999392252902907785028219223e-09) + (((_2086 * _2469) + _2428) * _2442))) * _2442;
        float _4415 = isnan(0.0) ? _2479 : (isnan(_2479) ? 0.0 : max(_2479, 0.0));
        float _2481 = (isnan(1.0) ? _4415 : (isnan(_4415) ? 1.0 : min(_4415, 1.0))) * (_2451 / ((_2455 * _2455) * 3.141590118408203125));
        float _2482 = isnan(1.0) ? _1933 : (isnan(_1933) ? 1.0 : min(_1933, 1.0));
        _2398 = (((((_2462 * _2108) + _809) * cbLight._m0[_2413].x) * _2481) * _2482) + _2284;
        _2400 = (((((_2462 * _2110) + _811) * cbLight._m0[_2413].y) * _2481) * _2482) + _2286;
        _2402 = (((((_2462 * _2111) + _812) * cbLight._m0[_2413].z) * _2481) * _2482) + _2288;
    }
    float _2617;
    float _2619;
    float _2621;
    float _2623;
    float _2625;
    float _2627;
    if (_1915.y == 0u)
    {
        float _2557 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2558 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2557;
        float _2559 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2557;
        float _2560 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2557;
        uvec4 _2572 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2573 = _2572.x;
        uint _2584 = uint((float(_2572.y) * floor(float(uint(cbSceneParam._m0[85u].y * _747) / _2573))) + floor(float(uint(cbSceneParam._m0[85u].x * _746) / _2573)));
        float _2594 = (log2(_2560 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2595 = isnan(0.0) ? _2594 : (isnan(_2594) ? 0.0 : max(_2594, 0.0));
        uint _2598 = uint(isnan(14.0) ? _2595 : (isnan(_2595) ? 14.0 : min(_2595, 14.0)));
        uvec4 _2603 = texelFetch(g_lightClusterGridBuffer, int(((_2598 << 2u) + (_2584 << 6u)) >> 2u));
        uint _2604 = _2603.x;
        uint _2605 = _2572.z;
        float _2705;
        float _2707;
        float _2709;
        float _2711;
        float _2713;
        float _2715;
        if (((((1u << ((_2605 >> 4u) & 15u)) + 4294967295u) & _2604) == 0u) || ((_2605 & 240u) == 0u))
        {
            _2705 = 0.0;
            _2707 = 0.0;
            _2709 = 0.0;
            _2711 = 0.0;
            _2713 = 0.0;
            _2715 = 0.0;
        }
        else
        {
            float _2706;
            float _2708;
            float _2710;
            float _2712;
            float _2714;
            float _2716;
            float _2857 = 0.0;
            float _2858 = 0.0;
            float _2859 = 0.0;
            float _2860 = 0.0;
            float _2861 = 0.0;
            float _2862 = 0.0;
            uint _2863 = 0u;
            uint _2872;
            bool _2873;
            for (;;)
            {
                _2872 = texelFetch(g_lightClassification, int((((_2598 << 5u) + (_2584 << 9u)) + (_2863 << 2u)) >> 2u)).x;
                _2873 = _2872 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2873)
                {
                    frontier_phi_66_pred = _2857;
                    frontier_phi_66_pred_1 = _2862;
                    frontier_phi_66_pred_2 = _2861;
                    frontier_phi_66_pred_3 = _2860;
                    frontier_phi_66_pred_4 = _2859;
                    frontier_phi_66_pred_5 = _2858;
                }
                else
                {
                    float _3002;
                    float _3003;
                    float _3004;
                    float _3005;
                    float _3006;
                    float _3007;
                    uint _3008;
                    _3002 = _2857;
                    _3003 = _2858;
                    _3004 = _2859;
                    _3005 = _2860;
                    _3006 = _2861;
                    _3007 = _2862;
                    _3008 = _2872;
                    float _2929;
                    float _2930;
                    float _2931;
                    float _2932;
                    float _2933;
                    float _2934;
                    for (;;)
                    {
                        uint _3012 = uint(findLSB(_3008)) + (_2863 << 5u);
                        uint _3009 = (_3008 + 4294967295u) & _3008;
                        uint _3014 = _3012 * 48u;
                        vec4 _3028 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3014)).x, texelFetch(g_PointLightRenderingBuffer, int(_3014 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3014 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3014 + 3u)).x));
                        uint _3034 = (_3012 * 48u) + 4u;
                        vec4 _3047 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3034)).x, texelFetch(g_PointLightRenderingBuffer, int(_3034 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3034 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3034 + 3u)).x));
                        uint _3053 = (_3012 * 48u) + 8u;
                        vec3 _3064 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3053)).x, texelFetch(g_PointLightRenderingBuffer, int(_3053 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3053 + 2u)).x));
                        float _3068 = _3028.x - _2558;
                        float _3069 = _3028.y - _2559;
                        float _3070 = _3028.z - _2560;
                        float _3071 = dot(vec3(_3068, _3069, _3070), vec3(_3068, _3069, _3070));
                        float _3074 = inversesqrt(_3071);
                        float _3075 = _3074 * _3068;
                        float _3076 = _3074 * _3069;
                        float _3077 = _3074 * _3070;
                        float _3078 = dot(vec3(_765, _768, _771), vec3(_3075, _3076, _3077));
                        float _3083 = 1.0 - (_3071 * _3028.w);
                        float _4441 = isnan(0.0) ? _3083 : (isnan(_3083) ? 0.0 : max(_3083, 0.0));
                        float _3084 = isnan(1.0) ? _4441 : (isnan(_4441) ? 1.0 : min(_4441, 1.0));
                        float _3085 = sqrt(_3071) * _3047.w;
                        float _3088 = 1.39999997615814208984375 / (_3085 + 1.39999997615814208984375);
                        float _3089 = _3088 * _3088;
                        float _3092 = ((1.0 - _3089) * _3078) + _3089;
                        float _3095 = _3085 * _3085;
                        float _3099 = ((isnan(0.0) ? _3092 : (isnan(_3092) ? 0.0 : max(_3092, 0.0))) * _3084) / ((_3095 * 0.699999988079071044921875) + 1.0);
                        float _3103 = (-0.0) - _2558;
                        float _3104 = (-0.0) - _2559;
                        float _3105 = (-0.0) - _2560;
                        float _3109 = inversesqrt(dot(vec3(_3103, _3104, _3105), vec3(_3103, _3104, _3105)));
                        float _3110 = _3109 * _3103;
                        float _3111 = _3109 * _3104;
                        float _3112 = _3109 * _3105;
                        float _3120 = exp2(log2(1.0 / ((_3095 * 3.5) + 5.0)) * 0.25);
                        float _3121 = 1.0 - _840;
                        float _3128 = sqrt(1.0 - ((1.0 - (_3121 * _3121)) * (1.0 - (_3120 * _3120))));
                        float _3129 = _3128 * _3128;
                        float _3130 = _3129 * _3129;
                        float _3131 = _3110 + _3075;
                        float _3132 = _3111 + _3076;
                        float _3133 = _3112 + _3077;
                        float _3137 = inversesqrt(dot(vec3(_3131, _3132, _3133), vec3(_3131, _3132, _3133)));
                        float _3141 = dot(vec3(_765, _768, _771), vec3(_3110, _3111, _3112));
                        float _4457 = isnan(0.0) ? _3141 : (isnan(_3141) ? 0.0 : max(_3141, 0.0));
                        float _3144 = isnan(1.0) ? _4457 : (isnan(_4457) ? 1.0 : min(_4457, 1.0));
                        float _3145 = dot(vec3(_765, _768, _771), vec3(_3137 * _3131, _3137 * _3132, _3137 * _3133));
                        float _4468 = isnan(0.0) ? _3145 : (isnan(_3145) ? 0.0 : max(_3145, 0.0));
                        float _3148 = isnan(1.0) ? _4468 : (isnan(_4468) ? 1.0 : min(_4468, 1.0));
                        float _3152 = ((_3148 * _3148) * (_3130 + (-1.0))) + 1.0;
                        float _3153 = _3088 * _3129;
                        float _3154 = _3153 * _3153;
                        float _3157 = ((1.0 - _3154) * _3078) + _3154;
                        float _4479 = isnan(0.0) ? _3157 : (isnan(_3157) ? 0.0 : max(_3157, 0.0));
                        float _3158 = isnan(1.0) ? _4479 : (isnan(_4479) ? 1.0 : min(_4479, 1.0));
                        float _3159 = 1.0 - _3129;
                        float _3169 = (0.5 / (((_3158 * ((_3144 * _3159) + _3129)) + 9.9999999392252902907785028219223e-09) + (((_3158 * _3159) + _3129) * _3144))) * _3158;
                        float _4490 = isnan(0.0) ? _3169 : (isnan(_3169) ? 0.0 : max(_3169, 0.0));
                        float _3180 = (((_3130 * 3.1415927410125732421875) * (isnan(1.0) ? _4490 : (isnan(_4490) ? 1.0 : min(_4490, 1.0)))) / ((_3152 * _3152) * ((_3095 * 2.1991131305694580078125) + 3.141590118408203125))) * _3084;
                        _2932 = (_3099 * _3047.x) + _3005;
                        _2933 = (_3099 * _3047.y) + _3006;
                        _2934 = (_3099 * _3047.z) + _3007;
                        _2929 = (_3180 * _3064.x) + _3002;
                        _2930 = (_3180 * _3064.y) + _3003;
                        _2931 = (_3180 * _3064.z) + _3004;
                        if (_3009 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3002 = _2929;
                            _3003 = _2930;
                            _3004 = _2931;
                            _3005 = _2932;
                            _3006 = _2933;
                            _3007 = _2934;
                            _3008 = _3009;
                        }
                    }
                    frontier_phi_66_pred = _2929;
                    frontier_phi_66_pred_1 = _2934;
                    frontier_phi_66_pred_2 = _2933;
                    frontier_phi_66_pred_3 = _2932;
                    frontier_phi_66_pred_4 = _2931;
                    frontier_phi_66_pred_5 = _2930;
                }
                _2706 = frontier_phi_66_pred;
                _2716 = frontier_phi_66_pred_1;
                _2714 = frontier_phi_66_pred_2;
                _2712 = frontier_phi_66_pred_3;
                _2710 = frontier_phi_66_pred_4;
                _2708 = frontier_phi_66_pred_5;
                uint _2864 = _2863 + 1u;
                if (_2864 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2857 = _2706;
                    _2858 = _2708;
                    _2859 = _2710;
                    _2860 = _2712;
                    _2861 = _2714;
                    _2862 = _2716;
                    _2863 = _2864;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2705 = _2706;
            _2707 = _2708;
            _2709 = _2710;
            _2711 = _2712;
            _2713 = _2714;
            _2715 = _2716;
        }
        uvec4 _2719 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2720 = _2719.z;
        uint _2722 = (_2720 >> 8u) & 15u;
        float _2825;
        float _2827;
        float _2829;
        float _2831;
        float _2833;
        float _2835;
        if (((4294967295u << _2722) & _2604) == 0u)
        {
            _2825 = _2705;
            _2827 = _2707;
            _2829 = _2709;
            _2831 = _2711;
            _2833 = _2713;
            _2835 = _2715;
        }
        else
        {
            float _2850 = inversesqrt(dot(vec3(_2558, _2559, _2560), vec3(_2558, _2559, _2560)));
            float _2851 = _2850 * _2558;
            float _2852 = _2850 * _2559;
            float _2853 = _2850 * _2560;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2722 < ((_2720 >> 12u) & 15u))
            {
                float _2826;
                float _2828;
                float _2830;
                float _2832;
                float _2834;
                float _2836;
                float _2985 = _2705;
                float _2986 = _2707;
                float _2987 = _2709;
                float _2988 = _2711;
                float _2989 = _2713;
                float _2990 = _2715;
                uint _2991 = _2722;
                uint _3000;
                bool _3001;
                for (;;)
                {
                    _3000 = texelFetch(g_lightClassification, int((((_2598 << 5u) + (_2584 << 9u)) + (_2991 << 2u)) >> 2u)).x;
                    _3001 = _3000 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3001)
                    {
                        frontier_phi_77_pred = _2990;
                        frontier_phi_77_pred_1 = _2989;
                        frontier_phi_77_pred_2 = _2988;
                        frontier_phi_77_pred_3 = _2987;
                        frontier_phi_77_pred_4 = _2986;
                        frontier_phi_77_pred_5 = _2985;
                    }
                    else
                    {
                        float _3194;
                        float _3195;
                        float _3196;
                        float _3197;
                        float _3198;
                        float _3199;
                        float _3488;
                        float _3489;
                        float _3490;
                        float _3491;
                        float _3492;
                        float _3493;
                        float _3207 = _2985;
                        float _3208 = _2986;
                        float _3209 = _2987;
                        float _3210 = _2988;
                        float _3211 = _2989;
                        float _3212 = _2990;
                        uint _3213 = _3000;
                        uint _3214;
                        vec4 _3239;
                        float _3240;
                        vec4 _3255;
                        vec3 _3267;
                        vec4 _3282;
                        vec4 _3297;
                        float _3344;
                        bool _3345;
                        for (;;)
                        {
                            uint _3224 = ((_2991 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3213));
                            _3214 = (_3213 + 4294967295u) & _3213;
                            uint _3226 = _3224 * 40u;
                            _3239 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3226)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3226 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3226 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3226 + 3u)).x));
                            _3240 = _3239.w;
                            uint _3242 = (_3224 * 40u) + 4u;
                            _3255 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3242)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3242 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3242 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3242 + 3u)).x));
                            uint _3257 = (_3224 * 40u) + 8u;
                            _3267 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3257)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3257 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3257 + 2u)).x));
                            uint _3269 = (_3224 * 40u) + 16u;
                            _3282 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3269)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3269 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3269 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3269 + 3u)).x));
                            uint _3284 = (_3224 * 40u) + 20u;
                            _3297 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3284)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3284 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3284 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3284 + 3u)).x));
                            uint _3300 = (_3224 * 40u) + 24u;
                            vec4 _3313 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3300)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3300 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3300 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3300 + 3u)).x));
                            uint _3319 = (_3224 * 40u) + 28u;
                            vec4 _3332 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3319)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3319 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3319 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3319 + 3u)).x));
                            _3344 = fma(_2560, _3332.z, fma(_2559, _3332.y, _3332.x * _2558)) + _3332.w;
                            _3345 = !((fma(_2560, _3313.z, fma(_2559, _3313.y, _3313.x * _2558)) + _3313.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3345)
                            {
                                float _3372 = _3239.x - _2558;
                                float _3373 = _3239.y - _2559;
                                float _3374 = _3239.z - _2560;
                                float _3375 = dot(vec3(_3372, _3373, _3374), vec3(_3372, _3373, _3374));
                                float _3378 = inversesqrt(_3375);
                                float _3379 = _3378 * _3372;
                                float _3380 = _3378 * _3373;
                                float _3381 = _3378 * _3374;
                                float _3385 = 1.0 - (_3375 / (_3240 * _3240));
                                float _4501 = isnan(0.0) ? _3385 : (isnan(_3385) ? 0.0 : max(_3385, 0.0));
                                float _3386 = isnan(1.0) ? _4501 : (isnan(_4501) ? 1.0 : min(_4501, 1.0));
                                float _3390 = sqrt(_3375) * _3255.w;
                                float _3392 = 1.39999997615814208984375 / (_3390 + 1.39999997615814208984375);
                                float _3393 = _3392 * _3392;
                                float _3396 = ((1.0 - _3393) * dot(vec3(_3379, _3380, _3381), vec3(_765, _768, _771))) + _3393;
                                float _3399 = _3390 * _3390;
                                float _3403 = (fma(_2560, _3282.z, fma(_2559, _3282.y, _3282.x * _2558)) + _3282.w) / _3344;
                                float _3404 = (fma(_2560, _3297.z, fma(_2559, _3297.y, _3297.x * _2558)) + _3297.w) / _3344;
                                float _3408 = 1.0 - dot(vec2(_3403, _3404), vec2(_3403, _3404));
                                float _4517 = isnan(0.0) ? _3408 : (isnan(_3408) ? 0.0 : max(_3408, 0.0));
                                float _3409 = isnan(1.0) ? _4517 : (isnan(_4517) ? 1.0 : min(_4517, 1.0));
                                float _3410 = _3409 * (((isnan(0.0) ? _3396 : (isnan(_3396) ? 0.0 : max(_3396, 0.0))) * _3386) / ((_3399 * 0.699999988079071044921875) + 1.0));
                                float _3422 = exp2(log2(1.0 / ((_3399 * 3.5) + 5.0)) * 0.25);
                                float _3423 = 1.0 - _840;
                                float _3430 = sqrt(1.0 - ((1.0 - (_3423 * _3423)) * (1.0 - (_3422 * _3422))));
                                float _3431 = _3430 * _3430;
                                float _3432 = _3431 * _3431;
                                float _3433 = _3379 - _2851;
                                float _3434 = _3380 - _2852;
                                float _3435 = _3381 - _2853;
                                float _3439 = inversesqrt(dot(vec3(_3433, _3434, _3435), vec3(_3433, _3434, _3435)));
                                float _3443 = dot(vec3(_765, _768, _771), vec3((-0.0) - _2851, (-0.0) - _2852, (-0.0) - _2853));
                                float _4528 = isnan(0.0) ? _3443 : (isnan(_3443) ? 0.0 : max(_3443, 0.0));
                                float _3446 = isnan(1.0) ? _4528 : (isnan(_4528) ? 1.0 : min(_4528, 1.0));
                                float _3447 = dot(vec3(_765, _768, _771), vec3(_3439 * _3433, _3439 * _3434, _3439 * _3435));
                                float _4539 = isnan(0.0) ? _3447 : (isnan(_3447) ? 0.0 : max(_3447, 0.0));
                                float _3450 = isnan(1.0) ? _4539 : (isnan(_4539) ? 1.0 : min(_4539, 1.0));
                                float _3454 = ((_3450 * _3450) * (_3432 + (-1.0))) + 1.0;
                                float _3455 = _3392 * _3431;
                                float _3456 = _3455 * _3455;
                                float _3462 = ((1.0 - _3456) * dot(vec3(_765, _768, _771), vec3(_3379, _3380, _3381))) + _3456;
                                float _4550 = isnan(0.0) ? _3462 : (isnan(_3462) ? 0.0 : max(_3462, 0.0));
                                float _3463 = isnan(1.0) ? _4550 : (isnan(_4550) ? 1.0 : min(_4550, 1.0));
                                float _3464 = 1.0 - _3431;
                                float _3474 = (0.5 / (((_3463 * ((_3446 * _3464) + _3431)) + 9.9999999392252902907785028219223e-09) + (((_3463 * _3464) + _3431) * _3446))) * _3463;
                                float _4561 = isnan(0.0) ? _3474 : (isnan(_3474) ? 0.0 : max(_3474, 0.0));
                                float _3484 = (_3409 * _3386) * (((_3432 * 3.1415927410125732421875) * (isnan(1.0) ? _4561 : (isnan(_4561) ? 1.0 : min(_4561, 1.0)))) / ((_3454 * _3454) * ((_3399 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3410 * _3255.y;
                                frontier_phi_83_pred_1 = _3410 * _3255.x;
                                frontier_phi_83_pred_2 = _3484 * _3267.z;
                                frontier_phi_83_pred_3 = _3484 * _3267.y;
                                frontier_phi_83_pred_4 = _3484 * _3267.x;
                                frontier_phi_83_pred_5 = _3410 * _3255.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3492 = frontier_phi_83_pred;
                            _3491 = frontier_phi_83_pred_1;
                            _3490 = frontier_phi_83_pred_2;
                            _3489 = frontier_phi_83_pred_3;
                            _3488 = frontier_phi_83_pred_4;
                            _3493 = frontier_phi_83_pred_5;
                            _3197 = _3491 + _3210;
                            _3198 = _3492 + _3211;
                            _3199 = _3493 + _3212;
                            _3194 = _3488 + _3207;
                            _3195 = _3489 + _3208;
                            _3196 = _3490 + _3209;
                            if (_3214 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3207 = _3194;
                                _3208 = _3195;
                                _3209 = _3196;
                                _3210 = _3197;
                                _3211 = _3198;
                                _3212 = _3199;
                                _3213 = _3214;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3199;
                        frontier_phi_77_pred_1 = _3198;
                        frontier_phi_77_pred_2 = _3197;
                        frontier_phi_77_pred_3 = _3196;
                        frontier_phi_77_pred_4 = _3195;
                        frontier_phi_77_pred_5 = _3194;
                    }
                    _2836 = frontier_phi_77_pred;
                    _2834 = frontier_phi_77_pred_1;
                    _2832 = frontier_phi_77_pred_2;
                    _2830 = frontier_phi_77_pred_3;
                    _2828 = frontier_phi_77_pred_4;
                    _2826 = frontier_phi_77_pred_5;
                    uint _2992 = _2991 + 1u;
                    if (_2992 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2985 = _2826;
                        _2986 = _2828;
                        _2987 = _2830;
                        _2988 = _2832;
                        _2989 = _2834;
                        _2990 = _2836;
                        _2991 = _2992;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2830;
                frontier_phi_58_59_ladder_1 = _2836;
                frontier_phi_58_59_ladder_2 = _2834;
                frontier_phi_58_59_ladder_3 = _2832;
                frontier_phi_58_59_ladder_4 = _2828;
                frontier_phi_58_59_ladder_5 = _2826;
            }
            else
            {
                frontier_phi_58_59_ladder = _2709;
                frontier_phi_58_59_ladder_1 = _2715;
                frontier_phi_58_59_ladder_2 = _2713;
                frontier_phi_58_59_ladder_3 = _2711;
                frontier_phi_58_59_ladder_4 = _2707;
                frontier_phi_58_59_ladder_5 = _2705;
            }
            _2825 = frontier_phi_58_59_ladder_5;
            _2827 = frontier_phi_58_59_ladder_4;
            _2829 = frontier_phi_58_59_ladder;
            _2831 = frontier_phi_58_59_ladder_3;
            _2833 = frontier_phi_58_59_ladder_2;
            _2835 = frontier_phi_58_59_ladder_1;
        }
        float _2840 = isnan(1.0) ? _824 : (isnan(_824) ? 1.0 : min(_824, 1.0));
        _2617 = (_2840 * _2831) + _2050;
        _2619 = (_2840 * _2833) + _2052;
        _2621 = (_2840 * _2835) + _2054;
        _2623 = ((_2825 * _809) * _2840) + _2398;
        _2625 = ((_2827 * _811) * _2840) + _2400;
        _2627 = ((_2829 * _812) * _2840) + _2402;
    }
    else
    {
        _2617 = _2050;
        _2619 = _2052;
        _2621 = _2054;
        _2623 = _2398;
        _2625 = _2400;
        _2627 = _2402;
    }
    float _4577 = isnan(0.0) ? _799 : (isnan(_799) ? 0.0 : max(_799, 0.0));
    float _4588 = isnan(0.0) ? _800 : (isnan(_800) ? 0.0 : max(_800, 0.0));
    float _4599 = isnan(0.0) ? _801 : (isnan(_801) ? 0.0 : max(_801, 0.0));
    float _2644 = ((isnan(1.0) ? _4577 : (isnan(_4577) ? 1.0 : min(_4577, 1.0))) * (_2617 + ((isnan(0.0) ? _1587 : (isnan(_1587) ? 0.0 : max(_1587, 0.0))) * _824))) + ((_2623 + ((isnan(0.0) ? _1881 : (isnan(_1881) ? 0.0 : max(_1881, 0.0))) * _1666)) * cbPerFrame._m0[3u].x);
    float _2645 = ((isnan(1.0) ? _4588 : (isnan(_4588) ? 1.0 : min(_4588, 1.0))) * (_2619 + ((isnan(0.0) ? _1590 : (isnan(_1590) ? 0.0 : max(_1590, 0.0))) * _824))) + ((_2625 + ((isnan(0.0) ? _1884 : (isnan(_1884) ? 0.0 : max(_1884, 0.0))) * _1666)) * cbPerFrame._m0[3u].x);
    float _2646 = ((isnan(1.0) ? _4599 : (isnan(_4599) ? 1.0 : min(_4599, 1.0))) * (_2621 + ((isnan(0.0) ? _1593 : (isnan(_1593) ? 0.0 : max(_1593, 0.0))) * _824))) + ((_2627 + ((isnan(0.0) ? _1887 : (isnan(_1887) ? 0.0 : max(_1887, 0.0))) * _1666)) * cbPerFrame._m0[3u].x);
    uint _2647 = _784 + 6u;
    float _2655 = _746 / cbSceneParam._m0[86u].x;
    float _2656 = _747 / cbSceneParam._m0[86u].y;
    vec4 _2670 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2655, _2656, (log2((isnan(cbSceneParam._m0[77u].w) ? _669 : (isnan(_669) ? cbSceneParam._m0[77u].w : min(_669, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2672 = _2670.x;
    float _2673 = _2670.y;
    float _2674 = _2670.z;
    float _2675 = _2670.w;
    float _2767;
    float _2769;
    float _2771;
    float _2773;
    if (_669 > cbSceneParam._m0[78u].w)
    {
        float _2730 = isnan(_669) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _669 : min(cbSceneParam._m0[80u].w, _669));
        float _2731 = _2730 / _669;
        float _2742 = _2731 * _719;
        float _2743 = _720 * _2731;
        float _2744 = (-0.0) - _2743;
        float _2745 = _2731 * _721;
        float _2747 = (cbSceneParam._m0[77u].w * _2744) / _2730;
        float _2748 = _2747 + cbSceneParam._m0[79u].w;
        float _2749 = cbSceneParam._m0[79u].w - _2743;
        float _2755 = sqrt(((_2742 * _2742) + (_2743 * _2743)) + (_2745 * _2745));
        float _2758 = (1.0 - (cbSceneParam._m0[77u].w / _2730)) * _2755;
        float _2763 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2765 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2942;
        if (abs((_2744 - _2747) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2942 = ((((_2748 > 0.0) ? exp2(_2763 * _2748) : (2.0 - exp2(_2765 * _2748))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2758;
        }
        else
        {
            float _2886 = 1.0 / cbSceneParam._m0[80u].x;
            float _2887 = isnan(_2749) ? _2748 : (isnan(_2748) ? _2749 : max(_2748, _2749));
            float _2888 = isnan(_2749) ? _2748 : (isnan(_2748) ? _2749 : min(_2748, _2749));
            float _2897 = isnan(0.0) ? _2887 : (isnan(_2887) ? 0.0 : min(_2887, 0.0));
            float _2898 = isnan(0.0) ? _2888 : (isnan(_2888) ? 0.0 : min(_2888, 0.0));
            _2942 = ((abs(_2755 / _2744) * cbSceneParam._m0[80u].y) * ((((_2897 - _2898) * 2.0) - ((exp2(_2763 * (isnan(0.0) ? _2887 : (isnan(_2887) ? 0.0 : max(_2887, 0.0)))) - exp2(_2763 * (isnan(0.0) ? _2888 : (isnan(_2888) ? 0.0 : max(_2888, 0.0))))) * _2886)) - ((exp2(_2765 * _2897) - exp2(_2765 * _2898)) * _2886))) + (_2758 * cbSceneParam._m0[80u].z);
        }
        vec4 _2944 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2655, _2656, 1.0), 0.0);
        float _2953 = exp2((_2942 * (-1.44269502162933349609375)) * (1.0 - _2944.w));
        float _2954 = log2(_2953);
        float _2970 = log2(_2675);
        _2767 = (exp2(_2970 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2954 * cbSceneParam._m0[78u].x)) * _2944.x) / cbSceneParam._m0[78u].x)) + _2672;
        _2769 = (exp2(_2970 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2954 * cbSceneParam._m0[78u].y)) * _2944.y) / cbSceneParam._m0[78u].y)) + _2673;
        _2771 = (exp2(_2970 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2954 * cbSceneParam._m0[78u].z)) * _2944.z) / cbSceneParam._m0[78u].z)) + _2674;
        _2773 = _2953 * _2675;
    }
    else
    {
        _2767 = _2672;
        _2769 = _2673;
        _2771 = _2674;
        _2773 = _2675;
    }
    bool _2980;
    vec4 _2783;
    vec4 _2805;
    float _2807;
    float _2811;
    float _2812;
    float _2813;
    float _2814;
    bool _2824;
    for (;;)
    {
        _2783 = cbMatDynParam._m0[0u];
        float _2785 = roundEven(_2783.y);
        bool _2786 = _2785 == 3.0;
        float _2787 = log2(_2773);
        float _2794 = exp2(_2787 * cbSceneParam._m0[78u].x) * _2644;
        float _2795 = exp2(_2787 * cbSceneParam._m0[78u].y) * _2645;
        float _2796 = exp2(_2787 * cbSceneParam._m0[78u].z) * _2646;
        float _2803 = _735 + (-0.5);
        _2805 = cbMtdParam._m0[1u];
        _2807 = _2805.y * _2803;
        float _2810 = (_2785 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2811 = _2810 * (_2786 ? _2794 : (_2794 + (cbSceneParam._m0[72u].w * _2767)));
        _2812 = _2810 * (_2786 ? _2795 : (_2795 + (cbSceneParam._m0[72u].w * _2769)));
        _2813 = _2810 * (_2786 ? _2796 : (_2796 + (cbSceneParam._m0[72u].w * _2771)));
        _2814 = _2803 * 0.999000012874603271484375;
        _2824 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2824)
        {
            if ((cbInstanceData._m0[_784 + 7u].x + _2814) < 0.5)
            {
                _2980 = true;
                break;
            }
        }
        uint _2921 = _785 + uint(_2783.w);
        if ((cbInstanceData._m0[_2921].w < 1.0) && ((cbInstanceData._m0[_2921].w + _2814) < 0.5))
        {
            _2980 = true;
            break;
        }
        if ((_2807 + 1.0) < _2805.x)
        {
            _2980 = true;
            break;
        }
        _2980 = false;
        break;
    }
    float _3185;
    if (_2980)
    {
        discard_state = true;
        _3185 = 0.0;
    }
    else
    {
        _3185 = cbInstanceData._m0[_2647].w;
    }
    SV_Target.x = _2811;
    SV_Target.y = _2812;
    SV_Target.z = _2813;
    SV_Target.w = _3185;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2647].w;
    discard_exit();
}


