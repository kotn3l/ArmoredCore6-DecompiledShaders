#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[20];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_19;
layout(set = 0, binding = 11) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_2;
layout(set = 0, binding = 12) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_20;
layout(set = 0, binding = 13) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_3;
layout(set = 0, binding = 14) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_5;
layout(set = 0, binding = 15) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_6;
layout(set = 0, binding = 16) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_7;
layout(set = 0, binding = 17) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_8;
layout(set = 0, binding = 18) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_11;
layout(set = 0, binding = 3) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_12;
layout(set = 0, binding = 4) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_13;
layout(set = 0, binding = 5) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_14;
layout(set = 0, binding = 6) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_15;
layout(set = 0, binding = 7) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_16;
layout(set = 0, binding = 8) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_17;
layout(set = 0, binding = 9) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_18;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1395;
float _3801;
float _3802;
float _3803;
float _3804;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _221 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _222 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _223 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _229 = inversesqrt(dot(vec3(_221, _222, _223), vec3(_221, _222, _223)));
    float _236 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _243 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _266 = sin(cbMtdParam._m0[18u].x);
    float _267 = cos(cbMtdParam._m0[18u].x);
    float _268 = TEXCOORD.x - cbMtdParam._m0[17u].w;
    float _269 = TEXCOORD.y - cbMtdParam._m0[17u].w;
    float _277 = (cbMtdParam._m0[17u].w + cbMtdParam._m0[19u].y) + fma(_269, (-0.0) - _266, _267 * _268);
    float _279 = (cbMtdParam._m0[17u].w + cbMtdParam._m0[19u].z) + fma(_269, _267, _268 * _266);
    vec4 _292 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * _277) + cbTextureTilingScale._m0[1u].z, (_279 * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w));
    float _298 = _292.x * cbMtdParam._m0[10u].x;
    float _299 = _292.y * cbMtdParam._m0[10u].y;
    float _300 = _292.z * cbMtdParam._m0[10u].z;
    vec4 _318 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w));
    vec4 _337 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_0, SS_WrapLinear), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _362 = cbMtdParam._m0[19u].x * texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.x) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD.y) + cbTextureTilingScale._m0[13u].w)).x;
    float _373 = ((cbMtdParam._m0[15u].x * (-1.39999997615814208984375)) * (((1.0 - _337.x) * 2.0) - _362)) + 1.0;
    float _3813 = isnan(0.0) ? _373 : (isnan(_373) ? 0.0 : max(_373, 0.0));
    float _374 = isnan(1.0) ? _3813 : (isnan(_3813) ? 1.0 : min(_3813, 1.0));
    float _381 = (_374 * ((_318.x * cbMtdParam._m0[11u].x) - _298)) + _298;
    float _382 = (_374 * ((_318.y * cbMtdParam._m0[11u].y) - _299)) + _299;
    float _383 = (_374 * ((_318.z * cbMtdParam._m0[11u].z) - _300)) + _300;
    vec4 _401 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_8, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[17u].x * TEXCOORD.x) + cbTextureTilingScale._m0[17u].z, (cbTextureTilingScale._m0[17u].y * TEXCOORD.y) + cbTextureTilingScale._m0[17u].w));
    float _414 = (((((1.0 - _337.y) * 2.0) - _362) * (-1.39999997615814208984375)) * cbMtdParam._m0[18u].z) + 1.0;
    float _3824 = isnan(0.0) ? _414 : (isnan(_414) ? 0.0 : max(_414, 0.0));
    float _415 = isnan(1.0) ? _3824 : (isnan(_3824) ? 1.0 : min(_3824, 1.0));
    float _422 = (((_401.x * cbMtdParam._m0[12u].x) - _381) * _415) + _381;
    float _423 = (_415 * ((_401.y * cbMtdParam._m0[12u].y) - _382)) + _382;
    float _424 = (_415 * ((_401.z * cbMtdParam._m0[12u].z) - _383)) + _383;
    vec4 _441 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _454 = (((((1.0 - _337.z) * 2.0) - _362) * (-1.39999997615814208984375)) * cbMtdParam._m0[18u].w) + 1.0;
    float _3835 = isnan(0.0) ? _454 : (isnan(_454) ? 0.0 : max(_454, 0.0));
    float _455 = isnan(1.0) ? _3835 : (isnan(_3835) ? 1.0 : min(_3835, 1.0));
    vec4 _483 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _491 = ((((((_441.x * cbMtdParam._m0[13u].x) - _422) * _455) + _422) * 4.55000019073486328125) * cbMtdParam._m0[9u].x) * _483.x;
    float _494 = ((((_455 * ((_441.y * cbMtdParam._m0[13u].y) - _423)) + _423) * 4.55000019073486328125) * cbMtdParam._m0[9u].y) * _483.y;
    float _497 = ((((_455 * ((_441.z * cbMtdParam._m0[13u].z) - _424)) + _424) * 4.55000019073486328125) * cbMtdParam._m0[9u].z) * _483.z;
    vec4 _517 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_20, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.z) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.w) + cbTextureTilingScale._m0[12u].w));
    float _546 = (TEXCOORD_5.x - ((cbMtdParam._m0[15u].w * (1.0 - TEXCOORD_5.x)) * (texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[18u].x * TEXCOORD.z) + cbTextureTilingScale._m0[18u].z, (cbTextureTilingScale._m0[18u].y * TEXCOORD.w) + cbTextureTilingScale._m0[18u].w)).x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[15u].z + 1.0);
    float _3846 = isnan(0.0) ? _546 : (isnan(_546) ? 0.0 : max(_546, 0.0));
    float _547 = isnan(1.0) ? _3846 : (isnan(_3846) ? 1.0 : min(_3846, 1.0));
    float _554 = (_547 * ((_517.x * cbMtdParam._m0[14u].x) - _491)) + _491;
    float _555 = (_547 * ((_517.y * cbMtdParam._m0[14u].y) - _494)) + _494;
    float _556 = (_547 * ((_517.z * cbMtdParam._m0[14u].z) - _497)) + _497;
    vec4 _569 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * _277) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _279) + cbTextureTilingScale._m0[5u].w));
    float _571 = _569.x;
    float _589 = ((texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w)).x - _571) * _374) + _571;
    float _606 = ((texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w)).x - _589) * _415) + _589;
    float _623 = ((texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w)).x - _606) * _455) + _606;
    float _627 = (_623 - (_623 * TEXCOORD_5.x)) * cbMtdParam._m0[18u].y;
    vec4 _640 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.z) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.w) + cbTextureTilingScale._m0[3u].w));
    vec4 _662 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[14u].x * _277) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _279) + cbTextureTilingScale._m0[14u].w));
    float _664 = _662.x;
    float _665 = _662.y;
    float _668 = cbMtdParam._m0[17u].y * _662.z;
    vec4 _680 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * TEXCOORD.x) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * TEXCOORD.y) + cbTextureTilingScale._m0[15u].w));
    float _689 = (((cbMtdParam._m0[17u].x * _680.z) - _668) * _374) + _668;
    vec4 _702 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_15, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _714 = (((cbMtdParam._m0[16u].w * _702.z) - _689) * _415) + _689;
    vec4 _727 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _736 = (((cbMtdParam._m0[16u].z * _727.z) - _714) * _455) + _714;
    float _741 = ((cbMtdParam._m0[16u].x * TEXCOORD_5.x) * ((_640.z * cbMtdParam._m0[17u].z) - _736)) + _736;
    vec4 _754 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[16u].x * TEXCOORD.x) + cbTextureTilingScale._m0[16u].z, (cbTextureTilingScale._m0[16u].y * TEXCOORD.y) + cbTextureTilingScale._m0[16u].w));
    float _766 = ((_680.x - _664) * _374) + _664;
    float _767 = ((_680.y - _665) * _374) + _665;
    float _772 = ((_702.x - _766) * _415) + _766;
    float _773 = ((_702.y - _767) * _415) + _767;
    float _782 = ((((_727.x - _772) * _455) + _772) * 2.0) + (-1.0);
    float _783 = ((((_727.y - _773) * _455) + _773) * 2.0) + (-1.0);
    float _784 = dot(vec2(_782, _783), vec2(_782, _783));
    float _3857 = isnan(0.0) ? _784 : (isnan(_784) ? 0.0 : max(_784, 0.0));
    float _789 = sqrt(1.0 - (isnan(1.0) ? _3857 : (isnan(_3857) ? 1.0 : min(_3857, 1.0))));
    float _799 = ((((_754.x * 2.0) + (-1.0)) * cbMtdParam._m0[16u].y) + _782) + ((((_640.x * 2.0) + (-1.0)) * TEXCOORD_5.x) * cbMtdParam._m0[15u].y);
    float _800 = ((((_754.y * 2.0) + (-1.0)) * cbMtdParam._m0[16u].y) + _783) + ((((_640.y * 2.0) + (-1.0)) * TEXCOORD_5.y) * cbMtdParam._m0[15u].y);
    float _803 = fma(_789, _236 * NORMAL.x, fma(_800, _243 * TANGENT.x, (_229 * _221) * _799));
    float _806 = fma(_789, _236 * NORMAL.y, fma(_800, _243 * TANGENT.y, (_229 * _222) * _799));
    float _809 = fma(_789, _236 * NORMAL.z, fma(_800, _243 * TANGENT.z, (_229 * _223) * _799));
    float _813 = inversesqrt(dot(vec3(_803, _806, _809), vec3(_803, _806, _809)));
    float _814 = _813 * _803;
    float _815 = _813 * _806;
    float _816 = _813 * _809;
    float _3868 = isnan(0.0) ? _741 : (isnan(_741) ? 0.0 : max(_741, 0.0));
    float _817 = isnan(1.0) ? _3868 : (isnan(_3868) ? 1.0 : min(_3868, 1.0));
    float _3879 = isnan(0.0) ? _554 : (isnan(_554) ? 0.0 : max(_554, 0.0));
    float _3890 = isnan(0.0) ? _555 : (isnan(_555) ? 0.0 : max(_555, 0.0));
    float _3901 = isnan(0.0) ? _556 : (isnan(_556) ? 0.0 : max(_556, 0.0));
    float _3912 = isnan(0.0) ? _627 : (isnan(_627) ? 0.0 : max(_627, 0.0));
    float _821 = isnan(1.0) ? _3912 : (isnan(_3912) ? 1.0 : min(_3912, 1.0));
    float _837 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _877 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _887 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _877);
    float _888 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _877);
    float _889 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _877);
    float _893 = inversesqrt(dot(vec3(_887, _888, _889), vec3(_887, _888, _889)));
    float _894 = _887 * _893;
    float _895 = _888 * _893;
    float _896 = _889 * _893;
    vec4 _901 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _903 = _901.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1075 = sqrt(((_887 * _887) + (_888 * _888)) + (_889 * _889));
        float _1081 = (cbMatDynParam._m0[5u].x * _1075) + cbMatDynParam._m0[5u].y;
        float _3923 = isnan(0.0) ? _1081 : (isnan(_1081) ? 0.0 : max(_1081, 0.0));
        float _1082 = isnan(1.0) ? _3923 : (isnan(_3923) ? 1.0 : min(_3923, 1.0));
        float _1086 = (cbMatDynParam._m0[5u].z * _1075) + cbMatDynParam._m0[5u].w;
        float _3934 = isnan(0.0) ? _1086 : (isnan(_1086) ? 0.0 : max(_1086, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3934 : (isnan(_3934) ? 1.0 : min(_3934, 1.0))) - _1082)) + _1082) < ((_903 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _914 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _915 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _933 = fma(_816, cbSceneParam._m0[5u].z, fma(_815, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _814));
    float _936 = fma(_816, cbSceneParam._m0[6u].z, fma(_815, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _814));
    float _939 = fma(_816, cbSceneParam._m0[7u].z, fma(_815, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _814));
    uint _952 = uint(roundEven(NORMAL.w)) * 13u;
    uint _953 = _952 + 9u;
    uint _954 = _953 + uint(cbMatDynParam._m0[0u].w);
    float _960 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3879 : (isnan(_3879) ? 1.0 : min(_3879, 1.0)))) * cbInstanceData._m0[_954].x;
    float _961 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3890 : (isnan(_3890) ? 1.0 : min(_3890, 1.0)))) * cbInstanceData._m0[_954].y;
    float _962 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3901 : (isnan(_3901) ? 1.0 : min(_3901, 1.0)))) * cbInstanceData._m0[_954].z;
    float _3945 = isnan(0.0) ? _960 : (isnan(_960) ? 0.0 : max(_960, 0.0));
    float _963 = isnan(1.0) ? _3945 : (isnan(_3945) ? 1.0 : min(_3945, 1.0));
    float _3956 = isnan(0.0) ? _961 : (isnan(_961) ? 0.0 : max(_961, 0.0));
    float _964 = isnan(1.0) ? _3956 : (isnan(_3956) ? 1.0 : min(_3956, 1.0));
    float _3967 = isnan(0.0) ? _962 : (isnan(_962) ? 0.0 : max(_962, 0.0));
    float _965 = isnan(1.0) ? _3967 : (isnan(_3967) ? 1.0 : min(_3967, 1.0));
    float _966 = 1.0 - _821;
    float _967 = _963 * _966;
    float _968 = _964 * _966;
    float _969 = _965 * _966;
    float _974 = (_963 + (-0.039999999105930328369140625)) * _821;
    float _975 = (_964 + (-0.039999999105930328369140625)) * _821;
    float _976 = (_965 + (-0.039999999105930328369140625)) * _821;
    float _977 = _974 + 0.039999999105930328369140625;
    float _979 = _975 + 0.039999999105930328369140625;
    float _980 = _976 + 0.039999999105930328369140625;
    vec4 _989 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _914, cbSceneParam._m0[86u].y * _915));
    float _992 = _989.x * TEXCOORD_5.w;
    float _993 = dot(vec3(_814, _815, _816), vec3(_894, _895, _896));
    float _996 = _993 * 2.0;
    float _1000 = (_996 * _814) - _894;
    float _1001 = (_996 * _815) - _895;
    float _1002 = (_996 * _816) - _896;
    float _1006 = abs(dot(vec3(_894, _895, _896), vec3(_814, _815, _816)));
    float _3978 = isnan(0.0) ? _1006 : (isnan(_1006) ? 0.0 : max(_1006, 0.0));
    float _1008 = sqrt(_817);
    float _1021 = exp2((_1008 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3978 : (isnan(_3978) ? 1.0 : min(_3978, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1008 * 3.0));
    float _1027 = (1.0 - _1021) * ((_1008 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1028 = _1021 * _1008;
    float _1056 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1060 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1064 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1394;
    float _1396;
    float _1397;
    float _1398;
    float _1399;
    float _1400;
    float _1401;
    float _1402;
    float _1403;
    float _1404;
    float _1405;
    float _1406;
    float _1407;
    float _1408;
    float _1409;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1119 = fma(_1064, cbModelParam._m0[26u].z, fma(_1060, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1056));
        float _1123 = fma(_1064, cbModelParam._m0[27u].z, fma(_1060, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1056));
        float _1127 = fma(_1064, cbModelParam._m0[28u].z, fma(_1060, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1056));
        float _1152 = _1056 + _814;
        float _1153 = _1060 + _815;
        float _1154 = _1064 + _816;
        float _1164 = fma(_1154, cbModelParam._m0[26u].z, fma(_1153, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1152)) - _1119;
        float _1165 = fma(_1154, cbModelParam._m0[27u].z, fma(_1153, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1152)) - _1123;
        float _1166 = fma(_1154, cbModelParam._m0[28u].z, fma(_1153, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1152)) - _1127;
        float _1170 = inversesqrt(dot(vec3(_1164, _1165, _1166), vec3(_1164, _1165, _1166)));
        float _1183 = ((_1170 * _1164) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1119 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1184 = ((_1170 * _1165) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1123 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1185 = ((_1170 * _1166) / cbModelParam._m0[34u].z) + ((((((_1127 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1188 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1183, _1184, _1185), 0.0);
        vec4 _1195 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1183, _1184, _1185), 0.0);
        vec4 _1202 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1183, _1184, _1185), 0.0);
        vec4 _1209 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1183, _1184, _1185), 0.0);
        float _1222 = exp2((_1188.w + (-0.5)) * 20.0) * 2.0;
        float _1223 = _1222 * (_1188.x + (-0.5));
        float _1224 = _1222 * (_1188.y + (-0.5));
        float _1225 = _1222 * (_1188.z + (-0.5));
        float _1232 = exp2((_1195.w + (-0.5)) * 20.0) * 2.0;
        float _1233 = _1232 * (_1195.x + (-0.5));
        float _1234 = _1232 * (_1195.y + (-0.5));
        float _1235 = _1232 * (_1195.z + (-0.5));
        float _1242 = exp2((_1202.w + (-0.5)) * 20.0) * 2.0;
        float _1243 = _1242 * (_1202.x + (-0.5));
        float _1244 = _1242 * (_1202.y + (-0.5));
        float _1245 = _1242 * (_1202.z + (-0.5));
        float _1252 = exp2((_1209.w + (-0.5)) * 20.0) * 2.0;
        float _1253 = _1252 * (_1209.x + (-0.5));
        float _1254 = _1252 * (_1209.y + (-0.5));
        float _1255 = _1252 * (_1209.z + (-0.5));
        float _1256 = isnan(0.0) ? _1253 : (isnan(_1253) ? 0.0 : max(_1253, 0.0));
        float _1257 = isnan(0.0) ? _1254 : (isnan(_1254) ? 0.0 : max(_1254, 0.0));
        float _1258 = isnan(0.0) ? _1255 : (isnan(_1255) ? 0.0 : max(_1255, 0.0));
        float _1259 = _1223 * 0.5;
        float _1260 = _1233 * 0.5;
        float _1261 = _1243 * 0.5;
        float _1262 = dot(vec3(_1259, _1260, _1261), vec3(_1259, _1260, _1261));
        float _1267 = (_1262 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1262);
        float _1276 = (dot(vec3(_814, _815, _816), vec3(_1267 * _1259, _1267 * _1260, _1267 * _1261)) + 1.0) * 0.5;
        float _4004 = isnan(0.0) ? _1276 : (isnan(_1276) ? 0.0 : max(_1276, 0.0));
        float _1286 = sqrt(((_1260 * _1260) + (_1259 * _1259)) + (_1261 * _1261)) / (_1256 + 9.9999997473787516355514526367188e-06);
        float _4015 = isnan(0.0) ? _1286 : (isnan(_1286) ? 0.0 : max(_1286, 0.0));
        float _1287 = isnan(1.0) ? _4015 : (isnan(_4015) ? 1.0 : min(_4015, 1.0));
        float _1288 = _1287 * 2.0;
        float _1292 = (1.0 - _1287) / (_1287 + 1.0);
        float _4026 = isnan(0.0) ? _1292 : (isnan(_1292) ? 0.0 : max(_1292, 0.0));
        float _1293 = isnan(1.0) ? _4026 : (isnan(_4026) ? 1.0 : min(_4026, 1.0));
        float _1302 = ((((1.0 - _1293) * (_1288 + 2.0)) * exp2(log2(isnan(1.0) ? _4004 : (isnan(_4004) ? 1.0 : min(_4004, 1.0))) * (_1288 + 1.0))) + _1293) * _1256;
        float _1303 = _1224 * 0.5;
        float _1304 = _1234 * 0.5;
        float _1305 = _1244 * 0.5;
        float _1306 = dot(vec3(_1303, _1304, _1305), vec3(_1303, _1304, _1305));
        float _1311 = (_1306 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1306);
        float _1319 = (dot(vec3(_814, _815, _816), vec3(_1311 * _1303, _1311 * _1304, _1311 * _1305)) + 1.0) * 0.5;
        float _4037 = isnan(0.0) ? _1319 : (isnan(_1319) ? 0.0 : max(_1319, 0.0));
        float _1328 = sqrt(((_1304 * _1304) + (_1303 * _1303)) + (_1305 * _1305)) / (_1257 + 9.9999997473787516355514526367188e-06);
        float _4048 = isnan(0.0) ? _1328 : (isnan(_1328) ? 0.0 : max(_1328, 0.0));
        float _1329 = isnan(1.0) ? _4048 : (isnan(_4048) ? 1.0 : min(_4048, 1.0));
        float _1330 = _1329 * 2.0;
        float _1334 = (1.0 - _1329) / (_1329 + 1.0);
        float _4059 = isnan(0.0) ? _1334 : (isnan(_1334) ? 0.0 : max(_1334, 0.0));
        float _1335 = isnan(1.0) ? _4059 : (isnan(_4059) ? 1.0 : min(_4059, 1.0));
        float _1344 = ((((1.0 - _1335) * (_1330 + 2.0)) * exp2(log2(isnan(1.0) ? _4037 : (isnan(_4037) ? 1.0 : min(_4037, 1.0))) * (_1330 + 1.0))) + _1335) * _1257;
        float _1345 = _1225 * 0.5;
        float _1346 = _1235 * 0.5;
        float _1347 = _1245 * 0.5;
        float _1348 = dot(vec3(_1345, _1346, _1347), vec3(_1345, _1346, _1347));
        float _1353 = (_1348 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1348);
        float _1361 = (dot(vec3(_814, _815, _816), vec3(_1353 * _1345, _1353 * _1346, _1353 * _1347)) + 1.0) * 0.5;
        float _4070 = isnan(0.0) ? _1361 : (isnan(_1361) ? 0.0 : max(_1361, 0.0));
        float _1370 = sqrt(((_1346 * _1346) + (_1345 * _1345)) + (_1347 * _1347)) / (_1258 + 9.9999997473787516355514526367188e-06);
        float _4081 = isnan(0.0) ? _1370 : (isnan(_1370) ? 0.0 : max(_1370, 0.0));
        float _1371 = isnan(1.0) ? _4081 : (isnan(_4081) ? 1.0 : min(_4081, 1.0));
        float _1372 = _1371 * 2.0;
        float _1376 = (1.0 - _1371) / (_1371 + 1.0);
        float _4092 = isnan(0.0) ? _1376 : (isnan(_1376) ? 0.0 : max(_1376, 0.0));
        float _1377 = isnan(1.0) ? _4092 : (isnan(_4092) ? 1.0 : min(_4092, 1.0));
        float _1386 = ((((1.0 - _1377) * (_1372 + 2.0)) * exp2(log2(isnan(1.0) ? _4070 : (isnan(_4070) ? 1.0 : min(_4070, 1.0))) * (_1372 + 1.0))) + _1377) * _1258;
        _1394 = _1225;
        _1396 = _1224;
        _1397 = _1223;
        _1398 = _1235;
        _1399 = _1234;
        _1400 = _1233;
        _1401 = _1245;
        _1402 = _1244;
        _1403 = _1243;
        _1404 = _1258;
        _1405 = _1257;
        _1406 = _1256;
        _1407 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1302 : (isnan(_1302) ? 0.0 : max(_1302, 0.0)));
        _1408 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1344 : (isnan(_1344) ? 0.0 : max(_1344, 0.0)));
        _1409 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1386 : (isnan(_1386) ? 0.0 : max(_1386, 0.0)));
    }
    else
    {
        _1394 = _1395;
        _1396 = _1395;
        _1397 = _1395;
        _1398 = _1395;
        _1399 = _1395;
        _1400 = _1395;
        _1401 = _1395;
        _1402 = _1395;
        _1403 = _1395;
        _1404 = _1395;
        _1405 = _1395;
        _1406 = _1395;
        _1407 = 0.0;
        _1408 = 0.0;
        _1409 = 0.0;
    }
    float _1707;
    float _1708;
    float _1709;
    float _1710;
    float _1711;
    float _1712;
    float _1713;
    float _1714;
    float _1715;
    float _1716;
    float _1717;
    float _1718;
    float _1719;
    float _1720;
    float _1721;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1438 = fma(_1064, cbModelParam._m0[30u].z, fma(_1060, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1056));
        float _1442 = fma(_1064, cbModelParam._m0[31u].z, fma(_1060, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1056));
        float _1446 = fma(_1064, cbModelParam._m0[32u].z, fma(_1060, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1056));
        float _1469 = _1056 + _814;
        float _1470 = _1060 + _815;
        float _1471 = _1064 + _816;
        float _1481 = fma(_1471, cbModelParam._m0[30u].z, fma(_1470, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1469)) - _1438;
        float _1482 = fma(_1471, cbModelParam._m0[31u].z, fma(_1470, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1469)) - _1442;
        float _1483 = fma(_1471, cbModelParam._m0[32u].z, fma(_1470, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1469)) - _1446;
        float _1487 = inversesqrt(dot(vec3(_1481, _1482, _1483), vec3(_1481, _1482, _1483)));
        float _1500 = ((_1487 * _1481) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1438 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1501 = ((_1487 * _1482) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1442 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1502 = ((_1487 * _1483) / cbModelParam._m0[35u].z) + ((((((_1446 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1504 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1500, _1501, _1502), 0.0);
        vec4 _1511 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1500, _1501, _1502), 0.0);
        vec4 _1518 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1500, _1501, _1502), 0.0);
        vec4 _1525 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1500, _1501, _1502), 0.0);
        float _1537 = exp2((_1504.w + (-0.5)) * 20.0) * 2.0;
        float _1538 = _1537 * (_1504.x + (-0.5));
        float _1539 = _1537 * (_1504.y + (-0.5));
        float _1540 = _1537 * (_1504.z + (-0.5));
        float _1547 = exp2((_1511.w + (-0.5)) * 20.0) * 2.0;
        float _1548 = _1547 * (_1511.x + (-0.5));
        float _1549 = _1547 * (_1511.y + (-0.5));
        float _1550 = _1547 * (_1511.z + (-0.5));
        float _1557 = exp2((_1518.w + (-0.5)) * 20.0) * 2.0;
        float _1558 = _1557 * (_1518.x + (-0.5));
        float _1559 = _1557 * (_1518.y + (-0.5));
        float _1560 = _1557 * (_1518.z + (-0.5));
        float _1567 = exp2((_1525.w + (-0.5)) * 20.0) * 2.0;
        float _1568 = _1567 * (_1525.x + (-0.5));
        float _1569 = _1567 * (_1525.y + (-0.5));
        float _1570 = _1567 * (_1525.z + (-0.5));
        float _1571 = isnan(0.0) ? _1568 : (isnan(_1568) ? 0.0 : max(_1568, 0.0));
        float _1572 = isnan(0.0) ? _1569 : (isnan(_1569) ? 0.0 : max(_1569, 0.0));
        float _1573 = isnan(0.0) ? _1570 : (isnan(_1570) ? 0.0 : max(_1570, 0.0));
        float _1574 = _1538 * 0.5;
        float _1575 = _1548 * 0.5;
        float _1576 = _1558 * 0.5;
        float _1577 = dot(vec3(_1574, _1575, _1576), vec3(_1574, _1575, _1576));
        float _1582 = (_1577 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1577);
        float _1590 = (dot(vec3(_814, _815, _816), vec3(_1582 * _1574, _1582 * _1575, _1582 * _1576)) + 1.0) * 0.5;
        float _4133 = isnan(0.0) ? _1590 : (isnan(_1590) ? 0.0 : max(_1590, 0.0));
        float _1599 = sqrt(((_1575 * _1575) + (_1574 * _1574)) + (_1576 * _1576)) / (_1571 + 9.9999997473787516355514526367188e-06);
        float _4144 = isnan(0.0) ? _1599 : (isnan(_1599) ? 0.0 : max(_1599, 0.0));
        float _1600 = isnan(1.0) ? _4144 : (isnan(_4144) ? 1.0 : min(_4144, 1.0));
        float _1601 = _1600 * 2.0;
        float _1605 = (1.0 - _1600) / (_1600 + 1.0);
        float _4155 = isnan(0.0) ? _1605 : (isnan(_1605) ? 0.0 : max(_1605, 0.0));
        float _1606 = isnan(1.0) ? _4155 : (isnan(_4155) ? 1.0 : min(_4155, 1.0));
        float _1615 = ((((1.0 - _1606) * (_1601 + 2.0)) * exp2(log2(isnan(1.0) ? _4133 : (isnan(_4133) ? 1.0 : min(_4133, 1.0))) * (_1601 + 1.0))) + _1606) * _1571;
        float _1616 = _1539 * 0.5;
        float _1617 = _1549 * 0.5;
        float _1618 = _1559 * 0.5;
        float _1619 = dot(vec3(_1616, _1617, _1618), vec3(_1616, _1617, _1618));
        float _1624 = (_1619 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1619);
        float _1632 = (dot(vec3(_814, _815, _816), vec3(_1624 * _1616, _1624 * _1617, _1624 * _1618)) + 1.0) * 0.5;
        float _4166 = isnan(0.0) ? _1632 : (isnan(_1632) ? 0.0 : max(_1632, 0.0));
        float _1641 = sqrt(((_1617 * _1617) + (_1616 * _1616)) + (_1618 * _1618)) / (_1572 + 9.9999997473787516355514526367188e-06);
        float _4177 = isnan(0.0) ? _1641 : (isnan(_1641) ? 0.0 : max(_1641, 0.0));
        float _1642 = isnan(1.0) ? _4177 : (isnan(_4177) ? 1.0 : min(_4177, 1.0));
        float _1643 = _1642 * 2.0;
        float _1647 = (1.0 - _1642) / (_1642 + 1.0);
        float _4188 = isnan(0.0) ? _1647 : (isnan(_1647) ? 0.0 : max(_1647, 0.0));
        float _1648 = isnan(1.0) ? _4188 : (isnan(_4188) ? 1.0 : min(_4188, 1.0));
        float _1657 = ((((1.0 - _1648) * (_1643 + 2.0)) * exp2(log2(isnan(1.0) ? _4166 : (isnan(_4166) ? 1.0 : min(_4166, 1.0))) * (_1643 + 1.0))) + _1648) * _1572;
        float _1658 = _1540 * 0.5;
        float _1659 = _1550 * 0.5;
        float _1660 = _1560 * 0.5;
        float _1661 = dot(vec3(_1658, _1659, _1660), vec3(_1658, _1659, _1660));
        float _1666 = (_1661 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1661);
        float _1674 = (dot(vec3(_814, _815, _816), vec3(_1666 * _1658, _1666 * _1659, _1666 * _1660)) + 1.0) * 0.5;
        float _4199 = isnan(0.0) ? _1674 : (isnan(_1674) ? 0.0 : max(_1674, 0.0));
        float _1683 = sqrt(((_1659 * _1659) + (_1658 * _1658)) + (_1660 * _1660)) / (_1573 + 9.9999997473787516355514526367188e-06);
        float _4210 = isnan(0.0) ? _1683 : (isnan(_1683) ? 0.0 : max(_1683, 0.0));
        float _1684 = isnan(1.0) ? _4210 : (isnan(_4210) ? 1.0 : min(_4210, 1.0));
        float _1685 = _1684 * 2.0;
        float _1689 = (1.0 - _1684) / (_1684 + 1.0);
        float _4221 = isnan(0.0) ? _1689 : (isnan(_1689) ? 0.0 : max(_1689, 0.0));
        float _1690 = isnan(1.0) ? _4221 : (isnan(_4221) ? 1.0 : min(_4221, 1.0));
        float _1699 = ((((1.0 - _1690) * (_1685 + 2.0)) * exp2(log2(isnan(1.0) ? _4199 : (isnan(_4199) ? 1.0 : min(_4199, 1.0))) * (_1685 + 1.0))) + _1690) * _1573;
        _1707 = _1540;
        _1708 = _1539;
        _1709 = _1538;
        _1710 = _1550;
        _1711 = _1549;
        _1712 = _1548;
        _1713 = _1560;
        _1714 = _1559;
        _1715 = _1558;
        _1716 = _1573;
        _1717 = _1572;
        _1718 = _1571;
        _1719 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1615 : (isnan(_1615) ? 0.0 : max(_1615, 0.0)));
        _1720 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1657 : (isnan(_1657) ? 0.0 : max(_1657, 0.0)));
        _1721 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1699 : (isnan(_1699) ? 0.0 : max(_1699, 0.0)));
    }
    else
    {
        _1707 = _1395;
        _1708 = _1395;
        _1709 = _1395;
        _1710 = _1395;
        _1711 = _1395;
        _1712 = _1395;
        _1713 = _1395;
        _1714 = _1395;
        _1715 = _1395;
        _1716 = _1395;
        _1717 = _1395;
        _1718 = _1395;
        _1719 = 0.0;
        _1720 = 0.0;
        _1721 = 0.0;
    }
    float _1731 = (cbModelParam._m0[1u].x * (_1719 - _1407)) + _1407;
    float _1732 = (cbModelParam._m0[1u].x * (_1720 - _1408)) + _1408;
    float _1733 = (cbModelParam._m0[1u].x * (_1721 - _1409)) + _1409;
    float _1754 = fma(_1733, cbSceneParam._m0[89u].z, fma(_1732, cbSceneParam._m0[89u].y, _1731 * cbSceneParam._m0[89u].x));
    float _1757 = fma(_1733, cbSceneParam._m0[90u].z, fma(_1732, cbSceneParam._m0[90u].y, _1731 * cbSceneParam._m0[90u].x));
    float _1760 = fma(_1733, cbSceneParam._m0[91u].z, fma(_1732, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1731));
    float _1775 = _1000 * 0.5;
    float _1776 = _1001 * 0.5;
    float _1777 = _1002 * 0.5;
    float _1778 = dot(vec4(_1775, _1776, _1777, 1.0), vec4(_1709, _1712, _1715, _1718));
    float _1781 = dot(vec4(_1775, _1776, _1777, 1.0), vec4(_1708, _1711, _1714, _1717));
    float _1784 = dot(vec4(_1775, _1776, _1777, 1.0), vec4(_1707, _1710, _1713, _1716));
    float _1818;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1791 = dot(vec4(_1775, _1776, _1777, 1.0), vec4(_1394, _1398, _1401, _1404));
        float _1795 = dot(vec4(_1775, _1776, _1777, 1.0), vec4(_1396, _1399, _1402, _1405));
        float _1799 = dot(vec4(_1775, _1776, _1777, 1.0), vec4(_1397, _1400, _1403, _1406));
        float _1806 = dot(vec4(cbModelParam._m0[39u]), vec4(_1775, _1776, _1777, 1.0));
        _1818 = dot(vec3(isnan(0.0) ? _1799 : (isnan(_1799) ? 0.0 : max(_1799, 0.0)), isnan(0.0) ? _1795 : (isnan(_1795) ? 0.0 : max(_1795, 0.0)), isnan(0.0) ? _1791 : (isnan(_1791) ? 0.0 : max(_1791, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1806) ? 0.0 : (isnan(0.0) ? _1806 : max(0.0, _1806))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1818 = 1.0;
    }
    float _1829;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1820 = dot(vec4(cbModelParam._m0[40u]), vec4(_1775, _1776, _1777, 1.0));
        _1829 = dot(vec3(isnan(0.0) ? _1778 : (isnan(_1778) ? 0.0 : max(_1778, 0.0)), isnan(0.0) ? _1781 : (isnan(_1781) ? 0.0 : max(_1781, 0.0)), isnan(0.0) ? _1784 : (isnan(_1784) ? 0.0 : max(_1784, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1820) ? 0.0 : (isnan(0.0) ? _1820 : max(0.0, _1820))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1829 = 1.0;
    }
    float _1833 = (_1829 * cbModelParam._m0[1u].x) + (_1818 * (1.0 - cbModelParam._m0[1u].x));
    float _1843 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _817);
    float _1844 = isnan(_1843) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1843 : min(cbModelParam._m0[25u].z, _1843));
    float _1924;
    float _1926;
    float _1928;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1891 = fma(_1064, cbModelParam._m0[13u].z, fma(_1060, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1056)) + cbModelParam._m0[13u].w;
        float _1895 = fma(_1064, cbModelParam._m0[14u].z, fma(_1060, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1056)) + cbModelParam._m0[14u].w;
        float _1899 = fma(_1064, cbModelParam._m0[15u].z, fma(_1060, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1056)) + cbModelParam._m0[15u].w;
        float _1902 = fma(_1002, cbModelParam._m0[13u].z, fma(_1001, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1000));
        float _1905 = fma(_1002, cbModelParam._m0[14u].z, fma(_1001, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1000));
        float _1908 = fma(_1002, cbModelParam._m0[15u].z, fma(_1001, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1000));
        float _1936;
        if (_1902 > 0.0)
        {
            _1936 = abs((1.0 - _1891) / _1902);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1902 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1891 + 1.0) / _1902);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1936 = frontier_phi_17_15_ladder;
        }
        float _2161;
        if (_1905 > 0.0)
        {
            _2161 = abs((1.0 - _1895) / _1905);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1905 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1895 + 1.0) / _1905);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2161 = frontier_phi_26_22_ladder;
        }
        float _2418;
        if (_1908 > 0.0)
        {
            _2418 = abs((1.0 - _1899) / _1908);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1908 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1899 + 1.0) / _1908);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2418 = frontier_phi_38_33_ladder;
        }
        float _2420 = isnan(_2161) ? _1936 : (isnan(_1936) ? _2161 : min(_1936, _2161));
        float _2421 = isnan(_2418) ? _2420 : (isnan(_2420) ? _2418 : min(_2420, _2418));
        float _2425 = (_2421 * _1902) + _1891;
        float _2426 = (_2421 * _1905) + _1895;
        float _2427 = (_2421 * _1908) + _1899;
        float _2428 = _2421 * 9.9999997473787516355514526367188e-05;
        float _2430 = (-1.0) - _2428;
        float _2432 = _2428 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2427 > _2432) || ((_2427 < _2430) || ((_2426 > _2432) || ((_2426 < _2430) || ((_2425 < _2430) || (_2425 > _2432))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2555 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2427, cbModelParam._m0[9u].z, fma(_2426, cbModelParam._m0[9u].y, _2425 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2427, cbModelParam._m0[10u].z, fma(_2426, cbModelParam._m0[10u].y, _2425 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2427, cbModelParam._m0[11u].z, fma(_2426, cbModelParam._m0[11u].y, _2425 * cbModelParam._m0[11u].x))), _1844);
            frontier_phi_16_38_ladder = _2555.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2555.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2555.x * cbModelParam._m0[1u].y;
        }
        _1924 = frontier_phi_16_38_ladder_2;
        _1926 = frontier_phi_16_38_ladder_1;
        _1928 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1912 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1000, _1001, _1002), _1844);
        _1924 = _1912.x * cbModelParam._m0[1u].y;
        _1926 = _1912.y * cbModelParam._m0[1u].y;
        _1928 = _1912.z * cbModelParam._m0[1u].y;
    }
    float _1932 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _817);
    float _1933 = isnan(_1932) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1932 : min(cbModelParam._m0[25u].w, _1932));
    float _2024;
    float _2026;
    float _2028;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1988 = fma(_1064, cbModelParam._m0[21u].z, fma(_1060, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1056)) + cbModelParam._m0[21u].w;
        float _1992 = fma(_1064, cbModelParam._m0[22u].z, fma(_1060, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1056)) + cbModelParam._m0[22u].w;
        float _1996 = fma(_1064, cbModelParam._m0[23u].z, fma(_1060, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1056)) + cbModelParam._m0[23u].w;
        float _1999 = fma(_1002, cbModelParam._m0[21u].z, fma(_1001, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1000));
        float _2002 = fma(_1002, cbModelParam._m0[22u].z, fma(_1001, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1000));
        float _2005 = fma(_1002, cbModelParam._m0[23u].z, fma(_1001, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1000));
        float _2166;
        if (_1999 > 0.0)
        {
            _2166 = abs((1.0 - _1988) / _1999);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1999 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1988 + 1.0) / _1999);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2166 = frontier_phi_28_24_ladder;
        }
        float _2445;
        if (_2002 > 0.0)
        {
            _2445 = abs((1.0 - _1992) / _2002);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2002 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1992 + 1.0) / _2002);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2445 = frontier_phi_40_35_ladder;
        }
        float _2658;
        if (_2005 > 0.0)
        {
            _2658 = abs((1.0 - _1996) / _2005);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2005 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1996 + 1.0) / _2005);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2658 = frontier_phi_49_46_ladder;
        }
        float _2660 = isnan(_2445) ? _2166 : (isnan(_2166) ? _2445 : min(_2166, _2445));
        float _2661 = isnan(_2658) ? _2660 : (isnan(_2660) ? _2658 : min(_2660, _2658));
        float _2665 = (_2661 * _1999) + _1988;
        float _2666 = (_2661 * _2002) + _1992;
        float _2667 = (_2661 * _2005) + _1996;
        float _2668 = _2661 * 9.9999997473787516355514526367188e-05;
        float _2669 = (-1.0) - _2668;
        float _2671 = _2668 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2667 > _2671) || ((_2667 < _2669) || ((_2666 > _2671) || ((_2666 < _2669) || ((_2665 < _2669) || (_2665 > _2671))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2866 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2667, cbModelParam._m0[17u].z, fma(_2666, cbModelParam._m0[17u].y, _2665 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2667, cbModelParam._m0[18u].z, fma(_2666, cbModelParam._m0[18u].y, _2665 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2667, cbModelParam._m0[19u].z, fma(_2666, cbModelParam._m0[19u].y, _2665 * cbModelParam._m0[19u].x))), _1933);
            frontier_phi_25_49_ladder = _2866.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2866.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2866.x * cbModelParam._m0[1u].z;
        }
        _2024 = frontier_phi_25_49_ladder_2;
        _2026 = frontier_phi_25_49_ladder_1;
        _2028 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2008 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1000, _1001, _1002), _1933);
        _2024 = _2008.x * cbModelParam._m0[1u].z;
        _2026 = _2008.y * cbModelParam._m0[1u].z;
        _2028 = _2008.z * cbModelParam._m0[1u].z;
    }
    float _2041 = (((_1027 * _977) + _1028) * _992) * ((cbModelParam._m0[1u].w * (_2024 - _1924)) + _1924);
    float _2043 = (((_1027 * _979) + _1028) * _992) * ((cbModelParam._m0[1u].w * (_2026 - _1926)) + _1926);
    float _2045 = (((_1027 * _980) + _1028) * _992) * ((cbModelParam._m0[1u].w * (_2028 - _1928)) + _1928);
    float _2048 = fma(_2045, cbSceneParam._m0[89u].z, fma(_2043, cbSceneParam._m0[89u].y, _2041 * cbSceneParam._m0[89u].x));
    float _2051 = fma(_2045, cbSceneParam._m0[90u].z, fma(_2043, cbSceneParam._m0[90u].y, _2041 * cbSceneParam._m0[90u].x));
    float _2054 = fma(_2045, cbSceneParam._m0[91u].z, fma(_2043, cbSceneParam._m0[91u].y, _2041 * cbSceneParam._m0[91u].x));
    vec4 _2062 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_914, _915));
    float _2064 = _2062.w;
    float _2076 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2064);
    float _2077 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2064);
    float _2078 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2064);
    uvec4 _2082 = floatBitsToUint(cbInstanceData._m0[_952 + 5u]);
    uint _2084 = _2082.x * 14u;
    uint _2085 = _2084 + 13u;
    float _2092 = _992 + (-1.0);
    float _2097 = (cbLight._m0[_2085].x * _2092) + 1.0;
    float _2098 = (cbLight._m0[_2085].y * _2092) + 1.0;
    float _2099 = (cbLight._m0[_2085].z * _2092) + 1.0;
    float _2100 = (cbLight._m0[_2085].w * _2092) + 1.0;
    uint _2101 = _2084 + 5u;
    float _2107 = isnan(1.0) ? _2098 : (isnan(_2098) ? 1.0 : min(_2098, 1.0));
    uint _2111 = _2084 + 4u;
    float _2120 = isnan(1.0) ? _2097 : (isnan(_2097) ? 1.0 : min(_2097, 1.0));
    uint _2124 = _2084 | 1u;
    float _2135 = dot(vec3(cbLight._m0[_2084].xyz), vec3(_814, _815, _816));
    float _2138 = dot(vec3(cbLight._m0[_2124].xyz), vec3(_814, _815, _816));
    float _4357 = isnan(0.0) ? _2135 : (isnan(_2135) ? 0.0 : max(_2135, 0.0));
    float _4368 = isnan(0.0) ? _2138 : (isnan(_2138) ? 0.0 : max(_2138, 0.0));
    float _2143 = (isnan(1.0) ? _4357 : (isnan(_4357) ? 1.0 : min(_4357, 1.0))) * 0.3183098733425140380859375;
    float _2145 = (isnan(1.0) ? _4368 : (isnan(_4368) ? 1.0 : min(_4368, 1.0))) * 0.3183098733425140380859375;
    float _2152 = ((cbLight._m0[_2101].x * _2107) * _2145) + (((cbLight._m0[_2111].x * _2076) * _2120) * _2143);
    float _2153 = ((_2107 * cbLight._m0[_2101].y) * _2145) + (((cbLight._m0[_2111].y * _2077) * _2120) * _2143);
    float _2154 = ((_2107 * cbLight._m0[_2101].z) * _2145) + (((cbLight._m0[_2111].z * _2078) * _2120) * _2143);
    uvec4 _2158 = floatBitsToUint(cbLight._m0[_2084 + 12u]);
    bool _2160 = _2158.x == 0u;
    float _2171;
    float _2173;
    float _2175;
    if (_2160)
    {
        _2171 = _2152;
        _2173 = _2153;
        _2175 = _2154;
    }
    else
    {
        uint _2179 = _2084 + 6u;
        float _2195 = (dot(vec3(cbLight._m0[_2084 + 2u].xyz), vec3(_814, _815, _816)) * 0.5) + 0.5;
        float _2196 = _2195 * _2195;
        float _4379 = isnan(0.0) ? _2196 : (isnan(_2196) ? 0.0 : max(_2196, 0.0));
        float _2197 = isnan(1.0) ? _4379 : (isnan(_4379) ? 1.0 : min(_4379, 1.0));
        float _2198 = isnan(1.0) ? _2099 : (isnan(_2099) ? 1.0 : min(_2099, 1.0));
        _2171 = (((cbLight._m0[_2179].x * 0.3183098733425140380859375) * _2197) * _2198) + _2152;
        _2173 = (((cbLight._m0[_2179].y * 0.3183098733425140380859375) * _2197) * _2198) + _2153;
        _2175 = (((cbLight._m0[_2179].z * 0.3183098733425140380859375) * _2197) * _2198) + _2154;
    }
    bool _2178 = _2158.y == 0u;
    float _2216;
    float _2218;
    float _2220;
    if (_2178)
    {
        _2216 = _2171;
        _2218 = _2173;
        _2220 = _2175;
    }
    else
    {
        uint _2389 = _2084 + 7u;
        float _2405 = (dot(vec3(cbLight._m0[_2084 + 3u].xyz), vec3(_814, _815, _816)) * 0.5) + 0.5;
        float _2406 = _2405 * _2405;
        float _4395 = isnan(0.0) ? _2406 : (isnan(_2406) ? 0.0 : max(_2406, 0.0));
        float _2407 = isnan(1.0) ? _4395 : (isnan(_4395) ? 1.0 : min(_4395, 1.0));
        float _2408 = isnan(1.0) ? _2100 : (isnan(_2100) ? 1.0 : min(_2100, 1.0));
        _2216 = (((cbLight._m0[_2389].x * 0.3183098733425140380859375) * _2407) * _2408) + _2171;
        _2218 = (((cbLight._m0[_2389].y * 0.3183098733425140380859375) * _2407) * _2408) + _2173;
        _2220 = (((cbLight._m0[_2389].z * 0.3183098733425140380859375) * _2407) * _2408) + _2175;
    }
    uint _2223 = _2084 + 8u;
    float _2236 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2084].w)) * _817) * 0.949999988079071044921875);
    float _2237 = _2236 * _2236;
    float _2238 = cbLight._m0[_2084].x + _894;
    float _2239 = cbLight._m0[_2084].y + _895;
    float _2240 = cbLight._m0[_2084].z + _896;
    float _2244 = inversesqrt(dot(vec3(_2238, _2239, _2240), vec3(_2238, _2239, _2240)));
    float _2245 = _2244 * _2238;
    float _2246 = _2244 * _2239;
    float _2247 = _2244 * _2240;
    float _2248 = dot(vec3(_814, _815, _816), vec3(cbLight._m0[_2084].xyz));
    float _4411 = isnan(0.0) ? _2248 : (isnan(_2248) ? 0.0 : max(_2248, 0.0));
    float _2251 = isnan(1.0) ? _4411 : (isnan(_4411) ? 1.0 : min(_4411, 1.0));
    float _4422 = isnan(0.0) ? _993 : (isnan(_993) ? 0.0 : max(_993, 0.0));
    float _2252 = isnan(1.0) ? _4422 : (isnan(_4422) ? 1.0 : min(_4422, 1.0));
    float _2253 = dot(vec3(_814, _815, _816), vec3(_2245, _2246, _2247));
    float _4433 = isnan(0.0) ? _2253 : (isnan(_2253) ? 0.0 : max(_2253, 0.0));
    float _2256 = isnan(1.0) ? _4433 : (isnan(_4433) ? 1.0 : min(_4433, 1.0));
    float _2257 = dot(vec3(cbLight._m0[_2084].xyz), vec3(_2245, _2246, _2247));
    float _4444 = isnan(0.0) ? _2257 : (isnan(_2257) ? 0.0 : max(_2257, 0.0));
    float _2261 = _2237 * _2237;
    float _2265 = ((_2256 * _2256) * (_2261 + (-1.0))) + 1.0;
    float _2273 = exp2(log2(1.0 - (isnan(1.0) ? _4444 : (isnan(_4444) ? 1.0 : min(_4444, 1.0)))) * 5.0);
    float _2274 = 0.959999978542327880859375 - _974;
    float _2276 = 0.959999978542327880859375 - _975;
    float _2277 = 0.959999978542327880859375 - _976;
    float _2284 = 1.0 - _2237;
    float _2295 = (0.5 / (((_2252 * ((_2251 * _2284) + _2237)) + 9.9999999392252902907785028219223e-09) + (((_2252 * _2284) + _2237) * _2251))) * _2251;
    float _4455 = isnan(0.0) ? _2295 : (isnan(_2295) ? 0.0 : max(_2295, 0.0));
    float _2297 = (isnan(1.0) ? _4455 : (isnan(_4455) ? 1.0 : min(_4455, 1.0))) * (_2261 / ((_2265 * _2265) * 3.141590118408203125));
    uint _2311 = _2084 + 9u;
    float _2322 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2124].w)) * _817) * 0.949999988079071044921875);
    float _2323 = _2322 * _2322;
    float _2324 = cbLight._m0[_2124].x + _894;
    float _2325 = cbLight._m0[_2124].y + _895;
    float _2326 = cbLight._m0[_2124].z + _896;
    float _2330 = inversesqrt(dot(vec3(_2324, _2325, _2326), vec3(_2324, _2325, _2326)));
    float _2331 = _2330 * _2324;
    float _2332 = _2330 * _2325;
    float _2333 = _2330 * _2326;
    float _2334 = dot(vec3(_814, _815, _816), vec3(cbLight._m0[_2124].xyz));
    float _4466 = isnan(0.0) ? _2334 : (isnan(_2334) ? 0.0 : max(_2334, 0.0));
    float _2337 = isnan(1.0) ? _4466 : (isnan(_4466) ? 1.0 : min(_4466, 1.0));
    float _2338 = dot(vec3(_814, _815, _816), vec3(_2331, _2332, _2333));
    float _4477 = isnan(0.0) ? _2338 : (isnan(_2338) ? 0.0 : max(_2338, 0.0));
    float _2341 = isnan(1.0) ? _4477 : (isnan(_4477) ? 1.0 : min(_4477, 1.0));
    float _2342 = dot(vec3(cbLight._m0[_2124].xyz), vec3(_2331, _2332, _2333));
    float _4488 = isnan(0.0) ? _2342 : (isnan(_2342) ? 0.0 : max(_2342, 0.0));
    float _2346 = _2323 * _2323;
    float _2350 = ((_2341 * _2341) * (_2346 + (-1.0))) + 1.0;
    float _2357 = exp2(log2(1.0 - (isnan(1.0) ? _4488 : (isnan(_4488) ? 1.0 : min(_4488, 1.0)))) * 5.0);
    float _2364 = 1.0 - _2323;
    float _2374 = (0.5 / (((_2252 * ((_2337 * _2364) + _2323)) + 9.9999999392252902907785028219223e-09) + (((_2252 * _2364) + _2323) * _2337))) * _2337;
    float _4499 = isnan(0.0) ? _2374 : (isnan(_2374) ? 0.0 : max(_2374, 0.0));
    float _2376 = (isnan(1.0) ? _4499 : (isnan(_4499) ? 1.0 : min(_4499, 1.0))) * (_2346 / ((_2350 * _2350) * 3.141590118408203125));
    float _2386 = (((((_2357 * _2274) + _977) * cbLight._m0[_2311].x) * _2376) * _2107) + ((((cbLight._m0[_2223].x * _2076) * ((_2273 * _2274) + _977)) * _2297) * _2120);
    float _2387 = (((((_2357 * _2276) + _979) * cbLight._m0[_2311].y) * _2376) * _2107) + ((((cbLight._m0[_2223].y * _2077) * ((_2273 * _2276) + _979)) * _2297) * _2120);
    float _2388 = (((((_2357 * _2277) + _980) * cbLight._m0[_2311].z) * _2376) * _2107) + ((((cbLight._m0[_2223].z * _2078) * ((_2273 * _2277) + _980)) * _2297) * _2120);
    float _2450;
    float _2452;
    float _2454;
    if (_2160)
    {
        _2450 = _2386;
        _2452 = _2387;
        _2454 = _2388;
    }
    else
    {
        uint _2456 = _2084 + 2u;
        uint _2460 = _2084 + 10u;
        float _2474 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2456].w)) * _817) * 0.949999988079071044921875);
        float _2475 = _2474 * _2474;
        float _2476 = cbLight._m0[_2456].x + _894;
        float _2477 = cbLight._m0[_2456].y + _895;
        float _2478 = cbLight._m0[_2456].z + _896;
        float _2482 = inversesqrt(dot(vec3(_2476, _2477, _2478), vec3(_2476, _2477, _2478)));
        float _2483 = _2482 * _2476;
        float _2484 = _2482 * _2477;
        float _2485 = _2482 * _2478;
        float _2486 = dot(vec3(_814, _815, _816), vec3(cbLight._m0[_2456].xyz));
        float _4510 = isnan(0.0) ? _2486 : (isnan(_2486) ? 0.0 : max(_2486, 0.0));
        float _2489 = isnan(1.0) ? _4510 : (isnan(_4510) ? 1.0 : min(_4510, 1.0));
        float _2490 = dot(vec3(_814, _815, _816), vec3(_2483, _2484, _2485));
        float _4521 = isnan(0.0) ? _2490 : (isnan(_2490) ? 0.0 : max(_2490, 0.0));
        float _2493 = isnan(1.0) ? _4521 : (isnan(_4521) ? 1.0 : min(_4521, 1.0));
        float _2494 = dot(vec3(cbLight._m0[_2456].xyz), vec3(_2483, _2484, _2485));
        float _4532 = isnan(0.0) ? _2494 : (isnan(_2494) ? 0.0 : max(_2494, 0.0));
        float _2498 = _2475 * _2475;
        float _2502 = ((_2493 * _2493) * (_2498 + (-1.0))) + 1.0;
        float _2509 = exp2(log2(1.0 - (isnan(1.0) ? _4532 : (isnan(_4532) ? 1.0 : min(_4532, 1.0)))) * 5.0);
        float _2516 = 1.0 - _2475;
        float _2526 = (0.5 / (((_2252 * ((_2489 * _2516) + _2475)) + 9.9999999392252902907785028219223e-09) + (((_2252 * _2516) + _2475) * _2489))) * _2489;
        float _4543 = isnan(0.0) ? _2526 : (isnan(_2526) ? 0.0 : max(_2526, 0.0));
        float _2528 = (isnan(1.0) ? _4543 : (isnan(_4543) ? 1.0 : min(_4543, 1.0))) * (_2498 / ((_2502 * _2502) * 3.141590118408203125));
        float _2529 = isnan(1.0) ? _2099 : (isnan(_2099) ? 1.0 : min(_2099, 1.0));
        _2450 = (((((_2509 * _2274) + _977) * cbLight._m0[_2460].x) * _2528) * _2529) + _2386;
        _2452 = (((((_2509 * _2276) + _979) * cbLight._m0[_2460].y) * _2528) * _2529) + _2387;
        _2454 = (((((_2509 * _2277) + _980) * cbLight._m0[_2460].z) * _2528) * _2529) + _2388;
    }
    float _2564;
    float _2566;
    float _2568;
    if (_2178)
    {
        _2564 = _2450;
        _2566 = _2452;
        _2568 = _2454;
    }
    else
    {
        uint _2575 = _2084 + 3u;
        uint _2579 = _2084 + 11u;
        float _2593 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2575].w)) * _817) * 0.949999988079071044921875);
        float _2594 = _2593 * _2593;
        float _2595 = cbLight._m0[_2575].x + _894;
        float _2596 = cbLight._m0[_2575].y + _895;
        float _2597 = cbLight._m0[_2575].z + _896;
        float _2601 = inversesqrt(dot(vec3(_2595, _2596, _2597), vec3(_2595, _2596, _2597)));
        float _2602 = _2601 * _2595;
        float _2603 = _2601 * _2596;
        float _2604 = _2601 * _2597;
        float _2605 = dot(vec3(_814, _815, _816), vec3(cbLight._m0[_2575].xyz));
        float _4559 = isnan(0.0) ? _2605 : (isnan(_2605) ? 0.0 : max(_2605, 0.0));
        float _2608 = isnan(1.0) ? _4559 : (isnan(_4559) ? 1.0 : min(_4559, 1.0));
        float _2609 = dot(vec3(_814, _815, _816), vec3(_2602, _2603, _2604));
        float _4570 = isnan(0.0) ? _2609 : (isnan(_2609) ? 0.0 : max(_2609, 0.0));
        float _2612 = isnan(1.0) ? _4570 : (isnan(_4570) ? 1.0 : min(_4570, 1.0));
        float _2613 = dot(vec3(cbLight._m0[_2575].xyz), vec3(_2602, _2603, _2604));
        float _4581 = isnan(0.0) ? _2613 : (isnan(_2613) ? 0.0 : max(_2613, 0.0));
        float _2617 = _2594 * _2594;
        float _2621 = ((_2612 * _2612) * (_2617 + (-1.0))) + 1.0;
        float _2628 = exp2(log2(1.0 - (isnan(1.0) ? _4581 : (isnan(_4581) ? 1.0 : min(_4581, 1.0)))) * 5.0);
        float _2635 = 1.0 - _2594;
        float _2645 = (0.5 / (((_2252 * ((_2608 * _2635) + _2594)) + 9.9999999392252902907785028219223e-09) + (((_2252 * _2635) + _2594) * _2608))) * _2608;
        float _4592 = isnan(0.0) ? _2645 : (isnan(_2645) ? 0.0 : max(_2645, 0.0));
        float _2647 = (isnan(1.0) ? _4592 : (isnan(_4592) ? 1.0 : min(_4592, 1.0))) * (_2617 / ((_2621 * _2621) * 3.141590118408203125));
        float _2648 = isnan(1.0) ? _2100 : (isnan(_2100) ? 1.0 : min(_2100, 1.0));
        _2564 = (((((_2628 * _2274) + _977) * cbLight._m0[_2579].x) * _2647) * _2648) + _2450;
        _2566 = (((((_2628 * _2276) + _979) * cbLight._m0[_2579].y) * _2647) * _2648) + _2452;
        _2568 = (((((_2628 * _2277) + _980) * cbLight._m0[_2579].z) * _2647) * _2648) + _2454;
    }
    float _2783;
    float _2785;
    float _2787;
    float _2789;
    float _2791;
    float _2793;
    if (_2082.y == 0u)
    {
        float _2723 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2724 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2723;
        float _2725 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2723;
        float _2726 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2723;
        uvec4 _2738 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2739 = _2738.x;
        uint _2750 = uint((float(_2738.y) * floor(float(uint(cbSceneParam._m0[85u].y * _915) / _2739))) + floor(float(uint(cbSceneParam._m0[85u].x * _914) / _2739)));
        float _2760 = (log2(_2726 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2761 = isnan(0.0) ? _2760 : (isnan(_2760) ? 0.0 : max(_2760, 0.0));
        uint _2764 = uint(isnan(14.0) ? _2761 : (isnan(_2761) ? 14.0 : min(_2761, 14.0)));
        uvec4 _2769 = texelFetch(g_lightClusterGridBuffer, int(((_2764 << 2u) + (_2750 << 6u)) >> 2u));
        uint _2770 = _2769.x;
        uint _2771 = _2738.z;
        float _2871;
        float _2873;
        float _2875;
        float _2877;
        float _2879;
        float _2881;
        if (((((1u << ((_2771 >> 4u) & 15u)) + 4294967295u) & _2770) == 0u) || ((_2771 & 240u) == 0u))
        {
            _2871 = 0.0;
            _2873 = 0.0;
            _2875 = 0.0;
            _2877 = 0.0;
            _2879 = 0.0;
            _2881 = 0.0;
        }
        else
        {
            float _2872;
            float _2874;
            float _2876;
            float _2878;
            float _2880;
            float _2882;
            float _3023 = 0.0;
            float _3024 = 0.0;
            float _3025 = 0.0;
            float _3026 = 0.0;
            float _3027 = 0.0;
            float _3028 = 0.0;
            uint _3029 = 0u;
            uint _3038;
            bool _3039;
            for (;;)
            {
                _3038 = texelFetch(g_lightClassification, int((((_2764 << 5u) + (_2750 << 9u)) + (_3029 << 2u)) >> 2u)).x;
                _3039 = _3038 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3039)
                {
                    frontier_phi_66_pred = _3023;
                    frontier_phi_66_pred_1 = _3028;
                    frontier_phi_66_pred_2 = _3027;
                    frontier_phi_66_pred_3 = _3026;
                    frontier_phi_66_pred_4 = _3025;
                    frontier_phi_66_pred_5 = _3024;
                }
                else
                {
                    float _3168;
                    float _3169;
                    float _3170;
                    float _3171;
                    float _3172;
                    float _3173;
                    uint _3174;
                    _3168 = _3023;
                    _3169 = _3024;
                    _3170 = _3025;
                    _3171 = _3026;
                    _3172 = _3027;
                    _3173 = _3028;
                    _3174 = _3038;
                    float _3095;
                    float _3096;
                    float _3097;
                    float _3098;
                    float _3099;
                    float _3100;
                    for (;;)
                    {
                        uint _3178 = uint(findLSB(_3174)) + (_3029 << 5u);
                        uint _3175 = (_3174 + 4294967295u) & _3174;
                        uint _3180 = _3178 * 48u;
                        vec4 _3194 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3180)).x, texelFetch(g_PointLightRenderingBuffer, int(_3180 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3180 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3180 + 3u)).x));
                        uint _3200 = (_3178 * 48u) + 4u;
                        vec4 _3213 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3200)).x, texelFetch(g_PointLightRenderingBuffer, int(_3200 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3200 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3200 + 3u)).x));
                        uint _3219 = (_3178 * 48u) + 8u;
                        vec3 _3230 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3219)).x, texelFetch(g_PointLightRenderingBuffer, int(_3219 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3219 + 2u)).x));
                        float _3234 = _3194.x - _2724;
                        float _3235 = _3194.y - _2725;
                        float _3236 = _3194.z - _2726;
                        float _3237 = dot(vec3(_3234, _3235, _3236), vec3(_3234, _3235, _3236));
                        float _3240 = inversesqrt(_3237);
                        float _3241 = _3240 * _3234;
                        float _3242 = _3240 * _3235;
                        float _3243 = _3240 * _3236;
                        float _3244 = dot(vec3(_933, _936, _939), vec3(_3241, _3242, _3243));
                        float _3249 = 1.0 - (_3237 * _3194.w);
                        float _4618 = isnan(0.0) ? _3249 : (isnan(_3249) ? 0.0 : max(_3249, 0.0));
                        float _3250 = isnan(1.0) ? _4618 : (isnan(_4618) ? 1.0 : min(_4618, 1.0));
                        float _3251 = sqrt(_3237) * _3213.w;
                        float _3254 = 1.39999997615814208984375 / (_3251 + 1.39999997615814208984375);
                        float _3255 = _3254 * _3254;
                        float _3258 = ((1.0 - _3255) * _3244) + _3255;
                        float _3261 = _3251 * _3251;
                        float _3265 = ((isnan(0.0) ? _3258 : (isnan(_3258) ? 0.0 : max(_3258, 0.0))) * _3250) / ((_3261 * 0.699999988079071044921875) + 1.0);
                        float _3269 = (-0.0) - _2724;
                        float _3270 = (-0.0) - _2725;
                        float _3271 = (-0.0) - _2726;
                        float _3275 = inversesqrt(dot(vec3(_3269, _3270, _3271), vec3(_3269, _3270, _3271)));
                        float _3276 = _3275 * _3269;
                        float _3277 = _3275 * _3270;
                        float _3278 = _3275 * _3271;
                        float _3286 = exp2(log2(1.0 / ((_3261 * 3.5) + 5.0)) * 0.25);
                        float _3287 = 1.0 - _1008;
                        float _3294 = sqrt(1.0 - ((1.0 - (_3287 * _3287)) * (1.0 - (_3286 * _3286))));
                        float _3295 = _3294 * _3294;
                        float _3296 = _3295 * _3295;
                        float _3297 = _3276 + _3241;
                        float _3298 = _3277 + _3242;
                        float _3299 = _3278 + _3243;
                        float _3303 = inversesqrt(dot(vec3(_3297, _3298, _3299), vec3(_3297, _3298, _3299)));
                        float _3307 = dot(vec3(_933, _936, _939), vec3(_3276, _3277, _3278));
                        float _4634 = isnan(0.0) ? _3307 : (isnan(_3307) ? 0.0 : max(_3307, 0.0));
                        float _3310 = isnan(1.0) ? _4634 : (isnan(_4634) ? 1.0 : min(_4634, 1.0));
                        float _3311 = dot(vec3(_933, _936, _939), vec3(_3303 * _3297, _3303 * _3298, _3303 * _3299));
                        float _4645 = isnan(0.0) ? _3311 : (isnan(_3311) ? 0.0 : max(_3311, 0.0));
                        float _3314 = isnan(1.0) ? _4645 : (isnan(_4645) ? 1.0 : min(_4645, 1.0));
                        float _3318 = ((_3314 * _3314) * (_3296 + (-1.0))) + 1.0;
                        float _3319 = _3254 * _3295;
                        float _3320 = _3319 * _3319;
                        float _3323 = ((1.0 - _3320) * _3244) + _3320;
                        float _4656 = isnan(0.0) ? _3323 : (isnan(_3323) ? 0.0 : max(_3323, 0.0));
                        float _3324 = isnan(1.0) ? _4656 : (isnan(_4656) ? 1.0 : min(_4656, 1.0));
                        float _3325 = 1.0 - _3295;
                        float _3335 = (0.5 / (((_3324 * ((_3310 * _3325) + _3295)) + 9.9999999392252902907785028219223e-09) + (((_3324 * _3325) + _3295) * _3310))) * _3324;
                        float _4667 = isnan(0.0) ? _3335 : (isnan(_3335) ? 0.0 : max(_3335, 0.0));
                        float _3346 = (((_3296 * 3.1415927410125732421875) * (isnan(1.0) ? _4667 : (isnan(_4667) ? 1.0 : min(_4667, 1.0)))) / ((_3318 * _3318) * ((_3261 * 2.1991131305694580078125) + 3.141590118408203125))) * _3250;
                        _3098 = (_3265 * _3213.x) + _3171;
                        _3099 = (_3265 * _3213.y) + _3172;
                        _3100 = (_3265 * _3213.z) + _3173;
                        _3095 = (_3346 * _3230.x) + _3168;
                        _3096 = (_3346 * _3230.y) + _3169;
                        _3097 = (_3346 * _3230.z) + _3170;
                        if (_3175 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3168 = _3095;
                            _3169 = _3096;
                            _3170 = _3097;
                            _3171 = _3098;
                            _3172 = _3099;
                            _3173 = _3100;
                            _3174 = _3175;
                        }
                    }
                    frontier_phi_66_pred = _3095;
                    frontier_phi_66_pred_1 = _3100;
                    frontier_phi_66_pred_2 = _3099;
                    frontier_phi_66_pred_3 = _3098;
                    frontier_phi_66_pred_4 = _3097;
                    frontier_phi_66_pred_5 = _3096;
                }
                _2872 = frontier_phi_66_pred;
                _2882 = frontier_phi_66_pred_1;
                _2880 = frontier_phi_66_pred_2;
                _2878 = frontier_phi_66_pred_3;
                _2876 = frontier_phi_66_pred_4;
                _2874 = frontier_phi_66_pred_5;
                uint _3030 = _3029 + 1u;
                if (_3030 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3023 = _2872;
                    _3024 = _2874;
                    _3025 = _2876;
                    _3026 = _2878;
                    _3027 = _2880;
                    _3028 = _2882;
                    _3029 = _3030;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2871 = _2872;
            _2873 = _2874;
            _2875 = _2876;
            _2877 = _2878;
            _2879 = _2880;
            _2881 = _2882;
        }
        uvec4 _2885 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2886 = _2885.z;
        uint _2888 = (_2886 >> 8u) & 15u;
        float _2991;
        float _2993;
        float _2995;
        float _2997;
        float _2999;
        float _3001;
        if (((4294967295u << _2888) & _2770) == 0u)
        {
            _2991 = _2871;
            _2993 = _2873;
            _2995 = _2875;
            _2997 = _2877;
            _2999 = _2879;
            _3001 = _2881;
        }
        else
        {
            float _3016 = inversesqrt(dot(vec3(_2724, _2725, _2726), vec3(_2724, _2725, _2726)));
            float _3017 = _3016 * _2724;
            float _3018 = _3016 * _2725;
            float _3019 = _3016 * _2726;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2888 < ((_2886 >> 12u) & 15u))
            {
                float _2992;
                float _2994;
                float _2996;
                float _2998;
                float _3000;
                float _3002;
                float _3151 = _2871;
                float _3152 = _2873;
                float _3153 = _2875;
                float _3154 = _2877;
                float _3155 = _2879;
                float _3156 = _2881;
                uint _3157 = _2888;
                uint _3166;
                bool _3167;
                for (;;)
                {
                    _3166 = texelFetch(g_lightClassification, int((((_2764 << 5u) + (_2750 << 9u)) + (_3157 << 2u)) >> 2u)).x;
                    _3167 = _3166 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3167)
                    {
                        frontier_phi_77_pred = _3156;
                        frontier_phi_77_pred_1 = _3155;
                        frontier_phi_77_pred_2 = _3154;
                        frontier_phi_77_pred_3 = _3153;
                        frontier_phi_77_pred_4 = _3152;
                        frontier_phi_77_pred_5 = _3151;
                    }
                    else
                    {
                        float _3360;
                        float _3361;
                        float _3362;
                        float _3363;
                        float _3364;
                        float _3365;
                        float _3654;
                        float _3655;
                        float _3656;
                        float _3657;
                        float _3658;
                        float _3659;
                        float _3373 = _3151;
                        float _3374 = _3152;
                        float _3375 = _3153;
                        float _3376 = _3154;
                        float _3377 = _3155;
                        float _3378 = _3156;
                        uint _3379 = _3166;
                        uint _3380;
                        vec4 _3405;
                        float _3406;
                        vec4 _3421;
                        vec3 _3433;
                        vec4 _3448;
                        vec4 _3463;
                        float _3510;
                        bool _3511;
                        for (;;)
                        {
                            uint _3390 = ((_3157 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3379));
                            _3380 = (_3379 + 4294967295u) & _3379;
                            uint _3392 = _3390 * 40u;
                            _3405 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3392)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3392 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3392 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3392 + 3u)).x));
                            _3406 = _3405.w;
                            uint _3408 = (_3390 * 40u) + 4u;
                            _3421 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3408)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3408 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3408 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3408 + 3u)).x));
                            uint _3423 = (_3390 * 40u) + 8u;
                            _3433 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3423)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3423 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3423 + 2u)).x));
                            uint _3435 = (_3390 * 40u) + 16u;
                            _3448 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3435)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3435 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3435 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3435 + 3u)).x));
                            uint _3450 = (_3390 * 40u) + 20u;
                            _3463 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3450)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3450 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3450 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3450 + 3u)).x));
                            uint _3466 = (_3390 * 40u) + 24u;
                            vec4 _3479 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3466)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3466 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3466 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3466 + 3u)).x));
                            uint _3485 = (_3390 * 40u) + 28u;
                            vec4 _3498 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3485)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3485 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3485 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3485 + 3u)).x));
                            _3510 = fma(_2726, _3498.z, fma(_2725, _3498.y, _3498.x * _2724)) + _3498.w;
                            _3511 = !((fma(_2726, _3479.z, fma(_2725, _3479.y, _3479.x * _2724)) + _3479.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3511)
                            {
                                float _3538 = _3405.x - _2724;
                                float _3539 = _3405.y - _2725;
                                float _3540 = _3405.z - _2726;
                                float _3541 = dot(vec3(_3538, _3539, _3540), vec3(_3538, _3539, _3540));
                                float _3544 = inversesqrt(_3541);
                                float _3545 = _3544 * _3538;
                                float _3546 = _3544 * _3539;
                                float _3547 = _3544 * _3540;
                                float _3551 = 1.0 - (_3541 / (_3406 * _3406));
                                float _4678 = isnan(0.0) ? _3551 : (isnan(_3551) ? 0.0 : max(_3551, 0.0));
                                float _3552 = isnan(1.0) ? _4678 : (isnan(_4678) ? 1.0 : min(_4678, 1.0));
                                float _3556 = sqrt(_3541) * _3421.w;
                                float _3558 = 1.39999997615814208984375 / (_3556 + 1.39999997615814208984375);
                                float _3559 = _3558 * _3558;
                                float _3562 = ((1.0 - _3559) * dot(vec3(_3545, _3546, _3547), vec3(_933, _936, _939))) + _3559;
                                float _3565 = _3556 * _3556;
                                float _3569 = (fma(_2726, _3448.z, fma(_2725, _3448.y, _3448.x * _2724)) + _3448.w) / _3510;
                                float _3570 = (fma(_2726, _3463.z, fma(_2725, _3463.y, _3463.x * _2724)) + _3463.w) / _3510;
                                float _3574 = 1.0 - dot(vec2(_3569, _3570), vec2(_3569, _3570));
                                float _4694 = isnan(0.0) ? _3574 : (isnan(_3574) ? 0.0 : max(_3574, 0.0));
                                float _3575 = isnan(1.0) ? _4694 : (isnan(_4694) ? 1.0 : min(_4694, 1.0));
                                float _3576 = _3575 * (((isnan(0.0) ? _3562 : (isnan(_3562) ? 0.0 : max(_3562, 0.0))) * _3552) / ((_3565 * 0.699999988079071044921875) + 1.0));
                                float _3588 = exp2(log2(1.0 / ((_3565 * 3.5) + 5.0)) * 0.25);
                                float _3589 = 1.0 - _1008;
                                float _3596 = sqrt(1.0 - ((1.0 - (_3589 * _3589)) * (1.0 - (_3588 * _3588))));
                                float _3597 = _3596 * _3596;
                                float _3598 = _3597 * _3597;
                                float _3599 = _3545 - _3017;
                                float _3600 = _3546 - _3018;
                                float _3601 = _3547 - _3019;
                                float _3605 = inversesqrt(dot(vec3(_3599, _3600, _3601), vec3(_3599, _3600, _3601)));
                                float _3609 = dot(vec3(_933, _936, _939), vec3((-0.0) - _3017, (-0.0) - _3018, (-0.0) - _3019));
                                float _4705 = isnan(0.0) ? _3609 : (isnan(_3609) ? 0.0 : max(_3609, 0.0));
                                float _3612 = isnan(1.0) ? _4705 : (isnan(_4705) ? 1.0 : min(_4705, 1.0));
                                float _3613 = dot(vec3(_933, _936, _939), vec3(_3605 * _3599, _3605 * _3600, _3605 * _3601));
                                float _4716 = isnan(0.0) ? _3613 : (isnan(_3613) ? 0.0 : max(_3613, 0.0));
                                float _3616 = isnan(1.0) ? _4716 : (isnan(_4716) ? 1.0 : min(_4716, 1.0));
                                float _3620 = ((_3616 * _3616) * (_3598 + (-1.0))) + 1.0;
                                float _3621 = _3558 * _3597;
                                float _3622 = _3621 * _3621;
                                float _3628 = ((1.0 - _3622) * dot(vec3(_933, _936, _939), vec3(_3545, _3546, _3547))) + _3622;
                                float _4727 = isnan(0.0) ? _3628 : (isnan(_3628) ? 0.0 : max(_3628, 0.0));
                                float _3629 = isnan(1.0) ? _4727 : (isnan(_4727) ? 1.0 : min(_4727, 1.0));
                                float _3630 = 1.0 - _3597;
                                float _3640 = (0.5 / (((_3629 * ((_3612 * _3630) + _3597)) + 9.9999999392252902907785028219223e-09) + (((_3629 * _3630) + _3597) * _3612))) * _3629;
                                float _4738 = isnan(0.0) ? _3640 : (isnan(_3640) ? 0.0 : max(_3640, 0.0));
                                float _3650 = (_3575 * _3552) * (((_3598 * 3.1415927410125732421875) * (isnan(1.0) ? _4738 : (isnan(_4738) ? 1.0 : min(_4738, 1.0)))) / ((_3620 * _3620) * ((_3565 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3576 * _3421.y;
                                frontier_phi_83_pred_1 = _3576 * _3421.x;
                                frontier_phi_83_pred_2 = _3650 * _3433.z;
                                frontier_phi_83_pred_3 = _3650 * _3433.y;
                                frontier_phi_83_pred_4 = _3650 * _3433.x;
                                frontier_phi_83_pred_5 = _3576 * _3421.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3658 = frontier_phi_83_pred;
                            _3657 = frontier_phi_83_pred_1;
                            _3656 = frontier_phi_83_pred_2;
                            _3655 = frontier_phi_83_pred_3;
                            _3654 = frontier_phi_83_pred_4;
                            _3659 = frontier_phi_83_pred_5;
                            _3363 = _3657 + _3376;
                            _3364 = _3658 + _3377;
                            _3365 = _3659 + _3378;
                            _3360 = _3654 + _3373;
                            _3361 = _3655 + _3374;
                            _3362 = _3656 + _3375;
                            if (_3380 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3373 = _3360;
                                _3374 = _3361;
                                _3375 = _3362;
                                _3376 = _3363;
                                _3377 = _3364;
                                _3378 = _3365;
                                _3379 = _3380;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3365;
                        frontier_phi_77_pred_1 = _3364;
                        frontier_phi_77_pred_2 = _3363;
                        frontier_phi_77_pred_3 = _3362;
                        frontier_phi_77_pred_4 = _3361;
                        frontier_phi_77_pred_5 = _3360;
                    }
                    _3002 = frontier_phi_77_pred;
                    _3000 = frontier_phi_77_pred_1;
                    _2998 = frontier_phi_77_pred_2;
                    _2996 = frontier_phi_77_pred_3;
                    _2994 = frontier_phi_77_pred_4;
                    _2992 = frontier_phi_77_pred_5;
                    uint _3158 = _3157 + 1u;
                    if (_3158 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3151 = _2992;
                        _3152 = _2994;
                        _3153 = _2996;
                        _3154 = _2998;
                        _3155 = _3000;
                        _3156 = _3002;
                        _3157 = _3158;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2996;
                frontier_phi_58_59_ladder_1 = _3002;
                frontier_phi_58_59_ladder_2 = _3000;
                frontier_phi_58_59_ladder_3 = _2998;
                frontier_phi_58_59_ladder_4 = _2994;
                frontier_phi_58_59_ladder_5 = _2992;
            }
            else
            {
                frontier_phi_58_59_ladder = _2875;
                frontier_phi_58_59_ladder_1 = _2881;
                frontier_phi_58_59_ladder_2 = _2879;
                frontier_phi_58_59_ladder_3 = _2877;
                frontier_phi_58_59_ladder_4 = _2873;
                frontier_phi_58_59_ladder_5 = _2871;
            }
            _2991 = frontier_phi_58_59_ladder_5;
            _2993 = frontier_phi_58_59_ladder_4;
            _2995 = frontier_phi_58_59_ladder;
            _2997 = frontier_phi_58_59_ladder_3;
            _2999 = frontier_phi_58_59_ladder_2;
            _3001 = frontier_phi_58_59_ladder_1;
        }
        float _3006 = isnan(1.0) ? _992 : (isnan(_992) ? 1.0 : min(_992, 1.0));
        _2783 = (_3006 * _2997) + _2216;
        _2785 = (_3006 * _2999) + _2218;
        _2787 = (_3006 * _3001) + _2220;
        _2789 = ((_2991 * _977) * _3006) + _2564;
        _2791 = ((_2993 * _979) * _3006) + _2566;
        _2793 = ((_2995 * _980) * _3006) + _2568;
    }
    else
    {
        _2783 = _2216;
        _2785 = _2218;
        _2787 = _2220;
        _2789 = _2564;
        _2791 = _2566;
        _2793 = _2568;
    }
    float _4754 = isnan(0.0) ? _967 : (isnan(_967) ? 0.0 : max(_967, 0.0));
    float _4765 = isnan(0.0) ? _968 : (isnan(_968) ? 0.0 : max(_968, 0.0));
    float _4776 = isnan(0.0) ? _969 : (isnan(_969) ? 0.0 : max(_969, 0.0));
    float _2810 = ((isnan(1.0) ? _4754 : (isnan(_4754) ? 1.0 : min(_4754, 1.0))) * (_2783 + ((isnan(0.0) ? _1754 : (isnan(_1754) ? 0.0 : max(_1754, 0.0))) * _992))) + ((_2789 + ((isnan(0.0) ? _2048 : (isnan(_2048) ? 0.0 : max(_2048, 0.0))) * _1833)) * cbPerFrame._m0[3u].x);
    float _2811 = ((isnan(1.0) ? _4765 : (isnan(_4765) ? 1.0 : min(_4765, 1.0))) * (_2785 + ((isnan(0.0) ? _1757 : (isnan(_1757) ? 0.0 : max(_1757, 0.0))) * _992))) + ((_2791 + ((isnan(0.0) ? _2051 : (isnan(_2051) ? 0.0 : max(_2051, 0.0))) * _1833)) * cbPerFrame._m0[3u].x);
    float _2812 = ((isnan(1.0) ? _4776 : (isnan(_4776) ? 1.0 : min(_4776, 1.0))) * (_2787 + ((isnan(0.0) ? _1760 : (isnan(_1760) ? 0.0 : max(_1760, 0.0))) * _992))) + ((_2793 + ((isnan(0.0) ? _2054 : (isnan(_2054) ? 0.0 : max(_2054, 0.0))) * _1833)) * cbPerFrame._m0[3u].x);
    uint _2813 = _952 + 6u;
    float _2821 = _914 / cbSceneParam._m0[86u].x;
    float _2822 = _915 / cbSceneParam._m0[86u].y;
    vec4 _2836 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2821, _2822, (log2((isnan(cbSceneParam._m0[77u].w) ? _837 : (isnan(_837) ? cbSceneParam._m0[77u].w : min(_837, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2838 = _2836.x;
    float _2839 = _2836.y;
    float _2840 = _2836.z;
    float _2841 = _2836.w;
    float _2933;
    float _2935;
    float _2937;
    float _2939;
    if (_837 > cbSceneParam._m0[78u].w)
    {
        float _2896 = isnan(_837) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _837 : min(cbSceneParam._m0[80u].w, _837));
        float _2897 = _2896 / _837;
        float _2908 = _2897 * _887;
        float _2909 = _888 * _2897;
        float _2910 = (-0.0) - _2909;
        float _2911 = _2897 * _889;
        float _2913 = (cbSceneParam._m0[77u].w * _2910) / _2896;
        float _2914 = _2913 + cbSceneParam._m0[79u].w;
        float _2915 = cbSceneParam._m0[79u].w - _2909;
        float _2921 = sqrt(((_2908 * _2908) + (_2909 * _2909)) + (_2911 * _2911));
        float _2924 = (1.0 - (cbSceneParam._m0[77u].w / _2896)) * _2921;
        float _2929 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2931 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3108;
        if (abs((_2910 - _2913) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3108 = ((((_2914 > 0.0) ? exp2(_2929 * _2914) : (2.0 - exp2(_2931 * _2914))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2924;
        }
        else
        {
            float _3052 = 1.0 / cbSceneParam._m0[80u].x;
            float _3053 = isnan(_2915) ? _2914 : (isnan(_2914) ? _2915 : max(_2914, _2915));
            float _3054 = isnan(_2915) ? _2914 : (isnan(_2914) ? _2915 : min(_2914, _2915));
            float _3063 = isnan(0.0) ? _3053 : (isnan(_3053) ? 0.0 : min(_3053, 0.0));
            float _3064 = isnan(0.0) ? _3054 : (isnan(_3054) ? 0.0 : min(_3054, 0.0));
            _3108 = ((abs(_2921 / _2910) * cbSceneParam._m0[80u].y) * ((((_3063 - _3064) * 2.0) - ((exp2(_2929 * (isnan(0.0) ? _3053 : (isnan(_3053) ? 0.0 : max(_3053, 0.0)))) - exp2(_2929 * (isnan(0.0) ? _3054 : (isnan(_3054) ? 0.0 : max(_3054, 0.0))))) * _3052)) - ((exp2(_2931 * _3063) - exp2(_2931 * _3064)) * _3052))) + (_2924 * cbSceneParam._m0[80u].z);
        }
        vec4 _3110 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2821, _2822, 1.0), 0.0);
        float _3119 = exp2((_3108 * (-1.44269502162933349609375)) * (1.0 - _3110.w));
        float _3120 = log2(_3119);
        float _3136 = log2(_2841);
        _2933 = (exp2(_3136 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3120 * cbSceneParam._m0[78u].x)) * _3110.x) / cbSceneParam._m0[78u].x)) + _2838;
        _2935 = (exp2(_3136 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3120 * cbSceneParam._m0[78u].y)) * _3110.y) / cbSceneParam._m0[78u].y)) + _2839;
        _2937 = (exp2(_3136 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3120 * cbSceneParam._m0[78u].z)) * _3110.z) / cbSceneParam._m0[78u].z)) + _2840;
        _2939 = _3119 * _2841;
    }
    else
    {
        _2933 = _2838;
        _2935 = _2839;
        _2937 = _2840;
        _2939 = _2841;
    }
    bool _3146;
    vec4 _2949;
    vec4 _2971;
    float _2973;
    float _2977;
    float _2978;
    float _2979;
    float _2980;
    bool _2990;
    for (;;)
    {
        _2949 = cbMatDynParam._m0[0u];
        float _2951 = roundEven(_2949.y);
        bool _2952 = _2951 == 3.0;
        float _2953 = log2(_2939);
        float _2960 = exp2(_2953 * cbSceneParam._m0[78u].x) * _2810;
        float _2961 = exp2(_2953 * cbSceneParam._m0[78u].y) * _2811;
        float _2962 = exp2(_2953 * cbSceneParam._m0[78u].z) * _2812;
        float _2969 = _903 + (-0.5);
        _2971 = cbMtdParam._m0[1u];
        _2973 = _2971.y * _2969;
        float _2976 = (_2951 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2977 = _2976 * (_2952 ? _2960 : (_2960 + (cbSceneParam._m0[72u].w * _2933)));
        _2978 = _2976 * (_2952 ? _2961 : (_2961 + (cbSceneParam._m0[72u].w * _2935)));
        _2979 = _2976 * (_2952 ? _2962 : (_2962 + (cbSceneParam._m0[72u].w * _2937)));
        _2980 = _2969 * 0.999000012874603271484375;
        _2990 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2990)
        {
            if ((cbInstanceData._m0[_952 + 7u].x + _2980) < 0.5)
            {
                _3146 = true;
                break;
            }
        }
        uint _3087 = _953 + uint(_2949.w);
        if ((cbInstanceData._m0[_3087].w < 1.0) && ((cbInstanceData._m0[_3087].w + _2980) < 0.5))
        {
            _3146 = true;
            break;
        }
        if ((_2973 + 1.0) < _2971.x)
        {
            _3146 = true;
            break;
        }
        _3146 = false;
        break;
    }
    float _3351;
    if (_3146)
    {
        discard_state = true;
        _3351 = 0.0;
    }
    else
    {
        _3351 = cbInstanceData._m0[_2813].w;
    }
    SV_Target.x = _2977;
    SV_Target.y = _2978;
    SV_Target.z = _2979;
    SV_Target.w = _3351;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2813].w;
    discard_exit();
}


