#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[20];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_19;
layout(set = 0, binding = 11) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_2;
layout(set = 0, binding = 12) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_20;
layout(set = 0, binding = 13) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_3;
layout(set = 0, binding = 14) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_5;
layout(set = 0, binding = 15) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_6;
layout(set = 0, binding = 17) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_8;
layout(set = 0, binding = 18) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_11;
layout(set = 0, binding = 3) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_12;
layout(set = 0, binding = 4) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_13;
layout(set = 0, binding = 5) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_14;
layout(set = 0, binding = 6) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_15;
layout(set = 0, binding = 7) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_16;
layout(set = 0, binding = 8) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_17;
layout(set = 0, binding = 9) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_18;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1327;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _217 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _218 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _219 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _225 = inversesqrt(dot(vec3(_217, _218, _219), vec3(_217, _218, _219)));
    float _232 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _239 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _262 = sin(cbMtdParam._m0[18u].x);
    float _263 = cos(cbMtdParam._m0[18u].x);
    float _264 = TEXCOORD.x - cbMtdParam._m0[17u].w;
    float _265 = TEXCOORD.y - cbMtdParam._m0[17u].w;
    float _273 = (cbMtdParam._m0[17u].w + cbMtdParam._m0[19u].y) + fma(_265, (-0.0) - _262, _263 * _264);
    float _275 = (cbMtdParam._m0[17u].w + cbMtdParam._m0[19u].z) + fma(_265, _263, _264 * _262);
    vec4 _288 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * _273) + cbTextureTilingScale._m0[1u].z, (_275 * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w));
    float _294 = _288.x * cbMtdParam._m0[10u].x;
    float _295 = _288.y * cbMtdParam._m0[10u].y;
    float _296 = _288.z * cbMtdParam._m0[10u].z;
    vec4 _314 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w));
    vec4 _333 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_0, SS_WrapLinear), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _358 = cbMtdParam._m0[19u].x * texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.x) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD.y) + cbTextureTilingScale._m0[13u].w)).x;
    float _369 = ((cbMtdParam._m0[15u].x * (-1.39999997615814208984375)) * (((1.0 - _333.x) * 2.0) - _358)) + 1.0;
    float _3938 = isnan(0.0) ? _369 : (isnan(_369) ? 0.0 : max(_369, 0.0));
    float _370 = isnan(1.0) ? _3938 : (isnan(_3938) ? 1.0 : min(_3938, 1.0));
    float _377 = (_370 * ((_314.x * cbMtdParam._m0[11u].x) - _294)) + _294;
    float _378 = (_370 * ((_314.y * cbMtdParam._m0[11u].y) - _295)) + _295;
    float _379 = (_370 * ((_314.z * cbMtdParam._m0[11u].z) - _296)) + _296;
    vec4 _397 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_8, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[17u].x * TEXCOORD.x) + cbTextureTilingScale._m0[17u].z, (cbTextureTilingScale._m0[17u].y * TEXCOORD.y) + cbTextureTilingScale._m0[17u].w));
    float _410 = (((((1.0 - _333.y) * 2.0) - _358) * (-1.39999997615814208984375)) * cbMtdParam._m0[18u].z) + 1.0;
    float _3949 = isnan(0.0) ? _410 : (isnan(_410) ? 0.0 : max(_410, 0.0));
    float _411 = isnan(1.0) ? _3949 : (isnan(_3949) ? 1.0 : min(_3949, 1.0));
    float _418 = (((_397.x * cbMtdParam._m0[12u].x) - _377) * _411) + _377;
    float _419 = (_411 * ((_397.y * cbMtdParam._m0[12u].y) - _378)) + _378;
    float _420 = (_411 * ((_397.z * cbMtdParam._m0[12u].z) - _379)) + _379;
    vec4 _437 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _450 = (((((1.0 - _333.z) * 2.0) - _358) * (-1.39999997615814208984375)) * cbMtdParam._m0[18u].w) + 1.0;
    float _3960 = isnan(0.0) ? _450 : (isnan(_450) ? 0.0 : max(_450, 0.0));
    float _451 = isnan(1.0) ? _3960 : (isnan(_3960) ? 1.0 : min(_3960, 1.0));
    vec4 _479 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _487 = ((((((_437.x * cbMtdParam._m0[13u].x) - _418) * _451) + _418) * 4.55000019073486328125) * cbMtdParam._m0[9u].x) * _479.x;
    float _490 = ((((_451 * ((_437.y * cbMtdParam._m0[13u].y) - _419)) + _419) * 4.55000019073486328125) * cbMtdParam._m0[9u].y) * _479.y;
    float _493 = ((((_451 * ((_437.z * cbMtdParam._m0[13u].z) - _420)) + _420) * 4.55000019073486328125) * cbMtdParam._m0[9u].z) * _479.z;
    vec4 _513 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_20, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.z) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.w) + cbTextureTilingScale._m0[12u].w));
    float _542 = (TEXCOORD_5.x - ((cbMtdParam._m0[15u].w * (1.0 - TEXCOORD_5.x)) * (texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[18u].x * TEXCOORD.z) + cbTextureTilingScale._m0[18u].z, (cbTextureTilingScale._m0[18u].y * TEXCOORD.w) + cbTextureTilingScale._m0[18u].w)).x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[15u].z + 1.0);
    float _3971 = isnan(0.0) ? _542 : (isnan(_542) ? 0.0 : max(_542, 0.0));
    float _543 = isnan(1.0) ? _3971 : (isnan(_3971) ? 1.0 : min(_3971, 1.0));
    float _550 = (_543 * ((_513.x * cbMtdParam._m0[14u].x) - _487)) + _487;
    float _551 = (_543 * ((_513.y * cbMtdParam._m0[14u].y) - _490)) + _490;
    float _552 = (_543 * ((_513.z * cbMtdParam._m0[14u].z) - _493)) + _493;
    vec4 _565 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * _273) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _275) + cbTextureTilingScale._m0[5u].w));
    float _567 = _565.x;
    float _585 = ((texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w)).x - _567) * _370) + _567;
    float _602 = ((texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w)).x - _585) * _411) + _585;
    float _619 = ((texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w)).x - _602) * _451) + _602;
    float _623 = (_619 - (_619 * TEXCOORD_5.x)) * cbMtdParam._m0[18u].y;
    vec4 _636 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.z) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.w) + cbTextureTilingScale._m0[3u].w));
    vec4 _658 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[14u].x * _273) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _275) + cbTextureTilingScale._m0[14u].w));
    float _660 = _658.x;
    float _661 = _658.y;
    float _664 = cbMtdParam._m0[17u].y * _658.z;
    vec4 _676 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * TEXCOORD.x) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * TEXCOORD.y) + cbTextureTilingScale._m0[15u].w));
    float _685 = (((cbMtdParam._m0[17u].x * _676.z) - _664) * _370) + _664;
    vec4 _698 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_15, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _710 = (((cbMtdParam._m0[16u].w * _698.z) - _685) * _411) + _685;
    vec4 _723 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _732 = (((cbMtdParam._m0[16u].z * _723.z) - _710) * _451) + _710;
    float _737 = ((cbMtdParam._m0[16u].x * TEXCOORD_5.x) * ((_636.z * cbMtdParam._m0[17u].z) - _732)) + _732;
    float _742 = ((_676.x - _660) * _370) + _660;
    float _743 = ((_676.y - _661) * _370) + _661;
    float _748 = ((_698.x - _742) * _411) + _742;
    float _749 = ((_698.y - _743) * _411) + _743;
    float _758 = ((((_723.x - _748) * _451) + _748) * 2.0) + (-1.0);
    float _759 = ((((_723.y - _749) * _451) + _749) * 2.0) + (-1.0);
    float _760 = dot(vec2(_758, _759), vec2(_758, _759));
    float _3982 = isnan(0.0) ? _760 : (isnan(_760) ? 0.0 : max(_760, 0.0));
    float _765 = sqrt(1.0 - (isnan(1.0) ? _3982 : (isnan(_3982) ? 1.0 : min(_3982, 1.0))));
    float _771 = ((((_636.x * 2.0) + (-1.0)) * TEXCOORD_5.x) * cbMtdParam._m0[15u].y) + _758;
    float _772 = ((((_636.y * 2.0) + (-1.0)) * TEXCOORD_5.y) * cbMtdParam._m0[15u].y) + _759;
    float _775 = fma(_765, _232 * NORMAL.x, fma(_772, _239 * TANGENT.x, (_225 * _217) * _771));
    float _778 = fma(_765, _232 * NORMAL.y, fma(_772, _239 * TANGENT.y, (_225 * _218) * _771));
    float _781 = fma(_765, _232 * NORMAL.z, fma(_772, _239 * TANGENT.z, (_225 * _219) * _771));
    float _785 = inversesqrt(dot(vec3(_775, _778, _781), vec3(_775, _778, _781)));
    float _786 = _785 * _775;
    float _787 = _785 * _778;
    float _788 = _785 * _781;
    float _3993 = isnan(0.0) ? _737 : (isnan(_737) ? 0.0 : max(_737, 0.0));
    float _789 = isnan(1.0) ? _3993 : (isnan(_3993) ? 1.0 : min(_3993, 1.0));
    float _4004 = isnan(0.0) ? _550 : (isnan(_550) ? 0.0 : max(_550, 0.0));
    float _4015 = isnan(0.0) ? _551 : (isnan(_551) ? 0.0 : max(_551, 0.0));
    float _4026 = isnan(0.0) ? _552 : (isnan(_552) ? 0.0 : max(_552, 0.0));
    float _4037 = isnan(0.0) ? _623 : (isnan(_623) ? 0.0 : max(_623, 0.0));
    float _793 = isnan(1.0) ? _4037 : (isnan(_4037) ? 1.0 : min(_4037, 1.0));
    float _809 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _849 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _859 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _849);
    float _860 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _849);
    float _861 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _849);
    float _865 = inversesqrt(dot(vec3(_859, _860, _861), vec3(_859, _860, _861)));
    float _866 = _859 * _865;
    float _867 = _860 * _865;
    float _868 = _861 * _865;
    float _874 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _875 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _893 = fma(_788, cbSceneParam._m0[5u].z, fma(_787, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _786));
    float _896 = fma(_788, cbSceneParam._m0[6u].z, fma(_787, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _786));
    float _899 = fma(_788, cbSceneParam._m0[7u].z, fma(_787, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _786));
    uint _912 = uint(roundEven(NORMAL.w)) * 13u;
    uint _914 = (_912 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _920 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4004 : (isnan(_4004) ? 1.0 : min(_4004, 1.0)))) * cbInstanceData._m0[_914].x;
    float _921 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4015 : (isnan(_4015) ? 1.0 : min(_4015, 1.0)))) * cbInstanceData._m0[_914].y;
    float _922 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4026 : (isnan(_4026) ? 1.0 : min(_4026, 1.0)))) * cbInstanceData._m0[_914].z;
    float _4048 = isnan(0.0) ? _920 : (isnan(_920) ? 0.0 : max(_920, 0.0));
    float _923 = isnan(1.0) ? _4048 : (isnan(_4048) ? 1.0 : min(_4048, 1.0));
    float _4059 = isnan(0.0) ? _921 : (isnan(_921) ? 0.0 : max(_921, 0.0));
    float _924 = isnan(1.0) ? _4059 : (isnan(_4059) ? 1.0 : min(_4059, 1.0));
    float _4070 = isnan(0.0) ? _922 : (isnan(_922) ? 0.0 : max(_922, 0.0));
    float _925 = isnan(1.0) ? _4070 : (isnan(_4070) ? 1.0 : min(_4070, 1.0));
    float _926 = 1.0 - _793;
    float _927 = _923 * _926;
    float _928 = _924 * _926;
    float _929 = _925 * _926;
    float _934 = (_923 + (-0.039999999105930328369140625)) * _793;
    float _935 = (_924 + (-0.039999999105930328369140625)) * _793;
    float _936 = (_925 + (-0.039999999105930328369140625)) * _793;
    float _937 = _934 + 0.039999999105930328369140625;
    float _939 = _935 + 0.039999999105930328369140625;
    float _940 = _936 + 0.039999999105930328369140625;
    vec4 _949 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _874, cbSceneParam._m0[86u].y * _875));
    float _952 = _949.x * TEXCOORD_5.w;
    float _953 = dot(vec3(_786, _787, _788), vec3(_866, _867, _868));
    float _956 = _953 * 2.0;
    float _960 = (_956 * _786) - _866;
    float _961 = (_956 * _787) - _867;
    float _962 = (_956 * _788) - _868;
    float _966 = abs(dot(vec3(_866, _867, _868), vec3(_786, _787, _788)));
    float _4081 = isnan(0.0) ? _966 : (isnan(_966) ? 0.0 : max(_966, 0.0));
    float _968 = sqrt(_789);
    float _981 = exp2((_968 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4081 : (isnan(_4081) ? 1.0 : min(_4081, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_968 * 3.0));
    float _987 = (1.0 - _981) * ((_968 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _988 = _981 * _968;
    float _1016 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1020 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1024 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1326;
    float _1328;
    float _1329;
    float _1330;
    float _1331;
    float _1332;
    float _1333;
    float _1334;
    float _1335;
    float _1336;
    float _1337;
    float _1338;
    float _1339;
    float _1340;
    float _1341;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1051 = fma(_1024, cbModelParam._m0[26u].z, fma(_1020, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1016));
        float _1055 = fma(_1024, cbModelParam._m0[27u].z, fma(_1020, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1016));
        float _1059 = fma(_1024, cbModelParam._m0[28u].z, fma(_1020, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1016));
        float _1084 = _1016 + _786;
        float _1085 = _1020 + _787;
        float _1086 = _1024 + _788;
        float _1096 = fma(_1086, cbModelParam._m0[26u].z, fma(_1085, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1084)) - _1051;
        float _1097 = fma(_1086, cbModelParam._m0[27u].z, fma(_1085, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1084)) - _1055;
        float _1098 = fma(_1086, cbModelParam._m0[28u].z, fma(_1085, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1084)) - _1059;
        float _1102 = inversesqrt(dot(vec3(_1096, _1097, _1098), vec3(_1096, _1097, _1098)));
        float _1115 = ((_1102 * _1096) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1051 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1116 = ((_1102 * _1097) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1055 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1117 = ((_1102 * _1098) / cbModelParam._m0[34u].z) + ((((((_1059 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1120 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1115, _1116, _1117), 0.0);
        vec4 _1127 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1115, _1116, _1117), 0.0);
        vec4 _1134 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1115, _1116, _1117), 0.0);
        vec4 _1141 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1115, _1116, _1117), 0.0);
        float _1154 = exp2((_1120.w + (-0.5)) * 20.0) * 2.0;
        float _1155 = _1154 * (_1120.x + (-0.5));
        float _1156 = _1154 * (_1120.y + (-0.5));
        float _1157 = _1154 * (_1120.z + (-0.5));
        float _1164 = exp2((_1127.w + (-0.5)) * 20.0) * 2.0;
        float _1165 = _1164 * (_1127.x + (-0.5));
        float _1166 = _1164 * (_1127.y + (-0.5));
        float _1167 = _1164 * (_1127.z + (-0.5));
        float _1174 = exp2((_1134.w + (-0.5)) * 20.0) * 2.0;
        float _1175 = _1174 * (_1134.x + (-0.5));
        float _1176 = _1174 * (_1134.y + (-0.5));
        float _1177 = _1174 * (_1134.z + (-0.5));
        float _1184 = exp2((_1141.w + (-0.5)) * 20.0) * 2.0;
        float _1185 = _1184 * (_1141.x + (-0.5));
        float _1186 = _1184 * (_1141.y + (-0.5));
        float _1187 = _1184 * (_1141.z + (-0.5));
        float _1188 = isnan(0.0) ? _1185 : (isnan(_1185) ? 0.0 : max(_1185, 0.0));
        float _1189 = isnan(0.0) ? _1186 : (isnan(_1186) ? 0.0 : max(_1186, 0.0));
        float _1190 = isnan(0.0) ? _1187 : (isnan(_1187) ? 0.0 : max(_1187, 0.0));
        float _1191 = _1155 * 0.5;
        float _1192 = _1165 * 0.5;
        float _1193 = _1175 * 0.5;
        float _1194 = dot(vec3(_1191, _1192, _1193), vec3(_1191, _1192, _1193));
        float _1199 = (_1194 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1194);
        float _1208 = (dot(vec3(_786, _787, _788), vec3(_1199 * _1191, _1199 * _1192, _1199 * _1193)) + 1.0) * 0.5;
        float _4107 = isnan(0.0) ? _1208 : (isnan(_1208) ? 0.0 : max(_1208, 0.0));
        float _1218 = sqrt(((_1192 * _1192) + (_1191 * _1191)) + (_1193 * _1193)) / (_1188 + 9.9999997473787516355514526367188e-06);
        float _4118 = isnan(0.0) ? _1218 : (isnan(_1218) ? 0.0 : max(_1218, 0.0));
        float _1219 = isnan(1.0) ? _4118 : (isnan(_4118) ? 1.0 : min(_4118, 1.0));
        float _1220 = _1219 * 2.0;
        float _1224 = (1.0 - _1219) / (_1219 + 1.0);
        float _4129 = isnan(0.0) ? _1224 : (isnan(_1224) ? 0.0 : max(_1224, 0.0));
        float _1225 = isnan(1.0) ? _4129 : (isnan(_4129) ? 1.0 : min(_4129, 1.0));
        float _1234 = ((((1.0 - _1225) * (_1220 + 2.0)) * exp2(log2(isnan(1.0) ? _4107 : (isnan(_4107) ? 1.0 : min(_4107, 1.0))) * (_1220 + 1.0))) + _1225) * _1188;
        float _1235 = _1156 * 0.5;
        float _1236 = _1166 * 0.5;
        float _1237 = _1176 * 0.5;
        float _1238 = dot(vec3(_1235, _1236, _1237), vec3(_1235, _1236, _1237));
        float _1243 = (_1238 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1238);
        float _1251 = (dot(vec3(_786, _787, _788), vec3(_1243 * _1235, _1243 * _1236, _1243 * _1237)) + 1.0) * 0.5;
        float _4140 = isnan(0.0) ? _1251 : (isnan(_1251) ? 0.0 : max(_1251, 0.0));
        float _1260 = sqrt(((_1236 * _1236) + (_1235 * _1235)) + (_1237 * _1237)) / (_1189 + 9.9999997473787516355514526367188e-06);
        float _4151 = isnan(0.0) ? _1260 : (isnan(_1260) ? 0.0 : max(_1260, 0.0));
        float _1261 = isnan(1.0) ? _4151 : (isnan(_4151) ? 1.0 : min(_4151, 1.0));
        float _1262 = _1261 * 2.0;
        float _1266 = (1.0 - _1261) / (_1261 + 1.0);
        float _4162 = isnan(0.0) ? _1266 : (isnan(_1266) ? 0.0 : max(_1266, 0.0));
        float _1267 = isnan(1.0) ? _4162 : (isnan(_4162) ? 1.0 : min(_4162, 1.0));
        float _1276 = ((((1.0 - _1267) * (_1262 + 2.0)) * exp2(log2(isnan(1.0) ? _4140 : (isnan(_4140) ? 1.0 : min(_4140, 1.0))) * (_1262 + 1.0))) + _1267) * _1189;
        float _1277 = _1157 * 0.5;
        float _1278 = _1167 * 0.5;
        float _1279 = _1177 * 0.5;
        float _1280 = dot(vec3(_1277, _1278, _1279), vec3(_1277, _1278, _1279));
        float _1285 = (_1280 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1280);
        float _1293 = (dot(vec3(_786, _787, _788), vec3(_1285 * _1277, _1285 * _1278, _1285 * _1279)) + 1.0) * 0.5;
        float _4173 = isnan(0.0) ? _1293 : (isnan(_1293) ? 0.0 : max(_1293, 0.0));
        float _1302 = sqrt(((_1278 * _1278) + (_1277 * _1277)) + (_1279 * _1279)) / (_1190 + 9.9999997473787516355514526367188e-06);
        float _4184 = isnan(0.0) ? _1302 : (isnan(_1302) ? 0.0 : max(_1302, 0.0));
        float _1303 = isnan(1.0) ? _4184 : (isnan(_4184) ? 1.0 : min(_4184, 1.0));
        float _1304 = _1303 * 2.0;
        float _1308 = (1.0 - _1303) / (_1303 + 1.0);
        float _4195 = isnan(0.0) ? _1308 : (isnan(_1308) ? 0.0 : max(_1308, 0.0));
        float _1309 = isnan(1.0) ? _4195 : (isnan(_4195) ? 1.0 : min(_4195, 1.0));
        float _1318 = ((((1.0 - _1309) * (_1304 + 2.0)) * exp2(log2(isnan(1.0) ? _4173 : (isnan(_4173) ? 1.0 : min(_4173, 1.0))) * (_1304 + 1.0))) + _1309) * _1190;
        _1326 = _1157;
        _1328 = _1156;
        _1329 = _1155;
        _1330 = _1167;
        _1331 = _1166;
        _1332 = _1165;
        _1333 = _1177;
        _1334 = _1176;
        _1335 = _1175;
        _1336 = _1190;
        _1337 = _1189;
        _1338 = _1188;
        _1339 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1234 : (isnan(_1234) ? 0.0 : max(_1234, 0.0)));
        _1340 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1276 : (isnan(_1276) ? 0.0 : max(_1276, 0.0)));
        _1341 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1318 : (isnan(_1318) ? 0.0 : max(_1318, 0.0)));
    }
    else
    {
        _1326 = _1327;
        _1328 = _1327;
        _1329 = _1327;
        _1330 = _1327;
        _1331 = _1327;
        _1332 = _1327;
        _1333 = _1327;
        _1334 = _1327;
        _1335 = _1327;
        _1336 = _1327;
        _1337 = _1327;
        _1338 = _1327;
        _1339 = 0.0;
        _1340 = 0.0;
        _1341 = 0.0;
    }
    float _1636;
    float _1637;
    float _1638;
    float _1639;
    float _1640;
    float _1641;
    float _1642;
    float _1643;
    float _1644;
    float _1645;
    float _1646;
    float _1647;
    float _1648;
    float _1649;
    float _1650;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1367 = fma(_1024, cbModelParam._m0[30u].z, fma(_1020, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1016));
        float _1371 = fma(_1024, cbModelParam._m0[31u].z, fma(_1020, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1016));
        float _1375 = fma(_1024, cbModelParam._m0[32u].z, fma(_1020, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1016));
        float _1398 = _1016 + _786;
        float _1399 = _1020 + _787;
        float _1400 = _1024 + _788;
        float _1410 = fma(_1400, cbModelParam._m0[30u].z, fma(_1399, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1398)) - _1367;
        float _1411 = fma(_1400, cbModelParam._m0[31u].z, fma(_1399, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1398)) - _1371;
        float _1412 = fma(_1400, cbModelParam._m0[32u].z, fma(_1399, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1398)) - _1375;
        float _1416 = inversesqrt(dot(vec3(_1410, _1411, _1412), vec3(_1410, _1411, _1412)));
        float _1429 = ((_1416 * _1410) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1367 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1430 = ((_1416 * _1411) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1371 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1431 = ((_1416 * _1412) / cbModelParam._m0[35u].z) + ((((((_1375 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1433 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1429, _1430, _1431), 0.0);
        vec4 _1440 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1429, _1430, _1431), 0.0);
        vec4 _1447 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1429, _1430, _1431), 0.0);
        vec4 _1454 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1429, _1430, _1431), 0.0);
        float _1466 = exp2((_1433.w + (-0.5)) * 20.0) * 2.0;
        float _1467 = _1466 * (_1433.x + (-0.5));
        float _1468 = _1466 * (_1433.y + (-0.5));
        float _1469 = _1466 * (_1433.z + (-0.5));
        float _1476 = exp2((_1440.w + (-0.5)) * 20.0) * 2.0;
        float _1477 = _1476 * (_1440.x + (-0.5));
        float _1478 = _1476 * (_1440.y + (-0.5));
        float _1479 = _1476 * (_1440.z + (-0.5));
        float _1486 = exp2((_1447.w + (-0.5)) * 20.0) * 2.0;
        float _1487 = _1486 * (_1447.x + (-0.5));
        float _1488 = _1486 * (_1447.y + (-0.5));
        float _1489 = _1486 * (_1447.z + (-0.5));
        float _1496 = exp2((_1454.w + (-0.5)) * 20.0) * 2.0;
        float _1497 = _1496 * (_1454.x + (-0.5));
        float _1498 = _1496 * (_1454.y + (-0.5));
        float _1499 = _1496 * (_1454.z + (-0.5));
        float _1500 = isnan(0.0) ? _1497 : (isnan(_1497) ? 0.0 : max(_1497, 0.0));
        float _1501 = isnan(0.0) ? _1498 : (isnan(_1498) ? 0.0 : max(_1498, 0.0));
        float _1502 = isnan(0.0) ? _1499 : (isnan(_1499) ? 0.0 : max(_1499, 0.0));
        float _1503 = _1467 * 0.5;
        float _1504 = _1477 * 0.5;
        float _1505 = _1487 * 0.5;
        float _1506 = dot(vec3(_1503, _1504, _1505), vec3(_1503, _1504, _1505));
        float _1511 = (_1506 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1506);
        float _1519 = (dot(vec3(_786, _787, _788), vec3(_1511 * _1503, _1511 * _1504, _1511 * _1505)) + 1.0) * 0.5;
        float _4236 = isnan(0.0) ? _1519 : (isnan(_1519) ? 0.0 : max(_1519, 0.0));
        float _1528 = sqrt(((_1504 * _1504) + (_1503 * _1503)) + (_1505 * _1505)) / (_1500 + 9.9999997473787516355514526367188e-06);
        float _4247 = isnan(0.0) ? _1528 : (isnan(_1528) ? 0.0 : max(_1528, 0.0));
        float _1529 = isnan(1.0) ? _4247 : (isnan(_4247) ? 1.0 : min(_4247, 1.0));
        float _1530 = _1529 * 2.0;
        float _1534 = (1.0 - _1529) / (_1529 + 1.0);
        float _4258 = isnan(0.0) ? _1534 : (isnan(_1534) ? 0.0 : max(_1534, 0.0));
        float _1535 = isnan(1.0) ? _4258 : (isnan(_4258) ? 1.0 : min(_4258, 1.0));
        float _1544 = ((((1.0 - _1535) * (_1530 + 2.0)) * exp2(log2(isnan(1.0) ? _4236 : (isnan(_4236) ? 1.0 : min(_4236, 1.0))) * (_1530 + 1.0))) + _1535) * _1500;
        float _1545 = _1468 * 0.5;
        float _1546 = _1478 * 0.5;
        float _1547 = _1488 * 0.5;
        float _1548 = dot(vec3(_1545, _1546, _1547), vec3(_1545, _1546, _1547));
        float _1553 = (_1548 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1548);
        float _1561 = (dot(vec3(_786, _787, _788), vec3(_1553 * _1545, _1553 * _1546, _1553 * _1547)) + 1.0) * 0.5;
        float _4269 = isnan(0.0) ? _1561 : (isnan(_1561) ? 0.0 : max(_1561, 0.0));
        float _1570 = sqrt(((_1546 * _1546) + (_1545 * _1545)) + (_1547 * _1547)) / (_1501 + 9.9999997473787516355514526367188e-06);
        float _4280 = isnan(0.0) ? _1570 : (isnan(_1570) ? 0.0 : max(_1570, 0.0));
        float _1571 = isnan(1.0) ? _4280 : (isnan(_4280) ? 1.0 : min(_4280, 1.0));
        float _1572 = _1571 * 2.0;
        float _1576 = (1.0 - _1571) / (_1571 + 1.0);
        float _4291 = isnan(0.0) ? _1576 : (isnan(_1576) ? 0.0 : max(_1576, 0.0));
        float _1577 = isnan(1.0) ? _4291 : (isnan(_4291) ? 1.0 : min(_4291, 1.0));
        float _1586 = ((((1.0 - _1577) * (_1572 + 2.0)) * exp2(log2(isnan(1.0) ? _4269 : (isnan(_4269) ? 1.0 : min(_4269, 1.0))) * (_1572 + 1.0))) + _1577) * _1501;
        float _1587 = _1469 * 0.5;
        float _1588 = _1479 * 0.5;
        float _1589 = _1489 * 0.5;
        float _1590 = dot(vec3(_1587, _1588, _1589), vec3(_1587, _1588, _1589));
        float _1595 = (_1590 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1590);
        float _1603 = (dot(vec3(_786, _787, _788), vec3(_1595 * _1587, _1595 * _1588, _1595 * _1589)) + 1.0) * 0.5;
        float _4302 = isnan(0.0) ? _1603 : (isnan(_1603) ? 0.0 : max(_1603, 0.0));
        float _1612 = sqrt(((_1588 * _1588) + (_1587 * _1587)) + (_1589 * _1589)) / (_1502 + 9.9999997473787516355514526367188e-06);
        float _4313 = isnan(0.0) ? _1612 : (isnan(_1612) ? 0.0 : max(_1612, 0.0));
        float _1613 = isnan(1.0) ? _4313 : (isnan(_4313) ? 1.0 : min(_4313, 1.0));
        float _1614 = _1613 * 2.0;
        float _1618 = (1.0 - _1613) / (_1613 + 1.0);
        float _4324 = isnan(0.0) ? _1618 : (isnan(_1618) ? 0.0 : max(_1618, 0.0));
        float _1619 = isnan(1.0) ? _4324 : (isnan(_4324) ? 1.0 : min(_4324, 1.0));
        float _1628 = ((((1.0 - _1619) * (_1614 + 2.0)) * exp2(log2(isnan(1.0) ? _4302 : (isnan(_4302) ? 1.0 : min(_4302, 1.0))) * (_1614 + 1.0))) + _1619) * _1502;
        _1636 = _1469;
        _1637 = _1468;
        _1638 = _1467;
        _1639 = _1479;
        _1640 = _1478;
        _1641 = _1477;
        _1642 = _1489;
        _1643 = _1488;
        _1644 = _1487;
        _1645 = _1502;
        _1646 = _1501;
        _1647 = _1500;
        _1648 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1544 : (isnan(_1544) ? 0.0 : max(_1544, 0.0)));
        _1649 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1586 : (isnan(_1586) ? 0.0 : max(_1586, 0.0)));
        _1650 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1628 : (isnan(_1628) ? 0.0 : max(_1628, 0.0)));
    }
    else
    {
        _1636 = _1327;
        _1637 = _1327;
        _1638 = _1327;
        _1639 = _1327;
        _1640 = _1327;
        _1641 = _1327;
        _1642 = _1327;
        _1643 = _1327;
        _1644 = _1327;
        _1645 = _1327;
        _1646 = _1327;
        _1647 = _1327;
        _1648 = 0.0;
        _1649 = 0.0;
        _1650 = 0.0;
    }
    float _1660 = (cbModelParam._m0[1u].x * (_1648 - _1339)) + _1339;
    float _1661 = (cbModelParam._m0[1u].x * (_1649 - _1340)) + _1340;
    float _1662 = (cbModelParam._m0[1u].x * (_1650 - _1341)) + _1341;
    float _1683 = fma(_1662, cbSceneParam._m0[89u].z, fma(_1661, cbSceneParam._m0[89u].y, _1660 * cbSceneParam._m0[89u].x));
    float _1686 = fma(_1662, cbSceneParam._m0[90u].z, fma(_1661, cbSceneParam._m0[90u].y, _1660 * cbSceneParam._m0[90u].x));
    float _1689 = fma(_1662, cbSceneParam._m0[91u].z, fma(_1661, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1660));
    float _1704 = _960 * 0.5;
    float _1705 = _961 * 0.5;
    float _1706 = _962 * 0.5;
    float _1707 = dot(vec4(_1704, _1705, _1706, 1.0), vec4(_1638, _1641, _1644, _1647));
    float _1710 = dot(vec4(_1704, _1705, _1706, 1.0), vec4(_1637, _1640, _1643, _1646));
    float _1713 = dot(vec4(_1704, _1705, _1706, 1.0), vec4(_1636, _1639, _1642, _1645));
    float _1747;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1720 = dot(vec4(_1704, _1705, _1706, 1.0), vec4(_1326, _1330, _1333, _1336));
        float _1724 = dot(vec4(_1704, _1705, _1706, 1.0), vec4(_1328, _1331, _1334, _1337));
        float _1728 = dot(vec4(_1704, _1705, _1706, 1.0), vec4(_1329, _1332, _1335, _1338));
        float _1735 = dot(vec4(cbModelParam._m0[39u]), vec4(_1704, _1705, _1706, 1.0));
        _1747 = dot(vec3(isnan(0.0) ? _1728 : (isnan(_1728) ? 0.0 : max(_1728, 0.0)), isnan(0.0) ? _1724 : (isnan(_1724) ? 0.0 : max(_1724, 0.0)), isnan(0.0) ? _1720 : (isnan(_1720) ? 0.0 : max(_1720, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1735) ? 0.0 : (isnan(0.0) ? _1735 : max(0.0, _1735))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1747 = 1.0;
    }
    float _1758;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1749 = dot(vec4(cbModelParam._m0[40u]), vec4(_1704, _1705, _1706, 1.0));
        _1758 = dot(vec3(isnan(0.0) ? _1707 : (isnan(_1707) ? 0.0 : max(_1707, 0.0)), isnan(0.0) ? _1710 : (isnan(_1710) ? 0.0 : max(_1710, 0.0)), isnan(0.0) ? _1713 : (isnan(_1713) ? 0.0 : max(_1713, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1749) ? 0.0 : (isnan(0.0) ? _1749 : max(0.0, _1749))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1758 = 1.0;
    }
    float _1762 = (_1758 * cbModelParam._m0[1u].x) + (_1747 * (1.0 - cbModelParam._m0[1u].x));
    float _1772 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _789);
    float _1773 = isnan(_1772) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1772 : min(cbModelParam._m0[25u].z, _1772));
    float _1853;
    float _1855;
    float _1857;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1820 = fma(_1024, cbModelParam._m0[13u].z, fma(_1020, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1016)) + cbModelParam._m0[13u].w;
        float _1824 = fma(_1024, cbModelParam._m0[14u].z, fma(_1020, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1016)) + cbModelParam._m0[14u].w;
        float _1828 = fma(_1024, cbModelParam._m0[15u].z, fma(_1020, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1016)) + cbModelParam._m0[15u].w;
        float _1831 = fma(_962, cbModelParam._m0[13u].z, fma(_961, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _960));
        float _1834 = fma(_962, cbModelParam._m0[14u].z, fma(_961, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _960));
        float _1837 = fma(_962, cbModelParam._m0[15u].z, fma(_961, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _960));
        float _1865;
        if (_1831 > 0.0)
        {
            _1865 = abs((1.0 - _1820) / _1831);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1831 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1820 + 1.0) / _1831);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1865 = frontier_phi_14_12_ladder;
        }
        float _2038;
        if (_1834 > 0.0)
        {
            _2038 = abs((1.0 - _1824) / _1834);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1834 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1824 + 1.0) / _1834);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2038 = frontier_phi_23_19_ladder;
        }
        float _2333;
        if (_1837 > 0.0)
        {
            _2333 = abs((1.0 - _1828) / _1837);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1837 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1828 + 1.0) / _1837);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2333 = frontier_phi_35_30_ladder;
        }
        float _2335 = isnan(_2038) ? _1865 : (isnan(_1865) ? _2038 : min(_1865, _2038));
        float _2336 = isnan(_2333) ? _2335 : (isnan(_2335) ? _2333 : min(_2335, _2333));
        float _2340 = (_2336 * _1831) + _1820;
        float _2341 = (_2336 * _1834) + _1824;
        float _2342 = (_2336 * _1837) + _1828;
        float _2343 = _2336 * 9.9999997473787516355514526367188e-05;
        float _2345 = (-1.0) - _2343;
        float _2347 = _2343 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2342 > _2347) || ((_2342 < _2345) || ((_2341 > _2347) || ((_2341 < _2345) || ((_2340 < _2345) || (_2340 > _2347))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2487 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2342, cbModelParam._m0[9u].z, fma(_2341, cbModelParam._m0[9u].y, _2340 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2342, cbModelParam._m0[10u].z, fma(_2341, cbModelParam._m0[10u].y, _2340 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2342, cbModelParam._m0[11u].z, fma(_2341, cbModelParam._m0[11u].y, _2340 * cbModelParam._m0[11u].x))), _1773);
            frontier_phi_13_35_ladder = _2487.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2487.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2487.x * cbModelParam._m0[1u].y;
        }
        _1853 = frontier_phi_13_35_ladder_2;
        _1855 = frontier_phi_13_35_ladder_1;
        _1857 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1841 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_960, _961, _962), _1773);
        _1853 = _1841.x * cbModelParam._m0[1u].y;
        _1855 = _1841.y * cbModelParam._m0[1u].y;
        _1857 = _1841.z * cbModelParam._m0[1u].y;
    }
    float _1861 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _789);
    float _1862 = isnan(_1861) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1861 : min(cbModelParam._m0[25u].w, _1861));
    float _1953;
    float _1955;
    float _1957;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1917 = fma(_1024, cbModelParam._m0[21u].z, fma(_1020, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1016)) + cbModelParam._m0[21u].w;
        float _1921 = fma(_1024, cbModelParam._m0[22u].z, fma(_1020, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1016)) + cbModelParam._m0[22u].w;
        float _1925 = fma(_1024, cbModelParam._m0[23u].z, fma(_1020, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1016)) + cbModelParam._m0[23u].w;
        float _1928 = fma(_962, cbModelParam._m0[21u].z, fma(_961, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _960));
        float _1931 = fma(_962, cbModelParam._m0[22u].z, fma(_961, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _960));
        float _1934 = fma(_962, cbModelParam._m0[23u].z, fma(_961, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _960));
        float _2043;
        if (_1928 > 0.0)
        {
            _2043 = abs((1.0 - _1917) / _1928);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1928 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1917 + 1.0) / _1928);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2043 = frontier_phi_25_21_ladder;
        }
        float _2360;
        if (_1931 > 0.0)
        {
            _2360 = abs((1.0 - _1921) / _1931);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1931 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1921 + 1.0) / _1931);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2360 = frontier_phi_37_32_ladder;
        }
        float _2698;
        if (_1934 > 0.0)
        {
            _2698 = abs((1.0 - _1925) / _1934);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1934 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1925 + 1.0) / _1934);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2698 = frontier_phi_47_44_ladder;
        }
        float _2700 = isnan(_2360) ? _2043 : (isnan(_2043) ? _2360 : min(_2043, _2360));
        float _2701 = isnan(_2698) ? _2700 : (isnan(_2700) ? _2698 : min(_2700, _2698));
        float _2705 = (_2701 * _1928) + _1917;
        float _2706 = (_2701 * _1931) + _1921;
        float _2707 = (_2701 * _1934) + _1925;
        float _2708 = _2701 * 9.9999997473787516355514526367188e-05;
        float _2709 = (-1.0) - _2708;
        float _2711 = _2708 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2707 > _2711) || ((_2707 < _2709) || ((_2706 > _2711) || ((_2706 < _2709) || ((_2705 < _2709) || (_2705 > _2711))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2829 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2707, cbModelParam._m0[17u].z, fma(_2706, cbModelParam._m0[17u].y, _2705 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2707, cbModelParam._m0[18u].z, fma(_2706, cbModelParam._m0[18u].y, _2705 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2707, cbModelParam._m0[19u].z, fma(_2706, cbModelParam._m0[19u].y, _2705 * cbModelParam._m0[19u].x))), _1862);
            frontier_phi_22_47_ladder = _2829.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2829.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2829.x * cbModelParam._m0[1u].z;
        }
        _1953 = frontier_phi_22_47_ladder_2;
        _1955 = frontier_phi_22_47_ladder_1;
        _1957 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1937 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_960, _961, _962), _1862);
        _1953 = _1937.x * cbModelParam._m0[1u].z;
        _1955 = _1937.y * cbModelParam._m0[1u].z;
        _1957 = _1937.z * cbModelParam._m0[1u].z;
    }
    float _1970 = (((_987 * _937) + _988) * _952) * ((cbModelParam._m0[1u].w * (_1953 - _1853)) + _1853);
    float _1972 = (((_987 * _939) + _988) * _952) * ((cbModelParam._m0[1u].w * (_1955 - _1855)) + _1855);
    float _1974 = (((_987 * _940) + _988) * _952) * ((cbModelParam._m0[1u].w * (_1957 - _1857)) + _1857);
    float _1977 = fma(_1974, cbSceneParam._m0[89u].z, fma(_1972, cbSceneParam._m0[89u].y, _1970 * cbSceneParam._m0[89u].x));
    float _1980 = fma(_1974, cbSceneParam._m0[90u].z, fma(_1972, cbSceneParam._m0[90u].y, _1970 * cbSceneParam._m0[90u].x));
    float _1983 = fma(_1974, cbSceneParam._m0[91u].z, fma(_1972, cbSceneParam._m0[91u].y, _1970 * cbSceneParam._m0[91u].x));
    float _2017 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2021 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2025 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2029 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2030 = _2017 / _2029;
    float _2031 = _2021 / _2029;
    float _2032 = _2025 / _2029;
    float _2179;
    float _2180;
    float _2181;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2059 = ((uint(_2032 > cbSceneParam._m0[59u].y) + uint(_2032 > cbSceneParam._m0[59u].x)) + uint(_2032 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2060 = _2059 + 43u;
        uint _2068 = _2059 + 44u;
        uint _2076 = _2059 + 45u;
        uint _2084 = _2059 + 46u;
        float _2095 = fma(_2029, cbSceneParam._m0[_2060].w, fma(_2025, cbSceneParam._m0[_2060].z, fma(_2021, cbSceneParam._m0[_2060].y, _2017 * cbSceneParam._m0[_2060].x)));
        float _2099 = fma(_2029, cbSceneParam._m0[_2068].w, fma(_2025, cbSceneParam._m0[_2068].z, fma(_2021, cbSceneParam._m0[_2068].y, _2017 * cbSceneParam._m0[_2068].x)));
        float _2107 = fma(_2029, cbSceneParam._m0[_2084].w, fma(_2025, cbSceneParam._m0[_2084].z, fma(_2021, cbSceneParam._m0[_2084].y, _2017 * cbSceneParam._m0[_2084].x)));
        float _2112 = cbSceneParam._m0[33u].z * _2107;
        float _2114 = cbSceneParam._m0[33u].w * _2107;
        float _2117 = fma(_2029, cbSceneParam._m0[_2076].w, fma(_2025, cbSceneParam._m0[_2076].z, fma(_2021, cbSceneParam._m0[_2076].y, _2017 * cbSceneParam._m0[_2076].x))) / _2107;
        float _2165 = (cbSceneParam._m0[33u].x - sqrt(((_2031 * _2031) + (_2030 * _2030)) + (_2032 * _2032))) * cbSceneParam._m0[33u].y;
        float _4450 = isnan(0.0) ? _2165 : (isnan(_2165) ? 0.0 : max(_2165, 0.0));
        float _2172 = (isnan(1.0) ? _4450 : (isnan(_4450) ? 1.0 : min(_4450, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2112 + _2095) / _2107, (_2114 + _2099) / _2107), _2117), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2114 + _2095) / _2107, (_2099 - _2112) / _2107), _2117), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2095 - _2112) / _2107, (_2099 - _2114) / _2107), _2117), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2095 - _2114) / _2107, (_2112 + _2099) / _2107), _2117), 0.0)).x), vec4(0.25)));
        _2179 = 1.0 - (_2172 * cbSceneParam._m0[34u].x);
        _2180 = 1.0 - (_2172 * cbSceneParam._m0[34u].y);
        _2181 = 1.0 - (_2172 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2179 = 1.0;
        _2180 = 1.0;
        _2181 = 1.0;
    }
    float _2245;
    float _2247;
    float _2249;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2233 = fma(_2029, cbSceneParam._m0[63u].w, fma(_2025, cbSceneParam._m0[63u].z, fma(_2021, cbSceneParam._m0[63u].y, _2017 * cbSceneParam._m0[63u].x)));
        float _2234 = fma(_2029, cbSceneParam._m0[60u].w, fma(_2025, cbSceneParam._m0[60u].z, fma(_2021, cbSceneParam._m0[60u].y, _2017 * cbSceneParam._m0[60u].x))) / _2233;
        float _2235 = fma(_2029, cbSceneParam._m0[61u].w, fma(_2025, cbSceneParam._m0[61u].z, fma(_2021, cbSceneParam._m0[61u].y, _2017 * cbSceneParam._m0[61u].x))) / _2233;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2234 >= cbSceneParam._m0[64u].x) && (_2235 >= cbSceneParam._m0[64u].y)) && (_2234 <= cbSceneParam._m0[64u].z)) && (_2235 <= cbSceneParam._m0[64u].w))
        {
            float _2373 = fma(_2029, cbSceneParam._m0[62u].w, fma(_2025, cbSceneParam._m0[62u].z, fma(_2021, cbSceneParam._m0[62u].y, _2017 * cbSceneParam._m0[62u].x))) / _2233;
            float _2377 = isnan(cbSceneParam._m0[41u].w) ? _2373 : (isnan(_2373) ? cbSceneParam._m0[41u].w : max(_2373, cbSceneParam._m0[41u].w));
            float _2420 = (cbSceneParam._m0[33u].x - sqrt(((_2031 * _2031) + (_2030 * _2030)) + (_2032 * _2032))) * cbSceneParam._m0[33u].y;
            float _4466 = isnan(0.0) ? _2420 : (isnan(_2420) ? 0.0 : max(_2420, 0.0));
            float _2427 = (isnan(1.0) ? _4466 : (isnan(_4466) ? 1.0 : min(_4466, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2234, cbSceneParam._m0[33u].w + _2235), _2377), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2234, _2235 - cbSceneParam._m0[33u].z), _2377), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2234 - cbSceneParam._m0[33u].z, _2235 - cbSceneParam._m0[33u].w), _2377), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2234 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2235), _2377), 0.0)).x), vec4(0.25)));
            float _2431 = 1.0 - (_2427 * cbSceneParam._m0[34u].x);
            float _2432 = 1.0 - (_2427 * cbSceneParam._m0[34u].y);
            float _2433 = 1.0 - (_2427 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2433) ? _2181 : (isnan(_2181) ? _2433 : min(_2181, _2433));
            frontier_phi_34_33_ladder_1 = isnan(_2432) ? _2180 : (isnan(_2180) ? _2432 : min(_2180, _2432));
            frontier_phi_34_33_ladder_2 = isnan(_2431) ? _2179 : (isnan(_2179) ? _2431 : min(_2179, _2431));
        }
        else
        {
            frontier_phi_34_33_ladder = _2181;
            frontier_phi_34_33_ladder_1 = _2180;
            frontier_phi_34_33_ladder_2 = _2179;
        }
        _2245 = frontier_phi_34_33_ladder_2;
        _2247 = frontier_phi_34_33_ladder_1;
        _2249 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2245 = _2179;
        _2247 = _2180;
        _2249 = _2181;
    }
    uvec4 _2254 = floatBitsToUint(cbInstanceData._m0[_912 + 5u]);
    uint _2256 = _2254.x * 14u;
    uint _2257 = _2256 + 13u;
    float _2264 = _952 + (-1.0);
    float _2269 = (cbLight._m0[_2257].x * _2264) + 1.0;
    float _2270 = (cbLight._m0[_2257].y * _2264) + 1.0;
    float _2271 = (cbLight._m0[_2257].z * _2264) + 1.0;
    float _2272 = (cbLight._m0[_2257].w * _2264) + 1.0;
    uint _2273 = _2256 + 5u;
    float _2279 = isnan(1.0) ? _2270 : (isnan(_2270) ? 1.0 : min(_2270, 1.0));
    uint _2283 = _2256 + 4u;
    float _2292 = isnan(1.0) ? _2269 : (isnan(_2269) ? 1.0 : min(_2269, 1.0));
    uint _2296 = _2256 | 1u;
    float _2307 = dot(vec3(cbLight._m0[_2256].xyz), vec3(_786, _787, _788));
    float _2310 = dot(vec3(cbLight._m0[_2296].xyz), vec3(_786, _787, _788));
    float _4502 = isnan(0.0) ? _2307 : (isnan(_2307) ? 0.0 : max(_2307, 0.0));
    float _4513 = isnan(0.0) ? _2310 : (isnan(_2310) ? 0.0 : max(_2310, 0.0));
    float _2315 = (isnan(1.0) ? _4502 : (isnan(_4502) ? 1.0 : min(_4502, 1.0))) * 0.3183098733425140380859375;
    float _2317 = (isnan(1.0) ? _4513 : (isnan(_4513) ? 1.0 : min(_4513, 1.0))) * 0.3183098733425140380859375;
    float _2324 = ((cbLight._m0[_2273].x * _2279) * _2317) + (((cbLight._m0[_2283].x * _2245) * _2292) * _2315);
    float _2325 = ((_2279 * cbLight._m0[_2273].y) * _2317) + (((cbLight._m0[_2283].y * _2247) * _2292) * _2315);
    float _2326 = ((_2279 * cbLight._m0[_2273].z) * _2317) + (((cbLight._m0[_2283].z * _2249) * _2292) * _2315);
    uvec4 _2330 = floatBitsToUint(cbLight._m0[_2256 + 12u]);
    bool _2332 = _2330.x == 0u;
    float _2434;
    float _2436;
    float _2438;
    if (_2332)
    {
        _2434 = _2324;
        _2436 = _2325;
        _2438 = _2326;
    }
    else
    {
        uint _2442 = _2256 + 6u;
        float _2458 = (dot(vec3(cbLight._m0[_2256 + 2u].xyz), vec3(_786, _787, _788)) * 0.5) + 0.5;
        float _2459 = _2458 * _2458;
        float _4524 = isnan(0.0) ? _2459 : (isnan(_2459) ? 0.0 : max(_2459, 0.0));
        float _2460 = isnan(1.0) ? _4524 : (isnan(_4524) ? 1.0 : min(_4524, 1.0));
        float _2461 = isnan(1.0) ? _2271 : (isnan(_2271) ? 1.0 : min(_2271, 1.0));
        _2434 = (((cbLight._m0[_2442].x * 0.3183098733425140380859375) * _2460) * _2461) + _2324;
        _2436 = (((cbLight._m0[_2442].y * 0.3183098733425140380859375) * _2460) * _2461) + _2325;
        _2438 = (((cbLight._m0[_2442].z * 0.3183098733425140380859375) * _2460) * _2461) + _2326;
    }
    bool _2441 = _2330.y == 0u;
    float _2496;
    float _2498;
    float _2500;
    if (_2441)
    {
        _2496 = _2434;
        _2498 = _2436;
        _2500 = _2438;
    }
    else
    {
        uint _2669 = _2256 + 7u;
        float _2685 = (dot(vec3(cbLight._m0[_2256 + 3u].xyz), vec3(_786, _787, _788)) * 0.5) + 0.5;
        float _2686 = _2685 * _2685;
        float _4540 = isnan(0.0) ? _2686 : (isnan(_2686) ? 0.0 : max(_2686, 0.0));
        float _2687 = isnan(1.0) ? _4540 : (isnan(_4540) ? 1.0 : min(_4540, 1.0));
        float _2688 = isnan(1.0) ? _2272 : (isnan(_2272) ? 1.0 : min(_2272, 1.0));
        _2496 = (((cbLight._m0[_2669].x * 0.3183098733425140380859375) * _2687) * _2688) + _2434;
        _2498 = (((cbLight._m0[_2669].y * 0.3183098733425140380859375) * _2687) * _2688) + _2436;
        _2500 = (((cbLight._m0[_2669].z * 0.3183098733425140380859375) * _2687) * _2688) + _2438;
    }
    uint _2503 = _2256 + 8u;
    float _2516 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2256].w)) * _789) * 0.949999988079071044921875);
    float _2517 = _2516 * _2516;
    float _2518 = cbLight._m0[_2256].x + _866;
    float _2519 = cbLight._m0[_2256].y + _867;
    float _2520 = cbLight._m0[_2256].z + _868;
    float _2524 = inversesqrt(dot(vec3(_2518, _2519, _2520), vec3(_2518, _2519, _2520)));
    float _2525 = _2524 * _2518;
    float _2526 = _2524 * _2519;
    float _2527 = _2524 * _2520;
    float _2528 = dot(vec3(_786, _787, _788), vec3(cbLight._m0[_2256].xyz));
    float _4556 = isnan(0.0) ? _2528 : (isnan(_2528) ? 0.0 : max(_2528, 0.0));
    float _2531 = isnan(1.0) ? _4556 : (isnan(_4556) ? 1.0 : min(_4556, 1.0));
    float _4567 = isnan(0.0) ? _953 : (isnan(_953) ? 0.0 : max(_953, 0.0));
    float _2532 = isnan(1.0) ? _4567 : (isnan(_4567) ? 1.0 : min(_4567, 1.0));
    float _2533 = dot(vec3(_786, _787, _788), vec3(_2525, _2526, _2527));
    float _4578 = isnan(0.0) ? _2533 : (isnan(_2533) ? 0.0 : max(_2533, 0.0));
    float _2536 = isnan(1.0) ? _4578 : (isnan(_4578) ? 1.0 : min(_4578, 1.0));
    float _2537 = dot(vec3(cbLight._m0[_2256].xyz), vec3(_2525, _2526, _2527));
    float _4589 = isnan(0.0) ? _2537 : (isnan(_2537) ? 0.0 : max(_2537, 0.0));
    float _2541 = _2517 * _2517;
    float _2545 = ((_2536 * _2536) * (_2541 + (-1.0))) + 1.0;
    float _2553 = exp2(log2(1.0 - (isnan(1.0) ? _4589 : (isnan(_4589) ? 1.0 : min(_4589, 1.0)))) * 5.0);
    float _2554 = 0.959999978542327880859375 - _934;
    float _2556 = 0.959999978542327880859375 - _935;
    float _2557 = 0.959999978542327880859375 - _936;
    float _2564 = 1.0 - _2517;
    float _2575 = (0.5 / (((_2532 * ((_2531 * _2564) + _2517)) + 9.9999999392252902907785028219223e-09) + (((_2532 * _2564) + _2517) * _2531))) * _2531;
    float _4600 = isnan(0.0) ? _2575 : (isnan(_2575) ? 0.0 : max(_2575, 0.0));
    float _2577 = (isnan(1.0) ? _4600 : (isnan(_4600) ? 1.0 : min(_4600, 1.0))) * (_2541 / ((_2545 * _2545) * 3.141590118408203125));
    uint _2591 = _2256 + 9u;
    float _2602 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2296].w)) * _789) * 0.949999988079071044921875);
    float _2603 = _2602 * _2602;
    float _2604 = cbLight._m0[_2296].x + _866;
    float _2605 = cbLight._m0[_2296].y + _867;
    float _2606 = cbLight._m0[_2296].z + _868;
    float _2610 = inversesqrt(dot(vec3(_2604, _2605, _2606), vec3(_2604, _2605, _2606)));
    float _2611 = _2610 * _2604;
    float _2612 = _2610 * _2605;
    float _2613 = _2610 * _2606;
    float _2614 = dot(vec3(_786, _787, _788), vec3(cbLight._m0[_2296].xyz));
    float _4611 = isnan(0.0) ? _2614 : (isnan(_2614) ? 0.0 : max(_2614, 0.0));
    float _2617 = isnan(1.0) ? _4611 : (isnan(_4611) ? 1.0 : min(_4611, 1.0));
    float _2618 = dot(vec3(_786, _787, _788), vec3(_2611, _2612, _2613));
    float _4622 = isnan(0.0) ? _2618 : (isnan(_2618) ? 0.0 : max(_2618, 0.0));
    float _2621 = isnan(1.0) ? _4622 : (isnan(_4622) ? 1.0 : min(_4622, 1.0));
    float _2622 = dot(vec3(cbLight._m0[_2296].xyz), vec3(_2611, _2612, _2613));
    float _4633 = isnan(0.0) ? _2622 : (isnan(_2622) ? 0.0 : max(_2622, 0.0));
    float _2626 = _2603 * _2603;
    float _2630 = ((_2621 * _2621) * (_2626 + (-1.0))) + 1.0;
    float _2637 = exp2(log2(1.0 - (isnan(1.0) ? _4633 : (isnan(_4633) ? 1.0 : min(_4633, 1.0)))) * 5.0);
    float _2644 = 1.0 - _2603;
    float _2654 = (0.5 / (((_2532 * ((_2617 * _2644) + _2603)) + 9.9999999392252902907785028219223e-09) + (((_2532 * _2644) + _2603) * _2617))) * _2617;
    float _4644 = isnan(0.0) ? _2654 : (isnan(_2654) ? 0.0 : max(_2654, 0.0));
    float _2656 = (isnan(1.0) ? _4644 : (isnan(_4644) ? 1.0 : min(_4644, 1.0))) * (_2626 / ((_2630 * _2630) * 3.141590118408203125));
    float _2666 = (((((_2637 * _2554) + _937) * cbLight._m0[_2591].x) * _2656) * _2279) + ((((cbLight._m0[_2503].x * _2245) * ((_2553 * _2554) + _937)) * _2577) * _2292);
    float _2667 = (((((_2637 * _2556) + _939) * cbLight._m0[_2591].y) * _2656) * _2279) + ((((cbLight._m0[_2503].y * _2247) * ((_2553 * _2556) + _939)) * _2577) * _2292);
    float _2668 = (((((_2637 * _2557) + _940) * cbLight._m0[_2591].z) * _2656) * _2279) + ((((cbLight._m0[_2503].z * _2249) * ((_2553 * _2557) + _940)) * _2577) * _2292);
    float _2724;
    float _2726;
    float _2728;
    if (_2332)
    {
        _2724 = _2666;
        _2726 = _2667;
        _2728 = _2668;
    }
    else
    {
        uint _2730 = _2256 + 2u;
        uint _2734 = _2256 + 10u;
        float _2748 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2730].w)) * _789) * 0.949999988079071044921875);
        float _2749 = _2748 * _2748;
        float _2750 = cbLight._m0[_2730].x + _866;
        float _2751 = cbLight._m0[_2730].y + _867;
        float _2752 = cbLight._m0[_2730].z + _868;
        float _2756 = inversesqrt(dot(vec3(_2750, _2751, _2752), vec3(_2750, _2751, _2752)));
        float _2757 = _2756 * _2750;
        float _2758 = _2756 * _2751;
        float _2759 = _2756 * _2752;
        float _2760 = dot(vec3(_786, _787, _788), vec3(cbLight._m0[_2730].xyz));
        float _4655 = isnan(0.0) ? _2760 : (isnan(_2760) ? 0.0 : max(_2760, 0.0));
        float _2763 = isnan(1.0) ? _4655 : (isnan(_4655) ? 1.0 : min(_4655, 1.0));
        float _2764 = dot(vec3(_786, _787, _788), vec3(_2757, _2758, _2759));
        float _4666 = isnan(0.0) ? _2764 : (isnan(_2764) ? 0.0 : max(_2764, 0.0));
        float _2767 = isnan(1.0) ? _4666 : (isnan(_4666) ? 1.0 : min(_4666, 1.0));
        float _2768 = dot(vec3(cbLight._m0[_2730].xyz), vec3(_2757, _2758, _2759));
        float _4677 = isnan(0.0) ? _2768 : (isnan(_2768) ? 0.0 : max(_2768, 0.0));
        float _2772 = _2749 * _2749;
        float _2776 = ((_2767 * _2767) * (_2772 + (-1.0))) + 1.0;
        float _2783 = exp2(log2(1.0 - (isnan(1.0) ? _4677 : (isnan(_4677) ? 1.0 : min(_4677, 1.0)))) * 5.0);
        float _2790 = 1.0 - _2749;
        float _2800 = (0.5 / (((_2532 * ((_2763 * _2790) + _2749)) + 9.9999999392252902907785028219223e-09) + (((_2532 * _2790) + _2749) * _2763))) * _2763;
        float _4688 = isnan(0.0) ? _2800 : (isnan(_2800) ? 0.0 : max(_2800, 0.0));
        float _2802 = (isnan(1.0) ? _4688 : (isnan(_4688) ? 1.0 : min(_4688, 1.0))) * (_2772 / ((_2776 * _2776) * 3.141590118408203125));
        float _2803 = isnan(1.0) ? _2271 : (isnan(_2271) ? 1.0 : min(_2271, 1.0));
        _2724 = (((((_2783 * _2554) + _937) * cbLight._m0[_2734].x) * _2802) * _2803) + _2666;
        _2726 = (((((_2783 * _2556) + _939) * cbLight._m0[_2734].y) * _2802) * _2803) + _2667;
        _2728 = (((((_2783 * _2557) + _940) * cbLight._m0[_2734].z) * _2802) * _2803) + _2668;
    }
    float _2834;
    float _2836;
    float _2838;
    if (_2441)
    {
        _2834 = _2724;
        _2836 = _2726;
        _2838 = _2728;
    }
    else
    {
        uint _2845 = _2256 + 3u;
        uint _2849 = _2256 + 11u;
        float _2863 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2845].w)) * _789) * 0.949999988079071044921875);
        float _2864 = _2863 * _2863;
        float _2865 = cbLight._m0[_2845].x + _866;
        float _2866 = cbLight._m0[_2845].y + _867;
        float _2867 = cbLight._m0[_2845].z + _868;
        float _2871 = inversesqrt(dot(vec3(_2865, _2866, _2867), vec3(_2865, _2866, _2867)));
        float _2872 = _2871 * _2865;
        float _2873 = _2871 * _2866;
        float _2874 = _2871 * _2867;
        float _2875 = dot(vec3(_786, _787, _788), vec3(cbLight._m0[_2845].xyz));
        float _4704 = isnan(0.0) ? _2875 : (isnan(_2875) ? 0.0 : max(_2875, 0.0));
        float _2878 = isnan(1.0) ? _4704 : (isnan(_4704) ? 1.0 : min(_4704, 1.0));
        float _2879 = dot(vec3(_786, _787, _788), vec3(_2872, _2873, _2874));
        float _4715 = isnan(0.0) ? _2879 : (isnan(_2879) ? 0.0 : max(_2879, 0.0));
        float _2882 = isnan(1.0) ? _4715 : (isnan(_4715) ? 1.0 : min(_4715, 1.0));
        float _2883 = dot(vec3(cbLight._m0[_2845].xyz), vec3(_2872, _2873, _2874));
        float _4726 = isnan(0.0) ? _2883 : (isnan(_2883) ? 0.0 : max(_2883, 0.0));
        float _2887 = _2864 * _2864;
        float _2891 = ((_2882 * _2882) * (_2887 + (-1.0))) + 1.0;
        float _2898 = exp2(log2(1.0 - (isnan(1.0) ? _4726 : (isnan(_4726) ? 1.0 : min(_4726, 1.0)))) * 5.0);
        float _2905 = 1.0 - _2864;
        float _2915 = (0.5 / (((_2532 * ((_2878 * _2905) + _2864)) + 9.9999999392252902907785028219223e-09) + (((_2532 * _2905) + _2864) * _2878))) * _2878;
        float _4737 = isnan(0.0) ? _2915 : (isnan(_2915) ? 0.0 : max(_2915, 0.0));
        float _2917 = (isnan(1.0) ? _4737 : (isnan(_4737) ? 1.0 : min(_4737, 1.0))) * (_2887 / ((_2891 * _2891) * 3.141590118408203125));
        float _2918 = isnan(1.0) ? _2272 : (isnan(_2272) ? 1.0 : min(_2272, 1.0));
        _2834 = (((((_2898 * _2554) + _937) * cbLight._m0[_2849].x) * _2917) * _2918) + _2724;
        _2836 = (((((_2898 * _2556) + _939) * cbLight._m0[_2849].y) * _2917) * _2918) + _2726;
        _2838 = (((((_2898 * _2557) + _940) * cbLight._m0[_2849].z) * _2917) * _2918) + _2728;
    }
    float _2984;
    float _2986;
    float _2988;
    float _2990;
    float _2992;
    float _2994;
    if (_2254.y == 0u)
    {
        uvec4 _2939 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2940 = _2939.x;
        uint _2951 = uint((float(_2939.y) * floor(float(uint(cbSceneParam._m0[85u].y * _875) / _2940))) + floor(float(uint(cbSceneParam._m0[85u].x * _874) / _2940)));
        float _2961 = (log2(_2032 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2962 = isnan(0.0) ? _2961 : (isnan(_2961) ? 0.0 : max(_2961, 0.0));
        uint _2965 = uint(isnan(14.0) ? _2962 : (isnan(_2962) ? 14.0 : min(_2962, 14.0)));
        uvec4 _2970 = texelFetch(g_lightClusterGridBuffer, int(((_2965 << 2u) + (_2951 << 6u)) >> 2u));
        uint _2971 = _2970.x;
        uint _2972 = _2939.z;
        float _3051;
        float _3053;
        float _3055;
        float _3057;
        float _3059;
        float _3061;
        if (((((1u << ((_2972 >> 4u) & 15u)) + 4294967295u) & _2971) == 0u) || ((_2972 & 240u) == 0u))
        {
            _3051 = 0.0;
            _3053 = 0.0;
            _3055 = 0.0;
            _3057 = 0.0;
            _3059 = 0.0;
            _3061 = 0.0;
        }
        else
        {
            float _3052;
            float _3054;
            float _3056;
            float _3058;
            float _3060;
            float _3062;
            float _3195 = 0.0;
            float _3196 = 0.0;
            float _3197 = 0.0;
            float _3198 = 0.0;
            float _3199 = 0.0;
            float _3200 = 0.0;
            uint _3201 = 0u;
            uint _3210;
            bool _3211;
            for (;;)
            {
                _3210 = texelFetch(g_lightClassification, int((((_2965 << 5u) + (_2951 << 9u)) + (_3201 << 2u)) >> 2u)).x;
                _3211 = _3210 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3211)
                {
                    frontier_phi_66_pred = _3200;
                    frontier_phi_66_pred_1 = _3199;
                    frontier_phi_66_pred_2 = _3198;
                    frontier_phi_66_pred_3 = _3197;
                    frontier_phi_66_pred_4 = _3196;
                    frontier_phi_66_pred_5 = _3195;
                }
                else
                {
                    float _3319;
                    float _3320;
                    float _3321;
                    float _3322;
                    float _3323;
                    float _3324;
                    uint _3325;
                    _3319 = _3195;
                    _3320 = _3196;
                    _3321 = _3197;
                    _3322 = _3198;
                    _3323 = _3199;
                    _3324 = _3200;
                    _3325 = _3210;
                    float _3251;
                    float _3252;
                    float _3253;
                    float _3254;
                    float _3255;
                    float _3256;
                    for (;;)
                    {
                        uint _3329 = uint(findLSB(_3325)) + (_3201 << 5u);
                        uint _3326 = (_3325 + 4294967295u) & _3325;
                        uint _3331 = _3329 * 48u;
                        vec4 _3345 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3331)).x, texelFetch(g_PointLightRenderingBuffer, int(_3331 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3331 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3331 + 3u)).x));
                        uint _3351 = (_3329 * 48u) + 4u;
                        vec4 _3364 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3351)).x, texelFetch(g_PointLightRenderingBuffer, int(_3351 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3351 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3351 + 3u)).x));
                        uint _3370 = (_3329 * 48u) + 8u;
                        vec3 _3381 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3370)).x, texelFetch(g_PointLightRenderingBuffer, int(_3370 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3370 + 2u)).x));
                        float _3385 = _3345.x - _2030;
                        float _3386 = _3345.y - _2031;
                        float _3387 = _3345.z - _2032;
                        float _3388 = dot(vec3(_3385, _3386, _3387), vec3(_3385, _3386, _3387));
                        float _3391 = inversesqrt(_3388);
                        float _3392 = _3391 * _3385;
                        float _3393 = _3391 * _3386;
                        float _3394 = _3391 * _3387;
                        float _3395 = dot(vec3(_893, _896, _899), vec3(_3392, _3393, _3394));
                        float _3400 = 1.0 - (_3388 * _3345.w);
                        float _4763 = isnan(0.0) ? _3400 : (isnan(_3400) ? 0.0 : max(_3400, 0.0));
                        float _3401 = isnan(1.0) ? _4763 : (isnan(_4763) ? 1.0 : min(_4763, 1.0));
                        float _3402 = sqrt(_3388) * _3364.w;
                        float _3405 = 1.39999997615814208984375 / (_3402 + 1.39999997615814208984375);
                        float _3406 = _3405 * _3405;
                        float _3409 = ((1.0 - _3406) * _3395) + _3406;
                        float _3412 = _3402 * _3402;
                        float _3416 = ((isnan(0.0) ? _3409 : (isnan(_3409) ? 0.0 : max(_3409, 0.0))) * _3401) / ((_3412 * 0.699999988079071044921875) + 1.0);
                        float _3420 = (-0.0) - _2030;
                        float _3421 = (-0.0) - _2031;
                        float _3422 = (-0.0) - _2032;
                        float _3426 = inversesqrt(dot(vec3(_3420, _3421, _3422), vec3(_3420, _3421, _3422)));
                        float _3427 = _3426 * _3420;
                        float _3428 = _3426 * _3421;
                        float _3429 = _3426 * _3422;
                        float _3436 = exp2(log2(1.0 / ((_3412 * 3.5) + 5.0)) * 0.25);
                        float _3437 = 1.0 - _968;
                        float _3444 = sqrt(1.0 - ((1.0 - (_3437 * _3437)) * (1.0 - (_3436 * _3436))));
                        float _3445 = _3444 * _3444;
                        float _3446 = _3445 * _3445;
                        float _3447 = _3427 + _3392;
                        float _3448 = _3428 + _3393;
                        float _3449 = _3429 + _3394;
                        float _3453 = inversesqrt(dot(vec3(_3447, _3448, _3449), vec3(_3447, _3448, _3449)));
                        float _3457 = dot(vec3(_893, _896, _899), vec3(_3427, _3428, _3429));
                        float _4779 = isnan(0.0) ? _3457 : (isnan(_3457) ? 0.0 : max(_3457, 0.0));
                        float _3460 = isnan(1.0) ? _4779 : (isnan(_4779) ? 1.0 : min(_4779, 1.0));
                        float _3461 = dot(vec3(_893, _896, _899), vec3(_3453 * _3447, _3453 * _3448, _3453 * _3449));
                        float _4790 = isnan(0.0) ? _3461 : (isnan(_3461) ? 0.0 : max(_3461, 0.0));
                        float _3464 = isnan(1.0) ? _4790 : (isnan(_4790) ? 1.0 : min(_4790, 1.0));
                        float _3468 = ((_3464 * _3464) * (_3446 + (-1.0))) + 1.0;
                        float _3469 = _3405 * _3445;
                        float _3470 = _3469 * _3469;
                        float _3473 = ((1.0 - _3470) * _3395) + _3470;
                        float _4801 = isnan(0.0) ? _3473 : (isnan(_3473) ? 0.0 : max(_3473, 0.0));
                        float _3474 = isnan(1.0) ? _4801 : (isnan(_4801) ? 1.0 : min(_4801, 1.0));
                        float _3475 = 1.0 - _3445;
                        float _3485 = (0.5 / (((_3474 * ((_3460 * _3475) + _3445)) + 9.9999999392252902907785028219223e-09) + (((_3474 * _3475) + _3445) * _3460))) * _3474;
                        float _4812 = isnan(0.0) ? _3485 : (isnan(_3485) ? 0.0 : max(_3485, 0.0));
                        float _3496 = (((_3446 * 3.1415927410125732421875) * (isnan(1.0) ? _4812 : (isnan(_4812) ? 1.0 : min(_4812, 1.0)))) / ((_3468 * _3468) * ((_3412 * 2.1991131305694580078125) + 3.141590118408203125))) * _3401;
                        _3254 = (_3416 * _3364.x) + _3322;
                        _3255 = (_3416 * _3364.y) + _3323;
                        _3256 = (_3416 * _3364.z) + _3324;
                        _3251 = (_3496 * _3381.x) + _3319;
                        _3252 = (_3496 * _3381.y) + _3320;
                        _3253 = (_3496 * _3381.z) + _3321;
                        if (_3326 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3319 = _3251;
                            _3320 = _3252;
                            _3321 = _3253;
                            _3322 = _3254;
                            _3323 = _3255;
                            _3324 = _3256;
                            _3325 = _3326;
                        }
                    }
                    frontier_phi_66_pred = _3256;
                    frontier_phi_66_pred_1 = _3255;
                    frontier_phi_66_pred_2 = _3254;
                    frontier_phi_66_pred_3 = _3253;
                    frontier_phi_66_pred_4 = _3252;
                    frontier_phi_66_pred_5 = _3251;
                }
                _3062 = frontier_phi_66_pred;
                _3060 = frontier_phi_66_pred_1;
                _3058 = frontier_phi_66_pred_2;
                _3056 = frontier_phi_66_pred_3;
                _3054 = frontier_phi_66_pred_4;
                _3052 = frontier_phi_66_pred_5;
                uint _3202 = _3201 + 1u;
                if (_3202 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3195 = _3052;
                    _3196 = _3054;
                    _3197 = _3056;
                    _3198 = _3058;
                    _3199 = _3060;
                    _3200 = _3062;
                    _3201 = _3202;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3051 = _3052;
            _3053 = _3054;
            _3055 = _3056;
            _3057 = _3058;
            _3059 = _3060;
            _3061 = _3062;
        }
        uvec4 _3065 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3066 = _3065.z;
        uint _3068 = (_3066 >> 8u) & 15u;
        float _3163;
        float _3165;
        float _3167;
        float _3169;
        float _3171;
        float _3173;
        if (((4294967295u << _3068) & _2971) == 0u)
        {
            _3163 = _3051;
            _3165 = _3053;
            _3167 = _3055;
            _3169 = _3057;
            _3171 = _3059;
            _3173 = _3061;
        }
        else
        {
            float _3188 = inversesqrt(dot(vec3(_2030, _2031, _2032), vec3(_2030, _2031, _2032)));
            float _3189 = _3188 * _2030;
            float _3190 = _3188 * _2031;
            float _3191 = _3188 * _2032;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_3068 < ((_3066 >> 12u) & 15u))
            {
                float _3164;
                float _3166;
                float _3168;
                float _3170;
                float _3172;
                float _3174;
                float _3302 = _3051;
                float _3303 = _3053;
                float _3304 = _3055;
                float _3305 = _3057;
                float _3306 = _3059;
                float _3307 = _3061;
                uint _3308 = _3068;
                uint _3317;
                bool _3318;
                for (;;)
                {
                    _3317 = texelFetch(g_lightClassification, int((((_2965 << 5u) + (_2951 << 9u)) + (_3308 << 2u)) >> 2u)).x;
                    _3318 = _3317 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3318)
                    {
                        frontier_phi_72_pred = _3307;
                        frontier_phi_72_pred_1 = _3306;
                        frontier_phi_72_pred_2 = _3305;
                        frontier_phi_72_pred_3 = _3304;
                        frontier_phi_72_pred_4 = _3303;
                        frontier_phi_72_pred_5 = _3302;
                    }
                    else
                    {
                        float _3501;
                        float _3502;
                        float _3503;
                        float _3504;
                        float _3505;
                        float _3506;
                        float _3795;
                        float _3796;
                        float _3797;
                        float _3798;
                        float _3799;
                        float _3800;
                        float _3514 = _3302;
                        float _3515 = _3303;
                        float _3516 = _3304;
                        float _3517 = _3305;
                        float _3518 = _3306;
                        float _3519 = _3307;
                        uint _3520 = _3317;
                        uint _3521;
                        vec4 _3546;
                        float _3547;
                        vec4 _3562;
                        vec3 _3574;
                        vec4 _3589;
                        vec4 _3604;
                        float _3651;
                        bool _3652;
                        for (;;)
                        {
                            uint _3531 = ((_3308 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3520));
                            _3521 = (_3520 + 4294967295u) & _3520;
                            uint _3533 = _3531 * 40u;
                            _3546 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3533)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3533 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3533 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3533 + 3u)).x));
                            _3547 = _3546.w;
                            uint _3549 = (_3531 * 40u) + 4u;
                            _3562 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3549)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3549 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3549 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3549 + 3u)).x));
                            uint _3564 = (_3531 * 40u) + 8u;
                            _3574 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3564)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3564 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3564 + 2u)).x));
                            uint _3576 = (_3531 * 40u) + 16u;
                            _3589 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3576)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3576 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3576 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3576 + 3u)).x));
                            uint _3591 = (_3531 * 40u) + 20u;
                            _3604 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3591)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3591 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3591 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3591 + 3u)).x));
                            uint _3607 = (_3531 * 40u) + 24u;
                            vec4 _3620 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3607)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3607 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3607 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3607 + 3u)).x));
                            uint _3626 = (_3531 * 40u) + 28u;
                            vec4 _3639 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3626)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3626 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3626 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3626 + 3u)).x));
                            _3651 = fma(_2032, _3639.z, fma(_2031, _3639.y, _3639.x * _2030)) + _3639.w;
                            _3652 = !((fma(_2032, _3620.z, fma(_2031, _3620.y, _3620.x * _2030)) + _3620.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3652)
                            {
                                float _3679 = _3546.x - _2030;
                                float _3680 = _3546.y - _2031;
                                float _3681 = _3546.z - _2032;
                                float _3682 = dot(vec3(_3679, _3680, _3681), vec3(_3679, _3680, _3681));
                                float _3685 = inversesqrt(_3682);
                                float _3686 = _3685 * _3679;
                                float _3687 = _3685 * _3680;
                                float _3688 = _3685 * _3681;
                                float _3692 = 1.0 - (_3682 / (_3547 * _3547));
                                float _4823 = isnan(0.0) ? _3692 : (isnan(_3692) ? 0.0 : max(_3692, 0.0));
                                float _3693 = isnan(1.0) ? _4823 : (isnan(_4823) ? 1.0 : min(_4823, 1.0));
                                float _3697 = sqrt(_3682) * _3562.w;
                                float _3699 = 1.39999997615814208984375 / (_3697 + 1.39999997615814208984375);
                                float _3700 = _3699 * _3699;
                                float _3703 = ((1.0 - _3700) * dot(vec3(_3686, _3687, _3688), vec3(_893, _896, _899))) + _3700;
                                float _3706 = _3697 * _3697;
                                float _3710 = (fma(_2032, _3589.z, fma(_2031, _3589.y, _3589.x * _2030)) + _3589.w) / _3651;
                                float _3711 = (fma(_2032, _3604.z, fma(_2031, _3604.y, _3604.x * _2030)) + _3604.w) / _3651;
                                float _3715 = 1.0 - dot(vec2(_3710, _3711), vec2(_3710, _3711));
                                float _4839 = isnan(0.0) ? _3715 : (isnan(_3715) ? 0.0 : max(_3715, 0.0));
                                float _3716 = isnan(1.0) ? _4839 : (isnan(_4839) ? 1.0 : min(_4839, 1.0));
                                float _3717 = _3716 * (((isnan(0.0) ? _3703 : (isnan(_3703) ? 0.0 : max(_3703, 0.0))) * _3693) / ((_3706 * 0.699999988079071044921875) + 1.0));
                                float _3729 = exp2(log2(1.0 / ((_3706 * 3.5) + 5.0)) * 0.25);
                                float _3730 = 1.0 - _968;
                                float _3737 = sqrt(1.0 - ((1.0 - (_3730 * _3730)) * (1.0 - (_3729 * _3729))));
                                float _3738 = _3737 * _3737;
                                float _3739 = _3738 * _3738;
                                float _3740 = _3686 - _3189;
                                float _3741 = _3687 - _3190;
                                float _3742 = _3688 - _3191;
                                float _3746 = inversesqrt(dot(vec3(_3740, _3741, _3742), vec3(_3740, _3741, _3742)));
                                float _3750 = dot(vec3(_893, _896, _899), vec3((-0.0) - _3189, (-0.0) - _3190, (-0.0) - _3191));
                                float _4850 = isnan(0.0) ? _3750 : (isnan(_3750) ? 0.0 : max(_3750, 0.0));
                                float _3753 = isnan(1.0) ? _4850 : (isnan(_4850) ? 1.0 : min(_4850, 1.0));
                                float _3754 = dot(vec3(_893, _896, _899), vec3(_3746 * _3740, _3746 * _3741, _3746 * _3742));
                                float _4861 = isnan(0.0) ? _3754 : (isnan(_3754) ? 0.0 : max(_3754, 0.0));
                                float _3757 = isnan(1.0) ? _4861 : (isnan(_4861) ? 1.0 : min(_4861, 1.0));
                                float _3761 = ((_3757 * _3757) * (_3739 + (-1.0))) + 1.0;
                                float _3762 = _3699 * _3738;
                                float _3763 = _3762 * _3762;
                                float _3769 = ((1.0 - _3763) * dot(vec3(_893, _896, _899), vec3(_3686, _3687, _3688))) + _3763;
                                float _4872 = isnan(0.0) ? _3769 : (isnan(_3769) ? 0.0 : max(_3769, 0.0));
                                float _3770 = isnan(1.0) ? _4872 : (isnan(_4872) ? 1.0 : min(_4872, 1.0));
                                float _3771 = 1.0 - _3738;
                                float _3781 = (0.5 / (((_3770 * ((_3753 * _3771) + _3738)) + 9.9999999392252902907785028219223e-09) + (((_3770 * _3771) + _3738) * _3753))) * _3770;
                                float _4883 = isnan(0.0) ? _3781 : (isnan(_3781) ? 0.0 : max(_3781, 0.0));
                                float _3791 = (_3716 * _3693) * (((_3739 * 3.1415927410125732421875) * (isnan(1.0) ? _4883 : (isnan(_4883) ? 1.0 : min(_4883, 1.0)))) / ((_3761 * _3761) * ((_3706 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3717 * _3562.y;
                                frontier_phi_78_pred_1 = _3717 * _3562.x;
                                frontier_phi_78_pred_2 = _3791 * _3574.z;
                                frontier_phi_78_pred_3 = _3791 * _3574.y;
                                frontier_phi_78_pred_4 = _3791 * _3574.x;
                                frontier_phi_78_pred_5 = _3717 * _3562.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3799 = frontier_phi_78_pred;
                            _3798 = frontier_phi_78_pred_1;
                            _3797 = frontier_phi_78_pred_2;
                            _3796 = frontier_phi_78_pred_3;
                            _3795 = frontier_phi_78_pred_4;
                            _3800 = frontier_phi_78_pred_5;
                            _3504 = _3798 + _3517;
                            _3505 = _3799 + _3518;
                            _3506 = _3800 + _3519;
                            _3501 = _3795 + _3514;
                            _3502 = _3796 + _3515;
                            _3503 = _3797 + _3516;
                            if (_3521 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3514 = _3501;
                                _3515 = _3502;
                                _3516 = _3503;
                                _3517 = _3504;
                                _3518 = _3505;
                                _3519 = _3506;
                                _3520 = _3521;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3506;
                        frontier_phi_72_pred_1 = _3505;
                        frontier_phi_72_pred_2 = _3504;
                        frontier_phi_72_pred_3 = _3503;
                        frontier_phi_72_pred_4 = _3502;
                        frontier_phi_72_pred_5 = _3501;
                    }
                    _3174 = frontier_phi_72_pred;
                    _3172 = frontier_phi_72_pred_1;
                    _3170 = frontier_phi_72_pred_2;
                    _3168 = frontier_phi_72_pred_3;
                    _3166 = frontier_phi_72_pred_4;
                    _3164 = frontier_phi_72_pred_5;
                    uint _3309 = _3308 + 1u;
                    if (_3309 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3302 = _3164;
                        _3303 = _3166;
                        _3304 = _3168;
                        _3305 = _3170;
                        _3306 = _3172;
                        _3307 = _3174;
                        _3308 = _3309;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3174;
                frontier_phi_60_61_ladder_1 = _3172;
                frontier_phi_60_61_ladder_2 = _3168;
                frontier_phi_60_61_ladder_3 = _3166;
                frontier_phi_60_61_ladder_4 = _3164;
                frontier_phi_60_61_ladder_5 = _3170;
            }
            else
            {
                frontier_phi_60_61_ladder = _3061;
                frontier_phi_60_61_ladder_1 = _3059;
                frontier_phi_60_61_ladder_2 = _3055;
                frontier_phi_60_61_ladder_3 = _3053;
                frontier_phi_60_61_ladder_4 = _3051;
                frontier_phi_60_61_ladder_5 = _3057;
            }
            _3163 = frontier_phi_60_61_ladder_4;
            _3165 = frontier_phi_60_61_ladder_3;
            _3167 = frontier_phi_60_61_ladder_2;
            _3169 = frontier_phi_60_61_ladder_5;
            _3171 = frontier_phi_60_61_ladder_1;
            _3173 = frontier_phi_60_61_ladder;
        }
        float _3178 = isnan(1.0) ? _952 : (isnan(_952) ? 1.0 : min(_952, 1.0));
        _2984 = (_3178 * _3169) + _2496;
        _2986 = (_3178 * _3171) + _2498;
        _2988 = (_3178 * _3173) + _2500;
        _2990 = ((_3163 * _937) * _3178) + _2834;
        _2992 = ((_3165 * _939) * _3178) + _2836;
        _2994 = ((_3167 * _940) * _3178) + _2838;
    }
    else
    {
        _2984 = _2496;
        _2986 = _2498;
        _2988 = _2500;
        _2990 = _2834;
        _2992 = _2836;
        _2994 = _2838;
    }
    float _4899 = isnan(0.0) ? _927 : (isnan(_927) ? 0.0 : max(_927, 0.0));
    float _4910 = isnan(0.0) ? _928 : (isnan(_928) ? 0.0 : max(_928, 0.0));
    float _4921 = isnan(0.0) ? _929 : (isnan(_929) ? 0.0 : max(_929, 0.0));
    uint _3014 = _912 + 6u;
    float _3022 = _874 / cbSceneParam._m0[86u].x;
    float _3023 = _875 / cbSceneParam._m0[86u].y;
    vec4 _3037 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3022, _3023, (log2((isnan(cbSceneParam._m0[77u].w) ? _809 : (isnan(_809) ? cbSceneParam._m0[77u].w : min(_809, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3039 = _3037.x;
    float _3040 = _3037.y;
    float _3041 = _3037.z;
    float _3042 = _3037.w;
    float _3113;
    float _3115;
    float _3117;
    float _3119;
    if (_809 > cbSceneParam._m0[78u].w)
    {
        float _3076 = isnan(_809) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _809 : min(cbSceneParam._m0[80u].w, _809));
        float _3077 = _3076 / _809;
        float _3088 = _3077 * _859;
        float _3089 = _860 * _3077;
        float _3090 = (-0.0) - _3089;
        float _3091 = _3077 * _861;
        float _3093 = (cbSceneParam._m0[77u].w * _3090) / _3076;
        float _3094 = _3093 + cbSceneParam._m0[79u].w;
        float _3095 = cbSceneParam._m0[79u].w - _3089;
        float _3101 = sqrt(((_3088 * _3088) + (_3089 * _3089)) + (_3091 * _3091));
        float _3104 = (1.0 - (cbSceneParam._m0[77u].w / _3076)) * _3101;
        float _3109 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3111 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3264;
        if (abs((_3090 - _3093) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3264 = ((((_3094 > 0.0) ? exp2(_3109 * _3094) : (2.0 - exp2(_3111 * _3094))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3104;
        }
        else
        {
            float _3224 = 1.0 / cbSceneParam._m0[80u].x;
            float _3225 = isnan(_3095) ? _3094 : (isnan(_3094) ? _3095 : max(_3094, _3095));
            float _3226 = isnan(_3095) ? _3094 : (isnan(_3094) ? _3095 : min(_3094, _3095));
            float _3235 = isnan(0.0) ? _3225 : (isnan(_3225) ? 0.0 : min(_3225, 0.0));
            float _3236 = isnan(0.0) ? _3226 : (isnan(_3226) ? 0.0 : min(_3226, 0.0));
            _3264 = ((abs(_3101 / _3090) * cbSceneParam._m0[80u].y) * ((((_3235 - _3236) * 2.0) - ((exp2(_3109 * (isnan(0.0) ? _3225 : (isnan(_3225) ? 0.0 : max(_3225, 0.0)))) - exp2(_3109 * (isnan(0.0) ? _3226 : (isnan(_3226) ? 0.0 : max(_3226, 0.0))))) * _3224)) - ((exp2(_3111 * _3235) - exp2(_3111 * _3236)) * _3224))) + (_3104 * cbSceneParam._m0[80u].z);
        }
        vec4 _3266 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3022, _3023, 1.0), 0.0);
        float _3275 = exp2((_3264 * (-1.44269502162933349609375)) * (1.0 - _3266.w));
        float _3276 = log2(_3275);
        float _3292 = log2(_3042);
        _3113 = (exp2(_3292 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3276 * cbSceneParam._m0[78u].x)) * _3266.x) / cbSceneParam._m0[78u].x)) + _3039;
        _3115 = (exp2(_3292 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3276 * cbSceneParam._m0[78u].y)) * _3266.y) / cbSceneParam._m0[78u].y)) + _3040;
        _3117 = (exp2(_3292 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3276 * cbSceneParam._m0[78u].z)) * _3266.z) / cbSceneParam._m0[78u].z)) + _3041;
        _3119 = _3275 * _3042;
    }
    else
    {
        _3113 = _3039;
        _3115 = _3040;
        _3117 = _3041;
        _3119 = _3042;
    }
    float _3131 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3132 = _3131 == 3.0;
    float _3133 = log2(_3119);
    float _3140 = exp2(_3133 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4899 : (isnan(_4899) ? 1.0 : min(_4899, 1.0))) * (_2984 + ((isnan(0.0) ? _1683 : (isnan(_1683) ? 0.0 : max(_1683, 0.0))) * _952))) + ((_2990 + ((isnan(0.0) ? _1977 : (isnan(_1977) ? 0.0 : max(_1977, 0.0))) * _1762)) * cbPerFrame._m0[3u].x));
    float _3141 = exp2(_3133 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4910 : (isnan(_4910) ? 1.0 : min(_4910, 1.0))) * (_2986 + ((isnan(0.0) ? _1686 : (isnan(_1686) ? 0.0 : max(_1686, 0.0))) * _952))) + ((_2992 + ((isnan(0.0) ? _1980 : (isnan(_1980) ? 0.0 : max(_1980, 0.0))) * _1762)) * cbPerFrame._m0[3u].x));
    float _3142 = exp2(_3133 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4921 : (isnan(_4921) ? 1.0 : min(_4921, 1.0))) * (_2988 + ((isnan(0.0) ? _1689 : (isnan(_1689) ? 0.0 : max(_1689, 0.0))) * _952))) + ((_2994 + ((isnan(0.0) ? _1983 : (isnan(_1983) ? 0.0 : max(_1983, 0.0))) * _1762)) * cbPerFrame._m0[3u].x));
    float _3151 = (_3131 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3151 * (_3132 ? _3140 : (_3140 + (cbSceneParam._m0[72u].w * _3113)));
    SV_Target.y = _3151 * (_3132 ? _3141 : (_3141 + (cbSceneParam._m0[72u].w * _3115)));
    SV_Target.z = _3151 * (_3132 ? _3142 : (_3142 + (cbSceneParam._m0[72u].w * _3117)));
    SV_Target.w = cbInstanceData._m0[_3014].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3014].w;
}


