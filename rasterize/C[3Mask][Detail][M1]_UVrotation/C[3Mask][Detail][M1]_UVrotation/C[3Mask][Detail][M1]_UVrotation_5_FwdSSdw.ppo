#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[20];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_19;
layout(set = 0, binding = 11) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_3;
layout(set = 0, binding = 14) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_5;
layout(set = 0, binding = 15) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_6;
layout(set = 0, binding = 16) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_7;
layout(set = 0, binding = 17) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_8;
layout(set = 0, binding = 2) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_11;
layout(set = 0, binding = 5) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_14;
layout(set = 0, binding = 6) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_15;
layout(set = 0, binding = 7) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_16;
layout(set = 0, binding = 8) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_17;
layout(set = 0, binding = 9) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_18;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1209;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _201 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _202 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _203 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _209 = inversesqrt(dot(vec3(_201, _202, _203), vec3(_201, _202, _203)));
    float _216 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _223 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _246 = sin(cbMtdParam._m0[18u].x);
    float _247 = cos(cbMtdParam._m0[18u].x);
    float _248 = TEXCOORD.x - cbMtdParam._m0[17u].w;
    float _249 = TEXCOORD.y - cbMtdParam._m0[17u].w;
    float _257 = (cbMtdParam._m0[17u].w + cbMtdParam._m0[19u].y) + fma(_249, (-0.0) - _246, _247 * _248);
    float _259 = (cbMtdParam._m0[17u].w + cbMtdParam._m0[19u].z) + fma(_249, _247, _248 * _246);
    vec4 _272 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * _257) + cbTextureTilingScale._m0[1u].z, (_259 * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w));
    float _278 = _272.x * cbMtdParam._m0[10u].x;
    float _279 = _272.y * cbMtdParam._m0[10u].y;
    float _280 = _272.z * cbMtdParam._m0[10u].z;
    vec4 _298 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w));
    vec4 _317 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_0, SS_WrapLinear), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _342 = cbMtdParam._m0[19u].x * texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.x) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD.y) + cbTextureTilingScale._m0[13u].w)).x;
    float _353 = ((cbMtdParam._m0[15u].x * (-1.39999997615814208984375)) * (((1.0 - _317.x) * 2.0) - _342)) + 1.0;
    float _3562 = isnan(0.0) ? _353 : (isnan(_353) ? 0.0 : max(_353, 0.0));
    float _354 = isnan(1.0) ? _3562 : (isnan(_3562) ? 1.0 : min(_3562, 1.0));
    float _361 = (_354 * ((_298.x * cbMtdParam._m0[11u].x) - _278)) + _278;
    float _362 = (_354 * ((_298.y * cbMtdParam._m0[11u].y) - _279)) + _279;
    float _363 = (_354 * ((_298.z * cbMtdParam._m0[11u].z) - _280)) + _280;
    vec4 _381 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_8, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[17u].x * TEXCOORD.x) + cbTextureTilingScale._m0[17u].z, (cbTextureTilingScale._m0[17u].y * TEXCOORD.y) + cbTextureTilingScale._m0[17u].w));
    float _394 = (((((1.0 - _317.y) * 2.0) - _342) * (-1.39999997615814208984375)) * cbMtdParam._m0[18u].z) + 1.0;
    float _3573 = isnan(0.0) ? _394 : (isnan(_394) ? 0.0 : max(_394, 0.0));
    float _395 = isnan(1.0) ? _3573 : (isnan(_3573) ? 1.0 : min(_3573, 1.0));
    float _402 = (((_381.x * cbMtdParam._m0[12u].x) - _361) * _395) + _361;
    float _403 = (_395 * ((_381.y * cbMtdParam._m0[12u].y) - _362)) + _362;
    float _404 = (_395 * ((_381.z * cbMtdParam._m0[12u].z) - _363)) + _363;
    vec4 _421 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _434 = (((((1.0 - _317.z) * 2.0) - _342) * (-1.39999997615814208984375)) * cbMtdParam._m0[18u].w) + 1.0;
    float _3584 = isnan(0.0) ? _434 : (isnan(_434) ? 0.0 : max(_434, 0.0));
    float _435 = isnan(1.0) ? _3584 : (isnan(_3584) ? 1.0 : min(_3584, 1.0));
    float _442 = (((_421.x * cbMtdParam._m0[13u].x) - _402) * _435) + _402;
    float _443 = (_435 * ((_421.y * cbMtdParam._m0[13u].y) - _403)) + _403;
    float _444 = (_435 * ((_421.z * cbMtdParam._m0[13u].z) - _404)) + _404;
    vec4 _457 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * _257) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _259) + cbTextureTilingScale._m0[5u].w));
    float _459 = _457.x;
    float _477 = ((texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w)).x - _459) * _354) + _459;
    float _495 = ((texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w)).x - _477) * _395) + _477;
    float _514 = (((texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w)).x - _495) * _435) + _495) * cbMtdParam._m0[18u].y;
    vec4 _527 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[14u].x * _257) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _259) + cbTextureTilingScale._m0[14u].w));
    float _529 = _527.x;
    float _530 = _527.y;
    float _533 = cbMtdParam._m0[17u].y * _527.z;
    vec4 _545 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * TEXCOORD.x) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * TEXCOORD.y) + cbTextureTilingScale._m0[15u].w));
    float _554 = (((cbMtdParam._m0[17u].x * _545.z) - _533) * _354) + _533;
    vec4 _567 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_15, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _579 = (((cbMtdParam._m0[16u].w * _567.z) - _554) * _395) + _554;
    vec4 _592 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _601 = (((cbMtdParam._m0[16u].z * _592.z) - _579) * _435) + _579;
    vec4 _614 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[16u].x * TEXCOORD.x) + cbTextureTilingScale._m0[16u].z, (cbTextureTilingScale._m0[16u].y * TEXCOORD.y) + cbTextureTilingScale._m0[16u].w));
    float _627 = ((_545.x - _529) * _354) + _529;
    float _628 = ((_545.y - _530) * _354) + _530;
    float _633 = ((_567.x - _627) * _395) + _627;
    float _634 = ((_567.y - _628) * _395) + _628;
    float _643 = ((((_592.x - _633) * _435) + _633) * 2.0) + (-1.0);
    float _644 = ((((_592.y - _634) * _435) + _634) * 2.0) + (-1.0);
    float _645 = dot(vec2(_643, _644), vec2(_643, _644));
    float _3595 = isnan(0.0) ? _645 : (isnan(_645) ? 0.0 : max(_645, 0.0));
    float _650 = sqrt(1.0 - (isnan(1.0) ? _3595 : (isnan(_3595) ? 1.0 : min(_3595, 1.0))));
    float _653 = (((_614.x * 2.0) + (-1.0)) * cbMtdParam._m0[16u].y) + _643;
    float _654 = (((_614.y * 2.0) + (-1.0)) * cbMtdParam._m0[16u].y) + _644;
    float _657 = fma(_650, _216 * NORMAL.x, fma(_654, _223 * TANGENT.x, (_209 * _201) * _653));
    float _660 = fma(_650, _216 * NORMAL.y, fma(_654, _223 * TANGENT.y, (_209 * _202) * _653));
    float _663 = fma(_650, _216 * NORMAL.z, fma(_654, _223 * TANGENT.z, (_209 * _203) * _653));
    float _667 = inversesqrt(dot(vec3(_657, _660, _663), vec3(_657, _660, _663)));
    float _668 = _667 * _657;
    float _669 = _667 * _660;
    float _670 = _667 * _663;
    float _3606 = isnan(0.0) ? _601 : (isnan(_601) ? 0.0 : max(_601, 0.0));
    float _671 = isnan(1.0) ? _3606 : (isnan(_3606) ? 1.0 : min(_3606, 1.0));
    float _3617 = isnan(0.0) ? _442 : (isnan(_442) ? 0.0 : max(_442, 0.0));
    float _3628 = isnan(0.0) ? _443 : (isnan(_443) ? 0.0 : max(_443, 0.0));
    float _3639 = isnan(0.0) ? _444 : (isnan(_444) ? 0.0 : max(_444, 0.0));
    float _3650 = isnan(0.0) ? _514 : (isnan(_514) ? 0.0 : max(_514, 0.0));
    float _675 = isnan(1.0) ? _3650 : (isnan(_3650) ? 1.0 : min(_3650, 1.0));
    float _691 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _731 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _741 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _731);
    float _742 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _731);
    float _743 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _731);
    float _747 = inversesqrt(dot(vec3(_741, _742, _743), vec3(_741, _742, _743)));
    float _748 = _741 * _747;
    float _749 = _742 * _747;
    float _750 = _743 * _747;
    float _756 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _757 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _775 = fma(_670, cbSceneParam._m0[5u].z, fma(_669, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _668));
    float _778 = fma(_670, cbSceneParam._m0[6u].z, fma(_669, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _668));
    float _781 = fma(_670, cbSceneParam._m0[7u].z, fma(_669, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _668));
    uint _794 = uint(roundEven(NORMAL.w)) * 13u;
    uint _796 = (_794 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _802 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3617 : (isnan(_3617) ? 1.0 : min(_3617, 1.0)))) * cbInstanceData._m0[_796].x;
    float _803 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3628 : (isnan(_3628) ? 1.0 : min(_3628, 1.0)))) * cbInstanceData._m0[_796].y;
    float _804 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3639 : (isnan(_3639) ? 1.0 : min(_3639, 1.0)))) * cbInstanceData._m0[_796].z;
    float _3661 = isnan(0.0) ? _802 : (isnan(_802) ? 0.0 : max(_802, 0.0));
    float _805 = isnan(1.0) ? _3661 : (isnan(_3661) ? 1.0 : min(_3661, 1.0));
    float _3672 = isnan(0.0) ? _803 : (isnan(_803) ? 0.0 : max(_803, 0.0));
    float _806 = isnan(1.0) ? _3672 : (isnan(_3672) ? 1.0 : min(_3672, 1.0));
    float _3683 = isnan(0.0) ? _804 : (isnan(_804) ? 0.0 : max(_804, 0.0));
    float _807 = isnan(1.0) ? _3683 : (isnan(_3683) ? 1.0 : min(_3683, 1.0));
    float _808 = 1.0 - _675;
    float _809 = _805 * _808;
    float _810 = _806 * _808;
    float _811 = _807 * _808;
    float _816 = (_805 + (-0.039999999105930328369140625)) * _675;
    float _817 = (_806 + (-0.039999999105930328369140625)) * _675;
    float _818 = (_807 + (-0.039999999105930328369140625)) * _675;
    float _819 = _816 + 0.039999999105930328369140625;
    float _821 = _817 + 0.039999999105930328369140625;
    float _822 = _818 + 0.039999999105930328369140625;
    vec4 _831 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _756, cbSceneParam._m0[86u].y * _757));
    float _834 = _831.x * TEXCOORD_5.w;
    float _835 = dot(vec3(_668, _669, _670), vec3(_748, _749, _750));
    float _838 = _835 * 2.0;
    float _842 = (_838 * _668) - _748;
    float _843 = (_838 * _669) - _749;
    float _844 = (_838 * _670) - _750;
    float _848 = abs(dot(vec3(_748, _749, _750), vec3(_668, _669, _670)));
    float _3694 = isnan(0.0) ? _848 : (isnan(_848) ? 0.0 : max(_848, 0.0));
    float _850 = sqrt(_671);
    float _863 = exp2((_850 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3694 : (isnan(_3694) ? 1.0 : min(_3694, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_850 * 3.0));
    float _869 = (1.0 - _863) * ((_850 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _870 = _863 * _850;
    float _898 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _902 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _906 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1208;
    float _1210;
    float _1211;
    float _1212;
    float _1213;
    float _1214;
    float _1215;
    float _1216;
    float _1217;
    float _1218;
    float _1219;
    float _1220;
    float _1221;
    float _1222;
    float _1223;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _933 = fma(_906, cbModelParam._m0[26u].z, fma(_902, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _898));
        float _937 = fma(_906, cbModelParam._m0[27u].z, fma(_902, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _898));
        float _941 = fma(_906, cbModelParam._m0[28u].z, fma(_902, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _898));
        float _966 = _898 + _668;
        float _967 = _902 + _669;
        float _968 = _906 + _670;
        float _978 = fma(_968, cbModelParam._m0[26u].z, fma(_967, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _966)) - _933;
        float _979 = fma(_968, cbModelParam._m0[27u].z, fma(_967, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _966)) - _937;
        float _980 = fma(_968, cbModelParam._m0[28u].z, fma(_967, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _966)) - _941;
        float _984 = inversesqrt(dot(vec3(_978, _979, _980), vec3(_978, _979, _980)));
        float _997 = ((_984 * _978) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_933 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _998 = ((_984 * _979) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_937 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _999 = ((_984 * _980) / cbModelParam._m0[34u].z) + ((((((_941 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1002 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_997, _998, _999), 0.0);
        vec4 _1009 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_997, _998, _999), 0.0);
        vec4 _1016 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_997, _998, _999), 0.0);
        vec4 _1023 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_997, _998, _999), 0.0);
        float _1036 = exp2((_1002.w + (-0.5)) * 20.0) * 2.0;
        float _1037 = _1036 * (_1002.x + (-0.5));
        float _1038 = _1036 * (_1002.y + (-0.5));
        float _1039 = _1036 * (_1002.z + (-0.5));
        float _1046 = exp2((_1009.w + (-0.5)) * 20.0) * 2.0;
        float _1047 = _1046 * (_1009.x + (-0.5));
        float _1048 = _1046 * (_1009.y + (-0.5));
        float _1049 = _1046 * (_1009.z + (-0.5));
        float _1056 = exp2((_1016.w + (-0.5)) * 20.0) * 2.0;
        float _1057 = _1056 * (_1016.x + (-0.5));
        float _1058 = _1056 * (_1016.y + (-0.5));
        float _1059 = _1056 * (_1016.z + (-0.5));
        float _1066 = exp2((_1023.w + (-0.5)) * 20.0) * 2.0;
        float _1067 = _1066 * (_1023.x + (-0.5));
        float _1068 = _1066 * (_1023.y + (-0.5));
        float _1069 = _1066 * (_1023.z + (-0.5));
        float _1070 = isnan(0.0) ? _1067 : (isnan(_1067) ? 0.0 : max(_1067, 0.0));
        float _1071 = isnan(0.0) ? _1068 : (isnan(_1068) ? 0.0 : max(_1068, 0.0));
        float _1072 = isnan(0.0) ? _1069 : (isnan(_1069) ? 0.0 : max(_1069, 0.0));
        float _1073 = _1037 * 0.5;
        float _1074 = _1047 * 0.5;
        float _1075 = _1057 * 0.5;
        float _1076 = dot(vec3(_1073, _1074, _1075), vec3(_1073, _1074, _1075));
        float _1081 = (_1076 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1076);
        float _1090 = (dot(vec3(_668, _669, _670), vec3(_1081 * _1073, _1081 * _1074, _1081 * _1075)) + 1.0) * 0.5;
        float _3720 = isnan(0.0) ? _1090 : (isnan(_1090) ? 0.0 : max(_1090, 0.0));
        float _1100 = sqrt(((_1074 * _1074) + (_1073 * _1073)) + (_1075 * _1075)) / (_1070 + 9.9999997473787516355514526367188e-06);
        float _3731 = isnan(0.0) ? _1100 : (isnan(_1100) ? 0.0 : max(_1100, 0.0));
        float _1101 = isnan(1.0) ? _3731 : (isnan(_3731) ? 1.0 : min(_3731, 1.0));
        float _1102 = _1101 * 2.0;
        float _1106 = (1.0 - _1101) / (_1101 + 1.0);
        float _3742 = isnan(0.0) ? _1106 : (isnan(_1106) ? 0.0 : max(_1106, 0.0));
        float _1107 = isnan(1.0) ? _3742 : (isnan(_3742) ? 1.0 : min(_3742, 1.0));
        float _1116 = ((((1.0 - _1107) * (_1102 + 2.0)) * exp2(log2(isnan(1.0) ? _3720 : (isnan(_3720) ? 1.0 : min(_3720, 1.0))) * (_1102 + 1.0))) + _1107) * _1070;
        float _1117 = _1038 * 0.5;
        float _1118 = _1048 * 0.5;
        float _1119 = _1058 * 0.5;
        float _1120 = dot(vec3(_1117, _1118, _1119), vec3(_1117, _1118, _1119));
        float _1125 = (_1120 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1120);
        float _1133 = (dot(vec3(_668, _669, _670), vec3(_1125 * _1117, _1125 * _1118, _1125 * _1119)) + 1.0) * 0.5;
        float _3753 = isnan(0.0) ? _1133 : (isnan(_1133) ? 0.0 : max(_1133, 0.0));
        float _1142 = sqrt(((_1118 * _1118) + (_1117 * _1117)) + (_1119 * _1119)) / (_1071 + 9.9999997473787516355514526367188e-06);
        float _3764 = isnan(0.0) ? _1142 : (isnan(_1142) ? 0.0 : max(_1142, 0.0));
        float _1143 = isnan(1.0) ? _3764 : (isnan(_3764) ? 1.0 : min(_3764, 1.0));
        float _1144 = _1143 * 2.0;
        float _1148 = (1.0 - _1143) / (_1143 + 1.0);
        float _3775 = isnan(0.0) ? _1148 : (isnan(_1148) ? 0.0 : max(_1148, 0.0));
        float _1149 = isnan(1.0) ? _3775 : (isnan(_3775) ? 1.0 : min(_3775, 1.0));
        float _1158 = ((((1.0 - _1149) * (_1144 + 2.0)) * exp2(log2(isnan(1.0) ? _3753 : (isnan(_3753) ? 1.0 : min(_3753, 1.0))) * (_1144 + 1.0))) + _1149) * _1071;
        float _1159 = _1039 * 0.5;
        float _1160 = _1049 * 0.5;
        float _1161 = _1059 * 0.5;
        float _1162 = dot(vec3(_1159, _1160, _1161), vec3(_1159, _1160, _1161));
        float _1167 = (_1162 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1162);
        float _1175 = (dot(vec3(_668, _669, _670), vec3(_1167 * _1159, _1167 * _1160, _1167 * _1161)) + 1.0) * 0.5;
        float _3786 = isnan(0.0) ? _1175 : (isnan(_1175) ? 0.0 : max(_1175, 0.0));
        float _1184 = sqrt(((_1160 * _1160) + (_1159 * _1159)) + (_1161 * _1161)) / (_1072 + 9.9999997473787516355514526367188e-06);
        float _3797 = isnan(0.0) ? _1184 : (isnan(_1184) ? 0.0 : max(_1184, 0.0));
        float _1185 = isnan(1.0) ? _3797 : (isnan(_3797) ? 1.0 : min(_3797, 1.0));
        float _1186 = _1185 * 2.0;
        float _1190 = (1.0 - _1185) / (_1185 + 1.0);
        float _3808 = isnan(0.0) ? _1190 : (isnan(_1190) ? 0.0 : max(_1190, 0.0));
        float _1191 = isnan(1.0) ? _3808 : (isnan(_3808) ? 1.0 : min(_3808, 1.0));
        float _1200 = ((((1.0 - _1191) * (_1186 + 2.0)) * exp2(log2(isnan(1.0) ? _3786 : (isnan(_3786) ? 1.0 : min(_3786, 1.0))) * (_1186 + 1.0))) + _1191) * _1072;
        _1208 = _1039;
        _1210 = _1038;
        _1211 = _1037;
        _1212 = _1049;
        _1213 = _1048;
        _1214 = _1047;
        _1215 = _1059;
        _1216 = _1058;
        _1217 = _1057;
        _1218 = _1072;
        _1219 = _1071;
        _1220 = _1070;
        _1221 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1116 : (isnan(_1116) ? 0.0 : max(_1116, 0.0)));
        _1222 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1158 : (isnan(_1158) ? 0.0 : max(_1158, 0.0)));
        _1223 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1200 : (isnan(_1200) ? 0.0 : max(_1200, 0.0)));
    }
    else
    {
        _1208 = _1209;
        _1210 = _1209;
        _1211 = _1209;
        _1212 = _1209;
        _1213 = _1209;
        _1214 = _1209;
        _1215 = _1209;
        _1216 = _1209;
        _1217 = _1209;
        _1218 = _1209;
        _1219 = _1209;
        _1220 = _1209;
        _1221 = 0.0;
        _1222 = 0.0;
        _1223 = 0.0;
    }
    float _1518;
    float _1519;
    float _1520;
    float _1521;
    float _1522;
    float _1523;
    float _1524;
    float _1525;
    float _1526;
    float _1527;
    float _1528;
    float _1529;
    float _1530;
    float _1531;
    float _1532;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1249 = fma(_906, cbModelParam._m0[30u].z, fma(_902, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _898));
        float _1253 = fma(_906, cbModelParam._m0[31u].z, fma(_902, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _898));
        float _1257 = fma(_906, cbModelParam._m0[32u].z, fma(_902, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _898));
        float _1280 = _898 + _668;
        float _1281 = _902 + _669;
        float _1282 = _906 + _670;
        float _1292 = fma(_1282, cbModelParam._m0[30u].z, fma(_1281, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1280)) - _1249;
        float _1293 = fma(_1282, cbModelParam._m0[31u].z, fma(_1281, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1280)) - _1253;
        float _1294 = fma(_1282, cbModelParam._m0[32u].z, fma(_1281, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1280)) - _1257;
        float _1298 = inversesqrt(dot(vec3(_1292, _1293, _1294), vec3(_1292, _1293, _1294)));
        float _1311 = ((_1298 * _1292) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1249 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1312 = ((_1298 * _1293) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1253 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1313 = ((_1298 * _1294) / cbModelParam._m0[35u].z) + ((((((_1257 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1315 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1311, _1312, _1313), 0.0);
        vec4 _1322 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1311, _1312, _1313), 0.0);
        vec4 _1329 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1311, _1312, _1313), 0.0);
        vec4 _1336 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1311, _1312, _1313), 0.0);
        float _1348 = exp2((_1315.w + (-0.5)) * 20.0) * 2.0;
        float _1349 = _1348 * (_1315.x + (-0.5));
        float _1350 = _1348 * (_1315.y + (-0.5));
        float _1351 = _1348 * (_1315.z + (-0.5));
        float _1358 = exp2((_1322.w + (-0.5)) * 20.0) * 2.0;
        float _1359 = _1358 * (_1322.x + (-0.5));
        float _1360 = _1358 * (_1322.y + (-0.5));
        float _1361 = _1358 * (_1322.z + (-0.5));
        float _1368 = exp2((_1329.w + (-0.5)) * 20.0) * 2.0;
        float _1369 = _1368 * (_1329.x + (-0.5));
        float _1370 = _1368 * (_1329.y + (-0.5));
        float _1371 = _1368 * (_1329.z + (-0.5));
        float _1378 = exp2((_1336.w + (-0.5)) * 20.0) * 2.0;
        float _1379 = _1378 * (_1336.x + (-0.5));
        float _1380 = _1378 * (_1336.y + (-0.5));
        float _1381 = _1378 * (_1336.z + (-0.5));
        float _1382 = isnan(0.0) ? _1379 : (isnan(_1379) ? 0.0 : max(_1379, 0.0));
        float _1383 = isnan(0.0) ? _1380 : (isnan(_1380) ? 0.0 : max(_1380, 0.0));
        float _1384 = isnan(0.0) ? _1381 : (isnan(_1381) ? 0.0 : max(_1381, 0.0));
        float _1385 = _1349 * 0.5;
        float _1386 = _1359 * 0.5;
        float _1387 = _1369 * 0.5;
        float _1388 = dot(vec3(_1385, _1386, _1387), vec3(_1385, _1386, _1387));
        float _1393 = (_1388 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1388);
        float _1401 = (dot(vec3(_668, _669, _670), vec3(_1393 * _1385, _1393 * _1386, _1393 * _1387)) + 1.0) * 0.5;
        float _3849 = isnan(0.0) ? _1401 : (isnan(_1401) ? 0.0 : max(_1401, 0.0));
        float _1410 = sqrt(((_1386 * _1386) + (_1385 * _1385)) + (_1387 * _1387)) / (_1382 + 9.9999997473787516355514526367188e-06);
        float _3860 = isnan(0.0) ? _1410 : (isnan(_1410) ? 0.0 : max(_1410, 0.0));
        float _1411 = isnan(1.0) ? _3860 : (isnan(_3860) ? 1.0 : min(_3860, 1.0));
        float _1412 = _1411 * 2.0;
        float _1416 = (1.0 - _1411) / (_1411 + 1.0);
        float _3871 = isnan(0.0) ? _1416 : (isnan(_1416) ? 0.0 : max(_1416, 0.0));
        float _1417 = isnan(1.0) ? _3871 : (isnan(_3871) ? 1.0 : min(_3871, 1.0));
        float _1426 = ((((1.0 - _1417) * (_1412 + 2.0)) * exp2(log2(isnan(1.0) ? _3849 : (isnan(_3849) ? 1.0 : min(_3849, 1.0))) * (_1412 + 1.0))) + _1417) * _1382;
        float _1427 = _1350 * 0.5;
        float _1428 = _1360 * 0.5;
        float _1429 = _1370 * 0.5;
        float _1430 = dot(vec3(_1427, _1428, _1429), vec3(_1427, _1428, _1429));
        float _1435 = (_1430 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1430);
        float _1443 = (dot(vec3(_668, _669, _670), vec3(_1435 * _1427, _1435 * _1428, _1435 * _1429)) + 1.0) * 0.5;
        float _3882 = isnan(0.0) ? _1443 : (isnan(_1443) ? 0.0 : max(_1443, 0.0));
        float _1452 = sqrt(((_1428 * _1428) + (_1427 * _1427)) + (_1429 * _1429)) / (_1383 + 9.9999997473787516355514526367188e-06);
        float _3893 = isnan(0.0) ? _1452 : (isnan(_1452) ? 0.0 : max(_1452, 0.0));
        float _1453 = isnan(1.0) ? _3893 : (isnan(_3893) ? 1.0 : min(_3893, 1.0));
        float _1454 = _1453 * 2.0;
        float _1458 = (1.0 - _1453) / (_1453 + 1.0);
        float _3904 = isnan(0.0) ? _1458 : (isnan(_1458) ? 0.0 : max(_1458, 0.0));
        float _1459 = isnan(1.0) ? _3904 : (isnan(_3904) ? 1.0 : min(_3904, 1.0));
        float _1468 = ((((1.0 - _1459) * (_1454 + 2.0)) * exp2(log2(isnan(1.0) ? _3882 : (isnan(_3882) ? 1.0 : min(_3882, 1.0))) * (_1454 + 1.0))) + _1459) * _1383;
        float _1469 = _1351 * 0.5;
        float _1470 = _1361 * 0.5;
        float _1471 = _1371 * 0.5;
        float _1472 = dot(vec3(_1469, _1470, _1471), vec3(_1469, _1470, _1471));
        float _1477 = (_1472 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1472);
        float _1485 = (dot(vec3(_668, _669, _670), vec3(_1477 * _1469, _1477 * _1470, _1477 * _1471)) + 1.0) * 0.5;
        float _3915 = isnan(0.0) ? _1485 : (isnan(_1485) ? 0.0 : max(_1485, 0.0));
        float _1494 = sqrt(((_1470 * _1470) + (_1469 * _1469)) + (_1471 * _1471)) / (_1384 + 9.9999997473787516355514526367188e-06);
        float _3926 = isnan(0.0) ? _1494 : (isnan(_1494) ? 0.0 : max(_1494, 0.0));
        float _1495 = isnan(1.0) ? _3926 : (isnan(_3926) ? 1.0 : min(_3926, 1.0));
        float _1496 = _1495 * 2.0;
        float _1500 = (1.0 - _1495) / (_1495 + 1.0);
        float _3937 = isnan(0.0) ? _1500 : (isnan(_1500) ? 0.0 : max(_1500, 0.0));
        float _1501 = isnan(1.0) ? _3937 : (isnan(_3937) ? 1.0 : min(_3937, 1.0));
        float _1510 = ((((1.0 - _1501) * (_1496 + 2.0)) * exp2(log2(isnan(1.0) ? _3915 : (isnan(_3915) ? 1.0 : min(_3915, 1.0))) * (_1496 + 1.0))) + _1501) * _1384;
        _1518 = _1351;
        _1519 = _1350;
        _1520 = _1349;
        _1521 = _1361;
        _1522 = _1360;
        _1523 = _1359;
        _1524 = _1371;
        _1525 = _1370;
        _1526 = _1369;
        _1527 = _1384;
        _1528 = _1383;
        _1529 = _1382;
        _1530 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1426 : (isnan(_1426) ? 0.0 : max(_1426, 0.0)));
        _1531 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1468 : (isnan(_1468) ? 0.0 : max(_1468, 0.0)));
        _1532 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1510 : (isnan(_1510) ? 0.0 : max(_1510, 0.0)));
    }
    else
    {
        _1518 = _1209;
        _1519 = _1209;
        _1520 = _1209;
        _1521 = _1209;
        _1522 = _1209;
        _1523 = _1209;
        _1524 = _1209;
        _1525 = _1209;
        _1526 = _1209;
        _1527 = _1209;
        _1528 = _1209;
        _1529 = _1209;
        _1530 = 0.0;
        _1531 = 0.0;
        _1532 = 0.0;
    }
    float _1542 = (cbModelParam._m0[1u].x * (_1530 - _1221)) + _1221;
    float _1543 = (cbModelParam._m0[1u].x * (_1531 - _1222)) + _1222;
    float _1544 = (cbModelParam._m0[1u].x * (_1532 - _1223)) + _1223;
    float _1565 = fma(_1544, cbSceneParam._m0[89u].z, fma(_1543, cbSceneParam._m0[89u].y, _1542 * cbSceneParam._m0[89u].x));
    float _1568 = fma(_1544, cbSceneParam._m0[90u].z, fma(_1543, cbSceneParam._m0[90u].y, _1542 * cbSceneParam._m0[90u].x));
    float _1571 = fma(_1544, cbSceneParam._m0[91u].z, fma(_1543, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1542));
    float _1586 = _842 * 0.5;
    float _1587 = _843 * 0.5;
    float _1588 = _844 * 0.5;
    float _1589 = dot(vec4(_1586, _1587, _1588, 1.0), vec4(_1520, _1523, _1526, _1529));
    float _1592 = dot(vec4(_1586, _1587, _1588, 1.0), vec4(_1519, _1522, _1525, _1528));
    float _1595 = dot(vec4(_1586, _1587, _1588, 1.0), vec4(_1518, _1521, _1524, _1527));
    float _1629;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1602 = dot(vec4(_1586, _1587, _1588, 1.0), vec4(_1208, _1212, _1215, _1218));
        float _1606 = dot(vec4(_1586, _1587, _1588, 1.0), vec4(_1210, _1213, _1216, _1219));
        float _1610 = dot(vec4(_1586, _1587, _1588, 1.0), vec4(_1211, _1214, _1217, _1220));
        float _1617 = dot(vec4(cbModelParam._m0[39u]), vec4(_1586, _1587, _1588, 1.0));
        _1629 = dot(vec3(isnan(0.0) ? _1610 : (isnan(_1610) ? 0.0 : max(_1610, 0.0)), isnan(0.0) ? _1606 : (isnan(_1606) ? 0.0 : max(_1606, 0.0)), isnan(0.0) ? _1602 : (isnan(_1602) ? 0.0 : max(_1602, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1617) ? 0.0 : (isnan(0.0) ? _1617 : max(0.0, _1617))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1629 = 1.0;
    }
    float _1640;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1631 = dot(vec4(cbModelParam._m0[40u]), vec4(_1586, _1587, _1588, 1.0));
        _1640 = dot(vec3(isnan(0.0) ? _1589 : (isnan(_1589) ? 0.0 : max(_1589, 0.0)), isnan(0.0) ? _1592 : (isnan(_1592) ? 0.0 : max(_1592, 0.0)), isnan(0.0) ? _1595 : (isnan(_1595) ? 0.0 : max(_1595, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1631) ? 0.0 : (isnan(0.0) ? _1631 : max(0.0, _1631))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1640 = 1.0;
    }
    float _1644 = (_1640 * cbModelParam._m0[1u].x) + (_1629 * (1.0 - cbModelParam._m0[1u].x));
    float _1654 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _671);
    float _1655 = isnan(_1654) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1654 : min(cbModelParam._m0[25u].z, _1654));
    float _1735;
    float _1737;
    float _1739;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1702 = fma(_906, cbModelParam._m0[13u].z, fma(_902, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _898)) + cbModelParam._m0[13u].w;
        float _1706 = fma(_906, cbModelParam._m0[14u].z, fma(_902, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _898)) + cbModelParam._m0[14u].w;
        float _1710 = fma(_906, cbModelParam._m0[15u].z, fma(_902, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _898)) + cbModelParam._m0[15u].w;
        float _1713 = fma(_844, cbModelParam._m0[13u].z, fma(_843, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _842));
        float _1716 = fma(_844, cbModelParam._m0[14u].z, fma(_843, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _842));
        float _1719 = fma(_844, cbModelParam._m0[15u].z, fma(_843, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _842));
        float _1747;
        if (_1713 > 0.0)
        {
            _1747 = abs((1.0 - _1702) / _1713);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1713 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1702 + 1.0) / _1713);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1747 = frontier_phi_14_12_ladder;
        }
        float _1973;
        if (_1716 > 0.0)
        {
            _1973 = abs((1.0 - _1706) / _1716);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1716 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1706 + 1.0) / _1716);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1973 = frontier_phi_23_19_ladder;
        }
        float _2230;
        if (_1719 > 0.0)
        {
            _2230 = abs((1.0 - _1710) / _1719);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1719 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1710 + 1.0) / _1719);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2230 = frontier_phi_35_30_ladder;
        }
        float _2232 = isnan(_1973) ? _1747 : (isnan(_1747) ? _1973 : min(_1747, _1973));
        float _2233 = isnan(_2230) ? _2232 : (isnan(_2232) ? _2230 : min(_2232, _2230));
        float _2237 = (_2233 * _1713) + _1702;
        float _2238 = (_2233 * _1716) + _1706;
        float _2239 = (_2233 * _1719) + _1710;
        float _2240 = _2233 * 9.9999997473787516355514526367188e-05;
        float _2242 = (-1.0) - _2240;
        float _2244 = _2240 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2239 > _2244) || ((_2239 < _2242) || ((_2238 > _2244) || ((_2238 < _2242) || ((_2237 < _2242) || (_2237 > _2244))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2367 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2239, cbModelParam._m0[9u].z, fma(_2238, cbModelParam._m0[9u].y, _2237 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2239, cbModelParam._m0[10u].z, fma(_2238, cbModelParam._m0[10u].y, _2237 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2239, cbModelParam._m0[11u].z, fma(_2238, cbModelParam._m0[11u].y, _2237 * cbModelParam._m0[11u].x))), _1655);
            frontier_phi_13_35_ladder = _2367.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2367.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2367.x * cbModelParam._m0[1u].y;
        }
        _1735 = frontier_phi_13_35_ladder_2;
        _1737 = frontier_phi_13_35_ladder_1;
        _1739 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1723 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_842, _843, _844), _1655);
        _1735 = _1723.x * cbModelParam._m0[1u].y;
        _1737 = _1723.y * cbModelParam._m0[1u].y;
        _1739 = _1723.z * cbModelParam._m0[1u].y;
    }
    float _1743 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _671);
    float _1744 = isnan(_1743) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1743 : min(cbModelParam._m0[25u].w, _1743));
    float _1835;
    float _1837;
    float _1839;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1799 = fma(_906, cbModelParam._m0[21u].z, fma(_902, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _898)) + cbModelParam._m0[21u].w;
        float _1803 = fma(_906, cbModelParam._m0[22u].z, fma(_902, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _898)) + cbModelParam._m0[22u].w;
        float _1807 = fma(_906, cbModelParam._m0[23u].z, fma(_902, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _898)) + cbModelParam._m0[23u].w;
        float _1810 = fma(_844, cbModelParam._m0[21u].z, fma(_843, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _842));
        float _1813 = fma(_844, cbModelParam._m0[22u].z, fma(_843, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _842));
        float _1816 = fma(_844, cbModelParam._m0[23u].z, fma(_843, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _842));
        float _1978;
        if (_1810 > 0.0)
        {
            _1978 = abs((1.0 - _1799) / _1810);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1810 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1799 + 1.0) / _1810);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1978 = frontier_phi_25_21_ladder;
        }
        float _2257;
        if (_1813 > 0.0)
        {
            _2257 = abs((1.0 - _1803) / _1813);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1813 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1803 + 1.0) / _1813);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2257 = frontier_phi_37_32_ladder;
        }
        float _2470;
        if (_1816 > 0.0)
        {
            _2470 = abs((1.0 - _1807) / _1816);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1816 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1807 + 1.0) / _1816);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2470 = frontier_phi_46_43_ladder;
        }
        float _2472 = isnan(_2257) ? _1978 : (isnan(_1978) ? _2257 : min(_1978, _2257));
        float _2473 = isnan(_2470) ? _2472 : (isnan(_2472) ? _2470 : min(_2472, _2470));
        float _2477 = (_2473 * _1810) + _1799;
        float _2478 = (_2473 * _1813) + _1803;
        float _2479 = (_2473 * _1816) + _1807;
        float _2480 = _2473 * 9.9999997473787516355514526367188e-05;
        float _2481 = (-1.0) - _2480;
        float _2483 = _2480 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2479 > _2483) || ((_2479 < _2481) || ((_2478 > _2483) || ((_2478 < _2481) || ((_2477 < _2481) || (_2477 > _2483))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2678 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2479, cbModelParam._m0[17u].z, fma(_2478, cbModelParam._m0[17u].y, _2477 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2479, cbModelParam._m0[18u].z, fma(_2478, cbModelParam._m0[18u].y, _2477 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2479, cbModelParam._m0[19u].z, fma(_2478, cbModelParam._m0[19u].y, _2477 * cbModelParam._m0[19u].x))), _1744);
            frontier_phi_22_46_ladder = _2678.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2678.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2678.x * cbModelParam._m0[1u].z;
        }
        _1835 = frontier_phi_22_46_ladder_2;
        _1837 = frontier_phi_22_46_ladder_1;
        _1839 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1819 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_842, _843, _844), _1744);
        _1835 = _1819.x * cbModelParam._m0[1u].z;
        _1837 = _1819.y * cbModelParam._m0[1u].z;
        _1839 = _1819.z * cbModelParam._m0[1u].z;
    }
    float _1852 = (((_869 * _819) + _870) * _834) * ((cbModelParam._m0[1u].w * (_1835 - _1735)) + _1735);
    float _1854 = (((_869 * _821) + _870) * _834) * ((cbModelParam._m0[1u].w * (_1837 - _1737)) + _1737);
    float _1856 = (((_869 * _822) + _870) * _834) * ((cbModelParam._m0[1u].w * (_1839 - _1739)) + _1739);
    float _1859 = fma(_1856, cbSceneParam._m0[89u].z, fma(_1854, cbSceneParam._m0[89u].y, _1852 * cbSceneParam._m0[89u].x));
    float _1862 = fma(_1856, cbSceneParam._m0[90u].z, fma(_1854, cbSceneParam._m0[90u].y, _1852 * cbSceneParam._m0[90u].x));
    float _1865 = fma(_1856, cbSceneParam._m0[91u].z, fma(_1854, cbSceneParam._m0[91u].y, _1852 * cbSceneParam._m0[91u].x));
    vec4 _1873 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_756, _757));
    float _1875 = _1873.w;
    float _1887 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1875);
    float _1888 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1875);
    float _1889 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1875);
    uvec4 _1893 = floatBitsToUint(cbInstanceData._m0[_794 + 5u]);
    uint _1895 = _1893.x * 14u;
    uint _1896 = _1895 + 13u;
    float _1903 = _834 + (-1.0);
    float _1908 = (cbLight._m0[_1896].x * _1903) + 1.0;
    float _1909 = (cbLight._m0[_1896].y * _1903) + 1.0;
    float _1910 = (cbLight._m0[_1896].z * _1903) + 1.0;
    float _1911 = (cbLight._m0[_1896].w * _1903) + 1.0;
    uint _1912 = _1895 + 5u;
    float _1918 = isnan(1.0) ? _1909 : (isnan(_1909) ? 1.0 : min(_1909, 1.0));
    uint _1922 = _1895 + 4u;
    float _1932 = isnan(1.0) ? _1908 : (isnan(_1908) ? 1.0 : min(_1908, 1.0));
    uint _1936 = _1895 | 1u;
    float _1947 = dot(vec3(cbLight._m0[_1895].xyz), vec3(_668, _669, _670));
    float _1950 = dot(vec3(cbLight._m0[_1936].xyz), vec3(_668, _669, _670));
    float _4073 = isnan(0.0) ? _1947 : (isnan(_1947) ? 0.0 : max(_1947, 0.0));
    float _4084 = isnan(0.0) ? _1950 : (isnan(_1950) ? 0.0 : max(_1950, 0.0));
    float _1955 = (isnan(1.0) ? _4073 : (isnan(_4073) ? 1.0 : min(_4073, 1.0))) * 0.3183098733425140380859375;
    float _1957 = (isnan(1.0) ? _4084 : (isnan(_4084) ? 1.0 : min(_4084, 1.0))) * 0.3183098733425140380859375;
    float _1964 = ((cbLight._m0[_1912].x * _1918) * _1957) + (((cbLight._m0[_1922].x * _1887) * _1932) * _1955);
    float _1965 = ((_1918 * cbLight._m0[_1912].y) * _1957) + (((cbLight._m0[_1922].y * _1888) * _1932) * _1955);
    float _1966 = ((_1918 * cbLight._m0[_1912].z) * _1957) + (((cbLight._m0[_1922].z * _1889) * _1932) * _1955);
    uvec4 _1970 = floatBitsToUint(cbLight._m0[_1895 + 12u]);
    bool _1972 = _1970.x == 0u;
    float _1983;
    float _1985;
    float _1987;
    if (_1972)
    {
        _1983 = _1964;
        _1985 = _1965;
        _1987 = _1966;
    }
    else
    {
        uint _1991 = _1895 + 6u;
        float _2007 = (dot(vec3(cbLight._m0[_1895 + 2u].xyz), vec3(_668, _669, _670)) * 0.5) + 0.5;
        float _2008 = _2007 * _2007;
        float _4095 = isnan(0.0) ? _2008 : (isnan(_2008) ? 0.0 : max(_2008, 0.0));
        float _2009 = isnan(1.0) ? _4095 : (isnan(_4095) ? 1.0 : min(_4095, 1.0));
        float _2010 = isnan(1.0) ? _1910 : (isnan(_1910) ? 1.0 : min(_1910, 1.0));
        _1983 = (((cbLight._m0[_1991].x * 0.3183098733425140380859375) * _2009) * _2010) + _1964;
        _1985 = (((cbLight._m0[_1991].y * 0.3183098733425140380859375) * _2009) * _2010) + _1965;
        _1987 = (((cbLight._m0[_1991].z * 0.3183098733425140380859375) * _2009) * _2010) + _1966;
    }
    bool _1990 = _1970.y == 0u;
    float _2028;
    float _2030;
    float _2032;
    if (_1990)
    {
        _2028 = _1983;
        _2030 = _1985;
        _2032 = _1987;
    }
    else
    {
        uint _2201 = _1895 + 7u;
        float _2217 = (dot(vec3(cbLight._m0[_1895 + 3u].xyz), vec3(_668, _669, _670)) * 0.5) + 0.5;
        float _2218 = _2217 * _2217;
        float _4111 = isnan(0.0) ? _2218 : (isnan(_2218) ? 0.0 : max(_2218, 0.0));
        float _2219 = isnan(1.0) ? _4111 : (isnan(_4111) ? 1.0 : min(_4111, 1.0));
        float _2220 = isnan(1.0) ? _1911 : (isnan(_1911) ? 1.0 : min(_1911, 1.0));
        _2028 = (((cbLight._m0[_2201].x * 0.3183098733425140380859375) * _2219) * _2220) + _1983;
        _2030 = (((cbLight._m0[_2201].y * 0.3183098733425140380859375) * _2219) * _2220) + _1985;
        _2032 = (((cbLight._m0[_2201].z * 0.3183098733425140380859375) * _2219) * _2220) + _1987;
    }
    uint _2035 = _1895 + 8u;
    float _2048 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1895].w)) * _671) * 0.949999988079071044921875);
    float _2049 = _2048 * _2048;
    float _2050 = cbLight._m0[_1895].x + _748;
    float _2051 = cbLight._m0[_1895].y + _749;
    float _2052 = cbLight._m0[_1895].z + _750;
    float _2056 = inversesqrt(dot(vec3(_2050, _2051, _2052), vec3(_2050, _2051, _2052)));
    float _2057 = _2056 * _2050;
    float _2058 = _2056 * _2051;
    float _2059 = _2056 * _2052;
    float _2060 = dot(vec3(_668, _669, _670), vec3(cbLight._m0[_1895].xyz));
    float _4127 = isnan(0.0) ? _2060 : (isnan(_2060) ? 0.0 : max(_2060, 0.0));
    float _2063 = isnan(1.0) ? _4127 : (isnan(_4127) ? 1.0 : min(_4127, 1.0));
    float _4138 = isnan(0.0) ? _835 : (isnan(_835) ? 0.0 : max(_835, 0.0));
    float _2064 = isnan(1.0) ? _4138 : (isnan(_4138) ? 1.0 : min(_4138, 1.0));
    float _2065 = dot(vec3(_668, _669, _670), vec3(_2057, _2058, _2059));
    float _4149 = isnan(0.0) ? _2065 : (isnan(_2065) ? 0.0 : max(_2065, 0.0));
    float _2068 = isnan(1.0) ? _4149 : (isnan(_4149) ? 1.0 : min(_4149, 1.0));
    float _2069 = dot(vec3(cbLight._m0[_1895].xyz), vec3(_2057, _2058, _2059));
    float _4160 = isnan(0.0) ? _2069 : (isnan(_2069) ? 0.0 : max(_2069, 0.0));
    float _2073 = _2049 * _2049;
    float _2077 = ((_2068 * _2068) * (_2073 + (-1.0))) + 1.0;
    float _2085 = exp2(log2(1.0 - (isnan(1.0) ? _4160 : (isnan(_4160) ? 1.0 : min(_4160, 1.0)))) * 5.0);
    float _2086 = 0.959999978542327880859375 - _816;
    float _2088 = 0.959999978542327880859375 - _817;
    float _2089 = 0.959999978542327880859375 - _818;
    float _2096 = 1.0 - _2049;
    float _2107 = (0.5 / (((_2064 * ((_2063 * _2096) + _2049)) + 9.9999999392252902907785028219223e-09) + (((_2064 * _2096) + _2049) * _2063))) * _2063;
    float _4171 = isnan(0.0) ? _2107 : (isnan(_2107) ? 0.0 : max(_2107, 0.0));
    float _2109 = (isnan(1.0) ? _4171 : (isnan(_4171) ? 1.0 : min(_4171, 1.0))) * (_2073 / ((_2077 * _2077) * 3.141590118408203125));
    uint _2123 = _1895 + 9u;
    float _2134 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1936].w)) * _671) * 0.949999988079071044921875);
    float _2135 = _2134 * _2134;
    float _2136 = cbLight._m0[_1936].x + _748;
    float _2137 = cbLight._m0[_1936].y + _749;
    float _2138 = cbLight._m0[_1936].z + _750;
    float _2142 = inversesqrt(dot(vec3(_2136, _2137, _2138), vec3(_2136, _2137, _2138)));
    float _2143 = _2142 * _2136;
    float _2144 = _2142 * _2137;
    float _2145 = _2142 * _2138;
    float _2146 = dot(vec3(_668, _669, _670), vec3(cbLight._m0[_1936].xyz));
    float _4182 = isnan(0.0) ? _2146 : (isnan(_2146) ? 0.0 : max(_2146, 0.0));
    float _2149 = isnan(1.0) ? _4182 : (isnan(_4182) ? 1.0 : min(_4182, 1.0));
    float _2150 = dot(vec3(_668, _669, _670), vec3(_2143, _2144, _2145));
    float _4193 = isnan(0.0) ? _2150 : (isnan(_2150) ? 0.0 : max(_2150, 0.0));
    float _2153 = isnan(1.0) ? _4193 : (isnan(_4193) ? 1.0 : min(_4193, 1.0));
    float _2154 = dot(vec3(cbLight._m0[_1936].xyz), vec3(_2143, _2144, _2145));
    float _4204 = isnan(0.0) ? _2154 : (isnan(_2154) ? 0.0 : max(_2154, 0.0));
    float _2158 = _2135 * _2135;
    float _2162 = ((_2153 * _2153) * (_2158 + (-1.0))) + 1.0;
    float _2169 = exp2(log2(1.0 - (isnan(1.0) ? _4204 : (isnan(_4204) ? 1.0 : min(_4204, 1.0)))) * 5.0);
    float _2176 = 1.0 - _2135;
    float _2186 = (0.5 / (((_2064 * ((_2149 * _2176) + _2135)) + 9.9999999392252902907785028219223e-09) + (((_2064 * _2176) + _2135) * _2149))) * _2149;
    float _4215 = isnan(0.0) ? _2186 : (isnan(_2186) ? 0.0 : max(_2186, 0.0));
    float _2188 = (isnan(1.0) ? _4215 : (isnan(_4215) ? 1.0 : min(_4215, 1.0))) * (_2158 / ((_2162 * _2162) * 3.141590118408203125));
    float _2198 = (((((_2169 * _2086) + _819) * cbLight._m0[_2123].x) * _2188) * _1918) + ((((cbLight._m0[_2035].x * _1887) * ((_2085 * _2086) + _819)) * _2109) * _1932);
    float _2199 = (((((_2169 * _2088) + _821) * cbLight._m0[_2123].y) * _2188) * _1918) + ((((cbLight._m0[_2035].y * _1888) * ((_2085 * _2088) + _821)) * _2109) * _1932);
    float _2200 = (((((_2169 * _2089) + _822) * cbLight._m0[_2123].z) * _2188) * _1918) + ((((cbLight._m0[_2035].z * _1889) * ((_2085 * _2089) + _822)) * _2109) * _1932);
    float _2262;
    float _2264;
    float _2266;
    if (_1972)
    {
        _2262 = _2198;
        _2264 = _2199;
        _2266 = _2200;
    }
    else
    {
        uint _2268 = _1895 + 2u;
        uint _2272 = _1895 + 10u;
        float _2286 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2268].w)) * _671) * 0.949999988079071044921875);
        float _2287 = _2286 * _2286;
        float _2288 = cbLight._m0[_2268].x + _748;
        float _2289 = cbLight._m0[_2268].y + _749;
        float _2290 = cbLight._m0[_2268].z + _750;
        float _2294 = inversesqrt(dot(vec3(_2288, _2289, _2290), vec3(_2288, _2289, _2290)));
        float _2295 = _2294 * _2288;
        float _2296 = _2294 * _2289;
        float _2297 = _2294 * _2290;
        float _2298 = dot(vec3(_668, _669, _670), vec3(cbLight._m0[_2268].xyz));
        float _4226 = isnan(0.0) ? _2298 : (isnan(_2298) ? 0.0 : max(_2298, 0.0));
        float _2301 = isnan(1.0) ? _4226 : (isnan(_4226) ? 1.0 : min(_4226, 1.0));
        float _2302 = dot(vec3(_668, _669, _670), vec3(_2295, _2296, _2297));
        float _4237 = isnan(0.0) ? _2302 : (isnan(_2302) ? 0.0 : max(_2302, 0.0));
        float _2305 = isnan(1.0) ? _4237 : (isnan(_4237) ? 1.0 : min(_4237, 1.0));
        float _2306 = dot(vec3(cbLight._m0[_2268].xyz), vec3(_2295, _2296, _2297));
        float _4248 = isnan(0.0) ? _2306 : (isnan(_2306) ? 0.0 : max(_2306, 0.0));
        float _2310 = _2287 * _2287;
        float _2314 = ((_2305 * _2305) * (_2310 + (-1.0))) + 1.0;
        float _2321 = exp2(log2(1.0 - (isnan(1.0) ? _4248 : (isnan(_4248) ? 1.0 : min(_4248, 1.0)))) * 5.0);
        float _2328 = 1.0 - _2287;
        float _2338 = (0.5 / (((_2064 * ((_2301 * _2328) + _2287)) + 9.9999999392252902907785028219223e-09) + (((_2064 * _2328) + _2287) * _2301))) * _2301;
        float _4259 = isnan(0.0) ? _2338 : (isnan(_2338) ? 0.0 : max(_2338, 0.0));
        float _2340 = (isnan(1.0) ? _4259 : (isnan(_4259) ? 1.0 : min(_4259, 1.0))) * (_2310 / ((_2314 * _2314) * 3.141590118408203125));
        float _2341 = isnan(1.0) ? _1910 : (isnan(_1910) ? 1.0 : min(_1910, 1.0));
        _2262 = (((((_2321 * _2086) + _819) * cbLight._m0[_2272].x) * _2340) * _2341) + _2198;
        _2264 = (((((_2321 * _2088) + _821) * cbLight._m0[_2272].y) * _2340) * _2341) + _2199;
        _2266 = (((((_2321 * _2089) + _822) * cbLight._m0[_2272].z) * _2340) * _2341) + _2200;
    }
    float _2376;
    float _2378;
    float _2380;
    if (_1990)
    {
        _2376 = _2262;
        _2378 = _2264;
        _2380 = _2266;
    }
    else
    {
        uint _2387 = _1895 + 3u;
        uint _2391 = _1895 + 11u;
        float _2405 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2387].w)) * _671) * 0.949999988079071044921875);
        float _2406 = _2405 * _2405;
        float _2407 = cbLight._m0[_2387].x + _748;
        float _2408 = cbLight._m0[_2387].y + _749;
        float _2409 = cbLight._m0[_2387].z + _750;
        float _2413 = inversesqrt(dot(vec3(_2407, _2408, _2409), vec3(_2407, _2408, _2409)));
        float _2414 = _2413 * _2407;
        float _2415 = _2413 * _2408;
        float _2416 = _2413 * _2409;
        float _2417 = dot(vec3(_668, _669, _670), vec3(cbLight._m0[_2387].xyz));
        float _4275 = isnan(0.0) ? _2417 : (isnan(_2417) ? 0.0 : max(_2417, 0.0));
        float _2420 = isnan(1.0) ? _4275 : (isnan(_4275) ? 1.0 : min(_4275, 1.0));
        float _2421 = dot(vec3(_668, _669, _670), vec3(_2414, _2415, _2416));
        float _4286 = isnan(0.0) ? _2421 : (isnan(_2421) ? 0.0 : max(_2421, 0.0));
        float _2424 = isnan(1.0) ? _4286 : (isnan(_4286) ? 1.0 : min(_4286, 1.0));
        float _2425 = dot(vec3(cbLight._m0[_2387].xyz), vec3(_2414, _2415, _2416));
        float _4297 = isnan(0.0) ? _2425 : (isnan(_2425) ? 0.0 : max(_2425, 0.0));
        float _2429 = _2406 * _2406;
        float _2433 = ((_2424 * _2424) * (_2429 + (-1.0))) + 1.0;
        float _2440 = exp2(log2(1.0 - (isnan(1.0) ? _4297 : (isnan(_4297) ? 1.0 : min(_4297, 1.0)))) * 5.0);
        float _2447 = 1.0 - _2406;
        float _2457 = (0.5 / (((_2064 * ((_2420 * _2447) + _2406)) + 9.9999999392252902907785028219223e-09) + (((_2064 * _2447) + _2406) * _2420))) * _2420;
        float _4308 = isnan(0.0) ? _2457 : (isnan(_2457) ? 0.0 : max(_2457, 0.0));
        float _2459 = (isnan(1.0) ? _4308 : (isnan(_4308) ? 1.0 : min(_4308, 1.0))) * (_2429 / ((_2433 * _2433) * 3.141590118408203125));
        float _2460 = isnan(1.0) ? _1911 : (isnan(_1911) ? 1.0 : min(_1911, 1.0));
        _2376 = (((((_2440 * _2086) + _819) * cbLight._m0[_2391].x) * _2459) * _2460) + _2262;
        _2378 = (((((_2440 * _2088) + _821) * cbLight._m0[_2391].y) * _2459) * _2460) + _2264;
        _2380 = (((((_2440 * _2089) + _822) * cbLight._m0[_2391].z) * _2459) * _2460) + _2266;
    }
    float _2595;
    float _2597;
    float _2599;
    float _2601;
    float _2603;
    float _2605;
    if (_1893.y == 0u)
    {
        float _2535 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2536 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2535;
        float _2537 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2535;
        float _2538 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2535;
        uvec4 _2550 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2551 = _2550.x;
        uint _2562 = uint((float(_2550.y) * floor(float(uint(cbSceneParam._m0[85u].y * _757) / _2551))) + floor(float(uint(cbSceneParam._m0[85u].x * _756) / _2551)));
        float _2572 = (log2(_2538 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2573 = isnan(0.0) ? _2572 : (isnan(_2572) ? 0.0 : max(_2572, 0.0));
        uint _2576 = uint(isnan(14.0) ? _2573 : (isnan(_2573) ? 14.0 : min(_2573, 14.0)));
        uvec4 _2581 = texelFetch(g_lightClusterGridBuffer, int(((_2576 << 2u) + (_2562 << 6u)) >> 2u));
        uint _2582 = _2581.x;
        uint _2583 = _2550.z;
        float _2683;
        float _2685;
        float _2687;
        float _2689;
        float _2691;
        float _2693;
        if (((((1u << ((_2583 >> 4u) & 15u)) + 4294967295u) & _2582) == 0u) || ((_2583 & 240u) == 0u))
        {
            _2683 = 0.0;
            _2685 = 0.0;
            _2687 = 0.0;
            _2689 = 0.0;
            _2691 = 0.0;
            _2693 = 0.0;
        }
        else
        {
            float _2684;
            float _2686;
            float _2688;
            float _2690;
            float _2692;
            float _2694;
            float _2827 = 0.0;
            float _2828 = 0.0;
            float _2829 = 0.0;
            float _2830 = 0.0;
            float _2831 = 0.0;
            float _2832 = 0.0;
            uint _2833 = 0u;
            uint _2842;
            bool _2843;
            for (;;)
            {
                _2842 = texelFetch(g_lightClassification, int((((_2576 << 5u) + (_2562 << 9u)) + (_2833 << 2u)) >> 2u)).x;
                _2843 = _2842 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2843)
                {
                    frontier_phi_61_pred = _2827;
                    frontier_phi_61_pred_1 = _2832;
                    frontier_phi_61_pred_2 = _2831;
                    frontier_phi_61_pred_3 = _2830;
                    frontier_phi_61_pred_4 = _2829;
                    frontier_phi_61_pred_5 = _2828;
                }
                else
                {
                    float _2951;
                    float _2952;
                    float _2953;
                    float _2954;
                    float _2955;
                    float _2956;
                    uint _2957;
                    _2951 = _2827;
                    _2952 = _2828;
                    _2953 = _2829;
                    _2954 = _2830;
                    _2955 = _2831;
                    _2956 = _2832;
                    _2957 = _2842;
                    float _2883;
                    float _2884;
                    float _2885;
                    float _2886;
                    float _2887;
                    float _2888;
                    for (;;)
                    {
                        uint _2961 = uint(findLSB(_2957)) + (_2833 << 5u);
                        uint _2958 = (_2957 + 4294967295u) & _2957;
                        uint _2963 = _2961 * 48u;
                        vec4 _2977 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2963)).x, texelFetch(g_PointLightRenderingBuffer, int(_2963 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2963 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2963 + 3u)).x));
                        uint _2983 = (_2961 * 48u) + 4u;
                        vec4 _2996 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2983)).x, texelFetch(g_PointLightRenderingBuffer, int(_2983 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2983 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2983 + 3u)).x));
                        uint _3002 = (_2961 * 48u) + 8u;
                        vec3 _3013 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3002)).x, texelFetch(g_PointLightRenderingBuffer, int(_3002 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3002 + 2u)).x));
                        float _3017 = _2977.x - _2536;
                        float _3018 = _2977.y - _2537;
                        float _3019 = _2977.z - _2538;
                        float _3020 = dot(vec3(_3017, _3018, _3019), vec3(_3017, _3018, _3019));
                        float _3023 = inversesqrt(_3020);
                        float _3024 = _3023 * _3017;
                        float _3025 = _3023 * _3018;
                        float _3026 = _3023 * _3019;
                        float _3027 = dot(vec3(_775, _778, _781), vec3(_3024, _3025, _3026));
                        float _3032 = 1.0 - (_3020 * _2977.w);
                        float _4334 = isnan(0.0) ? _3032 : (isnan(_3032) ? 0.0 : max(_3032, 0.0));
                        float _3033 = isnan(1.0) ? _4334 : (isnan(_4334) ? 1.0 : min(_4334, 1.0));
                        float _3034 = sqrt(_3020) * _2996.w;
                        float _3037 = 1.39999997615814208984375 / (_3034 + 1.39999997615814208984375);
                        float _3038 = _3037 * _3037;
                        float _3041 = ((1.0 - _3038) * _3027) + _3038;
                        float _3044 = _3034 * _3034;
                        float _3048 = ((isnan(0.0) ? _3041 : (isnan(_3041) ? 0.0 : max(_3041, 0.0))) * _3033) / ((_3044 * 0.699999988079071044921875) + 1.0);
                        float _3052 = (-0.0) - _2536;
                        float _3053 = (-0.0) - _2537;
                        float _3054 = (-0.0) - _2538;
                        float _3058 = inversesqrt(dot(vec3(_3052, _3053, _3054), vec3(_3052, _3053, _3054)));
                        float _3059 = _3058 * _3052;
                        float _3060 = _3058 * _3053;
                        float _3061 = _3058 * _3054;
                        float _3069 = exp2(log2(1.0 / ((_3044 * 3.5) + 5.0)) * 0.25);
                        float _3070 = 1.0 - _850;
                        float _3077 = sqrt(1.0 - ((1.0 - (_3070 * _3070)) * (1.0 - (_3069 * _3069))));
                        float _3078 = _3077 * _3077;
                        float _3079 = _3078 * _3078;
                        float _3080 = _3059 + _3024;
                        float _3081 = _3060 + _3025;
                        float _3082 = _3061 + _3026;
                        float _3086 = inversesqrt(dot(vec3(_3080, _3081, _3082), vec3(_3080, _3081, _3082)));
                        float _3090 = dot(vec3(_775, _778, _781), vec3(_3059, _3060, _3061));
                        float _4350 = isnan(0.0) ? _3090 : (isnan(_3090) ? 0.0 : max(_3090, 0.0));
                        float _3093 = isnan(1.0) ? _4350 : (isnan(_4350) ? 1.0 : min(_4350, 1.0));
                        float _3094 = dot(vec3(_775, _778, _781), vec3(_3086 * _3080, _3086 * _3081, _3086 * _3082));
                        float _4361 = isnan(0.0) ? _3094 : (isnan(_3094) ? 0.0 : max(_3094, 0.0));
                        float _3097 = isnan(1.0) ? _4361 : (isnan(_4361) ? 1.0 : min(_4361, 1.0));
                        float _3101 = ((_3097 * _3097) * (_3079 + (-1.0))) + 1.0;
                        float _3102 = _3037 * _3078;
                        float _3103 = _3102 * _3102;
                        float _3106 = ((1.0 - _3103) * _3027) + _3103;
                        float _4372 = isnan(0.0) ? _3106 : (isnan(_3106) ? 0.0 : max(_3106, 0.0));
                        float _3107 = isnan(1.0) ? _4372 : (isnan(_4372) ? 1.0 : min(_4372, 1.0));
                        float _3108 = 1.0 - _3078;
                        float _3118 = (0.5 / (((_3107 * ((_3093 * _3108) + _3078)) + 9.9999999392252902907785028219223e-09) + (((_3107 * _3108) + _3078) * _3093))) * _3107;
                        float _4383 = isnan(0.0) ? _3118 : (isnan(_3118) ? 0.0 : max(_3118, 0.0));
                        float _3129 = (((_3079 * 3.1415927410125732421875) * (isnan(1.0) ? _4383 : (isnan(_4383) ? 1.0 : min(_4383, 1.0)))) / ((_3101 * _3101) * ((_3044 * 2.1991131305694580078125) + 3.141590118408203125))) * _3033;
                        _2886 = (_3048 * _2996.x) + _2954;
                        _2887 = (_3048 * _2996.y) + _2955;
                        _2888 = (_3048 * _2996.z) + _2956;
                        _2883 = (_3129 * _3013.x) + _2951;
                        _2884 = (_3129 * _3013.y) + _2952;
                        _2885 = (_3129 * _3013.z) + _2953;
                        if (_2958 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2951 = _2883;
                            _2952 = _2884;
                            _2953 = _2885;
                            _2954 = _2886;
                            _2955 = _2887;
                            _2956 = _2888;
                            _2957 = _2958;
                        }
                    }
                    frontier_phi_61_pred = _2883;
                    frontier_phi_61_pred_1 = _2888;
                    frontier_phi_61_pred_2 = _2887;
                    frontier_phi_61_pred_3 = _2886;
                    frontier_phi_61_pred_4 = _2885;
                    frontier_phi_61_pred_5 = _2884;
                }
                _2684 = frontier_phi_61_pred;
                _2694 = frontier_phi_61_pred_1;
                _2692 = frontier_phi_61_pred_2;
                _2690 = frontier_phi_61_pred_3;
                _2688 = frontier_phi_61_pred_4;
                _2686 = frontier_phi_61_pred_5;
                uint _2834 = _2833 + 1u;
                if (_2834 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2827 = _2684;
                    _2828 = _2686;
                    _2829 = _2688;
                    _2830 = _2690;
                    _2831 = _2692;
                    _2832 = _2694;
                    _2833 = _2834;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2683 = _2684;
            _2685 = _2686;
            _2687 = _2688;
            _2689 = _2690;
            _2691 = _2692;
            _2693 = _2694;
        }
        uvec4 _2697 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2698 = _2697.z;
        uint _2700 = (_2698 >> 8u) & 15u;
        float _2795;
        float _2797;
        float _2799;
        float _2801;
        float _2803;
        float _2805;
        if (((4294967295u << _2700) & _2582) == 0u)
        {
            _2795 = _2683;
            _2797 = _2685;
            _2799 = _2687;
            _2801 = _2689;
            _2803 = _2691;
            _2805 = _2693;
        }
        else
        {
            float _2820 = inversesqrt(dot(vec3(_2536, _2537, _2538), vec3(_2536, _2537, _2538)));
            float _2821 = _2820 * _2536;
            float _2822 = _2820 * _2537;
            float _2823 = _2820 * _2538;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2700 < ((_2698 >> 12u) & 15u))
            {
                float _2796;
                float _2798;
                float _2800;
                float _2802;
                float _2804;
                float _2806;
                float _2934 = _2683;
                float _2935 = _2685;
                float _2936 = _2687;
                float _2937 = _2689;
                float _2938 = _2691;
                float _2939 = _2693;
                uint _2940 = _2700;
                uint _2949;
                bool _2950;
                for (;;)
                {
                    _2949 = texelFetch(g_lightClassification, int((((_2576 << 5u) + (_2562 << 9u)) + (_2940 << 2u)) >> 2u)).x;
                    _2950 = _2949 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2950)
                    {
                        frontier_phi_67_pred = _2937;
                        frontier_phi_67_pred_1 = _2938;
                        frontier_phi_67_pred_2 = _2939;
                        frontier_phi_67_pred_3 = _2936;
                        frontier_phi_67_pred_4 = _2935;
                        frontier_phi_67_pred_5 = _2934;
                    }
                    else
                    {
                        float _3134;
                        float _3135;
                        float _3136;
                        float _3137;
                        float _3138;
                        float _3139;
                        float _3428;
                        float _3429;
                        float _3430;
                        float _3431;
                        float _3432;
                        float _3433;
                        float _3147 = _2934;
                        float _3148 = _2935;
                        float _3149 = _2936;
                        float _3150 = _2937;
                        float _3151 = _2938;
                        float _3152 = _2939;
                        uint _3153 = _2949;
                        uint _3154;
                        vec4 _3179;
                        float _3180;
                        vec4 _3195;
                        vec3 _3207;
                        vec4 _3222;
                        vec4 _3237;
                        float _3284;
                        bool _3285;
                        for (;;)
                        {
                            uint _3164 = ((_2940 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3153));
                            _3154 = (_3153 + 4294967295u) & _3153;
                            uint _3166 = _3164 * 40u;
                            _3179 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3166)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3166 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3166 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3166 + 3u)).x));
                            _3180 = _3179.w;
                            uint _3182 = (_3164 * 40u) + 4u;
                            _3195 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3182)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3182 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3182 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3182 + 3u)).x));
                            uint _3197 = (_3164 * 40u) + 8u;
                            _3207 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3197)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3197 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3197 + 2u)).x));
                            uint _3209 = (_3164 * 40u) + 16u;
                            _3222 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3209)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3209 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3209 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3209 + 3u)).x));
                            uint _3224 = (_3164 * 40u) + 20u;
                            _3237 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3224)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3224 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3224 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3224 + 3u)).x));
                            uint _3240 = (_3164 * 40u) + 24u;
                            vec4 _3253 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3240)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3240 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3240 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3240 + 3u)).x));
                            uint _3259 = (_3164 * 40u) + 28u;
                            vec4 _3272 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3259)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3259 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3259 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3259 + 3u)).x));
                            _3284 = fma(_2538, _3272.z, fma(_2537, _3272.y, _3272.x * _2536)) + _3272.w;
                            _3285 = !((fma(_2538, _3253.z, fma(_2537, _3253.y, _3253.x * _2536)) + _3253.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3285)
                            {
                                float _3312 = _3179.x - _2536;
                                float _3313 = _3179.y - _2537;
                                float _3314 = _3179.z - _2538;
                                float _3315 = dot(vec3(_3312, _3313, _3314), vec3(_3312, _3313, _3314));
                                float _3318 = inversesqrt(_3315);
                                float _3319 = _3318 * _3312;
                                float _3320 = _3318 * _3313;
                                float _3321 = _3318 * _3314;
                                float _3325 = 1.0 - (_3315 / (_3180 * _3180));
                                float _4394 = isnan(0.0) ? _3325 : (isnan(_3325) ? 0.0 : max(_3325, 0.0));
                                float _3326 = isnan(1.0) ? _4394 : (isnan(_4394) ? 1.0 : min(_4394, 1.0));
                                float _3330 = sqrt(_3315) * _3195.w;
                                float _3332 = 1.39999997615814208984375 / (_3330 + 1.39999997615814208984375);
                                float _3333 = _3332 * _3332;
                                float _3336 = ((1.0 - _3333) * dot(vec3(_3319, _3320, _3321), vec3(_775, _778, _781))) + _3333;
                                float _3339 = _3330 * _3330;
                                float _3343 = (fma(_2538, _3222.z, fma(_2537, _3222.y, _3222.x * _2536)) + _3222.w) / _3284;
                                float _3344 = (fma(_2538, _3237.z, fma(_2537, _3237.y, _3237.x * _2536)) + _3237.w) / _3284;
                                float _3348 = 1.0 - dot(vec2(_3343, _3344), vec2(_3343, _3344));
                                float _4410 = isnan(0.0) ? _3348 : (isnan(_3348) ? 0.0 : max(_3348, 0.0));
                                float _3349 = isnan(1.0) ? _4410 : (isnan(_4410) ? 1.0 : min(_4410, 1.0));
                                float _3350 = _3349 * (((isnan(0.0) ? _3336 : (isnan(_3336) ? 0.0 : max(_3336, 0.0))) * _3326) / ((_3339 * 0.699999988079071044921875) + 1.0));
                                float _3362 = exp2(log2(1.0 / ((_3339 * 3.5) + 5.0)) * 0.25);
                                float _3363 = 1.0 - _850;
                                float _3370 = sqrt(1.0 - ((1.0 - (_3363 * _3363)) * (1.0 - (_3362 * _3362))));
                                float _3371 = _3370 * _3370;
                                float _3372 = _3371 * _3371;
                                float _3373 = _3319 - _2821;
                                float _3374 = _3320 - _2822;
                                float _3375 = _3321 - _2823;
                                float _3379 = inversesqrt(dot(vec3(_3373, _3374, _3375), vec3(_3373, _3374, _3375)));
                                float _3383 = dot(vec3(_775, _778, _781), vec3((-0.0) - _2821, (-0.0) - _2822, (-0.0) - _2823));
                                float _4421 = isnan(0.0) ? _3383 : (isnan(_3383) ? 0.0 : max(_3383, 0.0));
                                float _3386 = isnan(1.0) ? _4421 : (isnan(_4421) ? 1.0 : min(_4421, 1.0));
                                float _3387 = dot(vec3(_775, _778, _781), vec3(_3379 * _3373, _3379 * _3374, _3379 * _3375));
                                float _4432 = isnan(0.0) ? _3387 : (isnan(_3387) ? 0.0 : max(_3387, 0.0));
                                float _3390 = isnan(1.0) ? _4432 : (isnan(_4432) ? 1.0 : min(_4432, 1.0));
                                float _3394 = ((_3390 * _3390) * (_3372 + (-1.0))) + 1.0;
                                float _3395 = _3332 * _3371;
                                float _3396 = _3395 * _3395;
                                float _3402 = ((1.0 - _3396) * dot(vec3(_775, _778, _781), vec3(_3319, _3320, _3321))) + _3396;
                                float _4443 = isnan(0.0) ? _3402 : (isnan(_3402) ? 0.0 : max(_3402, 0.0));
                                float _3403 = isnan(1.0) ? _4443 : (isnan(_4443) ? 1.0 : min(_4443, 1.0));
                                float _3404 = 1.0 - _3371;
                                float _3414 = (0.5 / (((_3403 * ((_3386 * _3404) + _3371)) + 9.9999999392252902907785028219223e-09) + (((_3403 * _3404) + _3371) * _3386))) * _3403;
                                float _4454 = isnan(0.0) ? _3414 : (isnan(_3414) ? 0.0 : max(_3414, 0.0));
                                float _3424 = (_3349 * _3326) * (((_3372 * 3.1415927410125732421875) * (isnan(1.0) ? _4454 : (isnan(_4454) ? 1.0 : min(_4454, 1.0)))) / ((_3394 * _3394) * ((_3339 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3424 * _3207.x;
                                frontier_phi_73_pred_1 = _3424 * _3207.y;
                                frontier_phi_73_pred_2 = _3350 * _3195.z;
                                frontier_phi_73_pred_3 = _3350 * _3195.y;
                                frontier_phi_73_pred_4 = _3350 * _3195.x;
                                frontier_phi_73_pred_5 = _3424 * _3207.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3428 = frontier_phi_73_pred;
                            _3429 = frontier_phi_73_pred_1;
                            _3433 = frontier_phi_73_pred_2;
                            _3432 = frontier_phi_73_pred_3;
                            _3431 = frontier_phi_73_pred_4;
                            _3430 = frontier_phi_73_pred_5;
                            _3137 = _3431 + _3150;
                            _3138 = _3432 + _3151;
                            _3139 = _3433 + _3152;
                            _3134 = _3428 + _3147;
                            _3135 = _3429 + _3148;
                            _3136 = _3430 + _3149;
                            if (_3154 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3147 = _3134;
                                _3148 = _3135;
                                _3149 = _3136;
                                _3150 = _3137;
                                _3151 = _3138;
                                _3152 = _3139;
                                _3153 = _3154;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3137;
                        frontier_phi_67_pred_1 = _3138;
                        frontier_phi_67_pred_2 = _3139;
                        frontier_phi_67_pred_3 = _3136;
                        frontier_phi_67_pred_4 = _3135;
                        frontier_phi_67_pred_5 = _3134;
                    }
                    _2802 = frontier_phi_67_pred;
                    _2804 = frontier_phi_67_pred_1;
                    _2806 = frontier_phi_67_pred_2;
                    _2800 = frontier_phi_67_pred_3;
                    _2798 = frontier_phi_67_pred_4;
                    _2796 = frontier_phi_67_pred_5;
                    uint _2941 = _2940 + 1u;
                    if (_2941 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2934 = _2796;
                        _2935 = _2798;
                        _2936 = _2800;
                        _2937 = _2802;
                        _2938 = _2804;
                        _2939 = _2806;
                        _2940 = _2941;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2804;
                frontier_phi_55_56_ladder_1 = _2806;
                frontier_phi_55_56_ladder_2 = _2802;
                frontier_phi_55_56_ladder_3 = _2800;
                frontier_phi_55_56_ladder_4 = _2798;
                frontier_phi_55_56_ladder_5 = _2796;
            }
            else
            {
                frontier_phi_55_56_ladder = _2691;
                frontier_phi_55_56_ladder_1 = _2693;
                frontier_phi_55_56_ladder_2 = _2689;
                frontier_phi_55_56_ladder_3 = _2687;
                frontier_phi_55_56_ladder_4 = _2685;
                frontier_phi_55_56_ladder_5 = _2683;
            }
            _2795 = frontier_phi_55_56_ladder_5;
            _2797 = frontier_phi_55_56_ladder_4;
            _2799 = frontier_phi_55_56_ladder_3;
            _2801 = frontier_phi_55_56_ladder_2;
            _2803 = frontier_phi_55_56_ladder;
            _2805 = frontier_phi_55_56_ladder_1;
        }
        float _2810 = isnan(1.0) ? _834 : (isnan(_834) ? 1.0 : min(_834, 1.0));
        _2595 = (_2810 * _2801) + _2028;
        _2597 = (_2810 * _2803) + _2030;
        _2599 = (_2810 * _2805) + _2032;
        _2601 = ((_2795 * _819) * _2810) + _2376;
        _2603 = ((_2797 * _821) * _2810) + _2378;
        _2605 = ((_2799 * _822) * _2810) + _2380;
    }
    else
    {
        _2595 = _2028;
        _2597 = _2030;
        _2599 = _2032;
        _2601 = _2376;
        _2603 = _2378;
        _2605 = _2380;
    }
    float _4470 = isnan(0.0) ? _809 : (isnan(_809) ? 0.0 : max(_809, 0.0));
    float _4481 = isnan(0.0) ? _810 : (isnan(_810) ? 0.0 : max(_810, 0.0));
    float _4492 = isnan(0.0) ? _811 : (isnan(_811) ? 0.0 : max(_811, 0.0));
    uint _2625 = _794 + 6u;
    float _2633 = _756 / cbSceneParam._m0[86u].x;
    float _2634 = _757 / cbSceneParam._m0[86u].y;
    vec4 _2648 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2633, _2634, (log2((isnan(cbSceneParam._m0[77u].w) ? _691 : (isnan(_691) ? cbSceneParam._m0[77u].w : min(_691, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2650 = _2648.x;
    float _2651 = _2648.y;
    float _2652 = _2648.z;
    float _2653 = _2648.w;
    float _2745;
    float _2747;
    float _2749;
    float _2751;
    if (_691 > cbSceneParam._m0[78u].w)
    {
        float _2708 = isnan(_691) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _691 : min(cbSceneParam._m0[80u].w, _691));
        float _2709 = _2708 / _691;
        float _2720 = _2709 * _741;
        float _2721 = _742 * _2709;
        float _2722 = (-0.0) - _2721;
        float _2723 = _2709 * _743;
        float _2725 = (cbSceneParam._m0[77u].w * _2722) / _2708;
        float _2726 = _2725 + cbSceneParam._m0[79u].w;
        float _2727 = cbSceneParam._m0[79u].w - _2721;
        float _2733 = sqrt(((_2720 * _2720) + (_2721 * _2721)) + (_2723 * _2723));
        float _2736 = (1.0 - (cbSceneParam._m0[77u].w / _2708)) * _2733;
        float _2741 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2743 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2896;
        if (abs((_2722 - _2725) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2896 = ((((_2726 > 0.0) ? exp2(_2741 * _2726) : (2.0 - exp2(_2743 * _2726))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2736;
        }
        else
        {
            float _2856 = 1.0 / cbSceneParam._m0[80u].x;
            float _2857 = isnan(_2727) ? _2726 : (isnan(_2726) ? _2727 : max(_2726, _2727));
            float _2858 = isnan(_2727) ? _2726 : (isnan(_2726) ? _2727 : min(_2726, _2727));
            float _2867 = isnan(0.0) ? _2857 : (isnan(_2857) ? 0.0 : min(_2857, 0.0));
            float _2868 = isnan(0.0) ? _2858 : (isnan(_2858) ? 0.0 : min(_2858, 0.0));
            _2896 = ((abs(_2733 / _2722) * cbSceneParam._m0[80u].y) * ((((_2867 - _2868) * 2.0) - ((exp2(_2741 * (isnan(0.0) ? _2857 : (isnan(_2857) ? 0.0 : max(_2857, 0.0)))) - exp2(_2741 * (isnan(0.0) ? _2858 : (isnan(_2858) ? 0.0 : max(_2858, 0.0))))) * _2856)) - ((exp2(_2743 * _2867) - exp2(_2743 * _2868)) * _2856))) + (_2736 * cbSceneParam._m0[80u].z);
        }
        vec4 _2898 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2633, _2634, 1.0), 0.0);
        float _2907 = exp2((_2896 * (-1.44269502162933349609375)) * (1.0 - _2898.w));
        float _2908 = log2(_2907);
        float _2924 = log2(_2653);
        _2745 = (exp2(_2924 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2908 * cbSceneParam._m0[78u].x)) * _2898.x) / cbSceneParam._m0[78u].x)) + _2650;
        _2747 = (exp2(_2924 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2908 * cbSceneParam._m0[78u].y)) * _2898.y) / cbSceneParam._m0[78u].y)) + _2651;
        _2749 = (exp2(_2924 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2908 * cbSceneParam._m0[78u].z)) * _2898.z) / cbSceneParam._m0[78u].z)) + _2652;
        _2751 = _2907 * _2653;
    }
    else
    {
        _2745 = _2650;
        _2747 = _2651;
        _2749 = _2652;
        _2751 = _2653;
    }
    float _2763 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2764 = _2763 == 3.0;
    float _2765 = log2(_2751);
    float _2772 = exp2(_2765 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4470 : (isnan(_4470) ? 1.0 : min(_4470, 1.0))) * (_2595 + ((isnan(0.0) ? _1565 : (isnan(_1565) ? 0.0 : max(_1565, 0.0))) * _834))) + ((_2601 + ((isnan(0.0) ? _1859 : (isnan(_1859) ? 0.0 : max(_1859, 0.0))) * _1644)) * cbPerFrame._m0[3u].x));
    float _2773 = exp2(_2765 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4481 : (isnan(_4481) ? 1.0 : min(_4481, 1.0))) * (_2597 + ((isnan(0.0) ? _1568 : (isnan(_1568) ? 0.0 : max(_1568, 0.0))) * _834))) + ((_2603 + ((isnan(0.0) ? _1862 : (isnan(_1862) ? 0.0 : max(_1862, 0.0))) * _1644)) * cbPerFrame._m0[3u].x));
    float _2774 = exp2(_2765 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4492 : (isnan(_4492) ? 1.0 : min(_4492, 1.0))) * (_2599 + ((isnan(0.0) ? _1571 : (isnan(_1571) ? 0.0 : max(_1571, 0.0))) * _834))) + ((_2605 + ((isnan(0.0) ? _1865 : (isnan(_1865) ? 0.0 : max(_1865, 0.0))) * _1644)) * cbPerFrame._m0[3u].x));
    float _2783 = (_2763 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2783 * (_2764 ? _2772 : (_2772 + (cbSceneParam._m0[72u].w * _2745)));
    SV_Target.y = _2783 * (_2764 ? _2773 : (_2773 + (cbSceneParam._m0[72u].w * _2747)));
    SV_Target.z = _2783 * (_2764 ? _2774 : (_2774 + (cbSceneParam._m0[72u].w * _2749)));
    SV_Target.w = cbInstanceData._m0[_2625].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2625].w;
}


