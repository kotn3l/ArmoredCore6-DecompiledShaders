#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[20];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_19;
layout(set = 0, binding = 11) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_2;
layout(set = 0, binding = 12) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_20;
layout(set = 0, binding = 13) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_3;
layout(set = 0, binding = 14) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_5;
layout(set = 0, binding = 15) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_6;
layout(set = 0, binding = 17) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_8;
layout(set = 0, binding = 18) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_11;
layout(set = 0, binding = 3) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_12;
layout(set = 0, binding = 4) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_13;
layout(set = 0, binding = 5) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_14;
layout(set = 0, binding = 6) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_15;
layout(set = 0, binding = 7) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_16;
layout(set = 0, binding = 8) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_17;
layout(set = 0, binding = 9) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_18;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1371;
float _4036;
float _4037;
float _4038;
float _4039;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _221 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _222 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _223 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _229 = inversesqrt(dot(vec3(_221, _222, _223), vec3(_221, _222, _223)));
    float _236 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _243 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _266 = sin(cbMtdParam._m0[18u].x);
    float _267 = cos(cbMtdParam._m0[18u].x);
    float _268 = TEXCOORD.x - cbMtdParam._m0[17u].w;
    float _269 = TEXCOORD.y - cbMtdParam._m0[17u].w;
    float _277 = (cbMtdParam._m0[17u].w + cbMtdParam._m0[19u].y) + fma(_269, (-0.0) - _266, _267 * _268);
    float _279 = (cbMtdParam._m0[17u].w + cbMtdParam._m0[19u].z) + fma(_269, _267, _268 * _266);
    vec4 _292 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * _277) + cbTextureTilingScale._m0[1u].z, (_279 * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w));
    float _298 = _292.x * cbMtdParam._m0[10u].x;
    float _299 = _292.y * cbMtdParam._m0[10u].y;
    float _300 = _292.z * cbMtdParam._m0[10u].z;
    vec4 _318 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w));
    vec4 _337 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_0, SS_WrapLinear), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _362 = cbMtdParam._m0[19u].x * texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.x) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD.y) + cbTextureTilingScale._m0[13u].w)).x;
    float _373 = ((cbMtdParam._m0[15u].x * (-1.39999997615814208984375)) * (((1.0 - _337.x) * 2.0) - _362)) + 1.0;
    float _4048 = isnan(0.0) ? _373 : (isnan(_373) ? 0.0 : max(_373, 0.0));
    float _374 = isnan(1.0) ? _4048 : (isnan(_4048) ? 1.0 : min(_4048, 1.0));
    float _381 = (_374 * ((_318.x * cbMtdParam._m0[11u].x) - _298)) + _298;
    float _382 = (_374 * ((_318.y * cbMtdParam._m0[11u].y) - _299)) + _299;
    float _383 = (_374 * ((_318.z * cbMtdParam._m0[11u].z) - _300)) + _300;
    vec4 _401 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_8, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[17u].x * TEXCOORD.x) + cbTextureTilingScale._m0[17u].z, (cbTextureTilingScale._m0[17u].y * TEXCOORD.y) + cbTextureTilingScale._m0[17u].w));
    float _414 = (((((1.0 - _337.y) * 2.0) - _362) * (-1.39999997615814208984375)) * cbMtdParam._m0[18u].z) + 1.0;
    float _4059 = isnan(0.0) ? _414 : (isnan(_414) ? 0.0 : max(_414, 0.0));
    float _415 = isnan(1.0) ? _4059 : (isnan(_4059) ? 1.0 : min(_4059, 1.0));
    float _422 = (((_401.x * cbMtdParam._m0[12u].x) - _381) * _415) + _381;
    float _423 = (_415 * ((_401.y * cbMtdParam._m0[12u].y) - _382)) + _382;
    float _424 = (_415 * ((_401.z * cbMtdParam._m0[12u].z) - _383)) + _383;
    vec4 _441 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _454 = (((((1.0 - _337.z) * 2.0) - _362) * (-1.39999997615814208984375)) * cbMtdParam._m0[18u].w) + 1.0;
    float _4070 = isnan(0.0) ? _454 : (isnan(_454) ? 0.0 : max(_454, 0.0));
    float _455 = isnan(1.0) ? _4070 : (isnan(_4070) ? 1.0 : min(_4070, 1.0));
    vec4 _483 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _491 = ((((((_441.x * cbMtdParam._m0[13u].x) - _422) * _455) + _422) * 4.55000019073486328125) * cbMtdParam._m0[9u].x) * _483.x;
    float _494 = ((((_455 * ((_441.y * cbMtdParam._m0[13u].y) - _423)) + _423) * 4.55000019073486328125) * cbMtdParam._m0[9u].y) * _483.y;
    float _497 = ((((_455 * ((_441.z * cbMtdParam._m0[13u].z) - _424)) + _424) * 4.55000019073486328125) * cbMtdParam._m0[9u].z) * _483.z;
    vec4 _517 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_20, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.z) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.w) + cbTextureTilingScale._m0[12u].w));
    float _546 = (TEXCOORD_5.x - ((cbMtdParam._m0[15u].w * (1.0 - TEXCOORD_5.x)) * (texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[18u].x * TEXCOORD.z) + cbTextureTilingScale._m0[18u].z, (cbTextureTilingScale._m0[18u].y * TEXCOORD.w) + cbTextureTilingScale._m0[18u].w)).x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[15u].z + 1.0);
    float _4081 = isnan(0.0) ? _546 : (isnan(_546) ? 0.0 : max(_546, 0.0));
    float _547 = isnan(1.0) ? _4081 : (isnan(_4081) ? 1.0 : min(_4081, 1.0));
    float _554 = (_547 * ((_517.x * cbMtdParam._m0[14u].x) - _491)) + _491;
    float _555 = (_547 * ((_517.y * cbMtdParam._m0[14u].y) - _494)) + _494;
    float _556 = (_547 * ((_517.z * cbMtdParam._m0[14u].z) - _497)) + _497;
    vec4 _569 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * _277) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _279) + cbTextureTilingScale._m0[5u].w));
    float _571 = _569.x;
    float _589 = ((texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w)).x - _571) * _374) + _571;
    float _606 = ((texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w)).x - _589) * _415) + _589;
    float _623 = ((texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w)).x - _606) * _455) + _606;
    float _627 = (_623 - (_623 * TEXCOORD_5.x)) * cbMtdParam._m0[18u].y;
    vec4 _640 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.z) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.w) + cbTextureTilingScale._m0[3u].w));
    vec4 _662 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[14u].x * _277) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _279) + cbTextureTilingScale._m0[14u].w));
    float _664 = _662.x;
    float _665 = _662.y;
    float _668 = cbMtdParam._m0[17u].y * _662.z;
    vec4 _680 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * TEXCOORD.x) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * TEXCOORD.y) + cbTextureTilingScale._m0[15u].w));
    float _689 = (((cbMtdParam._m0[17u].x * _680.z) - _668) * _374) + _668;
    vec4 _702 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_15, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _714 = (((cbMtdParam._m0[16u].w * _702.z) - _689) * _415) + _689;
    vec4 _727 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _736 = (((cbMtdParam._m0[16u].z * _727.z) - _714) * _455) + _714;
    float _741 = ((cbMtdParam._m0[16u].x * TEXCOORD_5.x) * ((_640.z * cbMtdParam._m0[17u].z) - _736)) + _736;
    float _746 = ((_680.x - _664) * _374) + _664;
    float _747 = ((_680.y - _665) * _374) + _665;
    float _752 = ((_702.x - _746) * _415) + _746;
    float _753 = ((_702.y - _747) * _415) + _747;
    float _762 = ((((_727.x - _752) * _455) + _752) * 2.0) + (-1.0);
    float _763 = ((((_727.y - _753) * _455) + _753) * 2.0) + (-1.0);
    float _764 = dot(vec2(_762, _763), vec2(_762, _763));
    float _4092 = isnan(0.0) ? _764 : (isnan(_764) ? 0.0 : max(_764, 0.0));
    float _769 = sqrt(1.0 - (isnan(1.0) ? _4092 : (isnan(_4092) ? 1.0 : min(_4092, 1.0))));
    float _775 = ((((_640.x * 2.0) + (-1.0)) * TEXCOORD_5.x) * cbMtdParam._m0[15u].y) + _762;
    float _776 = ((((_640.y * 2.0) + (-1.0)) * TEXCOORD_5.y) * cbMtdParam._m0[15u].y) + _763;
    float _779 = fma(_769, _236 * NORMAL.x, fma(_776, _243 * TANGENT.x, (_229 * _221) * _775));
    float _782 = fma(_769, _236 * NORMAL.y, fma(_776, _243 * TANGENT.y, (_229 * _222) * _775));
    float _785 = fma(_769, _236 * NORMAL.z, fma(_776, _243 * TANGENT.z, (_229 * _223) * _775));
    float _789 = inversesqrt(dot(vec3(_779, _782, _785), vec3(_779, _782, _785)));
    float _790 = _789 * _779;
    float _791 = _789 * _782;
    float _792 = _789 * _785;
    float _4103 = isnan(0.0) ? _741 : (isnan(_741) ? 0.0 : max(_741, 0.0));
    float _793 = isnan(1.0) ? _4103 : (isnan(_4103) ? 1.0 : min(_4103, 1.0));
    float _4114 = isnan(0.0) ? _554 : (isnan(_554) ? 0.0 : max(_554, 0.0));
    float _4125 = isnan(0.0) ? _555 : (isnan(_555) ? 0.0 : max(_555, 0.0));
    float _4136 = isnan(0.0) ? _556 : (isnan(_556) ? 0.0 : max(_556, 0.0));
    float _4147 = isnan(0.0) ? _627 : (isnan(_627) ? 0.0 : max(_627, 0.0));
    float _797 = isnan(1.0) ? _4147 : (isnan(_4147) ? 1.0 : min(_4147, 1.0));
    float _813 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _853 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _863 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _853);
    float _864 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _853);
    float _865 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _853);
    float _869 = inversesqrt(dot(vec3(_863, _864, _865), vec3(_863, _864, _865)));
    float _870 = _863 * _869;
    float _871 = _864 * _869;
    float _872 = _865 * _869;
    vec4 _877 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _879 = _877.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1051 = sqrt(((_863 * _863) + (_864 * _864)) + (_865 * _865));
        float _1057 = (cbMatDynParam._m0[5u].x * _1051) + cbMatDynParam._m0[5u].y;
        float _4158 = isnan(0.0) ? _1057 : (isnan(_1057) ? 0.0 : max(_1057, 0.0));
        float _1058 = isnan(1.0) ? _4158 : (isnan(_4158) ? 1.0 : min(_4158, 1.0));
        float _1062 = (cbMatDynParam._m0[5u].z * _1051) + cbMatDynParam._m0[5u].w;
        float _4169 = isnan(0.0) ? _1062 : (isnan(_1062) ? 0.0 : max(_1062, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4169 : (isnan(_4169) ? 1.0 : min(_4169, 1.0))) - _1058)) + _1058) < ((_879 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _890 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _891 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _909 = fma(_792, cbSceneParam._m0[5u].z, fma(_791, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _790));
    float _912 = fma(_792, cbSceneParam._m0[6u].z, fma(_791, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _790));
    float _915 = fma(_792, cbSceneParam._m0[7u].z, fma(_791, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _790));
    uint _928 = uint(roundEven(NORMAL.w)) * 13u;
    uint _929 = _928 + 9u;
    uint _930 = _929 + uint(cbMatDynParam._m0[0u].w);
    float _936 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4114 : (isnan(_4114) ? 1.0 : min(_4114, 1.0)))) * cbInstanceData._m0[_930].x;
    float _937 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4125 : (isnan(_4125) ? 1.0 : min(_4125, 1.0)))) * cbInstanceData._m0[_930].y;
    float _938 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4136 : (isnan(_4136) ? 1.0 : min(_4136, 1.0)))) * cbInstanceData._m0[_930].z;
    float _4180 = isnan(0.0) ? _936 : (isnan(_936) ? 0.0 : max(_936, 0.0));
    float _939 = isnan(1.0) ? _4180 : (isnan(_4180) ? 1.0 : min(_4180, 1.0));
    float _4191 = isnan(0.0) ? _937 : (isnan(_937) ? 0.0 : max(_937, 0.0));
    float _940 = isnan(1.0) ? _4191 : (isnan(_4191) ? 1.0 : min(_4191, 1.0));
    float _4202 = isnan(0.0) ? _938 : (isnan(_938) ? 0.0 : max(_938, 0.0));
    float _941 = isnan(1.0) ? _4202 : (isnan(_4202) ? 1.0 : min(_4202, 1.0));
    float _942 = 1.0 - _797;
    float _943 = _939 * _942;
    float _944 = _940 * _942;
    float _945 = _941 * _942;
    float _950 = (_939 + (-0.039999999105930328369140625)) * _797;
    float _951 = (_940 + (-0.039999999105930328369140625)) * _797;
    float _952 = (_941 + (-0.039999999105930328369140625)) * _797;
    float _953 = _950 + 0.039999999105930328369140625;
    float _955 = _951 + 0.039999999105930328369140625;
    float _956 = _952 + 0.039999999105930328369140625;
    vec4 _965 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _890, cbSceneParam._m0[86u].y * _891));
    float _968 = _965.x * TEXCOORD_5.w;
    float _969 = dot(vec3(_790, _791, _792), vec3(_870, _871, _872));
    float _972 = _969 * 2.0;
    float _976 = (_972 * _790) - _870;
    float _977 = (_972 * _791) - _871;
    float _978 = (_972 * _792) - _872;
    float _982 = abs(dot(vec3(_870, _871, _872), vec3(_790, _791, _792)));
    float _4213 = isnan(0.0) ? _982 : (isnan(_982) ? 0.0 : max(_982, 0.0));
    float _984 = sqrt(_793);
    float _997 = exp2((_984 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4213 : (isnan(_4213) ? 1.0 : min(_4213, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_984 * 3.0));
    float _1003 = (1.0 - _997) * ((_984 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1004 = _997 * _984;
    float _1032 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1036 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1040 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1370;
    float _1372;
    float _1373;
    float _1374;
    float _1375;
    float _1376;
    float _1377;
    float _1378;
    float _1379;
    float _1380;
    float _1381;
    float _1382;
    float _1383;
    float _1384;
    float _1385;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1095 = fma(_1040, cbModelParam._m0[26u].z, fma(_1036, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1032));
        float _1099 = fma(_1040, cbModelParam._m0[27u].z, fma(_1036, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1032));
        float _1103 = fma(_1040, cbModelParam._m0[28u].z, fma(_1036, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1032));
        float _1128 = _1032 + _790;
        float _1129 = _1036 + _791;
        float _1130 = _1040 + _792;
        float _1140 = fma(_1130, cbModelParam._m0[26u].z, fma(_1129, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1128)) - _1095;
        float _1141 = fma(_1130, cbModelParam._m0[27u].z, fma(_1129, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1128)) - _1099;
        float _1142 = fma(_1130, cbModelParam._m0[28u].z, fma(_1129, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1128)) - _1103;
        float _1146 = inversesqrt(dot(vec3(_1140, _1141, _1142), vec3(_1140, _1141, _1142)));
        float _1159 = ((_1146 * _1140) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1095 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1160 = ((_1146 * _1141) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1099 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1161 = ((_1146 * _1142) / cbModelParam._m0[34u].z) + ((((((_1103 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1164 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1159, _1160, _1161), 0.0);
        vec4 _1171 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1159, _1160, _1161), 0.0);
        vec4 _1178 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1159, _1160, _1161), 0.0);
        vec4 _1185 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1159, _1160, _1161), 0.0);
        float _1198 = exp2((_1164.w + (-0.5)) * 20.0) * 2.0;
        float _1199 = _1198 * (_1164.x + (-0.5));
        float _1200 = _1198 * (_1164.y + (-0.5));
        float _1201 = _1198 * (_1164.z + (-0.5));
        float _1208 = exp2((_1171.w + (-0.5)) * 20.0) * 2.0;
        float _1209 = _1208 * (_1171.x + (-0.5));
        float _1210 = _1208 * (_1171.y + (-0.5));
        float _1211 = _1208 * (_1171.z + (-0.5));
        float _1218 = exp2((_1178.w + (-0.5)) * 20.0) * 2.0;
        float _1219 = _1218 * (_1178.x + (-0.5));
        float _1220 = _1218 * (_1178.y + (-0.5));
        float _1221 = _1218 * (_1178.z + (-0.5));
        float _1228 = exp2((_1185.w + (-0.5)) * 20.0) * 2.0;
        float _1229 = _1228 * (_1185.x + (-0.5));
        float _1230 = _1228 * (_1185.y + (-0.5));
        float _1231 = _1228 * (_1185.z + (-0.5));
        float _1232 = isnan(0.0) ? _1229 : (isnan(_1229) ? 0.0 : max(_1229, 0.0));
        float _1233 = isnan(0.0) ? _1230 : (isnan(_1230) ? 0.0 : max(_1230, 0.0));
        float _1234 = isnan(0.0) ? _1231 : (isnan(_1231) ? 0.0 : max(_1231, 0.0));
        float _1235 = _1199 * 0.5;
        float _1236 = _1209 * 0.5;
        float _1237 = _1219 * 0.5;
        float _1238 = dot(vec3(_1235, _1236, _1237), vec3(_1235, _1236, _1237));
        float _1243 = (_1238 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1238);
        float _1252 = (dot(vec3(_790, _791, _792), vec3(_1243 * _1235, _1243 * _1236, _1243 * _1237)) + 1.0) * 0.5;
        float _4239 = isnan(0.0) ? _1252 : (isnan(_1252) ? 0.0 : max(_1252, 0.0));
        float _1262 = sqrt(((_1236 * _1236) + (_1235 * _1235)) + (_1237 * _1237)) / (_1232 + 9.9999997473787516355514526367188e-06);
        float _4250 = isnan(0.0) ? _1262 : (isnan(_1262) ? 0.0 : max(_1262, 0.0));
        float _1263 = isnan(1.0) ? _4250 : (isnan(_4250) ? 1.0 : min(_4250, 1.0));
        float _1264 = _1263 * 2.0;
        float _1268 = (1.0 - _1263) / (_1263 + 1.0);
        float _4261 = isnan(0.0) ? _1268 : (isnan(_1268) ? 0.0 : max(_1268, 0.0));
        float _1269 = isnan(1.0) ? _4261 : (isnan(_4261) ? 1.0 : min(_4261, 1.0));
        float _1278 = ((((1.0 - _1269) * (_1264 + 2.0)) * exp2(log2(isnan(1.0) ? _4239 : (isnan(_4239) ? 1.0 : min(_4239, 1.0))) * (_1264 + 1.0))) + _1269) * _1232;
        float _1279 = _1200 * 0.5;
        float _1280 = _1210 * 0.5;
        float _1281 = _1220 * 0.5;
        float _1282 = dot(vec3(_1279, _1280, _1281), vec3(_1279, _1280, _1281));
        float _1287 = (_1282 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1282);
        float _1295 = (dot(vec3(_790, _791, _792), vec3(_1287 * _1279, _1287 * _1280, _1287 * _1281)) + 1.0) * 0.5;
        float _4272 = isnan(0.0) ? _1295 : (isnan(_1295) ? 0.0 : max(_1295, 0.0));
        float _1304 = sqrt(((_1280 * _1280) + (_1279 * _1279)) + (_1281 * _1281)) / (_1233 + 9.9999997473787516355514526367188e-06);
        float _4283 = isnan(0.0) ? _1304 : (isnan(_1304) ? 0.0 : max(_1304, 0.0));
        float _1305 = isnan(1.0) ? _4283 : (isnan(_4283) ? 1.0 : min(_4283, 1.0));
        float _1306 = _1305 * 2.0;
        float _1310 = (1.0 - _1305) / (_1305 + 1.0);
        float _4294 = isnan(0.0) ? _1310 : (isnan(_1310) ? 0.0 : max(_1310, 0.0));
        float _1311 = isnan(1.0) ? _4294 : (isnan(_4294) ? 1.0 : min(_4294, 1.0));
        float _1320 = ((((1.0 - _1311) * (_1306 + 2.0)) * exp2(log2(isnan(1.0) ? _4272 : (isnan(_4272) ? 1.0 : min(_4272, 1.0))) * (_1306 + 1.0))) + _1311) * _1233;
        float _1321 = _1201 * 0.5;
        float _1322 = _1211 * 0.5;
        float _1323 = _1221 * 0.5;
        float _1324 = dot(vec3(_1321, _1322, _1323), vec3(_1321, _1322, _1323));
        float _1329 = (_1324 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1324);
        float _1337 = (dot(vec3(_790, _791, _792), vec3(_1329 * _1321, _1329 * _1322, _1329 * _1323)) + 1.0) * 0.5;
        float _4305 = isnan(0.0) ? _1337 : (isnan(_1337) ? 0.0 : max(_1337, 0.0));
        float _1346 = sqrt(((_1322 * _1322) + (_1321 * _1321)) + (_1323 * _1323)) / (_1234 + 9.9999997473787516355514526367188e-06);
        float _4316 = isnan(0.0) ? _1346 : (isnan(_1346) ? 0.0 : max(_1346, 0.0));
        float _1347 = isnan(1.0) ? _4316 : (isnan(_4316) ? 1.0 : min(_4316, 1.0));
        float _1348 = _1347 * 2.0;
        float _1352 = (1.0 - _1347) / (_1347 + 1.0);
        float _4327 = isnan(0.0) ? _1352 : (isnan(_1352) ? 0.0 : max(_1352, 0.0));
        float _1353 = isnan(1.0) ? _4327 : (isnan(_4327) ? 1.0 : min(_4327, 1.0));
        float _1362 = ((((1.0 - _1353) * (_1348 + 2.0)) * exp2(log2(isnan(1.0) ? _4305 : (isnan(_4305) ? 1.0 : min(_4305, 1.0))) * (_1348 + 1.0))) + _1353) * _1234;
        _1370 = _1201;
        _1372 = _1200;
        _1373 = _1199;
        _1374 = _1211;
        _1375 = _1210;
        _1376 = _1209;
        _1377 = _1221;
        _1378 = _1220;
        _1379 = _1219;
        _1380 = _1234;
        _1381 = _1233;
        _1382 = _1232;
        _1383 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1278 : (isnan(_1278) ? 0.0 : max(_1278, 0.0)));
        _1384 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1320 : (isnan(_1320) ? 0.0 : max(_1320, 0.0)));
        _1385 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1362 : (isnan(_1362) ? 0.0 : max(_1362, 0.0)));
    }
    else
    {
        _1370 = _1371;
        _1372 = _1371;
        _1373 = _1371;
        _1374 = _1371;
        _1375 = _1371;
        _1376 = _1371;
        _1377 = _1371;
        _1378 = _1371;
        _1379 = _1371;
        _1380 = _1371;
        _1381 = _1371;
        _1382 = _1371;
        _1383 = 0.0;
        _1384 = 0.0;
        _1385 = 0.0;
    }
    float _1683;
    float _1684;
    float _1685;
    float _1686;
    float _1687;
    float _1688;
    float _1689;
    float _1690;
    float _1691;
    float _1692;
    float _1693;
    float _1694;
    float _1695;
    float _1696;
    float _1697;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1414 = fma(_1040, cbModelParam._m0[30u].z, fma(_1036, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1032));
        float _1418 = fma(_1040, cbModelParam._m0[31u].z, fma(_1036, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1032));
        float _1422 = fma(_1040, cbModelParam._m0[32u].z, fma(_1036, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1032));
        float _1445 = _1032 + _790;
        float _1446 = _1036 + _791;
        float _1447 = _1040 + _792;
        float _1457 = fma(_1447, cbModelParam._m0[30u].z, fma(_1446, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1445)) - _1414;
        float _1458 = fma(_1447, cbModelParam._m0[31u].z, fma(_1446, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1445)) - _1418;
        float _1459 = fma(_1447, cbModelParam._m0[32u].z, fma(_1446, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1445)) - _1422;
        float _1463 = inversesqrt(dot(vec3(_1457, _1458, _1459), vec3(_1457, _1458, _1459)));
        float _1476 = ((_1463 * _1457) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1414 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1477 = ((_1463 * _1458) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1418 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1478 = ((_1463 * _1459) / cbModelParam._m0[35u].z) + ((((((_1422 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1480 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1476, _1477, _1478), 0.0);
        vec4 _1487 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1476, _1477, _1478), 0.0);
        vec4 _1494 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1476, _1477, _1478), 0.0);
        vec4 _1501 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1476, _1477, _1478), 0.0);
        float _1513 = exp2((_1480.w + (-0.5)) * 20.0) * 2.0;
        float _1514 = _1513 * (_1480.x + (-0.5));
        float _1515 = _1513 * (_1480.y + (-0.5));
        float _1516 = _1513 * (_1480.z + (-0.5));
        float _1523 = exp2((_1487.w + (-0.5)) * 20.0) * 2.0;
        float _1524 = _1523 * (_1487.x + (-0.5));
        float _1525 = _1523 * (_1487.y + (-0.5));
        float _1526 = _1523 * (_1487.z + (-0.5));
        float _1533 = exp2((_1494.w + (-0.5)) * 20.0) * 2.0;
        float _1534 = _1533 * (_1494.x + (-0.5));
        float _1535 = _1533 * (_1494.y + (-0.5));
        float _1536 = _1533 * (_1494.z + (-0.5));
        float _1543 = exp2((_1501.w + (-0.5)) * 20.0) * 2.0;
        float _1544 = _1543 * (_1501.x + (-0.5));
        float _1545 = _1543 * (_1501.y + (-0.5));
        float _1546 = _1543 * (_1501.z + (-0.5));
        float _1547 = isnan(0.0) ? _1544 : (isnan(_1544) ? 0.0 : max(_1544, 0.0));
        float _1548 = isnan(0.0) ? _1545 : (isnan(_1545) ? 0.0 : max(_1545, 0.0));
        float _1549 = isnan(0.0) ? _1546 : (isnan(_1546) ? 0.0 : max(_1546, 0.0));
        float _1550 = _1514 * 0.5;
        float _1551 = _1524 * 0.5;
        float _1552 = _1534 * 0.5;
        float _1553 = dot(vec3(_1550, _1551, _1552), vec3(_1550, _1551, _1552));
        float _1558 = (_1553 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1553);
        float _1566 = (dot(vec3(_790, _791, _792), vec3(_1558 * _1550, _1558 * _1551, _1558 * _1552)) + 1.0) * 0.5;
        float _4368 = isnan(0.0) ? _1566 : (isnan(_1566) ? 0.0 : max(_1566, 0.0));
        float _1575 = sqrt(((_1551 * _1551) + (_1550 * _1550)) + (_1552 * _1552)) / (_1547 + 9.9999997473787516355514526367188e-06);
        float _4379 = isnan(0.0) ? _1575 : (isnan(_1575) ? 0.0 : max(_1575, 0.0));
        float _1576 = isnan(1.0) ? _4379 : (isnan(_4379) ? 1.0 : min(_4379, 1.0));
        float _1577 = _1576 * 2.0;
        float _1581 = (1.0 - _1576) / (_1576 + 1.0);
        float _4390 = isnan(0.0) ? _1581 : (isnan(_1581) ? 0.0 : max(_1581, 0.0));
        float _1582 = isnan(1.0) ? _4390 : (isnan(_4390) ? 1.0 : min(_4390, 1.0));
        float _1591 = ((((1.0 - _1582) * (_1577 + 2.0)) * exp2(log2(isnan(1.0) ? _4368 : (isnan(_4368) ? 1.0 : min(_4368, 1.0))) * (_1577 + 1.0))) + _1582) * _1547;
        float _1592 = _1515 * 0.5;
        float _1593 = _1525 * 0.5;
        float _1594 = _1535 * 0.5;
        float _1595 = dot(vec3(_1592, _1593, _1594), vec3(_1592, _1593, _1594));
        float _1600 = (_1595 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1595);
        float _1608 = (dot(vec3(_790, _791, _792), vec3(_1600 * _1592, _1600 * _1593, _1600 * _1594)) + 1.0) * 0.5;
        float _4401 = isnan(0.0) ? _1608 : (isnan(_1608) ? 0.0 : max(_1608, 0.0));
        float _1617 = sqrt(((_1593 * _1593) + (_1592 * _1592)) + (_1594 * _1594)) / (_1548 + 9.9999997473787516355514526367188e-06);
        float _4412 = isnan(0.0) ? _1617 : (isnan(_1617) ? 0.0 : max(_1617, 0.0));
        float _1618 = isnan(1.0) ? _4412 : (isnan(_4412) ? 1.0 : min(_4412, 1.0));
        float _1619 = _1618 * 2.0;
        float _1623 = (1.0 - _1618) / (_1618 + 1.0);
        float _4423 = isnan(0.0) ? _1623 : (isnan(_1623) ? 0.0 : max(_1623, 0.0));
        float _1624 = isnan(1.0) ? _4423 : (isnan(_4423) ? 1.0 : min(_4423, 1.0));
        float _1633 = ((((1.0 - _1624) * (_1619 + 2.0)) * exp2(log2(isnan(1.0) ? _4401 : (isnan(_4401) ? 1.0 : min(_4401, 1.0))) * (_1619 + 1.0))) + _1624) * _1548;
        float _1634 = _1516 * 0.5;
        float _1635 = _1526 * 0.5;
        float _1636 = _1536 * 0.5;
        float _1637 = dot(vec3(_1634, _1635, _1636), vec3(_1634, _1635, _1636));
        float _1642 = (_1637 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1637);
        float _1650 = (dot(vec3(_790, _791, _792), vec3(_1642 * _1634, _1642 * _1635, _1642 * _1636)) + 1.0) * 0.5;
        float _4434 = isnan(0.0) ? _1650 : (isnan(_1650) ? 0.0 : max(_1650, 0.0));
        float _1659 = sqrt(((_1635 * _1635) + (_1634 * _1634)) + (_1636 * _1636)) / (_1549 + 9.9999997473787516355514526367188e-06);
        float _4445 = isnan(0.0) ? _1659 : (isnan(_1659) ? 0.0 : max(_1659, 0.0));
        float _1660 = isnan(1.0) ? _4445 : (isnan(_4445) ? 1.0 : min(_4445, 1.0));
        float _1661 = _1660 * 2.0;
        float _1665 = (1.0 - _1660) / (_1660 + 1.0);
        float _4456 = isnan(0.0) ? _1665 : (isnan(_1665) ? 0.0 : max(_1665, 0.0));
        float _1666 = isnan(1.0) ? _4456 : (isnan(_4456) ? 1.0 : min(_4456, 1.0));
        float _1675 = ((((1.0 - _1666) * (_1661 + 2.0)) * exp2(log2(isnan(1.0) ? _4434 : (isnan(_4434) ? 1.0 : min(_4434, 1.0))) * (_1661 + 1.0))) + _1666) * _1549;
        _1683 = _1516;
        _1684 = _1515;
        _1685 = _1514;
        _1686 = _1526;
        _1687 = _1525;
        _1688 = _1524;
        _1689 = _1536;
        _1690 = _1535;
        _1691 = _1534;
        _1692 = _1549;
        _1693 = _1548;
        _1694 = _1547;
        _1695 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1591 : (isnan(_1591) ? 0.0 : max(_1591, 0.0)));
        _1696 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1633 : (isnan(_1633) ? 0.0 : max(_1633, 0.0)));
        _1697 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1675 : (isnan(_1675) ? 0.0 : max(_1675, 0.0)));
    }
    else
    {
        _1683 = _1371;
        _1684 = _1371;
        _1685 = _1371;
        _1686 = _1371;
        _1687 = _1371;
        _1688 = _1371;
        _1689 = _1371;
        _1690 = _1371;
        _1691 = _1371;
        _1692 = _1371;
        _1693 = _1371;
        _1694 = _1371;
        _1695 = 0.0;
        _1696 = 0.0;
        _1697 = 0.0;
    }
    float _1707 = (cbModelParam._m0[1u].x * (_1695 - _1383)) + _1383;
    float _1708 = (cbModelParam._m0[1u].x * (_1696 - _1384)) + _1384;
    float _1709 = (cbModelParam._m0[1u].x * (_1697 - _1385)) + _1385;
    float _1730 = fma(_1709, cbSceneParam._m0[89u].z, fma(_1708, cbSceneParam._m0[89u].y, _1707 * cbSceneParam._m0[89u].x));
    float _1733 = fma(_1709, cbSceneParam._m0[90u].z, fma(_1708, cbSceneParam._m0[90u].y, _1707 * cbSceneParam._m0[90u].x));
    float _1736 = fma(_1709, cbSceneParam._m0[91u].z, fma(_1708, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1707));
    float _1751 = _976 * 0.5;
    float _1752 = _977 * 0.5;
    float _1753 = _978 * 0.5;
    float _1754 = dot(vec4(_1751, _1752, _1753, 1.0), vec4(_1685, _1688, _1691, _1694));
    float _1757 = dot(vec4(_1751, _1752, _1753, 1.0), vec4(_1684, _1687, _1690, _1693));
    float _1760 = dot(vec4(_1751, _1752, _1753, 1.0), vec4(_1683, _1686, _1689, _1692));
    float _1794;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1767 = dot(vec4(_1751, _1752, _1753, 1.0), vec4(_1370, _1374, _1377, _1380));
        float _1771 = dot(vec4(_1751, _1752, _1753, 1.0), vec4(_1372, _1375, _1378, _1381));
        float _1775 = dot(vec4(_1751, _1752, _1753, 1.0), vec4(_1373, _1376, _1379, _1382));
        float _1782 = dot(vec4(cbModelParam._m0[39u]), vec4(_1751, _1752, _1753, 1.0));
        _1794 = dot(vec3(isnan(0.0) ? _1775 : (isnan(_1775) ? 0.0 : max(_1775, 0.0)), isnan(0.0) ? _1771 : (isnan(_1771) ? 0.0 : max(_1771, 0.0)), isnan(0.0) ? _1767 : (isnan(_1767) ? 0.0 : max(_1767, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1782) ? 0.0 : (isnan(0.0) ? _1782 : max(0.0, _1782))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1794 = 1.0;
    }
    float _1805;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1796 = dot(vec4(cbModelParam._m0[40u]), vec4(_1751, _1752, _1753, 1.0));
        _1805 = dot(vec3(isnan(0.0) ? _1754 : (isnan(_1754) ? 0.0 : max(_1754, 0.0)), isnan(0.0) ? _1757 : (isnan(_1757) ? 0.0 : max(_1757, 0.0)), isnan(0.0) ? _1760 : (isnan(_1760) ? 0.0 : max(_1760, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1796) ? 0.0 : (isnan(0.0) ? _1796 : max(0.0, _1796))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1805 = 1.0;
    }
    float _1809 = (_1805 * cbModelParam._m0[1u].x) + (_1794 * (1.0 - cbModelParam._m0[1u].x));
    float _1819 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _793);
    float _1820 = isnan(_1819) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1819 : min(cbModelParam._m0[25u].z, _1819));
    float _1900;
    float _1902;
    float _1904;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1867 = fma(_1040, cbModelParam._m0[13u].z, fma(_1036, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1032)) + cbModelParam._m0[13u].w;
        float _1871 = fma(_1040, cbModelParam._m0[14u].z, fma(_1036, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1032)) + cbModelParam._m0[14u].w;
        float _1875 = fma(_1040, cbModelParam._m0[15u].z, fma(_1036, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1032)) + cbModelParam._m0[15u].w;
        float _1878 = fma(_978, cbModelParam._m0[13u].z, fma(_977, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _976));
        float _1881 = fma(_978, cbModelParam._m0[14u].z, fma(_977, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _976));
        float _1884 = fma(_978, cbModelParam._m0[15u].z, fma(_977, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _976));
        float _1912;
        if (_1878 > 0.0)
        {
            _1912 = abs((1.0 - _1867) / _1878);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1878 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1867 + 1.0) / _1878);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1912 = frontier_phi_17_15_ladder;
        }
        float _2085;
        if (_1881 > 0.0)
        {
            _2085 = abs((1.0 - _1871) / _1881);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1881 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1871 + 1.0) / _1881);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2085 = frontier_phi_26_22_ladder;
        }
        float _2380;
        if (_1884 > 0.0)
        {
            _2380 = abs((1.0 - _1875) / _1884);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1884 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1875 + 1.0) / _1884);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2380 = frontier_phi_38_33_ladder;
        }
        float _2382 = isnan(_2085) ? _1912 : (isnan(_1912) ? _2085 : min(_1912, _2085));
        float _2383 = isnan(_2380) ? _2382 : (isnan(_2382) ? _2380 : min(_2382, _2380));
        float _2387 = (_2383 * _1878) + _1867;
        float _2388 = (_2383 * _1881) + _1871;
        float _2389 = (_2383 * _1884) + _1875;
        float _2390 = _2383 * 9.9999997473787516355514526367188e-05;
        float _2392 = (-1.0) - _2390;
        float _2394 = _2390 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2389 > _2394) || ((_2389 < _2392) || ((_2388 > _2394) || ((_2388 < _2392) || ((_2387 < _2392) || (_2387 > _2394))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2534 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2389, cbModelParam._m0[9u].z, fma(_2388, cbModelParam._m0[9u].y, _2387 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2389, cbModelParam._m0[10u].z, fma(_2388, cbModelParam._m0[10u].y, _2387 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2389, cbModelParam._m0[11u].z, fma(_2388, cbModelParam._m0[11u].y, _2387 * cbModelParam._m0[11u].x))), _1820);
            frontier_phi_16_38_ladder = _2534.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2534.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2534.x * cbModelParam._m0[1u].y;
        }
        _1900 = frontier_phi_16_38_ladder_2;
        _1902 = frontier_phi_16_38_ladder_1;
        _1904 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1888 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_976, _977, _978), _1820);
        _1900 = _1888.x * cbModelParam._m0[1u].y;
        _1902 = _1888.y * cbModelParam._m0[1u].y;
        _1904 = _1888.z * cbModelParam._m0[1u].y;
    }
    float _1908 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _793);
    float _1909 = isnan(_1908) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1908 : min(cbModelParam._m0[25u].w, _1908));
    float _2000;
    float _2002;
    float _2004;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1964 = fma(_1040, cbModelParam._m0[21u].z, fma(_1036, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1032)) + cbModelParam._m0[21u].w;
        float _1968 = fma(_1040, cbModelParam._m0[22u].z, fma(_1036, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1032)) + cbModelParam._m0[22u].w;
        float _1972 = fma(_1040, cbModelParam._m0[23u].z, fma(_1036, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1032)) + cbModelParam._m0[23u].w;
        float _1975 = fma(_978, cbModelParam._m0[21u].z, fma(_977, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _976));
        float _1978 = fma(_978, cbModelParam._m0[22u].z, fma(_977, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _976));
        float _1981 = fma(_978, cbModelParam._m0[23u].z, fma(_977, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _976));
        float _2090;
        if (_1975 > 0.0)
        {
            _2090 = abs((1.0 - _1964) / _1975);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1975 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1964 + 1.0) / _1975);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2090 = frontier_phi_28_24_ladder;
        }
        float _2407;
        if (_1978 > 0.0)
        {
            _2407 = abs((1.0 - _1968) / _1978);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1978 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1968 + 1.0) / _1978);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2407 = frontier_phi_40_35_ladder;
        }
        float _2745;
        if (_1981 > 0.0)
        {
            _2745 = abs((1.0 - _1972) / _1981);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1981 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1972 + 1.0) / _1981);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2745 = frontier_phi_50_47_ladder;
        }
        float _2747 = isnan(_2407) ? _2090 : (isnan(_2090) ? _2407 : min(_2090, _2407));
        float _2748 = isnan(_2745) ? _2747 : (isnan(_2747) ? _2745 : min(_2747, _2745));
        float _2752 = (_2748 * _1975) + _1964;
        float _2753 = (_2748 * _1978) + _1968;
        float _2754 = (_2748 * _1981) + _1972;
        float _2755 = _2748 * 9.9999997473787516355514526367188e-05;
        float _2756 = (-1.0) - _2755;
        float _2758 = _2755 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2754 > _2758) || ((_2754 < _2756) || ((_2753 > _2758) || ((_2753 < _2756) || ((_2752 < _2756) || (_2752 > _2758))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2876 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2754, cbModelParam._m0[17u].z, fma(_2753, cbModelParam._m0[17u].y, _2752 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2754, cbModelParam._m0[18u].z, fma(_2753, cbModelParam._m0[18u].y, _2752 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2754, cbModelParam._m0[19u].z, fma(_2753, cbModelParam._m0[19u].y, _2752 * cbModelParam._m0[19u].x))), _1909);
            frontier_phi_25_50_ladder = _2876.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2876.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2876.x * cbModelParam._m0[1u].z;
        }
        _2000 = frontier_phi_25_50_ladder_2;
        _2002 = frontier_phi_25_50_ladder_1;
        _2004 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1984 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_976, _977, _978), _1909);
        _2000 = _1984.x * cbModelParam._m0[1u].z;
        _2002 = _1984.y * cbModelParam._m0[1u].z;
        _2004 = _1984.z * cbModelParam._m0[1u].z;
    }
    float _2017 = (((_1003 * _953) + _1004) * _968) * ((cbModelParam._m0[1u].w * (_2000 - _1900)) + _1900);
    float _2019 = (((_1003 * _955) + _1004) * _968) * ((cbModelParam._m0[1u].w * (_2002 - _1902)) + _1902);
    float _2021 = (((_1003 * _956) + _1004) * _968) * ((cbModelParam._m0[1u].w * (_2004 - _1904)) + _1904);
    float _2024 = fma(_2021, cbSceneParam._m0[89u].z, fma(_2019, cbSceneParam._m0[89u].y, _2017 * cbSceneParam._m0[89u].x));
    float _2027 = fma(_2021, cbSceneParam._m0[90u].z, fma(_2019, cbSceneParam._m0[90u].y, _2017 * cbSceneParam._m0[90u].x));
    float _2030 = fma(_2021, cbSceneParam._m0[91u].z, fma(_2019, cbSceneParam._m0[91u].y, _2017 * cbSceneParam._m0[91u].x));
    float _2064 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2068 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2072 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2076 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2077 = _2064 / _2076;
    float _2078 = _2068 / _2076;
    float _2079 = _2072 / _2076;
    float _2226;
    float _2227;
    float _2228;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2106 = ((uint(_2079 > cbSceneParam._m0[59u].y) + uint(_2079 > cbSceneParam._m0[59u].x)) + uint(_2079 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2107 = _2106 + 43u;
        uint _2115 = _2106 + 44u;
        uint _2123 = _2106 + 45u;
        uint _2131 = _2106 + 46u;
        float _2142 = fma(_2076, cbSceneParam._m0[_2107].w, fma(_2072, cbSceneParam._m0[_2107].z, fma(_2068, cbSceneParam._m0[_2107].y, _2064 * cbSceneParam._m0[_2107].x)));
        float _2146 = fma(_2076, cbSceneParam._m0[_2115].w, fma(_2072, cbSceneParam._m0[_2115].z, fma(_2068, cbSceneParam._m0[_2115].y, _2064 * cbSceneParam._m0[_2115].x)));
        float _2154 = fma(_2076, cbSceneParam._m0[_2131].w, fma(_2072, cbSceneParam._m0[_2131].z, fma(_2068, cbSceneParam._m0[_2131].y, _2064 * cbSceneParam._m0[_2131].x)));
        float _2159 = cbSceneParam._m0[33u].z * _2154;
        float _2161 = cbSceneParam._m0[33u].w * _2154;
        float _2164 = fma(_2076, cbSceneParam._m0[_2123].w, fma(_2072, cbSceneParam._m0[_2123].z, fma(_2068, cbSceneParam._m0[_2123].y, _2064 * cbSceneParam._m0[_2123].x))) / _2154;
        float _2212 = (cbSceneParam._m0[33u].x - sqrt(((_2078 * _2078) + (_2077 * _2077)) + (_2079 * _2079))) * cbSceneParam._m0[33u].y;
        float _4582 = isnan(0.0) ? _2212 : (isnan(_2212) ? 0.0 : max(_2212, 0.0));
        float _2219 = (isnan(1.0) ? _4582 : (isnan(_4582) ? 1.0 : min(_4582, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2159 + _2142) / _2154, (_2161 + _2146) / _2154), _2164), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2161 + _2142) / _2154, (_2146 - _2159) / _2154), _2164), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2142 - _2159) / _2154, (_2146 - _2161) / _2154), _2164), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2142 - _2161) / _2154, (_2159 + _2146) / _2154), _2164), 0.0)).x), vec4(0.25)));
        _2226 = 1.0 - (_2219 * cbSceneParam._m0[34u].x);
        _2227 = 1.0 - (_2219 * cbSceneParam._m0[34u].y);
        _2228 = 1.0 - (_2219 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2226 = 1.0;
        _2227 = 1.0;
        _2228 = 1.0;
    }
    float _2292;
    float _2294;
    float _2296;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2280 = fma(_2076, cbSceneParam._m0[63u].w, fma(_2072, cbSceneParam._m0[63u].z, fma(_2068, cbSceneParam._m0[63u].y, _2064 * cbSceneParam._m0[63u].x)));
        float _2281 = fma(_2076, cbSceneParam._m0[60u].w, fma(_2072, cbSceneParam._m0[60u].z, fma(_2068, cbSceneParam._m0[60u].y, _2064 * cbSceneParam._m0[60u].x))) / _2280;
        float _2282 = fma(_2076, cbSceneParam._m0[61u].w, fma(_2072, cbSceneParam._m0[61u].z, fma(_2068, cbSceneParam._m0[61u].y, _2064 * cbSceneParam._m0[61u].x))) / _2280;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2281 >= cbSceneParam._m0[64u].x) && (_2282 >= cbSceneParam._m0[64u].y)) && (_2281 <= cbSceneParam._m0[64u].z)) && (_2282 <= cbSceneParam._m0[64u].w))
        {
            float _2420 = fma(_2076, cbSceneParam._m0[62u].w, fma(_2072, cbSceneParam._m0[62u].z, fma(_2068, cbSceneParam._m0[62u].y, _2064 * cbSceneParam._m0[62u].x))) / _2280;
            float _2424 = isnan(cbSceneParam._m0[41u].w) ? _2420 : (isnan(_2420) ? cbSceneParam._m0[41u].w : max(_2420, cbSceneParam._m0[41u].w));
            float _2467 = (cbSceneParam._m0[33u].x - sqrt(((_2078 * _2078) + (_2077 * _2077)) + (_2079 * _2079))) * cbSceneParam._m0[33u].y;
            float _4598 = isnan(0.0) ? _2467 : (isnan(_2467) ? 0.0 : max(_2467, 0.0));
            float _2474 = (isnan(1.0) ? _4598 : (isnan(_4598) ? 1.0 : min(_4598, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2281, cbSceneParam._m0[33u].w + _2282), _2424), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2281, _2282 - cbSceneParam._m0[33u].z), _2424), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2281 - cbSceneParam._m0[33u].z, _2282 - cbSceneParam._m0[33u].w), _2424), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2281 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2282), _2424), 0.0)).x), vec4(0.25)));
            float _2478 = 1.0 - (_2474 * cbSceneParam._m0[34u].x);
            float _2479 = 1.0 - (_2474 * cbSceneParam._m0[34u].y);
            float _2480 = 1.0 - (_2474 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2480) ? _2228 : (isnan(_2228) ? _2480 : min(_2228, _2480));
            frontier_phi_37_36_ladder_1 = isnan(_2479) ? _2227 : (isnan(_2227) ? _2479 : min(_2227, _2479));
            frontier_phi_37_36_ladder_2 = isnan(_2478) ? _2226 : (isnan(_2226) ? _2478 : min(_2226, _2478));
        }
        else
        {
            frontier_phi_37_36_ladder = _2228;
            frontier_phi_37_36_ladder_1 = _2227;
            frontier_phi_37_36_ladder_2 = _2226;
        }
        _2292 = frontier_phi_37_36_ladder_2;
        _2294 = frontier_phi_37_36_ladder_1;
        _2296 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2292 = _2226;
        _2294 = _2227;
        _2296 = _2228;
    }
    uvec4 _2301 = floatBitsToUint(cbInstanceData._m0[_928 + 5u]);
    uint _2303 = _2301.x * 14u;
    uint _2304 = _2303 + 13u;
    float _2311 = _968 + (-1.0);
    float _2316 = (cbLight._m0[_2304].x * _2311) + 1.0;
    float _2317 = (cbLight._m0[_2304].y * _2311) + 1.0;
    float _2318 = (cbLight._m0[_2304].z * _2311) + 1.0;
    float _2319 = (cbLight._m0[_2304].w * _2311) + 1.0;
    uint _2320 = _2303 + 5u;
    float _2326 = isnan(1.0) ? _2317 : (isnan(_2317) ? 1.0 : min(_2317, 1.0));
    uint _2330 = _2303 + 4u;
    float _2339 = isnan(1.0) ? _2316 : (isnan(_2316) ? 1.0 : min(_2316, 1.0));
    uint _2343 = _2303 | 1u;
    float _2354 = dot(vec3(cbLight._m0[_2303].xyz), vec3(_790, _791, _792));
    float _2357 = dot(vec3(cbLight._m0[_2343].xyz), vec3(_790, _791, _792));
    float _4634 = isnan(0.0) ? _2354 : (isnan(_2354) ? 0.0 : max(_2354, 0.0));
    float _4645 = isnan(0.0) ? _2357 : (isnan(_2357) ? 0.0 : max(_2357, 0.0));
    float _2362 = (isnan(1.0) ? _4634 : (isnan(_4634) ? 1.0 : min(_4634, 1.0))) * 0.3183098733425140380859375;
    float _2364 = (isnan(1.0) ? _4645 : (isnan(_4645) ? 1.0 : min(_4645, 1.0))) * 0.3183098733425140380859375;
    float _2371 = ((cbLight._m0[_2320].x * _2326) * _2364) + (((cbLight._m0[_2330].x * _2292) * _2339) * _2362);
    float _2372 = ((_2326 * cbLight._m0[_2320].y) * _2364) + (((cbLight._m0[_2330].y * _2294) * _2339) * _2362);
    float _2373 = ((_2326 * cbLight._m0[_2320].z) * _2364) + (((cbLight._m0[_2330].z * _2296) * _2339) * _2362);
    uvec4 _2377 = floatBitsToUint(cbLight._m0[_2303 + 12u]);
    bool _2379 = _2377.x == 0u;
    float _2481;
    float _2483;
    float _2485;
    if (_2379)
    {
        _2481 = _2371;
        _2483 = _2372;
        _2485 = _2373;
    }
    else
    {
        uint _2489 = _2303 + 6u;
        float _2505 = (dot(vec3(cbLight._m0[_2303 + 2u].xyz), vec3(_790, _791, _792)) * 0.5) + 0.5;
        float _2506 = _2505 * _2505;
        float _4656 = isnan(0.0) ? _2506 : (isnan(_2506) ? 0.0 : max(_2506, 0.0));
        float _2507 = isnan(1.0) ? _4656 : (isnan(_4656) ? 1.0 : min(_4656, 1.0));
        float _2508 = isnan(1.0) ? _2318 : (isnan(_2318) ? 1.0 : min(_2318, 1.0));
        _2481 = (((cbLight._m0[_2489].x * 0.3183098733425140380859375) * _2507) * _2508) + _2371;
        _2483 = (((cbLight._m0[_2489].y * 0.3183098733425140380859375) * _2507) * _2508) + _2372;
        _2485 = (((cbLight._m0[_2489].z * 0.3183098733425140380859375) * _2507) * _2508) + _2373;
    }
    bool _2488 = _2377.y == 0u;
    float _2543;
    float _2545;
    float _2547;
    if (_2488)
    {
        _2543 = _2481;
        _2545 = _2483;
        _2547 = _2485;
    }
    else
    {
        uint _2716 = _2303 + 7u;
        float _2732 = (dot(vec3(cbLight._m0[_2303 + 3u].xyz), vec3(_790, _791, _792)) * 0.5) + 0.5;
        float _2733 = _2732 * _2732;
        float _4672 = isnan(0.0) ? _2733 : (isnan(_2733) ? 0.0 : max(_2733, 0.0));
        float _2734 = isnan(1.0) ? _4672 : (isnan(_4672) ? 1.0 : min(_4672, 1.0));
        float _2735 = isnan(1.0) ? _2319 : (isnan(_2319) ? 1.0 : min(_2319, 1.0));
        _2543 = (((cbLight._m0[_2716].x * 0.3183098733425140380859375) * _2734) * _2735) + _2481;
        _2545 = (((cbLight._m0[_2716].y * 0.3183098733425140380859375) * _2734) * _2735) + _2483;
        _2547 = (((cbLight._m0[_2716].z * 0.3183098733425140380859375) * _2734) * _2735) + _2485;
    }
    uint _2550 = _2303 + 8u;
    float _2563 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2303].w)) * _793) * 0.949999988079071044921875);
    float _2564 = _2563 * _2563;
    float _2565 = cbLight._m0[_2303].x + _870;
    float _2566 = cbLight._m0[_2303].y + _871;
    float _2567 = cbLight._m0[_2303].z + _872;
    float _2571 = inversesqrt(dot(vec3(_2565, _2566, _2567), vec3(_2565, _2566, _2567)));
    float _2572 = _2571 * _2565;
    float _2573 = _2571 * _2566;
    float _2574 = _2571 * _2567;
    float _2575 = dot(vec3(_790, _791, _792), vec3(cbLight._m0[_2303].xyz));
    float _4688 = isnan(0.0) ? _2575 : (isnan(_2575) ? 0.0 : max(_2575, 0.0));
    float _2578 = isnan(1.0) ? _4688 : (isnan(_4688) ? 1.0 : min(_4688, 1.0));
    float _4699 = isnan(0.0) ? _969 : (isnan(_969) ? 0.0 : max(_969, 0.0));
    float _2579 = isnan(1.0) ? _4699 : (isnan(_4699) ? 1.0 : min(_4699, 1.0));
    float _2580 = dot(vec3(_790, _791, _792), vec3(_2572, _2573, _2574));
    float _4710 = isnan(0.0) ? _2580 : (isnan(_2580) ? 0.0 : max(_2580, 0.0));
    float _2583 = isnan(1.0) ? _4710 : (isnan(_4710) ? 1.0 : min(_4710, 1.0));
    float _2584 = dot(vec3(cbLight._m0[_2303].xyz), vec3(_2572, _2573, _2574));
    float _4721 = isnan(0.0) ? _2584 : (isnan(_2584) ? 0.0 : max(_2584, 0.0));
    float _2588 = _2564 * _2564;
    float _2592 = ((_2583 * _2583) * (_2588 + (-1.0))) + 1.0;
    float _2600 = exp2(log2(1.0 - (isnan(1.0) ? _4721 : (isnan(_4721) ? 1.0 : min(_4721, 1.0)))) * 5.0);
    float _2601 = 0.959999978542327880859375 - _950;
    float _2603 = 0.959999978542327880859375 - _951;
    float _2604 = 0.959999978542327880859375 - _952;
    float _2611 = 1.0 - _2564;
    float _2622 = (0.5 / (((_2579 * ((_2578 * _2611) + _2564)) + 9.9999999392252902907785028219223e-09) + (((_2579 * _2611) + _2564) * _2578))) * _2578;
    float _4732 = isnan(0.0) ? _2622 : (isnan(_2622) ? 0.0 : max(_2622, 0.0));
    float _2624 = (isnan(1.0) ? _4732 : (isnan(_4732) ? 1.0 : min(_4732, 1.0))) * (_2588 / ((_2592 * _2592) * 3.141590118408203125));
    uint _2638 = _2303 + 9u;
    float _2649 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2343].w)) * _793) * 0.949999988079071044921875);
    float _2650 = _2649 * _2649;
    float _2651 = cbLight._m0[_2343].x + _870;
    float _2652 = cbLight._m0[_2343].y + _871;
    float _2653 = cbLight._m0[_2343].z + _872;
    float _2657 = inversesqrt(dot(vec3(_2651, _2652, _2653), vec3(_2651, _2652, _2653)));
    float _2658 = _2657 * _2651;
    float _2659 = _2657 * _2652;
    float _2660 = _2657 * _2653;
    float _2661 = dot(vec3(_790, _791, _792), vec3(cbLight._m0[_2343].xyz));
    float _4743 = isnan(0.0) ? _2661 : (isnan(_2661) ? 0.0 : max(_2661, 0.0));
    float _2664 = isnan(1.0) ? _4743 : (isnan(_4743) ? 1.0 : min(_4743, 1.0));
    float _2665 = dot(vec3(_790, _791, _792), vec3(_2658, _2659, _2660));
    float _4754 = isnan(0.0) ? _2665 : (isnan(_2665) ? 0.0 : max(_2665, 0.0));
    float _2668 = isnan(1.0) ? _4754 : (isnan(_4754) ? 1.0 : min(_4754, 1.0));
    float _2669 = dot(vec3(cbLight._m0[_2343].xyz), vec3(_2658, _2659, _2660));
    float _4765 = isnan(0.0) ? _2669 : (isnan(_2669) ? 0.0 : max(_2669, 0.0));
    float _2673 = _2650 * _2650;
    float _2677 = ((_2668 * _2668) * (_2673 + (-1.0))) + 1.0;
    float _2684 = exp2(log2(1.0 - (isnan(1.0) ? _4765 : (isnan(_4765) ? 1.0 : min(_4765, 1.0)))) * 5.0);
    float _2691 = 1.0 - _2650;
    float _2701 = (0.5 / (((_2579 * ((_2664 * _2691) + _2650)) + 9.9999999392252902907785028219223e-09) + (((_2579 * _2691) + _2650) * _2664))) * _2664;
    float _4776 = isnan(0.0) ? _2701 : (isnan(_2701) ? 0.0 : max(_2701, 0.0));
    float _2703 = (isnan(1.0) ? _4776 : (isnan(_4776) ? 1.0 : min(_4776, 1.0))) * (_2673 / ((_2677 * _2677) * 3.141590118408203125));
    float _2713 = (((((_2684 * _2601) + _953) * cbLight._m0[_2638].x) * _2703) * _2326) + ((((cbLight._m0[_2550].x * _2292) * ((_2600 * _2601) + _953)) * _2624) * _2339);
    float _2714 = (((((_2684 * _2603) + _955) * cbLight._m0[_2638].y) * _2703) * _2326) + ((((cbLight._m0[_2550].y * _2294) * ((_2600 * _2603) + _955)) * _2624) * _2339);
    float _2715 = (((((_2684 * _2604) + _956) * cbLight._m0[_2638].z) * _2703) * _2326) + ((((cbLight._m0[_2550].z * _2296) * ((_2600 * _2604) + _956)) * _2624) * _2339);
    float _2771;
    float _2773;
    float _2775;
    if (_2379)
    {
        _2771 = _2713;
        _2773 = _2714;
        _2775 = _2715;
    }
    else
    {
        uint _2777 = _2303 + 2u;
        uint _2781 = _2303 + 10u;
        float _2795 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2777].w)) * _793) * 0.949999988079071044921875);
        float _2796 = _2795 * _2795;
        float _2797 = cbLight._m0[_2777].x + _870;
        float _2798 = cbLight._m0[_2777].y + _871;
        float _2799 = cbLight._m0[_2777].z + _872;
        float _2803 = inversesqrt(dot(vec3(_2797, _2798, _2799), vec3(_2797, _2798, _2799)));
        float _2804 = _2803 * _2797;
        float _2805 = _2803 * _2798;
        float _2806 = _2803 * _2799;
        float _2807 = dot(vec3(_790, _791, _792), vec3(cbLight._m0[_2777].xyz));
        float _4787 = isnan(0.0) ? _2807 : (isnan(_2807) ? 0.0 : max(_2807, 0.0));
        float _2810 = isnan(1.0) ? _4787 : (isnan(_4787) ? 1.0 : min(_4787, 1.0));
        float _2811 = dot(vec3(_790, _791, _792), vec3(_2804, _2805, _2806));
        float _4798 = isnan(0.0) ? _2811 : (isnan(_2811) ? 0.0 : max(_2811, 0.0));
        float _2814 = isnan(1.0) ? _4798 : (isnan(_4798) ? 1.0 : min(_4798, 1.0));
        float _2815 = dot(vec3(cbLight._m0[_2777].xyz), vec3(_2804, _2805, _2806));
        float _4809 = isnan(0.0) ? _2815 : (isnan(_2815) ? 0.0 : max(_2815, 0.0));
        float _2819 = _2796 * _2796;
        float _2823 = ((_2814 * _2814) * (_2819 + (-1.0))) + 1.0;
        float _2830 = exp2(log2(1.0 - (isnan(1.0) ? _4809 : (isnan(_4809) ? 1.0 : min(_4809, 1.0)))) * 5.0);
        float _2837 = 1.0 - _2796;
        float _2847 = (0.5 / (((_2579 * ((_2810 * _2837) + _2796)) + 9.9999999392252902907785028219223e-09) + (((_2579 * _2837) + _2796) * _2810))) * _2810;
        float _4820 = isnan(0.0) ? _2847 : (isnan(_2847) ? 0.0 : max(_2847, 0.0));
        float _2849 = (isnan(1.0) ? _4820 : (isnan(_4820) ? 1.0 : min(_4820, 1.0))) * (_2819 / ((_2823 * _2823) * 3.141590118408203125));
        float _2850 = isnan(1.0) ? _2318 : (isnan(_2318) ? 1.0 : min(_2318, 1.0));
        _2771 = (((((_2830 * _2601) + _953) * cbLight._m0[_2781].x) * _2849) * _2850) + _2713;
        _2773 = (((((_2830 * _2603) + _955) * cbLight._m0[_2781].y) * _2849) * _2850) + _2714;
        _2775 = (((((_2830 * _2604) + _956) * cbLight._m0[_2781].z) * _2849) * _2850) + _2715;
    }
    float _2881;
    float _2883;
    float _2885;
    if (_2488)
    {
        _2881 = _2771;
        _2883 = _2773;
        _2885 = _2775;
    }
    else
    {
        uint _2892 = _2303 + 3u;
        uint _2896 = _2303 + 11u;
        float _2910 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2892].w)) * _793) * 0.949999988079071044921875);
        float _2911 = _2910 * _2910;
        float _2912 = cbLight._m0[_2892].x + _870;
        float _2913 = cbLight._m0[_2892].y + _871;
        float _2914 = cbLight._m0[_2892].z + _872;
        float _2918 = inversesqrt(dot(vec3(_2912, _2913, _2914), vec3(_2912, _2913, _2914)));
        float _2919 = _2918 * _2912;
        float _2920 = _2918 * _2913;
        float _2921 = _2918 * _2914;
        float _2922 = dot(vec3(_790, _791, _792), vec3(cbLight._m0[_2892].xyz));
        float _4836 = isnan(0.0) ? _2922 : (isnan(_2922) ? 0.0 : max(_2922, 0.0));
        float _2925 = isnan(1.0) ? _4836 : (isnan(_4836) ? 1.0 : min(_4836, 1.0));
        float _2926 = dot(vec3(_790, _791, _792), vec3(_2919, _2920, _2921));
        float _4847 = isnan(0.0) ? _2926 : (isnan(_2926) ? 0.0 : max(_2926, 0.0));
        float _2929 = isnan(1.0) ? _4847 : (isnan(_4847) ? 1.0 : min(_4847, 1.0));
        float _2930 = dot(vec3(cbLight._m0[_2892].xyz), vec3(_2919, _2920, _2921));
        float _4858 = isnan(0.0) ? _2930 : (isnan(_2930) ? 0.0 : max(_2930, 0.0));
        float _2934 = _2911 * _2911;
        float _2938 = ((_2929 * _2929) * (_2934 + (-1.0))) + 1.0;
        float _2945 = exp2(log2(1.0 - (isnan(1.0) ? _4858 : (isnan(_4858) ? 1.0 : min(_4858, 1.0)))) * 5.0);
        float _2952 = 1.0 - _2911;
        float _2962 = (0.5 / (((_2579 * ((_2925 * _2952) + _2911)) + 9.9999999392252902907785028219223e-09) + (((_2579 * _2952) + _2911) * _2925))) * _2925;
        float _4869 = isnan(0.0) ? _2962 : (isnan(_2962) ? 0.0 : max(_2962, 0.0));
        float _2964 = (isnan(1.0) ? _4869 : (isnan(_4869) ? 1.0 : min(_4869, 1.0))) * (_2934 / ((_2938 * _2938) * 3.141590118408203125));
        float _2965 = isnan(1.0) ? _2319 : (isnan(_2319) ? 1.0 : min(_2319, 1.0));
        _2881 = (((((_2945 * _2601) + _953) * cbLight._m0[_2896].x) * _2964) * _2965) + _2771;
        _2883 = (((((_2945 * _2603) + _955) * cbLight._m0[_2896].y) * _2964) * _2965) + _2773;
        _2885 = (((((_2945 * _2604) + _956) * cbLight._m0[_2896].z) * _2964) * _2965) + _2775;
    }
    float _3031;
    float _3033;
    float _3035;
    float _3037;
    float _3039;
    float _3041;
    if (_2301.y == 0u)
    {
        uvec4 _2986 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2987 = _2986.x;
        uint _2998 = uint((float(_2986.y) * floor(float(uint(cbSceneParam._m0[85u].y * _891) / _2987))) + floor(float(uint(cbSceneParam._m0[85u].x * _890) / _2987)));
        float _3008 = (log2(_2079 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3009 = isnan(0.0) ? _3008 : (isnan(_3008) ? 0.0 : max(_3008, 0.0));
        uint _3012 = uint(isnan(14.0) ? _3009 : (isnan(_3009) ? 14.0 : min(_3009, 14.0)));
        uvec4 _3017 = texelFetch(g_lightClusterGridBuffer, int(((_3012 << 2u) + (_2998 << 6u)) >> 2u));
        uint _3018 = _3017.x;
        uint _3019 = _2986.z;
        float _3098;
        float _3100;
        float _3102;
        float _3104;
        float _3106;
        float _3108;
        if (((((1u << ((_3019 >> 4u) & 15u)) + 4294967295u) & _3018) == 0u) || ((_3019 & 240u) == 0u))
        {
            _3098 = 0.0;
            _3100 = 0.0;
            _3102 = 0.0;
            _3104 = 0.0;
            _3106 = 0.0;
            _3108 = 0.0;
        }
        else
        {
            float _3099;
            float _3101;
            float _3103;
            float _3105;
            float _3107;
            float _3109;
            float _3250 = 0.0;
            float _3251 = 0.0;
            float _3252 = 0.0;
            float _3253 = 0.0;
            float _3254 = 0.0;
            float _3255 = 0.0;
            uint _3256 = 0u;
            uint _3265;
            bool _3266;
            for (;;)
            {
                _3265 = texelFetch(g_lightClassification, int((((_3012 << 5u) + (_2998 << 9u)) + (_3256 << 2u)) >> 2u)).x;
                _3266 = _3265 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3266)
                {
                    frontier_phi_71_pred = _3255;
                    frontier_phi_71_pred_1 = _3254;
                    frontier_phi_71_pred_2 = _3253;
                    frontier_phi_71_pred_3 = _3252;
                    frontier_phi_71_pred_4 = _3251;
                    frontier_phi_71_pred_5 = _3250;
                }
                else
                {
                    float _3395;
                    float _3396;
                    float _3397;
                    float _3398;
                    float _3399;
                    float _3400;
                    uint _3401;
                    _3395 = _3250;
                    _3396 = _3251;
                    _3397 = _3252;
                    _3398 = _3253;
                    _3399 = _3254;
                    _3400 = _3255;
                    _3401 = _3265;
                    float _3322;
                    float _3323;
                    float _3324;
                    float _3325;
                    float _3326;
                    float _3327;
                    for (;;)
                    {
                        uint _3405 = uint(findLSB(_3401)) + (_3256 << 5u);
                        uint _3402 = (_3401 + 4294967295u) & _3401;
                        uint _3407 = _3405 * 48u;
                        vec4 _3421 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3407)).x, texelFetch(g_PointLightRenderingBuffer, int(_3407 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3407 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3407 + 3u)).x));
                        uint _3427 = (_3405 * 48u) + 4u;
                        vec4 _3440 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3427)).x, texelFetch(g_PointLightRenderingBuffer, int(_3427 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3427 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3427 + 3u)).x));
                        uint _3446 = (_3405 * 48u) + 8u;
                        vec3 _3457 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3446)).x, texelFetch(g_PointLightRenderingBuffer, int(_3446 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3446 + 2u)).x));
                        float _3461 = _3421.x - _2077;
                        float _3462 = _3421.y - _2078;
                        float _3463 = _3421.z - _2079;
                        float _3464 = dot(vec3(_3461, _3462, _3463), vec3(_3461, _3462, _3463));
                        float _3467 = inversesqrt(_3464);
                        float _3468 = _3467 * _3461;
                        float _3469 = _3467 * _3462;
                        float _3470 = _3467 * _3463;
                        float _3471 = dot(vec3(_909, _912, _915), vec3(_3468, _3469, _3470));
                        float _3476 = 1.0 - (_3464 * _3421.w);
                        float _4895 = isnan(0.0) ? _3476 : (isnan(_3476) ? 0.0 : max(_3476, 0.0));
                        float _3477 = isnan(1.0) ? _4895 : (isnan(_4895) ? 1.0 : min(_4895, 1.0));
                        float _3478 = sqrt(_3464) * _3440.w;
                        float _3481 = 1.39999997615814208984375 / (_3478 + 1.39999997615814208984375);
                        float _3482 = _3481 * _3481;
                        float _3485 = ((1.0 - _3482) * _3471) + _3482;
                        float _3488 = _3478 * _3478;
                        float _3492 = ((isnan(0.0) ? _3485 : (isnan(_3485) ? 0.0 : max(_3485, 0.0))) * _3477) / ((_3488 * 0.699999988079071044921875) + 1.0);
                        float _3496 = (-0.0) - _2077;
                        float _3497 = (-0.0) - _2078;
                        float _3498 = (-0.0) - _2079;
                        float _3502 = inversesqrt(dot(vec3(_3496, _3497, _3498), vec3(_3496, _3497, _3498)));
                        float _3503 = _3502 * _3496;
                        float _3504 = _3502 * _3497;
                        float _3505 = _3502 * _3498;
                        float _3512 = exp2(log2(1.0 / ((_3488 * 3.5) + 5.0)) * 0.25);
                        float _3513 = 1.0 - _984;
                        float _3520 = sqrt(1.0 - ((1.0 - (_3513 * _3513)) * (1.0 - (_3512 * _3512))));
                        float _3521 = _3520 * _3520;
                        float _3522 = _3521 * _3521;
                        float _3523 = _3503 + _3468;
                        float _3524 = _3504 + _3469;
                        float _3525 = _3505 + _3470;
                        float _3529 = inversesqrt(dot(vec3(_3523, _3524, _3525), vec3(_3523, _3524, _3525)));
                        float _3533 = dot(vec3(_909, _912, _915), vec3(_3503, _3504, _3505));
                        float _4911 = isnan(0.0) ? _3533 : (isnan(_3533) ? 0.0 : max(_3533, 0.0));
                        float _3536 = isnan(1.0) ? _4911 : (isnan(_4911) ? 1.0 : min(_4911, 1.0));
                        float _3537 = dot(vec3(_909, _912, _915), vec3(_3529 * _3523, _3529 * _3524, _3529 * _3525));
                        float _4922 = isnan(0.0) ? _3537 : (isnan(_3537) ? 0.0 : max(_3537, 0.0));
                        float _3540 = isnan(1.0) ? _4922 : (isnan(_4922) ? 1.0 : min(_4922, 1.0));
                        float _3544 = ((_3540 * _3540) * (_3522 + (-1.0))) + 1.0;
                        float _3545 = _3481 * _3521;
                        float _3546 = _3545 * _3545;
                        float _3549 = ((1.0 - _3546) * _3471) + _3546;
                        float _4933 = isnan(0.0) ? _3549 : (isnan(_3549) ? 0.0 : max(_3549, 0.0));
                        float _3550 = isnan(1.0) ? _4933 : (isnan(_4933) ? 1.0 : min(_4933, 1.0));
                        float _3551 = 1.0 - _3521;
                        float _3561 = (0.5 / (((_3550 * ((_3536 * _3551) + _3521)) + 9.9999999392252902907785028219223e-09) + (((_3550 * _3551) + _3521) * _3536))) * _3550;
                        float _4944 = isnan(0.0) ? _3561 : (isnan(_3561) ? 0.0 : max(_3561, 0.0));
                        float _3572 = (((_3522 * 3.1415927410125732421875) * (isnan(1.0) ? _4944 : (isnan(_4944) ? 1.0 : min(_4944, 1.0)))) / ((_3544 * _3544) * ((_3488 * 2.1991131305694580078125) + 3.141590118408203125))) * _3477;
                        _3325 = (_3492 * _3440.x) + _3398;
                        _3326 = (_3492 * _3440.y) + _3399;
                        _3327 = (_3492 * _3440.z) + _3400;
                        _3322 = (_3572 * _3457.x) + _3395;
                        _3323 = (_3572 * _3457.y) + _3396;
                        _3324 = (_3572 * _3457.z) + _3397;
                        if (_3402 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3395 = _3322;
                            _3396 = _3323;
                            _3397 = _3324;
                            _3398 = _3325;
                            _3399 = _3326;
                            _3400 = _3327;
                            _3401 = _3402;
                        }
                    }
                    frontier_phi_71_pred = _3327;
                    frontier_phi_71_pred_1 = _3326;
                    frontier_phi_71_pred_2 = _3325;
                    frontier_phi_71_pred_3 = _3324;
                    frontier_phi_71_pred_4 = _3323;
                    frontier_phi_71_pred_5 = _3322;
                }
                _3109 = frontier_phi_71_pred;
                _3107 = frontier_phi_71_pred_1;
                _3105 = frontier_phi_71_pred_2;
                _3103 = frontier_phi_71_pred_3;
                _3101 = frontier_phi_71_pred_4;
                _3099 = frontier_phi_71_pred_5;
                uint _3257 = _3256 + 1u;
                if (_3257 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3250 = _3099;
                    _3251 = _3101;
                    _3252 = _3103;
                    _3253 = _3105;
                    _3254 = _3107;
                    _3255 = _3109;
                    _3256 = _3257;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3098 = _3099;
            _3100 = _3101;
            _3102 = _3103;
            _3104 = _3105;
            _3106 = _3107;
            _3108 = _3109;
        }
        uvec4 _3112 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3113 = _3112.z;
        uint _3115 = (_3113 >> 8u) & 15u;
        float _3218;
        float _3220;
        float _3222;
        float _3224;
        float _3226;
        float _3228;
        if (((4294967295u << _3115) & _3018) == 0u)
        {
            _3218 = _3098;
            _3220 = _3100;
            _3222 = _3102;
            _3224 = _3104;
            _3226 = _3106;
            _3228 = _3108;
        }
        else
        {
            float _3243 = inversesqrt(dot(vec3(_2077, _2078, _2079), vec3(_2077, _2078, _2079)));
            float _3244 = _3243 * _2077;
            float _3245 = _3243 * _2078;
            float _3246 = _3243 * _2079;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3115 < ((_3113 >> 12u) & 15u))
            {
                float _3219;
                float _3221;
                float _3223;
                float _3225;
                float _3227;
                float _3229;
                float _3378 = _3098;
                float _3379 = _3100;
                float _3380 = _3102;
                float _3381 = _3104;
                float _3382 = _3106;
                float _3383 = _3108;
                uint _3384 = _3115;
                uint _3393;
                bool _3394;
                for (;;)
                {
                    _3393 = texelFetch(g_lightClassification, int((((_3012 << 5u) + (_2998 << 9u)) + (_3384 << 2u)) >> 2u)).x;
                    _3394 = _3393 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3394)
                    {
                        frontier_phi_82_pred = _3383;
                        frontier_phi_82_pred_1 = _3382;
                        frontier_phi_82_pred_2 = _3381;
                        frontier_phi_82_pred_3 = _3380;
                        frontier_phi_82_pred_4 = _3379;
                        frontier_phi_82_pred_5 = _3378;
                    }
                    else
                    {
                        float _3586;
                        float _3587;
                        float _3588;
                        float _3589;
                        float _3590;
                        float _3591;
                        float _3880;
                        float _3881;
                        float _3882;
                        float _3883;
                        float _3884;
                        float _3885;
                        float _3599 = _3378;
                        float _3600 = _3379;
                        float _3601 = _3380;
                        float _3602 = _3381;
                        float _3603 = _3382;
                        float _3604 = _3383;
                        uint _3605 = _3393;
                        uint _3606;
                        vec4 _3631;
                        float _3632;
                        vec4 _3647;
                        vec3 _3659;
                        vec4 _3674;
                        vec4 _3689;
                        float _3736;
                        bool _3737;
                        for (;;)
                        {
                            uint _3616 = ((_3384 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3605));
                            _3606 = (_3605 + 4294967295u) & _3605;
                            uint _3618 = _3616 * 40u;
                            _3631 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3618)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3618 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3618 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3618 + 3u)).x));
                            _3632 = _3631.w;
                            uint _3634 = (_3616 * 40u) + 4u;
                            _3647 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3634)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3634 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3634 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3634 + 3u)).x));
                            uint _3649 = (_3616 * 40u) + 8u;
                            _3659 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3649)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3649 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3649 + 2u)).x));
                            uint _3661 = (_3616 * 40u) + 16u;
                            _3674 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3661)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3661 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3661 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3661 + 3u)).x));
                            uint _3676 = (_3616 * 40u) + 20u;
                            _3689 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3676)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3676 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3676 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3676 + 3u)).x));
                            uint _3692 = (_3616 * 40u) + 24u;
                            vec4 _3705 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3692)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3692 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3692 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3692 + 3u)).x));
                            uint _3711 = (_3616 * 40u) + 28u;
                            vec4 _3724 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3711)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3711 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3711 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3711 + 3u)).x));
                            _3736 = fma(_2079, _3724.z, fma(_2078, _3724.y, _3724.x * _2077)) + _3724.w;
                            _3737 = !((fma(_2079, _3705.z, fma(_2078, _3705.y, _3705.x * _2077)) + _3705.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3737)
                            {
                                float _3764 = _3631.x - _2077;
                                float _3765 = _3631.y - _2078;
                                float _3766 = _3631.z - _2079;
                                float _3767 = dot(vec3(_3764, _3765, _3766), vec3(_3764, _3765, _3766));
                                float _3770 = inversesqrt(_3767);
                                float _3771 = _3770 * _3764;
                                float _3772 = _3770 * _3765;
                                float _3773 = _3770 * _3766;
                                float _3777 = 1.0 - (_3767 / (_3632 * _3632));
                                float _4955 = isnan(0.0) ? _3777 : (isnan(_3777) ? 0.0 : max(_3777, 0.0));
                                float _3778 = isnan(1.0) ? _4955 : (isnan(_4955) ? 1.0 : min(_4955, 1.0));
                                float _3782 = sqrt(_3767) * _3647.w;
                                float _3784 = 1.39999997615814208984375 / (_3782 + 1.39999997615814208984375);
                                float _3785 = _3784 * _3784;
                                float _3788 = ((1.0 - _3785) * dot(vec3(_3771, _3772, _3773), vec3(_909, _912, _915))) + _3785;
                                float _3791 = _3782 * _3782;
                                float _3795 = (fma(_2079, _3674.z, fma(_2078, _3674.y, _3674.x * _2077)) + _3674.w) / _3736;
                                float _3796 = (fma(_2079, _3689.z, fma(_2078, _3689.y, _3689.x * _2077)) + _3689.w) / _3736;
                                float _3800 = 1.0 - dot(vec2(_3795, _3796), vec2(_3795, _3796));
                                float _4971 = isnan(0.0) ? _3800 : (isnan(_3800) ? 0.0 : max(_3800, 0.0));
                                float _3801 = isnan(1.0) ? _4971 : (isnan(_4971) ? 1.0 : min(_4971, 1.0));
                                float _3802 = _3801 * (((isnan(0.0) ? _3788 : (isnan(_3788) ? 0.0 : max(_3788, 0.0))) * _3778) / ((_3791 * 0.699999988079071044921875) + 1.0));
                                float _3814 = exp2(log2(1.0 / ((_3791 * 3.5) + 5.0)) * 0.25);
                                float _3815 = 1.0 - _984;
                                float _3822 = sqrt(1.0 - ((1.0 - (_3815 * _3815)) * (1.0 - (_3814 * _3814))));
                                float _3823 = _3822 * _3822;
                                float _3824 = _3823 * _3823;
                                float _3825 = _3771 - _3244;
                                float _3826 = _3772 - _3245;
                                float _3827 = _3773 - _3246;
                                float _3831 = inversesqrt(dot(vec3(_3825, _3826, _3827), vec3(_3825, _3826, _3827)));
                                float _3835 = dot(vec3(_909, _912, _915), vec3((-0.0) - _3244, (-0.0) - _3245, (-0.0) - _3246));
                                float _4982 = isnan(0.0) ? _3835 : (isnan(_3835) ? 0.0 : max(_3835, 0.0));
                                float _3838 = isnan(1.0) ? _4982 : (isnan(_4982) ? 1.0 : min(_4982, 1.0));
                                float _3839 = dot(vec3(_909, _912, _915), vec3(_3831 * _3825, _3831 * _3826, _3831 * _3827));
                                float _4993 = isnan(0.0) ? _3839 : (isnan(_3839) ? 0.0 : max(_3839, 0.0));
                                float _3842 = isnan(1.0) ? _4993 : (isnan(_4993) ? 1.0 : min(_4993, 1.0));
                                float _3846 = ((_3842 * _3842) * (_3824 + (-1.0))) + 1.0;
                                float _3847 = _3784 * _3823;
                                float _3848 = _3847 * _3847;
                                float _3854 = ((1.0 - _3848) * dot(vec3(_909, _912, _915), vec3(_3771, _3772, _3773))) + _3848;
                                float _5004 = isnan(0.0) ? _3854 : (isnan(_3854) ? 0.0 : max(_3854, 0.0));
                                float _3855 = isnan(1.0) ? _5004 : (isnan(_5004) ? 1.0 : min(_5004, 1.0));
                                float _3856 = 1.0 - _3823;
                                float _3866 = (0.5 / (((_3855 * ((_3838 * _3856) + _3823)) + 9.9999999392252902907785028219223e-09) + (((_3855 * _3856) + _3823) * _3838))) * _3855;
                                float _5015 = isnan(0.0) ? _3866 : (isnan(_3866) ? 0.0 : max(_3866, 0.0));
                                float _3876 = (_3801 * _3778) * (((_3824 * 3.1415927410125732421875) * (isnan(1.0) ? _5015 : (isnan(_5015) ? 1.0 : min(_5015, 1.0)))) / ((_3846 * _3846) * ((_3791 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3802 * _3647.z;
                                frontier_phi_88_pred_1 = _3802 * _3647.y;
                                frontier_phi_88_pred_2 = _3802 * _3647.x;
                                frontier_phi_88_pred_3 = _3876 * _3659.z;
                                frontier_phi_88_pred_4 = _3876 * _3659.y;
                                frontier_phi_88_pred_5 = _3876 * _3659.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3885 = frontier_phi_88_pred;
                            _3884 = frontier_phi_88_pred_1;
                            _3883 = frontier_phi_88_pred_2;
                            _3882 = frontier_phi_88_pred_3;
                            _3881 = frontier_phi_88_pred_4;
                            _3880 = frontier_phi_88_pred_5;
                            _3589 = _3883 + _3602;
                            _3590 = _3884 + _3603;
                            _3591 = _3885 + _3604;
                            _3586 = _3880 + _3599;
                            _3587 = _3881 + _3600;
                            _3588 = _3882 + _3601;
                            if (_3606 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3599 = _3586;
                                _3600 = _3587;
                                _3601 = _3588;
                                _3602 = _3589;
                                _3603 = _3590;
                                _3604 = _3591;
                                _3605 = _3606;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3591;
                        frontier_phi_82_pred_1 = _3590;
                        frontier_phi_82_pred_2 = _3589;
                        frontier_phi_82_pred_3 = _3588;
                        frontier_phi_82_pred_4 = _3587;
                        frontier_phi_82_pred_5 = _3586;
                    }
                    _3229 = frontier_phi_82_pred;
                    _3227 = frontier_phi_82_pred_1;
                    _3225 = frontier_phi_82_pred_2;
                    _3223 = frontier_phi_82_pred_3;
                    _3221 = frontier_phi_82_pred_4;
                    _3219 = frontier_phi_82_pred_5;
                    uint _3385 = _3384 + 1u;
                    if (_3385 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3378 = _3219;
                        _3379 = _3221;
                        _3380 = _3223;
                        _3381 = _3225;
                        _3382 = _3227;
                        _3383 = _3229;
                        _3384 = _3385;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3225;
                frontier_phi_63_64_ladder_1 = _3229;
                frontier_phi_63_64_ladder_2 = _3227;
                frontier_phi_63_64_ladder_3 = _3223;
                frontier_phi_63_64_ladder_4 = _3221;
                frontier_phi_63_64_ladder_5 = _3219;
            }
            else
            {
                frontier_phi_63_64_ladder = _3104;
                frontier_phi_63_64_ladder_1 = _3108;
                frontier_phi_63_64_ladder_2 = _3106;
                frontier_phi_63_64_ladder_3 = _3102;
                frontier_phi_63_64_ladder_4 = _3100;
                frontier_phi_63_64_ladder_5 = _3098;
            }
            _3218 = frontier_phi_63_64_ladder_5;
            _3220 = frontier_phi_63_64_ladder_4;
            _3222 = frontier_phi_63_64_ladder_3;
            _3224 = frontier_phi_63_64_ladder;
            _3226 = frontier_phi_63_64_ladder_2;
            _3228 = frontier_phi_63_64_ladder_1;
        }
        float _3233 = isnan(1.0) ? _968 : (isnan(_968) ? 1.0 : min(_968, 1.0));
        _3031 = (_3233 * _3224) + _2543;
        _3033 = (_3233 * _3226) + _2545;
        _3035 = (_3233 * _3228) + _2547;
        _3037 = ((_3218 * _953) * _3233) + _2881;
        _3039 = ((_3220 * _955) * _3233) + _2883;
        _3041 = ((_3222 * _956) * _3233) + _2885;
    }
    else
    {
        _3031 = _2543;
        _3033 = _2545;
        _3035 = _2547;
        _3037 = _2881;
        _3039 = _2883;
        _3041 = _2885;
    }
    float _5031 = isnan(0.0) ? _943 : (isnan(_943) ? 0.0 : max(_943, 0.0));
    float _5042 = isnan(0.0) ? _944 : (isnan(_944) ? 0.0 : max(_944, 0.0));
    float _5053 = isnan(0.0) ? _945 : (isnan(_945) ? 0.0 : max(_945, 0.0));
    float _3058 = ((isnan(1.0) ? _5031 : (isnan(_5031) ? 1.0 : min(_5031, 1.0))) * (_3031 + ((isnan(0.0) ? _1730 : (isnan(_1730) ? 0.0 : max(_1730, 0.0))) * _968))) + ((_3037 + ((isnan(0.0) ? _2024 : (isnan(_2024) ? 0.0 : max(_2024, 0.0))) * _1809)) * cbPerFrame._m0[3u].x);
    float _3059 = ((isnan(1.0) ? _5042 : (isnan(_5042) ? 1.0 : min(_5042, 1.0))) * (_3033 + ((isnan(0.0) ? _1733 : (isnan(_1733) ? 0.0 : max(_1733, 0.0))) * _968))) + ((_3039 + ((isnan(0.0) ? _2027 : (isnan(_2027) ? 0.0 : max(_2027, 0.0))) * _1809)) * cbPerFrame._m0[3u].x);
    float _3060 = ((isnan(1.0) ? _5053 : (isnan(_5053) ? 1.0 : min(_5053, 1.0))) * (_3035 + ((isnan(0.0) ? _1736 : (isnan(_1736) ? 0.0 : max(_1736, 0.0))) * _968))) + ((_3041 + ((isnan(0.0) ? _2030 : (isnan(_2030) ? 0.0 : max(_2030, 0.0))) * _1809)) * cbPerFrame._m0[3u].x);
    uint _3061 = _928 + 6u;
    float _3069 = _890 / cbSceneParam._m0[86u].x;
    float _3070 = _891 / cbSceneParam._m0[86u].y;
    vec4 _3084 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3069, _3070, (log2((isnan(cbSceneParam._m0[77u].w) ? _813 : (isnan(_813) ? cbSceneParam._m0[77u].w : min(_813, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3086 = _3084.x;
    float _3087 = _3084.y;
    float _3088 = _3084.z;
    float _3089 = _3084.w;
    float _3160;
    float _3162;
    float _3164;
    float _3166;
    if (_813 > cbSceneParam._m0[78u].w)
    {
        float _3123 = isnan(_813) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _813 : min(cbSceneParam._m0[80u].w, _813));
        float _3124 = _3123 / _813;
        float _3135 = _3124 * _863;
        float _3136 = _864 * _3124;
        float _3137 = (-0.0) - _3136;
        float _3138 = _3124 * _865;
        float _3140 = (cbSceneParam._m0[77u].w * _3137) / _3123;
        float _3141 = _3140 + cbSceneParam._m0[79u].w;
        float _3142 = cbSceneParam._m0[79u].w - _3136;
        float _3148 = sqrt(((_3135 * _3135) + (_3136 * _3136)) + (_3138 * _3138));
        float _3151 = (1.0 - (cbSceneParam._m0[77u].w / _3123)) * _3148;
        float _3156 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3158 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3335;
        if (abs((_3137 - _3140) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3335 = ((((_3141 > 0.0) ? exp2(_3156 * _3141) : (2.0 - exp2(_3158 * _3141))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3151;
        }
        else
        {
            float _3279 = 1.0 / cbSceneParam._m0[80u].x;
            float _3280 = isnan(_3142) ? _3141 : (isnan(_3141) ? _3142 : max(_3141, _3142));
            float _3281 = isnan(_3142) ? _3141 : (isnan(_3141) ? _3142 : min(_3141, _3142));
            float _3290 = isnan(0.0) ? _3280 : (isnan(_3280) ? 0.0 : min(_3280, 0.0));
            float _3291 = isnan(0.0) ? _3281 : (isnan(_3281) ? 0.0 : min(_3281, 0.0));
            _3335 = ((abs(_3148 / _3137) * cbSceneParam._m0[80u].y) * ((((_3290 - _3291) * 2.0) - ((exp2(_3156 * (isnan(0.0) ? _3280 : (isnan(_3280) ? 0.0 : max(_3280, 0.0)))) - exp2(_3156 * (isnan(0.0) ? _3281 : (isnan(_3281) ? 0.0 : max(_3281, 0.0))))) * _3279)) - ((exp2(_3158 * _3290) - exp2(_3158 * _3291)) * _3279))) + (_3151 * cbSceneParam._m0[80u].z);
        }
        vec4 _3337 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3069, _3070, 1.0), 0.0);
        float _3346 = exp2((_3335 * (-1.44269502162933349609375)) * (1.0 - _3337.w));
        float _3347 = log2(_3346);
        float _3363 = log2(_3089);
        _3160 = (exp2(_3363 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3347 * cbSceneParam._m0[78u].x)) * _3337.x) / cbSceneParam._m0[78u].x)) + _3086;
        _3162 = (exp2(_3363 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3347 * cbSceneParam._m0[78u].y)) * _3337.y) / cbSceneParam._m0[78u].y)) + _3087;
        _3164 = (exp2(_3363 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3347 * cbSceneParam._m0[78u].z)) * _3337.z) / cbSceneParam._m0[78u].z)) + _3088;
        _3166 = _3346 * _3089;
    }
    else
    {
        _3160 = _3086;
        _3162 = _3087;
        _3164 = _3088;
        _3166 = _3089;
    }
    bool _3373;
    vec4 _3176;
    vec4 _3198;
    float _3200;
    float _3204;
    float _3205;
    float _3206;
    float _3207;
    bool _3217;
    for (;;)
    {
        _3176 = cbMatDynParam._m0[0u];
        float _3178 = roundEven(_3176.y);
        bool _3179 = _3178 == 3.0;
        float _3180 = log2(_3166);
        float _3187 = exp2(_3180 * cbSceneParam._m0[78u].x) * _3058;
        float _3188 = exp2(_3180 * cbSceneParam._m0[78u].y) * _3059;
        float _3189 = exp2(_3180 * cbSceneParam._m0[78u].z) * _3060;
        float _3196 = _879 + (-0.5);
        _3198 = cbMtdParam._m0[1u];
        _3200 = _3198.y * _3196;
        float _3203 = (_3178 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3204 = _3203 * (_3179 ? _3187 : (_3187 + (cbSceneParam._m0[72u].w * _3160)));
        _3205 = _3203 * (_3179 ? _3188 : (_3188 + (cbSceneParam._m0[72u].w * _3162)));
        _3206 = _3203 * (_3179 ? _3189 : (_3189 + (cbSceneParam._m0[72u].w * _3164)));
        _3207 = _3196 * 0.999000012874603271484375;
        _3217 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3217)
        {
            if ((cbInstanceData._m0[_928 + 7u].x + _3207) < 0.5)
            {
                _3373 = true;
                break;
            }
        }
        uint _3314 = _929 + uint(_3176.w);
        if ((cbInstanceData._m0[_3314].w < 1.0) && ((cbInstanceData._m0[_3314].w + _3207) < 0.5))
        {
            _3373 = true;
            break;
        }
        if ((_3200 + 1.0) < _3198.x)
        {
            _3373 = true;
            break;
        }
        _3373 = false;
        break;
    }
    float _3577;
    if (_3373)
    {
        discard_state = true;
        _3577 = 0.0;
    }
    else
    {
        _3577 = cbInstanceData._m0[_3061].w;
    }
    SV_Target.x = _3204;
    SV_Target.y = _3205;
    SV_Target.z = _3206;
    SV_Target.w = _3577;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3061].w;
    discard_exit();
}


