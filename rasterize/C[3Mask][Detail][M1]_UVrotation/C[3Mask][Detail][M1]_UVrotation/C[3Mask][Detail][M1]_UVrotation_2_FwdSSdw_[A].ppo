#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[20];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_19;
layout(set = 0, binding = 11) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_2;
layout(set = 0, binding = 12) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_20;
layout(set = 0, binding = 13) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_3;
layout(set = 0, binding = 14) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_5;
layout(set = 0, binding = 15) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_6;
layout(set = 0, binding = 17) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_8;
layout(set = 0, binding = 18) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_11;
layout(set = 0, binding = 3) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_12;
layout(set = 0, binding = 4) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_13;
layout(set = 0, binding = 5) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_14;
layout(set = 0, binding = 6) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_15;
layout(set = 0, binding = 7) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_16;
layout(set = 0, binding = 8) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_17;
layout(set = 0, binding = 9) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_18;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1369;
float _3775;
float _3776;
float _3777;
float _3778;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _219 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _220 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _221 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _227 = inversesqrt(dot(vec3(_219, _220, _221), vec3(_219, _220, _221)));
    float _234 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _241 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _264 = sin(cbMtdParam._m0[18u].x);
    float _265 = cos(cbMtdParam._m0[18u].x);
    float _266 = TEXCOORD.x - cbMtdParam._m0[17u].w;
    float _267 = TEXCOORD.y - cbMtdParam._m0[17u].w;
    float _275 = (cbMtdParam._m0[17u].w + cbMtdParam._m0[19u].y) + fma(_267, (-0.0) - _264, _265 * _266);
    float _277 = (cbMtdParam._m0[17u].w + cbMtdParam._m0[19u].z) + fma(_267, _265, _266 * _264);
    vec4 _290 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * _275) + cbTextureTilingScale._m0[1u].z, (_277 * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w));
    float _296 = _290.x * cbMtdParam._m0[10u].x;
    float _297 = _290.y * cbMtdParam._m0[10u].y;
    float _298 = _290.z * cbMtdParam._m0[10u].z;
    vec4 _316 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w));
    vec4 _335 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_0, SS_WrapLinear), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _360 = cbMtdParam._m0[19u].x * texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.x) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD.y) + cbTextureTilingScale._m0[13u].w)).x;
    float _371 = ((cbMtdParam._m0[15u].x * (-1.39999997615814208984375)) * (((1.0 - _335.x) * 2.0) - _360)) + 1.0;
    float _3787 = isnan(0.0) ? _371 : (isnan(_371) ? 0.0 : max(_371, 0.0));
    float _372 = isnan(1.0) ? _3787 : (isnan(_3787) ? 1.0 : min(_3787, 1.0));
    float _379 = (_372 * ((_316.x * cbMtdParam._m0[11u].x) - _296)) + _296;
    float _380 = (_372 * ((_316.y * cbMtdParam._m0[11u].y) - _297)) + _297;
    float _381 = (_372 * ((_316.z * cbMtdParam._m0[11u].z) - _298)) + _298;
    vec4 _399 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_8, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[17u].x * TEXCOORD.x) + cbTextureTilingScale._m0[17u].z, (cbTextureTilingScale._m0[17u].y * TEXCOORD.y) + cbTextureTilingScale._m0[17u].w));
    float _412 = (((((1.0 - _335.y) * 2.0) - _360) * (-1.39999997615814208984375)) * cbMtdParam._m0[18u].z) + 1.0;
    float _3798 = isnan(0.0) ? _412 : (isnan(_412) ? 0.0 : max(_412, 0.0));
    float _413 = isnan(1.0) ? _3798 : (isnan(_3798) ? 1.0 : min(_3798, 1.0));
    float _420 = (((_399.x * cbMtdParam._m0[12u].x) - _379) * _413) + _379;
    float _421 = (_413 * ((_399.y * cbMtdParam._m0[12u].y) - _380)) + _380;
    float _422 = (_413 * ((_399.z * cbMtdParam._m0[12u].z) - _381)) + _381;
    vec4 _439 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _452 = (((((1.0 - _335.z) * 2.0) - _360) * (-1.39999997615814208984375)) * cbMtdParam._m0[18u].w) + 1.0;
    float _3809 = isnan(0.0) ? _452 : (isnan(_452) ? 0.0 : max(_452, 0.0));
    float _453 = isnan(1.0) ? _3809 : (isnan(_3809) ? 1.0 : min(_3809, 1.0));
    vec4 _481 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _489 = ((((((_439.x * cbMtdParam._m0[13u].x) - _420) * _453) + _420) * 4.55000019073486328125) * cbMtdParam._m0[9u].x) * _481.x;
    float _492 = ((((_453 * ((_439.y * cbMtdParam._m0[13u].y) - _421)) + _421) * 4.55000019073486328125) * cbMtdParam._m0[9u].y) * _481.y;
    float _495 = ((((_453 * ((_439.z * cbMtdParam._m0[13u].z) - _422)) + _422) * 4.55000019073486328125) * cbMtdParam._m0[9u].z) * _481.z;
    vec4 _515 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_20, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.z) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.w) + cbTextureTilingScale._m0[12u].w));
    float _544 = (TEXCOORD_5.x - ((cbMtdParam._m0[15u].w * (1.0 - TEXCOORD_5.x)) * (texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[18u].x * TEXCOORD.z) + cbTextureTilingScale._m0[18u].z, (cbTextureTilingScale._m0[18u].y * TEXCOORD.w) + cbTextureTilingScale._m0[18u].w)).x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[15u].z + 1.0);
    float _3820 = isnan(0.0) ? _544 : (isnan(_544) ? 0.0 : max(_544, 0.0));
    float _545 = isnan(1.0) ? _3820 : (isnan(_3820) ? 1.0 : min(_3820, 1.0));
    float _552 = (_545 * ((_515.x * cbMtdParam._m0[14u].x) - _489)) + _489;
    float _553 = (_545 * ((_515.y * cbMtdParam._m0[14u].y) - _492)) + _492;
    float _554 = (_545 * ((_515.z * cbMtdParam._m0[14u].z) - _495)) + _495;
    vec4 _567 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * _275) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _277) + cbTextureTilingScale._m0[5u].w));
    float _569 = _567.x;
    float _587 = ((texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w)).x - _569) * _372) + _569;
    float _604 = ((texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w)).x - _587) * _413) + _587;
    float _621 = ((texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w)).x - _604) * _453) + _604;
    float _625 = (_621 - (_621 * TEXCOORD_5.x)) * cbMtdParam._m0[18u].y;
    vec4 _638 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.z) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.w) + cbTextureTilingScale._m0[3u].w));
    vec4 _660 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[14u].x * _275) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _277) + cbTextureTilingScale._m0[14u].w));
    float _662 = _660.x;
    float _663 = _660.y;
    float _666 = cbMtdParam._m0[17u].y * _660.z;
    vec4 _678 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * TEXCOORD.x) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * TEXCOORD.y) + cbTextureTilingScale._m0[15u].w));
    float _687 = (((cbMtdParam._m0[17u].x * _678.z) - _666) * _372) + _666;
    vec4 _700 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_15, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _712 = (((cbMtdParam._m0[16u].w * _700.z) - _687) * _413) + _687;
    vec4 _725 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _734 = (((cbMtdParam._m0[16u].z * _725.z) - _712) * _453) + _712;
    float _739 = ((cbMtdParam._m0[16u].x * TEXCOORD_5.x) * ((_638.z * cbMtdParam._m0[17u].z) - _734)) + _734;
    float _744 = ((_678.x - _662) * _372) + _662;
    float _745 = ((_678.y - _663) * _372) + _663;
    float _750 = ((_700.x - _744) * _413) + _744;
    float _751 = ((_700.y - _745) * _413) + _745;
    float _760 = ((((_725.x - _750) * _453) + _750) * 2.0) + (-1.0);
    float _761 = ((((_725.y - _751) * _453) + _751) * 2.0) + (-1.0);
    float _762 = dot(vec2(_760, _761), vec2(_760, _761));
    float _3831 = isnan(0.0) ? _762 : (isnan(_762) ? 0.0 : max(_762, 0.0));
    float _767 = sqrt(1.0 - (isnan(1.0) ? _3831 : (isnan(_3831) ? 1.0 : min(_3831, 1.0))));
    float _773 = ((((_638.x * 2.0) + (-1.0)) * TEXCOORD_5.x) * cbMtdParam._m0[15u].y) + _760;
    float _774 = ((((_638.y * 2.0) + (-1.0)) * TEXCOORD_5.y) * cbMtdParam._m0[15u].y) + _761;
    float _777 = fma(_767, _234 * NORMAL.x, fma(_774, _241 * TANGENT.x, (_227 * _219) * _773));
    float _780 = fma(_767, _234 * NORMAL.y, fma(_774, _241 * TANGENT.y, (_227 * _220) * _773));
    float _783 = fma(_767, _234 * NORMAL.z, fma(_774, _241 * TANGENT.z, (_227 * _221) * _773));
    float _787 = inversesqrt(dot(vec3(_777, _780, _783), vec3(_777, _780, _783)));
    float _788 = _787 * _777;
    float _789 = _787 * _780;
    float _790 = _787 * _783;
    float _3842 = isnan(0.0) ? _739 : (isnan(_739) ? 0.0 : max(_739, 0.0));
    float _791 = isnan(1.0) ? _3842 : (isnan(_3842) ? 1.0 : min(_3842, 1.0));
    float _3853 = isnan(0.0) ? _552 : (isnan(_552) ? 0.0 : max(_552, 0.0));
    float _3864 = isnan(0.0) ? _553 : (isnan(_553) ? 0.0 : max(_553, 0.0));
    float _3875 = isnan(0.0) ? _554 : (isnan(_554) ? 0.0 : max(_554, 0.0));
    float _3886 = isnan(0.0) ? _625 : (isnan(_625) ? 0.0 : max(_625, 0.0));
    float _795 = isnan(1.0) ? _3886 : (isnan(_3886) ? 1.0 : min(_3886, 1.0));
    float _811 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _851 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _861 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _851);
    float _862 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _851);
    float _863 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _851);
    float _867 = inversesqrt(dot(vec3(_861, _862, _863), vec3(_861, _862, _863)));
    float _868 = _861 * _867;
    float _869 = _862 * _867;
    float _870 = _863 * _867;
    vec4 _875 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _877 = _875.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1049 = sqrt(((_861 * _861) + (_862 * _862)) + (_863 * _863));
        float _1055 = (cbMatDynParam._m0[5u].x * _1049) + cbMatDynParam._m0[5u].y;
        float _3897 = isnan(0.0) ? _1055 : (isnan(_1055) ? 0.0 : max(_1055, 0.0));
        float _1056 = isnan(1.0) ? _3897 : (isnan(_3897) ? 1.0 : min(_3897, 1.0));
        float _1060 = (cbMatDynParam._m0[5u].z * _1049) + cbMatDynParam._m0[5u].w;
        float _3908 = isnan(0.0) ? _1060 : (isnan(_1060) ? 0.0 : max(_1060, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3908 : (isnan(_3908) ? 1.0 : min(_3908, 1.0))) - _1056)) + _1056) < ((_877 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _888 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _889 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _907 = fma(_790, cbSceneParam._m0[5u].z, fma(_789, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _788));
    float _910 = fma(_790, cbSceneParam._m0[6u].z, fma(_789, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _788));
    float _913 = fma(_790, cbSceneParam._m0[7u].z, fma(_789, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _788));
    uint _926 = uint(roundEven(NORMAL.w)) * 13u;
    uint _927 = _926 + 9u;
    uint _928 = _927 + uint(cbMatDynParam._m0[0u].w);
    float _934 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3853 : (isnan(_3853) ? 1.0 : min(_3853, 1.0)))) * cbInstanceData._m0[_928].x;
    float _935 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3864 : (isnan(_3864) ? 1.0 : min(_3864, 1.0)))) * cbInstanceData._m0[_928].y;
    float _936 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3875 : (isnan(_3875) ? 1.0 : min(_3875, 1.0)))) * cbInstanceData._m0[_928].z;
    float _3919 = isnan(0.0) ? _934 : (isnan(_934) ? 0.0 : max(_934, 0.0));
    float _937 = isnan(1.0) ? _3919 : (isnan(_3919) ? 1.0 : min(_3919, 1.0));
    float _3930 = isnan(0.0) ? _935 : (isnan(_935) ? 0.0 : max(_935, 0.0));
    float _938 = isnan(1.0) ? _3930 : (isnan(_3930) ? 1.0 : min(_3930, 1.0));
    float _3941 = isnan(0.0) ? _936 : (isnan(_936) ? 0.0 : max(_936, 0.0));
    float _939 = isnan(1.0) ? _3941 : (isnan(_3941) ? 1.0 : min(_3941, 1.0));
    float _940 = 1.0 - _795;
    float _941 = _937 * _940;
    float _942 = _938 * _940;
    float _943 = _939 * _940;
    float _948 = (_937 + (-0.039999999105930328369140625)) * _795;
    float _949 = (_938 + (-0.039999999105930328369140625)) * _795;
    float _950 = (_939 + (-0.039999999105930328369140625)) * _795;
    float _951 = _948 + 0.039999999105930328369140625;
    float _953 = _949 + 0.039999999105930328369140625;
    float _954 = _950 + 0.039999999105930328369140625;
    vec4 _963 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _888, cbSceneParam._m0[86u].y * _889));
    float _966 = _963.x * TEXCOORD_5.w;
    float _967 = dot(vec3(_788, _789, _790), vec3(_868, _869, _870));
    float _970 = _967 * 2.0;
    float _974 = (_970 * _788) - _868;
    float _975 = (_970 * _789) - _869;
    float _976 = (_970 * _790) - _870;
    float _980 = abs(dot(vec3(_868, _869, _870), vec3(_788, _789, _790)));
    float _3952 = isnan(0.0) ? _980 : (isnan(_980) ? 0.0 : max(_980, 0.0));
    float _982 = sqrt(_791);
    float _995 = exp2((_982 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3952 : (isnan(_3952) ? 1.0 : min(_3952, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_982 * 3.0));
    float _1001 = (1.0 - _995) * ((_982 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1002 = _995 * _982;
    float _1030 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1034 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1038 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1368;
    float _1370;
    float _1371;
    float _1372;
    float _1373;
    float _1374;
    float _1375;
    float _1376;
    float _1377;
    float _1378;
    float _1379;
    float _1380;
    float _1381;
    float _1382;
    float _1383;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1093 = fma(_1038, cbModelParam._m0[26u].z, fma(_1034, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1030));
        float _1097 = fma(_1038, cbModelParam._m0[27u].z, fma(_1034, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1030));
        float _1101 = fma(_1038, cbModelParam._m0[28u].z, fma(_1034, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1030));
        float _1126 = _1030 + _788;
        float _1127 = _1034 + _789;
        float _1128 = _1038 + _790;
        float _1138 = fma(_1128, cbModelParam._m0[26u].z, fma(_1127, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1126)) - _1093;
        float _1139 = fma(_1128, cbModelParam._m0[27u].z, fma(_1127, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1126)) - _1097;
        float _1140 = fma(_1128, cbModelParam._m0[28u].z, fma(_1127, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1126)) - _1101;
        float _1144 = inversesqrt(dot(vec3(_1138, _1139, _1140), vec3(_1138, _1139, _1140)));
        float _1157 = ((_1144 * _1138) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1093 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1158 = ((_1144 * _1139) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1097 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1159 = ((_1144 * _1140) / cbModelParam._m0[34u].z) + ((((((_1101 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1162 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1157, _1158, _1159), 0.0);
        vec4 _1169 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1157, _1158, _1159), 0.0);
        vec4 _1176 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1157, _1158, _1159), 0.0);
        vec4 _1183 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1157, _1158, _1159), 0.0);
        float _1196 = exp2((_1162.w + (-0.5)) * 20.0) * 2.0;
        float _1197 = _1196 * (_1162.x + (-0.5));
        float _1198 = _1196 * (_1162.y + (-0.5));
        float _1199 = _1196 * (_1162.z + (-0.5));
        float _1206 = exp2((_1169.w + (-0.5)) * 20.0) * 2.0;
        float _1207 = _1206 * (_1169.x + (-0.5));
        float _1208 = _1206 * (_1169.y + (-0.5));
        float _1209 = _1206 * (_1169.z + (-0.5));
        float _1216 = exp2((_1176.w + (-0.5)) * 20.0) * 2.0;
        float _1217 = _1216 * (_1176.x + (-0.5));
        float _1218 = _1216 * (_1176.y + (-0.5));
        float _1219 = _1216 * (_1176.z + (-0.5));
        float _1226 = exp2((_1183.w + (-0.5)) * 20.0) * 2.0;
        float _1227 = _1226 * (_1183.x + (-0.5));
        float _1228 = _1226 * (_1183.y + (-0.5));
        float _1229 = _1226 * (_1183.z + (-0.5));
        float _1230 = isnan(0.0) ? _1227 : (isnan(_1227) ? 0.0 : max(_1227, 0.0));
        float _1231 = isnan(0.0) ? _1228 : (isnan(_1228) ? 0.0 : max(_1228, 0.0));
        float _1232 = isnan(0.0) ? _1229 : (isnan(_1229) ? 0.0 : max(_1229, 0.0));
        float _1233 = _1197 * 0.5;
        float _1234 = _1207 * 0.5;
        float _1235 = _1217 * 0.5;
        float _1236 = dot(vec3(_1233, _1234, _1235), vec3(_1233, _1234, _1235));
        float _1241 = (_1236 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1236);
        float _1250 = (dot(vec3(_788, _789, _790), vec3(_1241 * _1233, _1241 * _1234, _1241 * _1235)) + 1.0) * 0.5;
        float _3978 = isnan(0.0) ? _1250 : (isnan(_1250) ? 0.0 : max(_1250, 0.0));
        float _1260 = sqrt(((_1234 * _1234) + (_1233 * _1233)) + (_1235 * _1235)) / (_1230 + 9.9999997473787516355514526367188e-06);
        float _3989 = isnan(0.0) ? _1260 : (isnan(_1260) ? 0.0 : max(_1260, 0.0));
        float _1261 = isnan(1.0) ? _3989 : (isnan(_3989) ? 1.0 : min(_3989, 1.0));
        float _1262 = _1261 * 2.0;
        float _1266 = (1.0 - _1261) / (_1261 + 1.0);
        float _4000 = isnan(0.0) ? _1266 : (isnan(_1266) ? 0.0 : max(_1266, 0.0));
        float _1267 = isnan(1.0) ? _4000 : (isnan(_4000) ? 1.0 : min(_4000, 1.0));
        float _1276 = ((((1.0 - _1267) * (_1262 + 2.0)) * exp2(log2(isnan(1.0) ? _3978 : (isnan(_3978) ? 1.0 : min(_3978, 1.0))) * (_1262 + 1.0))) + _1267) * _1230;
        float _1277 = _1198 * 0.5;
        float _1278 = _1208 * 0.5;
        float _1279 = _1218 * 0.5;
        float _1280 = dot(vec3(_1277, _1278, _1279), vec3(_1277, _1278, _1279));
        float _1285 = (_1280 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1280);
        float _1293 = (dot(vec3(_788, _789, _790), vec3(_1285 * _1277, _1285 * _1278, _1285 * _1279)) + 1.0) * 0.5;
        float _4011 = isnan(0.0) ? _1293 : (isnan(_1293) ? 0.0 : max(_1293, 0.0));
        float _1302 = sqrt(((_1278 * _1278) + (_1277 * _1277)) + (_1279 * _1279)) / (_1231 + 9.9999997473787516355514526367188e-06);
        float _4022 = isnan(0.0) ? _1302 : (isnan(_1302) ? 0.0 : max(_1302, 0.0));
        float _1303 = isnan(1.0) ? _4022 : (isnan(_4022) ? 1.0 : min(_4022, 1.0));
        float _1304 = _1303 * 2.0;
        float _1308 = (1.0 - _1303) / (_1303 + 1.0);
        float _4033 = isnan(0.0) ? _1308 : (isnan(_1308) ? 0.0 : max(_1308, 0.0));
        float _1309 = isnan(1.0) ? _4033 : (isnan(_4033) ? 1.0 : min(_4033, 1.0));
        float _1318 = ((((1.0 - _1309) * (_1304 + 2.0)) * exp2(log2(isnan(1.0) ? _4011 : (isnan(_4011) ? 1.0 : min(_4011, 1.0))) * (_1304 + 1.0))) + _1309) * _1231;
        float _1319 = _1199 * 0.5;
        float _1320 = _1209 * 0.5;
        float _1321 = _1219 * 0.5;
        float _1322 = dot(vec3(_1319, _1320, _1321), vec3(_1319, _1320, _1321));
        float _1327 = (_1322 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1322);
        float _1335 = (dot(vec3(_788, _789, _790), vec3(_1327 * _1319, _1327 * _1320, _1327 * _1321)) + 1.0) * 0.5;
        float _4044 = isnan(0.0) ? _1335 : (isnan(_1335) ? 0.0 : max(_1335, 0.0));
        float _1344 = sqrt(((_1320 * _1320) + (_1319 * _1319)) + (_1321 * _1321)) / (_1232 + 9.9999997473787516355514526367188e-06);
        float _4055 = isnan(0.0) ? _1344 : (isnan(_1344) ? 0.0 : max(_1344, 0.0));
        float _1345 = isnan(1.0) ? _4055 : (isnan(_4055) ? 1.0 : min(_4055, 1.0));
        float _1346 = _1345 * 2.0;
        float _1350 = (1.0 - _1345) / (_1345 + 1.0);
        float _4066 = isnan(0.0) ? _1350 : (isnan(_1350) ? 0.0 : max(_1350, 0.0));
        float _1351 = isnan(1.0) ? _4066 : (isnan(_4066) ? 1.0 : min(_4066, 1.0));
        float _1360 = ((((1.0 - _1351) * (_1346 + 2.0)) * exp2(log2(isnan(1.0) ? _4044 : (isnan(_4044) ? 1.0 : min(_4044, 1.0))) * (_1346 + 1.0))) + _1351) * _1232;
        _1368 = _1199;
        _1370 = _1198;
        _1371 = _1197;
        _1372 = _1209;
        _1373 = _1208;
        _1374 = _1207;
        _1375 = _1219;
        _1376 = _1218;
        _1377 = _1217;
        _1378 = _1232;
        _1379 = _1231;
        _1380 = _1230;
        _1381 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1276 : (isnan(_1276) ? 0.0 : max(_1276, 0.0)));
        _1382 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1318 : (isnan(_1318) ? 0.0 : max(_1318, 0.0)));
        _1383 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1360 : (isnan(_1360) ? 0.0 : max(_1360, 0.0)));
    }
    else
    {
        _1368 = _1369;
        _1370 = _1369;
        _1371 = _1369;
        _1372 = _1369;
        _1373 = _1369;
        _1374 = _1369;
        _1375 = _1369;
        _1376 = _1369;
        _1377 = _1369;
        _1378 = _1369;
        _1379 = _1369;
        _1380 = _1369;
        _1381 = 0.0;
        _1382 = 0.0;
        _1383 = 0.0;
    }
    float _1681;
    float _1682;
    float _1683;
    float _1684;
    float _1685;
    float _1686;
    float _1687;
    float _1688;
    float _1689;
    float _1690;
    float _1691;
    float _1692;
    float _1693;
    float _1694;
    float _1695;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1412 = fma(_1038, cbModelParam._m0[30u].z, fma(_1034, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1030));
        float _1416 = fma(_1038, cbModelParam._m0[31u].z, fma(_1034, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1030));
        float _1420 = fma(_1038, cbModelParam._m0[32u].z, fma(_1034, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1030));
        float _1443 = _1030 + _788;
        float _1444 = _1034 + _789;
        float _1445 = _1038 + _790;
        float _1455 = fma(_1445, cbModelParam._m0[30u].z, fma(_1444, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1443)) - _1412;
        float _1456 = fma(_1445, cbModelParam._m0[31u].z, fma(_1444, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1443)) - _1416;
        float _1457 = fma(_1445, cbModelParam._m0[32u].z, fma(_1444, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1443)) - _1420;
        float _1461 = inversesqrt(dot(vec3(_1455, _1456, _1457), vec3(_1455, _1456, _1457)));
        float _1474 = ((_1461 * _1455) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1412 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1475 = ((_1461 * _1456) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1416 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1476 = ((_1461 * _1457) / cbModelParam._m0[35u].z) + ((((((_1420 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1478 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1474, _1475, _1476), 0.0);
        vec4 _1485 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1474, _1475, _1476), 0.0);
        vec4 _1492 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1474, _1475, _1476), 0.0);
        vec4 _1499 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1474, _1475, _1476), 0.0);
        float _1511 = exp2((_1478.w + (-0.5)) * 20.0) * 2.0;
        float _1512 = _1511 * (_1478.x + (-0.5));
        float _1513 = _1511 * (_1478.y + (-0.5));
        float _1514 = _1511 * (_1478.z + (-0.5));
        float _1521 = exp2((_1485.w + (-0.5)) * 20.0) * 2.0;
        float _1522 = _1521 * (_1485.x + (-0.5));
        float _1523 = _1521 * (_1485.y + (-0.5));
        float _1524 = _1521 * (_1485.z + (-0.5));
        float _1531 = exp2((_1492.w + (-0.5)) * 20.0) * 2.0;
        float _1532 = _1531 * (_1492.x + (-0.5));
        float _1533 = _1531 * (_1492.y + (-0.5));
        float _1534 = _1531 * (_1492.z + (-0.5));
        float _1541 = exp2((_1499.w + (-0.5)) * 20.0) * 2.0;
        float _1542 = _1541 * (_1499.x + (-0.5));
        float _1543 = _1541 * (_1499.y + (-0.5));
        float _1544 = _1541 * (_1499.z + (-0.5));
        float _1545 = isnan(0.0) ? _1542 : (isnan(_1542) ? 0.0 : max(_1542, 0.0));
        float _1546 = isnan(0.0) ? _1543 : (isnan(_1543) ? 0.0 : max(_1543, 0.0));
        float _1547 = isnan(0.0) ? _1544 : (isnan(_1544) ? 0.0 : max(_1544, 0.0));
        float _1548 = _1512 * 0.5;
        float _1549 = _1522 * 0.5;
        float _1550 = _1532 * 0.5;
        float _1551 = dot(vec3(_1548, _1549, _1550), vec3(_1548, _1549, _1550));
        float _1556 = (_1551 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1551);
        float _1564 = (dot(vec3(_788, _789, _790), vec3(_1556 * _1548, _1556 * _1549, _1556 * _1550)) + 1.0) * 0.5;
        float _4107 = isnan(0.0) ? _1564 : (isnan(_1564) ? 0.0 : max(_1564, 0.0));
        float _1573 = sqrt(((_1549 * _1549) + (_1548 * _1548)) + (_1550 * _1550)) / (_1545 + 9.9999997473787516355514526367188e-06);
        float _4118 = isnan(0.0) ? _1573 : (isnan(_1573) ? 0.0 : max(_1573, 0.0));
        float _1574 = isnan(1.0) ? _4118 : (isnan(_4118) ? 1.0 : min(_4118, 1.0));
        float _1575 = _1574 * 2.0;
        float _1579 = (1.0 - _1574) / (_1574 + 1.0);
        float _4129 = isnan(0.0) ? _1579 : (isnan(_1579) ? 0.0 : max(_1579, 0.0));
        float _1580 = isnan(1.0) ? _4129 : (isnan(_4129) ? 1.0 : min(_4129, 1.0));
        float _1589 = ((((1.0 - _1580) * (_1575 + 2.0)) * exp2(log2(isnan(1.0) ? _4107 : (isnan(_4107) ? 1.0 : min(_4107, 1.0))) * (_1575 + 1.0))) + _1580) * _1545;
        float _1590 = _1513 * 0.5;
        float _1591 = _1523 * 0.5;
        float _1592 = _1533 * 0.5;
        float _1593 = dot(vec3(_1590, _1591, _1592), vec3(_1590, _1591, _1592));
        float _1598 = (_1593 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1593);
        float _1606 = (dot(vec3(_788, _789, _790), vec3(_1598 * _1590, _1598 * _1591, _1598 * _1592)) + 1.0) * 0.5;
        float _4140 = isnan(0.0) ? _1606 : (isnan(_1606) ? 0.0 : max(_1606, 0.0));
        float _1615 = sqrt(((_1591 * _1591) + (_1590 * _1590)) + (_1592 * _1592)) / (_1546 + 9.9999997473787516355514526367188e-06);
        float _4151 = isnan(0.0) ? _1615 : (isnan(_1615) ? 0.0 : max(_1615, 0.0));
        float _1616 = isnan(1.0) ? _4151 : (isnan(_4151) ? 1.0 : min(_4151, 1.0));
        float _1617 = _1616 * 2.0;
        float _1621 = (1.0 - _1616) / (_1616 + 1.0);
        float _4162 = isnan(0.0) ? _1621 : (isnan(_1621) ? 0.0 : max(_1621, 0.0));
        float _1622 = isnan(1.0) ? _4162 : (isnan(_4162) ? 1.0 : min(_4162, 1.0));
        float _1631 = ((((1.0 - _1622) * (_1617 + 2.0)) * exp2(log2(isnan(1.0) ? _4140 : (isnan(_4140) ? 1.0 : min(_4140, 1.0))) * (_1617 + 1.0))) + _1622) * _1546;
        float _1632 = _1514 * 0.5;
        float _1633 = _1524 * 0.5;
        float _1634 = _1534 * 0.5;
        float _1635 = dot(vec3(_1632, _1633, _1634), vec3(_1632, _1633, _1634));
        float _1640 = (_1635 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1635);
        float _1648 = (dot(vec3(_788, _789, _790), vec3(_1640 * _1632, _1640 * _1633, _1640 * _1634)) + 1.0) * 0.5;
        float _4173 = isnan(0.0) ? _1648 : (isnan(_1648) ? 0.0 : max(_1648, 0.0));
        float _1657 = sqrt(((_1633 * _1633) + (_1632 * _1632)) + (_1634 * _1634)) / (_1547 + 9.9999997473787516355514526367188e-06);
        float _4184 = isnan(0.0) ? _1657 : (isnan(_1657) ? 0.0 : max(_1657, 0.0));
        float _1658 = isnan(1.0) ? _4184 : (isnan(_4184) ? 1.0 : min(_4184, 1.0));
        float _1659 = _1658 * 2.0;
        float _1663 = (1.0 - _1658) / (_1658 + 1.0);
        float _4195 = isnan(0.0) ? _1663 : (isnan(_1663) ? 0.0 : max(_1663, 0.0));
        float _1664 = isnan(1.0) ? _4195 : (isnan(_4195) ? 1.0 : min(_4195, 1.0));
        float _1673 = ((((1.0 - _1664) * (_1659 + 2.0)) * exp2(log2(isnan(1.0) ? _4173 : (isnan(_4173) ? 1.0 : min(_4173, 1.0))) * (_1659 + 1.0))) + _1664) * _1547;
        _1681 = _1514;
        _1682 = _1513;
        _1683 = _1512;
        _1684 = _1524;
        _1685 = _1523;
        _1686 = _1522;
        _1687 = _1534;
        _1688 = _1533;
        _1689 = _1532;
        _1690 = _1547;
        _1691 = _1546;
        _1692 = _1545;
        _1693 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1589 : (isnan(_1589) ? 0.0 : max(_1589, 0.0)));
        _1694 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1631 : (isnan(_1631) ? 0.0 : max(_1631, 0.0)));
        _1695 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1673 : (isnan(_1673) ? 0.0 : max(_1673, 0.0)));
    }
    else
    {
        _1681 = _1369;
        _1682 = _1369;
        _1683 = _1369;
        _1684 = _1369;
        _1685 = _1369;
        _1686 = _1369;
        _1687 = _1369;
        _1688 = _1369;
        _1689 = _1369;
        _1690 = _1369;
        _1691 = _1369;
        _1692 = _1369;
        _1693 = 0.0;
        _1694 = 0.0;
        _1695 = 0.0;
    }
    float _1705 = (cbModelParam._m0[1u].x * (_1693 - _1381)) + _1381;
    float _1706 = (cbModelParam._m0[1u].x * (_1694 - _1382)) + _1382;
    float _1707 = (cbModelParam._m0[1u].x * (_1695 - _1383)) + _1383;
    float _1728 = fma(_1707, cbSceneParam._m0[89u].z, fma(_1706, cbSceneParam._m0[89u].y, _1705 * cbSceneParam._m0[89u].x));
    float _1731 = fma(_1707, cbSceneParam._m0[90u].z, fma(_1706, cbSceneParam._m0[90u].y, _1705 * cbSceneParam._m0[90u].x));
    float _1734 = fma(_1707, cbSceneParam._m0[91u].z, fma(_1706, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1705));
    float _1749 = _974 * 0.5;
    float _1750 = _975 * 0.5;
    float _1751 = _976 * 0.5;
    float _1752 = dot(vec4(_1749, _1750, _1751, 1.0), vec4(_1683, _1686, _1689, _1692));
    float _1755 = dot(vec4(_1749, _1750, _1751, 1.0), vec4(_1682, _1685, _1688, _1691));
    float _1758 = dot(vec4(_1749, _1750, _1751, 1.0), vec4(_1681, _1684, _1687, _1690));
    float _1792;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1765 = dot(vec4(_1749, _1750, _1751, 1.0), vec4(_1368, _1372, _1375, _1378));
        float _1769 = dot(vec4(_1749, _1750, _1751, 1.0), vec4(_1370, _1373, _1376, _1379));
        float _1773 = dot(vec4(_1749, _1750, _1751, 1.0), vec4(_1371, _1374, _1377, _1380));
        float _1780 = dot(vec4(cbModelParam._m0[39u]), vec4(_1749, _1750, _1751, 1.0));
        _1792 = dot(vec3(isnan(0.0) ? _1773 : (isnan(_1773) ? 0.0 : max(_1773, 0.0)), isnan(0.0) ? _1769 : (isnan(_1769) ? 0.0 : max(_1769, 0.0)), isnan(0.0) ? _1765 : (isnan(_1765) ? 0.0 : max(_1765, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1780) ? 0.0 : (isnan(0.0) ? _1780 : max(0.0, _1780))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1792 = 1.0;
    }
    float _1803;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1794 = dot(vec4(cbModelParam._m0[40u]), vec4(_1749, _1750, _1751, 1.0));
        _1803 = dot(vec3(isnan(0.0) ? _1752 : (isnan(_1752) ? 0.0 : max(_1752, 0.0)), isnan(0.0) ? _1755 : (isnan(_1755) ? 0.0 : max(_1755, 0.0)), isnan(0.0) ? _1758 : (isnan(_1758) ? 0.0 : max(_1758, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1794) ? 0.0 : (isnan(0.0) ? _1794 : max(0.0, _1794))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1803 = 1.0;
    }
    float _1807 = (_1803 * cbModelParam._m0[1u].x) + (_1792 * (1.0 - cbModelParam._m0[1u].x));
    float _1817 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _791);
    float _1818 = isnan(_1817) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1817 : min(cbModelParam._m0[25u].z, _1817));
    float _1898;
    float _1900;
    float _1902;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1865 = fma(_1038, cbModelParam._m0[13u].z, fma(_1034, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1030)) + cbModelParam._m0[13u].w;
        float _1869 = fma(_1038, cbModelParam._m0[14u].z, fma(_1034, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1030)) + cbModelParam._m0[14u].w;
        float _1873 = fma(_1038, cbModelParam._m0[15u].z, fma(_1034, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1030)) + cbModelParam._m0[15u].w;
        float _1876 = fma(_976, cbModelParam._m0[13u].z, fma(_975, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _974));
        float _1879 = fma(_976, cbModelParam._m0[14u].z, fma(_975, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _974));
        float _1882 = fma(_976, cbModelParam._m0[15u].z, fma(_975, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _974));
        float _1910;
        if (_1876 > 0.0)
        {
            _1910 = abs((1.0 - _1865) / _1876);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1876 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1865 + 1.0) / _1876);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1910 = frontier_phi_17_15_ladder;
        }
        float _2135;
        if (_1879 > 0.0)
        {
            _2135 = abs((1.0 - _1869) / _1879);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1879 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1869 + 1.0) / _1879);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2135 = frontier_phi_26_22_ladder;
        }
        float _2392;
        if (_1882 > 0.0)
        {
            _2392 = abs((1.0 - _1873) / _1882);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1882 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1873 + 1.0) / _1882);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2392 = frontier_phi_38_33_ladder;
        }
        float _2394 = isnan(_2135) ? _1910 : (isnan(_1910) ? _2135 : min(_1910, _2135));
        float _2395 = isnan(_2392) ? _2394 : (isnan(_2394) ? _2392 : min(_2394, _2392));
        float _2399 = (_2395 * _1876) + _1865;
        float _2400 = (_2395 * _1879) + _1869;
        float _2401 = (_2395 * _1882) + _1873;
        float _2402 = _2395 * 9.9999997473787516355514526367188e-05;
        float _2404 = (-1.0) - _2402;
        float _2406 = _2402 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2401 > _2406) || ((_2401 < _2404) || ((_2400 > _2406) || ((_2400 < _2404) || ((_2399 < _2404) || (_2399 > _2406))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2529 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2401, cbModelParam._m0[9u].z, fma(_2400, cbModelParam._m0[9u].y, _2399 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2401, cbModelParam._m0[10u].z, fma(_2400, cbModelParam._m0[10u].y, _2399 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2401, cbModelParam._m0[11u].z, fma(_2400, cbModelParam._m0[11u].y, _2399 * cbModelParam._m0[11u].x))), _1818);
            frontier_phi_16_38_ladder = _2529.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2529.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2529.x * cbModelParam._m0[1u].y;
        }
        _1898 = frontier_phi_16_38_ladder_2;
        _1900 = frontier_phi_16_38_ladder_1;
        _1902 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1886 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_974, _975, _976), _1818);
        _1898 = _1886.x * cbModelParam._m0[1u].y;
        _1900 = _1886.y * cbModelParam._m0[1u].y;
        _1902 = _1886.z * cbModelParam._m0[1u].y;
    }
    float _1906 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _791);
    float _1907 = isnan(_1906) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1906 : min(cbModelParam._m0[25u].w, _1906));
    float _1998;
    float _2000;
    float _2002;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1962 = fma(_1038, cbModelParam._m0[21u].z, fma(_1034, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1030)) + cbModelParam._m0[21u].w;
        float _1966 = fma(_1038, cbModelParam._m0[22u].z, fma(_1034, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1030)) + cbModelParam._m0[22u].w;
        float _1970 = fma(_1038, cbModelParam._m0[23u].z, fma(_1034, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1030)) + cbModelParam._m0[23u].w;
        float _1973 = fma(_976, cbModelParam._m0[21u].z, fma(_975, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _974));
        float _1976 = fma(_976, cbModelParam._m0[22u].z, fma(_975, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _974));
        float _1979 = fma(_976, cbModelParam._m0[23u].z, fma(_975, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _974));
        float _2140;
        if (_1973 > 0.0)
        {
            _2140 = abs((1.0 - _1962) / _1973);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1973 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1962 + 1.0) / _1973);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2140 = frontier_phi_28_24_ladder;
        }
        float _2419;
        if (_1976 > 0.0)
        {
            _2419 = abs((1.0 - _1966) / _1976);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1976 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1966 + 1.0) / _1976);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2419 = frontier_phi_40_35_ladder;
        }
        float _2632;
        if (_1979 > 0.0)
        {
            _2632 = abs((1.0 - _1970) / _1979);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1979 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1970 + 1.0) / _1979);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2632 = frontier_phi_49_46_ladder;
        }
        float _2634 = isnan(_2419) ? _2140 : (isnan(_2140) ? _2419 : min(_2140, _2419));
        float _2635 = isnan(_2632) ? _2634 : (isnan(_2634) ? _2632 : min(_2634, _2632));
        float _2639 = (_2635 * _1973) + _1962;
        float _2640 = (_2635 * _1976) + _1966;
        float _2641 = (_2635 * _1979) + _1970;
        float _2642 = _2635 * 9.9999997473787516355514526367188e-05;
        float _2643 = (-1.0) - _2642;
        float _2645 = _2642 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2641 > _2645) || ((_2641 < _2643) || ((_2640 > _2645) || ((_2640 < _2643) || ((_2639 < _2643) || (_2639 > _2645))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2840 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2641, cbModelParam._m0[17u].z, fma(_2640, cbModelParam._m0[17u].y, _2639 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2641, cbModelParam._m0[18u].z, fma(_2640, cbModelParam._m0[18u].y, _2639 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2641, cbModelParam._m0[19u].z, fma(_2640, cbModelParam._m0[19u].y, _2639 * cbModelParam._m0[19u].x))), _1907);
            frontier_phi_25_49_ladder = _2840.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2840.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2840.x * cbModelParam._m0[1u].z;
        }
        _1998 = frontier_phi_25_49_ladder_2;
        _2000 = frontier_phi_25_49_ladder_1;
        _2002 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1982 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_974, _975, _976), _1907);
        _1998 = _1982.x * cbModelParam._m0[1u].z;
        _2000 = _1982.y * cbModelParam._m0[1u].z;
        _2002 = _1982.z * cbModelParam._m0[1u].z;
    }
    float _2015 = (((_1001 * _951) + _1002) * _966) * ((cbModelParam._m0[1u].w * (_1998 - _1898)) + _1898);
    float _2017 = (((_1001 * _953) + _1002) * _966) * ((cbModelParam._m0[1u].w * (_2000 - _1900)) + _1900);
    float _2019 = (((_1001 * _954) + _1002) * _966) * ((cbModelParam._m0[1u].w * (_2002 - _1902)) + _1902);
    float _2022 = fma(_2019, cbSceneParam._m0[89u].z, fma(_2017, cbSceneParam._m0[89u].y, _2015 * cbSceneParam._m0[89u].x));
    float _2025 = fma(_2019, cbSceneParam._m0[90u].z, fma(_2017, cbSceneParam._m0[90u].y, _2015 * cbSceneParam._m0[90u].x));
    float _2028 = fma(_2019, cbSceneParam._m0[91u].z, fma(_2017, cbSceneParam._m0[91u].y, _2015 * cbSceneParam._m0[91u].x));
    vec4 _2036 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_888, _889));
    float _2038 = _2036.w;
    float _2050 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2038);
    float _2051 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2038);
    float _2052 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2038);
    uvec4 _2056 = floatBitsToUint(cbInstanceData._m0[_926 + 5u]);
    uint _2058 = _2056.x * 14u;
    uint _2059 = _2058 + 13u;
    float _2066 = _966 + (-1.0);
    float _2071 = (cbLight._m0[_2059].x * _2066) + 1.0;
    float _2072 = (cbLight._m0[_2059].y * _2066) + 1.0;
    float _2073 = (cbLight._m0[_2059].z * _2066) + 1.0;
    float _2074 = (cbLight._m0[_2059].w * _2066) + 1.0;
    uint _2075 = _2058 + 5u;
    float _2081 = isnan(1.0) ? _2072 : (isnan(_2072) ? 1.0 : min(_2072, 1.0));
    uint _2085 = _2058 + 4u;
    float _2094 = isnan(1.0) ? _2071 : (isnan(_2071) ? 1.0 : min(_2071, 1.0));
    uint _2098 = _2058 | 1u;
    float _2109 = dot(vec3(cbLight._m0[_2058].xyz), vec3(_788, _789, _790));
    float _2112 = dot(vec3(cbLight._m0[_2098].xyz), vec3(_788, _789, _790));
    float _4331 = isnan(0.0) ? _2109 : (isnan(_2109) ? 0.0 : max(_2109, 0.0));
    float _4342 = isnan(0.0) ? _2112 : (isnan(_2112) ? 0.0 : max(_2112, 0.0));
    float _2117 = (isnan(1.0) ? _4331 : (isnan(_4331) ? 1.0 : min(_4331, 1.0))) * 0.3183098733425140380859375;
    float _2119 = (isnan(1.0) ? _4342 : (isnan(_4342) ? 1.0 : min(_4342, 1.0))) * 0.3183098733425140380859375;
    float _2126 = ((cbLight._m0[_2075].x * _2081) * _2119) + (((cbLight._m0[_2085].x * _2050) * _2094) * _2117);
    float _2127 = ((_2081 * cbLight._m0[_2075].y) * _2119) + (((cbLight._m0[_2085].y * _2051) * _2094) * _2117);
    float _2128 = ((_2081 * cbLight._m0[_2075].z) * _2119) + (((cbLight._m0[_2085].z * _2052) * _2094) * _2117);
    uvec4 _2132 = floatBitsToUint(cbLight._m0[_2058 + 12u]);
    bool _2134 = _2132.x == 0u;
    float _2145;
    float _2147;
    float _2149;
    if (_2134)
    {
        _2145 = _2126;
        _2147 = _2127;
        _2149 = _2128;
    }
    else
    {
        uint _2153 = _2058 + 6u;
        float _2169 = (dot(vec3(cbLight._m0[_2058 + 2u].xyz), vec3(_788, _789, _790)) * 0.5) + 0.5;
        float _2170 = _2169 * _2169;
        float _4353 = isnan(0.0) ? _2170 : (isnan(_2170) ? 0.0 : max(_2170, 0.0));
        float _2171 = isnan(1.0) ? _4353 : (isnan(_4353) ? 1.0 : min(_4353, 1.0));
        float _2172 = isnan(1.0) ? _2073 : (isnan(_2073) ? 1.0 : min(_2073, 1.0));
        _2145 = (((cbLight._m0[_2153].x * 0.3183098733425140380859375) * _2171) * _2172) + _2126;
        _2147 = (((cbLight._m0[_2153].y * 0.3183098733425140380859375) * _2171) * _2172) + _2127;
        _2149 = (((cbLight._m0[_2153].z * 0.3183098733425140380859375) * _2171) * _2172) + _2128;
    }
    bool _2152 = _2132.y == 0u;
    float _2190;
    float _2192;
    float _2194;
    if (_2152)
    {
        _2190 = _2145;
        _2192 = _2147;
        _2194 = _2149;
    }
    else
    {
        uint _2363 = _2058 + 7u;
        float _2379 = (dot(vec3(cbLight._m0[_2058 + 3u].xyz), vec3(_788, _789, _790)) * 0.5) + 0.5;
        float _2380 = _2379 * _2379;
        float _4369 = isnan(0.0) ? _2380 : (isnan(_2380) ? 0.0 : max(_2380, 0.0));
        float _2381 = isnan(1.0) ? _4369 : (isnan(_4369) ? 1.0 : min(_4369, 1.0));
        float _2382 = isnan(1.0) ? _2074 : (isnan(_2074) ? 1.0 : min(_2074, 1.0));
        _2190 = (((cbLight._m0[_2363].x * 0.3183098733425140380859375) * _2381) * _2382) + _2145;
        _2192 = (((cbLight._m0[_2363].y * 0.3183098733425140380859375) * _2381) * _2382) + _2147;
        _2194 = (((cbLight._m0[_2363].z * 0.3183098733425140380859375) * _2381) * _2382) + _2149;
    }
    uint _2197 = _2058 + 8u;
    float _2210 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2058].w)) * _791) * 0.949999988079071044921875);
    float _2211 = _2210 * _2210;
    float _2212 = cbLight._m0[_2058].x + _868;
    float _2213 = cbLight._m0[_2058].y + _869;
    float _2214 = cbLight._m0[_2058].z + _870;
    float _2218 = inversesqrt(dot(vec3(_2212, _2213, _2214), vec3(_2212, _2213, _2214)));
    float _2219 = _2218 * _2212;
    float _2220 = _2218 * _2213;
    float _2221 = _2218 * _2214;
    float _2222 = dot(vec3(_788, _789, _790), vec3(cbLight._m0[_2058].xyz));
    float _4385 = isnan(0.0) ? _2222 : (isnan(_2222) ? 0.0 : max(_2222, 0.0));
    float _2225 = isnan(1.0) ? _4385 : (isnan(_4385) ? 1.0 : min(_4385, 1.0));
    float _4396 = isnan(0.0) ? _967 : (isnan(_967) ? 0.0 : max(_967, 0.0));
    float _2226 = isnan(1.0) ? _4396 : (isnan(_4396) ? 1.0 : min(_4396, 1.0));
    float _2227 = dot(vec3(_788, _789, _790), vec3(_2219, _2220, _2221));
    float _4407 = isnan(0.0) ? _2227 : (isnan(_2227) ? 0.0 : max(_2227, 0.0));
    float _2230 = isnan(1.0) ? _4407 : (isnan(_4407) ? 1.0 : min(_4407, 1.0));
    float _2231 = dot(vec3(cbLight._m0[_2058].xyz), vec3(_2219, _2220, _2221));
    float _4418 = isnan(0.0) ? _2231 : (isnan(_2231) ? 0.0 : max(_2231, 0.0));
    float _2235 = _2211 * _2211;
    float _2239 = ((_2230 * _2230) * (_2235 + (-1.0))) + 1.0;
    float _2247 = exp2(log2(1.0 - (isnan(1.0) ? _4418 : (isnan(_4418) ? 1.0 : min(_4418, 1.0)))) * 5.0);
    float _2248 = 0.959999978542327880859375 - _948;
    float _2250 = 0.959999978542327880859375 - _949;
    float _2251 = 0.959999978542327880859375 - _950;
    float _2258 = 1.0 - _2211;
    float _2269 = (0.5 / (((_2226 * ((_2225 * _2258) + _2211)) + 9.9999999392252902907785028219223e-09) + (((_2226 * _2258) + _2211) * _2225))) * _2225;
    float _4429 = isnan(0.0) ? _2269 : (isnan(_2269) ? 0.0 : max(_2269, 0.0));
    float _2271 = (isnan(1.0) ? _4429 : (isnan(_4429) ? 1.0 : min(_4429, 1.0))) * (_2235 / ((_2239 * _2239) * 3.141590118408203125));
    uint _2285 = _2058 + 9u;
    float _2296 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2098].w)) * _791) * 0.949999988079071044921875);
    float _2297 = _2296 * _2296;
    float _2298 = cbLight._m0[_2098].x + _868;
    float _2299 = cbLight._m0[_2098].y + _869;
    float _2300 = cbLight._m0[_2098].z + _870;
    float _2304 = inversesqrt(dot(vec3(_2298, _2299, _2300), vec3(_2298, _2299, _2300)));
    float _2305 = _2304 * _2298;
    float _2306 = _2304 * _2299;
    float _2307 = _2304 * _2300;
    float _2308 = dot(vec3(_788, _789, _790), vec3(cbLight._m0[_2098].xyz));
    float _4440 = isnan(0.0) ? _2308 : (isnan(_2308) ? 0.0 : max(_2308, 0.0));
    float _2311 = isnan(1.0) ? _4440 : (isnan(_4440) ? 1.0 : min(_4440, 1.0));
    float _2312 = dot(vec3(_788, _789, _790), vec3(_2305, _2306, _2307));
    float _4451 = isnan(0.0) ? _2312 : (isnan(_2312) ? 0.0 : max(_2312, 0.0));
    float _2315 = isnan(1.0) ? _4451 : (isnan(_4451) ? 1.0 : min(_4451, 1.0));
    float _2316 = dot(vec3(cbLight._m0[_2098].xyz), vec3(_2305, _2306, _2307));
    float _4462 = isnan(0.0) ? _2316 : (isnan(_2316) ? 0.0 : max(_2316, 0.0));
    float _2320 = _2297 * _2297;
    float _2324 = ((_2315 * _2315) * (_2320 + (-1.0))) + 1.0;
    float _2331 = exp2(log2(1.0 - (isnan(1.0) ? _4462 : (isnan(_4462) ? 1.0 : min(_4462, 1.0)))) * 5.0);
    float _2338 = 1.0 - _2297;
    float _2348 = (0.5 / (((_2226 * ((_2311 * _2338) + _2297)) + 9.9999999392252902907785028219223e-09) + (((_2226 * _2338) + _2297) * _2311))) * _2311;
    float _4473 = isnan(0.0) ? _2348 : (isnan(_2348) ? 0.0 : max(_2348, 0.0));
    float _2350 = (isnan(1.0) ? _4473 : (isnan(_4473) ? 1.0 : min(_4473, 1.0))) * (_2320 / ((_2324 * _2324) * 3.141590118408203125));
    float _2360 = (((((_2331 * _2248) + _951) * cbLight._m0[_2285].x) * _2350) * _2081) + ((((cbLight._m0[_2197].x * _2050) * ((_2247 * _2248) + _951)) * _2271) * _2094);
    float _2361 = (((((_2331 * _2250) + _953) * cbLight._m0[_2285].y) * _2350) * _2081) + ((((cbLight._m0[_2197].y * _2051) * ((_2247 * _2250) + _953)) * _2271) * _2094);
    float _2362 = (((((_2331 * _2251) + _954) * cbLight._m0[_2285].z) * _2350) * _2081) + ((((cbLight._m0[_2197].z * _2052) * ((_2247 * _2251) + _954)) * _2271) * _2094);
    float _2424;
    float _2426;
    float _2428;
    if (_2134)
    {
        _2424 = _2360;
        _2426 = _2361;
        _2428 = _2362;
    }
    else
    {
        uint _2430 = _2058 + 2u;
        uint _2434 = _2058 + 10u;
        float _2448 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2430].w)) * _791) * 0.949999988079071044921875);
        float _2449 = _2448 * _2448;
        float _2450 = cbLight._m0[_2430].x + _868;
        float _2451 = cbLight._m0[_2430].y + _869;
        float _2452 = cbLight._m0[_2430].z + _870;
        float _2456 = inversesqrt(dot(vec3(_2450, _2451, _2452), vec3(_2450, _2451, _2452)));
        float _2457 = _2456 * _2450;
        float _2458 = _2456 * _2451;
        float _2459 = _2456 * _2452;
        float _2460 = dot(vec3(_788, _789, _790), vec3(cbLight._m0[_2430].xyz));
        float _4484 = isnan(0.0) ? _2460 : (isnan(_2460) ? 0.0 : max(_2460, 0.0));
        float _2463 = isnan(1.0) ? _4484 : (isnan(_4484) ? 1.0 : min(_4484, 1.0));
        float _2464 = dot(vec3(_788, _789, _790), vec3(_2457, _2458, _2459));
        float _4495 = isnan(0.0) ? _2464 : (isnan(_2464) ? 0.0 : max(_2464, 0.0));
        float _2467 = isnan(1.0) ? _4495 : (isnan(_4495) ? 1.0 : min(_4495, 1.0));
        float _2468 = dot(vec3(cbLight._m0[_2430].xyz), vec3(_2457, _2458, _2459));
        float _4506 = isnan(0.0) ? _2468 : (isnan(_2468) ? 0.0 : max(_2468, 0.0));
        float _2472 = _2449 * _2449;
        float _2476 = ((_2467 * _2467) * (_2472 + (-1.0))) + 1.0;
        float _2483 = exp2(log2(1.0 - (isnan(1.0) ? _4506 : (isnan(_4506) ? 1.0 : min(_4506, 1.0)))) * 5.0);
        float _2490 = 1.0 - _2449;
        float _2500 = (0.5 / (((_2226 * ((_2463 * _2490) + _2449)) + 9.9999999392252902907785028219223e-09) + (((_2226 * _2490) + _2449) * _2463))) * _2463;
        float _4517 = isnan(0.0) ? _2500 : (isnan(_2500) ? 0.0 : max(_2500, 0.0));
        float _2502 = (isnan(1.0) ? _4517 : (isnan(_4517) ? 1.0 : min(_4517, 1.0))) * (_2472 / ((_2476 * _2476) * 3.141590118408203125));
        float _2503 = isnan(1.0) ? _2073 : (isnan(_2073) ? 1.0 : min(_2073, 1.0));
        _2424 = (((((_2483 * _2248) + _951) * cbLight._m0[_2434].x) * _2502) * _2503) + _2360;
        _2426 = (((((_2483 * _2250) + _953) * cbLight._m0[_2434].y) * _2502) * _2503) + _2361;
        _2428 = (((((_2483 * _2251) + _954) * cbLight._m0[_2434].z) * _2502) * _2503) + _2362;
    }
    float _2538;
    float _2540;
    float _2542;
    if (_2152)
    {
        _2538 = _2424;
        _2540 = _2426;
        _2542 = _2428;
    }
    else
    {
        uint _2549 = _2058 + 3u;
        uint _2553 = _2058 + 11u;
        float _2567 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2549].w)) * _791) * 0.949999988079071044921875);
        float _2568 = _2567 * _2567;
        float _2569 = cbLight._m0[_2549].x + _868;
        float _2570 = cbLight._m0[_2549].y + _869;
        float _2571 = cbLight._m0[_2549].z + _870;
        float _2575 = inversesqrt(dot(vec3(_2569, _2570, _2571), vec3(_2569, _2570, _2571)));
        float _2576 = _2575 * _2569;
        float _2577 = _2575 * _2570;
        float _2578 = _2575 * _2571;
        float _2579 = dot(vec3(_788, _789, _790), vec3(cbLight._m0[_2549].xyz));
        float _4533 = isnan(0.0) ? _2579 : (isnan(_2579) ? 0.0 : max(_2579, 0.0));
        float _2582 = isnan(1.0) ? _4533 : (isnan(_4533) ? 1.0 : min(_4533, 1.0));
        float _2583 = dot(vec3(_788, _789, _790), vec3(_2576, _2577, _2578));
        float _4544 = isnan(0.0) ? _2583 : (isnan(_2583) ? 0.0 : max(_2583, 0.0));
        float _2586 = isnan(1.0) ? _4544 : (isnan(_4544) ? 1.0 : min(_4544, 1.0));
        float _2587 = dot(vec3(cbLight._m0[_2549].xyz), vec3(_2576, _2577, _2578));
        float _4555 = isnan(0.0) ? _2587 : (isnan(_2587) ? 0.0 : max(_2587, 0.0));
        float _2591 = _2568 * _2568;
        float _2595 = ((_2586 * _2586) * (_2591 + (-1.0))) + 1.0;
        float _2602 = exp2(log2(1.0 - (isnan(1.0) ? _4555 : (isnan(_4555) ? 1.0 : min(_4555, 1.0)))) * 5.0);
        float _2609 = 1.0 - _2568;
        float _2619 = (0.5 / (((_2226 * ((_2582 * _2609) + _2568)) + 9.9999999392252902907785028219223e-09) + (((_2226 * _2609) + _2568) * _2582))) * _2582;
        float _4566 = isnan(0.0) ? _2619 : (isnan(_2619) ? 0.0 : max(_2619, 0.0));
        float _2621 = (isnan(1.0) ? _4566 : (isnan(_4566) ? 1.0 : min(_4566, 1.0))) * (_2591 / ((_2595 * _2595) * 3.141590118408203125));
        float _2622 = isnan(1.0) ? _2074 : (isnan(_2074) ? 1.0 : min(_2074, 1.0));
        _2538 = (((((_2602 * _2248) + _951) * cbLight._m0[_2553].x) * _2621) * _2622) + _2424;
        _2540 = (((((_2602 * _2250) + _953) * cbLight._m0[_2553].y) * _2621) * _2622) + _2426;
        _2542 = (((((_2602 * _2251) + _954) * cbLight._m0[_2553].z) * _2621) * _2622) + _2428;
    }
    float _2757;
    float _2759;
    float _2761;
    float _2763;
    float _2765;
    float _2767;
    if (_2056.y == 0u)
    {
        float _2697 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2698 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2697;
        float _2699 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2697;
        float _2700 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2697;
        uvec4 _2712 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2713 = _2712.x;
        uint _2724 = uint((float(_2712.y) * floor(float(uint(cbSceneParam._m0[85u].y * _889) / _2713))) + floor(float(uint(cbSceneParam._m0[85u].x * _888) / _2713)));
        float _2734 = (log2(_2700 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2735 = isnan(0.0) ? _2734 : (isnan(_2734) ? 0.0 : max(_2734, 0.0));
        uint _2738 = uint(isnan(14.0) ? _2735 : (isnan(_2735) ? 14.0 : min(_2735, 14.0)));
        uvec4 _2743 = texelFetch(g_lightClusterGridBuffer, int(((_2738 << 2u) + (_2724 << 6u)) >> 2u));
        uint _2744 = _2743.x;
        uint _2745 = _2712.z;
        float _2845;
        float _2847;
        float _2849;
        float _2851;
        float _2853;
        float _2855;
        if (((((1u << ((_2745 >> 4u) & 15u)) + 4294967295u) & _2744) == 0u) || ((_2745 & 240u) == 0u))
        {
            _2845 = 0.0;
            _2847 = 0.0;
            _2849 = 0.0;
            _2851 = 0.0;
            _2853 = 0.0;
            _2855 = 0.0;
        }
        else
        {
            float _2846;
            float _2848;
            float _2850;
            float _2852;
            float _2854;
            float _2856;
            float _2997 = 0.0;
            float _2998 = 0.0;
            float _2999 = 0.0;
            float _3000 = 0.0;
            float _3001 = 0.0;
            float _3002 = 0.0;
            uint _3003 = 0u;
            uint _3012;
            bool _3013;
            for (;;)
            {
                _3012 = texelFetch(g_lightClassification, int((((_2738 << 5u) + (_2724 << 9u)) + (_3003 << 2u)) >> 2u)).x;
                _3013 = _3012 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3013)
                {
                    frontier_phi_66_pred = _2997;
                    frontier_phi_66_pred_1 = _3002;
                    frontier_phi_66_pred_2 = _3001;
                    frontier_phi_66_pred_3 = _3000;
                    frontier_phi_66_pred_4 = _2999;
                    frontier_phi_66_pred_5 = _2998;
                }
                else
                {
                    float _3142;
                    float _3143;
                    float _3144;
                    float _3145;
                    float _3146;
                    float _3147;
                    uint _3148;
                    _3142 = _2997;
                    _3143 = _2998;
                    _3144 = _2999;
                    _3145 = _3000;
                    _3146 = _3001;
                    _3147 = _3002;
                    _3148 = _3012;
                    float _3069;
                    float _3070;
                    float _3071;
                    float _3072;
                    float _3073;
                    float _3074;
                    for (;;)
                    {
                        uint _3152 = uint(findLSB(_3148)) + (_3003 << 5u);
                        uint _3149 = (_3148 + 4294967295u) & _3148;
                        uint _3154 = _3152 * 48u;
                        vec4 _3168 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3154)).x, texelFetch(g_PointLightRenderingBuffer, int(_3154 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3154 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3154 + 3u)).x));
                        uint _3174 = (_3152 * 48u) + 4u;
                        vec4 _3187 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3174)).x, texelFetch(g_PointLightRenderingBuffer, int(_3174 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3174 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3174 + 3u)).x));
                        uint _3193 = (_3152 * 48u) + 8u;
                        vec3 _3204 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3193)).x, texelFetch(g_PointLightRenderingBuffer, int(_3193 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3193 + 2u)).x));
                        float _3208 = _3168.x - _2698;
                        float _3209 = _3168.y - _2699;
                        float _3210 = _3168.z - _2700;
                        float _3211 = dot(vec3(_3208, _3209, _3210), vec3(_3208, _3209, _3210));
                        float _3214 = inversesqrt(_3211);
                        float _3215 = _3214 * _3208;
                        float _3216 = _3214 * _3209;
                        float _3217 = _3214 * _3210;
                        float _3218 = dot(vec3(_907, _910, _913), vec3(_3215, _3216, _3217));
                        float _3223 = 1.0 - (_3211 * _3168.w);
                        float _4592 = isnan(0.0) ? _3223 : (isnan(_3223) ? 0.0 : max(_3223, 0.0));
                        float _3224 = isnan(1.0) ? _4592 : (isnan(_4592) ? 1.0 : min(_4592, 1.0));
                        float _3225 = sqrt(_3211) * _3187.w;
                        float _3228 = 1.39999997615814208984375 / (_3225 + 1.39999997615814208984375);
                        float _3229 = _3228 * _3228;
                        float _3232 = ((1.0 - _3229) * _3218) + _3229;
                        float _3235 = _3225 * _3225;
                        float _3239 = ((isnan(0.0) ? _3232 : (isnan(_3232) ? 0.0 : max(_3232, 0.0))) * _3224) / ((_3235 * 0.699999988079071044921875) + 1.0);
                        float _3243 = (-0.0) - _2698;
                        float _3244 = (-0.0) - _2699;
                        float _3245 = (-0.0) - _2700;
                        float _3249 = inversesqrt(dot(vec3(_3243, _3244, _3245), vec3(_3243, _3244, _3245)));
                        float _3250 = _3249 * _3243;
                        float _3251 = _3249 * _3244;
                        float _3252 = _3249 * _3245;
                        float _3260 = exp2(log2(1.0 / ((_3235 * 3.5) + 5.0)) * 0.25);
                        float _3261 = 1.0 - _982;
                        float _3268 = sqrt(1.0 - ((1.0 - (_3261 * _3261)) * (1.0 - (_3260 * _3260))));
                        float _3269 = _3268 * _3268;
                        float _3270 = _3269 * _3269;
                        float _3271 = _3250 + _3215;
                        float _3272 = _3251 + _3216;
                        float _3273 = _3252 + _3217;
                        float _3277 = inversesqrt(dot(vec3(_3271, _3272, _3273), vec3(_3271, _3272, _3273)));
                        float _3281 = dot(vec3(_907, _910, _913), vec3(_3250, _3251, _3252));
                        float _4608 = isnan(0.0) ? _3281 : (isnan(_3281) ? 0.0 : max(_3281, 0.0));
                        float _3284 = isnan(1.0) ? _4608 : (isnan(_4608) ? 1.0 : min(_4608, 1.0));
                        float _3285 = dot(vec3(_907, _910, _913), vec3(_3277 * _3271, _3277 * _3272, _3277 * _3273));
                        float _4619 = isnan(0.0) ? _3285 : (isnan(_3285) ? 0.0 : max(_3285, 0.0));
                        float _3288 = isnan(1.0) ? _4619 : (isnan(_4619) ? 1.0 : min(_4619, 1.0));
                        float _3292 = ((_3288 * _3288) * (_3270 + (-1.0))) + 1.0;
                        float _3293 = _3228 * _3269;
                        float _3294 = _3293 * _3293;
                        float _3297 = ((1.0 - _3294) * _3218) + _3294;
                        float _4630 = isnan(0.0) ? _3297 : (isnan(_3297) ? 0.0 : max(_3297, 0.0));
                        float _3298 = isnan(1.0) ? _4630 : (isnan(_4630) ? 1.0 : min(_4630, 1.0));
                        float _3299 = 1.0 - _3269;
                        float _3309 = (0.5 / (((_3298 * ((_3284 * _3299) + _3269)) + 9.9999999392252902907785028219223e-09) + (((_3298 * _3299) + _3269) * _3284))) * _3298;
                        float _4641 = isnan(0.0) ? _3309 : (isnan(_3309) ? 0.0 : max(_3309, 0.0));
                        float _3320 = (((_3270 * 3.1415927410125732421875) * (isnan(1.0) ? _4641 : (isnan(_4641) ? 1.0 : min(_4641, 1.0)))) / ((_3292 * _3292) * ((_3235 * 2.1991131305694580078125) + 3.141590118408203125))) * _3224;
                        _3072 = (_3239 * _3187.x) + _3145;
                        _3073 = (_3239 * _3187.y) + _3146;
                        _3074 = (_3239 * _3187.z) + _3147;
                        _3069 = (_3320 * _3204.x) + _3142;
                        _3070 = (_3320 * _3204.y) + _3143;
                        _3071 = (_3320 * _3204.z) + _3144;
                        if (_3149 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3142 = _3069;
                            _3143 = _3070;
                            _3144 = _3071;
                            _3145 = _3072;
                            _3146 = _3073;
                            _3147 = _3074;
                            _3148 = _3149;
                        }
                    }
                    frontier_phi_66_pred = _3069;
                    frontier_phi_66_pred_1 = _3074;
                    frontier_phi_66_pred_2 = _3073;
                    frontier_phi_66_pred_3 = _3072;
                    frontier_phi_66_pred_4 = _3071;
                    frontier_phi_66_pred_5 = _3070;
                }
                _2846 = frontier_phi_66_pred;
                _2856 = frontier_phi_66_pred_1;
                _2854 = frontier_phi_66_pred_2;
                _2852 = frontier_phi_66_pred_3;
                _2850 = frontier_phi_66_pred_4;
                _2848 = frontier_phi_66_pred_5;
                uint _3004 = _3003 + 1u;
                if (_3004 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2997 = _2846;
                    _2998 = _2848;
                    _2999 = _2850;
                    _3000 = _2852;
                    _3001 = _2854;
                    _3002 = _2856;
                    _3003 = _3004;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2845 = _2846;
            _2847 = _2848;
            _2849 = _2850;
            _2851 = _2852;
            _2853 = _2854;
            _2855 = _2856;
        }
        uvec4 _2859 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2860 = _2859.z;
        uint _2862 = (_2860 >> 8u) & 15u;
        float _2965;
        float _2967;
        float _2969;
        float _2971;
        float _2973;
        float _2975;
        if (((4294967295u << _2862) & _2744) == 0u)
        {
            _2965 = _2845;
            _2967 = _2847;
            _2969 = _2849;
            _2971 = _2851;
            _2973 = _2853;
            _2975 = _2855;
        }
        else
        {
            float _2990 = inversesqrt(dot(vec3(_2698, _2699, _2700), vec3(_2698, _2699, _2700)));
            float _2991 = _2990 * _2698;
            float _2992 = _2990 * _2699;
            float _2993 = _2990 * _2700;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2862 < ((_2860 >> 12u) & 15u))
            {
                float _2966;
                float _2968;
                float _2970;
                float _2972;
                float _2974;
                float _2976;
                float _3125 = _2845;
                float _3126 = _2847;
                float _3127 = _2849;
                float _3128 = _2851;
                float _3129 = _2853;
                float _3130 = _2855;
                uint _3131 = _2862;
                uint _3140;
                bool _3141;
                for (;;)
                {
                    _3140 = texelFetch(g_lightClassification, int((((_2738 << 5u) + (_2724 << 9u)) + (_3131 << 2u)) >> 2u)).x;
                    _3141 = _3140 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3141)
                    {
                        frontier_phi_77_pred = _3130;
                        frontier_phi_77_pred_1 = _3129;
                        frontier_phi_77_pred_2 = _3128;
                        frontier_phi_77_pred_3 = _3127;
                        frontier_phi_77_pred_4 = _3126;
                        frontier_phi_77_pred_5 = _3125;
                    }
                    else
                    {
                        float _3334;
                        float _3335;
                        float _3336;
                        float _3337;
                        float _3338;
                        float _3339;
                        float _3628;
                        float _3629;
                        float _3630;
                        float _3631;
                        float _3632;
                        float _3633;
                        float _3347 = _3125;
                        float _3348 = _3126;
                        float _3349 = _3127;
                        float _3350 = _3128;
                        float _3351 = _3129;
                        float _3352 = _3130;
                        uint _3353 = _3140;
                        uint _3354;
                        vec4 _3379;
                        float _3380;
                        vec4 _3395;
                        vec3 _3407;
                        vec4 _3422;
                        vec4 _3437;
                        float _3484;
                        bool _3485;
                        for (;;)
                        {
                            uint _3364 = ((_3131 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3353));
                            _3354 = (_3353 + 4294967295u) & _3353;
                            uint _3366 = _3364 * 40u;
                            _3379 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3366)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3366 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3366 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3366 + 3u)).x));
                            _3380 = _3379.w;
                            uint _3382 = (_3364 * 40u) + 4u;
                            _3395 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3382)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3382 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3382 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3382 + 3u)).x));
                            uint _3397 = (_3364 * 40u) + 8u;
                            _3407 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3397)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3397 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3397 + 2u)).x));
                            uint _3409 = (_3364 * 40u) + 16u;
                            _3422 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3409)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3409 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3409 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3409 + 3u)).x));
                            uint _3424 = (_3364 * 40u) + 20u;
                            _3437 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3424)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3424 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3424 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3424 + 3u)).x));
                            uint _3440 = (_3364 * 40u) + 24u;
                            vec4 _3453 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3440)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3440 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3440 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3440 + 3u)).x));
                            uint _3459 = (_3364 * 40u) + 28u;
                            vec4 _3472 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3459)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3459 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3459 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3459 + 3u)).x));
                            _3484 = fma(_2700, _3472.z, fma(_2699, _3472.y, _3472.x * _2698)) + _3472.w;
                            _3485 = !((fma(_2700, _3453.z, fma(_2699, _3453.y, _3453.x * _2698)) + _3453.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3485)
                            {
                                float _3512 = _3379.x - _2698;
                                float _3513 = _3379.y - _2699;
                                float _3514 = _3379.z - _2700;
                                float _3515 = dot(vec3(_3512, _3513, _3514), vec3(_3512, _3513, _3514));
                                float _3518 = inversesqrt(_3515);
                                float _3519 = _3518 * _3512;
                                float _3520 = _3518 * _3513;
                                float _3521 = _3518 * _3514;
                                float _3525 = 1.0 - (_3515 / (_3380 * _3380));
                                float _4652 = isnan(0.0) ? _3525 : (isnan(_3525) ? 0.0 : max(_3525, 0.0));
                                float _3526 = isnan(1.0) ? _4652 : (isnan(_4652) ? 1.0 : min(_4652, 1.0));
                                float _3530 = sqrt(_3515) * _3395.w;
                                float _3532 = 1.39999997615814208984375 / (_3530 + 1.39999997615814208984375);
                                float _3533 = _3532 * _3532;
                                float _3536 = ((1.0 - _3533) * dot(vec3(_3519, _3520, _3521), vec3(_907, _910, _913))) + _3533;
                                float _3539 = _3530 * _3530;
                                float _3543 = (fma(_2700, _3422.z, fma(_2699, _3422.y, _3422.x * _2698)) + _3422.w) / _3484;
                                float _3544 = (fma(_2700, _3437.z, fma(_2699, _3437.y, _3437.x * _2698)) + _3437.w) / _3484;
                                float _3548 = 1.0 - dot(vec2(_3543, _3544), vec2(_3543, _3544));
                                float _4668 = isnan(0.0) ? _3548 : (isnan(_3548) ? 0.0 : max(_3548, 0.0));
                                float _3549 = isnan(1.0) ? _4668 : (isnan(_4668) ? 1.0 : min(_4668, 1.0));
                                float _3550 = _3549 * (((isnan(0.0) ? _3536 : (isnan(_3536) ? 0.0 : max(_3536, 0.0))) * _3526) / ((_3539 * 0.699999988079071044921875) + 1.0));
                                float _3562 = exp2(log2(1.0 / ((_3539 * 3.5) + 5.0)) * 0.25);
                                float _3563 = 1.0 - _982;
                                float _3570 = sqrt(1.0 - ((1.0 - (_3563 * _3563)) * (1.0 - (_3562 * _3562))));
                                float _3571 = _3570 * _3570;
                                float _3572 = _3571 * _3571;
                                float _3573 = _3519 - _2991;
                                float _3574 = _3520 - _2992;
                                float _3575 = _3521 - _2993;
                                float _3579 = inversesqrt(dot(vec3(_3573, _3574, _3575), vec3(_3573, _3574, _3575)));
                                float _3583 = dot(vec3(_907, _910, _913), vec3((-0.0) - _2991, (-0.0) - _2992, (-0.0) - _2993));
                                float _4679 = isnan(0.0) ? _3583 : (isnan(_3583) ? 0.0 : max(_3583, 0.0));
                                float _3586 = isnan(1.0) ? _4679 : (isnan(_4679) ? 1.0 : min(_4679, 1.0));
                                float _3587 = dot(vec3(_907, _910, _913), vec3(_3579 * _3573, _3579 * _3574, _3579 * _3575));
                                float _4690 = isnan(0.0) ? _3587 : (isnan(_3587) ? 0.0 : max(_3587, 0.0));
                                float _3590 = isnan(1.0) ? _4690 : (isnan(_4690) ? 1.0 : min(_4690, 1.0));
                                float _3594 = ((_3590 * _3590) * (_3572 + (-1.0))) + 1.0;
                                float _3595 = _3532 * _3571;
                                float _3596 = _3595 * _3595;
                                float _3602 = ((1.0 - _3596) * dot(vec3(_907, _910, _913), vec3(_3519, _3520, _3521))) + _3596;
                                float _4701 = isnan(0.0) ? _3602 : (isnan(_3602) ? 0.0 : max(_3602, 0.0));
                                float _3603 = isnan(1.0) ? _4701 : (isnan(_4701) ? 1.0 : min(_4701, 1.0));
                                float _3604 = 1.0 - _3571;
                                float _3614 = (0.5 / (((_3603 * ((_3586 * _3604) + _3571)) + 9.9999999392252902907785028219223e-09) + (((_3603 * _3604) + _3571) * _3586))) * _3603;
                                float _4712 = isnan(0.0) ? _3614 : (isnan(_3614) ? 0.0 : max(_3614, 0.0));
                                float _3624 = (_3549 * _3526) * (((_3572 * 3.1415927410125732421875) * (isnan(1.0) ? _4712 : (isnan(_4712) ? 1.0 : min(_4712, 1.0)))) / ((_3594 * _3594) * ((_3539 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3550 * _3395.y;
                                frontier_phi_83_pred_1 = _3550 * _3395.x;
                                frontier_phi_83_pred_2 = _3624 * _3407.z;
                                frontier_phi_83_pred_3 = _3624 * _3407.y;
                                frontier_phi_83_pred_4 = _3624 * _3407.x;
                                frontier_phi_83_pred_5 = _3550 * _3395.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3632 = frontier_phi_83_pred;
                            _3631 = frontier_phi_83_pred_1;
                            _3630 = frontier_phi_83_pred_2;
                            _3629 = frontier_phi_83_pred_3;
                            _3628 = frontier_phi_83_pred_4;
                            _3633 = frontier_phi_83_pred_5;
                            _3337 = _3631 + _3350;
                            _3338 = _3632 + _3351;
                            _3339 = _3633 + _3352;
                            _3334 = _3628 + _3347;
                            _3335 = _3629 + _3348;
                            _3336 = _3630 + _3349;
                            if (_3354 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3347 = _3334;
                                _3348 = _3335;
                                _3349 = _3336;
                                _3350 = _3337;
                                _3351 = _3338;
                                _3352 = _3339;
                                _3353 = _3354;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3339;
                        frontier_phi_77_pred_1 = _3338;
                        frontier_phi_77_pred_2 = _3337;
                        frontier_phi_77_pred_3 = _3336;
                        frontier_phi_77_pred_4 = _3335;
                        frontier_phi_77_pred_5 = _3334;
                    }
                    _2976 = frontier_phi_77_pred;
                    _2974 = frontier_phi_77_pred_1;
                    _2972 = frontier_phi_77_pred_2;
                    _2970 = frontier_phi_77_pred_3;
                    _2968 = frontier_phi_77_pred_4;
                    _2966 = frontier_phi_77_pred_5;
                    uint _3132 = _3131 + 1u;
                    if (_3132 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3125 = _2966;
                        _3126 = _2968;
                        _3127 = _2970;
                        _3128 = _2972;
                        _3129 = _2974;
                        _3130 = _2976;
                        _3131 = _3132;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2970;
                frontier_phi_58_59_ladder_1 = _2976;
                frontier_phi_58_59_ladder_2 = _2974;
                frontier_phi_58_59_ladder_3 = _2972;
                frontier_phi_58_59_ladder_4 = _2968;
                frontier_phi_58_59_ladder_5 = _2966;
            }
            else
            {
                frontier_phi_58_59_ladder = _2849;
                frontier_phi_58_59_ladder_1 = _2855;
                frontier_phi_58_59_ladder_2 = _2853;
                frontier_phi_58_59_ladder_3 = _2851;
                frontier_phi_58_59_ladder_4 = _2847;
                frontier_phi_58_59_ladder_5 = _2845;
            }
            _2965 = frontier_phi_58_59_ladder_5;
            _2967 = frontier_phi_58_59_ladder_4;
            _2969 = frontier_phi_58_59_ladder;
            _2971 = frontier_phi_58_59_ladder_3;
            _2973 = frontier_phi_58_59_ladder_2;
            _2975 = frontier_phi_58_59_ladder_1;
        }
        float _2980 = isnan(1.0) ? _966 : (isnan(_966) ? 1.0 : min(_966, 1.0));
        _2757 = (_2980 * _2971) + _2190;
        _2759 = (_2980 * _2973) + _2192;
        _2761 = (_2980 * _2975) + _2194;
        _2763 = ((_2965 * _951) * _2980) + _2538;
        _2765 = ((_2967 * _953) * _2980) + _2540;
        _2767 = ((_2969 * _954) * _2980) + _2542;
    }
    else
    {
        _2757 = _2190;
        _2759 = _2192;
        _2761 = _2194;
        _2763 = _2538;
        _2765 = _2540;
        _2767 = _2542;
    }
    float _4728 = isnan(0.0) ? _941 : (isnan(_941) ? 0.0 : max(_941, 0.0));
    float _4739 = isnan(0.0) ? _942 : (isnan(_942) ? 0.0 : max(_942, 0.0));
    float _4750 = isnan(0.0) ? _943 : (isnan(_943) ? 0.0 : max(_943, 0.0));
    float _2784 = ((isnan(1.0) ? _4728 : (isnan(_4728) ? 1.0 : min(_4728, 1.0))) * (_2757 + ((isnan(0.0) ? _1728 : (isnan(_1728) ? 0.0 : max(_1728, 0.0))) * _966))) + ((_2763 + ((isnan(0.0) ? _2022 : (isnan(_2022) ? 0.0 : max(_2022, 0.0))) * _1807)) * cbPerFrame._m0[3u].x);
    float _2785 = ((isnan(1.0) ? _4739 : (isnan(_4739) ? 1.0 : min(_4739, 1.0))) * (_2759 + ((isnan(0.0) ? _1731 : (isnan(_1731) ? 0.0 : max(_1731, 0.0))) * _966))) + ((_2765 + ((isnan(0.0) ? _2025 : (isnan(_2025) ? 0.0 : max(_2025, 0.0))) * _1807)) * cbPerFrame._m0[3u].x);
    float _2786 = ((isnan(1.0) ? _4750 : (isnan(_4750) ? 1.0 : min(_4750, 1.0))) * (_2761 + ((isnan(0.0) ? _1734 : (isnan(_1734) ? 0.0 : max(_1734, 0.0))) * _966))) + ((_2767 + ((isnan(0.0) ? _2028 : (isnan(_2028) ? 0.0 : max(_2028, 0.0))) * _1807)) * cbPerFrame._m0[3u].x);
    uint _2787 = _926 + 6u;
    float _2795 = _888 / cbSceneParam._m0[86u].x;
    float _2796 = _889 / cbSceneParam._m0[86u].y;
    vec4 _2810 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2795, _2796, (log2((isnan(cbSceneParam._m0[77u].w) ? _811 : (isnan(_811) ? cbSceneParam._m0[77u].w : min(_811, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2812 = _2810.x;
    float _2813 = _2810.y;
    float _2814 = _2810.z;
    float _2815 = _2810.w;
    float _2907;
    float _2909;
    float _2911;
    float _2913;
    if (_811 > cbSceneParam._m0[78u].w)
    {
        float _2870 = isnan(_811) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _811 : min(cbSceneParam._m0[80u].w, _811));
        float _2871 = _2870 / _811;
        float _2882 = _2871 * _861;
        float _2883 = _862 * _2871;
        float _2884 = (-0.0) - _2883;
        float _2885 = _2871 * _863;
        float _2887 = (cbSceneParam._m0[77u].w * _2884) / _2870;
        float _2888 = _2887 + cbSceneParam._m0[79u].w;
        float _2889 = cbSceneParam._m0[79u].w - _2883;
        float _2895 = sqrt(((_2882 * _2882) + (_2883 * _2883)) + (_2885 * _2885));
        float _2898 = (1.0 - (cbSceneParam._m0[77u].w / _2870)) * _2895;
        float _2903 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2905 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3082;
        if (abs((_2884 - _2887) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3082 = ((((_2888 > 0.0) ? exp2(_2903 * _2888) : (2.0 - exp2(_2905 * _2888))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2898;
        }
        else
        {
            float _3026 = 1.0 / cbSceneParam._m0[80u].x;
            float _3027 = isnan(_2889) ? _2888 : (isnan(_2888) ? _2889 : max(_2888, _2889));
            float _3028 = isnan(_2889) ? _2888 : (isnan(_2888) ? _2889 : min(_2888, _2889));
            float _3037 = isnan(0.0) ? _3027 : (isnan(_3027) ? 0.0 : min(_3027, 0.0));
            float _3038 = isnan(0.0) ? _3028 : (isnan(_3028) ? 0.0 : min(_3028, 0.0));
            _3082 = ((abs(_2895 / _2884) * cbSceneParam._m0[80u].y) * ((((_3037 - _3038) * 2.0) - ((exp2(_2903 * (isnan(0.0) ? _3027 : (isnan(_3027) ? 0.0 : max(_3027, 0.0)))) - exp2(_2903 * (isnan(0.0) ? _3028 : (isnan(_3028) ? 0.0 : max(_3028, 0.0))))) * _3026)) - ((exp2(_2905 * _3037) - exp2(_2905 * _3038)) * _3026))) + (_2898 * cbSceneParam._m0[80u].z);
        }
        vec4 _3084 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2795, _2796, 1.0), 0.0);
        float _3093 = exp2((_3082 * (-1.44269502162933349609375)) * (1.0 - _3084.w));
        float _3094 = log2(_3093);
        float _3110 = log2(_2815);
        _2907 = (exp2(_3110 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3094 * cbSceneParam._m0[78u].x)) * _3084.x) / cbSceneParam._m0[78u].x)) + _2812;
        _2909 = (exp2(_3110 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3094 * cbSceneParam._m0[78u].y)) * _3084.y) / cbSceneParam._m0[78u].y)) + _2813;
        _2911 = (exp2(_3110 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3094 * cbSceneParam._m0[78u].z)) * _3084.z) / cbSceneParam._m0[78u].z)) + _2814;
        _2913 = _3093 * _2815;
    }
    else
    {
        _2907 = _2812;
        _2909 = _2813;
        _2911 = _2814;
        _2913 = _2815;
    }
    bool _3120;
    vec4 _2923;
    vec4 _2945;
    float _2947;
    float _2951;
    float _2952;
    float _2953;
    float _2954;
    bool _2964;
    for (;;)
    {
        _2923 = cbMatDynParam._m0[0u];
        float _2925 = roundEven(_2923.y);
        bool _2926 = _2925 == 3.0;
        float _2927 = log2(_2913);
        float _2934 = exp2(_2927 * cbSceneParam._m0[78u].x) * _2784;
        float _2935 = exp2(_2927 * cbSceneParam._m0[78u].y) * _2785;
        float _2936 = exp2(_2927 * cbSceneParam._m0[78u].z) * _2786;
        float _2943 = _877 + (-0.5);
        _2945 = cbMtdParam._m0[1u];
        _2947 = _2945.y * _2943;
        float _2950 = (_2925 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2951 = _2950 * (_2926 ? _2934 : (_2934 + (cbSceneParam._m0[72u].w * _2907)));
        _2952 = _2950 * (_2926 ? _2935 : (_2935 + (cbSceneParam._m0[72u].w * _2909)));
        _2953 = _2950 * (_2926 ? _2936 : (_2936 + (cbSceneParam._m0[72u].w * _2911)));
        _2954 = _2943 * 0.999000012874603271484375;
        _2964 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2964)
        {
            if ((cbInstanceData._m0[_926 + 7u].x + _2954) < 0.5)
            {
                _3120 = true;
                break;
            }
        }
        uint _3061 = _927 + uint(_2923.w);
        if ((cbInstanceData._m0[_3061].w < 1.0) && ((cbInstanceData._m0[_3061].w + _2954) < 0.5))
        {
            _3120 = true;
            break;
        }
        if ((_2947 + 1.0) < _2945.x)
        {
            _3120 = true;
            break;
        }
        _3120 = false;
        break;
    }
    float _3325;
    if (_3120)
    {
        discard_state = true;
        _3325 = 0.0;
    }
    else
    {
        _3325 = cbInstanceData._m0[_2787].w;
    }
    SV_Target.x = _2951;
    SV_Target.y = _2952;
    SV_Target.z = _2953;
    SV_Target.w = _3325;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2787].w;
    discard_exit();
}


