#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[20];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_19;
layout(set = 0, binding = 11) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_2;
layout(set = 0, binding = 12) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_20;
layout(set = 0, binding = 13) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_3;
layout(set = 0, binding = 14) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_5;
layout(set = 0, binding = 15) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_6;
layout(set = 0, binding = 17) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_8;
layout(set = 0, binding = 18) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_11;
layout(set = 0, binding = 3) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_14;
layout(set = 0, binding = 6) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_15;
layout(set = 0, binding = 7) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_16;
layout(set = 0, binding = 8) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_17;
layout(set = 0, binding = 9) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_18;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1333;
float _3716;
float _3717;
float _3718;
float _3719;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _215 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _216 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _217 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _223 = inversesqrt(dot(vec3(_215, _216, _217), vec3(_215, _216, _217)));
    float _230 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _237 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _260 = sin(cbMtdParam._m0[18u].x);
    float _261 = cos(cbMtdParam._m0[18u].x);
    float _262 = TEXCOORD.x - cbMtdParam._m0[17u].w;
    float _263 = TEXCOORD.y - cbMtdParam._m0[17u].w;
    float _271 = (cbMtdParam._m0[17u].w + cbMtdParam._m0[19u].y) + fma(_263, (-0.0) - _260, _261 * _262);
    float _273 = (cbMtdParam._m0[17u].w + cbMtdParam._m0[19u].z) + fma(_263, _261, _262 * _260);
    vec4 _286 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * _271) + cbTextureTilingScale._m0[1u].z, (_273 * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w));
    float _292 = _286.x * cbMtdParam._m0[10u].x;
    float _293 = _286.y * cbMtdParam._m0[10u].y;
    float _294 = _286.z * cbMtdParam._m0[10u].z;
    vec4 _312 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w));
    vec4 _331 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_0, SS_WrapLinear), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _356 = cbMtdParam._m0[19u].x * texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.x) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD.y) + cbTextureTilingScale._m0[13u].w)).x;
    float _367 = ((cbMtdParam._m0[15u].x * (-1.39999997615814208984375)) * (((1.0 - _331.x) * 2.0) - _356)) + 1.0;
    float _3728 = isnan(0.0) ? _367 : (isnan(_367) ? 0.0 : max(_367, 0.0));
    float _368 = isnan(1.0) ? _3728 : (isnan(_3728) ? 1.0 : min(_3728, 1.0));
    float _375 = (_368 * ((_312.x * cbMtdParam._m0[11u].x) - _292)) + _292;
    float _376 = (_368 * ((_312.y * cbMtdParam._m0[11u].y) - _293)) + _293;
    float _377 = (_368 * ((_312.z * cbMtdParam._m0[11u].z) - _294)) + _294;
    vec4 _395 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_8, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[17u].x * TEXCOORD.x) + cbTextureTilingScale._m0[17u].z, (cbTextureTilingScale._m0[17u].y * TEXCOORD.y) + cbTextureTilingScale._m0[17u].w));
    float _408 = (((((1.0 - _331.y) * 2.0) - _356) * (-1.39999997615814208984375)) * cbMtdParam._m0[18u].z) + 1.0;
    float _3739 = isnan(0.0) ? _408 : (isnan(_408) ? 0.0 : max(_408, 0.0));
    float _409 = isnan(1.0) ? _3739 : (isnan(_3739) ? 1.0 : min(_3739, 1.0));
    float _416 = (((_395.x * cbMtdParam._m0[12u].x) - _375) * _409) + _375;
    float _417 = (_409 * ((_395.y * cbMtdParam._m0[12u].y) - _376)) + _376;
    float _418 = (_409 * ((_395.z * cbMtdParam._m0[12u].z) - _377)) + _377;
    vec4 _435 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _448 = (((((1.0 - _331.z) * 2.0) - _356) * (-1.39999997615814208984375)) * cbMtdParam._m0[18u].w) + 1.0;
    float _3750 = isnan(0.0) ? _448 : (isnan(_448) ? 0.0 : max(_448, 0.0));
    float _449 = isnan(1.0) ? _3750 : (isnan(_3750) ? 1.0 : min(_3750, 1.0));
    float _456 = (((_435.x * cbMtdParam._m0[13u].x) - _416) * _449) + _416;
    float _457 = (_449 * ((_435.y * cbMtdParam._m0[13u].y) - _417)) + _417;
    float _458 = (_449 * ((_435.z * cbMtdParam._m0[13u].z) - _418)) + _418;
    vec4 _478 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_20, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.z) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.w) + cbTextureTilingScale._m0[12u].w));
    float _507 = (TEXCOORD_5.x - ((cbMtdParam._m0[15u].w * (1.0 - TEXCOORD_5.x)) * (texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[18u].x * TEXCOORD.z) + cbTextureTilingScale._m0[18u].z, (cbTextureTilingScale._m0[18u].y * TEXCOORD.w) + cbTextureTilingScale._m0[18u].w)).x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[15u].z + 1.0);
    float _3761 = isnan(0.0) ? _507 : (isnan(_507) ? 0.0 : max(_507, 0.0));
    float _508 = isnan(1.0) ? _3761 : (isnan(_3761) ? 1.0 : min(_3761, 1.0));
    float _515 = (_508 * ((_478.x * cbMtdParam._m0[14u].x) - _456)) + _456;
    float _516 = (_508 * ((_478.y * cbMtdParam._m0[14u].y) - _457)) + _457;
    float _517 = (_508 * ((_478.z * cbMtdParam._m0[14u].z) - _458)) + _458;
    vec4 _530 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * _271) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _273) + cbTextureTilingScale._m0[5u].w));
    float _532 = _530.x;
    float _550 = ((texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w)).x - _532) * _368) + _532;
    float _568 = ((texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w)).x - _550) * _409) + _550;
    float _585 = ((texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w)).x - _568) * _449) + _568;
    float _589 = (_585 - (_585 * TEXCOORD_5.x)) * cbMtdParam._m0[18u].y;
    vec4 _602 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.z) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.w) + cbTextureTilingScale._m0[3u].w));
    vec4 _624 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[14u].x * _271) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _273) + cbTextureTilingScale._m0[14u].w));
    float _626 = _624.x;
    float _627 = _624.y;
    float _630 = cbMtdParam._m0[17u].y * _624.z;
    vec4 _642 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * TEXCOORD.x) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * TEXCOORD.y) + cbTextureTilingScale._m0[15u].w));
    float _651 = (((cbMtdParam._m0[17u].x * _642.z) - _630) * _368) + _630;
    vec4 _664 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_15, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _676 = (((cbMtdParam._m0[16u].w * _664.z) - _651) * _409) + _651;
    vec4 _689 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _698 = (((cbMtdParam._m0[16u].z * _689.z) - _676) * _449) + _676;
    float _703 = ((cbMtdParam._m0[16u].x * TEXCOORD_5.x) * ((_602.z * cbMtdParam._m0[17u].z) - _698)) + _698;
    float _708 = ((_642.x - _626) * _368) + _626;
    float _709 = ((_642.y - _627) * _368) + _627;
    float _714 = ((_664.x - _708) * _409) + _708;
    float _715 = ((_664.y - _709) * _409) + _709;
    float _724 = ((((_689.x - _714) * _449) + _714) * 2.0) + (-1.0);
    float _725 = ((((_689.y - _715) * _449) + _715) * 2.0) + (-1.0);
    float _726 = dot(vec2(_724, _725), vec2(_724, _725));
    float _3772 = isnan(0.0) ? _726 : (isnan(_726) ? 0.0 : max(_726, 0.0));
    float _731 = sqrt(1.0 - (isnan(1.0) ? _3772 : (isnan(_3772) ? 1.0 : min(_3772, 1.0))));
    float _737 = ((((_602.x * 2.0) + (-1.0)) * TEXCOORD_5.x) * cbMtdParam._m0[15u].y) + _724;
    float _738 = ((((_602.y * 2.0) + (-1.0)) * TEXCOORD_5.y) * cbMtdParam._m0[15u].y) + _725;
    float _741 = fma(_731, _230 * NORMAL.x, fma(_738, _237 * TANGENT.x, (_223 * _215) * _737));
    float _744 = fma(_731, _230 * NORMAL.y, fma(_738, _237 * TANGENT.y, (_223 * _216) * _737));
    float _747 = fma(_731, _230 * NORMAL.z, fma(_738, _237 * TANGENT.z, (_223 * _217) * _737));
    float _751 = inversesqrt(dot(vec3(_741, _744, _747), vec3(_741, _744, _747)));
    float _752 = _751 * _741;
    float _753 = _751 * _744;
    float _754 = _751 * _747;
    float _3783 = isnan(0.0) ? _703 : (isnan(_703) ? 0.0 : max(_703, 0.0));
    float _755 = isnan(1.0) ? _3783 : (isnan(_3783) ? 1.0 : min(_3783, 1.0));
    float _3794 = isnan(0.0) ? _515 : (isnan(_515) ? 0.0 : max(_515, 0.0));
    float _3805 = isnan(0.0) ? _516 : (isnan(_516) ? 0.0 : max(_516, 0.0));
    float _3816 = isnan(0.0) ? _517 : (isnan(_517) ? 0.0 : max(_517, 0.0));
    float _3827 = isnan(0.0) ? _589 : (isnan(_589) ? 0.0 : max(_589, 0.0));
    float _759 = isnan(1.0) ? _3827 : (isnan(_3827) ? 1.0 : min(_3827, 1.0));
    float _775 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _815 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _825 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _815);
    float _826 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _815);
    float _827 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _815);
    float _831 = inversesqrt(dot(vec3(_825, _826, _827), vec3(_825, _826, _827)));
    float _832 = _825 * _831;
    float _833 = _826 * _831;
    float _834 = _827 * _831;
    vec4 _839 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _841 = _839.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1013 = sqrt(((_825 * _825) + (_826 * _826)) + (_827 * _827));
        float _1019 = (cbMatDynParam._m0[5u].x * _1013) + cbMatDynParam._m0[5u].y;
        float _3838 = isnan(0.0) ? _1019 : (isnan(_1019) ? 0.0 : max(_1019, 0.0));
        float _1020 = isnan(1.0) ? _3838 : (isnan(_3838) ? 1.0 : min(_3838, 1.0));
        float _1024 = (cbMatDynParam._m0[5u].z * _1013) + cbMatDynParam._m0[5u].w;
        float _3849 = isnan(0.0) ? _1024 : (isnan(_1024) ? 0.0 : max(_1024, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3849 : (isnan(_3849) ? 1.0 : min(_3849, 1.0))) - _1020)) + _1020) < ((_841 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _852 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _853 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _871 = fma(_754, cbSceneParam._m0[5u].z, fma(_753, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _752));
    float _874 = fma(_754, cbSceneParam._m0[6u].z, fma(_753, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _752));
    float _877 = fma(_754, cbSceneParam._m0[7u].z, fma(_753, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _752));
    uint _890 = uint(roundEven(NORMAL.w)) * 13u;
    uint _891 = _890 + 9u;
    uint _892 = _891 + uint(cbMatDynParam._m0[0u].w);
    float _898 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3794 : (isnan(_3794) ? 1.0 : min(_3794, 1.0)))) * cbInstanceData._m0[_892].x;
    float _899 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3805 : (isnan(_3805) ? 1.0 : min(_3805, 1.0)))) * cbInstanceData._m0[_892].y;
    float _900 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3816 : (isnan(_3816) ? 1.0 : min(_3816, 1.0)))) * cbInstanceData._m0[_892].z;
    float _3860 = isnan(0.0) ? _898 : (isnan(_898) ? 0.0 : max(_898, 0.0));
    float _901 = isnan(1.0) ? _3860 : (isnan(_3860) ? 1.0 : min(_3860, 1.0));
    float _3871 = isnan(0.0) ? _899 : (isnan(_899) ? 0.0 : max(_899, 0.0));
    float _902 = isnan(1.0) ? _3871 : (isnan(_3871) ? 1.0 : min(_3871, 1.0));
    float _3882 = isnan(0.0) ? _900 : (isnan(_900) ? 0.0 : max(_900, 0.0));
    float _903 = isnan(1.0) ? _3882 : (isnan(_3882) ? 1.0 : min(_3882, 1.0));
    float _904 = 1.0 - _759;
    float _905 = _901 * _904;
    float _906 = _902 * _904;
    float _907 = _903 * _904;
    float _912 = (_901 + (-0.039999999105930328369140625)) * _759;
    float _913 = (_902 + (-0.039999999105930328369140625)) * _759;
    float _914 = (_903 + (-0.039999999105930328369140625)) * _759;
    float _915 = _912 + 0.039999999105930328369140625;
    float _917 = _913 + 0.039999999105930328369140625;
    float _918 = _914 + 0.039999999105930328369140625;
    vec4 _927 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _852, cbSceneParam._m0[86u].y * _853));
    float _930 = _927.x * TEXCOORD_5.w;
    float _931 = dot(vec3(_752, _753, _754), vec3(_832, _833, _834));
    float _934 = _931 * 2.0;
    float _938 = (_934 * _752) - _832;
    float _939 = (_934 * _753) - _833;
    float _940 = (_934 * _754) - _834;
    float _944 = abs(dot(vec3(_832, _833, _834), vec3(_752, _753, _754)));
    float _3893 = isnan(0.0) ? _944 : (isnan(_944) ? 0.0 : max(_944, 0.0));
    float _946 = sqrt(_755);
    float _959 = exp2((_946 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3893 : (isnan(_3893) ? 1.0 : min(_3893, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_946 * 3.0));
    float _965 = (1.0 - _959) * ((_946 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _966 = _959 * _946;
    float _994 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _998 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1002 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1332;
    float _1334;
    float _1335;
    float _1336;
    float _1337;
    float _1338;
    float _1339;
    float _1340;
    float _1341;
    float _1342;
    float _1343;
    float _1344;
    float _1345;
    float _1346;
    float _1347;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1057 = fma(_1002, cbModelParam._m0[26u].z, fma(_998, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _994));
        float _1061 = fma(_1002, cbModelParam._m0[27u].z, fma(_998, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _994));
        float _1065 = fma(_1002, cbModelParam._m0[28u].z, fma(_998, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _994));
        float _1090 = _994 + _752;
        float _1091 = _998 + _753;
        float _1092 = _1002 + _754;
        float _1102 = fma(_1092, cbModelParam._m0[26u].z, fma(_1091, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1090)) - _1057;
        float _1103 = fma(_1092, cbModelParam._m0[27u].z, fma(_1091, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1090)) - _1061;
        float _1104 = fma(_1092, cbModelParam._m0[28u].z, fma(_1091, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1090)) - _1065;
        float _1108 = inversesqrt(dot(vec3(_1102, _1103, _1104), vec3(_1102, _1103, _1104)));
        float _1121 = ((_1108 * _1102) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1057 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1122 = ((_1108 * _1103) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1061 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1123 = ((_1108 * _1104) / cbModelParam._m0[34u].z) + ((((((_1065 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1126 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1121, _1122, _1123), 0.0);
        vec4 _1133 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1121, _1122, _1123), 0.0);
        vec4 _1140 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1121, _1122, _1123), 0.0);
        vec4 _1147 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1121, _1122, _1123), 0.0);
        float _1160 = exp2((_1126.w + (-0.5)) * 20.0) * 2.0;
        float _1161 = _1160 * (_1126.x + (-0.5));
        float _1162 = _1160 * (_1126.y + (-0.5));
        float _1163 = _1160 * (_1126.z + (-0.5));
        float _1170 = exp2((_1133.w + (-0.5)) * 20.0) * 2.0;
        float _1171 = _1170 * (_1133.x + (-0.5));
        float _1172 = _1170 * (_1133.y + (-0.5));
        float _1173 = _1170 * (_1133.z + (-0.5));
        float _1180 = exp2((_1140.w + (-0.5)) * 20.0) * 2.0;
        float _1181 = _1180 * (_1140.x + (-0.5));
        float _1182 = _1180 * (_1140.y + (-0.5));
        float _1183 = _1180 * (_1140.z + (-0.5));
        float _1190 = exp2((_1147.w + (-0.5)) * 20.0) * 2.0;
        float _1191 = _1190 * (_1147.x + (-0.5));
        float _1192 = _1190 * (_1147.y + (-0.5));
        float _1193 = _1190 * (_1147.z + (-0.5));
        float _1194 = isnan(0.0) ? _1191 : (isnan(_1191) ? 0.0 : max(_1191, 0.0));
        float _1195 = isnan(0.0) ? _1192 : (isnan(_1192) ? 0.0 : max(_1192, 0.0));
        float _1196 = isnan(0.0) ? _1193 : (isnan(_1193) ? 0.0 : max(_1193, 0.0));
        float _1197 = _1161 * 0.5;
        float _1198 = _1171 * 0.5;
        float _1199 = _1181 * 0.5;
        float _1200 = dot(vec3(_1197, _1198, _1199), vec3(_1197, _1198, _1199));
        float _1205 = (_1200 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1200);
        float _1214 = (dot(vec3(_752, _753, _754), vec3(_1205 * _1197, _1205 * _1198, _1205 * _1199)) + 1.0) * 0.5;
        float _3919 = isnan(0.0) ? _1214 : (isnan(_1214) ? 0.0 : max(_1214, 0.0));
        float _1224 = sqrt(((_1198 * _1198) + (_1197 * _1197)) + (_1199 * _1199)) / (_1194 + 9.9999997473787516355514526367188e-06);
        float _3930 = isnan(0.0) ? _1224 : (isnan(_1224) ? 0.0 : max(_1224, 0.0));
        float _1225 = isnan(1.0) ? _3930 : (isnan(_3930) ? 1.0 : min(_3930, 1.0));
        float _1226 = _1225 * 2.0;
        float _1230 = (1.0 - _1225) / (_1225 + 1.0);
        float _3941 = isnan(0.0) ? _1230 : (isnan(_1230) ? 0.0 : max(_1230, 0.0));
        float _1231 = isnan(1.0) ? _3941 : (isnan(_3941) ? 1.0 : min(_3941, 1.0));
        float _1240 = ((((1.0 - _1231) * (_1226 + 2.0)) * exp2(log2(isnan(1.0) ? _3919 : (isnan(_3919) ? 1.0 : min(_3919, 1.0))) * (_1226 + 1.0))) + _1231) * _1194;
        float _1241 = _1162 * 0.5;
        float _1242 = _1172 * 0.5;
        float _1243 = _1182 * 0.5;
        float _1244 = dot(vec3(_1241, _1242, _1243), vec3(_1241, _1242, _1243));
        float _1249 = (_1244 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1244);
        float _1257 = (dot(vec3(_752, _753, _754), vec3(_1249 * _1241, _1249 * _1242, _1249 * _1243)) + 1.0) * 0.5;
        float _3952 = isnan(0.0) ? _1257 : (isnan(_1257) ? 0.0 : max(_1257, 0.0));
        float _1266 = sqrt(((_1242 * _1242) + (_1241 * _1241)) + (_1243 * _1243)) / (_1195 + 9.9999997473787516355514526367188e-06);
        float _3963 = isnan(0.0) ? _1266 : (isnan(_1266) ? 0.0 : max(_1266, 0.0));
        float _1267 = isnan(1.0) ? _3963 : (isnan(_3963) ? 1.0 : min(_3963, 1.0));
        float _1268 = _1267 * 2.0;
        float _1272 = (1.0 - _1267) / (_1267 + 1.0);
        float _3974 = isnan(0.0) ? _1272 : (isnan(_1272) ? 0.0 : max(_1272, 0.0));
        float _1273 = isnan(1.0) ? _3974 : (isnan(_3974) ? 1.0 : min(_3974, 1.0));
        float _1282 = ((((1.0 - _1273) * (_1268 + 2.0)) * exp2(log2(isnan(1.0) ? _3952 : (isnan(_3952) ? 1.0 : min(_3952, 1.0))) * (_1268 + 1.0))) + _1273) * _1195;
        float _1283 = _1163 * 0.5;
        float _1284 = _1173 * 0.5;
        float _1285 = _1183 * 0.5;
        float _1286 = dot(vec3(_1283, _1284, _1285), vec3(_1283, _1284, _1285));
        float _1291 = (_1286 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1286);
        float _1299 = (dot(vec3(_752, _753, _754), vec3(_1291 * _1283, _1291 * _1284, _1291 * _1285)) + 1.0) * 0.5;
        float _3985 = isnan(0.0) ? _1299 : (isnan(_1299) ? 0.0 : max(_1299, 0.0));
        float _1308 = sqrt(((_1284 * _1284) + (_1283 * _1283)) + (_1285 * _1285)) / (_1196 + 9.9999997473787516355514526367188e-06);
        float _3996 = isnan(0.0) ? _1308 : (isnan(_1308) ? 0.0 : max(_1308, 0.0));
        float _1309 = isnan(1.0) ? _3996 : (isnan(_3996) ? 1.0 : min(_3996, 1.0));
        float _1310 = _1309 * 2.0;
        float _1314 = (1.0 - _1309) / (_1309 + 1.0);
        float _4007 = isnan(0.0) ? _1314 : (isnan(_1314) ? 0.0 : max(_1314, 0.0));
        float _1315 = isnan(1.0) ? _4007 : (isnan(_4007) ? 1.0 : min(_4007, 1.0));
        float _1324 = ((((1.0 - _1315) * (_1310 + 2.0)) * exp2(log2(isnan(1.0) ? _3985 : (isnan(_3985) ? 1.0 : min(_3985, 1.0))) * (_1310 + 1.0))) + _1315) * _1196;
        _1332 = _1163;
        _1334 = _1162;
        _1335 = _1161;
        _1336 = _1173;
        _1337 = _1172;
        _1338 = _1171;
        _1339 = _1183;
        _1340 = _1182;
        _1341 = _1181;
        _1342 = _1196;
        _1343 = _1195;
        _1344 = _1194;
        _1345 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1240 : (isnan(_1240) ? 0.0 : max(_1240, 0.0)));
        _1346 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1282 : (isnan(_1282) ? 0.0 : max(_1282, 0.0)));
        _1347 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1324 : (isnan(_1324) ? 0.0 : max(_1324, 0.0)));
    }
    else
    {
        _1332 = _1333;
        _1334 = _1333;
        _1335 = _1333;
        _1336 = _1333;
        _1337 = _1333;
        _1338 = _1333;
        _1339 = _1333;
        _1340 = _1333;
        _1341 = _1333;
        _1342 = _1333;
        _1343 = _1333;
        _1344 = _1333;
        _1345 = 0.0;
        _1346 = 0.0;
        _1347 = 0.0;
    }
    float _1645;
    float _1646;
    float _1647;
    float _1648;
    float _1649;
    float _1650;
    float _1651;
    float _1652;
    float _1653;
    float _1654;
    float _1655;
    float _1656;
    float _1657;
    float _1658;
    float _1659;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1376 = fma(_1002, cbModelParam._m0[30u].z, fma(_998, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _994));
        float _1380 = fma(_1002, cbModelParam._m0[31u].z, fma(_998, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _994));
        float _1384 = fma(_1002, cbModelParam._m0[32u].z, fma(_998, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _994));
        float _1407 = _994 + _752;
        float _1408 = _998 + _753;
        float _1409 = _1002 + _754;
        float _1419 = fma(_1409, cbModelParam._m0[30u].z, fma(_1408, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1407)) - _1376;
        float _1420 = fma(_1409, cbModelParam._m0[31u].z, fma(_1408, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1407)) - _1380;
        float _1421 = fma(_1409, cbModelParam._m0[32u].z, fma(_1408, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1407)) - _1384;
        float _1425 = inversesqrt(dot(vec3(_1419, _1420, _1421), vec3(_1419, _1420, _1421)));
        float _1438 = ((_1425 * _1419) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1376 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1439 = ((_1425 * _1420) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1380 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1440 = ((_1425 * _1421) / cbModelParam._m0[35u].z) + ((((((_1384 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1442 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1438, _1439, _1440), 0.0);
        vec4 _1449 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1438, _1439, _1440), 0.0);
        vec4 _1456 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1438, _1439, _1440), 0.0);
        vec4 _1463 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1438, _1439, _1440), 0.0);
        float _1475 = exp2((_1442.w + (-0.5)) * 20.0) * 2.0;
        float _1476 = _1475 * (_1442.x + (-0.5));
        float _1477 = _1475 * (_1442.y + (-0.5));
        float _1478 = _1475 * (_1442.z + (-0.5));
        float _1485 = exp2((_1449.w + (-0.5)) * 20.0) * 2.0;
        float _1486 = _1485 * (_1449.x + (-0.5));
        float _1487 = _1485 * (_1449.y + (-0.5));
        float _1488 = _1485 * (_1449.z + (-0.5));
        float _1495 = exp2((_1456.w + (-0.5)) * 20.0) * 2.0;
        float _1496 = _1495 * (_1456.x + (-0.5));
        float _1497 = _1495 * (_1456.y + (-0.5));
        float _1498 = _1495 * (_1456.z + (-0.5));
        float _1505 = exp2((_1463.w + (-0.5)) * 20.0) * 2.0;
        float _1506 = _1505 * (_1463.x + (-0.5));
        float _1507 = _1505 * (_1463.y + (-0.5));
        float _1508 = _1505 * (_1463.z + (-0.5));
        float _1509 = isnan(0.0) ? _1506 : (isnan(_1506) ? 0.0 : max(_1506, 0.0));
        float _1510 = isnan(0.0) ? _1507 : (isnan(_1507) ? 0.0 : max(_1507, 0.0));
        float _1511 = isnan(0.0) ? _1508 : (isnan(_1508) ? 0.0 : max(_1508, 0.0));
        float _1512 = _1476 * 0.5;
        float _1513 = _1486 * 0.5;
        float _1514 = _1496 * 0.5;
        float _1515 = dot(vec3(_1512, _1513, _1514), vec3(_1512, _1513, _1514));
        float _1520 = (_1515 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1515);
        float _1528 = (dot(vec3(_752, _753, _754), vec3(_1520 * _1512, _1520 * _1513, _1520 * _1514)) + 1.0) * 0.5;
        float _4048 = isnan(0.0) ? _1528 : (isnan(_1528) ? 0.0 : max(_1528, 0.0));
        float _1537 = sqrt(((_1513 * _1513) + (_1512 * _1512)) + (_1514 * _1514)) / (_1509 + 9.9999997473787516355514526367188e-06);
        float _4059 = isnan(0.0) ? _1537 : (isnan(_1537) ? 0.0 : max(_1537, 0.0));
        float _1538 = isnan(1.0) ? _4059 : (isnan(_4059) ? 1.0 : min(_4059, 1.0));
        float _1539 = _1538 * 2.0;
        float _1543 = (1.0 - _1538) / (_1538 + 1.0);
        float _4070 = isnan(0.0) ? _1543 : (isnan(_1543) ? 0.0 : max(_1543, 0.0));
        float _1544 = isnan(1.0) ? _4070 : (isnan(_4070) ? 1.0 : min(_4070, 1.0));
        float _1553 = ((((1.0 - _1544) * (_1539 + 2.0)) * exp2(log2(isnan(1.0) ? _4048 : (isnan(_4048) ? 1.0 : min(_4048, 1.0))) * (_1539 + 1.0))) + _1544) * _1509;
        float _1554 = _1477 * 0.5;
        float _1555 = _1487 * 0.5;
        float _1556 = _1497 * 0.5;
        float _1557 = dot(vec3(_1554, _1555, _1556), vec3(_1554, _1555, _1556));
        float _1562 = (_1557 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1557);
        float _1570 = (dot(vec3(_752, _753, _754), vec3(_1562 * _1554, _1562 * _1555, _1562 * _1556)) + 1.0) * 0.5;
        float _4081 = isnan(0.0) ? _1570 : (isnan(_1570) ? 0.0 : max(_1570, 0.0));
        float _1579 = sqrt(((_1555 * _1555) + (_1554 * _1554)) + (_1556 * _1556)) / (_1510 + 9.9999997473787516355514526367188e-06);
        float _4092 = isnan(0.0) ? _1579 : (isnan(_1579) ? 0.0 : max(_1579, 0.0));
        float _1580 = isnan(1.0) ? _4092 : (isnan(_4092) ? 1.0 : min(_4092, 1.0));
        float _1581 = _1580 * 2.0;
        float _1585 = (1.0 - _1580) / (_1580 + 1.0);
        float _4103 = isnan(0.0) ? _1585 : (isnan(_1585) ? 0.0 : max(_1585, 0.0));
        float _1586 = isnan(1.0) ? _4103 : (isnan(_4103) ? 1.0 : min(_4103, 1.0));
        float _1595 = ((((1.0 - _1586) * (_1581 + 2.0)) * exp2(log2(isnan(1.0) ? _4081 : (isnan(_4081) ? 1.0 : min(_4081, 1.0))) * (_1581 + 1.0))) + _1586) * _1510;
        float _1596 = _1478 * 0.5;
        float _1597 = _1488 * 0.5;
        float _1598 = _1498 * 0.5;
        float _1599 = dot(vec3(_1596, _1597, _1598), vec3(_1596, _1597, _1598));
        float _1604 = (_1599 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1599);
        float _1612 = (dot(vec3(_752, _753, _754), vec3(_1604 * _1596, _1604 * _1597, _1604 * _1598)) + 1.0) * 0.5;
        float _4114 = isnan(0.0) ? _1612 : (isnan(_1612) ? 0.0 : max(_1612, 0.0));
        float _1621 = sqrt(((_1597 * _1597) + (_1596 * _1596)) + (_1598 * _1598)) / (_1511 + 9.9999997473787516355514526367188e-06);
        float _4125 = isnan(0.0) ? _1621 : (isnan(_1621) ? 0.0 : max(_1621, 0.0));
        float _1622 = isnan(1.0) ? _4125 : (isnan(_4125) ? 1.0 : min(_4125, 1.0));
        float _1623 = _1622 * 2.0;
        float _1627 = (1.0 - _1622) / (_1622 + 1.0);
        float _4136 = isnan(0.0) ? _1627 : (isnan(_1627) ? 0.0 : max(_1627, 0.0));
        float _1628 = isnan(1.0) ? _4136 : (isnan(_4136) ? 1.0 : min(_4136, 1.0));
        float _1637 = ((((1.0 - _1628) * (_1623 + 2.0)) * exp2(log2(isnan(1.0) ? _4114 : (isnan(_4114) ? 1.0 : min(_4114, 1.0))) * (_1623 + 1.0))) + _1628) * _1511;
        _1645 = _1478;
        _1646 = _1477;
        _1647 = _1476;
        _1648 = _1488;
        _1649 = _1487;
        _1650 = _1486;
        _1651 = _1498;
        _1652 = _1497;
        _1653 = _1496;
        _1654 = _1511;
        _1655 = _1510;
        _1656 = _1509;
        _1657 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1553 : (isnan(_1553) ? 0.0 : max(_1553, 0.0)));
        _1658 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1595 : (isnan(_1595) ? 0.0 : max(_1595, 0.0)));
        _1659 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1637 : (isnan(_1637) ? 0.0 : max(_1637, 0.0)));
    }
    else
    {
        _1645 = _1333;
        _1646 = _1333;
        _1647 = _1333;
        _1648 = _1333;
        _1649 = _1333;
        _1650 = _1333;
        _1651 = _1333;
        _1652 = _1333;
        _1653 = _1333;
        _1654 = _1333;
        _1655 = _1333;
        _1656 = _1333;
        _1657 = 0.0;
        _1658 = 0.0;
        _1659 = 0.0;
    }
    float _1669 = (cbModelParam._m0[1u].x * (_1657 - _1345)) + _1345;
    float _1670 = (cbModelParam._m0[1u].x * (_1658 - _1346)) + _1346;
    float _1671 = (cbModelParam._m0[1u].x * (_1659 - _1347)) + _1347;
    float _1692 = fma(_1671, cbSceneParam._m0[89u].z, fma(_1670, cbSceneParam._m0[89u].y, _1669 * cbSceneParam._m0[89u].x));
    float _1695 = fma(_1671, cbSceneParam._m0[90u].z, fma(_1670, cbSceneParam._m0[90u].y, _1669 * cbSceneParam._m0[90u].x));
    float _1698 = fma(_1671, cbSceneParam._m0[91u].z, fma(_1670, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1669));
    float _1713 = _938 * 0.5;
    float _1714 = _939 * 0.5;
    float _1715 = _940 * 0.5;
    float _1716 = dot(vec4(_1713, _1714, _1715, 1.0), vec4(_1647, _1650, _1653, _1656));
    float _1719 = dot(vec4(_1713, _1714, _1715, 1.0), vec4(_1646, _1649, _1652, _1655));
    float _1722 = dot(vec4(_1713, _1714, _1715, 1.0), vec4(_1645, _1648, _1651, _1654));
    float _1756;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1729 = dot(vec4(_1713, _1714, _1715, 1.0), vec4(_1332, _1336, _1339, _1342));
        float _1733 = dot(vec4(_1713, _1714, _1715, 1.0), vec4(_1334, _1337, _1340, _1343));
        float _1737 = dot(vec4(_1713, _1714, _1715, 1.0), vec4(_1335, _1338, _1341, _1344));
        float _1744 = dot(vec4(cbModelParam._m0[39u]), vec4(_1713, _1714, _1715, 1.0));
        _1756 = dot(vec3(isnan(0.0) ? _1737 : (isnan(_1737) ? 0.0 : max(_1737, 0.0)), isnan(0.0) ? _1733 : (isnan(_1733) ? 0.0 : max(_1733, 0.0)), isnan(0.0) ? _1729 : (isnan(_1729) ? 0.0 : max(_1729, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1744) ? 0.0 : (isnan(0.0) ? _1744 : max(0.0, _1744))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1756 = 1.0;
    }
    float _1767;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1758 = dot(vec4(cbModelParam._m0[40u]), vec4(_1713, _1714, _1715, 1.0));
        _1767 = dot(vec3(isnan(0.0) ? _1716 : (isnan(_1716) ? 0.0 : max(_1716, 0.0)), isnan(0.0) ? _1719 : (isnan(_1719) ? 0.0 : max(_1719, 0.0)), isnan(0.0) ? _1722 : (isnan(_1722) ? 0.0 : max(_1722, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1758) ? 0.0 : (isnan(0.0) ? _1758 : max(0.0, _1758))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1767 = 1.0;
    }
    float _1771 = (_1767 * cbModelParam._m0[1u].x) + (_1756 * (1.0 - cbModelParam._m0[1u].x));
    float _1781 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _755);
    float _1782 = isnan(_1781) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1781 : min(cbModelParam._m0[25u].z, _1781));
    float _1862;
    float _1864;
    float _1866;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1829 = fma(_1002, cbModelParam._m0[13u].z, fma(_998, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _994)) + cbModelParam._m0[13u].w;
        float _1833 = fma(_1002, cbModelParam._m0[14u].z, fma(_998, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _994)) + cbModelParam._m0[14u].w;
        float _1837 = fma(_1002, cbModelParam._m0[15u].z, fma(_998, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _994)) + cbModelParam._m0[15u].w;
        float _1840 = fma(_940, cbModelParam._m0[13u].z, fma(_939, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _938));
        float _1843 = fma(_940, cbModelParam._m0[14u].z, fma(_939, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _938));
        float _1846 = fma(_940, cbModelParam._m0[15u].z, fma(_939, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _938));
        float _1874;
        if (_1840 > 0.0)
        {
            _1874 = abs((1.0 - _1829) / _1840);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1840 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1829 + 1.0) / _1840);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1874 = frontier_phi_17_15_ladder;
        }
        float _2079;
        if (_1843 > 0.0)
        {
            _2079 = abs((1.0 - _1833) / _1843);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1843 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1833 + 1.0) / _1843);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2079 = frontier_phi_26_22_ladder;
        }
        float _2333;
        if (_1846 > 0.0)
        {
            _2333 = abs((1.0 - _1837) / _1846);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1846 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1837 + 1.0) / _1846);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2333 = frontier_phi_38_33_ladder;
        }
        float _2335 = isnan(_2079) ? _1874 : (isnan(_1874) ? _2079 : min(_1874, _2079));
        float _2336 = isnan(_2333) ? _2335 : (isnan(_2335) ? _2333 : min(_2335, _2333));
        float _2340 = (_2336 * _1840) + _1829;
        float _2341 = (_2336 * _1843) + _1833;
        float _2342 = (_2336 * _1846) + _1837;
        float _2343 = _2336 * 9.9999997473787516355514526367188e-05;
        float _2345 = (-1.0) - _2343;
        float _2347 = _2343 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2342 > _2347) || ((_2342 < _2345) || ((_2341 > _2347) || ((_2341 < _2345) || ((_2340 < _2345) || (_2340 > _2347))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2470 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2342, cbModelParam._m0[9u].z, fma(_2341, cbModelParam._m0[9u].y, _2340 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2342, cbModelParam._m0[10u].z, fma(_2341, cbModelParam._m0[10u].y, _2340 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2342, cbModelParam._m0[11u].z, fma(_2341, cbModelParam._m0[11u].y, _2340 * cbModelParam._m0[11u].x))), _1782);
            frontier_phi_16_38_ladder = _2470.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2470.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2470.x * cbModelParam._m0[1u].y;
        }
        _1862 = frontier_phi_16_38_ladder_2;
        _1864 = frontier_phi_16_38_ladder_1;
        _1866 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1850 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_938, _939, _940), _1782);
        _1862 = _1850.x * cbModelParam._m0[1u].y;
        _1864 = _1850.y * cbModelParam._m0[1u].y;
        _1866 = _1850.z * cbModelParam._m0[1u].y;
    }
    float _1870 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _755);
    float _1871 = isnan(_1870) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1870 : min(cbModelParam._m0[25u].w, _1870));
    float _1962;
    float _1964;
    float _1966;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1926 = fma(_1002, cbModelParam._m0[21u].z, fma(_998, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _994)) + cbModelParam._m0[21u].w;
        float _1930 = fma(_1002, cbModelParam._m0[22u].z, fma(_998, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _994)) + cbModelParam._m0[22u].w;
        float _1934 = fma(_1002, cbModelParam._m0[23u].z, fma(_998, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _994)) + cbModelParam._m0[23u].w;
        float _1937 = fma(_940, cbModelParam._m0[21u].z, fma(_939, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _938));
        float _1940 = fma(_940, cbModelParam._m0[22u].z, fma(_939, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _938));
        float _1943 = fma(_940, cbModelParam._m0[23u].z, fma(_939, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _938));
        float _2084;
        if (_1937 > 0.0)
        {
            _2084 = abs((1.0 - _1926) / _1937);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1937 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1926 + 1.0) / _1937);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2084 = frontier_phi_28_24_ladder;
        }
        float _2360;
        if (_1940 > 0.0)
        {
            _2360 = abs((1.0 - _1930) / _1940);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1940 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1930 + 1.0) / _1940);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2360 = frontier_phi_40_35_ladder;
        }
        float _2573;
        if (_1943 > 0.0)
        {
            _2573 = abs((1.0 - _1934) / _1943);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1943 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1934 + 1.0) / _1943);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2573 = frontier_phi_49_46_ladder;
        }
        float _2575 = isnan(_2360) ? _2084 : (isnan(_2084) ? _2360 : min(_2084, _2360));
        float _2576 = isnan(_2573) ? _2575 : (isnan(_2575) ? _2573 : min(_2575, _2573));
        float _2580 = (_2576 * _1937) + _1926;
        float _2581 = (_2576 * _1940) + _1930;
        float _2582 = (_2576 * _1943) + _1934;
        float _2583 = _2576 * 9.9999997473787516355514526367188e-05;
        float _2584 = (-1.0) - _2583;
        float _2586 = _2583 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2582 > _2586) || ((_2582 < _2584) || ((_2581 > _2586) || ((_2581 < _2584) || ((_2580 < _2584) || (_2580 > _2586))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2781 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2582, cbModelParam._m0[17u].z, fma(_2581, cbModelParam._m0[17u].y, _2580 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2582, cbModelParam._m0[18u].z, fma(_2581, cbModelParam._m0[18u].y, _2580 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2582, cbModelParam._m0[19u].z, fma(_2581, cbModelParam._m0[19u].y, _2580 * cbModelParam._m0[19u].x))), _1871);
            frontier_phi_25_49_ladder = _2781.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2781.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2781.x * cbModelParam._m0[1u].z;
        }
        _1962 = frontier_phi_25_49_ladder_2;
        _1964 = frontier_phi_25_49_ladder_1;
        _1966 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1946 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_938, _939, _940), _1871);
        _1962 = _1946.x * cbModelParam._m0[1u].z;
        _1964 = _1946.y * cbModelParam._m0[1u].z;
        _1966 = _1946.z * cbModelParam._m0[1u].z;
    }
    float _1979 = (((_965 * _915) + _966) * _930) * ((cbModelParam._m0[1u].w * (_1962 - _1862)) + _1862);
    float _1981 = (((_965 * _917) + _966) * _930) * ((cbModelParam._m0[1u].w * (_1964 - _1864)) + _1864);
    float _1983 = (((_965 * _918) + _966) * _930) * ((cbModelParam._m0[1u].w * (_1966 - _1866)) + _1866);
    float _1986 = fma(_1983, cbSceneParam._m0[89u].z, fma(_1981, cbSceneParam._m0[89u].y, _1979 * cbSceneParam._m0[89u].x));
    float _1989 = fma(_1983, cbSceneParam._m0[90u].z, fma(_1981, cbSceneParam._m0[90u].y, _1979 * cbSceneParam._m0[90u].x));
    float _1992 = fma(_1983, cbSceneParam._m0[91u].z, fma(_1981, cbSceneParam._m0[91u].y, _1979 * cbSceneParam._m0[91u].x));
    uvec4 _2002 = floatBitsToUint(cbInstanceData._m0[_890 + 5u]);
    uint _2004 = _2002.x * 14u;
    uint _2005 = _2004 + 13u;
    float _2012 = _930 + (-1.0);
    float _2017 = (cbLight._m0[_2005].x * _2012) + 1.0;
    float _2018 = (cbLight._m0[_2005].y * _2012) + 1.0;
    float _2019 = (cbLight._m0[_2005].z * _2012) + 1.0;
    float _2020 = (cbLight._m0[_2005].w * _2012) + 1.0;
    uint _2021 = _2004 + 5u;
    float _2027 = isnan(1.0) ? _2018 : (isnan(_2018) ? 1.0 : min(_2018, 1.0));
    uint _2031 = _2004 + 4u;
    float _2038 = isnan(1.0) ? _2017 : (isnan(_2017) ? 1.0 : min(_2017, 1.0));
    uint _2042 = _2004 | 1u;
    float _2053 = dot(vec3(cbLight._m0[_2004].xyz), vec3(_752, _753, _754));
    float _2056 = dot(vec3(cbLight._m0[_2042].xyz), vec3(_752, _753, _754));
    float _4272 = isnan(0.0) ? _2053 : (isnan(_2053) ? 0.0 : max(_2053, 0.0));
    float _4283 = isnan(0.0) ? _2056 : (isnan(_2056) ? 0.0 : max(_2056, 0.0));
    float _2061 = (isnan(1.0) ? _4272 : (isnan(_4272) ? 1.0 : min(_4272, 1.0))) * 0.3183098733425140380859375;
    float _2063 = (isnan(1.0) ? _4283 : (isnan(_4283) ? 1.0 : min(_4283, 1.0))) * 0.3183098733425140380859375;
    float _2070 = ((cbLight._m0[_2021].x * _2027) * _2063) + ((cbLight._m0[_2031].x * _2038) * _2061);
    float _2071 = ((_2027 * cbLight._m0[_2021].y) * _2063) + ((_2038 * cbLight._m0[_2031].y) * _2061);
    float _2072 = ((_2027 * cbLight._m0[_2021].z) * _2063) + ((_2038 * cbLight._m0[_2031].z) * _2061);
    uvec4 _2076 = floatBitsToUint(cbLight._m0[_2004 + 12u]);
    bool _2078 = _2076.x == 0u;
    float _2089;
    float _2091;
    float _2093;
    if (_2078)
    {
        _2089 = _2070;
        _2091 = _2071;
        _2093 = _2072;
    }
    else
    {
        uint _2097 = _2004 + 6u;
        float _2113 = (dot(vec3(cbLight._m0[_2004 + 2u].xyz), vec3(_752, _753, _754)) * 0.5) + 0.5;
        float _2114 = _2113 * _2113;
        float _4294 = isnan(0.0) ? _2114 : (isnan(_2114) ? 0.0 : max(_2114, 0.0));
        float _2115 = isnan(1.0) ? _4294 : (isnan(_4294) ? 1.0 : min(_4294, 1.0));
        float _2116 = isnan(1.0) ? _2019 : (isnan(_2019) ? 1.0 : min(_2019, 1.0));
        _2089 = (((cbLight._m0[_2097].x * 0.3183098733425140380859375) * _2115) * _2116) + _2070;
        _2091 = (((cbLight._m0[_2097].y * 0.3183098733425140380859375) * _2115) * _2116) + _2071;
        _2093 = (((cbLight._m0[_2097].z * 0.3183098733425140380859375) * _2115) * _2116) + _2072;
    }
    bool _2096 = _2076.y == 0u;
    float _2134;
    float _2136;
    float _2138;
    if (_2096)
    {
        _2134 = _2089;
        _2136 = _2091;
        _2138 = _2093;
    }
    else
    {
        uint _2304 = _2004 + 7u;
        float _2320 = (dot(vec3(cbLight._m0[_2004 + 3u].xyz), vec3(_752, _753, _754)) * 0.5) + 0.5;
        float _2321 = _2320 * _2320;
        float _4310 = isnan(0.0) ? _2321 : (isnan(_2321) ? 0.0 : max(_2321, 0.0));
        float _2322 = isnan(1.0) ? _4310 : (isnan(_4310) ? 1.0 : min(_4310, 1.0));
        float _2323 = isnan(1.0) ? _2020 : (isnan(_2020) ? 1.0 : min(_2020, 1.0));
        _2134 = (((cbLight._m0[_2304].x * 0.3183098733425140380859375) * _2322) * _2323) + _2089;
        _2136 = (((cbLight._m0[_2304].y * 0.3183098733425140380859375) * _2322) * _2323) + _2091;
        _2138 = (((cbLight._m0[_2304].z * 0.3183098733425140380859375) * _2322) * _2323) + _2093;
    }
    uint _2141 = _2004 + 8u;
    float _2154 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2004].w)) * _755) * 0.949999988079071044921875);
    float _2155 = _2154 * _2154;
    float _2156 = cbLight._m0[_2004].x + _832;
    float _2157 = cbLight._m0[_2004].y + _833;
    float _2158 = cbLight._m0[_2004].z + _834;
    float _2162 = inversesqrt(dot(vec3(_2156, _2157, _2158), vec3(_2156, _2157, _2158)));
    float _2163 = _2162 * _2156;
    float _2164 = _2162 * _2157;
    float _2165 = _2162 * _2158;
    float _2166 = dot(vec3(_752, _753, _754), vec3(cbLight._m0[_2004].xyz));
    float _4326 = isnan(0.0) ? _2166 : (isnan(_2166) ? 0.0 : max(_2166, 0.0));
    float _2169 = isnan(1.0) ? _4326 : (isnan(_4326) ? 1.0 : min(_4326, 1.0));
    float _4337 = isnan(0.0) ? _931 : (isnan(_931) ? 0.0 : max(_931, 0.0));
    float _2170 = isnan(1.0) ? _4337 : (isnan(_4337) ? 1.0 : min(_4337, 1.0));
    float _2171 = dot(vec3(_752, _753, _754), vec3(_2163, _2164, _2165));
    float _4348 = isnan(0.0) ? _2171 : (isnan(_2171) ? 0.0 : max(_2171, 0.0));
    float _2174 = isnan(1.0) ? _4348 : (isnan(_4348) ? 1.0 : min(_4348, 1.0));
    float _2175 = dot(vec3(cbLight._m0[_2004].xyz), vec3(_2163, _2164, _2165));
    float _4359 = isnan(0.0) ? _2175 : (isnan(_2175) ? 0.0 : max(_2175, 0.0));
    float _2179 = _2155 * _2155;
    float _2183 = ((_2174 * _2174) * (_2179 + (-1.0))) + 1.0;
    float _2191 = exp2(log2(1.0 - (isnan(1.0) ? _4359 : (isnan(_4359) ? 1.0 : min(_4359, 1.0)))) * 5.0);
    float _2192 = 0.959999978542327880859375 - _912;
    float _2194 = 0.959999978542327880859375 - _913;
    float _2195 = 0.959999978542327880859375 - _914;
    float _2202 = 1.0 - _2155;
    float _2213 = (0.5 / (((_2170 * ((_2169 * _2202) + _2155)) + 9.9999999392252902907785028219223e-09) + (((_2170 * _2202) + _2155) * _2169))) * _2169;
    float _4370 = isnan(0.0) ? _2213 : (isnan(_2213) ? 0.0 : max(_2213, 0.0));
    float _2215 = (isnan(1.0) ? _4370 : (isnan(_4370) ? 1.0 : min(_4370, 1.0))) * (_2179 / ((_2183 * _2183) * 3.141590118408203125));
    uint _2226 = _2004 + 9u;
    float _2237 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2042].w)) * _755) * 0.949999988079071044921875);
    float _2238 = _2237 * _2237;
    float _2239 = cbLight._m0[_2042].x + _832;
    float _2240 = cbLight._m0[_2042].y + _833;
    float _2241 = cbLight._m0[_2042].z + _834;
    float _2245 = inversesqrt(dot(vec3(_2239, _2240, _2241), vec3(_2239, _2240, _2241)));
    float _2246 = _2245 * _2239;
    float _2247 = _2245 * _2240;
    float _2248 = _2245 * _2241;
    float _2249 = dot(vec3(_752, _753, _754), vec3(cbLight._m0[_2042].xyz));
    float _4381 = isnan(0.0) ? _2249 : (isnan(_2249) ? 0.0 : max(_2249, 0.0));
    float _2252 = isnan(1.0) ? _4381 : (isnan(_4381) ? 1.0 : min(_4381, 1.0));
    float _2253 = dot(vec3(_752, _753, _754), vec3(_2246, _2247, _2248));
    float _4392 = isnan(0.0) ? _2253 : (isnan(_2253) ? 0.0 : max(_2253, 0.0));
    float _2256 = isnan(1.0) ? _4392 : (isnan(_4392) ? 1.0 : min(_4392, 1.0));
    float _2257 = dot(vec3(cbLight._m0[_2042].xyz), vec3(_2246, _2247, _2248));
    float _4403 = isnan(0.0) ? _2257 : (isnan(_2257) ? 0.0 : max(_2257, 0.0));
    float _2261 = _2238 * _2238;
    float _2265 = ((_2256 * _2256) * (_2261 + (-1.0))) + 1.0;
    float _2272 = exp2(log2(1.0 - (isnan(1.0) ? _4403 : (isnan(_4403) ? 1.0 : min(_4403, 1.0)))) * 5.0);
    float _2279 = 1.0 - _2238;
    float _2289 = (0.5 / (((_2170 * ((_2252 * _2279) + _2238)) + 9.9999999392252902907785028219223e-09) + (((_2170 * _2279) + _2238) * _2252))) * _2252;
    float _4414 = isnan(0.0) ? _2289 : (isnan(_2289) ? 0.0 : max(_2289, 0.0));
    float _2291 = (isnan(1.0) ? _4414 : (isnan(_4414) ? 1.0 : min(_4414, 1.0))) * (_2261 / ((_2265 * _2265) * 3.141590118408203125));
    float _2301 = (((((_2272 * _2192) + _915) * cbLight._m0[_2226].x) * _2291) * _2027) + (((((_2191 * _2192) + _915) * cbLight._m0[_2141].x) * _2215) * _2038);
    float _2302 = (((((_2272 * _2194) + _917) * cbLight._m0[_2226].y) * _2291) * _2027) + (((((_2191 * _2194) + _917) * cbLight._m0[_2141].y) * _2215) * _2038);
    float _2303 = (((((_2272 * _2195) + _918) * cbLight._m0[_2226].z) * _2291) * _2027) + (((((_2191 * _2195) + _918) * cbLight._m0[_2141].z) * _2215) * _2038);
    float _2365;
    float _2367;
    float _2369;
    if (_2078)
    {
        _2365 = _2301;
        _2367 = _2302;
        _2369 = _2303;
    }
    else
    {
        uint _2371 = _2004 + 2u;
        uint _2375 = _2004 + 10u;
        float _2389 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2371].w)) * _755) * 0.949999988079071044921875);
        float _2390 = _2389 * _2389;
        float _2391 = cbLight._m0[_2371].x + _832;
        float _2392 = cbLight._m0[_2371].y + _833;
        float _2393 = cbLight._m0[_2371].z + _834;
        float _2397 = inversesqrt(dot(vec3(_2391, _2392, _2393), vec3(_2391, _2392, _2393)));
        float _2398 = _2397 * _2391;
        float _2399 = _2397 * _2392;
        float _2400 = _2397 * _2393;
        float _2401 = dot(vec3(_752, _753, _754), vec3(cbLight._m0[_2371].xyz));
        float _4425 = isnan(0.0) ? _2401 : (isnan(_2401) ? 0.0 : max(_2401, 0.0));
        float _2404 = isnan(1.0) ? _4425 : (isnan(_4425) ? 1.0 : min(_4425, 1.0));
        float _2405 = dot(vec3(_752, _753, _754), vec3(_2398, _2399, _2400));
        float _4436 = isnan(0.0) ? _2405 : (isnan(_2405) ? 0.0 : max(_2405, 0.0));
        float _2408 = isnan(1.0) ? _4436 : (isnan(_4436) ? 1.0 : min(_4436, 1.0));
        float _2409 = dot(vec3(cbLight._m0[_2371].xyz), vec3(_2398, _2399, _2400));
        float _4447 = isnan(0.0) ? _2409 : (isnan(_2409) ? 0.0 : max(_2409, 0.0));
        float _2413 = _2390 * _2390;
        float _2417 = ((_2408 * _2408) * (_2413 + (-1.0))) + 1.0;
        float _2424 = exp2(log2(1.0 - (isnan(1.0) ? _4447 : (isnan(_4447) ? 1.0 : min(_4447, 1.0)))) * 5.0);
        float _2431 = 1.0 - _2390;
        float _2441 = (0.5 / (((_2170 * ((_2404 * _2431) + _2390)) + 9.9999999392252902907785028219223e-09) + (((_2170 * _2431) + _2390) * _2404))) * _2404;
        float _4458 = isnan(0.0) ? _2441 : (isnan(_2441) ? 0.0 : max(_2441, 0.0));
        float _2443 = (isnan(1.0) ? _4458 : (isnan(_4458) ? 1.0 : min(_4458, 1.0))) * (_2413 / ((_2417 * _2417) * 3.141590118408203125));
        float _2444 = isnan(1.0) ? _2019 : (isnan(_2019) ? 1.0 : min(_2019, 1.0));
        _2365 = (((((_2424 * _2192) + _915) * cbLight._m0[_2375].x) * _2443) * _2444) + _2301;
        _2367 = (((((_2424 * _2194) + _917) * cbLight._m0[_2375].y) * _2443) * _2444) + _2302;
        _2369 = (((((_2424 * _2195) + _918) * cbLight._m0[_2375].z) * _2443) * _2444) + _2303;
    }
    float _2479;
    float _2481;
    float _2483;
    if (_2096)
    {
        _2479 = _2365;
        _2481 = _2367;
        _2483 = _2369;
    }
    else
    {
        uint _2490 = _2004 + 3u;
        uint _2494 = _2004 + 11u;
        float _2508 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2490].w)) * _755) * 0.949999988079071044921875);
        float _2509 = _2508 * _2508;
        float _2510 = cbLight._m0[_2490].x + _832;
        float _2511 = cbLight._m0[_2490].y + _833;
        float _2512 = cbLight._m0[_2490].z + _834;
        float _2516 = inversesqrt(dot(vec3(_2510, _2511, _2512), vec3(_2510, _2511, _2512)));
        float _2517 = _2516 * _2510;
        float _2518 = _2516 * _2511;
        float _2519 = _2516 * _2512;
        float _2520 = dot(vec3(_752, _753, _754), vec3(cbLight._m0[_2490].xyz));
        float _4474 = isnan(0.0) ? _2520 : (isnan(_2520) ? 0.0 : max(_2520, 0.0));
        float _2523 = isnan(1.0) ? _4474 : (isnan(_4474) ? 1.0 : min(_4474, 1.0));
        float _2524 = dot(vec3(_752, _753, _754), vec3(_2517, _2518, _2519));
        float _4485 = isnan(0.0) ? _2524 : (isnan(_2524) ? 0.0 : max(_2524, 0.0));
        float _2527 = isnan(1.0) ? _4485 : (isnan(_4485) ? 1.0 : min(_4485, 1.0));
        float _2528 = dot(vec3(cbLight._m0[_2490].xyz), vec3(_2517, _2518, _2519));
        float _4496 = isnan(0.0) ? _2528 : (isnan(_2528) ? 0.0 : max(_2528, 0.0));
        float _2532 = _2509 * _2509;
        float _2536 = ((_2527 * _2527) * (_2532 + (-1.0))) + 1.0;
        float _2543 = exp2(log2(1.0 - (isnan(1.0) ? _4496 : (isnan(_4496) ? 1.0 : min(_4496, 1.0)))) * 5.0);
        float _2550 = 1.0 - _2509;
        float _2560 = (0.5 / (((_2170 * ((_2523 * _2550) + _2509)) + 9.9999999392252902907785028219223e-09) + (((_2170 * _2550) + _2509) * _2523))) * _2523;
        float _4507 = isnan(0.0) ? _2560 : (isnan(_2560) ? 0.0 : max(_2560, 0.0));
        float _2562 = (isnan(1.0) ? _4507 : (isnan(_4507) ? 1.0 : min(_4507, 1.0))) * (_2532 / ((_2536 * _2536) * 3.141590118408203125));
        float _2563 = isnan(1.0) ? _2020 : (isnan(_2020) ? 1.0 : min(_2020, 1.0));
        _2479 = (((((_2543 * _2192) + _915) * cbLight._m0[_2494].x) * _2562) * _2563) + _2365;
        _2481 = (((((_2543 * _2194) + _917) * cbLight._m0[_2494].y) * _2562) * _2563) + _2367;
        _2483 = (((((_2543 * _2195) + _918) * cbLight._m0[_2494].z) * _2562) * _2563) + _2369;
    }
    float _2698;
    float _2700;
    float _2702;
    float _2704;
    float _2706;
    float _2708;
    if (_2002.y == 0u)
    {
        float _2638 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2639 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2638;
        float _2640 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2638;
        float _2641 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2638;
        uvec4 _2653 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2654 = _2653.x;
        uint _2665 = uint((float(_2653.y) * floor(float(uint(cbSceneParam._m0[85u].y * _853) / _2654))) + floor(float(uint(cbSceneParam._m0[85u].x * _852) / _2654)));
        float _2675 = (log2(_2641 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2676 = isnan(0.0) ? _2675 : (isnan(_2675) ? 0.0 : max(_2675, 0.0));
        uint _2679 = uint(isnan(14.0) ? _2676 : (isnan(_2676) ? 14.0 : min(_2676, 14.0)));
        uvec4 _2684 = texelFetch(g_lightClusterGridBuffer, int(((_2679 << 2u) + (_2665 << 6u)) >> 2u));
        uint _2685 = _2684.x;
        uint _2686 = _2653.z;
        float _2786;
        float _2788;
        float _2790;
        float _2792;
        float _2794;
        float _2796;
        if (((((1u << ((_2686 >> 4u) & 15u)) + 4294967295u) & _2685) == 0u) || ((_2686 & 240u) == 0u))
        {
            _2786 = 0.0;
            _2788 = 0.0;
            _2790 = 0.0;
            _2792 = 0.0;
            _2794 = 0.0;
            _2796 = 0.0;
        }
        else
        {
            float _2787;
            float _2789;
            float _2791;
            float _2793;
            float _2795;
            float _2797;
            float _2938 = 0.0;
            float _2939 = 0.0;
            float _2940 = 0.0;
            float _2941 = 0.0;
            float _2942 = 0.0;
            float _2943 = 0.0;
            uint _2944 = 0u;
            uint _2953;
            bool _2954;
            for (;;)
            {
                _2953 = texelFetch(g_lightClassification, int((((_2679 << 5u) + (_2665 << 9u)) + (_2944 << 2u)) >> 2u)).x;
                _2954 = _2953 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2954)
                {
                    frontier_phi_66_pred = _2938;
                    frontier_phi_66_pred_1 = _2943;
                    frontier_phi_66_pred_2 = _2942;
                    frontier_phi_66_pred_3 = _2941;
                    frontier_phi_66_pred_4 = _2940;
                    frontier_phi_66_pred_5 = _2939;
                }
                else
                {
                    float _3083;
                    float _3084;
                    float _3085;
                    float _3086;
                    float _3087;
                    float _3088;
                    uint _3089;
                    _3083 = _2938;
                    _3084 = _2939;
                    _3085 = _2940;
                    _3086 = _2941;
                    _3087 = _2942;
                    _3088 = _2943;
                    _3089 = _2953;
                    float _3010;
                    float _3011;
                    float _3012;
                    float _3013;
                    float _3014;
                    float _3015;
                    for (;;)
                    {
                        uint _3093 = uint(findLSB(_3089)) + (_2944 << 5u);
                        uint _3090 = (_3089 + 4294967295u) & _3089;
                        uint _3095 = _3093 * 48u;
                        vec4 _3109 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3095)).x, texelFetch(g_PointLightRenderingBuffer, int(_3095 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3095 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3095 + 3u)).x));
                        uint _3115 = (_3093 * 48u) + 4u;
                        vec4 _3128 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3115)).x, texelFetch(g_PointLightRenderingBuffer, int(_3115 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3115 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3115 + 3u)).x));
                        uint _3134 = (_3093 * 48u) + 8u;
                        vec3 _3145 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3134)).x, texelFetch(g_PointLightRenderingBuffer, int(_3134 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3134 + 2u)).x));
                        float _3149 = _3109.x - _2639;
                        float _3150 = _3109.y - _2640;
                        float _3151 = _3109.z - _2641;
                        float _3152 = dot(vec3(_3149, _3150, _3151), vec3(_3149, _3150, _3151));
                        float _3155 = inversesqrt(_3152);
                        float _3156 = _3155 * _3149;
                        float _3157 = _3155 * _3150;
                        float _3158 = _3155 * _3151;
                        float _3159 = dot(vec3(_871, _874, _877), vec3(_3156, _3157, _3158));
                        float _3164 = 1.0 - (_3152 * _3109.w);
                        float _4533 = isnan(0.0) ? _3164 : (isnan(_3164) ? 0.0 : max(_3164, 0.0));
                        float _3165 = isnan(1.0) ? _4533 : (isnan(_4533) ? 1.0 : min(_4533, 1.0));
                        float _3166 = sqrt(_3152) * _3128.w;
                        float _3169 = 1.39999997615814208984375 / (_3166 + 1.39999997615814208984375);
                        float _3170 = _3169 * _3169;
                        float _3173 = ((1.0 - _3170) * _3159) + _3170;
                        float _3176 = _3166 * _3166;
                        float _3180 = ((isnan(0.0) ? _3173 : (isnan(_3173) ? 0.0 : max(_3173, 0.0))) * _3165) / ((_3176 * 0.699999988079071044921875) + 1.0);
                        float _3184 = (-0.0) - _2639;
                        float _3185 = (-0.0) - _2640;
                        float _3186 = (-0.0) - _2641;
                        float _3190 = inversesqrt(dot(vec3(_3184, _3185, _3186), vec3(_3184, _3185, _3186)));
                        float _3191 = _3190 * _3184;
                        float _3192 = _3190 * _3185;
                        float _3193 = _3190 * _3186;
                        float _3201 = exp2(log2(1.0 / ((_3176 * 3.5) + 5.0)) * 0.25);
                        float _3202 = 1.0 - _946;
                        float _3209 = sqrt(1.0 - ((1.0 - (_3202 * _3202)) * (1.0 - (_3201 * _3201))));
                        float _3210 = _3209 * _3209;
                        float _3211 = _3210 * _3210;
                        float _3212 = _3191 + _3156;
                        float _3213 = _3192 + _3157;
                        float _3214 = _3193 + _3158;
                        float _3218 = inversesqrt(dot(vec3(_3212, _3213, _3214), vec3(_3212, _3213, _3214)));
                        float _3222 = dot(vec3(_871, _874, _877), vec3(_3191, _3192, _3193));
                        float _4549 = isnan(0.0) ? _3222 : (isnan(_3222) ? 0.0 : max(_3222, 0.0));
                        float _3225 = isnan(1.0) ? _4549 : (isnan(_4549) ? 1.0 : min(_4549, 1.0));
                        float _3226 = dot(vec3(_871, _874, _877), vec3(_3218 * _3212, _3218 * _3213, _3218 * _3214));
                        float _4560 = isnan(0.0) ? _3226 : (isnan(_3226) ? 0.0 : max(_3226, 0.0));
                        float _3229 = isnan(1.0) ? _4560 : (isnan(_4560) ? 1.0 : min(_4560, 1.0));
                        float _3233 = ((_3229 * _3229) * (_3211 + (-1.0))) + 1.0;
                        float _3234 = _3169 * _3210;
                        float _3235 = _3234 * _3234;
                        float _3238 = ((1.0 - _3235) * _3159) + _3235;
                        float _4571 = isnan(0.0) ? _3238 : (isnan(_3238) ? 0.0 : max(_3238, 0.0));
                        float _3239 = isnan(1.0) ? _4571 : (isnan(_4571) ? 1.0 : min(_4571, 1.0));
                        float _3240 = 1.0 - _3210;
                        float _3250 = (0.5 / (((_3239 * ((_3225 * _3240) + _3210)) + 9.9999999392252902907785028219223e-09) + (((_3239 * _3240) + _3210) * _3225))) * _3239;
                        float _4582 = isnan(0.0) ? _3250 : (isnan(_3250) ? 0.0 : max(_3250, 0.0));
                        float _3261 = (((_3211 * 3.1415927410125732421875) * (isnan(1.0) ? _4582 : (isnan(_4582) ? 1.0 : min(_4582, 1.0)))) / ((_3233 * _3233) * ((_3176 * 2.1991131305694580078125) + 3.141590118408203125))) * _3165;
                        _3013 = (_3180 * _3128.x) + _3086;
                        _3014 = (_3180 * _3128.y) + _3087;
                        _3015 = (_3180 * _3128.z) + _3088;
                        _3010 = (_3261 * _3145.x) + _3083;
                        _3011 = (_3261 * _3145.y) + _3084;
                        _3012 = (_3261 * _3145.z) + _3085;
                        if (_3090 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3083 = _3010;
                            _3084 = _3011;
                            _3085 = _3012;
                            _3086 = _3013;
                            _3087 = _3014;
                            _3088 = _3015;
                            _3089 = _3090;
                        }
                    }
                    frontier_phi_66_pred = _3010;
                    frontier_phi_66_pred_1 = _3015;
                    frontier_phi_66_pred_2 = _3014;
                    frontier_phi_66_pred_3 = _3013;
                    frontier_phi_66_pred_4 = _3012;
                    frontier_phi_66_pred_5 = _3011;
                }
                _2787 = frontier_phi_66_pred;
                _2797 = frontier_phi_66_pred_1;
                _2795 = frontier_phi_66_pred_2;
                _2793 = frontier_phi_66_pred_3;
                _2791 = frontier_phi_66_pred_4;
                _2789 = frontier_phi_66_pred_5;
                uint _2945 = _2944 + 1u;
                if (_2945 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2938 = _2787;
                    _2939 = _2789;
                    _2940 = _2791;
                    _2941 = _2793;
                    _2942 = _2795;
                    _2943 = _2797;
                    _2944 = _2945;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2786 = _2787;
            _2788 = _2789;
            _2790 = _2791;
            _2792 = _2793;
            _2794 = _2795;
            _2796 = _2797;
        }
        uvec4 _2800 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2801 = _2800.z;
        uint _2803 = (_2801 >> 8u) & 15u;
        float _2906;
        float _2908;
        float _2910;
        float _2912;
        float _2914;
        float _2916;
        if (((4294967295u << _2803) & _2685) == 0u)
        {
            _2906 = _2786;
            _2908 = _2788;
            _2910 = _2790;
            _2912 = _2792;
            _2914 = _2794;
            _2916 = _2796;
        }
        else
        {
            float _2931 = inversesqrt(dot(vec3(_2639, _2640, _2641), vec3(_2639, _2640, _2641)));
            float _2932 = _2931 * _2639;
            float _2933 = _2931 * _2640;
            float _2934 = _2931 * _2641;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2803 < ((_2801 >> 12u) & 15u))
            {
                float _2907;
                float _2909;
                float _2911;
                float _2913;
                float _2915;
                float _2917;
                float _3066 = _2786;
                float _3067 = _2788;
                float _3068 = _2790;
                float _3069 = _2792;
                float _3070 = _2794;
                float _3071 = _2796;
                uint _3072 = _2803;
                uint _3081;
                bool _3082;
                for (;;)
                {
                    _3081 = texelFetch(g_lightClassification, int((((_2679 << 5u) + (_2665 << 9u)) + (_3072 << 2u)) >> 2u)).x;
                    _3082 = _3081 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3082)
                    {
                        frontier_phi_77_pred = _3071;
                        frontier_phi_77_pred_1 = _3070;
                        frontier_phi_77_pred_2 = _3069;
                        frontier_phi_77_pred_3 = _3068;
                        frontier_phi_77_pred_4 = _3067;
                        frontier_phi_77_pred_5 = _3066;
                    }
                    else
                    {
                        float _3275;
                        float _3276;
                        float _3277;
                        float _3278;
                        float _3279;
                        float _3280;
                        float _3569;
                        float _3570;
                        float _3571;
                        float _3572;
                        float _3573;
                        float _3574;
                        float _3288 = _3066;
                        float _3289 = _3067;
                        float _3290 = _3068;
                        float _3291 = _3069;
                        float _3292 = _3070;
                        float _3293 = _3071;
                        uint _3294 = _3081;
                        uint _3295;
                        vec4 _3320;
                        float _3321;
                        vec4 _3336;
                        vec3 _3348;
                        vec4 _3363;
                        vec4 _3378;
                        float _3425;
                        bool _3426;
                        for (;;)
                        {
                            uint _3305 = ((_3072 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3294));
                            _3295 = (_3294 + 4294967295u) & _3294;
                            uint _3307 = _3305 * 40u;
                            _3320 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3307)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3307 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3307 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3307 + 3u)).x));
                            _3321 = _3320.w;
                            uint _3323 = (_3305 * 40u) + 4u;
                            _3336 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3323)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3323 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3323 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3323 + 3u)).x));
                            uint _3338 = (_3305 * 40u) + 8u;
                            _3348 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3338)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3338 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3338 + 2u)).x));
                            uint _3350 = (_3305 * 40u) + 16u;
                            _3363 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3350)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3350 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3350 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3350 + 3u)).x));
                            uint _3365 = (_3305 * 40u) + 20u;
                            _3378 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3365)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3365 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3365 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3365 + 3u)).x));
                            uint _3381 = (_3305 * 40u) + 24u;
                            vec4 _3394 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3381)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3381 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3381 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3381 + 3u)).x));
                            uint _3400 = (_3305 * 40u) + 28u;
                            vec4 _3413 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3400)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3400 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3400 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3400 + 3u)).x));
                            _3425 = fma(_2641, _3413.z, fma(_2640, _3413.y, _3413.x * _2639)) + _3413.w;
                            _3426 = !((fma(_2641, _3394.z, fma(_2640, _3394.y, _3394.x * _2639)) + _3394.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3426)
                            {
                                float _3453 = _3320.x - _2639;
                                float _3454 = _3320.y - _2640;
                                float _3455 = _3320.z - _2641;
                                float _3456 = dot(vec3(_3453, _3454, _3455), vec3(_3453, _3454, _3455));
                                float _3459 = inversesqrt(_3456);
                                float _3460 = _3459 * _3453;
                                float _3461 = _3459 * _3454;
                                float _3462 = _3459 * _3455;
                                float _3466 = 1.0 - (_3456 / (_3321 * _3321));
                                float _4593 = isnan(0.0) ? _3466 : (isnan(_3466) ? 0.0 : max(_3466, 0.0));
                                float _3467 = isnan(1.0) ? _4593 : (isnan(_4593) ? 1.0 : min(_4593, 1.0));
                                float _3471 = sqrt(_3456) * _3336.w;
                                float _3473 = 1.39999997615814208984375 / (_3471 + 1.39999997615814208984375);
                                float _3474 = _3473 * _3473;
                                float _3477 = ((1.0 - _3474) * dot(vec3(_3460, _3461, _3462), vec3(_871, _874, _877))) + _3474;
                                float _3480 = _3471 * _3471;
                                float _3484 = (fma(_2641, _3363.z, fma(_2640, _3363.y, _3363.x * _2639)) + _3363.w) / _3425;
                                float _3485 = (fma(_2641, _3378.z, fma(_2640, _3378.y, _3378.x * _2639)) + _3378.w) / _3425;
                                float _3489 = 1.0 - dot(vec2(_3484, _3485), vec2(_3484, _3485));
                                float _4609 = isnan(0.0) ? _3489 : (isnan(_3489) ? 0.0 : max(_3489, 0.0));
                                float _3490 = isnan(1.0) ? _4609 : (isnan(_4609) ? 1.0 : min(_4609, 1.0));
                                float _3491 = _3490 * (((isnan(0.0) ? _3477 : (isnan(_3477) ? 0.0 : max(_3477, 0.0))) * _3467) / ((_3480 * 0.699999988079071044921875) + 1.0));
                                float _3503 = exp2(log2(1.0 / ((_3480 * 3.5) + 5.0)) * 0.25);
                                float _3504 = 1.0 - _946;
                                float _3511 = sqrt(1.0 - ((1.0 - (_3504 * _3504)) * (1.0 - (_3503 * _3503))));
                                float _3512 = _3511 * _3511;
                                float _3513 = _3512 * _3512;
                                float _3514 = _3460 - _2932;
                                float _3515 = _3461 - _2933;
                                float _3516 = _3462 - _2934;
                                float _3520 = inversesqrt(dot(vec3(_3514, _3515, _3516), vec3(_3514, _3515, _3516)));
                                float _3524 = dot(vec3(_871, _874, _877), vec3((-0.0) - _2932, (-0.0) - _2933, (-0.0) - _2934));
                                float _4620 = isnan(0.0) ? _3524 : (isnan(_3524) ? 0.0 : max(_3524, 0.0));
                                float _3527 = isnan(1.0) ? _4620 : (isnan(_4620) ? 1.0 : min(_4620, 1.0));
                                float _3528 = dot(vec3(_871, _874, _877), vec3(_3520 * _3514, _3520 * _3515, _3520 * _3516));
                                float _4631 = isnan(0.0) ? _3528 : (isnan(_3528) ? 0.0 : max(_3528, 0.0));
                                float _3531 = isnan(1.0) ? _4631 : (isnan(_4631) ? 1.0 : min(_4631, 1.0));
                                float _3535 = ((_3531 * _3531) * (_3513 + (-1.0))) + 1.0;
                                float _3536 = _3473 * _3512;
                                float _3537 = _3536 * _3536;
                                float _3543 = ((1.0 - _3537) * dot(vec3(_871, _874, _877), vec3(_3460, _3461, _3462))) + _3537;
                                float _4642 = isnan(0.0) ? _3543 : (isnan(_3543) ? 0.0 : max(_3543, 0.0));
                                float _3544 = isnan(1.0) ? _4642 : (isnan(_4642) ? 1.0 : min(_4642, 1.0));
                                float _3545 = 1.0 - _3512;
                                float _3555 = (0.5 / (((_3544 * ((_3527 * _3545) + _3512)) + 9.9999999392252902907785028219223e-09) + (((_3544 * _3545) + _3512) * _3527))) * _3544;
                                float _4653 = isnan(0.0) ? _3555 : (isnan(_3555) ? 0.0 : max(_3555, 0.0));
                                float _3565 = (_3490 * _3467) * (((_3513 * 3.1415927410125732421875) * (isnan(1.0) ? _4653 : (isnan(_4653) ? 1.0 : min(_4653, 1.0)))) / ((_3535 * _3535) * ((_3480 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3491 * _3336.y;
                                frontier_phi_83_pred_1 = _3491 * _3336.x;
                                frontier_phi_83_pred_2 = _3565 * _3348.z;
                                frontier_phi_83_pred_3 = _3565 * _3348.y;
                                frontier_phi_83_pred_4 = _3565 * _3348.x;
                                frontier_phi_83_pred_5 = _3491 * _3336.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3573 = frontier_phi_83_pred;
                            _3572 = frontier_phi_83_pred_1;
                            _3571 = frontier_phi_83_pred_2;
                            _3570 = frontier_phi_83_pred_3;
                            _3569 = frontier_phi_83_pred_4;
                            _3574 = frontier_phi_83_pred_5;
                            _3278 = _3572 + _3291;
                            _3279 = _3573 + _3292;
                            _3280 = _3574 + _3293;
                            _3275 = _3569 + _3288;
                            _3276 = _3570 + _3289;
                            _3277 = _3571 + _3290;
                            if (_3295 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3288 = _3275;
                                _3289 = _3276;
                                _3290 = _3277;
                                _3291 = _3278;
                                _3292 = _3279;
                                _3293 = _3280;
                                _3294 = _3295;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3280;
                        frontier_phi_77_pred_1 = _3279;
                        frontier_phi_77_pred_2 = _3278;
                        frontier_phi_77_pred_3 = _3277;
                        frontier_phi_77_pred_4 = _3276;
                        frontier_phi_77_pred_5 = _3275;
                    }
                    _2917 = frontier_phi_77_pred;
                    _2915 = frontier_phi_77_pred_1;
                    _2913 = frontier_phi_77_pred_2;
                    _2911 = frontier_phi_77_pred_3;
                    _2909 = frontier_phi_77_pred_4;
                    _2907 = frontier_phi_77_pred_5;
                    uint _3073 = _3072 + 1u;
                    if (_3073 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3066 = _2907;
                        _3067 = _2909;
                        _3068 = _2911;
                        _3069 = _2913;
                        _3070 = _2915;
                        _3071 = _2917;
                        _3072 = _3073;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2911;
                frontier_phi_58_59_ladder_1 = _2917;
                frontier_phi_58_59_ladder_2 = _2915;
                frontier_phi_58_59_ladder_3 = _2913;
                frontier_phi_58_59_ladder_4 = _2909;
                frontier_phi_58_59_ladder_5 = _2907;
            }
            else
            {
                frontier_phi_58_59_ladder = _2790;
                frontier_phi_58_59_ladder_1 = _2796;
                frontier_phi_58_59_ladder_2 = _2794;
                frontier_phi_58_59_ladder_3 = _2792;
                frontier_phi_58_59_ladder_4 = _2788;
                frontier_phi_58_59_ladder_5 = _2786;
            }
            _2906 = frontier_phi_58_59_ladder_5;
            _2908 = frontier_phi_58_59_ladder_4;
            _2910 = frontier_phi_58_59_ladder;
            _2912 = frontier_phi_58_59_ladder_3;
            _2914 = frontier_phi_58_59_ladder_2;
            _2916 = frontier_phi_58_59_ladder_1;
        }
        float _2921 = isnan(1.0) ? _930 : (isnan(_930) ? 1.0 : min(_930, 1.0));
        _2698 = (_2921 * _2912) + _2134;
        _2700 = (_2921 * _2914) + _2136;
        _2702 = (_2921 * _2916) + _2138;
        _2704 = ((_2906 * _915) * _2921) + _2479;
        _2706 = ((_2908 * _917) * _2921) + _2481;
        _2708 = ((_2910 * _918) * _2921) + _2483;
    }
    else
    {
        _2698 = _2134;
        _2700 = _2136;
        _2702 = _2138;
        _2704 = _2479;
        _2706 = _2481;
        _2708 = _2483;
    }
    float _4669 = isnan(0.0) ? _905 : (isnan(_905) ? 0.0 : max(_905, 0.0));
    float _4680 = isnan(0.0) ? _906 : (isnan(_906) ? 0.0 : max(_906, 0.0));
    float _4691 = isnan(0.0) ? _907 : (isnan(_907) ? 0.0 : max(_907, 0.0));
    float _2725 = ((isnan(1.0) ? _4669 : (isnan(_4669) ? 1.0 : min(_4669, 1.0))) * (_2698 + ((isnan(0.0) ? _1692 : (isnan(_1692) ? 0.0 : max(_1692, 0.0))) * _930))) + ((_2704 + ((isnan(0.0) ? _1986 : (isnan(_1986) ? 0.0 : max(_1986, 0.0))) * _1771)) * cbPerFrame._m0[3u].x);
    float _2726 = ((isnan(1.0) ? _4680 : (isnan(_4680) ? 1.0 : min(_4680, 1.0))) * (_2700 + ((isnan(0.0) ? _1695 : (isnan(_1695) ? 0.0 : max(_1695, 0.0))) * _930))) + ((_2706 + ((isnan(0.0) ? _1989 : (isnan(_1989) ? 0.0 : max(_1989, 0.0))) * _1771)) * cbPerFrame._m0[3u].x);
    float _2727 = ((isnan(1.0) ? _4691 : (isnan(_4691) ? 1.0 : min(_4691, 1.0))) * (_2702 + ((isnan(0.0) ? _1698 : (isnan(_1698) ? 0.0 : max(_1698, 0.0))) * _930))) + ((_2708 + ((isnan(0.0) ? _1992 : (isnan(_1992) ? 0.0 : max(_1992, 0.0))) * _1771)) * cbPerFrame._m0[3u].x);
    uint _2728 = _890 + 6u;
    float _2736 = _852 / cbSceneParam._m0[86u].x;
    float _2737 = _853 / cbSceneParam._m0[86u].y;
    vec4 _2751 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2736, _2737, (log2((isnan(cbSceneParam._m0[77u].w) ? _775 : (isnan(_775) ? cbSceneParam._m0[77u].w : min(_775, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2753 = _2751.x;
    float _2754 = _2751.y;
    float _2755 = _2751.z;
    float _2756 = _2751.w;
    float _2848;
    float _2850;
    float _2852;
    float _2854;
    if (_775 > cbSceneParam._m0[78u].w)
    {
        float _2811 = isnan(_775) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _775 : min(cbSceneParam._m0[80u].w, _775));
        float _2812 = _2811 / _775;
        float _2823 = _2812 * _825;
        float _2824 = _826 * _2812;
        float _2825 = (-0.0) - _2824;
        float _2826 = _2812 * _827;
        float _2828 = (cbSceneParam._m0[77u].w * _2825) / _2811;
        float _2829 = _2828 + cbSceneParam._m0[79u].w;
        float _2830 = cbSceneParam._m0[79u].w - _2824;
        float _2836 = sqrt(((_2823 * _2823) + (_2824 * _2824)) + (_2826 * _2826));
        float _2839 = (1.0 - (cbSceneParam._m0[77u].w / _2811)) * _2836;
        float _2844 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2846 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3023;
        if (abs((_2825 - _2828) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3023 = ((((_2829 > 0.0) ? exp2(_2844 * _2829) : (2.0 - exp2(_2846 * _2829))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2839;
        }
        else
        {
            float _2967 = 1.0 / cbSceneParam._m0[80u].x;
            float _2968 = isnan(_2830) ? _2829 : (isnan(_2829) ? _2830 : max(_2829, _2830));
            float _2969 = isnan(_2830) ? _2829 : (isnan(_2829) ? _2830 : min(_2829, _2830));
            float _2978 = isnan(0.0) ? _2968 : (isnan(_2968) ? 0.0 : min(_2968, 0.0));
            float _2979 = isnan(0.0) ? _2969 : (isnan(_2969) ? 0.0 : min(_2969, 0.0));
            _3023 = ((abs(_2836 / _2825) * cbSceneParam._m0[80u].y) * ((((_2978 - _2979) * 2.0) - ((exp2(_2844 * (isnan(0.0) ? _2968 : (isnan(_2968) ? 0.0 : max(_2968, 0.0)))) - exp2(_2844 * (isnan(0.0) ? _2969 : (isnan(_2969) ? 0.0 : max(_2969, 0.0))))) * _2967)) - ((exp2(_2846 * _2978) - exp2(_2846 * _2979)) * _2967))) + (_2839 * cbSceneParam._m0[80u].z);
        }
        vec4 _3025 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2736, _2737, 1.0), 0.0);
        float _3034 = exp2((_3023 * (-1.44269502162933349609375)) * (1.0 - _3025.w));
        float _3035 = log2(_3034);
        float _3051 = log2(_2756);
        _2848 = (exp2(_3051 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3035 * cbSceneParam._m0[78u].x)) * _3025.x) / cbSceneParam._m0[78u].x)) + _2753;
        _2850 = (exp2(_3051 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3035 * cbSceneParam._m0[78u].y)) * _3025.y) / cbSceneParam._m0[78u].y)) + _2754;
        _2852 = (exp2(_3051 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3035 * cbSceneParam._m0[78u].z)) * _3025.z) / cbSceneParam._m0[78u].z)) + _2755;
        _2854 = _3034 * _2756;
    }
    else
    {
        _2848 = _2753;
        _2850 = _2754;
        _2852 = _2755;
        _2854 = _2756;
    }
    bool _3061;
    vec4 _2864;
    vec4 _2886;
    float _2888;
    float _2892;
    float _2893;
    float _2894;
    float _2895;
    bool _2905;
    for (;;)
    {
        _2864 = cbMatDynParam._m0[0u];
        float _2866 = roundEven(_2864.y);
        bool _2867 = _2866 == 3.0;
        float _2868 = log2(_2854);
        float _2875 = exp2(_2868 * cbSceneParam._m0[78u].x) * _2725;
        float _2876 = exp2(_2868 * cbSceneParam._m0[78u].y) * _2726;
        float _2877 = exp2(_2868 * cbSceneParam._m0[78u].z) * _2727;
        float _2884 = _841 + (-0.5);
        _2886 = cbMtdParam._m0[1u];
        _2888 = _2886.y * _2884;
        float _2891 = (_2866 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2892 = _2891 * (_2867 ? _2875 : (_2875 + (cbSceneParam._m0[72u].w * _2848)));
        _2893 = _2891 * (_2867 ? _2876 : (_2876 + (cbSceneParam._m0[72u].w * _2850)));
        _2894 = _2891 * (_2867 ? _2877 : (_2877 + (cbSceneParam._m0[72u].w * _2852)));
        _2895 = _2884 * 0.999000012874603271484375;
        _2905 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2905)
        {
            if ((cbInstanceData._m0[_890 + 7u].x + _2895) < 0.5)
            {
                _3061 = true;
                break;
            }
        }
        uint _3002 = _891 + uint(_2864.w);
        if ((cbInstanceData._m0[_3002].w < 1.0) && ((cbInstanceData._m0[_3002].w + _2895) < 0.5))
        {
            _3061 = true;
            break;
        }
        if ((_2888 + 1.0) < _2886.x)
        {
            _3061 = true;
            break;
        }
        _3061 = false;
        break;
    }
    float _3266;
    if (_3061)
    {
        discard_state = true;
        _3266 = 0.0;
    }
    else
    {
        _3266 = cbInstanceData._m0[_2728].w;
    }
    SV_Target.x = _2892;
    SV_Target.y = _2893;
    SV_Target.z = _2894;
    SV_Target.w = _3266;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2728].w;
    discard_exit();
}


