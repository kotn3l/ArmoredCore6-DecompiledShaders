#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[20];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_19;
layout(set = 0, binding = 11) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_2;
layout(set = 0, binding = 12) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_20;
layout(set = 0, binding = 13) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_3;
layout(set = 0, binding = 14) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_5;
layout(set = 0, binding = 15) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_6;
layout(set = 0, binding = 17) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_8;
layout(set = 0, binding = 18) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_11;
layout(set = 0, binding = 3) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_12;
layout(set = 0, binding = 4) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_13;
layout(set = 0, binding = 5) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_14;
layout(set = 0, binding = 6) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_15;
layout(set = 0, binding = 7) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_16;
layout(set = 0, binding = 8) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_17;
layout(set = 0, binding = 9) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_18;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1323;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _213 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _214 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _215 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _221 = inversesqrt(dot(vec3(_213, _214, _215), vec3(_213, _214, _215)));
    float _228 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _235 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _258 = sin(cbMtdParam._m0[18u].x);
    float _259 = cos(cbMtdParam._m0[18u].x);
    float _260 = TEXCOORD.x - cbMtdParam._m0[17u].w;
    float _261 = TEXCOORD.y - cbMtdParam._m0[17u].w;
    float _269 = (cbMtdParam._m0[17u].w + cbMtdParam._m0[19u].y) + fma(_261, (-0.0) - _258, _259 * _260);
    float _271 = (cbMtdParam._m0[17u].w + cbMtdParam._m0[19u].z) + fma(_261, _259, _260 * _258);
    vec4 _284 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * _269) + cbTextureTilingScale._m0[1u].z, (_271 * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w));
    float _290 = _284.x * cbMtdParam._m0[10u].x;
    float _291 = _284.y * cbMtdParam._m0[10u].y;
    float _292 = _284.z * cbMtdParam._m0[10u].z;
    vec4 _310 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w));
    vec4 _329 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_0, SS_WrapLinear), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _354 = cbMtdParam._m0[19u].x * texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.x) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD.y) + cbTextureTilingScale._m0[13u].w)).x;
    float _365 = ((cbMtdParam._m0[15u].x * (-1.39999997615814208984375)) * (((1.0 - _329.x) * 2.0) - _354)) + 1.0;
    float _3651 = isnan(0.0) ? _365 : (isnan(_365) ? 0.0 : max(_365, 0.0));
    float _366 = isnan(1.0) ? _3651 : (isnan(_3651) ? 1.0 : min(_3651, 1.0));
    float _373 = (_366 * ((_310.x * cbMtdParam._m0[11u].x) - _290)) + _290;
    float _374 = (_366 * ((_310.y * cbMtdParam._m0[11u].y) - _291)) + _291;
    float _375 = (_366 * ((_310.z * cbMtdParam._m0[11u].z) - _292)) + _292;
    vec4 _393 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_8, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[17u].x * TEXCOORD.x) + cbTextureTilingScale._m0[17u].z, (cbTextureTilingScale._m0[17u].y * TEXCOORD.y) + cbTextureTilingScale._m0[17u].w));
    float _406 = (((((1.0 - _329.y) * 2.0) - _354) * (-1.39999997615814208984375)) * cbMtdParam._m0[18u].z) + 1.0;
    float _3662 = isnan(0.0) ? _406 : (isnan(_406) ? 0.0 : max(_406, 0.0));
    float _407 = isnan(1.0) ? _3662 : (isnan(_3662) ? 1.0 : min(_3662, 1.0));
    float _414 = (((_393.x * cbMtdParam._m0[12u].x) - _373) * _407) + _373;
    float _415 = (_407 * ((_393.y * cbMtdParam._m0[12u].y) - _374)) + _374;
    float _416 = (_407 * ((_393.z * cbMtdParam._m0[12u].z) - _375)) + _375;
    vec4 _433 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _446 = (((((1.0 - _329.z) * 2.0) - _354) * (-1.39999997615814208984375)) * cbMtdParam._m0[18u].w) + 1.0;
    float _3673 = isnan(0.0) ? _446 : (isnan(_446) ? 0.0 : max(_446, 0.0));
    float _447 = isnan(1.0) ? _3673 : (isnan(_3673) ? 1.0 : min(_3673, 1.0));
    vec4 _475 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _483 = ((((((_433.x * cbMtdParam._m0[13u].x) - _414) * _447) + _414) * 4.55000019073486328125) * cbMtdParam._m0[9u].x) * _475.x;
    float _486 = ((((_447 * ((_433.y * cbMtdParam._m0[13u].y) - _415)) + _415) * 4.55000019073486328125) * cbMtdParam._m0[9u].y) * _475.y;
    float _489 = ((((_447 * ((_433.z * cbMtdParam._m0[13u].z) - _416)) + _416) * 4.55000019073486328125) * cbMtdParam._m0[9u].z) * _475.z;
    vec4 _509 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_20, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.z) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.w) + cbTextureTilingScale._m0[12u].w));
    float _538 = (TEXCOORD_5.x - ((cbMtdParam._m0[15u].w * (1.0 - TEXCOORD_5.x)) * (texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[18u].x * TEXCOORD.z) + cbTextureTilingScale._m0[18u].z, (cbTextureTilingScale._m0[18u].y * TEXCOORD.w) + cbTextureTilingScale._m0[18u].w)).x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[15u].z + 1.0);
    float _3684 = isnan(0.0) ? _538 : (isnan(_538) ? 0.0 : max(_538, 0.0));
    float _539 = isnan(1.0) ? _3684 : (isnan(_3684) ? 1.0 : min(_3684, 1.0));
    float _546 = (_539 * ((_509.x * cbMtdParam._m0[14u].x) - _483)) + _483;
    float _547 = (_539 * ((_509.y * cbMtdParam._m0[14u].y) - _486)) + _486;
    float _548 = (_539 * ((_509.z * cbMtdParam._m0[14u].z) - _489)) + _489;
    vec4 _561 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * _269) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _271) + cbTextureTilingScale._m0[5u].w));
    float _563 = _561.x;
    float _581 = ((texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w)).x - _563) * _366) + _563;
    float _598 = ((texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w)).x - _581) * _407) + _581;
    float _615 = ((texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w)).x - _598) * _447) + _598;
    float _619 = (_615 - (_615 * TEXCOORD_5.x)) * cbMtdParam._m0[18u].y;
    vec4 _632 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.z) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.w) + cbTextureTilingScale._m0[3u].w));
    vec4 _654 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[14u].x * _269) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _271) + cbTextureTilingScale._m0[14u].w));
    float _656 = _654.x;
    float _657 = _654.y;
    float _660 = cbMtdParam._m0[17u].y * _654.z;
    vec4 _672 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * TEXCOORD.x) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * TEXCOORD.y) + cbTextureTilingScale._m0[15u].w));
    float _681 = (((cbMtdParam._m0[17u].x * _672.z) - _660) * _366) + _660;
    vec4 _694 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_15, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _706 = (((cbMtdParam._m0[16u].w * _694.z) - _681) * _407) + _681;
    vec4 _719 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _728 = (((cbMtdParam._m0[16u].z * _719.z) - _706) * _447) + _706;
    float _733 = ((cbMtdParam._m0[16u].x * TEXCOORD_5.x) * ((_632.z * cbMtdParam._m0[17u].z) - _728)) + _728;
    float _738 = ((_672.x - _656) * _366) + _656;
    float _739 = ((_672.y - _657) * _366) + _657;
    float _744 = ((_694.x - _738) * _407) + _738;
    float _745 = ((_694.y - _739) * _407) + _739;
    float _754 = ((((_719.x - _744) * _447) + _744) * 2.0) + (-1.0);
    float _755 = ((((_719.y - _745) * _447) + _745) * 2.0) + (-1.0);
    float _756 = dot(vec2(_754, _755), vec2(_754, _755));
    float _3695 = isnan(0.0) ? _756 : (isnan(_756) ? 0.0 : max(_756, 0.0));
    float _761 = sqrt(1.0 - (isnan(1.0) ? _3695 : (isnan(_3695) ? 1.0 : min(_3695, 1.0))));
    float _767 = ((((_632.x * 2.0) + (-1.0)) * TEXCOORD_5.x) * cbMtdParam._m0[15u].y) + _754;
    float _768 = ((((_632.y * 2.0) + (-1.0)) * TEXCOORD_5.y) * cbMtdParam._m0[15u].y) + _755;
    float _771 = fma(_761, _228 * NORMAL.x, fma(_768, _235 * TANGENT.x, (_221 * _213) * _767));
    float _774 = fma(_761, _228 * NORMAL.y, fma(_768, _235 * TANGENT.y, (_221 * _214) * _767));
    float _777 = fma(_761, _228 * NORMAL.z, fma(_768, _235 * TANGENT.z, (_221 * _215) * _767));
    float _781 = inversesqrt(dot(vec3(_771, _774, _777), vec3(_771, _774, _777)));
    float _782 = _781 * _771;
    float _783 = _781 * _774;
    float _784 = _781 * _777;
    float _3706 = isnan(0.0) ? _733 : (isnan(_733) ? 0.0 : max(_733, 0.0));
    float _785 = isnan(1.0) ? _3706 : (isnan(_3706) ? 1.0 : min(_3706, 1.0));
    float _3717 = isnan(0.0) ? _546 : (isnan(_546) ? 0.0 : max(_546, 0.0));
    float _3728 = isnan(0.0) ? _547 : (isnan(_547) ? 0.0 : max(_547, 0.0));
    float _3739 = isnan(0.0) ? _548 : (isnan(_548) ? 0.0 : max(_548, 0.0));
    float _3750 = isnan(0.0) ? _619 : (isnan(_619) ? 0.0 : max(_619, 0.0));
    float _789 = isnan(1.0) ? _3750 : (isnan(_3750) ? 1.0 : min(_3750, 1.0));
    float _805 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _845 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _855 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _845);
    float _856 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _845);
    float _857 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _845);
    float _861 = inversesqrt(dot(vec3(_855, _856, _857), vec3(_855, _856, _857)));
    float _862 = _855 * _861;
    float _863 = _856 * _861;
    float _864 = _857 * _861;
    float _870 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _871 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _889 = fma(_784, cbSceneParam._m0[5u].z, fma(_783, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _782));
    float _892 = fma(_784, cbSceneParam._m0[6u].z, fma(_783, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _782));
    float _895 = fma(_784, cbSceneParam._m0[7u].z, fma(_783, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _782));
    uint _908 = uint(roundEven(NORMAL.w)) * 13u;
    uint _910 = (_908 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _916 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3717 : (isnan(_3717) ? 1.0 : min(_3717, 1.0)))) * cbInstanceData._m0[_910].x;
    float _917 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3728 : (isnan(_3728) ? 1.0 : min(_3728, 1.0)))) * cbInstanceData._m0[_910].y;
    float _918 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3739 : (isnan(_3739) ? 1.0 : min(_3739, 1.0)))) * cbInstanceData._m0[_910].z;
    float _3761 = isnan(0.0) ? _916 : (isnan(_916) ? 0.0 : max(_916, 0.0));
    float _919 = isnan(1.0) ? _3761 : (isnan(_3761) ? 1.0 : min(_3761, 1.0));
    float _3772 = isnan(0.0) ? _917 : (isnan(_917) ? 0.0 : max(_917, 0.0));
    float _920 = isnan(1.0) ? _3772 : (isnan(_3772) ? 1.0 : min(_3772, 1.0));
    float _3783 = isnan(0.0) ? _918 : (isnan(_918) ? 0.0 : max(_918, 0.0));
    float _921 = isnan(1.0) ? _3783 : (isnan(_3783) ? 1.0 : min(_3783, 1.0));
    float _922 = 1.0 - _789;
    float _923 = _919 * _922;
    float _924 = _920 * _922;
    float _925 = _921 * _922;
    float _930 = (_919 + (-0.039999999105930328369140625)) * _789;
    float _931 = (_920 + (-0.039999999105930328369140625)) * _789;
    float _932 = (_921 + (-0.039999999105930328369140625)) * _789;
    float _933 = _930 + 0.039999999105930328369140625;
    float _935 = _931 + 0.039999999105930328369140625;
    float _936 = _932 + 0.039999999105930328369140625;
    vec4 _945 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _870, cbSceneParam._m0[86u].y * _871));
    float _948 = _945.x * TEXCOORD_5.w;
    float _949 = dot(vec3(_782, _783, _784), vec3(_862, _863, _864));
    float _952 = _949 * 2.0;
    float _956 = (_952 * _782) - _862;
    float _957 = (_952 * _783) - _863;
    float _958 = (_952 * _784) - _864;
    float _962 = abs(dot(vec3(_862, _863, _864), vec3(_782, _783, _784)));
    float _3794 = isnan(0.0) ? _962 : (isnan(_962) ? 0.0 : max(_962, 0.0));
    float _964 = sqrt(_785);
    float _977 = exp2((_964 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3794 : (isnan(_3794) ? 1.0 : min(_3794, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_964 * 3.0));
    float _983 = (1.0 - _977) * ((_964 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _984 = _977 * _964;
    float _1012 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1016 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1020 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1322;
    float _1324;
    float _1325;
    float _1326;
    float _1327;
    float _1328;
    float _1329;
    float _1330;
    float _1331;
    float _1332;
    float _1333;
    float _1334;
    float _1335;
    float _1336;
    float _1337;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1047 = fma(_1020, cbModelParam._m0[26u].z, fma(_1016, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1012));
        float _1051 = fma(_1020, cbModelParam._m0[27u].z, fma(_1016, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1012));
        float _1055 = fma(_1020, cbModelParam._m0[28u].z, fma(_1016, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1012));
        float _1080 = _1012 + _782;
        float _1081 = _1016 + _783;
        float _1082 = _1020 + _784;
        float _1092 = fma(_1082, cbModelParam._m0[26u].z, fma(_1081, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1080)) - _1047;
        float _1093 = fma(_1082, cbModelParam._m0[27u].z, fma(_1081, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1080)) - _1051;
        float _1094 = fma(_1082, cbModelParam._m0[28u].z, fma(_1081, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1080)) - _1055;
        float _1098 = inversesqrt(dot(vec3(_1092, _1093, _1094), vec3(_1092, _1093, _1094)));
        float _1111 = ((_1098 * _1092) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1047 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1112 = ((_1098 * _1093) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1051 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1113 = ((_1098 * _1094) / cbModelParam._m0[34u].z) + ((((((_1055 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1116 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1111, _1112, _1113), 0.0);
        vec4 _1123 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1111, _1112, _1113), 0.0);
        vec4 _1130 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1111, _1112, _1113), 0.0);
        vec4 _1137 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1111, _1112, _1113), 0.0);
        float _1150 = exp2((_1116.w + (-0.5)) * 20.0) * 2.0;
        float _1151 = _1150 * (_1116.x + (-0.5));
        float _1152 = _1150 * (_1116.y + (-0.5));
        float _1153 = _1150 * (_1116.z + (-0.5));
        float _1160 = exp2((_1123.w + (-0.5)) * 20.0) * 2.0;
        float _1161 = _1160 * (_1123.x + (-0.5));
        float _1162 = _1160 * (_1123.y + (-0.5));
        float _1163 = _1160 * (_1123.z + (-0.5));
        float _1170 = exp2((_1130.w + (-0.5)) * 20.0) * 2.0;
        float _1171 = _1170 * (_1130.x + (-0.5));
        float _1172 = _1170 * (_1130.y + (-0.5));
        float _1173 = _1170 * (_1130.z + (-0.5));
        float _1180 = exp2((_1137.w + (-0.5)) * 20.0) * 2.0;
        float _1181 = _1180 * (_1137.x + (-0.5));
        float _1182 = _1180 * (_1137.y + (-0.5));
        float _1183 = _1180 * (_1137.z + (-0.5));
        float _1184 = isnan(0.0) ? _1181 : (isnan(_1181) ? 0.0 : max(_1181, 0.0));
        float _1185 = isnan(0.0) ? _1182 : (isnan(_1182) ? 0.0 : max(_1182, 0.0));
        float _1186 = isnan(0.0) ? _1183 : (isnan(_1183) ? 0.0 : max(_1183, 0.0));
        float _1187 = _1151 * 0.5;
        float _1188 = _1161 * 0.5;
        float _1189 = _1171 * 0.5;
        float _1190 = dot(vec3(_1187, _1188, _1189), vec3(_1187, _1188, _1189));
        float _1195 = (_1190 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1190);
        float _1204 = (dot(vec3(_782, _783, _784), vec3(_1195 * _1187, _1195 * _1188, _1195 * _1189)) + 1.0) * 0.5;
        float _3820 = isnan(0.0) ? _1204 : (isnan(_1204) ? 0.0 : max(_1204, 0.0));
        float _1214 = sqrt(((_1188 * _1188) + (_1187 * _1187)) + (_1189 * _1189)) / (_1184 + 9.9999997473787516355514526367188e-06);
        float _3831 = isnan(0.0) ? _1214 : (isnan(_1214) ? 0.0 : max(_1214, 0.0));
        float _1215 = isnan(1.0) ? _3831 : (isnan(_3831) ? 1.0 : min(_3831, 1.0));
        float _1216 = _1215 * 2.0;
        float _1220 = (1.0 - _1215) / (_1215 + 1.0);
        float _3842 = isnan(0.0) ? _1220 : (isnan(_1220) ? 0.0 : max(_1220, 0.0));
        float _1221 = isnan(1.0) ? _3842 : (isnan(_3842) ? 1.0 : min(_3842, 1.0));
        float _1230 = ((((1.0 - _1221) * (_1216 + 2.0)) * exp2(log2(isnan(1.0) ? _3820 : (isnan(_3820) ? 1.0 : min(_3820, 1.0))) * (_1216 + 1.0))) + _1221) * _1184;
        float _1231 = _1152 * 0.5;
        float _1232 = _1162 * 0.5;
        float _1233 = _1172 * 0.5;
        float _1234 = dot(vec3(_1231, _1232, _1233), vec3(_1231, _1232, _1233));
        float _1239 = (_1234 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1234);
        float _1247 = (dot(vec3(_782, _783, _784), vec3(_1239 * _1231, _1239 * _1232, _1239 * _1233)) + 1.0) * 0.5;
        float _3853 = isnan(0.0) ? _1247 : (isnan(_1247) ? 0.0 : max(_1247, 0.0));
        float _1256 = sqrt(((_1232 * _1232) + (_1231 * _1231)) + (_1233 * _1233)) / (_1185 + 9.9999997473787516355514526367188e-06);
        float _3864 = isnan(0.0) ? _1256 : (isnan(_1256) ? 0.0 : max(_1256, 0.0));
        float _1257 = isnan(1.0) ? _3864 : (isnan(_3864) ? 1.0 : min(_3864, 1.0));
        float _1258 = _1257 * 2.0;
        float _1262 = (1.0 - _1257) / (_1257 + 1.0);
        float _3875 = isnan(0.0) ? _1262 : (isnan(_1262) ? 0.0 : max(_1262, 0.0));
        float _1263 = isnan(1.0) ? _3875 : (isnan(_3875) ? 1.0 : min(_3875, 1.0));
        float _1272 = ((((1.0 - _1263) * (_1258 + 2.0)) * exp2(log2(isnan(1.0) ? _3853 : (isnan(_3853) ? 1.0 : min(_3853, 1.0))) * (_1258 + 1.0))) + _1263) * _1185;
        float _1273 = _1153 * 0.5;
        float _1274 = _1163 * 0.5;
        float _1275 = _1173 * 0.5;
        float _1276 = dot(vec3(_1273, _1274, _1275), vec3(_1273, _1274, _1275));
        float _1281 = (_1276 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1276);
        float _1289 = (dot(vec3(_782, _783, _784), vec3(_1281 * _1273, _1281 * _1274, _1281 * _1275)) + 1.0) * 0.5;
        float _3886 = isnan(0.0) ? _1289 : (isnan(_1289) ? 0.0 : max(_1289, 0.0));
        float _1298 = sqrt(((_1274 * _1274) + (_1273 * _1273)) + (_1275 * _1275)) / (_1186 + 9.9999997473787516355514526367188e-06);
        float _3897 = isnan(0.0) ? _1298 : (isnan(_1298) ? 0.0 : max(_1298, 0.0));
        float _1299 = isnan(1.0) ? _3897 : (isnan(_3897) ? 1.0 : min(_3897, 1.0));
        float _1300 = _1299 * 2.0;
        float _1304 = (1.0 - _1299) / (_1299 + 1.0);
        float _3908 = isnan(0.0) ? _1304 : (isnan(_1304) ? 0.0 : max(_1304, 0.0));
        float _1305 = isnan(1.0) ? _3908 : (isnan(_3908) ? 1.0 : min(_3908, 1.0));
        float _1314 = ((((1.0 - _1305) * (_1300 + 2.0)) * exp2(log2(isnan(1.0) ? _3886 : (isnan(_3886) ? 1.0 : min(_3886, 1.0))) * (_1300 + 1.0))) + _1305) * _1186;
        _1322 = _1153;
        _1324 = _1152;
        _1325 = _1151;
        _1326 = _1163;
        _1327 = _1162;
        _1328 = _1161;
        _1329 = _1173;
        _1330 = _1172;
        _1331 = _1171;
        _1332 = _1186;
        _1333 = _1185;
        _1334 = _1184;
        _1335 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1230 : (isnan(_1230) ? 0.0 : max(_1230, 0.0)));
        _1336 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1272 : (isnan(_1272) ? 0.0 : max(_1272, 0.0)));
        _1337 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1314 : (isnan(_1314) ? 0.0 : max(_1314, 0.0)));
    }
    else
    {
        _1322 = _1323;
        _1324 = _1323;
        _1325 = _1323;
        _1326 = _1323;
        _1327 = _1323;
        _1328 = _1323;
        _1329 = _1323;
        _1330 = _1323;
        _1331 = _1323;
        _1332 = _1323;
        _1333 = _1323;
        _1334 = _1323;
        _1335 = 0.0;
        _1336 = 0.0;
        _1337 = 0.0;
    }
    float _1632;
    float _1633;
    float _1634;
    float _1635;
    float _1636;
    float _1637;
    float _1638;
    float _1639;
    float _1640;
    float _1641;
    float _1642;
    float _1643;
    float _1644;
    float _1645;
    float _1646;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1363 = fma(_1020, cbModelParam._m0[30u].z, fma(_1016, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1012));
        float _1367 = fma(_1020, cbModelParam._m0[31u].z, fma(_1016, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1012));
        float _1371 = fma(_1020, cbModelParam._m0[32u].z, fma(_1016, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1012));
        float _1394 = _1012 + _782;
        float _1395 = _1016 + _783;
        float _1396 = _1020 + _784;
        float _1406 = fma(_1396, cbModelParam._m0[30u].z, fma(_1395, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1394)) - _1363;
        float _1407 = fma(_1396, cbModelParam._m0[31u].z, fma(_1395, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1394)) - _1367;
        float _1408 = fma(_1396, cbModelParam._m0[32u].z, fma(_1395, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1394)) - _1371;
        float _1412 = inversesqrt(dot(vec3(_1406, _1407, _1408), vec3(_1406, _1407, _1408)));
        float _1425 = ((_1412 * _1406) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1363 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1426 = ((_1412 * _1407) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1367 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1427 = ((_1412 * _1408) / cbModelParam._m0[35u].z) + ((((((_1371 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1429 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1425, _1426, _1427), 0.0);
        vec4 _1436 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1425, _1426, _1427), 0.0);
        vec4 _1443 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1425, _1426, _1427), 0.0);
        vec4 _1450 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1425, _1426, _1427), 0.0);
        float _1462 = exp2((_1429.w + (-0.5)) * 20.0) * 2.0;
        float _1463 = _1462 * (_1429.x + (-0.5));
        float _1464 = _1462 * (_1429.y + (-0.5));
        float _1465 = _1462 * (_1429.z + (-0.5));
        float _1472 = exp2((_1436.w + (-0.5)) * 20.0) * 2.0;
        float _1473 = _1472 * (_1436.x + (-0.5));
        float _1474 = _1472 * (_1436.y + (-0.5));
        float _1475 = _1472 * (_1436.z + (-0.5));
        float _1482 = exp2((_1443.w + (-0.5)) * 20.0) * 2.0;
        float _1483 = _1482 * (_1443.x + (-0.5));
        float _1484 = _1482 * (_1443.y + (-0.5));
        float _1485 = _1482 * (_1443.z + (-0.5));
        float _1492 = exp2((_1450.w + (-0.5)) * 20.0) * 2.0;
        float _1493 = _1492 * (_1450.x + (-0.5));
        float _1494 = _1492 * (_1450.y + (-0.5));
        float _1495 = _1492 * (_1450.z + (-0.5));
        float _1496 = isnan(0.0) ? _1493 : (isnan(_1493) ? 0.0 : max(_1493, 0.0));
        float _1497 = isnan(0.0) ? _1494 : (isnan(_1494) ? 0.0 : max(_1494, 0.0));
        float _1498 = isnan(0.0) ? _1495 : (isnan(_1495) ? 0.0 : max(_1495, 0.0));
        float _1499 = _1463 * 0.5;
        float _1500 = _1473 * 0.5;
        float _1501 = _1483 * 0.5;
        float _1502 = dot(vec3(_1499, _1500, _1501), vec3(_1499, _1500, _1501));
        float _1507 = (_1502 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1502);
        float _1515 = (dot(vec3(_782, _783, _784), vec3(_1507 * _1499, _1507 * _1500, _1507 * _1501)) + 1.0) * 0.5;
        float _3949 = isnan(0.0) ? _1515 : (isnan(_1515) ? 0.0 : max(_1515, 0.0));
        float _1524 = sqrt(((_1500 * _1500) + (_1499 * _1499)) + (_1501 * _1501)) / (_1496 + 9.9999997473787516355514526367188e-06);
        float _3960 = isnan(0.0) ? _1524 : (isnan(_1524) ? 0.0 : max(_1524, 0.0));
        float _1525 = isnan(1.0) ? _3960 : (isnan(_3960) ? 1.0 : min(_3960, 1.0));
        float _1526 = _1525 * 2.0;
        float _1530 = (1.0 - _1525) / (_1525 + 1.0);
        float _3971 = isnan(0.0) ? _1530 : (isnan(_1530) ? 0.0 : max(_1530, 0.0));
        float _1531 = isnan(1.0) ? _3971 : (isnan(_3971) ? 1.0 : min(_3971, 1.0));
        float _1540 = ((((1.0 - _1531) * (_1526 + 2.0)) * exp2(log2(isnan(1.0) ? _3949 : (isnan(_3949) ? 1.0 : min(_3949, 1.0))) * (_1526 + 1.0))) + _1531) * _1496;
        float _1541 = _1464 * 0.5;
        float _1542 = _1474 * 0.5;
        float _1543 = _1484 * 0.5;
        float _1544 = dot(vec3(_1541, _1542, _1543), vec3(_1541, _1542, _1543));
        float _1549 = (_1544 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1544);
        float _1557 = (dot(vec3(_782, _783, _784), vec3(_1549 * _1541, _1549 * _1542, _1549 * _1543)) + 1.0) * 0.5;
        float _3982 = isnan(0.0) ? _1557 : (isnan(_1557) ? 0.0 : max(_1557, 0.0));
        float _1566 = sqrt(((_1542 * _1542) + (_1541 * _1541)) + (_1543 * _1543)) / (_1497 + 9.9999997473787516355514526367188e-06);
        float _3993 = isnan(0.0) ? _1566 : (isnan(_1566) ? 0.0 : max(_1566, 0.0));
        float _1567 = isnan(1.0) ? _3993 : (isnan(_3993) ? 1.0 : min(_3993, 1.0));
        float _1568 = _1567 * 2.0;
        float _1572 = (1.0 - _1567) / (_1567 + 1.0);
        float _4004 = isnan(0.0) ? _1572 : (isnan(_1572) ? 0.0 : max(_1572, 0.0));
        float _1573 = isnan(1.0) ? _4004 : (isnan(_4004) ? 1.0 : min(_4004, 1.0));
        float _1582 = ((((1.0 - _1573) * (_1568 + 2.0)) * exp2(log2(isnan(1.0) ? _3982 : (isnan(_3982) ? 1.0 : min(_3982, 1.0))) * (_1568 + 1.0))) + _1573) * _1497;
        float _1583 = _1465 * 0.5;
        float _1584 = _1475 * 0.5;
        float _1585 = _1485 * 0.5;
        float _1586 = dot(vec3(_1583, _1584, _1585), vec3(_1583, _1584, _1585));
        float _1591 = (_1586 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1586);
        float _1599 = (dot(vec3(_782, _783, _784), vec3(_1591 * _1583, _1591 * _1584, _1591 * _1585)) + 1.0) * 0.5;
        float _4015 = isnan(0.0) ? _1599 : (isnan(_1599) ? 0.0 : max(_1599, 0.0));
        float _1608 = sqrt(((_1584 * _1584) + (_1583 * _1583)) + (_1585 * _1585)) / (_1498 + 9.9999997473787516355514526367188e-06);
        float _4026 = isnan(0.0) ? _1608 : (isnan(_1608) ? 0.0 : max(_1608, 0.0));
        float _1609 = isnan(1.0) ? _4026 : (isnan(_4026) ? 1.0 : min(_4026, 1.0));
        float _1610 = _1609 * 2.0;
        float _1614 = (1.0 - _1609) / (_1609 + 1.0);
        float _4037 = isnan(0.0) ? _1614 : (isnan(_1614) ? 0.0 : max(_1614, 0.0));
        float _1615 = isnan(1.0) ? _4037 : (isnan(_4037) ? 1.0 : min(_4037, 1.0));
        float _1624 = ((((1.0 - _1615) * (_1610 + 2.0)) * exp2(log2(isnan(1.0) ? _4015 : (isnan(_4015) ? 1.0 : min(_4015, 1.0))) * (_1610 + 1.0))) + _1615) * _1498;
        _1632 = _1465;
        _1633 = _1464;
        _1634 = _1463;
        _1635 = _1475;
        _1636 = _1474;
        _1637 = _1473;
        _1638 = _1485;
        _1639 = _1484;
        _1640 = _1483;
        _1641 = _1498;
        _1642 = _1497;
        _1643 = _1496;
        _1644 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1540 : (isnan(_1540) ? 0.0 : max(_1540, 0.0)));
        _1645 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1582 : (isnan(_1582) ? 0.0 : max(_1582, 0.0)));
        _1646 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1624 : (isnan(_1624) ? 0.0 : max(_1624, 0.0)));
    }
    else
    {
        _1632 = _1323;
        _1633 = _1323;
        _1634 = _1323;
        _1635 = _1323;
        _1636 = _1323;
        _1637 = _1323;
        _1638 = _1323;
        _1639 = _1323;
        _1640 = _1323;
        _1641 = _1323;
        _1642 = _1323;
        _1643 = _1323;
        _1644 = 0.0;
        _1645 = 0.0;
        _1646 = 0.0;
    }
    float _1656 = (cbModelParam._m0[1u].x * (_1644 - _1335)) + _1335;
    float _1657 = (cbModelParam._m0[1u].x * (_1645 - _1336)) + _1336;
    float _1658 = (cbModelParam._m0[1u].x * (_1646 - _1337)) + _1337;
    float _1679 = fma(_1658, cbSceneParam._m0[89u].z, fma(_1657, cbSceneParam._m0[89u].y, _1656 * cbSceneParam._m0[89u].x));
    float _1682 = fma(_1658, cbSceneParam._m0[90u].z, fma(_1657, cbSceneParam._m0[90u].y, _1656 * cbSceneParam._m0[90u].x));
    float _1685 = fma(_1658, cbSceneParam._m0[91u].z, fma(_1657, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1656));
    float _1700 = _956 * 0.5;
    float _1701 = _957 * 0.5;
    float _1702 = _958 * 0.5;
    float _1703 = dot(vec4(_1700, _1701, _1702, 1.0), vec4(_1634, _1637, _1640, _1643));
    float _1706 = dot(vec4(_1700, _1701, _1702, 1.0), vec4(_1633, _1636, _1639, _1642));
    float _1709 = dot(vec4(_1700, _1701, _1702, 1.0), vec4(_1632, _1635, _1638, _1641));
    float _1743;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1716 = dot(vec4(_1700, _1701, _1702, 1.0), vec4(_1322, _1326, _1329, _1332));
        float _1720 = dot(vec4(_1700, _1701, _1702, 1.0), vec4(_1324, _1327, _1330, _1333));
        float _1724 = dot(vec4(_1700, _1701, _1702, 1.0), vec4(_1325, _1328, _1331, _1334));
        float _1731 = dot(vec4(cbModelParam._m0[39u]), vec4(_1700, _1701, _1702, 1.0));
        _1743 = dot(vec3(isnan(0.0) ? _1724 : (isnan(_1724) ? 0.0 : max(_1724, 0.0)), isnan(0.0) ? _1720 : (isnan(_1720) ? 0.0 : max(_1720, 0.0)), isnan(0.0) ? _1716 : (isnan(_1716) ? 0.0 : max(_1716, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1731) ? 0.0 : (isnan(0.0) ? _1731 : max(0.0, _1731))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1743 = 1.0;
    }
    float _1754;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1745 = dot(vec4(cbModelParam._m0[40u]), vec4(_1700, _1701, _1702, 1.0));
        _1754 = dot(vec3(isnan(0.0) ? _1703 : (isnan(_1703) ? 0.0 : max(_1703, 0.0)), isnan(0.0) ? _1706 : (isnan(_1706) ? 0.0 : max(_1706, 0.0)), isnan(0.0) ? _1709 : (isnan(_1709) ? 0.0 : max(_1709, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1745) ? 0.0 : (isnan(0.0) ? _1745 : max(0.0, _1745))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1754 = 1.0;
    }
    float _1758 = (_1754 * cbModelParam._m0[1u].x) + (_1743 * (1.0 - cbModelParam._m0[1u].x));
    float _1768 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _785);
    float _1769 = isnan(_1768) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1768 : min(cbModelParam._m0[25u].z, _1768));
    float _1849;
    float _1851;
    float _1853;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1816 = fma(_1020, cbModelParam._m0[13u].z, fma(_1016, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1012)) + cbModelParam._m0[13u].w;
        float _1820 = fma(_1020, cbModelParam._m0[14u].z, fma(_1016, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1012)) + cbModelParam._m0[14u].w;
        float _1824 = fma(_1020, cbModelParam._m0[15u].z, fma(_1016, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1012)) + cbModelParam._m0[15u].w;
        float _1827 = fma(_958, cbModelParam._m0[13u].z, fma(_957, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _956));
        float _1830 = fma(_958, cbModelParam._m0[14u].z, fma(_957, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _956));
        float _1833 = fma(_958, cbModelParam._m0[15u].z, fma(_957, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _956));
        float _1861;
        if (_1827 > 0.0)
        {
            _1861 = abs((1.0 - _1816) / _1827);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1827 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1816 + 1.0) / _1827);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1861 = frontier_phi_14_12_ladder;
        }
        float _2065;
        if (_1830 > 0.0)
        {
            _2065 = abs((1.0 - _1820) / _1830);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1830 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1820 + 1.0) / _1830);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2065 = frontier_phi_23_19_ladder;
        }
        float _2319;
        if (_1833 > 0.0)
        {
            _2319 = abs((1.0 - _1824) / _1833);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1833 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1824 + 1.0) / _1833);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2319 = frontier_phi_35_30_ladder;
        }
        float _2321 = isnan(_2065) ? _1861 : (isnan(_1861) ? _2065 : min(_1861, _2065));
        float _2322 = isnan(_2319) ? _2321 : (isnan(_2321) ? _2319 : min(_2321, _2319));
        float _2326 = (_2322 * _1827) + _1816;
        float _2327 = (_2322 * _1830) + _1820;
        float _2328 = (_2322 * _1833) + _1824;
        float _2329 = _2322 * 9.9999997473787516355514526367188e-05;
        float _2331 = (-1.0) - _2329;
        float _2333 = _2329 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2328 > _2333) || ((_2328 < _2331) || ((_2327 > _2333) || ((_2327 < _2331) || ((_2326 < _2331) || (_2326 > _2333))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2456 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2328, cbModelParam._m0[9u].z, fma(_2327, cbModelParam._m0[9u].y, _2326 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2328, cbModelParam._m0[10u].z, fma(_2327, cbModelParam._m0[10u].y, _2326 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2328, cbModelParam._m0[11u].z, fma(_2327, cbModelParam._m0[11u].y, _2326 * cbModelParam._m0[11u].x))), _1769);
            frontier_phi_13_35_ladder = _2456.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2456.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2456.x * cbModelParam._m0[1u].y;
        }
        _1849 = frontier_phi_13_35_ladder_2;
        _1851 = frontier_phi_13_35_ladder_1;
        _1853 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1837 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_956, _957, _958), _1769);
        _1849 = _1837.x * cbModelParam._m0[1u].y;
        _1851 = _1837.y * cbModelParam._m0[1u].y;
        _1853 = _1837.z * cbModelParam._m0[1u].y;
    }
    float _1857 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _785);
    float _1858 = isnan(_1857) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1857 : min(cbModelParam._m0[25u].w, _1857));
    float _1949;
    float _1951;
    float _1953;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1913 = fma(_1020, cbModelParam._m0[21u].z, fma(_1016, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1012)) + cbModelParam._m0[21u].w;
        float _1917 = fma(_1020, cbModelParam._m0[22u].z, fma(_1016, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1012)) + cbModelParam._m0[22u].w;
        float _1921 = fma(_1020, cbModelParam._m0[23u].z, fma(_1016, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1012)) + cbModelParam._m0[23u].w;
        float _1924 = fma(_958, cbModelParam._m0[21u].z, fma(_957, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _956));
        float _1927 = fma(_958, cbModelParam._m0[22u].z, fma(_957, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _956));
        float _1930 = fma(_958, cbModelParam._m0[23u].z, fma(_957, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _956));
        float _2070;
        if (_1924 > 0.0)
        {
            _2070 = abs((1.0 - _1913) / _1924);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1924 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1913 + 1.0) / _1924);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2070 = frontier_phi_25_21_ladder;
        }
        float _2346;
        if (_1927 > 0.0)
        {
            _2346 = abs((1.0 - _1917) / _1927);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1927 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1917 + 1.0) / _1927);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2346 = frontier_phi_37_32_ladder;
        }
        float _2559;
        if (_1930 > 0.0)
        {
            _2559 = abs((1.0 - _1921) / _1930);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1930 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1921 + 1.0) / _1930);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2559 = frontier_phi_46_43_ladder;
        }
        float _2561 = isnan(_2346) ? _2070 : (isnan(_2070) ? _2346 : min(_2070, _2346));
        float _2562 = isnan(_2559) ? _2561 : (isnan(_2561) ? _2559 : min(_2561, _2559));
        float _2566 = (_2562 * _1924) + _1913;
        float _2567 = (_2562 * _1927) + _1917;
        float _2568 = (_2562 * _1930) + _1921;
        float _2569 = _2562 * 9.9999997473787516355514526367188e-05;
        float _2570 = (-1.0) - _2569;
        float _2572 = _2569 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2568 > _2572) || ((_2568 < _2570) || ((_2567 > _2572) || ((_2567 < _2570) || ((_2566 < _2570) || (_2566 > _2572))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2767 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2568, cbModelParam._m0[17u].z, fma(_2567, cbModelParam._m0[17u].y, _2566 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2568, cbModelParam._m0[18u].z, fma(_2567, cbModelParam._m0[18u].y, _2566 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2568, cbModelParam._m0[19u].z, fma(_2567, cbModelParam._m0[19u].y, _2566 * cbModelParam._m0[19u].x))), _1858);
            frontier_phi_22_46_ladder = _2767.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2767.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2767.x * cbModelParam._m0[1u].z;
        }
        _1949 = frontier_phi_22_46_ladder_2;
        _1951 = frontier_phi_22_46_ladder_1;
        _1953 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1933 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_956, _957, _958), _1858);
        _1949 = _1933.x * cbModelParam._m0[1u].z;
        _1951 = _1933.y * cbModelParam._m0[1u].z;
        _1953 = _1933.z * cbModelParam._m0[1u].z;
    }
    float _1966 = (((_983 * _933) + _984) * _948) * ((cbModelParam._m0[1u].w * (_1949 - _1849)) + _1849);
    float _1968 = (((_983 * _935) + _984) * _948) * ((cbModelParam._m0[1u].w * (_1951 - _1851)) + _1851);
    float _1970 = (((_983 * _936) + _984) * _948) * ((cbModelParam._m0[1u].w * (_1953 - _1853)) + _1853);
    float _1973 = fma(_1970, cbSceneParam._m0[89u].z, fma(_1968, cbSceneParam._m0[89u].y, _1966 * cbSceneParam._m0[89u].x));
    float _1976 = fma(_1970, cbSceneParam._m0[90u].z, fma(_1968, cbSceneParam._m0[90u].y, _1966 * cbSceneParam._m0[90u].x));
    float _1979 = fma(_1970, cbSceneParam._m0[91u].z, fma(_1968, cbSceneParam._m0[91u].y, _1966 * cbSceneParam._m0[91u].x));
    uvec4 _1989 = floatBitsToUint(cbInstanceData._m0[_908 + 5u]);
    uint _1991 = _1989.x * 14u;
    uint _1992 = _1991 + 13u;
    float _1999 = _948 + (-1.0);
    float _2004 = (cbLight._m0[_1992].x * _1999) + 1.0;
    float _2005 = (cbLight._m0[_1992].y * _1999) + 1.0;
    float _2006 = (cbLight._m0[_1992].z * _1999) + 1.0;
    float _2007 = (cbLight._m0[_1992].w * _1999) + 1.0;
    uint _2008 = _1991 + 5u;
    float _2014 = isnan(1.0) ? _2005 : (isnan(_2005) ? 1.0 : min(_2005, 1.0));
    uint _2018 = _1991 + 4u;
    float _2024 = isnan(1.0) ? _2004 : (isnan(_2004) ? 1.0 : min(_2004, 1.0));
    uint _2028 = _1991 | 1u;
    float _2039 = dot(vec3(cbLight._m0[_1991].xyz), vec3(_782, _783, _784));
    float _2042 = dot(vec3(cbLight._m0[_2028].xyz), vec3(_782, _783, _784));
    float _4173 = isnan(0.0) ? _2039 : (isnan(_2039) ? 0.0 : max(_2039, 0.0));
    float _4184 = isnan(0.0) ? _2042 : (isnan(_2042) ? 0.0 : max(_2042, 0.0));
    float _2047 = (isnan(1.0) ? _4173 : (isnan(_4173) ? 1.0 : min(_4173, 1.0))) * 0.3183098733425140380859375;
    float _2049 = (isnan(1.0) ? _4184 : (isnan(_4184) ? 1.0 : min(_4184, 1.0))) * 0.3183098733425140380859375;
    float _2056 = ((cbLight._m0[_2008].x * _2014) * _2049) + ((cbLight._m0[_2018].x * _2024) * _2047);
    float _2057 = ((_2014 * cbLight._m0[_2008].y) * _2049) + ((_2024 * cbLight._m0[_2018].y) * _2047);
    float _2058 = ((_2014 * cbLight._m0[_2008].z) * _2049) + ((_2024 * cbLight._m0[_2018].z) * _2047);
    uvec4 _2062 = floatBitsToUint(cbLight._m0[_1991 + 12u]);
    bool _2064 = _2062.x == 0u;
    float _2075;
    float _2077;
    float _2079;
    if (_2064)
    {
        _2075 = _2056;
        _2077 = _2057;
        _2079 = _2058;
    }
    else
    {
        uint _2083 = _1991 + 6u;
        float _2099 = (dot(vec3(cbLight._m0[_1991 + 2u].xyz), vec3(_782, _783, _784)) * 0.5) + 0.5;
        float _2100 = _2099 * _2099;
        float _4195 = isnan(0.0) ? _2100 : (isnan(_2100) ? 0.0 : max(_2100, 0.0));
        float _2101 = isnan(1.0) ? _4195 : (isnan(_4195) ? 1.0 : min(_4195, 1.0));
        float _2102 = isnan(1.0) ? _2006 : (isnan(_2006) ? 1.0 : min(_2006, 1.0));
        _2075 = (((cbLight._m0[_2083].x * 0.3183098733425140380859375) * _2101) * _2102) + _2056;
        _2077 = (((cbLight._m0[_2083].y * 0.3183098733425140380859375) * _2101) * _2102) + _2057;
        _2079 = (((cbLight._m0[_2083].z * 0.3183098733425140380859375) * _2101) * _2102) + _2058;
    }
    bool _2082 = _2062.y == 0u;
    float _2120;
    float _2122;
    float _2124;
    if (_2082)
    {
        _2120 = _2075;
        _2122 = _2077;
        _2124 = _2079;
    }
    else
    {
        uint _2290 = _1991 + 7u;
        float _2306 = (dot(vec3(cbLight._m0[_1991 + 3u].xyz), vec3(_782, _783, _784)) * 0.5) + 0.5;
        float _2307 = _2306 * _2306;
        float _4211 = isnan(0.0) ? _2307 : (isnan(_2307) ? 0.0 : max(_2307, 0.0));
        float _2308 = isnan(1.0) ? _4211 : (isnan(_4211) ? 1.0 : min(_4211, 1.0));
        float _2309 = isnan(1.0) ? _2007 : (isnan(_2007) ? 1.0 : min(_2007, 1.0));
        _2120 = (((cbLight._m0[_2290].x * 0.3183098733425140380859375) * _2308) * _2309) + _2075;
        _2122 = (((cbLight._m0[_2290].y * 0.3183098733425140380859375) * _2308) * _2309) + _2077;
        _2124 = (((cbLight._m0[_2290].z * 0.3183098733425140380859375) * _2308) * _2309) + _2079;
    }
    uint _2127 = _1991 + 8u;
    float _2140 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1991].w)) * _785) * 0.949999988079071044921875);
    float _2141 = _2140 * _2140;
    float _2142 = cbLight._m0[_1991].x + _862;
    float _2143 = cbLight._m0[_1991].y + _863;
    float _2144 = cbLight._m0[_1991].z + _864;
    float _2148 = inversesqrt(dot(vec3(_2142, _2143, _2144), vec3(_2142, _2143, _2144)));
    float _2149 = _2148 * _2142;
    float _2150 = _2148 * _2143;
    float _2151 = _2148 * _2144;
    float _2152 = dot(vec3(_782, _783, _784), vec3(cbLight._m0[_1991].xyz));
    float _4227 = isnan(0.0) ? _2152 : (isnan(_2152) ? 0.0 : max(_2152, 0.0));
    float _2155 = isnan(1.0) ? _4227 : (isnan(_4227) ? 1.0 : min(_4227, 1.0));
    float _4238 = isnan(0.0) ? _949 : (isnan(_949) ? 0.0 : max(_949, 0.0));
    float _2156 = isnan(1.0) ? _4238 : (isnan(_4238) ? 1.0 : min(_4238, 1.0));
    float _2157 = dot(vec3(_782, _783, _784), vec3(_2149, _2150, _2151));
    float _4249 = isnan(0.0) ? _2157 : (isnan(_2157) ? 0.0 : max(_2157, 0.0));
    float _2160 = isnan(1.0) ? _4249 : (isnan(_4249) ? 1.0 : min(_4249, 1.0));
    float _2161 = dot(vec3(cbLight._m0[_1991].xyz), vec3(_2149, _2150, _2151));
    float _4260 = isnan(0.0) ? _2161 : (isnan(_2161) ? 0.0 : max(_2161, 0.0));
    float _2165 = _2141 * _2141;
    float _2169 = ((_2160 * _2160) * (_2165 + (-1.0))) + 1.0;
    float _2177 = exp2(log2(1.0 - (isnan(1.0) ? _4260 : (isnan(_4260) ? 1.0 : min(_4260, 1.0)))) * 5.0);
    float _2178 = 0.959999978542327880859375 - _930;
    float _2180 = 0.959999978542327880859375 - _931;
    float _2181 = 0.959999978542327880859375 - _932;
    float _2188 = 1.0 - _2141;
    float _2199 = (0.5 / (((_2156 * ((_2155 * _2188) + _2141)) + 9.9999999392252902907785028219223e-09) + (((_2156 * _2188) + _2141) * _2155))) * _2155;
    float _4271 = isnan(0.0) ? _2199 : (isnan(_2199) ? 0.0 : max(_2199, 0.0));
    float _2201 = (isnan(1.0) ? _4271 : (isnan(_4271) ? 1.0 : min(_4271, 1.0))) * (_2165 / ((_2169 * _2169) * 3.141590118408203125));
    uint _2212 = _1991 + 9u;
    float _2223 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2028].w)) * _785) * 0.949999988079071044921875);
    float _2224 = _2223 * _2223;
    float _2225 = cbLight._m0[_2028].x + _862;
    float _2226 = cbLight._m0[_2028].y + _863;
    float _2227 = cbLight._m0[_2028].z + _864;
    float _2231 = inversesqrt(dot(vec3(_2225, _2226, _2227), vec3(_2225, _2226, _2227)));
    float _2232 = _2231 * _2225;
    float _2233 = _2231 * _2226;
    float _2234 = _2231 * _2227;
    float _2235 = dot(vec3(_782, _783, _784), vec3(cbLight._m0[_2028].xyz));
    float _4282 = isnan(0.0) ? _2235 : (isnan(_2235) ? 0.0 : max(_2235, 0.0));
    float _2238 = isnan(1.0) ? _4282 : (isnan(_4282) ? 1.0 : min(_4282, 1.0));
    float _2239 = dot(vec3(_782, _783, _784), vec3(_2232, _2233, _2234));
    float _4293 = isnan(0.0) ? _2239 : (isnan(_2239) ? 0.0 : max(_2239, 0.0));
    float _2242 = isnan(1.0) ? _4293 : (isnan(_4293) ? 1.0 : min(_4293, 1.0));
    float _2243 = dot(vec3(cbLight._m0[_2028].xyz), vec3(_2232, _2233, _2234));
    float _4304 = isnan(0.0) ? _2243 : (isnan(_2243) ? 0.0 : max(_2243, 0.0));
    float _2247 = _2224 * _2224;
    float _2251 = ((_2242 * _2242) * (_2247 + (-1.0))) + 1.0;
    float _2258 = exp2(log2(1.0 - (isnan(1.0) ? _4304 : (isnan(_4304) ? 1.0 : min(_4304, 1.0)))) * 5.0);
    float _2265 = 1.0 - _2224;
    float _2275 = (0.5 / (((_2156 * ((_2238 * _2265) + _2224)) + 9.9999999392252902907785028219223e-09) + (((_2156 * _2265) + _2224) * _2238))) * _2238;
    float _4315 = isnan(0.0) ? _2275 : (isnan(_2275) ? 0.0 : max(_2275, 0.0));
    float _2277 = (isnan(1.0) ? _4315 : (isnan(_4315) ? 1.0 : min(_4315, 1.0))) * (_2247 / ((_2251 * _2251) * 3.141590118408203125));
    float _2287 = (((((_2258 * _2178) + _933) * cbLight._m0[_2212].x) * _2277) * _2014) + (((((_2177 * _2178) + _933) * cbLight._m0[_2127].x) * _2201) * _2024);
    float _2288 = (((((_2258 * _2180) + _935) * cbLight._m0[_2212].y) * _2277) * _2014) + (((((_2177 * _2180) + _935) * cbLight._m0[_2127].y) * _2201) * _2024);
    float _2289 = (((((_2258 * _2181) + _936) * cbLight._m0[_2212].z) * _2277) * _2014) + (((((_2177 * _2181) + _936) * cbLight._m0[_2127].z) * _2201) * _2024);
    float _2351;
    float _2353;
    float _2355;
    if (_2064)
    {
        _2351 = _2287;
        _2353 = _2288;
        _2355 = _2289;
    }
    else
    {
        uint _2357 = _1991 + 2u;
        uint _2361 = _1991 + 10u;
        float _2375 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2357].w)) * _785) * 0.949999988079071044921875);
        float _2376 = _2375 * _2375;
        float _2377 = cbLight._m0[_2357].x + _862;
        float _2378 = cbLight._m0[_2357].y + _863;
        float _2379 = cbLight._m0[_2357].z + _864;
        float _2383 = inversesqrt(dot(vec3(_2377, _2378, _2379), vec3(_2377, _2378, _2379)));
        float _2384 = _2383 * _2377;
        float _2385 = _2383 * _2378;
        float _2386 = _2383 * _2379;
        float _2387 = dot(vec3(_782, _783, _784), vec3(cbLight._m0[_2357].xyz));
        float _4326 = isnan(0.0) ? _2387 : (isnan(_2387) ? 0.0 : max(_2387, 0.0));
        float _2390 = isnan(1.0) ? _4326 : (isnan(_4326) ? 1.0 : min(_4326, 1.0));
        float _2391 = dot(vec3(_782, _783, _784), vec3(_2384, _2385, _2386));
        float _4337 = isnan(0.0) ? _2391 : (isnan(_2391) ? 0.0 : max(_2391, 0.0));
        float _2394 = isnan(1.0) ? _4337 : (isnan(_4337) ? 1.0 : min(_4337, 1.0));
        float _2395 = dot(vec3(cbLight._m0[_2357].xyz), vec3(_2384, _2385, _2386));
        float _4348 = isnan(0.0) ? _2395 : (isnan(_2395) ? 0.0 : max(_2395, 0.0));
        float _2399 = _2376 * _2376;
        float _2403 = ((_2394 * _2394) * (_2399 + (-1.0))) + 1.0;
        float _2410 = exp2(log2(1.0 - (isnan(1.0) ? _4348 : (isnan(_4348) ? 1.0 : min(_4348, 1.0)))) * 5.0);
        float _2417 = 1.0 - _2376;
        float _2427 = (0.5 / (((_2156 * ((_2390 * _2417) + _2376)) + 9.9999999392252902907785028219223e-09) + (((_2156 * _2417) + _2376) * _2390))) * _2390;
        float _4359 = isnan(0.0) ? _2427 : (isnan(_2427) ? 0.0 : max(_2427, 0.0));
        float _2429 = (isnan(1.0) ? _4359 : (isnan(_4359) ? 1.0 : min(_4359, 1.0))) * (_2399 / ((_2403 * _2403) * 3.141590118408203125));
        float _2430 = isnan(1.0) ? _2006 : (isnan(_2006) ? 1.0 : min(_2006, 1.0));
        _2351 = (((((_2410 * _2178) + _933) * cbLight._m0[_2361].x) * _2429) * _2430) + _2287;
        _2353 = (((((_2410 * _2180) + _935) * cbLight._m0[_2361].y) * _2429) * _2430) + _2288;
        _2355 = (((((_2410 * _2181) + _936) * cbLight._m0[_2361].z) * _2429) * _2430) + _2289;
    }
    float _2465;
    float _2467;
    float _2469;
    if (_2082)
    {
        _2465 = _2351;
        _2467 = _2353;
        _2469 = _2355;
    }
    else
    {
        uint _2476 = _1991 + 3u;
        uint _2480 = _1991 + 11u;
        float _2494 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2476].w)) * _785) * 0.949999988079071044921875);
        float _2495 = _2494 * _2494;
        float _2496 = cbLight._m0[_2476].x + _862;
        float _2497 = cbLight._m0[_2476].y + _863;
        float _2498 = cbLight._m0[_2476].z + _864;
        float _2502 = inversesqrt(dot(vec3(_2496, _2497, _2498), vec3(_2496, _2497, _2498)));
        float _2503 = _2502 * _2496;
        float _2504 = _2502 * _2497;
        float _2505 = _2502 * _2498;
        float _2506 = dot(vec3(_782, _783, _784), vec3(cbLight._m0[_2476].xyz));
        float _4375 = isnan(0.0) ? _2506 : (isnan(_2506) ? 0.0 : max(_2506, 0.0));
        float _2509 = isnan(1.0) ? _4375 : (isnan(_4375) ? 1.0 : min(_4375, 1.0));
        float _2510 = dot(vec3(_782, _783, _784), vec3(_2503, _2504, _2505));
        float _4386 = isnan(0.0) ? _2510 : (isnan(_2510) ? 0.0 : max(_2510, 0.0));
        float _2513 = isnan(1.0) ? _4386 : (isnan(_4386) ? 1.0 : min(_4386, 1.0));
        float _2514 = dot(vec3(cbLight._m0[_2476].xyz), vec3(_2503, _2504, _2505));
        float _4397 = isnan(0.0) ? _2514 : (isnan(_2514) ? 0.0 : max(_2514, 0.0));
        float _2518 = _2495 * _2495;
        float _2522 = ((_2513 * _2513) * (_2518 + (-1.0))) + 1.0;
        float _2529 = exp2(log2(1.0 - (isnan(1.0) ? _4397 : (isnan(_4397) ? 1.0 : min(_4397, 1.0)))) * 5.0);
        float _2536 = 1.0 - _2495;
        float _2546 = (0.5 / (((_2156 * ((_2509 * _2536) + _2495)) + 9.9999999392252902907785028219223e-09) + (((_2156 * _2536) + _2495) * _2509))) * _2509;
        float _4408 = isnan(0.0) ? _2546 : (isnan(_2546) ? 0.0 : max(_2546, 0.0));
        float _2548 = (isnan(1.0) ? _4408 : (isnan(_4408) ? 1.0 : min(_4408, 1.0))) * (_2518 / ((_2522 * _2522) * 3.141590118408203125));
        float _2549 = isnan(1.0) ? _2007 : (isnan(_2007) ? 1.0 : min(_2007, 1.0));
        _2465 = (((((_2529 * _2178) + _933) * cbLight._m0[_2480].x) * _2548) * _2549) + _2351;
        _2467 = (((((_2529 * _2180) + _935) * cbLight._m0[_2480].y) * _2548) * _2549) + _2353;
        _2469 = (((((_2529 * _2181) + _936) * cbLight._m0[_2480].z) * _2548) * _2549) + _2355;
    }
    float _2684;
    float _2686;
    float _2688;
    float _2690;
    float _2692;
    float _2694;
    if (_1989.y == 0u)
    {
        float _2624 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2625 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2624;
        float _2626 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2624;
        float _2627 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2624;
        uvec4 _2639 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2640 = _2639.x;
        uint _2651 = uint((float(_2639.y) * floor(float(uint(cbSceneParam._m0[85u].y * _871) / _2640))) + floor(float(uint(cbSceneParam._m0[85u].x * _870) / _2640)));
        float _2661 = (log2(_2627 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2662 = isnan(0.0) ? _2661 : (isnan(_2661) ? 0.0 : max(_2661, 0.0));
        uint _2665 = uint(isnan(14.0) ? _2662 : (isnan(_2662) ? 14.0 : min(_2662, 14.0)));
        uvec4 _2670 = texelFetch(g_lightClusterGridBuffer, int(((_2665 << 2u) + (_2651 << 6u)) >> 2u));
        uint _2671 = _2670.x;
        uint _2672 = _2639.z;
        float _2772;
        float _2774;
        float _2776;
        float _2778;
        float _2780;
        float _2782;
        if (((((1u << ((_2672 >> 4u) & 15u)) + 4294967295u) & _2671) == 0u) || ((_2672 & 240u) == 0u))
        {
            _2772 = 0.0;
            _2774 = 0.0;
            _2776 = 0.0;
            _2778 = 0.0;
            _2780 = 0.0;
            _2782 = 0.0;
        }
        else
        {
            float _2773;
            float _2775;
            float _2777;
            float _2779;
            float _2781;
            float _2783;
            float _2916 = 0.0;
            float _2917 = 0.0;
            float _2918 = 0.0;
            float _2919 = 0.0;
            float _2920 = 0.0;
            float _2921 = 0.0;
            uint _2922 = 0u;
            uint _2931;
            bool _2932;
            for (;;)
            {
                _2931 = texelFetch(g_lightClassification, int((((_2665 << 5u) + (_2651 << 9u)) + (_2922 << 2u)) >> 2u)).x;
                _2932 = _2931 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2932)
                {
                    frontier_phi_61_pred = _2916;
                    frontier_phi_61_pred_1 = _2921;
                    frontier_phi_61_pred_2 = _2920;
                    frontier_phi_61_pred_3 = _2919;
                    frontier_phi_61_pred_4 = _2918;
                    frontier_phi_61_pred_5 = _2917;
                }
                else
                {
                    float _3040;
                    float _3041;
                    float _3042;
                    float _3043;
                    float _3044;
                    float _3045;
                    uint _3046;
                    _3040 = _2916;
                    _3041 = _2917;
                    _3042 = _2918;
                    _3043 = _2919;
                    _3044 = _2920;
                    _3045 = _2921;
                    _3046 = _2931;
                    float _2972;
                    float _2973;
                    float _2974;
                    float _2975;
                    float _2976;
                    float _2977;
                    for (;;)
                    {
                        uint _3050 = uint(findLSB(_3046)) + (_2922 << 5u);
                        uint _3047 = (_3046 + 4294967295u) & _3046;
                        uint _3052 = _3050 * 48u;
                        vec4 _3066 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3052)).x, texelFetch(g_PointLightRenderingBuffer, int(_3052 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3052 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3052 + 3u)).x));
                        uint _3072 = (_3050 * 48u) + 4u;
                        vec4 _3085 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3072)).x, texelFetch(g_PointLightRenderingBuffer, int(_3072 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3072 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3072 + 3u)).x));
                        uint _3091 = (_3050 * 48u) + 8u;
                        vec3 _3102 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3091)).x, texelFetch(g_PointLightRenderingBuffer, int(_3091 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3091 + 2u)).x));
                        float _3106 = _3066.x - _2625;
                        float _3107 = _3066.y - _2626;
                        float _3108 = _3066.z - _2627;
                        float _3109 = dot(vec3(_3106, _3107, _3108), vec3(_3106, _3107, _3108));
                        float _3112 = inversesqrt(_3109);
                        float _3113 = _3112 * _3106;
                        float _3114 = _3112 * _3107;
                        float _3115 = _3112 * _3108;
                        float _3116 = dot(vec3(_889, _892, _895), vec3(_3113, _3114, _3115));
                        float _3121 = 1.0 - (_3109 * _3066.w);
                        float _4434 = isnan(0.0) ? _3121 : (isnan(_3121) ? 0.0 : max(_3121, 0.0));
                        float _3122 = isnan(1.0) ? _4434 : (isnan(_4434) ? 1.0 : min(_4434, 1.0));
                        float _3123 = sqrt(_3109) * _3085.w;
                        float _3126 = 1.39999997615814208984375 / (_3123 + 1.39999997615814208984375);
                        float _3127 = _3126 * _3126;
                        float _3130 = ((1.0 - _3127) * _3116) + _3127;
                        float _3133 = _3123 * _3123;
                        float _3137 = ((isnan(0.0) ? _3130 : (isnan(_3130) ? 0.0 : max(_3130, 0.0))) * _3122) / ((_3133 * 0.699999988079071044921875) + 1.0);
                        float _3141 = (-0.0) - _2625;
                        float _3142 = (-0.0) - _2626;
                        float _3143 = (-0.0) - _2627;
                        float _3147 = inversesqrt(dot(vec3(_3141, _3142, _3143), vec3(_3141, _3142, _3143)));
                        float _3148 = _3147 * _3141;
                        float _3149 = _3147 * _3142;
                        float _3150 = _3147 * _3143;
                        float _3158 = exp2(log2(1.0 / ((_3133 * 3.5) + 5.0)) * 0.25);
                        float _3159 = 1.0 - _964;
                        float _3166 = sqrt(1.0 - ((1.0 - (_3159 * _3159)) * (1.0 - (_3158 * _3158))));
                        float _3167 = _3166 * _3166;
                        float _3168 = _3167 * _3167;
                        float _3169 = _3148 + _3113;
                        float _3170 = _3149 + _3114;
                        float _3171 = _3150 + _3115;
                        float _3175 = inversesqrt(dot(vec3(_3169, _3170, _3171), vec3(_3169, _3170, _3171)));
                        float _3179 = dot(vec3(_889, _892, _895), vec3(_3148, _3149, _3150));
                        float _4450 = isnan(0.0) ? _3179 : (isnan(_3179) ? 0.0 : max(_3179, 0.0));
                        float _3182 = isnan(1.0) ? _4450 : (isnan(_4450) ? 1.0 : min(_4450, 1.0));
                        float _3183 = dot(vec3(_889, _892, _895), vec3(_3175 * _3169, _3175 * _3170, _3175 * _3171));
                        float _4461 = isnan(0.0) ? _3183 : (isnan(_3183) ? 0.0 : max(_3183, 0.0));
                        float _3186 = isnan(1.0) ? _4461 : (isnan(_4461) ? 1.0 : min(_4461, 1.0));
                        float _3190 = ((_3186 * _3186) * (_3168 + (-1.0))) + 1.0;
                        float _3191 = _3126 * _3167;
                        float _3192 = _3191 * _3191;
                        float _3195 = ((1.0 - _3192) * _3116) + _3192;
                        float _4472 = isnan(0.0) ? _3195 : (isnan(_3195) ? 0.0 : max(_3195, 0.0));
                        float _3196 = isnan(1.0) ? _4472 : (isnan(_4472) ? 1.0 : min(_4472, 1.0));
                        float _3197 = 1.0 - _3167;
                        float _3207 = (0.5 / (((_3196 * ((_3182 * _3197) + _3167)) + 9.9999999392252902907785028219223e-09) + (((_3196 * _3197) + _3167) * _3182))) * _3196;
                        float _4483 = isnan(0.0) ? _3207 : (isnan(_3207) ? 0.0 : max(_3207, 0.0));
                        float _3218 = (((_3168 * 3.1415927410125732421875) * (isnan(1.0) ? _4483 : (isnan(_4483) ? 1.0 : min(_4483, 1.0)))) / ((_3190 * _3190) * ((_3133 * 2.1991131305694580078125) + 3.141590118408203125))) * _3122;
                        _2975 = (_3137 * _3085.x) + _3043;
                        _2976 = (_3137 * _3085.y) + _3044;
                        _2977 = (_3137 * _3085.z) + _3045;
                        _2972 = (_3218 * _3102.x) + _3040;
                        _2973 = (_3218 * _3102.y) + _3041;
                        _2974 = (_3218 * _3102.z) + _3042;
                        if (_3047 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3040 = _2972;
                            _3041 = _2973;
                            _3042 = _2974;
                            _3043 = _2975;
                            _3044 = _2976;
                            _3045 = _2977;
                            _3046 = _3047;
                        }
                    }
                    frontier_phi_61_pred = _2972;
                    frontier_phi_61_pred_1 = _2977;
                    frontier_phi_61_pred_2 = _2976;
                    frontier_phi_61_pred_3 = _2975;
                    frontier_phi_61_pred_4 = _2974;
                    frontier_phi_61_pred_5 = _2973;
                }
                _2773 = frontier_phi_61_pred;
                _2783 = frontier_phi_61_pred_1;
                _2781 = frontier_phi_61_pred_2;
                _2779 = frontier_phi_61_pred_3;
                _2777 = frontier_phi_61_pred_4;
                _2775 = frontier_phi_61_pred_5;
                uint _2923 = _2922 + 1u;
                if (_2923 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2916 = _2773;
                    _2917 = _2775;
                    _2918 = _2777;
                    _2919 = _2779;
                    _2920 = _2781;
                    _2921 = _2783;
                    _2922 = _2923;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2772 = _2773;
            _2774 = _2775;
            _2776 = _2777;
            _2778 = _2779;
            _2780 = _2781;
            _2782 = _2783;
        }
        uvec4 _2786 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2787 = _2786.z;
        uint _2789 = (_2787 >> 8u) & 15u;
        float _2884;
        float _2886;
        float _2888;
        float _2890;
        float _2892;
        float _2894;
        if (((4294967295u << _2789) & _2671) == 0u)
        {
            _2884 = _2772;
            _2886 = _2774;
            _2888 = _2776;
            _2890 = _2778;
            _2892 = _2780;
            _2894 = _2782;
        }
        else
        {
            float _2909 = inversesqrt(dot(vec3(_2625, _2626, _2627), vec3(_2625, _2626, _2627)));
            float _2910 = _2909 * _2625;
            float _2911 = _2909 * _2626;
            float _2912 = _2909 * _2627;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2789 < ((_2787 >> 12u) & 15u))
            {
                float _2885;
                float _2887;
                float _2889;
                float _2891;
                float _2893;
                float _2895;
                float _3023 = _2772;
                float _3024 = _2774;
                float _3025 = _2776;
                float _3026 = _2778;
                float _3027 = _2780;
                float _3028 = _2782;
                uint _3029 = _2789;
                uint _3038;
                bool _3039;
                for (;;)
                {
                    _3038 = texelFetch(g_lightClassification, int((((_2665 << 5u) + (_2651 << 9u)) + (_3029 << 2u)) >> 2u)).x;
                    _3039 = _3038 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3039)
                    {
                        frontier_phi_67_pred = _3026;
                        frontier_phi_67_pred_1 = _3027;
                        frontier_phi_67_pred_2 = _3028;
                        frontier_phi_67_pred_3 = _3025;
                        frontier_phi_67_pred_4 = _3024;
                        frontier_phi_67_pred_5 = _3023;
                    }
                    else
                    {
                        float _3223;
                        float _3224;
                        float _3225;
                        float _3226;
                        float _3227;
                        float _3228;
                        float _3517;
                        float _3518;
                        float _3519;
                        float _3520;
                        float _3521;
                        float _3522;
                        float _3236 = _3023;
                        float _3237 = _3024;
                        float _3238 = _3025;
                        float _3239 = _3026;
                        float _3240 = _3027;
                        float _3241 = _3028;
                        uint _3242 = _3038;
                        uint _3243;
                        vec4 _3268;
                        float _3269;
                        vec4 _3284;
                        vec3 _3296;
                        vec4 _3311;
                        vec4 _3326;
                        float _3373;
                        bool _3374;
                        for (;;)
                        {
                            uint _3253 = ((_3029 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3242));
                            _3243 = (_3242 + 4294967295u) & _3242;
                            uint _3255 = _3253 * 40u;
                            _3268 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3255)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3255 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3255 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3255 + 3u)).x));
                            _3269 = _3268.w;
                            uint _3271 = (_3253 * 40u) + 4u;
                            _3284 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3271)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3271 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3271 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3271 + 3u)).x));
                            uint _3286 = (_3253 * 40u) + 8u;
                            _3296 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3286)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3286 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3286 + 2u)).x));
                            uint _3298 = (_3253 * 40u) + 16u;
                            _3311 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3298)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3298 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3298 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3298 + 3u)).x));
                            uint _3313 = (_3253 * 40u) + 20u;
                            _3326 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3313)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3313 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3313 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3313 + 3u)).x));
                            uint _3329 = (_3253 * 40u) + 24u;
                            vec4 _3342 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3329)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3329 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3329 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3329 + 3u)).x));
                            uint _3348 = (_3253 * 40u) + 28u;
                            vec4 _3361 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3348)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3348 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3348 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3348 + 3u)).x));
                            _3373 = fma(_2627, _3361.z, fma(_2626, _3361.y, _3361.x * _2625)) + _3361.w;
                            _3374 = !((fma(_2627, _3342.z, fma(_2626, _3342.y, _3342.x * _2625)) + _3342.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3374)
                            {
                                float _3401 = _3268.x - _2625;
                                float _3402 = _3268.y - _2626;
                                float _3403 = _3268.z - _2627;
                                float _3404 = dot(vec3(_3401, _3402, _3403), vec3(_3401, _3402, _3403));
                                float _3407 = inversesqrt(_3404);
                                float _3408 = _3407 * _3401;
                                float _3409 = _3407 * _3402;
                                float _3410 = _3407 * _3403;
                                float _3414 = 1.0 - (_3404 / (_3269 * _3269));
                                float _4494 = isnan(0.0) ? _3414 : (isnan(_3414) ? 0.0 : max(_3414, 0.0));
                                float _3415 = isnan(1.0) ? _4494 : (isnan(_4494) ? 1.0 : min(_4494, 1.0));
                                float _3419 = sqrt(_3404) * _3284.w;
                                float _3421 = 1.39999997615814208984375 / (_3419 + 1.39999997615814208984375);
                                float _3422 = _3421 * _3421;
                                float _3425 = ((1.0 - _3422) * dot(vec3(_3408, _3409, _3410), vec3(_889, _892, _895))) + _3422;
                                float _3428 = _3419 * _3419;
                                float _3432 = (fma(_2627, _3311.z, fma(_2626, _3311.y, _3311.x * _2625)) + _3311.w) / _3373;
                                float _3433 = (fma(_2627, _3326.z, fma(_2626, _3326.y, _3326.x * _2625)) + _3326.w) / _3373;
                                float _3437 = 1.0 - dot(vec2(_3432, _3433), vec2(_3432, _3433));
                                float _4510 = isnan(0.0) ? _3437 : (isnan(_3437) ? 0.0 : max(_3437, 0.0));
                                float _3438 = isnan(1.0) ? _4510 : (isnan(_4510) ? 1.0 : min(_4510, 1.0));
                                float _3439 = _3438 * (((isnan(0.0) ? _3425 : (isnan(_3425) ? 0.0 : max(_3425, 0.0))) * _3415) / ((_3428 * 0.699999988079071044921875) + 1.0));
                                float _3451 = exp2(log2(1.0 / ((_3428 * 3.5) + 5.0)) * 0.25);
                                float _3452 = 1.0 - _964;
                                float _3459 = sqrt(1.0 - ((1.0 - (_3452 * _3452)) * (1.0 - (_3451 * _3451))));
                                float _3460 = _3459 * _3459;
                                float _3461 = _3460 * _3460;
                                float _3462 = _3408 - _2910;
                                float _3463 = _3409 - _2911;
                                float _3464 = _3410 - _2912;
                                float _3468 = inversesqrt(dot(vec3(_3462, _3463, _3464), vec3(_3462, _3463, _3464)));
                                float _3472 = dot(vec3(_889, _892, _895), vec3((-0.0) - _2910, (-0.0) - _2911, (-0.0) - _2912));
                                float _4521 = isnan(0.0) ? _3472 : (isnan(_3472) ? 0.0 : max(_3472, 0.0));
                                float _3475 = isnan(1.0) ? _4521 : (isnan(_4521) ? 1.0 : min(_4521, 1.0));
                                float _3476 = dot(vec3(_889, _892, _895), vec3(_3468 * _3462, _3468 * _3463, _3468 * _3464));
                                float _4532 = isnan(0.0) ? _3476 : (isnan(_3476) ? 0.0 : max(_3476, 0.0));
                                float _3479 = isnan(1.0) ? _4532 : (isnan(_4532) ? 1.0 : min(_4532, 1.0));
                                float _3483 = ((_3479 * _3479) * (_3461 + (-1.0))) + 1.0;
                                float _3484 = _3421 * _3460;
                                float _3485 = _3484 * _3484;
                                float _3491 = ((1.0 - _3485) * dot(vec3(_889, _892, _895), vec3(_3408, _3409, _3410))) + _3485;
                                float _4543 = isnan(0.0) ? _3491 : (isnan(_3491) ? 0.0 : max(_3491, 0.0));
                                float _3492 = isnan(1.0) ? _4543 : (isnan(_4543) ? 1.0 : min(_4543, 1.0));
                                float _3493 = 1.0 - _3460;
                                float _3503 = (0.5 / (((_3492 * ((_3475 * _3493) + _3460)) + 9.9999999392252902907785028219223e-09) + (((_3492 * _3493) + _3460) * _3475))) * _3492;
                                float _4554 = isnan(0.0) ? _3503 : (isnan(_3503) ? 0.0 : max(_3503, 0.0));
                                float _3513 = (_3438 * _3415) * (((_3461 * 3.1415927410125732421875) * (isnan(1.0) ? _4554 : (isnan(_4554) ? 1.0 : min(_4554, 1.0)))) / ((_3483 * _3483) * ((_3428 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3513 * _3296.x;
                                frontier_phi_73_pred_1 = _3513 * _3296.y;
                                frontier_phi_73_pred_2 = _3439 * _3284.z;
                                frontier_phi_73_pred_3 = _3439 * _3284.y;
                                frontier_phi_73_pred_4 = _3439 * _3284.x;
                                frontier_phi_73_pred_5 = _3513 * _3296.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3517 = frontier_phi_73_pred;
                            _3518 = frontier_phi_73_pred_1;
                            _3522 = frontier_phi_73_pred_2;
                            _3521 = frontier_phi_73_pred_3;
                            _3520 = frontier_phi_73_pred_4;
                            _3519 = frontier_phi_73_pred_5;
                            _3226 = _3520 + _3239;
                            _3227 = _3521 + _3240;
                            _3228 = _3522 + _3241;
                            _3223 = _3517 + _3236;
                            _3224 = _3518 + _3237;
                            _3225 = _3519 + _3238;
                            if (_3243 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3236 = _3223;
                                _3237 = _3224;
                                _3238 = _3225;
                                _3239 = _3226;
                                _3240 = _3227;
                                _3241 = _3228;
                                _3242 = _3243;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3226;
                        frontier_phi_67_pred_1 = _3227;
                        frontier_phi_67_pred_2 = _3228;
                        frontier_phi_67_pred_3 = _3225;
                        frontier_phi_67_pred_4 = _3224;
                        frontier_phi_67_pred_5 = _3223;
                    }
                    _2891 = frontier_phi_67_pred;
                    _2893 = frontier_phi_67_pred_1;
                    _2895 = frontier_phi_67_pred_2;
                    _2889 = frontier_phi_67_pred_3;
                    _2887 = frontier_phi_67_pred_4;
                    _2885 = frontier_phi_67_pred_5;
                    uint _3030 = _3029 + 1u;
                    if (_3030 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3023 = _2885;
                        _3024 = _2887;
                        _3025 = _2889;
                        _3026 = _2891;
                        _3027 = _2893;
                        _3028 = _2895;
                        _3029 = _3030;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2893;
                frontier_phi_55_56_ladder_1 = _2895;
                frontier_phi_55_56_ladder_2 = _2891;
                frontier_phi_55_56_ladder_3 = _2889;
                frontier_phi_55_56_ladder_4 = _2887;
                frontier_phi_55_56_ladder_5 = _2885;
            }
            else
            {
                frontier_phi_55_56_ladder = _2780;
                frontier_phi_55_56_ladder_1 = _2782;
                frontier_phi_55_56_ladder_2 = _2778;
                frontier_phi_55_56_ladder_3 = _2776;
                frontier_phi_55_56_ladder_4 = _2774;
                frontier_phi_55_56_ladder_5 = _2772;
            }
            _2884 = frontier_phi_55_56_ladder_5;
            _2886 = frontier_phi_55_56_ladder_4;
            _2888 = frontier_phi_55_56_ladder_3;
            _2890 = frontier_phi_55_56_ladder_2;
            _2892 = frontier_phi_55_56_ladder;
            _2894 = frontier_phi_55_56_ladder_1;
        }
        float _2899 = isnan(1.0) ? _948 : (isnan(_948) ? 1.0 : min(_948, 1.0));
        _2684 = (_2899 * _2890) + _2120;
        _2686 = (_2899 * _2892) + _2122;
        _2688 = (_2899 * _2894) + _2124;
        _2690 = ((_2884 * _933) * _2899) + _2465;
        _2692 = ((_2886 * _935) * _2899) + _2467;
        _2694 = ((_2888 * _936) * _2899) + _2469;
    }
    else
    {
        _2684 = _2120;
        _2686 = _2122;
        _2688 = _2124;
        _2690 = _2465;
        _2692 = _2467;
        _2694 = _2469;
    }
    float _4570 = isnan(0.0) ? _923 : (isnan(_923) ? 0.0 : max(_923, 0.0));
    float _4581 = isnan(0.0) ? _924 : (isnan(_924) ? 0.0 : max(_924, 0.0));
    float _4592 = isnan(0.0) ? _925 : (isnan(_925) ? 0.0 : max(_925, 0.0));
    uint _2714 = _908 + 6u;
    float _2722 = _870 / cbSceneParam._m0[86u].x;
    float _2723 = _871 / cbSceneParam._m0[86u].y;
    vec4 _2737 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2722, _2723, (log2((isnan(cbSceneParam._m0[77u].w) ? _805 : (isnan(_805) ? cbSceneParam._m0[77u].w : min(_805, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2739 = _2737.x;
    float _2740 = _2737.y;
    float _2741 = _2737.z;
    float _2742 = _2737.w;
    float _2834;
    float _2836;
    float _2838;
    float _2840;
    if (_805 > cbSceneParam._m0[78u].w)
    {
        float _2797 = isnan(_805) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _805 : min(cbSceneParam._m0[80u].w, _805));
        float _2798 = _2797 / _805;
        float _2809 = _2798 * _855;
        float _2810 = _856 * _2798;
        float _2811 = (-0.0) - _2810;
        float _2812 = _2798 * _857;
        float _2814 = (cbSceneParam._m0[77u].w * _2811) / _2797;
        float _2815 = _2814 + cbSceneParam._m0[79u].w;
        float _2816 = cbSceneParam._m0[79u].w - _2810;
        float _2822 = sqrt(((_2809 * _2809) + (_2810 * _2810)) + (_2812 * _2812));
        float _2825 = (1.0 - (cbSceneParam._m0[77u].w / _2797)) * _2822;
        float _2830 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2832 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2985;
        if (abs((_2811 - _2814) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2985 = ((((_2815 > 0.0) ? exp2(_2830 * _2815) : (2.0 - exp2(_2832 * _2815))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2825;
        }
        else
        {
            float _2945 = 1.0 / cbSceneParam._m0[80u].x;
            float _2946 = isnan(_2816) ? _2815 : (isnan(_2815) ? _2816 : max(_2815, _2816));
            float _2947 = isnan(_2816) ? _2815 : (isnan(_2815) ? _2816 : min(_2815, _2816));
            float _2956 = isnan(0.0) ? _2946 : (isnan(_2946) ? 0.0 : min(_2946, 0.0));
            float _2957 = isnan(0.0) ? _2947 : (isnan(_2947) ? 0.0 : min(_2947, 0.0));
            _2985 = ((abs(_2822 / _2811) * cbSceneParam._m0[80u].y) * ((((_2956 - _2957) * 2.0) - ((exp2(_2830 * (isnan(0.0) ? _2946 : (isnan(_2946) ? 0.0 : max(_2946, 0.0)))) - exp2(_2830 * (isnan(0.0) ? _2947 : (isnan(_2947) ? 0.0 : max(_2947, 0.0))))) * _2945)) - ((exp2(_2832 * _2956) - exp2(_2832 * _2957)) * _2945))) + (_2825 * cbSceneParam._m0[80u].z);
        }
        vec4 _2987 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2722, _2723, 1.0), 0.0);
        float _2996 = exp2((_2985 * (-1.44269502162933349609375)) * (1.0 - _2987.w));
        float _2997 = log2(_2996);
        float _3013 = log2(_2742);
        _2834 = (exp2(_3013 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2997 * cbSceneParam._m0[78u].x)) * _2987.x) / cbSceneParam._m0[78u].x)) + _2739;
        _2836 = (exp2(_3013 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2997 * cbSceneParam._m0[78u].y)) * _2987.y) / cbSceneParam._m0[78u].y)) + _2740;
        _2838 = (exp2(_3013 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2997 * cbSceneParam._m0[78u].z)) * _2987.z) / cbSceneParam._m0[78u].z)) + _2741;
        _2840 = _2996 * _2742;
    }
    else
    {
        _2834 = _2739;
        _2836 = _2740;
        _2838 = _2741;
        _2840 = _2742;
    }
    float _2852 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2853 = _2852 == 3.0;
    float _2854 = log2(_2840);
    float _2861 = exp2(_2854 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4570 : (isnan(_4570) ? 1.0 : min(_4570, 1.0))) * (_2684 + ((isnan(0.0) ? _1679 : (isnan(_1679) ? 0.0 : max(_1679, 0.0))) * _948))) + ((_2690 + ((isnan(0.0) ? _1973 : (isnan(_1973) ? 0.0 : max(_1973, 0.0))) * _1758)) * cbPerFrame._m0[3u].x));
    float _2862 = exp2(_2854 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4581 : (isnan(_4581) ? 1.0 : min(_4581, 1.0))) * (_2686 + ((isnan(0.0) ? _1682 : (isnan(_1682) ? 0.0 : max(_1682, 0.0))) * _948))) + ((_2692 + ((isnan(0.0) ? _1976 : (isnan(_1976) ? 0.0 : max(_1976, 0.0))) * _1758)) * cbPerFrame._m0[3u].x));
    float _2863 = exp2(_2854 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4592 : (isnan(_4592) ? 1.0 : min(_4592, 1.0))) * (_2688 + ((isnan(0.0) ? _1685 : (isnan(_1685) ? 0.0 : max(_1685, 0.0))) * _948))) + ((_2694 + ((isnan(0.0) ? _1979 : (isnan(_1979) ? 0.0 : max(_1979, 0.0))) * _1758)) * cbPerFrame._m0[3u].x));
    float _2872 = (_2852 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2872 * (_2853 ? _2861 : (_2861 + (cbSceneParam._m0[72u].w * _2834)));
    SV_Target.y = _2872 * (_2853 ? _2862 : (_2862 + (cbSceneParam._m0[72u].w * _2836)));
    SV_Target.z = _2872 * (_2853 ? _2863 : (_2863 + (cbSceneParam._m0[72u].w * _2838)));
    SV_Target.w = cbInstanceData._m0[_2714].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2714].w;
}


