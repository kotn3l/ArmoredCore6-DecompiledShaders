#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[20];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_19;
layout(set = 0, binding = 11) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_2;
layout(set = 0, binding = 12) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_20;
layout(set = 0, binding = 13) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_3;
layout(set = 0, binding = 14) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_5;
layout(set = 0, binding = 15) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_6;
layout(set = 0, binding = 16) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_7;
layout(set = 0, binding = 17) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_8;
layout(set = 0, binding = 18) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_11;
layout(set = 0, binding = 3) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_14;
layout(set = 0, binding = 6) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_15;
layout(set = 0, binding = 7) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_16;
layout(set = 0, binding = 8) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_17;
layout(set = 0, binding = 9) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_18;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1319;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _217 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _218 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _219 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _225 = inversesqrt(dot(vec3(_217, _218, _219), vec3(_217, _218, _219)));
    float _232 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _239 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _262 = sin(cbMtdParam._m0[18u].x);
    float _263 = cos(cbMtdParam._m0[18u].x);
    float _264 = TEXCOORD.x - cbMtdParam._m0[17u].w;
    float _265 = TEXCOORD.y - cbMtdParam._m0[17u].w;
    float _273 = (cbMtdParam._m0[17u].w + cbMtdParam._m0[19u].y) + fma(_265, (-0.0) - _262, _263 * _264);
    float _275 = (cbMtdParam._m0[17u].w + cbMtdParam._m0[19u].z) + fma(_265, _263, _264 * _262);
    vec4 _288 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * _273) + cbTextureTilingScale._m0[1u].z, (_275 * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w));
    float _294 = _288.x * cbMtdParam._m0[10u].x;
    float _295 = _288.y * cbMtdParam._m0[10u].y;
    float _296 = _288.z * cbMtdParam._m0[10u].z;
    vec4 _314 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w));
    vec4 _333 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_0, SS_WrapLinear), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _358 = cbMtdParam._m0[19u].x * texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.x) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD.y) + cbTextureTilingScale._m0[13u].w)).x;
    float _369 = ((cbMtdParam._m0[15u].x * (-1.39999997615814208984375)) * (((1.0 - _333.x) * 2.0) - _358)) + 1.0;
    float _3931 = isnan(0.0) ? _369 : (isnan(_369) ? 0.0 : max(_369, 0.0));
    float _370 = isnan(1.0) ? _3931 : (isnan(_3931) ? 1.0 : min(_3931, 1.0));
    float _377 = (_370 * ((_314.x * cbMtdParam._m0[11u].x) - _294)) + _294;
    float _378 = (_370 * ((_314.y * cbMtdParam._m0[11u].y) - _295)) + _295;
    float _379 = (_370 * ((_314.z * cbMtdParam._m0[11u].z) - _296)) + _296;
    vec4 _397 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_8, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[17u].x * TEXCOORD.x) + cbTextureTilingScale._m0[17u].z, (cbTextureTilingScale._m0[17u].y * TEXCOORD.y) + cbTextureTilingScale._m0[17u].w));
    float _410 = (((((1.0 - _333.y) * 2.0) - _358) * (-1.39999997615814208984375)) * cbMtdParam._m0[18u].z) + 1.0;
    float _3942 = isnan(0.0) ? _410 : (isnan(_410) ? 0.0 : max(_410, 0.0));
    float _411 = isnan(1.0) ? _3942 : (isnan(_3942) ? 1.0 : min(_3942, 1.0));
    float _418 = (((_397.x * cbMtdParam._m0[12u].x) - _377) * _411) + _377;
    float _419 = (_411 * ((_397.y * cbMtdParam._m0[12u].y) - _378)) + _378;
    float _420 = (_411 * ((_397.z * cbMtdParam._m0[12u].z) - _379)) + _379;
    vec4 _437 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _450 = (((((1.0 - _333.z) * 2.0) - _358) * (-1.39999997615814208984375)) * cbMtdParam._m0[18u].w) + 1.0;
    float _3953 = isnan(0.0) ? _450 : (isnan(_450) ? 0.0 : max(_450, 0.0));
    float _451 = isnan(1.0) ? _3953 : (isnan(_3953) ? 1.0 : min(_3953, 1.0));
    float _458 = (((_437.x * cbMtdParam._m0[13u].x) - _418) * _451) + _418;
    float _459 = (_451 * ((_437.y * cbMtdParam._m0[13u].y) - _419)) + _419;
    float _460 = (_451 * ((_437.z * cbMtdParam._m0[13u].z) - _420)) + _420;
    vec4 _480 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_20, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.z) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.w) + cbTextureTilingScale._m0[12u].w));
    float _509 = (TEXCOORD_5.x - ((cbMtdParam._m0[15u].w * (1.0 - TEXCOORD_5.x)) * (texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[18u].x * TEXCOORD.z) + cbTextureTilingScale._m0[18u].z, (cbTextureTilingScale._m0[18u].y * TEXCOORD.w) + cbTextureTilingScale._m0[18u].w)).x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[15u].z + 1.0);
    float _3964 = isnan(0.0) ? _509 : (isnan(_509) ? 0.0 : max(_509, 0.0));
    float _510 = isnan(1.0) ? _3964 : (isnan(_3964) ? 1.0 : min(_3964, 1.0));
    float _517 = (_510 * ((_480.x * cbMtdParam._m0[14u].x) - _458)) + _458;
    float _518 = (_510 * ((_480.y * cbMtdParam._m0[14u].y) - _459)) + _459;
    float _519 = (_510 * ((_480.z * cbMtdParam._m0[14u].z) - _460)) + _460;
    vec4 _532 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * _273) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _275) + cbTextureTilingScale._m0[5u].w));
    float _534 = _532.x;
    float _552 = ((texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w)).x - _534) * _370) + _534;
    float _570 = ((texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w)).x - _552) * _411) + _552;
    float _587 = ((texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w)).x - _570) * _451) + _570;
    float _591 = (_587 - (_587 * TEXCOORD_5.x)) * cbMtdParam._m0[18u].y;
    vec4 _604 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.z) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.w) + cbTextureTilingScale._m0[3u].w));
    vec4 _626 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[14u].x * _273) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _275) + cbTextureTilingScale._m0[14u].w));
    float _628 = _626.x;
    float _629 = _626.y;
    float _632 = cbMtdParam._m0[17u].y * _626.z;
    vec4 _644 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * TEXCOORD.x) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * TEXCOORD.y) + cbTextureTilingScale._m0[15u].w));
    float _653 = (((cbMtdParam._m0[17u].x * _644.z) - _632) * _370) + _632;
    vec4 _666 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_15, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _678 = (((cbMtdParam._m0[16u].w * _666.z) - _653) * _411) + _653;
    vec4 _691 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _700 = (((cbMtdParam._m0[16u].z * _691.z) - _678) * _451) + _678;
    float _705 = ((cbMtdParam._m0[16u].x * TEXCOORD_5.x) * ((_604.z * cbMtdParam._m0[17u].z) - _700)) + _700;
    vec4 _718 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[16u].x * TEXCOORD.x) + cbTextureTilingScale._m0[16u].z, (cbTextureTilingScale._m0[16u].y * TEXCOORD.y) + cbTextureTilingScale._m0[16u].w));
    float _730 = ((_644.x - _628) * _370) + _628;
    float _731 = ((_644.y - _629) * _370) + _629;
    float _736 = ((_666.x - _730) * _411) + _730;
    float _737 = ((_666.y - _731) * _411) + _731;
    float _746 = ((((_691.x - _736) * _451) + _736) * 2.0) + (-1.0);
    float _747 = ((((_691.y - _737) * _451) + _737) * 2.0) + (-1.0);
    float _748 = dot(vec2(_746, _747), vec2(_746, _747));
    float _3975 = isnan(0.0) ? _748 : (isnan(_748) ? 0.0 : max(_748, 0.0));
    float _753 = sqrt(1.0 - (isnan(1.0) ? _3975 : (isnan(_3975) ? 1.0 : min(_3975, 1.0))));
    float _763 = ((((_718.x * 2.0) + (-1.0)) * cbMtdParam._m0[16u].y) + _746) + ((((_604.x * 2.0) + (-1.0)) * TEXCOORD_5.x) * cbMtdParam._m0[15u].y);
    float _764 = ((((_718.y * 2.0) + (-1.0)) * cbMtdParam._m0[16u].y) + _747) + ((((_604.y * 2.0) + (-1.0)) * TEXCOORD_5.y) * cbMtdParam._m0[15u].y);
    float _767 = fma(_753, _232 * NORMAL.x, fma(_764, _239 * TANGENT.x, (_225 * _217) * _763));
    float _770 = fma(_753, _232 * NORMAL.y, fma(_764, _239 * TANGENT.y, (_225 * _218) * _763));
    float _773 = fma(_753, _232 * NORMAL.z, fma(_764, _239 * TANGENT.z, (_225 * _219) * _763));
    float _777 = inversesqrt(dot(vec3(_767, _770, _773), vec3(_767, _770, _773)));
    float _778 = _777 * _767;
    float _779 = _777 * _770;
    float _780 = _777 * _773;
    float _3986 = isnan(0.0) ? _705 : (isnan(_705) ? 0.0 : max(_705, 0.0));
    float _781 = isnan(1.0) ? _3986 : (isnan(_3986) ? 1.0 : min(_3986, 1.0));
    float _3997 = isnan(0.0) ? _517 : (isnan(_517) ? 0.0 : max(_517, 0.0));
    float _4008 = isnan(0.0) ? _518 : (isnan(_518) ? 0.0 : max(_518, 0.0));
    float _4019 = isnan(0.0) ? _519 : (isnan(_519) ? 0.0 : max(_519, 0.0));
    float _4030 = isnan(0.0) ? _591 : (isnan(_591) ? 0.0 : max(_591, 0.0));
    float _785 = isnan(1.0) ? _4030 : (isnan(_4030) ? 1.0 : min(_4030, 1.0));
    float _801 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _841 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _851 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _841);
    float _852 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _841);
    float _853 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _841);
    float _857 = inversesqrt(dot(vec3(_851, _852, _853), vec3(_851, _852, _853)));
    float _858 = _851 * _857;
    float _859 = _852 * _857;
    float _860 = _853 * _857;
    float _866 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _867 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _885 = fma(_780, cbSceneParam._m0[5u].z, fma(_779, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _778));
    float _888 = fma(_780, cbSceneParam._m0[6u].z, fma(_779, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _778));
    float _891 = fma(_780, cbSceneParam._m0[7u].z, fma(_779, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _778));
    uint _904 = uint(roundEven(NORMAL.w)) * 13u;
    uint _906 = (_904 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _912 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3997 : (isnan(_3997) ? 1.0 : min(_3997, 1.0)))) * cbInstanceData._m0[_906].x;
    float _913 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4008 : (isnan(_4008) ? 1.0 : min(_4008, 1.0)))) * cbInstanceData._m0[_906].y;
    float _914 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4019 : (isnan(_4019) ? 1.0 : min(_4019, 1.0)))) * cbInstanceData._m0[_906].z;
    float _4041 = isnan(0.0) ? _912 : (isnan(_912) ? 0.0 : max(_912, 0.0));
    float _915 = isnan(1.0) ? _4041 : (isnan(_4041) ? 1.0 : min(_4041, 1.0));
    float _4052 = isnan(0.0) ? _913 : (isnan(_913) ? 0.0 : max(_913, 0.0));
    float _916 = isnan(1.0) ? _4052 : (isnan(_4052) ? 1.0 : min(_4052, 1.0));
    float _4063 = isnan(0.0) ? _914 : (isnan(_914) ? 0.0 : max(_914, 0.0));
    float _917 = isnan(1.0) ? _4063 : (isnan(_4063) ? 1.0 : min(_4063, 1.0));
    float _918 = 1.0 - _785;
    float _919 = _915 * _918;
    float _920 = _916 * _918;
    float _921 = _917 * _918;
    float _926 = (_915 + (-0.039999999105930328369140625)) * _785;
    float _927 = (_916 + (-0.039999999105930328369140625)) * _785;
    float _928 = (_917 + (-0.039999999105930328369140625)) * _785;
    float _929 = _926 + 0.039999999105930328369140625;
    float _931 = _927 + 0.039999999105930328369140625;
    float _932 = _928 + 0.039999999105930328369140625;
    vec4 _941 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _866, cbSceneParam._m0[86u].y * _867));
    float _944 = _941.x * TEXCOORD_5.w;
    float _945 = dot(vec3(_778, _779, _780), vec3(_858, _859, _860));
    float _948 = _945 * 2.0;
    float _952 = (_948 * _778) - _858;
    float _953 = (_948 * _779) - _859;
    float _954 = (_948 * _780) - _860;
    float _958 = abs(dot(vec3(_858, _859, _860), vec3(_778, _779, _780)));
    float _4074 = isnan(0.0) ? _958 : (isnan(_958) ? 0.0 : max(_958, 0.0));
    float _960 = sqrt(_781);
    float _973 = exp2((_960 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4074 : (isnan(_4074) ? 1.0 : min(_4074, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_960 * 3.0));
    float _979 = (1.0 - _973) * ((_960 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _980 = _973 * _960;
    float _1008 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1012 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1016 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1318;
    float _1320;
    float _1321;
    float _1322;
    float _1323;
    float _1324;
    float _1325;
    float _1326;
    float _1327;
    float _1328;
    float _1329;
    float _1330;
    float _1331;
    float _1332;
    float _1333;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1043 = fma(_1016, cbModelParam._m0[26u].z, fma(_1012, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1008));
        float _1047 = fma(_1016, cbModelParam._m0[27u].z, fma(_1012, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1008));
        float _1051 = fma(_1016, cbModelParam._m0[28u].z, fma(_1012, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1008));
        float _1076 = _1008 + _778;
        float _1077 = _1012 + _779;
        float _1078 = _1016 + _780;
        float _1088 = fma(_1078, cbModelParam._m0[26u].z, fma(_1077, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1076)) - _1043;
        float _1089 = fma(_1078, cbModelParam._m0[27u].z, fma(_1077, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1076)) - _1047;
        float _1090 = fma(_1078, cbModelParam._m0[28u].z, fma(_1077, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1076)) - _1051;
        float _1094 = inversesqrt(dot(vec3(_1088, _1089, _1090), vec3(_1088, _1089, _1090)));
        float _1107 = ((_1094 * _1088) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1043 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1108 = ((_1094 * _1089) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1047 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1109 = ((_1094 * _1090) / cbModelParam._m0[34u].z) + ((((((_1051 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1112 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1107, _1108, _1109), 0.0);
        vec4 _1119 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1107, _1108, _1109), 0.0);
        vec4 _1126 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1107, _1108, _1109), 0.0);
        vec4 _1133 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1107, _1108, _1109), 0.0);
        float _1146 = exp2((_1112.w + (-0.5)) * 20.0) * 2.0;
        float _1147 = _1146 * (_1112.x + (-0.5));
        float _1148 = _1146 * (_1112.y + (-0.5));
        float _1149 = _1146 * (_1112.z + (-0.5));
        float _1156 = exp2((_1119.w + (-0.5)) * 20.0) * 2.0;
        float _1157 = _1156 * (_1119.x + (-0.5));
        float _1158 = _1156 * (_1119.y + (-0.5));
        float _1159 = _1156 * (_1119.z + (-0.5));
        float _1166 = exp2((_1126.w + (-0.5)) * 20.0) * 2.0;
        float _1167 = _1166 * (_1126.x + (-0.5));
        float _1168 = _1166 * (_1126.y + (-0.5));
        float _1169 = _1166 * (_1126.z + (-0.5));
        float _1176 = exp2((_1133.w + (-0.5)) * 20.0) * 2.0;
        float _1177 = _1176 * (_1133.x + (-0.5));
        float _1178 = _1176 * (_1133.y + (-0.5));
        float _1179 = _1176 * (_1133.z + (-0.5));
        float _1180 = isnan(0.0) ? _1177 : (isnan(_1177) ? 0.0 : max(_1177, 0.0));
        float _1181 = isnan(0.0) ? _1178 : (isnan(_1178) ? 0.0 : max(_1178, 0.0));
        float _1182 = isnan(0.0) ? _1179 : (isnan(_1179) ? 0.0 : max(_1179, 0.0));
        float _1183 = _1147 * 0.5;
        float _1184 = _1157 * 0.5;
        float _1185 = _1167 * 0.5;
        float _1186 = dot(vec3(_1183, _1184, _1185), vec3(_1183, _1184, _1185));
        float _1191 = (_1186 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1186);
        float _1200 = (dot(vec3(_778, _779, _780), vec3(_1191 * _1183, _1191 * _1184, _1191 * _1185)) + 1.0) * 0.5;
        float _4100 = isnan(0.0) ? _1200 : (isnan(_1200) ? 0.0 : max(_1200, 0.0));
        float _1210 = sqrt(((_1184 * _1184) + (_1183 * _1183)) + (_1185 * _1185)) / (_1180 + 9.9999997473787516355514526367188e-06);
        float _4111 = isnan(0.0) ? _1210 : (isnan(_1210) ? 0.0 : max(_1210, 0.0));
        float _1211 = isnan(1.0) ? _4111 : (isnan(_4111) ? 1.0 : min(_4111, 1.0));
        float _1212 = _1211 * 2.0;
        float _1216 = (1.0 - _1211) / (_1211 + 1.0);
        float _4122 = isnan(0.0) ? _1216 : (isnan(_1216) ? 0.0 : max(_1216, 0.0));
        float _1217 = isnan(1.0) ? _4122 : (isnan(_4122) ? 1.0 : min(_4122, 1.0));
        float _1226 = ((((1.0 - _1217) * (_1212 + 2.0)) * exp2(log2(isnan(1.0) ? _4100 : (isnan(_4100) ? 1.0 : min(_4100, 1.0))) * (_1212 + 1.0))) + _1217) * _1180;
        float _1227 = _1148 * 0.5;
        float _1228 = _1158 * 0.5;
        float _1229 = _1168 * 0.5;
        float _1230 = dot(vec3(_1227, _1228, _1229), vec3(_1227, _1228, _1229));
        float _1235 = (_1230 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1230);
        float _1243 = (dot(vec3(_778, _779, _780), vec3(_1235 * _1227, _1235 * _1228, _1235 * _1229)) + 1.0) * 0.5;
        float _4133 = isnan(0.0) ? _1243 : (isnan(_1243) ? 0.0 : max(_1243, 0.0));
        float _1252 = sqrt(((_1228 * _1228) + (_1227 * _1227)) + (_1229 * _1229)) / (_1181 + 9.9999997473787516355514526367188e-06);
        float _4144 = isnan(0.0) ? _1252 : (isnan(_1252) ? 0.0 : max(_1252, 0.0));
        float _1253 = isnan(1.0) ? _4144 : (isnan(_4144) ? 1.0 : min(_4144, 1.0));
        float _1254 = _1253 * 2.0;
        float _1258 = (1.0 - _1253) / (_1253 + 1.0);
        float _4155 = isnan(0.0) ? _1258 : (isnan(_1258) ? 0.0 : max(_1258, 0.0));
        float _1259 = isnan(1.0) ? _4155 : (isnan(_4155) ? 1.0 : min(_4155, 1.0));
        float _1268 = ((((1.0 - _1259) * (_1254 + 2.0)) * exp2(log2(isnan(1.0) ? _4133 : (isnan(_4133) ? 1.0 : min(_4133, 1.0))) * (_1254 + 1.0))) + _1259) * _1181;
        float _1269 = _1149 * 0.5;
        float _1270 = _1159 * 0.5;
        float _1271 = _1169 * 0.5;
        float _1272 = dot(vec3(_1269, _1270, _1271), vec3(_1269, _1270, _1271));
        float _1277 = (_1272 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1272);
        float _1285 = (dot(vec3(_778, _779, _780), vec3(_1277 * _1269, _1277 * _1270, _1277 * _1271)) + 1.0) * 0.5;
        float _4166 = isnan(0.0) ? _1285 : (isnan(_1285) ? 0.0 : max(_1285, 0.0));
        float _1294 = sqrt(((_1270 * _1270) + (_1269 * _1269)) + (_1271 * _1271)) / (_1182 + 9.9999997473787516355514526367188e-06);
        float _4177 = isnan(0.0) ? _1294 : (isnan(_1294) ? 0.0 : max(_1294, 0.0));
        float _1295 = isnan(1.0) ? _4177 : (isnan(_4177) ? 1.0 : min(_4177, 1.0));
        float _1296 = _1295 * 2.0;
        float _1300 = (1.0 - _1295) / (_1295 + 1.0);
        float _4188 = isnan(0.0) ? _1300 : (isnan(_1300) ? 0.0 : max(_1300, 0.0));
        float _1301 = isnan(1.0) ? _4188 : (isnan(_4188) ? 1.0 : min(_4188, 1.0));
        float _1310 = ((((1.0 - _1301) * (_1296 + 2.0)) * exp2(log2(isnan(1.0) ? _4166 : (isnan(_4166) ? 1.0 : min(_4166, 1.0))) * (_1296 + 1.0))) + _1301) * _1182;
        _1318 = _1149;
        _1320 = _1148;
        _1321 = _1147;
        _1322 = _1159;
        _1323 = _1158;
        _1324 = _1157;
        _1325 = _1169;
        _1326 = _1168;
        _1327 = _1167;
        _1328 = _1182;
        _1329 = _1181;
        _1330 = _1180;
        _1331 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1226 : (isnan(_1226) ? 0.0 : max(_1226, 0.0)));
        _1332 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1268 : (isnan(_1268) ? 0.0 : max(_1268, 0.0)));
        _1333 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1310 : (isnan(_1310) ? 0.0 : max(_1310, 0.0)));
    }
    else
    {
        _1318 = _1319;
        _1320 = _1319;
        _1321 = _1319;
        _1322 = _1319;
        _1323 = _1319;
        _1324 = _1319;
        _1325 = _1319;
        _1326 = _1319;
        _1327 = _1319;
        _1328 = _1319;
        _1329 = _1319;
        _1330 = _1319;
        _1331 = 0.0;
        _1332 = 0.0;
        _1333 = 0.0;
    }
    float _1628;
    float _1629;
    float _1630;
    float _1631;
    float _1632;
    float _1633;
    float _1634;
    float _1635;
    float _1636;
    float _1637;
    float _1638;
    float _1639;
    float _1640;
    float _1641;
    float _1642;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1359 = fma(_1016, cbModelParam._m0[30u].z, fma(_1012, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1008));
        float _1363 = fma(_1016, cbModelParam._m0[31u].z, fma(_1012, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1008));
        float _1367 = fma(_1016, cbModelParam._m0[32u].z, fma(_1012, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1008));
        float _1390 = _1008 + _778;
        float _1391 = _1012 + _779;
        float _1392 = _1016 + _780;
        float _1402 = fma(_1392, cbModelParam._m0[30u].z, fma(_1391, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1390)) - _1359;
        float _1403 = fma(_1392, cbModelParam._m0[31u].z, fma(_1391, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1390)) - _1363;
        float _1404 = fma(_1392, cbModelParam._m0[32u].z, fma(_1391, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1390)) - _1367;
        float _1408 = inversesqrt(dot(vec3(_1402, _1403, _1404), vec3(_1402, _1403, _1404)));
        float _1421 = ((_1408 * _1402) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1359 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1422 = ((_1408 * _1403) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1363 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1423 = ((_1408 * _1404) / cbModelParam._m0[35u].z) + ((((((_1367 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1425 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1421, _1422, _1423), 0.0);
        vec4 _1432 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1421, _1422, _1423), 0.0);
        vec4 _1439 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1421, _1422, _1423), 0.0);
        vec4 _1446 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1421, _1422, _1423), 0.0);
        float _1458 = exp2((_1425.w + (-0.5)) * 20.0) * 2.0;
        float _1459 = _1458 * (_1425.x + (-0.5));
        float _1460 = _1458 * (_1425.y + (-0.5));
        float _1461 = _1458 * (_1425.z + (-0.5));
        float _1468 = exp2((_1432.w + (-0.5)) * 20.0) * 2.0;
        float _1469 = _1468 * (_1432.x + (-0.5));
        float _1470 = _1468 * (_1432.y + (-0.5));
        float _1471 = _1468 * (_1432.z + (-0.5));
        float _1478 = exp2((_1439.w + (-0.5)) * 20.0) * 2.0;
        float _1479 = _1478 * (_1439.x + (-0.5));
        float _1480 = _1478 * (_1439.y + (-0.5));
        float _1481 = _1478 * (_1439.z + (-0.5));
        float _1488 = exp2((_1446.w + (-0.5)) * 20.0) * 2.0;
        float _1489 = _1488 * (_1446.x + (-0.5));
        float _1490 = _1488 * (_1446.y + (-0.5));
        float _1491 = _1488 * (_1446.z + (-0.5));
        float _1492 = isnan(0.0) ? _1489 : (isnan(_1489) ? 0.0 : max(_1489, 0.0));
        float _1493 = isnan(0.0) ? _1490 : (isnan(_1490) ? 0.0 : max(_1490, 0.0));
        float _1494 = isnan(0.0) ? _1491 : (isnan(_1491) ? 0.0 : max(_1491, 0.0));
        float _1495 = _1459 * 0.5;
        float _1496 = _1469 * 0.5;
        float _1497 = _1479 * 0.5;
        float _1498 = dot(vec3(_1495, _1496, _1497), vec3(_1495, _1496, _1497));
        float _1503 = (_1498 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1498);
        float _1511 = (dot(vec3(_778, _779, _780), vec3(_1503 * _1495, _1503 * _1496, _1503 * _1497)) + 1.0) * 0.5;
        float _4229 = isnan(0.0) ? _1511 : (isnan(_1511) ? 0.0 : max(_1511, 0.0));
        float _1520 = sqrt(((_1496 * _1496) + (_1495 * _1495)) + (_1497 * _1497)) / (_1492 + 9.9999997473787516355514526367188e-06);
        float _4240 = isnan(0.0) ? _1520 : (isnan(_1520) ? 0.0 : max(_1520, 0.0));
        float _1521 = isnan(1.0) ? _4240 : (isnan(_4240) ? 1.0 : min(_4240, 1.0));
        float _1522 = _1521 * 2.0;
        float _1526 = (1.0 - _1521) / (_1521 + 1.0);
        float _4251 = isnan(0.0) ? _1526 : (isnan(_1526) ? 0.0 : max(_1526, 0.0));
        float _1527 = isnan(1.0) ? _4251 : (isnan(_4251) ? 1.0 : min(_4251, 1.0));
        float _1536 = ((((1.0 - _1527) * (_1522 + 2.0)) * exp2(log2(isnan(1.0) ? _4229 : (isnan(_4229) ? 1.0 : min(_4229, 1.0))) * (_1522 + 1.0))) + _1527) * _1492;
        float _1537 = _1460 * 0.5;
        float _1538 = _1470 * 0.5;
        float _1539 = _1480 * 0.5;
        float _1540 = dot(vec3(_1537, _1538, _1539), vec3(_1537, _1538, _1539));
        float _1545 = (_1540 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1540);
        float _1553 = (dot(vec3(_778, _779, _780), vec3(_1545 * _1537, _1545 * _1538, _1545 * _1539)) + 1.0) * 0.5;
        float _4262 = isnan(0.0) ? _1553 : (isnan(_1553) ? 0.0 : max(_1553, 0.0));
        float _1562 = sqrt(((_1538 * _1538) + (_1537 * _1537)) + (_1539 * _1539)) / (_1493 + 9.9999997473787516355514526367188e-06);
        float _4273 = isnan(0.0) ? _1562 : (isnan(_1562) ? 0.0 : max(_1562, 0.0));
        float _1563 = isnan(1.0) ? _4273 : (isnan(_4273) ? 1.0 : min(_4273, 1.0));
        float _1564 = _1563 * 2.0;
        float _1568 = (1.0 - _1563) / (_1563 + 1.0);
        float _4284 = isnan(0.0) ? _1568 : (isnan(_1568) ? 0.0 : max(_1568, 0.0));
        float _1569 = isnan(1.0) ? _4284 : (isnan(_4284) ? 1.0 : min(_4284, 1.0));
        float _1578 = ((((1.0 - _1569) * (_1564 + 2.0)) * exp2(log2(isnan(1.0) ? _4262 : (isnan(_4262) ? 1.0 : min(_4262, 1.0))) * (_1564 + 1.0))) + _1569) * _1493;
        float _1579 = _1461 * 0.5;
        float _1580 = _1471 * 0.5;
        float _1581 = _1481 * 0.5;
        float _1582 = dot(vec3(_1579, _1580, _1581), vec3(_1579, _1580, _1581));
        float _1587 = (_1582 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1582);
        float _1595 = (dot(vec3(_778, _779, _780), vec3(_1587 * _1579, _1587 * _1580, _1587 * _1581)) + 1.0) * 0.5;
        float _4295 = isnan(0.0) ? _1595 : (isnan(_1595) ? 0.0 : max(_1595, 0.0));
        float _1604 = sqrt(((_1580 * _1580) + (_1579 * _1579)) + (_1581 * _1581)) / (_1494 + 9.9999997473787516355514526367188e-06);
        float _4306 = isnan(0.0) ? _1604 : (isnan(_1604) ? 0.0 : max(_1604, 0.0));
        float _1605 = isnan(1.0) ? _4306 : (isnan(_4306) ? 1.0 : min(_4306, 1.0));
        float _1606 = _1605 * 2.0;
        float _1610 = (1.0 - _1605) / (_1605 + 1.0);
        float _4317 = isnan(0.0) ? _1610 : (isnan(_1610) ? 0.0 : max(_1610, 0.0));
        float _1611 = isnan(1.0) ? _4317 : (isnan(_4317) ? 1.0 : min(_4317, 1.0));
        float _1620 = ((((1.0 - _1611) * (_1606 + 2.0)) * exp2(log2(isnan(1.0) ? _4295 : (isnan(_4295) ? 1.0 : min(_4295, 1.0))) * (_1606 + 1.0))) + _1611) * _1494;
        _1628 = _1461;
        _1629 = _1460;
        _1630 = _1459;
        _1631 = _1471;
        _1632 = _1470;
        _1633 = _1469;
        _1634 = _1481;
        _1635 = _1480;
        _1636 = _1479;
        _1637 = _1494;
        _1638 = _1493;
        _1639 = _1492;
        _1640 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1536 : (isnan(_1536) ? 0.0 : max(_1536, 0.0)));
        _1641 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1578 : (isnan(_1578) ? 0.0 : max(_1578, 0.0)));
        _1642 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1620 : (isnan(_1620) ? 0.0 : max(_1620, 0.0)));
    }
    else
    {
        _1628 = _1319;
        _1629 = _1319;
        _1630 = _1319;
        _1631 = _1319;
        _1632 = _1319;
        _1633 = _1319;
        _1634 = _1319;
        _1635 = _1319;
        _1636 = _1319;
        _1637 = _1319;
        _1638 = _1319;
        _1639 = _1319;
        _1640 = 0.0;
        _1641 = 0.0;
        _1642 = 0.0;
    }
    float _1652 = (cbModelParam._m0[1u].x * (_1640 - _1331)) + _1331;
    float _1653 = (cbModelParam._m0[1u].x * (_1641 - _1332)) + _1332;
    float _1654 = (cbModelParam._m0[1u].x * (_1642 - _1333)) + _1333;
    float _1675 = fma(_1654, cbSceneParam._m0[89u].z, fma(_1653, cbSceneParam._m0[89u].y, _1652 * cbSceneParam._m0[89u].x));
    float _1678 = fma(_1654, cbSceneParam._m0[90u].z, fma(_1653, cbSceneParam._m0[90u].y, _1652 * cbSceneParam._m0[90u].x));
    float _1681 = fma(_1654, cbSceneParam._m0[91u].z, fma(_1653, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1652));
    float _1696 = _952 * 0.5;
    float _1697 = _953 * 0.5;
    float _1698 = _954 * 0.5;
    float _1699 = dot(vec4(_1696, _1697, _1698, 1.0), vec4(_1630, _1633, _1636, _1639));
    float _1702 = dot(vec4(_1696, _1697, _1698, 1.0), vec4(_1629, _1632, _1635, _1638));
    float _1705 = dot(vec4(_1696, _1697, _1698, 1.0), vec4(_1628, _1631, _1634, _1637));
    float _1739;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1712 = dot(vec4(_1696, _1697, _1698, 1.0), vec4(_1318, _1322, _1325, _1328));
        float _1716 = dot(vec4(_1696, _1697, _1698, 1.0), vec4(_1320, _1323, _1326, _1329));
        float _1720 = dot(vec4(_1696, _1697, _1698, 1.0), vec4(_1321, _1324, _1327, _1330));
        float _1727 = dot(vec4(cbModelParam._m0[39u]), vec4(_1696, _1697, _1698, 1.0));
        _1739 = dot(vec3(isnan(0.0) ? _1720 : (isnan(_1720) ? 0.0 : max(_1720, 0.0)), isnan(0.0) ? _1716 : (isnan(_1716) ? 0.0 : max(_1716, 0.0)), isnan(0.0) ? _1712 : (isnan(_1712) ? 0.0 : max(_1712, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1727) ? 0.0 : (isnan(0.0) ? _1727 : max(0.0, _1727))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1739 = 1.0;
    }
    float _1750;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1741 = dot(vec4(cbModelParam._m0[40u]), vec4(_1696, _1697, _1698, 1.0));
        _1750 = dot(vec3(isnan(0.0) ? _1699 : (isnan(_1699) ? 0.0 : max(_1699, 0.0)), isnan(0.0) ? _1702 : (isnan(_1702) ? 0.0 : max(_1702, 0.0)), isnan(0.0) ? _1705 : (isnan(_1705) ? 0.0 : max(_1705, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1741) ? 0.0 : (isnan(0.0) ? _1741 : max(0.0, _1741))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1750 = 1.0;
    }
    float _1754 = (_1750 * cbModelParam._m0[1u].x) + (_1739 * (1.0 - cbModelParam._m0[1u].x));
    float _1764 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _781);
    float _1765 = isnan(_1764) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1764 : min(cbModelParam._m0[25u].z, _1764));
    float _1845;
    float _1847;
    float _1849;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1812 = fma(_1016, cbModelParam._m0[13u].z, fma(_1012, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1008)) + cbModelParam._m0[13u].w;
        float _1816 = fma(_1016, cbModelParam._m0[14u].z, fma(_1012, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1008)) + cbModelParam._m0[14u].w;
        float _1820 = fma(_1016, cbModelParam._m0[15u].z, fma(_1012, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1008)) + cbModelParam._m0[15u].w;
        float _1823 = fma(_954, cbModelParam._m0[13u].z, fma(_953, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _952));
        float _1826 = fma(_954, cbModelParam._m0[14u].z, fma(_953, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _952));
        float _1829 = fma(_954, cbModelParam._m0[15u].z, fma(_953, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _952));
        float _1857;
        if (_1823 > 0.0)
        {
            _1857 = abs((1.0 - _1812) / _1823);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1823 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1812 + 1.0) / _1823);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1857 = frontier_phi_14_12_ladder;
        }
        float _2030;
        if (_1826 > 0.0)
        {
            _2030 = abs((1.0 - _1816) / _1826);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1826 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1816 + 1.0) / _1826);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2030 = frontier_phi_23_19_ladder;
        }
        float _2326;
        if (_1829 > 0.0)
        {
            _2326 = abs((1.0 - _1820) / _1829);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1829 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1820 + 1.0) / _1829);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2326 = frontier_phi_35_30_ladder;
        }
        float _2328 = isnan(_2030) ? _1857 : (isnan(_1857) ? _2030 : min(_1857, _2030));
        float _2329 = isnan(_2326) ? _2328 : (isnan(_2328) ? _2326 : min(_2328, _2326));
        float _2333 = (_2329 * _1823) + _1812;
        float _2334 = (_2329 * _1826) + _1816;
        float _2335 = (_2329 * _1829) + _1820;
        float _2336 = _2329 * 9.9999997473787516355514526367188e-05;
        float _2338 = (-1.0) - _2336;
        float _2340 = _2336 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2335 > _2340) || ((_2335 < _2338) || ((_2334 > _2340) || ((_2334 < _2338) || ((_2333 < _2338) || (_2333 > _2340))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2480 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2335, cbModelParam._m0[9u].z, fma(_2334, cbModelParam._m0[9u].y, _2333 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2335, cbModelParam._m0[10u].z, fma(_2334, cbModelParam._m0[10u].y, _2333 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2335, cbModelParam._m0[11u].z, fma(_2334, cbModelParam._m0[11u].y, _2333 * cbModelParam._m0[11u].x))), _1765);
            frontier_phi_13_35_ladder = _2480.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2480.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2480.x * cbModelParam._m0[1u].y;
        }
        _1845 = frontier_phi_13_35_ladder_2;
        _1847 = frontier_phi_13_35_ladder_1;
        _1849 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1833 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_952, _953, _954), _1765);
        _1845 = _1833.x * cbModelParam._m0[1u].y;
        _1847 = _1833.y * cbModelParam._m0[1u].y;
        _1849 = _1833.z * cbModelParam._m0[1u].y;
    }
    float _1853 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _781);
    float _1854 = isnan(_1853) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1853 : min(cbModelParam._m0[25u].w, _1853));
    float _1945;
    float _1947;
    float _1949;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1909 = fma(_1016, cbModelParam._m0[21u].z, fma(_1012, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1008)) + cbModelParam._m0[21u].w;
        float _1913 = fma(_1016, cbModelParam._m0[22u].z, fma(_1012, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1008)) + cbModelParam._m0[22u].w;
        float _1917 = fma(_1016, cbModelParam._m0[23u].z, fma(_1012, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1008)) + cbModelParam._m0[23u].w;
        float _1920 = fma(_954, cbModelParam._m0[21u].z, fma(_953, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _952));
        float _1923 = fma(_954, cbModelParam._m0[22u].z, fma(_953, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _952));
        float _1926 = fma(_954, cbModelParam._m0[23u].z, fma(_953, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _952));
        float _2035;
        if (_1920 > 0.0)
        {
            _2035 = abs((1.0 - _1909) / _1920);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1920 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1909 + 1.0) / _1920);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2035 = frontier_phi_25_21_ladder;
        }
        float _2353;
        if (_1923 > 0.0)
        {
            _2353 = abs((1.0 - _1913) / _1923);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1923 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1913 + 1.0) / _1923);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2353 = frontier_phi_37_32_ladder;
        }
        float _2691;
        if (_1926 > 0.0)
        {
            _2691 = abs((1.0 - _1917) / _1926);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1926 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1917 + 1.0) / _1926);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2691 = frontier_phi_47_44_ladder;
        }
        float _2693 = isnan(_2353) ? _2035 : (isnan(_2035) ? _2353 : min(_2035, _2353));
        float _2694 = isnan(_2691) ? _2693 : (isnan(_2693) ? _2691 : min(_2693, _2691));
        float _2698 = (_2694 * _1920) + _1909;
        float _2699 = (_2694 * _1923) + _1913;
        float _2700 = (_2694 * _1926) + _1917;
        float _2701 = _2694 * 9.9999997473787516355514526367188e-05;
        float _2702 = (-1.0) - _2701;
        float _2704 = _2701 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2700 > _2704) || ((_2700 < _2702) || ((_2699 > _2704) || ((_2699 < _2702) || ((_2698 < _2702) || (_2698 > _2704))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2822 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2700, cbModelParam._m0[17u].z, fma(_2699, cbModelParam._m0[17u].y, _2698 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2700, cbModelParam._m0[18u].z, fma(_2699, cbModelParam._m0[18u].y, _2698 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2700, cbModelParam._m0[19u].z, fma(_2699, cbModelParam._m0[19u].y, _2698 * cbModelParam._m0[19u].x))), _1854);
            frontier_phi_22_47_ladder = _2822.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2822.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2822.x * cbModelParam._m0[1u].z;
        }
        _1945 = frontier_phi_22_47_ladder_2;
        _1947 = frontier_phi_22_47_ladder_1;
        _1949 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1929 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_952, _953, _954), _1854);
        _1945 = _1929.x * cbModelParam._m0[1u].z;
        _1947 = _1929.y * cbModelParam._m0[1u].z;
        _1949 = _1929.z * cbModelParam._m0[1u].z;
    }
    float _1962 = (((_979 * _929) + _980) * _944) * ((cbModelParam._m0[1u].w * (_1945 - _1845)) + _1845);
    float _1964 = (((_979 * _931) + _980) * _944) * ((cbModelParam._m0[1u].w * (_1947 - _1847)) + _1847);
    float _1966 = (((_979 * _932) + _980) * _944) * ((cbModelParam._m0[1u].w * (_1949 - _1849)) + _1849);
    float _1969 = fma(_1966, cbSceneParam._m0[89u].z, fma(_1964, cbSceneParam._m0[89u].y, _1962 * cbSceneParam._m0[89u].x));
    float _1972 = fma(_1966, cbSceneParam._m0[90u].z, fma(_1964, cbSceneParam._m0[90u].y, _1962 * cbSceneParam._m0[90u].x));
    float _1975 = fma(_1966, cbSceneParam._m0[91u].z, fma(_1964, cbSceneParam._m0[91u].y, _1962 * cbSceneParam._m0[91u].x));
    float _2009 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2013 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2017 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2021 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2022 = _2009 / _2021;
    float _2023 = _2013 / _2021;
    float _2024 = _2017 / _2021;
    float _2171;
    float _2172;
    float _2173;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2051 = ((uint(_2024 > cbSceneParam._m0[59u].y) + uint(_2024 > cbSceneParam._m0[59u].x)) + uint(_2024 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2052 = _2051 + 43u;
        uint _2060 = _2051 + 44u;
        uint _2068 = _2051 + 45u;
        uint _2076 = _2051 + 46u;
        float _2087 = fma(_2021, cbSceneParam._m0[_2052].w, fma(_2017, cbSceneParam._m0[_2052].z, fma(_2013, cbSceneParam._m0[_2052].y, _2009 * cbSceneParam._m0[_2052].x)));
        float _2091 = fma(_2021, cbSceneParam._m0[_2060].w, fma(_2017, cbSceneParam._m0[_2060].z, fma(_2013, cbSceneParam._m0[_2060].y, _2009 * cbSceneParam._m0[_2060].x)));
        float _2099 = fma(_2021, cbSceneParam._m0[_2076].w, fma(_2017, cbSceneParam._m0[_2076].z, fma(_2013, cbSceneParam._m0[_2076].y, _2009 * cbSceneParam._m0[_2076].x)));
        float _2104 = cbSceneParam._m0[33u].z * _2099;
        float _2106 = cbSceneParam._m0[33u].w * _2099;
        float _2109 = fma(_2021, cbSceneParam._m0[_2068].w, fma(_2017, cbSceneParam._m0[_2068].z, fma(_2013, cbSceneParam._m0[_2068].y, _2009 * cbSceneParam._m0[_2068].x))) / _2099;
        float _2157 = (cbSceneParam._m0[33u].x - sqrt(((_2023 * _2023) + (_2022 * _2022)) + (_2024 * _2024))) * cbSceneParam._m0[33u].y;
        float _4443 = isnan(0.0) ? _2157 : (isnan(_2157) ? 0.0 : max(_2157, 0.0));
        float _2164 = (isnan(1.0) ? _4443 : (isnan(_4443) ? 1.0 : min(_4443, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2104 + _2087) / _2099, (_2106 + _2091) / _2099), _2109), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2106 + _2087) / _2099, (_2091 - _2104) / _2099), _2109), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2087 - _2104) / _2099, (_2091 - _2106) / _2099), _2109), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2087 - _2106) / _2099, (_2104 + _2091) / _2099), _2109), 0.0)).x), vec4(0.25)));
        _2171 = 1.0 - (_2164 * cbSceneParam._m0[34u].x);
        _2172 = 1.0 - (_2164 * cbSceneParam._m0[34u].y);
        _2173 = 1.0 - (_2164 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2171 = 1.0;
        _2172 = 1.0;
        _2173 = 1.0;
    }
    float _2237;
    float _2239;
    float _2241;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2225 = fma(_2021, cbSceneParam._m0[63u].w, fma(_2017, cbSceneParam._m0[63u].z, fma(_2013, cbSceneParam._m0[63u].y, _2009 * cbSceneParam._m0[63u].x)));
        float _2226 = fma(_2021, cbSceneParam._m0[60u].w, fma(_2017, cbSceneParam._m0[60u].z, fma(_2013, cbSceneParam._m0[60u].y, _2009 * cbSceneParam._m0[60u].x))) / _2225;
        float _2227 = fma(_2021, cbSceneParam._m0[61u].w, fma(_2017, cbSceneParam._m0[61u].z, fma(_2013, cbSceneParam._m0[61u].y, _2009 * cbSceneParam._m0[61u].x))) / _2225;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2226 >= cbSceneParam._m0[64u].x) && (_2227 >= cbSceneParam._m0[64u].y)) && (_2226 <= cbSceneParam._m0[64u].z)) && (_2227 <= cbSceneParam._m0[64u].w))
        {
            float _2366 = fma(_2021, cbSceneParam._m0[62u].w, fma(_2017, cbSceneParam._m0[62u].z, fma(_2013, cbSceneParam._m0[62u].y, _2009 * cbSceneParam._m0[62u].x))) / _2225;
            float _2370 = isnan(cbSceneParam._m0[41u].w) ? _2366 : (isnan(_2366) ? cbSceneParam._m0[41u].w : max(_2366, cbSceneParam._m0[41u].w));
            float _2413 = (cbSceneParam._m0[33u].x - sqrt(((_2023 * _2023) + (_2022 * _2022)) + (_2024 * _2024))) * cbSceneParam._m0[33u].y;
            float _4459 = isnan(0.0) ? _2413 : (isnan(_2413) ? 0.0 : max(_2413, 0.0));
            float _2420 = (isnan(1.0) ? _4459 : (isnan(_4459) ? 1.0 : min(_4459, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2226, cbSceneParam._m0[33u].w + _2227), _2370), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2226, _2227 - cbSceneParam._m0[33u].z), _2370), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2226 - cbSceneParam._m0[33u].z, _2227 - cbSceneParam._m0[33u].w), _2370), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2226 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2227), _2370), 0.0)).x), vec4(0.25)));
            float _2424 = 1.0 - (_2420 * cbSceneParam._m0[34u].x);
            float _2425 = 1.0 - (_2420 * cbSceneParam._m0[34u].y);
            float _2426 = 1.0 - (_2420 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2426) ? _2173 : (isnan(_2173) ? _2426 : min(_2173, _2426));
            frontier_phi_34_33_ladder_1 = isnan(_2425) ? _2172 : (isnan(_2172) ? _2425 : min(_2172, _2425));
            frontier_phi_34_33_ladder_2 = isnan(_2424) ? _2171 : (isnan(_2171) ? _2424 : min(_2171, _2424));
        }
        else
        {
            frontier_phi_34_33_ladder = _2173;
            frontier_phi_34_33_ladder_1 = _2172;
            frontier_phi_34_33_ladder_2 = _2171;
        }
        _2237 = frontier_phi_34_33_ladder_2;
        _2239 = frontier_phi_34_33_ladder_1;
        _2241 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2237 = _2171;
        _2239 = _2172;
        _2241 = _2173;
    }
    uvec4 _2246 = floatBitsToUint(cbInstanceData._m0[_904 + 5u]);
    uint _2248 = _2246.x * 14u;
    uint _2249 = _2248 + 13u;
    float _2256 = _944 + (-1.0);
    float _2261 = (cbLight._m0[_2249].x * _2256) + 1.0;
    float _2262 = (cbLight._m0[_2249].y * _2256) + 1.0;
    float _2263 = (cbLight._m0[_2249].z * _2256) + 1.0;
    float _2264 = (cbLight._m0[_2249].w * _2256) + 1.0;
    uint _2265 = _2248 + 5u;
    float _2271 = isnan(1.0) ? _2262 : (isnan(_2262) ? 1.0 : min(_2262, 1.0));
    uint _2275 = _2248 + 4u;
    float _2285 = isnan(1.0) ? _2261 : (isnan(_2261) ? 1.0 : min(_2261, 1.0));
    uint _2289 = _2248 | 1u;
    float _2300 = dot(vec3(cbLight._m0[_2248].xyz), vec3(_778, _779, _780));
    float _2303 = dot(vec3(cbLight._m0[_2289].xyz), vec3(_778, _779, _780));
    float _4495 = isnan(0.0) ? _2300 : (isnan(_2300) ? 0.0 : max(_2300, 0.0));
    float _4506 = isnan(0.0) ? _2303 : (isnan(_2303) ? 0.0 : max(_2303, 0.0));
    float _2308 = (isnan(1.0) ? _4495 : (isnan(_4495) ? 1.0 : min(_4495, 1.0))) * 0.3183098733425140380859375;
    float _2310 = (isnan(1.0) ? _4506 : (isnan(_4506) ? 1.0 : min(_4506, 1.0))) * 0.3183098733425140380859375;
    float _2317 = ((cbLight._m0[_2265].x * _2271) * _2310) + (((cbLight._m0[_2275].x * _2237) * _2285) * _2308);
    float _2318 = ((_2271 * cbLight._m0[_2265].y) * _2310) + (((cbLight._m0[_2275].y * _2239) * _2285) * _2308);
    float _2319 = ((_2271 * cbLight._m0[_2265].z) * _2310) + (((cbLight._m0[_2275].z * _2241) * _2285) * _2308);
    uvec4 _2323 = floatBitsToUint(cbLight._m0[_2248 + 12u]);
    bool _2325 = _2323.x == 0u;
    float _2427;
    float _2429;
    float _2431;
    if (_2325)
    {
        _2427 = _2317;
        _2429 = _2318;
        _2431 = _2319;
    }
    else
    {
        uint _2435 = _2248 + 6u;
        float _2451 = (dot(vec3(cbLight._m0[_2248 + 2u].xyz), vec3(_778, _779, _780)) * 0.5) + 0.5;
        float _2452 = _2451 * _2451;
        float _4517 = isnan(0.0) ? _2452 : (isnan(_2452) ? 0.0 : max(_2452, 0.0));
        float _2453 = isnan(1.0) ? _4517 : (isnan(_4517) ? 1.0 : min(_4517, 1.0));
        float _2454 = isnan(1.0) ? _2263 : (isnan(_2263) ? 1.0 : min(_2263, 1.0));
        _2427 = (((cbLight._m0[_2435].x * 0.3183098733425140380859375) * _2453) * _2454) + _2317;
        _2429 = (((cbLight._m0[_2435].y * 0.3183098733425140380859375) * _2453) * _2454) + _2318;
        _2431 = (((cbLight._m0[_2435].z * 0.3183098733425140380859375) * _2453) * _2454) + _2319;
    }
    bool _2434 = _2323.y == 0u;
    float _2489;
    float _2491;
    float _2493;
    if (_2434)
    {
        _2489 = _2427;
        _2491 = _2429;
        _2493 = _2431;
    }
    else
    {
        uint _2662 = _2248 + 7u;
        float _2678 = (dot(vec3(cbLight._m0[_2248 + 3u].xyz), vec3(_778, _779, _780)) * 0.5) + 0.5;
        float _2679 = _2678 * _2678;
        float _4533 = isnan(0.0) ? _2679 : (isnan(_2679) ? 0.0 : max(_2679, 0.0));
        float _2680 = isnan(1.0) ? _4533 : (isnan(_4533) ? 1.0 : min(_4533, 1.0));
        float _2681 = isnan(1.0) ? _2264 : (isnan(_2264) ? 1.0 : min(_2264, 1.0));
        _2489 = (((cbLight._m0[_2662].x * 0.3183098733425140380859375) * _2680) * _2681) + _2427;
        _2491 = (((cbLight._m0[_2662].y * 0.3183098733425140380859375) * _2680) * _2681) + _2429;
        _2493 = (((cbLight._m0[_2662].z * 0.3183098733425140380859375) * _2680) * _2681) + _2431;
    }
    uint _2496 = _2248 + 8u;
    float _2509 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2248].w)) * _781) * 0.949999988079071044921875);
    float _2510 = _2509 * _2509;
    float _2511 = cbLight._m0[_2248].x + _858;
    float _2512 = cbLight._m0[_2248].y + _859;
    float _2513 = cbLight._m0[_2248].z + _860;
    float _2517 = inversesqrt(dot(vec3(_2511, _2512, _2513), vec3(_2511, _2512, _2513)));
    float _2518 = _2517 * _2511;
    float _2519 = _2517 * _2512;
    float _2520 = _2517 * _2513;
    float _2521 = dot(vec3(_778, _779, _780), vec3(cbLight._m0[_2248].xyz));
    float _4549 = isnan(0.0) ? _2521 : (isnan(_2521) ? 0.0 : max(_2521, 0.0));
    float _2524 = isnan(1.0) ? _4549 : (isnan(_4549) ? 1.0 : min(_4549, 1.0));
    float _4560 = isnan(0.0) ? _945 : (isnan(_945) ? 0.0 : max(_945, 0.0));
    float _2525 = isnan(1.0) ? _4560 : (isnan(_4560) ? 1.0 : min(_4560, 1.0));
    float _2526 = dot(vec3(_778, _779, _780), vec3(_2518, _2519, _2520));
    float _4571 = isnan(0.0) ? _2526 : (isnan(_2526) ? 0.0 : max(_2526, 0.0));
    float _2529 = isnan(1.0) ? _4571 : (isnan(_4571) ? 1.0 : min(_4571, 1.0));
    float _2530 = dot(vec3(cbLight._m0[_2248].xyz), vec3(_2518, _2519, _2520));
    float _4582 = isnan(0.0) ? _2530 : (isnan(_2530) ? 0.0 : max(_2530, 0.0));
    float _2534 = _2510 * _2510;
    float _2538 = ((_2529 * _2529) * (_2534 + (-1.0))) + 1.0;
    float _2546 = exp2(log2(1.0 - (isnan(1.0) ? _4582 : (isnan(_4582) ? 1.0 : min(_4582, 1.0)))) * 5.0);
    float _2547 = 0.959999978542327880859375 - _926;
    float _2549 = 0.959999978542327880859375 - _927;
    float _2550 = 0.959999978542327880859375 - _928;
    float _2557 = 1.0 - _2510;
    float _2568 = (0.5 / (((_2525 * ((_2524 * _2557) + _2510)) + 9.9999999392252902907785028219223e-09) + (((_2525 * _2557) + _2510) * _2524))) * _2524;
    float _4593 = isnan(0.0) ? _2568 : (isnan(_2568) ? 0.0 : max(_2568, 0.0));
    float _2570 = (isnan(1.0) ? _4593 : (isnan(_4593) ? 1.0 : min(_4593, 1.0))) * (_2534 / ((_2538 * _2538) * 3.141590118408203125));
    uint _2584 = _2248 + 9u;
    float _2595 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2289].w)) * _781) * 0.949999988079071044921875);
    float _2596 = _2595 * _2595;
    float _2597 = cbLight._m0[_2289].x + _858;
    float _2598 = cbLight._m0[_2289].y + _859;
    float _2599 = cbLight._m0[_2289].z + _860;
    float _2603 = inversesqrt(dot(vec3(_2597, _2598, _2599), vec3(_2597, _2598, _2599)));
    float _2604 = _2603 * _2597;
    float _2605 = _2603 * _2598;
    float _2606 = _2603 * _2599;
    float _2607 = dot(vec3(_778, _779, _780), vec3(cbLight._m0[_2289].xyz));
    float _4604 = isnan(0.0) ? _2607 : (isnan(_2607) ? 0.0 : max(_2607, 0.0));
    float _2610 = isnan(1.0) ? _4604 : (isnan(_4604) ? 1.0 : min(_4604, 1.0));
    float _2611 = dot(vec3(_778, _779, _780), vec3(_2604, _2605, _2606));
    float _4615 = isnan(0.0) ? _2611 : (isnan(_2611) ? 0.0 : max(_2611, 0.0));
    float _2614 = isnan(1.0) ? _4615 : (isnan(_4615) ? 1.0 : min(_4615, 1.0));
    float _2615 = dot(vec3(cbLight._m0[_2289].xyz), vec3(_2604, _2605, _2606));
    float _4626 = isnan(0.0) ? _2615 : (isnan(_2615) ? 0.0 : max(_2615, 0.0));
    float _2619 = _2596 * _2596;
    float _2623 = ((_2614 * _2614) * (_2619 + (-1.0))) + 1.0;
    float _2630 = exp2(log2(1.0 - (isnan(1.0) ? _4626 : (isnan(_4626) ? 1.0 : min(_4626, 1.0)))) * 5.0);
    float _2637 = 1.0 - _2596;
    float _2647 = (0.5 / (((_2525 * ((_2610 * _2637) + _2596)) + 9.9999999392252902907785028219223e-09) + (((_2525 * _2637) + _2596) * _2610))) * _2610;
    float _4637 = isnan(0.0) ? _2647 : (isnan(_2647) ? 0.0 : max(_2647, 0.0));
    float _2649 = (isnan(1.0) ? _4637 : (isnan(_4637) ? 1.0 : min(_4637, 1.0))) * (_2619 / ((_2623 * _2623) * 3.141590118408203125));
    float _2659 = (((((_2630 * _2547) + _929) * cbLight._m0[_2584].x) * _2649) * _2271) + ((((cbLight._m0[_2496].x * _2237) * ((_2546 * _2547) + _929)) * _2570) * _2285);
    float _2660 = (((((_2630 * _2549) + _931) * cbLight._m0[_2584].y) * _2649) * _2271) + ((((cbLight._m0[_2496].y * _2239) * ((_2546 * _2549) + _931)) * _2570) * _2285);
    float _2661 = (((((_2630 * _2550) + _932) * cbLight._m0[_2584].z) * _2649) * _2271) + ((((cbLight._m0[_2496].z * _2241) * ((_2546 * _2550) + _932)) * _2570) * _2285);
    float _2717;
    float _2719;
    float _2721;
    if (_2325)
    {
        _2717 = _2659;
        _2719 = _2660;
        _2721 = _2661;
    }
    else
    {
        uint _2723 = _2248 + 2u;
        uint _2727 = _2248 + 10u;
        float _2741 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2723].w)) * _781) * 0.949999988079071044921875);
        float _2742 = _2741 * _2741;
        float _2743 = cbLight._m0[_2723].x + _858;
        float _2744 = cbLight._m0[_2723].y + _859;
        float _2745 = cbLight._m0[_2723].z + _860;
        float _2749 = inversesqrt(dot(vec3(_2743, _2744, _2745), vec3(_2743, _2744, _2745)));
        float _2750 = _2749 * _2743;
        float _2751 = _2749 * _2744;
        float _2752 = _2749 * _2745;
        float _2753 = dot(vec3(_778, _779, _780), vec3(cbLight._m0[_2723].xyz));
        float _4648 = isnan(0.0) ? _2753 : (isnan(_2753) ? 0.0 : max(_2753, 0.0));
        float _2756 = isnan(1.0) ? _4648 : (isnan(_4648) ? 1.0 : min(_4648, 1.0));
        float _2757 = dot(vec3(_778, _779, _780), vec3(_2750, _2751, _2752));
        float _4659 = isnan(0.0) ? _2757 : (isnan(_2757) ? 0.0 : max(_2757, 0.0));
        float _2760 = isnan(1.0) ? _4659 : (isnan(_4659) ? 1.0 : min(_4659, 1.0));
        float _2761 = dot(vec3(cbLight._m0[_2723].xyz), vec3(_2750, _2751, _2752));
        float _4670 = isnan(0.0) ? _2761 : (isnan(_2761) ? 0.0 : max(_2761, 0.0));
        float _2765 = _2742 * _2742;
        float _2769 = ((_2760 * _2760) * (_2765 + (-1.0))) + 1.0;
        float _2776 = exp2(log2(1.0 - (isnan(1.0) ? _4670 : (isnan(_4670) ? 1.0 : min(_4670, 1.0)))) * 5.0);
        float _2783 = 1.0 - _2742;
        float _2793 = (0.5 / (((_2525 * ((_2756 * _2783) + _2742)) + 9.9999999392252902907785028219223e-09) + (((_2525 * _2783) + _2742) * _2756))) * _2756;
        float _4681 = isnan(0.0) ? _2793 : (isnan(_2793) ? 0.0 : max(_2793, 0.0));
        float _2795 = (isnan(1.0) ? _4681 : (isnan(_4681) ? 1.0 : min(_4681, 1.0))) * (_2765 / ((_2769 * _2769) * 3.141590118408203125));
        float _2796 = isnan(1.0) ? _2263 : (isnan(_2263) ? 1.0 : min(_2263, 1.0));
        _2717 = (((((_2776 * _2547) + _929) * cbLight._m0[_2727].x) * _2795) * _2796) + _2659;
        _2719 = (((((_2776 * _2549) + _931) * cbLight._m0[_2727].y) * _2795) * _2796) + _2660;
        _2721 = (((((_2776 * _2550) + _932) * cbLight._m0[_2727].z) * _2795) * _2796) + _2661;
    }
    float _2827;
    float _2829;
    float _2831;
    if (_2434)
    {
        _2827 = _2717;
        _2829 = _2719;
        _2831 = _2721;
    }
    else
    {
        uint _2838 = _2248 + 3u;
        uint _2842 = _2248 + 11u;
        float _2856 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2838].w)) * _781) * 0.949999988079071044921875);
        float _2857 = _2856 * _2856;
        float _2858 = cbLight._m0[_2838].x + _858;
        float _2859 = cbLight._m0[_2838].y + _859;
        float _2860 = cbLight._m0[_2838].z + _860;
        float _2864 = inversesqrt(dot(vec3(_2858, _2859, _2860), vec3(_2858, _2859, _2860)));
        float _2865 = _2864 * _2858;
        float _2866 = _2864 * _2859;
        float _2867 = _2864 * _2860;
        float _2868 = dot(vec3(_778, _779, _780), vec3(cbLight._m0[_2838].xyz));
        float _4697 = isnan(0.0) ? _2868 : (isnan(_2868) ? 0.0 : max(_2868, 0.0));
        float _2871 = isnan(1.0) ? _4697 : (isnan(_4697) ? 1.0 : min(_4697, 1.0));
        float _2872 = dot(vec3(_778, _779, _780), vec3(_2865, _2866, _2867));
        float _4708 = isnan(0.0) ? _2872 : (isnan(_2872) ? 0.0 : max(_2872, 0.0));
        float _2875 = isnan(1.0) ? _4708 : (isnan(_4708) ? 1.0 : min(_4708, 1.0));
        float _2876 = dot(vec3(cbLight._m0[_2838].xyz), vec3(_2865, _2866, _2867));
        float _4719 = isnan(0.0) ? _2876 : (isnan(_2876) ? 0.0 : max(_2876, 0.0));
        float _2880 = _2857 * _2857;
        float _2884 = ((_2875 * _2875) * (_2880 + (-1.0))) + 1.0;
        float _2891 = exp2(log2(1.0 - (isnan(1.0) ? _4719 : (isnan(_4719) ? 1.0 : min(_4719, 1.0)))) * 5.0);
        float _2898 = 1.0 - _2857;
        float _2908 = (0.5 / (((_2525 * ((_2871 * _2898) + _2857)) + 9.9999999392252902907785028219223e-09) + (((_2525 * _2898) + _2857) * _2871))) * _2871;
        float _4730 = isnan(0.0) ? _2908 : (isnan(_2908) ? 0.0 : max(_2908, 0.0));
        float _2910 = (isnan(1.0) ? _4730 : (isnan(_4730) ? 1.0 : min(_4730, 1.0))) * (_2880 / ((_2884 * _2884) * 3.141590118408203125));
        float _2911 = isnan(1.0) ? _2264 : (isnan(_2264) ? 1.0 : min(_2264, 1.0));
        _2827 = (((((_2891 * _2547) + _929) * cbLight._m0[_2842].x) * _2910) * _2911) + _2717;
        _2829 = (((((_2891 * _2549) + _931) * cbLight._m0[_2842].y) * _2910) * _2911) + _2719;
        _2831 = (((((_2891 * _2550) + _932) * cbLight._m0[_2842].z) * _2910) * _2911) + _2721;
    }
    float _2977;
    float _2979;
    float _2981;
    float _2983;
    float _2985;
    float _2987;
    if (_2246.y == 0u)
    {
        uvec4 _2932 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2933 = _2932.x;
        uint _2944 = uint((float(_2932.y) * floor(float(uint(cbSceneParam._m0[85u].y * _867) / _2933))) + floor(float(uint(cbSceneParam._m0[85u].x * _866) / _2933)));
        float _2954 = (log2(_2024 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2955 = isnan(0.0) ? _2954 : (isnan(_2954) ? 0.0 : max(_2954, 0.0));
        uint _2958 = uint(isnan(14.0) ? _2955 : (isnan(_2955) ? 14.0 : min(_2955, 14.0)));
        uvec4 _2963 = texelFetch(g_lightClusterGridBuffer, int(((_2958 << 2u) + (_2944 << 6u)) >> 2u));
        uint _2964 = _2963.x;
        uint _2965 = _2932.z;
        float _3044;
        float _3046;
        float _3048;
        float _3050;
        float _3052;
        float _3054;
        if (((((1u << ((_2965 >> 4u) & 15u)) + 4294967295u) & _2964) == 0u) || ((_2965 & 240u) == 0u))
        {
            _3044 = 0.0;
            _3046 = 0.0;
            _3048 = 0.0;
            _3050 = 0.0;
            _3052 = 0.0;
            _3054 = 0.0;
        }
        else
        {
            float _3045;
            float _3047;
            float _3049;
            float _3051;
            float _3053;
            float _3055;
            float _3188 = 0.0;
            float _3189 = 0.0;
            float _3190 = 0.0;
            float _3191 = 0.0;
            float _3192 = 0.0;
            float _3193 = 0.0;
            uint _3194 = 0u;
            uint _3203;
            bool _3204;
            for (;;)
            {
                _3203 = texelFetch(g_lightClassification, int((((_2958 << 5u) + (_2944 << 9u)) + (_3194 << 2u)) >> 2u)).x;
                _3204 = _3203 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3204)
                {
                    frontier_phi_66_pred = _3193;
                    frontier_phi_66_pred_1 = _3192;
                    frontier_phi_66_pred_2 = _3191;
                    frontier_phi_66_pred_3 = _3190;
                    frontier_phi_66_pred_4 = _3189;
                    frontier_phi_66_pred_5 = _3188;
                }
                else
                {
                    float _3312;
                    float _3313;
                    float _3314;
                    float _3315;
                    float _3316;
                    float _3317;
                    uint _3318;
                    _3312 = _3188;
                    _3313 = _3189;
                    _3314 = _3190;
                    _3315 = _3191;
                    _3316 = _3192;
                    _3317 = _3193;
                    _3318 = _3203;
                    float _3244;
                    float _3245;
                    float _3246;
                    float _3247;
                    float _3248;
                    float _3249;
                    for (;;)
                    {
                        uint _3322 = uint(findLSB(_3318)) + (_3194 << 5u);
                        uint _3319 = (_3318 + 4294967295u) & _3318;
                        uint _3324 = _3322 * 48u;
                        vec4 _3338 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3324)).x, texelFetch(g_PointLightRenderingBuffer, int(_3324 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3324 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3324 + 3u)).x));
                        uint _3344 = (_3322 * 48u) + 4u;
                        vec4 _3357 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3344)).x, texelFetch(g_PointLightRenderingBuffer, int(_3344 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3344 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3344 + 3u)).x));
                        uint _3363 = (_3322 * 48u) + 8u;
                        vec3 _3374 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3363)).x, texelFetch(g_PointLightRenderingBuffer, int(_3363 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3363 + 2u)).x));
                        float _3378 = _3338.x - _2022;
                        float _3379 = _3338.y - _2023;
                        float _3380 = _3338.z - _2024;
                        float _3381 = dot(vec3(_3378, _3379, _3380), vec3(_3378, _3379, _3380));
                        float _3384 = inversesqrt(_3381);
                        float _3385 = _3384 * _3378;
                        float _3386 = _3384 * _3379;
                        float _3387 = _3384 * _3380;
                        float _3388 = dot(vec3(_885, _888, _891), vec3(_3385, _3386, _3387));
                        float _3393 = 1.0 - (_3381 * _3338.w);
                        float _4756 = isnan(0.0) ? _3393 : (isnan(_3393) ? 0.0 : max(_3393, 0.0));
                        float _3394 = isnan(1.0) ? _4756 : (isnan(_4756) ? 1.0 : min(_4756, 1.0));
                        float _3395 = sqrt(_3381) * _3357.w;
                        float _3398 = 1.39999997615814208984375 / (_3395 + 1.39999997615814208984375);
                        float _3399 = _3398 * _3398;
                        float _3402 = ((1.0 - _3399) * _3388) + _3399;
                        float _3405 = _3395 * _3395;
                        float _3409 = ((isnan(0.0) ? _3402 : (isnan(_3402) ? 0.0 : max(_3402, 0.0))) * _3394) / ((_3405 * 0.699999988079071044921875) + 1.0);
                        float _3413 = (-0.0) - _2022;
                        float _3414 = (-0.0) - _2023;
                        float _3415 = (-0.0) - _2024;
                        float _3419 = inversesqrt(dot(vec3(_3413, _3414, _3415), vec3(_3413, _3414, _3415)));
                        float _3420 = _3419 * _3413;
                        float _3421 = _3419 * _3414;
                        float _3422 = _3419 * _3415;
                        float _3429 = exp2(log2(1.0 / ((_3405 * 3.5) + 5.0)) * 0.25);
                        float _3430 = 1.0 - _960;
                        float _3437 = sqrt(1.0 - ((1.0 - (_3430 * _3430)) * (1.0 - (_3429 * _3429))));
                        float _3438 = _3437 * _3437;
                        float _3439 = _3438 * _3438;
                        float _3440 = _3420 + _3385;
                        float _3441 = _3421 + _3386;
                        float _3442 = _3422 + _3387;
                        float _3446 = inversesqrt(dot(vec3(_3440, _3441, _3442), vec3(_3440, _3441, _3442)));
                        float _3450 = dot(vec3(_885, _888, _891), vec3(_3420, _3421, _3422));
                        float _4772 = isnan(0.0) ? _3450 : (isnan(_3450) ? 0.0 : max(_3450, 0.0));
                        float _3453 = isnan(1.0) ? _4772 : (isnan(_4772) ? 1.0 : min(_4772, 1.0));
                        float _3454 = dot(vec3(_885, _888, _891), vec3(_3446 * _3440, _3446 * _3441, _3446 * _3442));
                        float _4783 = isnan(0.0) ? _3454 : (isnan(_3454) ? 0.0 : max(_3454, 0.0));
                        float _3457 = isnan(1.0) ? _4783 : (isnan(_4783) ? 1.0 : min(_4783, 1.0));
                        float _3461 = ((_3457 * _3457) * (_3439 + (-1.0))) + 1.0;
                        float _3462 = _3398 * _3438;
                        float _3463 = _3462 * _3462;
                        float _3466 = ((1.0 - _3463) * _3388) + _3463;
                        float _4794 = isnan(0.0) ? _3466 : (isnan(_3466) ? 0.0 : max(_3466, 0.0));
                        float _3467 = isnan(1.0) ? _4794 : (isnan(_4794) ? 1.0 : min(_4794, 1.0));
                        float _3468 = 1.0 - _3438;
                        float _3478 = (0.5 / (((_3467 * ((_3453 * _3468) + _3438)) + 9.9999999392252902907785028219223e-09) + (((_3467 * _3468) + _3438) * _3453))) * _3467;
                        float _4805 = isnan(0.0) ? _3478 : (isnan(_3478) ? 0.0 : max(_3478, 0.0));
                        float _3489 = (((_3439 * 3.1415927410125732421875) * (isnan(1.0) ? _4805 : (isnan(_4805) ? 1.0 : min(_4805, 1.0)))) / ((_3461 * _3461) * ((_3405 * 2.1991131305694580078125) + 3.141590118408203125))) * _3394;
                        _3247 = (_3409 * _3357.x) + _3315;
                        _3248 = (_3409 * _3357.y) + _3316;
                        _3249 = (_3409 * _3357.z) + _3317;
                        _3244 = (_3489 * _3374.x) + _3312;
                        _3245 = (_3489 * _3374.y) + _3313;
                        _3246 = (_3489 * _3374.z) + _3314;
                        if (_3319 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3312 = _3244;
                            _3313 = _3245;
                            _3314 = _3246;
                            _3315 = _3247;
                            _3316 = _3248;
                            _3317 = _3249;
                            _3318 = _3319;
                        }
                    }
                    frontier_phi_66_pred = _3249;
                    frontier_phi_66_pred_1 = _3248;
                    frontier_phi_66_pred_2 = _3247;
                    frontier_phi_66_pred_3 = _3246;
                    frontier_phi_66_pred_4 = _3245;
                    frontier_phi_66_pred_5 = _3244;
                }
                _3055 = frontier_phi_66_pred;
                _3053 = frontier_phi_66_pred_1;
                _3051 = frontier_phi_66_pred_2;
                _3049 = frontier_phi_66_pred_3;
                _3047 = frontier_phi_66_pred_4;
                _3045 = frontier_phi_66_pred_5;
                uint _3195 = _3194 + 1u;
                if (_3195 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3188 = _3045;
                    _3189 = _3047;
                    _3190 = _3049;
                    _3191 = _3051;
                    _3192 = _3053;
                    _3193 = _3055;
                    _3194 = _3195;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3044 = _3045;
            _3046 = _3047;
            _3048 = _3049;
            _3050 = _3051;
            _3052 = _3053;
            _3054 = _3055;
        }
        uvec4 _3058 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3059 = _3058.z;
        uint _3061 = (_3059 >> 8u) & 15u;
        float _3156;
        float _3158;
        float _3160;
        float _3162;
        float _3164;
        float _3166;
        if (((4294967295u << _3061) & _2964) == 0u)
        {
            _3156 = _3044;
            _3158 = _3046;
            _3160 = _3048;
            _3162 = _3050;
            _3164 = _3052;
            _3166 = _3054;
        }
        else
        {
            float _3181 = inversesqrt(dot(vec3(_2022, _2023, _2024), vec3(_2022, _2023, _2024)));
            float _3182 = _3181 * _2022;
            float _3183 = _3181 * _2023;
            float _3184 = _3181 * _2024;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_3061 < ((_3059 >> 12u) & 15u))
            {
                float _3157;
                float _3159;
                float _3161;
                float _3163;
                float _3165;
                float _3167;
                float _3295 = _3044;
                float _3296 = _3046;
                float _3297 = _3048;
                float _3298 = _3050;
                float _3299 = _3052;
                float _3300 = _3054;
                uint _3301 = _3061;
                uint _3310;
                bool _3311;
                for (;;)
                {
                    _3310 = texelFetch(g_lightClassification, int((((_2958 << 5u) + (_2944 << 9u)) + (_3301 << 2u)) >> 2u)).x;
                    _3311 = _3310 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3311)
                    {
                        frontier_phi_72_pred = _3300;
                        frontier_phi_72_pred_1 = _3299;
                        frontier_phi_72_pred_2 = _3298;
                        frontier_phi_72_pred_3 = _3297;
                        frontier_phi_72_pred_4 = _3296;
                        frontier_phi_72_pred_5 = _3295;
                    }
                    else
                    {
                        float _3494;
                        float _3495;
                        float _3496;
                        float _3497;
                        float _3498;
                        float _3499;
                        float _3788;
                        float _3789;
                        float _3790;
                        float _3791;
                        float _3792;
                        float _3793;
                        float _3507 = _3295;
                        float _3508 = _3296;
                        float _3509 = _3297;
                        float _3510 = _3298;
                        float _3511 = _3299;
                        float _3512 = _3300;
                        uint _3513 = _3310;
                        uint _3514;
                        vec4 _3539;
                        float _3540;
                        vec4 _3555;
                        vec3 _3567;
                        vec4 _3582;
                        vec4 _3597;
                        float _3644;
                        bool _3645;
                        for (;;)
                        {
                            uint _3524 = ((_3301 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3513));
                            _3514 = (_3513 + 4294967295u) & _3513;
                            uint _3526 = _3524 * 40u;
                            _3539 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3526)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3526 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3526 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3526 + 3u)).x));
                            _3540 = _3539.w;
                            uint _3542 = (_3524 * 40u) + 4u;
                            _3555 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3542)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3542 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3542 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3542 + 3u)).x));
                            uint _3557 = (_3524 * 40u) + 8u;
                            _3567 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3557)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3557 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3557 + 2u)).x));
                            uint _3569 = (_3524 * 40u) + 16u;
                            _3582 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3569)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3569 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3569 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3569 + 3u)).x));
                            uint _3584 = (_3524 * 40u) + 20u;
                            _3597 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3584)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3584 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3584 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3584 + 3u)).x));
                            uint _3600 = (_3524 * 40u) + 24u;
                            vec4 _3613 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3600)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3600 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3600 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3600 + 3u)).x));
                            uint _3619 = (_3524 * 40u) + 28u;
                            vec4 _3632 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3619)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3619 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3619 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3619 + 3u)).x));
                            _3644 = fma(_2024, _3632.z, fma(_2023, _3632.y, _3632.x * _2022)) + _3632.w;
                            _3645 = !((fma(_2024, _3613.z, fma(_2023, _3613.y, _3613.x * _2022)) + _3613.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3645)
                            {
                                float _3672 = _3539.x - _2022;
                                float _3673 = _3539.y - _2023;
                                float _3674 = _3539.z - _2024;
                                float _3675 = dot(vec3(_3672, _3673, _3674), vec3(_3672, _3673, _3674));
                                float _3678 = inversesqrt(_3675);
                                float _3679 = _3678 * _3672;
                                float _3680 = _3678 * _3673;
                                float _3681 = _3678 * _3674;
                                float _3685 = 1.0 - (_3675 / (_3540 * _3540));
                                float _4816 = isnan(0.0) ? _3685 : (isnan(_3685) ? 0.0 : max(_3685, 0.0));
                                float _3686 = isnan(1.0) ? _4816 : (isnan(_4816) ? 1.0 : min(_4816, 1.0));
                                float _3690 = sqrt(_3675) * _3555.w;
                                float _3692 = 1.39999997615814208984375 / (_3690 + 1.39999997615814208984375);
                                float _3693 = _3692 * _3692;
                                float _3696 = ((1.0 - _3693) * dot(vec3(_3679, _3680, _3681), vec3(_885, _888, _891))) + _3693;
                                float _3699 = _3690 * _3690;
                                float _3703 = (fma(_2024, _3582.z, fma(_2023, _3582.y, _3582.x * _2022)) + _3582.w) / _3644;
                                float _3704 = (fma(_2024, _3597.z, fma(_2023, _3597.y, _3597.x * _2022)) + _3597.w) / _3644;
                                float _3708 = 1.0 - dot(vec2(_3703, _3704), vec2(_3703, _3704));
                                float _4832 = isnan(0.0) ? _3708 : (isnan(_3708) ? 0.0 : max(_3708, 0.0));
                                float _3709 = isnan(1.0) ? _4832 : (isnan(_4832) ? 1.0 : min(_4832, 1.0));
                                float _3710 = _3709 * (((isnan(0.0) ? _3696 : (isnan(_3696) ? 0.0 : max(_3696, 0.0))) * _3686) / ((_3699 * 0.699999988079071044921875) + 1.0));
                                float _3722 = exp2(log2(1.0 / ((_3699 * 3.5) + 5.0)) * 0.25);
                                float _3723 = 1.0 - _960;
                                float _3730 = sqrt(1.0 - ((1.0 - (_3723 * _3723)) * (1.0 - (_3722 * _3722))));
                                float _3731 = _3730 * _3730;
                                float _3732 = _3731 * _3731;
                                float _3733 = _3679 - _3182;
                                float _3734 = _3680 - _3183;
                                float _3735 = _3681 - _3184;
                                float _3739 = inversesqrt(dot(vec3(_3733, _3734, _3735), vec3(_3733, _3734, _3735)));
                                float _3743 = dot(vec3(_885, _888, _891), vec3((-0.0) - _3182, (-0.0) - _3183, (-0.0) - _3184));
                                float _4843 = isnan(0.0) ? _3743 : (isnan(_3743) ? 0.0 : max(_3743, 0.0));
                                float _3746 = isnan(1.0) ? _4843 : (isnan(_4843) ? 1.0 : min(_4843, 1.0));
                                float _3747 = dot(vec3(_885, _888, _891), vec3(_3739 * _3733, _3739 * _3734, _3739 * _3735));
                                float _4854 = isnan(0.0) ? _3747 : (isnan(_3747) ? 0.0 : max(_3747, 0.0));
                                float _3750 = isnan(1.0) ? _4854 : (isnan(_4854) ? 1.0 : min(_4854, 1.0));
                                float _3754 = ((_3750 * _3750) * (_3732 + (-1.0))) + 1.0;
                                float _3755 = _3692 * _3731;
                                float _3756 = _3755 * _3755;
                                float _3762 = ((1.0 - _3756) * dot(vec3(_885, _888, _891), vec3(_3679, _3680, _3681))) + _3756;
                                float _4865 = isnan(0.0) ? _3762 : (isnan(_3762) ? 0.0 : max(_3762, 0.0));
                                float _3763 = isnan(1.0) ? _4865 : (isnan(_4865) ? 1.0 : min(_4865, 1.0));
                                float _3764 = 1.0 - _3731;
                                float _3774 = (0.5 / (((_3763 * ((_3746 * _3764) + _3731)) + 9.9999999392252902907785028219223e-09) + (((_3763 * _3764) + _3731) * _3746))) * _3763;
                                float _4876 = isnan(0.0) ? _3774 : (isnan(_3774) ? 0.0 : max(_3774, 0.0));
                                float _3784 = (_3709 * _3686) * (((_3732 * 3.1415927410125732421875) * (isnan(1.0) ? _4876 : (isnan(_4876) ? 1.0 : min(_4876, 1.0)))) / ((_3754 * _3754) * ((_3699 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3710 * _3555.y;
                                frontier_phi_78_pred_1 = _3710 * _3555.x;
                                frontier_phi_78_pred_2 = _3784 * _3567.z;
                                frontier_phi_78_pred_3 = _3784 * _3567.y;
                                frontier_phi_78_pred_4 = _3784 * _3567.x;
                                frontier_phi_78_pred_5 = _3710 * _3555.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3792 = frontier_phi_78_pred;
                            _3791 = frontier_phi_78_pred_1;
                            _3790 = frontier_phi_78_pred_2;
                            _3789 = frontier_phi_78_pred_3;
                            _3788 = frontier_phi_78_pred_4;
                            _3793 = frontier_phi_78_pred_5;
                            _3497 = _3791 + _3510;
                            _3498 = _3792 + _3511;
                            _3499 = _3793 + _3512;
                            _3494 = _3788 + _3507;
                            _3495 = _3789 + _3508;
                            _3496 = _3790 + _3509;
                            if (_3514 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3507 = _3494;
                                _3508 = _3495;
                                _3509 = _3496;
                                _3510 = _3497;
                                _3511 = _3498;
                                _3512 = _3499;
                                _3513 = _3514;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3499;
                        frontier_phi_72_pred_1 = _3498;
                        frontier_phi_72_pred_2 = _3497;
                        frontier_phi_72_pred_3 = _3496;
                        frontier_phi_72_pred_4 = _3495;
                        frontier_phi_72_pred_5 = _3494;
                    }
                    _3167 = frontier_phi_72_pred;
                    _3165 = frontier_phi_72_pred_1;
                    _3163 = frontier_phi_72_pred_2;
                    _3161 = frontier_phi_72_pred_3;
                    _3159 = frontier_phi_72_pred_4;
                    _3157 = frontier_phi_72_pred_5;
                    uint _3302 = _3301 + 1u;
                    if (_3302 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3295 = _3157;
                        _3296 = _3159;
                        _3297 = _3161;
                        _3298 = _3163;
                        _3299 = _3165;
                        _3300 = _3167;
                        _3301 = _3302;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3167;
                frontier_phi_60_61_ladder_1 = _3165;
                frontier_phi_60_61_ladder_2 = _3161;
                frontier_phi_60_61_ladder_3 = _3159;
                frontier_phi_60_61_ladder_4 = _3157;
                frontier_phi_60_61_ladder_5 = _3163;
            }
            else
            {
                frontier_phi_60_61_ladder = _3054;
                frontier_phi_60_61_ladder_1 = _3052;
                frontier_phi_60_61_ladder_2 = _3048;
                frontier_phi_60_61_ladder_3 = _3046;
                frontier_phi_60_61_ladder_4 = _3044;
                frontier_phi_60_61_ladder_5 = _3050;
            }
            _3156 = frontier_phi_60_61_ladder_4;
            _3158 = frontier_phi_60_61_ladder_3;
            _3160 = frontier_phi_60_61_ladder_2;
            _3162 = frontier_phi_60_61_ladder_5;
            _3164 = frontier_phi_60_61_ladder_1;
            _3166 = frontier_phi_60_61_ladder;
        }
        float _3171 = isnan(1.0) ? _944 : (isnan(_944) ? 1.0 : min(_944, 1.0));
        _2977 = (_3171 * _3162) + _2489;
        _2979 = (_3171 * _3164) + _2491;
        _2981 = (_3171 * _3166) + _2493;
        _2983 = ((_3156 * _929) * _3171) + _2827;
        _2985 = ((_3158 * _931) * _3171) + _2829;
        _2987 = ((_3160 * _932) * _3171) + _2831;
    }
    else
    {
        _2977 = _2489;
        _2979 = _2491;
        _2981 = _2493;
        _2983 = _2827;
        _2985 = _2829;
        _2987 = _2831;
    }
    float _4892 = isnan(0.0) ? _919 : (isnan(_919) ? 0.0 : max(_919, 0.0));
    float _4903 = isnan(0.0) ? _920 : (isnan(_920) ? 0.0 : max(_920, 0.0));
    float _4914 = isnan(0.0) ? _921 : (isnan(_921) ? 0.0 : max(_921, 0.0));
    uint _3007 = _904 + 6u;
    float _3015 = _866 / cbSceneParam._m0[86u].x;
    float _3016 = _867 / cbSceneParam._m0[86u].y;
    vec4 _3030 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3015, _3016, (log2((isnan(cbSceneParam._m0[77u].w) ? _801 : (isnan(_801) ? cbSceneParam._m0[77u].w : min(_801, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3032 = _3030.x;
    float _3033 = _3030.y;
    float _3034 = _3030.z;
    float _3035 = _3030.w;
    float _3106;
    float _3108;
    float _3110;
    float _3112;
    if (_801 > cbSceneParam._m0[78u].w)
    {
        float _3069 = isnan(_801) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _801 : min(cbSceneParam._m0[80u].w, _801));
        float _3070 = _3069 / _801;
        float _3081 = _3070 * _851;
        float _3082 = _852 * _3070;
        float _3083 = (-0.0) - _3082;
        float _3084 = _3070 * _853;
        float _3086 = (cbSceneParam._m0[77u].w * _3083) / _3069;
        float _3087 = _3086 + cbSceneParam._m0[79u].w;
        float _3088 = cbSceneParam._m0[79u].w - _3082;
        float _3094 = sqrt(((_3081 * _3081) + (_3082 * _3082)) + (_3084 * _3084));
        float _3097 = (1.0 - (cbSceneParam._m0[77u].w / _3069)) * _3094;
        float _3102 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3104 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3257;
        if (abs((_3083 - _3086) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3257 = ((((_3087 > 0.0) ? exp2(_3102 * _3087) : (2.0 - exp2(_3104 * _3087))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3097;
        }
        else
        {
            float _3217 = 1.0 / cbSceneParam._m0[80u].x;
            float _3218 = isnan(_3088) ? _3087 : (isnan(_3087) ? _3088 : max(_3087, _3088));
            float _3219 = isnan(_3088) ? _3087 : (isnan(_3087) ? _3088 : min(_3087, _3088));
            float _3228 = isnan(0.0) ? _3218 : (isnan(_3218) ? 0.0 : min(_3218, 0.0));
            float _3229 = isnan(0.0) ? _3219 : (isnan(_3219) ? 0.0 : min(_3219, 0.0));
            _3257 = ((abs(_3094 / _3083) * cbSceneParam._m0[80u].y) * ((((_3228 - _3229) * 2.0) - ((exp2(_3102 * (isnan(0.0) ? _3218 : (isnan(_3218) ? 0.0 : max(_3218, 0.0)))) - exp2(_3102 * (isnan(0.0) ? _3219 : (isnan(_3219) ? 0.0 : max(_3219, 0.0))))) * _3217)) - ((exp2(_3104 * _3228) - exp2(_3104 * _3229)) * _3217))) + (_3097 * cbSceneParam._m0[80u].z);
        }
        vec4 _3259 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3015, _3016, 1.0), 0.0);
        float _3268 = exp2((_3257 * (-1.44269502162933349609375)) * (1.0 - _3259.w));
        float _3269 = log2(_3268);
        float _3285 = log2(_3035);
        _3106 = (exp2(_3285 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3269 * cbSceneParam._m0[78u].x)) * _3259.x) / cbSceneParam._m0[78u].x)) + _3032;
        _3108 = (exp2(_3285 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3269 * cbSceneParam._m0[78u].y)) * _3259.y) / cbSceneParam._m0[78u].y)) + _3033;
        _3110 = (exp2(_3285 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3269 * cbSceneParam._m0[78u].z)) * _3259.z) / cbSceneParam._m0[78u].z)) + _3034;
        _3112 = _3268 * _3035;
    }
    else
    {
        _3106 = _3032;
        _3108 = _3033;
        _3110 = _3034;
        _3112 = _3035;
    }
    float _3124 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3125 = _3124 == 3.0;
    float _3126 = log2(_3112);
    float _3133 = exp2(_3126 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4892 : (isnan(_4892) ? 1.0 : min(_4892, 1.0))) * (_2977 + ((isnan(0.0) ? _1675 : (isnan(_1675) ? 0.0 : max(_1675, 0.0))) * _944))) + ((_2983 + ((isnan(0.0) ? _1969 : (isnan(_1969) ? 0.0 : max(_1969, 0.0))) * _1754)) * cbPerFrame._m0[3u].x));
    float _3134 = exp2(_3126 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4903 : (isnan(_4903) ? 1.0 : min(_4903, 1.0))) * (_2979 + ((isnan(0.0) ? _1678 : (isnan(_1678) ? 0.0 : max(_1678, 0.0))) * _944))) + ((_2985 + ((isnan(0.0) ? _1972 : (isnan(_1972) ? 0.0 : max(_1972, 0.0))) * _1754)) * cbPerFrame._m0[3u].x));
    float _3135 = exp2(_3126 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4914 : (isnan(_4914) ? 1.0 : min(_4914, 1.0))) * (_2981 + ((isnan(0.0) ? _1681 : (isnan(_1681) ? 0.0 : max(_1681, 0.0))) * _944))) + ((_2987 + ((isnan(0.0) ? _1975 : (isnan(_1975) ? 0.0 : max(_1975, 0.0))) * _1754)) * cbPerFrame._m0[3u].x));
    float _3144 = (_3124 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3144 * (_3125 ? _3133 : (_3133 + (cbSceneParam._m0[72u].w * _3106)));
    SV_Target.y = _3144 * (_3125 ? _3134 : (_3134 + (cbSceneParam._m0[72u].w * _3108)));
    SV_Target.z = _3144 * (_3125 ? _3135 : (_3135 + (cbSceneParam._m0[72u].w * _3110)));
    SV_Target.w = cbInstanceData._m0[_3007].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3007].w;
}


