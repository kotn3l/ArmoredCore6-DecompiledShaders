#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[20];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_19;
layout(set = 0, binding = 11) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_3;
layout(set = 0, binding = 14) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_5;
layout(set = 0, binding = 15) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_6;
layout(set = 0, binding = 16) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_7;
layout(set = 0, binding = 17) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_8;
layout(set = 0, binding = 2) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_11;
layout(set = 0, binding = 5) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_14;
layout(set = 0, binding = 6) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_15;
layout(set = 0, binding = 7) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_16;
layout(set = 0, binding = 8) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_17;
layout(set = 0, binding = 9) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_18;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1211;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _203 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _204 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _205 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _211 = inversesqrt(dot(vec3(_203, _204, _205), vec3(_203, _204, _205)));
    float _218 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _225 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _248 = sin(cbMtdParam._m0[18u].x);
    float _249 = cos(cbMtdParam._m0[18u].x);
    float _250 = TEXCOORD.x - cbMtdParam._m0[17u].w;
    float _251 = TEXCOORD.y - cbMtdParam._m0[17u].w;
    float _259 = (cbMtdParam._m0[17u].w + cbMtdParam._m0[19u].y) + fma(_251, (-0.0) - _248, _249 * _250);
    float _261 = (cbMtdParam._m0[17u].w + cbMtdParam._m0[19u].z) + fma(_251, _249, _250 * _248);
    vec4 _274 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * _259) + cbTextureTilingScale._m0[1u].z, (_261 * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w));
    float _280 = _274.x * cbMtdParam._m0[10u].x;
    float _281 = _274.y * cbMtdParam._m0[10u].y;
    float _282 = _274.z * cbMtdParam._m0[10u].z;
    vec4 _300 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w));
    vec4 _319 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_0, SS_WrapLinear), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _344 = cbMtdParam._m0[19u].x * texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.x) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD.y) + cbTextureTilingScale._m0[13u].w)).x;
    float _355 = ((cbMtdParam._m0[15u].x * (-1.39999997615814208984375)) * (((1.0 - _319.x) * 2.0) - _344)) + 1.0;
    float _3823 = isnan(0.0) ? _355 : (isnan(_355) ? 0.0 : max(_355, 0.0));
    float _356 = isnan(1.0) ? _3823 : (isnan(_3823) ? 1.0 : min(_3823, 1.0));
    float _363 = (_356 * ((_300.x * cbMtdParam._m0[11u].x) - _280)) + _280;
    float _364 = (_356 * ((_300.y * cbMtdParam._m0[11u].y) - _281)) + _281;
    float _365 = (_356 * ((_300.z * cbMtdParam._m0[11u].z) - _282)) + _282;
    vec4 _383 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_8, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[17u].x * TEXCOORD.x) + cbTextureTilingScale._m0[17u].z, (cbTextureTilingScale._m0[17u].y * TEXCOORD.y) + cbTextureTilingScale._m0[17u].w));
    float _396 = (((((1.0 - _319.y) * 2.0) - _344) * (-1.39999997615814208984375)) * cbMtdParam._m0[18u].z) + 1.0;
    float _3834 = isnan(0.0) ? _396 : (isnan(_396) ? 0.0 : max(_396, 0.0));
    float _397 = isnan(1.0) ? _3834 : (isnan(_3834) ? 1.0 : min(_3834, 1.0));
    float _404 = (((_383.x * cbMtdParam._m0[12u].x) - _363) * _397) + _363;
    float _405 = (_397 * ((_383.y * cbMtdParam._m0[12u].y) - _364)) + _364;
    float _406 = (_397 * ((_383.z * cbMtdParam._m0[12u].z) - _365)) + _365;
    vec4 _423 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _436 = (((((1.0 - _319.z) * 2.0) - _344) * (-1.39999997615814208984375)) * cbMtdParam._m0[18u].w) + 1.0;
    float _3845 = isnan(0.0) ? _436 : (isnan(_436) ? 0.0 : max(_436, 0.0));
    float _437 = isnan(1.0) ? _3845 : (isnan(_3845) ? 1.0 : min(_3845, 1.0));
    float _444 = (((_423.x * cbMtdParam._m0[13u].x) - _404) * _437) + _404;
    float _445 = (_437 * ((_423.y * cbMtdParam._m0[13u].y) - _405)) + _405;
    float _446 = (_437 * ((_423.z * cbMtdParam._m0[13u].z) - _406)) + _406;
    vec4 _459 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * _259) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _261) + cbTextureTilingScale._m0[5u].w));
    float _461 = _459.x;
    float _479 = ((texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w)).x - _461) * _356) + _461;
    float _497 = ((texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w)).x - _479) * _397) + _479;
    float _516 = (((texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w)).x - _497) * _437) + _497) * cbMtdParam._m0[18u].y;
    vec4 _529 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[14u].x * _259) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _261) + cbTextureTilingScale._m0[14u].w));
    float _531 = _529.x;
    float _532 = _529.y;
    float _535 = cbMtdParam._m0[17u].y * _529.z;
    vec4 _547 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * TEXCOORD.x) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * TEXCOORD.y) + cbTextureTilingScale._m0[15u].w));
    float _556 = (((cbMtdParam._m0[17u].x * _547.z) - _535) * _356) + _535;
    vec4 _569 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_15, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _581 = (((cbMtdParam._m0[16u].w * _569.z) - _556) * _397) + _556;
    vec4 _594 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _603 = (((cbMtdParam._m0[16u].z * _594.z) - _581) * _437) + _581;
    vec4 _616 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[16u].x * TEXCOORD.x) + cbTextureTilingScale._m0[16u].z, (cbTextureTilingScale._m0[16u].y * TEXCOORD.y) + cbTextureTilingScale._m0[16u].w));
    float _629 = ((_547.x - _531) * _356) + _531;
    float _630 = ((_547.y - _532) * _356) + _532;
    float _635 = ((_569.x - _629) * _397) + _629;
    float _636 = ((_569.y - _630) * _397) + _630;
    float _645 = ((((_594.x - _635) * _437) + _635) * 2.0) + (-1.0);
    float _646 = ((((_594.y - _636) * _437) + _636) * 2.0) + (-1.0);
    float _647 = dot(vec2(_645, _646), vec2(_645, _646));
    float _3856 = isnan(0.0) ? _647 : (isnan(_647) ? 0.0 : max(_647, 0.0));
    float _652 = sqrt(1.0 - (isnan(1.0) ? _3856 : (isnan(_3856) ? 1.0 : min(_3856, 1.0))));
    float _655 = (((_616.x * 2.0) + (-1.0)) * cbMtdParam._m0[16u].y) + _645;
    float _656 = (((_616.y * 2.0) + (-1.0)) * cbMtdParam._m0[16u].y) + _646;
    float _659 = fma(_652, _218 * NORMAL.x, fma(_656, _225 * TANGENT.x, (_211 * _203) * _655));
    float _662 = fma(_652, _218 * NORMAL.y, fma(_656, _225 * TANGENT.y, (_211 * _204) * _655));
    float _665 = fma(_652, _218 * NORMAL.z, fma(_656, _225 * TANGENT.z, (_211 * _205) * _655));
    float _669 = inversesqrt(dot(vec3(_659, _662, _665), vec3(_659, _662, _665)));
    float _670 = _669 * _659;
    float _671 = _669 * _662;
    float _672 = _669 * _665;
    float _3867 = isnan(0.0) ? _603 : (isnan(_603) ? 0.0 : max(_603, 0.0));
    float _673 = isnan(1.0) ? _3867 : (isnan(_3867) ? 1.0 : min(_3867, 1.0));
    float _3878 = isnan(0.0) ? _444 : (isnan(_444) ? 0.0 : max(_444, 0.0));
    float _3889 = isnan(0.0) ? _445 : (isnan(_445) ? 0.0 : max(_445, 0.0));
    float _3900 = isnan(0.0) ? _446 : (isnan(_446) ? 0.0 : max(_446, 0.0));
    float _3911 = isnan(0.0) ? _516 : (isnan(_516) ? 0.0 : max(_516, 0.0));
    float _677 = isnan(1.0) ? _3911 : (isnan(_3911) ? 1.0 : min(_3911, 1.0));
    float _693 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _733 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _743 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _733);
    float _744 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _733);
    float _745 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _733);
    float _749 = inversesqrt(dot(vec3(_743, _744, _745), vec3(_743, _744, _745)));
    float _750 = _743 * _749;
    float _751 = _744 * _749;
    float _752 = _745 * _749;
    float _758 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _759 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _777 = fma(_672, cbSceneParam._m0[5u].z, fma(_671, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _670));
    float _780 = fma(_672, cbSceneParam._m0[6u].z, fma(_671, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _670));
    float _783 = fma(_672, cbSceneParam._m0[7u].z, fma(_671, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _670));
    uint _796 = uint(roundEven(NORMAL.w)) * 13u;
    uint _798 = (_796 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _804 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3878 : (isnan(_3878) ? 1.0 : min(_3878, 1.0)))) * cbInstanceData._m0[_798].x;
    float _805 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3889 : (isnan(_3889) ? 1.0 : min(_3889, 1.0)))) * cbInstanceData._m0[_798].y;
    float _806 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3900 : (isnan(_3900) ? 1.0 : min(_3900, 1.0)))) * cbInstanceData._m0[_798].z;
    float _3922 = isnan(0.0) ? _804 : (isnan(_804) ? 0.0 : max(_804, 0.0));
    float _807 = isnan(1.0) ? _3922 : (isnan(_3922) ? 1.0 : min(_3922, 1.0));
    float _3933 = isnan(0.0) ? _805 : (isnan(_805) ? 0.0 : max(_805, 0.0));
    float _808 = isnan(1.0) ? _3933 : (isnan(_3933) ? 1.0 : min(_3933, 1.0));
    float _3944 = isnan(0.0) ? _806 : (isnan(_806) ? 0.0 : max(_806, 0.0));
    float _809 = isnan(1.0) ? _3944 : (isnan(_3944) ? 1.0 : min(_3944, 1.0));
    float _810 = 1.0 - _677;
    float _811 = _807 * _810;
    float _812 = _808 * _810;
    float _813 = _809 * _810;
    float _818 = (_807 + (-0.039999999105930328369140625)) * _677;
    float _819 = (_808 + (-0.039999999105930328369140625)) * _677;
    float _820 = (_809 + (-0.039999999105930328369140625)) * _677;
    float _821 = _818 + 0.039999999105930328369140625;
    float _823 = _819 + 0.039999999105930328369140625;
    float _824 = _820 + 0.039999999105930328369140625;
    vec4 _833 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _758, cbSceneParam._m0[86u].y * _759));
    float _836 = _833.x * TEXCOORD_5.w;
    float _837 = dot(vec3(_670, _671, _672), vec3(_750, _751, _752));
    float _840 = _837 * 2.0;
    float _844 = (_840 * _670) - _750;
    float _845 = (_840 * _671) - _751;
    float _846 = (_840 * _672) - _752;
    float _850 = abs(dot(vec3(_750, _751, _752), vec3(_670, _671, _672)));
    float _3955 = isnan(0.0) ? _850 : (isnan(_850) ? 0.0 : max(_850, 0.0));
    float _852 = sqrt(_673);
    float _865 = exp2((_852 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3955 : (isnan(_3955) ? 1.0 : min(_3955, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_852 * 3.0));
    float _871 = (1.0 - _865) * ((_852 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _872 = _865 * _852;
    float _900 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _904 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _908 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1210;
    float _1212;
    float _1213;
    float _1214;
    float _1215;
    float _1216;
    float _1217;
    float _1218;
    float _1219;
    float _1220;
    float _1221;
    float _1222;
    float _1223;
    float _1224;
    float _1225;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _935 = fma(_908, cbModelParam._m0[26u].z, fma(_904, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _900));
        float _939 = fma(_908, cbModelParam._m0[27u].z, fma(_904, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _900));
        float _943 = fma(_908, cbModelParam._m0[28u].z, fma(_904, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _900));
        float _968 = _900 + _670;
        float _969 = _904 + _671;
        float _970 = _908 + _672;
        float _980 = fma(_970, cbModelParam._m0[26u].z, fma(_969, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _968)) - _935;
        float _981 = fma(_970, cbModelParam._m0[27u].z, fma(_969, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _968)) - _939;
        float _982 = fma(_970, cbModelParam._m0[28u].z, fma(_969, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _968)) - _943;
        float _986 = inversesqrt(dot(vec3(_980, _981, _982), vec3(_980, _981, _982)));
        float _999 = ((_986 * _980) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_935 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1000 = ((_986 * _981) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_939 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1001 = ((_986 * _982) / cbModelParam._m0[34u].z) + ((((((_943 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1004 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_999, _1000, _1001), 0.0);
        vec4 _1011 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_999, _1000, _1001), 0.0);
        vec4 _1018 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_999, _1000, _1001), 0.0);
        vec4 _1025 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_999, _1000, _1001), 0.0);
        float _1038 = exp2((_1004.w + (-0.5)) * 20.0) * 2.0;
        float _1039 = _1038 * (_1004.x + (-0.5));
        float _1040 = _1038 * (_1004.y + (-0.5));
        float _1041 = _1038 * (_1004.z + (-0.5));
        float _1048 = exp2((_1011.w + (-0.5)) * 20.0) * 2.0;
        float _1049 = _1048 * (_1011.x + (-0.5));
        float _1050 = _1048 * (_1011.y + (-0.5));
        float _1051 = _1048 * (_1011.z + (-0.5));
        float _1058 = exp2((_1018.w + (-0.5)) * 20.0) * 2.0;
        float _1059 = _1058 * (_1018.x + (-0.5));
        float _1060 = _1058 * (_1018.y + (-0.5));
        float _1061 = _1058 * (_1018.z + (-0.5));
        float _1068 = exp2((_1025.w + (-0.5)) * 20.0) * 2.0;
        float _1069 = _1068 * (_1025.x + (-0.5));
        float _1070 = _1068 * (_1025.y + (-0.5));
        float _1071 = _1068 * (_1025.z + (-0.5));
        float _1072 = isnan(0.0) ? _1069 : (isnan(_1069) ? 0.0 : max(_1069, 0.0));
        float _1073 = isnan(0.0) ? _1070 : (isnan(_1070) ? 0.0 : max(_1070, 0.0));
        float _1074 = isnan(0.0) ? _1071 : (isnan(_1071) ? 0.0 : max(_1071, 0.0));
        float _1075 = _1039 * 0.5;
        float _1076 = _1049 * 0.5;
        float _1077 = _1059 * 0.5;
        float _1078 = dot(vec3(_1075, _1076, _1077), vec3(_1075, _1076, _1077));
        float _1083 = (_1078 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1078);
        float _1092 = (dot(vec3(_670, _671, _672), vec3(_1083 * _1075, _1083 * _1076, _1083 * _1077)) + 1.0) * 0.5;
        float _3981 = isnan(0.0) ? _1092 : (isnan(_1092) ? 0.0 : max(_1092, 0.0));
        float _1102 = sqrt(((_1076 * _1076) + (_1075 * _1075)) + (_1077 * _1077)) / (_1072 + 9.9999997473787516355514526367188e-06);
        float _3992 = isnan(0.0) ? _1102 : (isnan(_1102) ? 0.0 : max(_1102, 0.0));
        float _1103 = isnan(1.0) ? _3992 : (isnan(_3992) ? 1.0 : min(_3992, 1.0));
        float _1104 = _1103 * 2.0;
        float _1108 = (1.0 - _1103) / (_1103 + 1.0);
        float _4003 = isnan(0.0) ? _1108 : (isnan(_1108) ? 0.0 : max(_1108, 0.0));
        float _1109 = isnan(1.0) ? _4003 : (isnan(_4003) ? 1.0 : min(_4003, 1.0));
        float _1118 = ((((1.0 - _1109) * (_1104 + 2.0)) * exp2(log2(isnan(1.0) ? _3981 : (isnan(_3981) ? 1.0 : min(_3981, 1.0))) * (_1104 + 1.0))) + _1109) * _1072;
        float _1119 = _1040 * 0.5;
        float _1120 = _1050 * 0.5;
        float _1121 = _1060 * 0.5;
        float _1122 = dot(vec3(_1119, _1120, _1121), vec3(_1119, _1120, _1121));
        float _1127 = (_1122 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1122);
        float _1135 = (dot(vec3(_670, _671, _672), vec3(_1127 * _1119, _1127 * _1120, _1127 * _1121)) + 1.0) * 0.5;
        float _4014 = isnan(0.0) ? _1135 : (isnan(_1135) ? 0.0 : max(_1135, 0.0));
        float _1144 = sqrt(((_1120 * _1120) + (_1119 * _1119)) + (_1121 * _1121)) / (_1073 + 9.9999997473787516355514526367188e-06);
        float _4025 = isnan(0.0) ? _1144 : (isnan(_1144) ? 0.0 : max(_1144, 0.0));
        float _1145 = isnan(1.0) ? _4025 : (isnan(_4025) ? 1.0 : min(_4025, 1.0));
        float _1146 = _1145 * 2.0;
        float _1150 = (1.0 - _1145) / (_1145 + 1.0);
        float _4036 = isnan(0.0) ? _1150 : (isnan(_1150) ? 0.0 : max(_1150, 0.0));
        float _1151 = isnan(1.0) ? _4036 : (isnan(_4036) ? 1.0 : min(_4036, 1.0));
        float _1160 = ((((1.0 - _1151) * (_1146 + 2.0)) * exp2(log2(isnan(1.0) ? _4014 : (isnan(_4014) ? 1.0 : min(_4014, 1.0))) * (_1146 + 1.0))) + _1151) * _1073;
        float _1161 = _1041 * 0.5;
        float _1162 = _1051 * 0.5;
        float _1163 = _1061 * 0.5;
        float _1164 = dot(vec3(_1161, _1162, _1163), vec3(_1161, _1162, _1163));
        float _1169 = (_1164 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1164);
        float _1177 = (dot(vec3(_670, _671, _672), vec3(_1169 * _1161, _1169 * _1162, _1169 * _1163)) + 1.0) * 0.5;
        float _4047 = isnan(0.0) ? _1177 : (isnan(_1177) ? 0.0 : max(_1177, 0.0));
        float _1186 = sqrt(((_1162 * _1162) + (_1161 * _1161)) + (_1163 * _1163)) / (_1074 + 9.9999997473787516355514526367188e-06);
        float _4058 = isnan(0.0) ? _1186 : (isnan(_1186) ? 0.0 : max(_1186, 0.0));
        float _1187 = isnan(1.0) ? _4058 : (isnan(_4058) ? 1.0 : min(_4058, 1.0));
        float _1188 = _1187 * 2.0;
        float _1192 = (1.0 - _1187) / (_1187 + 1.0);
        float _4069 = isnan(0.0) ? _1192 : (isnan(_1192) ? 0.0 : max(_1192, 0.0));
        float _1193 = isnan(1.0) ? _4069 : (isnan(_4069) ? 1.0 : min(_4069, 1.0));
        float _1202 = ((((1.0 - _1193) * (_1188 + 2.0)) * exp2(log2(isnan(1.0) ? _4047 : (isnan(_4047) ? 1.0 : min(_4047, 1.0))) * (_1188 + 1.0))) + _1193) * _1074;
        _1210 = _1041;
        _1212 = _1040;
        _1213 = _1039;
        _1214 = _1051;
        _1215 = _1050;
        _1216 = _1049;
        _1217 = _1061;
        _1218 = _1060;
        _1219 = _1059;
        _1220 = _1074;
        _1221 = _1073;
        _1222 = _1072;
        _1223 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1118 : (isnan(_1118) ? 0.0 : max(_1118, 0.0)));
        _1224 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1160 : (isnan(_1160) ? 0.0 : max(_1160, 0.0)));
        _1225 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1202 : (isnan(_1202) ? 0.0 : max(_1202, 0.0)));
    }
    else
    {
        _1210 = _1211;
        _1212 = _1211;
        _1213 = _1211;
        _1214 = _1211;
        _1215 = _1211;
        _1216 = _1211;
        _1217 = _1211;
        _1218 = _1211;
        _1219 = _1211;
        _1220 = _1211;
        _1221 = _1211;
        _1222 = _1211;
        _1223 = 0.0;
        _1224 = 0.0;
        _1225 = 0.0;
    }
    float _1520;
    float _1521;
    float _1522;
    float _1523;
    float _1524;
    float _1525;
    float _1526;
    float _1527;
    float _1528;
    float _1529;
    float _1530;
    float _1531;
    float _1532;
    float _1533;
    float _1534;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1251 = fma(_908, cbModelParam._m0[30u].z, fma(_904, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _900));
        float _1255 = fma(_908, cbModelParam._m0[31u].z, fma(_904, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _900));
        float _1259 = fma(_908, cbModelParam._m0[32u].z, fma(_904, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _900));
        float _1282 = _900 + _670;
        float _1283 = _904 + _671;
        float _1284 = _908 + _672;
        float _1294 = fma(_1284, cbModelParam._m0[30u].z, fma(_1283, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1282)) - _1251;
        float _1295 = fma(_1284, cbModelParam._m0[31u].z, fma(_1283, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1282)) - _1255;
        float _1296 = fma(_1284, cbModelParam._m0[32u].z, fma(_1283, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1282)) - _1259;
        float _1300 = inversesqrt(dot(vec3(_1294, _1295, _1296), vec3(_1294, _1295, _1296)));
        float _1313 = ((_1300 * _1294) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1251 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1314 = ((_1300 * _1295) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1255 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1315 = ((_1300 * _1296) / cbModelParam._m0[35u].z) + ((((((_1259 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1317 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1313, _1314, _1315), 0.0);
        vec4 _1324 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1313, _1314, _1315), 0.0);
        vec4 _1331 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1313, _1314, _1315), 0.0);
        vec4 _1338 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1313, _1314, _1315), 0.0);
        float _1350 = exp2((_1317.w + (-0.5)) * 20.0) * 2.0;
        float _1351 = _1350 * (_1317.x + (-0.5));
        float _1352 = _1350 * (_1317.y + (-0.5));
        float _1353 = _1350 * (_1317.z + (-0.5));
        float _1360 = exp2((_1324.w + (-0.5)) * 20.0) * 2.0;
        float _1361 = _1360 * (_1324.x + (-0.5));
        float _1362 = _1360 * (_1324.y + (-0.5));
        float _1363 = _1360 * (_1324.z + (-0.5));
        float _1370 = exp2((_1331.w + (-0.5)) * 20.0) * 2.0;
        float _1371 = _1370 * (_1331.x + (-0.5));
        float _1372 = _1370 * (_1331.y + (-0.5));
        float _1373 = _1370 * (_1331.z + (-0.5));
        float _1380 = exp2((_1338.w + (-0.5)) * 20.0) * 2.0;
        float _1381 = _1380 * (_1338.x + (-0.5));
        float _1382 = _1380 * (_1338.y + (-0.5));
        float _1383 = _1380 * (_1338.z + (-0.5));
        float _1384 = isnan(0.0) ? _1381 : (isnan(_1381) ? 0.0 : max(_1381, 0.0));
        float _1385 = isnan(0.0) ? _1382 : (isnan(_1382) ? 0.0 : max(_1382, 0.0));
        float _1386 = isnan(0.0) ? _1383 : (isnan(_1383) ? 0.0 : max(_1383, 0.0));
        float _1387 = _1351 * 0.5;
        float _1388 = _1361 * 0.5;
        float _1389 = _1371 * 0.5;
        float _1390 = dot(vec3(_1387, _1388, _1389), vec3(_1387, _1388, _1389));
        float _1395 = (_1390 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1390);
        float _1403 = (dot(vec3(_670, _671, _672), vec3(_1395 * _1387, _1395 * _1388, _1395 * _1389)) + 1.0) * 0.5;
        float _4110 = isnan(0.0) ? _1403 : (isnan(_1403) ? 0.0 : max(_1403, 0.0));
        float _1412 = sqrt(((_1388 * _1388) + (_1387 * _1387)) + (_1389 * _1389)) / (_1384 + 9.9999997473787516355514526367188e-06);
        float _4121 = isnan(0.0) ? _1412 : (isnan(_1412) ? 0.0 : max(_1412, 0.0));
        float _1413 = isnan(1.0) ? _4121 : (isnan(_4121) ? 1.0 : min(_4121, 1.0));
        float _1414 = _1413 * 2.0;
        float _1418 = (1.0 - _1413) / (_1413 + 1.0);
        float _4132 = isnan(0.0) ? _1418 : (isnan(_1418) ? 0.0 : max(_1418, 0.0));
        float _1419 = isnan(1.0) ? _4132 : (isnan(_4132) ? 1.0 : min(_4132, 1.0));
        float _1428 = ((((1.0 - _1419) * (_1414 + 2.0)) * exp2(log2(isnan(1.0) ? _4110 : (isnan(_4110) ? 1.0 : min(_4110, 1.0))) * (_1414 + 1.0))) + _1419) * _1384;
        float _1429 = _1352 * 0.5;
        float _1430 = _1362 * 0.5;
        float _1431 = _1372 * 0.5;
        float _1432 = dot(vec3(_1429, _1430, _1431), vec3(_1429, _1430, _1431));
        float _1437 = (_1432 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1432);
        float _1445 = (dot(vec3(_670, _671, _672), vec3(_1437 * _1429, _1437 * _1430, _1437 * _1431)) + 1.0) * 0.5;
        float _4143 = isnan(0.0) ? _1445 : (isnan(_1445) ? 0.0 : max(_1445, 0.0));
        float _1454 = sqrt(((_1430 * _1430) + (_1429 * _1429)) + (_1431 * _1431)) / (_1385 + 9.9999997473787516355514526367188e-06);
        float _4154 = isnan(0.0) ? _1454 : (isnan(_1454) ? 0.0 : max(_1454, 0.0));
        float _1455 = isnan(1.0) ? _4154 : (isnan(_4154) ? 1.0 : min(_4154, 1.0));
        float _1456 = _1455 * 2.0;
        float _1460 = (1.0 - _1455) / (_1455 + 1.0);
        float _4165 = isnan(0.0) ? _1460 : (isnan(_1460) ? 0.0 : max(_1460, 0.0));
        float _1461 = isnan(1.0) ? _4165 : (isnan(_4165) ? 1.0 : min(_4165, 1.0));
        float _1470 = ((((1.0 - _1461) * (_1456 + 2.0)) * exp2(log2(isnan(1.0) ? _4143 : (isnan(_4143) ? 1.0 : min(_4143, 1.0))) * (_1456 + 1.0))) + _1461) * _1385;
        float _1471 = _1353 * 0.5;
        float _1472 = _1363 * 0.5;
        float _1473 = _1373 * 0.5;
        float _1474 = dot(vec3(_1471, _1472, _1473), vec3(_1471, _1472, _1473));
        float _1479 = (_1474 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1474);
        float _1487 = (dot(vec3(_670, _671, _672), vec3(_1479 * _1471, _1479 * _1472, _1479 * _1473)) + 1.0) * 0.5;
        float _4176 = isnan(0.0) ? _1487 : (isnan(_1487) ? 0.0 : max(_1487, 0.0));
        float _1496 = sqrt(((_1472 * _1472) + (_1471 * _1471)) + (_1473 * _1473)) / (_1386 + 9.9999997473787516355514526367188e-06);
        float _4187 = isnan(0.0) ? _1496 : (isnan(_1496) ? 0.0 : max(_1496, 0.0));
        float _1497 = isnan(1.0) ? _4187 : (isnan(_4187) ? 1.0 : min(_4187, 1.0));
        float _1498 = _1497 * 2.0;
        float _1502 = (1.0 - _1497) / (_1497 + 1.0);
        float _4198 = isnan(0.0) ? _1502 : (isnan(_1502) ? 0.0 : max(_1502, 0.0));
        float _1503 = isnan(1.0) ? _4198 : (isnan(_4198) ? 1.0 : min(_4198, 1.0));
        float _1512 = ((((1.0 - _1503) * (_1498 + 2.0)) * exp2(log2(isnan(1.0) ? _4176 : (isnan(_4176) ? 1.0 : min(_4176, 1.0))) * (_1498 + 1.0))) + _1503) * _1386;
        _1520 = _1353;
        _1521 = _1352;
        _1522 = _1351;
        _1523 = _1363;
        _1524 = _1362;
        _1525 = _1361;
        _1526 = _1373;
        _1527 = _1372;
        _1528 = _1371;
        _1529 = _1386;
        _1530 = _1385;
        _1531 = _1384;
        _1532 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1428 : (isnan(_1428) ? 0.0 : max(_1428, 0.0)));
        _1533 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1470 : (isnan(_1470) ? 0.0 : max(_1470, 0.0)));
        _1534 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1512 : (isnan(_1512) ? 0.0 : max(_1512, 0.0)));
    }
    else
    {
        _1520 = _1211;
        _1521 = _1211;
        _1522 = _1211;
        _1523 = _1211;
        _1524 = _1211;
        _1525 = _1211;
        _1526 = _1211;
        _1527 = _1211;
        _1528 = _1211;
        _1529 = _1211;
        _1530 = _1211;
        _1531 = _1211;
        _1532 = 0.0;
        _1533 = 0.0;
        _1534 = 0.0;
    }
    float _1544 = (cbModelParam._m0[1u].x * (_1532 - _1223)) + _1223;
    float _1545 = (cbModelParam._m0[1u].x * (_1533 - _1224)) + _1224;
    float _1546 = (cbModelParam._m0[1u].x * (_1534 - _1225)) + _1225;
    float _1567 = fma(_1546, cbSceneParam._m0[89u].z, fma(_1545, cbSceneParam._m0[89u].y, _1544 * cbSceneParam._m0[89u].x));
    float _1570 = fma(_1546, cbSceneParam._m0[90u].z, fma(_1545, cbSceneParam._m0[90u].y, _1544 * cbSceneParam._m0[90u].x));
    float _1573 = fma(_1546, cbSceneParam._m0[91u].z, fma(_1545, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1544));
    float _1588 = _844 * 0.5;
    float _1589 = _845 * 0.5;
    float _1590 = _846 * 0.5;
    float _1591 = dot(vec4(_1588, _1589, _1590, 1.0), vec4(_1522, _1525, _1528, _1531));
    float _1594 = dot(vec4(_1588, _1589, _1590, 1.0), vec4(_1521, _1524, _1527, _1530));
    float _1597 = dot(vec4(_1588, _1589, _1590, 1.0), vec4(_1520, _1523, _1526, _1529));
    float _1631;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1604 = dot(vec4(_1588, _1589, _1590, 1.0), vec4(_1210, _1214, _1217, _1220));
        float _1608 = dot(vec4(_1588, _1589, _1590, 1.0), vec4(_1212, _1215, _1218, _1221));
        float _1612 = dot(vec4(_1588, _1589, _1590, 1.0), vec4(_1213, _1216, _1219, _1222));
        float _1619 = dot(vec4(cbModelParam._m0[39u]), vec4(_1588, _1589, _1590, 1.0));
        _1631 = dot(vec3(isnan(0.0) ? _1612 : (isnan(_1612) ? 0.0 : max(_1612, 0.0)), isnan(0.0) ? _1608 : (isnan(_1608) ? 0.0 : max(_1608, 0.0)), isnan(0.0) ? _1604 : (isnan(_1604) ? 0.0 : max(_1604, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1619) ? 0.0 : (isnan(0.0) ? _1619 : max(0.0, _1619))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1631 = 1.0;
    }
    float _1642;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1633 = dot(vec4(cbModelParam._m0[40u]), vec4(_1588, _1589, _1590, 1.0));
        _1642 = dot(vec3(isnan(0.0) ? _1591 : (isnan(_1591) ? 0.0 : max(_1591, 0.0)), isnan(0.0) ? _1594 : (isnan(_1594) ? 0.0 : max(_1594, 0.0)), isnan(0.0) ? _1597 : (isnan(_1597) ? 0.0 : max(_1597, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1633) ? 0.0 : (isnan(0.0) ? _1633 : max(0.0, _1633))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1642 = 1.0;
    }
    float _1646 = (_1642 * cbModelParam._m0[1u].x) + (_1631 * (1.0 - cbModelParam._m0[1u].x));
    float _1656 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _673);
    float _1657 = isnan(_1656) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1656 : min(cbModelParam._m0[25u].z, _1656));
    float _1737;
    float _1739;
    float _1741;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1704 = fma(_908, cbModelParam._m0[13u].z, fma(_904, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _900)) + cbModelParam._m0[13u].w;
        float _1708 = fma(_908, cbModelParam._m0[14u].z, fma(_904, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _900)) + cbModelParam._m0[14u].w;
        float _1712 = fma(_908, cbModelParam._m0[15u].z, fma(_904, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _900)) + cbModelParam._m0[15u].w;
        float _1715 = fma(_846, cbModelParam._m0[13u].z, fma(_845, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _844));
        float _1718 = fma(_846, cbModelParam._m0[14u].z, fma(_845, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _844));
        float _1721 = fma(_846, cbModelParam._m0[15u].z, fma(_845, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _844));
        float _1749;
        if (_1715 > 0.0)
        {
            _1749 = abs((1.0 - _1704) / _1715);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1715 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1704 + 1.0) / _1715);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1749 = frontier_phi_14_12_ladder;
        }
        float _1922;
        if (_1718 > 0.0)
        {
            _1922 = abs((1.0 - _1708) / _1718);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1718 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1708 + 1.0) / _1718);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1922 = frontier_phi_23_19_ladder;
        }
        float _2218;
        if (_1721 > 0.0)
        {
            _2218 = abs((1.0 - _1712) / _1721);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1721 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1712 + 1.0) / _1721);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2218 = frontier_phi_35_30_ladder;
        }
        float _2220 = isnan(_1922) ? _1749 : (isnan(_1749) ? _1922 : min(_1749, _1922));
        float _2221 = isnan(_2218) ? _2220 : (isnan(_2220) ? _2218 : min(_2220, _2218));
        float _2225 = (_2221 * _1715) + _1704;
        float _2226 = (_2221 * _1718) + _1708;
        float _2227 = (_2221 * _1721) + _1712;
        float _2228 = _2221 * 9.9999997473787516355514526367188e-05;
        float _2230 = (-1.0) - _2228;
        float _2232 = _2228 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2227 > _2232) || ((_2227 < _2230) || ((_2226 > _2232) || ((_2226 < _2230) || ((_2225 < _2230) || (_2225 > _2232))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2372 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2227, cbModelParam._m0[9u].z, fma(_2226, cbModelParam._m0[9u].y, _2225 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2227, cbModelParam._m0[10u].z, fma(_2226, cbModelParam._m0[10u].y, _2225 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2227, cbModelParam._m0[11u].z, fma(_2226, cbModelParam._m0[11u].y, _2225 * cbModelParam._m0[11u].x))), _1657);
            frontier_phi_13_35_ladder = _2372.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2372.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2372.x * cbModelParam._m0[1u].y;
        }
        _1737 = frontier_phi_13_35_ladder_2;
        _1739 = frontier_phi_13_35_ladder_1;
        _1741 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1725 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_844, _845, _846), _1657);
        _1737 = _1725.x * cbModelParam._m0[1u].y;
        _1739 = _1725.y * cbModelParam._m0[1u].y;
        _1741 = _1725.z * cbModelParam._m0[1u].y;
    }
    float _1745 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _673);
    float _1746 = isnan(_1745) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1745 : min(cbModelParam._m0[25u].w, _1745));
    float _1837;
    float _1839;
    float _1841;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1801 = fma(_908, cbModelParam._m0[21u].z, fma(_904, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _900)) + cbModelParam._m0[21u].w;
        float _1805 = fma(_908, cbModelParam._m0[22u].z, fma(_904, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _900)) + cbModelParam._m0[22u].w;
        float _1809 = fma(_908, cbModelParam._m0[23u].z, fma(_904, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _900)) + cbModelParam._m0[23u].w;
        float _1812 = fma(_846, cbModelParam._m0[21u].z, fma(_845, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _844));
        float _1815 = fma(_846, cbModelParam._m0[22u].z, fma(_845, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _844));
        float _1818 = fma(_846, cbModelParam._m0[23u].z, fma(_845, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _844));
        float _1927;
        if (_1812 > 0.0)
        {
            _1927 = abs((1.0 - _1801) / _1812);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1812 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1801 + 1.0) / _1812);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1927 = frontier_phi_25_21_ladder;
        }
        float _2245;
        if (_1815 > 0.0)
        {
            _2245 = abs((1.0 - _1805) / _1815);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1815 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1805 + 1.0) / _1815);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2245 = frontier_phi_37_32_ladder;
        }
        float _2583;
        if (_1818 > 0.0)
        {
            _2583 = abs((1.0 - _1809) / _1818);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1818 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1809 + 1.0) / _1818);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2583 = frontier_phi_47_44_ladder;
        }
        float _2585 = isnan(_2245) ? _1927 : (isnan(_1927) ? _2245 : min(_1927, _2245));
        float _2586 = isnan(_2583) ? _2585 : (isnan(_2585) ? _2583 : min(_2585, _2583));
        float _2590 = (_2586 * _1812) + _1801;
        float _2591 = (_2586 * _1815) + _1805;
        float _2592 = (_2586 * _1818) + _1809;
        float _2593 = _2586 * 9.9999997473787516355514526367188e-05;
        float _2594 = (-1.0) - _2593;
        float _2596 = _2593 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2592 > _2596) || ((_2592 < _2594) || ((_2591 > _2596) || ((_2591 < _2594) || ((_2590 < _2594) || (_2590 > _2596))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2714 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2592, cbModelParam._m0[17u].z, fma(_2591, cbModelParam._m0[17u].y, _2590 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2592, cbModelParam._m0[18u].z, fma(_2591, cbModelParam._m0[18u].y, _2590 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2592, cbModelParam._m0[19u].z, fma(_2591, cbModelParam._m0[19u].y, _2590 * cbModelParam._m0[19u].x))), _1746);
            frontier_phi_22_47_ladder = _2714.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2714.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2714.x * cbModelParam._m0[1u].z;
        }
        _1837 = frontier_phi_22_47_ladder_2;
        _1839 = frontier_phi_22_47_ladder_1;
        _1841 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1821 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_844, _845, _846), _1746);
        _1837 = _1821.x * cbModelParam._m0[1u].z;
        _1839 = _1821.y * cbModelParam._m0[1u].z;
        _1841 = _1821.z * cbModelParam._m0[1u].z;
    }
    float _1854 = (((_871 * _821) + _872) * _836) * ((cbModelParam._m0[1u].w * (_1837 - _1737)) + _1737);
    float _1856 = (((_871 * _823) + _872) * _836) * ((cbModelParam._m0[1u].w * (_1839 - _1739)) + _1739);
    float _1858 = (((_871 * _824) + _872) * _836) * ((cbModelParam._m0[1u].w * (_1841 - _1741)) + _1741);
    float _1861 = fma(_1858, cbSceneParam._m0[89u].z, fma(_1856, cbSceneParam._m0[89u].y, _1854 * cbSceneParam._m0[89u].x));
    float _1864 = fma(_1858, cbSceneParam._m0[90u].z, fma(_1856, cbSceneParam._m0[90u].y, _1854 * cbSceneParam._m0[90u].x));
    float _1867 = fma(_1858, cbSceneParam._m0[91u].z, fma(_1856, cbSceneParam._m0[91u].y, _1854 * cbSceneParam._m0[91u].x));
    float _1901 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1905 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1909 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1913 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1914 = _1901 / _1913;
    float _1915 = _1905 / _1913;
    float _1916 = _1909 / _1913;
    float _2063;
    float _2064;
    float _2065;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1943 = ((uint(_1916 > cbSceneParam._m0[59u].y) + uint(_1916 > cbSceneParam._m0[59u].x)) + uint(_1916 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1944 = _1943 + 43u;
        uint _1952 = _1943 + 44u;
        uint _1960 = _1943 + 45u;
        uint _1968 = _1943 + 46u;
        float _1979 = fma(_1913, cbSceneParam._m0[_1944].w, fma(_1909, cbSceneParam._m0[_1944].z, fma(_1905, cbSceneParam._m0[_1944].y, _1901 * cbSceneParam._m0[_1944].x)));
        float _1983 = fma(_1913, cbSceneParam._m0[_1952].w, fma(_1909, cbSceneParam._m0[_1952].z, fma(_1905, cbSceneParam._m0[_1952].y, _1901 * cbSceneParam._m0[_1952].x)));
        float _1991 = fma(_1913, cbSceneParam._m0[_1968].w, fma(_1909, cbSceneParam._m0[_1968].z, fma(_1905, cbSceneParam._m0[_1968].y, _1901 * cbSceneParam._m0[_1968].x)));
        float _1996 = cbSceneParam._m0[33u].z * _1991;
        float _1998 = cbSceneParam._m0[33u].w * _1991;
        float _2001 = fma(_1913, cbSceneParam._m0[_1960].w, fma(_1909, cbSceneParam._m0[_1960].z, fma(_1905, cbSceneParam._m0[_1960].y, _1901 * cbSceneParam._m0[_1960].x))) / _1991;
        float _2049 = (cbSceneParam._m0[33u].x - sqrt(((_1915 * _1915) + (_1914 * _1914)) + (_1916 * _1916))) * cbSceneParam._m0[33u].y;
        float _4324 = isnan(0.0) ? _2049 : (isnan(_2049) ? 0.0 : max(_2049, 0.0));
        float _2056 = (isnan(1.0) ? _4324 : (isnan(_4324) ? 1.0 : min(_4324, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1996 + _1979) / _1991, (_1998 + _1983) / _1991), _2001), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1998 + _1979) / _1991, (_1983 - _1996) / _1991), _2001), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1979 - _1996) / _1991, (_1983 - _1998) / _1991), _2001), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1979 - _1998) / _1991, (_1996 + _1983) / _1991), _2001), 0.0)).x), vec4(0.25)));
        _2063 = 1.0 - (_2056 * cbSceneParam._m0[34u].x);
        _2064 = 1.0 - (_2056 * cbSceneParam._m0[34u].y);
        _2065 = 1.0 - (_2056 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2063 = 1.0;
        _2064 = 1.0;
        _2065 = 1.0;
    }
    float _2129;
    float _2131;
    float _2133;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2117 = fma(_1913, cbSceneParam._m0[63u].w, fma(_1909, cbSceneParam._m0[63u].z, fma(_1905, cbSceneParam._m0[63u].y, _1901 * cbSceneParam._m0[63u].x)));
        float _2118 = fma(_1913, cbSceneParam._m0[60u].w, fma(_1909, cbSceneParam._m0[60u].z, fma(_1905, cbSceneParam._m0[60u].y, _1901 * cbSceneParam._m0[60u].x))) / _2117;
        float _2119 = fma(_1913, cbSceneParam._m0[61u].w, fma(_1909, cbSceneParam._m0[61u].z, fma(_1905, cbSceneParam._m0[61u].y, _1901 * cbSceneParam._m0[61u].x))) / _2117;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2118 >= cbSceneParam._m0[64u].x) && (_2119 >= cbSceneParam._m0[64u].y)) && (_2118 <= cbSceneParam._m0[64u].z)) && (_2119 <= cbSceneParam._m0[64u].w))
        {
            float _2258 = fma(_1913, cbSceneParam._m0[62u].w, fma(_1909, cbSceneParam._m0[62u].z, fma(_1905, cbSceneParam._m0[62u].y, _1901 * cbSceneParam._m0[62u].x))) / _2117;
            float _2262 = isnan(cbSceneParam._m0[41u].w) ? _2258 : (isnan(_2258) ? cbSceneParam._m0[41u].w : max(_2258, cbSceneParam._m0[41u].w));
            float _2305 = (cbSceneParam._m0[33u].x - sqrt(((_1915 * _1915) + (_1914 * _1914)) + (_1916 * _1916))) * cbSceneParam._m0[33u].y;
            float _4340 = isnan(0.0) ? _2305 : (isnan(_2305) ? 0.0 : max(_2305, 0.0));
            float _2312 = (isnan(1.0) ? _4340 : (isnan(_4340) ? 1.0 : min(_4340, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2118, cbSceneParam._m0[33u].w + _2119), _2262), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2118, _2119 - cbSceneParam._m0[33u].z), _2262), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2118 - cbSceneParam._m0[33u].z, _2119 - cbSceneParam._m0[33u].w), _2262), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2118 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2119), _2262), 0.0)).x), vec4(0.25)));
            float _2316 = 1.0 - (_2312 * cbSceneParam._m0[34u].x);
            float _2317 = 1.0 - (_2312 * cbSceneParam._m0[34u].y);
            float _2318 = 1.0 - (_2312 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2318) ? _2065 : (isnan(_2065) ? _2318 : min(_2065, _2318));
            frontier_phi_34_33_ladder_1 = isnan(_2317) ? _2064 : (isnan(_2064) ? _2317 : min(_2064, _2317));
            frontier_phi_34_33_ladder_2 = isnan(_2316) ? _2063 : (isnan(_2063) ? _2316 : min(_2063, _2316));
        }
        else
        {
            frontier_phi_34_33_ladder = _2065;
            frontier_phi_34_33_ladder_1 = _2064;
            frontier_phi_34_33_ladder_2 = _2063;
        }
        _2129 = frontier_phi_34_33_ladder_2;
        _2131 = frontier_phi_34_33_ladder_1;
        _2133 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2129 = _2063;
        _2131 = _2064;
        _2133 = _2065;
    }
    uvec4 _2138 = floatBitsToUint(cbInstanceData._m0[_796 + 5u]);
    uint _2140 = _2138.x * 14u;
    uint _2141 = _2140 + 13u;
    float _2148 = _836 + (-1.0);
    float _2153 = (cbLight._m0[_2141].x * _2148) + 1.0;
    float _2154 = (cbLight._m0[_2141].y * _2148) + 1.0;
    float _2155 = (cbLight._m0[_2141].z * _2148) + 1.0;
    float _2156 = (cbLight._m0[_2141].w * _2148) + 1.0;
    uint _2157 = _2140 + 5u;
    float _2163 = isnan(1.0) ? _2154 : (isnan(_2154) ? 1.0 : min(_2154, 1.0));
    uint _2167 = _2140 + 4u;
    float _2177 = isnan(1.0) ? _2153 : (isnan(_2153) ? 1.0 : min(_2153, 1.0));
    uint _2181 = _2140 | 1u;
    float _2192 = dot(vec3(cbLight._m0[_2140].xyz), vec3(_670, _671, _672));
    float _2195 = dot(vec3(cbLight._m0[_2181].xyz), vec3(_670, _671, _672));
    float _4376 = isnan(0.0) ? _2192 : (isnan(_2192) ? 0.0 : max(_2192, 0.0));
    float _4387 = isnan(0.0) ? _2195 : (isnan(_2195) ? 0.0 : max(_2195, 0.0));
    float _2200 = (isnan(1.0) ? _4376 : (isnan(_4376) ? 1.0 : min(_4376, 1.0))) * 0.3183098733425140380859375;
    float _2202 = (isnan(1.0) ? _4387 : (isnan(_4387) ? 1.0 : min(_4387, 1.0))) * 0.3183098733425140380859375;
    float _2209 = ((cbLight._m0[_2157].x * _2163) * _2202) + (((cbLight._m0[_2167].x * _2129) * _2177) * _2200);
    float _2210 = ((_2163 * cbLight._m0[_2157].y) * _2202) + (((cbLight._m0[_2167].y * _2131) * _2177) * _2200);
    float _2211 = ((_2163 * cbLight._m0[_2157].z) * _2202) + (((cbLight._m0[_2167].z * _2133) * _2177) * _2200);
    uvec4 _2215 = floatBitsToUint(cbLight._m0[_2140 + 12u]);
    bool _2217 = _2215.x == 0u;
    float _2319;
    float _2321;
    float _2323;
    if (_2217)
    {
        _2319 = _2209;
        _2321 = _2210;
        _2323 = _2211;
    }
    else
    {
        uint _2327 = _2140 + 6u;
        float _2343 = (dot(vec3(cbLight._m0[_2140 + 2u].xyz), vec3(_670, _671, _672)) * 0.5) + 0.5;
        float _2344 = _2343 * _2343;
        float _4398 = isnan(0.0) ? _2344 : (isnan(_2344) ? 0.0 : max(_2344, 0.0));
        float _2345 = isnan(1.0) ? _4398 : (isnan(_4398) ? 1.0 : min(_4398, 1.0));
        float _2346 = isnan(1.0) ? _2155 : (isnan(_2155) ? 1.0 : min(_2155, 1.0));
        _2319 = (((cbLight._m0[_2327].x * 0.3183098733425140380859375) * _2345) * _2346) + _2209;
        _2321 = (((cbLight._m0[_2327].y * 0.3183098733425140380859375) * _2345) * _2346) + _2210;
        _2323 = (((cbLight._m0[_2327].z * 0.3183098733425140380859375) * _2345) * _2346) + _2211;
    }
    bool _2326 = _2215.y == 0u;
    float _2381;
    float _2383;
    float _2385;
    if (_2326)
    {
        _2381 = _2319;
        _2383 = _2321;
        _2385 = _2323;
    }
    else
    {
        uint _2554 = _2140 + 7u;
        float _2570 = (dot(vec3(cbLight._m0[_2140 + 3u].xyz), vec3(_670, _671, _672)) * 0.5) + 0.5;
        float _2571 = _2570 * _2570;
        float _4414 = isnan(0.0) ? _2571 : (isnan(_2571) ? 0.0 : max(_2571, 0.0));
        float _2572 = isnan(1.0) ? _4414 : (isnan(_4414) ? 1.0 : min(_4414, 1.0));
        float _2573 = isnan(1.0) ? _2156 : (isnan(_2156) ? 1.0 : min(_2156, 1.0));
        _2381 = (((cbLight._m0[_2554].x * 0.3183098733425140380859375) * _2572) * _2573) + _2319;
        _2383 = (((cbLight._m0[_2554].y * 0.3183098733425140380859375) * _2572) * _2573) + _2321;
        _2385 = (((cbLight._m0[_2554].z * 0.3183098733425140380859375) * _2572) * _2573) + _2323;
    }
    uint _2388 = _2140 + 8u;
    float _2401 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2140].w)) * _673) * 0.949999988079071044921875);
    float _2402 = _2401 * _2401;
    float _2403 = cbLight._m0[_2140].x + _750;
    float _2404 = cbLight._m0[_2140].y + _751;
    float _2405 = cbLight._m0[_2140].z + _752;
    float _2409 = inversesqrt(dot(vec3(_2403, _2404, _2405), vec3(_2403, _2404, _2405)));
    float _2410 = _2409 * _2403;
    float _2411 = _2409 * _2404;
    float _2412 = _2409 * _2405;
    float _2413 = dot(vec3(_670, _671, _672), vec3(cbLight._m0[_2140].xyz));
    float _4430 = isnan(0.0) ? _2413 : (isnan(_2413) ? 0.0 : max(_2413, 0.0));
    float _2416 = isnan(1.0) ? _4430 : (isnan(_4430) ? 1.0 : min(_4430, 1.0));
    float _4441 = isnan(0.0) ? _837 : (isnan(_837) ? 0.0 : max(_837, 0.0));
    float _2417 = isnan(1.0) ? _4441 : (isnan(_4441) ? 1.0 : min(_4441, 1.0));
    float _2418 = dot(vec3(_670, _671, _672), vec3(_2410, _2411, _2412));
    float _4452 = isnan(0.0) ? _2418 : (isnan(_2418) ? 0.0 : max(_2418, 0.0));
    float _2421 = isnan(1.0) ? _4452 : (isnan(_4452) ? 1.0 : min(_4452, 1.0));
    float _2422 = dot(vec3(cbLight._m0[_2140].xyz), vec3(_2410, _2411, _2412));
    float _4463 = isnan(0.0) ? _2422 : (isnan(_2422) ? 0.0 : max(_2422, 0.0));
    float _2426 = _2402 * _2402;
    float _2430 = ((_2421 * _2421) * (_2426 + (-1.0))) + 1.0;
    float _2438 = exp2(log2(1.0 - (isnan(1.0) ? _4463 : (isnan(_4463) ? 1.0 : min(_4463, 1.0)))) * 5.0);
    float _2439 = 0.959999978542327880859375 - _818;
    float _2441 = 0.959999978542327880859375 - _819;
    float _2442 = 0.959999978542327880859375 - _820;
    float _2449 = 1.0 - _2402;
    float _2460 = (0.5 / (((_2417 * ((_2416 * _2449) + _2402)) + 9.9999999392252902907785028219223e-09) + (((_2417 * _2449) + _2402) * _2416))) * _2416;
    float _4474 = isnan(0.0) ? _2460 : (isnan(_2460) ? 0.0 : max(_2460, 0.0));
    float _2462 = (isnan(1.0) ? _4474 : (isnan(_4474) ? 1.0 : min(_4474, 1.0))) * (_2426 / ((_2430 * _2430) * 3.141590118408203125));
    uint _2476 = _2140 + 9u;
    float _2487 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2181].w)) * _673) * 0.949999988079071044921875);
    float _2488 = _2487 * _2487;
    float _2489 = cbLight._m0[_2181].x + _750;
    float _2490 = cbLight._m0[_2181].y + _751;
    float _2491 = cbLight._m0[_2181].z + _752;
    float _2495 = inversesqrt(dot(vec3(_2489, _2490, _2491), vec3(_2489, _2490, _2491)));
    float _2496 = _2495 * _2489;
    float _2497 = _2495 * _2490;
    float _2498 = _2495 * _2491;
    float _2499 = dot(vec3(_670, _671, _672), vec3(cbLight._m0[_2181].xyz));
    float _4485 = isnan(0.0) ? _2499 : (isnan(_2499) ? 0.0 : max(_2499, 0.0));
    float _2502 = isnan(1.0) ? _4485 : (isnan(_4485) ? 1.0 : min(_4485, 1.0));
    float _2503 = dot(vec3(_670, _671, _672), vec3(_2496, _2497, _2498));
    float _4496 = isnan(0.0) ? _2503 : (isnan(_2503) ? 0.0 : max(_2503, 0.0));
    float _2506 = isnan(1.0) ? _4496 : (isnan(_4496) ? 1.0 : min(_4496, 1.0));
    float _2507 = dot(vec3(cbLight._m0[_2181].xyz), vec3(_2496, _2497, _2498));
    float _4507 = isnan(0.0) ? _2507 : (isnan(_2507) ? 0.0 : max(_2507, 0.0));
    float _2511 = _2488 * _2488;
    float _2515 = ((_2506 * _2506) * (_2511 + (-1.0))) + 1.0;
    float _2522 = exp2(log2(1.0 - (isnan(1.0) ? _4507 : (isnan(_4507) ? 1.0 : min(_4507, 1.0)))) * 5.0);
    float _2529 = 1.0 - _2488;
    float _2539 = (0.5 / (((_2417 * ((_2502 * _2529) + _2488)) + 9.9999999392252902907785028219223e-09) + (((_2417 * _2529) + _2488) * _2502))) * _2502;
    float _4518 = isnan(0.0) ? _2539 : (isnan(_2539) ? 0.0 : max(_2539, 0.0));
    float _2541 = (isnan(1.0) ? _4518 : (isnan(_4518) ? 1.0 : min(_4518, 1.0))) * (_2511 / ((_2515 * _2515) * 3.141590118408203125));
    float _2551 = (((((_2522 * _2439) + _821) * cbLight._m0[_2476].x) * _2541) * _2163) + ((((cbLight._m0[_2388].x * _2129) * ((_2438 * _2439) + _821)) * _2462) * _2177);
    float _2552 = (((((_2522 * _2441) + _823) * cbLight._m0[_2476].y) * _2541) * _2163) + ((((cbLight._m0[_2388].y * _2131) * ((_2438 * _2441) + _823)) * _2462) * _2177);
    float _2553 = (((((_2522 * _2442) + _824) * cbLight._m0[_2476].z) * _2541) * _2163) + ((((cbLight._m0[_2388].z * _2133) * ((_2438 * _2442) + _824)) * _2462) * _2177);
    float _2609;
    float _2611;
    float _2613;
    if (_2217)
    {
        _2609 = _2551;
        _2611 = _2552;
        _2613 = _2553;
    }
    else
    {
        uint _2615 = _2140 + 2u;
        uint _2619 = _2140 + 10u;
        float _2633 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2615].w)) * _673) * 0.949999988079071044921875);
        float _2634 = _2633 * _2633;
        float _2635 = cbLight._m0[_2615].x + _750;
        float _2636 = cbLight._m0[_2615].y + _751;
        float _2637 = cbLight._m0[_2615].z + _752;
        float _2641 = inversesqrt(dot(vec3(_2635, _2636, _2637), vec3(_2635, _2636, _2637)));
        float _2642 = _2641 * _2635;
        float _2643 = _2641 * _2636;
        float _2644 = _2641 * _2637;
        float _2645 = dot(vec3(_670, _671, _672), vec3(cbLight._m0[_2615].xyz));
        float _4529 = isnan(0.0) ? _2645 : (isnan(_2645) ? 0.0 : max(_2645, 0.0));
        float _2648 = isnan(1.0) ? _4529 : (isnan(_4529) ? 1.0 : min(_4529, 1.0));
        float _2649 = dot(vec3(_670, _671, _672), vec3(_2642, _2643, _2644));
        float _4540 = isnan(0.0) ? _2649 : (isnan(_2649) ? 0.0 : max(_2649, 0.0));
        float _2652 = isnan(1.0) ? _4540 : (isnan(_4540) ? 1.0 : min(_4540, 1.0));
        float _2653 = dot(vec3(cbLight._m0[_2615].xyz), vec3(_2642, _2643, _2644));
        float _4551 = isnan(0.0) ? _2653 : (isnan(_2653) ? 0.0 : max(_2653, 0.0));
        float _2657 = _2634 * _2634;
        float _2661 = ((_2652 * _2652) * (_2657 + (-1.0))) + 1.0;
        float _2668 = exp2(log2(1.0 - (isnan(1.0) ? _4551 : (isnan(_4551) ? 1.0 : min(_4551, 1.0)))) * 5.0);
        float _2675 = 1.0 - _2634;
        float _2685 = (0.5 / (((_2417 * ((_2648 * _2675) + _2634)) + 9.9999999392252902907785028219223e-09) + (((_2417 * _2675) + _2634) * _2648))) * _2648;
        float _4562 = isnan(0.0) ? _2685 : (isnan(_2685) ? 0.0 : max(_2685, 0.0));
        float _2687 = (isnan(1.0) ? _4562 : (isnan(_4562) ? 1.0 : min(_4562, 1.0))) * (_2657 / ((_2661 * _2661) * 3.141590118408203125));
        float _2688 = isnan(1.0) ? _2155 : (isnan(_2155) ? 1.0 : min(_2155, 1.0));
        _2609 = (((((_2668 * _2439) + _821) * cbLight._m0[_2619].x) * _2687) * _2688) + _2551;
        _2611 = (((((_2668 * _2441) + _823) * cbLight._m0[_2619].y) * _2687) * _2688) + _2552;
        _2613 = (((((_2668 * _2442) + _824) * cbLight._m0[_2619].z) * _2687) * _2688) + _2553;
    }
    float _2719;
    float _2721;
    float _2723;
    if (_2326)
    {
        _2719 = _2609;
        _2721 = _2611;
        _2723 = _2613;
    }
    else
    {
        uint _2730 = _2140 + 3u;
        uint _2734 = _2140 + 11u;
        float _2748 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2730].w)) * _673) * 0.949999988079071044921875);
        float _2749 = _2748 * _2748;
        float _2750 = cbLight._m0[_2730].x + _750;
        float _2751 = cbLight._m0[_2730].y + _751;
        float _2752 = cbLight._m0[_2730].z + _752;
        float _2756 = inversesqrt(dot(vec3(_2750, _2751, _2752), vec3(_2750, _2751, _2752)));
        float _2757 = _2756 * _2750;
        float _2758 = _2756 * _2751;
        float _2759 = _2756 * _2752;
        float _2760 = dot(vec3(_670, _671, _672), vec3(cbLight._m0[_2730].xyz));
        float _4578 = isnan(0.0) ? _2760 : (isnan(_2760) ? 0.0 : max(_2760, 0.0));
        float _2763 = isnan(1.0) ? _4578 : (isnan(_4578) ? 1.0 : min(_4578, 1.0));
        float _2764 = dot(vec3(_670, _671, _672), vec3(_2757, _2758, _2759));
        float _4589 = isnan(0.0) ? _2764 : (isnan(_2764) ? 0.0 : max(_2764, 0.0));
        float _2767 = isnan(1.0) ? _4589 : (isnan(_4589) ? 1.0 : min(_4589, 1.0));
        float _2768 = dot(vec3(cbLight._m0[_2730].xyz), vec3(_2757, _2758, _2759));
        float _4600 = isnan(0.0) ? _2768 : (isnan(_2768) ? 0.0 : max(_2768, 0.0));
        float _2772 = _2749 * _2749;
        float _2776 = ((_2767 * _2767) * (_2772 + (-1.0))) + 1.0;
        float _2783 = exp2(log2(1.0 - (isnan(1.0) ? _4600 : (isnan(_4600) ? 1.0 : min(_4600, 1.0)))) * 5.0);
        float _2790 = 1.0 - _2749;
        float _2800 = (0.5 / (((_2417 * ((_2763 * _2790) + _2749)) + 9.9999999392252902907785028219223e-09) + (((_2417 * _2790) + _2749) * _2763))) * _2763;
        float _4611 = isnan(0.0) ? _2800 : (isnan(_2800) ? 0.0 : max(_2800, 0.0));
        float _2802 = (isnan(1.0) ? _4611 : (isnan(_4611) ? 1.0 : min(_4611, 1.0))) * (_2772 / ((_2776 * _2776) * 3.141590118408203125));
        float _2803 = isnan(1.0) ? _2156 : (isnan(_2156) ? 1.0 : min(_2156, 1.0));
        _2719 = (((((_2783 * _2439) + _821) * cbLight._m0[_2734].x) * _2802) * _2803) + _2609;
        _2721 = (((((_2783 * _2441) + _823) * cbLight._m0[_2734].y) * _2802) * _2803) + _2611;
        _2723 = (((((_2783 * _2442) + _824) * cbLight._m0[_2734].z) * _2802) * _2803) + _2613;
    }
    float _2869;
    float _2871;
    float _2873;
    float _2875;
    float _2877;
    float _2879;
    if (_2138.y == 0u)
    {
        uvec4 _2824 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2825 = _2824.x;
        uint _2836 = uint((float(_2824.y) * floor(float(uint(cbSceneParam._m0[85u].y * _759) / _2825))) + floor(float(uint(cbSceneParam._m0[85u].x * _758) / _2825)));
        float _2846 = (log2(_1916 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2847 = isnan(0.0) ? _2846 : (isnan(_2846) ? 0.0 : max(_2846, 0.0));
        uint _2850 = uint(isnan(14.0) ? _2847 : (isnan(_2847) ? 14.0 : min(_2847, 14.0)));
        uvec4 _2855 = texelFetch(g_lightClusterGridBuffer, int(((_2850 << 2u) + (_2836 << 6u)) >> 2u));
        uint _2856 = _2855.x;
        uint _2857 = _2824.z;
        float _2936;
        float _2938;
        float _2940;
        float _2942;
        float _2944;
        float _2946;
        if (((((1u << ((_2857 >> 4u) & 15u)) + 4294967295u) & _2856) == 0u) || ((_2857 & 240u) == 0u))
        {
            _2936 = 0.0;
            _2938 = 0.0;
            _2940 = 0.0;
            _2942 = 0.0;
            _2944 = 0.0;
            _2946 = 0.0;
        }
        else
        {
            float _2937;
            float _2939;
            float _2941;
            float _2943;
            float _2945;
            float _2947;
            float _3080 = 0.0;
            float _3081 = 0.0;
            float _3082 = 0.0;
            float _3083 = 0.0;
            float _3084 = 0.0;
            float _3085 = 0.0;
            uint _3086 = 0u;
            uint _3095;
            bool _3096;
            for (;;)
            {
                _3095 = texelFetch(g_lightClassification, int((((_2850 << 5u) + (_2836 << 9u)) + (_3086 << 2u)) >> 2u)).x;
                _3096 = _3095 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3096)
                {
                    frontier_phi_66_pred = _3085;
                    frontier_phi_66_pred_1 = _3084;
                    frontier_phi_66_pred_2 = _3083;
                    frontier_phi_66_pred_3 = _3082;
                    frontier_phi_66_pred_4 = _3081;
                    frontier_phi_66_pred_5 = _3080;
                }
                else
                {
                    float _3204;
                    float _3205;
                    float _3206;
                    float _3207;
                    float _3208;
                    float _3209;
                    uint _3210;
                    _3204 = _3080;
                    _3205 = _3081;
                    _3206 = _3082;
                    _3207 = _3083;
                    _3208 = _3084;
                    _3209 = _3085;
                    _3210 = _3095;
                    float _3136;
                    float _3137;
                    float _3138;
                    float _3139;
                    float _3140;
                    float _3141;
                    for (;;)
                    {
                        uint _3214 = uint(findLSB(_3210)) + (_3086 << 5u);
                        uint _3211 = (_3210 + 4294967295u) & _3210;
                        uint _3216 = _3214 * 48u;
                        vec4 _3230 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3216)).x, texelFetch(g_PointLightRenderingBuffer, int(_3216 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3216 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3216 + 3u)).x));
                        uint _3236 = (_3214 * 48u) + 4u;
                        vec4 _3249 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3236)).x, texelFetch(g_PointLightRenderingBuffer, int(_3236 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3236 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3236 + 3u)).x));
                        uint _3255 = (_3214 * 48u) + 8u;
                        vec3 _3266 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3255)).x, texelFetch(g_PointLightRenderingBuffer, int(_3255 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3255 + 2u)).x));
                        float _3270 = _3230.x - _1914;
                        float _3271 = _3230.y - _1915;
                        float _3272 = _3230.z - _1916;
                        float _3273 = dot(vec3(_3270, _3271, _3272), vec3(_3270, _3271, _3272));
                        float _3276 = inversesqrt(_3273);
                        float _3277 = _3276 * _3270;
                        float _3278 = _3276 * _3271;
                        float _3279 = _3276 * _3272;
                        float _3280 = dot(vec3(_777, _780, _783), vec3(_3277, _3278, _3279));
                        float _3285 = 1.0 - (_3273 * _3230.w);
                        float _4637 = isnan(0.0) ? _3285 : (isnan(_3285) ? 0.0 : max(_3285, 0.0));
                        float _3286 = isnan(1.0) ? _4637 : (isnan(_4637) ? 1.0 : min(_4637, 1.0));
                        float _3287 = sqrt(_3273) * _3249.w;
                        float _3290 = 1.39999997615814208984375 / (_3287 + 1.39999997615814208984375);
                        float _3291 = _3290 * _3290;
                        float _3294 = ((1.0 - _3291) * _3280) + _3291;
                        float _3297 = _3287 * _3287;
                        float _3301 = ((isnan(0.0) ? _3294 : (isnan(_3294) ? 0.0 : max(_3294, 0.0))) * _3286) / ((_3297 * 0.699999988079071044921875) + 1.0);
                        float _3305 = (-0.0) - _1914;
                        float _3306 = (-0.0) - _1915;
                        float _3307 = (-0.0) - _1916;
                        float _3311 = inversesqrt(dot(vec3(_3305, _3306, _3307), vec3(_3305, _3306, _3307)));
                        float _3312 = _3311 * _3305;
                        float _3313 = _3311 * _3306;
                        float _3314 = _3311 * _3307;
                        float _3321 = exp2(log2(1.0 / ((_3297 * 3.5) + 5.0)) * 0.25);
                        float _3322 = 1.0 - _852;
                        float _3329 = sqrt(1.0 - ((1.0 - (_3322 * _3322)) * (1.0 - (_3321 * _3321))));
                        float _3330 = _3329 * _3329;
                        float _3331 = _3330 * _3330;
                        float _3332 = _3312 + _3277;
                        float _3333 = _3313 + _3278;
                        float _3334 = _3314 + _3279;
                        float _3338 = inversesqrt(dot(vec3(_3332, _3333, _3334), vec3(_3332, _3333, _3334)));
                        float _3342 = dot(vec3(_777, _780, _783), vec3(_3312, _3313, _3314));
                        float _4653 = isnan(0.0) ? _3342 : (isnan(_3342) ? 0.0 : max(_3342, 0.0));
                        float _3345 = isnan(1.0) ? _4653 : (isnan(_4653) ? 1.0 : min(_4653, 1.0));
                        float _3346 = dot(vec3(_777, _780, _783), vec3(_3338 * _3332, _3338 * _3333, _3338 * _3334));
                        float _4664 = isnan(0.0) ? _3346 : (isnan(_3346) ? 0.0 : max(_3346, 0.0));
                        float _3349 = isnan(1.0) ? _4664 : (isnan(_4664) ? 1.0 : min(_4664, 1.0));
                        float _3353 = ((_3349 * _3349) * (_3331 + (-1.0))) + 1.0;
                        float _3354 = _3290 * _3330;
                        float _3355 = _3354 * _3354;
                        float _3358 = ((1.0 - _3355) * _3280) + _3355;
                        float _4675 = isnan(0.0) ? _3358 : (isnan(_3358) ? 0.0 : max(_3358, 0.0));
                        float _3359 = isnan(1.0) ? _4675 : (isnan(_4675) ? 1.0 : min(_4675, 1.0));
                        float _3360 = 1.0 - _3330;
                        float _3370 = (0.5 / (((_3359 * ((_3345 * _3360) + _3330)) + 9.9999999392252902907785028219223e-09) + (((_3359 * _3360) + _3330) * _3345))) * _3359;
                        float _4686 = isnan(0.0) ? _3370 : (isnan(_3370) ? 0.0 : max(_3370, 0.0));
                        float _3381 = (((_3331 * 3.1415927410125732421875) * (isnan(1.0) ? _4686 : (isnan(_4686) ? 1.0 : min(_4686, 1.0)))) / ((_3353 * _3353) * ((_3297 * 2.1991131305694580078125) + 3.141590118408203125))) * _3286;
                        _3139 = (_3301 * _3249.x) + _3207;
                        _3140 = (_3301 * _3249.y) + _3208;
                        _3141 = (_3301 * _3249.z) + _3209;
                        _3136 = (_3381 * _3266.x) + _3204;
                        _3137 = (_3381 * _3266.y) + _3205;
                        _3138 = (_3381 * _3266.z) + _3206;
                        if (_3211 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3204 = _3136;
                            _3205 = _3137;
                            _3206 = _3138;
                            _3207 = _3139;
                            _3208 = _3140;
                            _3209 = _3141;
                            _3210 = _3211;
                        }
                    }
                    frontier_phi_66_pred = _3141;
                    frontier_phi_66_pred_1 = _3140;
                    frontier_phi_66_pred_2 = _3139;
                    frontier_phi_66_pred_3 = _3138;
                    frontier_phi_66_pred_4 = _3137;
                    frontier_phi_66_pred_5 = _3136;
                }
                _2947 = frontier_phi_66_pred;
                _2945 = frontier_phi_66_pred_1;
                _2943 = frontier_phi_66_pred_2;
                _2941 = frontier_phi_66_pred_3;
                _2939 = frontier_phi_66_pred_4;
                _2937 = frontier_phi_66_pred_5;
                uint _3087 = _3086 + 1u;
                if (_3087 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3080 = _2937;
                    _3081 = _2939;
                    _3082 = _2941;
                    _3083 = _2943;
                    _3084 = _2945;
                    _3085 = _2947;
                    _3086 = _3087;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2936 = _2937;
            _2938 = _2939;
            _2940 = _2941;
            _2942 = _2943;
            _2944 = _2945;
            _2946 = _2947;
        }
        uvec4 _2950 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2951 = _2950.z;
        uint _2953 = (_2951 >> 8u) & 15u;
        float _3048;
        float _3050;
        float _3052;
        float _3054;
        float _3056;
        float _3058;
        if (((4294967295u << _2953) & _2856) == 0u)
        {
            _3048 = _2936;
            _3050 = _2938;
            _3052 = _2940;
            _3054 = _2942;
            _3056 = _2944;
            _3058 = _2946;
        }
        else
        {
            float _3073 = inversesqrt(dot(vec3(_1914, _1915, _1916), vec3(_1914, _1915, _1916)));
            float _3074 = _3073 * _1914;
            float _3075 = _3073 * _1915;
            float _3076 = _3073 * _1916;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2953 < ((_2951 >> 12u) & 15u))
            {
                float _3049;
                float _3051;
                float _3053;
                float _3055;
                float _3057;
                float _3059;
                float _3187 = _2936;
                float _3188 = _2938;
                float _3189 = _2940;
                float _3190 = _2942;
                float _3191 = _2944;
                float _3192 = _2946;
                uint _3193 = _2953;
                uint _3202;
                bool _3203;
                for (;;)
                {
                    _3202 = texelFetch(g_lightClassification, int((((_2850 << 5u) + (_2836 << 9u)) + (_3193 << 2u)) >> 2u)).x;
                    _3203 = _3202 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3203)
                    {
                        frontier_phi_72_pred = _3192;
                        frontier_phi_72_pred_1 = _3191;
                        frontier_phi_72_pred_2 = _3190;
                        frontier_phi_72_pred_3 = _3189;
                        frontier_phi_72_pred_4 = _3188;
                        frontier_phi_72_pred_5 = _3187;
                    }
                    else
                    {
                        float _3386;
                        float _3387;
                        float _3388;
                        float _3389;
                        float _3390;
                        float _3391;
                        float _3680;
                        float _3681;
                        float _3682;
                        float _3683;
                        float _3684;
                        float _3685;
                        float _3399 = _3187;
                        float _3400 = _3188;
                        float _3401 = _3189;
                        float _3402 = _3190;
                        float _3403 = _3191;
                        float _3404 = _3192;
                        uint _3405 = _3202;
                        uint _3406;
                        vec4 _3431;
                        float _3432;
                        vec4 _3447;
                        vec3 _3459;
                        vec4 _3474;
                        vec4 _3489;
                        float _3536;
                        bool _3537;
                        for (;;)
                        {
                            uint _3416 = ((_3193 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3405));
                            _3406 = (_3405 + 4294967295u) & _3405;
                            uint _3418 = _3416 * 40u;
                            _3431 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3418)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3418 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3418 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3418 + 3u)).x));
                            _3432 = _3431.w;
                            uint _3434 = (_3416 * 40u) + 4u;
                            _3447 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3434)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3434 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3434 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3434 + 3u)).x));
                            uint _3449 = (_3416 * 40u) + 8u;
                            _3459 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3449)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3449 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3449 + 2u)).x));
                            uint _3461 = (_3416 * 40u) + 16u;
                            _3474 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3461)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3461 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3461 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3461 + 3u)).x));
                            uint _3476 = (_3416 * 40u) + 20u;
                            _3489 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3476)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3476 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3476 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3476 + 3u)).x));
                            uint _3492 = (_3416 * 40u) + 24u;
                            vec4 _3505 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3492)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3492 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3492 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3492 + 3u)).x));
                            uint _3511 = (_3416 * 40u) + 28u;
                            vec4 _3524 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3511)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3511 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3511 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3511 + 3u)).x));
                            _3536 = fma(_1916, _3524.z, fma(_1915, _3524.y, _3524.x * _1914)) + _3524.w;
                            _3537 = !((fma(_1916, _3505.z, fma(_1915, _3505.y, _3505.x * _1914)) + _3505.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3537)
                            {
                                float _3564 = _3431.x - _1914;
                                float _3565 = _3431.y - _1915;
                                float _3566 = _3431.z - _1916;
                                float _3567 = dot(vec3(_3564, _3565, _3566), vec3(_3564, _3565, _3566));
                                float _3570 = inversesqrt(_3567);
                                float _3571 = _3570 * _3564;
                                float _3572 = _3570 * _3565;
                                float _3573 = _3570 * _3566;
                                float _3577 = 1.0 - (_3567 / (_3432 * _3432));
                                float _4697 = isnan(0.0) ? _3577 : (isnan(_3577) ? 0.0 : max(_3577, 0.0));
                                float _3578 = isnan(1.0) ? _4697 : (isnan(_4697) ? 1.0 : min(_4697, 1.0));
                                float _3582 = sqrt(_3567) * _3447.w;
                                float _3584 = 1.39999997615814208984375 / (_3582 + 1.39999997615814208984375);
                                float _3585 = _3584 * _3584;
                                float _3588 = ((1.0 - _3585) * dot(vec3(_3571, _3572, _3573), vec3(_777, _780, _783))) + _3585;
                                float _3591 = _3582 * _3582;
                                float _3595 = (fma(_1916, _3474.z, fma(_1915, _3474.y, _3474.x * _1914)) + _3474.w) / _3536;
                                float _3596 = (fma(_1916, _3489.z, fma(_1915, _3489.y, _3489.x * _1914)) + _3489.w) / _3536;
                                float _3600 = 1.0 - dot(vec2(_3595, _3596), vec2(_3595, _3596));
                                float _4713 = isnan(0.0) ? _3600 : (isnan(_3600) ? 0.0 : max(_3600, 0.0));
                                float _3601 = isnan(1.0) ? _4713 : (isnan(_4713) ? 1.0 : min(_4713, 1.0));
                                float _3602 = _3601 * (((isnan(0.0) ? _3588 : (isnan(_3588) ? 0.0 : max(_3588, 0.0))) * _3578) / ((_3591 * 0.699999988079071044921875) + 1.0));
                                float _3614 = exp2(log2(1.0 / ((_3591 * 3.5) + 5.0)) * 0.25);
                                float _3615 = 1.0 - _852;
                                float _3622 = sqrt(1.0 - ((1.0 - (_3615 * _3615)) * (1.0 - (_3614 * _3614))));
                                float _3623 = _3622 * _3622;
                                float _3624 = _3623 * _3623;
                                float _3625 = _3571 - _3074;
                                float _3626 = _3572 - _3075;
                                float _3627 = _3573 - _3076;
                                float _3631 = inversesqrt(dot(vec3(_3625, _3626, _3627), vec3(_3625, _3626, _3627)));
                                float _3635 = dot(vec3(_777, _780, _783), vec3((-0.0) - _3074, (-0.0) - _3075, (-0.0) - _3076));
                                float _4724 = isnan(0.0) ? _3635 : (isnan(_3635) ? 0.0 : max(_3635, 0.0));
                                float _3638 = isnan(1.0) ? _4724 : (isnan(_4724) ? 1.0 : min(_4724, 1.0));
                                float _3639 = dot(vec3(_777, _780, _783), vec3(_3631 * _3625, _3631 * _3626, _3631 * _3627));
                                float _4735 = isnan(0.0) ? _3639 : (isnan(_3639) ? 0.0 : max(_3639, 0.0));
                                float _3642 = isnan(1.0) ? _4735 : (isnan(_4735) ? 1.0 : min(_4735, 1.0));
                                float _3646 = ((_3642 * _3642) * (_3624 + (-1.0))) + 1.0;
                                float _3647 = _3584 * _3623;
                                float _3648 = _3647 * _3647;
                                float _3654 = ((1.0 - _3648) * dot(vec3(_777, _780, _783), vec3(_3571, _3572, _3573))) + _3648;
                                float _4746 = isnan(0.0) ? _3654 : (isnan(_3654) ? 0.0 : max(_3654, 0.0));
                                float _3655 = isnan(1.0) ? _4746 : (isnan(_4746) ? 1.0 : min(_4746, 1.0));
                                float _3656 = 1.0 - _3623;
                                float _3666 = (0.5 / (((_3655 * ((_3638 * _3656) + _3623)) + 9.9999999392252902907785028219223e-09) + (((_3655 * _3656) + _3623) * _3638))) * _3655;
                                float _4757 = isnan(0.0) ? _3666 : (isnan(_3666) ? 0.0 : max(_3666, 0.0));
                                float _3676 = (_3601 * _3578) * (((_3624 * 3.1415927410125732421875) * (isnan(1.0) ? _4757 : (isnan(_4757) ? 1.0 : min(_4757, 1.0)))) / ((_3646 * _3646) * ((_3591 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3602 * _3447.y;
                                frontier_phi_78_pred_1 = _3602 * _3447.x;
                                frontier_phi_78_pred_2 = _3676 * _3459.z;
                                frontier_phi_78_pred_3 = _3676 * _3459.y;
                                frontier_phi_78_pred_4 = _3676 * _3459.x;
                                frontier_phi_78_pred_5 = _3602 * _3447.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3684 = frontier_phi_78_pred;
                            _3683 = frontier_phi_78_pred_1;
                            _3682 = frontier_phi_78_pred_2;
                            _3681 = frontier_phi_78_pred_3;
                            _3680 = frontier_phi_78_pred_4;
                            _3685 = frontier_phi_78_pred_5;
                            _3389 = _3683 + _3402;
                            _3390 = _3684 + _3403;
                            _3391 = _3685 + _3404;
                            _3386 = _3680 + _3399;
                            _3387 = _3681 + _3400;
                            _3388 = _3682 + _3401;
                            if (_3406 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3399 = _3386;
                                _3400 = _3387;
                                _3401 = _3388;
                                _3402 = _3389;
                                _3403 = _3390;
                                _3404 = _3391;
                                _3405 = _3406;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3391;
                        frontier_phi_72_pred_1 = _3390;
                        frontier_phi_72_pred_2 = _3389;
                        frontier_phi_72_pred_3 = _3388;
                        frontier_phi_72_pred_4 = _3387;
                        frontier_phi_72_pred_5 = _3386;
                    }
                    _3059 = frontier_phi_72_pred;
                    _3057 = frontier_phi_72_pred_1;
                    _3055 = frontier_phi_72_pred_2;
                    _3053 = frontier_phi_72_pred_3;
                    _3051 = frontier_phi_72_pred_4;
                    _3049 = frontier_phi_72_pred_5;
                    uint _3194 = _3193 + 1u;
                    if (_3194 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3187 = _3049;
                        _3188 = _3051;
                        _3189 = _3053;
                        _3190 = _3055;
                        _3191 = _3057;
                        _3192 = _3059;
                        _3193 = _3194;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3059;
                frontier_phi_60_61_ladder_1 = _3057;
                frontier_phi_60_61_ladder_2 = _3053;
                frontier_phi_60_61_ladder_3 = _3051;
                frontier_phi_60_61_ladder_4 = _3049;
                frontier_phi_60_61_ladder_5 = _3055;
            }
            else
            {
                frontier_phi_60_61_ladder = _2946;
                frontier_phi_60_61_ladder_1 = _2944;
                frontier_phi_60_61_ladder_2 = _2940;
                frontier_phi_60_61_ladder_3 = _2938;
                frontier_phi_60_61_ladder_4 = _2936;
                frontier_phi_60_61_ladder_5 = _2942;
            }
            _3048 = frontier_phi_60_61_ladder_4;
            _3050 = frontier_phi_60_61_ladder_3;
            _3052 = frontier_phi_60_61_ladder_2;
            _3054 = frontier_phi_60_61_ladder_5;
            _3056 = frontier_phi_60_61_ladder_1;
            _3058 = frontier_phi_60_61_ladder;
        }
        float _3063 = isnan(1.0) ? _836 : (isnan(_836) ? 1.0 : min(_836, 1.0));
        _2869 = (_3063 * _3054) + _2381;
        _2871 = (_3063 * _3056) + _2383;
        _2873 = (_3063 * _3058) + _2385;
        _2875 = ((_3048 * _821) * _3063) + _2719;
        _2877 = ((_3050 * _823) * _3063) + _2721;
        _2879 = ((_3052 * _824) * _3063) + _2723;
    }
    else
    {
        _2869 = _2381;
        _2871 = _2383;
        _2873 = _2385;
        _2875 = _2719;
        _2877 = _2721;
        _2879 = _2723;
    }
    float _4773 = isnan(0.0) ? _811 : (isnan(_811) ? 0.0 : max(_811, 0.0));
    float _4784 = isnan(0.0) ? _812 : (isnan(_812) ? 0.0 : max(_812, 0.0));
    float _4795 = isnan(0.0) ? _813 : (isnan(_813) ? 0.0 : max(_813, 0.0));
    uint _2899 = _796 + 6u;
    float _2907 = _758 / cbSceneParam._m0[86u].x;
    float _2908 = _759 / cbSceneParam._m0[86u].y;
    vec4 _2922 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2907, _2908, (log2((isnan(cbSceneParam._m0[77u].w) ? _693 : (isnan(_693) ? cbSceneParam._m0[77u].w : min(_693, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2924 = _2922.x;
    float _2925 = _2922.y;
    float _2926 = _2922.z;
    float _2927 = _2922.w;
    float _2998;
    float _3000;
    float _3002;
    float _3004;
    if (_693 > cbSceneParam._m0[78u].w)
    {
        float _2961 = isnan(_693) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _693 : min(cbSceneParam._m0[80u].w, _693));
        float _2962 = _2961 / _693;
        float _2973 = _2962 * _743;
        float _2974 = _744 * _2962;
        float _2975 = (-0.0) - _2974;
        float _2976 = _2962 * _745;
        float _2978 = (cbSceneParam._m0[77u].w * _2975) / _2961;
        float _2979 = _2978 + cbSceneParam._m0[79u].w;
        float _2980 = cbSceneParam._m0[79u].w - _2974;
        float _2986 = sqrt(((_2973 * _2973) + (_2974 * _2974)) + (_2976 * _2976));
        float _2989 = (1.0 - (cbSceneParam._m0[77u].w / _2961)) * _2986;
        float _2994 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2996 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3149;
        if (abs((_2975 - _2978) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3149 = ((((_2979 > 0.0) ? exp2(_2994 * _2979) : (2.0 - exp2(_2996 * _2979))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2989;
        }
        else
        {
            float _3109 = 1.0 / cbSceneParam._m0[80u].x;
            float _3110 = isnan(_2980) ? _2979 : (isnan(_2979) ? _2980 : max(_2979, _2980));
            float _3111 = isnan(_2980) ? _2979 : (isnan(_2979) ? _2980 : min(_2979, _2980));
            float _3120 = isnan(0.0) ? _3110 : (isnan(_3110) ? 0.0 : min(_3110, 0.0));
            float _3121 = isnan(0.0) ? _3111 : (isnan(_3111) ? 0.0 : min(_3111, 0.0));
            _3149 = ((abs(_2986 / _2975) * cbSceneParam._m0[80u].y) * ((((_3120 - _3121) * 2.0) - ((exp2(_2994 * (isnan(0.0) ? _3110 : (isnan(_3110) ? 0.0 : max(_3110, 0.0)))) - exp2(_2994 * (isnan(0.0) ? _3111 : (isnan(_3111) ? 0.0 : max(_3111, 0.0))))) * _3109)) - ((exp2(_2996 * _3120) - exp2(_2996 * _3121)) * _3109))) + (_2989 * cbSceneParam._m0[80u].z);
        }
        vec4 _3151 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2907, _2908, 1.0), 0.0);
        float _3160 = exp2((_3149 * (-1.44269502162933349609375)) * (1.0 - _3151.w));
        float _3161 = log2(_3160);
        float _3177 = log2(_2927);
        _2998 = (exp2(_3177 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3161 * cbSceneParam._m0[78u].x)) * _3151.x) / cbSceneParam._m0[78u].x)) + _2924;
        _3000 = (exp2(_3177 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3161 * cbSceneParam._m0[78u].y)) * _3151.y) / cbSceneParam._m0[78u].y)) + _2925;
        _3002 = (exp2(_3177 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3161 * cbSceneParam._m0[78u].z)) * _3151.z) / cbSceneParam._m0[78u].z)) + _2926;
        _3004 = _3160 * _2927;
    }
    else
    {
        _2998 = _2924;
        _3000 = _2925;
        _3002 = _2926;
        _3004 = _2927;
    }
    float _3016 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3017 = _3016 == 3.0;
    float _3018 = log2(_3004);
    float _3025 = exp2(_3018 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4773 : (isnan(_4773) ? 1.0 : min(_4773, 1.0))) * (_2869 + ((isnan(0.0) ? _1567 : (isnan(_1567) ? 0.0 : max(_1567, 0.0))) * _836))) + ((_2875 + ((isnan(0.0) ? _1861 : (isnan(_1861) ? 0.0 : max(_1861, 0.0))) * _1646)) * cbPerFrame._m0[3u].x));
    float _3026 = exp2(_3018 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4784 : (isnan(_4784) ? 1.0 : min(_4784, 1.0))) * (_2871 + ((isnan(0.0) ? _1570 : (isnan(_1570) ? 0.0 : max(_1570, 0.0))) * _836))) + ((_2877 + ((isnan(0.0) ? _1864 : (isnan(_1864) ? 0.0 : max(_1864, 0.0))) * _1646)) * cbPerFrame._m0[3u].x));
    float _3027 = exp2(_3018 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4795 : (isnan(_4795) ? 1.0 : min(_4795, 1.0))) * (_2873 + ((isnan(0.0) ? _1573 : (isnan(_1573) ? 0.0 : max(_1573, 0.0))) * _836))) + ((_2879 + ((isnan(0.0) ? _1867 : (isnan(_1867) ? 0.0 : max(_1867, 0.0))) * _1646)) * cbPerFrame._m0[3u].x));
    float _3036 = (_3016 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3036 * (_3017 ? _3025 : (_3025 + (cbSceneParam._m0[72u].w * _2998)));
    SV_Target.y = _3036 * (_3017 ? _3026 : (_3026 + (cbSceneParam._m0[72u].w * _3000)));
    SV_Target.z = _3036 * (_3017 ? _3027 : (_3027 + (cbSceneParam._m0[72u].w * _3002)));
    SV_Target.w = cbInstanceData._m0[_2899].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2899].w;
}


