#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[20];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_19;
layout(set = 0, binding = 11) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_3;
layout(set = 0, binding = 14) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_5;
layout(set = 0, binding = 15) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_6;
layout(set = 0, binding = 16) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_7;
layout(set = 0, binding = 17) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_8;
layout(set = 0, binding = 2) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_13;
layout(set = 0, binding = 5) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_14;
layout(set = 0, binding = 6) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_15;
layout(set = 0, binding = 7) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_16;
layout(set = 0, binding = 8) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_17;
layout(set = 0, binding = 9) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_18;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1290;
float _3955;
float _3956;
float _3957;
float _3958;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _209 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _210 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _211 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _217 = inversesqrt(dot(vec3(_209, _210, _211), vec3(_209, _210, _211)));
    float _224 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _231 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _254 = sin(cbMtdParam._m0[18u].x);
    float _255 = cos(cbMtdParam._m0[18u].x);
    float _256 = TEXCOORD.x - cbMtdParam._m0[17u].w;
    float _257 = TEXCOORD.y - cbMtdParam._m0[17u].w;
    float _265 = (cbMtdParam._m0[17u].w + cbMtdParam._m0[19u].y) + fma(_257, (-0.0) - _254, _255 * _256);
    float _267 = (cbMtdParam._m0[17u].w + cbMtdParam._m0[19u].z) + fma(_257, _255, _256 * _254);
    vec4 _280 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * _265) + cbTextureTilingScale._m0[1u].z, (_267 * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w));
    float _286 = _280.x * cbMtdParam._m0[10u].x;
    float _287 = _280.y * cbMtdParam._m0[10u].y;
    float _288 = _280.z * cbMtdParam._m0[10u].z;
    vec4 _306 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w));
    vec4 _325 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_0, SS_WrapLinear), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _350 = cbMtdParam._m0[19u].x * texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.x) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD.y) + cbTextureTilingScale._m0[13u].w)).x;
    float _361 = ((cbMtdParam._m0[15u].x * (-1.39999997615814208984375)) * (((1.0 - _325.x) * 2.0) - _350)) + 1.0;
    float _3967 = isnan(0.0) ? _361 : (isnan(_361) ? 0.0 : max(_361, 0.0));
    float _362 = isnan(1.0) ? _3967 : (isnan(_3967) ? 1.0 : min(_3967, 1.0));
    float _369 = (_362 * ((_306.x * cbMtdParam._m0[11u].x) - _286)) + _286;
    float _370 = (_362 * ((_306.y * cbMtdParam._m0[11u].y) - _287)) + _287;
    float _371 = (_362 * ((_306.z * cbMtdParam._m0[11u].z) - _288)) + _288;
    vec4 _389 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_8, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[17u].x * TEXCOORD.x) + cbTextureTilingScale._m0[17u].z, (cbTextureTilingScale._m0[17u].y * TEXCOORD.y) + cbTextureTilingScale._m0[17u].w));
    float _402 = (((((1.0 - _325.y) * 2.0) - _350) * (-1.39999997615814208984375)) * cbMtdParam._m0[18u].z) + 1.0;
    float _3978 = isnan(0.0) ? _402 : (isnan(_402) ? 0.0 : max(_402, 0.0));
    float _403 = isnan(1.0) ? _3978 : (isnan(_3978) ? 1.0 : min(_3978, 1.0));
    float _410 = (((_389.x * cbMtdParam._m0[12u].x) - _369) * _403) + _369;
    float _411 = (_403 * ((_389.y * cbMtdParam._m0[12u].y) - _370)) + _370;
    float _412 = (_403 * ((_389.z * cbMtdParam._m0[12u].z) - _371)) + _371;
    vec4 _429 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _442 = (((((1.0 - _325.z) * 2.0) - _350) * (-1.39999997615814208984375)) * cbMtdParam._m0[18u].w) + 1.0;
    float _3989 = isnan(0.0) ? _442 : (isnan(_442) ? 0.0 : max(_442, 0.0));
    float _443 = isnan(1.0) ? _3989 : (isnan(_3989) ? 1.0 : min(_3989, 1.0));
    vec4 _471 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _479 = ((((((_429.x * cbMtdParam._m0[13u].x) - _410) * _443) + _410) * 4.55000019073486328125) * cbMtdParam._m0[9u].x) * _471.x;
    float _482 = ((((_443 * ((_429.y * cbMtdParam._m0[13u].y) - _411)) + _411) * 4.55000019073486328125) * cbMtdParam._m0[9u].y) * _471.y;
    float _485 = ((((_443 * ((_429.z * cbMtdParam._m0[13u].z) - _412)) + _412) * 4.55000019073486328125) * cbMtdParam._m0[9u].z) * _471.z;
    vec4 _498 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * _265) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _267) + cbTextureTilingScale._m0[5u].w));
    float _500 = _498.x;
    float _518 = ((texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w)).x - _500) * _362) + _500;
    float _535 = ((texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w)).x - _518) * _403) + _518;
    float _554 = (((texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w)).x - _535) * _443) + _535) * cbMtdParam._m0[18u].y;
    vec4 _567 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[14u].x * _265) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _267) + cbTextureTilingScale._m0[14u].w));
    float _569 = _567.x;
    float _570 = _567.y;
    float _573 = cbMtdParam._m0[17u].y * _567.z;
    vec4 _585 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * TEXCOORD.x) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * TEXCOORD.y) + cbTextureTilingScale._m0[15u].w));
    float _594 = (((cbMtdParam._m0[17u].x * _585.z) - _573) * _362) + _573;
    vec4 _607 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_15, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _619 = (((cbMtdParam._m0[16u].w * _607.z) - _594) * _403) + _594;
    vec4 _632 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _641 = (((cbMtdParam._m0[16u].z * _632.z) - _619) * _443) + _619;
    vec4 _654 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[16u].x * TEXCOORD.x) + cbTextureTilingScale._m0[16u].z, (cbTextureTilingScale._m0[16u].y * TEXCOORD.y) + cbTextureTilingScale._m0[16u].w));
    float _667 = ((_585.x - _569) * _362) + _569;
    float _668 = ((_585.y - _570) * _362) + _570;
    float _673 = ((_607.x - _667) * _403) + _667;
    float _674 = ((_607.y - _668) * _403) + _668;
    float _683 = ((((_632.x - _673) * _443) + _673) * 2.0) + (-1.0);
    float _684 = ((((_632.y - _674) * _443) + _674) * 2.0) + (-1.0);
    float _685 = dot(vec2(_683, _684), vec2(_683, _684));
    float _4000 = isnan(0.0) ? _685 : (isnan(_685) ? 0.0 : max(_685, 0.0));
    float _690 = sqrt(1.0 - (isnan(1.0) ? _4000 : (isnan(_4000) ? 1.0 : min(_4000, 1.0))));
    float _693 = (((_654.x * 2.0) + (-1.0)) * cbMtdParam._m0[16u].y) + _683;
    float _694 = (((_654.y * 2.0) + (-1.0)) * cbMtdParam._m0[16u].y) + _684;
    float _697 = fma(_690, _224 * NORMAL.x, fma(_694, _231 * TANGENT.x, (_217 * _209) * _693));
    float _700 = fma(_690, _224 * NORMAL.y, fma(_694, _231 * TANGENT.y, (_217 * _210) * _693));
    float _703 = fma(_690, _224 * NORMAL.z, fma(_694, _231 * TANGENT.z, (_217 * _211) * _693));
    float _707 = inversesqrt(dot(vec3(_697, _700, _703), vec3(_697, _700, _703)));
    float _708 = _707 * _697;
    float _709 = _707 * _700;
    float _710 = _707 * _703;
    float _4011 = isnan(0.0) ? _641 : (isnan(_641) ? 0.0 : max(_641, 0.0));
    float _711 = isnan(1.0) ? _4011 : (isnan(_4011) ? 1.0 : min(_4011, 1.0));
    float _4022 = isnan(0.0) ? _479 : (isnan(_479) ? 0.0 : max(_479, 0.0));
    float _4033 = isnan(0.0) ? _482 : (isnan(_482) ? 0.0 : max(_482, 0.0));
    float _4044 = isnan(0.0) ? _485 : (isnan(_485) ? 0.0 : max(_485, 0.0));
    float _4055 = isnan(0.0) ? _554 : (isnan(_554) ? 0.0 : max(_554, 0.0));
    float _715 = isnan(1.0) ? _4055 : (isnan(_4055) ? 1.0 : min(_4055, 1.0));
    float _731 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _771 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _781 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _771);
    float _782 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _771);
    float _783 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _771);
    float _787 = inversesqrt(dot(vec3(_781, _782, _783), vec3(_781, _782, _783)));
    float _788 = _781 * _787;
    float _789 = _782 * _787;
    float _790 = _783 * _787;
    vec4 _795 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _797 = _795.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _969 = sqrt(((_781 * _781) + (_782 * _782)) + (_783 * _783));
        float _975 = (cbMatDynParam._m0[5u].x * _969) + cbMatDynParam._m0[5u].y;
        float _4066 = isnan(0.0) ? _975 : (isnan(_975) ? 0.0 : max(_975, 0.0));
        float _976 = isnan(1.0) ? _4066 : (isnan(_4066) ? 1.0 : min(_4066, 1.0));
        float _980 = (cbMatDynParam._m0[5u].z * _969) + cbMatDynParam._m0[5u].w;
        float _4077 = isnan(0.0) ? _980 : (isnan(_980) ? 0.0 : max(_980, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4077 : (isnan(_4077) ? 1.0 : min(_4077, 1.0))) - _976)) + _976) < ((_797 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _808 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _809 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _827 = fma(_710, cbSceneParam._m0[5u].z, fma(_709, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _708));
    float _830 = fma(_710, cbSceneParam._m0[6u].z, fma(_709, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _708));
    float _833 = fma(_710, cbSceneParam._m0[7u].z, fma(_709, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _708));
    uint _846 = uint(roundEven(NORMAL.w)) * 13u;
    uint _847 = _846 + 9u;
    uint _848 = _847 + uint(cbMatDynParam._m0[0u].w);
    float _854 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4022 : (isnan(_4022) ? 1.0 : min(_4022, 1.0)))) * cbInstanceData._m0[_848].x;
    float _855 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4033 : (isnan(_4033) ? 1.0 : min(_4033, 1.0)))) * cbInstanceData._m0[_848].y;
    float _856 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4044 : (isnan(_4044) ? 1.0 : min(_4044, 1.0)))) * cbInstanceData._m0[_848].z;
    float _4088 = isnan(0.0) ? _854 : (isnan(_854) ? 0.0 : max(_854, 0.0));
    float _857 = isnan(1.0) ? _4088 : (isnan(_4088) ? 1.0 : min(_4088, 1.0));
    float _4099 = isnan(0.0) ? _855 : (isnan(_855) ? 0.0 : max(_855, 0.0));
    float _858 = isnan(1.0) ? _4099 : (isnan(_4099) ? 1.0 : min(_4099, 1.0));
    float _4110 = isnan(0.0) ? _856 : (isnan(_856) ? 0.0 : max(_856, 0.0));
    float _859 = isnan(1.0) ? _4110 : (isnan(_4110) ? 1.0 : min(_4110, 1.0));
    float _860 = 1.0 - _715;
    float _861 = _857 * _860;
    float _862 = _858 * _860;
    float _863 = _859 * _860;
    float _868 = (_857 + (-0.039999999105930328369140625)) * _715;
    float _869 = (_858 + (-0.039999999105930328369140625)) * _715;
    float _870 = (_859 + (-0.039999999105930328369140625)) * _715;
    float _871 = _868 + 0.039999999105930328369140625;
    float _873 = _869 + 0.039999999105930328369140625;
    float _874 = _870 + 0.039999999105930328369140625;
    vec4 _883 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _808, cbSceneParam._m0[86u].y * _809));
    float _886 = _883.x * TEXCOORD_5.w;
    float _887 = dot(vec3(_708, _709, _710), vec3(_788, _789, _790));
    float _890 = _887 * 2.0;
    float _894 = (_890 * _708) - _788;
    float _895 = (_890 * _709) - _789;
    float _896 = (_890 * _710) - _790;
    float _900 = abs(dot(vec3(_788, _789, _790), vec3(_708, _709, _710)));
    float _4121 = isnan(0.0) ? _900 : (isnan(_900) ? 0.0 : max(_900, 0.0));
    float _902 = sqrt(_711);
    float _915 = exp2((_902 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4121 : (isnan(_4121) ? 1.0 : min(_4121, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_902 * 3.0));
    float _921 = (1.0 - _915) * ((_902 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _922 = _915 * _902;
    float _950 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _954 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _958 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1289;
    float _1291;
    float _1292;
    float _1293;
    float _1294;
    float _1295;
    float _1296;
    float _1297;
    float _1298;
    float _1299;
    float _1300;
    float _1301;
    float _1302;
    float _1303;
    float _1304;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1014 = fma(_958, cbModelParam._m0[26u].z, fma(_954, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _950));
        float _1018 = fma(_958, cbModelParam._m0[27u].z, fma(_954, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _950));
        float _1022 = fma(_958, cbModelParam._m0[28u].z, fma(_954, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _950));
        float _1047 = _950 + _708;
        float _1048 = _954 + _709;
        float _1049 = _958 + _710;
        float _1059 = fma(_1049, cbModelParam._m0[26u].z, fma(_1048, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1047)) - _1014;
        float _1060 = fma(_1049, cbModelParam._m0[27u].z, fma(_1048, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1047)) - _1018;
        float _1061 = fma(_1049, cbModelParam._m0[28u].z, fma(_1048, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1047)) - _1022;
        float _1065 = inversesqrt(dot(vec3(_1059, _1060, _1061), vec3(_1059, _1060, _1061)));
        float _1078 = ((_1065 * _1059) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1014 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1079 = ((_1065 * _1060) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1018 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1080 = ((_1065 * _1061) / cbModelParam._m0[34u].z) + ((((((_1022 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1083 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1078, _1079, _1080), 0.0);
        vec4 _1090 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1078, _1079, _1080), 0.0);
        vec4 _1097 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1078, _1079, _1080), 0.0);
        vec4 _1104 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1078, _1079, _1080), 0.0);
        float _1117 = exp2((_1083.w + (-0.5)) * 20.0) * 2.0;
        float _1118 = _1117 * (_1083.x + (-0.5));
        float _1119 = _1117 * (_1083.y + (-0.5));
        float _1120 = _1117 * (_1083.z + (-0.5));
        float _1127 = exp2((_1090.w + (-0.5)) * 20.0) * 2.0;
        float _1128 = _1127 * (_1090.x + (-0.5));
        float _1129 = _1127 * (_1090.y + (-0.5));
        float _1130 = _1127 * (_1090.z + (-0.5));
        float _1137 = exp2((_1097.w + (-0.5)) * 20.0) * 2.0;
        float _1138 = _1137 * (_1097.x + (-0.5));
        float _1139 = _1137 * (_1097.y + (-0.5));
        float _1140 = _1137 * (_1097.z + (-0.5));
        float _1147 = exp2((_1104.w + (-0.5)) * 20.0) * 2.0;
        float _1148 = _1147 * (_1104.x + (-0.5));
        float _1149 = _1147 * (_1104.y + (-0.5));
        float _1150 = _1147 * (_1104.z + (-0.5));
        float _1151 = isnan(0.0) ? _1148 : (isnan(_1148) ? 0.0 : max(_1148, 0.0));
        float _1152 = isnan(0.0) ? _1149 : (isnan(_1149) ? 0.0 : max(_1149, 0.0));
        float _1153 = isnan(0.0) ? _1150 : (isnan(_1150) ? 0.0 : max(_1150, 0.0));
        float _1154 = _1118 * 0.5;
        float _1155 = _1128 * 0.5;
        float _1156 = _1138 * 0.5;
        float _1157 = dot(vec3(_1154, _1155, _1156), vec3(_1154, _1155, _1156));
        float _1162 = (_1157 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1157);
        float _1171 = (dot(vec3(_708, _709, _710), vec3(_1162 * _1154, _1162 * _1155, _1162 * _1156)) + 1.0) * 0.5;
        float _4147 = isnan(0.0) ? _1171 : (isnan(_1171) ? 0.0 : max(_1171, 0.0));
        float _1181 = sqrt(((_1155 * _1155) + (_1154 * _1154)) + (_1156 * _1156)) / (_1151 + 9.9999997473787516355514526367188e-06);
        float _4158 = isnan(0.0) ? _1181 : (isnan(_1181) ? 0.0 : max(_1181, 0.0));
        float _1182 = isnan(1.0) ? _4158 : (isnan(_4158) ? 1.0 : min(_4158, 1.0));
        float _1183 = _1182 * 2.0;
        float _1187 = (1.0 - _1182) / (_1182 + 1.0);
        float _4169 = isnan(0.0) ? _1187 : (isnan(_1187) ? 0.0 : max(_1187, 0.0));
        float _1188 = isnan(1.0) ? _4169 : (isnan(_4169) ? 1.0 : min(_4169, 1.0));
        float _1197 = ((((1.0 - _1188) * (_1183 + 2.0)) * exp2(log2(isnan(1.0) ? _4147 : (isnan(_4147) ? 1.0 : min(_4147, 1.0))) * (_1183 + 1.0))) + _1188) * _1151;
        float _1198 = _1119 * 0.5;
        float _1199 = _1129 * 0.5;
        float _1200 = _1139 * 0.5;
        float _1201 = dot(vec3(_1198, _1199, _1200), vec3(_1198, _1199, _1200));
        float _1206 = (_1201 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1201);
        float _1214 = (dot(vec3(_708, _709, _710), vec3(_1206 * _1198, _1206 * _1199, _1206 * _1200)) + 1.0) * 0.5;
        float _4180 = isnan(0.0) ? _1214 : (isnan(_1214) ? 0.0 : max(_1214, 0.0));
        float _1223 = sqrt(((_1199 * _1199) + (_1198 * _1198)) + (_1200 * _1200)) / (_1152 + 9.9999997473787516355514526367188e-06);
        float _4191 = isnan(0.0) ? _1223 : (isnan(_1223) ? 0.0 : max(_1223, 0.0));
        float _1224 = isnan(1.0) ? _4191 : (isnan(_4191) ? 1.0 : min(_4191, 1.0));
        float _1225 = _1224 * 2.0;
        float _1229 = (1.0 - _1224) / (_1224 + 1.0);
        float _4202 = isnan(0.0) ? _1229 : (isnan(_1229) ? 0.0 : max(_1229, 0.0));
        float _1230 = isnan(1.0) ? _4202 : (isnan(_4202) ? 1.0 : min(_4202, 1.0));
        float _1239 = ((((1.0 - _1230) * (_1225 + 2.0)) * exp2(log2(isnan(1.0) ? _4180 : (isnan(_4180) ? 1.0 : min(_4180, 1.0))) * (_1225 + 1.0))) + _1230) * _1152;
        float _1240 = _1120 * 0.5;
        float _1241 = _1130 * 0.5;
        float _1242 = _1140 * 0.5;
        float _1243 = dot(vec3(_1240, _1241, _1242), vec3(_1240, _1241, _1242));
        float _1248 = (_1243 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1243);
        float _1256 = (dot(vec3(_708, _709, _710), vec3(_1248 * _1240, _1248 * _1241, _1248 * _1242)) + 1.0) * 0.5;
        float _4213 = isnan(0.0) ? _1256 : (isnan(_1256) ? 0.0 : max(_1256, 0.0));
        float _1265 = sqrt(((_1241 * _1241) + (_1240 * _1240)) + (_1242 * _1242)) / (_1153 + 9.9999997473787516355514526367188e-06);
        float _4224 = isnan(0.0) ? _1265 : (isnan(_1265) ? 0.0 : max(_1265, 0.0));
        float _1266 = isnan(1.0) ? _4224 : (isnan(_4224) ? 1.0 : min(_4224, 1.0));
        float _1267 = _1266 * 2.0;
        float _1271 = (1.0 - _1266) / (_1266 + 1.0);
        float _4235 = isnan(0.0) ? _1271 : (isnan(_1271) ? 0.0 : max(_1271, 0.0));
        float _1272 = isnan(1.0) ? _4235 : (isnan(_4235) ? 1.0 : min(_4235, 1.0));
        float _1281 = ((((1.0 - _1272) * (_1267 + 2.0)) * exp2(log2(isnan(1.0) ? _4213 : (isnan(_4213) ? 1.0 : min(_4213, 1.0))) * (_1267 + 1.0))) + _1272) * _1153;
        _1289 = _1120;
        _1291 = _1119;
        _1292 = _1118;
        _1293 = _1130;
        _1294 = _1129;
        _1295 = _1128;
        _1296 = _1140;
        _1297 = _1139;
        _1298 = _1138;
        _1299 = _1153;
        _1300 = _1152;
        _1301 = _1151;
        _1302 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1197 : (isnan(_1197) ? 0.0 : max(_1197, 0.0)));
        _1303 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1239 : (isnan(_1239) ? 0.0 : max(_1239, 0.0)));
        _1304 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1281 : (isnan(_1281) ? 0.0 : max(_1281, 0.0)));
    }
    else
    {
        _1289 = _1290;
        _1291 = _1290;
        _1292 = _1290;
        _1293 = _1290;
        _1294 = _1290;
        _1295 = _1290;
        _1296 = _1290;
        _1297 = _1290;
        _1298 = _1290;
        _1299 = _1290;
        _1300 = _1290;
        _1301 = _1290;
        _1302 = 0.0;
        _1303 = 0.0;
        _1304 = 0.0;
    }
    float _1602;
    float _1603;
    float _1604;
    float _1605;
    float _1606;
    float _1607;
    float _1608;
    float _1609;
    float _1610;
    float _1611;
    float _1612;
    float _1613;
    float _1614;
    float _1615;
    float _1616;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1333 = fma(_958, cbModelParam._m0[30u].z, fma(_954, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _950));
        float _1337 = fma(_958, cbModelParam._m0[31u].z, fma(_954, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _950));
        float _1341 = fma(_958, cbModelParam._m0[32u].z, fma(_954, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _950));
        float _1364 = _950 + _708;
        float _1365 = _954 + _709;
        float _1366 = _958 + _710;
        float _1376 = fma(_1366, cbModelParam._m0[30u].z, fma(_1365, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1364)) - _1333;
        float _1377 = fma(_1366, cbModelParam._m0[31u].z, fma(_1365, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1364)) - _1337;
        float _1378 = fma(_1366, cbModelParam._m0[32u].z, fma(_1365, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1364)) - _1341;
        float _1382 = inversesqrt(dot(vec3(_1376, _1377, _1378), vec3(_1376, _1377, _1378)));
        float _1395 = ((_1382 * _1376) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1333 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1396 = ((_1382 * _1377) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1337 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1397 = ((_1382 * _1378) / cbModelParam._m0[35u].z) + ((((((_1341 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1399 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1395, _1396, _1397), 0.0);
        vec4 _1406 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1395, _1396, _1397), 0.0);
        vec4 _1413 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1395, _1396, _1397), 0.0);
        vec4 _1420 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1395, _1396, _1397), 0.0);
        float _1432 = exp2((_1399.w + (-0.5)) * 20.0) * 2.0;
        float _1433 = _1432 * (_1399.x + (-0.5));
        float _1434 = _1432 * (_1399.y + (-0.5));
        float _1435 = _1432 * (_1399.z + (-0.5));
        float _1442 = exp2((_1406.w + (-0.5)) * 20.0) * 2.0;
        float _1443 = _1442 * (_1406.x + (-0.5));
        float _1444 = _1442 * (_1406.y + (-0.5));
        float _1445 = _1442 * (_1406.z + (-0.5));
        float _1452 = exp2((_1413.w + (-0.5)) * 20.0) * 2.0;
        float _1453 = _1452 * (_1413.x + (-0.5));
        float _1454 = _1452 * (_1413.y + (-0.5));
        float _1455 = _1452 * (_1413.z + (-0.5));
        float _1462 = exp2((_1420.w + (-0.5)) * 20.0) * 2.0;
        float _1463 = _1462 * (_1420.x + (-0.5));
        float _1464 = _1462 * (_1420.y + (-0.5));
        float _1465 = _1462 * (_1420.z + (-0.5));
        float _1466 = isnan(0.0) ? _1463 : (isnan(_1463) ? 0.0 : max(_1463, 0.0));
        float _1467 = isnan(0.0) ? _1464 : (isnan(_1464) ? 0.0 : max(_1464, 0.0));
        float _1468 = isnan(0.0) ? _1465 : (isnan(_1465) ? 0.0 : max(_1465, 0.0));
        float _1469 = _1433 * 0.5;
        float _1470 = _1443 * 0.5;
        float _1471 = _1453 * 0.5;
        float _1472 = dot(vec3(_1469, _1470, _1471), vec3(_1469, _1470, _1471));
        float _1477 = (_1472 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1472);
        float _1485 = (dot(vec3(_708, _709, _710), vec3(_1477 * _1469, _1477 * _1470, _1477 * _1471)) + 1.0) * 0.5;
        float _4276 = isnan(0.0) ? _1485 : (isnan(_1485) ? 0.0 : max(_1485, 0.0));
        float _1494 = sqrt(((_1470 * _1470) + (_1469 * _1469)) + (_1471 * _1471)) / (_1466 + 9.9999997473787516355514526367188e-06);
        float _4287 = isnan(0.0) ? _1494 : (isnan(_1494) ? 0.0 : max(_1494, 0.0));
        float _1495 = isnan(1.0) ? _4287 : (isnan(_4287) ? 1.0 : min(_4287, 1.0));
        float _1496 = _1495 * 2.0;
        float _1500 = (1.0 - _1495) / (_1495 + 1.0);
        float _4298 = isnan(0.0) ? _1500 : (isnan(_1500) ? 0.0 : max(_1500, 0.0));
        float _1501 = isnan(1.0) ? _4298 : (isnan(_4298) ? 1.0 : min(_4298, 1.0));
        float _1510 = ((((1.0 - _1501) * (_1496 + 2.0)) * exp2(log2(isnan(1.0) ? _4276 : (isnan(_4276) ? 1.0 : min(_4276, 1.0))) * (_1496 + 1.0))) + _1501) * _1466;
        float _1511 = _1434 * 0.5;
        float _1512 = _1444 * 0.5;
        float _1513 = _1454 * 0.5;
        float _1514 = dot(vec3(_1511, _1512, _1513), vec3(_1511, _1512, _1513));
        float _1519 = (_1514 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1514);
        float _1527 = (dot(vec3(_708, _709, _710), vec3(_1519 * _1511, _1519 * _1512, _1519 * _1513)) + 1.0) * 0.5;
        float _4309 = isnan(0.0) ? _1527 : (isnan(_1527) ? 0.0 : max(_1527, 0.0));
        float _1536 = sqrt(((_1512 * _1512) + (_1511 * _1511)) + (_1513 * _1513)) / (_1467 + 9.9999997473787516355514526367188e-06);
        float _4320 = isnan(0.0) ? _1536 : (isnan(_1536) ? 0.0 : max(_1536, 0.0));
        float _1537 = isnan(1.0) ? _4320 : (isnan(_4320) ? 1.0 : min(_4320, 1.0));
        float _1538 = _1537 * 2.0;
        float _1542 = (1.0 - _1537) / (_1537 + 1.0);
        float _4331 = isnan(0.0) ? _1542 : (isnan(_1542) ? 0.0 : max(_1542, 0.0));
        float _1543 = isnan(1.0) ? _4331 : (isnan(_4331) ? 1.0 : min(_4331, 1.0));
        float _1552 = ((((1.0 - _1543) * (_1538 + 2.0)) * exp2(log2(isnan(1.0) ? _4309 : (isnan(_4309) ? 1.0 : min(_4309, 1.0))) * (_1538 + 1.0))) + _1543) * _1467;
        float _1553 = _1435 * 0.5;
        float _1554 = _1445 * 0.5;
        float _1555 = _1455 * 0.5;
        float _1556 = dot(vec3(_1553, _1554, _1555), vec3(_1553, _1554, _1555));
        float _1561 = (_1556 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1556);
        float _1569 = (dot(vec3(_708, _709, _710), vec3(_1561 * _1553, _1561 * _1554, _1561 * _1555)) + 1.0) * 0.5;
        float _4342 = isnan(0.0) ? _1569 : (isnan(_1569) ? 0.0 : max(_1569, 0.0));
        float _1578 = sqrt(((_1554 * _1554) + (_1553 * _1553)) + (_1555 * _1555)) / (_1468 + 9.9999997473787516355514526367188e-06);
        float _4353 = isnan(0.0) ? _1578 : (isnan(_1578) ? 0.0 : max(_1578, 0.0));
        float _1579 = isnan(1.0) ? _4353 : (isnan(_4353) ? 1.0 : min(_4353, 1.0));
        float _1580 = _1579 * 2.0;
        float _1584 = (1.0 - _1579) / (_1579 + 1.0);
        float _4364 = isnan(0.0) ? _1584 : (isnan(_1584) ? 0.0 : max(_1584, 0.0));
        float _1585 = isnan(1.0) ? _4364 : (isnan(_4364) ? 1.0 : min(_4364, 1.0));
        float _1594 = ((((1.0 - _1585) * (_1580 + 2.0)) * exp2(log2(isnan(1.0) ? _4342 : (isnan(_4342) ? 1.0 : min(_4342, 1.0))) * (_1580 + 1.0))) + _1585) * _1468;
        _1602 = _1435;
        _1603 = _1434;
        _1604 = _1433;
        _1605 = _1445;
        _1606 = _1444;
        _1607 = _1443;
        _1608 = _1455;
        _1609 = _1454;
        _1610 = _1453;
        _1611 = _1468;
        _1612 = _1467;
        _1613 = _1466;
        _1614 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1510 : (isnan(_1510) ? 0.0 : max(_1510, 0.0)));
        _1615 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1552 : (isnan(_1552) ? 0.0 : max(_1552, 0.0)));
        _1616 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1594 : (isnan(_1594) ? 0.0 : max(_1594, 0.0)));
    }
    else
    {
        _1602 = _1290;
        _1603 = _1290;
        _1604 = _1290;
        _1605 = _1290;
        _1606 = _1290;
        _1607 = _1290;
        _1608 = _1290;
        _1609 = _1290;
        _1610 = _1290;
        _1611 = _1290;
        _1612 = _1290;
        _1613 = _1290;
        _1614 = 0.0;
        _1615 = 0.0;
        _1616 = 0.0;
    }
    float _1626 = (cbModelParam._m0[1u].x * (_1614 - _1302)) + _1302;
    float _1627 = (cbModelParam._m0[1u].x * (_1615 - _1303)) + _1303;
    float _1628 = (cbModelParam._m0[1u].x * (_1616 - _1304)) + _1304;
    float _1649 = fma(_1628, cbSceneParam._m0[89u].z, fma(_1627, cbSceneParam._m0[89u].y, _1626 * cbSceneParam._m0[89u].x));
    float _1652 = fma(_1628, cbSceneParam._m0[90u].z, fma(_1627, cbSceneParam._m0[90u].y, _1626 * cbSceneParam._m0[90u].x));
    float _1655 = fma(_1628, cbSceneParam._m0[91u].z, fma(_1627, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1626));
    float _1670 = _894 * 0.5;
    float _1671 = _895 * 0.5;
    float _1672 = _896 * 0.5;
    float _1673 = dot(vec4(_1670, _1671, _1672, 1.0), vec4(_1604, _1607, _1610, _1613));
    float _1676 = dot(vec4(_1670, _1671, _1672, 1.0), vec4(_1603, _1606, _1609, _1612));
    float _1679 = dot(vec4(_1670, _1671, _1672, 1.0), vec4(_1602, _1605, _1608, _1611));
    float _1713;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1686 = dot(vec4(_1670, _1671, _1672, 1.0), vec4(_1289, _1293, _1296, _1299));
        float _1690 = dot(vec4(_1670, _1671, _1672, 1.0), vec4(_1291, _1294, _1297, _1300));
        float _1694 = dot(vec4(_1670, _1671, _1672, 1.0), vec4(_1292, _1295, _1298, _1301));
        float _1701 = dot(vec4(cbModelParam._m0[39u]), vec4(_1670, _1671, _1672, 1.0));
        _1713 = dot(vec3(isnan(0.0) ? _1694 : (isnan(_1694) ? 0.0 : max(_1694, 0.0)), isnan(0.0) ? _1690 : (isnan(_1690) ? 0.0 : max(_1690, 0.0)), isnan(0.0) ? _1686 : (isnan(_1686) ? 0.0 : max(_1686, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1701) ? 0.0 : (isnan(0.0) ? _1701 : max(0.0, _1701))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1713 = 1.0;
    }
    float _1724;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1715 = dot(vec4(cbModelParam._m0[40u]), vec4(_1670, _1671, _1672, 1.0));
        _1724 = dot(vec3(isnan(0.0) ? _1673 : (isnan(_1673) ? 0.0 : max(_1673, 0.0)), isnan(0.0) ? _1676 : (isnan(_1676) ? 0.0 : max(_1676, 0.0)), isnan(0.0) ? _1679 : (isnan(_1679) ? 0.0 : max(_1679, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1715) ? 0.0 : (isnan(0.0) ? _1715 : max(0.0, _1715))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1724 = 1.0;
    }
    float _1728 = (_1724 * cbModelParam._m0[1u].x) + (_1713 * (1.0 - cbModelParam._m0[1u].x));
    float _1738 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _711);
    float _1739 = isnan(_1738) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1738 : min(cbModelParam._m0[25u].z, _1738));
    float _1819;
    float _1821;
    float _1823;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1786 = fma(_958, cbModelParam._m0[13u].z, fma(_954, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _950)) + cbModelParam._m0[13u].w;
        float _1790 = fma(_958, cbModelParam._m0[14u].z, fma(_954, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _950)) + cbModelParam._m0[14u].w;
        float _1794 = fma(_958, cbModelParam._m0[15u].z, fma(_954, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _950)) + cbModelParam._m0[15u].w;
        float _1797 = fma(_896, cbModelParam._m0[13u].z, fma(_895, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _894));
        float _1800 = fma(_896, cbModelParam._m0[14u].z, fma(_895, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _894));
        float _1803 = fma(_896, cbModelParam._m0[15u].z, fma(_895, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _894));
        float _1831;
        if (_1797 > 0.0)
        {
            _1831 = abs((1.0 - _1786) / _1797);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1797 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1786 + 1.0) / _1797);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1831 = frontier_phi_17_15_ladder;
        }
        float _2004;
        if (_1800 > 0.0)
        {
            _2004 = abs((1.0 - _1790) / _1800);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1800 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1790 + 1.0) / _1800);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2004 = frontier_phi_26_22_ladder;
        }
        float _2299;
        if (_1803 > 0.0)
        {
            _2299 = abs((1.0 - _1794) / _1803);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1803 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1794 + 1.0) / _1803);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2299 = frontier_phi_38_33_ladder;
        }
        float _2301 = isnan(_2004) ? _1831 : (isnan(_1831) ? _2004 : min(_1831, _2004));
        float _2302 = isnan(_2299) ? _2301 : (isnan(_2301) ? _2299 : min(_2301, _2299));
        float _2306 = (_2302 * _1797) + _1786;
        float _2307 = (_2302 * _1800) + _1790;
        float _2308 = (_2302 * _1803) + _1794;
        float _2309 = _2302 * 9.9999997473787516355514526367188e-05;
        float _2311 = (-1.0) - _2309;
        float _2313 = _2309 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2308 > _2313) || ((_2308 < _2311) || ((_2307 > _2313) || ((_2307 < _2311) || ((_2306 < _2311) || (_2306 > _2313))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2453 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2308, cbModelParam._m0[9u].z, fma(_2307, cbModelParam._m0[9u].y, _2306 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2308, cbModelParam._m0[10u].z, fma(_2307, cbModelParam._m0[10u].y, _2306 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2308, cbModelParam._m0[11u].z, fma(_2307, cbModelParam._m0[11u].y, _2306 * cbModelParam._m0[11u].x))), _1739);
            frontier_phi_16_38_ladder = _2453.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2453.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2453.x * cbModelParam._m0[1u].y;
        }
        _1819 = frontier_phi_16_38_ladder_2;
        _1821 = frontier_phi_16_38_ladder_1;
        _1823 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1807 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_894, _895, _896), _1739);
        _1819 = _1807.x * cbModelParam._m0[1u].y;
        _1821 = _1807.y * cbModelParam._m0[1u].y;
        _1823 = _1807.z * cbModelParam._m0[1u].y;
    }
    float _1827 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _711);
    float _1828 = isnan(_1827) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1827 : min(cbModelParam._m0[25u].w, _1827));
    float _1919;
    float _1921;
    float _1923;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1883 = fma(_958, cbModelParam._m0[21u].z, fma(_954, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _950)) + cbModelParam._m0[21u].w;
        float _1887 = fma(_958, cbModelParam._m0[22u].z, fma(_954, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _950)) + cbModelParam._m0[22u].w;
        float _1891 = fma(_958, cbModelParam._m0[23u].z, fma(_954, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _950)) + cbModelParam._m0[23u].w;
        float _1894 = fma(_896, cbModelParam._m0[21u].z, fma(_895, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _894));
        float _1897 = fma(_896, cbModelParam._m0[22u].z, fma(_895, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _894));
        float _1900 = fma(_896, cbModelParam._m0[23u].z, fma(_895, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _894));
        float _2009;
        if (_1894 > 0.0)
        {
            _2009 = abs((1.0 - _1883) / _1894);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1894 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1883 + 1.0) / _1894);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2009 = frontier_phi_28_24_ladder;
        }
        float _2326;
        if (_1897 > 0.0)
        {
            _2326 = abs((1.0 - _1887) / _1897);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1897 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1887 + 1.0) / _1897);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2326 = frontier_phi_40_35_ladder;
        }
        float _2664;
        if (_1900 > 0.0)
        {
            _2664 = abs((1.0 - _1891) / _1900);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1900 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1891 + 1.0) / _1900);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2664 = frontier_phi_50_47_ladder;
        }
        float _2666 = isnan(_2326) ? _2009 : (isnan(_2009) ? _2326 : min(_2009, _2326));
        float _2667 = isnan(_2664) ? _2666 : (isnan(_2666) ? _2664 : min(_2666, _2664));
        float _2671 = (_2667 * _1894) + _1883;
        float _2672 = (_2667 * _1897) + _1887;
        float _2673 = (_2667 * _1900) + _1891;
        float _2674 = _2667 * 9.9999997473787516355514526367188e-05;
        float _2675 = (-1.0) - _2674;
        float _2677 = _2674 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2673 > _2677) || ((_2673 < _2675) || ((_2672 > _2677) || ((_2672 < _2675) || ((_2671 < _2675) || (_2671 > _2677))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2795 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2673, cbModelParam._m0[17u].z, fma(_2672, cbModelParam._m0[17u].y, _2671 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2673, cbModelParam._m0[18u].z, fma(_2672, cbModelParam._m0[18u].y, _2671 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2673, cbModelParam._m0[19u].z, fma(_2672, cbModelParam._m0[19u].y, _2671 * cbModelParam._m0[19u].x))), _1828);
            frontier_phi_25_50_ladder = _2795.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2795.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2795.x * cbModelParam._m0[1u].z;
        }
        _1919 = frontier_phi_25_50_ladder_2;
        _1921 = frontier_phi_25_50_ladder_1;
        _1923 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1903 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_894, _895, _896), _1828);
        _1919 = _1903.x * cbModelParam._m0[1u].z;
        _1921 = _1903.y * cbModelParam._m0[1u].z;
        _1923 = _1903.z * cbModelParam._m0[1u].z;
    }
    float _1936 = (((_921 * _871) + _922) * _886) * ((cbModelParam._m0[1u].w * (_1919 - _1819)) + _1819);
    float _1938 = (((_921 * _873) + _922) * _886) * ((cbModelParam._m0[1u].w * (_1921 - _1821)) + _1821);
    float _1940 = (((_921 * _874) + _922) * _886) * ((cbModelParam._m0[1u].w * (_1923 - _1823)) + _1823);
    float _1943 = fma(_1940, cbSceneParam._m0[89u].z, fma(_1938, cbSceneParam._m0[89u].y, _1936 * cbSceneParam._m0[89u].x));
    float _1946 = fma(_1940, cbSceneParam._m0[90u].z, fma(_1938, cbSceneParam._m0[90u].y, _1936 * cbSceneParam._m0[90u].x));
    float _1949 = fma(_1940, cbSceneParam._m0[91u].z, fma(_1938, cbSceneParam._m0[91u].y, _1936 * cbSceneParam._m0[91u].x));
    float _1983 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1987 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1991 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1995 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1996 = _1983 / _1995;
    float _1997 = _1987 / _1995;
    float _1998 = _1991 / _1995;
    float _2145;
    float _2146;
    float _2147;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2025 = ((uint(_1998 > cbSceneParam._m0[59u].y) + uint(_1998 > cbSceneParam._m0[59u].x)) + uint(_1998 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2026 = _2025 + 43u;
        uint _2034 = _2025 + 44u;
        uint _2042 = _2025 + 45u;
        uint _2050 = _2025 + 46u;
        float _2061 = fma(_1995, cbSceneParam._m0[_2026].w, fma(_1991, cbSceneParam._m0[_2026].z, fma(_1987, cbSceneParam._m0[_2026].y, _1983 * cbSceneParam._m0[_2026].x)));
        float _2065 = fma(_1995, cbSceneParam._m0[_2034].w, fma(_1991, cbSceneParam._m0[_2034].z, fma(_1987, cbSceneParam._m0[_2034].y, _1983 * cbSceneParam._m0[_2034].x)));
        float _2073 = fma(_1995, cbSceneParam._m0[_2050].w, fma(_1991, cbSceneParam._m0[_2050].z, fma(_1987, cbSceneParam._m0[_2050].y, _1983 * cbSceneParam._m0[_2050].x)));
        float _2078 = cbSceneParam._m0[33u].z * _2073;
        float _2080 = cbSceneParam._m0[33u].w * _2073;
        float _2083 = fma(_1995, cbSceneParam._m0[_2042].w, fma(_1991, cbSceneParam._m0[_2042].z, fma(_1987, cbSceneParam._m0[_2042].y, _1983 * cbSceneParam._m0[_2042].x))) / _2073;
        float _2131 = (cbSceneParam._m0[33u].x - sqrt(((_1997 * _1997) + (_1996 * _1996)) + (_1998 * _1998))) * cbSceneParam._m0[33u].y;
        float _4490 = isnan(0.0) ? _2131 : (isnan(_2131) ? 0.0 : max(_2131, 0.0));
        float _2138 = (isnan(1.0) ? _4490 : (isnan(_4490) ? 1.0 : min(_4490, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2078 + _2061) / _2073, (_2080 + _2065) / _2073), _2083), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2080 + _2061) / _2073, (_2065 - _2078) / _2073), _2083), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2061 - _2078) / _2073, (_2065 - _2080) / _2073), _2083), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2061 - _2080) / _2073, (_2078 + _2065) / _2073), _2083), 0.0)).x), vec4(0.25)));
        _2145 = 1.0 - (_2138 * cbSceneParam._m0[34u].x);
        _2146 = 1.0 - (_2138 * cbSceneParam._m0[34u].y);
        _2147 = 1.0 - (_2138 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2145 = 1.0;
        _2146 = 1.0;
        _2147 = 1.0;
    }
    float _2211;
    float _2213;
    float _2215;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2199 = fma(_1995, cbSceneParam._m0[63u].w, fma(_1991, cbSceneParam._m0[63u].z, fma(_1987, cbSceneParam._m0[63u].y, _1983 * cbSceneParam._m0[63u].x)));
        float _2200 = fma(_1995, cbSceneParam._m0[60u].w, fma(_1991, cbSceneParam._m0[60u].z, fma(_1987, cbSceneParam._m0[60u].y, _1983 * cbSceneParam._m0[60u].x))) / _2199;
        float _2201 = fma(_1995, cbSceneParam._m0[61u].w, fma(_1991, cbSceneParam._m0[61u].z, fma(_1987, cbSceneParam._m0[61u].y, _1983 * cbSceneParam._m0[61u].x))) / _2199;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2200 >= cbSceneParam._m0[64u].x) && (_2201 >= cbSceneParam._m0[64u].y)) && (_2200 <= cbSceneParam._m0[64u].z)) && (_2201 <= cbSceneParam._m0[64u].w))
        {
            float _2339 = fma(_1995, cbSceneParam._m0[62u].w, fma(_1991, cbSceneParam._m0[62u].z, fma(_1987, cbSceneParam._m0[62u].y, _1983 * cbSceneParam._m0[62u].x))) / _2199;
            float _2343 = isnan(cbSceneParam._m0[41u].w) ? _2339 : (isnan(_2339) ? cbSceneParam._m0[41u].w : max(_2339, cbSceneParam._m0[41u].w));
            float _2386 = (cbSceneParam._m0[33u].x - sqrt(((_1997 * _1997) + (_1996 * _1996)) + (_1998 * _1998))) * cbSceneParam._m0[33u].y;
            float _4506 = isnan(0.0) ? _2386 : (isnan(_2386) ? 0.0 : max(_2386, 0.0));
            float _2393 = (isnan(1.0) ? _4506 : (isnan(_4506) ? 1.0 : min(_4506, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2200, cbSceneParam._m0[33u].w + _2201), _2343), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2200, _2201 - cbSceneParam._m0[33u].z), _2343), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2200 - cbSceneParam._m0[33u].z, _2201 - cbSceneParam._m0[33u].w), _2343), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2200 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2201), _2343), 0.0)).x), vec4(0.25)));
            float _2397 = 1.0 - (_2393 * cbSceneParam._m0[34u].x);
            float _2398 = 1.0 - (_2393 * cbSceneParam._m0[34u].y);
            float _2399 = 1.0 - (_2393 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2399) ? _2147 : (isnan(_2147) ? _2399 : min(_2147, _2399));
            frontier_phi_37_36_ladder_1 = isnan(_2398) ? _2146 : (isnan(_2146) ? _2398 : min(_2146, _2398));
            frontier_phi_37_36_ladder_2 = isnan(_2397) ? _2145 : (isnan(_2145) ? _2397 : min(_2145, _2397));
        }
        else
        {
            frontier_phi_37_36_ladder = _2147;
            frontier_phi_37_36_ladder_1 = _2146;
            frontier_phi_37_36_ladder_2 = _2145;
        }
        _2211 = frontier_phi_37_36_ladder_2;
        _2213 = frontier_phi_37_36_ladder_1;
        _2215 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2211 = _2145;
        _2213 = _2146;
        _2215 = _2147;
    }
    uvec4 _2220 = floatBitsToUint(cbInstanceData._m0[_846 + 5u]);
    uint _2222 = _2220.x * 14u;
    uint _2223 = _2222 + 13u;
    float _2230 = _886 + (-1.0);
    float _2235 = (cbLight._m0[_2223].x * _2230) + 1.0;
    float _2236 = (cbLight._m0[_2223].y * _2230) + 1.0;
    float _2237 = (cbLight._m0[_2223].z * _2230) + 1.0;
    float _2238 = (cbLight._m0[_2223].w * _2230) + 1.0;
    uint _2239 = _2222 + 5u;
    float _2245 = isnan(1.0) ? _2236 : (isnan(_2236) ? 1.0 : min(_2236, 1.0));
    uint _2249 = _2222 + 4u;
    float _2258 = isnan(1.0) ? _2235 : (isnan(_2235) ? 1.0 : min(_2235, 1.0));
    uint _2262 = _2222 | 1u;
    float _2273 = dot(vec3(cbLight._m0[_2222].xyz), vec3(_708, _709, _710));
    float _2276 = dot(vec3(cbLight._m0[_2262].xyz), vec3(_708, _709, _710));
    float _4542 = isnan(0.0) ? _2273 : (isnan(_2273) ? 0.0 : max(_2273, 0.0));
    float _4553 = isnan(0.0) ? _2276 : (isnan(_2276) ? 0.0 : max(_2276, 0.0));
    float _2281 = (isnan(1.0) ? _4542 : (isnan(_4542) ? 1.0 : min(_4542, 1.0))) * 0.3183098733425140380859375;
    float _2283 = (isnan(1.0) ? _4553 : (isnan(_4553) ? 1.0 : min(_4553, 1.0))) * 0.3183098733425140380859375;
    float _2290 = ((cbLight._m0[_2239].x * _2245) * _2283) + (((cbLight._m0[_2249].x * _2211) * _2258) * _2281);
    float _2291 = ((_2245 * cbLight._m0[_2239].y) * _2283) + (((cbLight._m0[_2249].y * _2213) * _2258) * _2281);
    float _2292 = ((_2245 * cbLight._m0[_2239].z) * _2283) + (((cbLight._m0[_2249].z * _2215) * _2258) * _2281);
    uvec4 _2296 = floatBitsToUint(cbLight._m0[_2222 + 12u]);
    bool _2298 = _2296.x == 0u;
    float _2400;
    float _2402;
    float _2404;
    if (_2298)
    {
        _2400 = _2290;
        _2402 = _2291;
        _2404 = _2292;
    }
    else
    {
        uint _2408 = _2222 + 6u;
        float _2424 = (dot(vec3(cbLight._m0[_2222 + 2u].xyz), vec3(_708, _709, _710)) * 0.5) + 0.5;
        float _2425 = _2424 * _2424;
        float _4564 = isnan(0.0) ? _2425 : (isnan(_2425) ? 0.0 : max(_2425, 0.0));
        float _2426 = isnan(1.0) ? _4564 : (isnan(_4564) ? 1.0 : min(_4564, 1.0));
        float _2427 = isnan(1.0) ? _2237 : (isnan(_2237) ? 1.0 : min(_2237, 1.0));
        _2400 = (((cbLight._m0[_2408].x * 0.3183098733425140380859375) * _2426) * _2427) + _2290;
        _2402 = (((cbLight._m0[_2408].y * 0.3183098733425140380859375) * _2426) * _2427) + _2291;
        _2404 = (((cbLight._m0[_2408].z * 0.3183098733425140380859375) * _2426) * _2427) + _2292;
    }
    bool _2407 = _2296.y == 0u;
    float _2462;
    float _2464;
    float _2466;
    if (_2407)
    {
        _2462 = _2400;
        _2464 = _2402;
        _2466 = _2404;
    }
    else
    {
        uint _2635 = _2222 + 7u;
        float _2651 = (dot(vec3(cbLight._m0[_2222 + 3u].xyz), vec3(_708, _709, _710)) * 0.5) + 0.5;
        float _2652 = _2651 * _2651;
        float _4580 = isnan(0.0) ? _2652 : (isnan(_2652) ? 0.0 : max(_2652, 0.0));
        float _2653 = isnan(1.0) ? _4580 : (isnan(_4580) ? 1.0 : min(_4580, 1.0));
        float _2654 = isnan(1.0) ? _2238 : (isnan(_2238) ? 1.0 : min(_2238, 1.0));
        _2462 = (((cbLight._m0[_2635].x * 0.3183098733425140380859375) * _2653) * _2654) + _2400;
        _2464 = (((cbLight._m0[_2635].y * 0.3183098733425140380859375) * _2653) * _2654) + _2402;
        _2466 = (((cbLight._m0[_2635].z * 0.3183098733425140380859375) * _2653) * _2654) + _2404;
    }
    uint _2469 = _2222 + 8u;
    float _2482 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2222].w)) * _711) * 0.949999988079071044921875);
    float _2483 = _2482 * _2482;
    float _2484 = cbLight._m0[_2222].x + _788;
    float _2485 = cbLight._m0[_2222].y + _789;
    float _2486 = cbLight._m0[_2222].z + _790;
    float _2490 = inversesqrt(dot(vec3(_2484, _2485, _2486), vec3(_2484, _2485, _2486)));
    float _2491 = _2490 * _2484;
    float _2492 = _2490 * _2485;
    float _2493 = _2490 * _2486;
    float _2494 = dot(vec3(_708, _709, _710), vec3(cbLight._m0[_2222].xyz));
    float _4596 = isnan(0.0) ? _2494 : (isnan(_2494) ? 0.0 : max(_2494, 0.0));
    float _2497 = isnan(1.0) ? _4596 : (isnan(_4596) ? 1.0 : min(_4596, 1.0));
    float _4607 = isnan(0.0) ? _887 : (isnan(_887) ? 0.0 : max(_887, 0.0));
    float _2498 = isnan(1.0) ? _4607 : (isnan(_4607) ? 1.0 : min(_4607, 1.0));
    float _2499 = dot(vec3(_708, _709, _710), vec3(_2491, _2492, _2493));
    float _4618 = isnan(0.0) ? _2499 : (isnan(_2499) ? 0.0 : max(_2499, 0.0));
    float _2502 = isnan(1.0) ? _4618 : (isnan(_4618) ? 1.0 : min(_4618, 1.0));
    float _2503 = dot(vec3(cbLight._m0[_2222].xyz), vec3(_2491, _2492, _2493));
    float _4629 = isnan(0.0) ? _2503 : (isnan(_2503) ? 0.0 : max(_2503, 0.0));
    float _2507 = _2483 * _2483;
    float _2511 = ((_2502 * _2502) * (_2507 + (-1.0))) + 1.0;
    float _2519 = exp2(log2(1.0 - (isnan(1.0) ? _4629 : (isnan(_4629) ? 1.0 : min(_4629, 1.0)))) * 5.0);
    float _2520 = 0.959999978542327880859375 - _868;
    float _2522 = 0.959999978542327880859375 - _869;
    float _2523 = 0.959999978542327880859375 - _870;
    float _2530 = 1.0 - _2483;
    float _2541 = (0.5 / (((_2498 * ((_2497 * _2530) + _2483)) + 9.9999999392252902907785028219223e-09) + (((_2498 * _2530) + _2483) * _2497))) * _2497;
    float _4640 = isnan(0.0) ? _2541 : (isnan(_2541) ? 0.0 : max(_2541, 0.0));
    float _2543 = (isnan(1.0) ? _4640 : (isnan(_4640) ? 1.0 : min(_4640, 1.0))) * (_2507 / ((_2511 * _2511) * 3.141590118408203125));
    uint _2557 = _2222 + 9u;
    float _2568 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2262].w)) * _711) * 0.949999988079071044921875);
    float _2569 = _2568 * _2568;
    float _2570 = cbLight._m0[_2262].x + _788;
    float _2571 = cbLight._m0[_2262].y + _789;
    float _2572 = cbLight._m0[_2262].z + _790;
    float _2576 = inversesqrt(dot(vec3(_2570, _2571, _2572), vec3(_2570, _2571, _2572)));
    float _2577 = _2576 * _2570;
    float _2578 = _2576 * _2571;
    float _2579 = _2576 * _2572;
    float _2580 = dot(vec3(_708, _709, _710), vec3(cbLight._m0[_2262].xyz));
    float _4651 = isnan(0.0) ? _2580 : (isnan(_2580) ? 0.0 : max(_2580, 0.0));
    float _2583 = isnan(1.0) ? _4651 : (isnan(_4651) ? 1.0 : min(_4651, 1.0));
    float _2584 = dot(vec3(_708, _709, _710), vec3(_2577, _2578, _2579));
    float _4662 = isnan(0.0) ? _2584 : (isnan(_2584) ? 0.0 : max(_2584, 0.0));
    float _2587 = isnan(1.0) ? _4662 : (isnan(_4662) ? 1.0 : min(_4662, 1.0));
    float _2588 = dot(vec3(cbLight._m0[_2262].xyz), vec3(_2577, _2578, _2579));
    float _4673 = isnan(0.0) ? _2588 : (isnan(_2588) ? 0.0 : max(_2588, 0.0));
    float _2592 = _2569 * _2569;
    float _2596 = ((_2587 * _2587) * (_2592 + (-1.0))) + 1.0;
    float _2603 = exp2(log2(1.0 - (isnan(1.0) ? _4673 : (isnan(_4673) ? 1.0 : min(_4673, 1.0)))) * 5.0);
    float _2610 = 1.0 - _2569;
    float _2620 = (0.5 / (((_2498 * ((_2583 * _2610) + _2569)) + 9.9999999392252902907785028219223e-09) + (((_2498 * _2610) + _2569) * _2583))) * _2583;
    float _4684 = isnan(0.0) ? _2620 : (isnan(_2620) ? 0.0 : max(_2620, 0.0));
    float _2622 = (isnan(1.0) ? _4684 : (isnan(_4684) ? 1.0 : min(_4684, 1.0))) * (_2592 / ((_2596 * _2596) * 3.141590118408203125));
    float _2632 = (((((_2603 * _2520) + _871) * cbLight._m0[_2557].x) * _2622) * _2245) + ((((cbLight._m0[_2469].x * _2211) * ((_2519 * _2520) + _871)) * _2543) * _2258);
    float _2633 = (((((_2603 * _2522) + _873) * cbLight._m0[_2557].y) * _2622) * _2245) + ((((cbLight._m0[_2469].y * _2213) * ((_2519 * _2522) + _873)) * _2543) * _2258);
    float _2634 = (((((_2603 * _2523) + _874) * cbLight._m0[_2557].z) * _2622) * _2245) + ((((cbLight._m0[_2469].z * _2215) * ((_2519 * _2523) + _874)) * _2543) * _2258);
    float _2690;
    float _2692;
    float _2694;
    if (_2298)
    {
        _2690 = _2632;
        _2692 = _2633;
        _2694 = _2634;
    }
    else
    {
        uint _2696 = _2222 + 2u;
        uint _2700 = _2222 + 10u;
        float _2714 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2696].w)) * _711) * 0.949999988079071044921875);
        float _2715 = _2714 * _2714;
        float _2716 = cbLight._m0[_2696].x + _788;
        float _2717 = cbLight._m0[_2696].y + _789;
        float _2718 = cbLight._m0[_2696].z + _790;
        float _2722 = inversesqrt(dot(vec3(_2716, _2717, _2718), vec3(_2716, _2717, _2718)));
        float _2723 = _2722 * _2716;
        float _2724 = _2722 * _2717;
        float _2725 = _2722 * _2718;
        float _2726 = dot(vec3(_708, _709, _710), vec3(cbLight._m0[_2696].xyz));
        float _4695 = isnan(0.0) ? _2726 : (isnan(_2726) ? 0.0 : max(_2726, 0.0));
        float _2729 = isnan(1.0) ? _4695 : (isnan(_4695) ? 1.0 : min(_4695, 1.0));
        float _2730 = dot(vec3(_708, _709, _710), vec3(_2723, _2724, _2725));
        float _4706 = isnan(0.0) ? _2730 : (isnan(_2730) ? 0.0 : max(_2730, 0.0));
        float _2733 = isnan(1.0) ? _4706 : (isnan(_4706) ? 1.0 : min(_4706, 1.0));
        float _2734 = dot(vec3(cbLight._m0[_2696].xyz), vec3(_2723, _2724, _2725));
        float _4717 = isnan(0.0) ? _2734 : (isnan(_2734) ? 0.0 : max(_2734, 0.0));
        float _2738 = _2715 * _2715;
        float _2742 = ((_2733 * _2733) * (_2738 + (-1.0))) + 1.0;
        float _2749 = exp2(log2(1.0 - (isnan(1.0) ? _4717 : (isnan(_4717) ? 1.0 : min(_4717, 1.0)))) * 5.0);
        float _2756 = 1.0 - _2715;
        float _2766 = (0.5 / (((_2498 * ((_2729 * _2756) + _2715)) + 9.9999999392252902907785028219223e-09) + (((_2498 * _2756) + _2715) * _2729))) * _2729;
        float _4728 = isnan(0.0) ? _2766 : (isnan(_2766) ? 0.0 : max(_2766, 0.0));
        float _2768 = (isnan(1.0) ? _4728 : (isnan(_4728) ? 1.0 : min(_4728, 1.0))) * (_2738 / ((_2742 * _2742) * 3.141590118408203125));
        float _2769 = isnan(1.0) ? _2237 : (isnan(_2237) ? 1.0 : min(_2237, 1.0));
        _2690 = (((((_2749 * _2520) + _871) * cbLight._m0[_2700].x) * _2768) * _2769) + _2632;
        _2692 = (((((_2749 * _2522) + _873) * cbLight._m0[_2700].y) * _2768) * _2769) + _2633;
        _2694 = (((((_2749 * _2523) + _874) * cbLight._m0[_2700].z) * _2768) * _2769) + _2634;
    }
    float _2800;
    float _2802;
    float _2804;
    if (_2407)
    {
        _2800 = _2690;
        _2802 = _2692;
        _2804 = _2694;
    }
    else
    {
        uint _2811 = _2222 + 3u;
        uint _2815 = _2222 + 11u;
        float _2829 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2811].w)) * _711) * 0.949999988079071044921875);
        float _2830 = _2829 * _2829;
        float _2831 = cbLight._m0[_2811].x + _788;
        float _2832 = cbLight._m0[_2811].y + _789;
        float _2833 = cbLight._m0[_2811].z + _790;
        float _2837 = inversesqrt(dot(vec3(_2831, _2832, _2833), vec3(_2831, _2832, _2833)));
        float _2838 = _2837 * _2831;
        float _2839 = _2837 * _2832;
        float _2840 = _2837 * _2833;
        float _2841 = dot(vec3(_708, _709, _710), vec3(cbLight._m0[_2811].xyz));
        float _4744 = isnan(0.0) ? _2841 : (isnan(_2841) ? 0.0 : max(_2841, 0.0));
        float _2844 = isnan(1.0) ? _4744 : (isnan(_4744) ? 1.0 : min(_4744, 1.0));
        float _2845 = dot(vec3(_708, _709, _710), vec3(_2838, _2839, _2840));
        float _4755 = isnan(0.0) ? _2845 : (isnan(_2845) ? 0.0 : max(_2845, 0.0));
        float _2848 = isnan(1.0) ? _4755 : (isnan(_4755) ? 1.0 : min(_4755, 1.0));
        float _2849 = dot(vec3(cbLight._m0[_2811].xyz), vec3(_2838, _2839, _2840));
        float _4766 = isnan(0.0) ? _2849 : (isnan(_2849) ? 0.0 : max(_2849, 0.0));
        float _2853 = _2830 * _2830;
        float _2857 = ((_2848 * _2848) * (_2853 + (-1.0))) + 1.0;
        float _2864 = exp2(log2(1.0 - (isnan(1.0) ? _4766 : (isnan(_4766) ? 1.0 : min(_4766, 1.0)))) * 5.0);
        float _2871 = 1.0 - _2830;
        float _2881 = (0.5 / (((_2498 * ((_2844 * _2871) + _2830)) + 9.9999999392252902907785028219223e-09) + (((_2498 * _2871) + _2830) * _2844))) * _2844;
        float _4777 = isnan(0.0) ? _2881 : (isnan(_2881) ? 0.0 : max(_2881, 0.0));
        float _2883 = (isnan(1.0) ? _4777 : (isnan(_4777) ? 1.0 : min(_4777, 1.0))) * (_2853 / ((_2857 * _2857) * 3.141590118408203125));
        float _2884 = isnan(1.0) ? _2238 : (isnan(_2238) ? 1.0 : min(_2238, 1.0));
        _2800 = (((((_2864 * _2520) + _871) * cbLight._m0[_2815].x) * _2883) * _2884) + _2690;
        _2802 = (((((_2864 * _2522) + _873) * cbLight._m0[_2815].y) * _2883) * _2884) + _2692;
        _2804 = (((((_2864 * _2523) + _874) * cbLight._m0[_2815].z) * _2883) * _2884) + _2694;
    }
    float _2950;
    float _2952;
    float _2954;
    float _2956;
    float _2958;
    float _2960;
    if (_2220.y == 0u)
    {
        uvec4 _2905 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2906 = _2905.x;
        uint _2917 = uint((float(_2905.y) * floor(float(uint(cbSceneParam._m0[85u].y * _809) / _2906))) + floor(float(uint(cbSceneParam._m0[85u].x * _808) / _2906)));
        float _2927 = (log2(_1998 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2928 = isnan(0.0) ? _2927 : (isnan(_2927) ? 0.0 : max(_2927, 0.0));
        uint _2931 = uint(isnan(14.0) ? _2928 : (isnan(_2928) ? 14.0 : min(_2928, 14.0)));
        uvec4 _2936 = texelFetch(g_lightClusterGridBuffer, int(((_2931 << 2u) + (_2917 << 6u)) >> 2u));
        uint _2937 = _2936.x;
        uint _2938 = _2905.z;
        float _3017;
        float _3019;
        float _3021;
        float _3023;
        float _3025;
        float _3027;
        if (((((1u << ((_2938 >> 4u) & 15u)) + 4294967295u) & _2937) == 0u) || ((_2938 & 240u) == 0u))
        {
            _3017 = 0.0;
            _3019 = 0.0;
            _3021 = 0.0;
            _3023 = 0.0;
            _3025 = 0.0;
            _3027 = 0.0;
        }
        else
        {
            float _3018;
            float _3020;
            float _3022;
            float _3024;
            float _3026;
            float _3028;
            float _3169 = 0.0;
            float _3170 = 0.0;
            float _3171 = 0.0;
            float _3172 = 0.0;
            float _3173 = 0.0;
            float _3174 = 0.0;
            uint _3175 = 0u;
            uint _3184;
            bool _3185;
            for (;;)
            {
                _3184 = texelFetch(g_lightClassification, int((((_2931 << 5u) + (_2917 << 9u)) + (_3175 << 2u)) >> 2u)).x;
                _3185 = _3184 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3185)
                {
                    frontier_phi_71_pred = _3174;
                    frontier_phi_71_pred_1 = _3173;
                    frontier_phi_71_pred_2 = _3172;
                    frontier_phi_71_pred_3 = _3171;
                    frontier_phi_71_pred_4 = _3170;
                    frontier_phi_71_pred_5 = _3169;
                }
                else
                {
                    float _3314;
                    float _3315;
                    float _3316;
                    float _3317;
                    float _3318;
                    float _3319;
                    uint _3320;
                    _3314 = _3169;
                    _3315 = _3170;
                    _3316 = _3171;
                    _3317 = _3172;
                    _3318 = _3173;
                    _3319 = _3174;
                    _3320 = _3184;
                    float _3241;
                    float _3242;
                    float _3243;
                    float _3244;
                    float _3245;
                    float _3246;
                    for (;;)
                    {
                        uint _3324 = uint(findLSB(_3320)) + (_3175 << 5u);
                        uint _3321 = (_3320 + 4294967295u) & _3320;
                        uint _3326 = _3324 * 48u;
                        vec4 _3340 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3326)).x, texelFetch(g_PointLightRenderingBuffer, int(_3326 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3326 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3326 + 3u)).x));
                        uint _3346 = (_3324 * 48u) + 4u;
                        vec4 _3359 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3346)).x, texelFetch(g_PointLightRenderingBuffer, int(_3346 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3346 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3346 + 3u)).x));
                        uint _3365 = (_3324 * 48u) + 8u;
                        vec3 _3376 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3365)).x, texelFetch(g_PointLightRenderingBuffer, int(_3365 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3365 + 2u)).x));
                        float _3380 = _3340.x - _1996;
                        float _3381 = _3340.y - _1997;
                        float _3382 = _3340.z - _1998;
                        float _3383 = dot(vec3(_3380, _3381, _3382), vec3(_3380, _3381, _3382));
                        float _3386 = inversesqrt(_3383);
                        float _3387 = _3386 * _3380;
                        float _3388 = _3386 * _3381;
                        float _3389 = _3386 * _3382;
                        float _3390 = dot(vec3(_827, _830, _833), vec3(_3387, _3388, _3389));
                        float _3395 = 1.0 - (_3383 * _3340.w);
                        float _4803 = isnan(0.0) ? _3395 : (isnan(_3395) ? 0.0 : max(_3395, 0.0));
                        float _3396 = isnan(1.0) ? _4803 : (isnan(_4803) ? 1.0 : min(_4803, 1.0));
                        float _3397 = sqrt(_3383) * _3359.w;
                        float _3400 = 1.39999997615814208984375 / (_3397 + 1.39999997615814208984375);
                        float _3401 = _3400 * _3400;
                        float _3404 = ((1.0 - _3401) * _3390) + _3401;
                        float _3407 = _3397 * _3397;
                        float _3411 = ((isnan(0.0) ? _3404 : (isnan(_3404) ? 0.0 : max(_3404, 0.0))) * _3396) / ((_3407 * 0.699999988079071044921875) + 1.0);
                        float _3415 = (-0.0) - _1996;
                        float _3416 = (-0.0) - _1997;
                        float _3417 = (-0.0) - _1998;
                        float _3421 = inversesqrt(dot(vec3(_3415, _3416, _3417), vec3(_3415, _3416, _3417)));
                        float _3422 = _3421 * _3415;
                        float _3423 = _3421 * _3416;
                        float _3424 = _3421 * _3417;
                        float _3431 = exp2(log2(1.0 / ((_3407 * 3.5) + 5.0)) * 0.25);
                        float _3432 = 1.0 - _902;
                        float _3439 = sqrt(1.0 - ((1.0 - (_3432 * _3432)) * (1.0 - (_3431 * _3431))));
                        float _3440 = _3439 * _3439;
                        float _3441 = _3440 * _3440;
                        float _3442 = _3422 + _3387;
                        float _3443 = _3423 + _3388;
                        float _3444 = _3424 + _3389;
                        float _3448 = inversesqrt(dot(vec3(_3442, _3443, _3444), vec3(_3442, _3443, _3444)));
                        float _3452 = dot(vec3(_827, _830, _833), vec3(_3422, _3423, _3424));
                        float _4819 = isnan(0.0) ? _3452 : (isnan(_3452) ? 0.0 : max(_3452, 0.0));
                        float _3455 = isnan(1.0) ? _4819 : (isnan(_4819) ? 1.0 : min(_4819, 1.0));
                        float _3456 = dot(vec3(_827, _830, _833), vec3(_3448 * _3442, _3448 * _3443, _3448 * _3444));
                        float _4830 = isnan(0.0) ? _3456 : (isnan(_3456) ? 0.0 : max(_3456, 0.0));
                        float _3459 = isnan(1.0) ? _4830 : (isnan(_4830) ? 1.0 : min(_4830, 1.0));
                        float _3463 = ((_3459 * _3459) * (_3441 + (-1.0))) + 1.0;
                        float _3464 = _3400 * _3440;
                        float _3465 = _3464 * _3464;
                        float _3468 = ((1.0 - _3465) * _3390) + _3465;
                        float _4841 = isnan(0.0) ? _3468 : (isnan(_3468) ? 0.0 : max(_3468, 0.0));
                        float _3469 = isnan(1.0) ? _4841 : (isnan(_4841) ? 1.0 : min(_4841, 1.0));
                        float _3470 = 1.0 - _3440;
                        float _3480 = (0.5 / (((_3469 * ((_3455 * _3470) + _3440)) + 9.9999999392252902907785028219223e-09) + (((_3469 * _3470) + _3440) * _3455))) * _3469;
                        float _4852 = isnan(0.0) ? _3480 : (isnan(_3480) ? 0.0 : max(_3480, 0.0));
                        float _3491 = (((_3441 * 3.1415927410125732421875) * (isnan(1.0) ? _4852 : (isnan(_4852) ? 1.0 : min(_4852, 1.0)))) / ((_3463 * _3463) * ((_3407 * 2.1991131305694580078125) + 3.141590118408203125))) * _3396;
                        _3244 = (_3411 * _3359.x) + _3317;
                        _3245 = (_3411 * _3359.y) + _3318;
                        _3246 = (_3411 * _3359.z) + _3319;
                        _3241 = (_3491 * _3376.x) + _3314;
                        _3242 = (_3491 * _3376.y) + _3315;
                        _3243 = (_3491 * _3376.z) + _3316;
                        if (_3321 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3314 = _3241;
                            _3315 = _3242;
                            _3316 = _3243;
                            _3317 = _3244;
                            _3318 = _3245;
                            _3319 = _3246;
                            _3320 = _3321;
                        }
                    }
                    frontier_phi_71_pred = _3246;
                    frontier_phi_71_pred_1 = _3245;
                    frontier_phi_71_pred_2 = _3244;
                    frontier_phi_71_pred_3 = _3243;
                    frontier_phi_71_pred_4 = _3242;
                    frontier_phi_71_pred_5 = _3241;
                }
                _3028 = frontier_phi_71_pred;
                _3026 = frontier_phi_71_pred_1;
                _3024 = frontier_phi_71_pred_2;
                _3022 = frontier_phi_71_pred_3;
                _3020 = frontier_phi_71_pred_4;
                _3018 = frontier_phi_71_pred_5;
                uint _3176 = _3175 + 1u;
                if (_3176 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3169 = _3018;
                    _3170 = _3020;
                    _3171 = _3022;
                    _3172 = _3024;
                    _3173 = _3026;
                    _3174 = _3028;
                    _3175 = _3176;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3017 = _3018;
            _3019 = _3020;
            _3021 = _3022;
            _3023 = _3024;
            _3025 = _3026;
            _3027 = _3028;
        }
        uvec4 _3031 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3032 = _3031.z;
        uint _3034 = (_3032 >> 8u) & 15u;
        float _3137;
        float _3139;
        float _3141;
        float _3143;
        float _3145;
        float _3147;
        if (((4294967295u << _3034) & _2937) == 0u)
        {
            _3137 = _3017;
            _3139 = _3019;
            _3141 = _3021;
            _3143 = _3023;
            _3145 = _3025;
            _3147 = _3027;
        }
        else
        {
            float _3162 = inversesqrt(dot(vec3(_1996, _1997, _1998), vec3(_1996, _1997, _1998)));
            float _3163 = _3162 * _1996;
            float _3164 = _3162 * _1997;
            float _3165 = _3162 * _1998;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3034 < ((_3032 >> 12u) & 15u))
            {
                float _3138;
                float _3140;
                float _3142;
                float _3144;
                float _3146;
                float _3148;
                float _3297 = _3017;
                float _3298 = _3019;
                float _3299 = _3021;
                float _3300 = _3023;
                float _3301 = _3025;
                float _3302 = _3027;
                uint _3303 = _3034;
                uint _3312;
                bool _3313;
                for (;;)
                {
                    _3312 = texelFetch(g_lightClassification, int((((_2931 << 5u) + (_2917 << 9u)) + (_3303 << 2u)) >> 2u)).x;
                    _3313 = _3312 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3313)
                    {
                        frontier_phi_82_pred = _3302;
                        frontier_phi_82_pred_1 = _3301;
                        frontier_phi_82_pred_2 = _3300;
                        frontier_phi_82_pred_3 = _3299;
                        frontier_phi_82_pred_4 = _3298;
                        frontier_phi_82_pred_5 = _3297;
                    }
                    else
                    {
                        float _3505;
                        float _3506;
                        float _3507;
                        float _3508;
                        float _3509;
                        float _3510;
                        float _3799;
                        float _3800;
                        float _3801;
                        float _3802;
                        float _3803;
                        float _3804;
                        float _3518 = _3297;
                        float _3519 = _3298;
                        float _3520 = _3299;
                        float _3521 = _3300;
                        float _3522 = _3301;
                        float _3523 = _3302;
                        uint _3524 = _3312;
                        uint _3525;
                        vec4 _3550;
                        float _3551;
                        vec4 _3566;
                        vec3 _3578;
                        vec4 _3593;
                        vec4 _3608;
                        float _3655;
                        bool _3656;
                        for (;;)
                        {
                            uint _3535 = ((_3303 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3524));
                            _3525 = (_3524 + 4294967295u) & _3524;
                            uint _3537 = _3535 * 40u;
                            _3550 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3537)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3537 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3537 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3537 + 3u)).x));
                            _3551 = _3550.w;
                            uint _3553 = (_3535 * 40u) + 4u;
                            _3566 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3553)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3553 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3553 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3553 + 3u)).x));
                            uint _3568 = (_3535 * 40u) + 8u;
                            _3578 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3568)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3568 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3568 + 2u)).x));
                            uint _3580 = (_3535 * 40u) + 16u;
                            _3593 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3580)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3580 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3580 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3580 + 3u)).x));
                            uint _3595 = (_3535 * 40u) + 20u;
                            _3608 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3595)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3595 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3595 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3595 + 3u)).x));
                            uint _3611 = (_3535 * 40u) + 24u;
                            vec4 _3624 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3611)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3611 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3611 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3611 + 3u)).x));
                            uint _3630 = (_3535 * 40u) + 28u;
                            vec4 _3643 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3630)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3630 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3630 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3630 + 3u)).x));
                            _3655 = fma(_1998, _3643.z, fma(_1997, _3643.y, _3643.x * _1996)) + _3643.w;
                            _3656 = !((fma(_1998, _3624.z, fma(_1997, _3624.y, _3624.x * _1996)) + _3624.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3656)
                            {
                                float _3683 = _3550.x - _1996;
                                float _3684 = _3550.y - _1997;
                                float _3685 = _3550.z - _1998;
                                float _3686 = dot(vec3(_3683, _3684, _3685), vec3(_3683, _3684, _3685));
                                float _3689 = inversesqrt(_3686);
                                float _3690 = _3689 * _3683;
                                float _3691 = _3689 * _3684;
                                float _3692 = _3689 * _3685;
                                float _3696 = 1.0 - (_3686 / (_3551 * _3551));
                                float _4863 = isnan(0.0) ? _3696 : (isnan(_3696) ? 0.0 : max(_3696, 0.0));
                                float _3697 = isnan(1.0) ? _4863 : (isnan(_4863) ? 1.0 : min(_4863, 1.0));
                                float _3701 = sqrt(_3686) * _3566.w;
                                float _3703 = 1.39999997615814208984375 / (_3701 + 1.39999997615814208984375);
                                float _3704 = _3703 * _3703;
                                float _3707 = ((1.0 - _3704) * dot(vec3(_3690, _3691, _3692), vec3(_827, _830, _833))) + _3704;
                                float _3710 = _3701 * _3701;
                                float _3714 = (fma(_1998, _3593.z, fma(_1997, _3593.y, _3593.x * _1996)) + _3593.w) / _3655;
                                float _3715 = (fma(_1998, _3608.z, fma(_1997, _3608.y, _3608.x * _1996)) + _3608.w) / _3655;
                                float _3719 = 1.0 - dot(vec2(_3714, _3715), vec2(_3714, _3715));
                                float _4879 = isnan(0.0) ? _3719 : (isnan(_3719) ? 0.0 : max(_3719, 0.0));
                                float _3720 = isnan(1.0) ? _4879 : (isnan(_4879) ? 1.0 : min(_4879, 1.0));
                                float _3721 = _3720 * (((isnan(0.0) ? _3707 : (isnan(_3707) ? 0.0 : max(_3707, 0.0))) * _3697) / ((_3710 * 0.699999988079071044921875) + 1.0));
                                float _3733 = exp2(log2(1.0 / ((_3710 * 3.5) + 5.0)) * 0.25);
                                float _3734 = 1.0 - _902;
                                float _3741 = sqrt(1.0 - ((1.0 - (_3734 * _3734)) * (1.0 - (_3733 * _3733))));
                                float _3742 = _3741 * _3741;
                                float _3743 = _3742 * _3742;
                                float _3744 = _3690 - _3163;
                                float _3745 = _3691 - _3164;
                                float _3746 = _3692 - _3165;
                                float _3750 = inversesqrt(dot(vec3(_3744, _3745, _3746), vec3(_3744, _3745, _3746)));
                                float _3754 = dot(vec3(_827, _830, _833), vec3((-0.0) - _3163, (-0.0) - _3164, (-0.0) - _3165));
                                float _4890 = isnan(0.0) ? _3754 : (isnan(_3754) ? 0.0 : max(_3754, 0.0));
                                float _3757 = isnan(1.0) ? _4890 : (isnan(_4890) ? 1.0 : min(_4890, 1.0));
                                float _3758 = dot(vec3(_827, _830, _833), vec3(_3750 * _3744, _3750 * _3745, _3750 * _3746));
                                float _4901 = isnan(0.0) ? _3758 : (isnan(_3758) ? 0.0 : max(_3758, 0.0));
                                float _3761 = isnan(1.0) ? _4901 : (isnan(_4901) ? 1.0 : min(_4901, 1.0));
                                float _3765 = ((_3761 * _3761) * (_3743 + (-1.0))) + 1.0;
                                float _3766 = _3703 * _3742;
                                float _3767 = _3766 * _3766;
                                float _3773 = ((1.0 - _3767) * dot(vec3(_827, _830, _833), vec3(_3690, _3691, _3692))) + _3767;
                                float _4912 = isnan(0.0) ? _3773 : (isnan(_3773) ? 0.0 : max(_3773, 0.0));
                                float _3774 = isnan(1.0) ? _4912 : (isnan(_4912) ? 1.0 : min(_4912, 1.0));
                                float _3775 = 1.0 - _3742;
                                float _3785 = (0.5 / (((_3774 * ((_3757 * _3775) + _3742)) + 9.9999999392252902907785028219223e-09) + (((_3774 * _3775) + _3742) * _3757))) * _3774;
                                float _4923 = isnan(0.0) ? _3785 : (isnan(_3785) ? 0.0 : max(_3785, 0.0));
                                float _3795 = (_3720 * _3697) * (((_3743 * 3.1415927410125732421875) * (isnan(1.0) ? _4923 : (isnan(_4923) ? 1.0 : min(_4923, 1.0)))) / ((_3765 * _3765) * ((_3710 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3721 * _3566.z;
                                frontier_phi_88_pred_1 = _3721 * _3566.y;
                                frontier_phi_88_pred_2 = _3721 * _3566.x;
                                frontier_phi_88_pred_3 = _3795 * _3578.z;
                                frontier_phi_88_pred_4 = _3795 * _3578.y;
                                frontier_phi_88_pred_5 = _3795 * _3578.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3804 = frontier_phi_88_pred;
                            _3803 = frontier_phi_88_pred_1;
                            _3802 = frontier_phi_88_pred_2;
                            _3801 = frontier_phi_88_pred_3;
                            _3800 = frontier_phi_88_pred_4;
                            _3799 = frontier_phi_88_pred_5;
                            _3508 = _3802 + _3521;
                            _3509 = _3803 + _3522;
                            _3510 = _3804 + _3523;
                            _3505 = _3799 + _3518;
                            _3506 = _3800 + _3519;
                            _3507 = _3801 + _3520;
                            if (_3525 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3518 = _3505;
                                _3519 = _3506;
                                _3520 = _3507;
                                _3521 = _3508;
                                _3522 = _3509;
                                _3523 = _3510;
                                _3524 = _3525;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3510;
                        frontier_phi_82_pred_1 = _3509;
                        frontier_phi_82_pred_2 = _3508;
                        frontier_phi_82_pred_3 = _3507;
                        frontier_phi_82_pred_4 = _3506;
                        frontier_phi_82_pred_5 = _3505;
                    }
                    _3148 = frontier_phi_82_pred;
                    _3146 = frontier_phi_82_pred_1;
                    _3144 = frontier_phi_82_pred_2;
                    _3142 = frontier_phi_82_pred_3;
                    _3140 = frontier_phi_82_pred_4;
                    _3138 = frontier_phi_82_pred_5;
                    uint _3304 = _3303 + 1u;
                    if (_3304 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3297 = _3138;
                        _3298 = _3140;
                        _3299 = _3142;
                        _3300 = _3144;
                        _3301 = _3146;
                        _3302 = _3148;
                        _3303 = _3304;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3144;
                frontier_phi_63_64_ladder_1 = _3148;
                frontier_phi_63_64_ladder_2 = _3146;
                frontier_phi_63_64_ladder_3 = _3142;
                frontier_phi_63_64_ladder_4 = _3140;
                frontier_phi_63_64_ladder_5 = _3138;
            }
            else
            {
                frontier_phi_63_64_ladder = _3023;
                frontier_phi_63_64_ladder_1 = _3027;
                frontier_phi_63_64_ladder_2 = _3025;
                frontier_phi_63_64_ladder_3 = _3021;
                frontier_phi_63_64_ladder_4 = _3019;
                frontier_phi_63_64_ladder_5 = _3017;
            }
            _3137 = frontier_phi_63_64_ladder_5;
            _3139 = frontier_phi_63_64_ladder_4;
            _3141 = frontier_phi_63_64_ladder_3;
            _3143 = frontier_phi_63_64_ladder;
            _3145 = frontier_phi_63_64_ladder_2;
            _3147 = frontier_phi_63_64_ladder_1;
        }
        float _3152 = isnan(1.0) ? _886 : (isnan(_886) ? 1.0 : min(_886, 1.0));
        _2950 = (_3152 * _3143) + _2462;
        _2952 = (_3152 * _3145) + _2464;
        _2954 = (_3152 * _3147) + _2466;
        _2956 = ((_3137 * _871) * _3152) + _2800;
        _2958 = ((_3139 * _873) * _3152) + _2802;
        _2960 = ((_3141 * _874) * _3152) + _2804;
    }
    else
    {
        _2950 = _2462;
        _2952 = _2464;
        _2954 = _2466;
        _2956 = _2800;
        _2958 = _2802;
        _2960 = _2804;
    }
    float _4939 = isnan(0.0) ? _861 : (isnan(_861) ? 0.0 : max(_861, 0.0));
    float _4950 = isnan(0.0) ? _862 : (isnan(_862) ? 0.0 : max(_862, 0.0));
    float _4961 = isnan(0.0) ? _863 : (isnan(_863) ? 0.0 : max(_863, 0.0));
    float _2977 = ((isnan(1.0) ? _4939 : (isnan(_4939) ? 1.0 : min(_4939, 1.0))) * (_2950 + ((isnan(0.0) ? _1649 : (isnan(_1649) ? 0.0 : max(_1649, 0.0))) * _886))) + ((_2956 + ((isnan(0.0) ? _1943 : (isnan(_1943) ? 0.0 : max(_1943, 0.0))) * _1728)) * cbPerFrame._m0[3u].x);
    float _2978 = ((isnan(1.0) ? _4950 : (isnan(_4950) ? 1.0 : min(_4950, 1.0))) * (_2952 + ((isnan(0.0) ? _1652 : (isnan(_1652) ? 0.0 : max(_1652, 0.0))) * _886))) + ((_2958 + ((isnan(0.0) ? _1946 : (isnan(_1946) ? 0.0 : max(_1946, 0.0))) * _1728)) * cbPerFrame._m0[3u].x);
    float _2979 = ((isnan(1.0) ? _4961 : (isnan(_4961) ? 1.0 : min(_4961, 1.0))) * (_2954 + ((isnan(0.0) ? _1655 : (isnan(_1655) ? 0.0 : max(_1655, 0.0))) * _886))) + ((_2960 + ((isnan(0.0) ? _1949 : (isnan(_1949) ? 0.0 : max(_1949, 0.0))) * _1728)) * cbPerFrame._m0[3u].x);
    uint _2980 = _846 + 6u;
    float _2988 = _808 / cbSceneParam._m0[86u].x;
    float _2989 = _809 / cbSceneParam._m0[86u].y;
    vec4 _3003 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2988, _2989, (log2((isnan(cbSceneParam._m0[77u].w) ? _731 : (isnan(_731) ? cbSceneParam._m0[77u].w : min(_731, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3005 = _3003.x;
    float _3006 = _3003.y;
    float _3007 = _3003.z;
    float _3008 = _3003.w;
    float _3079;
    float _3081;
    float _3083;
    float _3085;
    if (_731 > cbSceneParam._m0[78u].w)
    {
        float _3042 = isnan(_731) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _731 : min(cbSceneParam._m0[80u].w, _731));
        float _3043 = _3042 / _731;
        float _3054 = _3043 * _781;
        float _3055 = _782 * _3043;
        float _3056 = (-0.0) - _3055;
        float _3057 = _3043 * _783;
        float _3059 = (cbSceneParam._m0[77u].w * _3056) / _3042;
        float _3060 = _3059 + cbSceneParam._m0[79u].w;
        float _3061 = cbSceneParam._m0[79u].w - _3055;
        float _3067 = sqrt(((_3054 * _3054) + (_3055 * _3055)) + (_3057 * _3057));
        float _3070 = (1.0 - (cbSceneParam._m0[77u].w / _3042)) * _3067;
        float _3075 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3077 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3254;
        if (abs((_3056 - _3059) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3254 = ((((_3060 > 0.0) ? exp2(_3075 * _3060) : (2.0 - exp2(_3077 * _3060))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3070;
        }
        else
        {
            float _3198 = 1.0 / cbSceneParam._m0[80u].x;
            float _3199 = isnan(_3061) ? _3060 : (isnan(_3060) ? _3061 : max(_3060, _3061));
            float _3200 = isnan(_3061) ? _3060 : (isnan(_3060) ? _3061 : min(_3060, _3061));
            float _3209 = isnan(0.0) ? _3199 : (isnan(_3199) ? 0.0 : min(_3199, 0.0));
            float _3210 = isnan(0.0) ? _3200 : (isnan(_3200) ? 0.0 : min(_3200, 0.0));
            _3254 = ((abs(_3067 / _3056) * cbSceneParam._m0[80u].y) * ((((_3209 - _3210) * 2.0) - ((exp2(_3075 * (isnan(0.0) ? _3199 : (isnan(_3199) ? 0.0 : max(_3199, 0.0)))) - exp2(_3075 * (isnan(0.0) ? _3200 : (isnan(_3200) ? 0.0 : max(_3200, 0.0))))) * _3198)) - ((exp2(_3077 * _3209) - exp2(_3077 * _3210)) * _3198))) + (_3070 * cbSceneParam._m0[80u].z);
        }
        vec4 _3256 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2988, _2989, 1.0), 0.0);
        float _3265 = exp2((_3254 * (-1.44269502162933349609375)) * (1.0 - _3256.w));
        float _3266 = log2(_3265);
        float _3282 = log2(_3008);
        _3079 = (exp2(_3282 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3266 * cbSceneParam._m0[78u].x)) * _3256.x) / cbSceneParam._m0[78u].x)) + _3005;
        _3081 = (exp2(_3282 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3266 * cbSceneParam._m0[78u].y)) * _3256.y) / cbSceneParam._m0[78u].y)) + _3006;
        _3083 = (exp2(_3282 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3266 * cbSceneParam._m0[78u].z)) * _3256.z) / cbSceneParam._m0[78u].z)) + _3007;
        _3085 = _3265 * _3008;
    }
    else
    {
        _3079 = _3005;
        _3081 = _3006;
        _3083 = _3007;
        _3085 = _3008;
    }
    bool _3292;
    vec4 _3095;
    vec4 _3117;
    float _3119;
    float _3123;
    float _3124;
    float _3125;
    float _3126;
    bool _3136;
    for (;;)
    {
        _3095 = cbMatDynParam._m0[0u];
        float _3097 = roundEven(_3095.y);
        bool _3098 = _3097 == 3.0;
        float _3099 = log2(_3085);
        float _3106 = exp2(_3099 * cbSceneParam._m0[78u].x) * _2977;
        float _3107 = exp2(_3099 * cbSceneParam._m0[78u].y) * _2978;
        float _3108 = exp2(_3099 * cbSceneParam._m0[78u].z) * _2979;
        float _3115 = _797 + (-0.5);
        _3117 = cbMtdParam._m0[1u];
        _3119 = _3117.y * _3115;
        float _3122 = (_3097 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3123 = _3122 * (_3098 ? _3106 : (_3106 + (cbSceneParam._m0[72u].w * _3079)));
        _3124 = _3122 * (_3098 ? _3107 : (_3107 + (cbSceneParam._m0[72u].w * _3081)));
        _3125 = _3122 * (_3098 ? _3108 : (_3108 + (cbSceneParam._m0[72u].w * _3083)));
        _3126 = _3115 * 0.999000012874603271484375;
        _3136 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3136)
        {
            if ((cbInstanceData._m0[_846 + 7u].x + _3126) < 0.5)
            {
                _3292 = true;
                break;
            }
        }
        uint _3233 = _847 + uint(_3095.w);
        if ((cbInstanceData._m0[_3233].w < 1.0) && ((cbInstanceData._m0[_3233].w + _3126) < 0.5))
        {
            _3292 = true;
            break;
        }
        if ((_3119 + 1.0) < _3117.x)
        {
            _3292 = true;
            break;
        }
        _3292 = false;
        break;
    }
    float _3496;
    if (_3292)
    {
        discard_state = true;
        _3496 = 0.0;
    }
    else
    {
        _3496 = cbInstanceData._m0[_2980].w;
    }
    SV_Target.x = _3123;
    SV_Target.y = _3124;
    SV_Target.z = _3125;
    SV_Target.w = _3496;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2980].w;
    discard_exit();
}


