#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[20];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_19;
layout(set = 0, binding = 11) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_2;
layout(set = 0, binding = 12) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_20;
layout(set = 0, binding = 13) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_3;
layout(set = 0, binding = 14) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_5;
layout(set = 0, binding = 15) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_6;
layout(set = 0, binding = 16) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_7;
layout(set = 0, binding = 17) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_8;
layout(set = 0, binding = 18) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_11;
layout(set = 0, binding = 3) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_14;
layout(set = 0, binding = 6) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_15;
layout(set = 0, binding = 7) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_16;
layout(set = 0, binding = 8) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_17;
layout(set = 0, binding = 9) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_18;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1363;
float _4029;
float _4030;
float _4031;
float _4032;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _221 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _222 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _223 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _229 = inversesqrt(dot(vec3(_221, _222, _223), vec3(_221, _222, _223)));
    float _236 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _243 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _266 = sin(cbMtdParam._m0[18u].x);
    float _267 = cos(cbMtdParam._m0[18u].x);
    float _268 = TEXCOORD.x - cbMtdParam._m0[17u].w;
    float _269 = TEXCOORD.y - cbMtdParam._m0[17u].w;
    float _277 = (cbMtdParam._m0[17u].w + cbMtdParam._m0[19u].y) + fma(_269, (-0.0) - _266, _267 * _268);
    float _279 = (cbMtdParam._m0[17u].w + cbMtdParam._m0[19u].z) + fma(_269, _267, _268 * _266);
    vec4 _292 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * _277) + cbTextureTilingScale._m0[1u].z, (_279 * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w));
    float _298 = _292.x * cbMtdParam._m0[10u].x;
    float _299 = _292.y * cbMtdParam._m0[10u].y;
    float _300 = _292.z * cbMtdParam._m0[10u].z;
    vec4 _318 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w));
    vec4 _337 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_0, SS_WrapLinear), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _362 = cbMtdParam._m0[19u].x * texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.x) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD.y) + cbTextureTilingScale._m0[13u].w)).x;
    float _373 = ((cbMtdParam._m0[15u].x * (-1.39999997615814208984375)) * (((1.0 - _337.x) * 2.0) - _362)) + 1.0;
    float _4041 = isnan(0.0) ? _373 : (isnan(_373) ? 0.0 : max(_373, 0.0));
    float _374 = isnan(1.0) ? _4041 : (isnan(_4041) ? 1.0 : min(_4041, 1.0));
    float _381 = (_374 * ((_318.x * cbMtdParam._m0[11u].x) - _298)) + _298;
    float _382 = (_374 * ((_318.y * cbMtdParam._m0[11u].y) - _299)) + _299;
    float _383 = (_374 * ((_318.z * cbMtdParam._m0[11u].z) - _300)) + _300;
    vec4 _401 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_8, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[17u].x * TEXCOORD.x) + cbTextureTilingScale._m0[17u].z, (cbTextureTilingScale._m0[17u].y * TEXCOORD.y) + cbTextureTilingScale._m0[17u].w));
    float _414 = (((((1.0 - _337.y) * 2.0) - _362) * (-1.39999997615814208984375)) * cbMtdParam._m0[18u].z) + 1.0;
    float _4052 = isnan(0.0) ? _414 : (isnan(_414) ? 0.0 : max(_414, 0.0));
    float _415 = isnan(1.0) ? _4052 : (isnan(_4052) ? 1.0 : min(_4052, 1.0));
    float _422 = (((_401.x * cbMtdParam._m0[12u].x) - _381) * _415) + _381;
    float _423 = (_415 * ((_401.y * cbMtdParam._m0[12u].y) - _382)) + _382;
    float _424 = (_415 * ((_401.z * cbMtdParam._m0[12u].z) - _383)) + _383;
    vec4 _441 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _454 = (((((1.0 - _337.z) * 2.0) - _362) * (-1.39999997615814208984375)) * cbMtdParam._m0[18u].w) + 1.0;
    float _4063 = isnan(0.0) ? _454 : (isnan(_454) ? 0.0 : max(_454, 0.0));
    float _455 = isnan(1.0) ? _4063 : (isnan(_4063) ? 1.0 : min(_4063, 1.0));
    float _462 = (((_441.x * cbMtdParam._m0[13u].x) - _422) * _455) + _422;
    float _463 = (_455 * ((_441.y * cbMtdParam._m0[13u].y) - _423)) + _423;
    float _464 = (_455 * ((_441.z * cbMtdParam._m0[13u].z) - _424)) + _424;
    vec4 _484 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_20, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.z) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.w) + cbTextureTilingScale._m0[12u].w));
    float _513 = (TEXCOORD_5.x - ((cbMtdParam._m0[15u].w * (1.0 - TEXCOORD_5.x)) * (texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[18u].x * TEXCOORD.z) + cbTextureTilingScale._m0[18u].z, (cbTextureTilingScale._m0[18u].y * TEXCOORD.w) + cbTextureTilingScale._m0[18u].w)).x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[15u].z + 1.0);
    float _4074 = isnan(0.0) ? _513 : (isnan(_513) ? 0.0 : max(_513, 0.0));
    float _514 = isnan(1.0) ? _4074 : (isnan(_4074) ? 1.0 : min(_4074, 1.0));
    float _521 = (_514 * ((_484.x * cbMtdParam._m0[14u].x) - _462)) + _462;
    float _522 = (_514 * ((_484.y * cbMtdParam._m0[14u].y) - _463)) + _463;
    float _523 = (_514 * ((_484.z * cbMtdParam._m0[14u].z) - _464)) + _464;
    vec4 _536 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * _277) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _279) + cbTextureTilingScale._m0[5u].w));
    float _538 = _536.x;
    float _556 = ((texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w)).x - _538) * _374) + _538;
    float _574 = ((texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w)).x - _556) * _415) + _556;
    float _591 = ((texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w)).x - _574) * _455) + _574;
    float _595 = (_591 - (_591 * TEXCOORD_5.x)) * cbMtdParam._m0[18u].y;
    vec4 _608 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.z) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.w) + cbTextureTilingScale._m0[3u].w));
    vec4 _630 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[14u].x * _277) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _279) + cbTextureTilingScale._m0[14u].w));
    float _632 = _630.x;
    float _633 = _630.y;
    float _636 = cbMtdParam._m0[17u].y * _630.z;
    vec4 _648 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * TEXCOORD.x) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * TEXCOORD.y) + cbTextureTilingScale._m0[15u].w));
    float _657 = (((cbMtdParam._m0[17u].x * _648.z) - _636) * _374) + _636;
    vec4 _670 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_15, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _682 = (((cbMtdParam._m0[16u].w * _670.z) - _657) * _415) + _657;
    vec4 _695 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _704 = (((cbMtdParam._m0[16u].z * _695.z) - _682) * _455) + _682;
    float _709 = ((cbMtdParam._m0[16u].x * TEXCOORD_5.x) * ((_608.z * cbMtdParam._m0[17u].z) - _704)) + _704;
    vec4 _722 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[16u].x * TEXCOORD.x) + cbTextureTilingScale._m0[16u].z, (cbTextureTilingScale._m0[16u].y * TEXCOORD.y) + cbTextureTilingScale._m0[16u].w));
    float _734 = ((_648.x - _632) * _374) + _632;
    float _735 = ((_648.y - _633) * _374) + _633;
    float _740 = ((_670.x - _734) * _415) + _734;
    float _741 = ((_670.y - _735) * _415) + _735;
    float _750 = ((((_695.x - _740) * _455) + _740) * 2.0) + (-1.0);
    float _751 = ((((_695.y - _741) * _455) + _741) * 2.0) + (-1.0);
    float _752 = dot(vec2(_750, _751), vec2(_750, _751));
    float _4085 = isnan(0.0) ? _752 : (isnan(_752) ? 0.0 : max(_752, 0.0));
    float _757 = sqrt(1.0 - (isnan(1.0) ? _4085 : (isnan(_4085) ? 1.0 : min(_4085, 1.0))));
    float _767 = ((((_722.x * 2.0) + (-1.0)) * cbMtdParam._m0[16u].y) + _750) + ((((_608.x * 2.0) + (-1.0)) * TEXCOORD_5.x) * cbMtdParam._m0[15u].y);
    float _768 = ((((_722.y * 2.0) + (-1.0)) * cbMtdParam._m0[16u].y) + _751) + ((((_608.y * 2.0) + (-1.0)) * TEXCOORD_5.y) * cbMtdParam._m0[15u].y);
    float _771 = fma(_757, _236 * NORMAL.x, fma(_768, _243 * TANGENT.x, (_229 * _221) * _767));
    float _774 = fma(_757, _236 * NORMAL.y, fma(_768, _243 * TANGENT.y, (_229 * _222) * _767));
    float _777 = fma(_757, _236 * NORMAL.z, fma(_768, _243 * TANGENT.z, (_229 * _223) * _767));
    float _781 = inversesqrt(dot(vec3(_771, _774, _777), vec3(_771, _774, _777)));
    float _782 = _781 * _771;
    float _783 = _781 * _774;
    float _784 = _781 * _777;
    float _4096 = isnan(0.0) ? _709 : (isnan(_709) ? 0.0 : max(_709, 0.0));
    float _785 = isnan(1.0) ? _4096 : (isnan(_4096) ? 1.0 : min(_4096, 1.0));
    float _4107 = isnan(0.0) ? _521 : (isnan(_521) ? 0.0 : max(_521, 0.0));
    float _4118 = isnan(0.0) ? _522 : (isnan(_522) ? 0.0 : max(_522, 0.0));
    float _4129 = isnan(0.0) ? _523 : (isnan(_523) ? 0.0 : max(_523, 0.0));
    float _4140 = isnan(0.0) ? _595 : (isnan(_595) ? 0.0 : max(_595, 0.0));
    float _789 = isnan(1.0) ? _4140 : (isnan(_4140) ? 1.0 : min(_4140, 1.0));
    float _805 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _845 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _855 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _845);
    float _856 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _845);
    float _857 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _845);
    float _861 = inversesqrt(dot(vec3(_855, _856, _857), vec3(_855, _856, _857)));
    float _862 = _855 * _861;
    float _863 = _856 * _861;
    float _864 = _857 * _861;
    vec4 _869 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _871 = _869.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1043 = sqrt(((_855 * _855) + (_856 * _856)) + (_857 * _857));
        float _1049 = (cbMatDynParam._m0[5u].x * _1043) + cbMatDynParam._m0[5u].y;
        float _4151 = isnan(0.0) ? _1049 : (isnan(_1049) ? 0.0 : max(_1049, 0.0));
        float _1050 = isnan(1.0) ? _4151 : (isnan(_4151) ? 1.0 : min(_4151, 1.0));
        float _1054 = (cbMatDynParam._m0[5u].z * _1043) + cbMatDynParam._m0[5u].w;
        float _4162 = isnan(0.0) ? _1054 : (isnan(_1054) ? 0.0 : max(_1054, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4162 : (isnan(_4162) ? 1.0 : min(_4162, 1.0))) - _1050)) + _1050) < ((_871 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _882 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _883 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _901 = fma(_784, cbSceneParam._m0[5u].z, fma(_783, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _782));
    float _904 = fma(_784, cbSceneParam._m0[6u].z, fma(_783, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _782));
    float _907 = fma(_784, cbSceneParam._m0[7u].z, fma(_783, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _782));
    uint _920 = uint(roundEven(NORMAL.w)) * 13u;
    uint _921 = _920 + 9u;
    uint _922 = _921 + uint(cbMatDynParam._m0[0u].w);
    float _928 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4107 : (isnan(_4107) ? 1.0 : min(_4107, 1.0)))) * cbInstanceData._m0[_922].x;
    float _929 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4118 : (isnan(_4118) ? 1.0 : min(_4118, 1.0)))) * cbInstanceData._m0[_922].y;
    float _930 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4129 : (isnan(_4129) ? 1.0 : min(_4129, 1.0)))) * cbInstanceData._m0[_922].z;
    float _4173 = isnan(0.0) ? _928 : (isnan(_928) ? 0.0 : max(_928, 0.0));
    float _931 = isnan(1.0) ? _4173 : (isnan(_4173) ? 1.0 : min(_4173, 1.0));
    float _4184 = isnan(0.0) ? _929 : (isnan(_929) ? 0.0 : max(_929, 0.0));
    float _932 = isnan(1.0) ? _4184 : (isnan(_4184) ? 1.0 : min(_4184, 1.0));
    float _4195 = isnan(0.0) ? _930 : (isnan(_930) ? 0.0 : max(_930, 0.0));
    float _933 = isnan(1.0) ? _4195 : (isnan(_4195) ? 1.0 : min(_4195, 1.0));
    float _934 = 1.0 - _789;
    float _935 = _931 * _934;
    float _936 = _932 * _934;
    float _937 = _933 * _934;
    float _942 = (_931 + (-0.039999999105930328369140625)) * _789;
    float _943 = (_932 + (-0.039999999105930328369140625)) * _789;
    float _944 = (_933 + (-0.039999999105930328369140625)) * _789;
    float _945 = _942 + 0.039999999105930328369140625;
    float _947 = _943 + 0.039999999105930328369140625;
    float _948 = _944 + 0.039999999105930328369140625;
    vec4 _957 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _882, cbSceneParam._m0[86u].y * _883));
    float _960 = _957.x * TEXCOORD_5.w;
    float _961 = dot(vec3(_782, _783, _784), vec3(_862, _863, _864));
    float _964 = _961 * 2.0;
    float _968 = (_964 * _782) - _862;
    float _969 = (_964 * _783) - _863;
    float _970 = (_964 * _784) - _864;
    float _974 = abs(dot(vec3(_862, _863, _864), vec3(_782, _783, _784)));
    float _4206 = isnan(0.0) ? _974 : (isnan(_974) ? 0.0 : max(_974, 0.0));
    float _976 = sqrt(_785);
    float _989 = exp2((_976 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4206 : (isnan(_4206) ? 1.0 : min(_4206, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_976 * 3.0));
    float _995 = (1.0 - _989) * ((_976 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _996 = _989 * _976;
    float _1024 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1028 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1032 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1362;
    float _1364;
    float _1365;
    float _1366;
    float _1367;
    float _1368;
    float _1369;
    float _1370;
    float _1371;
    float _1372;
    float _1373;
    float _1374;
    float _1375;
    float _1376;
    float _1377;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1087 = fma(_1032, cbModelParam._m0[26u].z, fma(_1028, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1024));
        float _1091 = fma(_1032, cbModelParam._m0[27u].z, fma(_1028, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1024));
        float _1095 = fma(_1032, cbModelParam._m0[28u].z, fma(_1028, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1024));
        float _1120 = _1024 + _782;
        float _1121 = _1028 + _783;
        float _1122 = _1032 + _784;
        float _1132 = fma(_1122, cbModelParam._m0[26u].z, fma(_1121, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1120)) - _1087;
        float _1133 = fma(_1122, cbModelParam._m0[27u].z, fma(_1121, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1120)) - _1091;
        float _1134 = fma(_1122, cbModelParam._m0[28u].z, fma(_1121, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1120)) - _1095;
        float _1138 = inversesqrt(dot(vec3(_1132, _1133, _1134), vec3(_1132, _1133, _1134)));
        float _1151 = ((_1138 * _1132) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1087 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1152 = ((_1138 * _1133) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1091 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1153 = ((_1138 * _1134) / cbModelParam._m0[34u].z) + ((((((_1095 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1156 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1151, _1152, _1153), 0.0);
        vec4 _1163 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1151, _1152, _1153), 0.0);
        vec4 _1170 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1151, _1152, _1153), 0.0);
        vec4 _1177 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1151, _1152, _1153), 0.0);
        float _1190 = exp2((_1156.w + (-0.5)) * 20.0) * 2.0;
        float _1191 = _1190 * (_1156.x + (-0.5));
        float _1192 = _1190 * (_1156.y + (-0.5));
        float _1193 = _1190 * (_1156.z + (-0.5));
        float _1200 = exp2((_1163.w + (-0.5)) * 20.0) * 2.0;
        float _1201 = _1200 * (_1163.x + (-0.5));
        float _1202 = _1200 * (_1163.y + (-0.5));
        float _1203 = _1200 * (_1163.z + (-0.5));
        float _1210 = exp2((_1170.w + (-0.5)) * 20.0) * 2.0;
        float _1211 = _1210 * (_1170.x + (-0.5));
        float _1212 = _1210 * (_1170.y + (-0.5));
        float _1213 = _1210 * (_1170.z + (-0.5));
        float _1220 = exp2((_1177.w + (-0.5)) * 20.0) * 2.0;
        float _1221 = _1220 * (_1177.x + (-0.5));
        float _1222 = _1220 * (_1177.y + (-0.5));
        float _1223 = _1220 * (_1177.z + (-0.5));
        float _1224 = isnan(0.0) ? _1221 : (isnan(_1221) ? 0.0 : max(_1221, 0.0));
        float _1225 = isnan(0.0) ? _1222 : (isnan(_1222) ? 0.0 : max(_1222, 0.0));
        float _1226 = isnan(0.0) ? _1223 : (isnan(_1223) ? 0.0 : max(_1223, 0.0));
        float _1227 = _1191 * 0.5;
        float _1228 = _1201 * 0.5;
        float _1229 = _1211 * 0.5;
        float _1230 = dot(vec3(_1227, _1228, _1229), vec3(_1227, _1228, _1229));
        float _1235 = (_1230 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1230);
        float _1244 = (dot(vec3(_782, _783, _784), vec3(_1235 * _1227, _1235 * _1228, _1235 * _1229)) + 1.0) * 0.5;
        float _4232 = isnan(0.0) ? _1244 : (isnan(_1244) ? 0.0 : max(_1244, 0.0));
        float _1254 = sqrt(((_1228 * _1228) + (_1227 * _1227)) + (_1229 * _1229)) / (_1224 + 9.9999997473787516355514526367188e-06);
        float _4243 = isnan(0.0) ? _1254 : (isnan(_1254) ? 0.0 : max(_1254, 0.0));
        float _1255 = isnan(1.0) ? _4243 : (isnan(_4243) ? 1.0 : min(_4243, 1.0));
        float _1256 = _1255 * 2.0;
        float _1260 = (1.0 - _1255) / (_1255 + 1.0);
        float _4254 = isnan(0.0) ? _1260 : (isnan(_1260) ? 0.0 : max(_1260, 0.0));
        float _1261 = isnan(1.0) ? _4254 : (isnan(_4254) ? 1.0 : min(_4254, 1.0));
        float _1270 = ((((1.0 - _1261) * (_1256 + 2.0)) * exp2(log2(isnan(1.0) ? _4232 : (isnan(_4232) ? 1.0 : min(_4232, 1.0))) * (_1256 + 1.0))) + _1261) * _1224;
        float _1271 = _1192 * 0.5;
        float _1272 = _1202 * 0.5;
        float _1273 = _1212 * 0.5;
        float _1274 = dot(vec3(_1271, _1272, _1273), vec3(_1271, _1272, _1273));
        float _1279 = (_1274 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1274);
        float _1287 = (dot(vec3(_782, _783, _784), vec3(_1279 * _1271, _1279 * _1272, _1279 * _1273)) + 1.0) * 0.5;
        float _4265 = isnan(0.0) ? _1287 : (isnan(_1287) ? 0.0 : max(_1287, 0.0));
        float _1296 = sqrt(((_1272 * _1272) + (_1271 * _1271)) + (_1273 * _1273)) / (_1225 + 9.9999997473787516355514526367188e-06);
        float _4276 = isnan(0.0) ? _1296 : (isnan(_1296) ? 0.0 : max(_1296, 0.0));
        float _1297 = isnan(1.0) ? _4276 : (isnan(_4276) ? 1.0 : min(_4276, 1.0));
        float _1298 = _1297 * 2.0;
        float _1302 = (1.0 - _1297) / (_1297 + 1.0);
        float _4287 = isnan(0.0) ? _1302 : (isnan(_1302) ? 0.0 : max(_1302, 0.0));
        float _1303 = isnan(1.0) ? _4287 : (isnan(_4287) ? 1.0 : min(_4287, 1.0));
        float _1312 = ((((1.0 - _1303) * (_1298 + 2.0)) * exp2(log2(isnan(1.0) ? _4265 : (isnan(_4265) ? 1.0 : min(_4265, 1.0))) * (_1298 + 1.0))) + _1303) * _1225;
        float _1313 = _1193 * 0.5;
        float _1314 = _1203 * 0.5;
        float _1315 = _1213 * 0.5;
        float _1316 = dot(vec3(_1313, _1314, _1315), vec3(_1313, _1314, _1315));
        float _1321 = (_1316 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1316);
        float _1329 = (dot(vec3(_782, _783, _784), vec3(_1321 * _1313, _1321 * _1314, _1321 * _1315)) + 1.0) * 0.5;
        float _4298 = isnan(0.0) ? _1329 : (isnan(_1329) ? 0.0 : max(_1329, 0.0));
        float _1338 = sqrt(((_1314 * _1314) + (_1313 * _1313)) + (_1315 * _1315)) / (_1226 + 9.9999997473787516355514526367188e-06);
        float _4309 = isnan(0.0) ? _1338 : (isnan(_1338) ? 0.0 : max(_1338, 0.0));
        float _1339 = isnan(1.0) ? _4309 : (isnan(_4309) ? 1.0 : min(_4309, 1.0));
        float _1340 = _1339 * 2.0;
        float _1344 = (1.0 - _1339) / (_1339 + 1.0);
        float _4320 = isnan(0.0) ? _1344 : (isnan(_1344) ? 0.0 : max(_1344, 0.0));
        float _1345 = isnan(1.0) ? _4320 : (isnan(_4320) ? 1.0 : min(_4320, 1.0));
        float _1354 = ((((1.0 - _1345) * (_1340 + 2.0)) * exp2(log2(isnan(1.0) ? _4298 : (isnan(_4298) ? 1.0 : min(_4298, 1.0))) * (_1340 + 1.0))) + _1345) * _1226;
        _1362 = _1193;
        _1364 = _1192;
        _1365 = _1191;
        _1366 = _1203;
        _1367 = _1202;
        _1368 = _1201;
        _1369 = _1213;
        _1370 = _1212;
        _1371 = _1211;
        _1372 = _1226;
        _1373 = _1225;
        _1374 = _1224;
        _1375 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1270 : (isnan(_1270) ? 0.0 : max(_1270, 0.0)));
        _1376 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1312 : (isnan(_1312) ? 0.0 : max(_1312, 0.0)));
        _1377 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1354 : (isnan(_1354) ? 0.0 : max(_1354, 0.0)));
    }
    else
    {
        _1362 = _1363;
        _1364 = _1363;
        _1365 = _1363;
        _1366 = _1363;
        _1367 = _1363;
        _1368 = _1363;
        _1369 = _1363;
        _1370 = _1363;
        _1371 = _1363;
        _1372 = _1363;
        _1373 = _1363;
        _1374 = _1363;
        _1375 = 0.0;
        _1376 = 0.0;
        _1377 = 0.0;
    }
    float _1675;
    float _1676;
    float _1677;
    float _1678;
    float _1679;
    float _1680;
    float _1681;
    float _1682;
    float _1683;
    float _1684;
    float _1685;
    float _1686;
    float _1687;
    float _1688;
    float _1689;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1406 = fma(_1032, cbModelParam._m0[30u].z, fma(_1028, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1024));
        float _1410 = fma(_1032, cbModelParam._m0[31u].z, fma(_1028, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1024));
        float _1414 = fma(_1032, cbModelParam._m0[32u].z, fma(_1028, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1024));
        float _1437 = _1024 + _782;
        float _1438 = _1028 + _783;
        float _1439 = _1032 + _784;
        float _1449 = fma(_1439, cbModelParam._m0[30u].z, fma(_1438, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1437)) - _1406;
        float _1450 = fma(_1439, cbModelParam._m0[31u].z, fma(_1438, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1437)) - _1410;
        float _1451 = fma(_1439, cbModelParam._m0[32u].z, fma(_1438, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1437)) - _1414;
        float _1455 = inversesqrt(dot(vec3(_1449, _1450, _1451), vec3(_1449, _1450, _1451)));
        float _1468 = ((_1455 * _1449) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1406 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1469 = ((_1455 * _1450) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1410 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1470 = ((_1455 * _1451) / cbModelParam._m0[35u].z) + ((((((_1414 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1472 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1468, _1469, _1470), 0.0);
        vec4 _1479 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1468, _1469, _1470), 0.0);
        vec4 _1486 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1468, _1469, _1470), 0.0);
        vec4 _1493 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1468, _1469, _1470), 0.0);
        float _1505 = exp2((_1472.w + (-0.5)) * 20.0) * 2.0;
        float _1506 = _1505 * (_1472.x + (-0.5));
        float _1507 = _1505 * (_1472.y + (-0.5));
        float _1508 = _1505 * (_1472.z + (-0.5));
        float _1515 = exp2((_1479.w + (-0.5)) * 20.0) * 2.0;
        float _1516 = _1515 * (_1479.x + (-0.5));
        float _1517 = _1515 * (_1479.y + (-0.5));
        float _1518 = _1515 * (_1479.z + (-0.5));
        float _1525 = exp2((_1486.w + (-0.5)) * 20.0) * 2.0;
        float _1526 = _1525 * (_1486.x + (-0.5));
        float _1527 = _1525 * (_1486.y + (-0.5));
        float _1528 = _1525 * (_1486.z + (-0.5));
        float _1535 = exp2((_1493.w + (-0.5)) * 20.0) * 2.0;
        float _1536 = _1535 * (_1493.x + (-0.5));
        float _1537 = _1535 * (_1493.y + (-0.5));
        float _1538 = _1535 * (_1493.z + (-0.5));
        float _1539 = isnan(0.0) ? _1536 : (isnan(_1536) ? 0.0 : max(_1536, 0.0));
        float _1540 = isnan(0.0) ? _1537 : (isnan(_1537) ? 0.0 : max(_1537, 0.0));
        float _1541 = isnan(0.0) ? _1538 : (isnan(_1538) ? 0.0 : max(_1538, 0.0));
        float _1542 = _1506 * 0.5;
        float _1543 = _1516 * 0.5;
        float _1544 = _1526 * 0.5;
        float _1545 = dot(vec3(_1542, _1543, _1544), vec3(_1542, _1543, _1544));
        float _1550 = (_1545 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1545);
        float _1558 = (dot(vec3(_782, _783, _784), vec3(_1550 * _1542, _1550 * _1543, _1550 * _1544)) + 1.0) * 0.5;
        float _4361 = isnan(0.0) ? _1558 : (isnan(_1558) ? 0.0 : max(_1558, 0.0));
        float _1567 = sqrt(((_1543 * _1543) + (_1542 * _1542)) + (_1544 * _1544)) / (_1539 + 9.9999997473787516355514526367188e-06);
        float _4372 = isnan(0.0) ? _1567 : (isnan(_1567) ? 0.0 : max(_1567, 0.0));
        float _1568 = isnan(1.0) ? _4372 : (isnan(_4372) ? 1.0 : min(_4372, 1.0));
        float _1569 = _1568 * 2.0;
        float _1573 = (1.0 - _1568) / (_1568 + 1.0);
        float _4383 = isnan(0.0) ? _1573 : (isnan(_1573) ? 0.0 : max(_1573, 0.0));
        float _1574 = isnan(1.0) ? _4383 : (isnan(_4383) ? 1.0 : min(_4383, 1.0));
        float _1583 = ((((1.0 - _1574) * (_1569 + 2.0)) * exp2(log2(isnan(1.0) ? _4361 : (isnan(_4361) ? 1.0 : min(_4361, 1.0))) * (_1569 + 1.0))) + _1574) * _1539;
        float _1584 = _1507 * 0.5;
        float _1585 = _1517 * 0.5;
        float _1586 = _1527 * 0.5;
        float _1587 = dot(vec3(_1584, _1585, _1586), vec3(_1584, _1585, _1586));
        float _1592 = (_1587 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1587);
        float _1600 = (dot(vec3(_782, _783, _784), vec3(_1592 * _1584, _1592 * _1585, _1592 * _1586)) + 1.0) * 0.5;
        float _4394 = isnan(0.0) ? _1600 : (isnan(_1600) ? 0.0 : max(_1600, 0.0));
        float _1609 = sqrt(((_1585 * _1585) + (_1584 * _1584)) + (_1586 * _1586)) / (_1540 + 9.9999997473787516355514526367188e-06);
        float _4405 = isnan(0.0) ? _1609 : (isnan(_1609) ? 0.0 : max(_1609, 0.0));
        float _1610 = isnan(1.0) ? _4405 : (isnan(_4405) ? 1.0 : min(_4405, 1.0));
        float _1611 = _1610 * 2.0;
        float _1615 = (1.0 - _1610) / (_1610 + 1.0);
        float _4416 = isnan(0.0) ? _1615 : (isnan(_1615) ? 0.0 : max(_1615, 0.0));
        float _1616 = isnan(1.0) ? _4416 : (isnan(_4416) ? 1.0 : min(_4416, 1.0));
        float _1625 = ((((1.0 - _1616) * (_1611 + 2.0)) * exp2(log2(isnan(1.0) ? _4394 : (isnan(_4394) ? 1.0 : min(_4394, 1.0))) * (_1611 + 1.0))) + _1616) * _1540;
        float _1626 = _1508 * 0.5;
        float _1627 = _1518 * 0.5;
        float _1628 = _1528 * 0.5;
        float _1629 = dot(vec3(_1626, _1627, _1628), vec3(_1626, _1627, _1628));
        float _1634 = (_1629 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1629);
        float _1642 = (dot(vec3(_782, _783, _784), vec3(_1634 * _1626, _1634 * _1627, _1634 * _1628)) + 1.0) * 0.5;
        float _4427 = isnan(0.0) ? _1642 : (isnan(_1642) ? 0.0 : max(_1642, 0.0));
        float _1651 = sqrt(((_1627 * _1627) + (_1626 * _1626)) + (_1628 * _1628)) / (_1541 + 9.9999997473787516355514526367188e-06);
        float _4438 = isnan(0.0) ? _1651 : (isnan(_1651) ? 0.0 : max(_1651, 0.0));
        float _1652 = isnan(1.0) ? _4438 : (isnan(_4438) ? 1.0 : min(_4438, 1.0));
        float _1653 = _1652 * 2.0;
        float _1657 = (1.0 - _1652) / (_1652 + 1.0);
        float _4449 = isnan(0.0) ? _1657 : (isnan(_1657) ? 0.0 : max(_1657, 0.0));
        float _1658 = isnan(1.0) ? _4449 : (isnan(_4449) ? 1.0 : min(_4449, 1.0));
        float _1667 = ((((1.0 - _1658) * (_1653 + 2.0)) * exp2(log2(isnan(1.0) ? _4427 : (isnan(_4427) ? 1.0 : min(_4427, 1.0))) * (_1653 + 1.0))) + _1658) * _1541;
        _1675 = _1508;
        _1676 = _1507;
        _1677 = _1506;
        _1678 = _1518;
        _1679 = _1517;
        _1680 = _1516;
        _1681 = _1528;
        _1682 = _1527;
        _1683 = _1526;
        _1684 = _1541;
        _1685 = _1540;
        _1686 = _1539;
        _1687 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1583 : (isnan(_1583) ? 0.0 : max(_1583, 0.0)));
        _1688 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1625 : (isnan(_1625) ? 0.0 : max(_1625, 0.0)));
        _1689 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1667 : (isnan(_1667) ? 0.0 : max(_1667, 0.0)));
    }
    else
    {
        _1675 = _1363;
        _1676 = _1363;
        _1677 = _1363;
        _1678 = _1363;
        _1679 = _1363;
        _1680 = _1363;
        _1681 = _1363;
        _1682 = _1363;
        _1683 = _1363;
        _1684 = _1363;
        _1685 = _1363;
        _1686 = _1363;
        _1687 = 0.0;
        _1688 = 0.0;
        _1689 = 0.0;
    }
    float _1699 = (cbModelParam._m0[1u].x * (_1687 - _1375)) + _1375;
    float _1700 = (cbModelParam._m0[1u].x * (_1688 - _1376)) + _1376;
    float _1701 = (cbModelParam._m0[1u].x * (_1689 - _1377)) + _1377;
    float _1722 = fma(_1701, cbSceneParam._m0[89u].z, fma(_1700, cbSceneParam._m0[89u].y, _1699 * cbSceneParam._m0[89u].x));
    float _1725 = fma(_1701, cbSceneParam._m0[90u].z, fma(_1700, cbSceneParam._m0[90u].y, _1699 * cbSceneParam._m0[90u].x));
    float _1728 = fma(_1701, cbSceneParam._m0[91u].z, fma(_1700, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1699));
    float _1743 = _968 * 0.5;
    float _1744 = _969 * 0.5;
    float _1745 = _970 * 0.5;
    float _1746 = dot(vec4(_1743, _1744, _1745, 1.0), vec4(_1677, _1680, _1683, _1686));
    float _1749 = dot(vec4(_1743, _1744, _1745, 1.0), vec4(_1676, _1679, _1682, _1685));
    float _1752 = dot(vec4(_1743, _1744, _1745, 1.0), vec4(_1675, _1678, _1681, _1684));
    float _1786;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1759 = dot(vec4(_1743, _1744, _1745, 1.0), vec4(_1362, _1366, _1369, _1372));
        float _1763 = dot(vec4(_1743, _1744, _1745, 1.0), vec4(_1364, _1367, _1370, _1373));
        float _1767 = dot(vec4(_1743, _1744, _1745, 1.0), vec4(_1365, _1368, _1371, _1374));
        float _1774 = dot(vec4(cbModelParam._m0[39u]), vec4(_1743, _1744, _1745, 1.0));
        _1786 = dot(vec3(isnan(0.0) ? _1767 : (isnan(_1767) ? 0.0 : max(_1767, 0.0)), isnan(0.0) ? _1763 : (isnan(_1763) ? 0.0 : max(_1763, 0.0)), isnan(0.0) ? _1759 : (isnan(_1759) ? 0.0 : max(_1759, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1774) ? 0.0 : (isnan(0.0) ? _1774 : max(0.0, _1774))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1786 = 1.0;
    }
    float _1797;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1788 = dot(vec4(cbModelParam._m0[40u]), vec4(_1743, _1744, _1745, 1.0));
        _1797 = dot(vec3(isnan(0.0) ? _1746 : (isnan(_1746) ? 0.0 : max(_1746, 0.0)), isnan(0.0) ? _1749 : (isnan(_1749) ? 0.0 : max(_1749, 0.0)), isnan(0.0) ? _1752 : (isnan(_1752) ? 0.0 : max(_1752, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1788) ? 0.0 : (isnan(0.0) ? _1788 : max(0.0, _1788))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1797 = 1.0;
    }
    float _1801 = (_1797 * cbModelParam._m0[1u].x) + (_1786 * (1.0 - cbModelParam._m0[1u].x));
    float _1811 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _785);
    float _1812 = isnan(_1811) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1811 : min(cbModelParam._m0[25u].z, _1811));
    float _1892;
    float _1894;
    float _1896;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1859 = fma(_1032, cbModelParam._m0[13u].z, fma(_1028, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1024)) + cbModelParam._m0[13u].w;
        float _1863 = fma(_1032, cbModelParam._m0[14u].z, fma(_1028, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1024)) + cbModelParam._m0[14u].w;
        float _1867 = fma(_1032, cbModelParam._m0[15u].z, fma(_1028, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1024)) + cbModelParam._m0[15u].w;
        float _1870 = fma(_970, cbModelParam._m0[13u].z, fma(_969, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _968));
        float _1873 = fma(_970, cbModelParam._m0[14u].z, fma(_969, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _968));
        float _1876 = fma(_970, cbModelParam._m0[15u].z, fma(_969, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _968));
        float _1904;
        if (_1870 > 0.0)
        {
            _1904 = abs((1.0 - _1859) / _1870);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1870 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1859 + 1.0) / _1870);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1904 = frontier_phi_17_15_ladder;
        }
        float _2077;
        if (_1873 > 0.0)
        {
            _2077 = abs((1.0 - _1863) / _1873);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1873 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1863 + 1.0) / _1873);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2077 = frontier_phi_26_22_ladder;
        }
        float _2373;
        if (_1876 > 0.0)
        {
            _2373 = abs((1.0 - _1867) / _1876);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1876 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1867 + 1.0) / _1876);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2373 = frontier_phi_38_33_ladder;
        }
        float _2375 = isnan(_2077) ? _1904 : (isnan(_1904) ? _2077 : min(_1904, _2077));
        float _2376 = isnan(_2373) ? _2375 : (isnan(_2375) ? _2373 : min(_2375, _2373));
        float _2380 = (_2376 * _1870) + _1859;
        float _2381 = (_2376 * _1873) + _1863;
        float _2382 = (_2376 * _1876) + _1867;
        float _2383 = _2376 * 9.9999997473787516355514526367188e-05;
        float _2385 = (-1.0) - _2383;
        float _2387 = _2383 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2382 > _2387) || ((_2382 < _2385) || ((_2381 > _2387) || ((_2381 < _2385) || ((_2380 < _2385) || (_2380 > _2387))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2527 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2382, cbModelParam._m0[9u].z, fma(_2381, cbModelParam._m0[9u].y, _2380 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2382, cbModelParam._m0[10u].z, fma(_2381, cbModelParam._m0[10u].y, _2380 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2382, cbModelParam._m0[11u].z, fma(_2381, cbModelParam._m0[11u].y, _2380 * cbModelParam._m0[11u].x))), _1812);
            frontier_phi_16_38_ladder = _2527.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2527.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2527.x * cbModelParam._m0[1u].y;
        }
        _1892 = frontier_phi_16_38_ladder_2;
        _1894 = frontier_phi_16_38_ladder_1;
        _1896 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1880 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_968, _969, _970), _1812);
        _1892 = _1880.x * cbModelParam._m0[1u].y;
        _1894 = _1880.y * cbModelParam._m0[1u].y;
        _1896 = _1880.z * cbModelParam._m0[1u].y;
    }
    float _1900 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _785);
    float _1901 = isnan(_1900) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1900 : min(cbModelParam._m0[25u].w, _1900));
    float _1992;
    float _1994;
    float _1996;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1956 = fma(_1032, cbModelParam._m0[21u].z, fma(_1028, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1024)) + cbModelParam._m0[21u].w;
        float _1960 = fma(_1032, cbModelParam._m0[22u].z, fma(_1028, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1024)) + cbModelParam._m0[22u].w;
        float _1964 = fma(_1032, cbModelParam._m0[23u].z, fma(_1028, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1024)) + cbModelParam._m0[23u].w;
        float _1967 = fma(_970, cbModelParam._m0[21u].z, fma(_969, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _968));
        float _1970 = fma(_970, cbModelParam._m0[22u].z, fma(_969, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _968));
        float _1973 = fma(_970, cbModelParam._m0[23u].z, fma(_969, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _968));
        float _2082;
        if (_1967 > 0.0)
        {
            _2082 = abs((1.0 - _1956) / _1967);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1967 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1956 + 1.0) / _1967);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2082 = frontier_phi_28_24_ladder;
        }
        float _2400;
        if (_1970 > 0.0)
        {
            _2400 = abs((1.0 - _1960) / _1970);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1970 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1960 + 1.0) / _1970);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2400 = frontier_phi_40_35_ladder;
        }
        float _2738;
        if (_1973 > 0.0)
        {
            _2738 = abs((1.0 - _1964) / _1973);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1973 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1964 + 1.0) / _1973);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2738 = frontier_phi_50_47_ladder;
        }
        float _2740 = isnan(_2400) ? _2082 : (isnan(_2082) ? _2400 : min(_2082, _2400));
        float _2741 = isnan(_2738) ? _2740 : (isnan(_2740) ? _2738 : min(_2740, _2738));
        float _2745 = (_2741 * _1967) + _1956;
        float _2746 = (_2741 * _1970) + _1960;
        float _2747 = (_2741 * _1973) + _1964;
        float _2748 = _2741 * 9.9999997473787516355514526367188e-05;
        float _2749 = (-1.0) - _2748;
        float _2751 = _2748 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2747 > _2751) || ((_2747 < _2749) || ((_2746 > _2751) || ((_2746 < _2749) || ((_2745 < _2749) || (_2745 > _2751))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2869 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2747, cbModelParam._m0[17u].z, fma(_2746, cbModelParam._m0[17u].y, _2745 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2747, cbModelParam._m0[18u].z, fma(_2746, cbModelParam._m0[18u].y, _2745 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2747, cbModelParam._m0[19u].z, fma(_2746, cbModelParam._m0[19u].y, _2745 * cbModelParam._m0[19u].x))), _1901);
            frontier_phi_25_50_ladder = _2869.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2869.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2869.x * cbModelParam._m0[1u].z;
        }
        _1992 = frontier_phi_25_50_ladder_2;
        _1994 = frontier_phi_25_50_ladder_1;
        _1996 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1976 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_968, _969, _970), _1901);
        _1992 = _1976.x * cbModelParam._m0[1u].z;
        _1994 = _1976.y * cbModelParam._m0[1u].z;
        _1996 = _1976.z * cbModelParam._m0[1u].z;
    }
    float _2009 = (((_995 * _945) + _996) * _960) * ((cbModelParam._m0[1u].w * (_1992 - _1892)) + _1892);
    float _2011 = (((_995 * _947) + _996) * _960) * ((cbModelParam._m0[1u].w * (_1994 - _1894)) + _1894);
    float _2013 = (((_995 * _948) + _996) * _960) * ((cbModelParam._m0[1u].w * (_1996 - _1896)) + _1896);
    float _2016 = fma(_2013, cbSceneParam._m0[89u].z, fma(_2011, cbSceneParam._m0[89u].y, _2009 * cbSceneParam._m0[89u].x));
    float _2019 = fma(_2013, cbSceneParam._m0[90u].z, fma(_2011, cbSceneParam._m0[90u].y, _2009 * cbSceneParam._m0[90u].x));
    float _2022 = fma(_2013, cbSceneParam._m0[91u].z, fma(_2011, cbSceneParam._m0[91u].y, _2009 * cbSceneParam._m0[91u].x));
    float _2056 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2060 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2064 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2068 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2069 = _2056 / _2068;
    float _2070 = _2060 / _2068;
    float _2071 = _2064 / _2068;
    float _2218;
    float _2219;
    float _2220;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2098 = ((uint(_2071 > cbSceneParam._m0[59u].y) + uint(_2071 > cbSceneParam._m0[59u].x)) + uint(_2071 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2099 = _2098 + 43u;
        uint _2107 = _2098 + 44u;
        uint _2115 = _2098 + 45u;
        uint _2123 = _2098 + 46u;
        float _2134 = fma(_2068, cbSceneParam._m0[_2099].w, fma(_2064, cbSceneParam._m0[_2099].z, fma(_2060, cbSceneParam._m0[_2099].y, _2056 * cbSceneParam._m0[_2099].x)));
        float _2138 = fma(_2068, cbSceneParam._m0[_2107].w, fma(_2064, cbSceneParam._m0[_2107].z, fma(_2060, cbSceneParam._m0[_2107].y, _2056 * cbSceneParam._m0[_2107].x)));
        float _2146 = fma(_2068, cbSceneParam._m0[_2123].w, fma(_2064, cbSceneParam._m0[_2123].z, fma(_2060, cbSceneParam._m0[_2123].y, _2056 * cbSceneParam._m0[_2123].x)));
        float _2151 = cbSceneParam._m0[33u].z * _2146;
        float _2153 = cbSceneParam._m0[33u].w * _2146;
        float _2156 = fma(_2068, cbSceneParam._m0[_2115].w, fma(_2064, cbSceneParam._m0[_2115].z, fma(_2060, cbSceneParam._m0[_2115].y, _2056 * cbSceneParam._m0[_2115].x))) / _2146;
        float _2204 = (cbSceneParam._m0[33u].x - sqrt(((_2070 * _2070) + (_2069 * _2069)) + (_2071 * _2071))) * cbSceneParam._m0[33u].y;
        float _4575 = isnan(0.0) ? _2204 : (isnan(_2204) ? 0.0 : max(_2204, 0.0));
        float _2211 = (isnan(1.0) ? _4575 : (isnan(_4575) ? 1.0 : min(_4575, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2151 + _2134) / _2146, (_2153 + _2138) / _2146), _2156), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2153 + _2134) / _2146, (_2138 - _2151) / _2146), _2156), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2134 - _2151) / _2146, (_2138 - _2153) / _2146), _2156), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2134 - _2153) / _2146, (_2151 + _2138) / _2146), _2156), 0.0)).x), vec4(0.25)));
        _2218 = 1.0 - (_2211 * cbSceneParam._m0[34u].x);
        _2219 = 1.0 - (_2211 * cbSceneParam._m0[34u].y);
        _2220 = 1.0 - (_2211 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2218 = 1.0;
        _2219 = 1.0;
        _2220 = 1.0;
    }
    float _2284;
    float _2286;
    float _2288;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2272 = fma(_2068, cbSceneParam._m0[63u].w, fma(_2064, cbSceneParam._m0[63u].z, fma(_2060, cbSceneParam._m0[63u].y, _2056 * cbSceneParam._m0[63u].x)));
        float _2273 = fma(_2068, cbSceneParam._m0[60u].w, fma(_2064, cbSceneParam._m0[60u].z, fma(_2060, cbSceneParam._m0[60u].y, _2056 * cbSceneParam._m0[60u].x))) / _2272;
        float _2274 = fma(_2068, cbSceneParam._m0[61u].w, fma(_2064, cbSceneParam._m0[61u].z, fma(_2060, cbSceneParam._m0[61u].y, _2056 * cbSceneParam._m0[61u].x))) / _2272;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2273 >= cbSceneParam._m0[64u].x) && (_2274 >= cbSceneParam._m0[64u].y)) && (_2273 <= cbSceneParam._m0[64u].z)) && (_2274 <= cbSceneParam._m0[64u].w))
        {
            float _2413 = fma(_2068, cbSceneParam._m0[62u].w, fma(_2064, cbSceneParam._m0[62u].z, fma(_2060, cbSceneParam._m0[62u].y, _2056 * cbSceneParam._m0[62u].x))) / _2272;
            float _2417 = isnan(cbSceneParam._m0[41u].w) ? _2413 : (isnan(_2413) ? cbSceneParam._m0[41u].w : max(_2413, cbSceneParam._m0[41u].w));
            float _2460 = (cbSceneParam._m0[33u].x - sqrt(((_2070 * _2070) + (_2069 * _2069)) + (_2071 * _2071))) * cbSceneParam._m0[33u].y;
            float _4591 = isnan(0.0) ? _2460 : (isnan(_2460) ? 0.0 : max(_2460, 0.0));
            float _2467 = (isnan(1.0) ? _4591 : (isnan(_4591) ? 1.0 : min(_4591, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2273, cbSceneParam._m0[33u].w + _2274), _2417), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2273, _2274 - cbSceneParam._m0[33u].z), _2417), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2273 - cbSceneParam._m0[33u].z, _2274 - cbSceneParam._m0[33u].w), _2417), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2273 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2274), _2417), 0.0)).x), vec4(0.25)));
            float _2471 = 1.0 - (_2467 * cbSceneParam._m0[34u].x);
            float _2472 = 1.0 - (_2467 * cbSceneParam._m0[34u].y);
            float _2473 = 1.0 - (_2467 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2473) ? _2220 : (isnan(_2220) ? _2473 : min(_2220, _2473));
            frontier_phi_37_36_ladder_1 = isnan(_2472) ? _2219 : (isnan(_2219) ? _2472 : min(_2219, _2472));
            frontier_phi_37_36_ladder_2 = isnan(_2471) ? _2218 : (isnan(_2218) ? _2471 : min(_2218, _2471));
        }
        else
        {
            frontier_phi_37_36_ladder = _2220;
            frontier_phi_37_36_ladder_1 = _2219;
            frontier_phi_37_36_ladder_2 = _2218;
        }
        _2284 = frontier_phi_37_36_ladder_2;
        _2286 = frontier_phi_37_36_ladder_1;
        _2288 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2284 = _2218;
        _2286 = _2219;
        _2288 = _2220;
    }
    uvec4 _2293 = floatBitsToUint(cbInstanceData._m0[_920 + 5u]);
    uint _2295 = _2293.x * 14u;
    uint _2296 = _2295 + 13u;
    float _2303 = _960 + (-1.0);
    float _2308 = (cbLight._m0[_2296].x * _2303) + 1.0;
    float _2309 = (cbLight._m0[_2296].y * _2303) + 1.0;
    float _2310 = (cbLight._m0[_2296].z * _2303) + 1.0;
    float _2311 = (cbLight._m0[_2296].w * _2303) + 1.0;
    uint _2312 = _2295 + 5u;
    float _2318 = isnan(1.0) ? _2309 : (isnan(_2309) ? 1.0 : min(_2309, 1.0));
    uint _2322 = _2295 + 4u;
    float _2332 = isnan(1.0) ? _2308 : (isnan(_2308) ? 1.0 : min(_2308, 1.0));
    uint _2336 = _2295 | 1u;
    float _2347 = dot(vec3(cbLight._m0[_2295].xyz), vec3(_782, _783, _784));
    float _2350 = dot(vec3(cbLight._m0[_2336].xyz), vec3(_782, _783, _784));
    float _4627 = isnan(0.0) ? _2347 : (isnan(_2347) ? 0.0 : max(_2347, 0.0));
    float _4638 = isnan(0.0) ? _2350 : (isnan(_2350) ? 0.0 : max(_2350, 0.0));
    float _2355 = (isnan(1.0) ? _4627 : (isnan(_4627) ? 1.0 : min(_4627, 1.0))) * 0.3183098733425140380859375;
    float _2357 = (isnan(1.0) ? _4638 : (isnan(_4638) ? 1.0 : min(_4638, 1.0))) * 0.3183098733425140380859375;
    float _2364 = ((cbLight._m0[_2312].x * _2318) * _2357) + (((cbLight._m0[_2322].x * _2284) * _2332) * _2355);
    float _2365 = ((_2318 * cbLight._m0[_2312].y) * _2357) + (((cbLight._m0[_2322].y * _2286) * _2332) * _2355);
    float _2366 = ((_2318 * cbLight._m0[_2312].z) * _2357) + (((cbLight._m0[_2322].z * _2288) * _2332) * _2355);
    uvec4 _2370 = floatBitsToUint(cbLight._m0[_2295 + 12u]);
    bool _2372 = _2370.x == 0u;
    float _2474;
    float _2476;
    float _2478;
    if (_2372)
    {
        _2474 = _2364;
        _2476 = _2365;
        _2478 = _2366;
    }
    else
    {
        uint _2482 = _2295 + 6u;
        float _2498 = (dot(vec3(cbLight._m0[_2295 + 2u].xyz), vec3(_782, _783, _784)) * 0.5) + 0.5;
        float _2499 = _2498 * _2498;
        float _4649 = isnan(0.0) ? _2499 : (isnan(_2499) ? 0.0 : max(_2499, 0.0));
        float _2500 = isnan(1.0) ? _4649 : (isnan(_4649) ? 1.0 : min(_4649, 1.0));
        float _2501 = isnan(1.0) ? _2310 : (isnan(_2310) ? 1.0 : min(_2310, 1.0));
        _2474 = (((cbLight._m0[_2482].x * 0.3183098733425140380859375) * _2500) * _2501) + _2364;
        _2476 = (((cbLight._m0[_2482].y * 0.3183098733425140380859375) * _2500) * _2501) + _2365;
        _2478 = (((cbLight._m0[_2482].z * 0.3183098733425140380859375) * _2500) * _2501) + _2366;
    }
    bool _2481 = _2370.y == 0u;
    float _2536;
    float _2538;
    float _2540;
    if (_2481)
    {
        _2536 = _2474;
        _2538 = _2476;
        _2540 = _2478;
    }
    else
    {
        uint _2709 = _2295 + 7u;
        float _2725 = (dot(vec3(cbLight._m0[_2295 + 3u].xyz), vec3(_782, _783, _784)) * 0.5) + 0.5;
        float _2726 = _2725 * _2725;
        float _4665 = isnan(0.0) ? _2726 : (isnan(_2726) ? 0.0 : max(_2726, 0.0));
        float _2727 = isnan(1.0) ? _4665 : (isnan(_4665) ? 1.0 : min(_4665, 1.0));
        float _2728 = isnan(1.0) ? _2311 : (isnan(_2311) ? 1.0 : min(_2311, 1.0));
        _2536 = (((cbLight._m0[_2709].x * 0.3183098733425140380859375) * _2727) * _2728) + _2474;
        _2538 = (((cbLight._m0[_2709].y * 0.3183098733425140380859375) * _2727) * _2728) + _2476;
        _2540 = (((cbLight._m0[_2709].z * 0.3183098733425140380859375) * _2727) * _2728) + _2478;
    }
    uint _2543 = _2295 + 8u;
    float _2556 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2295].w)) * _785) * 0.949999988079071044921875);
    float _2557 = _2556 * _2556;
    float _2558 = cbLight._m0[_2295].x + _862;
    float _2559 = cbLight._m0[_2295].y + _863;
    float _2560 = cbLight._m0[_2295].z + _864;
    float _2564 = inversesqrt(dot(vec3(_2558, _2559, _2560), vec3(_2558, _2559, _2560)));
    float _2565 = _2564 * _2558;
    float _2566 = _2564 * _2559;
    float _2567 = _2564 * _2560;
    float _2568 = dot(vec3(_782, _783, _784), vec3(cbLight._m0[_2295].xyz));
    float _4681 = isnan(0.0) ? _2568 : (isnan(_2568) ? 0.0 : max(_2568, 0.0));
    float _2571 = isnan(1.0) ? _4681 : (isnan(_4681) ? 1.0 : min(_4681, 1.0));
    float _4692 = isnan(0.0) ? _961 : (isnan(_961) ? 0.0 : max(_961, 0.0));
    float _2572 = isnan(1.0) ? _4692 : (isnan(_4692) ? 1.0 : min(_4692, 1.0));
    float _2573 = dot(vec3(_782, _783, _784), vec3(_2565, _2566, _2567));
    float _4703 = isnan(0.0) ? _2573 : (isnan(_2573) ? 0.0 : max(_2573, 0.0));
    float _2576 = isnan(1.0) ? _4703 : (isnan(_4703) ? 1.0 : min(_4703, 1.0));
    float _2577 = dot(vec3(cbLight._m0[_2295].xyz), vec3(_2565, _2566, _2567));
    float _4714 = isnan(0.0) ? _2577 : (isnan(_2577) ? 0.0 : max(_2577, 0.0));
    float _2581 = _2557 * _2557;
    float _2585 = ((_2576 * _2576) * (_2581 + (-1.0))) + 1.0;
    float _2593 = exp2(log2(1.0 - (isnan(1.0) ? _4714 : (isnan(_4714) ? 1.0 : min(_4714, 1.0)))) * 5.0);
    float _2594 = 0.959999978542327880859375 - _942;
    float _2596 = 0.959999978542327880859375 - _943;
    float _2597 = 0.959999978542327880859375 - _944;
    float _2604 = 1.0 - _2557;
    float _2615 = (0.5 / (((_2572 * ((_2571 * _2604) + _2557)) + 9.9999999392252902907785028219223e-09) + (((_2572 * _2604) + _2557) * _2571))) * _2571;
    float _4725 = isnan(0.0) ? _2615 : (isnan(_2615) ? 0.0 : max(_2615, 0.0));
    float _2617 = (isnan(1.0) ? _4725 : (isnan(_4725) ? 1.0 : min(_4725, 1.0))) * (_2581 / ((_2585 * _2585) * 3.141590118408203125));
    uint _2631 = _2295 + 9u;
    float _2642 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2336].w)) * _785) * 0.949999988079071044921875);
    float _2643 = _2642 * _2642;
    float _2644 = cbLight._m0[_2336].x + _862;
    float _2645 = cbLight._m0[_2336].y + _863;
    float _2646 = cbLight._m0[_2336].z + _864;
    float _2650 = inversesqrt(dot(vec3(_2644, _2645, _2646), vec3(_2644, _2645, _2646)));
    float _2651 = _2650 * _2644;
    float _2652 = _2650 * _2645;
    float _2653 = _2650 * _2646;
    float _2654 = dot(vec3(_782, _783, _784), vec3(cbLight._m0[_2336].xyz));
    float _4736 = isnan(0.0) ? _2654 : (isnan(_2654) ? 0.0 : max(_2654, 0.0));
    float _2657 = isnan(1.0) ? _4736 : (isnan(_4736) ? 1.0 : min(_4736, 1.0));
    float _2658 = dot(vec3(_782, _783, _784), vec3(_2651, _2652, _2653));
    float _4747 = isnan(0.0) ? _2658 : (isnan(_2658) ? 0.0 : max(_2658, 0.0));
    float _2661 = isnan(1.0) ? _4747 : (isnan(_4747) ? 1.0 : min(_4747, 1.0));
    float _2662 = dot(vec3(cbLight._m0[_2336].xyz), vec3(_2651, _2652, _2653));
    float _4758 = isnan(0.0) ? _2662 : (isnan(_2662) ? 0.0 : max(_2662, 0.0));
    float _2666 = _2643 * _2643;
    float _2670 = ((_2661 * _2661) * (_2666 + (-1.0))) + 1.0;
    float _2677 = exp2(log2(1.0 - (isnan(1.0) ? _4758 : (isnan(_4758) ? 1.0 : min(_4758, 1.0)))) * 5.0);
    float _2684 = 1.0 - _2643;
    float _2694 = (0.5 / (((_2572 * ((_2657 * _2684) + _2643)) + 9.9999999392252902907785028219223e-09) + (((_2572 * _2684) + _2643) * _2657))) * _2657;
    float _4769 = isnan(0.0) ? _2694 : (isnan(_2694) ? 0.0 : max(_2694, 0.0));
    float _2696 = (isnan(1.0) ? _4769 : (isnan(_4769) ? 1.0 : min(_4769, 1.0))) * (_2666 / ((_2670 * _2670) * 3.141590118408203125));
    float _2706 = (((((_2677 * _2594) + _945) * cbLight._m0[_2631].x) * _2696) * _2318) + ((((cbLight._m0[_2543].x * _2284) * ((_2593 * _2594) + _945)) * _2617) * _2332);
    float _2707 = (((((_2677 * _2596) + _947) * cbLight._m0[_2631].y) * _2696) * _2318) + ((((cbLight._m0[_2543].y * _2286) * ((_2593 * _2596) + _947)) * _2617) * _2332);
    float _2708 = (((((_2677 * _2597) + _948) * cbLight._m0[_2631].z) * _2696) * _2318) + ((((cbLight._m0[_2543].z * _2288) * ((_2593 * _2597) + _948)) * _2617) * _2332);
    float _2764;
    float _2766;
    float _2768;
    if (_2372)
    {
        _2764 = _2706;
        _2766 = _2707;
        _2768 = _2708;
    }
    else
    {
        uint _2770 = _2295 + 2u;
        uint _2774 = _2295 + 10u;
        float _2788 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2770].w)) * _785) * 0.949999988079071044921875);
        float _2789 = _2788 * _2788;
        float _2790 = cbLight._m0[_2770].x + _862;
        float _2791 = cbLight._m0[_2770].y + _863;
        float _2792 = cbLight._m0[_2770].z + _864;
        float _2796 = inversesqrt(dot(vec3(_2790, _2791, _2792), vec3(_2790, _2791, _2792)));
        float _2797 = _2796 * _2790;
        float _2798 = _2796 * _2791;
        float _2799 = _2796 * _2792;
        float _2800 = dot(vec3(_782, _783, _784), vec3(cbLight._m0[_2770].xyz));
        float _4780 = isnan(0.0) ? _2800 : (isnan(_2800) ? 0.0 : max(_2800, 0.0));
        float _2803 = isnan(1.0) ? _4780 : (isnan(_4780) ? 1.0 : min(_4780, 1.0));
        float _2804 = dot(vec3(_782, _783, _784), vec3(_2797, _2798, _2799));
        float _4791 = isnan(0.0) ? _2804 : (isnan(_2804) ? 0.0 : max(_2804, 0.0));
        float _2807 = isnan(1.0) ? _4791 : (isnan(_4791) ? 1.0 : min(_4791, 1.0));
        float _2808 = dot(vec3(cbLight._m0[_2770].xyz), vec3(_2797, _2798, _2799));
        float _4802 = isnan(0.0) ? _2808 : (isnan(_2808) ? 0.0 : max(_2808, 0.0));
        float _2812 = _2789 * _2789;
        float _2816 = ((_2807 * _2807) * (_2812 + (-1.0))) + 1.0;
        float _2823 = exp2(log2(1.0 - (isnan(1.0) ? _4802 : (isnan(_4802) ? 1.0 : min(_4802, 1.0)))) * 5.0);
        float _2830 = 1.0 - _2789;
        float _2840 = (0.5 / (((_2572 * ((_2803 * _2830) + _2789)) + 9.9999999392252902907785028219223e-09) + (((_2572 * _2830) + _2789) * _2803))) * _2803;
        float _4813 = isnan(0.0) ? _2840 : (isnan(_2840) ? 0.0 : max(_2840, 0.0));
        float _2842 = (isnan(1.0) ? _4813 : (isnan(_4813) ? 1.0 : min(_4813, 1.0))) * (_2812 / ((_2816 * _2816) * 3.141590118408203125));
        float _2843 = isnan(1.0) ? _2310 : (isnan(_2310) ? 1.0 : min(_2310, 1.0));
        _2764 = (((((_2823 * _2594) + _945) * cbLight._m0[_2774].x) * _2842) * _2843) + _2706;
        _2766 = (((((_2823 * _2596) + _947) * cbLight._m0[_2774].y) * _2842) * _2843) + _2707;
        _2768 = (((((_2823 * _2597) + _948) * cbLight._m0[_2774].z) * _2842) * _2843) + _2708;
    }
    float _2874;
    float _2876;
    float _2878;
    if (_2481)
    {
        _2874 = _2764;
        _2876 = _2766;
        _2878 = _2768;
    }
    else
    {
        uint _2885 = _2295 + 3u;
        uint _2889 = _2295 + 11u;
        float _2903 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2885].w)) * _785) * 0.949999988079071044921875);
        float _2904 = _2903 * _2903;
        float _2905 = cbLight._m0[_2885].x + _862;
        float _2906 = cbLight._m0[_2885].y + _863;
        float _2907 = cbLight._m0[_2885].z + _864;
        float _2911 = inversesqrt(dot(vec3(_2905, _2906, _2907), vec3(_2905, _2906, _2907)));
        float _2912 = _2911 * _2905;
        float _2913 = _2911 * _2906;
        float _2914 = _2911 * _2907;
        float _2915 = dot(vec3(_782, _783, _784), vec3(cbLight._m0[_2885].xyz));
        float _4829 = isnan(0.0) ? _2915 : (isnan(_2915) ? 0.0 : max(_2915, 0.0));
        float _2918 = isnan(1.0) ? _4829 : (isnan(_4829) ? 1.0 : min(_4829, 1.0));
        float _2919 = dot(vec3(_782, _783, _784), vec3(_2912, _2913, _2914));
        float _4840 = isnan(0.0) ? _2919 : (isnan(_2919) ? 0.0 : max(_2919, 0.0));
        float _2922 = isnan(1.0) ? _4840 : (isnan(_4840) ? 1.0 : min(_4840, 1.0));
        float _2923 = dot(vec3(cbLight._m0[_2885].xyz), vec3(_2912, _2913, _2914));
        float _4851 = isnan(0.0) ? _2923 : (isnan(_2923) ? 0.0 : max(_2923, 0.0));
        float _2927 = _2904 * _2904;
        float _2931 = ((_2922 * _2922) * (_2927 + (-1.0))) + 1.0;
        float _2938 = exp2(log2(1.0 - (isnan(1.0) ? _4851 : (isnan(_4851) ? 1.0 : min(_4851, 1.0)))) * 5.0);
        float _2945 = 1.0 - _2904;
        float _2955 = (0.5 / (((_2572 * ((_2918 * _2945) + _2904)) + 9.9999999392252902907785028219223e-09) + (((_2572 * _2945) + _2904) * _2918))) * _2918;
        float _4862 = isnan(0.0) ? _2955 : (isnan(_2955) ? 0.0 : max(_2955, 0.0));
        float _2957 = (isnan(1.0) ? _4862 : (isnan(_4862) ? 1.0 : min(_4862, 1.0))) * (_2927 / ((_2931 * _2931) * 3.141590118408203125));
        float _2958 = isnan(1.0) ? _2311 : (isnan(_2311) ? 1.0 : min(_2311, 1.0));
        _2874 = (((((_2938 * _2594) + _945) * cbLight._m0[_2889].x) * _2957) * _2958) + _2764;
        _2876 = (((((_2938 * _2596) + _947) * cbLight._m0[_2889].y) * _2957) * _2958) + _2766;
        _2878 = (((((_2938 * _2597) + _948) * cbLight._m0[_2889].z) * _2957) * _2958) + _2768;
    }
    float _3024;
    float _3026;
    float _3028;
    float _3030;
    float _3032;
    float _3034;
    if (_2293.y == 0u)
    {
        uvec4 _2979 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2980 = _2979.x;
        uint _2991 = uint((float(_2979.y) * floor(float(uint(cbSceneParam._m0[85u].y * _883) / _2980))) + floor(float(uint(cbSceneParam._m0[85u].x * _882) / _2980)));
        float _3001 = (log2(_2071 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3002 = isnan(0.0) ? _3001 : (isnan(_3001) ? 0.0 : max(_3001, 0.0));
        uint _3005 = uint(isnan(14.0) ? _3002 : (isnan(_3002) ? 14.0 : min(_3002, 14.0)));
        uvec4 _3010 = texelFetch(g_lightClusterGridBuffer, int(((_3005 << 2u) + (_2991 << 6u)) >> 2u));
        uint _3011 = _3010.x;
        uint _3012 = _2979.z;
        float _3091;
        float _3093;
        float _3095;
        float _3097;
        float _3099;
        float _3101;
        if (((((1u << ((_3012 >> 4u) & 15u)) + 4294967295u) & _3011) == 0u) || ((_3012 & 240u) == 0u))
        {
            _3091 = 0.0;
            _3093 = 0.0;
            _3095 = 0.0;
            _3097 = 0.0;
            _3099 = 0.0;
            _3101 = 0.0;
        }
        else
        {
            float _3092;
            float _3094;
            float _3096;
            float _3098;
            float _3100;
            float _3102;
            float _3243 = 0.0;
            float _3244 = 0.0;
            float _3245 = 0.0;
            float _3246 = 0.0;
            float _3247 = 0.0;
            float _3248 = 0.0;
            uint _3249 = 0u;
            uint _3258;
            bool _3259;
            for (;;)
            {
                _3258 = texelFetch(g_lightClassification, int((((_3005 << 5u) + (_2991 << 9u)) + (_3249 << 2u)) >> 2u)).x;
                _3259 = _3258 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3259)
                {
                    frontier_phi_71_pred = _3248;
                    frontier_phi_71_pred_1 = _3247;
                    frontier_phi_71_pred_2 = _3246;
                    frontier_phi_71_pred_3 = _3245;
                    frontier_phi_71_pred_4 = _3244;
                    frontier_phi_71_pred_5 = _3243;
                }
                else
                {
                    float _3388;
                    float _3389;
                    float _3390;
                    float _3391;
                    float _3392;
                    float _3393;
                    uint _3394;
                    _3388 = _3243;
                    _3389 = _3244;
                    _3390 = _3245;
                    _3391 = _3246;
                    _3392 = _3247;
                    _3393 = _3248;
                    _3394 = _3258;
                    float _3315;
                    float _3316;
                    float _3317;
                    float _3318;
                    float _3319;
                    float _3320;
                    for (;;)
                    {
                        uint _3398 = uint(findLSB(_3394)) + (_3249 << 5u);
                        uint _3395 = (_3394 + 4294967295u) & _3394;
                        uint _3400 = _3398 * 48u;
                        vec4 _3414 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3400)).x, texelFetch(g_PointLightRenderingBuffer, int(_3400 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3400 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3400 + 3u)).x));
                        uint _3420 = (_3398 * 48u) + 4u;
                        vec4 _3433 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3420)).x, texelFetch(g_PointLightRenderingBuffer, int(_3420 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3420 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3420 + 3u)).x));
                        uint _3439 = (_3398 * 48u) + 8u;
                        vec3 _3450 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3439)).x, texelFetch(g_PointLightRenderingBuffer, int(_3439 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3439 + 2u)).x));
                        float _3454 = _3414.x - _2069;
                        float _3455 = _3414.y - _2070;
                        float _3456 = _3414.z - _2071;
                        float _3457 = dot(vec3(_3454, _3455, _3456), vec3(_3454, _3455, _3456));
                        float _3460 = inversesqrt(_3457);
                        float _3461 = _3460 * _3454;
                        float _3462 = _3460 * _3455;
                        float _3463 = _3460 * _3456;
                        float _3464 = dot(vec3(_901, _904, _907), vec3(_3461, _3462, _3463));
                        float _3469 = 1.0 - (_3457 * _3414.w);
                        float _4888 = isnan(0.0) ? _3469 : (isnan(_3469) ? 0.0 : max(_3469, 0.0));
                        float _3470 = isnan(1.0) ? _4888 : (isnan(_4888) ? 1.0 : min(_4888, 1.0));
                        float _3471 = sqrt(_3457) * _3433.w;
                        float _3474 = 1.39999997615814208984375 / (_3471 + 1.39999997615814208984375);
                        float _3475 = _3474 * _3474;
                        float _3478 = ((1.0 - _3475) * _3464) + _3475;
                        float _3481 = _3471 * _3471;
                        float _3485 = ((isnan(0.0) ? _3478 : (isnan(_3478) ? 0.0 : max(_3478, 0.0))) * _3470) / ((_3481 * 0.699999988079071044921875) + 1.0);
                        float _3489 = (-0.0) - _2069;
                        float _3490 = (-0.0) - _2070;
                        float _3491 = (-0.0) - _2071;
                        float _3495 = inversesqrt(dot(vec3(_3489, _3490, _3491), vec3(_3489, _3490, _3491)));
                        float _3496 = _3495 * _3489;
                        float _3497 = _3495 * _3490;
                        float _3498 = _3495 * _3491;
                        float _3505 = exp2(log2(1.0 / ((_3481 * 3.5) + 5.0)) * 0.25);
                        float _3506 = 1.0 - _976;
                        float _3513 = sqrt(1.0 - ((1.0 - (_3506 * _3506)) * (1.0 - (_3505 * _3505))));
                        float _3514 = _3513 * _3513;
                        float _3515 = _3514 * _3514;
                        float _3516 = _3496 + _3461;
                        float _3517 = _3497 + _3462;
                        float _3518 = _3498 + _3463;
                        float _3522 = inversesqrt(dot(vec3(_3516, _3517, _3518), vec3(_3516, _3517, _3518)));
                        float _3526 = dot(vec3(_901, _904, _907), vec3(_3496, _3497, _3498));
                        float _4904 = isnan(0.0) ? _3526 : (isnan(_3526) ? 0.0 : max(_3526, 0.0));
                        float _3529 = isnan(1.0) ? _4904 : (isnan(_4904) ? 1.0 : min(_4904, 1.0));
                        float _3530 = dot(vec3(_901, _904, _907), vec3(_3522 * _3516, _3522 * _3517, _3522 * _3518));
                        float _4915 = isnan(0.0) ? _3530 : (isnan(_3530) ? 0.0 : max(_3530, 0.0));
                        float _3533 = isnan(1.0) ? _4915 : (isnan(_4915) ? 1.0 : min(_4915, 1.0));
                        float _3537 = ((_3533 * _3533) * (_3515 + (-1.0))) + 1.0;
                        float _3538 = _3474 * _3514;
                        float _3539 = _3538 * _3538;
                        float _3542 = ((1.0 - _3539) * _3464) + _3539;
                        float _4926 = isnan(0.0) ? _3542 : (isnan(_3542) ? 0.0 : max(_3542, 0.0));
                        float _3543 = isnan(1.0) ? _4926 : (isnan(_4926) ? 1.0 : min(_4926, 1.0));
                        float _3544 = 1.0 - _3514;
                        float _3554 = (0.5 / (((_3543 * ((_3529 * _3544) + _3514)) + 9.9999999392252902907785028219223e-09) + (((_3543 * _3544) + _3514) * _3529))) * _3543;
                        float _4937 = isnan(0.0) ? _3554 : (isnan(_3554) ? 0.0 : max(_3554, 0.0));
                        float _3565 = (((_3515 * 3.1415927410125732421875) * (isnan(1.0) ? _4937 : (isnan(_4937) ? 1.0 : min(_4937, 1.0)))) / ((_3537 * _3537) * ((_3481 * 2.1991131305694580078125) + 3.141590118408203125))) * _3470;
                        _3318 = (_3485 * _3433.x) + _3391;
                        _3319 = (_3485 * _3433.y) + _3392;
                        _3320 = (_3485 * _3433.z) + _3393;
                        _3315 = (_3565 * _3450.x) + _3388;
                        _3316 = (_3565 * _3450.y) + _3389;
                        _3317 = (_3565 * _3450.z) + _3390;
                        if (_3395 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3388 = _3315;
                            _3389 = _3316;
                            _3390 = _3317;
                            _3391 = _3318;
                            _3392 = _3319;
                            _3393 = _3320;
                            _3394 = _3395;
                        }
                    }
                    frontier_phi_71_pred = _3320;
                    frontier_phi_71_pred_1 = _3319;
                    frontier_phi_71_pred_2 = _3318;
                    frontier_phi_71_pred_3 = _3317;
                    frontier_phi_71_pred_4 = _3316;
                    frontier_phi_71_pred_5 = _3315;
                }
                _3102 = frontier_phi_71_pred;
                _3100 = frontier_phi_71_pred_1;
                _3098 = frontier_phi_71_pred_2;
                _3096 = frontier_phi_71_pred_3;
                _3094 = frontier_phi_71_pred_4;
                _3092 = frontier_phi_71_pred_5;
                uint _3250 = _3249 + 1u;
                if (_3250 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3243 = _3092;
                    _3244 = _3094;
                    _3245 = _3096;
                    _3246 = _3098;
                    _3247 = _3100;
                    _3248 = _3102;
                    _3249 = _3250;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3091 = _3092;
            _3093 = _3094;
            _3095 = _3096;
            _3097 = _3098;
            _3099 = _3100;
            _3101 = _3102;
        }
        uvec4 _3105 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3106 = _3105.z;
        uint _3108 = (_3106 >> 8u) & 15u;
        float _3211;
        float _3213;
        float _3215;
        float _3217;
        float _3219;
        float _3221;
        if (((4294967295u << _3108) & _3011) == 0u)
        {
            _3211 = _3091;
            _3213 = _3093;
            _3215 = _3095;
            _3217 = _3097;
            _3219 = _3099;
            _3221 = _3101;
        }
        else
        {
            float _3236 = inversesqrt(dot(vec3(_2069, _2070, _2071), vec3(_2069, _2070, _2071)));
            float _3237 = _3236 * _2069;
            float _3238 = _3236 * _2070;
            float _3239 = _3236 * _2071;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3108 < ((_3106 >> 12u) & 15u))
            {
                float _3212;
                float _3214;
                float _3216;
                float _3218;
                float _3220;
                float _3222;
                float _3371 = _3091;
                float _3372 = _3093;
                float _3373 = _3095;
                float _3374 = _3097;
                float _3375 = _3099;
                float _3376 = _3101;
                uint _3377 = _3108;
                uint _3386;
                bool _3387;
                for (;;)
                {
                    _3386 = texelFetch(g_lightClassification, int((((_3005 << 5u) + (_2991 << 9u)) + (_3377 << 2u)) >> 2u)).x;
                    _3387 = _3386 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3387)
                    {
                        frontier_phi_82_pred = _3376;
                        frontier_phi_82_pred_1 = _3375;
                        frontier_phi_82_pred_2 = _3374;
                        frontier_phi_82_pred_3 = _3373;
                        frontier_phi_82_pred_4 = _3372;
                        frontier_phi_82_pred_5 = _3371;
                    }
                    else
                    {
                        float _3579;
                        float _3580;
                        float _3581;
                        float _3582;
                        float _3583;
                        float _3584;
                        float _3873;
                        float _3874;
                        float _3875;
                        float _3876;
                        float _3877;
                        float _3878;
                        float _3592 = _3371;
                        float _3593 = _3372;
                        float _3594 = _3373;
                        float _3595 = _3374;
                        float _3596 = _3375;
                        float _3597 = _3376;
                        uint _3598 = _3386;
                        uint _3599;
                        vec4 _3624;
                        float _3625;
                        vec4 _3640;
                        vec3 _3652;
                        vec4 _3667;
                        vec4 _3682;
                        float _3729;
                        bool _3730;
                        for (;;)
                        {
                            uint _3609 = ((_3377 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3598));
                            _3599 = (_3598 + 4294967295u) & _3598;
                            uint _3611 = _3609 * 40u;
                            _3624 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3611)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3611 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3611 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3611 + 3u)).x));
                            _3625 = _3624.w;
                            uint _3627 = (_3609 * 40u) + 4u;
                            _3640 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3627)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3627 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3627 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3627 + 3u)).x));
                            uint _3642 = (_3609 * 40u) + 8u;
                            _3652 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3642)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3642 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3642 + 2u)).x));
                            uint _3654 = (_3609 * 40u) + 16u;
                            _3667 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3654)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3654 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3654 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3654 + 3u)).x));
                            uint _3669 = (_3609 * 40u) + 20u;
                            _3682 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3669)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3669 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3669 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3669 + 3u)).x));
                            uint _3685 = (_3609 * 40u) + 24u;
                            vec4 _3698 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3685)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3685 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3685 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3685 + 3u)).x));
                            uint _3704 = (_3609 * 40u) + 28u;
                            vec4 _3717 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3704)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3704 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3704 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3704 + 3u)).x));
                            _3729 = fma(_2071, _3717.z, fma(_2070, _3717.y, _3717.x * _2069)) + _3717.w;
                            _3730 = !((fma(_2071, _3698.z, fma(_2070, _3698.y, _3698.x * _2069)) + _3698.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3730)
                            {
                                float _3757 = _3624.x - _2069;
                                float _3758 = _3624.y - _2070;
                                float _3759 = _3624.z - _2071;
                                float _3760 = dot(vec3(_3757, _3758, _3759), vec3(_3757, _3758, _3759));
                                float _3763 = inversesqrt(_3760);
                                float _3764 = _3763 * _3757;
                                float _3765 = _3763 * _3758;
                                float _3766 = _3763 * _3759;
                                float _3770 = 1.0 - (_3760 / (_3625 * _3625));
                                float _4948 = isnan(0.0) ? _3770 : (isnan(_3770) ? 0.0 : max(_3770, 0.0));
                                float _3771 = isnan(1.0) ? _4948 : (isnan(_4948) ? 1.0 : min(_4948, 1.0));
                                float _3775 = sqrt(_3760) * _3640.w;
                                float _3777 = 1.39999997615814208984375 / (_3775 + 1.39999997615814208984375);
                                float _3778 = _3777 * _3777;
                                float _3781 = ((1.0 - _3778) * dot(vec3(_3764, _3765, _3766), vec3(_901, _904, _907))) + _3778;
                                float _3784 = _3775 * _3775;
                                float _3788 = (fma(_2071, _3667.z, fma(_2070, _3667.y, _3667.x * _2069)) + _3667.w) / _3729;
                                float _3789 = (fma(_2071, _3682.z, fma(_2070, _3682.y, _3682.x * _2069)) + _3682.w) / _3729;
                                float _3793 = 1.0 - dot(vec2(_3788, _3789), vec2(_3788, _3789));
                                float _4964 = isnan(0.0) ? _3793 : (isnan(_3793) ? 0.0 : max(_3793, 0.0));
                                float _3794 = isnan(1.0) ? _4964 : (isnan(_4964) ? 1.0 : min(_4964, 1.0));
                                float _3795 = _3794 * (((isnan(0.0) ? _3781 : (isnan(_3781) ? 0.0 : max(_3781, 0.0))) * _3771) / ((_3784 * 0.699999988079071044921875) + 1.0));
                                float _3807 = exp2(log2(1.0 / ((_3784 * 3.5) + 5.0)) * 0.25);
                                float _3808 = 1.0 - _976;
                                float _3815 = sqrt(1.0 - ((1.0 - (_3808 * _3808)) * (1.0 - (_3807 * _3807))));
                                float _3816 = _3815 * _3815;
                                float _3817 = _3816 * _3816;
                                float _3818 = _3764 - _3237;
                                float _3819 = _3765 - _3238;
                                float _3820 = _3766 - _3239;
                                float _3824 = inversesqrt(dot(vec3(_3818, _3819, _3820), vec3(_3818, _3819, _3820)));
                                float _3828 = dot(vec3(_901, _904, _907), vec3((-0.0) - _3237, (-0.0) - _3238, (-0.0) - _3239));
                                float _4975 = isnan(0.0) ? _3828 : (isnan(_3828) ? 0.0 : max(_3828, 0.0));
                                float _3831 = isnan(1.0) ? _4975 : (isnan(_4975) ? 1.0 : min(_4975, 1.0));
                                float _3832 = dot(vec3(_901, _904, _907), vec3(_3824 * _3818, _3824 * _3819, _3824 * _3820));
                                float _4986 = isnan(0.0) ? _3832 : (isnan(_3832) ? 0.0 : max(_3832, 0.0));
                                float _3835 = isnan(1.0) ? _4986 : (isnan(_4986) ? 1.0 : min(_4986, 1.0));
                                float _3839 = ((_3835 * _3835) * (_3817 + (-1.0))) + 1.0;
                                float _3840 = _3777 * _3816;
                                float _3841 = _3840 * _3840;
                                float _3847 = ((1.0 - _3841) * dot(vec3(_901, _904, _907), vec3(_3764, _3765, _3766))) + _3841;
                                float _4997 = isnan(0.0) ? _3847 : (isnan(_3847) ? 0.0 : max(_3847, 0.0));
                                float _3848 = isnan(1.0) ? _4997 : (isnan(_4997) ? 1.0 : min(_4997, 1.0));
                                float _3849 = 1.0 - _3816;
                                float _3859 = (0.5 / (((_3848 * ((_3831 * _3849) + _3816)) + 9.9999999392252902907785028219223e-09) + (((_3848 * _3849) + _3816) * _3831))) * _3848;
                                float _5008 = isnan(0.0) ? _3859 : (isnan(_3859) ? 0.0 : max(_3859, 0.0));
                                float _3869 = (_3794 * _3771) * (((_3817 * 3.1415927410125732421875) * (isnan(1.0) ? _5008 : (isnan(_5008) ? 1.0 : min(_5008, 1.0)))) / ((_3839 * _3839) * ((_3784 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3795 * _3640.z;
                                frontier_phi_88_pred_1 = _3795 * _3640.y;
                                frontier_phi_88_pred_2 = _3795 * _3640.x;
                                frontier_phi_88_pred_3 = _3869 * _3652.z;
                                frontier_phi_88_pred_4 = _3869 * _3652.y;
                                frontier_phi_88_pred_5 = _3869 * _3652.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3878 = frontier_phi_88_pred;
                            _3877 = frontier_phi_88_pred_1;
                            _3876 = frontier_phi_88_pred_2;
                            _3875 = frontier_phi_88_pred_3;
                            _3874 = frontier_phi_88_pred_4;
                            _3873 = frontier_phi_88_pred_5;
                            _3582 = _3876 + _3595;
                            _3583 = _3877 + _3596;
                            _3584 = _3878 + _3597;
                            _3579 = _3873 + _3592;
                            _3580 = _3874 + _3593;
                            _3581 = _3875 + _3594;
                            if (_3599 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3592 = _3579;
                                _3593 = _3580;
                                _3594 = _3581;
                                _3595 = _3582;
                                _3596 = _3583;
                                _3597 = _3584;
                                _3598 = _3599;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3584;
                        frontier_phi_82_pred_1 = _3583;
                        frontier_phi_82_pred_2 = _3582;
                        frontier_phi_82_pred_3 = _3581;
                        frontier_phi_82_pred_4 = _3580;
                        frontier_phi_82_pred_5 = _3579;
                    }
                    _3222 = frontier_phi_82_pred;
                    _3220 = frontier_phi_82_pred_1;
                    _3218 = frontier_phi_82_pred_2;
                    _3216 = frontier_phi_82_pred_3;
                    _3214 = frontier_phi_82_pred_4;
                    _3212 = frontier_phi_82_pred_5;
                    uint _3378 = _3377 + 1u;
                    if (_3378 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3371 = _3212;
                        _3372 = _3214;
                        _3373 = _3216;
                        _3374 = _3218;
                        _3375 = _3220;
                        _3376 = _3222;
                        _3377 = _3378;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3218;
                frontier_phi_63_64_ladder_1 = _3222;
                frontier_phi_63_64_ladder_2 = _3220;
                frontier_phi_63_64_ladder_3 = _3216;
                frontier_phi_63_64_ladder_4 = _3214;
                frontier_phi_63_64_ladder_5 = _3212;
            }
            else
            {
                frontier_phi_63_64_ladder = _3097;
                frontier_phi_63_64_ladder_1 = _3101;
                frontier_phi_63_64_ladder_2 = _3099;
                frontier_phi_63_64_ladder_3 = _3095;
                frontier_phi_63_64_ladder_4 = _3093;
                frontier_phi_63_64_ladder_5 = _3091;
            }
            _3211 = frontier_phi_63_64_ladder_5;
            _3213 = frontier_phi_63_64_ladder_4;
            _3215 = frontier_phi_63_64_ladder_3;
            _3217 = frontier_phi_63_64_ladder;
            _3219 = frontier_phi_63_64_ladder_2;
            _3221 = frontier_phi_63_64_ladder_1;
        }
        float _3226 = isnan(1.0) ? _960 : (isnan(_960) ? 1.0 : min(_960, 1.0));
        _3024 = (_3226 * _3217) + _2536;
        _3026 = (_3226 * _3219) + _2538;
        _3028 = (_3226 * _3221) + _2540;
        _3030 = ((_3211 * _945) * _3226) + _2874;
        _3032 = ((_3213 * _947) * _3226) + _2876;
        _3034 = ((_3215 * _948) * _3226) + _2878;
    }
    else
    {
        _3024 = _2536;
        _3026 = _2538;
        _3028 = _2540;
        _3030 = _2874;
        _3032 = _2876;
        _3034 = _2878;
    }
    float _5024 = isnan(0.0) ? _935 : (isnan(_935) ? 0.0 : max(_935, 0.0));
    float _5035 = isnan(0.0) ? _936 : (isnan(_936) ? 0.0 : max(_936, 0.0));
    float _5046 = isnan(0.0) ? _937 : (isnan(_937) ? 0.0 : max(_937, 0.0));
    float _3051 = ((isnan(1.0) ? _5024 : (isnan(_5024) ? 1.0 : min(_5024, 1.0))) * (_3024 + ((isnan(0.0) ? _1722 : (isnan(_1722) ? 0.0 : max(_1722, 0.0))) * _960))) + ((_3030 + ((isnan(0.0) ? _2016 : (isnan(_2016) ? 0.0 : max(_2016, 0.0))) * _1801)) * cbPerFrame._m0[3u].x);
    float _3052 = ((isnan(1.0) ? _5035 : (isnan(_5035) ? 1.0 : min(_5035, 1.0))) * (_3026 + ((isnan(0.0) ? _1725 : (isnan(_1725) ? 0.0 : max(_1725, 0.0))) * _960))) + ((_3032 + ((isnan(0.0) ? _2019 : (isnan(_2019) ? 0.0 : max(_2019, 0.0))) * _1801)) * cbPerFrame._m0[3u].x);
    float _3053 = ((isnan(1.0) ? _5046 : (isnan(_5046) ? 1.0 : min(_5046, 1.0))) * (_3028 + ((isnan(0.0) ? _1728 : (isnan(_1728) ? 0.0 : max(_1728, 0.0))) * _960))) + ((_3034 + ((isnan(0.0) ? _2022 : (isnan(_2022) ? 0.0 : max(_2022, 0.0))) * _1801)) * cbPerFrame._m0[3u].x);
    uint _3054 = _920 + 6u;
    float _3062 = _882 / cbSceneParam._m0[86u].x;
    float _3063 = _883 / cbSceneParam._m0[86u].y;
    vec4 _3077 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3062, _3063, (log2((isnan(cbSceneParam._m0[77u].w) ? _805 : (isnan(_805) ? cbSceneParam._m0[77u].w : min(_805, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3079 = _3077.x;
    float _3080 = _3077.y;
    float _3081 = _3077.z;
    float _3082 = _3077.w;
    float _3153;
    float _3155;
    float _3157;
    float _3159;
    if (_805 > cbSceneParam._m0[78u].w)
    {
        float _3116 = isnan(_805) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _805 : min(cbSceneParam._m0[80u].w, _805));
        float _3117 = _3116 / _805;
        float _3128 = _3117 * _855;
        float _3129 = _856 * _3117;
        float _3130 = (-0.0) - _3129;
        float _3131 = _3117 * _857;
        float _3133 = (cbSceneParam._m0[77u].w * _3130) / _3116;
        float _3134 = _3133 + cbSceneParam._m0[79u].w;
        float _3135 = cbSceneParam._m0[79u].w - _3129;
        float _3141 = sqrt(((_3128 * _3128) + (_3129 * _3129)) + (_3131 * _3131));
        float _3144 = (1.0 - (cbSceneParam._m0[77u].w / _3116)) * _3141;
        float _3149 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3151 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3328;
        if (abs((_3130 - _3133) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3328 = ((((_3134 > 0.0) ? exp2(_3149 * _3134) : (2.0 - exp2(_3151 * _3134))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3144;
        }
        else
        {
            float _3272 = 1.0 / cbSceneParam._m0[80u].x;
            float _3273 = isnan(_3135) ? _3134 : (isnan(_3134) ? _3135 : max(_3134, _3135));
            float _3274 = isnan(_3135) ? _3134 : (isnan(_3134) ? _3135 : min(_3134, _3135));
            float _3283 = isnan(0.0) ? _3273 : (isnan(_3273) ? 0.0 : min(_3273, 0.0));
            float _3284 = isnan(0.0) ? _3274 : (isnan(_3274) ? 0.0 : min(_3274, 0.0));
            _3328 = ((abs(_3141 / _3130) * cbSceneParam._m0[80u].y) * ((((_3283 - _3284) * 2.0) - ((exp2(_3149 * (isnan(0.0) ? _3273 : (isnan(_3273) ? 0.0 : max(_3273, 0.0)))) - exp2(_3149 * (isnan(0.0) ? _3274 : (isnan(_3274) ? 0.0 : max(_3274, 0.0))))) * _3272)) - ((exp2(_3151 * _3283) - exp2(_3151 * _3284)) * _3272))) + (_3144 * cbSceneParam._m0[80u].z);
        }
        vec4 _3330 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3062, _3063, 1.0), 0.0);
        float _3339 = exp2((_3328 * (-1.44269502162933349609375)) * (1.0 - _3330.w));
        float _3340 = log2(_3339);
        float _3356 = log2(_3082);
        _3153 = (exp2(_3356 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3340 * cbSceneParam._m0[78u].x)) * _3330.x) / cbSceneParam._m0[78u].x)) + _3079;
        _3155 = (exp2(_3356 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3340 * cbSceneParam._m0[78u].y)) * _3330.y) / cbSceneParam._m0[78u].y)) + _3080;
        _3157 = (exp2(_3356 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3340 * cbSceneParam._m0[78u].z)) * _3330.z) / cbSceneParam._m0[78u].z)) + _3081;
        _3159 = _3339 * _3082;
    }
    else
    {
        _3153 = _3079;
        _3155 = _3080;
        _3157 = _3081;
        _3159 = _3082;
    }
    bool _3366;
    vec4 _3169;
    vec4 _3191;
    float _3193;
    float _3197;
    float _3198;
    float _3199;
    float _3200;
    bool _3210;
    for (;;)
    {
        _3169 = cbMatDynParam._m0[0u];
        float _3171 = roundEven(_3169.y);
        bool _3172 = _3171 == 3.0;
        float _3173 = log2(_3159);
        float _3180 = exp2(_3173 * cbSceneParam._m0[78u].x) * _3051;
        float _3181 = exp2(_3173 * cbSceneParam._m0[78u].y) * _3052;
        float _3182 = exp2(_3173 * cbSceneParam._m0[78u].z) * _3053;
        float _3189 = _871 + (-0.5);
        _3191 = cbMtdParam._m0[1u];
        _3193 = _3191.y * _3189;
        float _3196 = (_3171 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3197 = _3196 * (_3172 ? _3180 : (_3180 + (cbSceneParam._m0[72u].w * _3153)));
        _3198 = _3196 * (_3172 ? _3181 : (_3181 + (cbSceneParam._m0[72u].w * _3155)));
        _3199 = _3196 * (_3172 ? _3182 : (_3182 + (cbSceneParam._m0[72u].w * _3157)));
        _3200 = _3189 * 0.999000012874603271484375;
        _3210 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3210)
        {
            if ((cbInstanceData._m0[_920 + 7u].x + _3200) < 0.5)
            {
                _3366 = true;
                break;
            }
        }
        uint _3307 = _921 + uint(_3169.w);
        if ((cbInstanceData._m0[_3307].w < 1.0) && ((cbInstanceData._m0[_3307].w + _3200) < 0.5))
        {
            _3366 = true;
            break;
        }
        if ((_3193 + 1.0) < _3191.x)
        {
            _3366 = true;
            break;
        }
        _3366 = false;
        break;
    }
    float _3570;
    if (_3366)
    {
        discard_state = true;
        _3570 = 0.0;
    }
    else
    {
        _3570 = cbInstanceData._m0[_3054].w;
    }
    SV_Target.x = _3197;
    SV_Target.y = _3198;
    SV_Target.z = _3199;
    SV_Target.w = _3570;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3054].w;
    discard_exit();
}


