#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[20];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_19;
layout(set = 0, binding = 11) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_3;
layout(set = 0, binding = 14) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_5;
layout(set = 0, binding = 15) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_6;
layout(set = 0, binding = 17) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_8;
layout(set = 0, binding = 2) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_13;
layout(set = 0, binding = 5) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_14;
layout(set = 0, binding = 6) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_15;
layout(set = 0, binding = 7) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_16;
layout(set = 0, binding = 8) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_17;
layout(set = 0, binding = 9) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_18;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1217;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _201 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _202 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _203 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _209 = inversesqrt(dot(vec3(_201, _202, _203), vec3(_201, _202, _203)));
    float _216 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _223 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _246 = sin(cbMtdParam._m0[18u].x);
    float _247 = cos(cbMtdParam._m0[18u].x);
    float _248 = TEXCOORD.x - cbMtdParam._m0[17u].w;
    float _249 = TEXCOORD.y - cbMtdParam._m0[17u].w;
    float _257 = (cbMtdParam._m0[17u].w + cbMtdParam._m0[19u].y) + fma(_249, (-0.0) - _246, _247 * _248);
    float _259 = (cbMtdParam._m0[17u].w + cbMtdParam._m0[19u].z) + fma(_249, _247, _248 * _246);
    vec4 _272 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * _257) + cbTextureTilingScale._m0[1u].z, (_259 * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w));
    float _278 = _272.x * cbMtdParam._m0[10u].x;
    float _279 = _272.y * cbMtdParam._m0[10u].y;
    float _280 = _272.z * cbMtdParam._m0[10u].z;
    vec4 _298 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w));
    vec4 _317 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_0, SS_WrapLinear), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _342 = cbMtdParam._m0[19u].x * texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.x) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD.y) + cbTextureTilingScale._m0[13u].w)).x;
    float _353 = ((cbMtdParam._m0[15u].x * (-1.39999997615814208984375)) * (((1.0 - _317.x) * 2.0) - _342)) + 1.0;
    float _3569 = isnan(0.0) ? _353 : (isnan(_353) ? 0.0 : max(_353, 0.0));
    float _354 = isnan(1.0) ? _3569 : (isnan(_3569) ? 1.0 : min(_3569, 1.0));
    float _361 = (_354 * ((_298.x * cbMtdParam._m0[11u].x) - _278)) + _278;
    float _362 = (_354 * ((_298.y * cbMtdParam._m0[11u].y) - _279)) + _279;
    float _363 = (_354 * ((_298.z * cbMtdParam._m0[11u].z) - _280)) + _280;
    vec4 _381 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_8, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[17u].x * TEXCOORD.x) + cbTextureTilingScale._m0[17u].z, (cbTextureTilingScale._m0[17u].y * TEXCOORD.y) + cbTextureTilingScale._m0[17u].w));
    float _394 = (((((1.0 - _317.y) * 2.0) - _342) * (-1.39999997615814208984375)) * cbMtdParam._m0[18u].z) + 1.0;
    float _3580 = isnan(0.0) ? _394 : (isnan(_394) ? 0.0 : max(_394, 0.0));
    float _395 = isnan(1.0) ? _3580 : (isnan(_3580) ? 1.0 : min(_3580, 1.0));
    float _402 = (((_381.x * cbMtdParam._m0[12u].x) - _361) * _395) + _361;
    float _403 = (_395 * ((_381.y * cbMtdParam._m0[12u].y) - _362)) + _362;
    float _404 = (_395 * ((_381.z * cbMtdParam._m0[12u].z) - _363)) + _363;
    vec4 _421 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _434 = (((((1.0 - _317.z) * 2.0) - _342) * (-1.39999997615814208984375)) * cbMtdParam._m0[18u].w) + 1.0;
    float _3591 = isnan(0.0) ? _434 : (isnan(_434) ? 0.0 : max(_434, 0.0));
    float _435 = isnan(1.0) ? _3591 : (isnan(_3591) ? 1.0 : min(_3591, 1.0));
    vec4 _463 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _471 = ((((((_421.x * cbMtdParam._m0[13u].x) - _402) * _435) + _402) * 4.55000019073486328125) * cbMtdParam._m0[9u].x) * _463.x;
    float _474 = ((((_435 * ((_421.y * cbMtdParam._m0[13u].y) - _403)) + _403) * 4.55000019073486328125) * cbMtdParam._m0[9u].y) * _463.y;
    float _477 = ((((_435 * ((_421.z * cbMtdParam._m0[13u].z) - _404)) + _404) * 4.55000019073486328125) * cbMtdParam._m0[9u].z) * _463.z;
    vec4 _490 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * _257) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _259) + cbTextureTilingScale._m0[5u].w));
    float _492 = _490.x;
    float _510 = ((texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w)).x - _492) * _354) + _492;
    float _527 = ((texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w)).x - _510) * _395) + _510;
    float _546 = (((texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w)).x - _527) * _435) + _527) * cbMtdParam._m0[18u].y;
    vec4 _559 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[14u].x * _257) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _259) + cbTextureTilingScale._m0[14u].w));
    float _561 = _559.x;
    float _562 = _559.y;
    float _565 = cbMtdParam._m0[17u].y * _559.z;
    vec4 _577 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * TEXCOORD.x) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * TEXCOORD.y) + cbTextureTilingScale._m0[15u].w));
    float _586 = (((cbMtdParam._m0[17u].x * _577.z) - _565) * _354) + _565;
    vec4 _599 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_15, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _611 = (((cbMtdParam._m0[16u].w * _599.z) - _586) * _395) + _586;
    vec4 _624 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _633 = (((cbMtdParam._m0[16u].z * _624.z) - _611) * _435) + _611;
    float _638 = ((_577.x - _561) * _354) + _561;
    float _639 = ((_577.y - _562) * _354) + _562;
    float _644 = ((_599.x - _638) * _395) + _638;
    float _645 = ((_599.y - _639) * _395) + _639;
    float _654 = ((((_624.x - _644) * _435) + _644) * 2.0) + (-1.0);
    float _656 = ((((_624.y - _645) * _435) + _645) * 2.0) + (-1.0);
    float _657 = dot(vec2(_654, _656), vec2(_654, _656));
    float _3602 = isnan(0.0) ? _657 : (isnan(_657) ? 0.0 : max(_657, 0.0));
    float _662 = sqrt(1.0 - (isnan(1.0) ? _3602 : (isnan(_3602) ? 1.0 : min(_3602, 1.0))));
    float _665 = fma(_662, _216 * NORMAL.x, fma(_656, _223 * TANGENT.x, (_209 * _201) * _654));
    float _668 = fma(_662, _216 * NORMAL.y, fma(_656, _223 * TANGENT.y, (_209 * _202) * _654));
    float _671 = fma(_662, _216 * NORMAL.z, fma(_656, _223 * TANGENT.z, (_209 * _203) * _654));
    float _675 = inversesqrt(dot(vec3(_665, _668, _671), vec3(_665, _668, _671)));
    float _676 = _675 * _665;
    float _677 = _675 * _668;
    float _678 = _675 * _671;
    float _3613 = isnan(0.0) ? _633 : (isnan(_633) ? 0.0 : max(_633, 0.0));
    float _679 = isnan(1.0) ? _3613 : (isnan(_3613) ? 1.0 : min(_3613, 1.0));
    float _3624 = isnan(0.0) ? _471 : (isnan(_471) ? 0.0 : max(_471, 0.0));
    float _3635 = isnan(0.0) ? _474 : (isnan(_474) ? 0.0 : max(_474, 0.0));
    float _3646 = isnan(0.0) ? _477 : (isnan(_477) ? 0.0 : max(_477, 0.0));
    float _3657 = isnan(0.0) ? _546 : (isnan(_546) ? 0.0 : max(_546, 0.0));
    float _683 = isnan(1.0) ? _3657 : (isnan(_3657) ? 1.0 : min(_3657, 1.0));
    float _699 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _739 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _749 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _739);
    float _750 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _739);
    float _751 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _739);
    float _755 = inversesqrt(dot(vec3(_749, _750, _751), vec3(_749, _750, _751)));
    float _756 = _749 * _755;
    float _757 = _750 * _755;
    float _758 = _751 * _755;
    float _764 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _765 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _783 = fma(_678, cbSceneParam._m0[5u].z, fma(_677, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _676));
    float _786 = fma(_678, cbSceneParam._m0[6u].z, fma(_677, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _676));
    float _789 = fma(_678, cbSceneParam._m0[7u].z, fma(_677, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _676));
    uint _802 = uint(roundEven(NORMAL.w)) * 13u;
    uint _804 = (_802 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _810 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3624 : (isnan(_3624) ? 1.0 : min(_3624, 1.0)))) * cbInstanceData._m0[_804].x;
    float _811 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3635 : (isnan(_3635) ? 1.0 : min(_3635, 1.0)))) * cbInstanceData._m0[_804].y;
    float _812 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3646 : (isnan(_3646) ? 1.0 : min(_3646, 1.0)))) * cbInstanceData._m0[_804].z;
    float _3668 = isnan(0.0) ? _810 : (isnan(_810) ? 0.0 : max(_810, 0.0));
    float _813 = isnan(1.0) ? _3668 : (isnan(_3668) ? 1.0 : min(_3668, 1.0));
    float _3679 = isnan(0.0) ? _811 : (isnan(_811) ? 0.0 : max(_811, 0.0));
    float _814 = isnan(1.0) ? _3679 : (isnan(_3679) ? 1.0 : min(_3679, 1.0));
    float _3690 = isnan(0.0) ? _812 : (isnan(_812) ? 0.0 : max(_812, 0.0));
    float _815 = isnan(1.0) ? _3690 : (isnan(_3690) ? 1.0 : min(_3690, 1.0));
    float _816 = 1.0 - _683;
    float _817 = _813 * _816;
    float _818 = _814 * _816;
    float _819 = _815 * _816;
    float _824 = (_813 + (-0.039999999105930328369140625)) * _683;
    float _825 = (_814 + (-0.039999999105930328369140625)) * _683;
    float _826 = (_815 + (-0.039999999105930328369140625)) * _683;
    float _827 = _824 + 0.039999999105930328369140625;
    float _829 = _825 + 0.039999999105930328369140625;
    float _830 = _826 + 0.039999999105930328369140625;
    vec4 _839 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _764, cbSceneParam._m0[86u].y * _765));
    float _842 = _839.x * TEXCOORD_5.w;
    float _843 = dot(vec3(_676, _677, _678), vec3(_756, _757, _758));
    float _846 = _843 * 2.0;
    float _850 = (_846 * _676) - _756;
    float _851 = (_846 * _677) - _757;
    float _852 = (_846 * _678) - _758;
    float _856 = abs(dot(vec3(_756, _757, _758), vec3(_676, _677, _678)));
    float _3701 = isnan(0.0) ? _856 : (isnan(_856) ? 0.0 : max(_856, 0.0));
    float _858 = sqrt(_679);
    float _871 = exp2((_858 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3701 : (isnan(_3701) ? 1.0 : min(_3701, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_858 * 3.0));
    float _877 = (1.0 - _871) * ((_858 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _878 = _871 * _858;
    float _906 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _910 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _914 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1216;
    float _1218;
    float _1219;
    float _1220;
    float _1221;
    float _1222;
    float _1223;
    float _1224;
    float _1225;
    float _1226;
    float _1227;
    float _1228;
    float _1229;
    float _1230;
    float _1231;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _941 = fma(_914, cbModelParam._m0[26u].z, fma(_910, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _906));
        float _945 = fma(_914, cbModelParam._m0[27u].z, fma(_910, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _906));
        float _949 = fma(_914, cbModelParam._m0[28u].z, fma(_910, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _906));
        float _974 = _906 + _676;
        float _975 = _910 + _677;
        float _976 = _914 + _678;
        float _986 = fma(_976, cbModelParam._m0[26u].z, fma(_975, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _974)) - _941;
        float _987 = fma(_976, cbModelParam._m0[27u].z, fma(_975, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _974)) - _945;
        float _988 = fma(_976, cbModelParam._m0[28u].z, fma(_975, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _974)) - _949;
        float _992 = inversesqrt(dot(vec3(_986, _987, _988), vec3(_986, _987, _988)));
        float _1005 = ((_992 * _986) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_941 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1006 = ((_992 * _987) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_945 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1007 = ((_992 * _988) / cbModelParam._m0[34u].z) + ((((((_949 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1010 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1005, _1006, _1007), 0.0);
        vec4 _1017 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1005, _1006, _1007), 0.0);
        vec4 _1024 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1005, _1006, _1007), 0.0);
        vec4 _1031 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1005, _1006, _1007), 0.0);
        float _1044 = exp2((_1010.w + (-0.5)) * 20.0) * 2.0;
        float _1045 = _1044 * (_1010.x + (-0.5));
        float _1046 = _1044 * (_1010.y + (-0.5));
        float _1047 = _1044 * (_1010.z + (-0.5));
        float _1054 = exp2((_1017.w + (-0.5)) * 20.0) * 2.0;
        float _1055 = _1054 * (_1017.x + (-0.5));
        float _1056 = _1054 * (_1017.y + (-0.5));
        float _1057 = _1054 * (_1017.z + (-0.5));
        float _1064 = exp2((_1024.w + (-0.5)) * 20.0) * 2.0;
        float _1065 = _1064 * (_1024.x + (-0.5));
        float _1066 = _1064 * (_1024.y + (-0.5));
        float _1067 = _1064 * (_1024.z + (-0.5));
        float _1074 = exp2((_1031.w + (-0.5)) * 20.0) * 2.0;
        float _1075 = _1074 * (_1031.x + (-0.5));
        float _1076 = _1074 * (_1031.y + (-0.5));
        float _1077 = _1074 * (_1031.z + (-0.5));
        float _1078 = isnan(0.0) ? _1075 : (isnan(_1075) ? 0.0 : max(_1075, 0.0));
        float _1079 = isnan(0.0) ? _1076 : (isnan(_1076) ? 0.0 : max(_1076, 0.0));
        float _1080 = isnan(0.0) ? _1077 : (isnan(_1077) ? 0.0 : max(_1077, 0.0));
        float _1081 = _1045 * 0.5;
        float _1082 = _1055 * 0.5;
        float _1083 = _1065 * 0.5;
        float _1084 = dot(vec3(_1081, _1082, _1083), vec3(_1081, _1082, _1083));
        float _1089 = (_1084 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1084);
        float _1098 = (dot(vec3(_676, _677, _678), vec3(_1089 * _1081, _1089 * _1082, _1089 * _1083)) + 1.0) * 0.5;
        float _3727 = isnan(0.0) ? _1098 : (isnan(_1098) ? 0.0 : max(_1098, 0.0));
        float _1108 = sqrt(((_1082 * _1082) + (_1081 * _1081)) + (_1083 * _1083)) / (_1078 + 9.9999997473787516355514526367188e-06);
        float _3738 = isnan(0.0) ? _1108 : (isnan(_1108) ? 0.0 : max(_1108, 0.0));
        float _1109 = isnan(1.0) ? _3738 : (isnan(_3738) ? 1.0 : min(_3738, 1.0));
        float _1110 = _1109 * 2.0;
        float _1114 = (1.0 - _1109) / (_1109 + 1.0);
        float _3749 = isnan(0.0) ? _1114 : (isnan(_1114) ? 0.0 : max(_1114, 0.0));
        float _1115 = isnan(1.0) ? _3749 : (isnan(_3749) ? 1.0 : min(_3749, 1.0));
        float _1124 = ((((1.0 - _1115) * (_1110 + 2.0)) * exp2(log2(isnan(1.0) ? _3727 : (isnan(_3727) ? 1.0 : min(_3727, 1.0))) * (_1110 + 1.0))) + _1115) * _1078;
        float _1125 = _1046 * 0.5;
        float _1126 = _1056 * 0.5;
        float _1127 = _1066 * 0.5;
        float _1128 = dot(vec3(_1125, _1126, _1127), vec3(_1125, _1126, _1127));
        float _1133 = (_1128 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1128);
        float _1141 = (dot(vec3(_676, _677, _678), vec3(_1133 * _1125, _1133 * _1126, _1133 * _1127)) + 1.0) * 0.5;
        float _3760 = isnan(0.0) ? _1141 : (isnan(_1141) ? 0.0 : max(_1141, 0.0));
        float _1150 = sqrt(((_1126 * _1126) + (_1125 * _1125)) + (_1127 * _1127)) / (_1079 + 9.9999997473787516355514526367188e-06);
        float _3771 = isnan(0.0) ? _1150 : (isnan(_1150) ? 0.0 : max(_1150, 0.0));
        float _1151 = isnan(1.0) ? _3771 : (isnan(_3771) ? 1.0 : min(_3771, 1.0));
        float _1152 = _1151 * 2.0;
        float _1156 = (1.0 - _1151) / (_1151 + 1.0);
        float _3782 = isnan(0.0) ? _1156 : (isnan(_1156) ? 0.0 : max(_1156, 0.0));
        float _1157 = isnan(1.0) ? _3782 : (isnan(_3782) ? 1.0 : min(_3782, 1.0));
        float _1166 = ((((1.0 - _1157) * (_1152 + 2.0)) * exp2(log2(isnan(1.0) ? _3760 : (isnan(_3760) ? 1.0 : min(_3760, 1.0))) * (_1152 + 1.0))) + _1157) * _1079;
        float _1167 = _1047 * 0.5;
        float _1168 = _1057 * 0.5;
        float _1169 = _1067 * 0.5;
        float _1170 = dot(vec3(_1167, _1168, _1169), vec3(_1167, _1168, _1169));
        float _1175 = (_1170 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1170);
        float _1183 = (dot(vec3(_676, _677, _678), vec3(_1175 * _1167, _1175 * _1168, _1175 * _1169)) + 1.0) * 0.5;
        float _3793 = isnan(0.0) ? _1183 : (isnan(_1183) ? 0.0 : max(_1183, 0.0));
        float _1192 = sqrt(((_1168 * _1168) + (_1167 * _1167)) + (_1169 * _1169)) / (_1080 + 9.9999997473787516355514526367188e-06);
        float _3804 = isnan(0.0) ? _1192 : (isnan(_1192) ? 0.0 : max(_1192, 0.0));
        float _1193 = isnan(1.0) ? _3804 : (isnan(_3804) ? 1.0 : min(_3804, 1.0));
        float _1194 = _1193 * 2.0;
        float _1198 = (1.0 - _1193) / (_1193 + 1.0);
        float _3815 = isnan(0.0) ? _1198 : (isnan(_1198) ? 0.0 : max(_1198, 0.0));
        float _1199 = isnan(1.0) ? _3815 : (isnan(_3815) ? 1.0 : min(_3815, 1.0));
        float _1208 = ((((1.0 - _1199) * (_1194 + 2.0)) * exp2(log2(isnan(1.0) ? _3793 : (isnan(_3793) ? 1.0 : min(_3793, 1.0))) * (_1194 + 1.0))) + _1199) * _1080;
        _1216 = _1047;
        _1218 = _1046;
        _1219 = _1045;
        _1220 = _1057;
        _1221 = _1056;
        _1222 = _1055;
        _1223 = _1067;
        _1224 = _1066;
        _1225 = _1065;
        _1226 = _1080;
        _1227 = _1079;
        _1228 = _1078;
        _1229 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1124 : (isnan(_1124) ? 0.0 : max(_1124, 0.0)));
        _1230 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1166 : (isnan(_1166) ? 0.0 : max(_1166, 0.0)));
        _1231 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1208 : (isnan(_1208) ? 0.0 : max(_1208, 0.0)));
    }
    else
    {
        _1216 = _1217;
        _1218 = _1217;
        _1219 = _1217;
        _1220 = _1217;
        _1221 = _1217;
        _1222 = _1217;
        _1223 = _1217;
        _1224 = _1217;
        _1225 = _1217;
        _1226 = _1217;
        _1227 = _1217;
        _1228 = _1217;
        _1229 = 0.0;
        _1230 = 0.0;
        _1231 = 0.0;
    }
    float _1526;
    float _1527;
    float _1528;
    float _1529;
    float _1530;
    float _1531;
    float _1532;
    float _1533;
    float _1534;
    float _1535;
    float _1536;
    float _1537;
    float _1538;
    float _1539;
    float _1540;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1257 = fma(_914, cbModelParam._m0[30u].z, fma(_910, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _906));
        float _1261 = fma(_914, cbModelParam._m0[31u].z, fma(_910, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _906));
        float _1265 = fma(_914, cbModelParam._m0[32u].z, fma(_910, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _906));
        float _1288 = _906 + _676;
        float _1289 = _910 + _677;
        float _1290 = _914 + _678;
        float _1300 = fma(_1290, cbModelParam._m0[30u].z, fma(_1289, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1288)) - _1257;
        float _1301 = fma(_1290, cbModelParam._m0[31u].z, fma(_1289, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1288)) - _1261;
        float _1302 = fma(_1290, cbModelParam._m0[32u].z, fma(_1289, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1288)) - _1265;
        float _1306 = inversesqrt(dot(vec3(_1300, _1301, _1302), vec3(_1300, _1301, _1302)));
        float _1319 = ((_1306 * _1300) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1257 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1320 = ((_1306 * _1301) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1261 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1321 = ((_1306 * _1302) / cbModelParam._m0[35u].z) + ((((((_1265 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1323 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1319, _1320, _1321), 0.0);
        vec4 _1330 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1319, _1320, _1321), 0.0);
        vec4 _1337 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1319, _1320, _1321), 0.0);
        vec4 _1344 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1319, _1320, _1321), 0.0);
        float _1356 = exp2((_1323.w + (-0.5)) * 20.0) * 2.0;
        float _1357 = _1356 * (_1323.x + (-0.5));
        float _1358 = _1356 * (_1323.y + (-0.5));
        float _1359 = _1356 * (_1323.z + (-0.5));
        float _1366 = exp2((_1330.w + (-0.5)) * 20.0) * 2.0;
        float _1367 = _1366 * (_1330.x + (-0.5));
        float _1368 = _1366 * (_1330.y + (-0.5));
        float _1369 = _1366 * (_1330.z + (-0.5));
        float _1376 = exp2((_1337.w + (-0.5)) * 20.0) * 2.0;
        float _1377 = _1376 * (_1337.x + (-0.5));
        float _1378 = _1376 * (_1337.y + (-0.5));
        float _1379 = _1376 * (_1337.z + (-0.5));
        float _1386 = exp2((_1344.w + (-0.5)) * 20.0) * 2.0;
        float _1387 = _1386 * (_1344.x + (-0.5));
        float _1388 = _1386 * (_1344.y + (-0.5));
        float _1389 = _1386 * (_1344.z + (-0.5));
        float _1390 = isnan(0.0) ? _1387 : (isnan(_1387) ? 0.0 : max(_1387, 0.0));
        float _1391 = isnan(0.0) ? _1388 : (isnan(_1388) ? 0.0 : max(_1388, 0.0));
        float _1392 = isnan(0.0) ? _1389 : (isnan(_1389) ? 0.0 : max(_1389, 0.0));
        float _1393 = _1357 * 0.5;
        float _1394 = _1367 * 0.5;
        float _1395 = _1377 * 0.5;
        float _1396 = dot(vec3(_1393, _1394, _1395), vec3(_1393, _1394, _1395));
        float _1401 = (_1396 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1396);
        float _1409 = (dot(vec3(_676, _677, _678), vec3(_1401 * _1393, _1401 * _1394, _1401 * _1395)) + 1.0) * 0.5;
        float _3856 = isnan(0.0) ? _1409 : (isnan(_1409) ? 0.0 : max(_1409, 0.0));
        float _1418 = sqrt(((_1394 * _1394) + (_1393 * _1393)) + (_1395 * _1395)) / (_1390 + 9.9999997473787516355514526367188e-06);
        float _3867 = isnan(0.0) ? _1418 : (isnan(_1418) ? 0.0 : max(_1418, 0.0));
        float _1419 = isnan(1.0) ? _3867 : (isnan(_3867) ? 1.0 : min(_3867, 1.0));
        float _1420 = _1419 * 2.0;
        float _1424 = (1.0 - _1419) / (_1419 + 1.0);
        float _3878 = isnan(0.0) ? _1424 : (isnan(_1424) ? 0.0 : max(_1424, 0.0));
        float _1425 = isnan(1.0) ? _3878 : (isnan(_3878) ? 1.0 : min(_3878, 1.0));
        float _1434 = ((((1.0 - _1425) * (_1420 + 2.0)) * exp2(log2(isnan(1.0) ? _3856 : (isnan(_3856) ? 1.0 : min(_3856, 1.0))) * (_1420 + 1.0))) + _1425) * _1390;
        float _1435 = _1358 * 0.5;
        float _1436 = _1368 * 0.5;
        float _1437 = _1378 * 0.5;
        float _1438 = dot(vec3(_1435, _1436, _1437), vec3(_1435, _1436, _1437));
        float _1443 = (_1438 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1438);
        float _1451 = (dot(vec3(_676, _677, _678), vec3(_1443 * _1435, _1443 * _1436, _1443 * _1437)) + 1.0) * 0.5;
        float _3889 = isnan(0.0) ? _1451 : (isnan(_1451) ? 0.0 : max(_1451, 0.0));
        float _1460 = sqrt(((_1436 * _1436) + (_1435 * _1435)) + (_1437 * _1437)) / (_1391 + 9.9999997473787516355514526367188e-06);
        float _3900 = isnan(0.0) ? _1460 : (isnan(_1460) ? 0.0 : max(_1460, 0.0));
        float _1461 = isnan(1.0) ? _3900 : (isnan(_3900) ? 1.0 : min(_3900, 1.0));
        float _1462 = _1461 * 2.0;
        float _1466 = (1.0 - _1461) / (_1461 + 1.0);
        float _3911 = isnan(0.0) ? _1466 : (isnan(_1466) ? 0.0 : max(_1466, 0.0));
        float _1467 = isnan(1.0) ? _3911 : (isnan(_3911) ? 1.0 : min(_3911, 1.0));
        float _1476 = ((((1.0 - _1467) * (_1462 + 2.0)) * exp2(log2(isnan(1.0) ? _3889 : (isnan(_3889) ? 1.0 : min(_3889, 1.0))) * (_1462 + 1.0))) + _1467) * _1391;
        float _1477 = _1359 * 0.5;
        float _1478 = _1369 * 0.5;
        float _1479 = _1379 * 0.5;
        float _1480 = dot(vec3(_1477, _1478, _1479), vec3(_1477, _1478, _1479));
        float _1485 = (_1480 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1480);
        float _1493 = (dot(vec3(_676, _677, _678), vec3(_1485 * _1477, _1485 * _1478, _1485 * _1479)) + 1.0) * 0.5;
        float _3922 = isnan(0.0) ? _1493 : (isnan(_1493) ? 0.0 : max(_1493, 0.0));
        float _1502 = sqrt(((_1478 * _1478) + (_1477 * _1477)) + (_1479 * _1479)) / (_1392 + 9.9999997473787516355514526367188e-06);
        float _3933 = isnan(0.0) ? _1502 : (isnan(_1502) ? 0.0 : max(_1502, 0.0));
        float _1503 = isnan(1.0) ? _3933 : (isnan(_3933) ? 1.0 : min(_3933, 1.0));
        float _1504 = _1503 * 2.0;
        float _1508 = (1.0 - _1503) / (_1503 + 1.0);
        float _3944 = isnan(0.0) ? _1508 : (isnan(_1508) ? 0.0 : max(_1508, 0.0));
        float _1509 = isnan(1.0) ? _3944 : (isnan(_3944) ? 1.0 : min(_3944, 1.0));
        float _1518 = ((((1.0 - _1509) * (_1504 + 2.0)) * exp2(log2(isnan(1.0) ? _3922 : (isnan(_3922) ? 1.0 : min(_3922, 1.0))) * (_1504 + 1.0))) + _1509) * _1392;
        _1526 = _1359;
        _1527 = _1358;
        _1528 = _1357;
        _1529 = _1369;
        _1530 = _1368;
        _1531 = _1367;
        _1532 = _1379;
        _1533 = _1378;
        _1534 = _1377;
        _1535 = _1392;
        _1536 = _1391;
        _1537 = _1390;
        _1538 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1434 : (isnan(_1434) ? 0.0 : max(_1434, 0.0)));
        _1539 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1476 : (isnan(_1476) ? 0.0 : max(_1476, 0.0)));
        _1540 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1518 : (isnan(_1518) ? 0.0 : max(_1518, 0.0)));
    }
    else
    {
        _1526 = _1217;
        _1527 = _1217;
        _1528 = _1217;
        _1529 = _1217;
        _1530 = _1217;
        _1531 = _1217;
        _1532 = _1217;
        _1533 = _1217;
        _1534 = _1217;
        _1535 = _1217;
        _1536 = _1217;
        _1537 = _1217;
        _1538 = 0.0;
        _1539 = 0.0;
        _1540 = 0.0;
    }
    float _1550 = (cbModelParam._m0[1u].x * (_1538 - _1229)) + _1229;
    float _1551 = (cbModelParam._m0[1u].x * (_1539 - _1230)) + _1230;
    float _1552 = (cbModelParam._m0[1u].x * (_1540 - _1231)) + _1231;
    float _1573 = fma(_1552, cbSceneParam._m0[89u].z, fma(_1551, cbSceneParam._m0[89u].y, _1550 * cbSceneParam._m0[89u].x));
    float _1576 = fma(_1552, cbSceneParam._m0[90u].z, fma(_1551, cbSceneParam._m0[90u].y, _1550 * cbSceneParam._m0[90u].x));
    float _1579 = fma(_1552, cbSceneParam._m0[91u].z, fma(_1551, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1550));
    float _1594 = _850 * 0.5;
    float _1595 = _851 * 0.5;
    float _1596 = _852 * 0.5;
    float _1597 = dot(vec4(_1594, _1595, _1596, 1.0), vec4(_1528, _1531, _1534, _1537));
    float _1600 = dot(vec4(_1594, _1595, _1596, 1.0), vec4(_1527, _1530, _1533, _1536));
    float _1603 = dot(vec4(_1594, _1595, _1596, 1.0), vec4(_1526, _1529, _1532, _1535));
    float _1637;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1610 = dot(vec4(_1594, _1595, _1596, 1.0), vec4(_1216, _1220, _1223, _1226));
        float _1614 = dot(vec4(_1594, _1595, _1596, 1.0), vec4(_1218, _1221, _1224, _1227));
        float _1618 = dot(vec4(_1594, _1595, _1596, 1.0), vec4(_1219, _1222, _1225, _1228));
        float _1625 = dot(vec4(cbModelParam._m0[39u]), vec4(_1594, _1595, _1596, 1.0));
        _1637 = dot(vec3(isnan(0.0) ? _1618 : (isnan(_1618) ? 0.0 : max(_1618, 0.0)), isnan(0.0) ? _1614 : (isnan(_1614) ? 0.0 : max(_1614, 0.0)), isnan(0.0) ? _1610 : (isnan(_1610) ? 0.0 : max(_1610, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1625) ? 0.0 : (isnan(0.0) ? _1625 : max(0.0, _1625))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1637 = 1.0;
    }
    float _1648;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1639 = dot(vec4(cbModelParam._m0[40u]), vec4(_1594, _1595, _1596, 1.0));
        _1648 = dot(vec3(isnan(0.0) ? _1597 : (isnan(_1597) ? 0.0 : max(_1597, 0.0)), isnan(0.0) ? _1600 : (isnan(_1600) ? 0.0 : max(_1600, 0.0)), isnan(0.0) ? _1603 : (isnan(_1603) ? 0.0 : max(_1603, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1639) ? 0.0 : (isnan(0.0) ? _1639 : max(0.0, _1639))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1648 = 1.0;
    }
    float _1652 = (_1648 * cbModelParam._m0[1u].x) + (_1637 * (1.0 - cbModelParam._m0[1u].x));
    float _1662 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _679);
    float _1663 = isnan(_1662) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1662 : min(cbModelParam._m0[25u].z, _1662));
    float _1743;
    float _1745;
    float _1747;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1710 = fma(_914, cbModelParam._m0[13u].z, fma(_910, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _906)) + cbModelParam._m0[13u].w;
        float _1714 = fma(_914, cbModelParam._m0[14u].z, fma(_910, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _906)) + cbModelParam._m0[14u].w;
        float _1718 = fma(_914, cbModelParam._m0[15u].z, fma(_910, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _906)) + cbModelParam._m0[15u].w;
        float _1721 = fma(_852, cbModelParam._m0[13u].z, fma(_851, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _850));
        float _1724 = fma(_852, cbModelParam._m0[14u].z, fma(_851, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _850));
        float _1727 = fma(_852, cbModelParam._m0[15u].z, fma(_851, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _850));
        float _1755;
        if (_1721 > 0.0)
        {
            _1755 = abs((1.0 - _1710) / _1721);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1721 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1710 + 1.0) / _1721);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1755 = frontier_phi_14_12_ladder;
        }
        float _1980;
        if (_1724 > 0.0)
        {
            _1980 = abs((1.0 - _1714) / _1724);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1724 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1714 + 1.0) / _1724);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1980 = frontier_phi_23_19_ladder;
        }
        float _2237;
        if (_1727 > 0.0)
        {
            _2237 = abs((1.0 - _1718) / _1727);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1727 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1718 + 1.0) / _1727);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2237 = frontier_phi_35_30_ladder;
        }
        float _2239 = isnan(_1980) ? _1755 : (isnan(_1755) ? _1980 : min(_1755, _1980));
        float _2240 = isnan(_2237) ? _2239 : (isnan(_2239) ? _2237 : min(_2239, _2237));
        float _2244 = (_2240 * _1721) + _1710;
        float _2245 = (_2240 * _1724) + _1714;
        float _2246 = (_2240 * _1727) + _1718;
        float _2247 = _2240 * 9.9999997473787516355514526367188e-05;
        float _2249 = (-1.0) - _2247;
        float _2251 = _2247 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2246 > _2251) || ((_2246 < _2249) || ((_2245 > _2251) || ((_2245 < _2249) || ((_2244 < _2249) || (_2244 > _2251))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2374 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2246, cbModelParam._m0[9u].z, fma(_2245, cbModelParam._m0[9u].y, _2244 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2246, cbModelParam._m0[10u].z, fma(_2245, cbModelParam._m0[10u].y, _2244 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2246, cbModelParam._m0[11u].z, fma(_2245, cbModelParam._m0[11u].y, _2244 * cbModelParam._m0[11u].x))), _1663);
            frontier_phi_13_35_ladder = _2374.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2374.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2374.x * cbModelParam._m0[1u].y;
        }
        _1743 = frontier_phi_13_35_ladder_2;
        _1745 = frontier_phi_13_35_ladder_1;
        _1747 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1731 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_850, _851, _852), _1663);
        _1743 = _1731.x * cbModelParam._m0[1u].y;
        _1745 = _1731.y * cbModelParam._m0[1u].y;
        _1747 = _1731.z * cbModelParam._m0[1u].y;
    }
    float _1751 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _679);
    float _1752 = isnan(_1751) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1751 : min(cbModelParam._m0[25u].w, _1751));
    float _1843;
    float _1845;
    float _1847;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1807 = fma(_914, cbModelParam._m0[21u].z, fma(_910, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _906)) + cbModelParam._m0[21u].w;
        float _1811 = fma(_914, cbModelParam._m0[22u].z, fma(_910, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _906)) + cbModelParam._m0[22u].w;
        float _1815 = fma(_914, cbModelParam._m0[23u].z, fma(_910, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _906)) + cbModelParam._m0[23u].w;
        float _1818 = fma(_852, cbModelParam._m0[21u].z, fma(_851, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _850));
        float _1821 = fma(_852, cbModelParam._m0[22u].z, fma(_851, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _850));
        float _1824 = fma(_852, cbModelParam._m0[23u].z, fma(_851, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _850));
        float _1985;
        if (_1818 > 0.0)
        {
            _1985 = abs((1.0 - _1807) / _1818);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1818 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1807 + 1.0) / _1818);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1985 = frontier_phi_25_21_ladder;
        }
        float _2264;
        if (_1821 > 0.0)
        {
            _2264 = abs((1.0 - _1811) / _1821);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1821 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1811 + 1.0) / _1821);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2264 = frontier_phi_37_32_ladder;
        }
        float _2477;
        if (_1824 > 0.0)
        {
            _2477 = abs((1.0 - _1815) / _1824);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1824 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1815 + 1.0) / _1824);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2477 = frontier_phi_46_43_ladder;
        }
        float _2479 = isnan(_2264) ? _1985 : (isnan(_1985) ? _2264 : min(_1985, _2264));
        float _2480 = isnan(_2477) ? _2479 : (isnan(_2479) ? _2477 : min(_2479, _2477));
        float _2484 = (_2480 * _1818) + _1807;
        float _2485 = (_2480 * _1821) + _1811;
        float _2486 = (_2480 * _1824) + _1815;
        float _2487 = _2480 * 9.9999997473787516355514526367188e-05;
        float _2488 = (-1.0) - _2487;
        float _2490 = _2487 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2486 > _2490) || ((_2486 < _2488) || ((_2485 > _2490) || ((_2485 < _2488) || ((_2484 < _2488) || (_2484 > _2490))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2685 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2486, cbModelParam._m0[17u].z, fma(_2485, cbModelParam._m0[17u].y, _2484 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2486, cbModelParam._m0[18u].z, fma(_2485, cbModelParam._m0[18u].y, _2484 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2486, cbModelParam._m0[19u].z, fma(_2485, cbModelParam._m0[19u].y, _2484 * cbModelParam._m0[19u].x))), _1752);
            frontier_phi_22_46_ladder = _2685.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2685.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2685.x * cbModelParam._m0[1u].z;
        }
        _1843 = frontier_phi_22_46_ladder_2;
        _1845 = frontier_phi_22_46_ladder_1;
        _1847 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1827 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_850, _851, _852), _1752);
        _1843 = _1827.x * cbModelParam._m0[1u].z;
        _1845 = _1827.y * cbModelParam._m0[1u].z;
        _1847 = _1827.z * cbModelParam._m0[1u].z;
    }
    float _1860 = (((_877 * _827) + _878) * _842) * ((cbModelParam._m0[1u].w * (_1843 - _1743)) + _1743);
    float _1862 = (((_877 * _829) + _878) * _842) * ((cbModelParam._m0[1u].w * (_1845 - _1745)) + _1745);
    float _1864 = (((_877 * _830) + _878) * _842) * ((cbModelParam._m0[1u].w * (_1847 - _1747)) + _1747);
    float _1867 = fma(_1864, cbSceneParam._m0[89u].z, fma(_1862, cbSceneParam._m0[89u].y, _1860 * cbSceneParam._m0[89u].x));
    float _1870 = fma(_1864, cbSceneParam._m0[90u].z, fma(_1862, cbSceneParam._m0[90u].y, _1860 * cbSceneParam._m0[90u].x));
    float _1873 = fma(_1864, cbSceneParam._m0[91u].z, fma(_1862, cbSceneParam._m0[91u].y, _1860 * cbSceneParam._m0[91u].x));
    vec4 _1881 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_764, _765));
    float _1883 = _1881.w;
    float _1895 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1883);
    float _1896 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1883);
    float _1897 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1883);
    uvec4 _1901 = floatBitsToUint(cbInstanceData._m0[_802 + 5u]);
    uint _1903 = _1901.x * 14u;
    uint _1904 = _1903 + 13u;
    float _1911 = _842 + (-1.0);
    float _1916 = (cbLight._m0[_1904].x * _1911) + 1.0;
    float _1917 = (cbLight._m0[_1904].y * _1911) + 1.0;
    float _1918 = (cbLight._m0[_1904].z * _1911) + 1.0;
    float _1919 = (cbLight._m0[_1904].w * _1911) + 1.0;
    uint _1920 = _1903 + 5u;
    float _1926 = isnan(1.0) ? _1917 : (isnan(_1917) ? 1.0 : min(_1917, 1.0));
    uint _1930 = _1903 + 4u;
    float _1939 = isnan(1.0) ? _1916 : (isnan(_1916) ? 1.0 : min(_1916, 1.0));
    uint _1943 = _1903 | 1u;
    float _1954 = dot(vec3(cbLight._m0[_1903].xyz), vec3(_676, _677, _678));
    float _1957 = dot(vec3(cbLight._m0[_1943].xyz), vec3(_676, _677, _678));
    float _4080 = isnan(0.0) ? _1954 : (isnan(_1954) ? 0.0 : max(_1954, 0.0));
    float _4091 = isnan(0.0) ? _1957 : (isnan(_1957) ? 0.0 : max(_1957, 0.0));
    float _1962 = (isnan(1.0) ? _4080 : (isnan(_4080) ? 1.0 : min(_4080, 1.0))) * 0.3183098733425140380859375;
    float _1964 = (isnan(1.0) ? _4091 : (isnan(_4091) ? 1.0 : min(_4091, 1.0))) * 0.3183098733425140380859375;
    float _1971 = ((cbLight._m0[_1920].x * _1926) * _1964) + (((cbLight._m0[_1930].x * _1895) * _1939) * _1962);
    float _1972 = ((_1926 * cbLight._m0[_1920].y) * _1964) + (((cbLight._m0[_1930].y * _1896) * _1939) * _1962);
    float _1973 = ((_1926 * cbLight._m0[_1920].z) * _1964) + (((cbLight._m0[_1930].z * _1897) * _1939) * _1962);
    uvec4 _1977 = floatBitsToUint(cbLight._m0[_1903 + 12u]);
    bool _1979 = _1977.x == 0u;
    float _1990;
    float _1992;
    float _1994;
    if (_1979)
    {
        _1990 = _1971;
        _1992 = _1972;
        _1994 = _1973;
    }
    else
    {
        uint _1998 = _1903 + 6u;
        float _2014 = (dot(vec3(cbLight._m0[_1903 + 2u].xyz), vec3(_676, _677, _678)) * 0.5) + 0.5;
        float _2015 = _2014 * _2014;
        float _4102 = isnan(0.0) ? _2015 : (isnan(_2015) ? 0.0 : max(_2015, 0.0));
        float _2016 = isnan(1.0) ? _4102 : (isnan(_4102) ? 1.0 : min(_4102, 1.0));
        float _2017 = isnan(1.0) ? _1918 : (isnan(_1918) ? 1.0 : min(_1918, 1.0));
        _1990 = (((cbLight._m0[_1998].x * 0.3183098733425140380859375) * _2016) * _2017) + _1971;
        _1992 = (((cbLight._m0[_1998].y * 0.3183098733425140380859375) * _2016) * _2017) + _1972;
        _1994 = (((cbLight._m0[_1998].z * 0.3183098733425140380859375) * _2016) * _2017) + _1973;
    }
    bool _1997 = _1977.y == 0u;
    float _2035;
    float _2037;
    float _2039;
    if (_1997)
    {
        _2035 = _1990;
        _2037 = _1992;
        _2039 = _1994;
    }
    else
    {
        uint _2208 = _1903 + 7u;
        float _2224 = (dot(vec3(cbLight._m0[_1903 + 3u].xyz), vec3(_676, _677, _678)) * 0.5) + 0.5;
        float _2225 = _2224 * _2224;
        float _4118 = isnan(0.0) ? _2225 : (isnan(_2225) ? 0.0 : max(_2225, 0.0));
        float _2226 = isnan(1.0) ? _4118 : (isnan(_4118) ? 1.0 : min(_4118, 1.0));
        float _2227 = isnan(1.0) ? _1919 : (isnan(_1919) ? 1.0 : min(_1919, 1.0));
        _2035 = (((cbLight._m0[_2208].x * 0.3183098733425140380859375) * _2226) * _2227) + _1990;
        _2037 = (((cbLight._m0[_2208].y * 0.3183098733425140380859375) * _2226) * _2227) + _1992;
        _2039 = (((cbLight._m0[_2208].z * 0.3183098733425140380859375) * _2226) * _2227) + _1994;
    }
    uint _2042 = _1903 + 8u;
    float _2055 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1903].w)) * _679) * 0.949999988079071044921875);
    float _2056 = _2055 * _2055;
    float _2057 = cbLight._m0[_1903].x + _756;
    float _2058 = cbLight._m0[_1903].y + _757;
    float _2059 = cbLight._m0[_1903].z + _758;
    float _2063 = inversesqrt(dot(vec3(_2057, _2058, _2059), vec3(_2057, _2058, _2059)));
    float _2064 = _2063 * _2057;
    float _2065 = _2063 * _2058;
    float _2066 = _2063 * _2059;
    float _2067 = dot(vec3(_676, _677, _678), vec3(cbLight._m0[_1903].xyz));
    float _4134 = isnan(0.0) ? _2067 : (isnan(_2067) ? 0.0 : max(_2067, 0.0));
    float _2070 = isnan(1.0) ? _4134 : (isnan(_4134) ? 1.0 : min(_4134, 1.0));
    float _4145 = isnan(0.0) ? _843 : (isnan(_843) ? 0.0 : max(_843, 0.0));
    float _2071 = isnan(1.0) ? _4145 : (isnan(_4145) ? 1.0 : min(_4145, 1.0));
    float _2072 = dot(vec3(_676, _677, _678), vec3(_2064, _2065, _2066));
    float _4156 = isnan(0.0) ? _2072 : (isnan(_2072) ? 0.0 : max(_2072, 0.0));
    float _2075 = isnan(1.0) ? _4156 : (isnan(_4156) ? 1.0 : min(_4156, 1.0));
    float _2076 = dot(vec3(cbLight._m0[_1903].xyz), vec3(_2064, _2065, _2066));
    float _4167 = isnan(0.0) ? _2076 : (isnan(_2076) ? 0.0 : max(_2076, 0.0));
    float _2080 = _2056 * _2056;
    float _2084 = ((_2075 * _2075) * (_2080 + (-1.0))) + 1.0;
    float _2092 = exp2(log2(1.0 - (isnan(1.0) ? _4167 : (isnan(_4167) ? 1.0 : min(_4167, 1.0)))) * 5.0);
    float _2093 = 0.959999978542327880859375 - _824;
    float _2095 = 0.959999978542327880859375 - _825;
    float _2096 = 0.959999978542327880859375 - _826;
    float _2103 = 1.0 - _2056;
    float _2114 = (0.5 / (((_2071 * ((_2070 * _2103) + _2056)) + 9.9999999392252902907785028219223e-09) + (((_2071 * _2103) + _2056) * _2070))) * _2070;
    float _4178 = isnan(0.0) ? _2114 : (isnan(_2114) ? 0.0 : max(_2114, 0.0));
    float _2116 = (isnan(1.0) ? _4178 : (isnan(_4178) ? 1.0 : min(_4178, 1.0))) * (_2080 / ((_2084 * _2084) * 3.141590118408203125));
    uint _2130 = _1903 + 9u;
    float _2141 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1943].w)) * _679) * 0.949999988079071044921875);
    float _2142 = _2141 * _2141;
    float _2143 = cbLight._m0[_1943].x + _756;
    float _2144 = cbLight._m0[_1943].y + _757;
    float _2145 = cbLight._m0[_1943].z + _758;
    float _2149 = inversesqrt(dot(vec3(_2143, _2144, _2145), vec3(_2143, _2144, _2145)));
    float _2150 = _2149 * _2143;
    float _2151 = _2149 * _2144;
    float _2152 = _2149 * _2145;
    float _2153 = dot(vec3(_676, _677, _678), vec3(cbLight._m0[_1943].xyz));
    float _4189 = isnan(0.0) ? _2153 : (isnan(_2153) ? 0.0 : max(_2153, 0.0));
    float _2156 = isnan(1.0) ? _4189 : (isnan(_4189) ? 1.0 : min(_4189, 1.0));
    float _2157 = dot(vec3(_676, _677, _678), vec3(_2150, _2151, _2152));
    float _4200 = isnan(0.0) ? _2157 : (isnan(_2157) ? 0.0 : max(_2157, 0.0));
    float _2160 = isnan(1.0) ? _4200 : (isnan(_4200) ? 1.0 : min(_4200, 1.0));
    float _2161 = dot(vec3(cbLight._m0[_1943].xyz), vec3(_2150, _2151, _2152));
    float _4211 = isnan(0.0) ? _2161 : (isnan(_2161) ? 0.0 : max(_2161, 0.0));
    float _2165 = _2142 * _2142;
    float _2169 = ((_2160 * _2160) * (_2165 + (-1.0))) + 1.0;
    float _2176 = exp2(log2(1.0 - (isnan(1.0) ? _4211 : (isnan(_4211) ? 1.0 : min(_4211, 1.0)))) * 5.0);
    float _2183 = 1.0 - _2142;
    float _2193 = (0.5 / (((_2071 * ((_2156 * _2183) + _2142)) + 9.9999999392252902907785028219223e-09) + (((_2071 * _2183) + _2142) * _2156))) * _2156;
    float _4222 = isnan(0.0) ? _2193 : (isnan(_2193) ? 0.0 : max(_2193, 0.0));
    float _2195 = (isnan(1.0) ? _4222 : (isnan(_4222) ? 1.0 : min(_4222, 1.0))) * (_2165 / ((_2169 * _2169) * 3.141590118408203125));
    float _2205 = (((((_2176 * _2093) + _827) * cbLight._m0[_2130].x) * _2195) * _1926) + ((((cbLight._m0[_2042].x * _1895) * ((_2092 * _2093) + _827)) * _2116) * _1939);
    float _2206 = (((((_2176 * _2095) + _829) * cbLight._m0[_2130].y) * _2195) * _1926) + ((((cbLight._m0[_2042].y * _1896) * ((_2092 * _2095) + _829)) * _2116) * _1939);
    float _2207 = (((((_2176 * _2096) + _830) * cbLight._m0[_2130].z) * _2195) * _1926) + ((((cbLight._m0[_2042].z * _1897) * ((_2092 * _2096) + _830)) * _2116) * _1939);
    float _2269;
    float _2271;
    float _2273;
    if (_1979)
    {
        _2269 = _2205;
        _2271 = _2206;
        _2273 = _2207;
    }
    else
    {
        uint _2275 = _1903 + 2u;
        uint _2279 = _1903 + 10u;
        float _2293 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2275].w)) * _679) * 0.949999988079071044921875);
        float _2294 = _2293 * _2293;
        float _2295 = cbLight._m0[_2275].x + _756;
        float _2296 = cbLight._m0[_2275].y + _757;
        float _2297 = cbLight._m0[_2275].z + _758;
        float _2301 = inversesqrt(dot(vec3(_2295, _2296, _2297), vec3(_2295, _2296, _2297)));
        float _2302 = _2301 * _2295;
        float _2303 = _2301 * _2296;
        float _2304 = _2301 * _2297;
        float _2305 = dot(vec3(_676, _677, _678), vec3(cbLight._m0[_2275].xyz));
        float _4233 = isnan(0.0) ? _2305 : (isnan(_2305) ? 0.0 : max(_2305, 0.0));
        float _2308 = isnan(1.0) ? _4233 : (isnan(_4233) ? 1.0 : min(_4233, 1.0));
        float _2309 = dot(vec3(_676, _677, _678), vec3(_2302, _2303, _2304));
        float _4244 = isnan(0.0) ? _2309 : (isnan(_2309) ? 0.0 : max(_2309, 0.0));
        float _2312 = isnan(1.0) ? _4244 : (isnan(_4244) ? 1.0 : min(_4244, 1.0));
        float _2313 = dot(vec3(cbLight._m0[_2275].xyz), vec3(_2302, _2303, _2304));
        float _4255 = isnan(0.0) ? _2313 : (isnan(_2313) ? 0.0 : max(_2313, 0.0));
        float _2317 = _2294 * _2294;
        float _2321 = ((_2312 * _2312) * (_2317 + (-1.0))) + 1.0;
        float _2328 = exp2(log2(1.0 - (isnan(1.0) ? _4255 : (isnan(_4255) ? 1.0 : min(_4255, 1.0)))) * 5.0);
        float _2335 = 1.0 - _2294;
        float _2345 = (0.5 / (((_2071 * ((_2308 * _2335) + _2294)) + 9.9999999392252902907785028219223e-09) + (((_2071 * _2335) + _2294) * _2308))) * _2308;
        float _4266 = isnan(0.0) ? _2345 : (isnan(_2345) ? 0.0 : max(_2345, 0.0));
        float _2347 = (isnan(1.0) ? _4266 : (isnan(_4266) ? 1.0 : min(_4266, 1.0))) * (_2317 / ((_2321 * _2321) * 3.141590118408203125));
        float _2348 = isnan(1.0) ? _1918 : (isnan(_1918) ? 1.0 : min(_1918, 1.0));
        _2269 = (((((_2328 * _2093) + _827) * cbLight._m0[_2279].x) * _2347) * _2348) + _2205;
        _2271 = (((((_2328 * _2095) + _829) * cbLight._m0[_2279].y) * _2347) * _2348) + _2206;
        _2273 = (((((_2328 * _2096) + _830) * cbLight._m0[_2279].z) * _2347) * _2348) + _2207;
    }
    float _2383;
    float _2385;
    float _2387;
    if (_1997)
    {
        _2383 = _2269;
        _2385 = _2271;
        _2387 = _2273;
    }
    else
    {
        uint _2394 = _1903 + 3u;
        uint _2398 = _1903 + 11u;
        float _2412 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2394].w)) * _679) * 0.949999988079071044921875);
        float _2413 = _2412 * _2412;
        float _2414 = cbLight._m0[_2394].x + _756;
        float _2415 = cbLight._m0[_2394].y + _757;
        float _2416 = cbLight._m0[_2394].z + _758;
        float _2420 = inversesqrt(dot(vec3(_2414, _2415, _2416), vec3(_2414, _2415, _2416)));
        float _2421 = _2420 * _2414;
        float _2422 = _2420 * _2415;
        float _2423 = _2420 * _2416;
        float _2424 = dot(vec3(_676, _677, _678), vec3(cbLight._m0[_2394].xyz));
        float _4282 = isnan(0.0) ? _2424 : (isnan(_2424) ? 0.0 : max(_2424, 0.0));
        float _2427 = isnan(1.0) ? _4282 : (isnan(_4282) ? 1.0 : min(_4282, 1.0));
        float _2428 = dot(vec3(_676, _677, _678), vec3(_2421, _2422, _2423));
        float _4293 = isnan(0.0) ? _2428 : (isnan(_2428) ? 0.0 : max(_2428, 0.0));
        float _2431 = isnan(1.0) ? _4293 : (isnan(_4293) ? 1.0 : min(_4293, 1.0));
        float _2432 = dot(vec3(cbLight._m0[_2394].xyz), vec3(_2421, _2422, _2423));
        float _4304 = isnan(0.0) ? _2432 : (isnan(_2432) ? 0.0 : max(_2432, 0.0));
        float _2436 = _2413 * _2413;
        float _2440 = ((_2431 * _2431) * (_2436 + (-1.0))) + 1.0;
        float _2447 = exp2(log2(1.0 - (isnan(1.0) ? _4304 : (isnan(_4304) ? 1.0 : min(_4304, 1.0)))) * 5.0);
        float _2454 = 1.0 - _2413;
        float _2464 = (0.5 / (((_2071 * ((_2427 * _2454) + _2413)) + 9.9999999392252902907785028219223e-09) + (((_2071 * _2454) + _2413) * _2427))) * _2427;
        float _4315 = isnan(0.0) ? _2464 : (isnan(_2464) ? 0.0 : max(_2464, 0.0));
        float _2466 = (isnan(1.0) ? _4315 : (isnan(_4315) ? 1.0 : min(_4315, 1.0))) * (_2436 / ((_2440 * _2440) * 3.141590118408203125));
        float _2467 = isnan(1.0) ? _1919 : (isnan(_1919) ? 1.0 : min(_1919, 1.0));
        _2383 = (((((_2447 * _2093) + _827) * cbLight._m0[_2398].x) * _2466) * _2467) + _2269;
        _2385 = (((((_2447 * _2095) + _829) * cbLight._m0[_2398].y) * _2466) * _2467) + _2271;
        _2387 = (((((_2447 * _2096) + _830) * cbLight._m0[_2398].z) * _2466) * _2467) + _2273;
    }
    float _2602;
    float _2604;
    float _2606;
    float _2608;
    float _2610;
    float _2612;
    if (_1901.y == 0u)
    {
        float _2542 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2543 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2542;
        float _2544 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2542;
        float _2545 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2542;
        uvec4 _2557 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2558 = _2557.x;
        uint _2569 = uint((float(_2557.y) * floor(float(uint(cbSceneParam._m0[85u].y * _765) / _2558))) + floor(float(uint(cbSceneParam._m0[85u].x * _764) / _2558)));
        float _2579 = (log2(_2545 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2580 = isnan(0.0) ? _2579 : (isnan(_2579) ? 0.0 : max(_2579, 0.0));
        uint _2583 = uint(isnan(14.0) ? _2580 : (isnan(_2580) ? 14.0 : min(_2580, 14.0)));
        uvec4 _2588 = texelFetch(g_lightClusterGridBuffer, int(((_2583 << 2u) + (_2569 << 6u)) >> 2u));
        uint _2589 = _2588.x;
        uint _2590 = _2557.z;
        float _2690;
        float _2692;
        float _2694;
        float _2696;
        float _2698;
        float _2700;
        if (((((1u << ((_2590 >> 4u) & 15u)) + 4294967295u) & _2589) == 0u) || ((_2590 & 240u) == 0u))
        {
            _2690 = 0.0;
            _2692 = 0.0;
            _2694 = 0.0;
            _2696 = 0.0;
            _2698 = 0.0;
            _2700 = 0.0;
        }
        else
        {
            float _2691;
            float _2693;
            float _2695;
            float _2697;
            float _2699;
            float _2701;
            float _2834 = 0.0;
            float _2835 = 0.0;
            float _2836 = 0.0;
            float _2837 = 0.0;
            float _2838 = 0.0;
            float _2839 = 0.0;
            uint _2840 = 0u;
            uint _2849;
            bool _2850;
            for (;;)
            {
                _2849 = texelFetch(g_lightClassification, int((((_2583 << 5u) + (_2569 << 9u)) + (_2840 << 2u)) >> 2u)).x;
                _2850 = _2849 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2850)
                {
                    frontier_phi_61_pred = _2834;
                    frontier_phi_61_pred_1 = _2839;
                    frontier_phi_61_pred_2 = _2838;
                    frontier_phi_61_pred_3 = _2837;
                    frontier_phi_61_pred_4 = _2836;
                    frontier_phi_61_pred_5 = _2835;
                }
                else
                {
                    float _2958;
                    float _2959;
                    float _2960;
                    float _2961;
                    float _2962;
                    float _2963;
                    uint _2964;
                    _2958 = _2834;
                    _2959 = _2835;
                    _2960 = _2836;
                    _2961 = _2837;
                    _2962 = _2838;
                    _2963 = _2839;
                    _2964 = _2849;
                    float _2890;
                    float _2891;
                    float _2892;
                    float _2893;
                    float _2894;
                    float _2895;
                    for (;;)
                    {
                        uint _2968 = uint(findLSB(_2964)) + (_2840 << 5u);
                        uint _2965 = (_2964 + 4294967295u) & _2964;
                        uint _2970 = _2968 * 48u;
                        vec4 _2984 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2970)).x, texelFetch(g_PointLightRenderingBuffer, int(_2970 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2970 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2970 + 3u)).x));
                        uint _2990 = (_2968 * 48u) + 4u;
                        vec4 _3003 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2990)).x, texelFetch(g_PointLightRenderingBuffer, int(_2990 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2990 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2990 + 3u)).x));
                        uint _3009 = (_2968 * 48u) + 8u;
                        vec3 _3020 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3009)).x, texelFetch(g_PointLightRenderingBuffer, int(_3009 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3009 + 2u)).x));
                        float _3024 = _2984.x - _2543;
                        float _3025 = _2984.y - _2544;
                        float _3026 = _2984.z - _2545;
                        float _3027 = dot(vec3(_3024, _3025, _3026), vec3(_3024, _3025, _3026));
                        float _3030 = inversesqrt(_3027);
                        float _3031 = _3030 * _3024;
                        float _3032 = _3030 * _3025;
                        float _3033 = _3030 * _3026;
                        float _3034 = dot(vec3(_783, _786, _789), vec3(_3031, _3032, _3033));
                        float _3039 = 1.0 - (_3027 * _2984.w);
                        float _4341 = isnan(0.0) ? _3039 : (isnan(_3039) ? 0.0 : max(_3039, 0.0));
                        float _3040 = isnan(1.0) ? _4341 : (isnan(_4341) ? 1.0 : min(_4341, 1.0));
                        float _3041 = sqrt(_3027) * _3003.w;
                        float _3044 = 1.39999997615814208984375 / (_3041 + 1.39999997615814208984375);
                        float _3045 = _3044 * _3044;
                        float _3048 = ((1.0 - _3045) * _3034) + _3045;
                        float _3051 = _3041 * _3041;
                        float _3055 = ((isnan(0.0) ? _3048 : (isnan(_3048) ? 0.0 : max(_3048, 0.0))) * _3040) / ((_3051 * 0.699999988079071044921875) + 1.0);
                        float _3059 = (-0.0) - _2543;
                        float _3060 = (-0.0) - _2544;
                        float _3061 = (-0.0) - _2545;
                        float _3065 = inversesqrt(dot(vec3(_3059, _3060, _3061), vec3(_3059, _3060, _3061)));
                        float _3066 = _3065 * _3059;
                        float _3067 = _3065 * _3060;
                        float _3068 = _3065 * _3061;
                        float _3076 = exp2(log2(1.0 / ((_3051 * 3.5) + 5.0)) * 0.25);
                        float _3077 = 1.0 - _858;
                        float _3084 = sqrt(1.0 - ((1.0 - (_3077 * _3077)) * (1.0 - (_3076 * _3076))));
                        float _3085 = _3084 * _3084;
                        float _3086 = _3085 * _3085;
                        float _3087 = _3066 + _3031;
                        float _3088 = _3067 + _3032;
                        float _3089 = _3068 + _3033;
                        float _3093 = inversesqrt(dot(vec3(_3087, _3088, _3089), vec3(_3087, _3088, _3089)));
                        float _3097 = dot(vec3(_783, _786, _789), vec3(_3066, _3067, _3068));
                        float _4357 = isnan(0.0) ? _3097 : (isnan(_3097) ? 0.0 : max(_3097, 0.0));
                        float _3100 = isnan(1.0) ? _4357 : (isnan(_4357) ? 1.0 : min(_4357, 1.0));
                        float _3101 = dot(vec3(_783, _786, _789), vec3(_3093 * _3087, _3093 * _3088, _3093 * _3089));
                        float _4368 = isnan(0.0) ? _3101 : (isnan(_3101) ? 0.0 : max(_3101, 0.0));
                        float _3104 = isnan(1.0) ? _4368 : (isnan(_4368) ? 1.0 : min(_4368, 1.0));
                        float _3108 = ((_3104 * _3104) * (_3086 + (-1.0))) + 1.0;
                        float _3109 = _3044 * _3085;
                        float _3110 = _3109 * _3109;
                        float _3113 = ((1.0 - _3110) * _3034) + _3110;
                        float _4379 = isnan(0.0) ? _3113 : (isnan(_3113) ? 0.0 : max(_3113, 0.0));
                        float _3114 = isnan(1.0) ? _4379 : (isnan(_4379) ? 1.0 : min(_4379, 1.0));
                        float _3115 = 1.0 - _3085;
                        float _3125 = (0.5 / (((_3114 * ((_3100 * _3115) + _3085)) + 9.9999999392252902907785028219223e-09) + (((_3114 * _3115) + _3085) * _3100))) * _3114;
                        float _4390 = isnan(0.0) ? _3125 : (isnan(_3125) ? 0.0 : max(_3125, 0.0));
                        float _3136 = (((_3086 * 3.1415927410125732421875) * (isnan(1.0) ? _4390 : (isnan(_4390) ? 1.0 : min(_4390, 1.0)))) / ((_3108 * _3108) * ((_3051 * 2.1991131305694580078125) + 3.141590118408203125))) * _3040;
                        _2893 = (_3055 * _3003.x) + _2961;
                        _2894 = (_3055 * _3003.y) + _2962;
                        _2895 = (_3055 * _3003.z) + _2963;
                        _2890 = (_3136 * _3020.x) + _2958;
                        _2891 = (_3136 * _3020.y) + _2959;
                        _2892 = (_3136 * _3020.z) + _2960;
                        if (_2965 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2958 = _2890;
                            _2959 = _2891;
                            _2960 = _2892;
                            _2961 = _2893;
                            _2962 = _2894;
                            _2963 = _2895;
                            _2964 = _2965;
                        }
                    }
                    frontier_phi_61_pred = _2890;
                    frontier_phi_61_pred_1 = _2895;
                    frontier_phi_61_pred_2 = _2894;
                    frontier_phi_61_pred_3 = _2893;
                    frontier_phi_61_pred_4 = _2892;
                    frontier_phi_61_pred_5 = _2891;
                }
                _2691 = frontier_phi_61_pred;
                _2701 = frontier_phi_61_pred_1;
                _2699 = frontier_phi_61_pred_2;
                _2697 = frontier_phi_61_pred_3;
                _2695 = frontier_phi_61_pred_4;
                _2693 = frontier_phi_61_pred_5;
                uint _2841 = _2840 + 1u;
                if (_2841 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2834 = _2691;
                    _2835 = _2693;
                    _2836 = _2695;
                    _2837 = _2697;
                    _2838 = _2699;
                    _2839 = _2701;
                    _2840 = _2841;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2690 = _2691;
            _2692 = _2693;
            _2694 = _2695;
            _2696 = _2697;
            _2698 = _2699;
            _2700 = _2701;
        }
        uvec4 _2704 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2705 = _2704.z;
        uint _2707 = (_2705 >> 8u) & 15u;
        float _2802;
        float _2804;
        float _2806;
        float _2808;
        float _2810;
        float _2812;
        if (((4294967295u << _2707) & _2589) == 0u)
        {
            _2802 = _2690;
            _2804 = _2692;
            _2806 = _2694;
            _2808 = _2696;
            _2810 = _2698;
            _2812 = _2700;
        }
        else
        {
            float _2827 = inversesqrt(dot(vec3(_2543, _2544, _2545), vec3(_2543, _2544, _2545)));
            float _2828 = _2827 * _2543;
            float _2829 = _2827 * _2544;
            float _2830 = _2827 * _2545;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2707 < ((_2705 >> 12u) & 15u))
            {
                float _2803;
                float _2805;
                float _2807;
                float _2809;
                float _2811;
                float _2813;
                float _2941 = _2690;
                float _2942 = _2692;
                float _2943 = _2694;
                float _2944 = _2696;
                float _2945 = _2698;
                float _2946 = _2700;
                uint _2947 = _2707;
                uint _2956;
                bool _2957;
                for (;;)
                {
                    _2956 = texelFetch(g_lightClassification, int((((_2583 << 5u) + (_2569 << 9u)) + (_2947 << 2u)) >> 2u)).x;
                    _2957 = _2956 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2957)
                    {
                        frontier_phi_67_pred = _2944;
                        frontier_phi_67_pred_1 = _2945;
                        frontier_phi_67_pred_2 = _2946;
                        frontier_phi_67_pred_3 = _2943;
                        frontier_phi_67_pred_4 = _2942;
                        frontier_phi_67_pred_5 = _2941;
                    }
                    else
                    {
                        float _3141;
                        float _3142;
                        float _3143;
                        float _3144;
                        float _3145;
                        float _3146;
                        float _3435;
                        float _3436;
                        float _3437;
                        float _3438;
                        float _3439;
                        float _3440;
                        float _3154 = _2941;
                        float _3155 = _2942;
                        float _3156 = _2943;
                        float _3157 = _2944;
                        float _3158 = _2945;
                        float _3159 = _2946;
                        uint _3160 = _2956;
                        uint _3161;
                        vec4 _3186;
                        float _3187;
                        vec4 _3202;
                        vec3 _3214;
                        vec4 _3229;
                        vec4 _3244;
                        float _3291;
                        bool _3292;
                        for (;;)
                        {
                            uint _3171 = ((_2947 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3160));
                            _3161 = (_3160 + 4294967295u) & _3160;
                            uint _3173 = _3171 * 40u;
                            _3186 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3173)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3173 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3173 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3173 + 3u)).x));
                            _3187 = _3186.w;
                            uint _3189 = (_3171 * 40u) + 4u;
                            _3202 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3189)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3189 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3189 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3189 + 3u)).x));
                            uint _3204 = (_3171 * 40u) + 8u;
                            _3214 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3204)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3204 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3204 + 2u)).x));
                            uint _3216 = (_3171 * 40u) + 16u;
                            _3229 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3216)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3216 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3216 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3216 + 3u)).x));
                            uint _3231 = (_3171 * 40u) + 20u;
                            _3244 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3231)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3231 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3231 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3231 + 3u)).x));
                            uint _3247 = (_3171 * 40u) + 24u;
                            vec4 _3260 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3247)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3247 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3247 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3247 + 3u)).x));
                            uint _3266 = (_3171 * 40u) + 28u;
                            vec4 _3279 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3266)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3266 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3266 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3266 + 3u)).x));
                            _3291 = fma(_2545, _3279.z, fma(_2544, _3279.y, _3279.x * _2543)) + _3279.w;
                            _3292 = !((fma(_2545, _3260.z, fma(_2544, _3260.y, _3260.x * _2543)) + _3260.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3292)
                            {
                                float _3319 = _3186.x - _2543;
                                float _3320 = _3186.y - _2544;
                                float _3321 = _3186.z - _2545;
                                float _3322 = dot(vec3(_3319, _3320, _3321), vec3(_3319, _3320, _3321));
                                float _3325 = inversesqrt(_3322);
                                float _3326 = _3325 * _3319;
                                float _3327 = _3325 * _3320;
                                float _3328 = _3325 * _3321;
                                float _3332 = 1.0 - (_3322 / (_3187 * _3187));
                                float _4401 = isnan(0.0) ? _3332 : (isnan(_3332) ? 0.0 : max(_3332, 0.0));
                                float _3333 = isnan(1.0) ? _4401 : (isnan(_4401) ? 1.0 : min(_4401, 1.0));
                                float _3337 = sqrt(_3322) * _3202.w;
                                float _3339 = 1.39999997615814208984375 / (_3337 + 1.39999997615814208984375);
                                float _3340 = _3339 * _3339;
                                float _3343 = ((1.0 - _3340) * dot(vec3(_3326, _3327, _3328), vec3(_783, _786, _789))) + _3340;
                                float _3346 = _3337 * _3337;
                                float _3350 = (fma(_2545, _3229.z, fma(_2544, _3229.y, _3229.x * _2543)) + _3229.w) / _3291;
                                float _3351 = (fma(_2545, _3244.z, fma(_2544, _3244.y, _3244.x * _2543)) + _3244.w) / _3291;
                                float _3355 = 1.0 - dot(vec2(_3350, _3351), vec2(_3350, _3351));
                                float _4417 = isnan(0.0) ? _3355 : (isnan(_3355) ? 0.0 : max(_3355, 0.0));
                                float _3356 = isnan(1.0) ? _4417 : (isnan(_4417) ? 1.0 : min(_4417, 1.0));
                                float _3357 = _3356 * (((isnan(0.0) ? _3343 : (isnan(_3343) ? 0.0 : max(_3343, 0.0))) * _3333) / ((_3346 * 0.699999988079071044921875) + 1.0));
                                float _3369 = exp2(log2(1.0 / ((_3346 * 3.5) + 5.0)) * 0.25);
                                float _3370 = 1.0 - _858;
                                float _3377 = sqrt(1.0 - ((1.0 - (_3370 * _3370)) * (1.0 - (_3369 * _3369))));
                                float _3378 = _3377 * _3377;
                                float _3379 = _3378 * _3378;
                                float _3380 = _3326 - _2828;
                                float _3381 = _3327 - _2829;
                                float _3382 = _3328 - _2830;
                                float _3386 = inversesqrt(dot(vec3(_3380, _3381, _3382), vec3(_3380, _3381, _3382)));
                                float _3390 = dot(vec3(_783, _786, _789), vec3((-0.0) - _2828, (-0.0) - _2829, (-0.0) - _2830));
                                float _4428 = isnan(0.0) ? _3390 : (isnan(_3390) ? 0.0 : max(_3390, 0.0));
                                float _3393 = isnan(1.0) ? _4428 : (isnan(_4428) ? 1.0 : min(_4428, 1.0));
                                float _3394 = dot(vec3(_783, _786, _789), vec3(_3386 * _3380, _3386 * _3381, _3386 * _3382));
                                float _4439 = isnan(0.0) ? _3394 : (isnan(_3394) ? 0.0 : max(_3394, 0.0));
                                float _3397 = isnan(1.0) ? _4439 : (isnan(_4439) ? 1.0 : min(_4439, 1.0));
                                float _3401 = ((_3397 * _3397) * (_3379 + (-1.0))) + 1.0;
                                float _3402 = _3339 * _3378;
                                float _3403 = _3402 * _3402;
                                float _3409 = ((1.0 - _3403) * dot(vec3(_783, _786, _789), vec3(_3326, _3327, _3328))) + _3403;
                                float _4450 = isnan(0.0) ? _3409 : (isnan(_3409) ? 0.0 : max(_3409, 0.0));
                                float _3410 = isnan(1.0) ? _4450 : (isnan(_4450) ? 1.0 : min(_4450, 1.0));
                                float _3411 = 1.0 - _3378;
                                float _3421 = (0.5 / (((_3410 * ((_3393 * _3411) + _3378)) + 9.9999999392252902907785028219223e-09) + (((_3410 * _3411) + _3378) * _3393))) * _3410;
                                float _4461 = isnan(0.0) ? _3421 : (isnan(_3421) ? 0.0 : max(_3421, 0.0));
                                float _3431 = (_3356 * _3333) * (((_3379 * 3.1415927410125732421875) * (isnan(1.0) ? _4461 : (isnan(_4461) ? 1.0 : min(_4461, 1.0)))) / ((_3401 * _3401) * ((_3346 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3431 * _3214.x;
                                frontier_phi_73_pred_1 = _3431 * _3214.y;
                                frontier_phi_73_pred_2 = _3357 * _3202.z;
                                frontier_phi_73_pred_3 = _3357 * _3202.y;
                                frontier_phi_73_pred_4 = _3357 * _3202.x;
                                frontier_phi_73_pred_5 = _3431 * _3214.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3435 = frontier_phi_73_pred;
                            _3436 = frontier_phi_73_pred_1;
                            _3440 = frontier_phi_73_pred_2;
                            _3439 = frontier_phi_73_pred_3;
                            _3438 = frontier_phi_73_pred_4;
                            _3437 = frontier_phi_73_pred_5;
                            _3144 = _3438 + _3157;
                            _3145 = _3439 + _3158;
                            _3146 = _3440 + _3159;
                            _3141 = _3435 + _3154;
                            _3142 = _3436 + _3155;
                            _3143 = _3437 + _3156;
                            if (_3161 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3154 = _3141;
                                _3155 = _3142;
                                _3156 = _3143;
                                _3157 = _3144;
                                _3158 = _3145;
                                _3159 = _3146;
                                _3160 = _3161;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3144;
                        frontier_phi_67_pred_1 = _3145;
                        frontier_phi_67_pred_2 = _3146;
                        frontier_phi_67_pred_3 = _3143;
                        frontier_phi_67_pred_4 = _3142;
                        frontier_phi_67_pred_5 = _3141;
                    }
                    _2809 = frontier_phi_67_pred;
                    _2811 = frontier_phi_67_pred_1;
                    _2813 = frontier_phi_67_pred_2;
                    _2807 = frontier_phi_67_pred_3;
                    _2805 = frontier_phi_67_pred_4;
                    _2803 = frontier_phi_67_pred_5;
                    uint _2948 = _2947 + 1u;
                    if (_2948 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2941 = _2803;
                        _2942 = _2805;
                        _2943 = _2807;
                        _2944 = _2809;
                        _2945 = _2811;
                        _2946 = _2813;
                        _2947 = _2948;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2811;
                frontier_phi_55_56_ladder_1 = _2813;
                frontier_phi_55_56_ladder_2 = _2809;
                frontier_phi_55_56_ladder_3 = _2807;
                frontier_phi_55_56_ladder_4 = _2805;
                frontier_phi_55_56_ladder_5 = _2803;
            }
            else
            {
                frontier_phi_55_56_ladder = _2698;
                frontier_phi_55_56_ladder_1 = _2700;
                frontier_phi_55_56_ladder_2 = _2696;
                frontier_phi_55_56_ladder_3 = _2694;
                frontier_phi_55_56_ladder_4 = _2692;
                frontier_phi_55_56_ladder_5 = _2690;
            }
            _2802 = frontier_phi_55_56_ladder_5;
            _2804 = frontier_phi_55_56_ladder_4;
            _2806 = frontier_phi_55_56_ladder_3;
            _2808 = frontier_phi_55_56_ladder_2;
            _2810 = frontier_phi_55_56_ladder;
            _2812 = frontier_phi_55_56_ladder_1;
        }
        float _2817 = isnan(1.0) ? _842 : (isnan(_842) ? 1.0 : min(_842, 1.0));
        _2602 = (_2817 * _2808) + _2035;
        _2604 = (_2817 * _2810) + _2037;
        _2606 = (_2817 * _2812) + _2039;
        _2608 = ((_2802 * _827) * _2817) + _2383;
        _2610 = ((_2804 * _829) * _2817) + _2385;
        _2612 = ((_2806 * _830) * _2817) + _2387;
    }
    else
    {
        _2602 = _2035;
        _2604 = _2037;
        _2606 = _2039;
        _2608 = _2383;
        _2610 = _2385;
        _2612 = _2387;
    }
    float _4477 = isnan(0.0) ? _817 : (isnan(_817) ? 0.0 : max(_817, 0.0));
    float _4488 = isnan(0.0) ? _818 : (isnan(_818) ? 0.0 : max(_818, 0.0));
    float _4499 = isnan(0.0) ? _819 : (isnan(_819) ? 0.0 : max(_819, 0.0));
    uint _2632 = _802 + 6u;
    float _2640 = _764 / cbSceneParam._m0[86u].x;
    float _2641 = _765 / cbSceneParam._m0[86u].y;
    vec4 _2655 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2640, _2641, (log2((isnan(cbSceneParam._m0[77u].w) ? _699 : (isnan(_699) ? cbSceneParam._m0[77u].w : min(_699, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2657 = _2655.x;
    float _2658 = _2655.y;
    float _2659 = _2655.z;
    float _2660 = _2655.w;
    float _2752;
    float _2754;
    float _2756;
    float _2758;
    if (_699 > cbSceneParam._m0[78u].w)
    {
        float _2715 = isnan(_699) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _699 : min(cbSceneParam._m0[80u].w, _699));
        float _2716 = _2715 / _699;
        float _2727 = _2716 * _749;
        float _2728 = _750 * _2716;
        float _2729 = (-0.0) - _2728;
        float _2730 = _2716 * _751;
        float _2732 = (cbSceneParam._m0[77u].w * _2729) / _2715;
        float _2733 = _2732 + cbSceneParam._m0[79u].w;
        float _2734 = cbSceneParam._m0[79u].w - _2728;
        float _2740 = sqrt(((_2727 * _2727) + (_2728 * _2728)) + (_2730 * _2730));
        float _2743 = (1.0 - (cbSceneParam._m0[77u].w / _2715)) * _2740;
        float _2748 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2750 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2903;
        if (abs((_2729 - _2732) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2903 = ((((_2733 > 0.0) ? exp2(_2748 * _2733) : (2.0 - exp2(_2750 * _2733))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2743;
        }
        else
        {
            float _2863 = 1.0 / cbSceneParam._m0[80u].x;
            float _2864 = isnan(_2734) ? _2733 : (isnan(_2733) ? _2734 : max(_2733, _2734));
            float _2865 = isnan(_2734) ? _2733 : (isnan(_2733) ? _2734 : min(_2733, _2734));
            float _2874 = isnan(0.0) ? _2864 : (isnan(_2864) ? 0.0 : min(_2864, 0.0));
            float _2875 = isnan(0.0) ? _2865 : (isnan(_2865) ? 0.0 : min(_2865, 0.0));
            _2903 = ((abs(_2740 / _2729) * cbSceneParam._m0[80u].y) * ((((_2874 - _2875) * 2.0) - ((exp2(_2748 * (isnan(0.0) ? _2864 : (isnan(_2864) ? 0.0 : max(_2864, 0.0)))) - exp2(_2748 * (isnan(0.0) ? _2865 : (isnan(_2865) ? 0.0 : max(_2865, 0.0))))) * _2863)) - ((exp2(_2750 * _2874) - exp2(_2750 * _2875)) * _2863))) + (_2743 * cbSceneParam._m0[80u].z);
        }
        vec4 _2905 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2640, _2641, 1.0), 0.0);
        float _2914 = exp2((_2903 * (-1.44269502162933349609375)) * (1.0 - _2905.w));
        float _2915 = log2(_2914);
        float _2931 = log2(_2660);
        _2752 = (exp2(_2931 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2915 * cbSceneParam._m0[78u].x)) * _2905.x) / cbSceneParam._m0[78u].x)) + _2657;
        _2754 = (exp2(_2931 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2915 * cbSceneParam._m0[78u].y)) * _2905.y) / cbSceneParam._m0[78u].y)) + _2658;
        _2756 = (exp2(_2931 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2915 * cbSceneParam._m0[78u].z)) * _2905.z) / cbSceneParam._m0[78u].z)) + _2659;
        _2758 = _2914 * _2660;
    }
    else
    {
        _2752 = _2657;
        _2754 = _2658;
        _2756 = _2659;
        _2758 = _2660;
    }
    float _2770 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2771 = _2770 == 3.0;
    float _2772 = log2(_2758);
    float _2779 = exp2(_2772 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4477 : (isnan(_4477) ? 1.0 : min(_4477, 1.0))) * (_2602 + ((isnan(0.0) ? _1573 : (isnan(_1573) ? 0.0 : max(_1573, 0.0))) * _842))) + ((_2608 + ((isnan(0.0) ? _1867 : (isnan(_1867) ? 0.0 : max(_1867, 0.0))) * _1652)) * cbPerFrame._m0[3u].x));
    float _2780 = exp2(_2772 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4488 : (isnan(_4488) ? 1.0 : min(_4488, 1.0))) * (_2604 + ((isnan(0.0) ? _1576 : (isnan(_1576) ? 0.0 : max(_1576, 0.0))) * _842))) + ((_2610 + ((isnan(0.0) ? _1870 : (isnan(_1870) ? 0.0 : max(_1870, 0.0))) * _1652)) * cbPerFrame._m0[3u].x));
    float _2781 = exp2(_2772 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4499 : (isnan(_4499) ? 1.0 : min(_4499, 1.0))) * (_2606 + ((isnan(0.0) ? _1579 : (isnan(_1579) ? 0.0 : max(_1579, 0.0))) * _842))) + ((_2612 + ((isnan(0.0) ? _1873 : (isnan(_1873) ? 0.0 : max(_1873, 0.0))) * _1652)) * cbPerFrame._m0[3u].x));
    float _2790 = (_2770 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2790 * (_2771 ? _2779 : (_2779 + (cbSceneParam._m0[72u].w * _2752)));
    SV_Target.y = _2790 * (_2771 ? _2780 : (_2780 + (cbSceneParam._m0[72u].w * _2754)));
    SV_Target.z = _2790 * (_2771 ? _2781 : (_2781 + (cbSceneParam._m0[72u].w * _2756)));
    SV_Target.w = cbInstanceData._m0[_2632].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2632].w;
}


