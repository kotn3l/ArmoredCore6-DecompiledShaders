#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[20];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_19;
layout(set = 0, binding = 11) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_3;
layout(set = 0, binding = 14) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_5;
layout(set = 0, binding = 15) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_6;
layout(set = 0, binding = 17) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_8;
layout(set = 0, binding = 2) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_11;
layout(set = 0, binding = 5) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_14;
layout(set = 0, binding = 6) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_15;
layout(set = 0, binding = 7) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_16;
layout(set = 0, binding = 8) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_17;
layout(set = 0, binding = 9) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_18;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1230;
float _3896;
float _3897;
float _3898;
float _3899;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _205 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _206 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _207 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _213 = inversesqrt(dot(vec3(_205, _206, _207), vec3(_205, _206, _207)));
    float _220 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _227 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _250 = sin(cbMtdParam._m0[18u].x);
    float _251 = cos(cbMtdParam._m0[18u].x);
    float _252 = TEXCOORD.x - cbMtdParam._m0[17u].w;
    float _253 = TEXCOORD.y - cbMtdParam._m0[17u].w;
    float _261 = (cbMtdParam._m0[17u].w + cbMtdParam._m0[19u].y) + fma(_253, (-0.0) - _250, _251 * _252);
    float _263 = (cbMtdParam._m0[17u].w + cbMtdParam._m0[19u].z) + fma(_253, _251, _252 * _250);
    vec4 _276 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * _261) + cbTextureTilingScale._m0[1u].z, (_263 * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w));
    float _282 = _276.x * cbMtdParam._m0[10u].x;
    float _283 = _276.y * cbMtdParam._m0[10u].y;
    float _284 = _276.z * cbMtdParam._m0[10u].z;
    vec4 _302 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w));
    vec4 _321 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_0, SS_WrapLinear), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _346 = cbMtdParam._m0[19u].x * texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.x) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD.y) + cbTextureTilingScale._m0[13u].w)).x;
    float _357 = ((cbMtdParam._m0[15u].x * (-1.39999997615814208984375)) * (((1.0 - _321.x) * 2.0) - _346)) + 1.0;
    float _3908 = isnan(0.0) ? _357 : (isnan(_357) ? 0.0 : max(_357, 0.0));
    float _358 = isnan(1.0) ? _3908 : (isnan(_3908) ? 1.0 : min(_3908, 1.0));
    float _365 = (_358 * ((_302.x * cbMtdParam._m0[11u].x) - _282)) + _282;
    float _366 = (_358 * ((_302.y * cbMtdParam._m0[11u].y) - _283)) + _283;
    float _367 = (_358 * ((_302.z * cbMtdParam._m0[11u].z) - _284)) + _284;
    vec4 _385 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_8, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[17u].x * TEXCOORD.x) + cbTextureTilingScale._m0[17u].z, (cbTextureTilingScale._m0[17u].y * TEXCOORD.y) + cbTextureTilingScale._m0[17u].w));
    float _398 = (((((1.0 - _321.y) * 2.0) - _346) * (-1.39999997615814208984375)) * cbMtdParam._m0[18u].z) + 1.0;
    float _3919 = isnan(0.0) ? _398 : (isnan(_398) ? 0.0 : max(_398, 0.0));
    float _399 = isnan(1.0) ? _3919 : (isnan(_3919) ? 1.0 : min(_3919, 1.0));
    float _406 = (((_385.x * cbMtdParam._m0[12u].x) - _365) * _399) + _365;
    float _407 = (_399 * ((_385.y * cbMtdParam._m0[12u].y) - _366)) + _366;
    float _408 = (_399 * ((_385.z * cbMtdParam._m0[12u].z) - _367)) + _367;
    vec4 _425 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _438 = (((((1.0 - _321.z) * 2.0) - _346) * (-1.39999997615814208984375)) * cbMtdParam._m0[18u].w) + 1.0;
    float _3930 = isnan(0.0) ? _438 : (isnan(_438) ? 0.0 : max(_438, 0.0));
    float _439 = isnan(1.0) ? _3930 : (isnan(_3930) ? 1.0 : min(_3930, 1.0));
    float _446 = (((_425.x * cbMtdParam._m0[13u].x) - _406) * _439) + _406;
    float _447 = (_439 * ((_425.y * cbMtdParam._m0[13u].y) - _407)) + _407;
    float _448 = (_439 * ((_425.z * cbMtdParam._m0[13u].z) - _408)) + _408;
    vec4 _461 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * _261) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _263) + cbTextureTilingScale._m0[5u].w));
    float _463 = _461.x;
    float _481 = ((texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w)).x - _463) * _358) + _463;
    float _499 = ((texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w)).x - _481) * _399) + _481;
    float _518 = (((texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w)).x - _499) * _439) + _499) * cbMtdParam._m0[18u].y;
    vec4 _531 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[14u].x * _261) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _263) + cbTextureTilingScale._m0[14u].w));
    float _533 = _531.x;
    float _534 = _531.y;
    float _537 = cbMtdParam._m0[17u].y * _531.z;
    vec4 _549 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * TEXCOORD.x) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * TEXCOORD.y) + cbTextureTilingScale._m0[15u].w));
    float _558 = (((cbMtdParam._m0[17u].x * _549.z) - _537) * _358) + _537;
    vec4 _571 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_15, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _583 = (((cbMtdParam._m0[16u].w * _571.z) - _558) * _399) + _558;
    vec4 _596 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _605 = (((cbMtdParam._m0[16u].z * _596.z) - _583) * _439) + _583;
    float _610 = ((_549.x - _533) * _358) + _533;
    float _611 = ((_549.y - _534) * _358) + _534;
    float _616 = ((_571.x - _610) * _399) + _610;
    float _617 = ((_571.y - _611) * _399) + _611;
    float _626 = ((((_596.x - _616) * _439) + _616) * 2.0) + (-1.0);
    float _628 = ((((_596.y - _617) * _439) + _617) * 2.0) + (-1.0);
    float _629 = dot(vec2(_626, _628), vec2(_626, _628));
    float _3941 = isnan(0.0) ? _629 : (isnan(_629) ? 0.0 : max(_629, 0.0));
    float _634 = sqrt(1.0 - (isnan(1.0) ? _3941 : (isnan(_3941) ? 1.0 : min(_3941, 1.0))));
    float _637 = fma(_634, _220 * NORMAL.x, fma(_628, _227 * TANGENT.x, (_213 * _205) * _626));
    float _640 = fma(_634, _220 * NORMAL.y, fma(_628, _227 * TANGENT.y, (_213 * _206) * _626));
    float _643 = fma(_634, _220 * NORMAL.z, fma(_628, _227 * TANGENT.z, (_213 * _207) * _626));
    float _647 = inversesqrt(dot(vec3(_637, _640, _643), vec3(_637, _640, _643)));
    float _648 = _647 * _637;
    float _649 = _647 * _640;
    float _650 = _647 * _643;
    float _3952 = isnan(0.0) ? _605 : (isnan(_605) ? 0.0 : max(_605, 0.0));
    float _651 = isnan(1.0) ? _3952 : (isnan(_3952) ? 1.0 : min(_3952, 1.0));
    float _3963 = isnan(0.0) ? _446 : (isnan(_446) ? 0.0 : max(_446, 0.0));
    float _3974 = isnan(0.0) ? _447 : (isnan(_447) ? 0.0 : max(_447, 0.0));
    float _3985 = isnan(0.0) ? _448 : (isnan(_448) ? 0.0 : max(_448, 0.0));
    float _3996 = isnan(0.0) ? _518 : (isnan(_518) ? 0.0 : max(_518, 0.0));
    float _655 = isnan(1.0) ? _3996 : (isnan(_3996) ? 1.0 : min(_3996, 1.0));
    float _671 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _711 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _721 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _711);
    float _722 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _711);
    float _723 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _711);
    float _727 = inversesqrt(dot(vec3(_721, _722, _723), vec3(_721, _722, _723)));
    float _728 = _721 * _727;
    float _729 = _722 * _727;
    float _730 = _723 * _727;
    vec4 _735 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _737 = _735.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _909 = sqrt(((_721 * _721) + (_722 * _722)) + (_723 * _723));
        float _915 = (cbMatDynParam._m0[5u].x * _909) + cbMatDynParam._m0[5u].y;
        float _4007 = isnan(0.0) ? _915 : (isnan(_915) ? 0.0 : max(_915, 0.0));
        float _916 = isnan(1.0) ? _4007 : (isnan(_4007) ? 1.0 : min(_4007, 1.0));
        float _920 = (cbMatDynParam._m0[5u].z * _909) + cbMatDynParam._m0[5u].w;
        float _4018 = isnan(0.0) ? _920 : (isnan(_920) ? 0.0 : max(_920, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4018 : (isnan(_4018) ? 1.0 : min(_4018, 1.0))) - _916)) + _916) < ((_737 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _748 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _749 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _767 = fma(_650, cbSceneParam._m0[5u].z, fma(_649, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _648));
    float _770 = fma(_650, cbSceneParam._m0[6u].z, fma(_649, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _648));
    float _773 = fma(_650, cbSceneParam._m0[7u].z, fma(_649, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _648));
    uint _786 = uint(roundEven(NORMAL.w)) * 13u;
    uint _787 = _786 + 9u;
    uint _788 = _787 + uint(cbMatDynParam._m0[0u].w);
    float _794 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3963 : (isnan(_3963) ? 1.0 : min(_3963, 1.0)))) * cbInstanceData._m0[_788].x;
    float _795 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3974 : (isnan(_3974) ? 1.0 : min(_3974, 1.0)))) * cbInstanceData._m0[_788].y;
    float _796 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3985 : (isnan(_3985) ? 1.0 : min(_3985, 1.0)))) * cbInstanceData._m0[_788].z;
    float _4029 = isnan(0.0) ? _794 : (isnan(_794) ? 0.0 : max(_794, 0.0));
    float _797 = isnan(1.0) ? _4029 : (isnan(_4029) ? 1.0 : min(_4029, 1.0));
    float _4040 = isnan(0.0) ? _795 : (isnan(_795) ? 0.0 : max(_795, 0.0));
    float _798 = isnan(1.0) ? _4040 : (isnan(_4040) ? 1.0 : min(_4040, 1.0));
    float _4051 = isnan(0.0) ? _796 : (isnan(_796) ? 0.0 : max(_796, 0.0));
    float _799 = isnan(1.0) ? _4051 : (isnan(_4051) ? 1.0 : min(_4051, 1.0));
    float _800 = 1.0 - _655;
    float _801 = _797 * _800;
    float _802 = _798 * _800;
    float _803 = _799 * _800;
    float _808 = (_797 + (-0.039999999105930328369140625)) * _655;
    float _809 = (_798 + (-0.039999999105930328369140625)) * _655;
    float _810 = (_799 + (-0.039999999105930328369140625)) * _655;
    float _811 = _808 + 0.039999999105930328369140625;
    float _813 = _809 + 0.039999999105930328369140625;
    float _814 = _810 + 0.039999999105930328369140625;
    vec4 _823 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _748, cbSceneParam._m0[86u].y * _749));
    float _826 = _823.x * TEXCOORD_5.w;
    float _827 = dot(vec3(_648, _649, _650), vec3(_728, _729, _730));
    float _830 = _827 * 2.0;
    float _834 = (_830 * _648) - _728;
    float _835 = (_830 * _649) - _729;
    float _836 = (_830 * _650) - _730;
    float _840 = abs(dot(vec3(_728, _729, _730), vec3(_648, _649, _650)));
    float _4062 = isnan(0.0) ? _840 : (isnan(_840) ? 0.0 : max(_840, 0.0));
    float _842 = sqrt(_651);
    float _855 = exp2((_842 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4062 : (isnan(_4062) ? 1.0 : min(_4062, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_842 * 3.0));
    float _861 = (1.0 - _855) * ((_842 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _862 = _855 * _842;
    float _890 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _894 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _898 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1229;
    float _1231;
    float _1232;
    float _1233;
    float _1234;
    float _1235;
    float _1236;
    float _1237;
    float _1238;
    float _1239;
    float _1240;
    float _1241;
    float _1242;
    float _1243;
    float _1244;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _954 = fma(_898, cbModelParam._m0[26u].z, fma(_894, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _890));
        float _958 = fma(_898, cbModelParam._m0[27u].z, fma(_894, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _890));
        float _962 = fma(_898, cbModelParam._m0[28u].z, fma(_894, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _890));
        float _987 = _890 + _648;
        float _988 = _894 + _649;
        float _989 = _898 + _650;
        float _999 = fma(_989, cbModelParam._m0[26u].z, fma(_988, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _987)) - _954;
        float _1000 = fma(_989, cbModelParam._m0[27u].z, fma(_988, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _987)) - _958;
        float _1001 = fma(_989, cbModelParam._m0[28u].z, fma(_988, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _987)) - _962;
        float _1005 = inversesqrt(dot(vec3(_999, _1000, _1001), vec3(_999, _1000, _1001)));
        float _1018 = ((_1005 * _999) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_954 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1019 = ((_1005 * _1000) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_958 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1020 = ((_1005 * _1001) / cbModelParam._m0[34u].z) + ((((((_962 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1023 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1018, _1019, _1020), 0.0);
        vec4 _1030 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1018, _1019, _1020), 0.0);
        vec4 _1037 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1018, _1019, _1020), 0.0);
        vec4 _1044 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1018, _1019, _1020), 0.0);
        float _1057 = exp2((_1023.w + (-0.5)) * 20.0) * 2.0;
        float _1058 = _1057 * (_1023.x + (-0.5));
        float _1059 = _1057 * (_1023.y + (-0.5));
        float _1060 = _1057 * (_1023.z + (-0.5));
        float _1067 = exp2((_1030.w + (-0.5)) * 20.0) * 2.0;
        float _1068 = _1067 * (_1030.x + (-0.5));
        float _1069 = _1067 * (_1030.y + (-0.5));
        float _1070 = _1067 * (_1030.z + (-0.5));
        float _1077 = exp2((_1037.w + (-0.5)) * 20.0) * 2.0;
        float _1078 = _1077 * (_1037.x + (-0.5));
        float _1079 = _1077 * (_1037.y + (-0.5));
        float _1080 = _1077 * (_1037.z + (-0.5));
        float _1087 = exp2((_1044.w + (-0.5)) * 20.0) * 2.0;
        float _1088 = _1087 * (_1044.x + (-0.5));
        float _1089 = _1087 * (_1044.y + (-0.5));
        float _1090 = _1087 * (_1044.z + (-0.5));
        float _1091 = isnan(0.0) ? _1088 : (isnan(_1088) ? 0.0 : max(_1088, 0.0));
        float _1092 = isnan(0.0) ? _1089 : (isnan(_1089) ? 0.0 : max(_1089, 0.0));
        float _1093 = isnan(0.0) ? _1090 : (isnan(_1090) ? 0.0 : max(_1090, 0.0));
        float _1094 = _1058 * 0.5;
        float _1095 = _1068 * 0.5;
        float _1096 = _1078 * 0.5;
        float _1097 = dot(vec3(_1094, _1095, _1096), vec3(_1094, _1095, _1096));
        float _1102 = (_1097 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1097);
        float _1111 = (dot(vec3(_648, _649, _650), vec3(_1102 * _1094, _1102 * _1095, _1102 * _1096)) + 1.0) * 0.5;
        float _4088 = isnan(0.0) ? _1111 : (isnan(_1111) ? 0.0 : max(_1111, 0.0));
        float _1121 = sqrt(((_1095 * _1095) + (_1094 * _1094)) + (_1096 * _1096)) / (_1091 + 9.9999997473787516355514526367188e-06);
        float _4099 = isnan(0.0) ? _1121 : (isnan(_1121) ? 0.0 : max(_1121, 0.0));
        float _1122 = isnan(1.0) ? _4099 : (isnan(_4099) ? 1.0 : min(_4099, 1.0));
        float _1123 = _1122 * 2.0;
        float _1127 = (1.0 - _1122) / (_1122 + 1.0);
        float _4110 = isnan(0.0) ? _1127 : (isnan(_1127) ? 0.0 : max(_1127, 0.0));
        float _1128 = isnan(1.0) ? _4110 : (isnan(_4110) ? 1.0 : min(_4110, 1.0));
        float _1137 = ((((1.0 - _1128) * (_1123 + 2.0)) * exp2(log2(isnan(1.0) ? _4088 : (isnan(_4088) ? 1.0 : min(_4088, 1.0))) * (_1123 + 1.0))) + _1128) * _1091;
        float _1138 = _1059 * 0.5;
        float _1139 = _1069 * 0.5;
        float _1140 = _1079 * 0.5;
        float _1141 = dot(vec3(_1138, _1139, _1140), vec3(_1138, _1139, _1140));
        float _1146 = (_1141 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1141);
        float _1154 = (dot(vec3(_648, _649, _650), vec3(_1146 * _1138, _1146 * _1139, _1146 * _1140)) + 1.0) * 0.5;
        float _4121 = isnan(0.0) ? _1154 : (isnan(_1154) ? 0.0 : max(_1154, 0.0));
        float _1163 = sqrt(((_1139 * _1139) + (_1138 * _1138)) + (_1140 * _1140)) / (_1092 + 9.9999997473787516355514526367188e-06);
        float _4132 = isnan(0.0) ? _1163 : (isnan(_1163) ? 0.0 : max(_1163, 0.0));
        float _1164 = isnan(1.0) ? _4132 : (isnan(_4132) ? 1.0 : min(_4132, 1.0));
        float _1165 = _1164 * 2.0;
        float _1169 = (1.0 - _1164) / (_1164 + 1.0);
        float _4143 = isnan(0.0) ? _1169 : (isnan(_1169) ? 0.0 : max(_1169, 0.0));
        float _1170 = isnan(1.0) ? _4143 : (isnan(_4143) ? 1.0 : min(_4143, 1.0));
        float _1179 = ((((1.0 - _1170) * (_1165 + 2.0)) * exp2(log2(isnan(1.0) ? _4121 : (isnan(_4121) ? 1.0 : min(_4121, 1.0))) * (_1165 + 1.0))) + _1170) * _1092;
        float _1180 = _1060 * 0.5;
        float _1181 = _1070 * 0.5;
        float _1182 = _1080 * 0.5;
        float _1183 = dot(vec3(_1180, _1181, _1182), vec3(_1180, _1181, _1182));
        float _1188 = (_1183 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1183);
        float _1196 = (dot(vec3(_648, _649, _650), vec3(_1188 * _1180, _1188 * _1181, _1188 * _1182)) + 1.0) * 0.5;
        float _4154 = isnan(0.0) ? _1196 : (isnan(_1196) ? 0.0 : max(_1196, 0.0));
        float _1205 = sqrt(((_1181 * _1181) + (_1180 * _1180)) + (_1182 * _1182)) / (_1093 + 9.9999997473787516355514526367188e-06);
        float _4165 = isnan(0.0) ? _1205 : (isnan(_1205) ? 0.0 : max(_1205, 0.0));
        float _1206 = isnan(1.0) ? _4165 : (isnan(_4165) ? 1.0 : min(_4165, 1.0));
        float _1207 = _1206 * 2.0;
        float _1211 = (1.0 - _1206) / (_1206 + 1.0);
        float _4176 = isnan(0.0) ? _1211 : (isnan(_1211) ? 0.0 : max(_1211, 0.0));
        float _1212 = isnan(1.0) ? _4176 : (isnan(_4176) ? 1.0 : min(_4176, 1.0));
        float _1221 = ((((1.0 - _1212) * (_1207 + 2.0)) * exp2(log2(isnan(1.0) ? _4154 : (isnan(_4154) ? 1.0 : min(_4154, 1.0))) * (_1207 + 1.0))) + _1212) * _1093;
        _1229 = _1060;
        _1231 = _1059;
        _1232 = _1058;
        _1233 = _1070;
        _1234 = _1069;
        _1235 = _1068;
        _1236 = _1080;
        _1237 = _1079;
        _1238 = _1078;
        _1239 = _1093;
        _1240 = _1092;
        _1241 = _1091;
        _1242 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1137 : (isnan(_1137) ? 0.0 : max(_1137, 0.0)));
        _1243 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1179 : (isnan(_1179) ? 0.0 : max(_1179, 0.0)));
        _1244 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1221 : (isnan(_1221) ? 0.0 : max(_1221, 0.0)));
    }
    else
    {
        _1229 = _1230;
        _1231 = _1230;
        _1232 = _1230;
        _1233 = _1230;
        _1234 = _1230;
        _1235 = _1230;
        _1236 = _1230;
        _1237 = _1230;
        _1238 = _1230;
        _1239 = _1230;
        _1240 = _1230;
        _1241 = _1230;
        _1242 = 0.0;
        _1243 = 0.0;
        _1244 = 0.0;
    }
    float _1542;
    float _1543;
    float _1544;
    float _1545;
    float _1546;
    float _1547;
    float _1548;
    float _1549;
    float _1550;
    float _1551;
    float _1552;
    float _1553;
    float _1554;
    float _1555;
    float _1556;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1273 = fma(_898, cbModelParam._m0[30u].z, fma(_894, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _890));
        float _1277 = fma(_898, cbModelParam._m0[31u].z, fma(_894, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _890));
        float _1281 = fma(_898, cbModelParam._m0[32u].z, fma(_894, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _890));
        float _1304 = _890 + _648;
        float _1305 = _894 + _649;
        float _1306 = _898 + _650;
        float _1316 = fma(_1306, cbModelParam._m0[30u].z, fma(_1305, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1304)) - _1273;
        float _1317 = fma(_1306, cbModelParam._m0[31u].z, fma(_1305, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1304)) - _1277;
        float _1318 = fma(_1306, cbModelParam._m0[32u].z, fma(_1305, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1304)) - _1281;
        float _1322 = inversesqrt(dot(vec3(_1316, _1317, _1318), vec3(_1316, _1317, _1318)));
        float _1335 = ((_1322 * _1316) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1273 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1336 = ((_1322 * _1317) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1277 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1337 = ((_1322 * _1318) / cbModelParam._m0[35u].z) + ((((((_1281 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1339 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1335, _1336, _1337), 0.0);
        vec4 _1346 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1335, _1336, _1337), 0.0);
        vec4 _1353 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1335, _1336, _1337), 0.0);
        vec4 _1360 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1335, _1336, _1337), 0.0);
        float _1372 = exp2((_1339.w + (-0.5)) * 20.0) * 2.0;
        float _1373 = _1372 * (_1339.x + (-0.5));
        float _1374 = _1372 * (_1339.y + (-0.5));
        float _1375 = _1372 * (_1339.z + (-0.5));
        float _1382 = exp2((_1346.w + (-0.5)) * 20.0) * 2.0;
        float _1383 = _1382 * (_1346.x + (-0.5));
        float _1384 = _1382 * (_1346.y + (-0.5));
        float _1385 = _1382 * (_1346.z + (-0.5));
        float _1392 = exp2((_1353.w + (-0.5)) * 20.0) * 2.0;
        float _1393 = _1392 * (_1353.x + (-0.5));
        float _1394 = _1392 * (_1353.y + (-0.5));
        float _1395 = _1392 * (_1353.z + (-0.5));
        float _1402 = exp2((_1360.w + (-0.5)) * 20.0) * 2.0;
        float _1403 = _1402 * (_1360.x + (-0.5));
        float _1404 = _1402 * (_1360.y + (-0.5));
        float _1405 = _1402 * (_1360.z + (-0.5));
        float _1406 = isnan(0.0) ? _1403 : (isnan(_1403) ? 0.0 : max(_1403, 0.0));
        float _1407 = isnan(0.0) ? _1404 : (isnan(_1404) ? 0.0 : max(_1404, 0.0));
        float _1408 = isnan(0.0) ? _1405 : (isnan(_1405) ? 0.0 : max(_1405, 0.0));
        float _1409 = _1373 * 0.5;
        float _1410 = _1383 * 0.5;
        float _1411 = _1393 * 0.5;
        float _1412 = dot(vec3(_1409, _1410, _1411), vec3(_1409, _1410, _1411));
        float _1417 = (_1412 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1412);
        float _1425 = (dot(vec3(_648, _649, _650), vec3(_1417 * _1409, _1417 * _1410, _1417 * _1411)) + 1.0) * 0.5;
        float _4217 = isnan(0.0) ? _1425 : (isnan(_1425) ? 0.0 : max(_1425, 0.0));
        float _1434 = sqrt(((_1410 * _1410) + (_1409 * _1409)) + (_1411 * _1411)) / (_1406 + 9.9999997473787516355514526367188e-06);
        float _4228 = isnan(0.0) ? _1434 : (isnan(_1434) ? 0.0 : max(_1434, 0.0));
        float _1435 = isnan(1.0) ? _4228 : (isnan(_4228) ? 1.0 : min(_4228, 1.0));
        float _1436 = _1435 * 2.0;
        float _1440 = (1.0 - _1435) / (_1435 + 1.0);
        float _4239 = isnan(0.0) ? _1440 : (isnan(_1440) ? 0.0 : max(_1440, 0.0));
        float _1441 = isnan(1.0) ? _4239 : (isnan(_4239) ? 1.0 : min(_4239, 1.0));
        float _1450 = ((((1.0 - _1441) * (_1436 + 2.0)) * exp2(log2(isnan(1.0) ? _4217 : (isnan(_4217) ? 1.0 : min(_4217, 1.0))) * (_1436 + 1.0))) + _1441) * _1406;
        float _1451 = _1374 * 0.5;
        float _1452 = _1384 * 0.5;
        float _1453 = _1394 * 0.5;
        float _1454 = dot(vec3(_1451, _1452, _1453), vec3(_1451, _1452, _1453));
        float _1459 = (_1454 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1454);
        float _1467 = (dot(vec3(_648, _649, _650), vec3(_1459 * _1451, _1459 * _1452, _1459 * _1453)) + 1.0) * 0.5;
        float _4250 = isnan(0.0) ? _1467 : (isnan(_1467) ? 0.0 : max(_1467, 0.0));
        float _1476 = sqrt(((_1452 * _1452) + (_1451 * _1451)) + (_1453 * _1453)) / (_1407 + 9.9999997473787516355514526367188e-06);
        float _4261 = isnan(0.0) ? _1476 : (isnan(_1476) ? 0.0 : max(_1476, 0.0));
        float _1477 = isnan(1.0) ? _4261 : (isnan(_4261) ? 1.0 : min(_4261, 1.0));
        float _1478 = _1477 * 2.0;
        float _1482 = (1.0 - _1477) / (_1477 + 1.0);
        float _4272 = isnan(0.0) ? _1482 : (isnan(_1482) ? 0.0 : max(_1482, 0.0));
        float _1483 = isnan(1.0) ? _4272 : (isnan(_4272) ? 1.0 : min(_4272, 1.0));
        float _1492 = ((((1.0 - _1483) * (_1478 + 2.0)) * exp2(log2(isnan(1.0) ? _4250 : (isnan(_4250) ? 1.0 : min(_4250, 1.0))) * (_1478 + 1.0))) + _1483) * _1407;
        float _1493 = _1375 * 0.5;
        float _1494 = _1385 * 0.5;
        float _1495 = _1395 * 0.5;
        float _1496 = dot(vec3(_1493, _1494, _1495), vec3(_1493, _1494, _1495));
        float _1501 = (_1496 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1496);
        float _1509 = (dot(vec3(_648, _649, _650), vec3(_1501 * _1493, _1501 * _1494, _1501 * _1495)) + 1.0) * 0.5;
        float _4283 = isnan(0.0) ? _1509 : (isnan(_1509) ? 0.0 : max(_1509, 0.0));
        float _1518 = sqrt(((_1494 * _1494) + (_1493 * _1493)) + (_1495 * _1495)) / (_1408 + 9.9999997473787516355514526367188e-06);
        float _4294 = isnan(0.0) ? _1518 : (isnan(_1518) ? 0.0 : max(_1518, 0.0));
        float _1519 = isnan(1.0) ? _4294 : (isnan(_4294) ? 1.0 : min(_4294, 1.0));
        float _1520 = _1519 * 2.0;
        float _1524 = (1.0 - _1519) / (_1519 + 1.0);
        float _4305 = isnan(0.0) ? _1524 : (isnan(_1524) ? 0.0 : max(_1524, 0.0));
        float _1525 = isnan(1.0) ? _4305 : (isnan(_4305) ? 1.0 : min(_4305, 1.0));
        float _1534 = ((((1.0 - _1525) * (_1520 + 2.0)) * exp2(log2(isnan(1.0) ? _4283 : (isnan(_4283) ? 1.0 : min(_4283, 1.0))) * (_1520 + 1.0))) + _1525) * _1408;
        _1542 = _1375;
        _1543 = _1374;
        _1544 = _1373;
        _1545 = _1385;
        _1546 = _1384;
        _1547 = _1383;
        _1548 = _1395;
        _1549 = _1394;
        _1550 = _1393;
        _1551 = _1408;
        _1552 = _1407;
        _1553 = _1406;
        _1554 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1450 : (isnan(_1450) ? 0.0 : max(_1450, 0.0)));
        _1555 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1492 : (isnan(_1492) ? 0.0 : max(_1492, 0.0)));
        _1556 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1534 : (isnan(_1534) ? 0.0 : max(_1534, 0.0)));
    }
    else
    {
        _1542 = _1230;
        _1543 = _1230;
        _1544 = _1230;
        _1545 = _1230;
        _1546 = _1230;
        _1547 = _1230;
        _1548 = _1230;
        _1549 = _1230;
        _1550 = _1230;
        _1551 = _1230;
        _1552 = _1230;
        _1553 = _1230;
        _1554 = 0.0;
        _1555 = 0.0;
        _1556 = 0.0;
    }
    float _1566 = (cbModelParam._m0[1u].x * (_1554 - _1242)) + _1242;
    float _1567 = (cbModelParam._m0[1u].x * (_1555 - _1243)) + _1243;
    float _1568 = (cbModelParam._m0[1u].x * (_1556 - _1244)) + _1244;
    float _1589 = fma(_1568, cbSceneParam._m0[89u].z, fma(_1567, cbSceneParam._m0[89u].y, _1566 * cbSceneParam._m0[89u].x));
    float _1592 = fma(_1568, cbSceneParam._m0[90u].z, fma(_1567, cbSceneParam._m0[90u].y, _1566 * cbSceneParam._m0[90u].x));
    float _1595 = fma(_1568, cbSceneParam._m0[91u].z, fma(_1567, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1566));
    float _1610 = _834 * 0.5;
    float _1611 = _835 * 0.5;
    float _1612 = _836 * 0.5;
    float _1613 = dot(vec4(_1610, _1611, _1612, 1.0), vec4(_1544, _1547, _1550, _1553));
    float _1616 = dot(vec4(_1610, _1611, _1612, 1.0), vec4(_1543, _1546, _1549, _1552));
    float _1619 = dot(vec4(_1610, _1611, _1612, 1.0), vec4(_1542, _1545, _1548, _1551));
    float _1653;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1626 = dot(vec4(_1610, _1611, _1612, 1.0), vec4(_1229, _1233, _1236, _1239));
        float _1630 = dot(vec4(_1610, _1611, _1612, 1.0), vec4(_1231, _1234, _1237, _1240));
        float _1634 = dot(vec4(_1610, _1611, _1612, 1.0), vec4(_1232, _1235, _1238, _1241));
        float _1641 = dot(vec4(cbModelParam._m0[39u]), vec4(_1610, _1611, _1612, 1.0));
        _1653 = dot(vec3(isnan(0.0) ? _1634 : (isnan(_1634) ? 0.0 : max(_1634, 0.0)), isnan(0.0) ? _1630 : (isnan(_1630) ? 0.0 : max(_1630, 0.0)), isnan(0.0) ? _1626 : (isnan(_1626) ? 0.0 : max(_1626, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1641) ? 0.0 : (isnan(0.0) ? _1641 : max(0.0, _1641))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1653 = 1.0;
    }
    float _1664;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1655 = dot(vec4(cbModelParam._m0[40u]), vec4(_1610, _1611, _1612, 1.0));
        _1664 = dot(vec3(isnan(0.0) ? _1613 : (isnan(_1613) ? 0.0 : max(_1613, 0.0)), isnan(0.0) ? _1616 : (isnan(_1616) ? 0.0 : max(_1616, 0.0)), isnan(0.0) ? _1619 : (isnan(_1619) ? 0.0 : max(_1619, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1655) ? 0.0 : (isnan(0.0) ? _1655 : max(0.0, _1655))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1664 = 1.0;
    }
    float _1668 = (_1664 * cbModelParam._m0[1u].x) + (_1653 * (1.0 - cbModelParam._m0[1u].x));
    float _1678 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _651);
    float _1679 = isnan(_1678) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1678 : min(cbModelParam._m0[25u].z, _1678));
    float _1759;
    float _1761;
    float _1763;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1726 = fma(_898, cbModelParam._m0[13u].z, fma(_894, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _890)) + cbModelParam._m0[13u].w;
        float _1730 = fma(_898, cbModelParam._m0[14u].z, fma(_894, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _890)) + cbModelParam._m0[14u].w;
        float _1734 = fma(_898, cbModelParam._m0[15u].z, fma(_894, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _890)) + cbModelParam._m0[15u].w;
        float _1737 = fma(_836, cbModelParam._m0[13u].z, fma(_835, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _834));
        float _1740 = fma(_836, cbModelParam._m0[14u].z, fma(_835, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _834));
        float _1743 = fma(_836, cbModelParam._m0[15u].z, fma(_835, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _834));
        float _1771;
        if (_1737 > 0.0)
        {
            _1771 = abs((1.0 - _1726) / _1737);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1737 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1726 + 1.0) / _1737);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1771 = frontier_phi_17_15_ladder;
        }
        float _1944;
        if (_1740 > 0.0)
        {
            _1944 = abs((1.0 - _1730) / _1740);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1740 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1730 + 1.0) / _1740);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1944 = frontier_phi_26_22_ladder;
        }
        float _2240;
        if (_1743 > 0.0)
        {
            _2240 = abs((1.0 - _1734) / _1743);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1743 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1734 + 1.0) / _1743);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2240 = frontier_phi_38_33_ladder;
        }
        float _2242 = isnan(_1944) ? _1771 : (isnan(_1771) ? _1944 : min(_1771, _1944));
        float _2243 = isnan(_2240) ? _2242 : (isnan(_2242) ? _2240 : min(_2242, _2240));
        float _2247 = (_2243 * _1737) + _1726;
        float _2248 = (_2243 * _1740) + _1730;
        float _2249 = (_2243 * _1743) + _1734;
        float _2250 = _2243 * 9.9999997473787516355514526367188e-05;
        float _2252 = (-1.0) - _2250;
        float _2254 = _2250 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2249 > _2254) || ((_2249 < _2252) || ((_2248 > _2254) || ((_2248 < _2252) || ((_2247 < _2252) || (_2247 > _2254))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2394 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2249, cbModelParam._m0[9u].z, fma(_2248, cbModelParam._m0[9u].y, _2247 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2249, cbModelParam._m0[10u].z, fma(_2248, cbModelParam._m0[10u].y, _2247 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2249, cbModelParam._m0[11u].z, fma(_2248, cbModelParam._m0[11u].y, _2247 * cbModelParam._m0[11u].x))), _1679);
            frontier_phi_16_38_ladder = _2394.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2394.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2394.x * cbModelParam._m0[1u].y;
        }
        _1759 = frontier_phi_16_38_ladder_2;
        _1761 = frontier_phi_16_38_ladder_1;
        _1763 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1747 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_834, _835, _836), _1679);
        _1759 = _1747.x * cbModelParam._m0[1u].y;
        _1761 = _1747.y * cbModelParam._m0[1u].y;
        _1763 = _1747.z * cbModelParam._m0[1u].y;
    }
    float _1767 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _651);
    float _1768 = isnan(_1767) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1767 : min(cbModelParam._m0[25u].w, _1767));
    float _1859;
    float _1861;
    float _1863;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1823 = fma(_898, cbModelParam._m0[21u].z, fma(_894, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _890)) + cbModelParam._m0[21u].w;
        float _1827 = fma(_898, cbModelParam._m0[22u].z, fma(_894, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _890)) + cbModelParam._m0[22u].w;
        float _1831 = fma(_898, cbModelParam._m0[23u].z, fma(_894, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _890)) + cbModelParam._m0[23u].w;
        float _1834 = fma(_836, cbModelParam._m0[21u].z, fma(_835, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _834));
        float _1837 = fma(_836, cbModelParam._m0[22u].z, fma(_835, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _834));
        float _1840 = fma(_836, cbModelParam._m0[23u].z, fma(_835, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _834));
        float _1949;
        if (_1834 > 0.0)
        {
            _1949 = abs((1.0 - _1823) / _1834);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1834 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1823 + 1.0) / _1834);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1949 = frontier_phi_28_24_ladder;
        }
        float _2267;
        if (_1837 > 0.0)
        {
            _2267 = abs((1.0 - _1827) / _1837);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1837 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1827 + 1.0) / _1837);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2267 = frontier_phi_40_35_ladder;
        }
        float _2605;
        if (_1840 > 0.0)
        {
            _2605 = abs((1.0 - _1831) / _1840);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1840 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1831 + 1.0) / _1840);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2605 = frontier_phi_50_47_ladder;
        }
        float _2607 = isnan(_2267) ? _1949 : (isnan(_1949) ? _2267 : min(_1949, _2267));
        float _2608 = isnan(_2605) ? _2607 : (isnan(_2607) ? _2605 : min(_2607, _2605));
        float _2612 = (_2608 * _1834) + _1823;
        float _2613 = (_2608 * _1837) + _1827;
        float _2614 = (_2608 * _1840) + _1831;
        float _2615 = _2608 * 9.9999997473787516355514526367188e-05;
        float _2616 = (-1.0) - _2615;
        float _2618 = _2615 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2614 > _2618) || ((_2614 < _2616) || ((_2613 > _2618) || ((_2613 < _2616) || ((_2612 < _2616) || (_2612 > _2618))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2736 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2614, cbModelParam._m0[17u].z, fma(_2613, cbModelParam._m0[17u].y, _2612 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2614, cbModelParam._m0[18u].z, fma(_2613, cbModelParam._m0[18u].y, _2612 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2614, cbModelParam._m0[19u].z, fma(_2613, cbModelParam._m0[19u].y, _2612 * cbModelParam._m0[19u].x))), _1768);
            frontier_phi_25_50_ladder = _2736.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2736.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2736.x * cbModelParam._m0[1u].z;
        }
        _1859 = frontier_phi_25_50_ladder_2;
        _1861 = frontier_phi_25_50_ladder_1;
        _1863 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1843 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_834, _835, _836), _1768);
        _1859 = _1843.x * cbModelParam._m0[1u].z;
        _1861 = _1843.y * cbModelParam._m0[1u].z;
        _1863 = _1843.z * cbModelParam._m0[1u].z;
    }
    float _1876 = (((_861 * _811) + _862) * _826) * ((cbModelParam._m0[1u].w * (_1859 - _1759)) + _1759);
    float _1878 = (((_861 * _813) + _862) * _826) * ((cbModelParam._m0[1u].w * (_1861 - _1761)) + _1761);
    float _1880 = (((_861 * _814) + _862) * _826) * ((cbModelParam._m0[1u].w * (_1863 - _1763)) + _1763);
    float _1883 = fma(_1880, cbSceneParam._m0[89u].z, fma(_1878, cbSceneParam._m0[89u].y, _1876 * cbSceneParam._m0[89u].x));
    float _1886 = fma(_1880, cbSceneParam._m0[90u].z, fma(_1878, cbSceneParam._m0[90u].y, _1876 * cbSceneParam._m0[90u].x));
    float _1889 = fma(_1880, cbSceneParam._m0[91u].z, fma(_1878, cbSceneParam._m0[91u].y, _1876 * cbSceneParam._m0[91u].x));
    float _1923 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1927 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1931 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1935 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1936 = _1923 / _1935;
    float _1937 = _1927 / _1935;
    float _1938 = _1931 / _1935;
    float _2085;
    float _2086;
    float _2087;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1965 = ((uint(_1938 > cbSceneParam._m0[59u].y) + uint(_1938 > cbSceneParam._m0[59u].x)) + uint(_1938 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1966 = _1965 + 43u;
        uint _1974 = _1965 + 44u;
        uint _1982 = _1965 + 45u;
        uint _1990 = _1965 + 46u;
        float _2001 = fma(_1935, cbSceneParam._m0[_1966].w, fma(_1931, cbSceneParam._m0[_1966].z, fma(_1927, cbSceneParam._m0[_1966].y, _1923 * cbSceneParam._m0[_1966].x)));
        float _2005 = fma(_1935, cbSceneParam._m0[_1974].w, fma(_1931, cbSceneParam._m0[_1974].z, fma(_1927, cbSceneParam._m0[_1974].y, _1923 * cbSceneParam._m0[_1974].x)));
        float _2013 = fma(_1935, cbSceneParam._m0[_1990].w, fma(_1931, cbSceneParam._m0[_1990].z, fma(_1927, cbSceneParam._m0[_1990].y, _1923 * cbSceneParam._m0[_1990].x)));
        float _2018 = cbSceneParam._m0[33u].z * _2013;
        float _2020 = cbSceneParam._m0[33u].w * _2013;
        float _2023 = fma(_1935, cbSceneParam._m0[_1982].w, fma(_1931, cbSceneParam._m0[_1982].z, fma(_1927, cbSceneParam._m0[_1982].y, _1923 * cbSceneParam._m0[_1982].x))) / _2013;
        float _2071 = (cbSceneParam._m0[33u].x - sqrt(((_1937 * _1937) + (_1936 * _1936)) + (_1938 * _1938))) * cbSceneParam._m0[33u].y;
        float _4431 = isnan(0.0) ? _2071 : (isnan(_2071) ? 0.0 : max(_2071, 0.0));
        float _2078 = (isnan(1.0) ? _4431 : (isnan(_4431) ? 1.0 : min(_4431, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2018 + _2001) / _2013, (_2020 + _2005) / _2013), _2023), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2020 + _2001) / _2013, (_2005 - _2018) / _2013), _2023), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2001 - _2018) / _2013, (_2005 - _2020) / _2013), _2023), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2001 - _2020) / _2013, (_2018 + _2005) / _2013), _2023), 0.0)).x), vec4(0.25)));
        _2085 = 1.0 - (_2078 * cbSceneParam._m0[34u].x);
        _2086 = 1.0 - (_2078 * cbSceneParam._m0[34u].y);
        _2087 = 1.0 - (_2078 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2085 = 1.0;
        _2086 = 1.0;
        _2087 = 1.0;
    }
    float _2151;
    float _2153;
    float _2155;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2139 = fma(_1935, cbSceneParam._m0[63u].w, fma(_1931, cbSceneParam._m0[63u].z, fma(_1927, cbSceneParam._m0[63u].y, _1923 * cbSceneParam._m0[63u].x)));
        float _2140 = fma(_1935, cbSceneParam._m0[60u].w, fma(_1931, cbSceneParam._m0[60u].z, fma(_1927, cbSceneParam._m0[60u].y, _1923 * cbSceneParam._m0[60u].x))) / _2139;
        float _2141 = fma(_1935, cbSceneParam._m0[61u].w, fma(_1931, cbSceneParam._m0[61u].z, fma(_1927, cbSceneParam._m0[61u].y, _1923 * cbSceneParam._m0[61u].x))) / _2139;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2140 >= cbSceneParam._m0[64u].x) && (_2141 >= cbSceneParam._m0[64u].y)) && (_2140 <= cbSceneParam._m0[64u].z)) && (_2141 <= cbSceneParam._m0[64u].w))
        {
            float _2280 = fma(_1935, cbSceneParam._m0[62u].w, fma(_1931, cbSceneParam._m0[62u].z, fma(_1927, cbSceneParam._m0[62u].y, _1923 * cbSceneParam._m0[62u].x))) / _2139;
            float _2284 = isnan(cbSceneParam._m0[41u].w) ? _2280 : (isnan(_2280) ? cbSceneParam._m0[41u].w : max(_2280, cbSceneParam._m0[41u].w));
            float _2327 = (cbSceneParam._m0[33u].x - sqrt(((_1937 * _1937) + (_1936 * _1936)) + (_1938 * _1938))) * cbSceneParam._m0[33u].y;
            float _4447 = isnan(0.0) ? _2327 : (isnan(_2327) ? 0.0 : max(_2327, 0.0));
            float _2334 = (isnan(1.0) ? _4447 : (isnan(_4447) ? 1.0 : min(_4447, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2140, cbSceneParam._m0[33u].w + _2141), _2284), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2140, _2141 - cbSceneParam._m0[33u].z), _2284), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2140 - cbSceneParam._m0[33u].z, _2141 - cbSceneParam._m0[33u].w), _2284), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2140 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2141), _2284), 0.0)).x), vec4(0.25)));
            float _2338 = 1.0 - (_2334 * cbSceneParam._m0[34u].x);
            float _2339 = 1.0 - (_2334 * cbSceneParam._m0[34u].y);
            float _2340 = 1.0 - (_2334 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2340) ? _2087 : (isnan(_2087) ? _2340 : min(_2087, _2340));
            frontier_phi_37_36_ladder_1 = isnan(_2339) ? _2086 : (isnan(_2086) ? _2339 : min(_2086, _2339));
            frontier_phi_37_36_ladder_2 = isnan(_2338) ? _2085 : (isnan(_2085) ? _2338 : min(_2085, _2338));
        }
        else
        {
            frontier_phi_37_36_ladder = _2087;
            frontier_phi_37_36_ladder_1 = _2086;
            frontier_phi_37_36_ladder_2 = _2085;
        }
        _2151 = frontier_phi_37_36_ladder_2;
        _2153 = frontier_phi_37_36_ladder_1;
        _2155 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2151 = _2085;
        _2153 = _2086;
        _2155 = _2087;
    }
    uvec4 _2160 = floatBitsToUint(cbInstanceData._m0[_786 + 5u]);
    uint _2162 = _2160.x * 14u;
    uint _2163 = _2162 + 13u;
    float _2170 = _826 + (-1.0);
    float _2175 = (cbLight._m0[_2163].x * _2170) + 1.0;
    float _2176 = (cbLight._m0[_2163].y * _2170) + 1.0;
    float _2177 = (cbLight._m0[_2163].z * _2170) + 1.0;
    float _2178 = (cbLight._m0[_2163].w * _2170) + 1.0;
    uint _2179 = _2162 + 5u;
    float _2185 = isnan(1.0) ? _2176 : (isnan(_2176) ? 1.0 : min(_2176, 1.0));
    uint _2189 = _2162 + 4u;
    float _2199 = isnan(1.0) ? _2175 : (isnan(_2175) ? 1.0 : min(_2175, 1.0));
    uint _2203 = _2162 | 1u;
    float _2214 = dot(vec3(cbLight._m0[_2162].xyz), vec3(_648, _649, _650));
    float _2217 = dot(vec3(cbLight._m0[_2203].xyz), vec3(_648, _649, _650));
    float _4483 = isnan(0.0) ? _2214 : (isnan(_2214) ? 0.0 : max(_2214, 0.0));
    float _4494 = isnan(0.0) ? _2217 : (isnan(_2217) ? 0.0 : max(_2217, 0.0));
    float _2222 = (isnan(1.0) ? _4483 : (isnan(_4483) ? 1.0 : min(_4483, 1.0))) * 0.3183098733425140380859375;
    float _2224 = (isnan(1.0) ? _4494 : (isnan(_4494) ? 1.0 : min(_4494, 1.0))) * 0.3183098733425140380859375;
    float _2231 = ((cbLight._m0[_2179].x * _2185) * _2224) + (((cbLight._m0[_2189].x * _2151) * _2199) * _2222);
    float _2232 = ((_2185 * cbLight._m0[_2179].y) * _2224) + (((cbLight._m0[_2189].y * _2153) * _2199) * _2222);
    float _2233 = ((_2185 * cbLight._m0[_2179].z) * _2224) + (((cbLight._m0[_2189].z * _2155) * _2199) * _2222);
    uvec4 _2237 = floatBitsToUint(cbLight._m0[_2162 + 12u]);
    bool _2239 = _2237.x == 0u;
    float _2341;
    float _2343;
    float _2345;
    if (_2239)
    {
        _2341 = _2231;
        _2343 = _2232;
        _2345 = _2233;
    }
    else
    {
        uint _2349 = _2162 + 6u;
        float _2365 = (dot(vec3(cbLight._m0[_2162 + 2u].xyz), vec3(_648, _649, _650)) * 0.5) + 0.5;
        float _2366 = _2365 * _2365;
        float _4505 = isnan(0.0) ? _2366 : (isnan(_2366) ? 0.0 : max(_2366, 0.0));
        float _2367 = isnan(1.0) ? _4505 : (isnan(_4505) ? 1.0 : min(_4505, 1.0));
        float _2368 = isnan(1.0) ? _2177 : (isnan(_2177) ? 1.0 : min(_2177, 1.0));
        _2341 = (((cbLight._m0[_2349].x * 0.3183098733425140380859375) * _2367) * _2368) + _2231;
        _2343 = (((cbLight._m0[_2349].y * 0.3183098733425140380859375) * _2367) * _2368) + _2232;
        _2345 = (((cbLight._m0[_2349].z * 0.3183098733425140380859375) * _2367) * _2368) + _2233;
    }
    bool _2348 = _2237.y == 0u;
    float _2403;
    float _2405;
    float _2407;
    if (_2348)
    {
        _2403 = _2341;
        _2405 = _2343;
        _2407 = _2345;
    }
    else
    {
        uint _2576 = _2162 + 7u;
        float _2592 = (dot(vec3(cbLight._m0[_2162 + 3u].xyz), vec3(_648, _649, _650)) * 0.5) + 0.5;
        float _2593 = _2592 * _2592;
        float _4521 = isnan(0.0) ? _2593 : (isnan(_2593) ? 0.0 : max(_2593, 0.0));
        float _2594 = isnan(1.0) ? _4521 : (isnan(_4521) ? 1.0 : min(_4521, 1.0));
        float _2595 = isnan(1.0) ? _2178 : (isnan(_2178) ? 1.0 : min(_2178, 1.0));
        _2403 = (((cbLight._m0[_2576].x * 0.3183098733425140380859375) * _2594) * _2595) + _2341;
        _2405 = (((cbLight._m0[_2576].y * 0.3183098733425140380859375) * _2594) * _2595) + _2343;
        _2407 = (((cbLight._m0[_2576].z * 0.3183098733425140380859375) * _2594) * _2595) + _2345;
    }
    uint _2410 = _2162 + 8u;
    float _2423 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2162].w)) * _651) * 0.949999988079071044921875);
    float _2424 = _2423 * _2423;
    float _2425 = cbLight._m0[_2162].x + _728;
    float _2426 = cbLight._m0[_2162].y + _729;
    float _2427 = cbLight._m0[_2162].z + _730;
    float _2431 = inversesqrt(dot(vec3(_2425, _2426, _2427), vec3(_2425, _2426, _2427)));
    float _2432 = _2431 * _2425;
    float _2433 = _2431 * _2426;
    float _2434 = _2431 * _2427;
    float _2435 = dot(vec3(_648, _649, _650), vec3(cbLight._m0[_2162].xyz));
    float _4537 = isnan(0.0) ? _2435 : (isnan(_2435) ? 0.0 : max(_2435, 0.0));
    float _2438 = isnan(1.0) ? _4537 : (isnan(_4537) ? 1.0 : min(_4537, 1.0));
    float _4548 = isnan(0.0) ? _827 : (isnan(_827) ? 0.0 : max(_827, 0.0));
    float _2439 = isnan(1.0) ? _4548 : (isnan(_4548) ? 1.0 : min(_4548, 1.0));
    float _2440 = dot(vec3(_648, _649, _650), vec3(_2432, _2433, _2434));
    float _4559 = isnan(0.0) ? _2440 : (isnan(_2440) ? 0.0 : max(_2440, 0.0));
    float _2443 = isnan(1.0) ? _4559 : (isnan(_4559) ? 1.0 : min(_4559, 1.0));
    float _2444 = dot(vec3(cbLight._m0[_2162].xyz), vec3(_2432, _2433, _2434));
    float _4570 = isnan(0.0) ? _2444 : (isnan(_2444) ? 0.0 : max(_2444, 0.0));
    float _2448 = _2424 * _2424;
    float _2452 = ((_2443 * _2443) * (_2448 + (-1.0))) + 1.0;
    float _2460 = exp2(log2(1.0 - (isnan(1.0) ? _4570 : (isnan(_4570) ? 1.0 : min(_4570, 1.0)))) * 5.0);
    float _2461 = 0.959999978542327880859375 - _808;
    float _2463 = 0.959999978542327880859375 - _809;
    float _2464 = 0.959999978542327880859375 - _810;
    float _2471 = 1.0 - _2424;
    float _2482 = (0.5 / (((_2439 * ((_2438 * _2471) + _2424)) + 9.9999999392252902907785028219223e-09) + (((_2439 * _2471) + _2424) * _2438))) * _2438;
    float _4581 = isnan(0.0) ? _2482 : (isnan(_2482) ? 0.0 : max(_2482, 0.0));
    float _2484 = (isnan(1.0) ? _4581 : (isnan(_4581) ? 1.0 : min(_4581, 1.0))) * (_2448 / ((_2452 * _2452) * 3.141590118408203125));
    uint _2498 = _2162 + 9u;
    float _2509 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2203].w)) * _651) * 0.949999988079071044921875);
    float _2510 = _2509 * _2509;
    float _2511 = cbLight._m0[_2203].x + _728;
    float _2512 = cbLight._m0[_2203].y + _729;
    float _2513 = cbLight._m0[_2203].z + _730;
    float _2517 = inversesqrt(dot(vec3(_2511, _2512, _2513), vec3(_2511, _2512, _2513)));
    float _2518 = _2517 * _2511;
    float _2519 = _2517 * _2512;
    float _2520 = _2517 * _2513;
    float _2521 = dot(vec3(_648, _649, _650), vec3(cbLight._m0[_2203].xyz));
    float _4592 = isnan(0.0) ? _2521 : (isnan(_2521) ? 0.0 : max(_2521, 0.0));
    float _2524 = isnan(1.0) ? _4592 : (isnan(_4592) ? 1.0 : min(_4592, 1.0));
    float _2525 = dot(vec3(_648, _649, _650), vec3(_2518, _2519, _2520));
    float _4603 = isnan(0.0) ? _2525 : (isnan(_2525) ? 0.0 : max(_2525, 0.0));
    float _2528 = isnan(1.0) ? _4603 : (isnan(_4603) ? 1.0 : min(_4603, 1.0));
    float _2529 = dot(vec3(cbLight._m0[_2203].xyz), vec3(_2518, _2519, _2520));
    float _4614 = isnan(0.0) ? _2529 : (isnan(_2529) ? 0.0 : max(_2529, 0.0));
    float _2533 = _2510 * _2510;
    float _2537 = ((_2528 * _2528) * (_2533 + (-1.0))) + 1.0;
    float _2544 = exp2(log2(1.0 - (isnan(1.0) ? _4614 : (isnan(_4614) ? 1.0 : min(_4614, 1.0)))) * 5.0);
    float _2551 = 1.0 - _2510;
    float _2561 = (0.5 / (((_2439 * ((_2524 * _2551) + _2510)) + 9.9999999392252902907785028219223e-09) + (((_2439 * _2551) + _2510) * _2524))) * _2524;
    float _4625 = isnan(0.0) ? _2561 : (isnan(_2561) ? 0.0 : max(_2561, 0.0));
    float _2563 = (isnan(1.0) ? _4625 : (isnan(_4625) ? 1.0 : min(_4625, 1.0))) * (_2533 / ((_2537 * _2537) * 3.141590118408203125));
    float _2573 = (((((_2544 * _2461) + _811) * cbLight._m0[_2498].x) * _2563) * _2185) + ((((cbLight._m0[_2410].x * _2151) * ((_2460 * _2461) + _811)) * _2484) * _2199);
    float _2574 = (((((_2544 * _2463) + _813) * cbLight._m0[_2498].y) * _2563) * _2185) + ((((cbLight._m0[_2410].y * _2153) * ((_2460 * _2463) + _813)) * _2484) * _2199);
    float _2575 = (((((_2544 * _2464) + _814) * cbLight._m0[_2498].z) * _2563) * _2185) + ((((cbLight._m0[_2410].z * _2155) * ((_2460 * _2464) + _814)) * _2484) * _2199);
    float _2631;
    float _2633;
    float _2635;
    if (_2239)
    {
        _2631 = _2573;
        _2633 = _2574;
        _2635 = _2575;
    }
    else
    {
        uint _2637 = _2162 + 2u;
        uint _2641 = _2162 + 10u;
        float _2655 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2637].w)) * _651) * 0.949999988079071044921875);
        float _2656 = _2655 * _2655;
        float _2657 = cbLight._m0[_2637].x + _728;
        float _2658 = cbLight._m0[_2637].y + _729;
        float _2659 = cbLight._m0[_2637].z + _730;
        float _2663 = inversesqrt(dot(vec3(_2657, _2658, _2659), vec3(_2657, _2658, _2659)));
        float _2664 = _2663 * _2657;
        float _2665 = _2663 * _2658;
        float _2666 = _2663 * _2659;
        float _2667 = dot(vec3(_648, _649, _650), vec3(cbLight._m0[_2637].xyz));
        float _4636 = isnan(0.0) ? _2667 : (isnan(_2667) ? 0.0 : max(_2667, 0.0));
        float _2670 = isnan(1.0) ? _4636 : (isnan(_4636) ? 1.0 : min(_4636, 1.0));
        float _2671 = dot(vec3(_648, _649, _650), vec3(_2664, _2665, _2666));
        float _4647 = isnan(0.0) ? _2671 : (isnan(_2671) ? 0.0 : max(_2671, 0.0));
        float _2674 = isnan(1.0) ? _4647 : (isnan(_4647) ? 1.0 : min(_4647, 1.0));
        float _2675 = dot(vec3(cbLight._m0[_2637].xyz), vec3(_2664, _2665, _2666));
        float _4658 = isnan(0.0) ? _2675 : (isnan(_2675) ? 0.0 : max(_2675, 0.0));
        float _2679 = _2656 * _2656;
        float _2683 = ((_2674 * _2674) * (_2679 + (-1.0))) + 1.0;
        float _2690 = exp2(log2(1.0 - (isnan(1.0) ? _4658 : (isnan(_4658) ? 1.0 : min(_4658, 1.0)))) * 5.0);
        float _2697 = 1.0 - _2656;
        float _2707 = (0.5 / (((_2439 * ((_2670 * _2697) + _2656)) + 9.9999999392252902907785028219223e-09) + (((_2439 * _2697) + _2656) * _2670))) * _2670;
        float _4669 = isnan(0.0) ? _2707 : (isnan(_2707) ? 0.0 : max(_2707, 0.0));
        float _2709 = (isnan(1.0) ? _4669 : (isnan(_4669) ? 1.0 : min(_4669, 1.0))) * (_2679 / ((_2683 * _2683) * 3.141590118408203125));
        float _2710 = isnan(1.0) ? _2177 : (isnan(_2177) ? 1.0 : min(_2177, 1.0));
        _2631 = (((((_2690 * _2461) + _811) * cbLight._m0[_2641].x) * _2709) * _2710) + _2573;
        _2633 = (((((_2690 * _2463) + _813) * cbLight._m0[_2641].y) * _2709) * _2710) + _2574;
        _2635 = (((((_2690 * _2464) + _814) * cbLight._m0[_2641].z) * _2709) * _2710) + _2575;
    }
    float _2741;
    float _2743;
    float _2745;
    if (_2348)
    {
        _2741 = _2631;
        _2743 = _2633;
        _2745 = _2635;
    }
    else
    {
        uint _2752 = _2162 + 3u;
        uint _2756 = _2162 + 11u;
        float _2770 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2752].w)) * _651) * 0.949999988079071044921875);
        float _2771 = _2770 * _2770;
        float _2772 = cbLight._m0[_2752].x + _728;
        float _2773 = cbLight._m0[_2752].y + _729;
        float _2774 = cbLight._m0[_2752].z + _730;
        float _2778 = inversesqrt(dot(vec3(_2772, _2773, _2774), vec3(_2772, _2773, _2774)));
        float _2779 = _2778 * _2772;
        float _2780 = _2778 * _2773;
        float _2781 = _2778 * _2774;
        float _2782 = dot(vec3(_648, _649, _650), vec3(cbLight._m0[_2752].xyz));
        float _4685 = isnan(0.0) ? _2782 : (isnan(_2782) ? 0.0 : max(_2782, 0.0));
        float _2785 = isnan(1.0) ? _4685 : (isnan(_4685) ? 1.0 : min(_4685, 1.0));
        float _2786 = dot(vec3(_648, _649, _650), vec3(_2779, _2780, _2781));
        float _4696 = isnan(0.0) ? _2786 : (isnan(_2786) ? 0.0 : max(_2786, 0.0));
        float _2789 = isnan(1.0) ? _4696 : (isnan(_4696) ? 1.0 : min(_4696, 1.0));
        float _2790 = dot(vec3(cbLight._m0[_2752].xyz), vec3(_2779, _2780, _2781));
        float _4707 = isnan(0.0) ? _2790 : (isnan(_2790) ? 0.0 : max(_2790, 0.0));
        float _2794 = _2771 * _2771;
        float _2798 = ((_2789 * _2789) * (_2794 + (-1.0))) + 1.0;
        float _2805 = exp2(log2(1.0 - (isnan(1.0) ? _4707 : (isnan(_4707) ? 1.0 : min(_4707, 1.0)))) * 5.0);
        float _2812 = 1.0 - _2771;
        float _2822 = (0.5 / (((_2439 * ((_2785 * _2812) + _2771)) + 9.9999999392252902907785028219223e-09) + (((_2439 * _2812) + _2771) * _2785))) * _2785;
        float _4718 = isnan(0.0) ? _2822 : (isnan(_2822) ? 0.0 : max(_2822, 0.0));
        float _2824 = (isnan(1.0) ? _4718 : (isnan(_4718) ? 1.0 : min(_4718, 1.0))) * (_2794 / ((_2798 * _2798) * 3.141590118408203125));
        float _2825 = isnan(1.0) ? _2178 : (isnan(_2178) ? 1.0 : min(_2178, 1.0));
        _2741 = (((((_2805 * _2461) + _811) * cbLight._m0[_2756].x) * _2824) * _2825) + _2631;
        _2743 = (((((_2805 * _2463) + _813) * cbLight._m0[_2756].y) * _2824) * _2825) + _2633;
        _2745 = (((((_2805 * _2464) + _814) * cbLight._m0[_2756].z) * _2824) * _2825) + _2635;
    }
    float _2891;
    float _2893;
    float _2895;
    float _2897;
    float _2899;
    float _2901;
    if (_2160.y == 0u)
    {
        uvec4 _2846 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2847 = _2846.x;
        uint _2858 = uint((float(_2846.y) * floor(float(uint(cbSceneParam._m0[85u].y * _749) / _2847))) + floor(float(uint(cbSceneParam._m0[85u].x * _748) / _2847)));
        float _2868 = (log2(_1938 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2869 = isnan(0.0) ? _2868 : (isnan(_2868) ? 0.0 : max(_2868, 0.0));
        uint _2872 = uint(isnan(14.0) ? _2869 : (isnan(_2869) ? 14.0 : min(_2869, 14.0)));
        uvec4 _2877 = texelFetch(g_lightClusterGridBuffer, int(((_2872 << 2u) + (_2858 << 6u)) >> 2u));
        uint _2878 = _2877.x;
        uint _2879 = _2846.z;
        float _2958;
        float _2960;
        float _2962;
        float _2964;
        float _2966;
        float _2968;
        if (((((1u << ((_2879 >> 4u) & 15u)) + 4294967295u) & _2878) == 0u) || ((_2879 & 240u) == 0u))
        {
            _2958 = 0.0;
            _2960 = 0.0;
            _2962 = 0.0;
            _2964 = 0.0;
            _2966 = 0.0;
            _2968 = 0.0;
        }
        else
        {
            float _2959;
            float _2961;
            float _2963;
            float _2965;
            float _2967;
            float _2969;
            float _3110 = 0.0;
            float _3111 = 0.0;
            float _3112 = 0.0;
            float _3113 = 0.0;
            float _3114 = 0.0;
            float _3115 = 0.0;
            uint _3116 = 0u;
            uint _3125;
            bool _3126;
            for (;;)
            {
                _3125 = texelFetch(g_lightClassification, int((((_2872 << 5u) + (_2858 << 9u)) + (_3116 << 2u)) >> 2u)).x;
                _3126 = _3125 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3126)
                {
                    frontier_phi_71_pred = _3115;
                    frontier_phi_71_pred_1 = _3114;
                    frontier_phi_71_pred_2 = _3113;
                    frontier_phi_71_pred_3 = _3112;
                    frontier_phi_71_pred_4 = _3111;
                    frontier_phi_71_pred_5 = _3110;
                }
                else
                {
                    float _3255;
                    float _3256;
                    float _3257;
                    float _3258;
                    float _3259;
                    float _3260;
                    uint _3261;
                    _3255 = _3110;
                    _3256 = _3111;
                    _3257 = _3112;
                    _3258 = _3113;
                    _3259 = _3114;
                    _3260 = _3115;
                    _3261 = _3125;
                    float _3182;
                    float _3183;
                    float _3184;
                    float _3185;
                    float _3186;
                    float _3187;
                    for (;;)
                    {
                        uint _3265 = uint(findLSB(_3261)) + (_3116 << 5u);
                        uint _3262 = (_3261 + 4294967295u) & _3261;
                        uint _3267 = _3265 * 48u;
                        vec4 _3281 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3267)).x, texelFetch(g_PointLightRenderingBuffer, int(_3267 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3267 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3267 + 3u)).x));
                        uint _3287 = (_3265 * 48u) + 4u;
                        vec4 _3300 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3287)).x, texelFetch(g_PointLightRenderingBuffer, int(_3287 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3287 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3287 + 3u)).x));
                        uint _3306 = (_3265 * 48u) + 8u;
                        vec3 _3317 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3306)).x, texelFetch(g_PointLightRenderingBuffer, int(_3306 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3306 + 2u)).x));
                        float _3321 = _3281.x - _1936;
                        float _3322 = _3281.y - _1937;
                        float _3323 = _3281.z - _1938;
                        float _3324 = dot(vec3(_3321, _3322, _3323), vec3(_3321, _3322, _3323));
                        float _3327 = inversesqrt(_3324);
                        float _3328 = _3327 * _3321;
                        float _3329 = _3327 * _3322;
                        float _3330 = _3327 * _3323;
                        float _3331 = dot(vec3(_767, _770, _773), vec3(_3328, _3329, _3330));
                        float _3336 = 1.0 - (_3324 * _3281.w);
                        float _4744 = isnan(0.0) ? _3336 : (isnan(_3336) ? 0.0 : max(_3336, 0.0));
                        float _3337 = isnan(1.0) ? _4744 : (isnan(_4744) ? 1.0 : min(_4744, 1.0));
                        float _3338 = sqrt(_3324) * _3300.w;
                        float _3341 = 1.39999997615814208984375 / (_3338 + 1.39999997615814208984375);
                        float _3342 = _3341 * _3341;
                        float _3345 = ((1.0 - _3342) * _3331) + _3342;
                        float _3348 = _3338 * _3338;
                        float _3352 = ((isnan(0.0) ? _3345 : (isnan(_3345) ? 0.0 : max(_3345, 0.0))) * _3337) / ((_3348 * 0.699999988079071044921875) + 1.0);
                        float _3356 = (-0.0) - _1936;
                        float _3357 = (-0.0) - _1937;
                        float _3358 = (-0.0) - _1938;
                        float _3362 = inversesqrt(dot(vec3(_3356, _3357, _3358), vec3(_3356, _3357, _3358)));
                        float _3363 = _3362 * _3356;
                        float _3364 = _3362 * _3357;
                        float _3365 = _3362 * _3358;
                        float _3372 = exp2(log2(1.0 / ((_3348 * 3.5) + 5.0)) * 0.25);
                        float _3373 = 1.0 - _842;
                        float _3380 = sqrt(1.0 - ((1.0 - (_3373 * _3373)) * (1.0 - (_3372 * _3372))));
                        float _3381 = _3380 * _3380;
                        float _3382 = _3381 * _3381;
                        float _3383 = _3363 + _3328;
                        float _3384 = _3364 + _3329;
                        float _3385 = _3365 + _3330;
                        float _3389 = inversesqrt(dot(vec3(_3383, _3384, _3385), vec3(_3383, _3384, _3385)));
                        float _3393 = dot(vec3(_767, _770, _773), vec3(_3363, _3364, _3365));
                        float _4760 = isnan(0.0) ? _3393 : (isnan(_3393) ? 0.0 : max(_3393, 0.0));
                        float _3396 = isnan(1.0) ? _4760 : (isnan(_4760) ? 1.0 : min(_4760, 1.0));
                        float _3397 = dot(vec3(_767, _770, _773), vec3(_3389 * _3383, _3389 * _3384, _3389 * _3385));
                        float _4771 = isnan(0.0) ? _3397 : (isnan(_3397) ? 0.0 : max(_3397, 0.0));
                        float _3400 = isnan(1.0) ? _4771 : (isnan(_4771) ? 1.0 : min(_4771, 1.0));
                        float _3404 = ((_3400 * _3400) * (_3382 + (-1.0))) + 1.0;
                        float _3405 = _3341 * _3381;
                        float _3406 = _3405 * _3405;
                        float _3409 = ((1.0 - _3406) * _3331) + _3406;
                        float _4782 = isnan(0.0) ? _3409 : (isnan(_3409) ? 0.0 : max(_3409, 0.0));
                        float _3410 = isnan(1.0) ? _4782 : (isnan(_4782) ? 1.0 : min(_4782, 1.0));
                        float _3411 = 1.0 - _3381;
                        float _3421 = (0.5 / (((_3410 * ((_3396 * _3411) + _3381)) + 9.9999999392252902907785028219223e-09) + (((_3410 * _3411) + _3381) * _3396))) * _3410;
                        float _4793 = isnan(0.0) ? _3421 : (isnan(_3421) ? 0.0 : max(_3421, 0.0));
                        float _3432 = (((_3382 * 3.1415927410125732421875) * (isnan(1.0) ? _4793 : (isnan(_4793) ? 1.0 : min(_4793, 1.0)))) / ((_3404 * _3404) * ((_3348 * 2.1991131305694580078125) + 3.141590118408203125))) * _3337;
                        _3185 = (_3352 * _3300.x) + _3258;
                        _3186 = (_3352 * _3300.y) + _3259;
                        _3187 = (_3352 * _3300.z) + _3260;
                        _3182 = (_3432 * _3317.x) + _3255;
                        _3183 = (_3432 * _3317.y) + _3256;
                        _3184 = (_3432 * _3317.z) + _3257;
                        if (_3262 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3255 = _3182;
                            _3256 = _3183;
                            _3257 = _3184;
                            _3258 = _3185;
                            _3259 = _3186;
                            _3260 = _3187;
                            _3261 = _3262;
                        }
                    }
                    frontier_phi_71_pred = _3187;
                    frontier_phi_71_pred_1 = _3186;
                    frontier_phi_71_pred_2 = _3185;
                    frontier_phi_71_pred_3 = _3184;
                    frontier_phi_71_pred_4 = _3183;
                    frontier_phi_71_pred_5 = _3182;
                }
                _2969 = frontier_phi_71_pred;
                _2967 = frontier_phi_71_pred_1;
                _2965 = frontier_phi_71_pred_2;
                _2963 = frontier_phi_71_pred_3;
                _2961 = frontier_phi_71_pred_4;
                _2959 = frontier_phi_71_pred_5;
                uint _3117 = _3116 + 1u;
                if (_3117 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3110 = _2959;
                    _3111 = _2961;
                    _3112 = _2963;
                    _3113 = _2965;
                    _3114 = _2967;
                    _3115 = _2969;
                    _3116 = _3117;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2958 = _2959;
            _2960 = _2961;
            _2962 = _2963;
            _2964 = _2965;
            _2966 = _2967;
            _2968 = _2969;
        }
        uvec4 _2972 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2973 = _2972.z;
        uint _2975 = (_2973 >> 8u) & 15u;
        float _3078;
        float _3080;
        float _3082;
        float _3084;
        float _3086;
        float _3088;
        if (((4294967295u << _2975) & _2878) == 0u)
        {
            _3078 = _2958;
            _3080 = _2960;
            _3082 = _2962;
            _3084 = _2964;
            _3086 = _2966;
            _3088 = _2968;
        }
        else
        {
            float _3103 = inversesqrt(dot(vec3(_1936, _1937, _1938), vec3(_1936, _1937, _1938)));
            float _3104 = _3103 * _1936;
            float _3105 = _3103 * _1937;
            float _3106 = _3103 * _1938;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_2975 < ((_2973 >> 12u) & 15u))
            {
                float _3079;
                float _3081;
                float _3083;
                float _3085;
                float _3087;
                float _3089;
                float _3238 = _2958;
                float _3239 = _2960;
                float _3240 = _2962;
                float _3241 = _2964;
                float _3242 = _2966;
                float _3243 = _2968;
                uint _3244 = _2975;
                uint _3253;
                bool _3254;
                for (;;)
                {
                    _3253 = texelFetch(g_lightClassification, int((((_2872 << 5u) + (_2858 << 9u)) + (_3244 << 2u)) >> 2u)).x;
                    _3254 = _3253 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3254)
                    {
                        frontier_phi_82_pred = _3243;
                        frontier_phi_82_pred_1 = _3242;
                        frontier_phi_82_pred_2 = _3241;
                        frontier_phi_82_pred_3 = _3240;
                        frontier_phi_82_pred_4 = _3239;
                        frontier_phi_82_pred_5 = _3238;
                    }
                    else
                    {
                        float _3446;
                        float _3447;
                        float _3448;
                        float _3449;
                        float _3450;
                        float _3451;
                        float _3740;
                        float _3741;
                        float _3742;
                        float _3743;
                        float _3744;
                        float _3745;
                        float _3459 = _3238;
                        float _3460 = _3239;
                        float _3461 = _3240;
                        float _3462 = _3241;
                        float _3463 = _3242;
                        float _3464 = _3243;
                        uint _3465 = _3253;
                        uint _3466;
                        vec4 _3491;
                        float _3492;
                        vec4 _3507;
                        vec3 _3519;
                        vec4 _3534;
                        vec4 _3549;
                        float _3596;
                        bool _3597;
                        for (;;)
                        {
                            uint _3476 = ((_3244 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3465));
                            _3466 = (_3465 + 4294967295u) & _3465;
                            uint _3478 = _3476 * 40u;
                            _3491 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3478)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3478 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3478 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3478 + 3u)).x));
                            _3492 = _3491.w;
                            uint _3494 = (_3476 * 40u) + 4u;
                            _3507 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3494)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3494 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3494 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3494 + 3u)).x));
                            uint _3509 = (_3476 * 40u) + 8u;
                            _3519 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3509)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3509 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3509 + 2u)).x));
                            uint _3521 = (_3476 * 40u) + 16u;
                            _3534 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3521)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3521 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3521 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3521 + 3u)).x));
                            uint _3536 = (_3476 * 40u) + 20u;
                            _3549 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3536)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3536 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3536 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3536 + 3u)).x));
                            uint _3552 = (_3476 * 40u) + 24u;
                            vec4 _3565 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3552)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3552 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3552 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3552 + 3u)).x));
                            uint _3571 = (_3476 * 40u) + 28u;
                            vec4 _3584 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3571)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3571 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3571 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3571 + 3u)).x));
                            _3596 = fma(_1938, _3584.z, fma(_1937, _3584.y, _3584.x * _1936)) + _3584.w;
                            _3597 = !((fma(_1938, _3565.z, fma(_1937, _3565.y, _3565.x * _1936)) + _3565.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3597)
                            {
                                float _3624 = _3491.x - _1936;
                                float _3625 = _3491.y - _1937;
                                float _3626 = _3491.z - _1938;
                                float _3627 = dot(vec3(_3624, _3625, _3626), vec3(_3624, _3625, _3626));
                                float _3630 = inversesqrt(_3627);
                                float _3631 = _3630 * _3624;
                                float _3632 = _3630 * _3625;
                                float _3633 = _3630 * _3626;
                                float _3637 = 1.0 - (_3627 / (_3492 * _3492));
                                float _4804 = isnan(0.0) ? _3637 : (isnan(_3637) ? 0.0 : max(_3637, 0.0));
                                float _3638 = isnan(1.0) ? _4804 : (isnan(_4804) ? 1.0 : min(_4804, 1.0));
                                float _3642 = sqrt(_3627) * _3507.w;
                                float _3644 = 1.39999997615814208984375 / (_3642 + 1.39999997615814208984375);
                                float _3645 = _3644 * _3644;
                                float _3648 = ((1.0 - _3645) * dot(vec3(_3631, _3632, _3633), vec3(_767, _770, _773))) + _3645;
                                float _3651 = _3642 * _3642;
                                float _3655 = (fma(_1938, _3534.z, fma(_1937, _3534.y, _3534.x * _1936)) + _3534.w) / _3596;
                                float _3656 = (fma(_1938, _3549.z, fma(_1937, _3549.y, _3549.x * _1936)) + _3549.w) / _3596;
                                float _3660 = 1.0 - dot(vec2(_3655, _3656), vec2(_3655, _3656));
                                float _4820 = isnan(0.0) ? _3660 : (isnan(_3660) ? 0.0 : max(_3660, 0.0));
                                float _3661 = isnan(1.0) ? _4820 : (isnan(_4820) ? 1.0 : min(_4820, 1.0));
                                float _3662 = _3661 * (((isnan(0.0) ? _3648 : (isnan(_3648) ? 0.0 : max(_3648, 0.0))) * _3638) / ((_3651 * 0.699999988079071044921875) + 1.0));
                                float _3674 = exp2(log2(1.0 / ((_3651 * 3.5) + 5.0)) * 0.25);
                                float _3675 = 1.0 - _842;
                                float _3682 = sqrt(1.0 - ((1.0 - (_3675 * _3675)) * (1.0 - (_3674 * _3674))));
                                float _3683 = _3682 * _3682;
                                float _3684 = _3683 * _3683;
                                float _3685 = _3631 - _3104;
                                float _3686 = _3632 - _3105;
                                float _3687 = _3633 - _3106;
                                float _3691 = inversesqrt(dot(vec3(_3685, _3686, _3687), vec3(_3685, _3686, _3687)));
                                float _3695 = dot(vec3(_767, _770, _773), vec3((-0.0) - _3104, (-0.0) - _3105, (-0.0) - _3106));
                                float _4831 = isnan(0.0) ? _3695 : (isnan(_3695) ? 0.0 : max(_3695, 0.0));
                                float _3698 = isnan(1.0) ? _4831 : (isnan(_4831) ? 1.0 : min(_4831, 1.0));
                                float _3699 = dot(vec3(_767, _770, _773), vec3(_3691 * _3685, _3691 * _3686, _3691 * _3687));
                                float _4842 = isnan(0.0) ? _3699 : (isnan(_3699) ? 0.0 : max(_3699, 0.0));
                                float _3702 = isnan(1.0) ? _4842 : (isnan(_4842) ? 1.0 : min(_4842, 1.0));
                                float _3706 = ((_3702 * _3702) * (_3684 + (-1.0))) + 1.0;
                                float _3707 = _3644 * _3683;
                                float _3708 = _3707 * _3707;
                                float _3714 = ((1.0 - _3708) * dot(vec3(_767, _770, _773), vec3(_3631, _3632, _3633))) + _3708;
                                float _4853 = isnan(0.0) ? _3714 : (isnan(_3714) ? 0.0 : max(_3714, 0.0));
                                float _3715 = isnan(1.0) ? _4853 : (isnan(_4853) ? 1.0 : min(_4853, 1.0));
                                float _3716 = 1.0 - _3683;
                                float _3726 = (0.5 / (((_3715 * ((_3698 * _3716) + _3683)) + 9.9999999392252902907785028219223e-09) + (((_3715 * _3716) + _3683) * _3698))) * _3715;
                                float _4864 = isnan(0.0) ? _3726 : (isnan(_3726) ? 0.0 : max(_3726, 0.0));
                                float _3736 = (_3661 * _3638) * (((_3684 * 3.1415927410125732421875) * (isnan(1.0) ? _4864 : (isnan(_4864) ? 1.0 : min(_4864, 1.0)))) / ((_3706 * _3706) * ((_3651 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3662 * _3507.z;
                                frontier_phi_88_pred_1 = _3662 * _3507.y;
                                frontier_phi_88_pred_2 = _3662 * _3507.x;
                                frontier_phi_88_pred_3 = _3736 * _3519.z;
                                frontier_phi_88_pred_4 = _3736 * _3519.y;
                                frontier_phi_88_pred_5 = _3736 * _3519.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3745 = frontier_phi_88_pred;
                            _3744 = frontier_phi_88_pred_1;
                            _3743 = frontier_phi_88_pred_2;
                            _3742 = frontier_phi_88_pred_3;
                            _3741 = frontier_phi_88_pred_4;
                            _3740 = frontier_phi_88_pred_5;
                            _3449 = _3743 + _3462;
                            _3450 = _3744 + _3463;
                            _3451 = _3745 + _3464;
                            _3446 = _3740 + _3459;
                            _3447 = _3741 + _3460;
                            _3448 = _3742 + _3461;
                            if (_3466 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3459 = _3446;
                                _3460 = _3447;
                                _3461 = _3448;
                                _3462 = _3449;
                                _3463 = _3450;
                                _3464 = _3451;
                                _3465 = _3466;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3451;
                        frontier_phi_82_pred_1 = _3450;
                        frontier_phi_82_pred_2 = _3449;
                        frontier_phi_82_pred_3 = _3448;
                        frontier_phi_82_pred_4 = _3447;
                        frontier_phi_82_pred_5 = _3446;
                    }
                    _3089 = frontier_phi_82_pred;
                    _3087 = frontier_phi_82_pred_1;
                    _3085 = frontier_phi_82_pred_2;
                    _3083 = frontier_phi_82_pred_3;
                    _3081 = frontier_phi_82_pred_4;
                    _3079 = frontier_phi_82_pred_5;
                    uint _3245 = _3244 + 1u;
                    if (_3245 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3238 = _3079;
                        _3239 = _3081;
                        _3240 = _3083;
                        _3241 = _3085;
                        _3242 = _3087;
                        _3243 = _3089;
                        _3244 = _3245;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3085;
                frontier_phi_63_64_ladder_1 = _3089;
                frontier_phi_63_64_ladder_2 = _3087;
                frontier_phi_63_64_ladder_3 = _3083;
                frontier_phi_63_64_ladder_4 = _3081;
                frontier_phi_63_64_ladder_5 = _3079;
            }
            else
            {
                frontier_phi_63_64_ladder = _2964;
                frontier_phi_63_64_ladder_1 = _2968;
                frontier_phi_63_64_ladder_2 = _2966;
                frontier_phi_63_64_ladder_3 = _2962;
                frontier_phi_63_64_ladder_4 = _2960;
                frontier_phi_63_64_ladder_5 = _2958;
            }
            _3078 = frontier_phi_63_64_ladder_5;
            _3080 = frontier_phi_63_64_ladder_4;
            _3082 = frontier_phi_63_64_ladder_3;
            _3084 = frontier_phi_63_64_ladder;
            _3086 = frontier_phi_63_64_ladder_2;
            _3088 = frontier_phi_63_64_ladder_1;
        }
        float _3093 = isnan(1.0) ? _826 : (isnan(_826) ? 1.0 : min(_826, 1.0));
        _2891 = (_3093 * _3084) + _2403;
        _2893 = (_3093 * _3086) + _2405;
        _2895 = (_3093 * _3088) + _2407;
        _2897 = ((_3078 * _811) * _3093) + _2741;
        _2899 = ((_3080 * _813) * _3093) + _2743;
        _2901 = ((_3082 * _814) * _3093) + _2745;
    }
    else
    {
        _2891 = _2403;
        _2893 = _2405;
        _2895 = _2407;
        _2897 = _2741;
        _2899 = _2743;
        _2901 = _2745;
    }
    float _4880 = isnan(0.0) ? _801 : (isnan(_801) ? 0.0 : max(_801, 0.0));
    float _4891 = isnan(0.0) ? _802 : (isnan(_802) ? 0.0 : max(_802, 0.0));
    float _4902 = isnan(0.0) ? _803 : (isnan(_803) ? 0.0 : max(_803, 0.0));
    float _2918 = ((isnan(1.0) ? _4880 : (isnan(_4880) ? 1.0 : min(_4880, 1.0))) * (_2891 + ((isnan(0.0) ? _1589 : (isnan(_1589) ? 0.0 : max(_1589, 0.0))) * _826))) + ((_2897 + ((isnan(0.0) ? _1883 : (isnan(_1883) ? 0.0 : max(_1883, 0.0))) * _1668)) * cbPerFrame._m0[3u].x);
    float _2919 = ((isnan(1.0) ? _4891 : (isnan(_4891) ? 1.0 : min(_4891, 1.0))) * (_2893 + ((isnan(0.0) ? _1592 : (isnan(_1592) ? 0.0 : max(_1592, 0.0))) * _826))) + ((_2899 + ((isnan(0.0) ? _1886 : (isnan(_1886) ? 0.0 : max(_1886, 0.0))) * _1668)) * cbPerFrame._m0[3u].x);
    float _2920 = ((isnan(1.0) ? _4902 : (isnan(_4902) ? 1.0 : min(_4902, 1.0))) * (_2895 + ((isnan(0.0) ? _1595 : (isnan(_1595) ? 0.0 : max(_1595, 0.0))) * _826))) + ((_2901 + ((isnan(0.0) ? _1889 : (isnan(_1889) ? 0.0 : max(_1889, 0.0))) * _1668)) * cbPerFrame._m0[3u].x);
    uint _2921 = _786 + 6u;
    float _2929 = _748 / cbSceneParam._m0[86u].x;
    float _2930 = _749 / cbSceneParam._m0[86u].y;
    vec4 _2944 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2929, _2930, (log2((isnan(cbSceneParam._m0[77u].w) ? _671 : (isnan(_671) ? cbSceneParam._m0[77u].w : min(_671, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2946 = _2944.x;
    float _2947 = _2944.y;
    float _2948 = _2944.z;
    float _2949 = _2944.w;
    float _3020;
    float _3022;
    float _3024;
    float _3026;
    if (_671 > cbSceneParam._m0[78u].w)
    {
        float _2983 = isnan(_671) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _671 : min(cbSceneParam._m0[80u].w, _671));
        float _2984 = _2983 / _671;
        float _2995 = _2984 * _721;
        float _2996 = _722 * _2984;
        float _2997 = (-0.0) - _2996;
        float _2998 = _2984 * _723;
        float _3000 = (cbSceneParam._m0[77u].w * _2997) / _2983;
        float _3001 = _3000 + cbSceneParam._m0[79u].w;
        float _3002 = cbSceneParam._m0[79u].w - _2996;
        float _3008 = sqrt(((_2995 * _2995) + (_2996 * _2996)) + (_2998 * _2998));
        float _3011 = (1.0 - (cbSceneParam._m0[77u].w / _2983)) * _3008;
        float _3016 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3018 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3195;
        if (abs((_2997 - _3000) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3195 = ((((_3001 > 0.0) ? exp2(_3016 * _3001) : (2.0 - exp2(_3018 * _3001))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3011;
        }
        else
        {
            float _3139 = 1.0 / cbSceneParam._m0[80u].x;
            float _3140 = isnan(_3002) ? _3001 : (isnan(_3001) ? _3002 : max(_3001, _3002));
            float _3141 = isnan(_3002) ? _3001 : (isnan(_3001) ? _3002 : min(_3001, _3002));
            float _3150 = isnan(0.0) ? _3140 : (isnan(_3140) ? 0.0 : min(_3140, 0.0));
            float _3151 = isnan(0.0) ? _3141 : (isnan(_3141) ? 0.0 : min(_3141, 0.0));
            _3195 = ((abs(_3008 / _2997) * cbSceneParam._m0[80u].y) * ((((_3150 - _3151) * 2.0) - ((exp2(_3016 * (isnan(0.0) ? _3140 : (isnan(_3140) ? 0.0 : max(_3140, 0.0)))) - exp2(_3016 * (isnan(0.0) ? _3141 : (isnan(_3141) ? 0.0 : max(_3141, 0.0))))) * _3139)) - ((exp2(_3018 * _3150) - exp2(_3018 * _3151)) * _3139))) + (_3011 * cbSceneParam._m0[80u].z);
        }
        vec4 _3197 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2929, _2930, 1.0), 0.0);
        float _3206 = exp2((_3195 * (-1.44269502162933349609375)) * (1.0 - _3197.w));
        float _3207 = log2(_3206);
        float _3223 = log2(_2949);
        _3020 = (exp2(_3223 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3207 * cbSceneParam._m0[78u].x)) * _3197.x) / cbSceneParam._m0[78u].x)) + _2946;
        _3022 = (exp2(_3223 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3207 * cbSceneParam._m0[78u].y)) * _3197.y) / cbSceneParam._m0[78u].y)) + _2947;
        _3024 = (exp2(_3223 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3207 * cbSceneParam._m0[78u].z)) * _3197.z) / cbSceneParam._m0[78u].z)) + _2948;
        _3026 = _3206 * _2949;
    }
    else
    {
        _3020 = _2946;
        _3022 = _2947;
        _3024 = _2948;
        _3026 = _2949;
    }
    bool _3233;
    vec4 _3036;
    vec4 _3058;
    float _3060;
    float _3064;
    float _3065;
    float _3066;
    float _3067;
    bool _3077;
    for (;;)
    {
        _3036 = cbMatDynParam._m0[0u];
        float _3038 = roundEven(_3036.y);
        bool _3039 = _3038 == 3.0;
        float _3040 = log2(_3026);
        float _3047 = exp2(_3040 * cbSceneParam._m0[78u].x) * _2918;
        float _3048 = exp2(_3040 * cbSceneParam._m0[78u].y) * _2919;
        float _3049 = exp2(_3040 * cbSceneParam._m0[78u].z) * _2920;
        float _3056 = _737 + (-0.5);
        _3058 = cbMtdParam._m0[1u];
        _3060 = _3058.y * _3056;
        float _3063 = (_3038 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3064 = _3063 * (_3039 ? _3047 : (_3047 + (cbSceneParam._m0[72u].w * _3020)));
        _3065 = _3063 * (_3039 ? _3048 : (_3048 + (cbSceneParam._m0[72u].w * _3022)));
        _3066 = _3063 * (_3039 ? _3049 : (_3049 + (cbSceneParam._m0[72u].w * _3024)));
        _3067 = _3056 * 0.999000012874603271484375;
        _3077 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3077)
        {
            if ((cbInstanceData._m0[_786 + 7u].x + _3067) < 0.5)
            {
                _3233 = true;
                break;
            }
        }
        uint _3174 = _787 + uint(_3036.w);
        if ((cbInstanceData._m0[_3174].w < 1.0) && ((cbInstanceData._m0[_3174].w + _3067) < 0.5))
        {
            _3233 = true;
            break;
        }
        if ((_3060 + 1.0) < _3058.x)
        {
            _3233 = true;
            break;
        }
        _3233 = false;
        break;
    }
    float _3437;
    if (_3233)
    {
        discard_state = true;
        _3437 = 0.0;
    }
    else
    {
        _3437 = cbInstanceData._m0[_2921].w;
    }
    SV_Target.x = _3064;
    SV_Target.y = _3065;
    SV_Target.z = _3066;
    SV_Target.w = _3437;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2921].w;
    discard_exit();
}


