#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[20];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_19;
layout(set = 0, binding = 11) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_2;
layout(set = 0, binding = 12) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_20;
layout(set = 0, binding = 13) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_3;
layout(set = 0, binding = 14) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_5;
layout(set = 0, binding = 15) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_6;
layout(set = 0, binding = 16) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_7;
layout(set = 0, binding = 17) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_8;
layout(set = 0, binding = 18) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_11;
layout(set = 0, binding = 3) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_14;
layout(set = 0, binding = 6) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_15;
layout(set = 0, binding = 7) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_16;
layout(set = 0, binding = 8) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_17;
layout(set = 0, binding = 9) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_18;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1361;
float _3768;
float _3769;
float _3770;
float _3771;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _219 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _220 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _221 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _227 = inversesqrt(dot(vec3(_219, _220, _221), vec3(_219, _220, _221)));
    float _234 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _241 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _264 = sin(cbMtdParam._m0[18u].x);
    float _265 = cos(cbMtdParam._m0[18u].x);
    float _266 = TEXCOORD.x - cbMtdParam._m0[17u].w;
    float _267 = TEXCOORD.y - cbMtdParam._m0[17u].w;
    float _275 = (cbMtdParam._m0[17u].w + cbMtdParam._m0[19u].y) + fma(_267, (-0.0) - _264, _265 * _266);
    float _277 = (cbMtdParam._m0[17u].w + cbMtdParam._m0[19u].z) + fma(_267, _265, _266 * _264);
    vec4 _290 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * _275) + cbTextureTilingScale._m0[1u].z, (_277 * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w));
    float _296 = _290.x * cbMtdParam._m0[10u].x;
    float _297 = _290.y * cbMtdParam._m0[10u].y;
    float _298 = _290.z * cbMtdParam._m0[10u].z;
    vec4 _316 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w));
    vec4 _335 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_0, SS_WrapLinear), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _360 = cbMtdParam._m0[19u].x * texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.x) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD.y) + cbTextureTilingScale._m0[13u].w)).x;
    float _371 = ((cbMtdParam._m0[15u].x * (-1.39999997615814208984375)) * (((1.0 - _335.x) * 2.0) - _360)) + 1.0;
    float _3780 = isnan(0.0) ? _371 : (isnan(_371) ? 0.0 : max(_371, 0.0));
    float _372 = isnan(1.0) ? _3780 : (isnan(_3780) ? 1.0 : min(_3780, 1.0));
    float _379 = (_372 * ((_316.x * cbMtdParam._m0[11u].x) - _296)) + _296;
    float _380 = (_372 * ((_316.y * cbMtdParam._m0[11u].y) - _297)) + _297;
    float _381 = (_372 * ((_316.z * cbMtdParam._m0[11u].z) - _298)) + _298;
    vec4 _399 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_8, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[17u].x * TEXCOORD.x) + cbTextureTilingScale._m0[17u].z, (cbTextureTilingScale._m0[17u].y * TEXCOORD.y) + cbTextureTilingScale._m0[17u].w));
    float _412 = (((((1.0 - _335.y) * 2.0) - _360) * (-1.39999997615814208984375)) * cbMtdParam._m0[18u].z) + 1.0;
    float _3791 = isnan(0.0) ? _412 : (isnan(_412) ? 0.0 : max(_412, 0.0));
    float _413 = isnan(1.0) ? _3791 : (isnan(_3791) ? 1.0 : min(_3791, 1.0));
    float _420 = (((_399.x * cbMtdParam._m0[12u].x) - _379) * _413) + _379;
    float _421 = (_413 * ((_399.y * cbMtdParam._m0[12u].y) - _380)) + _380;
    float _422 = (_413 * ((_399.z * cbMtdParam._m0[12u].z) - _381)) + _381;
    vec4 _439 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _452 = (((((1.0 - _335.z) * 2.0) - _360) * (-1.39999997615814208984375)) * cbMtdParam._m0[18u].w) + 1.0;
    float _3802 = isnan(0.0) ? _452 : (isnan(_452) ? 0.0 : max(_452, 0.0));
    float _453 = isnan(1.0) ? _3802 : (isnan(_3802) ? 1.0 : min(_3802, 1.0));
    float _460 = (((_439.x * cbMtdParam._m0[13u].x) - _420) * _453) + _420;
    float _461 = (_453 * ((_439.y * cbMtdParam._m0[13u].y) - _421)) + _421;
    float _462 = (_453 * ((_439.z * cbMtdParam._m0[13u].z) - _422)) + _422;
    vec4 _482 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_20, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.z) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.w) + cbTextureTilingScale._m0[12u].w));
    float _511 = (TEXCOORD_5.x - ((cbMtdParam._m0[15u].w * (1.0 - TEXCOORD_5.x)) * (texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[18u].x * TEXCOORD.z) + cbTextureTilingScale._m0[18u].z, (cbTextureTilingScale._m0[18u].y * TEXCOORD.w) + cbTextureTilingScale._m0[18u].w)).x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[15u].z + 1.0);
    float _3813 = isnan(0.0) ? _511 : (isnan(_511) ? 0.0 : max(_511, 0.0));
    float _512 = isnan(1.0) ? _3813 : (isnan(_3813) ? 1.0 : min(_3813, 1.0));
    float _519 = (_512 * ((_482.x * cbMtdParam._m0[14u].x) - _460)) + _460;
    float _520 = (_512 * ((_482.y * cbMtdParam._m0[14u].y) - _461)) + _461;
    float _521 = (_512 * ((_482.z * cbMtdParam._m0[14u].z) - _462)) + _462;
    vec4 _534 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * _275) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _277) + cbTextureTilingScale._m0[5u].w));
    float _536 = _534.x;
    float _554 = ((texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w)).x - _536) * _372) + _536;
    float _572 = ((texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w)).x - _554) * _413) + _554;
    float _589 = ((texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w)).x - _572) * _453) + _572;
    float _593 = (_589 - (_589 * TEXCOORD_5.x)) * cbMtdParam._m0[18u].y;
    vec4 _606 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.z) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.w) + cbTextureTilingScale._m0[3u].w));
    vec4 _628 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[14u].x * _275) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _277) + cbTextureTilingScale._m0[14u].w));
    float _630 = _628.x;
    float _631 = _628.y;
    float _634 = cbMtdParam._m0[17u].y * _628.z;
    vec4 _646 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * TEXCOORD.x) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * TEXCOORD.y) + cbTextureTilingScale._m0[15u].w));
    float _655 = (((cbMtdParam._m0[17u].x * _646.z) - _634) * _372) + _634;
    vec4 _668 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_15, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _680 = (((cbMtdParam._m0[16u].w * _668.z) - _655) * _413) + _655;
    vec4 _693 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _702 = (((cbMtdParam._m0[16u].z * _693.z) - _680) * _453) + _680;
    float _707 = ((cbMtdParam._m0[16u].x * TEXCOORD_5.x) * ((_606.z * cbMtdParam._m0[17u].z) - _702)) + _702;
    vec4 _720 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[16u].x * TEXCOORD.x) + cbTextureTilingScale._m0[16u].z, (cbTextureTilingScale._m0[16u].y * TEXCOORD.y) + cbTextureTilingScale._m0[16u].w));
    float _732 = ((_646.x - _630) * _372) + _630;
    float _733 = ((_646.y - _631) * _372) + _631;
    float _738 = ((_668.x - _732) * _413) + _732;
    float _739 = ((_668.y - _733) * _413) + _733;
    float _748 = ((((_693.x - _738) * _453) + _738) * 2.0) + (-1.0);
    float _749 = ((((_693.y - _739) * _453) + _739) * 2.0) + (-1.0);
    float _750 = dot(vec2(_748, _749), vec2(_748, _749));
    float _3824 = isnan(0.0) ? _750 : (isnan(_750) ? 0.0 : max(_750, 0.0));
    float _755 = sqrt(1.0 - (isnan(1.0) ? _3824 : (isnan(_3824) ? 1.0 : min(_3824, 1.0))));
    float _765 = ((((_720.x * 2.0) + (-1.0)) * cbMtdParam._m0[16u].y) + _748) + ((((_606.x * 2.0) + (-1.0)) * TEXCOORD_5.x) * cbMtdParam._m0[15u].y);
    float _766 = ((((_720.y * 2.0) + (-1.0)) * cbMtdParam._m0[16u].y) + _749) + ((((_606.y * 2.0) + (-1.0)) * TEXCOORD_5.y) * cbMtdParam._m0[15u].y);
    float _769 = fma(_755, _234 * NORMAL.x, fma(_766, _241 * TANGENT.x, (_227 * _219) * _765));
    float _772 = fma(_755, _234 * NORMAL.y, fma(_766, _241 * TANGENT.y, (_227 * _220) * _765));
    float _775 = fma(_755, _234 * NORMAL.z, fma(_766, _241 * TANGENT.z, (_227 * _221) * _765));
    float _779 = inversesqrt(dot(vec3(_769, _772, _775), vec3(_769, _772, _775)));
    float _780 = _779 * _769;
    float _781 = _779 * _772;
    float _782 = _779 * _775;
    float _3835 = isnan(0.0) ? _707 : (isnan(_707) ? 0.0 : max(_707, 0.0));
    float _783 = isnan(1.0) ? _3835 : (isnan(_3835) ? 1.0 : min(_3835, 1.0));
    float _3846 = isnan(0.0) ? _519 : (isnan(_519) ? 0.0 : max(_519, 0.0));
    float _3857 = isnan(0.0) ? _520 : (isnan(_520) ? 0.0 : max(_520, 0.0));
    float _3868 = isnan(0.0) ? _521 : (isnan(_521) ? 0.0 : max(_521, 0.0));
    float _3879 = isnan(0.0) ? _593 : (isnan(_593) ? 0.0 : max(_593, 0.0));
    float _787 = isnan(1.0) ? _3879 : (isnan(_3879) ? 1.0 : min(_3879, 1.0));
    float _803 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _843 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _853 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _843);
    float _854 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _843);
    float _855 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _843);
    float _859 = inversesqrt(dot(vec3(_853, _854, _855), vec3(_853, _854, _855)));
    float _860 = _853 * _859;
    float _861 = _854 * _859;
    float _862 = _855 * _859;
    vec4 _867 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _869 = _867.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1041 = sqrt(((_853 * _853) + (_854 * _854)) + (_855 * _855));
        float _1047 = (cbMatDynParam._m0[5u].x * _1041) + cbMatDynParam._m0[5u].y;
        float _3890 = isnan(0.0) ? _1047 : (isnan(_1047) ? 0.0 : max(_1047, 0.0));
        float _1048 = isnan(1.0) ? _3890 : (isnan(_3890) ? 1.0 : min(_3890, 1.0));
        float _1052 = (cbMatDynParam._m0[5u].z * _1041) + cbMatDynParam._m0[5u].w;
        float _3901 = isnan(0.0) ? _1052 : (isnan(_1052) ? 0.0 : max(_1052, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3901 : (isnan(_3901) ? 1.0 : min(_3901, 1.0))) - _1048)) + _1048) < ((_869 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _880 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _881 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _899 = fma(_782, cbSceneParam._m0[5u].z, fma(_781, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _780));
    float _902 = fma(_782, cbSceneParam._m0[6u].z, fma(_781, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _780));
    float _905 = fma(_782, cbSceneParam._m0[7u].z, fma(_781, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _780));
    uint _918 = uint(roundEven(NORMAL.w)) * 13u;
    uint _919 = _918 + 9u;
    uint _920 = _919 + uint(cbMatDynParam._m0[0u].w);
    float _926 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3846 : (isnan(_3846) ? 1.0 : min(_3846, 1.0)))) * cbInstanceData._m0[_920].x;
    float _927 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3857 : (isnan(_3857) ? 1.0 : min(_3857, 1.0)))) * cbInstanceData._m0[_920].y;
    float _928 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3868 : (isnan(_3868) ? 1.0 : min(_3868, 1.0)))) * cbInstanceData._m0[_920].z;
    float _3912 = isnan(0.0) ? _926 : (isnan(_926) ? 0.0 : max(_926, 0.0));
    float _929 = isnan(1.0) ? _3912 : (isnan(_3912) ? 1.0 : min(_3912, 1.0));
    float _3923 = isnan(0.0) ? _927 : (isnan(_927) ? 0.0 : max(_927, 0.0));
    float _930 = isnan(1.0) ? _3923 : (isnan(_3923) ? 1.0 : min(_3923, 1.0));
    float _3934 = isnan(0.0) ? _928 : (isnan(_928) ? 0.0 : max(_928, 0.0));
    float _931 = isnan(1.0) ? _3934 : (isnan(_3934) ? 1.0 : min(_3934, 1.0));
    float _932 = 1.0 - _787;
    float _933 = _929 * _932;
    float _934 = _930 * _932;
    float _935 = _931 * _932;
    float _940 = (_929 + (-0.039999999105930328369140625)) * _787;
    float _941 = (_930 + (-0.039999999105930328369140625)) * _787;
    float _942 = (_931 + (-0.039999999105930328369140625)) * _787;
    float _943 = _940 + 0.039999999105930328369140625;
    float _945 = _941 + 0.039999999105930328369140625;
    float _946 = _942 + 0.039999999105930328369140625;
    vec4 _955 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _880, cbSceneParam._m0[86u].y * _881));
    float _958 = _955.x * TEXCOORD_5.w;
    float _959 = dot(vec3(_780, _781, _782), vec3(_860, _861, _862));
    float _962 = _959 * 2.0;
    float _966 = (_962 * _780) - _860;
    float _967 = (_962 * _781) - _861;
    float _968 = (_962 * _782) - _862;
    float _972 = abs(dot(vec3(_860, _861, _862), vec3(_780, _781, _782)));
    float _3945 = isnan(0.0) ? _972 : (isnan(_972) ? 0.0 : max(_972, 0.0));
    float _974 = sqrt(_783);
    float _987 = exp2((_974 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3945 : (isnan(_3945) ? 1.0 : min(_3945, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_974 * 3.0));
    float _993 = (1.0 - _987) * ((_974 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _994 = _987 * _974;
    float _1022 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1026 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1030 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1360;
    float _1362;
    float _1363;
    float _1364;
    float _1365;
    float _1366;
    float _1367;
    float _1368;
    float _1369;
    float _1370;
    float _1371;
    float _1372;
    float _1373;
    float _1374;
    float _1375;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1085 = fma(_1030, cbModelParam._m0[26u].z, fma(_1026, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1022));
        float _1089 = fma(_1030, cbModelParam._m0[27u].z, fma(_1026, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1022));
        float _1093 = fma(_1030, cbModelParam._m0[28u].z, fma(_1026, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1022));
        float _1118 = _1022 + _780;
        float _1119 = _1026 + _781;
        float _1120 = _1030 + _782;
        float _1130 = fma(_1120, cbModelParam._m0[26u].z, fma(_1119, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1118)) - _1085;
        float _1131 = fma(_1120, cbModelParam._m0[27u].z, fma(_1119, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1118)) - _1089;
        float _1132 = fma(_1120, cbModelParam._m0[28u].z, fma(_1119, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1118)) - _1093;
        float _1136 = inversesqrt(dot(vec3(_1130, _1131, _1132), vec3(_1130, _1131, _1132)));
        float _1149 = ((_1136 * _1130) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1085 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1150 = ((_1136 * _1131) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1089 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1151 = ((_1136 * _1132) / cbModelParam._m0[34u].z) + ((((((_1093 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1154 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1149, _1150, _1151), 0.0);
        vec4 _1161 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1149, _1150, _1151), 0.0);
        vec4 _1168 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1149, _1150, _1151), 0.0);
        vec4 _1175 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1149, _1150, _1151), 0.0);
        float _1188 = exp2((_1154.w + (-0.5)) * 20.0) * 2.0;
        float _1189 = _1188 * (_1154.x + (-0.5));
        float _1190 = _1188 * (_1154.y + (-0.5));
        float _1191 = _1188 * (_1154.z + (-0.5));
        float _1198 = exp2((_1161.w + (-0.5)) * 20.0) * 2.0;
        float _1199 = _1198 * (_1161.x + (-0.5));
        float _1200 = _1198 * (_1161.y + (-0.5));
        float _1201 = _1198 * (_1161.z + (-0.5));
        float _1208 = exp2((_1168.w + (-0.5)) * 20.0) * 2.0;
        float _1209 = _1208 * (_1168.x + (-0.5));
        float _1210 = _1208 * (_1168.y + (-0.5));
        float _1211 = _1208 * (_1168.z + (-0.5));
        float _1218 = exp2((_1175.w + (-0.5)) * 20.0) * 2.0;
        float _1219 = _1218 * (_1175.x + (-0.5));
        float _1220 = _1218 * (_1175.y + (-0.5));
        float _1221 = _1218 * (_1175.z + (-0.5));
        float _1222 = isnan(0.0) ? _1219 : (isnan(_1219) ? 0.0 : max(_1219, 0.0));
        float _1223 = isnan(0.0) ? _1220 : (isnan(_1220) ? 0.0 : max(_1220, 0.0));
        float _1224 = isnan(0.0) ? _1221 : (isnan(_1221) ? 0.0 : max(_1221, 0.0));
        float _1225 = _1189 * 0.5;
        float _1226 = _1199 * 0.5;
        float _1227 = _1209 * 0.5;
        float _1228 = dot(vec3(_1225, _1226, _1227), vec3(_1225, _1226, _1227));
        float _1233 = (_1228 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1228);
        float _1242 = (dot(vec3(_780, _781, _782), vec3(_1233 * _1225, _1233 * _1226, _1233 * _1227)) + 1.0) * 0.5;
        float _3971 = isnan(0.0) ? _1242 : (isnan(_1242) ? 0.0 : max(_1242, 0.0));
        float _1252 = sqrt(((_1226 * _1226) + (_1225 * _1225)) + (_1227 * _1227)) / (_1222 + 9.9999997473787516355514526367188e-06);
        float _3982 = isnan(0.0) ? _1252 : (isnan(_1252) ? 0.0 : max(_1252, 0.0));
        float _1253 = isnan(1.0) ? _3982 : (isnan(_3982) ? 1.0 : min(_3982, 1.0));
        float _1254 = _1253 * 2.0;
        float _1258 = (1.0 - _1253) / (_1253 + 1.0);
        float _3993 = isnan(0.0) ? _1258 : (isnan(_1258) ? 0.0 : max(_1258, 0.0));
        float _1259 = isnan(1.0) ? _3993 : (isnan(_3993) ? 1.0 : min(_3993, 1.0));
        float _1268 = ((((1.0 - _1259) * (_1254 + 2.0)) * exp2(log2(isnan(1.0) ? _3971 : (isnan(_3971) ? 1.0 : min(_3971, 1.0))) * (_1254 + 1.0))) + _1259) * _1222;
        float _1269 = _1190 * 0.5;
        float _1270 = _1200 * 0.5;
        float _1271 = _1210 * 0.5;
        float _1272 = dot(vec3(_1269, _1270, _1271), vec3(_1269, _1270, _1271));
        float _1277 = (_1272 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1272);
        float _1285 = (dot(vec3(_780, _781, _782), vec3(_1277 * _1269, _1277 * _1270, _1277 * _1271)) + 1.0) * 0.5;
        float _4004 = isnan(0.0) ? _1285 : (isnan(_1285) ? 0.0 : max(_1285, 0.0));
        float _1294 = sqrt(((_1270 * _1270) + (_1269 * _1269)) + (_1271 * _1271)) / (_1223 + 9.9999997473787516355514526367188e-06);
        float _4015 = isnan(0.0) ? _1294 : (isnan(_1294) ? 0.0 : max(_1294, 0.0));
        float _1295 = isnan(1.0) ? _4015 : (isnan(_4015) ? 1.0 : min(_4015, 1.0));
        float _1296 = _1295 * 2.0;
        float _1300 = (1.0 - _1295) / (_1295 + 1.0);
        float _4026 = isnan(0.0) ? _1300 : (isnan(_1300) ? 0.0 : max(_1300, 0.0));
        float _1301 = isnan(1.0) ? _4026 : (isnan(_4026) ? 1.0 : min(_4026, 1.0));
        float _1310 = ((((1.0 - _1301) * (_1296 + 2.0)) * exp2(log2(isnan(1.0) ? _4004 : (isnan(_4004) ? 1.0 : min(_4004, 1.0))) * (_1296 + 1.0))) + _1301) * _1223;
        float _1311 = _1191 * 0.5;
        float _1312 = _1201 * 0.5;
        float _1313 = _1211 * 0.5;
        float _1314 = dot(vec3(_1311, _1312, _1313), vec3(_1311, _1312, _1313));
        float _1319 = (_1314 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1314);
        float _1327 = (dot(vec3(_780, _781, _782), vec3(_1319 * _1311, _1319 * _1312, _1319 * _1313)) + 1.0) * 0.5;
        float _4037 = isnan(0.0) ? _1327 : (isnan(_1327) ? 0.0 : max(_1327, 0.0));
        float _1336 = sqrt(((_1312 * _1312) + (_1311 * _1311)) + (_1313 * _1313)) / (_1224 + 9.9999997473787516355514526367188e-06);
        float _4048 = isnan(0.0) ? _1336 : (isnan(_1336) ? 0.0 : max(_1336, 0.0));
        float _1337 = isnan(1.0) ? _4048 : (isnan(_4048) ? 1.0 : min(_4048, 1.0));
        float _1338 = _1337 * 2.0;
        float _1342 = (1.0 - _1337) / (_1337 + 1.0);
        float _4059 = isnan(0.0) ? _1342 : (isnan(_1342) ? 0.0 : max(_1342, 0.0));
        float _1343 = isnan(1.0) ? _4059 : (isnan(_4059) ? 1.0 : min(_4059, 1.0));
        float _1352 = ((((1.0 - _1343) * (_1338 + 2.0)) * exp2(log2(isnan(1.0) ? _4037 : (isnan(_4037) ? 1.0 : min(_4037, 1.0))) * (_1338 + 1.0))) + _1343) * _1224;
        _1360 = _1191;
        _1362 = _1190;
        _1363 = _1189;
        _1364 = _1201;
        _1365 = _1200;
        _1366 = _1199;
        _1367 = _1211;
        _1368 = _1210;
        _1369 = _1209;
        _1370 = _1224;
        _1371 = _1223;
        _1372 = _1222;
        _1373 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1268 : (isnan(_1268) ? 0.0 : max(_1268, 0.0)));
        _1374 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1310 : (isnan(_1310) ? 0.0 : max(_1310, 0.0)));
        _1375 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1352 : (isnan(_1352) ? 0.0 : max(_1352, 0.0)));
    }
    else
    {
        _1360 = _1361;
        _1362 = _1361;
        _1363 = _1361;
        _1364 = _1361;
        _1365 = _1361;
        _1366 = _1361;
        _1367 = _1361;
        _1368 = _1361;
        _1369 = _1361;
        _1370 = _1361;
        _1371 = _1361;
        _1372 = _1361;
        _1373 = 0.0;
        _1374 = 0.0;
        _1375 = 0.0;
    }
    float _1673;
    float _1674;
    float _1675;
    float _1676;
    float _1677;
    float _1678;
    float _1679;
    float _1680;
    float _1681;
    float _1682;
    float _1683;
    float _1684;
    float _1685;
    float _1686;
    float _1687;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1404 = fma(_1030, cbModelParam._m0[30u].z, fma(_1026, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1022));
        float _1408 = fma(_1030, cbModelParam._m0[31u].z, fma(_1026, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1022));
        float _1412 = fma(_1030, cbModelParam._m0[32u].z, fma(_1026, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1022));
        float _1435 = _1022 + _780;
        float _1436 = _1026 + _781;
        float _1437 = _1030 + _782;
        float _1447 = fma(_1437, cbModelParam._m0[30u].z, fma(_1436, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1435)) - _1404;
        float _1448 = fma(_1437, cbModelParam._m0[31u].z, fma(_1436, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1435)) - _1408;
        float _1449 = fma(_1437, cbModelParam._m0[32u].z, fma(_1436, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1435)) - _1412;
        float _1453 = inversesqrt(dot(vec3(_1447, _1448, _1449), vec3(_1447, _1448, _1449)));
        float _1466 = ((_1453 * _1447) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1404 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1467 = ((_1453 * _1448) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1408 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1468 = ((_1453 * _1449) / cbModelParam._m0[35u].z) + ((((((_1412 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1470 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1466, _1467, _1468), 0.0);
        vec4 _1477 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1466, _1467, _1468), 0.0);
        vec4 _1484 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1466, _1467, _1468), 0.0);
        vec4 _1491 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1466, _1467, _1468), 0.0);
        float _1503 = exp2((_1470.w + (-0.5)) * 20.0) * 2.0;
        float _1504 = _1503 * (_1470.x + (-0.5));
        float _1505 = _1503 * (_1470.y + (-0.5));
        float _1506 = _1503 * (_1470.z + (-0.5));
        float _1513 = exp2((_1477.w + (-0.5)) * 20.0) * 2.0;
        float _1514 = _1513 * (_1477.x + (-0.5));
        float _1515 = _1513 * (_1477.y + (-0.5));
        float _1516 = _1513 * (_1477.z + (-0.5));
        float _1523 = exp2((_1484.w + (-0.5)) * 20.0) * 2.0;
        float _1524 = _1523 * (_1484.x + (-0.5));
        float _1525 = _1523 * (_1484.y + (-0.5));
        float _1526 = _1523 * (_1484.z + (-0.5));
        float _1533 = exp2((_1491.w + (-0.5)) * 20.0) * 2.0;
        float _1534 = _1533 * (_1491.x + (-0.5));
        float _1535 = _1533 * (_1491.y + (-0.5));
        float _1536 = _1533 * (_1491.z + (-0.5));
        float _1537 = isnan(0.0) ? _1534 : (isnan(_1534) ? 0.0 : max(_1534, 0.0));
        float _1538 = isnan(0.0) ? _1535 : (isnan(_1535) ? 0.0 : max(_1535, 0.0));
        float _1539 = isnan(0.0) ? _1536 : (isnan(_1536) ? 0.0 : max(_1536, 0.0));
        float _1540 = _1504 * 0.5;
        float _1541 = _1514 * 0.5;
        float _1542 = _1524 * 0.5;
        float _1543 = dot(vec3(_1540, _1541, _1542), vec3(_1540, _1541, _1542));
        float _1548 = (_1543 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1543);
        float _1556 = (dot(vec3(_780, _781, _782), vec3(_1548 * _1540, _1548 * _1541, _1548 * _1542)) + 1.0) * 0.5;
        float _4100 = isnan(0.0) ? _1556 : (isnan(_1556) ? 0.0 : max(_1556, 0.0));
        float _1565 = sqrt(((_1541 * _1541) + (_1540 * _1540)) + (_1542 * _1542)) / (_1537 + 9.9999997473787516355514526367188e-06);
        float _4111 = isnan(0.0) ? _1565 : (isnan(_1565) ? 0.0 : max(_1565, 0.0));
        float _1566 = isnan(1.0) ? _4111 : (isnan(_4111) ? 1.0 : min(_4111, 1.0));
        float _1567 = _1566 * 2.0;
        float _1571 = (1.0 - _1566) / (_1566 + 1.0);
        float _4122 = isnan(0.0) ? _1571 : (isnan(_1571) ? 0.0 : max(_1571, 0.0));
        float _1572 = isnan(1.0) ? _4122 : (isnan(_4122) ? 1.0 : min(_4122, 1.0));
        float _1581 = ((((1.0 - _1572) * (_1567 + 2.0)) * exp2(log2(isnan(1.0) ? _4100 : (isnan(_4100) ? 1.0 : min(_4100, 1.0))) * (_1567 + 1.0))) + _1572) * _1537;
        float _1582 = _1505 * 0.5;
        float _1583 = _1515 * 0.5;
        float _1584 = _1525 * 0.5;
        float _1585 = dot(vec3(_1582, _1583, _1584), vec3(_1582, _1583, _1584));
        float _1590 = (_1585 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1585);
        float _1598 = (dot(vec3(_780, _781, _782), vec3(_1590 * _1582, _1590 * _1583, _1590 * _1584)) + 1.0) * 0.5;
        float _4133 = isnan(0.0) ? _1598 : (isnan(_1598) ? 0.0 : max(_1598, 0.0));
        float _1607 = sqrt(((_1583 * _1583) + (_1582 * _1582)) + (_1584 * _1584)) / (_1538 + 9.9999997473787516355514526367188e-06);
        float _4144 = isnan(0.0) ? _1607 : (isnan(_1607) ? 0.0 : max(_1607, 0.0));
        float _1608 = isnan(1.0) ? _4144 : (isnan(_4144) ? 1.0 : min(_4144, 1.0));
        float _1609 = _1608 * 2.0;
        float _1613 = (1.0 - _1608) / (_1608 + 1.0);
        float _4155 = isnan(0.0) ? _1613 : (isnan(_1613) ? 0.0 : max(_1613, 0.0));
        float _1614 = isnan(1.0) ? _4155 : (isnan(_4155) ? 1.0 : min(_4155, 1.0));
        float _1623 = ((((1.0 - _1614) * (_1609 + 2.0)) * exp2(log2(isnan(1.0) ? _4133 : (isnan(_4133) ? 1.0 : min(_4133, 1.0))) * (_1609 + 1.0))) + _1614) * _1538;
        float _1624 = _1506 * 0.5;
        float _1625 = _1516 * 0.5;
        float _1626 = _1526 * 0.5;
        float _1627 = dot(vec3(_1624, _1625, _1626), vec3(_1624, _1625, _1626));
        float _1632 = (_1627 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1627);
        float _1640 = (dot(vec3(_780, _781, _782), vec3(_1632 * _1624, _1632 * _1625, _1632 * _1626)) + 1.0) * 0.5;
        float _4166 = isnan(0.0) ? _1640 : (isnan(_1640) ? 0.0 : max(_1640, 0.0));
        float _1649 = sqrt(((_1625 * _1625) + (_1624 * _1624)) + (_1626 * _1626)) / (_1539 + 9.9999997473787516355514526367188e-06);
        float _4177 = isnan(0.0) ? _1649 : (isnan(_1649) ? 0.0 : max(_1649, 0.0));
        float _1650 = isnan(1.0) ? _4177 : (isnan(_4177) ? 1.0 : min(_4177, 1.0));
        float _1651 = _1650 * 2.0;
        float _1655 = (1.0 - _1650) / (_1650 + 1.0);
        float _4188 = isnan(0.0) ? _1655 : (isnan(_1655) ? 0.0 : max(_1655, 0.0));
        float _1656 = isnan(1.0) ? _4188 : (isnan(_4188) ? 1.0 : min(_4188, 1.0));
        float _1665 = ((((1.0 - _1656) * (_1651 + 2.0)) * exp2(log2(isnan(1.0) ? _4166 : (isnan(_4166) ? 1.0 : min(_4166, 1.0))) * (_1651 + 1.0))) + _1656) * _1539;
        _1673 = _1506;
        _1674 = _1505;
        _1675 = _1504;
        _1676 = _1516;
        _1677 = _1515;
        _1678 = _1514;
        _1679 = _1526;
        _1680 = _1525;
        _1681 = _1524;
        _1682 = _1539;
        _1683 = _1538;
        _1684 = _1537;
        _1685 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1581 : (isnan(_1581) ? 0.0 : max(_1581, 0.0)));
        _1686 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1623 : (isnan(_1623) ? 0.0 : max(_1623, 0.0)));
        _1687 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1665 : (isnan(_1665) ? 0.0 : max(_1665, 0.0)));
    }
    else
    {
        _1673 = _1361;
        _1674 = _1361;
        _1675 = _1361;
        _1676 = _1361;
        _1677 = _1361;
        _1678 = _1361;
        _1679 = _1361;
        _1680 = _1361;
        _1681 = _1361;
        _1682 = _1361;
        _1683 = _1361;
        _1684 = _1361;
        _1685 = 0.0;
        _1686 = 0.0;
        _1687 = 0.0;
    }
    float _1697 = (cbModelParam._m0[1u].x * (_1685 - _1373)) + _1373;
    float _1698 = (cbModelParam._m0[1u].x * (_1686 - _1374)) + _1374;
    float _1699 = (cbModelParam._m0[1u].x * (_1687 - _1375)) + _1375;
    float _1720 = fma(_1699, cbSceneParam._m0[89u].z, fma(_1698, cbSceneParam._m0[89u].y, _1697 * cbSceneParam._m0[89u].x));
    float _1723 = fma(_1699, cbSceneParam._m0[90u].z, fma(_1698, cbSceneParam._m0[90u].y, _1697 * cbSceneParam._m0[90u].x));
    float _1726 = fma(_1699, cbSceneParam._m0[91u].z, fma(_1698, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1697));
    float _1741 = _966 * 0.5;
    float _1742 = _967 * 0.5;
    float _1743 = _968 * 0.5;
    float _1744 = dot(vec4(_1741, _1742, _1743, 1.0), vec4(_1675, _1678, _1681, _1684));
    float _1747 = dot(vec4(_1741, _1742, _1743, 1.0), vec4(_1674, _1677, _1680, _1683));
    float _1750 = dot(vec4(_1741, _1742, _1743, 1.0), vec4(_1673, _1676, _1679, _1682));
    float _1784;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1757 = dot(vec4(_1741, _1742, _1743, 1.0), vec4(_1360, _1364, _1367, _1370));
        float _1761 = dot(vec4(_1741, _1742, _1743, 1.0), vec4(_1362, _1365, _1368, _1371));
        float _1765 = dot(vec4(_1741, _1742, _1743, 1.0), vec4(_1363, _1366, _1369, _1372));
        float _1772 = dot(vec4(cbModelParam._m0[39u]), vec4(_1741, _1742, _1743, 1.0));
        _1784 = dot(vec3(isnan(0.0) ? _1765 : (isnan(_1765) ? 0.0 : max(_1765, 0.0)), isnan(0.0) ? _1761 : (isnan(_1761) ? 0.0 : max(_1761, 0.0)), isnan(0.0) ? _1757 : (isnan(_1757) ? 0.0 : max(_1757, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1772) ? 0.0 : (isnan(0.0) ? _1772 : max(0.0, _1772))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1784 = 1.0;
    }
    float _1795;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1786 = dot(vec4(cbModelParam._m0[40u]), vec4(_1741, _1742, _1743, 1.0));
        _1795 = dot(vec3(isnan(0.0) ? _1744 : (isnan(_1744) ? 0.0 : max(_1744, 0.0)), isnan(0.0) ? _1747 : (isnan(_1747) ? 0.0 : max(_1747, 0.0)), isnan(0.0) ? _1750 : (isnan(_1750) ? 0.0 : max(_1750, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1786) ? 0.0 : (isnan(0.0) ? _1786 : max(0.0, _1786))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1795 = 1.0;
    }
    float _1799 = (_1795 * cbModelParam._m0[1u].x) + (_1784 * (1.0 - cbModelParam._m0[1u].x));
    float _1809 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _783);
    float _1810 = isnan(_1809) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1809 : min(cbModelParam._m0[25u].z, _1809));
    float _1890;
    float _1892;
    float _1894;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1857 = fma(_1030, cbModelParam._m0[13u].z, fma(_1026, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1022)) + cbModelParam._m0[13u].w;
        float _1861 = fma(_1030, cbModelParam._m0[14u].z, fma(_1026, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1022)) + cbModelParam._m0[14u].w;
        float _1865 = fma(_1030, cbModelParam._m0[15u].z, fma(_1026, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1022)) + cbModelParam._m0[15u].w;
        float _1868 = fma(_968, cbModelParam._m0[13u].z, fma(_967, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _966));
        float _1871 = fma(_968, cbModelParam._m0[14u].z, fma(_967, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _966));
        float _1874 = fma(_968, cbModelParam._m0[15u].z, fma(_967, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _966));
        float _1902;
        if (_1868 > 0.0)
        {
            _1902 = abs((1.0 - _1857) / _1868);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1868 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1857 + 1.0) / _1868);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1902 = frontier_phi_17_15_ladder;
        }
        float _2128;
        if (_1871 > 0.0)
        {
            _2128 = abs((1.0 - _1861) / _1871);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1871 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1861 + 1.0) / _1871);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2128 = frontier_phi_26_22_ladder;
        }
        float _2385;
        if (_1874 > 0.0)
        {
            _2385 = abs((1.0 - _1865) / _1874);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1874 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1865 + 1.0) / _1874);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2385 = frontier_phi_38_33_ladder;
        }
        float _2387 = isnan(_2128) ? _1902 : (isnan(_1902) ? _2128 : min(_1902, _2128));
        float _2388 = isnan(_2385) ? _2387 : (isnan(_2387) ? _2385 : min(_2387, _2385));
        float _2392 = (_2388 * _1868) + _1857;
        float _2393 = (_2388 * _1871) + _1861;
        float _2394 = (_2388 * _1874) + _1865;
        float _2395 = _2388 * 9.9999997473787516355514526367188e-05;
        float _2397 = (-1.0) - _2395;
        float _2399 = _2395 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2394 > _2399) || ((_2394 < _2397) || ((_2393 > _2399) || ((_2393 < _2397) || ((_2392 < _2397) || (_2392 > _2399))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2522 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2394, cbModelParam._m0[9u].z, fma(_2393, cbModelParam._m0[9u].y, _2392 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2394, cbModelParam._m0[10u].z, fma(_2393, cbModelParam._m0[10u].y, _2392 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2394, cbModelParam._m0[11u].z, fma(_2393, cbModelParam._m0[11u].y, _2392 * cbModelParam._m0[11u].x))), _1810);
            frontier_phi_16_38_ladder = _2522.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2522.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2522.x * cbModelParam._m0[1u].y;
        }
        _1890 = frontier_phi_16_38_ladder_2;
        _1892 = frontier_phi_16_38_ladder_1;
        _1894 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1878 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_966, _967, _968), _1810);
        _1890 = _1878.x * cbModelParam._m0[1u].y;
        _1892 = _1878.y * cbModelParam._m0[1u].y;
        _1894 = _1878.z * cbModelParam._m0[1u].y;
    }
    float _1898 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _783);
    float _1899 = isnan(_1898) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1898 : min(cbModelParam._m0[25u].w, _1898));
    float _1990;
    float _1992;
    float _1994;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1954 = fma(_1030, cbModelParam._m0[21u].z, fma(_1026, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1022)) + cbModelParam._m0[21u].w;
        float _1958 = fma(_1030, cbModelParam._m0[22u].z, fma(_1026, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1022)) + cbModelParam._m0[22u].w;
        float _1962 = fma(_1030, cbModelParam._m0[23u].z, fma(_1026, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1022)) + cbModelParam._m0[23u].w;
        float _1965 = fma(_968, cbModelParam._m0[21u].z, fma(_967, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _966));
        float _1968 = fma(_968, cbModelParam._m0[22u].z, fma(_967, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _966));
        float _1971 = fma(_968, cbModelParam._m0[23u].z, fma(_967, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _966));
        float _2133;
        if (_1965 > 0.0)
        {
            _2133 = abs((1.0 - _1954) / _1965);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1965 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1954 + 1.0) / _1965);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2133 = frontier_phi_28_24_ladder;
        }
        float _2412;
        if (_1968 > 0.0)
        {
            _2412 = abs((1.0 - _1958) / _1968);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1968 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1958 + 1.0) / _1968);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2412 = frontier_phi_40_35_ladder;
        }
        float _2625;
        if (_1971 > 0.0)
        {
            _2625 = abs((1.0 - _1962) / _1971);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1971 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1962 + 1.0) / _1971);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2625 = frontier_phi_49_46_ladder;
        }
        float _2627 = isnan(_2412) ? _2133 : (isnan(_2133) ? _2412 : min(_2133, _2412));
        float _2628 = isnan(_2625) ? _2627 : (isnan(_2627) ? _2625 : min(_2627, _2625));
        float _2632 = (_2628 * _1965) + _1954;
        float _2633 = (_2628 * _1968) + _1958;
        float _2634 = (_2628 * _1971) + _1962;
        float _2635 = _2628 * 9.9999997473787516355514526367188e-05;
        float _2636 = (-1.0) - _2635;
        float _2638 = _2635 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2634 > _2638) || ((_2634 < _2636) || ((_2633 > _2638) || ((_2633 < _2636) || ((_2632 < _2636) || (_2632 > _2638))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2833 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2634, cbModelParam._m0[17u].z, fma(_2633, cbModelParam._m0[17u].y, _2632 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2634, cbModelParam._m0[18u].z, fma(_2633, cbModelParam._m0[18u].y, _2632 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2634, cbModelParam._m0[19u].z, fma(_2633, cbModelParam._m0[19u].y, _2632 * cbModelParam._m0[19u].x))), _1899);
            frontier_phi_25_49_ladder = _2833.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2833.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2833.x * cbModelParam._m0[1u].z;
        }
        _1990 = frontier_phi_25_49_ladder_2;
        _1992 = frontier_phi_25_49_ladder_1;
        _1994 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1974 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_966, _967, _968), _1899);
        _1990 = _1974.x * cbModelParam._m0[1u].z;
        _1992 = _1974.y * cbModelParam._m0[1u].z;
        _1994 = _1974.z * cbModelParam._m0[1u].z;
    }
    float _2007 = (((_993 * _943) + _994) * _958) * ((cbModelParam._m0[1u].w * (_1990 - _1890)) + _1890);
    float _2009 = (((_993 * _945) + _994) * _958) * ((cbModelParam._m0[1u].w * (_1992 - _1892)) + _1892);
    float _2011 = (((_993 * _946) + _994) * _958) * ((cbModelParam._m0[1u].w * (_1994 - _1894)) + _1894);
    float _2014 = fma(_2011, cbSceneParam._m0[89u].z, fma(_2009, cbSceneParam._m0[89u].y, _2007 * cbSceneParam._m0[89u].x));
    float _2017 = fma(_2011, cbSceneParam._m0[90u].z, fma(_2009, cbSceneParam._m0[90u].y, _2007 * cbSceneParam._m0[90u].x));
    float _2020 = fma(_2011, cbSceneParam._m0[91u].z, fma(_2009, cbSceneParam._m0[91u].y, _2007 * cbSceneParam._m0[91u].x));
    vec4 _2028 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_880, _881));
    float _2030 = _2028.w;
    float _2042 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2030);
    float _2043 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2030);
    float _2044 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2030);
    uvec4 _2048 = floatBitsToUint(cbInstanceData._m0[_918 + 5u]);
    uint _2050 = _2048.x * 14u;
    uint _2051 = _2050 + 13u;
    float _2058 = _958 + (-1.0);
    float _2063 = (cbLight._m0[_2051].x * _2058) + 1.0;
    float _2064 = (cbLight._m0[_2051].y * _2058) + 1.0;
    float _2065 = (cbLight._m0[_2051].z * _2058) + 1.0;
    float _2066 = (cbLight._m0[_2051].w * _2058) + 1.0;
    uint _2067 = _2050 + 5u;
    float _2073 = isnan(1.0) ? _2064 : (isnan(_2064) ? 1.0 : min(_2064, 1.0));
    uint _2077 = _2050 + 4u;
    float _2087 = isnan(1.0) ? _2063 : (isnan(_2063) ? 1.0 : min(_2063, 1.0));
    uint _2091 = _2050 | 1u;
    float _2102 = dot(vec3(cbLight._m0[_2050].xyz), vec3(_780, _781, _782));
    float _2105 = dot(vec3(cbLight._m0[_2091].xyz), vec3(_780, _781, _782));
    float _4324 = isnan(0.0) ? _2102 : (isnan(_2102) ? 0.0 : max(_2102, 0.0));
    float _4335 = isnan(0.0) ? _2105 : (isnan(_2105) ? 0.0 : max(_2105, 0.0));
    float _2110 = (isnan(1.0) ? _4324 : (isnan(_4324) ? 1.0 : min(_4324, 1.0))) * 0.3183098733425140380859375;
    float _2112 = (isnan(1.0) ? _4335 : (isnan(_4335) ? 1.0 : min(_4335, 1.0))) * 0.3183098733425140380859375;
    float _2119 = ((cbLight._m0[_2067].x * _2073) * _2112) + (((cbLight._m0[_2077].x * _2042) * _2087) * _2110);
    float _2120 = ((_2073 * cbLight._m0[_2067].y) * _2112) + (((cbLight._m0[_2077].y * _2043) * _2087) * _2110);
    float _2121 = ((_2073 * cbLight._m0[_2067].z) * _2112) + (((cbLight._m0[_2077].z * _2044) * _2087) * _2110);
    uvec4 _2125 = floatBitsToUint(cbLight._m0[_2050 + 12u]);
    bool _2127 = _2125.x == 0u;
    float _2138;
    float _2140;
    float _2142;
    if (_2127)
    {
        _2138 = _2119;
        _2140 = _2120;
        _2142 = _2121;
    }
    else
    {
        uint _2146 = _2050 + 6u;
        float _2162 = (dot(vec3(cbLight._m0[_2050 + 2u].xyz), vec3(_780, _781, _782)) * 0.5) + 0.5;
        float _2163 = _2162 * _2162;
        float _4346 = isnan(0.0) ? _2163 : (isnan(_2163) ? 0.0 : max(_2163, 0.0));
        float _2164 = isnan(1.0) ? _4346 : (isnan(_4346) ? 1.0 : min(_4346, 1.0));
        float _2165 = isnan(1.0) ? _2065 : (isnan(_2065) ? 1.0 : min(_2065, 1.0));
        _2138 = (((cbLight._m0[_2146].x * 0.3183098733425140380859375) * _2164) * _2165) + _2119;
        _2140 = (((cbLight._m0[_2146].y * 0.3183098733425140380859375) * _2164) * _2165) + _2120;
        _2142 = (((cbLight._m0[_2146].z * 0.3183098733425140380859375) * _2164) * _2165) + _2121;
    }
    bool _2145 = _2125.y == 0u;
    float _2183;
    float _2185;
    float _2187;
    if (_2145)
    {
        _2183 = _2138;
        _2185 = _2140;
        _2187 = _2142;
    }
    else
    {
        uint _2356 = _2050 + 7u;
        float _2372 = (dot(vec3(cbLight._m0[_2050 + 3u].xyz), vec3(_780, _781, _782)) * 0.5) + 0.5;
        float _2373 = _2372 * _2372;
        float _4362 = isnan(0.0) ? _2373 : (isnan(_2373) ? 0.0 : max(_2373, 0.0));
        float _2374 = isnan(1.0) ? _4362 : (isnan(_4362) ? 1.0 : min(_4362, 1.0));
        float _2375 = isnan(1.0) ? _2066 : (isnan(_2066) ? 1.0 : min(_2066, 1.0));
        _2183 = (((cbLight._m0[_2356].x * 0.3183098733425140380859375) * _2374) * _2375) + _2138;
        _2185 = (((cbLight._m0[_2356].y * 0.3183098733425140380859375) * _2374) * _2375) + _2140;
        _2187 = (((cbLight._m0[_2356].z * 0.3183098733425140380859375) * _2374) * _2375) + _2142;
    }
    uint _2190 = _2050 + 8u;
    float _2203 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2050].w)) * _783) * 0.949999988079071044921875);
    float _2204 = _2203 * _2203;
    float _2205 = cbLight._m0[_2050].x + _860;
    float _2206 = cbLight._m0[_2050].y + _861;
    float _2207 = cbLight._m0[_2050].z + _862;
    float _2211 = inversesqrt(dot(vec3(_2205, _2206, _2207), vec3(_2205, _2206, _2207)));
    float _2212 = _2211 * _2205;
    float _2213 = _2211 * _2206;
    float _2214 = _2211 * _2207;
    float _2215 = dot(vec3(_780, _781, _782), vec3(cbLight._m0[_2050].xyz));
    float _4378 = isnan(0.0) ? _2215 : (isnan(_2215) ? 0.0 : max(_2215, 0.0));
    float _2218 = isnan(1.0) ? _4378 : (isnan(_4378) ? 1.0 : min(_4378, 1.0));
    float _4389 = isnan(0.0) ? _959 : (isnan(_959) ? 0.0 : max(_959, 0.0));
    float _2219 = isnan(1.0) ? _4389 : (isnan(_4389) ? 1.0 : min(_4389, 1.0));
    float _2220 = dot(vec3(_780, _781, _782), vec3(_2212, _2213, _2214));
    float _4400 = isnan(0.0) ? _2220 : (isnan(_2220) ? 0.0 : max(_2220, 0.0));
    float _2223 = isnan(1.0) ? _4400 : (isnan(_4400) ? 1.0 : min(_4400, 1.0));
    float _2224 = dot(vec3(cbLight._m0[_2050].xyz), vec3(_2212, _2213, _2214));
    float _4411 = isnan(0.0) ? _2224 : (isnan(_2224) ? 0.0 : max(_2224, 0.0));
    float _2228 = _2204 * _2204;
    float _2232 = ((_2223 * _2223) * (_2228 + (-1.0))) + 1.0;
    float _2240 = exp2(log2(1.0 - (isnan(1.0) ? _4411 : (isnan(_4411) ? 1.0 : min(_4411, 1.0)))) * 5.0);
    float _2241 = 0.959999978542327880859375 - _940;
    float _2243 = 0.959999978542327880859375 - _941;
    float _2244 = 0.959999978542327880859375 - _942;
    float _2251 = 1.0 - _2204;
    float _2262 = (0.5 / (((_2219 * ((_2218 * _2251) + _2204)) + 9.9999999392252902907785028219223e-09) + (((_2219 * _2251) + _2204) * _2218))) * _2218;
    float _4422 = isnan(0.0) ? _2262 : (isnan(_2262) ? 0.0 : max(_2262, 0.0));
    float _2264 = (isnan(1.0) ? _4422 : (isnan(_4422) ? 1.0 : min(_4422, 1.0))) * (_2228 / ((_2232 * _2232) * 3.141590118408203125));
    uint _2278 = _2050 + 9u;
    float _2289 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2091].w)) * _783) * 0.949999988079071044921875);
    float _2290 = _2289 * _2289;
    float _2291 = cbLight._m0[_2091].x + _860;
    float _2292 = cbLight._m0[_2091].y + _861;
    float _2293 = cbLight._m0[_2091].z + _862;
    float _2297 = inversesqrt(dot(vec3(_2291, _2292, _2293), vec3(_2291, _2292, _2293)));
    float _2298 = _2297 * _2291;
    float _2299 = _2297 * _2292;
    float _2300 = _2297 * _2293;
    float _2301 = dot(vec3(_780, _781, _782), vec3(cbLight._m0[_2091].xyz));
    float _4433 = isnan(0.0) ? _2301 : (isnan(_2301) ? 0.0 : max(_2301, 0.0));
    float _2304 = isnan(1.0) ? _4433 : (isnan(_4433) ? 1.0 : min(_4433, 1.0));
    float _2305 = dot(vec3(_780, _781, _782), vec3(_2298, _2299, _2300));
    float _4444 = isnan(0.0) ? _2305 : (isnan(_2305) ? 0.0 : max(_2305, 0.0));
    float _2308 = isnan(1.0) ? _4444 : (isnan(_4444) ? 1.0 : min(_4444, 1.0));
    float _2309 = dot(vec3(cbLight._m0[_2091].xyz), vec3(_2298, _2299, _2300));
    float _4455 = isnan(0.0) ? _2309 : (isnan(_2309) ? 0.0 : max(_2309, 0.0));
    float _2313 = _2290 * _2290;
    float _2317 = ((_2308 * _2308) * (_2313 + (-1.0))) + 1.0;
    float _2324 = exp2(log2(1.0 - (isnan(1.0) ? _4455 : (isnan(_4455) ? 1.0 : min(_4455, 1.0)))) * 5.0);
    float _2331 = 1.0 - _2290;
    float _2341 = (0.5 / (((_2219 * ((_2304 * _2331) + _2290)) + 9.9999999392252902907785028219223e-09) + (((_2219 * _2331) + _2290) * _2304))) * _2304;
    float _4466 = isnan(0.0) ? _2341 : (isnan(_2341) ? 0.0 : max(_2341, 0.0));
    float _2343 = (isnan(1.0) ? _4466 : (isnan(_4466) ? 1.0 : min(_4466, 1.0))) * (_2313 / ((_2317 * _2317) * 3.141590118408203125));
    float _2353 = (((((_2324 * _2241) + _943) * cbLight._m0[_2278].x) * _2343) * _2073) + ((((cbLight._m0[_2190].x * _2042) * ((_2240 * _2241) + _943)) * _2264) * _2087);
    float _2354 = (((((_2324 * _2243) + _945) * cbLight._m0[_2278].y) * _2343) * _2073) + ((((cbLight._m0[_2190].y * _2043) * ((_2240 * _2243) + _945)) * _2264) * _2087);
    float _2355 = (((((_2324 * _2244) + _946) * cbLight._m0[_2278].z) * _2343) * _2073) + ((((cbLight._m0[_2190].z * _2044) * ((_2240 * _2244) + _946)) * _2264) * _2087);
    float _2417;
    float _2419;
    float _2421;
    if (_2127)
    {
        _2417 = _2353;
        _2419 = _2354;
        _2421 = _2355;
    }
    else
    {
        uint _2423 = _2050 + 2u;
        uint _2427 = _2050 + 10u;
        float _2441 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2423].w)) * _783) * 0.949999988079071044921875);
        float _2442 = _2441 * _2441;
        float _2443 = cbLight._m0[_2423].x + _860;
        float _2444 = cbLight._m0[_2423].y + _861;
        float _2445 = cbLight._m0[_2423].z + _862;
        float _2449 = inversesqrt(dot(vec3(_2443, _2444, _2445), vec3(_2443, _2444, _2445)));
        float _2450 = _2449 * _2443;
        float _2451 = _2449 * _2444;
        float _2452 = _2449 * _2445;
        float _2453 = dot(vec3(_780, _781, _782), vec3(cbLight._m0[_2423].xyz));
        float _4477 = isnan(0.0) ? _2453 : (isnan(_2453) ? 0.0 : max(_2453, 0.0));
        float _2456 = isnan(1.0) ? _4477 : (isnan(_4477) ? 1.0 : min(_4477, 1.0));
        float _2457 = dot(vec3(_780, _781, _782), vec3(_2450, _2451, _2452));
        float _4488 = isnan(0.0) ? _2457 : (isnan(_2457) ? 0.0 : max(_2457, 0.0));
        float _2460 = isnan(1.0) ? _4488 : (isnan(_4488) ? 1.0 : min(_4488, 1.0));
        float _2461 = dot(vec3(cbLight._m0[_2423].xyz), vec3(_2450, _2451, _2452));
        float _4499 = isnan(0.0) ? _2461 : (isnan(_2461) ? 0.0 : max(_2461, 0.0));
        float _2465 = _2442 * _2442;
        float _2469 = ((_2460 * _2460) * (_2465 + (-1.0))) + 1.0;
        float _2476 = exp2(log2(1.0 - (isnan(1.0) ? _4499 : (isnan(_4499) ? 1.0 : min(_4499, 1.0)))) * 5.0);
        float _2483 = 1.0 - _2442;
        float _2493 = (0.5 / (((_2219 * ((_2456 * _2483) + _2442)) + 9.9999999392252902907785028219223e-09) + (((_2219 * _2483) + _2442) * _2456))) * _2456;
        float _4510 = isnan(0.0) ? _2493 : (isnan(_2493) ? 0.0 : max(_2493, 0.0));
        float _2495 = (isnan(1.0) ? _4510 : (isnan(_4510) ? 1.0 : min(_4510, 1.0))) * (_2465 / ((_2469 * _2469) * 3.141590118408203125));
        float _2496 = isnan(1.0) ? _2065 : (isnan(_2065) ? 1.0 : min(_2065, 1.0));
        _2417 = (((((_2476 * _2241) + _943) * cbLight._m0[_2427].x) * _2495) * _2496) + _2353;
        _2419 = (((((_2476 * _2243) + _945) * cbLight._m0[_2427].y) * _2495) * _2496) + _2354;
        _2421 = (((((_2476 * _2244) + _946) * cbLight._m0[_2427].z) * _2495) * _2496) + _2355;
    }
    float _2531;
    float _2533;
    float _2535;
    if (_2145)
    {
        _2531 = _2417;
        _2533 = _2419;
        _2535 = _2421;
    }
    else
    {
        uint _2542 = _2050 + 3u;
        uint _2546 = _2050 + 11u;
        float _2560 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2542].w)) * _783) * 0.949999988079071044921875);
        float _2561 = _2560 * _2560;
        float _2562 = cbLight._m0[_2542].x + _860;
        float _2563 = cbLight._m0[_2542].y + _861;
        float _2564 = cbLight._m0[_2542].z + _862;
        float _2568 = inversesqrt(dot(vec3(_2562, _2563, _2564), vec3(_2562, _2563, _2564)));
        float _2569 = _2568 * _2562;
        float _2570 = _2568 * _2563;
        float _2571 = _2568 * _2564;
        float _2572 = dot(vec3(_780, _781, _782), vec3(cbLight._m0[_2542].xyz));
        float _4526 = isnan(0.0) ? _2572 : (isnan(_2572) ? 0.0 : max(_2572, 0.0));
        float _2575 = isnan(1.0) ? _4526 : (isnan(_4526) ? 1.0 : min(_4526, 1.0));
        float _2576 = dot(vec3(_780, _781, _782), vec3(_2569, _2570, _2571));
        float _4537 = isnan(0.0) ? _2576 : (isnan(_2576) ? 0.0 : max(_2576, 0.0));
        float _2579 = isnan(1.0) ? _4537 : (isnan(_4537) ? 1.0 : min(_4537, 1.0));
        float _2580 = dot(vec3(cbLight._m0[_2542].xyz), vec3(_2569, _2570, _2571));
        float _4548 = isnan(0.0) ? _2580 : (isnan(_2580) ? 0.0 : max(_2580, 0.0));
        float _2584 = _2561 * _2561;
        float _2588 = ((_2579 * _2579) * (_2584 + (-1.0))) + 1.0;
        float _2595 = exp2(log2(1.0 - (isnan(1.0) ? _4548 : (isnan(_4548) ? 1.0 : min(_4548, 1.0)))) * 5.0);
        float _2602 = 1.0 - _2561;
        float _2612 = (0.5 / (((_2219 * ((_2575 * _2602) + _2561)) + 9.9999999392252902907785028219223e-09) + (((_2219 * _2602) + _2561) * _2575))) * _2575;
        float _4559 = isnan(0.0) ? _2612 : (isnan(_2612) ? 0.0 : max(_2612, 0.0));
        float _2614 = (isnan(1.0) ? _4559 : (isnan(_4559) ? 1.0 : min(_4559, 1.0))) * (_2584 / ((_2588 * _2588) * 3.141590118408203125));
        float _2615 = isnan(1.0) ? _2066 : (isnan(_2066) ? 1.0 : min(_2066, 1.0));
        _2531 = (((((_2595 * _2241) + _943) * cbLight._m0[_2546].x) * _2614) * _2615) + _2417;
        _2533 = (((((_2595 * _2243) + _945) * cbLight._m0[_2546].y) * _2614) * _2615) + _2419;
        _2535 = (((((_2595 * _2244) + _946) * cbLight._m0[_2546].z) * _2614) * _2615) + _2421;
    }
    float _2750;
    float _2752;
    float _2754;
    float _2756;
    float _2758;
    float _2760;
    if (_2048.y == 0u)
    {
        float _2690 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2691 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2690;
        float _2692 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2690;
        float _2693 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2690;
        uvec4 _2705 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2706 = _2705.x;
        uint _2717 = uint((float(_2705.y) * floor(float(uint(cbSceneParam._m0[85u].y * _881) / _2706))) + floor(float(uint(cbSceneParam._m0[85u].x * _880) / _2706)));
        float _2727 = (log2(_2693 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2728 = isnan(0.0) ? _2727 : (isnan(_2727) ? 0.0 : max(_2727, 0.0));
        uint _2731 = uint(isnan(14.0) ? _2728 : (isnan(_2728) ? 14.0 : min(_2728, 14.0)));
        uvec4 _2736 = texelFetch(g_lightClusterGridBuffer, int(((_2731 << 2u) + (_2717 << 6u)) >> 2u));
        uint _2737 = _2736.x;
        uint _2738 = _2705.z;
        float _2838;
        float _2840;
        float _2842;
        float _2844;
        float _2846;
        float _2848;
        if (((((1u << ((_2738 >> 4u) & 15u)) + 4294967295u) & _2737) == 0u) || ((_2738 & 240u) == 0u))
        {
            _2838 = 0.0;
            _2840 = 0.0;
            _2842 = 0.0;
            _2844 = 0.0;
            _2846 = 0.0;
            _2848 = 0.0;
        }
        else
        {
            float _2839;
            float _2841;
            float _2843;
            float _2845;
            float _2847;
            float _2849;
            float _2990 = 0.0;
            float _2991 = 0.0;
            float _2992 = 0.0;
            float _2993 = 0.0;
            float _2994 = 0.0;
            float _2995 = 0.0;
            uint _2996 = 0u;
            uint _3005;
            bool _3006;
            for (;;)
            {
                _3005 = texelFetch(g_lightClassification, int((((_2731 << 5u) + (_2717 << 9u)) + (_2996 << 2u)) >> 2u)).x;
                _3006 = _3005 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3006)
                {
                    frontier_phi_66_pred = _2990;
                    frontier_phi_66_pred_1 = _2995;
                    frontier_phi_66_pred_2 = _2994;
                    frontier_phi_66_pred_3 = _2993;
                    frontier_phi_66_pred_4 = _2992;
                    frontier_phi_66_pred_5 = _2991;
                }
                else
                {
                    float _3135;
                    float _3136;
                    float _3137;
                    float _3138;
                    float _3139;
                    float _3140;
                    uint _3141;
                    _3135 = _2990;
                    _3136 = _2991;
                    _3137 = _2992;
                    _3138 = _2993;
                    _3139 = _2994;
                    _3140 = _2995;
                    _3141 = _3005;
                    float _3062;
                    float _3063;
                    float _3064;
                    float _3065;
                    float _3066;
                    float _3067;
                    for (;;)
                    {
                        uint _3145 = uint(findLSB(_3141)) + (_2996 << 5u);
                        uint _3142 = (_3141 + 4294967295u) & _3141;
                        uint _3147 = _3145 * 48u;
                        vec4 _3161 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3147)).x, texelFetch(g_PointLightRenderingBuffer, int(_3147 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3147 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3147 + 3u)).x));
                        uint _3167 = (_3145 * 48u) + 4u;
                        vec4 _3180 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3167)).x, texelFetch(g_PointLightRenderingBuffer, int(_3167 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3167 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3167 + 3u)).x));
                        uint _3186 = (_3145 * 48u) + 8u;
                        vec3 _3197 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3186)).x, texelFetch(g_PointLightRenderingBuffer, int(_3186 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3186 + 2u)).x));
                        float _3201 = _3161.x - _2691;
                        float _3202 = _3161.y - _2692;
                        float _3203 = _3161.z - _2693;
                        float _3204 = dot(vec3(_3201, _3202, _3203), vec3(_3201, _3202, _3203));
                        float _3207 = inversesqrt(_3204);
                        float _3208 = _3207 * _3201;
                        float _3209 = _3207 * _3202;
                        float _3210 = _3207 * _3203;
                        float _3211 = dot(vec3(_899, _902, _905), vec3(_3208, _3209, _3210));
                        float _3216 = 1.0 - (_3204 * _3161.w);
                        float _4585 = isnan(0.0) ? _3216 : (isnan(_3216) ? 0.0 : max(_3216, 0.0));
                        float _3217 = isnan(1.0) ? _4585 : (isnan(_4585) ? 1.0 : min(_4585, 1.0));
                        float _3218 = sqrt(_3204) * _3180.w;
                        float _3221 = 1.39999997615814208984375 / (_3218 + 1.39999997615814208984375);
                        float _3222 = _3221 * _3221;
                        float _3225 = ((1.0 - _3222) * _3211) + _3222;
                        float _3228 = _3218 * _3218;
                        float _3232 = ((isnan(0.0) ? _3225 : (isnan(_3225) ? 0.0 : max(_3225, 0.0))) * _3217) / ((_3228 * 0.699999988079071044921875) + 1.0);
                        float _3236 = (-0.0) - _2691;
                        float _3237 = (-0.0) - _2692;
                        float _3238 = (-0.0) - _2693;
                        float _3242 = inversesqrt(dot(vec3(_3236, _3237, _3238), vec3(_3236, _3237, _3238)));
                        float _3243 = _3242 * _3236;
                        float _3244 = _3242 * _3237;
                        float _3245 = _3242 * _3238;
                        float _3253 = exp2(log2(1.0 / ((_3228 * 3.5) + 5.0)) * 0.25);
                        float _3254 = 1.0 - _974;
                        float _3261 = sqrt(1.0 - ((1.0 - (_3254 * _3254)) * (1.0 - (_3253 * _3253))));
                        float _3262 = _3261 * _3261;
                        float _3263 = _3262 * _3262;
                        float _3264 = _3243 + _3208;
                        float _3265 = _3244 + _3209;
                        float _3266 = _3245 + _3210;
                        float _3270 = inversesqrt(dot(vec3(_3264, _3265, _3266), vec3(_3264, _3265, _3266)));
                        float _3274 = dot(vec3(_899, _902, _905), vec3(_3243, _3244, _3245));
                        float _4601 = isnan(0.0) ? _3274 : (isnan(_3274) ? 0.0 : max(_3274, 0.0));
                        float _3277 = isnan(1.0) ? _4601 : (isnan(_4601) ? 1.0 : min(_4601, 1.0));
                        float _3278 = dot(vec3(_899, _902, _905), vec3(_3270 * _3264, _3270 * _3265, _3270 * _3266));
                        float _4612 = isnan(0.0) ? _3278 : (isnan(_3278) ? 0.0 : max(_3278, 0.0));
                        float _3281 = isnan(1.0) ? _4612 : (isnan(_4612) ? 1.0 : min(_4612, 1.0));
                        float _3285 = ((_3281 * _3281) * (_3263 + (-1.0))) + 1.0;
                        float _3286 = _3221 * _3262;
                        float _3287 = _3286 * _3286;
                        float _3290 = ((1.0 - _3287) * _3211) + _3287;
                        float _4623 = isnan(0.0) ? _3290 : (isnan(_3290) ? 0.0 : max(_3290, 0.0));
                        float _3291 = isnan(1.0) ? _4623 : (isnan(_4623) ? 1.0 : min(_4623, 1.0));
                        float _3292 = 1.0 - _3262;
                        float _3302 = (0.5 / (((_3291 * ((_3277 * _3292) + _3262)) + 9.9999999392252902907785028219223e-09) + (((_3291 * _3292) + _3262) * _3277))) * _3291;
                        float _4634 = isnan(0.0) ? _3302 : (isnan(_3302) ? 0.0 : max(_3302, 0.0));
                        float _3313 = (((_3263 * 3.1415927410125732421875) * (isnan(1.0) ? _4634 : (isnan(_4634) ? 1.0 : min(_4634, 1.0)))) / ((_3285 * _3285) * ((_3228 * 2.1991131305694580078125) + 3.141590118408203125))) * _3217;
                        _3065 = (_3232 * _3180.x) + _3138;
                        _3066 = (_3232 * _3180.y) + _3139;
                        _3067 = (_3232 * _3180.z) + _3140;
                        _3062 = (_3313 * _3197.x) + _3135;
                        _3063 = (_3313 * _3197.y) + _3136;
                        _3064 = (_3313 * _3197.z) + _3137;
                        if (_3142 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3135 = _3062;
                            _3136 = _3063;
                            _3137 = _3064;
                            _3138 = _3065;
                            _3139 = _3066;
                            _3140 = _3067;
                            _3141 = _3142;
                        }
                    }
                    frontier_phi_66_pred = _3062;
                    frontier_phi_66_pred_1 = _3067;
                    frontier_phi_66_pred_2 = _3066;
                    frontier_phi_66_pred_3 = _3065;
                    frontier_phi_66_pred_4 = _3064;
                    frontier_phi_66_pred_5 = _3063;
                }
                _2839 = frontier_phi_66_pred;
                _2849 = frontier_phi_66_pred_1;
                _2847 = frontier_phi_66_pred_2;
                _2845 = frontier_phi_66_pred_3;
                _2843 = frontier_phi_66_pred_4;
                _2841 = frontier_phi_66_pred_5;
                uint _2997 = _2996 + 1u;
                if (_2997 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2990 = _2839;
                    _2991 = _2841;
                    _2992 = _2843;
                    _2993 = _2845;
                    _2994 = _2847;
                    _2995 = _2849;
                    _2996 = _2997;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2838 = _2839;
            _2840 = _2841;
            _2842 = _2843;
            _2844 = _2845;
            _2846 = _2847;
            _2848 = _2849;
        }
        uvec4 _2852 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2853 = _2852.z;
        uint _2855 = (_2853 >> 8u) & 15u;
        float _2958;
        float _2960;
        float _2962;
        float _2964;
        float _2966;
        float _2968;
        if (((4294967295u << _2855) & _2737) == 0u)
        {
            _2958 = _2838;
            _2960 = _2840;
            _2962 = _2842;
            _2964 = _2844;
            _2966 = _2846;
            _2968 = _2848;
        }
        else
        {
            float _2983 = inversesqrt(dot(vec3(_2691, _2692, _2693), vec3(_2691, _2692, _2693)));
            float _2984 = _2983 * _2691;
            float _2985 = _2983 * _2692;
            float _2986 = _2983 * _2693;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2855 < ((_2853 >> 12u) & 15u))
            {
                float _2959;
                float _2961;
                float _2963;
                float _2965;
                float _2967;
                float _2969;
                float _3118 = _2838;
                float _3119 = _2840;
                float _3120 = _2842;
                float _3121 = _2844;
                float _3122 = _2846;
                float _3123 = _2848;
                uint _3124 = _2855;
                uint _3133;
                bool _3134;
                for (;;)
                {
                    _3133 = texelFetch(g_lightClassification, int((((_2731 << 5u) + (_2717 << 9u)) + (_3124 << 2u)) >> 2u)).x;
                    _3134 = _3133 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3134)
                    {
                        frontier_phi_77_pred = _3123;
                        frontier_phi_77_pred_1 = _3122;
                        frontier_phi_77_pred_2 = _3121;
                        frontier_phi_77_pred_3 = _3120;
                        frontier_phi_77_pred_4 = _3119;
                        frontier_phi_77_pred_5 = _3118;
                    }
                    else
                    {
                        float _3327;
                        float _3328;
                        float _3329;
                        float _3330;
                        float _3331;
                        float _3332;
                        float _3621;
                        float _3622;
                        float _3623;
                        float _3624;
                        float _3625;
                        float _3626;
                        float _3340 = _3118;
                        float _3341 = _3119;
                        float _3342 = _3120;
                        float _3343 = _3121;
                        float _3344 = _3122;
                        float _3345 = _3123;
                        uint _3346 = _3133;
                        uint _3347;
                        vec4 _3372;
                        float _3373;
                        vec4 _3388;
                        vec3 _3400;
                        vec4 _3415;
                        vec4 _3430;
                        float _3477;
                        bool _3478;
                        for (;;)
                        {
                            uint _3357 = ((_3124 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3346));
                            _3347 = (_3346 + 4294967295u) & _3346;
                            uint _3359 = _3357 * 40u;
                            _3372 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3359)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3359 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3359 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3359 + 3u)).x));
                            _3373 = _3372.w;
                            uint _3375 = (_3357 * 40u) + 4u;
                            _3388 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3375)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3375 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3375 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3375 + 3u)).x));
                            uint _3390 = (_3357 * 40u) + 8u;
                            _3400 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3390)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3390 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3390 + 2u)).x));
                            uint _3402 = (_3357 * 40u) + 16u;
                            _3415 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3402)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3402 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3402 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3402 + 3u)).x));
                            uint _3417 = (_3357 * 40u) + 20u;
                            _3430 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3417)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3417 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3417 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3417 + 3u)).x));
                            uint _3433 = (_3357 * 40u) + 24u;
                            vec4 _3446 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3433)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3433 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3433 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3433 + 3u)).x));
                            uint _3452 = (_3357 * 40u) + 28u;
                            vec4 _3465 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3452)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3452 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3452 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3452 + 3u)).x));
                            _3477 = fma(_2693, _3465.z, fma(_2692, _3465.y, _3465.x * _2691)) + _3465.w;
                            _3478 = !((fma(_2693, _3446.z, fma(_2692, _3446.y, _3446.x * _2691)) + _3446.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3478)
                            {
                                float _3505 = _3372.x - _2691;
                                float _3506 = _3372.y - _2692;
                                float _3507 = _3372.z - _2693;
                                float _3508 = dot(vec3(_3505, _3506, _3507), vec3(_3505, _3506, _3507));
                                float _3511 = inversesqrt(_3508);
                                float _3512 = _3511 * _3505;
                                float _3513 = _3511 * _3506;
                                float _3514 = _3511 * _3507;
                                float _3518 = 1.0 - (_3508 / (_3373 * _3373));
                                float _4645 = isnan(0.0) ? _3518 : (isnan(_3518) ? 0.0 : max(_3518, 0.0));
                                float _3519 = isnan(1.0) ? _4645 : (isnan(_4645) ? 1.0 : min(_4645, 1.0));
                                float _3523 = sqrt(_3508) * _3388.w;
                                float _3525 = 1.39999997615814208984375 / (_3523 + 1.39999997615814208984375);
                                float _3526 = _3525 * _3525;
                                float _3529 = ((1.0 - _3526) * dot(vec3(_3512, _3513, _3514), vec3(_899, _902, _905))) + _3526;
                                float _3532 = _3523 * _3523;
                                float _3536 = (fma(_2693, _3415.z, fma(_2692, _3415.y, _3415.x * _2691)) + _3415.w) / _3477;
                                float _3537 = (fma(_2693, _3430.z, fma(_2692, _3430.y, _3430.x * _2691)) + _3430.w) / _3477;
                                float _3541 = 1.0 - dot(vec2(_3536, _3537), vec2(_3536, _3537));
                                float _4661 = isnan(0.0) ? _3541 : (isnan(_3541) ? 0.0 : max(_3541, 0.0));
                                float _3542 = isnan(1.0) ? _4661 : (isnan(_4661) ? 1.0 : min(_4661, 1.0));
                                float _3543 = _3542 * (((isnan(0.0) ? _3529 : (isnan(_3529) ? 0.0 : max(_3529, 0.0))) * _3519) / ((_3532 * 0.699999988079071044921875) + 1.0));
                                float _3555 = exp2(log2(1.0 / ((_3532 * 3.5) + 5.0)) * 0.25);
                                float _3556 = 1.0 - _974;
                                float _3563 = sqrt(1.0 - ((1.0 - (_3556 * _3556)) * (1.0 - (_3555 * _3555))));
                                float _3564 = _3563 * _3563;
                                float _3565 = _3564 * _3564;
                                float _3566 = _3512 - _2984;
                                float _3567 = _3513 - _2985;
                                float _3568 = _3514 - _2986;
                                float _3572 = inversesqrt(dot(vec3(_3566, _3567, _3568), vec3(_3566, _3567, _3568)));
                                float _3576 = dot(vec3(_899, _902, _905), vec3((-0.0) - _2984, (-0.0) - _2985, (-0.0) - _2986));
                                float _4672 = isnan(0.0) ? _3576 : (isnan(_3576) ? 0.0 : max(_3576, 0.0));
                                float _3579 = isnan(1.0) ? _4672 : (isnan(_4672) ? 1.0 : min(_4672, 1.0));
                                float _3580 = dot(vec3(_899, _902, _905), vec3(_3572 * _3566, _3572 * _3567, _3572 * _3568));
                                float _4683 = isnan(0.0) ? _3580 : (isnan(_3580) ? 0.0 : max(_3580, 0.0));
                                float _3583 = isnan(1.0) ? _4683 : (isnan(_4683) ? 1.0 : min(_4683, 1.0));
                                float _3587 = ((_3583 * _3583) * (_3565 + (-1.0))) + 1.0;
                                float _3588 = _3525 * _3564;
                                float _3589 = _3588 * _3588;
                                float _3595 = ((1.0 - _3589) * dot(vec3(_899, _902, _905), vec3(_3512, _3513, _3514))) + _3589;
                                float _4694 = isnan(0.0) ? _3595 : (isnan(_3595) ? 0.0 : max(_3595, 0.0));
                                float _3596 = isnan(1.0) ? _4694 : (isnan(_4694) ? 1.0 : min(_4694, 1.0));
                                float _3597 = 1.0 - _3564;
                                float _3607 = (0.5 / (((_3596 * ((_3579 * _3597) + _3564)) + 9.9999999392252902907785028219223e-09) + (((_3596 * _3597) + _3564) * _3579))) * _3596;
                                float _4705 = isnan(0.0) ? _3607 : (isnan(_3607) ? 0.0 : max(_3607, 0.0));
                                float _3617 = (_3542 * _3519) * (((_3565 * 3.1415927410125732421875) * (isnan(1.0) ? _4705 : (isnan(_4705) ? 1.0 : min(_4705, 1.0)))) / ((_3587 * _3587) * ((_3532 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3543 * _3388.y;
                                frontier_phi_83_pred_1 = _3543 * _3388.x;
                                frontier_phi_83_pred_2 = _3617 * _3400.z;
                                frontier_phi_83_pred_3 = _3617 * _3400.y;
                                frontier_phi_83_pred_4 = _3617 * _3400.x;
                                frontier_phi_83_pred_5 = _3543 * _3388.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3625 = frontier_phi_83_pred;
                            _3624 = frontier_phi_83_pred_1;
                            _3623 = frontier_phi_83_pred_2;
                            _3622 = frontier_phi_83_pred_3;
                            _3621 = frontier_phi_83_pred_4;
                            _3626 = frontier_phi_83_pred_5;
                            _3330 = _3624 + _3343;
                            _3331 = _3625 + _3344;
                            _3332 = _3626 + _3345;
                            _3327 = _3621 + _3340;
                            _3328 = _3622 + _3341;
                            _3329 = _3623 + _3342;
                            if (_3347 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3340 = _3327;
                                _3341 = _3328;
                                _3342 = _3329;
                                _3343 = _3330;
                                _3344 = _3331;
                                _3345 = _3332;
                                _3346 = _3347;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3332;
                        frontier_phi_77_pred_1 = _3331;
                        frontier_phi_77_pred_2 = _3330;
                        frontier_phi_77_pred_3 = _3329;
                        frontier_phi_77_pred_4 = _3328;
                        frontier_phi_77_pred_5 = _3327;
                    }
                    _2969 = frontier_phi_77_pred;
                    _2967 = frontier_phi_77_pred_1;
                    _2965 = frontier_phi_77_pred_2;
                    _2963 = frontier_phi_77_pred_3;
                    _2961 = frontier_phi_77_pred_4;
                    _2959 = frontier_phi_77_pred_5;
                    uint _3125 = _3124 + 1u;
                    if (_3125 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3118 = _2959;
                        _3119 = _2961;
                        _3120 = _2963;
                        _3121 = _2965;
                        _3122 = _2967;
                        _3123 = _2969;
                        _3124 = _3125;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2963;
                frontier_phi_58_59_ladder_1 = _2969;
                frontier_phi_58_59_ladder_2 = _2967;
                frontier_phi_58_59_ladder_3 = _2965;
                frontier_phi_58_59_ladder_4 = _2961;
                frontier_phi_58_59_ladder_5 = _2959;
            }
            else
            {
                frontier_phi_58_59_ladder = _2842;
                frontier_phi_58_59_ladder_1 = _2848;
                frontier_phi_58_59_ladder_2 = _2846;
                frontier_phi_58_59_ladder_3 = _2844;
                frontier_phi_58_59_ladder_4 = _2840;
                frontier_phi_58_59_ladder_5 = _2838;
            }
            _2958 = frontier_phi_58_59_ladder_5;
            _2960 = frontier_phi_58_59_ladder_4;
            _2962 = frontier_phi_58_59_ladder;
            _2964 = frontier_phi_58_59_ladder_3;
            _2966 = frontier_phi_58_59_ladder_2;
            _2968 = frontier_phi_58_59_ladder_1;
        }
        float _2973 = isnan(1.0) ? _958 : (isnan(_958) ? 1.0 : min(_958, 1.0));
        _2750 = (_2973 * _2964) + _2183;
        _2752 = (_2973 * _2966) + _2185;
        _2754 = (_2973 * _2968) + _2187;
        _2756 = ((_2958 * _943) * _2973) + _2531;
        _2758 = ((_2960 * _945) * _2973) + _2533;
        _2760 = ((_2962 * _946) * _2973) + _2535;
    }
    else
    {
        _2750 = _2183;
        _2752 = _2185;
        _2754 = _2187;
        _2756 = _2531;
        _2758 = _2533;
        _2760 = _2535;
    }
    float _4721 = isnan(0.0) ? _933 : (isnan(_933) ? 0.0 : max(_933, 0.0));
    float _4732 = isnan(0.0) ? _934 : (isnan(_934) ? 0.0 : max(_934, 0.0));
    float _4743 = isnan(0.0) ? _935 : (isnan(_935) ? 0.0 : max(_935, 0.0));
    float _2777 = ((isnan(1.0) ? _4721 : (isnan(_4721) ? 1.0 : min(_4721, 1.0))) * (_2750 + ((isnan(0.0) ? _1720 : (isnan(_1720) ? 0.0 : max(_1720, 0.0))) * _958))) + ((_2756 + ((isnan(0.0) ? _2014 : (isnan(_2014) ? 0.0 : max(_2014, 0.0))) * _1799)) * cbPerFrame._m0[3u].x);
    float _2778 = ((isnan(1.0) ? _4732 : (isnan(_4732) ? 1.0 : min(_4732, 1.0))) * (_2752 + ((isnan(0.0) ? _1723 : (isnan(_1723) ? 0.0 : max(_1723, 0.0))) * _958))) + ((_2758 + ((isnan(0.0) ? _2017 : (isnan(_2017) ? 0.0 : max(_2017, 0.0))) * _1799)) * cbPerFrame._m0[3u].x);
    float _2779 = ((isnan(1.0) ? _4743 : (isnan(_4743) ? 1.0 : min(_4743, 1.0))) * (_2754 + ((isnan(0.0) ? _1726 : (isnan(_1726) ? 0.0 : max(_1726, 0.0))) * _958))) + ((_2760 + ((isnan(0.0) ? _2020 : (isnan(_2020) ? 0.0 : max(_2020, 0.0))) * _1799)) * cbPerFrame._m0[3u].x);
    uint _2780 = _918 + 6u;
    float _2788 = _880 / cbSceneParam._m0[86u].x;
    float _2789 = _881 / cbSceneParam._m0[86u].y;
    vec4 _2803 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2788, _2789, (log2((isnan(cbSceneParam._m0[77u].w) ? _803 : (isnan(_803) ? cbSceneParam._m0[77u].w : min(_803, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2805 = _2803.x;
    float _2806 = _2803.y;
    float _2807 = _2803.z;
    float _2808 = _2803.w;
    float _2900;
    float _2902;
    float _2904;
    float _2906;
    if (_803 > cbSceneParam._m0[78u].w)
    {
        float _2863 = isnan(_803) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _803 : min(cbSceneParam._m0[80u].w, _803));
        float _2864 = _2863 / _803;
        float _2875 = _2864 * _853;
        float _2876 = _854 * _2864;
        float _2877 = (-0.0) - _2876;
        float _2878 = _2864 * _855;
        float _2880 = (cbSceneParam._m0[77u].w * _2877) / _2863;
        float _2881 = _2880 + cbSceneParam._m0[79u].w;
        float _2882 = cbSceneParam._m0[79u].w - _2876;
        float _2888 = sqrt(((_2875 * _2875) + (_2876 * _2876)) + (_2878 * _2878));
        float _2891 = (1.0 - (cbSceneParam._m0[77u].w / _2863)) * _2888;
        float _2896 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2898 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3075;
        if (abs((_2877 - _2880) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3075 = ((((_2881 > 0.0) ? exp2(_2896 * _2881) : (2.0 - exp2(_2898 * _2881))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2891;
        }
        else
        {
            float _3019 = 1.0 / cbSceneParam._m0[80u].x;
            float _3020 = isnan(_2882) ? _2881 : (isnan(_2881) ? _2882 : max(_2881, _2882));
            float _3021 = isnan(_2882) ? _2881 : (isnan(_2881) ? _2882 : min(_2881, _2882));
            float _3030 = isnan(0.0) ? _3020 : (isnan(_3020) ? 0.0 : min(_3020, 0.0));
            float _3031 = isnan(0.0) ? _3021 : (isnan(_3021) ? 0.0 : min(_3021, 0.0));
            _3075 = ((abs(_2888 / _2877) * cbSceneParam._m0[80u].y) * ((((_3030 - _3031) * 2.0) - ((exp2(_2896 * (isnan(0.0) ? _3020 : (isnan(_3020) ? 0.0 : max(_3020, 0.0)))) - exp2(_2896 * (isnan(0.0) ? _3021 : (isnan(_3021) ? 0.0 : max(_3021, 0.0))))) * _3019)) - ((exp2(_2898 * _3030) - exp2(_2898 * _3031)) * _3019))) + (_2891 * cbSceneParam._m0[80u].z);
        }
        vec4 _3077 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2788, _2789, 1.0), 0.0);
        float _3086 = exp2((_3075 * (-1.44269502162933349609375)) * (1.0 - _3077.w));
        float _3087 = log2(_3086);
        float _3103 = log2(_2808);
        _2900 = (exp2(_3103 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3087 * cbSceneParam._m0[78u].x)) * _3077.x) / cbSceneParam._m0[78u].x)) + _2805;
        _2902 = (exp2(_3103 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3087 * cbSceneParam._m0[78u].y)) * _3077.y) / cbSceneParam._m0[78u].y)) + _2806;
        _2904 = (exp2(_3103 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3087 * cbSceneParam._m0[78u].z)) * _3077.z) / cbSceneParam._m0[78u].z)) + _2807;
        _2906 = _3086 * _2808;
    }
    else
    {
        _2900 = _2805;
        _2902 = _2806;
        _2904 = _2807;
        _2906 = _2808;
    }
    bool _3113;
    vec4 _2916;
    vec4 _2938;
    float _2940;
    float _2944;
    float _2945;
    float _2946;
    float _2947;
    bool _2957;
    for (;;)
    {
        _2916 = cbMatDynParam._m0[0u];
        float _2918 = roundEven(_2916.y);
        bool _2919 = _2918 == 3.0;
        float _2920 = log2(_2906);
        float _2927 = exp2(_2920 * cbSceneParam._m0[78u].x) * _2777;
        float _2928 = exp2(_2920 * cbSceneParam._m0[78u].y) * _2778;
        float _2929 = exp2(_2920 * cbSceneParam._m0[78u].z) * _2779;
        float _2936 = _869 + (-0.5);
        _2938 = cbMtdParam._m0[1u];
        _2940 = _2938.y * _2936;
        float _2943 = (_2918 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2944 = _2943 * (_2919 ? _2927 : (_2927 + (cbSceneParam._m0[72u].w * _2900)));
        _2945 = _2943 * (_2919 ? _2928 : (_2928 + (cbSceneParam._m0[72u].w * _2902)));
        _2946 = _2943 * (_2919 ? _2929 : (_2929 + (cbSceneParam._m0[72u].w * _2904)));
        _2947 = _2936 * 0.999000012874603271484375;
        _2957 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2957)
        {
            if ((cbInstanceData._m0[_918 + 7u].x + _2947) < 0.5)
            {
                _3113 = true;
                break;
            }
        }
        uint _3054 = _919 + uint(_2916.w);
        if ((cbInstanceData._m0[_3054].w < 1.0) && ((cbInstanceData._m0[_3054].w + _2947) < 0.5))
        {
            _3113 = true;
            break;
        }
        if ((_2940 + 1.0) < _2938.x)
        {
            _3113 = true;
            break;
        }
        _3113 = false;
        break;
    }
    float _3318;
    if (_3113)
    {
        discard_state = true;
        _3318 = 0.0;
    }
    else
    {
        _3318 = cbInstanceData._m0[_2780].w;
    }
    SV_Target.x = _2944;
    SV_Target.y = _2945;
    SV_Target.z = _2946;
    SV_Target.w = _3318;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2780].w;
    discard_exit();
}


