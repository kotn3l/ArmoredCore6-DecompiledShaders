#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[20];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_19;
layout(set = 0, binding = 11) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_3;
layout(set = 0, binding = 14) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_5;
layout(set = 0, binding = 15) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_6;
layout(set = 0, binding = 17) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_8;
layout(set = 0, binding = 2) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_13;
layout(set = 0, binding = 5) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_14;
layout(set = 0, binding = 6) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_15;
layout(set = 0, binding = 7) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_16;
layout(set = 0, binding = 8) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_17;
layout(set = 0, binding = 9) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_18;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1219;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _203 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _204 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _205 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _211 = inversesqrt(dot(vec3(_203, _204, _205), vec3(_203, _204, _205)));
    float _218 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _225 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _248 = sin(cbMtdParam._m0[18u].x);
    float _249 = cos(cbMtdParam._m0[18u].x);
    float _250 = TEXCOORD.x - cbMtdParam._m0[17u].w;
    float _251 = TEXCOORD.y - cbMtdParam._m0[17u].w;
    float _259 = (cbMtdParam._m0[17u].w + cbMtdParam._m0[19u].y) + fma(_251, (-0.0) - _248, _249 * _250);
    float _261 = (cbMtdParam._m0[17u].w + cbMtdParam._m0[19u].z) + fma(_251, _249, _250 * _248);
    vec4 _274 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * _259) + cbTextureTilingScale._m0[1u].z, (_261 * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w));
    float _280 = _274.x * cbMtdParam._m0[10u].x;
    float _281 = _274.y * cbMtdParam._m0[10u].y;
    float _282 = _274.z * cbMtdParam._m0[10u].z;
    vec4 _300 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w));
    vec4 _319 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_0, SS_WrapLinear), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _344 = cbMtdParam._m0[19u].x * texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.x) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD.y) + cbTextureTilingScale._m0[13u].w)).x;
    float _355 = ((cbMtdParam._m0[15u].x * (-1.39999997615814208984375)) * (((1.0 - _319.x) * 2.0) - _344)) + 1.0;
    float _3830 = isnan(0.0) ? _355 : (isnan(_355) ? 0.0 : max(_355, 0.0));
    float _356 = isnan(1.0) ? _3830 : (isnan(_3830) ? 1.0 : min(_3830, 1.0));
    float _363 = (_356 * ((_300.x * cbMtdParam._m0[11u].x) - _280)) + _280;
    float _364 = (_356 * ((_300.y * cbMtdParam._m0[11u].y) - _281)) + _281;
    float _365 = (_356 * ((_300.z * cbMtdParam._m0[11u].z) - _282)) + _282;
    vec4 _383 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_8, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[17u].x * TEXCOORD.x) + cbTextureTilingScale._m0[17u].z, (cbTextureTilingScale._m0[17u].y * TEXCOORD.y) + cbTextureTilingScale._m0[17u].w));
    float _396 = (((((1.0 - _319.y) * 2.0) - _344) * (-1.39999997615814208984375)) * cbMtdParam._m0[18u].z) + 1.0;
    float _3841 = isnan(0.0) ? _396 : (isnan(_396) ? 0.0 : max(_396, 0.0));
    float _397 = isnan(1.0) ? _3841 : (isnan(_3841) ? 1.0 : min(_3841, 1.0));
    float _404 = (((_383.x * cbMtdParam._m0[12u].x) - _363) * _397) + _363;
    float _405 = (_397 * ((_383.y * cbMtdParam._m0[12u].y) - _364)) + _364;
    float _406 = (_397 * ((_383.z * cbMtdParam._m0[12u].z) - _365)) + _365;
    vec4 _423 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _436 = (((((1.0 - _319.z) * 2.0) - _344) * (-1.39999997615814208984375)) * cbMtdParam._m0[18u].w) + 1.0;
    float _3852 = isnan(0.0) ? _436 : (isnan(_436) ? 0.0 : max(_436, 0.0));
    float _437 = isnan(1.0) ? _3852 : (isnan(_3852) ? 1.0 : min(_3852, 1.0));
    vec4 _465 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _473 = ((((((_423.x * cbMtdParam._m0[13u].x) - _404) * _437) + _404) * 4.55000019073486328125) * cbMtdParam._m0[9u].x) * _465.x;
    float _476 = ((((_437 * ((_423.y * cbMtdParam._m0[13u].y) - _405)) + _405) * 4.55000019073486328125) * cbMtdParam._m0[9u].y) * _465.y;
    float _479 = ((((_437 * ((_423.z * cbMtdParam._m0[13u].z) - _406)) + _406) * 4.55000019073486328125) * cbMtdParam._m0[9u].z) * _465.z;
    vec4 _492 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * _259) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _261) + cbTextureTilingScale._m0[5u].w));
    float _494 = _492.x;
    float _512 = ((texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w)).x - _494) * _356) + _494;
    float _529 = ((texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w)).x - _512) * _397) + _512;
    float _548 = (((texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w)).x - _529) * _437) + _529) * cbMtdParam._m0[18u].y;
    vec4 _561 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[14u].x * _259) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _261) + cbTextureTilingScale._m0[14u].w));
    float _563 = _561.x;
    float _564 = _561.y;
    float _567 = cbMtdParam._m0[17u].y * _561.z;
    vec4 _579 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * TEXCOORD.x) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * TEXCOORD.y) + cbTextureTilingScale._m0[15u].w));
    float _588 = (((cbMtdParam._m0[17u].x * _579.z) - _567) * _356) + _567;
    vec4 _601 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_15, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _613 = (((cbMtdParam._m0[16u].w * _601.z) - _588) * _397) + _588;
    vec4 _626 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _635 = (((cbMtdParam._m0[16u].z * _626.z) - _613) * _437) + _613;
    float _640 = ((_579.x - _563) * _356) + _563;
    float _641 = ((_579.y - _564) * _356) + _564;
    float _646 = ((_601.x - _640) * _397) + _640;
    float _647 = ((_601.y - _641) * _397) + _641;
    float _656 = ((((_626.x - _646) * _437) + _646) * 2.0) + (-1.0);
    float _658 = ((((_626.y - _647) * _437) + _647) * 2.0) + (-1.0);
    float _659 = dot(vec2(_656, _658), vec2(_656, _658));
    float _3863 = isnan(0.0) ? _659 : (isnan(_659) ? 0.0 : max(_659, 0.0));
    float _664 = sqrt(1.0 - (isnan(1.0) ? _3863 : (isnan(_3863) ? 1.0 : min(_3863, 1.0))));
    float _667 = fma(_664, _218 * NORMAL.x, fma(_658, _225 * TANGENT.x, (_211 * _203) * _656));
    float _670 = fma(_664, _218 * NORMAL.y, fma(_658, _225 * TANGENT.y, (_211 * _204) * _656));
    float _673 = fma(_664, _218 * NORMAL.z, fma(_658, _225 * TANGENT.z, (_211 * _205) * _656));
    float _677 = inversesqrt(dot(vec3(_667, _670, _673), vec3(_667, _670, _673)));
    float _678 = _677 * _667;
    float _679 = _677 * _670;
    float _680 = _677 * _673;
    float _3874 = isnan(0.0) ? _635 : (isnan(_635) ? 0.0 : max(_635, 0.0));
    float _681 = isnan(1.0) ? _3874 : (isnan(_3874) ? 1.0 : min(_3874, 1.0));
    float _3885 = isnan(0.0) ? _473 : (isnan(_473) ? 0.0 : max(_473, 0.0));
    float _3896 = isnan(0.0) ? _476 : (isnan(_476) ? 0.0 : max(_476, 0.0));
    float _3907 = isnan(0.0) ? _479 : (isnan(_479) ? 0.0 : max(_479, 0.0));
    float _3918 = isnan(0.0) ? _548 : (isnan(_548) ? 0.0 : max(_548, 0.0));
    float _685 = isnan(1.0) ? _3918 : (isnan(_3918) ? 1.0 : min(_3918, 1.0));
    float _701 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _741 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _751 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _741);
    float _752 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _741);
    float _753 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _741);
    float _757 = inversesqrt(dot(vec3(_751, _752, _753), vec3(_751, _752, _753)));
    float _758 = _751 * _757;
    float _759 = _752 * _757;
    float _760 = _753 * _757;
    float _766 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _767 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _785 = fma(_680, cbSceneParam._m0[5u].z, fma(_679, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _678));
    float _788 = fma(_680, cbSceneParam._m0[6u].z, fma(_679, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _678));
    float _791 = fma(_680, cbSceneParam._m0[7u].z, fma(_679, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _678));
    uint _804 = uint(roundEven(NORMAL.w)) * 13u;
    uint _806 = (_804 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _812 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3885 : (isnan(_3885) ? 1.0 : min(_3885, 1.0)))) * cbInstanceData._m0[_806].x;
    float _813 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3896 : (isnan(_3896) ? 1.0 : min(_3896, 1.0)))) * cbInstanceData._m0[_806].y;
    float _814 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3907 : (isnan(_3907) ? 1.0 : min(_3907, 1.0)))) * cbInstanceData._m0[_806].z;
    float _3929 = isnan(0.0) ? _812 : (isnan(_812) ? 0.0 : max(_812, 0.0));
    float _815 = isnan(1.0) ? _3929 : (isnan(_3929) ? 1.0 : min(_3929, 1.0));
    float _3940 = isnan(0.0) ? _813 : (isnan(_813) ? 0.0 : max(_813, 0.0));
    float _816 = isnan(1.0) ? _3940 : (isnan(_3940) ? 1.0 : min(_3940, 1.0));
    float _3951 = isnan(0.0) ? _814 : (isnan(_814) ? 0.0 : max(_814, 0.0));
    float _817 = isnan(1.0) ? _3951 : (isnan(_3951) ? 1.0 : min(_3951, 1.0));
    float _818 = 1.0 - _685;
    float _819 = _815 * _818;
    float _820 = _816 * _818;
    float _821 = _817 * _818;
    float _826 = (_815 + (-0.039999999105930328369140625)) * _685;
    float _827 = (_816 + (-0.039999999105930328369140625)) * _685;
    float _828 = (_817 + (-0.039999999105930328369140625)) * _685;
    float _829 = _826 + 0.039999999105930328369140625;
    float _831 = _827 + 0.039999999105930328369140625;
    float _832 = _828 + 0.039999999105930328369140625;
    vec4 _841 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _766, cbSceneParam._m0[86u].y * _767));
    float _844 = _841.x * TEXCOORD_5.w;
    float _845 = dot(vec3(_678, _679, _680), vec3(_758, _759, _760));
    float _848 = _845 * 2.0;
    float _852 = (_848 * _678) - _758;
    float _853 = (_848 * _679) - _759;
    float _854 = (_848 * _680) - _760;
    float _858 = abs(dot(vec3(_758, _759, _760), vec3(_678, _679, _680)));
    float _3962 = isnan(0.0) ? _858 : (isnan(_858) ? 0.0 : max(_858, 0.0));
    float _860 = sqrt(_681);
    float _873 = exp2((_860 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3962 : (isnan(_3962) ? 1.0 : min(_3962, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_860 * 3.0));
    float _879 = (1.0 - _873) * ((_860 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _880 = _873 * _860;
    float _908 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _912 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _916 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1218;
    float _1220;
    float _1221;
    float _1222;
    float _1223;
    float _1224;
    float _1225;
    float _1226;
    float _1227;
    float _1228;
    float _1229;
    float _1230;
    float _1231;
    float _1232;
    float _1233;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _943 = fma(_916, cbModelParam._m0[26u].z, fma(_912, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _908));
        float _947 = fma(_916, cbModelParam._m0[27u].z, fma(_912, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _908));
        float _951 = fma(_916, cbModelParam._m0[28u].z, fma(_912, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _908));
        float _976 = _908 + _678;
        float _977 = _912 + _679;
        float _978 = _916 + _680;
        float _988 = fma(_978, cbModelParam._m0[26u].z, fma(_977, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _976)) - _943;
        float _989 = fma(_978, cbModelParam._m0[27u].z, fma(_977, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _976)) - _947;
        float _990 = fma(_978, cbModelParam._m0[28u].z, fma(_977, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _976)) - _951;
        float _994 = inversesqrt(dot(vec3(_988, _989, _990), vec3(_988, _989, _990)));
        float _1007 = ((_994 * _988) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_943 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1008 = ((_994 * _989) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_947 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1009 = ((_994 * _990) / cbModelParam._m0[34u].z) + ((((((_951 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1012 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1007, _1008, _1009), 0.0);
        vec4 _1019 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1007, _1008, _1009), 0.0);
        vec4 _1026 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1007, _1008, _1009), 0.0);
        vec4 _1033 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1007, _1008, _1009), 0.0);
        float _1046 = exp2((_1012.w + (-0.5)) * 20.0) * 2.0;
        float _1047 = _1046 * (_1012.x + (-0.5));
        float _1048 = _1046 * (_1012.y + (-0.5));
        float _1049 = _1046 * (_1012.z + (-0.5));
        float _1056 = exp2((_1019.w + (-0.5)) * 20.0) * 2.0;
        float _1057 = _1056 * (_1019.x + (-0.5));
        float _1058 = _1056 * (_1019.y + (-0.5));
        float _1059 = _1056 * (_1019.z + (-0.5));
        float _1066 = exp2((_1026.w + (-0.5)) * 20.0) * 2.0;
        float _1067 = _1066 * (_1026.x + (-0.5));
        float _1068 = _1066 * (_1026.y + (-0.5));
        float _1069 = _1066 * (_1026.z + (-0.5));
        float _1076 = exp2((_1033.w + (-0.5)) * 20.0) * 2.0;
        float _1077 = _1076 * (_1033.x + (-0.5));
        float _1078 = _1076 * (_1033.y + (-0.5));
        float _1079 = _1076 * (_1033.z + (-0.5));
        float _1080 = isnan(0.0) ? _1077 : (isnan(_1077) ? 0.0 : max(_1077, 0.0));
        float _1081 = isnan(0.0) ? _1078 : (isnan(_1078) ? 0.0 : max(_1078, 0.0));
        float _1082 = isnan(0.0) ? _1079 : (isnan(_1079) ? 0.0 : max(_1079, 0.0));
        float _1083 = _1047 * 0.5;
        float _1084 = _1057 * 0.5;
        float _1085 = _1067 * 0.5;
        float _1086 = dot(vec3(_1083, _1084, _1085), vec3(_1083, _1084, _1085));
        float _1091 = (_1086 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1086);
        float _1100 = (dot(vec3(_678, _679, _680), vec3(_1091 * _1083, _1091 * _1084, _1091 * _1085)) + 1.0) * 0.5;
        float _3988 = isnan(0.0) ? _1100 : (isnan(_1100) ? 0.0 : max(_1100, 0.0));
        float _1110 = sqrt(((_1084 * _1084) + (_1083 * _1083)) + (_1085 * _1085)) / (_1080 + 9.9999997473787516355514526367188e-06);
        float _3999 = isnan(0.0) ? _1110 : (isnan(_1110) ? 0.0 : max(_1110, 0.0));
        float _1111 = isnan(1.0) ? _3999 : (isnan(_3999) ? 1.0 : min(_3999, 1.0));
        float _1112 = _1111 * 2.0;
        float _1116 = (1.0 - _1111) / (_1111 + 1.0);
        float _4010 = isnan(0.0) ? _1116 : (isnan(_1116) ? 0.0 : max(_1116, 0.0));
        float _1117 = isnan(1.0) ? _4010 : (isnan(_4010) ? 1.0 : min(_4010, 1.0));
        float _1126 = ((((1.0 - _1117) * (_1112 + 2.0)) * exp2(log2(isnan(1.0) ? _3988 : (isnan(_3988) ? 1.0 : min(_3988, 1.0))) * (_1112 + 1.0))) + _1117) * _1080;
        float _1127 = _1048 * 0.5;
        float _1128 = _1058 * 0.5;
        float _1129 = _1068 * 0.5;
        float _1130 = dot(vec3(_1127, _1128, _1129), vec3(_1127, _1128, _1129));
        float _1135 = (_1130 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1130);
        float _1143 = (dot(vec3(_678, _679, _680), vec3(_1135 * _1127, _1135 * _1128, _1135 * _1129)) + 1.0) * 0.5;
        float _4021 = isnan(0.0) ? _1143 : (isnan(_1143) ? 0.0 : max(_1143, 0.0));
        float _1152 = sqrt(((_1128 * _1128) + (_1127 * _1127)) + (_1129 * _1129)) / (_1081 + 9.9999997473787516355514526367188e-06);
        float _4032 = isnan(0.0) ? _1152 : (isnan(_1152) ? 0.0 : max(_1152, 0.0));
        float _1153 = isnan(1.0) ? _4032 : (isnan(_4032) ? 1.0 : min(_4032, 1.0));
        float _1154 = _1153 * 2.0;
        float _1158 = (1.0 - _1153) / (_1153 + 1.0);
        float _4043 = isnan(0.0) ? _1158 : (isnan(_1158) ? 0.0 : max(_1158, 0.0));
        float _1159 = isnan(1.0) ? _4043 : (isnan(_4043) ? 1.0 : min(_4043, 1.0));
        float _1168 = ((((1.0 - _1159) * (_1154 + 2.0)) * exp2(log2(isnan(1.0) ? _4021 : (isnan(_4021) ? 1.0 : min(_4021, 1.0))) * (_1154 + 1.0))) + _1159) * _1081;
        float _1169 = _1049 * 0.5;
        float _1170 = _1059 * 0.5;
        float _1171 = _1069 * 0.5;
        float _1172 = dot(vec3(_1169, _1170, _1171), vec3(_1169, _1170, _1171));
        float _1177 = (_1172 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1172);
        float _1185 = (dot(vec3(_678, _679, _680), vec3(_1177 * _1169, _1177 * _1170, _1177 * _1171)) + 1.0) * 0.5;
        float _4054 = isnan(0.0) ? _1185 : (isnan(_1185) ? 0.0 : max(_1185, 0.0));
        float _1194 = sqrt(((_1170 * _1170) + (_1169 * _1169)) + (_1171 * _1171)) / (_1082 + 9.9999997473787516355514526367188e-06);
        float _4065 = isnan(0.0) ? _1194 : (isnan(_1194) ? 0.0 : max(_1194, 0.0));
        float _1195 = isnan(1.0) ? _4065 : (isnan(_4065) ? 1.0 : min(_4065, 1.0));
        float _1196 = _1195 * 2.0;
        float _1200 = (1.0 - _1195) / (_1195 + 1.0);
        float _4076 = isnan(0.0) ? _1200 : (isnan(_1200) ? 0.0 : max(_1200, 0.0));
        float _1201 = isnan(1.0) ? _4076 : (isnan(_4076) ? 1.0 : min(_4076, 1.0));
        float _1210 = ((((1.0 - _1201) * (_1196 + 2.0)) * exp2(log2(isnan(1.0) ? _4054 : (isnan(_4054) ? 1.0 : min(_4054, 1.0))) * (_1196 + 1.0))) + _1201) * _1082;
        _1218 = _1049;
        _1220 = _1048;
        _1221 = _1047;
        _1222 = _1059;
        _1223 = _1058;
        _1224 = _1057;
        _1225 = _1069;
        _1226 = _1068;
        _1227 = _1067;
        _1228 = _1082;
        _1229 = _1081;
        _1230 = _1080;
        _1231 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1126 : (isnan(_1126) ? 0.0 : max(_1126, 0.0)));
        _1232 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1168 : (isnan(_1168) ? 0.0 : max(_1168, 0.0)));
        _1233 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1210 : (isnan(_1210) ? 0.0 : max(_1210, 0.0)));
    }
    else
    {
        _1218 = _1219;
        _1220 = _1219;
        _1221 = _1219;
        _1222 = _1219;
        _1223 = _1219;
        _1224 = _1219;
        _1225 = _1219;
        _1226 = _1219;
        _1227 = _1219;
        _1228 = _1219;
        _1229 = _1219;
        _1230 = _1219;
        _1231 = 0.0;
        _1232 = 0.0;
        _1233 = 0.0;
    }
    float _1528;
    float _1529;
    float _1530;
    float _1531;
    float _1532;
    float _1533;
    float _1534;
    float _1535;
    float _1536;
    float _1537;
    float _1538;
    float _1539;
    float _1540;
    float _1541;
    float _1542;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1259 = fma(_916, cbModelParam._m0[30u].z, fma(_912, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _908));
        float _1263 = fma(_916, cbModelParam._m0[31u].z, fma(_912, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _908));
        float _1267 = fma(_916, cbModelParam._m0[32u].z, fma(_912, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _908));
        float _1290 = _908 + _678;
        float _1291 = _912 + _679;
        float _1292 = _916 + _680;
        float _1302 = fma(_1292, cbModelParam._m0[30u].z, fma(_1291, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1290)) - _1259;
        float _1303 = fma(_1292, cbModelParam._m0[31u].z, fma(_1291, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1290)) - _1263;
        float _1304 = fma(_1292, cbModelParam._m0[32u].z, fma(_1291, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1290)) - _1267;
        float _1308 = inversesqrt(dot(vec3(_1302, _1303, _1304), vec3(_1302, _1303, _1304)));
        float _1321 = ((_1308 * _1302) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1259 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1322 = ((_1308 * _1303) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1263 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1323 = ((_1308 * _1304) / cbModelParam._m0[35u].z) + ((((((_1267 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1325 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1321, _1322, _1323), 0.0);
        vec4 _1332 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1321, _1322, _1323), 0.0);
        vec4 _1339 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1321, _1322, _1323), 0.0);
        vec4 _1346 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1321, _1322, _1323), 0.0);
        float _1358 = exp2((_1325.w + (-0.5)) * 20.0) * 2.0;
        float _1359 = _1358 * (_1325.x + (-0.5));
        float _1360 = _1358 * (_1325.y + (-0.5));
        float _1361 = _1358 * (_1325.z + (-0.5));
        float _1368 = exp2((_1332.w + (-0.5)) * 20.0) * 2.0;
        float _1369 = _1368 * (_1332.x + (-0.5));
        float _1370 = _1368 * (_1332.y + (-0.5));
        float _1371 = _1368 * (_1332.z + (-0.5));
        float _1378 = exp2((_1339.w + (-0.5)) * 20.0) * 2.0;
        float _1379 = _1378 * (_1339.x + (-0.5));
        float _1380 = _1378 * (_1339.y + (-0.5));
        float _1381 = _1378 * (_1339.z + (-0.5));
        float _1388 = exp2((_1346.w + (-0.5)) * 20.0) * 2.0;
        float _1389 = _1388 * (_1346.x + (-0.5));
        float _1390 = _1388 * (_1346.y + (-0.5));
        float _1391 = _1388 * (_1346.z + (-0.5));
        float _1392 = isnan(0.0) ? _1389 : (isnan(_1389) ? 0.0 : max(_1389, 0.0));
        float _1393 = isnan(0.0) ? _1390 : (isnan(_1390) ? 0.0 : max(_1390, 0.0));
        float _1394 = isnan(0.0) ? _1391 : (isnan(_1391) ? 0.0 : max(_1391, 0.0));
        float _1395 = _1359 * 0.5;
        float _1396 = _1369 * 0.5;
        float _1397 = _1379 * 0.5;
        float _1398 = dot(vec3(_1395, _1396, _1397), vec3(_1395, _1396, _1397));
        float _1403 = (_1398 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1398);
        float _1411 = (dot(vec3(_678, _679, _680), vec3(_1403 * _1395, _1403 * _1396, _1403 * _1397)) + 1.0) * 0.5;
        float _4117 = isnan(0.0) ? _1411 : (isnan(_1411) ? 0.0 : max(_1411, 0.0));
        float _1420 = sqrt(((_1396 * _1396) + (_1395 * _1395)) + (_1397 * _1397)) / (_1392 + 9.9999997473787516355514526367188e-06);
        float _4128 = isnan(0.0) ? _1420 : (isnan(_1420) ? 0.0 : max(_1420, 0.0));
        float _1421 = isnan(1.0) ? _4128 : (isnan(_4128) ? 1.0 : min(_4128, 1.0));
        float _1422 = _1421 * 2.0;
        float _1426 = (1.0 - _1421) / (_1421 + 1.0);
        float _4139 = isnan(0.0) ? _1426 : (isnan(_1426) ? 0.0 : max(_1426, 0.0));
        float _1427 = isnan(1.0) ? _4139 : (isnan(_4139) ? 1.0 : min(_4139, 1.0));
        float _1436 = ((((1.0 - _1427) * (_1422 + 2.0)) * exp2(log2(isnan(1.0) ? _4117 : (isnan(_4117) ? 1.0 : min(_4117, 1.0))) * (_1422 + 1.0))) + _1427) * _1392;
        float _1437 = _1360 * 0.5;
        float _1438 = _1370 * 0.5;
        float _1439 = _1380 * 0.5;
        float _1440 = dot(vec3(_1437, _1438, _1439), vec3(_1437, _1438, _1439));
        float _1445 = (_1440 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1440);
        float _1453 = (dot(vec3(_678, _679, _680), vec3(_1445 * _1437, _1445 * _1438, _1445 * _1439)) + 1.0) * 0.5;
        float _4150 = isnan(0.0) ? _1453 : (isnan(_1453) ? 0.0 : max(_1453, 0.0));
        float _1462 = sqrt(((_1438 * _1438) + (_1437 * _1437)) + (_1439 * _1439)) / (_1393 + 9.9999997473787516355514526367188e-06);
        float _4161 = isnan(0.0) ? _1462 : (isnan(_1462) ? 0.0 : max(_1462, 0.0));
        float _1463 = isnan(1.0) ? _4161 : (isnan(_4161) ? 1.0 : min(_4161, 1.0));
        float _1464 = _1463 * 2.0;
        float _1468 = (1.0 - _1463) / (_1463 + 1.0);
        float _4172 = isnan(0.0) ? _1468 : (isnan(_1468) ? 0.0 : max(_1468, 0.0));
        float _1469 = isnan(1.0) ? _4172 : (isnan(_4172) ? 1.0 : min(_4172, 1.0));
        float _1478 = ((((1.0 - _1469) * (_1464 + 2.0)) * exp2(log2(isnan(1.0) ? _4150 : (isnan(_4150) ? 1.0 : min(_4150, 1.0))) * (_1464 + 1.0))) + _1469) * _1393;
        float _1479 = _1361 * 0.5;
        float _1480 = _1371 * 0.5;
        float _1481 = _1381 * 0.5;
        float _1482 = dot(vec3(_1479, _1480, _1481), vec3(_1479, _1480, _1481));
        float _1487 = (_1482 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1482);
        float _1495 = (dot(vec3(_678, _679, _680), vec3(_1487 * _1479, _1487 * _1480, _1487 * _1481)) + 1.0) * 0.5;
        float _4183 = isnan(0.0) ? _1495 : (isnan(_1495) ? 0.0 : max(_1495, 0.0));
        float _1504 = sqrt(((_1480 * _1480) + (_1479 * _1479)) + (_1481 * _1481)) / (_1394 + 9.9999997473787516355514526367188e-06);
        float _4194 = isnan(0.0) ? _1504 : (isnan(_1504) ? 0.0 : max(_1504, 0.0));
        float _1505 = isnan(1.0) ? _4194 : (isnan(_4194) ? 1.0 : min(_4194, 1.0));
        float _1506 = _1505 * 2.0;
        float _1510 = (1.0 - _1505) / (_1505 + 1.0);
        float _4205 = isnan(0.0) ? _1510 : (isnan(_1510) ? 0.0 : max(_1510, 0.0));
        float _1511 = isnan(1.0) ? _4205 : (isnan(_4205) ? 1.0 : min(_4205, 1.0));
        float _1520 = ((((1.0 - _1511) * (_1506 + 2.0)) * exp2(log2(isnan(1.0) ? _4183 : (isnan(_4183) ? 1.0 : min(_4183, 1.0))) * (_1506 + 1.0))) + _1511) * _1394;
        _1528 = _1361;
        _1529 = _1360;
        _1530 = _1359;
        _1531 = _1371;
        _1532 = _1370;
        _1533 = _1369;
        _1534 = _1381;
        _1535 = _1380;
        _1536 = _1379;
        _1537 = _1394;
        _1538 = _1393;
        _1539 = _1392;
        _1540 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1436 : (isnan(_1436) ? 0.0 : max(_1436, 0.0)));
        _1541 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1478 : (isnan(_1478) ? 0.0 : max(_1478, 0.0)));
        _1542 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1520 : (isnan(_1520) ? 0.0 : max(_1520, 0.0)));
    }
    else
    {
        _1528 = _1219;
        _1529 = _1219;
        _1530 = _1219;
        _1531 = _1219;
        _1532 = _1219;
        _1533 = _1219;
        _1534 = _1219;
        _1535 = _1219;
        _1536 = _1219;
        _1537 = _1219;
        _1538 = _1219;
        _1539 = _1219;
        _1540 = 0.0;
        _1541 = 0.0;
        _1542 = 0.0;
    }
    float _1552 = (cbModelParam._m0[1u].x * (_1540 - _1231)) + _1231;
    float _1553 = (cbModelParam._m0[1u].x * (_1541 - _1232)) + _1232;
    float _1554 = (cbModelParam._m0[1u].x * (_1542 - _1233)) + _1233;
    float _1575 = fma(_1554, cbSceneParam._m0[89u].z, fma(_1553, cbSceneParam._m0[89u].y, _1552 * cbSceneParam._m0[89u].x));
    float _1578 = fma(_1554, cbSceneParam._m0[90u].z, fma(_1553, cbSceneParam._m0[90u].y, _1552 * cbSceneParam._m0[90u].x));
    float _1581 = fma(_1554, cbSceneParam._m0[91u].z, fma(_1553, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1552));
    float _1596 = _852 * 0.5;
    float _1597 = _853 * 0.5;
    float _1598 = _854 * 0.5;
    float _1599 = dot(vec4(_1596, _1597, _1598, 1.0), vec4(_1530, _1533, _1536, _1539));
    float _1602 = dot(vec4(_1596, _1597, _1598, 1.0), vec4(_1529, _1532, _1535, _1538));
    float _1605 = dot(vec4(_1596, _1597, _1598, 1.0), vec4(_1528, _1531, _1534, _1537));
    float _1639;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1612 = dot(vec4(_1596, _1597, _1598, 1.0), vec4(_1218, _1222, _1225, _1228));
        float _1616 = dot(vec4(_1596, _1597, _1598, 1.0), vec4(_1220, _1223, _1226, _1229));
        float _1620 = dot(vec4(_1596, _1597, _1598, 1.0), vec4(_1221, _1224, _1227, _1230));
        float _1627 = dot(vec4(cbModelParam._m0[39u]), vec4(_1596, _1597, _1598, 1.0));
        _1639 = dot(vec3(isnan(0.0) ? _1620 : (isnan(_1620) ? 0.0 : max(_1620, 0.0)), isnan(0.0) ? _1616 : (isnan(_1616) ? 0.0 : max(_1616, 0.0)), isnan(0.0) ? _1612 : (isnan(_1612) ? 0.0 : max(_1612, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1627) ? 0.0 : (isnan(0.0) ? _1627 : max(0.0, _1627))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1639 = 1.0;
    }
    float _1650;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1641 = dot(vec4(cbModelParam._m0[40u]), vec4(_1596, _1597, _1598, 1.0));
        _1650 = dot(vec3(isnan(0.0) ? _1599 : (isnan(_1599) ? 0.0 : max(_1599, 0.0)), isnan(0.0) ? _1602 : (isnan(_1602) ? 0.0 : max(_1602, 0.0)), isnan(0.0) ? _1605 : (isnan(_1605) ? 0.0 : max(_1605, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1641) ? 0.0 : (isnan(0.0) ? _1641 : max(0.0, _1641))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1650 = 1.0;
    }
    float _1654 = (_1650 * cbModelParam._m0[1u].x) + (_1639 * (1.0 - cbModelParam._m0[1u].x));
    float _1664 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _681);
    float _1665 = isnan(_1664) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1664 : min(cbModelParam._m0[25u].z, _1664));
    float _1745;
    float _1747;
    float _1749;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1712 = fma(_916, cbModelParam._m0[13u].z, fma(_912, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _908)) + cbModelParam._m0[13u].w;
        float _1716 = fma(_916, cbModelParam._m0[14u].z, fma(_912, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _908)) + cbModelParam._m0[14u].w;
        float _1720 = fma(_916, cbModelParam._m0[15u].z, fma(_912, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _908)) + cbModelParam._m0[15u].w;
        float _1723 = fma(_854, cbModelParam._m0[13u].z, fma(_853, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _852));
        float _1726 = fma(_854, cbModelParam._m0[14u].z, fma(_853, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _852));
        float _1729 = fma(_854, cbModelParam._m0[15u].z, fma(_853, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _852));
        float _1757;
        if (_1723 > 0.0)
        {
            _1757 = abs((1.0 - _1712) / _1723);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1723 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1712 + 1.0) / _1723);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1757 = frontier_phi_14_12_ladder;
        }
        float _1930;
        if (_1726 > 0.0)
        {
            _1930 = abs((1.0 - _1716) / _1726);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1726 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1716 + 1.0) / _1726);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1930 = frontier_phi_23_19_ladder;
        }
        float _2225;
        if (_1729 > 0.0)
        {
            _2225 = abs((1.0 - _1720) / _1729);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1729 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1720 + 1.0) / _1729);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2225 = frontier_phi_35_30_ladder;
        }
        float _2227 = isnan(_1930) ? _1757 : (isnan(_1757) ? _1930 : min(_1757, _1930));
        float _2228 = isnan(_2225) ? _2227 : (isnan(_2227) ? _2225 : min(_2227, _2225));
        float _2232 = (_2228 * _1723) + _1712;
        float _2233 = (_2228 * _1726) + _1716;
        float _2234 = (_2228 * _1729) + _1720;
        float _2235 = _2228 * 9.9999997473787516355514526367188e-05;
        float _2237 = (-1.0) - _2235;
        float _2239 = _2235 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2234 > _2239) || ((_2234 < _2237) || ((_2233 > _2239) || ((_2233 < _2237) || ((_2232 < _2237) || (_2232 > _2239))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2379 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2234, cbModelParam._m0[9u].z, fma(_2233, cbModelParam._m0[9u].y, _2232 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2234, cbModelParam._m0[10u].z, fma(_2233, cbModelParam._m0[10u].y, _2232 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2234, cbModelParam._m0[11u].z, fma(_2233, cbModelParam._m0[11u].y, _2232 * cbModelParam._m0[11u].x))), _1665);
            frontier_phi_13_35_ladder = _2379.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2379.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2379.x * cbModelParam._m0[1u].y;
        }
        _1745 = frontier_phi_13_35_ladder_2;
        _1747 = frontier_phi_13_35_ladder_1;
        _1749 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1733 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_852, _853, _854), _1665);
        _1745 = _1733.x * cbModelParam._m0[1u].y;
        _1747 = _1733.y * cbModelParam._m0[1u].y;
        _1749 = _1733.z * cbModelParam._m0[1u].y;
    }
    float _1753 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _681);
    float _1754 = isnan(_1753) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1753 : min(cbModelParam._m0[25u].w, _1753));
    float _1845;
    float _1847;
    float _1849;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1809 = fma(_916, cbModelParam._m0[21u].z, fma(_912, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _908)) + cbModelParam._m0[21u].w;
        float _1813 = fma(_916, cbModelParam._m0[22u].z, fma(_912, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _908)) + cbModelParam._m0[22u].w;
        float _1817 = fma(_916, cbModelParam._m0[23u].z, fma(_912, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _908)) + cbModelParam._m0[23u].w;
        float _1820 = fma(_854, cbModelParam._m0[21u].z, fma(_853, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _852));
        float _1823 = fma(_854, cbModelParam._m0[22u].z, fma(_853, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _852));
        float _1826 = fma(_854, cbModelParam._m0[23u].z, fma(_853, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _852));
        float _1935;
        if (_1820 > 0.0)
        {
            _1935 = abs((1.0 - _1809) / _1820);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1820 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1809 + 1.0) / _1820);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1935 = frontier_phi_25_21_ladder;
        }
        float _2252;
        if (_1823 > 0.0)
        {
            _2252 = abs((1.0 - _1813) / _1823);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1823 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1813 + 1.0) / _1823);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2252 = frontier_phi_37_32_ladder;
        }
        float _2590;
        if (_1826 > 0.0)
        {
            _2590 = abs((1.0 - _1817) / _1826);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1826 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1817 + 1.0) / _1826);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2590 = frontier_phi_47_44_ladder;
        }
        float _2592 = isnan(_2252) ? _1935 : (isnan(_1935) ? _2252 : min(_1935, _2252));
        float _2593 = isnan(_2590) ? _2592 : (isnan(_2592) ? _2590 : min(_2592, _2590));
        float _2597 = (_2593 * _1820) + _1809;
        float _2598 = (_2593 * _1823) + _1813;
        float _2599 = (_2593 * _1826) + _1817;
        float _2600 = _2593 * 9.9999997473787516355514526367188e-05;
        float _2601 = (-1.0) - _2600;
        float _2603 = _2600 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2599 > _2603) || ((_2599 < _2601) || ((_2598 > _2603) || ((_2598 < _2601) || ((_2597 < _2601) || (_2597 > _2603))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2721 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2599, cbModelParam._m0[17u].z, fma(_2598, cbModelParam._m0[17u].y, _2597 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2599, cbModelParam._m0[18u].z, fma(_2598, cbModelParam._m0[18u].y, _2597 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2599, cbModelParam._m0[19u].z, fma(_2598, cbModelParam._m0[19u].y, _2597 * cbModelParam._m0[19u].x))), _1754);
            frontier_phi_22_47_ladder = _2721.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2721.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2721.x * cbModelParam._m0[1u].z;
        }
        _1845 = frontier_phi_22_47_ladder_2;
        _1847 = frontier_phi_22_47_ladder_1;
        _1849 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1829 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_852, _853, _854), _1754);
        _1845 = _1829.x * cbModelParam._m0[1u].z;
        _1847 = _1829.y * cbModelParam._m0[1u].z;
        _1849 = _1829.z * cbModelParam._m0[1u].z;
    }
    float _1862 = (((_879 * _829) + _880) * _844) * ((cbModelParam._m0[1u].w * (_1845 - _1745)) + _1745);
    float _1864 = (((_879 * _831) + _880) * _844) * ((cbModelParam._m0[1u].w * (_1847 - _1747)) + _1747);
    float _1866 = (((_879 * _832) + _880) * _844) * ((cbModelParam._m0[1u].w * (_1849 - _1749)) + _1749);
    float _1869 = fma(_1866, cbSceneParam._m0[89u].z, fma(_1864, cbSceneParam._m0[89u].y, _1862 * cbSceneParam._m0[89u].x));
    float _1872 = fma(_1866, cbSceneParam._m0[90u].z, fma(_1864, cbSceneParam._m0[90u].y, _1862 * cbSceneParam._m0[90u].x));
    float _1875 = fma(_1866, cbSceneParam._m0[91u].z, fma(_1864, cbSceneParam._m0[91u].y, _1862 * cbSceneParam._m0[91u].x));
    float _1909 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1913 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1917 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1921 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1922 = _1909 / _1921;
    float _1923 = _1913 / _1921;
    float _1924 = _1917 / _1921;
    float _2071;
    float _2072;
    float _2073;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1951 = ((uint(_1924 > cbSceneParam._m0[59u].y) + uint(_1924 > cbSceneParam._m0[59u].x)) + uint(_1924 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1952 = _1951 + 43u;
        uint _1960 = _1951 + 44u;
        uint _1968 = _1951 + 45u;
        uint _1976 = _1951 + 46u;
        float _1987 = fma(_1921, cbSceneParam._m0[_1952].w, fma(_1917, cbSceneParam._m0[_1952].z, fma(_1913, cbSceneParam._m0[_1952].y, _1909 * cbSceneParam._m0[_1952].x)));
        float _1991 = fma(_1921, cbSceneParam._m0[_1960].w, fma(_1917, cbSceneParam._m0[_1960].z, fma(_1913, cbSceneParam._m0[_1960].y, _1909 * cbSceneParam._m0[_1960].x)));
        float _1999 = fma(_1921, cbSceneParam._m0[_1976].w, fma(_1917, cbSceneParam._m0[_1976].z, fma(_1913, cbSceneParam._m0[_1976].y, _1909 * cbSceneParam._m0[_1976].x)));
        float _2004 = cbSceneParam._m0[33u].z * _1999;
        float _2006 = cbSceneParam._m0[33u].w * _1999;
        float _2009 = fma(_1921, cbSceneParam._m0[_1968].w, fma(_1917, cbSceneParam._m0[_1968].z, fma(_1913, cbSceneParam._m0[_1968].y, _1909 * cbSceneParam._m0[_1968].x))) / _1999;
        float _2057 = (cbSceneParam._m0[33u].x - sqrt(((_1923 * _1923) + (_1922 * _1922)) + (_1924 * _1924))) * cbSceneParam._m0[33u].y;
        float _4331 = isnan(0.0) ? _2057 : (isnan(_2057) ? 0.0 : max(_2057, 0.0));
        float _2064 = (isnan(1.0) ? _4331 : (isnan(_4331) ? 1.0 : min(_4331, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2004 + _1987) / _1999, (_2006 + _1991) / _1999), _2009), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2006 + _1987) / _1999, (_1991 - _2004) / _1999), _2009), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1987 - _2004) / _1999, (_1991 - _2006) / _1999), _2009), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1987 - _2006) / _1999, (_2004 + _1991) / _1999), _2009), 0.0)).x), vec4(0.25)));
        _2071 = 1.0 - (_2064 * cbSceneParam._m0[34u].x);
        _2072 = 1.0 - (_2064 * cbSceneParam._m0[34u].y);
        _2073 = 1.0 - (_2064 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2071 = 1.0;
        _2072 = 1.0;
        _2073 = 1.0;
    }
    float _2137;
    float _2139;
    float _2141;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2125 = fma(_1921, cbSceneParam._m0[63u].w, fma(_1917, cbSceneParam._m0[63u].z, fma(_1913, cbSceneParam._m0[63u].y, _1909 * cbSceneParam._m0[63u].x)));
        float _2126 = fma(_1921, cbSceneParam._m0[60u].w, fma(_1917, cbSceneParam._m0[60u].z, fma(_1913, cbSceneParam._m0[60u].y, _1909 * cbSceneParam._m0[60u].x))) / _2125;
        float _2127 = fma(_1921, cbSceneParam._m0[61u].w, fma(_1917, cbSceneParam._m0[61u].z, fma(_1913, cbSceneParam._m0[61u].y, _1909 * cbSceneParam._m0[61u].x))) / _2125;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2126 >= cbSceneParam._m0[64u].x) && (_2127 >= cbSceneParam._m0[64u].y)) && (_2126 <= cbSceneParam._m0[64u].z)) && (_2127 <= cbSceneParam._m0[64u].w))
        {
            float _2265 = fma(_1921, cbSceneParam._m0[62u].w, fma(_1917, cbSceneParam._m0[62u].z, fma(_1913, cbSceneParam._m0[62u].y, _1909 * cbSceneParam._m0[62u].x))) / _2125;
            float _2269 = isnan(cbSceneParam._m0[41u].w) ? _2265 : (isnan(_2265) ? cbSceneParam._m0[41u].w : max(_2265, cbSceneParam._m0[41u].w));
            float _2312 = (cbSceneParam._m0[33u].x - sqrt(((_1923 * _1923) + (_1922 * _1922)) + (_1924 * _1924))) * cbSceneParam._m0[33u].y;
            float _4347 = isnan(0.0) ? _2312 : (isnan(_2312) ? 0.0 : max(_2312, 0.0));
            float _2319 = (isnan(1.0) ? _4347 : (isnan(_4347) ? 1.0 : min(_4347, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2126, cbSceneParam._m0[33u].w + _2127), _2269), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2126, _2127 - cbSceneParam._m0[33u].z), _2269), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2126 - cbSceneParam._m0[33u].z, _2127 - cbSceneParam._m0[33u].w), _2269), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2126 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2127), _2269), 0.0)).x), vec4(0.25)));
            float _2323 = 1.0 - (_2319 * cbSceneParam._m0[34u].x);
            float _2324 = 1.0 - (_2319 * cbSceneParam._m0[34u].y);
            float _2325 = 1.0 - (_2319 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2325) ? _2073 : (isnan(_2073) ? _2325 : min(_2073, _2325));
            frontier_phi_34_33_ladder_1 = isnan(_2324) ? _2072 : (isnan(_2072) ? _2324 : min(_2072, _2324));
            frontier_phi_34_33_ladder_2 = isnan(_2323) ? _2071 : (isnan(_2071) ? _2323 : min(_2071, _2323));
        }
        else
        {
            frontier_phi_34_33_ladder = _2073;
            frontier_phi_34_33_ladder_1 = _2072;
            frontier_phi_34_33_ladder_2 = _2071;
        }
        _2137 = frontier_phi_34_33_ladder_2;
        _2139 = frontier_phi_34_33_ladder_1;
        _2141 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2137 = _2071;
        _2139 = _2072;
        _2141 = _2073;
    }
    uvec4 _2146 = floatBitsToUint(cbInstanceData._m0[_804 + 5u]);
    uint _2148 = _2146.x * 14u;
    uint _2149 = _2148 + 13u;
    float _2156 = _844 + (-1.0);
    float _2161 = (cbLight._m0[_2149].x * _2156) + 1.0;
    float _2162 = (cbLight._m0[_2149].y * _2156) + 1.0;
    float _2163 = (cbLight._m0[_2149].z * _2156) + 1.0;
    float _2164 = (cbLight._m0[_2149].w * _2156) + 1.0;
    uint _2165 = _2148 + 5u;
    float _2171 = isnan(1.0) ? _2162 : (isnan(_2162) ? 1.0 : min(_2162, 1.0));
    uint _2175 = _2148 + 4u;
    float _2184 = isnan(1.0) ? _2161 : (isnan(_2161) ? 1.0 : min(_2161, 1.0));
    uint _2188 = _2148 | 1u;
    float _2199 = dot(vec3(cbLight._m0[_2148].xyz), vec3(_678, _679, _680));
    float _2202 = dot(vec3(cbLight._m0[_2188].xyz), vec3(_678, _679, _680));
    float _4383 = isnan(0.0) ? _2199 : (isnan(_2199) ? 0.0 : max(_2199, 0.0));
    float _4394 = isnan(0.0) ? _2202 : (isnan(_2202) ? 0.0 : max(_2202, 0.0));
    float _2207 = (isnan(1.0) ? _4383 : (isnan(_4383) ? 1.0 : min(_4383, 1.0))) * 0.3183098733425140380859375;
    float _2209 = (isnan(1.0) ? _4394 : (isnan(_4394) ? 1.0 : min(_4394, 1.0))) * 0.3183098733425140380859375;
    float _2216 = ((cbLight._m0[_2165].x * _2171) * _2209) + (((cbLight._m0[_2175].x * _2137) * _2184) * _2207);
    float _2217 = ((_2171 * cbLight._m0[_2165].y) * _2209) + (((cbLight._m0[_2175].y * _2139) * _2184) * _2207);
    float _2218 = ((_2171 * cbLight._m0[_2165].z) * _2209) + (((cbLight._m0[_2175].z * _2141) * _2184) * _2207);
    uvec4 _2222 = floatBitsToUint(cbLight._m0[_2148 + 12u]);
    bool _2224 = _2222.x == 0u;
    float _2326;
    float _2328;
    float _2330;
    if (_2224)
    {
        _2326 = _2216;
        _2328 = _2217;
        _2330 = _2218;
    }
    else
    {
        uint _2334 = _2148 + 6u;
        float _2350 = (dot(vec3(cbLight._m0[_2148 + 2u].xyz), vec3(_678, _679, _680)) * 0.5) + 0.5;
        float _2351 = _2350 * _2350;
        float _4405 = isnan(0.0) ? _2351 : (isnan(_2351) ? 0.0 : max(_2351, 0.0));
        float _2352 = isnan(1.0) ? _4405 : (isnan(_4405) ? 1.0 : min(_4405, 1.0));
        float _2353 = isnan(1.0) ? _2163 : (isnan(_2163) ? 1.0 : min(_2163, 1.0));
        _2326 = (((cbLight._m0[_2334].x * 0.3183098733425140380859375) * _2352) * _2353) + _2216;
        _2328 = (((cbLight._m0[_2334].y * 0.3183098733425140380859375) * _2352) * _2353) + _2217;
        _2330 = (((cbLight._m0[_2334].z * 0.3183098733425140380859375) * _2352) * _2353) + _2218;
    }
    bool _2333 = _2222.y == 0u;
    float _2388;
    float _2390;
    float _2392;
    if (_2333)
    {
        _2388 = _2326;
        _2390 = _2328;
        _2392 = _2330;
    }
    else
    {
        uint _2561 = _2148 + 7u;
        float _2577 = (dot(vec3(cbLight._m0[_2148 + 3u].xyz), vec3(_678, _679, _680)) * 0.5) + 0.5;
        float _2578 = _2577 * _2577;
        float _4421 = isnan(0.0) ? _2578 : (isnan(_2578) ? 0.0 : max(_2578, 0.0));
        float _2579 = isnan(1.0) ? _4421 : (isnan(_4421) ? 1.0 : min(_4421, 1.0));
        float _2580 = isnan(1.0) ? _2164 : (isnan(_2164) ? 1.0 : min(_2164, 1.0));
        _2388 = (((cbLight._m0[_2561].x * 0.3183098733425140380859375) * _2579) * _2580) + _2326;
        _2390 = (((cbLight._m0[_2561].y * 0.3183098733425140380859375) * _2579) * _2580) + _2328;
        _2392 = (((cbLight._m0[_2561].z * 0.3183098733425140380859375) * _2579) * _2580) + _2330;
    }
    uint _2395 = _2148 + 8u;
    float _2408 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2148].w)) * _681) * 0.949999988079071044921875);
    float _2409 = _2408 * _2408;
    float _2410 = cbLight._m0[_2148].x + _758;
    float _2411 = cbLight._m0[_2148].y + _759;
    float _2412 = cbLight._m0[_2148].z + _760;
    float _2416 = inversesqrt(dot(vec3(_2410, _2411, _2412), vec3(_2410, _2411, _2412)));
    float _2417 = _2416 * _2410;
    float _2418 = _2416 * _2411;
    float _2419 = _2416 * _2412;
    float _2420 = dot(vec3(_678, _679, _680), vec3(cbLight._m0[_2148].xyz));
    float _4437 = isnan(0.0) ? _2420 : (isnan(_2420) ? 0.0 : max(_2420, 0.0));
    float _2423 = isnan(1.0) ? _4437 : (isnan(_4437) ? 1.0 : min(_4437, 1.0));
    float _4448 = isnan(0.0) ? _845 : (isnan(_845) ? 0.0 : max(_845, 0.0));
    float _2424 = isnan(1.0) ? _4448 : (isnan(_4448) ? 1.0 : min(_4448, 1.0));
    float _2425 = dot(vec3(_678, _679, _680), vec3(_2417, _2418, _2419));
    float _4459 = isnan(0.0) ? _2425 : (isnan(_2425) ? 0.0 : max(_2425, 0.0));
    float _2428 = isnan(1.0) ? _4459 : (isnan(_4459) ? 1.0 : min(_4459, 1.0));
    float _2429 = dot(vec3(cbLight._m0[_2148].xyz), vec3(_2417, _2418, _2419));
    float _4470 = isnan(0.0) ? _2429 : (isnan(_2429) ? 0.0 : max(_2429, 0.0));
    float _2433 = _2409 * _2409;
    float _2437 = ((_2428 * _2428) * (_2433 + (-1.0))) + 1.0;
    float _2445 = exp2(log2(1.0 - (isnan(1.0) ? _4470 : (isnan(_4470) ? 1.0 : min(_4470, 1.0)))) * 5.0);
    float _2446 = 0.959999978542327880859375 - _826;
    float _2448 = 0.959999978542327880859375 - _827;
    float _2449 = 0.959999978542327880859375 - _828;
    float _2456 = 1.0 - _2409;
    float _2467 = (0.5 / (((_2424 * ((_2423 * _2456) + _2409)) + 9.9999999392252902907785028219223e-09) + (((_2424 * _2456) + _2409) * _2423))) * _2423;
    float _4481 = isnan(0.0) ? _2467 : (isnan(_2467) ? 0.0 : max(_2467, 0.0));
    float _2469 = (isnan(1.0) ? _4481 : (isnan(_4481) ? 1.0 : min(_4481, 1.0))) * (_2433 / ((_2437 * _2437) * 3.141590118408203125));
    uint _2483 = _2148 + 9u;
    float _2494 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2188].w)) * _681) * 0.949999988079071044921875);
    float _2495 = _2494 * _2494;
    float _2496 = cbLight._m0[_2188].x + _758;
    float _2497 = cbLight._m0[_2188].y + _759;
    float _2498 = cbLight._m0[_2188].z + _760;
    float _2502 = inversesqrt(dot(vec3(_2496, _2497, _2498), vec3(_2496, _2497, _2498)));
    float _2503 = _2502 * _2496;
    float _2504 = _2502 * _2497;
    float _2505 = _2502 * _2498;
    float _2506 = dot(vec3(_678, _679, _680), vec3(cbLight._m0[_2188].xyz));
    float _4492 = isnan(0.0) ? _2506 : (isnan(_2506) ? 0.0 : max(_2506, 0.0));
    float _2509 = isnan(1.0) ? _4492 : (isnan(_4492) ? 1.0 : min(_4492, 1.0));
    float _2510 = dot(vec3(_678, _679, _680), vec3(_2503, _2504, _2505));
    float _4503 = isnan(0.0) ? _2510 : (isnan(_2510) ? 0.0 : max(_2510, 0.0));
    float _2513 = isnan(1.0) ? _4503 : (isnan(_4503) ? 1.0 : min(_4503, 1.0));
    float _2514 = dot(vec3(cbLight._m0[_2188].xyz), vec3(_2503, _2504, _2505));
    float _4514 = isnan(0.0) ? _2514 : (isnan(_2514) ? 0.0 : max(_2514, 0.0));
    float _2518 = _2495 * _2495;
    float _2522 = ((_2513 * _2513) * (_2518 + (-1.0))) + 1.0;
    float _2529 = exp2(log2(1.0 - (isnan(1.0) ? _4514 : (isnan(_4514) ? 1.0 : min(_4514, 1.0)))) * 5.0);
    float _2536 = 1.0 - _2495;
    float _2546 = (0.5 / (((_2424 * ((_2509 * _2536) + _2495)) + 9.9999999392252902907785028219223e-09) + (((_2424 * _2536) + _2495) * _2509))) * _2509;
    float _4525 = isnan(0.0) ? _2546 : (isnan(_2546) ? 0.0 : max(_2546, 0.0));
    float _2548 = (isnan(1.0) ? _4525 : (isnan(_4525) ? 1.0 : min(_4525, 1.0))) * (_2518 / ((_2522 * _2522) * 3.141590118408203125));
    float _2558 = (((((_2529 * _2446) + _829) * cbLight._m0[_2483].x) * _2548) * _2171) + ((((cbLight._m0[_2395].x * _2137) * ((_2445 * _2446) + _829)) * _2469) * _2184);
    float _2559 = (((((_2529 * _2448) + _831) * cbLight._m0[_2483].y) * _2548) * _2171) + ((((cbLight._m0[_2395].y * _2139) * ((_2445 * _2448) + _831)) * _2469) * _2184);
    float _2560 = (((((_2529 * _2449) + _832) * cbLight._m0[_2483].z) * _2548) * _2171) + ((((cbLight._m0[_2395].z * _2141) * ((_2445 * _2449) + _832)) * _2469) * _2184);
    float _2616;
    float _2618;
    float _2620;
    if (_2224)
    {
        _2616 = _2558;
        _2618 = _2559;
        _2620 = _2560;
    }
    else
    {
        uint _2622 = _2148 + 2u;
        uint _2626 = _2148 + 10u;
        float _2640 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2622].w)) * _681) * 0.949999988079071044921875);
        float _2641 = _2640 * _2640;
        float _2642 = cbLight._m0[_2622].x + _758;
        float _2643 = cbLight._m0[_2622].y + _759;
        float _2644 = cbLight._m0[_2622].z + _760;
        float _2648 = inversesqrt(dot(vec3(_2642, _2643, _2644), vec3(_2642, _2643, _2644)));
        float _2649 = _2648 * _2642;
        float _2650 = _2648 * _2643;
        float _2651 = _2648 * _2644;
        float _2652 = dot(vec3(_678, _679, _680), vec3(cbLight._m0[_2622].xyz));
        float _4536 = isnan(0.0) ? _2652 : (isnan(_2652) ? 0.0 : max(_2652, 0.0));
        float _2655 = isnan(1.0) ? _4536 : (isnan(_4536) ? 1.0 : min(_4536, 1.0));
        float _2656 = dot(vec3(_678, _679, _680), vec3(_2649, _2650, _2651));
        float _4547 = isnan(0.0) ? _2656 : (isnan(_2656) ? 0.0 : max(_2656, 0.0));
        float _2659 = isnan(1.0) ? _4547 : (isnan(_4547) ? 1.0 : min(_4547, 1.0));
        float _2660 = dot(vec3(cbLight._m0[_2622].xyz), vec3(_2649, _2650, _2651));
        float _4558 = isnan(0.0) ? _2660 : (isnan(_2660) ? 0.0 : max(_2660, 0.0));
        float _2664 = _2641 * _2641;
        float _2668 = ((_2659 * _2659) * (_2664 + (-1.0))) + 1.0;
        float _2675 = exp2(log2(1.0 - (isnan(1.0) ? _4558 : (isnan(_4558) ? 1.0 : min(_4558, 1.0)))) * 5.0);
        float _2682 = 1.0 - _2641;
        float _2692 = (0.5 / (((_2424 * ((_2655 * _2682) + _2641)) + 9.9999999392252902907785028219223e-09) + (((_2424 * _2682) + _2641) * _2655))) * _2655;
        float _4569 = isnan(0.0) ? _2692 : (isnan(_2692) ? 0.0 : max(_2692, 0.0));
        float _2694 = (isnan(1.0) ? _4569 : (isnan(_4569) ? 1.0 : min(_4569, 1.0))) * (_2664 / ((_2668 * _2668) * 3.141590118408203125));
        float _2695 = isnan(1.0) ? _2163 : (isnan(_2163) ? 1.0 : min(_2163, 1.0));
        _2616 = (((((_2675 * _2446) + _829) * cbLight._m0[_2626].x) * _2694) * _2695) + _2558;
        _2618 = (((((_2675 * _2448) + _831) * cbLight._m0[_2626].y) * _2694) * _2695) + _2559;
        _2620 = (((((_2675 * _2449) + _832) * cbLight._m0[_2626].z) * _2694) * _2695) + _2560;
    }
    float _2726;
    float _2728;
    float _2730;
    if (_2333)
    {
        _2726 = _2616;
        _2728 = _2618;
        _2730 = _2620;
    }
    else
    {
        uint _2737 = _2148 + 3u;
        uint _2741 = _2148 + 11u;
        float _2755 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2737].w)) * _681) * 0.949999988079071044921875);
        float _2756 = _2755 * _2755;
        float _2757 = cbLight._m0[_2737].x + _758;
        float _2758 = cbLight._m0[_2737].y + _759;
        float _2759 = cbLight._m0[_2737].z + _760;
        float _2763 = inversesqrt(dot(vec3(_2757, _2758, _2759), vec3(_2757, _2758, _2759)));
        float _2764 = _2763 * _2757;
        float _2765 = _2763 * _2758;
        float _2766 = _2763 * _2759;
        float _2767 = dot(vec3(_678, _679, _680), vec3(cbLight._m0[_2737].xyz));
        float _4585 = isnan(0.0) ? _2767 : (isnan(_2767) ? 0.0 : max(_2767, 0.0));
        float _2770 = isnan(1.0) ? _4585 : (isnan(_4585) ? 1.0 : min(_4585, 1.0));
        float _2771 = dot(vec3(_678, _679, _680), vec3(_2764, _2765, _2766));
        float _4596 = isnan(0.0) ? _2771 : (isnan(_2771) ? 0.0 : max(_2771, 0.0));
        float _2774 = isnan(1.0) ? _4596 : (isnan(_4596) ? 1.0 : min(_4596, 1.0));
        float _2775 = dot(vec3(cbLight._m0[_2737].xyz), vec3(_2764, _2765, _2766));
        float _4607 = isnan(0.0) ? _2775 : (isnan(_2775) ? 0.0 : max(_2775, 0.0));
        float _2779 = _2756 * _2756;
        float _2783 = ((_2774 * _2774) * (_2779 + (-1.0))) + 1.0;
        float _2790 = exp2(log2(1.0 - (isnan(1.0) ? _4607 : (isnan(_4607) ? 1.0 : min(_4607, 1.0)))) * 5.0);
        float _2797 = 1.0 - _2756;
        float _2807 = (0.5 / (((_2424 * ((_2770 * _2797) + _2756)) + 9.9999999392252902907785028219223e-09) + (((_2424 * _2797) + _2756) * _2770))) * _2770;
        float _4618 = isnan(0.0) ? _2807 : (isnan(_2807) ? 0.0 : max(_2807, 0.0));
        float _2809 = (isnan(1.0) ? _4618 : (isnan(_4618) ? 1.0 : min(_4618, 1.0))) * (_2779 / ((_2783 * _2783) * 3.141590118408203125));
        float _2810 = isnan(1.0) ? _2164 : (isnan(_2164) ? 1.0 : min(_2164, 1.0));
        _2726 = (((((_2790 * _2446) + _829) * cbLight._m0[_2741].x) * _2809) * _2810) + _2616;
        _2728 = (((((_2790 * _2448) + _831) * cbLight._m0[_2741].y) * _2809) * _2810) + _2618;
        _2730 = (((((_2790 * _2449) + _832) * cbLight._m0[_2741].z) * _2809) * _2810) + _2620;
    }
    float _2876;
    float _2878;
    float _2880;
    float _2882;
    float _2884;
    float _2886;
    if (_2146.y == 0u)
    {
        uvec4 _2831 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2832 = _2831.x;
        uint _2843 = uint((float(_2831.y) * floor(float(uint(cbSceneParam._m0[85u].y * _767) / _2832))) + floor(float(uint(cbSceneParam._m0[85u].x * _766) / _2832)));
        float _2853 = (log2(_1924 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2854 = isnan(0.0) ? _2853 : (isnan(_2853) ? 0.0 : max(_2853, 0.0));
        uint _2857 = uint(isnan(14.0) ? _2854 : (isnan(_2854) ? 14.0 : min(_2854, 14.0)));
        uvec4 _2862 = texelFetch(g_lightClusterGridBuffer, int(((_2857 << 2u) + (_2843 << 6u)) >> 2u));
        uint _2863 = _2862.x;
        uint _2864 = _2831.z;
        float _2943;
        float _2945;
        float _2947;
        float _2949;
        float _2951;
        float _2953;
        if (((((1u << ((_2864 >> 4u) & 15u)) + 4294967295u) & _2863) == 0u) || ((_2864 & 240u) == 0u))
        {
            _2943 = 0.0;
            _2945 = 0.0;
            _2947 = 0.0;
            _2949 = 0.0;
            _2951 = 0.0;
            _2953 = 0.0;
        }
        else
        {
            float _2944;
            float _2946;
            float _2948;
            float _2950;
            float _2952;
            float _2954;
            float _3087 = 0.0;
            float _3088 = 0.0;
            float _3089 = 0.0;
            float _3090 = 0.0;
            float _3091 = 0.0;
            float _3092 = 0.0;
            uint _3093 = 0u;
            uint _3102;
            bool _3103;
            for (;;)
            {
                _3102 = texelFetch(g_lightClassification, int((((_2857 << 5u) + (_2843 << 9u)) + (_3093 << 2u)) >> 2u)).x;
                _3103 = _3102 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3103)
                {
                    frontier_phi_66_pred = _3092;
                    frontier_phi_66_pred_1 = _3091;
                    frontier_phi_66_pred_2 = _3090;
                    frontier_phi_66_pred_3 = _3089;
                    frontier_phi_66_pred_4 = _3088;
                    frontier_phi_66_pred_5 = _3087;
                }
                else
                {
                    float _3211;
                    float _3212;
                    float _3213;
                    float _3214;
                    float _3215;
                    float _3216;
                    uint _3217;
                    _3211 = _3087;
                    _3212 = _3088;
                    _3213 = _3089;
                    _3214 = _3090;
                    _3215 = _3091;
                    _3216 = _3092;
                    _3217 = _3102;
                    float _3143;
                    float _3144;
                    float _3145;
                    float _3146;
                    float _3147;
                    float _3148;
                    for (;;)
                    {
                        uint _3221 = uint(findLSB(_3217)) + (_3093 << 5u);
                        uint _3218 = (_3217 + 4294967295u) & _3217;
                        uint _3223 = _3221 * 48u;
                        vec4 _3237 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3223)).x, texelFetch(g_PointLightRenderingBuffer, int(_3223 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3223 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3223 + 3u)).x));
                        uint _3243 = (_3221 * 48u) + 4u;
                        vec4 _3256 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3243)).x, texelFetch(g_PointLightRenderingBuffer, int(_3243 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3243 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3243 + 3u)).x));
                        uint _3262 = (_3221 * 48u) + 8u;
                        vec3 _3273 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3262)).x, texelFetch(g_PointLightRenderingBuffer, int(_3262 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3262 + 2u)).x));
                        float _3277 = _3237.x - _1922;
                        float _3278 = _3237.y - _1923;
                        float _3279 = _3237.z - _1924;
                        float _3280 = dot(vec3(_3277, _3278, _3279), vec3(_3277, _3278, _3279));
                        float _3283 = inversesqrt(_3280);
                        float _3284 = _3283 * _3277;
                        float _3285 = _3283 * _3278;
                        float _3286 = _3283 * _3279;
                        float _3287 = dot(vec3(_785, _788, _791), vec3(_3284, _3285, _3286));
                        float _3292 = 1.0 - (_3280 * _3237.w);
                        float _4644 = isnan(0.0) ? _3292 : (isnan(_3292) ? 0.0 : max(_3292, 0.0));
                        float _3293 = isnan(1.0) ? _4644 : (isnan(_4644) ? 1.0 : min(_4644, 1.0));
                        float _3294 = sqrt(_3280) * _3256.w;
                        float _3297 = 1.39999997615814208984375 / (_3294 + 1.39999997615814208984375);
                        float _3298 = _3297 * _3297;
                        float _3301 = ((1.0 - _3298) * _3287) + _3298;
                        float _3304 = _3294 * _3294;
                        float _3308 = ((isnan(0.0) ? _3301 : (isnan(_3301) ? 0.0 : max(_3301, 0.0))) * _3293) / ((_3304 * 0.699999988079071044921875) + 1.0);
                        float _3312 = (-0.0) - _1922;
                        float _3313 = (-0.0) - _1923;
                        float _3314 = (-0.0) - _1924;
                        float _3318 = inversesqrt(dot(vec3(_3312, _3313, _3314), vec3(_3312, _3313, _3314)));
                        float _3319 = _3318 * _3312;
                        float _3320 = _3318 * _3313;
                        float _3321 = _3318 * _3314;
                        float _3328 = exp2(log2(1.0 / ((_3304 * 3.5) + 5.0)) * 0.25);
                        float _3329 = 1.0 - _860;
                        float _3336 = sqrt(1.0 - ((1.0 - (_3329 * _3329)) * (1.0 - (_3328 * _3328))));
                        float _3337 = _3336 * _3336;
                        float _3338 = _3337 * _3337;
                        float _3339 = _3319 + _3284;
                        float _3340 = _3320 + _3285;
                        float _3341 = _3321 + _3286;
                        float _3345 = inversesqrt(dot(vec3(_3339, _3340, _3341), vec3(_3339, _3340, _3341)));
                        float _3349 = dot(vec3(_785, _788, _791), vec3(_3319, _3320, _3321));
                        float _4660 = isnan(0.0) ? _3349 : (isnan(_3349) ? 0.0 : max(_3349, 0.0));
                        float _3352 = isnan(1.0) ? _4660 : (isnan(_4660) ? 1.0 : min(_4660, 1.0));
                        float _3353 = dot(vec3(_785, _788, _791), vec3(_3345 * _3339, _3345 * _3340, _3345 * _3341));
                        float _4671 = isnan(0.0) ? _3353 : (isnan(_3353) ? 0.0 : max(_3353, 0.0));
                        float _3356 = isnan(1.0) ? _4671 : (isnan(_4671) ? 1.0 : min(_4671, 1.0));
                        float _3360 = ((_3356 * _3356) * (_3338 + (-1.0))) + 1.0;
                        float _3361 = _3297 * _3337;
                        float _3362 = _3361 * _3361;
                        float _3365 = ((1.0 - _3362) * _3287) + _3362;
                        float _4682 = isnan(0.0) ? _3365 : (isnan(_3365) ? 0.0 : max(_3365, 0.0));
                        float _3366 = isnan(1.0) ? _4682 : (isnan(_4682) ? 1.0 : min(_4682, 1.0));
                        float _3367 = 1.0 - _3337;
                        float _3377 = (0.5 / (((_3366 * ((_3352 * _3367) + _3337)) + 9.9999999392252902907785028219223e-09) + (((_3366 * _3367) + _3337) * _3352))) * _3366;
                        float _4693 = isnan(0.0) ? _3377 : (isnan(_3377) ? 0.0 : max(_3377, 0.0));
                        float _3388 = (((_3338 * 3.1415927410125732421875) * (isnan(1.0) ? _4693 : (isnan(_4693) ? 1.0 : min(_4693, 1.0)))) / ((_3360 * _3360) * ((_3304 * 2.1991131305694580078125) + 3.141590118408203125))) * _3293;
                        _3146 = (_3308 * _3256.x) + _3214;
                        _3147 = (_3308 * _3256.y) + _3215;
                        _3148 = (_3308 * _3256.z) + _3216;
                        _3143 = (_3388 * _3273.x) + _3211;
                        _3144 = (_3388 * _3273.y) + _3212;
                        _3145 = (_3388 * _3273.z) + _3213;
                        if (_3218 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3211 = _3143;
                            _3212 = _3144;
                            _3213 = _3145;
                            _3214 = _3146;
                            _3215 = _3147;
                            _3216 = _3148;
                            _3217 = _3218;
                        }
                    }
                    frontier_phi_66_pred = _3148;
                    frontier_phi_66_pred_1 = _3147;
                    frontier_phi_66_pred_2 = _3146;
                    frontier_phi_66_pred_3 = _3145;
                    frontier_phi_66_pred_4 = _3144;
                    frontier_phi_66_pred_5 = _3143;
                }
                _2954 = frontier_phi_66_pred;
                _2952 = frontier_phi_66_pred_1;
                _2950 = frontier_phi_66_pred_2;
                _2948 = frontier_phi_66_pred_3;
                _2946 = frontier_phi_66_pred_4;
                _2944 = frontier_phi_66_pred_5;
                uint _3094 = _3093 + 1u;
                if (_3094 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3087 = _2944;
                    _3088 = _2946;
                    _3089 = _2948;
                    _3090 = _2950;
                    _3091 = _2952;
                    _3092 = _2954;
                    _3093 = _3094;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2943 = _2944;
            _2945 = _2946;
            _2947 = _2948;
            _2949 = _2950;
            _2951 = _2952;
            _2953 = _2954;
        }
        uvec4 _2957 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2958 = _2957.z;
        uint _2960 = (_2958 >> 8u) & 15u;
        float _3055;
        float _3057;
        float _3059;
        float _3061;
        float _3063;
        float _3065;
        if (((4294967295u << _2960) & _2863) == 0u)
        {
            _3055 = _2943;
            _3057 = _2945;
            _3059 = _2947;
            _3061 = _2949;
            _3063 = _2951;
            _3065 = _2953;
        }
        else
        {
            float _3080 = inversesqrt(dot(vec3(_1922, _1923, _1924), vec3(_1922, _1923, _1924)));
            float _3081 = _3080 * _1922;
            float _3082 = _3080 * _1923;
            float _3083 = _3080 * _1924;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2960 < ((_2958 >> 12u) & 15u))
            {
                float _3056;
                float _3058;
                float _3060;
                float _3062;
                float _3064;
                float _3066;
                float _3194 = _2943;
                float _3195 = _2945;
                float _3196 = _2947;
                float _3197 = _2949;
                float _3198 = _2951;
                float _3199 = _2953;
                uint _3200 = _2960;
                uint _3209;
                bool _3210;
                for (;;)
                {
                    _3209 = texelFetch(g_lightClassification, int((((_2857 << 5u) + (_2843 << 9u)) + (_3200 << 2u)) >> 2u)).x;
                    _3210 = _3209 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3210)
                    {
                        frontier_phi_72_pred = _3199;
                        frontier_phi_72_pred_1 = _3198;
                        frontier_phi_72_pred_2 = _3197;
                        frontier_phi_72_pred_3 = _3196;
                        frontier_phi_72_pred_4 = _3195;
                        frontier_phi_72_pred_5 = _3194;
                    }
                    else
                    {
                        float _3393;
                        float _3394;
                        float _3395;
                        float _3396;
                        float _3397;
                        float _3398;
                        float _3687;
                        float _3688;
                        float _3689;
                        float _3690;
                        float _3691;
                        float _3692;
                        float _3406 = _3194;
                        float _3407 = _3195;
                        float _3408 = _3196;
                        float _3409 = _3197;
                        float _3410 = _3198;
                        float _3411 = _3199;
                        uint _3412 = _3209;
                        uint _3413;
                        vec4 _3438;
                        float _3439;
                        vec4 _3454;
                        vec3 _3466;
                        vec4 _3481;
                        vec4 _3496;
                        float _3543;
                        bool _3544;
                        for (;;)
                        {
                            uint _3423 = ((_3200 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3412));
                            _3413 = (_3412 + 4294967295u) & _3412;
                            uint _3425 = _3423 * 40u;
                            _3438 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3425)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3425 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3425 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3425 + 3u)).x));
                            _3439 = _3438.w;
                            uint _3441 = (_3423 * 40u) + 4u;
                            _3454 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3441)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3441 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3441 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3441 + 3u)).x));
                            uint _3456 = (_3423 * 40u) + 8u;
                            _3466 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3456)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3456 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3456 + 2u)).x));
                            uint _3468 = (_3423 * 40u) + 16u;
                            _3481 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3468)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3468 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3468 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3468 + 3u)).x));
                            uint _3483 = (_3423 * 40u) + 20u;
                            _3496 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3483)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3483 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3483 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3483 + 3u)).x));
                            uint _3499 = (_3423 * 40u) + 24u;
                            vec4 _3512 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3499)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3499 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3499 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3499 + 3u)).x));
                            uint _3518 = (_3423 * 40u) + 28u;
                            vec4 _3531 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3518)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3518 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3518 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3518 + 3u)).x));
                            _3543 = fma(_1924, _3531.z, fma(_1923, _3531.y, _3531.x * _1922)) + _3531.w;
                            _3544 = !((fma(_1924, _3512.z, fma(_1923, _3512.y, _3512.x * _1922)) + _3512.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3544)
                            {
                                float _3571 = _3438.x - _1922;
                                float _3572 = _3438.y - _1923;
                                float _3573 = _3438.z - _1924;
                                float _3574 = dot(vec3(_3571, _3572, _3573), vec3(_3571, _3572, _3573));
                                float _3577 = inversesqrt(_3574);
                                float _3578 = _3577 * _3571;
                                float _3579 = _3577 * _3572;
                                float _3580 = _3577 * _3573;
                                float _3584 = 1.0 - (_3574 / (_3439 * _3439));
                                float _4704 = isnan(0.0) ? _3584 : (isnan(_3584) ? 0.0 : max(_3584, 0.0));
                                float _3585 = isnan(1.0) ? _4704 : (isnan(_4704) ? 1.0 : min(_4704, 1.0));
                                float _3589 = sqrt(_3574) * _3454.w;
                                float _3591 = 1.39999997615814208984375 / (_3589 + 1.39999997615814208984375);
                                float _3592 = _3591 * _3591;
                                float _3595 = ((1.0 - _3592) * dot(vec3(_3578, _3579, _3580), vec3(_785, _788, _791))) + _3592;
                                float _3598 = _3589 * _3589;
                                float _3602 = (fma(_1924, _3481.z, fma(_1923, _3481.y, _3481.x * _1922)) + _3481.w) / _3543;
                                float _3603 = (fma(_1924, _3496.z, fma(_1923, _3496.y, _3496.x * _1922)) + _3496.w) / _3543;
                                float _3607 = 1.0 - dot(vec2(_3602, _3603), vec2(_3602, _3603));
                                float _4720 = isnan(0.0) ? _3607 : (isnan(_3607) ? 0.0 : max(_3607, 0.0));
                                float _3608 = isnan(1.0) ? _4720 : (isnan(_4720) ? 1.0 : min(_4720, 1.0));
                                float _3609 = _3608 * (((isnan(0.0) ? _3595 : (isnan(_3595) ? 0.0 : max(_3595, 0.0))) * _3585) / ((_3598 * 0.699999988079071044921875) + 1.0));
                                float _3621 = exp2(log2(1.0 / ((_3598 * 3.5) + 5.0)) * 0.25);
                                float _3622 = 1.0 - _860;
                                float _3629 = sqrt(1.0 - ((1.0 - (_3622 * _3622)) * (1.0 - (_3621 * _3621))));
                                float _3630 = _3629 * _3629;
                                float _3631 = _3630 * _3630;
                                float _3632 = _3578 - _3081;
                                float _3633 = _3579 - _3082;
                                float _3634 = _3580 - _3083;
                                float _3638 = inversesqrt(dot(vec3(_3632, _3633, _3634), vec3(_3632, _3633, _3634)));
                                float _3642 = dot(vec3(_785, _788, _791), vec3((-0.0) - _3081, (-0.0) - _3082, (-0.0) - _3083));
                                float _4731 = isnan(0.0) ? _3642 : (isnan(_3642) ? 0.0 : max(_3642, 0.0));
                                float _3645 = isnan(1.0) ? _4731 : (isnan(_4731) ? 1.0 : min(_4731, 1.0));
                                float _3646 = dot(vec3(_785, _788, _791), vec3(_3638 * _3632, _3638 * _3633, _3638 * _3634));
                                float _4742 = isnan(0.0) ? _3646 : (isnan(_3646) ? 0.0 : max(_3646, 0.0));
                                float _3649 = isnan(1.0) ? _4742 : (isnan(_4742) ? 1.0 : min(_4742, 1.0));
                                float _3653 = ((_3649 * _3649) * (_3631 + (-1.0))) + 1.0;
                                float _3654 = _3591 * _3630;
                                float _3655 = _3654 * _3654;
                                float _3661 = ((1.0 - _3655) * dot(vec3(_785, _788, _791), vec3(_3578, _3579, _3580))) + _3655;
                                float _4753 = isnan(0.0) ? _3661 : (isnan(_3661) ? 0.0 : max(_3661, 0.0));
                                float _3662 = isnan(1.0) ? _4753 : (isnan(_4753) ? 1.0 : min(_4753, 1.0));
                                float _3663 = 1.0 - _3630;
                                float _3673 = (0.5 / (((_3662 * ((_3645 * _3663) + _3630)) + 9.9999999392252902907785028219223e-09) + (((_3662 * _3663) + _3630) * _3645))) * _3662;
                                float _4764 = isnan(0.0) ? _3673 : (isnan(_3673) ? 0.0 : max(_3673, 0.0));
                                float _3683 = (_3608 * _3585) * (((_3631 * 3.1415927410125732421875) * (isnan(1.0) ? _4764 : (isnan(_4764) ? 1.0 : min(_4764, 1.0)))) / ((_3653 * _3653) * ((_3598 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3609 * _3454.y;
                                frontier_phi_78_pred_1 = _3609 * _3454.x;
                                frontier_phi_78_pred_2 = _3683 * _3466.z;
                                frontier_phi_78_pred_3 = _3683 * _3466.y;
                                frontier_phi_78_pred_4 = _3683 * _3466.x;
                                frontier_phi_78_pred_5 = _3609 * _3454.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3691 = frontier_phi_78_pred;
                            _3690 = frontier_phi_78_pred_1;
                            _3689 = frontier_phi_78_pred_2;
                            _3688 = frontier_phi_78_pred_3;
                            _3687 = frontier_phi_78_pred_4;
                            _3692 = frontier_phi_78_pred_5;
                            _3396 = _3690 + _3409;
                            _3397 = _3691 + _3410;
                            _3398 = _3692 + _3411;
                            _3393 = _3687 + _3406;
                            _3394 = _3688 + _3407;
                            _3395 = _3689 + _3408;
                            if (_3413 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3406 = _3393;
                                _3407 = _3394;
                                _3408 = _3395;
                                _3409 = _3396;
                                _3410 = _3397;
                                _3411 = _3398;
                                _3412 = _3413;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3398;
                        frontier_phi_72_pred_1 = _3397;
                        frontier_phi_72_pred_2 = _3396;
                        frontier_phi_72_pred_3 = _3395;
                        frontier_phi_72_pred_4 = _3394;
                        frontier_phi_72_pred_5 = _3393;
                    }
                    _3066 = frontier_phi_72_pred;
                    _3064 = frontier_phi_72_pred_1;
                    _3062 = frontier_phi_72_pred_2;
                    _3060 = frontier_phi_72_pred_3;
                    _3058 = frontier_phi_72_pred_4;
                    _3056 = frontier_phi_72_pred_5;
                    uint _3201 = _3200 + 1u;
                    if (_3201 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3194 = _3056;
                        _3195 = _3058;
                        _3196 = _3060;
                        _3197 = _3062;
                        _3198 = _3064;
                        _3199 = _3066;
                        _3200 = _3201;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3066;
                frontier_phi_60_61_ladder_1 = _3064;
                frontier_phi_60_61_ladder_2 = _3060;
                frontier_phi_60_61_ladder_3 = _3058;
                frontier_phi_60_61_ladder_4 = _3056;
                frontier_phi_60_61_ladder_5 = _3062;
            }
            else
            {
                frontier_phi_60_61_ladder = _2953;
                frontier_phi_60_61_ladder_1 = _2951;
                frontier_phi_60_61_ladder_2 = _2947;
                frontier_phi_60_61_ladder_3 = _2945;
                frontier_phi_60_61_ladder_4 = _2943;
                frontier_phi_60_61_ladder_5 = _2949;
            }
            _3055 = frontier_phi_60_61_ladder_4;
            _3057 = frontier_phi_60_61_ladder_3;
            _3059 = frontier_phi_60_61_ladder_2;
            _3061 = frontier_phi_60_61_ladder_5;
            _3063 = frontier_phi_60_61_ladder_1;
            _3065 = frontier_phi_60_61_ladder;
        }
        float _3070 = isnan(1.0) ? _844 : (isnan(_844) ? 1.0 : min(_844, 1.0));
        _2876 = (_3070 * _3061) + _2388;
        _2878 = (_3070 * _3063) + _2390;
        _2880 = (_3070 * _3065) + _2392;
        _2882 = ((_3055 * _829) * _3070) + _2726;
        _2884 = ((_3057 * _831) * _3070) + _2728;
        _2886 = ((_3059 * _832) * _3070) + _2730;
    }
    else
    {
        _2876 = _2388;
        _2878 = _2390;
        _2880 = _2392;
        _2882 = _2726;
        _2884 = _2728;
        _2886 = _2730;
    }
    float _4780 = isnan(0.0) ? _819 : (isnan(_819) ? 0.0 : max(_819, 0.0));
    float _4791 = isnan(0.0) ? _820 : (isnan(_820) ? 0.0 : max(_820, 0.0));
    float _4802 = isnan(0.0) ? _821 : (isnan(_821) ? 0.0 : max(_821, 0.0));
    uint _2906 = _804 + 6u;
    float _2914 = _766 / cbSceneParam._m0[86u].x;
    float _2915 = _767 / cbSceneParam._m0[86u].y;
    vec4 _2929 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2914, _2915, (log2((isnan(cbSceneParam._m0[77u].w) ? _701 : (isnan(_701) ? cbSceneParam._m0[77u].w : min(_701, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2931 = _2929.x;
    float _2932 = _2929.y;
    float _2933 = _2929.z;
    float _2934 = _2929.w;
    float _3005;
    float _3007;
    float _3009;
    float _3011;
    if (_701 > cbSceneParam._m0[78u].w)
    {
        float _2968 = isnan(_701) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _701 : min(cbSceneParam._m0[80u].w, _701));
        float _2969 = _2968 / _701;
        float _2980 = _2969 * _751;
        float _2981 = _752 * _2969;
        float _2982 = (-0.0) - _2981;
        float _2983 = _2969 * _753;
        float _2985 = (cbSceneParam._m0[77u].w * _2982) / _2968;
        float _2986 = _2985 + cbSceneParam._m0[79u].w;
        float _2987 = cbSceneParam._m0[79u].w - _2981;
        float _2993 = sqrt(((_2980 * _2980) + (_2981 * _2981)) + (_2983 * _2983));
        float _2996 = (1.0 - (cbSceneParam._m0[77u].w / _2968)) * _2993;
        float _3001 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3003 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3156;
        if (abs((_2982 - _2985) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3156 = ((((_2986 > 0.0) ? exp2(_3001 * _2986) : (2.0 - exp2(_3003 * _2986))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2996;
        }
        else
        {
            float _3116 = 1.0 / cbSceneParam._m0[80u].x;
            float _3117 = isnan(_2987) ? _2986 : (isnan(_2986) ? _2987 : max(_2986, _2987));
            float _3118 = isnan(_2987) ? _2986 : (isnan(_2986) ? _2987 : min(_2986, _2987));
            float _3127 = isnan(0.0) ? _3117 : (isnan(_3117) ? 0.0 : min(_3117, 0.0));
            float _3128 = isnan(0.0) ? _3118 : (isnan(_3118) ? 0.0 : min(_3118, 0.0));
            _3156 = ((abs(_2993 / _2982) * cbSceneParam._m0[80u].y) * ((((_3127 - _3128) * 2.0) - ((exp2(_3001 * (isnan(0.0) ? _3117 : (isnan(_3117) ? 0.0 : max(_3117, 0.0)))) - exp2(_3001 * (isnan(0.0) ? _3118 : (isnan(_3118) ? 0.0 : max(_3118, 0.0))))) * _3116)) - ((exp2(_3003 * _3127) - exp2(_3003 * _3128)) * _3116))) + (_2996 * cbSceneParam._m0[80u].z);
        }
        vec4 _3158 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2914, _2915, 1.0), 0.0);
        float _3167 = exp2((_3156 * (-1.44269502162933349609375)) * (1.0 - _3158.w));
        float _3168 = log2(_3167);
        float _3184 = log2(_2934);
        _3005 = (exp2(_3184 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3168 * cbSceneParam._m0[78u].x)) * _3158.x) / cbSceneParam._m0[78u].x)) + _2931;
        _3007 = (exp2(_3184 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3168 * cbSceneParam._m0[78u].y)) * _3158.y) / cbSceneParam._m0[78u].y)) + _2932;
        _3009 = (exp2(_3184 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3168 * cbSceneParam._m0[78u].z)) * _3158.z) / cbSceneParam._m0[78u].z)) + _2933;
        _3011 = _3167 * _2934;
    }
    else
    {
        _3005 = _2931;
        _3007 = _2932;
        _3009 = _2933;
        _3011 = _2934;
    }
    float _3023 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3024 = _3023 == 3.0;
    float _3025 = log2(_3011);
    float _3032 = exp2(_3025 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4780 : (isnan(_4780) ? 1.0 : min(_4780, 1.0))) * (_2876 + ((isnan(0.0) ? _1575 : (isnan(_1575) ? 0.0 : max(_1575, 0.0))) * _844))) + ((_2882 + ((isnan(0.0) ? _1869 : (isnan(_1869) ? 0.0 : max(_1869, 0.0))) * _1654)) * cbPerFrame._m0[3u].x));
    float _3033 = exp2(_3025 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4791 : (isnan(_4791) ? 1.0 : min(_4791, 1.0))) * (_2878 + ((isnan(0.0) ? _1578 : (isnan(_1578) ? 0.0 : max(_1578, 0.0))) * _844))) + ((_2884 + ((isnan(0.0) ? _1872 : (isnan(_1872) ? 0.0 : max(_1872, 0.0))) * _1654)) * cbPerFrame._m0[3u].x));
    float _3034 = exp2(_3025 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4802 : (isnan(_4802) ? 1.0 : min(_4802, 1.0))) * (_2880 + ((isnan(0.0) ? _1581 : (isnan(_1581) ? 0.0 : max(_1581, 0.0))) * _844))) + ((_2886 + ((isnan(0.0) ? _1875 : (isnan(_1875) ? 0.0 : max(_1875, 0.0))) * _1654)) * cbPerFrame._m0[3u].x));
    float _3043 = (_3023 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3043 * (_3024 ? _3032 : (_3032 + (cbSceneParam._m0[72u].w * _3005)));
    SV_Target.y = _3043 * (_3024 ? _3033 : (_3033 + (cbSceneParam._m0[72u].w * _3007)));
    SV_Target.z = _3043 * (_3024 ? _3034 : (_3034 + (cbSceneParam._m0[72u].w * _3009)));
    SV_Target.w = cbInstanceData._m0[_2906].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2906].w;
}


