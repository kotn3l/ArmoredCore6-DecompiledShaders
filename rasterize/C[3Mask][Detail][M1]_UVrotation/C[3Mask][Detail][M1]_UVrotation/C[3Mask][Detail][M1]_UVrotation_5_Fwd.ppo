#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[20];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_19;
layout(set = 0, binding = 11) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_3;
layout(set = 0, binding = 14) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_5;
layout(set = 0, binding = 15) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_6;
layout(set = 0, binding = 16) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_7;
layout(set = 0, binding = 17) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_8;
layout(set = 0, binding = 2) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_11;
layout(set = 0, binding = 5) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_14;
layout(set = 0, binding = 6) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_15;
layout(set = 0, binding = 7) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_16;
layout(set = 0, binding = 8) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_17;
layout(set = 0, binding = 9) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_18;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1207;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _199 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _200 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _201 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _207 = inversesqrt(dot(vec3(_199, _200, _201), vec3(_199, _200, _201)));
    float _214 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _221 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _244 = sin(cbMtdParam._m0[18u].x);
    float _245 = cos(cbMtdParam._m0[18u].x);
    float _246 = TEXCOORD.x - cbMtdParam._m0[17u].w;
    float _247 = TEXCOORD.y - cbMtdParam._m0[17u].w;
    float _255 = (cbMtdParam._m0[17u].w + cbMtdParam._m0[19u].y) + fma(_247, (-0.0) - _244, _245 * _246);
    float _257 = (cbMtdParam._m0[17u].w + cbMtdParam._m0[19u].z) + fma(_247, _245, _246 * _244);
    vec4 _270 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * _255) + cbTextureTilingScale._m0[1u].z, (_257 * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w));
    float _276 = _270.x * cbMtdParam._m0[10u].x;
    float _277 = _270.y * cbMtdParam._m0[10u].y;
    float _278 = _270.z * cbMtdParam._m0[10u].z;
    vec4 _296 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w));
    vec4 _315 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_0, SS_WrapLinear), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _340 = cbMtdParam._m0[19u].x * texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.x) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD.y) + cbTextureTilingScale._m0[13u].w)).x;
    float _351 = ((cbMtdParam._m0[15u].x * (-1.39999997615814208984375)) * (((1.0 - _315.x) * 2.0) - _340)) + 1.0;
    float _3536 = isnan(0.0) ? _351 : (isnan(_351) ? 0.0 : max(_351, 0.0));
    float _352 = isnan(1.0) ? _3536 : (isnan(_3536) ? 1.0 : min(_3536, 1.0));
    float _359 = (_352 * ((_296.x * cbMtdParam._m0[11u].x) - _276)) + _276;
    float _360 = (_352 * ((_296.y * cbMtdParam._m0[11u].y) - _277)) + _277;
    float _361 = (_352 * ((_296.z * cbMtdParam._m0[11u].z) - _278)) + _278;
    vec4 _379 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_8, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[17u].x * TEXCOORD.x) + cbTextureTilingScale._m0[17u].z, (cbTextureTilingScale._m0[17u].y * TEXCOORD.y) + cbTextureTilingScale._m0[17u].w));
    float _392 = (((((1.0 - _315.y) * 2.0) - _340) * (-1.39999997615814208984375)) * cbMtdParam._m0[18u].z) + 1.0;
    float _3547 = isnan(0.0) ? _392 : (isnan(_392) ? 0.0 : max(_392, 0.0));
    float _393 = isnan(1.0) ? _3547 : (isnan(_3547) ? 1.0 : min(_3547, 1.0));
    float _400 = (((_379.x * cbMtdParam._m0[12u].x) - _359) * _393) + _359;
    float _401 = (_393 * ((_379.y * cbMtdParam._m0[12u].y) - _360)) + _360;
    float _402 = (_393 * ((_379.z * cbMtdParam._m0[12u].z) - _361)) + _361;
    vec4 _419 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _432 = (((((1.0 - _315.z) * 2.0) - _340) * (-1.39999997615814208984375)) * cbMtdParam._m0[18u].w) + 1.0;
    float _3558 = isnan(0.0) ? _432 : (isnan(_432) ? 0.0 : max(_432, 0.0));
    float _433 = isnan(1.0) ? _3558 : (isnan(_3558) ? 1.0 : min(_3558, 1.0));
    float _440 = (((_419.x * cbMtdParam._m0[13u].x) - _400) * _433) + _400;
    float _441 = (_433 * ((_419.y * cbMtdParam._m0[13u].y) - _401)) + _401;
    float _442 = (_433 * ((_419.z * cbMtdParam._m0[13u].z) - _402)) + _402;
    vec4 _455 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * _255) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _257) + cbTextureTilingScale._m0[5u].w));
    float _457 = _455.x;
    float _475 = ((texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w)).x - _457) * _352) + _457;
    float _493 = ((texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w)).x - _475) * _393) + _475;
    float _512 = (((texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w)).x - _493) * _433) + _493) * cbMtdParam._m0[18u].y;
    vec4 _525 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[14u].x * _255) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _257) + cbTextureTilingScale._m0[14u].w));
    float _527 = _525.x;
    float _528 = _525.y;
    float _531 = cbMtdParam._m0[17u].y * _525.z;
    vec4 _543 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * TEXCOORD.x) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * TEXCOORD.y) + cbTextureTilingScale._m0[15u].w));
    float _552 = (((cbMtdParam._m0[17u].x * _543.z) - _531) * _352) + _531;
    vec4 _565 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_15, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _577 = (((cbMtdParam._m0[16u].w * _565.z) - _552) * _393) + _552;
    vec4 _590 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _599 = (((cbMtdParam._m0[16u].z * _590.z) - _577) * _433) + _577;
    vec4 _612 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[16u].x * TEXCOORD.x) + cbTextureTilingScale._m0[16u].z, (cbTextureTilingScale._m0[16u].y * TEXCOORD.y) + cbTextureTilingScale._m0[16u].w));
    float _625 = ((_543.x - _527) * _352) + _527;
    float _626 = ((_543.y - _528) * _352) + _528;
    float _631 = ((_565.x - _625) * _393) + _625;
    float _632 = ((_565.y - _626) * _393) + _626;
    float _641 = ((((_590.x - _631) * _433) + _631) * 2.0) + (-1.0);
    float _642 = ((((_590.y - _632) * _433) + _632) * 2.0) + (-1.0);
    float _643 = dot(vec2(_641, _642), vec2(_641, _642));
    float _3569 = isnan(0.0) ? _643 : (isnan(_643) ? 0.0 : max(_643, 0.0));
    float _648 = sqrt(1.0 - (isnan(1.0) ? _3569 : (isnan(_3569) ? 1.0 : min(_3569, 1.0))));
    float _651 = (((_612.x * 2.0) + (-1.0)) * cbMtdParam._m0[16u].y) + _641;
    float _652 = (((_612.y * 2.0) + (-1.0)) * cbMtdParam._m0[16u].y) + _642;
    float _655 = fma(_648, _214 * NORMAL.x, fma(_652, _221 * TANGENT.x, (_207 * _199) * _651));
    float _658 = fma(_648, _214 * NORMAL.y, fma(_652, _221 * TANGENT.y, (_207 * _200) * _651));
    float _661 = fma(_648, _214 * NORMAL.z, fma(_652, _221 * TANGENT.z, (_207 * _201) * _651));
    float _665 = inversesqrt(dot(vec3(_655, _658, _661), vec3(_655, _658, _661)));
    float _666 = _665 * _655;
    float _667 = _665 * _658;
    float _668 = _665 * _661;
    float _3580 = isnan(0.0) ? _599 : (isnan(_599) ? 0.0 : max(_599, 0.0));
    float _669 = isnan(1.0) ? _3580 : (isnan(_3580) ? 1.0 : min(_3580, 1.0));
    float _3591 = isnan(0.0) ? _440 : (isnan(_440) ? 0.0 : max(_440, 0.0));
    float _3602 = isnan(0.0) ? _441 : (isnan(_441) ? 0.0 : max(_441, 0.0));
    float _3613 = isnan(0.0) ? _442 : (isnan(_442) ? 0.0 : max(_442, 0.0));
    float _3624 = isnan(0.0) ? _512 : (isnan(_512) ? 0.0 : max(_512, 0.0));
    float _673 = isnan(1.0) ? _3624 : (isnan(_3624) ? 1.0 : min(_3624, 1.0));
    float _689 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _729 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _739 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _729);
    float _740 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _729);
    float _741 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _729);
    float _745 = inversesqrt(dot(vec3(_739, _740, _741), vec3(_739, _740, _741)));
    float _746 = _739 * _745;
    float _747 = _740 * _745;
    float _748 = _741 * _745;
    float _754 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _755 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _773 = fma(_668, cbSceneParam._m0[5u].z, fma(_667, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _666));
    float _776 = fma(_668, cbSceneParam._m0[6u].z, fma(_667, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _666));
    float _779 = fma(_668, cbSceneParam._m0[7u].z, fma(_667, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _666));
    uint _792 = uint(roundEven(NORMAL.w)) * 13u;
    uint _794 = (_792 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _800 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3591 : (isnan(_3591) ? 1.0 : min(_3591, 1.0)))) * cbInstanceData._m0[_794].x;
    float _801 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3602 : (isnan(_3602) ? 1.0 : min(_3602, 1.0)))) * cbInstanceData._m0[_794].y;
    float _802 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3613 : (isnan(_3613) ? 1.0 : min(_3613, 1.0)))) * cbInstanceData._m0[_794].z;
    float _3635 = isnan(0.0) ? _800 : (isnan(_800) ? 0.0 : max(_800, 0.0));
    float _803 = isnan(1.0) ? _3635 : (isnan(_3635) ? 1.0 : min(_3635, 1.0));
    float _3646 = isnan(0.0) ? _801 : (isnan(_801) ? 0.0 : max(_801, 0.0));
    float _804 = isnan(1.0) ? _3646 : (isnan(_3646) ? 1.0 : min(_3646, 1.0));
    float _3657 = isnan(0.0) ? _802 : (isnan(_802) ? 0.0 : max(_802, 0.0));
    float _805 = isnan(1.0) ? _3657 : (isnan(_3657) ? 1.0 : min(_3657, 1.0));
    float _806 = 1.0 - _673;
    float _807 = _803 * _806;
    float _808 = _804 * _806;
    float _809 = _805 * _806;
    float _814 = (_803 + (-0.039999999105930328369140625)) * _673;
    float _815 = (_804 + (-0.039999999105930328369140625)) * _673;
    float _816 = (_805 + (-0.039999999105930328369140625)) * _673;
    float _817 = _814 + 0.039999999105930328369140625;
    float _819 = _815 + 0.039999999105930328369140625;
    float _820 = _816 + 0.039999999105930328369140625;
    vec4 _829 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _754, cbSceneParam._m0[86u].y * _755));
    float _832 = _829.x * TEXCOORD_5.w;
    float _833 = dot(vec3(_666, _667, _668), vec3(_746, _747, _748));
    float _836 = _833 * 2.0;
    float _840 = (_836 * _666) - _746;
    float _841 = (_836 * _667) - _747;
    float _842 = (_836 * _668) - _748;
    float _846 = abs(dot(vec3(_746, _747, _748), vec3(_666, _667, _668)));
    float _3668 = isnan(0.0) ? _846 : (isnan(_846) ? 0.0 : max(_846, 0.0));
    float _848 = sqrt(_669);
    float _861 = exp2((_848 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3668 : (isnan(_3668) ? 1.0 : min(_3668, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_848 * 3.0));
    float _867 = (1.0 - _861) * ((_848 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _868 = _861 * _848;
    float _896 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _900 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _904 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1206;
    float _1208;
    float _1209;
    float _1210;
    float _1211;
    float _1212;
    float _1213;
    float _1214;
    float _1215;
    float _1216;
    float _1217;
    float _1218;
    float _1219;
    float _1220;
    float _1221;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _931 = fma(_904, cbModelParam._m0[26u].z, fma(_900, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _896));
        float _935 = fma(_904, cbModelParam._m0[27u].z, fma(_900, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _896));
        float _939 = fma(_904, cbModelParam._m0[28u].z, fma(_900, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _896));
        float _964 = _896 + _666;
        float _965 = _900 + _667;
        float _966 = _904 + _668;
        float _976 = fma(_966, cbModelParam._m0[26u].z, fma(_965, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _964)) - _931;
        float _977 = fma(_966, cbModelParam._m0[27u].z, fma(_965, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _964)) - _935;
        float _978 = fma(_966, cbModelParam._m0[28u].z, fma(_965, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _964)) - _939;
        float _982 = inversesqrt(dot(vec3(_976, _977, _978), vec3(_976, _977, _978)));
        float _995 = ((_982 * _976) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_931 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _996 = ((_982 * _977) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_935 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _997 = ((_982 * _978) / cbModelParam._m0[34u].z) + ((((((_939 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1000 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_995, _996, _997), 0.0);
        vec4 _1007 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_995, _996, _997), 0.0);
        vec4 _1014 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_995, _996, _997), 0.0);
        vec4 _1021 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_995, _996, _997), 0.0);
        float _1034 = exp2((_1000.w + (-0.5)) * 20.0) * 2.0;
        float _1035 = _1034 * (_1000.x + (-0.5));
        float _1036 = _1034 * (_1000.y + (-0.5));
        float _1037 = _1034 * (_1000.z + (-0.5));
        float _1044 = exp2((_1007.w + (-0.5)) * 20.0) * 2.0;
        float _1045 = _1044 * (_1007.x + (-0.5));
        float _1046 = _1044 * (_1007.y + (-0.5));
        float _1047 = _1044 * (_1007.z + (-0.5));
        float _1054 = exp2((_1014.w + (-0.5)) * 20.0) * 2.0;
        float _1055 = _1054 * (_1014.x + (-0.5));
        float _1056 = _1054 * (_1014.y + (-0.5));
        float _1057 = _1054 * (_1014.z + (-0.5));
        float _1064 = exp2((_1021.w + (-0.5)) * 20.0) * 2.0;
        float _1065 = _1064 * (_1021.x + (-0.5));
        float _1066 = _1064 * (_1021.y + (-0.5));
        float _1067 = _1064 * (_1021.z + (-0.5));
        float _1068 = isnan(0.0) ? _1065 : (isnan(_1065) ? 0.0 : max(_1065, 0.0));
        float _1069 = isnan(0.0) ? _1066 : (isnan(_1066) ? 0.0 : max(_1066, 0.0));
        float _1070 = isnan(0.0) ? _1067 : (isnan(_1067) ? 0.0 : max(_1067, 0.0));
        float _1071 = _1035 * 0.5;
        float _1072 = _1045 * 0.5;
        float _1073 = _1055 * 0.5;
        float _1074 = dot(vec3(_1071, _1072, _1073), vec3(_1071, _1072, _1073));
        float _1079 = (_1074 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1074);
        float _1088 = (dot(vec3(_666, _667, _668), vec3(_1079 * _1071, _1079 * _1072, _1079 * _1073)) + 1.0) * 0.5;
        float _3694 = isnan(0.0) ? _1088 : (isnan(_1088) ? 0.0 : max(_1088, 0.0));
        float _1098 = sqrt(((_1072 * _1072) + (_1071 * _1071)) + (_1073 * _1073)) / (_1068 + 9.9999997473787516355514526367188e-06);
        float _3705 = isnan(0.0) ? _1098 : (isnan(_1098) ? 0.0 : max(_1098, 0.0));
        float _1099 = isnan(1.0) ? _3705 : (isnan(_3705) ? 1.0 : min(_3705, 1.0));
        float _1100 = _1099 * 2.0;
        float _1104 = (1.0 - _1099) / (_1099 + 1.0);
        float _3716 = isnan(0.0) ? _1104 : (isnan(_1104) ? 0.0 : max(_1104, 0.0));
        float _1105 = isnan(1.0) ? _3716 : (isnan(_3716) ? 1.0 : min(_3716, 1.0));
        float _1114 = ((((1.0 - _1105) * (_1100 + 2.0)) * exp2(log2(isnan(1.0) ? _3694 : (isnan(_3694) ? 1.0 : min(_3694, 1.0))) * (_1100 + 1.0))) + _1105) * _1068;
        float _1115 = _1036 * 0.5;
        float _1116 = _1046 * 0.5;
        float _1117 = _1056 * 0.5;
        float _1118 = dot(vec3(_1115, _1116, _1117), vec3(_1115, _1116, _1117));
        float _1123 = (_1118 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1118);
        float _1131 = (dot(vec3(_666, _667, _668), vec3(_1123 * _1115, _1123 * _1116, _1123 * _1117)) + 1.0) * 0.5;
        float _3727 = isnan(0.0) ? _1131 : (isnan(_1131) ? 0.0 : max(_1131, 0.0));
        float _1140 = sqrt(((_1116 * _1116) + (_1115 * _1115)) + (_1117 * _1117)) / (_1069 + 9.9999997473787516355514526367188e-06);
        float _3738 = isnan(0.0) ? _1140 : (isnan(_1140) ? 0.0 : max(_1140, 0.0));
        float _1141 = isnan(1.0) ? _3738 : (isnan(_3738) ? 1.0 : min(_3738, 1.0));
        float _1142 = _1141 * 2.0;
        float _1146 = (1.0 - _1141) / (_1141 + 1.0);
        float _3749 = isnan(0.0) ? _1146 : (isnan(_1146) ? 0.0 : max(_1146, 0.0));
        float _1147 = isnan(1.0) ? _3749 : (isnan(_3749) ? 1.0 : min(_3749, 1.0));
        float _1156 = ((((1.0 - _1147) * (_1142 + 2.0)) * exp2(log2(isnan(1.0) ? _3727 : (isnan(_3727) ? 1.0 : min(_3727, 1.0))) * (_1142 + 1.0))) + _1147) * _1069;
        float _1157 = _1037 * 0.5;
        float _1158 = _1047 * 0.5;
        float _1159 = _1057 * 0.5;
        float _1160 = dot(vec3(_1157, _1158, _1159), vec3(_1157, _1158, _1159));
        float _1165 = (_1160 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1160);
        float _1173 = (dot(vec3(_666, _667, _668), vec3(_1165 * _1157, _1165 * _1158, _1165 * _1159)) + 1.0) * 0.5;
        float _3760 = isnan(0.0) ? _1173 : (isnan(_1173) ? 0.0 : max(_1173, 0.0));
        float _1182 = sqrt(((_1158 * _1158) + (_1157 * _1157)) + (_1159 * _1159)) / (_1070 + 9.9999997473787516355514526367188e-06);
        float _3771 = isnan(0.0) ? _1182 : (isnan(_1182) ? 0.0 : max(_1182, 0.0));
        float _1183 = isnan(1.0) ? _3771 : (isnan(_3771) ? 1.0 : min(_3771, 1.0));
        float _1184 = _1183 * 2.0;
        float _1188 = (1.0 - _1183) / (_1183 + 1.0);
        float _3782 = isnan(0.0) ? _1188 : (isnan(_1188) ? 0.0 : max(_1188, 0.0));
        float _1189 = isnan(1.0) ? _3782 : (isnan(_3782) ? 1.0 : min(_3782, 1.0));
        float _1198 = ((((1.0 - _1189) * (_1184 + 2.0)) * exp2(log2(isnan(1.0) ? _3760 : (isnan(_3760) ? 1.0 : min(_3760, 1.0))) * (_1184 + 1.0))) + _1189) * _1070;
        _1206 = _1037;
        _1208 = _1036;
        _1209 = _1035;
        _1210 = _1047;
        _1211 = _1046;
        _1212 = _1045;
        _1213 = _1057;
        _1214 = _1056;
        _1215 = _1055;
        _1216 = _1070;
        _1217 = _1069;
        _1218 = _1068;
        _1219 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1114 : (isnan(_1114) ? 0.0 : max(_1114, 0.0)));
        _1220 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1156 : (isnan(_1156) ? 0.0 : max(_1156, 0.0)));
        _1221 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1198 : (isnan(_1198) ? 0.0 : max(_1198, 0.0)));
    }
    else
    {
        _1206 = _1207;
        _1208 = _1207;
        _1209 = _1207;
        _1210 = _1207;
        _1211 = _1207;
        _1212 = _1207;
        _1213 = _1207;
        _1214 = _1207;
        _1215 = _1207;
        _1216 = _1207;
        _1217 = _1207;
        _1218 = _1207;
        _1219 = 0.0;
        _1220 = 0.0;
        _1221 = 0.0;
    }
    float _1516;
    float _1517;
    float _1518;
    float _1519;
    float _1520;
    float _1521;
    float _1522;
    float _1523;
    float _1524;
    float _1525;
    float _1526;
    float _1527;
    float _1528;
    float _1529;
    float _1530;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1247 = fma(_904, cbModelParam._m0[30u].z, fma(_900, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _896));
        float _1251 = fma(_904, cbModelParam._m0[31u].z, fma(_900, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _896));
        float _1255 = fma(_904, cbModelParam._m0[32u].z, fma(_900, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _896));
        float _1278 = _896 + _666;
        float _1279 = _900 + _667;
        float _1280 = _904 + _668;
        float _1290 = fma(_1280, cbModelParam._m0[30u].z, fma(_1279, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1278)) - _1247;
        float _1291 = fma(_1280, cbModelParam._m0[31u].z, fma(_1279, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1278)) - _1251;
        float _1292 = fma(_1280, cbModelParam._m0[32u].z, fma(_1279, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1278)) - _1255;
        float _1296 = inversesqrt(dot(vec3(_1290, _1291, _1292), vec3(_1290, _1291, _1292)));
        float _1309 = ((_1296 * _1290) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1247 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1310 = ((_1296 * _1291) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1251 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1311 = ((_1296 * _1292) / cbModelParam._m0[35u].z) + ((((((_1255 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1313 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1309, _1310, _1311), 0.0);
        vec4 _1320 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1309, _1310, _1311), 0.0);
        vec4 _1327 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1309, _1310, _1311), 0.0);
        vec4 _1334 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1309, _1310, _1311), 0.0);
        float _1346 = exp2((_1313.w + (-0.5)) * 20.0) * 2.0;
        float _1347 = _1346 * (_1313.x + (-0.5));
        float _1348 = _1346 * (_1313.y + (-0.5));
        float _1349 = _1346 * (_1313.z + (-0.5));
        float _1356 = exp2((_1320.w + (-0.5)) * 20.0) * 2.0;
        float _1357 = _1356 * (_1320.x + (-0.5));
        float _1358 = _1356 * (_1320.y + (-0.5));
        float _1359 = _1356 * (_1320.z + (-0.5));
        float _1366 = exp2((_1327.w + (-0.5)) * 20.0) * 2.0;
        float _1367 = _1366 * (_1327.x + (-0.5));
        float _1368 = _1366 * (_1327.y + (-0.5));
        float _1369 = _1366 * (_1327.z + (-0.5));
        float _1376 = exp2((_1334.w + (-0.5)) * 20.0) * 2.0;
        float _1377 = _1376 * (_1334.x + (-0.5));
        float _1378 = _1376 * (_1334.y + (-0.5));
        float _1379 = _1376 * (_1334.z + (-0.5));
        float _1380 = isnan(0.0) ? _1377 : (isnan(_1377) ? 0.0 : max(_1377, 0.0));
        float _1381 = isnan(0.0) ? _1378 : (isnan(_1378) ? 0.0 : max(_1378, 0.0));
        float _1382 = isnan(0.0) ? _1379 : (isnan(_1379) ? 0.0 : max(_1379, 0.0));
        float _1383 = _1347 * 0.5;
        float _1384 = _1357 * 0.5;
        float _1385 = _1367 * 0.5;
        float _1386 = dot(vec3(_1383, _1384, _1385), vec3(_1383, _1384, _1385));
        float _1391 = (_1386 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1386);
        float _1399 = (dot(vec3(_666, _667, _668), vec3(_1391 * _1383, _1391 * _1384, _1391 * _1385)) + 1.0) * 0.5;
        float _3823 = isnan(0.0) ? _1399 : (isnan(_1399) ? 0.0 : max(_1399, 0.0));
        float _1408 = sqrt(((_1384 * _1384) + (_1383 * _1383)) + (_1385 * _1385)) / (_1380 + 9.9999997473787516355514526367188e-06);
        float _3834 = isnan(0.0) ? _1408 : (isnan(_1408) ? 0.0 : max(_1408, 0.0));
        float _1409 = isnan(1.0) ? _3834 : (isnan(_3834) ? 1.0 : min(_3834, 1.0));
        float _1410 = _1409 * 2.0;
        float _1414 = (1.0 - _1409) / (_1409 + 1.0);
        float _3845 = isnan(0.0) ? _1414 : (isnan(_1414) ? 0.0 : max(_1414, 0.0));
        float _1415 = isnan(1.0) ? _3845 : (isnan(_3845) ? 1.0 : min(_3845, 1.0));
        float _1424 = ((((1.0 - _1415) * (_1410 + 2.0)) * exp2(log2(isnan(1.0) ? _3823 : (isnan(_3823) ? 1.0 : min(_3823, 1.0))) * (_1410 + 1.0))) + _1415) * _1380;
        float _1425 = _1348 * 0.5;
        float _1426 = _1358 * 0.5;
        float _1427 = _1368 * 0.5;
        float _1428 = dot(vec3(_1425, _1426, _1427), vec3(_1425, _1426, _1427));
        float _1433 = (_1428 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1428);
        float _1441 = (dot(vec3(_666, _667, _668), vec3(_1433 * _1425, _1433 * _1426, _1433 * _1427)) + 1.0) * 0.5;
        float _3856 = isnan(0.0) ? _1441 : (isnan(_1441) ? 0.0 : max(_1441, 0.0));
        float _1450 = sqrt(((_1426 * _1426) + (_1425 * _1425)) + (_1427 * _1427)) / (_1381 + 9.9999997473787516355514526367188e-06);
        float _3867 = isnan(0.0) ? _1450 : (isnan(_1450) ? 0.0 : max(_1450, 0.0));
        float _1451 = isnan(1.0) ? _3867 : (isnan(_3867) ? 1.0 : min(_3867, 1.0));
        float _1452 = _1451 * 2.0;
        float _1456 = (1.0 - _1451) / (_1451 + 1.0);
        float _3878 = isnan(0.0) ? _1456 : (isnan(_1456) ? 0.0 : max(_1456, 0.0));
        float _1457 = isnan(1.0) ? _3878 : (isnan(_3878) ? 1.0 : min(_3878, 1.0));
        float _1466 = ((((1.0 - _1457) * (_1452 + 2.0)) * exp2(log2(isnan(1.0) ? _3856 : (isnan(_3856) ? 1.0 : min(_3856, 1.0))) * (_1452 + 1.0))) + _1457) * _1381;
        float _1467 = _1349 * 0.5;
        float _1468 = _1359 * 0.5;
        float _1469 = _1369 * 0.5;
        float _1470 = dot(vec3(_1467, _1468, _1469), vec3(_1467, _1468, _1469));
        float _1475 = (_1470 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1470);
        float _1483 = (dot(vec3(_666, _667, _668), vec3(_1475 * _1467, _1475 * _1468, _1475 * _1469)) + 1.0) * 0.5;
        float _3889 = isnan(0.0) ? _1483 : (isnan(_1483) ? 0.0 : max(_1483, 0.0));
        float _1492 = sqrt(((_1468 * _1468) + (_1467 * _1467)) + (_1469 * _1469)) / (_1382 + 9.9999997473787516355514526367188e-06);
        float _3900 = isnan(0.0) ? _1492 : (isnan(_1492) ? 0.0 : max(_1492, 0.0));
        float _1493 = isnan(1.0) ? _3900 : (isnan(_3900) ? 1.0 : min(_3900, 1.0));
        float _1494 = _1493 * 2.0;
        float _1498 = (1.0 - _1493) / (_1493 + 1.0);
        float _3911 = isnan(0.0) ? _1498 : (isnan(_1498) ? 0.0 : max(_1498, 0.0));
        float _1499 = isnan(1.0) ? _3911 : (isnan(_3911) ? 1.0 : min(_3911, 1.0));
        float _1508 = ((((1.0 - _1499) * (_1494 + 2.0)) * exp2(log2(isnan(1.0) ? _3889 : (isnan(_3889) ? 1.0 : min(_3889, 1.0))) * (_1494 + 1.0))) + _1499) * _1382;
        _1516 = _1349;
        _1517 = _1348;
        _1518 = _1347;
        _1519 = _1359;
        _1520 = _1358;
        _1521 = _1357;
        _1522 = _1369;
        _1523 = _1368;
        _1524 = _1367;
        _1525 = _1382;
        _1526 = _1381;
        _1527 = _1380;
        _1528 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1424 : (isnan(_1424) ? 0.0 : max(_1424, 0.0)));
        _1529 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1466 : (isnan(_1466) ? 0.0 : max(_1466, 0.0)));
        _1530 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1508 : (isnan(_1508) ? 0.0 : max(_1508, 0.0)));
    }
    else
    {
        _1516 = _1207;
        _1517 = _1207;
        _1518 = _1207;
        _1519 = _1207;
        _1520 = _1207;
        _1521 = _1207;
        _1522 = _1207;
        _1523 = _1207;
        _1524 = _1207;
        _1525 = _1207;
        _1526 = _1207;
        _1527 = _1207;
        _1528 = 0.0;
        _1529 = 0.0;
        _1530 = 0.0;
    }
    float _1540 = (cbModelParam._m0[1u].x * (_1528 - _1219)) + _1219;
    float _1541 = (cbModelParam._m0[1u].x * (_1529 - _1220)) + _1220;
    float _1542 = (cbModelParam._m0[1u].x * (_1530 - _1221)) + _1221;
    float _1563 = fma(_1542, cbSceneParam._m0[89u].z, fma(_1541, cbSceneParam._m0[89u].y, _1540 * cbSceneParam._m0[89u].x));
    float _1566 = fma(_1542, cbSceneParam._m0[90u].z, fma(_1541, cbSceneParam._m0[90u].y, _1540 * cbSceneParam._m0[90u].x));
    float _1569 = fma(_1542, cbSceneParam._m0[91u].z, fma(_1541, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1540));
    float _1584 = _840 * 0.5;
    float _1585 = _841 * 0.5;
    float _1586 = _842 * 0.5;
    float _1587 = dot(vec4(_1584, _1585, _1586, 1.0), vec4(_1518, _1521, _1524, _1527));
    float _1590 = dot(vec4(_1584, _1585, _1586, 1.0), vec4(_1517, _1520, _1523, _1526));
    float _1593 = dot(vec4(_1584, _1585, _1586, 1.0), vec4(_1516, _1519, _1522, _1525));
    float _1627;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1600 = dot(vec4(_1584, _1585, _1586, 1.0), vec4(_1206, _1210, _1213, _1216));
        float _1604 = dot(vec4(_1584, _1585, _1586, 1.0), vec4(_1208, _1211, _1214, _1217));
        float _1608 = dot(vec4(_1584, _1585, _1586, 1.0), vec4(_1209, _1212, _1215, _1218));
        float _1615 = dot(vec4(cbModelParam._m0[39u]), vec4(_1584, _1585, _1586, 1.0));
        _1627 = dot(vec3(isnan(0.0) ? _1608 : (isnan(_1608) ? 0.0 : max(_1608, 0.0)), isnan(0.0) ? _1604 : (isnan(_1604) ? 0.0 : max(_1604, 0.0)), isnan(0.0) ? _1600 : (isnan(_1600) ? 0.0 : max(_1600, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1615) ? 0.0 : (isnan(0.0) ? _1615 : max(0.0, _1615))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1627 = 1.0;
    }
    float _1638;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1629 = dot(vec4(cbModelParam._m0[40u]), vec4(_1584, _1585, _1586, 1.0));
        _1638 = dot(vec3(isnan(0.0) ? _1587 : (isnan(_1587) ? 0.0 : max(_1587, 0.0)), isnan(0.0) ? _1590 : (isnan(_1590) ? 0.0 : max(_1590, 0.0)), isnan(0.0) ? _1593 : (isnan(_1593) ? 0.0 : max(_1593, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1629) ? 0.0 : (isnan(0.0) ? _1629 : max(0.0, _1629))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1638 = 1.0;
    }
    float _1642 = (_1638 * cbModelParam._m0[1u].x) + (_1627 * (1.0 - cbModelParam._m0[1u].x));
    float _1652 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _669);
    float _1653 = isnan(_1652) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1652 : min(cbModelParam._m0[25u].z, _1652));
    float _1733;
    float _1735;
    float _1737;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1700 = fma(_904, cbModelParam._m0[13u].z, fma(_900, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _896)) + cbModelParam._m0[13u].w;
        float _1704 = fma(_904, cbModelParam._m0[14u].z, fma(_900, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _896)) + cbModelParam._m0[14u].w;
        float _1708 = fma(_904, cbModelParam._m0[15u].z, fma(_900, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _896)) + cbModelParam._m0[15u].w;
        float _1711 = fma(_842, cbModelParam._m0[13u].z, fma(_841, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _840));
        float _1714 = fma(_842, cbModelParam._m0[14u].z, fma(_841, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _840));
        float _1717 = fma(_842, cbModelParam._m0[15u].z, fma(_841, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _840));
        float _1745;
        if (_1711 > 0.0)
        {
            _1745 = abs((1.0 - _1700) / _1711);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1711 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1700 + 1.0) / _1711);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1745 = frontier_phi_14_12_ladder;
        }
        float _1950;
        if (_1714 > 0.0)
        {
            _1950 = abs((1.0 - _1704) / _1714);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1714 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1704 + 1.0) / _1714);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1950 = frontier_phi_23_19_ladder;
        }
        float _2204;
        if (_1717 > 0.0)
        {
            _2204 = abs((1.0 - _1708) / _1717);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1717 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1708 + 1.0) / _1717);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2204 = frontier_phi_35_30_ladder;
        }
        float _2206 = isnan(_1950) ? _1745 : (isnan(_1745) ? _1950 : min(_1745, _1950));
        float _2207 = isnan(_2204) ? _2206 : (isnan(_2206) ? _2204 : min(_2206, _2204));
        float _2211 = (_2207 * _1711) + _1700;
        float _2212 = (_2207 * _1714) + _1704;
        float _2213 = (_2207 * _1717) + _1708;
        float _2214 = _2207 * 9.9999997473787516355514526367188e-05;
        float _2216 = (-1.0) - _2214;
        float _2218 = _2214 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2213 > _2218) || ((_2213 < _2216) || ((_2212 > _2218) || ((_2212 < _2216) || ((_2211 < _2216) || (_2211 > _2218))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2341 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2213, cbModelParam._m0[9u].z, fma(_2212, cbModelParam._m0[9u].y, _2211 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2213, cbModelParam._m0[10u].z, fma(_2212, cbModelParam._m0[10u].y, _2211 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2213, cbModelParam._m0[11u].z, fma(_2212, cbModelParam._m0[11u].y, _2211 * cbModelParam._m0[11u].x))), _1653);
            frontier_phi_13_35_ladder = _2341.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2341.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2341.x * cbModelParam._m0[1u].y;
        }
        _1733 = frontier_phi_13_35_ladder_2;
        _1735 = frontier_phi_13_35_ladder_1;
        _1737 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1721 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_840, _841, _842), _1653);
        _1733 = _1721.x * cbModelParam._m0[1u].y;
        _1735 = _1721.y * cbModelParam._m0[1u].y;
        _1737 = _1721.z * cbModelParam._m0[1u].y;
    }
    float _1741 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _669);
    float _1742 = isnan(_1741) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1741 : min(cbModelParam._m0[25u].w, _1741));
    float _1833;
    float _1835;
    float _1837;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1797 = fma(_904, cbModelParam._m0[21u].z, fma(_900, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _896)) + cbModelParam._m0[21u].w;
        float _1801 = fma(_904, cbModelParam._m0[22u].z, fma(_900, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _896)) + cbModelParam._m0[22u].w;
        float _1805 = fma(_904, cbModelParam._m0[23u].z, fma(_900, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _896)) + cbModelParam._m0[23u].w;
        float _1808 = fma(_842, cbModelParam._m0[21u].z, fma(_841, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _840));
        float _1811 = fma(_842, cbModelParam._m0[22u].z, fma(_841, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _840));
        float _1814 = fma(_842, cbModelParam._m0[23u].z, fma(_841, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _840));
        float _1955;
        if (_1808 > 0.0)
        {
            _1955 = abs((1.0 - _1797) / _1808);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1808 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1797 + 1.0) / _1808);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1955 = frontier_phi_25_21_ladder;
        }
        float _2231;
        if (_1811 > 0.0)
        {
            _2231 = abs((1.0 - _1801) / _1811);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1811 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1801 + 1.0) / _1811);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2231 = frontier_phi_37_32_ladder;
        }
        float _2444;
        if (_1814 > 0.0)
        {
            _2444 = abs((1.0 - _1805) / _1814);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1814 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1805 + 1.0) / _1814);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2444 = frontier_phi_46_43_ladder;
        }
        float _2446 = isnan(_2231) ? _1955 : (isnan(_1955) ? _2231 : min(_1955, _2231));
        float _2447 = isnan(_2444) ? _2446 : (isnan(_2446) ? _2444 : min(_2446, _2444));
        float _2451 = (_2447 * _1808) + _1797;
        float _2452 = (_2447 * _1811) + _1801;
        float _2453 = (_2447 * _1814) + _1805;
        float _2454 = _2447 * 9.9999997473787516355514526367188e-05;
        float _2455 = (-1.0) - _2454;
        float _2457 = _2454 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2453 > _2457) || ((_2453 < _2455) || ((_2452 > _2457) || ((_2452 < _2455) || ((_2451 < _2455) || (_2451 > _2457))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2652 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2453, cbModelParam._m0[17u].z, fma(_2452, cbModelParam._m0[17u].y, _2451 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2453, cbModelParam._m0[18u].z, fma(_2452, cbModelParam._m0[18u].y, _2451 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2453, cbModelParam._m0[19u].z, fma(_2452, cbModelParam._m0[19u].y, _2451 * cbModelParam._m0[19u].x))), _1742);
            frontier_phi_22_46_ladder = _2652.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2652.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2652.x * cbModelParam._m0[1u].z;
        }
        _1833 = frontier_phi_22_46_ladder_2;
        _1835 = frontier_phi_22_46_ladder_1;
        _1837 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1817 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_840, _841, _842), _1742);
        _1833 = _1817.x * cbModelParam._m0[1u].z;
        _1835 = _1817.y * cbModelParam._m0[1u].z;
        _1837 = _1817.z * cbModelParam._m0[1u].z;
    }
    float _1850 = (((_867 * _817) + _868) * _832) * ((cbModelParam._m0[1u].w * (_1833 - _1733)) + _1733);
    float _1852 = (((_867 * _819) + _868) * _832) * ((cbModelParam._m0[1u].w * (_1835 - _1735)) + _1735);
    float _1854 = (((_867 * _820) + _868) * _832) * ((cbModelParam._m0[1u].w * (_1837 - _1737)) + _1737);
    float _1857 = fma(_1854, cbSceneParam._m0[89u].z, fma(_1852, cbSceneParam._m0[89u].y, _1850 * cbSceneParam._m0[89u].x));
    float _1860 = fma(_1854, cbSceneParam._m0[90u].z, fma(_1852, cbSceneParam._m0[90u].y, _1850 * cbSceneParam._m0[90u].x));
    float _1863 = fma(_1854, cbSceneParam._m0[91u].z, fma(_1852, cbSceneParam._m0[91u].y, _1850 * cbSceneParam._m0[91u].x));
    uvec4 _1873 = floatBitsToUint(cbInstanceData._m0[_792 + 5u]);
    uint _1875 = _1873.x * 14u;
    uint _1876 = _1875 + 13u;
    float _1883 = _832 + (-1.0);
    float _1888 = (cbLight._m0[_1876].x * _1883) + 1.0;
    float _1889 = (cbLight._m0[_1876].y * _1883) + 1.0;
    float _1890 = (cbLight._m0[_1876].z * _1883) + 1.0;
    float _1891 = (cbLight._m0[_1876].w * _1883) + 1.0;
    uint _1892 = _1875 + 5u;
    float _1898 = isnan(1.0) ? _1889 : (isnan(_1889) ? 1.0 : min(_1889, 1.0));
    uint _1902 = _1875 + 4u;
    float _1909 = isnan(1.0) ? _1888 : (isnan(_1888) ? 1.0 : min(_1888, 1.0));
    uint _1913 = _1875 | 1u;
    float _1924 = dot(vec3(cbLight._m0[_1875].xyz), vec3(_666, _667, _668));
    float _1927 = dot(vec3(cbLight._m0[_1913].xyz), vec3(_666, _667, _668));
    float _4047 = isnan(0.0) ? _1924 : (isnan(_1924) ? 0.0 : max(_1924, 0.0));
    float _4058 = isnan(0.0) ? _1927 : (isnan(_1927) ? 0.0 : max(_1927, 0.0));
    float _1932 = (isnan(1.0) ? _4047 : (isnan(_4047) ? 1.0 : min(_4047, 1.0))) * 0.3183098733425140380859375;
    float _1934 = (isnan(1.0) ? _4058 : (isnan(_4058) ? 1.0 : min(_4058, 1.0))) * 0.3183098733425140380859375;
    float _1941 = ((cbLight._m0[_1892].x * _1898) * _1934) + ((cbLight._m0[_1902].x * _1909) * _1932);
    float _1942 = ((_1898 * cbLight._m0[_1892].y) * _1934) + ((_1909 * cbLight._m0[_1902].y) * _1932);
    float _1943 = ((_1898 * cbLight._m0[_1892].z) * _1934) + ((_1909 * cbLight._m0[_1902].z) * _1932);
    uvec4 _1947 = floatBitsToUint(cbLight._m0[_1875 + 12u]);
    bool _1949 = _1947.x == 0u;
    float _1960;
    float _1962;
    float _1964;
    if (_1949)
    {
        _1960 = _1941;
        _1962 = _1942;
        _1964 = _1943;
    }
    else
    {
        uint _1968 = _1875 + 6u;
        float _1984 = (dot(vec3(cbLight._m0[_1875 + 2u].xyz), vec3(_666, _667, _668)) * 0.5) + 0.5;
        float _1985 = _1984 * _1984;
        float _4069 = isnan(0.0) ? _1985 : (isnan(_1985) ? 0.0 : max(_1985, 0.0));
        float _1986 = isnan(1.0) ? _4069 : (isnan(_4069) ? 1.0 : min(_4069, 1.0));
        float _1987 = isnan(1.0) ? _1890 : (isnan(_1890) ? 1.0 : min(_1890, 1.0));
        _1960 = (((cbLight._m0[_1968].x * 0.3183098733425140380859375) * _1986) * _1987) + _1941;
        _1962 = (((cbLight._m0[_1968].y * 0.3183098733425140380859375) * _1986) * _1987) + _1942;
        _1964 = (((cbLight._m0[_1968].z * 0.3183098733425140380859375) * _1986) * _1987) + _1943;
    }
    bool _1967 = _1947.y == 0u;
    float _2005;
    float _2007;
    float _2009;
    if (_1967)
    {
        _2005 = _1960;
        _2007 = _1962;
        _2009 = _1964;
    }
    else
    {
        uint _2175 = _1875 + 7u;
        float _2191 = (dot(vec3(cbLight._m0[_1875 + 3u].xyz), vec3(_666, _667, _668)) * 0.5) + 0.5;
        float _2192 = _2191 * _2191;
        float _4085 = isnan(0.0) ? _2192 : (isnan(_2192) ? 0.0 : max(_2192, 0.0));
        float _2193 = isnan(1.0) ? _4085 : (isnan(_4085) ? 1.0 : min(_4085, 1.0));
        float _2194 = isnan(1.0) ? _1891 : (isnan(_1891) ? 1.0 : min(_1891, 1.0));
        _2005 = (((cbLight._m0[_2175].x * 0.3183098733425140380859375) * _2193) * _2194) + _1960;
        _2007 = (((cbLight._m0[_2175].y * 0.3183098733425140380859375) * _2193) * _2194) + _1962;
        _2009 = (((cbLight._m0[_2175].z * 0.3183098733425140380859375) * _2193) * _2194) + _1964;
    }
    uint _2012 = _1875 + 8u;
    float _2025 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1875].w)) * _669) * 0.949999988079071044921875);
    float _2026 = _2025 * _2025;
    float _2027 = cbLight._m0[_1875].x + _746;
    float _2028 = cbLight._m0[_1875].y + _747;
    float _2029 = cbLight._m0[_1875].z + _748;
    float _2033 = inversesqrt(dot(vec3(_2027, _2028, _2029), vec3(_2027, _2028, _2029)));
    float _2034 = _2033 * _2027;
    float _2035 = _2033 * _2028;
    float _2036 = _2033 * _2029;
    float _2037 = dot(vec3(_666, _667, _668), vec3(cbLight._m0[_1875].xyz));
    float _4101 = isnan(0.0) ? _2037 : (isnan(_2037) ? 0.0 : max(_2037, 0.0));
    float _2040 = isnan(1.0) ? _4101 : (isnan(_4101) ? 1.0 : min(_4101, 1.0));
    float _4112 = isnan(0.0) ? _833 : (isnan(_833) ? 0.0 : max(_833, 0.0));
    float _2041 = isnan(1.0) ? _4112 : (isnan(_4112) ? 1.0 : min(_4112, 1.0));
    float _2042 = dot(vec3(_666, _667, _668), vec3(_2034, _2035, _2036));
    float _4123 = isnan(0.0) ? _2042 : (isnan(_2042) ? 0.0 : max(_2042, 0.0));
    float _2045 = isnan(1.0) ? _4123 : (isnan(_4123) ? 1.0 : min(_4123, 1.0));
    float _2046 = dot(vec3(cbLight._m0[_1875].xyz), vec3(_2034, _2035, _2036));
    float _4134 = isnan(0.0) ? _2046 : (isnan(_2046) ? 0.0 : max(_2046, 0.0));
    float _2050 = _2026 * _2026;
    float _2054 = ((_2045 * _2045) * (_2050 + (-1.0))) + 1.0;
    float _2062 = exp2(log2(1.0 - (isnan(1.0) ? _4134 : (isnan(_4134) ? 1.0 : min(_4134, 1.0)))) * 5.0);
    float _2063 = 0.959999978542327880859375 - _814;
    float _2065 = 0.959999978542327880859375 - _815;
    float _2066 = 0.959999978542327880859375 - _816;
    float _2073 = 1.0 - _2026;
    float _2084 = (0.5 / (((_2041 * ((_2040 * _2073) + _2026)) + 9.9999999392252902907785028219223e-09) + (((_2041 * _2073) + _2026) * _2040))) * _2040;
    float _4145 = isnan(0.0) ? _2084 : (isnan(_2084) ? 0.0 : max(_2084, 0.0));
    float _2086 = (isnan(1.0) ? _4145 : (isnan(_4145) ? 1.0 : min(_4145, 1.0))) * (_2050 / ((_2054 * _2054) * 3.141590118408203125));
    uint _2097 = _1875 + 9u;
    float _2108 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1913].w)) * _669) * 0.949999988079071044921875);
    float _2109 = _2108 * _2108;
    float _2110 = cbLight._m0[_1913].x + _746;
    float _2111 = cbLight._m0[_1913].y + _747;
    float _2112 = cbLight._m0[_1913].z + _748;
    float _2116 = inversesqrt(dot(vec3(_2110, _2111, _2112), vec3(_2110, _2111, _2112)));
    float _2117 = _2116 * _2110;
    float _2118 = _2116 * _2111;
    float _2119 = _2116 * _2112;
    float _2120 = dot(vec3(_666, _667, _668), vec3(cbLight._m0[_1913].xyz));
    float _4156 = isnan(0.0) ? _2120 : (isnan(_2120) ? 0.0 : max(_2120, 0.0));
    float _2123 = isnan(1.0) ? _4156 : (isnan(_4156) ? 1.0 : min(_4156, 1.0));
    float _2124 = dot(vec3(_666, _667, _668), vec3(_2117, _2118, _2119));
    float _4167 = isnan(0.0) ? _2124 : (isnan(_2124) ? 0.0 : max(_2124, 0.0));
    float _2127 = isnan(1.0) ? _4167 : (isnan(_4167) ? 1.0 : min(_4167, 1.0));
    float _2128 = dot(vec3(cbLight._m0[_1913].xyz), vec3(_2117, _2118, _2119));
    float _4178 = isnan(0.0) ? _2128 : (isnan(_2128) ? 0.0 : max(_2128, 0.0));
    float _2132 = _2109 * _2109;
    float _2136 = ((_2127 * _2127) * (_2132 + (-1.0))) + 1.0;
    float _2143 = exp2(log2(1.0 - (isnan(1.0) ? _4178 : (isnan(_4178) ? 1.0 : min(_4178, 1.0)))) * 5.0);
    float _2150 = 1.0 - _2109;
    float _2160 = (0.5 / (((_2041 * ((_2123 * _2150) + _2109)) + 9.9999999392252902907785028219223e-09) + (((_2041 * _2150) + _2109) * _2123))) * _2123;
    float _4189 = isnan(0.0) ? _2160 : (isnan(_2160) ? 0.0 : max(_2160, 0.0));
    float _2162 = (isnan(1.0) ? _4189 : (isnan(_4189) ? 1.0 : min(_4189, 1.0))) * (_2132 / ((_2136 * _2136) * 3.141590118408203125));
    float _2172 = (((((_2143 * _2063) + _817) * cbLight._m0[_2097].x) * _2162) * _1898) + (((((_2062 * _2063) + _817) * cbLight._m0[_2012].x) * _2086) * _1909);
    float _2173 = (((((_2143 * _2065) + _819) * cbLight._m0[_2097].y) * _2162) * _1898) + (((((_2062 * _2065) + _819) * cbLight._m0[_2012].y) * _2086) * _1909);
    float _2174 = (((((_2143 * _2066) + _820) * cbLight._m0[_2097].z) * _2162) * _1898) + (((((_2062 * _2066) + _820) * cbLight._m0[_2012].z) * _2086) * _1909);
    float _2236;
    float _2238;
    float _2240;
    if (_1949)
    {
        _2236 = _2172;
        _2238 = _2173;
        _2240 = _2174;
    }
    else
    {
        uint _2242 = _1875 + 2u;
        uint _2246 = _1875 + 10u;
        float _2260 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2242].w)) * _669) * 0.949999988079071044921875);
        float _2261 = _2260 * _2260;
        float _2262 = cbLight._m0[_2242].x + _746;
        float _2263 = cbLight._m0[_2242].y + _747;
        float _2264 = cbLight._m0[_2242].z + _748;
        float _2268 = inversesqrt(dot(vec3(_2262, _2263, _2264), vec3(_2262, _2263, _2264)));
        float _2269 = _2268 * _2262;
        float _2270 = _2268 * _2263;
        float _2271 = _2268 * _2264;
        float _2272 = dot(vec3(_666, _667, _668), vec3(cbLight._m0[_2242].xyz));
        float _4200 = isnan(0.0) ? _2272 : (isnan(_2272) ? 0.0 : max(_2272, 0.0));
        float _2275 = isnan(1.0) ? _4200 : (isnan(_4200) ? 1.0 : min(_4200, 1.0));
        float _2276 = dot(vec3(_666, _667, _668), vec3(_2269, _2270, _2271));
        float _4211 = isnan(0.0) ? _2276 : (isnan(_2276) ? 0.0 : max(_2276, 0.0));
        float _2279 = isnan(1.0) ? _4211 : (isnan(_4211) ? 1.0 : min(_4211, 1.0));
        float _2280 = dot(vec3(cbLight._m0[_2242].xyz), vec3(_2269, _2270, _2271));
        float _4222 = isnan(0.0) ? _2280 : (isnan(_2280) ? 0.0 : max(_2280, 0.0));
        float _2284 = _2261 * _2261;
        float _2288 = ((_2279 * _2279) * (_2284 + (-1.0))) + 1.0;
        float _2295 = exp2(log2(1.0 - (isnan(1.0) ? _4222 : (isnan(_4222) ? 1.0 : min(_4222, 1.0)))) * 5.0);
        float _2302 = 1.0 - _2261;
        float _2312 = (0.5 / (((_2041 * ((_2275 * _2302) + _2261)) + 9.9999999392252902907785028219223e-09) + (((_2041 * _2302) + _2261) * _2275))) * _2275;
        float _4233 = isnan(0.0) ? _2312 : (isnan(_2312) ? 0.0 : max(_2312, 0.0));
        float _2314 = (isnan(1.0) ? _4233 : (isnan(_4233) ? 1.0 : min(_4233, 1.0))) * (_2284 / ((_2288 * _2288) * 3.141590118408203125));
        float _2315 = isnan(1.0) ? _1890 : (isnan(_1890) ? 1.0 : min(_1890, 1.0));
        _2236 = (((((_2295 * _2063) + _817) * cbLight._m0[_2246].x) * _2314) * _2315) + _2172;
        _2238 = (((((_2295 * _2065) + _819) * cbLight._m0[_2246].y) * _2314) * _2315) + _2173;
        _2240 = (((((_2295 * _2066) + _820) * cbLight._m0[_2246].z) * _2314) * _2315) + _2174;
    }
    float _2350;
    float _2352;
    float _2354;
    if (_1967)
    {
        _2350 = _2236;
        _2352 = _2238;
        _2354 = _2240;
    }
    else
    {
        uint _2361 = _1875 + 3u;
        uint _2365 = _1875 + 11u;
        float _2379 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2361].w)) * _669) * 0.949999988079071044921875);
        float _2380 = _2379 * _2379;
        float _2381 = cbLight._m0[_2361].x + _746;
        float _2382 = cbLight._m0[_2361].y + _747;
        float _2383 = cbLight._m0[_2361].z + _748;
        float _2387 = inversesqrt(dot(vec3(_2381, _2382, _2383), vec3(_2381, _2382, _2383)));
        float _2388 = _2387 * _2381;
        float _2389 = _2387 * _2382;
        float _2390 = _2387 * _2383;
        float _2391 = dot(vec3(_666, _667, _668), vec3(cbLight._m0[_2361].xyz));
        float _4249 = isnan(0.0) ? _2391 : (isnan(_2391) ? 0.0 : max(_2391, 0.0));
        float _2394 = isnan(1.0) ? _4249 : (isnan(_4249) ? 1.0 : min(_4249, 1.0));
        float _2395 = dot(vec3(_666, _667, _668), vec3(_2388, _2389, _2390));
        float _4260 = isnan(0.0) ? _2395 : (isnan(_2395) ? 0.0 : max(_2395, 0.0));
        float _2398 = isnan(1.0) ? _4260 : (isnan(_4260) ? 1.0 : min(_4260, 1.0));
        float _2399 = dot(vec3(cbLight._m0[_2361].xyz), vec3(_2388, _2389, _2390));
        float _4271 = isnan(0.0) ? _2399 : (isnan(_2399) ? 0.0 : max(_2399, 0.0));
        float _2403 = _2380 * _2380;
        float _2407 = ((_2398 * _2398) * (_2403 + (-1.0))) + 1.0;
        float _2414 = exp2(log2(1.0 - (isnan(1.0) ? _4271 : (isnan(_4271) ? 1.0 : min(_4271, 1.0)))) * 5.0);
        float _2421 = 1.0 - _2380;
        float _2431 = (0.5 / (((_2041 * ((_2394 * _2421) + _2380)) + 9.9999999392252902907785028219223e-09) + (((_2041 * _2421) + _2380) * _2394))) * _2394;
        float _4282 = isnan(0.0) ? _2431 : (isnan(_2431) ? 0.0 : max(_2431, 0.0));
        float _2433 = (isnan(1.0) ? _4282 : (isnan(_4282) ? 1.0 : min(_4282, 1.0))) * (_2403 / ((_2407 * _2407) * 3.141590118408203125));
        float _2434 = isnan(1.0) ? _1891 : (isnan(_1891) ? 1.0 : min(_1891, 1.0));
        _2350 = (((((_2414 * _2063) + _817) * cbLight._m0[_2365].x) * _2433) * _2434) + _2236;
        _2352 = (((((_2414 * _2065) + _819) * cbLight._m0[_2365].y) * _2433) * _2434) + _2238;
        _2354 = (((((_2414 * _2066) + _820) * cbLight._m0[_2365].z) * _2433) * _2434) + _2240;
    }
    float _2569;
    float _2571;
    float _2573;
    float _2575;
    float _2577;
    float _2579;
    if (_1873.y == 0u)
    {
        float _2509 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2510 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2509;
        float _2511 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2509;
        float _2512 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2509;
        uvec4 _2524 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2525 = _2524.x;
        uint _2536 = uint((float(_2524.y) * floor(float(uint(cbSceneParam._m0[85u].y * _755) / _2525))) + floor(float(uint(cbSceneParam._m0[85u].x * _754) / _2525)));
        float _2546 = (log2(_2512 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2547 = isnan(0.0) ? _2546 : (isnan(_2546) ? 0.0 : max(_2546, 0.0));
        uint _2550 = uint(isnan(14.0) ? _2547 : (isnan(_2547) ? 14.0 : min(_2547, 14.0)));
        uvec4 _2555 = texelFetch(g_lightClusterGridBuffer, int(((_2550 << 2u) + (_2536 << 6u)) >> 2u));
        uint _2556 = _2555.x;
        uint _2557 = _2524.z;
        float _2657;
        float _2659;
        float _2661;
        float _2663;
        float _2665;
        float _2667;
        if (((((1u << ((_2557 >> 4u) & 15u)) + 4294967295u) & _2556) == 0u) || ((_2557 & 240u) == 0u))
        {
            _2657 = 0.0;
            _2659 = 0.0;
            _2661 = 0.0;
            _2663 = 0.0;
            _2665 = 0.0;
            _2667 = 0.0;
        }
        else
        {
            float _2658;
            float _2660;
            float _2662;
            float _2664;
            float _2666;
            float _2668;
            float _2801 = 0.0;
            float _2802 = 0.0;
            float _2803 = 0.0;
            float _2804 = 0.0;
            float _2805 = 0.0;
            float _2806 = 0.0;
            uint _2807 = 0u;
            uint _2816;
            bool _2817;
            for (;;)
            {
                _2816 = texelFetch(g_lightClassification, int((((_2550 << 5u) + (_2536 << 9u)) + (_2807 << 2u)) >> 2u)).x;
                _2817 = _2816 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2817)
                {
                    frontier_phi_61_pred = _2801;
                    frontier_phi_61_pred_1 = _2806;
                    frontier_phi_61_pred_2 = _2805;
                    frontier_phi_61_pred_3 = _2804;
                    frontier_phi_61_pred_4 = _2803;
                    frontier_phi_61_pred_5 = _2802;
                }
                else
                {
                    float _2925;
                    float _2926;
                    float _2927;
                    float _2928;
                    float _2929;
                    float _2930;
                    uint _2931;
                    _2925 = _2801;
                    _2926 = _2802;
                    _2927 = _2803;
                    _2928 = _2804;
                    _2929 = _2805;
                    _2930 = _2806;
                    _2931 = _2816;
                    float _2857;
                    float _2858;
                    float _2859;
                    float _2860;
                    float _2861;
                    float _2862;
                    for (;;)
                    {
                        uint _2935 = uint(findLSB(_2931)) + (_2807 << 5u);
                        uint _2932 = (_2931 + 4294967295u) & _2931;
                        uint _2937 = _2935 * 48u;
                        vec4 _2951 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2937)).x, texelFetch(g_PointLightRenderingBuffer, int(_2937 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2937 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2937 + 3u)).x));
                        uint _2957 = (_2935 * 48u) + 4u;
                        vec4 _2970 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2957)).x, texelFetch(g_PointLightRenderingBuffer, int(_2957 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2957 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2957 + 3u)).x));
                        uint _2976 = (_2935 * 48u) + 8u;
                        vec3 _2987 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2976)).x, texelFetch(g_PointLightRenderingBuffer, int(_2976 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2976 + 2u)).x));
                        float _2991 = _2951.x - _2510;
                        float _2992 = _2951.y - _2511;
                        float _2993 = _2951.z - _2512;
                        float _2994 = dot(vec3(_2991, _2992, _2993), vec3(_2991, _2992, _2993));
                        float _2997 = inversesqrt(_2994);
                        float _2998 = _2997 * _2991;
                        float _2999 = _2997 * _2992;
                        float _3000 = _2997 * _2993;
                        float _3001 = dot(vec3(_773, _776, _779), vec3(_2998, _2999, _3000));
                        float _3006 = 1.0 - (_2994 * _2951.w);
                        float _4308 = isnan(0.0) ? _3006 : (isnan(_3006) ? 0.0 : max(_3006, 0.0));
                        float _3007 = isnan(1.0) ? _4308 : (isnan(_4308) ? 1.0 : min(_4308, 1.0));
                        float _3008 = sqrt(_2994) * _2970.w;
                        float _3011 = 1.39999997615814208984375 / (_3008 + 1.39999997615814208984375);
                        float _3012 = _3011 * _3011;
                        float _3015 = ((1.0 - _3012) * _3001) + _3012;
                        float _3018 = _3008 * _3008;
                        float _3022 = ((isnan(0.0) ? _3015 : (isnan(_3015) ? 0.0 : max(_3015, 0.0))) * _3007) / ((_3018 * 0.699999988079071044921875) + 1.0);
                        float _3026 = (-0.0) - _2510;
                        float _3027 = (-0.0) - _2511;
                        float _3028 = (-0.0) - _2512;
                        float _3032 = inversesqrt(dot(vec3(_3026, _3027, _3028), vec3(_3026, _3027, _3028)));
                        float _3033 = _3032 * _3026;
                        float _3034 = _3032 * _3027;
                        float _3035 = _3032 * _3028;
                        float _3043 = exp2(log2(1.0 / ((_3018 * 3.5) + 5.0)) * 0.25);
                        float _3044 = 1.0 - _848;
                        float _3051 = sqrt(1.0 - ((1.0 - (_3044 * _3044)) * (1.0 - (_3043 * _3043))));
                        float _3052 = _3051 * _3051;
                        float _3053 = _3052 * _3052;
                        float _3054 = _3033 + _2998;
                        float _3055 = _3034 + _2999;
                        float _3056 = _3035 + _3000;
                        float _3060 = inversesqrt(dot(vec3(_3054, _3055, _3056), vec3(_3054, _3055, _3056)));
                        float _3064 = dot(vec3(_773, _776, _779), vec3(_3033, _3034, _3035));
                        float _4324 = isnan(0.0) ? _3064 : (isnan(_3064) ? 0.0 : max(_3064, 0.0));
                        float _3067 = isnan(1.0) ? _4324 : (isnan(_4324) ? 1.0 : min(_4324, 1.0));
                        float _3068 = dot(vec3(_773, _776, _779), vec3(_3060 * _3054, _3060 * _3055, _3060 * _3056));
                        float _4335 = isnan(0.0) ? _3068 : (isnan(_3068) ? 0.0 : max(_3068, 0.0));
                        float _3071 = isnan(1.0) ? _4335 : (isnan(_4335) ? 1.0 : min(_4335, 1.0));
                        float _3075 = ((_3071 * _3071) * (_3053 + (-1.0))) + 1.0;
                        float _3076 = _3011 * _3052;
                        float _3077 = _3076 * _3076;
                        float _3080 = ((1.0 - _3077) * _3001) + _3077;
                        float _4346 = isnan(0.0) ? _3080 : (isnan(_3080) ? 0.0 : max(_3080, 0.0));
                        float _3081 = isnan(1.0) ? _4346 : (isnan(_4346) ? 1.0 : min(_4346, 1.0));
                        float _3082 = 1.0 - _3052;
                        float _3092 = (0.5 / (((_3081 * ((_3067 * _3082) + _3052)) + 9.9999999392252902907785028219223e-09) + (((_3081 * _3082) + _3052) * _3067))) * _3081;
                        float _4357 = isnan(0.0) ? _3092 : (isnan(_3092) ? 0.0 : max(_3092, 0.0));
                        float _3103 = (((_3053 * 3.1415927410125732421875) * (isnan(1.0) ? _4357 : (isnan(_4357) ? 1.0 : min(_4357, 1.0)))) / ((_3075 * _3075) * ((_3018 * 2.1991131305694580078125) + 3.141590118408203125))) * _3007;
                        _2860 = (_3022 * _2970.x) + _2928;
                        _2861 = (_3022 * _2970.y) + _2929;
                        _2862 = (_3022 * _2970.z) + _2930;
                        _2857 = (_3103 * _2987.x) + _2925;
                        _2858 = (_3103 * _2987.y) + _2926;
                        _2859 = (_3103 * _2987.z) + _2927;
                        if (_2932 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2925 = _2857;
                            _2926 = _2858;
                            _2927 = _2859;
                            _2928 = _2860;
                            _2929 = _2861;
                            _2930 = _2862;
                            _2931 = _2932;
                        }
                    }
                    frontier_phi_61_pred = _2857;
                    frontier_phi_61_pred_1 = _2862;
                    frontier_phi_61_pred_2 = _2861;
                    frontier_phi_61_pred_3 = _2860;
                    frontier_phi_61_pred_4 = _2859;
                    frontier_phi_61_pred_5 = _2858;
                }
                _2658 = frontier_phi_61_pred;
                _2668 = frontier_phi_61_pred_1;
                _2666 = frontier_phi_61_pred_2;
                _2664 = frontier_phi_61_pred_3;
                _2662 = frontier_phi_61_pred_4;
                _2660 = frontier_phi_61_pred_5;
                uint _2808 = _2807 + 1u;
                if (_2808 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2801 = _2658;
                    _2802 = _2660;
                    _2803 = _2662;
                    _2804 = _2664;
                    _2805 = _2666;
                    _2806 = _2668;
                    _2807 = _2808;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2657 = _2658;
            _2659 = _2660;
            _2661 = _2662;
            _2663 = _2664;
            _2665 = _2666;
            _2667 = _2668;
        }
        uvec4 _2671 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2672 = _2671.z;
        uint _2674 = (_2672 >> 8u) & 15u;
        float _2769;
        float _2771;
        float _2773;
        float _2775;
        float _2777;
        float _2779;
        if (((4294967295u << _2674) & _2556) == 0u)
        {
            _2769 = _2657;
            _2771 = _2659;
            _2773 = _2661;
            _2775 = _2663;
            _2777 = _2665;
            _2779 = _2667;
        }
        else
        {
            float _2794 = inversesqrt(dot(vec3(_2510, _2511, _2512), vec3(_2510, _2511, _2512)));
            float _2795 = _2794 * _2510;
            float _2796 = _2794 * _2511;
            float _2797 = _2794 * _2512;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2674 < ((_2672 >> 12u) & 15u))
            {
                float _2770;
                float _2772;
                float _2774;
                float _2776;
                float _2778;
                float _2780;
                float _2908 = _2657;
                float _2909 = _2659;
                float _2910 = _2661;
                float _2911 = _2663;
                float _2912 = _2665;
                float _2913 = _2667;
                uint _2914 = _2674;
                uint _2923;
                bool _2924;
                for (;;)
                {
                    _2923 = texelFetch(g_lightClassification, int((((_2550 << 5u) + (_2536 << 9u)) + (_2914 << 2u)) >> 2u)).x;
                    _2924 = _2923 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2924)
                    {
                        frontier_phi_67_pred = _2911;
                        frontier_phi_67_pred_1 = _2912;
                        frontier_phi_67_pred_2 = _2913;
                        frontier_phi_67_pred_3 = _2910;
                        frontier_phi_67_pred_4 = _2909;
                        frontier_phi_67_pred_5 = _2908;
                    }
                    else
                    {
                        float _3108;
                        float _3109;
                        float _3110;
                        float _3111;
                        float _3112;
                        float _3113;
                        float _3402;
                        float _3403;
                        float _3404;
                        float _3405;
                        float _3406;
                        float _3407;
                        float _3121 = _2908;
                        float _3122 = _2909;
                        float _3123 = _2910;
                        float _3124 = _2911;
                        float _3125 = _2912;
                        float _3126 = _2913;
                        uint _3127 = _2923;
                        uint _3128;
                        vec4 _3153;
                        float _3154;
                        vec4 _3169;
                        vec3 _3181;
                        vec4 _3196;
                        vec4 _3211;
                        float _3258;
                        bool _3259;
                        for (;;)
                        {
                            uint _3138 = ((_2914 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3127));
                            _3128 = (_3127 + 4294967295u) & _3127;
                            uint _3140 = _3138 * 40u;
                            _3153 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3140)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3140 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3140 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3140 + 3u)).x));
                            _3154 = _3153.w;
                            uint _3156 = (_3138 * 40u) + 4u;
                            _3169 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3156)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3156 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3156 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3156 + 3u)).x));
                            uint _3171 = (_3138 * 40u) + 8u;
                            _3181 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3171)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3171 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3171 + 2u)).x));
                            uint _3183 = (_3138 * 40u) + 16u;
                            _3196 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3183)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3183 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3183 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3183 + 3u)).x));
                            uint _3198 = (_3138 * 40u) + 20u;
                            _3211 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3198)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3198 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3198 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3198 + 3u)).x));
                            uint _3214 = (_3138 * 40u) + 24u;
                            vec4 _3227 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3214)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3214 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3214 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3214 + 3u)).x));
                            uint _3233 = (_3138 * 40u) + 28u;
                            vec4 _3246 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3233)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3233 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3233 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3233 + 3u)).x));
                            _3258 = fma(_2512, _3246.z, fma(_2511, _3246.y, _3246.x * _2510)) + _3246.w;
                            _3259 = !((fma(_2512, _3227.z, fma(_2511, _3227.y, _3227.x * _2510)) + _3227.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3259)
                            {
                                float _3286 = _3153.x - _2510;
                                float _3287 = _3153.y - _2511;
                                float _3288 = _3153.z - _2512;
                                float _3289 = dot(vec3(_3286, _3287, _3288), vec3(_3286, _3287, _3288));
                                float _3292 = inversesqrt(_3289);
                                float _3293 = _3292 * _3286;
                                float _3294 = _3292 * _3287;
                                float _3295 = _3292 * _3288;
                                float _3299 = 1.0 - (_3289 / (_3154 * _3154));
                                float _4368 = isnan(0.0) ? _3299 : (isnan(_3299) ? 0.0 : max(_3299, 0.0));
                                float _3300 = isnan(1.0) ? _4368 : (isnan(_4368) ? 1.0 : min(_4368, 1.0));
                                float _3304 = sqrt(_3289) * _3169.w;
                                float _3306 = 1.39999997615814208984375 / (_3304 + 1.39999997615814208984375);
                                float _3307 = _3306 * _3306;
                                float _3310 = ((1.0 - _3307) * dot(vec3(_3293, _3294, _3295), vec3(_773, _776, _779))) + _3307;
                                float _3313 = _3304 * _3304;
                                float _3317 = (fma(_2512, _3196.z, fma(_2511, _3196.y, _3196.x * _2510)) + _3196.w) / _3258;
                                float _3318 = (fma(_2512, _3211.z, fma(_2511, _3211.y, _3211.x * _2510)) + _3211.w) / _3258;
                                float _3322 = 1.0 - dot(vec2(_3317, _3318), vec2(_3317, _3318));
                                float _4384 = isnan(0.0) ? _3322 : (isnan(_3322) ? 0.0 : max(_3322, 0.0));
                                float _3323 = isnan(1.0) ? _4384 : (isnan(_4384) ? 1.0 : min(_4384, 1.0));
                                float _3324 = _3323 * (((isnan(0.0) ? _3310 : (isnan(_3310) ? 0.0 : max(_3310, 0.0))) * _3300) / ((_3313 * 0.699999988079071044921875) + 1.0));
                                float _3336 = exp2(log2(1.0 / ((_3313 * 3.5) + 5.0)) * 0.25);
                                float _3337 = 1.0 - _848;
                                float _3344 = sqrt(1.0 - ((1.0 - (_3337 * _3337)) * (1.0 - (_3336 * _3336))));
                                float _3345 = _3344 * _3344;
                                float _3346 = _3345 * _3345;
                                float _3347 = _3293 - _2795;
                                float _3348 = _3294 - _2796;
                                float _3349 = _3295 - _2797;
                                float _3353 = inversesqrt(dot(vec3(_3347, _3348, _3349), vec3(_3347, _3348, _3349)));
                                float _3357 = dot(vec3(_773, _776, _779), vec3((-0.0) - _2795, (-0.0) - _2796, (-0.0) - _2797));
                                float _4395 = isnan(0.0) ? _3357 : (isnan(_3357) ? 0.0 : max(_3357, 0.0));
                                float _3360 = isnan(1.0) ? _4395 : (isnan(_4395) ? 1.0 : min(_4395, 1.0));
                                float _3361 = dot(vec3(_773, _776, _779), vec3(_3353 * _3347, _3353 * _3348, _3353 * _3349));
                                float _4406 = isnan(0.0) ? _3361 : (isnan(_3361) ? 0.0 : max(_3361, 0.0));
                                float _3364 = isnan(1.0) ? _4406 : (isnan(_4406) ? 1.0 : min(_4406, 1.0));
                                float _3368 = ((_3364 * _3364) * (_3346 + (-1.0))) + 1.0;
                                float _3369 = _3306 * _3345;
                                float _3370 = _3369 * _3369;
                                float _3376 = ((1.0 - _3370) * dot(vec3(_773, _776, _779), vec3(_3293, _3294, _3295))) + _3370;
                                float _4417 = isnan(0.0) ? _3376 : (isnan(_3376) ? 0.0 : max(_3376, 0.0));
                                float _3377 = isnan(1.0) ? _4417 : (isnan(_4417) ? 1.0 : min(_4417, 1.0));
                                float _3378 = 1.0 - _3345;
                                float _3388 = (0.5 / (((_3377 * ((_3360 * _3378) + _3345)) + 9.9999999392252902907785028219223e-09) + (((_3377 * _3378) + _3345) * _3360))) * _3377;
                                float _4428 = isnan(0.0) ? _3388 : (isnan(_3388) ? 0.0 : max(_3388, 0.0));
                                float _3398 = (_3323 * _3300) * (((_3346 * 3.1415927410125732421875) * (isnan(1.0) ? _4428 : (isnan(_4428) ? 1.0 : min(_4428, 1.0)))) / ((_3368 * _3368) * ((_3313 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3398 * _3181.x;
                                frontier_phi_73_pred_1 = _3398 * _3181.y;
                                frontier_phi_73_pred_2 = _3324 * _3169.z;
                                frontier_phi_73_pred_3 = _3324 * _3169.y;
                                frontier_phi_73_pred_4 = _3324 * _3169.x;
                                frontier_phi_73_pred_5 = _3398 * _3181.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3402 = frontier_phi_73_pred;
                            _3403 = frontier_phi_73_pred_1;
                            _3407 = frontier_phi_73_pred_2;
                            _3406 = frontier_phi_73_pred_3;
                            _3405 = frontier_phi_73_pred_4;
                            _3404 = frontier_phi_73_pred_5;
                            _3111 = _3405 + _3124;
                            _3112 = _3406 + _3125;
                            _3113 = _3407 + _3126;
                            _3108 = _3402 + _3121;
                            _3109 = _3403 + _3122;
                            _3110 = _3404 + _3123;
                            if (_3128 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3121 = _3108;
                                _3122 = _3109;
                                _3123 = _3110;
                                _3124 = _3111;
                                _3125 = _3112;
                                _3126 = _3113;
                                _3127 = _3128;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3111;
                        frontier_phi_67_pred_1 = _3112;
                        frontier_phi_67_pred_2 = _3113;
                        frontier_phi_67_pred_3 = _3110;
                        frontier_phi_67_pred_4 = _3109;
                        frontier_phi_67_pred_5 = _3108;
                    }
                    _2776 = frontier_phi_67_pred;
                    _2778 = frontier_phi_67_pred_1;
                    _2780 = frontier_phi_67_pred_2;
                    _2774 = frontier_phi_67_pred_3;
                    _2772 = frontier_phi_67_pred_4;
                    _2770 = frontier_phi_67_pred_5;
                    uint _2915 = _2914 + 1u;
                    if (_2915 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2908 = _2770;
                        _2909 = _2772;
                        _2910 = _2774;
                        _2911 = _2776;
                        _2912 = _2778;
                        _2913 = _2780;
                        _2914 = _2915;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2778;
                frontier_phi_55_56_ladder_1 = _2780;
                frontier_phi_55_56_ladder_2 = _2776;
                frontier_phi_55_56_ladder_3 = _2774;
                frontier_phi_55_56_ladder_4 = _2772;
                frontier_phi_55_56_ladder_5 = _2770;
            }
            else
            {
                frontier_phi_55_56_ladder = _2665;
                frontier_phi_55_56_ladder_1 = _2667;
                frontier_phi_55_56_ladder_2 = _2663;
                frontier_phi_55_56_ladder_3 = _2661;
                frontier_phi_55_56_ladder_4 = _2659;
                frontier_phi_55_56_ladder_5 = _2657;
            }
            _2769 = frontier_phi_55_56_ladder_5;
            _2771 = frontier_phi_55_56_ladder_4;
            _2773 = frontier_phi_55_56_ladder_3;
            _2775 = frontier_phi_55_56_ladder_2;
            _2777 = frontier_phi_55_56_ladder;
            _2779 = frontier_phi_55_56_ladder_1;
        }
        float _2784 = isnan(1.0) ? _832 : (isnan(_832) ? 1.0 : min(_832, 1.0));
        _2569 = (_2784 * _2775) + _2005;
        _2571 = (_2784 * _2777) + _2007;
        _2573 = (_2784 * _2779) + _2009;
        _2575 = ((_2769 * _817) * _2784) + _2350;
        _2577 = ((_2771 * _819) * _2784) + _2352;
        _2579 = ((_2773 * _820) * _2784) + _2354;
    }
    else
    {
        _2569 = _2005;
        _2571 = _2007;
        _2573 = _2009;
        _2575 = _2350;
        _2577 = _2352;
        _2579 = _2354;
    }
    float _4444 = isnan(0.0) ? _807 : (isnan(_807) ? 0.0 : max(_807, 0.0));
    float _4455 = isnan(0.0) ? _808 : (isnan(_808) ? 0.0 : max(_808, 0.0));
    float _4466 = isnan(0.0) ? _809 : (isnan(_809) ? 0.0 : max(_809, 0.0));
    uint _2599 = _792 + 6u;
    float _2607 = _754 / cbSceneParam._m0[86u].x;
    float _2608 = _755 / cbSceneParam._m0[86u].y;
    vec4 _2622 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2607, _2608, (log2((isnan(cbSceneParam._m0[77u].w) ? _689 : (isnan(_689) ? cbSceneParam._m0[77u].w : min(_689, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2624 = _2622.x;
    float _2625 = _2622.y;
    float _2626 = _2622.z;
    float _2627 = _2622.w;
    float _2719;
    float _2721;
    float _2723;
    float _2725;
    if (_689 > cbSceneParam._m0[78u].w)
    {
        float _2682 = isnan(_689) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _689 : min(cbSceneParam._m0[80u].w, _689));
        float _2683 = _2682 / _689;
        float _2694 = _2683 * _739;
        float _2695 = _740 * _2683;
        float _2696 = (-0.0) - _2695;
        float _2697 = _2683 * _741;
        float _2699 = (cbSceneParam._m0[77u].w * _2696) / _2682;
        float _2700 = _2699 + cbSceneParam._m0[79u].w;
        float _2701 = cbSceneParam._m0[79u].w - _2695;
        float _2707 = sqrt(((_2694 * _2694) + (_2695 * _2695)) + (_2697 * _2697));
        float _2710 = (1.0 - (cbSceneParam._m0[77u].w / _2682)) * _2707;
        float _2715 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2717 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2870;
        if (abs((_2696 - _2699) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2870 = ((((_2700 > 0.0) ? exp2(_2715 * _2700) : (2.0 - exp2(_2717 * _2700))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2710;
        }
        else
        {
            float _2830 = 1.0 / cbSceneParam._m0[80u].x;
            float _2831 = isnan(_2701) ? _2700 : (isnan(_2700) ? _2701 : max(_2700, _2701));
            float _2832 = isnan(_2701) ? _2700 : (isnan(_2700) ? _2701 : min(_2700, _2701));
            float _2841 = isnan(0.0) ? _2831 : (isnan(_2831) ? 0.0 : min(_2831, 0.0));
            float _2842 = isnan(0.0) ? _2832 : (isnan(_2832) ? 0.0 : min(_2832, 0.0));
            _2870 = ((abs(_2707 / _2696) * cbSceneParam._m0[80u].y) * ((((_2841 - _2842) * 2.0) - ((exp2(_2715 * (isnan(0.0) ? _2831 : (isnan(_2831) ? 0.0 : max(_2831, 0.0)))) - exp2(_2715 * (isnan(0.0) ? _2832 : (isnan(_2832) ? 0.0 : max(_2832, 0.0))))) * _2830)) - ((exp2(_2717 * _2841) - exp2(_2717 * _2842)) * _2830))) + (_2710 * cbSceneParam._m0[80u].z);
        }
        vec4 _2872 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2607, _2608, 1.0), 0.0);
        float _2881 = exp2((_2870 * (-1.44269502162933349609375)) * (1.0 - _2872.w));
        float _2882 = log2(_2881);
        float _2898 = log2(_2627);
        _2719 = (exp2(_2898 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2882 * cbSceneParam._m0[78u].x)) * _2872.x) / cbSceneParam._m0[78u].x)) + _2624;
        _2721 = (exp2(_2898 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2882 * cbSceneParam._m0[78u].y)) * _2872.y) / cbSceneParam._m0[78u].y)) + _2625;
        _2723 = (exp2(_2898 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2882 * cbSceneParam._m0[78u].z)) * _2872.z) / cbSceneParam._m0[78u].z)) + _2626;
        _2725 = _2881 * _2627;
    }
    else
    {
        _2719 = _2624;
        _2721 = _2625;
        _2723 = _2626;
        _2725 = _2627;
    }
    float _2737 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2738 = _2737 == 3.0;
    float _2739 = log2(_2725);
    float _2746 = exp2(_2739 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4444 : (isnan(_4444) ? 1.0 : min(_4444, 1.0))) * (_2569 + ((isnan(0.0) ? _1563 : (isnan(_1563) ? 0.0 : max(_1563, 0.0))) * _832))) + ((_2575 + ((isnan(0.0) ? _1857 : (isnan(_1857) ? 0.0 : max(_1857, 0.0))) * _1642)) * cbPerFrame._m0[3u].x));
    float _2747 = exp2(_2739 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4455 : (isnan(_4455) ? 1.0 : min(_4455, 1.0))) * (_2571 + ((isnan(0.0) ? _1566 : (isnan(_1566) ? 0.0 : max(_1566, 0.0))) * _832))) + ((_2577 + ((isnan(0.0) ? _1860 : (isnan(_1860) ? 0.0 : max(_1860, 0.0))) * _1642)) * cbPerFrame._m0[3u].x));
    float _2748 = exp2(_2739 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4466 : (isnan(_4466) ? 1.0 : min(_4466, 1.0))) * (_2573 + ((isnan(0.0) ? _1569 : (isnan(_1569) ? 0.0 : max(_1569, 0.0))) * _832))) + ((_2579 + ((isnan(0.0) ? _1863 : (isnan(_1863) ? 0.0 : max(_1863, 0.0))) * _1642)) * cbPerFrame._m0[3u].x));
    float _2757 = (_2737 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2757 * (_2738 ? _2746 : (_2746 + (cbSceneParam._m0[72u].w * _2719)));
    SV_Target.y = _2757 * (_2738 ? _2747 : (_2747 + (cbSceneParam._m0[72u].w * _2721)));
    SV_Target.z = _2757 * (_2738 ? _2748 : (_2748 + (cbSceneParam._m0[72u].w * _2723)));
    SV_Target.w = cbInstanceData._m0[_2599].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2599].w;
}


