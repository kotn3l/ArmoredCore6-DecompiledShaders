#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[20];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_19;
layout(set = 0, binding = 11) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_2;
layout(set = 0, binding = 12) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_20;
layout(set = 0, binding = 13) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_3;
layout(set = 0, binding = 14) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_5;
layout(set = 0, binding = 15) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_6;
layout(set = 0, binding = 17) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_8;
layout(set = 0, binding = 18) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_11;
layout(set = 0, binding = 3) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_14;
layout(set = 0, binding = 6) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_15;
layout(set = 0, binding = 7) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_16;
layout(set = 0, binding = 8) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_17;
layout(set = 0, binding = 9) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_18;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1337;
float _4003;
float _4004;
float _4005;
float _4006;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _219 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _220 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _221 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _227 = inversesqrt(dot(vec3(_219, _220, _221), vec3(_219, _220, _221)));
    float _234 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _241 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _264 = sin(cbMtdParam._m0[18u].x);
    float _265 = cos(cbMtdParam._m0[18u].x);
    float _266 = TEXCOORD.x - cbMtdParam._m0[17u].w;
    float _267 = TEXCOORD.y - cbMtdParam._m0[17u].w;
    float _275 = (cbMtdParam._m0[17u].w + cbMtdParam._m0[19u].y) + fma(_267, (-0.0) - _264, _265 * _266);
    float _277 = (cbMtdParam._m0[17u].w + cbMtdParam._m0[19u].z) + fma(_267, _265, _266 * _264);
    vec4 _290 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * _275) + cbTextureTilingScale._m0[1u].z, (_277 * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w));
    float _296 = _290.x * cbMtdParam._m0[10u].x;
    float _297 = _290.y * cbMtdParam._m0[10u].y;
    float _298 = _290.z * cbMtdParam._m0[10u].z;
    vec4 _316 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w));
    vec4 _335 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_0, SS_WrapLinear), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _360 = cbMtdParam._m0[19u].x * texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.x) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD.y) + cbTextureTilingScale._m0[13u].w)).x;
    float _371 = ((cbMtdParam._m0[15u].x * (-1.39999997615814208984375)) * (((1.0 - _335.x) * 2.0) - _360)) + 1.0;
    float _4015 = isnan(0.0) ? _371 : (isnan(_371) ? 0.0 : max(_371, 0.0));
    float _372 = isnan(1.0) ? _4015 : (isnan(_4015) ? 1.0 : min(_4015, 1.0));
    float _379 = (_372 * ((_316.x * cbMtdParam._m0[11u].x) - _296)) + _296;
    float _380 = (_372 * ((_316.y * cbMtdParam._m0[11u].y) - _297)) + _297;
    float _381 = (_372 * ((_316.z * cbMtdParam._m0[11u].z) - _298)) + _298;
    vec4 _399 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_8, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[17u].x * TEXCOORD.x) + cbTextureTilingScale._m0[17u].z, (cbTextureTilingScale._m0[17u].y * TEXCOORD.y) + cbTextureTilingScale._m0[17u].w));
    float _412 = (((((1.0 - _335.y) * 2.0) - _360) * (-1.39999997615814208984375)) * cbMtdParam._m0[18u].z) + 1.0;
    float _4026 = isnan(0.0) ? _412 : (isnan(_412) ? 0.0 : max(_412, 0.0));
    float _413 = isnan(1.0) ? _4026 : (isnan(_4026) ? 1.0 : min(_4026, 1.0));
    float _420 = (((_399.x * cbMtdParam._m0[12u].x) - _379) * _413) + _379;
    float _421 = (_413 * ((_399.y * cbMtdParam._m0[12u].y) - _380)) + _380;
    float _422 = (_413 * ((_399.z * cbMtdParam._m0[12u].z) - _381)) + _381;
    vec4 _439 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _452 = (((((1.0 - _335.z) * 2.0) - _360) * (-1.39999997615814208984375)) * cbMtdParam._m0[18u].w) + 1.0;
    float _4037 = isnan(0.0) ? _452 : (isnan(_452) ? 0.0 : max(_452, 0.0));
    float _453 = isnan(1.0) ? _4037 : (isnan(_4037) ? 1.0 : min(_4037, 1.0));
    float _460 = (((_439.x * cbMtdParam._m0[13u].x) - _420) * _453) + _420;
    float _461 = (_453 * ((_439.y * cbMtdParam._m0[13u].y) - _421)) + _421;
    float _462 = (_453 * ((_439.z * cbMtdParam._m0[13u].z) - _422)) + _422;
    vec4 _482 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_20, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.z) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.w) + cbTextureTilingScale._m0[12u].w));
    float _511 = (TEXCOORD_5.x - ((cbMtdParam._m0[15u].w * (1.0 - TEXCOORD_5.x)) * (texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[18u].x * TEXCOORD.z) + cbTextureTilingScale._m0[18u].z, (cbTextureTilingScale._m0[18u].y * TEXCOORD.w) + cbTextureTilingScale._m0[18u].w)).x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[15u].z + 1.0);
    float _4048 = isnan(0.0) ? _511 : (isnan(_511) ? 0.0 : max(_511, 0.0));
    float _512 = isnan(1.0) ? _4048 : (isnan(_4048) ? 1.0 : min(_4048, 1.0));
    float _519 = (_512 * ((_482.x * cbMtdParam._m0[14u].x) - _460)) + _460;
    float _520 = (_512 * ((_482.y * cbMtdParam._m0[14u].y) - _461)) + _461;
    float _521 = (_512 * ((_482.z * cbMtdParam._m0[14u].z) - _462)) + _462;
    vec4 _534 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * _275) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _277) + cbTextureTilingScale._m0[5u].w));
    float _536 = _534.x;
    float _554 = ((texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w)).x - _536) * _372) + _536;
    float _572 = ((texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w)).x - _554) * _413) + _554;
    float _589 = ((texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w)).x - _572) * _453) + _572;
    float _593 = (_589 - (_589 * TEXCOORD_5.x)) * cbMtdParam._m0[18u].y;
    vec4 _606 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.z) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.w) + cbTextureTilingScale._m0[3u].w));
    vec4 _628 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[14u].x * _275) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _277) + cbTextureTilingScale._m0[14u].w));
    float _630 = _628.x;
    float _631 = _628.y;
    float _634 = cbMtdParam._m0[17u].y * _628.z;
    vec4 _646 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * TEXCOORD.x) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * TEXCOORD.y) + cbTextureTilingScale._m0[15u].w));
    float _655 = (((cbMtdParam._m0[17u].x * _646.z) - _634) * _372) + _634;
    vec4 _668 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_15, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _680 = (((cbMtdParam._m0[16u].w * _668.z) - _655) * _413) + _655;
    vec4 _693 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _702 = (((cbMtdParam._m0[16u].z * _693.z) - _680) * _453) + _680;
    float _707 = ((cbMtdParam._m0[16u].x * TEXCOORD_5.x) * ((_606.z * cbMtdParam._m0[17u].z) - _702)) + _702;
    float _712 = ((_646.x - _630) * _372) + _630;
    float _713 = ((_646.y - _631) * _372) + _631;
    float _718 = ((_668.x - _712) * _413) + _712;
    float _719 = ((_668.y - _713) * _413) + _713;
    float _728 = ((((_693.x - _718) * _453) + _718) * 2.0) + (-1.0);
    float _729 = ((((_693.y - _719) * _453) + _719) * 2.0) + (-1.0);
    float _730 = dot(vec2(_728, _729), vec2(_728, _729));
    float _4059 = isnan(0.0) ? _730 : (isnan(_730) ? 0.0 : max(_730, 0.0));
    float _735 = sqrt(1.0 - (isnan(1.0) ? _4059 : (isnan(_4059) ? 1.0 : min(_4059, 1.0))));
    float _741 = ((((_606.x * 2.0) + (-1.0)) * TEXCOORD_5.x) * cbMtdParam._m0[15u].y) + _728;
    float _742 = ((((_606.y * 2.0) + (-1.0)) * TEXCOORD_5.y) * cbMtdParam._m0[15u].y) + _729;
    float _745 = fma(_735, _234 * NORMAL.x, fma(_742, _241 * TANGENT.x, (_227 * _219) * _741));
    float _748 = fma(_735, _234 * NORMAL.y, fma(_742, _241 * TANGENT.y, (_227 * _220) * _741));
    float _751 = fma(_735, _234 * NORMAL.z, fma(_742, _241 * TANGENT.z, (_227 * _221) * _741));
    float _755 = inversesqrt(dot(vec3(_745, _748, _751), vec3(_745, _748, _751)));
    float _756 = _755 * _745;
    float _757 = _755 * _748;
    float _758 = _755 * _751;
    float _4070 = isnan(0.0) ? _707 : (isnan(_707) ? 0.0 : max(_707, 0.0));
    float _759 = isnan(1.0) ? _4070 : (isnan(_4070) ? 1.0 : min(_4070, 1.0));
    float _4081 = isnan(0.0) ? _519 : (isnan(_519) ? 0.0 : max(_519, 0.0));
    float _4092 = isnan(0.0) ? _520 : (isnan(_520) ? 0.0 : max(_520, 0.0));
    float _4103 = isnan(0.0) ? _521 : (isnan(_521) ? 0.0 : max(_521, 0.0));
    float _4114 = isnan(0.0) ? _593 : (isnan(_593) ? 0.0 : max(_593, 0.0));
    float _763 = isnan(1.0) ? _4114 : (isnan(_4114) ? 1.0 : min(_4114, 1.0));
    float _779 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _819 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _829 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _819);
    float _830 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _819);
    float _831 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _819);
    float _835 = inversesqrt(dot(vec3(_829, _830, _831), vec3(_829, _830, _831)));
    float _836 = _829 * _835;
    float _837 = _830 * _835;
    float _838 = _831 * _835;
    vec4 _843 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _845 = _843.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1017 = sqrt(((_829 * _829) + (_830 * _830)) + (_831 * _831));
        float _1023 = (cbMatDynParam._m0[5u].x * _1017) + cbMatDynParam._m0[5u].y;
        float _4125 = isnan(0.0) ? _1023 : (isnan(_1023) ? 0.0 : max(_1023, 0.0));
        float _1024 = isnan(1.0) ? _4125 : (isnan(_4125) ? 1.0 : min(_4125, 1.0));
        float _1028 = (cbMatDynParam._m0[5u].z * _1017) + cbMatDynParam._m0[5u].w;
        float _4136 = isnan(0.0) ? _1028 : (isnan(_1028) ? 0.0 : max(_1028, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4136 : (isnan(_4136) ? 1.0 : min(_4136, 1.0))) - _1024)) + _1024) < ((_845 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _856 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _857 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _875 = fma(_758, cbSceneParam._m0[5u].z, fma(_757, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _756));
    float _878 = fma(_758, cbSceneParam._m0[6u].z, fma(_757, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _756));
    float _881 = fma(_758, cbSceneParam._m0[7u].z, fma(_757, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _756));
    uint _894 = uint(roundEven(NORMAL.w)) * 13u;
    uint _895 = _894 + 9u;
    uint _896 = _895 + uint(cbMatDynParam._m0[0u].w);
    float _902 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4081 : (isnan(_4081) ? 1.0 : min(_4081, 1.0)))) * cbInstanceData._m0[_896].x;
    float _903 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4092 : (isnan(_4092) ? 1.0 : min(_4092, 1.0)))) * cbInstanceData._m0[_896].y;
    float _904 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4103 : (isnan(_4103) ? 1.0 : min(_4103, 1.0)))) * cbInstanceData._m0[_896].z;
    float _4147 = isnan(0.0) ? _902 : (isnan(_902) ? 0.0 : max(_902, 0.0));
    float _905 = isnan(1.0) ? _4147 : (isnan(_4147) ? 1.0 : min(_4147, 1.0));
    float _4158 = isnan(0.0) ? _903 : (isnan(_903) ? 0.0 : max(_903, 0.0));
    float _906 = isnan(1.0) ? _4158 : (isnan(_4158) ? 1.0 : min(_4158, 1.0));
    float _4169 = isnan(0.0) ? _904 : (isnan(_904) ? 0.0 : max(_904, 0.0));
    float _907 = isnan(1.0) ? _4169 : (isnan(_4169) ? 1.0 : min(_4169, 1.0));
    float _908 = 1.0 - _763;
    float _909 = _905 * _908;
    float _910 = _906 * _908;
    float _911 = _907 * _908;
    float _916 = (_905 + (-0.039999999105930328369140625)) * _763;
    float _917 = (_906 + (-0.039999999105930328369140625)) * _763;
    float _918 = (_907 + (-0.039999999105930328369140625)) * _763;
    float _919 = _916 + 0.039999999105930328369140625;
    float _921 = _917 + 0.039999999105930328369140625;
    float _922 = _918 + 0.039999999105930328369140625;
    vec4 _931 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _856, cbSceneParam._m0[86u].y * _857));
    float _934 = _931.x * TEXCOORD_5.w;
    float _935 = dot(vec3(_756, _757, _758), vec3(_836, _837, _838));
    float _938 = _935 * 2.0;
    float _942 = (_938 * _756) - _836;
    float _943 = (_938 * _757) - _837;
    float _944 = (_938 * _758) - _838;
    float _948 = abs(dot(vec3(_836, _837, _838), vec3(_756, _757, _758)));
    float _4180 = isnan(0.0) ? _948 : (isnan(_948) ? 0.0 : max(_948, 0.0));
    float _950 = sqrt(_759);
    float _963 = exp2((_950 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4180 : (isnan(_4180) ? 1.0 : min(_4180, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_950 * 3.0));
    float _969 = (1.0 - _963) * ((_950 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _970 = _963 * _950;
    float _998 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1002 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1006 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1336;
    float _1338;
    float _1339;
    float _1340;
    float _1341;
    float _1342;
    float _1343;
    float _1344;
    float _1345;
    float _1346;
    float _1347;
    float _1348;
    float _1349;
    float _1350;
    float _1351;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1061 = fma(_1006, cbModelParam._m0[26u].z, fma(_1002, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _998));
        float _1065 = fma(_1006, cbModelParam._m0[27u].z, fma(_1002, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _998));
        float _1069 = fma(_1006, cbModelParam._m0[28u].z, fma(_1002, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _998));
        float _1094 = _998 + _756;
        float _1095 = _1002 + _757;
        float _1096 = _1006 + _758;
        float _1106 = fma(_1096, cbModelParam._m0[26u].z, fma(_1095, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1094)) - _1061;
        float _1107 = fma(_1096, cbModelParam._m0[27u].z, fma(_1095, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1094)) - _1065;
        float _1108 = fma(_1096, cbModelParam._m0[28u].z, fma(_1095, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1094)) - _1069;
        float _1112 = inversesqrt(dot(vec3(_1106, _1107, _1108), vec3(_1106, _1107, _1108)));
        float _1125 = ((_1112 * _1106) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1061 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1126 = ((_1112 * _1107) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1065 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1127 = ((_1112 * _1108) / cbModelParam._m0[34u].z) + ((((((_1069 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1130 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1125, _1126, _1127), 0.0);
        vec4 _1137 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1125, _1126, _1127), 0.0);
        vec4 _1144 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1125, _1126, _1127), 0.0);
        vec4 _1151 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1125, _1126, _1127), 0.0);
        float _1164 = exp2((_1130.w + (-0.5)) * 20.0) * 2.0;
        float _1165 = _1164 * (_1130.x + (-0.5));
        float _1166 = _1164 * (_1130.y + (-0.5));
        float _1167 = _1164 * (_1130.z + (-0.5));
        float _1174 = exp2((_1137.w + (-0.5)) * 20.0) * 2.0;
        float _1175 = _1174 * (_1137.x + (-0.5));
        float _1176 = _1174 * (_1137.y + (-0.5));
        float _1177 = _1174 * (_1137.z + (-0.5));
        float _1184 = exp2((_1144.w + (-0.5)) * 20.0) * 2.0;
        float _1185 = _1184 * (_1144.x + (-0.5));
        float _1186 = _1184 * (_1144.y + (-0.5));
        float _1187 = _1184 * (_1144.z + (-0.5));
        float _1194 = exp2((_1151.w + (-0.5)) * 20.0) * 2.0;
        float _1195 = _1194 * (_1151.x + (-0.5));
        float _1196 = _1194 * (_1151.y + (-0.5));
        float _1197 = _1194 * (_1151.z + (-0.5));
        float _1198 = isnan(0.0) ? _1195 : (isnan(_1195) ? 0.0 : max(_1195, 0.0));
        float _1199 = isnan(0.0) ? _1196 : (isnan(_1196) ? 0.0 : max(_1196, 0.0));
        float _1200 = isnan(0.0) ? _1197 : (isnan(_1197) ? 0.0 : max(_1197, 0.0));
        float _1201 = _1165 * 0.5;
        float _1202 = _1175 * 0.5;
        float _1203 = _1185 * 0.5;
        float _1204 = dot(vec3(_1201, _1202, _1203), vec3(_1201, _1202, _1203));
        float _1209 = (_1204 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1204);
        float _1218 = (dot(vec3(_756, _757, _758), vec3(_1209 * _1201, _1209 * _1202, _1209 * _1203)) + 1.0) * 0.5;
        float _4206 = isnan(0.0) ? _1218 : (isnan(_1218) ? 0.0 : max(_1218, 0.0));
        float _1228 = sqrt(((_1202 * _1202) + (_1201 * _1201)) + (_1203 * _1203)) / (_1198 + 9.9999997473787516355514526367188e-06);
        float _4217 = isnan(0.0) ? _1228 : (isnan(_1228) ? 0.0 : max(_1228, 0.0));
        float _1229 = isnan(1.0) ? _4217 : (isnan(_4217) ? 1.0 : min(_4217, 1.0));
        float _1230 = _1229 * 2.0;
        float _1234 = (1.0 - _1229) / (_1229 + 1.0);
        float _4228 = isnan(0.0) ? _1234 : (isnan(_1234) ? 0.0 : max(_1234, 0.0));
        float _1235 = isnan(1.0) ? _4228 : (isnan(_4228) ? 1.0 : min(_4228, 1.0));
        float _1244 = ((((1.0 - _1235) * (_1230 + 2.0)) * exp2(log2(isnan(1.0) ? _4206 : (isnan(_4206) ? 1.0 : min(_4206, 1.0))) * (_1230 + 1.0))) + _1235) * _1198;
        float _1245 = _1166 * 0.5;
        float _1246 = _1176 * 0.5;
        float _1247 = _1186 * 0.5;
        float _1248 = dot(vec3(_1245, _1246, _1247), vec3(_1245, _1246, _1247));
        float _1253 = (_1248 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1248);
        float _1261 = (dot(vec3(_756, _757, _758), vec3(_1253 * _1245, _1253 * _1246, _1253 * _1247)) + 1.0) * 0.5;
        float _4239 = isnan(0.0) ? _1261 : (isnan(_1261) ? 0.0 : max(_1261, 0.0));
        float _1270 = sqrt(((_1246 * _1246) + (_1245 * _1245)) + (_1247 * _1247)) / (_1199 + 9.9999997473787516355514526367188e-06);
        float _4250 = isnan(0.0) ? _1270 : (isnan(_1270) ? 0.0 : max(_1270, 0.0));
        float _1271 = isnan(1.0) ? _4250 : (isnan(_4250) ? 1.0 : min(_4250, 1.0));
        float _1272 = _1271 * 2.0;
        float _1276 = (1.0 - _1271) / (_1271 + 1.0);
        float _4261 = isnan(0.0) ? _1276 : (isnan(_1276) ? 0.0 : max(_1276, 0.0));
        float _1277 = isnan(1.0) ? _4261 : (isnan(_4261) ? 1.0 : min(_4261, 1.0));
        float _1286 = ((((1.0 - _1277) * (_1272 + 2.0)) * exp2(log2(isnan(1.0) ? _4239 : (isnan(_4239) ? 1.0 : min(_4239, 1.0))) * (_1272 + 1.0))) + _1277) * _1199;
        float _1287 = _1167 * 0.5;
        float _1288 = _1177 * 0.5;
        float _1289 = _1187 * 0.5;
        float _1290 = dot(vec3(_1287, _1288, _1289), vec3(_1287, _1288, _1289));
        float _1295 = (_1290 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1290);
        float _1303 = (dot(vec3(_756, _757, _758), vec3(_1295 * _1287, _1295 * _1288, _1295 * _1289)) + 1.0) * 0.5;
        float _4272 = isnan(0.0) ? _1303 : (isnan(_1303) ? 0.0 : max(_1303, 0.0));
        float _1312 = sqrt(((_1288 * _1288) + (_1287 * _1287)) + (_1289 * _1289)) / (_1200 + 9.9999997473787516355514526367188e-06);
        float _4283 = isnan(0.0) ? _1312 : (isnan(_1312) ? 0.0 : max(_1312, 0.0));
        float _1313 = isnan(1.0) ? _4283 : (isnan(_4283) ? 1.0 : min(_4283, 1.0));
        float _1314 = _1313 * 2.0;
        float _1318 = (1.0 - _1313) / (_1313 + 1.0);
        float _4294 = isnan(0.0) ? _1318 : (isnan(_1318) ? 0.0 : max(_1318, 0.0));
        float _1319 = isnan(1.0) ? _4294 : (isnan(_4294) ? 1.0 : min(_4294, 1.0));
        float _1328 = ((((1.0 - _1319) * (_1314 + 2.0)) * exp2(log2(isnan(1.0) ? _4272 : (isnan(_4272) ? 1.0 : min(_4272, 1.0))) * (_1314 + 1.0))) + _1319) * _1200;
        _1336 = _1167;
        _1338 = _1166;
        _1339 = _1165;
        _1340 = _1177;
        _1341 = _1176;
        _1342 = _1175;
        _1343 = _1187;
        _1344 = _1186;
        _1345 = _1185;
        _1346 = _1200;
        _1347 = _1199;
        _1348 = _1198;
        _1349 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1244 : (isnan(_1244) ? 0.0 : max(_1244, 0.0)));
        _1350 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1286 : (isnan(_1286) ? 0.0 : max(_1286, 0.0)));
        _1351 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1328 : (isnan(_1328) ? 0.0 : max(_1328, 0.0)));
    }
    else
    {
        _1336 = _1337;
        _1338 = _1337;
        _1339 = _1337;
        _1340 = _1337;
        _1341 = _1337;
        _1342 = _1337;
        _1343 = _1337;
        _1344 = _1337;
        _1345 = _1337;
        _1346 = _1337;
        _1347 = _1337;
        _1348 = _1337;
        _1349 = 0.0;
        _1350 = 0.0;
        _1351 = 0.0;
    }
    float _1649;
    float _1650;
    float _1651;
    float _1652;
    float _1653;
    float _1654;
    float _1655;
    float _1656;
    float _1657;
    float _1658;
    float _1659;
    float _1660;
    float _1661;
    float _1662;
    float _1663;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1380 = fma(_1006, cbModelParam._m0[30u].z, fma(_1002, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _998));
        float _1384 = fma(_1006, cbModelParam._m0[31u].z, fma(_1002, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _998));
        float _1388 = fma(_1006, cbModelParam._m0[32u].z, fma(_1002, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _998));
        float _1411 = _998 + _756;
        float _1412 = _1002 + _757;
        float _1413 = _1006 + _758;
        float _1423 = fma(_1413, cbModelParam._m0[30u].z, fma(_1412, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1411)) - _1380;
        float _1424 = fma(_1413, cbModelParam._m0[31u].z, fma(_1412, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1411)) - _1384;
        float _1425 = fma(_1413, cbModelParam._m0[32u].z, fma(_1412, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1411)) - _1388;
        float _1429 = inversesqrt(dot(vec3(_1423, _1424, _1425), vec3(_1423, _1424, _1425)));
        float _1442 = ((_1429 * _1423) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1380 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1443 = ((_1429 * _1424) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1384 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1444 = ((_1429 * _1425) / cbModelParam._m0[35u].z) + ((((((_1388 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1446 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1442, _1443, _1444), 0.0);
        vec4 _1453 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1442, _1443, _1444), 0.0);
        vec4 _1460 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1442, _1443, _1444), 0.0);
        vec4 _1467 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1442, _1443, _1444), 0.0);
        float _1479 = exp2((_1446.w + (-0.5)) * 20.0) * 2.0;
        float _1480 = _1479 * (_1446.x + (-0.5));
        float _1481 = _1479 * (_1446.y + (-0.5));
        float _1482 = _1479 * (_1446.z + (-0.5));
        float _1489 = exp2((_1453.w + (-0.5)) * 20.0) * 2.0;
        float _1490 = _1489 * (_1453.x + (-0.5));
        float _1491 = _1489 * (_1453.y + (-0.5));
        float _1492 = _1489 * (_1453.z + (-0.5));
        float _1499 = exp2((_1460.w + (-0.5)) * 20.0) * 2.0;
        float _1500 = _1499 * (_1460.x + (-0.5));
        float _1501 = _1499 * (_1460.y + (-0.5));
        float _1502 = _1499 * (_1460.z + (-0.5));
        float _1509 = exp2((_1467.w + (-0.5)) * 20.0) * 2.0;
        float _1510 = _1509 * (_1467.x + (-0.5));
        float _1511 = _1509 * (_1467.y + (-0.5));
        float _1512 = _1509 * (_1467.z + (-0.5));
        float _1513 = isnan(0.0) ? _1510 : (isnan(_1510) ? 0.0 : max(_1510, 0.0));
        float _1514 = isnan(0.0) ? _1511 : (isnan(_1511) ? 0.0 : max(_1511, 0.0));
        float _1515 = isnan(0.0) ? _1512 : (isnan(_1512) ? 0.0 : max(_1512, 0.0));
        float _1516 = _1480 * 0.5;
        float _1517 = _1490 * 0.5;
        float _1518 = _1500 * 0.5;
        float _1519 = dot(vec3(_1516, _1517, _1518), vec3(_1516, _1517, _1518));
        float _1524 = (_1519 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1519);
        float _1532 = (dot(vec3(_756, _757, _758), vec3(_1524 * _1516, _1524 * _1517, _1524 * _1518)) + 1.0) * 0.5;
        float _4335 = isnan(0.0) ? _1532 : (isnan(_1532) ? 0.0 : max(_1532, 0.0));
        float _1541 = sqrt(((_1517 * _1517) + (_1516 * _1516)) + (_1518 * _1518)) / (_1513 + 9.9999997473787516355514526367188e-06);
        float _4346 = isnan(0.0) ? _1541 : (isnan(_1541) ? 0.0 : max(_1541, 0.0));
        float _1542 = isnan(1.0) ? _4346 : (isnan(_4346) ? 1.0 : min(_4346, 1.0));
        float _1543 = _1542 * 2.0;
        float _1547 = (1.0 - _1542) / (_1542 + 1.0);
        float _4357 = isnan(0.0) ? _1547 : (isnan(_1547) ? 0.0 : max(_1547, 0.0));
        float _1548 = isnan(1.0) ? _4357 : (isnan(_4357) ? 1.0 : min(_4357, 1.0));
        float _1557 = ((((1.0 - _1548) * (_1543 + 2.0)) * exp2(log2(isnan(1.0) ? _4335 : (isnan(_4335) ? 1.0 : min(_4335, 1.0))) * (_1543 + 1.0))) + _1548) * _1513;
        float _1558 = _1481 * 0.5;
        float _1559 = _1491 * 0.5;
        float _1560 = _1501 * 0.5;
        float _1561 = dot(vec3(_1558, _1559, _1560), vec3(_1558, _1559, _1560));
        float _1566 = (_1561 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1561);
        float _1574 = (dot(vec3(_756, _757, _758), vec3(_1566 * _1558, _1566 * _1559, _1566 * _1560)) + 1.0) * 0.5;
        float _4368 = isnan(0.0) ? _1574 : (isnan(_1574) ? 0.0 : max(_1574, 0.0));
        float _1583 = sqrt(((_1559 * _1559) + (_1558 * _1558)) + (_1560 * _1560)) / (_1514 + 9.9999997473787516355514526367188e-06);
        float _4379 = isnan(0.0) ? _1583 : (isnan(_1583) ? 0.0 : max(_1583, 0.0));
        float _1584 = isnan(1.0) ? _4379 : (isnan(_4379) ? 1.0 : min(_4379, 1.0));
        float _1585 = _1584 * 2.0;
        float _1589 = (1.0 - _1584) / (_1584 + 1.0);
        float _4390 = isnan(0.0) ? _1589 : (isnan(_1589) ? 0.0 : max(_1589, 0.0));
        float _1590 = isnan(1.0) ? _4390 : (isnan(_4390) ? 1.0 : min(_4390, 1.0));
        float _1599 = ((((1.0 - _1590) * (_1585 + 2.0)) * exp2(log2(isnan(1.0) ? _4368 : (isnan(_4368) ? 1.0 : min(_4368, 1.0))) * (_1585 + 1.0))) + _1590) * _1514;
        float _1600 = _1482 * 0.5;
        float _1601 = _1492 * 0.5;
        float _1602 = _1502 * 0.5;
        float _1603 = dot(vec3(_1600, _1601, _1602), vec3(_1600, _1601, _1602));
        float _1608 = (_1603 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1603);
        float _1616 = (dot(vec3(_756, _757, _758), vec3(_1608 * _1600, _1608 * _1601, _1608 * _1602)) + 1.0) * 0.5;
        float _4401 = isnan(0.0) ? _1616 : (isnan(_1616) ? 0.0 : max(_1616, 0.0));
        float _1625 = sqrt(((_1601 * _1601) + (_1600 * _1600)) + (_1602 * _1602)) / (_1515 + 9.9999997473787516355514526367188e-06);
        float _4412 = isnan(0.0) ? _1625 : (isnan(_1625) ? 0.0 : max(_1625, 0.0));
        float _1626 = isnan(1.0) ? _4412 : (isnan(_4412) ? 1.0 : min(_4412, 1.0));
        float _1627 = _1626 * 2.0;
        float _1631 = (1.0 - _1626) / (_1626 + 1.0);
        float _4423 = isnan(0.0) ? _1631 : (isnan(_1631) ? 0.0 : max(_1631, 0.0));
        float _1632 = isnan(1.0) ? _4423 : (isnan(_4423) ? 1.0 : min(_4423, 1.0));
        float _1641 = ((((1.0 - _1632) * (_1627 + 2.0)) * exp2(log2(isnan(1.0) ? _4401 : (isnan(_4401) ? 1.0 : min(_4401, 1.0))) * (_1627 + 1.0))) + _1632) * _1515;
        _1649 = _1482;
        _1650 = _1481;
        _1651 = _1480;
        _1652 = _1492;
        _1653 = _1491;
        _1654 = _1490;
        _1655 = _1502;
        _1656 = _1501;
        _1657 = _1500;
        _1658 = _1515;
        _1659 = _1514;
        _1660 = _1513;
        _1661 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1557 : (isnan(_1557) ? 0.0 : max(_1557, 0.0)));
        _1662 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1599 : (isnan(_1599) ? 0.0 : max(_1599, 0.0)));
        _1663 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1641 : (isnan(_1641) ? 0.0 : max(_1641, 0.0)));
    }
    else
    {
        _1649 = _1337;
        _1650 = _1337;
        _1651 = _1337;
        _1652 = _1337;
        _1653 = _1337;
        _1654 = _1337;
        _1655 = _1337;
        _1656 = _1337;
        _1657 = _1337;
        _1658 = _1337;
        _1659 = _1337;
        _1660 = _1337;
        _1661 = 0.0;
        _1662 = 0.0;
        _1663 = 0.0;
    }
    float _1673 = (cbModelParam._m0[1u].x * (_1661 - _1349)) + _1349;
    float _1674 = (cbModelParam._m0[1u].x * (_1662 - _1350)) + _1350;
    float _1675 = (cbModelParam._m0[1u].x * (_1663 - _1351)) + _1351;
    float _1696 = fma(_1675, cbSceneParam._m0[89u].z, fma(_1674, cbSceneParam._m0[89u].y, _1673 * cbSceneParam._m0[89u].x));
    float _1699 = fma(_1675, cbSceneParam._m0[90u].z, fma(_1674, cbSceneParam._m0[90u].y, _1673 * cbSceneParam._m0[90u].x));
    float _1702 = fma(_1675, cbSceneParam._m0[91u].z, fma(_1674, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1673));
    float _1717 = _942 * 0.5;
    float _1718 = _943 * 0.5;
    float _1719 = _944 * 0.5;
    float _1720 = dot(vec4(_1717, _1718, _1719, 1.0), vec4(_1651, _1654, _1657, _1660));
    float _1723 = dot(vec4(_1717, _1718, _1719, 1.0), vec4(_1650, _1653, _1656, _1659));
    float _1726 = dot(vec4(_1717, _1718, _1719, 1.0), vec4(_1649, _1652, _1655, _1658));
    float _1760;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1733 = dot(vec4(_1717, _1718, _1719, 1.0), vec4(_1336, _1340, _1343, _1346));
        float _1737 = dot(vec4(_1717, _1718, _1719, 1.0), vec4(_1338, _1341, _1344, _1347));
        float _1741 = dot(vec4(_1717, _1718, _1719, 1.0), vec4(_1339, _1342, _1345, _1348));
        float _1748 = dot(vec4(cbModelParam._m0[39u]), vec4(_1717, _1718, _1719, 1.0));
        _1760 = dot(vec3(isnan(0.0) ? _1741 : (isnan(_1741) ? 0.0 : max(_1741, 0.0)), isnan(0.0) ? _1737 : (isnan(_1737) ? 0.0 : max(_1737, 0.0)), isnan(0.0) ? _1733 : (isnan(_1733) ? 0.0 : max(_1733, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1748) ? 0.0 : (isnan(0.0) ? _1748 : max(0.0, _1748))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1760 = 1.0;
    }
    float _1771;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1762 = dot(vec4(cbModelParam._m0[40u]), vec4(_1717, _1718, _1719, 1.0));
        _1771 = dot(vec3(isnan(0.0) ? _1720 : (isnan(_1720) ? 0.0 : max(_1720, 0.0)), isnan(0.0) ? _1723 : (isnan(_1723) ? 0.0 : max(_1723, 0.0)), isnan(0.0) ? _1726 : (isnan(_1726) ? 0.0 : max(_1726, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1762) ? 0.0 : (isnan(0.0) ? _1762 : max(0.0, _1762))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1771 = 1.0;
    }
    float _1775 = (_1771 * cbModelParam._m0[1u].x) + (_1760 * (1.0 - cbModelParam._m0[1u].x));
    float _1785 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _759);
    float _1786 = isnan(_1785) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1785 : min(cbModelParam._m0[25u].z, _1785));
    float _1866;
    float _1868;
    float _1870;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1833 = fma(_1006, cbModelParam._m0[13u].z, fma(_1002, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _998)) + cbModelParam._m0[13u].w;
        float _1837 = fma(_1006, cbModelParam._m0[14u].z, fma(_1002, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _998)) + cbModelParam._m0[14u].w;
        float _1841 = fma(_1006, cbModelParam._m0[15u].z, fma(_1002, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _998)) + cbModelParam._m0[15u].w;
        float _1844 = fma(_944, cbModelParam._m0[13u].z, fma(_943, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _942));
        float _1847 = fma(_944, cbModelParam._m0[14u].z, fma(_943, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _942));
        float _1850 = fma(_944, cbModelParam._m0[15u].z, fma(_943, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _942));
        float _1878;
        if (_1844 > 0.0)
        {
            _1878 = abs((1.0 - _1833) / _1844);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1844 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1833 + 1.0) / _1844);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1878 = frontier_phi_17_15_ladder;
        }
        float _2051;
        if (_1847 > 0.0)
        {
            _2051 = abs((1.0 - _1837) / _1847);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1847 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1837 + 1.0) / _1847);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2051 = frontier_phi_26_22_ladder;
        }
        float _2347;
        if (_1850 > 0.0)
        {
            _2347 = abs((1.0 - _1841) / _1850);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1850 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1841 + 1.0) / _1850);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2347 = frontier_phi_38_33_ladder;
        }
        float _2349 = isnan(_2051) ? _1878 : (isnan(_1878) ? _2051 : min(_1878, _2051));
        float _2350 = isnan(_2347) ? _2349 : (isnan(_2349) ? _2347 : min(_2349, _2347));
        float _2354 = (_2350 * _1844) + _1833;
        float _2355 = (_2350 * _1847) + _1837;
        float _2356 = (_2350 * _1850) + _1841;
        float _2357 = _2350 * 9.9999997473787516355514526367188e-05;
        float _2359 = (-1.0) - _2357;
        float _2361 = _2357 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2356 > _2361) || ((_2356 < _2359) || ((_2355 > _2361) || ((_2355 < _2359) || ((_2354 < _2359) || (_2354 > _2361))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2501 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2356, cbModelParam._m0[9u].z, fma(_2355, cbModelParam._m0[9u].y, _2354 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2356, cbModelParam._m0[10u].z, fma(_2355, cbModelParam._m0[10u].y, _2354 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2356, cbModelParam._m0[11u].z, fma(_2355, cbModelParam._m0[11u].y, _2354 * cbModelParam._m0[11u].x))), _1786);
            frontier_phi_16_38_ladder = _2501.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2501.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2501.x * cbModelParam._m0[1u].y;
        }
        _1866 = frontier_phi_16_38_ladder_2;
        _1868 = frontier_phi_16_38_ladder_1;
        _1870 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1854 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_942, _943, _944), _1786);
        _1866 = _1854.x * cbModelParam._m0[1u].y;
        _1868 = _1854.y * cbModelParam._m0[1u].y;
        _1870 = _1854.z * cbModelParam._m0[1u].y;
    }
    float _1874 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _759);
    float _1875 = isnan(_1874) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1874 : min(cbModelParam._m0[25u].w, _1874));
    float _1966;
    float _1968;
    float _1970;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1930 = fma(_1006, cbModelParam._m0[21u].z, fma(_1002, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _998)) + cbModelParam._m0[21u].w;
        float _1934 = fma(_1006, cbModelParam._m0[22u].z, fma(_1002, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _998)) + cbModelParam._m0[22u].w;
        float _1938 = fma(_1006, cbModelParam._m0[23u].z, fma(_1002, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _998)) + cbModelParam._m0[23u].w;
        float _1941 = fma(_944, cbModelParam._m0[21u].z, fma(_943, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _942));
        float _1944 = fma(_944, cbModelParam._m0[22u].z, fma(_943, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _942));
        float _1947 = fma(_944, cbModelParam._m0[23u].z, fma(_943, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _942));
        float _2056;
        if (_1941 > 0.0)
        {
            _2056 = abs((1.0 - _1930) / _1941);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1941 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1930 + 1.0) / _1941);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2056 = frontier_phi_28_24_ladder;
        }
        float _2374;
        if (_1944 > 0.0)
        {
            _2374 = abs((1.0 - _1934) / _1944);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1944 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1934 + 1.0) / _1944);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2374 = frontier_phi_40_35_ladder;
        }
        float _2712;
        if (_1947 > 0.0)
        {
            _2712 = abs((1.0 - _1938) / _1947);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1947 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1938 + 1.0) / _1947);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2712 = frontier_phi_50_47_ladder;
        }
        float _2714 = isnan(_2374) ? _2056 : (isnan(_2056) ? _2374 : min(_2056, _2374));
        float _2715 = isnan(_2712) ? _2714 : (isnan(_2714) ? _2712 : min(_2714, _2712));
        float _2719 = (_2715 * _1941) + _1930;
        float _2720 = (_2715 * _1944) + _1934;
        float _2721 = (_2715 * _1947) + _1938;
        float _2722 = _2715 * 9.9999997473787516355514526367188e-05;
        float _2723 = (-1.0) - _2722;
        float _2725 = _2722 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2721 > _2725) || ((_2721 < _2723) || ((_2720 > _2725) || ((_2720 < _2723) || ((_2719 < _2723) || (_2719 > _2725))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2843 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2721, cbModelParam._m0[17u].z, fma(_2720, cbModelParam._m0[17u].y, _2719 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2721, cbModelParam._m0[18u].z, fma(_2720, cbModelParam._m0[18u].y, _2719 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2721, cbModelParam._m0[19u].z, fma(_2720, cbModelParam._m0[19u].y, _2719 * cbModelParam._m0[19u].x))), _1875);
            frontier_phi_25_50_ladder = _2843.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2843.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2843.x * cbModelParam._m0[1u].z;
        }
        _1966 = frontier_phi_25_50_ladder_2;
        _1968 = frontier_phi_25_50_ladder_1;
        _1970 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1950 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_942, _943, _944), _1875);
        _1966 = _1950.x * cbModelParam._m0[1u].z;
        _1968 = _1950.y * cbModelParam._m0[1u].z;
        _1970 = _1950.z * cbModelParam._m0[1u].z;
    }
    float _1983 = (((_969 * _919) + _970) * _934) * ((cbModelParam._m0[1u].w * (_1966 - _1866)) + _1866);
    float _1985 = (((_969 * _921) + _970) * _934) * ((cbModelParam._m0[1u].w * (_1968 - _1868)) + _1868);
    float _1987 = (((_969 * _922) + _970) * _934) * ((cbModelParam._m0[1u].w * (_1970 - _1870)) + _1870);
    float _1990 = fma(_1987, cbSceneParam._m0[89u].z, fma(_1985, cbSceneParam._m0[89u].y, _1983 * cbSceneParam._m0[89u].x));
    float _1993 = fma(_1987, cbSceneParam._m0[90u].z, fma(_1985, cbSceneParam._m0[90u].y, _1983 * cbSceneParam._m0[90u].x));
    float _1996 = fma(_1987, cbSceneParam._m0[91u].z, fma(_1985, cbSceneParam._m0[91u].y, _1983 * cbSceneParam._m0[91u].x));
    float _2030 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2034 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2038 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2042 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2043 = _2030 / _2042;
    float _2044 = _2034 / _2042;
    float _2045 = _2038 / _2042;
    float _2192;
    float _2193;
    float _2194;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2072 = ((uint(_2045 > cbSceneParam._m0[59u].y) + uint(_2045 > cbSceneParam._m0[59u].x)) + uint(_2045 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2073 = _2072 + 43u;
        uint _2081 = _2072 + 44u;
        uint _2089 = _2072 + 45u;
        uint _2097 = _2072 + 46u;
        float _2108 = fma(_2042, cbSceneParam._m0[_2073].w, fma(_2038, cbSceneParam._m0[_2073].z, fma(_2034, cbSceneParam._m0[_2073].y, _2030 * cbSceneParam._m0[_2073].x)));
        float _2112 = fma(_2042, cbSceneParam._m0[_2081].w, fma(_2038, cbSceneParam._m0[_2081].z, fma(_2034, cbSceneParam._m0[_2081].y, _2030 * cbSceneParam._m0[_2081].x)));
        float _2120 = fma(_2042, cbSceneParam._m0[_2097].w, fma(_2038, cbSceneParam._m0[_2097].z, fma(_2034, cbSceneParam._m0[_2097].y, _2030 * cbSceneParam._m0[_2097].x)));
        float _2125 = cbSceneParam._m0[33u].z * _2120;
        float _2127 = cbSceneParam._m0[33u].w * _2120;
        float _2130 = fma(_2042, cbSceneParam._m0[_2089].w, fma(_2038, cbSceneParam._m0[_2089].z, fma(_2034, cbSceneParam._m0[_2089].y, _2030 * cbSceneParam._m0[_2089].x))) / _2120;
        float _2178 = (cbSceneParam._m0[33u].x - sqrt(((_2044 * _2044) + (_2043 * _2043)) + (_2045 * _2045))) * cbSceneParam._m0[33u].y;
        float _4549 = isnan(0.0) ? _2178 : (isnan(_2178) ? 0.0 : max(_2178, 0.0));
        float _2185 = (isnan(1.0) ? _4549 : (isnan(_4549) ? 1.0 : min(_4549, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2125 + _2108) / _2120, (_2127 + _2112) / _2120), _2130), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2127 + _2108) / _2120, (_2112 - _2125) / _2120), _2130), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2108 - _2125) / _2120, (_2112 - _2127) / _2120), _2130), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2108 - _2127) / _2120, (_2125 + _2112) / _2120), _2130), 0.0)).x), vec4(0.25)));
        _2192 = 1.0 - (_2185 * cbSceneParam._m0[34u].x);
        _2193 = 1.0 - (_2185 * cbSceneParam._m0[34u].y);
        _2194 = 1.0 - (_2185 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2192 = 1.0;
        _2193 = 1.0;
        _2194 = 1.0;
    }
    float _2258;
    float _2260;
    float _2262;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2246 = fma(_2042, cbSceneParam._m0[63u].w, fma(_2038, cbSceneParam._m0[63u].z, fma(_2034, cbSceneParam._m0[63u].y, _2030 * cbSceneParam._m0[63u].x)));
        float _2247 = fma(_2042, cbSceneParam._m0[60u].w, fma(_2038, cbSceneParam._m0[60u].z, fma(_2034, cbSceneParam._m0[60u].y, _2030 * cbSceneParam._m0[60u].x))) / _2246;
        float _2248 = fma(_2042, cbSceneParam._m0[61u].w, fma(_2038, cbSceneParam._m0[61u].z, fma(_2034, cbSceneParam._m0[61u].y, _2030 * cbSceneParam._m0[61u].x))) / _2246;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2247 >= cbSceneParam._m0[64u].x) && (_2248 >= cbSceneParam._m0[64u].y)) && (_2247 <= cbSceneParam._m0[64u].z)) && (_2248 <= cbSceneParam._m0[64u].w))
        {
            float _2387 = fma(_2042, cbSceneParam._m0[62u].w, fma(_2038, cbSceneParam._m0[62u].z, fma(_2034, cbSceneParam._m0[62u].y, _2030 * cbSceneParam._m0[62u].x))) / _2246;
            float _2391 = isnan(cbSceneParam._m0[41u].w) ? _2387 : (isnan(_2387) ? cbSceneParam._m0[41u].w : max(_2387, cbSceneParam._m0[41u].w));
            float _2434 = (cbSceneParam._m0[33u].x - sqrt(((_2044 * _2044) + (_2043 * _2043)) + (_2045 * _2045))) * cbSceneParam._m0[33u].y;
            float _4565 = isnan(0.0) ? _2434 : (isnan(_2434) ? 0.0 : max(_2434, 0.0));
            float _2441 = (isnan(1.0) ? _4565 : (isnan(_4565) ? 1.0 : min(_4565, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2247, cbSceneParam._m0[33u].w + _2248), _2391), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2247, _2248 - cbSceneParam._m0[33u].z), _2391), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2247 - cbSceneParam._m0[33u].z, _2248 - cbSceneParam._m0[33u].w), _2391), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2247 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2248), _2391), 0.0)).x), vec4(0.25)));
            float _2445 = 1.0 - (_2441 * cbSceneParam._m0[34u].x);
            float _2446 = 1.0 - (_2441 * cbSceneParam._m0[34u].y);
            float _2447 = 1.0 - (_2441 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2447) ? _2194 : (isnan(_2194) ? _2447 : min(_2194, _2447));
            frontier_phi_37_36_ladder_1 = isnan(_2446) ? _2193 : (isnan(_2193) ? _2446 : min(_2193, _2446));
            frontier_phi_37_36_ladder_2 = isnan(_2445) ? _2192 : (isnan(_2192) ? _2445 : min(_2192, _2445));
        }
        else
        {
            frontier_phi_37_36_ladder = _2194;
            frontier_phi_37_36_ladder_1 = _2193;
            frontier_phi_37_36_ladder_2 = _2192;
        }
        _2258 = frontier_phi_37_36_ladder_2;
        _2260 = frontier_phi_37_36_ladder_1;
        _2262 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2258 = _2192;
        _2260 = _2193;
        _2262 = _2194;
    }
    uvec4 _2267 = floatBitsToUint(cbInstanceData._m0[_894 + 5u]);
    uint _2269 = _2267.x * 14u;
    uint _2270 = _2269 + 13u;
    float _2277 = _934 + (-1.0);
    float _2282 = (cbLight._m0[_2270].x * _2277) + 1.0;
    float _2283 = (cbLight._m0[_2270].y * _2277) + 1.0;
    float _2284 = (cbLight._m0[_2270].z * _2277) + 1.0;
    float _2285 = (cbLight._m0[_2270].w * _2277) + 1.0;
    uint _2286 = _2269 + 5u;
    float _2292 = isnan(1.0) ? _2283 : (isnan(_2283) ? 1.0 : min(_2283, 1.0));
    uint _2296 = _2269 + 4u;
    float _2306 = isnan(1.0) ? _2282 : (isnan(_2282) ? 1.0 : min(_2282, 1.0));
    uint _2310 = _2269 | 1u;
    float _2321 = dot(vec3(cbLight._m0[_2269].xyz), vec3(_756, _757, _758));
    float _2324 = dot(vec3(cbLight._m0[_2310].xyz), vec3(_756, _757, _758));
    float _4601 = isnan(0.0) ? _2321 : (isnan(_2321) ? 0.0 : max(_2321, 0.0));
    float _4612 = isnan(0.0) ? _2324 : (isnan(_2324) ? 0.0 : max(_2324, 0.0));
    float _2329 = (isnan(1.0) ? _4601 : (isnan(_4601) ? 1.0 : min(_4601, 1.0))) * 0.3183098733425140380859375;
    float _2331 = (isnan(1.0) ? _4612 : (isnan(_4612) ? 1.0 : min(_4612, 1.0))) * 0.3183098733425140380859375;
    float _2338 = ((cbLight._m0[_2286].x * _2292) * _2331) + (((cbLight._m0[_2296].x * _2258) * _2306) * _2329);
    float _2339 = ((_2292 * cbLight._m0[_2286].y) * _2331) + (((cbLight._m0[_2296].y * _2260) * _2306) * _2329);
    float _2340 = ((_2292 * cbLight._m0[_2286].z) * _2331) + (((cbLight._m0[_2296].z * _2262) * _2306) * _2329);
    uvec4 _2344 = floatBitsToUint(cbLight._m0[_2269 + 12u]);
    bool _2346 = _2344.x == 0u;
    float _2448;
    float _2450;
    float _2452;
    if (_2346)
    {
        _2448 = _2338;
        _2450 = _2339;
        _2452 = _2340;
    }
    else
    {
        uint _2456 = _2269 + 6u;
        float _2472 = (dot(vec3(cbLight._m0[_2269 + 2u].xyz), vec3(_756, _757, _758)) * 0.5) + 0.5;
        float _2473 = _2472 * _2472;
        float _4623 = isnan(0.0) ? _2473 : (isnan(_2473) ? 0.0 : max(_2473, 0.0));
        float _2474 = isnan(1.0) ? _4623 : (isnan(_4623) ? 1.0 : min(_4623, 1.0));
        float _2475 = isnan(1.0) ? _2284 : (isnan(_2284) ? 1.0 : min(_2284, 1.0));
        _2448 = (((cbLight._m0[_2456].x * 0.3183098733425140380859375) * _2474) * _2475) + _2338;
        _2450 = (((cbLight._m0[_2456].y * 0.3183098733425140380859375) * _2474) * _2475) + _2339;
        _2452 = (((cbLight._m0[_2456].z * 0.3183098733425140380859375) * _2474) * _2475) + _2340;
    }
    bool _2455 = _2344.y == 0u;
    float _2510;
    float _2512;
    float _2514;
    if (_2455)
    {
        _2510 = _2448;
        _2512 = _2450;
        _2514 = _2452;
    }
    else
    {
        uint _2683 = _2269 + 7u;
        float _2699 = (dot(vec3(cbLight._m0[_2269 + 3u].xyz), vec3(_756, _757, _758)) * 0.5) + 0.5;
        float _2700 = _2699 * _2699;
        float _4639 = isnan(0.0) ? _2700 : (isnan(_2700) ? 0.0 : max(_2700, 0.0));
        float _2701 = isnan(1.0) ? _4639 : (isnan(_4639) ? 1.0 : min(_4639, 1.0));
        float _2702 = isnan(1.0) ? _2285 : (isnan(_2285) ? 1.0 : min(_2285, 1.0));
        _2510 = (((cbLight._m0[_2683].x * 0.3183098733425140380859375) * _2701) * _2702) + _2448;
        _2512 = (((cbLight._m0[_2683].y * 0.3183098733425140380859375) * _2701) * _2702) + _2450;
        _2514 = (((cbLight._m0[_2683].z * 0.3183098733425140380859375) * _2701) * _2702) + _2452;
    }
    uint _2517 = _2269 + 8u;
    float _2530 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2269].w)) * _759) * 0.949999988079071044921875);
    float _2531 = _2530 * _2530;
    float _2532 = cbLight._m0[_2269].x + _836;
    float _2533 = cbLight._m0[_2269].y + _837;
    float _2534 = cbLight._m0[_2269].z + _838;
    float _2538 = inversesqrt(dot(vec3(_2532, _2533, _2534), vec3(_2532, _2533, _2534)));
    float _2539 = _2538 * _2532;
    float _2540 = _2538 * _2533;
    float _2541 = _2538 * _2534;
    float _2542 = dot(vec3(_756, _757, _758), vec3(cbLight._m0[_2269].xyz));
    float _4655 = isnan(0.0) ? _2542 : (isnan(_2542) ? 0.0 : max(_2542, 0.0));
    float _2545 = isnan(1.0) ? _4655 : (isnan(_4655) ? 1.0 : min(_4655, 1.0));
    float _4666 = isnan(0.0) ? _935 : (isnan(_935) ? 0.0 : max(_935, 0.0));
    float _2546 = isnan(1.0) ? _4666 : (isnan(_4666) ? 1.0 : min(_4666, 1.0));
    float _2547 = dot(vec3(_756, _757, _758), vec3(_2539, _2540, _2541));
    float _4677 = isnan(0.0) ? _2547 : (isnan(_2547) ? 0.0 : max(_2547, 0.0));
    float _2550 = isnan(1.0) ? _4677 : (isnan(_4677) ? 1.0 : min(_4677, 1.0));
    float _2551 = dot(vec3(cbLight._m0[_2269].xyz), vec3(_2539, _2540, _2541));
    float _4688 = isnan(0.0) ? _2551 : (isnan(_2551) ? 0.0 : max(_2551, 0.0));
    float _2555 = _2531 * _2531;
    float _2559 = ((_2550 * _2550) * (_2555 + (-1.0))) + 1.0;
    float _2567 = exp2(log2(1.0 - (isnan(1.0) ? _4688 : (isnan(_4688) ? 1.0 : min(_4688, 1.0)))) * 5.0);
    float _2568 = 0.959999978542327880859375 - _916;
    float _2570 = 0.959999978542327880859375 - _917;
    float _2571 = 0.959999978542327880859375 - _918;
    float _2578 = 1.0 - _2531;
    float _2589 = (0.5 / (((_2546 * ((_2545 * _2578) + _2531)) + 9.9999999392252902907785028219223e-09) + (((_2546 * _2578) + _2531) * _2545))) * _2545;
    float _4699 = isnan(0.0) ? _2589 : (isnan(_2589) ? 0.0 : max(_2589, 0.0));
    float _2591 = (isnan(1.0) ? _4699 : (isnan(_4699) ? 1.0 : min(_4699, 1.0))) * (_2555 / ((_2559 * _2559) * 3.141590118408203125));
    uint _2605 = _2269 + 9u;
    float _2616 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2310].w)) * _759) * 0.949999988079071044921875);
    float _2617 = _2616 * _2616;
    float _2618 = cbLight._m0[_2310].x + _836;
    float _2619 = cbLight._m0[_2310].y + _837;
    float _2620 = cbLight._m0[_2310].z + _838;
    float _2624 = inversesqrt(dot(vec3(_2618, _2619, _2620), vec3(_2618, _2619, _2620)));
    float _2625 = _2624 * _2618;
    float _2626 = _2624 * _2619;
    float _2627 = _2624 * _2620;
    float _2628 = dot(vec3(_756, _757, _758), vec3(cbLight._m0[_2310].xyz));
    float _4710 = isnan(0.0) ? _2628 : (isnan(_2628) ? 0.0 : max(_2628, 0.0));
    float _2631 = isnan(1.0) ? _4710 : (isnan(_4710) ? 1.0 : min(_4710, 1.0));
    float _2632 = dot(vec3(_756, _757, _758), vec3(_2625, _2626, _2627));
    float _4721 = isnan(0.0) ? _2632 : (isnan(_2632) ? 0.0 : max(_2632, 0.0));
    float _2635 = isnan(1.0) ? _4721 : (isnan(_4721) ? 1.0 : min(_4721, 1.0));
    float _2636 = dot(vec3(cbLight._m0[_2310].xyz), vec3(_2625, _2626, _2627));
    float _4732 = isnan(0.0) ? _2636 : (isnan(_2636) ? 0.0 : max(_2636, 0.0));
    float _2640 = _2617 * _2617;
    float _2644 = ((_2635 * _2635) * (_2640 + (-1.0))) + 1.0;
    float _2651 = exp2(log2(1.0 - (isnan(1.0) ? _4732 : (isnan(_4732) ? 1.0 : min(_4732, 1.0)))) * 5.0);
    float _2658 = 1.0 - _2617;
    float _2668 = (0.5 / (((_2546 * ((_2631 * _2658) + _2617)) + 9.9999999392252902907785028219223e-09) + (((_2546 * _2658) + _2617) * _2631))) * _2631;
    float _4743 = isnan(0.0) ? _2668 : (isnan(_2668) ? 0.0 : max(_2668, 0.0));
    float _2670 = (isnan(1.0) ? _4743 : (isnan(_4743) ? 1.0 : min(_4743, 1.0))) * (_2640 / ((_2644 * _2644) * 3.141590118408203125));
    float _2680 = (((((_2651 * _2568) + _919) * cbLight._m0[_2605].x) * _2670) * _2292) + ((((cbLight._m0[_2517].x * _2258) * ((_2567 * _2568) + _919)) * _2591) * _2306);
    float _2681 = (((((_2651 * _2570) + _921) * cbLight._m0[_2605].y) * _2670) * _2292) + ((((cbLight._m0[_2517].y * _2260) * ((_2567 * _2570) + _921)) * _2591) * _2306);
    float _2682 = (((((_2651 * _2571) + _922) * cbLight._m0[_2605].z) * _2670) * _2292) + ((((cbLight._m0[_2517].z * _2262) * ((_2567 * _2571) + _922)) * _2591) * _2306);
    float _2738;
    float _2740;
    float _2742;
    if (_2346)
    {
        _2738 = _2680;
        _2740 = _2681;
        _2742 = _2682;
    }
    else
    {
        uint _2744 = _2269 + 2u;
        uint _2748 = _2269 + 10u;
        float _2762 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2744].w)) * _759) * 0.949999988079071044921875);
        float _2763 = _2762 * _2762;
        float _2764 = cbLight._m0[_2744].x + _836;
        float _2765 = cbLight._m0[_2744].y + _837;
        float _2766 = cbLight._m0[_2744].z + _838;
        float _2770 = inversesqrt(dot(vec3(_2764, _2765, _2766), vec3(_2764, _2765, _2766)));
        float _2771 = _2770 * _2764;
        float _2772 = _2770 * _2765;
        float _2773 = _2770 * _2766;
        float _2774 = dot(vec3(_756, _757, _758), vec3(cbLight._m0[_2744].xyz));
        float _4754 = isnan(0.0) ? _2774 : (isnan(_2774) ? 0.0 : max(_2774, 0.0));
        float _2777 = isnan(1.0) ? _4754 : (isnan(_4754) ? 1.0 : min(_4754, 1.0));
        float _2778 = dot(vec3(_756, _757, _758), vec3(_2771, _2772, _2773));
        float _4765 = isnan(0.0) ? _2778 : (isnan(_2778) ? 0.0 : max(_2778, 0.0));
        float _2781 = isnan(1.0) ? _4765 : (isnan(_4765) ? 1.0 : min(_4765, 1.0));
        float _2782 = dot(vec3(cbLight._m0[_2744].xyz), vec3(_2771, _2772, _2773));
        float _4776 = isnan(0.0) ? _2782 : (isnan(_2782) ? 0.0 : max(_2782, 0.0));
        float _2786 = _2763 * _2763;
        float _2790 = ((_2781 * _2781) * (_2786 + (-1.0))) + 1.0;
        float _2797 = exp2(log2(1.0 - (isnan(1.0) ? _4776 : (isnan(_4776) ? 1.0 : min(_4776, 1.0)))) * 5.0);
        float _2804 = 1.0 - _2763;
        float _2814 = (0.5 / (((_2546 * ((_2777 * _2804) + _2763)) + 9.9999999392252902907785028219223e-09) + (((_2546 * _2804) + _2763) * _2777))) * _2777;
        float _4787 = isnan(0.0) ? _2814 : (isnan(_2814) ? 0.0 : max(_2814, 0.0));
        float _2816 = (isnan(1.0) ? _4787 : (isnan(_4787) ? 1.0 : min(_4787, 1.0))) * (_2786 / ((_2790 * _2790) * 3.141590118408203125));
        float _2817 = isnan(1.0) ? _2284 : (isnan(_2284) ? 1.0 : min(_2284, 1.0));
        _2738 = (((((_2797 * _2568) + _919) * cbLight._m0[_2748].x) * _2816) * _2817) + _2680;
        _2740 = (((((_2797 * _2570) + _921) * cbLight._m0[_2748].y) * _2816) * _2817) + _2681;
        _2742 = (((((_2797 * _2571) + _922) * cbLight._m0[_2748].z) * _2816) * _2817) + _2682;
    }
    float _2848;
    float _2850;
    float _2852;
    if (_2455)
    {
        _2848 = _2738;
        _2850 = _2740;
        _2852 = _2742;
    }
    else
    {
        uint _2859 = _2269 + 3u;
        uint _2863 = _2269 + 11u;
        float _2877 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2859].w)) * _759) * 0.949999988079071044921875);
        float _2878 = _2877 * _2877;
        float _2879 = cbLight._m0[_2859].x + _836;
        float _2880 = cbLight._m0[_2859].y + _837;
        float _2881 = cbLight._m0[_2859].z + _838;
        float _2885 = inversesqrt(dot(vec3(_2879, _2880, _2881), vec3(_2879, _2880, _2881)));
        float _2886 = _2885 * _2879;
        float _2887 = _2885 * _2880;
        float _2888 = _2885 * _2881;
        float _2889 = dot(vec3(_756, _757, _758), vec3(cbLight._m0[_2859].xyz));
        float _4803 = isnan(0.0) ? _2889 : (isnan(_2889) ? 0.0 : max(_2889, 0.0));
        float _2892 = isnan(1.0) ? _4803 : (isnan(_4803) ? 1.0 : min(_4803, 1.0));
        float _2893 = dot(vec3(_756, _757, _758), vec3(_2886, _2887, _2888));
        float _4814 = isnan(0.0) ? _2893 : (isnan(_2893) ? 0.0 : max(_2893, 0.0));
        float _2896 = isnan(1.0) ? _4814 : (isnan(_4814) ? 1.0 : min(_4814, 1.0));
        float _2897 = dot(vec3(cbLight._m0[_2859].xyz), vec3(_2886, _2887, _2888));
        float _4825 = isnan(0.0) ? _2897 : (isnan(_2897) ? 0.0 : max(_2897, 0.0));
        float _2901 = _2878 * _2878;
        float _2905 = ((_2896 * _2896) * (_2901 + (-1.0))) + 1.0;
        float _2912 = exp2(log2(1.0 - (isnan(1.0) ? _4825 : (isnan(_4825) ? 1.0 : min(_4825, 1.0)))) * 5.0);
        float _2919 = 1.0 - _2878;
        float _2929 = (0.5 / (((_2546 * ((_2892 * _2919) + _2878)) + 9.9999999392252902907785028219223e-09) + (((_2546 * _2919) + _2878) * _2892))) * _2892;
        float _4836 = isnan(0.0) ? _2929 : (isnan(_2929) ? 0.0 : max(_2929, 0.0));
        float _2931 = (isnan(1.0) ? _4836 : (isnan(_4836) ? 1.0 : min(_4836, 1.0))) * (_2901 / ((_2905 * _2905) * 3.141590118408203125));
        float _2932 = isnan(1.0) ? _2285 : (isnan(_2285) ? 1.0 : min(_2285, 1.0));
        _2848 = (((((_2912 * _2568) + _919) * cbLight._m0[_2863].x) * _2931) * _2932) + _2738;
        _2850 = (((((_2912 * _2570) + _921) * cbLight._m0[_2863].y) * _2931) * _2932) + _2740;
        _2852 = (((((_2912 * _2571) + _922) * cbLight._m0[_2863].z) * _2931) * _2932) + _2742;
    }
    float _2998;
    float _3000;
    float _3002;
    float _3004;
    float _3006;
    float _3008;
    if (_2267.y == 0u)
    {
        uvec4 _2953 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2954 = _2953.x;
        uint _2965 = uint((float(_2953.y) * floor(float(uint(cbSceneParam._m0[85u].y * _857) / _2954))) + floor(float(uint(cbSceneParam._m0[85u].x * _856) / _2954)));
        float _2975 = (log2(_2045 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2976 = isnan(0.0) ? _2975 : (isnan(_2975) ? 0.0 : max(_2975, 0.0));
        uint _2979 = uint(isnan(14.0) ? _2976 : (isnan(_2976) ? 14.0 : min(_2976, 14.0)));
        uvec4 _2984 = texelFetch(g_lightClusterGridBuffer, int(((_2979 << 2u) + (_2965 << 6u)) >> 2u));
        uint _2985 = _2984.x;
        uint _2986 = _2953.z;
        float _3065;
        float _3067;
        float _3069;
        float _3071;
        float _3073;
        float _3075;
        if (((((1u << ((_2986 >> 4u) & 15u)) + 4294967295u) & _2985) == 0u) || ((_2986 & 240u) == 0u))
        {
            _3065 = 0.0;
            _3067 = 0.0;
            _3069 = 0.0;
            _3071 = 0.0;
            _3073 = 0.0;
            _3075 = 0.0;
        }
        else
        {
            float _3066;
            float _3068;
            float _3070;
            float _3072;
            float _3074;
            float _3076;
            float _3217 = 0.0;
            float _3218 = 0.0;
            float _3219 = 0.0;
            float _3220 = 0.0;
            float _3221 = 0.0;
            float _3222 = 0.0;
            uint _3223 = 0u;
            uint _3232;
            bool _3233;
            for (;;)
            {
                _3232 = texelFetch(g_lightClassification, int((((_2979 << 5u) + (_2965 << 9u)) + (_3223 << 2u)) >> 2u)).x;
                _3233 = _3232 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3233)
                {
                    frontier_phi_71_pred = _3222;
                    frontier_phi_71_pred_1 = _3221;
                    frontier_phi_71_pred_2 = _3220;
                    frontier_phi_71_pred_3 = _3219;
                    frontier_phi_71_pred_4 = _3218;
                    frontier_phi_71_pred_5 = _3217;
                }
                else
                {
                    float _3362;
                    float _3363;
                    float _3364;
                    float _3365;
                    float _3366;
                    float _3367;
                    uint _3368;
                    _3362 = _3217;
                    _3363 = _3218;
                    _3364 = _3219;
                    _3365 = _3220;
                    _3366 = _3221;
                    _3367 = _3222;
                    _3368 = _3232;
                    float _3289;
                    float _3290;
                    float _3291;
                    float _3292;
                    float _3293;
                    float _3294;
                    for (;;)
                    {
                        uint _3372 = uint(findLSB(_3368)) + (_3223 << 5u);
                        uint _3369 = (_3368 + 4294967295u) & _3368;
                        uint _3374 = _3372 * 48u;
                        vec4 _3388 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3374)).x, texelFetch(g_PointLightRenderingBuffer, int(_3374 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3374 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3374 + 3u)).x));
                        uint _3394 = (_3372 * 48u) + 4u;
                        vec4 _3407 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3394)).x, texelFetch(g_PointLightRenderingBuffer, int(_3394 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3394 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3394 + 3u)).x));
                        uint _3413 = (_3372 * 48u) + 8u;
                        vec3 _3424 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3413)).x, texelFetch(g_PointLightRenderingBuffer, int(_3413 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3413 + 2u)).x));
                        float _3428 = _3388.x - _2043;
                        float _3429 = _3388.y - _2044;
                        float _3430 = _3388.z - _2045;
                        float _3431 = dot(vec3(_3428, _3429, _3430), vec3(_3428, _3429, _3430));
                        float _3434 = inversesqrt(_3431);
                        float _3435 = _3434 * _3428;
                        float _3436 = _3434 * _3429;
                        float _3437 = _3434 * _3430;
                        float _3438 = dot(vec3(_875, _878, _881), vec3(_3435, _3436, _3437));
                        float _3443 = 1.0 - (_3431 * _3388.w);
                        float _4862 = isnan(0.0) ? _3443 : (isnan(_3443) ? 0.0 : max(_3443, 0.0));
                        float _3444 = isnan(1.0) ? _4862 : (isnan(_4862) ? 1.0 : min(_4862, 1.0));
                        float _3445 = sqrt(_3431) * _3407.w;
                        float _3448 = 1.39999997615814208984375 / (_3445 + 1.39999997615814208984375);
                        float _3449 = _3448 * _3448;
                        float _3452 = ((1.0 - _3449) * _3438) + _3449;
                        float _3455 = _3445 * _3445;
                        float _3459 = ((isnan(0.0) ? _3452 : (isnan(_3452) ? 0.0 : max(_3452, 0.0))) * _3444) / ((_3455 * 0.699999988079071044921875) + 1.0);
                        float _3463 = (-0.0) - _2043;
                        float _3464 = (-0.0) - _2044;
                        float _3465 = (-0.0) - _2045;
                        float _3469 = inversesqrt(dot(vec3(_3463, _3464, _3465), vec3(_3463, _3464, _3465)));
                        float _3470 = _3469 * _3463;
                        float _3471 = _3469 * _3464;
                        float _3472 = _3469 * _3465;
                        float _3479 = exp2(log2(1.0 / ((_3455 * 3.5) + 5.0)) * 0.25);
                        float _3480 = 1.0 - _950;
                        float _3487 = sqrt(1.0 - ((1.0 - (_3480 * _3480)) * (1.0 - (_3479 * _3479))));
                        float _3488 = _3487 * _3487;
                        float _3489 = _3488 * _3488;
                        float _3490 = _3470 + _3435;
                        float _3491 = _3471 + _3436;
                        float _3492 = _3472 + _3437;
                        float _3496 = inversesqrt(dot(vec3(_3490, _3491, _3492), vec3(_3490, _3491, _3492)));
                        float _3500 = dot(vec3(_875, _878, _881), vec3(_3470, _3471, _3472));
                        float _4878 = isnan(0.0) ? _3500 : (isnan(_3500) ? 0.0 : max(_3500, 0.0));
                        float _3503 = isnan(1.0) ? _4878 : (isnan(_4878) ? 1.0 : min(_4878, 1.0));
                        float _3504 = dot(vec3(_875, _878, _881), vec3(_3496 * _3490, _3496 * _3491, _3496 * _3492));
                        float _4889 = isnan(0.0) ? _3504 : (isnan(_3504) ? 0.0 : max(_3504, 0.0));
                        float _3507 = isnan(1.0) ? _4889 : (isnan(_4889) ? 1.0 : min(_4889, 1.0));
                        float _3511 = ((_3507 * _3507) * (_3489 + (-1.0))) + 1.0;
                        float _3512 = _3448 * _3488;
                        float _3513 = _3512 * _3512;
                        float _3516 = ((1.0 - _3513) * _3438) + _3513;
                        float _4900 = isnan(0.0) ? _3516 : (isnan(_3516) ? 0.0 : max(_3516, 0.0));
                        float _3517 = isnan(1.0) ? _4900 : (isnan(_4900) ? 1.0 : min(_4900, 1.0));
                        float _3518 = 1.0 - _3488;
                        float _3528 = (0.5 / (((_3517 * ((_3503 * _3518) + _3488)) + 9.9999999392252902907785028219223e-09) + (((_3517 * _3518) + _3488) * _3503))) * _3517;
                        float _4911 = isnan(0.0) ? _3528 : (isnan(_3528) ? 0.0 : max(_3528, 0.0));
                        float _3539 = (((_3489 * 3.1415927410125732421875) * (isnan(1.0) ? _4911 : (isnan(_4911) ? 1.0 : min(_4911, 1.0)))) / ((_3511 * _3511) * ((_3455 * 2.1991131305694580078125) + 3.141590118408203125))) * _3444;
                        _3292 = (_3459 * _3407.x) + _3365;
                        _3293 = (_3459 * _3407.y) + _3366;
                        _3294 = (_3459 * _3407.z) + _3367;
                        _3289 = (_3539 * _3424.x) + _3362;
                        _3290 = (_3539 * _3424.y) + _3363;
                        _3291 = (_3539 * _3424.z) + _3364;
                        if (_3369 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3362 = _3289;
                            _3363 = _3290;
                            _3364 = _3291;
                            _3365 = _3292;
                            _3366 = _3293;
                            _3367 = _3294;
                            _3368 = _3369;
                        }
                    }
                    frontier_phi_71_pred = _3294;
                    frontier_phi_71_pred_1 = _3293;
                    frontier_phi_71_pred_2 = _3292;
                    frontier_phi_71_pred_3 = _3291;
                    frontier_phi_71_pred_4 = _3290;
                    frontier_phi_71_pred_5 = _3289;
                }
                _3076 = frontier_phi_71_pred;
                _3074 = frontier_phi_71_pred_1;
                _3072 = frontier_phi_71_pred_2;
                _3070 = frontier_phi_71_pred_3;
                _3068 = frontier_phi_71_pred_4;
                _3066 = frontier_phi_71_pred_5;
                uint _3224 = _3223 + 1u;
                if (_3224 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3217 = _3066;
                    _3218 = _3068;
                    _3219 = _3070;
                    _3220 = _3072;
                    _3221 = _3074;
                    _3222 = _3076;
                    _3223 = _3224;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3065 = _3066;
            _3067 = _3068;
            _3069 = _3070;
            _3071 = _3072;
            _3073 = _3074;
            _3075 = _3076;
        }
        uvec4 _3079 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3080 = _3079.z;
        uint _3082 = (_3080 >> 8u) & 15u;
        float _3185;
        float _3187;
        float _3189;
        float _3191;
        float _3193;
        float _3195;
        if (((4294967295u << _3082) & _2985) == 0u)
        {
            _3185 = _3065;
            _3187 = _3067;
            _3189 = _3069;
            _3191 = _3071;
            _3193 = _3073;
            _3195 = _3075;
        }
        else
        {
            float _3210 = inversesqrt(dot(vec3(_2043, _2044, _2045), vec3(_2043, _2044, _2045)));
            float _3211 = _3210 * _2043;
            float _3212 = _3210 * _2044;
            float _3213 = _3210 * _2045;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3082 < ((_3080 >> 12u) & 15u))
            {
                float _3186;
                float _3188;
                float _3190;
                float _3192;
                float _3194;
                float _3196;
                float _3345 = _3065;
                float _3346 = _3067;
                float _3347 = _3069;
                float _3348 = _3071;
                float _3349 = _3073;
                float _3350 = _3075;
                uint _3351 = _3082;
                uint _3360;
                bool _3361;
                for (;;)
                {
                    _3360 = texelFetch(g_lightClassification, int((((_2979 << 5u) + (_2965 << 9u)) + (_3351 << 2u)) >> 2u)).x;
                    _3361 = _3360 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3361)
                    {
                        frontier_phi_82_pred = _3350;
                        frontier_phi_82_pred_1 = _3349;
                        frontier_phi_82_pred_2 = _3348;
                        frontier_phi_82_pred_3 = _3347;
                        frontier_phi_82_pred_4 = _3346;
                        frontier_phi_82_pred_5 = _3345;
                    }
                    else
                    {
                        float _3553;
                        float _3554;
                        float _3555;
                        float _3556;
                        float _3557;
                        float _3558;
                        float _3847;
                        float _3848;
                        float _3849;
                        float _3850;
                        float _3851;
                        float _3852;
                        float _3566 = _3345;
                        float _3567 = _3346;
                        float _3568 = _3347;
                        float _3569 = _3348;
                        float _3570 = _3349;
                        float _3571 = _3350;
                        uint _3572 = _3360;
                        uint _3573;
                        vec4 _3598;
                        float _3599;
                        vec4 _3614;
                        vec3 _3626;
                        vec4 _3641;
                        vec4 _3656;
                        float _3703;
                        bool _3704;
                        for (;;)
                        {
                            uint _3583 = ((_3351 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3572));
                            _3573 = (_3572 + 4294967295u) & _3572;
                            uint _3585 = _3583 * 40u;
                            _3598 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3585)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3585 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3585 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3585 + 3u)).x));
                            _3599 = _3598.w;
                            uint _3601 = (_3583 * 40u) + 4u;
                            _3614 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3601)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3601 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3601 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3601 + 3u)).x));
                            uint _3616 = (_3583 * 40u) + 8u;
                            _3626 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3616)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3616 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3616 + 2u)).x));
                            uint _3628 = (_3583 * 40u) + 16u;
                            _3641 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3628)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3628 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3628 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3628 + 3u)).x));
                            uint _3643 = (_3583 * 40u) + 20u;
                            _3656 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3643)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3643 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3643 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3643 + 3u)).x));
                            uint _3659 = (_3583 * 40u) + 24u;
                            vec4 _3672 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3659)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3659 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3659 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3659 + 3u)).x));
                            uint _3678 = (_3583 * 40u) + 28u;
                            vec4 _3691 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3678)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3678 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3678 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3678 + 3u)).x));
                            _3703 = fma(_2045, _3691.z, fma(_2044, _3691.y, _3691.x * _2043)) + _3691.w;
                            _3704 = !((fma(_2045, _3672.z, fma(_2044, _3672.y, _3672.x * _2043)) + _3672.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3704)
                            {
                                float _3731 = _3598.x - _2043;
                                float _3732 = _3598.y - _2044;
                                float _3733 = _3598.z - _2045;
                                float _3734 = dot(vec3(_3731, _3732, _3733), vec3(_3731, _3732, _3733));
                                float _3737 = inversesqrt(_3734);
                                float _3738 = _3737 * _3731;
                                float _3739 = _3737 * _3732;
                                float _3740 = _3737 * _3733;
                                float _3744 = 1.0 - (_3734 / (_3599 * _3599));
                                float _4922 = isnan(0.0) ? _3744 : (isnan(_3744) ? 0.0 : max(_3744, 0.0));
                                float _3745 = isnan(1.0) ? _4922 : (isnan(_4922) ? 1.0 : min(_4922, 1.0));
                                float _3749 = sqrt(_3734) * _3614.w;
                                float _3751 = 1.39999997615814208984375 / (_3749 + 1.39999997615814208984375);
                                float _3752 = _3751 * _3751;
                                float _3755 = ((1.0 - _3752) * dot(vec3(_3738, _3739, _3740), vec3(_875, _878, _881))) + _3752;
                                float _3758 = _3749 * _3749;
                                float _3762 = (fma(_2045, _3641.z, fma(_2044, _3641.y, _3641.x * _2043)) + _3641.w) / _3703;
                                float _3763 = (fma(_2045, _3656.z, fma(_2044, _3656.y, _3656.x * _2043)) + _3656.w) / _3703;
                                float _3767 = 1.0 - dot(vec2(_3762, _3763), vec2(_3762, _3763));
                                float _4938 = isnan(0.0) ? _3767 : (isnan(_3767) ? 0.0 : max(_3767, 0.0));
                                float _3768 = isnan(1.0) ? _4938 : (isnan(_4938) ? 1.0 : min(_4938, 1.0));
                                float _3769 = _3768 * (((isnan(0.0) ? _3755 : (isnan(_3755) ? 0.0 : max(_3755, 0.0))) * _3745) / ((_3758 * 0.699999988079071044921875) + 1.0));
                                float _3781 = exp2(log2(1.0 / ((_3758 * 3.5) + 5.0)) * 0.25);
                                float _3782 = 1.0 - _950;
                                float _3789 = sqrt(1.0 - ((1.0 - (_3782 * _3782)) * (1.0 - (_3781 * _3781))));
                                float _3790 = _3789 * _3789;
                                float _3791 = _3790 * _3790;
                                float _3792 = _3738 - _3211;
                                float _3793 = _3739 - _3212;
                                float _3794 = _3740 - _3213;
                                float _3798 = inversesqrt(dot(vec3(_3792, _3793, _3794), vec3(_3792, _3793, _3794)));
                                float _3802 = dot(vec3(_875, _878, _881), vec3((-0.0) - _3211, (-0.0) - _3212, (-0.0) - _3213));
                                float _4949 = isnan(0.0) ? _3802 : (isnan(_3802) ? 0.0 : max(_3802, 0.0));
                                float _3805 = isnan(1.0) ? _4949 : (isnan(_4949) ? 1.0 : min(_4949, 1.0));
                                float _3806 = dot(vec3(_875, _878, _881), vec3(_3798 * _3792, _3798 * _3793, _3798 * _3794));
                                float _4960 = isnan(0.0) ? _3806 : (isnan(_3806) ? 0.0 : max(_3806, 0.0));
                                float _3809 = isnan(1.0) ? _4960 : (isnan(_4960) ? 1.0 : min(_4960, 1.0));
                                float _3813 = ((_3809 * _3809) * (_3791 + (-1.0))) + 1.0;
                                float _3814 = _3751 * _3790;
                                float _3815 = _3814 * _3814;
                                float _3821 = ((1.0 - _3815) * dot(vec3(_875, _878, _881), vec3(_3738, _3739, _3740))) + _3815;
                                float _4971 = isnan(0.0) ? _3821 : (isnan(_3821) ? 0.0 : max(_3821, 0.0));
                                float _3822 = isnan(1.0) ? _4971 : (isnan(_4971) ? 1.0 : min(_4971, 1.0));
                                float _3823 = 1.0 - _3790;
                                float _3833 = (0.5 / (((_3822 * ((_3805 * _3823) + _3790)) + 9.9999999392252902907785028219223e-09) + (((_3822 * _3823) + _3790) * _3805))) * _3822;
                                float _4982 = isnan(0.0) ? _3833 : (isnan(_3833) ? 0.0 : max(_3833, 0.0));
                                float _3843 = (_3768 * _3745) * (((_3791 * 3.1415927410125732421875) * (isnan(1.0) ? _4982 : (isnan(_4982) ? 1.0 : min(_4982, 1.0)))) / ((_3813 * _3813) * ((_3758 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3769 * _3614.z;
                                frontier_phi_88_pred_1 = _3769 * _3614.y;
                                frontier_phi_88_pred_2 = _3769 * _3614.x;
                                frontier_phi_88_pred_3 = _3843 * _3626.z;
                                frontier_phi_88_pred_4 = _3843 * _3626.y;
                                frontier_phi_88_pred_5 = _3843 * _3626.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3852 = frontier_phi_88_pred;
                            _3851 = frontier_phi_88_pred_1;
                            _3850 = frontier_phi_88_pred_2;
                            _3849 = frontier_phi_88_pred_3;
                            _3848 = frontier_phi_88_pred_4;
                            _3847 = frontier_phi_88_pred_5;
                            _3556 = _3850 + _3569;
                            _3557 = _3851 + _3570;
                            _3558 = _3852 + _3571;
                            _3553 = _3847 + _3566;
                            _3554 = _3848 + _3567;
                            _3555 = _3849 + _3568;
                            if (_3573 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3566 = _3553;
                                _3567 = _3554;
                                _3568 = _3555;
                                _3569 = _3556;
                                _3570 = _3557;
                                _3571 = _3558;
                                _3572 = _3573;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3558;
                        frontier_phi_82_pred_1 = _3557;
                        frontier_phi_82_pred_2 = _3556;
                        frontier_phi_82_pred_3 = _3555;
                        frontier_phi_82_pred_4 = _3554;
                        frontier_phi_82_pred_5 = _3553;
                    }
                    _3196 = frontier_phi_82_pred;
                    _3194 = frontier_phi_82_pred_1;
                    _3192 = frontier_phi_82_pred_2;
                    _3190 = frontier_phi_82_pred_3;
                    _3188 = frontier_phi_82_pred_4;
                    _3186 = frontier_phi_82_pred_5;
                    uint _3352 = _3351 + 1u;
                    if (_3352 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3345 = _3186;
                        _3346 = _3188;
                        _3347 = _3190;
                        _3348 = _3192;
                        _3349 = _3194;
                        _3350 = _3196;
                        _3351 = _3352;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3192;
                frontier_phi_63_64_ladder_1 = _3196;
                frontier_phi_63_64_ladder_2 = _3194;
                frontier_phi_63_64_ladder_3 = _3190;
                frontier_phi_63_64_ladder_4 = _3188;
                frontier_phi_63_64_ladder_5 = _3186;
            }
            else
            {
                frontier_phi_63_64_ladder = _3071;
                frontier_phi_63_64_ladder_1 = _3075;
                frontier_phi_63_64_ladder_2 = _3073;
                frontier_phi_63_64_ladder_3 = _3069;
                frontier_phi_63_64_ladder_4 = _3067;
                frontier_phi_63_64_ladder_5 = _3065;
            }
            _3185 = frontier_phi_63_64_ladder_5;
            _3187 = frontier_phi_63_64_ladder_4;
            _3189 = frontier_phi_63_64_ladder_3;
            _3191 = frontier_phi_63_64_ladder;
            _3193 = frontier_phi_63_64_ladder_2;
            _3195 = frontier_phi_63_64_ladder_1;
        }
        float _3200 = isnan(1.0) ? _934 : (isnan(_934) ? 1.0 : min(_934, 1.0));
        _2998 = (_3200 * _3191) + _2510;
        _3000 = (_3200 * _3193) + _2512;
        _3002 = (_3200 * _3195) + _2514;
        _3004 = ((_3185 * _919) * _3200) + _2848;
        _3006 = ((_3187 * _921) * _3200) + _2850;
        _3008 = ((_3189 * _922) * _3200) + _2852;
    }
    else
    {
        _2998 = _2510;
        _3000 = _2512;
        _3002 = _2514;
        _3004 = _2848;
        _3006 = _2850;
        _3008 = _2852;
    }
    float _4998 = isnan(0.0) ? _909 : (isnan(_909) ? 0.0 : max(_909, 0.0));
    float _5009 = isnan(0.0) ? _910 : (isnan(_910) ? 0.0 : max(_910, 0.0));
    float _5020 = isnan(0.0) ? _911 : (isnan(_911) ? 0.0 : max(_911, 0.0));
    float _3025 = ((isnan(1.0) ? _4998 : (isnan(_4998) ? 1.0 : min(_4998, 1.0))) * (_2998 + ((isnan(0.0) ? _1696 : (isnan(_1696) ? 0.0 : max(_1696, 0.0))) * _934))) + ((_3004 + ((isnan(0.0) ? _1990 : (isnan(_1990) ? 0.0 : max(_1990, 0.0))) * _1775)) * cbPerFrame._m0[3u].x);
    float _3026 = ((isnan(1.0) ? _5009 : (isnan(_5009) ? 1.0 : min(_5009, 1.0))) * (_3000 + ((isnan(0.0) ? _1699 : (isnan(_1699) ? 0.0 : max(_1699, 0.0))) * _934))) + ((_3006 + ((isnan(0.0) ? _1993 : (isnan(_1993) ? 0.0 : max(_1993, 0.0))) * _1775)) * cbPerFrame._m0[3u].x);
    float _3027 = ((isnan(1.0) ? _5020 : (isnan(_5020) ? 1.0 : min(_5020, 1.0))) * (_3002 + ((isnan(0.0) ? _1702 : (isnan(_1702) ? 0.0 : max(_1702, 0.0))) * _934))) + ((_3008 + ((isnan(0.0) ? _1996 : (isnan(_1996) ? 0.0 : max(_1996, 0.0))) * _1775)) * cbPerFrame._m0[3u].x);
    uint _3028 = _894 + 6u;
    float _3036 = _856 / cbSceneParam._m0[86u].x;
    float _3037 = _857 / cbSceneParam._m0[86u].y;
    vec4 _3051 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3036, _3037, (log2((isnan(cbSceneParam._m0[77u].w) ? _779 : (isnan(_779) ? cbSceneParam._m0[77u].w : min(_779, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3053 = _3051.x;
    float _3054 = _3051.y;
    float _3055 = _3051.z;
    float _3056 = _3051.w;
    float _3127;
    float _3129;
    float _3131;
    float _3133;
    if (_779 > cbSceneParam._m0[78u].w)
    {
        float _3090 = isnan(_779) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _779 : min(cbSceneParam._m0[80u].w, _779));
        float _3091 = _3090 / _779;
        float _3102 = _3091 * _829;
        float _3103 = _830 * _3091;
        float _3104 = (-0.0) - _3103;
        float _3105 = _3091 * _831;
        float _3107 = (cbSceneParam._m0[77u].w * _3104) / _3090;
        float _3108 = _3107 + cbSceneParam._m0[79u].w;
        float _3109 = cbSceneParam._m0[79u].w - _3103;
        float _3115 = sqrt(((_3102 * _3102) + (_3103 * _3103)) + (_3105 * _3105));
        float _3118 = (1.0 - (cbSceneParam._m0[77u].w / _3090)) * _3115;
        float _3123 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3125 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3302;
        if (abs((_3104 - _3107) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3302 = ((((_3108 > 0.0) ? exp2(_3123 * _3108) : (2.0 - exp2(_3125 * _3108))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3118;
        }
        else
        {
            float _3246 = 1.0 / cbSceneParam._m0[80u].x;
            float _3247 = isnan(_3109) ? _3108 : (isnan(_3108) ? _3109 : max(_3108, _3109));
            float _3248 = isnan(_3109) ? _3108 : (isnan(_3108) ? _3109 : min(_3108, _3109));
            float _3257 = isnan(0.0) ? _3247 : (isnan(_3247) ? 0.0 : min(_3247, 0.0));
            float _3258 = isnan(0.0) ? _3248 : (isnan(_3248) ? 0.0 : min(_3248, 0.0));
            _3302 = ((abs(_3115 / _3104) * cbSceneParam._m0[80u].y) * ((((_3257 - _3258) * 2.0) - ((exp2(_3123 * (isnan(0.0) ? _3247 : (isnan(_3247) ? 0.0 : max(_3247, 0.0)))) - exp2(_3123 * (isnan(0.0) ? _3248 : (isnan(_3248) ? 0.0 : max(_3248, 0.0))))) * _3246)) - ((exp2(_3125 * _3257) - exp2(_3125 * _3258)) * _3246))) + (_3118 * cbSceneParam._m0[80u].z);
        }
        vec4 _3304 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3036, _3037, 1.0), 0.0);
        float _3313 = exp2((_3302 * (-1.44269502162933349609375)) * (1.0 - _3304.w));
        float _3314 = log2(_3313);
        float _3330 = log2(_3056);
        _3127 = (exp2(_3330 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3314 * cbSceneParam._m0[78u].x)) * _3304.x) / cbSceneParam._m0[78u].x)) + _3053;
        _3129 = (exp2(_3330 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3314 * cbSceneParam._m0[78u].y)) * _3304.y) / cbSceneParam._m0[78u].y)) + _3054;
        _3131 = (exp2(_3330 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3314 * cbSceneParam._m0[78u].z)) * _3304.z) / cbSceneParam._m0[78u].z)) + _3055;
        _3133 = _3313 * _3056;
    }
    else
    {
        _3127 = _3053;
        _3129 = _3054;
        _3131 = _3055;
        _3133 = _3056;
    }
    bool _3340;
    vec4 _3143;
    vec4 _3165;
    float _3167;
    float _3171;
    float _3172;
    float _3173;
    float _3174;
    bool _3184;
    for (;;)
    {
        _3143 = cbMatDynParam._m0[0u];
        float _3145 = roundEven(_3143.y);
        bool _3146 = _3145 == 3.0;
        float _3147 = log2(_3133);
        float _3154 = exp2(_3147 * cbSceneParam._m0[78u].x) * _3025;
        float _3155 = exp2(_3147 * cbSceneParam._m0[78u].y) * _3026;
        float _3156 = exp2(_3147 * cbSceneParam._m0[78u].z) * _3027;
        float _3163 = _845 + (-0.5);
        _3165 = cbMtdParam._m0[1u];
        _3167 = _3165.y * _3163;
        float _3170 = (_3145 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3171 = _3170 * (_3146 ? _3154 : (_3154 + (cbSceneParam._m0[72u].w * _3127)));
        _3172 = _3170 * (_3146 ? _3155 : (_3155 + (cbSceneParam._m0[72u].w * _3129)));
        _3173 = _3170 * (_3146 ? _3156 : (_3156 + (cbSceneParam._m0[72u].w * _3131)));
        _3174 = _3163 * 0.999000012874603271484375;
        _3184 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3184)
        {
            if ((cbInstanceData._m0[_894 + 7u].x + _3174) < 0.5)
            {
                _3340 = true;
                break;
            }
        }
        uint _3281 = _895 + uint(_3143.w);
        if ((cbInstanceData._m0[_3281].w < 1.0) && ((cbInstanceData._m0[_3281].w + _3174) < 0.5))
        {
            _3340 = true;
            break;
        }
        if ((_3167 + 1.0) < _3165.x)
        {
            _3340 = true;
            break;
        }
        _3340 = false;
        break;
    }
    float _3544;
    if (_3340)
    {
        discard_state = true;
        _3544 = 0.0;
    }
    else
    {
        _3544 = cbInstanceData._m0[_3028].w;
    }
    SV_Target.x = _3171;
    SV_Target.y = _3172;
    SV_Target.z = _3173;
    SV_Target.w = _3544;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3028].w;
    discard_exit();
}


