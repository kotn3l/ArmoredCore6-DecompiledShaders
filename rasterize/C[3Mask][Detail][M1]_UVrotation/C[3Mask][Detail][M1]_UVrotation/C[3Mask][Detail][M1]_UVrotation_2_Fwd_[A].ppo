#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[20];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_19;
layout(set = 0, binding = 11) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_2;
layout(set = 0, binding = 12) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_20;
layout(set = 0, binding = 13) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_3;
layout(set = 0, binding = 14) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_5;
layout(set = 0, binding = 15) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_6;
layout(set = 0, binding = 17) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_8;
layout(set = 0, binding = 18) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_11;
layout(set = 0, binding = 3) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_12;
layout(set = 0, binding = 4) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_13;
layout(set = 0, binding = 5) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_14;
layout(set = 0, binding = 6) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_15;
layout(set = 0, binding = 7) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_16;
layout(set = 0, binding = 8) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_17;
layout(set = 0, binding = 9) uniform texture2D C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_18;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1367;
float _3749;
float _3750;
float _3751;
float _3752;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _217 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _218 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _219 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _225 = inversesqrt(dot(vec3(_217, _218, _219), vec3(_217, _218, _219)));
    float _232 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _239 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _262 = sin(cbMtdParam._m0[18u].x);
    float _263 = cos(cbMtdParam._m0[18u].x);
    float _264 = TEXCOORD.x - cbMtdParam._m0[17u].w;
    float _265 = TEXCOORD.y - cbMtdParam._m0[17u].w;
    float _273 = (cbMtdParam._m0[17u].w + cbMtdParam._m0[19u].y) + fma(_265, (-0.0) - _262, _263 * _264);
    float _275 = (cbMtdParam._m0[17u].w + cbMtdParam._m0[19u].z) + fma(_265, _263, _264 * _262);
    vec4 _288 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * _273) + cbTextureTilingScale._m0[1u].z, (_275 * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w));
    float _294 = _288.x * cbMtdParam._m0[10u].x;
    float _295 = _288.y * cbMtdParam._m0[10u].y;
    float _296 = _288.z * cbMtdParam._m0[10u].z;
    vec4 _314 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w));
    vec4 _333 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_0, SS_WrapLinear), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _358 = cbMtdParam._m0[19u].x * texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.x) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD.y) + cbTextureTilingScale._m0[13u].w)).x;
    float _369 = ((cbMtdParam._m0[15u].x * (-1.39999997615814208984375)) * (((1.0 - _333.x) * 2.0) - _358)) + 1.0;
    float _3761 = isnan(0.0) ? _369 : (isnan(_369) ? 0.0 : max(_369, 0.0));
    float _370 = isnan(1.0) ? _3761 : (isnan(_3761) ? 1.0 : min(_3761, 1.0));
    float _377 = (_370 * ((_314.x * cbMtdParam._m0[11u].x) - _294)) + _294;
    float _378 = (_370 * ((_314.y * cbMtdParam._m0[11u].y) - _295)) + _295;
    float _379 = (_370 * ((_314.z * cbMtdParam._m0[11u].z) - _296)) + _296;
    vec4 _397 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_8, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[17u].x * TEXCOORD.x) + cbTextureTilingScale._m0[17u].z, (cbTextureTilingScale._m0[17u].y * TEXCOORD.y) + cbTextureTilingScale._m0[17u].w));
    float _410 = (((((1.0 - _333.y) * 2.0) - _358) * (-1.39999997615814208984375)) * cbMtdParam._m0[18u].z) + 1.0;
    float _3772 = isnan(0.0) ? _410 : (isnan(_410) ? 0.0 : max(_410, 0.0));
    float _411 = isnan(1.0) ? _3772 : (isnan(_3772) ? 1.0 : min(_3772, 1.0));
    float _418 = (((_397.x * cbMtdParam._m0[12u].x) - _377) * _411) + _377;
    float _419 = (_411 * ((_397.y * cbMtdParam._m0[12u].y) - _378)) + _378;
    float _420 = (_411 * ((_397.z * cbMtdParam._m0[12u].z) - _379)) + _379;
    vec4 _437 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _450 = (((((1.0 - _333.z) * 2.0) - _358) * (-1.39999997615814208984375)) * cbMtdParam._m0[18u].w) + 1.0;
    float _3783 = isnan(0.0) ? _450 : (isnan(_450) ? 0.0 : max(_450, 0.0));
    float _451 = isnan(1.0) ? _3783 : (isnan(_3783) ? 1.0 : min(_3783, 1.0));
    vec4 _479 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _487 = ((((((_437.x * cbMtdParam._m0[13u].x) - _418) * _451) + _418) * 4.55000019073486328125) * cbMtdParam._m0[9u].x) * _479.x;
    float _490 = ((((_451 * ((_437.y * cbMtdParam._m0[13u].y) - _419)) + _419) * 4.55000019073486328125) * cbMtdParam._m0[9u].y) * _479.y;
    float _493 = ((((_451 * ((_437.z * cbMtdParam._m0[13u].z) - _420)) + _420) * 4.55000019073486328125) * cbMtdParam._m0[9u].z) * _479.z;
    vec4 _513 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_20, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.z) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.w) + cbTextureTilingScale._m0[12u].w));
    float _542 = (TEXCOORD_5.x - ((cbMtdParam._m0[15u].w * (1.0 - TEXCOORD_5.x)) * (texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[18u].x * TEXCOORD.z) + cbTextureTilingScale._m0[18u].z, (cbTextureTilingScale._m0[18u].y * TEXCOORD.w) + cbTextureTilingScale._m0[18u].w)).x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[15u].z + 1.0);
    float _3794 = isnan(0.0) ? _542 : (isnan(_542) ? 0.0 : max(_542, 0.0));
    float _543 = isnan(1.0) ? _3794 : (isnan(_3794) ? 1.0 : min(_3794, 1.0));
    float _550 = (_543 * ((_513.x * cbMtdParam._m0[14u].x) - _487)) + _487;
    float _551 = (_543 * ((_513.y * cbMtdParam._m0[14u].y) - _490)) + _490;
    float _552 = (_543 * ((_513.z * cbMtdParam._m0[14u].z) - _493)) + _493;
    vec4 _565 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * _273) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _275) + cbTextureTilingScale._m0[5u].w));
    float _567 = _565.x;
    float _585 = ((texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w)).x - _567) * _370) + _567;
    float _602 = ((texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w)).x - _585) * _411) + _585;
    float _619 = ((texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w)).x - _602) * _451) + _602;
    float _623 = (_619 - (_619 * TEXCOORD_5.x)) * cbMtdParam._m0[18u].y;
    vec4 _636 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.z) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.w) + cbTextureTilingScale._m0[3u].w));
    vec4 _658 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[14u].x * _273) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _275) + cbTextureTilingScale._m0[14u].w));
    float _660 = _658.x;
    float _661 = _658.y;
    float _664 = cbMtdParam._m0[17u].y * _658.z;
    vec4 _676 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * TEXCOORD.x) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * TEXCOORD.y) + cbTextureTilingScale._m0[15u].w));
    float _685 = (((cbMtdParam._m0[17u].x * _676.z) - _664) * _370) + _664;
    vec4 _698 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_15, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _710 = (((cbMtdParam._m0[16u].w * _698.z) - _685) * _411) + _685;
    vec4 _723 = texture(sampler2D(C_3Mask_Detail_M1_UVrotation_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _732 = (((cbMtdParam._m0[16u].z * _723.z) - _710) * _451) + _710;
    float _737 = ((cbMtdParam._m0[16u].x * TEXCOORD_5.x) * ((_636.z * cbMtdParam._m0[17u].z) - _732)) + _732;
    float _742 = ((_676.x - _660) * _370) + _660;
    float _743 = ((_676.y - _661) * _370) + _661;
    float _748 = ((_698.x - _742) * _411) + _742;
    float _749 = ((_698.y - _743) * _411) + _743;
    float _758 = ((((_723.x - _748) * _451) + _748) * 2.0) + (-1.0);
    float _759 = ((((_723.y - _749) * _451) + _749) * 2.0) + (-1.0);
    float _760 = dot(vec2(_758, _759), vec2(_758, _759));
    float _3805 = isnan(0.0) ? _760 : (isnan(_760) ? 0.0 : max(_760, 0.0));
    float _765 = sqrt(1.0 - (isnan(1.0) ? _3805 : (isnan(_3805) ? 1.0 : min(_3805, 1.0))));
    float _771 = ((((_636.x * 2.0) + (-1.0)) * TEXCOORD_5.x) * cbMtdParam._m0[15u].y) + _758;
    float _772 = ((((_636.y * 2.0) + (-1.0)) * TEXCOORD_5.y) * cbMtdParam._m0[15u].y) + _759;
    float _775 = fma(_765, _232 * NORMAL.x, fma(_772, _239 * TANGENT.x, (_225 * _217) * _771));
    float _778 = fma(_765, _232 * NORMAL.y, fma(_772, _239 * TANGENT.y, (_225 * _218) * _771));
    float _781 = fma(_765, _232 * NORMAL.z, fma(_772, _239 * TANGENT.z, (_225 * _219) * _771));
    float _785 = inversesqrt(dot(vec3(_775, _778, _781), vec3(_775, _778, _781)));
    float _786 = _785 * _775;
    float _787 = _785 * _778;
    float _788 = _785 * _781;
    float _3816 = isnan(0.0) ? _737 : (isnan(_737) ? 0.0 : max(_737, 0.0));
    float _789 = isnan(1.0) ? _3816 : (isnan(_3816) ? 1.0 : min(_3816, 1.0));
    float _3827 = isnan(0.0) ? _550 : (isnan(_550) ? 0.0 : max(_550, 0.0));
    float _3838 = isnan(0.0) ? _551 : (isnan(_551) ? 0.0 : max(_551, 0.0));
    float _3849 = isnan(0.0) ? _552 : (isnan(_552) ? 0.0 : max(_552, 0.0));
    float _3860 = isnan(0.0) ? _623 : (isnan(_623) ? 0.0 : max(_623, 0.0));
    float _793 = isnan(1.0) ? _3860 : (isnan(_3860) ? 1.0 : min(_3860, 1.0));
    float _809 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _849 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _859 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _849);
    float _860 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _849);
    float _861 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _849);
    float _865 = inversesqrt(dot(vec3(_859, _860, _861), vec3(_859, _860, _861)));
    float _866 = _859 * _865;
    float _867 = _860 * _865;
    float _868 = _861 * _865;
    vec4 _873 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _875 = _873.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1047 = sqrt(((_859 * _859) + (_860 * _860)) + (_861 * _861));
        float _1053 = (cbMatDynParam._m0[5u].x * _1047) + cbMatDynParam._m0[5u].y;
        float _3871 = isnan(0.0) ? _1053 : (isnan(_1053) ? 0.0 : max(_1053, 0.0));
        float _1054 = isnan(1.0) ? _3871 : (isnan(_3871) ? 1.0 : min(_3871, 1.0));
        float _1058 = (cbMatDynParam._m0[5u].z * _1047) + cbMatDynParam._m0[5u].w;
        float _3882 = isnan(0.0) ? _1058 : (isnan(_1058) ? 0.0 : max(_1058, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3882 : (isnan(_3882) ? 1.0 : min(_3882, 1.0))) - _1054)) + _1054) < ((_875 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _886 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _887 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _905 = fma(_788, cbSceneParam._m0[5u].z, fma(_787, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _786));
    float _908 = fma(_788, cbSceneParam._m0[6u].z, fma(_787, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _786));
    float _911 = fma(_788, cbSceneParam._m0[7u].z, fma(_787, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _786));
    uint _924 = uint(roundEven(NORMAL.w)) * 13u;
    uint _925 = _924 + 9u;
    uint _926 = _925 + uint(cbMatDynParam._m0[0u].w);
    float _932 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3827 : (isnan(_3827) ? 1.0 : min(_3827, 1.0)))) * cbInstanceData._m0[_926].x;
    float _933 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3838 : (isnan(_3838) ? 1.0 : min(_3838, 1.0)))) * cbInstanceData._m0[_926].y;
    float _934 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3849 : (isnan(_3849) ? 1.0 : min(_3849, 1.0)))) * cbInstanceData._m0[_926].z;
    float _3893 = isnan(0.0) ? _932 : (isnan(_932) ? 0.0 : max(_932, 0.0));
    float _935 = isnan(1.0) ? _3893 : (isnan(_3893) ? 1.0 : min(_3893, 1.0));
    float _3904 = isnan(0.0) ? _933 : (isnan(_933) ? 0.0 : max(_933, 0.0));
    float _936 = isnan(1.0) ? _3904 : (isnan(_3904) ? 1.0 : min(_3904, 1.0));
    float _3915 = isnan(0.0) ? _934 : (isnan(_934) ? 0.0 : max(_934, 0.0));
    float _937 = isnan(1.0) ? _3915 : (isnan(_3915) ? 1.0 : min(_3915, 1.0));
    float _938 = 1.0 - _793;
    float _939 = _935 * _938;
    float _940 = _936 * _938;
    float _941 = _937 * _938;
    float _946 = (_935 + (-0.039999999105930328369140625)) * _793;
    float _947 = (_936 + (-0.039999999105930328369140625)) * _793;
    float _948 = (_937 + (-0.039999999105930328369140625)) * _793;
    float _949 = _946 + 0.039999999105930328369140625;
    float _951 = _947 + 0.039999999105930328369140625;
    float _952 = _948 + 0.039999999105930328369140625;
    vec4 _961 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _886, cbSceneParam._m0[86u].y * _887));
    float _964 = _961.x * TEXCOORD_5.w;
    float _965 = dot(vec3(_786, _787, _788), vec3(_866, _867, _868));
    float _968 = _965 * 2.0;
    float _972 = (_968 * _786) - _866;
    float _973 = (_968 * _787) - _867;
    float _974 = (_968 * _788) - _868;
    float _978 = abs(dot(vec3(_866, _867, _868), vec3(_786, _787, _788)));
    float _3926 = isnan(0.0) ? _978 : (isnan(_978) ? 0.0 : max(_978, 0.0));
    float _980 = sqrt(_789);
    float _993 = exp2((_980 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3926 : (isnan(_3926) ? 1.0 : min(_3926, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_980 * 3.0));
    float _999 = (1.0 - _993) * ((_980 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1000 = _993 * _980;
    float _1028 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1032 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1036 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1366;
    float _1368;
    float _1369;
    float _1370;
    float _1371;
    float _1372;
    float _1373;
    float _1374;
    float _1375;
    float _1376;
    float _1377;
    float _1378;
    float _1379;
    float _1380;
    float _1381;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1091 = fma(_1036, cbModelParam._m0[26u].z, fma(_1032, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1028));
        float _1095 = fma(_1036, cbModelParam._m0[27u].z, fma(_1032, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1028));
        float _1099 = fma(_1036, cbModelParam._m0[28u].z, fma(_1032, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1028));
        float _1124 = _1028 + _786;
        float _1125 = _1032 + _787;
        float _1126 = _1036 + _788;
        float _1136 = fma(_1126, cbModelParam._m0[26u].z, fma(_1125, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1124)) - _1091;
        float _1137 = fma(_1126, cbModelParam._m0[27u].z, fma(_1125, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1124)) - _1095;
        float _1138 = fma(_1126, cbModelParam._m0[28u].z, fma(_1125, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1124)) - _1099;
        float _1142 = inversesqrt(dot(vec3(_1136, _1137, _1138), vec3(_1136, _1137, _1138)));
        float _1155 = ((_1142 * _1136) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1091 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1156 = ((_1142 * _1137) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1095 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1157 = ((_1142 * _1138) / cbModelParam._m0[34u].z) + ((((((_1099 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1160 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1155, _1156, _1157), 0.0);
        vec4 _1167 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1155, _1156, _1157), 0.0);
        vec4 _1174 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1155, _1156, _1157), 0.0);
        vec4 _1181 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1155, _1156, _1157), 0.0);
        float _1194 = exp2((_1160.w + (-0.5)) * 20.0) * 2.0;
        float _1195 = _1194 * (_1160.x + (-0.5));
        float _1196 = _1194 * (_1160.y + (-0.5));
        float _1197 = _1194 * (_1160.z + (-0.5));
        float _1204 = exp2((_1167.w + (-0.5)) * 20.0) * 2.0;
        float _1205 = _1204 * (_1167.x + (-0.5));
        float _1206 = _1204 * (_1167.y + (-0.5));
        float _1207 = _1204 * (_1167.z + (-0.5));
        float _1214 = exp2((_1174.w + (-0.5)) * 20.0) * 2.0;
        float _1215 = _1214 * (_1174.x + (-0.5));
        float _1216 = _1214 * (_1174.y + (-0.5));
        float _1217 = _1214 * (_1174.z + (-0.5));
        float _1224 = exp2((_1181.w + (-0.5)) * 20.0) * 2.0;
        float _1225 = _1224 * (_1181.x + (-0.5));
        float _1226 = _1224 * (_1181.y + (-0.5));
        float _1227 = _1224 * (_1181.z + (-0.5));
        float _1228 = isnan(0.0) ? _1225 : (isnan(_1225) ? 0.0 : max(_1225, 0.0));
        float _1229 = isnan(0.0) ? _1226 : (isnan(_1226) ? 0.0 : max(_1226, 0.0));
        float _1230 = isnan(0.0) ? _1227 : (isnan(_1227) ? 0.0 : max(_1227, 0.0));
        float _1231 = _1195 * 0.5;
        float _1232 = _1205 * 0.5;
        float _1233 = _1215 * 0.5;
        float _1234 = dot(vec3(_1231, _1232, _1233), vec3(_1231, _1232, _1233));
        float _1239 = (_1234 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1234);
        float _1248 = (dot(vec3(_786, _787, _788), vec3(_1239 * _1231, _1239 * _1232, _1239 * _1233)) + 1.0) * 0.5;
        float _3952 = isnan(0.0) ? _1248 : (isnan(_1248) ? 0.0 : max(_1248, 0.0));
        float _1258 = sqrt(((_1232 * _1232) + (_1231 * _1231)) + (_1233 * _1233)) / (_1228 + 9.9999997473787516355514526367188e-06);
        float _3963 = isnan(0.0) ? _1258 : (isnan(_1258) ? 0.0 : max(_1258, 0.0));
        float _1259 = isnan(1.0) ? _3963 : (isnan(_3963) ? 1.0 : min(_3963, 1.0));
        float _1260 = _1259 * 2.0;
        float _1264 = (1.0 - _1259) / (_1259 + 1.0);
        float _3974 = isnan(0.0) ? _1264 : (isnan(_1264) ? 0.0 : max(_1264, 0.0));
        float _1265 = isnan(1.0) ? _3974 : (isnan(_3974) ? 1.0 : min(_3974, 1.0));
        float _1274 = ((((1.0 - _1265) * (_1260 + 2.0)) * exp2(log2(isnan(1.0) ? _3952 : (isnan(_3952) ? 1.0 : min(_3952, 1.0))) * (_1260 + 1.0))) + _1265) * _1228;
        float _1275 = _1196 * 0.5;
        float _1276 = _1206 * 0.5;
        float _1277 = _1216 * 0.5;
        float _1278 = dot(vec3(_1275, _1276, _1277), vec3(_1275, _1276, _1277));
        float _1283 = (_1278 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1278);
        float _1291 = (dot(vec3(_786, _787, _788), vec3(_1283 * _1275, _1283 * _1276, _1283 * _1277)) + 1.0) * 0.5;
        float _3985 = isnan(0.0) ? _1291 : (isnan(_1291) ? 0.0 : max(_1291, 0.0));
        float _1300 = sqrt(((_1276 * _1276) + (_1275 * _1275)) + (_1277 * _1277)) / (_1229 + 9.9999997473787516355514526367188e-06);
        float _3996 = isnan(0.0) ? _1300 : (isnan(_1300) ? 0.0 : max(_1300, 0.0));
        float _1301 = isnan(1.0) ? _3996 : (isnan(_3996) ? 1.0 : min(_3996, 1.0));
        float _1302 = _1301 * 2.0;
        float _1306 = (1.0 - _1301) / (_1301 + 1.0);
        float _4007 = isnan(0.0) ? _1306 : (isnan(_1306) ? 0.0 : max(_1306, 0.0));
        float _1307 = isnan(1.0) ? _4007 : (isnan(_4007) ? 1.0 : min(_4007, 1.0));
        float _1316 = ((((1.0 - _1307) * (_1302 + 2.0)) * exp2(log2(isnan(1.0) ? _3985 : (isnan(_3985) ? 1.0 : min(_3985, 1.0))) * (_1302 + 1.0))) + _1307) * _1229;
        float _1317 = _1197 * 0.5;
        float _1318 = _1207 * 0.5;
        float _1319 = _1217 * 0.5;
        float _1320 = dot(vec3(_1317, _1318, _1319), vec3(_1317, _1318, _1319));
        float _1325 = (_1320 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1320);
        float _1333 = (dot(vec3(_786, _787, _788), vec3(_1325 * _1317, _1325 * _1318, _1325 * _1319)) + 1.0) * 0.5;
        float _4018 = isnan(0.0) ? _1333 : (isnan(_1333) ? 0.0 : max(_1333, 0.0));
        float _1342 = sqrt(((_1318 * _1318) + (_1317 * _1317)) + (_1319 * _1319)) / (_1230 + 9.9999997473787516355514526367188e-06);
        float _4029 = isnan(0.0) ? _1342 : (isnan(_1342) ? 0.0 : max(_1342, 0.0));
        float _1343 = isnan(1.0) ? _4029 : (isnan(_4029) ? 1.0 : min(_4029, 1.0));
        float _1344 = _1343 * 2.0;
        float _1348 = (1.0 - _1343) / (_1343 + 1.0);
        float _4040 = isnan(0.0) ? _1348 : (isnan(_1348) ? 0.0 : max(_1348, 0.0));
        float _1349 = isnan(1.0) ? _4040 : (isnan(_4040) ? 1.0 : min(_4040, 1.0));
        float _1358 = ((((1.0 - _1349) * (_1344 + 2.0)) * exp2(log2(isnan(1.0) ? _4018 : (isnan(_4018) ? 1.0 : min(_4018, 1.0))) * (_1344 + 1.0))) + _1349) * _1230;
        _1366 = _1197;
        _1368 = _1196;
        _1369 = _1195;
        _1370 = _1207;
        _1371 = _1206;
        _1372 = _1205;
        _1373 = _1217;
        _1374 = _1216;
        _1375 = _1215;
        _1376 = _1230;
        _1377 = _1229;
        _1378 = _1228;
        _1379 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1274 : (isnan(_1274) ? 0.0 : max(_1274, 0.0)));
        _1380 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1316 : (isnan(_1316) ? 0.0 : max(_1316, 0.0)));
        _1381 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1358 : (isnan(_1358) ? 0.0 : max(_1358, 0.0)));
    }
    else
    {
        _1366 = _1367;
        _1368 = _1367;
        _1369 = _1367;
        _1370 = _1367;
        _1371 = _1367;
        _1372 = _1367;
        _1373 = _1367;
        _1374 = _1367;
        _1375 = _1367;
        _1376 = _1367;
        _1377 = _1367;
        _1378 = _1367;
        _1379 = 0.0;
        _1380 = 0.0;
        _1381 = 0.0;
    }
    float _1679;
    float _1680;
    float _1681;
    float _1682;
    float _1683;
    float _1684;
    float _1685;
    float _1686;
    float _1687;
    float _1688;
    float _1689;
    float _1690;
    float _1691;
    float _1692;
    float _1693;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1410 = fma(_1036, cbModelParam._m0[30u].z, fma(_1032, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1028));
        float _1414 = fma(_1036, cbModelParam._m0[31u].z, fma(_1032, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1028));
        float _1418 = fma(_1036, cbModelParam._m0[32u].z, fma(_1032, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1028));
        float _1441 = _1028 + _786;
        float _1442 = _1032 + _787;
        float _1443 = _1036 + _788;
        float _1453 = fma(_1443, cbModelParam._m0[30u].z, fma(_1442, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1441)) - _1410;
        float _1454 = fma(_1443, cbModelParam._m0[31u].z, fma(_1442, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1441)) - _1414;
        float _1455 = fma(_1443, cbModelParam._m0[32u].z, fma(_1442, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1441)) - _1418;
        float _1459 = inversesqrt(dot(vec3(_1453, _1454, _1455), vec3(_1453, _1454, _1455)));
        float _1472 = ((_1459 * _1453) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1410 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1473 = ((_1459 * _1454) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1414 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1474 = ((_1459 * _1455) / cbModelParam._m0[35u].z) + ((((((_1418 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1476 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1472, _1473, _1474), 0.0);
        vec4 _1483 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1472, _1473, _1474), 0.0);
        vec4 _1490 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1472, _1473, _1474), 0.0);
        vec4 _1497 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1472, _1473, _1474), 0.0);
        float _1509 = exp2((_1476.w + (-0.5)) * 20.0) * 2.0;
        float _1510 = _1509 * (_1476.x + (-0.5));
        float _1511 = _1509 * (_1476.y + (-0.5));
        float _1512 = _1509 * (_1476.z + (-0.5));
        float _1519 = exp2((_1483.w + (-0.5)) * 20.0) * 2.0;
        float _1520 = _1519 * (_1483.x + (-0.5));
        float _1521 = _1519 * (_1483.y + (-0.5));
        float _1522 = _1519 * (_1483.z + (-0.5));
        float _1529 = exp2((_1490.w + (-0.5)) * 20.0) * 2.0;
        float _1530 = _1529 * (_1490.x + (-0.5));
        float _1531 = _1529 * (_1490.y + (-0.5));
        float _1532 = _1529 * (_1490.z + (-0.5));
        float _1539 = exp2((_1497.w + (-0.5)) * 20.0) * 2.0;
        float _1540 = _1539 * (_1497.x + (-0.5));
        float _1541 = _1539 * (_1497.y + (-0.5));
        float _1542 = _1539 * (_1497.z + (-0.5));
        float _1543 = isnan(0.0) ? _1540 : (isnan(_1540) ? 0.0 : max(_1540, 0.0));
        float _1544 = isnan(0.0) ? _1541 : (isnan(_1541) ? 0.0 : max(_1541, 0.0));
        float _1545 = isnan(0.0) ? _1542 : (isnan(_1542) ? 0.0 : max(_1542, 0.0));
        float _1546 = _1510 * 0.5;
        float _1547 = _1520 * 0.5;
        float _1548 = _1530 * 0.5;
        float _1549 = dot(vec3(_1546, _1547, _1548), vec3(_1546, _1547, _1548));
        float _1554 = (_1549 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1549);
        float _1562 = (dot(vec3(_786, _787, _788), vec3(_1554 * _1546, _1554 * _1547, _1554 * _1548)) + 1.0) * 0.5;
        float _4081 = isnan(0.0) ? _1562 : (isnan(_1562) ? 0.0 : max(_1562, 0.0));
        float _1571 = sqrt(((_1547 * _1547) + (_1546 * _1546)) + (_1548 * _1548)) / (_1543 + 9.9999997473787516355514526367188e-06);
        float _4092 = isnan(0.0) ? _1571 : (isnan(_1571) ? 0.0 : max(_1571, 0.0));
        float _1572 = isnan(1.0) ? _4092 : (isnan(_4092) ? 1.0 : min(_4092, 1.0));
        float _1573 = _1572 * 2.0;
        float _1577 = (1.0 - _1572) / (_1572 + 1.0);
        float _4103 = isnan(0.0) ? _1577 : (isnan(_1577) ? 0.0 : max(_1577, 0.0));
        float _1578 = isnan(1.0) ? _4103 : (isnan(_4103) ? 1.0 : min(_4103, 1.0));
        float _1587 = ((((1.0 - _1578) * (_1573 + 2.0)) * exp2(log2(isnan(1.0) ? _4081 : (isnan(_4081) ? 1.0 : min(_4081, 1.0))) * (_1573 + 1.0))) + _1578) * _1543;
        float _1588 = _1511 * 0.5;
        float _1589 = _1521 * 0.5;
        float _1590 = _1531 * 0.5;
        float _1591 = dot(vec3(_1588, _1589, _1590), vec3(_1588, _1589, _1590));
        float _1596 = (_1591 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1591);
        float _1604 = (dot(vec3(_786, _787, _788), vec3(_1596 * _1588, _1596 * _1589, _1596 * _1590)) + 1.0) * 0.5;
        float _4114 = isnan(0.0) ? _1604 : (isnan(_1604) ? 0.0 : max(_1604, 0.0));
        float _1613 = sqrt(((_1589 * _1589) + (_1588 * _1588)) + (_1590 * _1590)) / (_1544 + 9.9999997473787516355514526367188e-06);
        float _4125 = isnan(0.0) ? _1613 : (isnan(_1613) ? 0.0 : max(_1613, 0.0));
        float _1614 = isnan(1.0) ? _4125 : (isnan(_4125) ? 1.0 : min(_4125, 1.0));
        float _1615 = _1614 * 2.0;
        float _1619 = (1.0 - _1614) / (_1614 + 1.0);
        float _4136 = isnan(0.0) ? _1619 : (isnan(_1619) ? 0.0 : max(_1619, 0.0));
        float _1620 = isnan(1.0) ? _4136 : (isnan(_4136) ? 1.0 : min(_4136, 1.0));
        float _1629 = ((((1.0 - _1620) * (_1615 + 2.0)) * exp2(log2(isnan(1.0) ? _4114 : (isnan(_4114) ? 1.0 : min(_4114, 1.0))) * (_1615 + 1.0))) + _1620) * _1544;
        float _1630 = _1512 * 0.5;
        float _1631 = _1522 * 0.5;
        float _1632 = _1532 * 0.5;
        float _1633 = dot(vec3(_1630, _1631, _1632), vec3(_1630, _1631, _1632));
        float _1638 = (_1633 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1633);
        float _1646 = (dot(vec3(_786, _787, _788), vec3(_1638 * _1630, _1638 * _1631, _1638 * _1632)) + 1.0) * 0.5;
        float _4147 = isnan(0.0) ? _1646 : (isnan(_1646) ? 0.0 : max(_1646, 0.0));
        float _1655 = sqrt(((_1631 * _1631) + (_1630 * _1630)) + (_1632 * _1632)) / (_1545 + 9.9999997473787516355514526367188e-06);
        float _4158 = isnan(0.0) ? _1655 : (isnan(_1655) ? 0.0 : max(_1655, 0.0));
        float _1656 = isnan(1.0) ? _4158 : (isnan(_4158) ? 1.0 : min(_4158, 1.0));
        float _1657 = _1656 * 2.0;
        float _1661 = (1.0 - _1656) / (_1656 + 1.0);
        float _4169 = isnan(0.0) ? _1661 : (isnan(_1661) ? 0.0 : max(_1661, 0.0));
        float _1662 = isnan(1.0) ? _4169 : (isnan(_4169) ? 1.0 : min(_4169, 1.0));
        float _1671 = ((((1.0 - _1662) * (_1657 + 2.0)) * exp2(log2(isnan(1.0) ? _4147 : (isnan(_4147) ? 1.0 : min(_4147, 1.0))) * (_1657 + 1.0))) + _1662) * _1545;
        _1679 = _1512;
        _1680 = _1511;
        _1681 = _1510;
        _1682 = _1522;
        _1683 = _1521;
        _1684 = _1520;
        _1685 = _1532;
        _1686 = _1531;
        _1687 = _1530;
        _1688 = _1545;
        _1689 = _1544;
        _1690 = _1543;
        _1691 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1587 : (isnan(_1587) ? 0.0 : max(_1587, 0.0)));
        _1692 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1629 : (isnan(_1629) ? 0.0 : max(_1629, 0.0)));
        _1693 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1671 : (isnan(_1671) ? 0.0 : max(_1671, 0.0)));
    }
    else
    {
        _1679 = _1367;
        _1680 = _1367;
        _1681 = _1367;
        _1682 = _1367;
        _1683 = _1367;
        _1684 = _1367;
        _1685 = _1367;
        _1686 = _1367;
        _1687 = _1367;
        _1688 = _1367;
        _1689 = _1367;
        _1690 = _1367;
        _1691 = 0.0;
        _1692 = 0.0;
        _1693 = 0.0;
    }
    float _1703 = (cbModelParam._m0[1u].x * (_1691 - _1379)) + _1379;
    float _1704 = (cbModelParam._m0[1u].x * (_1692 - _1380)) + _1380;
    float _1705 = (cbModelParam._m0[1u].x * (_1693 - _1381)) + _1381;
    float _1726 = fma(_1705, cbSceneParam._m0[89u].z, fma(_1704, cbSceneParam._m0[89u].y, _1703 * cbSceneParam._m0[89u].x));
    float _1729 = fma(_1705, cbSceneParam._m0[90u].z, fma(_1704, cbSceneParam._m0[90u].y, _1703 * cbSceneParam._m0[90u].x));
    float _1732 = fma(_1705, cbSceneParam._m0[91u].z, fma(_1704, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1703));
    float _1747 = _972 * 0.5;
    float _1748 = _973 * 0.5;
    float _1749 = _974 * 0.5;
    float _1750 = dot(vec4(_1747, _1748, _1749, 1.0), vec4(_1681, _1684, _1687, _1690));
    float _1753 = dot(vec4(_1747, _1748, _1749, 1.0), vec4(_1680, _1683, _1686, _1689));
    float _1756 = dot(vec4(_1747, _1748, _1749, 1.0), vec4(_1679, _1682, _1685, _1688));
    float _1790;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1763 = dot(vec4(_1747, _1748, _1749, 1.0), vec4(_1366, _1370, _1373, _1376));
        float _1767 = dot(vec4(_1747, _1748, _1749, 1.0), vec4(_1368, _1371, _1374, _1377));
        float _1771 = dot(vec4(_1747, _1748, _1749, 1.0), vec4(_1369, _1372, _1375, _1378));
        float _1778 = dot(vec4(cbModelParam._m0[39u]), vec4(_1747, _1748, _1749, 1.0));
        _1790 = dot(vec3(isnan(0.0) ? _1771 : (isnan(_1771) ? 0.0 : max(_1771, 0.0)), isnan(0.0) ? _1767 : (isnan(_1767) ? 0.0 : max(_1767, 0.0)), isnan(0.0) ? _1763 : (isnan(_1763) ? 0.0 : max(_1763, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1778) ? 0.0 : (isnan(0.0) ? _1778 : max(0.0, _1778))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1790 = 1.0;
    }
    float _1801;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1792 = dot(vec4(cbModelParam._m0[40u]), vec4(_1747, _1748, _1749, 1.0));
        _1801 = dot(vec3(isnan(0.0) ? _1750 : (isnan(_1750) ? 0.0 : max(_1750, 0.0)), isnan(0.0) ? _1753 : (isnan(_1753) ? 0.0 : max(_1753, 0.0)), isnan(0.0) ? _1756 : (isnan(_1756) ? 0.0 : max(_1756, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1792) ? 0.0 : (isnan(0.0) ? _1792 : max(0.0, _1792))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1801 = 1.0;
    }
    float _1805 = (_1801 * cbModelParam._m0[1u].x) + (_1790 * (1.0 - cbModelParam._m0[1u].x));
    float _1815 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _789);
    float _1816 = isnan(_1815) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1815 : min(cbModelParam._m0[25u].z, _1815));
    float _1896;
    float _1898;
    float _1900;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1863 = fma(_1036, cbModelParam._m0[13u].z, fma(_1032, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1028)) + cbModelParam._m0[13u].w;
        float _1867 = fma(_1036, cbModelParam._m0[14u].z, fma(_1032, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1028)) + cbModelParam._m0[14u].w;
        float _1871 = fma(_1036, cbModelParam._m0[15u].z, fma(_1032, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1028)) + cbModelParam._m0[15u].w;
        float _1874 = fma(_974, cbModelParam._m0[13u].z, fma(_973, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _972));
        float _1877 = fma(_974, cbModelParam._m0[14u].z, fma(_973, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _972));
        float _1880 = fma(_974, cbModelParam._m0[15u].z, fma(_973, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _972));
        float _1908;
        if (_1874 > 0.0)
        {
            _1908 = abs((1.0 - _1863) / _1874);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1874 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1863 + 1.0) / _1874);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1908 = frontier_phi_17_15_ladder;
        }
        float _2112;
        if (_1877 > 0.0)
        {
            _2112 = abs((1.0 - _1867) / _1877);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1877 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1867 + 1.0) / _1877);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2112 = frontier_phi_26_22_ladder;
        }
        float _2366;
        if (_1880 > 0.0)
        {
            _2366 = abs((1.0 - _1871) / _1880);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1880 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1871 + 1.0) / _1880);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2366 = frontier_phi_38_33_ladder;
        }
        float _2368 = isnan(_2112) ? _1908 : (isnan(_1908) ? _2112 : min(_1908, _2112));
        float _2369 = isnan(_2366) ? _2368 : (isnan(_2368) ? _2366 : min(_2368, _2366));
        float _2373 = (_2369 * _1874) + _1863;
        float _2374 = (_2369 * _1877) + _1867;
        float _2375 = (_2369 * _1880) + _1871;
        float _2376 = _2369 * 9.9999997473787516355514526367188e-05;
        float _2378 = (-1.0) - _2376;
        float _2380 = _2376 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2375 > _2380) || ((_2375 < _2378) || ((_2374 > _2380) || ((_2374 < _2378) || ((_2373 < _2378) || (_2373 > _2380))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2503 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2375, cbModelParam._m0[9u].z, fma(_2374, cbModelParam._m0[9u].y, _2373 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2375, cbModelParam._m0[10u].z, fma(_2374, cbModelParam._m0[10u].y, _2373 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2375, cbModelParam._m0[11u].z, fma(_2374, cbModelParam._m0[11u].y, _2373 * cbModelParam._m0[11u].x))), _1816);
            frontier_phi_16_38_ladder = _2503.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2503.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2503.x * cbModelParam._m0[1u].y;
        }
        _1896 = frontier_phi_16_38_ladder_2;
        _1898 = frontier_phi_16_38_ladder_1;
        _1900 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1884 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_972, _973, _974), _1816);
        _1896 = _1884.x * cbModelParam._m0[1u].y;
        _1898 = _1884.y * cbModelParam._m0[1u].y;
        _1900 = _1884.z * cbModelParam._m0[1u].y;
    }
    float _1904 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _789);
    float _1905 = isnan(_1904) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1904 : min(cbModelParam._m0[25u].w, _1904));
    float _1996;
    float _1998;
    float _2000;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1960 = fma(_1036, cbModelParam._m0[21u].z, fma(_1032, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1028)) + cbModelParam._m0[21u].w;
        float _1964 = fma(_1036, cbModelParam._m0[22u].z, fma(_1032, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1028)) + cbModelParam._m0[22u].w;
        float _1968 = fma(_1036, cbModelParam._m0[23u].z, fma(_1032, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1028)) + cbModelParam._m0[23u].w;
        float _1971 = fma(_974, cbModelParam._m0[21u].z, fma(_973, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _972));
        float _1974 = fma(_974, cbModelParam._m0[22u].z, fma(_973, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _972));
        float _1977 = fma(_974, cbModelParam._m0[23u].z, fma(_973, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _972));
        float _2117;
        if (_1971 > 0.0)
        {
            _2117 = abs((1.0 - _1960) / _1971);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1971 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1960 + 1.0) / _1971);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2117 = frontier_phi_28_24_ladder;
        }
        float _2393;
        if (_1974 > 0.0)
        {
            _2393 = abs((1.0 - _1964) / _1974);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1974 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1964 + 1.0) / _1974);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2393 = frontier_phi_40_35_ladder;
        }
        float _2606;
        if (_1977 > 0.0)
        {
            _2606 = abs((1.0 - _1968) / _1977);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1977 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1968 + 1.0) / _1977);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2606 = frontier_phi_49_46_ladder;
        }
        float _2608 = isnan(_2393) ? _2117 : (isnan(_2117) ? _2393 : min(_2117, _2393));
        float _2609 = isnan(_2606) ? _2608 : (isnan(_2608) ? _2606 : min(_2608, _2606));
        float _2613 = (_2609 * _1971) + _1960;
        float _2614 = (_2609 * _1974) + _1964;
        float _2615 = (_2609 * _1977) + _1968;
        float _2616 = _2609 * 9.9999997473787516355514526367188e-05;
        float _2617 = (-1.0) - _2616;
        float _2619 = _2616 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2615 > _2619) || ((_2615 < _2617) || ((_2614 > _2619) || ((_2614 < _2617) || ((_2613 < _2617) || (_2613 > _2619))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2814 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2615, cbModelParam._m0[17u].z, fma(_2614, cbModelParam._m0[17u].y, _2613 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2615, cbModelParam._m0[18u].z, fma(_2614, cbModelParam._m0[18u].y, _2613 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2615, cbModelParam._m0[19u].z, fma(_2614, cbModelParam._m0[19u].y, _2613 * cbModelParam._m0[19u].x))), _1905);
            frontier_phi_25_49_ladder = _2814.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2814.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2814.x * cbModelParam._m0[1u].z;
        }
        _1996 = frontier_phi_25_49_ladder_2;
        _1998 = frontier_phi_25_49_ladder_1;
        _2000 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1980 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_972, _973, _974), _1905);
        _1996 = _1980.x * cbModelParam._m0[1u].z;
        _1998 = _1980.y * cbModelParam._m0[1u].z;
        _2000 = _1980.z * cbModelParam._m0[1u].z;
    }
    float _2013 = (((_999 * _949) + _1000) * _964) * ((cbModelParam._m0[1u].w * (_1996 - _1896)) + _1896);
    float _2015 = (((_999 * _951) + _1000) * _964) * ((cbModelParam._m0[1u].w * (_1998 - _1898)) + _1898);
    float _2017 = (((_999 * _952) + _1000) * _964) * ((cbModelParam._m0[1u].w * (_2000 - _1900)) + _1900);
    float _2020 = fma(_2017, cbSceneParam._m0[89u].z, fma(_2015, cbSceneParam._m0[89u].y, _2013 * cbSceneParam._m0[89u].x));
    float _2023 = fma(_2017, cbSceneParam._m0[90u].z, fma(_2015, cbSceneParam._m0[90u].y, _2013 * cbSceneParam._m0[90u].x));
    float _2026 = fma(_2017, cbSceneParam._m0[91u].z, fma(_2015, cbSceneParam._m0[91u].y, _2013 * cbSceneParam._m0[91u].x));
    uvec4 _2036 = floatBitsToUint(cbInstanceData._m0[_924 + 5u]);
    uint _2038 = _2036.x * 14u;
    uint _2039 = _2038 + 13u;
    float _2046 = _964 + (-1.0);
    float _2051 = (cbLight._m0[_2039].x * _2046) + 1.0;
    float _2052 = (cbLight._m0[_2039].y * _2046) + 1.0;
    float _2053 = (cbLight._m0[_2039].z * _2046) + 1.0;
    float _2054 = (cbLight._m0[_2039].w * _2046) + 1.0;
    uint _2055 = _2038 + 5u;
    float _2061 = isnan(1.0) ? _2052 : (isnan(_2052) ? 1.0 : min(_2052, 1.0));
    uint _2065 = _2038 + 4u;
    float _2071 = isnan(1.0) ? _2051 : (isnan(_2051) ? 1.0 : min(_2051, 1.0));
    uint _2075 = _2038 | 1u;
    float _2086 = dot(vec3(cbLight._m0[_2038].xyz), vec3(_786, _787, _788));
    float _2089 = dot(vec3(cbLight._m0[_2075].xyz), vec3(_786, _787, _788));
    float _4305 = isnan(0.0) ? _2086 : (isnan(_2086) ? 0.0 : max(_2086, 0.0));
    float _4316 = isnan(0.0) ? _2089 : (isnan(_2089) ? 0.0 : max(_2089, 0.0));
    float _2094 = (isnan(1.0) ? _4305 : (isnan(_4305) ? 1.0 : min(_4305, 1.0))) * 0.3183098733425140380859375;
    float _2096 = (isnan(1.0) ? _4316 : (isnan(_4316) ? 1.0 : min(_4316, 1.0))) * 0.3183098733425140380859375;
    float _2103 = ((cbLight._m0[_2055].x * _2061) * _2096) + ((cbLight._m0[_2065].x * _2071) * _2094);
    float _2104 = ((_2061 * cbLight._m0[_2055].y) * _2096) + ((_2071 * cbLight._m0[_2065].y) * _2094);
    float _2105 = ((_2061 * cbLight._m0[_2055].z) * _2096) + ((_2071 * cbLight._m0[_2065].z) * _2094);
    uvec4 _2109 = floatBitsToUint(cbLight._m0[_2038 + 12u]);
    bool _2111 = _2109.x == 0u;
    float _2122;
    float _2124;
    float _2126;
    if (_2111)
    {
        _2122 = _2103;
        _2124 = _2104;
        _2126 = _2105;
    }
    else
    {
        uint _2130 = _2038 + 6u;
        float _2146 = (dot(vec3(cbLight._m0[_2038 + 2u].xyz), vec3(_786, _787, _788)) * 0.5) + 0.5;
        float _2147 = _2146 * _2146;
        float _4327 = isnan(0.0) ? _2147 : (isnan(_2147) ? 0.0 : max(_2147, 0.0));
        float _2148 = isnan(1.0) ? _4327 : (isnan(_4327) ? 1.0 : min(_4327, 1.0));
        float _2149 = isnan(1.0) ? _2053 : (isnan(_2053) ? 1.0 : min(_2053, 1.0));
        _2122 = (((cbLight._m0[_2130].x * 0.3183098733425140380859375) * _2148) * _2149) + _2103;
        _2124 = (((cbLight._m0[_2130].y * 0.3183098733425140380859375) * _2148) * _2149) + _2104;
        _2126 = (((cbLight._m0[_2130].z * 0.3183098733425140380859375) * _2148) * _2149) + _2105;
    }
    bool _2129 = _2109.y == 0u;
    float _2167;
    float _2169;
    float _2171;
    if (_2129)
    {
        _2167 = _2122;
        _2169 = _2124;
        _2171 = _2126;
    }
    else
    {
        uint _2337 = _2038 + 7u;
        float _2353 = (dot(vec3(cbLight._m0[_2038 + 3u].xyz), vec3(_786, _787, _788)) * 0.5) + 0.5;
        float _2354 = _2353 * _2353;
        float _4343 = isnan(0.0) ? _2354 : (isnan(_2354) ? 0.0 : max(_2354, 0.0));
        float _2355 = isnan(1.0) ? _4343 : (isnan(_4343) ? 1.0 : min(_4343, 1.0));
        float _2356 = isnan(1.0) ? _2054 : (isnan(_2054) ? 1.0 : min(_2054, 1.0));
        _2167 = (((cbLight._m0[_2337].x * 0.3183098733425140380859375) * _2355) * _2356) + _2122;
        _2169 = (((cbLight._m0[_2337].y * 0.3183098733425140380859375) * _2355) * _2356) + _2124;
        _2171 = (((cbLight._m0[_2337].z * 0.3183098733425140380859375) * _2355) * _2356) + _2126;
    }
    uint _2174 = _2038 + 8u;
    float _2187 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2038].w)) * _789) * 0.949999988079071044921875);
    float _2188 = _2187 * _2187;
    float _2189 = cbLight._m0[_2038].x + _866;
    float _2190 = cbLight._m0[_2038].y + _867;
    float _2191 = cbLight._m0[_2038].z + _868;
    float _2195 = inversesqrt(dot(vec3(_2189, _2190, _2191), vec3(_2189, _2190, _2191)));
    float _2196 = _2195 * _2189;
    float _2197 = _2195 * _2190;
    float _2198 = _2195 * _2191;
    float _2199 = dot(vec3(_786, _787, _788), vec3(cbLight._m0[_2038].xyz));
    float _4359 = isnan(0.0) ? _2199 : (isnan(_2199) ? 0.0 : max(_2199, 0.0));
    float _2202 = isnan(1.0) ? _4359 : (isnan(_4359) ? 1.0 : min(_4359, 1.0));
    float _4370 = isnan(0.0) ? _965 : (isnan(_965) ? 0.0 : max(_965, 0.0));
    float _2203 = isnan(1.0) ? _4370 : (isnan(_4370) ? 1.0 : min(_4370, 1.0));
    float _2204 = dot(vec3(_786, _787, _788), vec3(_2196, _2197, _2198));
    float _4381 = isnan(0.0) ? _2204 : (isnan(_2204) ? 0.0 : max(_2204, 0.0));
    float _2207 = isnan(1.0) ? _4381 : (isnan(_4381) ? 1.0 : min(_4381, 1.0));
    float _2208 = dot(vec3(cbLight._m0[_2038].xyz), vec3(_2196, _2197, _2198));
    float _4392 = isnan(0.0) ? _2208 : (isnan(_2208) ? 0.0 : max(_2208, 0.0));
    float _2212 = _2188 * _2188;
    float _2216 = ((_2207 * _2207) * (_2212 + (-1.0))) + 1.0;
    float _2224 = exp2(log2(1.0 - (isnan(1.0) ? _4392 : (isnan(_4392) ? 1.0 : min(_4392, 1.0)))) * 5.0);
    float _2225 = 0.959999978542327880859375 - _946;
    float _2227 = 0.959999978542327880859375 - _947;
    float _2228 = 0.959999978542327880859375 - _948;
    float _2235 = 1.0 - _2188;
    float _2246 = (0.5 / (((_2203 * ((_2202 * _2235) + _2188)) + 9.9999999392252902907785028219223e-09) + (((_2203 * _2235) + _2188) * _2202))) * _2202;
    float _4403 = isnan(0.0) ? _2246 : (isnan(_2246) ? 0.0 : max(_2246, 0.0));
    float _2248 = (isnan(1.0) ? _4403 : (isnan(_4403) ? 1.0 : min(_4403, 1.0))) * (_2212 / ((_2216 * _2216) * 3.141590118408203125));
    uint _2259 = _2038 + 9u;
    float _2270 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2075].w)) * _789) * 0.949999988079071044921875);
    float _2271 = _2270 * _2270;
    float _2272 = cbLight._m0[_2075].x + _866;
    float _2273 = cbLight._m0[_2075].y + _867;
    float _2274 = cbLight._m0[_2075].z + _868;
    float _2278 = inversesqrt(dot(vec3(_2272, _2273, _2274), vec3(_2272, _2273, _2274)));
    float _2279 = _2278 * _2272;
    float _2280 = _2278 * _2273;
    float _2281 = _2278 * _2274;
    float _2282 = dot(vec3(_786, _787, _788), vec3(cbLight._m0[_2075].xyz));
    float _4414 = isnan(0.0) ? _2282 : (isnan(_2282) ? 0.0 : max(_2282, 0.0));
    float _2285 = isnan(1.0) ? _4414 : (isnan(_4414) ? 1.0 : min(_4414, 1.0));
    float _2286 = dot(vec3(_786, _787, _788), vec3(_2279, _2280, _2281));
    float _4425 = isnan(0.0) ? _2286 : (isnan(_2286) ? 0.0 : max(_2286, 0.0));
    float _2289 = isnan(1.0) ? _4425 : (isnan(_4425) ? 1.0 : min(_4425, 1.0));
    float _2290 = dot(vec3(cbLight._m0[_2075].xyz), vec3(_2279, _2280, _2281));
    float _4436 = isnan(0.0) ? _2290 : (isnan(_2290) ? 0.0 : max(_2290, 0.0));
    float _2294 = _2271 * _2271;
    float _2298 = ((_2289 * _2289) * (_2294 + (-1.0))) + 1.0;
    float _2305 = exp2(log2(1.0 - (isnan(1.0) ? _4436 : (isnan(_4436) ? 1.0 : min(_4436, 1.0)))) * 5.0);
    float _2312 = 1.0 - _2271;
    float _2322 = (0.5 / (((_2203 * ((_2285 * _2312) + _2271)) + 9.9999999392252902907785028219223e-09) + (((_2203 * _2312) + _2271) * _2285))) * _2285;
    float _4447 = isnan(0.0) ? _2322 : (isnan(_2322) ? 0.0 : max(_2322, 0.0));
    float _2324 = (isnan(1.0) ? _4447 : (isnan(_4447) ? 1.0 : min(_4447, 1.0))) * (_2294 / ((_2298 * _2298) * 3.141590118408203125));
    float _2334 = (((((_2305 * _2225) + _949) * cbLight._m0[_2259].x) * _2324) * _2061) + (((((_2224 * _2225) + _949) * cbLight._m0[_2174].x) * _2248) * _2071);
    float _2335 = (((((_2305 * _2227) + _951) * cbLight._m0[_2259].y) * _2324) * _2061) + (((((_2224 * _2227) + _951) * cbLight._m0[_2174].y) * _2248) * _2071);
    float _2336 = (((((_2305 * _2228) + _952) * cbLight._m0[_2259].z) * _2324) * _2061) + (((((_2224 * _2228) + _952) * cbLight._m0[_2174].z) * _2248) * _2071);
    float _2398;
    float _2400;
    float _2402;
    if (_2111)
    {
        _2398 = _2334;
        _2400 = _2335;
        _2402 = _2336;
    }
    else
    {
        uint _2404 = _2038 + 2u;
        uint _2408 = _2038 + 10u;
        float _2422 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2404].w)) * _789) * 0.949999988079071044921875);
        float _2423 = _2422 * _2422;
        float _2424 = cbLight._m0[_2404].x + _866;
        float _2425 = cbLight._m0[_2404].y + _867;
        float _2426 = cbLight._m0[_2404].z + _868;
        float _2430 = inversesqrt(dot(vec3(_2424, _2425, _2426), vec3(_2424, _2425, _2426)));
        float _2431 = _2430 * _2424;
        float _2432 = _2430 * _2425;
        float _2433 = _2430 * _2426;
        float _2434 = dot(vec3(_786, _787, _788), vec3(cbLight._m0[_2404].xyz));
        float _4458 = isnan(0.0) ? _2434 : (isnan(_2434) ? 0.0 : max(_2434, 0.0));
        float _2437 = isnan(1.0) ? _4458 : (isnan(_4458) ? 1.0 : min(_4458, 1.0));
        float _2438 = dot(vec3(_786, _787, _788), vec3(_2431, _2432, _2433));
        float _4469 = isnan(0.0) ? _2438 : (isnan(_2438) ? 0.0 : max(_2438, 0.0));
        float _2441 = isnan(1.0) ? _4469 : (isnan(_4469) ? 1.0 : min(_4469, 1.0));
        float _2442 = dot(vec3(cbLight._m0[_2404].xyz), vec3(_2431, _2432, _2433));
        float _4480 = isnan(0.0) ? _2442 : (isnan(_2442) ? 0.0 : max(_2442, 0.0));
        float _2446 = _2423 * _2423;
        float _2450 = ((_2441 * _2441) * (_2446 + (-1.0))) + 1.0;
        float _2457 = exp2(log2(1.0 - (isnan(1.0) ? _4480 : (isnan(_4480) ? 1.0 : min(_4480, 1.0)))) * 5.0);
        float _2464 = 1.0 - _2423;
        float _2474 = (0.5 / (((_2203 * ((_2437 * _2464) + _2423)) + 9.9999999392252902907785028219223e-09) + (((_2203 * _2464) + _2423) * _2437))) * _2437;
        float _4491 = isnan(0.0) ? _2474 : (isnan(_2474) ? 0.0 : max(_2474, 0.0));
        float _2476 = (isnan(1.0) ? _4491 : (isnan(_4491) ? 1.0 : min(_4491, 1.0))) * (_2446 / ((_2450 * _2450) * 3.141590118408203125));
        float _2477 = isnan(1.0) ? _2053 : (isnan(_2053) ? 1.0 : min(_2053, 1.0));
        _2398 = (((((_2457 * _2225) + _949) * cbLight._m0[_2408].x) * _2476) * _2477) + _2334;
        _2400 = (((((_2457 * _2227) + _951) * cbLight._m0[_2408].y) * _2476) * _2477) + _2335;
        _2402 = (((((_2457 * _2228) + _952) * cbLight._m0[_2408].z) * _2476) * _2477) + _2336;
    }
    float _2512;
    float _2514;
    float _2516;
    if (_2129)
    {
        _2512 = _2398;
        _2514 = _2400;
        _2516 = _2402;
    }
    else
    {
        uint _2523 = _2038 + 3u;
        uint _2527 = _2038 + 11u;
        float _2541 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2523].w)) * _789) * 0.949999988079071044921875);
        float _2542 = _2541 * _2541;
        float _2543 = cbLight._m0[_2523].x + _866;
        float _2544 = cbLight._m0[_2523].y + _867;
        float _2545 = cbLight._m0[_2523].z + _868;
        float _2549 = inversesqrt(dot(vec3(_2543, _2544, _2545), vec3(_2543, _2544, _2545)));
        float _2550 = _2549 * _2543;
        float _2551 = _2549 * _2544;
        float _2552 = _2549 * _2545;
        float _2553 = dot(vec3(_786, _787, _788), vec3(cbLight._m0[_2523].xyz));
        float _4507 = isnan(0.0) ? _2553 : (isnan(_2553) ? 0.0 : max(_2553, 0.0));
        float _2556 = isnan(1.0) ? _4507 : (isnan(_4507) ? 1.0 : min(_4507, 1.0));
        float _2557 = dot(vec3(_786, _787, _788), vec3(_2550, _2551, _2552));
        float _4518 = isnan(0.0) ? _2557 : (isnan(_2557) ? 0.0 : max(_2557, 0.0));
        float _2560 = isnan(1.0) ? _4518 : (isnan(_4518) ? 1.0 : min(_4518, 1.0));
        float _2561 = dot(vec3(cbLight._m0[_2523].xyz), vec3(_2550, _2551, _2552));
        float _4529 = isnan(0.0) ? _2561 : (isnan(_2561) ? 0.0 : max(_2561, 0.0));
        float _2565 = _2542 * _2542;
        float _2569 = ((_2560 * _2560) * (_2565 + (-1.0))) + 1.0;
        float _2576 = exp2(log2(1.0 - (isnan(1.0) ? _4529 : (isnan(_4529) ? 1.0 : min(_4529, 1.0)))) * 5.0);
        float _2583 = 1.0 - _2542;
        float _2593 = (0.5 / (((_2203 * ((_2556 * _2583) + _2542)) + 9.9999999392252902907785028219223e-09) + (((_2203 * _2583) + _2542) * _2556))) * _2556;
        float _4540 = isnan(0.0) ? _2593 : (isnan(_2593) ? 0.0 : max(_2593, 0.0));
        float _2595 = (isnan(1.0) ? _4540 : (isnan(_4540) ? 1.0 : min(_4540, 1.0))) * (_2565 / ((_2569 * _2569) * 3.141590118408203125));
        float _2596 = isnan(1.0) ? _2054 : (isnan(_2054) ? 1.0 : min(_2054, 1.0));
        _2512 = (((((_2576 * _2225) + _949) * cbLight._m0[_2527].x) * _2595) * _2596) + _2398;
        _2514 = (((((_2576 * _2227) + _951) * cbLight._m0[_2527].y) * _2595) * _2596) + _2400;
        _2516 = (((((_2576 * _2228) + _952) * cbLight._m0[_2527].z) * _2595) * _2596) + _2402;
    }
    float _2731;
    float _2733;
    float _2735;
    float _2737;
    float _2739;
    float _2741;
    if (_2036.y == 0u)
    {
        float _2671 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2672 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2671;
        float _2673 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2671;
        float _2674 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2671;
        uvec4 _2686 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2687 = _2686.x;
        uint _2698 = uint((float(_2686.y) * floor(float(uint(cbSceneParam._m0[85u].y * _887) / _2687))) + floor(float(uint(cbSceneParam._m0[85u].x * _886) / _2687)));
        float _2708 = (log2(_2674 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2709 = isnan(0.0) ? _2708 : (isnan(_2708) ? 0.0 : max(_2708, 0.0));
        uint _2712 = uint(isnan(14.0) ? _2709 : (isnan(_2709) ? 14.0 : min(_2709, 14.0)));
        uvec4 _2717 = texelFetch(g_lightClusterGridBuffer, int(((_2712 << 2u) + (_2698 << 6u)) >> 2u));
        uint _2718 = _2717.x;
        uint _2719 = _2686.z;
        float _2819;
        float _2821;
        float _2823;
        float _2825;
        float _2827;
        float _2829;
        if (((((1u << ((_2719 >> 4u) & 15u)) + 4294967295u) & _2718) == 0u) || ((_2719 & 240u) == 0u))
        {
            _2819 = 0.0;
            _2821 = 0.0;
            _2823 = 0.0;
            _2825 = 0.0;
            _2827 = 0.0;
            _2829 = 0.0;
        }
        else
        {
            float _2820;
            float _2822;
            float _2824;
            float _2826;
            float _2828;
            float _2830;
            float _2971 = 0.0;
            float _2972 = 0.0;
            float _2973 = 0.0;
            float _2974 = 0.0;
            float _2975 = 0.0;
            float _2976 = 0.0;
            uint _2977 = 0u;
            uint _2986;
            bool _2987;
            for (;;)
            {
                _2986 = texelFetch(g_lightClassification, int((((_2712 << 5u) + (_2698 << 9u)) + (_2977 << 2u)) >> 2u)).x;
                _2987 = _2986 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2987)
                {
                    frontier_phi_66_pred = _2971;
                    frontier_phi_66_pred_1 = _2976;
                    frontier_phi_66_pred_2 = _2975;
                    frontier_phi_66_pred_3 = _2974;
                    frontier_phi_66_pred_4 = _2973;
                    frontier_phi_66_pred_5 = _2972;
                }
                else
                {
                    float _3116;
                    float _3117;
                    float _3118;
                    float _3119;
                    float _3120;
                    float _3121;
                    uint _3122;
                    _3116 = _2971;
                    _3117 = _2972;
                    _3118 = _2973;
                    _3119 = _2974;
                    _3120 = _2975;
                    _3121 = _2976;
                    _3122 = _2986;
                    float _3043;
                    float _3044;
                    float _3045;
                    float _3046;
                    float _3047;
                    float _3048;
                    for (;;)
                    {
                        uint _3126 = uint(findLSB(_3122)) + (_2977 << 5u);
                        uint _3123 = (_3122 + 4294967295u) & _3122;
                        uint _3128 = _3126 * 48u;
                        vec4 _3142 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3128)).x, texelFetch(g_PointLightRenderingBuffer, int(_3128 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3128 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3128 + 3u)).x));
                        uint _3148 = (_3126 * 48u) + 4u;
                        vec4 _3161 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3148)).x, texelFetch(g_PointLightRenderingBuffer, int(_3148 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3148 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3148 + 3u)).x));
                        uint _3167 = (_3126 * 48u) + 8u;
                        vec3 _3178 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3167)).x, texelFetch(g_PointLightRenderingBuffer, int(_3167 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3167 + 2u)).x));
                        float _3182 = _3142.x - _2672;
                        float _3183 = _3142.y - _2673;
                        float _3184 = _3142.z - _2674;
                        float _3185 = dot(vec3(_3182, _3183, _3184), vec3(_3182, _3183, _3184));
                        float _3188 = inversesqrt(_3185);
                        float _3189 = _3188 * _3182;
                        float _3190 = _3188 * _3183;
                        float _3191 = _3188 * _3184;
                        float _3192 = dot(vec3(_905, _908, _911), vec3(_3189, _3190, _3191));
                        float _3197 = 1.0 - (_3185 * _3142.w);
                        float _4566 = isnan(0.0) ? _3197 : (isnan(_3197) ? 0.0 : max(_3197, 0.0));
                        float _3198 = isnan(1.0) ? _4566 : (isnan(_4566) ? 1.0 : min(_4566, 1.0));
                        float _3199 = sqrt(_3185) * _3161.w;
                        float _3202 = 1.39999997615814208984375 / (_3199 + 1.39999997615814208984375);
                        float _3203 = _3202 * _3202;
                        float _3206 = ((1.0 - _3203) * _3192) + _3203;
                        float _3209 = _3199 * _3199;
                        float _3213 = ((isnan(0.0) ? _3206 : (isnan(_3206) ? 0.0 : max(_3206, 0.0))) * _3198) / ((_3209 * 0.699999988079071044921875) + 1.0);
                        float _3217 = (-0.0) - _2672;
                        float _3218 = (-0.0) - _2673;
                        float _3219 = (-0.0) - _2674;
                        float _3223 = inversesqrt(dot(vec3(_3217, _3218, _3219), vec3(_3217, _3218, _3219)));
                        float _3224 = _3223 * _3217;
                        float _3225 = _3223 * _3218;
                        float _3226 = _3223 * _3219;
                        float _3234 = exp2(log2(1.0 / ((_3209 * 3.5) + 5.0)) * 0.25);
                        float _3235 = 1.0 - _980;
                        float _3242 = sqrt(1.0 - ((1.0 - (_3235 * _3235)) * (1.0 - (_3234 * _3234))));
                        float _3243 = _3242 * _3242;
                        float _3244 = _3243 * _3243;
                        float _3245 = _3224 + _3189;
                        float _3246 = _3225 + _3190;
                        float _3247 = _3226 + _3191;
                        float _3251 = inversesqrt(dot(vec3(_3245, _3246, _3247), vec3(_3245, _3246, _3247)));
                        float _3255 = dot(vec3(_905, _908, _911), vec3(_3224, _3225, _3226));
                        float _4582 = isnan(0.0) ? _3255 : (isnan(_3255) ? 0.0 : max(_3255, 0.0));
                        float _3258 = isnan(1.0) ? _4582 : (isnan(_4582) ? 1.0 : min(_4582, 1.0));
                        float _3259 = dot(vec3(_905, _908, _911), vec3(_3251 * _3245, _3251 * _3246, _3251 * _3247));
                        float _4593 = isnan(0.0) ? _3259 : (isnan(_3259) ? 0.0 : max(_3259, 0.0));
                        float _3262 = isnan(1.0) ? _4593 : (isnan(_4593) ? 1.0 : min(_4593, 1.0));
                        float _3266 = ((_3262 * _3262) * (_3244 + (-1.0))) + 1.0;
                        float _3267 = _3202 * _3243;
                        float _3268 = _3267 * _3267;
                        float _3271 = ((1.0 - _3268) * _3192) + _3268;
                        float _4604 = isnan(0.0) ? _3271 : (isnan(_3271) ? 0.0 : max(_3271, 0.0));
                        float _3272 = isnan(1.0) ? _4604 : (isnan(_4604) ? 1.0 : min(_4604, 1.0));
                        float _3273 = 1.0 - _3243;
                        float _3283 = (0.5 / (((_3272 * ((_3258 * _3273) + _3243)) + 9.9999999392252902907785028219223e-09) + (((_3272 * _3273) + _3243) * _3258))) * _3272;
                        float _4615 = isnan(0.0) ? _3283 : (isnan(_3283) ? 0.0 : max(_3283, 0.0));
                        float _3294 = (((_3244 * 3.1415927410125732421875) * (isnan(1.0) ? _4615 : (isnan(_4615) ? 1.0 : min(_4615, 1.0)))) / ((_3266 * _3266) * ((_3209 * 2.1991131305694580078125) + 3.141590118408203125))) * _3198;
                        _3046 = (_3213 * _3161.x) + _3119;
                        _3047 = (_3213 * _3161.y) + _3120;
                        _3048 = (_3213 * _3161.z) + _3121;
                        _3043 = (_3294 * _3178.x) + _3116;
                        _3044 = (_3294 * _3178.y) + _3117;
                        _3045 = (_3294 * _3178.z) + _3118;
                        if (_3123 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3116 = _3043;
                            _3117 = _3044;
                            _3118 = _3045;
                            _3119 = _3046;
                            _3120 = _3047;
                            _3121 = _3048;
                            _3122 = _3123;
                        }
                    }
                    frontier_phi_66_pred = _3043;
                    frontier_phi_66_pred_1 = _3048;
                    frontier_phi_66_pred_2 = _3047;
                    frontier_phi_66_pred_3 = _3046;
                    frontier_phi_66_pred_4 = _3045;
                    frontier_phi_66_pred_5 = _3044;
                }
                _2820 = frontier_phi_66_pred;
                _2830 = frontier_phi_66_pred_1;
                _2828 = frontier_phi_66_pred_2;
                _2826 = frontier_phi_66_pred_3;
                _2824 = frontier_phi_66_pred_4;
                _2822 = frontier_phi_66_pred_5;
                uint _2978 = _2977 + 1u;
                if (_2978 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2971 = _2820;
                    _2972 = _2822;
                    _2973 = _2824;
                    _2974 = _2826;
                    _2975 = _2828;
                    _2976 = _2830;
                    _2977 = _2978;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2819 = _2820;
            _2821 = _2822;
            _2823 = _2824;
            _2825 = _2826;
            _2827 = _2828;
            _2829 = _2830;
        }
        uvec4 _2833 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2834 = _2833.z;
        uint _2836 = (_2834 >> 8u) & 15u;
        float _2939;
        float _2941;
        float _2943;
        float _2945;
        float _2947;
        float _2949;
        if (((4294967295u << _2836) & _2718) == 0u)
        {
            _2939 = _2819;
            _2941 = _2821;
            _2943 = _2823;
            _2945 = _2825;
            _2947 = _2827;
            _2949 = _2829;
        }
        else
        {
            float _2964 = inversesqrt(dot(vec3(_2672, _2673, _2674), vec3(_2672, _2673, _2674)));
            float _2965 = _2964 * _2672;
            float _2966 = _2964 * _2673;
            float _2967 = _2964 * _2674;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2836 < ((_2834 >> 12u) & 15u))
            {
                float _2940;
                float _2942;
                float _2944;
                float _2946;
                float _2948;
                float _2950;
                float _3099 = _2819;
                float _3100 = _2821;
                float _3101 = _2823;
                float _3102 = _2825;
                float _3103 = _2827;
                float _3104 = _2829;
                uint _3105 = _2836;
                uint _3114;
                bool _3115;
                for (;;)
                {
                    _3114 = texelFetch(g_lightClassification, int((((_2712 << 5u) + (_2698 << 9u)) + (_3105 << 2u)) >> 2u)).x;
                    _3115 = _3114 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3115)
                    {
                        frontier_phi_77_pred = _3104;
                        frontier_phi_77_pred_1 = _3103;
                        frontier_phi_77_pred_2 = _3102;
                        frontier_phi_77_pred_3 = _3101;
                        frontier_phi_77_pred_4 = _3100;
                        frontier_phi_77_pred_5 = _3099;
                    }
                    else
                    {
                        float _3308;
                        float _3309;
                        float _3310;
                        float _3311;
                        float _3312;
                        float _3313;
                        float _3602;
                        float _3603;
                        float _3604;
                        float _3605;
                        float _3606;
                        float _3607;
                        float _3321 = _3099;
                        float _3322 = _3100;
                        float _3323 = _3101;
                        float _3324 = _3102;
                        float _3325 = _3103;
                        float _3326 = _3104;
                        uint _3327 = _3114;
                        uint _3328;
                        vec4 _3353;
                        float _3354;
                        vec4 _3369;
                        vec3 _3381;
                        vec4 _3396;
                        vec4 _3411;
                        float _3458;
                        bool _3459;
                        for (;;)
                        {
                            uint _3338 = ((_3105 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3327));
                            _3328 = (_3327 + 4294967295u) & _3327;
                            uint _3340 = _3338 * 40u;
                            _3353 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3340)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3340 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3340 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3340 + 3u)).x));
                            _3354 = _3353.w;
                            uint _3356 = (_3338 * 40u) + 4u;
                            _3369 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3356)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3356 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3356 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3356 + 3u)).x));
                            uint _3371 = (_3338 * 40u) + 8u;
                            _3381 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3371)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3371 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3371 + 2u)).x));
                            uint _3383 = (_3338 * 40u) + 16u;
                            _3396 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3383)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3383 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3383 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3383 + 3u)).x));
                            uint _3398 = (_3338 * 40u) + 20u;
                            _3411 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3398)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3398 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3398 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3398 + 3u)).x));
                            uint _3414 = (_3338 * 40u) + 24u;
                            vec4 _3427 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3414)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3414 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3414 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3414 + 3u)).x));
                            uint _3433 = (_3338 * 40u) + 28u;
                            vec4 _3446 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3433)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3433 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3433 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3433 + 3u)).x));
                            _3458 = fma(_2674, _3446.z, fma(_2673, _3446.y, _3446.x * _2672)) + _3446.w;
                            _3459 = !((fma(_2674, _3427.z, fma(_2673, _3427.y, _3427.x * _2672)) + _3427.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3459)
                            {
                                float _3486 = _3353.x - _2672;
                                float _3487 = _3353.y - _2673;
                                float _3488 = _3353.z - _2674;
                                float _3489 = dot(vec3(_3486, _3487, _3488), vec3(_3486, _3487, _3488));
                                float _3492 = inversesqrt(_3489);
                                float _3493 = _3492 * _3486;
                                float _3494 = _3492 * _3487;
                                float _3495 = _3492 * _3488;
                                float _3499 = 1.0 - (_3489 / (_3354 * _3354));
                                float _4626 = isnan(0.0) ? _3499 : (isnan(_3499) ? 0.0 : max(_3499, 0.0));
                                float _3500 = isnan(1.0) ? _4626 : (isnan(_4626) ? 1.0 : min(_4626, 1.0));
                                float _3504 = sqrt(_3489) * _3369.w;
                                float _3506 = 1.39999997615814208984375 / (_3504 + 1.39999997615814208984375);
                                float _3507 = _3506 * _3506;
                                float _3510 = ((1.0 - _3507) * dot(vec3(_3493, _3494, _3495), vec3(_905, _908, _911))) + _3507;
                                float _3513 = _3504 * _3504;
                                float _3517 = (fma(_2674, _3396.z, fma(_2673, _3396.y, _3396.x * _2672)) + _3396.w) / _3458;
                                float _3518 = (fma(_2674, _3411.z, fma(_2673, _3411.y, _3411.x * _2672)) + _3411.w) / _3458;
                                float _3522 = 1.0 - dot(vec2(_3517, _3518), vec2(_3517, _3518));
                                float _4642 = isnan(0.0) ? _3522 : (isnan(_3522) ? 0.0 : max(_3522, 0.0));
                                float _3523 = isnan(1.0) ? _4642 : (isnan(_4642) ? 1.0 : min(_4642, 1.0));
                                float _3524 = _3523 * (((isnan(0.0) ? _3510 : (isnan(_3510) ? 0.0 : max(_3510, 0.0))) * _3500) / ((_3513 * 0.699999988079071044921875) + 1.0));
                                float _3536 = exp2(log2(1.0 / ((_3513 * 3.5) + 5.0)) * 0.25);
                                float _3537 = 1.0 - _980;
                                float _3544 = sqrt(1.0 - ((1.0 - (_3537 * _3537)) * (1.0 - (_3536 * _3536))));
                                float _3545 = _3544 * _3544;
                                float _3546 = _3545 * _3545;
                                float _3547 = _3493 - _2965;
                                float _3548 = _3494 - _2966;
                                float _3549 = _3495 - _2967;
                                float _3553 = inversesqrt(dot(vec3(_3547, _3548, _3549), vec3(_3547, _3548, _3549)));
                                float _3557 = dot(vec3(_905, _908, _911), vec3((-0.0) - _2965, (-0.0) - _2966, (-0.0) - _2967));
                                float _4653 = isnan(0.0) ? _3557 : (isnan(_3557) ? 0.0 : max(_3557, 0.0));
                                float _3560 = isnan(1.0) ? _4653 : (isnan(_4653) ? 1.0 : min(_4653, 1.0));
                                float _3561 = dot(vec3(_905, _908, _911), vec3(_3553 * _3547, _3553 * _3548, _3553 * _3549));
                                float _4664 = isnan(0.0) ? _3561 : (isnan(_3561) ? 0.0 : max(_3561, 0.0));
                                float _3564 = isnan(1.0) ? _4664 : (isnan(_4664) ? 1.0 : min(_4664, 1.0));
                                float _3568 = ((_3564 * _3564) * (_3546 + (-1.0))) + 1.0;
                                float _3569 = _3506 * _3545;
                                float _3570 = _3569 * _3569;
                                float _3576 = ((1.0 - _3570) * dot(vec3(_905, _908, _911), vec3(_3493, _3494, _3495))) + _3570;
                                float _4675 = isnan(0.0) ? _3576 : (isnan(_3576) ? 0.0 : max(_3576, 0.0));
                                float _3577 = isnan(1.0) ? _4675 : (isnan(_4675) ? 1.0 : min(_4675, 1.0));
                                float _3578 = 1.0 - _3545;
                                float _3588 = (0.5 / (((_3577 * ((_3560 * _3578) + _3545)) + 9.9999999392252902907785028219223e-09) + (((_3577 * _3578) + _3545) * _3560))) * _3577;
                                float _4686 = isnan(0.0) ? _3588 : (isnan(_3588) ? 0.0 : max(_3588, 0.0));
                                float _3598 = (_3523 * _3500) * (((_3546 * 3.1415927410125732421875) * (isnan(1.0) ? _4686 : (isnan(_4686) ? 1.0 : min(_4686, 1.0)))) / ((_3568 * _3568) * ((_3513 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3524 * _3369.y;
                                frontier_phi_83_pred_1 = _3524 * _3369.x;
                                frontier_phi_83_pred_2 = _3598 * _3381.z;
                                frontier_phi_83_pred_3 = _3598 * _3381.y;
                                frontier_phi_83_pred_4 = _3598 * _3381.x;
                                frontier_phi_83_pred_5 = _3524 * _3369.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3606 = frontier_phi_83_pred;
                            _3605 = frontier_phi_83_pred_1;
                            _3604 = frontier_phi_83_pred_2;
                            _3603 = frontier_phi_83_pred_3;
                            _3602 = frontier_phi_83_pred_4;
                            _3607 = frontier_phi_83_pred_5;
                            _3311 = _3605 + _3324;
                            _3312 = _3606 + _3325;
                            _3313 = _3607 + _3326;
                            _3308 = _3602 + _3321;
                            _3309 = _3603 + _3322;
                            _3310 = _3604 + _3323;
                            if (_3328 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3321 = _3308;
                                _3322 = _3309;
                                _3323 = _3310;
                                _3324 = _3311;
                                _3325 = _3312;
                                _3326 = _3313;
                                _3327 = _3328;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3313;
                        frontier_phi_77_pred_1 = _3312;
                        frontier_phi_77_pred_2 = _3311;
                        frontier_phi_77_pred_3 = _3310;
                        frontier_phi_77_pred_4 = _3309;
                        frontier_phi_77_pred_5 = _3308;
                    }
                    _2950 = frontier_phi_77_pred;
                    _2948 = frontier_phi_77_pred_1;
                    _2946 = frontier_phi_77_pred_2;
                    _2944 = frontier_phi_77_pred_3;
                    _2942 = frontier_phi_77_pred_4;
                    _2940 = frontier_phi_77_pred_5;
                    uint _3106 = _3105 + 1u;
                    if (_3106 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3099 = _2940;
                        _3100 = _2942;
                        _3101 = _2944;
                        _3102 = _2946;
                        _3103 = _2948;
                        _3104 = _2950;
                        _3105 = _3106;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2944;
                frontier_phi_58_59_ladder_1 = _2950;
                frontier_phi_58_59_ladder_2 = _2948;
                frontier_phi_58_59_ladder_3 = _2946;
                frontier_phi_58_59_ladder_4 = _2942;
                frontier_phi_58_59_ladder_5 = _2940;
            }
            else
            {
                frontier_phi_58_59_ladder = _2823;
                frontier_phi_58_59_ladder_1 = _2829;
                frontier_phi_58_59_ladder_2 = _2827;
                frontier_phi_58_59_ladder_3 = _2825;
                frontier_phi_58_59_ladder_4 = _2821;
                frontier_phi_58_59_ladder_5 = _2819;
            }
            _2939 = frontier_phi_58_59_ladder_5;
            _2941 = frontier_phi_58_59_ladder_4;
            _2943 = frontier_phi_58_59_ladder;
            _2945 = frontier_phi_58_59_ladder_3;
            _2947 = frontier_phi_58_59_ladder_2;
            _2949 = frontier_phi_58_59_ladder_1;
        }
        float _2954 = isnan(1.0) ? _964 : (isnan(_964) ? 1.0 : min(_964, 1.0));
        _2731 = (_2954 * _2945) + _2167;
        _2733 = (_2954 * _2947) + _2169;
        _2735 = (_2954 * _2949) + _2171;
        _2737 = ((_2939 * _949) * _2954) + _2512;
        _2739 = ((_2941 * _951) * _2954) + _2514;
        _2741 = ((_2943 * _952) * _2954) + _2516;
    }
    else
    {
        _2731 = _2167;
        _2733 = _2169;
        _2735 = _2171;
        _2737 = _2512;
        _2739 = _2514;
        _2741 = _2516;
    }
    float _4702 = isnan(0.0) ? _939 : (isnan(_939) ? 0.0 : max(_939, 0.0));
    float _4713 = isnan(0.0) ? _940 : (isnan(_940) ? 0.0 : max(_940, 0.0));
    float _4724 = isnan(0.0) ? _941 : (isnan(_941) ? 0.0 : max(_941, 0.0));
    float _2758 = ((isnan(1.0) ? _4702 : (isnan(_4702) ? 1.0 : min(_4702, 1.0))) * (_2731 + ((isnan(0.0) ? _1726 : (isnan(_1726) ? 0.0 : max(_1726, 0.0))) * _964))) + ((_2737 + ((isnan(0.0) ? _2020 : (isnan(_2020) ? 0.0 : max(_2020, 0.0))) * _1805)) * cbPerFrame._m0[3u].x);
    float _2759 = ((isnan(1.0) ? _4713 : (isnan(_4713) ? 1.0 : min(_4713, 1.0))) * (_2733 + ((isnan(0.0) ? _1729 : (isnan(_1729) ? 0.0 : max(_1729, 0.0))) * _964))) + ((_2739 + ((isnan(0.0) ? _2023 : (isnan(_2023) ? 0.0 : max(_2023, 0.0))) * _1805)) * cbPerFrame._m0[3u].x);
    float _2760 = ((isnan(1.0) ? _4724 : (isnan(_4724) ? 1.0 : min(_4724, 1.0))) * (_2735 + ((isnan(0.0) ? _1732 : (isnan(_1732) ? 0.0 : max(_1732, 0.0))) * _964))) + ((_2741 + ((isnan(0.0) ? _2026 : (isnan(_2026) ? 0.0 : max(_2026, 0.0))) * _1805)) * cbPerFrame._m0[3u].x);
    uint _2761 = _924 + 6u;
    float _2769 = _886 / cbSceneParam._m0[86u].x;
    float _2770 = _887 / cbSceneParam._m0[86u].y;
    vec4 _2784 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2769, _2770, (log2((isnan(cbSceneParam._m0[77u].w) ? _809 : (isnan(_809) ? cbSceneParam._m0[77u].w : min(_809, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2786 = _2784.x;
    float _2787 = _2784.y;
    float _2788 = _2784.z;
    float _2789 = _2784.w;
    float _2881;
    float _2883;
    float _2885;
    float _2887;
    if (_809 > cbSceneParam._m0[78u].w)
    {
        float _2844 = isnan(_809) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _809 : min(cbSceneParam._m0[80u].w, _809));
        float _2845 = _2844 / _809;
        float _2856 = _2845 * _859;
        float _2857 = _860 * _2845;
        float _2858 = (-0.0) - _2857;
        float _2859 = _2845 * _861;
        float _2861 = (cbSceneParam._m0[77u].w * _2858) / _2844;
        float _2862 = _2861 + cbSceneParam._m0[79u].w;
        float _2863 = cbSceneParam._m0[79u].w - _2857;
        float _2869 = sqrt(((_2856 * _2856) + (_2857 * _2857)) + (_2859 * _2859));
        float _2872 = (1.0 - (cbSceneParam._m0[77u].w / _2844)) * _2869;
        float _2877 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2879 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3056;
        if (abs((_2858 - _2861) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3056 = ((((_2862 > 0.0) ? exp2(_2877 * _2862) : (2.0 - exp2(_2879 * _2862))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2872;
        }
        else
        {
            float _3000 = 1.0 / cbSceneParam._m0[80u].x;
            float _3001 = isnan(_2863) ? _2862 : (isnan(_2862) ? _2863 : max(_2862, _2863));
            float _3002 = isnan(_2863) ? _2862 : (isnan(_2862) ? _2863 : min(_2862, _2863));
            float _3011 = isnan(0.0) ? _3001 : (isnan(_3001) ? 0.0 : min(_3001, 0.0));
            float _3012 = isnan(0.0) ? _3002 : (isnan(_3002) ? 0.0 : min(_3002, 0.0));
            _3056 = ((abs(_2869 / _2858) * cbSceneParam._m0[80u].y) * ((((_3011 - _3012) * 2.0) - ((exp2(_2877 * (isnan(0.0) ? _3001 : (isnan(_3001) ? 0.0 : max(_3001, 0.0)))) - exp2(_2877 * (isnan(0.0) ? _3002 : (isnan(_3002) ? 0.0 : max(_3002, 0.0))))) * _3000)) - ((exp2(_2879 * _3011) - exp2(_2879 * _3012)) * _3000))) + (_2872 * cbSceneParam._m0[80u].z);
        }
        vec4 _3058 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2769, _2770, 1.0), 0.0);
        float _3067 = exp2((_3056 * (-1.44269502162933349609375)) * (1.0 - _3058.w));
        float _3068 = log2(_3067);
        float _3084 = log2(_2789);
        _2881 = (exp2(_3084 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3068 * cbSceneParam._m0[78u].x)) * _3058.x) / cbSceneParam._m0[78u].x)) + _2786;
        _2883 = (exp2(_3084 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3068 * cbSceneParam._m0[78u].y)) * _3058.y) / cbSceneParam._m0[78u].y)) + _2787;
        _2885 = (exp2(_3084 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3068 * cbSceneParam._m0[78u].z)) * _3058.z) / cbSceneParam._m0[78u].z)) + _2788;
        _2887 = _3067 * _2789;
    }
    else
    {
        _2881 = _2786;
        _2883 = _2787;
        _2885 = _2788;
        _2887 = _2789;
    }
    bool _3094;
    vec4 _2897;
    vec4 _2919;
    float _2921;
    float _2925;
    float _2926;
    float _2927;
    float _2928;
    bool _2938;
    for (;;)
    {
        _2897 = cbMatDynParam._m0[0u];
        float _2899 = roundEven(_2897.y);
        bool _2900 = _2899 == 3.0;
        float _2901 = log2(_2887);
        float _2908 = exp2(_2901 * cbSceneParam._m0[78u].x) * _2758;
        float _2909 = exp2(_2901 * cbSceneParam._m0[78u].y) * _2759;
        float _2910 = exp2(_2901 * cbSceneParam._m0[78u].z) * _2760;
        float _2917 = _875 + (-0.5);
        _2919 = cbMtdParam._m0[1u];
        _2921 = _2919.y * _2917;
        float _2924 = (_2899 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2925 = _2924 * (_2900 ? _2908 : (_2908 + (cbSceneParam._m0[72u].w * _2881)));
        _2926 = _2924 * (_2900 ? _2909 : (_2909 + (cbSceneParam._m0[72u].w * _2883)));
        _2927 = _2924 * (_2900 ? _2910 : (_2910 + (cbSceneParam._m0[72u].w * _2885)));
        _2928 = _2917 * 0.999000012874603271484375;
        _2938 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2938)
        {
            if ((cbInstanceData._m0[_924 + 7u].x + _2928) < 0.5)
            {
                _3094 = true;
                break;
            }
        }
        uint _3035 = _925 + uint(_2897.w);
        if ((cbInstanceData._m0[_3035].w < 1.0) && ((cbInstanceData._m0[_3035].w + _2928) < 0.5))
        {
            _3094 = true;
            break;
        }
        if ((_2921 + 1.0) < _2919.x)
        {
            _3094 = true;
            break;
        }
        _3094 = false;
        break;
    }
    float _3299;
    if (_3094)
    {
        discard_state = true;
        _3299 = 0.0;
    }
    else
    {
        _3299 = cbInstanceData._m0[_2761].w;
    }
    SV_Target.x = _2925;
    SV_Target.y = _2926;
    SV_Target.z = _2927;
    SV_Target.w = _3299;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2761].w;
    discard_exit();
}


