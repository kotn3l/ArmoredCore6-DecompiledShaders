#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[18];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_1;
layout(set = 0, binding = 1) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_7;
layout(set = 0, binding = 10) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_6;
layout(set = 0, binding = 2) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_0;
layout(set = 0, binding = 3) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_10;
layout(set = 0, binding = 4) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_11;
layout(set = 0, binding = 5) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_12;
layout(set = 0, binding = 6) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_2;
layout(set = 0, binding = 7) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_3;
layout(set = 0, binding = 9) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_5;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1295;
float _3728;
float _3729;
float _3730;
float _3731;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _211 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _212 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _213 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _219 = inversesqrt(dot(vec3(_211, _212, _213), vec3(_211, _212, _213)));
    float _226 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _227 = _226 * NORMAL.x;
    float _228 = _226 * NORMAL.y;
    float _229 = _226 * NORMAL.z;
    float _233 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _241;
    float _242;
    float _243;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _241 = (-0.0) - _227;
        _242 = (-0.0) - _228;
        _243 = (-0.0) - _229;
    }
    else
    {
        _241 = _227;
        _242 = _228;
        _243 = _229;
    }
    vec4 _256 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _261 = _256.z;
    float _268 = exp2(log2(_261 * 22.0) * 260.0);
    float _269 = isnan(0.0) ? _268 : (isnan(_268) ? 0.0 : max(_268, 0.0));
    float _270 = isnan(1.0) ? _269 : (isnan(_269) ? 1.0 : min(_269, 1.0));
    vec4 _284 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _295 = cbMtdParam._m0[10u].x * _284.x;
    float _296 = cbMtdParam._m0[10u].y * _284.y;
    float _297 = cbMtdParam._m0[10u].z * _284.z;
    vec4 _309 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _325 = exp2(log2(1.0 - _256.w) * 8.0);
    vec4 _337 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_10, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    vec4 _362 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _384 = (((((_309.x * 4.55000019073486328125) * cbMtdParam._m0[9u].x) * _362.x) - _295) * _270) + _295;
    float _385 = (((((_309.y * 4.55000019073486328125) * cbMtdParam._m0[9u].y) * _362.y) - _296) * _270) + _296;
    float _386 = (((((_309.z * 4.55000019073486328125) * cbMtdParam._m0[9u].z) * _362.z) - _297) * _270) + _297;
    float _393 = (((cbMtdParam._m0[13u].x * _337.x) - _384) * _325) + _384;
    float _394 = (((cbMtdParam._m0[13u].y * _337.y) - _385) * _325) + _385;
    float _395 = (((cbMtdParam._m0[13u].z * _337.z) - _386) * _325) + _386;
    float _396 = _362.w * _309.w;
    float _426 = (((texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w)).x - cbMtdParam._m0[17u].x) + cbMtdParam._m0[16u].x) * _270) + cbMtdParam._m0[17u].x;
    float _429 = ((cbMtdParam._m0[15u].z - _426) * _325) + _426;
    vec4 _441 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w));
    float _443 = _441.x;
    float _444 = _441.y;
    float _450 = cbMtdParam._m0[14u].y + _441.z;
    vec4 _462 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w));
    vec4 _481 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _492 = ((((_261 * 2.0) * (cbMtdParam._m0[14u].x + _462.z)) - _450) * _270) + _450;
    float _496 = (((_481.z - _492) + cbMtdParam._m0[15u].y) * _325) + _492;
    float _511 = abs((fract(cbMtdParam._m0[15u].x * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _3750 = isnan(0.0) ? _511 : (isnan(_511) ? 0.0 : max(_511, 0.0));
    float _512 = isnan(1.0) ? _3750 : (isnan(_3750) ? 1.0 : min(_3750, 1.0));
    float _517 = (_512 * _512) * (3.0 - (_512 * 2.0));
    vec4 _530 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _538 = (_256.x * 2.0) + (-1.0);
    float _539 = (_256.y * 2.0) + (-1.0);
    float _540 = dot(vec2(_538, _539), vec2(_538, _539));
    float _3761 = isnan(0.0) ? _540 : (isnan(_540) ? 0.0 : max(_540, 0.0));
    float _545 = sqrt(1.0 - (isnan(1.0) ? _3761 : (isnan(_3761) ? 1.0 : min(_3761, 1.0))));
    float _550 = ((_462.x - _443) * _270) + _443;
    float _551 = ((_462.y - _444) * _270) + _444;
    float _564 = (cbMtdParam._m0[14u].z * (((((_481.x - _550) * _325) + _550) * 2.0) + (-1.0))) + _538;
    float _565 = (cbMtdParam._m0[14u].z * (((((_481.y - _551) * _325) + _551) * 2.0) + (-1.0))) + _539;
    float _568 = fma(_545, _241, fma(_565, _233 * TANGENT.x, (_219 * _211) * _564));
    float _571 = fma(_545, _242, fma(_565, _233 * TANGENT.y, (_219 * _212) * _564));
    float _574 = fma(_545, _243, fma(_565, _233 * TANGENT.z, (_219 * _213) * _564));
    float _578 = inversesqrt(dot(vec3(_568, _571, _574), vec3(_568, _571, _574)));
    float _579 = _578 * _568;
    float _580 = _578 * _571;
    float _581 = _578 * _574;
    float _3772 = isnan(0.0) ? _396 : (isnan(_396) ? 0.0 : max(_396, 0.0));
    float _582 = isnan(1.0) ? _3772 : (isnan(_3772) ? 1.0 : min(_3772, 1.0));
    float _3783 = isnan(0.0) ? _496 : (isnan(_496) ? 0.0 : max(_496, 0.0));
    float _583 = isnan(1.0) ? _3783 : (isnan(_3783) ? 1.0 : min(_3783, 1.0));
    float _3794 = isnan(0.0) ? _393 : (isnan(_393) ? 0.0 : max(_393, 0.0));
    float _584 = isnan(1.0) ? _3794 : (isnan(_3794) ? 1.0 : min(_3794, 1.0));
    float _3805 = isnan(0.0) ? _394 : (isnan(_394) ? 0.0 : max(_394, 0.0));
    float _585 = isnan(1.0) ? _3805 : (isnan(_3805) ? 1.0 : min(_3805, 1.0));
    float _3816 = isnan(0.0) ? _395 : (isnan(_395) ? 0.0 : max(_395, 0.0));
    float _586 = isnan(1.0) ? _3816 : (isnan(_3816) ? 1.0 : min(_3816, 1.0));
    float _3827 = isnan(0.0) ? _429 : (isnan(_429) ? 0.0 : max(_429, 0.0));
    float _587 = isnan(1.0) ? _3827 : (isnan(_3827) ? 1.0 : min(_3827, 1.0));
    float _603 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _645 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _655 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _645);
    float _656 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _645);
    float _657 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _645);
    float _661 = inversesqrt(dot(vec3(_655, _656, _657), vec3(_655, _656, _657)));
    float _662 = _655 * _661;
    float _663 = _656 * _661;
    float _664 = _657 * _661;
    vec4 _669 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _671 = _669.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _974 = sqrt(((_655 * _655) + (_656 * _656)) + (_657 * _657));
        float _980 = (cbMatDynParam._m0[5u].x * _974) + cbMatDynParam._m0[5u].y;
        float _3838 = isnan(0.0) ? _980 : (isnan(_980) ? 0.0 : max(_980, 0.0));
        float _981 = isnan(1.0) ? _3838 : (isnan(_3838) ? 1.0 : min(_3838, 1.0));
        float _985 = (cbMatDynParam._m0[5u].z * _974) + cbMatDynParam._m0[5u].w;
        float _3849 = isnan(0.0) ? _985 : (isnan(_985) ? 0.0 : max(_985, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3849 : (isnan(_3849) ? 1.0 : min(_3849, 1.0))) - _981)) + _981) < ((_671 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _682 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _683 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _685 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _687 = _685.w;
    float _705 = fma(_581, cbSceneParam._m0[5u].z, fma(_580, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _579));
    float _708 = fma(_581, cbSceneParam._m0[6u].z, fma(_580, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _579));
    float _711 = fma(_581, cbSceneParam._m0[7u].z, fma(_580, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _579));
    vec4 _713 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _715 = _713.x;
    float _727 = (((_713.y - _583) + (_713.w * _583)) * cbMtdParam._m0[3u].x) + _583;
    vec4 _728 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _744 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3(cbMtdParam._m0[3u].x * (_715 * _715)), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * _728.z;
    float _752 = (((cbMatDynParam._m0[15u].x - _587) * cbMatDynParam._m0[15u].w) * _744) + _587;
    float _760 = ((_744 * cbMatDynParam._m0[16u].z) * (cbMatDynParam._m0[16u].x - _727)) + _727;
    uint _784 = uint(roundEven(NORMAL.w)) * 13u;
    uint _785 = _784 + 9u;
    uint _786 = _785 + uint(cbMatDynParam._m0[0u].w);
    float _792 = (cbMtdParam._m0[0u].x * _584) * cbInstanceData._m0[_786].x;
    float _793 = (cbMtdParam._m0[0u].y * _585) * cbInstanceData._m0[_786].y;
    float _794 = (cbMtdParam._m0[0u].z * _586) * cbInstanceData._m0[_786].z;
    float _3860 = isnan(0.0) ? _792 : (isnan(_792) ? 0.0 : max(_792, 0.0));
    float _795 = isnan(1.0) ? _3860 : (isnan(_3860) ? 1.0 : min(_3860, 1.0));
    float _3871 = isnan(0.0) ? _793 : (isnan(_793) ? 0.0 : max(_793, 0.0));
    float _796 = isnan(1.0) ? _3871 : (isnan(_3871) ? 1.0 : min(_3871, 1.0));
    float _3882 = isnan(0.0) ? _794 : (isnan(_794) ? 0.0 : max(_794, 0.0));
    float _797 = isnan(1.0) ? _3882 : (isnan(_3882) ? 1.0 : min(_3882, 1.0));
    vec4 _798 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _803 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _814 = (((_803.x - _752) + (_803.w * _752)) * cbMtdParam._m0[3u].x) + _752;
    float _827 = (cbMtdParam._m0[3u].x * (((_795 * _687) - _795) + _798.x)) + _795;
    float _828 = (cbMtdParam._m0[3u].x * (((_796 * _687) - _796) + _798.y)) + _796;
    float _829 = (cbMtdParam._m0[3u].x * (((_797 * _687) - _797) + _798.z)) + _797;
    vec4 _830 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _843 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3((_752 * (_584 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625, (_752 * (_585 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625, (_752 * (_586 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * _830.z;
    float _847 = _843 * cbMatDynParam._m0[13u].w;
    float _857 = (_847 * (cbMatDynParam._m0[13u].x - _827)) + _827;
    float _858 = (_847 * (cbMatDynParam._m0[13u].y - _828)) + _828;
    float _859 = (_847 * (cbMatDynParam._m0[13u].z - _829)) + _829;
    float _867 = ((_843 * cbMatDynParam._m0[15u].w) * (cbMatDynParam._m0[15u].x - _814)) + _814;
    float _868 = 1.0 - _867;
    float _869 = _868 * _857;
    float _870 = _868 * _858;
    float _871 = _868 * _859;
    float _875 = (_857 + (-0.039999999105930328369140625)) * _867;
    float _876 = (_858 + (-0.039999999105930328369140625)) * _867;
    float _877 = (_859 + (-0.039999999105930328369140625)) * _867;
    float _878 = _875 + 0.039999999105930328369140625;
    float _879 = _876 + 0.039999999105930328369140625;
    float _880 = _877 + 0.039999999105930328369140625;
    vec4 _889 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _682, cbSceneParam._m0[86u].y * _683));
    float _892 = _889.x * TEXCOORD_4;
    float _893 = dot(vec3(_579, _580, _581), vec3(_662, _663, _664));
    float _896 = _893 * 2.0;
    float _900 = (_896 * _579) - _662;
    float _901 = (_896 * _580) - _663;
    float _902 = (_896 * _581) - _664;
    float _906 = abs(dot(vec3(_662, _663, _664), vec3(_579, _580, _581)));
    float _3893 = isnan(0.0) ? _906 : (isnan(_906) ? 0.0 : max(_906, 0.0));
    float _908 = sqrt(_760);
    float _920 = exp2((_908 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3893 : (isnan(_3893) ? 1.0 : min(_3893, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_908 * 3.0));
    float _926 = (1.0 - _920) * ((_908 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _927 = _920 * _908;
    float _955 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _959 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _963 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1294;
    float _1296;
    float _1297;
    float _1298;
    float _1299;
    float _1300;
    float _1301;
    float _1302;
    float _1303;
    float _1304;
    float _1305;
    float _1306;
    float _1307;
    float _1308;
    float _1309;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1019 = fma(_963, cbModelParam._m0[26u].z, fma(_959, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _955));
        float _1023 = fma(_963, cbModelParam._m0[27u].z, fma(_959, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _955));
        float _1027 = fma(_963, cbModelParam._m0[28u].z, fma(_959, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _955));
        float _1052 = _955 + _579;
        float _1053 = _959 + _580;
        float _1054 = _963 + _581;
        float _1064 = fma(_1054, cbModelParam._m0[26u].z, fma(_1053, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1052)) - _1019;
        float _1065 = fma(_1054, cbModelParam._m0[27u].z, fma(_1053, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1052)) - _1023;
        float _1066 = fma(_1054, cbModelParam._m0[28u].z, fma(_1053, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1052)) - _1027;
        float _1070 = inversesqrt(dot(vec3(_1064, _1065, _1066), vec3(_1064, _1065, _1066)));
        float _1083 = ((_1070 * _1064) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1019 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1084 = ((_1070 * _1065) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1023 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1085 = ((_1070 * _1066) / cbModelParam._m0[34u].z) + ((((((_1027 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1088 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1083, _1084, _1085), 0.0);
        vec4 _1095 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1083, _1084, _1085), 0.0);
        vec4 _1102 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1083, _1084, _1085), 0.0);
        vec4 _1109 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1083, _1084, _1085), 0.0);
        float _1122 = exp2((_1088.w + (-0.5)) * 20.0) * 2.0;
        float _1123 = _1122 * (_1088.x + (-0.5));
        float _1124 = _1122 * (_1088.y + (-0.5));
        float _1125 = _1122 * (_1088.z + (-0.5));
        float _1132 = exp2((_1095.w + (-0.5)) * 20.0) * 2.0;
        float _1133 = _1132 * (_1095.x + (-0.5));
        float _1134 = _1132 * (_1095.y + (-0.5));
        float _1135 = _1132 * (_1095.z + (-0.5));
        float _1142 = exp2((_1102.w + (-0.5)) * 20.0) * 2.0;
        float _1143 = _1142 * (_1102.x + (-0.5));
        float _1144 = _1142 * (_1102.y + (-0.5));
        float _1145 = _1142 * (_1102.z + (-0.5));
        float _1152 = exp2((_1109.w + (-0.5)) * 20.0) * 2.0;
        float _1153 = _1152 * (_1109.x + (-0.5));
        float _1154 = _1152 * (_1109.y + (-0.5));
        float _1155 = _1152 * (_1109.z + (-0.5));
        float _1156 = isnan(0.0) ? _1153 : (isnan(_1153) ? 0.0 : max(_1153, 0.0));
        float _1157 = isnan(0.0) ? _1154 : (isnan(_1154) ? 0.0 : max(_1154, 0.0));
        float _1158 = isnan(0.0) ? _1155 : (isnan(_1155) ? 0.0 : max(_1155, 0.0));
        float _1159 = _1123 * 0.5;
        float _1160 = _1133 * 0.5;
        float _1161 = _1143 * 0.5;
        float _1162 = dot(vec3(_1159, _1160, _1161), vec3(_1159, _1160, _1161));
        float _1167 = (_1162 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1162);
        float _1176 = (dot(vec3(_579, _580, _581), vec3(_1167 * _1159, _1167 * _1160, _1167 * _1161)) + 1.0) * 0.5;
        float _3919 = isnan(0.0) ? _1176 : (isnan(_1176) ? 0.0 : max(_1176, 0.0));
        float _1186 = sqrt(((_1160 * _1160) + (_1159 * _1159)) + (_1161 * _1161)) / (_1156 + 9.9999997473787516355514526367188e-06);
        float _3930 = isnan(0.0) ? _1186 : (isnan(_1186) ? 0.0 : max(_1186, 0.0));
        float _1187 = isnan(1.0) ? _3930 : (isnan(_3930) ? 1.0 : min(_3930, 1.0));
        float _1188 = _1187 * 2.0;
        float _1192 = (1.0 - _1187) / (_1187 + 1.0);
        float _3941 = isnan(0.0) ? _1192 : (isnan(_1192) ? 0.0 : max(_1192, 0.0));
        float _1193 = isnan(1.0) ? _3941 : (isnan(_3941) ? 1.0 : min(_3941, 1.0));
        float _1202 = ((((1.0 - _1193) * (_1188 + 2.0)) * exp2(log2(isnan(1.0) ? _3919 : (isnan(_3919) ? 1.0 : min(_3919, 1.0))) * (_1188 + 1.0))) + _1193) * _1156;
        float _1203 = _1124 * 0.5;
        float _1204 = _1134 * 0.5;
        float _1205 = _1144 * 0.5;
        float _1206 = dot(vec3(_1203, _1204, _1205), vec3(_1203, _1204, _1205));
        float _1211 = (_1206 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1206);
        float _1219 = (dot(vec3(_579, _580, _581), vec3(_1211 * _1203, _1211 * _1204, _1211 * _1205)) + 1.0) * 0.5;
        float _3952 = isnan(0.0) ? _1219 : (isnan(_1219) ? 0.0 : max(_1219, 0.0));
        float _1228 = sqrt(((_1204 * _1204) + (_1203 * _1203)) + (_1205 * _1205)) / (_1157 + 9.9999997473787516355514526367188e-06);
        float _3963 = isnan(0.0) ? _1228 : (isnan(_1228) ? 0.0 : max(_1228, 0.0));
        float _1229 = isnan(1.0) ? _3963 : (isnan(_3963) ? 1.0 : min(_3963, 1.0));
        float _1230 = _1229 * 2.0;
        float _1234 = (1.0 - _1229) / (_1229 + 1.0);
        float _3974 = isnan(0.0) ? _1234 : (isnan(_1234) ? 0.0 : max(_1234, 0.0));
        float _1235 = isnan(1.0) ? _3974 : (isnan(_3974) ? 1.0 : min(_3974, 1.0));
        float _1244 = ((((1.0 - _1235) * (_1230 + 2.0)) * exp2(log2(isnan(1.0) ? _3952 : (isnan(_3952) ? 1.0 : min(_3952, 1.0))) * (_1230 + 1.0))) + _1235) * _1157;
        float _1245 = _1125 * 0.5;
        float _1246 = _1135 * 0.5;
        float _1247 = _1145 * 0.5;
        float _1248 = dot(vec3(_1245, _1246, _1247), vec3(_1245, _1246, _1247));
        float _1253 = (_1248 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1248);
        float _1261 = (dot(vec3(_579, _580, _581), vec3(_1253 * _1245, _1253 * _1246, _1253 * _1247)) + 1.0) * 0.5;
        float _3985 = isnan(0.0) ? _1261 : (isnan(_1261) ? 0.0 : max(_1261, 0.0));
        float _1270 = sqrt(((_1246 * _1246) + (_1245 * _1245)) + (_1247 * _1247)) / (_1158 + 9.9999997473787516355514526367188e-06);
        float _3996 = isnan(0.0) ? _1270 : (isnan(_1270) ? 0.0 : max(_1270, 0.0));
        float _1271 = isnan(1.0) ? _3996 : (isnan(_3996) ? 1.0 : min(_3996, 1.0));
        float _1272 = _1271 * 2.0;
        float _1276 = (1.0 - _1271) / (_1271 + 1.0);
        float _4007 = isnan(0.0) ? _1276 : (isnan(_1276) ? 0.0 : max(_1276, 0.0));
        float _1277 = isnan(1.0) ? _4007 : (isnan(_4007) ? 1.0 : min(_4007, 1.0));
        float _1286 = ((((1.0 - _1277) * (_1272 + 2.0)) * exp2(log2(isnan(1.0) ? _3985 : (isnan(_3985) ? 1.0 : min(_3985, 1.0))) * (_1272 + 1.0))) + _1277) * _1158;
        _1294 = _1125;
        _1296 = _1124;
        _1297 = _1123;
        _1298 = _1135;
        _1299 = _1134;
        _1300 = _1133;
        _1301 = _1145;
        _1302 = _1144;
        _1303 = _1143;
        _1304 = _1158;
        _1305 = _1157;
        _1306 = _1156;
        _1307 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1202 : (isnan(_1202) ? 0.0 : max(_1202, 0.0)));
        _1308 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1244 : (isnan(_1244) ? 0.0 : max(_1244, 0.0)));
        _1309 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1286 : (isnan(_1286) ? 0.0 : max(_1286, 0.0)));
    }
    else
    {
        _1294 = _1295;
        _1296 = _1295;
        _1297 = _1295;
        _1298 = _1295;
        _1299 = _1295;
        _1300 = _1295;
        _1301 = _1295;
        _1302 = _1295;
        _1303 = _1295;
        _1304 = _1295;
        _1305 = _1295;
        _1306 = _1295;
        _1307 = 0.0;
        _1308 = 0.0;
        _1309 = 0.0;
    }
    float _1607;
    float _1608;
    float _1609;
    float _1610;
    float _1611;
    float _1612;
    float _1613;
    float _1614;
    float _1615;
    float _1616;
    float _1617;
    float _1618;
    float _1619;
    float _1620;
    float _1621;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1338 = fma(_963, cbModelParam._m0[30u].z, fma(_959, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _955));
        float _1342 = fma(_963, cbModelParam._m0[31u].z, fma(_959, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _955));
        float _1346 = fma(_963, cbModelParam._m0[32u].z, fma(_959, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _955));
        float _1369 = _955 + _579;
        float _1370 = _959 + _580;
        float _1371 = _963 + _581;
        float _1381 = fma(_1371, cbModelParam._m0[30u].z, fma(_1370, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1369)) - _1338;
        float _1382 = fma(_1371, cbModelParam._m0[31u].z, fma(_1370, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1369)) - _1342;
        float _1383 = fma(_1371, cbModelParam._m0[32u].z, fma(_1370, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1369)) - _1346;
        float _1387 = inversesqrt(dot(vec3(_1381, _1382, _1383), vec3(_1381, _1382, _1383)));
        float _1400 = ((_1387 * _1381) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1338 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1401 = ((_1387 * _1382) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1342 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1402 = ((_1387 * _1383) / cbModelParam._m0[35u].z) + ((((((_1346 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1404 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1400, _1401, _1402), 0.0);
        vec4 _1411 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1400, _1401, _1402), 0.0);
        vec4 _1418 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1400, _1401, _1402), 0.0);
        vec4 _1425 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1400, _1401, _1402), 0.0);
        float _1437 = exp2((_1404.w + (-0.5)) * 20.0) * 2.0;
        float _1438 = _1437 * (_1404.x + (-0.5));
        float _1439 = _1437 * (_1404.y + (-0.5));
        float _1440 = _1437 * (_1404.z + (-0.5));
        float _1447 = exp2((_1411.w + (-0.5)) * 20.0) * 2.0;
        float _1448 = _1447 * (_1411.x + (-0.5));
        float _1449 = _1447 * (_1411.y + (-0.5));
        float _1450 = _1447 * (_1411.z + (-0.5));
        float _1457 = exp2((_1418.w + (-0.5)) * 20.0) * 2.0;
        float _1458 = _1457 * (_1418.x + (-0.5));
        float _1459 = _1457 * (_1418.y + (-0.5));
        float _1460 = _1457 * (_1418.z + (-0.5));
        float _1467 = exp2((_1425.w + (-0.5)) * 20.0) * 2.0;
        float _1468 = _1467 * (_1425.x + (-0.5));
        float _1469 = _1467 * (_1425.y + (-0.5));
        float _1470 = _1467 * (_1425.z + (-0.5));
        float _1471 = isnan(0.0) ? _1468 : (isnan(_1468) ? 0.0 : max(_1468, 0.0));
        float _1472 = isnan(0.0) ? _1469 : (isnan(_1469) ? 0.0 : max(_1469, 0.0));
        float _1473 = isnan(0.0) ? _1470 : (isnan(_1470) ? 0.0 : max(_1470, 0.0));
        float _1474 = _1438 * 0.5;
        float _1475 = _1448 * 0.5;
        float _1476 = _1458 * 0.5;
        float _1477 = dot(vec3(_1474, _1475, _1476), vec3(_1474, _1475, _1476));
        float _1482 = (_1477 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1477);
        float _1490 = (dot(vec3(_579, _580, _581), vec3(_1482 * _1474, _1482 * _1475, _1482 * _1476)) + 1.0) * 0.5;
        float _4048 = isnan(0.0) ? _1490 : (isnan(_1490) ? 0.0 : max(_1490, 0.0));
        float _1499 = sqrt(((_1475 * _1475) + (_1474 * _1474)) + (_1476 * _1476)) / (_1471 + 9.9999997473787516355514526367188e-06);
        float _4059 = isnan(0.0) ? _1499 : (isnan(_1499) ? 0.0 : max(_1499, 0.0));
        float _1500 = isnan(1.0) ? _4059 : (isnan(_4059) ? 1.0 : min(_4059, 1.0));
        float _1501 = _1500 * 2.0;
        float _1505 = (1.0 - _1500) / (_1500 + 1.0);
        float _4070 = isnan(0.0) ? _1505 : (isnan(_1505) ? 0.0 : max(_1505, 0.0));
        float _1506 = isnan(1.0) ? _4070 : (isnan(_4070) ? 1.0 : min(_4070, 1.0));
        float _1515 = ((((1.0 - _1506) * (_1501 + 2.0)) * exp2(log2(isnan(1.0) ? _4048 : (isnan(_4048) ? 1.0 : min(_4048, 1.0))) * (_1501 + 1.0))) + _1506) * _1471;
        float _1516 = _1439 * 0.5;
        float _1517 = _1449 * 0.5;
        float _1518 = _1459 * 0.5;
        float _1519 = dot(vec3(_1516, _1517, _1518), vec3(_1516, _1517, _1518));
        float _1524 = (_1519 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1519);
        float _1532 = (dot(vec3(_579, _580, _581), vec3(_1524 * _1516, _1524 * _1517, _1524 * _1518)) + 1.0) * 0.5;
        float _4081 = isnan(0.0) ? _1532 : (isnan(_1532) ? 0.0 : max(_1532, 0.0));
        float _1541 = sqrt(((_1517 * _1517) + (_1516 * _1516)) + (_1518 * _1518)) / (_1472 + 9.9999997473787516355514526367188e-06);
        float _4092 = isnan(0.0) ? _1541 : (isnan(_1541) ? 0.0 : max(_1541, 0.0));
        float _1542 = isnan(1.0) ? _4092 : (isnan(_4092) ? 1.0 : min(_4092, 1.0));
        float _1543 = _1542 * 2.0;
        float _1547 = (1.0 - _1542) / (_1542 + 1.0);
        float _4103 = isnan(0.0) ? _1547 : (isnan(_1547) ? 0.0 : max(_1547, 0.0));
        float _1548 = isnan(1.0) ? _4103 : (isnan(_4103) ? 1.0 : min(_4103, 1.0));
        float _1557 = ((((1.0 - _1548) * (_1543 + 2.0)) * exp2(log2(isnan(1.0) ? _4081 : (isnan(_4081) ? 1.0 : min(_4081, 1.0))) * (_1543 + 1.0))) + _1548) * _1472;
        float _1558 = _1440 * 0.5;
        float _1559 = _1450 * 0.5;
        float _1560 = _1460 * 0.5;
        float _1561 = dot(vec3(_1558, _1559, _1560), vec3(_1558, _1559, _1560));
        float _1566 = (_1561 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1561);
        float _1574 = (dot(vec3(_579, _580, _581), vec3(_1566 * _1558, _1566 * _1559, _1566 * _1560)) + 1.0) * 0.5;
        float _4114 = isnan(0.0) ? _1574 : (isnan(_1574) ? 0.0 : max(_1574, 0.0));
        float _1583 = sqrt(((_1559 * _1559) + (_1558 * _1558)) + (_1560 * _1560)) / (_1473 + 9.9999997473787516355514526367188e-06);
        float _4125 = isnan(0.0) ? _1583 : (isnan(_1583) ? 0.0 : max(_1583, 0.0));
        float _1584 = isnan(1.0) ? _4125 : (isnan(_4125) ? 1.0 : min(_4125, 1.0));
        float _1585 = _1584 * 2.0;
        float _1589 = (1.0 - _1584) / (_1584 + 1.0);
        float _4136 = isnan(0.0) ? _1589 : (isnan(_1589) ? 0.0 : max(_1589, 0.0));
        float _1590 = isnan(1.0) ? _4136 : (isnan(_4136) ? 1.0 : min(_4136, 1.0));
        float _1599 = ((((1.0 - _1590) * (_1585 + 2.0)) * exp2(log2(isnan(1.0) ? _4114 : (isnan(_4114) ? 1.0 : min(_4114, 1.0))) * (_1585 + 1.0))) + _1590) * _1473;
        _1607 = _1440;
        _1608 = _1439;
        _1609 = _1438;
        _1610 = _1450;
        _1611 = _1449;
        _1612 = _1448;
        _1613 = _1460;
        _1614 = _1459;
        _1615 = _1458;
        _1616 = _1473;
        _1617 = _1472;
        _1618 = _1471;
        _1619 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1515 : (isnan(_1515) ? 0.0 : max(_1515, 0.0)));
        _1620 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1557 : (isnan(_1557) ? 0.0 : max(_1557, 0.0)));
        _1621 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1599 : (isnan(_1599) ? 0.0 : max(_1599, 0.0)));
    }
    else
    {
        _1607 = _1295;
        _1608 = _1295;
        _1609 = _1295;
        _1610 = _1295;
        _1611 = _1295;
        _1612 = _1295;
        _1613 = _1295;
        _1614 = _1295;
        _1615 = _1295;
        _1616 = _1295;
        _1617 = _1295;
        _1618 = _1295;
        _1619 = 0.0;
        _1620 = 0.0;
        _1621 = 0.0;
    }
    float _1631 = (cbModelParam._m0[1u].x * (_1619 - _1307)) + _1307;
    float _1632 = (cbModelParam._m0[1u].x * (_1620 - _1308)) + _1308;
    float _1633 = (cbModelParam._m0[1u].x * (_1621 - _1309)) + _1309;
    float _1654 = fma(_1633, cbSceneParam._m0[89u].z, fma(_1632, cbSceneParam._m0[89u].y, _1631 * cbSceneParam._m0[89u].x));
    float _1657 = fma(_1633, cbSceneParam._m0[90u].z, fma(_1632, cbSceneParam._m0[90u].y, _1631 * cbSceneParam._m0[90u].x));
    float _1660 = fma(_1633, cbSceneParam._m0[91u].z, fma(_1632, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1631));
    float _1675 = _900 * 0.5;
    float _1676 = _901 * 0.5;
    float _1677 = _902 * 0.5;
    float _1678 = dot(vec4(_1675, _1676, _1677, 1.0), vec4(_1609, _1612, _1615, _1618));
    float _1681 = dot(vec4(_1675, _1676, _1677, 1.0), vec4(_1608, _1611, _1614, _1617));
    float _1684 = dot(vec4(_1675, _1676, _1677, 1.0), vec4(_1607, _1610, _1613, _1616));
    float _1715;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1691 = dot(vec4(_1675, _1676, _1677, 1.0), vec4(_1294, _1298, _1301, _1304));
        float _1695 = dot(vec4(_1675, _1676, _1677, 1.0), vec4(_1296, _1299, _1302, _1305));
        float _1699 = dot(vec4(_1675, _1676, _1677, 1.0), vec4(_1297, _1300, _1303, _1306));
        float _1706 = dot(vec4(cbModelParam._m0[39u]), vec4(_1675, _1676, _1677, 1.0));
        _1715 = dot(vec3(isnan(0.0) ? _1699 : (isnan(_1699) ? 0.0 : max(_1699, 0.0)), isnan(0.0) ? _1695 : (isnan(_1695) ? 0.0 : max(_1695, 0.0)), isnan(0.0) ? _1691 : (isnan(_1691) ? 0.0 : max(_1691, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1706) ? 0.0 : (isnan(0.0) ? _1706 : max(0.0, _1706))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1715 = 1.0;
    }
    float _1726;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1717 = dot(vec4(cbModelParam._m0[40u]), vec4(_1675, _1676, _1677, 1.0));
        _1726 = dot(vec3(isnan(0.0) ? _1678 : (isnan(_1678) ? 0.0 : max(_1678, 0.0)), isnan(0.0) ? _1681 : (isnan(_1681) ? 0.0 : max(_1681, 0.0)), isnan(0.0) ? _1684 : (isnan(_1684) ? 0.0 : max(_1684, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1717) ? 0.0 : (isnan(0.0) ? _1717 : max(0.0, _1717))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1726 = 1.0;
    }
    float _1730 = (_1726 * cbModelParam._m0[1u].x) + (_1715 * (1.0 - cbModelParam._m0[1u].x));
    float _1740 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _760);
    float _1741 = isnan(_1740) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1740 : min(cbModelParam._m0[25u].z, _1740));
    float _1821;
    float _1823;
    float _1825;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1788 = fma(_963, cbModelParam._m0[13u].z, fma(_959, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _955)) + cbModelParam._m0[13u].w;
        float _1792 = fma(_963, cbModelParam._m0[14u].z, fma(_959, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _955)) + cbModelParam._m0[14u].w;
        float _1796 = fma(_963, cbModelParam._m0[15u].z, fma(_959, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _955)) + cbModelParam._m0[15u].w;
        float _1799 = fma(_902, cbModelParam._m0[13u].z, fma(_901, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _900));
        float _1802 = fma(_902, cbModelParam._m0[14u].z, fma(_901, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _900));
        float _1805 = fma(_902, cbModelParam._m0[15u].z, fma(_901, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _900));
        float _1833;
        if (_1799 > 0.0)
        {
            _1833 = abs((1.0 - _1788) / _1799);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1799 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1788 + 1.0) / _1799);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1833 = frontier_phi_19_17_ladder;
        }
        float _2037;
        if (_1802 > 0.0)
        {
            _2037 = abs((1.0 - _1792) / _1802);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1802 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1792 + 1.0) / _1802);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2037 = frontier_phi_28_24_ladder;
        }
        float _2291;
        if (_1805 > 0.0)
        {
            _2291 = abs((1.0 - _1796) / _1805);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1805 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1796 + 1.0) / _1805);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2291 = frontier_phi_40_35_ladder;
        }
        float _2293 = isnan(_2037) ? _1833 : (isnan(_1833) ? _2037 : min(_1833, _2037));
        float _2294 = isnan(_2291) ? _2293 : (isnan(_2293) ? _2291 : min(_2293, _2291));
        float _2298 = (_2294 * _1799) + _1788;
        float _2299 = (_2294 * _1802) + _1792;
        float _2300 = (_2294 * _1805) + _1796;
        float _2301 = _2294 * 9.9999997473787516355514526367188e-05;
        float _2303 = (-1.0) - _2301;
        float _2305 = _2301 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2300 > _2305) || ((_2300 < _2303) || ((_2299 > _2305) || ((_2299 < _2303) || ((_2298 < _2303) || (_2298 > _2305))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2428 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2300, cbModelParam._m0[9u].z, fma(_2299, cbModelParam._m0[9u].y, _2298 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2300, cbModelParam._m0[10u].z, fma(_2299, cbModelParam._m0[10u].y, _2298 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2300, cbModelParam._m0[11u].z, fma(_2299, cbModelParam._m0[11u].y, _2298 * cbModelParam._m0[11u].x))), _1741);
            frontier_phi_18_40_ladder = _2428.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2428.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2428.x * cbModelParam._m0[1u].y;
        }
        _1821 = frontier_phi_18_40_ladder_2;
        _1823 = frontier_phi_18_40_ladder_1;
        _1825 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1809 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_900, _901, _902), _1741);
        _1821 = _1809.x * cbModelParam._m0[1u].y;
        _1823 = _1809.y * cbModelParam._m0[1u].y;
        _1825 = _1809.z * cbModelParam._m0[1u].y;
    }
    float _1829 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _760);
    float _1830 = isnan(_1829) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1829 : min(cbModelParam._m0[25u].w, _1829));
    float _1921;
    float _1923;
    float _1925;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1885 = fma(_963, cbModelParam._m0[21u].z, fma(_959, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _955)) + cbModelParam._m0[21u].w;
        float _1889 = fma(_963, cbModelParam._m0[22u].z, fma(_959, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _955)) + cbModelParam._m0[22u].w;
        float _1893 = fma(_963, cbModelParam._m0[23u].z, fma(_959, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _955)) + cbModelParam._m0[23u].w;
        float _1896 = fma(_902, cbModelParam._m0[21u].z, fma(_901, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _900));
        float _1899 = fma(_902, cbModelParam._m0[22u].z, fma(_901, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _900));
        float _1902 = fma(_902, cbModelParam._m0[23u].z, fma(_901, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _900));
        float _2042;
        if (_1896 > 0.0)
        {
            _2042 = abs((1.0 - _1885) / _1896);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1896 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1885 + 1.0) / _1896);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _2042 = frontier_phi_30_26_ladder;
        }
        float _2318;
        if (_1899 > 0.0)
        {
            _2318 = abs((1.0 - _1889) / _1899);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1899 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1889 + 1.0) / _1899);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2318 = frontier_phi_42_37_ladder;
        }
        float _2531;
        if (_1902 > 0.0)
        {
            _2531 = abs((1.0 - _1893) / _1902);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1902 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1893 + 1.0) / _1902);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2531 = frontier_phi_51_48_ladder;
        }
        float _2533 = isnan(_2318) ? _2042 : (isnan(_2042) ? _2318 : min(_2042, _2318));
        float _2534 = isnan(_2531) ? _2533 : (isnan(_2533) ? _2531 : min(_2533, _2531));
        float _2538 = (_2534 * _1896) + _1885;
        float _2539 = (_2534 * _1899) + _1889;
        float _2540 = (_2534 * _1902) + _1893;
        float _2541 = _2534 * 9.9999997473787516355514526367188e-05;
        float _2542 = (-1.0) - _2541;
        float _2544 = _2541 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2540 > _2544) || ((_2540 < _2542) || ((_2539 > _2544) || ((_2539 < _2542) || ((_2538 < _2542) || (_2538 > _2544))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2781 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2540, cbModelParam._m0[17u].z, fma(_2539, cbModelParam._m0[17u].y, _2538 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2540, cbModelParam._m0[18u].z, fma(_2539, cbModelParam._m0[18u].y, _2538 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2540, cbModelParam._m0[19u].z, fma(_2539, cbModelParam._m0[19u].y, _2538 * cbModelParam._m0[19u].x))), _1830);
            frontier_phi_27_51_ladder = _2781.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2781.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2781.x * cbModelParam._m0[1u].z;
        }
        _1921 = frontier_phi_27_51_ladder_2;
        _1923 = frontier_phi_27_51_ladder_1;
        _1925 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1905 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_900, _901, _902), _1830);
        _1921 = _1905.x * cbModelParam._m0[1u].z;
        _1923 = _1905.y * cbModelParam._m0[1u].z;
        _1925 = _1905.z * cbModelParam._m0[1u].z;
    }
    float _1938 = (((_926 * _878) + _927) * _892) * ((cbModelParam._m0[1u].w * (_1921 - _1821)) + _1821);
    float _1940 = (((_926 * _879) + _927) * _892) * ((cbModelParam._m0[1u].w * (_1923 - _1823)) + _1823);
    float _1942 = (((_926 * _880) + _927) * _892) * ((cbModelParam._m0[1u].w * (_1925 - _1825)) + _1825);
    float _1945 = fma(_1942, cbSceneParam._m0[89u].z, fma(_1940, cbSceneParam._m0[89u].y, _1938 * cbSceneParam._m0[89u].x));
    float _1948 = fma(_1942, cbSceneParam._m0[90u].z, fma(_1940, cbSceneParam._m0[90u].y, _1938 * cbSceneParam._m0[90u].x));
    float _1951 = fma(_1942, cbSceneParam._m0[91u].z, fma(_1940, cbSceneParam._m0[91u].y, _1938 * cbSceneParam._m0[91u].x));
    uvec4 _1961 = floatBitsToUint(cbInstanceData._m0[_784 + 5u]);
    uint _1963 = _1961.x * 14u;
    uint _1964 = _1963 + 13u;
    float _1971 = _892 + (-1.0);
    float _1976 = (cbLight._m0[_1964].x * _1971) + 1.0;
    float _1977 = (cbLight._m0[_1964].y * _1971) + 1.0;
    float _1978 = (cbLight._m0[_1964].z * _1971) + 1.0;
    float _1979 = (cbLight._m0[_1964].w * _1971) + 1.0;
    uint _1980 = _1963 + 5u;
    float _1986 = isnan(1.0) ? _1977 : (isnan(_1977) ? 1.0 : min(_1977, 1.0));
    uint _1990 = _1963 + 4u;
    float _1996 = isnan(1.0) ? _1976 : (isnan(_1976) ? 1.0 : min(_1976, 1.0));
    uint _2000 = _1963 | 1u;
    float _2011 = dot(vec3(cbLight._m0[_1963].xyz), vec3(_579, _580, _581));
    float _2014 = dot(vec3(cbLight._m0[_2000].xyz), vec3(_579, _580, _581));
    float _4272 = isnan(0.0) ? _2011 : (isnan(_2011) ? 0.0 : max(_2011, 0.0));
    float _4283 = isnan(0.0) ? _2014 : (isnan(_2014) ? 0.0 : max(_2014, 0.0));
    float _2019 = (isnan(1.0) ? _4272 : (isnan(_4272) ? 1.0 : min(_4272, 1.0))) * 0.3183098733425140380859375;
    float _2021 = (isnan(1.0) ? _4283 : (isnan(_4283) ? 1.0 : min(_4283, 1.0))) * 0.3183098733425140380859375;
    float _2028 = ((cbLight._m0[_1980].x * _1986) * _2021) + ((cbLight._m0[_1990].x * _1996) * _2019);
    float _2029 = ((_1986 * cbLight._m0[_1980].y) * _2021) + ((_1996 * cbLight._m0[_1990].y) * _2019);
    float _2030 = ((_1986 * cbLight._m0[_1980].z) * _2021) + ((_1996 * cbLight._m0[_1990].z) * _2019);
    uvec4 _2034 = floatBitsToUint(cbLight._m0[_1963 + 12u]);
    bool _2036 = _2034.x == 0u;
    float _2047;
    float _2049;
    float _2051;
    if (_2036)
    {
        _2047 = _2028;
        _2049 = _2029;
        _2051 = _2030;
    }
    else
    {
        uint _2055 = _1963 + 6u;
        float _2071 = (dot(vec3(cbLight._m0[_1963 + 2u].xyz), vec3(_579, _580, _581)) * 0.5) + 0.5;
        float _2072 = _2071 * _2071;
        float _4294 = isnan(0.0) ? _2072 : (isnan(_2072) ? 0.0 : max(_2072, 0.0));
        float _2073 = isnan(1.0) ? _4294 : (isnan(_4294) ? 1.0 : min(_4294, 1.0));
        float _2074 = isnan(1.0) ? _1978 : (isnan(_1978) ? 1.0 : min(_1978, 1.0));
        _2047 = (((cbLight._m0[_2055].x * 0.3183098733425140380859375) * _2073) * _2074) + _2028;
        _2049 = (((cbLight._m0[_2055].y * 0.3183098733425140380859375) * _2073) * _2074) + _2029;
        _2051 = (((cbLight._m0[_2055].z * 0.3183098733425140380859375) * _2073) * _2074) + _2030;
    }
    bool _2054 = _2034.y == 0u;
    float _2092;
    float _2094;
    float _2096;
    if (_2054)
    {
        _2092 = _2047;
        _2094 = _2049;
        _2096 = _2051;
    }
    else
    {
        uint _2262 = _1963 + 7u;
        float _2278 = (dot(vec3(cbLight._m0[_1963 + 3u].xyz), vec3(_579, _580, _581)) * 0.5) + 0.5;
        float _2279 = _2278 * _2278;
        float _4310 = isnan(0.0) ? _2279 : (isnan(_2279) ? 0.0 : max(_2279, 0.0));
        float _2280 = isnan(1.0) ? _4310 : (isnan(_4310) ? 1.0 : min(_4310, 1.0));
        float _2281 = isnan(1.0) ? _1979 : (isnan(_1979) ? 1.0 : min(_1979, 1.0));
        _2092 = (((cbLight._m0[_2262].x * 0.3183098733425140380859375) * _2280) * _2281) + _2047;
        _2094 = (((cbLight._m0[_2262].y * 0.3183098733425140380859375) * _2280) * _2281) + _2049;
        _2096 = (((cbLight._m0[_2262].z * 0.3183098733425140380859375) * _2280) * _2281) + _2051;
    }
    uint _2099 = _1963 + 8u;
    float _2112 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1963].w)) * _760) * 0.949999988079071044921875);
    float _2113 = _2112 * _2112;
    float _2114 = cbLight._m0[_1963].x + _662;
    float _2115 = cbLight._m0[_1963].y + _663;
    float _2116 = cbLight._m0[_1963].z + _664;
    float _2120 = inversesqrt(dot(vec3(_2114, _2115, _2116), vec3(_2114, _2115, _2116)));
    float _2121 = _2120 * _2114;
    float _2122 = _2120 * _2115;
    float _2123 = _2120 * _2116;
    float _2124 = dot(vec3(_579, _580, _581), vec3(cbLight._m0[_1963].xyz));
    float _4326 = isnan(0.0) ? _2124 : (isnan(_2124) ? 0.0 : max(_2124, 0.0));
    float _2127 = isnan(1.0) ? _4326 : (isnan(_4326) ? 1.0 : min(_4326, 1.0));
    float _4337 = isnan(0.0) ? _893 : (isnan(_893) ? 0.0 : max(_893, 0.0));
    float _2128 = isnan(1.0) ? _4337 : (isnan(_4337) ? 1.0 : min(_4337, 1.0));
    float _2129 = dot(vec3(_579, _580, _581), vec3(_2121, _2122, _2123));
    float _4348 = isnan(0.0) ? _2129 : (isnan(_2129) ? 0.0 : max(_2129, 0.0));
    float _2132 = isnan(1.0) ? _4348 : (isnan(_4348) ? 1.0 : min(_4348, 1.0));
    float _2133 = dot(vec3(cbLight._m0[_1963].xyz), vec3(_2121, _2122, _2123));
    float _4359 = isnan(0.0) ? _2133 : (isnan(_2133) ? 0.0 : max(_2133, 0.0));
    float _2137 = _2113 * _2113;
    float _2141 = ((_2132 * _2132) * (_2137 + (-1.0))) + 1.0;
    float _2149 = exp2(log2(1.0 - (isnan(1.0) ? _4359 : (isnan(_4359) ? 1.0 : min(_4359, 1.0)))) * 5.0);
    float _2150 = 0.959999978542327880859375 - _875;
    float _2152 = 0.959999978542327880859375 - _876;
    float _2153 = 0.959999978542327880859375 - _877;
    float _2160 = 1.0 - _2113;
    float _2171 = (0.5 / (((_2128 * ((_2127 * _2160) + _2113)) + 9.9999999392252902907785028219223e-09) + (((_2128 * _2160) + _2113) * _2127))) * _2127;
    float _4370 = isnan(0.0) ? _2171 : (isnan(_2171) ? 0.0 : max(_2171, 0.0));
    float _2173 = (isnan(1.0) ? _4370 : (isnan(_4370) ? 1.0 : min(_4370, 1.0))) * (_2137 / ((_2141 * _2141) * 3.141590118408203125));
    uint _2184 = _1963 + 9u;
    float _2195 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2000].w)) * _760) * 0.949999988079071044921875);
    float _2196 = _2195 * _2195;
    float _2197 = cbLight._m0[_2000].x + _662;
    float _2198 = cbLight._m0[_2000].y + _663;
    float _2199 = cbLight._m0[_2000].z + _664;
    float _2203 = inversesqrt(dot(vec3(_2197, _2198, _2199), vec3(_2197, _2198, _2199)));
    float _2204 = _2203 * _2197;
    float _2205 = _2203 * _2198;
    float _2206 = _2203 * _2199;
    float _2207 = dot(vec3(_579, _580, _581), vec3(cbLight._m0[_2000].xyz));
    float _4381 = isnan(0.0) ? _2207 : (isnan(_2207) ? 0.0 : max(_2207, 0.0));
    float _2210 = isnan(1.0) ? _4381 : (isnan(_4381) ? 1.0 : min(_4381, 1.0));
    float _2211 = dot(vec3(_579, _580, _581), vec3(_2204, _2205, _2206));
    float _4392 = isnan(0.0) ? _2211 : (isnan(_2211) ? 0.0 : max(_2211, 0.0));
    float _2214 = isnan(1.0) ? _4392 : (isnan(_4392) ? 1.0 : min(_4392, 1.0));
    float _2215 = dot(vec3(cbLight._m0[_2000].xyz), vec3(_2204, _2205, _2206));
    float _4403 = isnan(0.0) ? _2215 : (isnan(_2215) ? 0.0 : max(_2215, 0.0));
    float _2219 = _2196 * _2196;
    float _2223 = ((_2214 * _2214) * (_2219 + (-1.0))) + 1.0;
    float _2230 = exp2(log2(1.0 - (isnan(1.0) ? _4403 : (isnan(_4403) ? 1.0 : min(_4403, 1.0)))) * 5.0);
    float _2237 = 1.0 - _2196;
    float _2247 = (0.5 / (((_2128 * ((_2210 * _2237) + _2196)) + 9.9999999392252902907785028219223e-09) + (((_2128 * _2237) + _2196) * _2210))) * _2210;
    float _4414 = isnan(0.0) ? _2247 : (isnan(_2247) ? 0.0 : max(_2247, 0.0));
    float _2249 = (isnan(1.0) ? _4414 : (isnan(_4414) ? 1.0 : min(_4414, 1.0))) * (_2219 / ((_2223 * _2223) * 3.141590118408203125));
    float _2259 = (((((_2230 * _2150) + _878) * cbLight._m0[_2184].x) * _2249) * _1986) + (((((_2149 * _2150) + _878) * cbLight._m0[_2099].x) * _2173) * _1996);
    float _2260 = (((((_2230 * _2152) + _879) * cbLight._m0[_2184].y) * _2249) * _1986) + (((((_2149 * _2152) + _879) * cbLight._m0[_2099].y) * _2173) * _1996);
    float _2261 = (((((_2230 * _2153) + _880) * cbLight._m0[_2184].z) * _2249) * _1986) + (((((_2149 * _2153) + _880) * cbLight._m0[_2099].z) * _2173) * _1996);
    float _2323;
    float _2325;
    float _2327;
    if (_2036)
    {
        _2323 = _2259;
        _2325 = _2260;
        _2327 = _2261;
    }
    else
    {
        uint _2329 = _1963 + 2u;
        uint _2333 = _1963 + 10u;
        float _2347 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2329].w)) * _760) * 0.949999988079071044921875);
        float _2348 = _2347 * _2347;
        float _2349 = cbLight._m0[_2329].x + _662;
        float _2350 = cbLight._m0[_2329].y + _663;
        float _2351 = cbLight._m0[_2329].z + _664;
        float _2355 = inversesqrt(dot(vec3(_2349, _2350, _2351), vec3(_2349, _2350, _2351)));
        float _2356 = _2355 * _2349;
        float _2357 = _2355 * _2350;
        float _2358 = _2355 * _2351;
        float _2359 = dot(vec3(_579, _580, _581), vec3(cbLight._m0[_2329].xyz));
        float _4425 = isnan(0.0) ? _2359 : (isnan(_2359) ? 0.0 : max(_2359, 0.0));
        float _2362 = isnan(1.0) ? _4425 : (isnan(_4425) ? 1.0 : min(_4425, 1.0));
        float _2363 = dot(vec3(_579, _580, _581), vec3(_2356, _2357, _2358));
        float _4436 = isnan(0.0) ? _2363 : (isnan(_2363) ? 0.0 : max(_2363, 0.0));
        float _2366 = isnan(1.0) ? _4436 : (isnan(_4436) ? 1.0 : min(_4436, 1.0));
        float _2367 = dot(vec3(cbLight._m0[_2329].xyz), vec3(_2356, _2357, _2358));
        float _4447 = isnan(0.0) ? _2367 : (isnan(_2367) ? 0.0 : max(_2367, 0.0));
        float _2371 = _2348 * _2348;
        float _2375 = ((_2366 * _2366) * (_2371 + (-1.0))) + 1.0;
        float _2382 = exp2(log2(1.0 - (isnan(1.0) ? _4447 : (isnan(_4447) ? 1.0 : min(_4447, 1.0)))) * 5.0);
        float _2389 = 1.0 - _2348;
        float _2399 = (0.5 / (((_2128 * ((_2362 * _2389) + _2348)) + 9.9999999392252902907785028219223e-09) + (((_2128 * _2389) + _2348) * _2362))) * _2362;
        float _4458 = isnan(0.0) ? _2399 : (isnan(_2399) ? 0.0 : max(_2399, 0.0));
        float _2401 = (isnan(1.0) ? _4458 : (isnan(_4458) ? 1.0 : min(_4458, 1.0))) * (_2371 / ((_2375 * _2375) * 3.141590118408203125));
        float _2402 = isnan(1.0) ? _1978 : (isnan(_1978) ? 1.0 : min(_1978, 1.0));
        _2323 = (((((_2382 * _2150) + _878) * cbLight._m0[_2333].x) * _2401) * _2402) + _2259;
        _2325 = (((((_2382 * _2152) + _879) * cbLight._m0[_2333].y) * _2401) * _2402) + _2260;
        _2327 = (((((_2382 * _2153) + _880) * cbLight._m0[_2333].z) * _2401) * _2402) + _2261;
    }
    float _2437;
    float _2439;
    float _2441;
    if (_2054)
    {
        _2437 = _2323;
        _2439 = _2325;
        _2441 = _2327;
    }
    else
    {
        uint _2448 = _1963 + 3u;
        uint _2452 = _1963 + 11u;
        float _2466 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2448].w)) * _760) * 0.949999988079071044921875);
        float _2467 = _2466 * _2466;
        float _2468 = cbLight._m0[_2448].x + _662;
        float _2469 = cbLight._m0[_2448].y + _663;
        float _2470 = cbLight._m0[_2448].z + _664;
        float _2474 = inversesqrt(dot(vec3(_2468, _2469, _2470), vec3(_2468, _2469, _2470)));
        float _2475 = _2474 * _2468;
        float _2476 = _2474 * _2469;
        float _2477 = _2474 * _2470;
        float _2478 = dot(vec3(_579, _580, _581), vec3(cbLight._m0[_2448].xyz));
        float _4474 = isnan(0.0) ? _2478 : (isnan(_2478) ? 0.0 : max(_2478, 0.0));
        float _2481 = isnan(1.0) ? _4474 : (isnan(_4474) ? 1.0 : min(_4474, 1.0));
        float _2482 = dot(vec3(_579, _580, _581), vec3(_2475, _2476, _2477));
        float _4485 = isnan(0.0) ? _2482 : (isnan(_2482) ? 0.0 : max(_2482, 0.0));
        float _2485 = isnan(1.0) ? _4485 : (isnan(_4485) ? 1.0 : min(_4485, 1.0));
        float _2486 = dot(vec3(cbLight._m0[_2448].xyz), vec3(_2475, _2476, _2477));
        float _4496 = isnan(0.0) ? _2486 : (isnan(_2486) ? 0.0 : max(_2486, 0.0));
        float _2490 = _2467 * _2467;
        float _2494 = ((_2485 * _2485) * (_2490 + (-1.0))) + 1.0;
        float _2501 = exp2(log2(1.0 - (isnan(1.0) ? _4496 : (isnan(_4496) ? 1.0 : min(_4496, 1.0)))) * 5.0);
        float _2508 = 1.0 - _2467;
        float _2518 = (0.5 / (((_2128 * ((_2481 * _2508) + _2467)) + 9.9999999392252902907785028219223e-09) + (((_2128 * _2508) + _2467) * _2481))) * _2481;
        float _4507 = isnan(0.0) ? _2518 : (isnan(_2518) ? 0.0 : max(_2518, 0.0));
        float _2520 = (isnan(1.0) ? _4507 : (isnan(_4507) ? 1.0 : min(_4507, 1.0))) * (_2490 / ((_2494 * _2494) * 3.141590118408203125));
        float _2521 = isnan(1.0) ? _1979 : (isnan(_1979) ? 1.0 : min(_1979, 1.0));
        _2437 = (((((_2501 * _2150) + _878) * cbLight._m0[_2452].x) * _2520) * _2521) + _2323;
        _2439 = (((((_2501 * _2152) + _879) * cbLight._m0[_2452].y) * _2520) * _2521) + _2325;
        _2441 = (((((_2501 * _2153) + _880) * cbLight._m0[_2452].z) * _2520) * _2521) + _2327;
    }
    float _2655;
    float _2657;
    float _2659;
    float _2661;
    float _2663;
    float _2665;
    if (_1961.y == 0u)
    {
        float _2596 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2597 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2596;
        float _2598 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2596;
        float _2599 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2596;
        uvec4 _2611 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2612 = _2611.x;
        uint _2623 = uint((float(_2611.y) * floor(float(uint(cbSceneParam._m0[85u].y * _683) / _2612))) + floor(float(uint(cbSceneParam._m0[85u].x * _682) / _2612)));
        float _2633 = (log2(_2599 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2634 = isnan(0.0) ? _2633 : (isnan(_2633) ? 0.0 : max(_2633, 0.0));
        uint _2637 = uint(isnan(14.0) ? _2634 : (isnan(_2634) ? 14.0 : min(_2634, 14.0)));
        uvec4 _2642 = texelFetch(g_lightClusterGridBuffer, int(((_2637 << 2u) + (_2623 << 6u)) >> 2u));
        uint _2643 = _2642.x;
        uint _2644 = _2611.z;
        float _2786;
        float _2788;
        float _2790;
        float _2792;
        float _2794;
        float _2796;
        if (((((1u << ((_2644 >> 4u) & 15u)) + 4294967295u) & _2643) == 0u) || ((_2644 & 240u) == 0u))
        {
            _2786 = 0.0;
            _2788 = 0.0;
            _2790 = 0.0;
            _2792 = 0.0;
            _2794 = 0.0;
            _2796 = 0.0;
        }
        else
        {
            float _2787;
            float _2789;
            float _2791;
            float _2793;
            float _2795;
            float _2797;
            float _2947 = 0.0;
            float _2948 = 0.0;
            float _2949 = 0.0;
            float _2950 = 0.0;
            float _2951 = 0.0;
            float _2952 = 0.0;
            uint _2953 = 0u;
            uint _2962;
            bool _2963;
            for (;;)
            {
                _2962 = texelFetch(g_lightClassification, int((((_2637 << 5u) + (_2623 << 9u)) + (_2953 << 2u)) >> 2u)).x;
                _2963 = _2962 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2963)
                {
                    frontier_phi_68_pred = _2949;
                    frontier_phi_68_pred_1 = _2952;
                    frontier_phi_68_pred_2 = _2951;
                    frontier_phi_68_pred_3 = _2950;
                    frontier_phi_68_pred_4 = _2948;
                    frontier_phi_68_pred_5 = _2947;
                }
                else
                {
                    float _3092;
                    float _3093;
                    float _3094;
                    float _3095;
                    float _3096;
                    float _3097;
                    uint _3098;
                    _3092 = _2947;
                    _3093 = _2948;
                    _3094 = _2949;
                    _3095 = _2950;
                    _3096 = _2951;
                    _3097 = _2952;
                    _3098 = _2962;
                    float _3019;
                    float _3020;
                    float _3021;
                    float _3022;
                    float _3023;
                    float _3024;
                    for (;;)
                    {
                        uint _3102 = uint(findLSB(_3098)) + (_2953 << 5u);
                        uint _3099 = (_3098 + 4294967295u) & _3098;
                        uint _3104 = _3102 * 48u;
                        vec4 _3118 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3104)).x, texelFetch(g_PointLightRenderingBuffer, int(_3104 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3104 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3104 + 3u)).x));
                        uint _3124 = (_3102 * 48u) + 4u;
                        vec4 _3137 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3124)).x, texelFetch(g_PointLightRenderingBuffer, int(_3124 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3124 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3124 + 3u)).x));
                        uint _3143 = (_3102 * 48u) + 8u;
                        vec3 _3154 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3143)).x, texelFetch(g_PointLightRenderingBuffer, int(_3143 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3143 + 2u)).x));
                        float _3158 = _3118.x - _2597;
                        float _3159 = _3118.y - _2598;
                        float _3160 = _3118.z - _2599;
                        float _3161 = dot(vec3(_3158, _3159, _3160), vec3(_3158, _3159, _3160));
                        float _3164 = inversesqrt(_3161);
                        float _3165 = _3164 * _3158;
                        float _3166 = _3164 * _3159;
                        float _3167 = _3164 * _3160;
                        float _3168 = dot(vec3(_705, _708, _711), vec3(_3165, _3166, _3167));
                        float _3173 = 1.0 - (_3161 * _3118.w);
                        float _4533 = isnan(0.0) ? _3173 : (isnan(_3173) ? 0.0 : max(_3173, 0.0));
                        float _3174 = isnan(1.0) ? _4533 : (isnan(_4533) ? 1.0 : min(_4533, 1.0));
                        float _3175 = sqrt(_3161) * _3137.w;
                        float _3178 = 1.39999997615814208984375 / (_3175 + 1.39999997615814208984375);
                        float _3179 = _3178 * _3178;
                        float _3182 = ((1.0 - _3179) * _3168) + _3179;
                        float _3185 = _3175 * _3175;
                        float _3189 = ((isnan(0.0) ? _3182 : (isnan(_3182) ? 0.0 : max(_3182, 0.0))) * _3174) / ((_3185 * 0.699999988079071044921875) + 1.0);
                        float _3193 = (-0.0) - _2597;
                        float _3194 = (-0.0) - _2598;
                        float _3195 = (-0.0) - _2599;
                        float _3199 = inversesqrt(dot(vec3(_3193, _3194, _3195), vec3(_3193, _3194, _3195)));
                        float _3200 = _3199 * _3193;
                        float _3201 = _3199 * _3194;
                        float _3202 = _3199 * _3195;
                        float _3210 = exp2(log2(1.0 / ((_3185 * 3.5) + 5.0)) * 0.25);
                        float _3211 = 1.0 - _908;
                        float _3218 = sqrt(1.0 - ((1.0 - (_3211 * _3211)) * (1.0 - (_3210 * _3210))));
                        float _3219 = _3218 * _3218;
                        float _3220 = _3219 * _3219;
                        float _3221 = _3200 + _3165;
                        float _3222 = _3201 + _3166;
                        float _3223 = _3202 + _3167;
                        float _3227 = inversesqrt(dot(vec3(_3221, _3222, _3223), vec3(_3221, _3222, _3223)));
                        float _3231 = dot(vec3(_705, _708, _711), vec3(_3200, _3201, _3202));
                        float _4549 = isnan(0.0) ? _3231 : (isnan(_3231) ? 0.0 : max(_3231, 0.0));
                        float _3234 = isnan(1.0) ? _4549 : (isnan(_4549) ? 1.0 : min(_4549, 1.0));
                        float _3235 = dot(vec3(_705, _708, _711), vec3(_3227 * _3221, _3227 * _3222, _3227 * _3223));
                        float _4560 = isnan(0.0) ? _3235 : (isnan(_3235) ? 0.0 : max(_3235, 0.0));
                        float _3238 = isnan(1.0) ? _4560 : (isnan(_4560) ? 1.0 : min(_4560, 1.0));
                        float _3242 = ((_3238 * _3238) * (_3220 + (-1.0))) + 1.0;
                        float _3243 = _3178 * _3219;
                        float _3244 = _3243 * _3243;
                        float _3247 = ((1.0 - _3244) * _3168) + _3244;
                        float _4571 = isnan(0.0) ? _3247 : (isnan(_3247) ? 0.0 : max(_3247, 0.0));
                        float _3248 = isnan(1.0) ? _4571 : (isnan(_4571) ? 1.0 : min(_4571, 1.0));
                        float _3249 = 1.0 - _3219;
                        float _3259 = (0.5 / (((_3248 * ((_3234 * _3249) + _3219)) + 9.9999999392252902907785028219223e-09) + (((_3248 * _3249) + _3219) * _3234))) * _3248;
                        float _4582 = isnan(0.0) ? _3259 : (isnan(_3259) ? 0.0 : max(_3259, 0.0));
                        float _3270 = (((_3220 * 3.1415927410125732421875) * (isnan(1.0) ? _4582 : (isnan(_4582) ? 1.0 : min(_4582, 1.0)))) / ((_3242 * _3242) * ((_3185 * 2.1991131305694580078125) + 3.141590118408203125))) * _3174;
                        _3022 = (_3189 * _3137.x) + _3095;
                        _3023 = (_3189 * _3137.y) + _3096;
                        _3024 = (_3189 * _3137.z) + _3097;
                        _3019 = (_3270 * _3154.x) + _3092;
                        _3020 = (_3270 * _3154.y) + _3093;
                        _3021 = (_3270 * _3154.z) + _3094;
                        if (_3099 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3092 = _3019;
                            _3093 = _3020;
                            _3094 = _3021;
                            _3095 = _3022;
                            _3096 = _3023;
                            _3097 = _3024;
                            _3098 = _3099;
                        }
                    }
                    frontier_phi_68_pred = _3021;
                    frontier_phi_68_pred_1 = _3024;
                    frontier_phi_68_pred_2 = _3023;
                    frontier_phi_68_pred_3 = _3022;
                    frontier_phi_68_pred_4 = _3020;
                    frontier_phi_68_pred_5 = _3019;
                }
                _2791 = frontier_phi_68_pred;
                _2797 = frontier_phi_68_pred_1;
                _2795 = frontier_phi_68_pred_2;
                _2793 = frontier_phi_68_pred_3;
                _2789 = frontier_phi_68_pred_4;
                _2787 = frontier_phi_68_pred_5;
                uint _2954 = _2953 + 1u;
                if (_2954 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2947 = _2787;
                    _2948 = _2789;
                    _2949 = _2791;
                    _2950 = _2793;
                    _2951 = _2795;
                    _2952 = _2797;
                    _2953 = _2954;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2786 = _2787;
            _2788 = _2789;
            _2790 = _2791;
            _2792 = _2793;
            _2794 = _2795;
            _2796 = _2797;
        }
        uvec4 _2800 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2801 = _2800.z;
        uint _2803 = (_2801 >> 8u) & 15u;
        float _2915;
        float _2917;
        float _2919;
        float _2921;
        float _2923;
        float _2925;
        if (((4294967295u << _2803) & _2643) == 0u)
        {
            _2915 = _2786;
            _2917 = _2788;
            _2919 = _2790;
            _2921 = _2792;
            _2923 = _2794;
            _2925 = _2796;
        }
        else
        {
            float _2940 = inversesqrt(dot(vec3(_2597, _2598, _2599), vec3(_2597, _2598, _2599)));
            float _2941 = _2940 * _2597;
            float _2942 = _2940 * _2598;
            float _2943 = _2940 * _2599;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2803 < ((_2801 >> 12u) & 15u))
            {
                float _2916;
                float _2918;
                float _2920;
                float _2922;
                float _2924;
                float _2926;
                float _3075 = _2786;
                float _3076 = _2788;
                float _3077 = _2790;
                float _3078 = _2792;
                float _3079 = _2794;
                float _3080 = _2796;
                uint _3081 = _2803;
                uint _3090;
                bool _3091;
                for (;;)
                {
                    _3090 = texelFetch(g_lightClassification, int((((_2637 << 5u) + (_2623 << 9u)) + (_3081 << 2u)) >> 2u)).x;
                    _3091 = _3090 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_3091)
                    {
                        frontier_phi_79_pred = _3080;
                        frontier_phi_79_pred_1 = _3079;
                        frontier_phi_79_pred_2 = _3078;
                        frontier_phi_79_pred_3 = _3077;
                        frontier_phi_79_pred_4 = _3076;
                        frontier_phi_79_pred_5 = _3075;
                    }
                    else
                    {
                        float _3284;
                        float _3285;
                        float _3286;
                        float _3287;
                        float _3288;
                        float _3289;
                        float _3579;
                        float _3580;
                        float _3581;
                        float _3582;
                        float _3583;
                        float _3584;
                        float _3297 = _3075;
                        float _3298 = _3076;
                        float _3299 = _3077;
                        float _3300 = _3078;
                        float _3301 = _3079;
                        float _3302 = _3080;
                        uint _3303 = _3090;
                        uint _3304;
                        vec4 _3329;
                        float _3330;
                        vec4 _3345;
                        vec3 _3357;
                        vec4 _3372;
                        vec4 _3388;
                        float _3435;
                        bool _3436;
                        for (;;)
                        {
                            uint _3314 = ((_3081 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3303));
                            _3304 = (_3303 + 4294967295u) & _3303;
                            uint _3316 = _3314 * 40u;
                            _3329 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3316)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3316 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3316 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3316 + 3u)).x));
                            _3330 = _3329.w;
                            uint _3332 = (_3314 * 40u) + 4u;
                            _3345 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3332)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3332 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3332 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3332 + 3u)).x));
                            uint _3347 = (_3314 * 40u) + 8u;
                            _3357 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3347)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3347 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3347 + 2u)).x));
                            uint _3359 = (_3314 * 40u) + 16u;
                            _3372 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3359)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3359 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3359 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3359 + 3u)).x));
                            uint _3375 = (_3314 * 40u) + 20u;
                            _3388 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3375)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3375 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3375 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3375 + 3u)).x));
                            uint _3391 = (_3314 * 40u) + 24u;
                            vec4 _3404 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3391)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3391 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3391 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3391 + 3u)).x));
                            uint _3410 = (_3314 * 40u) + 28u;
                            vec4 _3423 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3410)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3410 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3410 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3410 + 3u)).x));
                            _3435 = fma(_2599, _3423.z, fma(_2598, _3423.y, _3423.x * _2597)) + _3423.w;
                            _3436 = !((fma(_2599, _3404.z, fma(_2598, _3404.y, _3404.x * _2597)) + _3404.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_3436)
                            {
                                float _3463 = _3329.x - _2597;
                                float _3464 = _3329.y - _2598;
                                float _3465 = _3329.z - _2599;
                                float _3466 = dot(vec3(_3463, _3464, _3465), vec3(_3463, _3464, _3465));
                                float _3469 = inversesqrt(_3466);
                                float _3470 = _3469 * _3463;
                                float _3471 = _3469 * _3464;
                                float _3472 = _3469 * _3465;
                                float _3476 = 1.0 - (_3466 / (_3330 * _3330));
                                float _4593 = isnan(0.0) ? _3476 : (isnan(_3476) ? 0.0 : max(_3476, 0.0));
                                float _3477 = isnan(1.0) ? _4593 : (isnan(_4593) ? 1.0 : min(_4593, 1.0));
                                float _3481 = sqrt(_3466) * _3345.w;
                                float _3483 = 1.39999997615814208984375 / (_3481 + 1.39999997615814208984375);
                                float _3484 = _3483 * _3483;
                                float _3487 = ((1.0 - _3484) * dot(vec3(_3470, _3471, _3472), vec3(_705, _708, _711))) + _3484;
                                float _3490 = _3481 * _3481;
                                float _3494 = (fma(_2599, _3372.z, fma(_2598, _3372.y, _3372.x * _2597)) + _3372.w) / _3435;
                                float _3495 = (fma(_2599, _3388.z, fma(_2598, _3388.y, _3388.x * _2597)) + _3388.w) / _3435;
                                float _3499 = 1.0 - dot(vec2(_3494, _3495), vec2(_3494, _3495));
                                float _4609 = isnan(0.0) ? _3499 : (isnan(_3499) ? 0.0 : max(_3499, 0.0));
                                float _3500 = isnan(1.0) ? _4609 : (isnan(_4609) ? 1.0 : min(_4609, 1.0));
                                float _3501 = _3500 * (((isnan(0.0) ? _3487 : (isnan(_3487) ? 0.0 : max(_3487, 0.0))) * _3477) / ((_3490 * 0.699999988079071044921875) + 1.0));
                                float _3513 = exp2(log2(1.0 / ((_3490 * 3.5) + 5.0)) * 0.25);
                                float _3514 = 1.0 - _908;
                                float _3521 = sqrt(1.0 - ((1.0 - (_3514 * _3514)) * (1.0 - (_3513 * _3513))));
                                float _3522 = _3521 * _3521;
                                float _3523 = _3522 * _3522;
                                float _3524 = _3470 - _2941;
                                float _3525 = _3471 - _2942;
                                float _3526 = _3472 - _2943;
                                float _3530 = inversesqrt(dot(vec3(_3524, _3525, _3526), vec3(_3524, _3525, _3526)));
                                float _3534 = dot(vec3(_705, _708, _711), vec3((-0.0) - _2941, (-0.0) - _2942, (-0.0) - _2943));
                                float _4620 = isnan(0.0) ? _3534 : (isnan(_3534) ? 0.0 : max(_3534, 0.0));
                                float _3537 = isnan(1.0) ? _4620 : (isnan(_4620) ? 1.0 : min(_4620, 1.0));
                                float _3538 = dot(vec3(_705, _708, _711), vec3(_3530 * _3524, _3530 * _3525, _3530 * _3526));
                                float _4631 = isnan(0.0) ? _3538 : (isnan(_3538) ? 0.0 : max(_3538, 0.0));
                                float _3541 = isnan(1.0) ? _4631 : (isnan(_4631) ? 1.0 : min(_4631, 1.0));
                                float _3545 = ((_3541 * _3541) * (_3523 + (-1.0))) + 1.0;
                                float _3546 = _3483 * _3522;
                                float _3547 = _3546 * _3546;
                                float _3553 = ((1.0 - _3547) * dot(vec3(_705, _708, _711), vec3(_3470, _3471, _3472))) + _3547;
                                float _4642 = isnan(0.0) ? _3553 : (isnan(_3553) ? 0.0 : max(_3553, 0.0));
                                float _3554 = isnan(1.0) ? _4642 : (isnan(_4642) ? 1.0 : min(_4642, 1.0));
                                float _3555 = 1.0 - _3522;
                                float _3565 = (0.5 / (((_3554 * ((_3537 * _3555) + _3522)) + 9.9999999392252902907785028219223e-09) + (((_3554 * _3555) + _3522) * _3537))) * _3554;
                                float _4653 = isnan(0.0) ? _3565 : (isnan(_3565) ? 0.0 : max(_3565, 0.0));
                                float _3575 = (_3500 * _3477) * (((_3523 * 3.1415927410125732421875) * (isnan(1.0) ? _4653 : (isnan(_4653) ? 1.0 : min(_4653, 1.0)))) / ((_3545 * _3545) * ((_3490 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3501 * _3345.z;
                                frontier_phi_85_pred_1 = _3501 * _3345.y;
                                frontier_phi_85_pred_2 = _3501 * _3345.x;
                                frontier_phi_85_pred_3 = _3575 * _3357.z;
                                frontier_phi_85_pred_4 = _3575 * _3357.y;
                                frontier_phi_85_pred_5 = _3575 * _3357.x;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3584 = frontier_phi_85_pred;
                            _3583 = frontier_phi_85_pred_1;
                            _3582 = frontier_phi_85_pred_2;
                            _3581 = frontier_phi_85_pred_3;
                            _3580 = frontier_phi_85_pred_4;
                            _3579 = frontier_phi_85_pred_5;
                            _3287 = _3582 + _3300;
                            _3288 = _3583 + _3301;
                            _3289 = _3584 + _3302;
                            _3284 = _3579 + _3297;
                            _3285 = _3580 + _3298;
                            _3286 = _3581 + _3299;
                            if (_3304 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3297 = _3284;
                                _3298 = _3285;
                                _3299 = _3286;
                                _3300 = _3287;
                                _3301 = _3288;
                                _3302 = _3289;
                                _3303 = _3304;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _3289;
                        frontier_phi_79_pred_1 = _3288;
                        frontier_phi_79_pred_2 = _3287;
                        frontier_phi_79_pred_3 = _3286;
                        frontier_phi_79_pred_4 = _3285;
                        frontier_phi_79_pred_5 = _3284;
                    }
                    _2926 = frontier_phi_79_pred;
                    _2924 = frontier_phi_79_pred_1;
                    _2922 = frontier_phi_79_pred_2;
                    _2920 = frontier_phi_79_pred_3;
                    _2918 = frontier_phi_79_pred_4;
                    _2916 = frontier_phi_79_pred_5;
                    uint _3082 = _3081 + 1u;
                    if (_3082 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3075 = _2916;
                        _3076 = _2918;
                        _3077 = _2920;
                        _3078 = _2922;
                        _3079 = _2924;
                        _3080 = _2926;
                        _3081 = _3082;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2922;
                frontier_phi_60_61_ladder_1 = _2926;
                frontier_phi_60_61_ladder_2 = _2924;
                frontier_phi_60_61_ladder_3 = _2920;
                frontier_phi_60_61_ladder_4 = _2918;
                frontier_phi_60_61_ladder_5 = _2916;
            }
            else
            {
                frontier_phi_60_61_ladder = _2792;
                frontier_phi_60_61_ladder_1 = _2796;
                frontier_phi_60_61_ladder_2 = _2794;
                frontier_phi_60_61_ladder_3 = _2790;
                frontier_phi_60_61_ladder_4 = _2788;
                frontier_phi_60_61_ladder_5 = _2786;
            }
            _2915 = frontier_phi_60_61_ladder_5;
            _2917 = frontier_phi_60_61_ladder_4;
            _2919 = frontier_phi_60_61_ladder_3;
            _2921 = frontier_phi_60_61_ladder;
            _2923 = frontier_phi_60_61_ladder_2;
            _2925 = frontier_phi_60_61_ladder_1;
        }
        float _2930 = isnan(1.0) ? _892 : (isnan(_892) ? 1.0 : min(_892, 1.0));
        _2655 = (_2930 * _2921) + _2092;
        _2657 = (_2930 * _2923) + _2094;
        _2659 = (_2930 * _2925) + _2096;
        _2661 = ((_2915 * _878) * _2930) + _2437;
        _2663 = ((_2917 * _879) * _2930) + _2439;
        _2665 = ((_2919 * _880) * _2930) + _2441;
    }
    else
    {
        _2655 = _2092;
        _2657 = _2094;
        _2659 = _2096;
        _2661 = _2437;
        _2663 = _2439;
        _2665 = _2441;
    }
    uint _2671 = _785 + uint(cbMatDynParam._m0[0u].w);
    float _2681 = ((((cbMtdParam._m0[12u].x * cbMtdParam._m0[16u].z) * cbMtdParam._m0[15u].w) * _517) * _530.x) * cbInstanceData._m0[_2671].x;
    float _2686 = ((((cbMtdParam._m0[12u].y * cbMtdParam._m0[16u].z) * cbMtdParam._m0[15u].w) * _517) * _530.y) * cbInstanceData._m0[_2671].y;
    float _2691 = ((((cbMtdParam._m0[12u].z * cbMtdParam._m0[16u].z) * cbMtdParam._m0[15u].w) * _517) * _530.z) * cbInstanceData._m0[_2671].z;
    float _4669 = isnan(0.0) ? _869 : (isnan(_869) ? 0.0 : max(_869, 0.0));
    float _4680 = isnan(0.0) ? _870 : (isnan(_870) ? 0.0 : max(_870, 0.0));
    float _4691 = isnan(0.0) ? _871 : (isnan(_871) ? 0.0 : max(_871, 0.0));
    float _4702 = isnan(0.0) ? _582 : (isnan(_582) ? 0.0 : max(_582, 0.0));
    float _2709 = (((isnan(1.0) ? _4669 : (isnan(_4669) ? 1.0 : min(_4669, 1.0))) * (_2655 + ((isnan(0.0) ? _1654 : (isnan(_1654) ? 0.0 : max(_1654, 0.0))) * _892))) + ((_2661 + ((isnan(0.0) ? _1945 : (isnan(_1945) ? 0.0 : max(_1945, 0.0))) * _1730)) * cbPerFrame._m0[3u].x)) + _2681;
    float _2711 = (_2686 + ((_2663 + ((isnan(0.0) ? _1948 : (isnan(_1948) ? 0.0 : max(_1948, 0.0))) * _1730)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4680 : (isnan(_4680) ? 1.0 : min(_4680, 1.0))) * (_2657 + ((isnan(0.0) ? _1657 : (isnan(_1657) ? 0.0 : max(_1657, 0.0))) * _892)));
    float _2713 = (_2691 + ((_2665 + ((isnan(0.0) ? _1951 : (isnan(_1951) ? 0.0 : max(_1951, 0.0))) * _1730)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4691 : (isnan(_4691) ? 1.0 : min(_4691, 1.0))) * (_2659 + ((isnan(0.0) ? _1660 : (isnan(_1660) ? 0.0 : max(_1660, 0.0))) * _892)));
    float _2714 = isnan(0.0) ? _2709 : (isnan(_2709) ? 0.0 : max(_2709, 0.0));
    float _2715 = isnan(0.0) ? _2711 : (isnan(_2711) ? 0.0 : max(_2711, 0.0));
    float _2716 = isnan(0.0) ? _2713 : (isnan(_2713) ? 0.0 : max(_2713, 0.0));
    float _2722 = cbMtdParam._m0[2u].x * _2681;
    float _2723 = cbMtdParam._m0[2u].y * _2686;
    float _2724 = cbMtdParam._m0[2u].z * _2691;
    float _4728 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2726 = isnan(1.0) ? _4728 : (isnan(_4728) ? 1.0 : min(_4728, 1.0));
    float _2731 = cbInstanceData._m0[_784 + 6u].w * (isnan(1.0) ? _4702 : (isnan(_4702) ? 1.0 : min(_4702, 1.0)));
    float _2736 = _682 / cbSceneParam._m0[86u].x;
    float _2737 = _683 / cbSceneParam._m0[86u].y;
    vec4 _2751 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2736, _2737, (log2((isnan(cbSceneParam._m0[77u].w) ? _603 : (isnan(_603) ? cbSceneParam._m0[77u].w : min(_603, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2753 = _2751.x;
    float _2754 = _2751.y;
    float _2755 = _2751.z;
    float _2756 = _2751.w;
    float _2848;
    float _2850;
    float _2852;
    float _2854;
    if (_603 > cbSceneParam._m0[78u].w)
    {
        float _2811 = isnan(_603) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _603 : min(cbSceneParam._m0[80u].w, _603));
        float _2812 = _2811 / _603;
        float _2823 = _2812 * _655;
        float _2824 = _656 * _2812;
        float _2825 = (-0.0) - _2824;
        float _2826 = _2812 * _657;
        float _2828 = (cbSceneParam._m0[77u].w * _2825) / _2811;
        float _2829 = _2828 + cbSceneParam._m0[79u].w;
        float _2830 = cbSceneParam._m0[79u].w - _2824;
        float _2836 = sqrt(((_2823 * _2823) + (_2824 * _2824)) + (_2826 * _2826));
        float _2839 = (1.0 - (cbSceneParam._m0[77u].w / _2811)) * _2836;
        float _2844 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2846 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3032;
        if (abs((_2825 - _2828) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3032 = ((((_2829 > 0.0) ? exp2(_2844 * _2829) : (2.0 - exp2(_2846 * _2829))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2839;
        }
        else
        {
            float _2976 = 1.0 / cbSceneParam._m0[80u].x;
            float _2977 = isnan(_2830) ? _2829 : (isnan(_2829) ? _2830 : max(_2829, _2830));
            float _2978 = isnan(_2830) ? _2829 : (isnan(_2829) ? _2830 : min(_2829, _2830));
            float _2987 = isnan(0.0) ? _2977 : (isnan(_2977) ? 0.0 : min(_2977, 0.0));
            float _2988 = isnan(0.0) ? _2978 : (isnan(_2978) ? 0.0 : min(_2978, 0.0));
            _3032 = ((abs(_2836 / _2825) * cbSceneParam._m0[80u].y) * ((((_2987 - _2988) * 2.0) - ((exp2(_2844 * (isnan(0.0) ? _2977 : (isnan(_2977) ? 0.0 : max(_2977, 0.0)))) - exp2(_2844 * (isnan(0.0) ? _2978 : (isnan(_2978) ? 0.0 : max(_2978, 0.0))))) * _2976)) - ((exp2(_2846 * _2987) - exp2(_2846 * _2988)) * _2976))) + (_2839 * cbSceneParam._m0[80u].z);
        }
        vec4 _3034 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2736, _2737, 1.0), 0.0);
        float _3043 = exp2((_3032 * (-1.44269502162933349609375)) * (1.0 - _3034.w));
        float _3044 = log2(_3043);
        float _3060 = log2(_2756);
        _2848 = (exp2(_3060 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3044 * cbSceneParam._m0[78u].x)) * _3034.x) / cbSceneParam._m0[78u].x)) + _2753;
        _2850 = (exp2(_3060 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3044 * cbSceneParam._m0[78u].y)) * _3034.y) / cbSceneParam._m0[78u].y)) + _2754;
        _2852 = (exp2(_3060 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3044 * cbSceneParam._m0[78u].z)) * _3034.z) / cbSceneParam._m0[78u].z)) + _2755;
        _2854 = _3043 * _2756;
    }
    else
    {
        _2848 = _2753;
        _2850 = _2754;
        _2852 = _2755;
        _2854 = _2756;
    }
    bool _3070;
    vec4 _2864;
    vec4 _2886;
    float _2888;
    float _2892;
    float _2893;
    float _2894;
    float _2897;
    float _2900;
    float _2903;
    float _2904;
    bool _2914;
    for (;;)
    {
        _2864 = cbMatDynParam._m0[0u];
        float _2866 = roundEven(_2864.y);
        bool _2867 = _2866 == 3.0;
        float _2868 = log2(_2854);
        float _2872 = exp2(_2868 * cbSceneParam._m0[78u].x);
        float _2873 = exp2(_2868 * cbSceneParam._m0[78u].y);
        float _2874 = exp2(_2868 * cbSceneParam._m0[78u].z);
        float _2875 = _2872 * _2714;
        float _2876 = _2873 * _2715;
        float _2877 = _2874 * _2716;
        float _2884 = _671 + (-0.5);
        _2886 = cbMtdParam._m0[1u];
        _2888 = _2886.y * _2884;
        float _2891 = (_2866 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2892 = _2891 * (_2867 ? _2875 : (_2875 + (cbSceneParam._m0[72u].w * _2848)));
        _2893 = _2891 * (_2867 ? _2876 : (_2876 + (cbSceneParam._m0[72u].w * _2850)));
        _2894 = _2891 * (_2867 ? _2877 : (_2877 + (cbSceneParam._m0[72u].w * _2852)));
        _2897 = ((_2722 * _2726) * _2872) * _2891;
        _2900 = ((_2723 * _2726) * _2873) * _2891;
        _2903 = ((_2724 * _2726) * _2874) * _2891;
        _2904 = _2884 * 0.999000012874603271484375;
        _2914 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2914)
        {
            if ((cbInstanceData._m0[_784 + 7u].x + _2904) < 0.5)
            {
                _3070 = true;
                break;
            }
        }
        uint _3011 = _785 + uint(_2864.w);
        if ((cbInstanceData._m0[_3011].w < 1.0) && ((cbInstanceData._m0[_3011].w + _2904) < 0.5))
        {
            _3070 = true;
            break;
        }
        if ((_2888 + _396) < _2886.x)
        {
            _3070 = true;
            break;
        }
        _3070 = false;
        break;
    }
    float _3275;
    if (_3070)
    {
        discard_state = true;
        _3275 = 0.0;
    }
    else
    {
        _3275 = _2731;
    }
    SV_Target.x = _2892;
    SV_Target.y = _2893;
    SV_Target.z = _2894;
    SV_Target.w = _3275;
    SV_Target_1.x = _2897;
    SV_Target_1.y = _2900;
    SV_Target_1.z = _2903;
    SV_Target_1.w = _2731;
    discard_exit();
}


