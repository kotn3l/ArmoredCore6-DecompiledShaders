#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[18];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_1;
layout(set = 0, binding = 1) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_7;
layout(set = 0, binding = 10) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_6;
layout(set = 0, binding = 12) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_0;
layout(set = 0, binding = 3) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_10;
layout(set = 0, binding = 4) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_11;
layout(set = 0, binding = 5) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_12;
layout(set = 0, binding = 7) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1411;
float _4119;
float _4120;
float _4121;
float _4122;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _215 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _216 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _217 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _223 = inversesqrt(dot(vec3(_215, _216, _217), vec3(_215, _216, _217)));
    float _230 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _231 = _230 * NORMAL.x;
    float _232 = _230 * NORMAL.y;
    float _233 = _230 * NORMAL.z;
    float _237 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _245;
    float _246;
    float _247;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _245 = (-0.0) - _231;
        _246 = (-0.0) - _232;
        _247 = (-0.0) - _233;
    }
    else
    {
        _245 = _231;
        _246 = _232;
        _247 = _233;
    }
    float _291 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _301 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _291);
    float _302 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _291);
    float _303 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _291);
    vec4 _316 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _322 = _316.w;
    vec4 _334 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _345 = cbMtdParam._m0[9u].x * _334.x;
    float _346 = cbMtdParam._m0[9u].y * _334.y;
    float _347 = cbMtdParam._m0[9u].z * _334.z;
    float _353 = exp2(log2(1.0 - _322) * 8.0);
    vec4 _365 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_10, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _385 = (((cbMtdParam._m0[13u].x * _365.x) - _345) * _353) + _345;
    float _386 = (((cbMtdParam._m0[13u].y * _365.y) - _346) * _353) + _346;
    float _387 = (((cbMtdParam._m0[13u].z * _365.z) - _347) * _353) + _347;
    float _390 = exp2(log2(_322) * 8.0);
    vec4 _402 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _435 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _443 = (((((cbMtdParam._m0[11u].x * _402.x) - _385) * _390) + _385) * 4.55000019073486328125) * _435.x;
    float _445 = (((((cbMtdParam._m0[11u].y * _402.y) - _386) * _390) + _386) * 4.55000019073486328125) * _435.y;
    float _447 = (((((cbMtdParam._m0[11u].z * _402.z) - _387) * _390) + _387) * 4.55000019073486328125) * _435.z;
    float _448 = _435.w * _334.w;
    vec4 _465 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _472 = cbMtdParam._m0[16u].x + _465.x;
    float _475 = ((cbMtdParam._m0[15u].z - _472) * _353) + _472;
    float _479 = ((cbMtdParam._m0[16u].w - _475) * _390) + _475;
    vec4 _491 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w));
    float _493 = _491.x;
    float _494 = _491.y;
    float _500 = cbMtdParam._m0[14u].x + _491.z;
    vec4 _513 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _522 = (((_513.z - _500) + cbMtdParam._m0[15u].y) * _353) + _500;
    vec4 _535 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _547 = (_316.z * 2.0) * ((((_535.z - _522) + cbMtdParam._m0[14u].w) * _390) + _522);
    float _561 = abs((fract(cbMtdParam._m0[15u].x * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _4131 = isnan(0.0) ? _561 : (isnan(_561) ? 0.0 : max(_561, 0.0));
    float _562 = isnan(1.0) ? _4131 : (isnan(_4131) ? 1.0 : min(_4131, 1.0));
    float _567 = (_562 * _562) * (3.0 - (_562 * 2.0));
    vec4 _580 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _588 = (_316.x * 2.0) + (-1.0);
    float _589 = (_316.y * 2.0) + (-1.0);
    float _590 = dot(vec2(_588, _589), vec2(_588, _589));
    float _4142 = isnan(0.0) ? _590 : (isnan(_590) ? 0.0 : max(_590, 0.0));
    float _595 = sqrt(1.0 - (isnan(1.0) ? _4142 : (isnan(_4142) ? 1.0 : min(_4142, 1.0))));
    float _600 = ((_513.x - _493) * _353) + _493;
    float _601 = ((_513.y - _494) * _353) + _494;
    float _614 = (cbMtdParam._m0[14u].z * (((((_535.x - _600) * _390) + _600) * 2.0) + (-1.0))) + _588;
    float _615 = (cbMtdParam._m0[14u].z * (((((_535.y - _601) * _390) + _601) * 2.0) + (-1.0))) + _589;
    float _618 = fma(_595, _245, fma(_615, _237 * TANGENT.x, (_223 * _215) * _614));
    float _621 = fma(_595, _246, fma(_615, _237 * TANGENT.y, (_223 * _216) * _614));
    float _624 = fma(_595, _247, fma(_615, _237 * TANGENT.z, (_223 * _217) * _614));
    float _628 = inversesqrt(dot(vec3(_618, _621, _624), vec3(_618, _621, _624)));
    float _629 = _628 * _618;
    float _630 = _628 * _621;
    float _631 = _628 * _624;
    float _4153 = isnan(0.0) ? _448 : (isnan(_448) ? 0.0 : max(_448, 0.0));
    float _632 = isnan(1.0) ? _4153 : (isnan(_4153) ? 1.0 : min(_4153, 1.0));
    float _4164 = isnan(0.0) ? _547 : (isnan(_547) ? 0.0 : max(_547, 0.0));
    float _633 = isnan(1.0) ? _4164 : (isnan(_4164) ? 1.0 : min(_4164, 1.0));
    float _4175 = isnan(0.0) ? _443 : (isnan(_443) ? 0.0 : max(_443, 0.0));
    float _634 = isnan(1.0) ? _4175 : (isnan(_4175) ? 1.0 : min(_4175, 1.0));
    float _4186 = isnan(0.0) ? _445 : (isnan(_445) ? 0.0 : max(_445, 0.0));
    float _635 = isnan(1.0) ? _4186 : (isnan(_4186) ? 1.0 : min(_4186, 1.0));
    float _4197 = isnan(0.0) ? _447 : (isnan(_447) ? 0.0 : max(_447, 0.0));
    float _636 = isnan(1.0) ? _4197 : (isnan(_4197) ? 1.0 : min(_4197, 1.0));
    float _4208 = isnan(0.0) ? _479 : (isnan(_479) ? 0.0 : max(_479, 0.0));
    float _637 = isnan(1.0) ? _4208 : (isnan(_4208) ? 1.0 : min(_4208, 1.0));
    float _645 = cbMatDynParam._m0[9u].x * _634;
    float _646 = cbMatDynParam._m0[9u].y * _635;
    float _647 = cbMatDynParam._m0[9u].z * _636;
    float _654 = inversesqrt(dot(vec3(_301, _302, _303), vec3(_301, _302, _303)));
    float _655 = _654 * _301;
    float _656 = _654 * _302;
    float _657 = _654 * _303;
    float _658 = dot(vec3(_629, _630, _631), vec3(_655, _656, _657));
    float _664 = abs(exp2(log2(_658) * cbMatDynParam._m0[12u].x));
    float _665 = isnan(0.100000001490116119384765625) ? _664 : (isnan(_664) ? 0.100000001490116119384765625 : max(_664, 0.100000001490116119384765625));
    float _671 = ((isnan(0.699999988079071044921875) ? _665 : (isnan(_665) ? 0.699999988079071044921875 : min(_665, 0.699999988079071044921875))) + (-0.100000001490116119384765625)) * 1.66666662693023681640625;
    float _693 = 1.0 - cbMatDynParam._m0[8u].w;
    float _4229 = isnan(0.0) ? _693 : (isnan(_693) ? 0.0 : max(_693, 0.0));
    float _696 = 1.0 - cbMatDynParam._m0[7u].w;
    float _4240 = isnan(0.0) ? _696 : (isnan(_696) ? 0.0 : max(_696, 0.0));
    float _697 = isnan(1.0) ? _4240 : (isnan(_4240) ? 1.0 : min(_4240, 1.0));
    float _700 = (((isnan(1.0) ? _4229 : (isnan(_4229) ? 1.0 : min(_4229, 1.0))) - _697) * _671) + _697;
    float _719 = dot(vec3(_629, _630, _631), vec3(0.0, -1.0, 0.0));
    float _4251 = isnan(0.0) ? _719 : (isnan(_719) ? 0.0 : max(_719, 0.0));
    float _722 = isnan(1.0) ? _4251 : (isnan(_4251) ? 1.0 : min(_4251, 1.0));
    float _729 = (_722 * _634) * cbMatDynParam._m0[11u].x;
    float _731 = (_722 * _635) * cbMatDynParam._m0[11u].y;
    float _733 = (_722 * _636) * cbMatDynParam._m0[11u].z;
    float _740 = dot(vec3(_655, _656, _657), vec3(_629, _630, _631));
    float _743 = _740 * 2.0;
    float _753 = dot(vec3((-0.0) - (_655 - (_743 * _629)), (-0.0) - (_656 - (_743 * _630)), (-0.0) - (_657 - (_743 * _631))), vec3(0.0, -1.0, 0.0));
    float _4262 = isnan(0.0) ? _753 : (isnan(_753) ? 0.0 : max(_753, 0.0));
    float _760 = exp2(log2(isnan(1.0) ? _4262 : (isnan(_4262) ? 1.0 : min(_4262, 1.0))) * 4.0);
    float _786 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    vec4 _791 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _793 = _791.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1090 = sqrt(((_301 * _301) + (_302 * _302)) + (_303 * _303));
        float _1096 = (cbMatDynParam._m0[5u].x * _1090) + cbMatDynParam._m0[5u].y;
        float _4273 = isnan(0.0) ? _1096 : (isnan(_1096) ? 0.0 : max(_1096, 0.0));
        float _1097 = isnan(1.0) ? _4273 : (isnan(_4273) ? 1.0 : min(_4273, 1.0));
        float _1101 = (cbMatDynParam._m0[5u].z * _1090) + cbMatDynParam._m0[5u].w;
        float _4284 = isnan(0.0) ? _1101 : (isnan(_1101) ? 0.0 : max(_1101, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4284 : (isnan(_4284) ? 1.0 : min(_4284, 1.0))) - _1097)) + _1097) < ((_793 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _805 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _806 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _808 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _810 = _808.w;
    float _828 = fma(_631, cbSceneParam._m0[5u].z, fma(_630, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _629));
    float _831 = fma(_631, cbSceneParam._m0[6u].z, fma(_630, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _629));
    float _834 = fma(_631, cbSceneParam._m0[7u].z, fma(_630, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _629));
    vec4 _836 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _838 = _836.x;
    float _850 = (((_836.y - _633) + (_836.w * _633)) * cbMtdParam._m0[3u].x) + _633;
    vec4 _851 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _867 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3(cbMtdParam._m0[3u].x * (_838 * _838)), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * _851.z;
    float _875 = (((cbMatDynParam._m0[15u].x - _637) * cbMatDynParam._m0[15u].w) * _867) + _637;
    float _883 = ((_867 * cbMatDynParam._m0[16u].z) * (cbMatDynParam._m0[16u].x - _850)) + _850;
    uint _907 = uint(roundEven(NORMAL.w)) * 13u;
    uint _908 = _907 + 9u;
    uint _909 = _908 + uint(cbMatDynParam._m0[0u].w);
    float _915 = (cbMtdParam._m0[0u].x * _645) * cbInstanceData._m0[_909].x;
    float _916 = (cbMtdParam._m0[0u].y * _646) * cbInstanceData._m0[_909].y;
    float _917 = (cbMtdParam._m0[0u].z * _647) * cbInstanceData._m0[_909].z;
    float _4295 = isnan(0.0) ? _915 : (isnan(_915) ? 0.0 : max(_915, 0.0));
    float _918 = isnan(1.0) ? _4295 : (isnan(_4295) ? 1.0 : min(_4295, 1.0));
    float _4306 = isnan(0.0) ? _916 : (isnan(_916) ? 0.0 : max(_916, 0.0));
    float _919 = isnan(1.0) ? _4306 : (isnan(_4306) ? 1.0 : min(_4306, 1.0));
    float _4317 = isnan(0.0) ? _917 : (isnan(_917) ? 0.0 : max(_917, 0.0));
    float _920 = isnan(1.0) ? _4317 : (isnan(_4317) ? 1.0 : min(_4317, 1.0));
    vec4 _921 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _926 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _937 = (((_926.x - _875) + (_926.w * _875)) * cbMtdParam._m0[3u].x) + _875;
    float _950 = (cbMtdParam._m0[3u].x * (((_918 * _810) - _918) + _921.x)) + _918;
    float _951 = (cbMtdParam._m0[3u].x * (((_919 * _810) - _919) + _921.y)) + _919;
    float _952 = (cbMtdParam._m0[3u].x * (((_920 * _810) - _920) + _921.z)) + _920;
    vec4 _953 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _966 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3((_875 * (_645 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625, (_875 * (_646 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625, (_875 * (_647 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * _953.z;
    float _970 = _966 * cbMatDynParam._m0[13u].w;
    float _980 = (_970 * (cbMatDynParam._m0[13u].x - _950)) + _950;
    float _981 = (_970 * (cbMatDynParam._m0[13u].y - _951)) + _951;
    float _982 = (_970 * (cbMatDynParam._m0[13u].z - _952)) + _952;
    float _990 = ((_966 * cbMatDynParam._m0[15u].w) * (cbMatDynParam._m0[15u].x - _937)) + _937;
    float _991 = 1.0 - _990;
    float _992 = _991 * _980;
    float _993 = _991 * _981;
    float _994 = _991 * _982;
    float _998 = (_980 + (-0.039999999105930328369140625)) * _990;
    float _999 = (_981 + (-0.039999999105930328369140625)) * _990;
    float _1000 = (_982 + (-0.039999999105930328369140625)) * _990;
    float _1001 = _998 + 0.039999999105930328369140625;
    float _1002 = _999 + 0.039999999105930328369140625;
    float _1003 = _1000 + 0.039999999105930328369140625;
    vec4 _1012 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _805, cbSceneParam._m0[86u].y * _806));
    float _1015 = _1012.x * TEXCOORD_4;
    float _1016 = _658 * 2.0;
    float _1020 = (_1016 * _629) - _655;
    float _1021 = (_1016 * _630) - _656;
    float _1022 = (_1016 * _631) - _657;
    float _1023 = abs(_740);
    float _4328 = isnan(0.0) ? _1023 : (isnan(_1023) ? 0.0 : max(_1023, 0.0));
    float _1025 = sqrt(_883);
    float _1036 = exp2((_1025 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4328 : (isnan(_4328) ? 1.0 : min(_4328, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1025 * 3.0));
    float _1042 = (1.0 - _1036) * ((_1025 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1043 = _1036 * _1025;
    float _1071 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1075 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1079 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1410;
    float _1412;
    float _1413;
    float _1414;
    float _1415;
    float _1416;
    float _1417;
    float _1418;
    float _1419;
    float _1420;
    float _1421;
    float _1422;
    float _1423;
    float _1424;
    float _1425;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1135 = fma(_1079, cbModelParam._m0[26u].z, fma(_1075, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1071));
        float _1139 = fma(_1079, cbModelParam._m0[27u].z, fma(_1075, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1071));
        float _1143 = fma(_1079, cbModelParam._m0[28u].z, fma(_1075, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1071));
        float _1168 = _1071 + _629;
        float _1169 = _1075 + _630;
        float _1170 = _1079 + _631;
        float _1180 = fma(_1170, cbModelParam._m0[26u].z, fma(_1169, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1168)) - _1135;
        float _1181 = fma(_1170, cbModelParam._m0[27u].z, fma(_1169, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1168)) - _1139;
        float _1182 = fma(_1170, cbModelParam._m0[28u].z, fma(_1169, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1168)) - _1143;
        float _1186 = inversesqrt(dot(vec3(_1180, _1181, _1182), vec3(_1180, _1181, _1182)));
        float _1199 = ((_1186 * _1180) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1135 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1200 = ((_1186 * _1181) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1139 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1201 = ((_1186 * _1182) / cbModelParam._m0[34u].z) + ((((((_1143 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1204 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1199, _1200, _1201), 0.0);
        vec4 _1211 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1199, _1200, _1201), 0.0);
        vec4 _1218 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1199, _1200, _1201), 0.0);
        vec4 _1225 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1199, _1200, _1201), 0.0);
        float _1238 = exp2((_1204.w + (-0.5)) * 20.0) * 2.0;
        float _1239 = _1238 * (_1204.x + (-0.5));
        float _1240 = _1238 * (_1204.y + (-0.5));
        float _1241 = _1238 * (_1204.z + (-0.5));
        float _1248 = exp2((_1211.w + (-0.5)) * 20.0) * 2.0;
        float _1249 = _1248 * (_1211.x + (-0.5));
        float _1250 = _1248 * (_1211.y + (-0.5));
        float _1251 = _1248 * (_1211.z + (-0.5));
        float _1258 = exp2((_1218.w + (-0.5)) * 20.0) * 2.0;
        float _1259 = _1258 * (_1218.x + (-0.5));
        float _1260 = _1258 * (_1218.y + (-0.5));
        float _1261 = _1258 * (_1218.z + (-0.5));
        float _1268 = exp2((_1225.w + (-0.5)) * 20.0) * 2.0;
        float _1269 = _1268 * (_1225.x + (-0.5));
        float _1270 = _1268 * (_1225.y + (-0.5));
        float _1271 = _1268 * (_1225.z + (-0.5));
        float _1272 = isnan(0.0) ? _1269 : (isnan(_1269) ? 0.0 : max(_1269, 0.0));
        float _1273 = isnan(0.0) ? _1270 : (isnan(_1270) ? 0.0 : max(_1270, 0.0));
        float _1274 = isnan(0.0) ? _1271 : (isnan(_1271) ? 0.0 : max(_1271, 0.0));
        float _1275 = _1239 * 0.5;
        float _1276 = _1249 * 0.5;
        float _1277 = _1259 * 0.5;
        float _1278 = dot(vec3(_1275, _1276, _1277), vec3(_1275, _1276, _1277));
        float _1283 = (_1278 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1278);
        float _1292 = (dot(vec3(_629, _630, _631), vec3(_1283 * _1275, _1283 * _1276, _1283 * _1277)) + 1.0) * 0.5;
        float _4354 = isnan(0.0) ? _1292 : (isnan(_1292) ? 0.0 : max(_1292, 0.0));
        float _1302 = sqrt(((_1276 * _1276) + (_1275 * _1275)) + (_1277 * _1277)) / (_1272 + 9.9999997473787516355514526367188e-06);
        float _4365 = isnan(0.0) ? _1302 : (isnan(_1302) ? 0.0 : max(_1302, 0.0));
        float _1303 = isnan(1.0) ? _4365 : (isnan(_4365) ? 1.0 : min(_4365, 1.0));
        float _1304 = _1303 * 2.0;
        float _1308 = (1.0 - _1303) / (_1303 + 1.0);
        float _4376 = isnan(0.0) ? _1308 : (isnan(_1308) ? 0.0 : max(_1308, 0.0));
        float _1309 = isnan(1.0) ? _4376 : (isnan(_4376) ? 1.0 : min(_4376, 1.0));
        float _1318 = ((((1.0 - _1309) * (_1304 + 2.0)) * exp2(log2(isnan(1.0) ? _4354 : (isnan(_4354) ? 1.0 : min(_4354, 1.0))) * (_1304 + 1.0))) + _1309) * _1272;
        float _1319 = _1240 * 0.5;
        float _1320 = _1250 * 0.5;
        float _1321 = _1260 * 0.5;
        float _1322 = dot(vec3(_1319, _1320, _1321), vec3(_1319, _1320, _1321));
        float _1327 = (_1322 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1322);
        float _1335 = (dot(vec3(_629, _630, _631), vec3(_1327 * _1319, _1327 * _1320, _1327 * _1321)) + 1.0) * 0.5;
        float _4387 = isnan(0.0) ? _1335 : (isnan(_1335) ? 0.0 : max(_1335, 0.0));
        float _1344 = sqrt(((_1320 * _1320) + (_1319 * _1319)) + (_1321 * _1321)) / (_1273 + 9.9999997473787516355514526367188e-06);
        float _4398 = isnan(0.0) ? _1344 : (isnan(_1344) ? 0.0 : max(_1344, 0.0));
        float _1345 = isnan(1.0) ? _4398 : (isnan(_4398) ? 1.0 : min(_4398, 1.0));
        float _1346 = _1345 * 2.0;
        float _1350 = (1.0 - _1345) / (_1345 + 1.0);
        float _4409 = isnan(0.0) ? _1350 : (isnan(_1350) ? 0.0 : max(_1350, 0.0));
        float _1351 = isnan(1.0) ? _4409 : (isnan(_4409) ? 1.0 : min(_4409, 1.0));
        float _1360 = ((((1.0 - _1351) * (_1346 + 2.0)) * exp2(log2(isnan(1.0) ? _4387 : (isnan(_4387) ? 1.0 : min(_4387, 1.0))) * (_1346 + 1.0))) + _1351) * _1273;
        float _1361 = _1241 * 0.5;
        float _1362 = _1251 * 0.5;
        float _1363 = _1261 * 0.5;
        float _1364 = dot(vec3(_1361, _1362, _1363), vec3(_1361, _1362, _1363));
        float _1369 = (_1364 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1364);
        float _1377 = (dot(vec3(_629, _630, _631), vec3(_1369 * _1361, _1369 * _1362, _1369 * _1363)) + 1.0) * 0.5;
        float _4420 = isnan(0.0) ? _1377 : (isnan(_1377) ? 0.0 : max(_1377, 0.0));
        float _1386 = sqrt(((_1362 * _1362) + (_1361 * _1361)) + (_1363 * _1363)) / (_1274 + 9.9999997473787516355514526367188e-06);
        float _4431 = isnan(0.0) ? _1386 : (isnan(_1386) ? 0.0 : max(_1386, 0.0));
        float _1387 = isnan(1.0) ? _4431 : (isnan(_4431) ? 1.0 : min(_4431, 1.0));
        float _1388 = _1387 * 2.0;
        float _1392 = (1.0 - _1387) / (_1387 + 1.0);
        float _4442 = isnan(0.0) ? _1392 : (isnan(_1392) ? 0.0 : max(_1392, 0.0));
        float _1393 = isnan(1.0) ? _4442 : (isnan(_4442) ? 1.0 : min(_4442, 1.0));
        float _1402 = ((((1.0 - _1393) * (_1388 + 2.0)) * exp2(log2(isnan(1.0) ? _4420 : (isnan(_4420) ? 1.0 : min(_4420, 1.0))) * (_1388 + 1.0))) + _1393) * _1274;
        _1410 = _1241;
        _1412 = _1240;
        _1413 = _1239;
        _1414 = _1251;
        _1415 = _1250;
        _1416 = _1249;
        _1417 = _1261;
        _1418 = _1260;
        _1419 = _1259;
        _1420 = _1274;
        _1421 = _1273;
        _1422 = _1272;
        _1423 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1318 : (isnan(_1318) ? 0.0 : max(_1318, 0.0)));
        _1424 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1360 : (isnan(_1360) ? 0.0 : max(_1360, 0.0)));
        _1425 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1402 : (isnan(_1402) ? 0.0 : max(_1402, 0.0)));
    }
    else
    {
        _1410 = _1411;
        _1412 = _1411;
        _1413 = _1411;
        _1414 = _1411;
        _1415 = _1411;
        _1416 = _1411;
        _1417 = _1411;
        _1418 = _1411;
        _1419 = _1411;
        _1420 = _1411;
        _1421 = _1411;
        _1422 = _1411;
        _1423 = 0.0;
        _1424 = 0.0;
        _1425 = 0.0;
    }
    float _1723;
    float _1724;
    float _1725;
    float _1726;
    float _1727;
    float _1728;
    float _1729;
    float _1730;
    float _1731;
    float _1732;
    float _1733;
    float _1734;
    float _1735;
    float _1736;
    float _1737;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1454 = fma(_1079, cbModelParam._m0[30u].z, fma(_1075, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1071));
        float _1458 = fma(_1079, cbModelParam._m0[31u].z, fma(_1075, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1071));
        float _1462 = fma(_1079, cbModelParam._m0[32u].z, fma(_1075, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1071));
        float _1485 = _1071 + _629;
        float _1486 = _1075 + _630;
        float _1487 = _1079 + _631;
        float _1497 = fma(_1487, cbModelParam._m0[30u].z, fma(_1486, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1485)) - _1454;
        float _1498 = fma(_1487, cbModelParam._m0[31u].z, fma(_1486, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1485)) - _1458;
        float _1499 = fma(_1487, cbModelParam._m0[32u].z, fma(_1486, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1485)) - _1462;
        float _1503 = inversesqrt(dot(vec3(_1497, _1498, _1499), vec3(_1497, _1498, _1499)));
        float _1516 = ((_1503 * _1497) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1454 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1517 = ((_1503 * _1498) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1458 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1518 = ((_1503 * _1499) / cbModelParam._m0[35u].z) + ((((((_1462 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1520 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1516, _1517, _1518), 0.0);
        vec4 _1527 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1516, _1517, _1518), 0.0);
        vec4 _1534 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1516, _1517, _1518), 0.0);
        vec4 _1541 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1516, _1517, _1518), 0.0);
        float _1553 = exp2((_1520.w + (-0.5)) * 20.0) * 2.0;
        float _1554 = _1553 * (_1520.x + (-0.5));
        float _1555 = _1553 * (_1520.y + (-0.5));
        float _1556 = _1553 * (_1520.z + (-0.5));
        float _1563 = exp2((_1527.w + (-0.5)) * 20.0) * 2.0;
        float _1564 = _1563 * (_1527.x + (-0.5));
        float _1565 = _1563 * (_1527.y + (-0.5));
        float _1566 = _1563 * (_1527.z + (-0.5));
        float _1573 = exp2((_1534.w + (-0.5)) * 20.0) * 2.0;
        float _1574 = _1573 * (_1534.x + (-0.5));
        float _1575 = _1573 * (_1534.y + (-0.5));
        float _1576 = _1573 * (_1534.z + (-0.5));
        float _1583 = exp2((_1541.w + (-0.5)) * 20.0) * 2.0;
        float _1584 = _1583 * (_1541.x + (-0.5));
        float _1585 = _1583 * (_1541.y + (-0.5));
        float _1586 = _1583 * (_1541.z + (-0.5));
        float _1587 = isnan(0.0) ? _1584 : (isnan(_1584) ? 0.0 : max(_1584, 0.0));
        float _1588 = isnan(0.0) ? _1585 : (isnan(_1585) ? 0.0 : max(_1585, 0.0));
        float _1589 = isnan(0.0) ? _1586 : (isnan(_1586) ? 0.0 : max(_1586, 0.0));
        float _1590 = _1554 * 0.5;
        float _1591 = _1564 * 0.5;
        float _1592 = _1574 * 0.5;
        float _1593 = dot(vec3(_1590, _1591, _1592), vec3(_1590, _1591, _1592));
        float _1598 = (_1593 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1593);
        float _1606 = (dot(vec3(_629, _630, _631), vec3(_1598 * _1590, _1598 * _1591, _1598 * _1592)) + 1.0) * 0.5;
        float _4483 = isnan(0.0) ? _1606 : (isnan(_1606) ? 0.0 : max(_1606, 0.0));
        float _1615 = sqrt(((_1591 * _1591) + (_1590 * _1590)) + (_1592 * _1592)) / (_1587 + 9.9999997473787516355514526367188e-06);
        float _4494 = isnan(0.0) ? _1615 : (isnan(_1615) ? 0.0 : max(_1615, 0.0));
        float _1616 = isnan(1.0) ? _4494 : (isnan(_4494) ? 1.0 : min(_4494, 1.0));
        float _1617 = _1616 * 2.0;
        float _1621 = (1.0 - _1616) / (_1616 + 1.0);
        float _4505 = isnan(0.0) ? _1621 : (isnan(_1621) ? 0.0 : max(_1621, 0.0));
        float _1622 = isnan(1.0) ? _4505 : (isnan(_4505) ? 1.0 : min(_4505, 1.0));
        float _1631 = ((((1.0 - _1622) * (_1617 + 2.0)) * exp2(log2(isnan(1.0) ? _4483 : (isnan(_4483) ? 1.0 : min(_4483, 1.0))) * (_1617 + 1.0))) + _1622) * _1587;
        float _1632 = _1555 * 0.5;
        float _1633 = _1565 * 0.5;
        float _1634 = _1575 * 0.5;
        float _1635 = dot(vec3(_1632, _1633, _1634), vec3(_1632, _1633, _1634));
        float _1640 = (_1635 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1635);
        float _1648 = (dot(vec3(_629, _630, _631), vec3(_1640 * _1632, _1640 * _1633, _1640 * _1634)) + 1.0) * 0.5;
        float _4516 = isnan(0.0) ? _1648 : (isnan(_1648) ? 0.0 : max(_1648, 0.0));
        float _1657 = sqrt(((_1633 * _1633) + (_1632 * _1632)) + (_1634 * _1634)) / (_1588 + 9.9999997473787516355514526367188e-06);
        float _4527 = isnan(0.0) ? _1657 : (isnan(_1657) ? 0.0 : max(_1657, 0.0));
        float _1658 = isnan(1.0) ? _4527 : (isnan(_4527) ? 1.0 : min(_4527, 1.0));
        float _1659 = _1658 * 2.0;
        float _1663 = (1.0 - _1658) / (_1658 + 1.0);
        float _4538 = isnan(0.0) ? _1663 : (isnan(_1663) ? 0.0 : max(_1663, 0.0));
        float _1664 = isnan(1.0) ? _4538 : (isnan(_4538) ? 1.0 : min(_4538, 1.0));
        float _1673 = ((((1.0 - _1664) * (_1659 + 2.0)) * exp2(log2(isnan(1.0) ? _4516 : (isnan(_4516) ? 1.0 : min(_4516, 1.0))) * (_1659 + 1.0))) + _1664) * _1588;
        float _1674 = _1556 * 0.5;
        float _1675 = _1566 * 0.5;
        float _1676 = _1576 * 0.5;
        float _1677 = dot(vec3(_1674, _1675, _1676), vec3(_1674, _1675, _1676));
        float _1682 = (_1677 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1677);
        float _1690 = (dot(vec3(_629, _630, _631), vec3(_1682 * _1674, _1682 * _1675, _1682 * _1676)) + 1.0) * 0.5;
        float _4549 = isnan(0.0) ? _1690 : (isnan(_1690) ? 0.0 : max(_1690, 0.0));
        float _1699 = sqrt(((_1675 * _1675) + (_1674 * _1674)) + (_1676 * _1676)) / (_1589 + 9.9999997473787516355514526367188e-06);
        float _4560 = isnan(0.0) ? _1699 : (isnan(_1699) ? 0.0 : max(_1699, 0.0));
        float _1700 = isnan(1.0) ? _4560 : (isnan(_4560) ? 1.0 : min(_4560, 1.0));
        float _1701 = _1700 * 2.0;
        float _1705 = (1.0 - _1700) / (_1700 + 1.0);
        float _4571 = isnan(0.0) ? _1705 : (isnan(_1705) ? 0.0 : max(_1705, 0.0));
        float _1706 = isnan(1.0) ? _4571 : (isnan(_4571) ? 1.0 : min(_4571, 1.0));
        float _1715 = ((((1.0 - _1706) * (_1701 + 2.0)) * exp2(log2(isnan(1.0) ? _4549 : (isnan(_4549) ? 1.0 : min(_4549, 1.0))) * (_1701 + 1.0))) + _1706) * _1589;
        _1723 = _1556;
        _1724 = _1555;
        _1725 = _1554;
        _1726 = _1566;
        _1727 = _1565;
        _1728 = _1564;
        _1729 = _1576;
        _1730 = _1575;
        _1731 = _1574;
        _1732 = _1589;
        _1733 = _1588;
        _1734 = _1587;
        _1735 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1631 : (isnan(_1631) ? 0.0 : max(_1631, 0.0)));
        _1736 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1673 : (isnan(_1673) ? 0.0 : max(_1673, 0.0)));
        _1737 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1715 : (isnan(_1715) ? 0.0 : max(_1715, 0.0)));
    }
    else
    {
        _1723 = _1411;
        _1724 = _1411;
        _1725 = _1411;
        _1726 = _1411;
        _1727 = _1411;
        _1728 = _1411;
        _1729 = _1411;
        _1730 = _1411;
        _1731 = _1411;
        _1732 = _1411;
        _1733 = _1411;
        _1734 = _1411;
        _1735 = 0.0;
        _1736 = 0.0;
        _1737 = 0.0;
    }
    float _1747 = (cbModelParam._m0[1u].x * (_1735 - _1423)) + _1423;
    float _1748 = (cbModelParam._m0[1u].x * (_1736 - _1424)) + _1424;
    float _1749 = (cbModelParam._m0[1u].x * (_1737 - _1425)) + _1425;
    float _1770 = fma(_1749, cbSceneParam._m0[89u].z, fma(_1748, cbSceneParam._m0[89u].y, _1747 * cbSceneParam._m0[89u].x));
    float _1773 = fma(_1749, cbSceneParam._m0[90u].z, fma(_1748, cbSceneParam._m0[90u].y, _1747 * cbSceneParam._m0[90u].x));
    float _1776 = fma(_1749, cbSceneParam._m0[91u].z, fma(_1748, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1747));
    float _1791 = _1020 * 0.5;
    float _1792 = _1021 * 0.5;
    float _1793 = _1022 * 0.5;
    float _1794 = dot(vec4(_1791, _1792, _1793, 1.0), vec4(_1725, _1728, _1731, _1734));
    float _1797 = dot(vec4(_1791, _1792, _1793, 1.0), vec4(_1724, _1727, _1730, _1733));
    float _1800 = dot(vec4(_1791, _1792, _1793, 1.0), vec4(_1723, _1726, _1729, _1732));
    float _1831;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1807 = dot(vec4(_1791, _1792, _1793, 1.0), vec4(_1410, _1414, _1417, _1420));
        float _1811 = dot(vec4(_1791, _1792, _1793, 1.0), vec4(_1412, _1415, _1418, _1421));
        float _1815 = dot(vec4(_1791, _1792, _1793, 1.0), vec4(_1413, _1416, _1419, _1422));
        float _1822 = dot(vec4(cbModelParam._m0[39u]), vec4(_1791, _1792, _1793, 1.0));
        _1831 = dot(vec3(isnan(0.0) ? _1815 : (isnan(_1815) ? 0.0 : max(_1815, 0.0)), isnan(0.0) ? _1811 : (isnan(_1811) ? 0.0 : max(_1811, 0.0)), isnan(0.0) ? _1807 : (isnan(_1807) ? 0.0 : max(_1807, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1822) ? 0.0 : (isnan(0.0) ? _1822 : max(0.0, _1822))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1831 = 1.0;
    }
    float _1842;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1833 = dot(vec4(cbModelParam._m0[40u]), vec4(_1791, _1792, _1793, 1.0));
        _1842 = dot(vec3(isnan(0.0) ? _1794 : (isnan(_1794) ? 0.0 : max(_1794, 0.0)), isnan(0.0) ? _1797 : (isnan(_1797) ? 0.0 : max(_1797, 0.0)), isnan(0.0) ? _1800 : (isnan(_1800) ? 0.0 : max(_1800, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1833) ? 0.0 : (isnan(0.0) ? _1833 : max(0.0, _1833))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1842 = 1.0;
    }
    float _1846 = (_1842 * cbModelParam._m0[1u].x) + (_1831 * (1.0 - cbModelParam._m0[1u].x));
    float _1856 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _883);
    float _1857 = isnan(_1856) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1856 : min(cbModelParam._m0[25u].z, _1856));
    float _1937;
    float _1939;
    float _1941;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1904 = fma(_1079, cbModelParam._m0[13u].z, fma(_1075, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1071)) + cbModelParam._m0[13u].w;
        float _1908 = fma(_1079, cbModelParam._m0[14u].z, fma(_1075, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1071)) + cbModelParam._m0[14u].w;
        float _1912 = fma(_1079, cbModelParam._m0[15u].z, fma(_1075, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1071)) + cbModelParam._m0[15u].w;
        float _1915 = fma(_1022, cbModelParam._m0[13u].z, fma(_1021, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1020));
        float _1918 = fma(_1022, cbModelParam._m0[14u].z, fma(_1021, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1020));
        float _1921 = fma(_1022, cbModelParam._m0[15u].z, fma(_1021, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1020));
        float _1949;
        if (_1915 > 0.0)
        {
            _1949 = abs((1.0 - _1904) / _1915);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1915 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1904 + 1.0) / _1915);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1949 = frontier_phi_19_17_ladder;
        }
        float _2122;
        if (_1918 > 0.0)
        {
            _2122 = abs((1.0 - _1908) / _1918);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1918 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1908 + 1.0) / _1918);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2122 = frontier_phi_28_24_ladder;
        }
        float _2417;
        if (_1921 > 0.0)
        {
            _2417 = abs((1.0 - _1912) / _1921);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1921 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1912 + 1.0) / _1921);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2417 = frontier_phi_40_35_ladder;
        }
        float _2419 = isnan(_2122) ? _1949 : (isnan(_1949) ? _2122 : min(_1949, _2122));
        float _2420 = isnan(_2417) ? _2419 : (isnan(_2419) ? _2417 : min(_2419, _2417));
        float _2424 = (_2420 * _1915) + _1904;
        float _2425 = (_2420 * _1918) + _1908;
        float _2426 = (_2420 * _1921) + _1912;
        float _2427 = _2420 * 9.9999997473787516355514526367188e-05;
        float _2429 = (-1.0) - _2427;
        float _2431 = _2427 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2426 > _2431) || ((_2426 < _2429) || ((_2425 > _2431) || ((_2425 < _2429) || ((_2424 < _2429) || (_2424 > _2431))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2571 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2426, cbModelParam._m0[9u].z, fma(_2425, cbModelParam._m0[9u].y, _2424 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2426, cbModelParam._m0[10u].z, fma(_2425, cbModelParam._m0[10u].y, _2424 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2426, cbModelParam._m0[11u].z, fma(_2425, cbModelParam._m0[11u].y, _2424 * cbModelParam._m0[11u].x))), _1857);
            frontier_phi_18_40_ladder = _2571.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2571.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2571.x * cbModelParam._m0[1u].y;
        }
        _1937 = frontier_phi_18_40_ladder_2;
        _1939 = frontier_phi_18_40_ladder_1;
        _1941 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1925 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1020, _1021, _1022), _1857);
        _1937 = _1925.x * cbModelParam._m0[1u].y;
        _1939 = _1925.y * cbModelParam._m0[1u].y;
        _1941 = _1925.z * cbModelParam._m0[1u].y;
    }
    float _1945 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _883);
    float _1946 = isnan(_1945) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1945 : min(cbModelParam._m0[25u].w, _1945));
    float _2037;
    float _2039;
    float _2041;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2001 = fma(_1079, cbModelParam._m0[21u].z, fma(_1075, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1071)) + cbModelParam._m0[21u].w;
        float _2005 = fma(_1079, cbModelParam._m0[22u].z, fma(_1075, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1071)) + cbModelParam._m0[22u].w;
        float _2009 = fma(_1079, cbModelParam._m0[23u].z, fma(_1075, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1071)) + cbModelParam._m0[23u].w;
        float _2012 = fma(_1022, cbModelParam._m0[21u].z, fma(_1021, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1020));
        float _2015 = fma(_1022, cbModelParam._m0[22u].z, fma(_1021, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1020));
        float _2018 = fma(_1022, cbModelParam._m0[23u].z, fma(_1021, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1020));
        float _2127;
        if (_2012 > 0.0)
        {
            _2127 = abs((1.0 - _2001) / _2012);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_2012 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_2001 + 1.0) / _2012);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _2127 = frontier_phi_30_26_ladder;
        }
        float _2444;
        if (_2015 > 0.0)
        {
            _2444 = abs((1.0 - _2005) / _2015);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_2015 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_2005 + 1.0) / _2015);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2444 = frontier_phi_42_37_ladder;
        }
        float _2782;
        if (_2018 > 0.0)
        {
            _2782 = abs((1.0 - _2009) / _2018);
        }
        else
        {
            float frontier_phi_52_49_ladder;
            if (_2018 < 0.0)
            {
                frontier_phi_52_49_ladder = abs((_2009 + 1.0) / _2018);
            }
            else
            {
                frontier_phi_52_49_ladder = 5000.0;
            }
            _2782 = frontier_phi_52_49_ladder;
        }
        float _2784 = isnan(_2444) ? _2127 : (isnan(_2127) ? _2444 : min(_2127, _2444));
        float _2785 = isnan(_2782) ? _2784 : (isnan(_2784) ? _2782 : min(_2784, _2782));
        float _2789 = (_2785 * _2012) + _2001;
        float _2790 = (_2785 * _2015) + _2005;
        float _2791 = (_2785 * _2018) + _2009;
        float _2792 = _2785 * 9.9999997473787516355514526367188e-05;
        float _2793 = (-1.0) - _2792;
        float _2795 = _2792 + 1.0;
        float frontier_phi_27_52_ladder;
        float frontier_phi_27_52_ladder_1;
        float frontier_phi_27_52_ladder_2;
        if ((_2791 > _2795) || ((_2791 < _2793) || ((_2790 > _2795) || ((_2790 < _2793) || ((_2789 < _2793) || (_2789 > _2795))))))
        {
            frontier_phi_27_52_ladder = 0.0;
            frontier_phi_27_52_ladder_1 = 0.0;
            frontier_phi_27_52_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2913 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2791, cbModelParam._m0[17u].z, fma(_2790, cbModelParam._m0[17u].y, _2789 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2791, cbModelParam._m0[18u].z, fma(_2790, cbModelParam._m0[18u].y, _2789 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2791, cbModelParam._m0[19u].z, fma(_2790, cbModelParam._m0[19u].y, _2789 * cbModelParam._m0[19u].x))), _1946);
            frontier_phi_27_52_ladder = _2913.z * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_1 = _2913.y * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_2 = _2913.x * cbModelParam._m0[1u].z;
        }
        _2037 = frontier_phi_27_52_ladder_2;
        _2039 = frontier_phi_27_52_ladder_1;
        _2041 = frontier_phi_27_52_ladder;
    }
    else
    {
        vec4 _2021 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1020, _1021, _1022), _1946);
        _2037 = _2021.x * cbModelParam._m0[1u].z;
        _2039 = _2021.y * cbModelParam._m0[1u].z;
        _2041 = _2021.z * cbModelParam._m0[1u].z;
    }
    float _2054 = (((_1042 * _1001) + _1043) * _1015) * ((cbModelParam._m0[1u].w * (_2037 - _1937)) + _1937);
    float _2056 = (((_1042 * _1002) + _1043) * _1015) * ((cbModelParam._m0[1u].w * (_2039 - _1939)) + _1939);
    float _2058 = (((_1042 * _1003) + _1043) * _1015) * ((cbModelParam._m0[1u].w * (_2041 - _1941)) + _1941);
    float _2061 = fma(_2058, cbSceneParam._m0[89u].z, fma(_2056, cbSceneParam._m0[89u].y, _2054 * cbSceneParam._m0[89u].x));
    float _2064 = fma(_2058, cbSceneParam._m0[90u].z, fma(_2056, cbSceneParam._m0[90u].y, _2054 * cbSceneParam._m0[90u].x));
    float _2067 = fma(_2058, cbSceneParam._m0[91u].z, fma(_2056, cbSceneParam._m0[91u].y, _2054 * cbSceneParam._m0[91u].x));
    float _2101 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2105 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2109 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2113 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2114 = _2101 / _2113;
    float _2115 = _2105 / _2113;
    float _2116 = _2109 / _2113;
    float _2263;
    float _2264;
    float _2265;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2143 = ((uint(_2116 > cbSceneParam._m0[59u].y) + uint(_2116 > cbSceneParam._m0[59u].x)) + uint(_2116 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2144 = _2143 + 43u;
        uint _2152 = _2143 + 44u;
        uint _2160 = _2143 + 45u;
        uint _2168 = _2143 + 46u;
        float _2179 = fma(_2113, cbSceneParam._m0[_2144].w, fma(_2109, cbSceneParam._m0[_2144].z, fma(_2105, cbSceneParam._m0[_2144].y, _2101 * cbSceneParam._m0[_2144].x)));
        float _2183 = fma(_2113, cbSceneParam._m0[_2152].w, fma(_2109, cbSceneParam._m0[_2152].z, fma(_2105, cbSceneParam._m0[_2152].y, _2101 * cbSceneParam._m0[_2152].x)));
        float _2191 = fma(_2113, cbSceneParam._m0[_2168].w, fma(_2109, cbSceneParam._m0[_2168].z, fma(_2105, cbSceneParam._m0[_2168].y, _2101 * cbSceneParam._m0[_2168].x)));
        float _2196 = cbSceneParam._m0[33u].z * _2191;
        float _2198 = cbSceneParam._m0[33u].w * _2191;
        float _2201 = fma(_2113, cbSceneParam._m0[_2160].w, fma(_2109, cbSceneParam._m0[_2160].z, fma(_2105, cbSceneParam._m0[_2160].y, _2101 * cbSceneParam._m0[_2160].x))) / _2191;
        float _2249 = (cbSceneParam._m0[33u].x - sqrt(((_2115 * _2115) + (_2114 * _2114)) + (_2116 * _2116))) * cbSceneParam._m0[33u].y;
        float _4697 = isnan(0.0) ? _2249 : (isnan(_2249) ? 0.0 : max(_2249, 0.0));
        float _2256 = (isnan(1.0) ? _4697 : (isnan(_4697) ? 1.0 : min(_4697, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2196 + _2179) / _2191, (_2198 + _2183) / _2191), _2201), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2198 + _2179) / _2191, (_2183 - _2196) / _2191), _2201), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2179 - _2196) / _2191, (_2183 - _2198) / _2191), _2201), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2179 - _2198) / _2191, (_2196 + _2183) / _2191), _2201), 0.0)).x), vec4(0.25)));
        _2263 = 1.0 - (_2256 * cbSceneParam._m0[34u].x);
        _2264 = 1.0 - (_2256 * cbSceneParam._m0[34u].y);
        _2265 = 1.0 - (_2256 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2263 = 1.0;
        _2264 = 1.0;
        _2265 = 1.0;
    }
    float _2329;
    float _2331;
    float _2333;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2317 = fma(_2113, cbSceneParam._m0[63u].w, fma(_2109, cbSceneParam._m0[63u].z, fma(_2105, cbSceneParam._m0[63u].y, _2101 * cbSceneParam._m0[63u].x)));
        float _2318 = fma(_2113, cbSceneParam._m0[60u].w, fma(_2109, cbSceneParam._m0[60u].z, fma(_2105, cbSceneParam._m0[60u].y, _2101 * cbSceneParam._m0[60u].x))) / _2317;
        float _2319 = fma(_2113, cbSceneParam._m0[61u].w, fma(_2109, cbSceneParam._m0[61u].z, fma(_2105, cbSceneParam._m0[61u].y, _2101 * cbSceneParam._m0[61u].x))) / _2317;
        float frontier_phi_39_38_ladder;
        float frontier_phi_39_38_ladder_1;
        float frontier_phi_39_38_ladder_2;
        if ((((_2318 >= cbSceneParam._m0[64u].x) && (_2319 >= cbSceneParam._m0[64u].y)) && (_2318 <= cbSceneParam._m0[64u].z)) && (_2319 <= cbSceneParam._m0[64u].w))
        {
            float _2457 = fma(_2113, cbSceneParam._m0[62u].w, fma(_2109, cbSceneParam._m0[62u].z, fma(_2105, cbSceneParam._m0[62u].y, _2101 * cbSceneParam._m0[62u].x))) / _2317;
            float _2461 = isnan(cbSceneParam._m0[41u].w) ? _2457 : (isnan(_2457) ? cbSceneParam._m0[41u].w : max(_2457, cbSceneParam._m0[41u].w));
            float _2504 = (cbSceneParam._m0[33u].x - sqrt(((_2115 * _2115) + (_2114 * _2114)) + (_2116 * _2116))) * cbSceneParam._m0[33u].y;
            float _4713 = isnan(0.0) ? _2504 : (isnan(_2504) ? 0.0 : max(_2504, 0.0));
            float _2511 = (isnan(1.0) ? _4713 : (isnan(_4713) ? 1.0 : min(_4713, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2318, cbSceneParam._m0[33u].w + _2319), _2461), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2318, _2319 - cbSceneParam._m0[33u].z), _2461), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2318 - cbSceneParam._m0[33u].z, _2319 - cbSceneParam._m0[33u].w), _2461), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2318 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2319), _2461), 0.0)).x), vec4(0.25)));
            float _2515 = 1.0 - (_2511 * cbSceneParam._m0[34u].x);
            float _2516 = 1.0 - (_2511 * cbSceneParam._m0[34u].y);
            float _2517 = 1.0 - (_2511 * cbSceneParam._m0[34u].z);
            frontier_phi_39_38_ladder = isnan(_2516) ? _2264 : (isnan(_2264) ? _2516 : min(_2264, _2516));
            frontier_phi_39_38_ladder_1 = isnan(_2515) ? _2263 : (isnan(_2263) ? _2515 : min(_2263, _2515));
            frontier_phi_39_38_ladder_2 = isnan(_2517) ? _2265 : (isnan(_2265) ? _2517 : min(_2265, _2517));
        }
        else
        {
            frontier_phi_39_38_ladder = _2264;
            frontier_phi_39_38_ladder_1 = _2263;
            frontier_phi_39_38_ladder_2 = _2265;
        }
        _2329 = frontier_phi_39_38_ladder_1;
        _2331 = frontier_phi_39_38_ladder;
        _2333 = frontier_phi_39_38_ladder_2;
    }
    else
    {
        _2329 = _2263;
        _2331 = _2264;
        _2333 = _2265;
    }
    uvec4 _2338 = floatBitsToUint(cbInstanceData._m0[_907 + 5u]);
    uint _2340 = _2338.x * 14u;
    uint _2341 = _2340 + 13u;
    float _2348 = _1015 + (-1.0);
    float _2353 = (cbLight._m0[_2341].x * _2348) + 1.0;
    float _2354 = (cbLight._m0[_2341].y * _2348) + 1.0;
    float _2355 = (cbLight._m0[_2341].z * _2348) + 1.0;
    float _2356 = (cbLight._m0[_2341].w * _2348) + 1.0;
    uint _2357 = _2340 + 5u;
    float _2363 = isnan(1.0) ? _2354 : (isnan(_2354) ? 1.0 : min(_2354, 1.0));
    uint _2367 = _2340 + 4u;
    float _2376 = isnan(1.0) ? _2353 : (isnan(_2353) ? 1.0 : min(_2353, 1.0));
    uint _2380 = _2340 | 1u;
    float _2391 = dot(vec3(cbLight._m0[_2340].xyz), vec3(_629, _630, _631));
    float _2394 = dot(vec3(cbLight._m0[_2380].xyz), vec3(_629, _630, _631));
    float _4749 = isnan(0.0) ? _2391 : (isnan(_2391) ? 0.0 : max(_2391, 0.0));
    float _4760 = isnan(0.0) ? _2394 : (isnan(_2394) ? 0.0 : max(_2394, 0.0));
    float _2399 = (isnan(1.0) ? _4749 : (isnan(_4749) ? 1.0 : min(_4749, 1.0))) * 0.3183098733425140380859375;
    float _2401 = (isnan(1.0) ? _4760 : (isnan(_4760) ? 1.0 : min(_4760, 1.0))) * 0.3183098733425140380859375;
    float _2408 = ((cbLight._m0[_2357].x * _2363) * _2401) + (((cbLight._m0[_2367].x * _2329) * _2376) * _2399);
    float _2409 = ((_2363 * cbLight._m0[_2357].y) * _2401) + (((cbLight._m0[_2367].y * _2331) * _2376) * _2399);
    float _2410 = ((_2363 * cbLight._m0[_2357].z) * _2401) + (((cbLight._m0[_2367].z * _2333) * _2376) * _2399);
    uvec4 _2414 = floatBitsToUint(cbLight._m0[_2340 + 12u]);
    bool _2416 = _2414.x == 0u;
    float _2518;
    float _2520;
    float _2522;
    if (_2416)
    {
        _2518 = _2408;
        _2520 = _2409;
        _2522 = _2410;
    }
    else
    {
        uint _2526 = _2340 + 6u;
        float _2542 = (dot(vec3(cbLight._m0[_2340 + 2u].xyz), vec3(_629, _630, _631)) * 0.5) + 0.5;
        float _2543 = _2542 * _2542;
        float _4771 = isnan(0.0) ? _2543 : (isnan(_2543) ? 0.0 : max(_2543, 0.0));
        float _2544 = isnan(1.0) ? _4771 : (isnan(_4771) ? 1.0 : min(_4771, 1.0));
        float _2545 = isnan(1.0) ? _2355 : (isnan(_2355) ? 1.0 : min(_2355, 1.0));
        _2518 = (((cbLight._m0[_2526].x * 0.3183098733425140380859375) * _2544) * _2545) + _2408;
        _2520 = (((cbLight._m0[_2526].y * 0.3183098733425140380859375) * _2544) * _2545) + _2409;
        _2522 = (((cbLight._m0[_2526].z * 0.3183098733425140380859375) * _2544) * _2545) + _2410;
    }
    bool _2525 = _2414.y == 0u;
    float _2580;
    float _2582;
    float _2584;
    if (_2525)
    {
        _2580 = _2518;
        _2582 = _2520;
        _2584 = _2522;
    }
    else
    {
        uint _2753 = _2340 + 7u;
        float _2769 = (dot(vec3(cbLight._m0[_2340 + 3u].xyz), vec3(_629, _630, _631)) * 0.5) + 0.5;
        float _2770 = _2769 * _2769;
        float _4787 = isnan(0.0) ? _2770 : (isnan(_2770) ? 0.0 : max(_2770, 0.0));
        float _2771 = isnan(1.0) ? _4787 : (isnan(_4787) ? 1.0 : min(_4787, 1.0));
        float _2772 = isnan(1.0) ? _2356 : (isnan(_2356) ? 1.0 : min(_2356, 1.0));
        _2580 = (((cbLight._m0[_2753].x * 0.3183098733425140380859375) * _2771) * _2772) + _2518;
        _2582 = (((cbLight._m0[_2753].y * 0.3183098733425140380859375) * _2771) * _2772) + _2520;
        _2584 = (((cbLight._m0[_2753].z * 0.3183098733425140380859375) * _2771) * _2772) + _2522;
    }
    uint _2587 = _2340 + 8u;
    float _2600 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2340].w)) * _883) * 0.949999988079071044921875);
    float _2601 = _2600 * _2600;
    float _2602 = cbLight._m0[_2340].x + _655;
    float _2603 = cbLight._m0[_2340].y + _656;
    float _2604 = cbLight._m0[_2340].z + _657;
    float _2608 = inversesqrt(dot(vec3(_2602, _2603, _2604), vec3(_2602, _2603, _2604)));
    float _2609 = _2608 * _2602;
    float _2610 = _2608 * _2603;
    float _2611 = _2608 * _2604;
    float _2612 = dot(vec3(_629, _630, _631), vec3(cbLight._m0[_2340].xyz));
    float _4803 = isnan(0.0) ? _2612 : (isnan(_2612) ? 0.0 : max(_2612, 0.0));
    float _2615 = isnan(1.0) ? _4803 : (isnan(_4803) ? 1.0 : min(_4803, 1.0));
    float _4814 = isnan(0.0) ? _658 : (isnan(_658) ? 0.0 : max(_658, 0.0));
    float _2616 = isnan(1.0) ? _4814 : (isnan(_4814) ? 1.0 : min(_4814, 1.0));
    float _2617 = dot(vec3(_629, _630, _631), vec3(_2609, _2610, _2611));
    float _4825 = isnan(0.0) ? _2617 : (isnan(_2617) ? 0.0 : max(_2617, 0.0));
    float _2620 = isnan(1.0) ? _4825 : (isnan(_4825) ? 1.0 : min(_4825, 1.0));
    float _2621 = dot(vec3(cbLight._m0[_2340].xyz), vec3(_2609, _2610, _2611));
    float _4836 = isnan(0.0) ? _2621 : (isnan(_2621) ? 0.0 : max(_2621, 0.0));
    float _2625 = _2601 * _2601;
    float _2629 = ((_2620 * _2620) * (_2625 + (-1.0))) + 1.0;
    float _2637 = exp2(log2(1.0 - (isnan(1.0) ? _4836 : (isnan(_4836) ? 1.0 : min(_4836, 1.0)))) * 5.0);
    float _2638 = 0.959999978542327880859375 - _998;
    float _2640 = 0.959999978542327880859375 - _999;
    float _2641 = 0.959999978542327880859375 - _1000;
    float _2648 = 1.0 - _2601;
    float _2659 = (0.5 / (((_2616 * ((_2615 * _2648) + _2601)) + 9.9999999392252902907785028219223e-09) + (((_2616 * _2648) + _2601) * _2615))) * _2615;
    float _4847 = isnan(0.0) ? _2659 : (isnan(_2659) ? 0.0 : max(_2659, 0.0));
    float _2661 = (isnan(1.0) ? _4847 : (isnan(_4847) ? 1.0 : min(_4847, 1.0))) * (_2625 / ((_2629 * _2629) * 3.141590118408203125));
    uint _2675 = _2340 + 9u;
    float _2686 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2380].w)) * _883) * 0.949999988079071044921875);
    float _2687 = _2686 * _2686;
    float _2688 = cbLight._m0[_2380].x + _655;
    float _2689 = cbLight._m0[_2380].y + _656;
    float _2690 = cbLight._m0[_2380].z + _657;
    float _2694 = inversesqrt(dot(vec3(_2688, _2689, _2690), vec3(_2688, _2689, _2690)));
    float _2695 = _2694 * _2688;
    float _2696 = _2694 * _2689;
    float _2697 = _2694 * _2690;
    float _2698 = dot(vec3(_629, _630, _631), vec3(cbLight._m0[_2380].xyz));
    float _4858 = isnan(0.0) ? _2698 : (isnan(_2698) ? 0.0 : max(_2698, 0.0));
    float _2701 = isnan(1.0) ? _4858 : (isnan(_4858) ? 1.0 : min(_4858, 1.0));
    float _2702 = dot(vec3(_629, _630, _631), vec3(_2695, _2696, _2697));
    float _4869 = isnan(0.0) ? _2702 : (isnan(_2702) ? 0.0 : max(_2702, 0.0));
    float _2705 = isnan(1.0) ? _4869 : (isnan(_4869) ? 1.0 : min(_4869, 1.0));
    float _2706 = dot(vec3(cbLight._m0[_2380].xyz), vec3(_2695, _2696, _2697));
    float _4880 = isnan(0.0) ? _2706 : (isnan(_2706) ? 0.0 : max(_2706, 0.0));
    float _2710 = _2687 * _2687;
    float _2714 = ((_2705 * _2705) * (_2710 + (-1.0))) + 1.0;
    float _2721 = exp2(log2(1.0 - (isnan(1.0) ? _4880 : (isnan(_4880) ? 1.0 : min(_4880, 1.0)))) * 5.0);
    float _2728 = 1.0 - _2687;
    float _2738 = (0.5 / (((_2616 * ((_2701 * _2728) + _2687)) + 9.9999999392252902907785028219223e-09) + (((_2616 * _2728) + _2687) * _2701))) * _2701;
    float _4891 = isnan(0.0) ? _2738 : (isnan(_2738) ? 0.0 : max(_2738, 0.0));
    float _2740 = (isnan(1.0) ? _4891 : (isnan(_4891) ? 1.0 : min(_4891, 1.0))) * (_2710 / ((_2714 * _2714) * 3.141590118408203125));
    float _2750 = (((((_2721 * _2638) + _1001) * cbLight._m0[_2675].x) * _2740) * _2363) + ((((cbLight._m0[_2587].x * _2329) * ((_2637 * _2638) + _1001)) * _2661) * _2376);
    float _2751 = (((((_2721 * _2640) + _1002) * cbLight._m0[_2675].y) * _2740) * _2363) + ((((cbLight._m0[_2587].y * _2331) * ((_2637 * _2640) + _1002)) * _2661) * _2376);
    float _2752 = (((((_2721 * _2641) + _1003) * cbLight._m0[_2675].z) * _2740) * _2363) + ((((cbLight._m0[_2587].z * _2333) * ((_2637 * _2641) + _1003)) * _2661) * _2376);
    float _2808;
    float _2810;
    float _2812;
    if (_2416)
    {
        _2808 = _2750;
        _2810 = _2751;
        _2812 = _2752;
    }
    else
    {
        uint _2814 = _2340 + 2u;
        uint _2818 = _2340 + 10u;
        float _2832 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2814].w)) * _883) * 0.949999988079071044921875);
        float _2833 = _2832 * _2832;
        float _2834 = cbLight._m0[_2814].x + _655;
        float _2835 = cbLight._m0[_2814].y + _656;
        float _2836 = cbLight._m0[_2814].z + _657;
        float _2840 = inversesqrt(dot(vec3(_2834, _2835, _2836), vec3(_2834, _2835, _2836)));
        float _2841 = _2840 * _2834;
        float _2842 = _2840 * _2835;
        float _2843 = _2840 * _2836;
        float _2844 = dot(vec3(_629, _630, _631), vec3(cbLight._m0[_2814].xyz));
        float _4902 = isnan(0.0) ? _2844 : (isnan(_2844) ? 0.0 : max(_2844, 0.0));
        float _2847 = isnan(1.0) ? _4902 : (isnan(_4902) ? 1.0 : min(_4902, 1.0));
        float _2848 = dot(vec3(_629, _630, _631), vec3(_2841, _2842, _2843));
        float _4913 = isnan(0.0) ? _2848 : (isnan(_2848) ? 0.0 : max(_2848, 0.0));
        float _2851 = isnan(1.0) ? _4913 : (isnan(_4913) ? 1.0 : min(_4913, 1.0));
        float _2852 = dot(vec3(cbLight._m0[_2814].xyz), vec3(_2841, _2842, _2843));
        float _4924 = isnan(0.0) ? _2852 : (isnan(_2852) ? 0.0 : max(_2852, 0.0));
        float _2856 = _2833 * _2833;
        float _2860 = ((_2851 * _2851) * (_2856 + (-1.0))) + 1.0;
        float _2867 = exp2(log2(1.0 - (isnan(1.0) ? _4924 : (isnan(_4924) ? 1.0 : min(_4924, 1.0)))) * 5.0);
        float _2874 = 1.0 - _2833;
        float _2884 = (0.5 / (((_2616 * ((_2847 * _2874) + _2833)) + 9.9999999392252902907785028219223e-09) + (((_2616 * _2874) + _2833) * _2847))) * _2847;
        float _4935 = isnan(0.0) ? _2884 : (isnan(_2884) ? 0.0 : max(_2884, 0.0));
        float _2886 = (isnan(1.0) ? _4935 : (isnan(_4935) ? 1.0 : min(_4935, 1.0))) * (_2856 / ((_2860 * _2860) * 3.141590118408203125));
        float _2887 = isnan(1.0) ? _2355 : (isnan(_2355) ? 1.0 : min(_2355, 1.0));
        _2808 = (((((_2867 * _2638) + _1001) * cbLight._m0[_2818].x) * _2886) * _2887) + _2750;
        _2810 = (((((_2867 * _2640) + _1002) * cbLight._m0[_2818].y) * _2886) * _2887) + _2751;
        _2812 = (((((_2867 * _2641) + _1003) * cbLight._m0[_2818].z) * _2886) * _2887) + _2752;
    }
    float _2918;
    float _2920;
    float _2922;
    if (_2525)
    {
        _2918 = _2808;
        _2920 = _2810;
        _2922 = _2812;
    }
    else
    {
        uint _2929 = _2340 + 3u;
        uint _2933 = _2340 + 11u;
        float _2947 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2929].w)) * _883) * 0.949999988079071044921875);
        float _2948 = _2947 * _2947;
        float _2949 = cbLight._m0[_2929].x + _655;
        float _2950 = cbLight._m0[_2929].y + _656;
        float _2951 = cbLight._m0[_2929].z + _657;
        float _2955 = inversesqrt(dot(vec3(_2949, _2950, _2951), vec3(_2949, _2950, _2951)));
        float _2956 = _2955 * _2949;
        float _2957 = _2955 * _2950;
        float _2958 = _2955 * _2951;
        float _2959 = dot(vec3(_629, _630, _631), vec3(cbLight._m0[_2929].xyz));
        float _4951 = isnan(0.0) ? _2959 : (isnan(_2959) ? 0.0 : max(_2959, 0.0));
        float _2962 = isnan(1.0) ? _4951 : (isnan(_4951) ? 1.0 : min(_4951, 1.0));
        float _2963 = dot(vec3(_629, _630, _631), vec3(_2956, _2957, _2958));
        float _4962 = isnan(0.0) ? _2963 : (isnan(_2963) ? 0.0 : max(_2963, 0.0));
        float _2966 = isnan(1.0) ? _4962 : (isnan(_4962) ? 1.0 : min(_4962, 1.0));
        float _2967 = dot(vec3(cbLight._m0[_2929].xyz), vec3(_2956, _2957, _2958));
        float _4973 = isnan(0.0) ? _2967 : (isnan(_2967) ? 0.0 : max(_2967, 0.0));
        float _2971 = _2948 * _2948;
        float _2975 = ((_2966 * _2966) * (_2971 + (-1.0))) + 1.0;
        float _2982 = exp2(log2(1.0 - (isnan(1.0) ? _4973 : (isnan(_4973) ? 1.0 : min(_4973, 1.0)))) * 5.0);
        float _2989 = 1.0 - _2948;
        float _2999 = (0.5 / (((_2616 * ((_2962 * _2989) + _2948)) + 9.9999999392252902907785028219223e-09) + (((_2616 * _2989) + _2948) * _2962))) * _2962;
        float _4984 = isnan(0.0) ? _2999 : (isnan(_2999) ? 0.0 : max(_2999, 0.0));
        float _3001 = (isnan(1.0) ? _4984 : (isnan(_4984) ? 1.0 : min(_4984, 1.0))) * (_2971 / ((_2975 * _2975) * 3.141590118408203125));
        float _3002 = isnan(1.0) ? _2356 : (isnan(_2356) ? 1.0 : min(_2356, 1.0));
        _2918 = (((((_2982 * _2638) + _1001) * cbLight._m0[_2933].x) * _3001) * _3002) + _2808;
        _2920 = (((((_2982 * _2640) + _1002) * cbLight._m0[_2933].y) * _3001) * _3002) + _2810;
        _2922 = (((((_2982 * _2641) + _1003) * cbLight._m0[_2933].z) * _3001) * _3002) + _2812;
    }
    float _3067;
    float _3069;
    float _3071;
    float _3073;
    float _3075;
    float _3077;
    if (_2338.y == 0u)
    {
        uvec4 _3023 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3024 = _3023.x;
        uint _3035 = uint((float(_3023.y) * floor(float(uint(cbSceneParam._m0[85u].y * _806) / _3024))) + floor(float(uint(cbSceneParam._m0[85u].x * _805) / _3024)));
        float _3045 = (log2(_2116 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3046 = isnan(0.0) ? _3045 : (isnan(_3045) ? 0.0 : max(_3045, 0.0));
        uint _3049 = uint(isnan(14.0) ? _3046 : (isnan(_3046) ? 14.0 : min(_3046, 14.0)));
        uvec4 _3054 = texelFetch(g_lightClusterGridBuffer, int(((_3049 << 2u) + (_3035 << 6u)) >> 2u));
        uint _3055 = _3054.x;
        uint _3056 = _3023.z;
        float _3170;
        float _3172;
        float _3174;
        float _3176;
        float _3178;
        float _3180;
        if (((((1u << ((_3056 >> 4u) & 15u)) + 4294967295u) & _3055) == 0u) || ((_3056 & 240u) == 0u))
        {
            _3170 = 0.0;
            _3172 = 0.0;
            _3174 = 0.0;
            _3176 = 0.0;
            _3178 = 0.0;
            _3180 = 0.0;
        }
        else
        {
            float _3171;
            float _3173;
            float _3175;
            float _3177;
            float _3179;
            float _3181;
            float _3331 = 0.0;
            float _3332 = 0.0;
            float _3333 = 0.0;
            float _3334 = 0.0;
            float _3335 = 0.0;
            float _3336 = 0.0;
            uint _3337 = 0u;
            uint _3346;
            bool _3347;
            for (;;)
            {
                _3346 = texelFetch(g_lightClassification, int((((_3049 << 5u) + (_3035 << 9u)) + (_3337 << 2u)) >> 2u)).x;
                _3347 = _3346 == 0u;
                float frontier_phi_73_pred;
                float frontier_phi_73_pred_1;
                float frontier_phi_73_pred_2;
                float frontier_phi_73_pred_3;
                float frontier_phi_73_pred_4;
                float frontier_phi_73_pred_5;
                if (_3347)
                {
                    frontier_phi_73_pred = _3336;
                    frontier_phi_73_pred_1 = _3335;
                    frontier_phi_73_pred_2 = _3334;
                    frontier_phi_73_pred_3 = _3333;
                    frontier_phi_73_pred_4 = _3332;
                    frontier_phi_73_pred_5 = _3331;
                }
                else
                {
                    float _3476;
                    float _3477;
                    float _3478;
                    float _3479;
                    float _3480;
                    float _3481;
                    uint _3482;
                    _3476 = _3331;
                    _3477 = _3332;
                    _3478 = _3333;
                    _3479 = _3334;
                    _3480 = _3335;
                    _3481 = _3336;
                    _3482 = _3346;
                    float _3403;
                    float _3404;
                    float _3405;
                    float _3406;
                    float _3407;
                    float _3408;
                    for (;;)
                    {
                        uint _3486 = uint(findLSB(_3482)) + (_3337 << 5u);
                        uint _3483 = (_3482 + 4294967295u) & _3482;
                        uint _3488 = _3486 * 48u;
                        vec4 _3502 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3488)).x, texelFetch(g_PointLightRenderingBuffer, int(_3488 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3488 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3488 + 3u)).x));
                        uint _3508 = (_3486 * 48u) + 4u;
                        vec4 _3521 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3508)).x, texelFetch(g_PointLightRenderingBuffer, int(_3508 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3508 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3508 + 3u)).x));
                        uint _3527 = (_3486 * 48u) + 8u;
                        vec3 _3538 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3527)).x, texelFetch(g_PointLightRenderingBuffer, int(_3527 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3527 + 2u)).x));
                        float _3542 = _3502.x - _2114;
                        float _3543 = _3502.y - _2115;
                        float _3544 = _3502.z - _2116;
                        float _3545 = dot(vec3(_3542, _3543, _3544), vec3(_3542, _3543, _3544));
                        float _3548 = inversesqrt(_3545);
                        float _3549 = _3548 * _3542;
                        float _3550 = _3548 * _3543;
                        float _3551 = _3548 * _3544;
                        float _3552 = dot(vec3(_828, _831, _834), vec3(_3549, _3550, _3551));
                        float _3557 = 1.0 - (_3545 * _3502.w);
                        float _5010 = isnan(0.0) ? _3557 : (isnan(_3557) ? 0.0 : max(_3557, 0.0));
                        float _3558 = isnan(1.0) ? _5010 : (isnan(_5010) ? 1.0 : min(_5010, 1.0));
                        float _3559 = sqrt(_3545) * _3521.w;
                        float _3562 = 1.39999997615814208984375 / (_3559 + 1.39999997615814208984375);
                        float _3563 = _3562 * _3562;
                        float _3566 = ((1.0 - _3563) * _3552) + _3563;
                        float _3569 = _3559 * _3559;
                        float _3572 = ((isnan(0.0) ? _3566 : (isnan(_3566) ? 0.0 : max(_3566, 0.0))) * _3558) / ((_3569 * 0.699999988079071044921875) + 1.0);
                        float _3576 = (-0.0) - _2114;
                        float _3577 = (-0.0) - _2115;
                        float _3578 = (-0.0) - _2116;
                        float _3582 = inversesqrt(dot(vec3(_3576, _3577, _3578), vec3(_3576, _3577, _3578)));
                        float _3583 = _3582 * _3576;
                        float _3584 = _3582 * _3577;
                        float _3585 = _3582 * _3578;
                        float _3592 = exp2(log2(1.0 / ((_3569 * 3.5) + 5.0)) * 0.25);
                        float _3593 = 1.0 - _1025;
                        float _3600 = sqrt(1.0 - ((1.0 - (_3593 * _3593)) * (1.0 - (_3592 * _3592))));
                        float _3601 = _3600 * _3600;
                        float _3602 = _3601 * _3601;
                        float _3603 = _3583 + _3549;
                        float _3604 = _3584 + _3550;
                        float _3605 = _3585 + _3551;
                        float _3609 = inversesqrt(dot(vec3(_3603, _3604, _3605), vec3(_3603, _3604, _3605)));
                        float _3613 = dot(vec3(_828, _831, _834), vec3(_3583, _3584, _3585));
                        float _5026 = isnan(0.0) ? _3613 : (isnan(_3613) ? 0.0 : max(_3613, 0.0));
                        float _3616 = isnan(1.0) ? _5026 : (isnan(_5026) ? 1.0 : min(_5026, 1.0));
                        float _3617 = dot(vec3(_828, _831, _834), vec3(_3609 * _3603, _3609 * _3604, _3609 * _3605));
                        float _5037 = isnan(0.0) ? _3617 : (isnan(_3617) ? 0.0 : max(_3617, 0.0));
                        float _3620 = isnan(1.0) ? _5037 : (isnan(_5037) ? 1.0 : min(_5037, 1.0));
                        float _3624 = ((_3620 * _3620) * (_3602 + (-1.0))) + 1.0;
                        float _3625 = _3562 * _3601;
                        float _3626 = _3625 * _3625;
                        float _3629 = ((1.0 - _3626) * _3552) + _3626;
                        float _5048 = isnan(0.0) ? _3629 : (isnan(_3629) ? 0.0 : max(_3629, 0.0));
                        float _3630 = isnan(1.0) ? _5048 : (isnan(_5048) ? 1.0 : min(_5048, 1.0));
                        float _3631 = 1.0 - _3601;
                        float _3641 = (0.5 / (((_3630 * ((_3616 * _3631) + _3601)) + 9.9999999392252902907785028219223e-09) + (((_3630 * _3631) + _3601) * _3616))) * _3630;
                        float _5059 = isnan(0.0) ? _3641 : (isnan(_3641) ? 0.0 : max(_3641, 0.0));
                        float _3652 = (((_3602 * 3.1415927410125732421875) * (isnan(1.0) ? _5059 : (isnan(_5059) ? 1.0 : min(_5059, 1.0)))) / ((_3624 * _3624) * ((_3569 * 2.1991131305694580078125) + 3.141590118408203125))) * _3558;
                        _3406 = (_3572 * _3521.x) + _3479;
                        _3407 = (_3572 * _3521.y) + _3480;
                        _3408 = (_3572 * _3521.z) + _3481;
                        _3403 = (_3652 * _3538.x) + _3476;
                        _3404 = (_3652 * _3538.y) + _3477;
                        _3405 = (_3652 * _3538.z) + _3478;
                        if (_3483 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3476 = _3403;
                            _3477 = _3404;
                            _3478 = _3405;
                            _3479 = _3406;
                            _3480 = _3407;
                            _3481 = _3408;
                            _3482 = _3483;
                        }
                    }
                    frontier_phi_73_pred = _3408;
                    frontier_phi_73_pred_1 = _3407;
                    frontier_phi_73_pred_2 = _3406;
                    frontier_phi_73_pred_3 = _3405;
                    frontier_phi_73_pred_4 = _3404;
                    frontier_phi_73_pred_5 = _3403;
                }
                _3181 = frontier_phi_73_pred;
                _3179 = frontier_phi_73_pred_1;
                _3177 = frontier_phi_73_pred_2;
                _3175 = frontier_phi_73_pred_3;
                _3173 = frontier_phi_73_pred_4;
                _3171 = frontier_phi_73_pred_5;
                uint _3338 = _3337 + 1u;
                if (_3338 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3331 = _3171;
                    _3332 = _3173;
                    _3333 = _3175;
                    _3334 = _3177;
                    _3335 = _3179;
                    _3336 = _3181;
                    _3337 = _3338;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3170 = _3171;
            _3172 = _3173;
            _3174 = _3175;
            _3176 = _3177;
            _3178 = _3179;
            _3180 = _3181;
        }
        uvec4 _3184 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3185 = _3184.z;
        uint _3187 = (_3185 >> 8u) & 15u;
        float _3299;
        float _3301;
        float _3303;
        float _3305;
        float _3307;
        float _3309;
        if (((4294967295u << _3187) & _3055) == 0u)
        {
            _3299 = _3170;
            _3301 = _3172;
            _3303 = _3174;
            _3305 = _3176;
            _3307 = _3178;
            _3309 = _3180;
        }
        else
        {
            float _3324 = inversesqrt(dot(vec3(_2114, _2115, _2116), vec3(_2114, _2115, _2116)));
            float _3325 = _3324 * _2114;
            float _3326 = _3324 * _2115;
            float _3327 = _3324 * _2116;
            float frontier_phi_65_66_ladder;
            float frontier_phi_65_66_ladder_1;
            float frontier_phi_65_66_ladder_2;
            float frontier_phi_65_66_ladder_3;
            float frontier_phi_65_66_ladder_4;
            float frontier_phi_65_66_ladder_5;
            if (_3187 < ((_3185 >> 12u) & 15u))
            {
                float _3300;
                float _3302;
                float _3304;
                float _3306;
                float _3308;
                float _3310;
                float _3459 = _3170;
                float _3460 = _3172;
                float _3461 = _3174;
                float _3462 = _3176;
                float _3463 = _3178;
                float _3464 = _3180;
                uint _3465 = _3187;
                uint _3474;
                bool _3475;
                for (;;)
                {
                    _3474 = texelFetch(g_lightClassification, int((((_3049 << 5u) + (_3035 << 9u)) + (_3465 << 2u)) >> 2u)).x;
                    _3475 = _3474 == 0u;
                    float frontier_phi_84_pred;
                    float frontier_phi_84_pred_1;
                    float frontier_phi_84_pred_2;
                    float frontier_phi_84_pred_3;
                    float frontier_phi_84_pred_4;
                    float frontier_phi_84_pred_5;
                    if (_3475)
                    {
                        frontier_phi_84_pred = _3463;
                        frontier_phi_84_pred_1 = _3462;
                        frontier_phi_84_pred_2 = _3461;
                        frontier_phi_84_pred_3 = _3460;
                        frontier_phi_84_pred_4 = _3459;
                        frontier_phi_84_pred_5 = _3464;
                    }
                    else
                    {
                        float _3666;
                        float _3667;
                        float _3668;
                        float _3669;
                        float _3670;
                        float _3671;
                        float _3961;
                        float _3962;
                        float _3963;
                        float _3964;
                        float _3965;
                        float _3966;
                        float _3679 = _3459;
                        float _3680 = _3460;
                        float _3681 = _3461;
                        float _3682 = _3462;
                        float _3683 = _3463;
                        float _3684 = _3464;
                        uint _3685 = _3474;
                        uint _3686;
                        vec4 _3711;
                        float _3712;
                        vec4 _3727;
                        vec3 _3739;
                        vec4 _3754;
                        vec4 _3770;
                        float _3817;
                        bool _3818;
                        for (;;)
                        {
                            uint _3696 = ((_3465 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3685));
                            _3686 = (_3685 + 4294967295u) & _3685;
                            uint _3698 = _3696 * 40u;
                            _3711 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3698)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3698 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3698 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3698 + 3u)).x));
                            _3712 = _3711.w;
                            uint _3714 = (_3696 * 40u) + 4u;
                            _3727 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3714)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3714 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3714 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3714 + 3u)).x));
                            uint _3729 = (_3696 * 40u) + 8u;
                            _3739 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3729)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3729 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3729 + 2u)).x));
                            uint _3741 = (_3696 * 40u) + 16u;
                            _3754 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3741)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3741 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3741 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3741 + 3u)).x));
                            uint _3757 = (_3696 * 40u) + 20u;
                            _3770 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3757)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3757 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3757 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3757 + 3u)).x));
                            uint _3773 = (_3696 * 40u) + 24u;
                            vec4 _3786 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3773)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3773 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3773 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3773 + 3u)).x));
                            uint _3792 = (_3696 * 40u) + 28u;
                            vec4 _3805 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3792)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3792 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3792 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3792 + 3u)).x));
                            _3817 = fma(_2116, _3805.z, fma(_2115, _3805.y, _3805.x * _2114)) + _3805.w;
                            _3818 = !((fma(_2116, _3786.z, fma(_2115, _3786.y, _3786.x * _2114)) + _3786.w) <= 0.0);
                            float frontier_phi_90_pred;
                            float frontier_phi_90_pred_1;
                            float frontier_phi_90_pred_2;
                            float frontier_phi_90_pred_3;
                            float frontier_phi_90_pred_4;
                            float frontier_phi_90_pred_5;
                            if (_3818)
                            {
                                float _3845 = _3711.x - _2114;
                                float _3846 = _3711.y - _2115;
                                float _3847 = _3711.z - _2116;
                                float _3848 = dot(vec3(_3845, _3846, _3847), vec3(_3845, _3846, _3847));
                                float _3851 = inversesqrt(_3848);
                                float _3852 = _3851 * _3845;
                                float _3853 = _3851 * _3846;
                                float _3854 = _3851 * _3847;
                                float _3858 = 1.0 - (_3848 / (_3712 * _3712));
                                float _5070 = isnan(0.0) ? _3858 : (isnan(_3858) ? 0.0 : max(_3858, 0.0));
                                float _3859 = isnan(1.0) ? _5070 : (isnan(_5070) ? 1.0 : min(_5070, 1.0));
                                float _3863 = sqrt(_3848) * _3727.w;
                                float _3865 = 1.39999997615814208984375 / (_3863 + 1.39999997615814208984375);
                                float _3866 = _3865 * _3865;
                                float _3869 = ((1.0 - _3866) * dot(vec3(_3852, _3853, _3854), vec3(_828, _831, _834))) + _3866;
                                float _3872 = _3863 * _3863;
                                float _3876 = (fma(_2116, _3754.z, fma(_2115, _3754.y, _3754.x * _2114)) + _3754.w) / _3817;
                                float _3877 = (fma(_2116, _3770.z, fma(_2115, _3770.y, _3770.x * _2114)) + _3770.w) / _3817;
                                float _3881 = 1.0 - dot(vec2(_3876, _3877), vec2(_3876, _3877));
                                float _5086 = isnan(0.0) ? _3881 : (isnan(_3881) ? 0.0 : max(_3881, 0.0));
                                float _3882 = isnan(1.0) ? _5086 : (isnan(_5086) ? 1.0 : min(_5086, 1.0));
                                float _3883 = _3882 * (((isnan(0.0) ? _3869 : (isnan(_3869) ? 0.0 : max(_3869, 0.0))) * _3859) / ((_3872 * 0.699999988079071044921875) + 1.0));
                                float _3895 = exp2(log2(1.0 / ((_3872 * 3.5) + 5.0)) * 0.25);
                                float _3896 = 1.0 - _1025;
                                float _3903 = sqrt(1.0 - ((1.0 - (_3896 * _3896)) * (1.0 - (_3895 * _3895))));
                                float _3904 = _3903 * _3903;
                                float _3905 = _3904 * _3904;
                                float _3906 = _3852 - _3325;
                                float _3907 = _3853 - _3326;
                                float _3908 = _3854 - _3327;
                                float _3912 = inversesqrt(dot(vec3(_3906, _3907, _3908), vec3(_3906, _3907, _3908)));
                                float _3916 = dot(vec3(_828, _831, _834), vec3((-0.0) - _3325, (-0.0) - _3326, (-0.0) - _3327));
                                float _5097 = isnan(0.0) ? _3916 : (isnan(_3916) ? 0.0 : max(_3916, 0.0));
                                float _3919 = isnan(1.0) ? _5097 : (isnan(_5097) ? 1.0 : min(_5097, 1.0));
                                float _3920 = dot(vec3(_828, _831, _834), vec3(_3912 * _3906, _3912 * _3907, _3912 * _3908));
                                float _5108 = isnan(0.0) ? _3920 : (isnan(_3920) ? 0.0 : max(_3920, 0.0));
                                float _3923 = isnan(1.0) ? _5108 : (isnan(_5108) ? 1.0 : min(_5108, 1.0));
                                float _3927 = ((_3923 * _3923) * (_3905 + (-1.0))) + 1.0;
                                float _3928 = _3865 * _3904;
                                float _3929 = _3928 * _3928;
                                float _3935 = ((1.0 - _3929) * dot(vec3(_828, _831, _834), vec3(_3852, _3853, _3854))) + _3929;
                                float _5119 = isnan(0.0) ? _3935 : (isnan(_3935) ? 0.0 : max(_3935, 0.0));
                                float _3936 = isnan(1.0) ? _5119 : (isnan(_5119) ? 1.0 : min(_5119, 1.0));
                                float _3937 = 1.0 - _3904;
                                float _3947 = (0.5 / (((_3936 * ((_3919 * _3937) + _3904)) + 9.9999999392252902907785028219223e-09) + (((_3936 * _3937) + _3904) * _3919))) * _3936;
                                float _5130 = isnan(0.0) ? _3947 : (isnan(_3947) ? 0.0 : max(_3947, 0.0));
                                float _3957 = (_3882 * _3859) * (((_3905 * 3.1415927410125732421875) * (isnan(1.0) ? _5130 : (isnan(_5130) ? 1.0 : min(_5130, 1.0)))) / ((_3927 * _3927) * ((_3872 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_90_pred = _3883 * _3727.y;
                                frontier_phi_90_pred_1 = _3883 * _3727.x;
                                frontier_phi_90_pred_2 = _3957 * _3739.z;
                                frontier_phi_90_pred_3 = _3957 * _3739.y;
                                frontier_phi_90_pred_4 = _3957 * _3739.x;
                                frontier_phi_90_pred_5 = _3883 * _3727.z;
                            }
                            else
                            {
                                frontier_phi_90_pred = 0.0;
                                frontier_phi_90_pred_1 = 0.0;
                                frontier_phi_90_pred_2 = 0.0;
                                frontier_phi_90_pred_3 = 0.0;
                                frontier_phi_90_pred_4 = 0.0;
                                frontier_phi_90_pred_5 = 0.0;
                            }
                            _3965 = frontier_phi_90_pred;
                            _3964 = frontier_phi_90_pred_1;
                            _3963 = frontier_phi_90_pred_2;
                            _3962 = frontier_phi_90_pred_3;
                            _3961 = frontier_phi_90_pred_4;
                            _3966 = frontier_phi_90_pred_5;
                            _3669 = _3964 + _3682;
                            _3670 = _3965 + _3683;
                            _3671 = _3966 + _3684;
                            _3666 = _3961 + _3679;
                            _3667 = _3962 + _3680;
                            _3668 = _3963 + _3681;
                            if (_3686 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3679 = _3666;
                                _3680 = _3667;
                                _3681 = _3668;
                                _3682 = _3669;
                                _3683 = _3670;
                                _3684 = _3671;
                                _3685 = _3686;
                                continue;
                            }
                        }
                        frontier_phi_84_pred = _3670;
                        frontier_phi_84_pred_1 = _3669;
                        frontier_phi_84_pred_2 = _3668;
                        frontier_phi_84_pred_3 = _3667;
                        frontier_phi_84_pred_4 = _3666;
                        frontier_phi_84_pred_5 = _3671;
                    }
                    _3308 = frontier_phi_84_pred;
                    _3306 = frontier_phi_84_pred_1;
                    _3304 = frontier_phi_84_pred_2;
                    _3302 = frontier_phi_84_pred_3;
                    _3300 = frontier_phi_84_pred_4;
                    _3310 = frontier_phi_84_pred_5;
                    uint _3466 = _3465 + 1u;
                    if (_3466 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3459 = _3300;
                        _3460 = _3302;
                        _3461 = _3304;
                        _3462 = _3306;
                        _3463 = _3308;
                        _3464 = _3310;
                        _3465 = _3466;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_65_66_ladder = _3310;
                frontier_phi_65_66_ladder_1 = _3306;
                frontier_phi_65_66_ladder_2 = _3308;
                frontier_phi_65_66_ladder_3 = _3302;
                frontier_phi_65_66_ladder_4 = _3300;
                frontier_phi_65_66_ladder_5 = _3304;
            }
            else
            {
                frontier_phi_65_66_ladder = _3180;
                frontier_phi_65_66_ladder_1 = _3176;
                frontier_phi_65_66_ladder_2 = _3178;
                frontier_phi_65_66_ladder_3 = _3172;
                frontier_phi_65_66_ladder_4 = _3170;
                frontier_phi_65_66_ladder_5 = _3174;
            }
            _3299 = frontier_phi_65_66_ladder_4;
            _3301 = frontier_phi_65_66_ladder_3;
            _3303 = frontier_phi_65_66_ladder_5;
            _3305 = frontier_phi_65_66_ladder_1;
            _3307 = frontier_phi_65_66_ladder_2;
            _3309 = frontier_phi_65_66_ladder;
        }
        float _3314 = isnan(1.0) ? _1015 : (isnan(_1015) ? 1.0 : min(_1015, 1.0));
        _3067 = (_3314 * _3305) + _2580;
        _3069 = (_3314 * _3307) + _2582;
        _3071 = (_3314 * _3309) + _2584;
        _3073 = ((_3299 * _1001) * _3314) + _2918;
        _3075 = ((_3301 * _1002) * _3314) + _2920;
        _3077 = ((_3303 * _1003) * _3314) + _2922;
    }
    else
    {
        _3067 = _2580;
        _3069 = _2582;
        _3071 = _2584;
        _3073 = _2918;
        _3075 = _2920;
        _3077 = _2922;
    }
    uint _3083 = _908 + uint(cbMatDynParam._m0[0u].w);
    float _3089 = cbInstanceData._m0[_3083].x * (((((cbMatDynParam._m0[8u].x - cbMatDynParam._m0[7u].x) * _671) + cbMatDynParam._m0[7u].x) + (((((cbMtdParam._m0[12u].x * cbMtdParam._m0[16u].z) * cbMtdParam._m0[15u].w) * _567) * _580.x) * _700)) + (((_729 - (_729 * _637)) + (cbMatDynParam._m0[11u].x * _760)) * cbMatDynParam._m0[9u].x));
    float _3090 = cbInstanceData._m0[_3083].y * (((((cbMatDynParam._m0[8u].y - cbMatDynParam._m0[7u].y) * _671) + cbMatDynParam._m0[7u].y) + (((((cbMtdParam._m0[12u].y * cbMtdParam._m0[16u].z) * cbMtdParam._m0[15u].w) * _567) * _580.y) * _700)) + (((_731 - (_731 * _637)) + (cbMatDynParam._m0[11u].y * _760)) * cbMatDynParam._m0[9u].y));
    float _3091 = cbInstanceData._m0[_3083].z * (((((cbMatDynParam._m0[8u].z - cbMatDynParam._m0[7u].z) * _671) + cbMatDynParam._m0[7u].z) + (((((cbMtdParam._m0[12u].z * cbMtdParam._m0[16u].z) * cbMtdParam._m0[15u].w) * _567) * _580.z) * _700)) + (((_733 - (_733 * _637)) + (cbMatDynParam._m0[11u].z * _760)) * cbMatDynParam._m0[9u].z));
    float _5146 = isnan(0.0) ? _992 : (isnan(_992) ? 0.0 : max(_992, 0.0));
    float _5157 = isnan(0.0) ? _993 : (isnan(_993) ? 0.0 : max(_993, 0.0));
    float _5168 = isnan(0.0) ? _994 : (isnan(_994) ? 0.0 : max(_994, 0.0));
    float _5179 = isnan(0.0) ? _632 : (isnan(_632) ? 0.0 : max(_632, 0.0));
    float _3109 = (((isnan(1.0) ? _5146 : (isnan(_5146) ? 1.0 : min(_5146, 1.0))) * (_3067 + ((isnan(0.0) ? _1770 : (isnan(_1770) ? 0.0 : max(_1770, 0.0))) * _1015))) + ((_3073 + ((isnan(0.0) ? _2061 : (isnan(_2061) ? 0.0 : max(_2061, 0.0))) * _1846)) * cbPerFrame._m0[3u].x)) + _3089;
    float _3111 = (_3090 + ((_3075 + ((isnan(0.0) ? _2064 : (isnan(_2064) ? 0.0 : max(_2064, 0.0))) * _1846)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _5157 : (isnan(_5157) ? 1.0 : min(_5157, 1.0))) * (_3069 + ((isnan(0.0) ? _1773 : (isnan(_1773) ? 0.0 : max(_1773, 0.0))) * _1015)));
    float _3113 = (_3091 + ((_3077 + ((isnan(0.0) ? _2067 : (isnan(_2067) ? 0.0 : max(_2067, 0.0))) * _1846)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _5168 : (isnan(_5168) ? 1.0 : min(_5168, 1.0))) * (_3071 + ((isnan(0.0) ? _1776 : (isnan(_1776) ? 0.0 : max(_1776, 0.0))) * _1015)));
    float _3114 = isnan(0.0) ? _3109 : (isnan(_3109) ? 0.0 : max(_3109, 0.0));
    float _3115 = isnan(0.0) ? _3111 : (isnan(_3111) ? 0.0 : max(_3111, 0.0));
    float _3116 = isnan(0.0) ? _3113 : (isnan(_3113) ? 0.0 : max(_3113, 0.0));
    float _3122 = cbMtdParam._m0[2u].x * _3089;
    float _3123 = cbMtdParam._m0[2u].y * _3090;
    float _3124 = cbMtdParam._m0[2u].z * _3091;
    float _3131 = ((cbMtdParam._m0[2u].w - cbMatDynParam._m0[12u].y) * _700) + cbMatDynParam._m0[12u].y;
    float _3136 = cbInstanceData._m0[_907 + 6u].w * (isnan(1.0) ? _5179 : (isnan(_5179) ? 1.0 : min(_5179, 1.0)));
    float _3141 = _805 / cbSceneParam._m0[86u].x;
    float _3142 = _806 / cbSceneParam._m0[86u].y;
    vec4 _3156 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3141, _3142, (log2((isnan(cbSceneParam._m0[77u].w) ? _786 : (isnan(_786) ? cbSceneParam._m0[77u].w : min(_786, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3158 = _3156.x;
    float _3159 = _3156.y;
    float _3160 = _3156.z;
    float _3161 = _3156.w;
    float _3232;
    float _3234;
    float _3236;
    float _3238;
    if (_786 > cbSceneParam._m0[78u].w)
    {
        float _3195 = isnan(_786) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _786 : min(cbSceneParam._m0[80u].w, _786));
        float _3196 = _3195 / _786;
        float _3207 = _3196 * _301;
        float _3208 = _302 * _3196;
        float _3209 = (-0.0) - _3208;
        float _3210 = _3196 * _303;
        float _3212 = (cbSceneParam._m0[77u].w * _3209) / _3195;
        float _3213 = _3212 + cbSceneParam._m0[79u].w;
        float _3214 = cbSceneParam._m0[79u].w - _3208;
        float _3220 = sqrt(((_3207 * _3207) + (_3208 * _3208)) + (_3210 * _3210));
        float _3223 = (1.0 - (cbSceneParam._m0[77u].w / _3195)) * _3220;
        float _3228 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3230 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3416;
        if (abs((_3209 - _3212) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3416 = ((((_3213 > 0.0) ? exp2(_3228 * _3213) : (2.0 - exp2(_3230 * _3213))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3223;
        }
        else
        {
            float _3360 = 1.0 / cbSceneParam._m0[80u].x;
            float _3361 = isnan(_3214) ? _3213 : (isnan(_3213) ? _3214 : max(_3213, _3214));
            float _3362 = isnan(_3214) ? _3213 : (isnan(_3213) ? _3214 : min(_3213, _3214));
            float _3371 = isnan(0.0) ? _3361 : (isnan(_3361) ? 0.0 : min(_3361, 0.0));
            float _3372 = isnan(0.0) ? _3362 : (isnan(_3362) ? 0.0 : min(_3362, 0.0));
            _3416 = ((abs(_3220 / _3209) * cbSceneParam._m0[80u].y) * ((((_3371 - _3372) * 2.0) - ((exp2(_3228 * (isnan(0.0) ? _3361 : (isnan(_3361) ? 0.0 : max(_3361, 0.0)))) - exp2(_3228 * (isnan(0.0) ? _3362 : (isnan(_3362) ? 0.0 : max(_3362, 0.0))))) * _3360)) - ((exp2(_3230 * _3371) - exp2(_3230 * _3372)) * _3360))) + (_3223 * cbSceneParam._m0[80u].z);
        }
        vec4 _3418 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3141, _3142, 1.0), 0.0);
        float _3427 = exp2((_3416 * (-1.44269502162933349609375)) * (1.0 - _3418.w));
        float _3428 = log2(_3427);
        float _3444 = log2(_3161);
        _3232 = (exp2(_3444 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3428 * cbSceneParam._m0[78u].x)) * _3418.x) / cbSceneParam._m0[78u].x)) + _3158;
        _3234 = (exp2(_3444 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3428 * cbSceneParam._m0[78u].y)) * _3418.y) / cbSceneParam._m0[78u].y)) + _3159;
        _3236 = (exp2(_3444 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3428 * cbSceneParam._m0[78u].z)) * _3418.z) / cbSceneParam._m0[78u].z)) + _3160;
        _3238 = _3427 * _3161;
    }
    else
    {
        _3232 = _3158;
        _3234 = _3159;
        _3236 = _3160;
        _3238 = _3161;
    }
    bool _3454;
    vec4 _3248;
    vec4 _3270;
    float _3272;
    float _3276;
    float _3277;
    float _3278;
    float _3281;
    float _3284;
    float _3287;
    float _3288;
    bool _3298;
    for (;;)
    {
        _3248 = cbMatDynParam._m0[0u];
        float _3250 = roundEven(_3248.y);
        bool _3251 = _3250 == 3.0;
        float _3252 = log2(_3238);
        float _3256 = exp2(_3252 * cbSceneParam._m0[78u].x);
        float _3257 = exp2(_3252 * cbSceneParam._m0[78u].y);
        float _3258 = exp2(_3252 * cbSceneParam._m0[78u].z);
        float _3259 = _3256 * _3114;
        float _3260 = _3257 * _3115;
        float _3261 = _3258 * _3116;
        float _3268 = _793 + (-0.5);
        _3270 = cbMtdParam._m0[1u];
        _3272 = _3270.y * _3268;
        float _3275 = (_3250 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3276 = _3275 * (_3251 ? _3259 : (_3259 + (cbSceneParam._m0[72u].w * _3232)));
        _3277 = _3275 * (_3251 ? _3260 : (_3260 + (cbSceneParam._m0[72u].w * _3234)));
        _3278 = _3275 * (_3251 ? _3261 : (_3261 + (cbSceneParam._m0[72u].w * _3236)));
        _3281 = ((_3122 * _3131) * _3256) * _3275;
        _3284 = ((_3123 * _3131) * _3257) * _3275;
        _3287 = ((_3124 * _3131) * _3258) * _3275;
        _3288 = _3268 * 0.999000012874603271484375;
        _3298 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3298)
        {
            if ((cbInstanceData._m0[_907 + 7u].x + _3288) < 0.5)
            {
                _3454 = true;
                break;
            }
        }
        uint _3395 = _908 + uint(_3248.w);
        if ((cbInstanceData._m0[_3395].w < 1.0) && ((cbInstanceData._m0[_3395].w + _3288) < 0.5))
        {
            _3454 = true;
            break;
        }
        if ((_3272 + _448) < _3270.x)
        {
            _3454 = true;
            break;
        }
        _3454 = false;
        break;
    }
    float _3657;
    if (_3454)
    {
        discard_state = true;
        _3657 = 0.0;
    }
    else
    {
        _3657 = _3136;
    }
    SV_Target.x = _3276;
    SV_Target.y = _3277;
    SV_Target.z = _3278;
    SV_Target.w = _3657;
    SV_Target_1.x = _3281;
    SV_Target_1.y = _3284;
    SV_Target_1.z = _3287;
    SV_Target_1.w = _3136;
    discard_exit();
}


