#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[18];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_1;
layout(set = 0, binding = 1) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_7;
layout(set = 0, binding = 10) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_6;
layout(set = 0, binding = 12) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_0;
layout(set = 0, binding = 3) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_10;
layout(set = 0, binding = 4) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_11;
layout(set = 0, binding = 5) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_12;
layout(set = 0, binding = 7) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1362;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _207 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _208 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _209 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _215 = inversesqrt(dot(vec3(_207, _208, _209), vec3(_207, _208, _209)));
    float _222 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _223 = _222 * NORMAL.x;
    float _224 = _222 * NORMAL.y;
    float _225 = _222 * NORMAL.z;
    float _229 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _237;
    float _238;
    float _239;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _237 = (-0.0) - _223;
        _238 = (-0.0) - _224;
        _239 = (-0.0) - _225;
    }
    else
    {
        _237 = _223;
        _238 = _224;
        _239 = _225;
    }
    float _283 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _293 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _283);
    float _294 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _283);
    float _295 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _283);
    vec4 _308 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _314 = _308.w;
    vec4 _326 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _337 = cbMtdParam._m0[9u].x * _326.x;
    float _338 = cbMtdParam._m0[9u].y * _326.y;
    float _339 = cbMtdParam._m0[9u].z * _326.z;
    float _345 = exp2(log2(1.0 - _314) * 8.0);
    vec4 _357 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_10, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _382 = exp2(log2(_314) * 8.0);
    vec4 _394 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _418 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _426 = (((((cbMtdParam._m0[13u].x * _357.x) - _337) * _345) + _337) * 4.55000019073486328125) * _418.x;
    float _428 = (((((cbMtdParam._m0[13u].y * _357.y) - _338) * _345) + _338) * 4.55000019073486328125) * _418.y;
    float _430 = (((((cbMtdParam._m0[13u].z * _357.z) - _339) * _345) + _339) * 4.55000019073486328125) * _418.z;
    float _437 = (((cbMtdParam._m0[11u].x * _394.x) - _426) * _382) + _426;
    float _438 = (((cbMtdParam._m0[11u].y * _394.y) - _428) * _382) + _428;
    float _439 = (((cbMtdParam._m0[11u].z * _394.z) - _430) * _382) + _430;
    float _440 = _418.w * _326.w;
    float _464 = cbMtdParam._m0[16u].x + texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w)).x;
    float _467 = ((cbMtdParam._m0[15u].z - _464) * _345) + _464;
    float _471 = ((cbMtdParam._m0[16u].w - _467) * _382) + _467;
    vec4 _483 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w));
    float _485 = _483.x;
    float _486 = _483.y;
    float _492 = cbMtdParam._m0[14u].x + _483.z;
    vec4 _505 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    vec4 _527 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _535 = (_308.z * 2.0) * ((((_505.z - _492) + cbMtdParam._m0[15u].y) * _345) + _492);
    float _539 = (((_527.z - _535) + cbMtdParam._m0[14u].w) * _382) + _535;
    float _553 = abs((fract(cbMtdParam._m0[15u].x * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _3733 = isnan(0.0) ? _553 : (isnan(_553) ? 0.0 : max(_553, 0.0));
    float _554 = isnan(1.0) ? _3733 : (isnan(_3733) ? 1.0 : min(_3733, 1.0));
    float _559 = (_554 * _554) * (3.0 - (_554 * 2.0));
    vec4 _572 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _580 = (_308.x * 2.0) + (-1.0);
    float _581 = (_308.y * 2.0) + (-1.0);
    float _582 = dot(vec2(_580, _581), vec2(_580, _581));
    float _3744 = isnan(0.0) ? _582 : (isnan(_582) ? 0.0 : max(_582, 0.0));
    float _587 = sqrt(1.0 - (isnan(1.0) ? _3744 : (isnan(_3744) ? 1.0 : min(_3744, 1.0))));
    float _592 = ((_505.x - _485) * _345) + _485;
    float _593 = ((_505.y - _486) * _345) + _486;
    float _606 = (cbMtdParam._m0[14u].z * (((((_527.x - _592) * _382) + _592) * 2.0) + (-1.0))) + _580;
    float _607 = (cbMtdParam._m0[14u].z * (((((_527.y - _593) * _382) + _593) * 2.0) + (-1.0))) + _581;
    float _610 = fma(_587, _237, fma(_607, _229 * TANGENT.x, (_215 * _207) * _606));
    float _613 = fma(_587, _238, fma(_607, _229 * TANGENT.y, (_215 * _208) * _606));
    float _616 = fma(_587, _239, fma(_607, _229 * TANGENT.z, (_215 * _209) * _606));
    float _620 = inversesqrt(dot(vec3(_610, _613, _616), vec3(_610, _613, _616)));
    float _621 = _620 * _610;
    float _622 = _620 * _613;
    float _623 = _620 * _616;
    float _3755 = isnan(0.0) ? _440 : (isnan(_440) ? 0.0 : max(_440, 0.0));
    float _624 = isnan(1.0) ? _3755 : (isnan(_3755) ? 1.0 : min(_3755, 1.0));
    float _3766 = isnan(0.0) ? _539 : (isnan(_539) ? 0.0 : max(_539, 0.0));
    float _625 = isnan(1.0) ? _3766 : (isnan(_3766) ? 1.0 : min(_3766, 1.0));
    float _3777 = isnan(0.0) ? _437 : (isnan(_437) ? 0.0 : max(_437, 0.0));
    float _626 = isnan(1.0) ? _3777 : (isnan(_3777) ? 1.0 : min(_3777, 1.0));
    float _3788 = isnan(0.0) ? _438 : (isnan(_438) ? 0.0 : max(_438, 0.0));
    float _627 = isnan(1.0) ? _3788 : (isnan(_3788) ? 1.0 : min(_3788, 1.0));
    float _3799 = isnan(0.0) ? _439 : (isnan(_439) ? 0.0 : max(_439, 0.0));
    float _628 = isnan(1.0) ? _3799 : (isnan(_3799) ? 1.0 : min(_3799, 1.0));
    float _3810 = isnan(0.0) ? _471 : (isnan(_471) ? 0.0 : max(_471, 0.0));
    float _629 = isnan(1.0) ? _3810 : (isnan(_3810) ? 1.0 : min(_3810, 1.0));
    float _637 = cbMatDynParam._m0[9u].x * _626;
    float _638 = cbMatDynParam._m0[9u].y * _627;
    float _639 = cbMatDynParam._m0[9u].z * _628;
    float _646 = inversesqrt(dot(vec3(_293, _294, _295), vec3(_293, _294, _295)));
    float _647 = _646 * _293;
    float _648 = _646 * _294;
    float _649 = _646 * _295;
    float _650 = dot(vec3(_621, _622, _623), vec3(_647, _648, _649));
    float _656 = abs(exp2(log2(_650) * cbMatDynParam._m0[12u].x));
    float _657 = isnan(0.100000001490116119384765625) ? _656 : (isnan(_656) ? 0.100000001490116119384765625 : max(_656, 0.100000001490116119384765625));
    float _663 = ((isnan(0.699999988079071044921875) ? _657 : (isnan(_657) ? 0.699999988079071044921875 : min(_657, 0.699999988079071044921875))) + (-0.100000001490116119384765625)) * 1.66666662693023681640625;
    float _685 = 1.0 - cbMatDynParam._m0[8u].w;
    float _3831 = isnan(0.0) ? _685 : (isnan(_685) ? 0.0 : max(_685, 0.0));
    float _688 = 1.0 - cbMatDynParam._m0[7u].w;
    float _3842 = isnan(0.0) ? _688 : (isnan(_688) ? 0.0 : max(_688, 0.0));
    float _689 = isnan(1.0) ? _3842 : (isnan(_3842) ? 1.0 : min(_3842, 1.0));
    float _692 = (((isnan(1.0) ? _3831 : (isnan(_3831) ? 1.0 : min(_3831, 1.0))) - _689) * _663) + _689;
    float _711 = dot(vec3(_621, _622, _623), vec3(0.0, -1.0, 0.0));
    float _3853 = isnan(0.0) ? _711 : (isnan(_711) ? 0.0 : max(_711, 0.0));
    float _714 = isnan(1.0) ? _3853 : (isnan(_3853) ? 1.0 : min(_3853, 1.0));
    float _721 = (_714 * _626) * cbMatDynParam._m0[11u].x;
    float _723 = (_714 * _627) * cbMatDynParam._m0[11u].y;
    float _725 = (_714 * _628) * cbMatDynParam._m0[11u].z;
    float _732 = dot(vec3(_647, _648, _649), vec3(_621, _622, _623));
    float _735 = _732 * 2.0;
    float _745 = dot(vec3((-0.0) - (_647 - (_735 * _621)), (-0.0) - (_648 - (_735 * _622)), (-0.0) - (_649 - (_735 * _623))), vec3(0.0, -1.0, 0.0));
    float _3864 = isnan(0.0) ? _745 : (isnan(_745) ? 0.0 : max(_745, 0.0));
    float _752 = exp2(log2(isnan(1.0) ? _3864 : (isnan(_3864) ? 1.0 : min(_3864, 1.0))) * 4.0);
    float _778 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _784 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _785 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _787 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _789 = _787.w;
    float _808 = fma(_623, cbSceneParam._m0[5u].z, fma(_622, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _621));
    float _811 = fma(_623, cbSceneParam._m0[6u].z, fma(_622, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _621));
    float _814 = fma(_623, cbSceneParam._m0[7u].z, fma(_622, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _621));
    vec4 _816 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _818 = _816.x;
    float _830 = (((_816.y - _625) + (_816.w * _625)) * cbMtdParam._m0[3u].x) + _625;
    vec4 _831 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _847 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3(cbMtdParam._m0[3u].x * (_818 * _818)), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * _831.z;
    float _855 = (((cbMatDynParam._m0[15u].x - _629) * cbMatDynParam._m0[15u].w) * _847) + _629;
    float _863 = ((_847 * cbMatDynParam._m0[16u].z) * (cbMatDynParam._m0[16u].x - _830)) + _830;
    uint _887 = uint(roundEven(NORMAL.w)) * 13u;
    uint _888 = _887 + 9u;
    uint _889 = _888 + uint(cbMatDynParam._m0[0u].w);
    float _895 = (cbMtdParam._m0[0u].x * _637) * cbInstanceData._m0[_889].x;
    float _896 = (cbMtdParam._m0[0u].y * _638) * cbInstanceData._m0[_889].y;
    float _897 = (cbMtdParam._m0[0u].z * _639) * cbInstanceData._m0[_889].z;
    float _3875 = isnan(0.0) ? _895 : (isnan(_895) ? 0.0 : max(_895, 0.0));
    float _898 = isnan(1.0) ? _3875 : (isnan(_3875) ? 1.0 : min(_3875, 1.0));
    float _3886 = isnan(0.0) ? _896 : (isnan(_896) ? 0.0 : max(_896, 0.0));
    float _899 = isnan(1.0) ? _3886 : (isnan(_3886) ? 1.0 : min(_3886, 1.0));
    float _3897 = isnan(0.0) ? _897 : (isnan(_897) ? 0.0 : max(_897, 0.0));
    float _900 = isnan(1.0) ? _3897 : (isnan(_3897) ? 1.0 : min(_3897, 1.0));
    vec4 _901 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _906 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _917 = (((_906.x - _855) + (_906.w * _855)) * cbMtdParam._m0[3u].x) + _855;
    float _930 = (cbMtdParam._m0[3u].x * (((_898 * _789) - _898) + _901.x)) + _898;
    float _931 = (cbMtdParam._m0[3u].x * (((_899 * _789) - _899) + _901.y)) + _899;
    float _932 = (cbMtdParam._m0[3u].x * (((_900 * _789) - _900) + _901.z)) + _900;
    vec4 _933 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _946 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3((_855 * (_637 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625, (_855 * (_638 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625, (_855 * (_639 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * _933.z;
    float _950 = _946 * cbMatDynParam._m0[13u].w;
    float _960 = (_950 * (cbMatDynParam._m0[13u].x - _930)) + _930;
    float _961 = (_950 * (cbMatDynParam._m0[13u].y - _931)) + _931;
    float _962 = (_950 * (cbMatDynParam._m0[13u].z - _932)) + _932;
    float _970 = ((_946 * cbMatDynParam._m0[15u].w) * (cbMatDynParam._m0[15u].x - _917)) + _917;
    float _971 = 1.0 - _970;
    float _972 = _971 * _960;
    float _973 = _971 * _961;
    float _974 = _971 * _962;
    float _978 = (_960 + (-0.039999999105930328369140625)) * _970;
    float _979 = (_961 + (-0.039999999105930328369140625)) * _970;
    float _980 = (_962 + (-0.039999999105930328369140625)) * _970;
    float _981 = _978 + 0.039999999105930328369140625;
    float _982 = _979 + 0.039999999105930328369140625;
    float _983 = _980 + 0.039999999105930328369140625;
    vec4 _992 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _784, cbSceneParam._m0[86u].y * _785));
    float _995 = _992.x * TEXCOORD_4;
    float _996 = _650 * 2.0;
    float _1000 = (_996 * _621) - _647;
    float _1001 = (_996 * _622) - _648;
    float _1002 = (_996 * _623) - _649;
    float _1003 = abs(_732);
    float _3908 = isnan(0.0) ? _1003 : (isnan(_1003) ? 0.0 : max(_1003, 0.0));
    float _1005 = sqrt(_863);
    float _1016 = exp2((_1005 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3908 : (isnan(_3908) ? 1.0 : min(_3908, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1005 * 3.0));
    float _1022 = (1.0 - _1016) * ((_1005 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1023 = _1016 * _1005;
    float _1051 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1055 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1059 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1361;
    float _1363;
    float _1364;
    float _1365;
    float _1366;
    float _1367;
    float _1368;
    float _1369;
    float _1370;
    float _1371;
    float _1372;
    float _1373;
    float _1374;
    float _1375;
    float _1376;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1086 = fma(_1059, cbModelParam._m0[26u].z, fma(_1055, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1051));
        float _1090 = fma(_1059, cbModelParam._m0[27u].z, fma(_1055, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1051));
        float _1094 = fma(_1059, cbModelParam._m0[28u].z, fma(_1055, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1051));
        float _1119 = _1051 + _621;
        float _1120 = _1055 + _622;
        float _1121 = _1059 + _623;
        float _1131 = fma(_1121, cbModelParam._m0[26u].z, fma(_1120, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1119)) - _1086;
        float _1132 = fma(_1121, cbModelParam._m0[27u].z, fma(_1120, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1119)) - _1090;
        float _1133 = fma(_1121, cbModelParam._m0[28u].z, fma(_1120, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1119)) - _1094;
        float _1137 = inversesqrt(dot(vec3(_1131, _1132, _1133), vec3(_1131, _1132, _1133)));
        float _1150 = ((_1137 * _1131) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1086 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1151 = ((_1137 * _1132) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1090 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1152 = ((_1137 * _1133) / cbModelParam._m0[34u].z) + ((((((_1094 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1155 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1150, _1151, _1152), 0.0);
        vec4 _1162 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1150, _1151, _1152), 0.0);
        vec4 _1169 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1150, _1151, _1152), 0.0);
        vec4 _1176 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1150, _1151, _1152), 0.0);
        float _1189 = exp2((_1155.w + (-0.5)) * 20.0) * 2.0;
        float _1190 = _1189 * (_1155.x + (-0.5));
        float _1191 = _1189 * (_1155.y + (-0.5));
        float _1192 = _1189 * (_1155.z + (-0.5));
        float _1199 = exp2((_1162.w + (-0.5)) * 20.0) * 2.0;
        float _1200 = _1199 * (_1162.x + (-0.5));
        float _1201 = _1199 * (_1162.y + (-0.5));
        float _1202 = _1199 * (_1162.z + (-0.5));
        float _1209 = exp2((_1169.w + (-0.5)) * 20.0) * 2.0;
        float _1210 = _1209 * (_1169.x + (-0.5));
        float _1211 = _1209 * (_1169.y + (-0.5));
        float _1212 = _1209 * (_1169.z + (-0.5));
        float _1219 = exp2((_1176.w + (-0.5)) * 20.0) * 2.0;
        float _1220 = _1219 * (_1176.x + (-0.5));
        float _1221 = _1219 * (_1176.y + (-0.5));
        float _1222 = _1219 * (_1176.z + (-0.5));
        float _1223 = isnan(0.0) ? _1220 : (isnan(_1220) ? 0.0 : max(_1220, 0.0));
        float _1224 = isnan(0.0) ? _1221 : (isnan(_1221) ? 0.0 : max(_1221, 0.0));
        float _1225 = isnan(0.0) ? _1222 : (isnan(_1222) ? 0.0 : max(_1222, 0.0));
        float _1226 = _1190 * 0.5;
        float _1227 = _1200 * 0.5;
        float _1228 = _1210 * 0.5;
        float _1229 = dot(vec3(_1226, _1227, _1228), vec3(_1226, _1227, _1228));
        float _1234 = (_1229 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1229);
        float _1243 = (dot(vec3(_621, _622, _623), vec3(_1234 * _1226, _1234 * _1227, _1234 * _1228)) + 1.0) * 0.5;
        float _3934 = isnan(0.0) ? _1243 : (isnan(_1243) ? 0.0 : max(_1243, 0.0));
        float _1253 = sqrt(((_1227 * _1227) + (_1226 * _1226)) + (_1228 * _1228)) / (_1223 + 9.9999997473787516355514526367188e-06);
        float _3945 = isnan(0.0) ? _1253 : (isnan(_1253) ? 0.0 : max(_1253, 0.0));
        float _1254 = isnan(1.0) ? _3945 : (isnan(_3945) ? 1.0 : min(_3945, 1.0));
        float _1255 = _1254 * 2.0;
        float _1259 = (1.0 - _1254) / (_1254 + 1.0);
        float _3956 = isnan(0.0) ? _1259 : (isnan(_1259) ? 0.0 : max(_1259, 0.0));
        float _1260 = isnan(1.0) ? _3956 : (isnan(_3956) ? 1.0 : min(_3956, 1.0));
        float _1269 = ((((1.0 - _1260) * (_1255 + 2.0)) * exp2(log2(isnan(1.0) ? _3934 : (isnan(_3934) ? 1.0 : min(_3934, 1.0))) * (_1255 + 1.0))) + _1260) * _1223;
        float _1270 = _1191 * 0.5;
        float _1271 = _1201 * 0.5;
        float _1272 = _1211 * 0.5;
        float _1273 = dot(vec3(_1270, _1271, _1272), vec3(_1270, _1271, _1272));
        float _1278 = (_1273 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1273);
        float _1286 = (dot(vec3(_621, _622, _623), vec3(_1278 * _1270, _1278 * _1271, _1278 * _1272)) + 1.0) * 0.5;
        float _3967 = isnan(0.0) ? _1286 : (isnan(_1286) ? 0.0 : max(_1286, 0.0));
        float _1295 = sqrt(((_1271 * _1271) + (_1270 * _1270)) + (_1272 * _1272)) / (_1224 + 9.9999997473787516355514526367188e-06);
        float _3978 = isnan(0.0) ? _1295 : (isnan(_1295) ? 0.0 : max(_1295, 0.0));
        float _1296 = isnan(1.0) ? _3978 : (isnan(_3978) ? 1.0 : min(_3978, 1.0));
        float _1297 = _1296 * 2.0;
        float _1301 = (1.0 - _1296) / (_1296 + 1.0);
        float _3989 = isnan(0.0) ? _1301 : (isnan(_1301) ? 0.0 : max(_1301, 0.0));
        float _1302 = isnan(1.0) ? _3989 : (isnan(_3989) ? 1.0 : min(_3989, 1.0));
        float _1311 = ((((1.0 - _1302) * (_1297 + 2.0)) * exp2(log2(isnan(1.0) ? _3967 : (isnan(_3967) ? 1.0 : min(_3967, 1.0))) * (_1297 + 1.0))) + _1302) * _1224;
        float _1312 = _1192 * 0.5;
        float _1313 = _1202 * 0.5;
        float _1314 = _1212 * 0.5;
        float _1315 = dot(vec3(_1312, _1313, _1314), vec3(_1312, _1313, _1314));
        float _1320 = (_1315 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1315);
        float _1328 = (dot(vec3(_621, _622, _623), vec3(_1320 * _1312, _1320 * _1313, _1320 * _1314)) + 1.0) * 0.5;
        float _4000 = isnan(0.0) ? _1328 : (isnan(_1328) ? 0.0 : max(_1328, 0.0));
        float _1337 = sqrt(((_1313 * _1313) + (_1312 * _1312)) + (_1314 * _1314)) / (_1225 + 9.9999997473787516355514526367188e-06);
        float _4011 = isnan(0.0) ? _1337 : (isnan(_1337) ? 0.0 : max(_1337, 0.0));
        float _1338 = isnan(1.0) ? _4011 : (isnan(_4011) ? 1.0 : min(_4011, 1.0));
        float _1339 = _1338 * 2.0;
        float _1343 = (1.0 - _1338) / (_1338 + 1.0);
        float _4022 = isnan(0.0) ? _1343 : (isnan(_1343) ? 0.0 : max(_1343, 0.0));
        float _1344 = isnan(1.0) ? _4022 : (isnan(_4022) ? 1.0 : min(_4022, 1.0));
        float _1353 = ((((1.0 - _1344) * (_1339 + 2.0)) * exp2(log2(isnan(1.0) ? _4000 : (isnan(_4000) ? 1.0 : min(_4000, 1.0))) * (_1339 + 1.0))) + _1344) * _1225;
        _1361 = _1192;
        _1363 = _1191;
        _1364 = _1190;
        _1365 = _1202;
        _1366 = _1201;
        _1367 = _1200;
        _1368 = _1212;
        _1369 = _1211;
        _1370 = _1210;
        _1371 = _1225;
        _1372 = _1224;
        _1373 = _1223;
        _1374 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1269 : (isnan(_1269) ? 0.0 : max(_1269, 0.0)));
        _1375 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1311 : (isnan(_1311) ? 0.0 : max(_1311, 0.0)));
        _1376 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1353 : (isnan(_1353) ? 0.0 : max(_1353, 0.0)));
    }
    else
    {
        _1361 = _1362;
        _1363 = _1362;
        _1364 = _1362;
        _1365 = _1362;
        _1366 = _1362;
        _1367 = _1362;
        _1368 = _1362;
        _1369 = _1362;
        _1370 = _1362;
        _1371 = _1362;
        _1372 = _1362;
        _1373 = _1362;
        _1374 = 0.0;
        _1375 = 0.0;
        _1376 = 0.0;
    }
    float _1671;
    float _1672;
    float _1673;
    float _1674;
    float _1675;
    float _1676;
    float _1677;
    float _1678;
    float _1679;
    float _1680;
    float _1681;
    float _1682;
    float _1683;
    float _1684;
    float _1685;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1402 = fma(_1059, cbModelParam._m0[30u].z, fma(_1055, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1051));
        float _1406 = fma(_1059, cbModelParam._m0[31u].z, fma(_1055, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1051));
        float _1410 = fma(_1059, cbModelParam._m0[32u].z, fma(_1055, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1051));
        float _1433 = _1051 + _621;
        float _1434 = _1055 + _622;
        float _1435 = _1059 + _623;
        float _1445 = fma(_1435, cbModelParam._m0[30u].z, fma(_1434, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1433)) - _1402;
        float _1446 = fma(_1435, cbModelParam._m0[31u].z, fma(_1434, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1433)) - _1406;
        float _1447 = fma(_1435, cbModelParam._m0[32u].z, fma(_1434, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1433)) - _1410;
        float _1451 = inversesqrt(dot(vec3(_1445, _1446, _1447), vec3(_1445, _1446, _1447)));
        float _1464 = ((_1451 * _1445) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1402 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1465 = ((_1451 * _1446) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1406 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1466 = ((_1451 * _1447) / cbModelParam._m0[35u].z) + ((((((_1410 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1468 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1464, _1465, _1466), 0.0);
        vec4 _1475 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1464, _1465, _1466), 0.0);
        vec4 _1482 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1464, _1465, _1466), 0.0);
        vec4 _1489 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1464, _1465, _1466), 0.0);
        float _1501 = exp2((_1468.w + (-0.5)) * 20.0) * 2.0;
        float _1502 = _1501 * (_1468.x + (-0.5));
        float _1503 = _1501 * (_1468.y + (-0.5));
        float _1504 = _1501 * (_1468.z + (-0.5));
        float _1511 = exp2((_1475.w + (-0.5)) * 20.0) * 2.0;
        float _1512 = _1511 * (_1475.x + (-0.5));
        float _1513 = _1511 * (_1475.y + (-0.5));
        float _1514 = _1511 * (_1475.z + (-0.5));
        float _1521 = exp2((_1482.w + (-0.5)) * 20.0) * 2.0;
        float _1522 = _1521 * (_1482.x + (-0.5));
        float _1523 = _1521 * (_1482.y + (-0.5));
        float _1524 = _1521 * (_1482.z + (-0.5));
        float _1531 = exp2((_1489.w + (-0.5)) * 20.0) * 2.0;
        float _1532 = _1531 * (_1489.x + (-0.5));
        float _1533 = _1531 * (_1489.y + (-0.5));
        float _1534 = _1531 * (_1489.z + (-0.5));
        float _1535 = isnan(0.0) ? _1532 : (isnan(_1532) ? 0.0 : max(_1532, 0.0));
        float _1536 = isnan(0.0) ? _1533 : (isnan(_1533) ? 0.0 : max(_1533, 0.0));
        float _1537 = isnan(0.0) ? _1534 : (isnan(_1534) ? 0.0 : max(_1534, 0.0));
        float _1538 = _1502 * 0.5;
        float _1539 = _1512 * 0.5;
        float _1540 = _1522 * 0.5;
        float _1541 = dot(vec3(_1538, _1539, _1540), vec3(_1538, _1539, _1540));
        float _1546 = (_1541 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1541);
        float _1554 = (dot(vec3(_621, _622, _623), vec3(_1546 * _1538, _1546 * _1539, _1546 * _1540)) + 1.0) * 0.5;
        float _4063 = isnan(0.0) ? _1554 : (isnan(_1554) ? 0.0 : max(_1554, 0.0));
        float _1563 = sqrt(((_1539 * _1539) + (_1538 * _1538)) + (_1540 * _1540)) / (_1535 + 9.9999997473787516355514526367188e-06);
        float _4074 = isnan(0.0) ? _1563 : (isnan(_1563) ? 0.0 : max(_1563, 0.0));
        float _1564 = isnan(1.0) ? _4074 : (isnan(_4074) ? 1.0 : min(_4074, 1.0));
        float _1565 = _1564 * 2.0;
        float _1569 = (1.0 - _1564) / (_1564 + 1.0);
        float _4085 = isnan(0.0) ? _1569 : (isnan(_1569) ? 0.0 : max(_1569, 0.0));
        float _1570 = isnan(1.0) ? _4085 : (isnan(_4085) ? 1.0 : min(_4085, 1.0));
        float _1579 = ((((1.0 - _1570) * (_1565 + 2.0)) * exp2(log2(isnan(1.0) ? _4063 : (isnan(_4063) ? 1.0 : min(_4063, 1.0))) * (_1565 + 1.0))) + _1570) * _1535;
        float _1580 = _1503 * 0.5;
        float _1581 = _1513 * 0.5;
        float _1582 = _1523 * 0.5;
        float _1583 = dot(vec3(_1580, _1581, _1582), vec3(_1580, _1581, _1582));
        float _1588 = (_1583 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1583);
        float _1596 = (dot(vec3(_621, _622, _623), vec3(_1588 * _1580, _1588 * _1581, _1588 * _1582)) + 1.0) * 0.5;
        float _4096 = isnan(0.0) ? _1596 : (isnan(_1596) ? 0.0 : max(_1596, 0.0));
        float _1605 = sqrt(((_1581 * _1581) + (_1580 * _1580)) + (_1582 * _1582)) / (_1536 + 9.9999997473787516355514526367188e-06);
        float _4107 = isnan(0.0) ? _1605 : (isnan(_1605) ? 0.0 : max(_1605, 0.0));
        float _1606 = isnan(1.0) ? _4107 : (isnan(_4107) ? 1.0 : min(_4107, 1.0));
        float _1607 = _1606 * 2.0;
        float _1611 = (1.0 - _1606) / (_1606 + 1.0);
        float _4118 = isnan(0.0) ? _1611 : (isnan(_1611) ? 0.0 : max(_1611, 0.0));
        float _1612 = isnan(1.0) ? _4118 : (isnan(_4118) ? 1.0 : min(_4118, 1.0));
        float _1621 = ((((1.0 - _1612) * (_1607 + 2.0)) * exp2(log2(isnan(1.0) ? _4096 : (isnan(_4096) ? 1.0 : min(_4096, 1.0))) * (_1607 + 1.0))) + _1612) * _1536;
        float _1622 = _1504 * 0.5;
        float _1623 = _1514 * 0.5;
        float _1624 = _1524 * 0.5;
        float _1625 = dot(vec3(_1622, _1623, _1624), vec3(_1622, _1623, _1624));
        float _1630 = (_1625 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1625);
        float _1638 = (dot(vec3(_621, _622, _623), vec3(_1630 * _1622, _1630 * _1623, _1630 * _1624)) + 1.0) * 0.5;
        float _4129 = isnan(0.0) ? _1638 : (isnan(_1638) ? 0.0 : max(_1638, 0.0));
        float _1647 = sqrt(((_1623 * _1623) + (_1622 * _1622)) + (_1624 * _1624)) / (_1537 + 9.9999997473787516355514526367188e-06);
        float _4140 = isnan(0.0) ? _1647 : (isnan(_1647) ? 0.0 : max(_1647, 0.0));
        float _1648 = isnan(1.0) ? _4140 : (isnan(_4140) ? 1.0 : min(_4140, 1.0));
        float _1649 = _1648 * 2.0;
        float _1653 = (1.0 - _1648) / (_1648 + 1.0);
        float _4151 = isnan(0.0) ? _1653 : (isnan(_1653) ? 0.0 : max(_1653, 0.0));
        float _1654 = isnan(1.0) ? _4151 : (isnan(_4151) ? 1.0 : min(_4151, 1.0));
        float _1663 = ((((1.0 - _1654) * (_1649 + 2.0)) * exp2(log2(isnan(1.0) ? _4129 : (isnan(_4129) ? 1.0 : min(_4129, 1.0))) * (_1649 + 1.0))) + _1654) * _1537;
        _1671 = _1504;
        _1672 = _1503;
        _1673 = _1502;
        _1674 = _1514;
        _1675 = _1513;
        _1676 = _1512;
        _1677 = _1524;
        _1678 = _1523;
        _1679 = _1522;
        _1680 = _1537;
        _1681 = _1536;
        _1682 = _1535;
        _1683 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1579 : (isnan(_1579) ? 0.0 : max(_1579, 0.0)));
        _1684 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1621 : (isnan(_1621) ? 0.0 : max(_1621, 0.0)));
        _1685 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1663 : (isnan(_1663) ? 0.0 : max(_1663, 0.0)));
    }
    else
    {
        _1671 = _1362;
        _1672 = _1362;
        _1673 = _1362;
        _1674 = _1362;
        _1675 = _1362;
        _1676 = _1362;
        _1677 = _1362;
        _1678 = _1362;
        _1679 = _1362;
        _1680 = _1362;
        _1681 = _1362;
        _1682 = _1362;
        _1683 = 0.0;
        _1684 = 0.0;
        _1685 = 0.0;
    }
    float _1695 = (cbModelParam._m0[1u].x * (_1683 - _1374)) + _1374;
    float _1696 = (cbModelParam._m0[1u].x * (_1684 - _1375)) + _1375;
    float _1697 = (cbModelParam._m0[1u].x * (_1685 - _1376)) + _1376;
    float _1718 = fma(_1697, cbSceneParam._m0[89u].z, fma(_1696, cbSceneParam._m0[89u].y, _1695 * cbSceneParam._m0[89u].x));
    float _1721 = fma(_1697, cbSceneParam._m0[90u].z, fma(_1696, cbSceneParam._m0[90u].y, _1695 * cbSceneParam._m0[90u].x));
    float _1724 = fma(_1697, cbSceneParam._m0[91u].z, fma(_1696, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1695));
    float _1739 = _1000 * 0.5;
    float _1740 = _1001 * 0.5;
    float _1741 = _1002 * 0.5;
    float _1742 = dot(vec4(_1739, _1740, _1741, 1.0), vec4(_1673, _1676, _1679, _1682));
    float _1745 = dot(vec4(_1739, _1740, _1741, 1.0), vec4(_1672, _1675, _1678, _1681));
    float _1748 = dot(vec4(_1739, _1740, _1741, 1.0), vec4(_1671, _1674, _1677, _1680));
    float _1779;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1755 = dot(vec4(_1739, _1740, _1741, 1.0), vec4(_1361, _1365, _1368, _1371));
        float _1759 = dot(vec4(_1739, _1740, _1741, 1.0), vec4(_1363, _1366, _1369, _1372));
        float _1763 = dot(vec4(_1739, _1740, _1741, 1.0), vec4(_1364, _1367, _1370, _1373));
        float _1770 = dot(vec4(cbModelParam._m0[39u]), vec4(_1739, _1740, _1741, 1.0));
        _1779 = dot(vec3(isnan(0.0) ? _1763 : (isnan(_1763) ? 0.0 : max(_1763, 0.0)), isnan(0.0) ? _1759 : (isnan(_1759) ? 0.0 : max(_1759, 0.0)), isnan(0.0) ? _1755 : (isnan(_1755) ? 0.0 : max(_1755, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1770) ? 0.0 : (isnan(0.0) ? _1770 : max(0.0, _1770))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1779 = 1.0;
    }
    float _1790;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1781 = dot(vec4(cbModelParam._m0[40u]), vec4(_1739, _1740, _1741, 1.0));
        _1790 = dot(vec3(isnan(0.0) ? _1742 : (isnan(_1742) ? 0.0 : max(_1742, 0.0)), isnan(0.0) ? _1745 : (isnan(_1745) ? 0.0 : max(_1745, 0.0)), isnan(0.0) ? _1748 : (isnan(_1748) ? 0.0 : max(_1748, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1781) ? 0.0 : (isnan(0.0) ? _1781 : max(0.0, _1781))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1790 = 1.0;
    }
    float _1794 = (_1790 * cbModelParam._m0[1u].x) + (_1779 * (1.0 - cbModelParam._m0[1u].x));
    float _1804 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _863);
    float _1805 = isnan(_1804) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1804 : min(cbModelParam._m0[25u].z, _1804));
    float _1885;
    float _1887;
    float _1889;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1852 = fma(_1059, cbModelParam._m0[13u].z, fma(_1055, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1051)) + cbModelParam._m0[13u].w;
        float _1856 = fma(_1059, cbModelParam._m0[14u].z, fma(_1055, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1051)) + cbModelParam._m0[14u].w;
        float _1860 = fma(_1059, cbModelParam._m0[15u].z, fma(_1055, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1051)) + cbModelParam._m0[15u].w;
        float _1863 = fma(_1002, cbModelParam._m0[13u].z, fma(_1001, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1000));
        float _1866 = fma(_1002, cbModelParam._m0[14u].z, fma(_1001, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1000));
        float _1869 = fma(_1002, cbModelParam._m0[15u].z, fma(_1001, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1000));
        float _1897;
        if (_1863 > 0.0)
        {
            _1897 = abs((1.0 - _1852) / _1863);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1863 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1852 + 1.0) / _1863);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1897 = frontier_phi_16_14_ladder;
        }
        float _2101;
        if (_1866 > 0.0)
        {
            _2101 = abs((1.0 - _1856) / _1866);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1866 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1856 + 1.0) / _1866);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2101 = frontier_phi_25_21_ladder;
        }
        float _2355;
        if (_1869 > 0.0)
        {
            _2355 = abs((1.0 - _1860) / _1869);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1869 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1860 + 1.0) / _1869);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2355 = frontier_phi_37_32_ladder;
        }
        float _2357 = isnan(_2101) ? _1897 : (isnan(_1897) ? _2101 : min(_1897, _2101));
        float _2358 = isnan(_2355) ? _2357 : (isnan(_2357) ? _2355 : min(_2357, _2355));
        float _2362 = (_2358 * _1863) + _1852;
        float _2363 = (_2358 * _1866) + _1856;
        float _2364 = (_2358 * _1869) + _1860;
        float _2365 = _2358 * 9.9999997473787516355514526367188e-05;
        float _2367 = (-1.0) - _2365;
        float _2369 = _2365 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_2364 > _2369) || ((_2364 < _2367) || ((_2363 > _2369) || ((_2363 < _2367) || ((_2362 < _2367) || (_2362 > _2369))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2492 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2364, cbModelParam._m0[9u].z, fma(_2363, cbModelParam._m0[9u].y, _2362 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2364, cbModelParam._m0[10u].z, fma(_2363, cbModelParam._m0[10u].y, _2362 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2364, cbModelParam._m0[11u].z, fma(_2363, cbModelParam._m0[11u].y, _2362 * cbModelParam._m0[11u].x))), _1805);
            frontier_phi_15_37_ladder = _2492.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2492.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2492.x * cbModelParam._m0[1u].y;
        }
        _1885 = frontier_phi_15_37_ladder_2;
        _1887 = frontier_phi_15_37_ladder_1;
        _1889 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1873 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1000, _1001, _1002), _1805);
        _1885 = _1873.x * cbModelParam._m0[1u].y;
        _1887 = _1873.y * cbModelParam._m0[1u].y;
        _1889 = _1873.z * cbModelParam._m0[1u].y;
    }
    float _1893 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _863);
    float _1894 = isnan(_1893) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1893 : min(cbModelParam._m0[25u].w, _1893));
    float _1985;
    float _1987;
    float _1989;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1949 = fma(_1059, cbModelParam._m0[21u].z, fma(_1055, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1051)) + cbModelParam._m0[21u].w;
        float _1953 = fma(_1059, cbModelParam._m0[22u].z, fma(_1055, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1051)) + cbModelParam._m0[22u].w;
        float _1957 = fma(_1059, cbModelParam._m0[23u].z, fma(_1055, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1051)) + cbModelParam._m0[23u].w;
        float _1960 = fma(_1002, cbModelParam._m0[21u].z, fma(_1001, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1000));
        float _1963 = fma(_1002, cbModelParam._m0[22u].z, fma(_1001, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1000));
        float _1966 = fma(_1002, cbModelParam._m0[23u].z, fma(_1001, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1000));
        float _2106;
        if (_1960 > 0.0)
        {
            _2106 = abs((1.0 - _1949) / _1960);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1960 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1949 + 1.0) / _1960);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _2106 = frontier_phi_27_23_ladder;
        }
        float _2382;
        if (_1963 > 0.0)
        {
            _2382 = abs((1.0 - _1953) / _1963);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1963 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1953 + 1.0) / _1963);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _2382 = frontier_phi_39_34_ladder;
        }
        float _2595;
        if (_1966 > 0.0)
        {
            _2595 = abs((1.0 - _1957) / _1966);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1966 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1957 + 1.0) / _1966);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _2595 = frontier_phi_48_45_ladder;
        }
        float _2597 = isnan(_2382) ? _2106 : (isnan(_2106) ? _2382 : min(_2106, _2382));
        float _2598 = isnan(_2595) ? _2597 : (isnan(_2597) ? _2595 : min(_2597, _2595));
        float _2602 = (_2598 * _1960) + _1949;
        float _2603 = (_2598 * _1963) + _1953;
        float _2604 = (_2598 * _1966) + _1957;
        float _2605 = _2598 * 9.9999997473787516355514526367188e-05;
        float _2606 = (-1.0) - _2605;
        float _2608 = _2605 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2604 > _2608) || ((_2604 < _2606) || ((_2603 > _2608) || ((_2603 < _2606) || ((_2602 < _2606) || (_2602 > _2608))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2838 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2604, cbModelParam._m0[17u].z, fma(_2603, cbModelParam._m0[17u].y, _2602 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2604, cbModelParam._m0[18u].z, fma(_2603, cbModelParam._m0[18u].y, _2602 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2604, cbModelParam._m0[19u].z, fma(_2603, cbModelParam._m0[19u].y, _2602 * cbModelParam._m0[19u].x))), _1894);
            frontier_phi_24_48_ladder = _2838.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2838.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2838.x * cbModelParam._m0[1u].z;
        }
        _1985 = frontier_phi_24_48_ladder_2;
        _1987 = frontier_phi_24_48_ladder_1;
        _1989 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1969 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1000, _1001, _1002), _1894);
        _1985 = _1969.x * cbModelParam._m0[1u].z;
        _1987 = _1969.y * cbModelParam._m0[1u].z;
        _1989 = _1969.z * cbModelParam._m0[1u].z;
    }
    float _2002 = (((_1022 * _981) + _1023) * _995) * ((cbModelParam._m0[1u].w * (_1985 - _1885)) + _1885);
    float _2004 = (((_1022 * _982) + _1023) * _995) * ((cbModelParam._m0[1u].w * (_1987 - _1887)) + _1887);
    float _2006 = (((_1022 * _983) + _1023) * _995) * ((cbModelParam._m0[1u].w * (_1989 - _1889)) + _1889);
    float _2009 = fma(_2006, cbSceneParam._m0[89u].z, fma(_2004, cbSceneParam._m0[89u].y, _2002 * cbSceneParam._m0[89u].x));
    float _2012 = fma(_2006, cbSceneParam._m0[90u].z, fma(_2004, cbSceneParam._m0[90u].y, _2002 * cbSceneParam._m0[90u].x));
    float _2015 = fma(_2006, cbSceneParam._m0[91u].z, fma(_2004, cbSceneParam._m0[91u].y, _2002 * cbSceneParam._m0[91u].x));
    uvec4 _2025 = floatBitsToUint(cbInstanceData._m0[_887 + 5u]);
    uint _2027 = _2025.x * 14u;
    uint _2028 = _2027 + 13u;
    float _2035 = _995 + (-1.0);
    float _2040 = (cbLight._m0[_2028].x * _2035) + 1.0;
    float _2041 = (cbLight._m0[_2028].y * _2035) + 1.0;
    float _2042 = (cbLight._m0[_2028].z * _2035) + 1.0;
    float _2043 = (cbLight._m0[_2028].w * _2035) + 1.0;
    uint _2044 = _2027 + 5u;
    float _2050 = isnan(1.0) ? _2041 : (isnan(_2041) ? 1.0 : min(_2041, 1.0));
    uint _2054 = _2027 + 4u;
    float _2060 = isnan(1.0) ? _2040 : (isnan(_2040) ? 1.0 : min(_2040, 1.0));
    uint _2064 = _2027 | 1u;
    float _2075 = dot(vec3(cbLight._m0[_2027].xyz), vec3(_621, _622, _623));
    float _2078 = dot(vec3(cbLight._m0[_2064].xyz), vec3(_621, _622, _623));
    float _4287 = isnan(0.0) ? _2075 : (isnan(_2075) ? 0.0 : max(_2075, 0.0));
    float _4298 = isnan(0.0) ? _2078 : (isnan(_2078) ? 0.0 : max(_2078, 0.0));
    float _2083 = (isnan(1.0) ? _4287 : (isnan(_4287) ? 1.0 : min(_4287, 1.0))) * 0.3183098733425140380859375;
    float _2085 = (isnan(1.0) ? _4298 : (isnan(_4298) ? 1.0 : min(_4298, 1.0))) * 0.3183098733425140380859375;
    float _2092 = ((cbLight._m0[_2044].x * _2050) * _2085) + ((cbLight._m0[_2054].x * _2060) * _2083);
    float _2093 = ((_2050 * cbLight._m0[_2044].y) * _2085) + ((_2060 * cbLight._m0[_2054].y) * _2083);
    float _2094 = ((_2050 * cbLight._m0[_2044].z) * _2085) + ((_2060 * cbLight._m0[_2054].z) * _2083);
    uvec4 _2098 = floatBitsToUint(cbLight._m0[_2027 + 12u]);
    bool _2100 = _2098.x == 0u;
    float _2111;
    float _2113;
    float _2115;
    if (_2100)
    {
        _2111 = _2092;
        _2113 = _2093;
        _2115 = _2094;
    }
    else
    {
        uint _2119 = _2027 + 6u;
        float _2135 = (dot(vec3(cbLight._m0[_2027 + 2u].xyz), vec3(_621, _622, _623)) * 0.5) + 0.5;
        float _2136 = _2135 * _2135;
        float _4309 = isnan(0.0) ? _2136 : (isnan(_2136) ? 0.0 : max(_2136, 0.0));
        float _2137 = isnan(1.0) ? _4309 : (isnan(_4309) ? 1.0 : min(_4309, 1.0));
        float _2138 = isnan(1.0) ? _2042 : (isnan(_2042) ? 1.0 : min(_2042, 1.0));
        _2111 = (((cbLight._m0[_2119].x * 0.3183098733425140380859375) * _2137) * _2138) + _2092;
        _2113 = (((cbLight._m0[_2119].y * 0.3183098733425140380859375) * _2137) * _2138) + _2093;
        _2115 = (((cbLight._m0[_2119].z * 0.3183098733425140380859375) * _2137) * _2138) + _2094;
    }
    bool _2118 = _2098.y == 0u;
    float _2156;
    float _2158;
    float _2160;
    if (_2118)
    {
        _2156 = _2111;
        _2158 = _2113;
        _2160 = _2115;
    }
    else
    {
        uint _2326 = _2027 + 7u;
        float _2342 = (dot(vec3(cbLight._m0[_2027 + 3u].xyz), vec3(_621, _622, _623)) * 0.5) + 0.5;
        float _2343 = _2342 * _2342;
        float _4325 = isnan(0.0) ? _2343 : (isnan(_2343) ? 0.0 : max(_2343, 0.0));
        float _2344 = isnan(1.0) ? _4325 : (isnan(_4325) ? 1.0 : min(_4325, 1.0));
        float _2345 = isnan(1.0) ? _2043 : (isnan(_2043) ? 1.0 : min(_2043, 1.0));
        _2156 = (((cbLight._m0[_2326].x * 0.3183098733425140380859375) * _2344) * _2345) + _2111;
        _2158 = (((cbLight._m0[_2326].y * 0.3183098733425140380859375) * _2344) * _2345) + _2113;
        _2160 = (((cbLight._m0[_2326].z * 0.3183098733425140380859375) * _2344) * _2345) + _2115;
    }
    uint _2163 = _2027 + 8u;
    float _2176 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2027].w)) * _863) * 0.949999988079071044921875);
    float _2177 = _2176 * _2176;
    float _2178 = cbLight._m0[_2027].x + _647;
    float _2179 = cbLight._m0[_2027].y + _648;
    float _2180 = cbLight._m0[_2027].z + _649;
    float _2184 = inversesqrt(dot(vec3(_2178, _2179, _2180), vec3(_2178, _2179, _2180)));
    float _2185 = _2184 * _2178;
    float _2186 = _2184 * _2179;
    float _2187 = _2184 * _2180;
    float _2188 = dot(vec3(_621, _622, _623), vec3(cbLight._m0[_2027].xyz));
    float _4341 = isnan(0.0) ? _2188 : (isnan(_2188) ? 0.0 : max(_2188, 0.0));
    float _2191 = isnan(1.0) ? _4341 : (isnan(_4341) ? 1.0 : min(_4341, 1.0));
    float _4352 = isnan(0.0) ? _650 : (isnan(_650) ? 0.0 : max(_650, 0.0));
    float _2192 = isnan(1.0) ? _4352 : (isnan(_4352) ? 1.0 : min(_4352, 1.0));
    float _2193 = dot(vec3(_621, _622, _623), vec3(_2185, _2186, _2187));
    float _4363 = isnan(0.0) ? _2193 : (isnan(_2193) ? 0.0 : max(_2193, 0.0));
    float _2196 = isnan(1.0) ? _4363 : (isnan(_4363) ? 1.0 : min(_4363, 1.0));
    float _2197 = dot(vec3(cbLight._m0[_2027].xyz), vec3(_2185, _2186, _2187));
    float _4374 = isnan(0.0) ? _2197 : (isnan(_2197) ? 0.0 : max(_2197, 0.0));
    float _2201 = _2177 * _2177;
    float _2205 = ((_2196 * _2196) * (_2201 + (-1.0))) + 1.0;
    float _2213 = exp2(log2(1.0 - (isnan(1.0) ? _4374 : (isnan(_4374) ? 1.0 : min(_4374, 1.0)))) * 5.0);
    float _2214 = 0.959999978542327880859375 - _978;
    float _2216 = 0.959999978542327880859375 - _979;
    float _2217 = 0.959999978542327880859375 - _980;
    float _2224 = 1.0 - _2177;
    float _2235 = (0.5 / (((_2192 * ((_2191 * _2224) + _2177)) + 9.9999999392252902907785028219223e-09) + (((_2192 * _2224) + _2177) * _2191))) * _2191;
    float _4385 = isnan(0.0) ? _2235 : (isnan(_2235) ? 0.0 : max(_2235, 0.0));
    float _2237 = (isnan(1.0) ? _4385 : (isnan(_4385) ? 1.0 : min(_4385, 1.0))) * (_2201 / ((_2205 * _2205) * 3.141590118408203125));
    uint _2248 = _2027 + 9u;
    float _2259 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2064].w)) * _863) * 0.949999988079071044921875);
    float _2260 = _2259 * _2259;
    float _2261 = cbLight._m0[_2064].x + _647;
    float _2262 = cbLight._m0[_2064].y + _648;
    float _2263 = cbLight._m0[_2064].z + _649;
    float _2267 = inversesqrt(dot(vec3(_2261, _2262, _2263), vec3(_2261, _2262, _2263)));
    float _2268 = _2267 * _2261;
    float _2269 = _2267 * _2262;
    float _2270 = _2267 * _2263;
    float _2271 = dot(vec3(_621, _622, _623), vec3(cbLight._m0[_2064].xyz));
    float _4396 = isnan(0.0) ? _2271 : (isnan(_2271) ? 0.0 : max(_2271, 0.0));
    float _2274 = isnan(1.0) ? _4396 : (isnan(_4396) ? 1.0 : min(_4396, 1.0));
    float _2275 = dot(vec3(_621, _622, _623), vec3(_2268, _2269, _2270));
    float _4407 = isnan(0.0) ? _2275 : (isnan(_2275) ? 0.0 : max(_2275, 0.0));
    float _2278 = isnan(1.0) ? _4407 : (isnan(_4407) ? 1.0 : min(_4407, 1.0));
    float _2279 = dot(vec3(cbLight._m0[_2064].xyz), vec3(_2268, _2269, _2270));
    float _4418 = isnan(0.0) ? _2279 : (isnan(_2279) ? 0.0 : max(_2279, 0.0));
    float _2283 = _2260 * _2260;
    float _2287 = ((_2278 * _2278) * (_2283 + (-1.0))) + 1.0;
    float _2294 = exp2(log2(1.0 - (isnan(1.0) ? _4418 : (isnan(_4418) ? 1.0 : min(_4418, 1.0)))) * 5.0);
    float _2301 = 1.0 - _2260;
    float _2311 = (0.5 / (((_2192 * ((_2274 * _2301) + _2260)) + 9.9999999392252902907785028219223e-09) + (((_2192 * _2301) + _2260) * _2274))) * _2274;
    float _4429 = isnan(0.0) ? _2311 : (isnan(_2311) ? 0.0 : max(_2311, 0.0));
    float _2313 = (isnan(1.0) ? _4429 : (isnan(_4429) ? 1.0 : min(_4429, 1.0))) * (_2283 / ((_2287 * _2287) * 3.141590118408203125));
    float _2323 = (((((_2294 * _2214) + _981) * cbLight._m0[_2248].x) * _2313) * _2050) + (((((_2213 * _2214) + _981) * cbLight._m0[_2163].x) * _2237) * _2060);
    float _2324 = (((((_2294 * _2216) + _982) * cbLight._m0[_2248].y) * _2313) * _2050) + (((((_2213 * _2216) + _982) * cbLight._m0[_2163].y) * _2237) * _2060);
    float _2325 = (((((_2294 * _2217) + _983) * cbLight._m0[_2248].z) * _2313) * _2050) + (((((_2213 * _2217) + _983) * cbLight._m0[_2163].z) * _2237) * _2060);
    float _2387;
    float _2389;
    float _2391;
    if (_2100)
    {
        _2387 = _2323;
        _2389 = _2324;
        _2391 = _2325;
    }
    else
    {
        uint _2393 = _2027 + 2u;
        uint _2397 = _2027 + 10u;
        float _2411 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2393].w)) * _863) * 0.949999988079071044921875);
        float _2412 = _2411 * _2411;
        float _2413 = cbLight._m0[_2393].x + _647;
        float _2414 = cbLight._m0[_2393].y + _648;
        float _2415 = cbLight._m0[_2393].z + _649;
        float _2419 = inversesqrt(dot(vec3(_2413, _2414, _2415), vec3(_2413, _2414, _2415)));
        float _2420 = _2419 * _2413;
        float _2421 = _2419 * _2414;
        float _2422 = _2419 * _2415;
        float _2423 = dot(vec3(_621, _622, _623), vec3(cbLight._m0[_2393].xyz));
        float _4440 = isnan(0.0) ? _2423 : (isnan(_2423) ? 0.0 : max(_2423, 0.0));
        float _2426 = isnan(1.0) ? _4440 : (isnan(_4440) ? 1.0 : min(_4440, 1.0));
        float _2427 = dot(vec3(_621, _622, _623), vec3(_2420, _2421, _2422));
        float _4451 = isnan(0.0) ? _2427 : (isnan(_2427) ? 0.0 : max(_2427, 0.0));
        float _2430 = isnan(1.0) ? _4451 : (isnan(_4451) ? 1.0 : min(_4451, 1.0));
        float _2431 = dot(vec3(cbLight._m0[_2393].xyz), vec3(_2420, _2421, _2422));
        float _4462 = isnan(0.0) ? _2431 : (isnan(_2431) ? 0.0 : max(_2431, 0.0));
        float _2435 = _2412 * _2412;
        float _2439 = ((_2430 * _2430) * (_2435 + (-1.0))) + 1.0;
        float _2446 = exp2(log2(1.0 - (isnan(1.0) ? _4462 : (isnan(_4462) ? 1.0 : min(_4462, 1.0)))) * 5.0);
        float _2453 = 1.0 - _2412;
        float _2463 = (0.5 / (((_2192 * ((_2426 * _2453) + _2412)) + 9.9999999392252902907785028219223e-09) + (((_2192 * _2453) + _2412) * _2426))) * _2426;
        float _4473 = isnan(0.0) ? _2463 : (isnan(_2463) ? 0.0 : max(_2463, 0.0));
        float _2465 = (isnan(1.0) ? _4473 : (isnan(_4473) ? 1.0 : min(_4473, 1.0))) * (_2435 / ((_2439 * _2439) * 3.141590118408203125));
        float _2466 = isnan(1.0) ? _2042 : (isnan(_2042) ? 1.0 : min(_2042, 1.0));
        _2387 = (((((_2446 * _2214) + _981) * cbLight._m0[_2397].x) * _2465) * _2466) + _2323;
        _2389 = (((((_2446 * _2216) + _982) * cbLight._m0[_2397].y) * _2465) * _2466) + _2324;
        _2391 = (((((_2446 * _2217) + _983) * cbLight._m0[_2397].z) * _2465) * _2466) + _2325;
    }
    float _2501;
    float _2503;
    float _2505;
    if (_2118)
    {
        _2501 = _2387;
        _2503 = _2389;
        _2505 = _2391;
    }
    else
    {
        uint _2512 = _2027 + 3u;
        uint _2516 = _2027 + 11u;
        float _2530 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2512].w)) * _863) * 0.949999988079071044921875);
        float _2531 = _2530 * _2530;
        float _2532 = cbLight._m0[_2512].x + _647;
        float _2533 = cbLight._m0[_2512].y + _648;
        float _2534 = cbLight._m0[_2512].z + _649;
        float _2538 = inversesqrt(dot(vec3(_2532, _2533, _2534), vec3(_2532, _2533, _2534)));
        float _2539 = _2538 * _2532;
        float _2540 = _2538 * _2533;
        float _2541 = _2538 * _2534;
        float _2542 = dot(vec3(_621, _622, _623), vec3(cbLight._m0[_2512].xyz));
        float _4489 = isnan(0.0) ? _2542 : (isnan(_2542) ? 0.0 : max(_2542, 0.0));
        float _2545 = isnan(1.0) ? _4489 : (isnan(_4489) ? 1.0 : min(_4489, 1.0));
        float _2546 = dot(vec3(_621, _622, _623), vec3(_2539, _2540, _2541));
        float _4500 = isnan(0.0) ? _2546 : (isnan(_2546) ? 0.0 : max(_2546, 0.0));
        float _2549 = isnan(1.0) ? _4500 : (isnan(_4500) ? 1.0 : min(_4500, 1.0));
        float _2550 = dot(vec3(cbLight._m0[_2512].xyz), vec3(_2539, _2540, _2541));
        float _4511 = isnan(0.0) ? _2550 : (isnan(_2550) ? 0.0 : max(_2550, 0.0));
        float _2554 = _2531 * _2531;
        float _2558 = ((_2549 * _2549) * (_2554 + (-1.0))) + 1.0;
        float _2565 = exp2(log2(1.0 - (isnan(1.0) ? _4511 : (isnan(_4511) ? 1.0 : min(_4511, 1.0)))) * 5.0);
        float _2572 = 1.0 - _2531;
        float _2582 = (0.5 / (((_2192 * ((_2545 * _2572) + _2531)) + 9.9999999392252902907785028219223e-09) + (((_2192 * _2572) + _2531) * _2545))) * _2545;
        float _4522 = isnan(0.0) ? _2582 : (isnan(_2582) ? 0.0 : max(_2582, 0.0));
        float _2584 = (isnan(1.0) ? _4522 : (isnan(_4522) ? 1.0 : min(_4522, 1.0))) * (_2554 / ((_2558 * _2558) * 3.141590118408203125));
        float _2585 = isnan(1.0) ? _2043 : (isnan(_2043) ? 1.0 : min(_2043, 1.0));
        _2501 = (((((_2565 * _2214) + _981) * cbLight._m0[_2516].x) * _2584) * _2585) + _2387;
        _2503 = (((((_2565 * _2216) + _982) * cbLight._m0[_2516].y) * _2584) * _2585) + _2389;
        _2505 = (((((_2565 * _2217) + _983) * cbLight._m0[_2516].z) * _2584) * _2585) + _2391;
    }
    float _2719;
    float _2721;
    float _2723;
    float _2725;
    float _2727;
    float _2729;
    if (_2025.y == 0u)
    {
        float _2660 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2661 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2660;
        float _2662 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2660;
        float _2663 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2660;
        uvec4 _2675 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2676 = _2675.x;
        uint _2687 = uint((float(_2675.y) * floor(float(uint(cbSceneParam._m0[85u].y * _785) / _2676))) + floor(float(uint(cbSceneParam._m0[85u].x * _784) / _2676)));
        float _2697 = (log2(_2663 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2698 = isnan(0.0) ? _2697 : (isnan(_2697) ? 0.0 : max(_2697, 0.0));
        uint _2701 = uint(isnan(14.0) ? _2698 : (isnan(_2698) ? 14.0 : min(_2698, 14.0)));
        uvec4 _2706 = texelFetch(g_lightClusterGridBuffer, int(((_2701 << 2u) + (_2687 << 6u)) >> 2u));
        uint _2707 = _2706.x;
        uint _2708 = _2675.z;
        float _2843;
        float _2845;
        float _2847;
        float _2849;
        float _2851;
        float _2853;
        if (((((1u << ((_2708 >> 4u) & 15u)) + 4294967295u) & _2707) == 0u) || ((_2708 & 240u) == 0u))
        {
            _2843 = 0.0;
            _2845 = 0.0;
            _2847 = 0.0;
            _2849 = 0.0;
            _2851 = 0.0;
            _2853 = 0.0;
        }
        else
        {
            float _2844;
            float _2846;
            float _2848;
            float _2850;
            float _2852;
            float _2854;
            float _2996 = 0.0;
            float _2997 = 0.0;
            float _2998 = 0.0;
            float _2999 = 0.0;
            float _3000 = 0.0;
            float _3001 = 0.0;
            uint _3002 = 0u;
            uint _3011;
            bool _3012;
            for (;;)
            {
                _3011 = texelFetch(g_lightClassification, int((((_2701 << 5u) + (_2687 << 9u)) + (_3002 << 2u)) >> 2u)).x;
                _3012 = _3011 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_3012)
                {
                    frontier_phi_63_pred = _3001;
                    frontier_phi_63_pred_1 = _3000;
                    frontier_phi_63_pred_2 = _2999;
                    frontier_phi_63_pred_3 = _2998;
                    frontier_phi_63_pred_4 = _2997;
                    frontier_phi_63_pred_5 = _2996;
                }
                else
                {
                    float _3120;
                    float _3121;
                    float _3122;
                    float _3123;
                    float _3124;
                    float _3125;
                    uint _3126;
                    _3120 = _2996;
                    _3121 = _2997;
                    _3122 = _2998;
                    _3123 = _2999;
                    _3124 = _3000;
                    _3125 = _3001;
                    _3126 = _3011;
                    float _3052;
                    float _3053;
                    float _3054;
                    float _3055;
                    float _3056;
                    float _3057;
                    for (;;)
                    {
                        uint _3130 = uint(findLSB(_3126)) + (_3002 << 5u);
                        uint _3127 = (_3126 + 4294967295u) & _3126;
                        uint _3132 = _3130 * 48u;
                        vec4 _3146 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3132)).x, texelFetch(g_PointLightRenderingBuffer, int(_3132 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3132 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3132 + 3u)).x));
                        uint _3152 = (_3130 * 48u) + 4u;
                        vec4 _3165 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3152)).x, texelFetch(g_PointLightRenderingBuffer, int(_3152 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3152 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3152 + 3u)).x));
                        uint _3171 = (_3130 * 48u) + 8u;
                        vec3 _3182 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3171)).x, texelFetch(g_PointLightRenderingBuffer, int(_3171 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3171 + 2u)).x));
                        float _3186 = _3146.x - _2661;
                        float _3187 = _3146.y - _2662;
                        float _3188 = _3146.z - _2663;
                        float _3189 = dot(vec3(_3186, _3187, _3188), vec3(_3186, _3187, _3188));
                        float _3192 = inversesqrt(_3189);
                        float _3193 = _3192 * _3186;
                        float _3194 = _3192 * _3187;
                        float _3195 = _3192 * _3188;
                        float _3196 = dot(vec3(_808, _811, _814), vec3(_3193, _3194, _3195));
                        float _3201 = 1.0 - (_3189 * _3146.w);
                        float _4548 = isnan(0.0) ? _3201 : (isnan(_3201) ? 0.0 : max(_3201, 0.0));
                        float _3202 = isnan(1.0) ? _4548 : (isnan(_4548) ? 1.0 : min(_4548, 1.0));
                        float _3203 = sqrt(_3189) * _3165.w;
                        float _3206 = 1.39999997615814208984375 / (_3203 + 1.39999997615814208984375);
                        float _3207 = _3206 * _3206;
                        float _3210 = ((1.0 - _3207) * _3196) + _3207;
                        float _3213 = _3203 * _3203;
                        float _3216 = ((isnan(0.0) ? _3210 : (isnan(_3210) ? 0.0 : max(_3210, 0.0))) * _3202) / ((_3213 * 0.699999988079071044921875) + 1.0);
                        float _3220 = (-0.0) - _2661;
                        float _3221 = (-0.0) - _2662;
                        float _3222 = (-0.0) - _2663;
                        float _3226 = inversesqrt(dot(vec3(_3220, _3221, _3222), vec3(_3220, _3221, _3222)));
                        float _3227 = _3226 * _3220;
                        float _3228 = _3226 * _3221;
                        float _3229 = _3226 * _3222;
                        float _3237 = exp2(log2(1.0 / ((_3213 * 3.5) + 5.0)) * 0.25);
                        float _3238 = 1.0 - _1005;
                        float _3245 = sqrt(1.0 - ((1.0 - (_3238 * _3238)) * (1.0 - (_3237 * _3237))));
                        float _3246 = _3245 * _3245;
                        float _3247 = _3246 * _3246;
                        float _3248 = _3227 + _3193;
                        float _3249 = _3228 + _3194;
                        float _3250 = _3229 + _3195;
                        float _3254 = inversesqrt(dot(vec3(_3248, _3249, _3250), vec3(_3248, _3249, _3250)));
                        float _3258 = dot(vec3(_808, _811, _814), vec3(_3227, _3228, _3229));
                        float _4564 = isnan(0.0) ? _3258 : (isnan(_3258) ? 0.0 : max(_3258, 0.0));
                        float _3261 = isnan(1.0) ? _4564 : (isnan(_4564) ? 1.0 : min(_4564, 1.0));
                        float _3262 = dot(vec3(_808, _811, _814), vec3(_3254 * _3248, _3254 * _3249, _3254 * _3250));
                        float _4575 = isnan(0.0) ? _3262 : (isnan(_3262) ? 0.0 : max(_3262, 0.0));
                        float _3265 = isnan(1.0) ? _4575 : (isnan(_4575) ? 1.0 : min(_4575, 1.0));
                        float _3269 = ((_3265 * _3265) * (_3247 + (-1.0))) + 1.0;
                        float _3270 = _3206 * _3246;
                        float _3271 = _3270 * _3270;
                        float _3274 = ((1.0 - _3271) * _3196) + _3271;
                        float _4586 = isnan(0.0) ? _3274 : (isnan(_3274) ? 0.0 : max(_3274, 0.0));
                        float _3275 = isnan(1.0) ? _4586 : (isnan(_4586) ? 1.0 : min(_4586, 1.0));
                        float _3276 = 1.0 - _3246;
                        float _3286 = (0.5 / (((_3275 * ((_3261 * _3276) + _3246)) + 9.9999999392252902907785028219223e-09) + (((_3275 * _3276) + _3246) * _3261))) * _3275;
                        float _4597 = isnan(0.0) ? _3286 : (isnan(_3286) ? 0.0 : max(_3286, 0.0));
                        float _3297 = (((_3247 * 3.1415927410125732421875) * (isnan(1.0) ? _4597 : (isnan(_4597) ? 1.0 : min(_4597, 1.0)))) / ((_3269 * _3269) * ((_3213 * 2.1991131305694580078125) + 3.141590118408203125))) * _3202;
                        _3055 = (_3216 * _3165.x) + _3123;
                        _3056 = (_3216 * _3165.y) + _3124;
                        _3057 = (_3216 * _3165.z) + _3125;
                        _3052 = (_3297 * _3182.x) + _3120;
                        _3053 = (_3297 * _3182.y) + _3121;
                        _3054 = (_3297 * _3182.z) + _3122;
                        if (_3127 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3120 = _3052;
                            _3121 = _3053;
                            _3122 = _3054;
                            _3123 = _3055;
                            _3124 = _3056;
                            _3125 = _3057;
                            _3126 = _3127;
                        }
                    }
                    frontier_phi_63_pred = _3057;
                    frontier_phi_63_pred_1 = _3056;
                    frontier_phi_63_pred_2 = _3055;
                    frontier_phi_63_pred_3 = _3054;
                    frontier_phi_63_pred_4 = _3053;
                    frontier_phi_63_pred_5 = _3052;
                }
                _2854 = frontier_phi_63_pred;
                _2852 = frontier_phi_63_pred_1;
                _2850 = frontier_phi_63_pred_2;
                _2848 = frontier_phi_63_pred_3;
                _2846 = frontier_phi_63_pred_4;
                _2844 = frontier_phi_63_pred_5;
                uint _3003 = _3002 + 1u;
                if (_3003 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2996 = _2844;
                    _2997 = _2846;
                    _2998 = _2848;
                    _2999 = _2850;
                    _3000 = _2852;
                    _3001 = _2854;
                    _3002 = _3003;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2843 = _2844;
            _2845 = _2846;
            _2847 = _2848;
            _2849 = _2850;
            _2851 = _2852;
            _2853 = _2854;
        }
        uvec4 _2857 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2858 = _2857.z;
        uint _2860 = (_2858 >> 8u) & 15u;
        float _2964;
        float _2966;
        float _2968;
        float _2970;
        float _2972;
        float _2974;
        if (((4294967295u << _2860) & _2707) == 0u)
        {
            _2964 = _2843;
            _2966 = _2845;
            _2968 = _2847;
            _2970 = _2849;
            _2972 = _2851;
            _2974 = _2853;
        }
        else
        {
            float _2989 = inversesqrt(dot(vec3(_2661, _2662, _2663), vec3(_2661, _2662, _2663)));
            float _2990 = _2989 * _2661;
            float _2991 = _2989 * _2662;
            float _2992 = _2989 * _2663;
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2860 < ((_2858 >> 12u) & 15u))
            {
                float _2965;
                float _2967;
                float _2969;
                float _2971;
                float _2973;
                float _2975;
                float _3103 = _2843;
                float _3104 = _2845;
                float _3105 = _2847;
                float _3106 = _2849;
                float _3107 = _2851;
                float _3108 = _2853;
                uint _3109 = _2860;
                uint _3118;
                bool _3119;
                for (;;)
                {
                    _3118 = texelFetch(g_lightClassification, int((((_2701 << 5u) + (_2687 << 9u)) + (_3109 << 2u)) >> 2u)).x;
                    _3119 = _3118 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_3119)
                    {
                        frontier_phi_69_pred = _3108;
                        frontier_phi_69_pred_1 = _3107;
                        frontier_phi_69_pred_2 = _3106;
                        frontier_phi_69_pred_3 = _3105;
                        frontier_phi_69_pred_4 = _3104;
                        frontier_phi_69_pred_5 = _3103;
                    }
                    else
                    {
                        float _3302;
                        float _3303;
                        float _3304;
                        float _3305;
                        float _3306;
                        float _3307;
                        float _3597;
                        float _3598;
                        float _3599;
                        float _3600;
                        float _3601;
                        float _3602;
                        float _3315 = _3103;
                        float _3316 = _3104;
                        float _3317 = _3105;
                        float _3318 = _3106;
                        float _3319 = _3107;
                        float _3320 = _3108;
                        uint _3321 = _3118;
                        uint _3322;
                        vec4 _3347;
                        float _3348;
                        vec4 _3363;
                        vec3 _3375;
                        vec4 _3390;
                        vec4 _3406;
                        float _3453;
                        bool _3454;
                        for (;;)
                        {
                            uint _3332 = ((_3109 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3321));
                            _3322 = (_3321 + 4294967295u) & _3321;
                            uint _3334 = _3332 * 40u;
                            _3347 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3334)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3334 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3334 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3334 + 3u)).x));
                            _3348 = _3347.w;
                            uint _3350 = (_3332 * 40u) + 4u;
                            _3363 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3350)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3350 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3350 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3350 + 3u)).x));
                            uint _3365 = (_3332 * 40u) + 8u;
                            _3375 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3365)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3365 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3365 + 2u)).x));
                            uint _3377 = (_3332 * 40u) + 16u;
                            _3390 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3377)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3377 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3377 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3377 + 3u)).x));
                            uint _3393 = (_3332 * 40u) + 20u;
                            _3406 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3393)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3393 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3393 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3393 + 3u)).x));
                            uint _3409 = (_3332 * 40u) + 24u;
                            vec4 _3422 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3409)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3409 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3409 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3409 + 3u)).x));
                            uint _3428 = (_3332 * 40u) + 28u;
                            vec4 _3441 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3428)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3428 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3428 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3428 + 3u)).x));
                            _3453 = fma(_2663, _3441.z, fma(_2662, _3441.y, _3441.x * _2661)) + _3441.w;
                            _3454 = !((fma(_2663, _3422.z, fma(_2662, _3422.y, _3422.x * _2661)) + _3422.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_3454)
                            {
                                float _3481 = _3347.x - _2661;
                                float _3482 = _3347.y - _2662;
                                float _3483 = _3347.z - _2663;
                                float _3484 = dot(vec3(_3481, _3482, _3483), vec3(_3481, _3482, _3483));
                                float _3487 = inversesqrt(_3484);
                                float _3488 = _3487 * _3481;
                                float _3489 = _3487 * _3482;
                                float _3490 = _3487 * _3483;
                                float _3494 = 1.0 - (_3484 / (_3348 * _3348));
                                float _4608 = isnan(0.0) ? _3494 : (isnan(_3494) ? 0.0 : max(_3494, 0.0));
                                float _3495 = isnan(1.0) ? _4608 : (isnan(_4608) ? 1.0 : min(_4608, 1.0));
                                float _3499 = sqrt(_3484) * _3363.w;
                                float _3501 = 1.39999997615814208984375 / (_3499 + 1.39999997615814208984375);
                                float _3502 = _3501 * _3501;
                                float _3505 = ((1.0 - _3502) * dot(vec3(_3488, _3489, _3490), vec3(_808, _811, _814))) + _3502;
                                float _3508 = _3499 * _3499;
                                float _3512 = (fma(_2663, _3390.z, fma(_2662, _3390.y, _3390.x * _2661)) + _3390.w) / _3453;
                                float _3513 = (fma(_2663, _3406.z, fma(_2662, _3406.y, _3406.x * _2661)) + _3406.w) / _3453;
                                float _3517 = 1.0 - dot(vec2(_3512, _3513), vec2(_3512, _3513));
                                float _4624 = isnan(0.0) ? _3517 : (isnan(_3517) ? 0.0 : max(_3517, 0.0));
                                float _3518 = isnan(1.0) ? _4624 : (isnan(_4624) ? 1.0 : min(_4624, 1.0));
                                float _3519 = _3518 * (((isnan(0.0) ? _3505 : (isnan(_3505) ? 0.0 : max(_3505, 0.0))) * _3495) / ((_3508 * 0.699999988079071044921875) + 1.0));
                                float _3531 = exp2(log2(1.0 / ((_3508 * 3.5) + 5.0)) * 0.25);
                                float _3532 = 1.0 - _1005;
                                float _3539 = sqrt(1.0 - ((1.0 - (_3532 * _3532)) * (1.0 - (_3531 * _3531))));
                                float _3540 = _3539 * _3539;
                                float _3541 = _3540 * _3540;
                                float _3542 = _3488 - _2990;
                                float _3543 = _3489 - _2991;
                                float _3544 = _3490 - _2992;
                                float _3548 = inversesqrt(dot(vec3(_3542, _3543, _3544), vec3(_3542, _3543, _3544)));
                                float _3552 = dot(vec3(_808, _811, _814), vec3((-0.0) - _2990, (-0.0) - _2991, (-0.0) - _2992));
                                float _4635 = isnan(0.0) ? _3552 : (isnan(_3552) ? 0.0 : max(_3552, 0.0));
                                float _3555 = isnan(1.0) ? _4635 : (isnan(_4635) ? 1.0 : min(_4635, 1.0));
                                float _3556 = dot(vec3(_808, _811, _814), vec3(_3548 * _3542, _3548 * _3543, _3548 * _3544));
                                float _4646 = isnan(0.0) ? _3556 : (isnan(_3556) ? 0.0 : max(_3556, 0.0));
                                float _3559 = isnan(1.0) ? _4646 : (isnan(_4646) ? 1.0 : min(_4646, 1.0));
                                float _3563 = ((_3559 * _3559) * (_3541 + (-1.0))) + 1.0;
                                float _3564 = _3501 * _3540;
                                float _3565 = _3564 * _3564;
                                float _3571 = ((1.0 - _3565) * dot(vec3(_808, _811, _814), vec3(_3488, _3489, _3490))) + _3565;
                                float _4657 = isnan(0.0) ? _3571 : (isnan(_3571) ? 0.0 : max(_3571, 0.0));
                                float _3572 = isnan(1.0) ? _4657 : (isnan(_4657) ? 1.0 : min(_4657, 1.0));
                                float _3573 = 1.0 - _3540;
                                float _3583 = (0.5 / (((_3572 * ((_3555 * _3573) + _3540)) + 9.9999999392252902907785028219223e-09) + (((_3572 * _3573) + _3540) * _3555))) * _3572;
                                float _4668 = isnan(0.0) ? _3583 : (isnan(_3583) ? 0.0 : max(_3583, 0.0));
                                float _3593 = (_3518 * _3495) * (((_3541 * 3.1415927410125732421875) * (isnan(1.0) ? _4668 : (isnan(_4668) ? 1.0 : min(_4668, 1.0)))) / ((_3563 * _3563) * ((_3508 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_75_pred = _3519 * _3363.z;
                                frontier_phi_75_pred_1 = _3519 * _3363.y;
                                frontier_phi_75_pred_2 = _3519 * _3363.x;
                                frontier_phi_75_pred_3 = _3593 * _3375.z;
                                frontier_phi_75_pred_4 = _3593 * _3375.y;
                                frontier_phi_75_pred_5 = _3593 * _3375.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _3602 = frontier_phi_75_pred;
                            _3601 = frontier_phi_75_pred_1;
                            _3600 = frontier_phi_75_pred_2;
                            _3599 = frontier_phi_75_pred_3;
                            _3598 = frontier_phi_75_pred_4;
                            _3597 = frontier_phi_75_pred_5;
                            _3305 = _3600 + _3318;
                            _3306 = _3601 + _3319;
                            _3307 = _3602 + _3320;
                            _3302 = _3597 + _3315;
                            _3303 = _3598 + _3316;
                            _3304 = _3599 + _3317;
                            if (_3322 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3315 = _3302;
                                _3316 = _3303;
                                _3317 = _3304;
                                _3318 = _3305;
                                _3319 = _3306;
                                _3320 = _3307;
                                _3321 = _3322;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _3307;
                        frontier_phi_69_pred_1 = _3306;
                        frontier_phi_69_pred_2 = _3305;
                        frontier_phi_69_pred_3 = _3304;
                        frontier_phi_69_pred_4 = _3303;
                        frontier_phi_69_pred_5 = _3302;
                    }
                    _2975 = frontier_phi_69_pred;
                    _2973 = frontier_phi_69_pred_1;
                    _2971 = frontier_phi_69_pred_2;
                    _2969 = frontier_phi_69_pred_3;
                    _2967 = frontier_phi_69_pred_4;
                    _2965 = frontier_phi_69_pred_5;
                    uint _3110 = _3109 + 1u;
                    if (_3110 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3103 = _2965;
                        _3104 = _2967;
                        _3105 = _2969;
                        _3106 = _2971;
                        _3107 = _2973;
                        _3108 = _2975;
                        _3109 = _3110;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2975;
                frontier_phi_57_58_ladder_1 = _2973;
                frontier_phi_57_58_ladder_2 = _2971;
                frontier_phi_57_58_ladder_3 = _2969;
                frontier_phi_57_58_ladder_4 = _2967;
                frontier_phi_57_58_ladder_5 = _2965;
            }
            else
            {
                frontier_phi_57_58_ladder = _2853;
                frontier_phi_57_58_ladder_1 = _2851;
                frontier_phi_57_58_ladder_2 = _2849;
                frontier_phi_57_58_ladder_3 = _2847;
                frontier_phi_57_58_ladder_4 = _2845;
                frontier_phi_57_58_ladder_5 = _2843;
            }
            _2964 = frontier_phi_57_58_ladder_5;
            _2966 = frontier_phi_57_58_ladder_4;
            _2968 = frontier_phi_57_58_ladder_3;
            _2970 = frontier_phi_57_58_ladder_2;
            _2972 = frontier_phi_57_58_ladder_1;
            _2974 = frontier_phi_57_58_ladder;
        }
        float _2979 = isnan(1.0) ? _995 : (isnan(_995) ? 1.0 : min(_995, 1.0));
        _2719 = (_2979 * _2970) + _2156;
        _2721 = (_2979 * _2972) + _2158;
        _2723 = (_2979 * _2974) + _2160;
        _2725 = ((_2964 * _981) * _2979) + _2501;
        _2727 = ((_2966 * _982) * _2979) + _2503;
        _2729 = ((_2968 * _983) * _2979) + _2505;
    }
    else
    {
        _2719 = _2156;
        _2721 = _2158;
        _2723 = _2160;
        _2725 = _2501;
        _2727 = _2503;
        _2729 = _2505;
    }
    uint _2735 = _888 + uint(cbMatDynParam._m0[0u].w);
    float _2741 = cbInstanceData._m0[_2735].x * (((((cbMatDynParam._m0[8u].x - cbMatDynParam._m0[7u].x) * _663) + cbMatDynParam._m0[7u].x) + (((((cbMtdParam._m0[12u].x * cbMtdParam._m0[16u].z) * cbMtdParam._m0[15u].w) * _559) * _572.x) * _692)) + (((_721 - (_721 * _629)) + (cbMatDynParam._m0[11u].x * _752)) * cbMatDynParam._m0[9u].x));
    float _2742 = cbInstanceData._m0[_2735].y * (((((cbMatDynParam._m0[8u].y - cbMatDynParam._m0[7u].y) * _663) + cbMatDynParam._m0[7u].y) + (((((cbMtdParam._m0[12u].y * cbMtdParam._m0[16u].z) * cbMtdParam._m0[15u].w) * _559) * _572.y) * _692)) + (((_723 - (_723 * _629)) + (cbMatDynParam._m0[11u].y * _752)) * cbMatDynParam._m0[9u].y));
    float _2743 = cbInstanceData._m0[_2735].z * (((((cbMatDynParam._m0[8u].z - cbMatDynParam._m0[7u].z) * _663) + cbMatDynParam._m0[7u].z) + (((((cbMtdParam._m0[12u].z * cbMtdParam._m0[16u].z) * cbMtdParam._m0[15u].w) * _559) * _572.z) * _692)) + (((_725 - (_725 * _629)) + (cbMatDynParam._m0[11u].z * _752)) * cbMatDynParam._m0[9u].z));
    float _4684 = isnan(0.0) ? _972 : (isnan(_972) ? 0.0 : max(_972, 0.0));
    float _4695 = isnan(0.0) ? _973 : (isnan(_973) ? 0.0 : max(_973, 0.0));
    float _4706 = isnan(0.0) ? _974 : (isnan(_974) ? 0.0 : max(_974, 0.0));
    float _4717 = isnan(0.0) ? _624 : (isnan(_624) ? 0.0 : max(_624, 0.0));
    float _2761 = (((isnan(1.0) ? _4684 : (isnan(_4684) ? 1.0 : min(_4684, 1.0))) * (_2719 + ((isnan(0.0) ? _1718 : (isnan(_1718) ? 0.0 : max(_1718, 0.0))) * _995))) + ((_2725 + ((isnan(0.0) ? _2009 : (isnan(_2009) ? 0.0 : max(_2009, 0.0))) * _1794)) * cbPerFrame._m0[3u].x)) + _2741;
    float _2763 = (_2742 + ((_2727 + ((isnan(0.0) ? _2012 : (isnan(_2012) ? 0.0 : max(_2012, 0.0))) * _1794)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4695 : (isnan(_4695) ? 1.0 : min(_4695, 1.0))) * (_2721 + ((isnan(0.0) ? _1721 : (isnan(_1721) ? 0.0 : max(_1721, 0.0))) * _995)));
    float _2765 = (_2743 + ((_2729 + ((isnan(0.0) ? _2015 : (isnan(_2015) ? 0.0 : max(_2015, 0.0))) * _1794)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4706 : (isnan(_4706) ? 1.0 : min(_4706, 1.0))) * (_2723 + ((isnan(0.0) ? _1724 : (isnan(_1724) ? 0.0 : max(_1724, 0.0))) * _995)));
    float _2783 = ((cbMtdParam._m0[2u].w - cbMatDynParam._m0[12u].y) * _692) + cbMatDynParam._m0[12u].y;
    float _2788 = cbInstanceData._m0[_887 + 6u].w * (isnan(1.0) ? _4717 : (isnan(_4717) ? 1.0 : min(_4717, 1.0)));
    float _2793 = _784 / cbSceneParam._m0[86u].x;
    float _2794 = _785 / cbSceneParam._m0[86u].y;
    vec4 _2808 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2793, _2794, (log2((isnan(cbSceneParam._m0[77u].w) ? _778 : (isnan(_778) ? cbSceneParam._m0[77u].w : min(_778, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2810 = _2808.x;
    float _2811 = _2808.y;
    float _2812 = _2808.z;
    float _2813 = _2808.w;
    float _2905;
    float _2907;
    float _2909;
    float _2911;
    if (_778 > cbSceneParam._m0[78u].w)
    {
        float _2868 = isnan(_778) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _778 : min(cbSceneParam._m0[80u].w, _778));
        float _2869 = _2868 / _778;
        float _2880 = _2869 * _293;
        float _2881 = _294 * _2869;
        float _2882 = (-0.0) - _2881;
        float _2883 = _2869 * _295;
        float _2885 = (cbSceneParam._m0[77u].w * _2882) / _2868;
        float _2886 = _2885 + cbSceneParam._m0[79u].w;
        float _2887 = cbSceneParam._m0[79u].w - _2881;
        float _2893 = sqrt(((_2880 * _2880) + (_2881 * _2881)) + (_2883 * _2883));
        float _2896 = (1.0 - (cbSceneParam._m0[77u].w / _2868)) * _2893;
        float _2901 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2903 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3065;
        if (abs((_2882 - _2885) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3065 = ((((_2886 > 0.0) ? exp2(_2901 * _2886) : (2.0 - exp2(_2903 * _2886))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2896;
        }
        else
        {
            float _3025 = 1.0 / cbSceneParam._m0[80u].x;
            float _3026 = isnan(_2887) ? _2886 : (isnan(_2886) ? _2887 : max(_2886, _2887));
            float _3027 = isnan(_2887) ? _2886 : (isnan(_2886) ? _2887 : min(_2886, _2887));
            float _3036 = isnan(0.0) ? _3026 : (isnan(_3026) ? 0.0 : min(_3026, 0.0));
            float _3037 = isnan(0.0) ? _3027 : (isnan(_3027) ? 0.0 : min(_3027, 0.0));
            _3065 = ((abs(_2893 / _2882) * cbSceneParam._m0[80u].y) * ((((_3036 - _3037) * 2.0) - ((exp2(_2901 * (isnan(0.0) ? _3026 : (isnan(_3026) ? 0.0 : max(_3026, 0.0)))) - exp2(_2901 * (isnan(0.0) ? _3027 : (isnan(_3027) ? 0.0 : max(_3027, 0.0))))) * _3025)) - ((exp2(_2903 * _3036) - exp2(_2903 * _3037)) * _3025))) + (_2896 * cbSceneParam._m0[80u].z);
        }
        vec4 _3067 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2793, _2794, 1.0), 0.0);
        float _3076 = exp2((_3065 * (-1.44269502162933349609375)) * (1.0 - _3067.w));
        float _3077 = log2(_3076);
        float _3093 = log2(_2813);
        _2905 = (exp2(_3093 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3077 * cbSceneParam._m0[78u].x)) * _3067.x) / cbSceneParam._m0[78u].x)) + _2810;
        _2907 = (exp2(_3093 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3077 * cbSceneParam._m0[78u].y)) * _3067.y) / cbSceneParam._m0[78u].y)) + _2811;
        _2909 = (exp2(_3093 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3077 * cbSceneParam._m0[78u].z)) * _3067.z) / cbSceneParam._m0[78u].z)) + _2812;
        _2911 = _3076 * _2813;
    }
    else
    {
        _2905 = _2810;
        _2907 = _2811;
        _2909 = _2812;
        _2911 = _2813;
    }
    float _2923 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2924 = _2923 == 3.0;
    float _2925 = log2(_2911);
    float _2929 = exp2(_2925 * cbSceneParam._m0[78u].x);
    float _2930 = exp2(_2925 * cbSceneParam._m0[78u].y);
    float _2931 = exp2(_2925 * cbSceneParam._m0[78u].z);
    float _2932 = _2929 * (isnan(0.0) ? _2761 : (isnan(_2761) ? 0.0 : max(_2761, 0.0)));
    float _2933 = _2930 * (isnan(0.0) ? _2763 : (isnan(_2763) ? 0.0 : max(_2763, 0.0)));
    float _2934 = _2931 * (isnan(0.0) ? _2765 : (isnan(_2765) ? 0.0 : max(_2765, 0.0)));
    float _2943 = (_2923 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2943 * (_2924 ? _2932 : (_2932 + (cbSceneParam._m0[72u].w * _2905)));
    SV_Target.y = _2943 * (_2924 ? _2933 : (_2933 + (cbSceneParam._m0[72u].w * _2907)));
    SV_Target.z = _2943 * (_2924 ? _2934 : (_2934 + (cbSceneParam._m0[72u].w * _2909)));
    SV_Target.w = _2788;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2741) * _2783) * _2929) * _2943;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2742) * _2783) * _2930) * _2943;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2743) * _2783) * _2931) * _2943;
    SV_Target_1.w = _2788;
}


