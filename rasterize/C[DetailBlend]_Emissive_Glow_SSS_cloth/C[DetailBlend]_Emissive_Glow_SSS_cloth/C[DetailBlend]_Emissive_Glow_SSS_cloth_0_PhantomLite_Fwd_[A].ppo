#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[18];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_1;
layout(set = 0, binding = 1) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_7;
layout(set = 0, binding = 10) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_6;
layout(set = 0, binding = 2) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_0;
layout(set = 0, binding = 4) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_11;
layout(set = 0, binding = 7) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1262;
float _3687;
float _3688;
float _3689;
float _3690;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _203 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _204 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _205 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _211 = inversesqrt(dot(vec3(_203, _204, _205), vec3(_203, _204, _205)));
    float _218 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _219 = _218 * NORMAL.x;
    float _220 = _218 * NORMAL.y;
    float _221 = _218 * NORMAL.z;
    float _225 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _233;
    float _234;
    float _235;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _233 = (-0.0) - _219;
        _234 = (-0.0) - _220;
        _235 = (-0.0) - _221;
    }
    else
    {
        _233 = _219;
        _234 = _220;
        _235 = _221;
    }
    float _279 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _289 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _279);
    float _290 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _279);
    float _291 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _279);
    vec4 _304 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    vec4 _321 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _343 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _352 = ((_321.x * 4.55000019073486328125) * cbMtdParam._m0[9u].x) * _343.x;
    float _355 = ((_321.y * 4.55000019073486328125) * cbMtdParam._m0[9u].y) * _343.y;
    float _358 = ((_321.z * 4.55000019073486328125) * cbMtdParam._m0[9u].z) * _343.z;
    float _359 = _343.w * _321.w;
    vec4 _372 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _379 = cbMtdParam._m0[16u].x + _372.x;
    vec4 _391 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w));
    float _403 = (_304.z * 2.0) * (cbMtdParam._m0[14u].x + _391.z);
    float _421 = abs((fract(cbMtdParam._m0[15u].x * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _3699 = isnan(0.0) ? _421 : (isnan(_421) ? 0.0 : max(_421, 0.0));
    float _423 = isnan(1.0) ? _3699 : (isnan(_3699) ? 1.0 : min(_3699, 1.0));
    float _428 = (_423 * _423) * (3.0 - (_423 * 2.0));
    vec4 _441 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _449 = (_304.x * 2.0) + (-1.0);
    float _450 = (_304.y * 2.0) + (-1.0);
    float _451 = dot(vec2(_449, _450), vec2(_449, _450));
    float _3710 = isnan(0.0) ? _451 : (isnan(_451) ? 0.0 : max(_451, 0.0));
    float _456 = sqrt(1.0 - (isnan(1.0) ? _3710 : (isnan(_3710) ? 1.0 : min(_3710, 1.0))));
    float _463 = (cbMtdParam._m0[14u].z * ((_391.x * 2.0) + (-1.0))) + _449;
    float _464 = (cbMtdParam._m0[14u].z * ((_391.y * 2.0) + (-1.0))) + _450;
    float _467 = fma(_456, _233, fma(_464, _225 * TANGENT.x, (_211 * _203) * _463));
    float _470 = fma(_456, _234, fma(_464, _225 * TANGENT.y, (_211 * _204) * _463));
    float _473 = fma(_456, _235, fma(_464, _225 * TANGENT.z, (_211 * _205) * _463));
    float _477 = inversesqrt(dot(vec3(_467, _470, _473), vec3(_467, _470, _473)));
    float _478 = _477 * _467;
    float _479 = _477 * _470;
    float _480 = _477 * _473;
    float _3721 = isnan(0.0) ? _359 : (isnan(_359) ? 0.0 : max(_359, 0.0));
    float _481 = isnan(1.0) ? _3721 : (isnan(_3721) ? 1.0 : min(_3721, 1.0));
    float _3732 = isnan(0.0) ? _403 : (isnan(_403) ? 0.0 : max(_403, 0.0));
    float _482 = isnan(1.0) ? _3732 : (isnan(_3732) ? 1.0 : min(_3732, 1.0));
    float _3743 = isnan(0.0) ? _352 : (isnan(_352) ? 0.0 : max(_352, 0.0));
    float _483 = isnan(1.0) ? _3743 : (isnan(_3743) ? 1.0 : min(_3743, 1.0));
    float _3754 = isnan(0.0) ? _355 : (isnan(_355) ? 0.0 : max(_355, 0.0));
    float _484 = isnan(1.0) ? _3754 : (isnan(_3754) ? 1.0 : min(_3754, 1.0));
    float _3765 = isnan(0.0) ? _358 : (isnan(_358) ? 0.0 : max(_358, 0.0));
    float _485 = isnan(1.0) ? _3765 : (isnan(_3765) ? 1.0 : min(_3765, 1.0));
    float _3776 = isnan(0.0) ? _379 : (isnan(_379) ? 0.0 : max(_379, 0.0));
    float _486 = isnan(1.0) ? _3776 : (isnan(_3776) ? 1.0 : min(_3776, 1.0));
    float _494 = cbMatDynParam._m0[9u].x * _483;
    float _495 = cbMatDynParam._m0[9u].y * _484;
    float _496 = cbMatDynParam._m0[9u].z * _485;
    float _503 = inversesqrt(dot(vec3(_289, _290, _291), vec3(_289, _290, _291)));
    float _504 = _503 * _289;
    float _505 = _503 * _290;
    float _506 = _503 * _291;
    float _507 = dot(vec3(_478, _479, _480), vec3(_504, _505, _506));
    float _513 = abs(exp2(log2(_507) * cbMatDynParam._m0[12u].x));
    float _514 = isnan(0.100000001490116119384765625) ? _513 : (isnan(_513) ? 0.100000001490116119384765625 : max(_513, 0.100000001490116119384765625));
    float _520 = ((isnan(0.699999988079071044921875) ? _514 : (isnan(_514) ? 0.699999988079071044921875 : min(_514, 0.699999988079071044921875))) + (-0.100000001490116119384765625)) * 1.66666662693023681640625;
    float _542 = 1.0 - cbMatDynParam._m0[8u].w;
    float _3797 = isnan(0.0) ? _542 : (isnan(_542) ? 0.0 : max(_542, 0.0));
    float _545 = 1.0 - cbMatDynParam._m0[7u].w;
    float _3808 = isnan(0.0) ? _545 : (isnan(_545) ? 0.0 : max(_545, 0.0));
    float _546 = isnan(1.0) ? _3808 : (isnan(_3808) ? 1.0 : min(_3808, 1.0));
    float _549 = (((isnan(1.0) ? _3797 : (isnan(_3797) ? 1.0 : min(_3797, 1.0))) - _546) * _520) + _546;
    float _568 = dot(vec3(_478, _479, _480), vec3(0.0, -1.0, 0.0));
    float _3819 = isnan(0.0) ? _568 : (isnan(_568) ? 0.0 : max(_568, 0.0));
    float _571 = isnan(1.0) ? _3819 : (isnan(_3819) ? 1.0 : min(_3819, 1.0));
    float _578 = (_571 * _483) * cbMatDynParam._m0[11u].x;
    float _580 = (_571 * _484) * cbMatDynParam._m0[11u].y;
    float _582 = (_571 * _485) * cbMatDynParam._m0[11u].z;
    float _589 = dot(vec3(_504, _505, _506), vec3(_478, _479, _480));
    float _592 = _589 * 2.0;
    float _602 = dot(vec3((-0.0) - (_504 - (_592 * _478)), (-0.0) - (_505 - (_592 * _479)), (-0.0) - (_506 - (_592 * _480))), vec3(0.0, -1.0, 0.0));
    float _3830 = isnan(0.0) ? _602 : (isnan(_602) ? 0.0 : max(_602, 0.0));
    float _609 = exp2(log2(isnan(1.0) ? _3830 : (isnan(_3830) ? 1.0 : min(_3830, 1.0))) * 4.0);
    float _635 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    vec4 _640 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _642 = _640.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _941 = sqrt(((_289 * _289) + (_290 * _290)) + (_291 * _291));
        float _947 = (cbMatDynParam._m0[5u].x * _941) + cbMatDynParam._m0[5u].y;
        float _3841 = isnan(0.0) ? _947 : (isnan(_947) ? 0.0 : max(_947, 0.0));
        float _948 = isnan(1.0) ? _3841 : (isnan(_3841) ? 1.0 : min(_3841, 1.0));
        float _952 = (cbMatDynParam._m0[5u].z * _941) + cbMatDynParam._m0[5u].w;
        float _3852 = isnan(0.0) ? _952 : (isnan(_952) ? 0.0 : max(_952, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3852 : (isnan(_3852) ? 1.0 : min(_3852, 1.0))) - _948)) + _948) < ((_642 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _654 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _655 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _657 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _659 = _657.w;
    float _678 = fma(_480, cbSceneParam._m0[5u].z, fma(_479, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _478));
    float _681 = fma(_480, cbSceneParam._m0[6u].z, fma(_479, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _478));
    float _684 = fma(_480, cbSceneParam._m0[7u].z, fma(_479, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _478));
    vec4 _686 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _688 = _686.x;
    float _700 = (((_686.y - _482) + (_686.w * _482)) * cbMtdParam._m0[3u].x) + _482;
    float _717 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3(cbMtdParam._m0[3u].x * (_688 * _688)), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w)).z;
    float _725 = (((cbMatDynParam._m0[15u].x - _486) * cbMatDynParam._m0[15u].w) * _717) + _486;
    float _733 = ((_717 * cbMatDynParam._m0[16u].z) * (cbMatDynParam._m0[16u].x - _700)) + _700;
    uint _757 = uint(roundEven(NORMAL.w)) * 13u;
    uint _759 = _757 + 9u;
    uint _760 = _759 + uint(cbMatDynParam._m0[0u].w);
    float _766 = (cbMtdParam._m0[0u].x * _494) * cbInstanceData._m0[_760].x;
    float _767 = (cbMtdParam._m0[0u].y * _495) * cbInstanceData._m0[_760].y;
    float _768 = (cbMtdParam._m0[0u].z * _496) * cbInstanceData._m0[_760].z;
    float _3863 = isnan(0.0) ? _766 : (isnan(_766) ? 0.0 : max(_766, 0.0));
    float _769 = isnan(1.0) ? _3863 : (isnan(_3863) ? 1.0 : min(_3863, 1.0));
    float _3874 = isnan(0.0) ? _767 : (isnan(_767) ? 0.0 : max(_767, 0.0));
    float _770 = isnan(1.0) ? _3874 : (isnan(_3874) ? 1.0 : min(_3874, 1.0));
    float _3885 = isnan(0.0) ? _768 : (isnan(_768) ? 0.0 : max(_768, 0.0));
    float _771 = isnan(1.0) ? _3885 : (isnan(_3885) ? 1.0 : min(_3885, 1.0));
    vec4 _772 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _777 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _788 = (((_777.x - _725) + (_777.w * _725)) * cbMtdParam._m0[3u].x) + _725;
    float _801 = (cbMtdParam._m0[3u].x * (((_769 * _659) - _769) + _772.x)) + _769;
    float _802 = (cbMtdParam._m0[3u].x * (((_770 * _659) - _770) + _772.y)) + _770;
    float _803 = (cbMtdParam._m0[3u].x * (((_771 * _659) - _771) + _772.z)) + _771;
    vec4 _804 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _817 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3((_725 * (_494 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625, (_725 * (_495 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625, (_725 * (_496 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * _804.z;
    float _821 = _817 * cbMatDynParam._m0[13u].w;
    float _831 = (_821 * (cbMatDynParam._m0[13u].x - _801)) + _801;
    float _832 = (_821 * (cbMatDynParam._m0[13u].y - _802)) + _802;
    float _833 = (_821 * (cbMatDynParam._m0[13u].z - _803)) + _803;
    float _841 = ((_817 * cbMatDynParam._m0[15u].w) * (cbMatDynParam._m0[15u].x - _788)) + _788;
    float _842 = 1.0 - _841;
    float _843 = _842 * _831;
    float _844 = _842 * _832;
    float _845 = _842 * _833;
    float _849 = (_831 + (-0.039999999105930328369140625)) * _841;
    float _850 = (_832 + (-0.039999999105930328369140625)) * _841;
    float _851 = (_833 + (-0.039999999105930328369140625)) * _841;
    float _852 = _849 + 0.039999999105930328369140625;
    float _853 = _850 + 0.039999999105930328369140625;
    float _854 = _851 + 0.039999999105930328369140625;
    vec4 _863 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _654, cbSceneParam._m0[86u].y * _655));
    float _866 = _863.x * TEXCOORD_4;
    float _867 = _507 * 2.0;
    float _871 = (_867 * _478) - _504;
    float _872 = (_867 * _479) - _505;
    float _873 = (_867 * _480) - _506;
    float _874 = abs(_589);
    float _3896 = isnan(0.0) ? _874 : (isnan(_874) ? 0.0 : max(_874, 0.0));
    float _876 = sqrt(_733);
    float _887 = exp2((_876 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3896 : (isnan(_3896) ? 1.0 : min(_3896, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_876 * 3.0));
    float _893 = (1.0 - _887) * ((_876 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _894 = _887 * _876;
    float _922 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _926 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _930 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1261;
    float _1263;
    float _1264;
    float _1265;
    float _1266;
    float _1267;
    float _1268;
    float _1269;
    float _1270;
    float _1271;
    float _1272;
    float _1273;
    float _1274;
    float _1275;
    float _1276;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _986 = fma(_930, cbModelParam._m0[26u].z, fma(_926, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _922));
        float _990 = fma(_930, cbModelParam._m0[27u].z, fma(_926, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _922));
        float _994 = fma(_930, cbModelParam._m0[28u].z, fma(_926, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _922));
        float _1019 = _922 + _478;
        float _1020 = _926 + _479;
        float _1021 = _930 + _480;
        float _1031 = fma(_1021, cbModelParam._m0[26u].z, fma(_1020, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1019)) - _986;
        float _1032 = fma(_1021, cbModelParam._m0[27u].z, fma(_1020, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1019)) - _990;
        float _1033 = fma(_1021, cbModelParam._m0[28u].z, fma(_1020, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1019)) - _994;
        float _1037 = inversesqrt(dot(vec3(_1031, _1032, _1033), vec3(_1031, _1032, _1033)));
        float _1050 = ((_1037 * _1031) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_986 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1051 = ((_1037 * _1032) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_990 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1052 = ((_1037 * _1033) / cbModelParam._m0[34u].z) + ((((((_994 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1055 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1050, _1051, _1052), 0.0);
        vec4 _1062 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1050, _1051, _1052), 0.0);
        vec4 _1069 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1050, _1051, _1052), 0.0);
        vec4 _1076 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1050, _1051, _1052), 0.0);
        float _1089 = exp2((_1055.w + (-0.5)) * 20.0) * 2.0;
        float _1090 = _1089 * (_1055.x + (-0.5));
        float _1091 = _1089 * (_1055.y + (-0.5));
        float _1092 = _1089 * (_1055.z + (-0.5));
        float _1099 = exp2((_1062.w + (-0.5)) * 20.0) * 2.0;
        float _1100 = _1099 * (_1062.x + (-0.5));
        float _1101 = _1099 * (_1062.y + (-0.5));
        float _1102 = _1099 * (_1062.z + (-0.5));
        float _1109 = exp2((_1069.w + (-0.5)) * 20.0) * 2.0;
        float _1110 = _1109 * (_1069.x + (-0.5));
        float _1111 = _1109 * (_1069.y + (-0.5));
        float _1112 = _1109 * (_1069.z + (-0.5));
        float _1119 = exp2((_1076.w + (-0.5)) * 20.0) * 2.0;
        float _1120 = _1119 * (_1076.x + (-0.5));
        float _1121 = _1119 * (_1076.y + (-0.5));
        float _1122 = _1119 * (_1076.z + (-0.5));
        float _1123 = isnan(0.0) ? _1120 : (isnan(_1120) ? 0.0 : max(_1120, 0.0));
        float _1124 = isnan(0.0) ? _1121 : (isnan(_1121) ? 0.0 : max(_1121, 0.0));
        float _1125 = isnan(0.0) ? _1122 : (isnan(_1122) ? 0.0 : max(_1122, 0.0));
        float _1126 = _1090 * 0.5;
        float _1127 = _1100 * 0.5;
        float _1128 = _1110 * 0.5;
        float _1129 = dot(vec3(_1126, _1127, _1128), vec3(_1126, _1127, _1128));
        float _1134 = (_1129 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1129);
        float _1143 = (dot(vec3(_478, _479, _480), vec3(_1134 * _1126, _1134 * _1127, _1134 * _1128)) + 1.0) * 0.5;
        float _3922 = isnan(0.0) ? _1143 : (isnan(_1143) ? 0.0 : max(_1143, 0.0));
        float _1153 = sqrt(((_1127 * _1127) + (_1126 * _1126)) + (_1128 * _1128)) / (_1123 + 9.9999997473787516355514526367188e-06);
        float _3933 = isnan(0.0) ? _1153 : (isnan(_1153) ? 0.0 : max(_1153, 0.0));
        float _1154 = isnan(1.0) ? _3933 : (isnan(_3933) ? 1.0 : min(_3933, 1.0));
        float _1155 = _1154 * 2.0;
        float _1159 = (1.0 - _1154) / (_1154 + 1.0);
        float _3944 = isnan(0.0) ? _1159 : (isnan(_1159) ? 0.0 : max(_1159, 0.0));
        float _1160 = isnan(1.0) ? _3944 : (isnan(_3944) ? 1.0 : min(_3944, 1.0));
        float _1169 = ((((1.0 - _1160) * (_1155 + 2.0)) * exp2(log2(isnan(1.0) ? _3922 : (isnan(_3922) ? 1.0 : min(_3922, 1.0))) * (_1155 + 1.0))) + _1160) * _1123;
        float _1170 = _1091 * 0.5;
        float _1171 = _1101 * 0.5;
        float _1172 = _1111 * 0.5;
        float _1173 = dot(vec3(_1170, _1171, _1172), vec3(_1170, _1171, _1172));
        float _1178 = (_1173 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1173);
        float _1186 = (dot(vec3(_478, _479, _480), vec3(_1178 * _1170, _1178 * _1171, _1178 * _1172)) + 1.0) * 0.5;
        float _3955 = isnan(0.0) ? _1186 : (isnan(_1186) ? 0.0 : max(_1186, 0.0));
        float _1195 = sqrt(((_1171 * _1171) + (_1170 * _1170)) + (_1172 * _1172)) / (_1124 + 9.9999997473787516355514526367188e-06);
        float _3966 = isnan(0.0) ? _1195 : (isnan(_1195) ? 0.0 : max(_1195, 0.0));
        float _1196 = isnan(1.0) ? _3966 : (isnan(_3966) ? 1.0 : min(_3966, 1.0));
        float _1197 = _1196 * 2.0;
        float _1201 = (1.0 - _1196) / (_1196 + 1.0);
        float _3977 = isnan(0.0) ? _1201 : (isnan(_1201) ? 0.0 : max(_1201, 0.0));
        float _1202 = isnan(1.0) ? _3977 : (isnan(_3977) ? 1.0 : min(_3977, 1.0));
        float _1211 = ((((1.0 - _1202) * (_1197 + 2.0)) * exp2(log2(isnan(1.0) ? _3955 : (isnan(_3955) ? 1.0 : min(_3955, 1.0))) * (_1197 + 1.0))) + _1202) * _1124;
        float _1212 = _1092 * 0.5;
        float _1213 = _1102 * 0.5;
        float _1214 = _1112 * 0.5;
        float _1215 = dot(vec3(_1212, _1213, _1214), vec3(_1212, _1213, _1214));
        float _1220 = (_1215 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1215);
        float _1228 = (dot(vec3(_478, _479, _480), vec3(_1220 * _1212, _1220 * _1213, _1220 * _1214)) + 1.0) * 0.5;
        float _3988 = isnan(0.0) ? _1228 : (isnan(_1228) ? 0.0 : max(_1228, 0.0));
        float _1237 = sqrt(((_1213 * _1213) + (_1212 * _1212)) + (_1214 * _1214)) / (_1125 + 9.9999997473787516355514526367188e-06);
        float _3999 = isnan(0.0) ? _1237 : (isnan(_1237) ? 0.0 : max(_1237, 0.0));
        float _1238 = isnan(1.0) ? _3999 : (isnan(_3999) ? 1.0 : min(_3999, 1.0));
        float _1239 = _1238 * 2.0;
        float _1243 = (1.0 - _1238) / (_1238 + 1.0);
        float _4010 = isnan(0.0) ? _1243 : (isnan(_1243) ? 0.0 : max(_1243, 0.0));
        float _1244 = isnan(1.0) ? _4010 : (isnan(_4010) ? 1.0 : min(_4010, 1.0));
        float _1253 = ((((1.0 - _1244) * (_1239 + 2.0)) * exp2(log2(isnan(1.0) ? _3988 : (isnan(_3988) ? 1.0 : min(_3988, 1.0))) * (_1239 + 1.0))) + _1244) * _1125;
        _1261 = _1092;
        _1263 = _1091;
        _1264 = _1090;
        _1265 = _1102;
        _1266 = _1101;
        _1267 = _1100;
        _1268 = _1112;
        _1269 = _1111;
        _1270 = _1110;
        _1271 = _1125;
        _1272 = _1124;
        _1273 = _1123;
        _1274 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1169 : (isnan(_1169) ? 0.0 : max(_1169, 0.0)));
        _1275 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1211 : (isnan(_1211) ? 0.0 : max(_1211, 0.0)));
        _1276 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1253 : (isnan(_1253) ? 0.0 : max(_1253, 0.0)));
    }
    else
    {
        _1261 = _1262;
        _1263 = _1262;
        _1264 = _1262;
        _1265 = _1262;
        _1266 = _1262;
        _1267 = _1262;
        _1268 = _1262;
        _1269 = _1262;
        _1270 = _1262;
        _1271 = _1262;
        _1272 = _1262;
        _1273 = _1262;
        _1274 = 0.0;
        _1275 = 0.0;
        _1276 = 0.0;
    }
    float _1574;
    float _1575;
    float _1576;
    float _1577;
    float _1578;
    float _1579;
    float _1580;
    float _1581;
    float _1582;
    float _1583;
    float _1584;
    float _1585;
    float _1586;
    float _1587;
    float _1588;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1305 = fma(_930, cbModelParam._m0[30u].z, fma(_926, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _922));
        float _1309 = fma(_930, cbModelParam._m0[31u].z, fma(_926, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _922));
        float _1313 = fma(_930, cbModelParam._m0[32u].z, fma(_926, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _922));
        float _1336 = _922 + _478;
        float _1337 = _926 + _479;
        float _1338 = _930 + _480;
        float _1348 = fma(_1338, cbModelParam._m0[30u].z, fma(_1337, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1336)) - _1305;
        float _1349 = fma(_1338, cbModelParam._m0[31u].z, fma(_1337, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1336)) - _1309;
        float _1350 = fma(_1338, cbModelParam._m0[32u].z, fma(_1337, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1336)) - _1313;
        float _1354 = inversesqrt(dot(vec3(_1348, _1349, _1350), vec3(_1348, _1349, _1350)));
        float _1367 = ((_1354 * _1348) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1305 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1368 = ((_1354 * _1349) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1309 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1369 = ((_1354 * _1350) / cbModelParam._m0[35u].z) + ((((((_1313 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1371 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1367, _1368, _1369), 0.0);
        vec4 _1378 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1367, _1368, _1369), 0.0);
        vec4 _1385 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1367, _1368, _1369), 0.0);
        vec4 _1392 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1367, _1368, _1369), 0.0);
        float _1404 = exp2((_1371.w + (-0.5)) * 20.0) * 2.0;
        float _1405 = _1404 * (_1371.x + (-0.5));
        float _1406 = _1404 * (_1371.y + (-0.5));
        float _1407 = _1404 * (_1371.z + (-0.5));
        float _1414 = exp2((_1378.w + (-0.5)) * 20.0) * 2.0;
        float _1415 = _1414 * (_1378.x + (-0.5));
        float _1416 = _1414 * (_1378.y + (-0.5));
        float _1417 = _1414 * (_1378.z + (-0.5));
        float _1424 = exp2((_1385.w + (-0.5)) * 20.0) * 2.0;
        float _1425 = _1424 * (_1385.x + (-0.5));
        float _1426 = _1424 * (_1385.y + (-0.5));
        float _1427 = _1424 * (_1385.z + (-0.5));
        float _1434 = exp2((_1392.w + (-0.5)) * 20.0) * 2.0;
        float _1435 = _1434 * (_1392.x + (-0.5));
        float _1436 = _1434 * (_1392.y + (-0.5));
        float _1437 = _1434 * (_1392.z + (-0.5));
        float _1438 = isnan(0.0) ? _1435 : (isnan(_1435) ? 0.0 : max(_1435, 0.0));
        float _1439 = isnan(0.0) ? _1436 : (isnan(_1436) ? 0.0 : max(_1436, 0.0));
        float _1440 = isnan(0.0) ? _1437 : (isnan(_1437) ? 0.0 : max(_1437, 0.0));
        float _1441 = _1405 * 0.5;
        float _1442 = _1415 * 0.5;
        float _1443 = _1425 * 0.5;
        float _1444 = dot(vec3(_1441, _1442, _1443), vec3(_1441, _1442, _1443));
        float _1449 = (_1444 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1444);
        float _1457 = (dot(vec3(_478, _479, _480), vec3(_1449 * _1441, _1449 * _1442, _1449 * _1443)) + 1.0) * 0.5;
        float _4051 = isnan(0.0) ? _1457 : (isnan(_1457) ? 0.0 : max(_1457, 0.0));
        float _1466 = sqrt(((_1442 * _1442) + (_1441 * _1441)) + (_1443 * _1443)) / (_1438 + 9.9999997473787516355514526367188e-06);
        float _4062 = isnan(0.0) ? _1466 : (isnan(_1466) ? 0.0 : max(_1466, 0.0));
        float _1467 = isnan(1.0) ? _4062 : (isnan(_4062) ? 1.0 : min(_4062, 1.0));
        float _1468 = _1467 * 2.0;
        float _1472 = (1.0 - _1467) / (_1467 + 1.0);
        float _4073 = isnan(0.0) ? _1472 : (isnan(_1472) ? 0.0 : max(_1472, 0.0));
        float _1473 = isnan(1.0) ? _4073 : (isnan(_4073) ? 1.0 : min(_4073, 1.0));
        float _1482 = ((((1.0 - _1473) * (_1468 + 2.0)) * exp2(log2(isnan(1.0) ? _4051 : (isnan(_4051) ? 1.0 : min(_4051, 1.0))) * (_1468 + 1.0))) + _1473) * _1438;
        float _1483 = _1406 * 0.5;
        float _1484 = _1416 * 0.5;
        float _1485 = _1426 * 0.5;
        float _1486 = dot(vec3(_1483, _1484, _1485), vec3(_1483, _1484, _1485));
        float _1491 = (_1486 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1486);
        float _1499 = (dot(vec3(_478, _479, _480), vec3(_1491 * _1483, _1491 * _1484, _1491 * _1485)) + 1.0) * 0.5;
        float _4084 = isnan(0.0) ? _1499 : (isnan(_1499) ? 0.0 : max(_1499, 0.0));
        float _1508 = sqrt(((_1484 * _1484) + (_1483 * _1483)) + (_1485 * _1485)) / (_1439 + 9.9999997473787516355514526367188e-06);
        float _4095 = isnan(0.0) ? _1508 : (isnan(_1508) ? 0.0 : max(_1508, 0.0));
        float _1509 = isnan(1.0) ? _4095 : (isnan(_4095) ? 1.0 : min(_4095, 1.0));
        float _1510 = _1509 * 2.0;
        float _1514 = (1.0 - _1509) / (_1509 + 1.0);
        float _4106 = isnan(0.0) ? _1514 : (isnan(_1514) ? 0.0 : max(_1514, 0.0));
        float _1515 = isnan(1.0) ? _4106 : (isnan(_4106) ? 1.0 : min(_4106, 1.0));
        float _1524 = ((((1.0 - _1515) * (_1510 + 2.0)) * exp2(log2(isnan(1.0) ? _4084 : (isnan(_4084) ? 1.0 : min(_4084, 1.0))) * (_1510 + 1.0))) + _1515) * _1439;
        float _1525 = _1407 * 0.5;
        float _1526 = _1417 * 0.5;
        float _1527 = _1427 * 0.5;
        float _1528 = dot(vec3(_1525, _1526, _1527), vec3(_1525, _1526, _1527));
        float _1533 = (_1528 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1528);
        float _1541 = (dot(vec3(_478, _479, _480), vec3(_1533 * _1525, _1533 * _1526, _1533 * _1527)) + 1.0) * 0.5;
        float _4117 = isnan(0.0) ? _1541 : (isnan(_1541) ? 0.0 : max(_1541, 0.0));
        float _1550 = sqrt(((_1526 * _1526) + (_1525 * _1525)) + (_1527 * _1527)) / (_1440 + 9.9999997473787516355514526367188e-06);
        float _4128 = isnan(0.0) ? _1550 : (isnan(_1550) ? 0.0 : max(_1550, 0.0));
        float _1551 = isnan(1.0) ? _4128 : (isnan(_4128) ? 1.0 : min(_4128, 1.0));
        float _1552 = _1551 * 2.0;
        float _1556 = (1.0 - _1551) / (_1551 + 1.0);
        float _4139 = isnan(0.0) ? _1556 : (isnan(_1556) ? 0.0 : max(_1556, 0.0));
        float _1557 = isnan(1.0) ? _4139 : (isnan(_4139) ? 1.0 : min(_4139, 1.0));
        float _1566 = ((((1.0 - _1557) * (_1552 + 2.0)) * exp2(log2(isnan(1.0) ? _4117 : (isnan(_4117) ? 1.0 : min(_4117, 1.0))) * (_1552 + 1.0))) + _1557) * _1440;
        _1574 = _1407;
        _1575 = _1406;
        _1576 = _1405;
        _1577 = _1417;
        _1578 = _1416;
        _1579 = _1415;
        _1580 = _1427;
        _1581 = _1426;
        _1582 = _1425;
        _1583 = _1440;
        _1584 = _1439;
        _1585 = _1438;
        _1586 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1482 : (isnan(_1482) ? 0.0 : max(_1482, 0.0)));
        _1587 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1524 : (isnan(_1524) ? 0.0 : max(_1524, 0.0)));
        _1588 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1566 : (isnan(_1566) ? 0.0 : max(_1566, 0.0)));
    }
    else
    {
        _1574 = _1262;
        _1575 = _1262;
        _1576 = _1262;
        _1577 = _1262;
        _1578 = _1262;
        _1579 = _1262;
        _1580 = _1262;
        _1581 = _1262;
        _1582 = _1262;
        _1583 = _1262;
        _1584 = _1262;
        _1585 = _1262;
        _1586 = 0.0;
        _1587 = 0.0;
        _1588 = 0.0;
    }
    float _1598 = (cbModelParam._m0[1u].x * (_1586 - _1274)) + _1274;
    float _1599 = (cbModelParam._m0[1u].x * (_1587 - _1275)) + _1275;
    float _1600 = (cbModelParam._m0[1u].x * (_1588 - _1276)) + _1276;
    float _1621 = fma(_1600, cbSceneParam._m0[89u].z, fma(_1599, cbSceneParam._m0[89u].y, _1598 * cbSceneParam._m0[89u].x));
    float _1624 = fma(_1600, cbSceneParam._m0[90u].z, fma(_1599, cbSceneParam._m0[90u].y, _1598 * cbSceneParam._m0[90u].x));
    float _1627 = fma(_1600, cbSceneParam._m0[91u].z, fma(_1599, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1598));
    float _1642 = _871 * 0.5;
    float _1643 = _872 * 0.5;
    float _1644 = _873 * 0.5;
    float _1645 = dot(vec4(_1642, _1643, _1644, 1.0), vec4(_1576, _1579, _1582, _1585));
    float _1648 = dot(vec4(_1642, _1643, _1644, 1.0), vec4(_1575, _1578, _1581, _1584));
    float _1651 = dot(vec4(_1642, _1643, _1644, 1.0), vec4(_1574, _1577, _1580, _1583));
    float _1682;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1658 = dot(vec4(_1642, _1643, _1644, 1.0), vec4(_1261, _1265, _1268, _1271));
        float _1662 = dot(vec4(_1642, _1643, _1644, 1.0), vec4(_1263, _1266, _1269, _1272));
        float _1666 = dot(vec4(_1642, _1643, _1644, 1.0), vec4(_1264, _1267, _1270, _1273));
        float _1673 = dot(vec4(cbModelParam._m0[39u]), vec4(_1642, _1643, _1644, 1.0));
        _1682 = dot(vec3(isnan(0.0) ? _1666 : (isnan(_1666) ? 0.0 : max(_1666, 0.0)), isnan(0.0) ? _1662 : (isnan(_1662) ? 0.0 : max(_1662, 0.0)), isnan(0.0) ? _1658 : (isnan(_1658) ? 0.0 : max(_1658, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1673) ? 0.0 : (isnan(0.0) ? _1673 : max(0.0, _1673))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1682 = 1.0;
    }
    float _1693;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1684 = dot(vec4(cbModelParam._m0[40u]), vec4(_1642, _1643, _1644, 1.0));
        _1693 = dot(vec3(isnan(0.0) ? _1645 : (isnan(_1645) ? 0.0 : max(_1645, 0.0)), isnan(0.0) ? _1648 : (isnan(_1648) ? 0.0 : max(_1648, 0.0)), isnan(0.0) ? _1651 : (isnan(_1651) ? 0.0 : max(_1651, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1684) ? 0.0 : (isnan(0.0) ? _1684 : max(0.0, _1684))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1693 = 1.0;
    }
    float _1697 = (_1693 * cbModelParam._m0[1u].x) + (_1682 * (1.0 - cbModelParam._m0[1u].x));
    float _1707 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _733);
    float _1708 = isnan(_1707) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1707 : min(cbModelParam._m0[25u].z, _1707));
    float _1788;
    float _1790;
    float _1792;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1755 = fma(_930, cbModelParam._m0[13u].z, fma(_926, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _922)) + cbModelParam._m0[13u].w;
        float _1759 = fma(_930, cbModelParam._m0[14u].z, fma(_926, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _922)) + cbModelParam._m0[14u].w;
        float _1763 = fma(_930, cbModelParam._m0[15u].z, fma(_926, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _922)) + cbModelParam._m0[15u].w;
        float _1766 = fma(_873, cbModelParam._m0[13u].z, fma(_872, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _871));
        float _1769 = fma(_873, cbModelParam._m0[14u].z, fma(_872, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _871));
        float _1772 = fma(_873, cbModelParam._m0[15u].z, fma(_872, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _871));
        float _1800;
        if (_1766 > 0.0)
        {
            _1800 = abs((1.0 - _1755) / _1766);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1766 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1755 + 1.0) / _1766);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1800 = frontier_phi_19_17_ladder;
        }
        float _2004;
        if (_1769 > 0.0)
        {
            _2004 = abs((1.0 - _1759) / _1769);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1769 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1759 + 1.0) / _1769);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2004 = frontier_phi_28_24_ladder;
        }
        float _2258;
        if (_1772 > 0.0)
        {
            _2258 = abs((1.0 - _1763) / _1772);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1772 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1763 + 1.0) / _1772);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2258 = frontier_phi_40_35_ladder;
        }
        float _2260 = isnan(_2004) ? _1800 : (isnan(_1800) ? _2004 : min(_1800, _2004));
        float _2261 = isnan(_2258) ? _2260 : (isnan(_2260) ? _2258 : min(_2260, _2258));
        float _2265 = (_2261 * _1766) + _1755;
        float _2266 = (_2261 * _1769) + _1759;
        float _2267 = (_2261 * _1772) + _1763;
        float _2268 = _2261 * 9.9999997473787516355514526367188e-05;
        float _2270 = (-1.0) - _2268;
        float _2272 = _2268 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2267 > _2272) || ((_2267 < _2270) || ((_2266 > _2272) || ((_2266 < _2270) || ((_2265 < _2270) || (_2265 > _2272))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2395 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2267, cbModelParam._m0[9u].z, fma(_2266, cbModelParam._m0[9u].y, _2265 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2267, cbModelParam._m0[10u].z, fma(_2266, cbModelParam._m0[10u].y, _2265 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2267, cbModelParam._m0[11u].z, fma(_2266, cbModelParam._m0[11u].y, _2265 * cbModelParam._m0[11u].x))), _1708);
            frontier_phi_18_40_ladder = _2395.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2395.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2395.x * cbModelParam._m0[1u].y;
        }
        _1788 = frontier_phi_18_40_ladder_2;
        _1790 = frontier_phi_18_40_ladder_1;
        _1792 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1776 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_871, _872, _873), _1708);
        _1788 = _1776.x * cbModelParam._m0[1u].y;
        _1790 = _1776.y * cbModelParam._m0[1u].y;
        _1792 = _1776.z * cbModelParam._m0[1u].y;
    }
    float _1796 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _733);
    float _1797 = isnan(_1796) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1796 : min(cbModelParam._m0[25u].w, _1796));
    float _1888;
    float _1890;
    float _1892;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1852 = fma(_930, cbModelParam._m0[21u].z, fma(_926, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _922)) + cbModelParam._m0[21u].w;
        float _1856 = fma(_930, cbModelParam._m0[22u].z, fma(_926, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _922)) + cbModelParam._m0[22u].w;
        float _1860 = fma(_930, cbModelParam._m0[23u].z, fma(_926, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _922)) + cbModelParam._m0[23u].w;
        float _1863 = fma(_873, cbModelParam._m0[21u].z, fma(_872, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _871));
        float _1866 = fma(_873, cbModelParam._m0[22u].z, fma(_872, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _871));
        float _1869 = fma(_873, cbModelParam._m0[23u].z, fma(_872, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _871));
        float _2009;
        if (_1863 > 0.0)
        {
            _2009 = abs((1.0 - _1852) / _1863);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1863 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1852 + 1.0) / _1863);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _2009 = frontier_phi_30_26_ladder;
        }
        float _2285;
        if (_1866 > 0.0)
        {
            _2285 = abs((1.0 - _1856) / _1866);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1866 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1856 + 1.0) / _1866);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2285 = frontier_phi_42_37_ladder;
        }
        float _2498;
        if (_1869 > 0.0)
        {
            _2498 = abs((1.0 - _1860) / _1869);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1869 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1860 + 1.0) / _1869);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2498 = frontier_phi_51_48_ladder;
        }
        float _2500 = isnan(_2285) ? _2009 : (isnan(_2009) ? _2285 : min(_2009, _2285));
        float _2501 = isnan(_2498) ? _2500 : (isnan(_2500) ? _2498 : min(_2500, _2498));
        float _2505 = (_2501 * _1863) + _1852;
        float _2506 = (_2501 * _1866) + _1856;
        float _2507 = (_2501 * _1869) + _1860;
        float _2508 = _2501 * 9.9999997473787516355514526367188e-05;
        float _2509 = (-1.0) - _2508;
        float _2511 = _2508 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2507 > _2511) || ((_2507 < _2509) || ((_2506 > _2511) || ((_2506 < _2509) || ((_2505 < _2509) || (_2505 > _2511))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2741 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2507, cbModelParam._m0[17u].z, fma(_2506, cbModelParam._m0[17u].y, _2505 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2507, cbModelParam._m0[18u].z, fma(_2506, cbModelParam._m0[18u].y, _2505 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2507, cbModelParam._m0[19u].z, fma(_2506, cbModelParam._m0[19u].y, _2505 * cbModelParam._m0[19u].x))), _1797);
            frontier_phi_27_51_ladder = _2741.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2741.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2741.x * cbModelParam._m0[1u].z;
        }
        _1888 = frontier_phi_27_51_ladder_2;
        _1890 = frontier_phi_27_51_ladder_1;
        _1892 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1872 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_871, _872, _873), _1797);
        _1888 = _1872.x * cbModelParam._m0[1u].z;
        _1890 = _1872.y * cbModelParam._m0[1u].z;
        _1892 = _1872.z * cbModelParam._m0[1u].z;
    }
    float _1905 = (((_893 * _852) + _894) * _866) * ((cbModelParam._m0[1u].w * (_1888 - _1788)) + _1788);
    float _1907 = (((_893 * _853) + _894) * _866) * ((cbModelParam._m0[1u].w * (_1890 - _1790)) + _1790);
    float _1909 = (((_893 * _854) + _894) * _866) * ((cbModelParam._m0[1u].w * (_1892 - _1792)) + _1792);
    float _1912 = fma(_1909, cbSceneParam._m0[89u].z, fma(_1907, cbSceneParam._m0[89u].y, _1905 * cbSceneParam._m0[89u].x));
    float _1915 = fma(_1909, cbSceneParam._m0[90u].z, fma(_1907, cbSceneParam._m0[90u].y, _1905 * cbSceneParam._m0[90u].x));
    float _1918 = fma(_1909, cbSceneParam._m0[91u].z, fma(_1907, cbSceneParam._m0[91u].y, _1905 * cbSceneParam._m0[91u].x));
    uvec4 _1928 = floatBitsToUint(cbInstanceData._m0[_757 + 5u]);
    uint _1930 = _1928.x * 14u;
    uint _1931 = _1930 + 13u;
    float _1938 = _866 + (-1.0);
    float _1943 = (cbLight._m0[_1931].x * _1938) + 1.0;
    float _1944 = (cbLight._m0[_1931].y * _1938) + 1.0;
    float _1945 = (cbLight._m0[_1931].z * _1938) + 1.0;
    float _1946 = (cbLight._m0[_1931].w * _1938) + 1.0;
    uint _1947 = _1930 + 5u;
    float _1953 = isnan(1.0) ? _1944 : (isnan(_1944) ? 1.0 : min(_1944, 1.0));
    uint _1957 = _1930 + 4u;
    float _1963 = isnan(1.0) ? _1943 : (isnan(_1943) ? 1.0 : min(_1943, 1.0));
    uint _1967 = _1930 | 1u;
    float _1978 = dot(vec3(cbLight._m0[_1930].xyz), vec3(_478, _479, _480));
    float _1981 = dot(vec3(cbLight._m0[_1967].xyz), vec3(_478, _479, _480));
    float _4275 = isnan(0.0) ? _1978 : (isnan(_1978) ? 0.0 : max(_1978, 0.0));
    float _4286 = isnan(0.0) ? _1981 : (isnan(_1981) ? 0.0 : max(_1981, 0.0));
    float _1986 = (isnan(1.0) ? _4275 : (isnan(_4275) ? 1.0 : min(_4275, 1.0))) * 0.3183098733425140380859375;
    float _1988 = (isnan(1.0) ? _4286 : (isnan(_4286) ? 1.0 : min(_4286, 1.0))) * 0.3183098733425140380859375;
    float _1995 = ((cbLight._m0[_1947].x * _1953) * _1988) + ((cbLight._m0[_1957].x * _1963) * _1986);
    float _1996 = ((_1953 * cbLight._m0[_1947].y) * _1988) + ((_1963 * cbLight._m0[_1957].y) * _1986);
    float _1997 = ((_1953 * cbLight._m0[_1947].z) * _1988) + ((_1963 * cbLight._m0[_1957].z) * _1986);
    uvec4 _2001 = floatBitsToUint(cbLight._m0[_1930 + 12u]);
    bool _2003 = _2001.x == 0u;
    float _2014;
    float _2016;
    float _2018;
    if (_2003)
    {
        _2014 = _1995;
        _2016 = _1996;
        _2018 = _1997;
    }
    else
    {
        uint _2022 = _1930 + 6u;
        float _2038 = (dot(vec3(cbLight._m0[_1930 + 2u].xyz), vec3(_478, _479, _480)) * 0.5) + 0.5;
        float _2039 = _2038 * _2038;
        float _4297 = isnan(0.0) ? _2039 : (isnan(_2039) ? 0.0 : max(_2039, 0.0));
        float _2040 = isnan(1.0) ? _4297 : (isnan(_4297) ? 1.0 : min(_4297, 1.0));
        float _2041 = isnan(1.0) ? _1945 : (isnan(_1945) ? 1.0 : min(_1945, 1.0));
        _2014 = (((cbLight._m0[_2022].x * 0.3183098733425140380859375) * _2040) * _2041) + _1995;
        _2016 = (((cbLight._m0[_2022].y * 0.3183098733425140380859375) * _2040) * _2041) + _1996;
        _2018 = (((cbLight._m0[_2022].z * 0.3183098733425140380859375) * _2040) * _2041) + _1997;
    }
    bool _2021 = _2001.y == 0u;
    float _2059;
    float _2061;
    float _2063;
    if (_2021)
    {
        _2059 = _2014;
        _2061 = _2016;
        _2063 = _2018;
    }
    else
    {
        uint _2229 = _1930 + 7u;
        float _2245 = (dot(vec3(cbLight._m0[_1930 + 3u].xyz), vec3(_478, _479, _480)) * 0.5) + 0.5;
        float _2246 = _2245 * _2245;
        float _4313 = isnan(0.0) ? _2246 : (isnan(_2246) ? 0.0 : max(_2246, 0.0));
        float _2247 = isnan(1.0) ? _4313 : (isnan(_4313) ? 1.0 : min(_4313, 1.0));
        float _2248 = isnan(1.0) ? _1946 : (isnan(_1946) ? 1.0 : min(_1946, 1.0));
        _2059 = (((cbLight._m0[_2229].x * 0.3183098733425140380859375) * _2247) * _2248) + _2014;
        _2061 = (((cbLight._m0[_2229].y * 0.3183098733425140380859375) * _2247) * _2248) + _2016;
        _2063 = (((cbLight._m0[_2229].z * 0.3183098733425140380859375) * _2247) * _2248) + _2018;
    }
    uint _2066 = _1930 + 8u;
    float _2079 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1930].w)) * _733) * 0.949999988079071044921875);
    float _2080 = _2079 * _2079;
    float _2081 = cbLight._m0[_1930].x + _504;
    float _2082 = cbLight._m0[_1930].y + _505;
    float _2083 = cbLight._m0[_1930].z + _506;
    float _2087 = inversesqrt(dot(vec3(_2081, _2082, _2083), vec3(_2081, _2082, _2083)));
    float _2088 = _2087 * _2081;
    float _2089 = _2087 * _2082;
    float _2090 = _2087 * _2083;
    float _2091 = dot(vec3(_478, _479, _480), vec3(cbLight._m0[_1930].xyz));
    float _4329 = isnan(0.0) ? _2091 : (isnan(_2091) ? 0.0 : max(_2091, 0.0));
    float _2094 = isnan(1.0) ? _4329 : (isnan(_4329) ? 1.0 : min(_4329, 1.0));
    float _4340 = isnan(0.0) ? _507 : (isnan(_507) ? 0.0 : max(_507, 0.0));
    float _2095 = isnan(1.0) ? _4340 : (isnan(_4340) ? 1.0 : min(_4340, 1.0));
    float _2096 = dot(vec3(_478, _479, _480), vec3(_2088, _2089, _2090));
    float _4351 = isnan(0.0) ? _2096 : (isnan(_2096) ? 0.0 : max(_2096, 0.0));
    float _2099 = isnan(1.0) ? _4351 : (isnan(_4351) ? 1.0 : min(_4351, 1.0));
    float _2100 = dot(vec3(cbLight._m0[_1930].xyz), vec3(_2088, _2089, _2090));
    float _4362 = isnan(0.0) ? _2100 : (isnan(_2100) ? 0.0 : max(_2100, 0.0));
    float _2104 = _2080 * _2080;
    float _2108 = ((_2099 * _2099) * (_2104 + (-1.0))) + 1.0;
    float _2116 = exp2(log2(1.0 - (isnan(1.0) ? _4362 : (isnan(_4362) ? 1.0 : min(_4362, 1.0)))) * 5.0);
    float _2117 = 0.959999978542327880859375 - _849;
    float _2119 = 0.959999978542327880859375 - _850;
    float _2120 = 0.959999978542327880859375 - _851;
    float _2127 = 1.0 - _2080;
    float _2138 = (0.5 / (((_2095 * ((_2094 * _2127) + _2080)) + 9.9999999392252902907785028219223e-09) + (((_2095 * _2127) + _2080) * _2094))) * _2094;
    float _4373 = isnan(0.0) ? _2138 : (isnan(_2138) ? 0.0 : max(_2138, 0.0));
    float _2140 = (isnan(1.0) ? _4373 : (isnan(_4373) ? 1.0 : min(_4373, 1.0))) * (_2104 / ((_2108 * _2108) * 3.141590118408203125));
    uint _2151 = _1930 + 9u;
    float _2162 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1967].w)) * _733) * 0.949999988079071044921875);
    float _2163 = _2162 * _2162;
    float _2164 = cbLight._m0[_1967].x + _504;
    float _2165 = cbLight._m0[_1967].y + _505;
    float _2166 = cbLight._m0[_1967].z + _506;
    float _2170 = inversesqrt(dot(vec3(_2164, _2165, _2166), vec3(_2164, _2165, _2166)));
    float _2171 = _2170 * _2164;
    float _2172 = _2170 * _2165;
    float _2173 = _2170 * _2166;
    float _2174 = dot(vec3(_478, _479, _480), vec3(cbLight._m0[_1967].xyz));
    float _4384 = isnan(0.0) ? _2174 : (isnan(_2174) ? 0.0 : max(_2174, 0.0));
    float _2177 = isnan(1.0) ? _4384 : (isnan(_4384) ? 1.0 : min(_4384, 1.0));
    float _2178 = dot(vec3(_478, _479, _480), vec3(_2171, _2172, _2173));
    float _4395 = isnan(0.0) ? _2178 : (isnan(_2178) ? 0.0 : max(_2178, 0.0));
    float _2181 = isnan(1.0) ? _4395 : (isnan(_4395) ? 1.0 : min(_4395, 1.0));
    float _2182 = dot(vec3(cbLight._m0[_1967].xyz), vec3(_2171, _2172, _2173));
    float _4406 = isnan(0.0) ? _2182 : (isnan(_2182) ? 0.0 : max(_2182, 0.0));
    float _2186 = _2163 * _2163;
    float _2190 = ((_2181 * _2181) * (_2186 + (-1.0))) + 1.0;
    float _2197 = exp2(log2(1.0 - (isnan(1.0) ? _4406 : (isnan(_4406) ? 1.0 : min(_4406, 1.0)))) * 5.0);
    float _2204 = 1.0 - _2163;
    float _2214 = (0.5 / (((_2095 * ((_2177 * _2204) + _2163)) + 9.9999999392252902907785028219223e-09) + (((_2095 * _2204) + _2163) * _2177))) * _2177;
    float _4417 = isnan(0.0) ? _2214 : (isnan(_2214) ? 0.0 : max(_2214, 0.0));
    float _2216 = (isnan(1.0) ? _4417 : (isnan(_4417) ? 1.0 : min(_4417, 1.0))) * (_2186 / ((_2190 * _2190) * 3.141590118408203125));
    float _2226 = (((((_2197 * _2117) + _852) * cbLight._m0[_2151].x) * _2216) * _1953) + (((((_2116 * _2117) + _852) * cbLight._m0[_2066].x) * _2140) * _1963);
    float _2227 = (((((_2197 * _2119) + _853) * cbLight._m0[_2151].y) * _2216) * _1953) + (((((_2116 * _2119) + _853) * cbLight._m0[_2066].y) * _2140) * _1963);
    float _2228 = (((((_2197 * _2120) + _854) * cbLight._m0[_2151].z) * _2216) * _1953) + (((((_2116 * _2120) + _854) * cbLight._m0[_2066].z) * _2140) * _1963);
    float _2290;
    float _2292;
    float _2294;
    if (_2003)
    {
        _2290 = _2226;
        _2292 = _2227;
        _2294 = _2228;
    }
    else
    {
        uint _2296 = _1930 + 2u;
        uint _2300 = _1930 + 10u;
        float _2314 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2296].w)) * _733) * 0.949999988079071044921875);
        float _2315 = _2314 * _2314;
        float _2316 = cbLight._m0[_2296].x + _504;
        float _2317 = cbLight._m0[_2296].y + _505;
        float _2318 = cbLight._m0[_2296].z + _506;
        float _2322 = inversesqrt(dot(vec3(_2316, _2317, _2318), vec3(_2316, _2317, _2318)));
        float _2323 = _2322 * _2316;
        float _2324 = _2322 * _2317;
        float _2325 = _2322 * _2318;
        float _2326 = dot(vec3(_478, _479, _480), vec3(cbLight._m0[_2296].xyz));
        float _4428 = isnan(0.0) ? _2326 : (isnan(_2326) ? 0.0 : max(_2326, 0.0));
        float _2329 = isnan(1.0) ? _4428 : (isnan(_4428) ? 1.0 : min(_4428, 1.0));
        float _2330 = dot(vec3(_478, _479, _480), vec3(_2323, _2324, _2325));
        float _4439 = isnan(0.0) ? _2330 : (isnan(_2330) ? 0.0 : max(_2330, 0.0));
        float _2333 = isnan(1.0) ? _4439 : (isnan(_4439) ? 1.0 : min(_4439, 1.0));
        float _2334 = dot(vec3(cbLight._m0[_2296].xyz), vec3(_2323, _2324, _2325));
        float _4450 = isnan(0.0) ? _2334 : (isnan(_2334) ? 0.0 : max(_2334, 0.0));
        float _2338 = _2315 * _2315;
        float _2342 = ((_2333 * _2333) * (_2338 + (-1.0))) + 1.0;
        float _2349 = exp2(log2(1.0 - (isnan(1.0) ? _4450 : (isnan(_4450) ? 1.0 : min(_4450, 1.0)))) * 5.0);
        float _2356 = 1.0 - _2315;
        float _2366 = (0.5 / (((_2095 * ((_2329 * _2356) + _2315)) + 9.9999999392252902907785028219223e-09) + (((_2095 * _2356) + _2315) * _2329))) * _2329;
        float _4461 = isnan(0.0) ? _2366 : (isnan(_2366) ? 0.0 : max(_2366, 0.0));
        float _2368 = (isnan(1.0) ? _4461 : (isnan(_4461) ? 1.0 : min(_4461, 1.0))) * (_2338 / ((_2342 * _2342) * 3.141590118408203125));
        float _2369 = isnan(1.0) ? _1945 : (isnan(_1945) ? 1.0 : min(_1945, 1.0));
        _2290 = (((((_2349 * _2117) + _852) * cbLight._m0[_2300].x) * _2368) * _2369) + _2226;
        _2292 = (((((_2349 * _2119) + _853) * cbLight._m0[_2300].y) * _2368) * _2369) + _2227;
        _2294 = (((((_2349 * _2120) + _854) * cbLight._m0[_2300].z) * _2368) * _2369) + _2228;
    }
    float _2404;
    float _2406;
    float _2408;
    if (_2021)
    {
        _2404 = _2290;
        _2406 = _2292;
        _2408 = _2294;
    }
    else
    {
        uint _2415 = _1930 + 3u;
        uint _2419 = _1930 + 11u;
        float _2433 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2415].w)) * _733) * 0.949999988079071044921875);
        float _2434 = _2433 * _2433;
        float _2435 = cbLight._m0[_2415].x + _504;
        float _2436 = cbLight._m0[_2415].y + _505;
        float _2437 = cbLight._m0[_2415].z + _506;
        float _2441 = inversesqrt(dot(vec3(_2435, _2436, _2437), vec3(_2435, _2436, _2437)));
        float _2442 = _2441 * _2435;
        float _2443 = _2441 * _2436;
        float _2444 = _2441 * _2437;
        float _2445 = dot(vec3(_478, _479, _480), vec3(cbLight._m0[_2415].xyz));
        float _4477 = isnan(0.0) ? _2445 : (isnan(_2445) ? 0.0 : max(_2445, 0.0));
        float _2448 = isnan(1.0) ? _4477 : (isnan(_4477) ? 1.0 : min(_4477, 1.0));
        float _2449 = dot(vec3(_478, _479, _480), vec3(_2442, _2443, _2444));
        float _4488 = isnan(0.0) ? _2449 : (isnan(_2449) ? 0.0 : max(_2449, 0.0));
        float _2452 = isnan(1.0) ? _4488 : (isnan(_4488) ? 1.0 : min(_4488, 1.0));
        float _2453 = dot(vec3(cbLight._m0[_2415].xyz), vec3(_2442, _2443, _2444));
        float _4499 = isnan(0.0) ? _2453 : (isnan(_2453) ? 0.0 : max(_2453, 0.0));
        float _2457 = _2434 * _2434;
        float _2461 = ((_2452 * _2452) * (_2457 + (-1.0))) + 1.0;
        float _2468 = exp2(log2(1.0 - (isnan(1.0) ? _4499 : (isnan(_4499) ? 1.0 : min(_4499, 1.0)))) * 5.0);
        float _2475 = 1.0 - _2434;
        float _2485 = (0.5 / (((_2095 * ((_2448 * _2475) + _2434)) + 9.9999999392252902907785028219223e-09) + (((_2095 * _2475) + _2434) * _2448))) * _2448;
        float _4510 = isnan(0.0) ? _2485 : (isnan(_2485) ? 0.0 : max(_2485, 0.0));
        float _2487 = (isnan(1.0) ? _4510 : (isnan(_4510) ? 1.0 : min(_4510, 1.0))) * (_2457 / ((_2461 * _2461) * 3.141590118408203125));
        float _2488 = isnan(1.0) ? _1946 : (isnan(_1946) ? 1.0 : min(_1946, 1.0));
        _2404 = (((((_2468 * _2117) + _852) * cbLight._m0[_2419].x) * _2487) * _2488) + _2290;
        _2406 = (((((_2468 * _2119) + _853) * cbLight._m0[_2419].y) * _2487) * _2488) + _2292;
        _2408 = (((((_2468 * _2120) + _854) * cbLight._m0[_2419].z) * _2487) * _2488) + _2294;
    }
    float _2622;
    float _2624;
    float _2626;
    float _2628;
    float _2630;
    float _2632;
    if (_1928.y == 0u)
    {
        float _2563 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2564 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2563;
        float _2565 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2563;
        float _2566 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2563;
        uvec4 _2578 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2579 = _2578.x;
        uint _2590 = uint((float(_2578.y) * floor(float(uint(cbSceneParam._m0[85u].y * _655) / _2579))) + floor(float(uint(cbSceneParam._m0[85u].x * _654) / _2579)));
        float _2600 = (log2(_2566 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2601 = isnan(0.0) ? _2600 : (isnan(_2600) ? 0.0 : max(_2600, 0.0));
        uint _2604 = uint(isnan(14.0) ? _2601 : (isnan(_2601) ? 14.0 : min(_2601, 14.0)));
        uvec4 _2609 = texelFetch(g_lightClusterGridBuffer, int(((_2604 << 2u) + (_2590 << 6u)) >> 2u));
        uint _2610 = _2609.x;
        uint _2611 = _2578.z;
        float _2746;
        float _2748;
        float _2750;
        float _2752;
        float _2754;
        float _2756;
        if (((((1u << ((_2611 >> 4u) & 15u)) + 4294967295u) & _2610) == 0u) || ((_2611 & 240u) == 0u))
        {
            _2746 = 0.0;
            _2748 = 0.0;
            _2750 = 0.0;
            _2752 = 0.0;
            _2754 = 0.0;
            _2756 = 0.0;
        }
        else
        {
            float _2747;
            float _2749;
            float _2751;
            float _2753;
            float _2755;
            float _2757;
            float _2907 = 0.0;
            float _2908 = 0.0;
            float _2909 = 0.0;
            float _2910 = 0.0;
            float _2911 = 0.0;
            float _2912 = 0.0;
            uint _2913 = 0u;
            uint _2922;
            bool _2923;
            for (;;)
            {
                _2922 = texelFetch(g_lightClassification, int((((_2604 << 5u) + (_2590 << 9u)) + (_2913 << 2u)) >> 2u)).x;
                _2923 = _2922 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2923)
                {
                    frontier_phi_68_pred = _2909;
                    frontier_phi_68_pred_1 = _2912;
                    frontier_phi_68_pred_2 = _2911;
                    frontier_phi_68_pred_3 = _2910;
                    frontier_phi_68_pred_4 = _2908;
                    frontier_phi_68_pred_5 = _2907;
                }
                else
                {
                    float _3052;
                    float _3053;
                    float _3054;
                    float _3055;
                    float _3056;
                    float _3057;
                    uint _3058;
                    _3052 = _2907;
                    _3053 = _2908;
                    _3054 = _2909;
                    _3055 = _2910;
                    _3056 = _2911;
                    _3057 = _2912;
                    _3058 = _2922;
                    float _2979;
                    float _2980;
                    float _2981;
                    float _2982;
                    float _2983;
                    float _2984;
                    for (;;)
                    {
                        uint _3062 = uint(findLSB(_3058)) + (_2913 << 5u);
                        uint _3059 = (_3058 + 4294967295u) & _3058;
                        uint _3064 = _3062 * 48u;
                        vec4 _3078 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3064)).x, texelFetch(g_PointLightRenderingBuffer, int(_3064 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3064 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3064 + 3u)).x));
                        uint _3084 = (_3062 * 48u) + 4u;
                        vec4 _3097 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3084)).x, texelFetch(g_PointLightRenderingBuffer, int(_3084 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3084 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3084 + 3u)).x));
                        uint _3103 = (_3062 * 48u) + 8u;
                        vec3 _3114 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3103)).x, texelFetch(g_PointLightRenderingBuffer, int(_3103 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3103 + 2u)).x));
                        float _3118 = _3078.x - _2564;
                        float _3119 = _3078.y - _2565;
                        float _3120 = _3078.z - _2566;
                        float _3121 = dot(vec3(_3118, _3119, _3120), vec3(_3118, _3119, _3120));
                        float _3124 = inversesqrt(_3121);
                        float _3125 = _3124 * _3118;
                        float _3126 = _3124 * _3119;
                        float _3127 = _3124 * _3120;
                        float _3128 = dot(vec3(_678, _681, _684), vec3(_3125, _3126, _3127));
                        float _3133 = 1.0 - (_3121 * _3078.w);
                        float _4536 = isnan(0.0) ? _3133 : (isnan(_3133) ? 0.0 : max(_3133, 0.0));
                        float _3134 = isnan(1.0) ? _4536 : (isnan(_4536) ? 1.0 : min(_4536, 1.0));
                        float _3135 = sqrt(_3121) * _3097.w;
                        float _3138 = 1.39999997615814208984375 / (_3135 + 1.39999997615814208984375);
                        float _3139 = _3138 * _3138;
                        float _3142 = ((1.0 - _3139) * _3128) + _3139;
                        float _3145 = _3135 * _3135;
                        float _3148 = ((isnan(0.0) ? _3142 : (isnan(_3142) ? 0.0 : max(_3142, 0.0))) * _3134) / ((_3145 * 0.699999988079071044921875) + 1.0);
                        float _3152 = (-0.0) - _2564;
                        float _3153 = (-0.0) - _2565;
                        float _3154 = (-0.0) - _2566;
                        float _3158 = inversesqrt(dot(vec3(_3152, _3153, _3154), vec3(_3152, _3153, _3154)));
                        float _3159 = _3158 * _3152;
                        float _3160 = _3158 * _3153;
                        float _3161 = _3158 * _3154;
                        float _3169 = exp2(log2(1.0 / ((_3145 * 3.5) + 5.0)) * 0.25);
                        float _3170 = 1.0 - _876;
                        float _3177 = sqrt(1.0 - ((1.0 - (_3170 * _3170)) * (1.0 - (_3169 * _3169))));
                        float _3178 = _3177 * _3177;
                        float _3179 = _3178 * _3178;
                        float _3180 = _3159 + _3125;
                        float _3181 = _3160 + _3126;
                        float _3182 = _3161 + _3127;
                        float _3186 = inversesqrt(dot(vec3(_3180, _3181, _3182), vec3(_3180, _3181, _3182)));
                        float _3190 = dot(vec3(_678, _681, _684), vec3(_3159, _3160, _3161));
                        float _4552 = isnan(0.0) ? _3190 : (isnan(_3190) ? 0.0 : max(_3190, 0.0));
                        float _3193 = isnan(1.0) ? _4552 : (isnan(_4552) ? 1.0 : min(_4552, 1.0));
                        float _3194 = dot(vec3(_678, _681, _684), vec3(_3186 * _3180, _3186 * _3181, _3186 * _3182));
                        float _4563 = isnan(0.0) ? _3194 : (isnan(_3194) ? 0.0 : max(_3194, 0.0));
                        float _3197 = isnan(1.0) ? _4563 : (isnan(_4563) ? 1.0 : min(_4563, 1.0));
                        float _3201 = ((_3197 * _3197) * (_3179 + (-1.0))) + 1.0;
                        float _3202 = _3138 * _3178;
                        float _3203 = _3202 * _3202;
                        float _3206 = ((1.0 - _3203) * _3128) + _3203;
                        float _4574 = isnan(0.0) ? _3206 : (isnan(_3206) ? 0.0 : max(_3206, 0.0));
                        float _3207 = isnan(1.0) ? _4574 : (isnan(_4574) ? 1.0 : min(_4574, 1.0));
                        float _3208 = 1.0 - _3178;
                        float _3218 = (0.5 / (((_3207 * ((_3193 * _3208) + _3178)) + 9.9999999392252902907785028219223e-09) + (((_3207 * _3208) + _3178) * _3193))) * _3207;
                        float _4585 = isnan(0.0) ? _3218 : (isnan(_3218) ? 0.0 : max(_3218, 0.0));
                        float _3229 = (((_3179 * 3.1415927410125732421875) * (isnan(1.0) ? _4585 : (isnan(_4585) ? 1.0 : min(_4585, 1.0)))) / ((_3201 * _3201) * ((_3145 * 2.1991131305694580078125) + 3.141590118408203125))) * _3134;
                        _2982 = (_3148 * _3097.x) + _3055;
                        _2983 = (_3148 * _3097.y) + _3056;
                        _2984 = (_3148 * _3097.z) + _3057;
                        _2979 = (_3229 * _3114.x) + _3052;
                        _2980 = (_3229 * _3114.y) + _3053;
                        _2981 = (_3229 * _3114.z) + _3054;
                        if (_3059 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3052 = _2979;
                            _3053 = _2980;
                            _3054 = _2981;
                            _3055 = _2982;
                            _3056 = _2983;
                            _3057 = _2984;
                            _3058 = _3059;
                        }
                    }
                    frontier_phi_68_pred = _2981;
                    frontier_phi_68_pred_1 = _2984;
                    frontier_phi_68_pred_2 = _2983;
                    frontier_phi_68_pred_3 = _2982;
                    frontier_phi_68_pred_4 = _2980;
                    frontier_phi_68_pred_5 = _2979;
                }
                _2751 = frontier_phi_68_pred;
                _2757 = frontier_phi_68_pred_1;
                _2755 = frontier_phi_68_pred_2;
                _2753 = frontier_phi_68_pred_3;
                _2749 = frontier_phi_68_pred_4;
                _2747 = frontier_phi_68_pred_5;
                uint _2914 = _2913 + 1u;
                if (_2914 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2907 = _2747;
                    _2908 = _2749;
                    _2909 = _2751;
                    _2910 = _2753;
                    _2911 = _2755;
                    _2912 = _2757;
                    _2913 = _2914;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2746 = _2747;
            _2748 = _2749;
            _2750 = _2751;
            _2752 = _2753;
            _2754 = _2755;
            _2756 = _2757;
        }
        uvec4 _2760 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2761 = _2760.z;
        uint _2763 = (_2761 >> 8u) & 15u;
        float _2875;
        float _2877;
        float _2879;
        float _2881;
        float _2883;
        float _2885;
        if (((4294967295u << _2763) & _2610) == 0u)
        {
            _2875 = _2746;
            _2877 = _2748;
            _2879 = _2750;
            _2881 = _2752;
            _2883 = _2754;
            _2885 = _2756;
        }
        else
        {
            float _2900 = inversesqrt(dot(vec3(_2564, _2565, _2566), vec3(_2564, _2565, _2566)));
            float _2901 = _2900 * _2564;
            float _2902 = _2900 * _2565;
            float _2903 = _2900 * _2566;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2763 < ((_2761 >> 12u) & 15u))
            {
                float _2876;
                float _2878;
                float _2880;
                float _2882;
                float _2884;
                float _2886;
                float _3035 = _2746;
                float _3036 = _2748;
                float _3037 = _2750;
                float _3038 = _2752;
                float _3039 = _2754;
                float _3040 = _2756;
                uint _3041 = _2763;
                uint _3050;
                bool _3051;
                for (;;)
                {
                    _3050 = texelFetch(g_lightClassification, int((((_2604 << 5u) + (_2590 << 9u)) + (_3041 << 2u)) >> 2u)).x;
                    _3051 = _3050 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_3051)
                    {
                        frontier_phi_79_pred = _3040;
                        frontier_phi_79_pred_1 = _3039;
                        frontier_phi_79_pred_2 = _3038;
                        frontier_phi_79_pred_3 = _3037;
                        frontier_phi_79_pred_4 = _3036;
                        frontier_phi_79_pred_5 = _3035;
                    }
                    else
                    {
                        float _3243;
                        float _3244;
                        float _3245;
                        float _3246;
                        float _3247;
                        float _3248;
                        float _3538;
                        float _3539;
                        float _3540;
                        float _3541;
                        float _3542;
                        float _3543;
                        float _3256 = _3035;
                        float _3257 = _3036;
                        float _3258 = _3037;
                        float _3259 = _3038;
                        float _3260 = _3039;
                        float _3261 = _3040;
                        uint _3262 = _3050;
                        uint _3263;
                        vec4 _3288;
                        float _3289;
                        vec4 _3304;
                        vec3 _3316;
                        vec4 _3331;
                        vec4 _3347;
                        float _3394;
                        bool _3395;
                        for (;;)
                        {
                            uint _3273 = ((_3041 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3262));
                            _3263 = (_3262 + 4294967295u) & _3262;
                            uint _3275 = _3273 * 40u;
                            _3288 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3275)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3275 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3275 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3275 + 3u)).x));
                            _3289 = _3288.w;
                            uint _3291 = (_3273 * 40u) + 4u;
                            _3304 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3291)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3291 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3291 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3291 + 3u)).x));
                            uint _3306 = (_3273 * 40u) + 8u;
                            _3316 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3306)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3306 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3306 + 2u)).x));
                            uint _3318 = (_3273 * 40u) + 16u;
                            _3331 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3318)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3318 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3318 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3318 + 3u)).x));
                            uint _3334 = (_3273 * 40u) + 20u;
                            _3347 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3334)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3334 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3334 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3334 + 3u)).x));
                            uint _3350 = (_3273 * 40u) + 24u;
                            vec4 _3363 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3350)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3350 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3350 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3350 + 3u)).x));
                            uint _3369 = (_3273 * 40u) + 28u;
                            vec4 _3382 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3369)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3369 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3369 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3369 + 3u)).x));
                            _3394 = fma(_2566, _3382.z, fma(_2565, _3382.y, _3382.x * _2564)) + _3382.w;
                            _3395 = !((fma(_2566, _3363.z, fma(_2565, _3363.y, _3363.x * _2564)) + _3363.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_3395)
                            {
                                float _3422 = _3288.x - _2564;
                                float _3423 = _3288.y - _2565;
                                float _3424 = _3288.z - _2566;
                                float _3425 = dot(vec3(_3422, _3423, _3424), vec3(_3422, _3423, _3424));
                                float _3428 = inversesqrt(_3425);
                                float _3429 = _3428 * _3422;
                                float _3430 = _3428 * _3423;
                                float _3431 = _3428 * _3424;
                                float _3435 = 1.0 - (_3425 / (_3289 * _3289));
                                float _4596 = isnan(0.0) ? _3435 : (isnan(_3435) ? 0.0 : max(_3435, 0.0));
                                float _3436 = isnan(1.0) ? _4596 : (isnan(_4596) ? 1.0 : min(_4596, 1.0));
                                float _3440 = sqrt(_3425) * _3304.w;
                                float _3442 = 1.39999997615814208984375 / (_3440 + 1.39999997615814208984375);
                                float _3443 = _3442 * _3442;
                                float _3446 = ((1.0 - _3443) * dot(vec3(_3429, _3430, _3431), vec3(_678, _681, _684))) + _3443;
                                float _3449 = _3440 * _3440;
                                float _3453 = (fma(_2566, _3331.z, fma(_2565, _3331.y, _3331.x * _2564)) + _3331.w) / _3394;
                                float _3454 = (fma(_2566, _3347.z, fma(_2565, _3347.y, _3347.x * _2564)) + _3347.w) / _3394;
                                float _3458 = 1.0 - dot(vec2(_3453, _3454), vec2(_3453, _3454));
                                float _4612 = isnan(0.0) ? _3458 : (isnan(_3458) ? 0.0 : max(_3458, 0.0));
                                float _3459 = isnan(1.0) ? _4612 : (isnan(_4612) ? 1.0 : min(_4612, 1.0));
                                float _3460 = _3459 * (((isnan(0.0) ? _3446 : (isnan(_3446) ? 0.0 : max(_3446, 0.0))) * _3436) / ((_3449 * 0.699999988079071044921875) + 1.0));
                                float _3472 = exp2(log2(1.0 / ((_3449 * 3.5) + 5.0)) * 0.25);
                                float _3473 = 1.0 - _876;
                                float _3480 = sqrt(1.0 - ((1.0 - (_3473 * _3473)) * (1.0 - (_3472 * _3472))));
                                float _3481 = _3480 * _3480;
                                float _3482 = _3481 * _3481;
                                float _3483 = _3429 - _2901;
                                float _3484 = _3430 - _2902;
                                float _3485 = _3431 - _2903;
                                float _3489 = inversesqrt(dot(vec3(_3483, _3484, _3485), vec3(_3483, _3484, _3485)));
                                float _3493 = dot(vec3(_678, _681, _684), vec3((-0.0) - _2901, (-0.0) - _2902, (-0.0) - _2903));
                                float _4623 = isnan(0.0) ? _3493 : (isnan(_3493) ? 0.0 : max(_3493, 0.0));
                                float _3496 = isnan(1.0) ? _4623 : (isnan(_4623) ? 1.0 : min(_4623, 1.0));
                                float _3497 = dot(vec3(_678, _681, _684), vec3(_3489 * _3483, _3489 * _3484, _3489 * _3485));
                                float _4634 = isnan(0.0) ? _3497 : (isnan(_3497) ? 0.0 : max(_3497, 0.0));
                                float _3500 = isnan(1.0) ? _4634 : (isnan(_4634) ? 1.0 : min(_4634, 1.0));
                                float _3504 = ((_3500 * _3500) * (_3482 + (-1.0))) + 1.0;
                                float _3505 = _3442 * _3481;
                                float _3506 = _3505 * _3505;
                                float _3512 = ((1.0 - _3506) * dot(vec3(_678, _681, _684), vec3(_3429, _3430, _3431))) + _3506;
                                float _4645 = isnan(0.0) ? _3512 : (isnan(_3512) ? 0.0 : max(_3512, 0.0));
                                float _3513 = isnan(1.0) ? _4645 : (isnan(_4645) ? 1.0 : min(_4645, 1.0));
                                float _3514 = 1.0 - _3481;
                                float _3524 = (0.5 / (((_3513 * ((_3496 * _3514) + _3481)) + 9.9999999392252902907785028219223e-09) + (((_3513 * _3514) + _3481) * _3496))) * _3513;
                                float _4656 = isnan(0.0) ? _3524 : (isnan(_3524) ? 0.0 : max(_3524, 0.0));
                                float _3534 = (_3459 * _3436) * (((_3482 * 3.1415927410125732421875) * (isnan(1.0) ? _4656 : (isnan(_4656) ? 1.0 : min(_4656, 1.0)))) / ((_3504 * _3504) * ((_3449 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3460 * _3304.z;
                                frontier_phi_85_pred_1 = _3460 * _3304.y;
                                frontier_phi_85_pred_2 = _3460 * _3304.x;
                                frontier_phi_85_pred_3 = _3534 * _3316.z;
                                frontier_phi_85_pred_4 = _3534 * _3316.y;
                                frontier_phi_85_pred_5 = _3534 * _3316.x;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3543 = frontier_phi_85_pred;
                            _3542 = frontier_phi_85_pred_1;
                            _3541 = frontier_phi_85_pred_2;
                            _3540 = frontier_phi_85_pred_3;
                            _3539 = frontier_phi_85_pred_4;
                            _3538 = frontier_phi_85_pred_5;
                            _3246 = _3541 + _3259;
                            _3247 = _3542 + _3260;
                            _3248 = _3543 + _3261;
                            _3243 = _3538 + _3256;
                            _3244 = _3539 + _3257;
                            _3245 = _3540 + _3258;
                            if (_3263 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3256 = _3243;
                                _3257 = _3244;
                                _3258 = _3245;
                                _3259 = _3246;
                                _3260 = _3247;
                                _3261 = _3248;
                                _3262 = _3263;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _3248;
                        frontier_phi_79_pred_1 = _3247;
                        frontier_phi_79_pred_2 = _3246;
                        frontier_phi_79_pred_3 = _3245;
                        frontier_phi_79_pred_4 = _3244;
                        frontier_phi_79_pred_5 = _3243;
                    }
                    _2886 = frontier_phi_79_pred;
                    _2884 = frontier_phi_79_pred_1;
                    _2882 = frontier_phi_79_pred_2;
                    _2880 = frontier_phi_79_pred_3;
                    _2878 = frontier_phi_79_pred_4;
                    _2876 = frontier_phi_79_pred_5;
                    uint _3042 = _3041 + 1u;
                    if (_3042 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3035 = _2876;
                        _3036 = _2878;
                        _3037 = _2880;
                        _3038 = _2882;
                        _3039 = _2884;
                        _3040 = _2886;
                        _3041 = _3042;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2882;
                frontier_phi_60_61_ladder_1 = _2886;
                frontier_phi_60_61_ladder_2 = _2884;
                frontier_phi_60_61_ladder_3 = _2880;
                frontier_phi_60_61_ladder_4 = _2878;
                frontier_phi_60_61_ladder_5 = _2876;
            }
            else
            {
                frontier_phi_60_61_ladder = _2752;
                frontier_phi_60_61_ladder_1 = _2756;
                frontier_phi_60_61_ladder_2 = _2754;
                frontier_phi_60_61_ladder_3 = _2750;
                frontier_phi_60_61_ladder_4 = _2748;
                frontier_phi_60_61_ladder_5 = _2746;
            }
            _2875 = frontier_phi_60_61_ladder_5;
            _2877 = frontier_phi_60_61_ladder_4;
            _2879 = frontier_phi_60_61_ladder_3;
            _2881 = frontier_phi_60_61_ladder;
            _2883 = frontier_phi_60_61_ladder_2;
            _2885 = frontier_phi_60_61_ladder_1;
        }
        float _2890 = isnan(1.0) ? _866 : (isnan(_866) ? 1.0 : min(_866, 1.0));
        _2622 = (_2890 * _2881) + _2059;
        _2624 = (_2890 * _2883) + _2061;
        _2626 = (_2890 * _2885) + _2063;
        _2628 = ((_2875 * _852) * _2890) + _2404;
        _2630 = ((_2877 * _853) * _2890) + _2406;
        _2632 = ((_2879 * _854) * _2890) + _2408;
    }
    else
    {
        _2622 = _2059;
        _2624 = _2061;
        _2626 = _2063;
        _2628 = _2404;
        _2630 = _2406;
        _2632 = _2408;
    }
    uint _2638 = _759 + uint(cbMatDynParam._m0[0u].w);
    float _2644 = cbInstanceData._m0[_2638].x * (((((cbMatDynParam._m0[8u].x - cbMatDynParam._m0[7u].x) * _520) + cbMatDynParam._m0[7u].x) + (((((cbMtdParam._m0[12u].x * cbMtdParam._m0[16u].z) * cbMtdParam._m0[15u].w) * _428) * _441.x) * _549)) + (((_578 - (_578 * _486)) + (cbMatDynParam._m0[11u].x * _609)) * cbMatDynParam._m0[9u].x));
    float _2645 = cbInstanceData._m0[_2638].y * (((((cbMatDynParam._m0[8u].y - cbMatDynParam._m0[7u].y) * _520) + cbMatDynParam._m0[7u].y) + (((((cbMtdParam._m0[12u].y * cbMtdParam._m0[16u].z) * cbMtdParam._m0[15u].w) * _428) * _441.y) * _549)) + (((_580 - (_580 * _486)) + (cbMatDynParam._m0[11u].y * _609)) * cbMatDynParam._m0[9u].y));
    float _2646 = cbInstanceData._m0[_2638].z * (((((cbMatDynParam._m0[8u].z - cbMatDynParam._m0[7u].z) * _520) + cbMatDynParam._m0[7u].z) + (((((cbMtdParam._m0[12u].z * cbMtdParam._m0[16u].z) * cbMtdParam._m0[15u].w) * _428) * _441.z) * _549)) + (((_582 - (_582 * _486)) + (cbMatDynParam._m0[11u].z * _609)) * cbMatDynParam._m0[9u].z));
    float _4672 = isnan(0.0) ? _843 : (isnan(_843) ? 0.0 : max(_843, 0.0));
    float _4683 = isnan(0.0) ? _844 : (isnan(_844) ? 0.0 : max(_844, 0.0));
    float _4694 = isnan(0.0) ? _845 : (isnan(_845) ? 0.0 : max(_845, 0.0));
    float _4705 = isnan(0.0) ? _481 : (isnan(_481) ? 0.0 : max(_481, 0.0));
    float _2664 = (((isnan(1.0) ? _4672 : (isnan(_4672) ? 1.0 : min(_4672, 1.0))) * (_2622 + ((isnan(0.0) ? _1621 : (isnan(_1621) ? 0.0 : max(_1621, 0.0))) * _866))) + ((_2628 + ((isnan(0.0) ? _1912 : (isnan(_1912) ? 0.0 : max(_1912, 0.0))) * _1697)) * cbPerFrame._m0[3u].x)) + _2644;
    float _2666 = (_2645 + ((_2630 + ((isnan(0.0) ? _1915 : (isnan(_1915) ? 0.0 : max(_1915, 0.0))) * _1697)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4683 : (isnan(_4683) ? 1.0 : min(_4683, 1.0))) * (_2624 + ((isnan(0.0) ? _1624 : (isnan(_1624) ? 0.0 : max(_1624, 0.0))) * _866)));
    float _2668 = (_2646 + ((_2632 + ((isnan(0.0) ? _1918 : (isnan(_1918) ? 0.0 : max(_1918, 0.0))) * _1697)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4694 : (isnan(_4694) ? 1.0 : min(_4694, 1.0))) * (_2626 + ((isnan(0.0) ? _1627 : (isnan(_1627) ? 0.0 : max(_1627, 0.0))) * _866)));
    float _2669 = isnan(0.0) ? _2664 : (isnan(_2664) ? 0.0 : max(_2664, 0.0));
    float _2670 = isnan(0.0) ? _2666 : (isnan(_2666) ? 0.0 : max(_2666, 0.0));
    float _2671 = isnan(0.0) ? _2668 : (isnan(_2668) ? 0.0 : max(_2668, 0.0));
    float _2677 = cbMtdParam._m0[2u].x * _2644;
    float _2678 = cbMtdParam._m0[2u].y * _2645;
    float _2679 = cbMtdParam._m0[2u].z * _2646;
    float _2686 = ((cbMtdParam._m0[2u].w - cbMatDynParam._m0[12u].y) * _549) + cbMatDynParam._m0[12u].y;
    float _2691 = cbInstanceData._m0[_757 + 6u].w * (isnan(1.0) ? _4705 : (isnan(_4705) ? 1.0 : min(_4705, 1.0)));
    float _2696 = _654 / cbSceneParam._m0[86u].x;
    float _2697 = _655 / cbSceneParam._m0[86u].y;
    vec4 _2711 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2696, _2697, (log2((isnan(cbSceneParam._m0[77u].w) ? _635 : (isnan(_635) ? cbSceneParam._m0[77u].w : min(_635, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2713 = _2711.x;
    float _2714 = _2711.y;
    float _2715 = _2711.z;
    float _2716 = _2711.w;
    float _2808;
    float _2810;
    float _2812;
    float _2814;
    if (_635 > cbSceneParam._m0[78u].w)
    {
        float _2771 = isnan(_635) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _635 : min(cbSceneParam._m0[80u].w, _635));
        float _2772 = _2771 / _635;
        float _2783 = _2772 * _289;
        float _2784 = _290 * _2772;
        float _2785 = (-0.0) - _2784;
        float _2786 = _2772 * _291;
        float _2788 = (cbSceneParam._m0[77u].w * _2785) / _2771;
        float _2789 = _2788 + cbSceneParam._m0[79u].w;
        float _2790 = cbSceneParam._m0[79u].w - _2784;
        float _2796 = sqrt(((_2783 * _2783) + (_2784 * _2784)) + (_2786 * _2786));
        float _2799 = (1.0 - (cbSceneParam._m0[77u].w / _2771)) * _2796;
        float _2804 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2806 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2992;
        if (abs((_2785 - _2788) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2992 = ((((_2789 > 0.0) ? exp2(_2804 * _2789) : (2.0 - exp2(_2806 * _2789))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2799;
        }
        else
        {
            float _2936 = 1.0 / cbSceneParam._m0[80u].x;
            float _2937 = isnan(_2790) ? _2789 : (isnan(_2789) ? _2790 : max(_2789, _2790));
            float _2938 = isnan(_2790) ? _2789 : (isnan(_2789) ? _2790 : min(_2789, _2790));
            float _2947 = isnan(0.0) ? _2937 : (isnan(_2937) ? 0.0 : min(_2937, 0.0));
            float _2948 = isnan(0.0) ? _2938 : (isnan(_2938) ? 0.0 : min(_2938, 0.0));
            _2992 = ((abs(_2796 / _2785) * cbSceneParam._m0[80u].y) * ((((_2947 - _2948) * 2.0) - ((exp2(_2804 * (isnan(0.0) ? _2937 : (isnan(_2937) ? 0.0 : max(_2937, 0.0)))) - exp2(_2804 * (isnan(0.0) ? _2938 : (isnan(_2938) ? 0.0 : max(_2938, 0.0))))) * _2936)) - ((exp2(_2806 * _2947) - exp2(_2806 * _2948)) * _2936))) + (_2799 * cbSceneParam._m0[80u].z);
        }
        vec4 _2994 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2696, _2697, 1.0), 0.0);
        float _3003 = exp2((_2992 * (-1.44269502162933349609375)) * (1.0 - _2994.w));
        float _3004 = log2(_3003);
        float _3020 = log2(_2716);
        _2808 = (exp2(_3020 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3004 * cbSceneParam._m0[78u].x)) * _2994.x) / cbSceneParam._m0[78u].x)) + _2713;
        _2810 = (exp2(_3020 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3004 * cbSceneParam._m0[78u].y)) * _2994.y) / cbSceneParam._m0[78u].y)) + _2714;
        _2812 = (exp2(_3020 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3004 * cbSceneParam._m0[78u].z)) * _2994.z) / cbSceneParam._m0[78u].z)) + _2715;
        _2814 = _3003 * _2716;
    }
    else
    {
        _2808 = _2713;
        _2810 = _2714;
        _2812 = _2715;
        _2814 = _2716;
    }
    bool _3030;
    vec4 _2824;
    vec4 _2846;
    float _2848;
    float _2852;
    float _2853;
    float _2854;
    float _2857;
    float _2860;
    float _2863;
    float _2864;
    bool _2874;
    for (;;)
    {
        _2824 = cbMatDynParam._m0[0u];
        float _2826 = roundEven(_2824.y);
        bool _2827 = _2826 == 3.0;
        float _2828 = log2(_2814);
        float _2832 = exp2(_2828 * cbSceneParam._m0[78u].x);
        float _2833 = exp2(_2828 * cbSceneParam._m0[78u].y);
        float _2834 = exp2(_2828 * cbSceneParam._m0[78u].z);
        float _2835 = _2832 * _2669;
        float _2836 = _2833 * _2670;
        float _2837 = _2834 * _2671;
        float _2844 = _642 + (-0.5);
        _2846 = cbMtdParam._m0[1u];
        _2848 = _2846.y * _2844;
        float _2851 = (_2826 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2852 = _2851 * (_2827 ? _2835 : (_2835 + (cbSceneParam._m0[72u].w * _2808)));
        _2853 = _2851 * (_2827 ? _2836 : (_2836 + (cbSceneParam._m0[72u].w * _2810)));
        _2854 = _2851 * (_2827 ? _2837 : (_2837 + (cbSceneParam._m0[72u].w * _2812)));
        _2857 = ((_2677 * _2686) * _2832) * _2851;
        _2860 = ((_2678 * _2686) * _2833) * _2851;
        _2863 = ((_2679 * _2686) * _2834) * _2851;
        _2864 = _2844 * 0.999000012874603271484375;
        _2874 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2874)
        {
            if ((cbInstanceData._m0[_757 + 7u].x + _2864) < 0.5)
            {
                _3030 = true;
                break;
            }
        }
        uint _2971 = _759 + uint(_2824.w);
        if ((cbInstanceData._m0[_2971].w < 1.0) && ((cbInstanceData._m0[_2971].w + _2864) < 0.5))
        {
            _3030 = true;
            break;
        }
        if ((_2848 + _359) < _2846.x)
        {
            _3030 = true;
            break;
        }
        _3030 = false;
        break;
    }
    float _3234;
    if (_3030)
    {
        discard_state = true;
        _3234 = 0.0;
    }
    else
    {
        _3234 = _2691;
    }
    SV_Target.x = _2852;
    SV_Target.y = _2853;
    SV_Target.z = _2854;
    SV_Target.w = _3234;
    SV_Target_1.x = _2857;
    SV_Target_1.y = _2860;
    SV_Target_1.z = _2863;
    SV_Target_1.w = _2691;
    discard_exit();
}


