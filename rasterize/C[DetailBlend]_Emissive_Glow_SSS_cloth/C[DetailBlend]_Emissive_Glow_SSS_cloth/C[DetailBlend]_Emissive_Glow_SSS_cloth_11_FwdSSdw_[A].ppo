#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[18];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_1;
layout(set = 0, binding = 1) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_7;
layout(set = 0, binding = 10) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_6;
layout(set = 0, binding = 12) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_0;
layout(set = 0, binding = 3) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_10;
layout(set = 0, binding = 4) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_11;
layout(set = 0, binding = 5) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_12;
layout(set = 0, binding = 6) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_2;
layout(set = 0, binding = 7) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_4;
layout(set = 0, binding = 9) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_5;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1371;
float _3828;
float _3829;
float _3830;
float _3831;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _217 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _218 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _219 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _225 = inversesqrt(dot(vec3(_217, _218, _219), vec3(_217, _218, _219)));
    float _232 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _233 = _232 * NORMAL.x;
    float _234 = _232 * NORMAL.y;
    float _235 = _232 * NORMAL.z;
    float _239 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _247;
    float _248;
    float _249;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _247 = (-0.0) - _233;
        _248 = (-0.0) - _234;
        _249 = (-0.0) - _235;
    }
    else
    {
        _247 = _233;
        _248 = _234;
        _249 = _235;
    }
    vec4 _262 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _267 = _262.z;
    float _268 = _262.w;
    float _274 = exp2(log2(_267 * 22.0) * 260.0);
    float _275 = isnan(0.0) ? _274 : (isnan(_274) ? 0.0 : max(_274, 0.0));
    float _276 = isnan(1.0) ? _275 : (isnan(_275) ? 1.0 : min(_275, 1.0));
    vec4 _290 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _301 = cbMtdParam._m0[10u].x * _290.x;
    float _302 = cbMtdParam._m0[10u].y * _290.y;
    float _303 = cbMtdParam._m0[10u].z * _290.z;
    vec4 _315 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _343 = exp2(log2(1.0 - _268) * 8.0);
    vec4 _355 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_10, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _371 = exp2(log2(_268) * 8.0);
    vec4 _384 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _409 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _417 = (((((cbMtdParam._m0[9u].x * _315.x) - _301) * _276) + _301) * 4.55000019073486328125) * _409.x;
    float _419 = (((((cbMtdParam._m0[9u].y * _315.y) - _302) * _276) + _302) * 4.55000019073486328125) * _409.y;
    float _421 = (((((cbMtdParam._m0[9u].z * _315.z) - _303) * _276) + _303) * 4.55000019073486328125) * _409.z;
    float _428 = (((cbMtdParam._m0[13u].x * _355.x) - _417) * _343) + _417;
    float _429 = (((cbMtdParam._m0[13u].y * _355.y) - _419) * _343) + _419;
    float _430 = (((cbMtdParam._m0[13u].z * _355.z) - _421) * _343) + _421;
    float _437 = (((cbMtdParam._m0[11u].x * _384.x) - _428) * _371) + _428;
    float _438 = (((cbMtdParam._m0[11u].y * _384.y) - _429) * _371) + _429;
    float _439 = (((cbMtdParam._m0[11u].z * _384.z) - _430) * _371) + _430;
    float _440 = _409.w * _315.w;
    float _470 = (((texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w)).x - cbMtdParam._m0[17u].x) + cbMtdParam._m0[16u].x) * _276) + cbMtdParam._m0[17u].x;
    float _474 = ((cbMtdParam._m0[15u].z - _470) * _343) + _470;
    float _477 = ((cbMtdParam._m0[16u].w - _474) * _371) + _474;
    vec4 _489 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w));
    float _491 = _489.x;
    float _492 = _489.y;
    float _498 = cbMtdParam._m0[14u].y + _489.z;
    vec4 _510 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w));
    vec4 _532 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    vec4 _550 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _563 = (((_276 * (_267 + (-0.5))) + 0.5) * 2.0) * ((((_510.z - _498) + cbMtdParam._m0[14u].x) * _276) + _498);
    float _567 = (((_532.z - _563) + cbMtdParam._m0[15u].y) * _343) + _563;
    float _571 = (((_550.z - _567) + cbMtdParam._m0[14u].w) * _371) + _567;
    float _585 = abs((fract(cbMtdParam._m0[15u].x * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _3850 = isnan(0.0) ? _585 : (isnan(_585) ? 0.0 : max(_585, 0.0));
    float _586 = isnan(1.0) ? _3850 : (isnan(_3850) ? 1.0 : min(_3850, 1.0));
    float _591 = (_586 * _586) * (3.0 - (_586 * 2.0));
    vec4 _604 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _612 = (_262.x * 2.0) + (-1.0);
    float _613 = (_262.y * 2.0) + (-1.0);
    float _614 = dot(vec2(_612, _613), vec2(_612, _613));
    float _3861 = isnan(0.0) ? _614 : (isnan(_614) ? 0.0 : max(_614, 0.0));
    float _619 = sqrt(1.0 - (isnan(1.0) ? _3861 : (isnan(_3861) ? 1.0 : min(_3861, 1.0))));
    float _624 = ((_510.x - _491) * _276) + _491;
    float _625 = ((_510.y - _492) * _276) + _492;
    float _630 = ((_532.x - _624) * _343) + _624;
    float _631 = ((_532.y - _625) * _343) + _625;
    float _644 = (cbMtdParam._m0[14u].z * (((((_550.x - _630) * _371) + _630) * 2.0) + (-1.0))) + _612;
    float _645 = (cbMtdParam._m0[14u].z * (((((_550.y - _631) * _371) + _631) * 2.0) + (-1.0))) + _613;
    float _648 = fma(_619, _247, fma(_645, _239 * TANGENT.x, (_225 * _217) * _644));
    float _651 = fma(_619, _248, fma(_645, _239 * TANGENT.y, (_225 * _218) * _644));
    float _654 = fma(_619, _249, fma(_645, _239 * TANGENT.z, (_225 * _219) * _644));
    float _658 = inversesqrt(dot(vec3(_648, _651, _654), vec3(_648, _651, _654)));
    float _659 = _658 * _648;
    float _660 = _658 * _651;
    float _661 = _658 * _654;
    float _3872 = isnan(0.0) ? _440 : (isnan(_440) ? 0.0 : max(_440, 0.0));
    float _662 = isnan(1.0) ? _3872 : (isnan(_3872) ? 1.0 : min(_3872, 1.0));
    float _3883 = isnan(0.0) ? _571 : (isnan(_571) ? 0.0 : max(_571, 0.0));
    float _663 = isnan(1.0) ? _3883 : (isnan(_3883) ? 1.0 : min(_3883, 1.0));
    float _3894 = isnan(0.0) ? _437 : (isnan(_437) ? 0.0 : max(_437, 0.0));
    float _664 = isnan(1.0) ? _3894 : (isnan(_3894) ? 1.0 : min(_3894, 1.0));
    float _3905 = isnan(0.0) ? _438 : (isnan(_438) ? 0.0 : max(_438, 0.0));
    float _665 = isnan(1.0) ? _3905 : (isnan(_3905) ? 1.0 : min(_3905, 1.0));
    float _3916 = isnan(0.0) ? _439 : (isnan(_439) ? 0.0 : max(_439, 0.0));
    float _666 = isnan(1.0) ? _3916 : (isnan(_3916) ? 1.0 : min(_3916, 1.0));
    float _3927 = isnan(0.0) ? _477 : (isnan(_477) ? 0.0 : max(_477, 0.0));
    float _667 = isnan(1.0) ? _3927 : (isnan(_3927) ? 1.0 : min(_3927, 1.0));
    float _683 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _723 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _733 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _723);
    float _734 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _723);
    float _735 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _723);
    float _739 = inversesqrt(dot(vec3(_733, _734, _735), vec3(_733, _734, _735)));
    float _740 = _733 * _739;
    float _741 = _734 * _739;
    float _742 = _735 * _739;
    vec4 _747 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _749 = _747.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1052 = sqrt(((_733 * _733) + (_734 * _734)) + (_735 * _735));
        float _1058 = (cbMatDynParam._m0[5u].x * _1052) + cbMatDynParam._m0[5u].y;
        float _3938 = isnan(0.0) ? _1058 : (isnan(_1058) ? 0.0 : max(_1058, 0.0));
        float _1059 = isnan(1.0) ? _3938 : (isnan(_3938) ? 1.0 : min(_3938, 1.0));
        float _1063 = (cbMatDynParam._m0[5u].z * _1052) + cbMatDynParam._m0[5u].w;
        float _3949 = isnan(0.0) ? _1063 : (isnan(_1063) ? 0.0 : max(_1063, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3949 : (isnan(_3949) ? 1.0 : min(_3949, 1.0))) - _1059)) + _1059) < ((_749 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _760 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _761 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _763 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _765 = _763.w;
    float _783 = fma(_661, cbSceneParam._m0[5u].z, fma(_660, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _659));
    float _786 = fma(_661, cbSceneParam._m0[6u].z, fma(_660, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _659));
    float _789 = fma(_661, cbSceneParam._m0[7u].z, fma(_660, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _659));
    vec4 _791 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _793 = _791.x;
    float _805 = (((_791.y - _663) + (_791.w * _663)) * cbMtdParam._m0[3u].x) + _663;
    vec4 _806 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _822 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3(cbMtdParam._m0[3u].x * (_793 * _793)), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * _806.z;
    float _830 = (((cbMatDynParam._m0[15u].x - _667) * cbMatDynParam._m0[15u].w) * _822) + _667;
    float _838 = ((_822 * cbMatDynParam._m0[16u].z) * (cbMatDynParam._m0[16u].x - _805)) + _805;
    uint _862 = uint(roundEven(NORMAL.w)) * 13u;
    uint _863 = _862 + 9u;
    uint _864 = _863 + uint(cbMatDynParam._m0[0u].w);
    float _870 = (cbMtdParam._m0[0u].x * _664) * cbInstanceData._m0[_864].x;
    float _871 = (cbMtdParam._m0[0u].y * _665) * cbInstanceData._m0[_864].y;
    float _872 = (cbMtdParam._m0[0u].z * _666) * cbInstanceData._m0[_864].z;
    float _3960 = isnan(0.0) ? _870 : (isnan(_870) ? 0.0 : max(_870, 0.0));
    float _873 = isnan(1.0) ? _3960 : (isnan(_3960) ? 1.0 : min(_3960, 1.0));
    float _3971 = isnan(0.0) ? _871 : (isnan(_871) ? 0.0 : max(_871, 0.0));
    float _874 = isnan(1.0) ? _3971 : (isnan(_3971) ? 1.0 : min(_3971, 1.0));
    float _3982 = isnan(0.0) ? _872 : (isnan(_872) ? 0.0 : max(_872, 0.0));
    float _875 = isnan(1.0) ? _3982 : (isnan(_3982) ? 1.0 : min(_3982, 1.0));
    vec4 _876 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _881 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _892 = (((_881.x - _830) + (_881.w * _830)) * cbMtdParam._m0[3u].x) + _830;
    float _905 = (cbMtdParam._m0[3u].x * (((_873 * _765) - _873) + _876.x)) + _873;
    float _906 = (cbMtdParam._m0[3u].x * (((_874 * _765) - _874) + _876.y)) + _874;
    float _907 = (cbMtdParam._m0[3u].x * (((_875 * _765) - _875) + _876.z)) + _875;
    float _921 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3((_830 * (_664 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625, (_830 * (_665 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625, (_830 * (_666 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w)).z;
    float _925 = _921 * cbMatDynParam._m0[13u].w;
    float _935 = (_925 * (cbMatDynParam._m0[13u].x - _905)) + _905;
    float _936 = (_925 * (cbMatDynParam._m0[13u].y - _906)) + _906;
    float _937 = (_925 * (cbMatDynParam._m0[13u].z - _907)) + _907;
    float _945 = ((_921 * cbMatDynParam._m0[15u].w) * (cbMatDynParam._m0[15u].x - _892)) + _892;
    float _946 = 1.0 - _945;
    float _947 = _946 * _935;
    float _948 = _946 * _936;
    float _949 = _946 * _937;
    float _953 = (_935 + (-0.039999999105930328369140625)) * _945;
    float _954 = (_936 + (-0.039999999105930328369140625)) * _945;
    float _955 = (_937 + (-0.039999999105930328369140625)) * _945;
    float _956 = _953 + 0.039999999105930328369140625;
    float _957 = _954 + 0.039999999105930328369140625;
    float _958 = _955 + 0.039999999105930328369140625;
    vec4 _967 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _760, cbSceneParam._m0[86u].y * _761));
    float _970 = _967.x * TEXCOORD_4;
    float _971 = dot(vec3(_659, _660, _661), vec3(_740, _741, _742));
    float _974 = _971 * 2.0;
    float _978 = (_974 * _659) - _740;
    float _979 = (_974 * _660) - _741;
    float _980 = (_974 * _661) - _742;
    float _984 = abs(dot(vec3(_740, _741, _742), vec3(_659, _660, _661)));
    float _3993 = isnan(0.0) ? _984 : (isnan(_984) ? 0.0 : max(_984, 0.0));
    float _986 = sqrt(_838);
    float _998 = exp2((_986 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3993 : (isnan(_3993) ? 1.0 : min(_3993, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_986 * 3.0));
    float _1004 = (1.0 - _998) * ((_986 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1005 = _998 * _986;
    float _1033 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1037 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1041 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1370;
    float _1372;
    float _1373;
    float _1374;
    float _1375;
    float _1376;
    float _1377;
    float _1378;
    float _1379;
    float _1380;
    float _1381;
    float _1382;
    float _1383;
    float _1384;
    float _1385;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1097 = fma(_1041, cbModelParam._m0[26u].z, fma(_1037, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1033));
        float _1101 = fma(_1041, cbModelParam._m0[27u].z, fma(_1037, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1033));
        float _1105 = fma(_1041, cbModelParam._m0[28u].z, fma(_1037, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1033));
        float _1128 = _1033 + _659;
        float _1129 = _1037 + _660;
        float _1130 = _1041 + _661;
        float _1140 = fma(_1130, cbModelParam._m0[26u].z, fma(_1129, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1128)) - _1097;
        float _1141 = fma(_1130, cbModelParam._m0[27u].z, fma(_1129, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1128)) - _1101;
        float _1142 = fma(_1130, cbModelParam._m0[28u].z, fma(_1129, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1128)) - _1105;
        float _1146 = inversesqrt(dot(vec3(_1140, _1141, _1142), vec3(_1140, _1141, _1142)));
        float _1159 = ((_1146 * _1140) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1097 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1160 = ((_1146 * _1141) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1101 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1161 = ((_1146 * _1142) / cbModelParam._m0[34u].z) + ((((((_1105 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1164 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1159, _1160, _1161), 0.0);
        vec4 _1171 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1159, _1160, _1161), 0.0);
        vec4 _1178 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1159, _1160, _1161), 0.0);
        vec4 _1185 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1159, _1160, _1161), 0.0);
        float _1198 = exp2((_1164.w + (-0.5)) * 20.0) * 2.0;
        float _1199 = _1198 * (_1164.x + (-0.5));
        float _1200 = _1198 * (_1164.y + (-0.5));
        float _1201 = _1198 * (_1164.z + (-0.5));
        float _1208 = exp2((_1171.w + (-0.5)) * 20.0) * 2.0;
        float _1209 = _1208 * (_1171.x + (-0.5));
        float _1210 = _1208 * (_1171.y + (-0.5));
        float _1211 = _1208 * (_1171.z + (-0.5));
        float _1218 = exp2((_1178.w + (-0.5)) * 20.0) * 2.0;
        float _1219 = _1218 * (_1178.x + (-0.5));
        float _1220 = _1218 * (_1178.y + (-0.5));
        float _1221 = _1218 * (_1178.z + (-0.5));
        float _1228 = exp2((_1185.w + (-0.5)) * 20.0) * 2.0;
        float _1229 = _1228 * (_1185.x + (-0.5));
        float _1230 = _1228 * (_1185.y + (-0.5));
        float _1231 = _1228 * (_1185.z + (-0.5));
        float _1232 = isnan(0.0) ? _1229 : (isnan(_1229) ? 0.0 : max(_1229, 0.0));
        float _1233 = isnan(0.0) ? _1230 : (isnan(_1230) ? 0.0 : max(_1230, 0.0));
        float _1234 = isnan(0.0) ? _1231 : (isnan(_1231) ? 0.0 : max(_1231, 0.0));
        float _1235 = _1199 * 0.5;
        float _1236 = _1209 * 0.5;
        float _1237 = _1219 * 0.5;
        float _1238 = dot(vec3(_1235, _1236, _1237), vec3(_1235, _1236, _1237));
        float _1243 = (_1238 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1238);
        float _1252 = (dot(vec3(_659, _660, _661), vec3(_1243 * _1235, _1243 * _1236, _1243 * _1237)) + 1.0) * 0.5;
        float _4019 = isnan(0.0) ? _1252 : (isnan(_1252) ? 0.0 : max(_1252, 0.0));
        float _1262 = sqrt(((_1236 * _1236) + (_1235 * _1235)) + (_1237 * _1237)) / (_1232 + 9.9999997473787516355514526367188e-06);
        float _4030 = isnan(0.0) ? _1262 : (isnan(_1262) ? 0.0 : max(_1262, 0.0));
        float _1263 = isnan(1.0) ? _4030 : (isnan(_4030) ? 1.0 : min(_4030, 1.0));
        float _1264 = _1263 * 2.0;
        float _1268 = (1.0 - _1263) / (_1263 + 1.0);
        float _4041 = isnan(0.0) ? _1268 : (isnan(_1268) ? 0.0 : max(_1268, 0.0));
        float _1269 = isnan(1.0) ? _4041 : (isnan(_4041) ? 1.0 : min(_4041, 1.0));
        float _1278 = ((((1.0 - _1269) * (_1264 + 2.0)) * exp2(log2(isnan(1.0) ? _4019 : (isnan(_4019) ? 1.0 : min(_4019, 1.0))) * (_1264 + 1.0))) + _1269) * _1232;
        float _1279 = _1200 * 0.5;
        float _1280 = _1210 * 0.5;
        float _1281 = _1220 * 0.5;
        float _1282 = dot(vec3(_1279, _1280, _1281), vec3(_1279, _1280, _1281));
        float _1287 = (_1282 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1282);
        float _1295 = (dot(vec3(_659, _660, _661), vec3(_1287 * _1279, _1287 * _1280, _1287 * _1281)) + 1.0) * 0.5;
        float _4052 = isnan(0.0) ? _1295 : (isnan(_1295) ? 0.0 : max(_1295, 0.0));
        float _1304 = sqrt(((_1280 * _1280) + (_1279 * _1279)) + (_1281 * _1281)) / (_1233 + 9.9999997473787516355514526367188e-06);
        float _4063 = isnan(0.0) ? _1304 : (isnan(_1304) ? 0.0 : max(_1304, 0.0));
        float _1305 = isnan(1.0) ? _4063 : (isnan(_4063) ? 1.0 : min(_4063, 1.0));
        float _1306 = _1305 * 2.0;
        float _1310 = (1.0 - _1305) / (_1305 + 1.0);
        float _4074 = isnan(0.0) ? _1310 : (isnan(_1310) ? 0.0 : max(_1310, 0.0));
        float _1311 = isnan(1.0) ? _4074 : (isnan(_4074) ? 1.0 : min(_4074, 1.0));
        float _1320 = ((((1.0 - _1311) * (_1306 + 2.0)) * exp2(log2(isnan(1.0) ? _4052 : (isnan(_4052) ? 1.0 : min(_4052, 1.0))) * (_1306 + 1.0))) + _1311) * _1233;
        float _1321 = _1201 * 0.5;
        float _1322 = _1211 * 0.5;
        float _1323 = _1221 * 0.5;
        float _1324 = dot(vec3(_1321, _1322, _1323), vec3(_1321, _1322, _1323));
        float _1329 = (_1324 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1324);
        float _1337 = (dot(vec3(_659, _660, _661), vec3(_1329 * _1321, _1329 * _1322, _1329 * _1323)) + 1.0) * 0.5;
        float _4085 = isnan(0.0) ? _1337 : (isnan(_1337) ? 0.0 : max(_1337, 0.0));
        float _1346 = sqrt(((_1322 * _1322) + (_1321 * _1321)) + (_1323 * _1323)) / (_1234 + 9.9999997473787516355514526367188e-06);
        float _4096 = isnan(0.0) ? _1346 : (isnan(_1346) ? 0.0 : max(_1346, 0.0));
        float _1347 = isnan(1.0) ? _4096 : (isnan(_4096) ? 1.0 : min(_4096, 1.0));
        float _1348 = _1347 * 2.0;
        float _1352 = (1.0 - _1347) / (_1347 + 1.0);
        float _4107 = isnan(0.0) ? _1352 : (isnan(_1352) ? 0.0 : max(_1352, 0.0));
        float _1353 = isnan(1.0) ? _4107 : (isnan(_4107) ? 1.0 : min(_4107, 1.0));
        float _1362 = ((((1.0 - _1353) * (_1348 + 2.0)) * exp2(log2(isnan(1.0) ? _4085 : (isnan(_4085) ? 1.0 : min(_4085, 1.0))) * (_1348 + 1.0))) + _1353) * _1234;
        _1370 = _1201;
        _1372 = _1200;
        _1373 = _1199;
        _1374 = _1211;
        _1375 = _1210;
        _1376 = _1209;
        _1377 = _1221;
        _1378 = _1220;
        _1379 = _1219;
        _1380 = _1234;
        _1381 = _1233;
        _1382 = _1232;
        _1383 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1278 : (isnan(_1278) ? 0.0 : max(_1278, 0.0)));
        _1384 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1320 : (isnan(_1320) ? 0.0 : max(_1320, 0.0)));
        _1385 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1362 : (isnan(_1362) ? 0.0 : max(_1362, 0.0)));
    }
    else
    {
        _1370 = _1371;
        _1372 = _1371;
        _1373 = _1371;
        _1374 = _1371;
        _1375 = _1371;
        _1376 = _1371;
        _1377 = _1371;
        _1378 = _1371;
        _1379 = _1371;
        _1380 = _1371;
        _1381 = _1371;
        _1382 = _1371;
        _1383 = 0.0;
        _1384 = 0.0;
        _1385 = 0.0;
    }
    float _1683;
    float _1684;
    float _1685;
    float _1686;
    float _1687;
    float _1688;
    float _1689;
    float _1690;
    float _1691;
    float _1692;
    float _1693;
    float _1694;
    float _1695;
    float _1696;
    float _1697;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1414 = fma(_1041, cbModelParam._m0[30u].z, fma(_1037, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1033));
        float _1418 = fma(_1041, cbModelParam._m0[31u].z, fma(_1037, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1033));
        float _1422 = fma(_1041, cbModelParam._m0[32u].z, fma(_1037, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1033));
        float _1445 = _1033 + _659;
        float _1446 = _1037 + _660;
        float _1447 = _1041 + _661;
        float _1457 = fma(_1447, cbModelParam._m0[30u].z, fma(_1446, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1445)) - _1414;
        float _1458 = fma(_1447, cbModelParam._m0[31u].z, fma(_1446, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1445)) - _1418;
        float _1459 = fma(_1447, cbModelParam._m0[32u].z, fma(_1446, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1445)) - _1422;
        float _1463 = inversesqrt(dot(vec3(_1457, _1458, _1459), vec3(_1457, _1458, _1459)));
        float _1476 = ((_1463 * _1457) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1414 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1477 = ((_1463 * _1458) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1418 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1478 = ((_1463 * _1459) / cbModelParam._m0[35u].z) + ((((((_1422 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1480 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1476, _1477, _1478), 0.0);
        vec4 _1487 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1476, _1477, _1478), 0.0);
        vec4 _1494 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1476, _1477, _1478), 0.0);
        vec4 _1501 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1476, _1477, _1478), 0.0);
        float _1513 = exp2((_1480.w + (-0.5)) * 20.0) * 2.0;
        float _1514 = _1513 * (_1480.x + (-0.5));
        float _1515 = _1513 * (_1480.y + (-0.5));
        float _1516 = _1513 * (_1480.z + (-0.5));
        float _1523 = exp2((_1487.w + (-0.5)) * 20.0) * 2.0;
        float _1524 = _1523 * (_1487.x + (-0.5));
        float _1525 = _1523 * (_1487.y + (-0.5));
        float _1526 = _1523 * (_1487.z + (-0.5));
        float _1533 = exp2((_1494.w + (-0.5)) * 20.0) * 2.0;
        float _1534 = _1533 * (_1494.x + (-0.5));
        float _1535 = _1533 * (_1494.y + (-0.5));
        float _1536 = _1533 * (_1494.z + (-0.5));
        float _1543 = exp2((_1501.w + (-0.5)) * 20.0) * 2.0;
        float _1544 = _1543 * (_1501.x + (-0.5));
        float _1545 = _1543 * (_1501.y + (-0.5));
        float _1546 = _1543 * (_1501.z + (-0.5));
        float _1547 = isnan(0.0) ? _1544 : (isnan(_1544) ? 0.0 : max(_1544, 0.0));
        float _1548 = isnan(0.0) ? _1545 : (isnan(_1545) ? 0.0 : max(_1545, 0.0));
        float _1549 = isnan(0.0) ? _1546 : (isnan(_1546) ? 0.0 : max(_1546, 0.0));
        float _1550 = _1514 * 0.5;
        float _1551 = _1524 * 0.5;
        float _1552 = _1534 * 0.5;
        float _1553 = dot(vec3(_1550, _1551, _1552), vec3(_1550, _1551, _1552));
        float _1558 = (_1553 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1553);
        float _1566 = (dot(vec3(_659, _660, _661), vec3(_1558 * _1550, _1558 * _1551, _1558 * _1552)) + 1.0) * 0.5;
        float _4148 = isnan(0.0) ? _1566 : (isnan(_1566) ? 0.0 : max(_1566, 0.0));
        float _1575 = sqrt(((_1551 * _1551) + (_1550 * _1550)) + (_1552 * _1552)) / (_1547 + 9.9999997473787516355514526367188e-06);
        float _4159 = isnan(0.0) ? _1575 : (isnan(_1575) ? 0.0 : max(_1575, 0.0));
        float _1576 = isnan(1.0) ? _4159 : (isnan(_4159) ? 1.0 : min(_4159, 1.0));
        float _1577 = _1576 * 2.0;
        float _1581 = (1.0 - _1576) / (_1576 + 1.0);
        float _4170 = isnan(0.0) ? _1581 : (isnan(_1581) ? 0.0 : max(_1581, 0.0));
        float _1582 = isnan(1.0) ? _4170 : (isnan(_4170) ? 1.0 : min(_4170, 1.0));
        float _1591 = ((((1.0 - _1582) * (_1577 + 2.0)) * exp2(log2(isnan(1.0) ? _4148 : (isnan(_4148) ? 1.0 : min(_4148, 1.0))) * (_1577 + 1.0))) + _1582) * _1547;
        float _1592 = _1515 * 0.5;
        float _1593 = _1525 * 0.5;
        float _1594 = _1535 * 0.5;
        float _1595 = dot(vec3(_1592, _1593, _1594), vec3(_1592, _1593, _1594));
        float _1600 = (_1595 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1595);
        float _1608 = (dot(vec3(_659, _660, _661), vec3(_1600 * _1592, _1600 * _1593, _1600 * _1594)) + 1.0) * 0.5;
        float _4181 = isnan(0.0) ? _1608 : (isnan(_1608) ? 0.0 : max(_1608, 0.0));
        float _1617 = sqrt(((_1593 * _1593) + (_1592 * _1592)) + (_1594 * _1594)) / (_1548 + 9.9999997473787516355514526367188e-06);
        float _4192 = isnan(0.0) ? _1617 : (isnan(_1617) ? 0.0 : max(_1617, 0.0));
        float _1618 = isnan(1.0) ? _4192 : (isnan(_4192) ? 1.0 : min(_4192, 1.0));
        float _1619 = _1618 * 2.0;
        float _1623 = (1.0 - _1618) / (_1618 + 1.0);
        float _4203 = isnan(0.0) ? _1623 : (isnan(_1623) ? 0.0 : max(_1623, 0.0));
        float _1624 = isnan(1.0) ? _4203 : (isnan(_4203) ? 1.0 : min(_4203, 1.0));
        float _1633 = ((((1.0 - _1624) * (_1619 + 2.0)) * exp2(log2(isnan(1.0) ? _4181 : (isnan(_4181) ? 1.0 : min(_4181, 1.0))) * (_1619 + 1.0))) + _1624) * _1548;
        float _1634 = _1516 * 0.5;
        float _1635 = _1526 * 0.5;
        float _1636 = _1536 * 0.5;
        float _1637 = dot(vec3(_1634, _1635, _1636), vec3(_1634, _1635, _1636));
        float _1642 = (_1637 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1637);
        float _1650 = (dot(vec3(_659, _660, _661), vec3(_1642 * _1634, _1642 * _1635, _1642 * _1636)) + 1.0) * 0.5;
        float _4214 = isnan(0.0) ? _1650 : (isnan(_1650) ? 0.0 : max(_1650, 0.0));
        float _1659 = sqrt(((_1635 * _1635) + (_1634 * _1634)) + (_1636 * _1636)) / (_1549 + 9.9999997473787516355514526367188e-06);
        float _4225 = isnan(0.0) ? _1659 : (isnan(_1659) ? 0.0 : max(_1659, 0.0));
        float _1660 = isnan(1.0) ? _4225 : (isnan(_4225) ? 1.0 : min(_4225, 1.0));
        float _1661 = _1660 * 2.0;
        float _1665 = (1.0 - _1660) / (_1660 + 1.0);
        float _4236 = isnan(0.0) ? _1665 : (isnan(_1665) ? 0.0 : max(_1665, 0.0));
        float _1666 = isnan(1.0) ? _4236 : (isnan(_4236) ? 1.0 : min(_4236, 1.0));
        float _1675 = ((((1.0 - _1666) * (_1661 + 2.0)) * exp2(log2(isnan(1.0) ? _4214 : (isnan(_4214) ? 1.0 : min(_4214, 1.0))) * (_1661 + 1.0))) + _1666) * _1549;
        _1683 = _1516;
        _1684 = _1515;
        _1685 = _1514;
        _1686 = _1526;
        _1687 = _1525;
        _1688 = _1524;
        _1689 = _1536;
        _1690 = _1535;
        _1691 = _1534;
        _1692 = _1549;
        _1693 = _1548;
        _1694 = _1547;
        _1695 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1591 : (isnan(_1591) ? 0.0 : max(_1591, 0.0)));
        _1696 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1633 : (isnan(_1633) ? 0.0 : max(_1633, 0.0)));
        _1697 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1675 : (isnan(_1675) ? 0.0 : max(_1675, 0.0)));
    }
    else
    {
        _1683 = _1371;
        _1684 = _1371;
        _1685 = _1371;
        _1686 = _1371;
        _1687 = _1371;
        _1688 = _1371;
        _1689 = _1371;
        _1690 = _1371;
        _1691 = _1371;
        _1692 = _1371;
        _1693 = _1371;
        _1694 = _1371;
        _1695 = 0.0;
        _1696 = 0.0;
        _1697 = 0.0;
    }
    float _1707 = (cbModelParam._m0[1u].x * (_1695 - _1383)) + _1383;
    float _1708 = (cbModelParam._m0[1u].x * (_1696 - _1384)) + _1384;
    float _1709 = (cbModelParam._m0[1u].x * (_1697 - _1385)) + _1385;
    float _1730 = fma(_1709, cbSceneParam._m0[89u].z, fma(_1708, cbSceneParam._m0[89u].y, _1707 * cbSceneParam._m0[89u].x));
    float _1733 = fma(_1709, cbSceneParam._m0[90u].z, fma(_1708, cbSceneParam._m0[90u].y, _1707 * cbSceneParam._m0[90u].x));
    float _1736 = fma(_1709, cbSceneParam._m0[91u].z, fma(_1708, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1707));
    float _1751 = _978 * 0.5;
    float _1752 = _979 * 0.5;
    float _1753 = _980 * 0.5;
    float _1754 = dot(vec4(_1751, _1752, _1753, 1.0), vec4(_1685, _1688, _1691, _1694));
    float _1757 = dot(vec4(_1751, _1752, _1753, 1.0), vec4(_1684, _1687, _1690, _1693));
    float _1760 = dot(vec4(_1751, _1752, _1753, 1.0), vec4(_1683, _1686, _1689, _1692));
    float _1791;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1767 = dot(vec4(_1751, _1752, _1753, 1.0), vec4(_1370, _1374, _1377, _1380));
        float _1771 = dot(vec4(_1751, _1752, _1753, 1.0), vec4(_1372, _1375, _1378, _1381));
        float _1775 = dot(vec4(_1751, _1752, _1753, 1.0), vec4(_1373, _1376, _1379, _1382));
        float _1782 = dot(vec4(cbModelParam._m0[39u]), vec4(_1751, _1752, _1753, 1.0));
        _1791 = dot(vec3(isnan(0.0) ? _1775 : (isnan(_1775) ? 0.0 : max(_1775, 0.0)), isnan(0.0) ? _1771 : (isnan(_1771) ? 0.0 : max(_1771, 0.0)), isnan(0.0) ? _1767 : (isnan(_1767) ? 0.0 : max(_1767, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1782) ? 0.0 : (isnan(0.0) ? _1782 : max(0.0, _1782))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1791 = 1.0;
    }
    float _1802;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1793 = dot(vec4(cbModelParam._m0[40u]), vec4(_1751, _1752, _1753, 1.0));
        _1802 = dot(vec3(isnan(0.0) ? _1754 : (isnan(_1754) ? 0.0 : max(_1754, 0.0)), isnan(0.0) ? _1757 : (isnan(_1757) ? 0.0 : max(_1757, 0.0)), isnan(0.0) ? _1760 : (isnan(_1760) ? 0.0 : max(_1760, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1793) ? 0.0 : (isnan(0.0) ? _1793 : max(0.0, _1793))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1802 = 1.0;
    }
    float _1806 = (_1802 * cbModelParam._m0[1u].x) + (_1791 * (1.0 - cbModelParam._m0[1u].x));
    float _1816 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _838);
    float _1817 = isnan(_1816) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1816 : min(cbModelParam._m0[25u].z, _1816));
    float _1897;
    float _1899;
    float _1901;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1864 = fma(_1041, cbModelParam._m0[13u].z, fma(_1037, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1033)) + cbModelParam._m0[13u].w;
        float _1868 = fma(_1041, cbModelParam._m0[14u].z, fma(_1037, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1033)) + cbModelParam._m0[14u].w;
        float _1872 = fma(_1041, cbModelParam._m0[15u].z, fma(_1037, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1033)) + cbModelParam._m0[15u].w;
        float _1875 = fma(_980, cbModelParam._m0[13u].z, fma(_979, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _978));
        float _1878 = fma(_980, cbModelParam._m0[14u].z, fma(_979, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _978));
        float _1881 = fma(_980, cbModelParam._m0[15u].z, fma(_979, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _978));
        float _1909;
        if (_1875 > 0.0)
        {
            _1909 = abs((1.0 - _1864) / _1875);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1875 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1864 + 1.0) / _1875);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1909 = frontier_phi_19_17_ladder;
        }
        float _2134;
        if (_1878 > 0.0)
        {
            _2134 = abs((1.0 - _1868) / _1878);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1878 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1868 + 1.0) / _1878);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2134 = frontier_phi_28_24_ladder;
        }
        float _2391;
        if (_1881 > 0.0)
        {
            _2391 = abs((1.0 - _1872) / _1881);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1881 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1872 + 1.0) / _1881);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2391 = frontier_phi_40_35_ladder;
        }
        float _2393 = isnan(_2134) ? _1909 : (isnan(_1909) ? _2134 : min(_1909, _2134));
        float _2394 = isnan(_2391) ? _2393 : (isnan(_2393) ? _2391 : min(_2393, _2391));
        float _2398 = (_2394 * _1875) + _1864;
        float _2399 = (_2394 * _1878) + _1868;
        float _2400 = (_2394 * _1881) + _1872;
        float _2401 = _2394 * 9.9999997473787516355514526367188e-05;
        float _2403 = (-1.0) - _2401;
        float _2405 = _2401 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2400 > _2405) || ((_2400 < _2403) || ((_2399 > _2405) || ((_2399 < _2403) || ((_2398 < _2403) || (_2398 > _2405))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2528 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2400, cbModelParam._m0[9u].z, fma(_2399, cbModelParam._m0[9u].y, _2398 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2400, cbModelParam._m0[10u].z, fma(_2399, cbModelParam._m0[10u].y, _2398 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2400, cbModelParam._m0[11u].z, fma(_2399, cbModelParam._m0[11u].y, _2398 * cbModelParam._m0[11u].x))), _1817);
            frontier_phi_18_40_ladder = _2528.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2528.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2528.x * cbModelParam._m0[1u].y;
        }
        _1897 = frontier_phi_18_40_ladder_2;
        _1899 = frontier_phi_18_40_ladder_1;
        _1901 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1885 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_978, _979, _980), _1817);
        _1897 = _1885.x * cbModelParam._m0[1u].y;
        _1899 = _1885.y * cbModelParam._m0[1u].y;
        _1901 = _1885.z * cbModelParam._m0[1u].y;
    }
    float _1905 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _838);
    float _1906 = isnan(_1905) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1905 : min(cbModelParam._m0[25u].w, _1905));
    float _1997;
    float _1999;
    float _2001;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1961 = fma(_1041, cbModelParam._m0[21u].z, fma(_1037, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1033)) + cbModelParam._m0[21u].w;
        float _1965 = fma(_1041, cbModelParam._m0[22u].z, fma(_1037, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1033)) + cbModelParam._m0[22u].w;
        float _1969 = fma(_1041, cbModelParam._m0[23u].z, fma(_1037, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1033)) + cbModelParam._m0[23u].w;
        float _1972 = fma(_980, cbModelParam._m0[21u].z, fma(_979, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _978));
        float _1975 = fma(_980, cbModelParam._m0[22u].z, fma(_979, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _978));
        float _1978 = fma(_980, cbModelParam._m0[23u].z, fma(_979, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _978));
        float _2139;
        if (_1972 > 0.0)
        {
            _2139 = abs((1.0 - _1961) / _1972);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1972 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1961 + 1.0) / _1972);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _2139 = frontier_phi_30_26_ladder;
        }
        float _2418;
        if (_1975 > 0.0)
        {
            _2418 = abs((1.0 - _1965) / _1975);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1975 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1965 + 1.0) / _1975);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2418 = frontier_phi_42_37_ladder;
        }
        float _2631;
        if (_1978 > 0.0)
        {
            _2631 = abs((1.0 - _1969) / _1978);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1978 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1969 + 1.0) / _1978);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2631 = frontier_phi_51_48_ladder;
        }
        float _2633 = isnan(_2418) ? _2139 : (isnan(_2139) ? _2418 : min(_2139, _2418));
        float _2634 = isnan(_2631) ? _2633 : (isnan(_2633) ? _2631 : min(_2633, _2631));
        float _2638 = (_2634 * _1972) + _1961;
        float _2639 = (_2634 * _1975) + _1965;
        float _2640 = (_2634 * _1978) + _1969;
        float _2641 = _2634 * 9.9999997473787516355514526367188e-05;
        float _2642 = (-1.0) - _2641;
        float _2644 = _2641 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2640 > _2644) || ((_2640 < _2642) || ((_2639 > _2644) || ((_2639 < _2642) || ((_2638 < _2642) || (_2638 > _2644))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2881 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2640, cbModelParam._m0[17u].z, fma(_2639, cbModelParam._m0[17u].y, _2638 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2640, cbModelParam._m0[18u].z, fma(_2639, cbModelParam._m0[18u].y, _2638 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2640, cbModelParam._m0[19u].z, fma(_2639, cbModelParam._m0[19u].y, _2638 * cbModelParam._m0[19u].x))), _1906);
            frontier_phi_27_51_ladder = _2881.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2881.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2881.x * cbModelParam._m0[1u].z;
        }
        _1997 = frontier_phi_27_51_ladder_2;
        _1999 = frontier_phi_27_51_ladder_1;
        _2001 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1981 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_978, _979, _980), _1906);
        _1997 = _1981.x * cbModelParam._m0[1u].z;
        _1999 = _1981.y * cbModelParam._m0[1u].z;
        _2001 = _1981.z * cbModelParam._m0[1u].z;
    }
    float _2014 = (((_1004 * _956) + _1005) * _970) * ((cbModelParam._m0[1u].w * (_1997 - _1897)) + _1897);
    float _2016 = (((_1004 * _957) + _1005) * _970) * ((cbModelParam._m0[1u].w * (_1999 - _1899)) + _1899);
    float _2018 = (((_1004 * _958) + _1005) * _970) * ((cbModelParam._m0[1u].w * (_2001 - _1901)) + _1901);
    float _2021 = fma(_2018, cbSceneParam._m0[89u].z, fma(_2016, cbSceneParam._m0[89u].y, _2014 * cbSceneParam._m0[89u].x));
    float _2024 = fma(_2018, cbSceneParam._m0[90u].z, fma(_2016, cbSceneParam._m0[90u].y, _2014 * cbSceneParam._m0[90u].x));
    float _2027 = fma(_2018, cbSceneParam._m0[91u].z, fma(_2016, cbSceneParam._m0[91u].y, _2014 * cbSceneParam._m0[91u].x));
    vec4 _2035 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_760, _761));
    float _2037 = _2035.w;
    float _2049 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2037);
    float _2050 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2037);
    float _2051 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2037);
    uvec4 _2055 = floatBitsToUint(cbInstanceData._m0[_862 + 5u]);
    uint _2057 = _2055.x * 14u;
    uint _2058 = _2057 + 13u;
    float _2065 = _970 + (-1.0);
    float _2070 = (cbLight._m0[_2058].x * _2065) + 1.0;
    float _2071 = (cbLight._m0[_2058].y * _2065) + 1.0;
    float _2072 = (cbLight._m0[_2058].z * _2065) + 1.0;
    float _2073 = (cbLight._m0[_2058].w * _2065) + 1.0;
    uint _2074 = _2057 + 5u;
    float _2080 = isnan(1.0) ? _2071 : (isnan(_2071) ? 1.0 : min(_2071, 1.0));
    uint _2084 = _2057 + 4u;
    float _2093 = isnan(1.0) ? _2070 : (isnan(_2070) ? 1.0 : min(_2070, 1.0));
    uint _2097 = _2057 | 1u;
    float _2108 = dot(vec3(cbLight._m0[_2057].xyz), vec3(_659, _660, _661));
    float _2111 = dot(vec3(cbLight._m0[_2097].xyz), vec3(_659, _660, _661));
    float _4372 = isnan(0.0) ? _2108 : (isnan(_2108) ? 0.0 : max(_2108, 0.0));
    float _4383 = isnan(0.0) ? _2111 : (isnan(_2111) ? 0.0 : max(_2111, 0.0));
    float _2116 = (isnan(1.0) ? _4372 : (isnan(_4372) ? 1.0 : min(_4372, 1.0))) * 0.3183098733425140380859375;
    float _2118 = (isnan(1.0) ? _4383 : (isnan(_4383) ? 1.0 : min(_4383, 1.0))) * 0.3183098733425140380859375;
    float _2125 = ((cbLight._m0[_2074].x * _2080) * _2118) + (((cbLight._m0[_2084].x * _2049) * _2093) * _2116);
    float _2126 = ((_2080 * cbLight._m0[_2074].y) * _2118) + (((cbLight._m0[_2084].y * _2050) * _2093) * _2116);
    float _2127 = ((_2080 * cbLight._m0[_2074].z) * _2118) + (((cbLight._m0[_2084].z * _2051) * _2093) * _2116);
    uvec4 _2131 = floatBitsToUint(cbLight._m0[_2057 + 12u]);
    bool _2133 = _2131.x == 0u;
    float _2144;
    float _2146;
    float _2148;
    if (_2133)
    {
        _2144 = _2125;
        _2146 = _2126;
        _2148 = _2127;
    }
    else
    {
        uint _2152 = _2057 + 6u;
        float _2168 = (dot(vec3(cbLight._m0[_2057 + 2u].xyz), vec3(_659, _660, _661)) * 0.5) + 0.5;
        float _2169 = _2168 * _2168;
        float _4394 = isnan(0.0) ? _2169 : (isnan(_2169) ? 0.0 : max(_2169, 0.0));
        float _2170 = isnan(1.0) ? _4394 : (isnan(_4394) ? 1.0 : min(_4394, 1.0));
        float _2171 = isnan(1.0) ? _2072 : (isnan(_2072) ? 1.0 : min(_2072, 1.0));
        _2144 = (((cbLight._m0[_2152].x * 0.3183098733425140380859375) * _2170) * _2171) + _2125;
        _2146 = (((cbLight._m0[_2152].y * 0.3183098733425140380859375) * _2170) * _2171) + _2126;
        _2148 = (((cbLight._m0[_2152].z * 0.3183098733425140380859375) * _2170) * _2171) + _2127;
    }
    bool _2151 = _2131.y == 0u;
    float _2189;
    float _2191;
    float _2193;
    if (_2151)
    {
        _2189 = _2144;
        _2191 = _2146;
        _2193 = _2148;
    }
    else
    {
        uint _2362 = _2057 + 7u;
        float _2378 = (dot(vec3(cbLight._m0[_2057 + 3u].xyz), vec3(_659, _660, _661)) * 0.5) + 0.5;
        float _2379 = _2378 * _2378;
        float _4410 = isnan(0.0) ? _2379 : (isnan(_2379) ? 0.0 : max(_2379, 0.0));
        float _2380 = isnan(1.0) ? _4410 : (isnan(_4410) ? 1.0 : min(_4410, 1.0));
        float _2381 = isnan(1.0) ? _2073 : (isnan(_2073) ? 1.0 : min(_2073, 1.0));
        _2189 = (((cbLight._m0[_2362].x * 0.3183098733425140380859375) * _2380) * _2381) + _2144;
        _2191 = (((cbLight._m0[_2362].y * 0.3183098733425140380859375) * _2380) * _2381) + _2146;
        _2193 = (((cbLight._m0[_2362].z * 0.3183098733425140380859375) * _2380) * _2381) + _2148;
    }
    uint _2196 = _2057 + 8u;
    float _2209 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2057].w)) * _838) * 0.949999988079071044921875);
    float _2210 = _2209 * _2209;
    float _2211 = cbLight._m0[_2057].x + _740;
    float _2212 = cbLight._m0[_2057].y + _741;
    float _2213 = cbLight._m0[_2057].z + _742;
    float _2217 = inversesqrt(dot(vec3(_2211, _2212, _2213), vec3(_2211, _2212, _2213)));
    float _2218 = _2217 * _2211;
    float _2219 = _2217 * _2212;
    float _2220 = _2217 * _2213;
    float _2221 = dot(vec3(_659, _660, _661), vec3(cbLight._m0[_2057].xyz));
    float _4426 = isnan(0.0) ? _2221 : (isnan(_2221) ? 0.0 : max(_2221, 0.0));
    float _2224 = isnan(1.0) ? _4426 : (isnan(_4426) ? 1.0 : min(_4426, 1.0));
    float _4437 = isnan(0.0) ? _971 : (isnan(_971) ? 0.0 : max(_971, 0.0));
    float _2225 = isnan(1.0) ? _4437 : (isnan(_4437) ? 1.0 : min(_4437, 1.0));
    float _2226 = dot(vec3(_659, _660, _661), vec3(_2218, _2219, _2220));
    float _4448 = isnan(0.0) ? _2226 : (isnan(_2226) ? 0.0 : max(_2226, 0.0));
    float _2229 = isnan(1.0) ? _4448 : (isnan(_4448) ? 1.0 : min(_4448, 1.0));
    float _2230 = dot(vec3(cbLight._m0[_2057].xyz), vec3(_2218, _2219, _2220));
    float _4459 = isnan(0.0) ? _2230 : (isnan(_2230) ? 0.0 : max(_2230, 0.0));
    float _2234 = _2210 * _2210;
    float _2238 = ((_2229 * _2229) * (_2234 + (-1.0))) + 1.0;
    float _2246 = exp2(log2(1.0 - (isnan(1.0) ? _4459 : (isnan(_4459) ? 1.0 : min(_4459, 1.0)))) * 5.0);
    float _2247 = 0.959999978542327880859375 - _953;
    float _2249 = 0.959999978542327880859375 - _954;
    float _2250 = 0.959999978542327880859375 - _955;
    float _2257 = 1.0 - _2210;
    float _2268 = (0.5 / (((_2225 * ((_2224 * _2257) + _2210)) + 9.9999999392252902907785028219223e-09) + (((_2225 * _2257) + _2210) * _2224))) * _2224;
    float _4470 = isnan(0.0) ? _2268 : (isnan(_2268) ? 0.0 : max(_2268, 0.0));
    float _2270 = (isnan(1.0) ? _4470 : (isnan(_4470) ? 1.0 : min(_4470, 1.0))) * (_2234 / ((_2238 * _2238) * 3.141590118408203125));
    uint _2284 = _2057 + 9u;
    float _2295 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2097].w)) * _838) * 0.949999988079071044921875);
    float _2296 = _2295 * _2295;
    float _2297 = cbLight._m0[_2097].x + _740;
    float _2298 = cbLight._m0[_2097].y + _741;
    float _2299 = cbLight._m0[_2097].z + _742;
    float _2303 = inversesqrt(dot(vec3(_2297, _2298, _2299), vec3(_2297, _2298, _2299)));
    float _2304 = _2303 * _2297;
    float _2305 = _2303 * _2298;
    float _2306 = _2303 * _2299;
    float _2307 = dot(vec3(_659, _660, _661), vec3(cbLight._m0[_2097].xyz));
    float _4481 = isnan(0.0) ? _2307 : (isnan(_2307) ? 0.0 : max(_2307, 0.0));
    float _2310 = isnan(1.0) ? _4481 : (isnan(_4481) ? 1.0 : min(_4481, 1.0));
    float _2311 = dot(vec3(_659, _660, _661), vec3(_2304, _2305, _2306));
    float _4492 = isnan(0.0) ? _2311 : (isnan(_2311) ? 0.0 : max(_2311, 0.0));
    float _2314 = isnan(1.0) ? _4492 : (isnan(_4492) ? 1.0 : min(_4492, 1.0));
    float _2315 = dot(vec3(cbLight._m0[_2097].xyz), vec3(_2304, _2305, _2306));
    float _4503 = isnan(0.0) ? _2315 : (isnan(_2315) ? 0.0 : max(_2315, 0.0));
    float _2319 = _2296 * _2296;
    float _2323 = ((_2314 * _2314) * (_2319 + (-1.0))) + 1.0;
    float _2330 = exp2(log2(1.0 - (isnan(1.0) ? _4503 : (isnan(_4503) ? 1.0 : min(_4503, 1.0)))) * 5.0);
    float _2337 = 1.0 - _2296;
    float _2347 = (0.5 / (((_2225 * ((_2310 * _2337) + _2296)) + 9.9999999392252902907785028219223e-09) + (((_2225 * _2337) + _2296) * _2310))) * _2310;
    float _4514 = isnan(0.0) ? _2347 : (isnan(_2347) ? 0.0 : max(_2347, 0.0));
    float _2349 = (isnan(1.0) ? _4514 : (isnan(_4514) ? 1.0 : min(_4514, 1.0))) * (_2319 / ((_2323 * _2323) * 3.141590118408203125));
    float _2359 = (((((_2330 * _2247) + _956) * cbLight._m0[_2284].x) * _2349) * _2080) + ((((cbLight._m0[_2196].x * _2049) * ((_2246 * _2247) + _956)) * _2270) * _2093);
    float _2360 = (((((_2330 * _2249) + _957) * cbLight._m0[_2284].y) * _2349) * _2080) + ((((cbLight._m0[_2196].y * _2050) * ((_2246 * _2249) + _957)) * _2270) * _2093);
    float _2361 = (((((_2330 * _2250) + _958) * cbLight._m0[_2284].z) * _2349) * _2080) + ((((cbLight._m0[_2196].z * _2051) * ((_2246 * _2250) + _958)) * _2270) * _2093);
    float _2423;
    float _2425;
    float _2427;
    if (_2133)
    {
        _2423 = _2359;
        _2425 = _2360;
        _2427 = _2361;
    }
    else
    {
        uint _2429 = _2057 + 2u;
        uint _2433 = _2057 + 10u;
        float _2447 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2429].w)) * _838) * 0.949999988079071044921875);
        float _2448 = _2447 * _2447;
        float _2449 = cbLight._m0[_2429].x + _740;
        float _2450 = cbLight._m0[_2429].y + _741;
        float _2451 = cbLight._m0[_2429].z + _742;
        float _2455 = inversesqrt(dot(vec3(_2449, _2450, _2451), vec3(_2449, _2450, _2451)));
        float _2456 = _2455 * _2449;
        float _2457 = _2455 * _2450;
        float _2458 = _2455 * _2451;
        float _2459 = dot(vec3(_659, _660, _661), vec3(cbLight._m0[_2429].xyz));
        float _4525 = isnan(0.0) ? _2459 : (isnan(_2459) ? 0.0 : max(_2459, 0.0));
        float _2462 = isnan(1.0) ? _4525 : (isnan(_4525) ? 1.0 : min(_4525, 1.0));
        float _2463 = dot(vec3(_659, _660, _661), vec3(_2456, _2457, _2458));
        float _4536 = isnan(0.0) ? _2463 : (isnan(_2463) ? 0.0 : max(_2463, 0.0));
        float _2466 = isnan(1.0) ? _4536 : (isnan(_4536) ? 1.0 : min(_4536, 1.0));
        float _2467 = dot(vec3(cbLight._m0[_2429].xyz), vec3(_2456, _2457, _2458));
        float _4547 = isnan(0.0) ? _2467 : (isnan(_2467) ? 0.0 : max(_2467, 0.0));
        float _2471 = _2448 * _2448;
        float _2475 = ((_2466 * _2466) * (_2471 + (-1.0))) + 1.0;
        float _2482 = exp2(log2(1.0 - (isnan(1.0) ? _4547 : (isnan(_4547) ? 1.0 : min(_4547, 1.0)))) * 5.0);
        float _2489 = 1.0 - _2448;
        float _2499 = (0.5 / (((_2225 * ((_2462 * _2489) + _2448)) + 9.9999999392252902907785028219223e-09) + (((_2225 * _2489) + _2448) * _2462))) * _2462;
        float _4558 = isnan(0.0) ? _2499 : (isnan(_2499) ? 0.0 : max(_2499, 0.0));
        float _2501 = (isnan(1.0) ? _4558 : (isnan(_4558) ? 1.0 : min(_4558, 1.0))) * (_2471 / ((_2475 * _2475) * 3.141590118408203125));
        float _2502 = isnan(1.0) ? _2072 : (isnan(_2072) ? 1.0 : min(_2072, 1.0));
        _2423 = (((((_2482 * _2247) + _956) * cbLight._m0[_2433].x) * _2501) * _2502) + _2359;
        _2425 = (((((_2482 * _2249) + _957) * cbLight._m0[_2433].y) * _2501) * _2502) + _2360;
        _2427 = (((((_2482 * _2250) + _958) * cbLight._m0[_2433].z) * _2501) * _2502) + _2361;
    }
    float _2537;
    float _2539;
    float _2541;
    if (_2151)
    {
        _2537 = _2423;
        _2539 = _2425;
        _2541 = _2427;
    }
    else
    {
        uint _2548 = _2057 + 3u;
        uint _2552 = _2057 + 11u;
        float _2566 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2548].w)) * _838) * 0.949999988079071044921875);
        float _2567 = _2566 * _2566;
        float _2568 = cbLight._m0[_2548].x + _740;
        float _2569 = cbLight._m0[_2548].y + _741;
        float _2570 = cbLight._m0[_2548].z + _742;
        float _2574 = inversesqrt(dot(vec3(_2568, _2569, _2570), vec3(_2568, _2569, _2570)));
        float _2575 = _2574 * _2568;
        float _2576 = _2574 * _2569;
        float _2577 = _2574 * _2570;
        float _2578 = dot(vec3(_659, _660, _661), vec3(cbLight._m0[_2548].xyz));
        float _4574 = isnan(0.0) ? _2578 : (isnan(_2578) ? 0.0 : max(_2578, 0.0));
        float _2581 = isnan(1.0) ? _4574 : (isnan(_4574) ? 1.0 : min(_4574, 1.0));
        float _2582 = dot(vec3(_659, _660, _661), vec3(_2575, _2576, _2577));
        float _4585 = isnan(0.0) ? _2582 : (isnan(_2582) ? 0.0 : max(_2582, 0.0));
        float _2585 = isnan(1.0) ? _4585 : (isnan(_4585) ? 1.0 : min(_4585, 1.0));
        float _2586 = dot(vec3(cbLight._m0[_2548].xyz), vec3(_2575, _2576, _2577));
        float _4596 = isnan(0.0) ? _2586 : (isnan(_2586) ? 0.0 : max(_2586, 0.0));
        float _2590 = _2567 * _2567;
        float _2594 = ((_2585 * _2585) * (_2590 + (-1.0))) + 1.0;
        float _2601 = exp2(log2(1.0 - (isnan(1.0) ? _4596 : (isnan(_4596) ? 1.0 : min(_4596, 1.0)))) * 5.0);
        float _2608 = 1.0 - _2567;
        float _2618 = (0.5 / (((_2225 * ((_2581 * _2608) + _2567)) + 9.9999999392252902907785028219223e-09) + (((_2225 * _2608) + _2567) * _2581))) * _2581;
        float _4607 = isnan(0.0) ? _2618 : (isnan(_2618) ? 0.0 : max(_2618, 0.0));
        float _2620 = (isnan(1.0) ? _4607 : (isnan(_4607) ? 1.0 : min(_4607, 1.0))) * (_2590 / ((_2594 * _2594) * 3.141590118408203125));
        float _2621 = isnan(1.0) ? _2073 : (isnan(_2073) ? 1.0 : min(_2073, 1.0));
        _2537 = (((((_2601 * _2247) + _956) * cbLight._m0[_2552].x) * _2620) * _2621) + _2423;
        _2539 = (((((_2601 * _2249) + _957) * cbLight._m0[_2552].y) * _2620) * _2621) + _2425;
        _2541 = (((((_2601 * _2250) + _958) * cbLight._m0[_2552].z) * _2620) * _2621) + _2427;
    }
    float _2755;
    float _2757;
    float _2759;
    float _2761;
    float _2763;
    float _2765;
    if (_2055.y == 0u)
    {
        float _2696 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2697 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2696;
        float _2698 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2696;
        float _2699 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2696;
        uvec4 _2711 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2712 = _2711.x;
        uint _2723 = uint((float(_2711.y) * floor(float(uint(cbSceneParam._m0[85u].y * _761) / _2712))) + floor(float(uint(cbSceneParam._m0[85u].x * _760) / _2712)));
        float _2733 = (log2(_2699 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2734 = isnan(0.0) ? _2733 : (isnan(_2733) ? 0.0 : max(_2733, 0.0));
        uint _2737 = uint(isnan(14.0) ? _2734 : (isnan(_2734) ? 14.0 : min(_2734, 14.0)));
        uvec4 _2742 = texelFetch(g_lightClusterGridBuffer, int(((_2737 << 2u) + (_2723 << 6u)) >> 2u));
        uint _2743 = _2742.x;
        uint _2744 = _2711.z;
        float _2886;
        float _2888;
        float _2890;
        float _2892;
        float _2894;
        float _2896;
        if (((((1u << ((_2744 >> 4u) & 15u)) + 4294967295u) & _2743) == 0u) || ((_2744 & 240u) == 0u))
        {
            _2886 = 0.0;
            _2888 = 0.0;
            _2890 = 0.0;
            _2892 = 0.0;
            _2894 = 0.0;
            _2896 = 0.0;
        }
        else
        {
            float _2887;
            float _2889;
            float _2891;
            float _2893;
            float _2895;
            float _2897;
            float _3047 = 0.0;
            float _3048 = 0.0;
            float _3049 = 0.0;
            float _3050 = 0.0;
            float _3051 = 0.0;
            float _3052 = 0.0;
            uint _3053 = 0u;
            uint _3062;
            bool _3063;
            for (;;)
            {
                _3062 = texelFetch(g_lightClassification, int((((_2737 << 5u) + (_2723 << 9u)) + (_3053 << 2u)) >> 2u)).x;
                _3063 = _3062 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_3063)
                {
                    frontier_phi_68_pred = _3049;
                    frontier_phi_68_pred_1 = _3052;
                    frontier_phi_68_pred_2 = _3051;
                    frontier_phi_68_pred_3 = _3050;
                    frontier_phi_68_pred_4 = _3048;
                    frontier_phi_68_pred_5 = _3047;
                }
                else
                {
                    float _3192;
                    float _3193;
                    float _3194;
                    float _3195;
                    float _3196;
                    float _3197;
                    uint _3198;
                    _3192 = _3047;
                    _3193 = _3048;
                    _3194 = _3049;
                    _3195 = _3050;
                    _3196 = _3051;
                    _3197 = _3052;
                    _3198 = _3062;
                    float _3119;
                    float _3120;
                    float _3121;
                    float _3122;
                    float _3123;
                    float _3124;
                    for (;;)
                    {
                        uint _3202 = uint(findLSB(_3198)) + (_3053 << 5u);
                        uint _3199 = (_3198 + 4294967295u) & _3198;
                        uint _3204 = _3202 * 48u;
                        vec4 _3218 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3204)).x, texelFetch(g_PointLightRenderingBuffer, int(_3204 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3204 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3204 + 3u)).x));
                        uint _3224 = (_3202 * 48u) + 4u;
                        vec4 _3237 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3224)).x, texelFetch(g_PointLightRenderingBuffer, int(_3224 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3224 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3224 + 3u)).x));
                        uint _3243 = (_3202 * 48u) + 8u;
                        vec3 _3254 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3243)).x, texelFetch(g_PointLightRenderingBuffer, int(_3243 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3243 + 2u)).x));
                        float _3258 = _3218.x - _2697;
                        float _3259 = _3218.y - _2698;
                        float _3260 = _3218.z - _2699;
                        float _3261 = dot(vec3(_3258, _3259, _3260), vec3(_3258, _3259, _3260));
                        float _3264 = inversesqrt(_3261);
                        float _3265 = _3264 * _3258;
                        float _3266 = _3264 * _3259;
                        float _3267 = _3264 * _3260;
                        float _3268 = dot(vec3(_783, _786, _789), vec3(_3265, _3266, _3267));
                        float _3273 = 1.0 - (_3261 * _3218.w);
                        float _4633 = isnan(0.0) ? _3273 : (isnan(_3273) ? 0.0 : max(_3273, 0.0));
                        float _3274 = isnan(1.0) ? _4633 : (isnan(_4633) ? 1.0 : min(_4633, 1.0));
                        float _3275 = sqrt(_3261) * _3237.w;
                        float _3278 = 1.39999997615814208984375 / (_3275 + 1.39999997615814208984375);
                        float _3279 = _3278 * _3278;
                        float _3282 = ((1.0 - _3279) * _3268) + _3279;
                        float _3285 = _3275 * _3275;
                        float _3289 = ((isnan(0.0) ? _3282 : (isnan(_3282) ? 0.0 : max(_3282, 0.0))) * _3274) / ((_3285 * 0.699999988079071044921875) + 1.0);
                        float _3293 = (-0.0) - _2697;
                        float _3294 = (-0.0) - _2698;
                        float _3295 = (-0.0) - _2699;
                        float _3299 = inversesqrt(dot(vec3(_3293, _3294, _3295), vec3(_3293, _3294, _3295)));
                        float _3300 = _3299 * _3293;
                        float _3301 = _3299 * _3294;
                        float _3302 = _3299 * _3295;
                        float _3310 = exp2(log2(1.0 / ((_3285 * 3.5) + 5.0)) * 0.25);
                        float _3311 = 1.0 - _986;
                        float _3318 = sqrt(1.0 - ((1.0 - (_3311 * _3311)) * (1.0 - (_3310 * _3310))));
                        float _3319 = _3318 * _3318;
                        float _3320 = _3319 * _3319;
                        float _3321 = _3300 + _3265;
                        float _3322 = _3301 + _3266;
                        float _3323 = _3302 + _3267;
                        float _3327 = inversesqrt(dot(vec3(_3321, _3322, _3323), vec3(_3321, _3322, _3323)));
                        float _3331 = dot(vec3(_783, _786, _789), vec3(_3300, _3301, _3302));
                        float _4649 = isnan(0.0) ? _3331 : (isnan(_3331) ? 0.0 : max(_3331, 0.0));
                        float _3334 = isnan(1.0) ? _4649 : (isnan(_4649) ? 1.0 : min(_4649, 1.0));
                        float _3335 = dot(vec3(_783, _786, _789), vec3(_3327 * _3321, _3327 * _3322, _3327 * _3323));
                        float _4660 = isnan(0.0) ? _3335 : (isnan(_3335) ? 0.0 : max(_3335, 0.0));
                        float _3338 = isnan(1.0) ? _4660 : (isnan(_4660) ? 1.0 : min(_4660, 1.0));
                        float _3342 = ((_3338 * _3338) * (_3320 + (-1.0))) + 1.0;
                        float _3343 = _3278 * _3319;
                        float _3344 = _3343 * _3343;
                        float _3347 = ((1.0 - _3344) * _3268) + _3344;
                        float _4671 = isnan(0.0) ? _3347 : (isnan(_3347) ? 0.0 : max(_3347, 0.0));
                        float _3348 = isnan(1.0) ? _4671 : (isnan(_4671) ? 1.0 : min(_4671, 1.0));
                        float _3349 = 1.0 - _3319;
                        float _3359 = (0.5 / (((_3348 * ((_3334 * _3349) + _3319)) + 9.9999999392252902907785028219223e-09) + (((_3348 * _3349) + _3319) * _3334))) * _3348;
                        float _4682 = isnan(0.0) ? _3359 : (isnan(_3359) ? 0.0 : max(_3359, 0.0));
                        float _3370 = (((_3320 * 3.1415927410125732421875) * (isnan(1.0) ? _4682 : (isnan(_4682) ? 1.0 : min(_4682, 1.0)))) / ((_3342 * _3342) * ((_3285 * 2.1991131305694580078125) + 3.141590118408203125))) * _3274;
                        _3122 = (_3289 * _3237.x) + _3195;
                        _3123 = (_3289 * _3237.y) + _3196;
                        _3124 = (_3289 * _3237.z) + _3197;
                        _3119 = (_3370 * _3254.x) + _3192;
                        _3120 = (_3370 * _3254.y) + _3193;
                        _3121 = (_3370 * _3254.z) + _3194;
                        if (_3199 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3192 = _3119;
                            _3193 = _3120;
                            _3194 = _3121;
                            _3195 = _3122;
                            _3196 = _3123;
                            _3197 = _3124;
                            _3198 = _3199;
                        }
                    }
                    frontier_phi_68_pred = _3121;
                    frontier_phi_68_pred_1 = _3124;
                    frontier_phi_68_pred_2 = _3123;
                    frontier_phi_68_pred_3 = _3122;
                    frontier_phi_68_pred_4 = _3120;
                    frontier_phi_68_pred_5 = _3119;
                }
                _2891 = frontier_phi_68_pred;
                _2897 = frontier_phi_68_pred_1;
                _2895 = frontier_phi_68_pred_2;
                _2893 = frontier_phi_68_pred_3;
                _2889 = frontier_phi_68_pred_4;
                _2887 = frontier_phi_68_pred_5;
                uint _3054 = _3053 + 1u;
                if (_3054 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3047 = _2887;
                    _3048 = _2889;
                    _3049 = _2891;
                    _3050 = _2893;
                    _3051 = _2895;
                    _3052 = _2897;
                    _3053 = _3054;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2886 = _2887;
            _2888 = _2889;
            _2890 = _2891;
            _2892 = _2893;
            _2894 = _2895;
            _2896 = _2897;
        }
        uvec4 _2900 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2901 = _2900.z;
        uint _2903 = (_2901 >> 8u) & 15u;
        float _3015;
        float _3017;
        float _3019;
        float _3021;
        float _3023;
        float _3025;
        if (((4294967295u << _2903) & _2743) == 0u)
        {
            _3015 = _2886;
            _3017 = _2888;
            _3019 = _2890;
            _3021 = _2892;
            _3023 = _2894;
            _3025 = _2896;
        }
        else
        {
            float _3040 = inversesqrt(dot(vec3(_2697, _2698, _2699), vec3(_2697, _2698, _2699)));
            float _3041 = _3040 * _2697;
            float _3042 = _3040 * _2698;
            float _3043 = _3040 * _2699;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2903 < ((_2901 >> 12u) & 15u))
            {
                float _3016;
                float _3018;
                float _3020;
                float _3022;
                float _3024;
                float _3026;
                float _3175 = _2886;
                float _3176 = _2888;
                float _3177 = _2890;
                float _3178 = _2892;
                float _3179 = _2894;
                float _3180 = _2896;
                uint _3181 = _2903;
                uint _3190;
                bool _3191;
                for (;;)
                {
                    _3190 = texelFetch(g_lightClassification, int((((_2737 << 5u) + (_2723 << 9u)) + (_3181 << 2u)) >> 2u)).x;
                    _3191 = _3190 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_3191)
                    {
                        frontier_phi_79_pred = _3180;
                        frontier_phi_79_pred_1 = _3179;
                        frontier_phi_79_pred_2 = _3178;
                        frontier_phi_79_pred_3 = _3177;
                        frontier_phi_79_pred_4 = _3176;
                        frontier_phi_79_pred_5 = _3175;
                    }
                    else
                    {
                        float _3384;
                        float _3385;
                        float _3386;
                        float _3387;
                        float _3388;
                        float _3389;
                        float _3679;
                        float _3680;
                        float _3681;
                        float _3682;
                        float _3683;
                        float _3684;
                        float _3397 = _3175;
                        float _3398 = _3176;
                        float _3399 = _3177;
                        float _3400 = _3178;
                        float _3401 = _3179;
                        float _3402 = _3180;
                        uint _3403 = _3190;
                        uint _3404;
                        vec4 _3429;
                        float _3430;
                        vec4 _3445;
                        vec3 _3457;
                        vec4 _3472;
                        vec4 _3488;
                        float _3535;
                        bool _3536;
                        for (;;)
                        {
                            uint _3414 = ((_3181 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3403));
                            _3404 = (_3403 + 4294967295u) & _3403;
                            uint _3416 = _3414 * 40u;
                            _3429 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3416)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3416 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3416 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3416 + 3u)).x));
                            _3430 = _3429.w;
                            uint _3432 = (_3414 * 40u) + 4u;
                            _3445 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3432)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3432 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3432 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3432 + 3u)).x));
                            uint _3447 = (_3414 * 40u) + 8u;
                            _3457 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3447)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3447 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3447 + 2u)).x));
                            uint _3459 = (_3414 * 40u) + 16u;
                            _3472 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3459)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3459 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3459 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3459 + 3u)).x));
                            uint _3475 = (_3414 * 40u) + 20u;
                            _3488 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3475)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3475 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3475 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3475 + 3u)).x));
                            uint _3491 = (_3414 * 40u) + 24u;
                            vec4 _3504 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3491)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3491 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3491 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3491 + 3u)).x));
                            uint _3510 = (_3414 * 40u) + 28u;
                            vec4 _3523 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3510)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3510 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3510 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3510 + 3u)).x));
                            _3535 = fma(_2699, _3523.z, fma(_2698, _3523.y, _3523.x * _2697)) + _3523.w;
                            _3536 = !((fma(_2699, _3504.z, fma(_2698, _3504.y, _3504.x * _2697)) + _3504.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_3536)
                            {
                                float _3563 = _3429.x - _2697;
                                float _3564 = _3429.y - _2698;
                                float _3565 = _3429.z - _2699;
                                float _3566 = dot(vec3(_3563, _3564, _3565), vec3(_3563, _3564, _3565));
                                float _3569 = inversesqrt(_3566);
                                float _3570 = _3569 * _3563;
                                float _3571 = _3569 * _3564;
                                float _3572 = _3569 * _3565;
                                float _3576 = 1.0 - (_3566 / (_3430 * _3430));
                                float _4693 = isnan(0.0) ? _3576 : (isnan(_3576) ? 0.0 : max(_3576, 0.0));
                                float _3577 = isnan(1.0) ? _4693 : (isnan(_4693) ? 1.0 : min(_4693, 1.0));
                                float _3581 = sqrt(_3566) * _3445.w;
                                float _3583 = 1.39999997615814208984375 / (_3581 + 1.39999997615814208984375);
                                float _3584 = _3583 * _3583;
                                float _3587 = ((1.0 - _3584) * dot(vec3(_3570, _3571, _3572), vec3(_783, _786, _789))) + _3584;
                                float _3590 = _3581 * _3581;
                                float _3594 = (fma(_2699, _3472.z, fma(_2698, _3472.y, _3472.x * _2697)) + _3472.w) / _3535;
                                float _3595 = (fma(_2699, _3488.z, fma(_2698, _3488.y, _3488.x * _2697)) + _3488.w) / _3535;
                                float _3599 = 1.0 - dot(vec2(_3594, _3595), vec2(_3594, _3595));
                                float _4709 = isnan(0.0) ? _3599 : (isnan(_3599) ? 0.0 : max(_3599, 0.0));
                                float _3600 = isnan(1.0) ? _4709 : (isnan(_4709) ? 1.0 : min(_4709, 1.0));
                                float _3601 = _3600 * (((isnan(0.0) ? _3587 : (isnan(_3587) ? 0.0 : max(_3587, 0.0))) * _3577) / ((_3590 * 0.699999988079071044921875) + 1.0));
                                float _3613 = exp2(log2(1.0 / ((_3590 * 3.5) + 5.0)) * 0.25);
                                float _3614 = 1.0 - _986;
                                float _3621 = sqrt(1.0 - ((1.0 - (_3614 * _3614)) * (1.0 - (_3613 * _3613))));
                                float _3622 = _3621 * _3621;
                                float _3623 = _3622 * _3622;
                                float _3624 = _3570 - _3041;
                                float _3625 = _3571 - _3042;
                                float _3626 = _3572 - _3043;
                                float _3630 = inversesqrt(dot(vec3(_3624, _3625, _3626), vec3(_3624, _3625, _3626)));
                                float _3634 = dot(vec3(_783, _786, _789), vec3((-0.0) - _3041, (-0.0) - _3042, (-0.0) - _3043));
                                float _4720 = isnan(0.0) ? _3634 : (isnan(_3634) ? 0.0 : max(_3634, 0.0));
                                float _3637 = isnan(1.0) ? _4720 : (isnan(_4720) ? 1.0 : min(_4720, 1.0));
                                float _3638 = dot(vec3(_783, _786, _789), vec3(_3630 * _3624, _3630 * _3625, _3630 * _3626));
                                float _4731 = isnan(0.0) ? _3638 : (isnan(_3638) ? 0.0 : max(_3638, 0.0));
                                float _3641 = isnan(1.0) ? _4731 : (isnan(_4731) ? 1.0 : min(_4731, 1.0));
                                float _3645 = ((_3641 * _3641) * (_3623 + (-1.0))) + 1.0;
                                float _3646 = _3583 * _3622;
                                float _3647 = _3646 * _3646;
                                float _3653 = ((1.0 - _3647) * dot(vec3(_783, _786, _789), vec3(_3570, _3571, _3572))) + _3647;
                                float _4742 = isnan(0.0) ? _3653 : (isnan(_3653) ? 0.0 : max(_3653, 0.0));
                                float _3654 = isnan(1.0) ? _4742 : (isnan(_4742) ? 1.0 : min(_4742, 1.0));
                                float _3655 = 1.0 - _3622;
                                float _3665 = (0.5 / (((_3654 * ((_3637 * _3655) + _3622)) + 9.9999999392252902907785028219223e-09) + (((_3654 * _3655) + _3622) * _3637))) * _3654;
                                float _4753 = isnan(0.0) ? _3665 : (isnan(_3665) ? 0.0 : max(_3665, 0.0));
                                float _3675 = (_3600 * _3577) * (((_3623 * 3.1415927410125732421875) * (isnan(1.0) ? _4753 : (isnan(_4753) ? 1.0 : min(_4753, 1.0)))) / ((_3645 * _3645) * ((_3590 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3601 * _3445.z;
                                frontier_phi_85_pred_1 = _3601 * _3445.y;
                                frontier_phi_85_pred_2 = _3601 * _3445.x;
                                frontier_phi_85_pred_3 = _3675 * _3457.z;
                                frontier_phi_85_pred_4 = _3675 * _3457.y;
                                frontier_phi_85_pred_5 = _3675 * _3457.x;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3684 = frontier_phi_85_pred;
                            _3683 = frontier_phi_85_pred_1;
                            _3682 = frontier_phi_85_pred_2;
                            _3681 = frontier_phi_85_pred_3;
                            _3680 = frontier_phi_85_pred_4;
                            _3679 = frontier_phi_85_pred_5;
                            _3387 = _3682 + _3400;
                            _3388 = _3683 + _3401;
                            _3389 = _3684 + _3402;
                            _3384 = _3679 + _3397;
                            _3385 = _3680 + _3398;
                            _3386 = _3681 + _3399;
                            if (_3404 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3397 = _3384;
                                _3398 = _3385;
                                _3399 = _3386;
                                _3400 = _3387;
                                _3401 = _3388;
                                _3402 = _3389;
                                _3403 = _3404;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _3389;
                        frontier_phi_79_pred_1 = _3388;
                        frontier_phi_79_pred_2 = _3387;
                        frontier_phi_79_pred_3 = _3386;
                        frontier_phi_79_pred_4 = _3385;
                        frontier_phi_79_pred_5 = _3384;
                    }
                    _3026 = frontier_phi_79_pred;
                    _3024 = frontier_phi_79_pred_1;
                    _3022 = frontier_phi_79_pred_2;
                    _3020 = frontier_phi_79_pred_3;
                    _3018 = frontier_phi_79_pred_4;
                    _3016 = frontier_phi_79_pred_5;
                    uint _3182 = _3181 + 1u;
                    if (_3182 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3175 = _3016;
                        _3176 = _3018;
                        _3177 = _3020;
                        _3178 = _3022;
                        _3179 = _3024;
                        _3180 = _3026;
                        _3181 = _3182;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3022;
                frontier_phi_60_61_ladder_1 = _3026;
                frontier_phi_60_61_ladder_2 = _3024;
                frontier_phi_60_61_ladder_3 = _3020;
                frontier_phi_60_61_ladder_4 = _3018;
                frontier_phi_60_61_ladder_5 = _3016;
            }
            else
            {
                frontier_phi_60_61_ladder = _2892;
                frontier_phi_60_61_ladder_1 = _2896;
                frontier_phi_60_61_ladder_2 = _2894;
                frontier_phi_60_61_ladder_3 = _2890;
                frontier_phi_60_61_ladder_4 = _2888;
                frontier_phi_60_61_ladder_5 = _2886;
            }
            _3015 = frontier_phi_60_61_ladder_5;
            _3017 = frontier_phi_60_61_ladder_4;
            _3019 = frontier_phi_60_61_ladder_3;
            _3021 = frontier_phi_60_61_ladder;
            _3023 = frontier_phi_60_61_ladder_2;
            _3025 = frontier_phi_60_61_ladder_1;
        }
        float _3030 = isnan(1.0) ? _970 : (isnan(_970) ? 1.0 : min(_970, 1.0));
        _2755 = (_3030 * _3021) + _2189;
        _2757 = (_3030 * _3023) + _2191;
        _2759 = (_3030 * _3025) + _2193;
        _2761 = ((_3015 * _956) * _3030) + _2537;
        _2763 = ((_3017 * _957) * _3030) + _2539;
        _2765 = ((_3019 * _958) * _3030) + _2541;
    }
    else
    {
        _2755 = _2189;
        _2757 = _2191;
        _2759 = _2193;
        _2761 = _2537;
        _2763 = _2539;
        _2765 = _2541;
    }
    uint _2771 = _863 + uint(cbMatDynParam._m0[0u].w);
    float _2781 = ((((cbMtdParam._m0[12u].x * cbMtdParam._m0[16u].z) * cbMtdParam._m0[15u].w) * _591) * _604.x) * cbInstanceData._m0[_2771].x;
    float _2786 = ((((cbMtdParam._m0[12u].y * cbMtdParam._m0[16u].z) * cbMtdParam._m0[15u].w) * _591) * _604.y) * cbInstanceData._m0[_2771].y;
    float _2791 = ((((cbMtdParam._m0[12u].z * cbMtdParam._m0[16u].z) * cbMtdParam._m0[15u].w) * _591) * _604.z) * cbInstanceData._m0[_2771].z;
    float _4769 = isnan(0.0) ? _947 : (isnan(_947) ? 0.0 : max(_947, 0.0));
    float _4780 = isnan(0.0) ? _948 : (isnan(_948) ? 0.0 : max(_948, 0.0));
    float _4791 = isnan(0.0) ? _949 : (isnan(_949) ? 0.0 : max(_949, 0.0));
    float _4802 = isnan(0.0) ? _662 : (isnan(_662) ? 0.0 : max(_662, 0.0));
    float _2809 = (((isnan(1.0) ? _4769 : (isnan(_4769) ? 1.0 : min(_4769, 1.0))) * (_2755 + ((isnan(0.0) ? _1730 : (isnan(_1730) ? 0.0 : max(_1730, 0.0))) * _970))) + ((_2761 + ((isnan(0.0) ? _2021 : (isnan(_2021) ? 0.0 : max(_2021, 0.0))) * _1806)) * cbPerFrame._m0[3u].x)) + _2781;
    float _2811 = (_2786 + ((_2763 + ((isnan(0.0) ? _2024 : (isnan(_2024) ? 0.0 : max(_2024, 0.0))) * _1806)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4780 : (isnan(_4780) ? 1.0 : min(_4780, 1.0))) * (_2757 + ((isnan(0.0) ? _1733 : (isnan(_1733) ? 0.0 : max(_1733, 0.0))) * _970)));
    float _2813 = (_2791 + ((_2765 + ((isnan(0.0) ? _2027 : (isnan(_2027) ? 0.0 : max(_2027, 0.0))) * _1806)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4791 : (isnan(_4791) ? 1.0 : min(_4791, 1.0))) * (_2759 + ((isnan(0.0) ? _1736 : (isnan(_1736) ? 0.0 : max(_1736, 0.0))) * _970)));
    float _2814 = isnan(0.0) ? _2809 : (isnan(_2809) ? 0.0 : max(_2809, 0.0));
    float _2815 = isnan(0.0) ? _2811 : (isnan(_2811) ? 0.0 : max(_2811, 0.0));
    float _2816 = isnan(0.0) ? _2813 : (isnan(_2813) ? 0.0 : max(_2813, 0.0));
    float _2822 = cbMtdParam._m0[2u].x * _2781;
    float _2823 = cbMtdParam._m0[2u].y * _2786;
    float _2824 = cbMtdParam._m0[2u].z * _2791;
    float _4828 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2826 = isnan(1.0) ? _4828 : (isnan(_4828) ? 1.0 : min(_4828, 1.0));
    float _2831 = cbInstanceData._m0[_862 + 6u].w * (isnan(1.0) ? _4802 : (isnan(_4802) ? 1.0 : min(_4802, 1.0)));
    float _2836 = _760 / cbSceneParam._m0[86u].x;
    float _2837 = _761 / cbSceneParam._m0[86u].y;
    vec4 _2851 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2836, _2837, (log2((isnan(cbSceneParam._m0[77u].w) ? _683 : (isnan(_683) ? cbSceneParam._m0[77u].w : min(_683, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2853 = _2851.x;
    float _2854 = _2851.y;
    float _2855 = _2851.z;
    float _2856 = _2851.w;
    float _2948;
    float _2950;
    float _2952;
    float _2954;
    if (_683 > cbSceneParam._m0[78u].w)
    {
        float _2911 = isnan(_683) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _683 : min(cbSceneParam._m0[80u].w, _683));
        float _2912 = _2911 / _683;
        float _2923 = _2912 * _733;
        float _2924 = _734 * _2912;
        float _2925 = (-0.0) - _2924;
        float _2926 = _2912 * _735;
        float _2928 = (cbSceneParam._m0[77u].w * _2925) / _2911;
        float _2929 = _2928 + cbSceneParam._m0[79u].w;
        float _2930 = cbSceneParam._m0[79u].w - _2924;
        float _2936 = sqrt(((_2923 * _2923) + (_2924 * _2924)) + (_2926 * _2926));
        float _2939 = (1.0 - (cbSceneParam._m0[77u].w / _2911)) * _2936;
        float _2944 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2946 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3132;
        if (abs((_2925 - _2928) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3132 = ((((_2929 > 0.0) ? exp2(_2944 * _2929) : (2.0 - exp2(_2946 * _2929))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2939;
        }
        else
        {
            float _3076 = 1.0 / cbSceneParam._m0[80u].x;
            float _3077 = isnan(_2930) ? _2929 : (isnan(_2929) ? _2930 : max(_2929, _2930));
            float _3078 = isnan(_2930) ? _2929 : (isnan(_2929) ? _2930 : min(_2929, _2930));
            float _3087 = isnan(0.0) ? _3077 : (isnan(_3077) ? 0.0 : min(_3077, 0.0));
            float _3088 = isnan(0.0) ? _3078 : (isnan(_3078) ? 0.0 : min(_3078, 0.0));
            _3132 = ((abs(_2936 / _2925) * cbSceneParam._m0[80u].y) * ((((_3087 - _3088) * 2.0) - ((exp2(_2944 * (isnan(0.0) ? _3077 : (isnan(_3077) ? 0.0 : max(_3077, 0.0)))) - exp2(_2944 * (isnan(0.0) ? _3078 : (isnan(_3078) ? 0.0 : max(_3078, 0.0))))) * _3076)) - ((exp2(_2946 * _3087) - exp2(_2946 * _3088)) * _3076))) + (_2939 * cbSceneParam._m0[80u].z);
        }
        vec4 _3134 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2836, _2837, 1.0), 0.0);
        float _3143 = exp2((_3132 * (-1.44269502162933349609375)) * (1.0 - _3134.w));
        float _3144 = log2(_3143);
        float _3160 = log2(_2856);
        _2948 = (exp2(_3160 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3144 * cbSceneParam._m0[78u].x)) * _3134.x) / cbSceneParam._m0[78u].x)) + _2853;
        _2950 = (exp2(_3160 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3144 * cbSceneParam._m0[78u].y)) * _3134.y) / cbSceneParam._m0[78u].y)) + _2854;
        _2952 = (exp2(_3160 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3144 * cbSceneParam._m0[78u].z)) * _3134.z) / cbSceneParam._m0[78u].z)) + _2855;
        _2954 = _3143 * _2856;
    }
    else
    {
        _2948 = _2853;
        _2950 = _2854;
        _2952 = _2855;
        _2954 = _2856;
    }
    bool _3170;
    vec4 _2964;
    vec4 _2986;
    float _2988;
    float _2992;
    float _2993;
    float _2994;
    float _2997;
    float _3000;
    float _3003;
    float _3004;
    bool _3014;
    for (;;)
    {
        _2964 = cbMatDynParam._m0[0u];
        float _2966 = roundEven(_2964.y);
        bool _2967 = _2966 == 3.0;
        float _2968 = log2(_2954);
        float _2972 = exp2(_2968 * cbSceneParam._m0[78u].x);
        float _2973 = exp2(_2968 * cbSceneParam._m0[78u].y);
        float _2974 = exp2(_2968 * cbSceneParam._m0[78u].z);
        float _2975 = _2972 * _2814;
        float _2976 = _2973 * _2815;
        float _2977 = _2974 * _2816;
        float _2984 = _749 + (-0.5);
        _2986 = cbMtdParam._m0[1u];
        _2988 = _2986.y * _2984;
        float _2991 = (_2966 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2992 = _2991 * (_2967 ? _2975 : (_2975 + (cbSceneParam._m0[72u].w * _2948)));
        _2993 = _2991 * (_2967 ? _2976 : (_2976 + (cbSceneParam._m0[72u].w * _2950)));
        _2994 = _2991 * (_2967 ? _2977 : (_2977 + (cbSceneParam._m0[72u].w * _2952)));
        _2997 = ((_2822 * _2826) * _2972) * _2991;
        _3000 = ((_2823 * _2826) * _2973) * _2991;
        _3003 = ((_2824 * _2826) * _2974) * _2991;
        _3004 = _2984 * 0.999000012874603271484375;
        _3014 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3014)
        {
            if ((cbInstanceData._m0[_862 + 7u].x + _3004) < 0.5)
            {
                _3170 = true;
                break;
            }
        }
        uint _3111 = _863 + uint(_2964.w);
        if ((cbInstanceData._m0[_3111].w < 1.0) && ((cbInstanceData._m0[_3111].w + _3004) < 0.5))
        {
            _3170 = true;
            break;
        }
        if ((_2988 + _440) < _2986.x)
        {
            _3170 = true;
            break;
        }
        _3170 = false;
        break;
    }
    float _3375;
    if (_3170)
    {
        discard_state = true;
        _3375 = 0.0;
    }
    else
    {
        _3375 = _2831;
    }
    SV_Target.x = _2992;
    SV_Target.y = _2993;
    SV_Target.z = _2994;
    SV_Target.w = _3375;
    SV_Target_1.x = _2997;
    SV_Target_1.y = _3000;
    SV_Target_1.z = _3003;
    SV_Target_1.w = _2831;
    discard_exit();
}


