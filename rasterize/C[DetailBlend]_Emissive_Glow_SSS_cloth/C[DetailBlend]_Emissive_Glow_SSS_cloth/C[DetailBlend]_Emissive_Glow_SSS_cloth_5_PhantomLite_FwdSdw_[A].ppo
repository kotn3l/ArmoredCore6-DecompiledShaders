#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[18];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_1;
layout(set = 0, binding = 1) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_7;
layout(set = 0, binding = 10) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_6;
layout(set = 0, binding = 2) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_0;
layout(set = 0, binding = 3) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_10;
layout(set = 0, binding = 4) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_11;
layout(set = 0, binding = 5) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_12;
layout(set = 0, binding = 6) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_2;
layout(set = 0, binding = 7) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_3;
layout(set = 0, binding = 9) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_5;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1418;
float _4126;
float _4127;
float _4128;
float _4129;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _215 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _216 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _217 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _223 = inversesqrt(dot(vec3(_215, _216, _217), vec3(_215, _216, _217)));
    float _230 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _231 = _230 * NORMAL.x;
    float _232 = _230 * NORMAL.y;
    float _233 = _230 * NORMAL.z;
    float _237 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _245;
    float _246;
    float _247;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _245 = (-0.0) - _231;
        _246 = (-0.0) - _232;
        _247 = (-0.0) - _233;
    }
    else
    {
        _245 = _231;
        _246 = _232;
        _247 = _233;
    }
    float _291 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _301 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _291);
    float _302 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _291);
    float _303 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _291);
    vec4 _316 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _321 = _316.z;
    float _328 = exp2(log2(_321 * 22.0) * 260.0);
    float _329 = isnan(0.0) ? _328 : (isnan(_328) ? 0.0 : max(_328, 0.0));
    float _330 = isnan(1.0) ? _329 : (isnan(_329) ? 1.0 : min(_329, 1.0));
    vec4 _344 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _354 = cbMtdParam._m0[10u].x * _344.x;
    float _355 = cbMtdParam._m0[10u].y * _344.y;
    float _356 = cbMtdParam._m0[10u].z * _344.z;
    vec4 _368 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _383 = exp2(log2(1.0 - _316.w) * 8.0);
    vec4 _395 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_10, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    vec4 _420 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _442 = (((((_368.x * 4.55000019073486328125) * cbMtdParam._m0[9u].x) * _420.x) - _354) * _330) + _354;
    float _443 = (((((_368.y * 4.55000019073486328125) * cbMtdParam._m0[9u].y) * _420.y) - _355) * _330) + _355;
    float _444 = (((((_368.z * 4.55000019073486328125) * cbMtdParam._m0[9u].z) * _420.z) - _356) * _330) + _356;
    float _451 = (((cbMtdParam._m0[13u].x * _395.x) - _442) * _383) + _442;
    float _452 = (((cbMtdParam._m0[13u].y * _395.y) - _443) * _383) + _443;
    float _453 = (((cbMtdParam._m0[13u].z * _395.z) - _444) * _383) + _444;
    float _454 = _420.w * _368.w;
    float _484 = (((texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w)).x - cbMtdParam._m0[17u].x) + cbMtdParam._m0[16u].x) * _330) + cbMtdParam._m0[17u].x;
    float _487 = ((cbMtdParam._m0[15u].z - _484) * _383) + _484;
    vec4 _499 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w));
    float _501 = _499.x;
    float _502 = _499.y;
    float _508 = cbMtdParam._m0[14u].y + _499.z;
    vec4 _520 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w));
    vec4 _539 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _550 = ((((_321 * 2.0) * (cbMtdParam._m0[14u].x + _520.z)) - _508) * _330) + _508;
    float _554 = (((_539.z - _550) + cbMtdParam._m0[15u].y) * _383) + _550;
    float _569 = abs((fract(cbMtdParam._m0[15u].x * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _4148 = isnan(0.0) ? _569 : (isnan(_569) ? 0.0 : max(_569, 0.0));
    float _570 = isnan(1.0) ? _4148 : (isnan(_4148) ? 1.0 : min(_4148, 1.0));
    float _575 = (_570 * _570) * (3.0 - (_570 * 2.0));
    vec4 _588 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _596 = (_316.x * 2.0) + (-1.0);
    float _597 = (_316.y * 2.0) + (-1.0);
    float _598 = dot(vec2(_596, _597), vec2(_596, _597));
    float _4159 = isnan(0.0) ? _598 : (isnan(_598) ? 0.0 : max(_598, 0.0));
    float _603 = sqrt(1.0 - (isnan(1.0) ? _4159 : (isnan(_4159) ? 1.0 : min(_4159, 1.0))));
    float _608 = ((_520.x - _501) * _330) + _501;
    float _609 = ((_520.y - _502) * _330) + _502;
    float _622 = (cbMtdParam._m0[14u].z * (((((_539.x - _608) * _383) + _608) * 2.0) + (-1.0))) + _596;
    float _623 = (cbMtdParam._m0[14u].z * (((((_539.y - _609) * _383) + _609) * 2.0) + (-1.0))) + _597;
    float _626 = fma(_603, _245, fma(_623, _237 * TANGENT.x, (_223 * _215) * _622));
    float _629 = fma(_603, _246, fma(_623, _237 * TANGENT.y, (_223 * _216) * _622));
    float _632 = fma(_603, _247, fma(_623, _237 * TANGENT.z, (_223 * _217) * _622));
    float _636 = inversesqrt(dot(vec3(_626, _629, _632), vec3(_626, _629, _632)));
    float _637 = _636 * _626;
    float _638 = _636 * _629;
    float _639 = _636 * _632;
    float _4170 = isnan(0.0) ? _454 : (isnan(_454) ? 0.0 : max(_454, 0.0));
    float _640 = isnan(1.0) ? _4170 : (isnan(_4170) ? 1.0 : min(_4170, 1.0));
    float _4181 = isnan(0.0) ? _554 : (isnan(_554) ? 0.0 : max(_554, 0.0));
    float _641 = isnan(1.0) ? _4181 : (isnan(_4181) ? 1.0 : min(_4181, 1.0));
    float _4192 = isnan(0.0) ? _451 : (isnan(_451) ? 0.0 : max(_451, 0.0));
    float _642 = isnan(1.0) ? _4192 : (isnan(_4192) ? 1.0 : min(_4192, 1.0));
    float _4203 = isnan(0.0) ? _452 : (isnan(_452) ? 0.0 : max(_452, 0.0));
    float _643 = isnan(1.0) ? _4203 : (isnan(_4203) ? 1.0 : min(_4203, 1.0));
    float _4214 = isnan(0.0) ? _453 : (isnan(_453) ? 0.0 : max(_453, 0.0));
    float _644 = isnan(1.0) ? _4214 : (isnan(_4214) ? 1.0 : min(_4214, 1.0));
    float _4225 = isnan(0.0) ? _487 : (isnan(_487) ? 0.0 : max(_487, 0.0));
    float _645 = isnan(1.0) ? _4225 : (isnan(_4225) ? 1.0 : min(_4225, 1.0));
    float _653 = cbMatDynParam._m0[9u].x * _642;
    float _654 = cbMatDynParam._m0[9u].y * _643;
    float _655 = cbMatDynParam._m0[9u].z * _644;
    float _662 = inversesqrt(dot(vec3(_301, _302, _303), vec3(_301, _302, _303)));
    float _663 = _662 * _301;
    float _664 = _662 * _302;
    float _665 = _662 * _303;
    float _666 = dot(vec3(_637, _638, _639), vec3(_663, _664, _665));
    float _672 = abs(exp2(log2(_666) * cbMatDynParam._m0[12u].x));
    float _673 = isnan(0.100000001490116119384765625) ? _672 : (isnan(_672) ? 0.100000001490116119384765625 : max(_672, 0.100000001490116119384765625));
    float _679 = ((isnan(0.699999988079071044921875) ? _673 : (isnan(_673) ? 0.699999988079071044921875 : min(_673, 0.699999988079071044921875))) + (-0.100000001490116119384765625)) * 1.66666662693023681640625;
    float _701 = 1.0 - cbMatDynParam._m0[8u].w;
    float _4246 = isnan(0.0) ? _701 : (isnan(_701) ? 0.0 : max(_701, 0.0));
    float _704 = 1.0 - cbMatDynParam._m0[7u].w;
    float _4257 = isnan(0.0) ? _704 : (isnan(_704) ? 0.0 : max(_704, 0.0));
    float _705 = isnan(1.0) ? _4257 : (isnan(_4257) ? 1.0 : min(_4257, 1.0));
    float _708 = (((isnan(1.0) ? _4246 : (isnan(_4246) ? 1.0 : min(_4246, 1.0))) - _705) * _679) + _705;
    float _727 = dot(vec3(_637, _638, _639), vec3(0.0, -1.0, 0.0));
    float _4268 = isnan(0.0) ? _727 : (isnan(_727) ? 0.0 : max(_727, 0.0));
    float _730 = isnan(1.0) ? _4268 : (isnan(_4268) ? 1.0 : min(_4268, 1.0));
    float _737 = (_730 * _642) * cbMatDynParam._m0[11u].x;
    float _739 = (_730 * _643) * cbMatDynParam._m0[11u].y;
    float _741 = (_730 * _644) * cbMatDynParam._m0[11u].z;
    float _748 = dot(vec3(_663, _664, _665), vec3(_637, _638, _639));
    float _751 = _748 * 2.0;
    float _761 = dot(vec3((-0.0) - (_663 - (_751 * _637)), (-0.0) - (_664 - (_751 * _638)), (-0.0) - (_665 - (_751 * _639))), vec3(0.0, -1.0, 0.0));
    float _4279 = isnan(0.0) ? _761 : (isnan(_761) ? 0.0 : max(_761, 0.0));
    float _768 = exp2(log2(isnan(1.0) ? _4279 : (isnan(_4279) ? 1.0 : min(_4279, 1.0))) * 4.0);
    float _794 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    vec4 _799 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _801 = _799.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1097 = sqrt(((_301 * _301) + (_302 * _302)) + (_303 * _303));
        float _1103 = (cbMatDynParam._m0[5u].x * _1097) + cbMatDynParam._m0[5u].y;
        float _4290 = isnan(0.0) ? _1103 : (isnan(_1103) ? 0.0 : max(_1103, 0.0));
        float _1104 = isnan(1.0) ? _4290 : (isnan(_4290) ? 1.0 : min(_4290, 1.0));
        float _1108 = (cbMatDynParam._m0[5u].z * _1097) + cbMatDynParam._m0[5u].w;
        float _4301 = isnan(0.0) ? _1108 : (isnan(_1108) ? 0.0 : max(_1108, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4301 : (isnan(_4301) ? 1.0 : min(_4301, 1.0))) - _1104)) + _1104) < ((_801 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _812 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _813 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _815 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _817 = _815.w;
    float _835 = fma(_639, cbSceneParam._m0[5u].z, fma(_638, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _637));
    float _838 = fma(_639, cbSceneParam._m0[6u].z, fma(_638, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _637));
    float _841 = fma(_639, cbSceneParam._m0[7u].z, fma(_638, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _637));
    vec4 _843 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _845 = _843.x;
    float _857 = (((_843.y - _641) + (_843.w * _641)) * cbMtdParam._m0[3u].x) + _641;
    vec4 _858 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _874 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3(cbMtdParam._m0[3u].x * (_845 * _845)), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * _858.z;
    float _882 = (((cbMatDynParam._m0[15u].x - _645) * cbMatDynParam._m0[15u].w) * _874) + _645;
    float _890 = ((_874 * cbMatDynParam._m0[16u].z) * (cbMatDynParam._m0[16u].x - _857)) + _857;
    uint _914 = uint(roundEven(NORMAL.w)) * 13u;
    uint _915 = _914 + 9u;
    uint _916 = _915 + uint(cbMatDynParam._m0[0u].w);
    float _922 = (cbMtdParam._m0[0u].x * _653) * cbInstanceData._m0[_916].x;
    float _923 = (cbMtdParam._m0[0u].y * _654) * cbInstanceData._m0[_916].y;
    float _924 = (cbMtdParam._m0[0u].z * _655) * cbInstanceData._m0[_916].z;
    float _4312 = isnan(0.0) ? _922 : (isnan(_922) ? 0.0 : max(_922, 0.0));
    float _925 = isnan(1.0) ? _4312 : (isnan(_4312) ? 1.0 : min(_4312, 1.0));
    float _4323 = isnan(0.0) ? _923 : (isnan(_923) ? 0.0 : max(_923, 0.0));
    float _926 = isnan(1.0) ? _4323 : (isnan(_4323) ? 1.0 : min(_4323, 1.0));
    float _4334 = isnan(0.0) ? _924 : (isnan(_924) ? 0.0 : max(_924, 0.0));
    float _927 = isnan(1.0) ? _4334 : (isnan(_4334) ? 1.0 : min(_4334, 1.0));
    vec4 _928 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _933 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _944 = (((_933.x - _882) + (_933.w * _882)) * cbMtdParam._m0[3u].x) + _882;
    float _957 = (cbMtdParam._m0[3u].x * (((_925 * _817) - _925) + _928.x)) + _925;
    float _958 = (cbMtdParam._m0[3u].x * (((_926 * _817) - _926) + _928.y)) + _926;
    float _959 = (cbMtdParam._m0[3u].x * (((_927 * _817) - _927) + _928.z)) + _927;
    vec4 _960 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _973 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3((_882 * (_653 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625, (_882 * (_654 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625, (_882 * (_655 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * _960.z;
    float _977 = _973 * cbMatDynParam._m0[13u].w;
    float _987 = (_977 * (cbMatDynParam._m0[13u].x - _957)) + _957;
    float _988 = (_977 * (cbMatDynParam._m0[13u].y - _958)) + _958;
    float _989 = (_977 * (cbMatDynParam._m0[13u].z - _959)) + _959;
    float _997 = ((_973 * cbMatDynParam._m0[15u].w) * (cbMatDynParam._m0[15u].x - _944)) + _944;
    float _998 = 1.0 - _997;
    float _999 = _998 * _987;
    float _1000 = _998 * _988;
    float _1001 = _998 * _989;
    float _1005 = (_987 + (-0.039999999105930328369140625)) * _997;
    float _1006 = (_988 + (-0.039999999105930328369140625)) * _997;
    float _1007 = (_989 + (-0.039999999105930328369140625)) * _997;
    float _1008 = _1005 + 0.039999999105930328369140625;
    float _1009 = _1006 + 0.039999999105930328369140625;
    float _1010 = _1007 + 0.039999999105930328369140625;
    vec4 _1019 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _812, cbSceneParam._m0[86u].y * _813));
    float _1022 = _1019.x * TEXCOORD_4;
    float _1023 = _666 * 2.0;
    float _1027 = (_1023 * _637) - _663;
    float _1028 = (_1023 * _638) - _664;
    float _1029 = (_1023 * _639) - _665;
    float _1030 = abs(_748);
    float _4345 = isnan(0.0) ? _1030 : (isnan(_1030) ? 0.0 : max(_1030, 0.0));
    float _1032 = sqrt(_890);
    float _1043 = exp2((_1032 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4345 : (isnan(_4345) ? 1.0 : min(_4345, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1032 * 3.0));
    float _1049 = (1.0 - _1043) * ((_1032 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1050 = _1043 * _1032;
    float _1078 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1082 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1086 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1417;
    float _1419;
    float _1420;
    float _1421;
    float _1422;
    float _1423;
    float _1424;
    float _1425;
    float _1426;
    float _1427;
    float _1428;
    float _1429;
    float _1430;
    float _1431;
    float _1432;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1142 = fma(_1086, cbModelParam._m0[26u].z, fma(_1082, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1078));
        float _1146 = fma(_1086, cbModelParam._m0[27u].z, fma(_1082, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1078));
        float _1150 = fma(_1086, cbModelParam._m0[28u].z, fma(_1082, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1078));
        float _1175 = _1078 + _637;
        float _1176 = _1082 + _638;
        float _1177 = _1086 + _639;
        float _1187 = fma(_1177, cbModelParam._m0[26u].z, fma(_1176, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1175)) - _1142;
        float _1188 = fma(_1177, cbModelParam._m0[27u].z, fma(_1176, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1175)) - _1146;
        float _1189 = fma(_1177, cbModelParam._m0[28u].z, fma(_1176, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1175)) - _1150;
        float _1193 = inversesqrt(dot(vec3(_1187, _1188, _1189), vec3(_1187, _1188, _1189)));
        float _1206 = ((_1193 * _1187) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1142 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1207 = ((_1193 * _1188) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1146 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1208 = ((_1193 * _1189) / cbModelParam._m0[34u].z) + ((((((_1150 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1211 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1206, _1207, _1208), 0.0);
        vec4 _1218 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1206, _1207, _1208), 0.0);
        vec4 _1225 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1206, _1207, _1208), 0.0);
        vec4 _1232 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1206, _1207, _1208), 0.0);
        float _1245 = exp2((_1211.w + (-0.5)) * 20.0) * 2.0;
        float _1246 = _1245 * (_1211.x + (-0.5));
        float _1247 = _1245 * (_1211.y + (-0.5));
        float _1248 = _1245 * (_1211.z + (-0.5));
        float _1255 = exp2((_1218.w + (-0.5)) * 20.0) * 2.0;
        float _1256 = _1255 * (_1218.x + (-0.5));
        float _1257 = _1255 * (_1218.y + (-0.5));
        float _1258 = _1255 * (_1218.z + (-0.5));
        float _1265 = exp2((_1225.w + (-0.5)) * 20.0) * 2.0;
        float _1266 = _1265 * (_1225.x + (-0.5));
        float _1267 = _1265 * (_1225.y + (-0.5));
        float _1268 = _1265 * (_1225.z + (-0.5));
        float _1275 = exp2((_1232.w + (-0.5)) * 20.0) * 2.0;
        float _1276 = _1275 * (_1232.x + (-0.5));
        float _1277 = _1275 * (_1232.y + (-0.5));
        float _1278 = _1275 * (_1232.z + (-0.5));
        float _1279 = isnan(0.0) ? _1276 : (isnan(_1276) ? 0.0 : max(_1276, 0.0));
        float _1280 = isnan(0.0) ? _1277 : (isnan(_1277) ? 0.0 : max(_1277, 0.0));
        float _1281 = isnan(0.0) ? _1278 : (isnan(_1278) ? 0.0 : max(_1278, 0.0));
        float _1282 = _1246 * 0.5;
        float _1283 = _1256 * 0.5;
        float _1284 = _1266 * 0.5;
        float _1285 = dot(vec3(_1282, _1283, _1284), vec3(_1282, _1283, _1284));
        float _1290 = (_1285 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1285);
        float _1299 = (dot(vec3(_637, _638, _639), vec3(_1290 * _1282, _1290 * _1283, _1290 * _1284)) + 1.0) * 0.5;
        float _4371 = isnan(0.0) ? _1299 : (isnan(_1299) ? 0.0 : max(_1299, 0.0));
        float _1309 = sqrt(((_1283 * _1283) + (_1282 * _1282)) + (_1284 * _1284)) / (_1279 + 9.9999997473787516355514526367188e-06);
        float _4382 = isnan(0.0) ? _1309 : (isnan(_1309) ? 0.0 : max(_1309, 0.0));
        float _1310 = isnan(1.0) ? _4382 : (isnan(_4382) ? 1.0 : min(_4382, 1.0));
        float _1311 = _1310 * 2.0;
        float _1315 = (1.0 - _1310) / (_1310 + 1.0);
        float _4393 = isnan(0.0) ? _1315 : (isnan(_1315) ? 0.0 : max(_1315, 0.0));
        float _1316 = isnan(1.0) ? _4393 : (isnan(_4393) ? 1.0 : min(_4393, 1.0));
        float _1325 = ((((1.0 - _1316) * (_1311 + 2.0)) * exp2(log2(isnan(1.0) ? _4371 : (isnan(_4371) ? 1.0 : min(_4371, 1.0))) * (_1311 + 1.0))) + _1316) * _1279;
        float _1326 = _1247 * 0.5;
        float _1327 = _1257 * 0.5;
        float _1328 = _1267 * 0.5;
        float _1329 = dot(vec3(_1326, _1327, _1328), vec3(_1326, _1327, _1328));
        float _1334 = (_1329 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1329);
        float _1342 = (dot(vec3(_637, _638, _639), vec3(_1334 * _1326, _1334 * _1327, _1334 * _1328)) + 1.0) * 0.5;
        float _4404 = isnan(0.0) ? _1342 : (isnan(_1342) ? 0.0 : max(_1342, 0.0));
        float _1351 = sqrt(((_1327 * _1327) + (_1326 * _1326)) + (_1328 * _1328)) / (_1280 + 9.9999997473787516355514526367188e-06);
        float _4415 = isnan(0.0) ? _1351 : (isnan(_1351) ? 0.0 : max(_1351, 0.0));
        float _1352 = isnan(1.0) ? _4415 : (isnan(_4415) ? 1.0 : min(_4415, 1.0));
        float _1353 = _1352 * 2.0;
        float _1357 = (1.0 - _1352) / (_1352 + 1.0);
        float _4426 = isnan(0.0) ? _1357 : (isnan(_1357) ? 0.0 : max(_1357, 0.0));
        float _1358 = isnan(1.0) ? _4426 : (isnan(_4426) ? 1.0 : min(_4426, 1.0));
        float _1367 = ((((1.0 - _1358) * (_1353 + 2.0)) * exp2(log2(isnan(1.0) ? _4404 : (isnan(_4404) ? 1.0 : min(_4404, 1.0))) * (_1353 + 1.0))) + _1358) * _1280;
        float _1368 = _1248 * 0.5;
        float _1369 = _1258 * 0.5;
        float _1370 = _1268 * 0.5;
        float _1371 = dot(vec3(_1368, _1369, _1370), vec3(_1368, _1369, _1370));
        float _1376 = (_1371 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1371);
        float _1384 = (dot(vec3(_637, _638, _639), vec3(_1376 * _1368, _1376 * _1369, _1376 * _1370)) + 1.0) * 0.5;
        float _4437 = isnan(0.0) ? _1384 : (isnan(_1384) ? 0.0 : max(_1384, 0.0));
        float _1393 = sqrt(((_1369 * _1369) + (_1368 * _1368)) + (_1370 * _1370)) / (_1281 + 9.9999997473787516355514526367188e-06);
        float _4448 = isnan(0.0) ? _1393 : (isnan(_1393) ? 0.0 : max(_1393, 0.0));
        float _1394 = isnan(1.0) ? _4448 : (isnan(_4448) ? 1.0 : min(_4448, 1.0));
        float _1395 = _1394 * 2.0;
        float _1399 = (1.0 - _1394) / (_1394 + 1.0);
        float _4459 = isnan(0.0) ? _1399 : (isnan(_1399) ? 0.0 : max(_1399, 0.0));
        float _1400 = isnan(1.0) ? _4459 : (isnan(_4459) ? 1.0 : min(_4459, 1.0));
        float _1409 = ((((1.0 - _1400) * (_1395 + 2.0)) * exp2(log2(isnan(1.0) ? _4437 : (isnan(_4437) ? 1.0 : min(_4437, 1.0))) * (_1395 + 1.0))) + _1400) * _1281;
        _1417 = _1248;
        _1419 = _1247;
        _1420 = _1246;
        _1421 = _1258;
        _1422 = _1257;
        _1423 = _1256;
        _1424 = _1268;
        _1425 = _1267;
        _1426 = _1266;
        _1427 = _1281;
        _1428 = _1280;
        _1429 = _1279;
        _1430 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1325 : (isnan(_1325) ? 0.0 : max(_1325, 0.0)));
        _1431 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1367 : (isnan(_1367) ? 0.0 : max(_1367, 0.0)));
        _1432 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1409 : (isnan(_1409) ? 0.0 : max(_1409, 0.0)));
    }
    else
    {
        _1417 = _1418;
        _1419 = _1418;
        _1420 = _1418;
        _1421 = _1418;
        _1422 = _1418;
        _1423 = _1418;
        _1424 = _1418;
        _1425 = _1418;
        _1426 = _1418;
        _1427 = _1418;
        _1428 = _1418;
        _1429 = _1418;
        _1430 = 0.0;
        _1431 = 0.0;
        _1432 = 0.0;
    }
    float _1730;
    float _1731;
    float _1732;
    float _1733;
    float _1734;
    float _1735;
    float _1736;
    float _1737;
    float _1738;
    float _1739;
    float _1740;
    float _1741;
    float _1742;
    float _1743;
    float _1744;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1461 = fma(_1086, cbModelParam._m0[30u].z, fma(_1082, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1078));
        float _1465 = fma(_1086, cbModelParam._m0[31u].z, fma(_1082, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1078));
        float _1469 = fma(_1086, cbModelParam._m0[32u].z, fma(_1082, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1078));
        float _1492 = _1078 + _637;
        float _1493 = _1082 + _638;
        float _1494 = _1086 + _639;
        float _1504 = fma(_1494, cbModelParam._m0[30u].z, fma(_1493, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1492)) - _1461;
        float _1505 = fma(_1494, cbModelParam._m0[31u].z, fma(_1493, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1492)) - _1465;
        float _1506 = fma(_1494, cbModelParam._m0[32u].z, fma(_1493, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1492)) - _1469;
        float _1510 = inversesqrt(dot(vec3(_1504, _1505, _1506), vec3(_1504, _1505, _1506)));
        float _1523 = ((_1510 * _1504) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1461 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1524 = ((_1510 * _1505) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1465 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1525 = ((_1510 * _1506) / cbModelParam._m0[35u].z) + ((((((_1469 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1527 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1523, _1524, _1525), 0.0);
        vec4 _1534 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1523, _1524, _1525), 0.0);
        vec4 _1541 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1523, _1524, _1525), 0.0);
        vec4 _1548 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1523, _1524, _1525), 0.0);
        float _1560 = exp2((_1527.w + (-0.5)) * 20.0) * 2.0;
        float _1561 = _1560 * (_1527.x + (-0.5));
        float _1562 = _1560 * (_1527.y + (-0.5));
        float _1563 = _1560 * (_1527.z + (-0.5));
        float _1570 = exp2((_1534.w + (-0.5)) * 20.0) * 2.0;
        float _1571 = _1570 * (_1534.x + (-0.5));
        float _1572 = _1570 * (_1534.y + (-0.5));
        float _1573 = _1570 * (_1534.z + (-0.5));
        float _1580 = exp2((_1541.w + (-0.5)) * 20.0) * 2.0;
        float _1581 = _1580 * (_1541.x + (-0.5));
        float _1582 = _1580 * (_1541.y + (-0.5));
        float _1583 = _1580 * (_1541.z + (-0.5));
        float _1590 = exp2((_1548.w + (-0.5)) * 20.0) * 2.0;
        float _1591 = _1590 * (_1548.x + (-0.5));
        float _1592 = _1590 * (_1548.y + (-0.5));
        float _1593 = _1590 * (_1548.z + (-0.5));
        float _1594 = isnan(0.0) ? _1591 : (isnan(_1591) ? 0.0 : max(_1591, 0.0));
        float _1595 = isnan(0.0) ? _1592 : (isnan(_1592) ? 0.0 : max(_1592, 0.0));
        float _1596 = isnan(0.0) ? _1593 : (isnan(_1593) ? 0.0 : max(_1593, 0.0));
        float _1597 = _1561 * 0.5;
        float _1598 = _1571 * 0.5;
        float _1599 = _1581 * 0.5;
        float _1600 = dot(vec3(_1597, _1598, _1599), vec3(_1597, _1598, _1599));
        float _1605 = (_1600 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1600);
        float _1613 = (dot(vec3(_637, _638, _639), vec3(_1605 * _1597, _1605 * _1598, _1605 * _1599)) + 1.0) * 0.5;
        float _4500 = isnan(0.0) ? _1613 : (isnan(_1613) ? 0.0 : max(_1613, 0.0));
        float _1622 = sqrt(((_1598 * _1598) + (_1597 * _1597)) + (_1599 * _1599)) / (_1594 + 9.9999997473787516355514526367188e-06);
        float _4511 = isnan(0.0) ? _1622 : (isnan(_1622) ? 0.0 : max(_1622, 0.0));
        float _1623 = isnan(1.0) ? _4511 : (isnan(_4511) ? 1.0 : min(_4511, 1.0));
        float _1624 = _1623 * 2.0;
        float _1628 = (1.0 - _1623) / (_1623 + 1.0);
        float _4522 = isnan(0.0) ? _1628 : (isnan(_1628) ? 0.0 : max(_1628, 0.0));
        float _1629 = isnan(1.0) ? _4522 : (isnan(_4522) ? 1.0 : min(_4522, 1.0));
        float _1638 = ((((1.0 - _1629) * (_1624 + 2.0)) * exp2(log2(isnan(1.0) ? _4500 : (isnan(_4500) ? 1.0 : min(_4500, 1.0))) * (_1624 + 1.0))) + _1629) * _1594;
        float _1639 = _1562 * 0.5;
        float _1640 = _1572 * 0.5;
        float _1641 = _1582 * 0.5;
        float _1642 = dot(vec3(_1639, _1640, _1641), vec3(_1639, _1640, _1641));
        float _1647 = (_1642 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1642);
        float _1655 = (dot(vec3(_637, _638, _639), vec3(_1647 * _1639, _1647 * _1640, _1647 * _1641)) + 1.0) * 0.5;
        float _4533 = isnan(0.0) ? _1655 : (isnan(_1655) ? 0.0 : max(_1655, 0.0));
        float _1664 = sqrt(((_1640 * _1640) + (_1639 * _1639)) + (_1641 * _1641)) / (_1595 + 9.9999997473787516355514526367188e-06);
        float _4544 = isnan(0.0) ? _1664 : (isnan(_1664) ? 0.0 : max(_1664, 0.0));
        float _1665 = isnan(1.0) ? _4544 : (isnan(_4544) ? 1.0 : min(_4544, 1.0));
        float _1666 = _1665 * 2.0;
        float _1670 = (1.0 - _1665) / (_1665 + 1.0);
        float _4555 = isnan(0.0) ? _1670 : (isnan(_1670) ? 0.0 : max(_1670, 0.0));
        float _1671 = isnan(1.0) ? _4555 : (isnan(_4555) ? 1.0 : min(_4555, 1.0));
        float _1680 = ((((1.0 - _1671) * (_1666 + 2.0)) * exp2(log2(isnan(1.0) ? _4533 : (isnan(_4533) ? 1.0 : min(_4533, 1.0))) * (_1666 + 1.0))) + _1671) * _1595;
        float _1681 = _1563 * 0.5;
        float _1682 = _1573 * 0.5;
        float _1683 = _1583 * 0.5;
        float _1684 = dot(vec3(_1681, _1682, _1683), vec3(_1681, _1682, _1683));
        float _1689 = (_1684 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1684);
        float _1697 = (dot(vec3(_637, _638, _639), vec3(_1689 * _1681, _1689 * _1682, _1689 * _1683)) + 1.0) * 0.5;
        float _4566 = isnan(0.0) ? _1697 : (isnan(_1697) ? 0.0 : max(_1697, 0.0));
        float _1706 = sqrt(((_1682 * _1682) + (_1681 * _1681)) + (_1683 * _1683)) / (_1596 + 9.9999997473787516355514526367188e-06);
        float _4577 = isnan(0.0) ? _1706 : (isnan(_1706) ? 0.0 : max(_1706, 0.0));
        float _1707 = isnan(1.0) ? _4577 : (isnan(_4577) ? 1.0 : min(_4577, 1.0));
        float _1708 = _1707 * 2.0;
        float _1712 = (1.0 - _1707) / (_1707 + 1.0);
        float _4588 = isnan(0.0) ? _1712 : (isnan(_1712) ? 0.0 : max(_1712, 0.0));
        float _1713 = isnan(1.0) ? _4588 : (isnan(_4588) ? 1.0 : min(_4588, 1.0));
        float _1722 = ((((1.0 - _1713) * (_1708 + 2.0)) * exp2(log2(isnan(1.0) ? _4566 : (isnan(_4566) ? 1.0 : min(_4566, 1.0))) * (_1708 + 1.0))) + _1713) * _1596;
        _1730 = _1563;
        _1731 = _1562;
        _1732 = _1561;
        _1733 = _1573;
        _1734 = _1572;
        _1735 = _1571;
        _1736 = _1583;
        _1737 = _1582;
        _1738 = _1581;
        _1739 = _1596;
        _1740 = _1595;
        _1741 = _1594;
        _1742 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1638 : (isnan(_1638) ? 0.0 : max(_1638, 0.0)));
        _1743 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1680 : (isnan(_1680) ? 0.0 : max(_1680, 0.0)));
        _1744 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1722 : (isnan(_1722) ? 0.0 : max(_1722, 0.0)));
    }
    else
    {
        _1730 = _1418;
        _1731 = _1418;
        _1732 = _1418;
        _1733 = _1418;
        _1734 = _1418;
        _1735 = _1418;
        _1736 = _1418;
        _1737 = _1418;
        _1738 = _1418;
        _1739 = _1418;
        _1740 = _1418;
        _1741 = _1418;
        _1742 = 0.0;
        _1743 = 0.0;
        _1744 = 0.0;
    }
    float _1754 = (cbModelParam._m0[1u].x * (_1742 - _1430)) + _1430;
    float _1755 = (cbModelParam._m0[1u].x * (_1743 - _1431)) + _1431;
    float _1756 = (cbModelParam._m0[1u].x * (_1744 - _1432)) + _1432;
    float _1777 = fma(_1756, cbSceneParam._m0[89u].z, fma(_1755, cbSceneParam._m0[89u].y, _1754 * cbSceneParam._m0[89u].x));
    float _1780 = fma(_1756, cbSceneParam._m0[90u].z, fma(_1755, cbSceneParam._m0[90u].y, _1754 * cbSceneParam._m0[90u].x));
    float _1783 = fma(_1756, cbSceneParam._m0[91u].z, fma(_1755, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1754));
    float _1798 = _1027 * 0.5;
    float _1799 = _1028 * 0.5;
    float _1800 = _1029 * 0.5;
    float _1801 = dot(vec4(_1798, _1799, _1800, 1.0), vec4(_1732, _1735, _1738, _1741));
    float _1804 = dot(vec4(_1798, _1799, _1800, 1.0), vec4(_1731, _1734, _1737, _1740));
    float _1807 = dot(vec4(_1798, _1799, _1800, 1.0), vec4(_1730, _1733, _1736, _1739));
    float _1838;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1814 = dot(vec4(_1798, _1799, _1800, 1.0), vec4(_1417, _1421, _1424, _1427));
        float _1818 = dot(vec4(_1798, _1799, _1800, 1.0), vec4(_1419, _1422, _1425, _1428));
        float _1822 = dot(vec4(_1798, _1799, _1800, 1.0), vec4(_1420, _1423, _1426, _1429));
        float _1829 = dot(vec4(cbModelParam._m0[39u]), vec4(_1798, _1799, _1800, 1.0));
        _1838 = dot(vec3(isnan(0.0) ? _1822 : (isnan(_1822) ? 0.0 : max(_1822, 0.0)), isnan(0.0) ? _1818 : (isnan(_1818) ? 0.0 : max(_1818, 0.0)), isnan(0.0) ? _1814 : (isnan(_1814) ? 0.0 : max(_1814, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1829) ? 0.0 : (isnan(0.0) ? _1829 : max(0.0, _1829))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1838 = 1.0;
    }
    float _1849;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1840 = dot(vec4(cbModelParam._m0[40u]), vec4(_1798, _1799, _1800, 1.0));
        _1849 = dot(vec3(isnan(0.0) ? _1801 : (isnan(_1801) ? 0.0 : max(_1801, 0.0)), isnan(0.0) ? _1804 : (isnan(_1804) ? 0.0 : max(_1804, 0.0)), isnan(0.0) ? _1807 : (isnan(_1807) ? 0.0 : max(_1807, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1840) ? 0.0 : (isnan(0.0) ? _1840 : max(0.0, _1840))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1849 = 1.0;
    }
    float _1853 = (_1849 * cbModelParam._m0[1u].x) + (_1838 * (1.0 - cbModelParam._m0[1u].x));
    float _1863 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _890);
    float _1864 = isnan(_1863) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1863 : min(cbModelParam._m0[25u].z, _1863));
    float _1944;
    float _1946;
    float _1948;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1911 = fma(_1086, cbModelParam._m0[13u].z, fma(_1082, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1078)) + cbModelParam._m0[13u].w;
        float _1915 = fma(_1086, cbModelParam._m0[14u].z, fma(_1082, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1078)) + cbModelParam._m0[14u].w;
        float _1919 = fma(_1086, cbModelParam._m0[15u].z, fma(_1082, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1078)) + cbModelParam._m0[15u].w;
        float _1922 = fma(_1029, cbModelParam._m0[13u].z, fma(_1028, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1027));
        float _1925 = fma(_1029, cbModelParam._m0[14u].z, fma(_1028, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1027));
        float _1928 = fma(_1029, cbModelParam._m0[15u].z, fma(_1028, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1027));
        float _1956;
        if (_1922 > 0.0)
        {
            _1956 = abs((1.0 - _1911) / _1922);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1922 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1911 + 1.0) / _1922);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1956 = frontier_phi_19_17_ladder;
        }
        float _2129;
        if (_1925 > 0.0)
        {
            _2129 = abs((1.0 - _1915) / _1925);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1925 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1915 + 1.0) / _1925);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2129 = frontier_phi_28_24_ladder;
        }
        float _2424;
        if (_1928 > 0.0)
        {
            _2424 = abs((1.0 - _1919) / _1928);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1928 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1919 + 1.0) / _1928);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2424 = frontier_phi_40_35_ladder;
        }
        float _2426 = isnan(_2129) ? _1956 : (isnan(_1956) ? _2129 : min(_1956, _2129));
        float _2427 = isnan(_2424) ? _2426 : (isnan(_2426) ? _2424 : min(_2426, _2424));
        float _2431 = (_2427 * _1922) + _1911;
        float _2432 = (_2427 * _1925) + _1915;
        float _2433 = (_2427 * _1928) + _1919;
        float _2434 = _2427 * 9.9999997473787516355514526367188e-05;
        float _2436 = (-1.0) - _2434;
        float _2438 = _2434 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2433 > _2438) || ((_2433 < _2436) || ((_2432 > _2438) || ((_2432 < _2436) || ((_2431 < _2436) || (_2431 > _2438))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2578 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2433, cbModelParam._m0[9u].z, fma(_2432, cbModelParam._m0[9u].y, _2431 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2433, cbModelParam._m0[10u].z, fma(_2432, cbModelParam._m0[10u].y, _2431 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2433, cbModelParam._m0[11u].z, fma(_2432, cbModelParam._m0[11u].y, _2431 * cbModelParam._m0[11u].x))), _1864);
            frontier_phi_18_40_ladder = _2578.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2578.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2578.x * cbModelParam._m0[1u].y;
        }
        _1944 = frontier_phi_18_40_ladder_2;
        _1946 = frontier_phi_18_40_ladder_1;
        _1948 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1932 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1027, _1028, _1029), _1864);
        _1944 = _1932.x * cbModelParam._m0[1u].y;
        _1946 = _1932.y * cbModelParam._m0[1u].y;
        _1948 = _1932.z * cbModelParam._m0[1u].y;
    }
    float _1952 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _890);
    float _1953 = isnan(_1952) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1952 : min(cbModelParam._m0[25u].w, _1952));
    float _2044;
    float _2046;
    float _2048;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2008 = fma(_1086, cbModelParam._m0[21u].z, fma(_1082, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1078)) + cbModelParam._m0[21u].w;
        float _2012 = fma(_1086, cbModelParam._m0[22u].z, fma(_1082, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1078)) + cbModelParam._m0[22u].w;
        float _2016 = fma(_1086, cbModelParam._m0[23u].z, fma(_1082, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1078)) + cbModelParam._m0[23u].w;
        float _2019 = fma(_1029, cbModelParam._m0[21u].z, fma(_1028, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1027));
        float _2022 = fma(_1029, cbModelParam._m0[22u].z, fma(_1028, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1027));
        float _2025 = fma(_1029, cbModelParam._m0[23u].z, fma(_1028, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1027));
        float _2134;
        if (_2019 > 0.0)
        {
            _2134 = abs((1.0 - _2008) / _2019);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_2019 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_2008 + 1.0) / _2019);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _2134 = frontier_phi_30_26_ladder;
        }
        float _2451;
        if (_2022 > 0.0)
        {
            _2451 = abs((1.0 - _2012) / _2022);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_2022 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_2012 + 1.0) / _2022);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2451 = frontier_phi_42_37_ladder;
        }
        float _2789;
        if (_2025 > 0.0)
        {
            _2789 = abs((1.0 - _2016) / _2025);
        }
        else
        {
            float frontier_phi_52_49_ladder;
            if (_2025 < 0.0)
            {
                frontier_phi_52_49_ladder = abs((_2016 + 1.0) / _2025);
            }
            else
            {
                frontier_phi_52_49_ladder = 5000.0;
            }
            _2789 = frontier_phi_52_49_ladder;
        }
        float _2791 = isnan(_2451) ? _2134 : (isnan(_2134) ? _2451 : min(_2134, _2451));
        float _2792 = isnan(_2789) ? _2791 : (isnan(_2791) ? _2789 : min(_2791, _2789));
        float _2796 = (_2792 * _2019) + _2008;
        float _2797 = (_2792 * _2022) + _2012;
        float _2798 = (_2792 * _2025) + _2016;
        float _2799 = _2792 * 9.9999997473787516355514526367188e-05;
        float _2800 = (-1.0) - _2799;
        float _2802 = _2799 + 1.0;
        float frontier_phi_27_52_ladder;
        float frontier_phi_27_52_ladder_1;
        float frontier_phi_27_52_ladder_2;
        if ((_2798 > _2802) || ((_2798 < _2800) || ((_2797 > _2802) || ((_2797 < _2800) || ((_2796 < _2800) || (_2796 > _2802))))))
        {
            frontier_phi_27_52_ladder = 0.0;
            frontier_phi_27_52_ladder_1 = 0.0;
            frontier_phi_27_52_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2920 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2798, cbModelParam._m0[17u].z, fma(_2797, cbModelParam._m0[17u].y, _2796 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2798, cbModelParam._m0[18u].z, fma(_2797, cbModelParam._m0[18u].y, _2796 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2798, cbModelParam._m0[19u].z, fma(_2797, cbModelParam._m0[19u].y, _2796 * cbModelParam._m0[19u].x))), _1953);
            frontier_phi_27_52_ladder = _2920.z * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_1 = _2920.y * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_2 = _2920.x * cbModelParam._m0[1u].z;
        }
        _2044 = frontier_phi_27_52_ladder_2;
        _2046 = frontier_phi_27_52_ladder_1;
        _2048 = frontier_phi_27_52_ladder;
    }
    else
    {
        vec4 _2028 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1027, _1028, _1029), _1953);
        _2044 = _2028.x * cbModelParam._m0[1u].z;
        _2046 = _2028.y * cbModelParam._m0[1u].z;
        _2048 = _2028.z * cbModelParam._m0[1u].z;
    }
    float _2061 = (((_1049 * _1008) + _1050) * _1022) * ((cbModelParam._m0[1u].w * (_2044 - _1944)) + _1944);
    float _2063 = (((_1049 * _1009) + _1050) * _1022) * ((cbModelParam._m0[1u].w * (_2046 - _1946)) + _1946);
    float _2065 = (((_1049 * _1010) + _1050) * _1022) * ((cbModelParam._m0[1u].w * (_2048 - _1948)) + _1948);
    float _2068 = fma(_2065, cbSceneParam._m0[89u].z, fma(_2063, cbSceneParam._m0[89u].y, _2061 * cbSceneParam._m0[89u].x));
    float _2071 = fma(_2065, cbSceneParam._m0[90u].z, fma(_2063, cbSceneParam._m0[90u].y, _2061 * cbSceneParam._m0[90u].x));
    float _2074 = fma(_2065, cbSceneParam._m0[91u].z, fma(_2063, cbSceneParam._m0[91u].y, _2061 * cbSceneParam._m0[91u].x));
    float _2108 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2112 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2116 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2120 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2121 = _2108 / _2120;
    float _2122 = _2112 / _2120;
    float _2123 = _2116 / _2120;
    float _2270;
    float _2271;
    float _2272;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2150 = ((uint(_2123 > cbSceneParam._m0[59u].y) + uint(_2123 > cbSceneParam._m0[59u].x)) + uint(_2123 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2151 = _2150 + 43u;
        uint _2159 = _2150 + 44u;
        uint _2167 = _2150 + 45u;
        uint _2175 = _2150 + 46u;
        float _2186 = fma(_2120, cbSceneParam._m0[_2151].w, fma(_2116, cbSceneParam._m0[_2151].z, fma(_2112, cbSceneParam._m0[_2151].y, _2108 * cbSceneParam._m0[_2151].x)));
        float _2190 = fma(_2120, cbSceneParam._m0[_2159].w, fma(_2116, cbSceneParam._m0[_2159].z, fma(_2112, cbSceneParam._m0[_2159].y, _2108 * cbSceneParam._m0[_2159].x)));
        float _2198 = fma(_2120, cbSceneParam._m0[_2175].w, fma(_2116, cbSceneParam._m0[_2175].z, fma(_2112, cbSceneParam._m0[_2175].y, _2108 * cbSceneParam._m0[_2175].x)));
        float _2203 = cbSceneParam._m0[33u].z * _2198;
        float _2205 = cbSceneParam._m0[33u].w * _2198;
        float _2208 = fma(_2120, cbSceneParam._m0[_2167].w, fma(_2116, cbSceneParam._m0[_2167].z, fma(_2112, cbSceneParam._m0[_2167].y, _2108 * cbSceneParam._m0[_2167].x))) / _2198;
        float _2256 = (cbSceneParam._m0[33u].x - sqrt(((_2122 * _2122) + (_2121 * _2121)) + (_2123 * _2123))) * cbSceneParam._m0[33u].y;
        float _4714 = isnan(0.0) ? _2256 : (isnan(_2256) ? 0.0 : max(_2256, 0.0));
        float _2263 = (isnan(1.0) ? _4714 : (isnan(_4714) ? 1.0 : min(_4714, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2203 + _2186) / _2198, (_2205 + _2190) / _2198), _2208), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2205 + _2186) / _2198, (_2190 - _2203) / _2198), _2208), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2186 - _2203) / _2198, (_2190 - _2205) / _2198), _2208), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2186 - _2205) / _2198, (_2203 + _2190) / _2198), _2208), 0.0)).x), vec4(0.25)));
        _2270 = 1.0 - (_2263 * cbSceneParam._m0[34u].x);
        _2271 = 1.0 - (_2263 * cbSceneParam._m0[34u].y);
        _2272 = 1.0 - (_2263 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2270 = 1.0;
        _2271 = 1.0;
        _2272 = 1.0;
    }
    float _2336;
    float _2338;
    float _2340;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2324 = fma(_2120, cbSceneParam._m0[63u].w, fma(_2116, cbSceneParam._m0[63u].z, fma(_2112, cbSceneParam._m0[63u].y, _2108 * cbSceneParam._m0[63u].x)));
        float _2325 = fma(_2120, cbSceneParam._m0[60u].w, fma(_2116, cbSceneParam._m0[60u].z, fma(_2112, cbSceneParam._m0[60u].y, _2108 * cbSceneParam._m0[60u].x))) / _2324;
        float _2326 = fma(_2120, cbSceneParam._m0[61u].w, fma(_2116, cbSceneParam._m0[61u].z, fma(_2112, cbSceneParam._m0[61u].y, _2108 * cbSceneParam._m0[61u].x))) / _2324;
        float frontier_phi_39_38_ladder;
        float frontier_phi_39_38_ladder_1;
        float frontier_phi_39_38_ladder_2;
        if ((((_2325 >= cbSceneParam._m0[64u].x) && (_2326 >= cbSceneParam._m0[64u].y)) && (_2325 <= cbSceneParam._m0[64u].z)) && (_2326 <= cbSceneParam._m0[64u].w))
        {
            float _2464 = fma(_2120, cbSceneParam._m0[62u].w, fma(_2116, cbSceneParam._m0[62u].z, fma(_2112, cbSceneParam._m0[62u].y, _2108 * cbSceneParam._m0[62u].x))) / _2324;
            float _2468 = isnan(cbSceneParam._m0[41u].w) ? _2464 : (isnan(_2464) ? cbSceneParam._m0[41u].w : max(_2464, cbSceneParam._m0[41u].w));
            float _2511 = (cbSceneParam._m0[33u].x - sqrt(((_2122 * _2122) + (_2121 * _2121)) + (_2123 * _2123))) * cbSceneParam._m0[33u].y;
            float _4730 = isnan(0.0) ? _2511 : (isnan(_2511) ? 0.0 : max(_2511, 0.0));
            float _2518 = (isnan(1.0) ? _4730 : (isnan(_4730) ? 1.0 : min(_4730, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2325, cbSceneParam._m0[33u].w + _2326), _2468), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2325, _2326 - cbSceneParam._m0[33u].z), _2468), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2325 - cbSceneParam._m0[33u].z, _2326 - cbSceneParam._m0[33u].w), _2468), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2325 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2326), _2468), 0.0)).x), vec4(0.25)));
            float _2522 = 1.0 - (_2518 * cbSceneParam._m0[34u].x);
            float _2523 = 1.0 - (_2518 * cbSceneParam._m0[34u].y);
            float _2524 = 1.0 - (_2518 * cbSceneParam._m0[34u].z);
            frontier_phi_39_38_ladder = isnan(_2523) ? _2271 : (isnan(_2271) ? _2523 : min(_2271, _2523));
            frontier_phi_39_38_ladder_1 = isnan(_2522) ? _2270 : (isnan(_2270) ? _2522 : min(_2270, _2522));
            frontier_phi_39_38_ladder_2 = isnan(_2524) ? _2272 : (isnan(_2272) ? _2524 : min(_2272, _2524));
        }
        else
        {
            frontier_phi_39_38_ladder = _2271;
            frontier_phi_39_38_ladder_1 = _2270;
            frontier_phi_39_38_ladder_2 = _2272;
        }
        _2336 = frontier_phi_39_38_ladder_1;
        _2338 = frontier_phi_39_38_ladder;
        _2340 = frontier_phi_39_38_ladder_2;
    }
    else
    {
        _2336 = _2270;
        _2338 = _2271;
        _2340 = _2272;
    }
    uvec4 _2345 = floatBitsToUint(cbInstanceData._m0[_914 + 5u]);
    uint _2347 = _2345.x * 14u;
    uint _2348 = _2347 + 13u;
    float _2355 = _1022 + (-1.0);
    float _2360 = (cbLight._m0[_2348].x * _2355) + 1.0;
    float _2361 = (cbLight._m0[_2348].y * _2355) + 1.0;
    float _2362 = (cbLight._m0[_2348].z * _2355) + 1.0;
    float _2363 = (cbLight._m0[_2348].w * _2355) + 1.0;
    uint _2364 = _2347 + 5u;
    float _2370 = isnan(1.0) ? _2361 : (isnan(_2361) ? 1.0 : min(_2361, 1.0));
    uint _2374 = _2347 + 4u;
    float _2383 = isnan(1.0) ? _2360 : (isnan(_2360) ? 1.0 : min(_2360, 1.0));
    uint _2387 = _2347 | 1u;
    float _2398 = dot(vec3(cbLight._m0[_2347].xyz), vec3(_637, _638, _639));
    float _2401 = dot(vec3(cbLight._m0[_2387].xyz), vec3(_637, _638, _639));
    float _4766 = isnan(0.0) ? _2398 : (isnan(_2398) ? 0.0 : max(_2398, 0.0));
    float _4777 = isnan(0.0) ? _2401 : (isnan(_2401) ? 0.0 : max(_2401, 0.0));
    float _2406 = (isnan(1.0) ? _4766 : (isnan(_4766) ? 1.0 : min(_4766, 1.0))) * 0.3183098733425140380859375;
    float _2408 = (isnan(1.0) ? _4777 : (isnan(_4777) ? 1.0 : min(_4777, 1.0))) * 0.3183098733425140380859375;
    float _2415 = ((cbLight._m0[_2364].x * _2370) * _2408) + (((cbLight._m0[_2374].x * _2336) * _2383) * _2406);
    float _2416 = ((_2370 * cbLight._m0[_2364].y) * _2408) + (((cbLight._m0[_2374].y * _2338) * _2383) * _2406);
    float _2417 = ((_2370 * cbLight._m0[_2364].z) * _2408) + (((cbLight._m0[_2374].z * _2340) * _2383) * _2406);
    uvec4 _2421 = floatBitsToUint(cbLight._m0[_2347 + 12u]);
    bool _2423 = _2421.x == 0u;
    float _2525;
    float _2527;
    float _2529;
    if (_2423)
    {
        _2525 = _2415;
        _2527 = _2416;
        _2529 = _2417;
    }
    else
    {
        uint _2533 = _2347 + 6u;
        float _2549 = (dot(vec3(cbLight._m0[_2347 + 2u].xyz), vec3(_637, _638, _639)) * 0.5) + 0.5;
        float _2550 = _2549 * _2549;
        float _4788 = isnan(0.0) ? _2550 : (isnan(_2550) ? 0.0 : max(_2550, 0.0));
        float _2551 = isnan(1.0) ? _4788 : (isnan(_4788) ? 1.0 : min(_4788, 1.0));
        float _2552 = isnan(1.0) ? _2362 : (isnan(_2362) ? 1.0 : min(_2362, 1.0));
        _2525 = (((cbLight._m0[_2533].x * 0.3183098733425140380859375) * _2551) * _2552) + _2415;
        _2527 = (((cbLight._m0[_2533].y * 0.3183098733425140380859375) * _2551) * _2552) + _2416;
        _2529 = (((cbLight._m0[_2533].z * 0.3183098733425140380859375) * _2551) * _2552) + _2417;
    }
    bool _2532 = _2421.y == 0u;
    float _2587;
    float _2589;
    float _2591;
    if (_2532)
    {
        _2587 = _2525;
        _2589 = _2527;
        _2591 = _2529;
    }
    else
    {
        uint _2760 = _2347 + 7u;
        float _2776 = (dot(vec3(cbLight._m0[_2347 + 3u].xyz), vec3(_637, _638, _639)) * 0.5) + 0.5;
        float _2777 = _2776 * _2776;
        float _4804 = isnan(0.0) ? _2777 : (isnan(_2777) ? 0.0 : max(_2777, 0.0));
        float _2778 = isnan(1.0) ? _4804 : (isnan(_4804) ? 1.0 : min(_4804, 1.0));
        float _2779 = isnan(1.0) ? _2363 : (isnan(_2363) ? 1.0 : min(_2363, 1.0));
        _2587 = (((cbLight._m0[_2760].x * 0.3183098733425140380859375) * _2778) * _2779) + _2525;
        _2589 = (((cbLight._m0[_2760].y * 0.3183098733425140380859375) * _2778) * _2779) + _2527;
        _2591 = (((cbLight._m0[_2760].z * 0.3183098733425140380859375) * _2778) * _2779) + _2529;
    }
    uint _2594 = _2347 + 8u;
    float _2607 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2347].w)) * _890) * 0.949999988079071044921875);
    float _2608 = _2607 * _2607;
    float _2609 = cbLight._m0[_2347].x + _663;
    float _2610 = cbLight._m0[_2347].y + _664;
    float _2611 = cbLight._m0[_2347].z + _665;
    float _2615 = inversesqrt(dot(vec3(_2609, _2610, _2611), vec3(_2609, _2610, _2611)));
    float _2616 = _2615 * _2609;
    float _2617 = _2615 * _2610;
    float _2618 = _2615 * _2611;
    float _2619 = dot(vec3(_637, _638, _639), vec3(cbLight._m0[_2347].xyz));
    float _4820 = isnan(0.0) ? _2619 : (isnan(_2619) ? 0.0 : max(_2619, 0.0));
    float _2622 = isnan(1.0) ? _4820 : (isnan(_4820) ? 1.0 : min(_4820, 1.0));
    float _4831 = isnan(0.0) ? _666 : (isnan(_666) ? 0.0 : max(_666, 0.0));
    float _2623 = isnan(1.0) ? _4831 : (isnan(_4831) ? 1.0 : min(_4831, 1.0));
    float _2624 = dot(vec3(_637, _638, _639), vec3(_2616, _2617, _2618));
    float _4842 = isnan(0.0) ? _2624 : (isnan(_2624) ? 0.0 : max(_2624, 0.0));
    float _2627 = isnan(1.0) ? _4842 : (isnan(_4842) ? 1.0 : min(_4842, 1.0));
    float _2628 = dot(vec3(cbLight._m0[_2347].xyz), vec3(_2616, _2617, _2618));
    float _4853 = isnan(0.0) ? _2628 : (isnan(_2628) ? 0.0 : max(_2628, 0.0));
    float _2632 = _2608 * _2608;
    float _2636 = ((_2627 * _2627) * (_2632 + (-1.0))) + 1.0;
    float _2644 = exp2(log2(1.0 - (isnan(1.0) ? _4853 : (isnan(_4853) ? 1.0 : min(_4853, 1.0)))) * 5.0);
    float _2645 = 0.959999978542327880859375 - _1005;
    float _2647 = 0.959999978542327880859375 - _1006;
    float _2648 = 0.959999978542327880859375 - _1007;
    float _2655 = 1.0 - _2608;
    float _2666 = (0.5 / (((_2623 * ((_2622 * _2655) + _2608)) + 9.9999999392252902907785028219223e-09) + (((_2623 * _2655) + _2608) * _2622))) * _2622;
    float _4864 = isnan(0.0) ? _2666 : (isnan(_2666) ? 0.0 : max(_2666, 0.0));
    float _2668 = (isnan(1.0) ? _4864 : (isnan(_4864) ? 1.0 : min(_4864, 1.0))) * (_2632 / ((_2636 * _2636) * 3.141590118408203125));
    uint _2682 = _2347 + 9u;
    float _2693 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2387].w)) * _890) * 0.949999988079071044921875);
    float _2694 = _2693 * _2693;
    float _2695 = cbLight._m0[_2387].x + _663;
    float _2696 = cbLight._m0[_2387].y + _664;
    float _2697 = cbLight._m0[_2387].z + _665;
    float _2701 = inversesqrt(dot(vec3(_2695, _2696, _2697), vec3(_2695, _2696, _2697)));
    float _2702 = _2701 * _2695;
    float _2703 = _2701 * _2696;
    float _2704 = _2701 * _2697;
    float _2705 = dot(vec3(_637, _638, _639), vec3(cbLight._m0[_2387].xyz));
    float _4875 = isnan(0.0) ? _2705 : (isnan(_2705) ? 0.0 : max(_2705, 0.0));
    float _2708 = isnan(1.0) ? _4875 : (isnan(_4875) ? 1.0 : min(_4875, 1.0));
    float _2709 = dot(vec3(_637, _638, _639), vec3(_2702, _2703, _2704));
    float _4886 = isnan(0.0) ? _2709 : (isnan(_2709) ? 0.0 : max(_2709, 0.0));
    float _2712 = isnan(1.0) ? _4886 : (isnan(_4886) ? 1.0 : min(_4886, 1.0));
    float _2713 = dot(vec3(cbLight._m0[_2387].xyz), vec3(_2702, _2703, _2704));
    float _4897 = isnan(0.0) ? _2713 : (isnan(_2713) ? 0.0 : max(_2713, 0.0));
    float _2717 = _2694 * _2694;
    float _2721 = ((_2712 * _2712) * (_2717 + (-1.0))) + 1.0;
    float _2728 = exp2(log2(1.0 - (isnan(1.0) ? _4897 : (isnan(_4897) ? 1.0 : min(_4897, 1.0)))) * 5.0);
    float _2735 = 1.0 - _2694;
    float _2745 = (0.5 / (((_2623 * ((_2708 * _2735) + _2694)) + 9.9999999392252902907785028219223e-09) + (((_2623 * _2735) + _2694) * _2708))) * _2708;
    float _4908 = isnan(0.0) ? _2745 : (isnan(_2745) ? 0.0 : max(_2745, 0.0));
    float _2747 = (isnan(1.0) ? _4908 : (isnan(_4908) ? 1.0 : min(_4908, 1.0))) * (_2717 / ((_2721 * _2721) * 3.141590118408203125));
    float _2757 = (((((_2728 * _2645) + _1008) * cbLight._m0[_2682].x) * _2747) * _2370) + ((((cbLight._m0[_2594].x * _2336) * ((_2644 * _2645) + _1008)) * _2668) * _2383);
    float _2758 = (((((_2728 * _2647) + _1009) * cbLight._m0[_2682].y) * _2747) * _2370) + ((((cbLight._m0[_2594].y * _2338) * ((_2644 * _2647) + _1009)) * _2668) * _2383);
    float _2759 = (((((_2728 * _2648) + _1010) * cbLight._m0[_2682].z) * _2747) * _2370) + ((((cbLight._m0[_2594].z * _2340) * ((_2644 * _2648) + _1010)) * _2668) * _2383);
    float _2815;
    float _2817;
    float _2819;
    if (_2423)
    {
        _2815 = _2757;
        _2817 = _2758;
        _2819 = _2759;
    }
    else
    {
        uint _2821 = _2347 + 2u;
        uint _2825 = _2347 + 10u;
        float _2839 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2821].w)) * _890) * 0.949999988079071044921875);
        float _2840 = _2839 * _2839;
        float _2841 = cbLight._m0[_2821].x + _663;
        float _2842 = cbLight._m0[_2821].y + _664;
        float _2843 = cbLight._m0[_2821].z + _665;
        float _2847 = inversesqrt(dot(vec3(_2841, _2842, _2843), vec3(_2841, _2842, _2843)));
        float _2848 = _2847 * _2841;
        float _2849 = _2847 * _2842;
        float _2850 = _2847 * _2843;
        float _2851 = dot(vec3(_637, _638, _639), vec3(cbLight._m0[_2821].xyz));
        float _4919 = isnan(0.0) ? _2851 : (isnan(_2851) ? 0.0 : max(_2851, 0.0));
        float _2854 = isnan(1.0) ? _4919 : (isnan(_4919) ? 1.0 : min(_4919, 1.0));
        float _2855 = dot(vec3(_637, _638, _639), vec3(_2848, _2849, _2850));
        float _4930 = isnan(0.0) ? _2855 : (isnan(_2855) ? 0.0 : max(_2855, 0.0));
        float _2858 = isnan(1.0) ? _4930 : (isnan(_4930) ? 1.0 : min(_4930, 1.0));
        float _2859 = dot(vec3(cbLight._m0[_2821].xyz), vec3(_2848, _2849, _2850));
        float _4941 = isnan(0.0) ? _2859 : (isnan(_2859) ? 0.0 : max(_2859, 0.0));
        float _2863 = _2840 * _2840;
        float _2867 = ((_2858 * _2858) * (_2863 + (-1.0))) + 1.0;
        float _2874 = exp2(log2(1.0 - (isnan(1.0) ? _4941 : (isnan(_4941) ? 1.0 : min(_4941, 1.0)))) * 5.0);
        float _2881 = 1.0 - _2840;
        float _2891 = (0.5 / (((_2623 * ((_2854 * _2881) + _2840)) + 9.9999999392252902907785028219223e-09) + (((_2623 * _2881) + _2840) * _2854))) * _2854;
        float _4952 = isnan(0.0) ? _2891 : (isnan(_2891) ? 0.0 : max(_2891, 0.0));
        float _2893 = (isnan(1.0) ? _4952 : (isnan(_4952) ? 1.0 : min(_4952, 1.0))) * (_2863 / ((_2867 * _2867) * 3.141590118408203125));
        float _2894 = isnan(1.0) ? _2362 : (isnan(_2362) ? 1.0 : min(_2362, 1.0));
        _2815 = (((((_2874 * _2645) + _1008) * cbLight._m0[_2825].x) * _2893) * _2894) + _2757;
        _2817 = (((((_2874 * _2647) + _1009) * cbLight._m0[_2825].y) * _2893) * _2894) + _2758;
        _2819 = (((((_2874 * _2648) + _1010) * cbLight._m0[_2825].z) * _2893) * _2894) + _2759;
    }
    float _2925;
    float _2927;
    float _2929;
    if (_2532)
    {
        _2925 = _2815;
        _2927 = _2817;
        _2929 = _2819;
    }
    else
    {
        uint _2936 = _2347 + 3u;
        uint _2940 = _2347 + 11u;
        float _2954 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2936].w)) * _890) * 0.949999988079071044921875);
        float _2955 = _2954 * _2954;
        float _2956 = cbLight._m0[_2936].x + _663;
        float _2957 = cbLight._m0[_2936].y + _664;
        float _2958 = cbLight._m0[_2936].z + _665;
        float _2962 = inversesqrt(dot(vec3(_2956, _2957, _2958), vec3(_2956, _2957, _2958)));
        float _2963 = _2962 * _2956;
        float _2964 = _2962 * _2957;
        float _2965 = _2962 * _2958;
        float _2966 = dot(vec3(_637, _638, _639), vec3(cbLight._m0[_2936].xyz));
        float _4968 = isnan(0.0) ? _2966 : (isnan(_2966) ? 0.0 : max(_2966, 0.0));
        float _2969 = isnan(1.0) ? _4968 : (isnan(_4968) ? 1.0 : min(_4968, 1.0));
        float _2970 = dot(vec3(_637, _638, _639), vec3(_2963, _2964, _2965));
        float _4979 = isnan(0.0) ? _2970 : (isnan(_2970) ? 0.0 : max(_2970, 0.0));
        float _2973 = isnan(1.0) ? _4979 : (isnan(_4979) ? 1.0 : min(_4979, 1.0));
        float _2974 = dot(vec3(cbLight._m0[_2936].xyz), vec3(_2963, _2964, _2965));
        float _4990 = isnan(0.0) ? _2974 : (isnan(_2974) ? 0.0 : max(_2974, 0.0));
        float _2978 = _2955 * _2955;
        float _2982 = ((_2973 * _2973) * (_2978 + (-1.0))) + 1.0;
        float _2989 = exp2(log2(1.0 - (isnan(1.0) ? _4990 : (isnan(_4990) ? 1.0 : min(_4990, 1.0)))) * 5.0);
        float _2996 = 1.0 - _2955;
        float _3006 = (0.5 / (((_2623 * ((_2969 * _2996) + _2955)) + 9.9999999392252902907785028219223e-09) + (((_2623 * _2996) + _2955) * _2969))) * _2969;
        float _5001 = isnan(0.0) ? _3006 : (isnan(_3006) ? 0.0 : max(_3006, 0.0));
        float _3008 = (isnan(1.0) ? _5001 : (isnan(_5001) ? 1.0 : min(_5001, 1.0))) * (_2978 / ((_2982 * _2982) * 3.141590118408203125));
        float _3009 = isnan(1.0) ? _2363 : (isnan(_2363) ? 1.0 : min(_2363, 1.0));
        _2925 = (((((_2989 * _2645) + _1008) * cbLight._m0[_2940].x) * _3008) * _3009) + _2815;
        _2927 = (((((_2989 * _2647) + _1009) * cbLight._m0[_2940].y) * _3008) * _3009) + _2817;
        _2929 = (((((_2989 * _2648) + _1010) * cbLight._m0[_2940].z) * _3008) * _3009) + _2819;
    }
    float _3074;
    float _3076;
    float _3078;
    float _3080;
    float _3082;
    float _3084;
    if (_2345.y == 0u)
    {
        uvec4 _3030 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3031 = _3030.x;
        uint _3042 = uint((float(_3030.y) * floor(float(uint(cbSceneParam._m0[85u].y * _813) / _3031))) + floor(float(uint(cbSceneParam._m0[85u].x * _812) / _3031)));
        float _3052 = (log2(_2123 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3053 = isnan(0.0) ? _3052 : (isnan(_3052) ? 0.0 : max(_3052, 0.0));
        uint _3056 = uint(isnan(14.0) ? _3053 : (isnan(_3053) ? 14.0 : min(_3053, 14.0)));
        uvec4 _3061 = texelFetch(g_lightClusterGridBuffer, int(((_3056 << 2u) + (_3042 << 6u)) >> 2u));
        uint _3062 = _3061.x;
        uint _3063 = _3030.z;
        float _3177;
        float _3179;
        float _3181;
        float _3183;
        float _3185;
        float _3187;
        if (((((1u << ((_3063 >> 4u) & 15u)) + 4294967295u) & _3062) == 0u) || ((_3063 & 240u) == 0u))
        {
            _3177 = 0.0;
            _3179 = 0.0;
            _3181 = 0.0;
            _3183 = 0.0;
            _3185 = 0.0;
            _3187 = 0.0;
        }
        else
        {
            float _3178;
            float _3180;
            float _3182;
            float _3184;
            float _3186;
            float _3188;
            float _3338 = 0.0;
            float _3339 = 0.0;
            float _3340 = 0.0;
            float _3341 = 0.0;
            float _3342 = 0.0;
            float _3343 = 0.0;
            uint _3344 = 0u;
            uint _3353;
            bool _3354;
            for (;;)
            {
                _3353 = texelFetch(g_lightClassification, int((((_3056 << 5u) + (_3042 << 9u)) + (_3344 << 2u)) >> 2u)).x;
                _3354 = _3353 == 0u;
                float frontier_phi_73_pred;
                float frontier_phi_73_pred_1;
                float frontier_phi_73_pred_2;
                float frontier_phi_73_pred_3;
                float frontier_phi_73_pred_4;
                float frontier_phi_73_pred_5;
                if (_3354)
                {
                    frontier_phi_73_pred = _3343;
                    frontier_phi_73_pred_1 = _3342;
                    frontier_phi_73_pred_2 = _3341;
                    frontier_phi_73_pred_3 = _3340;
                    frontier_phi_73_pred_4 = _3339;
                    frontier_phi_73_pred_5 = _3338;
                }
                else
                {
                    float _3483;
                    float _3484;
                    float _3485;
                    float _3486;
                    float _3487;
                    float _3488;
                    uint _3489;
                    _3483 = _3338;
                    _3484 = _3339;
                    _3485 = _3340;
                    _3486 = _3341;
                    _3487 = _3342;
                    _3488 = _3343;
                    _3489 = _3353;
                    float _3410;
                    float _3411;
                    float _3412;
                    float _3413;
                    float _3414;
                    float _3415;
                    for (;;)
                    {
                        uint _3493 = uint(findLSB(_3489)) + (_3344 << 5u);
                        uint _3490 = (_3489 + 4294967295u) & _3489;
                        uint _3495 = _3493 * 48u;
                        vec4 _3509 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3495)).x, texelFetch(g_PointLightRenderingBuffer, int(_3495 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3495 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3495 + 3u)).x));
                        uint _3515 = (_3493 * 48u) + 4u;
                        vec4 _3528 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3515)).x, texelFetch(g_PointLightRenderingBuffer, int(_3515 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3515 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3515 + 3u)).x));
                        uint _3534 = (_3493 * 48u) + 8u;
                        vec3 _3545 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3534)).x, texelFetch(g_PointLightRenderingBuffer, int(_3534 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3534 + 2u)).x));
                        float _3549 = _3509.x - _2121;
                        float _3550 = _3509.y - _2122;
                        float _3551 = _3509.z - _2123;
                        float _3552 = dot(vec3(_3549, _3550, _3551), vec3(_3549, _3550, _3551));
                        float _3555 = inversesqrt(_3552);
                        float _3556 = _3555 * _3549;
                        float _3557 = _3555 * _3550;
                        float _3558 = _3555 * _3551;
                        float _3559 = dot(vec3(_835, _838, _841), vec3(_3556, _3557, _3558));
                        float _3564 = 1.0 - (_3552 * _3509.w);
                        float _5027 = isnan(0.0) ? _3564 : (isnan(_3564) ? 0.0 : max(_3564, 0.0));
                        float _3565 = isnan(1.0) ? _5027 : (isnan(_5027) ? 1.0 : min(_5027, 1.0));
                        float _3566 = sqrt(_3552) * _3528.w;
                        float _3569 = 1.39999997615814208984375 / (_3566 + 1.39999997615814208984375);
                        float _3570 = _3569 * _3569;
                        float _3573 = ((1.0 - _3570) * _3559) + _3570;
                        float _3576 = _3566 * _3566;
                        float _3579 = ((isnan(0.0) ? _3573 : (isnan(_3573) ? 0.0 : max(_3573, 0.0))) * _3565) / ((_3576 * 0.699999988079071044921875) + 1.0);
                        float _3583 = (-0.0) - _2121;
                        float _3584 = (-0.0) - _2122;
                        float _3585 = (-0.0) - _2123;
                        float _3589 = inversesqrt(dot(vec3(_3583, _3584, _3585), vec3(_3583, _3584, _3585)));
                        float _3590 = _3589 * _3583;
                        float _3591 = _3589 * _3584;
                        float _3592 = _3589 * _3585;
                        float _3599 = exp2(log2(1.0 / ((_3576 * 3.5) + 5.0)) * 0.25);
                        float _3600 = 1.0 - _1032;
                        float _3607 = sqrt(1.0 - ((1.0 - (_3600 * _3600)) * (1.0 - (_3599 * _3599))));
                        float _3608 = _3607 * _3607;
                        float _3609 = _3608 * _3608;
                        float _3610 = _3590 + _3556;
                        float _3611 = _3591 + _3557;
                        float _3612 = _3592 + _3558;
                        float _3616 = inversesqrt(dot(vec3(_3610, _3611, _3612), vec3(_3610, _3611, _3612)));
                        float _3620 = dot(vec3(_835, _838, _841), vec3(_3590, _3591, _3592));
                        float _5043 = isnan(0.0) ? _3620 : (isnan(_3620) ? 0.0 : max(_3620, 0.0));
                        float _3623 = isnan(1.0) ? _5043 : (isnan(_5043) ? 1.0 : min(_5043, 1.0));
                        float _3624 = dot(vec3(_835, _838, _841), vec3(_3616 * _3610, _3616 * _3611, _3616 * _3612));
                        float _5054 = isnan(0.0) ? _3624 : (isnan(_3624) ? 0.0 : max(_3624, 0.0));
                        float _3627 = isnan(1.0) ? _5054 : (isnan(_5054) ? 1.0 : min(_5054, 1.0));
                        float _3631 = ((_3627 * _3627) * (_3609 + (-1.0))) + 1.0;
                        float _3632 = _3569 * _3608;
                        float _3633 = _3632 * _3632;
                        float _3636 = ((1.0 - _3633) * _3559) + _3633;
                        float _5065 = isnan(0.0) ? _3636 : (isnan(_3636) ? 0.0 : max(_3636, 0.0));
                        float _3637 = isnan(1.0) ? _5065 : (isnan(_5065) ? 1.0 : min(_5065, 1.0));
                        float _3638 = 1.0 - _3608;
                        float _3648 = (0.5 / (((_3637 * ((_3623 * _3638) + _3608)) + 9.9999999392252902907785028219223e-09) + (((_3637 * _3638) + _3608) * _3623))) * _3637;
                        float _5076 = isnan(0.0) ? _3648 : (isnan(_3648) ? 0.0 : max(_3648, 0.0));
                        float _3659 = (((_3609 * 3.1415927410125732421875) * (isnan(1.0) ? _5076 : (isnan(_5076) ? 1.0 : min(_5076, 1.0)))) / ((_3631 * _3631) * ((_3576 * 2.1991131305694580078125) + 3.141590118408203125))) * _3565;
                        _3413 = (_3579 * _3528.x) + _3486;
                        _3414 = (_3579 * _3528.y) + _3487;
                        _3415 = (_3579 * _3528.z) + _3488;
                        _3410 = (_3659 * _3545.x) + _3483;
                        _3411 = (_3659 * _3545.y) + _3484;
                        _3412 = (_3659 * _3545.z) + _3485;
                        if (_3490 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3483 = _3410;
                            _3484 = _3411;
                            _3485 = _3412;
                            _3486 = _3413;
                            _3487 = _3414;
                            _3488 = _3415;
                            _3489 = _3490;
                        }
                    }
                    frontier_phi_73_pred = _3415;
                    frontier_phi_73_pred_1 = _3414;
                    frontier_phi_73_pred_2 = _3413;
                    frontier_phi_73_pred_3 = _3412;
                    frontier_phi_73_pred_4 = _3411;
                    frontier_phi_73_pred_5 = _3410;
                }
                _3188 = frontier_phi_73_pred;
                _3186 = frontier_phi_73_pred_1;
                _3184 = frontier_phi_73_pred_2;
                _3182 = frontier_phi_73_pred_3;
                _3180 = frontier_phi_73_pred_4;
                _3178 = frontier_phi_73_pred_5;
                uint _3345 = _3344 + 1u;
                if (_3345 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3338 = _3178;
                    _3339 = _3180;
                    _3340 = _3182;
                    _3341 = _3184;
                    _3342 = _3186;
                    _3343 = _3188;
                    _3344 = _3345;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3177 = _3178;
            _3179 = _3180;
            _3181 = _3182;
            _3183 = _3184;
            _3185 = _3186;
            _3187 = _3188;
        }
        uvec4 _3191 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3192 = _3191.z;
        uint _3194 = (_3192 >> 8u) & 15u;
        float _3306;
        float _3308;
        float _3310;
        float _3312;
        float _3314;
        float _3316;
        if (((4294967295u << _3194) & _3062) == 0u)
        {
            _3306 = _3177;
            _3308 = _3179;
            _3310 = _3181;
            _3312 = _3183;
            _3314 = _3185;
            _3316 = _3187;
        }
        else
        {
            float _3331 = inversesqrt(dot(vec3(_2121, _2122, _2123), vec3(_2121, _2122, _2123)));
            float _3332 = _3331 * _2121;
            float _3333 = _3331 * _2122;
            float _3334 = _3331 * _2123;
            float frontier_phi_65_66_ladder;
            float frontier_phi_65_66_ladder_1;
            float frontier_phi_65_66_ladder_2;
            float frontier_phi_65_66_ladder_3;
            float frontier_phi_65_66_ladder_4;
            float frontier_phi_65_66_ladder_5;
            if (_3194 < ((_3192 >> 12u) & 15u))
            {
                float _3307;
                float _3309;
                float _3311;
                float _3313;
                float _3315;
                float _3317;
                float _3466 = _3177;
                float _3467 = _3179;
                float _3468 = _3181;
                float _3469 = _3183;
                float _3470 = _3185;
                float _3471 = _3187;
                uint _3472 = _3194;
                uint _3481;
                bool _3482;
                for (;;)
                {
                    _3481 = texelFetch(g_lightClassification, int((((_3056 << 5u) + (_3042 << 9u)) + (_3472 << 2u)) >> 2u)).x;
                    _3482 = _3481 == 0u;
                    float frontier_phi_84_pred;
                    float frontier_phi_84_pred_1;
                    float frontier_phi_84_pred_2;
                    float frontier_phi_84_pred_3;
                    float frontier_phi_84_pred_4;
                    float frontier_phi_84_pred_5;
                    if (_3482)
                    {
                        frontier_phi_84_pred = _3470;
                        frontier_phi_84_pred_1 = _3469;
                        frontier_phi_84_pred_2 = _3468;
                        frontier_phi_84_pred_3 = _3467;
                        frontier_phi_84_pred_4 = _3466;
                        frontier_phi_84_pred_5 = _3471;
                    }
                    else
                    {
                        float _3673;
                        float _3674;
                        float _3675;
                        float _3676;
                        float _3677;
                        float _3678;
                        float _3968;
                        float _3969;
                        float _3970;
                        float _3971;
                        float _3972;
                        float _3973;
                        float _3686 = _3466;
                        float _3687 = _3467;
                        float _3688 = _3468;
                        float _3689 = _3469;
                        float _3690 = _3470;
                        float _3691 = _3471;
                        uint _3692 = _3481;
                        uint _3693;
                        vec4 _3718;
                        float _3719;
                        vec4 _3734;
                        vec3 _3746;
                        vec4 _3761;
                        vec4 _3777;
                        float _3824;
                        bool _3825;
                        for (;;)
                        {
                            uint _3703 = ((_3472 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3692));
                            _3693 = (_3692 + 4294967295u) & _3692;
                            uint _3705 = _3703 * 40u;
                            _3718 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3705)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3705 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3705 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3705 + 3u)).x));
                            _3719 = _3718.w;
                            uint _3721 = (_3703 * 40u) + 4u;
                            _3734 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3721)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3721 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3721 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3721 + 3u)).x));
                            uint _3736 = (_3703 * 40u) + 8u;
                            _3746 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3736)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3736 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3736 + 2u)).x));
                            uint _3748 = (_3703 * 40u) + 16u;
                            _3761 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3748)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3748 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3748 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3748 + 3u)).x));
                            uint _3764 = (_3703 * 40u) + 20u;
                            _3777 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3764)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3764 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3764 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3764 + 3u)).x));
                            uint _3780 = (_3703 * 40u) + 24u;
                            vec4 _3793 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3780)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3780 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3780 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3780 + 3u)).x));
                            uint _3799 = (_3703 * 40u) + 28u;
                            vec4 _3812 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3799)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3799 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3799 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3799 + 3u)).x));
                            _3824 = fma(_2123, _3812.z, fma(_2122, _3812.y, _3812.x * _2121)) + _3812.w;
                            _3825 = !((fma(_2123, _3793.z, fma(_2122, _3793.y, _3793.x * _2121)) + _3793.w) <= 0.0);
                            float frontier_phi_90_pred;
                            float frontier_phi_90_pred_1;
                            float frontier_phi_90_pred_2;
                            float frontier_phi_90_pred_3;
                            float frontier_phi_90_pred_4;
                            float frontier_phi_90_pred_5;
                            if (_3825)
                            {
                                float _3852 = _3718.x - _2121;
                                float _3853 = _3718.y - _2122;
                                float _3854 = _3718.z - _2123;
                                float _3855 = dot(vec3(_3852, _3853, _3854), vec3(_3852, _3853, _3854));
                                float _3858 = inversesqrt(_3855);
                                float _3859 = _3858 * _3852;
                                float _3860 = _3858 * _3853;
                                float _3861 = _3858 * _3854;
                                float _3865 = 1.0 - (_3855 / (_3719 * _3719));
                                float _5087 = isnan(0.0) ? _3865 : (isnan(_3865) ? 0.0 : max(_3865, 0.0));
                                float _3866 = isnan(1.0) ? _5087 : (isnan(_5087) ? 1.0 : min(_5087, 1.0));
                                float _3870 = sqrt(_3855) * _3734.w;
                                float _3872 = 1.39999997615814208984375 / (_3870 + 1.39999997615814208984375);
                                float _3873 = _3872 * _3872;
                                float _3876 = ((1.0 - _3873) * dot(vec3(_3859, _3860, _3861), vec3(_835, _838, _841))) + _3873;
                                float _3879 = _3870 * _3870;
                                float _3883 = (fma(_2123, _3761.z, fma(_2122, _3761.y, _3761.x * _2121)) + _3761.w) / _3824;
                                float _3884 = (fma(_2123, _3777.z, fma(_2122, _3777.y, _3777.x * _2121)) + _3777.w) / _3824;
                                float _3888 = 1.0 - dot(vec2(_3883, _3884), vec2(_3883, _3884));
                                float _5103 = isnan(0.0) ? _3888 : (isnan(_3888) ? 0.0 : max(_3888, 0.0));
                                float _3889 = isnan(1.0) ? _5103 : (isnan(_5103) ? 1.0 : min(_5103, 1.0));
                                float _3890 = _3889 * (((isnan(0.0) ? _3876 : (isnan(_3876) ? 0.0 : max(_3876, 0.0))) * _3866) / ((_3879 * 0.699999988079071044921875) + 1.0));
                                float _3902 = exp2(log2(1.0 / ((_3879 * 3.5) + 5.0)) * 0.25);
                                float _3903 = 1.0 - _1032;
                                float _3910 = sqrt(1.0 - ((1.0 - (_3903 * _3903)) * (1.0 - (_3902 * _3902))));
                                float _3911 = _3910 * _3910;
                                float _3912 = _3911 * _3911;
                                float _3913 = _3859 - _3332;
                                float _3914 = _3860 - _3333;
                                float _3915 = _3861 - _3334;
                                float _3919 = inversesqrt(dot(vec3(_3913, _3914, _3915), vec3(_3913, _3914, _3915)));
                                float _3923 = dot(vec3(_835, _838, _841), vec3((-0.0) - _3332, (-0.0) - _3333, (-0.0) - _3334));
                                float _5114 = isnan(0.0) ? _3923 : (isnan(_3923) ? 0.0 : max(_3923, 0.0));
                                float _3926 = isnan(1.0) ? _5114 : (isnan(_5114) ? 1.0 : min(_5114, 1.0));
                                float _3927 = dot(vec3(_835, _838, _841), vec3(_3919 * _3913, _3919 * _3914, _3919 * _3915));
                                float _5125 = isnan(0.0) ? _3927 : (isnan(_3927) ? 0.0 : max(_3927, 0.0));
                                float _3930 = isnan(1.0) ? _5125 : (isnan(_5125) ? 1.0 : min(_5125, 1.0));
                                float _3934 = ((_3930 * _3930) * (_3912 + (-1.0))) + 1.0;
                                float _3935 = _3872 * _3911;
                                float _3936 = _3935 * _3935;
                                float _3942 = ((1.0 - _3936) * dot(vec3(_835, _838, _841), vec3(_3859, _3860, _3861))) + _3936;
                                float _5136 = isnan(0.0) ? _3942 : (isnan(_3942) ? 0.0 : max(_3942, 0.0));
                                float _3943 = isnan(1.0) ? _5136 : (isnan(_5136) ? 1.0 : min(_5136, 1.0));
                                float _3944 = 1.0 - _3911;
                                float _3954 = (0.5 / (((_3943 * ((_3926 * _3944) + _3911)) + 9.9999999392252902907785028219223e-09) + (((_3943 * _3944) + _3911) * _3926))) * _3943;
                                float _5147 = isnan(0.0) ? _3954 : (isnan(_3954) ? 0.0 : max(_3954, 0.0));
                                float _3964 = (_3889 * _3866) * (((_3912 * 3.1415927410125732421875) * (isnan(1.0) ? _5147 : (isnan(_5147) ? 1.0 : min(_5147, 1.0)))) / ((_3934 * _3934) * ((_3879 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_90_pred = _3890 * _3734.y;
                                frontier_phi_90_pred_1 = _3890 * _3734.x;
                                frontier_phi_90_pred_2 = _3964 * _3746.z;
                                frontier_phi_90_pred_3 = _3964 * _3746.y;
                                frontier_phi_90_pred_4 = _3964 * _3746.x;
                                frontier_phi_90_pred_5 = _3890 * _3734.z;
                            }
                            else
                            {
                                frontier_phi_90_pred = 0.0;
                                frontier_phi_90_pred_1 = 0.0;
                                frontier_phi_90_pred_2 = 0.0;
                                frontier_phi_90_pred_3 = 0.0;
                                frontier_phi_90_pred_4 = 0.0;
                                frontier_phi_90_pred_5 = 0.0;
                            }
                            _3972 = frontier_phi_90_pred;
                            _3971 = frontier_phi_90_pred_1;
                            _3970 = frontier_phi_90_pred_2;
                            _3969 = frontier_phi_90_pred_3;
                            _3968 = frontier_phi_90_pred_4;
                            _3973 = frontier_phi_90_pred_5;
                            _3676 = _3971 + _3689;
                            _3677 = _3972 + _3690;
                            _3678 = _3973 + _3691;
                            _3673 = _3968 + _3686;
                            _3674 = _3969 + _3687;
                            _3675 = _3970 + _3688;
                            if (_3693 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3686 = _3673;
                                _3687 = _3674;
                                _3688 = _3675;
                                _3689 = _3676;
                                _3690 = _3677;
                                _3691 = _3678;
                                _3692 = _3693;
                                continue;
                            }
                        }
                        frontier_phi_84_pred = _3677;
                        frontier_phi_84_pred_1 = _3676;
                        frontier_phi_84_pred_2 = _3675;
                        frontier_phi_84_pred_3 = _3674;
                        frontier_phi_84_pred_4 = _3673;
                        frontier_phi_84_pred_5 = _3678;
                    }
                    _3315 = frontier_phi_84_pred;
                    _3313 = frontier_phi_84_pred_1;
                    _3311 = frontier_phi_84_pred_2;
                    _3309 = frontier_phi_84_pred_3;
                    _3307 = frontier_phi_84_pred_4;
                    _3317 = frontier_phi_84_pred_5;
                    uint _3473 = _3472 + 1u;
                    if (_3473 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3466 = _3307;
                        _3467 = _3309;
                        _3468 = _3311;
                        _3469 = _3313;
                        _3470 = _3315;
                        _3471 = _3317;
                        _3472 = _3473;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_65_66_ladder = _3317;
                frontier_phi_65_66_ladder_1 = _3313;
                frontier_phi_65_66_ladder_2 = _3315;
                frontier_phi_65_66_ladder_3 = _3309;
                frontier_phi_65_66_ladder_4 = _3307;
                frontier_phi_65_66_ladder_5 = _3311;
            }
            else
            {
                frontier_phi_65_66_ladder = _3187;
                frontier_phi_65_66_ladder_1 = _3183;
                frontier_phi_65_66_ladder_2 = _3185;
                frontier_phi_65_66_ladder_3 = _3179;
                frontier_phi_65_66_ladder_4 = _3177;
                frontier_phi_65_66_ladder_5 = _3181;
            }
            _3306 = frontier_phi_65_66_ladder_4;
            _3308 = frontier_phi_65_66_ladder_3;
            _3310 = frontier_phi_65_66_ladder_5;
            _3312 = frontier_phi_65_66_ladder_1;
            _3314 = frontier_phi_65_66_ladder_2;
            _3316 = frontier_phi_65_66_ladder;
        }
        float _3321 = isnan(1.0) ? _1022 : (isnan(_1022) ? 1.0 : min(_1022, 1.0));
        _3074 = (_3321 * _3312) + _2587;
        _3076 = (_3321 * _3314) + _2589;
        _3078 = (_3321 * _3316) + _2591;
        _3080 = ((_3306 * _1008) * _3321) + _2925;
        _3082 = ((_3308 * _1009) * _3321) + _2927;
        _3084 = ((_3310 * _1010) * _3321) + _2929;
    }
    else
    {
        _3074 = _2587;
        _3076 = _2589;
        _3078 = _2591;
        _3080 = _2925;
        _3082 = _2927;
        _3084 = _2929;
    }
    uint _3090 = _915 + uint(cbMatDynParam._m0[0u].w);
    float _3096 = cbInstanceData._m0[_3090].x * (((((cbMatDynParam._m0[8u].x - cbMatDynParam._m0[7u].x) * _679) + cbMatDynParam._m0[7u].x) + (((((cbMtdParam._m0[12u].x * cbMtdParam._m0[16u].z) * cbMtdParam._m0[15u].w) * _575) * _588.x) * _708)) + (((_737 - (_737 * _645)) + (cbMatDynParam._m0[11u].x * _768)) * cbMatDynParam._m0[9u].x));
    float _3097 = cbInstanceData._m0[_3090].y * (((((cbMatDynParam._m0[8u].y - cbMatDynParam._m0[7u].y) * _679) + cbMatDynParam._m0[7u].y) + (((((cbMtdParam._m0[12u].y * cbMtdParam._m0[16u].z) * cbMtdParam._m0[15u].w) * _575) * _588.y) * _708)) + (((_739 - (_739 * _645)) + (cbMatDynParam._m0[11u].y * _768)) * cbMatDynParam._m0[9u].y));
    float _3098 = cbInstanceData._m0[_3090].z * (((((cbMatDynParam._m0[8u].z - cbMatDynParam._m0[7u].z) * _679) + cbMatDynParam._m0[7u].z) + (((((cbMtdParam._m0[12u].z * cbMtdParam._m0[16u].z) * cbMtdParam._m0[15u].w) * _575) * _588.z) * _708)) + (((_741 - (_741 * _645)) + (cbMatDynParam._m0[11u].z * _768)) * cbMatDynParam._m0[9u].z));
    float _5163 = isnan(0.0) ? _999 : (isnan(_999) ? 0.0 : max(_999, 0.0));
    float _5174 = isnan(0.0) ? _1000 : (isnan(_1000) ? 0.0 : max(_1000, 0.0));
    float _5185 = isnan(0.0) ? _1001 : (isnan(_1001) ? 0.0 : max(_1001, 0.0));
    float _5196 = isnan(0.0) ? _640 : (isnan(_640) ? 0.0 : max(_640, 0.0));
    float _3116 = (((isnan(1.0) ? _5163 : (isnan(_5163) ? 1.0 : min(_5163, 1.0))) * (_3074 + ((isnan(0.0) ? _1777 : (isnan(_1777) ? 0.0 : max(_1777, 0.0))) * _1022))) + ((_3080 + ((isnan(0.0) ? _2068 : (isnan(_2068) ? 0.0 : max(_2068, 0.0))) * _1853)) * cbPerFrame._m0[3u].x)) + _3096;
    float _3118 = (_3097 + ((_3082 + ((isnan(0.0) ? _2071 : (isnan(_2071) ? 0.0 : max(_2071, 0.0))) * _1853)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _5174 : (isnan(_5174) ? 1.0 : min(_5174, 1.0))) * (_3076 + ((isnan(0.0) ? _1780 : (isnan(_1780) ? 0.0 : max(_1780, 0.0))) * _1022)));
    float _3120 = (_3098 + ((_3084 + ((isnan(0.0) ? _2074 : (isnan(_2074) ? 0.0 : max(_2074, 0.0))) * _1853)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _5185 : (isnan(_5185) ? 1.0 : min(_5185, 1.0))) * (_3078 + ((isnan(0.0) ? _1783 : (isnan(_1783) ? 0.0 : max(_1783, 0.0))) * _1022)));
    float _3121 = isnan(0.0) ? _3116 : (isnan(_3116) ? 0.0 : max(_3116, 0.0));
    float _3122 = isnan(0.0) ? _3118 : (isnan(_3118) ? 0.0 : max(_3118, 0.0));
    float _3123 = isnan(0.0) ? _3120 : (isnan(_3120) ? 0.0 : max(_3120, 0.0));
    float _3129 = cbMtdParam._m0[2u].x * _3096;
    float _3130 = cbMtdParam._m0[2u].y * _3097;
    float _3131 = cbMtdParam._m0[2u].z * _3098;
    float _3138 = ((cbMtdParam._m0[2u].w - cbMatDynParam._m0[12u].y) * _708) + cbMatDynParam._m0[12u].y;
    float _3143 = cbInstanceData._m0[_914 + 6u].w * (isnan(1.0) ? _5196 : (isnan(_5196) ? 1.0 : min(_5196, 1.0)));
    float _3148 = _812 / cbSceneParam._m0[86u].x;
    float _3149 = _813 / cbSceneParam._m0[86u].y;
    vec4 _3163 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3148, _3149, (log2((isnan(cbSceneParam._m0[77u].w) ? _794 : (isnan(_794) ? cbSceneParam._m0[77u].w : min(_794, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3165 = _3163.x;
    float _3166 = _3163.y;
    float _3167 = _3163.z;
    float _3168 = _3163.w;
    float _3239;
    float _3241;
    float _3243;
    float _3245;
    if (_794 > cbSceneParam._m0[78u].w)
    {
        float _3202 = isnan(_794) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _794 : min(cbSceneParam._m0[80u].w, _794));
        float _3203 = _3202 / _794;
        float _3214 = _3203 * _301;
        float _3215 = _302 * _3203;
        float _3216 = (-0.0) - _3215;
        float _3217 = _3203 * _303;
        float _3219 = (cbSceneParam._m0[77u].w * _3216) / _3202;
        float _3220 = _3219 + cbSceneParam._m0[79u].w;
        float _3221 = cbSceneParam._m0[79u].w - _3215;
        float _3227 = sqrt(((_3214 * _3214) + (_3215 * _3215)) + (_3217 * _3217));
        float _3230 = (1.0 - (cbSceneParam._m0[77u].w / _3202)) * _3227;
        float _3235 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3237 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3423;
        if (abs((_3216 - _3219) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3423 = ((((_3220 > 0.0) ? exp2(_3235 * _3220) : (2.0 - exp2(_3237 * _3220))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3230;
        }
        else
        {
            float _3367 = 1.0 / cbSceneParam._m0[80u].x;
            float _3368 = isnan(_3221) ? _3220 : (isnan(_3220) ? _3221 : max(_3220, _3221));
            float _3369 = isnan(_3221) ? _3220 : (isnan(_3220) ? _3221 : min(_3220, _3221));
            float _3378 = isnan(0.0) ? _3368 : (isnan(_3368) ? 0.0 : min(_3368, 0.0));
            float _3379 = isnan(0.0) ? _3369 : (isnan(_3369) ? 0.0 : min(_3369, 0.0));
            _3423 = ((abs(_3227 / _3216) * cbSceneParam._m0[80u].y) * ((((_3378 - _3379) * 2.0) - ((exp2(_3235 * (isnan(0.0) ? _3368 : (isnan(_3368) ? 0.0 : max(_3368, 0.0)))) - exp2(_3235 * (isnan(0.0) ? _3369 : (isnan(_3369) ? 0.0 : max(_3369, 0.0))))) * _3367)) - ((exp2(_3237 * _3378) - exp2(_3237 * _3379)) * _3367))) + (_3230 * cbSceneParam._m0[80u].z);
        }
        vec4 _3425 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3148, _3149, 1.0), 0.0);
        float _3434 = exp2((_3423 * (-1.44269502162933349609375)) * (1.0 - _3425.w));
        float _3435 = log2(_3434);
        float _3451 = log2(_3168);
        _3239 = (exp2(_3451 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3435 * cbSceneParam._m0[78u].x)) * _3425.x) / cbSceneParam._m0[78u].x)) + _3165;
        _3241 = (exp2(_3451 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3435 * cbSceneParam._m0[78u].y)) * _3425.y) / cbSceneParam._m0[78u].y)) + _3166;
        _3243 = (exp2(_3451 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3435 * cbSceneParam._m0[78u].z)) * _3425.z) / cbSceneParam._m0[78u].z)) + _3167;
        _3245 = _3434 * _3168;
    }
    else
    {
        _3239 = _3165;
        _3241 = _3166;
        _3243 = _3167;
        _3245 = _3168;
    }
    bool _3461;
    vec4 _3255;
    vec4 _3277;
    float _3279;
    float _3283;
    float _3284;
    float _3285;
    float _3288;
    float _3291;
    float _3294;
    float _3295;
    bool _3305;
    for (;;)
    {
        _3255 = cbMatDynParam._m0[0u];
        float _3257 = roundEven(_3255.y);
        bool _3258 = _3257 == 3.0;
        float _3259 = log2(_3245);
        float _3263 = exp2(_3259 * cbSceneParam._m0[78u].x);
        float _3264 = exp2(_3259 * cbSceneParam._m0[78u].y);
        float _3265 = exp2(_3259 * cbSceneParam._m0[78u].z);
        float _3266 = _3263 * _3121;
        float _3267 = _3264 * _3122;
        float _3268 = _3265 * _3123;
        float _3275 = _801 + (-0.5);
        _3277 = cbMtdParam._m0[1u];
        _3279 = _3277.y * _3275;
        float _3282 = (_3257 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3283 = _3282 * (_3258 ? _3266 : (_3266 + (cbSceneParam._m0[72u].w * _3239)));
        _3284 = _3282 * (_3258 ? _3267 : (_3267 + (cbSceneParam._m0[72u].w * _3241)));
        _3285 = _3282 * (_3258 ? _3268 : (_3268 + (cbSceneParam._m0[72u].w * _3243)));
        _3288 = ((_3129 * _3138) * _3263) * _3282;
        _3291 = ((_3130 * _3138) * _3264) * _3282;
        _3294 = ((_3131 * _3138) * _3265) * _3282;
        _3295 = _3275 * 0.999000012874603271484375;
        _3305 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3305)
        {
            if ((cbInstanceData._m0[_914 + 7u].x + _3295) < 0.5)
            {
                _3461 = true;
                break;
            }
        }
        uint _3402 = _915 + uint(_3255.w);
        if ((cbInstanceData._m0[_3402].w < 1.0) && ((cbInstanceData._m0[_3402].w + _3295) < 0.5))
        {
            _3461 = true;
            break;
        }
        if ((_3279 + _454) < _3277.x)
        {
            _3461 = true;
            break;
        }
        _3461 = false;
        break;
    }
    float _3664;
    if (_3461)
    {
        discard_state = true;
        _3664 = 0.0;
    }
    else
    {
        _3664 = _3143;
    }
    SV_Target.x = _3283;
    SV_Target.y = _3284;
    SV_Target.z = _3285;
    SV_Target.w = _3664;
    SV_Target_1.x = _3288;
    SV_Target_1.y = _3291;
    SV_Target_1.z = _3294;
    SV_Target_1.w = _3143;
    discard_exit();
}


