#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[18];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_1;
layout(set = 0, binding = 1) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_7;
layout(set = 0, binding = 10) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_6;
layout(set = 0, binding = 12) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_0;
layout(set = 0, binding = 3) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_10;
layout(set = 0, binding = 4) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_11;
layout(set = 0, binding = 5) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_12;
layout(set = 0, binding = 7) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1245;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _209 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _210 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _211 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _217 = inversesqrt(dot(vec3(_209, _210, _211), vec3(_209, _210, _211)));
    float _224 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _225 = _224 * NORMAL.x;
    float _226 = _224 * NORMAL.y;
    float _227 = _224 * NORMAL.z;
    float _231 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _239;
    float _240;
    float _241;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _239 = (-0.0) - _225;
        _240 = (-0.0) - _226;
        _241 = (-0.0) - _227;
    }
    else
    {
        _239 = _225;
        _240 = _226;
        _241 = _227;
    }
    vec4 _254 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _260 = _254.w;
    vec4 _272 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _284 = cbMtdParam._m0[9u].x * _272.x;
    float _285 = cbMtdParam._m0[9u].y * _272.y;
    float _286 = cbMtdParam._m0[9u].z * _272.z;
    float _292 = exp2(log2(1.0 - _260) * 8.0);
    vec4 _304 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_10, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _324 = (((cbMtdParam._m0[13u].x * _304.x) - _284) * _292) + _284;
    float _325 = (((cbMtdParam._m0[13u].y * _304.y) - _285) * _292) + _285;
    float _326 = (((cbMtdParam._m0[13u].z * _304.z) - _286) * _292) + _286;
    float _329 = exp2(log2(_260) * 8.0);
    vec4 _342 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _376 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _384 = (((((cbMtdParam._m0[11u].x * _342.x) - _324) * _329) + _324) * 4.55000019073486328125) * _376.x;
    float _386 = (((((cbMtdParam._m0[11u].y * _342.y) - _325) * _329) + _325) * 4.55000019073486328125) * _376.y;
    float _388 = (((((cbMtdParam._m0[11u].z * _342.z) - _326) * _329) + _326) * 4.55000019073486328125) * _376.z;
    float _389 = _376.w * _272.w;
    float _413 = cbMtdParam._m0[16u].x + texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w)).x;
    float _416 = ((cbMtdParam._m0[15u].z - _413) * _292) + _413;
    float _420 = ((cbMtdParam._m0[16u].w - _416) * _329) + _416;
    vec4 _433 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w));
    float _435 = _433.x;
    float _436 = _433.y;
    float _442 = cbMtdParam._m0[14u].x + _433.z;
    vec4 _455 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _464 = (((_455.z - _442) + cbMtdParam._m0[15u].y) * _292) + _442;
    vec4 _477 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _489 = (_254.z * 2.0) * ((((_477.z - _464) + cbMtdParam._m0[14u].w) * _329) + _464);
    float _503 = abs((fract(cbMtdParam._m0[15u].x * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _3648 = isnan(0.0) ? _503 : (isnan(_503) ? 0.0 : max(_503, 0.0));
    float _504 = isnan(1.0) ? _3648 : (isnan(_3648) ? 1.0 : min(_3648, 1.0));
    float _509 = (_504 * _504) * (3.0 - (_504 * 2.0));
    vec4 _522 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _530 = (_254.x * 2.0) + (-1.0);
    float _531 = (_254.y * 2.0) + (-1.0);
    float _532 = dot(vec2(_530, _531), vec2(_530, _531));
    float _3659 = isnan(0.0) ? _532 : (isnan(_532) ? 0.0 : max(_532, 0.0));
    float _537 = sqrt(1.0 - (isnan(1.0) ? _3659 : (isnan(_3659) ? 1.0 : min(_3659, 1.0))));
    float _542 = ((_455.x - _435) * _292) + _435;
    float _543 = ((_455.y - _436) * _292) + _436;
    float _556 = (cbMtdParam._m0[14u].z * (((((_477.x - _542) * _329) + _542) * 2.0) + (-1.0))) + _530;
    float _557 = (cbMtdParam._m0[14u].z * (((((_477.y - _543) * _329) + _543) * 2.0) + (-1.0))) + _531;
    float _560 = fma(_537, _239, fma(_557, _231 * TANGENT.x, (_217 * _209) * _556));
    float _563 = fma(_537, _240, fma(_557, _231 * TANGENT.y, (_217 * _210) * _556));
    float _566 = fma(_537, _241, fma(_557, _231 * TANGENT.z, (_217 * _211) * _556));
    float _570 = inversesqrt(dot(vec3(_560, _563, _566), vec3(_560, _563, _566)));
    float _571 = _570 * _560;
    float _572 = _570 * _563;
    float _573 = _570 * _566;
    float _3670 = isnan(0.0) ? _389 : (isnan(_389) ? 0.0 : max(_389, 0.0));
    float _574 = isnan(1.0) ? _3670 : (isnan(_3670) ? 1.0 : min(_3670, 1.0));
    float _3681 = isnan(0.0) ? _489 : (isnan(_489) ? 0.0 : max(_489, 0.0));
    float _575 = isnan(1.0) ? _3681 : (isnan(_3681) ? 1.0 : min(_3681, 1.0));
    float _3692 = isnan(0.0) ? _384 : (isnan(_384) ? 0.0 : max(_384, 0.0));
    float _576 = isnan(1.0) ? _3692 : (isnan(_3692) ? 1.0 : min(_3692, 1.0));
    float _3703 = isnan(0.0) ? _386 : (isnan(_386) ? 0.0 : max(_386, 0.0));
    float _577 = isnan(1.0) ? _3703 : (isnan(_3703) ? 1.0 : min(_3703, 1.0));
    float _3714 = isnan(0.0) ? _388 : (isnan(_388) ? 0.0 : max(_388, 0.0));
    float _578 = isnan(1.0) ? _3714 : (isnan(_3714) ? 1.0 : min(_3714, 1.0));
    float _3725 = isnan(0.0) ? _420 : (isnan(_420) ? 0.0 : max(_420, 0.0));
    float _579 = isnan(1.0) ? _3725 : (isnan(_3725) ? 1.0 : min(_3725, 1.0));
    float _595 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _635 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _645 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _635);
    float _646 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _635);
    float _647 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _635);
    float _651 = inversesqrt(dot(vec3(_645, _646, _647), vec3(_645, _646, _647)));
    float _652 = _645 * _651;
    float _653 = _646 * _651;
    float _654 = _647 * _651;
    float _660 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _661 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _663 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _665 = _663.w;
    float _684 = fma(_573, cbSceneParam._m0[5u].z, fma(_572, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _571));
    float _687 = fma(_573, cbSceneParam._m0[6u].z, fma(_572, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _571));
    float _690 = fma(_573, cbSceneParam._m0[7u].z, fma(_572, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _571));
    vec4 _692 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _694 = _692.x;
    float _706 = (((_692.y - _575) + (_692.w * _575)) * cbMtdParam._m0[3u].x) + _575;
    vec4 _707 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _723 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3(cbMtdParam._m0[3u].x * (_694 * _694)), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * _707.z;
    float _731 = (((cbMatDynParam._m0[15u].x - _579) * cbMatDynParam._m0[15u].w) * _723) + _579;
    float _739 = ((_723 * cbMatDynParam._m0[16u].z) * (cbMatDynParam._m0[16u].x - _706)) + _706;
    uint _763 = uint(roundEven(NORMAL.w)) * 13u;
    uint _764 = _763 + 9u;
    uint _765 = _764 + uint(cbMatDynParam._m0[0u].w);
    float _771 = (cbMtdParam._m0[0u].x * _576) * cbInstanceData._m0[_765].x;
    float _772 = (cbMtdParam._m0[0u].y * _577) * cbInstanceData._m0[_765].y;
    float _773 = (cbMtdParam._m0[0u].z * _578) * cbInstanceData._m0[_765].z;
    float _3736 = isnan(0.0) ? _771 : (isnan(_771) ? 0.0 : max(_771, 0.0));
    float _774 = isnan(1.0) ? _3736 : (isnan(_3736) ? 1.0 : min(_3736, 1.0));
    float _3747 = isnan(0.0) ? _772 : (isnan(_772) ? 0.0 : max(_772, 0.0));
    float _775 = isnan(1.0) ? _3747 : (isnan(_3747) ? 1.0 : min(_3747, 1.0));
    float _3758 = isnan(0.0) ? _773 : (isnan(_773) ? 0.0 : max(_773, 0.0));
    float _776 = isnan(1.0) ? _3758 : (isnan(_3758) ? 1.0 : min(_3758, 1.0));
    vec4 _777 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _782 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _793 = (((_782.x - _731) + (_782.w * _731)) * cbMtdParam._m0[3u].x) + _731;
    float _806 = (cbMtdParam._m0[3u].x * (((_774 * _665) - _774) + _777.x)) + _774;
    float _807 = (cbMtdParam._m0[3u].x * (((_775 * _665) - _775) + _777.y)) + _775;
    float _808 = (cbMtdParam._m0[3u].x * (((_776 * _665) - _776) + _777.z)) + _776;
    vec4 _809 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _822 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3((_731 * (_576 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625, (_731 * (_577 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625, (_731 * (_578 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * _809.z;
    float _826 = _822 * cbMatDynParam._m0[13u].w;
    float _836 = (_826 * (cbMatDynParam._m0[13u].x - _806)) + _806;
    float _837 = (_826 * (cbMatDynParam._m0[13u].y - _807)) + _807;
    float _838 = (_826 * (cbMatDynParam._m0[13u].z - _808)) + _808;
    float _846 = ((_822 * cbMatDynParam._m0[15u].w) * (cbMatDynParam._m0[15u].x - _793)) + _793;
    float _847 = 1.0 - _846;
    float _848 = _847 * _836;
    float _849 = _847 * _837;
    float _850 = _847 * _838;
    float _854 = (_836 + (-0.039999999105930328369140625)) * _846;
    float _855 = (_837 + (-0.039999999105930328369140625)) * _846;
    float _856 = (_838 + (-0.039999999105930328369140625)) * _846;
    float _857 = _854 + 0.039999999105930328369140625;
    float _858 = _855 + 0.039999999105930328369140625;
    float _859 = _856 + 0.039999999105930328369140625;
    vec4 _868 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _660, cbSceneParam._m0[86u].y * _661));
    float _871 = _868.x * TEXCOORD_4;
    float _872 = dot(vec3(_571, _572, _573), vec3(_652, _653, _654));
    float _875 = _872 * 2.0;
    float _879 = (_875 * _571) - _652;
    float _880 = (_875 * _572) - _653;
    float _881 = (_875 * _573) - _654;
    float _885 = abs(dot(vec3(_652, _653, _654), vec3(_571, _572, _573)));
    float _3769 = isnan(0.0) ? _885 : (isnan(_885) ? 0.0 : max(_885, 0.0));
    float _887 = sqrt(_739);
    float _899 = exp2((_887 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3769 : (isnan(_3769) ? 1.0 : min(_3769, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_887 * 3.0));
    float _905 = (1.0 - _899) * ((_887 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _906 = _899 * _887;
    float _934 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _938 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _942 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1244;
    float _1246;
    float _1247;
    float _1248;
    float _1249;
    float _1250;
    float _1251;
    float _1252;
    float _1253;
    float _1254;
    float _1255;
    float _1256;
    float _1257;
    float _1258;
    float _1259;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _969 = fma(_942, cbModelParam._m0[26u].z, fma(_938, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _934));
        float _973 = fma(_942, cbModelParam._m0[27u].z, fma(_938, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _934));
        float _977 = fma(_942, cbModelParam._m0[28u].z, fma(_938, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _934));
        float _1002 = _934 + _571;
        float _1003 = _938 + _572;
        float _1004 = _942 + _573;
        float _1014 = fma(_1004, cbModelParam._m0[26u].z, fma(_1003, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1002)) - _969;
        float _1015 = fma(_1004, cbModelParam._m0[27u].z, fma(_1003, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1002)) - _973;
        float _1016 = fma(_1004, cbModelParam._m0[28u].z, fma(_1003, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1002)) - _977;
        float _1020 = inversesqrt(dot(vec3(_1014, _1015, _1016), vec3(_1014, _1015, _1016)));
        float _1033 = ((_1020 * _1014) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_969 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1034 = ((_1020 * _1015) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_973 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1035 = ((_1020 * _1016) / cbModelParam._m0[34u].z) + ((((((_977 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1038 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1033, _1034, _1035), 0.0);
        vec4 _1045 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1033, _1034, _1035), 0.0);
        vec4 _1052 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1033, _1034, _1035), 0.0);
        vec4 _1059 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1033, _1034, _1035), 0.0);
        float _1072 = exp2((_1038.w + (-0.5)) * 20.0) * 2.0;
        float _1073 = _1072 * (_1038.x + (-0.5));
        float _1074 = _1072 * (_1038.y + (-0.5));
        float _1075 = _1072 * (_1038.z + (-0.5));
        float _1082 = exp2((_1045.w + (-0.5)) * 20.0) * 2.0;
        float _1083 = _1082 * (_1045.x + (-0.5));
        float _1084 = _1082 * (_1045.y + (-0.5));
        float _1085 = _1082 * (_1045.z + (-0.5));
        float _1092 = exp2((_1052.w + (-0.5)) * 20.0) * 2.0;
        float _1093 = _1092 * (_1052.x + (-0.5));
        float _1094 = _1092 * (_1052.y + (-0.5));
        float _1095 = _1092 * (_1052.z + (-0.5));
        float _1102 = exp2((_1059.w + (-0.5)) * 20.0) * 2.0;
        float _1103 = _1102 * (_1059.x + (-0.5));
        float _1104 = _1102 * (_1059.y + (-0.5));
        float _1105 = _1102 * (_1059.z + (-0.5));
        float _1106 = isnan(0.0) ? _1103 : (isnan(_1103) ? 0.0 : max(_1103, 0.0));
        float _1107 = isnan(0.0) ? _1104 : (isnan(_1104) ? 0.0 : max(_1104, 0.0));
        float _1108 = isnan(0.0) ? _1105 : (isnan(_1105) ? 0.0 : max(_1105, 0.0));
        float _1109 = _1073 * 0.5;
        float _1110 = _1083 * 0.5;
        float _1111 = _1093 * 0.5;
        float _1112 = dot(vec3(_1109, _1110, _1111), vec3(_1109, _1110, _1111));
        float _1117 = (_1112 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1112);
        float _1126 = (dot(vec3(_571, _572, _573), vec3(_1117 * _1109, _1117 * _1110, _1117 * _1111)) + 1.0) * 0.5;
        float _3795 = isnan(0.0) ? _1126 : (isnan(_1126) ? 0.0 : max(_1126, 0.0));
        float _1136 = sqrt(((_1110 * _1110) + (_1109 * _1109)) + (_1111 * _1111)) / (_1106 + 9.9999997473787516355514526367188e-06);
        float _3806 = isnan(0.0) ? _1136 : (isnan(_1136) ? 0.0 : max(_1136, 0.0));
        float _1137 = isnan(1.0) ? _3806 : (isnan(_3806) ? 1.0 : min(_3806, 1.0));
        float _1138 = _1137 * 2.0;
        float _1142 = (1.0 - _1137) / (_1137 + 1.0);
        float _3817 = isnan(0.0) ? _1142 : (isnan(_1142) ? 0.0 : max(_1142, 0.0));
        float _1143 = isnan(1.0) ? _3817 : (isnan(_3817) ? 1.0 : min(_3817, 1.0));
        float _1152 = ((((1.0 - _1143) * (_1138 + 2.0)) * exp2(log2(isnan(1.0) ? _3795 : (isnan(_3795) ? 1.0 : min(_3795, 1.0))) * (_1138 + 1.0))) + _1143) * _1106;
        float _1153 = _1074 * 0.5;
        float _1154 = _1084 * 0.5;
        float _1155 = _1094 * 0.5;
        float _1156 = dot(vec3(_1153, _1154, _1155), vec3(_1153, _1154, _1155));
        float _1161 = (_1156 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1156);
        float _1169 = (dot(vec3(_571, _572, _573), vec3(_1161 * _1153, _1161 * _1154, _1161 * _1155)) + 1.0) * 0.5;
        float _3828 = isnan(0.0) ? _1169 : (isnan(_1169) ? 0.0 : max(_1169, 0.0));
        float _1178 = sqrt(((_1154 * _1154) + (_1153 * _1153)) + (_1155 * _1155)) / (_1107 + 9.9999997473787516355514526367188e-06);
        float _3839 = isnan(0.0) ? _1178 : (isnan(_1178) ? 0.0 : max(_1178, 0.0));
        float _1179 = isnan(1.0) ? _3839 : (isnan(_3839) ? 1.0 : min(_3839, 1.0));
        float _1180 = _1179 * 2.0;
        float _1184 = (1.0 - _1179) / (_1179 + 1.0);
        float _3850 = isnan(0.0) ? _1184 : (isnan(_1184) ? 0.0 : max(_1184, 0.0));
        float _1185 = isnan(1.0) ? _3850 : (isnan(_3850) ? 1.0 : min(_3850, 1.0));
        float _1194 = ((((1.0 - _1185) * (_1180 + 2.0)) * exp2(log2(isnan(1.0) ? _3828 : (isnan(_3828) ? 1.0 : min(_3828, 1.0))) * (_1180 + 1.0))) + _1185) * _1107;
        float _1195 = _1075 * 0.5;
        float _1196 = _1085 * 0.5;
        float _1197 = _1095 * 0.5;
        float _1198 = dot(vec3(_1195, _1196, _1197), vec3(_1195, _1196, _1197));
        float _1203 = (_1198 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1198);
        float _1211 = (dot(vec3(_571, _572, _573), vec3(_1203 * _1195, _1203 * _1196, _1203 * _1197)) + 1.0) * 0.5;
        float _3861 = isnan(0.0) ? _1211 : (isnan(_1211) ? 0.0 : max(_1211, 0.0));
        float _1220 = sqrt(((_1196 * _1196) + (_1195 * _1195)) + (_1197 * _1197)) / (_1108 + 9.9999997473787516355514526367188e-06);
        float _3872 = isnan(0.0) ? _1220 : (isnan(_1220) ? 0.0 : max(_1220, 0.0));
        float _1221 = isnan(1.0) ? _3872 : (isnan(_3872) ? 1.0 : min(_3872, 1.0));
        float _1222 = _1221 * 2.0;
        float _1226 = (1.0 - _1221) / (_1221 + 1.0);
        float _3883 = isnan(0.0) ? _1226 : (isnan(_1226) ? 0.0 : max(_1226, 0.0));
        float _1227 = isnan(1.0) ? _3883 : (isnan(_3883) ? 1.0 : min(_3883, 1.0));
        float _1236 = ((((1.0 - _1227) * (_1222 + 2.0)) * exp2(log2(isnan(1.0) ? _3861 : (isnan(_3861) ? 1.0 : min(_3861, 1.0))) * (_1222 + 1.0))) + _1227) * _1108;
        _1244 = _1075;
        _1246 = _1074;
        _1247 = _1073;
        _1248 = _1085;
        _1249 = _1084;
        _1250 = _1083;
        _1251 = _1095;
        _1252 = _1094;
        _1253 = _1093;
        _1254 = _1108;
        _1255 = _1107;
        _1256 = _1106;
        _1257 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1152 : (isnan(_1152) ? 0.0 : max(_1152, 0.0)));
        _1258 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1194 : (isnan(_1194) ? 0.0 : max(_1194, 0.0)));
        _1259 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1236 : (isnan(_1236) ? 0.0 : max(_1236, 0.0)));
    }
    else
    {
        _1244 = _1245;
        _1246 = _1245;
        _1247 = _1245;
        _1248 = _1245;
        _1249 = _1245;
        _1250 = _1245;
        _1251 = _1245;
        _1252 = _1245;
        _1253 = _1245;
        _1254 = _1245;
        _1255 = _1245;
        _1256 = _1245;
        _1257 = 0.0;
        _1258 = 0.0;
        _1259 = 0.0;
    }
    float _1554;
    float _1555;
    float _1556;
    float _1557;
    float _1558;
    float _1559;
    float _1560;
    float _1561;
    float _1562;
    float _1563;
    float _1564;
    float _1565;
    float _1566;
    float _1567;
    float _1568;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1285 = fma(_942, cbModelParam._m0[30u].z, fma(_938, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _934));
        float _1289 = fma(_942, cbModelParam._m0[31u].z, fma(_938, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _934));
        float _1293 = fma(_942, cbModelParam._m0[32u].z, fma(_938, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _934));
        float _1316 = _934 + _571;
        float _1317 = _938 + _572;
        float _1318 = _942 + _573;
        float _1328 = fma(_1318, cbModelParam._m0[30u].z, fma(_1317, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1316)) - _1285;
        float _1329 = fma(_1318, cbModelParam._m0[31u].z, fma(_1317, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1316)) - _1289;
        float _1330 = fma(_1318, cbModelParam._m0[32u].z, fma(_1317, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1316)) - _1293;
        float _1334 = inversesqrt(dot(vec3(_1328, _1329, _1330), vec3(_1328, _1329, _1330)));
        float _1347 = ((_1334 * _1328) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1285 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1348 = ((_1334 * _1329) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1289 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1349 = ((_1334 * _1330) / cbModelParam._m0[35u].z) + ((((((_1293 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1351 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1347, _1348, _1349), 0.0);
        vec4 _1358 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1347, _1348, _1349), 0.0);
        vec4 _1365 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1347, _1348, _1349), 0.0);
        vec4 _1372 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1347, _1348, _1349), 0.0);
        float _1384 = exp2((_1351.w + (-0.5)) * 20.0) * 2.0;
        float _1385 = _1384 * (_1351.x + (-0.5));
        float _1386 = _1384 * (_1351.y + (-0.5));
        float _1387 = _1384 * (_1351.z + (-0.5));
        float _1394 = exp2((_1358.w + (-0.5)) * 20.0) * 2.0;
        float _1395 = _1394 * (_1358.x + (-0.5));
        float _1396 = _1394 * (_1358.y + (-0.5));
        float _1397 = _1394 * (_1358.z + (-0.5));
        float _1404 = exp2((_1365.w + (-0.5)) * 20.0) * 2.0;
        float _1405 = _1404 * (_1365.x + (-0.5));
        float _1406 = _1404 * (_1365.y + (-0.5));
        float _1407 = _1404 * (_1365.z + (-0.5));
        float _1414 = exp2((_1372.w + (-0.5)) * 20.0) * 2.0;
        float _1415 = _1414 * (_1372.x + (-0.5));
        float _1416 = _1414 * (_1372.y + (-0.5));
        float _1417 = _1414 * (_1372.z + (-0.5));
        float _1418 = isnan(0.0) ? _1415 : (isnan(_1415) ? 0.0 : max(_1415, 0.0));
        float _1419 = isnan(0.0) ? _1416 : (isnan(_1416) ? 0.0 : max(_1416, 0.0));
        float _1420 = isnan(0.0) ? _1417 : (isnan(_1417) ? 0.0 : max(_1417, 0.0));
        float _1421 = _1385 * 0.5;
        float _1422 = _1395 * 0.5;
        float _1423 = _1405 * 0.5;
        float _1424 = dot(vec3(_1421, _1422, _1423), vec3(_1421, _1422, _1423));
        float _1429 = (_1424 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1424);
        float _1437 = (dot(vec3(_571, _572, _573), vec3(_1429 * _1421, _1429 * _1422, _1429 * _1423)) + 1.0) * 0.5;
        float _3924 = isnan(0.0) ? _1437 : (isnan(_1437) ? 0.0 : max(_1437, 0.0));
        float _1446 = sqrt(((_1422 * _1422) + (_1421 * _1421)) + (_1423 * _1423)) / (_1418 + 9.9999997473787516355514526367188e-06);
        float _3935 = isnan(0.0) ? _1446 : (isnan(_1446) ? 0.0 : max(_1446, 0.0));
        float _1447 = isnan(1.0) ? _3935 : (isnan(_3935) ? 1.0 : min(_3935, 1.0));
        float _1448 = _1447 * 2.0;
        float _1452 = (1.0 - _1447) / (_1447 + 1.0);
        float _3946 = isnan(0.0) ? _1452 : (isnan(_1452) ? 0.0 : max(_1452, 0.0));
        float _1453 = isnan(1.0) ? _3946 : (isnan(_3946) ? 1.0 : min(_3946, 1.0));
        float _1462 = ((((1.0 - _1453) * (_1448 + 2.0)) * exp2(log2(isnan(1.0) ? _3924 : (isnan(_3924) ? 1.0 : min(_3924, 1.0))) * (_1448 + 1.0))) + _1453) * _1418;
        float _1463 = _1386 * 0.5;
        float _1464 = _1396 * 0.5;
        float _1465 = _1406 * 0.5;
        float _1466 = dot(vec3(_1463, _1464, _1465), vec3(_1463, _1464, _1465));
        float _1471 = (_1466 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1466);
        float _1479 = (dot(vec3(_571, _572, _573), vec3(_1471 * _1463, _1471 * _1464, _1471 * _1465)) + 1.0) * 0.5;
        float _3957 = isnan(0.0) ? _1479 : (isnan(_1479) ? 0.0 : max(_1479, 0.0));
        float _1488 = sqrt(((_1464 * _1464) + (_1463 * _1463)) + (_1465 * _1465)) / (_1419 + 9.9999997473787516355514526367188e-06);
        float _3968 = isnan(0.0) ? _1488 : (isnan(_1488) ? 0.0 : max(_1488, 0.0));
        float _1489 = isnan(1.0) ? _3968 : (isnan(_3968) ? 1.0 : min(_3968, 1.0));
        float _1490 = _1489 * 2.0;
        float _1494 = (1.0 - _1489) / (_1489 + 1.0);
        float _3979 = isnan(0.0) ? _1494 : (isnan(_1494) ? 0.0 : max(_1494, 0.0));
        float _1495 = isnan(1.0) ? _3979 : (isnan(_3979) ? 1.0 : min(_3979, 1.0));
        float _1504 = ((((1.0 - _1495) * (_1490 + 2.0)) * exp2(log2(isnan(1.0) ? _3957 : (isnan(_3957) ? 1.0 : min(_3957, 1.0))) * (_1490 + 1.0))) + _1495) * _1419;
        float _1505 = _1387 * 0.5;
        float _1506 = _1397 * 0.5;
        float _1507 = _1407 * 0.5;
        float _1508 = dot(vec3(_1505, _1506, _1507), vec3(_1505, _1506, _1507));
        float _1513 = (_1508 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1508);
        float _1521 = (dot(vec3(_571, _572, _573), vec3(_1513 * _1505, _1513 * _1506, _1513 * _1507)) + 1.0) * 0.5;
        float _3990 = isnan(0.0) ? _1521 : (isnan(_1521) ? 0.0 : max(_1521, 0.0));
        float _1530 = sqrt(((_1506 * _1506) + (_1505 * _1505)) + (_1507 * _1507)) / (_1420 + 9.9999997473787516355514526367188e-06);
        float _4001 = isnan(0.0) ? _1530 : (isnan(_1530) ? 0.0 : max(_1530, 0.0));
        float _1531 = isnan(1.0) ? _4001 : (isnan(_4001) ? 1.0 : min(_4001, 1.0));
        float _1532 = _1531 * 2.0;
        float _1536 = (1.0 - _1531) / (_1531 + 1.0);
        float _4012 = isnan(0.0) ? _1536 : (isnan(_1536) ? 0.0 : max(_1536, 0.0));
        float _1537 = isnan(1.0) ? _4012 : (isnan(_4012) ? 1.0 : min(_4012, 1.0));
        float _1546 = ((((1.0 - _1537) * (_1532 + 2.0)) * exp2(log2(isnan(1.0) ? _3990 : (isnan(_3990) ? 1.0 : min(_3990, 1.0))) * (_1532 + 1.0))) + _1537) * _1420;
        _1554 = _1387;
        _1555 = _1386;
        _1556 = _1385;
        _1557 = _1397;
        _1558 = _1396;
        _1559 = _1395;
        _1560 = _1407;
        _1561 = _1406;
        _1562 = _1405;
        _1563 = _1420;
        _1564 = _1419;
        _1565 = _1418;
        _1566 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1462 : (isnan(_1462) ? 0.0 : max(_1462, 0.0)));
        _1567 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1504 : (isnan(_1504) ? 0.0 : max(_1504, 0.0)));
        _1568 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1546 : (isnan(_1546) ? 0.0 : max(_1546, 0.0)));
    }
    else
    {
        _1554 = _1245;
        _1555 = _1245;
        _1556 = _1245;
        _1557 = _1245;
        _1558 = _1245;
        _1559 = _1245;
        _1560 = _1245;
        _1561 = _1245;
        _1562 = _1245;
        _1563 = _1245;
        _1564 = _1245;
        _1565 = _1245;
        _1566 = 0.0;
        _1567 = 0.0;
        _1568 = 0.0;
    }
    float _1578 = (cbModelParam._m0[1u].x * (_1566 - _1257)) + _1257;
    float _1579 = (cbModelParam._m0[1u].x * (_1567 - _1258)) + _1258;
    float _1580 = (cbModelParam._m0[1u].x * (_1568 - _1259)) + _1259;
    float _1601 = fma(_1580, cbSceneParam._m0[89u].z, fma(_1579, cbSceneParam._m0[89u].y, _1578 * cbSceneParam._m0[89u].x));
    float _1604 = fma(_1580, cbSceneParam._m0[90u].z, fma(_1579, cbSceneParam._m0[90u].y, _1578 * cbSceneParam._m0[90u].x));
    float _1607 = fma(_1580, cbSceneParam._m0[91u].z, fma(_1579, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1578));
    float _1622 = _879 * 0.5;
    float _1623 = _880 * 0.5;
    float _1624 = _881 * 0.5;
    float _1625 = dot(vec4(_1622, _1623, _1624, 1.0), vec4(_1556, _1559, _1562, _1565));
    float _1628 = dot(vec4(_1622, _1623, _1624, 1.0), vec4(_1555, _1558, _1561, _1564));
    float _1631 = dot(vec4(_1622, _1623, _1624, 1.0), vec4(_1554, _1557, _1560, _1563));
    float _1662;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1638 = dot(vec4(_1622, _1623, _1624, 1.0), vec4(_1244, _1248, _1251, _1254));
        float _1642 = dot(vec4(_1622, _1623, _1624, 1.0), vec4(_1246, _1249, _1252, _1255));
        float _1646 = dot(vec4(_1622, _1623, _1624, 1.0), vec4(_1247, _1250, _1253, _1256));
        float _1653 = dot(vec4(cbModelParam._m0[39u]), vec4(_1622, _1623, _1624, 1.0));
        _1662 = dot(vec3(isnan(0.0) ? _1646 : (isnan(_1646) ? 0.0 : max(_1646, 0.0)), isnan(0.0) ? _1642 : (isnan(_1642) ? 0.0 : max(_1642, 0.0)), isnan(0.0) ? _1638 : (isnan(_1638) ? 0.0 : max(_1638, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1653) ? 0.0 : (isnan(0.0) ? _1653 : max(0.0, _1653))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1662 = 1.0;
    }
    float _1673;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1664 = dot(vec4(cbModelParam._m0[40u]), vec4(_1622, _1623, _1624, 1.0));
        _1673 = dot(vec3(isnan(0.0) ? _1625 : (isnan(_1625) ? 0.0 : max(_1625, 0.0)), isnan(0.0) ? _1628 : (isnan(_1628) ? 0.0 : max(_1628, 0.0)), isnan(0.0) ? _1631 : (isnan(_1631) ? 0.0 : max(_1631, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1664) ? 0.0 : (isnan(0.0) ? _1664 : max(0.0, _1664))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1673 = 1.0;
    }
    float _1677 = (_1673 * cbModelParam._m0[1u].x) + (_1662 * (1.0 - cbModelParam._m0[1u].x));
    float _1687 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _739);
    float _1688 = isnan(_1687) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1687 : min(cbModelParam._m0[25u].z, _1687));
    float _1768;
    float _1770;
    float _1772;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1735 = fma(_942, cbModelParam._m0[13u].z, fma(_938, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _934)) + cbModelParam._m0[13u].w;
        float _1739 = fma(_942, cbModelParam._m0[14u].z, fma(_938, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _934)) + cbModelParam._m0[14u].w;
        float _1743 = fma(_942, cbModelParam._m0[15u].z, fma(_938, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _934)) + cbModelParam._m0[15u].w;
        float _1746 = fma(_881, cbModelParam._m0[13u].z, fma(_880, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _879));
        float _1749 = fma(_881, cbModelParam._m0[14u].z, fma(_880, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _879));
        float _1752 = fma(_881, cbModelParam._m0[15u].z, fma(_880, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _879));
        float _1780;
        if (_1746 > 0.0)
        {
            _1780 = abs((1.0 - _1735) / _1746);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1746 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1735 + 1.0) / _1746);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1780 = frontier_phi_16_14_ladder;
        }
        float _2005;
        if (_1749 > 0.0)
        {
            _2005 = abs((1.0 - _1739) / _1749);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1749 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1739 + 1.0) / _1749);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2005 = frontier_phi_25_21_ladder;
        }
        float _2262;
        if (_1752 > 0.0)
        {
            _2262 = abs((1.0 - _1743) / _1752);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1752 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1743 + 1.0) / _1752);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2262 = frontier_phi_37_32_ladder;
        }
        float _2264 = isnan(_2005) ? _1780 : (isnan(_1780) ? _2005 : min(_1780, _2005));
        float _2265 = isnan(_2262) ? _2264 : (isnan(_2264) ? _2262 : min(_2264, _2262));
        float _2269 = (_2265 * _1746) + _1735;
        float _2270 = (_2265 * _1749) + _1739;
        float _2271 = (_2265 * _1752) + _1743;
        float _2272 = _2265 * 9.9999997473787516355514526367188e-05;
        float _2274 = (-1.0) - _2272;
        float _2276 = _2272 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_2271 > _2276) || ((_2271 < _2274) || ((_2270 > _2276) || ((_2270 < _2274) || ((_2269 < _2274) || (_2269 > _2276))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2399 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2271, cbModelParam._m0[9u].z, fma(_2270, cbModelParam._m0[9u].y, _2269 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2271, cbModelParam._m0[10u].z, fma(_2270, cbModelParam._m0[10u].y, _2269 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2271, cbModelParam._m0[11u].z, fma(_2270, cbModelParam._m0[11u].y, _2269 * cbModelParam._m0[11u].x))), _1688);
            frontier_phi_15_37_ladder = _2399.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2399.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2399.x * cbModelParam._m0[1u].y;
        }
        _1768 = frontier_phi_15_37_ladder_2;
        _1770 = frontier_phi_15_37_ladder_1;
        _1772 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1756 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_879, _880, _881), _1688);
        _1768 = _1756.x * cbModelParam._m0[1u].y;
        _1770 = _1756.y * cbModelParam._m0[1u].y;
        _1772 = _1756.z * cbModelParam._m0[1u].y;
    }
    float _1776 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _739);
    float _1777 = isnan(_1776) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1776 : min(cbModelParam._m0[25u].w, _1776));
    float _1868;
    float _1870;
    float _1872;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1832 = fma(_942, cbModelParam._m0[21u].z, fma(_938, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _934)) + cbModelParam._m0[21u].w;
        float _1836 = fma(_942, cbModelParam._m0[22u].z, fma(_938, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _934)) + cbModelParam._m0[22u].w;
        float _1840 = fma(_942, cbModelParam._m0[23u].z, fma(_938, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _934)) + cbModelParam._m0[23u].w;
        float _1843 = fma(_881, cbModelParam._m0[21u].z, fma(_880, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _879));
        float _1846 = fma(_881, cbModelParam._m0[22u].z, fma(_880, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _879));
        float _1849 = fma(_881, cbModelParam._m0[23u].z, fma(_880, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _879));
        float _2010;
        if (_1843 > 0.0)
        {
            _2010 = abs((1.0 - _1832) / _1843);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1843 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1832 + 1.0) / _1843);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _2010 = frontier_phi_27_23_ladder;
        }
        float _2289;
        if (_1846 > 0.0)
        {
            _2289 = abs((1.0 - _1836) / _1846);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1846 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1836 + 1.0) / _1846);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _2289 = frontier_phi_39_34_ladder;
        }
        float _2502;
        if (_1849 > 0.0)
        {
            _2502 = abs((1.0 - _1840) / _1849);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1849 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1840 + 1.0) / _1849);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _2502 = frontier_phi_48_45_ladder;
        }
        float _2504 = isnan(_2289) ? _2010 : (isnan(_2010) ? _2289 : min(_2010, _2289));
        float _2505 = isnan(_2502) ? _2504 : (isnan(_2504) ? _2502 : min(_2504, _2502));
        float _2509 = (_2505 * _1843) + _1832;
        float _2510 = (_2505 * _1846) + _1836;
        float _2511 = (_2505 * _1849) + _1840;
        float _2512 = _2505 * 9.9999997473787516355514526367188e-05;
        float _2513 = (-1.0) - _2512;
        float _2515 = _2512 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2511 > _2515) || ((_2511 < _2513) || ((_2510 > _2515) || ((_2510 < _2513) || ((_2509 < _2513) || (_2509 > _2515))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2752 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2511, cbModelParam._m0[17u].z, fma(_2510, cbModelParam._m0[17u].y, _2509 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2511, cbModelParam._m0[18u].z, fma(_2510, cbModelParam._m0[18u].y, _2509 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2511, cbModelParam._m0[19u].z, fma(_2510, cbModelParam._m0[19u].y, _2509 * cbModelParam._m0[19u].x))), _1777);
            frontier_phi_24_48_ladder = _2752.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2752.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2752.x * cbModelParam._m0[1u].z;
        }
        _1868 = frontier_phi_24_48_ladder_2;
        _1870 = frontier_phi_24_48_ladder_1;
        _1872 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1852 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_879, _880, _881), _1777);
        _1868 = _1852.x * cbModelParam._m0[1u].z;
        _1870 = _1852.y * cbModelParam._m0[1u].z;
        _1872 = _1852.z * cbModelParam._m0[1u].z;
    }
    float _1885 = (((_905 * _857) + _906) * _871) * ((cbModelParam._m0[1u].w * (_1868 - _1768)) + _1768);
    float _1887 = (((_905 * _858) + _906) * _871) * ((cbModelParam._m0[1u].w * (_1870 - _1770)) + _1770);
    float _1889 = (((_905 * _859) + _906) * _871) * ((cbModelParam._m0[1u].w * (_1872 - _1772)) + _1772);
    float _1892 = fma(_1889, cbSceneParam._m0[89u].z, fma(_1887, cbSceneParam._m0[89u].y, _1885 * cbSceneParam._m0[89u].x));
    float _1895 = fma(_1889, cbSceneParam._m0[90u].z, fma(_1887, cbSceneParam._m0[90u].y, _1885 * cbSceneParam._m0[90u].x));
    float _1898 = fma(_1889, cbSceneParam._m0[91u].z, fma(_1887, cbSceneParam._m0[91u].y, _1885 * cbSceneParam._m0[91u].x));
    vec4 _1906 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_660, _661));
    float _1908 = _1906.w;
    float _1920 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1908);
    float _1921 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1908);
    float _1922 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1908);
    uvec4 _1926 = floatBitsToUint(cbInstanceData._m0[_763 + 5u]);
    uint _1928 = _1926.x * 14u;
    uint _1929 = _1928 + 13u;
    float _1936 = _871 + (-1.0);
    float _1941 = (cbLight._m0[_1929].x * _1936) + 1.0;
    float _1942 = (cbLight._m0[_1929].y * _1936) + 1.0;
    float _1943 = (cbLight._m0[_1929].z * _1936) + 1.0;
    float _1944 = (cbLight._m0[_1929].w * _1936) + 1.0;
    uint _1945 = _1928 + 5u;
    float _1951 = isnan(1.0) ? _1942 : (isnan(_1942) ? 1.0 : min(_1942, 1.0));
    uint _1955 = _1928 + 4u;
    float _1964 = isnan(1.0) ? _1941 : (isnan(_1941) ? 1.0 : min(_1941, 1.0));
    uint _1968 = _1928 | 1u;
    float _1979 = dot(vec3(cbLight._m0[_1928].xyz), vec3(_571, _572, _573));
    float _1982 = dot(vec3(cbLight._m0[_1968].xyz), vec3(_571, _572, _573));
    float _4148 = isnan(0.0) ? _1979 : (isnan(_1979) ? 0.0 : max(_1979, 0.0));
    float _4159 = isnan(0.0) ? _1982 : (isnan(_1982) ? 0.0 : max(_1982, 0.0));
    float _1987 = (isnan(1.0) ? _4148 : (isnan(_4148) ? 1.0 : min(_4148, 1.0))) * 0.3183098733425140380859375;
    float _1989 = (isnan(1.0) ? _4159 : (isnan(_4159) ? 1.0 : min(_4159, 1.0))) * 0.3183098733425140380859375;
    float _1996 = ((cbLight._m0[_1945].x * _1951) * _1989) + (((cbLight._m0[_1955].x * _1920) * _1964) * _1987);
    float _1997 = ((_1951 * cbLight._m0[_1945].y) * _1989) + (((cbLight._m0[_1955].y * _1921) * _1964) * _1987);
    float _1998 = ((_1951 * cbLight._m0[_1945].z) * _1989) + (((cbLight._m0[_1955].z * _1922) * _1964) * _1987);
    uvec4 _2002 = floatBitsToUint(cbLight._m0[_1928 + 12u]);
    bool _2004 = _2002.x == 0u;
    float _2015;
    float _2017;
    float _2019;
    if (_2004)
    {
        _2015 = _1996;
        _2017 = _1997;
        _2019 = _1998;
    }
    else
    {
        uint _2023 = _1928 + 6u;
        float _2039 = (dot(vec3(cbLight._m0[_1928 + 2u].xyz), vec3(_571, _572, _573)) * 0.5) + 0.5;
        float _2040 = _2039 * _2039;
        float _4170 = isnan(0.0) ? _2040 : (isnan(_2040) ? 0.0 : max(_2040, 0.0));
        float _2041 = isnan(1.0) ? _4170 : (isnan(_4170) ? 1.0 : min(_4170, 1.0));
        float _2042 = isnan(1.0) ? _1943 : (isnan(_1943) ? 1.0 : min(_1943, 1.0));
        _2015 = (((cbLight._m0[_2023].x * 0.3183098733425140380859375) * _2041) * _2042) + _1996;
        _2017 = (((cbLight._m0[_2023].y * 0.3183098733425140380859375) * _2041) * _2042) + _1997;
        _2019 = (((cbLight._m0[_2023].z * 0.3183098733425140380859375) * _2041) * _2042) + _1998;
    }
    bool _2022 = _2002.y == 0u;
    float _2060;
    float _2062;
    float _2064;
    if (_2022)
    {
        _2060 = _2015;
        _2062 = _2017;
        _2064 = _2019;
    }
    else
    {
        uint _2233 = _1928 + 7u;
        float _2249 = (dot(vec3(cbLight._m0[_1928 + 3u].xyz), vec3(_571, _572, _573)) * 0.5) + 0.5;
        float _2250 = _2249 * _2249;
        float _4186 = isnan(0.0) ? _2250 : (isnan(_2250) ? 0.0 : max(_2250, 0.0));
        float _2251 = isnan(1.0) ? _4186 : (isnan(_4186) ? 1.0 : min(_4186, 1.0));
        float _2252 = isnan(1.0) ? _1944 : (isnan(_1944) ? 1.0 : min(_1944, 1.0));
        _2060 = (((cbLight._m0[_2233].x * 0.3183098733425140380859375) * _2251) * _2252) + _2015;
        _2062 = (((cbLight._m0[_2233].y * 0.3183098733425140380859375) * _2251) * _2252) + _2017;
        _2064 = (((cbLight._m0[_2233].z * 0.3183098733425140380859375) * _2251) * _2252) + _2019;
    }
    uint _2067 = _1928 + 8u;
    float _2080 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1928].w)) * _739) * 0.949999988079071044921875);
    float _2081 = _2080 * _2080;
    float _2082 = cbLight._m0[_1928].x + _652;
    float _2083 = cbLight._m0[_1928].y + _653;
    float _2084 = cbLight._m0[_1928].z + _654;
    float _2088 = inversesqrt(dot(vec3(_2082, _2083, _2084), vec3(_2082, _2083, _2084)));
    float _2089 = _2088 * _2082;
    float _2090 = _2088 * _2083;
    float _2091 = _2088 * _2084;
    float _2092 = dot(vec3(_571, _572, _573), vec3(cbLight._m0[_1928].xyz));
    float _4202 = isnan(0.0) ? _2092 : (isnan(_2092) ? 0.0 : max(_2092, 0.0));
    float _2095 = isnan(1.0) ? _4202 : (isnan(_4202) ? 1.0 : min(_4202, 1.0));
    float _4213 = isnan(0.0) ? _872 : (isnan(_872) ? 0.0 : max(_872, 0.0));
    float _2096 = isnan(1.0) ? _4213 : (isnan(_4213) ? 1.0 : min(_4213, 1.0));
    float _2097 = dot(vec3(_571, _572, _573), vec3(_2089, _2090, _2091));
    float _4224 = isnan(0.0) ? _2097 : (isnan(_2097) ? 0.0 : max(_2097, 0.0));
    float _2100 = isnan(1.0) ? _4224 : (isnan(_4224) ? 1.0 : min(_4224, 1.0));
    float _2101 = dot(vec3(cbLight._m0[_1928].xyz), vec3(_2089, _2090, _2091));
    float _4235 = isnan(0.0) ? _2101 : (isnan(_2101) ? 0.0 : max(_2101, 0.0));
    float _2105 = _2081 * _2081;
    float _2109 = ((_2100 * _2100) * (_2105 + (-1.0))) + 1.0;
    float _2117 = exp2(log2(1.0 - (isnan(1.0) ? _4235 : (isnan(_4235) ? 1.0 : min(_4235, 1.0)))) * 5.0);
    float _2118 = 0.959999978542327880859375 - _854;
    float _2120 = 0.959999978542327880859375 - _855;
    float _2121 = 0.959999978542327880859375 - _856;
    float _2128 = 1.0 - _2081;
    float _2139 = (0.5 / (((_2096 * ((_2095 * _2128) + _2081)) + 9.9999999392252902907785028219223e-09) + (((_2096 * _2128) + _2081) * _2095))) * _2095;
    float _4246 = isnan(0.0) ? _2139 : (isnan(_2139) ? 0.0 : max(_2139, 0.0));
    float _2141 = (isnan(1.0) ? _4246 : (isnan(_4246) ? 1.0 : min(_4246, 1.0))) * (_2105 / ((_2109 * _2109) * 3.141590118408203125));
    uint _2155 = _1928 + 9u;
    float _2166 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1968].w)) * _739) * 0.949999988079071044921875);
    float _2167 = _2166 * _2166;
    float _2168 = cbLight._m0[_1968].x + _652;
    float _2169 = cbLight._m0[_1968].y + _653;
    float _2170 = cbLight._m0[_1968].z + _654;
    float _2174 = inversesqrt(dot(vec3(_2168, _2169, _2170), vec3(_2168, _2169, _2170)));
    float _2175 = _2174 * _2168;
    float _2176 = _2174 * _2169;
    float _2177 = _2174 * _2170;
    float _2178 = dot(vec3(_571, _572, _573), vec3(cbLight._m0[_1968].xyz));
    float _4257 = isnan(0.0) ? _2178 : (isnan(_2178) ? 0.0 : max(_2178, 0.0));
    float _2181 = isnan(1.0) ? _4257 : (isnan(_4257) ? 1.0 : min(_4257, 1.0));
    float _2182 = dot(vec3(_571, _572, _573), vec3(_2175, _2176, _2177));
    float _4268 = isnan(0.0) ? _2182 : (isnan(_2182) ? 0.0 : max(_2182, 0.0));
    float _2185 = isnan(1.0) ? _4268 : (isnan(_4268) ? 1.0 : min(_4268, 1.0));
    float _2186 = dot(vec3(cbLight._m0[_1968].xyz), vec3(_2175, _2176, _2177));
    float _4279 = isnan(0.0) ? _2186 : (isnan(_2186) ? 0.0 : max(_2186, 0.0));
    float _2190 = _2167 * _2167;
    float _2194 = ((_2185 * _2185) * (_2190 + (-1.0))) + 1.0;
    float _2201 = exp2(log2(1.0 - (isnan(1.0) ? _4279 : (isnan(_4279) ? 1.0 : min(_4279, 1.0)))) * 5.0);
    float _2208 = 1.0 - _2167;
    float _2218 = (0.5 / (((_2096 * ((_2181 * _2208) + _2167)) + 9.9999999392252902907785028219223e-09) + (((_2096 * _2208) + _2167) * _2181))) * _2181;
    float _4290 = isnan(0.0) ? _2218 : (isnan(_2218) ? 0.0 : max(_2218, 0.0));
    float _2220 = (isnan(1.0) ? _4290 : (isnan(_4290) ? 1.0 : min(_4290, 1.0))) * (_2190 / ((_2194 * _2194) * 3.141590118408203125));
    float _2230 = (((((_2201 * _2118) + _857) * cbLight._m0[_2155].x) * _2220) * _1951) + ((((cbLight._m0[_2067].x * _1920) * ((_2117 * _2118) + _857)) * _2141) * _1964);
    float _2231 = (((((_2201 * _2120) + _858) * cbLight._m0[_2155].y) * _2220) * _1951) + ((((cbLight._m0[_2067].y * _1921) * ((_2117 * _2120) + _858)) * _2141) * _1964);
    float _2232 = (((((_2201 * _2121) + _859) * cbLight._m0[_2155].z) * _2220) * _1951) + ((((cbLight._m0[_2067].z * _1922) * ((_2117 * _2121) + _859)) * _2141) * _1964);
    float _2294;
    float _2296;
    float _2298;
    if (_2004)
    {
        _2294 = _2230;
        _2296 = _2231;
        _2298 = _2232;
    }
    else
    {
        uint _2300 = _1928 + 2u;
        uint _2304 = _1928 + 10u;
        float _2318 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2300].w)) * _739) * 0.949999988079071044921875);
        float _2319 = _2318 * _2318;
        float _2320 = cbLight._m0[_2300].x + _652;
        float _2321 = cbLight._m0[_2300].y + _653;
        float _2322 = cbLight._m0[_2300].z + _654;
        float _2326 = inversesqrt(dot(vec3(_2320, _2321, _2322), vec3(_2320, _2321, _2322)));
        float _2327 = _2326 * _2320;
        float _2328 = _2326 * _2321;
        float _2329 = _2326 * _2322;
        float _2330 = dot(vec3(_571, _572, _573), vec3(cbLight._m0[_2300].xyz));
        float _4301 = isnan(0.0) ? _2330 : (isnan(_2330) ? 0.0 : max(_2330, 0.0));
        float _2333 = isnan(1.0) ? _4301 : (isnan(_4301) ? 1.0 : min(_4301, 1.0));
        float _2334 = dot(vec3(_571, _572, _573), vec3(_2327, _2328, _2329));
        float _4312 = isnan(0.0) ? _2334 : (isnan(_2334) ? 0.0 : max(_2334, 0.0));
        float _2337 = isnan(1.0) ? _4312 : (isnan(_4312) ? 1.0 : min(_4312, 1.0));
        float _2338 = dot(vec3(cbLight._m0[_2300].xyz), vec3(_2327, _2328, _2329));
        float _4323 = isnan(0.0) ? _2338 : (isnan(_2338) ? 0.0 : max(_2338, 0.0));
        float _2342 = _2319 * _2319;
        float _2346 = ((_2337 * _2337) * (_2342 + (-1.0))) + 1.0;
        float _2353 = exp2(log2(1.0 - (isnan(1.0) ? _4323 : (isnan(_4323) ? 1.0 : min(_4323, 1.0)))) * 5.0);
        float _2360 = 1.0 - _2319;
        float _2370 = (0.5 / (((_2096 * ((_2333 * _2360) + _2319)) + 9.9999999392252902907785028219223e-09) + (((_2096 * _2360) + _2319) * _2333))) * _2333;
        float _4334 = isnan(0.0) ? _2370 : (isnan(_2370) ? 0.0 : max(_2370, 0.0));
        float _2372 = (isnan(1.0) ? _4334 : (isnan(_4334) ? 1.0 : min(_4334, 1.0))) * (_2342 / ((_2346 * _2346) * 3.141590118408203125));
        float _2373 = isnan(1.0) ? _1943 : (isnan(_1943) ? 1.0 : min(_1943, 1.0));
        _2294 = (((((_2353 * _2118) + _857) * cbLight._m0[_2304].x) * _2372) * _2373) + _2230;
        _2296 = (((((_2353 * _2120) + _858) * cbLight._m0[_2304].y) * _2372) * _2373) + _2231;
        _2298 = (((((_2353 * _2121) + _859) * cbLight._m0[_2304].z) * _2372) * _2373) + _2232;
    }
    float _2408;
    float _2410;
    float _2412;
    if (_2022)
    {
        _2408 = _2294;
        _2410 = _2296;
        _2412 = _2298;
    }
    else
    {
        uint _2419 = _1928 + 3u;
        uint _2423 = _1928 + 11u;
        float _2437 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2419].w)) * _739) * 0.949999988079071044921875);
        float _2438 = _2437 * _2437;
        float _2439 = cbLight._m0[_2419].x + _652;
        float _2440 = cbLight._m0[_2419].y + _653;
        float _2441 = cbLight._m0[_2419].z + _654;
        float _2445 = inversesqrt(dot(vec3(_2439, _2440, _2441), vec3(_2439, _2440, _2441)));
        float _2446 = _2445 * _2439;
        float _2447 = _2445 * _2440;
        float _2448 = _2445 * _2441;
        float _2449 = dot(vec3(_571, _572, _573), vec3(cbLight._m0[_2419].xyz));
        float _4350 = isnan(0.0) ? _2449 : (isnan(_2449) ? 0.0 : max(_2449, 0.0));
        float _2452 = isnan(1.0) ? _4350 : (isnan(_4350) ? 1.0 : min(_4350, 1.0));
        float _2453 = dot(vec3(_571, _572, _573), vec3(_2446, _2447, _2448));
        float _4361 = isnan(0.0) ? _2453 : (isnan(_2453) ? 0.0 : max(_2453, 0.0));
        float _2456 = isnan(1.0) ? _4361 : (isnan(_4361) ? 1.0 : min(_4361, 1.0));
        float _2457 = dot(vec3(cbLight._m0[_2419].xyz), vec3(_2446, _2447, _2448));
        float _4372 = isnan(0.0) ? _2457 : (isnan(_2457) ? 0.0 : max(_2457, 0.0));
        float _2461 = _2438 * _2438;
        float _2465 = ((_2456 * _2456) * (_2461 + (-1.0))) + 1.0;
        float _2472 = exp2(log2(1.0 - (isnan(1.0) ? _4372 : (isnan(_4372) ? 1.0 : min(_4372, 1.0)))) * 5.0);
        float _2479 = 1.0 - _2438;
        float _2489 = (0.5 / (((_2096 * ((_2452 * _2479) + _2438)) + 9.9999999392252902907785028219223e-09) + (((_2096 * _2479) + _2438) * _2452))) * _2452;
        float _4383 = isnan(0.0) ? _2489 : (isnan(_2489) ? 0.0 : max(_2489, 0.0));
        float _2491 = (isnan(1.0) ? _4383 : (isnan(_4383) ? 1.0 : min(_4383, 1.0))) * (_2461 / ((_2465 * _2465) * 3.141590118408203125));
        float _2492 = isnan(1.0) ? _1944 : (isnan(_1944) ? 1.0 : min(_1944, 1.0));
        _2408 = (((((_2472 * _2118) + _857) * cbLight._m0[_2423].x) * _2491) * _2492) + _2294;
        _2410 = (((((_2472 * _2120) + _858) * cbLight._m0[_2423].y) * _2491) * _2492) + _2296;
        _2412 = (((((_2472 * _2121) + _859) * cbLight._m0[_2423].z) * _2491) * _2492) + _2298;
    }
    float _2626;
    float _2628;
    float _2630;
    float _2632;
    float _2634;
    float _2636;
    if (_1926.y == 0u)
    {
        float _2567 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2568 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2567;
        float _2569 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2567;
        float _2570 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2567;
        uvec4 _2582 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2583 = _2582.x;
        uint _2594 = uint((float(_2582.y) * floor(float(uint(cbSceneParam._m0[85u].y * _661) / _2583))) + floor(float(uint(cbSceneParam._m0[85u].x * _660) / _2583)));
        float _2604 = (log2(_2570 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2605 = isnan(0.0) ? _2604 : (isnan(_2604) ? 0.0 : max(_2604, 0.0));
        uint _2608 = uint(isnan(14.0) ? _2605 : (isnan(_2605) ? 14.0 : min(_2605, 14.0)));
        uvec4 _2613 = texelFetch(g_lightClusterGridBuffer, int(((_2608 << 2u) + (_2594 << 6u)) >> 2u));
        uint _2614 = _2613.x;
        uint _2615 = _2582.z;
        float _2757;
        float _2759;
        float _2761;
        float _2763;
        float _2765;
        float _2767;
        if (((((1u << ((_2615 >> 4u) & 15u)) + 4294967295u) & _2614) == 0u) || ((_2615 & 240u) == 0u))
        {
            _2757 = 0.0;
            _2759 = 0.0;
            _2761 = 0.0;
            _2763 = 0.0;
            _2765 = 0.0;
            _2767 = 0.0;
        }
        else
        {
            float _2758;
            float _2760;
            float _2762;
            float _2764;
            float _2766;
            float _2768;
            float _2910 = 0.0;
            float _2911 = 0.0;
            float _2912 = 0.0;
            float _2913 = 0.0;
            float _2914 = 0.0;
            float _2915 = 0.0;
            uint _2916 = 0u;
            uint _2925;
            bool _2926;
            for (;;)
            {
                _2925 = texelFetch(g_lightClassification, int((((_2608 << 5u) + (_2594 << 9u)) + (_2916 << 2u)) >> 2u)).x;
                _2926 = _2925 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2926)
                {
                    frontier_phi_63_pred = _2915;
                    frontier_phi_63_pred_1 = _2914;
                    frontier_phi_63_pred_2 = _2913;
                    frontier_phi_63_pred_3 = _2912;
                    frontier_phi_63_pred_4 = _2911;
                    frontier_phi_63_pred_5 = _2910;
                }
                else
                {
                    float _3034;
                    float _3035;
                    float _3036;
                    float _3037;
                    float _3038;
                    float _3039;
                    uint _3040;
                    _3034 = _2910;
                    _3035 = _2911;
                    _3036 = _2912;
                    _3037 = _2913;
                    _3038 = _2914;
                    _3039 = _2915;
                    _3040 = _2925;
                    float _2966;
                    float _2967;
                    float _2968;
                    float _2969;
                    float _2970;
                    float _2971;
                    for (;;)
                    {
                        uint _3044 = uint(findLSB(_3040)) + (_2916 << 5u);
                        uint _3041 = (_3040 + 4294967295u) & _3040;
                        uint _3046 = _3044 * 48u;
                        vec4 _3060 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3046)).x, texelFetch(g_PointLightRenderingBuffer, int(_3046 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3046 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3046 + 3u)).x));
                        uint _3066 = (_3044 * 48u) + 4u;
                        vec4 _3079 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3066)).x, texelFetch(g_PointLightRenderingBuffer, int(_3066 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3066 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3066 + 3u)).x));
                        uint _3085 = (_3044 * 48u) + 8u;
                        vec3 _3096 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3085)).x, texelFetch(g_PointLightRenderingBuffer, int(_3085 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3085 + 2u)).x));
                        float _3100 = _3060.x - _2568;
                        float _3101 = _3060.y - _2569;
                        float _3102 = _3060.z - _2570;
                        float _3103 = dot(vec3(_3100, _3101, _3102), vec3(_3100, _3101, _3102));
                        float _3106 = inversesqrt(_3103);
                        float _3107 = _3106 * _3100;
                        float _3108 = _3106 * _3101;
                        float _3109 = _3106 * _3102;
                        float _3110 = dot(vec3(_684, _687, _690), vec3(_3107, _3108, _3109));
                        float _3115 = 1.0 - (_3103 * _3060.w);
                        float _4409 = isnan(0.0) ? _3115 : (isnan(_3115) ? 0.0 : max(_3115, 0.0));
                        float _3116 = isnan(1.0) ? _4409 : (isnan(_4409) ? 1.0 : min(_4409, 1.0));
                        float _3117 = sqrt(_3103) * _3079.w;
                        float _3120 = 1.39999997615814208984375 / (_3117 + 1.39999997615814208984375);
                        float _3121 = _3120 * _3120;
                        float _3124 = ((1.0 - _3121) * _3110) + _3121;
                        float _3127 = _3117 * _3117;
                        float _3131 = ((isnan(0.0) ? _3124 : (isnan(_3124) ? 0.0 : max(_3124, 0.0))) * _3116) / ((_3127 * 0.699999988079071044921875) + 1.0);
                        float _3135 = (-0.0) - _2568;
                        float _3136 = (-0.0) - _2569;
                        float _3137 = (-0.0) - _2570;
                        float _3141 = inversesqrt(dot(vec3(_3135, _3136, _3137), vec3(_3135, _3136, _3137)));
                        float _3142 = _3141 * _3135;
                        float _3143 = _3141 * _3136;
                        float _3144 = _3141 * _3137;
                        float _3152 = exp2(log2(1.0 / ((_3127 * 3.5) + 5.0)) * 0.25);
                        float _3153 = 1.0 - _887;
                        float _3160 = sqrt(1.0 - ((1.0 - (_3153 * _3153)) * (1.0 - (_3152 * _3152))));
                        float _3161 = _3160 * _3160;
                        float _3162 = _3161 * _3161;
                        float _3163 = _3142 + _3107;
                        float _3164 = _3143 + _3108;
                        float _3165 = _3144 + _3109;
                        float _3169 = inversesqrt(dot(vec3(_3163, _3164, _3165), vec3(_3163, _3164, _3165)));
                        float _3173 = dot(vec3(_684, _687, _690), vec3(_3142, _3143, _3144));
                        float _4425 = isnan(0.0) ? _3173 : (isnan(_3173) ? 0.0 : max(_3173, 0.0));
                        float _3176 = isnan(1.0) ? _4425 : (isnan(_4425) ? 1.0 : min(_4425, 1.0));
                        float _3177 = dot(vec3(_684, _687, _690), vec3(_3169 * _3163, _3169 * _3164, _3169 * _3165));
                        float _4436 = isnan(0.0) ? _3177 : (isnan(_3177) ? 0.0 : max(_3177, 0.0));
                        float _3180 = isnan(1.0) ? _4436 : (isnan(_4436) ? 1.0 : min(_4436, 1.0));
                        float _3184 = ((_3180 * _3180) * (_3162 + (-1.0))) + 1.0;
                        float _3185 = _3120 * _3161;
                        float _3186 = _3185 * _3185;
                        float _3189 = ((1.0 - _3186) * _3110) + _3186;
                        float _4447 = isnan(0.0) ? _3189 : (isnan(_3189) ? 0.0 : max(_3189, 0.0));
                        float _3190 = isnan(1.0) ? _4447 : (isnan(_4447) ? 1.0 : min(_4447, 1.0));
                        float _3191 = 1.0 - _3161;
                        float _3201 = (0.5 / (((_3190 * ((_3176 * _3191) + _3161)) + 9.9999999392252902907785028219223e-09) + (((_3190 * _3191) + _3161) * _3176))) * _3190;
                        float _4458 = isnan(0.0) ? _3201 : (isnan(_3201) ? 0.0 : max(_3201, 0.0));
                        float _3212 = (((_3162 * 3.1415927410125732421875) * (isnan(1.0) ? _4458 : (isnan(_4458) ? 1.0 : min(_4458, 1.0)))) / ((_3184 * _3184) * ((_3127 * 2.1991131305694580078125) + 3.141590118408203125))) * _3116;
                        _2969 = (_3131 * _3079.x) + _3037;
                        _2970 = (_3131 * _3079.y) + _3038;
                        _2971 = (_3131 * _3079.z) + _3039;
                        _2966 = (_3212 * _3096.x) + _3034;
                        _2967 = (_3212 * _3096.y) + _3035;
                        _2968 = (_3212 * _3096.z) + _3036;
                        if (_3041 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3034 = _2966;
                            _3035 = _2967;
                            _3036 = _2968;
                            _3037 = _2969;
                            _3038 = _2970;
                            _3039 = _2971;
                            _3040 = _3041;
                        }
                    }
                    frontier_phi_63_pred = _2971;
                    frontier_phi_63_pred_1 = _2970;
                    frontier_phi_63_pred_2 = _2969;
                    frontier_phi_63_pred_3 = _2968;
                    frontier_phi_63_pred_4 = _2967;
                    frontier_phi_63_pred_5 = _2966;
                }
                _2768 = frontier_phi_63_pred;
                _2766 = frontier_phi_63_pred_1;
                _2764 = frontier_phi_63_pred_2;
                _2762 = frontier_phi_63_pred_3;
                _2760 = frontier_phi_63_pred_4;
                _2758 = frontier_phi_63_pred_5;
                uint _2917 = _2916 + 1u;
                if (_2917 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2910 = _2758;
                    _2911 = _2760;
                    _2912 = _2762;
                    _2913 = _2764;
                    _2914 = _2766;
                    _2915 = _2768;
                    _2916 = _2917;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2757 = _2758;
            _2759 = _2760;
            _2761 = _2762;
            _2763 = _2764;
            _2765 = _2766;
            _2767 = _2768;
        }
        uvec4 _2771 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2772 = _2771.z;
        uint _2774 = (_2772 >> 8u) & 15u;
        float _2878;
        float _2880;
        float _2882;
        float _2884;
        float _2886;
        float _2888;
        if (((4294967295u << _2774) & _2614) == 0u)
        {
            _2878 = _2757;
            _2880 = _2759;
            _2882 = _2761;
            _2884 = _2763;
            _2886 = _2765;
            _2888 = _2767;
        }
        else
        {
            float _2903 = inversesqrt(dot(vec3(_2568, _2569, _2570), vec3(_2568, _2569, _2570)));
            float _2904 = _2903 * _2568;
            float _2905 = _2903 * _2569;
            float _2906 = _2903 * _2570;
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2774 < ((_2772 >> 12u) & 15u))
            {
                float _2879;
                float _2881;
                float _2883;
                float _2885;
                float _2887;
                float _2889;
                float _3017 = _2757;
                float _3018 = _2759;
                float _3019 = _2761;
                float _3020 = _2763;
                float _3021 = _2765;
                float _3022 = _2767;
                uint _3023 = _2774;
                uint _3032;
                bool _3033;
                for (;;)
                {
                    _3032 = texelFetch(g_lightClassification, int((((_2608 << 5u) + (_2594 << 9u)) + (_3023 << 2u)) >> 2u)).x;
                    _3033 = _3032 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_3033)
                    {
                        frontier_phi_69_pred = _3022;
                        frontier_phi_69_pred_1 = _3021;
                        frontier_phi_69_pred_2 = _3020;
                        frontier_phi_69_pred_3 = _3019;
                        frontier_phi_69_pred_4 = _3018;
                        frontier_phi_69_pred_5 = _3017;
                    }
                    else
                    {
                        float _3217;
                        float _3218;
                        float _3219;
                        float _3220;
                        float _3221;
                        float _3222;
                        float _3512;
                        float _3513;
                        float _3514;
                        float _3515;
                        float _3516;
                        float _3517;
                        float _3230 = _3017;
                        float _3231 = _3018;
                        float _3232 = _3019;
                        float _3233 = _3020;
                        float _3234 = _3021;
                        float _3235 = _3022;
                        uint _3236 = _3032;
                        uint _3237;
                        vec4 _3262;
                        float _3263;
                        vec4 _3278;
                        vec3 _3290;
                        vec4 _3305;
                        vec4 _3321;
                        float _3368;
                        bool _3369;
                        for (;;)
                        {
                            uint _3247 = ((_3023 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3236));
                            _3237 = (_3236 + 4294967295u) & _3236;
                            uint _3249 = _3247 * 40u;
                            _3262 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3249)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3249 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3249 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3249 + 3u)).x));
                            _3263 = _3262.w;
                            uint _3265 = (_3247 * 40u) + 4u;
                            _3278 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3265)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3265 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3265 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3265 + 3u)).x));
                            uint _3280 = (_3247 * 40u) + 8u;
                            _3290 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3280)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3280 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3280 + 2u)).x));
                            uint _3292 = (_3247 * 40u) + 16u;
                            _3305 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3292)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3292 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3292 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3292 + 3u)).x));
                            uint _3308 = (_3247 * 40u) + 20u;
                            _3321 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3308)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3308 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3308 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3308 + 3u)).x));
                            uint _3324 = (_3247 * 40u) + 24u;
                            vec4 _3337 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3324)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3324 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3324 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3324 + 3u)).x));
                            uint _3343 = (_3247 * 40u) + 28u;
                            vec4 _3356 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3343)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3343 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3343 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3343 + 3u)).x));
                            _3368 = fma(_2570, _3356.z, fma(_2569, _3356.y, _3356.x * _2568)) + _3356.w;
                            _3369 = !((fma(_2570, _3337.z, fma(_2569, _3337.y, _3337.x * _2568)) + _3337.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_3369)
                            {
                                float _3396 = _3262.x - _2568;
                                float _3397 = _3262.y - _2569;
                                float _3398 = _3262.z - _2570;
                                float _3399 = dot(vec3(_3396, _3397, _3398), vec3(_3396, _3397, _3398));
                                float _3402 = inversesqrt(_3399);
                                float _3403 = _3402 * _3396;
                                float _3404 = _3402 * _3397;
                                float _3405 = _3402 * _3398;
                                float _3409 = 1.0 - (_3399 / (_3263 * _3263));
                                float _4469 = isnan(0.0) ? _3409 : (isnan(_3409) ? 0.0 : max(_3409, 0.0));
                                float _3410 = isnan(1.0) ? _4469 : (isnan(_4469) ? 1.0 : min(_4469, 1.0));
                                float _3414 = sqrt(_3399) * _3278.w;
                                float _3416 = 1.39999997615814208984375 / (_3414 + 1.39999997615814208984375);
                                float _3417 = _3416 * _3416;
                                float _3420 = ((1.0 - _3417) * dot(vec3(_3403, _3404, _3405), vec3(_684, _687, _690))) + _3417;
                                float _3423 = _3414 * _3414;
                                float _3427 = (fma(_2570, _3305.z, fma(_2569, _3305.y, _3305.x * _2568)) + _3305.w) / _3368;
                                float _3428 = (fma(_2570, _3321.z, fma(_2569, _3321.y, _3321.x * _2568)) + _3321.w) / _3368;
                                float _3432 = 1.0 - dot(vec2(_3427, _3428), vec2(_3427, _3428));
                                float _4485 = isnan(0.0) ? _3432 : (isnan(_3432) ? 0.0 : max(_3432, 0.0));
                                float _3433 = isnan(1.0) ? _4485 : (isnan(_4485) ? 1.0 : min(_4485, 1.0));
                                float _3434 = _3433 * (((isnan(0.0) ? _3420 : (isnan(_3420) ? 0.0 : max(_3420, 0.0))) * _3410) / ((_3423 * 0.699999988079071044921875) + 1.0));
                                float _3446 = exp2(log2(1.0 / ((_3423 * 3.5) + 5.0)) * 0.25);
                                float _3447 = 1.0 - _887;
                                float _3454 = sqrt(1.0 - ((1.0 - (_3447 * _3447)) * (1.0 - (_3446 * _3446))));
                                float _3455 = _3454 * _3454;
                                float _3456 = _3455 * _3455;
                                float _3457 = _3403 - _2904;
                                float _3458 = _3404 - _2905;
                                float _3459 = _3405 - _2906;
                                float _3463 = inversesqrt(dot(vec3(_3457, _3458, _3459), vec3(_3457, _3458, _3459)));
                                float _3467 = dot(vec3(_684, _687, _690), vec3((-0.0) - _2904, (-0.0) - _2905, (-0.0) - _2906));
                                float _4496 = isnan(0.0) ? _3467 : (isnan(_3467) ? 0.0 : max(_3467, 0.0));
                                float _3470 = isnan(1.0) ? _4496 : (isnan(_4496) ? 1.0 : min(_4496, 1.0));
                                float _3471 = dot(vec3(_684, _687, _690), vec3(_3463 * _3457, _3463 * _3458, _3463 * _3459));
                                float _4507 = isnan(0.0) ? _3471 : (isnan(_3471) ? 0.0 : max(_3471, 0.0));
                                float _3474 = isnan(1.0) ? _4507 : (isnan(_4507) ? 1.0 : min(_4507, 1.0));
                                float _3478 = ((_3474 * _3474) * (_3456 + (-1.0))) + 1.0;
                                float _3479 = _3416 * _3455;
                                float _3480 = _3479 * _3479;
                                float _3486 = ((1.0 - _3480) * dot(vec3(_684, _687, _690), vec3(_3403, _3404, _3405))) + _3480;
                                float _4518 = isnan(0.0) ? _3486 : (isnan(_3486) ? 0.0 : max(_3486, 0.0));
                                float _3487 = isnan(1.0) ? _4518 : (isnan(_4518) ? 1.0 : min(_4518, 1.0));
                                float _3488 = 1.0 - _3455;
                                float _3498 = (0.5 / (((_3487 * ((_3470 * _3488) + _3455)) + 9.9999999392252902907785028219223e-09) + (((_3487 * _3488) + _3455) * _3470))) * _3487;
                                float _4529 = isnan(0.0) ? _3498 : (isnan(_3498) ? 0.0 : max(_3498, 0.0));
                                float _3508 = (_3433 * _3410) * (((_3456 * 3.1415927410125732421875) * (isnan(1.0) ? _4529 : (isnan(_4529) ? 1.0 : min(_4529, 1.0)))) / ((_3478 * _3478) * ((_3423 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_75_pred = _3434 * _3278.z;
                                frontier_phi_75_pred_1 = _3434 * _3278.y;
                                frontier_phi_75_pred_2 = _3434 * _3278.x;
                                frontier_phi_75_pred_3 = _3508 * _3290.z;
                                frontier_phi_75_pred_4 = _3508 * _3290.y;
                                frontier_phi_75_pred_5 = _3508 * _3290.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _3517 = frontier_phi_75_pred;
                            _3516 = frontier_phi_75_pred_1;
                            _3515 = frontier_phi_75_pred_2;
                            _3514 = frontier_phi_75_pred_3;
                            _3513 = frontier_phi_75_pred_4;
                            _3512 = frontier_phi_75_pred_5;
                            _3220 = _3515 + _3233;
                            _3221 = _3516 + _3234;
                            _3222 = _3517 + _3235;
                            _3217 = _3512 + _3230;
                            _3218 = _3513 + _3231;
                            _3219 = _3514 + _3232;
                            if (_3237 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3230 = _3217;
                                _3231 = _3218;
                                _3232 = _3219;
                                _3233 = _3220;
                                _3234 = _3221;
                                _3235 = _3222;
                                _3236 = _3237;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _3222;
                        frontier_phi_69_pred_1 = _3221;
                        frontier_phi_69_pred_2 = _3220;
                        frontier_phi_69_pred_3 = _3219;
                        frontier_phi_69_pred_4 = _3218;
                        frontier_phi_69_pred_5 = _3217;
                    }
                    _2889 = frontier_phi_69_pred;
                    _2887 = frontier_phi_69_pred_1;
                    _2885 = frontier_phi_69_pred_2;
                    _2883 = frontier_phi_69_pred_3;
                    _2881 = frontier_phi_69_pred_4;
                    _2879 = frontier_phi_69_pred_5;
                    uint _3024 = _3023 + 1u;
                    if (_3024 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3017 = _2879;
                        _3018 = _2881;
                        _3019 = _2883;
                        _3020 = _2885;
                        _3021 = _2887;
                        _3022 = _2889;
                        _3023 = _3024;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2889;
                frontier_phi_57_58_ladder_1 = _2887;
                frontier_phi_57_58_ladder_2 = _2885;
                frontier_phi_57_58_ladder_3 = _2883;
                frontier_phi_57_58_ladder_4 = _2881;
                frontier_phi_57_58_ladder_5 = _2879;
            }
            else
            {
                frontier_phi_57_58_ladder = _2767;
                frontier_phi_57_58_ladder_1 = _2765;
                frontier_phi_57_58_ladder_2 = _2763;
                frontier_phi_57_58_ladder_3 = _2761;
                frontier_phi_57_58_ladder_4 = _2759;
                frontier_phi_57_58_ladder_5 = _2757;
            }
            _2878 = frontier_phi_57_58_ladder_5;
            _2880 = frontier_phi_57_58_ladder_4;
            _2882 = frontier_phi_57_58_ladder_3;
            _2884 = frontier_phi_57_58_ladder_2;
            _2886 = frontier_phi_57_58_ladder_1;
            _2888 = frontier_phi_57_58_ladder;
        }
        float _2893 = isnan(1.0) ? _871 : (isnan(_871) ? 1.0 : min(_871, 1.0));
        _2626 = (_2893 * _2884) + _2060;
        _2628 = (_2893 * _2886) + _2062;
        _2630 = (_2893 * _2888) + _2064;
        _2632 = ((_2878 * _857) * _2893) + _2408;
        _2634 = ((_2880 * _858) * _2893) + _2410;
        _2636 = ((_2882 * _859) * _2893) + _2412;
    }
    else
    {
        _2626 = _2060;
        _2628 = _2062;
        _2630 = _2064;
        _2632 = _2408;
        _2634 = _2410;
        _2636 = _2412;
    }
    uint _2642 = _764 + uint(cbMatDynParam._m0[0u].w);
    float _2652 = ((((cbMtdParam._m0[12u].x * cbMtdParam._m0[16u].z) * cbMtdParam._m0[15u].w) * _509) * _522.x) * cbInstanceData._m0[_2642].x;
    float _2657 = ((((cbMtdParam._m0[12u].y * cbMtdParam._m0[16u].z) * cbMtdParam._m0[15u].w) * _509) * _522.y) * cbInstanceData._m0[_2642].y;
    float _2662 = ((((cbMtdParam._m0[12u].z * cbMtdParam._m0[16u].z) * cbMtdParam._m0[15u].w) * _509) * _522.z) * cbInstanceData._m0[_2642].z;
    float _4545 = isnan(0.0) ? _848 : (isnan(_848) ? 0.0 : max(_848, 0.0));
    float _4556 = isnan(0.0) ? _849 : (isnan(_849) ? 0.0 : max(_849, 0.0));
    float _4567 = isnan(0.0) ? _850 : (isnan(_850) ? 0.0 : max(_850, 0.0));
    float _4578 = isnan(0.0) ? _574 : (isnan(_574) ? 0.0 : max(_574, 0.0));
    float _2680 = (((isnan(1.0) ? _4545 : (isnan(_4545) ? 1.0 : min(_4545, 1.0))) * (_2626 + ((isnan(0.0) ? _1601 : (isnan(_1601) ? 0.0 : max(_1601, 0.0))) * _871))) + ((_2632 + ((isnan(0.0) ? _1892 : (isnan(_1892) ? 0.0 : max(_1892, 0.0))) * _1677)) * cbPerFrame._m0[3u].x)) + _2652;
    float _2682 = (_2657 + ((_2634 + ((isnan(0.0) ? _1895 : (isnan(_1895) ? 0.0 : max(_1895, 0.0))) * _1677)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4556 : (isnan(_4556) ? 1.0 : min(_4556, 1.0))) * (_2628 + ((isnan(0.0) ? _1604 : (isnan(_1604) ? 0.0 : max(_1604, 0.0))) * _871)));
    float _2684 = (_2662 + ((_2636 + ((isnan(0.0) ? _1898 : (isnan(_1898) ? 0.0 : max(_1898, 0.0))) * _1677)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4567 : (isnan(_4567) ? 1.0 : min(_4567, 1.0))) * (_2630 + ((isnan(0.0) ? _1607 : (isnan(_1607) ? 0.0 : max(_1607, 0.0))) * _871)));
    float _4604 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2697 = isnan(1.0) ? _4604 : (isnan(_4604) ? 1.0 : min(_4604, 1.0));
    float _2702 = cbInstanceData._m0[_763 + 6u].w * (isnan(1.0) ? _4578 : (isnan(_4578) ? 1.0 : min(_4578, 1.0)));
    float _2707 = _660 / cbSceneParam._m0[86u].x;
    float _2708 = _661 / cbSceneParam._m0[86u].y;
    vec4 _2722 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2707, _2708, (log2((isnan(cbSceneParam._m0[77u].w) ? _595 : (isnan(_595) ? cbSceneParam._m0[77u].w : min(_595, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2724 = _2722.x;
    float _2725 = _2722.y;
    float _2726 = _2722.z;
    float _2727 = _2722.w;
    float _2819;
    float _2821;
    float _2823;
    float _2825;
    if (_595 > cbSceneParam._m0[78u].w)
    {
        float _2782 = isnan(_595) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _595 : min(cbSceneParam._m0[80u].w, _595));
        float _2783 = _2782 / _595;
        float _2794 = _2783 * _645;
        float _2795 = _646 * _2783;
        float _2796 = (-0.0) - _2795;
        float _2797 = _2783 * _647;
        float _2799 = (cbSceneParam._m0[77u].w * _2796) / _2782;
        float _2800 = _2799 + cbSceneParam._m0[79u].w;
        float _2801 = cbSceneParam._m0[79u].w - _2795;
        float _2807 = sqrt(((_2794 * _2794) + (_2795 * _2795)) + (_2797 * _2797));
        float _2810 = (1.0 - (cbSceneParam._m0[77u].w / _2782)) * _2807;
        float _2815 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2817 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2979;
        if (abs((_2796 - _2799) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2979 = ((((_2800 > 0.0) ? exp2(_2815 * _2800) : (2.0 - exp2(_2817 * _2800))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2810;
        }
        else
        {
            float _2939 = 1.0 / cbSceneParam._m0[80u].x;
            float _2940 = isnan(_2801) ? _2800 : (isnan(_2800) ? _2801 : max(_2800, _2801));
            float _2941 = isnan(_2801) ? _2800 : (isnan(_2800) ? _2801 : min(_2800, _2801));
            float _2950 = isnan(0.0) ? _2940 : (isnan(_2940) ? 0.0 : min(_2940, 0.0));
            float _2951 = isnan(0.0) ? _2941 : (isnan(_2941) ? 0.0 : min(_2941, 0.0));
            _2979 = ((abs(_2807 / _2796) * cbSceneParam._m0[80u].y) * ((((_2950 - _2951) * 2.0) - ((exp2(_2815 * (isnan(0.0) ? _2940 : (isnan(_2940) ? 0.0 : max(_2940, 0.0)))) - exp2(_2815 * (isnan(0.0) ? _2941 : (isnan(_2941) ? 0.0 : max(_2941, 0.0))))) * _2939)) - ((exp2(_2817 * _2950) - exp2(_2817 * _2951)) * _2939))) + (_2810 * cbSceneParam._m0[80u].z);
        }
        vec4 _2981 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2707, _2708, 1.0), 0.0);
        float _2990 = exp2((_2979 * (-1.44269502162933349609375)) * (1.0 - _2981.w));
        float _2991 = log2(_2990);
        float _3007 = log2(_2727);
        _2819 = (exp2(_3007 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2991 * cbSceneParam._m0[78u].x)) * _2981.x) / cbSceneParam._m0[78u].x)) + _2724;
        _2821 = (exp2(_3007 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2991 * cbSceneParam._m0[78u].y)) * _2981.y) / cbSceneParam._m0[78u].y)) + _2725;
        _2823 = (exp2(_3007 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2991 * cbSceneParam._m0[78u].z)) * _2981.z) / cbSceneParam._m0[78u].z)) + _2726;
        _2825 = _2990 * _2727;
    }
    else
    {
        _2819 = _2724;
        _2821 = _2725;
        _2823 = _2726;
        _2825 = _2727;
    }
    float _2837 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2838 = _2837 == 3.0;
    float _2839 = log2(_2825);
    float _2843 = exp2(_2839 * cbSceneParam._m0[78u].x);
    float _2844 = exp2(_2839 * cbSceneParam._m0[78u].y);
    float _2845 = exp2(_2839 * cbSceneParam._m0[78u].z);
    float _2846 = _2843 * (isnan(0.0) ? _2680 : (isnan(_2680) ? 0.0 : max(_2680, 0.0)));
    float _2847 = _2844 * (isnan(0.0) ? _2682 : (isnan(_2682) ? 0.0 : max(_2682, 0.0)));
    float _2848 = _2845 * (isnan(0.0) ? _2684 : (isnan(_2684) ? 0.0 : max(_2684, 0.0)));
    float _2857 = (_2837 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2857 * (_2838 ? _2846 : (_2846 + (cbSceneParam._m0[72u].w * _2819)));
    SV_Target.y = _2857 * (_2838 ? _2847 : (_2847 + (cbSceneParam._m0[72u].w * _2821)));
    SV_Target.z = _2857 * (_2838 ? _2848 : (_2848 + (cbSceneParam._m0[72u].w * _2823)));
    SV_Target.w = _2702;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2652) * _2697) * _2843) * _2857;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2657) * _2697) * _2844) * _2857;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2662) * _2697) * _2845) * _2857;
    SV_Target_1.w = _2702;
}


