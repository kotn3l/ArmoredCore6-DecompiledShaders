#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[18];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_1;
layout(set = 0, binding = 1) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_7;
layout(set = 0, binding = 10) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_6;
layout(set = 0, binding = 12) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_0;
layout(set = 0, binding = 3) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_10;
layout(set = 0, binding = 4) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_11;
layout(set = 0, binding = 5) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_12;
layout(set = 0, binding = 6) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_2;
layout(set = 0, binding = 7) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_4;
layout(set = 0, binding = 9) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_5;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1366;
float _3799;
float _3800;
float _3801;
float _3802;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _215 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _216 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _217 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _223 = inversesqrt(dot(vec3(_215, _216, _217), vec3(_215, _216, _217)));
    float _230 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _231 = _230 * NORMAL.x;
    float _232 = _230 * NORMAL.y;
    float _233 = _230 * NORMAL.z;
    float _237 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _245;
    float _246;
    float _247;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _245 = (-0.0) - _231;
        _246 = (-0.0) - _232;
        _247 = (-0.0) - _233;
    }
    else
    {
        _245 = _231;
        _246 = _232;
        _247 = _233;
    }
    vec4 _260 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _265 = _260.z;
    float _266 = _260.w;
    float _272 = exp2(log2(_265 * 22.0) * 260.0);
    float _273 = isnan(0.0) ? _272 : (isnan(_272) ? 0.0 : max(_272, 0.0));
    float _274 = isnan(1.0) ? _273 : (isnan(_273) ? 1.0 : min(_273, 1.0));
    vec4 _288 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _299 = cbMtdParam._m0[10u].x * _288.x;
    float _300 = cbMtdParam._m0[10u].y * _288.y;
    float _301 = cbMtdParam._m0[10u].z * _288.z;
    vec4 _313 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _329 = exp2(log2(1.0 - _266) * 8.0);
    vec4 _341 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_10, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _357 = exp2(log2(_266) * 8.0);
    vec4 _370 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _395 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _417 = (((((_313.x * 4.55000019073486328125) * cbMtdParam._m0[9u].x) * _395.x) - _299) * _274) + _299;
    float _418 = (((((_313.y * 4.55000019073486328125) * cbMtdParam._m0[9u].y) * _395.y) - _300) * _274) + _300;
    float _419 = (((((_313.z * 4.55000019073486328125) * cbMtdParam._m0[9u].z) * _395.z) - _301) * _274) + _301;
    float _426 = (((cbMtdParam._m0[13u].x * _341.x) - _417) * _329) + _417;
    float _427 = (((cbMtdParam._m0[13u].y * _341.y) - _418) * _329) + _418;
    float _428 = (((cbMtdParam._m0[13u].z * _341.z) - _419) * _329) + _419;
    float _435 = (((cbMtdParam._m0[11u].x * _370.x) - _426) * _357) + _426;
    float _436 = (((cbMtdParam._m0[11u].y * _370.y) - _427) * _357) + _427;
    float _437 = (((cbMtdParam._m0[11u].z * _370.z) - _428) * _357) + _428;
    float _438 = _395.w * _313.w;
    float _469 = (((texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w)).x - cbMtdParam._m0[17u].x) + cbMtdParam._m0[16u].x) * _274) + cbMtdParam._m0[17u].x;
    float _472 = ((cbMtdParam._m0[15u].z - _469) * _329) + _469;
    float _475 = ((cbMtdParam._m0[16u].w - _472) * _357) + _472;
    vec4 _487 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w));
    float _489 = _487.x;
    float _490 = _487.y;
    float _496 = cbMtdParam._m0[14u].y + _487.z;
    vec4 _508 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w));
    vec4 _527 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    vec4 _545 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _556 = ((((_265 * 2.0) * (cbMtdParam._m0[14u].x + _508.z)) - _496) * _274) + _496;
    float _560 = (((_527.z - _556) + cbMtdParam._m0[15u].y) * _329) + _556;
    float _564 = (((_545.z - _560) + cbMtdParam._m0[14u].w) * _357) + _560;
    float _578 = abs((fract(cbMtdParam._m0[15u].x * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _3821 = isnan(0.0) ? _578 : (isnan(_578) ? 0.0 : max(_578, 0.0));
    float _579 = isnan(1.0) ? _3821 : (isnan(_3821) ? 1.0 : min(_3821, 1.0));
    float _584 = (_579 * _579) * (3.0 - (_579 * 2.0));
    vec4 _597 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _605 = (_260.x * 2.0) + (-1.0);
    float _606 = (_260.y * 2.0) + (-1.0);
    float _607 = dot(vec2(_605, _606), vec2(_605, _606));
    float _3832 = isnan(0.0) ? _607 : (isnan(_607) ? 0.0 : max(_607, 0.0));
    float _612 = sqrt(1.0 - (isnan(1.0) ? _3832 : (isnan(_3832) ? 1.0 : min(_3832, 1.0))));
    float _617 = ((_508.x - _489) * _274) + _489;
    float _618 = ((_508.y - _490) * _274) + _490;
    float _623 = ((_527.x - _617) * _329) + _617;
    float _624 = ((_527.y - _618) * _329) + _618;
    float _637 = (cbMtdParam._m0[14u].z * (((((_545.x - _623) * _357) + _623) * 2.0) + (-1.0))) + _605;
    float _638 = (cbMtdParam._m0[14u].z * (((((_545.y - _624) * _357) + _624) * 2.0) + (-1.0))) + _606;
    float _641 = fma(_612, _245, fma(_638, _237 * TANGENT.x, (_223 * _215) * _637));
    float _644 = fma(_612, _246, fma(_638, _237 * TANGENT.y, (_223 * _216) * _637));
    float _647 = fma(_612, _247, fma(_638, _237 * TANGENT.z, (_223 * _217) * _637));
    float _651 = inversesqrt(dot(vec3(_641, _644, _647), vec3(_641, _644, _647)));
    float _652 = _651 * _641;
    float _653 = _651 * _644;
    float _654 = _651 * _647;
    float _3843 = isnan(0.0) ? _438 : (isnan(_438) ? 0.0 : max(_438, 0.0));
    float _655 = isnan(1.0) ? _3843 : (isnan(_3843) ? 1.0 : min(_3843, 1.0));
    float _3854 = isnan(0.0) ? _564 : (isnan(_564) ? 0.0 : max(_564, 0.0));
    float _656 = isnan(1.0) ? _3854 : (isnan(_3854) ? 1.0 : min(_3854, 1.0));
    float _3865 = isnan(0.0) ? _435 : (isnan(_435) ? 0.0 : max(_435, 0.0));
    float _657 = isnan(1.0) ? _3865 : (isnan(_3865) ? 1.0 : min(_3865, 1.0));
    float _3876 = isnan(0.0) ? _436 : (isnan(_436) ? 0.0 : max(_436, 0.0));
    float _658 = isnan(1.0) ? _3876 : (isnan(_3876) ? 1.0 : min(_3876, 1.0));
    float _3887 = isnan(0.0) ? _437 : (isnan(_437) ? 0.0 : max(_437, 0.0));
    float _659 = isnan(1.0) ? _3887 : (isnan(_3887) ? 1.0 : min(_3887, 1.0));
    float _3898 = isnan(0.0) ? _475 : (isnan(_475) ? 0.0 : max(_475, 0.0));
    float _660 = isnan(1.0) ? _3898 : (isnan(_3898) ? 1.0 : min(_3898, 1.0));
    float _676 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _716 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _726 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _716);
    float _727 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _716);
    float _728 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _716);
    float _732 = inversesqrt(dot(vec3(_726, _727, _728), vec3(_726, _727, _728)));
    float _733 = _726 * _732;
    float _734 = _727 * _732;
    float _735 = _728 * _732;
    vec4 _740 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _742 = _740.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1045 = sqrt(((_726 * _726) + (_727 * _727)) + (_728 * _728));
        float _1051 = (cbMatDynParam._m0[5u].x * _1045) + cbMatDynParam._m0[5u].y;
        float _3909 = isnan(0.0) ? _1051 : (isnan(_1051) ? 0.0 : max(_1051, 0.0));
        float _1052 = isnan(1.0) ? _3909 : (isnan(_3909) ? 1.0 : min(_3909, 1.0));
        float _1056 = (cbMatDynParam._m0[5u].z * _1045) + cbMatDynParam._m0[5u].w;
        float _3920 = isnan(0.0) ? _1056 : (isnan(_1056) ? 0.0 : max(_1056, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3920 : (isnan(_3920) ? 1.0 : min(_3920, 1.0))) - _1052)) + _1052) < ((_742 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _753 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _754 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _756 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _758 = _756.w;
    float _776 = fma(_654, cbSceneParam._m0[5u].z, fma(_653, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _652));
    float _779 = fma(_654, cbSceneParam._m0[6u].z, fma(_653, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _652));
    float _782 = fma(_654, cbSceneParam._m0[7u].z, fma(_653, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _652));
    vec4 _784 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _786 = _784.x;
    float _798 = (((_784.y - _656) + (_784.w * _656)) * cbMtdParam._m0[3u].x) + _656;
    vec4 _799 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _815 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3(cbMtdParam._m0[3u].x * (_786 * _786)), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * _799.z;
    float _823 = (((cbMatDynParam._m0[15u].x - _660) * cbMatDynParam._m0[15u].w) * _815) + _660;
    float _831 = ((_815 * cbMatDynParam._m0[16u].z) * (cbMatDynParam._m0[16u].x - _798)) + _798;
    uint _855 = uint(roundEven(NORMAL.w)) * 13u;
    uint _856 = _855 + 9u;
    uint _857 = _856 + uint(cbMatDynParam._m0[0u].w);
    float _863 = (cbMtdParam._m0[0u].x * _657) * cbInstanceData._m0[_857].x;
    float _864 = (cbMtdParam._m0[0u].y * _658) * cbInstanceData._m0[_857].y;
    float _865 = (cbMtdParam._m0[0u].z * _659) * cbInstanceData._m0[_857].z;
    float _3931 = isnan(0.0) ? _863 : (isnan(_863) ? 0.0 : max(_863, 0.0));
    float _866 = isnan(1.0) ? _3931 : (isnan(_3931) ? 1.0 : min(_3931, 1.0));
    float _3942 = isnan(0.0) ? _864 : (isnan(_864) ? 0.0 : max(_864, 0.0));
    float _867 = isnan(1.0) ? _3942 : (isnan(_3942) ? 1.0 : min(_3942, 1.0));
    float _3953 = isnan(0.0) ? _865 : (isnan(_865) ? 0.0 : max(_865, 0.0));
    float _868 = isnan(1.0) ? _3953 : (isnan(_3953) ? 1.0 : min(_3953, 1.0));
    vec4 _869 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _874 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _885 = (((_874.x - _823) + (_874.w * _823)) * cbMtdParam._m0[3u].x) + _823;
    float _898 = (cbMtdParam._m0[3u].x * (((_866 * _758) - _866) + _869.x)) + _866;
    float _899 = (cbMtdParam._m0[3u].x * (((_867 * _758) - _867) + _869.y)) + _867;
    float _900 = (cbMtdParam._m0[3u].x * (((_868 * _758) - _868) + _869.z)) + _868;
    float _914 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3((_823 * (_657 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625, (_823 * (_658 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625, (_823 * (_659 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w)).z;
    float _918 = _914 * cbMatDynParam._m0[13u].w;
    float _928 = (_918 * (cbMatDynParam._m0[13u].x - _898)) + _898;
    float _929 = (_918 * (cbMatDynParam._m0[13u].y - _899)) + _899;
    float _930 = (_918 * (cbMatDynParam._m0[13u].z - _900)) + _900;
    float _938 = ((_914 * cbMatDynParam._m0[15u].w) * (cbMatDynParam._m0[15u].x - _885)) + _885;
    float _939 = 1.0 - _938;
    float _940 = _939 * _928;
    float _941 = _939 * _929;
    float _942 = _939 * _930;
    float _946 = (_928 + (-0.039999999105930328369140625)) * _938;
    float _947 = (_929 + (-0.039999999105930328369140625)) * _938;
    float _948 = (_930 + (-0.039999999105930328369140625)) * _938;
    float _949 = _946 + 0.039999999105930328369140625;
    float _950 = _947 + 0.039999999105930328369140625;
    float _951 = _948 + 0.039999999105930328369140625;
    vec4 _960 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _753, cbSceneParam._m0[86u].y * _754));
    float _963 = _960.x * TEXCOORD_4;
    float _964 = dot(vec3(_652, _653, _654), vec3(_733, _734, _735));
    float _967 = _964 * 2.0;
    float _971 = (_967 * _652) - _733;
    float _972 = (_967 * _653) - _734;
    float _973 = (_967 * _654) - _735;
    float _977 = abs(dot(vec3(_733, _734, _735), vec3(_652, _653, _654)));
    float _3964 = isnan(0.0) ? _977 : (isnan(_977) ? 0.0 : max(_977, 0.0));
    float _979 = sqrt(_831);
    float _991 = exp2((_979 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3964 : (isnan(_3964) ? 1.0 : min(_3964, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_979 * 3.0));
    float _997 = (1.0 - _991) * ((_979 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _998 = _991 * _979;
    float _1026 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1030 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1034 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1365;
    float _1367;
    float _1368;
    float _1369;
    float _1370;
    float _1371;
    float _1372;
    float _1373;
    float _1374;
    float _1375;
    float _1376;
    float _1377;
    float _1378;
    float _1379;
    float _1380;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1090 = fma(_1034, cbModelParam._m0[26u].z, fma(_1030, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1026));
        float _1094 = fma(_1034, cbModelParam._m0[27u].z, fma(_1030, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1026));
        float _1098 = fma(_1034, cbModelParam._m0[28u].z, fma(_1030, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1026));
        float _1123 = _1026 + _652;
        float _1124 = _1030 + _653;
        float _1125 = _1034 + _654;
        float _1135 = fma(_1125, cbModelParam._m0[26u].z, fma(_1124, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1123)) - _1090;
        float _1136 = fma(_1125, cbModelParam._m0[27u].z, fma(_1124, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1123)) - _1094;
        float _1137 = fma(_1125, cbModelParam._m0[28u].z, fma(_1124, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1123)) - _1098;
        float _1141 = inversesqrt(dot(vec3(_1135, _1136, _1137), vec3(_1135, _1136, _1137)));
        float _1154 = ((_1141 * _1135) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1090 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1155 = ((_1141 * _1136) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1094 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1156 = ((_1141 * _1137) / cbModelParam._m0[34u].z) + ((((((_1098 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1159 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1154, _1155, _1156), 0.0);
        vec4 _1166 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1154, _1155, _1156), 0.0);
        vec4 _1173 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1154, _1155, _1156), 0.0);
        vec4 _1180 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1154, _1155, _1156), 0.0);
        float _1193 = exp2((_1159.w + (-0.5)) * 20.0) * 2.0;
        float _1194 = _1193 * (_1159.x + (-0.5));
        float _1195 = _1193 * (_1159.y + (-0.5));
        float _1196 = _1193 * (_1159.z + (-0.5));
        float _1203 = exp2((_1166.w + (-0.5)) * 20.0) * 2.0;
        float _1204 = _1203 * (_1166.x + (-0.5));
        float _1205 = _1203 * (_1166.y + (-0.5));
        float _1206 = _1203 * (_1166.z + (-0.5));
        float _1213 = exp2((_1173.w + (-0.5)) * 20.0) * 2.0;
        float _1214 = _1213 * (_1173.x + (-0.5));
        float _1215 = _1213 * (_1173.y + (-0.5));
        float _1216 = _1213 * (_1173.z + (-0.5));
        float _1223 = exp2((_1180.w + (-0.5)) * 20.0) * 2.0;
        float _1224 = _1223 * (_1180.x + (-0.5));
        float _1225 = _1223 * (_1180.y + (-0.5));
        float _1226 = _1223 * (_1180.z + (-0.5));
        float _1227 = isnan(0.0) ? _1224 : (isnan(_1224) ? 0.0 : max(_1224, 0.0));
        float _1228 = isnan(0.0) ? _1225 : (isnan(_1225) ? 0.0 : max(_1225, 0.0));
        float _1229 = isnan(0.0) ? _1226 : (isnan(_1226) ? 0.0 : max(_1226, 0.0));
        float _1230 = _1194 * 0.5;
        float _1231 = _1204 * 0.5;
        float _1232 = _1214 * 0.5;
        float _1233 = dot(vec3(_1230, _1231, _1232), vec3(_1230, _1231, _1232));
        float _1238 = (_1233 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1233);
        float _1247 = (dot(vec3(_652, _653, _654), vec3(_1238 * _1230, _1238 * _1231, _1238 * _1232)) + 1.0) * 0.5;
        float _3990 = isnan(0.0) ? _1247 : (isnan(_1247) ? 0.0 : max(_1247, 0.0));
        float _1257 = sqrt(((_1231 * _1231) + (_1230 * _1230)) + (_1232 * _1232)) / (_1227 + 9.9999997473787516355514526367188e-06);
        float _4001 = isnan(0.0) ? _1257 : (isnan(_1257) ? 0.0 : max(_1257, 0.0));
        float _1258 = isnan(1.0) ? _4001 : (isnan(_4001) ? 1.0 : min(_4001, 1.0));
        float _1259 = _1258 * 2.0;
        float _1263 = (1.0 - _1258) / (_1258 + 1.0);
        float _4012 = isnan(0.0) ? _1263 : (isnan(_1263) ? 0.0 : max(_1263, 0.0));
        float _1264 = isnan(1.0) ? _4012 : (isnan(_4012) ? 1.0 : min(_4012, 1.0));
        float _1273 = ((((1.0 - _1264) * (_1259 + 2.0)) * exp2(log2(isnan(1.0) ? _3990 : (isnan(_3990) ? 1.0 : min(_3990, 1.0))) * (_1259 + 1.0))) + _1264) * _1227;
        float _1274 = _1195 * 0.5;
        float _1275 = _1205 * 0.5;
        float _1276 = _1215 * 0.5;
        float _1277 = dot(vec3(_1274, _1275, _1276), vec3(_1274, _1275, _1276));
        float _1282 = (_1277 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1277);
        float _1290 = (dot(vec3(_652, _653, _654), vec3(_1282 * _1274, _1282 * _1275, _1282 * _1276)) + 1.0) * 0.5;
        float _4023 = isnan(0.0) ? _1290 : (isnan(_1290) ? 0.0 : max(_1290, 0.0));
        float _1299 = sqrt(((_1275 * _1275) + (_1274 * _1274)) + (_1276 * _1276)) / (_1228 + 9.9999997473787516355514526367188e-06);
        float _4034 = isnan(0.0) ? _1299 : (isnan(_1299) ? 0.0 : max(_1299, 0.0));
        float _1300 = isnan(1.0) ? _4034 : (isnan(_4034) ? 1.0 : min(_4034, 1.0));
        float _1301 = _1300 * 2.0;
        float _1305 = (1.0 - _1300) / (_1300 + 1.0);
        float _4045 = isnan(0.0) ? _1305 : (isnan(_1305) ? 0.0 : max(_1305, 0.0));
        float _1306 = isnan(1.0) ? _4045 : (isnan(_4045) ? 1.0 : min(_4045, 1.0));
        float _1315 = ((((1.0 - _1306) * (_1301 + 2.0)) * exp2(log2(isnan(1.0) ? _4023 : (isnan(_4023) ? 1.0 : min(_4023, 1.0))) * (_1301 + 1.0))) + _1306) * _1228;
        float _1316 = _1196 * 0.5;
        float _1317 = _1206 * 0.5;
        float _1318 = _1216 * 0.5;
        float _1319 = dot(vec3(_1316, _1317, _1318), vec3(_1316, _1317, _1318));
        float _1324 = (_1319 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1319);
        float _1332 = (dot(vec3(_652, _653, _654), vec3(_1324 * _1316, _1324 * _1317, _1324 * _1318)) + 1.0) * 0.5;
        float _4056 = isnan(0.0) ? _1332 : (isnan(_1332) ? 0.0 : max(_1332, 0.0));
        float _1341 = sqrt(((_1317 * _1317) + (_1316 * _1316)) + (_1318 * _1318)) / (_1229 + 9.9999997473787516355514526367188e-06);
        float _4067 = isnan(0.0) ? _1341 : (isnan(_1341) ? 0.0 : max(_1341, 0.0));
        float _1342 = isnan(1.0) ? _4067 : (isnan(_4067) ? 1.0 : min(_4067, 1.0));
        float _1343 = _1342 * 2.0;
        float _1347 = (1.0 - _1342) / (_1342 + 1.0);
        float _4078 = isnan(0.0) ? _1347 : (isnan(_1347) ? 0.0 : max(_1347, 0.0));
        float _1348 = isnan(1.0) ? _4078 : (isnan(_4078) ? 1.0 : min(_4078, 1.0));
        float _1357 = ((((1.0 - _1348) * (_1343 + 2.0)) * exp2(log2(isnan(1.0) ? _4056 : (isnan(_4056) ? 1.0 : min(_4056, 1.0))) * (_1343 + 1.0))) + _1348) * _1229;
        _1365 = _1196;
        _1367 = _1195;
        _1368 = _1194;
        _1369 = _1206;
        _1370 = _1205;
        _1371 = _1204;
        _1372 = _1216;
        _1373 = _1215;
        _1374 = _1214;
        _1375 = _1229;
        _1376 = _1228;
        _1377 = _1227;
        _1378 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1273 : (isnan(_1273) ? 0.0 : max(_1273, 0.0)));
        _1379 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1315 : (isnan(_1315) ? 0.0 : max(_1315, 0.0)));
        _1380 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1357 : (isnan(_1357) ? 0.0 : max(_1357, 0.0)));
    }
    else
    {
        _1365 = _1366;
        _1367 = _1366;
        _1368 = _1366;
        _1369 = _1366;
        _1370 = _1366;
        _1371 = _1366;
        _1372 = _1366;
        _1373 = _1366;
        _1374 = _1366;
        _1375 = _1366;
        _1376 = _1366;
        _1377 = _1366;
        _1378 = 0.0;
        _1379 = 0.0;
        _1380 = 0.0;
    }
    float _1678;
    float _1679;
    float _1680;
    float _1681;
    float _1682;
    float _1683;
    float _1684;
    float _1685;
    float _1686;
    float _1687;
    float _1688;
    float _1689;
    float _1690;
    float _1691;
    float _1692;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1409 = fma(_1034, cbModelParam._m0[30u].z, fma(_1030, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1026));
        float _1413 = fma(_1034, cbModelParam._m0[31u].z, fma(_1030, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1026));
        float _1417 = fma(_1034, cbModelParam._m0[32u].z, fma(_1030, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1026));
        float _1440 = _1026 + _652;
        float _1441 = _1030 + _653;
        float _1442 = _1034 + _654;
        float _1452 = fma(_1442, cbModelParam._m0[30u].z, fma(_1441, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1440)) - _1409;
        float _1453 = fma(_1442, cbModelParam._m0[31u].z, fma(_1441, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1440)) - _1413;
        float _1454 = fma(_1442, cbModelParam._m0[32u].z, fma(_1441, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1440)) - _1417;
        float _1458 = inversesqrt(dot(vec3(_1452, _1453, _1454), vec3(_1452, _1453, _1454)));
        float _1471 = ((_1458 * _1452) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1409 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1472 = ((_1458 * _1453) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1413 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1473 = ((_1458 * _1454) / cbModelParam._m0[35u].z) + ((((((_1417 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1475 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1471, _1472, _1473), 0.0);
        vec4 _1482 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1471, _1472, _1473), 0.0);
        vec4 _1489 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1471, _1472, _1473), 0.0);
        vec4 _1496 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1471, _1472, _1473), 0.0);
        float _1508 = exp2((_1475.w + (-0.5)) * 20.0) * 2.0;
        float _1509 = _1508 * (_1475.x + (-0.5));
        float _1510 = _1508 * (_1475.y + (-0.5));
        float _1511 = _1508 * (_1475.z + (-0.5));
        float _1518 = exp2((_1482.w + (-0.5)) * 20.0) * 2.0;
        float _1519 = _1518 * (_1482.x + (-0.5));
        float _1520 = _1518 * (_1482.y + (-0.5));
        float _1521 = _1518 * (_1482.z + (-0.5));
        float _1528 = exp2((_1489.w + (-0.5)) * 20.0) * 2.0;
        float _1529 = _1528 * (_1489.x + (-0.5));
        float _1530 = _1528 * (_1489.y + (-0.5));
        float _1531 = _1528 * (_1489.z + (-0.5));
        float _1538 = exp2((_1496.w + (-0.5)) * 20.0) * 2.0;
        float _1539 = _1538 * (_1496.x + (-0.5));
        float _1540 = _1538 * (_1496.y + (-0.5));
        float _1541 = _1538 * (_1496.z + (-0.5));
        float _1542 = isnan(0.0) ? _1539 : (isnan(_1539) ? 0.0 : max(_1539, 0.0));
        float _1543 = isnan(0.0) ? _1540 : (isnan(_1540) ? 0.0 : max(_1540, 0.0));
        float _1544 = isnan(0.0) ? _1541 : (isnan(_1541) ? 0.0 : max(_1541, 0.0));
        float _1545 = _1509 * 0.5;
        float _1546 = _1519 * 0.5;
        float _1547 = _1529 * 0.5;
        float _1548 = dot(vec3(_1545, _1546, _1547), vec3(_1545, _1546, _1547));
        float _1553 = (_1548 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1548);
        float _1561 = (dot(vec3(_652, _653, _654), vec3(_1553 * _1545, _1553 * _1546, _1553 * _1547)) + 1.0) * 0.5;
        float _4119 = isnan(0.0) ? _1561 : (isnan(_1561) ? 0.0 : max(_1561, 0.0));
        float _1570 = sqrt(((_1546 * _1546) + (_1545 * _1545)) + (_1547 * _1547)) / (_1542 + 9.9999997473787516355514526367188e-06);
        float _4130 = isnan(0.0) ? _1570 : (isnan(_1570) ? 0.0 : max(_1570, 0.0));
        float _1571 = isnan(1.0) ? _4130 : (isnan(_4130) ? 1.0 : min(_4130, 1.0));
        float _1572 = _1571 * 2.0;
        float _1576 = (1.0 - _1571) / (_1571 + 1.0);
        float _4141 = isnan(0.0) ? _1576 : (isnan(_1576) ? 0.0 : max(_1576, 0.0));
        float _1577 = isnan(1.0) ? _4141 : (isnan(_4141) ? 1.0 : min(_4141, 1.0));
        float _1586 = ((((1.0 - _1577) * (_1572 + 2.0)) * exp2(log2(isnan(1.0) ? _4119 : (isnan(_4119) ? 1.0 : min(_4119, 1.0))) * (_1572 + 1.0))) + _1577) * _1542;
        float _1587 = _1510 * 0.5;
        float _1588 = _1520 * 0.5;
        float _1589 = _1530 * 0.5;
        float _1590 = dot(vec3(_1587, _1588, _1589), vec3(_1587, _1588, _1589));
        float _1595 = (_1590 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1590);
        float _1603 = (dot(vec3(_652, _653, _654), vec3(_1595 * _1587, _1595 * _1588, _1595 * _1589)) + 1.0) * 0.5;
        float _4152 = isnan(0.0) ? _1603 : (isnan(_1603) ? 0.0 : max(_1603, 0.0));
        float _1612 = sqrt(((_1588 * _1588) + (_1587 * _1587)) + (_1589 * _1589)) / (_1543 + 9.9999997473787516355514526367188e-06);
        float _4163 = isnan(0.0) ? _1612 : (isnan(_1612) ? 0.0 : max(_1612, 0.0));
        float _1613 = isnan(1.0) ? _4163 : (isnan(_4163) ? 1.0 : min(_4163, 1.0));
        float _1614 = _1613 * 2.0;
        float _1618 = (1.0 - _1613) / (_1613 + 1.0);
        float _4174 = isnan(0.0) ? _1618 : (isnan(_1618) ? 0.0 : max(_1618, 0.0));
        float _1619 = isnan(1.0) ? _4174 : (isnan(_4174) ? 1.0 : min(_4174, 1.0));
        float _1628 = ((((1.0 - _1619) * (_1614 + 2.0)) * exp2(log2(isnan(1.0) ? _4152 : (isnan(_4152) ? 1.0 : min(_4152, 1.0))) * (_1614 + 1.0))) + _1619) * _1543;
        float _1629 = _1511 * 0.5;
        float _1630 = _1521 * 0.5;
        float _1631 = _1531 * 0.5;
        float _1632 = dot(vec3(_1629, _1630, _1631), vec3(_1629, _1630, _1631));
        float _1637 = (_1632 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1632);
        float _1645 = (dot(vec3(_652, _653, _654), vec3(_1637 * _1629, _1637 * _1630, _1637 * _1631)) + 1.0) * 0.5;
        float _4185 = isnan(0.0) ? _1645 : (isnan(_1645) ? 0.0 : max(_1645, 0.0));
        float _1654 = sqrt(((_1630 * _1630) + (_1629 * _1629)) + (_1631 * _1631)) / (_1544 + 9.9999997473787516355514526367188e-06);
        float _4196 = isnan(0.0) ? _1654 : (isnan(_1654) ? 0.0 : max(_1654, 0.0));
        float _1655 = isnan(1.0) ? _4196 : (isnan(_4196) ? 1.0 : min(_4196, 1.0));
        float _1656 = _1655 * 2.0;
        float _1660 = (1.0 - _1655) / (_1655 + 1.0);
        float _4207 = isnan(0.0) ? _1660 : (isnan(_1660) ? 0.0 : max(_1660, 0.0));
        float _1661 = isnan(1.0) ? _4207 : (isnan(_4207) ? 1.0 : min(_4207, 1.0));
        float _1670 = ((((1.0 - _1661) * (_1656 + 2.0)) * exp2(log2(isnan(1.0) ? _4185 : (isnan(_4185) ? 1.0 : min(_4185, 1.0))) * (_1656 + 1.0))) + _1661) * _1544;
        _1678 = _1511;
        _1679 = _1510;
        _1680 = _1509;
        _1681 = _1521;
        _1682 = _1520;
        _1683 = _1519;
        _1684 = _1531;
        _1685 = _1530;
        _1686 = _1529;
        _1687 = _1544;
        _1688 = _1543;
        _1689 = _1542;
        _1690 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1586 : (isnan(_1586) ? 0.0 : max(_1586, 0.0)));
        _1691 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1628 : (isnan(_1628) ? 0.0 : max(_1628, 0.0)));
        _1692 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1670 : (isnan(_1670) ? 0.0 : max(_1670, 0.0)));
    }
    else
    {
        _1678 = _1366;
        _1679 = _1366;
        _1680 = _1366;
        _1681 = _1366;
        _1682 = _1366;
        _1683 = _1366;
        _1684 = _1366;
        _1685 = _1366;
        _1686 = _1366;
        _1687 = _1366;
        _1688 = _1366;
        _1689 = _1366;
        _1690 = 0.0;
        _1691 = 0.0;
        _1692 = 0.0;
    }
    float _1702 = (cbModelParam._m0[1u].x * (_1690 - _1378)) + _1378;
    float _1703 = (cbModelParam._m0[1u].x * (_1691 - _1379)) + _1379;
    float _1704 = (cbModelParam._m0[1u].x * (_1692 - _1380)) + _1380;
    float _1725 = fma(_1704, cbSceneParam._m0[89u].z, fma(_1703, cbSceneParam._m0[89u].y, _1702 * cbSceneParam._m0[89u].x));
    float _1728 = fma(_1704, cbSceneParam._m0[90u].z, fma(_1703, cbSceneParam._m0[90u].y, _1702 * cbSceneParam._m0[90u].x));
    float _1731 = fma(_1704, cbSceneParam._m0[91u].z, fma(_1703, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1702));
    float _1746 = _971 * 0.5;
    float _1747 = _972 * 0.5;
    float _1748 = _973 * 0.5;
    float _1749 = dot(vec4(_1746, _1747, _1748, 1.0), vec4(_1680, _1683, _1686, _1689));
    float _1752 = dot(vec4(_1746, _1747, _1748, 1.0), vec4(_1679, _1682, _1685, _1688));
    float _1755 = dot(vec4(_1746, _1747, _1748, 1.0), vec4(_1678, _1681, _1684, _1687));
    float _1786;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1762 = dot(vec4(_1746, _1747, _1748, 1.0), vec4(_1365, _1369, _1372, _1375));
        float _1766 = dot(vec4(_1746, _1747, _1748, 1.0), vec4(_1367, _1370, _1373, _1376));
        float _1770 = dot(vec4(_1746, _1747, _1748, 1.0), vec4(_1368, _1371, _1374, _1377));
        float _1777 = dot(vec4(cbModelParam._m0[39u]), vec4(_1746, _1747, _1748, 1.0));
        _1786 = dot(vec3(isnan(0.0) ? _1770 : (isnan(_1770) ? 0.0 : max(_1770, 0.0)), isnan(0.0) ? _1766 : (isnan(_1766) ? 0.0 : max(_1766, 0.0)), isnan(0.0) ? _1762 : (isnan(_1762) ? 0.0 : max(_1762, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1777) ? 0.0 : (isnan(0.0) ? _1777 : max(0.0, _1777))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1786 = 1.0;
    }
    float _1797;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1788 = dot(vec4(cbModelParam._m0[40u]), vec4(_1746, _1747, _1748, 1.0));
        _1797 = dot(vec3(isnan(0.0) ? _1749 : (isnan(_1749) ? 0.0 : max(_1749, 0.0)), isnan(0.0) ? _1752 : (isnan(_1752) ? 0.0 : max(_1752, 0.0)), isnan(0.0) ? _1755 : (isnan(_1755) ? 0.0 : max(_1755, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1788) ? 0.0 : (isnan(0.0) ? _1788 : max(0.0, _1788))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1797 = 1.0;
    }
    float _1801 = (_1797 * cbModelParam._m0[1u].x) + (_1786 * (1.0 - cbModelParam._m0[1u].x));
    float _1811 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _831);
    float _1812 = isnan(_1811) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1811 : min(cbModelParam._m0[25u].z, _1811));
    float _1892;
    float _1894;
    float _1896;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1859 = fma(_1034, cbModelParam._m0[13u].z, fma(_1030, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1026)) + cbModelParam._m0[13u].w;
        float _1863 = fma(_1034, cbModelParam._m0[14u].z, fma(_1030, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1026)) + cbModelParam._m0[14u].w;
        float _1867 = fma(_1034, cbModelParam._m0[15u].z, fma(_1030, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1026)) + cbModelParam._m0[15u].w;
        float _1870 = fma(_973, cbModelParam._m0[13u].z, fma(_972, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _971));
        float _1873 = fma(_973, cbModelParam._m0[14u].z, fma(_972, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _971));
        float _1876 = fma(_973, cbModelParam._m0[15u].z, fma(_972, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _971));
        float _1904;
        if (_1870 > 0.0)
        {
            _1904 = abs((1.0 - _1859) / _1870);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1870 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1859 + 1.0) / _1870);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1904 = frontier_phi_19_17_ladder;
        }
        float _2108;
        if (_1873 > 0.0)
        {
            _2108 = abs((1.0 - _1863) / _1873);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1873 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1863 + 1.0) / _1873);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2108 = frontier_phi_28_24_ladder;
        }
        float _2362;
        if (_1876 > 0.0)
        {
            _2362 = abs((1.0 - _1867) / _1876);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1876 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1867 + 1.0) / _1876);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2362 = frontier_phi_40_35_ladder;
        }
        float _2364 = isnan(_2108) ? _1904 : (isnan(_1904) ? _2108 : min(_1904, _2108));
        float _2365 = isnan(_2362) ? _2364 : (isnan(_2364) ? _2362 : min(_2364, _2362));
        float _2369 = (_2365 * _1870) + _1859;
        float _2370 = (_2365 * _1873) + _1863;
        float _2371 = (_2365 * _1876) + _1867;
        float _2372 = _2365 * 9.9999997473787516355514526367188e-05;
        float _2374 = (-1.0) - _2372;
        float _2376 = _2372 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2371 > _2376) || ((_2371 < _2374) || ((_2370 > _2376) || ((_2370 < _2374) || ((_2369 < _2374) || (_2369 > _2376))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2499 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2371, cbModelParam._m0[9u].z, fma(_2370, cbModelParam._m0[9u].y, _2369 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2371, cbModelParam._m0[10u].z, fma(_2370, cbModelParam._m0[10u].y, _2369 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2371, cbModelParam._m0[11u].z, fma(_2370, cbModelParam._m0[11u].y, _2369 * cbModelParam._m0[11u].x))), _1812);
            frontier_phi_18_40_ladder = _2499.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2499.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2499.x * cbModelParam._m0[1u].y;
        }
        _1892 = frontier_phi_18_40_ladder_2;
        _1894 = frontier_phi_18_40_ladder_1;
        _1896 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1880 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_971, _972, _973), _1812);
        _1892 = _1880.x * cbModelParam._m0[1u].y;
        _1894 = _1880.y * cbModelParam._m0[1u].y;
        _1896 = _1880.z * cbModelParam._m0[1u].y;
    }
    float _1900 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _831);
    float _1901 = isnan(_1900) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1900 : min(cbModelParam._m0[25u].w, _1900));
    float _1992;
    float _1994;
    float _1996;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1956 = fma(_1034, cbModelParam._m0[21u].z, fma(_1030, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1026)) + cbModelParam._m0[21u].w;
        float _1960 = fma(_1034, cbModelParam._m0[22u].z, fma(_1030, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1026)) + cbModelParam._m0[22u].w;
        float _1964 = fma(_1034, cbModelParam._m0[23u].z, fma(_1030, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1026)) + cbModelParam._m0[23u].w;
        float _1967 = fma(_973, cbModelParam._m0[21u].z, fma(_972, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _971));
        float _1970 = fma(_973, cbModelParam._m0[22u].z, fma(_972, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _971));
        float _1973 = fma(_973, cbModelParam._m0[23u].z, fma(_972, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _971));
        float _2113;
        if (_1967 > 0.0)
        {
            _2113 = abs((1.0 - _1956) / _1967);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1967 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1956 + 1.0) / _1967);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _2113 = frontier_phi_30_26_ladder;
        }
        float _2389;
        if (_1970 > 0.0)
        {
            _2389 = abs((1.0 - _1960) / _1970);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1970 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1960 + 1.0) / _1970);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2389 = frontier_phi_42_37_ladder;
        }
        float _2602;
        if (_1973 > 0.0)
        {
            _2602 = abs((1.0 - _1964) / _1973);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1973 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1964 + 1.0) / _1973);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2602 = frontier_phi_51_48_ladder;
        }
        float _2604 = isnan(_2389) ? _2113 : (isnan(_2113) ? _2389 : min(_2113, _2389));
        float _2605 = isnan(_2602) ? _2604 : (isnan(_2604) ? _2602 : min(_2604, _2602));
        float _2609 = (_2605 * _1967) + _1956;
        float _2610 = (_2605 * _1970) + _1960;
        float _2611 = (_2605 * _1973) + _1964;
        float _2612 = _2605 * 9.9999997473787516355514526367188e-05;
        float _2613 = (-1.0) - _2612;
        float _2615 = _2612 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2611 > _2615) || ((_2611 < _2613) || ((_2610 > _2615) || ((_2610 < _2613) || ((_2609 < _2613) || (_2609 > _2615))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2852 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2611, cbModelParam._m0[17u].z, fma(_2610, cbModelParam._m0[17u].y, _2609 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2611, cbModelParam._m0[18u].z, fma(_2610, cbModelParam._m0[18u].y, _2609 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2611, cbModelParam._m0[19u].z, fma(_2610, cbModelParam._m0[19u].y, _2609 * cbModelParam._m0[19u].x))), _1901);
            frontier_phi_27_51_ladder = _2852.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2852.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2852.x * cbModelParam._m0[1u].z;
        }
        _1992 = frontier_phi_27_51_ladder_2;
        _1994 = frontier_phi_27_51_ladder_1;
        _1996 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1976 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_971, _972, _973), _1901);
        _1992 = _1976.x * cbModelParam._m0[1u].z;
        _1994 = _1976.y * cbModelParam._m0[1u].z;
        _1996 = _1976.z * cbModelParam._m0[1u].z;
    }
    float _2009 = (((_997 * _949) + _998) * _963) * ((cbModelParam._m0[1u].w * (_1992 - _1892)) + _1892);
    float _2011 = (((_997 * _950) + _998) * _963) * ((cbModelParam._m0[1u].w * (_1994 - _1894)) + _1894);
    float _2013 = (((_997 * _951) + _998) * _963) * ((cbModelParam._m0[1u].w * (_1996 - _1896)) + _1896);
    float _2016 = fma(_2013, cbSceneParam._m0[89u].z, fma(_2011, cbSceneParam._m0[89u].y, _2009 * cbSceneParam._m0[89u].x));
    float _2019 = fma(_2013, cbSceneParam._m0[90u].z, fma(_2011, cbSceneParam._m0[90u].y, _2009 * cbSceneParam._m0[90u].x));
    float _2022 = fma(_2013, cbSceneParam._m0[91u].z, fma(_2011, cbSceneParam._m0[91u].y, _2009 * cbSceneParam._m0[91u].x));
    uvec4 _2032 = floatBitsToUint(cbInstanceData._m0[_855 + 5u]);
    uint _2034 = _2032.x * 14u;
    uint _2035 = _2034 + 13u;
    float _2042 = _963 + (-1.0);
    float _2047 = (cbLight._m0[_2035].x * _2042) + 1.0;
    float _2048 = (cbLight._m0[_2035].y * _2042) + 1.0;
    float _2049 = (cbLight._m0[_2035].z * _2042) + 1.0;
    float _2050 = (cbLight._m0[_2035].w * _2042) + 1.0;
    uint _2051 = _2034 + 5u;
    float _2057 = isnan(1.0) ? _2048 : (isnan(_2048) ? 1.0 : min(_2048, 1.0));
    uint _2061 = _2034 + 4u;
    float _2067 = isnan(1.0) ? _2047 : (isnan(_2047) ? 1.0 : min(_2047, 1.0));
    uint _2071 = _2034 | 1u;
    float _2082 = dot(vec3(cbLight._m0[_2034].xyz), vec3(_652, _653, _654));
    float _2085 = dot(vec3(cbLight._m0[_2071].xyz), vec3(_652, _653, _654));
    float _4343 = isnan(0.0) ? _2082 : (isnan(_2082) ? 0.0 : max(_2082, 0.0));
    float _4354 = isnan(0.0) ? _2085 : (isnan(_2085) ? 0.0 : max(_2085, 0.0));
    float _2090 = (isnan(1.0) ? _4343 : (isnan(_4343) ? 1.0 : min(_4343, 1.0))) * 0.3183098733425140380859375;
    float _2092 = (isnan(1.0) ? _4354 : (isnan(_4354) ? 1.0 : min(_4354, 1.0))) * 0.3183098733425140380859375;
    float _2099 = ((cbLight._m0[_2051].x * _2057) * _2092) + ((cbLight._m0[_2061].x * _2067) * _2090);
    float _2100 = ((_2057 * cbLight._m0[_2051].y) * _2092) + ((_2067 * cbLight._m0[_2061].y) * _2090);
    float _2101 = ((_2057 * cbLight._m0[_2051].z) * _2092) + ((_2067 * cbLight._m0[_2061].z) * _2090);
    uvec4 _2105 = floatBitsToUint(cbLight._m0[_2034 + 12u]);
    bool _2107 = _2105.x == 0u;
    float _2118;
    float _2120;
    float _2122;
    if (_2107)
    {
        _2118 = _2099;
        _2120 = _2100;
        _2122 = _2101;
    }
    else
    {
        uint _2126 = _2034 + 6u;
        float _2142 = (dot(vec3(cbLight._m0[_2034 + 2u].xyz), vec3(_652, _653, _654)) * 0.5) + 0.5;
        float _2143 = _2142 * _2142;
        float _4365 = isnan(0.0) ? _2143 : (isnan(_2143) ? 0.0 : max(_2143, 0.0));
        float _2144 = isnan(1.0) ? _4365 : (isnan(_4365) ? 1.0 : min(_4365, 1.0));
        float _2145 = isnan(1.0) ? _2049 : (isnan(_2049) ? 1.0 : min(_2049, 1.0));
        _2118 = (((cbLight._m0[_2126].x * 0.3183098733425140380859375) * _2144) * _2145) + _2099;
        _2120 = (((cbLight._m0[_2126].y * 0.3183098733425140380859375) * _2144) * _2145) + _2100;
        _2122 = (((cbLight._m0[_2126].z * 0.3183098733425140380859375) * _2144) * _2145) + _2101;
    }
    bool _2125 = _2105.y == 0u;
    float _2163;
    float _2165;
    float _2167;
    if (_2125)
    {
        _2163 = _2118;
        _2165 = _2120;
        _2167 = _2122;
    }
    else
    {
        uint _2333 = _2034 + 7u;
        float _2349 = (dot(vec3(cbLight._m0[_2034 + 3u].xyz), vec3(_652, _653, _654)) * 0.5) + 0.5;
        float _2350 = _2349 * _2349;
        float _4381 = isnan(0.0) ? _2350 : (isnan(_2350) ? 0.0 : max(_2350, 0.0));
        float _2351 = isnan(1.0) ? _4381 : (isnan(_4381) ? 1.0 : min(_4381, 1.0));
        float _2352 = isnan(1.0) ? _2050 : (isnan(_2050) ? 1.0 : min(_2050, 1.0));
        _2163 = (((cbLight._m0[_2333].x * 0.3183098733425140380859375) * _2351) * _2352) + _2118;
        _2165 = (((cbLight._m0[_2333].y * 0.3183098733425140380859375) * _2351) * _2352) + _2120;
        _2167 = (((cbLight._m0[_2333].z * 0.3183098733425140380859375) * _2351) * _2352) + _2122;
    }
    uint _2170 = _2034 + 8u;
    float _2183 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2034].w)) * _831) * 0.949999988079071044921875);
    float _2184 = _2183 * _2183;
    float _2185 = cbLight._m0[_2034].x + _733;
    float _2186 = cbLight._m0[_2034].y + _734;
    float _2187 = cbLight._m0[_2034].z + _735;
    float _2191 = inversesqrt(dot(vec3(_2185, _2186, _2187), vec3(_2185, _2186, _2187)));
    float _2192 = _2191 * _2185;
    float _2193 = _2191 * _2186;
    float _2194 = _2191 * _2187;
    float _2195 = dot(vec3(_652, _653, _654), vec3(cbLight._m0[_2034].xyz));
    float _4397 = isnan(0.0) ? _2195 : (isnan(_2195) ? 0.0 : max(_2195, 0.0));
    float _2198 = isnan(1.0) ? _4397 : (isnan(_4397) ? 1.0 : min(_4397, 1.0));
    float _4408 = isnan(0.0) ? _964 : (isnan(_964) ? 0.0 : max(_964, 0.0));
    float _2199 = isnan(1.0) ? _4408 : (isnan(_4408) ? 1.0 : min(_4408, 1.0));
    float _2200 = dot(vec3(_652, _653, _654), vec3(_2192, _2193, _2194));
    float _4419 = isnan(0.0) ? _2200 : (isnan(_2200) ? 0.0 : max(_2200, 0.0));
    float _2203 = isnan(1.0) ? _4419 : (isnan(_4419) ? 1.0 : min(_4419, 1.0));
    float _2204 = dot(vec3(cbLight._m0[_2034].xyz), vec3(_2192, _2193, _2194));
    float _4430 = isnan(0.0) ? _2204 : (isnan(_2204) ? 0.0 : max(_2204, 0.0));
    float _2208 = _2184 * _2184;
    float _2212 = ((_2203 * _2203) * (_2208 + (-1.0))) + 1.0;
    float _2220 = exp2(log2(1.0 - (isnan(1.0) ? _4430 : (isnan(_4430) ? 1.0 : min(_4430, 1.0)))) * 5.0);
    float _2221 = 0.959999978542327880859375 - _946;
    float _2223 = 0.959999978542327880859375 - _947;
    float _2224 = 0.959999978542327880859375 - _948;
    float _2231 = 1.0 - _2184;
    float _2242 = (0.5 / (((_2199 * ((_2198 * _2231) + _2184)) + 9.9999999392252902907785028219223e-09) + (((_2199 * _2231) + _2184) * _2198))) * _2198;
    float _4441 = isnan(0.0) ? _2242 : (isnan(_2242) ? 0.0 : max(_2242, 0.0));
    float _2244 = (isnan(1.0) ? _4441 : (isnan(_4441) ? 1.0 : min(_4441, 1.0))) * (_2208 / ((_2212 * _2212) * 3.141590118408203125));
    uint _2255 = _2034 + 9u;
    float _2266 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2071].w)) * _831) * 0.949999988079071044921875);
    float _2267 = _2266 * _2266;
    float _2268 = cbLight._m0[_2071].x + _733;
    float _2269 = cbLight._m0[_2071].y + _734;
    float _2270 = cbLight._m0[_2071].z + _735;
    float _2274 = inversesqrt(dot(vec3(_2268, _2269, _2270), vec3(_2268, _2269, _2270)));
    float _2275 = _2274 * _2268;
    float _2276 = _2274 * _2269;
    float _2277 = _2274 * _2270;
    float _2278 = dot(vec3(_652, _653, _654), vec3(cbLight._m0[_2071].xyz));
    float _4452 = isnan(0.0) ? _2278 : (isnan(_2278) ? 0.0 : max(_2278, 0.0));
    float _2281 = isnan(1.0) ? _4452 : (isnan(_4452) ? 1.0 : min(_4452, 1.0));
    float _2282 = dot(vec3(_652, _653, _654), vec3(_2275, _2276, _2277));
    float _4463 = isnan(0.0) ? _2282 : (isnan(_2282) ? 0.0 : max(_2282, 0.0));
    float _2285 = isnan(1.0) ? _4463 : (isnan(_4463) ? 1.0 : min(_4463, 1.0));
    float _2286 = dot(vec3(cbLight._m0[_2071].xyz), vec3(_2275, _2276, _2277));
    float _4474 = isnan(0.0) ? _2286 : (isnan(_2286) ? 0.0 : max(_2286, 0.0));
    float _2290 = _2267 * _2267;
    float _2294 = ((_2285 * _2285) * (_2290 + (-1.0))) + 1.0;
    float _2301 = exp2(log2(1.0 - (isnan(1.0) ? _4474 : (isnan(_4474) ? 1.0 : min(_4474, 1.0)))) * 5.0);
    float _2308 = 1.0 - _2267;
    float _2318 = (0.5 / (((_2199 * ((_2281 * _2308) + _2267)) + 9.9999999392252902907785028219223e-09) + (((_2199 * _2308) + _2267) * _2281))) * _2281;
    float _4485 = isnan(0.0) ? _2318 : (isnan(_2318) ? 0.0 : max(_2318, 0.0));
    float _2320 = (isnan(1.0) ? _4485 : (isnan(_4485) ? 1.0 : min(_4485, 1.0))) * (_2290 / ((_2294 * _2294) * 3.141590118408203125));
    float _2330 = (((((_2301 * _2221) + _949) * cbLight._m0[_2255].x) * _2320) * _2057) + (((((_2220 * _2221) + _949) * cbLight._m0[_2170].x) * _2244) * _2067);
    float _2331 = (((((_2301 * _2223) + _950) * cbLight._m0[_2255].y) * _2320) * _2057) + (((((_2220 * _2223) + _950) * cbLight._m0[_2170].y) * _2244) * _2067);
    float _2332 = (((((_2301 * _2224) + _951) * cbLight._m0[_2255].z) * _2320) * _2057) + (((((_2220 * _2224) + _951) * cbLight._m0[_2170].z) * _2244) * _2067);
    float _2394;
    float _2396;
    float _2398;
    if (_2107)
    {
        _2394 = _2330;
        _2396 = _2331;
        _2398 = _2332;
    }
    else
    {
        uint _2400 = _2034 + 2u;
        uint _2404 = _2034 + 10u;
        float _2418 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2400].w)) * _831) * 0.949999988079071044921875);
        float _2419 = _2418 * _2418;
        float _2420 = cbLight._m0[_2400].x + _733;
        float _2421 = cbLight._m0[_2400].y + _734;
        float _2422 = cbLight._m0[_2400].z + _735;
        float _2426 = inversesqrt(dot(vec3(_2420, _2421, _2422), vec3(_2420, _2421, _2422)));
        float _2427 = _2426 * _2420;
        float _2428 = _2426 * _2421;
        float _2429 = _2426 * _2422;
        float _2430 = dot(vec3(_652, _653, _654), vec3(cbLight._m0[_2400].xyz));
        float _4496 = isnan(0.0) ? _2430 : (isnan(_2430) ? 0.0 : max(_2430, 0.0));
        float _2433 = isnan(1.0) ? _4496 : (isnan(_4496) ? 1.0 : min(_4496, 1.0));
        float _2434 = dot(vec3(_652, _653, _654), vec3(_2427, _2428, _2429));
        float _4507 = isnan(0.0) ? _2434 : (isnan(_2434) ? 0.0 : max(_2434, 0.0));
        float _2437 = isnan(1.0) ? _4507 : (isnan(_4507) ? 1.0 : min(_4507, 1.0));
        float _2438 = dot(vec3(cbLight._m0[_2400].xyz), vec3(_2427, _2428, _2429));
        float _4518 = isnan(0.0) ? _2438 : (isnan(_2438) ? 0.0 : max(_2438, 0.0));
        float _2442 = _2419 * _2419;
        float _2446 = ((_2437 * _2437) * (_2442 + (-1.0))) + 1.0;
        float _2453 = exp2(log2(1.0 - (isnan(1.0) ? _4518 : (isnan(_4518) ? 1.0 : min(_4518, 1.0)))) * 5.0);
        float _2460 = 1.0 - _2419;
        float _2470 = (0.5 / (((_2199 * ((_2433 * _2460) + _2419)) + 9.9999999392252902907785028219223e-09) + (((_2199 * _2460) + _2419) * _2433))) * _2433;
        float _4529 = isnan(0.0) ? _2470 : (isnan(_2470) ? 0.0 : max(_2470, 0.0));
        float _2472 = (isnan(1.0) ? _4529 : (isnan(_4529) ? 1.0 : min(_4529, 1.0))) * (_2442 / ((_2446 * _2446) * 3.141590118408203125));
        float _2473 = isnan(1.0) ? _2049 : (isnan(_2049) ? 1.0 : min(_2049, 1.0));
        _2394 = (((((_2453 * _2221) + _949) * cbLight._m0[_2404].x) * _2472) * _2473) + _2330;
        _2396 = (((((_2453 * _2223) + _950) * cbLight._m0[_2404].y) * _2472) * _2473) + _2331;
        _2398 = (((((_2453 * _2224) + _951) * cbLight._m0[_2404].z) * _2472) * _2473) + _2332;
    }
    float _2508;
    float _2510;
    float _2512;
    if (_2125)
    {
        _2508 = _2394;
        _2510 = _2396;
        _2512 = _2398;
    }
    else
    {
        uint _2519 = _2034 + 3u;
        uint _2523 = _2034 + 11u;
        float _2537 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2519].w)) * _831) * 0.949999988079071044921875);
        float _2538 = _2537 * _2537;
        float _2539 = cbLight._m0[_2519].x + _733;
        float _2540 = cbLight._m0[_2519].y + _734;
        float _2541 = cbLight._m0[_2519].z + _735;
        float _2545 = inversesqrt(dot(vec3(_2539, _2540, _2541), vec3(_2539, _2540, _2541)));
        float _2546 = _2545 * _2539;
        float _2547 = _2545 * _2540;
        float _2548 = _2545 * _2541;
        float _2549 = dot(vec3(_652, _653, _654), vec3(cbLight._m0[_2519].xyz));
        float _4545 = isnan(0.0) ? _2549 : (isnan(_2549) ? 0.0 : max(_2549, 0.0));
        float _2552 = isnan(1.0) ? _4545 : (isnan(_4545) ? 1.0 : min(_4545, 1.0));
        float _2553 = dot(vec3(_652, _653, _654), vec3(_2546, _2547, _2548));
        float _4556 = isnan(0.0) ? _2553 : (isnan(_2553) ? 0.0 : max(_2553, 0.0));
        float _2556 = isnan(1.0) ? _4556 : (isnan(_4556) ? 1.0 : min(_4556, 1.0));
        float _2557 = dot(vec3(cbLight._m0[_2519].xyz), vec3(_2546, _2547, _2548));
        float _4567 = isnan(0.0) ? _2557 : (isnan(_2557) ? 0.0 : max(_2557, 0.0));
        float _2561 = _2538 * _2538;
        float _2565 = ((_2556 * _2556) * (_2561 + (-1.0))) + 1.0;
        float _2572 = exp2(log2(1.0 - (isnan(1.0) ? _4567 : (isnan(_4567) ? 1.0 : min(_4567, 1.0)))) * 5.0);
        float _2579 = 1.0 - _2538;
        float _2589 = (0.5 / (((_2199 * ((_2552 * _2579) + _2538)) + 9.9999999392252902907785028219223e-09) + (((_2199 * _2579) + _2538) * _2552))) * _2552;
        float _4578 = isnan(0.0) ? _2589 : (isnan(_2589) ? 0.0 : max(_2589, 0.0));
        float _2591 = (isnan(1.0) ? _4578 : (isnan(_4578) ? 1.0 : min(_4578, 1.0))) * (_2561 / ((_2565 * _2565) * 3.141590118408203125));
        float _2592 = isnan(1.0) ? _2050 : (isnan(_2050) ? 1.0 : min(_2050, 1.0));
        _2508 = (((((_2572 * _2221) + _949) * cbLight._m0[_2523].x) * _2591) * _2592) + _2394;
        _2510 = (((((_2572 * _2223) + _950) * cbLight._m0[_2523].y) * _2591) * _2592) + _2396;
        _2512 = (((((_2572 * _2224) + _951) * cbLight._m0[_2523].z) * _2591) * _2592) + _2398;
    }
    float _2726;
    float _2728;
    float _2730;
    float _2732;
    float _2734;
    float _2736;
    if (_2032.y == 0u)
    {
        float _2667 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2668 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2667;
        float _2669 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2667;
        float _2670 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2667;
        uvec4 _2682 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2683 = _2682.x;
        uint _2694 = uint((float(_2682.y) * floor(float(uint(cbSceneParam._m0[85u].y * _754) / _2683))) + floor(float(uint(cbSceneParam._m0[85u].x * _753) / _2683)));
        float _2704 = (log2(_2670 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2705 = isnan(0.0) ? _2704 : (isnan(_2704) ? 0.0 : max(_2704, 0.0));
        uint _2708 = uint(isnan(14.0) ? _2705 : (isnan(_2705) ? 14.0 : min(_2705, 14.0)));
        uvec4 _2713 = texelFetch(g_lightClusterGridBuffer, int(((_2708 << 2u) + (_2694 << 6u)) >> 2u));
        uint _2714 = _2713.x;
        uint _2715 = _2682.z;
        float _2857;
        float _2859;
        float _2861;
        float _2863;
        float _2865;
        float _2867;
        if (((((1u << ((_2715 >> 4u) & 15u)) + 4294967295u) & _2714) == 0u) || ((_2715 & 240u) == 0u))
        {
            _2857 = 0.0;
            _2859 = 0.0;
            _2861 = 0.0;
            _2863 = 0.0;
            _2865 = 0.0;
            _2867 = 0.0;
        }
        else
        {
            float _2858;
            float _2860;
            float _2862;
            float _2864;
            float _2866;
            float _2868;
            float _3018 = 0.0;
            float _3019 = 0.0;
            float _3020 = 0.0;
            float _3021 = 0.0;
            float _3022 = 0.0;
            float _3023 = 0.0;
            uint _3024 = 0u;
            uint _3033;
            bool _3034;
            for (;;)
            {
                _3033 = texelFetch(g_lightClassification, int((((_2708 << 5u) + (_2694 << 9u)) + (_3024 << 2u)) >> 2u)).x;
                _3034 = _3033 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_3034)
                {
                    frontier_phi_68_pred = _3020;
                    frontier_phi_68_pred_1 = _3023;
                    frontier_phi_68_pred_2 = _3022;
                    frontier_phi_68_pred_3 = _3021;
                    frontier_phi_68_pred_4 = _3019;
                    frontier_phi_68_pred_5 = _3018;
                }
                else
                {
                    float _3163;
                    float _3164;
                    float _3165;
                    float _3166;
                    float _3167;
                    float _3168;
                    uint _3169;
                    _3163 = _3018;
                    _3164 = _3019;
                    _3165 = _3020;
                    _3166 = _3021;
                    _3167 = _3022;
                    _3168 = _3023;
                    _3169 = _3033;
                    float _3090;
                    float _3091;
                    float _3092;
                    float _3093;
                    float _3094;
                    float _3095;
                    for (;;)
                    {
                        uint _3173 = uint(findLSB(_3169)) + (_3024 << 5u);
                        uint _3170 = (_3169 + 4294967295u) & _3169;
                        uint _3175 = _3173 * 48u;
                        vec4 _3189 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3175)).x, texelFetch(g_PointLightRenderingBuffer, int(_3175 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3175 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3175 + 3u)).x));
                        uint _3195 = (_3173 * 48u) + 4u;
                        vec4 _3208 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3195)).x, texelFetch(g_PointLightRenderingBuffer, int(_3195 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3195 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3195 + 3u)).x));
                        uint _3214 = (_3173 * 48u) + 8u;
                        vec3 _3225 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3214)).x, texelFetch(g_PointLightRenderingBuffer, int(_3214 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3214 + 2u)).x));
                        float _3229 = _3189.x - _2668;
                        float _3230 = _3189.y - _2669;
                        float _3231 = _3189.z - _2670;
                        float _3232 = dot(vec3(_3229, _3230, _3231), vec3(_3229, _3230, _3231));
                        float _3235 = inversesqrt(_3232);
                        float _3236 = _3235 * _3229;
                        float _3237 = _3235 * _3230;
                        float _3238 = _3235 * _3231;
                        float _3239 = dot(vec3(_776, _779, _782), vec3(_3236, _3237, _3238));
                        float _3244 = 1.0 - (_3232 * _3189.w);
                        float _4604 = isnan(0.0) ? _3244 : (isnan(_3244) ? 0.0 : max(_3244, 0.0));
                        float _3245 = isnan(1.0) ? _4604 : (isnan(_4604) ? 1.0 : min(_4604, 1.0));
                        float _3246 = sqrt(_3232) * _3208.w;
                        float _3249 = 1.39999997615814208984375 / (_3246 + 1.39999997615814208984375);
                        float _3250 = _3249 * _3249;
                        float _3253 = ((1.0 - _3250) * _3239) + _3250;
                        float _3256 = _3246 * _3246;
                        float _3260 = ((isnan(0.0) ? _3253 : (isnan(_3253) ? 0.0 : max(_3253, 0.0))) * _3245) / ((_3256 * 0.699999988079071044921875) + 1.0);
                        float _3264 = (-0.0) - _2668;
                        float _3265 = (-0.0) - _2669;
                        float _3266 = (-0.0) - _2670;
                        float _3270 = inversesqrt(dot(vec3(_3264, _3265, _3266), vec3(_3264, _3265, _3266)));
                        float _3271 = _3270 * _3264;
                        float _3272 = _3270 * _3265;
                        float _3273 = _3270 * _3266;
                        float _3281 = exp2(log2(1.0 / ((_3256 * 3.5) + 5.0)) * 0.25);
                        float _3282 = 1.0 - _979;
                        float _3289 = sqrt(1.0 - ((1.0 - (_3282 * _3282)) * (1.0 - (_3281 * _3281))));
                        float _3290 = _3289 * _3289;
                        float _3291 = _3290 * _3290;
                        float _3292 = _3271 + _3236;
                        float _3293 = _3272 + _3237;
                        float _3294 = _3273 + _3238;
                        float _3298 = inversesqrt(dot(vec3(_3292, _3293, _3294), vec3(_3292, _3293, _3294)));
                        float _3302 = dot(vec3(_776, _779, _782), vec3(_3271, _3272, _3273));
                        float _4620 = isnan(0.0) ? _3302 : (isnan(_3302) ? 0.0 : max(_3302, 0.0));
                        float _3305 = isnan(1.0) ? _4620 : (isnan(_4620) ? 1.0 : min(_4620, 1.0));
                        float _3306 = dot(vec3(_776, _779, _782), vec3(_3298 * _3292, _3298 * _3293, _3298 * _3294));
                        float _4631 = isnan(0.0) ? _3306 : (isnan(_3306) ? 0.0 : max(_3306, 0.0));
                        float _3309 = isnan(1.0) ? _4631 : (isnan(_4631) ? 1.0 : min(_4631, 1.0));
                        float _3313 = ((_3309 * _3309) * (_3291 + (-1.0))) + 1.0;
                        float _3314 = _3249 * _3290;
                        float _3315 = _3314 * _3314;
                        float _3318 = ((1.0 - _3315) * _3239) + _3315;
                        float _4642 = isnan(0.0) ? _3318 : (isnan(_3318) ? 0.0 : max(_3318, 0.0));
                        float _3319 = isnan(1.0) ? _4642 : (isnan(_4642) ? 1.0 : min(_4642, 1.0));
                        float _3320 = 1.0 - _3290;
                        float _3330 = (0.5 / (((_3319 * ((_3305 * _3320) + _3290)) + 9.9999999392252902907785028219223e-09) + (((_3319 * _3320) + _3290) * _3305))) * _3319;
                        float _4653 = isnan(0.0) ? _3330 : (isnan(_3330) ? 0.0 : max(_3330, 0.0));
                        float _3341 = (((_3291 * 3.1415927410125732421875) * (isnan(1.0) ? _4653 : (isnan(_4653) ? 1.0 : min(_4653, 1.0)))) / ((_3313 * _3313) * ((_3256 * 2.1991131305694580078125) + 3.141590118408203125))) * _3245;
                        _3093 = (_3260 * _3208.x) + _3166;
                        _3094 = (_3260 * _3208.y) + _3167;
                        _3095 = (_3260 * _3208.z) + _3168;
                        _3090 = (_3341 * _3225.x) + _3163;
                        _3091 = (_3341 * _3225.y) + _3164;
                        _3092 = (_3341 * _3225.z) + _3165;
                        if (_3170 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3163 = _3090;
                            _3164 = _3091;
                            _3165 = _3092;
                            _3166 = _3093;
                            _3167 = _3094;
                            _3168 = _3095;
                            _3169 = _3170;
                        }
                    }
                    frontier_phi_68_pred = _3092;
                    frontier_phi_68_pred_1 = _3095;
                    frontier_phi_68_pred_2 = _3094;
                    frontier_phi_68_pred_3 = _3093;
                    frontier_phi_68_pred_4 = _3091;
                    frontier_phi_68_pred_5 = _3090;
                }
                _2862 = frontier_phi_68_pred;
                _2868 = frontier_phi_68_pred_1;
                _2866 = frontier_phi_68_pred_2;
                _2864 = frontier_phi_68_pred_3;
                _2860 = frontier_phi_68_pred_4;
                _2858 = frontier_phi_68_pred_5;
                uint _3025 = _3024 + 1u;
                if (_3025 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3018 = _2858;
                    _3019 = _2860;
                    _3020 = _2862;
                    _3021 = _2864;
                    _3022 = _2866;
                    _3023 = _2868;
                    _3024 = _3025;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2857 = _2858;
            _2859 = _2860;
            _2861 = _2862;
            _2863 = _2864;
            _2865 = _2866;
            _2867 = _2868;
        }
        uvec4 _2871 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2872 = _2871.z;
        uint _2874 = (_2872 >> 8u) & 15u;
        float _2986;
        float _2988;
        float _2990;
        float _2992;
        float _2994;
        float _2996;
        if (((4294967295u << _2874) & _2714) == 0u)
        {
            _2986 = _2857;
            _2988 = _2859;
            _2990 = _2861;
            _2992 = _2863;
            _2994 = _2865;
            _2996 = _2867;
        }
        else
        {
            float _3011 = inversesqrt(dot(vec3(_2668, _2669, _2670), vec3(_2668, _2669, _2670)));
            float _3012 = _3011 * _2668;
            float _3013 = _3011 * _2669;
            float _3014 = _3011 * _2670;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2874 < ((_2872 >> 12u) & 15u))
            {
                float _2987;
                float _2989;
                float _2991;
                float _2993;
                float _2995;
                float _2997;
                float _3146 = _2857;
                float _3147 = _2859;
                float _3148 = _2861;
                float _3149 = _2863;
                float _3150 = _2865;
                float _3151 = _2867;
                uint _3152 = _2874;
                uint _3161;
                bool _3162;
                for (;;)
                {
                    _3161 = texelFetch(g_lightClassification, int((((_2708 << 5u) + (_2694 << 9u)) + (_3152 << 2u)) >> 2u)).x;
                    _3162 = _3161 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_3162)
                    {
                        frontier_phi_79_pred = _3151;
                        frontier_phi_79_pred_1 = _3150;
                        frontier_phi_79_pred_2 = _3149;
                        frontier_phi_79_pred_3 = _3148;
                        frontier_phi_79_pred_4 = _3147;
                        frontier_phi_79_pred_5 = _3146;
                    }
                    else
                    {
                        float _3355;
                        float _3356;
                        float _3357;
                        float _3358;
                        float _3359;
                        float _3360;
                        float _3650;
                        float _3651;
                        float _3652;
                        float _3653;
                        float _3654;
                        float _3655;
                        float _3368 = _3146;
                        float _3369 = _3147;
                        float _3370 = _3148;
                        float _3371 = _3149;
                        float _3372 = _3150;
                        float _3373 = _3151;
                        uint _3374 = _3161;
                        uint _3375;
                        vec4 _3400;
                        float _3401;
                        vec4 _3416;
                        vec3 _3428;
                        vec4 _3443;
                        vec4 _3459;
                        float _3506;
                        bool _3507;
                        for (;;)
                        {
                            uint _3385 = ((_3152 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3374));
                            _3375 = (_3374 + 4294967295u) & _3374;
                            uint _3387 = _3385 * 40u;
                            _3400 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3387)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3387 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3387 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3387 + 3u)).x));
                            _3401 = _3400.w;
                            uint _3403 = (_3385 * 40u) + 4u;
                            _3416 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3403)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3403 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3403 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3403 + 3u)).x));
                            uint _3418 = (_3385 * 40u) + 8u;
                            _3428 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3418)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3418 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3418 + 2u)).x));
                            uint _3430 = (_3385 * 40u) + 16u;
                            _3443 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3430)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3430 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3430 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3430 + 3u)).x));
                            uint _3446 = (_3385 * 40u) + 20u;
                            _3459 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3446)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3446 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3446 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3446 + 3u)).x));
                            uint _3462 = (_3385 * 40u) + 24u;
                            vec4 _3475 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3462)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3462 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3462 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3462 + 3u)).x));
                            uint _3481 = (_3385 * 40u) + 28u;
                            vec4 _3494 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3481)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3481 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3481 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3481 + 3u)).x));
                            _3506 = fma(_2670, _3494.z, fma(_2669, _3494.y, _3494.x * _2668)) + _3494.w;
                            _3507 = !((fma(_2670, _3475.z, fma(_2669, _3475.y, _3475.x * _2668)) + _3475.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_3507)
                            {
                                float _3534 = _3400.x - _2668;
                                float _3535 = _3400.y - _2669;
                                float _3536 = _3400.z - _2670;
                                float _3537 = dot(vec3(_3534, _3535, _3536), vec3(_3534, _3535, _3536));
                                float _3540 = inversesqrt(_3537);
                                float _3541 = _3540 * _3534;
                                float _3542 = _3540 * _3535;
                                float _3543 = _3540 * _3536;
                                float _3547 = 1.0 - (_3537 / (_3401 * _3401));
                                float _4664 = isnan(0.0) ? _3547 : (isnan(_3547) ? 0.0 : max(_3547, 0.0));
                                float _3548 = isnan(1.0) ? _4664 : (isnan(_4664) ? 1.0 : min(_4664, 1.0));
                                float _3552 = sqrt(_3537) * _3416.w;
                                float _3554 = 1.39999997615814208984375 / (_3552 + 1.39999997615814208984375);
                                float _3555 = _3554 * _3554;
                                float _3558 = ((1.0 - _3555) * dot(vec3(_3541, _3542, _3543), vec3(_776, _779, _782))) + _3555;
                                float _3561 = _3552 * _3552;
                                float _3565 = (fma(_2670, _3443.z, fma(_2669, _3443.y, _3443.x * _2668)) + _3443.w) / _3506;
                                float _3566 = (fma(_2670, _3459.z, fma(_2669, _3459.y, _3459.x * _2668)) + _3459.w) / _3506;
                                float _3570 = 1.0 - dot(vec2(_3565, _3566), vec2(_3565, _3566));
                                float _4680 = isnan(0.0) ? _3570 : (isnan(_3570) ? 0.0 : max(_3570, 0.0));
                                float _3571 = isnan(1.0) ? _4680 : (isnan(_4680) ? 1.0 : min(_4680, 1.0));
                                float _3572 = _3571 * (((isnan(0.0) ? _3558 : (isnan(_3558) ? 0.0 : max(_3558, 0.0))) * _3548) / ((_3561 * 0.699999988079071044921875) + 1.0));
                                float _3584 = exp2(log2(1.0 / ((_3561 * 3.5) + 5.0)) * 0.25);
                                float _3585 = 1.0 - _979;
                                float _3592 = sqrt(1.0 - ((1.0 - (_3585 * _3585)) * (1.0 - (_3584 * _3584))));
                                float _3593 = _3592 * _3592;
                                float _3594 = _3593 * _3593;
                                float _3595 = _3541 - _3012;
                                float _3596 = _3542 - _3013;
                                float _3597 = _3543 - _3014;
                                float _3601 = inversesqrt(dot(vec3(_3595, _3596, _3597), vec3(_3595, _3596, _3597)));
                                float _3605 = dot(vec3(_776, _779, _782), vec3((-0.0) - _3012, (-0.0) - _3013, (-0.0) - _3014));
                                float _4691 = isnan(0.0) ? _3605 : (isnan(_3605) ? 0.0 : max(_3605, 0.0));
                                float _3608 = isnan(1.0) ? _4691 : (isnan(_4691) ? 1.0 : min(_4691, 1.0));
                                float _3609 = dot(vec3(_776, _779, _782), vec3(_3601 * _3595, _3601 * _3596, _3601 * _3597));
                                float _4702 = isnan(0.0) ? _3609 : (isnan(_3609) ? 0.0 : max(_3609, 0.0));
                                float _3612 = isnan(1.0) ? _4702 : (isnan(_4702) ? 1.0 : min(_4702, 1.0));
                                float _3616 = ((_3612 * _3612) * (_3594 + (-1.0))) + 1.0;
                                float _3617 = _3554 * _3593;
                                float _3618 = _3617 * _3617;
                                float _3624 = ((1.0 - _3618) * dot(vec3(_776, _779, _782), vec3(_3541, _3542, _3543))) + _3618;
                                float _4713 = isnan(0.0) ? _3624 : (isnan(_3624) ? 0.0 : max(_3624, 0.0));
                                float _3625 = isnan(1.0) ? _4713 : (isnan(_4713) ? 1.0 : min(_4713, 1.0));
                                float _3626 = 1.0 - _3593;
                                float _3636 = (0.5 / (((_3625 * ((_3608 * _3626) + _3593)) + 9.9999999392252902907785028219223e-09) + (((_3625 * _3626) + _3593) * _3608))) * _3625;
                                float _4724 = isnan(0.0) ? _3636 : (isnan(_3636) ? 0.0 : max(_3636, 0.0));
                                float _3646 = (_3571 * _3548) * (((_3594 * 3.1415927410125732421875) * (isnan(1.0) ? _4724 : (isnan(_4724) ? 1.0 : min(_4724, 1.0)))) / ((_3616 * _3616) * ((_3561 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3572 * _3416.z;
                                frontier_phi_85_pred_1 = _3572 * _3416.y;
                                frontier_phi_85_pred_2 = _3572 * _3416.x;
                                frontier_phi_85_pred_3 = _3646 * _3428.z;
                                frontier_phi_85_pred_4 = _3646 * _3428.y;
                                frontier_phi_85_pred_5 = _3646 * _3428.x;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3655 = frontier_phi_85_pred;
                            _3654 = frontier_phi_85_pred_1;
                            _3653 = frontier_phi_85_pred_2;
                            _3652 = frontier_phi_85_pred_3;
                            _3651 = frontier_phi_85_pred_4;
                            _3650 = frontier_phi_85_pred_5;
                            _3358 = _3653 + _3371;
                            _3359 = _3654 + _3372;
                            _3360 = _3655 + _3373;
                            _3355 = _3650 + _3368;
                            _3356 = _3651 + _3369;
                            _3357 = _3652 + _3370;
                            if (_3375 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3368 = _3355;
                                _3369 = _3356;
                                _3370 = _3357;
                                _3371 = _3358;
                                _3372 = _3359;
                                _3373 = _3360;
                                _3374 = _3375;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _3360;
                        frontier_phi_79_pred_1 = _3359;
                        frontier_phi_79_pred_2 = _3358;
                        frontier_phi_79_pred_3 = _3357;
                        frontier_phi_79_pred_4 = _3356;
                        frontier_phi_79_pred_5 = _3355;
                    }
                    _2997 = frontier_phi_79_pred;
                    _2995 = frontier_phi_79_pred_1;
                    _2993 = frontier_phi_79_pred_2;
                    _2991 = frontier_phi_79_pred_3;
                    _2989 = frontier_phi_79_pred_4;
                    _2987 = frontier_phi_79_pred_5;
                    uint _3153 = _3152 + 1u;
                    if (_3153 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3146 = _2987;
                        _3147 = _2989;
                        _3148 = _2991;
                        _3149 = _2993;
                        _3150 = _2995;
                        _3151 = _2997;
                        _3152 = _3153;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2993;
                frontier_phi_60_61_ladder_1 = _2997;
                frontier_phi_60_61_ladder_2 = _2995;
                frontier_phi_60_61_ladder_3 = _2991;
                frontier_phi_60_61_ladder_4 = _2989;
                frontier_phi_60_61_ladder_5 = _2987;
            }
            else
            {
                frontier_phi_60_61_ladder = _2863;
                frontier_phi_60_61_ladder_1 = _2867;
                frontier_phi_60_61_ladder_2 = _2865;
                frontier_phi_60_61_ladder_3 = _2861;
                frontier_phi_60_61_ladder_4 = _2859;
                frontier_phi_60_61_ladder_5 = _2857;
            }
            _2986 = frontier_phi_60_61_ladder_5;
            _2988 = frontier_phi_60_61_ladder_4;
            _2990 = frontier_phi_60_61_ladder_3;
            _2992 = frontier_phi_60_61_ladder;
            _2994 = frontier_phi_60_61_ladder_2;
            _2996 = frontier_phi_60_61_ladder_1;
        }
        float _3001 = isnan(1.0) ? _963 : (isnan(_963) ? 1.0 : min(_963, 1.0));
        _2726 = (_3001 * _2992) + _2163;
        _2728 = (_3001 * _2994) + _2165;
        _2730 = (_3001 * _2996) + _2167;
        _2732 = ((_2986 * _949) * _3001) + _2508;
        _2734 = ((_2988 * _950) * _3001) + _2510;
        _2736 = ((_2990 * _951) * _3001) + _2512;
    }
    else
    {
        _2726 = _2163;
        _2728 = _2165;
        _2730 = _2167;
        _2732 = _2508;
        _2734 = _2510;
        _2736 = _2512;
    }
    uint _2742 = _856 + uint(cbMatDynParam._m0[0u].w);
    float _2752 = ((((cbMtdParam._m0[12u].x * cbMtdParam._m0[16u].z) * cbMtdParam._m0[15u].w) * _584) * _597.x) * cbInstanceData._m0[_2742].x;
    float _2757 = ((((cbMtdParam._m0[12u].y * cbMtdParam._m0[16u].z) * cbMtdParam._m0[15u].w) * _584) * _597.y) * cbInstanceData._m0[_2742].y;
    float _2762 = ((((cbMtdParam._m0[12u].z * cbMtdParam._m0[16u].z) * cbMtdParam._m0[15u].w) * _584) * _597.z) * cbInstanceData._m0[_2742].z;
    float _4740 = isnan(0.0) ? _940 : (isnan(_940) ? 0.0 : max(_940, 0.0));
    float _4751 = isnan(0.0) ? _941 : (isnan(_941) ? 0.0 : max(_941, 0.0));
    float _4762 = isnan(0.0) ? _942 : (isnan(_942) ? 0.0 : max(_942, 0.0));
    float _4773 = isnan(0.0) ? _655 : (isnan(_655) ? 0.0 : max(_655, 0.0));
    float _2780 = (((isnan(1.0) ? _4740 : (isnan(_4740) ? 1.0 : min(_4740, 1.0))) * (_2726 + ((isnan(0.0) ? _1725 : (isnan(_1725) ? 0.0 : max(_1725, 0.0))) * _963))) + ((_2732 + ((isnan(0.0) ? _2016 : (isnan(_2016) ? 0.0 : max(_2016, 0.0))) * _1801)) * cbPerFrame._m0[3u].x)) + _2752;
    float _2782 = (_2757 + ((_2734 + ((isnan(0.0) ? _2019 : (isnan(_2019) ? 0.0 : max(_2019, 0.0))) * _1801)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4751 : (isnan(_4751) ? 1.0 : min(_4751, 1.0))) * (_2728 + ((isnan(0.0) ? _1728 : (isnan(_1728) ? 0.0 : max(_1728, 0.0))) * _963)));
    float _2784 = (_2762 + ((_2736 + ((isnan(0.0) ? _2022 : (isnan(_2022) ? 0.0 : max(_2022, 0.0))) * _1801)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4762 : (isnan(_4762) ? 1.0 : min(_4762, 1.0))) * (_2730 + ((isnan(0.0) ? _1731 : (isnan(_1731) ? 0.0 : max(_1731, 0.0))) * _963)));
    float _2785 = isnan(0.0) ? _2780 : (isnan(_2780) ? 0.0 : max(_2780, 0.0));
    float _2786 = isnan(0.0) ? _2782 : (isnan(_2782) ? 0.0 : max(_2782, 0.0));
    float _2787 = isnan(0.0) ? _2784 : (isnan(_2784) ? 0.0 : max(_2784, 0.0));
    float _2793 = cbMtdParam._m0[2u].x * _2752;
    float _2794 = cbMtdParam._m0[2u].y * _2757;
    float _2795 = cbMtdParam._m0[2u].z * _2762;
    float _4799 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2797 = isnan(1.0) ? _4799 : (isnan(_4799) ? 1.0 : min(_4799, 1.0));
    float _2802 = cbInstanceData._m0[_855 + 6u].w * (isnan(1.0) ? _4773 : (isnan(_4773) ? 1.0 : min(_4773, 1.0)));
    float _2807 = _753 / cbSceneParam._m0[86u].x;
    float _2808 = _754 / cbSceneParam._m0[86u].y;
    vec4 _2822 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2807, _2808, (log2((isnan(cbSceneParam._m0[77u].w) ? _676 : (isnan(_676) ? cbSceneParam._m0[77u].w : min(_676, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2824 = _2822.x;
    float _2825 = _2822.y;
    float _2826 = _2822.z;
    float _2827 = _2822.w;
    float _2919;
    float _2921;
    float _2923;
    float _2925;
    if (_676 > cbSceneParam._m0[78u].w)
    {
        float _2882 = isnan(_676) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _676 : min(cbSceneParam._m0[80u].w, _676));
        float _2883 = _2882 / _676;
        float _2894 = _2883 * _726;
        float _2895 = _727 * _2883;
        float _2896 = (-0.0) - _2895;
        float _2897 = _2883 * _728;
        float _2899 = (cbSceneParam._m0[77u].w * _2896) / _2882;
        float _2900 = _2899 + cbSceneParam._m0[79u].w;
        float _2901 = cbSceneParam._m0[79u].w - _2895;
        float _2907 = sqrt(((_2894 * _2894) + (_2895 * _2895)) + (_2897 * _2897));
        float _2910 = (1.0 - (cbSceneParam._m0[77u].w / _2882)) * _2907;
        float _2915 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2917 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3103;
        if (abs((_2896 - _2899) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3103 = ((((_2900 > 0.0) ? exp2(_2915 * _2900) : (2.0 - exp2(_2917 * _2900))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2910;
        }
        else
        {
            float _3047 = 1.0 / cbSceneParam._m0[80u].x;
            float _3048 = isnan(_2901) ? _2900 : (isnan(_2900) ? _2901 : max(_2900, _2901));
            float _3049 = isnan(_2901) ? _2900 : (isnan(_2900) ? _2901 : min(_2900, _2901));
            float _3058 = isnan(0.0) ? _3048 : (isnan(_3048) ? 0.0 : min(_3048, 0.0));
            float _3059 = isnan(0.0) ? _3049 : (isnan(_3049) ? 0.0 : min(_3049, 0.0));
            _3103 = ((abs(_2907 / _2896) * cbSceneParam._m0[80u].y) * ((((_3058 - _3059) * 2.0) - ((exp2(_2915 * (isnan(0.0) ? _3048 : (isnan(_3048) ? 0.0 : max(_3048, 0.0)))) - exp2(_2915 * (isnan(0.0) ? _3049 : (isnan(_3049) ? 0.0 : max(_3049, 0.0))))) * _3047)) - ((exp2(_2917 * _3058) - exp2(_2917 * _3059)) * _3047))) + (_2910 * cbSceneParam._m0[80u].z);
        }
        vec4 _3105 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2807, _2808, 1.0), 0.0);
        float _3114 = exp2((_3103 * (-1.44269502162933349609375)) * (1.0 - _3105.w));
        float _3115 = log2(_3114);
        float _3131 = log2(_2827);
        _2919 = (exp2(_3131 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3115 * cbSceneParam._m0[78u].x)) * _3105.x) / cbSceneParam._m0[78u].x)) + _2824;
        _2921 = (exp2(_3131 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3115 * cbSceneParam._m0[78u].y)) * _3105.y) / cbSceneParam._m0[78u].y)) + _2825;
        _2923 = (exp2(_3131 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3115 * cbSceneParam._m0[78u].z)) * _3105.z) / cbSceneParam._m0[78u].z)) + _2826;
        _2925 = _3114 * _2827;
    }
    else
    {
        _2919 = _2824;
        _2921 = _2825;
        _2923 = _2826;
        _2925 = _2827;
    }
    bool _3141;
    vec4 _2935;
    vec4 _2957;
    float _2959;
    float _2963;
    float _2964;
    float _2965;
    float _2968;
    float _2971;
    float _2974;
    float _2975;
    bool _2985;
    for (;;)
    {
        _2935 = cbMatDynParam._m0[0u];
        float _2937 = roundEven(_2935.y);
        bool _2938 = _2937 == 3.0;
        float _2939 = log2(_2925);
        float _2943 = exp2(_2939 * cbSceneParam._m0[78u].x);
        float _2944 = exp2(_2939 * cbSceneParam._m0[78u].y);
        float _2945 = exp2(_2939 * cbSceneParam._m0[78u].z);
        float _2946 = _2943 * _2785;
        float _2947 = _2944 * _2786;
        float _2948 = _2945 * _2787;
        float _2955 = _742 + (-0.5);
        _2957 = cbMtdParam._m0[1u];
        _2959 = _2957.y * _2955;
        float _2962 = (_2937 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2963 = _2962 * (_2938 ? _2946 : (_2946 + (cbSceneParam._m0[72u].w * _2919)));
        _2964 = _2962 * (_2938 ? _2947 : (_2947 + (cbSceneParam._m0[72u].w * _2921)));
        _2965 = _2962 * (_2938 ? _2948 : (_2948 + (cbSceneParam._m0[72u].w * _2923)));
        _2968 = ((_2793 * _2797) * _2943) * _2962;
        _2971 = ((_2794 * _2797) * _2944) * _2962;
        _2974 = ((_2795 * _2797) * _2945) * _2962;
        _2975 = _2955 * 0.999000012874603271484375;
        _2985 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2985)
        {
            if ((cbInstanceData._m0[_855 + 7u].x + _2975) < 0.5)
            {
                _3141 = true;
                break;
            }
        }
        uint _3082 = _856 + uint(_2935.w);
        if ((cbInstanceData._m0[_3082].w < 1.0) && ((cbInstanceData._m0[_3082].w + _2975) < 0.5))
        {
            _3141 = true;
            break;
        }
        if ((_2959 + _438) < _2957.x)
        {
            _3141 = true;
            break;
        }
        _3141 = false;
        break;
    }
    float _3346;
    if (_3141)
    {
        discard_state = true;
        _3346 = 0.0;
    }
    else
    {
        _3346 = _2802;
    }
    SV_Target.x = _2963;
    SV_Target.y = _2964;
    SV_Target.z = _2965;
    SV_Target.w = _3346;
    SV_Target_1.x = _2968;
    SV_Target_1.y = _2971;
    SV_Target_1.z = _2974;
    SV_Target_1.w = _2802;
    discard_exit();
}


