#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[18];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_1;
layout(set = 0, binding = 1) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_7;
layout(set = 0, binding = 10) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_6;
layout(set = 0, binding = 2) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_0;
layout(set = 0, binding = 3) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_10;
layout(set = 0, binding = 4) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_11;
layout(set = 0, binding = 5) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_12;
layout(set = 0, binding = 6) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_2;
layout(set = 0, binding = 7) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_3;
layout(set = 0, binding = 9) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_5;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1255;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _209 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _210 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _211 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _217 = inversesqrt(dot(vec3(_209, _210, _211), vec3(_209, _210, _211)));
    float _224 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _225 = _224 * NORMAL.x;
    float _226 = _224 * NORMAL.y;
    float _227 = _224 * NORMAL.z;
    float _231 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _239;
    float _240;
    float _241;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _239 = (-0.0) - _225;
        _240 = (-0.0) - _226;
        _241 = (-0.0) - _227;
    }
    else
    {
        _239 = _225;
        _240 = _226;
        _241 = _227;
    }
    vec4 _254 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _259 = _254.z;
    float _266 = exp2(log2(_259 * 22.0) * 260.0);
    float _267 = isnan(0.0) ? _266 : (isnan(_266) ? 0.0 : max(_266, 0.0));
    float _268 = isnan(1.0) ? _267 : (isnan(_267) ? 1.0 : min(_267, 1.0));
    vec4 _282 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _293 = cbMtdParam._m0[10u].x * _282.x;
    float _294 = cbMtdParam._m0[10u].y * _282.y;
    float _295 = cbMtdParam._m0[10u].z * _282.z;
    vec4 _307 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _335 = exp2(log2(1.0 - _254.w) * 8.0);
    vec4 _347 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_10, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    vec4 _372 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _380 = (((((cbMtdParam._m0[9u].x * _307.x) - _293) * _268) + _293) * 4.55000019073486328125) * _372.x;
    float _382 = (((((cbMtdParam._m0[9u].y * _307.y) - _294) * _268) + _294) * 4.55000019073486328125) * _372.y;
    float _384 = (((((cbMtdParam._m0[9u].z * _307.z) - _295) * _268) + _295) * 4.55000019073486328125) * _372.z;
    float _391 = (((cbMtdParam._m0[13u].x * _347.x) - _380) * _335) + _380;
    float _392 = (((cbMtdParam._m0[13u].y * _347.y) - _382) * _335) + _382;
    float _393 = (((cbMtdParam._m0[13u].z * _347.z) - _384) * _335) + _384;
    float _394 = _372.w * _307.w;
    float _424 = (((texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w)).x - cbMtdParam._m0[17u].x) + cbMtdParam._m0[16u].x) * _268) + cbMtdParam._m0[17u].x;
    float _427 = ((cbMtdParam._m0[15u].z - _424) * _335) + _424;
    vec4 _439 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w));
    float _441 = _439.x;
    float _442 = _439.y;
    float _448 = cbMtdParam._m0[14u].y + _439.z;
    vec4 _460 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w));
    vec4 _482 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _495 = (((_268 * (_259 + (-0.5))) + 0.5) * 2.0) * ((((_460.z - _448) + cbMtdParam._m0[14u].x) * _268) + _448);
    float _499 = (((_482.z - _495) + cbMtdParam._m0[15u].y) * _335) + _495;
    float _514 = abs((fract(cbMtdParam._m0[15u].x * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _3668 = isnan(0.0) ? _514 : (isnan(_514) ? 0.0 : max(_514, 0.0));
    float _515 = isnan(1.0) ? _3668 : (isnan(_3668) ? 1.0 : min(_3668, 1.0));
    float _520 = (_515 * _515) * (3.0 - (_515 * 2.0));
    vec4 _533 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _541 = (_254.x * 2.0) + (-1.0);
    float _542 = (_254.y * 2.0) + (-1.0);
    float _543 = dot(vec2(_541, _542), vec2(_541, _542));
    float _3679 = isnan(0.0) ? _543 : (isnan(_543) ? 0.0 : max(_543, 0.0));
    float _548 = sqrt(1.0 - (isnan(1.0) ? _3679 : (isnan(_3679) ? 1.0 : min(_3679, 1.0))));
    float _553 = ((_460.x - _441) * _268) + _441;
    float _554 = ((_460.y - _442) * _268) + _442;
    float _567 = (cbMtdParam._m0[14u].z * (((((_482.x - _553) * _335) + _553) * 2.0) + (-1.0))) + _541;
    float _568 = (cbMtdParam._m0[14u].z * (((((_482.y - _554) * _335) + _554) * 2.0) + (-1.0))) + _542;
    float _571 = fma(_548, _239, fma(_568, _231 * TANGENT.x, (_217 * _209) * _567));
    float _574 = fma(_548, _240, fma(_568, _231 * TANGENT.y, (_217 * _210) * _567));
    float _577 = fma(_548, _241, fma(_568, _231 * TANGENT.z, (_217 * _211) * _567));
    float _581 = inversesqrt(dot(vec3(_571, _574, _577), vec3(_571, _574, _577)));
    float _582 = _581 * _571;
    float _583 = _581 * _574;
    float _584 = _581 * _577;
    float _3690 = isnan(0.0) ? _394 : (isnan(_394) ? 0.0 : max(_394, 0.0));
    float _585 = isnan(1.0) ? _3690 : (isnan(_3690) ? 1.0 : min(_3690, 1.0));
    float _3701 = isnan(0.0) ? _499 : (isnan(_499) ? 0.0 : max(_499, 0.0));
    float _586 = isnan(1.0) ? _3701 : (isnan(_3701) ? 1.0 : min(_3701, 1.0));
    float _3712 = isnan(0.0) ? _391 : (isnan(_391) ? 0.0 : max(_391, 0.0));
    float _587 = isnan(1.0) ? _3712 : (isnan(_3712) ? 1.0 : min(_3712, 1.0));
    float _3723 = isnan(0.0) ? _392 : (isnan(_392) ? 0.0 : max(_392, 0.0));
    float _588 = isnan(1.0) ? _3723 : (isnan(_3723) ? 1.0 : min(_3723, 1.0));
    float _3734 = isnan(0.0) ? _393 : (isnan(_393) ? 0.0 : max(_393, 0.0));
    float _589 = isnan(1.0) ? _3734 : (isnan(_3734) ? 1.0 : min(_3734, 1.0));
    float _3745 = isnan(0.0) ? _427 : (isnan(_427) ? 0.0 : max(_427, 0.0));
    float _590 = isnan(1.0) ? _3745 : (isnan(_3745) ? 1.0 : min(_3745, 1.0));
    float _606 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _648 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _658 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _648);
    float _659 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _648);
    float _660 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _648);
    float _664 = inversesqrt(dot(vec3(_658, _659, _660), vec3(_658, _659, _660)));
    float _665 = _658 * _664;
    float _666 = _659 * _664;
    float _667 = _660 * _664;
    float _673 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _674 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _676 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _678 = _676.w;
    float _696 = fma(_584, cbSceneParam._m0[5u].z, fma(_583, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _582));
    float _699 = fma(_584, cbSceneParam._m0[6u].z, fma(_583, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _582));
    float _702 = fma(_584, cbSceneParam._m0[7u].z, fma(_583, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _582));
    vec4 _704 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _706 = _704.x;
    float _718 = (((_704.y - _586) + (_704.w * _586)) * cbMtdParam._m0[3u].x) + _586;
    vec4 _719 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _735 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3(cbMtdParam._m0[3u].x * (_706 * _706)), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * _719.z;
    float _743 = (((cbMatDynParam._m0[15u].x - _590) * cbMatDynParam._m0[15u].w) * _735) + _590;
    float _751 = ((_735 * cbMatDynParam._m0[16u].z) * (cbMatDynParam._m0[16u].x - _718)) + _718;
    uint _775 = uint(roundEven(NORMAL.w)) * 13u;
    uint _776 = _775 + 9u;
    uint _777 = _776 + uint(cbMatDynParam._m0[0u].w);
    float _783 = (cbMtdParam._m0[0u].x * _587) * cbInstanceData._m0[_777].x;
    float _784 = (cbMtdParam._m0[0u].y * _588) * cbInstanceData._m0[_777].y;
    float _785 = (cbMtdParam._m0[0u].z * _589) * cbInstanceData._m0[_777].z;
    float _3756 = isnan(0.0) ? _783 : (isnan(_783) ? 0.0 : max(_783, 0.0));
    float _786 = isnan(1.0) ? _3756 : (isnan(_3756) ? 1.0 : min(_3756, 1.0));
    float _3767 = isnan(0.0) ? _784 : (isnan(_784) ? 0.0 : max(_784, 0.0));
    float _787 = isnan(1.0) ? _3767 : (isnan(_3767) ? 1.0 : min(_3767, 1.0));
    float _3778 = isnan(0.0) ? _785 : (isnan(_785) ? 0.0 : max(_785, 0.0));
    float _788 = isnan(1.0) ? _3778 : (isnan(_3778) ? 1.0 : min(_3778, 1.0));
    vec4 _789 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _794 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _805 = (((_794.x - _743) + (_794.w * _743)) * cbMtdParam._m0[3u].x) + _743;
    float _818 = (cbMtdParam._m0[3u].x * (((_786 * _678) - _786) + _789.x)) + _786;
    float _819 = (cbMtdParam._m0[3u].x * (((_787 * _678) - _787) + _789.y)) + _787;
    float _820 = (cbMtdParam._m0[3u].x * (((_788 * _678) - _788) + _789.z)) + _788;
    float _834 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3((_743 * (_587 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625, (_743 * (_588 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625, (_743 * (_589 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w)).z;
    float _838 = _834 * cbMatDynParam._m0[13u].w;
    float _848 = (_838 * (cbMatDynParam._m0[13u].x - _818)) + _818;
    float _849 = (_838 * (cbMatDynParam._m0[13u].y - _819)) + _819;
    float _850 = (_838 * (cbMatDynParam._m0[13u].z - _820)) + _820;
    float _858 = ((_834 * cbMatDynParam._m0[15u].w) * (cbMatDynParam._m0[15u].x - _805)) + _805;
    float _859 = 1.0 - _858;
    float _860 = _859 * _848;
    float _861 = _859 * _849;
    float _862 = _859 * _850;
    float _866 = (_848 + (-0.039999999105930328369140625)) * _858;
    float _867 = (_849 + (-0.039999999105930328369140625)) * _858;
    float _868 = (_850 + (-0.039999999105930328369140625)) * _858;
    float _869 = _866 + 0.039999999105930328369140625;
    float _870 = _867 + 0.039999999105930328369140625;
    float _871 = _868 + 0.039999999105930328369140625;
    vec4 _880 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _673, cbSceneParam._m0[86u].y * _674));
    float _883 = _880.x * TEXCOORD_4;
    float _884 = dot(vec3(_582, _583, _584), vec3(_665, _666, _667));
    float _887 = _884 * 2.0;
    float _891 = (_887 * _582) - _665;
    float _892 = (_887 * _583) - _666;
    float _893 = (_887 * _584) - _667;
    float _897 = abs(dot(vec3(_665, _666, _667), vec3(_582, _583, _584)));
    float _3789 = isnan(0.0) ? _897 : (isnan(_897) ? 0.0 : max(_897, 0.0));
    float _899 = sqrt(_751);
    float _911 = exp2((_899 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3789 : (isnan(_3789) ? 1.0 : min(_3789, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_899 * 3.0));
    float _917 = (1.0 - _911) * ((_899 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _918 = _911 * _899;
    float _946 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _950 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _954 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1254;
    float _1256;
    float _1257;
    float _1258;
    float _1259;
    float _1260;
    float _1261;
    float _1262;
    float _1263;
    float _1264;
    float _1265;
    float _1266;
    float _1267;
    float _1268;
    float _1269;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _981 = fma(_954, cbModelParam._m0[26u].z, fma(_950, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _946));
        float _985 = fma(_954, cbModelParam._m0[27u].z, fma(_950, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _946));
        float _989 = fma(_954, cbModelParam._m0[28u].z, fma(_950, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _946));
        float _1012 = _946 + _582;
        float _1013 = _950 + _583;
        float _1014 = _954 + _584;
        float _1024 = fma(_1014, cbModelParam._m0[26u].z, fma(_1013, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1012)) - _981;
        float _1025 = fma(_1014, cbModelParam._m0[27u].z, fma(_1013, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1012)) - _985;
        float _1026 = fma(_1014, cbModelParam._m0[28u].z, fma(_1013, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1012)) - _989;
        float _1030 = inversesqrt(dot(vec3(_1024, _1025, _1026), vec3(_1024, _1025, _1026)));
        float _1043 = ((_1030 * _1024) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_981 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1044 = ((_1030 * _1025) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_985 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1045 = ((_1030 * _1026) / cbModelParam._m0[34u].z) + ((((((_989 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1048 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1043, _1044, _1045), 0.0);
        vec4 _1055 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1043, _1044, _1045), 0.0);
        vec4 _1062 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1043, _1044, _1045), 0.0);
        vec4 _1069 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1043, _1044, _1045), 0.0);
        float _1082 = exp2((_1048.w + (-0.5)) * 20.0) * 2.0;
        float _1083 = _1082 * (_1048.x + (-0.5));
        float _1084 = _1082 * (_1048.y + (-0.5));
        float _1085 = _1082 * (_1048.z + (-0.5));
        float _1092 = exp2((_1055.w + (-0.5)) * 20.0) * 2.0;
        float _1093 = _1092 * (_1055.x + (-0.5));
        float _1094 = _1092 * (_1055.y + (-0.5));
        float _1095 = _1092 * (_1055.z + (-0.5));
        float _1102 = exp2((_1062.w + (-0.5)) * 20.0) * 2.0;
        float _1103 = _1102 * (_1062.x + (-0.5));
        float _1104 = _1102 * (_1062.y + (-0.5));
        float _1105 = _1102 * (_1062.z + (-0.5));
        float _1112 = exp2((_1069.w + (-0.5)) * 20.0) * 2.0;
        float _1113 = _1112 * (_1069.x + (-0.5));
        float _1114 = _1112 * (_1069.y + (-0.5));
        float _1115 = _1112 * (_1069.z + (-0.5));
        float _1116 = isnan(0.0) ? _1113 : (isnan(_1113) ? 0.0 : max(_1113, 0.0));
        float _1117 = isnan(0.0) ? _1114 : (isnan(_1114) ? 0.0 : max(_1114, 0.0));
        float _1118 = isnan(0.0) ? _1115 : (isnan(_1115) ? 0.0 : max(_1115, 0.0));
        float _1119 = _1083 * 0.5;
        float _1120 = _1093 * 0.5;
        float _1121 = _1103 * 0.5;
        float _1122 = dot(vec3(_1119, _1120, _1121), vec3(_1119, _1120, _1121));
        float _1127 = (_1122 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1122);
        float _1136 = (dot(vec3(_582, _583, _584), vec3(_1127 * _1119, _1127 * _1120, _1127 * _1121)) + 1.0) * 0.5;
        float _3815 = isnan(0.0) ? _1136 : (isnan(_1136) ? 0.0 : max(_1136, 0.0));
        float _1146 = sqrt(((_1120 * _1120) + (_1119 * _1119)) + (_1121 * _1121)) / (_1116 + 9.9999997473787516355514526367188e-06);
        float _3826 = isnan(0.0) ? _1146 : (isnan(_1146) ? 0.0 : max(_1146, 0.0));
        float _1147 = isnan(1.0) ? _3826 : (isnan(_3826) ? 1.0 : min(_3826, 1.0));
        float _1148 = _1147 * 2.0;
        float _1152 = (1.0 - _1147) / (_1147 + 1.0);
        float _3837 = isnan(0.0) ? _1152 : (isnan(_1152) ? 0.0 : max(_1152, 0.0));
        float _1153 = isnan(1.0) ? _3837 : (isnan(_3837) ? 1.0 : min(_3837, 1.0));
        float _1162 = ((((1.0 - _1153) * (_1148 + 2.0)) * exp2(log2(isnan(1.0) ? _3815 : (isnan(_3815) ? 1.0 : min(_3815, 1.0))) * (_1148 + 1.0))) + _1153) * _1116;
        float _1163 = _1084 * 0.5;
        float _1164 = _1094 * 0.5;
        float _1165 = _1104 * 0.5;
        float _1166 = dot(vec3(_1163, _1164, _1165), vec3(_1163, _1164, _1165));
        float _1171 = (_1166 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1166);
        float _1179 = (dot(vec3(_582, _583, _584), vec3(_1171 * _1163, _1171 * _1164, _1171 * _1165)) + 1.0) * 0.5;
        float _3848 = isnan(0.0) ? _1179 : (isnan(_1179) ? 0.0 : max(_1179, 0.0));
        float _1188 = sqrt(((_1164 * _1164) + (_1163 * _1163)) + (_1165 * _1165)) / (_1117 + 9.9999997473787516355514526367188e-06);
        float _3859 = isnan(0.0) ? _1188 : (isnan(_1188) ? 0.0 : max(_1188, 0.0));
        float _1189 = isnan(1.0) ? _3859 : (isnan(_3859) ? 1.0 : min(_3859, 1.0));
        float _1190 = _1189 * 2.0;
        float _1194 = (1.0 - _1189) / (_1189 + 1.0);
        float _3870 = isnan(0.0) ? _1194 : (isnan(_1194) ? 0.0 : max(_1194, 0.0));
        float _1195 = isnan(1.0) ? _3870 : (isnan(_3870) ? 1.0 : min(_3870, 1.0));
        float _1204 = ((((1.0 - _1195) * (_1190 + 2.0)) * exp2(log2(isnan(1.0) ? _3848 : (isnan(_3848) ? 1.0 : min(_3848, 1.0))) * (_1190 + 1.0))) + _1195) * _1117;
        float _1205 = _1085 * 0.5;
        float _1206 = _1095 * 0.5;
        float _1207 = _1105 * 0.5;
        float _1208 = dot(vec3(_1205, _1206, _1207), vec3(_1205, _1206, _1207));
        float _1213 = (_1208 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1208);
        float _1221 = (dot(vec3(_582, _583, _584), vec3(_1213 * _1205, _1213 * _1206, _1213 * _1207)) + 1.0) * 0.5;
        float _3881 = isnan(0.0) ? _1221 : (isnan(_1221) ? 0.0 : max(_1221, 0.0));
        float _1230 = sqrt(((_1206 * _1206) + (_1205 * _1205)) + (_1207 * _1207)) / (_1118 + 9.9999997473787516355514526367188e-06);
        float _3892 = isnan(0.0) ? _1230 : (isnan(_1230) ? 0.0 : max(_1230, 0.0));
        float _1231 = isnan(1.0) ? _3892 : (isnan(_3892) ? 1.0 : min(_3892, 1.0));
        float _1232 = _1231 * 2.0;
        float _1236 = (1.0 - _1231) / (_1231 + 1.0);
        float _3903 = isnan(0.0) ? _1236 : (isnan(_1236) ? 0.0 : max(_1236, 0.0));
        float _1237 = isnan(1.0) ? _3903 : (isnan(_3903) ? 1.0 : min(_3903, 1.0));
        float _1246 = ((((1.0 - _1237) * (_1232 + 2.0)) * exp2(log2(isnan(1.0) ? _3881 : (isnan(_3881) ? 1.0 : min(_3881, 1.0))) * (_1232 + 1.0))) + _1237) * _1118;
        _1254 = _1085;
        _1256 = _1084;
        _1257 = _1083;
        _1258 = _1095;
        _1259 = _1094;
        _1260 = _1093;
        _1261 = _1105;
        _1262 = _1104;
        _1263 = _1103;
        _1264 = _1118;
        _1265 = _1117;
        _1266 = _1116;
        _1267 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1162 : (isnan(_1162) ? 0.0 : max(_1162, 0.0)));
        _1268 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1204 : (isnan(_1204) ? 0.0 : max(_1204, 0.0)));
        _1269 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1246 : (isnan(_1246) ? 0.0 : max(_1246, 0.0)));
    }
    else
    {
        _1254 = _1255;
        _1256 = _1255;
        _1257 = _1255;
        _1258 = _1255;
        _1259 = _1255;
        _1260 = _1255;
        _1261 = _1255;
        _1262 = _1255;
        _1263 = _1255;
        _1264 = _1255;
        _1265 = _1255;
        _1266 = _1255;
        _1267 = 0.0;
        _1268 = 0.0;
        _1269 = 0.0;
    }
    float _1564;
    float _1565;
    float _1566;
    float _1567;
    float _1568;
    float _1569;
    float _1570;
    float _1571;
    float _1572;
    float _1573;
    float _1574;
    float _1575;
    float _1576;
    float _1577;
    float _1578;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1295 = fma(_954, cbModelParam._m0[30u].z, fma(_950, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _946));
        float _1299 = fma(_954, cbModelParam._m0[31u].z, fma(_950, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _946));
        float _1303 = fma(_954, cbModelParam._m0[32u].z, fma(_950, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _946));
        float _1326 = _946 + _582;
        float _1327 = _950 + _583;
        float _1328 = _954 + _584;
        float _1338 = fma(_1328, cbModelParam._m0[30u].z, fma(_1327, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1326)) - _1295;
        float _1339 = fma(_1328, cbModelParam._m0[31u].z, fma(_1327, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1326)) - _1299;
        float _1340 = fma(_1328, cbModelParam._m0[32u].z, fma(_1327, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1326)) - _1303;
        float _1344 = inversesqrt(dot(vec3(_1338, _1339, _1340), vec3(_1338, _1339, _1340)));
        float _1357 = ((_1344 * _1338) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1295 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1358 = ((_1344 * _1339) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1299 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1359 = ((_1344 * _1340) / cbModelParam._m0[35u].z) + ((((((_1303 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1361 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1357, _1358, _1359), 0.0);
        vec4 _1368 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1357, _1358, _1359), 0.0);
        vec4 _1375 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1357, _1358, _1359), 0.0);
        vec4 _1382 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1357, _1358, _1359), 0.0);
        float _1394 = exp2((_1361.w + (-0.5)) * 20.0) * 2.0;
        float _1395 = _1394 * (_1361.x + (-0.5));
        float _1396 = _1394 * (_1361.y + (-0.5));
        float _1397 = _1394 * (_1361.z + (-0.5));
        float _1404 = exp2((_1368.w + (-0.5)) * 20.0) * 2.0;
        float _1405 = _1404 * (_1368.x + (-0.5));
        float _1406 = _1404 * (_1368.y + (-0.5));
        float _1407 = _1404 * (_1368.z + (-0.5));
        float _1414 = exp2((_1375.w + (-0.5)) * 20.0) * 2.0;
        float _1415 = _1414 * (_1375.x + (-0.5));
        float _1416 = _1414 * (_1375.y + (-0.5));
        float _1417 = _1414 * (_1375.z + (-0.5));
        float _1424 = exp2((_1382.w + (-0.5)) * 20.0) * 2.0;
        float _1425 = _1424 * (_1382.x + (-0.5));
        float _1426 = _1424 * (_1382.y + (-0.5));
        float _1427 = _1424 * (_1382.z + (-0.5));
        float _1428 = isnan(0.0) ? _1425 : (isnan(_1425) ? 0.0 : max(_1425, 0.0));
        float _1429 = isnan(0.0) ? _1426 : (isnan(_1426) ? 0.0 : max(_1426, 0.0));
        float _1430 = isnan(0.0) ? _1427 : (isnan(_1427) ? 0.0 : max(_1427, 0.0));
        float _1431 = _1395 * 0.5;
        float _1432 = _1405 * 0.5;
        float _1433 = _1415 * 0.5;
        float _1434 = dot(vec3(_1431, _1432, _1433), vec3(_1431, _1432, _1433));
        float _1439 = (_1434 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1434);
        float _1447 = (dot(vec3(_582, _583, _584), vec3(_1439 * _1431, _1439 * _1432, _1439 * _1433)) + 1.0) * 0.5;
        float _3944 = isnan(0.0) ? _1447 : (isnan(_1447) ? 0.0 : max(_1447, 0.0));
        float _1456 = sqrt(((_1432 * _1432) + (_1431 * _1431)) + (_1433 * _1433)) / (_1428 + 9.9999997473787516355514526367188e-06);
        float _3955 = isnan(0.0) ? _1456 : (isnan(_1456) ? 0.0 : max(_1456, 0.0));
        float _1457 = isnan(1.0) ? _3955 : (isnan(_3955) ? 1.0 : min(_3955, 1.0));
        float _1458 = _1457 * 2.0;
        float _1462 = (1.0 - _1457) / (_1457 + 1.0);
        float _3966 = isnan(0.0) ? _1462 : (isnan(_1462) ? 0.0 : max(_1462, 0.0));
        float _1463 = isnan(1.0) ? _3966 : (isnan(_3966) ? 1.0 : min(_3966, 1.0));
        float _1472 = ((((1.0 - _1463) * (_1458 + 2.0)) * exp2(log2(isnan(1.0) ? _3944 : (isnan(_3944) ? 1.0 : min(_3944, 1.0))) * (_1458 + 1.0))) + _1463) * _1428;
        float _1473 = _1396 * 0.5;
        float _1474 = _1406 * 0.5;
        float _1475 = _1416 * 0.5;
        float _1476 = dot(vec3(_1473, _1474, _1475), vec3(_1473, _1474, _1475));
        float _1481 = (_1476 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1476);
        float _1489 = (dot(vec3(_582, _583, _584), vec3(_1481 * _1473, _1481 * _1474, _1481 * _1475)) + 1.0) * 0.5;
        float _3977 = isnan(0.0) ? _1489 : (isnan(_1489) ? 0.0 : max(_1489, 0.0));
        float _1498 = sqrt(((_1474 * _1474) + (_1473 * _1473)) + (_1475 * _1475)) / (_1429 + 9.9999997473787516355514526367188e-06);
        float _3988 = isnan(0.0) ? _1498 : (isnan(_1498) ? 0.0 : max(_1498, 0.0));
        float _1499 = isnan(1.0) ? _3988 : (isnan(_3988) ? 1.0 : min(_3988, 1.0));
        float _1500 = _1499 * 2.0;
        float _1504 = (1.0 - _1499) / (_1499 + 1.0);
        float _3999 = isnan(0.0) ? _1504 : (isnan(_1504) ? 0.0 : max(_1504, 0.0));
        float _1505 = isnan(1.0) ? _3999 : (isnan(_3999) ? 1.0 : min(_3999, 1.0));
        float _1514 = ((((1.0 - _1505) * (_1500 + 2.0)) * exp2(log2(isnan(1.0) ? _3977 : (isnan(_3977) ? 1.0 : min(_3977, 1.0))) * (_1500 + 1.0))) + _1505) * _1429;
        float _1515 = _1397 * 0.5;
        float _1516 = _1407 * 0.5;
        float _1517 = _1417 * 0.5;
        float _1518 = dot(vec3(_1515, _1516, _1517), vec3(_1515, _1516, _1517));
        float _1523 = (_1518 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1518);
        float _1531 = (dot(vec3(_582, _583, _584), vec3(_1523 * _1515, _1523 * _1516, _1523 * _1517)) + 1.0) * 0.5;
        float _4010 = isnan(0.0) ? _1531 : (isnan(_1531) ? 0.0 : max(_1531, 0.0));
        float _1540 = sqrt(((_1516 * _1516) + (_1515 * _1515)) + (_1517 * _1517)) / (_1430 + 9.9999997473787516355514526367188e-06);
        float _4021 = isnan(0.0) ? _1540 : (isnan(_1540) ? 0.0 : max(_1540, 0.0));
        float _1541 = isnan(1.0) ? _4021 : (isnan(_4021) ? 1.0 : min(_4021, 1.0));
        float _1542 = _1541 * 2.0;
        float _1546 = (1.0 - _1541) / (_1541 + 1.0);
        float _4032 = isnan(0.0) ? _1546 : (isnan(_1546) ? 0.0 : max(_1546, 0.0));
        float _1547 = isnan(1.0) ? _4032 : (isnan(_4032) ? 1.0 : min(_4032, 1.0));
        float _1556 = ((((1.0 - _1547) * (_1542 + 2.0)) * exp2(log2(isnan(1.0) ? _4010 : (isnan(_4010) ? 1.0 : min(_4010, 1.0))) * (_1542 + 1.0))) + _1547) * _1430;
        _1564 = _1397;
        _1565 = _1396;
        _1566 = _1395;
        _1567 = _1407;
        _1568 = _1406;
        _1569 = _1405;
        _1570 = _1417;
        _1571 = _1416;
        _1572 = _1415;
        _1573 = _1430;
        _1574 = _1429;
        _1575 = _1428;
        _1576 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1472 : (isnan(_1472) ? 0.0 : max(_1472, 0.0)));
        _1577 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1514 : (isnan(_1514) ? 0.0 : max(_1514, 0.0)));
        _1578 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1556 : (isnan(_1556) ? 0.0 : max(_1556, 0.0)));
    }
    else
    {
        _1564 = _1255;
        _1565 = _1255;
        _1566 = _1255;
        _1567 = _1255;
        _1568 = _1255;
        _1569 = _1255;
        _1570 = _1255;
        _1571 = _1255;
        _1572 = _1255;
        _1573 = _1255;
        _1574 = _1255;
        _1575 = _1255;
        _1576 = 0.0;
        _1577 = 0.0;
        _1578 = 0.0;
    }
    float _1588 = (cbModelParam._m0[1u].x * (_1576 - _1267)) + _1267;
    float _1589 = (cbModelParam._m0[1u].x * (_1577 - _1268)) + _1268;
    float _1590 = (cbModelParam._m0[1u].x * (_1578 - _1269)) + _1269;
    float _1611 = fma(_1590, cbSceneParam._m0[89u].z, fma(_1589, cbSceneParam._m0[89u].y, _1588 * cbSceneParam._m0[89u].x));
    float _1614 = fma(_1590, cbSceneParam._m0[90u].z, fma(_1589, cbSceneParam._m0[90u].y, _1588 * cbSceneParam._m0[90u].x));
    float _1617 = fma(_1590, cbSceneParam._m0[91u].z, fma(_1589, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1588));
    float _1632 = _891 * 0.5;
    float _1633 = _892 * 0.5;
    float _1634 = _893 * 0.5;
    float _1635 = dot(vec4(_1632, _1633, _1634, 1.0), vec4(_1566, _1569, _1572, _1575));
    float _1638 = dot(vec4(_1632, _1633, _1634, 1.0), vec4(_1565, _1568, _1571, _1574));
    float _1641 = dot(vec4(_1632, _1633, _1634, 1.0), vec4(_1564, _1567, _1570, _1573));
    float _1672;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1648 = dot(vec4(_1632, _1633, _1634, 1.0), vec4(_1254, _1258, _1261, _1264));
        float _1652 = dot(vec4(_1632, _1633, _1634, 1.0), vec4(_1256, _1259, _1262, _1265));
        float _1656 = dot(vec4(_1632, _1633, _1634, 1.0), vec4(_1257, _1260, _1263, _1266));
        float _1663 = dot(vec4(cbModelParam._m0[39u]), vec4(_1632, _1633, _1634, 1.0));
        _1672 = dot(vec3(isnan(0.0) ? _1656 : (isnan(_1656) ? 0.0 : max(_1656, 0.0)), isnan(0.0) ? _1652 : (isnan(_1652) ? 0.0 : max(_1652, 0.0)), isnan(0.0) ? _1648 : (isnan(_1648) ? 0.0 : max(_1648, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1663) ? 0.0 : (isnan(0.0) ? _1663 : max(0.0, _1663))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1672 = 1.0;
    }
    float _1683;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1674 = dot(vec4(cbModelParam._m0[40u]), vec4(_1632, _1633, _1634, 1.0));
        _1683 = dot(vec3(isnan(0.0) ? _1635 : (isnan(_1635) ? 0.0 : max(_1635, 0.0)), isnan(0.0) ? _1638 : (isnan(_1638) ? 0.0 : max(_1638, 0.0)), isnan(0.0) ? _1641 : (isnan(_1641) ? 0.0 : max(_1641, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1674) ? 0.0 : (isnan(0.0) ? _1674 : max(0.0, _1674))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1683 = 1.0;
    }
    float _1687 = (_1683 * cbModelParam._m0[1u].x) + (_1672 * (1.0 - cbModelParam._m0[1u].x));
    float _1697 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _751);
    float _1698 = isnan(_1697) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1697 : min(cbModelParam._m0[25u].z, _1697));
    float _1778;
    float _1780;
    float _1782;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1745 = fma(_954, cbModelParam._m0[13u].z, fma(_950, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _946)) + cbModelParam._m0[13u].w;
        float _1749 = fma(_954, cbModelParam._m0[14u].z, fma(_950, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _946)) + cbModelParam._m0[14u].w;
        float _1753 = fma(_954, cbModelParam._m0[15u].z, fma(_950, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _946)) + cbModelParam._m0[15u].w;
        float _1756 = fma(_893, cbModelParam._m0[13u].z, fma(_892, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _891));
        float _1759 = fma(_893, cbModelParam._m0[14u].z, fma(_892, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _891));
        float _1762 = fma(_893, cbModelParam._m0[15u].z, fma(_892, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _891));
        float _1790;
        if (_1756 > 0.0)
        {
            _1790 = abs((1.0 - _1745) / _1756);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1756 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1745 + 1.0) / _1756);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1790 = frontier_phi_16_14_ladder;
        }
        float _2015;
        if (_1759 > 0.0)
        {
            _2015 = abs((1.0 - _1749) / _1759);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1759 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1749 + 1.0) / _1759);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2015 = frontier_phi_25_21_ladder;
        }
        float _2272;
        if (_1762 > 0.0)
        {
            _2272 = abs((1.0 - _1753) / _1762);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1762 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1753 + 1.0) / _1762);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2272 = frontier_phi_37_32_ladder;
        }
        float _2274 = isnan(_2015) ? _1790 : (isnan(_1790) ? _2015 : min(_1790, _2015));
        float _2275 = isnan(_2272) ? _2274 : (isnan(_2274) ? _2272 : min(_2274, _2272));
        float _2279 = (_2275 * _1756) + _1745;
        float _2280 = (_2275 * _1759) + _1749;
        float _2281 = (_2275 * _1762) + _1753;
        float _2282 = _2275 * 9.9999997473787516355514526367188e-05;
        float _2284 = (-1.0) - _2282;
        float _2286 = _2282 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_2281 > _2286) || ((_2281 < _2284) || ((_2280 > _2286) || ((_2280 < _2284) || ((_2279 < _2284) || (_2279 > _2286))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2409 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2281, cbModelParam._m0[9u].z, fma(_2280, cbModelParam._m0[9u].y, _2279 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2281, cbModelParam._m0[10u].z, fma(_2280, cbModelParam._m0[10u].y, _2279 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2281, cbModelParam._m0[11u].z, fma(_2280, cbModelParam._m0[11u].y, _2279 * cbModelParam._m0[11u].x))), _1698);
            frontier_phi_15_37_ladder = _2409.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2409.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2409.x * cbModelParam._m0[1u].y;
        }
        _1778 = frontier_phi_15_37_ladder_2;
        _1780 = frontier_phi_15_37_ladder_1;
        _1782 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1766 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_891, _892, _893), _1698);
        _1778 = _1766.x * cbModelParam._m0[1u].y;
        _1780 = _1766.y * cbModelParam._m0[1u].y;
        _1782 = _1766.z * cbModelParam._m0[1u].y;
    }
    float _1786 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _751);
    float _1787 = isnan(_1786) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1786 : min(cbModelParam._m0[25u].w, _1786));
    float _1878;
    float _1880;
    float _1882;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1842 = fma(_954, cbModelParam._m0[21u].z, fma(_950, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _946)) + cbModelParam._m0[21u].w;
        float _1846 = fma(_954, cbModelParam._m0[22u].z, fma(_950, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _946)) + cbModelParam._m0[22u].w;
        float _1850 = fma(_954, cbModelParam._m0[23u].z, fma(_950, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _946)) + cbModelParam._m0[23u].w;
        float _1853 = fma(_893, cbModelParam._m0[21u].z, fma(_892, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _891));
        float _1856 = fma(_893, cbModelParam._m0[22u].z, fma(_892, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _891));
        float _1859 = fma(_893, cbModelParam._m0[23u].z, fma(_892, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _891));
        float _2020;
        if (_1853 > 0.0)
        {
            _2020 = abs((1.0 - _1842) / _1853);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1853 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1842 + 1.0) / _1853);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _2020 = frontier_phi_27_23_ladder;
        }
        float _2299;
        if (_1856 > 0.0)
        {
            _2299 = abs((1.0 - _1846) / _1856);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1856 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1846 + 1.0) / _1856);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _2299 = frontier_phi_39_34_ladder;
        }
        float _2512;
        if (_1859 > 0.0)
        {
            _2512 = abs((1.0 - _1850) / _1859);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1859 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1850 + 1.0) / _1859);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _2512 = frontier_phi_48_45_ladder;
        }
        float _2514 = isnan(_2299) ? _2020 : (isnan(_2020) ? _2299 : min(_2020, _2299));
        float _2515 = isnan(_2512) ? _2514 : (isnan(_2514) ? _2512 : min(_2514, _2512));
        float _2519 = (_2515 * _1853) + _1842;
        float _2520 = (_2515 * _1856) + _1846;
        float _2521 = (_2515 * _1859) + _1850;
        float _2522 = _2515 * 9.9999997473787516355514526367188e-05;
        float _2523 = (-1.0) - _2522;
        float _2525 = _2522 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2521 > _2525) || ((_2521 < _2523) || ((_2520 > _2525) || ((_2520 < _2523) || ((_2519 < _2523) || (_2519 > _2525))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2762 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2521, cbModelParam._m0[17u].z, fma(_2520, cbModelParam._m0[17u].y, _2519 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2521, cbModelParam._m0[18u].z, fma(_2520, cbModelParam._m0[18u].y, _2519 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2521, cbModelParam._m0[19u].z, fma(_2520, cbModelParam._m0[19u].y, _2519 * cbModelParam._m0[19u].x))), _1787);
            frontier_phi_24_48_ladder = _2762.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2762.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2762.x * cbModelParam._m0[1u].z;
        }
        _1878 = frontier_phi_24_48_ladder_2;
        _1880 = frontier_phi_24_48_ladder_1;
        _1882 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1862 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_891, _892, _893), _1787);
        _1878 = _1862.x * cbModelParam._m0[1u].z;
        _1880 = _1862.y * cbModelParam._m0[1u].z;
        _1882 = _1862.z * cbModelParam._m0[1u].z;
    }
    float _1895 = (((_917 * _869) + _918) * _883) * ((cbModelParam._m0[1u].w * (_1878 - _1778)) + _1778);
    float _1897 = (((_917 * _870) + _918) * _883) * ((cbModelParam._m0[1u].w * (_1880 - _1780)) + _1780);
    float _1899 = (((_917 * _871) + _918) * _883) * ((cbModelParam._m0[1u].w * (_1882 - _1782)) + _1782);
    float _1902 = fma(_1899, cbSceneParam._m0[89u].z, fma(_1897, cbSceneParam._m0[89u].y, _1895 * cbSceneParam._m0[89u].x));
    float _1905 = fma(_1899, cbSceneParam._m0[90u].z, fma(_1897, cbSceneParam._m0[90u].y, _1895 * cbSceneParam._m0[90u].x));
    float _1908 = fma(_1899, cbSceneParam._m0[91u].z, fma(_1897, cbSceneParam._m0[91u].y, _1895 * cbSceneParam._m0[91u].x));
    vec4 _1916 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_673, _674));
    float _1918 = _1916.w;
    float _1930 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1918);
    float _1931 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1918);
    float _1932 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1918);
    uvec4 _1936 = floatBitsToUint(cbInstanceData._m0[_775 + 5u]);
    uint _1938 = _1936.x * 14u;
    uint _1939 = _1938 + 13u;
    float _1946 = _883 + (-1.0);
    float _1951 = (cbLight._m0[_1939].x * _1946) + 1.0;
    float _1952 = (cbLight._m0[_1939].y * _1946) + 1.0;
    float _1953 = (cbLight._m0[_1939].z * _1946) + 1.0;
    float _1954 = (cbLight._m0[_1939].w * _1946) + 1.0;
    uint _1955 = _1938 + 5u;
    float _1961 = isnan(1.0) ? _1952 : (isnan(_1952) ? 1.0 : min(_1952, 1.0));
    uint _1965 = _1938 + 4u;
    float _1974 = isnan(1.0) ? _1951 : (isnan(_1951) ? 1.0 : min(_1951, 1.0));
    uint _1978 = _1938 | 1u;
    float _1989 = dot(vec3(cbLight._m0[_1938].xyz), vec3(_582, _583, _584));
    float _1992 = dot(vec3(cbLight._m0[_1978].xyz), vec3(_582, _583, _584));
    float _4168 = isnan(0.0) ? _1989 : (isnan(_1989) ? 0.0 : max(_1989, 0.0));
    float _4179 = isnan(0.0) ? _1992 : (isnan(_1992) ? 0.0 : max(_1992, 0.0));
    float _1997 = (isnan(1.0) ? _4168 : (isnan(_4168) ? 1.0 : min(_4168, 1.0))) * 0.3183098733425140380859375;
    float _1999 = (isnan(1.0) ? _4179 : (isnan(_4179) ? 1.0 : min(_4179, 1.0))) * 0.3183098733425140380859375;
    float _2006 = ((cbLight._m0[_1955].x * _1961) * _1999) + (((cbLight._m0[_1965].x * _1930) * _1974) * _1997);
    float _2007 = ((_1961 * cbLight._m0[_1955].y) * _1999) + (((cbLight._m0[_1965].y * _1931) * _1974) * _1997);
    float _2008 = ((_1961 * cbLight._m0[_1955].z) * _1999) + (((cbLight._m0[_1965].z * _1932) * _1974) * _1997);
    uvec4 _2012 = floatBitsToUint(cbLight._m0[_1938 + 12u]);
    bool _2014 = _2012.x == 0u;
    float _2025;
    float _2027;
    float _2029;
    if (_2014)
    {
        _2025 = _2006;
        _2027 = _2007;
        _2029 = _2008;
    }
    else
    {
        uint _2033 = _1938 + 6u;
        float _2049 = (dot(vec3(cbLight._m0[_1938 + 2u].xyz), vec3(_582, _583, _584)) * 0.5) + 0.5;
        float _2050 = _2049 * _2049;
        float _4190 = isnan(0.0) ? _2050 : (isnan(_2050) ? 0.0 : max(_2050, 0.0));
        float _2051 = isnan(1.0) ? _4190 : (isnan(_4190) ? 1.0 : min(_4190, 1.0));
        float _2052 = isnan(1.0) ? _1953 : (isnan(_1953) ? 1.0 : min(_1953, 1.0));
        _2025 = (((cbLight._m0[_2033].x * 0.3183098733425140380859375) * _2051) * _2052) + _2006;
        _2027 = (((cbLight._m0[_2033].y * 0.3183098733425140380859375) * _2051) * _2052) + _2007;
        _2029 = (((cbLight._m0[_2033].z * 0.3183098733425140380859375) * _2051) * _2052) + _2008;
    }
    bool _2032 = _2012.y == 0u;
    float _2070;
    float _2072;
    float _2074;
    if (_2032)
    {
        _2070 = _2025;
        _2072 = _2027;
        _2074 = _2029;
    }
    else
    {
        uint _2243 = _1938 + 7u;
        float _2259 = (dot(vec3(cbLight._m0[_1938 + 3u].xyz), vec3(_582, _583, _584)) * 0.5) + 0.5;
        float _2260 = _2259 * _2259;
        float _4206 = isnan(0.0) ? _2260 : (isnan(_2260) ? 0.0 : max(_2260, 0.0));
        float _2261 = isnan(1.0) ? _4206 : (isnan(_4206) ? 1.0 : min(_4206, 1.0));
        float _2262 = isnan(1.0) ? _1954 : (isnan(_1954) ? 1.0 : min(_1954, 1.0));
        _2070 = (((cbLight._m0[_2243].x * 0.3183098733425140380859375) * _2261) * _2262) + _2025;
        _2072 = (((cbLight._m0[_2243].y * 0.3183098733425140380859375) * _2261) * _2262) + _2027;
        _2074 = (((cbLight._m0[_2243].z * 0.3183098733425140380859375) * _2261) * _2262) + _2029;
    }
    uint _2077 = _1938 + 8u;
    float _2090 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1938].w)) * _751) * 0.949999988079071044921875);
    float _2091 = _2090 * _2090;
    float _2092 = cbLight._m0[_1938].x + _665;
    float _2093 = cbLight._m0[_1938].y + _666;
    float _2094 = cbLight._m0[_1938].z + _667;
    float _2098 = inversesqrt(dot(vec3(_2092, _2093, _2094), vec3(_2092, _2093, _2094)));
    float _2099 = _2098 * _2092;
    float _2100 = _2098 * _2093;
    float _2101 = _2098 * _2094;
    float _2102 = dot(vec3(_582, _583, _584), vec3(cbLight._m0[_1938].xyz));
    float _4222 = isnan(0.0) ? _2102 : (isnan(_2102) ? 0.0 : max(_2102, 0.0));
    float _2105 = isnan(1.0) ? _4222 : (isnan(_4222) ? 1.0 : min(_4222, 1.0));
    float _4233 = isnan(0.0) ? _884 : (isnan(_884) ? 0.0 : max(_884, 0.0));
    float _2106 = isnan(1.0) ? _4233 : (isnan(_4233) ? 1.0 : min(_4233, 1.0));
    float _2107 = dot(vec3(_582, _583, _584), vec3(_2099, _2100, _2101));
    float _4244 = isnan(0.0) ? _2107 : (isnan(_2107) ? 0.0 : max(_2107, 0.0));
    float _2110 = isnan(1.0) ? _4244 : (isnan(_4244) ? 1.0 : min(_4244, 1.0));
    float _2111 = dot(vec3(cbLight._m0[_1938].xyz), vec3(_2099, _2100, _2101));
    float _4255 = isnan(0.0) ? _2111 : (isnan(_2111) ? 0.0 : max(_2111, 0.0));
    float _2115 = _2091 * _2091;
    float _2119 = ((_2110 * _2110) * (_2115 + (-1.0))) + 1.0;
    float _2127 = exp2(log2(1.0 - (isnan(1.0) ? _4255 : (isnan(_4255) ? 1.0 : min(_4255, 1.0)))) * 5.0);
    float _2128 = 0.959999978542327880859375 - _866;
    float _2130 = 0.959999978542327880859375 - _867;
    float _2131 = 0.959999978542327880859375 - _868;
    float _2138 = 1.0 - _2091;
    float _2149 = (0.5 / (((_2106 * ((_2105 * _2138) + _2091)) + 9.9999999392252902907785028219223e-09) + (((_2106 * _2138) + _2091) * _2105))) * _2105;
    float _4266 = isnan(0.0) ? _2149 : (isnan(_2149) ? 0.0 : max(_2149, 0.0));
    float _2151 = (isnan(1.0) ? _4266 : (isnan(_4266) ? 1.0 : min(_4266, 1.0))) * (_2115 / ((_2119 * _2119) * 3.141590118408203125));
    uint _2165 = _1938 + 9u;
    float _2176 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1978].w)) * _751) * 0.949999988079071044921875);
    float _2177 = _2176 * _2176;
    float _2178 = cbLight._m0[_1978].x + _665;
    float _2179 = cbLight._m0[_1978].y + _666;
    float _2180 = cbLight._m0[_1978].z + _667;
    float _2184 = inversesqrt(dot(vec3(_2178, _2179, _2180), vec3(_2178, _2179, _2180)));
    float _2185 = _2184 * _2178;
    float _2186 = _2184 * _2179;
    float _2187 = _2184 * _2180;
    float _2188 = dot(vec3(_582, _583, _584), vec3(cbLight._m0[_1978].xyz));
    float _4277 = isnan(0.0) ? _2188 : (isnan(_2188) ? 0.0 : max(_2188, 0.0));
    float _2191 = isnan(1.0) ? _4277 : (isnan(_4277) ? 1.0 : min(_4277, 1.0));
    float _2192 = dot(vec3(_582, _583, _584), vec3(_2185, _2186, _2187));
    float _4288 = isnan(0.0) ? _2192 : (isnan(_2192) ? 0.0 : max(_2192, 0.0));
    float _2195 = isnan(1.0) ? _4288 : (isnan(_4288) ? 1.0 : min(_4288, 1.0));
    float _2196 = dot(vec3(cbLight._m0[_1978].xyz), vec3(_2185, _2186, _2187));
    float _4299 = isnan(0.0) ? _2196 : (isnan(_2196) ? 0.0 : max(_2196, 0.0));
    float _2200 = _2177 * _2177;
    float _2204 = ((_2195 * _2195) * (_2200 + (-1.0))) + 1.0;
    float _2211 = exp2(log2(1.0 - (isnan(1.0) ? _4299 : (isnan(_4299) ? 1.0 : min(_4299, 1.0)))) * 5.0);
    float _2218 = 1.0 - _2177;
    float _2228 = (0.5 / (((_2106 * ((_2191 * _2218) + _2177)) + 9.9999999392252902907785028219223e-09) + (((_2106 * _2218) + _2177) * _2191))) * _2191;
    float _4310 = isnan(0.0) ? _2228 : (isnan(_2228) ? 0.0 : max(_2228, 0.0));
    float _2230 = (isnan(1.0) ? _4310 : (isnan(_4310) ? 1.0 : min(_4310, 1.0))) * (_2200 / ((_2204 * _2204) * 3.141590118408203125));
    float _2240 = (((((_2211 * _2128) + _869) * cbLight._m0[_2165].x) * _2230) * _1961) + ((((cbLight._m0[_2077].x * _1930) * ((_2127 * _2128) + _869)) * _2151) * _1974);
    float _2241 = (((((_2211 * _2130) + _870) * cbLight._m0[_2165].y) * _2230) * _1961) + ((((cbLight._m0[_2077].y * _1931) * ((_2127 * _2130) + _870)) * _2151) * _1974);
    float _2242 = (((((_2211 * _2131) + _871) * cbLight._m0[_2165].z) * _2230) * _1961) + ((((cbLight._m0[_2077].z * _1932) * ((_2127 * _2131) + _871)) * _2151) * _1974);
    float _2304;
    float _2306;
    float _2308;
    if (_2014)
    {
        _2304 = _2240;
        _2306 = _2241;
        _2308 = _2242;
    }
    else
    {
        uint _2310 = _1938 + 2u;
        uint _2314 = _1938 + 10u;
        float _2328 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2310].w)) * _751) * 0.949999988079071044921875);
        float _2329 = _2328 * _2328;
        float _2330 = cbLight._m0[_2310].x + _665;
        float _2331 = cbLight._m0[_2310].y + _666;
        float _2332 = cbLight._m0[_2310].z + _667;
        float _2336 = inversesqrt(dot(vec3(_2330, _2331, _2332), vec3(_2330, _2331, _2332)));
        float _2337 = _2336 * _2330;
        float _2338 = _2336 * _2331;
        float _2339 = _2336 * _2332;
        float _2340 = dot(vec3(_582, _583, _584), vec3(cbLight._m0[_2310].xyz));
        float _4321 = isnan(0.0) ? _2340 : (isnan(_2340) ? 0.0 : max(_2340, 0.0));
        float _2343 = isnan(1.0) ? _4321 : (isnan(_4321) ? 1.0 : min(_4321, 1.0));
        float _2344 = dot(vec3(_582, _583, _584), vec3(_2337, _2338, _2339));
        float _4332 = isnan(0.0) ? _2344 : (isnan(_2344) ? 0.0 : max(_2344, 0.0));
        float _2347 = isnan(1.0) ? _4332 : (isnan(_4332) ? 1.0 : min(_4332, 1.0));
        float _2348 = dot(vec3(cbLight._m0[_2310].xyz), vec3(_2337, _2338, _2339));
        float _4343 = isnan(0.0) ? _2348 : (isnan(_2348) ? 0.0 : max(_2348, 0.0));
        float _2352 = _2329 * _2329;
        float _2356 = ((_2347 * _2347) * (_2352 + (-1.0))) + 1.0;
        float _2363 = exp2(log2(1.0 - (isnan(1.0) ? _4343 : (isnan(_4343) ? 1.0 : min(_4343, 1.0)))) * 5.0);
        float _2370 = 1.0 - _2329;
        float _2380 = (0.5 / (((_2106 * ((_2343 * _2370) + _2329)) + 9.9999999392252902907785028219223e-09) + (((_2106 * _2370) + _2329) * _2343))) * _2343;
        float _4354 = isnan(0.0) ? _2380 : (isnan(_2380) ? 0.0 : max(_2380, 0.0));
        float _2382 = (isnan(1.0) ? _4354 : (isnan(_4354) ? 1.0 : min(_4354, 1.0))) * (_2352 / ((_2356 * _2356) * 3.141590118408203125));
        float _2383 = isnan(1.0) ? _1953 : (isnan(_1953) ? 1.0 : min(_1953, 1.0));
        _2304 = (((((_2363 * _2128) + _869) * cbLight._m0[_2314].x) * _2382) * _2383) + _2240;
        _2306 = (((((_2363 * _2130) + _870) * cbLight._m0[_2314].y) * _2382) * _2383) + _2241;
        _2308 = (((((_2363 * _2131) + _871) * cbLight._m0[_2314].z) * _2382) * _2383) + _2242;
    }
    float _2418;
    float _2420;
    float _2422;
    if (_2032)
    {
        _2418 = _2304;
        _2420 = _2306;
        _2422 = _2308;
    }
    else
    {
        uint _2429 = _1938 + 3u;
        uint _2433 = _1938 + 11u;
        float _2447 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2429].w)) * _751) * 0.949999988079071044921875);
        float _2448 = _2447 * _2447;
        float _2449 = cbLight._m0[_2429].x + _665;
        float _2450 = cbLight._m0[_2429].y + _666;
        float _2451 = cbLight._m0[_2429].z + _667;
        float _2455 = inversesqrt(dot(vec3(_2449, _2450, _2451), vec3(_2449, _2450, _2451)));
        float _2456 = _2455 * _2449;
        float _2457 = _2455 * _2450;
        float _2458 = _2455 * _2451;
        float _2459 = dot(vec3(_582, _583, _584), vec3(cbLight._m0[_2429].xyz));
        float _4370 = isnan(0.0) ? _2459 : (isnan(_2459) ? 0.0 : max(_2459, 0.0));
        float _2462 = isnan(1.0) ? _4370 : (isnan(_4370) ? 1.0 : min(_4370, 1.0));
        float _2463 = dot(vec3(_582, _583, _584), vec3(_2456, _2457, _2458));
        float _4381 = isnan(0.0) ? _2463 : (isnan(_2463) ? 0.0 : max(_2463, 0.0));
        float _2466 = isnan(1.0) ? _4381 : (isnan(_4381) ? 1.0 : min(_4381, 1.0));
        float _2467 = dot(vec3(cbLight._m0[_2429].xyz), vec3(_2456, _2457, _2458));
        float _4392 = isnan(0.0) ? _2467 : (isnan(_2467) ? 0.0 : max(_2467, 0.0));
        float _2471 = _2448 * _2448;
        float _2475 = ((_2466 * _2466) * (_2471 + (-1.0))) + 1.0;
        float _2482 = exp2(log2(1.0 - (isnan(1.0) ? _4392 : (isnan(_4392) ? 1.0 : min(_4392, 1.0)))) * 5.0);
        float _2489 = 1.0 - _2448;
        float _2499 = (0.5 / (((_2106 * ((_2462 * _2489) + _2448)) + 9.9999999392252902907785028219223e-09) + (((_2106 * _2489) + _2448) * _2462))) * _2462;
        float _4403 = isnan(0.0) ? _2499 : (isnan(_2499) ? 0.0 : max(_2499, 0.0));
        float _2501 = (isnan(1.0) ? _4403 : (isnan(_4403) ? 1.0 : min(_4403, 1.0))) * (_2471 / ((_2475 * _2475) * 3.141590118408203125));
        float _2502 = isnan(1.0) ? _1954 : (isnan(_1954) ? 1.0 : min(_1954, 1.0));
        _2418 = (((((_2482 * _2128) + _869) * cbLight._m0[_2433].x) * _2501) * _2502) + _2304;
        _2420 = (((((_2482 * _2130) + _870) * cbLight._m0[_2433].y) * _2501) * _2502) + _2306;
        _2422 = (((((_2482 * _2131) + _871) * cbLight._m0[_2433].z) * _2501) * _2502) + _2308;
    }
    float _2636;
    float _2638;
    float _2640;
    float _2642;
    float _2644;
    float _2646;
    if (_1936.y == 0u)
    {
        float _2577 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2578 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2577;
        float _2579 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2577;
        float _2580 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2577;
        uvec4 _2592 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2593 = _2592.x;
        uint _2604 = uint((float(_2592.y) * floor(float(uint(cbSceneParam._m0[85u].y * _674) / _2593))) + floor(float(uint(cbSceneParam._m0[85u].x * _673) / _2593)));
        float _2614 = (log2(_2580 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2615 = isnan(0.0) ? _2614 : (isnan(_2614) ? 0.0 : max(_2614, 0.0));
        uint _2618 = uint(isnan(14.0) ? _2615 : (isnan(_2615) ? 14.0 : min(_2615, 14.0)));
        uvec4 _2623 = texelFetch(g_lightClusterGridBuffer, int(((_2618 << 2u) + (_2604 << 6u)) >> 2u));
        uint _2624 = _2623.x;
        uint _2625 = _2592.z;
        float _2767;
        float _2769;
        float _2771;
        float _2773;
        float _2775;
        float _2777;
        if (((((1u << ((_2625 >> 4u) & 15u)) + 4294967295u) & _2624) == 0u) || ((_2625 & 240u) == 0u))
        {
            _2767 = 0.0;
            _2769 = 0.0;
            _2771 = 0.0;
            _2773 = 0.0;
            _2775 = 0.0;
            _2777 = 0.0;
        }
        else
        {
            float _2768;
            float _2770;
            float _2772;
            float _2774;
            float _2776;
            float _2778;
            float _2920 = 0.0;
            float _2921 = 0.0;
            float _2922 = 0.0;
            float _2923 = 0.0;
            float _2924 = 0.0;
            float _2925 = 0.0;
            uint _2926 = 0u;
            uint _2935;
            bool _2936;
            for (;;)
            {
                _2935 = texelFetch(g_lightClassification, int((((_2618 << 5u) + (_2604 << 9u)) + (_2926 << 2u)) >> 2u)).x;
                _2936 = _2935 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2936)
                {
                    frontier_phi_63_pred = _2925;
                    frontier_phi_63_pred_1 = _2924;
                    frontier_phi_63_pred_2 = _2923;
                    frontier_phi_63_pred_3 = _2922;
                    frontier_phi_63_pred_4 = _2921;
                    frontier_phi_63_pred_5 = _2920;
                }
                else
                {
                    float _3044;
                    float _3045;
                    float _3046;
                    float _3047;
                    float _3048;
                    float _3049;
                    uint _3050;
                    _3044 = _2920;
                    _3045 = _2921;
                    _3046 = _2922;
                    _3047 = _2923;
                    _3048 = _2924;
                    _3049 = _2925;
                    _3050 = _2935;
                    float _2976;
                    float _2977;
                    float _2978;
                    float _2979;
                    float _2980;
                    float _2981;
                    for (;;)
                    {
                        uint _3054 = uint(findLSB(_3050)) + (_2926 << 5u);
                        uint _3051 = (_3050 + 4294967295u) & _3050;
                        uint _3056 = _3054 * 48u;
                        vec4 _3070 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3056)).x, texelFetch(g_PointLightRenderingBuffer, int(_3056 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3056 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3056 + 3u)).x));
                        uint _3076 = (_3054 * 48u) + 4u;
                        vec4 _3089 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3076)).x, texelFetch(g_PointLightRenderingBuffer, int(_3076 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3076 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3076 + 3u)).x));
                        uint _3095 = (_3054 * 48u) + 8u;
                        vec3 _3106 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3095)).x, texelFetch(g_PointLightRenderingBuffer, int(_3095 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3095 + 2u)).x));
                        float _3110 = _3070.x - _2578;
                        float _3111 = _3070.y - _2579;
                        float _3112 = _3070.z - _2580;
                        float _3113 = dot(vec3(_3110, _3111, _3112), vec3(_3110, _3111, _3112));
                        float _3116 = inversesqrt(_3113);
                        float _3117 = _3116 * _3110;
                        float _3118 = _3116 * _3111;
                        float _3119 = _3116 * _3112;
                        float _3120 = dot(vec3(_696, _699, _702), vec3(_3117, _3118, _3119));
                        float _3125 = 1.0 - (_3113 * _3070.w);
                        float _4429 = isnan(0.0) ? _3125 : (isnan(_3125) ? 0.0 : max(_3125, 0.0));
                        float _3126 = isnan(1.0) ? _4429 : (isnan(_4429) ? 1.0 : min(_4429, 1.0));
                        float _3127 = sqrt(_3113) * _3089.w;
                        float _3130 = 1.39999997615814208984375 / (_3127 + 1.39999997615814208984375);
                        float _3131 = _3130 * _3130;
                        float _3134 = ((1.0 - _3131) * _3120) + _3131;
                        float _3137 = _3127 * _3127;
                        float _3141 = ((isnan(0.0) ? _3134 : (isnan(_3134) ? 0.0 : max(_3134, 0.0))) * _3126) / ((_3137 * 0.699999988079071044921875) + 1.0);
                        float _3145 = (-0.0) - _2578;
                        float _3146 = (-0.0) - _2579;
                        float _3147 = (-0.0) - _2580;
                        float _3151 = inversesqrt(dot(vec3(_3145, _3146, _3147), vec3(_3145, _3146, _3147)));
                        float _3152 = _3151 * _3145;
                        float _3153 = _3151 * _3146;
                        float _3154 = _3151 * _3147;
                        float _3162 = exp2(log2(1.0 / ((_3137 * 3.5) + 5.0)) * 0.25);
                        float _3163 = 1.0 - _899;
                        float _3170 = sqrt(1.0 - ((1.0 - (_3163 * _3163)) * (1.0 - (_3162 * _3162))));
                        float _3171 = _3170 * _3170;
                        float _3172 = _3171 * _3171;
                        float _3173 = _3152 + _3117;
                        float _3174 = _3153 + _3118;
                        float _3175 = _3154 + _3119;
                        float _3179 = inversesqrt(dot(vec3(_3173, _3174, _3175), vec3(_3173, _3174, _3175)));
                        float _3183 = dot(vec3(_696, _699, _702), vec3(_3152, _3153, _3154));
                        float _4445 = isnan(0.0) ? _3183 : (isnan(_3183) ? 0.0 : max(_3183, 0.0));
                        float _3186 = isnan(1.0) ? _4445 : (isnan(_4445) ? 1.0 : min(_4445, 1.0));
                        float _3187 = dot(vec3(_696, _699, _702), vec3(_3179 * _3173, _3179 * _3174, _3179 * _3175));
                        float _4456 = isnan(0.0) ? _3187 : (isnan(_3187) ? 0.0 : max(_3187, 0.0));
                        float _3190 = isnan(1.0) ? _4456 : (isnan(_4456) ? 1.0 : min(_4456, 1.0));
                        float _3194 = ((_3190 * _3190) * (_3172 + (-1.0))) + 1.0;
                        float _3195 = _3130 * _3171;
                        float _3196 = _3195 * _3195;
                        float _3199 = ((1.0 - _3196) * _3120) + _3196;
                        float _4467 = isnan(0.0) ? _3199 : (isnan(_3199) ? 0.0 : max(_3199, 0.0));
                        float _3200 = isnan(1.0) ? _4467 : (isnan(_4467) ? 1.0 : min(_4467, 1.0));
                        float _3201 = 1.0 - _3171;
                        float _3211 = (0.5 / (((_3200 * ((_3186 * _3201) + _3171)) + 9.9999999392252902907785028219223e-09) + (((_3200 * _3201) + _3171) * _3186))) * _3200;
                        float _4478 = isnan(0.0) ? _3211 : (isnan(_3211) ? 0.0 : max(_3211, 0.0));
                        float _3222 = (((_3172 * 3.1415927410125732421875) * (isnan(1.0) ? _4478 : (isnan(_4478) ? 1.0 : min(_4478, 1.0)))) / ((_3194 * _3194) * ((_3137 * 2.1991131305694580078125) + 3.141590118408203125))) * _3126;
                        _2979 = (_3141 * _3089.x) + _3047;
                        _2980 = (_3141 * _3089.y) + _3048;
                        _2981 = (_3141 * _3089.z) + _3049;
                        _2976 = (_3222 * _3106.x) + _3044;
                        _2977 = (_3222 * _3106.y) + _3045;
                        _2978 = (_3222 * _3106.z) + _3046;
                        if (_3051 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3044 = _2976;
                            _3045 = _2977;
                            _3046 = _2978;
                            _3047 = _2979;
                            _3048 = _2980;
                            _3049 = _2981;
                            _3050 = _3051;
                        }
                    }
                    frontier_phi_63_pred = _2981;
                    frontier_phi_63_pred_1 = _2980;
                    frontier_phi_63_pred_2 = _2979;
                    frontier_phi_63_pred_3 = _2978;
                    frontier_phi_63_pred_4 = _2977;
                    frontier_phi_63_pred_5 = _2976;
                }
                _2778 = frontier_phi_63_pred;
                _2776 = frontier_phi_63_pred_1;
                _2774 = frontier_phi_63_pred_2;
                _2772 = frontier_phi_63_pred_3;
                _2770 = frontier_phi_63_pred_4;
                _2768 = frontier_phi_63_pred_5;
                uint _2927 = _2926 + 1u;
                if (_2927 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2920 = _2768;
                    _2921 = _2770;
                    _2922 = _2772;
                    _2923 = _2774;
                    _2924 = _2776;
                    _2925 = _2778;
                    _2926 = _2927;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2767 = _2768;
            _2769 = _2770;
            _2771 = _2772;
            _2773 = _2774;
            _2775 = _2776;
            _2777 = _2778;
        }
        uvec4 _2781 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2782 = _2781.z;
        uint _2784 = (_2782 >> 8u) & 15u;
        float _2888;
        float _2890;
        float _2892;
        float _2894;
        float _2896;
        float _2898;
        if (((4294967295u << _2784) & _2624) == 0u)
        {
            _2888 = _2767;
            _2890 = _2769;
            _2892 = _2771;
            _2894 = _2773;
            _2896 = _2775;
            _2898 = _2777;
        }
        else
        {
            float _2913 = inversesqrt(dot(vec3(_2578, _2579, _2580), vec3(_2578, _2579, _2580)));
            float _2914 = _2913 * _2578;
            float _2915 = _2913 * _2579;
            float _2916 = _2913 * _2580;
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2784 < ((_2782 >> 12u) & 15u))
            {
                float _2889;
                float _2891;
                float _2893;
                float _2895;
                float _2897;
                float _2899;
                float _3027 = _2767;
                float _3028 = _2769;
                float _3029 = _2771;
                float _3030 = _2773;
                float _3031 = _2775;
                float _3032 = _2777;
                uint _3033 = _2784;
                uint _3042;
                bool _3043;
                for (;;)
                {
                    _3042 = texelFetch(g_lightClassification, int((((_2618 << 5u) + (_2604 << 9u)) + (_3033 << 2u)) >> 2u)).x;
                    _3043 = _3042 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_3043)
                    {
                        frontier_phi_69_pred = _3032;
                        frontier_phi_69_pred_1 = _3031;
                        frontier_phi_69_pred_2 = _3030;
                        frontier_phi_69_pred_3 = _3029;
                        frontier_phi_69_pred_4 = _3028;
                        frontier_phi_69_pred_5 = _3027;
                    }
                    else
                    {
                        float _3227;
                        float _3228;
                        float _3229;
                        float _3230;
                        float _3231;
                        float _3232;
                        float _3522;
                        float _3523;
                        float _3524;
                        float _3525;
                        float _3526;
                        float _3527;
                        float _3240 = _3027;
                        float _3241 = _3028;
                        float _3242 = _3029;
                        float _3243 = _3030;
                        float _3244 = _3031;
                        float _3245 = _3032;
                        uint _3246 = _3042;
                        uint _3247;
                        vec4 _3272;
                        float _3273;
                        vec4 _3288;
                        vec3 _3300;
                        vec4 _3315;
                        vec4 _3331;
                        float _3378;
                        bool _3379;
                        for (;;)
                        {
                            uint _3257 = ((_3033 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3246));
                            _3247 = (_3246 + 4294967295u) & _3246;
                            uint _3259 = _3257 * 40u;
                            _3272 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3259)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3259 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3259 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3259 + 3u)).x));
                            _3273 = _3272.w;
                            uint _3275 = (_3257 * 40u) + 4u;
                            _3288 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3275)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3275 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3275 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3275 + 3u)).x));
                            uint _3290 = (_3257 * 40u) + 8u;
                            _3300 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3290)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3290 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3290 + 2u)).x));
                            uint _3302 = (_3257 * 40u) + 16u;
                            _3315 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3302)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3302 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3302 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3302 + 3u)).x));
                            uint _3318 = (_3257 * 40u) + 20u;
                            _3331 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3318)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3318 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3318 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3318 + 3u)).x));
                            uint _3334 = (_3257 * 40u) + 24u;
                            vec4 _3347 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3334)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3334 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3334 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3334 + 3u)).x));
                            uint _3353 = (_3257 * 40u) + 28u;
                            vec4 _3366 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3353)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3353 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3353 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3353 + 3u)).x));
                            _3378 = fma(_2580, _3366.z, fma(_2579, _3366.y, _3366.x * _2578)) + _3366.w;
                            _3379 = !((fma(_2580, _3347.z, fma(_2579, _3347.y, _3347.x * _2578)) + _3347.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_3379)
                            {
                                float _3406 = _3272.x - _2578;
                                float _3407 = _3272.y - _2579;
                                float _3408 = _3272.z - _2580;
                                float _3409 = dot(vec3(_3406, _3407, _3408), vec3(_3406, _3407, _3408));
                                float _3412 = inversesqrt(_3409);
                                float _3413 = _3412 * _3406;
                                float _3414 = _3412 * _3407;
                                float _3415 = _3412 * _3408;
                                float _3419 = 1.0 - (_3409 / (_3273 * _3273));
                                float _4489 = isnan(0.0) ? _3419 : (isnan(_3419) ? 0.0 : max(_3419, 0.0));
                                float _3420 = isnan(1.0) ? _4489 : (isnan(_4489) ? 1.0 : min(_4489, 1.0));
                                float _3424 = sqrt(_3409) * _3288.w;
                                float _3426 = 1.39999997615814208984375 / (_3424 + 1.39999997615814208984375);
                                float _3427 = _3426 * _3426;
                                float _3430 = ((1.0 - _3427) * dot(vec3(_3413, _3414, _3415), vec3(_696, _699, _702))) + _3427;
                                float _3433 = _3424 * _3424;
                                float _3437 = (fma(_2580, _3315.z, fma(_2579, _3315.y, _3315.x * _2578)) + _3315.w) / _3378;
                                float _3438 = (fma(_2580, _3331.z, fma(_2579, _3331.y, _3331.x * _2578)) + _3331.w) / _3378;
                                float _3442 = 1.0 - dot(vec2(_3437, _3438), vec2(_3437, _3438));
                                float _4505 = isnan(0.0) ? _3442 : (isnan(_3442) ? 0.0 : max(_3442, 0.0));
                                float _3443 = isnan(1.0) ? _4505 : (isnan(_4505) ? 1.0 : min(_4505, 1.0));
                                float _3444 = _3443 * (((isnan(0.0) ? _3430 : (isnan(_3430) ? 0.0 : max(_3430, 0.0))) * _3420) / ((_3433 * 0.699999988079071044921875) + 1.0));
                                float _3456 = exp2(log2(1.0 / ((_3433 * 3.5) + 5.0)) * 0.25);
                                float _3457 = 1.0 - _899;
                                float _3464 = sqrt(1.0 - ((1.0 - (_3457 * _3457)) * (1.0 - (_3456 * _3456))));
                                float _3465 = _3464 * _3464;
                                float _3466 = _3465 * _3465;
                                float _3467 = _3413 - _2914;
                                float _3468 = _3414 - _2915;
                                float _3469 = _3415 - _2916;
                                float _3473 = inversesqrt(dot(vec3(_3467, _3468, _3469), vec3(_3467, _3468, _3469)));
                                float _3477 = dot(vec3(_696, _699, _702), vec3((-0.0) - _2914, (-0.0) - _2915, (-0.0) - _2916));
                                float _4516 = isnan(0.0) ? _3477 : (isnan(_3477) ? 0.0 : max(_3477, 0.0));
                                float _3480 = isnan(1.0) ? _4516 : (isnan(_4516) ? 1.0 : min(_4516, 1.0));
                                float _3481 = dot(vec3(_696, _699, _702), vec3(_3473 * _3467, _3473 * _3468, _3473 * _3469));
                                float _4527 = isnan(0.0) ? _3481 : (isnan(_3481) ? 0.0 : max(_3481, 0.0));
                                float _3484 = isnan(1.0) ? _4527 : (isnan(_4527) ? 1.0 : min(_4527, 1.0));
                                float _3488 = ((_3484 * _3484) * (_3466 + (-1.0))) + 1.0;
                                float _3489 = _3426 * _3465;
                                float _3490 = _3489 * _3489;
                                float _3496 = ((1.0 - _3490) * dot(vec3(_696, _699, _702), vec3(_3413, _3414, _3415))) + _3490;
                                float _4538 = isnan(0.0) ? _3496 : (isnan(_3496) ? 0.0 : max(_3496, 0.0));
                                float _3497 = isnan(1.0) ? _4538 : (isnan(_4538) ? 1.0 : min(_4538, 1.0));
                                float _3498 = 1.0 - _3465;
                                float _3508 = (0.5 / (((_3497 * ((_3480 * _3498) + _3465)) + 9.9999999392252902907785028219223e-09) + (((_3497 * _3498) + _3465) * _3480))) * _3497;
                                float _4549 = isnan(0.0) ? _3508 : (isnan(_3508) ? 0.0 : max(_3508, 0.0));
                                float _3518 = (_3443 * _3420) * (((_3466 * 3.1415927410125732421875) * (isnan(1.0) ? _4549 : (isnan(_4549) ? 1.0 : min(_4549, 1.0)))) / ((_3488 * _3488) * ((_3433 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_75_pred = _3444 * _3288.z;
                                frontier_phi_75_pred_1 = _3444 * _3288.y;
                                frontier_phi_75_pred_2 = _3444 * _3288.x;
                                frontier_phi_75_pred_3 = _3518 * _3300.z;
                                frontier_phi_75_pred_4 = _3518 * _3300.y;
                                frontier_phi_75_pred_5 = _3518 * _3300.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _3527 = frontier_phi_75_pred;
                            _3526 = frontier_phi_75_pred_1;
                            _3525 = frontier_phi_75_pred_2;
                            _3524 = frontier_phi_75_pred_3;
                            _3523 = frontier_phi_75_pred_4;
                            _3522 = frontier_phi_75_pred_5;
                            _3230 = _3525 + _3243;
                            _3231 = _3526 + _3244;
                            _3232 = _3527 + _3245;
                            _3227 = _3522 + _3240;
                            _3228 = _3523 + _3241;
                            _3229 = _3524 + _3242;
                            if (_3247 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3240 = _3227;
                                _3241 = _3228;
                                _3242 = _3229;
                                _3243 = _3230;
                                _3244 = _3231;
                                _3245 = _3232;
                                _3246 = _3247;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _3232;
                        frontier_phi_69_pred_1 = _3231;
                        frontier_phi_69_pred_2 = _3230;
                        frontier_phi_69_pred_3 = _3229;
                        frontier_phi_69_pred_4 = _3228;
                        frontier_phi_69_pred_5 = _3227;
                    }
                    _2899 = frontier_phi_69_pred;
                    _2897 = frontier_phi_69_pred_1;
                    _2895 = frontier_phi_69_pred_2;
                    _2893 = frontier_phi_69_pred_3;
                    _2891 = frontier_phi_69_pred_4;
                    _2889 = frontier_phi_69_pred_5;
                    uint _3034 = _3033 + 1u;
                    if (_3034 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3027 = _2889;
                        _3028 = _2891;
                        _3029 = _2893;
                        _3030 = _2895;
                        _3031 = _2897;
                        _3032 = _2899;
                        _3033 = _3034;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2899;
                frontier_phi_57_58_ladder_1 = _2897;
                frontier_phi_57_58_ladder_2 = _2895;
                frontier_phi_57_58_ladder_3 = _2893;
                frontier_phi_57_58_ladder_4 = _2891;
                frontier_phi_57_58_ladder_5 = _2889;
            }
            else
            {
                frontier_phi_57_58_ladder = _2777;
                frontier_phi_57_58_ladder_1 = _2775;
                frontier_phi_57_58_ladder_2 = _2773;
                frontier_phi_57_58_ladder_3 = _2771;
                frontier_phi_57_58_ladder_4 = _2769;
                frontier_phi_57_58_ladder_5 = _2767;
            }
            _2888 = frontier_phi_57_58_ladder_5;
            _2890 = frontier_phi_57_58_ladder_4;
            _2892 = frontier_phi_57_58_ladder_3;
            _2894 = frontier_phi_57_58_ladder_2;
            _2896 = frontier_phi_57_58_ladder_1;
            _2898 = frontier_phi_57_58_ladder;
        }
        float _2903 = isnan(1.0) ? _883 : (isnan(_883) ? 1.0 : min(_883, 1.0));
        _2636 = (_2903 * _2894) + _2070;
        _2638 = (_2903 * _2896) + _2072;
        _2640 = (_2903 * _2898) + _2074;
        _2642 = ((_2888 * _869) * _2903) + _2418;
        _2644 = ((_2890 * _870) * _2903) + _2420;
        _2646 = ((_2892 * _871) * _2903) + _2422;
    }
    else
    {
        _2636 = _2070;
        _2638 = _2072;
        _2640 = _2074;
        _2642 = _2418;
        _2644 = _2420;
        _2646 = _2422;
    }
    uint _2652 = _776 + uint(cbMatDynParam._m0[0u].w);
    float _2662 = ((((cbMtdParam._m0[12u].x * cbMtdParam._m0[16u].z) * cbMtdParam._m0[15u].w) * _520) * _533.x) * cbInstanceData._m0[_2652].x;
    float _2667 = ((((cbMtdParam._m0[12u].y * cbMtdParam._m0[16u].z) * cbMtdParam._m0[15u].w) * _520) * _533.y) * cbInstanceData._m0[_2652].y;
    float _2672 = ((((cbMtdParam._m0[12u].z * cbMtdParam._m0[16u].z) * cbMtdParam._m0[15u].w) * _520) * _533.z) * cbInstanceData._m0[_2652].z;
    float _4565 = isnan(0.0) ? _860 : (isnan(_860) ? 0.0 : max(_860, 0.0));
    float _4576 = isnan(0.0) ? _861 : (isnan(_861) ? 0.0 : max(_861, 0.0));
    float _4587 = isnan(0.0) ? _862 : (isnan(_862) ? 0.0 : max(_862, 0.0));
    float _4598 = isnan(0.0) ? _585 : (isnan(_585) ? 0.0 : max(_585, 0.0));
    float _2690 = (((isnan(1.0) ? _4565 : (isnan(_4565) ? 1.0 : min(_4565, 1.0))) * (_2636 + ((isnan(0.0) ? _1611 : (isnan(_1611) ? 0.0 : max(_1611, 0.0))) * _883))) + ((_2642 + ((isnan(0.0) ? _1902 : (isnan(_1902) ? 0.0 : max(_1902, 0.0))) * _1687)) * cbPerFrame._m0[3u].x)) + _2662;
    float _2692 = (_2667 + ((_2644 + ((isnan(0.0) ? _1905 : (isnan(_1905) ? 0.0 : max(_1905, 0.0))) * _1687)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4576 : (isnan(_4576) ? 1.0 : min(_4576, 1.0))) * (_2638 + ((isnan(0.0) ? _1614 : (isnan(_1614) ? 0.0 : max(_1614, 0.0))) * _883)));
    float _2694 = (_2672 + ((_2646 + ((isnan(0.0) ? _1908 : (isnan(_1908) ? 0.0 : max(_1908, 0.0))) * _1687)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4587 : (isnan(_4587) ? 1.0 : min(_4587, 1.0))) * (_2640 + ((isnan(0.0) ? _1617 : (isnan(_1617) ? 0.0 : max(_1617, 0.0))) * _883)));
    float _4624 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2707 = isnan(1.0) ? _4624 : (isnan(_4624) ? 1.0 : min(_4624, 1.0));
    float _2712 = cbInstanceData._m0[_775 + 6u].w * (isnan(1.0) ? _4598 : (isnan(_4598) ? 1.0 : min(_4598, 1.0)));
    float _2717 = _673 / cbSceneParam._m0[86u].x;
    float _2718 = _674 / cbSceneParam._m0[86u].y;
    vec4 _2732 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2717, _2718, (log2((isnan(cbSceneParam._m0[77u].w) ? _606 : (isnan(_606) ? cbSceneParam._m0[77u].w : min(_606, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2734 = _2732.x;
    float _2735 = _2732.y;
    float _2736 = _2732.z;
    float _2737 = _2732.w;
    float _2829;
    float _2831;
    float _2833;
    float _2835;
    if (_606 > cbSceneParam._m0[78u].w)
    {
        float _2792 = isnan(_606) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _606 : min(cbSceneParam._m0[80u].w, _606));
        float _2793 = _2792 / _606;
        float _2804 = _2793 * _658;
        float _2805 = _659 * _2793;
        float _2806 = (-0.0) - _2805;
        float _2807 = _2793 * _660;
        float _2809 = (cbSceneParam._m0[77u].w * _2806) / _2792;
        float _2810 = _2809 + cbSceneParam._m0[79u].w;
        float _2811 = cbSceneParam._m0[79u].w - _2805;
        float _2817 = sqrt(((_2804 * _2804) + (_2805 * _2805)) + (_2807 * _2807));
        float _2820 = (1.0 - (cbSceneParam._m0[77u].w / _2792)) * _2817;
        float _2825 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2827 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2989;
        if (abs((_2806 - _2809) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2989 = ((((_2810 > 0.0) ? exp2(_2825 * _2810) : (2.0 - exp2(_2827 * _2810))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2820;
        }
        else
        {
            float _2949 = 1.0 / cbSceneParam._m0[80u].x;
            float _2950 = isnan(_2811) ? _2810 : (isnan(_2810) ? _2811 : max(_2810, _2811));
            float _2951 = isnan(_2811) ? _2810 : (isnan(_2810) ? _2811 : min(_2810, _2811));
            float _2960 = isnan(0.0) ? _2950 : (isnan(_2950) ? 0.0 : min(_2950, 0.0));
            float _2961 = isnan(0.0) ? _2951 : (isnan(_2951) ? 0.0 : min(_2951, 0.0));
            _2989 = ((abs(_2817 / _2806) * cbSceneParam._m0[80u].y) * ((((_2960 - _2961) * 2.0) - ((exp2(_2825 * (isnan(0.0) ? _2950 : (isnan(_2950) ? 0.0 : max(_2950, 0.0)))) - exp2(_2825 * (isnan(0.0) ? _2951 : (isnan(_2951) ? 0.0 : max(_2951, 0.0))))) * _2949)) - ((exp2(_2827 * _2960) - exp2(_2827 * _2961)) * _2949))) + (_2820 * cbSceneParam._m0[80u].z);
        }
        vec4 _2991 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2717, _2718, 1.0), 0.0);
        float _3000 = exp2((_2989 * (-1.44269502162933349609375)) * (1.0 - _2991.w));
        float _3001 = log2(_3000);
        float _3017 = log2(_2737);
        _2829 = (exp2(_3017 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3001 * cbSceneParam._m0[78u].x)) * _2991.x) / cbSceneParam._m0[78u].x)) + _2734;
        _2831 = (exp2(_3017 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3001 * cbSceneParam._m0[78u].y)) * _2991.y) / cbSceneParam._m0[78u].y)) + _2735;
        _2833 = (exp2(_3017 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3001 * cbSceneParam._m0[78u].z)) * _2991.z) / cbSceneParam._m0[78u].z)) + _2736;
        _2835 = _3000 * _2737;
    }
    else
    {
        _2829 = _2734;
        _2831 = _2735;
        _2833 = _2736;
        _2835 = _2737;
    }
    float _2847 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2848 = _2847 == 3.0;
    float _2849 = log2(_2835);
    float _2853 = exp2(_2849 * cbSceneParam._m0[78u].x);
    float _2854 = exp2(_2849 * cbSceneParam._m0[78u].y);
    float _2855 = exp2(_2849 * cbSceneParam._m0[78u].z);
    float _2856 = _2853 * (isnan(0.0) ? _2690 : (isnan(_2690) ? 0.0 : max(_2690, 0.0)));
    float _2857 = _2854 * (isnan(0.0) ? _2692 : (isnan(_2692) ? 0.0 : max(_2692, 0.0)));
    float _2858 = _2855 * (isnan(0.0) ? _2694 : (isnan(_2694) ? 0.0 : max(_2694, 0.0)));
    float _2867 = (_2847 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2867 * (_2848 ? _2856 : (_2856 + (cbSceneParam._m0[72u].w * _2829)));
    SV_Target.y = _2867 * (_2848 ? _2857 : (_2857 + (cbSceneParam._m0[72u].w * _2831)));
    SV_Target.z = _2867 * (_2848 ? _2858 : (_2858 + (cbSceneParam._m0[72u].w * _2833)));
    SV_Target.w = _2712;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2662) * _2707) * _2853) * _2867;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2667) * _2707) * _2854) * _2867;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2672) * _2707) * _2855) * _2867;
    SV_Target_1.w = _2712;
}


