#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[18];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_1;
layout(set = 0, binding = 1) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_7;
layout(set = 0, binding = 10) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_6;
layout(set = 0, binding = 2) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_0;
layout(set = 0, binding = 3) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_10;
layout(set = 0, binding = 4) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_11;
layout(set = 0, binding = 5) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_12;
layout(set = 0, binding = 6) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_2;
layout(set = 0, binding = 7) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_3;
layout(set = 0, binding = 9) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_5;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1414;
float _3839;
float _3840;
float _3841;
float _3842;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _211 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _212 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _213 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _219 = inversesqrt(dot(vec3(_211, _212, _213), vec3(_211, _212, _213)));
    float _226 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _227 = _226 * NORMAL.x;
    float _228 = _226 * NORMAL.y;
    float _229 = _226 * NORMAL.z;
    float _233 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _241;
    float _242;
    float _243;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _241 = (-0.0) - _227;
        _242 = (-0.0) - _228;
        _243 = (-0.0) - _229;
    }
    else
    {
        _241 = _227;
        _242 = _228;
        _243 = _229;
    }
    float _287 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _297 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _287);
    float _298 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _287);
    float _299 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _287);
    vec4 _312 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _317 = _312.z;
    float _324 = exp2(log2(_317 * 22.0) * 260.0);
    float _325 = isnan(0.0) ? _324 : (isnan(_324) ? 0.0 : max(_324, 0.0));
    float _326 = isnan(1.0) ? _325 : (isnan(_325) ? 1.0 : min(_325, 1.0));
    vec4 _340 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _350 = cbMtdParam._m0[10u].x * _340.x;
    float _351 = cbMtdParam._m0[10u].y * _340.y;
    float _352 = cbMtdParam._m0[10u].z * _340.z;
    vec4 _364 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _379 = exp2(log2(1.0 - _312.w) * 8.0);
    vec4 _391 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_10, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    vec4 _416 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _438 = (((((_364.x * 4.55000019073486328125) * cbMtdParam._m0[9u].x) * _416.x) - _350) * _326) + _350;
    float _439 = (((((_364.y * 4.55000019073486328125) * cbMtdParam._m0[9u].y) * _416.y) - _351) * _326) + _351;
    float _440 = (((((_364.z * 4.55000019073486328125) * cbMtdParam._m0[9u].z) * _416.z) - _352) * _326) + _352;
    float _447 = (((cbMtdParam._m0[13u].x * _391.x) - _438) * _379) + _438;
    float _448 = (((cbMtdParam._m0[13u].y * _391.y) - _439) * _379) + _439;
    float _449 = (((cbMtdParam._m0[13u].z * _391.z) - _440) * _379) + _440;
    float _450 = _416.w * _364.w;
    float _480 = (((texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w)).x - cbMtdParam._m0[17u].x) + cbMtdParam._m0[16u].x) * _326) + cbMtdParam._m0[17u].x;
    float _483 = ((cbMtdParam._m0[15u].z - _480) * _379) + _480;
    vec4 _495 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w));
    float _497 = _495.x;
    float _498 = _495.y;
    float _504 = cbMtdParam._m0[14u].y + _495.z;
    vec4 _516 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w));
    vec4 _535 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _546 = ((((_317 * 2.0) * (cbMtdParam._m0[14u].x + _516.z)) - _504) * _326) + _504;
    float _550 = (((_535.z - _546) + cbMtdParam._m0[15u].y) * _379) + _546;
    float _565 = abs((fract(cbMtdParam._m0[15u].x * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _3861 = isnan(0.0) ? _565 : (isnan(_565) ? 0.0 : max(_565, 0.0));
    float _566 = isnan(1.0) ? _3861 : (isnan(_3861) ? 1.0 : min(_3861, 1.0));
    float _571 = (_566 * _566) * (3.0 - (_566 * 2.0));
    vec4 _584 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _592 = (_312.x * 2.0) + (-1.0);
    float _593 = (_312.y * 2.0) + (-1.0);
    float _594 = dot(vec2(_592, _593), vec2(_592, _593));
    float _3872 = isnan(0.0) ? _594 : (isnan(_594) ? 0.0 : max(_594, 0.0));
    float _599 = sqrt(1.0 - (isnan(1.0) ? _3872 : (isnan(_3872) ? 1.0 : min(_3872, 1.0))));
    float _604 = ((_516.x - _497) * _326) + _497;
    float _605 = ((_516.y - _498) * _326) + _498;
    float _618 = (cbMtdParam._m0[14u].z * (((((_535.x - _604) * _379) + _604) * 2.0) + (-1.0))) + _592;
    float _619 = (cbMtdParam._m0[14u].z * (((((_535.y - _605) * _379) + _605) * 2.0) + (-1.0))) + _593;
    float _622 = fma(_599, _241, fma(_619, _233 * TANGENT.x, (_219 * _211) * _618));
    float _625 = fma(_599, _242, fma(_619, _233 * TANGENT.y, (_219 * _212) * _618));
    float _628 = fma(_599, _243, fma(_619, _233 * TANGENT.z, (_219 * _213) * _618));
    float _632 = inversesqrt(dot(vec3(_622, _625, _628), vec3(_622, _625, _628)));
    float _633 = _632 * _622;
    float _634 = _632 * _625;
    float _635 = _632 * _628;
    float _3883 = isnan(0.0) ? _450 : (isnan(_450) ? 0.0 : max(_450, 0.0));
    float _636 = isnan(1.0) ? _3883 : (isnan(_3883) ? 1.0 : min(_3883, 1.0));
    float _3894 = isnan(0.0) ? _550 : (isnan(_550) ? 0.0 : max(_550, 0.0));
    float _637 = isnan(1.0) ? _3894 : (isnan(_3894) ? 1.0 : min(_3894, 1.0));
    float _3905 = isnan(0.0) ? _447 : (isnan(_447) ? 0.0 : max(_447, 0.0));
    float _638 = isnan(1.0) ? _3905 : (isnan(_3905) ? 1.0 : min(_3905, 1.0));
    float _3916 = isnan(0.0) ? _448 : (isnan(_448) ? 0.0 : max(_448, 0.0));
    float _639 = isnan(1.0) ? _3916 : (isnan(_3916) ? 1.0 : min(_3916, 1.0));
    float _3927 = isnan(0.0) ? _449 : (isnan(_449) ? 0.0 : max(_449, 0.0));
    float _640 = isnan(1.0) ? _3927 : (isnan(_3927) ? 1.0 : min(_3927, 1.0));
    float _3938 = isnan(0.0) ? _483 : (isnan(_483) ? 0.0 : max(_483, 0.0));
    float _641 = isnan(1.0) ? _3938 : (isnan(_3938) ? 1.0 : min(_3938, 1.0));
    float _649 = cbMatDynParam._m0[9u].x * _638;
    float _650 = cbMatDynParam._m0[9u].y * _639;
    float _651 = cbMatDynParam._m0[9u].z * _640;
    float _658 = inversesqrt(dot(vec3(_297, _298, _299), vec3(_297, _298, _299)));
    float _659 = _658 * _297;
    float _660 = _658 * _298;
    float _661 = _658 * _299;
    float _662 = dot(vec3(_633, _634, _635), vec3(_659, _660, _661));
    float _668 = abs(exp2(log2(_662) * cbMatDynParam._m0[12u].x));
    float _669 = isnan(0.100000001490116119384765625) ? _668 : (isnan(_668) ? 0.100000001490116119384765625 : max(_668, 0.100000001490116119384765625));
    float _675 = ((isnan(0.699999988079071044921875) ? _669 : (isnan(_669) ? 0.699999988079071044921875 : min(_669, 0.699999988079071044921875))) + (-0.100000001490116119384765625)) * 1.66666662693023681640625;
    float _697 = 1.0 - cbMatDynParam._m0[8u].w;
    float _3959 = isnan(0.0) ? _697 : (isnan(_697) ? 0.0 : max(_697, 0.0));
    float _700 = 1.0 - cbMatDynParam._m0[7u].w;
    float _3970 = isnan(0.0) ? _700 : (isnan(_700) ? 0.0 : max(_700, 0.0));
    float _701 = isnan(1.0) ? _3970 : (isnan(_3970) ? 1.0 : min(_3970, 1.0));
    float _704 = (((isnan(1.0) ? _3959 : (isnan(_3959) ? 1.0 : min(_3959, 1.0))) - _701) * _675) + _701;
    float _723 = dot(vec3(_633, _634, _635), vec3(0.0, -1.0, 0.0));
    float _3981 = isnan(0.0) ? _723 : (isnan(_723) ? 0.0 : max(_723, 0.0));
    float _726 = isnan(1.0) ? _3981 : (isnan(_3981) ? 1.0 : min(_3981, 1.0));
    float _733 = (_726 * _638) * cbMatDynParam._m0[11u].x;
    float _735 = (_726 * _639) * cbMatDynParam._m0[11u].y;
    float _737 = (_726 * _640) * cbMatDynParam._m0[11u].z;
    float _744 = dot(vec3(_659, _660, _661), vec3(_633, _634, _635));
    float _747 = _744 * 2.0;
    float _757 = dot(vec3((-0.0) - (_659 - (_747 * _633)), (-0.0) - (_660 - (_747 * _634)), (-0.0) - (_661 - (_747 * _635))), vec3(0.0, -1.0, 0.0));
    float _3992 = isnan(0.0) ? _757 : (isnan(_757) ? 0.0 : max(_757, 0.0));
    float _764 = exp2(log2(isnan(1.0) ? _3992 : (isnan(_3992) ? 1.0 : min(_3992, 1.0))) * 4.0);
    float _790 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    vec4 _795 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _797 = _795.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1093 = sqrt(((_297 * _297) + (_298 * _298)) + (_299 * _299));
        float _1099 = (cbMatDynParam._m0[5u].x * _1093) + cbMatDynParam._m0[5u].y;
        float _4003 = isnan(0.0) ? _1099 : (isnan(_1099) ? 0.0 : max(_1099, 0.0));
        float _1100 = isnan(1.0) ? _4003 : (isnan(_4003) ? 1.0 : min(_4003, 1.0));
        float _1104 = (cbMatDynParam._m0[5u].z * _1093) + cbMatDynParam._m0[5u].w;
        float _4014 = isnan(0.0) ? _1104 : (isnan(_1104) ? 0.0 : max(_1104, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4014 : (isnan(_4014) ? 1.0 : min(_4014, 1.0))) - _1100)) + _1100) < ((_797 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _808 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _809 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _811 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _813 = _811.w;
    float _831 = fma(_635, cbSceneParam._m0[5u].z, fma(_634, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _633));
    float _834 = fma(_635, cbSceneParam._m0[6u].z, fma(_634, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _633));
    float _837 = fma(_635, cbSceneParam._m0[7u].z, fma(_634, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _633));
    vec4 _839 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _841 = _839.x;
    float _853 = (((_839.y - _637) + (_839.w * _637)) * cbMtdParam._m0[3u].x) + _637;
    vec4 _854 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _870 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3(cbMtdParam._m0[3u].x * (_841 * _841)), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * _854.z;
    float _878 = (((cbMatDynParam._m0[15u].x - _641) * cbMatDynParam._m0[15u].w) * _870) + _641;
    float _886 = ((_870 * cbMatDynParam._m0[16u].z) * (cbMatDynParam._m0[16u].x - _853)) + _853;
    uint _910 = uint(roundEven(NORMAL.w)) * 13u;
    uint _911 = _910 + 9u;
    uint _912 = _911 + uint(cbMatDynParam._m0[0u].w);
    float _918 = (cbMtdParam._m0[0u].x * _649) * cbInstanceData._m0[_912].x;
    float _919 = (cbMtdParam._m0[0u].y * _650) * cbInstanceData._m0[_912].y;
    float _920 = (cbMtdParam._m0[0u].z * _651) * cbInstanceData._m0[_912].z;
    float _4025 = isnan(0.0) ? _918 : (isnan(_918) ? 0.0 : max(_918, 0.0));
    float _921 = isnan(1.0) ? _4025 : (isnan(_4025) ? 1.0 : min(_4025, 1.0));
    float _4036 = isnan(0.0) ? _919 : (isnan(_919) ? 0.0 : max(_919, 0.0));
    float _922 = isnan(1.0) ? _4036 : (isnan(_4036) ? 1.0 : min(_4036, 1.0));
    float _4047 = isnan(0.0) ? _920 : (isnan(_920) ? 0.0 : max(_920, 0.0));
    float _923 = isnan(1.0) ? _4047 : (isnan(_4047) ? 1.0 : min(_4047, 1.0));
    vec4 _924 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _929 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _940 = (((_929.x - _878) + (_929.w * _878)) * cbMtdParam._m0[3u].x) + _878;
    float _953 = (cbMtdParam._m0[3u].x * (((_921 * _813) - _921) + _924.x)) + _921;
    float _954 = (cbMtdParam._m0[3u].x * (((_922 * _813) - _922) + _924.y)) + _922;
    float _955 = (cbMtdParam._m0[3u].x * (((_923 * _813) - _923) + _924.z)) + _923;
    vec4 _956 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _969 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3((_878 * (_649 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625, (_878 * (_650 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625, (_878 * (_651 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * _956.z;
    float _973 = _969 * cbMatDynParam._m0[13u].w;
    float _983 = (_973 * (cbMatDynParam._m0[13u].x - _953)) + _953;
    float _984 = (_973 * (cbMatDynParam._m0[13u].y - _954)) + _954;
    float _985 = (_973 * (cbMatDynParam._m0[13u].z - _955)) + _955;
    float _993 = ((_969 * cbMatDynParam._m0[15u].w) * (cbMatDynParam._m0[15u].x - _940)) + _940;
    float _994 = 1.0 - _993;
    float _995 = _994 * _983;
    float _996 = _994 * _984;
    float _997 = _994 * _985;
    float _1001 = (_983 + (-0.039999999105930328369140625)) * _993;
    float _1002 = (_984 + (-0.039999999105930328369140625)) * _993;
    float _1003 = (_985 + (-0.039999999105930328369140625)) * _993;
    float _1004 = _1001 + 0.039999999105930328369140625;
    float _1005 = _1002 + 0.039999999105930328369140625;
    float _1006 = _1003 + 0.039999999105930328369140625;
    vec4 _1015 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _808, cbSceneParam._m0[86u].y * _809));
    float _1018 = _1015.x * TEXCOORD_4;
    float _1019 = _662 * 2.0;
    float _1023 = (_1019 * _633) - _659;
    float _1024 = (_1019 * _634) - _660;
    float _1025 = (_1019 * _635) - _661;
    float _1026 = abs(_744);
    float _4058 = isnan(0.0) ? _1026 : (isnan(_1026) ? 0.0 : max(_1026, 0.0));
    float _1028 = sqrt(_886);
    float _1039 = exp2((_1028 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4058 : (isnan(_4058) ? 1.0 : min(_4058, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1028 * 3.0));
    float _1045 = (1.0 - _1039) * ((_1028 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1046 = _1039 * _1028;
    float _1074 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1078 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1082 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1413;
    float _1415;
    float _1416;
    float _1417;
    float _1418;
    float _1419;
    float _1420;
    float _1421;
    float _1422;
    float _1423;
    float _1424;
    float _1425;
    float _1426;
    float _1427;
    float _1428;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1138 = fma(_1082, cbModelParam._m0[26u].z, fma(_1078, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1074));
        float _1142 = fma(_1082, cbModelParam._m0[27u].z, fma(_1078, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1074));
        float _1146 = fma(_1082, cbModelParam._m0[28u].z, fma(_1078, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1074));
        float _1171 = _1074 + _633;
        float _1172 = _1078 + _634;
        float _1173 = _1082 + _635;
        float _1183 = fma(_1173, cbModelParam._m0[26u].z, fma(_1172, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1171)) - _1138;
        float _1184 = fma(_1173, cbModelParam._m0[27u].z, fma(_1172, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1171)) - _1142;
        float _1185 = fma(_1173, cbModelParam._m0[28u].z, fma(_1172, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1171)) - _1146;
        float _1189 = inversesqrt(dot(vec3(_1183, _1184, _1185), vec3(_1183, _1184, _1185)));
        float _1202 = ((_1189 * _1183) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1138 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1203 = ((_1189 * _1184) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1142 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1204 = ((_1189 * _1185) / cbModelParam._m0[34u].z) + ((((((_1146 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1207 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1202, _1203, _1204), 0.0);
        vec4 _1214 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1202, _1203, _1204), 0.0);
        vec4 _1221 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1202, _1203, _1204), 0.0);
        vec4 _1228 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1202, _1203, _1204), 0.0);
        float _1241 = exp2((_1207.w + (-0.5)) * 20.0) * 2.0;
        float _1242 = _1241 * (_1207.x + (-0.5));
        float _1243 = _1241 * (_1207.y + (-0.5));
        float _1244 = _1241 * (_1207.z + (-0.5));
        float _1251 = exp2((_1214.w + (-0.5)) * 20.0) * 2.0;
        float _1252 = _1251 * (_1214.x + (-0.5));
        float _1253 = _1251 * (_1214.y + (-0.5));
        float _1254 = _1251 * (_1214.z + (-0.5));
        float _1261 = exp2((_1221.w + (-0.5)) * 20.0) * 2.0;
        float _1262 = _1261 * (_1221.x + (-0.5));
        float _1263 = _1261 * (_1221.y + (-0.5));
        float _1264 = _1261 * (_1221.z + (-0.5));
        float _1271 = exp2((_1228.w + (-0.5)) * 20.0) * 2.0;
        float _1272 = _1271 * (_1228.x + (-0.5));
        float _1273 = _1271 * (_1228.y + (-0.5));
        float _1274 = _1271 * (_1228.z + (-0.5));
        float _1275 = isnan(0.0) ? _1272 : (isnan(_1272) ? 0.0 : max(_1272, 0.0));
        float _1276 = isnan(0.0) ? _1273 : (isnan(_1273) ? 0.0 : max(_1273, 0.0));
        float _1277 = isnan(0.0) ? _1274 : (isnan(_1274) ? 0.0 : max(_1274, 0.0));
        float _1278 = _1242 * 0.5;
        float _1279 = _1252 * 0.5;
        float _1280 = _1262 * 0.5;
        float _1281 = dot(vec3(_1278, _1279, _1280), vec3(_1278, _1279, _1280));
        float _1286 = (_1281 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1281);
        float _1295 = (dot(vec3(_633, _634, _635), vec3(_1286 * _1278, _1286 * _1279, _1286 * _1280)) + 1.0) * 0.5;
        float _4084 = isnan(0.0) ? _1295 : (isnan(_1295) ? 0.0 : max(_1295, 0.0));
        float _1305 = sqrt(((_1279 * _1279) + (_1278 * _1278)) + (_1280 * _1280)) / (_1275 + 9.9999997473787516355514526367188e-06);
        float _4095 = isnan(0.0) ? _1305 : (isnan(_1305) ? 0.0 : max(_1305, 0.0));
        float _1306 = isnan(1.0) ? _4095 : (isnan(_4095) ? 1.0 : min(_4095, 1.0));
        float _1307 = _1306 * 2.0;
        float _1311 = (1.0 - _1306) / (_1306 + 1.0);
        float _4106 = isnan(0.0) ? _1311 : (isnan(_1311) ? 0.0 : max(_1311, 0.0));
        float _1312 = isnan(1.0) ? _4106 : (isnan(_4106) ? 1.0 : min(_4106, 1.0));
        float _1321 = ((((1.0 - _1312) * (_1307 + 2.0)) * exp2(log2(isnan(1.0) ? _4084 : (isnan(_4084) ? 1.0 : min(_4084, 1.0))) * (_1307 + 1.0))) + _1312) * _1275;
        float _1322 = _1243 * 0.5;
        float _1323 = _1253 * 0.5;
        float _1324 = _1263 * 0.5;
        float _1325 = dot(vec3(_1322, _1323, _1324), vec3(_1322, _1323, _1324));
        float _1330 = (_1325 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1325);
        float _1338 = (dot(vec3(_633, _634, _635), vec3(_1330 * _1322, _1330 * _1323, _1330 * _1324)) + 1.0) * 0.5;
        float _4117 = isnan(0.0) ? _1338 : (isnan(_1338) ? 0.0 : max(_1338, 0.0));
        float _1347 = sqrt(((_1323 * _1323) + (_1322 * _1322)) + (_1324 * _1324)) / (_1276 + 9.9999997473787516355514526367188e-06);
        float _4128 = isnan(0.0) ? _1347 : (isnan(_1347) ? 0.0 : max(_1347, 0.0));
        float _1348 = isnan(1.0) ? _4128 : (isnan(_4128) ? 1.0 : min(_4128, 1.0));
        float _1349 = _1348 * 2.0;
        float _1353 = (1.0 - _1348) / (_1348 + 1.0);
        float _4139 = isnan(0.0) ? _1353 : (isnan(_1353) ? 0.0 : max(_1353, 0.0));
        float _1354 = isnan(1.0) ? _4139 : (isnan(_4139) ? 1.0 : min(_4139, 1.0));
        float _1363 = ((((1.0 - _1354) * (_1349 + 2.0)) * exp2(log2(isnan(1.0) ? _4117 : (isnan(_4117) ? 1.0 : min(_4117, 1.0))) * (_1349 + 1.0))) + _1354) * _1276;
        float _1364 = _1244 * 0.5;
        float _1365 = _1254 * 0.5;
        float _1366 = _1264 * 0.5;
        float _1367 = dot(vec3(_1364, _1365, _1366), vec3(_1364, _1365, _1366));
        float _1372 = (_1367 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1367);
        float _1380 = (dot(vec3(_633, _634, _635), vec3(_1372 * _1364, _1372 * _1365, _1372 * _1366)) + 1.0) * 0.5;
        float _4150 = isnan(0.0) ? _1380 : (isnan(_1380) ? 0.0 : max(_1380, 0.0));
        float _1389 = sqrt(((_1365 * _1365) + (_1364 * _1364)) + (_1366 * _1366)) / (_1277 + 9.9999997473787516355514526367188e-06);
        float _4161 = isnan(0.0) ? _1389 : (isnan(_1389) ? 0.0 : max(_1389, 0.0));
        float _1390 = isnan(1.0) ? _4161 : (isnan(_4161) ? 1.0 : min(_4161, 1.0));
        float _1391 = _1390 * 2.0;
        float _1395 = (1.0 - _1390) / (_1390 + 1.0);
        float _4172 = isnan(0.0) ? _1395 : (isnan(_1395) ? 0.0 : max(_1395, 0.0));
        float _1396 = isnan(1.0) ? _4172 : (isnan(_4172) ? 1.0 : min(_4172, 1.0));
        float _1405 = ((((1.0 - _1396) * (_1391 + 2.0)) * exp2(log2(isnan(1.0) ? _4150 : (isnan(_4150) ? 1.0 : min(_4150, 1.0))) * (_1391 + 1.0))) + _1396) * _1277;
        _1413 = _1244;
        _1415 = _1243;
        _1416 = _1242;
        _1417 = _1254;
        _1418 = _1253;
        _1419 = _1252;
        _1420 = _1264;
        _1421 = _1263;
        _1422 = _1262;
        _1423 = _1277;
        _1424 = _1276;
        _1425 = _1275;
        _1426 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1321 : (isnan(_1321) ? 0.0 : max(_1321, 0.0)));
        _1427 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1363 : (isnan(_1363) ? 0.0 : max(_1363, 0.0)));
        _1428 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1405 : (isnan(_1405) ? 0.0 : max(_1405, 0.0)));
    }
    else
    {
        _1413 = _1414;
        _1415 = _1414;
        _1416 = _1414;
        _1417 = _1414;
        _1418 = _1414;
        _1419 = _1414;
        _1420 = _1414;
        _1421 = _1414;
        _1422 = _1414;
        _1423 = _1414;
        _1424 = _1414;
        _1425 = _1414;
        _1426 = 0.0;
        _1427 = 0.0;
        _1428 = 0.0;
    }
    float _1726;
    float _1727;
    float _1728;
    float _1729;
    float _1730;
    float _1731;
    float _1732;
    float _1733;
    float _1734;
    float _1735;
    float _1736;
    float _1737;
    float _1738;
    float _1739;
    float _1740;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1457 = fma(_1082, cbModelParam._m0[30u].z, fma(_1078, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1074));
        float _1461 = fma(_1082, cbModelParam._m0[31u].z, fma(_1078, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1074));
        float _1465 = fma(_1082, cbModelParam._m0[32u].z, fma(_1078, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1074));
        float _1488 = _1074 + _633;
        float _1489 = _1078 + _634;
        float _1490 = _1082 + _635;
        float _1500 = fma(_1490, cbModelParam._m0[30u].z, fma(_1489, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1488)) - _1457;
        float _1501 = fma(_1490, cbModelParam._m0[31u].z, fma(_1489, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1488)) - _1461;
        float _1502 = fma(_1490, cbModelParam._m0[32u].z, fma(_1489, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1488)) - _1465;
        float _1506 = inversesqrt(dot(vec3(_1500, _1501, _1502), vec3(_1500, _1501, _1502)));
        float _1519 = ((_1506 * _1500) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1457 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1520 = ((_1506 * _1501) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1461 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1521 = ((_1506 * _1502) / cbModelParam._m0[35u].z) + ((((((_1465 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1523 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1519, _1520, _1521), 0.0);
        vec4 _1530 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1519, _1520, _1521), 0.0);
        vec4 _1537 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1519, _1520, _1521), 0.0);
        vec4 _1544 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1519, _1520, _1521), 0.0);
        float _1556 = exp2((_1523.w + (-0.5)) * 20.0) * 2.0;
        float _1557 = _1556 * (_1523.x + (-0.5));
        float _1558 = _1556 * (_1523.y + (-0.5));
        float _1559 = _1556 * (_1523.z + (-0.5));
        float _1566 = exp2((_1530.w + (-0.5)) * 20.0) * 2.0;
        float _1567 = _1566 * (_1530.x + (-0.5));
        float _1568 = _1566 * (_1530.y + (-0.5));
        float _1569 = _1566 * (_1530.z + (-0.5));
        float _1576 = exp2((_1537.w + (-0.5)) * 20.0) * 2.0;
        float _1577 = _1576 * (_1537.x + (-0.5));
        float _1578 = _1576 * (_1537.y + (-0.5));
        float _1579 = _1576 * (_1537.z + (-0.5));
        float _1586 = exp2((_1544.w + (-0.5)) * 20.0) * 2.0;
        float _1587 = _1586 * (_1544.x + (-0.5));
        float _1588 = _1586 * (_1544.y + (-0.5));
        float _1589 = _1586 * (_1544.z + (-0.5));
        float _1590 = isnan(0.0) ? _1587 : (isnan(_1587) ? 0.0 : max(_1587, 0.0));
        float _1591 = isnan(0.0) ? _1588 : (isnan(_1588) ? 0.0 : max(_1588, 0.0));
        float _1592 = isnan(0.0) ? _1589 : (isnan(_1589) ? 0.0 : max(_1589, 0.0));
        float _1593 = _1557 * 0.5;
        float _1594 = _1567 * 0.5;
        float _1595 = _1577 * 0.5;
        float _1596 = dot(vec3(_1593, _1594, _1595), vec3(_1593, _1594, _1595));
        float _1601 = (_1596 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1596);
        float _1609 = (dot(vec3(_633, _634, _635), vec3(_1601 * _1593, _1601 * _1594, _1601 * _1595)) + 1.0) * 0.5;
        float _4213 = isnan(0.0) ? _1609 : (isnan(_1609) ? 0.0 : max(_1609, 0.0));
        float _1618 = sqrt(((_1594 * _1594) + (_1593 * _1593)) + (_1595 * _1595)) / (_1590 + 9.9999997473787516355514526367188e-06);
        float _4224 = isnan(0.0) ? _1618 : (isnan(_1618) ? 0.0 : max(_1618, 0.0));
        float _1619 = isnan(1.0) ? _4224 : (isnan(_4224) ? 1.0 : min(_4224, 1.0));
        float _1620 = _1619 * 2.0;
        float _1624 = (1.0 - _1619) / (_1619 + 1.0);
        float _4235 = isnan(0.0) ? _1624 : (isnan(_1624) ? 0.0 : max(_1624, 0.0));
        float _1625 = isnan(1.0) ? _4235 : (isnan(_4235) ? 1.0 : min(_4235, 1.0));
        float _1634 = ((((1.0 - _1625) * (_1620 + 2.0)) * exp2(log2(isnan(1.0) ? _4213 : (isnan(_4213) ? 1.0 : min(_4213, 1.0))) * (_1620 + 1.0))) + _1625) * _1590;
        float _1635 = _1558 * 0.5;
        float _1636 = _1568 * 0.5;
        float _1637 = _1578 * 0.5;
        float _1638 = dot(vec3(_1635, _1636, _1637), vec3(_1635, _1636, _1637));
        float _1643 = (_1638 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1638);
        float _1651 = (dot(vec3(_633, _634, _635), vec3(_1643 * _1635, _1643 * _1636, _1643 * _1637)) + 1.0) * 0.5;
        float _4246 = isnan(0.0) ? _1651 : (isnan(_1651) ? 0.0 : max(_1651, 0.0));
        float _1660 = sqrt(((_1636 * _1636) + (_1635 * _1635)) + (_1637 * _1637)) / (_1591 + 9.9999997473787516355514526367188e-06);
        float _4257 = isnan(0.0) ? _1660 : (isnan(_1660) ? 0.0 : max(_1660, 0.0));
        float _1661 = isnan(1.0) ? _4257 : (isnan(_4257) ? 1.0 : min(_4257, 1.0));
        float _1662 = _1661 * 2.0;
        float _1666 = (1.0 - _1661) / (_1661 + 1.0);
        float _4268 = isnan(0.0) ? _1666 : (isnan(_1666) ? 0.0 : max(_1666, 0.0));
        float _1667 = isnan(1.0) ? _4268 : (isnan(_4268) ? 1.0 : min(_4268, 1.0));
        float _1676 = ((((1.0 - _1667) * (_1662 + 2.0)) * exp2(log2(isnan(1.0) ? _4246 : (isnan(_4246) ? 1.0 : min(_4246, 1.0))) * (_1662 + 1.0))) + _1667) * _1591;
        float _1677 = _1559 * 0.5;
        float _1678 = _1569 * 0.5;
        float _1679 = _1579 * 0.5;
        float _1680 = dot(vec3(_1677, _1678, _1679), vec3(_1677, _1678, _1679));
        float _1685 = (_1680 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1680);
        float _1693 = (dot(vec3(_633, _634, _635), vec3(_1685 * _1677, _1685 * _1678, _1685 * _1679)) + 1.0) * 0.5;
        float _4279 = isnan(0.0) ? _1693 : (isnan(_1693) ? 0.0 : max(_1693, 0.0));
        float _1702 = sqrt(((_1678 * _1678) + (_1677 * _1677)) + (_1679 * _1679)) / (_1592 + 9.9999997473787516355514526367188e-06);
        float _4290 = isnan(0.0) ? _1702 : (isnan(_1702) ? 0.0 : max(_1702, 0.0));
        float _1703 = isnan(1.0) ? _4290 : (isnan(_4290) ? 1.0 : min(_4290, 1.0));
        float _1704 = _1703 * 2.0;
        float _1708 = (1.0 - _1703) / (_1703 + 1.0);
        float _4301 = isnan(0.0) ? _1708 : (isnan(_1708) ? 0.0 : max(_1708, 0.0));
        float _1709 = isnan(1.0) ? _4301 : (isnan(_4301) ? 1.0 : min(_4301, 1.0));
        float _1718 = ((((1.0 - _1709) * (_1704 + 2.0)) * exp2(log2(isnan(1.0) ? _4279 : (isnan(_4279) ? 1.0 : min(_4279, 1.0))) * (_1704 + 1.0))) + _1709) * _1592;
        _1726 = _1559;
        _1727 = _1558;
        _1728 = _1557;
        _1729 = _1569;
        _1730 = _1568;
        _1731 = _1567;
        _1732 = _1579;
        _1733 = _1578;
        _1734 = _1577;
        _1735 = _1592;
        _1736 = _1591;
        _1737 = _1590;
        _1738 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1634 : (isnan(_1634) ? 0.0 : max(_1634, 0.0)));
        _1739 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1676 : (isnan(_1676) ? 0.0 : max(_1676, 0.0)));
        _1740 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1718 : (isnan(_1718) ? 0.0 : max(_1718, 0.0)));
    }
    else
    {
        _1726 = _1414;
        _1727 = _1414;
        _1728 = _1414;
        _1729 = _1414;
        _1730 = _1414;
        _1731 = _1414;
        _1732 = _1414;
        _1733 = _1414;
        _1734 = _1414;
        _1735 = _1414;
        _1736 = _1414;
        _1737 = _1414;
        _1738 = 0.0;
        _1739 = 0.0;
        _1740 = 0.0;
    }
    float _1750 = (cbModelParam._m0[1u].x * (_1738 - _1426)) + _1426;
    float _1751 = (cbModelParam._m0[1u].x * (_1739 - _1427)) + _1427;
    float _1752 = (cbModelParam._m0[1u].x * (_1740 - _1428)) + _1428;
    float _1773 = fma(_1752, cbSceneParam._m0[89u].z, fma(_1751, cbSceneParam._m0[89u].y, _1750 * cbSceneParam._m0[89u].x));
    float _1776 = fma(_1752, cbSceneParam._m0[90u].z, fma(_1751, cbSceneParam._m0[90u].y, _1750 * cbSceneParam._m0[90u].x));
    float _1779 = fma(_1752, cbSceneParam._m0[91u].z, fma(_1751, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1750));
    float _1794 = _1023 * 0.5;
    float _1795 = _1024 * 0.5;
    float _1796 = _1025 * 0.5;
    float _1797 = dot(vec4(_1794, _1795, _1796, 1.0), vec4(_1728, _1731, _1734, _1737));
    float _1800 = dot(vec4(_1794, _1795, _1796, 1.0), vec4(_1727, _1730, _1733, _1736));
    float _1803 = dot(vec4(_1794, _1795, _1796, 1.0), vec4(_1726, _1729, _1732, _1735));
    float _1834;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1810 = dot(vec4(_1794, _1795, _1796, 1.0), vec4(_1413, _1417, _1420, _1423));
        float _1814 = dot(vec4(_1794, _1795, _1796, 1.0), vec4(_1415, _1418, _1421, _1424));
        float _1818 = dot(vec4(_1794, _1795, _1796, 1.0), vec4(_1416, _1419, _1422, _1425));
        float _1825 = dot(vec4(cbModelParam._m0[39u]), vec4(_1794, _1795, _1796, 1.0));
        _1834 = dot(vec3(isnan(0.0) ? _1818 : (isnan(_1818) ? 0.0 : max(_1818, 0.0)), isnan(0.0) ? _1814 : (isnan(_1814) ? 0.0 : max(_1814, 0.0)), isnan(0.0) ? _1810 : (isnan(_1810) ? 0.0 : max(_1810, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1825) ? 0.0 : (isnan(0.0) ? _1825 : max(0.0, _1825))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1834 = 1.0;
    }
    float _1845;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1836 = dot(vec4(cbModelParam._m0[40u]), vec4(_1794, _1795, _1796, 1.0));
        _1845 = dot(vec3(isnan(0.0) ? _1797 : (isnan(_1797) ? 0.0 : max(_1797, 0.0)), isnan(0.0) ? _1800 : (isnan(_1800) ? 0.0 : max(_1800, 0.0)), isnan(0.0) ? _1803 : (isnan(_1803) ? 0.0 : max(_1803, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1836) ? 0.0 : (isnan(0.0) ? _1836 : max(0.0, _1836))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1845 = 1.0;
    }
    float _1849 = (_1845 * cbModelParam._m0[1u].x) + (_1834 * (1.0 - cbModelParam._m0[1u].x));
    float _1859 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _886);
    float _1860 = isnan(_1859) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1859 : min(cbModelParam._m0[25u].z, _1859));
    float _1940;
    float _1942;
    float _1944;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1907 = fma(_1082, cbModelParam._m0[13u].z, fma(_1078, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1074)) + cbModelParam._m0[13u].w;
        float _1911 = fma(_1082, cbModelParam._m0[14u].z, fma(_1078, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1074)) + cbModelParam._m0[14u].w;
        float _1915 = fma(_1082, cbModelParam._m0[15u].z, fma(_1078, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1074)) + cbModelParam._m0[15u].w;
        float _1918 = fma(_1025, cbModelParam._m0[13u].z, fma(_1024, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1023));
        float _1921 = fma(_1025, cbModelParam._m0[14u].z, fma(_1024, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1023));
        float _1924 = fma(_1025, cbModelParam._m0[15u].z, fma(_1024, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1023));
        float _1952;
        if (_1918 > 0.0)
        {
            _1952 = abs((1.0 - _1907) / _1918);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1918 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1907 + 1.0) / _1918);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1952 = frontier_phi_19_17_ladder;
        }
        float _2156;
        if (_1921 > 0.0)
        {
            _2156 = abs((1.0 - _1911) / _1921);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1921 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1911 + 1.0) / _1921);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2156 = frontier_phi_28_24_ladder;
        }
        float _2410;
        if (_1924 > 0.0)
        {
            _2410 = abs((1.0 - _1915) / _1924);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1924 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1915 + 1.0) / _1924);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2410 = frontier_phi_40_35_ladder;
        }
        float _2412 = isnan(_2156) ? _1952 : (isnan(_1952) ? _2156 : min(_1952, _2156));
        float _2413 = isnan(_2410) ? _2412 : (isnan(_2412) ? _2410 : min(_2412, _2410));
        float _2417 = (_2413 * _1918) + _1907;
        float _2418 = (_2413 * _1921) + _1911;
        float _2419 = (_2413 * _1924) + _1915;
        float _2420 = _2413 * 9.9999997473787516355514526367188e-05;
        float _2422 = (-1.0) - _2420;
        float _2424 = _2420 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2419 > _2424) || ((_2419 < _2422) || ((_2418 > _2424) || ((_2418 < _2422) || ((_2417 < _2422) || (_2417 > _2424))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2547 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2419, cbModelParam._m0[9u].z, fma(_2418, cbModelParam._m0[9u].y, _2417 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2419, cbModelParam._m0[10u].z, fma(_2418, cbModelParam._m0[10u].y, _2417 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2419, cbModelParam._m0[11u].z, fma(_2418, cbModelParam._m0[11u].y, _2417 * cbModelParam._m0[11u].x))), _1860);
            frontier_phi_18_40_ladder = _2547.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2547.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2547.x * cbModelParam._m0[1u].y;
        }
        _1940 = frontier_phi_18_40_ladder_2;
        _1942 = frontier_phi_18_40_ladder_1;
        _1944 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1928 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1023, _1024, _1025), _1860);
        _1940 = _1928.x * cbModelParam._m0[1u].y;
        _1942 = _1928.y * cbModelParam._m0[1u].y;
        _1944 = _1928.z * cbModelParam._m0[1u].y;
    }
    float _1948 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _886);
    float _1949 = isnan(_1948) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1948 : min(cbModelParam._m0[25u].w, _1948));
    float _2040;
    float _2042;
    float _2044;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2004 = fma(_1082, cbModelParam._m0[21u].z, fma(_1078, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1074)) + cbModelParam._m0[21u].w;
        float _2008 = fma(_1082, cbModelParam._m0[22u].z, fma(_1078, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1074)) + cbModelParam._m0[22u].w;
        float _2012 = fma(_1082, cbModelParam._m0[23u].z, fma(_1078, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1074)) + cbModelParam._m0[23u].w;
        float _2015 = fma(_1025, cbModelParam._m0[21u].z, fma(_1024, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1023));
        float _2018 = fma(_1025, cbModelParam._m0[22u].z, fma(_1024, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1023));
        float _2021 = fma(_1025, cbModelParam._m0[23u].z, fma(_1024, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1023));
        float _2161;
        if (_2015 > 0.0)
        {
            _2161 = abs((1.0 - _2004) / _2015);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_2015 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_2004 + 1.0) / _2015);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _2161 = frontier_phi_30_26_ladder;
        }
        float _2437;
        if (_2018 > 0.0)
        {
            _2437 = abs((1.0 - _2008) / _2018);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_2018 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_2008 + 1.0) / _2018);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2437 = frontier_phi_42_37_ladder;
        }
        float _2650;
        if (_2021 > 0.0)
        {
            _2650 = abs((1.0 - _2012) / _2021);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_2021 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_2012 + 1.0) / _2021);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2650 = frontier_phi_51_48_ladder;
        }
        float _2652 = isnan(_2437) ? _2161 : (isnan(_2161) ? _2437 : min(_2161, _2437));
        float _2653 = isnan(_2650) ? _2652 : (isnan(_2652) ? _2650 : min(_2652, _2650));
        float _2657 = (_2653 * _2015) + _2004;
        float _2658 = (_2653 * _2018) + _2008;
        float _2659 = (_2653 * _2021) + _2012;
        float _2660 = _2653 * 9.9999997473787516355514526367188e-05;
        float _2661 = (-1.0) - _2660;
        float _2663 = _2660 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2659 > _2663) || ((_2659 < _2661) || ((_2658 > _2663) || ((_2658 < _2661) || ((_2657 < _2661) || (_2657 > _2663))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2893 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2659, cbModelParam._m0[17u].z, fma(_2658, cbModelParam._m0[17u].y, _2657 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2659, cbModelParam._m0[18u].z, fma(_2658, cbModelParam._m0[18u].y, _2657 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2659, cbModelParam._m0[19u].z, fma(_2658, cbModelParam._m0[19u].y, _2657 * cbModelParam._m0[19u].x))), _1949);
            frontier_phi_27_51_ladder = _2893.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2893.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2893.x * cbModelParam._m0[1u].z;
        }
        _2040 = frontier_phi_27_51_ladder_2;
        _2042 = frontier_phi_27_51_ladder_1;
        _2044 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _2024 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1023, _1024, _1025), _1949);
        _2040 = _2024.x * cbModelParam._m0[1u].z;
        _2042 = _2024.y * cbModelParam._m0[1u].z;
        _2044 = _2024.z * cbModelParam._m0[1u].z;
    }
    float _2057 = (((_1045 * _1004) + _1046) * _1018) * ((cbModelParam._m0[1u].w * (_2040 - _1940)) + _1940);
    float _2059 = (((_1045 * _1005) + _1046) * _1018) * ((cbModelParam._m0[1u].w * (_2042 - _1942)) + _1942);
    float _2061 = (((_1045 * _1006) + _1046) * _1018) * ((cbModelParam._m0[1u].w * (_2044 - _1944)) + _1944);
    float _2064 = fma(_2061, cbSceneParam._m0[89u].z, fma(_2059, cbSceneParam._m0[89u].y, _2057 * cbSceneParam._m0[89u].x));
    float _2067 = fma(_2061, cbSceneParam._m0[90u].z, fma(_2059, cbSceneParam._m0[90u].y, _2057 * cbSceneParam._m0[90u].x));
    float _2070 = fma(_2061, cbSceneParam._m0[91u].z, fma(_2059, cbSceneParam._m0[91u].y, _2057 * cbSceneParam._m0[91u].x));
    uvec4 _2080 = floatBitsToUint(cbInstanceData._m0[_910 + 5u]);
    uint _2082 = _2080.x * 14u;
    uint _2083 = _2082 + 13u;
    float _2090 = _1018 + (-1.0);
    float _2095 = (cbLight._m0[_2083].x * _2090) + 1.0;
    float _2096 = (cbLight._m0[_2083].y * _2090) + 1.0;
    float _2097 = (cbLight._m0[_2083].z * _2090) + 1.0;
    float _2098 = (cbLight._m0[_2083].w * _2090) + 1.0;
    uint _2099 = _2082 + 5u;
    float _2105 = isnan(1.0) ? _2096 : (isnan(_2096) ? 1.0 : min(_2096, 1.0));
    uint _2109 = _2082 + 4u;
    float _2115 = isnan(1.0) ? _2095 : (isnan(_2095) ? 1.0 : min(_2095, 1.0));
    uint _2119 = _2082 | 1u;
    float _2130 = dot(vec3(cbLight._m0[_2082].xyz), vec3(_633, _634, _635));
    float _2133 = dot(vec3(cbLight._m0[_2119].xyz), vec3(_633, _634, _635));
    float _4437 = isnan(0.0) ? _2130 : (isnan(_2130) ? 0.0 : max(_2130, 0.0));
    float _4448 = isnan(0.0) ? _2133 : (isnan(_2133) ? 0.0 : max(_2133, 0.0));
    float _2138 = (isnan(1.0) ? _4437 : (isnan(_4437) ? 1.0 : min(_4437, 1.0))) * 0.3183098733425140380859375;
    float _2140 = (isnan(1.0) ? _4448 : (isnan(_4448) ? 1.0 : min(_4448, 1.0))) * 0.3183098733425140380859375;
    float _2147 = ((cbLight._m0[_2099].x * _2105) * _2140) + ((cbLight._m0[_2109].x * _2115) * _2138);
    float _2148 = ((_2105 * cbLight._m0[_2099].y) * _2140) + ((_2115 * cbLight._m0[_2109].y) * _2138);
    float _2149 = ((_2105 * cbLight._m0[_2099].z) * _2140) + ((_2115 * cbLight._m0[_2109].z) * _2138);
    uvec4 _2153 = floatBitsToUint(cbLight._m0[_2082 + 12u]);
    bool _2155 = _2153.x == 0u;
    float _2166;
    float _2168;
    float _2170;
    if (_2155)
    {
        _2166 = _2147;
        _2168 = _2148;
        _2170 = _2149;
    }
    else
    {
        uint _2174 = _2082 + 6u;
        float _2190 = (dot(vec3(cbLight._m0[_2082 + 2u].xyz), vec3(_633, _634, _635)) * 0.5) + 0.5;
        float _2191 = _2190 * _2190;
        float _4459 = isnan(0.0) ? _2191 : (isnan(_2191) ? 0.0 : max(_2191, 0.0));
        float _2192 = isnan(1.0) ? _4459 : (isnan(_4459) ? 1.0 : min(_4459, 1.0));
        float _2193 = isnan(1.0) ? _2097 : (isnan(_2097) ? 1.0 : min(_2097, 1.0));
        _2166 = (((cbLight._m0[_2174].x * 0.3183098733425140380859375) * _2192) * _2193) + _2147;
        _2168 = (((cbLight._m0[_2174].y * 0.3183098733425140380859375) * _2192) * _2193) + _2148;
        _2170 = (((cbLight._m0[_2174].z * 0.3183098733425140380859375) * _2192) * _2193) + _2149;
    }
    bool _2173 = _2153.y == 0u;
    float _2211;
    float _2213;
    float _2215;
    if (_2173)
    {
        _2211 = _2166;
        _2213 = _2168;
        _2215 = _2170;
    }
    else
    {
        uint _2381 = _2082 + 7u;
        float _2397 = (dot(vec3(cbLight._m0[_2082 + 3u].xyz), vec3(_633, _634, _635)) * 0.5) + 0.5;
        float _2398 = _2397 * _2397;
        float _4475 = isnan(0.0) ? _2398 : (isnan(_2398) ? 0.0 : max(_2398, 0.0));
        float _2399 = isnan(1.0) ? _4475 : (isnan(_4475) ? 1.0 : min(_4475, 1.0));
        float _2400 = isnan(1.0) ? _2098 : (isnan(_2098) ? 1.0 : min(_2098, 1.0));
        _2211 = (((cbLight._m0[_2381].x * 0.3183098733425140380859375) * _2399) * _2400) + _2166;
        _2213 = (((cbLight._m0[_2381].y * 0.3183098733425140380859375) * _2399) * _2400) + _2168;
        _2215 = (((cbLight._m0[_2381].z * 0.3183098733425140380859375) * _2399) * _2400) + _2170;
    }
    uint _2218 = _2082 + 8u;
    float _2231 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2082].w)) * _886) * 0.949999988079071044921875);
    float _2232 = _2231 * _2231;
    float _2233 = cbLight._m0[_2082].x + _659;
    float _2234 = cbLight._m0[_2082].y + _660;
    float _2235 = cbLight._m0[_2082].z + _661;
    float _2239 = inversesqrt(dot(vec3(_2233, _2234, _2235), vec3(_2233, _2234, _2235)));
    float _2240 = _2239 * _2233;
    float _2241 = _2239 * _2234;
    float _2242 = _2239 * _2235;
    float _2243 = dot(vec3(_633, _634, _635), vec3(cbLight._m0[_2082].xyz));
    float _4491 = isnan(0.0) ? _2243 : (isnan(_2243) ? 0.0 : max(_2243, 0.0));
    float _2246 = isnan(1.0) ? _4491 : (isnan(_4491) ? 1.0 : min(_4491, 1.0));
    float _4502 = isnan(0.0) ? _662 : (isnan(_662) ? 0.0 : max(_662, 0.0));
    float _2247 = isnan(1.0) ? _4502 : (isnan(_4502) ? 1.0 : min(_4502, 1.0));
    float _2248 = dot(vec3(_633, _634, _635), vec3(_2240, _2241, _2242));
    float _4513 = isnan(0.0) ? _2248 : (isnan(_2248) ? 0.0 : max(_2248, 0.0));
    float _2251 = isnan(1.0) ? _4513 : (isnan(_4513) ? 1.0 : min(_4513, 1.0));
    float _2252 = dot(vec3(cbLight._m0[_2082].xyz), vec3(_2240, _2241, _2242));
    float _4524 = isnan(0.0) ? _2252 : (isnan(_2252) ? 0.0 : max(_2252, 0.0));
    float _2256 = _2232 * _2232;
    float _2260 = ((_2251 * _2251) * (_2256 + (-1.0))) + 1.0;
    float _2268 = exp2(log2(1.0 - (isnan(1.0) ? _4524 : (isnan(_4524) ? 1.0 : min(_4524, 1.0)))) * 5.0);
    float _2269 = 0.959999978542327880859375 - _1001;
    float _2271 = 0.959999978542327880859375 - _1002;
    float _2272 = 0.959999978542327880859375 - _1003;
    float _2279 = 1.0 - _2232;
    float _2290 = (0.5 / (((_2247 * ((_2246 * _2279) + _2232)) + 9.9999999392252902907785028219223e-09) + (((_2247 * _2279) + _2232) * _2246))) * _2246;
    float _4535 = isnan(0.0) ? _2290 : (isnan(_2290) ? 0.0 : max(_2290, 0.0));
    float _2292 = (isnan(1.0) ? _4535 : (isnan(_4535) ? 1.0 : min(_4535, 1.0))) * (_2256 / ((_2260 * _2260) * 3.141590118408203125));
    uint _2303 = _2082 + 9u;
    float _2314 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2119].w)) * _886) * 0.949999988079071044921875);
    float _2315 = _2314 * _2314;
    float _2316 = cbLight._m0[_2119].x + _659;
    float _2317 = cbLight._m0[_2119].y + _660;
    float _2318 = cbLight._m0[_2119].z + _661;
    float _2322 = inversesqrt(dot(vec3(_2316, _2317, _2318), vec3(_2316, _2317, _2318)));
    float _2323 = _2322 * _2316;
    float _2324 = _2322 * _2317;
    float _2325 = _2322 * _2318;
    float _2326 = dot(vec3(_633, _634, _635), vec3(cbLight._m0[_2119].xyz));
    float _4546 = isnan(0.0) ? _2326 : (isnan(_2326) ? 0.0 : max(_2326, 0.0));
    float _2329 = isnan(1.0) ? _4546 : (isnan(_4546) ? 1.0 : min(_4546, 1.0));
    float _2330 = dot(vec3(_633, _634, _635), vec3(_2323, _2324, _2325));
    float _4557 = isnan(0.0) ? _2330 : (isnan(_2330) ? 0.0 : max(_2330, 0.0));
    float _2333 = isnan(1.0) ? _4557 : (isnan(_4557) ? 1.0 : min(_4557, 1.0));
    float _2334 = dot(vec3(cbLight._m0[_2119].xyz), vec3(_2323, _2324, _2325));
    float _4568 = isnan(0.0) ? _2334 : (isnan(_2334) ? 0.0 : max(_2334, 0.0));
    float _2338 = _2315 * _2315;
    float _2342 = ((_2333 * _2333) * (_2338 + (-1.0))) + 1.0;
    float _2349 = exp2(log2(1.0 - (isnan(1.0) ? _4568 : (isnan(_4568) ? 1.0 : min(_4568, 1.0)))) * 5.0);
    float _2356 = 1.0 - _2315;
    float _2366 = (0.5 / (((_2247 * ((_2329 * _2356) + _2315)) + 9.9999999392252902907785028219223e-09) + (((_2247 * _2356) + _2315) * _2329))) * _2329;
    float _4579 = isnan(0.0) ? _2366 : (isnan(_2366) ? 0.0 : max(_2366, 0.0));
    float _2368 = (isnan(1.0) ? _4579 : (isnan(_4579) ? 1.0 : min(_4579, 1.0))) * (_2338 / ((_2342 * _2342) * 3.141590118408203125));
    float _2378 = (((((_2349 * _2269) + _1004) * cbLight._m0[_2303].x) * _2368) * _2105) + (((((_2268 * _2269) + _1004) * cbLight._m0[_2218].x) * _2292) * _2115);
    float _2379 = (((((_2349 * _2271) + _1005) * cbLight._m0[_2303].y) * _2368) * _2105) + (((((_2268 * _2271) + _1005) * cbLight._m0[_2218].y) * _2292) * _2115);
    float _2380 = (((((_2349 * _2272) + _1006) * cbLight._m0[_2303].z) * _2368) * _2105) + (((((_2268 * _2272) + _1006) * cbLight._m0[_2218].z) * _2292) * _2115);
    float _2442;
    float _2444;
    float _2446;
    if (_2155)
    {
        _2442 = _2378;
        _2444 = _2379;
        _2446 = _2380;
    }
    else
    {
        uint _2448 = _2082 + 2u;
        uint _2452 = _2082 + 10u;
        float _2466 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2448].w)) * _886) * 0.949999988079071044921875);
        float _2467 = _2466 * _2466;
        float _2468 = cbLight._m0[_2448].x + _659;
        float _2469 = cbLight._m0[_2448].y + _660;
        float _2470 = cbLight._m0[_2448].z + _661;
        float _2474 = inversesqrt(dot(vec3(_2468, _2469, _2470), vec3(_2468, _2469, _2470)));
        float _2475 = _2474 * _2468;
        float _2476 = _2474 * _2469;
        float _2477 = _2474 * _2470;
        float _2478 = dot(vec3(_633, _634, _635), vec3(cbLight._m0[_2448].xyz));
        float _4590 = isnan(0.0) ? _2478 : (isnan(_2478) ? 0.0 : max(_2478, 0.0));
        float _2481 = isnan(1.0) ? _4590 : (isnan(_4590) ? 1.0 : min(_4590, 1.0));
        float _2482 = dot(vec3(_633, _634, _635), vec3(_2475, _2476, _2477));
        float _4601 = isnan(0.0) ? _2482 : (isnan(_2482) ? 0.0 : max(_2482, 0.0));
        float _2485 = isnan(1.0) ? _4601 : (isnan(_4601) ? 1.0 : min(_4601, 1.0));
        float _2486 = dot(vec3(cbLight._m0[_2448].xyz), vec3(_2475, _2476, _2477));
        float _4612 = isnan(0.0) ? _2486 : (isnan(_2486) ? 0.0 : max(_2486, 0.0));
        float _2490 = _2467 * _2467;
        float _2494 = ((_2485 * _2485) * (_2490 + (-1.0))) + 1.0;
        float _2501 = exp2(log2(1.0 - (isnan(1.0) ? _4612 : (isnan(_4612) ? 1.0 : min(_4612, 1.0)))) * 5.0);
        float _2508 = 1.0 - _2467;
        float _2518 = (0.5 / (((_2247 * ((_2481 * _2508) + _2467)) + 9.9999999392252902907785028219223e-09) + (((_2247 * _2508) + _2467) * _2481))) * _2481;
        float _4623 = isnan(0.0) ? _2518 : (isnan(_2518) ? 0.0 : max(_2518, 0.0));
        float _2520 = (isnan(1.0) ? _4623 : (isnan(_4623) ? 1.0 : min(_4623, 1.0))) * (_2490 / ((_2494 * _2494) * 3.141590118408203125));
        float _2521 = isnan(1.0) ? _2097 : (isnan(_2097) ? 1.0 : min(_2097, 1.0));
        _2442 = (((((_2501 * _2269) + _1004) * cbLight._m0[_2452].x) * _2520) * _2521) + _2378;
        _2444 = (((((_2501 * _2271) + _1005) * cbLight._m0[_2452].y) * _2520) * _2521) + _2379;
        _2446 = (((((_2501 * _2272) + _1006) * cbLight._m0[_2452].z) * _2520) * _2521) + _2380;
    }
    float _2556;
    float _2558;
    float _2560;
    if (_2173)
    {
        _2556 = _2442;
        _2558 = _2444;
        _2560 = _2446;
    }
    else
    {
        uint _2567 = _2082 + 3u;
        uint _2571 = _2082 + 11u;
        float _2585 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2567].w)) * _886) * 0.949999988079071044921875);
        float _2586 = _2585 * _2585;
        float _2587 = cbLight._m0[_2567].x + _659;
        float _2588 = cbLight._m0[_2567].y + _660;
        float _2589 = cbLight._m0[_2567].z + _661;
        float _2593 = inversesqrt(dot(vec3(_2587, _2588, _2589), vec3(_2587, _2588, _2589)));
        float _2594 = _2593 * _2587;
        float _2595 = _2593 * _2588;
        float _2596 = _2593 * _2589;
        float _2597 = dot(vec3(_633, _634, _635), vec3(cbLight._m0[_2567].xyz));
        float _4639 = isnan(0.0) ? _2597 : (isnan(_2597) ? 0.0 : max(_2597, 0.0));
        float _2600 = isnan(1.0) ? _4639 : (isnan(_4639) ? 1.0 : min(_4639, 1.0));
        float _2601 = dot(vec3(_633, _634, _635), vec3(_2594, _2595, _2596));
        float _4650 = isnan(0.0) ? _2601 : (isnan(_2601) ? 0.0 : max(_2601, 0.0));
        float _2604 = isnan(1.0) ? _4650 : (isnan(_4650) ? 1.0 : min(_4650, 1.0));
        float _2605 = dot(vec3(cbLight._m0[_2567].xyz), vec3(_2594, _2595, _2596));
        float _4661 = isnan(0.0) ? _2605 : (isnan(_2605) ? 0.0 : max(_2605, 0.0));
        float _2609 = _2586 * _2586;
        float _2613 = ((_2604 * _2604) * (_2609 + (-1.0))) + 1.0;
        float _2620 = exp2(log2(1.0 - (isnan(1.0) ? _4661 : (isnan(_4661) ? 1.0 : min(_4661, 1.0)))) * 5.0);
        float _2627 = 1.0 - _2586;
        float _2637 = (0.5 / (((_2247 * ((_2600 * _2627) + _2586)) + 9.9999999392252902907785028219223e-09) + (((_2247 * _2627) + _2586) * _2600))) * _2600;
        float _4672 = isnan(0.0) ? _2637 : (isnan(_2637) ? 0.0 : max(_2637, 0.0));
        float _2639 = (isnan(1.0) ? _4672 : (isnan(_4672) ? 1.0 : min(_4672, 1.0))) * (_2609 / ((_2613 * _2613) * 3.141590118408203125));
        float _2640 = isnan(1.0) ? _2098 : (isnan(_2098) ? 1.0 : min(_2098, 1.0));
        _2556 = (((((_2620 * _2269) + _1004) * cbLight._m0[_2571].x) * _2639) * _2640) + _2442;
        _2558 = (((((_2620 * _2271) + _1005) * cbLight._m0[_2571].y) * _2639) * _2640) + _2444;
        _2560 = (((((_2620 * _2272) + _1006) * cbLight._m0[_2571].z) * _2639) * _2640) + _2446;
    }
    float _2774;
    float _2776;
    float _2778;
    float _2780;
    float _2782;
    float _2784;
    if (_2080.y == 0u)
    {
        float _2715 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2716 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2715;
        float _2717 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2715;
        float _2718 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2715;
        uvec4 _2730 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2731 = _2730.x;
        uint _2742 = uint((float(_2730.y) * floor(float(uint(cbSceneParam._m0[85u].y * _809) / _2731))) + floor(float(uint(cbSceneParam._m0[85u].x * _808) / _2731)));
        float _2752 = (log2(_2718 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2753 = isnan(0.0) ? _2752 : (isnan(_2752) ? 0.0 : max(_2752, 0.0));
        uint _2756 = uint(isnan(14.0) ? _2753 : (isnan(_2753) ? 14.0 : min(_2753, 14.0)));
        uvec4 _2761 = texelFetch(g_lightClusterGridBuffer, int(((_2756 << 2u) + (_2742 << 6u)) >> 2u));
        uint _2762 = _2761.x;
        uint _2763 = _2730.z;
        float _2898;
        float _2900;
        float _2902;
        float _2904;
        float _2906;
        float _2908;
        if (((((1u << ((_2763 >> 4u) & 15u)) + 4294967295u) & _2762) == 0u) || ((_2763 & 240u) == 0u))
        {
            _2898 = 0.0;
            _2900 = 0.0;
            _2902 = 0.0;
            _2904 = 0.0;
            _2906 = 0.0;
            _2908 = 0.0;
        }
        else
        {
            float _2899;
            float _2901;
            float _2903;
            float _2905;
            float _2907;
            float _2909;
            float _3059 = 0.0;
            float _3060 = 0.0;
            float _3061 = 0.0;
            float _3062 = 0.0;
            float _3063 = 0.0;
            float _3064 = 0.0;
            uint _3065 = 0u;
            uint _3074;
            bool _3075;
            for (;;)
            {
                _3074 = texelFetch(g_lightClassification, int((((_2756 << 5u) + (_2742 << 9u)) + (_3065 << 2u)) >> 2u)).x;
                _3075 = _3074 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_3075)
                {
                    frontier_phi_68_pred = _3061;
                    frontier_phi_68_pred_1 = _3064;
                    frontier_phi_68_pred_2 = _3063;
                    frontier_phi_68_pred_3 = _3062;
                    frontier_phi_68_pred_4 = _3060;
                    frontier_phi_68_pred_5 = _3059;
                }
                else
                {
                    float _3204;
                    float _3205;
                    float _3206;
                    float _3207;
                    float _3208;
                    float _3209;
                    uint _3210;
                    _3204 = _3059;
                    _3205 = _3060;
                    _3206 = _3061;
                    _3207 = _3062;
                    _3208 = _3063;
                    _3209 = _3064;
                    _3210 = _3074;
                    float _3131;
                    float _3132;
                    float _3133;
                    float _3134;
                    float _3135;
                    float _3136;
                    for (;;)
                    {
                        uint _3214 = uint(findLSB(_3210)) + (_3065 << 5u);
                        uint _3211 = (_3210 + 4294967295u) & _3210;
                        uint _3216 = _3214 * 48u;
                        vec4 _3230 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3216)).x, texelFetch(g_PointLightRenderingBuffer, int(_3216 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3216 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3216 + 3u)).x));
                        uint _3236 = (_3214 * 48u) + 4u;
                        vec4 _3249 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3236)).x, texelFetch(g_PointLightRenderingBuffer, int(_3236 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3236 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3236 + 3u)).x));
                        uint _3255 = (_3214 * 48u) + 8u;
                        vec3 _3266 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3255)).x, texelFetch(g_PointLightRenderingBuffer, int(_3255 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3255 + 2u)).x));
                        float _3270 = _3230.x - _2716;
                        float _3271 = _3230.y - _2717;
                        float _3272 = _3230.z - _2718;
                        float _3273 = dot(vec3(_3270, _3271, _3272), vec3(_3270, _3271, _3272));
                        float _3276 = inversesqrt(_3273);
                        float _3277 = _3276 * _3270;
                        float _3278 = _3276 * _3271;
                        float _3279 = _3276 * _3272;
                        float _3280 = dot(vec3(_831, _834, _837), vec3(_3277, _3278, _3279));
                        float _3285 = 1.0 - (_3273 * _3230.w);
                        float _4698 = isnan(0.0) ? _3285 : (isnan(_3285) ? 0.0 : max(_3285, 0.0));
                        float _3286 = isnan(1.0) ? _4698 : (isnan(_4698) ? 1.0 : min(_4698, 1.0));
                        float _3287 = sqrt(_3273) * _3249.w;
                        float _3290 = 1.39999997615814208984375 / (_3287 + 1.39999997615814208984375);
                        float _3291 = _3290 * _3290;
                        float _3294 = ((1.0 - _3291) * _3280) + _3291;
                        float _3297 = _3287 * _3287;
                        float _3300 = ((isnan(0.0) ? _3294 : (isnan(_3294) ? 0.0 : max(_3294, 0.0))) * _3286) / ((_3297 * 0.699999988079071044921875) + 1.0);
                        float _3304 = (-0.0) - _2716;
                        float _3305 = (-0.0) - _2717;
                        float _3306 = (-0.0) - _2718;
                        float _3310 = inversesqrt(dot(vec3(_3304, _3305, _3306), vec3(_3304, _3305, _3306)));
                        float _3311 = _3310 * _3304;
                        float _3312 = _3310 * _3305;
                        float _3313 = _3310 * _3306;
                        float _3321 = exp2(log2(1.0 / ((_3297 * 3.5) + 5.0)) * 0.25);
                        float _3322 = 1.0 - _1028;
                        float _3329 = sqrt(1.0 - ((1.0 - (_3322 * _3322)) * (1.0 - (_3321 * _3321))));
                        float _3330 = _3329 * _3329;
                        float _3331 = _3330 * _3330;
                        float _3332 = _3311 + _3277;
                        float _3333 = _3312 + _3278;
                        float _3334 = _3313 + _3279;
                        float _3338 = inversesqrt(dot(vec3(_3332, _3333, _3334), vec3(_3332, _3333, _3334)));
                        float _3342 = dot(vec3(_831, _834, _837), vec3(_3311, _3312, _3313));
                        float _4714 = isnan(0.0) ? _3342 : (isnan(_3342) ? 0.0 : max(_3342, 0.0));
                        float _3345 = isnan(1.0) ? _4714 : (isnan(_4714) ? 1.0 : min(_4714, 1.0));
                        float _3346 = dot(vec3(_831, _834, _837), vec3(_3338 * _3332, _3338 * _3333, _3338 * _3334));
                        float _4725 = isnan(0.0) ? _3346 : (isnan(_3346) ? 0.0 : max(_3346, 0.0));
                        float _3349 = isnan(1.0) ? _4725 : (isnan(_4725) ? 1.0 : min(_4725, 1.0));
                        float _3353 = ((_3349 * _3349) * (_3331 + (-1.0))) + 1.0;
                        float _3354 = _3290 * _3330;
                        float _3355 = _3354 * _3354;
                        float _3358 = ((1.0 - _3355) * _3280) + _3355;
                        float _4736 = isnan(0.0) ? _3358 : (isnan(_3358) ? 0.0 : max(_3358, 0.0));
                        float _3359 = isnan(1.0) ? _4736 : (isnan(_4736) ? 1.0 : min(_4736, 1.0));
                        float _3360 = 1.0 - _3330;
                        float _3370 = (0.5 / (((_3359 * ((_3345 * _3360) + _3330)) + 9.9999999392252902907785028219223e-09) + (((_3359 * _3360) + _3330) * _3345))) * _3359;
                        float _4747 = isnan(0.0) ? _3370 : (isnan(_3370) ? 0.0 : max(_3370, 0.0));
                        float _3381 = (((_3331 * 3.1415927410125732421875) * (isnan(1.0) ? _4747 : (isnan(_4747) ? 1.0 : min(_4747, 1.0)))) / ((_3353 * _3353) * ((_3297 * 2.1991131305694580078125) + 3.141590118408203125))) * _3286;
                        _3134 = (_3300 * _3249.x) + _3207;
                        _3135 = (_3300 * _3249.y) + _3208;
                        _3136 = (_3300 * _3249.z) + _3209;
                        _3131 = (_3381 * _3266.x) + _3204;
                        _3132 = (_3381 * _3266.y) + _3205;
                        _3133 = (_3381 * _3266.z) + _3206;
                        if (_3211 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3204 = _3131;
                            _3205 = _3132;
                            _3206 = _3133;
                            _3207 = _3134;
                            _3208 = _3135;
                            _3209 = _3136;
                            _3210 = _3211;
                        }
                    }
                    frontier_phi_68_pred = _3133;
                    frontier_phi_68_pred_1 = _3136;
                    frontier_phi_68_pred_2 = _3135;
                    frontier_phi_68_pred_3 = _3134;
                    frontier_phi_68_pred_4 = _3132;
                    frontier_phi_68_pred_5 = _3131;
                }
                _2903 = frontier_phi_68_pred;
                _2909 = frontier_phi_68_pred_1;
                _2907 = frontier_phi_68_pred_2;
                _2905 = frontier_phi_68_pred_3;
                _2901 = frontier_phi_68_pred_4;
                _2899 = frontier_phi_68_pred_5;
                uint _3066 = _3065 + 1u;
                if (_3066 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3059 = _2899;
                    _3060 = _2901;
                    _3061 = _2903;
                    _3062 = _2905;
                    _3063 = _2907;
                    _3064 = _2909;
                    _3065 = _3066;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2898 = _2899;
            _2900 = _2901;
            _2902 = _2903;
            _2904 = _2905;
            _2906 = _2907;
            _2908 = _2909;
        }
        uvec4 _2912 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2913 = _2912.z;
        uint _2915 = (_2913 >> 8u) & 15u;
        float _3027;
        float _3029;
        float _3031;
        float _3033;
        float _3035;
        float _3037;
        if (((4294967295u << _2915) & _2762) == 0u)
        {
            _3027 = _2898;
            _3029 = _2900;
            _3031 = _2902;
            _3033 = _2904;
            _3035 = _2906;
            _3037 = _2908;
        }
        else
        {
            float _3052 = inversesqrt(dot(vec3(_2716, _2717, _2718), vec3(_2716, _2717, _2718)));
            float _3053 = _3052 * _2716;
            float _3054 = _3052 * _2717;
            float _3055 = _3052 * _2718;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2915 < ((_2913 >> 12u) & 15u))
            {
                float _3028;
                float _3030;
                float _3032;
                float _3034;
                float _3036;
                float _3038;
                float _3187 = _2898;
                float _3188 = _2900;
                float _3189 = _2902;
                float _3190 = _2904;
                float _3191 = _2906;
                float _3192 = _2908;
                uint _3193 = _2915;
                uint _3202;
                bool _3203;
                for (;;)
                {
                    _3202 = texelFetch(g_lightClassification, int((((_2756 << 5u) + (_2742 << 9u)) + (_3193 << 2u)) >> 2u)).x;
                    _3203 = _3202 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_3203)
                    {
                        frontier_phi_79_pred = _3192;
                        frontier_phi_79_pred_1 = _3191;
                        frontier_phi_79_pred_2 = _3190;
                        frontier_phi_79_pred_3 = _3189;
                        frontier_phi_79_pred_4 = _3188;
                        frontier_phi_79_pred_5 = _3187;
                    }
                    else
                    {
                        float _3395;
                        float _3396;
                        float _3397;
                        float _3398;
                        float _3399;
                        float _3400;
                        float _3690;
                        float _3691;
                        float _3692;
                        float _3693;
                        float _3694;
                        float _3695;
                        float _3408 = _3187;
                        float _3409 = _3188;
                        float _3410 = _3189;
                        float _3411 = _3190;
                        float _3412 = _3191;
                        float _3413 = _3192;
                        uint _3414 = _3202;
                        uint _3415;
                        vec4 _3440;
                        float _3441;
                        vec4 _3456;
                        vec3 _3468;
                        vec4 _3483;
                        vec4 _3499;
                        float _3546;
                        bool _3547;
                        for (;;)
                        {
                            uint _3425 = ((_3193 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3414));
                            _3415 = (_3414 + 4294967295u) & _3414;
                            uint _3427 = _3425 * 40u;
                            _3440 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3427)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3427 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3427 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3427 + 3u)).x));
                            _3441 = _3440.w;
                            uint _3443 = (_3425 * 40u) + 4u;
                            _3456 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3443)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3443 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3443 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3443 + 3u)).x));
                            uint _3458 = (_3425 * 40u) + 8u;
                            _3468 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3458)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3458 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3458 + 2u)).x));
                            uint _3470 = (_3425 * 40u) + 16u;
                            _3483 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3470)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3470 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3470 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3470 + 3u)).x));
                            uint _3486 = (_3425 * 40u) + 20u;
                            _3499 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3486)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3486 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3486 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3486 + 3u)).x));
                            uint _3502 = (_3425 * 40u) + 24u;
                            vec4 _3515 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3502)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3502 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3502 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3502 + 3u)).x));
                            uint _3521 = (_3425 * 40u) + 28u;
                            vec4 _3534 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3521)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3521 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3521 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3521 + 3u)).x));
                            _3546 = fma(_2718, _3534.z, fma(_2717, _3534.y, _3534.x * _2716)) + _3534.w;
                            _3547 = !((fma(_2718, _3515.z, fma(_2717, _3515.y, _3515.x * _2716)) + _3515.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_3547)
                            {
                                float _3574 = _3440.x - _2716;
                                float _3575 = _3440.y - _2717;
                                float _3576 = _3440.z - _2718;
                                float _3577 = dot(vec3(_3574, _3575, _3576), vec3(_3574, _3575, _3576));
                                float _3580 = inversesqrt(_3577);
                                float _3581 = _3580 * _3574;
                                float _3582 = _3580 * _3575;
                                float _3583 = _3580 * _3576;
                                float _3587 = 1.0 - (_3577 / (_3441 * _3441));
                                float _4758 = isnan(0.0) ? _3587 : (isnan(_3587) ? 0.0 : max(_3587, 0.0));
                                float _3588 = isnan(1.0) ? _4758 : (isnan(_4758) ? 1.0 : min(_4758, 1.0));
                                float _3592 = sqrt(_3577) * _3456.w;
                                float _3594 = 1.39999997615814208984375 / (_3592 + 1.39999997615814208984375);
                                float _3595 = _3594 * _3594;
                                float _3598 = ((1.0 - _3595) * dot(vec3(_3581, _3582, _3583), vec3(_831, _834, _837))) + _3595;
                                float _3601 = _3592 * _3592;
                                float _3605 = (fma(_2718, _3483.z, fma(_2717, _3483.y, _3483.x * _2716)) + _3483.w) / _3546;
                                float _3606 = (fma(_2718, _3499.z, fma(_2717, _3499.y, _3499.x * _2716)) + _3499.w) / _3546;
                                float _3610 = 1.0 - dot(vec2(_3605, _3606), vec2(_3605, _3606));
                                float _4774 = isnan(0.0) ? _3610 : (isnan(_3610) ? 0.0 : max(_3610, 0.0));
                                float _3611 = isnan(1.0) ? _4774 : (isnan(_4774) ? 1.0 : min(_4774, 1.0));
                                float _3612 = _3611 * (((isnan(0.0) ? _3598 : (isnan(_3598) ? 0.0 : max(_3598, 0.0))) * _3588) / ((_3601 * 0.699999988079071044921875) + 1.0));
                                float _3624 = exp2(log2(1.0 / ((_3601 * 3.5) + 5.0)) * 0.25);
                                float _3625 = 1.0 - _1028;
                                float _3632 = sqrt(1.0 - ((1.0 - (_3625 * _3625)) * (1.0 - (_3624 * _3624))));
                                float _3633 = _3632 * _3632;
                                float _3634 = _3633 * _3633;
                                float _3635 = _3581 - _3053;
                                float _3636 = _3582 - _3054;
                                float _3637 = _3583 - _3055;
                                float _3641 = inversesqrt(dot(vec3(_3635, _3636, _3637), vec3(_3635, _3636, _3637)));
                                float _3645 = dot(vec3(_831, _834, _837), vec3((-0.0) - _3053, (-0.0) - _3054, (-0.0) - _3055));
                                float _4785 = isnan(0.0) ? _3645 : (isnan(_3645) ? 0.0 : max(_3645, 0.0));
                                float _3648 = isnan(1.0) ? _4785 : (isnan(_4785) ? 1.0 : min(_4785, 1.0));
                                float _3649 = dot(vec3(_831, _834, _837), vec3(_3641 * _3635, _3641 * _3636, _3641 * _3637));
                                float _4796 = isnan(0.0) ? _3649 : (isnan(_3649) ? 0.0 : max(_3649, 0.0));
                                float _3652 = isnan(1.0) ? _4796 : (isnan(_4796) ? 1.0 : min(_4796, 1.0));
                                float _3656 = ((_3652 * _3652) * (_3634 + (-1.0))) + 1.0;
                                float _3657 = _3594 * _3633;
                                float _3658 = _3657 * _3657;
                                float _3664 = ((1.0 - _3658) * dot(vec3(_831, _834, _837), vec3(_3581, _3582, _3583))) + _3658;
                                float _4807 = isnan(0.0) ? _3664 : (isnan(_3664) ? 0.0 : max(_3664, 0.0));
                                float _3665 = isnan(1.0) ? _4807 : (isnan(_4807) ? 1.0 : min(_4807, 1.0));
                                float _3666 = 1.0 - _3633;
                                float _3676 = (0.5 / (((_3665 * ((_3648 * _3666) + _3633)) + 9.9999999392252902907785028219223e-09) + (((_3665 * _3666) + _3633) * _3648))) * _3665;
                                float _4818 = isnan(0.0) ? _3676 : (isnan(_3676) ? 0.0 : max(_3676, 0.0));
                                float _3686 = (_3611 * _3588) * (((_3634 * 3.1415927410125732421875) * (isnan(1.0) ? _4818 : (isnan(_4818) ? 1.0 : min(_4818, 1.0)))) / ((_3656 * _3656) * ((_3601 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3612 * _3456.z;
                                frontier_phi_85_pred_1 = _3612 * _3456.y;
                                frontier_phi_85_pred_2 = _3612 * _3456.x;
                                frontier_phi_85_pred_3 = _3686 * _3468.z;
                                frontier_phi_85_pred_4 = _3686 * _3468.y;
                                frontier_phi_85_pred_5 = _3686 * _3468.x;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3695 = frontier_phi_85_pred;
                            _3694 = frontier_phi_85_pred_1;
                            _3693 = frontier_phi_85_pred_2;
                            _3692 = frontier_phi_85_pred_3;
                            _3691 = frontier_phi_85_pred_4;
                            _3690 = frontier_phi_85_pred_5;
                            _3398 = _3693 + _3411;
                            _3399 = _3694 + _3412;
                            _3400 = _3695 + _3413;
                            _3395 = _3690 + _3408;
                            _3396 = _3691 + _3409;
                            _3397 = _3692 + _3410;
                            if (_3415 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3408 = _3395;
                                _3409 = _3396;
                                _3410 = _3397;
                                _3411 = _3398;
                                _3412 = _3399;
                                _3413 = _3400;
                                _3414 = _3415;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _3400;
                        frontier_phi_79_pred_1 = _3399;
                        frontier_phi_79_pred_2 = _3398;
                        frontier_phi_79_pred_3 = _3397;
                        frontier_phi_79_pred_4 = _3396;
                        frontier_phi_79_pred_5 = _3395;
                    }
                    _3038 = frontier_phi_79_pred;
                    _3036 = frontier_phi_79_pred_1;
                    _3034 = frontier_phi_79_pred_2;
                    _3032 = frontier_phi_79_pred_3;
                    _3030 = frontier_phi_79_pred_4;
                    _3028 = frontier_phi_79_pred_5;
                    uint _3194 = _3193 + 1u;
                    if (_3194 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3187 = _3028;
                        _3188 = _3030;
                        _3189 = _3032;
                        _3190 = _3034;
                        _3191 = _3036;
                        _3192 = _3038;
                        _3193 = _3194;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3034;
                frontier_phi_60_61_ladder_1 = _3038;
                frontier_phi_60_61_ladder_2 = _3036;
                frontier_phi_60_61_ladder_3 = _3032;
                frontier_phi_60_61_ladder_4 = _3030;
                frontier_phi_60_61_ladder_5 = _3028;
            }
            else
            {
                frontier_phi_60_61_ladder = _2904;
                frontier_phi_60_61_ladder_1 = _2908;
                frontier_phi_60_61_ladder_2 = _2906;
                frontier_phi_60_61_ladder_3 = _2902;
                frontier_phi_60_61_ladder_4 = _2900;
                frontier_phi_60_61_ladder_5 = _2898;
            }
            _3027 = frontier_phi_60_61_ladder_5;
            _3029 = frontier_phi_60_61_ladder_4;
            _3031 = frontier_phi_60_61_ladder_3;
            _3033 = frontier_phi_60_61_ladder;
            _3035 = frontier_phi_60_61_ladder_2;
            _3037 = frontier_phi_60_61_ladder_1;
        }
        float _3042 = isnan(1.0) ? _1018 : (isnan(_1018) ? 1.0 : min(_1018, 1.0));
        _2774 = (_3042 * _3033) + _2211;
        _2776 = (_3042 * _3035) + _2213;
        _2778 = (_3042 * _3037) + _2215;
        _2780 = ((_3027 * _1004) * _3042) + _2556;
        _2782 = ((_3029 * _1005) * _3042) + _2558;
        _2784 = ((_3031 * _1006) * _3042) + _2560;
    }
    else
    {
        _2774 = _2211;
        _2776 = _2213;
        _2778 = _2215;
        _2780 = _2556;
        _2782 = _2558;
        _2784 = _2560;
    }
    uint _2790 = _911 + uint(cbMatDynParam._m0[0u].w);
    float _2796 = cbInstanceData._m0[_2790].x * (((((cbMatDynParam._m0[8u].x - cbMatDynParam._m0[7u].x) * _675) + cbMatDynParam._m0[7u].x) + (((((cbMtdParam._m0[12u].x * cbMtdParam._m0[16u].z) * cbMtdParam._m0[15u].w) * _571) * _584.x) * _704)) + (((_733 - (_733 * _641)) + (cbMatDynParam._m0[11u].x * _764)) * cbMatDynParam._m0[9u].x));
    float _2797 = cbInstanceData._m0[_2790].y * (((((cbMatDynParam._m0[8u].y - cbMatDynParam._m0[7u].y) * _675) + cbMatDynParam._m0[7u].y) + (((((cbMtdParam._m0[12u].y * cbMtdParam._m0[16u].z) * cbMtdParam._m0[15u].w) * _571) * _584.y) * _704)) + (((_735 - (_735 * _641)) + (cbMatDynParam._m0[11u].y * _764)) * cbMatDynParam._m0[9u].y));
    float _2798 = cbInstanceData._m0[_2790].z * (((((cbMatDynParam._m0[8u].z - cbMatDynParam._m0[7u].z) * _675) + cbMatDynParam._m0[7u].z) + (((((cbMtdParam._m0[12u].z * cbMtdParam._m0[16u].z) * cbMtdParam._m0[15u].w) * _571) * _584.z) * _704)) + (((_737 - (_737 * _641)) + (cbMatDynParam._m0[11u].z * _764)) * cbMatDynParam._m0[9u].z));
    float _4834 = isnan(0.0) ? _995 : (isnan(_995) ? 0.0 : max(_995, 0.0));
    float _4845 = isnan(0.0) ? _996 : (isnan(_996) ? 0.0 : max(_996, 0.0));
    float _4856 = isnan(0.0) ? _997 : (isnan(_997) ? 0.0 : max(_997, 0.0));
    float _4867 = isnan(0.0) ? _636 : (isnan(_636) ? 0.0 : max(_636, 0.0));
    float _2816 = (((isnan(1.0) ? _4834 : (isnan(_4834) ? 1.0 : min(_4834, 1.0))) * (_2774 + ((isnan(0.0) ? _1773 : (isnan(_1773) ? 0.0 : max(_1773, 0.0))) * _1018))) + ((_2780 + ((isnan(0.0) ? _2064 : (isnan(_2064) ? 0.0 : max(_2064, 0.0))) * _1849)) * cbPerFrame._m0[3u].x)) + _2796;
    float _2818 = (_2797 + ((_2782 + ((isnan(0.0) ? _2067 : (isnan(_2067) ? 0.0 : max(_2067, 0.0))) * _1849)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4845 : (isnan(_4845) ? 1.0 : min(_4845, 1.0))) * (_2776 + ((isnan(0.0) ? _1776 : (isnan(_1776) ? 0.0 : max(_1776, 0.0))) * _1018)));
    float _2820 = (_2798 + ((_2784 + ((isnan(0.0) ? _2070 : (isnan(_2070) ? 0.0 : max(_2070, 0.0))) * _1849)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4856 : (isnan(_4856) ? 1.0 : min(_4856, 1.0))) * (_2778 + ((isnan(0.0) ? _1779 : (isnan(_1779) ? 0.0 : max(_1779, 0.0))) * _1018)));
    float _2821 = isnan(0.0) ? _2816 : (isnan(_2816) ? 0.0 : max(_2816, 0.0));
    float _2822 = isnan(0.0) ? _2818 : (isnan(_2818) ? 0.0 : max(_2818, 0.0));
    float _2823 = isnan(0.0) ? _2820 : (isnan(_2820) ? 0.0 : max(_2820, 0.0));
    float _2829 = cbMtdParam._m0[2u].x * _2796;
    float _2830 = cbMtdParam._m0[2u].y * _2797;
    float _2831 = cbMtdParam._m0[2u].z * _2798;
    float _2838 = ((cbMtdParam._m0[2u].w - cbMatDynParam._m0[12u].y) * _704) + cbMatDynParam._m0[12u].y;
    float _2843 = cbInstanceData._m0[_910 + 6u].w * (isnan(1.0) ? _4867 : (isnan(_4867) ? 1.0 : min(_4867, 1.0)));
    float _2848 = _808 / cbSceneParam._m0[86u].x;
    float _2849 = _809 / cbSceneParam._m0[86u].y;
    vec4 _2863 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2848, _2849, (log2((isnan(cbSceneParam._m0[77u].w) ? _790 : (isnan(_790) ? cbSceneParam._m0[77u].w : min(_790, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2865 = _2863.x;
    float _2866 = _2863.y;
    float _2867 = _2863.z;
    float _2868 = _2863.w;
    float _2960;
    float _2962;
    float _2964;
    float _2966;
    if (_790 > cbSceneParam._m0[78u].w)
    {
        float _2923 = isnan(_790) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _790 : min(cbSceneParam._m0[80u].w, _790));
        float _2924 = _2923 / _790;
        float _2935 = _2924 * _297;
        float _2936 = _298 * _2924;
        float _2937 = (-0.0) - _2936;
        float _2938 = _2924 * _299;
        float _2940 = (cbSceneParam._m0[77u].w * _2937) / _2923;
        float _2941 = _2940 + cbSceneParam._m0[79u].w;
        float _2942 = cbSceneParam._m0[79u].w - _2936;
        float _2948 = sqrt(((_2935 * _2935) + (_2936 * _2936)) + (_2938 * _2938));
        float _2951 = (1.0 - (cbSceneParam._m0[77u].w / _2923)) * _2948;
        float _2956 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2958 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3144;
        if (abs((_2937 - _2940) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3144 = ((((_2941 > 0.0) ? exp2(_2956 * _2941) : (2.0 - exp2(_2958 * _2941))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2951;
        }
        else
        {
            float _3088 = 1.0 / cbSceneParam._m0[80u].x;
            float _3089 = isnan(_2942) ? _2941 : (isnan(_2941) ? _2942 : max(_2941, _2942));
            float _3090 = isnan(_2942) ? _2941 : (isnan(_2941) ? _2942 : min(_2941, _2942));
            float _3099 = isnan(0.0) ? _3089 : (isnan(_3089) ? 0.0 : min(_3089, 0.0));
            float _3100 = isnan(0.0) ? _3090 : (isnan(_3090) ? 0.0 : min(_3090, 0.0));
            _3144 = ((abs(_2948 / _2937) * cbSceneParam._m0[80u].y) * ((((_3099 - _3100) * 2.0) - ((exp2(_2956 * (isnan(0.0) ? _3089 : (isnan(_3089) ? 0.0 : max(_3089, 0.0)))) - exp2(_2956 * (isnan(0.0) ? _3090 : (isnan(_3090) ? 0.0 : max(_3090, 0.0))))) * _3088)) - ((exp2(_2958 * _3099) - exp2(_2958 * _3100)) * _3088))) + (_2951 * cbSceneParam._m0[80u].z);
        }
        vec4 _3146 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2848, _2849, 1.0), 0.0);
        float _3155 = exp2((_3144 * (-1.44269502162933349609375)) * (1.0 - _3146.w));
        float _3156 = log2(_3155);
        float _3172 = log2(_2868);
        _2960 = (exp2(_3172 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3156 * cbSceneParam._m0[78u].x)) * _3146.x) / cbSceneParam._m0[78u].x)) + _2865;
        _2962 = (exp2(_3172 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3156 * cbSceneParam._m0[78u].y)) * _3146.y) / cbSceneParam._m0[78u].y)) + _2866;
        _2964 = (exp2(_3172 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3156 * cbSceneParam._m0[78u].z)) * _3146.z) / cbSceneParam._m0[78u].z)) + _2867;
        _2966 = _3155 * _2868;
    }
    else
    {
        _2960 = _2865;
        _2962 = _2866;
        _2964 = _2867;
        _2966 = _2868;
    }
    bool _3182;
    vec4 _2976;
    vec4 _2998;
    float _3000;
    float _3004;
    float _3005;
    float _3006;
    float _3009;
    float _3012;
    float _3015;
    float _3016;
    bool _3026;
    for (;;)
    {
        _2976 = cbMatDynParam._m0[0u];
        float _2978 = roundEven(_2976.y);
        bool _2979 = _2978 == 3.0;
        float _2980 = log2(_2966);
        float _2984 = exp2(_2980 * cbSceneParam._m0[78u].x);
        float _2985 = exp2(_2980 * cbSceneParam._m0[78u].y);
        float _2986 = exp2(_2980 * cbSceneParam._m0[78u].z);
        float _2987 = _2984 * _2821;
        float _2988 = _2985 * _2822;
        float _2989 = _2986 * _2823;
        float _2996 = _797 + (-0.5);
        _2998 = cbMtdParam._m0[1u];
        _3000 = _2998.y * _2996;
        float _3003 = (_2978 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3004 = _3003 * (_2979 ? _2987 : (_2987 + (cbSceneParam._m0[72u].w * _2960)));
        _3005 = _3003 * (_2979 ? _2988 : (_2988 + (cbSceneParam._m0[72u].w * _2962)));
        _3006 = _3003 * (_2979 ? _2989 : (_2989 + (cbSceneParam._m0[72u].w * _2964)));
        _3009 = ((_2829 * _2838) * _2984) * _3003;
        _3012 = ((_2830 * _2838) * _2985) * _3003;
        _3015 = ((_2831 * _2838) * _2986) * _3003;
        _3016 = _2996 * 0.999000012874603271484375;
        _3026 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3026)
        {
            if ((cbInstanceData._m0[_910 + 7u].x + _3016) < 0.5)
            {
                _3182 = true;
                break;
            }
        }
        uint _3123 = _911 + uint(_2976.w);
        if ((cbInstanceData._m0[_3123].w < 1.0) && ((cbInstanceData._m0[_3123].w + _3016) < 0.5))
        {
            _3182 = true;
            break;
        }
        if ((_3000 + _450) < _2998.x)
        {
            _3182 = true;
            break;
        }
        _3182 = false;
        break;
    }
    float _3386;
    if (_3182)
    {
        discard_state = true;
        _3386 = 0.0;
    }
    else
    {
        _3386 = _2843;
    }
    SV_Target.x = _3004;
    SV_Target.y = _3005;
    SV_Target.z = _3006;
    SV_Target.w = _3386;
    SV_Target_1.x = _3009;
    SV_Target_1.y = _3012;
    SV_Target_1.z = _3015;
    SV_Target_1.w = _2843;
    discard_exit();
}


