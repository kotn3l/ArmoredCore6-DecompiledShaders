#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[18];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_1;
layout(set = 0, binding = 1) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_7;
layout(set = 0, binding = 10) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_6;
layout(set = 0, binding = 12) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_0;
layout(set = 0, binding = 3) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_10;
layout(set = 0, binding = 4) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_11;
layout(set = 0, binding = 5) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_12;
layout(set = 0, binding = 6) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_2;
layout(set = 0, binding = 7) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_4;
layout(set = 0, binding = 9) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_5;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1373;
float _4089;
float _4090;
float _4091;
float _4092;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _219 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _220 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _221 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _227 = inversesqrt(dot(vec3(_219, _220, _221), vec3(_219, _220, _221)));
    float _234 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _235 = _234 * NORMAL.x;
    float _236 = _234 * NORMAL.y;
    float _237 = _234 * NORMAL.z;
    float _241 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _249;
    float _250;
    float _251;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _249 = (-0.0) - _235;
        _250 = (-0.0) - _236;
        _251 = (-0.0) - _237;
    }
    else
    {
        _249 = _235;
        _250 = _236;
        _251 = _237;
    }
    vec4 _264 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _269 = _264.z;
    float _270 = _264.w;
    float _276 = exp2(log2(_269 * 22.0) * 260.0);
    float _277 = isnan(0.0) ? _276 : (isnan(_276) ? 0.0 : max(_276, 0.0));
    float _278 = isnan(1.0) ? _277 : (isnan(_277) ? 1.0 : min(_277, 1.0));
    vec4 _292 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _303 = cbMtdParam._m0[10u].x * _292.x;
    float _304 = cbMtdParam._m0[10u].y * _292.y;
    float _305 = cbMtdParam._m0[10u].z * _292.z;
    vec4 _317 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _345 = exp2(log2(1.0 - _270) * 8.0);
    vec4 _357 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_10, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _373 = exp2(log2(_270) * 8.0);
    vec4 _386 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _411 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _419 = (((((cbMtdParam._m0[9u].x * _317.x) - _303) * _278) + _303) * 4.55000019073486328125) * _411.x;
    float _421 = (((((cbMtdParam._m0[9u].y * _317.y) - _304) * _278) + _304) * 4.55000019073486328125) * _411.y;
    float _423 = (((((cbMtdParam._m0[9u].z * _317.z) - _305) * _278) + _305) * 4.55000019073486328125) * _411.z;
    float _430 = (((cbMtdParam._m0[13u].x * _357.x) - _419) * _345) + _419;
    float _431 = (((cbMtdParam._m0[13u].y * _357.y) - _421) * _345) + _421;
    float _432 = (((cbMtdParam._m0[13u].z * _357.z) - _423) * _345) + _423;
    float _439 = (((cbMtdParam._m0[11u].x * _386.x) - _430) * _373) + _430;
    float _440 = (((cbMtdParam._m0[11u].y * _386.y) - _431) * _373) + _431;
    float _441 = (((cbMtdParam._m0[11u].z * _386.z) - _432) * _373) + _432;
    float _442 = _411.w * _317.w;
    float _472 = (((texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w)).x - cbMtdParam._m0[17u].x) + cbMtdParam._m0[16u].x) * _278) + cbMtdParam._m0[17u].x;
    float _476 = ((cbMtdParam._m0[15u].z - _472) * _345) + _472;
    float _479 = ((cbMtdParam._m0[16u].w - _476) * _373) + _476;
    vec4 _491 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w));
    float _493 = _491.x;
    float _494 = _491.y;
    float _500 = cbMtdParam._m0[14u].y + _491.z;
    vec4 _512 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w));
    vec4 _534 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    vec4 _552 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _565 = (((_278 * (_269 + (-0.5))) + 0.5) * 2.0) * ((((_512.z - _500) + cbMtdParam._m0[14u].x) * _278) + _500);
    float _569 = (((_534.z - _565) + cbMtdParam._m0[15u].y) * _345) + _565;
    float _573 = (((_552.z - _569) + cbMtdParam._m0[14u].w) * _373) + _569;
    float _587 = abs((fract(cbMtdParam._m0[15u].x * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _4111 = isnan(0.0) ? _587 : (isnan(_587) ? 0.0 : max(_587, 0.0));
    float _588 = isnan(1.0) ? _4111 : (isnan(_4111) ? 1.0 : min(_4111, 1.0));
    float _593 = (_588 * _588) * (3.0 - (_588 * 2.0));
    vec4 _606 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _614 = (_264.x * 2.0) + (-1.0);
    float _615 = (_264.y * 2.0) + (-1.0);
    float _616 = dot(vec2(_614, _615), vec2(_614, _615));
    float _4122 = isnan(0.0) ? _616 : (isnan(_616) ? 0.0 : max(_616, 0.0));
    float _621 = sqrt(1.0 - (isnan(1.0) ? _4122 : (isnan(_4122) ? 1.0 : min(_4122, 1.0))));
    float _626 = ((_512.x - _493) * _278) + _493;
    float _627 = ((_512.y - _494) * _278) + _494;
    float _632 = ((_534.x - _626) * _345) + _626;
    float _633 = ((_534.y - _627) * _345) + _627;
    float _646 = (cbMtdParam._m0[14u].z * (((((_552.x - _632) * _373) + _632) * 2.0) + (-1.0))) + _614;
    float _647 = (cbMtdParam._m0[14u].z * (((((_552.y - _633) * _373) + _633) * 2.0) + (-1.0))) + _615;
    float _650 = fma(_621, _249, fma(_647, _241 * TANGENT.x, (_227 * _219) * _646));
    float _653 = fma(_621, _250, fma(_647, _241 * TANGENT.y, (_227 * _220) * _646));
    float _656 = fma(_621, _251, fma(_647, _241 * TANGENT.z, (_227 * _221) * _646));
    float _660 = inversesqrt(dot(vec3(_650, _653, _656), vec3(_650, _653, _656)));
    float _661 = _660 * _650;
    float _662 = _660 * _653;
    float _663 = _660 * _656;
    float _4133 = isnan(0.0) ? _442 : (isnan(_442) ? 0.0 : max(_442, 0.0));
    float _664 = isnan(1.0) ? _4133 : (isnan(_4133) ? 1.0 : min(_4133, 1.0));
    float _4144 = isnan(0.0) ? _573 : (isnan(_573) ? 0.0 : max(_573, 0.0));
    float _665 = isnan(1.0) ? _4144 : (isnan(_4144) ? 1.0 : min(_4144, 1.0));
    float _4155 = isnan(0.0) ? _439 : (isnan(_439) ? 0.0 : max(_439, 0.0));
    float _666 = isnan(1.0) ? _4155 : (isnan(_4155) ? 1.0 : min(_4155, 1.0));
    float _4166 = isnan(0.0) ? _440 : (isnan(_440) ? 0.0 : max(_440, 0.0));
    float _667 = isnan(1.0) ? _4166 : (isnan(_4166) ? 1.0 : min(_4166, 1.0));
    float _4177 = isnan(0.0) ? _441 : (isnan(_441) ? 0.0 : max(_441, 0.0));
    float _668 = isnan(1.0) ? _4177 : (isnan(_4177) ? 1.0 : min(_4177, 1.0));
    float _4188 = isnan(0.0) ? _479 : (isnan(_479) ? 0.0 : max(_479, 0.0));
    float _669 = isnan(1.0) ? _4188 : (isnan(_4188) ? 1.0 : min(_4188, 1.0));
    float _685 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _725 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _735 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _725);
    float _736 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _725);
    float _737 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _725);
    float _741 = inversesqrt(dot(vec3(_735, _736, _737), vec3(_735, _736, _737)));
    float _742 = _735 * _741;
    float _743 = _736 * _741;
    float _744 = _737 * _741;
    vec4 _749 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _751 = _749.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1054 = sqrt(((_735 * _735) + (_736 * _736)) + (_737 * _737));
        float _1060 = (cbMatDynParam._m0[5u].x * _1054) + cbMatDynParam._m0[5u].y;
        float _4199 = isnan(0.0) ? _1060 : (isnan(_1060) ? 0.0 : max(_1060, 0.0));
        float _1061 = isnan(1.0) ? _4199 : (isnan(_4199) ? 1.0 : min(_4199, 1.0));
        float _1065 = (cbMatDynParam._m0[5u].z * _1054) + cbMatDynParam._m0[5u].w;
        float _4210 = isnan(0.0) ? _1065 : (isnan(_1065) ? 0.0 : max(_1065, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4210 : (isnan(_4210) ? 1.0 : min(_4210, 1.0))) - _1061)) + _1061) < ((_751 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _762 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _763 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _765 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _767 = _765.w;
    float _785 = fma(_663, cbSceneParam._m0[5u].z, fma(_662, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _661));
    float _788 = fma(_663, cbSceneParam._m0[6u].z, fma(_662, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _661));
    float _791 = fma(_663, cbSceneParam._m0[7u].z, fma(_662, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _661));
    vec4 _793 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _795 = _793.x;
    float _807 = (((_793.y - _665) + (_793.w * _665)) * cbMtdParam._m0[3u].x) + _665;
    vec4 _808 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _824 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3(cbMtdParam._m0[3u].x * (_795 * _795)), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * _808.z;
    float _832 = (((cbMatDynParam._m0[15u].x - _669) * cbMatDynParam._m0[15u].w) * _824) + _669;
    float _840 = ((_824 * cbMatDynParam._m0[16u].z) * (cbMatDynParam._m0[16u].x - _807)) + _807;
    uint _864 = uint(roundEven(NORMAL.w)) * 13u;
    uint _865 = _864 + 9u;
    uint _866 = _865 + uint(cbMatDynParam._m0[0u].w);
    float _872 = (cbMtdParam._m0[0u].x * _666) * cbInstanceData._m0[_866].x;
    float _873 = (cbMtdParam._m0[0u].y * _667) * cbInstanceData._m0[_866].y;
    float _874 = (cbMtdParam._m0[0u].z * _668) * cbInstanceData._m0[_866].z;
    float _4221 = isnan(0.0) ? _872 : (isnan(_872) ? 0.0 : max(_872, 0.0));
    float _875 = isnan(1.0) ? _4221 : (isnan(_4221) ? 1.0 : min(_4221, 1.0));
    float _4232 = isnan(0.0) ? _873 : (isnan(_873) ? 0.0 : max(_873, 0.0));
    float _876 = isnan(1.0) ? _4232 : (isnan(_4232) ? 1.0 : min(_4232, 1.0));
    float _4243 = isnan(0.0) ? _874 : (isnan(_874) ? 0.0 : max(_874, 0.0));
    float _877 = isnan(1.0) ? _4243 : (isnan(_4243) ? 1.0 : min(_4243, 1.0));
    vec4 _878 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _883 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _894 = (((_883.x - _832) + (_883.w * _832)) * cbMtdParam._m0[3u].x) + _832;
    float _907 = (cbMtdParam._m0[3u].x * (((_875 * _767) - _875) + _878.x)) + _875;
    float _908 = (cbMtdParam._m0[3u].x * (((_876 * _767) - _876) + _878.y)) + _876;
    float _909 = (cbMtdParam._m0[3u].x * (((_877 * _767) - _877) + _878.z)) + _877;
    float _923 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3((_832 * (_666 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625, (_832 * (_667 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625, (_832 * (_668 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w)).z;
    float _927 = _923 * cbMatDynParam._m0[13u].w;
    float _937 = (_927 * (cbMatDynParam._m0[13u].x - _907)) + _907;
    float _938 = (_927 * (cbMatDynParam._m0[13u].y - _908)) + _908;
    float _939 = (_927 * (cbMatDynParam._m0[13u].z - _909)) + _909;
    float _947 = ((_923 * cbMatDynParam._m0[15u].w) * (cbMatDynParam._m0[15u].x - _894)) + _894;
    float _948 = 1.0 - _947;
    float _949 = _948 * _937;
    float _950 = _948 * _938;
    float _951 = _948 * _939;
    float _955 = (_937 + (-0.039999999105930328369140625)) * _947;
    float _956 = (_938 + (-0.039999999105930328369140625)) * _947;
    float _957 = (_939 + (-0.039999999105930328369140625)) * _947;
    float _958 = _955 + 0.039999999105930328369140625;
    float _959 = _956 + 0.039999999105930328369140625;
    float _960 = _957 + 0.039999999105930328369140625;
    vec4 _969 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _762, cbSceneParam._m0[86u].y * _763));
    float _972 = _969.x * TEXCOORD_4;
    float _973 = dot(vec3(_661, _662, _663), vec3(_742, _743, _744));
    float _976 = _973 * 2.0;
    float _980 = (_976 * _661) - _742;
    float _981 = (_976 * _662) - _743;
    float _982 = (_976 * _663) - _744;
    float _986 = abs(dot(vec3(_742, _743, _744), vec3(_661, _662, _663)));
    float _4254 = isnan(0.0) ? _986 : (isnan(_986) ? 0.0 : max(_986, 0.0));
    float _988 = sqrt(_840);
    float _1000 = exp2((_988 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4254 : (isnan(_4254) ? 1.0 : min(_4254, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_988 * 3.0));
    float _1006 = (1.0 - _1000) * ((_988 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1007 = _1000 * _988;
    float _1035 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1039 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1043 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1372;
    float _1374;
    float _1375;
    float _1376;
    float _1377;
    float _1378;
    float _1379;
    float _1380;
    float _1381;
    float _1382;
    float _1383;
    float _1384;
    float _1385;
    float _1386;
    float _1387;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1099 = fma(_1043, cbModelParam._m0[26u].z, fma(_1039, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1035));
        float _1103 = fma(_1043, cbModelParam._m0[27u].z, fma(_1039, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1035));
        float _1107 = fma(_1043, cbModelParam._m0[28u].z, fma(_1039, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1035));
        float _1130 = _1035 + _661;
        float _1131 = _1039 + _662;
        float _1132 = _1043 + _663;
        float _1142 = fma(_1132, cbModelParam._m0[26u].z, fma(_1131, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1130)) - _1099;
        float _1143 = fma(_1132, cbModelParam._m0[27u].z, fma(_1131, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1130)) - _1103;
        float _1144 = fma(_1132, cbModelParam._m0[28u].z, fma(_1131, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1130)) - _1107;
        float _1148 = inversesqrt(dot(vec3(_1142, _1143, _1144), vec3(_1142, _1143, _1144)));
        float _1161 = ((_1148 * _1142) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1099 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1162 = ((_1148 * _1143) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1103 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1163 = ((_1148 * _1144) / cbModelParam._m0[34u].z) + ((((((_1107 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1166 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1161, _1162, _1163), 0.0);
        vec4 _1173 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1161, _1162, _1163), 0.0);
        vec4 _1180 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1161, _1162, _1163), 0.0);
        vec4 _1187 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1161, _1162, _1163), 0.0);
        float _1200 = exp2((_1166.w + (-0.5)) * 20.0) * 2.0;
        float _1201 = _1200 * (_1166.x + (-0.5));
        float _1202 = _1200 * (_1166.y + (-0.5));
        float _1203 = _1200 * (_1166.z + (-0.5));
        float _1210 = exp2((_1173.w + (-0.5)) * 20.0) * 2.0;
        float _1211 = _1210 * (_1173.x + (-0.5));
        float _1212 = _1210 * (_1173.y + (-0.5));
        float _1213 = _1210 * (_1173.z + (-0.5));
        float _1220 = exp2((_1180.w + (-0.5)) * 20.0) * 2.0;
        float _1221 = _1220 * (_1180.x + (-0.5));
        float _1222 = _1220 * (_1180.y + (-0.5));
        float _1223 = _1220 * (_1180.z + (-0.5));
        float _1230 = exp2((_1187.w + (-0.5)) * 20.0) * 2.0;
        float _1231 = _1230 * (_1187.x + (-0.5));
        float _1232 = _1230 * (_1187.y + (-0.5));
        float _1233 = _1230 * (_1187.z + (-0.5));
        float _1234 = isnan(0.0) ? _1231 : (isnan(_1231) ? 0.0 : max(_1231, 0.0));
        float _1235 = isnan(0.0) ? _1232 : (isnan(_1232) ? 0.0 : max(_1232, 0.0));
        float _1236 = isnan(0.0) ? _1233 : (isnan(_1233) ? 0.0 : max(_1233, 0.0));
        float _1237 = _1201 * 0.5;
        float _1238 = _1211 * 0.5;
        float _1239 = _1221 * 0.5;
        float _1240 = dot(vec3(_1237, _1238, _1239), vec3(_1237, _1238, _1239));
        float _1245 = (_1240 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1240);
        float _1254 = (dot(vec3(_661, _662, _663), vec3(_1245 * _1237, _1245 * _1238, _1245 * _1239)) + 1.0) * 0.5;
        float _4280 = isnan(0.0) ? _1254 : (isnan(_1254) ? 0.0 : max(_1254, 0.0));
        float _1264 = sqrt(((_1238 * _1238) + (_1237 * _1237)) + (_1239 * _1239)) / (_1234 + 9.9999997473787516355514526367188e-06);
        float _4291 = isnan(0.0) ? _1264 : (isnan(_1264) ? 0.0 : max(_1264, 0.0));
        float _1265 = isnan(1.0) ? _4291 : (isnan(_4291) ? 1.0 : min(_4291, 1.0));
        float _1266 = _1265 * 2.0;
        float _1270 = (1.0 - _1265) / (_1265 + 1.0);
        float _4302 = isnan(0.0) ? _1270 : (isnan(_1270) ? 0.0 : max(_1270, 0.0));
        float _1271 = isnan(1.0) ? _4302 : (isnan(_4302) ? 1.0 : min(_4302, 1.0));
        float _1280 = ((((1.0 - _1271) * (_1266 + 2.0)) * exp2(log2(isnan(1.0) ? _4280 : (isnan(_4280) ? 1.0 : min(_4280, 1.0))) * (_1266 + 1.0))) + _1271) * _1234;
        float _1281 = _1202 * 0.5;
        float _1282 = _1212 * 0.5;
        float _1283 = _1222 * 0.5;
        float _1284 = dot(vec3(_1281, _1282, _1283), vec3(_1281, _1282, _1283));
        float _1289 = (_1284 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1284);
        float _1297 = (dot(vec3(_661, _662, _663), vec3(_1289 * _1281, _1289 * _1282, _1289 * _1283)) + 1.0) * 0.5;
        float _4313 = isnan(0.0) ? _1297 : (isnan(_1297) ? 0.0 : max(_1297, 0.0));
        float _1306 = sqrt(((_1282 * _1282) + (_1281 * _1281)) + (_1283 * _1283)) / (_1235 + 9.9999997473787516355514526367188e-06);
        float _4324 = isnan(0.0) ? _1306 : (isnan(_1306) ? 0.0 : max(_1306, 0.0));
        float _1307 = isnan(1.0) ? _4324 : (isnan(_4324) ? 1.0 : min(_4324, 1.0));
        float _1308 = _1307 * 2.0;
        float _1312 = (1.0 - _1307) / (_1307 + 1.0);
        float _4335 = isnan(0.0) ? _1312 : (isnan(_1312) ? 0.0 : max(_1312, 0.0));
        float _1313 = isnan(1.0) ? _4335 : (isnan(_4335) ? 1.0 : min(_4335, 1.0));
        float _1322 = ((((1.0 - _1313) * (_1308 + 2.0)) * exp2(log2(isnan(1.0) ? _4313 : (isnan(_4313) ? 1.0 : min(_4313, 1.0))) * (_1308 + 1.0))) + _1313) * _1235;
        float _1323 = _1203 * 0.5;
        float _1324 = _1213 * 0.5;
        float _1325 = _1223 * 0.5;
        float _1326 = dot(vec3(_1323, _1324, _1325), vec3(_1323, _1324, _1325));
        float _1331 = (_1326 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1326);
        float _1339 = (dot(vec3(_661, _662, _663), vec3(_1331 * _1323, _1331 * _1324, _1331 * _1325)) + 1.0) * 0.5;
        float _4346 = isnan(0.0) ? _1339 : (isnan(_1339) ? 0.0 : max(_1339, 0.0));
        float _1348 = sqrt(((_1324 * _1324) + (_1323 * _1323)) + (_1325 * _1325)) / (_1236 + 9.9999997473787516355514526367188e-06);
        float _4357 = isnan(0.0) ? _1348 : (isnan(_1348) ? 0.0 : max(_1348, 0.0));
        float _1349 = isnan(1.0) ? _4357 : (isnan(_4357) ? 1.0 : min(_4357, 1.0));
        float _1350 = _1349 * 2.0;
        float _1354 = (1.0 - _1349) / (_1349 + 1.0);
        float _4368 = isnan(0.0) ? _1354 : (isnan(_1354) ? 0.0 : max(_1354, 0.0));
        float _1355 = isnan(1.0) ? _4368 : (isnan(_4368) ? 1.0 : min(_4368, 1.0));
        float _1364 = ((((1.0 - _1355) * (_1350 + 2.0)) * exp2(log2(isnan(1.0) ? _4346 : (isnan(_4346) ? 1.0 : min(_4346, 1.0))) * (_1350 + 1.0))) + _1355) * _1236;
        _1372 = _1203;
        _1374 = _1202;
        _1375 = _1201;
        _1376 = _1213;
        _1377 = _1212;
        _1378 = _1211;
        _1379 = _1223;
        _1380 = _1222;
        _1381 = _1221;
        _1382 = _1236;
        _1383 = _1235;
        _1384 = _1234;
        _1385 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1280 : (isnan(_1280) ? 0.0 : max(_1280, 0.0)));
        _1386 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1322 : (isnan(_1322) ? 0.0 : max(_1322, 0.0)));
        _1387 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1364 : (isnan(_1364) ? 0.0 : max(_1364, 0.0)));
    }
    else
    {
        _1372 = _1373;
        _1374 = _1373;
        _1375 = _1373;
        _1376 = _1373;
        _1377 = _1373;
        _1378 = _1373;
        _1379 = _1373;
        _1380 = _1373;
        _1381 = _1373;
        _1382 = _1373;
        _1383 = _1373;
        _1384 = _1373;
        _1385 = 0.0;
        _1386 = 0.0;
        _1387 = 0.0;
    }
    float _1685;
    float _1686;
    float _1687;
    float _1688;
    float _1689;
    float _1690;
    float _1691;
    float _1692;
    float _1693;
    float _1694;
    float _1695;
    float _1696;
    float _1697;
    float _1698;
    float _1699;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1416 = fma(_1043, cbModelParam._m0[30u].z, fma(_1039, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1035));
        float _1420 = fma(_1043, cbModelParam._m0[31u].z, fma(_1039, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1035));
        float _1424 = fma(_1043, cbModelParam._m0[32u].z, fma(_1039, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1035));
        float _1447 = _1035 + _661;
        float _1448 = _1039 + _662;
        float _1449 = _1043 + _663;
        float _1459 = fma(_1449, cbModelParam._m0[30u].z, fma(_1448, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1447)) - _1416;
        float _1460 = fma(_1449, cbModelParam._m0[31u].z, fma(_1448, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1447)) - _1420;
        float _1461 = fma(_1449, cbModelParam._m0[32u].z, fma(_1448, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1447)) - _1424;
        float _1465 = inversesqrt(dot(vec3(_1459, _1460, _1461), vec3(_1459, _1460, _1461)));
        float _1478 = ((_1465 * _1459) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1416 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1479 = ((_1465 * _1460) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1420 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1480 = ((_1465 * _1461) / cbModelParam._m0[35u].z) + ((((((_1424 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1482 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1478, _1479, _1480), 0.0);
        vec4 _1489 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1478, _1479, _1480), 0.0);
        vec4 _1496 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1478, _1479, _1480), 0.0);
        vec4 _1503 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1478, _1479, _1480), 0.0);
        float _1515 = exp2((_1482.w + (-0.5)) * 20.0) * 2.0;
        float _1516 = _1515 * (_1482.x + (-0.5));
        float _1517 = _1515 * (_1482.y + (-0.5));
        float _1518 = _1515 * (_1482.z + (-0.5));
        float _1525 = exp2((_1489.w + (-0.5)) * 20.0) * 2.0;
        float _1526 = _1525 * (_1489.x + (-0.5));
        float _1527 = _1525 * (_1489.y + (-0.5));
        float _1528 = _1525 * (_1489.z + (-0.5));
        float _1535 = exp2((_1496.w + (-0.5)) * 20.0) * 2.0;
        float _1536 = _1535 * (_1496.x + (-0.5));
        float _1537 = _1535 * (_1496.y + (-0.5));
        float _1538 = _1535 * (_1496.z + (-0.5));
        float _1545 = exp2((_1503.w + (-0.5)) * 20.0) * 2.0;
        float _1546 = _1545 * (_1503.x + (-0.5));
        float _1547 = _1545 * (_1503.y + (-0.5));
        float _1548 = _1545 * (_1503.z + (-0.5));
        float _1549 = isnan(0.0) ? _1546 : (isnan(_1546) ? 0.0 : max(_1546, 0.0));
        float _1550 = isnan(0.0) ? _1547 : (isnan(_1547) ? 0.0 : max(_1547, 0.0));
        float _1551 = isnan(0.0) ? _1548 : (isnan(_1548) ? 0.0 : max(_1548, 0.0));
        float _1552 = _1516 * 0.5;
        float _1553 = _1526 * 0.5;
        float _1554 = _1536 * 0.5;
        float _1555 = dot(vec3(_1552, _1553, _1554), vec3(_1552, _1553, _1554));
        float _1560 = (_1555 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1555);
        float _1568 = (dot(vec3(_661, _662, _663), vec3(_1560 * _1552, _1560 * _1553, _1560 * _1554)) + 1.0) * 0.5;
        float _4409 = isnan(0.0) ? _1568 : (isnan(_1568) ? 0.0 : max(_1568, 0.0));
        float _1577 = sqrt(((_1553 * _1553) + (_1552 * _1552)) + (_1554 * _1554)) / (_1549 + 9.9999997473787516355514526367188e-06);
        float _4420 = isnan(0.0) ? _1577 : (isnan(_1577) ? 0.0 : max(_1577, 0.0));
        float _1578 = isnan(1.0) ? _4420 : (isnan(_4420) ? 1.0 : min(_4420, 1.0));
        float _1579 = _1578 * 2.0;
        float _1583 = (1.0 - _1578) / (_1578 + 1.0);
        float _4431 = isnan(0.0) ? _1583 : (isnan(_1583) ? 0.0 : max(_1583, 0.0));
        float _1584 = isnan(1.0) ? _4431 : (isnan(_4431) ? 1.0 : min(_4431, 1.0));
        float _1593 = ((((1.0 - _1584) * (_1579 + 2.0)) * exp2(log2(isnan(1.0) ? _4409 : (isnan(_4409) ? 1.0 : min(_4409, 1.0))) * (_1579 + 1.0))) + _1584) * _1549;
        float _1594 = _1517 * 0.5;
        float _1595 = _1527 * 0.5;
        float _1596 = _1537 * 0.5;
        float _1597 = dot(vec3(_1594, _1595, _1596), vec3(_1594, _1595, _1596));
        float _1602 = (_1597 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1597);
        float _1610 = (dot(vec3(_661, _662, _663), vec3(_1602 * _1594, _1602 * _1595, _1602 * _1596)) + 1.0) * 0.5;
        float _4442 = isnan(0.0) ? _1610 : (isnan(_1610) ? 0.0 : max(_1610, 0.0));
        float _1619 = sqrt(((_1595 * _1595) + (_1594 * _1594)) + (_1596 * _1596)) / (_1550 + 9.9999997473787516355514526367188e-06);
        float _4453 = isnan(0.0) ? _1619 : (isnan(_1619) ? 0.0 : max(_1619, 0.0));
        float _1620 = isnan(1.0) ? _4453 : (isnan(_4453) ? 1.0 : min(_4453, 1.0));
        float _1621 = _1620 * 2.0;
        float _1625 = (1.0 - _1620) / (_1620 + 1.0);
        float _4464 = isnan(0.0) ? _1625 : (isnan(_1625) ? 0.0 : max(_1625, 0.0));
        float _1626 = isnan(1.0) ? _4464 : (isnan(_4464) ? 1.0 : min(_4464, 1.0));
        float _1635 = ((((1.0 - _1626) * (_1621 + 2.0)) * exp2(log2(isnan(1.0) ? _4442 : (isnan(_4442) ? 1.0 : min(_4442, 1.0))) * (_1621 + 1.0))) + _1626) * _1550;
        float _1636 = _1518 * 0.5;
        float _1637 = _1528 * 0.5;
        float _1638 = _1538 * 0.5;
        float _1639 = dot(vec3(_1636, _1637, _1638), vec3(_1636, _1637, _1638));
        float _1644 = (_1639 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1639);
        float _1652 = (dot(vec3(_661, _662, _663), vec3(_1644 * _1636, _1644 * _1637, _1644 * _1638)) + 1.0) * 0.5;
        float _4475 = isnan(0.0) ? _1652 : (isnan(_1652) ? 0.0 : max(_1652, 0.0));
        float _1661 = sqrt(((_1637 * _1637) + (_1636 * _1636)) + (_1638 * _1638)) / (_1551 + 9.9999997473787516355514526367188e-06);
        float _4486 = isnan(0.0) ? _1661 : (isnan(_1661) ? 0.0 : max(_1661, 0.0));
        float _1662 = isnan(1.0) ? _4486 : (isnan(_4486) ? 1.0 : min(_4486, 1.0));
        float _1663 = _1662 * 2.0;
        float _1667 = (1.0 - _1662) / (_1662 + 1.0);
        float _4497 = isnan(0.0) ? _1667 : (isnan(_1667) ? 0.0 : max(_1667, 0.0));
        float _1668 = isnan(1.0) ? _4497 : (isnan(_4497) ? 1.0 : min(_4497, 1.0));
        float _1677 = ((((1.0 - _1668) * (_1663 + 2.0)) * exp2(log2(isnan(1.0) ? _4475 : (isnan(_4475) ? 1.0 : min(_4475, 1.0))) * (_1663 + 1.0))) + _1668) * _1551;
        _1685 = _1518;
        _1686 = _1517;
        _1687 = _1516;
        _1688 = _1528;
        _1689 = _1527;
        _1690 = _1526;
        _1691 = _1538;
        _1692 = _1537;
        _1693 = _1536;
        _1694 = _1551;
        _1695 = _1550;
        _1696 = _1549;
        _1697 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1593 : (isnan(_1593) ? 0.0 : max(_1593, 0.0)));
        _1698 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1635 : (isnan(_1635) ? 0.0 : max(_1635, 0.0)));
        _1699 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1677 : (isnan(_1677) ? 0.0 : max(_1677, 0.0)));
    }
    else
    {
        _1685 = _1373;
        _1686 = _1373;
        _1687 = _1373;
        _1688 = _1373;
        _1689 = _1373;
        _1690 = _1373;
        _1691 = _1373;
        _1692 = _1373;
        _1693 = _1373;
        _1694 = _1373;
        _1695 = _1373;
        _1696 = _1373;
        _1697 = 0.0;
        _1698 = 0.0;
        _1699 = 0.0;
    }
    float _1709 = (cbModelParam._m0[1u].x * (_1697 - _1385)) + _1385;
    float _1710 = (cbModelParam._m0[1u].x * (_1698 - _1386)) + _1386;
    float _1711 = (cbModelParam._m0[1u].x * (_1699 - _1387)) + _1387;
    float _1732 = fma(_1711, cbSceneParam._m0[89u].z, fma(_1710, cbSceneParam._m0[89u].y, _1709 * cbSceneParam._m0[89u].x));
    float _1735 = fma(_1711, cbSceneParam._m0[90u].z, fma(_1710, cbSceneParam._m0[90u].y, _1709 * cbSceneParam._m0[90u].x));
    float _1738 = fma(_1711, cbSceneParam._m0[91u].z, fma(_1710, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1709));
    float _1753 = _980 * 0.5;
    float _1754 = _981 * 0.5;
    float _1755 = _982 * 0.5;
    float _1756 = dot(vec4(_1753, _1754, _1755, 1.0), vec4(_1687, _1690, _1693, _1696));
    float _1759 = dot(vec4(_1753, _1754, _1755, 1.0), vec4(_1686, _1689, _1692, _1695));
    float _1762 = dot(vec4(_1753, _1754, _1755, 1.0), vec4(_1685, _1688, _1691, _1694));
    float _1793;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1769 = dot(vec4(_1753, _1754, _1755, 1.0), vec4(_1372, _1376, _1379, _1382));
        float _1773 = dot(vec4(_1753, _1754, _1755, 1.0), vec4(_1374, _1377, _1380, _1383));
        float _1777 = dot(vec4(_1753, _1754, _1755, 1.0), vec4(_1375, _1378, _1381, _1384));
        float _1784 = dot(vec4(cbModelParam._m0[39u]), vec4(_1753, _1754, _1755, 1.0));
        _1793 = dot(vec3(isnan(0.0) ? _1777 : (isnan(_1777) ? 0.0 : max(_1777, 0.0)), isnan(0.0) ? _1773 : (isnan(_1773) ? 0.0 : max(_1773, 0.0)), isnan(0.0) ? _1769 : (isnan(_1769) ? 0.0 : max(_1769, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1784) ? 0.0 : (isnan(0.0) ? _1784 : max(0.0, _1784))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1793 = 1.0;
    }
    float _1804;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1795 = dot(vec4(cbModelParam._m0[40u]), vec4(_1753, _1754, _1755, 1.0));
        _1804 = dot(vec3(isnan(0.0) ? _1756 : (isnan(_1756) ? 0.0 : max(_1756, 0.0)), isnan(0.0) ? _1759 : (isnan(_1759) ? 0.0 : max(_1759, 0.0)), isnan(0.0) ? _1762 : (isnan(_1762) ? 0.0 : max(_1762, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1795) ? 0.0 : (isnan(0.0) ? _1795 : max(0.0, _1795))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1804 = 1.0;
    }
    float _1808 = (_1804 * cbModelParam._m0[1u].x) + (_1793 * (1.0 - cbModelParam._m0[1u].x));
    float _1818 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _840);
    float _1819 = isnan(_1818) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1818 : min(cbModelParam._m0[25u].z, _1818));
    float _1899;
    float _1901;
    float _1903;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1866 = fma(_1043, cbModelParam._m0[13u].z, fma(_1039, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1035)) + cbModelParam._m0[13u].w;
        float _1870 = fma(_1043, cbModelParam._m0[14u].z, fma(_1039, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1035)) + cbModelParam._m0[14u].w;
        float _1874 = fma(_1043, cbModelParam._m0[15u].z, fma(_1039, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1035)) + cbModelParam._m0[15u].w;
        float _1877 = fma(_982, cbModelParam._m0[13u].z, fma(_981, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _980));
        float _1880 = fma(_982, cbModelParam._m0[14u].z, fma(_981, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _980));
        float _1883 = fma(_982, cbModelParam._m0[15u].z, fma(_981, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _980));
        float _1911;
        if (_1877 > 0.0)
        {
            _1911 = abs((1.0 - _1866) / _1877);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1877 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1866 + 1.0) / _1877);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1911 = frontier_phi_19_17_ladder;
        }
        float _2084;
        if (_1880 > 0.0)
        {
            _2084 = abs((1.0 - _1870) / _1880);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1880 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1870 + 1.0) / _1880);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2084 = frontier_phi_28_24_ladder;
        }
        float _2379;
        if (_1883 > 0.0)
        {
            _2379 = abs((1.0 - _1874) / _1883);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1883 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1874 + 1.0) / _1883);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2379 = frontier_phi_40_35_ladder;
        }
        float _2381 = isnan(_2084) ? _1911 : (isnan(_1911) ? _2084 : min(_1911, _2084));
        float _2382 = isnan(_2379) ? _2381 : (isnan(_2381) ? _2379 : min(_2381, _2379));
        float _2386 = (_2382 * _1877) + _1866;
        float _2387 = (_2382 * _1880) + _1870;
        float _2388 = (_2382 * _1883) + _1874;
        float _2389 = _2382 * 9.9999997473787516355514526367188e-05;
        float _2391 = (-1.0) - _2389;
        float _2393 = _2389 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2388 > _2393) || ((_2388 < _2391) || ((_2387 > _2393) || ((_2387 < _2391) || ((_2386 < _2391) || (_2386 > _2393))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2533 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2388, cbModelParam._m0[9u].z, fma(_2387, cbModelParam._m0[9u].y, _2386 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2388, cbModelParam._m0[10u].z, fma(_2387, cbModelParam._m0[10u].y, _2386 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2388, cbModelParam._m0[11u].z, fma(_2387, cbModelParam._m0[11u].y, _2386 * cbModelParam._m0[11u].x))), _1819);
            frontier_phi_18_40_ladder = _2533.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2533.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2533.x * cbModelParam._m0[1u].y;
        }
        _1899 = frontier_phi_18_40_ladder_2;
        _1901 = frontier_phi_18_40_ladder_1;
        _1903 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1887 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_980, _981, _982), _1819);
        _1899 = _1887.x * cbModelParam._m0[1u].y;
        _1901 = _1887.y * cbModelParam._m0[1u].y;
        _1903 = _1887.z * cbModelParam._m0[1u].y;
    }
    float _1907 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _840);
    float _1908 = isnan(_1907) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1907 : min(cbModelParam._m0[25u].w, _1907));
    float _1999;
    float _2001;
    float _2003;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1963 = fma(_1043, cbModelParam._m0[21u].z, fma(_1039, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1035)) + cbModelParam._m0[21u].w;
        float _1967 = fma(_1043, cbModelParam._m0[22u].z, fma(_1039, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1035)) + cbModelParam._m0[22u].w;
        float _1971 = fma(_1043, cbModelParam._m0[23u].z, fma(_1039, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1035)) + cbModelParam._m0[23u].w;
        float _1974 = fma(_982, cbModelParam._m0[21u].z, fma(_981, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _980));
        float _1977 = fma(_982, cbModelParam._m0[22u].z, fma(_981, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _980));
        float _1980 = fma(_982, cbModelParam._m0[23u].z, fma(_981, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _980));
        float _2089;
        if (_1974 > 0.0)
        {
            _2089 = abs((1.0 - _1963) / _1974);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1974 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1963 + 1.0) / _1974);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _2089 = frontier_phi_30_26_ladder;
        }
        float _2406;
        if (_1977 > 0.0)
        {
            _2406 = abs((1.0 - _1967) / _1977);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1977 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1967 + 1.0) / _1977);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2406 = frontier_phi_42_37_ladder;
        }
        float _2744;
        if (_1980 > 0.0)
        {
            _2744 = abs((1.0 - _1971) / _1980);
        }
        else
        {
            float frontier_phi_52_49_ladder;
            if (_1980 < 0.0)
            {
                frontier_phi_52_49_ladder = abs((_1971 + 1.0) / _1980);
            }
            else
            {
                frontier_phi_52_49_ladder = 5000.0;
            }
            _2744 = frontier_phi_52_49_ladder;
        }
        float _2746 = isnan(_2406) ? _2089 : (isnan(_2089) ? _2406 : min(_2089, _2406));
        float _2747 = isnan(_2744) ? _2746 : (isnan(_2746) ? _2744 : min(_2746, _2744));
        float _2751 = (_2747 * _1974) + _1963;
        float _2752 = (_2747 * _1977) + _1967;
        float _2753 = (_2747 * _1980) + _1971;
        float _2754 = _2747 * 9.9999997473787516355514526367188e-05;
        float _2755 = (-1.0) - _2754;
        float _2757 = _2754 + 1.0;
        float frontier_phi_27_52_ladder;
        float frontier_phi_27_52_ladder_1;
        float frontier_phi_27_52_ladder_2;
        if ((_2753 > _2757) || ((_2753 < _2755) || ((_2752 > _2757) || ((_2752 < _2755) || ((_2751 < _2755) || (_2751 > _2757))))))
        {
            frontier_phi_27_52_ladder = 0.0;
            frontier_phi_27_52_ladder_1 = 0.0;
            frontier_phi_27_52_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2875 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2753, cbModelParam._m0[17u].z, fma(_2752, cbModelParam._m0[17u].y, _2751 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2753, cbModelParam._m0[18u].z, fma(_2752, cbModelParam._m0[18u].y, _2751 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2753, cbModelParam._m0[19u].z, fma(_2752, cbModelParam._m0[19u].y, _2751 * cbModelParam._m0[19u].x))), _1908);
            frontier_phi_27_52_ladder = _2875.z * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_1 = _2875.y * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_2 = _2875.x * cbModelParam._m0[1u].z;
        }
        _1999 = frontier_phi_27_52_ladder_2;
        _2001 = frontier_phi_27_52_ladder_1;
        _2003 = frontier_phi_27_52_ladder;
    }
    else
    {
        vec4 _1983 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_980, _981, _982), _1908);
        _1999 = _1983.x * cbModelParam._m0[1u].z;
        _2001 = _1983.y * cbModelParam._m0[1u].z;
        _2003 = _1983.z * cbModelParam._m0[1u].z;
    }
    float _2016 = (((_1006 * _958) + _1007) * _972) * ((cbModelParam._m0[1u].w * (_1999 - _1899)) + _1899);
    float _2018 = (((_1006 * _959) + _1007) * _972) * ((cbModelParam._m0[1u].w * (_2001 - _1901)) + _1901);
    float _2020 = (((_1006 * _960) + _1007) * _972) * ((cbModelParam._m0[1u].w * (_2003 - _1903)) + _1903);
    float _2023 = fma(_2020, cbSceneParam._m0[89u].z, fma(_2018, cbSceneParam._m0[89u].y, _2016 * cbSceneParam._m0[89u].x));
    float _2026 = fma(_2020, cbSceneParam._m0[90u].z, fma(_2018, cbSceneParam._m0[90u].y, _2016 * cbSceneParam._m0[90u].x));
    float _2029 = fma(_2020, cbSceneParam._m0[91u].z, fma(_2018, cbSceneParam._m0[91u].y, _2016 * cbSceneParam._m0[91u].x));
    float _2063 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2067 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2071 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2075 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2076 = _2063 / _2075;
    float _2077 = _2067 / _2075;
    float _2078 = _2071 / _2075;
    float _2225;
    float _2226;
    float _2227;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2105 = ((uint(_2078 > cbSceneParam._m0[59u].y) + uint(_2078 > cbSceneParam._m0[59u].x)) + uint(_2078 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2106 = _2105 + 43u;
        uint _2114 = _2105 + 44u;
        uint _2122 = _2105 + 45u;
        uint _2130 = _2105 + 46u;
        float _2141 = fma(_2075, cbSceneParam._m0[_2106].w, fma(_2071, cbSceneParam._m0[_2106].z, fma(_2067, cbSceneParam._m0[_2106].y, _2063 * cbSceneParam._m0[_2106].x)));
        float _2145 = fma(_2075, cbSceneParam._m0[_2114].w, fma(_2071, cbSceneParam._m0[_2114].z, fma(_2067, cbSceneParam._m0[_2114].y, _2063 * cbSceneParam._m0[_2114].x)));
        float _2153 = fma(_2075, cbSceneParam._m0[_2130].w, fma(_2071, cbSceneParam._m0[_2130].z, fma(_2067, cbSceneParam._m0[_2130].y, _2063 * cbSceneParam._m0[_2130].x)));
        float _2158 = cbSceneParam._m0[33u].z * _2153;
        float _2160 = cbSceneParam._m0[33u].w * _2153;
        float _2163 = fma(_2075, cbSceneParam._m0[_2122].w, fma(_2071, cbSceneParam._m0[_2122].z, fma(_2067, cbSceneParam._m0[_2122].y, _2063 * cbSceneParam._m0[_2122].x))) / _2153;
        float _2211 = (cbSceneParam._m0[33u].x - sqrt(((_2077 * _2077) + (_2076 * _2076)) + (_2078 * _2078))) * cbSceneParam._m0[33u].y;
        float _4623 = isnan(0.0) ? _2211 : (isnan(_2211) ? 0.0 : max(_2211, 0.0));
        float _2218 = (isnan(1.0) ? _4623 : (isnan(_4623) ? 1.0 : min(_4623, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2158 + _2141) / _2153, (_2160 + _2145) / _2153), _2163), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2160 + _2141) / _2153, (_2145 - _2158) / _2153), _2163), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2141 - _2158) / _2153, (_2145 - _2160) / _2153), _2163), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2141 - _2160) / _2153, (_2158 + _2145) / _2153), _2163), 0.0)).x), vec4(0.25)));
        _2225 = 1.0 - (_2218 * cbSceneParam._m0[34u].x);
        _2226 = 1.0 - (_2218 * cbSceneParam._m0[34u].y);
        _2227 = 1.0 - (_2218 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2225 = 1.0;
        _2226 = 1.0;
        _2227 = 1.0;
    }
    float _2291;
    float _2293;
    float _2295;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2279 = fma(_2075, cbSceneParam._m0[63u].w, fma(_2071, cbSceneParam._m0[63u].z, fma(_2067, cbSceneParam._m0[63u].y, _2063 * cbSceneParam._m0[63u].x)));
        float _2280 = fma(_2075, cbSceneParam._m0[60u].w, fma(_2071, cbSceneParam._m0[60u].z, fma(_2067, cbSceneParam._m0[60u].y, _2063 * cbSceneParam._m0[60u].x))) / _2279;
        float _2281 = fma(_2075, cbSceneParam._m0[61u].w, fma(_2071, cbSceneParam._m0[61u].z, fma(_2067, cbSceneParam._m0[61u].y, _2063 * cbSceneParam._m0[61u].x))) / _2279;
        float frontier_phi_39_38_ladder;
        float frontier_phi_39_38_ladder_1;
        float frontier_phi_39_38_ladder_2;
        if ((((_2280 >= cbSceneParam._m0[64u].x) && (_2281 >= cbSceneParam._m0[64u].y)) && (_2280 <= cbSceneParam._m0[64u].z)) && (_2281 <= cbSceneParam._m0[64u].w))
        {
            float _2419 = fma(_2075, cbSceneParam._m0[62u].w, fma(_2071, cbSceneParam._m0[62u].z, fma(_2067, cbSceneParam._m0[62u].y, _2063 * cbSceneParam._m0[62u].x))) / _2279;
            float _2423 = isnan(cbSceneParam._m0[41u].w) ? _2419 : (isnan(_2419) ? cbSceneParam._m0[41u].w : max(_2419, cbSceneParam._m0[41u].w));
            float _2466 = (cbSceneParam._m0[33u].x - sqrt(((_2077 * _2077) + (_2076 * _2076)) + (_2078 * _2078))) * cbSceneParam._m0[33u].y;
            float _4639 = isnan(0.0) ? _2466 : (isnan(_2466) ? 0.0 : max(_2466, 0.0));
            float _2473 = (isnan(1.0) ? _4639 : (isnan(_4639) ? 1.0 : min(_4639, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2280, cbSceneParam._m0[33u].w + _2281), _2423), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2280, _2281 - cbSceneParam._m0[33u].z), _2423), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2280 - cbSceneParam._m0[33u].z, _2281 - cbSceneParam._m0[33u].w), _2423), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2280 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2281), _2423), 0.0)).x), vec4(0.25)));
            float _2477 = 1.0 - (_2473 * cbSceneParam._m0[34u].x);
            float _2478 = 1.0 - (_2473 * cbSceneParam._m0[34u].y);
            float _2479 = 1.0 - (_2473 * cbSceneParam._m0[34u].z);
            frontier_phi_39_38_ladder = isnan(_2478) ? _2226 : (isnan(_2226) ? _2478 : min(_2226, _2478));
            frontier_phi_39_38_ladder_1 = isnan(_2477) ? _2225 : (isnan(_2225) ? _2477 : min(_2225, _2477));
            frontier_phi_39_38_ladder_2 = isnan(_2479) ? _2227 : (isnan(_2227) ? _2479 : min(_2227, _2479));
        }
        else
        {
            frontier_phi_39_38_ladder = _2226;
            frontier_phi_39_38_ladder_1 = _2225;
            frontier_phi_39_38_ladder_2 = _2227;
        }
        _2291 = frontier_phi_39_38_ladder_1;
        _2293 = frontier_phi_39_38_ladder;
        _2295 = frontier_phi_39_38_ladder_2;
    }
    else
    {
        _2291 = _2225;
        _2293 = _2226;
        _2295 = _2227;
    }
    uvec4 _2300 = floatBitsToUint(cbInstanceData._m0[_864 + 5u]);
    uint _2302 = _2300.x * 14u;
    uint _2303 = _2302 + 13u;
    float _2310 = _972 + (-1.0);
    float _2315 = (cbLight._m0[_2303].x * _2310) + 1.0;
    float _2316 = (cbLight._m0[_2303].y * _2310) + 1.0;
    float _2317 = (cbLight._m0[_2303].z * _2310) + 1.0;
    float _2318 = (cbLight._m0[_2303].w * _2310) + 1.0;
    uint _2319 = _2302 + 5u;
    float _2325 = isnan(1.0) ? _2316 : (isnan(_2316) ? 1.0 : min(_2316, 1.0));
    uint _2329 = _2302 + 4u;
    float _2338 = isnan(1.0) ? _2315 : (isnan(_2315) ? 1.0 : min(_2315, 1.0));
    uint _2342 = _2302 | 1u;
    float _2353 = dot(vec3(cbLight._m0[_2302].xyz), vec3(_661, _662, _663));
    float _2356 = dot(vec3(cbLight._m0[_2342].xyz), vec3(_661, _662, _663));
    float _4675 = isnan(0.0) ? _2353 : (isnan(_2353) ? 0.0 : max(_2353, 0.0));
    float _4686 = isnan(0.0) ? _2356 : (isnan(_2356) ? 0.0 : max(_2356, 0.0));
    float _2361 = (isnan(1.0) ? _4675 : (isnan(_4675) ? 1.0 : min(_4675, 1.0))) * 0.3183098733425140380859375;
    float _2363 = (isnan(1.0) ? _4686 : (isnan(_4686) ? 1.0 : min(_4686, 1.0))) * 0.3183098733425140380859375;
    float _2370 = ((cbLight._m0[_2319].x * _2325) * _2363) + (((cbLight._m0[_2329].x * _2291) * _2338) * _2361);
    float _2371 = ((_2325 * cbLight._m0[_2319].y) * _2363) + (((cbLight._m0[_2329].y * _2293) * _2338) * _2361);
    float _2372 = ((_2325 * cbLight._m0[_2319].z) * _2363) + (((cbLight._m0[_2329].z * _2295) * _2338) * _2361);
    uvec4 _2376 = floatBitsToUint(cbLight._m0[_2302 + 12u]);
    bool _2378 = _2376.x == 0u;
    float _2480;
    float _2482;
    float _2484;
    if (_2378)
    {
        _2480 = _2370;
        _2482 = _2371;
        _2484 = _2372;
    }
    else
    {
        uint _2488 = _2302 + 6u;
        float _2504 = (dot(vec3(cbLight._m0[_2302 + 2u].xyz), vec3(_661, _662, _663)) * 0.5) + 0.5;
        float _2505 = _2504 * _2504;
        float _4697 = isnan(0.0) ? _2505 : (isnan(_2505) ? 0.0 : max(_2505, 0.0));
        float _2506 = isnan(1.0) ? _4697 : (isnan(_4697) ? 1.0 : min(_4697, 1.0));
        float _2507 = isnan(1.0) ? _2317 : (isnan(_2317) ? 1.0 : min(_2317, 1.0));
        _2480 = (((cbLight._m0[_2488].x * 0.3183098733425140380859375) * _2506) * _2507) + _2370;
        _2482 = (((cbLight._m0[_2488].y * 0.3183098733425140380859375) * _2506) * _2507) + _2371;
        _2484 = (((cbLight._m0[_2488].z * 0.3183098733425140380859375) * _2506) * _2507) + _2372;
    }
    bool _2487 = _2376.y == 0u;
    float _2542;
    float _2544;
    float _2546;
    if (_2487)
    {
        _2542 = _2480;
        _2544 = _2482;
        _2546 = _2484;
    }
    else
    {
        uint _2715 = _2302 + 7u;
        float _2731 = (dot(vec3(cbLight._m0[_2302 + 3u].xyz), vec3(_661, _662, _663)) * 0.5) + 0.5;
        float _2732 = _2731 * _2731;
        float _4713 = isnan(0.0) ? _2732 : (isnan(_2732) ? 0.0 : max(_2732, 0.0));
        float _2733 = isnan(1.0) ? _4713 : (isnan(_4713) ? 1.0 : min(_4713, 1.0));
        float _2734 = isnan(1.0) ? _2318 : (isnan(_2318) ? 1.0 : min(_2318, 1.0));
        _2542 = (((cbLight._m0[_2715].x * 0.3183098733425140380859375) * _2733) * _2734) + _2480;
        _2544 = (((cbLight._m0[_2715].y * 0.3183098733425140380859375) * _2733) * _2734) + _2482;
        _2546 = (((cbLight._m0[_2715].z * 0.3183098733425140380859375) * _2733) * _2734) + _2484;
    }
    uint _2549 = _2302 + 8u;
    float _2562 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2302].w)) * _840) * 0.949999988079071044921875);
    float _2563 = _2562 * _2562;
    float _2564 = cbLight._m0[_2302].x + _742;
    float _2565 = cbLight._m0[_2302].y + _743;
    float _2566 = cbLight._m0[_2302].z + _744;
    float _2570 = inversesqrt(dot(vec3(_2564, _2565, _2566), vec3(_2564, _2565, _2566)));
    float _2571 = _2570 * _2564;
    float _2572 = _2570 * _2565;
    float _2573 = _2570 * _2566;
    float _2574 = dot(vec3(_661, _662, _663), vec3(cbLight._m0[_2302].xyz));
    float _4729 = isnan(0.0) ? _2574 : (isnan(_2574) ? 0.0 : max(_2574, 0.0));
    float _2577 = isnan(1.0) ? _4729 : (isnan(_4729) ? 1.0 : min(_4729, 1.0));
    float _4740 = isnan(0.0) ? _973 : (isnan(_973) ? 0.0 : max(_973, 0.0));
    float _2578 = isnan(1.0) ? _4740 : (isnan(_4740) ? 1.0 : min(_4740, 1.0));
    float _2579 = dot(vec3(_661, _662, _663), vec3(_2571, _2572, _2573));
    float _4751 = isnan(0.0) ? _2579 : (isnan(_2579) ? 0.0 : max(_2579, 0.0));
    float _2582 = isnan(1.0) ? _4751 : (isnan(_4751) ? 1.0 : min(_4751, 1.0));
    float _2583 = dot(vec3(cbLight._m0[_2302].xyz), vec3(_2571, _2572, _2573));
    float _4762 = isnan(0.0) ? _2583 : (isnan(_2583) ? 0.0 : max(_2583, 0.0));
    float _2587 = _2563 * _2563;
    float _2591 = ((_2582 * _2582) * (_2587 + (-1.0))) + 1.0;
    float _2599 = exp2(log2(1.0 - (isnan(1.0) ? _4762 : (isnan(_4762) ? 1.0 : min(_4762, 1.0)))) * 5.0);
    float _2600 = 0.959999978542327880859375 - _955;
    float _2602 = 0.959999978542327880859375 - _956;
    float _2603 = 0.959999978542327880859375 - _957;
    float _2610 = 1.0 - _2563;
    float _2621 = (0.5 / (((_2578 * ((_2577 * _2610) + _2563)) + 9.9999999392252902907785028219223e-09) + (((_2578 * _2610) + _2563) * _2577))) * _2577;
    float _4773 = isnan(0.0) ? _2621 : (isnan(_2621) ? 0.0 : max(_2621, 0.0));
    float _2623 = (isnan(1.0) ? _4773 : (isnan(_4773) ? 1.0 : min(_4773, 1.0))) * (_2587 / ((_2591 * _2591) * 3.141590118408203125));
    uint _2637 = _2302 + 9u;
    float _2648 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2342].w)) * _840) * 0.949999988079071044921875);
    float _2649 = _2648 * _2648;
    float _2650 = cbLight._m0[_2342].x + _742;
    float _2651 = cbLight._m0[_2342].y + _743;
    float _2652 = cbLight._m0[_2342].z + _744;
    float _2656 = inversesqrt(dot(vec3(_2650, _2651, _2652), vec3(_2650, _2651, _2652)));
    float _2657 = _2656 * _2650;
    float _2658 = _2656 * _2651;
    float _2659 = _2656 * _2652;
    float _2660 = dot(vec3(_661, _662, _663), vec3(cbLight._m0[_2342].xyz));
    float _4784 = isnan(0.0) ? _2660 : (isnan(_2660) ? 0.0 : max(_2660, 0.0));
    float _2663 = isnan(1.0) ? _4784 : (isnan(_4784) ? 1.0 : min(_4784, 1.0));
    float _2664 = dot(vec3(_661, _662, _663), vec3(_2657, _2658, _2659));
    float _4795 = isnan(0.0) ? _2664 : (isnan(_2664) ? 0.0 : max(_2664, 0.0));
    float _2667 = isnan(1.0) ? _4795 : (isnan(_4795) ? 1.0 : min(_4795, 1.0));
    float _2668 = dot(vec3(cbLight._m0[_2342].xyz), vec3(_2657, _2658, _2659));
    float _4806 = isnan(0.0) ? _2668 : (isnan(_2668) ? 0.0 : max(_2668, 0.0));
    float _2672 = _2649 * _2649;
    float _2676 = ((_2667 * _2667) * (_2672 + (-1.0))) + 1.0;
    float _2683 = exp2(log2(1.0 - (isnan(1.0) ? _4806 : (isnan(_4806) ? 1.0 : min(_4806, 1.0)))) * 5.0);
    float _2690 = 1.0 - _2649;
    float _2700 = (0.5 / (((_2578 * ((_2663 * _2690) + _2649)) + 9.9999999392252902907785028219223e-09) + (((_2578 * _2690) + _2649) * _2663))) * _2663;
    float _4817 = isnan(0.0) ? _2700 : (isnan(_2700) ? 0.0 : max(_2700, 0.0));
    float _2702 = (isnan(1.0) ? _4817 : (isnan(_4817) ? 1.0 : min(_4817, 1.0))) * (_2672 / ((_2676 * _2676) * 3.141590118408203125));
    float _2712 = (((((_2683 * _2600) + _958) * cbLight._m0[_2637].x) * _2702) * _2325) + ((((cbLight._m0[_2549].x * _2291) * ((_2599 * _2600) + _958)) * _2623) * _2338);
    float _2713 = (((((_2683 * _2602) + _959) * cbLight._m0[_2637].y) * _2702) * _2325) + ((((cbLight._m0[_2549].y * _2293) * ((_2599 * _2602) + _959)) * _2623) * _2338);
    float _2714 = (((((_2683 * _2603) + _960) * cbLight._m0[_2637].z) * _2702) * _2325) + ((((cbLight._m0[_2549].z * _2295) * ((_2599 * _2603) + _960)) * _2623) * _2338);
    float _2770;
    float _2772;
    float _2774;
    if (_2378)
    {
        _2770 = _2712;
        _2772 = _2713;
        _2774 = _2714;
    }
    else
    {
        uint _2776 = _2302 + 2u;
        uint _2780 = _2302 + 10u;
        float _2794 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2776].w)) * _840) * 0.949999988079071044921875);
        float _2795 = _2794 * _2794;
        float _2796 = cbLight._m0[_2776].x + _742;
        float _2797 = cbLight._m0[_2776].y + _743;
        float _2798 = cbLight._m0[_2776].z + _744;
        float _2802 = inversesqrt(dot(vec3(_2796, _2797, _2798), vec3(_2796, _2797, _2798)));
        float _2803 = _2802 * _2796;
        float _2804 = _2802 * _2797;
        float _2805 = _2802 * _2798;
        float _2806 = dot(vec3(_661, _662, _663), vec3(cbLight._m0[_2776].xyz));
        float _4828 = isnan(0.0) ? _2806 : (isnan(_2806) ? 0.0 : max(_2806, 0.0));
        float _2809 = isnan(1.0) ? _4828 : (isnan(_4828) ? 1.0 : min(_4828, 1.0));
        float _2810 = dot(vec3(_661, _662, _663), vec3(_2803, _2804, _2805));
        float _4839 = isnan(0.0) ? _2810 : (isnan(_2810) ? 0.0 : max(_2810, 0.0));
        float _2813 = isnan(1.0) ? _4839 : (isnan(_4839) ? 1.0 : min(_4839, 1.0));
        float _2814 = dot(vec3(cbLight._m0[_2776].xyz), vec3(_2803, _2804, _2805));
        float _4850 = isnan(0.0) ? _2814 : (isnan(_2814) ? 0.0 : max(_2814, 0.0));
        float _2818 = _2795 * _2795;
        float _2822 = ((_2813 * _2813) * (_2818 + (-1.0))) + 1.0;
        float _2829 = exp2(log2(1.0 - (isnan(1.0) ? _4850 : (isnan(_4850) ? 1.0 : min(_4850, 1.0)))) * 5.0);
        float _2836 = 1.0 - _2795;
        float _2846 = (0.5 / (((_2578 * ((_2809 * _2836) + _2795)) + 9.9999999392252902907785028219223e-09) + (((_2578 * _2836) + _2795) * _2809))) * _2809;
        float _4861 = isnan(0.0) ? _2846 : (isnan(_2846) ? 0.0 : max(_2846, 0.0));
        float _2848 = (isnan(1.0) ? _4861 : (isnan(_4861) ? 1.0 : min(_4861, 1.0))) * (_2818 / ((_2822 * _2822) * 3.141590118408203125));
        float _2849 = isnan(1.0) ? _2317 : (isnan(_2317) ? 1.0 : min(_2317, 1.0));
        _2770 = (((((_2829 * _2600) + _958) * cbLight._m0[_2780].x) * _2848) * _2849) + _2712;
        _2772 = (((((_2829 * _2602) + _959) * cbLight._m0[_2780].y) * _2848) * _2849) + _2713;
        _2774 = (((((_2829 * _2603) + _960) * cbLight._m0[_2780].z) * _2848) * _2849) + _2714;
    }
    float _2880;
    float _2882;
    float _2884;
    if (_2487)
    {
        _2880 = _2770;
        _2882 = _2772;
        _2884 = _2774;
    }
    else
    {
        uint _2891 = _2302 + 3u;
        uint _2895 = _2302 + 11u;
        float _2909 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2891].w)) * _840) * 0.949999988079071044921875);
        float _2910 = _2909 * _2909;
        float _2911 = cbLight._m0[_2891].x + _742;
        float _2912 = cbLight._m0[_2891].y + _743;
        float _2913 = cbLight._m0[_2891].z + _744;
        float _2917 = inversesqrt(dot(vec3(_2911, _2912, _2913), vec3(_2911, _2912, _2913)));
        float _2918 = _2917 * _2911;
        float _2919 = _2917 * _2912;
        float _2920 = _2917 * _2913;
        float _2921 = dot(vec3(_661, _662, _663), vec3(cbLight._m0[_2891].xyz));
        float _4877 = isnan(0.0) ? _2921 : (isnan(_2921) ? 0.0 : max(_2921, 0.0));
        float _2924 = isnan(1.0) ? _4877 : (isnan(_4877) ? 1.0 : min(_4877, 1.0));
        float _2925 = dot(vec3(_661, _662, _663), vec3(_2918, _2919, _2920));
        float _4888 = isnan(0.0) ? _2925 : (isnan(_2925) ? 0.0 : max(_2925, 0.0));
        float _2928 = isnan(1.0) ? _4888 : (isnan(_4888) ? 1.0 : min(_4888, 1.0));
        float _2929 = dot(vec3(cbLight._m0[_2891].xyz), vec3(_2918, _2919, _2920));
        float _4899 = isnan(0.0) ? _2929 : (isnan(_2929) ? 0.0 : max(_2929, 0.0));
        float _2933 = _2910 * _2910;
        float _2937 = ((_2928 * _2928) * (_2933 + (-1.0))) + 1.0;
        float _2944 = exp2(log2(1.0 - (isnan(1.0) ? _4899 : (isnan(_4899) ? 1.0 : min(_4899, 1.0)))) * 5.0);
        float _2951 = 1.0 - _2910;
        float _2961 = (0.5 / (((_2578 * ((_2924 * _2951) + _2910)) + 9.9999999392252902907785028219223e-09) + (((_2578 * _2951) + _2910) * _2924))) * _2924;
        float _4910 = isnan(0.0) ? _2961 : (isnan(_2961) ? 0.0 : max(_2961, 0.0));
        float _2963 = (isnan(1.0) ? _4910 : (isnan(_4910) ? 1.0 : min(_4910, 1.0))) * (_2933 / ((_2937 * _2937) * 3.141590118408203125));
        float _2964 = isnan(1.0) ? _2318 : (isnan(_2318) ? 1.0 : min(_2318, 1.0));
        _2880 = (((((_2944 * _2600) + _958) * cbLight._m0[_2895].x) * _2963) * _2964) + _2770;
        _2882 = (((((_2944 * _2602) + _959) * cbLight._m0[_2895].y) * _2963) * _2964) + _2772;
        _2884 = (((((_2944 * _2603) + _960) * cbLight._m0[_2895].z) * _2963) * _2964) + _2774;
    }
    float _3029;
    float _3031;
    float _3033;
    float _3035;
    float _3037;
    float _3039;
    if (_2300.y == 0u)
    {
        uvec4 _2985 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2986 = _2985.x;
        uint _2997 = uint((float(_2985.y) * floor(float(uint(cbSceneParam._m0[85u].y * _763) / _2986))) + floor(float(uint(cbSceneParam._m0[85u].x * _762) / _2986)));
        float _3007 = (log2(_2078 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3008 = isnan(0.0) ? _3007 : (isnan(_3007) ? 0.0 : max(_3007, 0.0));
        uint _3011 = uint(isnan(14.0) ? _3008 : (isnan(_3008) ? 14.0 : min(_3008, 14.0)));
        uvec4 _3016 = texelFetch(g_lightClusterGridBuffer, int(((_3011 << 2u) + (_2997 << 6u)) >> 2u));
        uint _3017 = _3016.x;
        uint _3018 = _2985.z;
        float _3139;
        float _3141;
        float _3143;
        float _3145;
        float _3147;
        float _3149;
        if (((((1u << ((_3018 >> 4u) & 15u)) + 4294967295u) & _3017) == 0u) || ((_3018 & 240u) == 0u))
        {
            _3139 = 0.0;
            _3141 = 0.0;
            _3143 = 0.0;
            _3145 = 0.0;
            _3147 = 0.0;
            _3149 = 0.0;
        }
        else
        {
            float _3140;
            float _3142;
            float _3144;
            float _3146;
            float _3148;
            float _3150;
            float _3300 = 0.0;
            float _3301 = 0.0;
            float _3302 = 0.0;
            float _3303 = 0.0;
            float _3304 = 0.0;
            float _3305 = 0.0;
            uint _3306 = 0u;
            uint _3315;
            bool _3316;
            for (;;)
            {
                _3315 = texelFetch(g_lightClassification, int((((_3011 << 5u) + (_2997 << 9u)) + (_3306 << 2u)) >> 2u)).x;
                _3316 = _3315 == 0u;
                float frontier_phi_73_pred;
                float frontier_phi_73_pred_1;
                float frontier_phi_73_pred_2;
                float frontier_phi_73_pred_3;
                float frontier_phi_73_pred_4;
                float frontier_phi_73_pred_5;
                if (_3316)
                {
                    frontier_phi_73_pred = _3305;
                    frontier_phi_73_pred_1 = _3304;
                    frontier_phi_73_pred_2 = _3303;
                    frontier_phi_73_pred_3 = _3302;
                    frontier_phi_73_pred_4 = _3301;
                    frontier_phi_73_pred_5 = _3300;
                }
                else
                {
                    float _3445;
                    float _3446;
                    float _3447;
                    float _3448;
                    float _3449;
                    float _3450;
                    uint _3451;
                    _3445 = _3300;
                    _3446 = _3301;
                    _3447 = _3302;
                    _3448 = _3303;
                    _3449 = _3304;
                    _3450 = _3305;
                    _3451 = _3315;
                    float _3372;
                    float _3373;
                    float _3374;
                    float _3375;
                    float _3376;
                    float _3377;
                    for (;;)
                    {
                        uint _3455 = uint(findLSB(_3451)) + (_3306 << 5u);
                        uint _3452 = (_3451 + 4294967295u) & _3451;
                        uint _3457 = _3455 * 48u;
                        vec4 _3471 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3457)).x, texelFetch(g_PointLightRenderingBuffer, int(_3457 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3457 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3457 + 3u)).x));
                        uint _3477 = (_3455 * 48u) + 4u;
                        vec4 _3490 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3477)).x, texelFetch(g_PointLightRenderingBuffer, int(_3477 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3477 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3477 + 3u)).x));
                        uint _3496 = (_3455 * 48u) + 8u;
                        vec3 _3507 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3496)).x, texelFetch(g_PointLightRenderingBuffer, int(_3496 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3496 + 2u)).x));
                        float _3511 = _3471.x - _2076;
                        float _3512 = _3471.y - _2077;
                        float _3513 = _3471.z - _2078;
                        float _3514 = dot(vec3(_3511, _3512, _3513), vec3(_3511, _3512, _3513));
                        float _3517 = inversesqrt(_3514);
                        float _3518 = _3517 * _3511;
                        float _3519 = _3517 * _3512;
                        float _3520 = _3517 * _3513;
                        float _3521 = dot(vec3(_785, _788, _791), vec3(_3518, _3519, _3520));
                        float _3526 = 1.0 - (_3514 * _3471.w);
                        float _4936 = isnan(0.0) ? _3526 : (isnan(_3526) ? 0.0 : max(_3526, 0.0));
                        float _3527 = isnan(1.0) ? _4936 : (isnan(_4936) ? 1.0 : min(_4936, 1.0));
                        float _3528 = sqrt(_3514) * _3490.w;
                        float _3531 = 1.39999997615814208984375 / (_3528 + 1.39999997615814208984375);
                        float _3532 = _3531 * _3531;
                        float _3535 = ((1.0 - _3532) * _3521) + _3532;
                        float _3538 = _3528 * _3528;
                        float _3542 = ((isnan(0.0) ? _3535 : (isnan(_3535) ? 0.0 : max(_3535, 0.0))) * _3527) / ((_3538 * 0.699999988079071044921875) + 1.0);
                        float _3546 = (-0.0) - _2076;
                        float _3547 = (-0.0) - _2077;
                        float _3548 = (-0.0) - _2078;
                        float _3552 = inversesqrt(dot(vec3(_3546, _3547, _3548), vec3(_3546, _3547, _3548)));
                        float _3553 = _3552 * _3546;
                        float _3554 = _3552 * _3547;
                        float _3555 = _3552 * _3548;
                        float _3562 = exp2(log2(1.0 / ((_3538 * 3.5) + 5.0)) * 0.25);
                        float _3563 = 1.0 - _988;
                        float _3570 = sqrt(1.0 - ((1.0 - (_3563 * _3563)) * (1.0 - (_3562 * _3562))));
                        float _3571 = _3570 * _3570;
                        float _3572 = _3571 * _3571;
                        float _3573 = _3553 + _3518;
                        float _3574 = _3554 + _3519;
                        float _3575 = _3555 + _3520;
                        float _3579 = inversesqrt(dot(vec3(_3573, _3574, _3575), vec3(_3573, _3574, _3575)));
                        float _3583 = dot(vec3(_785, _788, _791), vec3(_3553, _3554, _3555));
                        float _4952 = isnan(0.0) ? _3583 : (isnan(_3583) ? 0.0 : max(_3583, 0.0));
                        float _3586 = isnan(1.0) ? _4952 : (isnan(_4952) ? 1.0 : min(_4952, 1.0));
                        float _3587 = dot(vec3(_785, _788, _791), vec3(_3579 * _3573, _3579 * _3574, _3579 * _3575));
                        float _4963 = isnan(0.0) ? _3587 : (isnan(_3587) ? 0.0 : max(_3587, 0.0));
                        float _3590 = isnan(1.0) ? _4963 : (isnan(_4963) ? 1.0 : min(_4963, 1.0));
                        float _3594 = ((_3590 * _3590) * (_3572 + (-1.0))) + 1.0;
                        float _3595 = _3531 * _3571;
                        float _3596 = _3595 * _3595;
                        float _3599 = ((1.0 - _3596) * _3521) + _3596;
                        float _4974 = isnan(0.0) ? _3599 : (isnan(_3599) ? 0.0 : max(_3599, 0.0));
                        float _3600 = isnan(1.0) ? _4974 : (isnan(_4974) ? 1.0 : min(_4974, 1.0));
                        float _3601 = 1.0 - _3571;
                        float _3611 = (0.5 / (((_3600 * ((_3586 * _3601) + _3571)) + 9.9999999392252902907785028219223e-09) + (((_3600 * _3601) + _3571) * _3586))) * _3600;
                        float _4985 = isnan(0.0) ? _3611 : (isnan(_3611) ? 0.0 : max(_3611, 0.0));
                        float _3622 = (((_3572 * 3.1415927410125732421875) * (isnan(1.0) ? _4985 : (isnan(_4985) ? 1.0 : min(_4985, 1.0)))) / ((_3594 * _3594) * ((_3538 * 2.1991131305694580078125) + 3.141590118408203125))) * _3527;
                        _3375 = (_3542 * _3490.x) + _3448;
                        _3376 = (_3542 * _3490.y) + _3449;
                        _3377 = (_3542 * _3490.z) + _3450;
                        _3372 = (_3622 * _3507.x) + _3445;
                        _3373 = (_3622 * _3507.y) + _3446;
                        _3374 = (_3622 * _3507.z) + _3447;
                        if (_3452 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3445 = _3372;
                            _3446 = _3373;
                            _3447 = _3374;
                            _3448 = _3375;
                            _3449 = _3376;
                            _3450 = _3377;
                            _3451 = _3452;
                        }
                    }
                    frontier_phi_73_pred = _3377;
                    frontier_phi_73_pred_1 = _3376;
                    frontier_phi_73_pred_2 = _3375;
                    frontier_phi_73_pred_3 = _3374;
                    frontier_phi_73_pred_4 = _3373;
                    frontier_phi_73_pred_5 = _3372;
                }
                _3150 = frontier_phi_73_pred;
                _3148 = frontier_phi_73_pred_1;
                _3146 = frontier_phi_73_pred_2;
                _3144 = frontier_phi_73_pred_3;
                _3142 = frontier_phi_73_pred_4;
                _3140 = frontier_phi_73_pred_5;
                uint _3307 = _3306 + 1u;
                if (_3307 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3300 = _3140;
                    _3301 = _3142;
                    _3302 = _3144;
                    _3303 = _3146;
                    _3304 = _3148;
                    _3305 = _3150;
                    _3306 = _3307;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3139 = _3140;
            _3141 = _3142;
            _3143 = _3144;
            _3145 = _3146;
            _3147 = _3148;
            _3149 = _3150;
        }
        uvec4 _3153 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3154 = _3153.z;
        uint _3156 = (_3154 >> 8u) & 15u;
        float _3268;
        float _3270;
        float _3272;
        float _3274;
        float _3276;
        float _3278;
        if (((4294967295u << _3156) & _3017) == 0u)
        {
            _3268 = _3139;
            _3270 = _3141;
            _3272 = _3143;
            _3274 = _3145;
            _3276 = _3147;
            _3278 = _3149;
        }
        else
        {
            float _3293 = inversesqrt(dot(vec3(_2076, _2077, _2078), vec3(_2076, _2077, _2078)));
            float _3294 = _3293 * _2076;
            float _3295 = _3293 * _2077;
            float _3296 = _3293 * _2078;
            float frontier_phi_65_66_ladder;
            float frontier_phi_65_66_ladder_1;
            float frontier_phi_65_66_ladder_2;
            float frontier_phi_65_66_ladder_3;
            float frontier_phi_65_66_ladder_4;
            float frontier_phi_65_66_ladder_5;
            if (_3156 < ((_3154 >> 12u) & 15u))
            {
                float _3269;
                float _3271;
                float _3273;
                float _3275;
                float _3277;
                float _3279;
                float _3428 = _3139;
                float _3429 = _3141;
                float _3430 = _3143;
                float _3431 = _3145;
                float _3432 = _3147;
                float _3433 = _3149;
                uint _3434 = _3156;
                uint _3443;
                bool _3444;
                for (;;)
                {
                    _3443 = texelFetch(g_lightClassification, int((((_3011 << 5u) + (_2997 << 9u)) + (_3434 << 2u)) >> 2u)).x;
                    _3444 = _3443 == 0u;
                    float frontier_phi_84_pred;
                    float frontier_phi_84_pred_1;
                    float frontier_phi_84_pred_2;
                    float frontier_phi_84_pred_3;
                    float frontier_phi_84_pred_4;
                    float frontier_phi_84_pred_5;
                    if (_3444)
                    {
                        frontier_phi_84_pred = _3432;
                        frontier_phi_84_pred_1 = _3431;
                        frontier_phi_84_pred_2 = _3430;
                        frontier_phi_84_pred_3 = _3429;
                        frontier_phi_84_pred_4 = _3428;
                        frontier_phi_84_pred_5 = _3433;
                    }
                    else
                    {
                        float _3636;
                        float _3637;
                        float _3638;
                        float _3639;
                        float _3640;
                        float _3641;
                        float _3931;
                        float _3932;
                        float _3933;
                        float _3934;
                        float _3935;
                        float _3936;
                        float _3649 = _3428;
                        float _3650 = _3429;
                        float _3651 = _3430;
                        float _3652 = _3431;
                        float _3653 = _3432;
                        float _3654 = _3433;
                        uint _3655 = _3443;
                        uint _3656;
                        vec4 _3681;
                        float _3682;
                        vec4 _3697;
                        vec3 _3709;
                        vec4 _3724;
                        vec4 _3740;
                        float _3787;
                        bool _3788;
                        for (;;)
                        {
                            uint _3666 = ((_3434 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3655));
                            _3656 = (_3655 + 4294967295u) & _3655;
                            uint _3668 = _3666 * 40u;
                            _3681 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3668)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3668 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3668 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3668 + 3u)).x));
                            _3682 = _3681.w;
                            uint _3684 = (_3666 * 40u) + 4u;
                            _3697 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3684)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3684 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3684 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3684 + 3u)).x));
                            uint _3699 = (_3666 * 40u) + 8u;
                            _3709 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3699)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3699 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3699 + 2u)).x));
                            uint _3711 = (_3666 * 40u) + 16u;
                            _3724 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3711)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3711 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3711 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3711 + 3u)).x));
                            uint _3727 = (_3666 * 40u) + 20u;
                            _3740 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3727)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3727 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3727 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3727 + 3u)).x));
                            uint _3743 = (_3666 * 40u) + 24u;
                            vec4 _3756 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3743)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3743 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3743 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3743 + 3u)).x));
                            uint _3762 = (_3666 * 40u) + 28u;
                            vec4 _3775 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3762)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3762 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3762 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3762 + 3u)).x));
                            _3787 = fma(_2078, _3775.z, fma(_2077, _3775.y, _3775.x * _2076)) + _3775.w;
                            _3788 = !((fma(_2078, _3756.z, fma(_2077, _3756.y, _3756.x * _2076)) + _3756.w) <= 0.0);
                            float frontier_phi_90_pred;
                            float frontier_phi_90_pred_1;
                            float frontier_phi_90_pred_2;
                            float frontier_phi_90_pred_3;
                            float frontier_phi_90_pred_4;
                            float frontier_phi_90_pred_5;
                            if (_3788)
                            {
                                float _3815 = _3681.x - _2076;
                                float _3816 = _3681.y - _2077;
                                float _3817 = _3681.z - _2078;
                                float _3818 = dot(vec3(_3815, _3816, _3817), vec3(_3815, _3816, _3817));
                                float _3821 = inversesqrt(_3818);
                                float _3822 = _3821 * _3815;
                                float _3823 = _3821 * _3816;
                                float _3824 = _3821 * _3817;
                                float _3828 = 1.0 - (_3818 / (_3682 * _3682));
                                float _4996 = isnan(0.0) ? _3828 : (isnan(_3828) ? 0.0 : max(_3828, 0.0));
                                float _3829 = isnan(1.0) ? _4996 : (isnan(_4996) ? 1.0 : min(_4996, 1.0));
                                float _3833 = sqrt(_3818) * _3697.w;
                                float _3835 = 1.39999997615814208984375 / (_3833 + 1.39999997615814208984375);
                                float _3836 = _3835 * _3835;
                                float _3839 = ((1.0 - _3836) * dot(vec3(_3822, _3823, _3824), vec3(_785, _788, _791))) + _3836;
                                float _3842 = _3833 * _3833;
                                float _3846 = (fma(_2078, _3724.z, fma(_2077, _3724.y, _3724.x * _2076)) + _3724.w) / _3787;
                                float _3847 = (fma(_2078, _3740.z, fma(_2077, _3740.y, _3740.x * _2076)) + _3740.w) / _3787;
                                float _3851 = 1.0 - dot(vec2(_3846, _3847), vec2(_3846, _3847));
                                float _5012 = isnan(0.0) ? _3851 : (isnan(_3851) ? 0.0 : max(_3851, 0.0));
                                float _3852 = isnan(1.0) ? _5012 : (isnan(_5012) ? 1.0 : min(_5012, 1.0));
                                float _3853 = _3852 * (((isnan(0.0) ? _3839 : (isnan(_3839) ? 0.0 : max(_3839, 0.0))) * _3829) / ((_3842 * 0.699999988079071044921875) + 1.0));
                                float _3865 = exp2(log2(1.0 / ((_3842 * 3.5) + 5.0)) * 0.25);
                                float _3866 = 1.0 - _988;
                                float _3873 = sqrt(1.0 - ((1.0 - (_3866 * _3866)) * (1.0 - (_3865 * _3865))));
                                float _3874 = _3873 * _3873;
                                float _3875 = _3874 * _3874;
                                float _3876 = _3822 - _3294;
                                float _3877 = _3823 - _3295;
                                float _3878 = _3824 - _3296;
                                float _3882 = inversesqrt(dot(vec3(_3876, _3877, _3878), vec3(_3876, _3877, _3878)));
                                float _3886 = dot(vec3(_785, _788, _791), vec3((-0.0) - _3294, (-0.0) - _3295, (-0.0) - _3296));
                                float _5023 = isnan(0.0) ? _3886 : (isnan(_3886) ? 0.0 : max(_3886, 0.0));
                                float _3889 = isnan(1.0) ? _5023 : (isnan(_5023) ? 1.0 : min(_5023, 1.0));
                                float _3890 = dot(vec3(_785, _788, _791), vec3(_3882 * _3876, _3882 * _3877, _3882 * _3878));
                                float _5034 = isnan(0.0) ? _3890 : (isnan(_3890) ? 0.0 : max(_3890, 0.0));
                                float _3893 = isnan(1.0) ? _5034 : (isnan(_5034) ? 1.0 : min(_5034, 1.0));
                                float _3897 = ((_3893 * _3893) * (_3875 + (-1.0))) + 1.0;
                                float _3898 = _3835 * _3874;
                                float _3899 = _3898 * _3898;
                                float _3905 = ((1.0 - _3899) * dot(vec3(_785, _788, _791), vec3(_3822, _3823, _3824))) + _3899;
                                float _5045 = isnan(0.0) ? _3905 : (isnan(_3905) ? 0.0 : max(_3905, 0.0));
                                float _3906 = isnan(1.0) ? _5045 : (isnan(_5045) ? 1.0 : min(_5045, 1.0));
                                float _3907 = 1.0 - _3874;
                                float _3917 = (0.5 / (((_3906 * ((_3889 * _3907) + _3874)) + 9.9999999392252902907785028219223e-09) + (((_3906 * _3907) + _3874) * _3889))) * _3906;
                                float _5056 = isnan(0.0) ? _3917 : (isnan(_3917) ? 0.0 : max(_3917, 0.0));
                                float _3927 = (_3852 * _3829) * (((_3875 * 3.1415927410125732421875) * (isnan(1.0) ? _5056 : (isnan(_5056) ? 1.0 : min(_5056, 1.0)))) / ((_3897 * _3897) * ((_3842 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_90_pred = _3853 * _3697.y;
                                frontier_phi_90_pred_1 = _3853 * _3697.x;
                                frontier_phi_90_pred_2 = _3927 * _3709.z;
                                frontier_phi_90_pred_3 = _3927 * _3709.y;
                                frontier_phi_90_pred_4 = _3927 * _3709.x;
                                frontier_phi_90_pred_5 = _3853 * _3697.z;
                            }
                            else
                            {
                                frontier_phi_90_pred = 0.0;
                                frontier_phi_90_pred_1 = 0.0;
                                frontier_phi_90_pred_2 = 0.0;
                                frontier_phi_90_pred_3 = 0.0;
                                frontier_phi_90_pred_4 = 0.0;
                                frontier_phi_90_pred_5 = 0.0;
                            }
                            _3935 = frontier_phi_90_pred;
                            _3934 = frontier_phi_90_pred_1;
                            _3933 = frontier_phi_90_pred_2;
                            _3932 = frontier_phi_90_pred_3;
                            _3931 = frontier_phi_90_pred_4;
                            _3936 = frontier_phi_90_pred_5;
                            _3639 = _3934 + _3652;
                            _3640 = _3935 + _3653;
                            _3641 = _3936 + _3654;
                            _3636 = _3931 + _3649;
                            _3637 = _3932 + _3650;
                            _3638 = _3933 + _3651;
                            if (_3656 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3649 = _3636;
                                _3650 = _3637;
                                _3651 = _3638;
                                _3652 = _3639;
                                _3653 = _3640;
                                _3654 = _3641;
                                _3655 = _3656;
                                continue;
                            }
                        }
                        frontier_phi_84_pred = _3640;
                        frontier_phi_84_pred_1 = _3639;
                        frontier_phi_84_pred_2 = _3638;
                        frontier_phi_84_pred_3 = _3637;
                        frontier_phi_84_pred_4 = _3636;
                        frontier_phi_84_pred_5 = _3641;
                    }
                    _3277 = frontier_phi_84_pred;
                    _3275 = frontier_phi_84_pred_1;
                    _3273 = frontier_phi_84_pred_2;
                    _3271 = frontier_phi_84_pred_3;
                    _3269 = frontier_phi_84_pred_4;
                    _3279 = frontier_phi_84_pred_5;
                    uint _3435 = _3434 + 1u;
                    if (_3435 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3428 = _3269;
                        _3429 = _3271;
                        _3430 = _3273;
                        _3431 = _3275;
                        _3432 = _3277;
                        _3433 = _3279;
                        _3434 = _3435;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_65_66_ladder = _3279;
                frontier_phi_65_66_ladder_1 = _3275;
                frontier_phi_65_66_ladder_2 = _3277;
                frontier_phi_65_66_ladder_3 = _3271;
                frontier_phi_65_66_ladder_4 = _3269;
                frontier_phi_65_66_ladder_5 = _3273;
            }
            else
            {
                frontier_phi_65_66_ladder = _3149;
                frontier_phi_65_66_ladder_1 = _3145;
                frontier_phi_65_66_ladder_2 = _3147;
                frontier_phi_65_66_ladder_3 = _3141;
                frontier_phi_65_66_ladder_4 = _3139;
                frontier_phi_65_66_ladder_5 = _3143;
            }
            _3268 = frontier_phi_65_66_ladder_4;
            _3270 = frontier_phi_65_66_ladder_3;
            _3272 = frontier_phi_65_66_ladder_5;
            _3274 = frontier_phi_65_66_ladder_1;
            _3276 = frontier_phi_65_66_ladder_2;
            _3278 = frontier_phi_65_66_ladder;
        }
        float _3283 = isnan(1.0) ? _972 : (isnan(_972) ? 1.0 : min(_972, 1.0));
        _3029 = (_3283 * _3274) + _2542;
        _3031 = (_3283 * _3276) + _2544;
        _3033 = (_3283 * _3278) + _2546;
        _3035 = ((_3268 * _958) * _3283) + _2880;
        _3037 = ((_3270 * _959) * _3283) + _2882;
        _3039 = ((_3272 * _960) * _3283) + _2884;
    }
    else
    {
        _3029 = _2542;
        _3031 = _2544;
        _3033 = _2546;
        _3035 = _2880;
        _3037 = _2882;
        _3039 = _2884;
    }
    uint _3045 = _865 + uint(cbMatDynParam._m0[0u].w);
    float _3055 = ((((cbMtdParam._m0[12u].x * cbMtdParam._m0[16u].z) * cbMtdParam._m0[15u].w) * _593) * _606.x) * cbInstanceData._m0[_3045].x;
    float _3060 = ((((cbMtdParam._m0[12u].y * cbMtdParam._m0[16u].z) * cbMtdParam._m0[15u].w) * _593) * _606.y) * cbInstanceData._m0[_3045].y;
    float _3065 = ((((cbMtdParam._m0[12u].z * cbMtdParam._m0[16u].z) * cbMtdParam._m0[15u].w) * _593) * _606.z) * cbInstanceData._m0[_3045].z;
    float _5072 = isnan(0.0) ? _949 : (isnan(_949) ? 0.0 : max(_949, 0.0));
    float _5083 = isnan(0.0) ? _950 : (isnan(_950) ? 0.0 : max(_950, 0.0));
    float _5094 = isnan(0.0) ? _951 : (isnan(_951) ? 0.0 : max(_951, 0.0));
    float _5105 = isnan(0.0) ? _664 : (isnan(_664) ? 0.0 : max(_664, 0.0));
    float _3083 = (((isnan(1.0) ? _5072 : (isnan(_5072) ? 1.0 : min(_5072, 1.0))) * (_3029 + ((isnan(0.0) ? _1732 : (isnan(_1732) ? 0.0 : max(_1732, 0.0))) * _972))) + ((_3035 + ((isnan(0.0) ? _2023 : (isnan(_2023) ? 0.0 : max(_2023, 0.0))) * _1808)) * cbPerFrame._m0[3u].x)) + _3055;
    float _3085 = (_3060 + ((_3037 + ((isnan(0.0) ? _2026 : (isnan(_2026) ? 0.0 : max(_2026, 0.0))) * _1808)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _5083 : (isnan(_5083) ? 1.0 : min(_5083, 1.0))) * (_3031 + ((isnan(0.0) ? _1735 : (isnan(_1735) ? 0.0 : max(_1735, 0.0))) * _972)));
    float _3087 = (_3065 + ((_3039 + ((isnan(0.0) ? _2029 : (isnan(_2029) ? 0.0 : max(_2029, 0.0))) * _1808)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _5094 : (isnan(_5094) ? 1.0 : min(_5094, 1.0))) * (_3033 + ((isnan(0.0) ? _1738 : (isnan(_1738) ? 0.0 : max(_1738, 0.0))) * _972)));
    float _3088 = isnan(0.0) ? _3083 : (isnan(_3083) ? 0.0 : max(_3083, 0.0));
    float _3089 = isnan(0.0) ? _3085 : (isnan(_3085) ? 0.0 : max(_3085, 0.0));
    float _3090 = isnan(0.0) ? _3087 : (isnan(_3087) ? 0.0 : max(_3087, 0.0));
    float _3096 = cbMtdParam._m0[2u].x * _3055;
    float _3097 = cbMtdParam._m0[2u].y * _3060;
    float _3098 = cbMtdParam._m0[2u].z * _3065;
    float _5131 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _3100 = isnan(1.0) ? _5131 : (isnan(_5131) ? 1.0 : min(_5131, 1.0));
    float _3105 = cbInstanceData._m0[_864 + 6u].w * (isnan(1.0) ? _5105 : (isnan(_5105) ? 1.0 : min(_5105, 1.0)));
    float _3110 = _762 / cbSceneParam._m0[86u].x;
    float _3111 = _763 / cbSceneParam._m0[86u].y;
    vec4 _3125 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3110, _3111, (log2((isnan(cbSceneParam._m0[77u].w) ? _685 : (isnan(_685) ? cbSceneParam._m0[77u].w : min(_685, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3127 = _3125.x;
    float _3128 = _3125.y;
    float _3129 = _3125.z;
    float _3130 = _3125.w;
    float _3201;
    float _3203;
    float _3205;
    float _3207;
    if (_685 > cbSceneParam._m0[78u].w)
    {
        float _3164 = isnan(_685) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _685 : min(cbSceneParam._m0[80u].w, _685));
        float _3165 = _3164 / _685;
        float _3176 = _3165 * _735;
        float _3177 = _736 * _3165;
        float _3178 = (-0.0) - _3177;
        float _3179 = _3165 * _737;
        float _3181 = (cbSceneParam._m0[77u].w * _3178) / _3164;
        float _3182 = _3181 + cbSceneParam._m0[79u].w;
        float _3183 = cbSceneParam._m0[79u].w - _3177;
        float _3189 = sqrt(((_3176 * _3176) + (_3177 * _3177)) + (_3179 * _3179));
        float _3192 = (1.0 - (cbSceneParam._m0[77u].w / _3164)) * _3189;
        float _3197 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3199 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3385;
        if (abs((_3178 - _3181) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3385 = ((((_3182 > 0.0) ? exp2(_3197 * _3182) : (2.0 - exp2(_3199 * _3182))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3192;
        }
        else
        {
            float _3329 = 1.0 / cbSceneParam._m0[80u].x;
            float _3330 = isnan(_3183) ? _3182 : (isnan(_3182) ? _3183 : max(_3182, _3183));
            float _3331 = isnan(_3183) ? _3182 : (isnan(_3182) ? _3183 : min(_3182, _3183));
            float _3340 = isnan(0.0) ? _3330 : (isnan(_3330) ? 0.0 : min(_3330, 0.0));
            float _3341 = isnan(0.0) ? _3331 : (isnan(_3331) ? 0.0 : min(_3331, 0.0));
            _3385 = ((abs(_3189 / _3178) * cbSceneParam._m0[80u].y) * ((((_3340 - _3341) * 2.0) - ((exp2(_3197 * (isnan(0.0) ? _3330 : (isnan(_3330) ? 0.0 : max(_3330, 0.0)))) - exp2(_3197 * (isnan(0.0) ? _3331 : (isnan(_3331) ? 0.0 : max(_3331, 0.0))))) * _3329)) - ((exp2(_3199 * _3340) - exp2(_3199 * _3341)) * _3329))) + (_3192 * cbSceneParam._m0[80u].z);
        }
        vec4 _3387 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3110, _3111, 1.0), 0.0);
        float _3396 = exp2((_3385 * (-1.44269502162933349609375)) * (1.0 - _3387.w));
        float _3397 = log2(_3396);
        float _3413 = log2(_3130);
        _3201 = (exp2(_3413 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3397 * cbSceneParam._m0[78u].x)) * _3387.x) / cbSceneParam._m0[78u].x)) + _3127;
        _3203 = (exp2(_3413 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3397 * cbSceneParam._m0[78u].y)) * _3387.y) / cbSceneParam._m0[78u].y)) + _3128;
        _3205 = (exp2(_3413 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3397 * cbSceneParam._m0[78u].z)) * _3387.z) / cbSceneParam._m0[78u].z)) + _3129;
        _3207 = _3396 * _3130;
    }
    else
    {
        _3201 = _3127;
        _3203 = _3128;
        _3205 = _3129;
        _3207 = _3130;
    }
    bool _3423;
    vec4 _3217;
    vec4 _3239;
    float _3241;
    float _3245;
    float _3246;
    float _3247;
    float _3250;
    float _3253;
    float _3256;
    float _3257;
    bool _3267;
    for (;;)
    {
        _3217 = cbMatDynParam._m0[0u];
        float _3219 = roundEven(_3217.y);
        bool _3220 = _3219 == 3.0;
        float _3221 = log2(_3207);
        float _3225 = exp2(_3221 * cbSceneParam._m0[78u].x);
        float _3226 = exp2(_3221 * cbSceneParam._m0[78u].y);
        float _3227 = exp2(_3221 * cbSceneParam._m0[78u].z);
        float _3228 = _3225 * _3088;
        float _3229 = _3226 * _3089;
        float _3230 = _3227 * _3090;
        float _3237 = _751 + (-0.5);
        _3239 = cbMtdParam._m0[1u];
        _3241 = _3239.y * _3237;
        float _3244 = (_3219 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3245 = _3244 * (_3220 ? _3228 : (_3228 + (cbSceneParam._m0[72u].w * _3201)));
        _3246 = _3244 * (_3220 ? _3229 : (_3229 + (cbSceneParam._m0[72u].w * _3203)));
        _3247 = _3244 * (_3220 ? _3230 : (_3230 + (cbSceneParam._m0[72u].w * _3205)));
        _3250 = ((_3096 * _3100) * _3225) * _3244;
        _3253 = ((_3097 * _3100) * _3226) * _3244;
        _3256 = ((_3098 * _3100) * _3227) * _3244;
        _3257 = _3237 * 0.999000012874603271484375;
        _3267 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3267)
        {
            if ((cbInstanceData._m0[_864 + 7u].x + _3257) < 0.5)
            {
                _3423 = true;
                break;
            }
        }
        uint _3364 = _865 + uint(_3217.w);
        if ((cbInstanceData._m0[_3364].w < 1.0) && ((cbInstanceData._m0[_3364].w + _3257) < 0.5))
        {
            _3423 = true;
            break;
        }
        if ((_3241 + _442) < _3239.x)
        {
            _3423 = true;
            break;
        }
        _3423 = false;
        break;
    }
    float _3627;
    if (_3423)
    {
        discard_state = true;
        _3627 = 0.0;
    }
    else
    {
        _3627 = _3105;
    }
    SV_Target.x = _3245;
    SV_Target.y = _3246;
    SV_Target.z = _3247;
    SV_Target.w = _3627;
    SV_Target_1.x = _3250;
    SV_Target_1.y = _3253;
    SV_Target_1.z = _3256;
    SV_Target_1.w = _3105;
    discard_exit();
}


