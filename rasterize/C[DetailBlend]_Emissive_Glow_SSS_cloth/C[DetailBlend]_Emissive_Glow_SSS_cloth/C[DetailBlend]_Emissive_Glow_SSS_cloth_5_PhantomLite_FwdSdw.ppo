#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[18];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_1;
layout(set = 0, binding = 1) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_7;
layout(set = 0, binding = 10) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_6;
layout(set = 0, binding = 2) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_0;
layout(set = 0, binding = 3) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_10;
layout(set = 0, binding = 4) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_11;
layout(set = 0, binding = 5) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_12;
layout(set = 0, binding = 6) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_2;
layout(set = 0, binding = 7) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_3;
layout(set = 0, binding = 9) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_5;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1373;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _211 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _212 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _213 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _219 = inversesqrt(dot(vec3(_211, _212, _213), vec3(_211, _212, _213)));
    float _226 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _227 = _226 * NORMAL.x;
    float _228 = _226 * NORMAL.y;
    float _229 = _226 * NORMAL.z;
    float _233 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _241;
    float _242;
    float _243;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _241 = (-0.0) - _227;
        _242 = (-0.0) - _228;
        _243 = (-0.0) - _229;
    }
    else
    {
        _241 = _227;
        _242 = _228;
        _243 = _229;
    }
    float _287 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _297 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _287);
    float _298 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _287);
    float _299 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _287);
    vec4 _312 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _317 = _312.z;
    float _324 = exp2(log2(_317 * 22.0) * 260.0);
    float _325 = isnan(0.0) ? _324 : (isnan(_324) ? 0.0 : max(_324, 0.0));
    float _326 = isnan(1.0) ? _325 : (isnan(_325) ? 1.0 : min(_325, 1.0));
    vec4 _340 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _350 = cbMtdParam._m0[10u].x * _340.x;
    float _351 = cbMtdParam._m0[10u].y * _340.y;
    float _352 = cbMtdParam._m0[10u].z * _340.z;
    vec4 _364 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _379 = exp2(log2(1.0 - _312.w) * 8.0);
    vec4 _391 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_10, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    vec4 _416 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _438 = (((((_364.x * 4.55000019073486328125) * cbMtdParam._m0[9u].x) * _416.x) - _350) * _326) + _350;
    float _439 = (((((_364.y * 4.55000019073486328125) * cbMtdParam._m0[9u].y) * _416.y) - _351) * _326) + _351;
    float _440 = (((((_364.z * 4.55000019073486328125) * cbMtdParam._m0[9u].z) * _416.z) - _352) * _326) + _352;
    float _447 = (((cbMtdParam._m0[13u].x * _391.x) - _438) * _379) + _438;
    float _448 = (((cbMtdParam._m0[13u].y * _391.y) - _439) * _379) + _439;
    float _449 = (((cbMtdParam._m0[13u].z * _391.z) - _440) * _379) + _440;
    float _450 = _416.w * _364.w;
    float _480 = (((texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w)).x - cbMtdParam._m0[17u].x) + cbMtdParam._m0[16u].x) * _326) + cbMtdParam._m0[17u].x;
    float _483 = ((cbMtdParam._m0[15u].z - _480) * _379) + _480;
    vec4 _495 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w));
    float _497 = _495.x;
    float _498 = _495.y;
    float _504 = cbMtdParam._m0[14u].y + _495.z;
    vec4 _516 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w));
    vec4 _535 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _546 = ((((_317 * 2.0) * (cbMtdParam._m0[14u].x + _516.z)) - _504) * _326) + _504;
    float _550 = (((_535.z - _546) + cbMtdParam._m0[15u].y) * _379) + _546;
    float _565 = abs((fract(cbMtdParam._m0[15u].x * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _4037 = isnan(0.0) ? _565 : (isnan(_565) ? 0.0 : max(_565, 0.0));
    float _566 = isnan(1.0) ? _4037 : (isnan(_4037) ? 1.0 : min(_4037, 1.0));
    float _571 = (_566 * _566) * (3.0 - (_566 * 2.0));
    vec4 _584 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _592 = (_312.x * 2.0) + (-1.0);
    float _593 = (_312.y * 2.0) + (-1.0);
    float _594 = dot(vec2(_592, _593), vec2(_592, _593));
    float _4048 = isnan(0.0) ? _594 : (isnan(_594) ? 0.0 : max(_594, 0.0));
    float _599 = sqrt(1.0 - (isnan(1.0) ? _4048 : (isnan(_4048) ? 1.0 : min(_4048, 1.0))));
    float _604 = ((_516.x - _497) * _326) + _497;
    float _605 = ((_516.y - _498) * _326) + _498;
    float _618 = (cbMtdParam._m0[14u].z * (((((_535.x - _604) * _379) + _604) * 2.0) + (-1.0))) + _592;
    float _619 = (cbMtdParam._m0[14u].z * (((((_535.y - _605) * _379) + _605) * 2.0) + (-1.0))) + _593;
    float _622 = fma(_599, _241, fma(_619, _233 * TANGENT.x, (_219 * _211) * _618));
    float _625 = fma(_599, _242, fma(_619, _233 * TANGENT.y, (_219 * _212) * _618));
    float _628 = fma(_599, _243, fma(_619, _233 * TANGENT.z, (_219 * _213) * _618));
    float _632 = inversesqrt(dot(vec3(_622, _625, _628), vec3(_622, _625, _628)));
    float _633 = _632 * _622;
    float _634 = _632 * _625;
    float _635 = _632 * _628;
    float _4059 = isnan(0.0) ? _450 : (isnan(_450) ? 0.0 : max(_450, 0.0));
    float _636 = isnan(1.0) ? _4059 : (isnan(_4059) ? 1.0 : min(_4059, 1.0));
    float _4070 = isnan(0.0) ? _550 : (isnan(_550) ? 0.0 : max(_550, 0.0));
    float _637 = isnan(1.0) ? _4070 : (isnan(_4070) ? 1.0 : min(_4070, 1.0));
    float _4081 = isnan(0.0) ? _447 : (isnan(_447) ? 0.0 : max(_447, 0.0));
    float _638 = isnan(1.0) ? _4081 : (isnan(_4081) ? 1.0 : min(_4081, 1.0));
    float _4092 = isnan(0.0) ? _448 : (isnan(_448) ? 0.0 : max(_448, 0.0));
    float _639 = isnan(1.0) ? _4092 : (isnan(_4092) ? 1.0 : min(_4092, 1.0));
    float _4103 = isnan(0.0) ? _449 : (isnan(_449) ? 0.0 : max(_449, 0.0));
    float _640 = isnan(1.0) ? _4103 : (isnan(_4103) ? 1.0 : min(_4103, 1.0));
    float _4114 = isnan(0.0) ? _483 : (isnan(_483) ? 0.0 : max(_483, 0.0));
    float _641 = isnan(1.0) ? _4114 : (isnan(_4114) ? 1.0 : min(_4114, 1.0));
    float _649 = cbMatDynParam._m0[9u].x * _638;
    float _650 = cbMatDynParam._m0[9u].y * _639;
    float _651 = cbMatDynParam._m0[9u].z * _640;
    float _658 = inversesqrt(dot(vec3(_297, _298, _299), vec3(_297, _298, _299)));
    float _659 = _658 * _297;
    float _660 = _658 * _298;
    float _661 = _658 * _299;
    float _662 = dot(vec3(_633, _634, _635), vec3(_659, _660, _661));
    float _668 = abs(exp2(log2(_662) * cbMatDynParam._m0[12u].x));
    float _669 = isnan(0.100000001490116119384765625) ? _668 : (isnan(_668) ? 0.100000001490116119384765625 : max(_668, 0.100000001490116119384765625));
    float _675 = ((isnan(0.699999988079071044921875) ? _669 : (isnan(_669) ? 0.699999988079071044921875 : min(_669, 0.699999988079071044921875))) + (-0.100000001490116119384765625)) * 1.66666662693023681640625;
    float _697 = 1.0 - cbMatDynParam._m0[8u].w;
    float _4135 = isnan(0.0) ? _697 : (isnan(_697) ? 0.0 : max(_697, 0.0));
    float _700 = 1.0 - cbMatDynParam._m0[7u].w;
    float _4146 = isnan(0.0) ? _700 : (isnan(_700) ? 0.0 : max(_700, 0.0));
    float _701 = isnan(1.0) ? _4146 : (isnan(_4146) ? 1.0 : min(_4146, 1.0));
    float _704 = (((isnan(1.0) ? _4135 : (isnan(_4135) ? 1.0 : min(_4135, 1.0))) - _701) * _675) + _701;
    float _723 = dot(vec3(_633, _634, _635), vec3(0.0, -1.0, 0.0));
    float _4157 = isnan(0.0) ? _723 : (isnan(_723) ? 0.0 : max(_723, 0.0));
    float _726 = isnan(1.0) ? _4157 : (isnan(_4157) ? 1.0 : min(_4157, 1.0));
    float _733 = (_726 * _638) * cbMatDynParam._m0[11u].x;
    float _735 = (_726 * _639) * cbMatDynParam._m0[11u].y;
    float _737 = (_726 * _640) * cbMatDynParam._m0[11u].z;
    float _744 = dot(vec3(_659, _660, _661), vec3(_633, _634, _635));
    float _747 = _744 * 2.0;
    float _757 = dot(vec3((-0.0) - (_659 - (_747 * _633)), (-0.0) - (_660 - (_747 * _634)), (-0.0) - (_661 - (_747 * _635))), vec3(0.0, -1.0, 0.0));
    float _4168 = isnan(0.0) ? _757 : (isnan(_757) ? 0.0 : max(_757, 0.0));
    float _764 = exp2(log2(isnan(1.0) ? _4168 : (isnan(_4168) ? 1.0 : min(_4168, 1.0))) * 4.0);
    float _790 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _796 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _797 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _799 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _801 = _799.w;
    float _819 = fma(_635, cbSceneParam._m0[5u].z, fma(_634, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _633));
    float _822 = fma(_635, cbSceneParam._m0[6u].z, fma(_634, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _633));
    float _825 = fma(_635, cbSceneParam._m0[7u].z, fma(_634, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _633));
    vec4 _827 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _829 = _827.x;
    float _841 = (((_827.y - _637) + (_827.w * _637)) * cbMtdParam._m0[3u].x) + _637;
    vec4 _842 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _858 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3(cbMtdParam._m0[3u].x * (_829 * _829)), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * _842.z;
    float _866 = (((cbMatDynParam._m0[15u].x - _641) * cbMatDynParam._m0[15u].w) * _858) + _641;
    float _874 = ((_858 * cbMatDynParam._m0[16u].z) * (cbMatDynParam._m0[16u].x - _841)) + _841;
    uint _898 = uint(roundEven(NORMAL.w)) * 13u;
    uint _899 = _898 + 9u;
    uint _900 = _899 + uint(cbMatDynParam._m0[0u].w);
    float _906 = (cbMtdParam._m0[0u].x * _649) * cbInstanceData._m0[_900].x;
    float _907 = (cbMtdParam._m0[0u].y * _650) * cbInstanceData._m0[_900].y;
    float _908 = (cbMtdParam._m0[0u].z * _651) * cbInstanceData._m0[_900].z;
    float _4179 = isnan(0.0) ? _906 : (isnan(_906) ? 0.0 : max(_906, 0.0));
    float _909 = isnan(1.0) ? _4179 : (isnan(_4179) ? 1.0 : min(_4179, 1.0));
    float _4190 = isnan(0.0) ? _907 : (isnan(_907) ? 0.0 : max(_907, 0.0));
    float _910 = isnan(1.0) ? _4190 : (isnan(_4190) ? 1.0 : min(_4190, 1.0));
    float _4201 = isnan(0.0) ? _908 : (isnan(_908) ? 0.0 : max(_908, 0.0));
    float _911 = isnan(1.0) ? _4201 : (isnan(_4201) ? 1.0 : min(_4201, 1.0));
    vec4 _912 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _917 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _928 = (((_917.x - _866) + (_917.w * _866)) * cbMtdParam._m0[3u].x) + _866;
    float _941 = (cbMtdParam._m0[3u].x * (((_909 * _801) - _909) + _912.x)) + _909;
    float _942 = (cbMtdParam._m0[3u].x * (((_910 * _801) - _910) + _912.y)) + _910;
    float _943 = (cbMtdParam._m0[3u].x * (((_911 * _801) - _911) + _912.z)) + _911;
    vec4 _944 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _957 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3((_866 * (_649 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625, (_866 * (_650 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625, (_866 * (_651 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * _944.z;
    float _961 = _957 * cbMatDynParam._m0[13u].w;
    float _971 = (_961 * (cbMatDynParam._m0[13u].x - _941)) + _941;
    float _972 = (_961 * (cbMatDynParam._m0[13u].y - _942)) + _942;
    float _973 = (_961 * (cbMatDynParam._m0[13u].z - _943)) + _943;
    float _981 = ((_957 * cbMatDynParam._m0[15u].w) * (cbMatDynParam._m0[15u].x - _928)) + _928;
    float _982 = 1.0 - _981;
    float _983 = _982 * _971;
    float _984 = _982 * _972;
    float _985 = _982 * _973;
    float _989 = (_971 + (-0.039999999105930328369140625)) * _981;
    float _990 = (_972 + (-0.039999999105930328369140625)) * _981;
    float _991 = (_973 + (-0.039999999105930328369140625)) * _981;
    float _992 = _989 + 0.039999999105930328369140625;
    float _993 = _990 + 0.039999999105930328369140625;
    float _994 = _991 + 0.039999999105930328369140625;
    vec4 _1003 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _796, cbSceneParam._m0[86u].y * _797));
    float _1006 = _1003.x * TEXCOORD_4;
    float _1007 = _662 * 2.0;
    float _1011 = (_1007 * _633) - _659;
    float _1012 = (_1007 * _634) - _660;
    float _1013 = (_1007 * _635) - _661;
    float _1014 = abs(_744);
    float _4212 = isnan(0.0) ? _1014 : (isnan(_1014) ? 0.0 : max(_1014, 0.0));
    float _1016 = sqrt(_874);
    float _1027 = exp2((_1016 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4212 : (isnan(_4212) ? 1.0 : min(_4212, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1016 * 3.0));
    float _1033 = (1.0 - _1027) * ((_1016 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1034 = _1027 * _1016;
    float _1062 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1066 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1070 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1372;
    float _1374;
    float _1375;
    float _1376;
    float _1377;
    float _1378;
    float _1379;
    float _1380;
    float _1381;
    float _1382;
    float _1383;
    float _1384;
    float _1385;
    float _1386;
    float _1387;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1097 = fma(_1070, cbModelParam._m0[26u].z, fma(_1066, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1062));
        float _1101 = fma(_1070, cbModelParam._m0[27u].z, fma(_1066, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1062));
        float _1105 = fma(_1070, cbModelParam._m0[28u].z, fma(_1066, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1062));
        float _1130 = _1062 + _633;
        float _1131 = _1066 + _634;
        float _1132 = _1070 + _635;
        float _1142 = fma(_1132, cbModelParam._m0[26u].z, fma(_1131, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1130)) - _1097;
        float _1143 = fma(_1132, cbModelParam._m0[27u].z, fma(_1131, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1130)) - _1101;
        float _1144 = fma(_1132, cbModelParam._m0[28u].z, fma(_1131, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1130)) - _1105;
        float _1148 = inversesqrt(dot(vec3(_1142, _1143, _1144), vec3(_1142, _1143, _1144)));
        float _1161 = ((_1148 * _1142) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1097 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1162 = ((_1148 * _1143) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1101 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1163 = ((_1148 * _1144) / cbModelParam._m0[34u].z) + ((((((_1105 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1166 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1161, _1162, _1163), 0.0);
        vec4 _1173 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1161, _1162, _1163), 0.0);
        vec4 _1180 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1161, _1162, _1163), 0.0);
        vec4 _1187 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1161, _1162, _1163), 0.0);
        float _1200 = exp2((_1166.w + (-0.5)) * 20.0) * 2.0;
        float _1201 = _1200 * (_1166.x + (-0.5));
        float _1202 = _1200 * (_1166.y + (-0.5));
        float _1203 = _1200 * (_1166.z + (-0.5));
        float _1210 = exp2((_1173.w + (-0.5)) * 20.0) * 2.0;
        float _1211 = _1210 * (_1173.x + (-0.5));
        float _1212 = _1210 * (_1173.y + (-0.5));
        float _1213 = _1210 * (_1173.z + (-0.5));
        float _1220 = exp2((_1180.w + (-0.5)) * 20.0) * 2.0;
        float _1221 = _1220 * (_1180.x + (-0.5));
        float _1222 = _1220 * (_1180.y + (-0.5));
        float _1223 = _1220 * (_1180.z + (-0.5));
        float _1230 = exp2((_1187.w + (-0.5)) * 20.0) * 2.0;
        float _1231 = _1230 * (_1187.x + (-0.5));
        float _1232 = _1230 * (_1187.y + (-0.5));
        float _1233 = _1230 * (_1187.z + (-0.5));
        float _1234 = isnan(0.0) ? _1231 : (isnan(_1231) ? 0.0 : max(_1231, 0.0));
        float _1235 = isnan(0.0) ? _1232 : (isnan(_1232) ? 0.0 : max(_1232, 0.0));
        float _1236 = isnan(0.0) ? _1233 : (isnan(_1233) ? 0.0 : max(_1233, 0.0));
        float _1237 = _1201 * 0.5;
        float _1238 = _1211 * 0.5;
        float _1239 = _1221 * 0.5;
        float _1240 = dot(vec3(_1237, _1238, _1239), vec3(_1237, _1238, _1239));
        float _1245 = (_1240 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1240);
        float _1254 = (dot(vec3(_633, _634, _635), vec3(_1245 * _1237, _1245 * _1238, _1245 * _1239)) + 1.0) * 0.5;
        float _4238 = isnan(0.0) ? _1254 : (isnan(_1254) ? 0.0 : max(_1254, 0.0));
        float _1264 = sqrt(((_1238 * _1238) + (_1237 * _1237)) + (_1239 * _1239)) / (_1234 + 9.9999997473787516355514526367188e-06);
        float _4249 = isnan(0.0) ? _1264 : (isnan(_1264) ? 0.0 : max(_1264, 0.0));
        float _1265 = isnan(1.0) ? _4249 : (isnan(_4249) ? 1.0 : min(_4249, 1.0));
        float _1266 = _1265 * 2.0;
        float _1270 = (1.0 - _1265) / (_1265 + 1.0);
        float _4260 = isnan(0.0) ? _1270 : (isnan(_1270) ? 0.0 : max(_1270, 0.0));
        float _1271 = isnan(1.0) ? _4260 : (isnan(_4260) ? 1.0 : min(_4260, 1.0));
        float _1280 = ((((1.0 - _1271) * (_1266 + 2.0)) * exp2(log2(isnan(1.0) ? _4238 : (isnan(_4238) ? 1.0 : min(_4238, 1.0))) * (_1266 + 1.0))) + _1271) * _1234;
        float _1281 = _1202 * 0.5;
        float _1282 = _1212 * 0.5;
        float _1283 = _1222 * 0.5;
        float _1284 = dot(vec3(_1281, _1282, _1283), vec3(_1281, _1282, _1283));
        float _1289 = (_1284 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1284);
        float _1297 = (dot(vec3(_633, _634, _635), vec3(_1289 * _1281, _1289 * _1282, _1289 * _1283)) + 1.0) * 0.5;
        float _4271 = isnan(0.0) ? _1297 : (isnan(_1297) ? 0.0 : max(_1297, 0.0));
        float _1306 = sqrt(((_1282 * _1282) + (_1281 * _1281)) + (_1283 * _1283)) / (_1235 + 9.9999997473787516355514526367188e-06);
        float _4282 = isnan(0.0) ? _1306 : (isnan(_1306) ? 0.0 : max(_1306, 0.0));
        float _1307 = isnan(1.0) ? _4282 : (isnan(_4282) ? 1.0 : min(_4282, 1.0));
        float _1308 = _1307 * 2.0;
        float _1312 = (1.0 - _1307) / (_1307 + 1.0);
        float _4293 = isnan(0.0) ? _1312 : (isnan(_1312) ? 0.0 : max(_1312, 0.0));
        float _1313 = isnan(1.0) ? _4293 : (isnan(_4293) ? 1.0 : min(_4293, 1.0));
        float _1322 = ((((1.0 - _1313) * (_1308 + 2.0)) * exp2(log2(isnan(1.0) ? _4271 : (isnan(_4271) ? 1.0 : min(_4271, 1.0))) * (_1308 + 1.0))) + _1313) * _1235;
        float _1323 = _1203 * 0.5;
        float _1324 = _1213 * 0.5;
        float _1325 = _1223 * 0.5;
        float _1326 = dot(vec3(_1323, _1324, _1325), vec3(_1323, _1324, _1325));
        float _1331 = (_1326 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1326);
        float _1339 = (dot(vec3(_633, _634, _635), vec3(_1331 * _1323, _1331 * _1324, _1331 * _1325)) + 1.0) * 0.5;
        float _4304 = isnan(0.0) ? _1339 : (isnan(_1339) ? 0.0 : max(_1339, 0.0));
        float _1348 = sqrt(((_1324 * _1324) + (_1323 * _1323)) + (_1325 * _1325)) / (_1236 + 9.9999997473787516355514526367188e-06);
        float _4315 = isnan(0.0) ? _1348 : (isnan(_1348) ? 0.0 : max(_1348, 0.0));
        float _1349 = isnan(1.0) ? _4315 : (isnan(_4315) ? 1.0 : min(_4315, 1.0));
        float _1350 = _1349 * 2.0;
        float _1354 = (1.0 - _1349) / (_1349 + 1.0);
        float _4326 = isnan(0.0) ? _1354 : (isnan(_1354) ? 0.0 : max(_1354, 0.0));
        float _1355 = isnan(1.0) ? _4326 : (isnan(_4326) ? 1.0 : min(_4326, 1.0));
        float _1364 = ((((1.0 - _1355) * (_1350 + 2.0)) * exp2(log2(isnan(1.0) ? _4304 : (isnan(_4304) ? 1.0 : min(_4304, 1.0))) * (_1350 + 1.0))) + _1355) * _1236;
        _1372 = _1203;
        _1374 = _1202;
        _1375 = _1201;
        _1376 = _1213;
        _1377 = _1212;
        _1378 = _1211;
        _1379 = _1223;
        _1380 = _1222;
        _1381 = _1221;
        _1382 = _1236;
        _1383 = _1235;
        _1384 = _1234;
        _1385 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1280 : (isnan(_1280) ? 0.0 : max(_1280, 0.0)));
        _1386 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1322 : (isnan(_1322) ? 0.0 : max(_1322, 0.0)));
        _1387 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1364 : (isnan(_1364) ? 0.0 : max(_1364, 0.0)));
    }
    else
    {
        _1372 = _1373;
        _1374 = _1373;
        _1375 = _1373;
        _1376 = _1373;
        _1377 = _1373;
        _1378 = _1373;
        _1379 = _1373;
        _1380 = _1373;
        _1381 = _1373;
        _1382 = _1373;
        _1383 = _1373;
        _1384 = _1373;
        _1385 = 0.0;
        _1386 = 0.0;
        _1387 = 0.0;
    }
    float _1682;
    float _1683;
    float _1684;
    float _1685;
    float _1686;
    float _1687;
    float _1688;
    float _1689;
    float _1690;
    float _1691;
    float _1692;
    float _1693;
    float _1694;
    float _1695;
    float _1696;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1413 = fma(_1070, cbModelParam._m0[30u].z, fma(_1066, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1062));
        float _1417 = fma(_1070, cbModelParam._m0[31u].z, fma(_1066, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1062));
        float _1421 = fma(_1070, cbModelParam._m0[32u].z, fma(_1066, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1062));
        float _1444 = _1062 + _633;
        float _1445 = _1066 + _634;
        float _1446 = _1070 + _635;
        float _1456 = fma(_1446, cbModelParam._m0[30u].z, fma(_1445, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1444)) - _1413;
        float _1457 = fma(_1446, cbModelParam._m0[31u].z, fma(_1445, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1444)) - _1417;
        float _1458 = fma(_1446, cbModelParam._m0[32u].z, fma(_1445, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1444)) - _1421;
        float _1462 = inversesqrt(dot(vec3(_1456, _1457, _1458), vec3(_1456, _1457, _1458)));
        float _1475 = ((_1462 * _1456) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1413 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1476 = ((_1462 * _1457) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1417 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1477 = ((_1462 * _1458) / cbModelParam._m0[35u].z) + ((((((_1421 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1479 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1475, _1476, _1477), 0.0);
        vec4 _1486 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1475, _1476, _1477), 0.0);
        vec4 _1493 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1475, _1476, _1477), 0.0);
        vec4 _1500 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1475, _1476, _1477), 0.0);
        float _1512 = exp2((_1479.w + (-0.5)) * 20.0) * 2.0;
        float _1513 = _1512 * (_1479.x + (-0.5));
        float _1514 = _1512 * (_1479.y + (-0.5));
        float _1515 = _1512 * (_1479.z + (-0.5));
        float _1522 = exp2((_1486.w + (-0.5)) * 20.0) * 2.0;
        float _1523 = _1522 * (_1486.x + (-0.5));
        float _1524 = _1522 * (_1486.y + (-0.5));
        float _1525 = _1522 * (_1486.z + (-0.5));
        float _1532 = exp2((_1493.w + (-0.5)) * 20.0) * 2.0;
        float _1533 = _1532 * (_1493.x + (-0.5));
        float _1534 = _1532 * (_1493.y + (-0.5));
        float _1535 = _1532 * (_1493.z + (-0.5));
        float _1542 = exp2((_1500.w + (-0.5)) * 20.0) * 2.0;
        float _1543 = _1542 * (_1500.x + (-0.5));
        float _1544 = _1542 * (_1500.y + (-0.5));
        float _1545 = _1542 * (_1500.z + (-0.5));
        float _1546 = isnan(0.0) ? _1543 : (isnan(_1543) ? 0.0 : max(_1543, 0.0));
        float _1547 = isnan(0.0) ? _1544 : (isnan(_1544) ? 0.0 : max(_1544, 0.0));
        float _1548 = isnan(0.0) ? _1545 : (isnan(_1545) ? 0.0 : max(_1545, 0.0));
        float _1549 = _1513 * 0.5;
        float _1550 = _1523 * 0.5;
        float _1551 = _1533 * 0.5;
        float _1552 = dot(vec3(_1549, _1550, _1551), vec3(_1549, _1550, _1551));
        float _1557 = (_1552 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1552);
        float _1565 = (dot(vec3(_633, _634, _635), vec3(_1557 * _1549, _1557 * _1550, _1557 * _1551)) + 1.0) * 0.5;
        float _4367 = isnan(0.0) ? _1565 : (isnan(_1565) ? 0.0 : max(_1565, 0.0));
        float _1574 = sqrt(((_1550 * _1550) + (_1549 * _1549)) + (_1551 * _1551)) / (_1546 + 9.9999997473787516355514526367188e-06);
        float _4378 = isnan(0.0) ? _1574 : (isnan(_1574) ? 0.0 : max(_1574, 0.0));
        float _1575 = isnan(1.0) ? _4378 : (isnan(_4378) ? 1.0 : min(_4378, 1.0));
        float _1576 = _1575 * 2.0;
        float _1580 = (1.0 - _1575) / (_1575 + 1.0);
        float _4389 = isnan(0.0) ? _1580 : (isnan(_1580) ? 0.0 : max(_1580, 0.0));
        float _1581 = isnan(1.0) ? _4389 : (isnan(_4389) ? 1.0 : min(_4389, 1.0));
        float _1590 = ((((1.0 - _1581) * (_1576 + 2.0)) * exp2(log2(isnan(1.0) ? _4367 : (isnan(_4367) ? 1.0 : min(_4367, 1.0))) * (_1576 + 1.0))) + _1581) * _1546;
        float _1591 = _1514 * 0.5;
        float _1592 = _1524 * 0.5;
        float _1593 = _1534 * 0.5;
        float _1594 = dot(vec3(_1591, _1592, _1593), vec3(_1591, _1592, _1593));
        float _1599 = (_1594 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1594);
        float _1607 = (dot(vec3(_633, _634, _635), vec3(_1599 * _1591, _1599 * _1592, _1599 * _1593)) + 1.0) * 0.5;
        float _4400 = isnan(0.0) ? _1607 : (isnan(_1607) ? 0.0 : max(_1607, 0.0));
        float _1616 = sqrt(((_1592 * _1592) + (_1591 * _1591)) + (_1593 * _1593)) / (_1547 + 9.9999997473787516355514526367188e-06);
        float _4411 = isnan(0.0) ? _1616 : (isnan(_1616) ? 0.0 : max(_1616, 0.0));
        float _1617 = isnan(1.0) ? _4411 : (isnan(_4411) ? 1.0 : min(_4411, 1.0));
        float _1618 = _1617 * 2.0;
        float _1622 = (1.0 - _1617) / (_1617 + 1.0);
        float _4422 = isnan(0.0) ? _1622 : (isnan(_1622) ? 0.0 : max(_1622, 0.0));
        float _1623 = isnan(1.0) ? _4422 : (isnan(_4422) ? 1.0 : min(_4422, 1.0));
        float _1632 = ((((1.0 - _1623) * (_1618 + 2.0)) * exp2(log2(isnan(1.0) ? _4400 : (isnan(_4400) ? 1.0 : min(_4400, 1.0))) * (_1618 + 1.0))) + _1623) * _1547;
        float _1633 = _1515 * 0.5;
        float _1634 = _1525 * 0.5;
        float _1635 = _1535 * 0.5;
        float _1636 = dot(vec3(_1633, _1634, _1635), vec3(_1633, _1634, _1635));
        float _1641 = (_1636 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1636);
        float _1649 = (dot(vec3(_633, _634, _635), vec3(_1641 * _1633, _1641 * _1634, _1641 * _1635)) + 1.0) * 0.5;
        float _4433 = isnan(0.0) ? _1649 : (isnan(_1649) ? 0.0 : max(_1649, 0.0));
        float _1658 = sqrt(((_1634 * _1634) + (_1633 * _1633)) + (_1635 * _1635)) / (_1548 + 9.9999997473787516355514526367188e-06);
        float _4444 = isnan(0.0) ? _1658 : (isnan(_1658) ? 0.0 : max(_1658, 0.0));
        float _1659 = isnan(1.0) ? _4444 : (isnan(_4444) ? 1.0 : min(_4444, 1.0));
        float _1660 = _1659 * 2.0;
        float _1664 = (1.0 - _1659) / (_1659 + 1.0);
        float _4455 = isnan(0.0) ? _1664 : (isnan(_1664) ? 0.0 : max(_1664, 0.0));
        float _1665 = isnan(1.0) ? _4455 : (isnan(_4455) ? 1.0 : min(_4455, 1.0));
        float _1674 = ((((1.0 - _1665) * (_1660 + 2.0)) * exp2(log2(isnan(1.0) ? _4433 : (isnan(_4433) ? 1.0 : min(_4433, 1.0))) * (_1660 + 1.0))) + _1665) * _1548;
        _1682 = _1515;
        _1683 = _1514;
        _1684 = _1513;
        _1685 = _1525;
        _1686 = _1524;
        _1687 = _1523;
        _1688 = _1535;
        _1689 = _1534;
        _1690 = _1533;
        _1691 = _1548;
        _1692 = _1547;
        _1693 = _1546;
        _1694 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1590 : (isnan(_1590) ? 0.0 : max(_1590, 0.0)));
        _1695 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1632 : (isnan(_1632) ? 0.0 : max(_1632, 0.0)));
        _1696 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1674 : (isnan(_1674) ? 0.0 : max(_1674, 0.0)));
    }
    else
    {
        _1682 = _1373;
        _1683 = _1373;
        _1684 = _1373;
        _1685 = _1373;
        _1686 = _1373;
        _1687 = _1373;
        _1688 = _1373;
        _1689 = _1373;
        _1690 = _1373;
        _1691 = _1373;
        _1692 = _1373;
        _1693 = _1373;
        _1694 = 0.0;
        _1695 = 0.0;
        _1696 = 0.0;
    }
    float _1706 = (cbModelParam._m0[1u].x * (_1694 - _1385)) + _1385;
    float _1707 = (cbModelParam._m0[1u].x * (_1695 - _1386)) + _1386;
    float _1708 = (cbModelParam._m0[1u].x * (_1696 - _1387)) + _1387;
    float _1729 = fma(_1708, cbSceneParam._m0[89u].z, fma(_1707, cbSceneParam._m0[89u].y, _1706 * cbSceneParam._m0[89u].x));
    float _1732 = fma(_1708, cbSceneParam._m0[90u].z, fma(_1707, cbSceneParam._m0[90u].y, _1706 * cbSceneParam._m0[90u].x));
    float _1735 = fma(_1708, cbSceneParam._m0[91u].z, fma(_1707, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1706));
    float _1750 = _1011 * 0.5;
    float _1751 = _1012 * 0.5;
    float _1752 = _1013 * 0.5;
    float _1753 = dot(vec4(_1750, _1751, _1752, 1.0), vec4(_1684, _1687, _1690, _1693));
    float _1756 = dot(vec4(_1750, _1751, _1752, 1.0), vec4(_1683, _1686, _1689, _1692));
    float _1759 = dot(vec4(_1750, _1751, _1752, 1.0), vec4(_1682, _1685, _1688, _1691));
    float _1790;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1766 = dot(vec4(_1750, _1751, _1752, 1.0), vec4(_1372, _1376, _1379, _1382));
        float _1770 = dot(vec4(_1750, _1751, _1752, 1.0), vec4(_1374, _1377, _1380, _1383));
        float _1774 = dot(vec4(_1750, _1751, _1752, 1.0), vec4(_1375, _1378, _1381, _1384));
        float _1781 = dot(vec4(cbModelParam._m0[39u]), vec4(_1750, _1751, _1752, 1.0));
        _1790 = dot(vec3(isnan(0.0) ? _1774 : (isnan(_1774) ? 0.0 : max(_1774, 0.0)), isnan(0.0) ? _1770 : (isnan(_1770) ? 0.0 : max(_1770, 0.0)), isnan(0.0) ? _1766 : (isnan(_1766) ? 0.0 : max(_1766, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1781) ? 0.0 : (isnan(0.0) ? _1781 : max(0.0, _1781))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1790 = 1.0;
    }
    float _1801;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1792 = dot(vec4(cbModelParam._m0[40u]), vec4(_1750, _1751, _1752, 1.0));
        _1801 = dot(vec3(isnan(0.0) ? _1753 : (isnan(_1753) ? 0.0 : max(_1753, 0.0)), isnan(0.0) ? _1756 : (isnan(_1756) ? 0.0 : max(_1756, 0.0)), isnan(0.0) ? _1759 : (isnan(_1759) ? 0.0 : max(_1759, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1792) ? 0.0 : (isnan(0.0) ? _1792 : max(0.0, _1792))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1801 = 1.0;
    }
    float _1805 = (_1801 * cbModelParam._m0[1u].x) + (_1790 * (1.0 - cbModelParam._m0[1u].x));
    float _1815 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _874);
    float _1816 = isnan(_1815) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1815 : min(cbModelParam._m0[25u].z, _1815));
    float _1896;
    float _1898;
    float _1900;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1863 = fma(_1070, cbModelParam._m0[13u].z, fma(_1066, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1062)) + cbModelParam._m0[13u].w;
        float _1867 = fma(_1070, cbModelParam._m0[14u].z, fma(_1066, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1062)) + cbModelParam._m0[14u].w;
        float _1871 = fma(_1070, cbModelParam._m0[15u].z, fma(_1066, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1062)) + cbModelParam._m0[15u].w;
        float _1874 = fma(_1013, cbModelParam._m0[13u].z, fma(_1012, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1011));
        float _1877 = fma(_1013, cbModelParam._m0[14u].z, fma(_1012, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1011));
        float _1880 = fma(_1013, cbModelParam._m0[15u].z, fma(_1012, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1011));
        float _1908;
        if (_1874 > 0.0)
        {
            _1908 = abs((1.0 - _1863) / _1874);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1874 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1863 + 1.0) / _1874);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1908 = frontier_phi_16_14_ladder;
        }
        float _2081;
        if (_1877 > 0.0)
        {
            _2081 = abs((1.0 - _1867) / _1877);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1877 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1867 + 1.0) / _1877);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2081 = frontier_phi_25_21_ladder;
        }
        float _2376;
        if (_1880 > 0.0)
        {
            _2376 = abs((1.0 - _1871) / _1880);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1880 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1871 + 1.0) / _1880);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2376 = frontier_phi_37_32_ladder;
        }
        float _2378 = isnan(_2081) ? _1908 : (isnan(_1908) ? _2081 : min(_1908, _2081));
        float _2379 = isnan(_2376) ? _2378 : (isnan(_2378) ? _2376 : min(_2378, _2376));
        float _2383 = (_2379 * _1874) + _1863;
        float _2384 = (_2379 * _1877) + _1867;
        float _2385 = (_2379 * _1880) + _1871;
        float _2386 = _2379 * 9.9999997473787516355514526367188e-05;
        float _2388 = (-1.0) - _2386;
        float _2390 = _2386 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_2385 > _2390) || ((_2385 < _2388) || ((_2384 > _2390) || ((_2384 < _2388) || ((_2383 < _2388) || (_2383 > _2390))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2530 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2385, cbModelParam._m0[9u].z, fma(_2384, cbModelParam._m0[9u].y, _2383 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2385, cbModelParam._m0[10u].z, fma(_2384, cbModelParam._m0[10u].y, _2383 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2385, cbModelParam._m0[11u].z, fma(_2384, cbModelParam._m0[11u].y, _2383 * cbModelParam._m0[11u].x))), _1816);
            frontier_phi_15_37_ladder = _2530.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2530.x * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2530.z * cbModelParam._m0[1u].y;
        }
        _1896 = frontier_phi_15_37_ladder_1;
        _1898 = frontier_phi_15_37_ladder;
        _1900 = frontier_phi_15_37_ladder_2;
    }
    else
    {
        vec4 _1884 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1011, _1012, _1013), _1816);
        _1896 = _1884.x * cbModelParam._m0[1u].y;
        _1898 = _1884.y * cbModelParam._m0[1u].y;
        _1900 = _1884.z * cbModelParam._m0[1u].y;
    }
    float _1904 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _874);
    float _1905 = isnan(_1904) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1904 : min(cbModelParam._m0[25u].w, _1904));
    float _1996;
    float _1998;
    float _2000;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1960 = fma(_1070, cbModelParam._m0[21u].z, fma(_1066, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1062)) + cbModelParam._m0[21u].w;
        float _1964 = fma(_1070, cbModelParam._m0[22u].z, fma(_1066, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1062)) + cbModelParam._m0[22u].w;
        float _1968 = fma(_1070, cbModelParam._m0[23u].z, fma(_1066, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1062)) + cbModelParam._m0[23u].w;
        float _1971 = fma(_1013, cbModelParam._m0[21u].z, fma(_1012, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1011));
        float _1974 = fma(_1013, cbModelParam._m0[22u].z, fma(_1012, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1011));
        float _1977 = fma(_1013, cbModelParam._m0[23u].z, fma(_1012, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1011));
        float _2086;
        if (_1971 > 0.0)
        {
            _2086 = abs((1.0 - _1960) / _1971);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1971 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1960 + 1.0) / _1971);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _2086 = frontier_phi_27_23_ladder;
        }
        float _2403;
        if (_1974 > 0.0)
        {
            _2403 = abs((1.0 - _1964) / _1974);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1974 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1964 + 1.0) / _1974);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _2403 = frontier_phi_39_34_ladder;
        }
        float _2741;
        if (_1977 > 0.0)
        {
            _2741 = abs((1.0 - _1968) / _1977);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1977 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1968 + 1.0) / _1977);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2741 = frontier_phi_49_46_ladder;
        }
        float _2743 = isnan(_2403) ? _2086 : (isnan(_2086) ? _2403 : min(_2086, _2403));
        float _2744 = isnan(_2741) ? _2743 : (isnan(_2743) ? _2741 : min(_2743, _2741));
        float _2748 = (_2744 * _1971) + _1960;
        float _2749 = (_2744 * _1974) + _1964;
        float _2750 = (_2744 * _1977) + _1968;
        float _2751 = _2744 * 9.9999997473787516355514526367188e-05;
        float _2752 = (-1.0) - _2751;
        float _2754 = _2751 + 1.0;
        float frontier_phi_24_49_ladder;
        float frontier_phi_24_49_ladder_1;
        float frontier_phi_24_49_ladder_2;
        if ((_2750 > _2754) || ((_2750 < _2752) || ((_2749 > _2754) || ((_2749 < _2752) || ((_2748 < _2752) || (_2748 > _2754))))))
        {
            frontier_phi_24_49_ladder = 0.0;
            frontier_phi_24_49_ladder_1 = 0.0;
            frontier_phi_24_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2872 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2750, cbModelParam._m0[17u].z, fma(_2749, cbModelParam._m0[17u].y, _2748 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2750, cbModelParam._m0[18u].z, fma(_2749, cbModelParam._m0[18u].y, _2748 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2750, cbModelParam._m0[19u].z, fma(_2749, cbModelParam._m0[19u].y, _2748 * cbModelParam._m0[19u].x))), _1905);
            frontier_phi_24_49_ladder = _2872.z * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_1 = _2872.y * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_2 = _2872.x * cbModelParam._m0[1u].z;
        }
        _1996 = frontier_phi_24_49_ladder_2;
        _1998 = frontier_phi_24_49_ladder_1;
        _2000 = frontier_phi_24_49_ladder;
    }
    else
    {
        vec4 _1980 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1011, _1012, _1013), _1905);
        _1996 = _1980.x * cbModelParam._m0[1u].z;
        _1998 = _1980.y * cbModelParam._m0[1u].z;
        _2000 = _1980.z * cbModelParam._m0[1u].z;
    }
    float _2013 = (((_1033 * _992) + _1034) * _1006) * ((cbModelParam._m0[1u].w * (_1996 - _1896)) + _1896);
    float _2015 = (((_1033 * _993) + _1034) * _1006) * ((cbModelParam._m0[1u].w * (_1998 - _1898)) + _1898);
    float _2017 = (((_1033 * _994) + _1034) * _1006) * ((cbModelParam._m0[1u].w * (_2000 - _1900)) + _1900);
    float _2020 = fma(_2017, cbSceneParam._m0[89u].z, fma(_2015, cbSceneParam._m0[89u].y, _2013 * cbSceneParam._m0[89u].x));
    float _2023 = fma(_2017, cbSceneParam._m0[90u].z, fma(_2015, cbSceneParam._m0[90u].y, _2013 * cbSceneParam._m0[90u].x));
    float _2026 = fma(_2017, cbSceneParam._m0[91u].z, fma(_2015, cbSceneParam._m0[91u].y, _2013 * cbSceneParam._m0[91u].x));
    float _2060 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2064 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2068 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2072 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2073 = _2060 / _2072;
    float _2074 = _2064 / _2072;
    float _2075 = _2068 / _2072;
    float _2222;
    float _2223;
    float _2224;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2102 = ((uint(_2075 > cbSceneParam._m0[59u].y) + uint(_2075 > cbSceneParam._m0[59u].x)) + uint(_2075 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2103 = _2102 + 43u;
        uint _2111 = _2102 + 44u;
        uint _2119 = _2102 + 45u;
        uint _2127 = _2102 + 46u;
        float _2138 = fma(_2072, cbSceneParam._m0[_2103].w, fma(_2068, cbSceneParam._m0[_2103].z, fma(_2064, cbSceneParam._m0[_2103].y, _2060 * cbSceneParam._m0[_2103].x)));
        float _2142 = fma(_2072, cbSceneParam._m0[_2111].w, fma(_2068, cbSceneParam._m0[_2111].z, fma(_2064, cbSceneParam._m0[_2111].y, _2060 * cbSceneParam._m0[_2111].x)));
        float _2150 = fma(_2072, cbSceneParam._m0[_2127].w, fma(_2068, cbSceneParam._m0[_2127].z, fma(_2064, cbSceneParam._m0[_2127].y, _2060 * cbSceneParam._m0[_2127].x)));
        float _2155 = cbSceneParam._m0[33u].z * _2150;
        float _2157 = cbSceneParam._m0[33u].w * _2150;
        float _2160 = fma(_2072, cbSceneParam._m0[_2119].w, fma(_2068, cbSceneParam._m0[_2119].z, fma(_2064, cbSceneParam._m0[_2119].y, _2060 * cbSceneParam._m0[_2119].x))) / _2150;
        float _2208 = (cbSceneParam._m0[33u].x - sqrt(((_2074 * _2074) + (_2073 * _2073)) + (_2075 * _2075))) * cbSceneParam._m0[33u].y;
        float _4581 = isnan(0.0) ? _2208 : (isnan(_2208) ? 0.0 : max(_2208, 0.0));
        float _2215 = (isnan(1.0) ? _4581 : (isnan(_4581) ? 1.0 : min(_4581, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2155 + _2138) / _2150, (_2157 + _2142) / _2150), _2160), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2157 + _2138) / _2150, (_2142 - _2155) / _2150), _2160), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2138 - _2155) / _2150, (_2142 - _2157) / _2150), _2160), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2138 - _2157) / _2150, (_2155 + _2142) / _2150), _2160), 0.0)).x), vec4(0.25)));
        _2222 = 1.0 - (_2215 * cbSceneParam._m0[34u].x);
        _2223 = 1.0 - (_2215 * cbSceneParam._m0[34u].y);
        _2224 = 1.0 - (_2215 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2222 = 1.0;
        _2223 = 1.0;
        _2224 = 1.0;
    }
    float _2288;
    float _2290;
    float _2292;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2276 = fma(_2072, cbSceneParam._m0[63u].w, fma(_2068, cbSceneParam._m0[63u].z, fma(_2064, cbSceneParam._m0[63u].y, _2060 * cbSceneParam._m0[63u].x)));
        float _2277 = fma(_2072, cbSceneParam._m0[60u].w, fma(_2068, cbSceneParam._m0[60u].z, fma(_2064, cbSceneParam._m0[60u].y, _2060 * cbSceneParam._m0[60u].x))) / _2276;
        float _2278 = fma(_2072, cbSceneParam._m0[61u].w, fma(_2068, cbSceneParam._m0[61u].z, fma(_2064, cbSceneParam._m0[61u].y, _2060 * cbSceneParam._m0[61u].x))) / _2276;
        float frontier_phi_36_35_ladder;
        float frontier_phi_36_35_ladder_1;
        float frontier_phi_36_35_ladder_2;
        if ((((_2277 >= cbSceneParam._m0[64u].x) && (_2278 >= cbSceneParam._m0[64u].y)) && (_2277 <= cbSceneParam._m0[64u].z)) && (_2278 <= cbSceneParam._m0[64u].w))
        {
            float _2416 = fma(_2072, cbSceneParam._m0[62u].w, fma(_2068, cbSceneParam._m0[62u].z, fma(_2064, cbSceneParam._m0[62u].y, _2060 * cbSceneParam._m0[62u].x))) / _2276;
            float _2420 = isnan(cbSceneParam._m0[41u].w) ? _2416 : (isnan(_2416) ? cbSceneParam._m0[41u].w : max(_2416, cbSceneParam._m0[41u].w));
            float _2463 = (cbSceneParam._m0[33u].x - sqrt(((_2074 * _2074) + (_2073 * _2073)) + (_2075 * _2075))) * cbSceneParam._m0[33u].y;
            float _4597 = isnan(0.0) ? _2463 : (isnan(_2463) ? 0.0 : max(_2463, 0.0));
            float _2470 = (isnan(1.0) ? _4597 : (isnan(_4597) ? 1.0 : min(_4597, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2277, cbSceneParam._m0[33u].w + _2278), _2420), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2277, _2278 - cbSceneParam._m0[33u].z), _2420), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2277 - cbSceneParam._m0[33u].z, _2278 - cbSceneParam._m0[33u].w), _2420), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2277 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2278), _2420), 0.0)).x), vec4(0.25)));
            float _2474 = 1.0 - (_2470 * cbSceneParam._m0[34u].x);
            float _2475 = 1.0 - (_2470 * cbSceneParam._m0[34u].y);
            float _2476 = 1.0 - (_2470 * cbSceneParam._m0[34u].z);
            frontier_phi_36_35_ladder = isnan(_2475) ? _2223 : (isnan(_2223) ? _2475 : min(_2223, _2475));
            frontier_phi_36_35_ladder_1 = isnan(_2476) ? _2224 : (isnan(_2224) ? _2476 : min(_2224, _2476));
            frontier_phi_36_35_ladder_2 = isnan(_2474) ? _2222 : (isnan(_2222) ? _2474 : min(_2222, _2474));
        }
        else
        {
            frontier_phi_36_35_ladder = _2223;
            frontier_phi_36_35_ladder_1 = _2224;
            frontier_phi_36_35_ladder_2 = _2222;
        }
        _2288 = frontier_phi_36_35_ladder_2;
        _2290 = frontier_phi_36_35_ladder;
        _2292 = frontier_phi_36_35_ladder_1;
    }
    else
    {
        _2288 = _2222;
        _2290 = _2223;
        _2292 = _2224;
    }
    uvec4 _2297 = floatBitsToUint(cbInstanceData._m0[_898 + 5u]);
    uint _2299 = _2297.x * 14u;
    uint _2300 = _2299 + 13u;
    float _2307 = _1006 + (-1.0);
    float _2312 = (cbLight._m0[_2300].x * _2307) + 1.0;
    float _2313 = (cbLight._m0[_2300].y * _2307) + 1.0;
    float _2314 = (cbLight._m0[_2300].z * _2307) + 1.0;
    float _2315 = (cbLight._m0[_2300].w * _2307) + 1.0;
    uint _2316 = _2299 + 5u;
    float _2322 = isnan(1.0) ? _2313 : (isnan(_2313) ? 1.0 : min(_2313, 1.0));
    uint _2326 = _2299 + 4u;
    float _2335 = isnan(1.0) ? _2312 : (isnan(_2312) ? 1.0 : min(_2312, 1.0));
    uint _2339 = _2299 | 1u;
    float _2350 = dot(vec3(cbLight._m0[_2299].xyz), vec3(_633, _634, _635));
    float _2353 = dot(vec3(cbLight._m0[_2339].xyz), vec3(_633, _634, _635));
    float _4633 = isnan(0.0) ? _2350 : (isnan(_2350) ? 0.0 : max(_2350, 0.0));
    float _4644 = isnan(0.0) ? _2353 : (isnan(_2353) ? 0.0 : max(_2353, 0.0));
    float _2358 = (isnan(1.0) ? _4633 : (isnan(_4633) ? 1.0 : min(_4633, 1.0))) * 0.3183098733425140380859375;
    float _2360 = (isnan(1.0) ? _4644 : (isnan(_4644) ? 1.0 : min(_4644, 1.0))) * 0.3183098733425140380859375;
    float _2367 = ((cbLight._m0[_2316].x * _2322) * _2360) + (((cbLight._m0[_2326].x * _2288) * _2335) * _2358);
    float _2368 = ((_2322 * cbLight._m0[_2316].y) * _2360) + (((cbLight._m0[_2326].y * _2290) * _2335) * _2358);
    float _2369 = ((_2322 * cbLight._m0[_2316].z) * _2360) + (((cbLight._m0[_2326].z * _2292) * _2335) * _2358);
    uvec4 _2373 = floatBitsToUint(cbLight._m0[_2299 + 12u]);
    bool _2375 = _2373.x == 0u;
    float _2477;
    float _2479;
    float _2481;
    if (_2375)
    {
        _2477 = _2367;
        _2479 = _2368;
        _2481 = _2369;
    }
    else
    {
        uint _2485 = _2299 + 6u;
        float _2501 = (dot(vec3(cbLight._m0[_2299 + 2u].xyz), vec3(_633, _634, _635)) * 0.5) + 0.5;
        float _2502 = _2501 * _2501;
        float _4655 = isnan(0.0) ? _2502 : (isnan(_2502) ? 0.0 : max(_2502, 0.0));
        float _2503 = isnan(1.0) ? _4655 : (isnan(_4655) ? 1.0 : min(_4655, 1.0));
        float _2504 = isnan(1.0) ? _2314 : (isnan(_2314) ? 1.0 : min(_2314, 1.0));
        _2477 = (((cbLight._m0[_2485].x * 0.3183098733425140380859375) * _2503) * _2504) + _2367;
        _2479 = (((cbLight._m0[_2485].y * 0.3183098733425140380859375) * _2503) * _2504) + _2368;
        _2481 = (((cbLight._m0[_2485].z * 0.3183098733425140380859375) * _2503) * _2504) + _2369;
    }
    bool _2484 = _2373.y == 0u;
    float _2539;
    float _2541;
    float _2543;
    if (_2484)
    {
        _2539 = _2477;
        _2541 = _2479;
        _2543 = _2481;
    }
    else
    {
        uint _2712 = _2299 + 7u;
        float _2728 = (dot(vec3(cbLight._m0[_2299 + 3u].xyz), vec3(_633, _634, _635)) * 0.5) + 0.5;
        float _2729 = _2728 * _2728;
        float _4671 = isnan(0.0) ? _2729 : (isnan(_2729) ? 0.0 : max(_2729, 0.0));
        float _2730 = isnan(1.0) ? _4671 : (isnan(_4671) ? 1.0 : min(_4671, 1.0));
        float _2731 = isnan(1.0) ? _2315 : (isnan(_2315) ? 1.0 : min(_2315, 1.0));
        _2539 = (((cbLight._m0[_2712].x * 0.3183098733425140380859375) * _2730) * _2731) + _2477;
        _2541 = (((cbLight._m0[_2712].y * 0.3183098733425140380859375) * _2730) * _2731) + _2479;
        _2543 = (((cbLight._m0[_2712].z * 0.3183098733425140380859375) * _2730) * _2731) + _2481;
    }
    uint _2546 = _2299 + 8u;
    float _2559 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2299].w)) * _874) * 0.949999988079071044921875);
    float _2560 = _2559 * _2559;
    float _2561 = cbLight._m0[_2299].x + _659;
    float _2562 = cbLight._m0[_2299].y + _660;
    float _2563 = cbLight._m0[_2299].z + _661;
    float _2567 = inversesqrt(dot(vec3(_2561, _2562, _2563), vec3(_2561, _2562, _2563)));
    float _2568 = _2567 * _2561;
    float _2569 = _2567 * _2562;
    float _2570 = _2567 * _2563;
    float _2571 = dot(vec3(_633, _634, _635), vec3(cbLight._m0[_2299].xyz));
    float _4687 = isnan(0.0) ? _2571 : (isnan(_2571) ? 0.0 : max(_2571, 0.0));
    float _2574 = isnan(1.0) ? _4687 : (isnan(_4687) ? 1.0 : min(_4687, 1.0));
    float _4698 = isnan(0.0) ? _662 : (isnan(_662) ? 0.0 : max(_662, 0.0));
    float _2575 = isnan(1.0) ? _4698 : (isnan(_4698) ? 1.0 : min(_4698, 1.0));
    float _2576 = dot(vec3(_633, _634, _635), vec3(_2568, _2569, _2570));
    float _4709 = isnan(0.0) ? _2576 : (isnan(_2576) ? 0.0 : max(_2576, 0.0));
    float _2579 = isnan(1.0) ? _4709 : (isnan(_4709) ? 1.0 : min(_4709, 1.0));
    float _2580 = dot(vec3(cbLight._m0[_2299].xyz), vec3(_2568, _2569, _2570));
    float _4720 = isnan(0.0) ? _2580 : (isnan(_2580) ? 0.0 : max(_2580, 0.0));
    float _2584 = _2560 * _2560;
    float _2588 = ((_2579 * _2579) * (_2584 + (-1.0))) + 1.0;
    float _2596 = exp2(log2(1.0 - (isnan(1.0) ? _4720 : (isnan(_4720) ? 1.0 : min(_4720, 1.0)))) * 5.0);
    float _2597 = 0.959999978542327880859375 - _989;
    float _2599 = 0.959999978542327880859375 - _990;
    float _2600 = 0.959999978542327880859375 - _991;
    float _2607 = 1.0 - _2560;
    float _2618 = (0.5 / (((_2575 * ((_2574 * _2607) + _2560)) + 9.9999999392252902907785028219223e-09) + (((_2575 * _2607) + _2560) * _2574))) * _2574;
    float _4731 = isnan(0.0) ? _2618 : (isnan(_2618) ? 0.0 : max(_2618, 0.0));
    float _2620 = (isnan(1.0) ? _4731 : (isnan(_4731) ? 1.0 : min(_4731, 1.0))) * (_2584 / ((_2588 * _2588) * 3.141590118408203125));
    uint _2634 = _2299 + 9u;
    float _2645 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2339].w)) * _874) * 0.949999988079071044921875);
    float _2646 = _2645 * _2645;
    float _2647 = cbLight._m0[_2339].x + _659;
    float _2648 = cbLight._m0[_2339].y + _660;
    float _2649 = cbLight._m0[_2339].z + _661;
    float _2653 = inversesqrt(dot(vec3(_2647, _2648, _2649), vec3(_2647, _2648, _2649)));
    float _2654 = _2653 * _2647;
    float _2655 = _2653 * _2648;
    float _2656 = _2653 * _2649;
    float _2657 = dot(vec3(_633, _634, _635), vec3(cbLight._m0[_2339].xyz));
    float _4742 = isnan(0.0) ? _2657 : (isnan(_2657) ? 0.0 : max(_2657, 0.0));
    float _2660 = isnan(1.0) ? _4742 : (isnan(_4742) ? 1.0 : min(_4742, 1.0));
    float _2661 = dot(vec3(_633, _634, _635), vec3(_2654, _2655, _2656));
    float _4753 = isnan(0.0) ? _2661 : (isnan(_2661) ? 0.0 : max(_2661, 0.0));
    float _2664 = isnan(1.0) ? _4753 : (isnan(_4753) ? 1.0 : min(_4753, 1.0));
    float _2665 = dot(vec3(cbLight._m0[_2339].xyz), vec3(_2654, _2655, _2656));
    float _4764 = isnan(0.0) ? _2665 : (isnan(_2665) ? 0.0 : max(_2665, 0.0));
    float _2669 = _2646 * _2646;
    float _2673 = ((_2664 * _2664) * (_2669 + (-1.0))) + 1.0;
    float _2680 = exp2(log2(1.0 - (isnan(1.0) ? _4764 : (isnan(_4764) ? 1.0 : min(_4764, 1.0)))) * 5.0);
    float _2687 = 1.0 - _2646;
    float _2697 = (0.5 / (((_2575 * ((_2660 * _2687) + _2646)) + 9.9999999392252902907785028219223e-09) + (((_2575 * _2687) + _2646) * _2660))) * _2660;
    float _4775 = isnan(0.0) ? _2697 : (isnan(_2697) ? 0.0 : max(_2697, 0.0));
    float _2699 = (isnan(1.0) ? _4775 : (isnan(_4775) ? 1.0 : min(_4775, 1.0))) * (_2669 / ((_2673 * _2673) * 3.141590118408203125));
    float _2709 = (((((_2680 * _2597) + _992) * cbLight._m0[_2634].x) * _2699) * _2322) + ((((cbLight._m0[_2546].x * _2288) * ((_2596 * _2597) + _992)) * _2620) * _2335);
    float _2710 = (((((_2680 * _2599) + _993) * cbLight._m0[_2634].y) * _2699) * _2322) + ((((cbLight._m0[_2546].y * _2290) * ((_2596 * _2599) + _993)) * _2620) * _2335);
    float _2711 = (((((_2680 * _2600) + _994) * cbLight._m0[_2634].z) * _2699) * _2322) + ((((cbLight._m0[_2546].z * _2292) * ((_2596 * _2600) + _994)) * _2620) * _2335);
    float _2767;
    float _2769;
    float _2771;
    if (_2375)
    {
        _2767 = _2709;
        _2769 = _2710;
        _2771 = _2711;
    }
    else
    {
        uint _2773 = _2299 + 2u;
        uint _2777 = _2299 + 10u;
        float _2791 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2773].w)) * _874) * 0.949999988079071044921875);
        float _2792 = _2791 * _2791;
        float _2793 = cbLight._m0[_2773].x + _659;
        float _2794 = cbLight._m0[_2773].y + _660;
        float _2795 = cbLight._m0[_2773].z + _661;
        float _2799 = inversesqrt(dot(vec3(_2793, _2794, _2795), vec3(_2793, _2794, _2795)));
        float _2800 = _2799 * _2793;
        float _2801 = _2799 * _2794;
        float _2802 = _2799 * _2795;
        float _2803 = dot(vec3(_633, _634, _635), vec3(cbLight._m0[_2773].xyz));
        float _4786 = isnan(0.0) ? _2803 : (isnan(_2803) ? 0.0 : max(_2803, 0.0));
        float _2806 = isnan(1.0) ? _4786 : (isnan(_4786) ? 1.0 : min(_4786, 1.0));
        float _2807 = dot(vec3(_633, _634, _635), vec3(_2800, _2801, _2802));
        float _4797 = isnan(0.0) ? _2807 : (isnan(_2807) ? 0.0 : max(_2807, 0.0));
        float _2810 = isnan(1.0) ? _4797 : (isnan(_4797) ? 1.0 : min(_4797, 1.0));
        float _2811 = dot(vec3(cbLight._m0[_2773].xyz), vec3(_2800, _2801, _2802));
        float _4808 = isnan(0.0) ? _2811 : (isnan(_2811) ? 0.0 : max(_2811, 0.0));
        float _2815 = _2792 * _2792;
        float _2819 = ((_2810 * _2810) * (_2815 + (-1.0))) + 1.0;
        float _2826 = exp2(log2(1.0 - (isnan(1.0) ? _4808 : (isnan(_4808) ? 1.0 : min(_4808, 1.0)))) * 5.0);
        float _2833 = 1.0 - _2792;
        float _2843 = (0.5 / (((_2575 * ((_2806 * _2833) + _2792)) + 9.9999999392252902907785028219223e-09) + (((_2575 * _2833) + _2792) * _2806))) * _2806;
        float _4819 = isnan(0.0) ? _2843 : (isnan(_2843) ? 0.0 : max(_2843, 0.0));
        float _2845 = (isnan(1.0) ? _4819 : (isnan(_4819) ? 1.0 : min(_4819, 1.0))) * (_2815 / ((_2819 * _2819) * 3.141590118408203125));
        float _2846 = isnan(1.0) ? _2314 : (isnan(_2314) ? 1.0 : min(_2314, 1.0));
        _2767 = (((((_2826 * _2597) + _992) * cbLight._m0[_2777].x) * _2845) * _2846) + _2709;
        _2769 = (((((_2826 * _2599) + _993) * cbLight._m0[_2777].y) * _2845) * _2846) + _2710;
        _2771 = (((((_2826 * _2600) + _994) * cbLight._m0[_2777].z) * _2845) * _2846) + _2711;
    }
    float _2877;
    float _2879;
    float _2881;
    if (_2484)
    {
        _2877 = _2767;
        _2879 = _2769;
        _2881 = _2771;
    }
    else
    {
        uint _2888 = _2299 + 3u;
        uint _2892 = _2299 + 11u;
        float _2906 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2888].w)) * _874) * 0.949999988079071044921875);
        float _2907 = _2906 * _2906;
        float _2908 = cbLight._m0[_2888].x + _659;
        float _2909 = cbLight._m0[_2888].y + _660;
        float _2910 = cbLight._m0[_2888].z + _661;
        float _2914 = inversesqrt(dot(vec3(_2908, _2909, _2910), vec3(_2908, _2909, _2910)));
        float _2915 = _2914 * _2908;
        float _2916 = _2914 * _2909;
        float _2917 = _2914 * _2910;
        float _2918 = dot(vec3(_633, _634, _635), vec3(cbLight._m0[_2888].xyz));
        float _4835 = isnan(0.0) ? _2918 : (isnan(_2918) ? 0.0 : max(_2918, 0.0));
        float _2921 = isnan(1.0) ? _4835 : (isnan(_4835) ? 1.0 : min(_4835, 1.0));
        float _2922 = dot(vec3(_633, _634, _635), vec3(_2915, _2916, _2917));
        float _4846 = isnan(0.0) ? _2922 : (isnan(_2922) ? 0.0 : max(_2922, 0.0));
        float _2925 = isnan(1.0) ? _4846 : (isnan(_4846) ? 1.0 : min(_4846, 1.0));
        float _2926 = dot(vec3(cbLight._m0[_2888].xyz), vec3(_2915, _2916, _2917));
        float _4857 = isnan(0.0) ? _2926 : (isnan(_2926) ? 0.0 : max(_2926, 0.0));
        float _2930 = _2907 * _2907;
        float _2934 = ((_2925 * _2925) * (_2930 + (-1.0))) + 1.0;
        float _2941 = exp2(log2(1.0 - (isnan(1.0) ? _4857 : (isnan(_4857) ? 1.0 : min(_4857, 1.0)))) * 5.0);
        float _2948 = 1.0 - _2907;
        float _2958 = (0.5 / (((_2575 * ((_2921 * _2948) + _2907)) + 9.9999999392252902907785028219223e-09) + (((_2575 * _2948) + _2907) * _2921))) * _2921;
        float _4868 = isnan(0.0) ? _2958 : (isnan(_2958) ? 0.0 : max(_2958, 0.0));
        float _2960 = (isnan(1.0) ? _4868 : (isnan(_4868) ? 1.0 : min(_4868, 1.0))) * (_2930 / ((_2934 * _2934) * 3.141590118408203125));
        float _2961 = isnan(1.0) ? _2315 : (isnan(_2315) ? 1.0 : min(_2315, 1.0));
        _2877 = (((((_2941 * _2597) + _992) * cbLight._m0[_2892].x) * _2960) * _2961) + _2767;
        _2879 = (((((_2941 * _2599) + _993) * cbLight._m0[_2892].y) * _2960) * _2961) + _2769;
        _2881 = (((((_2941 * _2600) + _994) * cbLight._m0[_2892].z) * _2960) * _2961) + _2771;
    }
    float _3026;
    float _3028;
    float _3030;
    float _3032;
    float _3034;
    float _3036;
    if (_2297.y == 0u)
    {
        uvec4 _2982 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2983 = _2982.x;
        uint _2994 = uint((float(_2982.y) * floor(float(uint(cbSceneParam._m0[85u].y * _797) / _2983))) + floor(float(uint(cbSceneParam._m0[85u].x * _796) / _2983)));
        float _3004 = (log2(_2075 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3005 = isnan(0.0) ? _3004 : (isnan(_3004) ? 0.0 : max(_3004, 0.0));
        uint _3008 = uint(isnan(14.0) ? _3005 : (isnan(_3005) ? 14.0 : min(_3005, 14.0)));
        uvec4 _3013 = texelFetch(g_lightClusterGridBuffer, int(((_3008 << 2u) + (_2994 << 6u)) >> 2u));
        uint _3014 = _3013.x;
        uint _3015 = _2982.z;
        float _3129;
        float _3131;
        float _3133;
        float _3135;
        float _3137;
        float _3139;
        if (((((1u << ((_3015 >> 4u) & 15u)) + 4294967295u) & _3014) == 0u) || ((_3015 & 240u) == 0u))
        {
            _3129 = 0.0;
            _3131 = 0.0;
            _3133 = 0.0;
            _3135 = 0.0;
            _3137 = 0.0;
            _3139 = 0.0;
        }
        else
        {
            float _3130;
            float _3132;
            float _3134;
            float _3136;
            float _3138;
            float _3140;
            float _3282 = 0.0;
            float _3283 = 0.0;
            float _3284 = 0.0;
            float _3285 = 0.0;
            float _3286 = 0.0;
            float _3287 = 0.0;
            uint _3288 = 0u;
            uint _3297;
            bool _3298;
            for (;;)
            {
                _3297 = texelFetch(g_lightClassification, int((((_3008 << 5u) + (_2994 << 9u)) + (_3288 << 2u)) >> 2u)).x;
                _3298 = _3297 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_3298)
                {
                    frontier_phi_68_pred = _3287;
                    frontier_phi_68_pred_1 = _3286;
                    frontier_phi_68_pred_2 = _3285;
                    frontier_phi_68_pred_3 = _3283;
                    frontier_phi_68_pred_4 = _3282;
                    frontier_phi_68_pred_5 = _3284;
                }
                else
                {
                    float _3406;
                    float _3407;
                    float _3408;
                    float _3409;
                    float _3410;
                    float _3411;
                    uint _3412;
                    _3406 = _3282;
                    _3407 = _3283;
                    _3408 = _3284;
                    _3409 = _3285;
                    _3410 = _3286;
                    _3411 = _3287;
                    _3412 = _3297;
                    float _3338;
                    float _3339;
                    float _3340;
                    float _3341;
                    float _3342;
                    float _3343;
                    for (;;)
                    {
                        uint _3416 = uint(findLSB(_3412)) + (_3288 << 5u);
                        uint _3413 = (_3412 + 4294967295u) & _3412;
                        uint _3418 = _3416 * 48u;
                        vec4 _3432 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3418)).x, texelFetch(g_PointLightRenderingBuffer, int(_3418 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3418 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3418 + 3u)).x));
                        uint _3438 = (_3416 * 48u) + 4u;
                        vec4 _3451 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3438)).x, texelFetch(g_PointLightRenderingBuffer, int(_3438 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3438 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3438 + 3u)).x));
                        uint _3457 = (_3416 * 48u) + 8u;
                        vec3 _3468 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3457)).x, texelFetch(g_PointLightRenderingBuffer, int(_3457 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3457 + 2u)).x));
                        float _3472 = _3432.x - _2073;
                        float _3473 = _3432.y - _2074;
                        float _3474 = _3432.z - _2075;
                        float _3475 = dot(vec3(_3472, _3473, _3474), vec3(_3472, _3473, _3474));
                        float _3478 = inversesqrt(_3475);
                        float _3479 = _3478 * _3472;
                        float _3480 = _3478 * _3473;
                        float _3481 = _3478 * _3474;
                        float _3482 = dot(vec3(_819, _822, _825), vec3(_3479, _3480, _3481));
                        float _3487 = 1.0 - (_3475 * _3432.w);
                        float _4894 = isnan(0.0) ? _3487 : (isnan(_3487) ? 0.0 : max(_3487, 0.0));
                        float _3488 = isnan(1.0) ? _4894 : (isnan(_4894) ? 1.0 : min(_4894, 1.0));
                        float _3489 = sqrt(_3475) * _3451.w;
                        float _3492 = 1.39999997615814208984375 / (_3489 + 1.39999997615814208984375);
                        float _3493 = _3492 * _3492;
                        float _3496 = ((1.0 - _3493) * _3482) + _3493;
                        float _3499 = _3489 * _3489;
                        float _3502 = ((isnan(0.0) ? _3496 : (isnan(_3496) ? 0.0 : max(_3496, 0.0))) * _3488) / ((_3499 * 0.699999988079071044921875) + 1.0);
                        float _3506 = (-0.0) - _2073;
                        float _3507 = (-0.0) - _2074;
                        float _3508 = (-0.0) - _2075;
                        float _3512 = inversesqrt(dot(vec3(_3506, _3507, _3508), vec3(_3506, _3507, _3508)));
                        float _3513 = _3512 * _3506;
                        float _3514 = _3512 * _3507;
                        float _3515 = _3512 * _3508;
                        float _3522 = exp2(log2(1.0 / ((_3499 * 3.5) + 5.0)) * 0.25);
                        float _3523 = 1.0 - _1016;
                        float _3530 = sqrt(1.0 - ((1.0 - (_3523 * _3523)) * (1.0 - (_3522 * _3522))));
                        float _3531 = _3530 * _3530;
                        float _3532 = _3531 * _3531;
                        float _3533 = _3513 + _3479;
                        float _3534 = _3514 + _3480;
                        float _3535 = _3515 + _3481;
                        float _3539 = inversesqrt(dot(vec3(_3533, _3534, _3535), vec3(_3533, _3534, _3535)));
                        float _3543 = dot(vec3(_819, _822, _825), vec3(_3513, _3514, _3515));
                        float _4910 = isnan(0.0) ? _3543 : (isnan(_3543) ? 0.0 : max(_3543, 0.0));
                        float _3546 = isnan(1.0) ? _4910 : (isnan(_4910) ? 1.0 : min(_4910, 1.0));
                        float _3547 = dot(vec3(_819, _822, _825), vec3(_3539 * _3533, _3539 * _3534, _3539 * _3535));
                        float _4921 = isnan(0.0) ? _3547 : (isnan(_3547) ? 0.0 : max(_3547, 0.0));
                        float _3550 = isnan(1.0) ? _4921 : (isnan(_4921) ? 1.0 : min(_4921, 1.0));
                        float _3554 = ((_3550 * _3550) * (_3532 + (-1.0))) + 1.0;
                        float _3555 = _3492 * _3531;
                        float _3556 = _3555 * _3555;
                        float _3559 = ((1.0 - _3556) * _3482) + _3556;
                        float _4932 = isnan(0.0) ? _3559 : (isnan(_3559) ? 0.0 : max(_3559, 0.0));
                        float _3560 = isnan(1.0) ? _4932 : (isnan(_4932) ? 1.0 : min(_4932, 1.0));
                        float _3561 = 1.0 - _3531;
                        float _3571 = (0.5 / (((_3560 * ((_3546 * _3561) + _3531)) + 9.9999999392252902907785028219223e-09) + (((_3560 * _3561) + _3531) * _3546))) * _3560;
                        float _4943 = isnan(0.0) ? _3571 : (isnan(_3571) ? 0.0 : max(_3571, 0.0));
                        float _3582 = (((_3532 * 3.1415927410125732421875) * (isnan(1.0) ? _4943 : (isnan(_4943) ? 1.0 : min(_4943, 1.0)))) / ((_3554 * _3554) * ((_3499 * 2.1991131305694580078125) + 3.141590118408203125))) * _3488;
                        _3341 = (_3502 * _3451.x) + _3409;
                        _3342 = (_3502 * _3451.y) + _3410;
                        _3343 = (_3502 * _3451.z) + _3411;
                        _3338 = (_3582 * _3468.x) + _3406;
                        _3339 = (_3582 * _3468.y) + _3407;
                        _3340 = (_3582 * _3468.z) + _3408;
                        if (_3413 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3406 = _3338;
                            _3407 = _3339;
                            _3408 = _3340;
                            _3409 = _3341;
                            _3410 = _3342;
                            _3411 = _3343;
                            _3412 = _3413;
                        }
                    }
                    frontier_phi_68_pred = _3343;
                    frontier_phi_68_pred_1 = _3342;
                    frontier_phi_68_pred_2 = _3341;
                    frontier_phi_68_pred_3 = _3339;
                    frontier_phi_68_pred_4 = _3338;
                    frontier_phi_68_pred_5 = _3340;
                }
                _3140 = frontier_phi_68_pred;
                _3138 = frontier_phi_68_pred_1;
                _3136 = frontier_phi_68_pred_2;
                _3132 = frontier_phi_68_pred_3;
                _3130 = frontier_phi_68_pred_4;
                _3134 = frontier_phi_68_pred_5;
                uint _3289 = _3288 + 1u;
                if (_3289 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3282 = _3130;
                    _3283 = _3132;
                    _3284 = _3134;
                    _3285 = _3136;
                    _3286 = _3138;
                    _3287 = _3140;
                    _3288 = _3289;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3129 = _3130;
            _3131 = _3132;
            _3133 = _3134;
            _3135 = _3136;
            _3137 = _3138;
            _3139 = _3140;
        }
        uvec4 _3143 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3144 = _3143.z;
        uint _3146 = (_3144 >> 8u) & 15u;
        float _3250;
        float _3252;
        float _3254;
        float _3256;
        float _3258;
        float _3260;
        if (((4294967295u << _3146) & _3014) == 0u)
        {
            _3250 = _3129;
            _3252 = _3131;
            _3254 = _3133;
            _3256 = _3135;
            _3258 = _3137;
            _3260 = _3139;
        }
        else
        {
            float _3275 = inversesqrt(dot(vec3(_2073, _2074, _2075), vec3(_2073, _2074, _2075)));
            float _3276 = _3275 * _2073;
            float _3277 = _3275 * _2074;
            float _3278 = _3275 * _2075;
            float frontier_phi_62_63_ladder;
            float frontier_phi_62_63_ladder_1;
            float frontier_phi_62_63_ladder_2;
            float frontier_phi_62_63_ladder_3;
            float frontier_phi_62_63_ladder_4;
            float frontier_phi_62_63_ladder_5;
            if (_3146 < ((_3144 >> 12u) & 15u))
            {
                float _3251;
                float _3253;
                float _3255;
                float _3257;
                float _3259;
                float _3261;
                float _3389 = _3129;
                float _3390 = _3131;
                float _3391 = _3133;
                float _3392 = _3135;
                float _3393 = _3137;
                float _3394 = _3139;
                uint _3395 = _3146;
                uint _3404;
                bool _3405;
                for (;;)
                {
                    _3404 = texelFetch(g_lightClassification, int((((_3008 << 5u) + (_2994 << 9u)) + (_3395 << 2u)) >> 2u)).x;
                    _3405 = _3404 == 0u;
                    float frontier_phi_74_pred;
                    float frontier_phi_74_pred_1;
                    float frontier_phi_74_pred_2;
                    float frontier_phi_74_pred_3;
                    float frontier_phi_74_pred_4;
                    float frontier_phi_74_pred_5;
                    if (_3405)
                    {
                        frontier_phi_74_pred = _3391;
                        frontier_phi_74_pred_1 = _3390;
                        frontier_phi_74_pred_2 = _3389;
                        frontier_phi_74_pred_3 = _3394;
                        frontier_phi_74_pred_4 = _3393;
                        frontier_phi_74_pred_5 = _3392;
                    }
                    else
                    {
                        float _3587;
                        float _3588;
                        float _3589;
                        float _3590;
                        float _3591;
                        float _3592;
                        float _3882;
                        float _3883;
                        float _3884;
                        float _3885;
                        float _3886;
                        float _3887;
                        float _3600 = _3389;
                        float _3601 = _3390;
                        float _3602 = _3391;
                        float _3603 = _3392;
                        float _3604 = _3393;
                        float _3605 = _3394;
                        uint _3606 = _3404;
                        uint _3607;
                        vec4 _3632;
                        float _3633;
                        vec4 _3648;
                        vec3 _3660;
                        vec4 _3675;
                        vec4 _3691;
                        float _3738;
                        bool _3739;
                        for (;;)
                        {
                            uint _3617 = ((_3395 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3606));
                            _3607 = (_3606 + 4294967295u) & _3606;
                            uint _3619 = _3617 * 40u;
                            _3632 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3619)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3619 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3619 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3619 + 3u)).x));
                            _3633 = _3632.w;
                            uint _3635 = (_3617 * 40u) + 4u;
                            _3648 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3635)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3635 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3635 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3635 + 3u)).x));
                            uint _3650 = (_3617 * 40u) + 8u;
                            _3660 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3650)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3650 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3650 + 2u)).x));
                            uint _3662 = (_3617 * 40u) + 16u;
                            _3675 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3662)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3662 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3662 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3662 + 3u)).x));
                            uint _3678 = (_3617 * 40u) + 20u;
                            _3691 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3678)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3678 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3678 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3678 + 3u)).x));
                            uint _3694 = (_3617 * 40u) + 24u;
                            vec4 _3707 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3694)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3694 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3694 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3694 + 3u)).x));
                            uint _3713 = (_3617 * 40u) + 28u;
                            vec4 _3726 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3713)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3713 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3713 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3713 + 3u)).x));
                            _3738 = fma(_2075, _3726.z, fma(_2074, _3726.y, _3726.x * _2073)) + _3726.w;
                            _3739 = !((fma(_2075, _3707.z, fma(_2074, _3707.y, _3707.x * _2073)) + _3707.w) <= 0.0);
                            float frontier_phi_80_pred;
                            float frontier_phi_80_pred_1;
                            float frontier_phi_80_pred_2;
                            float frontier_phi_80_pred_3;
                            float frontier_phi_80_pred_4;
                            float frontier_phi_80_pred_5;
                            if (_3739)
                            {
                                float _3766 = _3632.x - _2073;
                                float _3767 = _3632.y - _2074;
                                float _3768 = _3632.z - _2075;
                                float _3769 = dot(vec3(_3766, _3767, _3768), vec3(_3766, _3767, _3768));
                                float _3772 = inversesqrt(_3769);
                                float _3773 = _3772 * _3766;
                                float _3774 = _3772 * _3767;
                                float _3775 = _3772 * _3768;
                                float _3779 = 1.0 - (_3769 / (_3633 * _3633));
                                float _4954 = isnan(0.0) ? _3779 : (isnan(_3779) ? 0.0 : max(_3779, 0.0));
                                float _3780 = isnan(1.0) ? _4954 : (isnan(_4954) ? 1.0 : min(_4954, 1.0));
                                float _3784 = sqrt(_3769) * _3648.w;
                                float _3786 = 1.39999997615814208984375 / (_3784 + 1.39999997615814208984375);
                                float _3787 = _3786 * _3786;
                                float _3790 = ((1.0 - _3787) * dot(vec3(_3773, _3774, _3775), vec3(_819, _822, _825))) + _3787;
                                float _3793 = _3784 * _3784;
                                float _3797 = (fma(_2075, _3675.z, fma(_2074, _3675.y, _3675.x * _2073)) + _3675.w) / _3738;
                                float _3798 = (fma(_2075, _3691.z, fma(_2074, _3691.y, _3691.x * _2073)) + _3691.w) / _3738;
                                float _3802 = 1.0 - dot(vec2(_3797, _3798), vec2(_3797, _3798));
                                float _4970 = isnan(0.0) ? _3802 : (isnan(_3802) ? 0.0 : max(_3802, 0.0));
                                float _3803 = isnan(1.0) ? _4970 : (isnan(_4970) ? 1.0 : min(_4970, 1.0));
                                float _3804 = _3803 * (((isnan(0.0) ? _3790 : (isnan(_3790) ? 0.0 : max(_3790, 0.0))) * _3780) / ((_3793 * 0.699999988079071044921875) + 1.0));
                                float _3816 = exp2(log2(1.0 / ((_3793 * 3.5) + 5.0)) * 0.25);
                                float _3817 = 1.0 - _1016;
                                float _3824 = sqrt(1.0 - ((1.0 - (_3817 * _3817)) * (1.0 - (_3816 * _3816))));
                                float _3825 = _3824 * _3824;
                                float _3826 = _3825 * _3825;
                                float _3827 = _3773 - _3276;
                                float _3828 = _3774 - _3277;
                                float _3829 = _3775 - _3278;
                                float _3833 = inversesqrt(dot(vec3(_3827, _3828, _3829), vec3(_3827, _3828, _3829)));
                                float _3837 = dot(vec3(_819, _822, _825), vec3((-0.0) - _3276, (-0.0) - _3277, (-0.0) - _3278));
                                float _4981 = isnan(0.0) ? _3837 : (isnan(_3837) ? 0.0 : max(_3837, 0.0));
                                float _3840 = isnan(1.0) ? _4981 : (isnan(_4981) ? 1.0 : min(_4981, 1.0));
                                float _3841 = dot(vec3(_819, _822, _825), vec3(_3833 * _3827, _3833 * _3828, _3833 * _3829));
                                float _4992 = isnan(0.0) ? _3841 : (isnan(_3841) ? 0.0 : max(_3841, 0.0));
                                float _3844 = isnan(1.0) ? _4992 : (isnan(_4992) ? 1.0 : min(_4992, 1.0));
                                float _3848 = ((_3844 * _3844) * (_3826 + (-1.0))) + 1.0;
                                float _3849 = _3786 * _3825;
                                float _3850 = _3849 * _3849;
                                float _3856 = ((1.0 - _3850) * dot(vec3(_819, _822, _825), vec3(_3773, _3774, _3775))) + _3850;
                                float _5003 = isnan(0.0) ? _3856 : (isnan(_3856) ? 0.0 : max(_3856, 0.0));
                                float _3857 = isnan(1.0) ? _5003 : (isnan(_5003) ? 1.0 : min(_5003, 1.0));
                                float _3858 = 1.0 - _3825;
                                float _3868 = (0.5 / (((_3857 * ((_3840 * _3858) + _3825)) + 9.9999999392252902907785028219223e-09) + (((_3857 * _3858) + _3825) * _3840))) * _3857;
                                float _5014 = isnan(0.0) ? _3868 : (isnan(_3868) ? 0.0 : max(_3868, 0.0));
                                float _3878 = (_3803 * _3780) * (((_3826 * 3.1415927410125732421875) * (isnan(1.0) ? _5014 : (isnan(_5014) ? 1.0 : min(_5014, 1.0)))) / ((_3848 * _3848) * ((_3793 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_80_pred = _3878 * _3660.z;
                                frontier_phi_80_pred_1 = _3878 * _3660.y;
                                frontier_phi_80_pred_2 = _3878 * _3660.x;
                                frontier_phi_80_pred_3 = _3804 * _3648.z;
                                frontier_phi_80_pred_4 = _3804 * _3648.y;
                                frontier_phi_80_pred_5 = _3804 * _3648.x;
                            }
                            else
                            {
                                frontier_phi_80_pred = 0.0;
                                frontier_phi_80_pred_1 = 0.0;
                                frontier_phi_80_pred_2 = 0.0;
                                frontier_phi_80_pred_3 = 0.0;
                                frontier_phi_80_pred_4 = 0.0;
                                frontier_phi_80_pred_5 = 0.0;
                            }
                            _3884 = frontier_phi_80_pred;
                            _3883 = frontier_phi_80_pred_1;
                            _3882 = frontier_phi_80_pred_2;
                            _3887 = frontier_phi_80_pred_3;
                            _3886 = frontier_phi_80_pred_4;
                            _3885 = frontier_phi_80_pred_5;
                            _3590 = _3885 + _3603;
                            _3591 = _3886 + _3604;
                            _3592 = _3887 + _3605;
                            _3587 = _3882 + _3600;
                            _3588 = _3883 + _3601;
                            _3589 = _3884 + _3602;
                            if (_3607 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3600 = _3587;
                                _3601 = _3588;
                                _3602 = _3589;
                                _3603 = _3590;
                                _3604 = _3591;
                                _3605 = _3592;
                                _3606 = _3607;
                                continue;
                            }
                        }
                        frontier_phi_74_pred = _3589;
                        frontier_phi_74_pred_1 = _3588;
                        frontier_phi_74_pred_2 = _3587;
                        frontier_phi_74_pred_3 = _3592;
                        frontier_phi_74_pred_4 = _3591;
                        frontier_phi_74_pred_5 = _3590;
                    }
                    _3255 = frontier_phi_74_pred;
                    _3253 = frontier_phi_74_pred_1;
                    _3251 = frontier_phi_74_pred_2;
                    _3261 = frontier_phi_74_pred_3;
                    _3259 = frontier_phi_74_pred_4;
                    _3257 = frontier_phi_74_pred_5;
                    uint _3396 = _3395 + 1u;
                    if (_3396 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3389 = _3251;
                        _3390 = _3253;
                        _3391 = _3255;
                        _3392 = _3257;
                        _3393 = _3259;
                        _3394 = _3261;
                        _3395 = _3396;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_62_63_ladder = _3259;
                frontier_phi_62_63_ladder_1 = _3257;
                frontier_phi_62_63_ladder_2 = _3255;
                frontier_phi_62_63_ladder_3 = _3261;
                frontier_phi_62_63_ladder_4 = _3253;
                frontier_phi_62_63_ladder_5 = _3251;
            }
            else
            {
                frontier_phi_62_63_ladder = _3137;
                frontier_phi_62_63_ladder_1 = _3135;
                frontier_phi_62_63_ladder_2 = _3133;
                frontier_phi_62_63_ladder_3 = _3139;
                frontier_phi_62_63_ladder_4 = _3131;
                frontier_phi_62_63_ladder_5 = _3129;
            }
            _3250 = frontier_phi_62_63_ladder_5;
            _3252 = frontier_phi_62_63_ladder_4;
            _3254 = frontier_phi_62_63_ladder_2;
            _3256 = frontier_phi_62_63_ladder_1;
            _3258 = frontier_phi_62_63_ladder;
            _3260 = frontier_phi_62_63_ladder_3;
        }
        float _3265 = isnan(1.0) ? _1006 : (isnan(_1006) ? 1.0 : min(_1006, 1.0));
        _3026 = (_3265 * _3256) + _2539;
        _3028 = (_3265 * _3258) + _2541;
        _3030 = (_3265 * _3260) + _2543;
        _3032 = ((_3250 * _992) * _3265) + _2877;
        _3034 = ((_3252 * _993) * _3265) + _2879;
        _3036 = ((_3254 * _994) * _3265) + _2881;
    }
    else
    {
        _3026 = _2539;
        _3028 = _2541;
        _3030 = _2543;
        _3032 = _2877;
        _3034 = _2879;
        _3036 = _2881;
    }
    uint _3042 = _899 + uint(cbMatDynParam._m0[0u].w);
    float _3048 = cbInstanceData._m0[_3042].x * (((((cbMatDynParam._m0[8u].x - cbMatDynParam._m0[7u].x) * _675) + cbMatDynParam._m0[7u].x) + (((((cbMtdParam._m0[12u].x * cbMtdParam._m0[16u].z) * cbMtdParam._m0[15u].w) * _571) * _584.x) * _704)) + (((_733 - (_733 * _641)) + (cbMatDynParam._m0[11u].x * _764)) * cbMatDynParam._m0[9u].x));
    float _3049 = cbInstanceData._m0[_3042].y * (((((cbMatDynParam._m0[8u].y - cbMatDynParam._m0[7u].y) * _675) + cbMatDynParam._m0[7u].y) + (((((cbMtdParam._m0[12u].y * cbMtdParam._m0[16u].z) * cbMtdParam._m0[15u].w) * _571) * _584.y) * _704)) + (((_735 - (_735 * _641)) + (cbMatDynParam._m0[11u].y * _764)) * cbMatDynParam._m0[9u].y));
    float _3050 = cbInstanceData._m0[_3042].z * (((((cbMatDynParam._m0[8u].z - cbMatDynParam._m0[7u].z) * _675) + cbMatDynParam._m0[7u].z) + (((((cbMtdParam._m0[12u].z * cbMtdParam._m0[16u].z) * cbMtdParam._m0[15u].w) * _571) * _584.z) * _704)) + (((_737 - (_737 * _641)) + (cbMatDynParam._m0[11u].z * _764)) * cbMatDynParam._m0[9u].z));
    float _5030 = isnan(0.0) ? _983 : (isnan(_983) ? 0.0 : max(_983, 0.0));
    float _5041 = isnan(0.0) ? _984 : (isnan(_984) ? 0.0 : max(_984, 0.0));
    float _5052 = isnan(0.0) ? _985 : (isnan(_985) ? 0.0 : max(_985, 0.0));
    float _5063 = isnan(0.0) ? _636 : (isnan(_636) ? 0.0 : max(_636, 0.0));
    float _3068 = (((isnan(1.0) ? _5030 : (isnan(_5030) ? 1.0 : min(_5030, 1.0))) * (_3026 + ((isnan(0.0) ? _1729 : (isnan(_1729) ? 0.0 : max(_1729, 0.0))) * _1006))) + ((_3032 + ((isnan(0.0) ? _2020 : (isnan(_2020) ? 0.0 : max(_2020, 0.0))) * _1805)) * cbPerFrame._m0[3u].x)) + _3048;
    float _3070 = (_3049 + ((_3034 + ((isnan(0.0) ? _2023 : (isnan(_2023) ? 0.0 : max(_2023, 0.0))) * _1805)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _5041 : (isnan(_5041) ? 1.0 : min(_5041, 1.0))) * (_3028 + ((isnan(0.0) ? _1732 : (isnan(_1732) ? 0.0 : max(_1732, 0.0))) * _1006)));
    float _3072 = (_3050 + ((_3036 + ((isnan(0.0) ? _2026 : (isnan(_2026) ? 0.0 : max(_2026, 0.0))) * _1805)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _5052 : (isnan(_5052) ? 1.0 : min(_5052, 1.0))) * (_3030 + ((isnan(0.0) ? _1735 : (isnan(_1735) ? 0.0 : max(_1735, 0.0))) * _1006)));
    float _3090 = ((cbMtdParam._m0[2u].w - cbMatDynParam._m0[12u].y) * _704) + cbMatDynParam._m0[12u].y;
    float _3095 = cbInstanceData._m0[_898 + 6u].w * (isnan(1.0) ? _5063 : (isnan(_5063) ? 1.0 : min(_5063, 1.0)));
    float _3100 = _796 / cbSceneParam._m0[86u].x;
    float _3101 = _797 / cbSceneParam._m0[86u].y;
    vec4 _3115 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3100, _3101, (log2((isnan(cbSceneParam._m0[77u].w) ? _790 : (isnan(_790) ? cbSceneParam._m0[77u].w : min(_790, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3117 = _3115.x;
    float _3118 = _3115.y;
    float _3119 = _3115.z;
    float _3120 = _3115.w;
    float _3191;
    float _3193;
    float _3195;
    float _3197;
    if (_790 > cbSceneParam._m0[78u].w)
    {
        float _3154 = isnan(_790) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _790 : min(cbSceneParam._m0[80u].w, _790));
        float _3155 = _3154 / _790;
        float _3166 = _3155 * _297;
        float _3167 = _298 * _3155;
        float _3168 = (-0.0) - _3167;
        float _3169 = _3155 * _299;
        float _3171 = (cbSceneParam._m0[77u].w * _3168) / _3154;
        float _3172 = _3171 + cbSceneParam._m0[79u].w;
        float _3173 = cbSceneParam._m0[79u].w - _3167;
        float _3179 = sqrt(((_3166 * _3166) + (_3167 * _3167)) + (_3169 * _3169));
        float _3182 = (1.0 - (cbSceneParam._m0[77u].w / _3154)) * _3179;
        float _3187 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3189 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3351;
        if (abs((_3168 - _3171) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3351 = ((((_3172 > 0.0) ? exp2(_3187 * _3172) : (2.0 - exp2(_3189 * _3172))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3182;
        }
        else
        {
            float _3311 = 1.0 / cbSceneParam._m0[80u].x;
            float _3312 = isnan(_3173) ? _3172 : (isnan(_3172) ? _3173 : max(_3172, _3173));
            float _3313 = isnan(_3173) ? _3172 : (isnan(_3172) ? _3173 : min(_3172, _3173));
            float _3322 = isnan(0.0) ? _3312 : (isnan(_3312) ? 0.0 : min(_3312, 0.0));
            float _3323 = isnan(0.0) ? _3313 : (isnan(_3313) ? 0.0 : min(_3313, 0.0));
            _3351 = ((abs(_3179 / _3168) * cbSceneParam._m0[80u].y) * ((((_3322 - _3323) * 2.0) - ((exp2(_3187 * (isnan(0.0) ? _3312 : (isnan(_3312) ? 0.0 : max(_3312, 0.0)))) - exp2(_3187 * (isnan(0.0) ? _3313 : (isnan(_3313) ? 0.0 : max(_3313, 0.0))))) * _3311)) - ((exp2(_3189 * _3322) - exp2(_3189 * _3323)) * _3311))) + (_3182 * cbSceneParam._m0[80u].z);
        }
        vec4 _3353 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3100, _3101, 1.0), 0.0);
        float _3362 = exp2((_3351 * (-1.44269502162933349609375)) * (1.0 - _3353.w));
        float _3363 = log2(_3362);
        float _3379 = log2(_3120);
        _3191 = (exp2(_3379 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3363 * cbSceneParam._m0[78u].x)) * _3353.x) / cbSceneParam._m0[78u].x)) + _3117;
        _3193 = (exp2(_3379 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3363 * cbSceneParam._m0[78u].y)) * _3353.y) / cbSceneParam._m0[78u].y)) + _3118;
        _3195 = (exp2(_3379 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3363 * cbSceneParam._m0[78u].z)) * _3353.z) / cbSceneParam._m0[78u].z)) + _3119;
        _3197 = _3362 * _3120;
    }
    else
    {
        _3191 = _3117;
        _3193 = _3118;
        _3195 = _3119;
        _3197 = _3120;
    }
    float _3209 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3210 = _3209 == 3.0;
    float _3211 = log2(_3197);
    float _3215 = exp2(_3211 * cbSceneParam._m0[78u].x);
    float _3216 = exp2(_3211 * cbSceneParam._m0[78u].y);
    float _3217 = exp2(_3211 * cbSceneParam._m0[78u].z);
    float _3218 = _3215 * (isnan(0.0) ? _3068 : (isnan(_3068) ? 0.0 : max(_3068, 0.0)));
    float _3219 = _3216 * (isnan(0.0) ? _3070 : (isnan(_3070) ? 0.0 : max(_3070, 0.0)));
    float _3220 = _3217 * (isnan(0.0) ? _3072 : (isnan(_3072) ? 0.0 : max(_3072, 0.0)));
    float _3229 = (_3209 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3229 * (_3210 ? _3218 : (_3218 + (cbSceneParam._m0[72u].w * _3191)));
    SV_Target.y = _3229 * (_3210 ? _3219 : (_3219 + (cbSceneParam._m0[72u].w * _3193)));
    SV_Target.z = _3229 * (_3210 ? _3220 : (_3220 + (cbSceneParam._m0[72u].w * _3195)));
    SV_Target.w = _3095;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _3048) * _3090) * _3215) * _3229;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _3049) * _3090) * _3216) * _3229;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _3050) * _3090) * _3217) * _3229;
    SV_Target_1.w = _3095;
}


