#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[18];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_1;
layout(set = 0, binding = 1) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_7;
layout(set = 0, binding = 10) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_6;
layout(set = 0, binding = 2) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_0;
layout(set = 0, binding = 4) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_11;
layout(set = 0, binding = 6) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_2;
layout(set = 0, binding = 7) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_3;
layout(set = 0, binding = 9) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_5;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1179;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _203 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _204 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _205 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _211 = inversesqrt(dot(vec3(_203, _204, _205), vec3(_203, _204, _205)));
    float _218 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _219 = _218 * NORMAL.x;
    float _220 = _218 * NORMAL.y;
    float _221 = _218 * NORMAL.z;
    float _225 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _233;
    float _234;
    float _235;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _233 = (-0.0) - _219;
        _234 = (-0.0) - _220;
        _235 = (-0.0) - _221;
    }
    else
    {
        _233 = _219;
        _234 = _220;
        _235 = _221;
    }
    vec4 _248 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _253 = _248.z;
    float _259 = exp2(log2(_253 * 22.0) * 260.0);
    float _260 = isnan(0.0) ? _259 : (isnan(_259) ? 0.0 : max(_259, 0.0));
    float _261 = isnan(1.0) ? _260 : (isnan(_260) ? 1.0 : min(_260, 1.0));
    vec4 _275 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _286 = cbMtdParam._m0[10u].x * _275.x;
    float _287 = cbMtdParam._m0[10u].y * _275.y;
    float _288 = cbMtdParam._m0[10u].z * _275.z;
    vec4 _300 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _335 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _343 = (((((cbMtdParam._m0[9u].x * _300.x) - _286) * _261) + _286) * 4.55000019073486328125) * _335.x;
    float _345 = (((((cbMtdParam._m0[9u].y * _300.y) - _287) * _261) + _287) * 4.55000019073486328125) * _335.y;
    float _347 = (((((cbMtdParam._m0[9u].z * _300.z) - _288) * _261) + _288) * 4.55000019073486328125) * _335.z;
    float _348 = _335.w * _300.w;
    float _374 = (((texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w)).x - cbMtdParam._m0[17u].x) + cbMtdParam._m0[16u].x) * _261) + cbMtdParam._m0[17u].x;
    vec4 _386 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w));
    float _388 = _386.x;
    float _389 = _386.y;
    float _395 = cbMtdParam._m0[14u].y + _386.z;
    vec4 _407 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w));
    float _424 = (((_261 * (_253 + (-0.5))) + 0.5) * 2.0) * ((((_407.z - _395) + cbMtdParam._m0[14u].x) * _261) + _395);
    float _442 = abs((fract(cbMtdParam._m0[15u].x * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _3568 = isnan(0.0) ? _442 : (isnan(_442) ? 0.0 : max(_442, 0.0));
    float _443 = isnan(1.0) ? _3568 : (isnan(_3568) ? 1.0 : min(_3568, 1.0));
    float _448 = (_443 * _443) * (3.0 - (_443 * 2.0));
    vec4 _461 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _469 = (_248.x * 2.0) + (-1.0);
    float _470 = (_248.y * 2.0) + (-1.0);
    float _471 = dot(vec2(_469, _470), vec2(_469, _470));
    float _3579 = isnan(0.0) ? _471 : (isnan(_471) ? 0.0 : max(_471, 0.0));
    float _476 = sqrt(1.0 - (isnan(1.0) ? _3579 : (isnan(_3579) ? 1.0 : min(_3579, 1.0))));
    float _489 = (cbMtdParam._m0[14u].z * (((((_407.x - _388) * _261) + _388) * 2.0) + (-1.0))) + _469;
    float _490 = (cbMtdParam._m0[14u].z * (((((_407.y - _389) * _261) + _389) * 2.0) + (-1.0))) + _470;
    float _493 = fma(_476, _233, fma(_490, _225 * TANGENT.x, (_211 * _203) * _489));
    float _496 = fma(_476, _234, fma(_490, _225 * TANGENT.y, (_211 * _204) * _489));
    float _499 = fma(_476, _235, fma(_490, _225 * TANGENT.z, (_211 * _205) * _489));
    float _503 = inversesqrt(dot(vec3(_493, _496, _499), vec3(_493, _496, _499)));
    float _504 = _503 * _493;
    float _505 = _503 * _496;
    float _506 = _503 * _499;
    float _3590 = isnan(0.0) ? _348 : (isnan(_348) ? 0.0 : max(_348, 0.0));
    float _507 = isnan(1.0) ? _3590 : (isnan(_3590) ? 1.0 : min(_3590, 1.0));
    float _3601 = isnan(0.0) ? _424 : (isnan(_424) ? 0.0 : max(_424, 0.0));
    float _508 = isnan(1.0) ? _3601 : (isnan(_3601) ? 1.0 : min(_3601, 1.0));
    float _3612 = isnan(0.0) ? _343 : (isnan(_343) ? 0.0 : max(_343, 0.0));
    float _509 = isnan(1.0) ? _3612 : (isnan(_3612) ? 1.0 : min(_3612, 1.0));
    float _3623 = isnan(0.0) ? _345 : (isnan(_345) ? 0.0 : max(_345, 0.0));
    float _510 = isnan(1.0) ? _3623 : (isnan(_3623) ? 1.0 : min(_3623, 1.0));
    float _3634 = isnan(0.0) ? _347 : (isnan(_347) ? 0.0 : max(_347, 0.0));
    float _511 = isnan(1.0) ? _3634 : (isnan(_3634) ? 1.0 : min(_3634, 1.0));
    float _3645 = isnan(0.0) ? _374 : (isnan(_374) ? 0.0 : max(_374, 0.0));
    float _512 = isnan(1.0) ? _3645 : (isnan(_3645) ? 1.0 : min(_3645, 1.0));
    float _528 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _570 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _580 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _570);
    float _581 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _570);
    float _582 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _570);
    float _586 = inversesqrt(dot(vec3(_580, _581, _582), vec3(_580, _581, _582)));
    float _587 = _580 * _586;
    float _588 = _581 * _586;
    float _589 = _582 * _586;
    float _595 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _596 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _598 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _600 = _598.w;
    float _619 = fma(_506, cbSceneParam._m0[5u].z, fma(_505, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _504));
    float _622 = fma(_506, cbSceneParam._m0[6u].z, fma(_505, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _504));
    float _625 = fma(_506, cbSceneParam._m0[7u].z, fma(_505, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _504));
    vec4 _627 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _629 = _627.x;
    float _641 = (((_627.y - _508) + (_627.w * _508)) * cbMtdParam._m0[3u].x) + _508;
    float _658 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3(cbMtdParam._m0[3u].x * (_629 * _629)), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w)).z;
    float _666 = (((cbMatDynParam._m0[15u].x - _512) * cbMatDynParam._m0[15u].w) * _658) + _512;
    float _674 = ((_658 * cbMatDynParam._m0[16u].z) * (cbMatDynParam._m0[16u].x - _641)) + _641;
    uint _698 = uint(roundEven(NORMAL.w)) * 13u;
    uint _700 = _698 + 9u;
    uint _701 = _700 + uint(cbMatDynParam._m0[0u].w);
    float _707 = (cbMtdParam._m0[0u].x * _509) * cbInstanceData._m0[_701].x;
    float _708 = (cbMtdParam._m0[0u].y * _510) * cbInstanceData._m0[_701].y;
    float _709 = (cbMtdParam._m0[0u].z * _511) * cbInstanceData._m0[_701].z;
    float _3656 = isnan(0.0) ? _707 : (isnan(_707) ? 0.0 : max(_707, 0.0));
    float _710 = isnan(1.0) ? _3656 : (isnan(_3656) ? 1.0 : min(_3656, 1.0));
    float _3667 = isnan(0.0) ? _708 : (isnan(_708) ? 0.0 : max(_708, 0.0));
    float _711 = isnan(1.0) ? _3667 : (isnan(_3667) ? 1.0 : min(_3667, 1.0));
    float _3678 = isnan(0.0) ? _709 : (isnan(_709) ? 0.0 : max(_709, 0.0));
    float _712 = isnan(1.0) ? _3678 : (isnan(_3678) ? 1.0 : min(_3678, 1.0));
    vec4 _713 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _718 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _729 = (((_718.x - _666) + (_718.w * _666)) * cbMtdParam._m0[3u].x) + _666;
    float _742 = (cbMtdParam._m0[3u].x * (((_710 * _600) - _710) + _713.x)) + _710;
    float _743 = (cbMtdParam._m0[3u].x * (((_711 * _600) - _711) + _713.y)) + _711;
    float _744 = (cbMtdParam._m0[3u].x * (((_712 * _600) - _712) + _713.z)) + _712;
    vec4 _745 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _758 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3((_666 * (_509 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625, (_666 * (_510 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625, (_666 * (_511 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * _745.z;
    float _762 = _758 * cbMatDynParam._m0[13u].w;
    float _772 = (_762 * (cbMatDynParam._m0[13u].x - _742)) + _742;
    float _773 = (_762 * (cbMatDynParam._m0[13u].y - _743)) + _743;
    float _774 = (_762 * (cbMatDynParam._m0[13u].z - _744)) + _744;
    float _782 = ((_758 * cbMatDynParam._m0[15u].w) * (cbMatDynParam._m0[15u].x - _729)) + _729;
    float _783 = 1.0 - _782;
    float _784 = _783 * _772;
    float _785 = _783 * _773;
    float _786 = _783 * _774;
    float _790 = (_772 + (-0.039999999105930328369140625)) * _782;
    float _791 = (_773 + (-0.039999999105930328369140625)) * _782;
    float _792 = (_774 + (-0.039999999105930328369140625)) * _782;
    float _793 = _790 + 0.039999999105930328369140625;
    float _794 = _791 + 0.039999999105930328369140625;
    float _795 = _792 + 0.039999999105930328369140625;
    vec4 _804 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _595, cbSceneParam._m0[86u].y * _596));
    float _807 = _804.x * TEXCOORD_4;
    float _808 = dot(vec3(_504, _505, _506), vec3(_587, _588, _589));
    float _811 = _808 * 2.0;
    float _815 = (_811 * _504) - _587;
    float _816 = (_811 * _505) - _588;
    float _817 = (_811 * _506) - _589;
    float _821 = abs(dot(vec3(_587, _588, _589), vec3(_504, _505, _506)));
    float _3689 = isnan(0.0) ? _821 : (isnan(_821) ? 0.0 : max(_821, 0.0));
    float _823 = sqrt(_674);
    float _835 = exp2((_823 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3689 : (isnan(_3689) ? 1.0 : min(_3689, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_823 * 3.0));
    float _841 = (1.0 - _835) * ((_823 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _842 = _835 * _823;
    float _870 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _874 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _878 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1178;
    float _1180;
    float _1181;
    float _1182;
    float _1183;
    float _1184;
    float _1185;
    float _1186;
    float _1187;
    float _1188;
    float _1189;
    float _1190;
    float _1191;
    float _1192;
    float _1193;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _905 = fma(_878, cbModelParam._m0[26u].z, fma(_874, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _870));
        float _909 = fma(_878, cbModelParam._m0[27u].z, fma(_874, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _870));
        float _913 = fma(_878, cbModelParam._m0[28u].z, fma(_874, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _870));
        float _936 = _870 + _504;
        float _937 = _874 + _505;
        float _938 = _878 + _506;
        float _948 = fma(_938, cbModelParam._m0[26u].z, fma(_937, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _936)) - _905;
        float _949 = fma(_938, cbModelParam._m0[27u].z, fma(_937, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _936)) - _909;
        float _950 = fma(_938, cbModelParam._m0[28u].z, fma(_937, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _936)) - _913;
        float _954 = inversesqrt(dot(vec3(_948, _949, _950), vec3(_948, _949, _950)));
        float _967 = ((_954 * _948) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_905 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _968 = ((_954 * _949) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_909 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _969 = ((_954 * _950) / cbModelParam._m0[34u].z) + ((((((_913 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _972 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_967, _968, _969), 0.0);
        vec4 _979 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_967, _968, _969), 0.0);
        vec4 _986 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_967, _968, _969), 0.0);
        vec4 _993 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_967, _968, _969), 0.0);
        float _1006 = exp2((_972.w + (-0.5)) * 20.0) * 2.0;
        float _1007 = _1006 * (_972.x + (-0.5));
        float _1008 = _1006 * (_972.y + (-0.5));
        float _1009 = _1006 * (_972.z + (-0.5));
        float _1016 = exp2((_979.w + (-0.5)) * 20.0) * 2.0;
        float _1017 = _1016 * (_979.x + (-0.5));
        float _1018 = _1016 * (_979.y + (-0.5));
        float _1019 = _1016 * (_979.z + (-0.5));
        float _1026 = exp2((_986.w + (-0.5)) * 20.0) * 2.0;
        float _1027 = _1026 * (_986.x + (-0.5));
        float _1028 = _1026 * (_986.y + (-0.5));
        float _1029 = _1026 * (_986.z + (-0.5));
        float _1036 = exp2((_993.w + (-0.5)) * 20.0) * 2.0;
        float _1037 = _1036 * (_993.x + (-0.5));
        float _1038 = _1036 * (_993.y + (-0.5));
        float _1039 = _1036 * (_993.z + (-0.5));
        float _1040 = isnan(0.0) ? _1037 : (isnan(_1037) ? 0.0 : max(_1037, 0.0));
        float _1041 = isnan(0.0) ? _1038 : (isnan(_1038) ? 0.0 : max(_1038, 0.0));
        float _1042 = isnan(0.0) ? _1039 : (isnan(_1039) ? 0.0 : max(_1039, 0.0));
        float _1043 = _1007 * 0.5;
        float _1044 = _1017 * 0.5;
        float _1045 = _1027 * 0.5;
        float _1046 = dot(vec3(_1043, _1044, _1045), vec3(_1043, _1044, _1045));
        float _1051 = (_1046 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1046);
        float _1060 = (dot(vec3(_504, _505, _506), vec3(_1051 * _1043, _1051 * _1044, _1051 * _1045)) + 1.0) * 0.5;
        float _3715 = isnan(0.0) ? _1060 : (isnan(_1060) ? 0.0 : max(_1060, 0.0));
        float _1070 = sqrt(((_1044 * _1044) + (_1043 * _1043)) + (_1045 * _1045)) / (_1040 + 9.9999997473787516355514526367188e-06);
        float _3726 = isnan(0.0) ? _1070 : (isnan(_1070) ? 0.0 : max(_1070, 0.0));
        float _1071 = isnan(1.0) ? _3726 : (isnan(_3726) ? 1.0 : min(_3726, 1.0));
        float _1072 = _1071 * 2.0;
        float _1076 = (1.0 - _1071) / (_1071 + 1.0);
        float _3737 = isnan(0.0) ? _1076 : (isnan(_1076) ? 0.0 : max(_1076, 0.0));
        float _1077 = isnan(1.0) ? _3737 : (isnan(_3737) ? 1.0 : min(_3737, 1.0));
        float _1086 = ((((1.0 - _1077) * (_1072 + 2.0)) * exp2(log2(isnan(1.0) ? _3715 : (isnan(_3715) ? 1.0 : min(_3715, 1.0))) * (_1072 + 1.0))) + _1077) * _1040;
        float _1087 = _1008 * 0.5;
        float _1088 = _1018 * 0.5;
        float _1089 = _1028 * 0.5;
        float _1090 = dot(vec3(_1087, _1088, _1089), vec3(_1087, _1088, _1089));
        float _1095 = (_1090 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1090);
        float _1103 = (dot(vec3(_504, _505, _506), vec3(_1095 * _1087, _1095 * _1088, _1095 * _1089)) + 1.0) * 0.5;
        float _3748 = isnan(0.0) ? _1103 : (isnan(_1103) ? 0.0 : max(_1103, 0.0));
        float _1112 = sqrt(((_1088 * _1088) + (_1087 * _1087)) + (_1089 * _1089)) / (_1041 + 9.9999997473787516355514526367188e-06);
        float _3759 = isnan(0.0) ? _1112 : (isnan(_1112) ? 0.0 : max(_1112, 0.0));
        float _1113 = isnan(1.0) ? _3759 : (isnan(_3759) ? 1.0 : min(_3759, 1.0));
        float _1114 = _1113 * 2.0;
        float _1118 = (1.0 - _1113) / (_1113 + 1.0);
        float _3770 = isnan(0.0) ? _1118 : (isnan(_1118) ? 0.0 : max(_1118, 0.0));
        float _1119 = isnan(1.0) ? _3770 : (isnan(_3770) ? 1.0 : min(_3770, 1.0));
        float _1128 = ((((1.0 - _1119) * (_1114 + 2.0)) * exp2(log2(isnan(1.0) ? _3748 : (isnan(_3748) ? 1.0 : min(_3748, 1.0))) * (_1114 + 1.0))) + _1119) * _1041;
        float _1129 = _1009 * 0.5;
        float _1130 = _1019 * 0.5;
        float _1131 = _1029 * 0.5;
        float _1132 = dot(vec3(_1129, _1130, _1131), vec3(_1129, _1130, _1131));
        float _1137 = (_1132 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1132);
        float _1145 = (dot(vec3(_504, _505, _506), vec3(_1137 * _1129, _1137 * _1130, _1137 * _1131)) + 1.0) * 0.5;
        float _3781 = isnan(0.0) ? _1145 : (isnan(_1145) ? 0.0 : max(_1145, 0.0));
        float _1154 = sqrt(((_1130 * _1130) + (_1129 * _1129)) + (_1131 * _1131)) / (_1042 + 9.9999997473787516355514526367188e-06);
        float _3792 = isnan(0.0) ? _1154 : (isnan(_1154) ? 0.0 : max(_1154, 0.0));
        float _1155 = isnan(1.0) ? _3792 : (isnan(_3792) ? 1.0 : min(_3792, 1.0));
        float _1156 = _1155 * 2.0;
        float _1160 = (1.0 - _1155) / (_1155 + 1.0);
        float _3803 = isnan(0.0) ? _1160 : (isnan(_1160) ? 0.0 : max(_1160, 0.0));
        float _1161 = isnan(1.0) ? _3803 : (isnan(_3803) ? 1.0 : min(_3803, 1.0));
        float _1170 = ((((1.0 - _1161) * (_1156 + 2.0)) * exp2(log2(isnan(1.0) ? _3781 : (isnan(_3781) ? 1.0 : min(_3781, 1.0))) * (_1156 + 1.0))) + _1161) * _1042;
        _1178 = _1009;
        _1180 = _1008;
        _1181 = _1007;
        _1182 = _1019;
        _1183 = _1018;
        _1184 = _1017;
        _1185 = _1029;
        _1186 = _1028;
        _1187 = _1027;
        _1188 = _1042;
        _1189 = _1041;
        _1190 = _1040;
        _1191 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1086 : (isnan(_1086) ? 0.0 : max(_1086, 0.0)));
        _1192 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1128 : (isnan(_1128) ? 0.0 : max(_1128, 0.0)));
        _1193 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1170 : (isnan(_1170) ? 0.0 : max(_1170, 0.0)));
    }
    else
    {
        _1178 = _1179;
        _1180 = _1179;
        _1181 = _1179;
        _1182 = _1179;
        _1183 = _1179;
        _1184 = _1179;
        _1185 = _1179;
        _1186 = _1179;
        _1187 = _1179;
        _1188 = _1179;
        _1189 = _1179;
        _1190 = _1179;
        _1191 = 0.0;
        _1192 = 0.0;
        _1193 = 0.0;
    }
    float _1488;
    float _1489;
    float _1490;
    float _1491;
    float _1492;
    float _1493;
    float _1494;
    float _1495;
    float _1496;
    float _1497;
    float _1498;
    float _1499;
    float _1500;
    float _1501;
    float _1502;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1219 = fma(_878, cbModelParam._m0[30u].z, fma(_874, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _870));
        float _1223 = fma(_878, cbModelParam._m0[31u].z, fma(_874, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _870));
        float _1227 = fma(_878, cbModelParam._m0[32u].z, fma(_874, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _870));
        float _1250 = _870 + _504;
        float _1251 = _874 + _505;
        float _1252 = _878 + _506;
        float _1262 = fma(_1252, cbModelParam._m0[30u].z, fma(_1251, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1250)) - _1219;
        float _1263 = fma(_1252, cbModelParam._m0[31u].z, fma(_1251, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1250)) - _1223;
        float _1264 = fma(_1252, cbModelParam._m0[32u].z, fma(_1251, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1250)) - _1227;
        float _1268 = inversesqrt(dot(vec3(_1262, _1263, _1264), vec3(_1262, _1263, _1264)));
        float _1281 = ((_1268 * _1262) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1219 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1282 = ((_1268 * _1263) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1223 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1283 = ((_1268 * _1264) / cbModelParam._m0[35u].z) + ((((((_1227 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1285 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1281, _1282, _1283), 0.0);
        vec4 _1292 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1281, _1282, _1283), 0.0);
        vec4 _1299 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1281, _1282, _1283), 0.0);
        vec4 _1306 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1281, _1282, _1283), 0.0);
        float _1318 = exp2((_1285.w + (-0.5)) * 20.0) * 2.0;
        float _1319 = _1318 * (_1285.x + (-0.5));
        float _1320 = _1318 * (_1285.y + (-0.5));
        float _1321 = _1318 * (_1285.z + (-0.5));
        float _1328 = exp2((_1292.w + (-0.5)) * 20.0) * 2.0;
        float _1329 = _1328 * (_1292.x + (-0.5));
        float _1330 = _1328 * (_1292.y + (-0.5));
        float _1331 = _1328 * (_1292.z + (-0.5));
        float _1338 = exp2((_1299.w + (-0.5)) * 20.0) * 2.0;
        float _1339 = _1338 * (_1299.x + (-0.5));
        float _1340 = _1338 * (_1299.y + (-0.5));
        float _1341 = _1338 * (_1299.z + (-0.5));
        float _1348 = exp2((_1306.w + (-0.5)) * 20.0) * 2.0;
        float _1349 = _1348 * (_1306.x + (-0.5));
        float _1350 = _1348 * (_1306.y + (-0.5));
        float _1351 = _1348 * (_1306.z + (-0.5));
        float _1352 = isnan(0.0) ? _1349 : (isnan(_1349) ? 0.0 : max(_1349, 0.0));
        float _1353 = isnan(0.0) ? _1350 : (isnan(_1350) ? 0.0 : max(_1350, 0.0));
        float _1354 = isnan(0.0) ? _1351 : (isnan(_1351) ? 0.0 : max(_1351, 0.0));
        float _1355 = _1319 * 0.5;
        float _1356 = _1329 * 0.5;
        float _1357 = _1339 * 0.5;
        float _1358 = dot(vec3(_1355, _1356, _1357), vec3(_1355, _1356, _1357));
        float _1363 = (_1358 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1358);
        float _1371 = (dot(vec3(_504, _505, _506), vec3(_1363 * _1355, _1363 * _1356, _1363 * _1357)) + 1.0) * 0.5;
        float _3844 = isnan(0.0) ? _1371 : (isnan(_1371) ? 0.0 : max(_1371, 0.0));
        float _1380 = sqrt(((_1356 * _1356) + (_1355 * _1355)) + (_1357 * _1357)) / (_1352 + 9.9999997473787516355514526367188e-06);
        float _3855 = isnan(0.0) ? _1380 : (isnan(_1380) ? 0.0 : max(_1380, 0.0));
        float _1381 = isnan(1.0) ? _3855 : (isnan(_3855) ? 1.0 : min(_3855, 1.0));
        float _1382 = _1381 * 2.0;
        float _1386 = (1.0 - _1381) / (_1381 + 1.0);
        float _3866 = isnan(0.0) ? _1386 : (isnan(_1386) ? 0.0 : max(_1386, 0.0));
        float _1387 = isnan(1.0) ? _3866 : (isnan(_3866) ? 1.0 : min(_3866, 1.0));
        float _1396 = ((((1.0 - _1387) * (_1382 + 2.0)) * exp2(log2(isnan(1.0) ? _3844 : (isnan(_3844) ? 1.0 : min(_3844, 1.0))) * (_1382 + 1.0))) + _1387) * _1352;
        float _1397 = _1320 * 0.5;
        float _1398 = _1330 * 0.5;
        float _1399 = _1340 * 0.5;
        float _1400 = dot(vec3(_1397, _1398, _1399), vec3(_1397, _1398, _1399));
        float _1405 = (_1400 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1400);
        float _1413 = (dot(vec3(_504, _505, _506), vec3(_1405 * _1397, _1405 * _1398, _1405 * _1399)) + 1.0) * 0.5;
        float _3877 = isnan(0.0) ? _1413 : (isnan(_1413) ? 0.0 : max(_1413, 0.0));
        float _1422 = sqrt(((_1398 * _1398) + (_1397 * _1397)) + (_1399 * _1399)) / (_1353 + 9.9999997473787516355514526367188e-06);
        float _3888 = isnan(0.0) ? _1422 : (isnan(_1422) ? 0.0 : max(_1422, 0.0));
        float _1423 = isnan(1.0) ? _3888 : (isnan(_3888) ? 1.0 : min(_3888, 1.0));
        float _1424 = _1423 * 2.0;
        float _1428 = (1.0 - _1423) / (_1423 + 1.0);
        float _3899 = isnan(0.0) ? _1428 : (isnan(_1428) ? 0.0 : max(_1428, 0.0));
        float _1429 = isnan(1.0) ? _3899 : (isnan(_3899) ? 1.0 : min(_3899, 1.0));
        float _1438 = ((((1.0 - _1429) * (_1424 + 2.0)) * exp2(log2(isnan(1.0) ? _3877 : (isnan(_3877) ? 1.0 : min(_3877, 1.0))) * (_1424 + 1.0))) + _1429) * _1353;
        float _1439 = _1321 * 0.5;
        float _1440 = _1331 * 0.5;
        float _1441 = _1341 * 0.5;
        float _1442 = dot(vec3(_1439, _1440, _1441), vec3(_1439, _1440, _1441));
        float _1447 = (_1442 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1442);
        float _1455 = (dot(vec3(_504, _505, _506), vec3(_1447 * _1439, _1447 * _1440, _1447 * _1441)) + 1.0) * 0.5;
        float _3910 = isnan(0.0) ? _1455 : (isnan(_1455) ? 0.0 : max(_1455, 0.0));
        float _1464 = sqrt(((_1440 * _1440) + (_1439 * _1439)) + (_1441 * _1441)) / (_1354 + 9.9999997473787516355514526367188e-06);
        float _3921 = isnan(0.0) ? _1464 : (isnan(_1464) ? 0.0 : max(_1464, 0.0));
        float _1465 = isnan(1.0) ? _3921 : (isnan(_3921) ? 1.0 : min(_3921, 1.0));
        float _1466 = _1465 * 2.0;
        float _1470 = (1.0 - _1465) / (_1465 + 1.0);
        float _3932 = isnan(0.0) ? _1470 : (isnan(_1470) ? 0.0 : max(_1470, 0.0));
        float _1471 = isnan(1.0) ? _3932 : (isnan(_3932) ? 1.0 : min(_3932, 1.0));
        float _1480 = ((((1.0 - _1471) * (_1466 + 2.0)) * exp2(log2(isnan(1.0) ? _3910 : (isnan(_3910) ? 1.0 : min(_3910, 1.0))) * (_1466 + 1.0))) + _1471) * _1354;
        _1488 = _1321;
        _1489 = _1320;
        _1490 = _1319;
        _1491 = _1331;
        _1492 = _1330;
        _1493 = _1329;
        _1494 = _1341;
        _1495 = _1340;
        _1496 = _1339;
        _1497 = _1354;
        _1498 = _1353;
        _1499 = _1352;
        _1500 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1396 : (isnan(_1396) ? 0.0 : max(_1396, 0.0)));
        _1501 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1438 : (isnan(_1438) ? 0.0 : max(_1438, 0.0)));
        _1502 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1480 : (isnan(_1480) ? 0.0 : max(_1480, 0.0)));
    }
    else
    {
        _1488 = _1179;
        _1489 = _1179;
        _1490 = _1179;
        _1491 = _1179;
        _1492 = _1179;
        _1493 = _1179;
        _1494 = _1179;
        _1495 = _1179;
        _1496 = _1179;
        _1497 = _1179;
        _1498 = _1179;
        _1499 = _1179;
        _1500 = 0.0;
        _1501 = 0.0;
        _1502 = 0.0;
    }
    float _1512 = (cbModelParam._m0[1u].x * (_1500 - _1191)) + _1191;
    float _1513 = (cbModelParam._m0[1u].x * (_1501 - _1192)) + _1192;
    float _1514 = (cbModelParam._m0[1u].x * (_1502 - _1193)) + _1193;
    float _1535 = fma(_1514, cbSceneParam._m0[89u].z, fma(_1513, cbSceneParam._m0[89u].y, _1512 * cbSceneParam._m0[89u].x));
    float _1538 = fma(_1514, cbSceneParam._m0[90u].z, fma(_1513, cbSceneParam._m0[90u].y, _1512 * cbSceneParam._m0[90u].x));
    float _1541 = fma(_1514, cbSceneParam._m0[91u].z, fma(_1513, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1512));
    float _1556 = _815 * 0.5;
    float _1557 = _816 * 0.5;
    float _1558 = _817 * 0.5;
    float _1559 = dot(vec4(_1556, _1557, _1558, 1.0), vec4(_1490, _1493, _1496, _1499));
    float _1562 = dot(vec4(_1556, _1557, _1558, 1.0), vec4(_1489, _1492, _1495, _1498));
    float _1565 = dot(vec4(_1556, _1557, _1558, 1.0), vec4(_1488, _1491, _1494, _1497));
    float _1596;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1572 = dot(vec4(_1556, _1557, _1558, 1.0), vec4(_1178, _1182, _1185, _1188));
        float _1576 = dot(vec4(_1556, _1557, _1558, 1.0), vec4(_1180, _1183, _1186, _1189));
        float _1580 = dot(vec4(_1556, _1557, _1558, 1.0), vec4(_1181, _1184, _1187, _1190));
        float _1587 = dot(vec4(cbModelParam._m0[39u]), vec4(_1556, _1557, _1558, 1.0));
        _1596 = dot(vec3(isnan(0.0) ? _1580 : (isnan(_1580) ? 0.0 : max(_1580, 0.0)), isnan(0.0) ? _1576 : (isnan(_1576) ? 0.0 : max(_1576, 0.0)), isnan(0.0) ? _1572 : (isnan(_1572) ? 0.0 : max(_1572, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1587) ? 0.0 : (isnan(0.0) ? _1587 : max(0.0, _1587))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1596 = 1.0;
    }
    float _1607;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1598 = dot(vec4(cbModelParam._m0[40u]), vec4(_1556, _1557, _1558, 1.0));
        _1607 = dot(vec3(isnan(0.0) ? _1559 : (isnan(_1559) ? 0.0 : max(_1559, 0.0)), isnan(0.0) ? _1562 : (isnan(_1562) ? 0.0 : max(_1562, 0.0)), isnan(0.0) ? _1565 : (isnan(_1565) ? 0.0 : max(_1565, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1598) ? 0.0 : (isnan(0.0) ? _1598 : max(0.0, _1598))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1607 = 1.0;
    }
    float _1611 = (_1607 * cbModelParam._m0[1u].x) + (_1596 * (1.0 - cbModelParam._m0[1u].x));
    float _1621 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _674);
    float _1622 = isnan(_1621) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1621 : min(cbModelParam._m0[25u].z, _1621));
    float _1702;
    float _1704;
    float _1706;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1669 = fma(_878, cbModelParam._m0[13u].z, fma(_874, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _870)) + cbModelParam._m0[13u].w;
        float _1673 = fma(_878, cbModelParam._m0[14u].z, fma(_874, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _870)) + cbModelParam._m0[14u].w;
        float _1677 = fma(_878, cbModelParam._m0[15u].z, fma(_874, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _870)) + cbModelParam._m0[15u].w;
        float _1680 = fma(_817, cbModelParam._m0[13u].z, fma(_816, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _815));
        float _1683 = fma(_817, cbModelParam._m0[14u].z, fma(_816, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _815));
        float _1686 = fma(_817, cbModelParam._m0[15u].z, fma(_816, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _815));
        float _1714;
        if (_1680 > 0.0)
        {
            _1714 = abs((1.0 - _1669) / _1680);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1680 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1669 + 1.0) / _1680);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1714 = frontier_phi_16_14_ladder;
        }
        float _1918;
        if (_1683 > 0.0)
        {
            _1918 = abs((1.0 - _1673) / _1683);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1683 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1673 + 1.0) / _1683);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1918 = frontier_phi_25_21_ladder;
        }
        float _2172;
        if (_1686 > 0.0)
        {
            _2172 = abs((1.0 - _1677) / _1686);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1686 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1677 + 1.0) / _1686);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2172 = frontier_phi_37_32_ladder;
        }
        float _2174 = isnan(_1918) ? _1714 : (isnan(_1714) ? _1918 : min(_1714, _1918));
        float _2175 = isnan(_2172) ? _2174 : (isnan(_2174) ? _2172 : min(_2174, _2172));
        float _2179 = (_2175 * _1680) + _1669;
        float _2180 = (_2175 * _1683) + _1673;
        float _2181 = (_2175 * _1686) + _1677;
        float _2182 = _2175 * 9.9999997473787516355514526367188e-05;
        float _2184 = (-1.0) - _2182;
        float _2186 = _2182 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_2181 > _2186) || ((_2181 < _2184) || ((_2180 > _2186) || ((_2180 < _2184) || ((_2179 < _2184) || (_2179 > _2186))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2309 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2181, cbModelParam._m0[9u].z, fma(_2180, cbModelParam._m0[9u].y, _2179 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2181, cbModelParam._m0[10u].z, fma(_2180, cbModelParam._m0[10u].y, _2179 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2181, cbModelParam._m0[11u].z, fma(_2180, cbModelParam._m0[11u].y, _2179 * cbModelParam._m0[11u].x))), _1622);
            frontier_phi_15_37_ladder = _2309.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2309.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2309.x * cbModelParam._m0[1u].y;
        }
        _1702 = frontier_phi_15_37_ladder_2;
        _1704 = frontier_phi_15_37_ladder_1;
        _1706 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1690 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_815, _816, _817), _1622);
        _1702 = _1690.x * cbModelParam._m0[1u].y;
        _1704 = _1690.y * cbModelParam._m0[1u].y;
        _1706 = _1690.z * cbModelParam._m0[1u].y;
    }
    float _1710 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _674);
    float _1711 = isnan(_1710) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1710 : min(cbModelParam._m0[25u].w, _1710));
    float _1802;
    float _1804;
    float _1806;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1766 = fma(_878, cbModelParam._m0[21u].z, fma(_874, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _870)) + cbModelParam._m0[21u].w;
        float _1770 = fma(_878, cbModelParam._m0[22u].z, fma(_874, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _870)) + cbModelParam._m0[22u].w;
        float _1774 = fma(_878, cbModelParam._m0[23u].z, fma(_874, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _870)) + cbModelParam._m0[23u].w;
        float _1777 = fma(_817, cbModelParam._m0[21u].z, fma(_816, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _815));
        float _1780 = fma(_817, cbModelParam._m0[22u].z, fma(_816, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _815));
        float _1783 = fma(_817, cbModelParam._m0[23u].z, fma(_816, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _815));
        float _1923;
        if (_1777 > 0.0)
        {
            _1923 = abs((1.0 - _1766) / _1777);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1777 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1766 + 1.0) / _1777);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1923 = frontier_phi_27_23_ladder;
        }
        float _2199;
        if (_1780 > 0.0)
        {
            _2199 = abs((1.0 - _1770) / _1780);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1780 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1770 + 1.0) / _1780);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _2199 = frontier_phi_39_34_ladder;
        }
        float _2412;
        if (_1783 > 0.0)
        {
            _2412 = abs((1.0 - _1774) / _1783);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1783 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1774 + 1.0) / _1783);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _2412 = frontier_phi_48_45_ladder;
        }
        float _2414 = isnan(_2199) ? _1923 : (isnan(_1923) ? _2199 : min(_1923, _2199));
        float _2415 = isnan(_2412) ? _2414 : (isnan(_2414) ? _2412 : min(_2414, _2412));
        float _2419 = (_2415 * _1777) + _1766;
        float _2420 = (_2415 * _1780) + _1770;
        float _2421 = (_2415 * _1783) + _1774;
        float _2422 = _2415 * 9.9999997473787516355514526367188e-05;
        float _2423 = (-1.0) - _2422;
        float _2425 = _2422 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2421 > _2425) || ((_2421 < _2423) || ((_2420 > _2425) || ((_2420 < _2423) || ((_2419 < _2423) || (_2419 > _2425))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2662 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2421, cbModelParam._m0[17u].z, fma(_2420, cbModelParam._m0[17u].y, _2419 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2421, cbModelParam._m0[18u].z, fma(_2420, cbModelParam._m0[18u].y, _2419 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2421, cbModelParam._m0[19u].z, fma(_2420, cbModelParam._m0[19u].y, _2419 * cbModelParam._m0[19u].x))), _1711);
            frontier_phi_24_48_ladder = _2662.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2662.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2662.x * cbModelParam._m0[1u].z;
        }
        _1802 = frontier_phi_24_48_ladder_2;
        _1804 = frontier_phi_24_48_ladder_1;
        _1806 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1786 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_815, _816, _817), _1711);
        _1802 = _1786.x * cbModelParam._m0[1u].z;
        _1804 = _1786.y * cbModelParam._m0[1u].z;
        _1806 = _1786.z * cbModelParam._m0[1u].z;
    }
    float _1819 = (((_841 * _793) + _842) * _807) * ((cbModelParam._m0[1u].w * (_1802 - _1702)) + _1702);
    float _1821 = (((_841 * _794) + _842) * _807) * ((cbModelParam._m0[1u].w * (_1804 - _1704)) + _1704);
    float _1823 = (((_841 * _795) + _842) * _807) * ((cbModelParam._m0[1u].w * (_1806 - _1706)) + _1706);
    float _1826 = fma(_1823, cbSceneParam._m0[89u].z, fma(_1821, cbSceneParam._m0[89u].y, _1819 * cbSceneParam._m0[89u].x));
    float _1829 = fma(_1823, cbSceneParam._m0[90u].z, fma(_1821, cbSceneParam._m0[90u].y, _1819 * cbSceneParam._m0[90u].x));
    float _1832 = fma(_1823, cbSceneParam._m0[91u].z, fma(_1821, cbSceneParam._m0[91u].y, _1819 * cbSceneParam._m0[91u].x));
    uvec4 _1842 = floatBitsToUint(cbInstanceData._m0[_698 + 5u]);
    uint _1844 = _1842.x * 14u;
    uint _1845 = _1844 + 13u;
    float _1852 = _807 + (-1.0);
    float _1857 = (cbLight._m0[_1845].x * _1852) + 1.0;
    float _1858 = (cbLight._m0[_1845].y * _1852) + 1.0;
    float _1859 = (cbLight._m0[_1845].z * _1852) + 1.0;
    float _1860 = (cbLight._m0[_1845].w * _1852) + 1.0;
    uint _1861 = _1844 + 5u;
    float _1867 = isnan(1.0) ? _1858 : (isnan(_1858) ? 1.0 : min(_1858, 1.0));
    uint _1871 = _1844 + 4u;
    float _1877 = isnan(1.0) ? _1857 : (isnan(_1857) ? 1.0 : min(_1857, 1.0));
    uint _1881 = _1844 | 1u;
    float _1892 = dot(vec3(cbLight._m0[_1844].xyz), vec3(_504, _505, _506));
    float _1895 = dot(vec3(cbLight._m0[_1881].xyz), vec3(_504, _505, _506));
    float _4068 = isnan(0.0) ? _1892 : (isnan(_1892) ? 0.0 : max(_1892, 0.0));
    float _4079 = isnan(0.0) ? _1895 : (isnan(_1895) ? 0.0 : max(_1895, 0.0));
    float _1900 = (isnan(1.0) ? _4068 : (isnan(_4068) ? 1.0 : min(_4068, 1.0))) * 0.3183098733425140380859375;
    float _1902 = (isnan(1.0) ? _4079 : (isnan(_4079) ? 1.0 : min(_4079, 1.0))) * 0.3183098733425140380859375;
    float _1909 = ((cbLight._m0[_1861].x * _1867) * _1902) + ((cbLight._m0[_1871].x * _1877) * _1900);
    float _1910 = ((_1867 * cbLight._m0[_1861].y) * _1902) + ((_1877 * cbLight._m0[_1871].y) * _1900);
    float _1911 = ((_1867 * cbLight._m0[_1861].z) * _1902) + ((_1877 * cbLight._m0[_1871].z) * _1900);
    uvec4 _1915 = floatBitsToUint(cbLight._m0[_1844 + 12u]);
    bool _1917 = _1915.x == 0u;
    float _1928;
    float _1930;
    float _1932;
    if (_1917)
    {
        _1928 = _1909;
        _1930 = _1910;
        _1932 = _1911;
    }
    else
    {
        uint _1936 = _1844 + 6u;
        float _1952 = (dot(vec3(cbLight._m0[_1844 + 2u].xyz), vec3(_504, _505, _506)) * 0.5) + 0.5;
        float _1953 = _1952 * _1952;
        float _4090 = isnan(0.0) ? _1953 : (isnan(_1953) ? 0.0 : max(_1953, 0.0));
        float _1954 = isnan(1.0) ? _4090 : (isnan(_4090) ? 1.0 : min(_4090, 1.0));
        float _1955 = isnan(1.0) ? _1859 : (isnan(_1859) ? 1.0 : min(_1859, 1.0));
        _1928 = (((cbLight._m0[_1936].x * 0.3183098733425140380859375) * _1954) * _1955) + _1909;
        _1930 = (((cbLight._m0[_1936].y * 0.3183098733425140380859375) * _1954) * _1955) + _1910;
        _1932 = (((cbLight._m0[_1936].z * 0.3183098733425140380859375) * _1954) * _1955) + _1911;
    }
    bool _1935 = _1915.y == 0u;
    float _1973;
    float _1975;
    float _1977;
    if (_1935)
    {
        _1973 = _1928;
        _1975 = _1930;
        _1977 = _1932;
    }
    else
    {
        uint _2143 = _1844 + 7u;
        float _2159 = (dot(vec3(cbLight._m0[_1844 + 3u].xyz), vec3(_504, _505, _506)) * 0.5) + 0.5;
        float _2160 = _2159 * _2159;
        float _4106 = isnan(0.0) ? _2160 : (isnan(_2160) ? 0.0 : max(_2160, 0.0));
        float _2161 = isnan(1.0) ? _4106 : (isnan(_4106) ? 1.0 : min(_4106, 1.0));
        float _2162 = isnan(1.0) ? _1860 : (isnan(_1860) ? 1.0 : min(_1860, 1.0));
        _1973 = (((cbLight._m0[_2143].x * 0.3183098733425140380859375) * _2161) * _2162) + _1928;
        _1975 = (((cbLight._m0[_2143].y * 0.3183098733425140380859375) * _2161) * _2162) + _1930;
        _1977 = (((cbLight._m0[_2143].z * 0.3183098733425140380859375) * _2161) * _2162) + _1932;
    }
    uint _1980 = _1844 + 8u;
    float _1993 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1844].w)) * _674) * 0.949999988079071044921875);
    float _1994 = _1993 * _1993;
    float _1995 = cbLight._m0[_1844].x + _587;
    float _1996 = cbLight._m0[_1844].y + _588;
    float _1997 = cbLight._m0[_1844].z + _589;
    float _2001 = inversesqrt(dot(vec3(_1995, _1996, _1997), vec3(_1995, _1996, _1997)));
    float _2002 = _2001 * _1995;
    float _2003 = _2001 * _1996;
    float _2004 = _2001 * _1997;
    float _2005 = dot(vec3(_504, _505, _506), vec3(cbLight._m0[_1844].xyz));
    float _4122 = isnan(0.0) ? _2005 : (isnan(_2005) ? 0.0 : max(_2005, 0.0));
    float _2008 = isnan(1.0) ? _4122 : (isnan(_4122) ? 1.0 : min(_4122, 1.0));
    float _4133 = isnan(0.0) ? _808 : (isnan(_808) ? 0.0 : max(_808, 0.0));
    float _2009 = isnan(1.0) ? _4133 : (isnan(_4133) ? 1.0 : min(_4133, 1.0));
    float _2010 = dot(vec3(_504, _505, _506), vec3(_2002, _2003, _2004));
    float _4144 = isnan(0.0) ? _2010 : (isnan(_2010) ? 0.0 : max(_2010, 0.0));
    float _2013 = isnan(1.0) ? _4144 : (isnan(_4144) ? 1.0 : min(_4144, 1.0));
    float _2014 = dot(vec3(cbLight._m0[_1844].xyz), vec3(_2002, _2003, _2004));
    float _4155 = isnan(0.0) ? _2014 : (isnan(_2014) ? 0.0 : max(_2014, 0.0));
    float _2018 = _1994 * _1994;
    float _2022 = ((_2013 * _2013) * (_2018 + (-1.0))) + 1.0;
    float _2030 = exp2(log2(1.0 - (isnan(1.0) ? _4155 : (isnan(_4155) ? 1.0 : min(_4155, 1.0)))) * 5.0);
    float _2031 = 0.959999978542327880859375 - _790;
    float _2033 = 0.959999978542327880859375 - _791;
    float _2034 = 0.959999978542327880859375 - _792;
    float _2041 = 1.0 - _1994;
    float _2052 = (0.5 / (((_2009 * ((_2008 * _2041) + _1994)) + 9.9999999392252902907785028219223e-09) + (((_2009 * _2041) + _1994) * _2008))) * _2008;
    float _4166 = isnan(0.0) ? _2052 : (isnan(_2052) ? 0.0 : max(_2052, 0.0));
    float _2054 = (isnan(1.0) ? _4166 : (isnan(_4166) ? 1.0 : min(_4166, 1.0))) * (_2018 / ((_2022 * _2022) * 3.141590118408203125));
    uint _2065 = _1844 + 9u;
    float _2076 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1881].w)) * _674) * 0.949999988079071044921875);
    float _2077 = _2076 * _2076;
    float _2078 = cbLight._m0[_1881].x + _587;
    float _2079 = cbLight._m0[_1881].y + _588;
    float _2080 = cbLight._m0[_1881].z + _589;
    float _2084 = inversesqrt(dot(vec3(_2078, _2079, _2080), vec3(_2078, _2079, _2080)));
    float _2085 = _2084 * _2078;
    float _2086 = _2084 * _2079;
    float _2087 = _2084 * _2080;
    float _2088 = dot(vec3(_504, _505, _506), vec3(cbLight._m0[_1881].xyz));
    float _4177 = isnan(0.0) ? _2088 : (isnan(_2088) ? 0.0 : max(_2088, 0.0));
    float _2091 = isnan(1.0) ? _4177 : (isnan(_4177) ? 1.0 : min(_4177, 1.0));
    float _2092 = dot(vec3(_504, _505, _506), vec3(_2085, _2086, _2087));
    float _4188 = isnan(0.0) ? _2092 : (isnan(_2092) ? 0.0 : max(_2092, 0.0));
    float _2095 = isnan(1.0) ? _4188 : (isnan(_4188) ? 1.0 : min(_4188, 1.0));
    float _2096 = dot(vec3(cbLight._m0[_1881].xyz), vec3(_2085, _2086, _2087));
    float _4199 = isnan(0.0) ? _2096 : (isnan(_2096) ? 0.0 : max(_2096, 0.0));
    float _2100 = _2077 * _2077;
    float _2104 = ((_2095 * _2095) * (_2100 + (-1.0))) + 1.0;
    float _2111 = exp2(log2(1.0 - (isnan(1.0) ? _4199 : (isnan(_4199) ? 1.0 : min(_4199, 1.0)))) * 5.0);
    float _2118 = 1.0 - _2077;
    float _2128 = (0.5 / (((_2009 * ((_2091 * _2118) + _2077)) + 9.9999999392252902907785028219223e-09) + (((_2009 * _2118) + _2077) * _2091))) * _2091;
    float _4210 = isnan(0.0) ? _2128 : (isnan(_2128) ? 0.0 : max(_2128, 0.0));
    float _2130 = (isnan(1.0) ? _4210 : (isnan(_4210) ? 1.0 : min(_4210, 1.0))) * (_2100 / ((_2104 * _2104) * 3.141590118408203125));
    float _2140 = (((((_2111 * _2031) + _793) * cbLight._m0[_2065].x) * _2130) * _1867) + (((((_2030 * _2031) + _793) * cbLight._m0[_1980].x) * _2054) * _1877);
    float _2141 = (((((_2111 * _2033) + _794) * cbLight._m0[_2065].y) * _2130) * _1867) + (((((_2030 * _2033) + _794) * cbLight._m0[_1980].y) * _2054) * _1877);
    float _2142 = (((((_2111 * _2034) + _795) * cbLight._m0[_2065].z) * _2130) * _1867) + (((((_2030 * _2034) + _795) * cbLight._m0[_1980].z) * _2054) * _1877);
    float _2204;
    float _2206;
    float _2208;
    if (_1917)
    {
        _2204 = _2140;
        _2206 = _2141;
        _2208 = _2142;
    }
    else
    {
        uint _2210 = _1844 + 2u;
        uint _2214 = _1844 + 10u;
        float _2228 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2210].w)) * _674) * 0.949999988079071044921875);
        float _2229 = _2228 * _2228;
        float _2230 = cbLight._m0[_2210].x + _587;
        float _2231 = cbLight._m0[_2210].y + _588;
        float _2232 = cbLight._m0[_2210].z + _589;
        float _2236 = inversesqrt(dot(vec3(_2230, _2231, _2232), vec3(_2230, _2231, _2232)));
        float _2237 = _2236 * _2230;
        float _2238 = _2236 * _2231;
        float _2239 = _2236 * _2232;
        float _2240 = dot(vec3(_504, _505, _506), vec3(cbLight._m0[_2210].xyz));
        float _4221 = isnan(0.0) ? _2240 : (isnan(_2240) ? 0.0 : max(_2240, 0.0));
        float _2243 = isnan(1.0) ? _4221 : (isnan(_4221) ? 1.0 : min(_4221, 1.0));
        float _2244 = dot(vec3(_504, _505, _506), vec3(_2237, _2238, _2239));
        float _4232 = isnan(0.0) ? _2244 : (isnan(_2244) ? 0.0 : max(_2244, 0.0));
        float _2247 = isnan(1.0) ? _4232 : (isnan(_4232) ? 1.0 : min(_4232, 1.0));
        float _2248 = dot(vec3(cbLight._m0[_2210].xyz), vec3(_2237, _2238, _2239));
        float _4243 = isnan(0.0) ? _2248 : (isnan(_2248) ? 0.0 : max(_2248, 0.0));
        float _2252 = _2229 * _2229;
        float _2256 = ((_2247 * _2247) * (_2252 + (-1.0))) + 1.0;
        float _2263 = exp2(log2(1.0 - (isnan(1.0) ? _4243 : (isnan(_4243) ? 1.0 : min(_4243, 1.0)))) * 5.0);
        float _2270 = 1.0 - _2229;
        float _2280 = (0.5 / (((_2009 * ((_2243 * _2270) + _2229)) + 9.9999999392252902907785028219223e-09) + (((_2009 * _2270) + _2229) * _2243))) * _2243;
        float _4254 = isnan(0.0) ? _2280 : (isnan(_2280) ? 0.0 : max(_2280, 0.0));
        float _2282 = (isnan(1.0) ? _4254 : (isnan(_4254) ? 1.0 : min(_4254, 1.0))) * (_2252 / ((_2256 * _2256) * 3.141590118408203125));
        float _2283 = isnan(1.0) ? _1859 : (isnan(_1859) ? 1.0 : min(_1859, 1.0));
        _2204 = (((((_2263 * _2031) + _793) * cbLight._m0[_2214].x) * _2282) * _2283) + _2140;
        _2206 = (((((_2263 * _2033) + _794) * cbLight._m0[_2214].y) * _2282) * _2283) + _2141;
        _2208 = (((((_2263 * _2034) + _795) * cbLight._m0[_2214].z) * _2282) * _2283) + _2142;
    }
    float _2318;
    float _2320;
    float _2322;
    if (_1935)
    {
        _2318 = _2204;
        _2320 = _2206;
        _2322 = _2208;
    }
    else
    {
        uint _2329 = _1844 + 3u;
        uint _2333 = _1844 + 11u;
        float _2347 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2329].w)) * _674) * 0.949999988079071044921875);
        float _2348 = _2347 * _2347;
        float _2349 = cbLight._m0[_2329].x + _587;
        float _2350 = cbLight._m0[_2329].y + _588;
        float _2351 = cbLight._m0[_2329].z + _589;
        float _2355 = inversesqrt(dot(vec3(_2349, _2350, _2351), vec3(_2349, _2350, _2351)));
        float _2356 = _2355 * _2349;
        float _2357 = _2355 * _2350;
        float _2358 = _2355 * _2351;
        float _2359 = dot(vec3(_504, _505, _506), vec3(cbLight._m0[_2329].xyz));
        float _4270 = isnan(0.0) ? _2359 : (isnan(_2359) ? 0.0 : max(_2359, 0.0));
        float _2362 = isnan(1.0) ? _4270 : (isnan(_4270) ? 1.0 : min(_4270, 1.0));
        float _2363 = dot(vec3(_504, _505, _506), vec3(_2356, _2357, _2358));
        float _4281 = isnan(0.0) ? _2363 : (isnan(_2363) ? 0.0 : max(_2363, 0.0));
        float _2366 = isnan(1.0) ? _4281 : (isnan(_4281) ? 1.0 : min(_4281, 1.0));
        float _2367 = dot(vec3(cbLight._m0[_2329].xyz), vec3(_2356, _2357, _2358));
        float _4292 = isnan(0.0) ? _2367 : (isnan(_2367) ? 0.0 : max(_2367, 0.0));
        float _2371 = _2348 * _2348;
        float _2375 = ((_2366 * _2366) * (_2371 + (-1.0))) + 1.0;
        float _2382 = exp2(log2(1.0 - (isnan(1.0) ? _4292 : (isnan(_4292) ? 1.0 : min(_4292, 1.0)))) * 5.0);
        float _2389 = 1.0 - _2348;
        float _2399 = (0.5 / (((_2009 * ((_2362 * _2389) + _2348)) + 9.9999999392252902907785028219223e-09) + (((_2009 * _2389) + _2348) * _2362))) * _2362;
        float _4303 = isnan(0.0) ? _2399 : (isnan(_2399) ? 0.0 : max(_2399, 0.0));
        float _2401 = (isnan(1.0) ? _4303 : (isnan(_4303) ? 1.0 : min(_4303, 1.0))) * (_2371 / ((_2375 * _2375) * 3.141590118408203125));
        float _2402 = isnan(1.0) ? _1860 : (isnan(_1860) ? 1.0 : min(_1860, 1.0));
        _2318 = (((((_2382 * _2031) + _793) * cbLight._m0[_2333].x) * _2401) * _2402) + _2204;
        _2320 = (((((_2382 * _2033) + _794) * cbLight._m0[_2333].y) * _2401) * _2402) + _2206;
        _2322 = (((((_2382 * _2034) + _795) * cbLight._m0[_2333].z) * _2401) * _2402) + _2208;
    }
    float _2536;
    float _2538;
    float _2540;
    float _2542;
    float _2544;
    float _2546;
    if (_1842.y == 0u)
    {
        float _2477 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2478 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2477;
        float _2479 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2477;
        float _2480 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2477;
        uvec4 _2492 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2493 = _2492.x;
        uint _2504 = uint((float(_2492.y) * floor(float(uint(cbSceneParam._m0[85u].y * _596) / _2493))) + floor(float(uint(cbSceneParam._m0[85u].x * _595) / _2493)));
        float _2514 = (log2(_2480 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2515 = isnan(0.0) ? _2514 : (isnan(_2514) ? 0.0 : max(_2514, 0.0));
        uint _2518 = uint(isnan(14.0) ? _2515 : (isnan(_2515) ? 14.0 : min(_2515, 14.0)));
        uvec4 _2523 = texelFetch(g_lightClusterGridBuffer, int(((_2518 << 2u) + (_2504 << 6u)) >> 2u));
        uint _2524 = _2523.x;
        uint _2525 = _2492.z;
        float _2667;
        float _2669;
        float _2671;
        float _2673;
        float _2675;
        float _2677;
        if (((((1u << ((_2525 >> 4u) & 15u)) + 4294967295u) & _2524) == 0u) || ((_2525 & 240u) == 0u))
        {
            _2667 = 0.0;
            _2669 = 0.0;
            _2671 = 0.0;
            _2673 = 0.0;
            _2675 = 0.0;
            _2677 = 0.0;
        }
        else
        {
            float _2668;
            float _2670;
            float _2672;
            float _2674;
            float _2676;
            float _2678;
            float _2820 = 0.0;
            float _2821 = 0.0;
            float _2822 = 0.0;
            float _2823 = 0.0;
            float _2824 = 0.0;
            float _2825 = 0.0;
            uint _2826 = 0u;
            uint _2835;
            bool _2836;
            for (;;)
            {
                _2835 = texelFetch(g_lightClassification, int((((_2518 << 5u) + (_2504 << 9u)) + (_2826 << 2u)) >> 2u)).x;
                _2836 = _2835 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2836)
                {
                    frontier_phi_63_pred = _2825;
                    frontier_phi_63_pred_1 = _2824;
                    frontier_phi_63_pred_2 = _2823;
                    frontier_phi_63_pred_3 = _2822;
                    frontier_phi_63_pred_4 = _2821;
                    frontier_phi_63_pred_5 = _2820;
                }
                else
                {
                    float _2944;
                    float _2945;
                    float _2946;
                    float _2947;
                    float _2948;
                    float _2949;
                    uint _2950;
                    _2944 = _2820;
                    _2945 = _2821;
                    _2946 = _2822;
                    _2947 = _2823;
                    _2948 = _2824;
                    _2949 = _2825;
                    _2950 = _2835;
                    float _2876;
                    float _2877;
                    float _2878;
                    float _2879;
                    float _2880;
                    float _2881;
                    for (;;)
                    {
                        uint _2954 = uint(findLSB(_2950)) + (_2826 << 5u);
                        uint _2951 = (_2950 + 4294967295u) & _2950;
                        uint _2956 = _2954 * 48u;
                        vec4 _2970 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2956)).x, texelFetch(g_PointLightRenderingBuffer, int(_2956 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2956 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2956 + 3u)).x));
                        uint _2976 = (_2954 * 48u) + 4u;
                        vec4 _2989 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2976)).x, texelFetch(g_PointLightRenderingBuffer, int(_2976 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2976 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2976 + 3u)).x));
                        uint _2995 = (_2954 * 48u) + 8u;
                        vec3 _3006 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2995)).x, texelFetch(g_PointLightRenderingBuffer, int(_2995 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2995 + 2u)).x));
                        float _3010 = _2970.x - _2478;
                        float _3011 = _2970.y - _2479;
                        float _3012 = _2970.z - _2480;
                        float _3013 = dot(vec3(_3010, _3011, _3012), vec3(_3010, _3011, _3012));
                        float _3016 = inversesqrt(_3013);
                        float _3017 = _3016 * _3010;
                        float _3018 = _3016 * _3011;
                        float _3019 = _3016 * _3012;
                        float _3020 = dot(vec3(_619, _622, _625), vec3(_3017, _3018, _3019));
                        float _3025 = 1.0 - (_3013 * _2970.w);
                        float _4329 = isnan(0.0) ? _3025 : (isnan(_3025) ? 0.0 : max(_3025, 0.0));
                        float _3026 = isnan(1.0) ? _4329 : (isnan(_4329) ? 1.0 : min(_4329, 1.0));
                        float _3027 = sqrt(_3013) * _2989.w;
                        float _3030 = 1.39999997615814208984375 / (_3027 + 1.39999997615814208984375);
                        float _3031 = _3030 * _3030;
                        float _3034 = ((1.0 - _3031) * _3020) + _3031;
                        float _3037 = _3027 * _3027;
                        float _3041 = ((isnan(0.0) ? _3034 : (isnan(_3034) ? 0.0 : max(_3034, 0.0))) * _3026) / ((_3037 * 0.699999988079071044921875) + 1.0);
                        float _3045 = (-0.0) - _2478;
                        float _3046 = (-0.0) - _2479;
                        float _3047 = (-0.0) - _2480;
                        float _3051 = inversesqrt(dot(vec3(_3045, _3046, _3047), vec3(_3045, _3046, _3047)));
                        float _3052 = _3051 * _3045;
                        float _3053 = _3051 * _3046;
                        float _3054 = _3051 * _3047;
                        float _3062 = exp2(log2(1.0 / ((_3037 * 3.5) + 5.0)) * 0.25);
                        float _3063 = 1.0 - _823;
                        float _3070 = sqrt(1.0 - ((1.0 - (_3063 * _3063)) * (1.0 - (_3062 * _3062))));
                        float _3071 = _3070 * _3070;
                        float _3072 = _3071 * _3071;
                        float _3073 = _3052 + _3017;
                        float _3074 = _3053 + _3018;
                        float _3075 = _3054 + _3019;
                        float _3079 = inversesqrt(dot(vec3(_3073, _3074, _3075), vec3(_3073, _3074, _3075)));
                        float _3083 = dot(vec3(_619, _622, _625), vec3(_3052, _3053, _3054));
                        float _4345 = isnan(0.0) ? _3083 : (isnan(_3083) ? 0.0 : max(_3083, 0.0));
                        float _3086 = isnan(1.0) ? _4345 : (isnan(_4345) ? 1.0 : min(_4345, 1.0));
                        float _3087 = dot(vec3(_619, _622, _625), vec3(_3079 * _3073, _3079 * _3074, _3079 * _3075));
                        float _4356 = isnan(0.0) ? _3087 : (isnan(_3087) ? 0.0 : max(_3087, 0.0));
                        float _3090 = isnan(1.0) ? _4356 : (isnan(_4356) ? 1.0 : min(_4356, 1.0));
                        float _3094 = ((_3090 * _3090) * (_3072 + (-1.0))) + 1.0;
                        float _3095 = _3030 * _3071;
                        float _3096 = _3095 * _3095;
                        float _3099 = ((1.0 - _3096) * _3020) + _3096;
                        float _4367 = isnan(0.0) ? _3099 : (isnan(_3099) ? 0.0 : max(_3099, 0.0));
                        float _3100 = isnan(1.0) ? _4367 : (isnan(_4367) ? 1.0 : min(_4367, 1.0));
                        float _3101 = 1.0 - _3071;
                        float _3111 = (0.5 / (((_3100 * ((_3086 * _3101) + _3071)) + 9.9999999392252902907785028219223e-09) + (((_3100 * _3101) + _3071) * _3086))) * _3100;
                        float _4378 = isnan(0.0) ? _3111 : (isnan(_3111) ? 0.0 : max(_3111, 0.0));
                        float _3122 = (((_3072 * 3.1415927410125732421875) * (isnan(1.0) ? _4378 : (isnan(_4378) ? 1.0 : min(_4378, 1.0)))) / ((_3094 * _3094) * ((_3037 * 2.1991131305694580078125) + 3.141590118408203125))) * _3026;
                        _2879 = (_3041 * _2989.x) + _2947;
                        _2880 = (_3041 * _2989.y) + _2948;
                        _2881 = (_3041 * _2989.z) + _2949;
                        _2876 = (_3122 * _3006.x) + _2944;
                        _2877 = (_3122 * _3006.y) + _2945;
                        _2878 = (_3122 * _3006.z) + _2946;
                        if (_2951 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2944 = _2876;
                            _2945 = _2877;
                            _2946 = _2878;
                            _2947 = _2879;
                            _2948 = _2880;
                            _2949 = _2881;
                            _2950 = _2951;
                        }
                    }
                    frontier_phi_63_pred = _2881;
                    frontier_phi_63_pred_1 = _2880;
                    frontier_phi_63_pred_2 = _2879;
                    frontier_phi_63_pred_3 = _2878;
                    frontier_phi_63_pred_4 = _2877;
                    frontier_phi_63_pred_5 = _2876;
                }
                _2678 = frontier_phi_63_pred;
                _2676 = frontier_phi_63_pred_1;
                _2674 = frontier_phi_63_pred_2;
                _2672 = frontier_phi_63_pred_3;
                _2670 = frontier_phi_63_pred_4;
                _2668 = frontier_phi_63_pred_5;
                uint _2827 = _2826 + 1u;
                if (_2827 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2820 = _2668;
                    _2821 = _2670;
                    _2822 = _2672;
                    _2823 = _2674;
                    _2824 = _2676;
                    _2825 = _2678;
                    _2826 = _2827;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2667 = _2668;
            _2669 = _2670;
            _2671 = _2672;
            _2673 = _2674;
            _2675 = _2676;
            _2677 = _2678;
        }
        uvec4 _2681 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2682 = _2681.z;
        uint _2684 = (_2682 >> 8u) & 15u;
        float _2788;
        float _2790;
        float _2792;
        float _2794;
        float _2796;
        float _2798;
        if (((4294967295u << _2684) & _2524) == 0u)
        {
            _2788 = _2667;
            _2790 = _2669;
            _2792 = _2671;
            _2794 = _2673;
            _2796 = _2675;
            _2798 = _2677;
        }
        else
        {
            float _2813 = inversesqrt(dot(vec3(_2478, _2479, _2480), vec3(_2478, _2479, _2480)));
            float _2814 = _2813 * _2478;
            float _2815 = _2813 * _2479;
            float _2816 = _2813 * _2480;
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2684 < ((_2682 >> 12u) & 15u))
            {
                float _2789;
                float _2791;
                float _2793;
                float _2795;
                float _2797;
                float _2799;
                float _2927 = _2667;
                float _2928 = _2669;
                float _2929 = _2671;
                float _2930 = _2673;
                float _2931 = _2675;
                float _2932 = _2677;
                uint _2933 = _2684;
                uint _2942;
                bool _2943;
                for (;;)
                {
                    _2942 = texelFetch(g_lightClassification, int((((_2518 << 5u) + (_2504 << 9u)) + (_2933 << 2u)) >> 2u)).x;
                    _2943 = _2942 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_2943)
                    {
                        frontier_phi_69_pred = _2932;
                        frontier_phi_69_pred_1 = _2931;
                        frontier_phi_69_pred_2 = _2930;
                        frontier_phi_69_pred_3 = _2929;
                        frontier_phi_69_pred_4 = _2928;
                        frontier_phi_69_pred_5 = _2927;
                    }
                    else
                    {
                        float _3127;
                        float _3128;
                        float _3129;
                        float _3130;
                        float _3131;
                        float _3132;
                        float _3422;
                        float _3423;
                        float _3424;
                        float _3425;
                        float _3426;
                        float _3427;
                        float _3140 = _2927;
                        float _3141 = _2928;
                        float _3142 = _2929;
                        float _3143 = _2930;
                        float _3144 = _2931;
                        float _3145 = _2932;
                        uint _3146 = _2942;
                        uint _3147;
                        vec4 _3172;
                        float _3173;
                        vec4 _3188;
                        vec3 _3200;
                        vec4 _3215;
                        vec4 _3231;
                        float _3278;
                        bool _3279;
                        for (;;)
                        {
                            uint _3157 = ((_2933 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3146));
                            _3147 = (_3146 + 4294967295u) & _3146;
                            uint _3159 = _3157 * 40u;
                            _3172 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3159)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3159 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3159 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3159 + 3u)).x));
                            _3173 = _3172.w;
                            uint _3175 = (_3157 * 40u) + 4u;
                            _3188 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3175)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3175 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3175 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3175 + 3u)).x));
                            uint _3190 = (_3157 * 40u) + 8u;
                            _3200 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3190)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3190 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3190 + 2u)).x));
                            uint _3202 = (_3157 * 40u) + 16u;
                            _3215 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3202)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3202 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3202 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3202 + 3u)).x));
                            uint _3218 = (_3157 * 40u) + 20u;
                            _3231 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3218)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3218 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3218 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3218 + 3u)).x));
                            uint _3234 = (_3157 * 40u) + 24u;
                            vec4 _3247 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3234)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3234 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3234 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3234 + 3u)).x));
                            uint _3253 = (_3157 * 40u) + 28u;
                            vec4 _3266 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3253)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3253 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3253 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3253 + 3u)).x));
                            _3278 = fma(_2480, _3266.z, fma(_2479, _3266.y, _3266.x * _2478)) + _3266.w;
                            _3279 = !((fma(_2480, _3247.z, fma(_2479, _3247.y, _3247.x * _2478)) + _3247.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_3279)
                            {
                                float _3306 = _3172.x - _2478;
                                float _3307 = _3172.y - _2479;
                                float _3308 = _3172.z - _2480;
                                float _3309 = dot(vec3(_3306, _3307, _3308), vec3(_3306, _3307, _3308));
                                float _3312 = inversesqrt(_3309);
                                float _3313 = _3312 * _3306;
                                float _3314 = _3312 * _3307;
                                float _3315 = _3312 * _3308;
                                float _3319 = 1.0 - (_3309 / (_3173 * _3173));
                                float _4389 = isnan(0.0) ? _3319 : (isnan(_3319) ? 0.0 : max(_3319, 0.0));
                                float _3320 = isnan(1.0) ? _4389 : (isnan(_4389) ? 1.0 : min(_4389, 1.0));
                                float _3324 = sqrt(_3309) * _3188.w;
                                float _3326 = 1.39999997615814208984375 / (_3324 + 1.39999997615814208984375);
                                float _3327 = _3326 * _3326;
                                float _3330 = ((1.0 - _3327) * dot(vec3(_3313, _3314, _3315), vec3(_619, _622, _625))) + _3327;
                                float _3333 = _3324 * _3324;
                                float _3337 = (fma(_2480, _3215.z, fma(_2479, _3215.y, _3215.x * _2478)) + _3215.w) / _3278;
                                float _3338 = (fma(_2480, _3231.z, fma(_2479, _3231.y, _3231.x * _2478)) + _3231.w) / _3278;
                                float _3342 = 1.0 - dot(vec2(_3337, _3338), vec2(_3337, _3338));
                                float _4405 = isnan(0.0) ? _3342 : (isnan(_3342) ? 0.0 : max(_3342, 0.0));
                                float _3343 = isnan(1.0) ? _4405 : (isnan(_4405) ? 1.0 : min(_4405, 1.0));
                                float _3344 = _3343 * (((isnan(0.0) ? _3330 : (isnan(_3330) ? 0.0 : max(_3330, 0.0))) * _3320) / ((_3333 * 0.699999988079071044921875) + 1.0));
                                float _3356 = exp2(log2(1.0 / ((_3333 * 3.5) + 5.0)) * 0.25);
                                float _3357 = 1.0 - _823;
                                float _3364 = sqrt(1.0 - ((1.0 - (_3357 * _3357)) * (1.0 - (_3356 * _3356))));
                                float _3365 = _3364 * _3364;
                                float _3366 = _3365 * _3365;
                                float _3367 = _3313 - _2814;
                                float _3368 = _3314 - _2815;
                                float _3369 = _3315 - _2816;
                                float _3373 = inversesqrt(dot(vec3(_3367, _3368, _3369), vec3(_3367, _3368, _3369)));
                                float _3377 = dot(vec3(_619, _622, _625), vec3((-0.0) - _2814, (-0.0) - _2815, (-0.0) - _2816));
                                float _4416 = isnan(0.0) ? _3377 : (isnan(_3377) ? 0.0 : max(_3377, 0.0));
                                float _3380 = isnan(1.0) ? _4416 : (isnan(_4416) ? 1.0 : min(_4416, 1.0));
                                float _3381 = dot(vec3(_619, _622, _625), vec3(_3373 * _3367, _3373 * _3368, _3373 * _3369));
                                float _4427 = isnan(0.0) ? _3381 : (isnan(_3381) ? 0.0 : max(_3381, 0.0));
                                float _3384 = isnan(1.0) ? _4427 : (isnan(_4427) ? 1.0 : min(_4427, 1.0));
                                float _3388 = ((_3384 * _3384) * (_3366 + (-1.0))) + 1.0;
                                float _3389 = _3326 * _3365;
                                float _3390 = _3389 * _3389;
                                float _3396 = ((1.0 - _3390) * dot(vec3(_619, _622, _625), vec3(_3313, _3314, _3315))) + _3390;
                                float _4438 = isnan(0.0) ? _3396 : (isnan(_3396) ? 0.0 : max(_3396, 0.0));
                                float _3397 = isnan(1.0) ? _4438 : (isnan(_4438) ? 1.0 : min(_4438, 1.0));
                                float _3398 = 1.0 - _3365;
                                float _3408 = (0.5 / (((_3397 * ((_3380 * _3398) + _3365)) + 9.9999999392252902907785028219223e-09) + (((_3397 * _3398) + _3365) * _3380))) * _3397;
                                float _4449 = isnan(0.0) ? _3408 : (isnan(_3408) ? 0.0 : max(_3408, 0.0));
                                float _3418 = (_3343 * _3320) * (((_3366 * 3.1415927410125732421875) * (isnan(1.0) ? _4449 : (isnan(_4449) ? 1.0 : min(_4449, 1.0)))) / ((_3388 * _3388) * ((_3333 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_75_pred = _3344 * _3188.z;
                                frontier_phi_75_pred_1 = _3344 * _3188.y;
                                frontier_phi_75_pred_2 = _3344 * _3188.x;
                                frontier_phi_75_pred_3 = _3418 * _3200.z;
                                frontier_phi_75_pred_4 = _3418 * _3200.y;
                                frontier_phi_75_pred_5 = _3418 * _3200.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _3427 = frontier_phi_75_pred;
                            _3426 = frontier_phi_75_pred_1;
                            _3425 = frontier_phi_75_pred_2;
                            _3424 = frontier_phi_75_pred_3;
                            _3423 = frontier_phi_75_pred_4;
                            _3422 = frontier_phi_75_pred_5;
                            _3130 = _3425 + _3143;
                            _3131 = _3426 + _3144;
                            _3132 = _3427 + _3145;
                            _3127 = _3422 + _3140;
                            _3128 = _3423 + _3141;
                            _3129 = _3424 + _3142;
                            if (_3147 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3140 = _3127;
                                _3141 = _3128;
                                _3142 = _3129;
                                _3143 = _3130;
                                _3144 = _3131;
                                _3145 = _3132;
                                _3146 = _3147;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _3132;
                        frontier_phi_69_pred_1 = _3131;
                        frontier_phi_69_pred_2 = _3130;
                        frontier_phi_69_pred_3 = _3129;
                        frontier_phi_69_pred_4 = _3128;
                        frontier_phi_69_pred_5 = _3127;
                    }
                    _2799 = frontier_phi_69_pred;
                    _2797 = frontier_phi_69_pred_1;
                    _2795 = frontier_phi_69_pred_2;
                    _2793 = frontier_phi_69_pred_3;
                    _2791 = frontier_phi_69_pred_4;
                    _2789 = frontier_phi_69_pred_5;
                    uint _2934 = _2933 + 1u;
                    if (_2934 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2927 = _2789;
                        _2928 = _2791;
                        _2929 = _2793;
                        _2930 = _2795;
                        _2931 = _2797;
                        _2932 = _2799;
                        _2933 = _2934;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2799;
                frontier_phi_57_58_ladder_1 = _2797;
                frontier_phi_57_58_ladder_2 = _2795;
                frontier_phi_57_58_ladder_3 = _2793;
                frontier_phi_57_58_ladder_4 = _2791;
                frontier_phi_57_58_ladder_5 = _2789;
            }
            else
            {
                frontier_phi_57_58_ladder = _2677;
                frontier_phi_57_58_ladder_1 = _2675;
                frontier_phi_57_58_ladder_2 = _2673;
                frontier_phi_57_58_ladder_3 = _2671;
                frontier_phi_57_58_ladder_4 = _2669;
                frontier_phi_57_58_ladder_5 = _2667;
            }
            _2788 = frontier_phi_57_58_ladder_5;
            _2790 = frontier_phi_57_58_ladder_4;
            _2792 = frontier_phi_57_58_ladder_3;
            _2794 = frontier_phi_57_58_ladder_2;
            _2796 = frontier_phi_57_58_ladder_1;
            _2798 = frontier_phi_57_58_ladder;
        }
        float _2803 = isnan(1.0) ? _807 : (isnan(_807) ? 1.0 : min(_807, 1.0));
        _2536 = (_2803 * _2794) + _1973;
        _2538 = (_2803 * _2796) + _1975;
        _2540 = (_2803 * _2798) + _1977;
        _2542 = ((_2788 * _793) * _2803) + _2318;
        _2544 = ((_2790 * _794) * _2803) + _2320;
        _2546 = ((_2792 * _795) * _2803) + _2322;
    }
    else
    {
        _2536 = _1973;
        _2538 = _1975;
        _2540 = _1977;
        _2542 = _2318;
        _2544 = _2320;
        _2546 = _2322;
    }
    uint _2552 = _700 + uint(cbMatDynParam._m0[0u].w);
    float _2562 = ((((cbMtdParam._m0[12u].x * cbMtdParam._m0[16u].z) * cbMtdParam._m0[15u].w) * _448) * _461.x) * cbInstanceData._m0[_2552].x;
    float _2567 = ((((cbMtdParam._m0[12u].y * cbMtdParam._m0[16u].z) * cbMtdParam._m0[15u].w) * _448) * _461.y) * cbInstanceData._m0[_2552].y;
    float _2572 = ((((cbMtdParam._m0[12u].z * cbMtdParam._m0[16u].z) * cbMtdParam._m0[15u].w) * _448) * _461.z) * cbInstanceData._m0[_2552].z;
    float _4465 = isnan(0.0) ? _784 : (isnan(_784) ? 0.0 : max(_784, 0.0));
    float _4476 = isnan(0.0) ? _785 : (isnan(_785) ? 0.0 : max(_785, 0.0));
    float _4487 = isnan(0.0) ? _786 : (isnan(_786) ? 0.0 : max(_786, 0.0));
    float _4498 = isnan(0.0) ? _507 : (isnan(_507) ? 0.0 : max(_507, 0.0));
    float _2590 = (((isnan(1.0) ? _4465 : (isnan(_4465) ? 1.0 : min(_4465, 1.0))) * (_2536 + ((isnan(0.0) ? _1535 : (isnan(_1535) ? 0.0 : max(_1535, 0.0))) * _807))) + ((_2542 + ((isnan(0.0) ? _1826 : (isnan(_1826) ? 0.0 : max(_1826, 0.0))) * _1611)) * cbPerFrame._m0[3u].x)) + _2562;
    float _2592 = (_2567 + ((_2544 + ((isnan(0.0) ? _1829 : (isnan(_1829) ? 0.0 : max(_1829, 0.0))) * _1611)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4476 : (isnan(_4476) ? 1.0 : min(_4476, 1.0))) * (_2538 + ((isnan(0.0) ? _1538 : (isnan(_1538) ? 0.0 : max(_1538, 0.0))) * _807)));
    float _2594 = (_2572 + ((_2546 + ((isnan(0.0) ? _1832 : (isnan(_1832) ? 0.0 : max(_1832, 0.0))) * _1611)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4487 : (isnan(_4487) ? 1.0 : min(_4487, 1.0))) * (_2540 + ((isnan(0.0) ? _1541 : (isnan(_1541) ? 0.0 : max(_1541, 0.0))) * _807)));
    float _4524 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2607 = isnan(1.0) ? _4524 : (isnan(_4524) ? 1.0 : min(_4524, 1.0));
    float _2612 = cbInstanceData._m0[_698 + 6u].w * (isnan(1.0) ? _4498 : (isnan(_4498) ? 1.0 : min(_4498, 1.0)));
    float _2617 = _595 / cbSceneParam._m0[86u].x;
    float _2618 = _596 / cbSceneParam._m0[86u].y;
    vec4 _2632 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2617, _2618, (log2((isnan(cbSceneParam._m0[77u].w) ? _528 : (isnan(_528) ? cbSceneParam._m0[77u].w : min(_528, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2634 = _2632.x;
    float _2635 = _2632.y;
    float _2636 = _2632.z;
    float _2637 = _2632.w;
    float _2729;
    float _2731;
    float _2733;
    float _2735;
    if (_528 > cbSceneParam._m0[78u].w)
    {
        float _2692 = isnan(_528) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _528 : min(cbSceneParam._m0[80u].w, _528));
        float _2693 = _2692 / _528;
        float _2704 = _2693 * _580;
        float _2705 = _581 * _2693;
        float _2706 = (-0.0) - _2705;
        float _2707 = _2693 * _582;
        float _2709 = (cbSceneParam._m0[77u].w * _2706) / _2692;
        float _2710 = _2709 + cbSceneParam._m0[79u].w;
        float _2711 = cbSceneParam._m0[79u].w - _2705;
        float _2717 = sqrt(((_2704 * _2704) + (_2705 * _2705)) + (_2707 * _2707));
        float _2720 = (1.0 - (cbSceneParam._m0[77u].w / _2692)) * _2717;
        float _2725 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2727 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2889;
        if (abs((_2706 - _2709) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2889 = ((((_2710 > 0.0) ? exp2(_2725 * _2710) : (2.0 - exp2(_2727 * _2710))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2720;
        }
        else
        {
            float _2849 = 1.0 / cbSceneParam._m0[80u].x;
            float _2850 = isnan(_2711) ? _2710 : (isnan(_2710) ? _2711 : max(_2710, _2711));
            float _2851 = isnan(_2711) ? _2710 : (isnan(_2710) ? _2711 : min(_2710, _2711));
            float _2860 = isnan(0.0) ? _2850 : (isnan(_2850) ? 0.0 : min(_2850, 0.0));
            float _2861 = isnan(0.0) ? _2851 : (isnan(_2851) ? 0.0 : min(_2851, 0.0));
            _2889 = ((abs(_2717 / _2706) * cbSceneParam._m0[80u].y) * ((((_2860 - _2861) * 2.0) - ((exp2(_2725 * (isnan(0.0) ? _2850 : (isnan(_2850) ? 0.0 : max(_2850, 0.0)))) - exp2(_2725 * (isnan(0.0) ? _2851 : (isnan(_2851) ? 0.0 : max(_2851, 0.0))))) * _2849)) - ((exp2(_2727 * _2860) - exp2(_2727 * _2861)) * _2849))) + (_2720 * cbSceneParam._m0[80u].z);
        }
        vec4 _2891 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2617, _2618, 1.0), 0.0);
        float _2900 = exp2((_2889 * (-1.44269502162933349609375)) * (1.0 - _2891.w));
        float _2901 = log2(_2900);
        float _2917 = log2(_2637);
        _2729 = (exp2(_2917 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2901 * cbSceneParam._m0[78u].x)) * _2891.x) / cbSceneParam._m0[78u].x)) + _2634;
        _2731 = (exp2(_2917 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2901 * cbSceneParam._m0[78u].y)) * _2891.y) / cbSceneParam._m0[78u].y)) + _2635;
        _2733 = (exp2(_2917 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2901 * cbSceneParam._m0[78u].z)) * _2891.z) / cbSceneParam._m0[78u].z)) + _2636;
        _2735 = _2900 * _2637;
    }
    else
    {
        _2729 = _2634;
        _2731 = _2635;
        _2733 = _2636;
        _2735 = _2637;
    }
    float _2747 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2748 = _2747 == 3.0;
    float _2749 = log2(_2735);
    float _2753 = exp2(_2749 * cbSceneParam._m0[78u].x);
    float _2754 = exp2(_2749 * cbSceneParam._m0[78u].y);
    float _2755 = exp2(_2749 * cbSceneParam._m0[78u].z);
    float _2756 = _2753 * (isnan(0.0) ? _2590 : (isnan(_2590) ? 0.0 : max(_2590, 0.0)));
    float _2757 = _2754 * (isnan(0.0) ? _2592 : (isnan(_2592) ? 0.0 : max(_2592, 0.0)));
    float _2758 = _2755 * (isnan(0.0) ? _2594 : (isnan(_2594) ? 0.0 : max(_2594, 0.0)));
    float _2767 = (_2747 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2767 * (_2748 ? _2756 : (_2756 + (cbSceneParam._m0[72u].w * _2729)));
    SV_Target.y = _2767 * (_2748 ? _2757 : (_2757 + (cbSceneParam._m0[72u].w * _2731)));
    SV_Target.z = _2767 * (_2748 ? _2758 : (_2758 + (cbSceneParam._m0[72u].w * _2733)));
    SV_Target.w = _2612;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2562) * _2607) * _2753) * _2767;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2567) * _2607) * _2754) * _2767;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2572) * _2607) * _2755) * _2767;
    SV_Target_1.w = _2612;
}


