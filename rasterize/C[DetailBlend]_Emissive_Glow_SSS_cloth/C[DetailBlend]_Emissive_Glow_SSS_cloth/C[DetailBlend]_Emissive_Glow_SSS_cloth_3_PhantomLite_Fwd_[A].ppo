#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[18];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_1;
layout(set = 0, binding = 1) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_7;
layout(set = 0, binding = 10) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_6;
layout(set = 0, binding = 2) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_0;
layout(set = 0, binding = 3) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_10;
layout(set = 0, binding = 4) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_11;
layout(set = 0, binding = 5) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_12;
layout(set = 0, binding = 6) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_2;
layout(set = 0, binding = 7) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_3;
layout(set = 0, binding = 9) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_5;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1417;
float _3842;
float _3843;
float _3844;
float _3845;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _211 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _212 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _213 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _219 = inversesqrt(dot(vec3(_211, _212, _213), vec3(_211, _212, _213)));
    float _226 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _227 = _226 * NORMAL.x;
    float _228 = _226 * NORMAL.y;
    float _229 = _226 * NORMAL.z;
    float _233 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _241;
    float _242;
    float _243;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _241 = (-0.0) - _227;
        _242 = (-0.0) - _228;
        _243 = (-0.0) - _229;
    }
    else
    {
        _241 = _227;
        _242 = _228;
        _243 = _229;
    }
    float _287 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _297 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _287);
    float _298 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _287);
    float _299 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _287);
    vec4 _312 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _317 = _312.z;
    float _324 = exp2(log2(_317 * 22.0) * 260.0);
    float _325 = isnan(0.0) ? _324 : (isnan(_324) ? 0.0 : max(_324, 0.0));
    float _326 = isnan(1.0) ? _325 : (isnan(_325) ? 1.0 : min(_325, 1.0));
    vec4 _340 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _350 = cbMtdParam._m0[10u].x * _340.x;
    float _351 = cbMtdParam._m0[10u].y * _340.y;
    float _352 = cbMtdParam._m0[10u].z * _340.z;
    vec4 _364 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _384 = (((cbMtdParam._m0[9u].x * _364.x) - _350) * _326) + _350;
    float _385 = (((cbMtdParam._m0[9u].y * _364.y) - _351) * _326) + _351;
    float _386 = (((cbMtdParam._m0[9u].z * _364.z) - _352) * _326) + _352;
    float _391 = exp2(log2(1.0 - _312.w) * 8.0);
    vec4 _403 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_10, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    vec4 _437 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _445 = (((((cbMtdParam._m0[13u].x * _403.x) - _384) * _391) + _384) * 4.55000019073486328125) * _437.x;
    float _447 = (((((cbMtdParam._m0[13u].y * _403.y) - _385) * _391) + _385) * 4.55000019073486328125) * _437.y;
    float _449 = (((((cbMtdParam._m0[13u].z * _403.z) - _386) * _391) + _386) * 4.55000019073486328125) * _437.z;
    float _450 = _437.w * _364.w;
    float _480 = (((texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w)).x - cbMtdParam._m0[17u].x) + cbMtdParam._m0[16u].x) * _326) + cbMtdParam._m0[17u].x;
    float _483 = ((cbMtdParam._m0[15u].z - _480) * _391) + _480;
    vec4 _495 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w));
    float _497 = _495.x;
    float _498 = _495.y;
    float _504 = cbMtdParam._m0[14u].y + _495.z;
    vec4 _516 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w));
    float _525 = (((_516.z - _504) + cbMtdParam._m0[14u].x) * _326) + _504;
    vec4 _538 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _555 = (((_326 * (_317 + (-0.5))) + 0.5) * 2.0) * ((((_538.z - _525) + cbMtdParam._m0[15u].y) * _391) + _525);
    float _570 = abs((fract(cbMtdParam._m0[15u].x * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _3864 = isnan(0.0) ? _570 : (isnan(_570) ? 0.0 : max(_570, 0.0));
    float _571 = isnan(1.0) ? _3864 : (isnan(_3864) ? 1.0 : min(_3864, 1.0));
    float _576 = (_571 * _571) * (3.0 - (_571 * 2.0));
    vec4 _589 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _597 = (_312.x * 2.0) + (-1.0);
    float _598 = (_312.y * 2.0) + (-1.0);
    float _599 = dot(vec2(_597, _598), vec2(_597, _598));
    float _3875 = isnan(0.0) ? _599 : (isnan(_599) ? 0.0 : max(_599, 0.0));
    float _604 = sqrt(1.0 - (isnan(1.0) ? _3875 : (isnan(_3875) ? 1.0 : min(_3875, 1.0))));
    float _609 = ((_516.x - _497) * _326) + _497;
    float _610 = ((_516.y - _498) * _326) + _498;
    float _623 = (cbMtdParam._m0[14u].z * (((((_538.x - _609) * _391) + _609) * 2.0) + (-1.0))) + _597;
    float _624 = (cbMtdParam._m0[14u].z * (((((_538.y - _610) * _391) + _610) * 2.0) + (-1.0))) + _598;
    float _627 = fma(_604, _241, fma(_624, _233 * TANGENT.x, (_219 * _211) * _623));
    float _630 = fma(_604, _242, fma(_624, _233 * TANGENT.y, (_219 * _212) * _623));
    float _633 = fma(_604, _243, fma(_624, _233 * TANGENT.z, (_219 * _213) * _623));
    float _637 = inversesqrt(dot(vec3(_627, _630, _633), vec3(_627, _630, _633)));
    float _638 = _637 * _627;
    float _639 = _637 * _630;
    float _640 = _637 * _633;
    float _3886 = isnan(0.0) ? _450 : (isnan(_450) ? 0.0 : max(_450, 0.0));
    float _641 = isnan(1.0) ? _3886 : (isnan(_3886) ? 1.0 : min(_3886, 1.0));
    float _3897 = isnan(0.0) ? _555 : (isnan(_555) ? 0.0 : max(_555, 0.0));
    float _642 = isnan(1.0) ? _3897 : (isnan(_3897) ? 1.0 : min(_3897, 1.0));
    float _3908 = isnan(0.0) ? _445 : (isnan(_445) ? 0.0 : max(_445, 0.0));
    float _643 = isnan(1.0) ? _3908 : (isnan(_3908) ? 1.0 : min(_3908, 1.0));
    float _3919 = isnan(0.0) ? _447 : (isnan(_447) ? 0.0 : max(_447, 0.0));
    float _644 = isnan(1.0) ? _3919 : (isnan(_3919) ? 1.0 : min(_3919, 1.0));
    float _3930 = isnan(0.0) ? _449 : (isnan(_449) ? 0.0 : max(_449, 0.0));
    float _645 = isnan(1.0) ? _3930 : (isnan(_3930) ? 1.0 : min(_3930, 1.0));
    float _3941 = isnan(0.0) ? _483 : (isnan(_483) ? 0.0 : max(_483, 0.0));
    float _646 = isnan(1.0) ? _3941 : (isnan(_3941) ? 1.0 : min(_3941, 1.0));
    float _654 = cbMatDynParam._m0[9u].x * _643;
    float _655 = cbMatDynParam._m0[9u].y * _644;
    float _656 = cbMatDynParam._m0[9u].z * _645;
    float _663 = inversesqrt(dot(vec3(_297, _298, _299), vec3(_297, _298, _299)));
    float _664 = _663 * _297;
    float _665 = _663 * _298;
    float _666 = _663 * _299;
    float _667 = dot(vec3(_638, _639, _640), vec3(_664, _665, _666));
    float _673 = abs(exp2(log2(_667) * cbMatDynParam._m0[12u].x));
    float _674 = isnan(0.100000001490116119384765625) ? _673 : (isnan(_673) ? 0.100000001490116119384765625 : max(_673, 0.100000001490116119384765625));
    float _680 = ((isnan(0.699999988079071044921875) ? _674 : (isnan(_674) ? 0.699999988079071044921875 : min(_674, 0.699999988079071044921875))) + (-0.100000001490116119384765625)) * 1.66666662693023681640625;
    float _702 = 1.0 - cbMatDynParam._m0[8u].w;
    float _3962 = isnan(0.0) ? _702 : (isnan(_702) ? 0.0 : max(_702, 0.0));
    float _705 = 1.0 - cbMatDynParam._m0[7u].w;
    float _3973 = isnan(0.0) ? _705 : (isnan(_705) ? 0.0 : max(_705, 0.0));
    float _706 = isnan(1.0) ? _3973 : (isnan(_3973) ? 1.0 : min(_3973, 1.0));
    float _709 = (((isnan(1.0) ? _3962 : (isnan(_3962) ? 1.0 : min(_3962, 1.0))) - _706) * _680) + _706;
    float _728 = dot(vec3(_638, _639, _640), vec3(0.0, -1.0, 0.0));
    float _3984 = isnan(0.0) ? _728 : (isnan(_728) ? 0.0 : max(_728, 0.0));
    float _731 = isnan(1.0) ? _3984 : (isnan(_3984) ? 1.0 : min(_3984, 1.0));
    float _738 = (_731 * _643) * cbMatDynParam._m0[11u].x;
    float _740 = (_731 * _644) * cbMatDynParam._m0[11u].y;
    float _742 = (_731 * _645) * cbMatDynParam._m0[11u].z;
    float _749 = dot(vec3(_664, _665, _666), vec3(_638, _639, _640));
    float _752 = _749 * 2.0;
    float _762 = dot(vec3((-0.0) - (_664 - (_752 * _638)), (-0.0) - (_665 - (_752 * _639)), (-0.0) - (_666 - (_752 * _640))), vec3(0.0, -1.0, 0.0));
    float _3995 = isnan(0.0) ? _762 : (isnan(_762) ? 0.0 : max(_762, 0.0));
    float _769 = exp2(log2(isnan(1.0) ? _3995 : (isnan(_3995) ? 1.0 : min(_3995, 1.0))) * 4.0);
    float _795 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    vec4 _800 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _802 = _800.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1098 = sqrt(((_297 * _297) + (_298 * _298)) + (_299 * _299));
        float _1104 = (cbMatDynParam._m0[5u].x * _1098) + cbMatDynParam._m0[5u].y;
        float _4006 = isnan(0.0) ? _1104 : (isnan(_1104) ? 0.0 : max(_1104, 0.0));
        float _1105 = isnan(1.0) ? _4006 : (isnan(_4006) ? 1.0 : min(_4006, 1.0));
        float _1109 = (cbMatDynParam._m0[5u].z * _1098) + cbMatDynParam._m0[5u].w;
        float _4017 = isnan(0.0) ? _1109 : (isnan(_1109) ? 0.0 : max(_1109, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4017 : (isnan(_4017) ? 1.0 : min(_4017, 1.0))) - _1105)) + _1105) < ((_802 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _813 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _814 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _816 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _818 = _816.w;
    float _836 = fma(_640, cbSceneParam._m0[5u].z, fma(_639, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _638));
    float _839 = fma(_640, cbSceneParam._m0[6u].z, fma(_639, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _638));
    float _842 = fma(_640, cbSceneParam._m0[7u].z, fma(_639, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _638));
    vec4 _844 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _846 = _844.x;
    float _858 = (((_844.y - _642) + (_844.w * _642)) * cbMtdParam._m0[3u].x) + _642;
    vec4 _859 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _875 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3(cbMtdParam._m0[3u].x * (_846 * _846)), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * _859.z;
    float _883 = (((cbMatDynParam._m0[15u].x - _646) * cbMatDynParam._m0[15u].w) * _875) + _646;
    float _891 = ((_875 * cbMatDynParam._m0[16u].z) * (cbMatDynParam._m0[16u].x - _858)) + _858;
    uint _915 = uint(roundEven(NORMAL.w)) * 13u;
    uint _916 = _915 + 9u;
    uint _917 = _916 + uint(cbMatDynParam._m0[0u].w);
    float _923 = (cbMtdParam._m0[0u].x * _654) * cbInstanceData._m0[_917].x;
    float _924 = (cbMtdParam._m0[0u].y * _655) * cbInstanceData._m0[_917].y;
    float _925 = (cbMtdParam._m0[0u].z * _656) * cbInstanceData._m0[_917].z;
    float _4028 = isnan(0.0) ? _923 : (isnan(_923) ? 0.0 : max(_923, 0.0));
    float _926 = isnan(1.0) ? _4028 : (isnan(_4028) ? 1.0 : min(_4028, 1.0));
    float _4039 = isnan(0.0) ? _924 : (isnan(_924) ? 0.0 : max(_924, 0.0));
    float _927 = isnan(1.0) ? _4039 : (isnan(_4039) ? 1.0 : min(_4039, 1.0));
    float _4050 = isnan(0.0) ? _925 : (isnan(_925) ? 0.0 : max(_925, 0.0));
    float _928 = isnan(1.0) ? _4050 : (isnan(_4050) ? 1.0 : min(_4050, 1.0));
    vec4 _929 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _934 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _945 = (((_934.x - _883) + (_934.w * _883)) * cbMtdParam._m0[3u].x) + _883;
    float _958 = (cbMtdParam._m0[3u].x * (((_926 * _818) - _926) + _929.x)) + _926;
    float _959 = (cbMtdParam._m0[3u].x * (((_927 * _818) - _927) + _929.y)) + _927;
    float _960 = (cbMtdParam._m0[3u].x * (((_928 * _818) - _928) + _929.z)) + _928;
    float _974 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3((_883 * (_654 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625, (_883 * (_655 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625, (_883 * (_656 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w)).z;
    float _978 = _974 * cbMatDynParam._m0[13u].w;
    float _988 = (_978 * (cbMatDynParam._m0[13u].x - _958)) + _958;
    float _989 = (_978 * (cbMatDynParam._m0[13u].y - _959)) + _959;
    float _990 = (_978 * (cbMatDynParam._m0[13u].z - _960)) + _960;
    float _998 = ((_974 * cbMatDynParam._m0[15u].w) * (cbMatDynParam._m0[15u].x - _945)) + _945;
    float _999 = 1.0 - _998;
    float _1000 = _999 * _988;
    float _1001 = _999 * _989;
    float _1002 = _999 * _990;
    float _1006 = (_988 + (-0.039999999105930328369140625)) * _998;
    float _1007 = (_989 + (-0.039999999105930328369140625)) * _998;
    float _1008 = (_990 + (-0.039999999105930328369140625)) * _998;
    float _1009 = _1006 + 0.039999999105930328369140625;
    float _1010 = _1007 + 0.039999999105930328369140625;
    float _1011 = _1008 + 0.039999999105930328369140625;
    vec4 _1020 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _813, cbSceneParam._m0[86u].y * _814));
    float _1023 = _1020.x * TEXCOORD_4;
    float _1024 = _667 * 2.0;
    float _1028 = (_1024 * _638) - _664;
    float _1029 = (_1024 * _639) - _665;
    float _1030 = (_1024 * _640) - _666;
    float _1031 = abs(_749);
    float _4061 = isnan(0.0) ? _1031 : (isnan(_1031) ? 0.0 : max(_1031, 0.0));
    float _1033 = sqrt(_891);
    float _1044 = exp2((_1033 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4061 : (isnan(_4061) ? 1.0 : min(_4061, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1033 * 3.0));
    float _1050 = (1.0 - _1044) * ((_1033 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1051 = _1044 * _1033;
    float _1079 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1083 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1087 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1416;
    float _1418;
    float _1419;
    float _1420;
    float _1421;
    float _1422;
    float _1423;
    float _1424;
    float _1425;
    float _1426;
    float _1427;
    float _1428;
    float _1429;
    float _1430;
    float _1431;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1143 = fma(_1087, cbModelParam._m0[26u].z, fma(_1083, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1079));
        float _1147 = fma(_1087, cbModelParam._m0[27u].z, fma(_1083, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1079));
        float _1151 = fma(_1087, cbModelParam._m0[28u].z, fma(_1083, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1079));
        float _1174 = _1079 + _638;
        float _1175 = _1083 + _639;
        float _1176 = _1087 + _640;
        float _1186 = fma(_1176, cbModelParam._m0[26u].z, fma(_1175, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1174)) - _1143;
        float _1187 = fma(_1176, cbModelParam._m0[27u].z, fma(_1175, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1174)) - _1147;
        float _1188 = fma(_1176, cbModelParam._m0[28u].z, fma(_1175, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1174)) - _1151;
        float _1192 = inversesqrt(dot(vec3(_1186, _1187, _1188), vec3(_1186, _1187, _1188)));
        float _1205 = ((_1192 * _1186) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1143 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1206 = ((_1192 * _1187) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1147 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1207 = ((_1192 * _1188) / cbModelParam._m0[34u].z) + ((((((_1151 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1210 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1205, _1206, _1207), 0.0);
        vec4 _1217 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1205, _1206, _1207), 0.0);
        vec4 _1224 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1205, _1206, _1207), 0.0);
        vec4 _1231 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1205, _1206, _1207), 0.0);
        float _1244 = exp2((_1210.w + (-0.5)) * 20.0) * 2.0;
        float _1245 = _1244 * (_1210.x + (-0.5));
        float _1246 = _1244 * (_1210.y + (-0.5));
        float _1247 = _1244 * (_1210.z + (-0.5));
        float _1254 = exp2((_1217.w + (-0.5)) * 20.0) * 2.0;
        float _1255 = _1254 * (_1217.x + (-0.5));
        float _1256 = _1254 * (_1217.y + (-0.5));
        float _1257 = _1254 * (_1217.z + (-0.5));
        float _1264 = exp2((_1224.w + (-0.5)) * 20.0) * 2.0;
        float _1265 = _1264 * (_1224.x + (-0.5));
        float _1266 = _1264 * (_1224.y + (-0.5));
        float _1267 = _1264 * (_1224.z + (-0.5));
        float _1274 = exp2((_1231.w + (-0.5)) * 20.0) * 2.0;
        float _1275 = _1274 * (_1231.x + (-0.5));
        float _1276 = _1274 * (_1231.y + (-0.5));
        float _1277 = _1274 * (_1231.z + (-0.5));
        float _1278 = isnan(0.0) ? _1275 : (isnan(_1275) ? 0.0 : max(_1275, 0.0));
        float _1279 = isnan(0.0) ? _1276 : (isnan(_1276) ? 0.0 : max(_1276, 0.0));
        float _1280 = isnan(0.0) ? _1277 : (isnan(_1277) ? 0.0 : max(_1277, 0.0));
        float _1281 = _1245 * 0.5;
        float _1282 = _1255 * 0.5;
        float _1283 = _1265 * 0.5;
        float _1284 = dot(vec3(_1281, _1282, _1283), vec3(_1281, _1282, _1283));
        float _1289 = (_1284 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1284);
        float _1298 = (dot(vec3(_638, _639, _640), vec3(_1289 * _1281, _1289 * _1282, _1289 * _1283)) + 1.0) * 0.5;
        float _4087 = isnan(0.0) ? _1298 : (isnan(_1298) ? 0.0 : max(_1298, 0.0));
        float _1308 = sqrt(((_1282 * _1282) + (_1281 * _1281)) + (_1283 * _1283)) / (_1278 + 9.9999997473787516355514526367188e-06);
        float _4098 = isnan(0.0) ? _1308 : (isnan(_1308) ? 0.0 : max(_1308, 0.0));
        float _1309 = isnan(1.0) ? _4098 : (isnan(_4098) ? 1.0 : min(_4098, 1.0));
        float _1310 = _1309 * 2.0;
        float _1314 = (1.0 - _1309) / (_1309 + 1.0);
        float _4109 = isnan(0.0) ? _1314 : (isnan(_1314) ? 0.0 : max(_1314, 0.0));
        float _1315 = isnan(1.0) ? _4109 : (isnan(_4109) ? 1.0 : min(_4109, 1.0));
        float _1324 = ((((1.0 - _1315) * (_1310 + 2.0)) * exp2(log2(isnan(1.0) ? _4087 : (isnan(_4087) ? 1.0 : min(_4087, 1.0))) * (_1310 + 1.0))) + _1315) * _1278;
        float _1325 = _1246 * 0.5;
        float _1326 = _1256 * 0.5;
        float _1327 = _1266 * 0.5;
        float _1328 = dot(vec3(_1325, _1326, _1327), vec3(_1325, _1326, _1327));
        float _1333 = (_1328 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1328);
        float _1341 = (dot(vec3(_638, _639, _640), vec3(_1333 * _1325, _1333 * _1326, _1333 * _1327)) + 1.0) * 0.5;
        float _4120 = isnan(0.0) ? _1341 : (isnan(_1341) ? 0.0 : max(_1341, 0.0));
        float _1350 = sqrt(((_1326 * _1326) + (_1325 * _1325)) + (_1327 * _1327)) / (_1279 + 9.9999997473787516355514526367188e-06);
        float _4131 = isnan(0.0) ? _1350 : (isnan(_1350) ? 0.0 : max(_1350, 0.0));
        float _1351 = isnan(1.0) ? _4131 : (isnan(_4131) ? 1.0 : min(_4131, 1.0));
        float _1352 = _1351 * 2.0;
        float _1356 = (1.0 - _1351) / (_1351 + 1.0);
        float _4142 = isnan(0.0) ? _1356 : (isnan(_1356) ? 0.0 : max(_1356, 0.0));
        float _1357 = isnan(1.0) ? _4142 : (isnan(_4142) ? 1.0 : min(_4142, 1.0));
        float _1366 = ((((1.0 - _1357) * (_1352 + 2.0)) * exp2(log2(isnan(1.0) ? _4120 : (isnan(_4120) ? 1.0 : min(_4120, 1.0))) * (_1352 + 1.0))) + _1357) * _1279;
        float _1367 = _1247 * 0.5;
        float _1368 = _1257 * 0.5;
        float _1369 = _1267 * 0.5;
        float _1370 = dot(vec3(_1367, _1368, _1369), vec3(_1367, _1368, _1369));
        float _1375 = (_1370 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1370);
        float _1383 = (dot(vec3(_638, _639, _640), vec3(_1375 * _1367, _1375 * _1368, _1375 * _1369)) + 1.0) * 0.5;
        float _4153 = isnan(0.0) ? _1383 : (isnan(_1383) ? 0.0 : max(_1383, 0.0));
        float _1392 = sqrt(((_1368 * _1368) + (_1367 * _1367)) + (_1369 * _1369)) / (_1280 + 9.9999997473787516355514526367188e-06);
        float _4164 = isnan(0.0) ? _1392 : (isnan(_1392) ? 0.0 : max(_1392, 0.0));
        float _1393 = isnan(1.0) ? _4164 : (isnan(_4164) ? 1.0 : min(_4164, 1.0));
        float _1394 = _1393 * 2.0;
        float _1398 = (1.0 - _1393) / (_1393 + 1.0);
        float _4175 = isnan(0.0) ? _1398 : (isnan(_1398) ? 0.0 : max(_1398, 0.0));
        float _1399 = isnan(1.0) ? _4175 : (isnan(_4175) ? 1.0 : min(_4175, 1.0));
        float _1408 = ((((1.0 - _1399) * (_1394 + 2.0)) * exp2(log2(isnan(1.0) ? _4153 : (isnan(_4153) ? 1.0 : min(_4153, 1.0))) * (_1394 + 1.0))) + _1399) * _1280;
        _1416 = _1247;
        _1418 = _1246;
        _1419 = _1245;
        _1420 = _1257;
        _1421 = _1256;
        _1422 = _1255;
        _1423 = _1267;
        _1424 = _1266;
        _1425 = _1265;
        _1426 = _1280;
        _1427 = _1279;
        _1428 = _1278;
        _1429 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1324 : (isnan(_1324) ? 0.0 : max(_1324, 0.0)));
        _1430 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1366 : (isnan(_1366) ? 0.0 : max(_1366, 0.0)));
        _1431 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1408 : (isnan(_1408) ? 0.0 : max(_1408, 0.0)));
    }
    else
    {
        _1416 = _1417;
        _1418 = _1417;
        _1419 = _1417;
        _1420 = _1417;
        _1421 = _1417;
        _1422 = _1417;
        _1423 = _1417;
        _1424 = _1417;
        _1425 = _1417;
        _1426 = _1417;
        _1427 = _1417;
        _1428 = _1417;
        _1429 = 0.0;
        _1430 = 0.0;
        _1431 = 0.0;
    }
    float _1729;
    float _1730;
    float _1731;
    float _1732;
    float _1733;
    float _1734;
    float _1735;
    float _1736;
    float _1737;
    float _1738;
    float _1739;
    float _1740;
    float _1741;
    float _1742;
    float _1743;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1460 = fma(_1087, cbModelParam._m0[30u].z, fma(_1083, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1079));
        float _1464 = fma(_1087, cbModelParam._m0[31u].z, fma(_1083, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1079));
        float _1468 = fma(_1087, cbModelParam._m0[32u].z, fma(_1083, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1079));
        float _1491 = _1079 + _638;
        float _1492 = _1083 + _639;
        float _1493 = _1087 + _640;
        float _1503 = fma(_1493, cbModelParam._m0[30u].z, fma(_1492, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1491)) - _1460;
        float _1504 = fma(_1493, cbModelParam._m0[31u].z, fma(_1492, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1491)) - _1464;
        float _1505 = fma(_1493, cbModelParam._m0[32u].z, fma(_1492, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1491)) - _1468;
        float _1509 = inversesqrt(dot(vec3(_1503, _1504, _1505), vec3(_1503, _1504, _1505)));
        float _1522 = ((_1509 * _1503) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1460 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1523 = ((_1509 * _1504) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1464 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1524 = ((_1509 * _1505) / cbModelParam._m0[35u].z) + ((((((_1468 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1526 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1522, _1523, _1524), 0.0);
        vec4 _1533 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1522, _1523, _1524), 0.0);
        vec4 _1540 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1522, _1523, _1524), 0.0);
        vec4 _1547 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1522, _1523, _1524), 0.0);
        float _1559 = exp2((_1526.w + (-0.5)) * 20.0) * 2.0;
        float _1560 = _1559 * (_1526.x + (-0.5));
        float _1561 = _1559 * (_1526.y + (-0.5));
        float _1562 = _1559 * (_1526.z + (-0.5));
        float _1569 = exp2((_1533.w + (-0.5)) * 20.0) * 2.0;
        float _1570 = _1569 * (_1533.x + (-0.5));
        float _1571 = _1569 * (_1533.y + (-0.5));
        float _1572 = _1569 * (_1533.z + (-0.5));
        float _1579 = exp2((_1540.w + (-0.5)) * 20.0) * 2.0;
        float _1580 = _1579 * (_1540.x + (-0.5));
        float _1581 = _1579 * (_1540.y + (-0.5));
        float _1582 = _1579 * (_1540.z + (-0.5));
        float _1589 = exp2((_1547.w + (-0.5)) * 20.0) * 2.0;
        float _1590 = _1589 * (_1547.x + (-0.5));
        float _1591 = _1589 * (_1547.y + (-0.5));
        float _1592 = _1589 * (_1547.z + (-0.5));
        float _1593 = isnan(0.0) ? _1590 : (isnan(_1590) ? 0.0 : max(_1590, 0.0));
        float _1594 = isnan(0.0) ? _1591 : (isnan(_1591) ? 0.0 : max(_1591, 0.0));
        float _1595 = isnan(0.0) ? _1592 : (isnan(_1592) ? 0.0 : max(_1592, 0.0));
        float _1596 = _1560 * 0.5;
        float _1597 = _1570 * 0.5;
        float _1598 = _1580 * 0.5;
        float _1599 = dot(vec3(_1596, _1597, _1598), vec3(_1596, _1597, _1598));
        float _1604 = (_1599 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1599);
        float _1612 = (dot(vec3(_638, _639, _640), vec3(_1604 * _1596, _1604 * _1597, _1604 * _1598)) + 1.0) * 0.5;
        float _4216 = isnan(0.0) ? _1612 : (isnan(_1612) ? 0.0 : max(_1612, 0.0));
        float _1621 = sqrt(((_1597 * _1597) + (_1596 * _1596)) + (_1598 * _1598)) / (_1593 + 9.9999997473787516355514526367188e-06);
        float _4227 = isnan(0.0) ? _1621 : (isnan(_1621) ? 0.0 : max(_1621, 0.0));
        float _1622 = isnan(1.0) ? _4227 : (isnan(_4227) ? 1.0 : min(_4227, 1.0));
        float _1623 = _1622 * 2.0;
        float _1627 = (1.0 - _1622) / (_1622 + 1.0);
        float _4238 = isnan(0.0) ? _1627 : (isnan(_1627) ? 0.0 : max(_1627, 0.0));
        float _1628 = isnan(1.0) ? _4238 : (isnan(_4238) ? 1.0 : min(_4238, 1.0));
        float _1637 = ((((1.0 - _1628) * (_1623 + 2.0)) * exp2(log2(isnan(1.0) ? _4216 : (isnan(_4216) ? 1.0 : min(_4216, 1.0))) * (_1623 + 1.0))) + _1628) * _1593;
        float _1638 = _1561 * 0.5;
        float _1639 = _1571 * 0.5;
        float _1640 = _1581 * 0.5;
        float _1641 = dot(vec3(_1638, _1639, _1640), vec3(_1638, _1639, _1640));
        float _1646 = (_1641 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1641);
        float _1654 = (dot(vec3(_638, _639, _640), vec3(_1646 * _1638, _1646 * _1639, _1646 * _1640)) + 1.0) * 0.5;
        float _4249 = isnan(0.0) ? _1654 : (isnan(_1654) ? 0.0 : max(_1654, 0.0));
        float _1663 = sqrt(((_1639 * _1639) + (_1638 * _1638)) + (_1640 * _1640)) / (_1594 + 9.9999997473787516355514526367188e-06);
        float _4260 = isnan(0.0) ? _1663 : (isnan(_1663) ? 0.0 : max(_1663, 0.0));
        float _1664 = isnan(1.0) ? _4260 : (isnan(_4260) ? 1.0 : min(_4260, 1.0));
        float _1665 = _1664 * 2.0;
        float _1669 = (1.0 - _1664) / (_1664 + 1.0);
        float _4271 = isnan(0.0) ? _1669 : (isnan(_1669) ? 0.0 : max(_1669, 0.0));
        float _1670 = isnan(1.0) ? _4271 : (isnan(_4271) ? 1.0 : min(_4271, 1.0));
        float _1679 = ((((1.0 - _1670) * (_1665 + 2.0)) * exp2(log2(isnan(1.0) ? _4249 : (isnan(_4249) ? 1.0 : min(_4249, 1.0))) * (_1665 + 1.0))) + _1670) * _1594;
        float _1680 = _1562 * 0.5;
        float _1681 = _1572 * 0.5;
        float _1682 = _1582 * 0.5;
        float _1683 = dot(vec3(_1680, _1681, _1682), vec3(_1680, _1681, _1682));
        float _1688 = (_1683 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1683);
        float _1696 = (dot(vec3(_638, _639, _640), vec3(_1688 * _1680, _1688 * _1681, _1688 * _1682)) + 1.0) * 0.5;
        float _4282 = isnan(0.0) ? _1696 : (isnan(_1696) ? 0.0 : max(_1696, 0.0));
        float _1705 = sqrt(((_1681 * _1681) + (_1680 * _1680)) + (_1682 * _1682)) / (_1595 + 9.9999997473787516355514526367188e-06);
        float _4293 = isnan(0.0) ? _1705 : (isnan(_1705) ? 0.0 : max(_1705, 0.0));
        float _1706 = isnan(1.0) ? _4293 : (isnan(_4293) ? 1.0 : min(_4293, 1.0));
        float _1707 = _1706 * 2.0;
        float _1711 = (1.0 - _1706) / (_1706 + 1.0);
        float _4304 = isnan(0.0) ? _1711 : (isnan(_1711) ? 0.0 : max(_1711, 0.0));
        float _1712 = isnan(1.0) ? _4304 : (isnan(_4304) ? 1.0 : min(_4304, 1.0));
        float _1721 = ((((1.0 - _1712) * (_1707 + 2.0)) * exp2(log2(isnan(1.0) ? _4282 : (isnan(_4282) ? 1.0 : min(_4282, 1.0))) * (_1707 + 1.0))) + _1712) * _1595;
        _1729 = _1562;
        _1730 = _1561;
        _1731 = _1560;
        _1732 = _1572;
        _1733 = _1571;
        _1734 = _1570;
        _1735 = _1582;
        _1736 = _1581;
        _1737 = _1580;
        _1738 = _1595;
        _1739 = _1594;
        _1740 = _1593;
        _1741 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1637 : (isnan(_1637) ? 0.0 : max(_1637, 0.0)));
        _1742 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1679 : (isnan(_1679) ? 0.0 : max(_1679, 0.0)));
        _1743 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1721 : (isnan(_1721) ? 0.0 : max(_1721, 0.0)));
    }
    else
    {
        _1729 = _1417;
        _1730 = _1417;
        _1731 = _1417;
        _1732 = _1417;
        _1733 = _1417;
        _1734 = _1417;
        _1735 = _1417;
        _1736 = _1417;
        _1737 = _1417;
        _1738 = _1417;
        _1739 = _1417;
        _1740 = _1417;
        _1741 = 0.0;
        _1742 = 0.0;
        _1743 = 0.0;
    }
    float _1753 = (cbModelParam._m0[1u].x * (_1741 - _1429)) + _1429;
    float _1754 = (cbModelParam._m0[1u].x * (_1742 - _1430)) + _1430;
    float _1755 = (cbModelParam._m0[1u].x * (_1743 - _1431)) + _1431;
    float _1776 = fma(_1755, cbSceneParam._m0[89u].z, fma(_1754, cbSceneParam._m0[89u].y, _1753 * cbSceneParam._m0[89u].x));
    float _1779 = fma(_1755, cbSceneParam._m0[90u].z, fma(_1754, cbSceneParam._m0[90u].y, _1753 * cbSceneParam._m0[90u].x));
    float _1782 = fma(_1755, cbSceneParam._m0[91u].z, fma(_1754, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1753));
    float _1797 = _1028 * 0.5;
    float _1798 = _1029 * 0.5;
    float _1799 = _1030 * 0.5;
    float _1800 = dot(vec4(_1797, _1798, _1799, 1.0), vec4(_1731, _1734, _1737, _1740));
    float _1803 = dot(vec4(_1797, _1798, _1799, 1.0), vec4(_1730, _1733, _1736, _1739));
    float _1806 = dot(vec4(_1797, _1798, _1799, 1.0), vec4(_1729, _1732, _1735, _1738));
    float _1837;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1813 = dot(vec4(_1797, _1798, _1799, 1.0), vec4(_1416, _1420, _1423, _1426));
        float _1817 = dot(vec4(_1797, _1798, _1799, 1.0), vec4(_1418, _1421, _1424, _1427));
        float _1821 = dot(vec4(_1797, _1798, _1799, 1.0), vec4(_1419, _1422, _1425, _1428));
        float _1828 = dot(vec4(cbModelParam._m0[39u]), vec4(_1797, _1798, _1799, 1.0));
        _1837 = dot(vec3(isnan(0.0) ? _1821 : (isnan(_1821) ? 0.0 : max(_1821, 0.0)), isnan(0.0) ? _1817 : (isnan(_1817) ? 0.0 : max(_1817, 0.0)), isnan(0.0) ? _1813 : (isnan(_1813) ? 0.0 : max(_1813, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1828) ? 0.0 : (isnan(0.0) ? _1828 : max(0.0, _1828))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1837 = 1.0;
    }
    float _1848;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1839 = dot(vec4(cbModelParam._m0[40u]), vec4(_1797, _1798, _1799, 1.0));
        _1848 = dot(vec3(isnan(0.0) ? _1800 : (isnan(_1800) ? 0.0 : max(_1800, 0.0)), isnan(0.0) ? _1803 : (isnan(_1803) ? 0.0 : max(_1803, 0.0)), isnan(0.0) ? _1806 : (isnan(_1806) ? 0.0 : max(_1806, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1839) ? 0.0 : (isnan(0.0) ? _1839 : max(0.0, _1839))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1848 = 1.0;
    }
    float _1852 = (_1848 * cbModelParam._m0[1u].x) + (_1837 * (1.0 - cbModelParam._m0[1u].x));
    float _1862 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _891);
    float _1863 = isnan(_1862) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1862 : min(cbModelParam._m0[25u].z, _1862));
    float _1943;
    float _1945;
    float _1947;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1910 = fma(_1087, cbModelParam._m0[13u].z, fma(_1083, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1079)) + cbModelParam._m0[13u].w;
        float _1914 = fma(_1087, cbModelParam._m0[14u].z, fma(_1083, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1079)) + cbModelParam._m0[14u].w;
        float _1918 = fma(_1087, cbModelParam._m0[15u].z, fma(_1083, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1079)) + cbModelParam._m0[15u].w;
        float _1921 = fma(_1030, cbModelParam._m0[13u].z, fma(_1029, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1028));
        float _1924 = fma(_1030, cbModelParam._m0[14u].z, fma(_1029, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1028));
        float _1927 = fma(_1030, cbModelParam._m0[15u].z, fma(_1029, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1028));
        float _1955;
        if (_1921 > 0.0)
        {
            _1955 = abs((1.0 - _1910) / _1921);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1921 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1910 + 1.0) / _1921);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1955 = frontier_phi_19_17_ladder;
        }
        float _2159;
        if (_1924 > 0.0)
        {
            _2159 = abs((1.0 - _1914) / _1924);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1924 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1914 + 1.0) / _1924);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2159 = frontier_phi_28_24_ladder;
        }
        float _2413;
        if (_1927 > 0.0)
        {
            _2413 = abs((1.0 - _1918) / _1927);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1927 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1918 + 1.0) / _1927);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2413 = frontier_phi_40_35_ladder;
        }
        float _2415 = isnan(_2159) ? _1955 : (isnan(_1955) ? _2159 : min(_1955, _2159));
        float _2416 = isnan(_2413) ? _2415 : (isnan(_2415) ? _2413 : min(_2415, _2413));
        float _2420 = (_2416 * _1921) + _1910;
        float _2421 = (_2416 * _1924) + _1914;
        float _2422 = (_2416 * _1927) + _1918;
        float _2423 = _2416 * 9.9999997473787516355514526367188e-05;
        float _2425 = (-1.0) - _2423;
        float _2427 = _2423 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2422 > _2427) || ((_2422 < _2425) || ((_2421 > _2427) || ((_2421 < _2425) || ((_2420 < _2425) || (_2420 > _2427))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2550 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2422, cbModelParam._m0[9u].z, fma(_2421, cbModelParam._m0[9u].y, _2420 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2422, cbModelParam._m0[10u].z, fma(_2421, cbModelParam._m0[10u].y, _2420 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2422, cbModelParam._m0[11u].z, fma(_2421, cbModelParam._m0[11u].y, _2420 * cbModelParam._m0[11u].x))), _1863);
            frontier_phi_18_40_ladder = _2550.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2550.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2550.x * cbModelParam._m0[1u].y;
        }
        _1943 = frontier_phi_18_40_ladder_2;
        _1945 = frontier_phi_18_40_ladder_1;
        _1947 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1931 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1028, _1029, _1030), _1863);
        _1943 = _1931.x * cbModelParam._m0[1u].y;
        _1945 = _1931.y * cbModelParam._m0[1u].y;
        _1947 = _1931.z * cbModelParam._m0[1u].y;
    }
    float _1951 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _891);
    float _1952 = isnan(_1951) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1951 : min(cbModelParam._m0[25u].w, _1951));
    float _2043;
    float _2045;
    float _2047;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2007 = fma(_1087, cbModelParam._m0[21u].z, fma(_1083, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1079)) + cbModelParam._m0[21u].w;
        float _2011 = fma(_1087, cbModelParam._m0[22u].z, fma(_1083, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1079)) + cbModelParam._m0[22u].w;
        float _2015 = fma(_1087, cbModelParam._m0[23u].z, fma(_1083, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1079)) + cbModelParam._m0[23u].w;
        float _2018 = fma(_1030, cbModelParam._m0[21u].z, fma(_1029, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1028));
        float _2021 = fma(_1030, cbModelParam._m0[22u].z, fma(_1029, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1028));
        float _2024 = fma(_1030, cbModelParam._m0[23u].z, fma(_1029, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1028));
        float _2164;
        if (_2018 > 0.0)
        {
            _2164 = abs((1.0 - _2007) / _2018);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_2018 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_2007 + 1.0) / _2018);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _2164 = frontier_phi_30_26_ladder;
        }
        float _2440;
        if (_2021 > 0.0)
        {
            _2440 = abs((1.0 - _2011) / _2021);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_2021 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_2011 + 1.0) / _2021);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2440 = frontier_phi_42_37_ladder;
        }
        float _2653;
        if (_2024 > 0.0)
        {
            _2653 = abs((1.0 - _2015) / _2024);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_2024 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_2015 + 1.0) / _2024);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2653 = frontier_phi_51_48_ladder;
        }
        float _2655 = isnan(_2440) ? _2164 : (isnan(_2164) ? _2440 : min(_2164, _2440));
        float _2656 = isnan(_2653) ? _2655 : (isnan(_2655) ? _2653 : min(_2655, _2653));
        float _2660 = (_2656 * _2018) + _2007;
        float _2661 = (_2656 * _2021) + _2011;
        float _2662 = (_2656 * _2024) + _2015;
        float _2663 = _2656 * 9.9999997473787516355514526367188e-05;
        float _2664 = (-1.0) - _2663;
        float _2666 = _2663 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2662 > _2666) || ((_2662 < _2664) || ((_2661 > _2666) || ((_2661 < _2664) || ((_2660 < _2664) || (_2660 > _2666))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2896 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2662, cbModelParam._m0[17u].z, fma(_2661, cbModelParam._m0[17u].y, _2660 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2662, cbModelParam._m0[18u].z, fma(_2661, cbModelParam._m0[18u].y, _2660 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2662, cbModelParam._m0[19u].z, fma(_2661, cbModelParam._m0[19u].y, _2660 * cbModelParam._m0[19u].x))), _1952);
            frontier_phi_27_51_ladder = _2896.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2896.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2896.x * cbModelParam._m0[1u].z;
        }
        _2043 = frontier_phi_27_51_ladder_2;
        _2045 = frontier_phi_27_51_ladder_1;
        _2047 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _2027 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1028, _1029, _1030), _1952);
        _2043 = _2027.x * cbModelParam._m0[1u].z;
        _2045 = _2027.y * cbModelParam._m0[1u].z;
        _2047 = _2027.z * cbModelParam._m0[1u].z;
    }
    float _2060 = (((_1050 * _1009) + _1051) * _1023) * ((cbModelParam._m0[1u].w * (_2043 - _1943)) + _1943);
    float _2062 = (((_1050 * _1010) + _1051) * _1023) * ((cbModelParam._m0[1u].w * (_2045 - _1945)) + _1945);
    float _2064 = (((_1050 * _1011) + _1051) * _1023) * ((cbModelParam._m0[1u].w * (_2047 - _1947)) + _1947);
    float _2067 = fma(_2064, cbSceneParam._m0[89u].z, fma(_2062, cbSceneParam._m0[89u].y, _2060 * cbSceneParam._m0[89u].x));
    float _2070 = fma(_2064, cbSceneParam._m0[90u].z, fma(_2062, cbSceneParam._m0[90u].y, _2060 * cbSceneParam._m0[90u].x));
    float _2073 = fma(_2064, cbSceneParam._m0[91u].z, fma(_2062, cbSceneParam._m0[91u].y, _2060 * cbSceneParam._m0[91u].x));
    uvec4 _2083 = floatBitsToUint(cbInstanceData._m0[_915 + 5u]);
    uint _2085 = _2083.x * 14u;
    uint _2086 = _2085 + 13u;
    float _2093 = _1023 + (-1.0);
    float _2098 = (cbLight._m0[_2086].x * _2093) + 1.0;
    float _2099 = (cbLight._m0[_2086].y * _2093) + 1.0;
    float _2100 = (cbLight._m0[_2086].z * _2093) + 1.0;
    float _2101 = (cbLight._m0[_2086].w * _2093) + 1.0;
    uint _2102 = _2085 + 5u;
    float _2108 = isnan(1.0) ? _2099 : (isnan(_2099) ? 1.0 : min(_2099, 1.0));
    uint _2112 = _2085 + 4u;
    float _2118 = isnan(1.0) ? _2098 : (isnan(_2098) ? 1.0 : min(_2098, 1.0));
    uint _2122 = _2085 | 1u;
    float _2133 = dot(vec3(cbLight._m0[_2085].xyz), vec3(_638, _639, _640));
    float _2136 = dot(vec3(cbLight._m0[_2122].xyz), vec3(_638, _639, _640));
    float _4440 = isnan(0.0) ? _2133 : (isnan(_2133) ? 0.0 : max(_2133, 0.0));
    float _4451 = isnan(0.0) ? _2136 : (isnan(_2136) ? 0.0 : max(_2136, 0.0));
    float _2141 = (isnan(1.0) ? _4440 : (isnan(_4440) ? 1.0 : min(_4440, 1.0))) * 0.3183098733425140380859375;
    float _2143 = (isnan(1.0) ? _4451 : (isnan(_4451) ? 1.0 : min(_4451, 1.0))) * 0.3183098733425140380859375;
    float _2150 = ((cbLight._m0[_2102].x * _2108) * _2143) + ((cbLight._m0[_2112].x * _2118) * _2141);
    float _2151 = ((_2108 * cbLight._m0[_2102].y) * _2143) + ((_2118 * cbLight._m0[_2112].y) * _2141);
    float _2152 = ((_2108 * cbLight._m0[_2102].z) * _2143) + ((_2118 * cbLight._m0[_2112].z) * _2141);
    uvec4 _2156 = floatBitsToUint(cbLight._m0[_2085 + 12u]);
    bool _2158 = _2156.x == 0u;
    float _2169;
    float _2171;
    float _2173;
    if (_2158)
    {
        _2169 = _2150;
        _2171 = _2151;
        _2173 = _2152;
    }
    else
    {
        uint _2177 = _2085 + 6u;
        float _2193 = (dot(vec3(cbLight._m0[_2085 + 2u].xyz), vec3(_638, _639, _640)) * 0.5) + 0.5;
        float _2194 = _2193 * _2193;
        float _4462 = isnan(0.0) ? _2194 : (isnan(_2194) ? 0.0 : max(_2194, 0.0));
        float _2195 = isnan(1.0) ? _4462 : (isnan(_4462) ? 1.0 : min(_4462, 1.0));
        float _2196 = isnan(1.0) ? _2100 : (isnan(_2100) ? 1.0 : min(_2100, 1.0));
        _2169 = (((cbLight._m0[_2177].x * 0.3183098733425140380859375) * _2195) * _2196) + _2150;
        _2171 = (((cbLight._m0[_2177].y * 0.3183098733425140380859375) * _2195) * _2196) + _2151;
        _2173 = (((cbLight._m0[_2177].z * 0.3183098733425140380859375) * _2195) * _2196) + _2152;
    }
    bool _2176 = _2156.y == 0u;
    float _2214;
    float _2216;
    float _2218;
    if (_2176)
    {
        _2214 = _2169;
        _2216 = _2171;
        _2218 = _2173;
    }
    else
    {
        uint _2384 = _2085 + 7u;
        float _2400 = (dot(vec3(cbLight._m0[_2085 + 3u].xyz), vec3(_638, _639, _640)) * 0.5) + 0.5;
        float _2401 = _2400 * _2400;
        float _4478 = isnan(0.0) ? _2401 : (isnan(_2401) ? 0.0 : max(_2401, 0.0));
        float _2402 = isnan(1.0) ? _4478 : (isnan(_4478) ? 1.0 : min(_4478, 1.0));
        float _2403 = isnan(1.0) ? _2101 : (isnan(_2101) ? 1.0 : min(_2101, 1.0));
        _2214 = (((cbLight._m0[_2384].x * 0.3183098733425140380859375) * _2402) * _2403) + _2169;
        _2216 = (((cbLight._m0[_2384].y * 0.3183098733425140380859375) * _2402) * _2403) + _2171;
        _2218 = (((cbLight._m0[_2384].z * 0.3183098733425140380859375) * _2402) * _2403) + _2173;
    }
    uint _2221 = _2085 + 8u;
    float _2234 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2085].w)) * _891) * 0.949999988079071044921875);
    float _2235 = _2234 * _2234;
    float _2236 = cbLight._m0[_2085].x + _664;
    float _2237 = cbLight._m0[_2085].y + _665;
    float _2238 = cbLight._m0[_2085].z + _666;
    float _2242 = inversesqrt(dot(vec3(_2236, _2237, _2238), vec3(_2236, _2237, _2238)));
    float _2243 = _2242 * _2236;
    float _2244 = _2242 * _2237;
    float _2245 = _2242 * _2238;
    float _2246 = dot(vec3(_638, _639, _640), vec3(cbLight._m0[_2085].xyz));
    float _4494 = isnan(0.0) ? _2246 : (isnan(_2246) ? 0.0 : max(_2246, 0.0));
    float _2249 = isnan(1.0) ? _4494 : (isnan(_4494) ? 1.0 : min(_4494, 1.0));
    float _4505 = isnan(0.0) ? _667 : (isnan(_667) ? 0.0 : max(_667, 0.0));
    float _2250 = isnan(1.0) ? _4505 : (isnan(_4505) ? 1.0 : min(_4505, 1.0));
    float _2251 = dot(vec3(_638, _639, _640), vec3(_2243, _2244, _2245));
    float _4516 = isnan(0.0) ? _2251 : (isnan(_2251) ? 0.0 : max(_2251, 0.0));
    float _2254 = isnan(1.0) ? _4516 : (isnan(_4516) ? 1.0 : min(_4516, 1.0));
    float _2255 = dot(vec3(cbLight._m0[_2085].xyz), vec3(_2243, _2244, _2245));
    float _4527 = isnan(0.0) ? _2255 : (isnan(_2255) ? 0.0 : max(_2255, 0.0));
    float _2259 = _2235 * _2235;
    float _2263 = ((_2254 * _2254) * (_2259 + (-1.0))) + 1.0;
    float _2271 = exp2(log2(1.0 - (isnan(1.0) ? _4527 : (isnan(_4527) ? 1.0 : min(_4527, 1.0)))) * 5.0);
    float _2272 = 0.959999978542327880859375 - _1006;
    float _2274 = 0.959999978542327880859375 - _1007;
    float _2275 = 0.959999978542327880859375 - _1008;
    float _2282 = 1.0 - _2235;
    float _2293 = (0.5 / (((_2250 * ((_2249 * _2282) + _2235)) + 9.9999999392252902907785028219223e-09) + (((_2250 * _2282) + _2235) * _2249))) * _2249;
    float _4538 = isnan(0.0) ? _2293 : (isnan(_2293) ? 0.0 : max(_2293, 0.0));
    float _2295 = (isnan(1.0) ? _4538 : (isnan(_4538) ? 1.0 : min(_4538, 1.0))) * (_2259 / ((_2263 * _2263) * 3.141590118408203125));
    uint _2306 = _2085 + 9u;
    float _2317 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2122].w)) * _891) * 0.949999988079071044921875);
    float _2318 = _2317 * _2317;
    float _2319 = cbLight._m0[_2122].x + _664;
    float _2320 = cbLight._m0[_2122].y + _665;
    float _2321 = cbLight._m0[_2122].z + _666;
    float _2325 = inversesqrt(dot(vec3(_2319, _2320, _2321), vec3(_2319, _2320, _2321)));
    float _2326 = _2325 * _2319;
    float _2327 = _2325 * _2320;
    float _2328 = _2325 * _2321;
    float _2329 = dot(vec3(_638, _639, _640), vec3(cbLight._m0[_2122].xyz));
    float _4549 = isnan(0.0) ? _2329 : (isnan(_2329) ? 0.0 : max(_2329, 0.0));
    float _2332 = isnan(1.0) ? _4549 : (isnan(_4549) ? 1.0 : min(_4549, 1.0));
    float _2333 = dot(vec3(_638, _639, _640), vec3(_2326, _2327, _2328));
    float _4560 = isnan(0.0) ? _2333 : (isnan(_2333) ? 0.0 : max(_2333, 0.0));
    float _2336 = isnan(1.0) ? _4560 : (isnan(_4560) ? 1.0 : min(_4560, 1.0));
    float _2337 = dot(vec3(cbLight._m0[_2122].xyz), vec3(_2326, _2327, _2328));
    float _4571 = isnan(0.0) ? _2337 : (isnan(_2337) ? 0.0 : max(_2337, 0.0));
    float _2341 = _2318 * _2318;
    float _2345 = ((_2336 * _2336) * (_2341 + (-1.0))) + 1.0;
    float _2352 = exp2(log2(1.0 - (isnan(1.0) ? _4571 : (isnan(_4571) ? 1.0 : min(_4571, 1.0)))) * 5.0);
    float _2359 = 1.0 - _2318;
    float _2369 = (0.5 / (((_2250 * ((_2332 * _2359) + _2318)) + 9.9999999392252902907785028219223e-09) + (((_2250 * _2359) + _2318) * _2332))) * _2332;
    float _4582 = isnan(0.0) ? _2369 : (isnan(_2369) ? 0.0 : max(_2369, 0.0));
    float _2371 = (isnan(1.0) ? _4582 : (isnan(_4582) ? 1.0 : min(_4582, 1.0))) * (_2341 / ((_2345 * _2345) * 3.141590118408203125));
    float _2381 = (((((_2352 * _2272) + _1009) * cbLight._m0[_2306].x) * _2371) * _2108) + (((((_2271 * _2272) + _1009) * cbLight._m0[_2221].x) * _2295) * _2118);
    float _2382 = (((((_2352 * _2274) + _1010) * cbLight._m0[_2306].y) * _2371) * _2108) + (((((_2271 * _2274) + _1010) * cbLight._m0[_2221].y) * _2295) * _2118);
    float _2383 = (((((_2352 * _2275) + _1011) * cbLight._m0[_2306].z) * _2371) * _2108) + (((((_2271 * _2275) + _1011) * cbLight._m0[_2221].z) * _2295) * _2118);
    float _2445;
    float _2447;
    float _2449;
    if (_2158)
    {
        _2445 = _2381;
        _2447 = _2382;
        _2449 = _2383;
    }
    else
    {
        uint _2451 = _2085 + 2u;
        uint _2455 = _2085 + 10u;
        float _2469 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2451].w)) * _891) * 0.949999988079071044921875);
        float _2470 = _2469 * _2469;
        float _2471 = cbLight._m0[_2451].x + _664;
        float _2472 = cbLight._m0[_2451].y + _665;
        float _2473 = cbLight._m0[_2451].z + _666;
        float _2477 = inversesqrt(dot(vec3(_2471, _2472, _2473), vec3(_2471, _2472, _2473)));
        float _2478 = _2477 * _2471;
        float _2479 = _2477 * _2472;
        float _2480 = _2477 * _2473;
        float _2481 = dot(vec3(_638, _639, _640), vec3(cbLight._m0[_2451].xyz));
        float _4593 = isnan(0.0) ? _2481 : (isnan(_2481) ? 0.0 : max(_2481, 0.0));
        float _2484 = isnan(1.0) ? _4593 : (isnan(_4593) ? 1.0 : min(_4593, 1.0));
        float _2485 = dot(vec3(_638, _639, _640), vec3(_2478, _2479, _2480));
        float _4604 = isnan(0.0) ? _2485 : (isnan(_2485) ? 0.0 : max(_2485, 0.0));
        float _2488 = isnan(1.0) ? _4604 : (isnan(_4604) ? 1.0 : min(_4604, 1.0));
        float _2489 = dot(vec3(cbLight._m0[_2451].xyz), vec3(_2478, _2479, _2480));
        float _4615 = isnan(0.0) ? _2489 : (isnan(_2489) ? 0.0 : max(_2489, 0.0));
        float _2493 = _2470 * _2470;
        float _2497 = ((_2488 * _2488) * (_2493 + (-1.0))) + 1.0;
        float _2504 = exp2(log2(1.0 - (isnan(1.0) ? _4615 : (isnan(_4615) ? 1.0 : min(_4615, 1.0)))) * 5.0);
        float _2511 = 1.0 - _2470;
        float _2521 = (0.5 / (((_2250 * ((_2484 * _2511) + _2470)) + 9.9999999392252902907785028219223e-09) + (((_2250 * _2511) + _2470) * _2484))) * _2484;
        float _4626 = isnan(0.0) ? _2521 : (isnan(_2521) ? 0.0 : max(_2521, 0.0));
        float _2523 = (isnan(1.0) ? _4626 : (isnan(_4626) ? 1.0 : min(_4626, 1.0))) * (_2493 / ((_2497 * _2497) * 3.141590118408203125));
        float _2524 = isnan(1.0) ? _2100 : (isnan(_2100) ? 1.0 : min(_2100, 1.0));
        _2445 = (((((_2504 * _2272) + _1009) * cbLight._m0[_2455].x) * _2523) * _2524) + _2381;
        _2447 = (((((_2504 * _2274) + _1010) * cbLight._m0[_2455].y) * _2523) * _2524) + _2382;
        _2449 = (((((_2504 * _2275) + _1011) * cbLight._m0[_2455].z) * _2523) * _2524) + _2383;
    }
    float _2559;
    float _2561;
    float _2563;
    if (_2176)
    {
        _2559 = _2445;
        _2561 = _2447;
        _2563 = _2449;
    }
    else
    {
        uint _2570 = _2085 + 3u;
        uint _2574 = _2085 + 11u;
        float _2588 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2570].w)) * _891) * 0.949999988079071044921875);
        float _2589 = _2588 * _2588;
        float _2590 = cbLight._m0[_2570].x + _664;
        float _2591 = cbLight._m0[_2570].y + _665;
        float _2592 = cbLight._m0[_2570].z + _666;
        float _2596 = inversesqrt(dot(vec3(_2590, _2591, _2592), vec3(_2590, _2591, _2592)));
        float _2597 = _2596 * _2590;
        float _2598 = _2596 * _2591;
        float _2599 = _2596 * _2592;
        float _2600 = dot(vec3(_638, _639, _640), vec3(cbLight._m0[_2570].xyz));
        float _4642 = isnan(0.0) ? _2600 : (isnan(_2600) ? 0.0 : max(_2600, 0.0));
        float _2603 = isnan(1.0) ? _4642 : (isnan(_4642) ? 1.0 : min(_4642, 1.0));
        float _2604 = dot(vec3(_638, _639, _640), vec3(_2597, _2598, _2599));
        float _4653 = isnan(0.0) ? _2604 : (isnan(_2604) ? 0.0 : max(_2604, 0.0));
        float _2607 = isnan(1.0) ? _4653 : (isnan(_4653) ? 1.0 : min(_4653, 1.0));
        float _2608 = dot(vec3(cbLight._m0[_2570].xyz), vec3(_2597, _2598, _2599));
        float _4664 = isnan(0.0) ? _2608 : (isnan(_2608) ? 0.0 : max(_2608, 0.0));
        float _2612 = _2589 * _2589;
        float _2616 = ((_2607 * _2607) * (_2612 + (-1.0))) + 1.0;
        float _2623 = exp2(log2(1.0 - (isnan(1.0) ? _4664 : (isnan(_4664) ? 1.0 : min(_4664, 1.0)))) * 5.0);
        float _2630 = 1.0 - _2589;
        float _2640 = (0.5 / (((_2250 * ((_2603 * _2630) + _2589)) + 9.9999999392252902907785028219223e-09) + (((_2250 * _2630) + _2589) * _2603))) * _2603;
        float _4675 = isnan(0.0) ? _2640 : (isnan(_2640) ? 0.0 : max(_2640, 0.0));
        float _2642 = (isnan(1.0) ? _4675 : (isnan(_4675) ? 1.0 : min(_4675, 1.0))) * (_2612 / ((_2616 * _2616) * 3.141590118408203125));
        float _2643 = isnan(1.0) ? _2101 : (isnan(_2101) ? 1.0 : min(_2101, 1.0));
        _2559 = (((((_2623 * _2272) + _1009) * cbLight._m0[_2574].x) * _2642) * _2643) + _2445;
        _2561 = (((((_2623 * _2274) + _1010) * cbLight._m0[_2574].y) * _2642) * _2643) + _2447;
        _2563 = (((((_2623 * _2275) + _1011) * cbLight._m0[_2574].z) * _2642) * _2643) + _2449;
    }
    float _2777;
    float _2779;
    float _2781;
    float _2783;
    float _2785;
    float _2787;
    if (_2083.y == 0u)
    {
        float _2718 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2719 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2718;
        float _2720 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2718;
        float _2721 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2718;
        uvec4 _2733 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2734 = _2733.x;
        uint _2745 = uint((float(_2733.y) * floor(float(uint(cbSceneParam._m0[85u].y * _814) / _2734))) + floor(float(uint(cbSceneParam._m0[85u].x * _813) / _2734)));
        float _2755 = (log2(_2721 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2756 = isnan(0.0) ? _2755 : (isnan(_2755) ? 0.0 : max(_2755, 0.0));
        uint _2759 = uint(isnan(14.0) ? _2756 : (isnan(_2756) ? 14.0 : min(_2756, 14.0)));
        uvec4 _2764 = texelFetch(g_lightClusterGridBuffer, int(((_2759 << 2u) + (_2745 << 6u)) >> 2u));
        uint _2765 = _2764.x;
        uint _2766 = _2733.z;
        float _2901;
        float _2903;
        float _2905;
        float _2907;
        float _2909;
        float _2911;
        if (((((1u << ((_2766 >> 4u) & 15u)) + 4294967295u) & _2765) == 0u) || ((_2766 & 240u) == 0u))
        {
            _2901 = 0.0;
            _2903 = 0.0;
            _2905 = 0.0;
            _2907 = 0.0;
            _2909 = 0.0;
            _2911 = 0.0;
        }
        else
        {
            float _2902;
            float _2904;
            float _2906;
            float _2908;
            float _2910;
            float _2912;
            float _3062 = 0.0;
            float _3063 = 0.0;
            float _3064 = 0.0;
            float _3065 = 0.0;
            float _3066 = 0.0;
            float _3067 = 0.0;
            uint _3068 = 0u;
            uint _3077;
            bool _3078;
            for (;;)
            {
                _3077 = texelFetch(g_lightClassification, int((((_2759 << 5u) + (_2745 << 9u)) + (_3068 << 2u)) >> 2u)).x;
                _3078 = _3077 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_3078)
                {
                    frontier_phi_68_pred = _3064;
                    frontier_phi_68_pred_1 = _3067;
                    frontier_phi_68_pred_2 = _3066;
                    frontier_phi_68_pred_3 = _3065;
                    frontier_phi_68_pred_4 = _3063;
                    frontier_phi_68_pred_5 = _3062;
                }
                else
                {
                    float _3207;
                    float _3208;
                    float _3209;
                    float _3210;
                    float _3211;
                    float _3212;
                    uint _3213;
                    _3207 = _3062;
                    _3208 = _3063;
                    _3209 = _3064;
                    _3210 = _3065;
                    _3211 = _3066;
                    _3212 = _3067;
                    _3213 = _3077;
                    float _3134;
                    float _3135;
                    float _3136;
                    float _3137;
                    float _3138;
                    float _3139;
                    for (;;)
                    {
                        uint _3217 = uint(findLSB(_3213)) + (_3068 << 5u);
                        uint _3214 = (_3213 + 4294967295u) & _3213;
                        uint _3219 = _3217 * 48u;
                        vec4 _3233 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3219)).x, texelFetch(g_PointLightRenderingBuffer, int(_3219 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3219 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3219 + 3u)).x));
                        uint _3239 = (_3217 * 48u) + 4u;
                        vec4 _3252 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3239)).x, texelFetch(g_PointLightRenderingBuffer, int(_3239 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3239 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3239 + 3u)).x));
                        uint _3258 = (_3217 * 48u) + 8u;
                        vec3 _3269 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3258)).x, texelFetch(g_PointLightRenderingBuffer, int(_3258 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3258 + 2u)).x));
                        float _3273 = _3233.x - _2719;
                        float _3274 = _3233.y - _2720;
                        float _3275 = _3233.z - _2721;
                        float _3276 = dot(vec3(_3273, _3274, _3275), vec3(_3273, _3274, _3275));
                        float _3279 = inversesqrt(_3276);
                        float _3280 = _3279 * _3273;
                        float _3281 = _3279 * _3274;
                        float _3282 = _3279 * _3275;
                        float _3283 = dot(vec3(_836, _839, _842), vec3(_3280, _3281, _3282));
                        float _3288 = 1.0 - (_3276 * _3233.w);
                        float _4701 = isnan(0.0) ? _3288 : (isnan(_3288) ? 0.0 : max(_3288, 0.0));
                        float _3289 = isnan(1.0) ? _4701 : (isnan(_4701) ? 1.0 : min(_4701, 1.0));
                        float _3290 = sqrt(_3276) * _3252.w;
                        float _3293 = 1.39999997615814208984375 / (_3290 + 1.39999997615814208984375);
                        float _3294 = _3293 * _3293;
                        float _3297 = ((1.0 - _3294) * _3283) + _3294;
                        float _3300 = _3290 * _3290;
                        float _3303 = ((isnan(0.0) ? _3297 : (isnan(_3297) ? 0.0 : max(_3297, 0.0))) * _3289) / ((_3300 * 0.699999988079071044921875) + 1.0);
                        float _3307 = (-0.0) - _2719;
                        float _3308 = (-0.0) - _2720;
                        float _3309 = (-0.0) - _2721;
                        float _3313 = inversesqrt(dot(vec3(_3307, _3308, _3309), vec3(_3307, _3308, _3309)));
                        float _3314 = _3313 * _3307;
                        float _3315 = _3313 * _3308;
                        float _3316 = _3313 * _3309;
                        float _3324 = exp2(log2(1.0 / ((_3300 * 3.5) + 5.0)) * 0.25);
                        float _3325 = 1.0 - _1033;
                        float _3332 = sqrt(1.0 - ((1.0 - (_3325 * _3325)) * (1.0 - (_3324 * _3324))));
                        float _3333 = _3332 * _3332;
                        float _3334 = _3333 * _3333;
                        float _3335 = _3314 + _3280;
                        float _3336 = _3315 + _3281;
                        float _3337 = _3316 + _3282;
                        float _3341 = inversesqrt(dot(vec3(_3335, _3336, _3337), vec3(_3335, _3336, _3337)));
                        float _3345 = dot(vec3(_836, _839, _842), vec3(_3314, _3315, _3316));
                        float _4717 = isnan(0.0) ? _3345 : (isnan(_3345) ? 0.0 : max(_3345, 0.0));
                        float _3348 = isnan(1.0) ? _4717 : (isnan(_4717) ? 1.0 : min(_4717, 1.0));
                        float _3349 = dot(vec3(_836, _839, _842), vec3(_3341 * _3335, _3341 * _3336, _3341 * _3337));
                        float _4728 = isnan(0.0) ? _3349 : (isnan(_3349) ? 0.0 : max(_3349, 0.0));
                        float _3352 = isnan(1.0) ? _4728 : (isnan(_4728) ? 1.0 : min(_4728, 1.0));
                        float _3356 = ((_3352 * _3352) * (_3334 + (-1.0))) + 1.0;
                        float _3357 = _3293 * _3333;
                        float _3358 = _3357 * _3357;
                        float _3361 = ((1.0 - _3358) * _3283) + _3358;
                        float _4739 = isnan(0.0) ? _3361 : (isnan(_3361) ? 0.0 : max(_3361, 0.0));
                        float _3362 = isnan(1.0) ? _4739 : (isnan(_4739) ? 1.0 : min(_4739, 1.0));
                        float _3363 = 1.0 - _3333;
                        float _3373 = (0.5 / (((_3362 * ((_3348 * _3363) + _3333)) + 9.9999999392252902907785028219223e-09) + (((_3362 * _3363) + _3333) * _3348))) * _3362;
                        float _4750 = isnan(0.0) ? _3373 : (isnan(_3373) ? 0.0 : max(_3373, 0.0));
                        float _3384 = (((_3334 * 3.1415927410125732421875) * (isnan(1.0) ? _4750 : (isnan(_4750) ? 1.0 : min(_4750, 1.0)))) / ((_3356 * _3356) * ((_3300 * 2.1991131305694580078125) + 3.141590118408203125))) * _3289;
                        _3137 = (_3303 * _3252.x) + _3210;
                        _3138 = (_3303 * _3252.y) + _3211;
                        _3139 = (_3303 * _3252.z) + _3212;
                        _3134 = (_3384 * _3269.x) + _3207;
                        _3135 = (_3384 * _3269.y) + _3208;
                        _3136 = (_3384 * _3269.z) + _3209;
                        if (_3214 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3207 = _3134;
                            _3208 = _3135;
                            _3209 = _3136;
                            _3210 = _3137;
                            _3211 = _3138;
                            _3212 = _3139;
                            _3213 = _3214;
                        }
                    }
                    frontier_phi_68_pred = _3136;
                    frontier_phi_68_pred_1 = _3139;
                    frontier_phi_68_pred_2 = _3138;
                    frontier_phi_68_pred_3 = _3137;
                    frontier_phi_68_pred_4 = _3135;
                    frontier_phi_68_pred_5 = _3134;
                }
                _2906 = frontier_phi_68_pred;
                _2912 = frontier_phi_68_pred_1;
                _2910 = frontier_phi_68_pred_2;
                _2908 = frontier_phi_68_pred_3;
                _2904 = frontier_phi_68_pred_4;
                _2902 = frontier_phi_68_pred_5;
                uint _3069 = _3068 + 1u;
                if (_3069 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3062 = _2902;
                    _3063 = _2904;
                    _3064 = _2906;
                    _3065 = _2908;
                    _3066 = _2910;
                    _3067 = _2912;
                    _3068 = _3069;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2901 = _2902;
            _2903 = _2904;
            _2905 = _2906;
            _2907 = _2908;
            _2909 = _2910;
            _2911 = _2912;
        }
        uvec4 _2915 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2916 = _2915.z;
        uint _2918 = (_2916 >> 8u) & 15u;
        float _3030;
        float _3032;
        float _3034;
        float _3036;
        float _3038;
        float _3040;
        if (((4294967295u << _2918) & _2765) == 0u)
        {
            _3030 = _2901;
            _3032 = _2903;
            _3034 = _2905;
            _3036 = _2907;
            _3038 = _2909;
            _3040 = _2911;
        }
        else
        {
            float _3055 = inversesqrt(dot(vec3(_2719, _2720, _2721), vec3(_2719, _2720, _2721)));
            float _3056 = _3055 * _2719;
            float _3057 = _3055 * _2720;
            float _3058 = _3055 * _2721;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2918 < ((_2916 >> 12u) & 15u))
            {
                float _3031;
                float _3033;
                float _3035;
                float _3037;
                float _3039;
                float _3041;
                float _3190 = _2901;
                float _3191 = _2903;
                float _3192 = _2905;
                float _3193 = _2907;
                float _3194 = _2909;
                float _3195 = _2911;
                uint _3196 = _2918;
                uint _3205;
                bool _3206;
                for (;;)
                {
                    _3205 = texelFetch(g_lightClassification, int((((_2759 << 5u) + (_2745 << 9u)) + (_3196 << 2u)) >> 2u)).x;
                    _3206 = _3205 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_3206)
                    {
                        frontier_phi_79_pred = _3195;
                        frontier_phi_79_pred_1 = _3194;
                        frontier_phi_79_pred_2 = _3193;
                        frontier_phi_79_pred_3 = _3192;
                        frontier_phi_79_pred_4 = _3191;
                        frontier_phi_79_pred_5 = _3190;
                    }
                    else
                    {
                        float _3398;
                        float _3399;
                        float _3400;
                        float _3401;
                        float _3402;
                        float _3403;
                        float _3693;
                        float _3694;
                        float _3695;
                        float _3696;
                        float _3697;
                        float _3698;
                        float _3411 = _3190;
                        float _3412 = _3191;
                        float _3413 = _3192;
                        float _3414 = _3193;
                        float _3415 = _3194;
                        float _3416 = _3195;
                        uint _3417 = _3205;
                        uint _3418;
                        vec4 _3443;
                        float _3444;
                        vec4 _3459;
                        vec3 _3471;
                        vec4 _3486;
                        vec4 _3502;
                        float _3549;
                        bool _3550;
                        for (;;)
                        {
                            uint _3428 = ((_3196 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3417));
                            _3418 = (_3417 + 4294967295u) & _3417;
                            uint _3430 = _3428 * 40u;
                            _3443 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3430)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3430 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3430 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3430 + 3u)).x));
                            _3444 = _3443.w;
                            uint _3446 = (_3428 * 40u) + 4u;
                            _3459 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3446)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3446 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3446 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3446 + 3u)).x));
                            uint _3461 = (_3428 * 40u) + 8u;
                            _3471 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3461)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3461 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3461 + 2u)).x));
                            uint _3473 = (_3428 * 40u) + 16u;
                            _3486 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3473)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3473 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3473 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3473 + 3u)).x));
                            uint _3489 = (_3428 * 40u) + 20u;
                            _3502 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3489)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3489 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3489 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3489 + 3u)).x));
                            uint _3505 = (_3428 * 40u) + 24u;
                            vec4 _3518 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3505)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3505 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3505 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3505 + 3u)).x));
                            uint _3524 = (_3428 * 40u) + 28u;
                            vec4 _3537 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3524)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3524 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3524 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3524 + 3u)).x));
                            _3549 = fma(_2721, _3537.z, fma(_2720, _3537.y, _3537.x * _2719)) + _3537.w;
                            _3550 = !((fma(_2721, _3518.z, fma(_2720, _3518.y, _3518.x * _2719)) + _3518.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_3550)
                            {
                                float _3577 = _3443.x - _2719;
                                float _3578 = _3443.y - _2720;
                                float _3579 = _3443.z - _2721;
                                float _3580 = dot(vec3(_3577, _3578, _3579), vec3(_3577, _3578, _3579));
                                float _3583 = inversesqrt(_3580);
                                float _3584 = _3583 * _3577;
                                float _3585 = _3583 * _3578;
                                float _3586 = _3583 * _3579;
                                float _3590 = 1.0 - (_3580 / (_3444 * _3444));
                                float _4761 = isnan(0.0) ? _3590 : (isnan(_3590) ? 0.0 : max(_3590, 0.0));
                                float _3591 = isnan(1.0) ? _4761 : (isnan(_4761) ? 1.0 : min(_4761, 1.0));
                                float _3595 = sqrt(_3580) * _3459.w;
                                float _3597 = 1.39999997615814208984375 / (_3595 + 1.39999997615814208984375);
                                float _3598 = _3597 * _3597;
                                float _3601 = ((1.0 - _3598) * dot(vec3(_3584, _3585, _3586), vec3(_836, _839, _842))) + _3598;
                                float _3604 = _3595 * _3595;
                                float _3608 = (fma(_2721, _3486.z, fma(_2720, _3486.y, _3486.x * _2719)) + _3486.w) / _3549;
                                float _3609 = (fma(_2721, _3502.z, fma(_2720, _3502.y, _3502.x * _2719)) + _3502.w) / _3549;
                                float _3613 = 1.0 - dot(vec2(_3608, _3609), vec2(_3608, _3609));
                                float _4777 = isnan(0.0) ? _3613 : (isnan(_3613) ? 0.0 : max(_3613, 0.0));
                                float _3614 = isnan(1.0) ? _4777 : (isnan(_4777) ? 1.0 : min(_4777, 1.0));
                                float _3615 = _3614 * (((isnan(0.0) ? _3601 : (isnan(_3601) ? 0.0 : max(_3601, 0.0))) * _3591) / ((_3604 * 0.699999988079071044921875) + 1.0));
                                float _3627 = exp2(log2(1.0 / ((_3604 * 3.5) + 5.0)) * 0.25);
                                float _3628 = 1.0 - _1033;
                                float _3635 = sqrt(1.0 - ((1.0 - (_3628 * _3628)) * (1.0 - (_3627 * _3627))));
                                float _3636 = _3635 * _3635;
                                float _3637 = _3636 * _3636;
                                float _3638 = _3584 - _3056;
                                float _3639 = _3585 - _3057;
                                float _3640 = _3586 - _3058;
                                float _3644 = inversesqrt(dot(vec3(_3638, _3639, _3640), vec3(_3638, _3639, _3640)));
                                float _3648 = dot(vec3(_836, _839, _842), vec3((-0.0) - _3056, (-0.0) - _3057, (-0.0) - _3058));
                                float _4788 = isnan(0.0) ? _3648 : (isnan(_3648) ? 0.0 : max(_3648, 0.0));
                                float _3651 = isnan(1.0) ? _4788 : (isnan(_4788) ? 1.0 : min(_4788, 1.0));
                                float _3652 = dot(vec3(_836, _839, _842), vec3(_3644 * _3638, _3644 * _3639, _3644 * _3640));
                                float _4799 = isnan(0.0) ? _3652 : (isnan(_3652) ? 0.0 : max(_3652, 0.0));
                                float _3655 = isnan(1.0) ? _4799 : (isnan(_4799) ? 1.0 : min(_4799, 1.0));
                                float _3659 = ((_3655 * _3655) * (_3637 + (-1.0))) + 1.0;
                                float _3660 = _3597 * _3636;
                                float _3661 = _3660 * _3660;
                                float _3667 = ((1.0 - _3661) * dot(vec3(_836, _839, _842), vec3(_3584, _3585, _3586))) + _3661;
                                float _4810 = isnan(0.0) ? _3667 : (isnan(_3667) ? 0.0 : max(_3667, 0.0));
                                float _3668 = isnan(1.0) ? _4810 : (isnan(_4810) ? 1.0 : min(_4810, 1.0));
                                float _3669 = 1.0 - _3636;
                                float _3679 = (0.5 / (((_3668 * ((_3651 * _3669) + _3636)) + 9.9999999392252902907785028219223e-09) + (((_3668 * _3669) + _3636) * _3651))) * _3668;
                                float _4821 = isnan(0.0) ? _3679 : (isnan(_3679) ? 0.0 : max(_3679, 0.0));
                                float _3689 = (_3614 * _3591) * (((_3637 * 3.1415927410125732421875) * (isnan(1.0) ? _4821 : (isnan(_4821) ? 1.0 : min(_4821, 1.0)))) / ((_3659 * _3659) * ((_3604 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3615 * _3459.z;
                                frontier_phi_85_pred_1 = _3615 * _3459.y;
                                frontier_phi_85_pred_2 = _3615 * _3459.x;
                                frontier_phi_85_pred_3 = _3689 * _3471.z;
                                frontier_phi_85_pred_4 = _3689 * _3471.y;
                                frontier_phi_85_pred_5 = _3689 * _3471.x;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3698 = frontier_phi_85_pred;
                            _3697 = frontier_phi_85_pred_1;
                            _3696 = frontier_phi_85_pred_2;
                            _3695 = frontier_phi_85_pred_3;
                            _3694 = frontier_phi_85_pred_4;
                            _3693 = frontier_phi_85_pred_5;
                            _3401 = _3696 + _3414;
                            _3402 = _3697 + _3415;
                            _3403 = _3698 + _3416;
                            _3398 = _3693 + _3411;
                            _3399 = _3694 + _3412;
                            _3400 = _3695 + _3413;
                            if (_3418 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3411 = _3398;
                                _3412 = _3399;
                                _3413 = _3400;
                                _3414 = _3401;
                                _3415 = _3402;
                                _3416 = _3403;
                                _3417 = _3418;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _3403;
                        frontier_phi_79_pred_1 = _3402;
                        frontier_phi_79_pred_2 = _3401;
                        frontier_phi_79_pred_3 = _3400;
                        frontier_phi_79_pred_4 = _3399;
                        frontier_phi_79_pred_5 = _3398;
                    }
                    _3041 = frontier_phi_79_pred;
                    _3039 = frontier_phi_79_pred_1;
                    _3037 = frontier_phi_79_pred_2;
                    _3035 = frontier_phi_79_pred_3;
                    _3033 = frontier_phi_79_pred_4;
                    _3031 = frontier_phi_79_pred_5;
                    uint _3197 = _3196 + 1u;
                    if (_3197 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3190 = _3031;
                        _3191 = _3033;
                        _3192 = _3035;
                        _3193 = _3037;
                        _3194 = _3039;
                        _3195 = _3041;
                        _3196 = _3197;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3037;
                frontier_phi_60_61_ladder_1 = _3041;
                frontier_phi_60_61_ladder_2 = _3039;
                frontier_phi_60_61_ladder_3 = _3035;
                frontier_phi_60_61_ladder_4 = _3033;
                frontier_phi_60_61_ladder_5 = _3031;
            }
            else
            {
                frontier_phi_60_61_ladder = _2907;
                frontier_phi_60_61_ladder_1 = _2911;
                frontier_phi_60_61_ladder_2 = _2909;
                frontier_phi_60_61_ladder_3 = _2905;
                frontier_phi_60_61_ladder_4 = _2903;
                frontier_phi_60_61_ladder_5 = _2901;
            }
            _3030 = frontier_phi_60_61_ladder_5;
            _3032 = frontier_phi_60_61_ladder_4;
            _3034 = frontier_phi_60_61_ladder_3;
            _3036 = frontier_phi_60_61_ladder;
            _3038 = frontier_phi_60_61_ladder_2;
            _3040 = frontier_phi_60_61_ladder_1;
        }
        float _3045 = isnan(1.0) ? _1023 : (isnan(_1023) ? 1.0 : min(_1023, 1.0));
        _2777 = (_3045 * _3036) + _2214;
        _2779 = (_3045 * _3038) + _2216;
        _2781 = (_3045 * _3040) + _2218;
        _2783 = ((_3030 * _1009) * _3045) + _2559;
        _2785 = ((_3032 * _1010) * _3045) + _2561;
        _2787 = ((_3034 * _1011) * _3045) + _2563;
    }
    else
    {
        _2777 = _2214;
        _2779 = _2216;
        _2781 = _2218;
        _2783 = _2559;
        _2785 = _2561;
        _2787 = _2563;
    }
    uint _2793 = _916 + uint(cbMatDynParam._m0[0u].w);
    float _2799 = cbInstanceData._m0[_2793].x * (((((cbMatDynParam._m0[8u].x - cbMatDynParam._m0[7u].x) * _680) + cbMatDynParam._m0[7u].x) + (((((cbMtdParam._m0[12u].x * cbMtdParam._m0[16u].z) * cbMtdParam._m0[15u].w) * _576) * _589.x) * _709)) + (((_738 - (_738 * _646)) + (cbMatDynParam._m0[11u].x * _769)) * cbMatDynParam._m0[9u].x));
    float _2800 = cbInstanceData._m0[_2793].y * (((((cbMatDynParam._m0[8u].y - cbMatDynParam._m0[7u].y) * _680) + cbMatDynParam._m0[7u].y) + (((((cbMtdParam._m0[12u].y * cbMtdParam._m0[16u].z) * cbMtdParam._m0[15u].w) * _576) * _589.y) * _709)) + (((_740 - (_740 * _646)) + (cbMatDynParam._m0[11u].y * _769)) * cbMatDynParam._m0[9u].y));
    float _2801 = cbInstanceData._m0[_2793].z * (((((cbMatDynParam._m0[8u].z - cbMatDynParam._m0[7u].z) * _680) + cbMatDynParam._m0[7u].z) + (((((cbMtdParam._m0[12u].z * cbMtdParam._m0[16u].z) * cbMtdParam._m0[15u].w) * _576) * _589.z) * _709)) + (((_742 - (_742 * _646)) + (cbMatDynParam._m0[11u].z * _769)) * cbMatDynParam._m0[9u].z));
    float _4837 = isnan(0.0) ? _1000 : (isnan(_1000) ? 0.0 : max(_1000, 0.0));
    float _4848 = isnan(0.0) ? _1001 : (isnan(_1001) ? 0.0 : max(_1001, 0.0));
    float _4859 = isnan(0.0) ? _1002 : (isnan(_1002) ? 0.0 : max(_1002, 0.0));
    float _4870 = isnan(0.0) ? _641 : (isnan(_641) ? 0.0 : max(_641, 0.0));
    float _2819 = (((isnan(1.0) ? _4837 : (isnan(_4837) ? 1.0 : min(_4837, 1.0))) * (_2777 + ((isnan(0.0) ? _1776 : (isnan(_1776) ? 0.0 : max(_1776, 0.0))) * _1023))) + ((_2783 + ((isnan(0.0) ? _2067 : (isnan(_2067) ? 0.0 : max(_2067, 0.0))) * _1852)) * cbPerFrame._m0[3u].x)) + _2799;
    float _2821 = (_2800 + ((_2785 + ((isnan(0.0) ? _2070 : (isnan(_2070) ? 0.0 : max(_2070, 0.0))) * _1852)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4848 : (isnan(_4848) ? 1.0 : min(_4848, 1.0))) * (_2779 + ((isnan(0.0) ? _1779 : (isnan(_1779) ? 0.0 : max(_1779, 0.0))) * _1023)));
    float _2823 = (_2801 + ((_2787 + ((isnan(0.0) ? _2073 : (isnan(_2073) ? 0.0 : max(_2073, 0.0))) * _1852)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4859 : (isnan(_4859) ? 1.0 : min(_4859, 1.0))) * (_2781 + ((isnan(0.0) ? _1782 : (isnan(_1782) ? 0.0 : max(_1782, 0.0))) * _1023)));
    float _2824 = isnan(0.0) ? _2819 : (isnan(_2819) ? 0.0 : max(_2819, 0.0));
    float _2825 = isnan(0.0) ? _2821 : (isnan(_2821) ? 0.0 : max(_2821, 0.0));
    float _2826 = isnan(0.0) ? _2823 : (isnan(_2823) ? 0.0 : max(_2823, 0.0));
    float _2832 = cbMtdParam._m0[2u].x * _2799;
    float _2833 = cbMtdParam._m0[2u].y * _2800;
    float _2834 = cbMtdParam._m0[2u].z * _2801;
    float _2841 = ((cbMtdParam._m0[2u].w - cbMatDynParam._m0[12u].y) * _709) + cbMatDynParam._m0[12u].y;
    float _2846 = cbInstanceData._m0[_915 + 6u].w * (isnan(1.0) ? _4870 : (isnan(_4870) ? 1.0 : min(_4870, 1.0)));
    float _2851 = _813 / cbSceneParam._m0[86u].x;
    float _2852 = _814 / cbSceneParam._m0[86u].y;
    vec4 _2866 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2851, _2852, (log2((isnan(cbSceneParam._m0[77u].w) ? _795 : (isnan(_795) ? cbSceneParam._m0[77u].w : min(_795, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2868 = _2866.x;
    float _2869 = _2866.y;
    float _2870 = _2866.z;
    float _2871 = _2866.w;
    float _2963;
    float _2965;
    float _2967;
    float _2969;
    if (_795 > cbSceneParam._m0[78u].w)
    {
        float _2926 = isnan(_795) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _795 : min(cbSceneParam._m0[80u].w, _795));
        float _2927 = _2926 / _795;
        float _2938 = _2927 * _297;
        float _2939 = _298 * _2927;
        float _2940 = (-0.0) - _2939;
        float _2941 = _2927 * _299;
        float _2943 = (cbSceneParam._m0[77u].w * _2940) / _2926;
        float _2944 = _2943 + cbSceneParam._m0[79u].w;
        float _2945 = cbSceneParam._m0[79u].w - _2939;
        float _2951 = sqrt(((_2938 * _2938) + (_2939 * _2939)) + (_2941 * _2941));
        float _2954 = (1.0 - (cbSceneParam._m0[77u].w / _2926)) * _2951;
        float _2959 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2961 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3147;
        if (abs((_2940 - _2943) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3147 = ((((_2944 > 0.0) ? exp2(_2959 * _2944) : (2.0 - exp2(_2961 * _2944))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2954;
        }
        else
        {
            float _3091 = 1.0 / cbSceneParam._m0[80u].x;
            float _3092 = isnan(_2945) ? _2944 : (isnan(_2944) ? _2945 : max(_2944, _2945));
            float _3093 = isnan(_2945) ? _2944 : (isnan(_2944) ? _2945 : min(_2944, _2945));
            float _3102 = isnan(0.0) ? _3092 : (isnan(_3092) ? 0.0 : min(_3092, 0.0));
            float _3103 = isnan(0.0) ? _3093 : (isnan(_3093) ? 0.0 : min(_3093, 0.0));
            _3147 = ((abs(_2951 / _2940) * cbSceneParam._m0[80u].y) * ((((_3102 - _3103) * 2.0) - ((exp2(_2959 * (isnan(0.0) ? _3092 : (isnan(_3092) ? 0.0 : max(_3092, 0.0)))) - exp2(_2959 * (isnan(0.0) ? _3093 : (isnan(_3093) ? 0.0 : max(_3093, 0.0))))) * _3091)) - ((exp2(_2961 * _3102) - exp2(_2961 * _3103)) * _3091))) + (_2954 * cbSceneParam._m0[80u].z);
        }
        vec4 _3149 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2851, _2852, 1.0), 0.0);
        float _3158 = exp2((_3147 * (-1.44269502162933349609375)) * (1.0 - _3149.w));
        float _3159 = log2(_3158);
        float _3175 = log2(_2871);
        _2963 = (exp2(_3175 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3159 * cbSceneParam._m0[78u].x)) * _3149.x) / cbSceneParam._m0[78u].x)) + _2868;
        _2965 = (exp2(_3175 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3159 * cbSceneParam._m0[78u].y)) * _3149.y) / cbSceneParam._m0[78u].y)) + _2869;
        _2967 = (exp2(_3175 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3159 * cbSceneParam._m0[78u].z)) * _3149.z) / cbSceneParam._m0[78u].z)) + _2870;
        _2969 = _3158 * _2871;
    }
    else
    {
        _2963 = _2868;
        _2965 = _2869;
        _2967 = _2870;
        _2969 = _2871;
    }
    bool _3185;
    vec4 _2979;
    vec4 _3001;
    float _3003;
    float _3007;
    float _3008;
    float _3009;
    float _3012;
    float _3015;
    float _3018;
    float _3019;
    bool _3029;
    for (;;)
    {
        _2979 = cbMatDynParam._m0[0u];
        float _2981 = roundEven(_2979.y);
        bool _2982 = _2981 == 3.0;
        float _2983 = log2(_2969);
        float _2987 = exp2(_2983 * cbSceneParam._m0[78u].x);
        float _2988 = exp2(_2983 * cbSceneParam._m0[78u].y);
        float _2989 = exp2(_2983 * cbSceneParam._m0[78u].z);
        float _2990 = _2987 * _2824;
        float _2991 = _2988 * _2825;
        float _2992 = _2989 * _2826;
        float _2999 = _802 + (-0.5);
        _3001 = cbMtdParam._m0[1u];
        _3003 = _3001.y * _2999;
        float _3006 = (_2981 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3007 = _3006 * (_2982 ? _2990 : (_2990 + (cbSceneParam._m0[72u].w * _2963)));
        _3008 = _3006 * (_2982 ? _2991 : (_2991 + (cbSceneParam._m0[72u].w * _2965)));
        _3009 = _3006 * (_2982 ? _2992 : (_2992 + (cbSceneParam._m0[72u].w * _2967)));
        _3012 = ((_2832 * _2841) * _2987) * _3006;
        _3015 = ((_2833 * _2841) * _2988) * _3006;
        _3018 = ((_2834 * _2841) * _2989) * _3006;
        _3019 = _2999 * 0.999000012874603271484375;
        _3029 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3029)
        {
            if ((cbInstanceData._m0[_915 + 7u].x + _3019) < 0.5)
            {
                _3185 = true;
                break;
            }
        }
        uint _3126 = _916 + uint(_2979.w);
        if ((cbInstanceData._m0[_3126].w < 1.0) && ((cbInstanceData._m0[_3126].w + _3019) < 0.5))
        {
            _3185 = true;
            break;
        }
        if ((_3003 + _450) < _3001.x)
        {
            _3185 = true;
            break;
        }
        _3185 = false;
        break;
    }
    float _3389;
    if (_3185)
    {
        discard_state = true;
        _3389 = 0.0;
    }
    else
    {
        _3389 = _2846;
    }
    SV_Target.x = _3007;
    SV_Target.y = _3008;
    SV_Target.z = _3009;
    SV_Target.w = _3389;
    SV_Target_1.x = _3012;
    SV_Target_1.y = _3015;
    SV_Target_1.z = _3018;
    SV_Target_1.w = _2846;
    discard_exit();
}


