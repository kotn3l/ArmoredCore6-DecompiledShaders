#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[18];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_1;
layout(set = 0, binding = 1) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_7;
layout(set = 0, binding = 10) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_6;
layout(set = 0, binding = 12) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_0;
layout(set = 0, binding = 3) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_10;
layout(set = 0, binding = 4) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_11;
layout(set = 0, binding = 5) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_12;
layout(set = 0, binding = 6) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_2;
layout(set = 0, binding = 7) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_4;
layout(set = 0, binding = 9) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_5;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1552;
float _3977;
float _3978;
float _3979;
float _3980;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _215 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _216 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _217 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _223 = inversesqrt(dot(vec3(_215, _216, _217), vec3(_215, _216, _217)));
    float _230 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _231 = _230 * NORMAL.x;
    float _232 = _230 * NORMAL.y;
    float _233 = _230 * NORMAL.z;
    float _237 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _245;
    float _246;
    float _247;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _245 = (-0.0) - _231;
        _246 = (-0.0) - _232;
        _247 = (-0.0) - _233;
    }
    else
    {
        _245 = _231;
        _246 = _232;
        _247 = _233;
    }
    float _291 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _301 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _291);
    float _302 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _291);
    float _303 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _291);
    vec4 _316 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _321 = _316.z;
    float _322 = _316.w;
    float _328 = exp2(log2(_321 * 22.0) * 260.0);
    float _329 = isnan(0.0) ? _328 : (isnan(_328) ? 0.0 : max(_328, 0.0));
    float _330 = isnan(1.0) ? _329 : (isnan(_329) ? 1.0 : min(_329, 1.0));
    vec4 _344 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _354 = cbMtdParam._m0[10u].x * _344.x;
    float _355 = cbMtdParam._m0[10u].y * _344.y;
    float _356 = cbMtdParam._m0[10u].z * _344.z;
    vec4 _368 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _395 = exp2(log2(1.0 - _322) * 8.0);
    vec4 _407 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_10, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _423 = exp2(log2(_322) * 8.0);
    vec4 _435 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _459 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _467 = (((((cbMtdParam._m0[9u].x * _368.x) - _354) * _330) + _354) * 4.55000019073486328125) * _459.x;
    float _469 = (((((cbMtdParam._m0[9u].y * _368.y) - _355) * _330) + _355) * 4.55000019073486328125) * _459.y;
    float _471 = (((((cbMtdParam._m0[9u].z * _368.z) - _356) * _330) + _356) * 4.55000019073486328125) * _459.z;
    float _478 = (((cbMtdParam._m0[13u].x * _407.x) - _467) * _395) + _467;
    float _479 = (((cbMtdParam._m0[13u].y * _407.y) - _469) * _395) + _469;
    float _480 = (((cbMtdParam._m0[13u].z * _407.z) - _471) * _395) + _471;
    float _487 = (((cbMtdParam._m0[11u].x * _435.x) - _478) * _423) + _478;
    float _488 = (((cbMtdParam._m0[11u].y * _435.y) - _479) * _423) + _479;
    float _489 = (((cbMtdParam._m0[11u].z * _435.z) - _480) * _423) + _480;
    float _490 = _459.w * _368.w;
    float _520 = (((texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w)).x - cbMtdParam._m0[17u].x) + cbMtdParam._m0[16u].x) * _330) + cbMtdParam._m0[17u].x;
    float _524 = ((cbMtdParam._m0[15u].z - _520) * _395) + _520;
    float _527 = ((cbMtdParam._m0[16u].w - _524) * _423) + _524;
    vec4 _539 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w));
    float _541 = _539.x;
    float _542 = _539.y;
    float _548 = cbMtdParam._m0[14u].y + _539.z;
    vec4 _560 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w));
    vec4 _582 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    vec4 _600 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _613 = (((_330 * (_321 + (-0.5))) + 0.5) * 2.0) * ((((_560.z - _548) + cbMtdParam._m0[14u].x) * _330) + _548);
    float _617 = (((_582.z - _613) + cbMtdParam._m0[15u].y) * _395) + _613;
    float _621 = (((_600.z - _617) + cbMtdParam._m0[14u].w) * _423) + _617;
    float _635 = abs((fract(cbMtdParam._m0[15u].x * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _3999 = isnan(0.0) ? _635 : (isnan(_635) ? 0.0 : max(_635, 0.0));
    float _636 = isnan(1.0) ? _3999 : (isnan(_3999) ? 1.0 : min(_3999, 1.0));
    float _641 = (_636 * _636) * (3.0 - (_636 * 2.0));
    vec4 _654 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _662 = (_316.x * 2.0) + (-1.0);
    float _663 = (_316.y * 2.0) + (-1.0);
    float _664 = dot(vec2(_662, _663), vec2(_662, _663));
    float _4010 = isnan(0.0) ? _664 : (isnan(_664) ? 0.0 : max(_664, 0.0));
    float _669 = sqrt(1.0 - (isnan(1.0) ? _4010 : (isnan(_4010) ? 1.0 : min(_4010, 1.0))));
    float _674 = ((_560.x - _541) * _330) + _541;
    float _675 = ((_560.y - _542) * _330) + _542;
    float _680 = ((_582.x - _674) * _395) + _674;
    float _681 = ((_582.y - _675) * _395) + _675;
    float _694 = (cbMtdParam._m0[14u].z * (((((_600.x - _680) * _423) + _680) * 2.0) + (-1.0))) + _662;
    float _695 = (cbMtdParam._m0[14u].z * (((((_600.y - _681) * _423) + _681) * 2.0) + (-1.0))) + _663;
    float _698 = fma(_669, _245, fma(_695, _237 * TANGENT.x, (_223 * _215) * _694));
    float _701 = fma(_669, _246, fma(_695, _237 * TANGENT.y, (_223 * _216) * _694));
    float _704 = fma(_669, _247, fma(_695, _237 * TANGENT.z, (_223 * _217) * _694));
    float _708 = inversesqrt(dot(vec3(_698, _701, _704), vec3(_698, _701, _704)));
    float _709 = _708 * _698;
    float _710 = _708 * _701;
    float _711 = _708 * _704;
    float _4021 = isnan(0.0) ? _490 : (isnan(_490) ? 0.0 : max(_490, 0.0));
    float _712 = isnan(1.0) ? _4021 : (isnan(_4021) ? 1.0 : min(_4021, 1.0));
    float _4032 = isnan(0.0) ? _621 : (isnan(_621) ? 0.0 : max(_621, 0.0));
    float _713 = isnan(1.0) ? _4032 : (isnan(_4032) ? 1.0 : min(_4032, 1.0));
    float _4043 = isnan(0.0) ? _487 : (isnan(_487) ? 0.0 : max(_487, 0.0));
    float _714 = isnan(1.0) ? _4043 : (isnan(_4043) ? 1.0 : min(_4043, 1.0));
    float _4054 = isnan(0.0) ? _488 : (isnan(_488) ? 0.0 : max(_488, 0.0));
    float _715 = isnan(1.0) ? _4054 : (isnan(_4054) ? 1.0 : min(_4054, 1.0));
    float _4065 = isnan(0.0) ? _489 : (isnan(_489) ? 0.0 : max(_489, 0.0));
    float _716 = isnan(1.0) ? _4065 : (isnan(_4065) ? 1.0 : min(_4065, 1.0));
    float _4076 = isnan(0.0) ? _527 : (isnan(_527) ? 0.0 : max(_527, 0.0));
    float _717 = isnan(1.0) ? _4076 : (isnan(_4076) ? 1.0 : min(_4076, 1.0));
    float _725 = cbMatDynParam._m0[9u].x * _714;
    float _726 = cbMatDynParam._m0[9u].y * _715;
    float _727 = cbMatDynParam._m0[9u].z * _716;
    float _734 = inversesqrt(dot(vec3(_301, _302, _303), vec3(_301, _302, _303)));
    float _735 = _734 * _301;
    float _736 = _734 * _302;
    float _737 = _734 * _303;
    float _744 = abs(exp2(log2(dot(vec3(_709, _710, _711), vec3(_735, _736, _737))) * cbMatDynParam._m0[12u].x));
    float _745 = isnan(0.100000001490116119384765625) ? _744 : (isnan(_744) ? 0.100000001490116119384765625 : max(_744, 0.100000001490116119384765625));
    float _751 = ((isnan(0.699999988079071044921875) ? _745 : (isnan(_745) ? 0.699999988079071044921875 : min(_745, 0.699999988079071044921875))) + (-0.100000001490116119384765625)) * 1.66666662693023681640625;
    float _773 = 1.0 - cbMatDynParam._m0[8u].w;
    float _4097 = isnan(0.0) ? _773 : (isnan(_773) ? 0.0 : max(_773, 0.0));
    float _776 = 1.0 - cbMatDynParam._m0[7u].w;
    float _4108 = isnan(0.0) ? _776 : (isnan(_776) ? 0.0 : max(_776, 0.0));
    float _777 = isnan(1.0) ? _4108 : (isnan(_4108) ? 1.0 : min(_4108, 1.0));
    float _780 = (((isnan(1.0) ? _4097 : (isnan(_4097) ? 1.0 : min(_4097, 1.0))) - _777) * _751) + _777;
    float _799 = dot(vec3(_709, _710, _711), vec3(0.0, -1.0, 0.0));
    float _4119 = isnan(0.0) ? _799 : (isnan(_799) ? 0.0 : max(_799, 0.0));
    float _802 = isnan(1.0) ? _4119 : (isnan(_4119) ? 1.0 : min(_4119, 1.0));
    float _809 = (_802 * _714) * cbMatDynParam._m0[11u].x;
    float _811 = (_802 * _715) * cbMatDynParam._m0[11u].y;
    float _813 = (_802 * _716) * cbMatDynParam._m0[11u].z;
    float _823 = dot(vec3(_735, _736, _737), vec3(_709, _710, _711)) * 2.0;
    float _833 = dot(vec3((-0.0) - (_735 - (_823 * _709)), (-0.0) - (_736 - (_823 * _710)), (-0.0) - (_737 - (_823 * _711))), vec3(0.0, -1.0, 0.0));
    float _4130 = isnan(0.0) ? _833 : (isnan(_833) ? 0.0 : max(_833, 0.0));
    float _840 = exp2(log2(isnan(1.0) ? _4130 : (isnan(_4130) ? 1.0 : min(_4130, 1.0))) * 4.0);
    float _866 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _906 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _915 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _906);
    float _916 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _906);
    float _917 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _906);
    float _921 = inversesqrt(dot(vec3(_915, _916, _917), vec3(_915, _916, _917)));
    float _922 = _915 * _921;
    float _923 = _916 * _921;
    float _924 = _917 * _921;
    vec4 _929 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _931 = _929.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1233 = sqrt(((_915 * _915) + (_916 * _916)) + (_917 * _917));
        float _1239 = (cbMatDynParam._m0[5u].x * _1233) + cbMatDynParam._m0[5u].y;
        float _4141 = isnan(0.0) ? _1239 : (isnan(_1239) ? 0.0 : max(_1239, 0.0));
        float _1240 = isnan(1.0) ? _4141 : (isnan(_4141) ? 1.0 : min(_4141, 1.0));
        float _1244 = (cbMatDynParam._m0[5u].z * _1233) + cbMatDynParam._m0[5u].w;
        float _4152 = isnan(0.0) ? _1244 : (isnan(_1244) ? 0.0 : max(_1244, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4152 : (isnan(_4152) ? 1.0 : min(_4152, 1.0))) - _1240)) + _1240) < ((_931 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _942 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _943 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _945 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _947 = _945.w;
    float _965 = fma(_711, cbSceneParam._m0[5u].z, fma(_710, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _709));
    float _968 = fma(_711, cbSceneParam._m0[6u].z, fma(_710, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _709));
    float _971 = fma(_711, cbSceneParam._m0[7u].z, fma(_710, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _709));
    vec4 _973 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _975 = _973.x;
    float _987 = (((_973.y - _713) + (_973.w * _713)) * cbMtdParam._m0[3u].x) + _713;
    vec4 _988 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _1004 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3(cbMtdParam._m0[3u].x * (_975 * _975)), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * _988.z;
    float _1012 = (((cbMatDynParam._m0[15u].x - _717) * cbMatDynParam._m0[15u].w) * _1004) + _717;
    float _1020 = ((_1004 * cbMatDynParam._m0[16u].z) * (cbMatDynParam._m0[16u].x - _987)) + _987;
    uint _1044 = uint(roundEven(NORMAL.w)) * 13u;
    uint _1045 = _1044 + 9u;
    uint _1046 = _1045 + uint(cbMatDynParam._m0[0u].w);
    float _1052 = (cbMtdParam._m0[0u].x * _725) * cbInstanceData._m0[_1046].x;
    float _1053 = (cbMtdParam._m0[0u].y * _726) * cbInstanceData._m0[_1046].y;
    float _1054 = (cbMtdParam._m0[0u].z * _727) * cbInstanceData._m0[_1046].z;
    float _4163 = isnan(0.0) ? _1052 : (isnan(_1052) ? 0.0 : max(_1052, 0.0));
    float _1055 = isnan(1.0) ? _4163 : (isnan(_4163) ? 1.0 : min(_4163, 1.0));
    float _4174 = isnan(0.0) ? _1053 : (isnan(_1053) ? 0.0 : max(_1053, 0.0));
    float _1056 = isnan(1.0) ? _4174 : (isnan(_4174) ? 1.0 : min(_4174, 1.0));
    float _4185 = isnan(0.0) ? _1054 : (isnan(_1054) ? 0.0 : max(_1054, 0.0));
    float _1057 = isnan(1.0) ? _4185 : (isnan(_4185) ? 1.0 : min(_4185, 1.0));
    vec4 _1058 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _1063 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _1074 = (((_1063.x - _1012) + (_1063.w * _1012)) * cbMtdParam._m0[3u].x) + _1012;
    float _1087 = (cbMtdParam._m0[3u].x * (((_1055 * _947) - _1055) + _1058.x)) + _1055;
    float _1088 = (cbMtdParam._m0[3u].x * (((_1056 * _947) - _1056) + _1058.y)) + _1056;
    float _1089 = (cbMtdParam._m0[3u].x * (((_1057 * _947) - _1057) + _1058.z)) + _1057;
    vec4 _1090 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _1103 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3((_1012 * (_725 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625, (_1012 * (_726 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625, (_1012 * (_727 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * _1090.z;
    float _1107 = _1103 * cbMatDynParam._m0[13u].w;
    float _1117 = (_1107 * (cbMatDynParam._m0[13u].x - _1087)) + _1087;
    float _1118 = (_1107 * (cbMatDynParam._m0[13u].y - _1088)) + _1088;
    float _1119 = (_1107 * (cbMatDynParam._m0[13u].z - _1089)) + _1089;
    float _1127 = ((_1103 * cbMatDynParam._m0[15u].w) * (cbMatDynParam._m0[15u].x - _1074)) + _1074;
    float _1128 = 1.0 - _1127;
    float _1129 = _1128 * _1117;
    float _1130 = _1128 * _1118;
    float _1131 = _1128 * _1119;
    float _1135 = (_1117 + (-0.039999999105930328369140625)) * _1127;
    float _1136 = (_1118 + (-0.039999999105930328369140625)) * _1127;
    float _1137 = (_1119 + (-0.039999999105930328369140625)) * _1127;
    float _1138 = _1135 + 0.039999999105930328369140625;
    float _1139 = _1136 + 0.039999999105930328369140625;
    float _1140 = _1137 + 0.039999999105930328369140625;
    vec4 _1149 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _942, cbSceneParam._m0[86u].y * _943));
    float _1152 = _1149.x * TEXCOORD_4;
    float _1153 = dot(vec3(_709, _710, _711), vec3(_922, _923, _924));
    float _1156 = _1153 * 2.0;
    float _1160 = (_1156 * _709) - _922;
    float _1161 = (_1156 * _710) - _923;
    float _1162 = (_1156 * _711) - _924;
    float _1166 = abs(dot(vec3(_922, _923, _924), vec3(_709, _710, _711)));
    float _4196 = isnan(0.0) ? _1166 : (isnan(_1166) ? 0.0 : max(_1166, 0.0));
    float _1168 = sqrt(_1020);
    float _1179 = exp2((_1168 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4196 : (isnan(_4196) ? 1.0 : min(_4196, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1168 * 3.0));
    float _1185 = (1.0 - _1179) * ((_1168 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1186 = _1179 * _1168;
    float _1214 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1218 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1222 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1551;
    float _1553;
    float _1554;
    float _1555;
    float _1556;
    float _1557;
    float _1558;
    float _1559;
    float _1560;
    float _1561;
    float _1562;
    float _1563;
    float _1564;
    float _1565;
    float _1566;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1278 = fma(_1222, cbModelParam._m0[26u].z, fma(_1218, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1214));
        float _1282 = fma(_1222, cbModelParam._m0[27u].z, fma(_1218, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1214));
        float _1286 = fma(_1222, cbModelParam._m0[28u].z, fma(_1218, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1214));
        float _1309 = _1214 + _709;
        float _1310 = _1218 + _710;
        float _1311 = _1222 + _711;
        float _1321 = fma(_1311, cbModelParam._m0[26u].z, fma(_1310, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1309)) - _1278;
        float _1322 = fma(_1311, cbModelParam._m0[27u].z, fma(_1310, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1309)) - _1282;
        float _1323 = fma(_1311, cbModelParam._m0[28u].z, fma(_1310, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1309)) - _1286;
        float _1327 = inversesqrt(dot(vec3(_1321, _1322, _1323), vec3(_1321, _1322, _1323)));
        float _1340 = ((_1327 * _1321) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1278 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1341 = ((_1327 * _1322) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1282 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1342 = ((_1327 * _1323) / cbModelParam._m0[34u].z) + ((((((_1286 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1345 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1340, _1341, _1342), 0.0);
        vec4 _1352 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1340, _1341, _1342), 0.0);
        vec4 _1359 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1340, _1341, _1342), 0.0);
        vec4 _1366 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1340, _1341, _1342), 0.0);
        float _1379 = exp2((_1345.w + (-0.5)) * 20.0) * 2.0;
        float _1380 = _1379 * (_1345.x + (-0.5));
        float _1381 = _1379 * (_1345.y + (-0.5));
        float _1382 = _1379 * (_1345.z + (-0.5));
        float _1389 = exp2((_1352.w + (-0.5)) * 20.0) * 2.0;
        float _1390 = _1389 * (_1352.x + (-0.5));
        float _1391 = _1389 * (_1352.y + (-0.5));
        float _1392 = _1389 * (_1352.z + (-0.5));
        float _1399 = exp2((_1359.w + (-0.5)) * 20.0) * 2.0;
        float _1400 = _1399 * (_1359.x + (-0.5));
        float _1401 = _1399 * (_1359.y + (-0.5));
        float _1402 = _1399 * (_1359.z + (-0.5));
        float _1409 = exp2((_1366.w + (-0.5)) * 20.0) * 2.0;
        float _1410 = _1409 * (_1366.x + (-0.5));
        float _1411 = _1409 * (_1366.y + (-0.5));
        float _1412 = _1409 * (_1366.z + (-0.5));
        float _1413 = isnan(0.0) ? _1410 : (isnan(_1410) ? 0.0 : max(_1410, 0.0));
        float _1414 = isnan(0.0) ? _1411 : (isnan(_1411) ? 0.0 : max(_1411, 0.0));
        float _1415 = isnan(0.0) ? _1412 : (isnan(_1412) ? 0.0 : max(_1412, 0.0));
        float _1416 = _1380 * 0.5;
        float _1417 = _1390 * 0.5;
        float _1418 = _1400 * 0.5;
        float _1419 = dot(vec3(_1416, _1417, _1418), vec3(_1416, _1417, _1418));
        float _1424 = (_1419 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1419);
        float _1433 = (dot(vec3(_709, _710, _711), vec3(_1424 * _1416, _1424 * _1417, _1424 * _1418)) + 1.0) * 0.5;
        float _4222 = isnan(0.0) ? _1433 : (isnan(_1433) ? 0.0 : max(_1433, 0.0));
        float _1443 = sqrt(((_1417 * _1417) + (_1416 * _1416)) + (_1418 * _1418)) / (_1413 + 9.9999997473787516355514526367188e-06);
        float _4233 = isnan(0.0) ? _1443 : (isnan(_1443) ? 0.0 : max(_1443, 0.0));
        float _1444 = isnan(1.0) ? _4233 : (isnan(_4233) ? 1.0 : min(_4233, 1.0));
        float _1445 = _1444 * 2.0;
        float _1449 = (1.0 - _1444) / (_1444 + 1.0);
        float _4244 = isnan(0.0) ? _1449 : (isnan(_1449) ? 0.0 : max(_1449, 0.0));
        float _1450 = isnan(1.0) ? _4244 : (isnan(_4244) ? 1.0 : min(_4244, 1.0));
        float _1459 = ((((1.0 - _1450) * (_1445 + 2.0)) * exp2(log2(isnan(1.0) ? _4222 : (isnan(_4222) ? 1.0 : min(_4222, 1.0))) * (_1445 + 1.0))) + _1450) * _1413;
        float _1460 = _1381 * 0.5;
        float _1461 = _1391 * 0.5;
        float _1462 = _1401 * 0.5;
        float _1463 = dot(vec3(_1460, _1461, _1462), vec3(_1460, _1461, _1462));
        float _1468 = (_1463 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1463);
        float _1476 = (dot(vec3(_709, _710, _711), vec3(_1468 * _1460, _1468 * _1461, _1468 * _1462)) + 1.0) * 0.5;
        float _4255 = isnan(0.0) ? _1476 : (isnan(_1476) ? 0.0 : max(_1476, 0.0));
        float _1485 = sqrt(((_1461 * _1461) + (_1460 * _1460)) + (_1462 * _1462)) / (_1414 + 9.9999997473787516355514526367188e-06);
        float _4266 = isnan(0.0) ? _1485 : (isnan(_1485) ? 0.0 : max(_1485, 0.0));
        float _1486 = isnan(1.0) ? _4266 : (isnan(_4266) ? 1.0 : min(_4266, 1.0));
        float _1487 = _1486 * 2.0;
        float _1491 = (1.0 - _1486) / (_1486 + 1.0);
        float _4277 = isnan(0.0) ? _1491 : (isnan(_1491) ? 0.0 : max(_1491, 0.0));
        float _1492 = isnan(1.0) ? _4277 : (isnan(_4277) ? 1.0 : min(_4277, 1.0));
        float _1501 = ((((1.0 - _1492) * (_1487 + 2.0)) * exp2(log2(isnan(1.0) ? _4255 : (isnan(_4255) ? 1.0 : min(_4255, 1.0))) * (_1487 + 1.0))) + _1492) * _1414;
        float _1502 = _1382 * 0.5;
        float _1503 = _1392 * 0.5;
        float _1504 = _1402 * 0.5;
        float _1505 = dot(vec3(_1502, _1503, _1504), vec3(_1502, _1503, _1504));
        float _1510 = (_1505 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1505);
        float _1518 = (dot(vec3(_709, _710, _711), vec3(_1510 * _1502, _1510 * _1503, _1510 * _1504)) + 1.0) * 0.5;
        float _4288 = isnan(0.0) ? _1518 : (isnan(_1518) ? 0.0 : max(_1518, 0.0));
        float _1527 = sqrt(((_1503 * _1503) + (_1502 * _1502)) + (_1504 * _1504)) / (_1415 + 9.9999997473787516355514526367188e-06);
        float _4299 = isnan(0.0) ? _1527 : (isnan(_1527) ? 0.0 : max(_1527, 0.0));
        float _1528 = isnan(1.0) ? _4299 : (isnan(_4299) ? 1.0 : min(_4299, 1.0));
        float _1529 = _1528 * 2.0;
        float _1533 = (1.0 - _1528) / (_1528 + 1.0);
        float _4310 = isnan(0.0) ? _1533 : (isnan(_1533) ? 0.0 : max(_1533, 0.0));
        float _1534 = isnan(1.0) ? _4310 : (isnan(_4310) ? 1.0 : min(_4310, 1.0));
        float _1543 = ((((1.0 - _1534) * (_1529 + 2.0)) * exp2(log2(isnan(1.0) ? _4288 : (isnan(_4288) ? 1.0 : min(_4288, 1.0))) * (_1529 + 1.0))) + _1534) * _1415;
        _1551 = _1382;
        _1553 = _1381;
        _1554 = _1380;
        _1555 = _1392;
        _1556 = _1391;
        _1557 = _1390;
        _1558 = _1402;
        _1559 = _1401;
        _1560 = _1400;
        _1561 = _1415;
        _1562 = _1414;
        _1563 = _1413;
        _1564 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1459 : (isnan(_1459) ? 0.0 : max(_1459, 0.0)));
        _1565 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1501 : (isnan(_1501) ? 0.0 : max(_1501, 0.0)));
        _1566 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1543 : (isnan(_1543) ? 0.0 : max(_1543, 0.0)));
    }
    else
    {
        _1551 = _1552;
        _1553 = _1552;
        _1554 = _1552;
        _1555 = _1552;
        _1556 = _1552;
        _1557 = _1552;
        _1558 = _1552;
        _1559 = _1552;
        _1560 = _1552;
        _1561 = _1552;
        _1562 = _1552;
        _1563 = _1552;
        _1564 = 0.0;
        _1565 = 0.0;
        _1566 = 0.0;
    }
    float _1864;
    float _1865;
    float _1866;
    float _1867;
    float _1868;
    float _1869;
    float _1870;
    float _1871;
    float _1872;
    float _1873;
    float _1874;
    float _1875;
    float _1876;
    float _1877;
    float _1878;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1595 = fma(_1222, cbModelParam._m0[30u].z, fma(_1218, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1214));
        float _1599 = fma(_1222, cbModelParam._m0[31u].z, fma(_1218, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1214));
        float _1603 = fma(_1222, cbModelParam._m0[32u].z, fma(_1218, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1214));
        float _1626 = _1214 + _709;
        float _1627 = _1218 + _710;
        float _1628 = _1222 + _711;
        float _1638 = fma(_1628, cbModelParam._m0[30u].z, fma(_1627, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1626)) - _1595;
        float _1639 = fma(_1628, cbModelParam._m0[31u].z, fma(_1627, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1626)) - _1599;
        float _1640 = fma(_1628, cbModelParam._m0[32u].z, fma(_1627, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1626)) - _1603;
        float _1644 = inversesqrt(dot(vec3(_1638, _1639, _1640), vec3(_1638, _1639, _1640)));
        float _1657 = ((_1644 * _1638) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1595 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1658 = ((_1644 * _1639) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1599 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1659 = ((_1644 * _1640) / cbModelParam._m0[35u].z) + ((((((_1603 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1661 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1657, _1658, _1659), 0.0);
        vec4 _1668 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1657, _1658, _1659), 0.0);
        vec4 _1675 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1657, _1658, _1659), 0.0);
        vec4 _1682 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1657, _1658, _1659), 0.0);
        float _1694 = exp2((_1661.w + (-0.5)) * 20.0) * 2.0;
        float _1695 = _1694 * (_1661.x + (-0.5));
        float _1696 = _1694 * (_1661.y + (-0.5));
        float _1697 = _1694 * (_1661.z + (-0.5));
        float _1704 = exp2((_1668.w + (-0.5)) * 20.0) * 2.0;
        float _1705 = _1704 * (_1668.x + (-0.5));
        float _1706 = _1704 * (_1668.y + (-0.5));
        float _1707 = _1704 * (_1668.z + (-0.5));
        float _1714 = exp2((_1675.w + (-0.5)) * 20.0) * 2.0;
        float _1715 = _1714 * (_1675.x + (-0.5));
        float _1716 = _1714 * (_1675.y + (-0.5));
        float _1717 = _1714 * (_1675.z + (-0.5));
        float _1724 = exp2((_1682.w + (-0.5)) * 20.0) * 2.0;
        float _1725 = _1724 * (_1682.x + (-0.5));
        float _1726 = _1724 * (_1682.y + (-0.5));
        float _1727 = _1724 * (_1682.z + (-0.5));
        float _1728 = isnan(0.0) ? _1725 : (isnan(_1725) ? 0.0 : max(_1725, 0.0));
        float _1729 = isnan(0.0) ? _1726 : (isnan(_1726) ? 0.0 : max(_1726, 0.0));
        float _1730 = isnan(0.0) ? _1727 : (isnan(_1727) ? 0.0 : max(_1727, 0.0));
        float _1731 = _1695 * 0.5;
        float _1732 = _1705 * 0.5;
        float _1733 = _1715 * 0.5;
        float _1734 = dot(vec3(_1731, _1732, _1733), vec3(_1731, _1732, _1733));
        float _1739 = (_1734 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1734);
        float _1747 = (dot(vec3(_709, _710, _711), vec3(_1739 * _1731, _1739 * _1732, _1739 * _1733)) + 1.0) * 0.5;
        float _4351 = isnan(0.0) ? _1747 : (isnan(_1747) ? 0.0 : max(_1747, 0.0));
        float _1756 = sqrt(((_1732 * _1732) + (_1731 * _1731)) + (_1733 * _1733)) / (_1728 + 9.9999997473787516355514526367188e-06);
        float _4362 = isnan(0.0) ? _1756 : (isnan(_1756) ? 0.0 : max(_1756, 0.0));
        float _1757 = isnan(1.0) ? _4362 : (isnan(_4362) ? 1.0 : min(_4362, 1.0));
        float _1758 = _1757 * 2.0;
        float _1762 = (1.0 - _1757) / (_1757 + 1.0);
        float _4373 = isnan(0.0) ? _1762 : (isnan(_1762) ? 0.0 : max(_1762, 0.0));
        float _1763 = isnan(1.0) ? _4373 : (isnan(_4373) ? 1.0 : min(_4373, 1.0));
        float _1772 = ((((1.0 - _1763) * (_1758 + 2.0)) * exp2(log2(isnan(1.0) ? _4351 : (isnan(_4351) ? 1.0 : min(_4351, 1.0))) * (_1758 + 1.0))) + _1763) * _1728;
        float _1773 = _1696 * 0.5;
        float _1774 = _1706 * 0.5;
        float _1775 = _1716 * 0.5;
        float _1776 = dot(vec3(_1773, _1774, _1775), vec3(_1773, _1774, _1775));
        float _1781 = (_1776 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1776);
        float _1789 = (dot(vec3(_709, _710, _711), vec3(_1781 * _1773, _1781 * _1774, _1781 * _1775)) + 1.0) * 0.5;
        float _4384 = isnan(0.0) ? _1789 : (isnan(_1789) ? 0.0 : max(_1789, 0.0));
        float _1798 = sqrt(((_1774 * _1774) + (_1773 * _1773)) + (_1775 * _1775)) / (_1729 + 9.9999997473787516355514526367188e-06);
        float _4395 = isnan(0.0) ? _1798 : (isnan(_1798) ? 0.0 : max(_1798, 0.0));
        float _1799 = isnan(1.0) ? _4395 : (isnan(_4395) ? 1.0 : min(_4395, 1.0));
        float _1800 = _1799 * 2.0;
        float _1804 = (1.0 - _1799) / (_1799 + 1.0);
        float _4406 = isnan(0.0) ? _1804 : (isnan(_1804) ? 0.0 : max(_1804, 0.0));
        float _1805 = isnan(1.0) ? _4406 : (isnan(_4406) ? 1.0 : min(_4406, 1.0));
        float _1814 = ((((1.0 - _1805) * (_1800 + 2.0)) * exp2(log2(isnan(1.0) ? _4384 : (isnan(_4384) ? 1.0 : min(_4384, 1.0))) * (_1800 + 1.0))) + _1805) * _1729;
        float _1815 = _1697 * 0.5;
        float _1816 = _1707 * 0.5;
        float _1817 = _1717 * 0.5;
        float _1818 = dot(vec3(_1815, _1816, _1817), vec3(_1815, _1816, _1817));
        float _1823 = (_1818 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1818);
        float _1831 = (dot(vec3(_709, _710, _711), vec3(_1823 * _1815, _1823 * _1816, _1823 * _1817)) + 1.0) * 0.5;
        float _4417 = isnan(0.0) ? _1831 : (isnan(_1831) ? 0.0 : max(_1831, 0.0));
        float _1840 = sqrt(((_1816 * _1816) + (_1815 * _1815)) + (_1817 * _1817)) / (_1730 + 9.9999997473787516355514526367188e-06);
        float _4428 = isnan(0.0) ? _1840 : (isnan(_1840) ? 0.0 : max(_1840, 0.0));
        float _1841 = isnan(1.0) ? _4428 : (isnan(_4428) ? 1.0 : min(_4428, 1.0));
        float _1842 = _1841 * 2.0;
        float _1846 = (1.0 - _1841) / (_1841 + 1.0);
        float _4439 = isnan(0.0) ? _1846 : (isnan(_1846) ? 0.0 : max(_1846, 0.0));
        float _1847 = isnan(1.0) ? _4439 : (isnan(_4439) ? 1.0 : min(_4439, 1.0));
        float _1856 = ((((1.0 - _1847) * (_1842 + 2.0)) * exp2(log2(isnan(1.0) ? _4417 : (isnan(_4417) ? 1.0 : min(_4417, 1.0))) * (_1842 + 1.0))) + _1847) * _1730;
        _1864 = _1697;
        _1865 = _1696;
        _1866 = _1695;
        _1867 = _1707;
        _1868 = _1706;
        _1869 = _1705;
        _1870 = _1717;
        _1871 = _1716;
        _1872 = _1715;
        _1873 = _1730;
        _1874 = _1729;
        _1875 = _1728;
        _1876 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1772 : (isnan(_1772) ? 0.0 : max(_1772, 0.0)));
        _1877 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1814 : (isnan(_1814) ? 0.0 : max(_1814, 0.0)));
        _1878 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1856 : (isnan(_1856) ? 0.0 : max(_1856, 0.0)));
    }
    else
    {
        _1864 = _1552;
        _1865 = _1552;
        _1866 = _1552;
        _1867 = _1552;
        _1868 = _1552;
        _1869 = _1552;
        _1870 = _1552;
        _1871 = _1552;
        _1872 = _1552;
        _1873 = _1552;
        _1874 = _1552;
        _1875 = _1552;
        _1876 = 0.0;
        _1877 = 0.0;
        _1878 = 0.0;
    }
    float _1888 = (cbModelParam._m0[1u].x * (_1876 - _1564)) + _1564;
    float _1889 = (cbModelParam._m0[1u].x * (_1877 - _1565)) + _1565;
    float _1890 = (cbModelParam._m0[1u].x * (_1878 - _1566)) + _1566;
    float _1911 = fma(_1890, cbSceneParam._m0[89u].z, fma(_1889, cbSceneParam._m0[89u].y, _1888 * cbSceneParam._m0[89u].x));
    float _1914 = fma(_1890, cbSceneParam._m0[90u].z, fma(_1889, cbSceneParam._m0[90u].y, _1888 * cbSceneParam._m0[90u].x));
    float _1917 = fma(_1890, cbSceneParam._m0[91u].z, fma(_1889, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1888));
    float _1932 = _1160 * 0.5;
    float _1933 = _1161 * 0.5;
    float _1934 = _1162 * 0.5;
    float _1935 = dot(vec4(_1932, _1933, _1934, 1.0), vec4(_1866, _1869, _1872, _1875));
    float _1938 = dot(vec4(_1932, _1933, _1934, 1.0), vec4(_1865, _1868, _1871, _1874));
    float _1941 = dot(vec4(_1932, _1933, _1934, 1.0), vec4(_1864, _1867, _1870, _1873));
    float _1972;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1948 = dot(vec4(_1932, _1933, _1934, 1.0), vec4(_1551, _1555, _1558, _1561));
        float _1952 = dot(vec4(_1932, _1933, _1934, 1.0), vec4(_1553, _1556, _1559, _1562));
        float _1956 = dot(vec4(_1932, _1933, _1934, 1.0), vec4(_1554, _1557, _1560, _1563));
        float _1963 = dot(vec4(cbModelParam._m0[39u]), vec4(_1932, _1933, _1934, 1.0));
        _1972 = dot(vec3(isnan(0.0) ? _1956 : (isnan(_1956) ? 0.0 : max(_1956, 0.0)), isnan(0.0) ? _1952 : (isnan(_1952) ? 0.0 : max(_1952, 0.0)), isnan(0.0) ? _1948 : (isnan(_1948) ? 0.0 : max(_1948, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1963) ? 0.0 : (isnan(0.0) ? _1963 : max(0.0, _1963))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1972 = 1.0;
    }
    float _1983;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1974 = dot(vec4(cbModelParam._m0[40u]), vec4(_1932, _1933, _1934, 1.0));
        _1983 = dot(vec3(isnan(0.0) ? _1935 : (isnan(_1935) ? 0.0 : max(_1935, 0.0)), isnan(0.0) ? _1938 : (isnan(_1938) ? 0.0 : max(_1938, 0.0)), isnan(0.0) ? _1941 : (isnan(_1941) ? 0.0 : max(_1941, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1974) ? 0.0 : (isnan(0.0) ? _1974 : max(0.0, _1974))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1983 = 1.0;
    }
    float _1987 = (_1983 * cbModelParam._m0[1u].x) + (_1972 * (1.0 - cbModelParam._m0[1u].x));
    float _1997 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1020);
    float _1998 = isnan(_1997) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1997 : min(cbModelParam._m0[25u].z, _1997));
    float _2078;
    float _2080;
    float _2082;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2045 = fma(_1222, cbModelParam._m0[13u].z, fma(_1218, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1214)) + cbModelParam._m0[13u].w;
        float _2049 = fma(_1222, cbModelParam._m0[14u].z, fma(_1218, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1214)) + cbModelParam._m0[14u].w;
        float _2053 = fma(_1222, cbModelParam._m0[15u].z, fma(_1218, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1214)) + cbModelParam._m0[15u].w;
        float _2056 = fma(_1162, cbModelParam._m0[13u].z, fma(_1161, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1160));
        float _2059 = fma(_1162, cbModelParam._m0[14u].z, fma(_1161, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1160));
        float _2062 = fma(_1162, cbModelParam._m0[15u].z, fma(_1161, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1160));
        float _2090;
        if (_2056 > 0.0)
        {
            _2090 = abs((1.0 - _2045) / _2056);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_2056 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_2045 + 1.0) / _2056);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _2090 = frontier_phi_19_17_ladder;
        }
        float _2294;
        if (_2059 > 0.0)
        {
            _2294 = abs((1.0 - _2049) / _2059);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2059 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2049 + 1.0) / _2059);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2294 = frontier_phi_28_24_ladder;
        }
        float _2548;
        if (_2062 > 0.0)
        {
            _2548 = abs((1.0 - _2053) / _2062);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2062 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2053 + 1.0) / _2062);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2548 = frontier_phi_40_35_ladder;
        }
        float _2550 = isnan(_2294) ? _2090 : (isnan(_2090) ? _2294 : min(_2090, _2294));
        float _2551 = isnan(_2548) ? _2550 : (isnan(_2550) ? _2548 : min(_2550, _2548));
        float _2555 = (_2551 * _2056) + _2045;
        float _2556 = (_2551 * _2059) + _2049;
        float _2557 = (_2551 * _2062) + _2053;
        float _2558 = _2551 * 9.9999997473787516355514526367188e-05;
        float _2560 = (-1.0) - _2558;
        float _2562 = _2558 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2557 > _2562) || ((_2557 < _2560) || ((_2556 > _2562) || ((_2556 < _2560) || ((_2555 < _2560) || (_2555 > _2562))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2685 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2557, cbModelParam._m0[9u].z, fma(_2556, cbModelParam._m0[9u].y, _2555 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2557, cbModelParam._m0[10u].z, fma(_2556, cbModelParam._m0[10u].y, _2555 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2557, cbModelParam._m0[11u].z, fma(_2556, cbModelParam._m0[11u].y, _2555 * cbModelParam._m0[11u].x))), _1998);
            frontier_phi_18_40_ladder = _2685.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2685.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2685.x * cbModelParam._m0[1u].y;
        }
        _2078 = frontier_phi_18_40_ladder_2;
        _2080 = frontier_phi_18_40_ladder_1;
        _2082 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _2066 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1160, _1161, _1162), _1998);
        _2078 = _2066.x * cbModelParam._m0[1u].y;
        _2080 = _2066.y * cbModelParam._m0[1u].y;
        _2082 = _2066.z * cbModelParam._m0[1u].y;
    }
    float _2086 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1020);
    float _2087 = isnan(_2086) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2086 : min(cbModelParam._m0[25u].w, _2086));
    float _2178;
    float _2180;
    float _2182;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2142 = fma(_1222, cbModelParam._m0[21u].z, fma(_1218, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1214)) + cbModelParam._m0[21u].w;
        float _2146 = fma(_1222, cbModelParam._m0[22u].z, fma(_1218, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1214)) + cbModelParam._m0[22u].w;
        float _2150 = fma(_1222, cbModelParam._m0[23u].z, fma(_1218, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1214)) + cbModelParam._m0[23u].w;
        float _2153 = fma(_1162, cbModelParam._m0[21u].z, fma(_1161, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1160));
        float _2156 = fma(_1162, cbModelParam._m0[22u].z, fma(_1161, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1160));
        float _2159 = fma(_1162, cbModelParam._m0[23u].z, fma(_1161, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1160));
        float _2299;
        if (_2153 > 0.0)
        {
            _2299 = abs((1.0 - _2142) / _2153);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_2153 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_2142 + 1.0) / _2153);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _2299 = frontier_phi_30_26_ladder;
        }
        float _2575;
        if (_2156 > 0.0)
        {
            _2575 = abs((1.0 - _2146) / _2156);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_2156 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_2146 + 1.0) / _2156);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2575 = frontier_phi_42_37_ladder;
        }
        float _2788;
        if (_2159 > 0.0)
        {
            _2788 = abs((1.0 - _2150) / _2159);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_2159 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_2150 + 1.0) / _2159);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2788 = frontier_phi_51_48_ladder;
        }
        float _2790 = isnan(_2575) ? _2299 : (isnan(_2299) ? _2575 : min(_2299, _2575));
        float _2791 = isnan(_2788) ? _2790 : (isnan(_2790) ? _2788 : min(_2790, _2788));
        float _2795 = (_2791 * _2153) + _2142;
        float _2796 = (_2791 * _2156) + _2146;
        float _2797 = (_2791 * _2159) + _2150;
        float _2798 = _2791 * 9.9999997473787516355514526367188e-05;
        float _2799 = (-1.0) - _2798;
        float _2801 = _2798 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2797 > _2801) || ((_2797 < _2799) || ((_2796 > _2801) || ((_2796 < _2799) || ((_2795 < _2799) || (_2795 > _2801))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3031 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2797, cbModelParam._m0[17u].z, fma(_2796, cbModelParam._m0[17u].y, _2795 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2797, cbModelParam._m0[18u].z, fma(_2796, cbModelParam._m0[18u].y, _2795 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2797, cbModelParam._m0[19u].z, fma(_2796, cbModelParam._m0[19u].y, _2795 * cbModelParam._m0[19u].x))), _2087);
            frontier_phi_27_51_ladder = _3031.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _3031.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _3031.x * cbModelParam._m0[1u].z;
        }
        _2178 = frontier_phi_27_51_ladder_2;
        _2180 = frontier_phi_27_51_ladder_1;
        _2182 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _2162 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1160, _1161, _1162), _2087);
        _2178 = _2162.x * cbModelParam._m0[1u].z;
        _2180 = _2162.y * cbModelParam._m0[1u].z;
        _2182 = _2162.z * cbModelParam._m0[1u].z;
    }
    float _2195 = (((_1185 * _1138) + _1186) * _1152) * ((cbModelParam._m0[1u].w * (_2178 - _2078)) + _2078);
    float _2197 = (((_1185 * _1139) + _1186) * _1152) * ((cbModelParam._m0[1u].w * (_2180 - _2080)) + _2080);
    float _2199 = (((_1185 * _1140) + _1186) * _1152) * ((cbModelParam._m0[1u].w * (_2182 - _2082)) + _2082);
    float _2202 = fma(_2199, cbSceneParam._m0[89u].z, fma(_2197, cbSceneParam._m0[89u].y, _2195 * cbSceneParam._m0[89u].x));
    float _2205 = fma(_2199, cbSceneParam._m0[90u].z, fma(_2197, cbSceneParam._m0[90u].y, _2195 * cbSceneParam._m0[90u].x));
    float _2208 = fma(_2199, cbSceneParam._m0[91u].z, fma(_2197, cbSceneParam._m0[91u].y, _2195 * cbSceneParam._m0[91u].x));
    uvec4 _2218 = floatBitsToUint(cbInstanceData._m0[_1044 + 5u]);
    uint _2220 = _2218.x * 14u;
    uint _2221 = _2220 + 13u;
    float _2228 = _1152 + (-1.0);
    float _2233 = (cbLight._m0[_2221].x * _2228) + 1.0;
    float _2234 = (cbLight._m0[_2221].y * _2228) + 1.0;
    float _2235 = (cbLight._m0[_2221].z * _2228) + 1.0;
    float _2236 = (cbLight._m0[_2221].w * _2228) + 1.0;
    uint _2237 = _2220 + 5u;
    float _2243 = isnan(1.0) ? _2234 : (isnan(_2234) ? 1.0 : min(_2234, 1.0));
    uint _2247 = _2220 + 4u;
    float _2253 = isnan(1.0) ? _2233 : (isnan(_2233) ? 1.0 : min(_2233, 1.0));
    uint _2257 = _2220 | 1u;
    float _2268 = dot(vec3(cbLight._m0[_2220].xyz), vec3(_709, _710, _711));
    float _2271 = dot(vec3(cbLight._m0[_2257].xyz), vec3(_709, _710, _711));
    float _4575 = isnan(0.0) ? _2268 : (isnan(_2268) ? 0.0 : max(_2268, 0.0));
    float _4586 = isnan(0.0) ? _2271 : (isnan(_2271) ? 0.0 : max(_2271, 0.0));
    float _2276 = (isnan(1.0) ? _4575 : (isnan(_4575) ? 1.0 : min(_4575, 1.0))) * 0.3183098733425140380859375;
    float _2278 = (isnan(1.0) ? _4586 : (isnan(_4586) ? 1.0 : min(_4586, 1.0))) * 0.3183098733425140380859375;
    float _2285 = ((cbLight._m0[_2237].x * _2243) * _2278) + ((cbLight._m0[_2247].x * _2253) * _2276);
    float _2286 = ((_2243 * cbLight._m0[_2237].y) * _2278) + ((_2253 * cbLight._m0[_2247].y) * _2276);
    float _2287 = ((_2243 * cbLight._m0[_2237].z) * _2278) + ((_2253 * cbLight._m0[_2247].z) * _2276);
    uvec4 _2291 = floatBitsToUint(cbLight._m0[_2220 + 12u]);
    bool _2293 = _2291.x == 0u;
    float _2304;
    float _2306;
    float _2308;
    if (_2293)
    {
        _2304 = _2285;
        _2306 = _2286;
        _2308 = _2287;
    }
    else
    {
        uint _2312 = _2220 + 6u;
        float _2328 = (dot(vec3(cbLight._m0[_2220 + 2u].xyz), vec3(_709, _710, _711)) * 0.5) + 0.5;
        float _2329 = _2328 * _2328;
        float _4597 = isnan(0.0) ? _2329 : (isnan(_2329) ? 0.0 : max(_2329, 0.0));
        float _2330 = isnan(1.0) ? _4597 : (isnan(_4597) ? 1.0 : min(_4597, 1.0));
        float _2331 = isnan(1.0) ? _2235 : (isnan(_2235) ? 1.0 : min(_2235, 1.0));
        _2304 = (((cbLight._m0[_2312].x * 0.3183098733425140380859375) * _2330) * _2331) + _2285;
        _2306 = (((cbLight._m0[_2312].y * 0.3183098733425140380859375) * _2330) * _2331) + _2286;
        _2308 = (((cbLight._m0[_2312].z * 0.3183098733425140380859375) * _2330) * _2331) + _2287;
    }
    bool _2311 = _2291.y == 0u;
    float _2349;
    float _2351;
    float _2353;
    if (_2311)
    {
        _2349 = _2304;
        _2351 = _2306;
        _2353 = _2308;
    }
    else
    {
        uint _2519 = _2220 + 7u;
        float _2535 = (dot(vec3(cbLight._m0[_2220 + 3u].xyz), vec3(_709, _710, _711)) * 0.5) + 0.5;
        float _2536 = _2535 * _2535;
        float _4613 = isnan(0.0) ? _2536 : (isnan(_2536) ? 0.0 : max(_2536, 0.0));
        float _2537 = isnan(1.0) ? _4613 : (isnan(_4613) ? 1.0 : min(_4613, 1.0));
        float _2538 = isnan(1.0) ? _2236 : (isnan(_2236) ? 1.0 : min(_2236, 1.0));
        _2349 = (((cbLight._m0[_2519].x * 0.3183098733425140380859375) * _2537) * _2538) + _2304;
        _2351 = (((cbLight._m0[_2519].y * 0.3183098733425140380859375) * _2537) * _2538) + _2306;
        _2353 = (((cbLight._m0[_2519].z * 0.3183098733425140380859375) * _2537) * _2538) + _2308;
    }
    uint _2356 = _2220 + 8u;
    float _2369 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2220].w)) * _1020) * 0.949999988079071044921875);
    float _2370 = _2369 * _2369;
    float _2371 = cbLight._m0[_2220].x + _922;
    float _2372 = cbLight._m0[_2220].y + _923;
    float _2373 = cbLight._m0[_2220].z + _924;
    float _2377 = inversesqrt(dot(vec3(_2371, _2372, _2373), vec3(_2371, _2372, _2373)));
    float _2378 = _2377 * _2371;
    float _2379 = _2377 * _2372;
    float _2380 = _2377 * _2373;
    float _2381 = dot(vec3(_709, _710, _711), vec3(cbLight._m0[_2220].xyz));
    float _4629 = isnan(0.0) ? _2381 : (isnan(_2381) ? 0.0 : max(_2381, 0.0));
    float _2384 = isnan(1.0) ? _4629 : (isnan(_4629) ? 1.0 : min(_4629, 1.0));
    float _4640 = isnan(0.0) ? _1153 : (isnan(_1153) ? 0.0 : max(_1153, 0.0));
    float _2385 = isnan(1.0) ? _4640 : (isnan(_4640) ? 1.0 : min(_4640, 1.0));
    float _2386 = dot(vec3(_709, _710, _711), vec3(_2378, _2379, _2380));
    float _4651 = isnan(0.0) ? _2386 : (isnan(_2386) ? 0.0 : max(_2386, 0.0));
    float _2389 = isnan(1.0) ? _4651 : (isnan(_4651) ? 1.0 : min(_4651, 1.0));
    float _2390 = dot(vec3(cbLight._m0[_2220].xyz), vec3(_2378, _2379, _2380));
    float _4662 = isnan(0.0) ? _2390 : (isnan(_2390) ? 0.0 : max(_2390, 0.0));
    float _2394 = _2370 * _2370;
    float _2398 = ((_2389 * _2389) * (_2394 + (-1.0))) + 1.0;
    float _2406 = exp2(log2(1.0 - (isnan(1.0) ? _4662 : (isnan(_4662) ? 1.0 : min(_4662, 1.0)))) * 5.0);
    float _2407 = 0.959999978542327880859375 - _1135;
    float _2409 = 0.959999978542327880859375 - _1136;
    float _2410 = 0.959999978542327880859375 - _1137;
    float _2417 = 1.0 - _2370;
    float _2428 = (0.5 / (((_2385 * ((_2384 * _2417) + _2370)) + 9.9999999392252902907785028219223e-09) + (((_2385 * _2417) + _2370) * _2384))) * _2384;
    float _4673 = isnan(0.0) ? _2428 : (isnan(_2428) ? 0.0 : max(_2428, 0.0));
    float _2430 = (isnan(1.0) ? _4673 : (isnan(_4673) ? 1.0 : min(_4673, 1.0))) * (_2394 / ((_2398 * _2398) * 3.141590118408203125));
    uint _2441 = _2220 + 9u;
    float _2452 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2257].w)) * _1020) * 0.949999988079071044921875);
    float _2453 = _2452 * _2452;
    float _2454 = cbLight._m0[_2257].x + _922;
    float _2455 = cbLight._m0[_2257].y + _923;
    float _2456 = cbLight._m0[_2257].z + _924;
    float _2460 = inversesqrt(dot(vec3(_2454, _2455, _2456), vec3(_2454, _2455, _2456)));
    float _2461 = _2460 * _2454;
    float _2462 = _2460 * _2455;
    float _2463 = _2460 * _2456;
    float _2464 = dot(vec3(_709, _710, _711), vec3(cbLight._m0[_2257].xyz));
    float _4684 = isnan(0.0) ? _2464 : (isnan(_2464) ? 0.0 : max(_2464, 0.0));
    float _2467 = isnan(1.0) ? _4684 : (isnan(_4684) ? 1.0 : min(_4684, 1.0));
    float _2468 = dot(vec3(_709, _710, _711), vec3(_2461, _2462, _2463));
    float _4695 = isnan(0.0) ? _2468 : (isnan(_2468) ? 0.0 : max(_2468, 0.0));
    float _2471 = isnan(1.0) ? _4695 : (isnan(_4695) ? 1.0 : min(_4695, 1.0));
    float _2472 = dot(vec3(cbLight._m0[_2257].xyz), vec3(_2461, _2462, _2463));
    float _4706 = isnan(0.0) ? _2472 : (isnan(_2472) ? 0.0 : max(_2472, 0.0));
    float _2476 = _2453 * _2453;
    float _2480 = ((_2471 * _2471) * (_2476 + (-1.0))) + 1.0;
    float _2487 = exp2(log2(1.0 - (isnan(1.0) ? _4706 : (isnan(_4706) ? 1.0 : min(_4706, 1.0)))) * 5.0);
    float _2494 = 1.0 - _2453;
    float _2504 = (0.5 / (((_2385 * ((_2467 * _2494) + _2453)) + 9.9999999392252902907785028219223e-09) + (((_2385 * _2494) + _2453) * _2467))) * _2467;
    float _4717 = isnan(0.0) ? _2504 : (isnan(_2504) ? 0.0 : max(_2504, 0.0));
    float _2506 = (isnan(1.0) ? _4717 : (isnan(_4717) ? 1.0 : min(_4717, 1.0))) * (_2476 / ((_2480 * _2480) * 3.141590118408203125));
    float _2516 = (((((_2487 * _2407) + _1138) * cbLight._m0[_2441].x) * _2506) * _2243) + (((((_2406 * _2407) + _1138) * cbLight._m0[_2356].x) * _2430) * _2253);
    float _2517 = (((((_2487 * _2409) + _1139) * cbLight._m0[_2441].y) * _2506) * _2243) + (((((_2406 * _2409) + _1139) * cbLight._m0[_2356].y) * _2430) * _2253);
    float _2518 = (((((_2487 * _2410) + _1140) * cbLight._m0[_2441].z) * _2506) * _2243) + (((((_2406 * _2410) + _1140) * cbLight._m0[_2356].z) * _2430) * _2253);
    float _2580;
    float _2582;
    float _2584;
    if (_2293)
    {
        _2580 = _2516;
        _2582 = _2517;
        _2584 = _2518;
    }
    else
    {
        uint _2586 = _2220 + 2u;
        uint _2590 = _2220 + 10u;
        float _2604 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2586].w)) * _1020) * 0.949999988079071044921875);
        float _2605 = _2604 * _2604;
        float _2606 = cbLight._m0[_2586].x + _922;
        float _2607 = cbLight._m0[_2586].y + _923;
        float _2608 = cbLight._m0[_2586].z + _924;
        float _2612 = inversesqrt(dot(vec3(_2606, _2607, _2608), vec3(_2606, _2607, _2608)));
        float _2613 = _2612 * _2606;
        float _2614 = _2612 * _2607;
        float _2615 = _2612 * _2608;
        float _2616 = dot(vec3(_709, _710, _711), vec3(cbLight._m0[_2586].xyz));
        float _4728 = isnan(0.0) ? _2616 : (isnan(_2616) ? 0.0 : max(_2616, 0.0));
        float _2619 = isnan(1.0) ? _4728 : (isnan(_4728) ? 1.0 : min(_4728, 1.0));
        float _2620 = dot(vec3(_709, _710, _711), vec3(_2613, _2614, _2615));
        float _4739 = isnan(0.0) ? _2620 : (isnan(_2620) ? 0.0 : max(_2620, 0.0));
        float _2623 = isnan(1.0) ? _4739 : (isnan(_4739) ? 1.0 : min(_4739, 1.0));
        float _2624 = dot(vec3(cbLight._m0[_2586].xyz), vec3(_2613, _2614, _2615));
        float _4750 = isnan(0.0) ? _2624 : (isnan(_2624) ? 0.0 : max(_2624, 0.0));
        float _2628 = _2605 * _2605;
        float _2632 = ((_2623 * _2623) * (_2628 + (-1.0))) + 1.0;
        float _2639 = exp2(log2(1.0 - (isnan(1.0) ? _4750 : (isnan(_4750) ? 1.0 : min(_4750, 1.0)))) * 5.0);
        float _2646 = 1.0 - _2605;
        float _2656 = (0.5 / (((_2385 * ((_2619 * _2646) + _2605)) + 9.9999999392252902907785028219223e-09) + (((_2385 * _2646) + _2605) * _2619))) * _2619;
        float _4761 = isnan(0.0) ? _2656 : (isnan(_2656) ? 0.0 : max(_2656, 0.0));
        float _2658 = (isnan(1.0) ? _4761 : (isnan(_4761) ? 1.0 : min(_4761, 1.0))) * (_2628 / ((_2632 * _2632) * 3.141590118408203125));
        float _2659 = isnan(1.0) ? _2235 : (isnan(_2235) ? 1.0 : min(_2235, 1.0));
        _2580 = (((((_2639 * _2407) + _1138) * cbLight._m0[_2590].x) * _2658) * _2659) + _2516;
        _2582 = (((((_2639 * _2409) + _1139) * cbLight._m0[_2590].y) * _2658) * _2659) + _2517;
        _2584 = (((((_2639 * _2410) + _1140) * cbLight._m0[_2590].z) * _2658) * _2659) + _2518;
    }
    float _2694;
    float _2696;
    float _2698;
    if (_2311)
    {
        _2694 = _2580;
        _2696 = _2582;
        _2698 = _2584;
    }
    else
    {
        uint _2705 = _2220 + 3u;
        uint _2709 = _2220 + 11u;
        float _2723 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2705].w)) * _1020) * 0.949999988079071044921875);
        float _2724 = _2723 * _2723;
        float _2725 = cbLight._m0[_2705].x + _922;
        float _2726 = cbLight._m0[_2705].y + _923;
        float _2727 = cbLight._m0[_2705].z + _924;
        float _2731 = inversesqrt(dot(vec3(_2725, _2726, _2727), vec3(_2725, _2726, _2727)));
        float _2732 = _2731 * _2725;
        float _2733 = _2731 * _2726;
        float _2734 = _2731 * _2727;
        float _2735 = dot(vec3(_709, _710, _711), vec3(cbLight._m0[_2705].xyz));
        float _4777 = isnan(0.0) ? _2735 : (isnan(_2735) ? 0.0 : max(_2735, 0.0));
        float _2738 = isnan(1.0) ? _4777 : (isnan(_4777) ? 1.0 : min(_4777, 1.0));
        float _2739 = dot(vec3(_709, _710, _711), vec3(_2732, _2733, _2734));
        float _4788 = isnan(0.0) ? _2739 : (isnan(_2739) ? 0.0 : max(_2739, 0.0));
        float _2742 = isnan(1.0) ? _4788 : (isnan(_4788) ? 1.0 : min(_4788, 1.0));
        float _2743 = dot(vec3(cbLight._m0[_2705].xyz), vec3(_2732, _2733, _2734));
        float _4799 = isnan(0.0) ? _2743 : (isnan(_2743) ? 0.0 : max(_2743, 0.0));
        float _2747 = _2724 * _2724;
        float _2751 = ((_2742 * _2742) * (_2747 + (-1.0))) + 1.0;
        float _2758 = exp2(log2(1.0 - (isnan(1.0) ? _4799 : (isnan(_4799) ? 1.0 : min(_4799, 1.0)))) * 5.0);
        float _2765 = 1.0 - _2724;
        float _2775 = (0.5 / (((_2385 * ((_2738 * _2765) + _2724)) + 9.9999999392252902907785028219223e-09) + (((_2385 * _2765) + _2724) * _2738))) * _2738;
        float _4810 = isnan(0.0) ? _2775 : (isnan(_2775) ? 0.0 : max(_2775, 0.0));
        float _2777 = (isnan(1.0) ? _4810 : (isnan(_4810) ? 1.0 : min(_4810, 1.0))) * (_2747 / ((_2751 * _2751) * 3.141590118408203125));
        float _2778 = isnan(1.0) ? _2236 : (isnan(_2236) ? 1.0 : min(_2236, 1.0));
        _2694 = (((((_2758 * _2407) + _1138) * cbLight._m0[_2709].x) * _2777) * _2778) + _2580;
        _2696 = (((((_2758 * _2409) + _1139) * cbLight._m0[_2709].y) * _2777) * _2778) + _2582;
        _2698 = (((((_2758 * _2410) + _1140) * cbLight._m0[_2709].z) * _2777) * _2778) + _2584;
    }
    float _2912;
    float _2914;
    float _2916;
    float _2918;
    float _2920;
    float _2922;
    if (_2218.y == 0u)
    {
        float _2853 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2854 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2853;
        float _2855 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2853;
        float _2856 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2853;
        uvec4 _2868 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2869 = _2868.x;
        uint _2880 = uint((float(_2868.y) * floor(float(uint(cbSceneParam._m0[85u].y * _943) / _2869))) + floor(float(uint(cbSceneParam._m0[85u].x * _942) / _2869)));
        float _2890 = (log2(_2856 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2891 = isnan(0.0) ? _2890 : (isnan(_2890) ? 0.0 : max(_2890, 0.0));
        uint _2894 = uint(isnan(14.0) ? _2891 : (isnan(_2891) ? 14.0 : min(_2891, 14.0)));
        uvec4 _2899 = texelFetch(g_lightClusterGridBuffer, int(((_2894 << 2u) + (_2880 << 6u)) >> 2u));
        uint _2900 = _2899.x;
        uint _2901 = _2868.z;
        float _3036;
        float _3038;
        float _3040;
        float _3042;
        float _3044;
        float _3046;
        if (((((1u << ((_2901 >> 4u) & 15u)) + 4294967295u) & _2900) == 0u) || ((_2901 & 240u) == 0u))
        {
            _3036 = 0.0;
            _3038 = 0.0;
            _3040 = 0.0;
            _3042 = 0.0;
            _3044 = 0.0;
            _3046 = 0.0;
        }
        else
        {
            float _3037;
            float _3039;
            float _3041;
            float _3043;
            float _3045;
            float _3047;
            float _3197 = 0.0;
            float _3198 = 0.0;
            float _3199 = 0.0;
            float _3200 = 0.0;
            float _3201 = 0.0;
            float _3202 = 0.0;
            uint _3203 = 0u;
            uint _3212;
            bool _3213;
            for (;;)
            {
                _3212 = texelFetch(g_lightClassification, int((((_2894 << 5u) + (_2880 << 9u)) + (_3203 << 2u)) >> 2u)).x;
                _3213 = _3212 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_3213)
                {
                    frontier_phi_68_pred = _3199;
                    frontier_phi_68_pred_1 = _3202;
                    frontier_phi_68_pred_2 = _3201;
                    frontier_phi_68_pred_3 = _3200;
                    frontier_phi_68_pred_4 = _3198;
                    frontier_phi_68_pred_5 = _3197;
                }
                else
                {
                    float _3342;
                    float _3343;
                    float _3344;
                    float _3345;
                    float _3346;
                    float _3347;
                    uint _3348;
                    _3342 = _3197;
                    _3343 = _3198;
                    _3344 = _3199;
                    _3345 = _3200;
                    _3346 = _3201;
                    _3347 = _3202;
                    _3348 = _3212;
                    float _3269;
                    float _3270;
                    float _3271;
                    float _3272;
                    float _3273;
                    float _3274;
                    for (;;)
                    {
                        uint _3352 = uint(findLSB(_3348)) + (_3203 << 5u);
                        uint _3349 = (_3348 + 4294967295u) & _3348;
                        uint _3354 = _3352 * 48u;
                        vec4 _3368 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3354)).x, texelFetch(g_PointLightRenderingBuffer, int(_3354 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3354 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3354 + 3u)).x));
                        uint _3374 = (_3352 * 48u) + 4u;
                        vec4 _3387 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3374)).x, texelFetch(g_PointLightRenderingBuffer, int(_3374 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3374 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3374 + 3u)).x));
                        uint _3393 = (_3352 * 48u) + 8u;
                        vec3 _3404 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3393)).x, texelFetch(g_PointLightRenderingBuffer, int(_3393 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3393 + 2u)).x));
                        float _3408 = _3368.x - _2854;
                        float _3409 = _3368.y - _2855;
                        float _3410 = _3368.z - _2856;
                        float _3411 = dot(vec3(_3408, _3409, _3410), vec3(_3408, _3409, _3410));
                        float _3414 = inversesqrt(_3411);
                        float _3415 = _3414 * _3408;
                        float _3416 = _3414 * _3409;
                        float _3417 = _3414 * _3410;
                        float _3418 = dot(vec3(_965, _968, _971), vec3(_3415, _3416, _3417));
                        float _3423 = 1.0 - (_3411 * _3368.w);
                        float _4836 = isnan(0.0) ? _3423 : (isnan(_3423) ? 0.0 : max(_3423, 0.0));
                        float _3424 = isnan(1.0) ? _4836 : (isnan(_4836) ? 1.0 : min(_4836, 1.0));
                        float _3425 = sqrt(_3411) * _3387.w;
                        float _3428 = 1.39999997615814208984375 / (_3425 + 1.39999997615814208984375);
                        float _3429 = _3428 * _3428;
                        float _3432 = ((1.0 - _3429) * _3418) + _3429;
                        float _3435 = _3425 * _3425;
                        float _3438 = ((isnan(0.0) ? _3432 : (isnan(_3432) ? 0.0 : max(_3432, 0.0))) * _3424) / ((_3435 * 0.699999988079071044921875) + 1.0);
                        float _3442 = (-0.0) - _2854;
                        float _3443 = (-0.0) - _2855;
                        float _3444 = (-0.0) - _2856;
                        float _3448 = inversesqrt(dot(vec3(_3442, _3443, _3444), vec3(_3442, _3443, _3444)));
                        float _3449 = _3448 * _3442;
                        float _3450 = _3448 * _3443;
                        float _3451 = _3448 * _3444;
                        float _3459 = exp2(log2(1.0 / ((_3435 * 3.5) + 5.0)) * 0.25);
                        float _3460 = 1.0 - _1168;
                        float _3467 = sqrt(1.0 - ((1.0 - (_3460 * _3460)) * (1.0 - (_3459 * _3459))));
                        float _3468 = _3467 * _3467;
                        float _3469 = _3468 * _3468;
                        float _3470 = _3449 + _3415;
                        float _3471 = _3450 + _3416;
                        float _3472 = _3451 + _3417;
                        float _3476 = inversesqrt(dot(vec3(_3470, _3471, _3472), vec3(_3470, _3471, _3472)));
                        float _3480 = dot(vec3(_965, _968, _971), vec3(_3449, _3450, _3451));
                        float _4852 = isnan(0.0) ? _3480 : (isnan(_3480) ? 0.0 : max(_3480, 0.0));
                        float _3483 = isnan(1.0) ? _4852 : (isnan(_4852) ? 1.0 : min(_4852, 1.0));
                        float _3484 = dot(vec3(_965, _968, _971), vec3(_3476 * _3470, _3476 * _3471, _3476 * _3472));
                        float _4863 = isnan(0.0) ? _3484 : (isnan(_3484) ? 0.0 : max(_3484, 0.0));
                        float _3487 = isnan(1.0) ? _4863 : (isnan(_4863) ? 1.0 : min(_4863, 1.0));
                        float _3491 = ((_3487 * _3487) * (_3469 + (-1.0))) + 1.0;
                        float _3492 = _3428 * _3468;
                        float _3493 = _3492 * _3492;
                        float _3496 = ((1.0 - _3493) * _3418) + _3493;
                        float _4874 = isnan(0.0) ? _3496 : (isnan(_3496) ? 0.0 : max(_3496, 0.0));
                        float _3497 = isnan(1.0) ? _4874 : (isnan(_4874) ? 1.0 : min(_4874, 1.0));
                        float _3498 = 1.0 - _3468;
                        float _3508 = (0.5 / (((_3497 * ((_3483 * _3498) + _3468)) + 9.9999999392252902907785028219223e-09) + (((_3497 * _3498) + _3468) * _3483))) * _3497;
                        float _4885 = isnan(0.0) ? _3508 : (isnan(_3508) ? 0.0 : max(_3508, 0.0));
                        float _3519 = (((_3469 * 3.1415927410125732421875) * (isnan(1.0) ? _4885 : (isnan(_4885) ? 1.0 : min(_4885, 1.0)))) / ((_3491 * _3491) * ((_3435 * 2.1991131305694580078125) + 3.141590118408203125))) * _3424;
                        _3272 = (_3438 * _3387.x) + _3345;
                        _3273 = (_3438 * _3387.y) + _3346;
                        _3274 = (_3438 * _3387.z) + _3347;
                        _3269 = (_3519 * _3404.x) + _3342;
                        _3270 = (_3519 * _3404.y) + _3343;
                        _3271 = (_3519 * _3404.z) + _3344;
                        if (_3349 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3342 = _3269;
                            _3343 = _3270;
                            _3344 = _3271;
                            _3345 = _3272;
                            _3346 = _3273;
                            _3347 = _3274;
                            _3348 = _3349;
                        }
                    }
                    frontier_phi_68_pred = _3271;
                    frontier_phi_68_pred_1 = _3274;
                    frontier_phi_68_pred_2 = _3273;
                    frontier_phi_68_pred_3 = _3272;
                    frontier_phi_68_pred_4 = _3270;
                    frontier_phi_68_pred_5 = _3269;
                }
                _3041 = frontier_phi_68_pred;
                _3047 = frontier_phi_68_pred_1;
                _3045 = frontier_phi_68_pred_2;
                _3043 = frontier_phi_68_pred_3;
                _3039 = frontier_phi_68_pred_4;
                _3037 = frontier_phi_68_pred_5;
                uint _3204 = _3203 + 1u;
                if (_3204 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3197 = _3037;
                    _3198 = _3039;
                    _3199 = _3041;
                    _3200 = _3043;
                    _3201 = _3045;
                    _3202 = _3047;
                    _3203 = _3204;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3036 = _3037;
            _3038 = _3039;
            _3040 = _3041;
            _3042 = _3043;
            _3044 = _3045;
            _3046 = _3047;
        }
        uvec4 _3050 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3051 = _3050.z;
        uint _3053 = (_3051 >> 8u) & 15u;
        float _3165;
        float _3167;
        float _3169;
        float _3171;
        float _3173;
        float _3175;
        if (((4294967295u << _3053) & _2900) == 0u)
        {
            _3165 = _3036;
            _3167 = _3038;
            _3169 = _3040;
            _3171 = _3042;
            _3173 = _3044;
            _3175 = _3046;
        }
        else
        {
            float _3190 = inversesqrt(dot(vec3(_2854, _2855, _2856), vec3(_2854, _2855, _2856)));
            float _3191 = _3190 * _2854;
            float _3192 = _3190 * _2855;
            float _3193 = _3190 * _2856;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_3053 < ((_3051 >> 12u) & 15u))
            {
                float _3166;
                float _3168;
                float _3170;
                float _3172;
                float _3174;
                float _3176;
                float _3325 = _3036;
                float _3326 = _3038;
                float _3327 = _3040;
                float _3328 = _3042;
                float _3329 = _3044;
                float _3330 = _3046;
                uint _3331 = _3053;
                uint _3340;
                bool _3341;
                for (;;)
                {
                    _3340 = texelFetch(g_lightClassification, int((((_2894 << 5u) + (_2880 << 9u)) + (_3331 << 2u)) >> 2u)).x;
                    _3341 = _3340 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_3341)
                    {
                        frontier_phi_79_pred = _3330;
                        frontier_phi_79_pred_1 = _3329;
                        frontier_phi_79_pred_2 = _3328;
                        frontier_phi_79_pred_3 = _3327;
                        frontier_phi_79_pred_4 = _3326;
                        frontier_phi_79_pred_5 = _3325;
                    }
                    else
                    {
                        float _3533;
                        float _3534;
                        float _3535;
                        float _3536;
                        float _3537;
                        float _3538;
                        float _3828;
                        float _3829;
                        float _3830;
                        float _3831;
                        float _3832;
                        float _3833;
                        float _3546 = _3325;
                        float _3547 = _3326;
                        float _3548 = _3327;
                        float _3549 = _3328;
                        float _3550 = _3329;
                        float _3551 = _3330;
                        uint _3552 = _3340;
                        uint _3553;
                        vec4 _3578;
                        float _3579;
                        vec4 _3594;
                        vec3 _3606;
                        vec4 _3621;
                        vec4 _3637;
                        float _3684;
                        bool _3685;
                        for (;;)
                        {
                            uint _3563 = ((_3331 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3552));
                            _3553 = (_3552 + 4294967295u) & _3552;
                            uint _3565 = _3563 * 40u;
                            _3578 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3565)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3565 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3565 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3565 + 3u)).x));
                            _3579 = _3578.w;
                            uint _3581 = (_3563 * 40u) + 4u;
                            _3594 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3581)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3581 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3581 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3581 + 3u)).x));
                            uint _3596 = (_3563 * 40u) + 8u;
                            _3606 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3596)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3596 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3596 + 2u)).x));
                            uint _3608 = (_3563 * 40u) + 16u;
                            _3621 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3608)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3608 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3608 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3608 + 3u)).x));
                            uint _3624 = (_3563 * 40u) + 20u;
                            _3637 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3624)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3624 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3624 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3624 + 3u)).x));
                            uint _3640 = (_3563 * 40u) + 24u;
                            vec4 _3653 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3640)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3640 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3640 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3640 + 3u)).x));
                            uint _3659 = (_3563 * 40u) + 28u;
                            vec4 _3672 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3659)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3659 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3659 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3659 + 3u)).x));
                            _3684 = fma(_2856, _3672.z, fma(_2855, _3672.y, _3672.x * _2854)) + _3672.w;
                            _3685 = !((fma(_2856, _3653.z, fma(_2855, _3653.y, _3653.x * _2854)) + _3653.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_3685)
                            {
                                float _3712 = _3578.x - _2854;
                                float _3713 = _3578.y - _2855;
                                float _3714 = _3578.z - _2856;
                                float _3715 = dot(vec3(_3712, _3713, _3714), vec3(_3712, _3713, _3714));
                                float _3718 = inversesqrt(_3715);
                                float _3719 = _3718 * _3712;
                                float _3720 = _3718 * _3713;
                                float _3721 = _3718 * _3714;
                                float _3725 = 1.0 - (_3715 / (_3579 * _3579));
                                float _4896 = isnan(0.0) ? _3725 : (isnan(_3725) ? 0.0 : max(_3725, 0.0));
                                float _3726 = isnan(1.0) ? _4896 : (isnan(_4896) ? 1.0 : min(_4896, 1.0));
                                float _3730 = sqrt(_3715) * _3594.w;
                                float _3732 = 1.39999997615814208984375 / (_3730 + 1.39999997615814208984375);
                                float _3733 = _3732 * _3732;
                                float _3736 = ((1.0 - _3733) * dot(vec3(_3719, _3720, _3721), vec3(_965, _968, _971))) + _3733;
                                float _3739 = _3730 * _3730;
                                float _3743 = (fma(_2856, _3621.z, fma(_2855, _3621.y, _3621.x * _2854)) + _3621.w) / _3684;
                                float _3744 = (fma(_2856, _3637.z, fma(_2855, _3637.y, _3637.x * _2854)) + _3637.w) / _3684;
                                float _3748 = 1.0 - dot(vec2(_3743, _3744), vec2(_3743, _3744));
                                float _4912 = isnan(0.0) ? _3748 : (isnan(_3748) ? 0.0 : max(_3748, 0.0));
                                float _3749 = isnan(1.0) ? _4912 : (isnan(_4912) ? 1.0 : min(_4912, 1.0));
                                float _3750 = _3749 * (((isnan(0.0) ? _3736 : (isnan(_3736) ? 0.0 : max(_3736, 0.0))) * _3726) / ((_3739 * 0.699999988079071044921875) + 1.0));
                                float _3762 = exp2(log2(1.0 / ((_3739 * 3.5) + 5.0)) * 0.25);
                                float _3763 = 1.0 - _1168;
                                float _3770 = sqrt(1.0 - ((1.0 - (_3763 * _3763)) * (1.0 - (_3762 * _3762))));
                                float _3771 = _3770 * _3770;
                                float _3772 = _3771 * _3771;
                                float _3773 = _3719 - _3191;
                                float _3774 = _3720 - _3192;
                                float _3775 = _3721 - _3193;
                                float _3779 = inversesqrt(dot(vec3(_3773, _3774, _3775), vec3(_3773, _3774, _3775)));
                                float _3783 = dot(vec3(_965, _968, _971), vec3((-0.0) - _3191, (-0.0) - _3192, (-0.0) - _3193));
                                float _4923 = isnan(0.0) ? _3783 : (isnan(_3783) ? 0.0 : max(_3783, 0.0));
                                float _3786 = isnan(1.0) ? _4923 : (isnan(_4923) ? 1.0 : min(_4923, 1.0));
                                float _3787 = dot(vec3(_965, _968, _971), vec3(_3779 * _3773, _3779 * _3774, _3779 * _3775));
                                float _4934 = isnan(0.0) ? _3787 : (isnan(_3787) ? 0.0 : max(_3787, 0.0));
                                float _3790 = isnan(1.0) ? _4934 : (isnan(_4934) ? 1.0 : min(_4934, 1.0));
                                float _3794 = ((_3790 * _3790) * (_3772 + (-1.0))) + 1.0;
                                float _3795 = _3732 * _3771;
                                float _3796 = _3795 * _3795;
                                float _3802 = ((1.0 - _3796) * dot(vec3(_965, _968, _971), vec3(_3719, _3720, _3721))) + _3796;
                                float _4945 = isnan(0.0) ? _3802 : (isnan(_3802) ? 0.0 : max(_3802, 0.0));
                                float _3803 = isnan(1.0) ? _4945 : (isnan(_4945) ? 1.0 : min(_4945, 1.0));
                                float _3804 = 1.0 - _3771;
                                float _3814 = (0.5 / (((_3803 * ((_3786 * _3804) + _3771)) + 9.9999999392252902907785028219223e-09) + (((_3803 * _3804) + _3771) * _3786))) * _3803;
                                float _4956 = isnan(0.0) ? _3814 : (isnan(_3814) ? 0.0 : max(_3814, 0.0));
                                float _3824 = (_3749 * _3726) * (((_3772 * 3.1415927410125732421875) * (isnan(1.0) ? _4956 : (isnan(_4956) ? 1.0 : min(_4956, 1.0)))) / ((_3794 * _3794) * ((_3739 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3750 * _3594.z;
                                frontier_phi_85_pred_1 = _3750 * _3594.y;
                                frontier_phi_85_pred_2 = _3750 * _3594.x;
                                frontier_phi_85_pred_3 = _3824 * _3606.z;
                                frontier_phi_85_pred_4 = _3824 * _3606.y;
                                frontier_phi_85_pred_5 = _3824 * _3606.x;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3833 = frontier_phi_85_pred;
                            _3832 = frontier_phi_85_pred_1;
                            _3831 = frontier_phi_85_pred_2;
                            _3830 = frontier_phi_85_pred_3;
                            _3829 = frontier_phi_85_pred_4;
                            _3828 = frontier_phi_85_pred_5;
                            _3536 = _3831 + _3549;
                            _3537 = _3832 + _3550;
                            _3538 = _3833 + _3551;
                            _3533 = _3828 + _3546;
                            _3534 = _3829 + _3547;
                            _3535 = _3830 + _3548;
                            if (_3553 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3546 = _3533;
                                _3547 = _3534;
                                _3548 = _3535;
                                _3549 = _3536;
                                _3550 = _3537;
                                _3551 = _3538;
                                _3552 = _3553;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _3538;
                        frontier_phi_79_pred_1 = _3537;
                        frontier_phi_79_pred_2 = _3536;
                        frontier_phi_79_pred_3 = _3535;
                        frontier_phi_79_pred_4 = _3534;
                        frontier_phi_79_pred_5 = _3533;
                    }
                    _3176 = frontier_phi_79_pred;
                    _3174 = frontier_phi_79_pred_1;
                    _3172 = frontier_phi_79_pred_2;
                    _3170 = frontier_phi_79_pred_3;
                    _3168 = frontier_phi_79_pred_4;
                    _3166 = frontier_phi_79_pred_5;
                    uint _3332 = _3331 + 1u;
                    if (_3332 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3325 = _3166;
                        _3326 = _3168;
                        _3327 = _3170;
                        _3328 = _3172;
                        _3329 = _3174;
                        _3330 = _3176;
                        _3331 = _3332;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3172;
                frontier_phi_60_61_ladder_1 = _3176;
                frontier_phi_60_61_ladder_2 = _3174;
                frontier_phi_60_61_ladder_3 = _3170;
                frontier_phi_60_61_ladder_4 = _3168;
                frontier_phi_60_61_ladder_5 = _3166;
            }
            else
            {
                frontier_phi_60_61_ladder = _3042;
                frontier_phi_60_61_ladder_1 = _3046;
                frontier_phi_60_61_ladder_2 = _3044;
                frontier_phi_60_61_ladder_3 = _3040;
                frontier_phi_60_61_ladder_4 = _3038;
                frontier_phi_60_61_ladder_5 = _3036;
            }
            _3165 = frontier_phi_60_61_ladder_5;
            _3167 = frontier_phi_60_61_ladder_4;
            _3169 = frontier_phi_60_61_ladder_3;
            _3171 = frontier_phi_60_61_ladder;
            _3173 = frontier_phi_60_61_ladder_2;
            _3175 = frontier_phi_60_61_ladder_1;
        }
        float _3180 = isnan(1.0) ? _1152 : (isnan(_1152) ? 1.0 : min(_1152, 1.0));
        _2912 = (_3180 * _3171) + _2349;
        _2914 = (_3180 * _3173) + _2351;
        _2916 = (_3180 * _3175) + _2353;
        _2918 = ((_3165 * _1138) * _3180) + _2694;
        _2920 = ((_3167 * _1139) * _3180) + _2696;
        _2922 = ((_3169 * _1140) * _3180) + _2698;
    }
    else
    {
        _2912 = _2349;
        _2914 = _2351;
        _2916 = _2353;
        _2918 = _2694;
        _2920 = _2696;
        _2922 = _2698;
    }
    uint _2928 = _1045 + uint(cbMatDynParam._m0[0u].w);
    float _2934 = cbInstanceData._m0[_2928].x * (((((cbMatDynParam._m0[8u].x - cbMatDynParam._m0[7u].x) * _751) + cbMatDynParam._m0[7u].x) + (((((cbMtdParam._m0[12u].x * cbMtdParam._m0[16u].z) * cbMtdParam._m0[15u].w) * _641) * _654.x) * _780)) + (((_809 - (_809 * _717)) + (cbMatDynParam._m0[11u].x * _840)) * cbMatDynParam._m0[9u].x));
    float _2935 = cbInstanceData._m0[_2928].y * (((((cbMatDynParam._m0[8u].y - cbMatDynParam._m0[7u].y) * _751) + cbMatDynParam._m0[7u].y) + (((((cbMtdParam._m0[12u].y * cbMtdParam._m0[16u].z) * cbMtdParam._m0[15u].w) * _641) * _654.y) * _780)) + (((_811 - (_811 * _717)) + (cbMatDynParam._m0[11u].y * _840)) * cbMatDynParam._m0[9u].y));
    float _2936 = cbInstanceData._m0[_2928].z * (((((cbMatDynParam._m0[8u].z - cbMatDynParam._m0[7u].z) * _751) + cbMatDynParam._m0[7u].z) + (((((cbMtdParam._m0[12u].z * cbMtdParam._m0[16u].z) * cbMtdParam._m0[15u].w) * _641) * _654.z) * _780)) + (((_813 - (_813 * _717)) + (cbMatDynParam._m0[11u].z * _840)) * cbMatDynParam._m0[9u].z));
    float _4972 = isnan(0.0) ? _1129 : (isnan(_1129) ? 0.0 : max(_1129, 0.0));
    float _4983 = isnan(0.0) ? _1130 : (isnan(_1130) ? 0.0 : max(_1130, 0.0));
    float _4994 = isnan(0.0) ? _1131 : (isnan(_1131) ? 0.0 : max(_1131, 0.0));
    float _5005 = isnan(0.0) ? _712 : (isnan(_712) ? 0.0 : max(_712, 0.0));
    float _2954 = (((isnan(1.0) ? _4972 : (isnan(_4972) ? 1.0 : min(_4972, 1.0))) * (_2912 + ((isnan(0.0) ? _1911 : (isnan(_1911) ? 0.0 : max(_1911, 0.0))) * _1152))) + ((_2918 + ((isnan(0.0) ? _2202 : (isnan(_2202) ? 0.0 : max(_2202, 0.0))) * _1987)) * cbPerFrame._m0[3u].x)) + _2934;
    float _2956 = (_2935 + ((_2920 + ((isnan(0.0) ? _2205 : (isnan(_2205) ? 0.0 : max(_2205, 0.0))) * _1987)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4983 : (isnan(_4983) ? 1.0 : min(_4983, 1.0))) * (_2914 + ((isnan(0.0) ? _1914 : (isnan(_1914) ? 0.0 : max(_1914, 0.0))) * _1152)));
    float _2958 = (_2936 + ((_2922 + ((isnan(0.0) ? _2208 : (isnan(_2208) ? 0.0 : max(_2208, 0.0))) * _1987)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4994 : (isnan(_4994) ? 1.0 : min(_4994, 1.0))) * (_2916 + ((isnan(0.0) ? _1917 : (isnan(_1917) ? 0.0 : max(_1917, 0.0))) * _1152)));
    float _2959 = isnan(0.0) ? _2954 : (isnan(_2954) ? 0.0 : max(_2954, 0.0));
    float _2960 = isnan(0.0) ? _2956 : (isnan(_2956) ? 0.0 : max(_2956, 0.0));
    float _2961 = isnan(0.0) ? _2958 : (isnan(_2958) ? 0.0 : max(_2958, 0.0));
    float _2967 = cbMtdParam._m0[2u].x * _2934;
    float _2968 = cbMtdParam._m0[2u].y * _2935;
    float _2969 = cbMtdParam._m0[2u].z * _2936;
    float _2976 = ((cbMtdParam._m0[2u].w - cbMatDynParam._m0[12u].y) * _780) + cbMatDynParam._m0[12u].y;
    float _2981 = cbInstanceData._m0[_1044 + 6u].w * (isnan(1.0) ? _5005 : (isnan(_5005) ? 1.0 : min(_5005, 1.0)));
    float _2986 = _942 / cbSceneParam._m0[86u].x;
    float _2987 = _943 / cbSceneParam._m0[86u].y;
    vec4 _3001 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2986, _2987, (log2((isnan(cbSceneParam._m0[77u].w) ? _866 : (isnan(_866) ? cbSceneParam._m0[77u].w : min(_866, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3003 = _3001.x;
    float _3004 = _3001.y;
    float _3005 = _3001.z;
    float _3006 = _3001.w;
    float _3098;
    float _3100;
    float _3102;
    float _3104;
    if (_866 > cbSceneParam._m0[78u].w)
    {
        float _3061 = isnan(_866) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _866 : min(cbSceneParam._m0[80u].w, _866));
        float _3062 = _3061 / _866;
        float _3073 = _3062 * _915;
        float _3074 = _916 * _3062;
        float _3075 = (-0.0) - _3074;
        float _3076 = _3062 * _917;
        float _3078 = (cbSceneParam._m0[77u].w * _3075) / _3061;
        float _3079 = _3078 + cbSceneParam._m0[79u].w;
        float _3080 = cbSceneParam._m0[79u].w - _3074;
        float _3086 = sqrt(((_3073 * _3073) + (_3074 * _3074)) + (_3076 * _3076));
        float _3089 = (1.0 - (cbSceneParam._m0[77u].w / _3061)) * _3086;
        float _3094 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3096 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3282;
        if (abs((_3075 - _3078) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3282 = ((((_3079 > 0.0) ? exp2(_3094 * _3079) : (2.0 - exp2(_3096 * _3079))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3089;
        }
        else
        {
            float _3226 = 1.0 / cbSceneParam._m0[80u].x;
            float _3227 = isnan(_3080) ? _3079 : (isnan(_3079) ? _3080 : max(_3079, _3080));
            float _3228 = isnan(_3080) ? _3079 : (isnan(_3079) ? _3080 : min(_3079, _3080));
            float _3237 = isnan(0.0) ? _3227 : (isnan(_3227) ? 0.0 : min(_3227, 0.0));
            float _3238 = isnan(0.0) ? _3228 : (isnan(_3228) ? 0.0 : min(_3228, 0.0));
            _3282 = ((abs(_3086 / _3075) * cbSceneParam._m0[80u].y) * ((((_3237 - _3238) * 2.0) - ((exp2(_3094 * (isnan(0.0) ? _3227 : (isnan(_3227) ? 0.0 : max(_3227, 0.0)))) - exp2(_3094 * (isnan(0.0) ? _3228 : (isnan(_3228) ? 0.0 : max(_3228, 0.0))))) * _3226)) - ((exp2(_3096 * _3237) - exp2(_3096 * _3238)) * _3226))) + (_3089 * cbSceneParam._m0[80u].z);
        }
        vec4 _3284 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2986, _2987, 1.0), 0.0);
        float _3293 = exp2((_3282 * (-1.44269502162933349609375)) * (1.0 - _3284.w));
        float _3294 = log2(_3293);
        float _3310 = log2(_3006);
        _3098 = (exp2(_3310 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3294 * cbSceneParam._m0[78u].x)) * _3284.x) / cbSceneParam._m0[78u].x)) + _3003;
        _3100 = (exp2(_3310 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3294 * cbSceneParam._m0[78u].y)) * _3284.y) / cbSceneParam._m0[78u].y)) + _3004;
        _3102 = (exp2(_3310 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3294 * cbSceneParam._m0[78u].z)) * _3284.z) / cbSceneParam._m0[78u].z)) + _3005;
        _3104 = _3293 * _3006;
    }
    else
    {
        _3098 = _3003;
        _3100 = _3004;
        _3102 = _3005;
        _3104 = _3006;
    }
    bool _3320;
    vec4 _3114;
    vec4 _3136;
    float _3138;
    float _3142;
    float _3143;
    float _3144;
    float _3147;
    float _3150;
    float _3153;
    float _3154;
    bool _3164;
    for (;;)
    {
        _3114 = cbMatDynParam._m0[0u];
        float _3116 = roundEven(_3114.y);
        bool _3117 = _3116 == 3.0;
        float _3118 = log2(_3104);
        float _3122 = exp2(_3118 * cbSceneParam._m0[78u].x);
        float _3123 = exp2(_3118 * cbSceneParam._m0[78u].y);
        float _3124 = exp2(_3118 * cbSceneParam._m0[78u].z);
        float _3125 = _3122 * _2959;
        float _3126 = _3123 * _2960;
        float _3127 = _3124 * _2961;
        float _3134 = _931 + (-0.5);
        _3136 = cbMtdParam._m0[1u];
        _3138 = _3136.y * _3134;
        float _3141 = (_3116 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3142 = _3141 * (_3117 ? _3125 : (_3125 + (cbSceneParam._m0[72u].w * _3098)));
        _3143 = _3141 * (_3117 ? _3126 : (_3126 + (cbSceneParam._m0[72u].w * _3100)));
        _3144 = _3141 * (_3117 ? _3127 : (_3127 + (cbSceneParam._m0[72u].w * _3102)));
        _3147 = ((_2967 * _2976) * _3122) * _3141;
        _3150 = ((_2968 * _2976) * _3123) * _3141;
        _3153 = ((_2969 * _2976) * _3124) * _3141;
        _3154 = _3134 * 0.999000012874603271484375;
        _3164 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3164)
        {
            if ((cbInstanceData._m0[_1044 + 7u].x + _3154) < 0.5)
            {
                _3320 = true;
                break;
            }
        }
        uint _3261 = _1045 + uint(_3114.w);
        if ((cbInstanceData._m0[_3261].w < 1.0) && ((cbInstanceData._m0[_3261].w + _3154) < 0.5))
        {
            _3320 = true;
            break;
        }
        if ((_3138 + _490) < _3136.x)
        {
            _3320 = true;
            break;
        }
        _3320 = false;
        break;
    }
    float _3524;
    if (_3320)
    {
        discard_state = true;
        _3524 = 0.0;
    }
    else
    {
        _3524 = _2981;
    }
    SV_Target.x = _3142;
    SV_Target.y = _3143;
    SV_Target.z = _3144;
    SV_Target.w = _3524;
    SV_Target_1.x = _3147;
    SV_Target_1.y = _3150;
    SV_Target_1.z = _3153;
    SV_Target_1.w = _2981;
    discard_exit();
}


