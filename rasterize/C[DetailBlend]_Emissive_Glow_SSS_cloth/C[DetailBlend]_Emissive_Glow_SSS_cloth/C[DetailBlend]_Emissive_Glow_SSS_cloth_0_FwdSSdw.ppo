#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[18];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_1;
layout(set = 0, binding = 1) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_7;
layout(set = 0, binding = 10) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_6;
layout(set = 0, binding = 2) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_0;
layout(set = 0, binding = 4) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_11;
layout(set = 0, binding = 7) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1100;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _201 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _202 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _203 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _209 = inversesqrt(dot(vec3(_201, _202, _203), vec3(_201, _202, _203)));
    float _216 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _217 = _216 * NORMAL.x;
    float _218 = _216 * NORMAL.y;
    float _219 = _216 * NORMAL.z;
    float _223 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _231;
    float _232;
    float _233;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _231 = (-0.0) - _217;
        _232 = (-0.0) - _218;
        _233 = (-0.0) - _219;
    }
    else
    {
        _231 = _217;
        _232 = _218;
        _233 = _219;
    }
    vec4 _246 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    vec4 _263 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _286 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _295 = ((_263.x * 4.55000019073486328125) * cbMtdParam._m0[9u].x) * _286.x;
    float _298 = ((_263.y * 4.55000019073486328125) * cbMtdParam._m0[9u].y) * _286.y;
    float _301 = ((_263.z * 4.55000019073486328125) * cbMtdParam._m0[9u].z) * _286.z;
    float _302 = _286.w * _263.w;
    float _322 = cbMtdParam._m0[16u].x + texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w)).x;
    vec4 _335 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w));
    float _347 = (_246.z * 2.0) * (cbMtdParam._m0[14u].x + _335.z);
    float _365 = abs((fract(cbMtdParam._m0[15u].x * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _3503 = isnan(0.0) ? _365 : (isnan(_365) ? 0.0 : max(_365, 0.0));
    float _367 = isnan(1.0) ? _3503 : (isnan(_3503) ? 1.0 : min(_3503, 1.0));
    float _372 = (_367 * _367) * (3.0 - (_367 * 2.0));
    vec4 _385 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _393 = (_246.x * 2.0) + (-1.0);
    float _394 = (_246.y * 2.0) + (-1.0);
    float _395 = dot(vec2(_393, _394), vec2(_393, _394));
    float _3514 = isnan(0.0) ? _395 : (isnan(_395) ? 0.0 : max(_395, 0.0));
    float _400 = sqrt(1.0 - (isnan(1.0) ? _3514 : (isnan(_3514) ? 1.0 : min(_3514, 1.0))));
    float _407 = (cbMtdParam._m0[14u].z * ((_335.x * 2.0) + (-1.0))) + _393;
    float _408 = (cbMtdParam._m0[14u].z * ((_335.y * 2.0) + (-1.0))) + _394;
    float _411 = fma(_400, _231, fma(_408, _223 * TANGENT.x, (_209 * _201) * _407));
    float _414 = fma(_400, _232, fma(_408, _223 * TANGENT.y, (_209 * _202) * _407));
    float _417 = fma(_400, _233, fma(_408, _223 * TANGENT.z, (_209 * _203) * _407));
    float _421 = inversesqrt(dot(vec3(_411, _414, _417), vec3(_411, _414, _417)));
    float _422 = _421 * _411;
    float _423 = _421 * _414;
    float _424 = _421 * _417;
    float _3525 = isnan(0.0) ? _302 : (isnan(_302) ? 0.0 : max(_302, 0.0));
    float _425 = isnan(1.0) ? _3525 : (isnan(_3525) ? 1.0 : min(_3525, 1.0));
    float _3536 = isnan(0.0) ? _347 : (isnan(_347) ? 0.0 : max(_347, 0.0));
    float _426 = isnan(1.0) ? _3536 : (isnan(_3536) ? 1.0 : min(_3536, 1.0));
    float _3547 = isnan(0.0) ? _295 : (isnan(_295) ? 0.0 : max(_295, 0.0));
    float _427 = isnan(1.0) ? _3547 : (isnan(_3547) ? 1.0 : min(_3547, 1.0));
    float _3558 = isnan(0.0) ? _298 : (isnan(_298) ? 0.0 : max(_298, 0.0));
    float _428 = isnan(1.0) ? _3558 : (isnan(_3558) ? 1.0 : min(_3558, 1.0));
    float _3569 = isnan(0.0) ? _301 : (isnan(_301) ? 0.0 : max(_301, 0.0));
    float _429 = isnan(1.0) ? _3569 : (isnan(_3569) ? 1.0 : min(_3569, 1.0));
    float _3580 = isnan(0.0) ? _322 : (isnan(_322) ? 0.0 : max(_322, 0.0));
    float _430 = isnan(1.0) ? _3580 : (isnan(_3580) ? 1.0 : min(_3580, 1.0));
    float _446 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _488 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _498 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _488);
    float _499 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _488);
    float _500 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _488);
    float _504 = inversesqrt(dot(vec3(_498, _499, _500), vec3(_498, _499, _500)));
    float _505 = _498 * _504;
    float _506 = _499 * _504;
    float _507 = _500 * _504;
    float _513 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _514 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _516 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _518 = _516.w;
    float _538 = fma(_424, cbSceneParam._m0[5u].z, fma(_423, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _422));
    float _541 = fma(_424, cbSceneParam._m0[6u].z, fma(_423, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _422));
    float _544 = fma(_424, cbSceneParam._m0[7u].z, fma(_423, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _422));
    vec4 _546 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _548 = _546.x;
    float _560 = (((_546.y - _426) + (_546.w * _426)) * cbMtdParam._m0[3u].x) + _426;
    float _577 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3(cbMtdParam._m0[3u].x * (_548 * _548)), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w)).z;
    float _585 = (((cbMatDynParam._m0[15u].x - _430) * cbMatDynParam._m0[15u].w) * _577) + _430;
    float _593 = ((_577 * cbMatDynParam._m0[16u].z) * (cbMatDynParam._m0[16u].x - _560)) + _560;
    uint _617 = uint(roundEven(NORMAL.w)) * 13u;
    uint _619 = _617 + 9u;
    uint _620 = _619 + uint(cbMatDynParam._m0[0u].w);
    float _626 = (cbMtdParam._m0[0u].x * _427) * cbInstanceData._m0[_620].x;
    float _627 = (cbMtdParam._m0[0u].y * _428) * cbInstanceData._m0[_620].y;
    float _628 = (cbMtdParam._m0[0u].z * _429) * cbInstanceData._m0[_620].z;
    float _3591 = isnan(0.0) ? _626 : (isnan(_626) ? 0.0 : max(_626, 0.0));
    float _629 = isnan(1.0) ? _3591 : (isnan(_3591) ? 1.0 : min(_3591, 1.0));
    float _3602 = isnan(0.0) ? _627 : (isnan(_627) ? 0.0 : max(_627, 0.0));
    float _630 = isnan(1.0) ? _3602 : (isnan(_3602) ? 1.0 : min(_3602, 1.0));
    float _3613 = isnan(0.0) ? _628 : (isnan(_628) ? 0.0 : max(_628, 0.0));
    float _631 = isnan(1.0) ? _3613 : (isnan(_3613) ? 1.0 : min(_3613, 1.0));
    vec4 _632 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _637 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _648 = (((_637.x - _585) + (_637.w * _585)) * cbMtdParam._m0[3u].x) + _585;
    float _661 = (cbMtdParam._m0[3u].x * (((_629 * _518) - _629) + _632.x)) + _629;
    float _662 = (cbMtdParam._m0[3u].x * (((_630 * _518) - _630) + _632.y)) + _630;
    float _663 = (cbMtdParam._m0[3u].x * (((_631 * _518) - _631) + _632.z)) + _631;
    vec4 _664 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _677 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3((_585 * (_427 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625, (_585 * (_428 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625, (_585 * (_429 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * _664.z;
    float _681 = _677 * cbMatDynParam._m0[13u].w;
    float _691 = (_681 * (cbMatDynParam._m0[13u].x - _661)) + _661;
    float _692 = (_681 * (cbMatDynParam._m0[13u].y - _662)) + _662;
    float _693 = (_681 * (cbMatDynParam._m0[13u].z - _663)) + _663;
    float _701 = ((_677 * cbMatDynParam._m0[15u].w) * (cbMatDynParam._m0[15u].x - _648)) + _648;
    float _702 = 1.0 - _701;
    float _703 = _702 * _691;
    float _704 = _702 * _692;
    float _705 = _702 * _693;
    float _709 = (_691 + (-0.039999999105930328369140625)) * _701;
    float _710 = (_692 + (-0.039999999105930328369140625)) * _701;
    float _711 = (_693 + (-0.039999999105930328369140625)) * _701;
    float _712 = _709 + 0.039999999105930328369140625;
    float _713 = _710 + 0.039999999105930328369140625;
    float _714 = _711 + 0.039999999105930328369140625;
    vec4 _723 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _513, cbSceneParam._m0[86u].y * _514));
    float _726 = _723.x * TEXCOORD_4;
    float _727 = dot(vec3(_422, _423, _424), vec3(_505, _506, _507));
    float _730 = _727 * 2.0;
    float _734 = (_730 * _422) - _505;
    float _735 = (_730 * _423) - _506;
    float _736 = (_730 * _424) - _507;
    float _740 = abs(dot(vec3(_505, _506, _507), vec3(_422, _423, _424)));
    float _3624 = isnan(0.0) ? _740 : (isnan(_740) ? 0.0 : max(_740, 0.0));
    float _742 = sqrt(_593);
    float _754 = exp2((_742 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3624 : (isnan(_3624) ? 1.0 : min(_3624, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_742 * 3.0));
    float _760 = (1.0 - _754) * ((_742 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _761 = _754 * _742;
    float _789 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _793 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _797 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1099;
    float _1101;
    float _1102;
    float _1103;
    float _1104;
    float _1105;
    float _1106;
    float _1107;
    float _1108;
    float _1109;
    float _1110;
    float _1111;
    float _1112;
    float _1113;
    float _1114;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _824 = fma(_797, cbModelParam._m0[26u].z, fma(_793, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _789));
        float _828 = fma(_797, cbModelParam._m0[27u].z, fma(_793, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _789));
        float _832 = fma(_797, cbModelParam._m0[28u].z, fma(_793, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _789));
        float _857 = _789 + _422;
        float _858 = _793 + _423;
        float _859 = _797 + _424;
        float _869 = fma(_859, cbModelParam._m0[26u].z, fma(_858, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _857)) - _824;
        float _870 = fma(_859, cbModelParam._m0[27u].z, fma(_858, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _857)) - _828;
        float _871 = fma(_859, cbModelParam._m0[28u].z, fma(_858, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _857)) - _832;
        float _875 = inversesqrt(dot(vec3(_869, _870, _871), vec3(_869, _870, _871)));
        float _888 = ((_875 * _869) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_824 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _889 = ((_875 * _870) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_828 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _890 = ((_875 * _871) / cbModelParam._m0[34u].z) + ((((((_832 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _893 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_888, _889, _890), 0.0);
        vec4 _900 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_888, _889, _890), 0.0);
        vec4 _907 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_888, _889, _890), 0.0);
        vec4 _914 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_888, _889, _890), 0.0);
        float _927 = exp2((_893.w + (-0.5)) * 20.0) * 2.0;
        float _928 = _927 * (_893.x + (-0.5));
        float _929 = _927 * (_893.y + (-0.5));
        float _930 = _927 * (_893.z + (-0.5));
        float _937 = exp2((_900.w + (-0.5)) * 20.0) * 2.0;
        float _938 = _937 * (_900.x + (-0.5));
        float _939 = _937 * (_900.y + (-0.5));
        float _940 = _937 * (_900.z + (-0.5));
        float _947 = exp2((_907.w + (-0.5)) * 20.0) * 2.0;
        float _948 = _947 * (_907.x + (-0.5));
        float _949 = _947 * (_907.y + (-0.5));
        float _950 = _947 * (_907.z + (-0.5));
        float _957 = exp2((_914.w + (-0.5)) * 20.0) * 2.0;
        float _958 = _957 * (_914.x + (-0.5));
        float _959 = _957 * (_914.y + (-0.5));
        float _960 = _957 * (_914.z + (-0.5));
        float _961 = isnan(0.0) ? _958 : (isnan(_958) ? 0.0 : max(_958, 0.0));
        float _962 = isnan(0.0) ? _959 : (isnan(_959) ? 0.0 : max(_959, 0.0));
        float _963 = isnan(0.0) ? _960 : (isnan(_960) ? 0.0 : max(_960, 0.0));
        float _964 = _928 * 0.5;
        float _965 = _938 * 0.5;
        float _966 = _948 * 0.5;
        float _967 = dot(vec3(_964, _965, _966), vec3(_964, _965, _966));
        float _972 = (_967 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_967);
        float _981 = (dot(vec3(_422, _423, _424), vec3(_972 * _964, _972 * _965, _972 * _966)) + 1.0) * 0.5;
        float _3650 = isnan(0.0) ? _981 : (isnan(_981) ? 0.0 : max(_981, 0.0));
        float _991 = sqrt(((_965 * _965) + (_964 * _964)) + (_966 * _966)) / (_961 + 9.9999997473787516355514526367188e-06);
        float _3661 = isnan(0.0) ? _991 : (isnan(_991) ? 0.0 : max(_991, 0.0));
        float _992 = isnan(1.0) ? _3661 : (isnan(_3661) ? 1.0 : min(_3661, 1.0));
        float _993 = _992 * 2.0;
        float _997 = (1.0 - _992) / (_992 + 1.0);
        float _3672 = isnan(0.0) ? _997 : (isnan(_997) ? 0.0 : max(_997, 0.0));
        float _998 = isnan(1.0) ? _3672 : (isnan(_3672) ? 1.0 : min(_3672, 1.0));
        float _1007 = ((((1.0 - _998) * (_993 + 2.0)) * exp2(log2(isnan(1.0) ? _3650 : (isnan(_3650) ? 1.0 : min(_3650, 1.0))) * (_993 + 1.0))) + _998) * _961;
        float _1008 = _929 * 0.5;
        float _1009 = _939 * 0.5;
        float _1010 = _949 * 0.5;
        float _1011 = dot(vec3(_1008, _1009, _1010), vec3(_1008, _1009, _1010));
        float _1016 = (_1011 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1011);
        float _1024 = (dot(vec3(_422, _423, _424), vec3(_1016 * _1008, _1016 * _1009, _1016 * _1010)) + 1.0) * 0.5;
        float _3683 = isnan(0.0) ? _1024 : (isnan(_1024) ? 0.0 : max(_1024, 0.0));
        float _1033 = sqrt(((_1009 * _1009) + (_1008 * _1008)) + (_1010 * _1010)) / (_962 + 9.9999997473787516355514526367188e-06);
        float _3694 = isnan(0.0) ? _1033 : (isnan(_1033) ? 0.0 : max(_1033, 0.0));
        float _1034 = isnan(1.0) ? _3694 : (isnan(_3694) ? 1.0 : min(_3694, 1.0));
        float _1035 = _1034 * 2.0;
        float _1039 = (1.0 - _1034) / (_1034 + 1.0);
        float _3705 = isnan(0.0) ? _1039 : (isnan(_1039) ? 0.0 : max(_1039, 0.0));
        float _1040 = isnan(1.0) ? _3705 : (isnan(_3705) ? 1.0 : min(_3705, 1.0));
        float _1049 = ((((1.0 - _1040) * (_1035 + 2.0)) * exp2(log2(isnan(1.0) ? _3683 : (isnan(_3683) ? 1.0 : min(_3683, 1.0))) * (_1035 + 1.0))) + _1040) * _962;
        float _1050 = _930 * 0.5;
        float _1051 = _940 * 0.5;
        float _1052 = _950 * 0.5;
        float _1053 = dot(vec3(_1050, _1051, _1052), vec3(_1050, _1051, _1052));
        float _1058 = (_1053 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1053);
        float _1066 = (dot(vec3(_422, _423, _424), vec3(_1058 * _1050, _1058 * _1051, _1058 * _1052)) + 1.0) * 0.5;
        float _3716 = isnan(0.0) ? _1066 : (isnan(_1066) ? 0.0 : max(_1066, 0.0));
        float _1075 = sqrt(((_1051 * _1051) + (_1050 * _1050)) + (_1052 * _1052)) / (_963 + 9.9999997473787516355514526367188e-06);
        float _3727 = isnan(0.0) ? _1075 : (isnan(_1075) ? 0.0 : max(_1075, 0.0));
        float _1076 = isnan(1.0) ? _3727 : (isnan(_3727) ? 1.0 : min(_3727, 1.0));
        float _1077 = _1076 * 2.0;
        float _1081 = (1.0 - _1076) / (_1076 + 1.0);
        float _3738 = isnan(0.0) ? _1081 : (isnan(_1081) ? 0.0 : max(_1081, 0.0));
        float _1082 = isnan(1.0) ? _3738 : (isnan(_3738) ? 1.0 : min(_3738, 1.0));
        float _1091 = ((((1.0 - _1082) * (_1077 + 2.0)) * exp2(log2(isnan(1.0) ? _3716 : (isnan(_3716) ? 1.0 : min(_3716, 1.0))) * (_1077 + 1.0))) + _1082) * _963;
        _1099 = _930;
        _1101 = _929;
        _1102 = _928;
        _1103 = _940;
        _1104 = _939;
        _1105 = _938;
        _1106 = _950;
        _1107 = _949;
        _1108 = _948;
        _1109 = _963;
        _1110 = _962;
        _1111 = _961;
        _1112 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1007 : (isnan(_1007) ? 0.0 : max(_1007, 0.0)));
        _1113 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1049 : (isnan(_1049) ? 0.0 : max(_1049, 0.0)));
        _1114 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1091 : (isnan(_1091) ? 0.0 : max(_1091, 0.0)));
    }
    else
    {
        _1099 = _1100;
        _1101 = _1100;
        _1102 = _1100;
        _1103 = _1100;
        _1104 = _1100;
        _1105 = _1100;
        _1106 = _1100;
        _1107 = _1100;
        _1108 = _1100;
        _1109 = _1100;
        _1110 = _1100;
        _1111 = _1100;
        _1112 = 0.0;
        _1113 = 0.0;
        _1114 = 0.0;
    }
    float _1409;
    float _1410;
    float _1411;
    float _1412;
    float _1413;
    float _1414;
    float _1415;
    float _1416;
    float _1417;
    float _1418;
    float _1419;
    float _1420;
    float _1421;
    float _1422;
    float _1423;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1140 = fma(_797, cbModelParam._m0[30u].z, fma(_793, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _789));
        float _1144 = fma(_797, cbModelParam._m0[31u].z, fma(_793, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _789));
        float _1148 = fma(_797, cbModelParam._m0[32u].z, fma(_793, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _789));
        float _1171 = _789 + _422;
        float _1172 = _793 + _423;
        float _1173 = _797 + _424;
        float _1183 = fma(_1173, cbModelParam._m0[30u].z, fma(_1172, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1171)) - _1140;
        float _1184 = fma(_1173, cbModelParam._m0[31u].z, fma(_1172, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1171)) - _1144;
        float _1185 = fma(_1173, cbModelParam._m0[32u].z, fma(_1172, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1171)) - _1148;
        float _1189 = inversesqrt(dot(vec3(_1183, _1184, _1185), vec3(_1183, _1184, _1185)));
        float _1202 = ((_1189 * _1183) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1140 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1203 = ((_1189 * _1184) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1144 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1204 = ((_1189 * _1185) / cbModelParam._m0[35u].z) + ((((((_1148 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1206 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1202, _1203, _1204), 0.0);
        vec4 _1213 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1202, _1203, _1204), 0.0);
        vec4 _1220 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1202, _1203, _1204), 0.0);
        vec4 _1227 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1202, _1203, _1204), 0.0);
        float _1239 = exp2((_1206.w + (-0.5)) * 20.0) * 2.0;
        float _1240 = _1239 * (_1206.x + (-0.5));
        float _1241 = _1239 * (_1206.y + (-0.5));
        float _1242 = _1239 * (_1206.z + (-0.5));
        float _1249 = exp2((_1213.w + (-0.5)) * 20.0) * 2.0;
        float _1250 = _1249 * (_1213.x + (-0.5));
        float _1251 = _1249 * (_1213.y + (-0.5));
        float _1252 = _1249 * (_1213.z + (-0.5));
        float _1259 = exp2((_1220.w + (-0.5)) * 20.0) * 2.0;
        float _1260 = _1259 * (_1220.x + (-0.5));
        float _1261 = _1259 * (_1220.y + (-0.5));
        float _1262 = _1259 * (_1220.z + (-0.5));
        float _1269 = exp2((_1227.w + (-0.5)) * 20.0) * 2.0;
        float _1270 = _1269 * (_1227.x + (-0.5));
        float _1271 = _1269 * (_1227.y + (-0.5));
        float _1272 = _1269 * (_1227.z + (-0.5));
        float _1273 = isnan(0.0) ? _1270 : (isnan(_1270) ? 0.0 : max(_1270, 0.0));
        float _1274 = isnan(0.0) ? _1271 : (isnan(_1271) ? 0.0 : max(_1271, 0.0));
        float _1275 = isnan(0.0) ? _1272 : (isnan(_1272) ? 0.0 : max(_1272, 0.0));
        float _1276 = _1240 * 0.5;
        float _1277 = _1250 * 0.5;
        float _1278 = _1260 * 0.5;
        float _1279 = dot(vec3(_1276, _1277, _1278), vec3(_1276, _1277, _1278));
        float _1284 = (_1279 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1279);
        float _1292 = (dot(vec3(_422, _423, _424), vec3(_1284 * _1276, _1284 * _1277, _1284 * _1278)) + 1.0) * 0.5;
        float _3779 = isnan(0.0) ? _1292 : (isnan(_1292) ? 0.0 : max(_1292, 0.0));
        float _1301 = sqrt(((_1277 * _1277) + (_1276 * _1276)) + (_1278 * _1278)) / (_1273 + 9.9999997473787516355514526367188e-06);
        float _3790 = isnan(0.0) ? _1301 : (isnan(_1301) ? 0.0 : max(_1301, 0.0));
        float _1302 = isnan(1.0) ? _3790 : (isnan(_3790) ? 1.0 : min(_3790, 1.0));
        float _1303 = _1302 * 2.0;
        float _1307 = (1.0 - _1302) / (_1302 + 1.0);
        float _3801 = isnan(0.0) ? _1307 : (isnan(_1307) ? 0.0 : max(_1307, 0.0));
        float _1308 = isnan(1.0) ? _3801 : (isnan(_3801) ? 1.0 : min(_3801, 1.0));
        float _1317 = ((((1.0 - _1308) * (_1303 + 2.0)) * exp2(log2(isnan(1.0) ? _3779 : (isnan(_3779) ? 1.0 : min(_3779, 1.0))) * (_1303 + 1.0))) + _1308) * _1273;
        float _1318 = _1241 * 0.5;
        float _1319 = _1251 * 0.5;
        float _1320 = _1261 * 0.5;
        float _1321 = dot(vec3(_1318, _1319, _1320), vec3(_1318, _1319, _1320));
        float _1326 = (_1321 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1321);
        float _1334 = (dot(vec3(_422, _423, _424), vec3(_1326 * _1318, _1326 * _1319, _1326 * _1320)) + 1.0) * 0.5;
        float _3812 = isnan(0.0) ? _1334 : (isnan(_1334) ? 0.0 : max(_1334, 0.0));
        float _1343 = sqrt(((_1319 * _1319) + (_1318 * _1318)) + (_1320 * _1320)) / (_1274 + 9.9999997473787516355514526367188e-06);
        float _3823 = isnan(0.0) ? _1343 : (isnan(_1343) ? 0.0 : max(_1343, 0.0));
        float _1344 = isnan(1.0) ? _3823 : (isnan(_3823) ? 1.0 : min(_3823, 1.0));
        float _1345 = _1344 * 2.0;
        float _1349 = (1.0 - _1344) / (_1344 + 1.0);
        float _3834 = isnan(0.0) ? _1349 : (isnan(_1349) ? 0.0 : max(_1349, 0.0));
        float _1350 = isnan(1.0) ? _3834 : (isnan(_3834) ? 1.0 : min(_3834, 1.0));
        float _1359 = ((((1.0 - _1350) * (_1345 + 2.0)) * exp2(log2(isnan(1.0) ? _3812 : (isnan(_3812) ? 1.0 : min(_3812, 1.0))) * (_1345 + 1.0))) + _1350) * _1274;
        float _1360 = _1242 * 0.5;
        float _1361 = _1252 * 0.5;
        float _1362 = _1262 * 0.5;
        float _1363 = dot(vec3(_1360, _1361, _1362), vec3(_1360, _1361, _1362));
        float _1368 = (_1363 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1363);
        float _1376 = (dot(vec3(_422, _423, _424), vec3(_1368 * _1360, _1368 * _1361, _1368 * _1362)) + 1.0) * 0.5;
        float _3845 = isnan(0.0) ? _1376 : (isnan(_1376) ? 0.0 : max(_1376, 0.0));
        float _1385 = sqrt(((_1361 * _1361) + (_1360 * _1360)) + (_1362 * _1362)) / (_1275 + 9.9999997473787516355514526367188e-06);
        float _3856 = isnan(0.0) ? _1385 : (isnan(_1385) ? 0.0 : max(_1385, 0.0));
        float _1386 = isnan(1.0) ? _3856 : (isnan(_3856) ? 1.0 : min(_3856, 1.0));
        float _1387 = _1386 * 2.0;
        float _1391 = (1.0 - _1386) / (_1386 + 1.0);
        float _3867 = isnan(0.0) ? _1391 : (isnan(_1391) ? 0.0 : max(_1391, 0.0));
        float _1392 = isnan(1.0) ? _3867 : (isnan(_3867) ? 1.0 : min(_3867, 1.0));
        float _1401 = ((((1.0 - _1392) * (_1387 + 2.0)) * exp2(log2(isnan(1.0) ? _3845 : (isnan(_3845) ? 1.0 : min(_3845, 1.0))) * (_1387 + 1.0))) + _1392) * _1275;
        _1409 = _1242;
        _1410 = _1241;
        _1411 = _1240;
        _1412 = _1252;
        _1413 = _1251;
        _1414 = _1250;
        _1415 = _1262;
        _1416 = _1261;
        _1417 = _1260;
        _1418 = _1275;
        _1419 = _1274;
        _1420 = _1273;
        _1421 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1317 : (isnan(_1317) ? 0.0 : max(_1317, 0.0)));
        _1422 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1359 : (isnan(_1359) ? 0.0 : max(_1359, 0.0)));
        _1423 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1401 : (isnan(_1401) ? 0.0 : max(_1401, 0.0)));
    }
    else
    {
        _1409 = _1100;
        _1410 = _1100;
        _1411 = _1100;
        _1412 = _1100;
        _1413 = _1100;
        _1414 = _1100;
        _1415 = _1100;
        _1416 = _1100;
        _1417 = _1100;
        _1418 = _1100;
        _1419 = _1100;
        _1420 = _1100;
        _1421 = 0.0;
        _1422 = 0.0;
        _1423 = 0.0;
    }
    float _1433 = (cbModelParam._m0[1u].x * (_1421 - _1112)) + _1112;
    float _1434 = (cbModelParam._m0[1u].x * (_1422 - _1113)) + _1113;
    float _1435 = (cbModelParam._m0[1u].x * (_1423 - _1114)) + _1114;
    float _1456 = fma(_1435, cbSceneParam._m0[89u].z, fma(_1434, cbSceneParam._m0[89u].y, _1433 * cbSceneParam._m0[89u].x));
    float _1459 = fma(_1435, cbSceneParam._m0[90u].z, fma(_1434, cbSceneParam._m0[90u].y, _1433 * cbSceneParam._m0[90u].x));
    float _1462 = fma(_1435, cbSceneParam._m0[91u].z, fma(_1434, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1433));
    float _1477 = _734 * 0.5;
    float _1478 = _735 * 0.5;
    float _1479 = _736 * 0.5;
    float _1480 = dot(vec4(_1477, _1478, _1479, 1.0), vec4(_1411, _1414, _1417, _1420));
    float _1483 = dot(vec4(_1477, _1478, _1479, 1.0), vec4(_1410, _1413, _1416, _1419));
    float _1486 = dot(vec4(_1477, _1478, _1479, 1.0), vec4(_1409, _1412, _1415, _1418));
    float _1517;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1493 = dot(vec4(_1477, _1478, _1479, 1.0), vec4(_1099, _1103, _1106, _1109));
        float _1497 = dot(vec4(_1477, _1478, _1479, 1.0), vec4(_1101, _1104, _1107, _1110));
        float _1501 = dot(vec4(_1477, _1478, _1479, 1.0), vec4(_1102, _1105, _1108, _1111));
        float _1508 = dot(vec4(cbModelParam._m0[39u]), vec4(_1477, _1478, _1479, 1.0));
        _1517 = dot(vec3(isnan(0.0) ? _1501 : (isnan(_1501) ? 0.0 : max(_1501, 0.0)), isnan(0.0) ? _1497 : (isnan(_1497) ? 0.0 : max(_1497, 0.0)), isnan(0.0) ? _1493 : (isnan(_1493) ? 0.0 : max(_1493, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1508) ? 0.0 : (isnan(0.0) ? _1508 : max(0.0, _1508))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1517 = 1.0;
    }
    float _1528;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1519 = dot(vec4(cbModelParam._m0[40u]), vec4(_1477, _1478, _1479, 1.0));
        _1528 = dot(vec3(isnan(0.0) ? _1480 : (isnan(_1480) ? 0.0 : max(_1480, 0.0)), isnan(0.0) ? _1483 : (isnan(_1483) ? 0.0 : max(_1483, 0.0)), isnan(0.0) ? _1486 : (isnan(_1486) ? 0.0 : max(_1486, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1519) ? 0.0 : (isnan(0.0) ? _1519 : max(0.0, _1519))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1528 = 1.0;
    }
    float _1532 = (_1528 * cbModelParam._m0[1u].x) + (_1517 * (1.0 - cbModelParam._m0[1u].x));
    float _1542 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _593);
    float _1543 = isnan(_1542) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1542 : min(cbModelParam._m0[25u].z, _1542));
    float _1623;
    float _1625;
    float _1627;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1590 = fma(_797, cbModelParam._m0[13u].z, fma(_793, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _789)) + cbModelParam._m0[13u].w;
        float _1594 = fma(_797, cbModelParam._m0[14u].z, fma(_793, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _789)) + cbModelParam._m0[14u].w;
        float _1598 = fma(_797, cbModelParam._m0[15u].z, fma(_793, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _789)) + cbModelParam._m0[15u].w;
        float _1601 = fma(_736, cbModelParam._m0[13u].z, fma(_735, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _734));
        float _1604 = fma(_736, cbModelParam._m0[14u].z, fma(_735, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _734));
        float _1607 = fma(_736, cbModelParam._m0[15u].z, fma(_735, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _734));
        float _1635;
        if (_1601 > 0.0)
        {
            _1635 = abs((1.0 - _1590) / _1601);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1601 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1590 + 1.0) / _1601);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1635 = frontier_phi_16_14_ladder;
        }
        float _1860;
        if (_1604 > 0.0)
        {
            _1860 = abs((1.0 - _1594) / _1604);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1604 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1594 + 1.0) / _1604);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1860 = frontier_phi_25_21_ladder;
        }
        float _2117;
        if (_1607 > 0.0)
        {
            _2117 = abs((1.0 - _1598) / _1607);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1607 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1598 + 1.0) / _1607);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2117 = frontier_phi_37_32_ladder;
        }
        float _2119 = isnan(_1860) ? _1635 : (isnan(_1635) ? _1860 : min(_1635, _1860));
        float _2120 = isnan(_2117) ? _2119 : (isnan(_2119) ? _2117 : min(_2119, _2117));
        float _2124 = (_2120 * _1601) + _1590;
        float _2125 = (_2120 * _1604) + _1594;
        float _2126 = (_2120 * _1607) + _1598;
        float _2127 = _2120 * 9.9999997473787516355514526367188e-05;
        float _2129 = (-1.0) - _2127;
        float _2131 = _2127 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_2126 > _2131) || ((_2126 < _2129) || ((_2125 > _2131) || ((_2125 < _2129) || ((_2124 < _2129) || (_2124 > _2131))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2254 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2126, cbModelParam._m0[9u].z, fma(_2125, cbModelParam._m0[9u].y, _2124 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2126, cbModelParam._m0[10u].z, fma(_2125, cbModelParam._m0[10u].y, _2124 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2126, cbModelParam._m0[11u].z, fma(_2125, cbModelParam._m0[11u].y, _2124 * cbModelParam._m0[11u].x))), _1543);
            frontier_phi_15_37_ladder = _2254.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2254.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2254.x * cbModelParam._m0[1u].y;
        }
        _1623 = frontier_phi_15_37_ladder_2;
        _1625 = frontier_phi_15_37_ladder_1;
        _1627 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1611 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_734, _735, _736), _1543);
        _1623 = _1611.x * cbModelParam._m0[1u].y;
        _1625 = _1611.y * cbModelParam._m0[1u].y;
        _1627 = _1611.z * cbModelParam._m0[1u].y;
    }
    float _1631 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _593);
    float _1632 = isnan(_1631) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1631 : min(cbModelParam._m0[25u].w, _1631));
    float _1723;
    float _1725;
    float _1727;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1687 = fma(_797, cbModelParam._m0[21u].z, fma(_793, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _789)) + cbModelParam._m0[21u].w;
        float _1691 = fma(_797, cbModelParam._m0[22u].z, fma(_793, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _789)) + cbModelParam._m0[22u].w;
        float _1695 = fma(_797, cbModelParam._m0[23u].z, fma(_793, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _789)) + cbModelParam._m0[23u].w;
        float _1698 = fma(_736, cbModelParam._m0[21u].z, fma(_735, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _734));
        float _1701 = fma(_736, cbModelParam._m0[22u].z, fma(_735, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _734));
        float _1704 = fma(_736, cbModelParam._m0[23u].z, fma(_735, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _734));
        float _1865;
        if (_1698 > 0.0)
        {
            _1865 = abs((1.0 - _1687) / _1698);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1698 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1687 + 1.0) / _1698);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1865 = frontier_phi_27_23_ladder;
        }
        float _2144;
        if (_1701 > 0.0)
        {
            _2144 = abs((1.0 - _1691) / _1701);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1701 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1691 + 1.0) / _1701);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _2144 = frontier_phi_39_34_ladder;
        }
        float _2357;
        if (_1704 > 0.0)
        {
            _2357 = abs((1.0 - _1695) / _1704);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1704 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1695 + 1.0) / _1704);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _2357 = frontier_phi_48_45_ladder;
        }
        float _2359 = isnan(_2144) ? _1865 : (isnan(_1865) ? _2144 : min(_1865, _2144));
        float _2360 = isnan(_2357) ? _2359 : (isnan(_2359) ? _2357 : min(_2359, _2357));
        float _2364 = (_2360 * _1698) + _1687;
        float _2365 = (_2360 * _1701) + _1691;
        float _2366 = (_2360 * _1704) + _1695;
        float _2367 = _2360 * 9.9999997473787516355514526367188e-05;
        float _2368 = (-1.0) - _2367;
        float _2370 = _2367 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2366 > _2370) || ((_2366 < _2368) || ((_2365 > _2370) || ((_2365 < _2368) || ((_2364 < _2368) || (_2364 > _2370))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2607 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2366, cbModelParam._m0[17u].z, fma(_2365, cbModelParam._m0[17u].y, _2364 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2366, cbModelParam._m0[18u].z, fma(_2365, cbModelParam._m0[18u].y, _2364 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2366, cbModelParam._m0[19u].z, fma(_2365, cbModelParam._m0[19u].y, _2364 * cbModelParam._m0[19u].x))), _1632);
            frontier_phi_24_48_ladder = _2607.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2607.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2607.x * cbModelParam._m0[1u].z;
        }
        _1723 = frontier_phi_24_48_ladder_2;
        _1725 = frontier_phi_24_48_ladder_1;
        _1727 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1707 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_734, _735, _736), _1632);
        _1723 = _1707.x * cbModelParam._m0[1u].z;
        _1725 = _1707.y * cbModelParam._m0[1u].z;
        _1727 = _1707.z * cbModelParam._m0[1u].z;
    }
    float _1740 = (((_760 * _712) + _761) * _726) * ((cbModelParam._m0[1u].w * (_1723 - _1623)) + _1623);
    float _1742 = (((_760 * _713) + _761) * _726) * ((cbModelParam._m0[1u].w * (_1725 - _1625)) + _1625);
    float _1744 = (((_760 * _714) + _761) * _726) * ((cbModelParam._m0[1u].w * (_1727 - _1627)) + _1627);
    float _1747 = fma(_1744, cbSceneParam._m0[89u].z, fma(_1742, cbSceneParam._m0[89u].y, _1740 * cbSceneParam._m0[89u].x));
    float _1750 = fma(_1744, cbSceneParam._m0[90u].z, fma(_1742, cbSceneParam._m0[90u].y, _1740 * cbSceneParam._m0[90u].x));
    float _1753 = fma(_1744, cbSceneParam._m0[91u].z, fma(_1742, cbSceneParam._m0[91u].y, _1740 * cbSceneParam._m0[91u].x));
    vec4 _1761 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_513, _514));
    float _1763 = _1761.w;
    float _1775 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1763);
    float _1776 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1763);
    float _1777 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1763);
    uvec4 _1781 = floatBitsToUint(cbInstanceData._m0[_617 + 5u]);
    uint _1783 = _1781.x * 14u;
    uint _1784 = _1783 + 13u;
    float _1791 = _726 + (-1.0);
    float _1796 = (cbLight._m0[_1784].x * _1791) + 1.0;
    float _1797 = (cbLight._m0[_1784].y * _1791) + 1.0;
    float _1798 = (cbLight._m0[_1784].z * _1791) + 1.0;
    float _1799 = (cbLight._m0[_1784].w * _1791) + 1.0;
    uint _1800 = _1783 + 5u;
    float _1806 = isnan(1.0) ? _1797 : (isnan(_1797) ? 1.0 : min(_1797, 1.0));
    uint _1810 = _1783 + 4u;
    float _1819 = isnan(1.0) ? _1796 : (isnan(_1796) ? 1.0 : min(_1796, 1.0));
    uint _1823 = _1783 | 1u;
    float _1834 = dot(vec3(cbLight._m0[_1783].xyz), vec3(_422, _423, _424));
    float _1837 = dot(vec3(cbLight._m0[_1823].xyz), vec3(_422, _423, _424));
    float _4003 = isnan(0.0) ? _1834 : (isnan(_1834) ? 0.0 : max(_1834, 0.0));
    float _4014 = isnan(0.0) ? _1837 : (isnan(_1837) ? 0.0 : max(_1837, 0.0));
    float _1842 = (isnan(1.0) ? _4003 : (isnan(_4003) ? 1.0 : min(_4003, 1.0))) * 0.3183098733425140380859375;
    float _1844 = (isnan(1.0) ? _4014 : (isnan(_4014) ? 1.0 : min(_4014, 1.0))) * 0.3183098733425140380859375;
    float _1851 = ((cbLight._m0[_1800].x * _1806) * _1844) + (((cbLight._m0[_1810].x * _1775) * _1819) * _1842);
    float _1852 = ((_1806 * cbLight._m0[_1800].y) * _1844) + (((cbLight._m0[_1810].y * _1776) * _1819) * _1842);
    float _1853 = ((_1806 * cbLight._m0[_1800].z) * _1844) + (((cbLight._m0[_1810].z * _1777) * _1819) * _1842);
    uvec4 _1857 = floatBitsToUint(cbLight._m0[_1783 + 12u]);
    bool _1859 = _1857.x == 0u;
    float _1870;
    float _1872;
    float _1874;
    if (_1859)
    {
        _1870 = _1851;
        _1872 = _1852;
        _1874 = _1853;
    }
    else
    {
        uint _1878 = _1783 + 6u;
        float _1894 = (dot(vec3(cbLight._m0[_1783 + 2u].xyz), vec3(_422, _423, _424)) * 0.5) + 0.5;
        float _1895 = _1894 * _1894;
        float _4025 = isnan(0.0) ? _1895 : (isnan(_1895) ? 0.0 : max(_1895, 0.0));
        float _1896 = isnan(1.0) ? _4025 : (isnan(_4025) ? 1.0 : min(_4025, 1.0));
        float _1897 = isnan(1.0) ? _1798 : (isnan(_1798) ? 1.0 : min(_1798, 1.0));
        _1870 = (((cbLight._m0[_1878].x * 0.3183098733425140380859375) * _1896) * _1897) + _1851;
        _1872 = (((cbLight._m0[_1878].y * 0.3183098733425140380859375) * _1896) * _1897) + _1852;
        _1874 = (((cbLight._m0[_1878].z * 0.3183098733425140380859375) * _1896) * _1897) + _1853;
    }
    bool _1877 = _1857.y == 0u;
    float _1915;
    float _1917;
    float _1919;
    if (_1877)
    {
        _1915 = _1870;
        _1917 = _1872;
        _1919 = _1874;
    }
    else
    {
        uint _2088 = _1783 + 7u;
        float _2104 = (dot(vec3(cbLight._m0[_1783 + 3u].xyz), vec3(_422, _423, _424)) * 0.5) + 0.5;
        float _2105 = _2104 * _2104;
        float _4041 = isnan(0.0) ? _2105 : (isnan(_2105) ? 0.0 : max(_2105, 0.0));
        float _2106 = isnan(1.0) ? _4041 : (isnan(_4041) ? 1.0 : min(_4041, 1.0));
        float _2107 = isnan(1.0) ? _1799 : (isnan(_1799) ? 1.0 : min(_1799, 1.0));
        _1915 = (((cbLight._m0[_2088].x * 0.3183098733425140380859375) * _2106) * _2107) + _1870;
        _1917 = (((cbLight._m0[_2088].y * 0.3183098733425140380859375) * _2106) * _2107) + _1872;
        _1919 = (((cbLight._m0[_2088].z * 0.3183098733425140380859375) * _2106) * _2107) + _1874;
    }
    uint _1922 = _1783 + 8u;
    float _1935 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1783].w)) * _593) * 0.949999988079071044921875);
    float _1936 = _1935 * _1935;
    float _1937 = cbLight._m0[_1783].x + _505;
    float _1938 = cbLight._m0[_1783].y + _506;
    float _1939 = cbLight._m0[_1783].z + _507;
    float _1943 = inversesqrt(dot(vec3(_1937, _1938, _1939), vec3(_1937, _1938, _1939)));
    float _1944 = _1943 * _1937;
    float _1945 = _1943 * _1938;
    float _1946 = _1943 * _1939;
    float _1947 = dot(vec3(_422, _423, _424), vec3(cbLight._m0[_1783].xyz));
    float _4057 = isnan(0.0) ? _1947 : (isnan(_1947) ? 0.0 : max(_1947, 0.0));
    float _1950 = isnan(1.0) ? _4057 : (isnan(_4057) ? 1.0 : min(_4057, 1.0));
    float _4068 = isnan(0.0) ? _727 : (isnan(_727) ? 0.0 : max(_727, 0.0));
    float _1951 = isnan(1.0) ? _4068 : (isnan(_4068) ? 1.0 : min(_4068, 1.0));
    float _1952 = dot(vec3(_422, _423, _424), vec3(_1944, _1945, _1946));
    float _4079 = isnan(0.0) ? _1952 : (isnan(_1952) ? 0.0 : max(_1952, 0.0));
    float _1955 = isnan(1.0) ? _4079 : (isnan(_4079) ? 1.0 : min(_4079, 1.0));
    float _1956 = dot(vec3(cbLight._m0[_1783].xyz), vec3(_1944, _1945, _1946));
    float _4090 = isnan(0.0) ? _1956 : (isnan(_1956) ? 0.0 : max(_1956, 0.0));
    float _1960 = _1936 * _1936;
    float _1964 = ((_1955 * _1955) * (_1960 + (-1.0))) + 1.0;
    float _1972 = exp2(log2(1.0 - (isnan(1.0) ? _4090 : (isnan(_4090) ? 1.0 : min(_4090, 1.0)))) * 5.0);
    float _1973 = 0.959999978542327880859375 - _709;
    float _1975 = 0.959999978542327880859375 - _710;
    float _1976 = 0.959999978542327880859375 - _711;
    float _1983 = 1.0 - _1936;
    float _1994 = (0.5 / (((_1951 * ((_1950 * _1983) + _1936)) + 9.9999999392252902907785028219223e-09) + (((_1951 * _1983) + _1936) * _1950))) * _1950;
    float _4101 = isnan(0.0) ? _1994 : (isnan(_1994) ? 0.0 : max(_1994, 0.0));
    float _1996 = (isnan(1.0) ? _4101 : (isnan(_4101) ? 1.0 : min(_4101, 1.0))) * (_1960 / ((_1964 * _1964) * 3.141590118408203125));
    uint _2010 = _1783 + 9u;
    float _2021 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1823].w)) * _593) * 0.949999988079071044921875);
    float _2022 = _2021 * _2021;
    float _2023 = cbLight._m0[_1823].x + _505;
    float _2024 = cbLight._m0[_1823].y + _506;
    float _2025 = cbLight._m0[_1823].z + _507;
    float _2029 = inversesqrt(dot(vec3(_2023, _2024, _2025), vec3(_2023, _2024, _2025)));
    float _2030 = _2029 * _2023;
    float _2031 = _2029 * _2024;
    float _2032 = _2029 * _2025;
    float _2033 = dot(vec3(_422, _423, _424), vec3(cbLight._m0[_1823].xyz));
    float _4112 = isnan(0.0) ? _2033 : (isnan(_2033) ? 0.0 : max(_2033, 0.0));
    float _2036 = isnan(1.0) ? _4112 : (isnan(_4112) ? 1.0 : min(_4112, 1.0));
    float _2037 = dot(vec3(_422, _423, _424), vec3(_2030, _2031, _2032));
    float _4123 = isnan(0.0) ? _2037 : (isnan(_2037) ? 0.0 : max(_2037, 0.0));
    float _2040 = isnan(1.0) ? _4123 : (isnan(_4123) ? 1.0 : min(_4123, 1.0));
    float _2041 = dot(vec3(cbLight._m0[_1823].xyz), vec3(_2030, _2031, _2032));
    float _4134 = isnan(0.0) ? _2041 : (isnan(_2041) ? 0.0 : max(_2041, 0.0));
    float _2045 = _2022 * _2022;
    float _2049 = ((_2040 * _2040) * (_2045 + (-1.0))) + 1.0;
    float _2056 = exp2(log2(1.0 - (isnan(1.0) ? _4134 : (isnan(_4134) ? 1.0 : min(_4134, 1.0)))) * 5.0);
    float _2063 = 1.0 - _2022;
    float _2073 = (0.5 / (((_1951 * ((_2036 * _2063) + _2022)) + 9.9999999392252902907785028219223e-09) + (((_1951 * _2063) + _2022) * _2036))) * _2036;
    float _4145 = isnan(0.0) ? _2073 : (isnan(_2073) ? 0.0 : max(_2073, 0.0));
    float _2075 = (isnan(1.0) ? _4145 : (isnan(_4145) ? 1.0 : min(_4145, 1.0))) * (_2045 / ((_2049 * _2049) * 3.141590118408203125));
    float _2085 = (((((_2056 * _1973) + _712) * cbLight._m0[_2010].x) * _2075) * _1806) + ((((cbLight._m0[_1922].x * _1775) * ((_1972 * _1973) + _712)) * _1996) * _1819);
    float _2086 = (((((_2056 * _1975) + _713) * cbLight._m0[_2010].y) * _2075) * _1806) + ((((cbLight._m0[_1922].y * _1776) * ((_1972 * _1975) + _713)) * _1996) * _1819);
    float _2087 = (((((_2056 * _1976) + _714) * cbLight._m0[_2010].z) * _2075) * _1806) + ((((cbLight._m0[_1922].z * _1777) * ((_1972 * _1976) + _714)) * _1996) * _1819);
    float _2149;
    float _2151;
    float _2153;
    if (_1859)
    {
        _2149 = _2085;
        _2151 = _2086;
        _2153 = _2087;
    }
    else
    {
        uint _2155 = _1783 + 2u;
        uint _2159 = _1783 + 10u;
        float _2173 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2155].w)) * _593) * 0.949999988079071044921875);
        float _2174 = _2173 * _2173;
        float _2175 = cbLight._m0[_2155].x + _505;
        float _2176 = cbLight._m0[_2155].y + _506;
        float _2177 = cbLight._m0[_2155].z + _507;
        float _2181 = inversesqrt(dot(vec3(_2175, _2176, _2177), vec3(_2175, _2176, _2177)));
        float _2182 = _2181 * _2175;
        float _2183 = _2181 * _2176;
        float _2184 = _2181 * _2177;
        float _2185 = dot(vec3(_422, _423, _424), vec3(cbLight._m0[_2155].xyz));
        float _4156 = isnan(0.0) ? _2185 : (isnan(_2185) ? 0.0 : max(_2185, 0.0));
        float _2188 = isnan(1.0) ? _4156 : (isnan(_4156) ? 1.0 : min(_4156, 1.0));
        float _2189 = dot(vec3(_422, _423, _424), vec3(_2182, _2183, _2184));
        float _4167 = isnan(0.0) ? _2189 : (isnan(_2189) ? 0.0 : max(_2189, 0.0));
        float _2192 = isnan(1.0) ? _4167 : (isnan(_4167) ? 1.0 : min(_4167, 1.0));
        float _2193 = dot(vec3(cbLight._m0[_2155].xyz), vec3(_2182, _2183, _2184));
        float _4178 = isnan(0.0) ? _2193 : (isnan(_2193) ? 0.0 : max(_2193, 0.0));
        float _2197 = _2174 * _2174;
        float _2201 = ((_2192 * _2192) * (_2197 + (-1.0))) + 1.0;
        float _2208 = exp2(log2(1.0 - (isnan(1.0) ? _4178 : (isnan(_4178) ? 1.0 : min(_4178, 1.0)))) * 5.0);
        float _2215 = 1.0 - _2174;
        float _2225 = (0.5 / (((_1951 * ((_2188 * _2215) + _2174)) + 9.9999999392252902907785028219223e-09) + (((_1951 * _2215) + _2174) * _2188))) * _2188;
        float _4189 = isnan(0.0) ? _2225 : (isnan(_2225) ? 0.0 : max(_2225, 0.0));
        float _2227 = (isnan(1.0) ? _4189 : (isnan(_4189) ? 1.0 : min(_4189, 1.0))) * (_2197 / ((_2201 * _2201) * 3.141590118408203125));
        float _2228 = isnan(1.0) ? _1798 : (isnan(_1798) ? 1.0 : min(_1798, 1.0));
        _2149 = (((((_2208 * _1973) + _712) * cbLight._m0[_2159].x) * _2227) * _2228) + _2085;
        _2151 = (((((_2208 * _1975) + _713) * cbLight._m0[_2159].y) * _2227) * _2228) + _2086;
        _2153 = (((((_2208 * _1976) + _714) * cbLight._m0[_2159].z) * _2227) * _2228) + _2087;
    }
    float _2263;
    float _2265;
    float _2267;
    if (_1877)
    {
        _2263 = _2149;
        _2265 = _2151;
        _2267 = _2153;
    }
    else
    {
        uint _2274 = _1783 + 3u;
        uint _2278 = _1783 + 11u;
        float _2292 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2274].w)) * _593) * 0.949999988079071044921875);
        float _2293 = _2292 * _2292;
        float _2294 = cbLight._m0[_2274].x + _505;
        float _2295 = cbLight._m0[_2274].y + _506;
        float _2296 = cbLight._m0[_2274].z + _507;
        float _2300 = inversesqrt(dot(vec3(_2294, _2295, _2296), vec3(_2294, _2295, _2296)));
        float _2301 = _2300 * _2294;
        float _2302 = _2300 * _2295;
        float _2303 = _2300 * _2296;
        float _2304 = dot(vec3(_422, _423, _424), vec3(cbLight._m0[_2274].xyz));
        float _4205 = isnan(0.0) ? _2304 : (isnan(_2304) ? 0.0 : max(_2304, 0.0));
        float _2307 = isnan(1.0) ? _4205 : (isnan(_4205) ? 1.0 : min(_4205, 1.0));
        float _2308 = dot(vec3(_422, _423, _424), vec3(_2301, _2302, _2303));
        float _4216 = isnan(0.0) ? _2308 : (isnan(_2308) ? 0.0 : max(_2308, 0.0));
        float _2311 = isnan(1.0) ? _4216 : (isnan(_4216) ? 1.0 : min(_4216, 1.0));
        float _2312 = dot(vec3(cbLight._m0[_2274].xyz), vec3(_2301, _2302, _2303));
        float _4227 = isnan(0.0) ? _2312 : (isnan(_2312) ? 0.0 : max(_2312, 0.0));
        float _2316 = _2293 * _2293;
        float _2320 = ((_2311 * _2311) * (_2316 + (-1.0))) + 1.0;
        float _2327 = exp2(log2(1.0 - (isnan(1.0) ? _4227 : (isnan(_4227) ? 1.0 : min(_4227, 1.0)))) * 5.0);
        float _2334 = 1.0 - _2293;
        float _2344 = (0.5 / (((_1951 * ((_2307 * _2334) + _2293)) + 9.9999999392252902907785028219223e-09) + (((_1951 * _2334) + _2293) * _2307))) * _2307;
        float _4238 = isnan(0.0) ? _2344 : (isnan(_2344) ? 0.0 : max(_2344, 0.0));
        float _2346 = (isnan(1.0) ? _4238 : (isnan(_4238) ? 1.0 : min(_4238, 1.0))) * (_2316 / ((_2320 * _2320) * 3.141590118408203125));
        float _2347 = isnan(1.0) ? _1799 : (isnan(_1799) ? 1.0 : min(_1799, 1.0));
        _2263 = (((((_2327 * _1973) + _712) * cbLight._m0[_2278].x) * _2346) * _2347) + _2149;
        _2265 = (((((_2327 * _1975) + _713) * cbLight._m0[_2278].y) * _2346) * _2347) + _2151;
        _2267 = (((((_2327 * _1976) + _714) * cbLight._m0[_2278].z) * _2346) * _2347) + _2153;
    }
    float _2481;
    float _2483;
    float _2485;
    float _2487;
    float _2489;
    float _2491;
    if (_1781.y == 0u)
    {
        float _2422 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2423 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2422;
        float _2424 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2422;
        float _2425 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2422;
        uvec4 _2437 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2438 = _2437.x;
        uint _2449 = uint((float(_2437.y) * floor(float(uint(cbSceneParam._m0[85u].y * _514) / _2438))) + floor(float(uint(cbSceneParam._m0[85u].x * _513) / _2438)));
        float _2459 = (log2(_2425 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2460 = isnan(0.0) ? _2459 : (isnan(_2459) ? 0.0 : max(_2459, 0.0));
        uint _2463 = uint(isnan(14.0) ? _2460 : (isnan(_2460) ? 14.0 : min(_2460, 14.0)));
        uvec4 _2468 = texelFetch(g_lightClusterGridBuffer, int(((_2463 << 2u) + (_2449 << 6u)) >> 2u));
        uint _2469 = _2468.x;
        uint _2470 = _2437.z;
        float _2612;
        float _2614;
        float _2616;
        float _2618;
        float _2620;
        float _2622;
        if (((((1u << ((_2470 >> 4u) & 15u)) + 4294967295u) & _2469) == 0u) || ((_2470 & 240u) == 0u))
        {
            _2612 = 0.0;
            _2614 = 0.0;
            _2616 = 0.0;
            _2618 = 0.0;
            _2620 = 0.0;
            _2622 = 0.0;
        }
        else
        {
            float _2613;
            float _2615;
            float _2617;
            float _2619;
            float _2621;
            float _2623;
            float _2765 = 0.0;
            float _2766 = 0.0;
            float _2767 = 0.0;
            float _2768 = 0.0;
            float _2769 = 0.0;
            float _2770 = 0.0;
            uint _2771 = 0u;
            uint _2780;
            bool _2781;
            for (;;)
            {
                _2780 = texelFetch(g_lightClassification, int((((_2463 << 5u) + (_2449 << 9u)) + (_2771 << 2u)) >> 2u)).x;
                _2781 = _2780 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2781)
                {
                    frontier_phi_63_pred = _2770;
                    frontier_phi_63_pred_1 = _2769;
                    frontier_phi_63_pred_2 = _2768;
                    frontier_phi_63_pred_3 = _2767;
                    frontier_phi_63_pred_4 = _2766;
                    frontier_phi_63_pred_5 = _2765;
                }
                else
                {
                    float _2889;
                    float _2890;
                    float _2891;
                    float _2892;
                    float _2893;
                    float _2894;
                    uint _2895;
                    _2889 = _2765;
                    _2890 = _2766;
                    _2891 = _2767;
                    _2892 = _2768;
                    _2893 = _2769;
                    _2894 = _2770;
                    _2895 = _2780;
                    float _2821;
                    float _2822;
                    float _2823;
                    float _2824;
                    float _2825;
                    float _2826;
                    for (;;)
                    {
                        uint _2899 = uint(findLSB(_2895)) + (_2771 << 5u);
                        uint _2896 = (_2895 + 4294967295u) & _2895;
                        uint _2901 = _2899 * 48u;
                        vec4 _2915 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2901)).x, texelFetch(g_PointLightRenderingBuffer, int(_2901 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2901 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2901 + 3u)).x));
                        uint _2921 = (_2899 * 48u) + 4u;
                        vec4 _2934 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2921)).x, texelFetch(g_PointLightRenderingBuffer, int(_2921 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2921 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2921 + 3u)).x));
                        uint _2940 = (_2899 * 48u) + 8u;
                        vec3 _2951 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2940)).x, texelFetch(g_PointLightRenderingBuffer, int(_2940 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2940 + 2u)).x));
                        float _2955 = _2915.x - _2423;
                        float _2956 = _2915.y - _2424;
                        float _2957 = _2915.z - _2425;
                        float _2958 = dot(vec3(_2955, _2956, _2957), vec3(_2955, _2956, _2957));
                        float _2961 = inversesqrt(_2958);
                        float _2962 = _2961 * _2955;
                        float _2963 = _2961 * _2956;
                        float _2964 = _2961 * _2957;
                        float _2965 = dot(vec3(_538, _541, _544), vec3(_2962, _2963, _2964));
                        float _2970 = 1.0 - (_2958 * _2915.w);
                        float _4264 = isnan(0.0) ? _2970 : (isnan(_2970) ? 0.0 : max(_2970, 0.0));
                        float _2971 = isnan(1.0) ? _4264 : (isnan(_4264) ? 1.0 : min(_4264, 1.0));
                        float _2972 = sqrt(_2958) * _2934.w;
                        float _2975 = 1.39999997615814208984375 / (_2972 + 1.39999997615814208984375);
                        float _2976 = _2975 * _2975;
                        float _2979 = ((1.0 - _2976) * _2965) + _2976;
                        float _2982 = _2972 * _2972;
                        float _2986 = ((isnan(0.0) ? _2979 : (isnan(_2979) ? 0.0 : max(_2979, 0.0))) * _2971) / ((_2982 * 0.699999988079071044921875) + 1.0);
                        float _2990 = (-0.0) - _2423;
                        float _2991 = (-0.0) - _2424;
                        float _2992 = (-0.0) - _2425;
                        float _2996 = inversesqrt(dot(vec3(_2990, _2991, _2992), vec3(_2990, _2991, _2992)));
                        float _2997 = _2996 * _2990;
                        float _2998 = _2996 * _2991;
                        float _2999 = _2996 * _2992;
                        float _3007 = exp2(log2(1.0 / ((_2982 * 3.5) + 5.0)) * 0.25);
                        float _3008 = 1.0 - _742;
                        float _3015 = sqrt(1.0 - ((1.0 - (_3008 * _3008)) * (1.0 - (_3007 * _3007))));
                        float _3016 = _3015 * _3015;
                        float _3017 = _3016 * _3016;
                        float _3018 = _2997 + _2962;
                        float _3019 = _2998 + _2963;
                        float _3020 = _2999 + _2964;
                        float _3024 = inversesqrt(dot(vec3(_3018, _3019, _3020), vec3(_3018, _3019, _3020)));
                        float _3028 = dot(vec3(_538, _541, _544), vec3(_2997, _2998, _2999));
                        float _4280 = isnan(0.0) ? _3028 : (isnan(_3028) ? 0.0 : max(_3028, 0.0));
                        float _3031 = isnan(1.0) ? _4280 : (isnan(_4280) ? 1.0 : min(_4280, 1.0));
                        float _3032 = dot(vec3(_538, _541, _544), vec3(_3024 * _3018, _3024 * _3019, _3024 * _3020));
                        float _4291 = isnan(0.0) ? _3032 : (isnan(_3032) ? 0.0 : max(_3032, 0.0));
                        float _3035 = isnan(1.0) ? _4291 : (isnan(_4291) ? 1.0 : min(_4291, 1.0));
                        float _3039 = ((_3035 * _3035) * (_3017 + (-1.0))) + 1.0;
                        float _3040 = _2975 * _3016;
                        float _3041 = _3040 * _3040;
                        float _3044 = ((1.0 - _3041) * _2965) + _3041;
                        float _4302 = isnan(0.0) ? _3044 : (isnan(_3044) ? 0.0 : max(_3044, 0.0));
                        float _3045 = isnan(1.0) ? _4302 : (isnan(_4302) ? 1.0 : min(_4302, 1.0));
                        float _3046 = 1.0 - _3016;
                        float _3056 = (0.5 / (((_3045 * ((_3031 * _3046) + _3016)) + 9.9999999392252902907785028219223e-09) + (((_3045 * _3046) + _3016) * _3031))) * _3045;
                        float _4313 = isnan(0.0) ? _3056 : (isnan(_3056) ? 0.0 : max(_3056, 0.0));
                        float _3067 = (((_3017 * 3.1415927410125732421875) * (isnan(1.0) ? _4313 : (isnan(_4313) ? 1.0 : min(_4313, 1.0)))) / ((_3039 * _3039) * ((_2982 * 2.1991131305694580078125) + 3.141590118408203125))) * _2971;
                        _2824 = (_2986 * _2934.x) + _2892;
                        _2825 = (_2986 * _2934.y) + _2893;
                        _2826 = (_2986 * _2934.z) + _2894;
                        _2821 = (_3067 * _2951.x) + _2889;
                        _2822 = (_3067 * _2951.y) + _2890;
                        _2823 = (_3067 * _2951.z) + _2891;
                        if (_2896 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2889 = _2821;
                            _2890 = _2822;
                            _2891 = _2823;
                            _2892 = _2824;
                            _2893 = _2825;
                            _2894 = _2826;
                            _2895 = _2896;
                        }
                    }
                    frontier_phi_63_pred = _2826;
                    frontier_phi_63_pred_1 = _2825;
                    frontier_phi_63_pred_2 = _2824;
                    frontier_phi_63_pred_3 = _2823;
                    frontier_phi_63_pred_4 = _2822;
                    frontier_phi_63_pred_5 = _2821;
                }
                _2623 = frontier_phi_63_pred;
                _2621 = frontier_phi_63_pred_1;
                _2619 = frontier_phi_63_pred_2;
                _2617 = frontier_phi_63_pred_3;
                _2615 = frontier_phi_63_pred_4;
                _2613 = frontier_phi_63_pred_5;
                uint _2772 = _2771 + 1u;
                if (_2772 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2765 = _2613;
                    _2766 = _2615;
                    _2767 = _2617;
                    _2768 = _2619;
                    _2769 = _2621;
                    _2770 = _2623;
                    _2771 = _2772;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2612 = _2613;
            _2614 = _2615;
            _2616 = _2617;
            _2618 = _2619;
            _2620 = _2621;
            _2622 = _2623;
        }
        uvec4 _2626 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2627 = _2626.z;
        uint _2629 = (_2627 >> 8u) & 15u;
        float _2733;
        float _2735;
        float _2737;
        float _2739;
        float _2741;
        float _2743;
        if (((4294967295u << _2629) & _2469) == 0u)
        {
            _2733 = _2612;
            _2735 = _2614;
            _2737 = _2616;
            _2739 = _2618;
            _2741 = _2620;
            _2743 = _2622;
        }
        else
        {
            float _2758 = inversesqrt(dot(vec3(_2423, _2424, _2425), vec3(_2423, _2424, _2425)));
            float _2759 = _2758 * _2423;
            float _2760 = _2758 * _2424;
            float _2761 = _2758 * _2425;
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2629 < ((_2627 >> 12u) & 15u))
            {
                float _2734;
                float _2736;
                float _2738;
                float _2740;
                float _2742;
                float _2744;
                float _2872 = _2612;
                float _2873 = _2614;
                float _2874 = _2616;
                float _2875 = _2618;
                float _2876 = _2620;
                float _2877 = _2622;
                uint _2878 = _2629;
                uint _2887;
                bool _2888;
                for (;;)
                {
                    _2887 = texelFetch(g_lightClassification, int((((_2463 << 5u) + (_2449 << 9u)) + (_2878 << 2u)) >> 2u)).x;
                    _2888 = _2887 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_2888)
                    {
                        frontier_phi_69_pred = _2877;
                        frontier_phi_69_pred_1 = _2876;
                        frontier_phi_69_pred_2 = _2875;
                        frontier_phi_69_pred_3 = _2874;
                        frontier_phi_69_pred_4 = _2873;
                        frontier_phi_69_pred_5 = _2872;
                    }
                    else
                    {
                        float _3072;
                        float _3073;
                        float _3074;
                        float _3075;
                        float _3076;
                        float _3077;
                        float _3367;
                        float _3368;
                        float _3369;
                        float _3370;
                        float _3371;
                        float _3372;
                        float _3085 = _2872;
                        float _3086 = _2873;
                        float _3087 = _2874;
                        float _3088 = _2875;
                        float _3089 = _2876;
                        float _3090 = _2877;
                        uint _3091 = _2887;
                        uint _3092;
                        vec4 _3117;
                        float _3118;
                        vec4 _3133;
                        vec3 _3145;
                        vec4 _3160;
                        vec4 _3176;
                        float _3223;
                        bool _3224;
                        for (;;)
                        {
                            uint _3102 = ((_2878 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3091));
                            _3092 = (_3091 + 4294967295u) & _3091;
                            uint _3104 = _3102 * 40u;
                            _3117 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3104)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3104 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3104 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3104 + 3u)).x));
                            _3118 = _3117.w;
                            uint _3120 = (_3102 * 40u) + 4u;
                            _3133 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3120)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3120 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3120 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3120 + 3u)).x));
                            uint _3135 = (_3102 * 40u) + 8u;
                            _3145 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3135)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3135 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3135 + 2u)).x));
                            uint _3147 = (_3102 * 40u) + 16u;
                            _3160 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3147)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3147 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3147 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3147 + 3u)).x));
                            uint _3163 = (_3102 * 40u) + 20u;
                            _3176 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3163)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3163 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3163 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3163 + 3u)).x));
                            uint _3179 = (_3102 * 40u) + 24u;
                            vec4 _3192 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3179)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3179 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3179 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3179 + 3u)).x));
                            uint _3198 = (_3102 * 40u) + 28u;
                            vec4 _3211 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3198)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3198 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3198 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3198 + 3u)).x));
                            _3223 = fma(_2425, _3211.z, fma(_2424, _3211.y, _3211.x * _2423)) + _3211.w;
                            _3224 = !((fma(_2425, _3192.z, fma(_2424, _3192.y, _3192.x * _2423)) + _3192.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_3224)
                            {
                                float _3251 = _3117.x - _2423;
                                float _3252 = _3117.y - _2424;
                                float _3253 = _3117.z - _2425;
                                float _3254 = dot(vec3(_3251, _3252, _3253), vec3(_3251, _3252, _3253));
                                float _3257 = inversesqrt(_3254);
                                float _3258 = _3257 * _3251;
                                float _3259 = _3257 * _3252;
                                float _3260 = _3257 * _3253;
                                float _3264 = 1.0 - (_3254 / (_3118 * _3118));
                                float _4324 = isnan(0.0) ? _3264 : (isnan(_3264) ? 0.0 : max(_3264, 0.0));
                                float _3265 = isnan(1.0) ? _4324 : (isnan(_4324) ? 1.0 : min(_4324, 1.0));
                                float _3269 = sqrt(_3254) * _3133.w;
                                float _3271 = 1.39999997615814208984375 / (_3269 + 1.39999997615814208984375);
                                float _3272 = _3271 * _3271;
                                float _3275 = ((1.0 - _3272) * dot(vec3(_3258, _3259, _3260), vec3(_538, _541, _544))) + _3272;
                                float _3278 = _3269 * _3269;
                                float _3282 = (fma(_2425, _3160.z, fma(_2424, _3160.y, _3160.x * _2423)) + _3160.w) / _3223;
                                float _3283 = (fma(_2425, _3176.z, fma(_2424, _3176.y, _3176.x * _2423)) + _3176.w) / _3223;
                                float _3287 = 1.0 - dot(vec2(_3282, _3283), vec2(_3282, _3283));
                                float _4340 = isnan(0.0) ? _3287 : (isnan(_3287) ? 0.0 : max(_3287, 0.0));
                                float _3288 = isnan(1.0) ? _4340 : (isnan(_4340) ? 1.0 : min(_4340, 1.0));
                                float _3289 = _3288 * (((isnan(0.0) ? _3275 : (isnan(_3275) ? 0.0 : max(_3275, 0.0))) * _3265) / ((_3278 * 0.699999988079071044921875) + 1.0));
                                float _3301 = exp2(log2(1.0 / ((_3278 * 3.5) + 5.0)) * 0.25);
                                float _3302 = 1.0 - _742;
                                float _3309 = sqrt(1.0 - ((1.0 - (_3302 * _3302)) * (1.0 - (_3301 * _3301))));
                                float _3310 = _3309 * _3309;
                                float _3311 = _3310 * _3310;
                                float _3312 = _3258 - _2759;
                                float _3313 = _3259 - _2760;
                                float _3314 = _3260 - _2761;
                                float _3318 = inversesqrt(dot(vec3(_3312, _3313, _3314), vec3(_3312, _3313, _3314)));
                                float _3322 = dot(vec3(_538, _541, _544), vec3((-0.0) - _2759, (-0.0) - _2760, (-0.0) - _2761));
                                float _4351 = isnan(0.0) ? _3322 : (isnan(_3322) ? 0.0 : max(_3322, 0.0));
                                float _3325 = isnan(1.0) ? _4351 : (isnan(_4351) ? 1.0 : min(_4351, 1.0));
                                float _3326 = dot(vec3(_538, _541, _544), vec3(_3318 * _3312, _3318 * _3313, _3318 * _3314));
                                float _4362 = isnan(0.0) ? _3326 : (isnan(_3326) ? 0.0 : max(_3326, 0.0));
                                float _3329 = isnan(1.0) ? _4362 : (isnan(_4362) ? 1.0 : min(_4362, 1.0));
                                float _3333 = ((_3329 * _3329) * (_3311 + (-1.0))) + 1.0;
                                float _3334 = _3271 * _3310;
                                float _3335 = _3334 * _3334;
                                float _3341 = ((1.0 - _3335) * dot(vec3(_538, _541, _544), vec3(_3258, _3259, _3260))) + _3335;
                                float _4373 = isnan(0.0) ? _3341 : (isnan(_3341) ? 0.0 : max(_3341, 0.0));
                                float _3342 = isnan(1.0) ? _4373 : (isnan(_4373) ? 1.0 : min(_4373, 1.0));
                                float _3343 = 1.0 - _3310;
                                float _3353 = (0.5 / (((_3342 * ((_3325 * _3343) + _3310)) + 9.9999999392252902907785028219223e-09) + (((_3342 * _3343) + _3310) * _3325))) * _3342;
                                float _4384 = isnan(0.0) ? _3353 : (isnan(_3353) ? 0.0 : max(_3353, 0.0));
                                float _3363 = (_3288 * _3265) * (((_3311 * 3.1415927410125732421875) * (isnan(1.0) ? _4384 : (isnan(_4384) ? 1.0 : min(_4384, 1.0)))) / ((_3333 * _3333) * ((_3278 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_75_pred = _3289 * _3133.z;
                                frontier_phi_75_pred_1 = _3289 * _3133.y;
                                frontier_phi_75_pred_2 = _3289 * _3133.x;
                                frontier_phi_75_pred_3 = _3363 * _3145.z;
                                frontier_phi_75_pred_4 = _3363 * _3145.y;
                                frontier_phi_75_pred_5 = _3363 * _3145.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _3372 = frontier_phi_75_pred;
                            _3371 = frontier_phi_75_pred_1;
                            _3370 = frontier_phi_75_pred_2;
                            _3369 = frontier_phi_75_pred_3;
                            _3368 = frontier_phi_75_pred_4;
                            _3367 = frontier_phi_75_pred_5;
                            _3075 = _3370 + _3088;
                            _3076 = _3371 + _3089;
                            _3077 = _3372 + _3090;
                            _3072 = _3367 + _3085;
                            _3073 = _3368 + _3086;
                            _3074 = _3369 + _3087;
                            if (_3092 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3085 = _3072;
                                _3086 = _3073;
                                _3087 = _3074;
                                _3088 = _3075;
                                _3089 = _3076;
                                _3090 = _3077;
                                _3091 = _3092;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _3077;
                        frontier_phi_69_pred_1 = _3076;
                        frontier_phi_69_pred_2 = _3075;
                        frontier_phi_69_pred_3 = _3074;
                        frontier_phi_69_pred_4 = _3073;
                        frontier_phi_69_pred_5 = _3072;
                    }
                    _2744 = frontier_phi_69_pred;
                    _2742 = frontier_phi_69_pred_1;
                    _2740 = frontier_phi_69_pred_2;
                    _2738 = frontier_phi_69_pred_3;
                    _2736 = frontier_phi_69_pred_4;
                    _2734 = frontier_phi_69_pred_5;
                    uint _2879 = _2878 + 1u;
                    if (_2879 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2872 = _2734;
                        _2873 = _2736;
                        _2874 = _2738;
                        _2875 = _2740;
                        _2876 = _2742;
                        _2877 = _2744;
                        _2878 = _2879;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2744;
                frontier_phi_57_58_ladder_1 = _2742;
                frontier_phi_57_58_ladder_2 = _2740;
                frontier_phi_57_58_ladder_3 = _2738;
                frontier_phi_57_58_ladder_4 = _2736;
                frontier_phi_57_58_ladder_5 = _2734;
            }
            else
            {
                frontier_phi_57_58_ladder = _2622;
                frontier_phi_57_58_ladder_1 = _2620;
                frontier_phi_57_58_ladder_2 = _2618;
                frontier_phi_57_58_ladder_3 = _2616;
                frontier_phi_57_58_ladder_4 = _2614;
                frontier_phi_57_58_ladder_5 = _2612;
            }
            _2733 = frontier_phi_57_58_ladder_5;
            _2735 = frontier_phi_57_58_ladder_4;
            _2737 = frontier_phi_57_58_ladder_3;
            _2739 = frontier_phi_57_58_ladder_2;
            _2741 = frontier_phi_57_58_ladder_1;
            _2743 = frontier_phi_57_58_ladder;
        }
        float _2748 = isnan(1.0) ? _726 : (isnan(_726) ? 1.0 : min(_726, 1.0));
        _2481 = (_2748 * _2739) + _1915;
        _2483 = (_2748 * _2741) + _1917;
        _2485 = (_2748 * _2743) + _1919;
        _2487 = ((_2733 * _712) * _2748) + _2263;
        _2489 = ((_2735 * _713) * _2748) + _2265;
        _2491 = ((_2737 * _714) * _2748) + _2267;
    }
    else
    {
        _2481 = _1915;
        _2483 = _1917;
        _2485 = _1919;
        _2487 = _2263;
        _2489 = _2265;
        _2491 = _2267;
    }
    uint _2497 = _619 + uint(cbMatDynParam._m0[0u].w);
    float _2507 = ((((cbMtdParam._m0[12u].x * cbMtdParam._m0[16u].z) * cbMtdParam._m0[15u].w) * _372) * _385.x) * cbInstanceData._m0[_2497].x;
    float _2512 = ((((cbMtdParam._m0[12u].y * cbMtdParam._m0[16u].z) * cbMtdParam._m0[15u].w) * _372) * _385.y) * cbInstanceData._m0[_2497].y;
    float _2517 = ((((cbMtdParam._m0[12u].z * cbMtdParam._m0[16u].z) * cbMtdParam._m0[15u].w) * _372) * _385.z) * cbInstanceData._m0[_2497].z;
    float _4400 = isnan(0.0) ? _703 : (isnan(_703) ? 0.0 : max(_703, 0.0));
    float _4411 = isnan(0.0) ? _704 : (isnan(_704) ? 0.0 : max(_704, 0.0));
    float _4422 = isnan(0.0) ? _705 : (isnan(_705) ? 0.0 : max(_705, 0.0));
    float _4433 = isnan(0.0) ? _425 : (isnan(_425) ? 0.0 : max(_425, 0.0));
    float _2535 = (((isnan(1.0) ? _4400 : (isnan(_4400) ? 1.0 : min(_4400, 1.0))) * (_2481 + ((isnan(0.0) ? _1456 : (isnan(_1456) ? 0.0 : max(_1456, 0.0))) * _726))) + ((_2487 + ((isnan(0.0) ? _1747 : (isnan(_1747) ? 0.0 : max(_1747, 0.0))) * _1532)) * cbPerFrame._m0[3u].x)) + _2507;
    float _2537 = (_2512 + ((_2489 + ((isnan(0.0) ? _1750 : (isnan(_1750) ? 0.0 : max(_1750, 0.0))) * _1532)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4411 : (isnan(_4411) ? 1.0 : min(_4411, 1.0))) * (_2483 + ((isnan(0.0) ? _1459 : (isnan(_1459) ? 0.0 : max(_1459, 0.0))) * _726)));
    float _2539 = (_2517 + ((_2491 + ((isnan(0.0) ? _1753 : (isnan(_1753) ? 0.0 : max(_1753, 0.0))) * _1532)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4422 : (isnan(_4422) ? 1.0 : min(_4422, 1.0))) * (_2485 + ((isnan(0.0) ? _1462 : (isnan(_1462) ? 0.0 : max(_1462, 0.0))) * _726)));
    float _4459 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2552 = isnan(1.0) ? _4459 : (isnan(_4459) ? 1.0 : min(_4459, 1.0));
    float _2557 = cbInstanceData._m0[_617 + 6u].w * (isnan(1.0) ? _4433 : (isnan(_4433) ? 1.0 : min(_4433, 1.0)));
    float _2562 = _513 / cbSceneParam._m0[86u].x;
    float _2563 = _514 / cbSceneParam._m0[86u].y;
    vec4 _2577 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2562, _2563, (log2((isnan(cbSceneParam._m0[77u].w) ? _446 : (isnan(_446) ? cbSceneParam._m0[77u].w : min(_446, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2579 = _2577.x;
    float _2580 = _2577.y;
    float _2581 = _2577.z;
    float _2582 = _2577.w;
    float _2674;
    float _2676;
    float _2678;
    float _2680;
    if (_446 > cbSceneParam._m0[78u].w)
    {
        float _2637 = isnan(_446) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _446 : min(cbSceneParam._m0[80u].w, _446));
        float _2638 = _2637 / _446;
        float _2649 = _2638 * _498;
        float _2650 = _499 * _2638;
        float _2651 = (-0.0) - _2650;
        float _2652 = _2638 * _500;
        float _2654 = (cbSceneParam._m0[77u].w * _2651) / _2637;
        float _2655 = _2654 + cbSceneParam._m0[79u].w;
        float _2656 = cbSceneParam._m0[79u].w - _2650;
        float _2662 = sqrt(((_2649 * _2649) + (_2650 * _2650)) + (_2652 * _2652));
        float _2665 = (1.0 - (cbSceneParam._m0[77u].w / _2637)) * _2662;
        float _2670 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2672 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2834;
        if (abs((_2651 - _2654) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2834 = ((((_2655 > 0.0) ? exp2(_2670 * _2655) : (2.0 - exp2(_2672 * _2655))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2665;
        }
        else
        {
            float _2794 = 1.0 / cbSceneParam._m0[80u].x;
            float _2795 = isnan(_2656) ? _2655 : (isnan(_2655) ? _2656 : max(_2655, _2656));
            float _2796 = isnan(_2656) ? _2655 : (isnan(_2655) ? _2656 : min(_2655, _2656));
            float _2805 = isnan(0.0) ? _2795 : (isnan(_2795) ? 0.0 : min(_2795, 0.0));
            float _2806 = isnan(0.0) ? _2796 : (isnan(_2796) ? 0.0 : min(_2796, 0.0));
            _2834 = ((abs(_2662 / _2651) * cbSceneParam._m0[80u].y) * ((((_2805 - _2806) * 2.0) - ((exp2(_2670 * (isnan(0.0) ? _2795 : (isnan(_2795) ? 0.0 : max(_2795, 0.0)))) - exp2(_2670 * (isnan(0.0) ? _2796 : (isnan(_2796) ? 0.0 : max(_2796, 0.0))))) * _2794)) - ((exp2(_2672 * _2805) - exp2(_2672 * _2806)) * _2794))) + (_2665 * cbSceneParam._m0[80u].z);
        }
        vec4 _2836 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2562, _2563, 1.0), 0.0);
        float _2845 = exp2((_2834 * (-1.44269502162933349609375)) * (1.0 - _2836.w));
        float _2846 = log2(_2845);
        float _2862 = log2(_2582);
        _2674 = (exp2(_2862 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2846 * cbSceneParam._m0[78u].x)) * _2836.x) / cbSceneParam._m0[78u].x)) + _2579;
        _2676 = (exp2(_2862 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2846 * cbSceneParam._m0[78u].y)) * _2836.y) / cbSceneParam._m0[78u].y)) + _2580;
        _2678 = (exp2(_2862 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2846 * cbSceneParam._m0[78u].z)) * _2836.z) / cbSceneParam._m0[78u].z)) + _2581;
        _2680 = _2845 * _2582;
    }
    else
    {
        _2674 = _2579;
        _2676 = _2580;
        _2678 = _2581;
        _2680 = _2582;
    }
    float _2692 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2693 = _2692 == 3.0;
    float _2694 = log2(_2680);
    float _2698 = exp2(_2694 * cbSceneParam._m0[78u].x);
    float _2699 = exp2(_2694 * cbSceneParam._m0[78u].y);
    float _2700 = exp2(_2694 * cbSceneParam._m0[78u].z);
    float _2701 = _2698 * (isnan(0.0) ? _2535 : (isnan(_2535) ? 0.0 : max(_2535, 0.0)));
    float _2702 = _2699 * (isnan(0.0) ? _2537 : (isnan(_2537) ? 0.0 : max(_2537, 0.0)));
    float _2703 = _2700 * (isnan(0.0) ? _2539 : (isnan(_2539) ? 0.0 : max(_2539, 0.0)));
    float _2712 = (_2692 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2712 * (_2693 ? _2701 : (_2701 + (cbSceneParam._m0[72u].w * _2674)));
    SV_Target.y = _2712 * (_2693 ? _2702 : (_2702 + (cbSceneParam._m0[72u].w * _2676)));
    SV_Target.z = _2712 * (_2693 ? _2703 : (_2703 + (cbSceneParam._m0[72u].w * _2678)));
    SV_Target.w = _2557;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2507) * _2552) * _2698) * _2712;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2512) * _2552) * _2699) * _2712;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2517) * _2552) * _2700) * _2712;
    SV_Target_1.w = _2557;
}


