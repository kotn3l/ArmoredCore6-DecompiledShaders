#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[18];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_1;
layout(set = 0, binding = 1) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_7;
layout(set = 0, binding = 10) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_6;
layout(set = 0, binding = 12) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_0;
layout(set = 0, binding = 3) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_10;
layout(set = 0, binding = 4) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_11;
layout(set = 0, binding = 5) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_12;
layout(set = 0, binding = 7) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1243;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _207 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _208 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _209 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _215 = inversesqrt(dot(vec3(_207, _208, _209), vec3(_207, _208, _209)));
    float _222 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _223 = _222 * NORMAL.x;
    float _224 = _222 * NORMAL.y;
    float _225 = _222 * NORMAL.z;
    float _229 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _237;
    float _238;
    float _239;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _237 = (-0.0) - _223;
        _238 = (-0.0) - _224;
        _239 = (-0.0) - _225;
    }
    else
    {
        _237 = _223;
        _238 = _224;
        _239 = _225;
    }
    vec4 _252 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _258 = _252.w;
    vec4 _270 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _287 = exp2(log2(1.0 - _258) * 8.0);
    vec4 _299 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_10, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _315 = exp2(log2(_258) * 8.0);
    vec4 _328 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _353 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _362 = ((_270.x * 4.55000019073486328125) * cbMtdParam._m0[9u].x) * _353.x;
    float _365 = ((_270.y * 4.55000019073486328125) * cbMtdParam._m0[9u].y) * _353.y;
    float _368 = ((_270.z * 4.55000019073486328125) * cbMtdParam._m0[9u].z) * _353.z;
    float _375 = (((cbMtdParam._m0[13u].x * _299.x) - _362) * _287) + _362;
    float _376 = (((cbMtdParam._m0[13u].y * _299.y) - _365) * _287) + _365;
    float _377 = (((cbMtdParam._m0[13u].z * _299.z) - _368) * _287) + _368;
    float _384 = (((cbMtdParam._m0[11u].x * _328.x) - _375) * _315) + _375;
    float _385 = (((cbMtdParam._m0[11u].y * _328.y) - _376) * _315) + _376;
    float _386 = (((cbMtdParam._m0[11u].z * _328.z) - _377) * _315) + _377;
    float _387 = _353.w * _270.w;
    float _411 = cbMtdParam._m0[16u].x + texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w)).x;
    float _415 = ((cbMtdParam._m0[15u].z - _411) * _287) + _411;
    float _418 = ((cbMtdParam._m0[16u].w - _415) * _315) + _415;
    vec4 _431 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w));
    float _433 = _431.x;
    float _434 = _431.y;
    vec4 _453 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    vec4 _471 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _479 = (_252.z * 2.0) * (cbMtdParam._m0[14u].x + _431.z);
    float _483 = (((_453.z - _479) + cbMtdParam._m0[15u].y) * _287) + _479;
    float _487 = (((_471.z - _483) + cbMtdParam._m0[14u].w) * _315) + _483;
    float _501 = abs((fract(cbMtdParam._m0[15u].x * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _3622 = isnan(0.0) ? _501 : (isnan(_501) ? 0.0 : max(_501, 0.0));
    float _502 = isnan(1.0) ? _3622 : (isnan(_3622) ? 1.0 : min(_3622, 1.0));
    float _507 = (_502 * _502) * (3.0 - (_502 * 2.0));
    vec4 _520 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _528 = (_252.x * 2.0) + (-1.0);
    float _529 = (_252.y * 2.0) + (-1.0);
    float _530 = dot(vec2(_528, _529), vec2(_528, _529));
    float _3633 = isnan(0.0) ? _530 : (isnan(_530) ? 0.0 : max(_530, 0.0));
    float _535 = sqrt(1.0 - (isnan(1.0) ? _3633 : (isnan(_3633) ? 1.0 : min(_3633, 1.0))));
    float _540 = ((_453.x - _433) * _287) + _433;
    float _541 = ((_453.y - _434) * _287) + _434;
    float _554 = (cbMtdParam._m0[14u].z * (((((_471.x - _540) * _315) + _540) * 2.0) + (-1.0))) + _528;
    float _555 = (cbMtdParam._m0[14u].z * (((((_471.y - _541) * _315) + _541) * 2.0) + (-1.0))) + _529;
    float _558 = fma(_535, _237, fma(_555, _229 * TANGENT.x, (_215 * _207) * _554));
    float _561 = fma(_535, _238, fma(_555, _229 * TANGENT.y, (_215 * _208) * _554));
    float _564 = fma(_535, _239, fma(_555, _229 * TANGENT.z, (_215 * _209) * _554));
    float _568 = inversesqrt(dot(vec3(_558, _561, _564), vec3(_558, _561, _564)));
    float _569 = _568 * _558;
    float _570 = _568 * _561;
    float _571 = _568 * _564;
    float _3644 = isnan(0.0) ? _387 : (isnan(_387) ? 0.0 : max(_387, 0.0));
    float _572 = isnan(1.0) ? _3644 : (isnan(_3644) ? 1.0 : min(_3644, 1.0));
    float _3655 = isnan(0.0) ? _487 : (isnan(_487) ? 0.0 : max(_487, 0.0));
    float _573 = isnan(1.0) ? _3655 : (isnan(_3655) ? 1.0 : min(_3655, 1.0));
    float _3666 = isnan(0.0) ? _384 : (isnan(_384) ? 0.0 : max(_384, 0.0));
    float _574 = isnan(1.0) ? _3666 : (isnan(_3666) ? 1.0 : min(_3666, 1.0));
    float _3677 = isnan(0.0) ? _385 : (isnan(_385) ? 0.0 : max(_385, 0.0));
    float _575 = isnan(1.0) ? _3677 : (isnan(_3677) ? 1.0 : min(_3677, 1.0));
    float _3688 = isnan(0.0) ? _386 : (isnan(_386) ? 0.0 : max(_386, 0.0));
    float _576 = isnan(1.0) ? _3688 : (isnan(_3688) ? 1.0 : min(_3688, 1.0));
    float _3699 = isnan(0.0) ? _418 : (isnan(_418) ? 0.0 : max(_418, 0.0));
    float _577 = isnan(1.0) ? _3699 : (isnan(_3699) ? 1.0 : min(_3699, 1.0));
    float _593 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _633 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _643 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _633);
    float _644 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _633);
    float _645 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _633);
    float _649 = inversesqrt(dot(vec3(_643, _644, _645), vec3(_643, _644, _645)));
    float _650 = _643 * _649;
    float _651 = _644 * _649;
    float _652 = _645 * _649;
    float _658 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _659 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _661 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _663 = _661.w;
    float _682 = fma(_571, cbSceneParam._m0[5u].z, fma(_570, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _569));
    float _685 = fma(_571, cbSceneParam._m0[6u].z, fma(_570, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _569));
    float _688 = fma(_571, cbSceneParam._m0[7u].z, fma(_570, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _569));
    vec4 _690 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _692 = _690.x;
    float _704 = (((_690.y - _573) + (_690.w * _573)) * cbMtdParam._m0[3u].x) + _573;
    vec4 _705 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _721 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3(cbMtdParam._m0[3u].x * (_692 * _692)), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * _705.z;
    float _729 = (((cbMatDynParam._m0[15u].x - _577) * cbMatDynParam._m0[15u].w) * _721) + _577;
    float _737 = ((_721 * cbMatDynParam._m0[16u].z) * (cbMatDynParam._m0[16u].x - _704)) + _704;
    uint _761 = uint(roundEven(NORMAL.w)) * 13u;
    uint _762 = _761 + 9u;
    uint _763 = _762 + uint(cbMatDynParam._m0[0u].w);
    float _769 = (cbMtdParam._m0[0u].x * _574) * cbInstanceData._m0[_763].x;
    float _770 = (cbMtdParam._m0[0u].y * _575) * cbInstanceData._m0[_763].y;
    float _771 = (cbMtdParam._m0[0u].z * _576) * cbInstanceData._m0[_763].z;
    float _3710 = isnan(0.0) ? _769 : (isnan(_769) ? 0.0 : max(_769, 0.0));
    float _772 = isnan(1.0) ? _3710 : (isnan(_3710) ? 1.0 : min(_3710, 1.0));
    float _3721 = isnan(0.0) ? _770 : (isnan(_770) ? 0.0 : max(_770, 0.0));
    float _773 = isnan(1.0) ? _3721 : (isnan(_3721) ? 1.0 : min(_3721, 1.0));
    float _3732 = isnan(0.0) ? _771 : (isnan(_771) ? 0.0 : max(_771, 0.0));
    float _774 = isnan(1.0) ? _3732 : (isnan(_3732) ? 1.0 : min(_3732, 1.0));
    vec4 _775 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _780 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _791 = (((_780.x - _729) + (_780.w * _729)) * cbMtdParam._m0[3u].x) + _729;
    float _804 = (cbMtdParam._m0[3u].x * (((_772 * _663) - _772) + _775.x)) + _772;
    float _805 = (cbMtdParam._m0[3u].x * (((_773 * _663) - _773) + _775.y)) + _773;
    float _806 = (cbMtdParam._m0[3u].x * (((_774 * _663) - _774) + _775.z)) + _774;
    vec4 _807 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _820 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3((_729 * (_574 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625, (_729 * (_575 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625, (_729 * (_576 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * _807.z;
    float _824 = _820 * cbMatDynParam._m0[13u].w;
    float _834 = (_824 * (cbMatDynParam._m0[13u].x - _804)) + _804;
    float _835 = (_824 * (cbMatDynParam._m0[13u].y - _805)) + _805;
    float _836 = (_824 * (cbMatDynParam._m0[13u].z - _806)) + _806;
    float _844 = ((_820 * cbMatDynParam._m0[15u].w) * (cbMatDynParam._m0[15u].x - _791)) + _791;
    float _845 = 1.0 - _844;
    float _846 = _845 * _834;
    float _847 = _845 * _835;
    float _848 = _845 * _836;
    float _852 = (_834 + (-0.039999999105930328369140625)) * _844;
    float _853 = (_835 + (-0.039999999105930328369140625)) * _844;
    float _854 = (_836 + (-0.039999999105930328369140625)) * _844;
    float _855 = _852 + 0.039999999105930328369140625;
    float _856 = _853 + 0.039999999105930328369140625;
    float _857 = _854 + 0.039999999105930328369140625;
    vec4 _866 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _658, cbSceneParam._m0[86u].y * _659));
    float _869 = _866.x * TEXCOORD_4;
    float _870 = dot(vec3(_569, _570, _571), vec3(_650, _651, _652));
    float _873 = _870 * 2.0;
    float _877 = (_873 * _569) - _650;
    float _878 = (_873 * _570) - _651;
    float _879 = (_873 * _571) - _652;
    float _883 = abs(dot(vec3(_650, _651, _652), vec3(_569, _570, _571)));
    float _3743 = isnan(0.0) ? _883 : (isnan(_883) ? 0.0 : max(_883, 0.0));
    float _885 = sqrt(_737);
    float _897 = exp2((_885 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3743 : (isnan(_3743) ? 1.0 : min(_3743, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_885 * 3.0));
    float _903 = (1.0 - _897) * ((_885 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _904 = _897 * _885;
    float _932 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _936 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _940 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1242;
    float _1244;
    float _1245;
    float _1246;
    float _1247;
    float _1248;
    float _1249;
    float _1250;
    float _1251;
    float _1252;
    float _1253;
    float _1254;
    float _1255;
    float _1256;
    float _1257;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _967 = fma(_940, cbModelParam._m0[26u].z, fma(_936, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _932));
        float _971 = fma(_940, cbModelParam._m0[27u].z, fma(_936, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _932));
        float _975 = fma(_940, cbModelParam._m0[28u].z, fma(_936, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _932));
        float _1000 = _932 + _569;
        float _1001 = _936 + _570;
        float _1002 = _940 + _571;
        float _1012 = fma(_1002, cbModelParam._m0[26u].z, fma(_1001, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1000)) - _967;
        float _1013 = fma(_1002, cbModelParam._m0[27u].z, fma(_1001, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1000)) - _971;
        float _1014 = fma(_1002, cbModelParam._m0[28u].z, fma(_1001, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1000)) - _975;
        float _1018 = inversesqrt(dot(vec3(_1012, _1013, _1014), vec3(_1012, _1013, _1014)));
        float _1031 = ((_1018 * _1012) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_967 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1032 = ((_1018 * _1013) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_971 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1033 = ((_1018 * _1014) / cbModelParam._m0[34u].z) + ((((((_975 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1036 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1031, _1032, _1033), 0.0);
        vec4 _1043 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1031, _1032, _1033), 0.0);
        vec4 _1050 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1031, _1032, _1033), 0.0);
        vec4 _1057 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1031, _1032, _1033), 0.0);
        float _1070 = exp2((_1036.w + (-0.5)) * 20.0) * 2.0;
        float _1071 = _1070 * (_1036.x + (-0.5));
        float _1072 = _1070 * (_1036.y + (-0.5));
        float _1073 = _1070 * (_1036.z + (-0.5));
        float _1080 = exp2((_1043.w + (-0.5)) * 20.0) * 2.0;
        float _1081 = _1080 * (_1043.x + (-0.5));
        float _1082 = _1080 * (_1043.y + (-0.5));
        float _1083 = _1080 * (_1043.z + (-0.5));
        float _1090 = exp2((_1050.w + (-0.5)) * 20.0) * 2.0;
        float _1091 = _1090 * (_1050.x + (-0.5));
        float _1092 = _1090 * (_1050.y + (-0.5));
        float _1093 = _1090 * (_1050.z + (-0.5));
        float _1100 = exp2((_1057.w + (-0.5)) * 20.0) * 2.0;
        float _1101 = _1100 * (_1057.x + (-0.5));
        float _1102 = _1100 * (_1057.y + (-0.5));
        float _1103 = _1100 * (_1057.z + (-0.5));
        float _1104 = isnan(0.0) ? _1101 : (isnan(_1101) ? 0.0 : max(_1101, 0.0));
        float _1105 = isnan(0.0) ? _1102 : (isnan(_1102) ? 0.0 : max(_1102, 0.0));
        float _1106 = isnan(0.0) ? _1103 : (isnan(_1103) ? 0.0 : max(_1103, 0.0));
        float _1107 = _1071 * 0.5;
        float _1108 = _1081 * 0.5;
        float _1109 = _1091 * 0.5;
        float _1110 = dot(vec3(_1107, _1108, _1109), vec3(_1107, _1108, _1109));
        float _1115 = (_1110 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1110);
        float _1124 = (dot(vec3(_569, _570, _571), vec3(_1115 * _1107, _1115 * _1108, _1115 * _1109)) + 1.0) * 0.5;
        float _3769 = isnan(0.0) ? _1124 : (isnan(_1124) ? 0.0 : max(_1124, 0.0));
        float _1134 = sqrt(((_1108 * _1108) + (_1107 * _1107)) + (_1109 * _1109)) / (_1104 + 9.9999997473787516355514526367188e-06);
        float _3780 = isnan(0.0) ? _1134 : (isnan(_1134) ? 0.0 : max(_1134, 0.0));
        float _1135 = isnan(1.0) ? _3780 : (isnan(_3780) ? 1.0 : min(_3780, 1.0));
        float _1136 = _1135 * 2.0;
        float _1140 = (1.0 - _1135) / (_1135 + 1.0);
        float _3791 = isnan(0.0) ? _1140 : (isnan(_1140) ? 0.0 : max(_1140, 0.0));
        float _1141 = isnan(1.0) ? _3791 : (isnan(_3791) ? 1.0 : min(_3791, 1.0));
        float _1150 = ((((1.0 - _1141) * (_1136 + 2.0)) * exp2(log2(isnan(1.0) ? _3769 : (isnan(_3769) ? 1.0 : min(_3769, 1.0))) * (_1136 + 1.0))) + _1141) * _1104;
        float _1151 = _1072 * 0.5;
        float _1152 = _1082 * 0.5;
        float _1153 = _1092 * 0.5;
        float _1154 = dot(vec3(_1151, _1152, _1153), vec3(_1151, _1152, _1153));
        float _1159 = (_1154 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1154);
        float _1167 = (dot(vec3(_569, _570, _571), vec3(_1159 * _1151, _1159 * _1152, _1159 * _1153)) + 1.0) * 0.5;
        float _3802 = isnan(0.0) ? _1167 : (isnan(_1167) ? 0.0 : max(_1167, 0.0));
        float _1176 = sqrt(((_1152 * _1152) + (_1151 * _1151)) + (_1153 * _1153)) / (_1105 + 9.9999997473787516355514526367188e-06);
        float _3813 = isnan(0.0) ? _1176 : (isnan(_1176) ? 0.0 : max(_1176, 0.0));
        float _1177 = isnan(1.0) ? _3813 : (isnan(_3813) ? 1.0 : min(_3813, 1.0));
        float _1178 = _1177 * 2.0;
        float _1182 = (1.0 - _1177) / (_1177 + 1.0);
        float _3824 = isnan(0.0) ? _1182 : (isnan(_1182) ? 0.0 : max(_1182, 0.0));
        float _1183 = isnan(1.0) ? _3824 : (isnan(_3824) ? 1.0 : min(_3824, 1.0));
        float _1192 = ((((1.0 - _1183) * (_1178 + 2.0)) * exp2(log2(isnan(1.0) ? _3802 : (isnan(_3802) ? 1.0 : min(_3802, 1.0))) * (_1178 + 1.0))) + _1183) * _1105;
        float _1193 = _1073 * 0.5;
        float _1194 = _1083 * 0.5;
        float _1195 = _1093 * 0.5;
        float _1196 = dot(vec3(_1193, _1194, _1195), vec3(_1193, _1194, _1195));
        float _1201 = (_1196 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1196);
        float _1209 = (dot(vec3(_569, _570, _571), vec3(_1201 * _1193, _1201 * _1194, _1201 * _1195)) + 1.0) * 0.5;
        float _3835 = isnan(0.0) ? _1209 : (isnan(_1209) ? 0.0 : max(_1209, 0.0));
        float _1218 = sqrt(((_1194 * _1194) + (_1193 * _1193)) + (_1195 * _1195)) / (_1106 + 9.9999997473787516355514526367188e-06);
        float _3846 = isnan(0.0) ? _1218 : (isnan(_1218) ? 0.0 : max(_1218, 0.0));
        float _1219 = isnan(1.0) ? _3846 : (isnan(_3846) ? 1.0 : min(_3846, 1.0));
        float _1220 = _1219 * 2.0;
        float _1224 = (1.0 - _1219) / (_1219 + 1.0);
        float _3857 = isnan(0.0) ? _1224 : (isnan(_1224) ? 0.0 : max(_1224, 0.0));
        float _1225 = isnan(1.0) ? _3857 : (isnan(_3857) ? 1.0 : min(_3857, 1.0));
        float _1234 = ((((1.0 - _1225) * (_1220 + 2.0)) * exp2(log2(isnan(1.0) ? _3835 : (isnan(_3835) ? 1.0 : min(_3835, 1.0))) * (_1220 + 1.0))) + _1225) * _1106;
        _1242 = _1073;
        _1244 = _1072;
        _1245 = _1071;
        _1246 = _1083;
        _1247 = _1082;
        _1248 = _1081;
        _1249 = _1093;
        _1250 = _1092;
        _1251 = _1091;
        _1252 = _1106;
        _1253 = _1105;
        _1254 = _1104;
        _1255 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1150 : (isnan(_1150) ? 0.0 : max(_1150, 0.0)));
        _1256 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1192 : (isnan(_1192) ? 0.0 : max(_1192, 0.0)));
        _1257 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1234 : (isnan(_1234) ? 0.0 : max(_1234, 0.0)));
    }
    else
    {
        _1242 = _1243;
        _1244 = _1243;
        _1245 = _1243;
        _1246 = _1243;
        _1247 = _1243;
        _1248 = _1243;
        _1249 = _1243;
        _1250 = _1243;
        _1251 = _1243;
        _1252 = _1243;
        _1253 = _1243;
        _1254 = _1243;
        _1255 = 0.0;
        _1256 = 0.0;
        _1257 = 0.0;
    }
    float _1552;
    float _1553;
    float _1554;
    float _1555;
    float _1556;
    float _1557;
    float _1558;
    float _1559;
    float _1560;
    float _1561;
    float _1562;
    float _1563;
    float _1564;
    float _1565;
    float _1566;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1283 = fma(_940, cbModelParam._m0[30u].z, fma(_936, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _932));
        float _1287 = fma(_940, cbModelParam._m0[31u].z, fma(_936, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _932));
        float _1291 = fma(_940, cbModelParam._m0[32u].z, fma(_936, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _932));
        float _1314 = _932 + _569;
        float _1315 = _936 + _570;
        float _1316 = _940 + _571;
        float _1326 = fma(_1316, cbModelParam._m0[30u].z, fma(_1315, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1314)) - _1283;
        float _1327 = fma(_1316, cbModelParam._m0[31u].z, fma(_1315, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1314)) - _1287;
        float _1328 = fma(_1316, cbModelParam._m0[32u].z, fma(_1315, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1314)) - _1291;
        float _1332 = inversesqrt(dot(vec3(_1326, _1327, _1328), vec3(_1326, _1327, _1328)));
        float _1345 = ((_1332 * _1326) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1283 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1346 = ((_1332 * _1327) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1287 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1347 = ((_1332 * _1328) / cbModelParam._m0[35u].z) + ((((((_1291 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1349 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1345, _1346, _1347), 0.0);
        vec4 _1356 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1345, _1346, _1347), 0.0);
        vec4 _1363 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1345, _1346, _1347), 0.0);
        vec4 _1370 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1345, _1346, _1347), 0.0);
        float _1382 = exp2((_1349.w + (-0.5)) * 20.0) * 2.0;
        float _1383 = _1382 * (_1349.x + (-0.5));
        float _1384 = _1382 * (_1349.y + (-0.5));
        float _1385 = _1382 * (_1349.z + (-0.5));
        float _1392 = exp2((_1356.w + (-0.5)) * 20.0) * 2.0;
        float _1393 = _1392 * (_1356.x + (-0.5));
        float _1394 = _1392 * (_1356.y + (-0.5));
        float _1395 = _1392 * (_1356.z + (-0.5));
        float _1402 = exp2((_1363.w + (-0.5)) * 20.0) * 2.0;
        float _1403 = _1402 * (_1363.x + (-0.5));
        float _1404 = _1402 * (_1363.y + (-0.5));
        float _1405 = _1402 * (_1363.z + (-0.5));
        float _1412 = exp2((_1370.w + (-0.5)) * 20.0) * 2.0;
        float _1413 = _1412 * (_1370.x + (-0.5));
        float _1414 = _1412 * (_1370.y + (-0.5));
        float _1415 = _1412 * (_1370.z + (-0.5));
        float _1416 = isnan(0.0) ? _1413 : (isnan(_1413) ? 0.0 : max(_1413, 0.0));
        float _1417 = isnan(0.0) ? _1414 : (isnan(_1414) ? 0.0 : max(_1414, 0.0));
        float _1418 = isnan(0.0) ? _1415 : (isnan(_1415) ? 0.0 : max(_1415, 0.0));
        float _1419 = _1383 * 0.5;
        float _1420 = _1393 * 0.5;
        float _1421 = _1403 * 0.5;
        float _1422 = dot(vec3(_1419, _1420, _1421), vec3(_1419, _1420, _1421));
        float _1427 = (_1422 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1422);
        float _1435 = (dot(vec3(_569, _570, _571), vec3(_1427 * _1419, _1427 * _1420, _1427 * _1421)) + 1.0) * 0.5;
        float _3898 = isnan(0.0) ? _1435 : (isnan(_1435) ? 0.0 : max(_1435, 0.0));
        float _1444 = sqrt(((_1420 * _1420) + (_1419 * _1419)) + (_1421 * _1421)) / (_1416 + 9.9999997473787516355514526367188e-06);
        float _3909 = isnan(0.0) ? _1444 : (isnan(_1444) ? 0.0 : max(_1444, 0.0));
        float _1445 = isnan(1.0) ? _3909 : (isnan(_3909) ? 1.0 : min(_3909, 1.0));
        float _1446 = _1445 * 2.0;
        float _1450 = (1.0 - _1445) / (_1445 + 1.0);
        float _3920 = isnan(0.0) ? _1450 : (isnan(_1450) ? 0.0 : max(_1450, 0.0));
        float _1451 = isnan(1.0) ? _3920 : (isnan(_3920) ? 1.0 : min(_3920, 1.0));
        float _1460 = ((((1.0 - _1451) * (_1446 + 2.0)) * exp2(log2(isnan(1.0) ? _3898 : (isnan(_3898) ? 1.0 : min(_3898, 1.0))) * (_1446 + 1.0))) + _1451) * _1416;
        float _1461 = _1384 * 0.5;
        float _1462 = _1394 * 0.5;
        float _1463 = _1404 * 0.5;
        float _1464 = dot(vec3(_1461, _1462, _1463), vec3(_1461, _1462, _1463));
        float _1469 = (_1464 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1464);
        float _1477 = (dot(vec3(_569, _570, _571), vec3(_1469 * _1461, _1469 * _1462, _1469 * _1463)) + 1.0) * 0.5;
        float _3931 = isnan(0.0) ? _1477 : (isnan(_1477) ? 0.0 : max(_1477, 0.0));
        float _1486 = sqrt(((_1462 * _1462) + (_1461 * _1461)) + (_1463 * _1463)) / (_1417 + 9.9999997473787516355514526367188e-06);
        float _3942 = isnan(0.0) ? _1486 : (isnan(_1486) ? 0.0 : max(_1486, 0.0));
        float _1487 = isnan(1.0) ? _3942 : (isnan(_3942) ? 1.0 : min(_3942, 1.0));
        float _1488 = _1487 * 2.0;
        float _1492 = (1.0 - _1487) / (_1487 + 1.0);
        float _3953 = isnan(0.0) ? _1492 : (isnan(_1492) ? 0.0 : max(_1492, 0.0));
        float _1493 = isnan(1.0) ? _3953 : (isnan(_3953) ? 1.0 : min(_3953, 1.0));
        float _1502 = ((((1.0 - _1493) * (_1488 + 2.0)) * exp2(log2(isnan(1.0) ? _3931 : (isnan(_3931) ? 1.0 : min(_3931, 1.0))) * (_1488 + 1.0))) + _1493) * _1417;
        float _1503 = _1385 * 0.5;
        float _1504 = _1395 * 0.5;
        float _1505 = _1405 * 0.5;
        float _1506 = dot(vec3(_1503, _1504, _1505), vec3(_1503, _1504, _1505));
        float _1511 = (_1506 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1506);
        float _1519 = (dot(vec3(_569, _570, _571), vec3(_1511 * _1503, _1511 * _1504, _1511 * _1505)) + 1.0) * 0.5;
        float _3964 = isnan(0.0) ? _1519 : (isnan(_1519) ? 0.0 : max(_1519, 0.0));
        float _1528 = sqrt(((_1504 * _1504) + (_1503 * _1503)) + (_1505 * _1505)) / (_1418 + 9.9999997473787516355514526367188e-06);
        float _3975 = isnan(0.0) ? _1528 : (isnan(_1528) ? 0.0 : max(_1528, 0.0));
        float _1529 = isnan(1.0) ? _3975 : (isnan(_3975) ? 1.0 : min(_3975, 1.0));
        float _1530 = _1529 * 2.0;
        float _1534 = (1.0 - _1529) / (_1529 + 1.0);
        float _3986 = isnan(0.0) ? _1534 : (isnan(_1534) ? 0.0 : max(_1534, 0.0));
        float _1535 = isnan(1.0) ? _3986 : (isnan(_3986) ? 1.0 : min(_3986, 1.0));
        float _1544 = ((((1.0 - _1535) * (_1530 + 2.0)) * exp2(log2(isnan(1.0) ? _3964 : (isnan(_3964) ? 1.0 : min(_3964, 1.0))) * (_1530 + 1.0))) + _1535) * _1418;
        _1552 = _1385;
        _1553 = _1384;
        _1554 = _1383;
        _1555 = _1395;
        _1556 = _1394;
        _1557 = _1393;
        _1558 = _1405;
        _1559 = _1404;
        _1560 = _1403;
        _1561 = _1418;
        _1562 = _1417;
        _1563 = _1416;
        _1564 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1460 : (isnan(_1460) ? 0.0 : max(_1460, 0.0)));
        _1565 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1502 : (isnan(_1502) ? 0.0 : max(_1502, 0.0)));
        _1566 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1544 : (isnan(_1544) ? 0.0 : max(_1544, 0.0)));
    }
    else
    {
        _1552 = _1243;
        _1553 = _1243;
        _1554 = _1243;
        _1555 = _1243;
        _1556 = _1243;
        _1557 = _1243;
        _1558 = _1243;
        _1559 = _1243;
        _1560 = _1243;
        _1561 = _1243;
        _1562 = _1243;
        _1563 = _1243;
        _1564 = 0.0;
        _1565 = 0.0;
        _1566 = 0.0;
    }
    float _1576 = (cbModelParam._m0[1u].x * (_1564 - _1255)) + _1255;
    float _1577 = (cbModelParam._m0[1u].x * (_1565 - _1256)) + _1256;
    float _1578 = (cbModelParam._m0[1u].x * (_1566 - _1257)) + _1257;
    float _1599 = fma(_1578, cbSceneParam._m0[89u].z, fma(_1577, cbSceneParam._m0[89u].y, _1576 * cbSceneParam._m0[89u].x));
    float _1602 = fma(_1578, cbSceneParam._m0[90u].z, fma(_1577, cbSceneParam._m0[90u].y, _1576 * cbSceneParam._m0[90u].x));
    float _1605 = fma(_1578, cbSceneParam._m0[91u].z, fma(_1577, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1576));
    float _1620 = _877 * 0.5;
    float _1621 = _878 * 0.5;
    float _1622 = _879 * 0.5;
    float _1623 = dot(vec4(_1620, _1621, _1622, 1.0), vec4(_1554, _1557, _1560, _1563));
    float _1626 = dot(vec4(_1620, _1621, _1622, 1.0), vec4(_1553, _1556, _1559, _1562));
    float _1629 = dot(vec4(_1620, _1621, _1622, 1.0), vec4(_1552, _1555, _1558, _1561));
    float _1660;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1636 = dot(vec4(_1620, _1621, _1622, 1.0), vec4(_1242, _1246, _1249, _1252));
        float _1640 = dot(vec4(_1620, _1621, _1622, 1.0), vec4(_1244, _1247, _1250, _1253));
        float _1644 = dot(vec4(_1620, _1621, _1622, 1.0), vec4(_1245, _1248, _1251, _1254));
        float _1651 = dot(vec4(cbModelParam._m0[39u]), vec4(_1620, _1621, _1622, 1.0));
        _1660 = dot(vec3(isnan(0.0) ? _1644 : (isnan(_1644) ? 0.0 : max(_1644, 0.0)), isnan(0.0) ? _1640 : (isnan(_1640) ? 0.0 : max(_1640, 0.0)), isnan(0.0) ? _1636 : (isnan(_1636) ? 0.0 : max(_1636, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1651) ? 0.0 : (isnan(0.0) ? _1651 : max(0.0, _1651))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1660 = 1.0;
    }
    float _1671;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1662 = dot(vec4(cbModelParam._m0[40u]), vec4(_1620, _1621, _1622, 1.0));
        _1671 = dot(vec3(isnan(0.0) ? _1623 : (isnan(_1623) ? 0.0 : max(_1623, 0.0)), isnan(0.0) ? _1626 : (isnan(_1626) ? 0.0 : max(_1626, 0.0)), isnan(0.0) ? _1629 : (isnan(_1629) ? 0.0 : max(_1629, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1662) ? 0.0 : (isnan(0.0) ? _1662 : max(0.0, _1662))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1671 = 1.0;
    }
    float _1675 = (_1671 * cbModelParam._m0[1u].x) + (_1660 * (1.0 - cbModelParam._m0[1u].x));
    float _1685 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _737);
    float _1686 = isnan(_1685) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1685 : min(cbModelParam._m0[25u].z, _1685));
    float _1766;
    float _1768;
    float _1770;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1733 = fma(_940, cbModelParam._m0[13u].z, fma(_936, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _932)) + cbModelParam._m0[13u].w;
        float _1737 = fma(_940, cbModelParam._m0[14u].z, fma(_936, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _932)) + cbModelParam._m0[14u].w;
        float _1741 = fma(_940, cbModelParam._m0[15u].z, fma(_936, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _932)) + cbModelParam._m0[15u].w;
        float _1744 = fma(_879, cbModelParam._m0[13u].z, fma(_878, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _877));
        float _1747 = fma(_879, cbModelParam._m0[14u].z, fma(_878, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _877));
        float _1750 = fma(_879, cbModelParam._m0[15u].z, fma(_878, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _877));
        float _1778;
        if (_1744 > 0.0)
        {
            _1778 = abs((1.0 - _1733) / _1744);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1744 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1733 + 1.0) / _1744);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1778 = frontier_phi_16_14_ladder;
        }
        float _1982;
        if (_1747 > 0.0)
        {
            _1982 = abs((1.0 - _1737) / _1747);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1747 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1737 + 1.0) / _1747);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1982 = frontier_phi_25_21_ladder;
        }
        float _2236;
        if (_1750 > 0.0)
        {
            _2236 = abs((1.0 - _1741) / _1750);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1750 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1741 + 1.0) / _1750);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2236 = frontier_phi_37_32_ladder;
        }
        float _2238 = isnan(_1982) ? _1778 : (isnan(_1778) ? _1982 : min(_1778, _1982));
        float _2239 = isnan(_2236) ? _2238 : (isnan(_2238) ? _2236 : min(_2238, _2236));
        float _2243 = (_2239 * _1744) + _1733;
        float _2244 = (_2239 * _1747) + _1737;
        float _2245 = (_2239 * _1750) + _1741;
        float _2246 = _2239 * 9.9999997473787516355514526367188e-05;
        float _2248 = (-1.0) - _2246;
        float _2250 = _2246 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_2245 > _2250) || ((_2245 < _2248) || ((_2244 > _2250) || ((_2244 < _2248) || ((_2243 < _2248) || (_2243 > _2250))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2373 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2245, cbModelParam._m0[9u].z, fma(_2244, cbModelParam._m0[9u].y, _2243 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2245, cbModelParam._m0[10u].z, fma(_2244, cbModelParam._m0[10u].y, _2243 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2245, cbModelParam._m0[11u].z, fma(_2244, cbModelParam._m0[11u].y, _2243 * cbModelParam._m0[11u].x))), _1686);
            frontier_phi_15_37_ladder = _2373.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2373.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2373.x * cbModelParam._m0[1u].y;
        }
        _1766 = frontier_phi_15_37_ladder_2;
        _1768 = frontier_phi_15_37_ladder_1;
        _1770 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1754 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_877, _878, _879), _1686);
        _1766 = _1754.x * cbModelParam._m0[1u].y;
        _1768 = _1754.y * cbModelParam._m0[1u].y;
        _1770 = _1754.z * cbModelParam._m0[1u].y;
    }
    float _1774 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _737);
    float _1775 = isnan(_1774) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1774 : min(cbModelParam._m0[25u].w, _1774));
    float _1866;
    float _1868;
    float _1870;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1830 = fma(_940, cbModelParam._m0[21u].z, fma(_936, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _932)) + cbModelParam._m0[21u].w;
        float _1834 = fma(_940, cbModelParam._m0[22u].z, fma(_936, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _932)) + cbModelParam._m0[22u].w;
        float _1838 = fma(_940, cbModelParam._m0[23u].z, fma(_936, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _932)) + cbModelParam._m0[23u].w;
        float _1841 = fma(_879, cbModelParam._m0[21u].z, fma(_878, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _877));
        float _1844 = fma(_879, cbModelParam._m0[22u].z, fma(_878, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _877));
        float _1847 = fma(_879, cbModelParam._m0[23u].z, fma(_878, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _877));
        float _1987;
        if (_1841 > 0.0)
        {
            _1987 = abs((1.0 - _1830) / _1841);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1841 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1830 + 1.0) / _1841);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1987 = frontier_phi_27_23_ladder;
        }
        float _2263;
        if (_1844 > 0.0)
        {
            _2263 = abs((1.0 - _1834) / _1844);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1844 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1834 + 1.0) / _1844);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _2263 = frontier_phi_39_34_ladder;
        }
        float _2476;
        if (_1847 > 0.0)
        {
            _2476 = abs((1.0 - _1838) / _1847);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1847 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1838 + 1.0) / _1847);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _2476 = frontier_phi_48_45_ladder;
        }
        float _2478 = isnan(_2263) ? _1987 : (isnan(_1987) ? _2263 : min(_1987, _2263));
        float _2479 = isnan(_2476) ? _2478 : (isnan(_2478) ? _2476 : min(_2478, _2476));
        float _2483 = (_2479 * _1841) + _1830;
        float _2484 = (_2479 * _1844) + _1834;
        float _2485 = (_2479 * _1847) + _1838;
        float _2486 = _2479 * 9.9999997473787516355514526367188e-05;
        float _2487 = (-1.0) - _2486;
        float _2489 = _2486 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2485 > _2489) || ((_2485 < _2487) || ((_2484 > _2489) || ((_2484 < _2487) || ((_2483 < _2487) || (_2483 > _2489))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2726 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2485, cbModelParam._m0[17u].z, fma(_2484, cbModelParam._m0[17u].y, _2483 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2485, cbModelParam._m0[18u].z, fma(_2484, cbModelParam._m0[18u].y, _2483 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2485, cbModelParam._m0[19u].z, fma(_2484, cbModelParam._m0[19u].y, _2483 * cbModelParam._m0[19u].x))), _1775);
            frontier_phi_24_48_ladder = _2726.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2726.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2726.x * cbModelParam._m0[1u].z;
        }
        _1866 = frontier_phi_24_48_ladder_2;
        _1868 = frontier_phi_24_48_ladder_1;
        _1870 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1850 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_877, _878, _879), _1775);
        _1866 = _1850.x * cbModelParam._m0[1u].z;
        _1868 = _1850.y * cbModelParam._m0[1u].z;
        _1870 = _1850.z * cbModelParam._m0[1u].z;
    }
    float _1883 = (((_903 * _855) + _904) * _869) * ((cbModelParam._m0[1u].w * (_1866 - _1766)) + _1766);
    float _1885 = (((_903 * _856) + _904) * _869) * ((cbModelParam._m0[1u].w * (_1868 - _1768)) + _1768);
    float _1887 = (((_903 * _857) + _904) * _869) * ((cbModelParam._m0[1u].w * (_1870 - _1770)) + _1770);
    float _1890 = fma(_1887, cbSceneParam._m0[89u].z, fma(_1885, cbSceneParam._m0[89u].y, _1883 * cbSceneParam._m0[89u].x));
    float _1893 = fma(_1887, cbSceneParam._m0[90u].z, fma(_1885, cbSceneParam._m0[90u].y, _1883 * cbSceneParam._m0[90u].x));
    float _1896 = fma(_1887, cbSceneParam._m0[91u].z, fma(_1885, cbSceneParam._m0[91u].y, _1883 * cbSceneParam._m0[91u].x));
    uvec4 _1906 = floatBitsToUint(cbInstanceData._m0[_761 + 5u]);
    uint _1908 = _1906.x * 14u;
    uint _1909 = _1908 + 13u;
    float _1916 = _869 + (-1.0);
    float _1921 = (cbLight._m0[_1909].x * _1916) + 1.0;
    float _1922 = (cbLight._m0[_1909].y * _1916) + 1.0;
    float _1923 = (cbLight._m0[_1909].z * _1916) + 1.0;
    float _1924 = (cbLight._m0[_1909].w * _1916) + 1.0;
    uint _1925 = _1908 + 5u;
    float _1931 = isnan(1.0) ? _1922 : (isnan(_1922) ? 1.0 : min(_1922, 1.0));
    uint _1935 = _1908 + 4u;
    float _1941 = isnan(1.0) ? _1921 : (isnan(_1921) ? 1.0 : min(_1921, 1.0));
    uint _1945 = _1908 | 1u;
    float _1956 = dot(vec3(cbLight._m0[_1908].xyz), vec3(_569, _570, _571));
    float _1959 = dot(vec3(cbLight._m0[_1945].xyz), vec3(_569, _570, _571));
    float _4122 = isnan(0.0) ? _1956 : (isnan(_1956) ? 0.0 : max(_1956, 0.0));
    float _4133 = isnan(0.0) ? _1959 : (isnan(_1959) ? 0.0 : max(_1959, 0.0));
    float _1964 = (isnan(1.0) ? _4122 : (isnan(_4122) ? 1.0 : min(_4122, 1.0))) * 0.3183098733425140380859375;
    float _1966 = (isnan(1.0) ? _4133 : (isnan(_4133) ? 1.0 : min(_4133, 1.0))) * 0.3183098733425140380859375;
    float _1973 = ((cbLight._m0[_1925].x * _1931) * _1966) + ((cbLight._m0[_1935].x * _1941) * _1964);
    float _1974 = ((_1931 * cbLight._m0[_1925].y) * _1966) + ((_1941 * cbLight._m0[_1935].y) * _1964);
    float _1975 = ((_1931 * cbLight._m0[_1925].z) * _1966) + ((_1941 * cbLight._m0[_1935].z) * _1964);
    uvec4 _1979 = floatBitsToUint(cbLight._m0[_1908 + 12u]);
    bool _1981 = _1979.x == 0u;
    float _1992;
    float _1994;
    float _1996;
    if (_1981)
    {
        _1992 = _1973;
        _1994 = _1974;
        _1996 = _1975;
    }
    else
    {
        uint _2000 = _1908 + 6u;
        float _2016 = (dot(vec3(cbLight._m0[_1908 + 2u].xyz), vec3(_569, _570, _571)) * 0.5) + 0.5;
        float _2017 = _2016 * _2016;
        float _4144 = isnan(0.0) ? _2017 : (isnan(_2017) ? 0.0 : max(_2017, 0.0));
        float _2018 = isnan(1.0) ? _4144 : (isnan(_4144) ? 1.0 : min(_4144, 1.0));
        float _2019 = isnan(1.0) ? _1923 : (isnan(_1923) ? 1.0 : min(_1923, 1.0));
        _1992 = (((cbLight._m0[_2000].x * 0.3183098733425140380859375) * _2018) * _2019) + _1973;
        _1994 = (((cbLight._m0[_2000].y * 0.3183098733425140380859375) * _2018) * _2019) + _1974;
        _1996 = (((cbLight._m0[_2000].z * 0.3183098733425140380859375) * _2018) * _2019) + _1975;
    }
    bool _1999 = _1979.y == 0u;
    float _2037;
    float _2039;
    float _2041;
    if (_1999)
    {
        _2037 = _1992;
        _2039 = _1994;
        _2041 = _1996;
    }
    else
    {
        uint _2207 = _1908 + 7u;
        float _2223 = (dot(vec3(cbLight._m0[_1908 + 3u].xyz), vec3(_569, _570, _571)) * 0.5) + 0.5;
        float _2224 = _2223 * _2223;
        float _4160 = isnan(0.0) ? _2224 : (isnan(_2224) ? 0.0 : max(_2224, 0.0));
        float _2225 = isnan(1.0) ? _4160 : (isnan(_4160) ? 1.0 : min(_4160, 1.0));
        float _2226 = isnan(1.0) ? _1924 : (isnan(_1924) ? 1.0 : min(_1924, 1.0));
        _2037 = (((cbLight._m0[_2207].x * 0.3183098733425140380859375) * _2225) * _2226) + _1992;
        _2039 = (((cbLight._m0[_2207].y * 0.3183098733425140380859375) * _2225) * _2226) + _1994;
        _2041 = (((cbLight._m0[_2207].z * 0.3183098733425140380859375) * _2225) * _2226) + _1996;
    }
    uint _2044 = _1908 + 8u;
    float _2057 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1908].w)) * _737) * 0.949999988079071044921875);
    float _2058 = _2057 * _2057;
    float _2059 = cbLight._m0[_1908].x + _650;
    float _2060 = cbLight._m0[_1908].y + _651;
    float _2061 = cbLight._m0[_1908].z + _652;
    float _2065 = inversesqrt(dot(vec3(_2059, _2060, _2061), vec3(_2059, _2060, _2061)));
    float _2066 = _2065 * _2059;
    float _2067 = _2065 * _2060;
    float _2068 = _2065 * _2061;
    float _2069 = dot(vec3(_569, _570, _571), vec3(cbLight._m0[_1908].xyz));
    float _4176 = isnan(0.0) ? _2069 : (isnan(_2069) ? 0.0 : max(_2069, 0.0));
    float _2072 = isnan(1.0) ? _4176 : (isnan(_4176) ? 1.0 : min(_4176, 1.0));
    float _4187 = isnan(0.0) ? _870 : (isnan(_870) ? 0.0 : max(_870, 0.0));
    float _2073 = isnan(1.0) ? _4187 : (isnan(_4187) ? 1.0 : min(_4187, 1.0));
    float _2074 = dot(vec3(_569, _570, _571), vec3(_2066, _2067, _2068));
    float _4198 = isnan(0.0) ? _2074 : (isnan(_2074) ? 0.0 : max(_2074, 0.0));
    float _2077 = isnan(1.0) ? _4198 : (isnan(_4198) ? 1.0 : min(_4198, 1.0));
    float _2078 = dot(vec3(cbLight._m0[_1908].xyz), vec3(_2066, _2067, _2068));
    float _4209 = isnan(0.0) ? _2078 : (isnan(_2078) ? 0.0 : max(_2078, 0.0));
    float _2082 = _2058 * _2058;
    float _2086 = ((_2077 * _2077) * (_2082 + (-1.0))) + 1.0;
    float _2094 = exp2(log2(1.0 - (isnan(1.0) ? _4209 : (isnan(_4209) ? 1.0 : min(_4209, 1.0)))) * 5.0);
    float _2095 = 0.959999978542327880859375 - _852;
    float _2097 = 0.959999978542327880859375 - _853;
    float _2098 = 0.959999978542327880859375 - _854;
    float _2105 = 1.0 - _2058;
    float _2116 = (0.5 / (((_2073 * ((_2072 * _2105) + _2058)) + 9.9999999392252902907785028219223e-09) + (((_2073 * _2105) + _2058) * _2072))) * _2072;
    float _4220 = isnan(0.0) ? _2116 : (isnan(_2116) ? 0.0 : max(_2116, 0.0));
    float _2118 = (isnan(1.0) ? _4220 : (isnan(_4220) ? 1.0 : min(_4220, 1.0))) * (_2082 / ((_2086 * _2086) * 3.141590118408203125));
    uint _2129 = _1908 + 9u;
    float _2140 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1945].w)) * _737) * 0.949999988079071044921875);
    float _2141 = _2140 * _2140;
    float _2142 = cbLight._m0[_1945].x + _650;
    float _2143 = cbLight._m0[_1945].y + _651;
    float _2144 = cbLight._m0[_1945].z + _652;
    float _2148 = inversesqrt(dot(vec3(_2142, _2143, _2144), vec3(_2142, _2143, _2144)));
    float _2149 = _2148 * _2142;
    float _2150 = _2148 * _2143;
    float _2151 = _2148 * _2144;
    float _2152 = dot(vec3(_569, _570, _571), vec3(cbLight._m0[_1945].xyz));
    float _4231 = isnan(0.0) ? _2152 : (isnan(_2152) ? 0.0 : max(_2152, 0.0));
    float _2155 = isnan(1.0) ? _4231 : (isnan(_4231) ? 1.0 : min(_4231, 1.0));
    float _2156 = dot(vec3(_569, _570, _571), vec3(_2149, _2150, _2151));
    float _4242 = isnan(0.0) ? _2156 : (isnan(_2156) ? 0.0 : max(_2156, 0.0));
    float _2159 = isnan(1.0) ? _4242 : (isnan(_4242) ? 1.0 : min(_4242, 1.0));
    float _2160 = dot(vec3(cbLight._m0[_1945].xyz), vec3(_2149, _2150, _2151));
    float _4253 = isnan(0.0) ? _2160 : (isnan(_2160) ? 0.0 : max(_2160, 0.0));
    float _2164 = _2141 * _2141;
    float _2168 = ((_2159 * _2159) * (_2164 + (-1.0))) + 1.0;
    float _2175 = exp2(log2(1.0 - (isnan(1.0) ? _4253 : (isnan(_4253) ? 1.0 : min(_4253, 1.0)))) * 5.0);
    float _2182 = 1.0 - _2141;
    float _2192 = (0.5 / (((_2073 * ((_2155 * _2182) + _2141)) + 9.9999999392252902907785028219223e-09) + (((_2073 * _2182) + _2141) * _2155))) * _2155;
    float _4264 = isnan(0.0) ? _2192 : (isnan(_2192) ? 0.0 : max(_2192, 0.0));
    float _2194 = (isnan(1.0) ? _4264 : (isnan(_4264) ? 1.0 : min(_4264, 1.0))) * (_2164 / ((_2168 * _2168) * 3.141590118408203125));
    float _2204 = (((((_2175 * _2095) + _855) * cbLight._m0[_2129].x) * _2194) * _1931) + (((((_2094 * _2095) + _855) * cbLight._m0[_2044].x) * _2118) * _1941);
    float _2205 = (((((_2175 * _2097) + _856) * cbLight._m0[_2129].y) * _2194) * _1931) + (((((_2094 * _2097) + _856) * cbLight._m0[_2044].y) * _2118) * _1941);
    float _2206 = (((((_2175 * _2098) + _857) * cbLight._m0[_2129].z) * _2194) * _1931) + (((((_2094 * _2098) + _857) * cbLight._m0[_2044].z) * _2118) * _1941);
    float _2268;
    float _2270;
    float _2272;
    if (_1981)
    {
        _2268 = _2204;
        _2270 = _2205;
        _2272 = _2206;
    }
    else
    {
        uint _2274 = _1908 + 2u;
        uint _2278 = _1908 + 10u;
        float _2292 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2274].w)) * _737) * 0.949999988079071044921875);
        float _2293 = _2292 * _2292;
        float _2294 = cbLight._m0[_2274].x + _650;
        float _2295 = cbLight._m0[_2274].y + _651;
        float _2296 = cbLight._m0[_2274].z + _652;
        float _2300 = inversesqrt(dot(vec3(_2294, _2295, _2296), vec3(_2294, _2295, _2296)));
        float _2301 = _2300 * _2294;
        float _2302 = _2300 * _2295;
        float _2303 = _2300 * _2296;
        float _2304 = dot(vec3(_569, _570, _571), vec3(cbLight._m0[_2274].xyz));
        float _4275 = isnan(0.0) ? _2304 : (isnan(_2304) ? 0.0 : max(_2304, 0.0));
        float _2307 = isnan(1.0) ? _4275 : (isnan(_4275) ? 1.0 : min(_4275, 1.0));
        float _2308 = dot(vec3(_569, _570, _571), vec3(_2301, _2302, _2303));
        float _4286 = isnan(0.0) ? _2308 : (isnan(_2308) ? 0.0 : max(_2308, 0.0));
        float _2311 = isnan(1.0) ? _4286 : (isnan(_4286) ? 1.0 : min(_4286, 1.0));
        float _2312 = dot(vec3(cbLight._m0[_2274].xyz), vec3(_2301, _2302, _2303));
        float _4297 = isnan(0.0) ? _2312 : (isnan(_2312) ? 0.0 : max(_2312, 0.0));
        float _2316 = _2293 * _2293;
        float _2320 = ((_2311 * _2311) * (_2316 + (-1.0))) + 1.0;
        float _2327 = exp2(log2(1.0 - (isnan(1.0) ? _4297 : (isnan(_4297) ? 1.0 : min(_4297, 1.0)))) * 5.0);
        float _2334 = 1.0 - _2293;
        float _2344 = (0.5 / (((_2073 * ((_2307 * _2334) + _2293)) + 9.9999999392252902907785028219223e-09) + (((_2073 * _2334) + _2293) * _2307))) * _2307;
        float _4308 = isnan(0.0) ? _2344 : (isnan(_2344) ? 0.0 : max(_2344, 0.0));
        float _2346 = (isnan(1.0) ? _4308 : (isnan(_4308) ? 1.0 : min(_4308, 1.0))) * (_2316 / ((_2320 * _2320) * 3.141590118408203125));
        float _2347 = isnan(1.0) ? _1923 : (isnan(_1923) ? 1.0 : min(_1923, 1.0));
        _2268 = (((((_2327 * _2095) + _855) * cbLight._m0[_2278].x) * _2346) * _2347) + _2204;
        _2270 = (((((_2327 * _2097) + _856) * cbLight._m0[_2278].y) * _2346) * _2347) + _2205;
        _2272 = (((((_2327 * _2098) + _857) * cbLight._m0[_2278].z) * _2346) * _2347) + _2206;
    }
    float _2382;
    float _2384;
    float _2386;
    if (_1999)
    {
        _2382 = _2268;
        _2384 = _2270;
        _2386 = _2272;
    }
    else
    {
        uint _2393 = _1908 + 3u;
        uint _2397 = _1908 + 11u;
        float _2411 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2393].w)) * _737) * 0.949999988079071044921875);
        float _2412 = _2411 * _2411;
        float _2413 = cbLight._m0[_2393].x + _650;
        float _2414 = cbLight._m0[_2393].y + _651;
        float _2415 = cbLight._m0[_2393].z + _652;
        float _2419 = inversesqrt(dot(vec3(_2413, _2414, _2415), vec3(_2413, _2414, _2415)));
        float _2420 = _2419 * _2413;
        float _2421 = _2419 * _2414;
        float _2422 = _2419 * _2415;
        float _2423 = dot(vec3(_569, _570, _571), vec3(cbLight._m0[_2393].xyz));
        float _4324 = isnan(0.0) ? _2423 : (isnan(_2423) ? 0.0 : max(_2423, 0.0));
        float _2426 = isnan(1.0) ? _4324 : (isnan(_4324) ? 1.0 : min(_4324, 1.0));
        float _2427 = dot(vec3(_569, _570, _571), vec3(_2420, _2421, _2422));
        float _4335 = isnan(0.0) ? _2427 : (isnan(_2427) ? 0.0 : max(_2427, 0.0));
        float _2430 = isnan(1.0) ? _4335 : (isnan(_4335) ? 1.0 : min(_4335, 1.0));
        float _2431 = dot(vec3(cbLight._m0[_2393].xyz), vec3(_2420, _2421, _2422));
        float _4346 = isnan(0.0) ? _2431 : (isnan(_2431) ? 0.0 : max(_2431, 0.0));
        float _2435 = _2412 * _2412;
        float _2439 = ((_2430 * _2430) * (_2435 + (-1.0))) + 1.0;
        float _2446 = exp2(log2(1.0 - (isnan(1.0) ? _4346 : (isnan(_4346) ? 1.0 : min(_4346, 1.0)))) * 5.0);
        float _2453 = 1.0 - _2412;
        float _2463 = (0.5 / (((_2073 * ((_2426 * _2453) + _2412)) + 9.9999999392252902907785028219223e-09) + (((_2073 * _2453) + _2412) * _2426))) * _2426;
        float _4357 = isnan(0.0) ? _2463 : (isnan(_2463) ? 0.0 : max(_2463, 0.0));
        float _2465 = (isnan(1.0) ? _4357 : (isnan(_4357) ? 1.0 : min(_4357, 1.0))) * (_2435 / ((_2439 * _2439) * 3.141590118408203125));
        float _2466 = isnan(1.0) ? _1924 : (isnan(_1924) ? 1.0 : min(_1924, 1.0));
        _2382 = (((((_2446 * _2095) + _855) * cbLight._m0[_2397].x) * _2465) * _2466) + _2268;
        _2384 = (((((_2446 * _2097) + _856) * cbLight._m0[_2397].y) * _2465) * _2466) + _2270;
        _2386 = (((((_2446 * _2098) + _857) * cbLight._m0[_2397].z) * _2465) * _2466) + _2272;
    }
    float _2600;
    float _2602;
    float _2604;
    float _2606;
    float _2608;
    float _2610;
    if (_1906.y == 0u)
    {
        float _2541 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2542 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2541;
        float _2543 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2541;
        float _2544 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2541;
        uvec4 _2556 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2557 = _2556.x;
        uint _2568 = uint((float(_2556.y) * floor(float(uint(cbSceneParam._m0[85u].y * _659) / _2557))) + floor(float(uint(cbSceneParam._m0[85u].x * _658) / _2557)));
        float _2578 = (log2(_2544 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2579 = isnan(0.0) ? _2578 : (isnan(_2578) ? 0.0 : max(_2578, 0.0));
        uint _2582 = uint(isnan(14.0) ? _2579 : (isnan(_2579) ? 14.0 : min(_2579, 14.0)));
        uvec4 _2587 = texelFetch(g_lightClusterGridBuffer, int(((_2582 << 2u) + (_2568 << 6u)) >> 2u));
        uint _2588 = _2587.x;
        uint _2589 = _2556.z;
        float _2731;
        float _2733;
        float _2735;
        float _2737;
        float _2739;
        float _2741;
        if (((((1u << ((_2589 >> 4u) & 15u)) + 4294967295u) & _2588) == 0u) || ((_2589 & 240u) == 0u))
        {
            _2731 = 0.0;
            _2733 = 0.0;
            _2735 = 0.0;
            _2737 = 0.0;
            _2739 = 0.0;
            _2741 = 0.0;
        }
        else
        {
            float _2732;
            float _2734;
            float _2736;
            float _2738;
            float _2740;
            float _2742;
            float _2884 = 0.0;
            float _2885 = 0.0;
            float _2886 = 0.0;
            float _2887 = 0.0;
            float _2888 = 0.0;
            float _2889 = 0.0;
            uint _2890 = 0u;
            uint _2899;
            bool _2900;
            for (;;)
            {
                _2899 = texelFetch(g_lightClassification, int((((_2582 << 5u) + (_2568 << 9u)) + (_2890 << 2u)) >> 2u)).x;
                _2900 = _2899 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2900)
                {
                    frontier_phi_63_pred = _2889;
                    frontier_phi_63_pred_1 = _2888;
                    frontier_phi_63_pred_2 = _2887;
                    frontier_phi_63_pred_3 = _2886;
                    frontier_phi_63_pred_4 = _2885;
                    frontier_phi_63_pred_5 = _2884;
                }
                else
                {
                    float _3008;
                    float _3009;
                    float _3010;
                    float _3011;
                    float _3012;
                    float _3013;
                    uint _3014;
                    _3008 = _2884;
                    _3009 = _2885;
                    _3010 = _2886;
                    _3011 = _2887;
                    _3012 = _2888;
                    _3013 = _2889;
                    _3014 = _2899;
                    float _2940;
                    float _2941;
                    float _2942;
                    float _2943;
                    float _2944;
                    float _2945;
                    for (;;)
                    {
                        uint _3018 = uint(findLSB(_3014)) + (_2890 << 5u);
                        uint _3015 = (_3014 + 4294967295u) & _3014;
                        uint _3020 = _3018 * 48u;
                        vec4 _3034 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3020)).x, texelFetch(g_PointLightRenderingBuffer, int(_3020 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3020 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3020 + 3u)).x));
                        uint _3040 = (_3018 * 48u) + 4u;
                        vec4 _3053 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3040)).x, texelFetch(g_PointLightRenderingBuffer, int(_3040 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3040 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3040 + 3u)).x));
                        uint _3059 = (_3018 * 48u) + 8u;
                        vec3 _3070 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3059)).x, texelFetch(g_PointLightRenderingBuffer, int(_3059 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3059 + 2u)).x));
                        float _3074 = _3034.x - _2542;
                        float _3075 = _3034.y - _2543;
                        float _3076 = _3034.z - _2544;
                        float _3077 = dot(vec3(_3074, _3075, _3076), vec3(_3074, _3075, _3076));
                        float _3080 = inversesqrt(_3077);
                        float _3081 = _3080 * _3074;
                        float _3082 = _3080 * _3075;
                        float _3083 = _3080 * _3076;
                        float _3084 = dot(vec3(_682, _685, _688), vec3(_3081, _3082, _3083));
                        float _3089 = 1.0 - (_3077 * _3034.w);
                        float _4383 = isnan(0.0) ? _3089 : (isnan(_3089) ? 0.0 : max(_3089, 0.0));
                        float _3090 = isnan(1.0) ? _4383 : (isnan(_4383) ? 1.0 : min(_4383, 1.0));
                        float _3091 = sqrt(_3077) * _3053.w;
                        float _3094 = 1.39999997615814208984375 / (_3091 + 1.39999997615814208984375);
                        float _3095 = _3094 * _3094;
                        float _3098 = ((1.0 - _3095) * _3084) + _3095;
                        float _3101 = _3091 * _3091;
                        float _3105 = ((isnan(0.0) ? _3098 : (isnan(_3098) ? 0.0 : max(_3098, 0.0))) * _3090) / ((_3101 * 0.699999988079071044921875) + 1.0);
                        float _3109 = (-0.0) - _2542;
                        float _3110 = (-0.0) - _2543;
                        float _3111 = (-0.0) - _2544;
                        float _3115 = inversesqrt(dot(vec3(_3109, _3110, _3111), vec3(_3109, _3110, _3111)));
                        float _3116 = _3115 * _3109;
                        float _3117 = _3115 * _3110;
                        float _3118 = _3115 * _3111;
                        float _3126 = exp2(log2(1.0 / ((_3101 * 3.5) + 5.0)) * 0.25);
                        float _3127 = 1.0 - _885;
                        float _3134 = sqrt(1.0 - ((1.0 - (_3127 * _3127)) * (1.0 - (_3126 * _3126))));
                        float _3135 = _3134 * _3134;
                        float _3136 = _3135 * _3135;
                        float _3137 = _3116 + _3081;
                        float _3138 = _3117 + _3082;
                        float _3139 = _3118 + _3083;
                        float _3143 = inversesqrt(dot(vec3(_3137, _3138, _3139), vec3(_3137, _3138, _3139)));
                        float _3147 = dot(vec3(_682, _685, _688), vec3(_3116, _3117, _3118));
                        float _4399 = isnan(0.0) ? _3147 : (isnan(_3147) ? 0.0 : max(_3147, 0.0));
                        float _3150 = isnan(1.0) ? _4399 : (isnan(_4399) ? 1.0 : min(_4399, 1.0));
                        float _3151 = dot(vec3(_682, _685, _688), vec3(_3143 * _3137, _3143 * _3138, _3143 * _3139));
                        float _4410 = isnan(0.0) ? _3151 : (isnan(_3151) ? 0.0 : max(_3151, 0.0));
                        float _3154 = isnan(1.0) ? _4410 : (isnan(_4410) ? 1.0 : min(_4410, 1.0));
                        float _3158 = ((_3154 * _3154) * (_3136 + (-1.0))) + 1.0;
                        float _3159 = _3094 * _3135;
                        float _3160 = _3159 * _3159;
                        float _3163 = ((1.0 - _3160) * _3084) + _3160;
                        float _4421 = isnan(0.0) ? _3163 : (isnan(_3163) ? 0.0 : max(_3163, 0.0));
                        float _3164 = isnan(1.0) ? _4421 : (isnan(_4421) ? 1.0 : min(_4421, 1.0));
                        float _3165 = 1.0 - _3135;
                        float _3175 = (0.5 / (((_3164 * ((_3150 * _3165) + _3135)) + 9.9999999392252902907785028219223e-09) + (((_3164 * _3165) + _3135) * _3150))) * _3164;
                        float _4432 = isnan(0.0) ? _3175 : (isnan(_3175) ? 0.0 : max(_3175, 0.0));
                        float _3186 = (((_3136 * 3.1415927410125732421875) * (isnan(1.0) ? _4432 : (isnan(_4432) ? 1.0 : min(_4432, 1.0)))) / ((_3158 * _3158) * ((_3101 * 2.1991131305694580078125) + 3.141590118408203125))) * _3090;
                        _2943 = (_3105 * _3053.x) + _3011;
                        _2944 = (_3105 * _3053.y) + _3012;
                        _2945 = (_3105 * _3053.z) + _3013;
                        _2940 = (_3186 * _3070.x) + _3008;
                        _2941 = (_3186 * _3070.y) + _3009;
                        _2942 = (_3186 * _3070.z) + _3010;
                        if (_3015 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3008 = _2940;
                            _3009 = _2941;
                            _3010 = _2942;
                            _3011 = _2943;
                            _3012 = _2944;
                            _3013 = _2945;
                            _3014 = _3015;
                        }
                    }
                    frontier_phi_63_pred = _2945;
                    frontier_phi_63_pred_1 = _2944;
                    frontier_phi_63_pred_2 = _2943;
                    frontier_phi_63_pred_3 = _2942;
                    frontier_phi_63_pred_4 = _2941;
                    frontier_phi_63_pred_5 = _2940;
                }
                _2742 = frontier_phi_63_pred;
                _2740 = frontier_phi_63_pred_1;
                _2738 = frontier_phi_63_pred_2;
                _2736 = frontier_phi_63_pred_3;
                _2734 = frontier_phi_63_pred_4;
                _2732 = frontier_phi_63_pred_5;
                uint _2891 = _2890 + 1u;
                if (_2891 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2884 = _2732;
                    _2885 = _2734;
                    _2886 = _2736;
                    _2887 = _2738;
                    _2888 = _2740;
                    _2889 = _2742;
                    _2890 = _2891;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2731 = _2732;
            _2733 = _2734;
            _2735 = _2736;
            _2737 = _2738;
            _2739 = _2740;
            _2741 = _2742;
        }
        uvec4 _2745 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2746 = _2745.z;
        uint _2748 = (_2746 >> 8u) & 15u;
        float _2852;
        float _2854;
        float _2856;
        float _2858;
        float _2860;
        float _2862;
        if (((4294967295u << _2748) & _2588) == 0u)
        {
            _2852 = _2731;
            _2854 = _2733;
            _2856 = _2735;
            _2858 = _2737;
            _2860 = _2739;
            _2862 = _2741;
        }
        else
        {
            float _2877 = inversesqrt(dot(vec3(_2542, _2543, _2544), vec3(_2542, _2543, _2544)));
            float _2878 = _2877 * _2542;
            float _2879 = _2877 * _2543;
            float _2880 = _2877 * _2544;
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2748 < ((_2746 >> 12u) & 15u))
            {
                float _2853;
                float _2855;
                float _2857;
                float _2859;
                float _2861;
                float _2863;
                float _2991 = _2731;
                float _2992 = _2733;
                float _2993 = _2735;
                float _2994 = _2737;
                float _2995 = _2739;
                float _2996 = _2741;
                uint _2997 = _2748;
                uint _3006;
                bool _3007;
                for (;;)
                {
                    _3006 = texelFetch(g_lightClassification, int((((_2582 << 5u) + (_2568 << 9u)) + (_2997 << 2u)) >> 2u)).x;
                    _3007 = _3006 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_3007)
                    {
                        frontier_phi_69_pred = _2996;
                        frontier_phi_69_pred_1 = _2995;
                        frontier_phi_69_pred_2 = _2994;
                        frontier_phi_69_pred_3 = _2993;
                        frontier_phi_69_pred_4 = _2992;
                        frontier_phi_69_pred_5 = _2991;
                    }
                    else
                    {
                        float _3191;
                        float _3192;
                        float _3193;
                        float _3194;
                        float _3195;
                        float _3196;
                        float _3486;
                        float _3487;
                        float _3488;
                        float _3489;
                        float _3490;
                        float _3491;
                        float _3204 = _2991;
                        float _3205 = _2992;
                        float _3206 = _2993;
                        float _3207 = _2994;
                        float _3208 = _2995;
                        float _3209 = _2996;
                        uint _3210 = _3006;
                        uint _3211;
                        vec4 _3236;
                        float _3237;
                        vec4 _3252;
                        vec3 _3264;
                        vec4 _3279;
                        vec4 _3295;
                        float _3342;
                        bool _3343;
                        for (;;)
                        {
                            uint _3221 = ((_2997 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3210));
                            _3211 = (_3210 + 4294967295u) & _3210;
                            uint _3223 = _3221 * 40u;
                            _3236 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3223)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3223 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3223 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3223 + 3u)).x));
                            _3237 = _3236.w;
                            uint _3239 = (_3221 * 40u) + 4u;
                            _3252 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3239)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3239 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3239 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3239 + 3u)).x));
                            uint _3254 = (_3221 * 40u) + 8u;
                            _3264 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3254)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3254 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3254 + 2u)).x));
                            uint _3266 = (_3221 * 40u) + 16u;
                            _3279 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3266)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3266 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3266 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3266 + 3u)).x));
                            uint _3282 = (_3221 * 40u) + 20u;
                            _3295 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3282)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3282 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3282 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3282 + 3u)).x));
                            uint _3298 = (_3221 * 40u) + 24u;
                            vec4 _3311 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3298)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3298 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3298 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3298 + 3u)).x));
                            uint _3317 = (_3221 * 40u) + 28u;
                            vec4 _3330 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3317)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3317 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3317 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3317 + 3u)).x));
                            _3342 = fma(_2544, _3330.z, fma(_2543, _3330.y, _3330.x * _2542)) + _3330.w;
                            _3343 = !((fma(_2544, _3311.z, fma(_2543, _3311.y, _3311.x * _2542)) + _3311.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_3343)
                            {
                                float _3370 = _3236.x - _2542;
                                float _3371 = _3236.y - _2543;
                                float _3372 = _3236.z - _2544;
                                float _3373 = dot(vec3(_3370, _3371, _3372), vec3(_3370, _3371, _3372));
                                float _3376 = inversesqrt(_3373);
                                float _3377 = _3376 * _3370;
                                float _3378 = _3376 * _3371;
                                float _3379 = _3376 * _3372;
                                float _3383 = 1.0 - (_3373 / (_3237 * _3237));
                                float _4443 = isnan(0.0) ? _3383 : (isnan(_3383) ? 0.0 : max(_3383, 0.0));
                                float _3384 = isnan(1.0) ? _4443 : (isnan(_4443) ? 1.0 : min(_4443, 1.0));
                                float _3388 = sqrt(_3373) * _3252.w;
                                float _3390 = 1.39999997615814208984375 / (_3388 + 1.39999997615814208984375);
                                float _3391 = _3390 * _3390;
                                float _3394 = ((1.0 - _3391) * dot(vec3(_3377, _3378, _3379), vec3(_682, _685, _688))) + _3391;
                                float _3397 = _3388 * _3388;
                                float _3401 = (fma(_2544, _3279.z, fma(_2543, _3279.y, _3279.x * _2542)) + _3279.w) / _3342;
                                float _3402 = (fma(_2544, _3295.z, fma(_2543, _3295.y, _3295.x * _2542)) + _3295.w) / _3342;
                                float _3406 = 1.0 - dot(vec2(_3401, _3402), vec2(_3401, _3402));
                                float _4459 = isnan(0.0) ? _3406 : (isnan(_3406) ? 0.0 : max(_3406, 0.0));
                                float _3407 = isnan(1.0) ? _4459 : (isnan(_4459) ? 1.0 : min(_4459, 1.0));
                                float _3408 = _3407 * (((isnan(0.0) ? _3394 : (isnan(_3394) ? 0.0 : max(_3394, 0.0))) * _3384) / ((_3397 * 0.699999988079071044921875) + 1.0));
                                float _3420 = exp2(log2(1.0 / ((_3397 * 3.5) + 5.0)) * 0.25);
                                float _3421 = 1.0 - _885;
                                float _3428 = sqrt(1.0 - ((1.0 - (_3421 * _3421)) * (1.0 - (_3420 * _3420))));
                                float _3429 = _3428 * _3428;
                                float _3430 = _3429 * _3429;
                                float _3431 = _3377 - _2878;
                                float _3432 = _3378 - _2879;
                                float _3433 = _3379 - _2880;
                                float _3437 = inversesqrt(dot(vec3(_3431, _3432, _3433), vec3(_3431, _3432, _3433)));
                                float _3441 = dot(vec3(_682, _685, _688), vec3((-0.0) - _2878, (-0.0) - _2879, (-0.0) - _2880));
                                float _4470 = isnan(0.0) ? _3441 : (isnan(_3441) ? 0.0 : max(_3441, 0.0));
                                float _3444 = isnan(1.0) ? _4470 : (isnan(_4470) ? 1.0 : min(_4470, 1.0));
                                float _3445 = dot(vec3(_682, _685, _688), vec3(_3437 * _3431, _3437 * _3432, _3437 * _3433));
                                float _4481 = isnan(0.0) ? _3445 : (isnan(_3445) ? 0.0 : max(_3445, 0.0));
                                float _3448 = isnan(1.0) ? _4481 : (isnan(_4481) ? 1.0 : min(_4481, 1.0));
                                float _3452 = ((_3448 * _3448) * (_3430 + (-1.0))) + 1.0;
                                float _3453 = _3390 * _3429;
                                float _3454 = _3453 * _3453;
                                float _3460 = ((1.0 - _3454) * dot(vec3(_682, _685, _688), vec3(_3377, _3378, _3379))) + _3454;
                                float _4492 = isnan(0.0) ? _3460 : (isnan(_3460) ? 0.0 : max(_3460, 0.0));
                                float _3461 = isnan(1.0) ? _4492 : (isnan(_4492) ? 1.0 : min(_4492, 1.0));
                                float _3462 = 1.0 - _3429;
                                float _3472 = (0.5 / (((_3461 * ((_3444 * _3462) + _3429)) + 9.9999999392252902907785028219223e-09) + (((_3461 * _3462) + _3429) * _3444))) * _3461;
                                float _4503 = isnan(0.0) ? _3472 : (isnan(_3472) ? 0.0 : max(_3472, 0.0));
                                float _3482 = (_3407 * _3384) * (((_3430 * 3.1415927410125732421875) * (isnan(1.0) ? _4503 : (isnan(_4503) ? 1.0 : min(_4503, 1.0)))) / ((_3452 * _3452) * ((_3397 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_75_pred = _3408 * _3252.z;
                                frontier_phi_75_pred_1 = _3408 * _3252.y;
                                frontier_phi_75_pred_2 = _3408 * _3252.x;
                                frontier_phi_75_pred_3 = _3482 * _3264.z;
                                frontier_phi_75_pred_4 = _3482 * _3264.y;
                                frontier_phi_75_pred_5 = _3482 * _3264.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _3491 = frontier_phi_75_pred;
                            _3490 = frontier_phi_75_pred_1;
                            _3489 = frontier_phi_75_pred_2;
                            _3488 = frontier_phi_75_pred_3;
                            _3487 = frontier_phi_75_pred_4;
                            _3486 = frontier_phi_75_pred_5;
                            _3194 = _3489 + _3207;
                            _3195 = _3490 + _3208;
                            _3196 = _3491 + _3209;
                            _3191 = _3486 + _3204;
                            _3192 = _3487 + _3205;
                            _3193 = _3488 + _3206;
                            if (_3211 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3204 = _3191;
                                _3205 = _3192;
                                _3206 = _3193;
                                _3207 = _3194;
                                _3208 = _3195;
                                _3209 = _3196;
                                _3210 = _3211;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _3196;
                        frontier_phi_69_pred_1 = _3195;
                        frontier_phi_69_pred_2 = _3194;
                        frontier_phi_69_pred_3 = _3193;
                        frontier_phi_69_pred_4 = _3192;
                        frontier_phi_69_pred_5 = _3191;
                    }
                    _2863 = frontier_phi_69_pred;
                    _2861 = frontier_phi_69_pred_1;
                    _2859 = frontier_phi_69_pred_2;
                    _2857 = frontier_phi_69_pred_3;
                    _2855 = frontier_phi_69_pred_4;
                    _2853 = frontier_phi_69_pred_5;
                    uint _2998 = _2997 + 1u;
                    if (_2998 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2991 = _2853;
                        _2992 = _2855;
                        _2993 = _2857;
                        _2994 = _2859;
                        _2995 = _2861;
                        _2996 = _2863;
                        _2997 = _2998;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2863;
                frontier_phi_57_58_ladder_1 = _2861;
                frontier_phi_57_58_ladder_2 = _2859;
                frontier_phi_57_58_ladder_3 = _2857;
                frontier_phi_57_58_ladder_4 = _2855;
                frontier_phi_57_58_ladder_5 = _2853;
            }
            else
            {
                frontier_phi_57_58_ladder = _2741;
                frontier_phi_57_58_ladder_1 = _2739;
                frontier_phi_57_58_ladder_2 = _2737;
                frontier_phi_57_58_ladder_3 = _2735;
                frontier_phi_57_58_ladder_4 = _2733;
                frontier_phi_57_58_ladder_5 = _2731;
            }
            _2852 = frontier_phi_57_58_ladder_5;
            _2854 = frontier_phi_57_58_ladder_4;
            _2856 = frontier_phi_57_58_ladder_3;
            _2858 = frontier_phi_57_58_ladder_2;
            _2860 = frontier_phi_57_58_ladder_1;
            _2862 = frontier_phi_57_58_ladder;
        }
        float _2867 = isnan(1.0) ? _869 : (isnan(_869) ? 1.0 : min(_869, 1.0));
        _2600 = (_2867 * _2858) + _2037;
        _2602 = (_2867 * _2860) + _2039;
        _2604 = (_2867 * _2862) + _2041;
        _2606 = ((_2852 * _855) * _2867) + _2382;
        _2608 = ((_2854 * _856) * _2867) + _2384;
        _2610 = ((_2856 * _857) * _2867) + _2386;
    }
    else
    {
        _2600 = _2037;
        _2602 = _2039;
        _2604 = _2041;
        _2606 = _2382;
        _2608 = _2384;
        _2610 = _2386;
    }
    uint _2616 = _762 + uint(cbMatDynParam._m0[0u].w);
    float _2626 = ((((cbMtdParam._m0[12u].x * cbMtdParam._m0[16u].z) * cbMtdParam._m0[15u].w) * _507) * _520.x) * cbInstanceData._m0[_2616].x;
    float _2631 = ((((cbMtdParam._m0[12u].y * cbMtdParam._m0[16u].z) * cbMtdParam._m0[15u].w) * _507) * _520.y) * cbInstanceData._m0[_2616].y;
    float _2636 = ((((cbMtdParam._m0[12u].z * cbMtdParam._m0[16u].z) * cbMtdParam._m0[15u].w) * _507) * _520.z) * cbInstanceData._m0[_2616].z;
    float _4519 = isnan(0.0) ? _846 : (isnan(_846) ? 0.0 : max(_846, 0.0));
    float _4530 = isnan(0.0) ? _847 : (isnan(_847) ? 0.0 : max(_847, 0.0));
    float _4541 = isnan(0.0) ? _848 : (isnan(_848) ? 0.0 : max(_848, 0.0));
    float _4552 = isnan(0.0) ? _572 : (isnan(_572) ? 0.0 : max(_572, 0.0));
    float _2654 = (((isnan(1.0) ? _4519 : (isnan(_4519) ? 1.0 : min(_4519, 1.0))) * (_2600 + ((isnan(0.0) ? _1599 : (isnan(_1599) ? 0.0 : max(_1599, 0.0))) * _869))) + ((_2606 + ((isnan(0.0) ? _1890 : (isnan(_1890) ? 0.0 : max(_1890, 0.0))) * _1675)) * cbPerFrame._m0[3u].x)) + _2626;
    float _2656 = (_2631 + ((_2608 + ((isnan(0.0) ? _1893 : (isnan(_1893) ? 0.0 : max(_1893, 0.0))) * _1675)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4530 : (isnan(_4530) ? 1.0 : min(_4530, 1.0))) * (_2602 + ((isnan(0.0) ? _1602 : (isnan(_1602) ? 0.0 : max(_1602, 0.0))) * _869)));
    float _2658 = (_2636 + ((_2610 + ((isnan(0.0) ? _1896 : (isnan(_1896) ? 0.0 : max(_1896, 0.0))) * _1675)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4541 : (isnan(_4541) ? 1.0 : min(_4541, 1.0))) * (_2604 + ((isnan(0.0) ? _1605 : (isnan(_1605) ? 0.0 : max(_1605, 0.0))) * _869)));
    float _4578 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2671 = isnan(1.0) ? _4578 : (isnan(_4578) ? 1.0 : min(_4578, 1.0));
    float _2676 = cbInstanceData._m0[_761 + 6u].w * (isnan(1.0) ? _4552 : (isnan(_4552) ? 1.0 : min(_4552, 1.0)));
    float _2681 = _658 / cbSceneParam._m0[86u].x;
    float _2682 = _659 / cbSceneParam._m0[86u].y;
    vec4 _2696 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2681, _2682, (log2((isnan(cbSceneParam._m0[77u].w) ? _593 : (isnan(_593) ? cbSceneParam._m0[77u].w : min(_593, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2698 = _2696.x;
    float _2699 = _2696.y;
    float _2700 = _2696.z;
    float _2701 = _2696.w;
    float _2793;
    float _2795;
    float _2797;
    float _2799;
    if (_593 > cbSceneParam._m0[78u].w)
    {
        float _2756 = isnan(_593) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _593 : min(cbSceneParam._m0[80u].w, _593));
        float _2757 = _2756 / _593;
        float _2768 = _2757 * _643;
        float _2769 = _644 * _2757;
        float _2770 = (-0.0) - _2769;
        float _2771 = _2757 * _645;
        float _2773 = (cbSceneParam._m0[77u].w * _2770) / _2756;
        float _2774 = _2773 + cbSceneParam._m0[79u].w;
        float _2775 = cbSceneParam._m0[79u].w - _2769;
        float _2781 = sqrt(((_2768 * _2768) + (_2769 * _2769)) + (_2771 * _2771));
        float _2784 = (1.0 - (cbSceneParam._m0[77u].w / _2756)) * _2781;
        float _2789 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2791 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2953;
        if (abs((_2770 - _2773) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2953 = ((((_2774 > 0.0) ? exp2(_2789 * _2774) : (2.0 - exp2(_2791 * _2774))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2784;
        }
        else
        {
            float _2913 = 1.0 / cbSceneParam._m0[80u].x;
            float _2914 = isnan(_2775) ? _2774 : (isnan(_2774) ? _2775 : max(_2774, _2775));
            float _2915 = isnan(_2775) ? _2774 : (isnan(_2774) ? _2775 : min(_2774, _2775));
            float _2924 = isnan(0.0) ? _2914 : (isnan(_2914) ? 0.0 : min(_2914, 0.0));
            float _2925 = isnan(0.0) ? _2915 : (isnan(_2915) ? 0.0 : min(_2915, 0.0));
            _2953 = ((abs(_2781 / _2770) * cbSceneParam._m0[80u].y) * ((((_2924 - _2925) * 2.0) - ((exp2(_2789 * (isnan(0.0) ? _2914 : (isnan(_2914) ? 0.0 : max(_2914, 0.0)))) - exp2(_2789 * (isnan(0.0) ? _2915 : (isnan(_2915) ? 0.0 : max(_2915, 0.0))))) * _2913)) - ((exp2(_2791 * _2924) - exp2(_2791 * _2925)) * _2913))) + (_2784 * cbSceneParam._m0[80u].z);
        }
        vec4 _2955 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2681, _2682, 1.0), 0.0);
        float _2964 = exp2((_2953 * (-1.44269502162933349609375)) * (1.0 - _2955.w));
        float _2965 = log2(_2964);
        float _2981 = log2(_2701);
        _2793 = (exp2(_2981 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2965 * cbSceneParam._m0[78u].x)) * _2955.x) / cbSceneParam._m0[78u].x)) + _2698;
        _2795 = (exp2(_2981 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2965 * cbSceneParam._m0[78u].y)) * _2955.y) / cbSceneParam._m0[78u].y)) + _2699;
        _2797 = (exp2(_2981 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2965 * cbSceneParam._m0[78u].z)) * _2955.z) / cbSceneParam._m0[78u].z)) + _2700;
        _2799 = _2964 * _2701;
    }
    else
    {
        _2793 = _2698;
        _2795 = _2699;
        _2797 = _2700;
        _2799 = _2701;
    }
    float _2811 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2812 = _2811 == 3.0;
    float _2813 = log2(_2799);
    float _2817 = exp2(_2813 * cbSceneParam._m0[78u].x);
    float _2818 = exp2(_2813 * cbSceneParam._m0[78u].y);
    float _2819 = exp2(_2813 * cbSceneParam._m0[78u].z);
    float _2820 = _2817 * (isnan(0.0) ? _2654 : (isnan(_2654) ? 0.0 : max(_2654, 0.0)));
    float _2821 = _2818 * (isnan(0.0) ? _2656 : (isnan(_2656) ? 0.0 : max(_2656, 0.0)));
    float _2822 = _2819 * (isnan(0.0) ? _2658 : (isnan(_2658) ? 0.0 : max(_2658, 0.0)));
    float _2831 = (_2811 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2831 * (_2812 ? _2820 : (_2820 + (cbSceneParam._m0[72u].w * _2793)));
    SV_Target.y = _2831 * (_2812 ? _2821 : (_2821 + (cbSceneParam._m0[72u].w * _2795)));
    SV_Target.z = _2831 * (_2812 ? _2822 : (_2822 + (cbSceneParam._m0[72u].w * _2797)));
    SV_Target.w = _2676;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2626) * _2671) * _2817) * _2831;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2631) * _2671) * _2818) * _2831;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2636) * _2671) * _2819) * _2831;
    SV_Target_1.w = _2676;
}


