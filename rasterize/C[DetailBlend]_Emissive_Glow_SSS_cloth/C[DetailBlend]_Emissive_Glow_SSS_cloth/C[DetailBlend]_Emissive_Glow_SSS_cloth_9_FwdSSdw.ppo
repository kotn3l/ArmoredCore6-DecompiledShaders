#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[18];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_1;
layout(set = 0, binding = 1) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_7;
layout(set = 0, binding = 10) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_6;
layout(set = 0, binding = 12) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_0;
layout(set = 0, binding = 3) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_10;
layout(set = 0, binding = 4) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_11;
layout(set = 0, binding = 5) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_12;
layout(set = 0, binding = 6) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_2;
layout(set = 0, binding = 7) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_4;
layout(set = 0, binding = 9) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_5;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1326;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _213 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _214 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _215 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _221 = inversesqrt(dot(vec3(_213, _214, _215), vec3(_213, _214, _215)));
    float _228 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _229 = _228 * NORMAL.x;
    float _230 = _228 * NORMAL.y;
    float _231 = _228 * NORMAL.z;
    float _235 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _243;
    float _244;
    float _245;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _243 = (-0.0) - _229;
        _244 = (-0.0) - _230;
        _245 = (-0.0) - _231;
    }
    else
    {
        _243 = _229;
        _244 = _230;
        _245 = _231;
    }
    vec4 _258 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _263 = _258.z;
    float _264 = _258.w;
    float _270 = exp2(log2(_263 * 22.0) * 260.0);
    float _271 = isnan(0.0) ? _270 : (isnan(_270) ? 0.0 : max(_270, 0.0));
    float _272 = isnan(1.0) ? _271 : (isnan(_271) ? 1.0 : min(_271, 1.0));
    vec4 _286 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _297 = cbMtdParam._m0[10u].x * _286.x;
    float _298 = cbMtdParam._m0[10u].y * _286.y;
    float _299 = cbMtdParam._m0[10u].z * _286.z;
    vec4 _311 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _332 = (((cbMtdParam._m0[9u].x * _311.x) - _297) * _272) + _297;
    float _333 = (((cbMtdParam._m0[9u].y * _311.y) - _298) * _272) + _298;
    float _334 = (((cbMtdParam._m0[9u].z * _311.z) - _299) * _272) + _299;
    float _339 = exp2(log2(1.0 - _264) * 8.0);
    vec4 _351 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_10, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _371 = (((cbMtdParam._m0[13u].x * _351.x) - _332) * _339) + _332;
    float _372 = (((cbMtdParam._m0[13u].y * _351.y) - _333) * _339) + _333;
    float _373 = (((cbMtdParam._m0[13u].z * _351.z) - _334) * _339) + _334;
    float _376 = exp2(log2(_264) * 8.0);
    vec4 _389 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _423 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _431 = (((((cbMtdParam._m0[11u].x * _389.x) - _371) * _376) + _371) * 4.55000019073486328125) * _423.x;
    float _433 = (((((cbMtdParam._m0[11u].y * _389.y) - _372) * _376) + _372) * 4.55000019073486328125) * _423.y;
    float _435 = (((((cbMtdParam._m0[11u].z * _389.z) - _373) * _376) + _373) * 4.55000019073486328125) * _423.z;
    float _436 = _423.w * _311.w;
    float _466 = (((texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w)).x - cbMtdParam._m0[17u].x) + cbMtdParam._m0[16u].x) * _272) + cbMtdParam._m0[17u].x;
    float _469 = ((cbMtdParam._m0[15u].z - _466) * _339) + _466;
    float _473 = ((cbMtdParam._m0[16u].w - _469) * _376) + _469;
    vec4 _485 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w));
    float _487 = _485.x;
    float _488 = _485.y;
    float _494 = cbMtdParam._m0[14u].y + _485.z;
    vec4 _506 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w));
    float _515 = (((_506.z - _494) + cbMtdParam._m0[14u].x) * _272) + _494;
    vec4 _528 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _537 = (((_528.z - _515) + cbMtdParam._m0[15u].y) * _339) + _515;
    vec4 _550 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _567 = (((_272 * (_263 + (-0.5))) + 0.5) * 2.0) * ((((_550.z - _537) + cbMtdParam._m0[14u].w) * _376) + _537);
    float _581 = abs((fract(cbMtdParam._m0[15u].x * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _3739 = isnan(0.0) ? _581 : (isnan(_581) ? 0.0 : max(_581, 0.0));
    float _582 = isnan(1.0) ? _3739 : (isnan(_3739) ? 1.0 : min(_3739, 1.0));
    float _587 = (_582 * _582) * (3.0 - (_582 * 2.0));
    vec4 _600 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _608 = (_258.x * 2.0) + (-1.0);
    float _609 = (_258.y * 2.0) + (-1.0);
    float _610 = dot(vec2(_608, _609), vec2(_608, _609));
    float _3750 = isnan(0.0) ? _610 : (isnan(_610) ? 0.0 : max(_610, 0.0));
    float _615 = sqrt(1.0 - (isnan(1.0) ? _3750 : (isnan(_3750) ? 1.0 : min(_3750, 1.0))));
    float _620 = ((_506.x - _487) * _272) + _487;
    float _621 = ((_506.y - _488) * _272) + _488;
    float _626 = ((_528.x - _620) * _339) + _620;
    float _627 = ((_528.y - _621) * _339) + _621;
    float _640 = (cbMtdParam._m0[14u].z * (((((_550.x - _626) * _376) + _626) * 2.0) + (-1.0))) + _608;
    float _641 = (cbMtdParam._m0[14u].z * (((((_550.y - _627) * _376) + _627) * 2.0) + (-1.0))) + _609;
    float _644 = fma(_615, _243, fma(_641, _235 * TANGENT.x, (_221 * _213) * _640));
    float _647 = fma(_615, _244, fma(_641, _235 * TANGENT.y, (_221 * _214) * _640));
    float _650 = fma(_615, _245, fma(_641, _235 * TANGENT.z, (_221 * _215) * _640));
    float _654 = inversesqrt(dot(vec3(_644, _647, _650), vec3(_644, _647, _650)));
    float _655 = _654 * _644;
    float _656 = _654 * _647;
    float _657 = _654 * _650;
    float _3761 = isnan(0.0) ? _436 : (isnan(_436) ? 0.0 : max(_436, 0.0));
    float _658 = isnan(1.0) ? _3761 : (isnan(_3761) ? 1.0 : min(_3761, 1.0));
    float _3772 = isnan(0.0) ? _567 : (isnan(_567) ? 0.0 : max(_567, 0.0));
    float _659 = isnan(1.0) ? _3772 : (isnan(_3772) ? 1.0 : min(_3772, 1.0));
    float _3783 = isnan(0.0) ? _431 : (isnan(_431) ? 0.0 : max(_431, 0.0));
    float _660 = isnan(1.0) ? _3783 : (isnan(_3783) ? 1.0 : min(_3783, 1.0));
    float _3794 = isnan(0.0) ? _433 : (isnan(_433) ? 0.0 : max(_433, 0.0));
    float _661 = isnan(1.0) ? _3794 : (isnan(_3794) ? 1.0 : min(_3794, 1.0));
    float _3805 = isnan(0.0) ? _435 : (isnan(_435) ? 0.0 : max(_435, 0.0));
    float _662 = isnan(1.0) ? _3805 : (isnan(_3805) ? 1.0 : min(_3805, 1.0));
    float _3816 = isnan(0.0) ? _473 : (isnan(_473) ? 0.0 : max(_473, 0.0));
    float _663 = isnan(1.0) ? _3816 : (isnan(_3816) ? 1.0 : min(_3816, 1.0));
    float _679 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _719 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _729 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _719);
    float _730 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _719);
    float _731 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _719);
    float _735 = inversesqrt(dot(vec3(_729, _730, _731), vec3(_729, _730, _731)));
    float _736 = _729 * _735;
    float _737 = _730 * _735;
    float _738 = _731 * _735;
    float _744 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _745 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _747 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _749 = _747.w;
    float _767 = fma(_657, cbSceneParam._m0[5u].z, fma(_656, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _655));
    float _770 = fma(_657, cbSceneParam._m0[6u].z, fma(_656, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _655));
    float _773 = fma(_657, cbSceneParam._m0[7u].z, fma(_656, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _655));
    vec4 _775 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _777 = _775.x;
    float _789 = (((_775.y - _659) + (_775.w * _659)) * cbMtdParam._m0[3u].x) + _659;
    vec4 _790 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _806 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3(cbMtdParam._m0[3u].x * (_777 * _777)), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * _790.z;
    float _814 = (((cbMatDynParam._m0[15u].x - _663) * cbMatDynParam._m0[15u].w) * _806) + _663;
    float _822 = ((_806 * cbMatDynParam._m0[16u].z) * (cbMatDynParam._m0[16u].x - _789)) + _789;
    uint _846 = uint(roundEven(NORMAL.w)) * 13u;
    uint _847 = _846 + 9u;
    uint _848 = _847 + uint(cbMatDynParam._m0[0u].w);
    float _854 = (cbMtdParam._m0[0u].x * _660) * cbInstanceData._m0[_848].x;
    float _855 = (cbMtdParam._m0[0u].y * _661) * cbInstanceData._m0[_848].y;
    float _856 = (cbMtdParam._m0[0u].z * _662) * cbInstanceData._m0[_848].z;
    float _3827 = isnan(0.0) ? _854 : (isnan(_854) ? 0.0 : max(_854, 0.0));
    float _857 = isnan(1.0) ? _3827 : (isnan(_3827) ? 1.0 : min(_3827, 1.0));
    float _3838 = isnan(0.0) ? _855 : (isnan(_855) ? 0.0 : max(_855, 0.0));
    float _858 = isnan(1.0) ? _3838 : (isnan(_3838) ? 1.0 : min(_3838, 1.0));
    float _3849 = isnan(0.0) ? _856 : (isnan(_856) ? 0.0 : max(_856, 0.0));
    float _859 = isnan(1.0) ? _3849 : (isnan(_3849) ? 1.0 : min(_3849, 1.0));
    vec4 _860 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _865 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _876 = (((_865.x - _814) + (_865.w * _814)) * cbMtdParam._m0[3u].x) + _814;
    float _889 = (cbMtdParam._m0[3u].x * (((_857 * _749) - _857) + _860.x)) + _857;
    float _890 = (cbMtdParam._m0[3u].x * (((_858 * _749) - _858) + _860.y)) + _858;
    float _891 = (cbMtdParam._m0[3u].x * (((_859 * _749) - _859) + _860.z)) + _859;
    float _905 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3((_814 * (_660 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625, (_814 * (_661 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625, (_814 * (_662 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w)).z;
    float _909 = _905 * cbMatDynParam._m0[13u].w;
    float _919 = (_909 * (cbMatDynParam._m0[13u].x - _889)) + _889;
    float _920 = (_909 * (cbMatDynParam._m0[13u].y - _890)) + _890;
    float _921 = (_909 * (cbMatDynParam._m0[13u].z - _891)) + _891;
    float _929 = ((_905 * cbMatDynParam._m0[15u].w) * (cbMatDynParam._m0[15u].x - _876)) + _876;
    float _930 = 1.0 - _929;
    float _931 = _930 * _919;
    float _932 = _930 * _920;
    float _933 = _930 * _921;
    float _937 = (_919 + (-0.039999999105930328369140625)) * _929;
    float _938 = (_920 + (-0.039999999105930328369140625)) * _929;
    float _939 = (_921 + (-0.039999999105930328369140625)) * _929;
    float _940 = _937 + 0.039999999105930328369140625;
    float _941 = _938 + 0.039999999105930328369140625;
    float _942 = _939 + 0.039999999105930328369140625;
    vec4 _951 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _744, cbSceneParam._m0[86u].y * _745));
    float _954 = _951.x * TEXCOORD_4;
    float _955 = dot(vec3(_655, _656, _657), vec3(_736, _737, _738));
    float _958 = _955 * 2.0;
    float _962 = (_958 * _655) - _736;
    float _963 = (_958 * _656) - _737;
    float _964 = (_958 * _657) - _738;
    float _968 = abs(dot(vec3(_736, _737, _738), vec3(_655, _656, _657)));
    float _3860 = isnan(0.0) ? _968 : (isnan(_968) ? 0.0 : max(_968, 0.0));
    float _970 = sqrt(_822);
    float _982 = exp2((_970 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3860 : (isnan(_3860) ? 1.0 : min(_3860, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_970 * 3.0));
    float _988 = (1.0 - _982) * ((_970 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _989 = _982 * _970;
    float _1017 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1021 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1025 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1325;
    float _1327;
    float _1328;
    float _1329;
    float _1330;
    float _1331;
    float _1332;
    float _1333;
    float _1334;
    float _1335;
    float _1336;
    float _1337;
    float _1338;
    float _1339;
    float _1340;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1052 = fma(_1025, cbModelParam._m0[26u].z, fma(_1021, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1017));
        float _1056 = fma(_1025, cbModelParam._m0[27u].z, fma(_1021, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1017));
        float _1060 = fma(_1025, cbModelParam._m0[28u].z, fma(_1021, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1017));
        float _1083 = _1017 + _655;
        float _1084 = _1021 + _656;
        float _1085 = _1025 + _657;
        float _1095 = fma(_1085, cbModelParam._m0[26u].z, fma(_1084, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1083)) - _1052;
        float _1096 = fma(_1085, cbModelParam._m0[27u].z, fma(_1084, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1083)) - _1056;
        float _1097 = fma(_1085, cbModelParam._m0[28u].z, fma(_1084, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1083)) - _1060;
        float _1101 = inversesqrt(dot(vec3(_1095, _1096, _1097), vec3(_1095, _1096, _1097)));
        float _1114 = ((_1101 * _1095) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1052 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1115 = ((_1101 * _1096) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1056 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1116 = ((_1101 * _1097) / cbModelParam._m0[34u].z) + ((((((_1060 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1119 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1114, _1115, _1116), 0.0);
        vec4 _1126 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1114, _1115, _1116), 0.0);
        vec4 _1133 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1114, _1115, _1116), 0.0);
        vec4 _1140 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1114, _1115, _1116), 0.0);
        float _1153 = exp2((_1119.w + (-0.5)) * 20.0) * 2.0;
        float _1154 = _1153 * (_1119.x + (-0.5));
        float _1155 = _1153 * (_1119.y + (-0.5));
        float _1156 = _1153 * (_1119.z + (-0.5));
        float _1163 = exp2((_1126.w + (-0.5)) * 20.0) * 2.0;
        float _1164 = _1163 * (_1126.x + (-0.5));
        float _1165 = _1163 * (_1126.y + (-0.5));
        float _1166 = _1163 * (_1126.z + (-0.5));
        float _1173 = exp2((_1133.w + (-0.5)) * 20.0) * 2.0;
        float _1174 = _1173 * (_1133.x + (-0.5));
        float _1175 = _1173 * (_1133.y + (-0.5));
        float _1176 = _1173 * (_1133.z + (-0.5));
        float _1183 = exp2((_1140.w + (-0.5)) * 20.0) * 2.0;
        float _1184 = _1183 * (_1140.x + (-0.5));
        float _1185 = _1183 * (_1140.y + (-0.5));
        float _1186 = _1183 * (_1140.z + (-0.5));
        float _1187 = isnan(0.0) ? _1184 : (isnan(_1184) ? 0.0 : max(_1184, 0.0));
        float _1188 = isnan(0.0) ? _1185 : (isnan(_1185) ? 0.0 : max(_1185, 0.0));
        float _1189 = isnan(0.0) ? _1186 : (isnan(_1186) ? 0.0 : max(_1186, 0.0));
        float _1190 = _1154 * 0.5;
        float _1191 = _1164 * 0.5;
        float _1192 = _1174 * 0.5;
        float _1193 = dot(vec3(_1190, _1191, _1192), vec3(_1190, _1191, _1192));
        float _1198 = (_1193 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1193);
        float _1207 = (dot(vec3(_655, _656, _657), vec3(_1198 * _1190, _1198 * _1191, _1198 * _1192)) + 1.0) * 0.5;
        float _3886 = isnan(0.0) ? _1207 : (isnan(_1207) ? 0.0 : max(_1207, 0.0));
        float _1217 = sqrt(((_1191 * _1191) + (_1190 * _1190)) + (_1192 * _1192)) / (_1187 + 9.9999997473787516355514526367188e-06);
        float _3897 = isnan(0.0) ? _1217 : (isnan(_1217) ? 0.0 : max(_1217, 0.0));
        float _1218 = isnan(1.0) ? _3897 : (isnan(_3897) ? 1.0 : min(_3897, 1.0));
        float _1219 = _1218 * 2.0;
        float _1223 = (1.0 - _1218) / (_1218 + 1.0);
        float _3908 = isnan(0.0) ? _1223 : (isnan(_1223) ? 0.0 : max(_1223, 0.0));
        float _1224 = isnan(1.0) ? _3908 : (isnan(_3908) ? 1.0 : min(_3908, 1.0));
        float _1233 = ((((1.0 - _1224) * (_1219 + 2.0)) * exp2(log2(isnan(1.0) ? _3886 : (isnan(_3886) ? 1.0 : min(_3886, 1.0))) * (_1219 + 1.0))) + _1224) * _1187;
        float _1234 = _1155 * 0.5;
        float _1235 = _1165 * 0.5;
        float _1236 = _1175 * 0.5;
        float _1237 = dot(vec3(_1234, _1235, _1236), vec3(_1234, _1235, _1236));
        float _1242 = (_1237 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1237);
        float _1250 = (dot(vec3(_655, _656, _657), vec3(_1242 * _1234, _1242 * _1235, _1242 * _1236)) + 1.0) * 0.5;
        float _3919 = isnan(0.0) ? _1250 : (isnan(_1250) ? 0.0 : max(_1250, 0.0));
        float _1259 = sqrt(((_1235 * _1235) + (_1234 * _1234)) + (_1236 * _1236)) / (_1188 + 9.9999997473787516355514526367188e-06);
        float _3930 = isnan(0.0) ? _1259 : (isnan(_1259) ? 0.0 : max(_1259, 0.0));
        float _1260 = isnan(1.0) ? _3930 : (isnan(_3930) ? 1.0 : min(_3930, 1.0));
        float _1261 = _1260 * 2.0;
        float _1265 = (1.0 - _1260) / (_1260 + 1.0);
        float _3941 = isnan(0.0) ? _1265 : (isnan(_1265) ? 0.0 : max(_1265, 0.0));
        float _1266 = isnan(1.0) ? _3941 : (isnan(_3941) ? 1.0 : min(_3941, 1.0));
        float _1275 = ((((1.0 - _1266) * (_1261 + 2.0)) * exp2(log2(isnan(1.0) ? _3919 : (isnan(_3919) ? 1.0 : min(_3919, 1.0))) * (_1261 + 1.0))) + _1266) * _1188;
        float _1276 = _1156 * 0.5;
        float _1277 = _1166 * 0.5;
        float _1278 = _1176 * 0.5;
        float _1279 = dot(vec3(_1276, _1277, _1278), vec3(_1276, _1277, _1278));
        float _1284 = (_1279 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1279);
        float _1292 = (dot(vec3(_655, _656, _657), vec3(_1284 * _1276, _1284 * _1277, _1284 * _1278)) + 1.0) * 0.5;
        float _3952 = isnan(0.0) ? _1292 : (isnan(_1292) ? 0.0 : max(_1292, 0.0));
        float _1301 = sqrt(((_1277 * _1277) + (_1276 * _1276)) + (_1278 * _1278)) / (_1189 + 9.9999997473787516355514526367188e-06);
        float _3963 = isnan(0.0) ? _1301 : (isnan(_1301) ? 0.0 : max(_1301, 0.0));
        float _1302 = isnan(1.0) ? _3963 : (isnan(_3963) ? 1.0 : min(_3963, 1.0));
        float _1303 = _1302 * 2.0;
        float _1307 = (1.0 - _1302) / (_1302 + 1.0);
        float _3974 = isnan(0.0) ? _1307 : (isnan(_1307) ? 0.0 : max(_1307, 0.0));
        float _1308 = isnan(1.0) ? _3974 : (isnan(_3974) ? 1.0 : min(_3974, 1.0));
        float _1317 = ((((1.0 - _1308) * (_1303 + 2.0)) * exp2(log2(isnan(1.0) ? _3952 : (isnan(_3952) ? 1.0 : min(_3952, 1.0))) * (_1303 + 1.0))) + _1308) * _1189;
        _1325 = _1156;
        _1327 = _1155;
        _1328 = _1154;
        _1329 = _1166;
        _1330 = _1165;
        _1331 = _1164;
        _1332 = _1176;
        _1333 = _1175;
        _1334 = _1174;
        _1335 = _1189;
        _1336 = _1188;
        _1337 = _1187;
        _1338 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1233 : (isnan(_1233) ? 0.0 : max(_1233, 0.0)));
        _1339 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1275 : (isnan(_1275) ? 0.0 : max(_1275, 0.0)));
        _1340 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1317 : (isnan(_1317) ? 0.0 : max(_1317, 0.0)));
    }
    else
    {
        _1325 = _1326;
        _1327 = _1326;
        _1328 = _1326;
        _1329 = _1326;
        _1330 = _1326;
        _1331 = _1326;
        _1332 = _1326;
        _1333 = _1326;
        _1334 = _1326;
        _1335 = _1326;
        _1336 = _1326;
        _1337 = _1326;
        _1338 = 0.0;
        _1339 = 0.0;
        _1340 = 0.0;
    }
    float _1635;
    float _1636;
    float _1637;
    float _1638;
    float _1639;
    float _1640;
    float _1641;
    float _1642;
    float _1643;
    float _1644;
    float _1645;
    float _1646;
    float _1647;
    float _1648;
    float _1649;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1366 = fma(_1025, cbModelParam._m0[30u].z, fma(_1021, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1017));
        float _1370 = fma(_1025, cbModelParam._m0[31u].z, fma(_1021, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1017));
        float _1374 = fma(_1025, cbModelParam._m0[32u].z, fma(_1021, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1017));
        float _1397 = _1017 + _655;
        float _1398 = _1021 + _656;
        float _1399 = _1025 + _657;
        float _1409 = fma(_1399, cbModelParam._m0[30u].z, fma(_1398, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1397)) - _1366;
        float _1410 = fma(_1399, cbModelParam._m0[31u].z, fma(_1398, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1397)) - _1370;
        float _1411 = fma(_1399, cbModelParam._m0[32u].z, fma(_1398, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1397)) - _1374;
        float _1415 = inversesqrt(dot(vec3(_1409, _1410, _1411), vec3(_1409, _1410, _1411)));
        float _1428 = ((_1415 * _1409) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1366 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1429 = ((_1415 * _1410) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1370 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1430 = ((_1415 * _1411) / cbModelParam._m0[35u].z) + ((((((_1374 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1432 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1428, _1429, _1430), 0.0);
        vec4 _1439 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1428, _1429, _1430), 0.0);
        vec4 _1446 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1428, _1429, _1430), 0.0);
        vec4 _1453 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1428, _1429, _1430), 0.0);
        float _1465 = exp2((_1432.w + (-0.5)) * 20.0) * 2.0;
        float _1466 = _1465 * (_1432.x + (-0.5));
        float _1467 = _1465 * (_1432.y + (-0.5));
        float _1468 = _1465 * (_1432.z + (-0.5));
        float _1475 = exp2((_1439.w + (-0.5)) * 20.0) * 2.0;
        float _1476 = _1475 * (_1439.x + (-0.5));
        float _1477 = _1475 * (_1439.y + (-0.5));
        float _1478 = _1475 * (_1439.z + (-0.5));
        float _1485 = exp2((_1446.w + (-0.5)) * 20.0) * 2.0;
        float _1486 = _1485 * (_1446.x + (-0.5));
        float _1487 = _1485 * (_1446.y + (-0.5));
        float _1488 = _1485 * (_1446.z + (-0.5));
        float _1495 = exp2((_1453.w + (-0.5)) * 20.0) * 2.0;
        float _1496 = _1495 * (_1453.x + (-0.5));
        float _1497 = _1495 * (_1453.y + (-0.5));
        float _1498 = _1495 * (_1453.z + (-0.5));
        float _1499 = isnan(0.0) ? _1496 : (isnan(_1496) ? 0.0 : max(_1496, 0.0));
        float _1500 = isnan(0.0) ? _1497 : (isnan(_1497) ? 0.0 : max(_1497, 0.0));
        float _1501 = isnan(0.0) ? _1498 : (isnan(_1498) ? 0.0 : max(_1498, 0.0));
        float _1502 = _1466 * 0.5;
        float _1503 = _1476 * 0.5;
        float _1504 = _1486 * 0.5;
        float _1505 = dot(vec3(_1502, _1503, _1504), vec3(_1502, _1503, _1504));
        float _1510 = (_1505 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1505);
        float _1518 = (dot(vec3(_655, _656, _657), vec3(_1510 * _1502, _1510 * _1503, _1510 * _1504)) + 1.0) * 0.5;
        float _4015 = isnan(0.0) ? _1518 : (isnan(_1518) ? 0.0 : max(_1518, 0.0));
        float _1527 = sqrt(((_1503 * _1503) + (_1502 * _1502)) + (_1504 * _1504)) / (_1499 + 9.9999997473787516355514526367188e-06);
        float _4026 = isnan(0.0) ? _1527 : (isnan(_1527) ? 0.0 : max(_1527, 0.0));
        float _1528 = isnan(1.0) ? _4026 : (isnan(_4026) ? 1.0 : min(_4026, 1.0));
        float _1529 = _1528 * 2.0;
        float _1533 = (1.0 - _1528) / (_1528 + 1.0);
        float _4037 = isnan(0.0) ? _1533 : (isnan(_1533) ? 0.0 : max(_1533, 0.0));
        float _1534 = isnan(1.0) ? _4037 : (isnan(_4037) ? 1.0 : min(_4037, 1.0));
        float _1543 = ((((1.0 - _1534) * (_1529 + 2.0)) * exp2(log2(isnan(1.0) ? _4015 : (isnan(_4015) ? 1.0 : min(_4015, 1.0))) * (_1529 + 1.0))) + _1534) * _1499;
        float _1544 = _1467 * 0.5;
        float _1545 = _1477 * 0.5;
        float _1546 = _1487 * 0.5;
        float _1547 = dot(vec3(_1544, _1545, _1546), vec3(_1544, _1545, _1546));
        float _1552 = (_1547 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1547);
        float _1560 = (dot(vec3(_655, _656, _657), vec3(_1552 * _1544, _1552 * _1545, _1552 * _1546)) + 1.0) * 0.5;
        float _4048 = isnan(0.0) ? _1560 : (isnan(_1560) ? 0.0 : max(_1560, 0.0));
        float _1569 = sqrt(((_1545 * _1545) + (_1544 * _1544)) + (_1546 * _1546)) / (_1500 + 9.9999997473787516355514526367188e-06);
        float _4059 = isnan(0.0) ? _1569 : (isnan(_1569) ? 0.0 : max(_1569, 0.0));
        float _1570 = isnan(1.0) ? _4059 : (isnan(_4059) ? 1.0 : min(_4059, 1.0));
        float _1571 = _1570 * 2.0;
        float _1575 = (1.0 - _1570) / (_1570 + 1.0);
        float _4070 = isnan(0.0) ? _1575 : (isnan(_1575) ? 0.0 : max(_1575, 0.0));
        float _1576 = isnan(1.0) ? _4070 : (isnan(_4070) ? 1.0 : min(_4070, 1.0));
        float _1585 = ((((1.0 - _1576) * (_1571 + 2.0)) * exp2(log2(isnan(1.0) ? _4048 : (isnan(_4048) ? 1.0 : min(_4048, 1.0))) * (_1571 + 1.0))) + _1576) * _1500;
        float _1586 = _1468 * 0.5;
        float _1587 = _1478 * 0.5;
        float _1588 = _1488 * 0.5;
        float _1589 = dot(vec3(_1586, _1587, _1588), vec3(_1586, _1587, _1588));
        float _1594 = (_1589 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1589);
        float _1602 = (dot(vec3(_655, _656, _657), vec3(_1594 * _1586, _1594 * _1587, _1594 * _1588)) + 1.0) * 0.5;
        float _4081 = isnan(0.0) ? _1602 : (isnan(_1602) ? 0.0 : max(_1602, 0.0));
        float _1611 = sqrt(((_1587 * _1587) + (_1586 * _1586)) + (_1588 * _1588)) / (_1501 + 9.9999997473787516355514526367188e-06);
        float _4092 = isnan(0.0) ? _1611 : (isnan(_1611) ? 0.0 : max(_1611, 0.0));
        float _1612 = isnan(1.0) ? _4092 : (isnan(_4092) ? 1.0 : min(_4092, 1.0));
        float _1613 = _1612 * 2.0;
        float _1617 = (1.0 - _1612) / (_1612 + 1.0);
        float _4103 = isnan(0.0) ? _1617 : (isnan(_1617) ? 0.0 : max(_1617, 0.0));
        float _1618 = isnan(1.0) ? _4103 : (isnan(_4103) ? 1.0 : min(_4103, 1.0));
        float _1627 = ((((1.0 - _1618) * (_1613 + 2.0)) * exp2(log2(isnan(1.0) ? _4081 : (isnan(_4081) ? 1.0 : min(_4081, 1.0))) * (_1613 + 1.0))) + _1618) * _1501;
        _1635 = _1468;
        _1636 = _1467;
        _1637 = _1466;
        _1638 = _1478;
        _1639 = _1477;
        _1640 = _1476;
        _1641 = _1488;
        _1642 = _1487;
        _1643 = _1486;
        _1644 = _1501;
        _1645 = _1500;
        _1646 = _1499;
        _1647 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1543 : (isnan(_1543) ? 0.0 : max(_1543, 0.0)));
        _1648 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1585 : (isnan(_1585) ? 0.0 : max(_1585, 0.0)));
        _1649 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1627 : (isnan(_1627) ? 0.0 : max(_1627, 0.0)));
    }
    else
    {
        _1635 = _1326;
        _1636 = _1326;
        _1637 = _1326;
        _1638 = _1326;
        _1639 = _1326;
        _1640 = _1326;
        _1641 = _1326;
        _1642 = _1326;
        _1643 = _1326;
        _1644 = _1326;
        _1645 = _1326;
        _1646 = _1326;
        _1647 = 0.0;
        _1648 = 0.0;
        _1649 = 0.0;
    }
    float _1659 = (cbModelParam._m0[1u].x * (_1647 - _1338)) + _1338;
    float _1660 = (cbModelParam._m0[1u].x * (_1648 - _1339)) + _1339;
    float _1661 = (cbModelParam._m0[1u].x * (_1649 - _1340)) + _1340;
    float _1682 = fma(_1661, cbSceneParam._m0[89u].z, fma(_1660, cbSceneParam._m0[89u].y, _1659 * cbSceneParam._m0[89u].x));
    float _1685 = fma(_1661, cbSceneParam._m0[90u].z, fma(_1660, cbSceneParam._m0[90u].y, _1659 * cbSceneParam._m0[90u].x));
    float _1688 = fma(_1661, cbSceneParam._m0[91u].z, fma(_1660, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1659));
    float _1703 = _962 * 0.5;
    float _1704 = _963 * 0.5;
    float _1705 = _964 * 0.5;
    float _1706 = dot(vec4(_1703, _1704, _1705, 1.0), vec4(_1637, _1640, _1643, _1646));
    float _1709 = dot(vec4(_1703, _1704, _1705, 1.0), vec4(_1636, _1639, _1642, _1645));
    float _1712 = dot(vec4(_1703, _1704, _1705, 1.0), vec4(_1635, _1638, _1641, _1644));
    float _1743;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1719 = dot(vec4(_1703, _1704, _1705, 1.0), vec4(_1325, _1329, _1332, _1335));
        float _1723 = dot(vec4(_1703, _1704, _1705, 1.0), vec4(_1327, _1330, _1333, _1336));
        float _1727 = dot(vec4(_1703, _1704, _1705, 1.0), vec4(_1328, _1331, _1334, _1337));
        float _1734 = dot(vec4(cbModelParam._m0[39u]), vec4(_1703, _1704, _1705, 1.0));
        _1743 = dot(vec3(isnan(0.0) ? _1727 : (isnan(_1727) ? 0.0 : max(_1727, 0.0)), isnan(0.0) ? _1723 : (isnan(_1723) ? 0.0 : max(_1723, 0.0)), isnan(0.0) ? _1719 : (isnan(_1719) ? 0.0 : max(_1719, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1734) ? 0.0 : (isnan(0.0) ? _1734 : max(0.0, _1734))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1743 = 1.0;
    }
    float _1754;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1745 = dot(vec4(cbModelParam._m0[40u]), vec4(_1703, _1704, _1705, 1.0));
        _1754 = dot(vec3(isnan(0.0) ? _1706 : (isnan(_1706) ? 0.0 : max(_1706, 0.0)), isnan(0.0) ? _1709 : (isnan(_1709) ? 0.0 : max(_1709, 0.0)), isnan(0.0) ? _1712 : (isnan(_1712) ? 0.0 : max(_1712, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1745) ? 0.0 : (isnan(0.0) ? _1745 : max(0.0, _1745))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1754 = 1.0;
    }
    float _1758 = (_1754 * cbModelParam._m0[1u].x) + (_1743 * (1.0 - cbModelParam._m0[1u].x));
    float _1768 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _822);
    float _1769 = isnan(_1768) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1768 : min(cbModelParam._m0[25u].z, _1768));
    float _1849;
    float _1851;
    float _1853;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1816 = fma(_1025, cbModelParam._m0[13u].z, fma(_1021, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1017)) + cbModelParam._m0[13u].w;
        float _1820 = fma(_1025, cbModelParam._m0[14u].z, fma(_1021, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1017)) + cbModelParam._m0[14u].w;
        float _1824 = fma(_1025, cbModelParam._m0[15u].z, fma(_1021, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1017)) + cbModelParam._m0[15u].w;
        float _1827 = fma(_964, cbModelParam._m0[13u].z, fma(_963, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _962));
        float _1830 = fma(_964, cbModelParam._m0[14u].z, fma(_963, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _962));
        float _1833 = fma(_964, cbModelParam._m0[15u].z, fma(_963, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _962));
        float _1861;
        if (_1827 > 0.0)
        {
            _1861 = abs((1.0 - _1816) / _1827);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1827 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1816 + 1.0) / _1827);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1861 = frontier_phi_16_14_ladder;
        }
        float _2086;
        if (_1830 > 0.0)
        {
            _2086 = abs((1.0 - _1820) / _1830);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1830 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1820 + 1.0) / _1830);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2086 = frontier_phi_25_21_ladder;
        }
        float _2343;
        if (_1833 > 0.0)
        {
            _2343 = abs((1.0 - _1824) / _1833);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1833 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1824 + 1.0) / _1833);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2343 = frontier_phi_37_32_ladder;
        }
        float _2345 = isnan(_2086) ? _1861 : (isnan(_1861) ? _2086 : min(_1861, _2086));
        float _2346 = isnan(_2343) ? _2345 : (isnan(_2345) ? _2343 : min(_2345, _2343));
        float _2350 = (_2346 * _1827) + _1816;
        float _2351 = (_2346 * _1830) + _1820;
        float _2352 = (_2346 * _1833) + _1824;
        float _2353 = _2346 * 9.9999997473787516355514526367188e-05;
        float _2355 = (-1.0) - _2353;
        float _2357 = _2353 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_2352 > _2357) || ((_2352 < _2355) || ((_2351 > _2357) || ((_2351 < _2355) || ((_2350 < _2355) || (_2350 > _2357))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2480 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2352, cbModelParam._m0[9u].z, fma(_2351, cbModelParam._m0[9u].y, _2350 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2352, cbModelParam._m0[10u].z, fma(_2351, cbModelParam._m0[10u].y, _2350 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2352, cbModelParam._m0[11u].z, fma(_2351, cbModelParam._m0[11u].y, _2350 * cbModelParam._m0[11u].x))), _1769);
            frontier_phi_15_37_ladder = _2480.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2480.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2480.x * cbModelParam._m0[1u].y;
        }
        _1849 = frontier_phi_15_37_ladder_2;
        _1851 = frontier_phi_15_37_ladder_1;
        _1853 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1837 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_962, _963, _964), _1769);
        _1849 = _1837.x * cbModelParam._m0[1u].y;
        _1851 = _1837.y * cbModelParam._m0[1u].y;
        _1853 = _1837.z * cbModelParam._m0[1u].y;
    }
    float _1857 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _822);
    float _1858 = isnan(_1857) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1857 : min(cbModelParam._m0[25u].w, _1857));
    float _1949;
    float _1951;
    float _1953;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1913 = fma(_1025, cbModelParam._m0[21u].z, fma(_1021, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1017)) + cbModelParam._m0[21u].w;
        float _1917 = fma(_1025, cbModelParam._m0[22u].z, fma(_1021, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1017)) + cbModelParam._m0[22u].w;
        float _1921 = fma(_1025, cbModelParam._m0[23u].z, fma(_1021, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1017)) + cbModelParam._m0[23u].w;
        float _1924 = fma(_964, cbModelParam._m0[21u].z, fma(_963, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _962));
        float _1927 = fma(_964, cbModelParam._m0[22u].z, fma(_963, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _962));
        float _1930 = fma(_964, cbModelParam._m0[23u].z, fma(_963, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _962));
        float _2091;
        if (_1924 > 0.0)
        {
            _2091 = abs((1.0 - _1913) / _1924);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1924 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1913 + 1.0) / _1924);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _2091 = frontier_phi_27_23_ladder;
        }
        float _2370;
        if (_1927 > 0.0)
        {
            _2370 = abs((1.0 - _1917) / _1927);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1927 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1917 + 1.0) / _1927);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _2370 = frontier_phi_39_34_ladder;
        }
        float _2583;
        if (_1930 > 0.0)
        {
            _2583 = abs((1.0 - _1921) / _1930);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1930 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1921 + 1.0) / _1930);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _2583 = frontier_phi_48_45_ladder;
        }
        float _2585 = isnan(_2370) ? _2091 : (isnan(_2091) ? _2370 : min(_2091, _2370));
        float _2586 = isnan(_2583) ? _2585 : (isnan(_2585) ? _2583 : min(_2585, _2583));
        float _2590 = (_2586 * _1924) + _1913;
        float _2591 = (_2586 * _1927) + _1917;
        float _2592 = (_2586 * _1930) + _1921;
        float _2593 = _2586 * 9.9999997473787516355514526367188e-05;
        float _2594 = (-1.0) - _2593;
        float _2596 = _2593 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2592 > _2596) || ((_2592 < _2594) || ((_2591 > _2596) || ((_2591 < _2594) || ((_2590 < _2594) || (_2590 > _2596))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2833 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2592, cbModelParam._m0[17u].z, fma(_2591, cbModelParam._m0[17u].y, _2590 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2592, cbModelParam._m0[18u].z, fma(_2591, cbModelParam._m0[18u].y, _2590 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2592, cbModelParam._m0[19u].z, fma(_2591, cbModelParam._m0[19u].y, _2590 * cbModelParam._m0[19u].x))), _1858);
            frontier_phi_24_48_ladder = _2833.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2833.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2833.x * cbModelParam._m0[1u].z;
        }
        _1949 = frontier_phi_24_48_ladder_2;
        _1951 = frontier_phi_24_48_ladder_1;
        _1953 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1933 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_962, _963, _964), _1858);
        _1949 = _1933.x * cbModelParam._m0[1u].z;
        _1951 = _1933.y * cbModelParam._m0[1u].z;
        _1953 = _1933.z * cbModelParam._m0[1u].z;
    }
    float _1966 = (((_988 * _940) + _989) * _954) * ((cbModelParam._m0[1u].w * (_1949 - _1849)) + _1849);
    float _1968 = (((_988 * _941) + _989) * _954) * ((cbModelParam._m0[1u].w * (_1951 - _1851)) + _1851);
    float _1970 = (((_988 * _942) + _989) * _954) * ((cbModelParam._m0[1u].w * (_1953 - _1853)) + _1853);
    float _1973 = fma(_1970, cbSceneParam._m0[89u].z, fma(_1968, cbSceneParam._m0[89u].y, _1966 * cbSceneParam._m0[89u].x));
    float _1976 = fma(_1970, cbSceneParam._m0[90u].z, fma(_1968, cbSceneParam._m0[90u].y, _1966 * cbSceneParam._m0[90u].x));
    float _1979 = fma(_1970, cbSceneParam._m0[91u].z, fma(_1968, cbSceneParam._m0[91u].y, _1966 * cbSceneParam._m0[91u].x));
    vec4 _1987 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_744, _745));
    float _1989 = _1987.w;
    float _2001 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1989);
    float _2002 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1989);
    float _2003 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1989);
    uvec4 _2007 = floatBitsToUint(cbInstanceData._m0[_846 + 5u]);
    uint _2009 = _2007.x * 14u;
    uint _2010 = _2009 + 13u;
    float _2017 = _954 + (-1.0);
    float _2022 = (cbLight._m0[_2010].x * _2017) + 1.0;
    float _2023 = (cbLight._m0[_2010].y * _2017) + 1.0;
    float _2024 = (cbLight._m0[_2010].z * _2017) + 1.0;
    float _2025 = (cbLight._m0[_2010].w * _2017) + 1.0;
    uint _2026 = _2009 + 5u;
    float _2032 = isnan(1.0) ? _2023 : (isnan(_2023) ? 1.0 : min(_2023, 1.0));
    uint _2036 = _2009 + 4u;
    float _2045 = isnan(1.0) ? _2022 : (isnan(_2022) ? 1.0 : min(_2022, 1.0));
    uint _2049 = _2009 | 1u;
    float _2060 = dot(vec3(cbLight._m0[_2009].xyz), vec3(_655, _656, _657));
    float _2063 = dot(vec3(cbLight._m0[_2049].xyz), vec3(_655, _656, _657));
    float _4239 = isnan(0.0) ? _2060 : (isnan(_2060) ? 0.0 : max(_2060, 0.0));
    float _4250 = isnan(0.0) ? _2063 : (isnan(_2063) ? 0.0 : max(_2063, 0.0));
    float _2068 = (isnan(1.0) ? _4239 : (isnan(_4239) ? 1.0 : min(_4239, 1.0))) * 0.3183098733425140380859375;
    float _2070 = (isnan(1.0) ? _4250 : (isnan(_4250) ? 1.0 : min(_4250, 1.0))) * 0.3183098733425140380859375;
    float _2077 = ((cbLight._m0[_2026].x * _2032) * _2070) + (((cbLight._m0[_2036].x * _2001) * _2045) * _2068);
    float _2078 = ((_2032 * cbLight._m0[_2026].y) * _2070) + (((cbLight._m0[_2036].y * _2002) * _2045) * _2068);
    float _2079 = ((_2032 * cbLight._m0[_2026].z) * _2070) + (((cbLight._m0[_2036].z * _2003) * _2045) * _2068);
    uvec4 _2083 = floatBitsToUint(cbLight._m0[_2009 + 12u]);
    bool _2085 = _2083.x == 0u;
    float _2096;
    float _2098;
    float _2100;
    if (_2085)
    {
        _2096 = _2077;
        _2098 = _2078;
        _2100 = _2079;
    }
    else
    {
        uint _2104 = _2009 + 6u;
        float _2120 = (dot(vec3(cbLight._m0[_2009 + 2u].xyz), vec3(_655, _656, _657)) * 0.5) + 0.5;
        float _2121 = _2120 * _2120;
        float _4261 = isnan(0.0) ? _2121 : (isnan(_2121) ? 0.0 : max(_2121, 0.0));
        float _2122 = isnan(1.0) ? _4261 : (isnan(_4261) ? 1.0 : min(_4261, 1.0));
        float _2123 = isnan(1.0) ? _2024 : (isnan(_2024) ? 1.0 : min(_2024, 1.0));
        _2096 = (((cbLight._m0[_2104].x * 0.3183098733425140380859375) * _2122) * _2123) + _2077;
        _2098 = (((cbLight._m0[_2104].y * 0.3183098733425140380859375) * _2122) * _2123) + _2078;
        _2100 = (((cbLight._m0[_2104].z * 0.3183098733425140380859375) * _2122) * _2123) + _2079;
    }
    bool _2103 = _2083.y == 0u;
    float _2141;
    float _2143;
    float _2145;
    if (_2103)
    {
        _2141 = _2096;
        _2143 = _2098;
        _2145 = _2100;
    }
    else
    {
        uint _2314 = _2009 + 7u;
        float _2330 = (dot(vec3(cbLight._m0[_2009 + 3u].xyz), vec3(_655, _656, _657)) * 0.5) + 0.5;
        float _2331 = _2330 * _2330;
        float _4277 = isnan(0.0) ? _2331 : (isnan(_2331) ? 0.0 : max(_2331, 0.0));
        float _2332 = isnan(1.0) ? _4277 : (isnan(_4277) ? 1.0 : min(_4277, 1.0));
        float _2333 = isnan(1.0) ? _2025 : (isnan(_2025) ? 1.0 : min(_2025, 1.0));
        _2141 = (((cbLight._m0[_2314].x * 0.3183098733425140380859375) * _2332) * _2333) + _2096;
        _2143 = (((cbLight._m0[_2314].y * 0.3183098733425140380859375) * _2332) * _2333) + _2098;
        _2145 = (((cbLight._m0[_2314].z * 0.3183098733425140380859375) * _2332) * _2333) + _2100;
    }
    uint _2148 = _2009 + 8u;
    float _2161 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2009].w)) * _822) * 0.949999988079071044921875);
    float _2162 = _2161 * _2161;
    float _2163 = cbLight._m0[_2009].x + _736;
    float _2164 = cbLight._m0[_2009].y + _737;
    float _2165 = cbLight._m0[_2009].z + _738;
    float _2169 = inversesqrt(dot(vec3(_2163, _2164, _2165), vec3(_2163, _2164, _2165)));
    float _2170 = _2169 * _2163;
    float _2171 = _2169 * _2164;
    float _2172 = _2169 * _2165;
    float _2173 = dot(vec3(_655, _656, _657), vec3(cbLight._m0[_2009].xyz));
    float _4293 = isnan(0.0) ? _2173 : (isnan(_2173) ? 0.0 : max(_2173, 0.0));
    float _2176 = isnan(1.0) ? _4293 : (isnan(_4293) ? 1.0 : min(_4293, 1.0));
    float _4304 = isnan(0.0) ? _955 : (isnan(_955) ? 0.0 : max(_955, 0.0));
    float _2177 = isnan(1.0) ? _4304 : (isnan(_4304) ? 1.0 : min(_4304, 1.0));
    float _2178 = dot(vec3(_655, _656, _657), vec3(_2170, _2171, _2172));
    float _4315 = isnan(0.0) ? _2178 : (isnan(_2178) ? 0.0 : max(_2178, 0.0));
    float _2181 = isnan(1.0) ? _4315 : (isnan(_4315) ? 1.0 : min(_4315, 1.0));
    float _2182 = dot(vec3(cbLight._m0[_2009].xyz), vec3(_2170, _2171, _2172));
    float _4326 = isnan(0.0) ? _2182 : (isnan(_2182) ? 0.0 : max(_2182, 0.0));
    float _2186 = _2162 * _2162;
    float _2190 = ((_2181 * _2181) * (_2186 + (-1.0))) + 1.0;
    float _2198 = exp2(log2(1.0 - (isnan(1.0) ? _4326 : (isnan(_4326) ? 1.0 : min(_4326, 1.0)))) * 5.0);
    float _2199 = 0.959999978542327880859375 - _937;
    float _2201 = 0.959999978542327880859375 - _938;
    float _2202 = 0.959999978542327880859375 - _939;
    float _2209 = 1.0 - _2162;
    float _2220 = (0.5 / (((_2177 * ((_2176 * _2209) + _2162)) + 9.9999999392252902907785028219223e-09) + (((_2177 * _2209) + _2162) * _2176))) * _2176;
    float _4337 = isnan(0.0) ? _2220 : (isnan(_2220) ? 0.0 : max(_2220, 0.0));
    float _2222 = (isnan(1.0) ? _4337 : (isnan(_4337) ? 1.0 : min(_4337, 1.0))) * (_2186 / ((_2190 * _2190) * 3.141590118408203125));
    uint _2236 = _2009 + 9u;
    float _2247 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2049].w)) * _822) * 0.949999988079071044921875);
    float _2248 = _2247 * _2247;
    float _2249 = cbLight._m0[_2049].x + _736;
    float _2250 = cbLight._m0[_2049].y + _737;
    float _2251 = cbLight._m0[_2049].z + _738;
    float _2255 = inversesqrt(dot(vec3(_2249, _2250, _2251), vec3(_2249, _2250, _2251)));
    float _2256 = _2255 * _2249;
    float _2257 = _2255 * _2250;
    float _2258 = _2255 * _2251;
    float _2259 = dot(vec3(_655, _656, _657), vec3(cbLight._m0[_2049].xyz));
    float _4348 = isnan(0.0) ? _2259 : (isnan(_2259) ? 0.0 : max(_2259, 0.0));
    float _2262 = isnan(1.0) ? _4348 : (isnan(_4348) ? 1.0 : min(_4348, 1.0));
    float _2263 = dot(vec3(_655, _656, _657), vec3(_2256, _2257, _2258));
    float _4359 = isnan(0.0) ? _2263 : (isnan(_2263) ? 0.0 : max(_2263, 0.0));
    float _2266 = isnan(1.0) ? _4359 : (isnan(_4359) ? 1.0 : min(_4359, 1.0));
    float _2267 = dot(vec3(cbLight._m0[_2049].xyz), vec3(_2256, _2257, _2258));
    float _4370 = isnan(0.0) ? _2267 : (isnan(_2267) ? 0.0 : max(_2267, 0.0));
    float _2271 = _2248 * _2248;
    float _2275 = ((_2266 * _2266) * (_2271 + (-1.0))) + 1.0;
    float _2282 = exp2(log2(1.0 - (isnan(1.0) ? _4370 : (isnan(_4370) ? 1.0 : min(_4370, 1.0)))) * 5.0);
    float _2289 = 1.0 - _2248;
    float _2299 = (0.5 / (((_2177 * ((_2262 * _2289) + _2248)) + 9.9999999392252902907785028219223e-09) + (((_2177 * _2289) + _2248) * _2262))) * _2262;
    float _4381 = isnan(0.0) ? _2299 : (isnan(_2299) ? 0.0 : max(_2299, 0.0));
    float _2301 = (isnan(1.0) ? _4381 : (isnan(_4381) ? 1.0 : min(_4381, 1.0))) * (_2271 / ((_2275 * _2275) * 3.141590118408203125));
    float _2311 = (((((_2282 * _2199) + _940) * cbLight._m0[_2236].x) * _2301) * _2032) + ((((cbLight._m0[_2148].x * _2001) * ((_2198 * _2199) + _940)) * _2222) * _2045);
    float _2312 = (((((_2282 * _2201) + _941) * cbLight._m0[_2236].y) * _2301) * _2032) + ((((cbLight._m0[_2148].y * _2002) * ((_2198 * _2201) + _941)) * _2222) * _2045);
    float _2313 = (((((_2282 * _2202) + _942) * cbLight._m0[_2236].z) * _2301) * _2032) + ((((cbLight._m0[_2148].z * _2003) * ((_2198 * _2202) + _942)) * _2222) * _2045);
    float _2375;
    float _2377;
    float _2379;
    if (_2085)
    {
        _2375 = _2311;
        _2377 = _2312;
        _2379 = _2313;
    }
    else
    {
        uint _2381 = _2009 + 2u;
        uint _2385 = _2009 + 10u;
        float _2399 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2381].w)) * _822) * 0.949999988079071044921875);
        float _2400 = _2399 * _2399;
        float _2401 = cbLight._m0[_2381].x + _736;
        float _2402 = cbLight._m0[_2381].y + _737;
        float _2403 = cbLight._m0[_2381].z + _738;
        float _2407 = inversesqrt(dot(vec3(_2401, _2402, _2403), vec3(_2401, _2402, _2403)));
        float _2408 = _2407 * _2401;
        float _2409 = _2407 * _2402;
        float _2410 = _2407 * _2403;
        float _2411 = dot(vec3(_655, _656, _657), vec3(cbLight._m0[_2381].xyz));
        float _4392 = isnan(0.0) ? _2411 : (isnan(_2411) ? 0.0 : max(_2411, 0.0));
        float _2414 = isnan(1.0) ? _4392 : (isnan(_4392) ? 1.0 : min(_4392, 1.0));
        float _2415 = dot(vec3(_655, _656, _657), vec3(_2408, _2409, _2410));
        float _4403 = isnan(0.0) ? _2415 : (isnan(_2415) ? 0.0 : max(_2415, 0.0));
        float _2418 = isnan(1.0) ? _4403 : (isnan(_4403) ? 1.0 : min(_4403, 1.0));
        float _2419 = dot(vec3(cbLight._m0[_2381].xyz), vec3(_2408, _2409, _2410));
        float _4414 = isnan(0.0) ? _2419 : (isnan(_2419) ? 0.0 : max(_2419, 0.0));
        float _2423 = _2400 * _2400;
        float _2427 = ((_2418 * _2418) * (_2423 + (-1.0))) + 1.0;
        float _2434 = exp2(log2(1.0 - (isnan(1.0) ? _4414 : (isnan(_4414) ? 1.0 : min(_4414, 1.0)))) * 5.0);
        float _2441 = 1.0 - _2400;
        float _2451 = (0.5 / (((_2177 * ((_2414 * _2441) + _2400)) + 9.9999999392252902907785028219223e-09) + (((_2177 * _2441) + _2400) * _2414))) * _2414;
        float _4425 = isnan(0.0) ? _2451 : (isnan(_2451) ? 0.0 : max(_2451, 0.0));
        float _2453 = (isnan(1.0) ? _4425 : (isnan(_4425) ? 1.0 : min(_4425, 1.0))) * (_2423 / ((_2427 * _2427) * 3.141590118408203125));
        float _2454 = isnan(1.0) ? _2024 : (isnan(_2024) ? 1.0 : min(_2024, 1.0));
        _2375 = (((((_2434 * _2199) + _940) * cbLight._m0[_2385].x) * _2453) * _2454) + _2311;
        _2377 = (((((_2434 * _2201) + _941) * cbLight._m0[_2385].y) * _2453) * _2454) + _2312;
        _2379 = (((((_2434 * _2202) + _942) * cbLight._m0[_2385].z) * _2453) * _2454) + _2313;
    }
    float _2489;
    float _2491;
    float _2493;
    if (_2103)
    {
        _2489 = _2375;
        _2491 = _2377;
        _2493 = _2379;
    }
    else
    {
        uint _2500 = _2009 + 3u;
        uint _2504 = _2009 + 11u;
        float _2518 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2500].w)) * _822) * 0.949999988079071044921875);
        float _2519 = _2518 * _2518;
        float _2520 = cbLight._m0[_2500].x + _736;
        float _2521 = cbLight._m0[_2500].y + _737;
        float _2522 = cbLight._m0[_2500].z + _738;
        float _2526 = inversesqrt(dot(vec3(_2520, _2521, _2522), vec3(_2520, _2521, _2522)));
        float _2527 = _2526 * _2520;
        float _2528 = _2526 * _2521;
        float _2529 = _2526 * _2522;
        float _2530 = dot(vec3(_655, _656, _657), vec3(cbLight._m0[_2500].xyz));
        float _4441 = isnan(0.0) ? _2530 : (isnan(_2530) ? 0.0 : max(_2530, 0.0));
        float _2533 = isnan(1.0) ? _4441 : (isnan(_4441) ? 1.0 : min(_4441, 1.0));
        float _2534 = dot(vec3(_655, _656, _657), vec3(_2527, _2528, _2529));
        float _4452 = isnan(0.0) ? _2534 : (isnan(_2534) ? 0.0 : max(_2534, 0.0));
        float _2537 = isnan(1.0) ? _4452 : (isnan(_4452) ? 1.0 : min(_4452, 1.0));
        float _2538 = dot(vec3(cbLight._m0[_2500].xyz), vec3(_2527, _2528, _2529));
        float _4463 = isnan(0.0) ? _2538 : (isnan(_2538) ? 0.0 : max(_2538, 0.0));
        float _2542 = _2519 * _2519;
        float _2546 = ((_2537 * _2537) * (_2542 + (-1.0))) + 1.0;
        float _2553 = exp2(log2(1.0 - (isnan(1.0) ? _4463 : (isnan(_4463) ? 1.0 : min(_4463, 1.0)))) * 5.0);
        float _2560 = 1.0 - _2519;
        float _2570 = (0.5 / (((_2177 * ((_2533 * _2560) + _2519)) + 9.9999999392252902907785028219223e-09) + (((_2177 * _2560) + _2519) * _2533))) * _2533;
        float _4474 = isnan(0.0) ? _2570 : (isnan(_2570) ? 0.0 : max(_2570, 0.0));
        float _2572 = (isnan(1.0) ? _4474 : (isnan(_4474) ? 1.0 : min(_4474, 1.0))) * (_2542 / ((_2546 * _2546) * 3.141590118408203125));
        float _2573 = isnan(1.0) ? _2025 : (isnan(_2025) ? 1.0 : min(_2025, 1.0));
        _2489 = (((((_2553 * _2199) + _940) * cbLight._m0[_2504].x) * _2572) * _2573) + _2375;
        _2491 = (((((_2553 * _2201) + _941) * cbLight._m0[_2504].y) * _2572) * _2573) + _2377;
        _2493 = (((((_2553 * _2202) + _942) * cbLight._m0[_2504].z) * _2572) * _2573) + _2379;
    }
    float _2707;
    float _2709;
    float _2711;
    float _2713;
    float _2715;
    float _2717;
    if (_2007.y == 0u)
    {
        float _2648 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2649 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2648;
        float _2650 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2648;
        float _2651 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2648;
        uvec4 _2663 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2664 = _2663.x;
        uint _2675 = uint((float(_2663.y) * floor(float(uint(cbSceneParam._m0[85u].y * _745) / _2664))) + floor(float(uint(cbSceneParam._m0[85u].x * _744) / _2664)));
        float _2685 = (log2(_2651 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2686 = isnan(0.0) ? _2685 : (isnan(_2685) ? 0.0 : max(_2685, 0.0));
        uint _2689 = uint(isnan(14.0) ? _2686 : (isnan(_2686) ? 14.0 : min(_2686, 14.0)));
        uvec4 _2694 = texelFetch(g_lightClusterGridBuffer, int(((_2689 << 2u) + (_2675 << 6u)) >> 2u));
        uint _2695 = _2694.x;
        uint _2696 = _2663.z;
        float _2838;
        float _2840;
        float _2842;
        float _2844;
        float _2846;
        float _2848;
        if (((((1u << ((_2696 >> 4u) & 15u)) + 4294967295u) & _2695) == 0u) || ((_2696 & 240u) == 0u))
        {
            _2838 = 0.0;
            _2840 = 0.0;
            _2842 = 0.0;
            _2844 = 0.0;
            _2846 = 0.0;
            _2848 = 0.0;
        }
        else
        {
            float _2839;
            float _2841;
            float _2843;
            float _2845;
            float _2847;
            float _2849;
            float _2991 = 0.0;
            float _2992 = 0.0;
            float _2993 = 0.0;
            float _2994 = 0.0;
            float _2995 = 0.0;
            float _2996 = 0.0;
            uint _2997 = 0u;
            uint _3006;
            bool _3007;
            for (;;)
            {
                _3006 = texelFetch(g_lightClassification, int((((_2689 << 5u) + (_2675 << 9u)) + (_2997 << 2u)) >> 2u)).x;
                _3007 = _3006 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_3007)
                {
                    frontier_phi_63_pred = _2996;
                    frontier_phi_63_pred_1 = _2995;
                    frontier_phi_63_pred_2 = _2994;
                    frontier_phi_63_pred_3 = _2993;
                    frontier_phi_63_pred_4 = _2992;
                    frontier_phi_63_pred_5 = _2991;
                }
                else
                {
                    float _3115;
                    float _3116;
                    float _3117;
                    float _3118;
                    float _3119;
                    float _3120;
                    uint _3121;
                    _3115 = _2991;
                    _3116 = _2992;
                    _3117 = _2993;
                    _3118 = _2994;
                    _3119 = _2995;
                    _3120 = _2996;
                    _3121 = _3006;
                    float _3047;
                    float _3048;
                    float _3049;
                    float _3050;
                    float _3051;
                    float _3052;
                    for (;;)
                    {
                        uint _3125 = uint(findLSB(_3121)) + (_2997 << 5u);
                        uint _3122 = (_3121 + 4294967295u) & _3121;
                        uint _3127 = _3125 * 48u;
                        vec4 _3141 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3127)).x, texelFetch(g_PointLightRenderingBuffer, int(_3127 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3127 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3127 + 3u)).x));
                        uint _3147 = (_3125 * 48u) + 4u;
                        vec4 _3160 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3147)).x, texelFetch(g_PointLightRenderingBuffer, int(_3147 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3147 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3147 + 3u)).x));
                        uint _3166 = (_3125 * 48u) + 8u;
                        vec3 _3177 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3166)).x, texelFetch(g_PointLightRenderingBuffer, int(_3166 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3166 + 2u)).x));
                        float _3181 = _3141.x - _2649;
                        float _3182 = _3141.y - _2650;
                        float _3183 = _3141.z - _2651;
                        float _3184 = dot(vec3(_3181, _3182, _3183), vec3(_3181, _3182, _3183));
                        float _3187 = inversesqrt(_3184);
                        float _3188 = _3187 * _3181;
                        float _3189 = _3187 * _3182;
                        float _3190 = _3187 * _3183;
                        float _3191 = dot(vec3(_767, _770, _773), vec3(_3188, _3189, _3190));
                        float _3196 = 1.0 - (_3184 * _3141.w);
                        float _4500 = isnan(0.0) ? _3196 : (isnan(_3196) ? 0.0 : max(_3196, 0.0));
                        float _3197 = isnan(1.0) ? _4500 : (isnan(_4500) ? 1.0 : min(_4500, 1.0));
                        float _3198 = sqrt(_3184) * _3160.w;
                        float _3201 = 1.39999997615814208984375 / (_3198 + 1.39999997615814208984375);
                        float _3202 = _3201 * _3201;
                        float _3205 = ((1.0 - _3202) * _3191) + _3202;
                        float _3208 = _3198 * _3198;
                        float _3212 = ((isnan(0.0) ? _3205 : (isnan(_3205) ? 0.0 : max(_3205, 0.0))) * _3197) / ((_3208 * 0.699999988079071044921875) + 1.0);
                        float _3216 = (-0.0) - _2649;
                        float _3217 = (-0.0) - _2650;
                        float _3218 = (-0.0) - _2651;
                        float _3222 = inversesqrt(dot(vec3(_3216, _3217, _3218), vec3(_3216, _3217, _3218)));
                        float _3223 = _3222 * _3216;
                        float _3224 = _3222 * _3217;
                        float _3225 = _3222 * _3218;
                        float _3233 = exp2(log2(1.0 / ((_3208 * 3.5) + 5.0)) * 0.25);
                        float _3234 = 1.0 - _970;
                        float _3241 = sqrt(1.0 - ((1.0 - (_3234 * _3234)) * (1.0 - (_3233 * _3233))));
                        float _3242 = _3241 * _3241;
                        float _3243 = _3242 * _3242;
                        float _3244 = _3223 + _3188;
                        float _3245 = _3224 + _3189;
                        float _3246 = _3225 + _3190;
                        float _3250 = inversesqrt(dot(vec3(_3244, _3245, _3246), vec3(_3244, _3245, _3246)));
                        float _3254 = dot(vec3(_767, _770, _773), vec3(_3223, _3224, _3225));
                        float _4516 = isnan(0.0) ? _3254 : (isnan(_3254) ? 0.0 : max(_3254, 0.0));
                        float _3257 = isnan(1.0) ? _4516 : (isnan(_4516) ? 1.0 : min(_4516, 1.0));
                        float _3258 = dot(vec3(_767, _770, _773), vec3(_3250 * _3244, _3250 * _3245, _3250 * _3246));
                        float _4527 = isnan(0.0) ? _3258 : (isnan(_3258) ? 0.0 : max(_3258, 0.0));
                        float _3261 = isnan(1.0) ? _4527 : (isnan(_4527) ? 1.0 : min(_4527, 1.0));
                        float _3265 = ((_3261 * _3261) * (_3243 + (-1.0))) + 1.0;
                        float _3266 = _3201 * _3242;
                        float _3267 = _3266 * _3266;
                        float _3270 = ((1.0 - _3267) * _3191) + _3267;
                        float _4538 = isnan(0.0) ? _3270 : (isnan(_3270) ? 0.0 : max(_3270, 0.0));
                        float _3271 = isnan(1.0) ? _4538 : (isnan(_4538) ? 1.0 : min(_4538, 1.0));
                        float _3272 = 1.0 - _3242;
                        float _3282 = (0.5 / (((_3271 * ((_3257 * _3272) + _3242)) + 9.9999999392252902907785028219223e-09) + (((_3271 * _3272) + _3242) * _3257))) * _3271;
                        float _4549 = isnan(0.0) ? _3282 : (isnan(_3282) ? 0.0 : max(_3282, 0.0));
                        float _3293 = (((_3243 * 3.1415927410125732421875) * (isnan(1.0) ? _4549 : (isnan(_4549) ? 1.0 : min(_4549, 1.0)))) / ((_3265 * _3265) * ((_3208 * 2.1991131305694580078125) + 3.141590118408203125))) * _3197;
                        _3050 = (_3212 * _3160.x) + _3118;
                        _3051 = (_3212 * _3160.y) + _3119;
                        _3052 = (_3212 * _3160.z) + _3120;
                        _3047 = (_3293 * _3177.x) + _3115;
                        _3048 = (_3293 * _3177.y) + _3116;
                        _3049 = (_3293 * _3177.z) + _3117;
                        if (_3122 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3115 = _3047;
                            _3116 = _3048;
                            _3117 = _3049;
                            _3118 = _3050;
                            _3119 = _3051;
                            _3120 = _3052;
                            _3121 = _3122;
                        }
                    }
                    frontier_phi_63_pred = _3052;
                    frontier_phi_63_pred_1 = _3051;
                    frontier_phi_63_pred_2 = _3050;
                    frontier_phi_63_pred_3 = _3049;
                    frontier_phi_63_pred_4 = _3048;
                    frontier_phi_63_pred_5 = _3047;
                }
                _2849 = frontier_phi_63_pred;
                _2847 = frontier_phi_63_pred_1;
                _2845 = frontier_phi_63_pred_2;
                _2843 = frontier_phi_63_pred_3;
                _2841 = frontier_phi_63_pred_4;
                _2839 = frontier_phi_63_pred_5;
                uint _2998 = _2997 + 1u;
                if (_2998 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2991 = _2839;
                    _2992 = _2841;
                    _2993 = _2843;
                    _2994 = _2845;
                    _2995 = _2847;
                    _2996 = _2849;
                    _2997 = _2998;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2838 = _2839;
            _2840 = _2841;
            _2842 = _2843;
            _2844 = _2845;
            _2846 = _2847;
            _2848 = _2849;
        }
        uvec4 _2852 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2853 = _2852.z;
        uint _2855 = (_2853 >> 8u) & 15u;
        float _2959;
        float _2961;
        float _2963;
        float _2965;
        float _2967;
        float _2969;
        if (((4294967295u << _2855) & _2695) == 0u)
        {
            _2959 = _2838;
            _2961 = _2840;
            _2963 = _2842;
            _2965 = _2844;
            _2967 = _2846;
            _2969 = _2848;
        }
        else
        {
            float _2984 = inversesqrt(dot(vec3(_2649, _2650, _2651), vec3(_2649, _2650, _2651)));
            float _2985 = _2984 * _2649;
            float _2986 = _2984 * _2650;
            float _2987 = _2984 * _2651;
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2855 < ((_2853 >> 12u) & 15u))
            {
                float _2960;
                float _2962;
                float _2964;
                float _2966;
                float _2968;
                float _2970;
                float _3098 = _2838;
                float _3099 = _2840;
                float _3100 = _2842;
                float _3101 = _2844;
                float _3102 = _2846;
                float _3103 = _2848;
                uint _3104 = _2855;
                uint _3113;
                bool _3114;
                for (;;)
                {
                    _3113 = texelFetch(g_lightClassification, int((((_2689 << 5u) + (_2675 << 9u)) + (_3104 << 2u)) >> 2u)).x;
                    _3114 = _3113 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_3114)
                    {
                        frontier_phi_69_pred = _3103;
                        frontier_phi_69_pred_1 = _3102;
                        frontier_phi_69_pred_2 = _3101;
                        frontier_phi_69_pred_3 = _3100;
                        frontier_phi_69_pred_4 = _3099;
                        frontier_phi_69_pred_5 = _3098;
                    }
                    else
                    {
                        float _3298;
                        float _3299;
                        float _3300;
                        float _3301;
                        float _3302;
                        float _3303;
                        float _3593;
                        float _3594;
                        float _3595;
                        float _3596;
                        float _3597;
                        float _3598;
                        float _3311 = _3098;
                        float _3312 = _3099;
                        float _3313 = _3100;
                        float _3314 = _3101;
                        float _3315 = _3102;
                        float _3316 = _3103;
                        uint _3317 = _3113;
                        uint _3318;
                        vec4 _3343;
                        float _3344;
                        vec4 _3359;
                        vec3 _3371;
                        vec4 _3386;
                        vec4 _3402;
                        float _3449;
                        bool _3450;
                        for (;;)
                        {
                            uint _3328 = ((_3104 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3317));
                            _3318 = (_3317 + 4294967295u) & _3317;
                            uint _3330 = _3328 * 40u;
                            _3343 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3330)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3330 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3330 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3330 + 3u)).x));
                            _3344 = _3343.w;
                            uint _3346 = (_3328 * 40u) + 4u;
                            _3359 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3346)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3346 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3346 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3346 + 3u)).x));
                            uint _3361 = (_3328 * 40u) + 8u;
                            _3371 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3361)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3361 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3361 + 2u)).x));
                            uint _3373 = (_3328 * 40u) + 16u;
                            _3386 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3373)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3373 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3373 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3373 + 3u)).x));
                            uint _3389 = (_3328 * 40u) + 20u;
                            _3402 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3389)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3389 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3389 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3389 + 3u)).x));
                            uint _3405 = (_3328 * 40u) + 24u;
                            vec4 _3418 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3405)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3405 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3405 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3405 + 3u)).x));
                            uint _3424 = (_3328 * 40u) + 28u;
                            vec4 _3437 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3424)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3424 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3424 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3424 + 3u)).x));
                            _3449 = fma(_2651, _3437.z, fma(_2650, _3437.y, _3437.x * _2649)) + _3437.w;
                            _3450 = !((fma(_2651, _3418.z, fma(_2650, _3418.y, _3418.x * _2649)) + _3418.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_3450)
                            {
                                float _3477 = _3343.x - _2649;
                                float _3478 = _3343.y - _2650;
                                float _3479 = _3343.z - _2651;
                                float _3480 = dot(vec3(_3477, _3478, _3479), vec3(_3477, _3478, _3479));
                                float _3483 = inversesqrt(_3480);
                                float _3484 = _3483 * _3477;
                                float _3485 = _3483 * _3478;
                                float _3486 = _3483 * _3479;
                                float _3490 = 1.0 - (_3480 / (_3344 * _3344));
                                float _4560 = isnan(0.0) ? _3490 : (isnan(_3490) ? 0.0 : max(_3490, 0.0));
                                float _3491 = isnan(1.0) ? _4560 : (isnan(_4560) ? 1.0 : min(_4560, 1.0));
                                float _3495 = sqrt(_3480) * _3359.w;
                                float _3497 = 1.39999997615814208984375 / (_3495 + 1.39999997615814208984375);
                                float _3498 = _3497 * _3497;
                                float _3501 = ((1.0 - _3498) * dot(vec3(_3484, _3485, _3486), vec3(_767, _770, _773))) + _3498;
                                float _3504 = _3495 * _3495;
                                float _3508 = (fma(_2651, _3386.z, fma(_2650, _3386.y, _3386.x * _2649)) + _3386.w) / _3449;
                                float _3509 = (fma(_2651, _3402.z, fma(_2650, _3402.y, _3402.x * _2649)) + _3402.w) / _3449;
                                float _3513 = 1.0 - dot(vec2(_3508, _3509), vec2(_3508, _3509));
                                float _4576 = isnan(0.0) ? _3513 : (isnan(_3513) ? 0.0 : max(_3513, 0.0));
                                float _3514 = isnan(1.0) ? _4576 : (isnan(_4576) ? 1.0 : min(_4576, 1.0));
                                float _3515 = _3514 * (((isnan(0.0) ? _3501 : (isnan(_3501) ? 0.0 : max(_3501, 0.0))) * _3491) / ((_3504 * 0.699999988079071044921875) + 1.0));
                                float _3527 = exp2(log2(1.0 / ((_3504 * 3.5) + 5.0)) * 0.25);
                                float _3528 = 1.0 - _970;
                                float _3535 = sqrt(1.0 - ((1.0 - (_3528 * _3528)) * (1.0 - (_3527 * _3527))));
                                float _3536 = _3535 * _3535;
                                float _3537 = _3536 * _3536;
                                float _3538 = _3484 - _2985;
                                float _3539 = _3485 - _2986;
                                float _3540 = _3486 - _2987;
                                float _3544 = inversesqrt(dot(vec3(_3538, _3539, _3540), vec3(_3538, _3539, _3540)));
                                float _3548 = dot(vec3(_767, _770, _773), vec3((-0.0) - _2985, (-0.0) - _2986, (-0.0) - _2987));
                                float _4587 = isnan(0.0) ? _3548 : (isnan(_3548) ? 0.0 : max(_3548, 0.0));
                                float _3551 = isnan(1.0) ? _4587 : (isnan(_4587) ? 1.0 : min(_4587, 1.0));
                                float _3552 = dot(vec3(_767, _770, _773), vec3(_3544 * _3538, _3544 * _3539, _3544 * _3540));
                                float _4598 = isnan(0.0) ? _3552 : (isnan(_3552) ? 0.0 : max(_3552, 0.0));
                                float _3555 = isnan(1.0) ? _4598 : (isnan(_4598) ? 1.0 : min(_4598, 1.0));
                                float _3559 = ((_3555 * _3555) * (_3537 + (-1.0))) + 1.0;
                                float _3560 = _3497 * _3536;
                                float _3561 = _3560 * _3560;
                                float _3567 = ((1.0 - _3561) * dot(vec3(_767, _770, _773), vec3(_3484, _3485, _3486))) + _3561;
                                float _4609 = isnan(0.0) ? _3567 : (isnan(_3567) ? 0.0 : max(_3567, 0.0));
                                float _3568 = isnan(1.0) ? _4609 : (isnan(_4609) ? 1.0 : min(_4609, 1.0));
                                float _3569 = 1.0 - _3536;
                                float _3579 = (0.5 / (((_3568 * ((_3551 * _3569) + _3536)) + 9.9999999392252902907785028219223e-09) + (((_3568 * _3569) + _3536) * _3551))) * _3568;
                                float _4620 = isnan(0.0) ? _3579 : (isnan(_3579) ? 0.0 : max(_3579, 0.0));
                                float _3589 = (_3514 * _3491) * (((_3537 * 3.1415927410125732421875) * (isnan(1.0) ? _4620 : (isnan(_4620) ? 1.0 : min(_4620, 1.0)))) / ((_3559 * _3559) * ((_3504 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_75_pred = _3515 * _3359.z;
                                frontier_phi_75_pred_1 = _3515 * _3359.y;
                                frontier_phi_75_pred_2 = _3515 * _3359.x;
                                frontier_phi_75_pred_3 = _3589 * _3371.z;
                                frontier_phi_75_pred_4 = _3589 * _3371.y;
                                frontier_phi_75_pred_5 = _3589 * _3371.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _3598 = frontier_phi_75_pred;
                            _3597 = frontier_phi_75_pred_1;
                            _3596 = frontier_phi_75_pred_2;
                            _3595 = frontier_phi_75_pred_3;
                            _3594 = frontier_phi_75_pred_4;
                            _3593 = frontier_phi_75_pred_5;
                            _3301 = _3596 + _3314;
                            _3302 = _3597 + _3315;
                            _3303 = _3598 + _3316;
                            _3298 = _3593 + _3311;
                            _3299 = _3594 + _3312;
                            _3300 = _3595 + _3313;
                            if (_3318 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3311 = _3298;
                                _3312 = _3299;
                                _3313 = _3300;
                                _3314 = _3301;
                                _3315 = _3302;
                                _3316 = _3303;
                                _3317 = _3318;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _3303;
                        frontier_phi_69_pred_1 = _3302;
                        frontier_phi_69_pred_2 = _3301;
                        frontier_phi_69_pred_3 = _3300;
                        frontier_phi_69_pred_4 = _3299;
                        frontier_phi_69_pred_5 = _3298;
                    }
                    _2970 = frontier_phi_69_pred;
                    _2968 = frontier_phi_69_pred_1;
                    _2966 = frontier_phi_69_pred_2;
                    _2964 = frontier_phi_69_pred_3;
                    _2962 = frontier_phi_69_pred_4;
                    _2960 = frontier_phi_69_pred_5;
                    uint _3105 = _3104 + 1u;
                    if (_3105 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3098 = _2960;
                        _3099 = _2962;
                        _3100 = _2964;
                        _3101 = _2966;
                        _3102 = _2968;
                        _3103 = _2970;
                        _3104 = _3105;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2970;
                frontier_phi_57_58_ladder_1 = _2968;
                frontier_phi_57_58_ladder_2 = _2966;
                frontier_phi_57_58_ladder_3 = _2964;
                frontier_phi_57_58_ladder_4 = _2962;
                frontier_phi_57_58_ladder_5 = _2960;
            }
            else
            {
                frontier_phi_57_58_ladder = _2848;
                frontier_phi_57_58_ladder_1 = _2846;
                frontier_phi_57_58_ladder_2 = _2844;
                frontier_phi_57_58_ladder_3 = _2842;
                frontier_phi_57_58_ladder_4 = _2840;
                frontier_phi_57_58_ladder_5 = _2838;
            }
            _2959 = frontier_phi_57_58_ladder_5;
            _2961 = frontier_phi_57_58_ladder_4;
            _2963 = frontier_phi_57_58_ladder_3;
            _2965 = frontier_phi_57_58_ladder_2;
            _2967 = frontier_phi_57_58_ladder_1;
            _2969 = frontier_phi_57_58_ladder;
        }
        float _2974 = isnan(1.0) ? _954 : (isnan(_954) ? 1.0 : min(_954, 1.0));
        _2707 = (_2974 * _2965) + _2141;
        _2709 = (_2974 * _2967) + _2143;
        _2711 = (_2974 * _2969) + _2145;
        _2713 = ((_2959 * _940) * _2974) + _2489;
        _2715 = ((_2961 * _941) * _2974) + _2491;
        _2717 = ((_2963 * _942) * _2974) + _2493;
    }
    else
    {
        _2707 = _2141;
        _2709 = _2143;
        _2711 = _2145;
        _2713 = _2489;
        _2715 = _2491;
        _2717 = _2493;
    }
    uint _2723 = _847 + uint(cbMatDynParam._m0[0u].w);
    float _2733 = ((((cbMtdParam._m0[12u].x * cbMtdParam._m0[16u].z) * cbMtdParam._m0[15u].w) * _587) * _600.x) * cbInstanceData._m0[_2723].x;
    float _2738 = ((((cbMtdParam._m0[12u].y * cbMtdParam._m0[16u].z) * cbMtdParam._m0[15u].w) * _587) * _600.y) * cbInstanceData._m0[_2723].y;
    float _2743 = ((((cbMtdParam._m0[12u].z * cbMtdParam._m0[16u].z) * cbMtdParam._m0[15u].w) * _587) * _600.z) * cbInstanceData._m0[_2723].z;
    float _4636 = isnan(0.0) ? _931 : (isnan(_931) ? 0.0 : max(_931, 0.0));
    float _4647 = isnan(0.0) ? _932 : (isnan(_932) ? 0.0 : max(_932, 0.0));
    float _4658 = isnan(0.0) ? _933 : (isnan(_933) ? 0.0 : max(_933, 0.0));
    float _4669 = isnan(0.0) ? _658 : (isnan(_658) ? 0.0 : max(_658, 0.0));
    float _2761 = (((isnan(1.0) ? _4636 : (isnan(_4636) ? 1.0 : min(_4636, 1.0))) * (_2707 + ((isnan(0.0) ? _1682 : (isnan(_1682) ? 0.0 : max(_1682, 0.0))) * _954))) + ((_2713 + ((isnan(0.0) ? _1973 : (isnan(_1973) ? 0.0 : max(_1973, 0.0))) * _1758)) * cbPerFrame._m0[3u].x)) + _2733;
    float _2763 = (_2738 + ((_2715 + ((isnan(0.0) ? _1976 : (isnan(_1976) ? 0.0 : max(_1976, 0.0))) * _1758)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4647 : (isnan(_4647) ? 1.0 : min(_4647, 1.0))) * (_2709 + ((isnan(0.0) ? _1685 : (isnan(_1685) ? 0.0 : max(_1685, 0.0))) * _954)));
    float _2765 = (_2743 + ((_2717 + ((isnan(0.0) ? _1979 : (isnan(_1979) ? 0.0 : max(_1979, 0.0))) * _1758)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4658 : (isnan(_4658) ? 1.0 : min(_4658, 1.0))) * (_2711 + ((isnan(0.0) ? _1688 : (isnan(_1688) ? 0.0 : max(_1688, 0.0))) * _954)));
    float _4695 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2778 = isnan(1.0) ? _4695 : (isnan(_4695) ? 1.0 : min(_4695, 1.0));
    float _2783 = cbInstanceData._m0[_846 + 6u].w * (isnan(1.0) ? _4669 : (isnan(_4669) ? 1.0 : min(_4669, 1.0)));
    float _2788 = _744 / cbSceneParam._m0[86u].x;
    float _2789 = _745 / cbSceneParam._m0[86u].y;
    vec4 _2803 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2788, _2789, (log2((isnan(cbSceneParam._m0[77u].w) ? _679 : (isnan(_679) ? cbSceneParam._m0[77u].w : min(_679, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2805 = _2803.x;
    float _2806 = _2803.y;
    float _2807 = _2803.z;
    float _2808 = _2803.w;
    float _2900;
    float _2902;
    float _2904;
    float _2906;
    if (_679 > cbSceneParam._m0[78u].w)
    {
        float _2863 = isnan(_679) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _679 : min(cbSceneParam._m0[80u].w, _679));
        float _2864 = _2863 / _679;
        float _2875 = _2864 * _729;
        float _2876 = _730 * _2864;
        float _2877 = (-0.0) - _2876;
        float _2878 = _2864 * _731;
        float _2880 = (cbSceneParam._m0[77u].w * _2877) / _2863;
        float _2881 = _2880 + cbSceneParam._m0[79u].w;
        float _2882 = cbSceneParam._m0[79u].w - _2876;
        float _2888 = sqrt(((_2875 * _2875) + (_2876 * _2876)) + (_2878 * _2878));
        float _2891 = (1.0 - (cbSceneParam._m0[77u].w / _2863)) * _2888;
        float _2896 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2898 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3060;
        if (abs((_2877 - _2880) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3060 = ((((_2881 > 0.0) ? exp2(_2896 * _2881) : (2.0 - exp2(_2898 * _2881))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2891;
        }
        else
        {
            float _3020 = 1.0 / cbSceneParam._m0[80u].x;
            float _3021 = isnan(_2882) ? _2881 : (isnan(_2881) ? _2882 : max(_2881, _2882));
            float _3022 = isnan(_2882) ? _2881 : (isnan(_2881) ? _2882 : min(_2881, _2882));
            float _3031 = isnan(0.0) ? _3021 : (isnan(_3021) ? 0.0 : min(_3021, 0.0));
            float _3032 = isnan(0.0) ? _3022 : (isnan(_3022) ? 0.0 : min(_3022, 0.0));
            _3060 = ((abs(_2888 / _2877) * cbSceneParam._m0[80u].y) * ((((_3031 - _3032) * 2.0) - ((exp2(_2896 * (isnan(0.0) ? _3021 : (isnan(_3021) ? 0.0 : max(_3021, 0.0)))) - exp2(_2896 * (isnan(0.0) ? _3022 : (isnan(_3022) ? 0.0 : max(_3022, 0.0))))) * _3020)) - ((exp2(_2898 * _3031) - exp2(_2898 * _3032)) * _3020))) + (_2891 * cbSceneParam._m0[80u].z);
        }
        vec4 _3062 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2788, _2789, 1.0), 0.0);
        float _3071 = exp2((_3060 * (-1.44269502162933349609375)) * (1.0 - _3062.w));
        float _3072 = log2(_3071);
        float _3088 = log2(_2808);
        _2900 = (exp2(_3088 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3072 * cbSceneParam._m0[78u].x)) * _3062.x) / cbSceneParam._m0[78u].x)) + _2805;
        _2902 = (exp2(_3088 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3072 * cbSceneParam._m0[78u].y)) * _3062.y) / cbSceneParam._m0[78u].y)) + _2806;
        _2904 = (exp2(_3088 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3072 * cbSceneParam._m0[78u].z)) * _3062.z) / cbSceneParam._m0[78u].z)) + _2807;
        _2906 = _3071 * _2808;
    }
    else
    {
        _2900 = _2805;
        _2902 = _2806;
        _2904 = _2807;
        _2906 = _2808;
    }
    float _2918 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2919 = _2918 == 3.0;
    float _2920 = log2(_2906);
    float _2924 = exp2(_2920 * cbSceneParam._m0[78u].x);
    float _2925 = exp2(_2920 * cbSceneParam._m0[78u].y);
    float _2926 = exp2(_2920 * cbSceneParam._m0[78u].z);
    float _2927 = _2924 * (isnan(0.0) ? _2761 : (isnan(_2761) ? 0.0 : max(_2761, 0.0)));
    float _2928 = _2925 * (isnan(0.0) ? _2763 : (isnan(_2763) ? 0.0 : max(_2763, 0.0)));
    float _2929 = _2926 * (isnan(0.0) ? _2765 : (isnan(_2765) ? 0.0 : max(_2765, 0.0)));
    float _2938 = (_2918 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2938 * (_2919 ? _2927 : (_2927 + (cbSceneParam._m0[72u].w * _2900)));
    SV_Target.y = _2938 * (_2919 ? _2928 : (_2928 + (cbSceneParam._m0[72u].w * _2902)));
    SV_Target.z = _2938 * (_2919 ? _2929 : (_2929 + (cbSceneParam._m0[72u].w * _2904)));
    SV_Target.w = _2783;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2733) * _2778) * _2924) * _2938;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2738) * _2778) * _2925) * _2938;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2743) * _2778) * _2926) * _2938;
    SV_Target_1.w = _2783;
}


