#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[18];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_1;
layout(set = 0, binding = 1) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_7;
layout(set = 0, binding = 10) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_6;
layout(set = 0, binding = 12) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_0;
layout(set = 0, binding = 3) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_10;
layout(set = 0, binding = 4) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_11;
layout(set = 0, binding = 5) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_12;
layout(set = 0, binding = 6) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_2;
layout(set = 0, binding = 7) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_4;
layout(set = 0, binding = 9) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_5;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1370;
float _4086;
float _4087;
float _4088;
float _4089;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _219 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _220 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _221 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _227 = inversesqrt(dot(vec3(_219, _220, _221), vec3(_219, _220, _221)));
    float _234 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _235 = _234 * NORMAL.x;
    float _236 = _234 * NORMAL.y;
    float _237 = _234 * NORMAL.z;
    float _241 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _249;
    float _250;
    float _251;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _249 = (-0.0) - _235;
        _250 = (-0.0) - _236;
        _251 = (-0.0) - _237;
    }
    else
    {
        _249 = _235;
        _250 = _236;
        _251 = _237;
    }
    vec4 _264 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _269 = _264.z;
    float _270 = _264.w;
    float _276 = exp2(log2(_269 * 22.0) * 260.0);
    float _277 = isnan(0.0) ? _276 : (isnan(_276) ? 0.0 : max(_276, 0.0));
    float _278 = isnan(1.0) ? _277 : (isnan(_277) ? 1.0 : min(_277, 1.0));
    vec4 _292 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _303 = cbMtdParam._m0[10u].x * _292.x;
    float _304 = cbMtdParam._m0[10u].y * _292.y;
    float _305 = cbMtdParam._m0[10u].z * _292.z;
    vec4 _317 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _333 = exp2(log2(1.0 - _270) * 8.0);
    vec4 _345 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_10, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _361 = exp2(log2(_270) * 8.0);
    vec4 _374 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _399 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _421 = (((((_317.x * 4.55000019073486328125) * cbMtdParam._m0[9u].x) * _399.x) - _303) * _278) + _303;
    float _422 = (((((_317.y * 4.55000019073486328125) * cbMtdParam._m0[9u].y) * _399.y) - _304) * _278) + _304;
    float _423 = (((((_317.z * 4.55000019073486328125) * cbMtdParam._m0[9u].z) * _399.z) - _305) * _278) + _305;
    float _430 = (((cbMtdParam._m0[13u].x * _345.x) - _421) * _333) + _421;
    float _431 = (((cbMtdParam._m0[13u].y * _345.y) - _422) * _333) + _422;
    float _432 = (((cbMtdParam._m0[13u].z * _345.z) - _423) * _333) + _423;
    float _439 = (((cbMtdParam._m0[11u].x * _374.x) - _430) * _361) + _430;
    float _440 = (((cbMtdParam._m0[11u].y * _374.y) - _431) * _361) + _431;
    float _441 = (((cbMtdParam._m0[11u].z * _374.z) - _432) * _361) + _432;
    float _442 = _399.w * _317.w;
    float _473 = (((texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w)).x - cbMtdParam._m0[17u].x) + cbMtdParam._m0[16u].x) * _278) + cbMtdParam._m0[17u].x;
    float _476 = ((cbMtdParam._m0[15u].z - _473) * _333) + _473;
    float _479 = ((cbMtdParam._m0[16u].w - _476) * _361) + _476;
    vec4 _491 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w));
    float _493 = _491.x;
    float _494 = _491.y;
    float _500 = cbMtdParam._m0[14u].y + _491.z;
    vec4 _512 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w));
    vec4 _531 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    vec4 _549 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _560 = ((((_269 * 2.0) * (cbMtdParam._m0[14u].x + _512.z)) - _500) * _278) + _500;
    float _564 = (((_531.z - _560) + cbMtdParam._m0[15u].y) * _333) + _560;
    float _568 = (((_549.z - _564) + cbMtdParam._m0[14u].w) * _361) + _564;
    float _582 = abs((fract(cbMtdParam._m0[15u].x * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _4108 = isnan(0.0) ? _582 : (isnan(_582) ? 0.0 : max(_582, 0.0));
    float _583 = isnan(1.0) ? _4108 : (isnan(_4108) ? 1.0 : min(_4108, 1.0));
    float _588 = (_583 * _583) * (3.0 - (_583 * 2.0));
    vec4 _601 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _609 = (_264.x * 2.0) + (-1.0);
    float _610 = (_264.y * 2.0) + (-1.0);
    float _611 = dot(vec2(_609, _610), vec2(_609, _610));
    float _4119 = isnan(0.0) ? _611 : (isnan(_611) ? 0.0 : max(_611, 0.0));
    float _616 = sqrt(1.0 - (isnan(1.0) ? _4119 : (isnan(_4119) ? 1.0 : min(_4119, 1.0))));
    float _621 = ((_512.x - _493) * _278) + _493;
    float _622 = ((_512.y - _494) * _278) + _494;
    float _627 = ((_531.x - _621) * _333) + _621;
    float _628 = ((_531.y - _622) * _333) + _622;
    float _641 = (cbMtdParam._m0[14u].z * (((((_549.x - _627) * _361) + _627) * 2.0) + (-1.0))) + _609;
    float _642 = (cbMtdParam._m0[14u].z * (((((_549.y - _628) * _361) + _628) * 2.0) + (-1.0))) + _610;
    float _645 = fma(_616, _249, fma(_642, _241 * TANGENT.x, (_227 * _219) * _641));
    float _648 = fma(_616, _250, fma(_642, _241 * TANGENT.y, (_227 * _220) * _641));
    float _651 = fma(_616, _251, fma(_642, _241 * TANGENT.z, (_227 * _221) * _641));
    float _655 = inversesqrt(dot(vec3(_645, _648, _651), vec3(_645, _648, _651)));
    float _656 = _655 * _645;
    float _657 = _655 * _648;
    float _658 = _655 * _651;
    float _4130 = isnan(0.0) ? _442 : (isnan(_442) ? 0.0 : max(_442, 0.0));
    float _659 = isnan(1.0) ? _4130 : (isnan(_4130) ? 1.0 : min(_4130, 1.0));
    float _4141 = isnan(0.0) ? _568 : (isnan(_568) ? 0.0 : max(_568, 0.0));
    float _660 = isnan(1.0) ? _4141 : (isnan(_4141) ? 1.0 : min(_4141, 1.0));
    float _4152 = isnan(0.0) ? _439 : (isnan(_439) ? 0.0 : max(_439, 0.0));
    float _661 = isnan(1.0) ? _4152 : (isnan(_4152) ? 1.0 : min(_4152, 1.0));
    float _4163 = isnan(0.0) ? _440 : (isnan(_440) ? 0.0 : max(_440, 0.0));
    float _662 = isnan(1.0) ? _4163 : (isnan(_4163) ? 1.0 : min(_4163, 1.0));
    float _4174 = isnan(0.0) ? _441 : (isnan(_441) ? 0.0 : max(_441, 0.0));
    float _663 = isnan(1.0) ? _4174 : (isnan(_4174) ? 1.0 : min(_4174, 1.0));
    float _4185 = isnan(0.0) ? _479 : (isnan(_479) ? 0.0 : max(_479, 0.0));
    float _664 = isnan(1.0) ? _4185 : (isnan(_4185) ? 1.0 : min(_4185, 1.0));
    float _680 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _720 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _730 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _720);
    float _731 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _720);
    float _732 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _720);
    float _736 = inversesqrt(dot(vec3(_730, _731, _732), vec3(_730, _731, _732)));
    float _737 = _730 * _736;
    float _738 = _731 * _736;
    float _739 = _732 * _736;
    vec4 _744 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _746 = _744.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1049 = sqrt(((_730 * _730) + (_731 * _731)) + (_732 * _732));
        float _1055 = (cbMatDynParam._m0[5u].x * _1049) + cbMatDynParam._m0[5u].y;
        float _4196 = isnan(0.0) ? _1055 : (isnan(_1055) ? 0.0 : max(_1055, 0.0));
        float _1056 = isnan(1.0) ? _4196 : (isnan(_4196) ? 1.0 : min(_4196, 1.0));
        float _1060 = (cbMatDynParam._m0[5u].z * _1049) + cbMatDynParam._m0[5u].w;
        float _4207 = isnan(0.0) ? _1060 : (isnan(_1060) ? 0.0 : max(_1060, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4207 : (isnan(_4207) ? 1.0 : min(_4207, 1.0))) - _1056)) + _1056) < ((_746 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _757 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _758 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _760 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _762 = _760.w;
    float _780 = fma(_658, cbSceneParam._m0[5u].z, fma(_657, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _656));
    float _783 = fma(_658, cbSceneParam._m0[6u].z, fma(_657, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _656));
    float _786 = fma(_658, cbSceneParam._m0[7u].z, fma(_657, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _656));
    vec4 _788 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _790 = _788.x;
    float _802 = (((_788.y - _660) + (_788.w * _660)) * cbMtdParam._m0[3u].x) + _660;
    vec4 _803 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _819 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3(cbMtdParam._m0[3u].x * (_790 * _790)), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * _803.z;
    float _827 = (((cbMatDynParam._m0[15u].x - _664) * cbMatDynParam._m0[15u].w) * _819) + _664;
    float _835 = ((_819 * cbMatDynParam._m0[16u].z) * (cbMatDynParam._m0[16u].x - _802)) + _802;
    uint _859 = uint(roundEven(NORMAL.w)) * 13u;
    uint _860 = _859 + 9u;
    uint _861 = _860 + uint(cbMatDynParam._m0[0u].w);
    float _867 = (cbMtdParam._m0[0u].x * _661) * cbInstanceData._m0[_861].x;
    float _868 = (cbMtdParam._m0[0u].y * _662) * cbInstanceData._m0[_861].y;
    float _869 = (cbMtdParam._m0[0u].z * _663) * cbInstanceData._m0[_861].z;
    float _4218 = isnan(0.0) ? _867 : (isnan(_867) ? 0.0 : max(_867, 0.0));
    float _870 = isnan(1.0) ? _4218 : (isnan(_4218) ? 1.0 : min(_4218, 1.0));
    float _4229 = isnan(0.0) ? _868 : (isnan(_868) ? 0.0 : max(_868, 0.0));
    float _871 = isnan(1.0) ? _4229 : (isnan(_4229) ? 1.0 : min(_4229, 1.0));
    float _4240 = isnan(0.0) ? _869 : (isnan(_869) ? 0.0 : max(_869, 0.0));
    float _872 = isnan(1.0) ? _4240 : (isnan(_4240) ? 1.0 : min(_4240, 1.0));
    vec4 _873 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _878 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _889 = (((_878.x - _827) + (_878.w * _827)) * cbMtdParam._m0[3u].x) + _827;
    float _902 = (cbMtdParam._m0[3u].x * (((_870 * _762) - _870) + _873.x)) + _870;
    float _903 = (cbMtdParam._m0[3u].x * (((_871 * _762) - _871) + _873.y)) + _871;
    float _904 = (cbMtdParam._m0[3u].x * (((_872 * _762) - _872) + _873.z)) + _872;
    float _918 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3((_827 * (_661 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625, (_827 * (_662 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625, (_827 * (_663 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w)).z;
    float _922 = _918 * cbMatDynParam._m0[13u].w;
    float _932 = (_922 * (cbMatDynParam._m0[13u].x - _902)) + _902;
    float _933 = (_922 * (cbMatDynParam._m0[13u].y - _903)) + _903;
    float _934 = (_922 * (cbMatDynParam._m0[13u].z - _904)) + _904;
    float _942 = ((_918 * cbMatDynParam._m0[15u].w) * (cbMatDynParam._m0[15u].x - _889)) + _889;
    float _943 = 1.0 - _942;
    float _944 = _943 * _932;
    float _945 = _943 * _933;
    float _946 = _943 * _934;
    float _950 = (_932 + (-0.039999999105930328369140625)) * _942;
    float _951 = (_933 + (-0.039999999105930328369140625)) * _942;
    float _952 = (_934 + (-0.039999999105930328369140625)) * _942;
    float _953 = _950 + 0.039999999105930328369140625;
    float _954 = _951 + 0.039999999105930328369140625;
    float _955 = _952 + 0.039999999105930328369140625;
    vec4 _964 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _757, cbSceneParam._m0[86u].y * _758));
    float _967 = _964.x * TEXCOORD_4;
    float _968 = dot(vec3(_656, _657, _658), vec3(_737, _738, _739));
    float _971 = _968 * 2.0;
    float _975 = (_971 * _656) - _737;
    float _976 = (_971 * _657) - _738;
    float _977 = (_971 * _658) - _739;
    float _981 = abs(dot(vec3(_737, _738, _739), vec3(_656, _657, _658)));
    float _4251 = isnan(0.0) ? _981 : (isnan(_981) ? 0.0 : max(_981, 0.0));
    float _983 = sqrt(_835);
    float _995 = exp2((_983 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4251 : (isnan(_4251) ? 1.0 : min(_4251, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_983 * 3.0));
    float _1001 = (1.0 - _995) * ((_983 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1002 = _995 * _983;
    float _1030 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1034 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1038 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1369;
    float _1371;
    float _1372;
    float _1373;
    float _1374;
    float _1375;
    float _1376;
    float _1377;
    float _1378;
    float _1379;
    float _1380;
    float _1381;
    float _1382;
    float _1383;
    float _1384;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1094 = fma(_1038, cbModelParam._m0[26u].z, fma(_1034, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1030));
        float _1098 = fma(_1038, cbModelParam._m0[27u].z, fma(_1034, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1030));
        float _1102 = fma(_1038, cbModelParam._m0[28u].z, fma(_1034, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1030));
        float _1127 = _1030 + _656;
        float _1128 = _1034 + _657;
        float _1129 = _1038 + _658;
        float _1139 = fma(_1129, cbModelParam._m0[26u].z, fma(_1128, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1127)) - _1094;
        float _1140 = fma(_1129, cbModelParam._m0[27u].z, fma(_1128, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1127)) - _1098;
        float _1141 = fma(_1129, cbModelParam._m0[28u].z, fma(_1128, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1127)) - _1102;
        float _1145 = inversesqrt(dot(vec3(_1139, _1140, _1141), vec3(_1139, _1140, _1141)));
        float _1158 = ((_1145 * _1139) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1094 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1159 = ((_1145 * _1140) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1098 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1160 = ((_1145 * _1141) / cbModelParam._m0[34u].z) + ((((((_1102 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1163 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1158, _1159, _1160), 0.0);
        vec4 _1170 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1158, _1159, _1160), 0.0);
        vec4 _1177 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1158, _1159, _1160), 0.0);
        vec4 _1184 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1158, _1159, _1160), 0.0);
        float _1197 = exp2((_1163.w + (-0.5)) * 20.0) * 2.0;
        float _1198 = _1197 * (_1163.x + (-0.5));
        float _1199 = _1197 * (_1163.y + (-0.5));
        float _1200 = _1197 * (_1163.z + (-0.5));
        float _1207 = exp2((_1170.w + (-0.5)) * 20.0) * 2.0;
        float _1208 = _1207 * (_1170.x + (-0.5));
        float _1209 = _1207 * (_1170.y + (-0.5));
        float _1210 = _1207 * (_1170.z + (-0.5));
        float _1217 = exp2((_1177.w + (-0.5)) * 20.0) * 2.0;
        float _1218 = _1217 * (_1177.x + (-0.5));
        float _1219 = _1217 * (_1177.y + (-0.5));
        float _1220 = _1217 * (_1177.z + (-0.5));
        float _1227 = exp2((_1184.w + (-0.5)) * 20.0) * 2.0;
        float _1228 = _1227 * (_1184.x + (-0.5));
        float _1229 = _1227 * (_1184.y + (-0.5));
        float _1230 = _1227 * (_1184.z + (-0.5));
        float _1231 = isnan(0.0) ? _1228 : (isnan(_1228) ? 0.0 : max(_1228, 0.0));
        float _1232 = isnan(0.0) ? _1229 : (isnan(_1229) ? 0.0 : max(_1229, 0.0));
        float _1233 = isnan(0.0) ? _1230 : (isnan(_1230) ? 0.0 : max(_1230, 0.0));
        float _1234 = _1198 * 0.5;
        float _1235 = _1208 * 0.5;
        float _1236 = _1218 * 0.5;
        float _1237 = dot(vec3(_1234, _1235, _1236), vec3(_1234, _1235, _1236));
        float _1242 = (_1237 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1237);
        float _1251 = (dot(vec3(_656, _657, _658), vec3(_1242 * _1234, _1242 * _1235, _1242 * _1236)) + 1.0) * 0.5;
        float _4277 = isnan(0.0) ? _1251 : (isnan(_1251) ? 0.0 : max(_1251, 0.0));
        float _1261 = sqrt(((_1235 * _1235) + (_1234 * _1234)) + (_1236 * _1236)) / (_1231 + 9.9999997473787516355514526367188e-06);
        float _4288 = isnan(0.0) ? _1261 : (isnan(_1261) ? 0.0 : max(_1261, 0.0));
        float _1262 = isnan(1.0) ? _4288 : (isnan(_4288) ? 1.0 : min(_4288, 1.0));
        float _1263 = _1262 * 2.0;
        float _1267 = (1.0 - _1262) / (_1262 + 1.0);
        float _4299 = isnan(0.0) ? _1267 : (isnan(_1267) ? 0.0 : max(_1267, 0.0));
        float _1268 = isnan(1.0) ? _4299 : (isnan(_4299) ? 1.0 : min(_4299, 1.0));
        float _1277 = ((((1.0 - _1268) * (_1263 + 2.0)) * exp2(log2(isnan(1.0) ? _4277 : (isnan(_4277) ? 1.0 : min(_4277, 1.0))) * (_1263 + 1.0))) + _1268) * _1231;
        float _1278 = _1199 * 0.5;
        float _1279 = _1209 * 0.5;
        float _1280 = _1219 * 0.5;
        float _1281 = dot(vec3(_1278, _1279, _1280), vec3(_1278, _1279, _1280));
        float _1286 = (_1281 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1281);
        float _1294 = (dot(vec3(_656, _657, _658), vec3(_1286 * _1278, _1286 * _1279, _1286 * _1280)) + 1.0) * 0.5;
        float _4310 = isnan(0.0) ? _1294 : (isnan(_1294) ? 0.0 : max(_1294, 0.0));
        float _1303 = sqrt(((_1279 * _1279) + (_1278 * _1278)) + (_1280 * _1280)) / (_1232 + 9.9999997473787516355514526367188e-06);
        float _4321 = isnan(0.0) ? _1303 : (isnan(_1303) ? 0.0 : max(_1303, 0.0));
        float _1304 = isnan(1.0) ? _4321 : (isnan(_4321) ? 1.0 : min(_4321, 1.0));
        float _1305 = _1304 * 2.0;
        float _1309 = (1.0 - _1304) / (_1304 + 1.0);
        float _4332 = isnan(0.0) ? _1309 : (isnan(_1309) ? 0.0 : max(_1309, 0.0));
        float _1310 = isnan(1.0) ? _4332 : (isnan(_4332) ? 1.0 : min(_4332, 1.0));
        float _1319 = ((((1.0 - _1310) * (_1305 + 2.0)) * exp2(log2(isnan(1.0) ? _4310 : (isnan(_4310) ? 1.0 : min(_4310, 1.0))) * (_1305 + 1.0))) + _1310) * _1232;
        float _1320 = _1200 * 0.5;
        float _1321 = _1210 * 0.5;
        float _1322 = _1220 * 0.5;
        float _1323 = dot(vec3(_1320, _1321, _1322), vec3(_1320, _1321, _1322));
        float _1328 = (_1323 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1323);
        float _1336 = (dot(vec3(_656, _657, _658), vec3(_1328 * _1320, _1328 * _1321, _1328 * _1322)) + 1.0) * 0.5;
        float _4343 = isnan(0.0) ? _1336 : (isnan(_1336) ? 0.0 : max(_1336, 0.0));
        float _1345 = sqrt(((_1321 * _1321) + (_1320 * _1320)) + (_1322 * _1322)) / (_1233 + 9.9999997473787516355514526367188e-06);
        float _4354 = isnan(0.0) ? _1345 : (isnan(_1345) ? 0.0 : max(_1345, 0.0));
        float _1346 = isnan(1.0) ? _4354 : (isnan(_4354) ? 1.0 : min(_4354, 1.0));
        float _1347 = _1346 * 2.0;
        float _1351 = (1.0 - _1346) / (_1346 + 1.0);
        float _4365 = isnan(0.0) ? _1351 : (isnan(_1351) ? 0.0 : max(_1351, 0.0));
        float _1352 = isnan(1.0) ? _4365 : (isnan(_4365) ? 1.0 : min(_4365, 1.0));
        float _1361 = ((((1.0 - _1352) * (_1347 + 2.0)) * exp2(log2(isnan(1.0) ? _4343 : (isnan(_4343) ? 1.0 : min(_4343, 1.0))) * (_1347 + 1.0))) + _1352) * _1233;
        _1369 = _1200;
        _1371 = _1199;
        _1372 = _1198;
        _1373 = _1210;
        _1374 = _1209;
        _1375 = _1208;
        _1376 = _1220;
        _1377 = _1219;
        _1378 = _1218;
        _1379 = _1233;
        _1380 = _1232;
        _1381 = _1231;
        _1382 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1277 : (isnan(_1277) ? 0.0 : max(_1277, 0.0)));
        _1383 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1319 : (isnan(_1319) ? 0.0 : max(_1319, 0.0)));
        _1384 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1361 : (isnan(_1361) ? 0.0 : max(_1361, 0.0)));
    }
    else
    {
        _1369 = _1370;
        _1371 = _1370;
        _1372 = _1370;
        _1373 = _1370;
        _1374 = _1370;
        _1375 = _1370;
        _1376 = _1370;
        _1377 = _1370;
        _1378 = _1370;
        _1379 = _1370;
        _1380 = _1370;
        _1381 = _1370;
        _1382 = 0.0;
        _1383 = 0.0;
        _1384 = 0.0;
    }
    float _1682;
    float _1683;
    float _1684;
    float _1685;
    float _1686;
    float _1687;
    float _1688;
    float _1689;
    float _1690;
    float _1691;
    float _1692;
    float _1693;
    float _1694;
    float _1695;
    float _1696;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1413 = fma(_1038, cbModelParam._m0[30u].z, fma(_1034, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1030));
        float _1417 = fma(_1038, cbModelParam._m0[31u].z, fma(_1034, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1030));
        float _1421 = fma(_1038, cbModelParam._m0[32u].z, fma(_1034, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1030));
        float _1444 = _1030 + _656;
        float _1445 = _1034 + _657;
        float _1446 = _1038 + _658;
        float _1456 = fma(_1446, cbModelParam._m0[30u].z, fma(_1445, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1444)) - _1413;
        float _1457 = fma(_1446, cbModelParam._m0[31u].z, fma(_1445, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1444)) - _1417;
        float _1458 = fma(_1446, cbModelParam._m0[32u].z, fma(_1445, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1444)) - _1421;
        float _1462 = inversesqrt(dot(vec3(_1456, _1457, _1458), vec3(_1456, _1457, _1458)));
        float _1475 = ((_1462 * _1456) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1413 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1476 = ((_1462 * _1457) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1417 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1477 = ((_1462 * _1458) / cbModelParam._m0[35u].z) + ((((((_1421 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1479 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1475, _1476, _1477), 0.0);
        vec4 _1486 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1475, _1476, _1477), 0.0);
        vec4 _1493 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1475, _1476, _1477), 0.0);
        vec4 _1500 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1475, _1476, _1477), 0.0);
        float _1512 = exp2((_1479.w + (-0.5)) * 20.0) * 2.0;
        float _1513 = _1512 * (_1479.x + (-0.5));
        float _1514 = _1512 * (_1479.y + (-0.5));
        float _1515 = _1512 * (_1479.z + (-0.5));
        float _1522 = exp2((_1486.w + (-0.5)) * 20.0) * 2.0;
        float _1523 = _1522 * (_1486.x + (-0.5));
        float _1524 = _1522 * (_1486.y + (-0.5));
        float _1525 = _1522 * (_1486.z + (-0.5));
        float _1532 = exp2((_1493.w + (-0.5)) * 20.0) * 2.0;
        float _1533 = _1532 * (_1493.x + (-0.5));
        float _1534 = _1532 * (_1493.y + (-0.5));
        float _1535 = _1532 * (_1493.z + (-0.5));
        float _1542 = exp2((_1500.w + (-0.5)) * 20.0) * 2.0;
        float _1543 = _1542 * (_1500.x + (-0.5));
        float _1544 = _1542 * (_1500.y + (-0.5));
        float _1545 = _1542 * (_1500.z + (-0.5));
        float _1546 = isnan(0.0) ? _1543 : (isnan(_1543) ? 0.0 : max(_1543, 0.0));
        float _1547 = isnan(0.0) ? _1544 : (isnan(_1544) ? 0.0 : max(_1544, 0.0));
        float _1548 = isnan(0.0) ? _1545 : (isnan(_1545) ? 0.0 : max(_1545, 0.0));
        float _1549 = _1513 * 0.5;
        float _1550 = _1523 * 0.5;
        float _1551 = _1533 * 0.5;
        float _1552 = dot(vec3(_1549, _1550, _1551), vec3(_1549, _1550, _1551));
        float _1557 = (_1552 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1552);
        float _1565 = (dot(vec3(_656, _657, _658), vec3(_1557 * _1549, _1557 * _1550, _1557 * _1551)) + 1.0) * 0.5;
        float _4406 = isnan(0.0) ? _1565 : (isnan(_1565) ? 0.0 : max(_1565, 0.0));
        float _1574 = sqrt(((_1550 * _1550) + (_1549 * _1549)) + (_1551 * _1551)) / (_1546 + 9.9999997473787516355514526367188e-06);
        float _4417 = isnan(0.0) ? _1574 : (isnan(_1574) ? 0.0 : max(_1574, 0.0));
        float _1575 = isnan(1.0) ? _4417 : (isnan(_4417) ? 1.0 : min(_4417, 1.0));
        float _1576 = _1575 * 2.0;
        float _1580 = (1.0 - _1575) / (_1575 + 1.0);
        float _4428 = isnan(0.0) ? _1580 : (isnan(_1580) ? 0.0 : max(_1580, 0.0));
        float _1581 = isnan(1.0) ? _4428 : (isnan(_4428) ? 1.0 : min(_4428, 1.0));
        float _1590 = ((((1.0 - _1581) * (_1576 + 2.0)) * exp2(log2(isnan(1.0) ? _4406 : (isnan(_4406) ? 1.0 : min(_4406, 1.0))) * (_1576 + 1.0))) + _1581) * _1546;
        float _1591 = _1514 * 0.5;
        float _1592 = _1524 * 0.5;
        float _1593 = _1534 * 0.5;
        float _1594 = dot(vec3(_1591, _1592, _1593), vec3(_1591, _1592, _1593));
        float _1599 = (_1594 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1594);
        float _1607 = (dot(vec3(_656, _657, _658), vec3(_1599 * _1591, _1599 * _1592, _1599 * _1593)) + 1.0) * 0.5;
        float _4439 = isnan(0.0) ? _1607 : (isnan(_1607) ? 0.0 : max(_1607, 0.0));
        float _1616 = sqrt(((_1592 * _1592) + (_1591 * _1591)) + (_1593 * _1593)) / (_1547 + 9.9999997473787516355514526367188e-06);
        float _4450 = isnan(0.0) ? _1616 : (isnan(_1616) ? 0.0 : max(_1616, 0.0));
        float _1617 = isnan(1.0) ? _4450 : (isnan(_4450) ? 1.0 : min(_4450, 1.0));
        float _1618 = _1617 * 2.0;
        float _1622 = (1.0 - _1617) / (_1617 + 1.0);
        float _4461 = isnan(0.0) ? _1622 : (isnan(_1622) ? 0.0 : max(_1622, 0.0));
        float _1623 = isnan(1.0) ? _4461 : (isnan(_4461) ? 1.0 : min(_4461, 1.0));
        float _1632 = ((((1.0 - _1623) * (_1618 + 2.0)) * exp2(log2(isnan(1.0) ? _4439 : (isnan(_4439) ? 1.0 : min(_4439, 1.0))) * (_1618 + 1.0))) + _1623) * _1547;
        float _1633 = _1515 * 0.5;
        float _1634 = _1525 * 0.5;
        float _1635 = _1535 * 0.5;
        float _1636 = dot(vec3(_1633, _1634, _1635), vec3(_1633, _1634, _1635));
        float _1641 = (_1636 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1636);
        float _1649 = (dot(vec3(_656, _657, _658), vec3(_1641 * _1633, _1641 * _1634, _1641 * _1635)) + 1.0) * 0.5;
        float _4472 = isnan(0.0) ? _1649 : (isnan(_1649) ? 0.0 : max(_1649, 0.0));
        float _1658 = sqrt(((_1634 * _1634) + (_1633 * _1633)) + (_1635 * _1635)) / (_1548 + 9.9999997473787516355514526367188e-06);
        float _4483 = isnan(0.0) ? _1658 : (isnan(_1658) ? 0.0 : max(_1658, 0.0));
        float _1659 = isnan(1.0) ? _4483 : (isnan(_4483) ? 1.0 : min(_4483, 1.0));
        float _1660 = _1659 * 2.0;
        float _1664 = (1.0 - _1659) / (_1659 + 1.0);
        float _4494 = isnan(0.0) ? _1664 : (isnan(_1664) ? 0.0 : max(_1664, 0.0));
        float _1665 = isnan(1.0) ? _4494 : (isnan(_4494) ? 1.0 : min(_4494, 1.0));
        float _1674 = ((((1.0 - _1665) * (_1660 + 2.0)) * exp2(log2(isnan(1.0) ? _4472 : (isnan(_4472) ? 1.0 : min(_4472, 1.0))) * (_1660 + 1.0))) + _1665) * _1548;
        _1682 = _1515;
        _1683 = _1514;
        _1684 = _1513;
        _1685 = _1525;
        _1686 = _1524;
        _1687 = _1523;
        _1688 = _1535;
        _1689 = _1534;
        _1690 = _1533;
        _1691 = _1548;
        _1692 = _1547;
        _1693 = _1546;
        _1694 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1590 : (isnan(_1590) ? 0.0 : max(_1590, 0.0)));
        _1695 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1632 : (isnan(_1632) ? 0.0 : max(_1632, 0.0)));
        _1696 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1674 : (isnan(_1674) ? 0.0 : max(_1674, 0.0)));
    }
    else
    {
        _1682 = _1370;
        _1683 = _1370;
        _1684 = _1370;
        _1685 = _1370;
        _1686 = _1370;
        _1687 = _1370;
        _1688 = _1370;
        _1689 = _1370;
        _1690 = _1370;
        _1691 = _1370;
        _1692 = _1370;
        _1693 = _1370;
        _1694 = 0.0;
        _1695 = 0.0;
        _1696 = 0.0;
    }
    float _1706 = (cbModelParam._m0[1u].x * (_1694 - _1382)) + _1382;
    float _1707 = (cbModelParam._m0[1u].x * (_1695 - _1383)) + _1383;
    float _1708 = (cbModelParam._m0[1u].x * (_1696 - _1384)) + _1384;
    float _1729 = fma(_1708, cbSceneParam._m0[89u].z, fma(_1707, cbSceneParam._m0[89u].y, _1706 * cbSceneParam._m0[89u].x));
    float _1732 = fma(_1708, cbSceneParam._m0[90u].z, fma(_1707, cbSceneParam._m0[90u].y, _1706 * cbSceneParam._m0[90u].x));
    float _1735 = fma(_1708, cbSceneParam._m0[91u].z, fma(_1707, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1706));
    float _1750 = _975 * 0.5;
    float _1751 = _976 * 0.5;
    float _1752 = _977 * 0.5;
    float _1753 = dot(vec4(_1750, _1751, _1752, 1.0), vec4(_1684, _1687, _1690, _1693));
    float _1756 = dot(vec4(_1750, _1751, _1752, 1.0), vec4(_1683, _1686, _1689, _1692));
    float _1759 = dot(vec4(_1750, _1751, _1752, 1.0), vec4(_1682, _1685, _1688, _1691));
    float _1790;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1766 = dot(vec4(_1750, _1751, _1752, 1.0), vec4(_1369, _1373, _1376, _1379));
        float _1770 = dot(vec4(_1750, _1751, _1752, 1.0), vec4(_1371, _1374, _1377, _1380));
        float _1774 = dot(vec4(_1750, _1751, _1752, 1.0), vec4(_1372, _1375, _1378, _1381));
        float _1781 = dot(vec4(cbModelParam._m0[39u]), vec4(_1750, _1751, _1752, 1.0));
        _1790 = dot(vec3(isnan(0.0) ? _1774 : (isnan(_1774) ? 0.0 : max(_1774, 0.0)), isnan(0.0) ? _1770 : (isnan(_1770) ? 0.0 : max(_1770, 0.0)), isnan(0.0) ? _1766 : (isnan(_1766) ? 0.0 : max(_1766, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1781) ? 0.0 : (isnan(0.0) ? _1781 : max(0.0, _1781))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1790 = 1.0;
    }
    float _1801;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1792 = dot(vec4(cbModelParam._m0[40u]), vec4(_1750, _1751, _1752, 1.0));
        _1801 = dot(vec3(isnan(0.0) ? _1753 : (isnan(_1753) ? 0.0 : max(_1753, 0.0)), isnan(0.0) ? _1756 : (isnan(_1756) ? 0.0 : max(_1756, 0.0)), isnan(0.0) ? _1759 : (isnan(_1759) ? 0.0 : max(_1759, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1792) ? 0.0 : (isnan(0.0) ? _1792 : max(0.0, _1792))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1801 = 1.0;
    }
    float _1805 = (_1801 * cbModelParam._m0[1u].x) + (_1790 * (1.0 - cbModelParam._m0[1u].x));
    float _1815 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _835);
    float _1816 = isnan(_1815) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1815 : min(cbModelParam._m0[25u].z, _1815));
    float _1896;
    float _1898;
    float _1900;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1863 = fma(_1038, cbModelParam._m0[13u].z, fma(_1034, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1030)) + cbModelParam._m0[13u].w;
        float _1867 = fma(_1038, cbModelParam._m0[14u].z, fma(_1034, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1030)) + cbModelParam._m0[14u].w;
        float _1871 = fma(_1038, cbModelParam._m0[15u].z, fma(_1034, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1030)) + cbModelParam._m0[15u].w;
        float _1874 = fma(_977, cbModelParam._m0[13u].z, fma(_976, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _975));
        float _1877 = fma(_977, cbModelParam._m0[14u].z, fma(_976, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _975));
        float _1880 = fma(_977, cbModelParam._m0[15u].z, fma(_976, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _975));
        float _1908;
        if (_1874 > 0.0)
        {
            _1908 = abs((1.0 - _1863) / _1874);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1874 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1863 + 1.0) / _1874);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1908 = frontier_phi_19_17_ladder;
        }
        float _2081;
        if (_1877 > 0.0)
        {
            _2081 = abs((1.0 - _1867) / _1877);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1877 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1867 + 1.0) / _1877);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2081 = frontier_phi_28_24_ladder;
        }
        float _2376;
        if (_1880 > 0.0)
        {
            _2376 = abs((1.0 - _1871) / _1880);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1880 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1871 + 1.0) / _1880);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2376 = frontier_phi_40_35_ladder;
        }
        float _2378 = isnan(_2081) ? _1908 : (isnan(_1908) ? _2081 : min(_1908, _2081));
        float _2379 = isnan(_2376) ? _2378 : (isnan(_2378) ? _2376 : min(_2378, _2376));
        float _2383 = (_2379 * _1874) + _1863;
        float _2384 = (_2379 * _1877) + _1867;
        float _2385 = (_2379 * _1880) + _1871;
        float _2386 = _2379 * 9.9999997473787516355514526367188e-05;
        float _2388 = (-1.0) - _2386;
        float _2390 = _2386 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2385 > _2390) || ((_2385 < _2388) || ((_2384 > _2390) || ((_2384 < _2388) || ((_2383 < _2388) || (_2383 > _2390))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2530 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2385, cbModelParam._m0[9u].z, fma(_2384, cbModelParam._m0[9u].y, _2383 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2385, cbModelParam._m0[10u].z, fma(_2384, cbModelParam._m0[10u].y, _2383 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2385, cbModelParam._m0[11u].z, fma(_2384, cbModelParam._m0[11u].y, _2383 * cbModelParam._m0[11u].x))), _1816);
            frontier_phi_18_40_ladder = _2530.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2530.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2530.x * cbModelParam._m0[1u].y;
        }
        _1896 = frontier_phi_18_40_ladder_2;
        _1898 = frontier_phi_18_40_ladder_1;
        _1900 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1884 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_975, _976, _977), _1816);
        _1896 = _1884.x * cbModelParam._m0[1u].y;
        _1898 = _1884.y * cbModelParam._m0[1u].y;
        _1900 = _1884.z * cbModelParam._m0[1u].y;
    }
    float _1904 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _835);
    float _1905 = isnan(_1904) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1904 : min(cbModelParam._m0[25u].w, _1904));
    float _1996;
    float _1998;
    float _2000;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1960 = fma(_1038, cbModelParam._m0[21u].z, fma(_1034, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1030)) + cbModelParam._m0[21u].w;
        float _1964 = fma(_1038, cbModelParam._m0[22u].z, fma(_1034, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1030)) + cbModelParam._m0[22u].w;
        float _1968 = fma(_1038, cbModelParam._m0[23u].z, fma(_1034, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1030)) + cbModelParam._m0[23u].w;
        float _1971 = fma(_977, cbModelParam._m0[21u].z, fma(_976, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _975));
        float _1974 = fma(_977, cbModelParam._m0[22u].z, fma(_976, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _975));
        float _1977 = fma(_977, cbModelParam._m0[23u].z, fma(_976, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _975));
        float _2086;
        if (_1971 > 0.0)
        {
            _2086 = abs((1.0 - _1960) / _1971);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1971 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1960 + 1.0) / _1971);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _2086 = frontier_phi_30_26_ladder;
        }
        float _2403;
        if (_1974 > 0.0)
        {
            _2403 = abs((1.0 - _1964) / _1974);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1974 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1964 + 1.0) / _1974);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2403 = frontier_phi_42_37_ladder;
        }
        float _2741;
        if (_1977 > 0.0)
        {
            _2741 = abs((1.0 - _1968) / _1977);
        }
        else
        {
            float frontier_phi_52_49_ladder;
            if (_1977 < 0.0)
            {
                frontier_phi_52_49_ladder = abs((_1968 + 1.0) / _1977);
            }
            else
            {
                frontier_phi_52_49_ladder = 5000.0;
            }
            _2741 = frontier_phi_52_49_ladder;
        }
        float _2743 = isnan(_2403) ? _2086 : (isnan(_2086) ? _2403 : min(_2086, _2403));
        float _2744 = isnan(_2741) ? _2743 : (isnan(_2743) ? _2741 : min(_2743, _2741));
        float _2748 = (_2744 * _1971) + _1960;
        float _2749 = (_2744 * _1974) + _1964;
        float _2750 = (_2744 * _1977) + _1968;
        float _2751 = _2744 * 9.9999997473787516355514526367188e-05;
        float _2752 = (-1.0) - _2751;
        float _2754 = _2751 + 1.0;
        float frontier_phi_27_52_ladder;
        float frontier_phi_27_52_ladder_1;
        float frontier_phi_27_52_ladder_2;
        if ((_2750 > _2754) || ((_2750 < _2752) || ((_2749 > _2754) || ((_2749 < _2752) || ((_2748 < _2752) || (_2748 > _2754))))))
        {
            frontier_phi_27_52_ladder = 0.0;
            frontier_phi_27_52_ladder_1 = 0.0;
            frontier_phi_27_52_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2872 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2750, cbModelParam._m0[17u].z, fma(_2749, cbModelParam._m0[17u].y, _2748 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2750, cbModelParam._m0[18u].z, fma(_2749, cbModelParam._m0[18u].y, _2748 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2750, cbModelParam._m0[19u].z, fma(_2749, cbModelParam._m0[19u].y, _2748 * cbModelParam._m0[19u].x))), _1905);
            frontier_phi_27_52_ladder = _2872.z * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_1 = _2872.y * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_2 = _2872.x * cbModelParam._m0[1u].z;
        }
        _1996 = frontier_phi_27_52_ladder_2;
        _1998 = frontier_phi_27_52_ladder_1;
        _2000 = frontier_phi_27_52_ladder;
    }
    else
    {
        vec4 _1980 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_975, _976, _977), _1905);
        _1996 = _1980.x * cbModelParam._m0[1u].z;
        _1998 = _1980.y * cbModelParam._m0[1u].z;
        _2000 = _1980.z * cbModelParam._m0[1u].z;
    }
    float _2013 = (((_1001 * _953) + _1002) * _967) * ((cbModelParam._m0[1u].w * (_1996 - _1896)) + _1896);
    float _2015 = (((_1001 * _954) + _1002) * _967) * ((cbModelParam._m0[1u].w * (_1998 - _1898)) + _1898);
    float _2017 = (((_1001 * _955) + _1002) * _967) * ((cbModelParam._m0[1u].w * (_2000 - _1900)) + _1900);
    float _2020 = fma(_2017, cbSceneParam._m0[89u].z, fma(_2015, cbSceneParam._m0[89u].y, _2013 * cbSceneParam._m0[89u].x));
    float _2023 = fma(_2017, cbSceneParam._m0[90u].z, fma(_2015, cbSceneParam._m0[90u].y, _2013 * cbSceneParam._m0[90u].x));
    float _2026 = fma(_2017, cbSceneParam._m0[91u].z, fma(_2015, cbSceneParam._m0[91u].y, _2013 * cbSceneParam._m0[91u].x));
    float _2060 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2064 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2068 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2072 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2073 = _2060 / _2072;
    float _2074 = _2064 / _2072;
    float _2075 = _2068 / _2072;
    float _2222;
    float _2223;
    float _2224;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2102 = ((uint(_2075 > cbSceneParam._m0[59u].y) + uint(_2075 > cbSceneParam._m0[59u].x)) + uint(_2075 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2103 = _2102 + 43u;
        uint _2111 = _2102 + 44u;
        uint _2119 = _2102 + 45u;
        uint _2127 = _2102 + 46u;
        float _2138 = fma(_2072, cbSceneParam._m0[_2103].w, fma(_2068, cbSceneParam._m0[_2103].z, fma(_2064, cbSceneParam._m0[_2103].y, _2060 * cbSceneParam._m0[_2103].x)));
        float _2142 = fma(_2072, cbSceneParam._m0[_2111].w, fma(_2068, cbSceneParam._m0[_2111].z, fma(_2064, cbSceneParam._m0[_2111].y, _2060 * cbSceneParam._m0[_2111].x)));
        float _2150 = fma(_2072, cbSceneParam._m0[_2127].w, fma(_2068, cbSceneParam._m0[_2127].z, fma(_2064, cbSceneParam._m0[_2127].y, _2060 * cbSceneParam._m0[_2127].x)));
        float _2155 = cbSceneParam._m0[33u].z * _2150;
        float _2157 = cbSceneParam._m0[33u].w * _2150;
        float _2160 = fma(_2072, cbSceneParam._m0[_2119].w, fma(_2068, cbSceneParam._m0[_2119].z, fma(_2064, cbSceneParam._m0[_2119].y, _2060 * cbSceneParam._m0[_2119].x))) / _2150;
        float _2208 = (cbSceneParam._m0[33u].x - sqrt(((_2074 * _2074) + (_2073 * _2073)) + (_2075 * _2075))) * cbSceneParam._m0[33u].y;
        float _4620 = isnan(0.0) ? _2208 : (isnan(_2208) ? 0.0 : max(_2208, 0.0));
        float _2215 = (isnan(1.0) ? _4620 : (isnan(_4620) ? 1.0 : min(_4620, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2155 + _2138) / _2150, (_2157 + _2142) / _2150), _2160), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2157 + _2138) / _2150, (_2142 - _2155) / _2150), _2160), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2138 - _2155) / _2150, (_2142 - _2157) / _2150), _2160), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2138 - _2157) / _2150, (_2155 + _2142) / _2150), _2160), 0.0)).x), vec4(0.25)));
        _2222 = 1.0 - (_2215 * cbSceneParam._m0[34u].x);
        _2223 = 1.0 - (_2215 * cbSceneParam._m0[34u].y);
        _2224 = 1.0 - (_2215 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2222 = 1.0;
        _2223 = 1.0;
        _2224 = 1.0;
    }
    float _2288;
    float _2290;
    float _2292;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2276 = fma(_2072, cbSceneParam._m0[63u].w, fma(_2068, cbSceneParam._m0[63u].z, fma(_2064, cbSceneParam._m0[63u].y, _2060 * cbSceneParam._m0[63u].x)));
        float _2277 = fma(_2072, cbSceneParam._m0[60u].w, fma(_2068, cbSceneParam._m0[60u].z, fma(_2064, cbSceneParam._m0[60u].y, _2060 * cbSceneParam._m0[60u].x))) / _2276;
        float _2278 = fma(_2072, cbSceneParam._m0[61u].w, fma(_2068, cbSceneParam._m0[61u].z, fma(_2064, cbSceneParam._m0[61u].y, _2060 * cbSceneParam._m0[61u].x))) / _2276;
        float frontier_phi_39_38_ladder;
        float frontier_phi_39_38_ladder_1;
        float frontier_phi_39_38_ladder_2;
        if ((((_2277 >= cbSceneParam._m0[64u].x) && (_2278 >= cbSceneParam._m0[64u].y)) && (_2277 <= cbSceneParam._m0[64u].z)) && (_2278 <= cbSceneParam._m0[64u].w))
        {
            float _2416 = fma(_2072, cbSceneParam._m0[62u].w, fma(_2068, cbSceneParam._m0[62u].z, fma(_2064, cbSceneParam._m0[62u].y, _2060 * cbSceneParam._m0[62u].x))) / _2276;
            float _2420 = isnan(cbSceneParam._m0[41u].w) ? _2416 : (isnan(_2416) ? cbSceneParam._m0[41u].w : max(_2416, cbSceneParam._m0[41u].w));
            float _2463 = (cbSceneParam._m0[33u].x - sqrt(((_2074 * _2074) + (_2073 * _2073)) + (_2075 * _2075))) * cbSceneParam._m0[33u].y;
            float _4636 = isnan(0.0) ? _2463 : (isnan(_2463) ? 0.0 : max(_2463, 0.0));
            float _2470 = (isnan(1.0) ? _4636 : (isnan(_4636) ? 1.0 : min(_4636, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2277, cbSceneParam._m0[33u].w + _2278), _2420), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2277, _2278 - cbSceneParam._m0[33u].z), _2420), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2277 - cbSceneParam._m0[33u].z, _2278 - cbSceneParam._m0[33u].w), _2420), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2277 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2278), _2420), 0.0)).x), vec4(0.25)));
            float _2474 = 1.0 - (_2470 * cbSceneParam._m0[34u].x);
            float _2475 = 1.0 - (_2470 * cbSceneParam._m0[34u].y);
            float _2476 = 1.0 - (_2470 * cbSceneParam._m0[34u].z);
            frontier_phi_39_38_ladder = isnan(_2475) ? _2223 : (isnan(_2223) ? _2475 : min(_2223, _2475));
            frontier_phi_39_38_ladder_1 = isnan(_2474) ? _2222 : (isnan(_2222) ? _2474 : min(_2222, _2474));
            frontier_phi_39_38_ladder_2 = isnan(_2476) ? _2224 : (isnan(_2224) ? _2476 : min(_2224, _2476));
        }
        else
        {
            frontier_phi_39_38_ladder = _2223;
            frontier_phi_39_38_ladder_1 = _2222;
            frontier_phi_39_38_ladder_2 = _2224;
        }
        _2288 = frontier_phi_39_38_ladder_1;
        _2290 = frontier_phi_39_38_ladder;
        _2292 = frontier_phi_39_38_ladder_2;
    }
    else
    {
        _2288 = _2222;
        _2290 = _2223;
        _2292 = _2224;
    }
    uvec4 _2297 = floatBitsToUint(cbInstanceData._m0[_859 + 5u]);
    uint _2299 = _2297.x * 14u;
    uint _2300 = _2299 + 13u;
    float _2307 = _967 + (-1.0);
    float _2312 = (cbLight._m0[_2300].x * _2307) + 1.0;
    float _2313 = (cbLight._m0[_2300].y * _2307) + 1.0;
    float _2314 = (cbLight._m0[_2300].z * _2307) + 1.0;
    float _2315 = (cbLight._m0[_2300].w * _2307) + 1.0;
    uint _2316 = _2299 + 5u;
    float _2322 = isnan(1.0) ? _2313 : (isnan(_2313) ? 1.0 : min(_2313, 1.0));
    uint _2326 = _2299 + 4u;
    float _2335 = isnan(1.0) ? _2312 : (isnan(_2312) ? 1.0 : min(_2312, 1.0));
    uint _2339 = _2299 | 1u;
    float _2350 = dot(vec3(cbLight._m0[_2299].xyz), vec3(_656, _657, _658));
    float _2353 = dot(vec3(cbLight._m0[_2339].xyz), vec3(_656, _657, _658));
    float _4672 = isnan(0.0) ? _2350 : (isnan(_2350) ? 0.0 : max(_2350, 0.0));
    float _4683 = isnan(0.0) ? _2353 : (isnan(_2353) ? 0.0 : max(_2353, 0.0));
    float _2358 = (isnan(1.0) ? _4672 : (isnan(_4672) ? 1.0 : min(_4672, 1.0))) * 0.3183098733425140380859375;
    float _2360 = (isnan(1.0) ? _4683 : (isnan(_4683) ? 1.0 : min(_4683, 1.0))) * 0.3183098733425140380859375;
    float _2367 = ((cbLight._m0[_2316].x * _2322) * _2360) + (((cbLight._m0[_2326].x * _2288) * _2335) * _2358);
    float _2368 = ((_2322 * cbLight._m0[_2316].y) * _2360) + (((cbLight._m0[_2326].y * _2290) * _2335) * _2358);
    float _2369 = ((_2322 * cbLight._m0[_2316].z) * _2360) + (((cbLight._m0[_2326].z * _2292) * _2335) * _2358);
    uvec4 _2373 = floatBitsToUint(cbLight._m0[_2299 + 12u]);
    bool _2375 = _2373.x == 0u;
    float _2477;
    float _2479;
    float _2481;
    if (_2375)
    {
        _2477 = _2367;
        _2479 = _2368;
        _2481 = _2369;
    }
    else
    {
        uint _2485 = _2299 + 6u;
        float _2501 = (dot(vec3(cbLight._m0[_2299 + 2u].xyz), vec3(_656, _657, _658)) * 0.5) + 0.5;
        float _2502 = _2501 * _2501;
        float _4694 = isnan(0.0) ? _2502 : (isnan(_2502) ? 0.0 : max(_2502, 0.0));
        float _2503 = isnan(1.0) ? _4694 : (isnan(_4694) ? 1.0 : min(_4694, 1.0));
        float _2504 = isnan(1.0) ? _2314 : (isnan(_2314) ? 1.0 : min(_2314, 1.0));
        _2477 = (((cbLight._m0[_2485].x * 0.3183098733425140380859375) * _2503) * _2504) + _2367;
        _2479 = (((cbLight._m0[_2485].y * 0.3183098733425140380859375) * _2503) * _2504) + _2368;
        _2481 = (((cbLight._m0[_2485].z * 0.3183098733425140380859375) * _2503) * _2504) + _2369;
    }
    bool _2484 = _2373.y == 0u;
    float _2539;
    float _2541;
    float _2543;
    if (_2484)
    {
        _2539 = _2477;
        _2541 = _2479;
        _2543 = _2481;
    }
    else
    {
        uint _2712 = _2299 + 7u;
        float _2728 = (dot(vec3(cbLight._m0[_2299 + 3u].xyz), vec3(_656, _657, _658)) * 0.5) + 0.5;
        float _2729 = _2728 * _2728;
        float _4710 = isnan(0.0) ? _2729 : (isnan(_2729) ? 0.0 : max(_2729, 0.0));
        float _2730 = isnan(1.0) ? _4710 : (isnan(_4710) ? 1.0 : min(_4710, 1.0));
        float _2731 = isnan(1.0) ? _2315 : (isnan(_2315) ? 1.0 : min(_2315, 1.0));
        _2539 = (((cbLight._m0[_2712].x * 0.3183098733425140380859375) * _2730) * _2731) + _2477;
        _2541 = (((cbLight._m0[_2712].y * 0.3183098733425140380859375) * _2730) * _2731) + _2479;
        _2543 = (((cbLight._m0[_2712].z * 0.3183098733425140380859375) * _2730) * _2731) + _2481;
    }
    uint _2546 = _2299 + 8u;
    float _2559 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2299].w)) * _835) * 0.949999988079071044921875);
    float _2560 = _2559 * _2559;
    float _2561 = cbLight._m0[_2299].x + _737;
    float _2562 = cbLight._m0[_2299].y + _738;
    float _2563 = cbLight._m0[_2299].z + _739;
    float _2567 = inversesqrt(dot(vec3(_2561, _2562, _2563), vec3(_2561, _2562, _2563)));
    float _2568 = _2567 * _2561;
    float _2569 = _2567 * _2562;
    float _2570 = _2567 * _2563;
    float _2571 = dot(vec3(_656, _657, _658), vec3(cbLight._m0[_2299].xyz));
    float _4726 = isnan(0.0) ? _2571 : (isnan(_2571) ? 0.0 : max(_2571, 0.0));
    float _2574 = isnan(1.0) ? _4726 : (isnan(_4726) ? 1.0 : min(_4726, 1.0));
    float _4737 = isnan(0.0) ? _968 : (isnan(_968) ? 0.0 : max(_968, 0.0));
    float _2575 = isnan(1.0) ? _4737 : (isnan(_4737) ? 1.0 : min(_4737, 1.0));
    float _2576 = dot(vec3(_656, _657, _658), vec3(_2568, _2569, _2570));
    float _4748 = isnan(0.0) ? _2576 : (isnan(_2576) ? 0.0 : max(_2576, 0.0));
    float _2579 = isnan(1.0) ? _4748 : (isnan(_4748) ? 1.0 : min(_4748, 1.0));
    float _2580 = dot(vec3(cbLight._m0[_2299].xyz), vec3(_2568, _2569, _2570));
    float _4759 = isnan(0.0) ? _2580 : (isnan(_2580) ? 0.0 : max(_2580, 0.0));
    float _2584 = _2560 * _2560;
    float _2588 = ((_2579 * _2579) * (_2584 + (-1.0))) + 1.0;
    float _2596 = exp2(log2(1.0 - (isnan(1.0) ? _4759 : (isnan(_4759) ? 1.0 : min(_4759, 1.0)))) * 5.0);
    float _2597 = 0.959999978542327880859375 - _950;
    float _2599 = 0.959999978542327880859375 - _951;
    float _2600 = 0.959999978542327880859375 - _952;
    float _2607 = 1.0 - _2560;
    float _2618 = (0.5 / (((_2575 * ((_2574 * _2607) + _2560)) + 9.9999999392252902907785028219223e-09) + (((_2575 * _2607) + _2560) * _2574))) * _2574;
    float _4770 = isnan(0.0) ? _2618 : (isnan(_2618) ? 0.0 : max(_2618, 0.0));
    float _2620 = (isnan(1.0) ? _4770 : (isnan(_4770) ? 1.0 : min(_4770, 1.0))) * (_2584 / ((_2588 * _2588) * 3.141590118408203125));
    uint _2634 = _2299 + 9u;
    float _2645 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2339].w)) * _835) * 0.949999988079071044921875);
    float _2646 = _2645 * _2645;
    float _2647 = cbLight._m0[_2339].x + _737;
    float _2648 = cbLight._m0[_2339].y + _738;
    float _2649 = cbLight._m0[_2339].z + _739;
    float _2653 = inversesqrt(dot(vec3(_2647, _2648, _2649), vec3(_2647, _2648, _2649)));
    float _2654 = _2653 * _2647;
    float _2655 = _2653 * _2648;
    float _2656 = _2653 * _2649;
    float _2657 = dot(vec3(_656, _657, _658), vec3(cbLight._m0[_2339].xyz));
    float _4781 = isnan(0.0) ? _2657 : (isnan(_2657) ? 0.0 : max(_2657, 0.0));
    float _2660 = isnan(1.0) ? _4781 : (isnan(_4781) ? 1.0 : min(_4781, 1.0));
    float _2661 = dot(vec3(_656, _657, _658), vec3(_2654, _2655, _2656));
    float _4792 = isnan(0.0) ? _2661 : (isnan(_2661) ? 0.0 : max(_2661, 0.0));
    float _2664 = isnan(1.0) ? _4792 : (isnan(_4792) ? 1.0 : min(_4792, 1.0));
    float _2665 = dot(vec3(cbLight._m0[_2339].xyz), vec3(_2654, _2655, _2656));
    float _4803 = isnan(0.0) ? _2665 : (isnan(_2665) ? 0.0 : max(_2665, 0.0));
    float _2669 = _2646 * _2646;
    float _2673 = ((_2664 * _2664) * (_2669 + (-1.0))) + 1.0;
    float _2680 = exp2(log2(1.0 - (isnan(1.0) ? _4803 : (isnan(_4803) ? 1.0 : min(_4803, 1.0)))) * 5.0);
    float _2687 = 1.0 - _2646;
    float _2697 = (0.5 / (((_2575 * ((_2660 * _2687) + _2646)) + 9.9999999392252902907785028219223e-09) + (((_2575 * _2687) + _2646) * _2660))) * _2660;
    float _4814 = isnan(0.0) ? _2697 : (isnan(_2697) ? 0.0 : max(_2697, 0.0));
    float _2699 = (isnan(1.0) ? _4814 : (isnan(_4814) ? 1.0 : min(_4814, 1.0))) * (_2669 / ((_2673 * _2673) * 3.141590118408203125));
    float _2709 = (((((_2680 * _2597) + _953) * cbLight._m0[_2634].x) * _2699) * _2322) + ((((cbLight._m0[_2546].x * _2288) * ((_2596 * _2597) + _953)) * _2620) * _2335);
    float _2710 = (((((_2680 * _2599) + _954) * cbLight._m0[_2634].y) * _2699) * _2322) + ((((cbLight._m0[_2546].y * _2290) * ((_2596 * _2599) + _954)) * _2620) * _2335);
    float _2711 = (((((_2680 * _2600) + _955) * cbLight._m0[_2634].z) * _2699) * _2322) + ((((cbLight._m0[_2546].z * _2292) * ((_2596 * _2600) + _955)) * _2620) * _2335);
    float _2767;
    float _2769;
    float _2771;
    if (_2375)
    {
        _2767 = _2709;
        _2769 = _2710;
        _2771 = _2711;
    }
    else
    {
        uint _2773 = _2299 + 2u;
        uint _2777 = _2299 + 10u;
        float _2791 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2773].w)) * _835) * 0.949999988079071044921875);
        float _2792 = _2791 * _2791;
        float _2793 = cbLight._m0[_2773].x + _737;
        float _2794 = cbLight._m0[_2773].y + _738;
        float _2795 = cbLight._m0[_2773].z + _739;
        float _2799 = inversesqrt(dot(vec3(_2793, _2794, _2795), vec3(_2793, _2794, _2795)));
        float _2800 = _2799 * _2793;
        float _2801 = _2799 * _2794;
        float _2802 = _2799 * _2795;
        float _2803 = dot(vec3(_656, _657, _658), vec3(cbLight._m0[_2773].xyz));
        float _4825 = isnan(0.0) ? _2803 : (isnan(_2803) ? 0.0 : max(_2803, 0.0));
        float _2806 = isnan(1.0) ? _4825 : (isnan(_4825) ? 1.0 : min(_4825, 1.0));
        float _2807 = dot(vec3(_656, _657, _658), vec3(_2800, _2801, _2802));
        float _4836 = isnan(0.0) ? _2807 : (isnan(_2807) ? 0.0 : max(_2807, 0.0));
        float _2810 = isnan(1.0) ? _4836 : (isnan(_4836) ? 1.0 : min(_4836, 1.0));
        float _2811 = dot(vec3(cbLight._m0[_2773].xyz), vec3(_2800, _2801, _2802));
        float _4847 = isnan(0.0) ? _2811 : (isnan(_2811) ? 0.0 : max(_2811, 0.0));
        float _2815 = _2792 * _2792;
        float _2819 = ((_2810 * _2810) * (_2815 + (-1.0))) + 1.0;
        float _2826 = exp2(log2(1.0 - (isnan(1.0) ? _4847 : (isnan(_4847) ? 1.0 : min(_4847, 1.0)))) * 5.0);
        float _2833 = 1.0 - _2792;
        float _2843 = (0.5 / (((_2575 * ((_2806 * _2833) + _2792)) + 9.9999999392252902907785028219223e-09) + (((_2575 * _2833) + _2792) * _2806))) * _2806;
        float _4858 = isnan(0.0) ? _2843 : (isnan(_2843) ? 0.0 : max(_2843, 0.0));
        float _2845 = (isnan(1.0) ? _4858 : (isnan(_4858) ? 1.0 : min(_4858, 1.0))) * (_2815 / ((_2819 * _2819) * 3.141590118408203125));
        float _2846 = isnan(1.0) ? _2314 : (isnan(_2314) ? 1.0 : min(_2314, 1.0));
        _2767 = (((((_2826 * _2597) + _953) * cbLight._m0[_2777].x) * _2845) * _2846) + _2709;
        _2769 = (((((_2826 * _2599) + _954) * cbLight._m0[_2777].y) * _2845) * _2846) + _2710;
        _2771 = (((((_2826 * _2600) + _955) * cbLight._m0[_2777].z) * _2845) * _2846) + _2711;
    }
    float _2877;
    float _2879;
    float _2881;
    if (_2484)
    {
        _2877 = _2767;
        _2879 = _2769;
        _2881 = _2771;
    }
    else
    {
        uint _2888 = _2299 + 3u;
        uint _2892 = _2299 + 11u;
        float _2906 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2888].w)) * _835) * 0.949999988079071044921875);
        float _2907 = _2906 * _2906;
        float _2908 = cbLight._m0[_2888].x + _737;
        float _2909 = cbLight._m0[_2888].y + _738;
        float _2910 = cbLight._m0[_2888].z + _739;
        float _2914 = inversesqrt(dot(vec3(_2908, _2909, _2910), vec3(_2908, _2909, _2910)));
        float _2915 = _2914 * _2908;
        float _2916 = _2914 * _2909;
        float _2917 = _2914 * _2910;
        float _2918 = dot(vec3(_656, _657, _658), vec3(cbLight._m0[_2888].xyz));
        float _4874 = isnan(0.0) ? _2918 : (isnan(_2918) ? 0.0 : max(_2918, 0.0));
        float _2921 = isnan(1.0) ? _4874 : (isnan(_4874) ? 1.0 : min(_4874, 1.0));
        float _2922 = dot(vec3(_656, _657, _658), vec3(_2915, _2916, _2917));
        float _4885 = isnan(0.0) ? _2922 : (isnan(_2922) ? 0.0 : max(_2922, 0.0));
        float _2925 = isnan(1.0) ? _4885 : (isnan(_4885) ? 1.0 : min(_4885, 1.0));
        float _2926 = dot(vec3(cbLight._m0[_2888].xyz), vec3(_2915, _2916, _2917));
        float _4896 = isnan(0.0) ? _2926 : (isnan(_2926) ? 0.0 : max(_2926, 0.0));
        float _2930 = _2907 * _2907;
        float _2934 = ((_2925 * _2925) * (_2930 + (-1.0))) + 1.0;
        float _2941 = exp2(log2(1.0 - (isnan(1.0) ? _4896 : (isnan(_4896) ? 1.0 : min(_4896, 1.0)))) * 5.0);
        float _2948 = 1.0 - _2907;
        float _2958 = (0.5 / (((_2575 * ((_2921 * _2948) + _2907)) + 9.9999999392252902907785028219223e-09) + (((_2575 * _2948) + _2907) * _2921))) * _2921;
        float _4907 = isnan(0.0) ? _2958 : (isnan(_2958) ? 0.0 : max(_2958, 0.0));
        float _2960 = (isnan(1.0) ? _4907 : (isnan(_4907) ? 1.0 : min(_4907, 1.0))) * (_2930 / ((_2934 * _2934) * 3.141590118408203125));
        float _2961 = isnan(1.0) ? _2315 : (isnan(_2315) ? 1.0 : min(_2315, 1.0));
        _2877 = (((((_2941 * _2597) + _953) * cbLight._m0[_2892].x) * _2960) * _2961) + _2767;
        _2879 = (((((_2941 * _2599) + _954) * cbLight._m0[_2892].y) * _2960) * _2961) + _2769;
        _2881 = (((((_2941 * _2600) + _955) * cbLight._m0[_2892].z) * _2960) * _2961) + _2771;
    }
    float _3026;
    float _3028;
    float _3030;
    float _3032;
    float _3034;
    float _3036;
    if (_2297.y == 0u)
    {
        uvec4 _2982 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2983 = _2982.x;
        uint _2994 = uint((float(_2982.y) * floor(float(uint(cbSceneParam._m0[85u].y * _758) / _2983))) + floor(float(uint(cbSceneParam._m0[85u].x * _757) / _2983)));
        float _3004 = (log2(_2075 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3005 = isnan(0.0) ? _3004 : (isnan(_3004) ? 0.0 : max(_3004, 0.0));
        uint _3008 = uint(isnan(14.0) ? _3005 : (isnan(_3005) ? 14.0 : min(_3005, 14.0)));
        uvec4 _3013 = texelFetch(g_lightClusterGridBuffer, int(((_3008 << 2u) + (_2994 << 6u)) >> 2u));
        uint _3014 = _3013.x;
        uint _3015 = _2982.z;
        float _3136;
        float _3138;
        float _3140;
        float _3142;
        float _3144;
        float _3146;
        if (((((1u << ((_3015 >> 4u) & 15u)) + 4294967295u) & _3014) == 0u) || ((_3015 & 240u) == 0u))
        {
            _3136 = 0.0;
            _3138 = 0.0;
            _3140 = 0.0;
            _3142 = 0.0;
            _3144 = 0.0;
            _3146 = 0.0;
        }
        else
        {
            float _3137;
            float _3139;
            float _3141;
            float _3143;
            float _3145;
            float _3147;
            float _3297 = 0.0;
            float _3298 = 0.0;
            float _3299 = 0.0;
            float _3300 = 0.0;
            float _3301 = 0.0;
            float _3302 = 0.0;
            uint _3303 = 0u;
            uint _3312;
            bool _3313;
            for (;;)
            {
                _3312 = texelFetch(g_lightClassification, int((((_3008 << 5u) + (_2994 << 9u)) + (_3303 << 2u)) >> 2u)).x;
                _3313 = _3312 == 0u;
                float frontier_phi_73_pred;
                float frontier_phi_73_pred_1;
                float frontier_phi_73_pred_2;
                float frontier_phi_73_pred_3;
                float frontier_phi_73_pred_4;
                float frontier_phi_73_pred_5;
                if (_3313)
                {
                    frontier_phi_73_pred = _3302;
                    frontier_phi_73_pred_1 = _3301;
                    frontier_phi_73_pred_2 = _3300;
                    frontier_phi_73_pred_3 = _3299;
                    frontier_phi_73_pred_4 = _3298;
                    frontier_phi_73_pred_5 = _3297;
                }
                else
                {
                    float _3442;
                    float _3443;
                    float _3444;
                    float _3445;
                    float _3446;
                    float _3447;
                    uint _3448;
                    _3442 = _3297;
                    _3443 = _3298;
                    _3444 = _3299;
                    _3445 = _3300;
                    _3446 = _3301;
                    _3447 = _3302;
                    _3448 = _3312;
                    float _3369;
                    float _3370;
                    float _3371;
                    float _3372;
                    float _3373;
                    float _3374;
                    for (;;)
                    {
                        uint _3452 = uint(findLSB(_3448)) + (_3303 << 5u);
                        uint _3449 = (_3448 + 4294967295u) & _3448;
                        uint _3454 = _3452 * 48u;
                        vec4 _3468 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3454)).x, texelFetch(g_PointLightRenderingBuffer, int(_3454 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3454 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3454 + 3u)).x));
                        uint _3474 = (_3452 * 48u) + 4u;
                        vec4 _3487 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3474)).x, texelFetch(g_PointLightRenderingBuffer, int(_3474 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3474 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3474 + 3u)).x));
                        uint _3493 = (_3452 * 48u) + 8u;
                        vec3 _3504 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3493)).x, texelFetch(g_PointLightRenderingBuffer, int(_3493 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3493 + 2u)).x));
                        float _3508 = _3468.x - _2073;
                        float _3509 = _3468.y - _2074;
                        float _3510 = _3468.z - _2075;
                        float _3511 = dot(vec3(_3508, _3509, _3510), vec3(_3508, _3509, _3510));
                        float _3514 = inversesqrt(_3511);
                        float _3515 = _3514 * _3508;
                        float _3516 = _3514 * _3509;
                        float _3517 = _3514 * _3510;
                        float _3518 = dot(vec3(_780, _783, _786), vec3(_3515, _3516, _3517));
                        float _3523 = 1.0 - (_3511 * _3468.w);
                        float _4933 = isnan(0.0) ? _3523 : (isnan(_3523) ? 0.0 : max(_3523, 0.0));
                        float _3524 = isnan(1.0) ? _4933 : (isnan(_4933) ? 1.0 : min(_4933, 1.0));
                        float _3525 = sqrt(_3511) * _3487.w;
                        float _3528 = 1.39999997615814208984375 / (_3525 + 1.39999997615814208984375);
                        float _3529 = _3528 * _3528;
                        float _3532 = ((1.0 - _3529) * _3518) + _3529;
                        float _3535 = _3525 * _3525;
                        float _3539 = ((isnan(0.0) ? _3532 : (isnan(_3532) ? 0.0 : max(_3532, 0.0))) * _3524) / ((_3535 * 0.699999988079071044921875) + 1.0);
                        float _3543 = (-0.0) - _2073;
                        float _3544 = (-0.0) - _2074;
                        float _3545 = (-0.0) - _2075;
                        float _3549 = inversesqrt(dot(vec3(_3543, _3544, _3545), vec3(_3543, _3544, _3545)));
                        float _3550 = _3549 * _3543;
                        float _3551 = _3549 * _3544;
                        float _3552 = _3549 * _3545;
                        float _3559 = exp2(log2(1.0 / ((_3535 * 3.5) + 5.0)) * 0.25);
                        float _3560 = 1.0 - _983;
                        float _3567 = sqrt(1.0 - ((1.0 - (_3560 * _3560)) * (1.0 - (_3559 * _3559))));
                        float _3568 = _3567 * _3567;
                        float _3569 = _3568 * _3568;
                        float _3570 = _3550 + _3515;
                        float _3571 = _3551 + _3516;
                        float _3572 = _3552 + _3517;
                        float _3576 = inversesqrt(dot(vec3(_3570, _3571, _3572), vec3(_3570, _3571, _3572)));
                        float _3580 = dot(vec3(_780, _783, _786), vec3(_3550, _3551, _3552));
                        float _4949 = isnan(0.0) ? _3580 : (isnan(_3580) ? 0.0 : max(_3580, 0.0));
                        float _3583 = isnan(1.0) ? _4949 : (isnan(_4949) ? 1.0 : min(_4949, 1.0));
                        float _3584 = dot(vec3(_780, _783, _786), vec3(_3576 * _3570, _3576 * _3571, _3576 * _3572));
                        float _4960 = isnan(0.0) ? _3584 : (isnan(_3584) ? 0.0 : max(_3584, 0.0));
                        float _3587 = isnan(1.0) ? _4960 : (isnan(_4960) ? 1.0 : min(_4960, 1.0));
                        float _3591 = ((_3587 * _3587) * (_3569 + (-1.0))) + 1.0;
                        float _3592 = _3528 * _3568;
                        float _3593 = _3592 * _3592;
                        float _3596 = ((1.0 - _3593) * _3518) + _3593;
                        float _4971 = isnan(0.0) ? _3596 : (isnan(_3596) ? 0.0 : max(_3596, 0.0));
                        float _3597 = isnan(1.0) ? _4971 : (isnan(_4971) ? 1.0 : min(_4971, 1.0));
                        float _3598 = 1.0 - _3568;
                        float _3608 = (0.5 / (((_3597 * ((_3583 * _3598) + _3568)) + 9.9999999392252902907785028219223e-09) + (((_3597 * _3598) + _3568) * _3583))) * _3597;
                        float _4982 = isnan(0.0) ? _3608 : (isnan(_3608) ? 0.0 : max(_3608, 0.0));
                        float _3619 = (((_3569 * 3.1415927410125732421875) * (isnan(1.0) ? _4982 : (isnan(_4982) ? 1.0 : min(_4982, 1.0)))) / ((_3591 * _3591) * ((_3535 * 2.1991131305694580078125) + 3.141590118408203125))) * _3524;
                        _3372 = (_3539 * _3487.x) + _3445;
                        _3373 = (_3539 * _3487.y) + _3446;
                        _3374 = (_3539 * _3487.z) + _3447;
                        _3369 = (_3619 * _3504.x) + _3442;
                        _3370 = (_3619 * _3504.y) + _3443;
                        _3371 = (_3619 * _3504.z) + _3444;
                        if (_3449 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3442 = _3369;
                            _3443 = _3370;
                            _3444 = _3371;
                            _3445 = _3372;
                            _3446 = _3373;
                            _3447 = _3374;
                            _3448 = _3449;
                        }
                    }
                    frontier_phi_73_pred = _3374;
                    frontier_phi_73_pred_1 = _3373;
                    frontier_phi_73_pred_2 = _3372;
                    frontier_phi_73_pred_3 = _3371;
                    frontier_phi_73_pred_4 = _3370;
                    frontier_phi_73_pred_5 = _3369;
                }
                _3147 = frontier_phi_73_pred;
                _3145 = frontier_phi_73_pred_1;
                _3143 = frontier_phi_73_pred_2;
                _3141 = frontier_phi_73_pred_3;
                _3139 = frontier_phi_73_pred_4;
                _3137 = frontier_phi_73_pred_5;
                uint _3304 = _3303 + 1u;
                if (_3304 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3297 = _3137;
                    _3298 = _3139;
                    _3299 = _3141;
                    _3300 = _3143;
                    _3301 = _3145;
                    _3302 = _3147;
                    _3303 = _3304;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3136 = _3137;
            _3138 = _3139;
            _3140 = _3141;
            _3142 = _3143;
            _3144 = _3145;
            _3146 = _3147;
        }
        uvec4 _3150 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3151 = _3150.z;
        uint _3153 = (_3151 >> 8u) & 15u;
        float _3265;
        float _3267;
        float _3269;
        float _3271;
        float _3273;
        float _3275;
        if (((4294967295u << _3153) & _3014) == 0u)
        {
            _3265 = _3136;
            _3267 = _3138;
            _3269 = _3140;
            _3271 = _3142;
            _3273 = _3144;
            _3275 = _3146;
        }
        else
        {
            float _3290 = inversesqrt(dot(vec3(_2073, _2074, _2075), vec3(_2073, _2074, _2075)));
            float _3291 = _3290 * _2073;
            float _3292 = _3290 * _2074;
            float _3293 = _3290 * _2075;
            float frontier_phi_65_66_ladder;
            float frontier_phi_65_66_ladder_1;
            float frontier_phi_65_66_ladder_2;
            float frontier_phi_65_66_ladder_3;
            float frontier_phi_65_66_ladder_4;
            float frontier_phi_65_66_ladder_5;
            if (_3153 < ((_3151 >> 12u) & 15u))
            {
                float _3266;
                float _3268;
                float _3270;
                float _3272;
                float _3274;
                float _3276;
                float _3425 = _3136;
                float _3426 = _3138;
                float _3427 = _3140;
                float _3428 = _3142;
                float _3429 = _3144;
                float _3430 = _3146;
                uint _3431 = _3153;
                uint _3440;
                bool _3441;
                for (;;)
                {
                    _3440 = texelFetch(g_lightClassification, int((((_3008 << 5u) + (_2994 << 9u)) + (_3431 << 2u)) >> 2u)).x;
                    _3441 = _3440 == 0u;
                    float frontier_phi_84_pred;
                    float frontier_phi_84_pred_1;
                    float frontier_phi_84_pred_2;
                    float frontier_phi_84_pred_3;
                    float frontier_phi_84_pred_4;
                    float frontier_phi_84_pred_5;
                    if (_3441)
                    {
                        frontier_phi_84_pred = _3429;
                        frontier_phi_84_pred_1 = _3428;
                        frontier_phi_84_pred_2 = _3427;
                        frontier_phi_84_pred_3 = _3426;
                        frontier_phi_84_pred_4 = _3425;
                        frontier_phi_84_pred_5 = _3430;
                    }
                    else
                    {
                        float _3633;
                        float _3634;
                        float _3635;
                        float _3636;
                        float _3637;
                        float _3638;
                        float _3928;
                        float _3929;
                        float _3930;
                        float _3931;
                        float _3932;
                        float _3933;
                        float _3646 = _3425;
                        float _3647 = _3426;
                        float _3648 = _3427;
                        float _3649 = _3428;
                        float _3650 = _3429;
                        float _3651 = _3430;
                        uint _3652 = _3440;
                        uint _3653;
                        vec4 _3678;
                        float _3679;
                        vec4 _3694;
                        vec3 _3706;
                        vec4 _3721;
                        vec4 _3737;
                        float _3784;
                        bool _3785;
                        for (;;)
                        {
                            uint _3663 = ((_3431 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3652));
                            _3653 = (_3652 + 4294967295u) & _3652;
                            uint _3665 = _3663 * 40u;
                            _3678 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3665)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3665 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3665 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3665 + 3u)).x));
                            _3679 = _3678.w;
                            uint _3681 = (_3663 * 40u) + 4u;
                            _3694 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3681)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3681 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3681 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3681 + 3u)).x));
                            uint _3696 = (_3663 * 40u) + 8u;
                            _3706 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3696)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3696 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3696 + 2u)).x));
                            uint _3708 = (_3663 * 40u) + 16u;
                            _3721 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3708)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3708 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3708 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3708 + 3u)).x));
                            uint _3724 = (_3663 * 40u) + 20u;
                            _3737 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3724)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3724 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3724 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3724 + 3u)).x));
                            uint _3740 = (_3663 * 40u) + 24u;
                            vec4 _3753 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3740)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3740 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3740 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3740 + 3u)).x));
                            uint _3759 = (_3663 * 40u) + 28u;
                            vec4 _3772 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3759)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3759 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3759 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3759 + 3u)).x));
                            _3784 = fma(_2075, _3772.z, fma(_2074, _3772.y, _3772.x * _2073)) + _3772.w;
                            _3785 = !((fma(_2075, _3753.z, fma(_2074, _3753.y, _3753.x * _2073)) + _3753.w) <= 0.0);
                            float frontier_phi_90_pred;
                            float frontier_phi_90_pred_1;
                            float frontier_phi_90_pred_2;
                            float frontier_phi_90_pred_3;
                            float frontier_phi_90_pred_4;
                            float frontier_phi_90_pred_5;
                            if (_3785)
                            {
                                float _3812 = _3678.x - _2073;
                                float _3813 = _3678.y - _2074;
                                float _3814 = _3678.z - _2075;
                                float _3815 = dot(vec3(_3812, _3813, _3814), vec3(_3812, _3813, _3814));
                                float _3818 = inversesqrt(_3815);
                                float _3819 = _3818 * _3812;
                                float _3820 = _3818 * _3813;
                                float _3821 = _3818 * _3814;
                                float _3825 = 1.0 - (_3815 / (_3679 * _3679));
                                float _4993 = isnan(0.0) ? _3825 : (isnan(_3825) ? 0.0 : max(_3825, 0.0));
                                float _3826 = isnan(1.0) ? _4993 : (isnan(_4993) ? 1.0 : min(_4993, 1.0));
                                float _3830 = sqrt(_3815) * _3694.w;
                                float _3832 = 1.39999997615814208984375 / (_3830 + 1.39999997615814208984375);
                                float _3833 = _3832 * _3832;
                                float _3836 = ((1.0 - _3833) * dot(vec3(_3819, _3820, _3821), vec3(_780, _783, _786))) + _3833;
                                float _3839 = _3830 * _3830;
                                float _3843 = (fma(_2075, _3721.z, fma(_2074, _3721.y, _3721.x * _2073)) + _3721.w) / _3784;
                                float _3844 = (fma(_2075, _3737.z, fma(_2074, _3737.y, _3737.x * _2073)) + _3737.w) / _3784;
                                float _3848 = 1.0 - dot(vec2(_3843, _3844), vec2(_3843, _3844));
                                float _5009 = isnan(0.0) ? _3848 : (isnan(_3848) ? 0.0 : max(_3848, 0.0));
                                float _3849 = isnan(1.0) ? _5009 : (isnan(_5009) ? 1.0 : min(_5009, 1.0));
                                float _3850 = _3849 * (((isnan(0.0) ? _3836 : (isnan(_3836) ? 0.0 : max(_3836, 0.0))) * _3826) / ((_3839 * 0.699999988079071044921875) + 1.0));
                                float _3862 = exp2(log2(1.0 / ((_3839 * 3.5) + 5.0)) * 0.25);
                                float _3863 = 1.0 - _983;
                                float _3870 = sqrt(1.0 - ((1.0 - (_3863 * _3863)) * (1.0 - (_3862 * _3862))));
                                float _3871 = _3870 * _3870;
                                float _3872 = _3871 * _3871;
                                float _3873 = _3819 - _3291;
                                float _3874 = _3820 - _3292;
                                float _3875 = _3821 - _3293;
                                float _3879 = inversesqrt(dot(vec3(_3873, _3874, _3875), vec3(_3873, _3874, _3875)));
                                float _3883 = dot(vec3(_780, _783, _786), vec3((-0.0) - _3291, (-0.0) - _3292, (-0.0) - _3293));
                                float _5020 = isnan(0.0) ? _3883 : (isnan(_3883) ? 0.0 : max(_3883, 0.0));
                                float _3886 = isnan(1.0) ? _5020 : (isnan(_5020) ? 1.0 : min(_5020, 1.0));
                                float _3887 = dot(vec3(_780, _783, _786), vec3(_3879 * _3873, _3879 * _3874, _3879 * _3875));
                                float _5031 = isnan(0.0) ? _3887 : (isnan(_3887) ? 0.0 : max(_3887, 0.0));
                                float _3890 = isnan(1.0) ? _5031 : (isnan(_5031) ? 1.0 : min(_5031, 1.0));
                                float _3894 = ((_3890 * _3890) * (_3872 + (-1.0))) + 1.0;
                                float _3895 = _3832 * _3871;
                                float _3896 = _3895 * _3895;
                                float _3902 = ((1.0 - _3896) * dot(vec3(_780, _783, _786), vec3(_3819, _3820, _3821))) + _3896;
                                float _5042 = isnan(0.0) ? _3902 : (isnan(_3902) ? 0.0 : max(_3902, 0.0));
                                float _3903 = isnan(1.0) ? _5042 : (isnan(_5042) ? 1.0 : min(_5042, 1.0));
                                float _3904 = 1.0 - _3871;
                                float _3914 = (0.5 / (((_3903 * ((_3886 * _3904) + _3871)) + 9.9999999392252902907785028219223e-09) + (((_3903 * _3904) + _3871) * _3886))) * _3903;
                                float _5053 = isnan(0.0) ? _3914 : (isnan(_3914) ? 0.0 : max(_3914, 0.0));
                                float _3924 = (_3849 * _3826) * (((_3872 * 3.1415927410125732421875) * (isnan(1.0) ? _5053 : (isnan(_5053) ? 1.0 : min(_5053, 1.0)))) / ((_3894 * _3894) * ((_3839 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_90_pred = _3850 * _3694.y;
                                frontier_phi_90_pred_1 = _3850 * _3694.x;
                                frontier_phi_90_pred_2 = _3924 * _3706.z;
                                frontier_phi_90_pred_3 = _3924 * _3706.y;
                                frontier_phi_90_pred_4 = _3924 * _3706.x;
                                frontier_phi_90_pred_5 = _3850 * _3694.z;
                            }
                            else
                            {
                                frontier_phi_90_pred = 0.0;
                                frontier_phi_90_pred_1 = 0.0;
                                frontier_phi_90_pred_2 = 0.0;
                                frontier_phi_90_pred_3 = 0.0;
                                frontier_phi_90_pred_4 = 0.0;
                                frontier_phi_90_pred_5 = 0.0;
                            }
                            _3932 = frontier_phi_90_pred;
                            _3931 = frontier_phi_90_pred_1;
                            _3930 = frontier_phi_90_pred_2;
                            _3929 = frontier_phi_90_pred_3;
                            _3928 = frontier_phi_90_pred_4;
                            _3933 = frontier_phi_90_pred_5;
                            _3636 = _3931 + _3649;
                            _3637 = _3932 + _3650;
                            _3638 = _3933 + _3651;
                            _3633 = _3928 + _3646;
                            _3634 = _3929 + _3647;
                            _3635 = _3930 + _3648;
                            if (_3653 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3646 = _3633;
                                _3647 = _3634;
                                _3648 = _3635;
                                _3649 = _3636;
                                _3650 = _3637;
                                _3651 = _3638;
                                _3652 = _3653;
                                continue;
                            }
                        }
                        frontier_phi_84_pred = _3637;
                        frontier_phi_84_pred_1 = _3636;
                        frontier_phi_84_pred_2 = _3635;
                        frontier_phi_84_pred_3 = _3634;
                        frontier_phi_84_pred_4 = _3633;
                        frontier_phi_84_pred_5 = _3638;
                    }
                    _3274 = frontier_phi_84_pred;
                    _3272 = frontier_phi_84_pred_1;
                    _3270 = frontier_phi_84_pred_2;
                    _3268 = frontier_phi_84_pred_3;
                    _3266 = frontier_phi_84_pred_4;
                    _3276 = frontier_phi_84_pred_5;
                    uint _3432 = _3431 + 1u;
                    if (_3432 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3425 = _3266;
                        _3426 = _3268;
                        _3427 = _3270;
                        _3428 = _3272;
                        _3429 = _3274;
                        _3430 = _3276;
                        _3431 = _3432;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_65_66_ladder = _3276;
                frontier_phi_65_66_ladder_1 = _3272;
                frontier_phi_65_66_ladder_2 = _3274;
                frontier_phi_65_66_ladder_3 = _3268;
                frontier_phi_65_66_ladder_4 = _3266;
                frontier_phi_65_66_ladder_5 = _3270;
            }
            else
            {
                frontier_phi_65_66_ladder = _3146;
                frontier_phi_65_66_ladder_1 = _3142;
                frontier_phi_65_66_ladder_2 = _3144;
                frontier_phi_65_66_ladder_3 = _3138;
                frontier_phi_65_66_ladder_4 = _3136;
                frontier_phi_65_66_ladder_5 = _3140;
            }
            _3265 = frontier_phi_65_66_ladder_4;
            _3267 = frontier_phi_65_66_ladder_3;
            _3269 = frontier_phi_65_66_ladder_5;
            _3271 = frontier_phi_65_66_ladder_1;
            _3273 = frontier_phi_65_66_ladder_2;
            _3275 = frontier_phi_65_66_ladder;
        }
        float _3280 = isnan(1.0) ? _967 : (isnan(_967) ? 1.0 : min(_967, 1.0));
        _3026 = (_3280 * _3271) + _2539;
        _3028 = (_3280 * _3273) + _2541;
        _3030 = (_3280 * _3275) + _2543;
        _3032 = ((_3265 * _953) * _3280) + _2877;
        _3034 = ((_3267 * _954) * _3280) + _2879;
        _3036 = ((_3269 * _955) * _3280) + _2881;
    }
    else
    {
        _3026 = _2539;
        _3028 = _2541;
        _3030 = _2543;
        _3032 = _2877;
        _3034 = _2879;
        _3036 = _2881;
    }
    uint _3042 = _860 + uint(cbMatDynParam._m0[0u].w);
    float _3052 = ((((cbMtdParam._m0[12u].x * cbMtdParam._m0[16u].z) * cbMtdParam._m0[15u].w) * _588) * _601.x) * cbInstanceData._m0[_3042].x;
    float _3057 = ((((cbMtdParam._m0[12u].y * cbMtdParam._m0[16u].z) * cbMtdParam._m0[15u].w) * _588) * _601.y) * cbInstanceData._m0[_3042].y;
    float _3062 = ((((cbMtdParam._m0[12u].z * cbMtdParam._m0[16u].z) * cbMtdParam._m0[15u].w) * _588) * _601.z) * cbInstanceData._m0[_3042].z;
    float _5069 = isnan(0.0) ? _944 : (isnan(_944) ? 0.0 : max(_944, 0.0));
    float _5080 = isnan(0.0) ? _945 : (isnan(_945) ? 0.0 : max(_945, 0.0));
    float _5091 = isnan(0.0) ? _946 : (isnan(_946) ? 0.0 : max(_946, 0.0));
    float _5102 = isnan(0.0) ? _659 : (isnan(_659) ? 0.0 : max(_659, 0.0));
    float _3080 = (((isnan(1.0) ? _5069 : (isnan(_5069) ? 1.0 : min(_5069, 1.0))) * (_3026 + ((isnan(0.0) ? _1729 : (isnan(_1729) ? 0.0 : max(_1729, 0.0))) * _967))) + ((_3032 + ((isnan(0.0) ? _2020 : (isnan(_2020) ? 0.0 : max(_2020, 0.0))) * _1805)) * cbPerFrame._m0[3u].x)) + _3052;
    float _3082 = (_3057 + ((_3034 + ((isnan(0.0) ? _2023 : (isnan(_2023) ? 0.0 : max(_2023, 0.0))) * _1805)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _5080 : (isnan(_5080) ? 1.0 : min(_5080, 1.0))) * (_3028 + ((isnan(0.0) ? _1732 : (isnan(_1732) ? 0.0 : max(_1732, 0.0))) * _967)));
    float _3084 = (_3062 + ((_3036 + ((isnan(0.0) ? _2026 : (isnan(_2026) ? 0.0 : max(_2026, 0.0))) * _1805)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _5091 : (isnan(_5091) ? 1.0 : min(_5091, 1.0))) * (_3030 + ((isnan(0.0) ? _1735 : (isnan(_1735) ? 0.0 : max(_1735, 0.0))) * _967)));
    float _3085 = isnan(0.0) ? _3080 : (isnan(_3080) ? 0.0 : max(_3080, 0.0));
    float _3086 = isnan(0.0) ? _3082 : (isnan(_3082) ? 0.0 : max(_3082, 0.0));
    float _3087 = isnan(0.0) ? _3084 : (isnan(_3084) ? 0.0 : max(_3084, 0.0));
    float _3093 = cbMtdParam._m0[2u].x * _3052;
    float _3094 = cbMtdParam._m0[2u].y * _3057;
    float _3095 = cbMtdParam._m0[2u].z * _3062;
    float _5128 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _3097 = isnan(1.0) ? _5128 : (isnan(_5128) ? 1.0 : min(_5128, 1.0));
    float _3102 = cbInstanceData._m0[_859 + 6u].w * (isnan(1.0) ? _5102 : (isnan(_5102) ? 1.0 : min(_5102, 1.0)));
    float _3107 = _757 / cbSceneParam._m0[86u].x;
    float _3108 = _758 / cbSceneParam._m0[86u].y;
    vec4 _3122 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3107, _3108, (log2((isnan(cbSceneParam._m0[77u].w) ? _680 : (isnan(_680) ? cbSceneParam._m0[77u].w : min(_680, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3124 = _3122.x;
    float _3125 = _3122.y;
    float _3126 = _3122.z;
    float _3127 = _3122.w;
    float _3198;
    float _3200;
    float _3202;
    float _3204;
    if (_680 > cbSceneParam._m0[78u].w)
    {
        float _3161 = isnan(_680) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _680 : min(cbSceneParam._m0[80u].w, _680));
        float _3162 = _3161 / _680;
        float _3173 = _3162 * _730;
        float _3174 = _731 * _3162;
        float _3175 = (-0.0) - _3174;
        float _3176 = _3162 * _732;
        float _3178 = (cbSceneParam._m0[77u].w * _3175) / _3161;
        float _3179 = _3178 + cbSceneParam._m0[79u].w;
        float _3180 = cbSceneParam._m0[79u].w - _3174;
        float _3186 = sqrt(((_3173 * _3173) + (_3174 * _3174)) + (_3176 * _3176));
        float _3189 = (1.0 - (cbSceneParam._m0[77u].w / _3161)) * _3186;
        float _3194 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3196 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3382;
        if (abs((_3175 - _3178) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3382 = ((((_3179 > 0.0) ? exp2(_3194 * _3179) : (2.0 - exp2(_3196 * _3179))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3189;
        }
        else
        {
            float _3326 = 1.0 / cbSceneParam._m0[80u].x;
            float _3327 = isnan(_3180) ? _3179 : (isnan(_3179) ? _3180 : max(_3179, _3180));
            float _3328 = isnan(_3180) ? _3179 : (isnan(_3179) ? _3180 : min(_3179, _3180));
            float _3337 = isnan(0.0) ? _3327 : (isnan(_3327) ? 0.0 : min(_3327, 0.0));
            float _3338 = isnan(0.0) ? _3328 : (isnan(_3328) ? 0.0 : min(_3328, 0.0));
            _3382 = ((abs(_3186 / _3175) * cbSceneParam._m0[80u].y) * ((((_3337 - _3338) * 2.0) - ((exp2(_3194 * (isnan(0.0) ? _3327 : (isnan(_3327) ? 0.0 : max(_3327, 0.0)))) - exp2(_3194 * (isnan(0.0) ? _3328 : (isnan(_3328) ? 0.0 : max(_3328, 0.0))))) * _3326)) - ((exp2(_3196 * _3337) - exp2(_3196 * _3338)) * _3326))) + (_3189 * cbSceneParam._m0[80u].z);
        }
        vec4 _3384 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3107, _3108, 1.0), 0.0);
        float _3393 = exp2((_3382 * (-1.44269502162933349609375)) * (1.0 - _3384.w));
        float _3394 = log2(_3393);
        float _3410 = log2(_3127);
        _3198 = (exp2(_3410 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3394 * cbSceneParam._m0[78u].x)) * _3384.x) / cbSceneParam._m0[78u].x)) + _3124;
        _3200 = (exp2(_3410 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3394 * cbSceneParam._m0[78u].y)) * _3384.y) / cbSceneParam._m0[78u].y)) + _3125;
        _3202 = (exp2(_3410 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3394 * cbSceneParam._m0[78u].z)) * _3384.z) / cbSceneParam._m0[78u].z)) + _3126;
        _3204 = _3393 * _3127;
    }
    else
    {
        _3198 = _3124;
        _3200 = _3125;
        _3202 = _3126;
        _3204 = _3127;
    }
    bool _3420;
    vec4 _3214;
    vec4 _3236;
    float _3238;
    float _3242;
    float _3243;
    float _3244;
    float _3247;
    float _3250;
    float _3253;
    float _3254;
    bool _3264;
    for (;;)
    {
        _3214 = cbMatDynParam._m0[0u];
        float _3216 = roundEven(_3214.y);
        bool _3217 = _3216 == 3.0;
        float _3218 = log2(_3204);
        float _3222 = exp2(_3218 * cbSceneParam._m0[78u].x);
        float _3223 = exp2(_3218 * cbSceneParam._m0[78u].y);
        float _3224 = exp2(_3218 * cbSceneParam._m0[78u].z);
        float _3225 = _3222 * _3085;
        float _3226 = _3223 * _3086;
        float _3227 = _3224 * _3087;
        float _3234 = _746 + (-0.5);
        _3236 = cbMtdParam._m0[1u];
        _3238 = _3236.y * _3234;
        float _3241 = (_3216 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3242 = _3241 * (_3217 ? _3225 : (_3225 + (cbSceneParam._m0[72u].w * _3198)));
        _3243 = _3241 * (_3217 ? _3226 : (_3226 + (cbSceneParam._m0[72u].w * _3200)));
        _3244 = _3241 * (_3217 ? _3227 : (_3227 + (cbSceneParam._m0[72u].w * _3202)));
        _3247 = ((_3093 * _3097) * _3222) * _3241;
        _3250 = ((_3094 * _3097) * _3223) * _3241;
        _3253 = ((_3095 * _3097) * _3224) * _3241;
        _3254 = _3234 * 0.999000012874603271484375;
        _3264 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3264)
        {
            if ((cbInstanceData._m0[_859 + 7u].x + _3254) < 0.5)
            {
                _3420 = true;
                break;
            }
        }
        uint _3361 = _860 + uint(_3214.w);
        if ((cbInstanceData._m0[_3361].w < 1.0) && ((cbInstanceData._m0[_3361].w + _3254) < 0.5))
        {
            _3420 = true;
            break;
        }
        if ((_3238 + _442) < _3236.x)
        {
            _3420 = true;
            break;
        }
        _3420 = false;
        break;
    }
    float _3624;
    if (_3420)
    {
        discard_state = true;
        _3624 = 0.0;
    }
    else
    {
        _3624 = _3102;
    }
    SV_Target.x = _3242;
    SV_Target.y = _3243;
    SV_Target.z = _3244;
    SV_Target.w = _3624;
    SV_Target_1.x = _3247;
    SV_Target_1.y = _3250;
    SV_Target_1.z = _3253;
    SV_Target_1.w = _3102;
    discard_exit();
}


