#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[18];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_1;
layout(set = 0, binding = 1) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_7;
layout(set = 0, binding = 10) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_6;
layout(set = 0, binding = 2) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_0;
layout(set = 0, binding = 3) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_10;
layout(set = 0, binding = 4) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_11;
layout(set = 0, binding = 5) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_12;
layout(set = 0, binding = 7) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1291;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _203 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _204 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _205 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _211 = inversesqrt(dot(vec3(_203, _204, _205), vec3(_203, _204, _205)));
    float _218 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _219 = _218 * NORMAL.x;
    float _220 = _218 * NORMAL.y;
    float _221 = _218 * NORMAL.z;
    float _225 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _233;
    float _234;
    float _235;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _233 = (-0.0) - _219;
        _234 = (-0.0) - _220;
        _235 = (-0.0) - _221;
    }
    else
    {
        _233 = _219;
        _234 = _220;
        _235 = _221;
    }
    float _279 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _289 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _279);
    float _290 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _279);
    float _291 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _279);
    vec4 _304 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    vec4 _322 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _333 = cbMtdParam._m0[9u].x * _322.x;
    float _334 = cbMtdParam._m0[9u].y * _322.y;
    float _335 = cbMtdParam._m0[9u].z * _322.z;
    float _341 = exp2(log2(1.0 - _304.w) * 8.0);
    vec4 _353 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_10, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    vec4 _387 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _395 = (((((cbMtdParam._m0[13u].x * _353.x) - _333) * _341) + _333) * 4.55000019073486328125) * _387.x;
    float _397 = (((((cbMtdParam._m0[13u].y * _353.y) - _334) * _341) + _334) * 4.55000019073486328125) * _387.y;
    float _399 = (((((cbMtdParam._m0[13u].z * _353.z) - _335) * _341) + _335) * 4.55000019073486328125) * _387.z;
    float _400 = _387.w * _322.w;
    float _424 = cbMtdParam._m0[16u].x + texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w)).x;
    float _427 = ((cbMtdParam._m0[15u].z - _424) * _341) + _424;
    vec4 _439 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w));
    float _441 = _439.x;
    float _442 = _439.y;
    float _448 = cbMtdParam._m0[14u].x + _439.z;
    vec4 _461 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _473 = (_304.z * 2.0) * ((((_461.z - _448) + cbMtdParam._m0[15u].y) * _341) + _448);
    float _488 = abs((fract(cbMtdParam._m0[15u].x * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _3662 = isnan(0.0) ? _488 : (isnan(_488) ? 0.0 : max(_488, 0.0));
    float _489 = isnan(1.0) ? _3662 : (isnan(_3662) ? 1.0 : min(_3662, 1.0));
    float _494 = (_489 * _489) * (3.0 - (_489 * 2.0));
    vec4 _507 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _515 = (_304.x * 2.0) + (-1.0);
    float _516 = (_304.y * 2.0) + (-1.0);
    float _517 = dot(vec2(_515, _516), vec2(_515, _516));
    float _3673 = isnan(0.0) ? _517 : (isnan(_517) ? 0.0 : max(_517, 0.0));
    float _522 = sqrt(1.0 - (isnan(1.0) ? _3673 : (isnan(_3673) ? 1.0 : min(_3673, 1.0))));
    float _535 = (cbMtdParam._m0[14u].z * (((((_461.x - _441) * _341) + _441) * 2.0) + (-1.0))) + _515;
    float _536 = (cbMtdParam._m0[14u].z * (((((_461.y - _442) * _341) + _442) * 2.0) + (-1.0))) + _516;
    float _539 = fma(_522, _233, fma(_536, _225 * TANGENT.x, (_211 * _203) * _535));
    float _542 = fma(_522, _234, fma(_536, _225 * TANGENT.y, (_211 * _204) * _535));
    float _545 = fma(_522, _235, fma(_536, _225 * TANGENT.z, (_211 * _205) * _535));
    float _549 = inversesqrt(dot(vec3(_539, _542, _545), vec3(_539, _542, _545)));
    float _550 = _549 * _539;
    float _551 = _549 * _542;
    float _552 = _549 * _545;
    float _3684 = isnan(0.0) ? _400 : (isnan(_400) ? 0.0 : max(_400, 0.0));
    float _553 = isnan(1.0) ? _3684 : (isnan(_3684) ? 1.0 : min(_3684, 1.0));
    float _3695 = isnan(0.0) ? _473 : (isnan(_473) ? 0.0 : max(_473, 0.0));
    float _554 = isnan(1.0) ? _3695 : (isnan(_3695) ? 1.0 : min(_3695, 1.0));
    float _3706 = isnan(0.0) ? _395 : (isnan(_395) ? 0.0 : max(_395, 0.0));
    float _555 = isnan(1.0) ? _3706 : (isnan(_3706) ? 1.0 : min(_3706, 1.0));
    float _3717 = isnan(0.0) ? _397 : (isnan(_397) ? 0.0 : max(_397, 0.0));
    float _556 = isnan(1.0) ? _3717 : (isnan(_3717) ? 1.0 : min(_3717, 1.0));
    float _3728 = isnan(0.0) ? _399 : (isnan(_399) ? 0.0 : max(_399, 0.0));
    float _557 = isnan(1.0) ? _3728 : (isnan(_3728) ? 1.0 : min(_3728, 1.0));
    float _3739 = isnan(0.0) ? _427 : (isnan(_427) ? 0.0 : max(_427, 0.0));
    float _558 = isnan(1.0) ? _3739 : (isnan(_3739) ? 1.0 : min(_3739, 1.0));
    float _566 = cbMatDynParam._m0[9u].x * _555;
    float _567 = cbMatDynParam._m0[9u].y * _556;
    float _568 = cbMatDynParam._m0[9u].z * _557;
    float _575 = inversesqrt(dot(vec3(_289, _290, _291), vec3(_289, _290, _291)));
    float _576 = _575 * _289;
    float _577 = _575 * _290;
    float _578 = _575 * _291;
    float _579 = dot(vec3(_550, _551, _552), vec3(_576, _577, _578));
    float _585 = abs(exp2(log2(_579) * cbMatDynParam._m0[12u].x));
    float _586 = isnan(0.100000001490116119384765625) ? _585 : (isnan(_585) ? 0.100000001490116119384765625 : max(_585, 0.100000001490116119384765625));
    float _592 = ((isnan(0.699999988079071044921875) ? _586 : (isnan(_586) ? 0.699999988079071044921875 : min(_586, 0.699999988079071044921875))) + (-0.100000001490116119384765625)) * 1.66666662693023681640625;
    float _614 = 1.0 - cbMatDynParam._m0[8u].w;
    float _3760 = isnan(0.0) ? _614 : (isnan(_614) ? 0.0 : max(_614, 0.0));
    float _617 = 1.0 - cbMatDynParam._m0[7u].w;
    float _3771 = isnan(0.0) ? _617 : (isnan(_617) ? 0.0 : max(_617, 0.0));
    float _618 = isnan(1.0) ? _3771 : (isnan(_3771) ? 1.0 : min(_3771, 1.0));
    float _621 = (((isnan(1.0) ? _3760 : (isnan(_3760) ? 1.0 : min(_3760, 1.0))) - _618) * _592) + _618;
    float _640 = dot(vec3(_550, _551, _552), vec3(0.0, -1.0, 0.0));
    float _3782 = isnan(0.0) ? _640 : (isnan(_640) ? 0.0 : max(_640, 0.0));
    float _643 = isnan(1.0) ? _3782 : (isnan(_3782) ? 1.0 : min(_3782, 1.0));
    float _650 = (_643 * _555) * cbMatDynParam._m0[11u].x;
    float _652 = (_643 * _556) * cbMatDynParam._m0[11u].y;
    float _654 = (_643 * _557) * cbMatDynParam._m0[11u].z;
    float _661 = dot(vec3(_576, _577, _578), vec3(_550, _551, _552));
    float _664 = _661 * 2.0;
    float _674 = dot(vec3((-0.0) - (_576 - (_664 * _550)), (-0.0) - (_577 - (_664 * _551)), (-0.0) - (_578 - (_664 * _552))), vec3(0.0, -1.0, 0.0));
    float _3793 = isnan(0.0) ? _674 : (isnan(_674) ? 0.0 : max(_674, 0.0));
    float _681 = exp2(log2(isnan(1.0) ? _3793 : (isnan(_3793) ? 1.0 : min(_3793, 1.0))) * 4.0);
    float _707 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _713 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _714 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _716 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _718 = _716.w;
    float _737 = fma(_552, cbSceneParam._m0[5u].z, fma(_551, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _550));
    float _740 = fma(_552, cbSceneParam._m0[6u].z, fma(_551, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _550));
    float _743 = fma(_552, cbSceneParam._m0[7u].z, fma(_551, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _550));
    vec4 _745 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _747 = _745.x;
    float _759 = (((_745.y - _554) + (_745.w * _554)) * cbMtdParam._m0[3u].x) + _554;
    vec4 _760 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _776 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3(cbMtdParam._m0[3u].x * (_747 * _747)), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * _760.z;
    float _784 = (((cbMatDynParam._m0[15u].x - _558) * cbMatDynParam._m0[15u].w) * _776) + _558;
    float _792 = ((_776 * cbMatDynParam._m0[16u].z) * (cbMatDynParam._m0[16u].x - _759)) + _759;
    uint _816 = uint(roundEven(NORMAL.w)) * 13u;
    uint _817 = _816 + 9u;
    uint _818 = _817 + uint(cbMatDynParam._m0[0u].w);
    float _824 = (cbMtdParam._m0[0u].x * _566) * cbInstanceData._m0[_818].x;
    float _825 = (cbMtdParam._m0[0u].y * _567) * cbInstanceData._m0[_818].y;
    float _826 = (cbMtdParam._m0[0u].z * _568) * cbInstanceData._m0[_818].z;
    float _3804 = isnan(0.0) ? _824 : (isnan(_824) ? 0.0 : max(_824, 0.0));
    float _827 = isnan(1.0) ? _3804 : (isnan(_3804) ? 1.0 : min(_3804, 1.0));
    float _3815 = isnan(0.0) ? _825 : (isnan(_825) ? 0.0 : max(_825, 0.0));
    float _828 = isnan(1.0) ? _3815 : (isnan(_3815) ? 1.0 : min(_3815, 1.0));
    float _3826 = isnan(0.0) ? _826 : (isnan(_826) ? 0.0 : max(_826, 0.0));
    float _829 = isnan(1.0) ? _3826 : (isnan(_3826) ? 1.0 : min(_3826, 1.0));
    vec4 _830 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _835 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _846 = (((_835.x - _784) + (_835.w * _784)) * cbMtdParam._m0[3u].x) + _784;
    float _859 = (cbMtdParam._m0[3u].x * (((_827 * _718) - _827) + _830.x)) + _827;
    float _860 = (cbMtdParam._m0[3u].x * (((_828 * _718) - _828) + _830.y)) + _828;
    float _861 = (cbMtdParam._m0[3u].x * (((_829 * _718) - _829) + _830.z)) + _829;
    float _875 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3((_784 * (_566 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625, (_784 * (_567 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625, (_784 * (_568 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w)).z;
    float _879 = _875 * cbMatDynParam._m0[13u].w;
    float _889 = (_879 * (cbMatDynParam._m0[13u].x - _859)) + _859;
    float _890 = (_879 * (cbMatDynParam._m0[13u].y - _860)) + _860;
    float _891 = (_879 * (cbMatDynParam._m0[13u].z - _861)) + _861;
    float _899 = ((_875 * cbMatDynParam._m0[15u].w) * (cbMatDynParam._m0[15u].x - _846)) + _846;
    float _900 = 1.0 - _899;
    float _901 = _900 * _889;
    float _902 = _900 * _890;
    float _903 = _900 * _891;
    float _907 = (_889 + (-0.039999999105930328369140625)) * _899;
    float _908 = (_890 + (-0.039999999105930328369140625)) * _899;
    float _909 = (_891 + (-0.039999999105930328369140625)) * _899;
    float _910 = _907 + 0.039999999105930328369140625;
    float _911 = _908 + 0.039999999105930328369140625;
    float _912 = _909 + 0.039999999105930328369140625;
    vec4 _921 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _713, cbSceneParam._m0[86u].y * _714));
    float _924 = _921.x * TEXCOORD_4;
    float _925 = _579 * 2.0;
    float _929 = (_925 * _550) - _576;
    float _930 = (_925 * _551) - _577;
    float _931 = (_925 * _552) - _578;
    float _932 = abs(_661);
    float _3837 = isnan(0.0) ? _932 : (isnan(_932) ? 0.0 : max(_932, 0.0));
    float _934 = sqrt(_792);
    float _945 = exp2((_934 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3837 : (isnan(_3837) ? 1.0 : min(_3837, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_934 * 3.0));
    float _951 = (1.0 - _945) * ((_934 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _952 = _945 * _934;
    float _980 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _984 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _988 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1290;
    float _1292;
    float _1293;
    float _1294;
    float _1295;
    float _1296;
    float _1297;
    float _1298;
    float _1299;
    float _1300;
    float _1301;
    float _1302;
    float _1303;
    float _1304;
    float _1305;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1015 = fma(_988, cbModelParam._m0[26u].z, fma(_984, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _980));
        float _1019 = fma(_988, cbModelParam._m0[27u].z, fma(_984, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _980));
        float _1023 = fma(_988, cbModelParam._m0[28u].z, fma(_984, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _980));
        float _1048 = _980 + _550;
        float _1049 = _984 + _551;
        float _1050 = _988 + _552;
        float _1060 = fma(_1050, cbModelParam._m0[26u].z, fma(_1049, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1048)) - _1015;
        float _1061 = fma(_1050, cbModelParam._m0[27u].z, fma(_1049, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1048)) - _1019;
        float _1062 = fma(_1050, cbModelParam._m0[28u].z, fma(_1049, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1048)) - _1023;
        float _1066 = inversesqrt(dot(vec3(_1060, _1061, _1062), vec3(_1060, _1061, _1062)));
        float _1079 = ((_1066 * _1060) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1015 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1080 = ((_1066 * _1061) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1019 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1081 = ((_1066 * _1062) / cbModelParam._m0[34u].z) + ((((((_1023 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1084 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1079, _1080, _1081), 0.0);
        vec4 _1091 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1079, _1080, _1081), 0.0);
        vec4 _1098 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1079, _1080, _1081), 0.0);
        vec4 _1105 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1079, _1080, _1081), 0.0);
        float _1118 = exp2((_1084.w + (-0.5)) * 20.0) * 2.0;
        float _1119 = _1118 * (_1084.x + (-0.5));
        float _1120 = _1118 * (_1084.y + (-0.5));
        float _1121 = _1118 * (_1084.z + (-0.5));
        float _1128 = exp2((_1091.w + (-0.5)) * 20.0) * 2.0;
        float _1129 = _1128 * (_1091.x + (-0.5));
        float _1130 = _1128 * (_1091.y + (-0.5));
        float _1131 = _1128 * (_1091.z + (-0.5));
        float _1138 = exp2((_1098.w + (-0.5)) * 20.0) * 2.0;
        float _1139 = _1138 * (_1098.x + (-0.5));
        float _1140 = _1138 * (_1098.y + (-0.5));
        float _1141 = _1138 * (_1098.z + (-0.5));
        float _1148 = exp2((_1105.w + (-0.5)) * 20.0) * 2.0;
        float _1149 = _1148 * (_1105.x + (-0.5));
        float _1150 = _1148 * (_1105.y + (-0.5));
        float _1151 = _1148 * (_1105.z + (-0.5));
        float _1152 = isnan(0.0) ? _1149 : (isnan(_1149) ? 0.0 : max(_1149, 0.0));
        float _1153 = isnan(0.0) ? _1150 : (isnan(_1150) ? 0.0 : max(_1150, 0.0));
        float _1154 = isnan(0.0) ? _1151 : (isnan(_1151) ? 0.0 : max(_1151, 0.0));
        float _1155 = _1119 * 0.5;
        float _1156 = _1129 * 0.5;
        float _1157 = _1139 * 0.5;
        float _1158 = dot(vec3(_1155, _1156, _1157), vec3(_1155, _1156, _1157));
        float _1163 = (_1158 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1158);
        float _1172 = (dot(vec3(_550, _551, _552), vec3(_1163 * _1155, _1163 * _1156, _1163 * _1157)) + 1.0) * 0.5;
        float _3863 = isnan(0.0) ? _1172 : (isnan(_1172) ? 0.0 : max(_1172, 0.0));
        float _1182 = sqrt(((_1156 * _1156) + (_1155 * _1155)) + (_1157 * _1157)) / (_1152 + 9.9999997473787516355514526367188e-06);
        float _3874 = isnan(0.0) ? _1182 : (isnan(_1182) ? 0.0 : max(_1182, 0.0));
        float _1183 = isnan(1.0) ? _3874 : (isnan(_3874) ? 1.0 : min(_3874, 1.0));
        float _1184 = _1183 * 2.0;
        float _1188 = (1.0 - _1183) / (_1183 + 1.0);
        float _3885 = isnan(0.0) ? _1188 : (isnan(_1188) ? 0.0 : max(_1188, 0.0));
        float _1189 = isnan(1.0) ? _3885 : (isnan(_3885) ? 1.0 : min(_3885, 1.0));
        float _1198 = ((((1.0 - _1189) * (_1184 + 2.0)) * exp2(log2(isnan(1.0) ? _3863 : (isnan(_3863) ? 1.0 : min(_3863, 1.0))) * (_1184 + 1.0))) + _1189) * _1152;
        float _1199 = _1120 * 0.5;
        float _1200 = _1130 * 0.5;
        float _1201 = _1140 * 0.5;
        float _1202 = dot(vec3(_1199, _1200, _1201), vec3(_1199, _1200, _1201));
        float _1207 = (_1202 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1202);
        float _1215 = (dot(vec3(_550, _551, _552), vec3(_1207 * _1199, _1207 * _1200, _1207 * _1201)) + 1.0) * 0.5;
        float _3896 = isnan(0.0) ? _1215 : (isnan(_1215) ? 0.0 : max(_1215, 0.0));
        float _1224 = sqrt(((_1200 * _1200) + (_1199 * _1199)) + (_1201 * _1201)) / (_1153 + 9.9999997473787516355514526367188e-06);
        float _3907 = isnan(0.0) ? _1224 : (isnan(_1224) ? 0.0 : max(_1224, 0.0));
        float _1225 = isnan(1.0) ? _3907 : (isnan(_3907) ? 1.0 : min(_3907, 1.0));
        float _1226 = _1225 * 2.0;
        float _1230 = (1.0 - _1225) / (_1225 + 1.0);
        float _3918 = isnan(0.0) ? _1230 : (isnan(_1230) ? 0.0 : max(_1230, 0.0));
        float _1231 = isnan(1.0) ? _3918 : (isnan(_3918) ? 1.0 : min(_3918, 1.0));
        float _1240 = ((((1.0 - _1231) * (_1226 + 2.0)) * exp2(log2(isnan(1.0) ? _3896 : (isnan(_3896) ? 1.0 : min(_3896, 1.0))) * (_1226 + 1.0))) + _1231) * _1153;
        float _1241 = _1121 * 0.5;
        float _1242 = _1131 * 0.5;
        float _1243 = _1141 * 0.5;
        float _1244 = dot(vec3(_1241, _1242, _1243), vec3(_1241, _1242, _1243));
        float _1249 = (_1244 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1244);
        float _1257 = (dot(vec3(_550, _551, _552), vec3(_1249 * _1241, _1249 * _1242, _1249 * _1243)) + 1.0) * 0.5;
        float _3929 = isnan(0.0) ? _1257 : (isnan(_1257) ? 0.0 : max(_1257, 0.0));
        float _1266 = sqrt(((_1242 * _1242) + (_1241 * _1241)) + (_1243 * _1243)) / (_1154 + 9.9999997473787516355514526367188e-06);
        float _3940 = isnan(0.0) ? _1266 : (isnan(_1266) ? 0.0 : max(_1266, 0.0));
        float _1267 = isnan(1.0) ? _3940 : (isnan(_3940) ? 1.0 : min(_3940, 1.0));
        float _1268 = _1267 * 2.0;
        float _1272 = (1.0 - _1267) / (_1267 + 1.0);
        float _3951 = isnan(0.0) ? _1272 : (isnan(_1272) ? 0.0 : max(_1272, 0.0));
        float _1273 = isnan(1.0) ? _3951 : (isnan(_3951) ? 1.0 : min(_3951, 1.0));
        float _1282 = ((((1.0 - _1273) * (_1268 + 2.0)) * exp2(log2(isnan(1.0) ? _3929 : (isnan(_3929) ? 1.0 : min(_3929, 1.0))) * (_1268 + 1.0))) + _1273) * _1154;
        _1290 = _1121;
        _1292 = _1120;
        _1293 = _1119;
        _1294 = _1131;
        _1295 = _1130;
        _1296 = _1129;
        _1297 = _1141;
        _1298 = _1140;
        _1299 = _1139;
        _1300 = _1154;
        _1301 = _1153;
        _1302 = _1152;
        _1303 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1198 : (isnan(_1198) ? 0.0 : max(_1198, 0.0)));
        _1304 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1240 : (isnan(_1240) ? 0.0 : max(_1240, 0.0)));
        _1305 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1282 : (isnan(_1282) ? 0.0 : max(_1282, 0.0)));
    }
    else
    {
        _1290 = _1291;
        _1292 = _1291;
        _1293 = _1291;
        _1294 = _1291;
        _1295 = _1291;
        _1296 = _1291;
        _1297 = _1291;
        _1298 = _1291;
        _1299 = _1291;
        _1300 = _1291;
        _1301 = _1291;
        _1302 = _1291;
        _1303 = 0.0;
        _1304 = 0.0;
        _1305 = 0.0;
    }
    float _1600;
    float _1601;
    float _1602;
    float _1603;
    float _1604;
    float _1605;
    float _1606;
    float _1607;
    float _1608;
    float _1609;
    float _1610;
    float _1611;
    float _1612;
    float _1613;
    float _1614;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1331 = fma(_988, cbModelParam._m0[30u].z, fma(_984, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _980));
        float _1335 = fma(_988, cbModelParam._m0[31u].z, fma(_984, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _980));
        float _1339 = fma(_988, cbModelParam._m0[32u].z, fma(_984, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _980));
        float _1362 = _980 + _550;
        float _1363 = _984 + _551;
        float _1364 = _988 + _552;
        float _1374 = fma(_1364, cbModelParam._m0[30u].z, fma(_1363, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1362)) - _1331;
        float _1375 = fma(_1364, cbModelParam._m0[31u].z, fma(_1363, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1362)) - _1335;
        float _1376 = fma(_1364, cbModelParam._m0[32u].z, fma(_1363, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1362)) - _1339;
        float _1380 = inversesqrt(dot(vec3(_1374, _1375, _1376), vec3(_1374, _1375, _1376)));
        float _1393 = ((_1380 * _1374) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1331 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1394 = ((_1380 * _1375) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1335 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1395 = ((_1380 * _1376) / cbModelParam._m0[35u].z) + ((((((_1339 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1397 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1393, _1394, _1395), 0.0);
        vec4 _1404 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1393, _1394, _1395), 0.0);
        vec4 _1411 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1393, _1394, _1395), 0.0);
        vec4 _1418 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1393, _1394, _1395), 0.0);
        float _1430 = exp2((_1397.w + (-0.5)) * 20.0) * 2.0;
        float _1431 = _1430 * (_1397.x + (-0.5));
        float _1432 = _1430 * (_1397.y + (-0.5));
        float _1433 = _1430 * (_1397.z + (-0.5));
        float _1440 = exp2((_1404.w + (-0.5)) * 20.0) * 2.0;
        float _1441 = _1440 * (_1404.x + (-0.5));
        float _1442 = _1440 * (_1404.y + (-0.5));
        float _1443 = _1440 * (_1404.z + (-0.5));
        float _1450 = exp2((_1411.w + (-0.5)) * 20.0) * 2.0;
        float _1451 = _1450 * (_1411.x + (-0.5));
        float _1452 = _1450 * (_1411.y + (-0.5));
        float _1453 = _1450 * (_1411.z + (-0.5));
        float _1460 = exp2((_1418.w + (-0.5)) * 20.0) * 2.0;
        float _1461 = _1460 * (_1418.x + (-0.5));
        float _1462 = _1460 * (_1418.y + (-0.5));
        float _1463 = _1460 * (_1418.z + (-0.5));
        float _1464 = isnan(0.0) ? _1461 : (isnan(_1461) ? 0.0 : max(_1461, 0.0));
        float _1465 = isnan(0.0) ? _1462 : (isnan(_1462) ? 0.0 : max(_1462, 0.0));
        float _1466 = isnan(0.0) ? _1463 : (isnan(_1463) ? 0.0 : max(_1463, 0.0));
        float _1467 = _1431 * 0.5;
        float _1468 = _1441 * 0.5;
        float _1469 = _1451 * 0.5;
        float _1470 = dot(vec3(_1467, _1468, _1469), vec3(_1467, _1468, _1469));
        float _1475 = (_1470 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1470);
        float _1483 = (dot(vec3(_550, _551, _552), vec3(_1475 * _1467, _1475 * _1468, _1475 * _1469)) + 1.0) * 0.5;
        float _3992 = isnan(0.0) ? _1483 : (isnan(_1483) ? 0.0 : max(_1483, 0.0));
        float _1492 = sqrt(((_1468 * _1468) + (_1467 * _1467)) + (_1469 * _1469)) / (_1464 + 9.9999997473787516355514526367188e-06);
        float _4003 = isnan(0.0) ? _1492 : (isnan(_1492) ? 0.0 : max(_1492, 0.0));
        float _1493 = isnan(1.0) ? _4003 : (isnan(_4003) ? 1.0 : min(_4003, 1.0));
        float _1494 = _1493 * 2.0;
        float _1498 = (1.0 - _1493) / (_1493 + 1.0);
        float _4014 = isnan(0.0) ? _1498 : (isnan(_1498) ? 0.0 : max(_1498, 0.0));
        float _1499 = isnan(1.0) ? _4014 : (isnan(_4014) ? 1.0 : min(_4014, 1.0));
        float _1508 = ((((1.0 - _1499) * (_1494 + 2.0)) * exp2(log2(isnan(1.0) ? _3992 : (isnan(_3992) ? 1.0 : min(_3992, 1.0))) * (_1494 + 1.0))) + _1499) * _1464;
        float _1509 = _1432 * 0.5;
        float _1510 = _1442 * 0.5;
        float _1511 = _1452 * 0.5;
        float _1512 = dot(vec3(_1509, _1510, _1511), vec3(_1509, _1510, _1511));
        float _1517 = (_1512 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1512);
        float _1525 = (dot(vec3(_550, _551, _552), vec3(_1517 * _1509, _1517 * _1510, _1517 * _1511)) + 1.0) * 0.5;
        float _4025 = isnan(0.0) ? _1525 : (isnan(_1525) ? 0.0 : max(_1525, 0.0));
        float _1534 = sqrt(((_1510 * _1510) + (_1509 * _1509)) + (_1511 * _1511)) / (_1465 + 9.9999997473787516355514526367188e-06);
        float _4036 = isnan(0.0) ? _1534 : (isnan(_1534) ? 0.0 : max(_1534, 0.0));
        float _1535 = isnan(1.0) ? _4036 : (isnan(_4036) ? 1.0 : min(_4036, 1.0));
        float _1536 = _1535 * 2.0;
        float _1540 = (1.0 - _1535) / (_1535 + 1.0);
        float _4047 = isnan(0.0) ? _1540 : (isnan(_1540) ? 0.0 : max(_1540, 0.0));
        float _1541 = isnan(1.0) ? _4047 : (isnan(_4047) ? 1.0 : min(_4047, 1.0));
        float _1550 = ((((1.0 - _1541) * (_1536 + 2.0)) * exp2(log2(isnan(1.0) ? _4025 : (isnan(_4025) ? 1.0 : min(_4025, 1.0))) * (_1536 + 1.0))) + _1541) * _1465;
        float _1551 = _1433 * 0.5;
        float _1552 = _1443 * 0.5;
        float _1553 = _1453 * 0.5;
        float _1554 = dot(vec3(_1551, _1552, _1553), vec3(_1551, _1552, _1553));
        float _1559 = (_1554 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1554);
        float _1567 = (dot(vec3(_550, _551, _552), vec3(_1559 * _1551, _1559 * _1552, _1559 * _1553)) + 1.0) * 0.5;
        float _4058 = isnan(0.0) ? _1567 : (isnan(_1567) ? 0.0 : max(_1567, 0.0));
        float _1576 = sqrt(((_1552 * _1552) + (_1551 * _1551)) + (_1553 * _1553)) / (_1466 + 9.9999997473787516355514526367188e-06);
        float _4069 = isnan(0.0) ? _1576 : (isnan(_1576) ? 0.0 : max(_1576, 0.0));
        float _1577 = isnan(1.0) ? _4069 : (isnan(_4069) ? 1.0 : min(_4069, 1.0));
        float _1578 = _1577 * 2.0;
        float _1582 = (1.0 - _1577) / (_1577 + 1.0);
        float _4080 = isnan(0.0) ? _1582 : (isnan(_1582) ? 0.0 : max(_1582, 0.0));
        float _1583 = isnan(1.0) ? _4080 : (isnan(_4080) ? 1.0 : min(_4080, 1.0));
        float _1592 = ((((1.0 - _1583) * (_1578 + 2.0)) * exp2(log2(isnan(1.0) ? _4058 : (isnan(_4058) ? 1.0 : min(_4058, 1.0))) * (_1578 + 1.0))) + _1583) * _1466;
        _1600 = _1433;
        _1601 = _1432;
        _1602 = _1431;
        _1603 = _1443;
        _1604 = _1442;
        _1605 = _1441;
        _1606 = _1453;
        _1607 = _1452;
        _1608 = _1451;
        _1609 = _1466;
        _1610 = _1465;
        _1611 = _1464;
        _1612 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1508 : (isnan(_1508) ? 0.0 : max(_1508, 0.0)));
        _1613 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1550 : (isnan(_1550) ? 0.0 : max(_1550, 0.0)));
        _1614 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1592 : (isnan(_1592) ? 0.0 : max(_1592, 0.0)));
    }
    else
    {
        _1600 = _1291;
        _1601 = _1291;
        _1602 = _1291;
        _1603 = _1291;
        _1604 = _1291;
        _1605 = _1291;
        _1606 = _1291;
        _1607 = _1291;
        _1608 = _1291;
        _1609 = _1291;
        _1610 = _1291;
        _1611 = _1291;
        _1612 = 0.0;
        _1613 = 0.0;
        _1614 = 0.0;
    }
    float _1624 = (cbModelParam._m0[1u].x * (_1612 - _1303)) + _1303;
    float _1625 = (cbModelParam._m0[1u].x * (_1613 - _1304)) + _1304;
    float _1626 = (cbModelParam._m0[1u].x * (_1614 - _1305)) + _1305;
    float _1647 = fma(_1626, cbSceneParam._m0[89u].z, fma(_1625, cbSceneParam._m0[89u].y, _1624 * cbSceneParam._m0[89u].x));
    float _1650 = fma(_1626, cbSceneParam._m0[90u].z, fma(_1625, cbSceneParam._m0[90u].y, _1624 * cbSceneParam._m0[90u].x));
    float _1653 = fma(_1626, cbSceneParam._m0[91u].z, fma(_1625, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1624));
    float _1668 = _929 * 0.5;
    float _1669 = _930 * 0.5;
    float _1670 = _931 * 0.5;
    float _1671 = dot(vec4(_1668, _1669, _1670, 1.0), vec4(_1602, _1605, _1608, _1611));
    float _1674 = dot(vec4(_1668, _1669, _1670, 1.0), vec4(_1601, _1604, _1607, _1610));
    float _1677 = dot(vec4(_1668, _1669, _1670, 1.0), vec4(_1600, _1603, _1606, _1609));
    float _1708;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1684 = dot(vec4(_1668, _1669, _1670, 1.0), vec4(_1290, _1294, _1297, _1300));
        float _1688 = dot(vec4(_1668, _1669, _1670, 1.0), vec4(_1292, _1295, _1298, _1301));
        float _1692 = dot(vec4(_1668, _1669, _1670, 1.0), vec4(_1293, _1296, _1299, _1302));
        float _1699 = dot(vec4(cbModelParam._m0[39u]), vec4(_1668, _1669, _1670, 1.0));
        _1708 = dot(vec3(isnan(0.0) ? _1692 : (isnan(_1692) ? 0.0 : max(_1692, 0.0)), isnan(0.0) ? _1688 : (isnan(_1688) ? 0.0 : max(_1688, 0.0)), isnan(0.0) ? _1684 : (isnan(_1684) ? 0.0 : max(_1684, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1699) ? 0.0 : (isnan(0.0) ? _1699 : max(0.0, _1699))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1708 = 1.0;
    }
    float _1719;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1710 = dot(vec4(cbModelParam._m0[40u]), vec4(_1668, _1669, _1670, 1.0));
        _1719 = dot(vec3(isnan(0.0) ? _1671 : (isnan(_1671) ? 0.0 : max(_1671, 0.0)), isnan(0.0) ? _1674 : (isnan(_1674) ? 0.0 : max(_1674, 0.0)), isnan(0.0) ? _1677 : (isnan(_1677) ? 0.0 : max(_1677, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1710) ? 0.0 : (isnan(0.0) ? _1710 : max(0.0, _1710))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1719 = 1.0;
    }
    float _1723 = (_1719 * cbModelParam._m0[1u].x) + (_1708 * (1.0 - cbModelParam._m0[1u].x));
    float _1733 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _792);
    float _1734 = isnan(_1733) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1733 : min(cbModelParam._m0[25u].z, _1733));
    float _1814;
    float _1816;
    float _1818;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1781 = fma(_988, cbModelParam._m0[13u].z, fma(_984, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _980)) + cbModelParam._m0[13u].w;
        float _1785 = fma(_988, cbModelParam._m0[14u].z, fma(_984, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _980)) + cbModelParam._m0[14u].w;
        float _1789 = fma(_988, cbModelParam._m0[15u].z, fma(_984, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _980)) + cbModelParam._m0[15u].w;
        float _1792 = fma(_931, cbModelParam._m0[13u].z, fma(_930, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _929));
        float _1795 = fma(_931, cbModelParam._m0[14u].z, fma(_930, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _929));
        float _1798 = fma(_931, cbModelParam._m0[15u].z, fma(_930, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _929));
        float _1826;
        if (_1792 > 0.0)
        {
            _1826 = abs((1.0 - _1781) / _1792);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1792 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1781 + 1.0) / _1792);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1826 = frontier_phi_16_14_ladder;
        }
        float _2030;
        if (_1795 > 0.0)
        {
            _2030 = abs((1.0 - _1785) / _1795);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1795 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1785 + 1.0) / _1795);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2030 = frontier_phi_25_21_ladder;
        }
        float _2284;
        if (_1798 > 0.0)
        {
            _2284 = abs((1.0 - _1789) / _1798);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1798 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1789 + 1.0) / _1798);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2284 = frontier_phi_37_32_ladder;
        }
        float _2286 = isnan(_2030) ? _1826 : (isnan(_1826) ? _2030 : min(_1826, _2030));
        float _2287 = isnan(_2284) ? _2286 : (isnan(_2286) ? _2284 : min(_2286, _2284));
        float _2291 = (_2287 * _1792) + _1781;
        float _2292 = (_2287 * _1795) + _1785;
        float _2293 = (_2287 * _1798) + _1789;
        float _2294 = _2287 * 9.9999997473787516355514526367188e-05;
        float _2296 = (-1.0) - _2294;
        float _2298 = _2294 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_2293 > _2298) || ((_2293 < _2296) || ((_2292 > _2298) || ((_2292 < _2296) || ((_2291 < _2296) || (_2291 > _2298))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2421 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2293, cbModelParam._m0[9u].z, fma(_2292, cbModelParam._m0[9u].y, _2291 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2293, cbModelParam._m0[10u].z, fma(_2292, cbModelParam._m0[10u].y, _2291 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2293, cbModelParam._m0[11u].z, fma(_2292, cbModelParam._m0[11u].y, _2291 * cbModelParam._m0[11u].x))), _1734);
            frontier_phi_15_37_ladder = _2421.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2421.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2421.x * cbModelParam._m0[1u].y;
        }
        _1814 = frontier_phi_15_37_ladder_2;
        _1816 = frontier_phi_15_37_ladder_1;
        _1818 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1802 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_929, _930, _931), _1734);
        _1814 = _1802.x * cbModelParam._m0[1u].y;
        _1816 = _1802.y * cbModelParam._m0[1u].y;
        _1818 = _1802.z * cbModelParam._m0[1u].y;
    }
    float _1822 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _792);
    float _1823 = isnan(_1822) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1822 : min(cbModelParam._m0[25u].w, _1822));
    float _1914;
    float _1916;
    float _1918;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1878 = fma(_988, cbModelParam._m0[21u].z, fma(_984, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _980)) + cbModelParam._m0[21u].w;
        float _1882 = fma(_988, cbModelParam._m0[22u].z, fma(_984, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _980)) + cbModelParam._m0[22u].w;
        float _1886 = fma(_988, cbModelParam._m0[23u].z, fma(_984, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _980)) + cbModelParam._m0[23u].w;
        float _1889 = fma(_931, cbModelParam._m0[21u].z, fma(_930, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _929));
        float _1892 = fma(_931, cbModelParam._m0[22u].z, fma(_930, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _929));
        float _1895 = fma(_931, cbModelParam._m0[23u].z, fma(_930, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _929));
        float _2035;
        if (_1889 > 0.0)
        {
            _2035 = abs((1.0 - _1878) / _1889);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1889 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1878 + 1.0) / _1889);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _2035 = frontier_phi_27_23_ladder;
        }
        float _2311;
        if (_1892 > 0.0)
        {
            _2311 = abs((1.0 - _1882) / _1892);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1892 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1882 + 1.0) / _1892);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _2311 = frontier_phi_39_34_ladder;
        }
        float _2524;
        if (_1895 > 0.0)
        {
            _2524 = abs((1.0 - _1886) / _1895);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1895 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1886 + 1.0) / _1895);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _2524 = frontier_phi_48_45_ladder;
        }
        float _2526 = isnan(_2311) ? _2035 : (isnan(_2035) ? _2311 : min(_2035, _2311));
        float _2527 = isnan(_2524) ? _2526 : (isnan(_2526) ? _2524 : min(_2526, _2524));
        float _2531 = (_2527 * _1889) + _1878;
        float _2532 = (_2527 * _1892) + _1882;
        float _2533 = (_2527 * _1895) + _1886;
        float _2534 = _2527 * 9.9999997473787516355514526367188e-05;
        float _2535 = (-1.0) - _2534;
        float _2537 = _2534 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2533 > _2537) || ((_2533 < _2535) || ((_2532 > _2537) || ((_2532 < _2535) || ((_2531 < _2535) || (_2531 > _2537))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2767 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2533, cbModelParam._m0[17u].z, fma(_2532, cbModelParam._m0[17u].y, _2531 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2533, cbModelParam._m0[18u].z, fma(_2532, cbModelParam._m0[18u].y, _2531 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2533, cbModelParam._m0[19u].z, fma(_2532, cbModelParam._m0[19u].y, _2531 * cbModelParam._m0[19u].x))), _1823);
            frontier_phi_24_48_ladder = _2767.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2767.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2767.x * cbModelParam._m0[1u].z;
        }
        _1914 = frontier_phi_24_48_ladder_2;
        _1916 = frontier_phi_24_48_ladder_1;
        _1918 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1898 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_929, _930, _931), _1823);
        _1914 = _1898.x * cbModelParam._m0[1u].z;
        _1916 = _1898.y * cbModelParam._m0[1u].z;
        _1918 = _1898.z * cbModelParam._m0[1u].z;
    }
    float _1931 = (((_951 * _910) + _952) * _924) * ((cbModelParam._m0[1u].w * (_1914 - _1814)) + _1814);
    float _1933 = (((_951 * _911) + _952) * _924) * ((cbModelParam._m0[1u].w * (_1916 - _1816)) + _1816);
    float _1935 = (((_951 * _912) + _952) * _924) * ((cbModelParam._m0[1u].w * (_1918 - _1818)) + _1818);
    float _1938 = fma(_1935, cbSceneParam._m0[89u].z, fma(_1933, cbSceneParam._m0[89u].y, _1931 * cbSceneParam._m0[89u].x));
    float _1941 = fma(_1935, cbSceneParam._m0[90u].z, fma(_1933, cbSceneParam._m0[90u].y, _1931 * cbSceneParam._m0[90u].x));
    float _1944 = fma(_1935, cbSceneParam._m0[91u].z, fma(_1933, cbSceneParam._m0[91u].y, _1931 * cbSceneParam._m0[91u].x));
    uvec4 _1954 = floatBitsToUint(cbInstanceData._m0[_816 + 5u]);
    uint _1956 = _1954.x * 14u;
    uint _1957 = _1956 + 13u;
    float _1964 = _924 + (-1.0);
    float _1969 = (cbLight._m0[_1957].x * _1964) + 1.0;
    float _1970 = (cbLight._m0[_1957].y * _1964) + 1.0;
    float _1971 = (cbLight._m0[_1957].z * _1964) + 1.0;
    float _1972 = (cbLight._m0[_1957].w * _1964) + 1.0;
    uint _1973 = _1956 + 5u;
    float _1979 = isnan(1.0) ? _1970 : (isnan(_1970) ? 1.0 : min(_1970, 1.0));
    uint _1983 = _1956 + 4u;
    float _1989 = isnan(1.0) ? _1969 : (isnan(_1969) ? 1.0 : min(_1969, 1.0));
    uint _1993 = _1956 | 1u;
    float _2004 = dot(vec3(cbLight._m0[_1956].xyz), vec3(_550, _551, _552));
    float _2007 = dot(vec3(cbLight._m0[_1993].xyz), vec3(_550, _551, _552));
    float _4216 = isnan(0.0) ? _2004 : (isnan(_2004) ? 0.0 : max(_2004, 0.0));
    float _4227 = isnan(0.0) ? _2007 : (isnan(_2007) ? 0.0 : max(_2007, 0.0));
    float _2012 = (isnan(1.0) ? _4216 : (isnan(_4216) ? 1.0 : min(_4216, 1.0))) * 0.3183098733425140380859375;
    float _2014 = (isnan(1.0) ? _4227 : (isnan(_4227) ? 1.0 : min(_4227, 1.0))) * 0.3183098733425140380859375;
    float _2021 = ((cbLight._m0[_1973].x * _1979) * _2014) + ((cbLight._m0[_1983].x * _1989) * _2012);
    float _2022 = ((_1979 * cbLight._m0[_1973].y) * _2014) + ((_1989 * cbLight._m0[_1983].y) * _2012);
    float _2023 = ((_1979 * cbLight._m0[_1973].z) * _2014) + ((_1989 * cbLight._m0[_1983].z) * _2012);
    uvec4 _2027 = floatBitsToUint(cbLight._m0[_1956 + 12u]);
    bool _2029 = _2027.x == 0u;
    float _2040;
    float _2042;
    float _2044;
    if (_2029)
    {
        _2040 = _2021;
        _2042 = _2022;
        _2044 = _2023;
    }
    else
    {
        uint _2048 = _1956 + 6u;
        float _2064 = (dot(vec3(cbLight._m0[_1956 + 2u].xyz), vec3(_550, _551, _552)) * 0.5) + 0.5;
        float _2065 = _2064 * _2064;
        float _4238 = isnan(0.0) ? _2065 : (isnan(_2065) ? 0.0 : max(_2065, 0.0));
        float _2066 = isnan(1.0) ? _4238 : (isnan(_4238) ? 1.0 : min(_4238, 1.0));
        float _2067 = isnan(1.0) ? _1971 : (isnan(_1971) ? 1.0 : min(_1971, 1.0));
        _2040 = (((cbLight._m0[_2048].x * 0.3183098733425140380859375) * _2066) * _2067) + _2021;
        _2042 = (((cbLight._m0[_2048].y * 0.3183098733425140380859375) * _2066) * _2067) + _2022;
        _2044 = (((cbLight._m0[_2048].z * 0.3183098733425140380859375) * _2066) * _2067) + _2023;
    }
    bool _2047 = _2027.y == 0u;
    float _2085;
    float _2087;
    float _2089;
    if (_2047)
    {
        _2085 = _2040;
        _2087 = _2042;
        _2089 = _2044;
    }
    else
    {
        uint _2255 = _1956 + 7u;
        float _2271 = (dot(vec3(cbLight._m0[_1956 + 3u].xyz), vec3(_550, _551, _552)) * 0.5) + 0.5;
        float _2272 = _2271 * _2271;
        float _4254 = isnan(0.0) ? _2272 : (isnan(_2272) ? 0.0 : max(_2272, 0.0));
        float _2273 = isnan(1.0) ? _4254 : (isnan(_4254) ? 1.0 : min(_4254, 1.0));
        float _2274 = isnan(1.0) ? _1972 : (isnan(_1972) ? 1.0 : min(_1972, 1.0));
        _2085 = (((cbLight._m0[_2255].x * 0.3183098733425140380859375) * _2273) * _2274) + _2040;
        _2087 = (((cbLight._m0[_2255].y * 0.3183098733425140380859375) * _2273) * _2274) + _2042;
        _2089 = (((cbLight._m0[_2255].z * 0.3183098733425140380859375) * _2273) * _2274) + _2044;
    }
    uint _2092 = _1956 + 8u;
    float _2105 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1956].w)) * _792) * 0.949999988079071044921875);
    float _2106 = _2105 * _2105;
    float _2107 = cbLight._m0[_1956].x + _576;
    float _2108 = cbLight._m0[_1956].y + _577;
    float _2109 = cbLight._m0[_1956].z + _578;
    float _2113 = inversesqrt(dot(vec3(_2107, _2108, _2109), vec3(_2107, _2108, _2109)));
    float _2114 = _2113 * _2107;
    float _2115 = _2113 * _2108;
    float _2116 = _2113 * _2109;
    float _2117 = dot(vec3(_550, _551, _552), vec3(cbLight._m0[_1956].xyz));
    float _4270 = isnan(0.0) ? _2117 : (isnan(_2117) ? 0.0 : max(_2117, 0.0));
    float _2120 = isnan(1.0) ? _4270 : (isnan(_4270) ? 1.0 : min(_4270, 1.0));
    float _4281 = isnan(0.0) ? _579 : (isnan(_579) ? 0.0 : max(_579, 0.0));
    float _2121 = isnan(1.0) ? _4281 : (isnan(_4281) ? 1.0 : min(_4281, 1.0));
    float _2122 = dot(vec3(_550, _551, _552), vec3(_2114, _2115, _2116));
    float _4292 = isnan(0.0) ? _2122 : (isnan(_2122) ? 0.0 : max(_2122, 0.0));
    float _2125 = isnan(1.0) ? _4292 : (isnan(_4292) ? 1.0 : min(_4292, 1.0));
    float _2126 = dot(vec3(cbLight._m0[_1956].xyz), vec3(_2114, _2115, _2116));
    float _4303 = isnan(0.0) ? _2126 : (isnan(_2126) ? 0.0 : max(_2126, 0.0));
    float _2130 = _2106 * _2106;
    float _2134 = ((_2125 * _2125) * (_2130 + (-1.0))) + 1.0;
    float _2142 = exp2(log2(1.0 - (isnan(1.0) ? _4303 : (isnan(_4303) ? 1.0 : min(_4303, 1.0)))) * 5.0);
    float _2143 = 0.959999978542327880859375 - _907;
    float _2145 = 0.959999978542327880859375 - _908;
    float _2146 = 0.959999978542327880859375 - _909;
    float _2153 = 1.0 - _2106;
    float _2164 = (0.5 / (((_2121 * ((_2120 * _2153) + _2106)) + 9.9999999392252902907785028219223e-09) + (((_2121 * _2153) + _2106) * _2120))) * _2120;
    float _4314 = isnan(0.0) ? _2164 : (isnan(_2164) ? 0.0 : max(_2164, 0.0));
    float _2166 = (isnan(1.0) ? _4314 : (isnan(_4314) ? 1.0 : min(_4314, 1.0))) * (_2130 / ((_2134 * _2134) * 3.141590118408203125));
    uint _2177 = _1956 + 9u;
    float _2188 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1993].w)) * _792) * 0.949999988079071044921875);
    float _2189 = _2188 * _2188;
    float _2190 = cbLight._m0[_1993].x + _576;
    float _2191 = cbLight._m0[_1993].y + _577;
    float _2192 = cbLight._m0[_1993].z + _578;
    float _2196 = inversesqrt(dot(vec3(_2190, _2191, _2192), vec3(_2190, _2191, _2192)));
    float _2197 = _2196 * _2190;
    float _2198 = _2196 * _2191;
    float _2199 = _2196 * _2192;
    float _2200 = dot(vec3(_550, _551, _552), vec3(cbLight._m0[_1993].xyz));
    float _4325 = isnan(0.0) ? _2200 : (isnan(_2200) ? 0.0 : max(_2200, 0.0));
    float _2203 = isnan(1.0) ? _4325 : (isnan(_4325) ? 1.0 : min(_4325, 1.0));
    float _2204 = dot(vec3(_550, _551, _552), vec3(_2197, _2198, _2199));
    float _4336 = isnan(0.0) ? _2204 : (isnan(_2204) ? 0.0 : max(_2204, 0.0));
    float _2207 = isnan(1.0) ? _4336 : (isnan(_4336) ? 1.0 : min(_4336, 1.0));
    float _2208 = dot(vec3(cbLight._m0[_1993].xyz), vec3(_2197, _2198, _2199));
    float _4347 = isnan(0.0) ? _2208 : (isnan(_2208) ? 0.0 : max(_2208, 0.0));
    float _2212 = _2189 * _2189;
    float _2216 = ((_2207 * _2207) * (_2212 + (-1.0))) + 1.0;
    float _2223 = exp2(log2(1.0 - (isnan(1.0) ? _4347 : (isnan(_4347) ? 1.0 : min(_4347, 1.0)))) * 5.0);
    float _2230 = 1.0 - _2189;
    float _2240 = (0.5 / (((_2121 * ((_2203 * _2230) + _2189)) + 9.9999999392252902907785028219223e-09) + (((_2121 * _2230) + _2189) * _2203))) * _2203;
    float _4358 = isnan(0.0) ? _2240 : (isnan(_2240) ? 0.0 : max(_2240, 0.0));
    float _2242 = (isnan(1.0) ? _4358 : (isnan(_4358) ? 1.0 : min(_4358, 1.0))) * (_2212 / ((_2216 * _2216) * 3.141590118408203125));
    float _2252 = (((((_2223 * _2143) + _910) * cbLight._m0[_2177].x) * _2242) * _1979) + (((((_2142 * _2143) + _910) * cbLight._m0[_2092].x) * _2166) * _1989);
    float _2253 = (((((_2223 * _2145) + _911) * cbLight._m0[_2177].y) * _2242) * _1979) + (((((_2142 * _2145) + _911) * cbLight._m0[_2092].y) * _2166) * _1989);
    float _2254 = (((((_2223 * _2146) + _912) * cbLight._m0[_2177].z) * _2242) * _1979) + (((((_2142 * _2146) + _912) * cbLight._m0[_2092].z) * _2166) * _1989);
    float _2316;
    float _2318;
    float _2320;
    if (_2029)
    {
        _2316 = _2252;
        _2318 = _2253;
        _2320 = _2254;
    }
    else
    {
        uint _2322 = _1956 + 2u;
        uint _2326 = _1956 + 10u;
        float _2340 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2322].w)) * _792) * 0.949999988079071044921875);
        float _2341 = _2340 * _2340;
        float _2342 = cbLight._m0[_2322].x + _576;
        float _2343 = cbLight._m0[_2322].y + _577;
        float _2344 = cbLight._m0[_2322].z + _578;
        float _2348 = inversesqrt(dot(vec3(_2342, _2343, _2344), vec3(_2342, _2343, _2344)));
        float _2349 = _2348 * _2342;
        float _2350 = _2348 * _2343;
        float _2351 = _2348 * _2344;
        float _2352 = dot(vec3(_550, _551, _552), vec3(cbLight._m0[_2322].xyz));
        float _4369 = isnan(0.0) ? _2352 : (isnan(_2352) ? 0.0 : max(_2352, 0.0));
        float _2355 = isnan(1.0) ? _4369 : (isnan(_4369) ? 1.0 : min(_4369, 1.0));
        float _2356 = dot(vec3(_550, _551, _552), vec3(_2349, _2350, _2351));
        float _4380 = isnan(0.0) ? _2356 : (isnan(_2356) ? 0.0 : max(_2356, 0.0));
        float _2359 = isnan(1.0) ? _4380 : (isnan(_4380) ? 1.0 : min(_4380, 1.0));
        float _2360 = dot(vec3(cbLight._m0[_2322].xyz), vec3(_2349, _2350, _2351));
        float _4391 = isnan(0.0) ? _2360 : (isnan(_2360) ? 0.0 : max(_2360, 0.0));
        float _2364 = _2341 * _2341;
        float _2368 = ((_2359 * _2359) * (_2364 + (-1.0))) + 1.0;
        float _2375 = exp2(log2(1.0 - (isnan(1.0) ? _4391 : (isnan(_4391) ? 1.0 : min(_4391, 1.0)))) * 5.0);
        float _2382 = 1.0 - _2341;
        float _2392 = (0.5 / (((_2121 * ((_2355 * _2382) + _2341)) + 9.9999999392252902907785028219223e-09) + (((_2121 * _2382) + _2341) * _2355))) * _2355;
        float _4402 = isnan(0.0) ? _2392 : (isnan(_2392) ? 0.0 : max(_2392, 0.0));
        float _2394 = (isnan(1.0) ? _4402 : (isnan(_4402) ? 1.0 : min(_4402, 1.0))) * (_2364 / ((_2368 * _2368) * 3.141590118408203125));
        float _2395 = isnan(1.0) ? _1971 : (isnan(_1971) ? 1.0 : min(_1971, 1.0));
        _2316 = (((((_2375 * _2143) + _910) * cbLight._m0[_2326].x) * _2394) * _2395) + _2252;
        _2318 = (((((_2375 * _2145) + _911) * cbLight._m0[_2326].y) * _2394) * _2395) + _2253;
        _2320 = (((((_2375 * _2146) + _912) * cbLight._m0[_2326].z) * _2394) * _2395) + _2254;
    }
    float _2430;
    float _2432;
    float _2434;
    if (_2047)
    {
        _2430 = _2316;
        _2432 = _2318;
        _2434 = _2320;
    }
    else
    {
        uint _2441 = _1956 + 3u;
        uint _2445 = _1956 + 11u;
        float _2459 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2441].w)) * _792) * 0.949999988079071044921875);
        float _2460 = _2459 * _2459;
        float _2461 = cbLight._m0[_2441].x + _576;
        float _2462 = cbLight._m0[_2441].y + _577;
        float _2463 = cbLight._m0[_2441].z + _578;
        float _2467 = inversesqrt(dot(vec3(_2461, _2462, _2463), vec3(_2461, _2462, _2463)));
        float _2468 = _2467 * _2461;
        float _2469 = _2467 * _2462;
        float _2470 = _2467 * _2463;
        float _2471 = dot(vec3(_550, _551, _552), vec3(cbLight._m0[_2441].xyz));
        float _4418 = isnan(0.0) ? _2471 : (isnan(_2471) ? 0.0 : max(_2471, 0.0));
        float _2474 = isnan(1.0) ? _4418 : (isnan(_4418) ? 1.0 : min(_4418, 1.0));
        float _2475 = dot(vec3(_550, _551, _552), vec3(_2468, _2469, _2470));
        float _4429 = isnan(0.0) ? _2475 : (isnan(_2475) ? 0.0 : max(_2475, 0.0));
        float _2478 = isnan(1.0) ? _4429 : (isnan(_4429) ? 1.0 : min(_4429, 1.0));
        float _2479 = dot(vec3(cbLight._m0[_2441].xyz), vec3(_2468, _2469, _2470));
        float _4440 = isnan(0.0) ? _2479 : (isnan(_2479) ? 0.0 : max(_2479, 0.0));
        float _2483 = _2460 * _2460;
        float _2487 = ((_2478 * _2478) * (_2483 + (-1.0))) + 1.0;
        float _2494 = exp2(log2(1.0 - (isnan(1.0) ? _4440 : (isnan(_4440) ? 1.0 : min(_4440, 1.0)))) * 5.0);
        float _2501 = 1.0 - _2460;
        float _2511 = (0.5 / (((_2121 * ((_2474 * _2501) + _2460)) + 9.9999999392252902907785028219223e-09) + (((_2121 * _2501) + _2460) * _2474))) * _2474;
        float _4451 = isnan(0.0) ? _2511 : (isnan(_2511) ? 0.0 : max(_2511, 0.0));
        float _2513 = (isnan(1.0) ? _4451 : (isnan(_4451) ? 1.0 : min(_4451, 1.0))) * (_2483 / ((_2487 * _2487) * 3.141590118408203125));
        float _2514 = isnan(1.0) ? _1972 : (isnan(_1972) ? 1.0 : min(_1972, 1.0));
        _2430 = (((((_2494 * _2143) + _910) * cbLight._m0[_2445].x) * _2513) * _2514) + _2316;
        _2432 = (((((_2494 * _2145) + _911) * cbLight._m0[_2445].y) * _2513) * _2514) + _2318;
        _2434 = (((((_2494 * _2146) + _912) * cbLight._m0[_2445].z) * _2513) * _2514) + _2320;
    }
    float _2648;
    float _2650;
    float _2652;
    float _2654;
    float _2656;
    float _2658;
    if (_1954.y == 0u)
    {
        float _2589 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2590 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2589;
        float _2591 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2589;
        float _2592 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2589;
        uvec4 _2604 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2605 = _2604.x;
        uint _2616 = uint((float(_2604.y) * floor(float(uint(cbSceneParam._m0[85u].y * _714) / _2605))) + floor(float(uint(cbSceneParam._m0[85u].x * _713) / _2605)));
        float _2626 = (log2(_2592 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2627 = isnan(0.0) ? _2626 : (isnan(_2626) ? 0.0 : max(_2626, 0.0));
        uint _2630 = uint(isnan(14.0) ? _2627 : (isnan(_2627) ? 14.0 : min(_2627, 14.0)));
        uvec4 _2635 = texelFetch(g_lightClusterGridBuffer, int(((_2630 << 2u) + (_2616 << 6u)) >> 2u));
        uint _2636 = _2635.x;
        uint _2637 = _2604.z;
        float _2772;
        float _2774;
        float _2776;
        float _2778;
        float _2780;
        float _2782;
        if (((((1u << ((_2637 >> 4u) & 15u)) + 4294967295u) & _2636) == 0u) || ((_2637 & 240u) == 0u))
        {
            _2772 = 0.0;
            _2774 = 0.0;
            _2776 = 0.0;
            _2778 = 0.0;
            _2780 = 0.0;
            _2782 = 0.0;
        }
        else
        {
            float _2773;
            float _2775;
            float _2777;
            float _2779;
            float _2781;
            float _2783;
            float _2925 = 0.0;
            float _2926 = 0.0;
            float _2927 = 0.0;
            float _2928 = 0.0;
            float _2929 = 0.0;
            float _2930 = 0.0;
            uint _2931 = 0u;
            uint _2940;
            bool _2941;
            for (;;)
            {
                _2940 = texelFetch(g_lightClassification, int((((_2630 << 5u) + (_2616 << 9u)) + (_2931 << 2u)) >> 2u)).x;
                _2941 = _2940 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2941)
                {
                    frontier_phi_63_pred = _2930;
                    frontier_phi_63_pred_1 = _2929;
                    frontier_phi_63_pred_2 = _2928;
                    frontier_phi_63_pred_3 = _2927;
                    frontier_phi_63_pred_4 = _2926;
                    frontier_phi_63_pred_5 = _2925;
                }
                else
                {
                    float _3049;
                    float _3050;
                    float _3051;
                    float _3052;
                    float _3053;
                    float _3054;
                    uint _3055;
                    _3049 = _2925;
                    _3050 = _2926;
                    _3051 = _2927;
                    _3052 = _2928;
                    _3053 = _2929;
                    _3054 = _2930;
                    _3055 = _2940;
                    float _2981;
                    float _2982;
                    float _2983;
                    float _2984;
                    float _2985;
                    float _2986;
                    for (;;)
                    {
                        uint _3059 = uint(findLSB(_3055)) + (_2931 << 5u);
                        uint _3056 = (_3055 + 4294967295u) & _3055;
                        uint _3061 = _3059 * 48u;
                        vec4 _3075 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3061)).x, texelFetch(g_PointLightRenderingBuffer, int(_3061 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3061 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3061 + 3u)).x));
                        uint _3081 = (_3059 * 48u) + 4u;
                        vec4 _3094 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3081)).x, texelFetch(g_PointLightRenderingBuffer, int(_3081 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3081 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3081 + 3u)).x));
                        uint _3100 = (_3059 * 48u) + 8u;
                        vec3 _3111 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3100)).x, texelFetch(g_PointLightRenderingBuffer, int(_3100 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3100 + 2u)).x));
                        float _3115 = _3075.x - _2590;
                        float _3116 = _3075.y - _2591;
                        float _3117 = _3075.z - _2592;
                        float _3118 = dot(vec3(_3115, _3116, _3117), vec3(_3115, _3116, _3117));
                        float _3121 = inversesqrt(_3118);
                        float _3122 = _3121 * _3115;
                        float _3123 = _3121 * _3116;
                        float _3124 = _3121 * _3117;
                        float _3125 = dot(vec3(_737, _740, _743), vec3(_3122, _3123, _3124));
                        float _3130 = 1.0 - (_3118 * _3075.w);
                        float _4477 = isnan(0.0) ? _3130 : (isnan(_3130) ? 0.0 : max(_3130, 0.0));
                        float _3131 = isnan(1.0) ? _4477 : (isnan(_4477) ? 1.0 : min(_4477, 1.0));
                        float _3132 = sqrt(_3118) * _3094.w;
                        float _3135 = 1.39999997615814208984375 / (_3132 + 1.39999997615814208984375);
                        float _3136 = _3135 * _3135;
                        float _3139 = ((1.0 - _3136) * _3125) + _3136;
                        float _3142 = _3132 * _3132;
                        float _3145 = ((isnan(0.0) ? _3139 : (isnan(_3139) ? 0.0 : max(_3139, 0.0))) * _3131) / ((_3142 * 0.699999988079071044921875) + 1.0);
                        float _3149 = (-0.0) - _2590;
                        float _3150 = (-0.0) - _2591;
                        float _3151 = (-0.0) - _2592;
                        float _3155 = inversesqrt(dot(vec3(_3149, _3150, _3151), vec3(_3149, _3150, _3151)));
                        float _3156 = _3155 * _3149;
                        float _3157 = _3155 * _3150;
                        float _3158 = _3155 * _3151;
                        float _3166 = exp2(log2(1.0 / ((_3142 * 3.5) + 5.0)) * 0.25);
                        float _3167 = 1.0 - _934;
                        float _3174 = sqrt(1.0 - ((1.0 - (_3167 * _3167)) * (1.0 - (_3166 * _3166))));
                        float _3175 = _3174 * _3174;
                        float _3176 = _3175 * _3175;
                        float _3177 = _3156 + _3122;
                        float _3178 = _3157 + _3123;
                        float _3179 = _3158 + _3124;
                        float _3183 = inversesqrt(dot(vec3(_3177, _3178, _3179), vec3(_3177, _3178, _3179)));
                        float _3187 = dot(vec3(_737, _740, _743), vec3(_3156, _3157, _3158));
                        float _4493 = isnan(0.0) ? _3187 : (isnan(_3187) ? 0.0 : max(_3187, 0.0));
                        float _3190 = isnan(1.0) ? _4493 : (isnan(_4493) ? 1.0 : min(_4493, 1.0));
                        float _3191 = dot(vec3(_737, _740, _743), vec3(_3183 * _3177, _3183 * _3178, _3183 * _3179));
                        float _4504 = isnan(0.0) ? _3191 : (isnan(_3191) ? 0.0 : max(_3191, 0.0));
                        float _3194 = isnan(1.0) ? _4504 : (isnan(_4504) ? 1.0 : min(_4504, 1.0));
                        float _3198 = ((_3194 * _3194) * (_3176 + (-1.0))) + 1.0;
                        float _3199 = _3135 * _3175;
                        float _3200 = _3199 * _3199;
                        float _3203 = ((1.0 - _3200) * _3125) + _3200;
                        float _4515 = isnan(0.0) ? _3203 : (isnan(_3203) ? 0.0 : max(_3203, 0.0));
                        float _3204 = isnan(1.0) ? _4515 : (isnan(_4515) ? 1.0 : min(_4515, 1.0));
                        float _3205 = 1.0 - _3175;
                        float _3215 = (0.5 / (((_3204 * ((_3190 * _3205) + _3175)) + 9.9999999392252902907785028219223e-09) + (((_3204 * _3205) + _3175) * _3190))) * _3204;
                        float _4526 = isnan(0.0) ? _3215 : (isnan(_3215) ? 0.0 : max(_3215, 0.0));
                        float _3226 = (((_3176 * 3.1415927410125732421875) * (isnan(1.0) ? _4526 : (isnan(_4526) ? 1.0 : min(_4526, 1.0)))) / ((_3198 * _3198) * ((_3142 * 2.1991131305694580078125) + 3.141590118408203125))) * _3131;
                        _2984 = (_3145 * _3094.x) + _3052;
                        _2985 = (_3145 * _3094.y) + _3053;
                        _2986 = (_3145 * _3094.z) + _3054;
                        _2981 = (_3226 * _3111.x) + _3049;
                        _2982 = (_3226 * _3111.y) + _3050;
                        _2983 = (_3226 * _3111.z) + _3051;
                        if (_3056 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3049 = _2981;
                            _3050 = _2982;
                            _3051 = _2983;
                            _3052 = _2984;
                            _3053 = _2985;
                            _3054 = _2986;
                            _3055 = _3056;
                        }
                    }
                    frontier_phi_63_pred = _2986;
                    frontier_phi_63_pred_1 = _2985;
                    frontier_phi_63_pred_2 = _2984;
                    frontier_phi_63_pred_3 = _2983;
                    frontier_phi_63_pred_4 = _2982;
                    frontier_phi_63_pred_5 = _2981;
                }
                _2783 = frontier_phi_63_pred;
                _2781 = frontier_phi_63_pred_1;
                _2779 = frontier_phi_63_pred_2;
                _2777 = frontier_phi_63_pred_3;
                _2775 = frontier_phi_63_pred_4;
                _2773 = frontier_phi_63_pred_5;
                uint _2932 = _2931 + 1u;
                if (_2932 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2925 = _2773;
                    _2926 = _2775;
                    _2927 = _2777;
                    _2928 = _2779;
                    _2929 = _2781;
                    _2930 = _2783;
                    _2931 = _2932;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2772 = _2773;
            _2774 = _2775;
            _2776 = _2777;
            _2778 = _2779;
            _2780 = _2781;
            _2782 = _2783;
        }
        uvec4 _2786 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2787 = _2786.z;
        uint _2789 = (_2787 >> 8u) & 15u;
        float _2893;
        float _2895;
        float _2897;
        float _2899;
        float _2901;
        float _2903;
        if (((4294967295u << _2789) & _2636) == 0u)
        {
            _2893 = _2772;
            _2895 = _2774;
            _2897 = _2776;
            _2899 = _2778;
            _2901 = _2780;
            _2903 = _2782;
        }
        else
        {
            float _2918 = inversesqrt(dot(vec3(_2590, _2591, _2592), vec3(_2590, _2591, _2592)));
            float _2919 = _2918 * _2590;
            float _2920 = _2918 * _2591;
            float _2921 = _2918 * _2592;
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2789 < ((_2787 >> 12u) & 15u))
            {
                float _2894;
                float _2896;
                float _2898;
                float _2900;
                float _2902;
                float _2904;
                float _3032 = _2772;
                float _3033 = _2774;
                float _3034 = _2776;
                float _3035 = _2778;
                float _3036 = _2780;
                float _3037 = _2782;
                uint _3038 = _2789;
                uint _3047;
                bool _3048;
                for (;;)
                {
                    _3047 = texelFetch(g_lightClassification, int((((_2630 << 5u) + (_2616 << 9u)) + (_3038 << 2u)) >> 2u)).x;
                    _3048 = _3047 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_3048)
                    {
                        frontier_phi_69_pred = _3037;
                        frontier_phi_69_pred_1 = _3036;
                        frontier_phi_69_pred_2 = _3035;
                        frontier_phi_69_pred_3 = _3034;
                        frontier_phi_69_pred_4 = _3033;
                        frontier_phi_69_pred_5 = _3032;
                    }
                    else
                    {
                        float _3231;
                        float _3232;
                        float _3233;
                        float _3234;
                        float _3235;
                        float _3236;
                        float _3526;
                        float _3527;
                        float _3528;
                        float _3529;
                        float _3530;
                        float _3531;
                        float _3244 = _3032;
                        float _3245 = _3033;
                        float _3246 = _3034;
                        float _3247 = _3035;
                        float _3248 = _3036;
                        float _3249 = _3037;
                        uint _3250 = _3047;
                        uint _3251;
                        vec4 _3276;
                        float _3277;
                        vec4 _3292;
                        vec3 _3304;
                        vec4 _3319;
                        vec4 _3335;
                        float _3382;
                        bool _3383;
                        for (;;)
                        {
                            uint _3261 = ((_3038 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3250));
                            _3251 = (_3250 + 4294967295u) & _3250;
                            uint _3263 = _3261 * 40u;
                            _3276 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3263)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3263 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3263 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3263 + 3u)).x));
                            _3277 = _3276.w;
                            uint _3279 = (_3261 * 40u) + 4u;
                            _3292 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3279)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3279 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3279 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3279 + 3u)).x));
                            uint _3294 = (_3261 * 40u) + 8u;
                            _3304 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3294)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3294 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3294 + 2u)).x));
                            uint _3306 = (_3261 * 40u) + 16u;
                            _3319 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3306)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3306 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3306 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3306 + 3u)).x));
                            uint _3322 = (_3261 * 40u) + 20u;
                            _3335 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3322)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3322 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3322 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3322 + 3u)).x));
                            uint _3338 = (_3261 * 40u) + 24u;
                            vec4 _3351 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3338)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3338 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3338 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3338 + 3u)).x));
                            uint _3357 = (_3261 * 40u) + 28u;
                            vec4 _3370 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3357)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3357 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3357 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3357 + 3u)).x));
                            _3382 = fma(_2592, _3370.z, fma(_2591, _3370.y, _3370.x * _2590)) + _3370.w;
                            _3383 = !((fma(_2592, _3351.z, fma(_2591, _3351.y, _3351.x * _2590)) + _3351.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_3383)
                            {
                                float _3410 = _3276.x - _2590;
                                float _3411 = _3276.y - _2591;
                                float _3412 = _3276.z - _2592;
                                float _3413 = dot(vec3(_3410, _3411, _3412), vec3(_3410, _3411, _3412));
                                float _3416 = inversesqrt(_3413);
                                float _3417 = _3416 * _3410;
                                float _3418 = _3416 * _3411;
                                float _3419 = _3416 * _3412;
                                float _3423 = 1.0 - (_3413 / (_3277 * _3277));
                                float _4537 = isnan(0.0) ? _3423 : (isnan(_3423) ? 0.0 : max(_3423, 0.0));
                                float _3424 = isnan(1.0) ? _4537 : (isnan(_4537) ? 1.0 : min(_4537, 1.0));
                                float _3428 = sqrt(_3413) * _3292.w;
                                float _3430 = 1.39999997615814208984375 / (_3428 + 1.39999997615814208984375);
                                float _3431 = _3430 * _3430;
                                float _3434 = ((1.0 - _3431) * dot(vec3(_3417, _3418, _3419), vec3(_737, _740, _743))) + _3431;
                                float _3437 = _3428 * _3428;
                                float _3441 = (fma(_2592, _3319.z, fma(_2591, _3319.y, _3319.x * _2590)) + _3319.w) / _3382;
                                float _3442 = (fma(_2592, _3335.z, fma(_2591, _3335.y, _3335.x * _2590)) + _3335.w) / _3382;
                                float _3446 = 1.0 - dot(vec2(_3441, _3442), vec2(_3441, _3442));
                                float _4553 = isnan(0.0) ? _3446 : (isnan(_3446) ? 0.0 : max(_3446, 0.0));
                                float _3447 = isnan(1.0) ? _4553 : (isnan(_4553) ? 1.0 : min(_4553, 1.0));
                                float _3448 = _3447 * (((isnan(0.0) ? _3434 : (isnan(_3434) ? 0.0 : max(_3434, 0.0))) * _3424) / ((_3437 * 0.699999988079071044921875) + 1.0));
                                float _3460 = exp2(log2(1.0 / ((_3437 * 3.5) + 5.0)) * 0.25);
                                float _3461 = 1.0 - _934;
                                float _3468 = sqrt(1.0 - ((1.0 - (_3461 * _3461)) * (1.0 - (_3460 * _3460))));
                                float _3469 = _3468 * _3468;
                                float _3470 = _3469 * _3469;
                                float _3471 = _3417 - _2919;
                                float _3472 = _3418 - _2920;
                                float _3473 = _3419 - _2921;
                                float _3477 = inversesqrt(dot(vec3(_3471, _3472, _3473), vec3(_3471, _3472, _3473)));
                                float _3481 = dot(vec3(_737, _740, _743), vec3((-0.0) - _2919, (-0.0) - _2920, (-0.0) - _2921));
                                float _4564 = isnan(0.0) ? _3481 : (isnan(_3481) ? 0.0 : max(_3481, 0.0));
                                float _3484 = isnan(1.0) ? _4564 : (isnan(_4564) ? 1.0 : min(_4564, 1.0));
                                float _3485 = dot(vec3(_737, _740, _743), vec3(_3477 * _3471, _3477 * _3472, _3477 * _3473));
                                float _4575 = isnan(0.0) ? _3485 : (isnan(_3485) ? 0.0 : max(_3485, 0.0));
                                float _3488 = isnan(1.0) ? _4575 : (isnan(_4575) ? 1.0 : min(_4575, 1.0));
                                float _3492 = ((_3488 * _3488) * (_3470 + (-1.0))) + 1.0;
                                float _3493 = _3430 * _3469;
                                float _3494 = _3493 * _3493;
                                float _3500 = ((1.0 - _3494) * dot(vec3(_737, _740, _743), vec3(_3417, _3418, _3419))) + _3494;
                                float _4586 = isnan(0.0) ? _3500 : (isnan(_3500) ? 0.0 : max(_3500, 0.0));
                                float _3501 = isnan(1.0) ? _4586 : (isnan(_4586) ? 1.0 : min(_4586, 1.0));
                                float _3502 = 1.0 - _3469;
                                float _3512 = (0.5 / (((_3501 * ((_3484 * _3502) + _3469)) + 9.9999999392252902907785028219223e-09) + (((_3501 * _3502) + _3469) * _3484))) * _3501;
                                float _4597 = isnan(0.0) ? _3512 : (isnan(_3512) ? 0.0 : max(_3512, 0.0));
                                float _3522 = (_3447 * _3424) * (((_3470 * 3.1415927410125732421875) * (isnan(1.0) ? _4597 : (isnan(_4597) ? 1.0 : min(_4597, 1.0)))) / ((_3492 * _3492) * ((_3437 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_75_pred = _3448 * _3292.z;
                                frontier_phi_75_pred_1 = _3448 * _3292.y;
                                frontier_phi_75_pred_2 = _3448 * _3292.x;
                                frontier_phi_75_pred_3 = _3522 * _3304.z;
                                frontier_phi_75_pred_4 = _3522 * _3304.y;
                                frontier_phi_75_pred_5 = _3522 * _3304.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _3531 = frontier_phi_75_pred;
                            _3530 = frontier_phi_75_pred_1;
                            _3529 = frontier_phi_75_pred_2;
                            _3528 = frontier_phi_75_pred_3;
                            _3527 = frontier_phi_75_pred_4;
                            _3526 = frontier_phi_75_pred_5;
                            _3234 = _3529 + _3247;
                            _3235 = _3530 + _3248;
                            _3236 = _3531 + _3249;
                            _3231 = _3526 + _3244;
                            _3232 = _3527 + _3245;
                            _3233 = _3528 + _3246;
                            if (_3251 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3244 = _3231;
                                _3245 = _3232;
                                _3246 = _3233;
                                _3247 = _3234;
                                _3248 = _3235;
                                _3249 = _3236;
                                _3250 = _3251;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _3236;
                        frontier_phi_69_pred_1 = _3235;
                        frontier_phi_69_pred_2 = _3234;
                        frontier_phi_69_pred_3 = _3233;
                        frontier_phi_69_pred_4 = _3232;
                        frontier_phi_69_pred_5 = _3231;
                    }
                    _2904 = frontier_phi_69_pred;
                    _2902 = frontier_phi_69_pred_1;
                    _2900 = frontier_phi_69_pred_2;
                    _2898 = frontier_phi_69_pred_3;
                    _2896 = frontier_phi_69_pred_4;
                    _2894 = frontier_phi_69_pred_5;
                    uint _3039 = _3038 + 1u;
                    if (_3039 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3032 = _2894;
                        _3033 = _2896;
                        _3034 = _2898;
                        _3035 = _2900;
                        _3036 = _2902;
                        _3037 = _2904;
                        _3038 = _3039;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2904;
                frontier_phi_57_58_ladder_1 = _2902;
                frontier_phi_57_58_ladder_2 = _2900;
                frontier_phi_57_58_ladder_3 = _2898;
                frontier_phi_57_58_ladder_4 = _2896;
                frontier_phi_57_58_ladder_5 = _2894;
            }
            else
            {
                frontier_phi_57_58_ladder = _2782;
                frontier_phi_57_58_ladder_1 = _2780;
                frontier_phi_57_58_ladder_2 = _2778;
                frontier_phi_57_58_ladder_3 = _2776;
                frontier_phi_57_58_ladder_4 = _2774;
                frontier_phi_57_58_ladder_5 = _2772;
            }
            _2893 = frontier_phi_57_58_ladder_5;
            _2895 = frontier_phi_57_58_ladder_4;
            _2897 = frontier_phi_57_58_ladder_3;
            _2899 = frontier_phi_57_58_ladder_2;
            _2901 = frontier_phi_57_58_ladder_1;
            _2903 = frontier_phi_57_58_ladder;
        }
        float _2908 = isnan(1.0) ? _924 : (isnan(_924) ? 1.0 : min(_924, 1.0));
        _2648 = (_2908 * _2899) + _2085;
        _2650 = (_2908 * _2901) + _2087;
        _2652 = (_2908 * _2903) + _2089;
        _2654 = ((_2893 * _910) * _2908) + _2430;
        _2656 = ((_2895 * _911) * _2908) + _2432;
        _2658 = ((_2897 * _912) * _2908) + _2434;
    }
    else
    {
        _2648 = _2085;
        _2650 = _2087;
        _2652 = _2089;
        _2654 = _2430;
        _2656 = _2432;
        _2658 = _2434;
    }
    uint _2664 = _817 + uint(cbMatDynParam._m0[0u].w);
    float _2670 = cbInstanceData._m0[_2664].x * (((((cbMatDynParam._m0[8u].x - cbMatDynParam._m0[7u].x) * _592) + cbMatDynParam._m0[7u].x) + (((((cbMtdParam._m0[12u].x * cbMtdParam._m0[16u].z) * cbMtdParam._m0[15u].w) * _494) * _507.x) * _621)) + (((_650 - (_650 * _558)) + (cbMatDynParam._m0[11u].x * _681)) * cbMatDynParam._m0[9u].x));
    float _2671 = cbInstanceData._m0[_2664].y * (((((cbMatDynParam._m0[8u].y - cbMatDynParam._m0[7u].y) * _592) + cbMatDynParam._m0[7u].y) + (((((cbMtdParam._m0[12u].y * cbMtdParam._m0[16u].z) * cbMtdParam._m0[15u].w) * _494) * _507.y) * _621)) + (((_652 - (_652 * _558)) + (cbMatDynParam._m0[11u].y * _681)) * cbMatDynParam._m0[9u].y));
    float _2672 = cbInstanceData._m0[_2664].z * (((((cbMatDynParam._m0[8u].z - cbMatDynParam._m0[7u].z) * _592) + cbMatDynParam._m0[7u].z) + (((((cbMtdParam._m0[12u].z * cbMtdParam._m0[16u].z) * cbMtdParam._m0[15u].w) * _494) * _507.z) * _621)) + (((_654 - (_654 * _558)) + (cbMatDynParam._m0[11u].z * _681)) * cbMatDynParam._m0[9u].z));
    float _4613 = isnan(0.0) ? _901 : (isnan(_901) ? 0.0 : max(_901, 0.0));
    float _4624 = isnan(0.0) ? _902 : (isnan(_902) ? 0.0 : max(_902, 0.0));
    float _4635 = isnan(0.0) ? _903 : (isnan(_903) ? 0.0 : max(_903, 0.0));
    float _4646 = isnan(0.0) ? _553 : (isnan(_553) ? 0.0 : max(_553, 0.0));
    float _2690 = (((isnan(1.0) ? _4613 : (isnan(_4613) ? 1.0 : min(_4613, 1.0))) * (_2648 + ((isnan(0.0) ? _1647 : (isnan(_1647) ? 0.0 : max(_1647, 0.0))) * _924))) + ((_2654 + ((isnan(0.0) ? _1938 : (isnan(_1938) ? 0.0 : max(_1938, 0.0))) * _1723)) * cbPerFrame._m0[3u].x)) + _2670;
    float _2692 = (_2671 + ((_2656 + ((isnan(0.0) ? _1941 : (isnan(_1941) ? 0.0 : max(_1941, 0.0))) * _1723)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4624 : (isnan(_4624) ? 1.0 : min(_4624, 1.0))) * (_2650 + ((isnan(0.0) ? _1650 : (isnan(_1650) ? 0.0 : max(_1650, 0.0))) * _924)));
    float _2694 = (_2672 + ((_2658 + ((isnan(0.0) ? _1944 : (isnan(_1944) ? 0.0 : max(_1944, 0.0))) * _1723)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4635 : (isnan(_4635) ? 1.0 : min(_4635, 1.0))) * (_2652 + ((isnan(0.0) ? _1653 : (isnan(_1653) ? 0.0 : max(_1653, 0.0))) * _924)));
    float _2712 = ((cbMtdParam._m0[2u].w - cbMatDynParam._m0[12u].y) * _621) + cbMatDynParam._m0[12u].y;
    float _2717 = cbInstanceData._m0[_816 + 6u].w * (isnan(1.0) ? _4646 : (isnan(_4646) ? 1.0 : min(_4646, 1.0)));
    float _2722 = _713 / cbSceneParam._m0[86u].x;
    float _2723 = _714 / cbSceneParam._m0[86u].y;
    vec4 _2737 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2722, _2723, (log2((isnan(cbSceneParam._m0[77u].w) ? _707 : (isnan(_707) ? cbSceneParam._m0[77u].w : min(_707, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2739 = _2737.x;
    float _2740 = _2737.y;
    float _2741 = _2737.z;
    float _2742 = _2737.w;
    float _2834;
    float _2836;
    float _2838;
    float _2840;
    if (_707 > cbSceneParam._m0[78u].w)
    {
        float _2797 = isnan(_707) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _707 : min(cbSceneParam._m0[80u].w, _707));
        float _2798 = _2797 / _707;
        float _2809 = _2798 * _289;
        float _2810 = _290 * _2798;
        float _2811 = (-0.0) - _2810;
        float _2812 = _2798 * _291;
        float _2814 = (cbSceneParam._m0[77u].w * _2811) / _2797;
        float _2815 = _2814 + cbSceneParam._m0[79u].w;
        float _2816 = cbSceneParam._m0[79u].w - _2810;
        float _2822 = sqrt(((_2809 * _2809) + (_2810 * _2810)) + (_2812 * _2812));
        float _2825 = (1.0 - (cbSceneParam._m0[77u].w / _2797)) * _2822;
        float _2830 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2832 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2994;
        if (abs((_2811 - _2814) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2994 = ((((_2815 > 0.0) ? exp2(_2830 * _2815) : (2.0 - exp2(_2832 * _2815))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2825;
        }
        else
        {
            float _2954 = 1.0 / cbSceneParam._m0[80u].x;
            float _2955 = isnan(_2816) ? _2815 : (isnan(_2815) ? _2816 : max(_2815, _2816));
            float _2956 = isnan(_2816) ? _2815 : (isnan(_2815) ? _2816 : min(_2815, _2816));
            float _2965 = isnan(0.0) ? _2955 : (isnan(_2955) ? 0.0 : min(_2955, 0.0));
            float _2966 = isnan(0.0) ? _2956 : (isnan(_2956) ? 0.0 : min(_2956, 0.0));
            _2994 = ((abs(_2822 / _2811) * cbSceneParam._m0[80u].y) * ((((_2965 - _2966) * 2.0) - ((exp2(_2830 * (isnan(0.0) ? _2955 : (isnan(_2955) ? 0.0 : max(_2955, 0.0)))) - exp2(_2830 * (isnan(0.0) ? _2956 : (isnan(_2956) ? 0.0 : max(_2956, 0.0))))) * _2954)) - ((exp2(_2832 * _2965) - exp2(_2832 * _2966)) * _2954))) + (_2825 * cbSceneParam._m0[80u].z);
        }
        vec4 _2996 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2722, _2723, 1.0), 0.0);
        float _3005 = exp2((_2994 * (-1.44269502162933349609375)) * (1.0 - _2996.w));
        float _3006 = log2(_3005);
        float _3022 = log2(_2742);
        _2834 = (exp2(_3022 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3006 * cbSceneParam._m0[78u].x)) * _2996.x) / cbSceneParam._m0[78u].x)) + _2739;
        _2836 = (exp2(_3022 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3006 * cbSceneParam._m0[78u].y)) * _2996.y) / cbSceneParam._m0[78u].y)) + _2740;
        _2838 = (exp2(_3022 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3006 * cbSceneParam._m0[78u].z)) * _2996.z) / cbSceneParam._m0[78u].z)) + _2741;
        _2840 = _3005 * _2742;
    }
    else
    {
        _2834 = _2739;
        _2836 = _2740;
        _2838 = _2741;
        _2840 = _2742;
    }
    float _2852 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2853 = _2852 == 3.0;
    float _2854 = log2(_2840);
    float _2858 = exp2(_2854 * cbSceneParam._m0[78u].x);
    float _2859 = exp2(_2854 * cbSceneParam._m0[78u].y);
    float _2860 = exp2(_2854 * cbSceneParam._m0[78u].z);
    float _2861 = _2858 * (isnan(0.0) ? _2690 : (isnan(_2690) ? 0.0 : max(_2690, 0.0)));
    float _2862 = _2859 * (isnan(0.0) ? _2692 : (isnan(_2692) ? 0.0 : max(_2692, 0.0)));
    float _2863 = _2860 * (isnan(0.0) ? _2694 : (isnan(_2694) ? 0.0 : max(_2694, 0.0)));
    float _2872 = (_2852 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2872 * (_2853 ? _2861 : (_2861 + (cbSceneParam._m0[72u].w * _2834)));
    SV_Target.y = _2872 * (_2853 ? _2862 : (_2862 + (cbSceneParam._m0[72u].w * _2836)));
    SV_Target.z = _2872 * (_2853 ? _2863 : (_2863 + (cbSceneParam._m0[72u].w * _2838)));
    SV_Target.w = _2717;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2670) * _2712) * _2858) * _2872;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2671) * _2712) * _2859) * _2872;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2672) * _2712) * _2860) * _2872;
    SV_Target_1.w = _2717;
}


