#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[18];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_1;
layout(set = 0, binding = 1) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_7;
layout(set = 0, binding = 10) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_6;
layout(set = 0, binding = 2) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_0;
layout(set = 0, binding = 4) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_11;
layout(set = 0, binding = 6) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_2;
layout(set = 0, binding = 7) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_3;
layout(set = 0, binding = 9) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_5;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1299;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _207 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _208 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _209 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _215 = inversesqrt(dot(vec3(_207, _208, _209), vec3(_207, _208, _209)));
    float _222 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _223 = _222 * NORMAL.x;
    float _224 = _222 * NORMAL.y;
    float _225 = _222 * NORMAL.z;
    float _229 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _237;
    float _238;
    float _239;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _237 = (-0.0) - _223;
        _238 = (-0.0) - _224;
        _239 = (-0.0) - _225;
    }
    else
    {
        _237 = _223;
        _238 = _224;
        _239 = _225;
    }
    float _283 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _293 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _283);
    float _294 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _283);
    float _295 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _283);
    vec4 _308 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _313 = _308.z;
    float _319 = exp2(log2(_313 * 22.0) * 260.0);
    float _320 = isnan(0.0) ? _319 : (isnan(_319) ? 0.0 : max(_319, 0.0));
    float _321 = isnan(1.0) ? _320 : (isnan(_320) ? 1.0 : min(_320, 1.0));
    vec4 _335 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _345 = cbMtdParam._m0[10u].x * _335.x;
    float _346 = cbMtdParam._m0[10u].y * _335.y;
    float _347 = cbMtdParam._m0[10u].z * _335.z;
    vec4 _359 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _381 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _403 = (((((_359.x * 4.55000019073486328125) * cbMtdParam._m0[9u].x) * _381.x) - _345) * _321) + _345;
    float _404 = (((((_359.y * 4.55000019073486328125) * cbMtdParam._m0[9u].y) * _381.y) - _346) * _321) + _346;
    float _405 = (((((_359.z * 4.55000019073486328125) * cbMtdParam._m0[9u].z) * _381.z) - _347) * _321) + _347;
    float _406 = _381.w * _359.w;
    float _432 = (((texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w)).x - cbMtdParam._m0[17u].x) + cbMtdParam._m0[16u].x) * _321) + cbMtdParam._m0[17u].x;
    vec4 _444 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w));
    float _446 = _444.x;
    float _447 = _444.y;
    float _453 = cbMtdParam._m0[14u].y + _444.z;
    vec4 _465 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w));
    float _477 = ((((_313 * 2.0) * (cbMtdParam._m0[14u].x + _465.z)) - _453) * _321) + _453;
    float _495 = abs((fract(cbMtdParam._m0[15u].x * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _3963 = isnan(0.0) ? _495 : (isnan(_495) ? 0.0 : max(_495, 0.0));
    float _496 = isnan(1.0) ? _3963 : (isnan(_3963) ? 1.0 : min(_3963, 1.0));
    float _501 = (_496 * _496) * (3.0 - (_496 * 2.0));
    vec4 _514 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _522 = (_308.x * 2.0) + (-1.0);
    float _523 = (_308.y * 2.0) + (-1.0);
    float _524 = dot(vec2(_522, _523), vec2(_522, _523));
    float _3974 = isnan(0.0) ? _524 : (isnan(_524) ? 0.0 : max(_524, 0.0));
    float _529 = sqrt(1.0 - (isnan(1.0) ? _3974 : (isnan(_3974) ? 1.0 : min(_3974, 1.0))));
    float _542 = (cbMtdParam._m0[14u].z * (((((_465.x - _446) * _321) + _446) * 2.0) + (-1.0))) + _522;
    float _543 = (cbMtdParam._m0[14u].z * (((((_465.y - _447) * _321) + _447) * 2.0) + (-1.0))) + _523;
    float _546 = fma(_529, _237, fma(_543, _229 * TANGENT.x, (_215 * _207) * _542));
    float _549 = fma(_529, _238, fma(_543, _229 * TANGENT.y, (_215 * _208) * _542));
    float _552 = fma(_529, _239, fma(_543, _229 * TANGENT.z, (_215 * _209) * _542));
    float _556 = inversesqrt(dot(vec3(_546, _549, _552), vec3(_546, _549, _552)));
    float _557 = _556 * _546;
    float _558 = _556 * _549;
    float _559 = _556 * _552;
    float _3985 = isnan(0.0) ? _406 : (isnan(_406) ? 0.0 : max(_406, 0.0));
    float _560 = isnan(1.0) ? _3985 : (isnan(_3985) ? 1.0 : min(_3985, 1.0));
    float _3996 = isnan(0.0) ? _477 : (isnan(_477) ? 0.0 : max(_477, 0.0));
    float _561 = isnan(1.0) ? _3996 : (isnan(_3996) ? 1.0 : min(_3996, 1.0));
    float _4007 = isnan(0.0) ? _403 : (isnan(_403) ? 0.0 : max(_403, 0.0));
    float _562 = isnan(1.0) ? _4007 : (isnan(_4007) ? 1.0 : min(_4007, 1.0));
    float _4018 = isnan(0.0) ? _404 : (isnan(_404) ? 0.0 : max(_404, 0.0));
    float _563 = isnan(1.0) ? _4018 : (isnan(_4018) ? 1.0 : min(_4018, 1.0));
    float _4029 = isnan(0.0) ? _405 : (isnan(_405) ? 0.0 : max(_405, 0.0));
    float _564 = isnan(1.0) ? _4029 : (isnan(_4029) ? 1.0 : min(_4029, 1.0));
    float _4040 = isnan(0.0) ? _432 : (isnan(_432) ? 0.0 : max(_432, 0.0));
    float _565 = isnan(1.0) ? _4040 : (isnan(_4040) ? 1.0 : min(_4040, 1.0));
    float _573 = cbMatDynParam._m0[9u].x * _562;
    float _574 = cbMatDynParam._m0[9u].y * _563;
    float _575 = cbMatDynParam._m0[9u].z * _564;
    float _582 = inversesqrt(dot(vec3(_293, _294, _295), vec3(_293, _294, _295)));
    float _583 = _582 * _293;
    float _584 = _582 * _294;
    float _585 = _582 * _295;
    float _586 = dot(vec3(_557, _558, _559), vec3(_583, _584, _585));
    float _592 = abs(exp2(log2(_586) * cbMatDynParam._m0[12u].x));
    float _593 = isnan(0.100000001490116119384765625) ? _592 : (isnan(_592) ? 0.100000001490116119384765625 : max(_592, 0.100000001490116119384765625));
    float _599 = ((isnan(0.699999988079071044921875) ? _593 : (isnan(_593) ? 0.699999988079071044921875 : min(_593, 0.699999988079071044921875))) + (-0.100000001490116119384765625)) * 1.66666662693023681640625;
    float _621 = 1.0 - cbMatDynParam._m0[8u].w;
    float _4061 = isnan(0.0) ? _621 : (isnan(_621) ? 0.0 : max(_621, 0.0));
    float _624 = 1.0 - cbMatDynParam._m0[7u].w;
    float _4072 = isnan(0.0) ? _624 : (isnan(_624) ? 0.0 : max(_624, 0.0));
    float _625 = isnan(1.0) ? _4072 : (isnan(_4072) ? 1.0 : min(_4072, 1.0));
    float _628 = (((isnan(1.0) ? _4061 : (isnan(_4061) ? 1.0 : min(_4061, 1.0))) - _625) * _599) + _625;
    float _647 = dot(vec3(_557, _558, _559), vec3(0.0, -1.0, 0.0));
    float _4083 = isnan(0.0) ? _647 : (isnan(_647) ? 0.0 : max(_647, 0.0));
    float _650 = isnan(1.0) ? _4083 : (isnan(_4083) ? 1.0 : min(_4083, 1.0));
    float _657 = (_650 * _562) * cbMatDynParam._m0[11u].x;
    float _659 = (_650 * _563) * cbMatDynParam._m0[11u].y;
    float _661 = (_650 * _564) * cbMatDynParam._m0[11u].z;
    float _668 = dot(vec3(_583, _584, _585), vec3(_557, _558, _559));
    float _671 = _668 * 2.0;
    float _681 = dot(vec3((-0.0) - (_583 - (_671 * _557)), (-0.0) - (_584 - (_671 * _558)), (-0.0) - (_585 - (_671 * _559))), vec3(0.0, -1.0, 0.0));
    float _4094 = isnan(0.0) ? _681 : (isnan(_681) ? 0.0 : max(_681, 0.0));
    float _688 = exp2(log2(isnan(1.0) ? _4094 : (isnan(_4094) ? 1.0 : min(_4094, 1.0))) * 4.0);
    float _714 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _720 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _721 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _723 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _725 = _723.w;
    float _744 = fma(_559, cbSceneParam._m0[5u].z, fma(_558, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _557));
    float _747 = fma(_559, cbSceneParam._m0[6u].z, fma(_558, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _557));
    float _750 = fma(_559, cbSceneParam._m0[7u].z, fma(_558, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _557));
    vec4 _752 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _754 = _752.x;
    float _766 = (((_752.y - _561) + (_752.w * _561)) * cbMtdParam._m0[3u].x) + _561;
    vec4 _767 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _783 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3(cbMtdParam._m0[3u].x * (_754 * _754)), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * _767.z;
    float _791 = (((cbMatDynParam._m0[15u].x - _565) * cbMatDynParam._m0[15u].w) * _783) + _565;
    float _799 = ((_783 * cbMatDynParam._m0[16u].z) * (cbMatDynParam._m0[16u].x - _766)) + _766;
    uint _823 = uint(roundEven(NORMAL.w)) * 13u;
    uint _825 = _823 + 9u;
    uint _826 = _825 + uint(cbMatDynParam._m0[0u].w);
    float _832 = (cbMtdParam._m0[0u].x * _573) * cbInstanceData._m0[_826].x;
    float _833 = (cbMtdParam._m0[0u].y * _574) * cbInstanceData._m0[_826].y;
    float _834 = (cbMtdParam._m0[0u].z * _575) * cbInstanceData._m0[_826].z;
    float _4105 = isnan(0.0) ? _832 : (isnan(_832) ? 0.0 : max(_832, 0.0));
    float _835 = isnan(1.0) ? _4105 : (isnan(_4105) ? 1.0 : min(_4105, 1.0));
    float _4116 = isnan(0.0) ? _833 : (isnan(_833) ? 0.0 : max(_833, 0.0));
    float _836 = isnan(1.0) ? _4116 : (isnan(_4116) ? 1.0 : min(_4116, 1.0));
    float _4127 = isnan(0.0) ? _834 : (isnan(_834) ? 0.0 : max(_834, 0.0));
    float _837 = isnan(1.0) ? _4127 : (isnan(_4127) ? 1.0 : min(_4127, 1.0));
    vec4 _838 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _843 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _854 = (((_843.x - _791) + (_843.w * _791)) * cbMtdParam._m0[3u].x) + _791;
    float _867 = (cbMtdParam._m0[3u].x * (((_835 * _725) - _835) + _838.x)) + _835;
    float _868 = (cbMtdParam._m0[3u].x * (((_836 * _725) - _836) + _838.y)) + _836;
    float _869 = (cbMtdParam._m0[3u].x * (((_837 * _725) - _837) + _838.z)) + _837;
    vec4 _870 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _883 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3((_791 * (_573 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625, (_791 * (_574 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625, (_791 * (_575 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * _870.z;
    float _887 = _883 * cbMatDynParam._m0[13u].w;
    float _897 = (_887 * (cbMatDynParam._m0[13u].x - _867)) + _867;
    float _898 = (_887 * (cbMatDynParam._m0[13u].y - _868)) + _868;
    float _899 = (_887 * (cbMatDynParam._m0[13u].z - _869)) + _869;
    float _907 = ((_883 * cbMatDynParam._m0[15u].w) * (cbMatDynParam._m0[15u].x - _854)) + _854;
    float _908 = 1.0 - _907;
    float _909 = _908 * _897;
    float _910 = _908 * _898;
    float _911 = _908 * _899;
    float _915 = (_897 + (-0.039999999105930328369140625)) * _907;
    float _916 = (_898 + (-0.039999999105930328369140625)) * _907;
    float _917 = (_899 + (-0.039999999105930328369140625)) * _907;
    float _918 = _915 + 0.039999999105930328369140625;
    float _919 = _916 + 0.039999999105930328369140625;
    float _920 = _917 + 0.039999999105930328369140625;
    vec4 _929 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _720, cbSceneParam._m0[86u].y * _721));
    float _932 = _929.x * TEXCOORD_4;
    float _933 = _586 * 2.0;
    float _937 = (_933 * _557) - _583;
    float _938 = (_933 * _558) - _584;
    float _939 = (_933 * _559) - _585;
    float _940 = abs(_668);
    float _4138 = isnan(0.0) ? _940 : (isnan(_940) ? 0.0 : max(_940, 0.0));
    float _942 = sqrt(_799);
    float _953 = exp2((_942 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4138 : (isnan(_4138) ? 1.0 : min(_4138, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_942 * 3.0));
    float _959 = (1.0 - _953) * ((_942 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _960 = _953 * _942;
    float _988 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _992 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _996 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1298;
    float _1300;
    float _1301;
    float _1302;
    float _1303;
    float _1304;
    float _1305;
    float _1306;
    float _1307;
    float _1308;
    float _1309;
    float _1310;
    float _1311;
    float _1312;
    float _1313;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1023 = fma(_996, cbModelParam._m0[26u].z, fma(_992, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _988));
        float _1027 = fma(_996, cbModelParam._m0[27u].z, fma(_992, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _988));
        float _1031 = fma(_996, cbModelParam._m0[28u].z, fma(_992, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _988));
        float _1056 = _988 + _557;
        float _1057 = _992 + _558;
        float _1058 = _996 + _559;
        float _1068 = fma(_1058, cbModelParam._m0[26u].z, fma(_1057, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1056)) - _1023;
        float _1069 = fma(_1058, cbModelParam._m0[27u].z, fma(_1057, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1056)) - _1027;
        float _1070 = fma(_1058, cbModelParam._m0[28u].z, fma(_1057, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1056)) - _1031;
        float _1074 = inversesqrt(dot(vec3(_1068, _1069, _1070), vec3(_1068, _1069, _1070)));
        float _1087 = ((_1074 * _1068) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1023 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1088 = ((_1074 * _1069) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1027 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1089 = ((_1074 * _1070) / cbModelParam._m0[34u].z) + ((((((_1031 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1092 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1087, _1088, _1089), 0.0);
        vec4 _1099 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1087, _1088, _1089), 0.0);
        vec4 _1106 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1087, _1088, _1089), 0.0);
        vec4 _1113 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1087, _1088, _1089), 0.0);
        float _1126 = exp2((_1092.w + (-0.5)) * 20.0) * 2.0;
        float _1127 = _1126 * (_1092.x + (-0.5));
        float _1128 = _1126 * (_1092.y + (-0.5));
        float _1129 = _1126 * (_1092.z + (-0.5));
        float _1136 = exp2((_1099.w + (-0.5)) * 20.0) * 2.0;
        float _1137 = _1136 * (_1099.x + (-0.5));
        float _1138 = _1136 * (_1099.y + (-0.5));
        float _1139 = _1136 * (_1099.z + (-0.5));
        float _1146 = exp2((_1106.w + (-0.5)) * 20.0) * 2.0;
        float _1147 = _1146 * (_1106.x + (-0.5));
        float _1148 = _1146 * (_1106.y + (-0.5));
        float _1149 = _1146 * (_1106.z + (-0.5));
        float _1156 = exp2((_1113.w + (-0.5)) * 20.0) * 2.0;
        float _1157 = _1156 * (_1113.x + (-0.5));
        float _1158 = _1156 * (_1113.y + (-0.5));
        float _1159 = _1156 * (_1113.z + (-0.5));
        float _1160 = isnan(0.0) ? _1157 : (isnan(_1157) ? 0.0 : max(_1157, 0.0));
        float _1161 = isnan(0.0) ? _1158 : (isnan(_1158) ? 0.0 : max(_1158, 0.0));
        float _1162 = isnan(0.0) ? _1159 : (isnan(_1159) ? 0.0 : max(_1159, 0.0));
        float _1163 = _1127 * 0.5;
        float _1164 = _1137 * 0.5;
        float _1165 = _1147 * 0.5;
        float _1166 = dot(vec3(_1163, _1164, _1165), vec3(_1163, _1164, _1165));
        float _1171 = (_1166 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1166);
        float _1180 = (dot(vec3(_557, _558, _559), vec3(_1171 * _1163, _1171 * _1164, _1171 * _1165)) + 1.0) * 0.5;
        float _4164 = isnan(0.0) ? _1180 : (isnan(_1180) ? 0.0 : max(_1180, 0.0));
        float _1190 = sqrt(((_1164 * _1164) + (_1163 * _1163)) + (_1165 * _1165)) / (_1160 + 9.9999997473787516355514526367188e-06);
        float _4175 = isnan(0.0) ? _1190 : (isnan(_1190) ? 0.0 : max(_1190, 0.0));
        float _1191 = isnan(1.0) ? _4175 : (isnan(_4175) ? 1.0 : min(_4175, 1.0));
        float _1192 = _1191 * 2.0;
        float _1196 = (1.0 - _1191) / (_1191 + 1.0);
        float _4186 = isnan(0.0) ? _1196 : (isnan(_1196) ? 0.0 : max(_1196, 0.0));
        float _1197 = isnan(1.0) ? _4186 : (isnan(_4186) ? 1.0 : min(_4186, 1.0));
        float _1206 = ((((1.0 - _1197) * (_1192 + 2.0)) * exp2(log2(isnan(1.0) ? _4164 : (isnan(_4164) ? 1.0 : min(_4164, 1.0))) * (_1192 + 1.0))) + _1197) * _1160;
        float _1207 = _1128 * 0.5;
        float _1208 = _1138 * 0.5;
        float _1209 = _1148 * 0.5;
        float _1210 = dot(vec3(_1207, _1208, _1209), vec3(_1207, _1208, _1209));
        float _1215 = (_1210 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1210);
        float _1223 = (dot(vec3(_557, _558, _559), vec3(_1215 * _1207, _1215 * _1208, _1215 * _1209)) + 1.0) * 0.5;
        float _4197 = isnan(0.0) ? _1223 : (isnan(_1223) ? 0.0 : max(_1223, 0.0));
        float _1232 = sqrt(((_1208 * _1208) + (_1207 * _1207)) + (_1209 * _1209)) / (_1161 + 9.9999997473787516355514526367188e-06);
        float _4208 = isnan(0.0) ? _1232 : (isnan(_1232) ? 0.0 : max(_1232, 0.0));
        float _1233 = isnan(1.0) ? _4208 : (isnan(_4208) ? 1.0 : min(_4208, 1.0));
        float _1234 = _1233 * 2.0;
        float _1238 = (1.0 - _1233) / (_1233 + 1.0);
        float _4219 = isnan(0.0) ? _1238 : (isnan(_1238) ? 0.0 : max(_1238, 0.0));
        float _1239 = isnan(1.0) ? _4219 : (isnan(_4219) ? 1.0 : min(_4219, 1.0));
        float _1248 = ((((1.0 - _1239) * (_1234 + 2.0)) * exp2(log2(isnan(1.0) ? _4197 : (isnan(_4197) ? 1.0 : min(_4197, 1.0))) * (_1234 + 1.0))) + _1239) * _1161;
        float _1249 = _1129 * 0.5;
        float _1250 = _1139 * 0.5;
        float _1251 = _1149 * 0.5;
        float _1252 = dot(vec3(_1249, _1250, _1251), vec3(_1249, _1250, _1251));
        float _1257 = (_1252 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1252);
        float _1265 = (dot(vec3(_557, _558, _559), vec3(_1257 * _1249, _1257 * _1250, _1257 * _1251)) + 1.0) * 0.5;
        float _4230 = isnan(0.0) ? _1265 : (isnan(_1265) ? 0.0 : max(_1265, 0.0));
        float _1274 = sqrt(((_1250 * _1250) + (_1249 * _1249)) + (_1251 * _1251)) / (_1162 + 9.9999997473787516355514526367188e-06);
        float _4241 = isnan(0.0) ? _1274 : (isnan(_1274) ? 0.0 : max(_1274, 0.0));
        float _1275 = isnan(1.0) ? _4241 : (isnan(_4241) ? 1.0 : min(_4241, 1.0));
        float _1276 = _1275 * 2.0;
        float _1280 = (1.0 - _1275) / (_1275 + 1.0);
        float _4252 = isnan(0.0) ? _1280 : (isnan(_1280) ? 0.0 : max(_1280, 0.0));
        float _1281 = isnan(1.0) ? _4252 : (isnan(_4252) ? 1.0 : min(_4252, 1.0));
        float _1290 = ((((1.0 - _1281) * (_1276 + 2.0)) * exp2(log2(isnan(1.0) ? _4230 : (isnan(_4230) ? 1.0 : min(_4230, 1.0))) * (_1276 + 1.0))) + _1281) * _1162;
        _1298 = _1129;
        _1300 = _1128;
        _1301 = _1127;
        _1302 = _1139;
        _1303 = _1138;
        _1304 = _1137;
        _1305 = _1149;
        _1306 = _1148;
        _1307 = _1147;
        _1308 = _1162;
        _1309 = _1161;
        _1310 = _1160;
        _1311 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1206 : (isnan(_1206) ? 0.0 : max(_1206, 0.0)));
        _1312 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1248 : (isnan(_1248) ? 0.0 : max(_1248, 0.0)));
        _1313 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1290 : (isnan(_1290) ? 0.0 : max(_1290, 0.0)));
    }
    else
    {
        _1298 = _1299;
        _1300 = _1299;
        _1301 = _1299;
        _1302 = _1299;
        _1303 = _1299;
        _1304 = _1299;
        _1305 = _1299;
        _1306 = _1299;
        _1307 = _1299;
        _1308 = _1299;
        _1309 = _1299;
        _1310 = _1299;
        _1311 = 0.0;
        _1312 = 0.0;
        _1313 = 0.0;
    }
    float _1608;
    float _1609;
    float _1610;
    float _1611;
    float _1612;
    float _1613;
    float _1614;
    float _1615;
    float _1616;
    float _1617;
    float _1618;
    float _1619;
    float _1620;
    float _1621;
    float _1622;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1339 = fma(_996, cbModelParam._m0[30u].z, fma(_992, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _988));
        float _1343 = fma(_996, cbModelParam._m0[31u].z, fma(_992, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _988));
        float _1347 = fma(_996, cbModelParam._m0[32u].z, fma(_992, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _988));
        float _1370 = _988 + _557;
        float _1371 = _992 + _558;
        float _1372 = _996 + _559;
        float _1382 = fma(_1372, cbModelParam._m0[30u].z, fma(_1371, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1370)) - _1339;
        float _1383 = fma(_1372, cbModelParam._m0[31u].z, fma(_1371, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1370)) - _1343;
        float _1384 = fma(_1372, cbModelParam._m0[32u].z, fma(_1371, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1370)) - _1347;
        float _1388 = inversesqrt(dot(vec3(_1382, _1383, _1384), vec3(_1382, _1383, _1384)));
        float _1401 = ((_1388 * _1382) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1339 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1402 = ((_1388 * _1383) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1343 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1403 = ((_1388 * _1384) / cbModelParam._m0[35u].z) + ((((((_1347 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1405 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1401, _1402, _1403), 0.0);
        vec4 _1412 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1401, _1402, _1403), 0.0);
        vec4 _1419 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1401, _1402, _1403), 0.0);
        vec4 _1426 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1401, _1402, _1403), 0.0);
        float _1438 = exp2((_1405.w + (-0.5)) * 20.0) * 2.0;
        float _1439 = _1438 * (_1405.x + (-0.5));
        float _1440 = _1438 * (_1405.y + (-0.5));
        float _1441 = _1438 * (_1405.z + (-0.5));
        float _1448 = exp2((_1412.w + (-0.5)) * 20.0) * 2.0;
        float _1449 = _1448 * (_1412.x + (-0.5));
        float _1450 = _1448 * (_1412.y + (-0.5));
        float _1451 = _1448 * (_1412.z + (-0.5));
        float _1458 = exp2((_1419.w + (-0.5)) * 20.0) * 2.0;
        float _1459 = _1458 * (_1419.x + (-0.5));
        float _1460 = _1458 * (_1419.y + (-0.5));
        float _1461 = _1458 * (_1419.z + (-0.5));
        float _1468 = exp2((_1426.w + (-0.5)) * 20.0) * 2.0;
        float _1469 = _1468 * (_1426.x + (-0.5));
        float _1470 = _1468 * (_1426.y + (-0.5));
        float _1471 = _1468 * (_1426.z + (-0.5));
        float _1472 = isnan(0.0) ? _1469 : (isnan(_1469) ? 0.0 : max(_1469, 0.0));
        float _1473 = isnan(0.0) ? _1470 : (isnan(_1470) ? 0.0 : max(_1470, 0.0));
        float _1474 = isnan(0.0) ? _1471 : (isnan(_1471) ? 0.0 : max(_1471, 0.0));
        float _1475 = _1439 * 0.5;
        float _1476 = _1449 * 0.5;
        float _1477 = _1459 * 0.5;
        float _1478 = dot(vec3(_1475, _1476, _1477), vec3(_1475, _1476, _1477));
        float _1483 = (_1478 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1478);
        float _1491 = (dot(vec3(_557, _558, _559), vec3(_1483 * _1475, _1483 * _1476, _1483 * _1477)) + 1.0) * 0.5;
        float _4293 = isnan(0.0) ? _1491 : (isnan(_1491) ? 0.0 : max(_1491, 0.0));
        float _1500 = sqrt(((_1476 * _1476) + (_1475 * _1475)) + (_1477 * _1477)) / (_1472 + 9.9999997473787516355514526367188e-06);
        float _4304 = isnan(0.0) ? _1500 : (isnan(_1500) ? 0.0 : max(_1500, 0.0));
        float _1501 = isnan(1.0) ? _4304 : (isnan(_4304) ? 1.0 : min(_4304, 1.0));
        float _1502 = _1501 * 2.0;
        float _1506 = (1.0 - _1501) / (_1501 + 1.0);
        float _4315 = isnan(0.0) ? _1506 : (isnan(_1506) ? 0.0 : max(_1506, 0.0));
        float _1507 = isnan(1.0) ? _4315 : (isnan(_4315) ? 1.0 : min(_4315, 1.0));
        float _1516 = ((((1.0 - _1507) * (_1502 + 2.0)) * exp2(log2(isnan(1.0) ? _4293 : (isnan(_4293) ? 1.0 : min(_4293, 1.0))) * (_1502 + 1.0))) + _1507) * _1472;
        float _1517 = _1440 * 0.5;
        float _1518 = _1450 * 0.5;
        float _1519 = _1460 * 0.5;
        float _1520 = dot(vec3(_1517, _1518, _1519), vec3(_1517, _1518, _1519));
        float _1525 = (_1520 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1520);
        float _1533 = (dot(vec3(_557, _558, _559), vec3(_1525 * _1517, _1525 * _1518, _1525 * _1519)) + 1.0) * 0.5;
        float _4326 = isnan(0.0) ? _1533 : (isnan(_1533) ? 0.0 : max(_1533, 0.0));
        float _1542 = sqrt(((_1518 * _1518) + (_1517 * _1517)) + (_1519 * _1519)) / (_1473 + 9.9999997473787516355514526367188e-06);
        float _4337 = isnan(0.0) ? _1542 : (isnan(_1542) ? 0.0 : max(_1542, 0.0));
        float _1543 = isnan(1.0) ? _4337 : (isnan(_4337) ? 1.0 : min(_4337, 1.0));
        float _1544 = _1543 * 2.0;
        float _1548 = (1.0 - _1543) / (_1543 + 1.0);
        float _4348 = isnan(0.0) ? _1548 : (isnan(_1548) ? 0.0 : max(_1548, 0.0));
        float _1549 = isnan(1.0) ? _4348 : (isnan(_4348) ? 1.0 : min(_4348, 1.0));
        float _1558 = ((((1.0 - _1549) * (_1544 + 2.0)) * exp2(log2(isnan(1.0) ? _4326 : (isnan(_4326) ? 1.0 : min(_4326, 1.0))) * (_1544 + 1.0))) + _1549) * _1473;
        float _1559 = _1441 * 0.5;
        float _1560 = _1451 * 0.5;
        float _1561 = _1461 * 0.5;
        float _1562 = dot(vec3(_1559, _1560, _1561), vec3(_1559, _1560, _1561));
        float _1567 = (_1562 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1562);
        float _1575 = (dot(vec3(_557, _558, _559), vec3(_1567 * _1559, _1567 * _1560, _1567 * _1561)) + 1.0) * 0.5;
        float _4359 = isnan(0.0) ? _1575 : (isnan(_1575) ? 0.0 : max(_1575, 0.0));
        float _1584 = sqrt(((_1560 * _1560) + (_1559 * _1559)) + (_1561 * _1561)) / (_1474 + 9.9999997473787516355514526367188e-06);
        float _4370 = isnan(0.0) ? _1584 : (isnan(_1584) ? 0.0 : max(_1584, 0.0));
        float _1585 = isnan(1.0) ? _4370 : (isnan(_4370) ? 1.0 : min(_4370, 1.0));
        float _1586 = _1585 * 2.0;
        float _1590 = (1.0 - _1585) / (_1585 + 1.0);
        float _4381 = isnan(0.0) ? _1590 : (isnan(_1590) ? 0.0 : max(_1590, 0.0));
        float _1591 = isnan(1.0) ? _4381 : (isnan(_4381) ? 1.0 : min(_4381, 1.0));
        float _1600 = ((((1.0 - _1591) * (_1586 + 2.0)) * exp2(log2(isnan(1.0) ? _4359 : (isnan(_4359) ? 1.0 : min(_4359, 1.0))) * (_1586 + 1.0))) + _1591) * _1474;
        _1608 = _1441;
        _1609 = _1440;
        _1610 = _1439;
        _1611 = _1451;
        _1612 = _1450;
        _1613 = _1449;
        _1614 = _1461;
        _1615 = _1460;
        _1616 = _1459;
        _1617 = _1474;
        _1618 = _1473;
        _1619 = _1472;
        _1620 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1516 : (isnan(_1516) ? 0.0 : max(_1516, 0.0)));
        _1621 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1558 : (isnan(_1558) ? 0.0 : max(_1558, 0.0)));
        _1622 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1600 : (isnan(_1600) ? 0.0 : max(_1600, 0.0)));
    }
    else
    {
        _1608 = _1299;
        _1609 = _1299;
        _1610 = _1299;
        _1611 = _1299;
        _1612 = _1299;
        _1613 = _1299;
        _1614 = _1299;
        _1615 = _1299;
        _1616 = _1299;
        _1617 = _1299;
        _1618 = _1299;
        _1619 = _1299;
        _1620 = 0.0;
        _1621 = 0.0;
        _1622 = 0.0;
    }
    float _1632 = (cbModelParam._m0[1u].x * (_1620 - _1311)) + _1311;
    float _1633 = (cbModelParam._m0[1u].x * (_1621 - _1312)) + _1312;
    float _1634 = (cbModelParam._m0[1u].x * (_1622 - _1313)) + _1313;
    float _1655 = fma(_1634, cbSceneParam._m0[89u].z, fma(_1633, cbSceneParam._m0[89u].y, _1632 * cbSceneParam._m0[89u].x));
    float _1658 = fma(_1634, cbSceneParam._m0[90u].z, fma(_1633, cbSceneParam._m0[90u].y, _1632 * cbSceneParam._m0[90u].x));
    float _1661 = fma(_1634, cbSceneParam._m0[91u].z, fma(_1633, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1632));
    float _1676 = _937 * 0.5;
    float _1677 = _938 * 0.5;
    float _1678 = _939 * 0.5;
    float _1679 = dot(vec4(_1676, _1677, _1678, 1.0), vec4(_1610, _1613, _1616, _1619));
    float _1682 = dot(vec4(_1676, _1677, _1678, 1.0), vec4(_1609, _1612, _1615, _1618));
    float _1685 = dot(vec4(_1676, _1677, _1678, 1.0), vec4(_1608, _1611, _1614, _1617));
    float _1716;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1692 = dot(vec4(_1676, _1677, _1678, 1.0), vec4(_1298, _1302, _1305, _1308));
        float _1696 = dot(vec4(_1676, _1677, _1678, 1.0), vec4(_1300, _1303, _1306, _1309));
        float _1700 = dot(vec4(_1676, _1677, _1678, 1.0), vec4(_1301, _1304, _1307, _1310));
        float _1707 = dot(vec4(cbModelParam._m0[39u]), vec4(_1676, _1677, _1678, 1.0));
        _1716 = dot(vec3(isnan(0.0) ? _1700 : (isnan(_1700) ? 0.0 : max(_1700, 0.0)), isnan(0.0) ? _1696 : (isnan(_1696) ? 0.0 : max(_1696, 0.0)), isnan(0.0) ? _1692 : (isnan(_1692) ? 0.0 : max(_1692, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1707) ? 0.0 : (isnan(0.0) ? _1707 : max(0.0, _1707))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1716 = 1.0;
    }
    float _1727;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1718 = dot(vec4(cbModelParam._m0[40u]), vec4(_1676, _1677, _1678, 1.0));
        _1727 = dot(vec3(isnan(0.0) ? _1679 : (isnan(_1679) ? 0.0 : max(_1679, 0.0)), isnan(0.0) ? _1682 : (isnan(_1682) ? 0.0 : max(_1682, 0.0)), isnan(0.0) ? _1685 : (isnan(_1685) ? 0.0 : max(_1685, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1718) ? 0.0 : (isnan(0.0) ? _1718 : max(0.0, _1718))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1727 = 1.0;
    }
    float _1731 = (_1727 * cbModelParam._m0[1u].x) + (_1716 * (1.0 - cbModelParam._m0[1u].x));
    float _1741 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _799);
    float _1742 = isnan(_1741) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1741 : min(cbModelParam._m0[25u].z, _1741));
    float _1822;
    float _1824;
    float _1826;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1789 = fma(_996, cbModelParam._m0[13u].z, fma(_992, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _988)) + cbModelParam._m0[13u].w;
        float _1793 = fma(_996, cbModelParam._m0[14u].z, fma(_992, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _988)) + cbModelParam._m0[14u].w;
        float _1797 = fma(_996, cbModelParam._m0[15u].z, fma(_992, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _988)) + cbModelParam._m0[15u].w;
        float _1800 = fma(_939, cbModelParam._m0[13u].z, fma(_938, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _937));
        float _1803 = fma(_939, cbModelParam._m0[14u].z, fma(_938, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _937));
        float _1806 = fma(_939, cbModelParam._m0[15u].z, fma(_938, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _937));
        float _1834;
        if (_1800 > 0.0)
        {
            _1834 = abs((1.0 - _1789) / _1800);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1800 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1789 + 1.0) / _1800);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1834 = frontier_phi_16_14_ladder;
        }
        float _2007;
        if (_1803 > 0.0)
        {
            _2007 = abs((1.0 - _1793) / _1803);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1803 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1793 + 1.0) / _1803);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2007 = frontier_phi_25_21_ladder;
        }
        float _2302;
        if (_1806 > 0.0)
        {
            _2302 = abs((1.0 - _1797) / _1806);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1806 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1797 + 1.0) / _1806);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2302 = frontier_phi_37_32_ladder;
        }
        float _2304 = isnan(_2007) ? _1834 : (isnan(_1834) ? _2007 : min(_1834, _2007));
        float _2305 = isnan(_2302) ? _2304 : (isnan(_2304) ? _2302 : min(_2304, _2302));
        float _2309 = (_2305 * _1800) + _1789;
        float _2310 = (_2305 * _1803) + _1793;
        float _2311 = (_2305 * _1806) + _1797;
        float _2312 = _2305 * 9.9999997473787516355514526367188e-05;
        float _2314 = (-1.0) - _2312;
        float _2316 = _2312 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_2311 > _2316) || ((_2311 < _2314) || ((_2310 > _2316) || ((_2310 < _2314) || ((_2309 < _2314) || (_2309 > _2316))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2456 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2311, cbModelParam._m0[9u].z, fma(_2310, cbModelParam._m0[9u].y, _2309 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2311, cbModelParam._m0[10u].z, fma(_2310, cbModelParam._m0[10u].y, _2309 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2311, cbModelParam._m0[11u].z, fma(_2310, cbModelParam._m0[11u].y, _2309 * cbModelParam._m0[11u].x))), _1742);
            frontier_phi_15_37_ladder = _2456.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2456.x * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2456.z * cbModelParam._m0[1u].y;
        }
        _1822 = frontier_phi_15_37_ladder_1;
        _1824 = frontier_phi_15_37_ladder;
        _1826 = frontier_phi_15_37_ladder_2;
    }
    else
    {
        vec4 _1810 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_937, _938, _939), _1742);
        _1822 = _1810.x * cbModelParam._m0[1u].y;
        _1824 = _1810.y * cbModelParam._m0[1u].y;
        _1826 = _1810.z * cbModelParam._m0[1u].y;
    }
    float _1830 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _799);
    float _1831 = isnan(_1830) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1830 : min(cbModelParam._m0[25u].w, _1830));
    float _1922;
    float _1924;
    float _1926;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1886 = fma(_996, cbModelParam._m0[21u].z, fma(_992, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _988)) + cbModelParam._m0[21u].w;
        float _1890 = fma(_996, cbModelParam._m0[22u].z, fma(_992, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _988)) + cbModelParam._m0[22u].w;
        float _1894 = fma(_996, cbModelParam._m0[23u].z, fma(_992, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _988)) + cbModelParam._m0[23u].w;
        float _1897 = fma(_939, cbModelParam._m0[21u].z, fma(_938, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _937));
        float _1900 = fma(_939, cbModelParam._m0[22u].z, fma(_938, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _937));
        float _1903 = fma(_939, cbModelParam._m0[23u].z, fma(_938, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _937));
        float _2012;
        if (_1897 > 0.0)
        {
            _2012 = abs((1.0 - _1886) / _1897);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1897 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1886 + 1.0) / _1897);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _2012 = frontier_phi_27_23_ladder;
        }
        float _2329;
        if (_1900 > 0.0)
        {
            _2329 = abs((1.0 - _1890) / _1900);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1900 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1890 + 1.0) / _1900);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _2329 = frontier_phi_39_34_ladder;
        }
        float _2667;
        if (_1903 > 0.0)
        {
            _2667 = abs((1.0 - _1894) / _1903);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1903 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1894 + 1.0) / _1903);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2667 = frontier_phi_49_46_ladder;
        }
        float _2669 = isnan(_2329) ? _2012 : (isnan(_2012) ? _2329 : min(_2012, _2329));
        float _2670 = isnan(_2667) ? _2669 : (isnan(_2669) ? _2667 : min(_2669, _2667));
        float _2674 = (_2670 * _1897) + _1886;
        float _2675 = (_2670 * _1900) + _1890;
        float _2676 = (_2670 * _1903) + _1894;
        float _2677 = _2670 * 9.9999997473787516355514526367188e-05;
        float _2678 = (-1.0) - _2677;
        float _2680 = _2677 + 1.0;
        float frontier_phi_24_49_ladder;
        float frontier_phi_24_49_ladder_1;
        float frontier_phi_24_49_ladder_2;
        if ((_2676 > _2680) || ((_2676 < _2678) || ((_2675 > _2680) || ((_2675 < _2678) || ((_2674 < _2678) || (_2674 > _2680))))))
        {
            frontier_phi_24_49_ladder = 0.0;
            frontier_phi_24_49_ladder_1 = 0.0;
            frontier_phi_24_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2798 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2676, cbModelParam._m0[17u].z, fma(_2675, cbModelParam._m0[17u].y, _2674 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2676, cbModelParam._m0[18u].z, fma(_2675, cbModelParam._m0[18u].y, _2674 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2676, cbModelParam._m0[19u].z, fma(_2675, cbModelParam._m0[19u].y, _2674 * cbModelParam._m0[19u].x))), _1831);
            frontier_phi_24_49_ladder = _2798.z * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_1 = _2798.y * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_2 = _2798.x * cbModelParam._m0[1u].z;
        }
        _1922 = frontier_phi_24_49_ladder_2;
        _1924 = frontier_phi_24_49_ladder_1;
        _1926 = frontier_phi_24_49_ladder;
    }
    else
    {
        vec4 _1906 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_937, _938, _939), _1831);
        _1922 = _1906.x * cbModelParam._m0[1u].z;
        _1924 = _1906.y * cbModelParam._m0[1u].z;
        _1926 = _1906.z * cbModelParam._m0[1u].z;
    }
    float _1939 = (((_959 * _918) + _960) * _932) * ((cbModelParam._m0[1u].w * (_1922 - _1822)) + _1822);
    float _1941 = (((_959 * _919) + _960) * _932) * ((cbModelParam._m0[1u].w * (_1924 - _1824)) + _1824);
    float _1943 = (((_959 * _920) + _960) * _932) * ((cbModelParam._m0[1u].w * (_1926 - _1826)) + _1826);
    float _1946 = fma(_1943, cbSceneParam._m0[89u].z, fma(_1941, cbSceneParam._m0[89u].y, _1939 * cbSceneParam._m0[89u].x));
    float _1949 = fma(_1943, cbSceneParam._m0[90u].z, fma(_1941, cbSceneParam._m0[90u].y, _1939 * cbSceneParam._m0[90u].x));
    float _1952 = fma(_1943, cbSceneParam._m0[91u].z, fma(_1941, cbSceneParam._m0[91u].y, _1939 * cbSceneParam._m0[91u].x));
    float _1986 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1990 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1994 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1998 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1999 = _1986 / _1998;
    float _2000 = _1990 / _1998;
    float _2001 = _1994 / _1998;
    float _2148;
    float _2149;
    float _2150;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2028 = ((uint(_2001 > cbSceneParam._m0[59u].y) + uint(_2001 > cbSceneParam._m0[59u].x)) + uint(_2001 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2029 = _2028 + 43u;
        uint _2037 = _2028 + 44u;
        uint _2045 = _2028 + 45u;
        uint _2053 = _2028 + 46u;
        float _2064 = fma(_1998, cbSceneParam._m0[_2029].w, fma(_1994, cbSceneParam._m0[_2029].z, fma(_1990, cbSceneParam._m0[_2029].y, _1986 * cbSceneParam._m0[_2029].x)));
        float _2068 = fma(_1998, cbSceneParam._m0[_2037].w, fma(_1994, cbSceneParam._m0[_2037].z, fma(_1990, cbSceneParam._m0[_2037].y, _1986 * cbSceneParam._m0[_2037].x)));
        float _2076 = fma(_1998, cbSceneParam._m0[_2053].w, fma(_1994, cbSceneParam._m0[_2053].z, fma(_1990, cbSceneParam._m0[_2053].y, _1986 * cbSceneParam._m0[_2053].x)));
        float _2081 = cbSceneParam._m0[33u].z * _2076;
        float _2083 = cbSceneParam._m0[33u].w * _2076;
        float _2086 = fma(_1998, cbSceneParam._m0[_2045].w, fma(_1994, cbSceneParam._m0[_2045].z, fma(_1990, cbSceneParam._m0[_2045].y, _1986 * cbSceneParam._m0[_2045].x))) / _2076;
        float _2134 = (cbSceneParam._m0[33u].x - sqrt(((_2000 * _2000) + (_1999 * _1999)) + (_2001 * _2001))) * cbSceneParam._m0[33u].y;
        float _4507 = isnan(0.0) ? _2134 : (isnan(_2134) ? 0.0 : max(_2134, 0.0));
        float _2141 = (isnan(1.0) ? _4507 : (isnan(_4507) ? 1.0 : min(_4507, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2081 + _2064) / _2076, (_2083 + _2068) / _2076), _2086), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2083 + _2064) / _2076, (_2068 - _2081) / _2076), _2086), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2064 - _2081) / _2076, (_2068 - _2083) / _2076), _2086), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2064 - _2083) / _2076, (_2081 + _2068) / _2076), _2086), 0.0)).x), vec4(0.25)));
        _2148 = 1.0 - (_2141 * cbSceneParam._m0[34u].x);
        _2149 = 1.0 - (_2141 * cbSceneParam._m0[34u].y);
        _2150 = 1.0 - (_2141 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2148 = 1.0;
        _2149 = 1.0;
        _2150 = 1.0;
    }
    float _2214;
    float _2216;
    float _2218;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2202 = fma(_1998, cbSceneParam._m0[63u].w, fma(_1994, cbSceneParam._m0[63u].z, fma(_1990, cbSceneParam._m0[63u].y, _1986 * cbSceneParam._m0[63u].x)));
        float _2203 = fma(_1998, cbSceneParam._m0[60u].w, fma(_1994, cbSceneParam._m0[60u].z, fma(_1990, cbSceneParam._m0[60u].y, _1986 * cbSceneParam._m0[60u].x))) / _2202;
        float _2204 = fma(_1998, cbSceneParam._m0[61u].w, fma(_1994, cbSceneParam._m0[61u].z, fma(_1990, cbSceneParam._m0[61u].y, _1986 * cbSceneParam._m0[61u].x))) / _2202;
        float frontier_phi_36_35_ladder;
        float frontier_phi_36_35_ladder_1;
        float frontier_phi_36_35_ladder_2;
        if ((((_2203 >= cbSceneParam._m0[64u].x) && (_2204 >= cbSceneParam._m0[64u].y)) && (_2203 <= cbSceneParam._m0[64u].z)) && (_2204 <= cbSceneParam._m0[64u].w))
        {
            float _2342 = fma(_1998, cbSceneParam._m0[62u].w, fma(_1994, cbSceneParam._m0[62u].z, fma(_1990, cbSceneParam._m0[62u].y, _1986 * cbSceneParam._m0[62u].x))) / _2202;
            float _2346 = isnan(cbSceneParam._m0[41u].w) ? _2342 : (isnan(_2342) ? cbSceneParam._m0[41u].w : max(_2342, cbSceneParam._m0[41u].w));
            float _2389 = (cbSceneParam._m0[33u].x - sqrt(((_2000 * _2000) + (_1999 * _1999)) + (_2001 * _2001))) * cbSceneParam._m0[33u].y;
            float _4523 = isnan(0.0) ? _2389 : (isnan(_2389) ? 0.0 : max(_2389, 0.0));
            float _2396 = (isnan(1.0) ? _4523 : (isnan(_4523) ? 1.0 : min(_4523, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2203, cbSceneParam._m0[33u].w + _2204), _2346), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2203, _2204 - cbSceneParam._m0[33u].z), _2346), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2203 - cbSceneParam._m0[33u].z, _2204 - cbSceneParam._m0[33u].w), _2346), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2203 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2204), _2346), 0.0)).x), vec4(0.25)));
            float _2400 = 1.0 - (_2396 * cbSceneParam._m0[34u].x);
            float _2401 = 1.0 - (_2396 * cbSceneParam._m0[34u].y);
            float _2402 = 1.0 - (_2396 * cbSceneParam._m0[34u].z);
            frontier_phi_36_35_ladder = isnan(_2401) ? _2149 : (isnan(_2149) ? _2401 : min(_2149, _2401));
            frontier_phi_36_35_ladder_1 = isnan(_2402) ? _2150 : (isnan(_2150) ? _2402 : min(_2150, _2402));
            frontier_phi_36_35_ladder_2 = isnan(_2400) ? _2148 : (isnan(_2148) ? _2400 : min(_2148, _2400));
        }
        else
        {
            frontier_phi_36_35_ladder = _2149;
            frontier_phi_36_35_ladder_1 = _2150;
            frontier_phi_36_35_ladder_2 = _2148;
        }
        _2214 = frontier_phi_36_35_ladder_2;
        _2216 = frontier_phi_36_35_ladder;
        _2218 = frontier_phi_36_35_ladder_1;
    }
    else
    {
        _2214 = _2148;
        _2216 = _2149;
        _2218 = _2150;
    }
    uvec4 _2223 = floatBitsToUint(cbInstanceData._m0[_823 + 5u]);
    uint _2225 = _2223.x * 14u;
    uint _2226 = _2225 + 13u;
    float _2233 = _932 + (-1.0);
    float _2238 = (cbLight._m0[_2226].x * _2233) + 1.0;
    float _2239 = (cbLight._m0[_2226].y * _2233) + 1.0;
    float _2240 = (cbLight._m0[_2226].z * _2233) + 1.0;
    float _2241 = (cbLight._m0[_2226].w * _2233) + 1.0;
    uint _2242 = _2225 + 5u;
    float _2248 = isnan(1.0) ? _2239 : (isnan(_2239) ? 1.0 : min(_2239, 1.0));
    uint _2252 = _2225 + 4u;
    float _2261 = isnan(1.0) ? _2238 : (isnan(_2238) ? 1.0 : min(_2238, 1.0));
    uint _2265 = _2225 | 1u;
    float _2276 = dot(vec3(cbLight._m0[_2225].xyz), vec3(_557, _558, _559));
    float _2279 = dot(vec3(cbLight._m0[_2265].xyz), vec3(_557, _558, _559));
    float _4559 = isnan(0.0) ? _2276 : (isnan(_2276) ? 0.0 : max(_2276, 0.0));
    float _4570 = isnan(0.0) ? _2279 : (isnan(_2279) ? 0.0 : max(_2279, 0.0));
    float _2284 = (isnan(1.0) ? _4559 : (isnan(_4559) ? 1.0 : min(_4559, 1.0))) * 0.3183098733425140380859375;
    float _2286 = (isnan(1.0) ? _4570 : (isnan(_4570) ? 1.0 : min(_4570, 1.0))) * 0.3183098733425140380859375;
    float _2293 = ((cbLight._m0[_2242].x * _2248) * _2286) + (((cbLight._m0[_2252].x * _2214) * _2261) * _2284);
    float _2294 = ((_2248 * cbLight._m0[_2242].y) * _2286) + (((cbLight._m0[_2252].y * _2216) * _2261) * _2284);
    float _2295 = ((_2248 * cbLight._m0[_2242].z) * _2286) + (((cbLight._m0[_2252].z * _2218) * _2261) * _2284);
    uvec4 _2299 = floatBitsToUint(cbLight._m0[_2225 + 12u]);
    bool _2301 = _2299.x == 0u;
    float _2403;
    float _2405;
    float _2407;
    if (_2301)
    {
        _2403 = _2293;
        _2405 = _2294;
        _2407 = _2295;
    }
    else
    {
        uint _2411 = _2225 + 6u;
        float _2427 = (dot(vec3(cbLight._m0[_2225 + 2u].xyz), vec3(_557, _558, _559)) * 0.5) + 0.5;
        float _2428 = _2427 * _2427;
        float _4581 = isnan(0.0) ? _2428 : (isnan(_2428) ? 0.0 : max(_2428, 0.0));
        float _2429 = isnan(1.0) ? _4581 : (isnan(_4581) ? 1.0 : min(_4581, 1.0));
        float _2430 = isnan(1.0) ? _2240 : (isnan(_2240) ? 1.0 : min(_2240, 1.0));
        _2403 = (((cbLight._m0[_2411].x * 0.3183098733425140380859375) * _2429) * _2430) + _2293;
        _2405 = (((cbLight._m0[_2411].y * 0.3183098733425140380859375) * _2429) * _2430) + _2294;
        _2407 = (((cbLight._m0[_2411].z * 0.3183098733425140380859375) * _2429) * _2430) + _2295;
    }
    bool _2410 = _2299.y == 0u;
    float _2465;
    float _2467;
    float _2469;
    if (_2410)
    {
        _2465 = _2403;
        _2467 = _2405;
        _2469 = _2407;
    }
    else
    {
        uint _2638 = _2225 + 7u;
        float _2654 = (dot(vec3(cbLight._m0[_2225 + 3u].xyz), vec3(_557, _558, _559)) * 0.5) + 0.5;
        float _2655 = _2654 * _2654;
        float _4597 = isnan(0.0) ? _2655 : (isnan(_2655) ? 0.0 : max(_2655, 0.0));
        float _2656 = isnan(1.0) ? _4597 : (isnan(_4597) ? 1.0 : min(_4597, 1.0));
        float _2657 = isnan(1.0) ? _2241 : (isnan(_2241) ? 1.0 : min(_2241, 1.0));
        _2465 = (((cbLight._m0[_2638].x * 0.3183098733425140380859375) * _2656) * _2657) + _2403;
        _2467 = (((cbLight._m0[_2638].y * 0.3183098733425140380859375) * _2656) * _2657) + _2405;
        _2469 = (((cbLight._m0[_2638].z * 0.3183098733425140380859375) * _2656) * _2657) + _2407;
    }
    uint _2472 = _2225 + 8u;
    float _2485 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2225].w)) * _799) * 0.949999988079071044921875);
    float _2486 = _2485 * _2485;
    float _2487 = cbLight._m0[_2225].x + _583;
    float _2488 = cbLight._m0[_2225].y + _584;
    float _2489 = cbLight._m0[_2225].z + _585;
    float _2493 = inversesqrt(dot(vec3(_2487, _2488, _2489), vec3(_2487, _2488, _2489)));
    float _2494 = _2493 * _2487;
    float _2495 = _2493 * _2488;
    float _2496 = _2493 * _2489;
    float _2497 = dot(vec3(_557, _558, _559), vec3(cbLight._m0[_2225].xyz));
    float _4613 = isnan(0.0) ? _2497 : (isnan(_2497) ? 0.0 : max(_2497, 0.0));
    float _2500 = isnan(1.0) ? _4613 : (isnan(_4613) ? 1.0 : min(_4613, 1.0));
    float _4624 = isnan(0.0) ? _586 : (isnan(_586) ? 0.0 : max(_586, 0.0));
    float _2501 = isnan(1.0) ? _4624 : (isnan(_4624) ? 1.0 : min(_4624, 1.0));
    float _2502 = dot(vec3(_557, _558, _559), vec3(_2494, _2495, _2496));
    float _4635 = isnan(0.0) ? _2502 : (isnan(_2502) ? 0.0 : max(_2502, 0.0));
    float _2505 = isnan(1.0) ? _4635 : (isnan(_4635) ? 1.0 : min(_4635, 1.0));
    float _2506 = dot(vec3(cbLight._m0[_2225].xyz), vec3(_2494, _2495, _2496));
    float _4646 = isnan(0.0) ? _2506 : (isnan(_2506) ? 0.0 : max(_2506, 0.0));
    float _2510 = _2486 * _2486;
    float _2514 = ((_2505 * _2505) * (_2510 + (-1.0))) + 1.0;
    float _2522 = exp2(log2(1.0 - (isnan(1.0) ? _4646 : (isnan(_4646) ? 1.0 : min(_4646, 1.0)))) * 5.0);
    float _2523 = 0.959999978542327880859375 - _915;
    float _2525 = 0.959999978542327880859375 - _916;
    float _2526 = 0.959999978542327880859375 - _917;
    float _2533 = 1.0 - _2486;
    float _2544 = (0.5 / (((_2501 * ((_2500 * _2533) + _2486)) + 9.9999999392252902907785028219223e-09) + (((_2501 * _2533) + _2486) * _2500))) * _2500;
    float _4657 = isnan(0.0) ? _2544 : (isnan(_2544) ? 0.0 : max(_2544, 0.0));
    float _2546 = (isnan(1.0) ? _4657 : (isnan(_4657) ? 1.0 : min(_4657, 1.0))) * (_2510 / ((_2514 * _2514) * 3.141590118408203125));
    uint _2560 = _2225 + 9u;
    float _2571 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2265].w)) * _799) * 0.949999988079071044921875);
    float _2572 = _2571 * _2571;
    float _2573 = cbLight._m0[_2265].x + _583;
    float _2574 = cbLight._m0[_2265].y + _584;
    float _2575 = cbLight._m0[_2265].z + _585;
    float _2579 = inversesqrt(dot(vec3(_2573, _2574, _2575), vec3(_2573, _2574, _2575)));
    float _2580 = _2579 * _2573;
    float _2581 = _2579 * _2574;
    float _2582 = _2579 * _2575;
    float _2583 = dot(vec3(_557, _558, _559), vec3(cbLight._m0[_2265].xyz));
    float _4668 = isnan(0.0) ? _2583 : (isnan(_2583) ? 0.0 : max(_2583, 0.0));
    float _2586 = isnan(1.0) ? _4668 : (isnan(_4668) ? 1.0 : min(_4668, 1.0));
    float _2587 = dot(vec3(_557, _558, _559), vec3(_2580, _2581, _2582));
    float _4679 = isnan(0.0) ? _2587 : (isnan(_2587) ? 0.0 : max(_2587, 0.0));
    float _2590 = isnan(1.0) ? _4679 : (isnan(_4679) ? 1.0 : min(_4679, 1.0));
    float _2591 = dot(vec3(cbLight._m0[_2265].xyz), vec3(_2580, _2581, _2582));
    float _4690 = isnan(0.0) ? _2591 : (isnan(_2591) ? 0.0 : max(_2591, 0.0));
    float _2595 = _2572 * _2572;
    float _2599 = ((_2590 * _2590) * (_2595 + (-1.0))) + 1.0;
    float _2606 = exp2(log2(1.0 - (isnan(1.0) ? _4690 : (isnan(_4690) ? 1.0 : min(_4690, 1.0)))) * 5.0);
    float _2613 = 1.0 - _2572;
    float _2623 = (0.5 / (((_2501 * ((_2586 * _2613) + _2572)) + 9.9999999392252902907785028219223e-09) + (((_2501 * _2613) + _2572) * _2586))) * _2586;
    float _4701 = isnan(0.0) ? _2623 : (isnan(_2623) ? 0.0 : max(_2623, 0.0));
    float _2625 = (isnan(1.0) ? _4701 : (isnan(_4701) ? 1.0 : min(_4701, 1.0))) * (_2595 / ((_2599 * _2599) * 3.141590118408203125));
    float _2635 = (((((_2606 * _2523) + _918) * cbLight._m0[_2560].x) * _2625) * _2248) + ((((cbLight._m0[_2472].x * _2214) * ((_2522 * _2523) + _918)) * _2546) * _2261);
    float _2636 = (((((_2606 * _2525) + _919) * cbLight._m0[_2560].y) * _2625) * _2248) + ((((cbLight._m0[_2472].y * _2216) * ((_2522 * _2525) + _919)) * _2546) * _2261);
    float _2637 = (((((_2606 * _2526) + _920) * cbLight._m0[_2560].z) * _2625) * _2248) + ((((cbLight._m0[_2472].z * _2218) * ((_2522 * _2526) + _920)) * _2546) * _2261);
    float _2693;
    float _2695;
    float _2697;
    if (_2301)
    {
        _2693 = _2635;
        _2695 = _2636;
        _2697 = _2637;
    }
    else
    {
        uint _2699 = _2225 + 2u;
        uint _2703 = _2225 + 10u;
        float _2717 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2699].w)) * _799) * 0.949999988079071044921875);
        float _2718 = _2717 * _2717;
        float _2719 = cbLight._m0[_2699].x + _583;
        float _2720 = cbLight._m0[_2699].y + _584;
        float _2721 = cbLight._m0[_2699].z + _585;
        float _2725 = inversesqrt(dot(vec3(_2719, _2720, _2721), vec3(_2719, _2720, _2721)));
        float _2726 = _2725 * _2719;
        float _2727 = _2725 * _2720;
        float _2728 = _2725 * _2721;
        float _2729 = dot(vec3(_557, _558, _559), vec3(cbLight._m0[_2699].xyz));
        float _4712 = isnan(0.0) ? _2729 : (isnan(_2729) ? 0.0 : max(_2729, 0.0));
        float _2732 = isnan(1.0) ? _4712 : (isnan(_4712) ? 1.0 : min(_4712, 1.0));
        float _2733 = dot(vec3(_557, _558, _559), vec3(_2726, _2727, _2728));
        float _4723 = isnan(0.0) ? _2733 : (isnan(_2733) ? 0.0 : max(_2733, 0.0));
        float _2736 = isnan(1.0) ? _4723 : (isnan(_4723) ? 1.0 : min(_4723, 1.0));
        float _2737 = dot(vec3(cbLight._m0[_2699].xyz), vec3(_2726, _2727, _2728));
        float _4734 = isnan(0.0) ? _2737 : (isnan(_2737) ? 0.0 : max(_2737, 0.0));
        float _2741 = _2718 * _2718;
        float _2745 = ((_2736 * _2736) * (_2741 + (-1.0))) + 1.0;
        float _2752 = exp2(log2(1.0 - (isnan(1.0) ? _4734 : (isnan(_4734) ? 1.0 : min(_4734, 1.0)))) * 5.0);
        float _2759 = 1.0 - _2718;
        float _2769 = (0.5 / (((_2501 * ((_2732 * _2759) + _2718)) + 9.9999999392252902907785028219223e-09) + (((_2501 * _2759) + _2718) * _2732))) * _2732;
        float _4745 = isnan(0.0) ? _2769 : (isnan(_2769) ? 0.0 : max(_2769, 0.0));
        float _2771 = (isnan(1.0) ? _4745 : (isnan(_4745) ? 1.0 : min(_4745, 1.0))) * (_2741 / ((_2745 * _2745) * 3.141590118408203125));
        float _2772 = isnan(1.0) ? _2240 : (isnan(_2240) ? 1.0 : min(_2240, 1.0));
        _2693 = (((((_2752 * _2523) + _918) * cbLight._m0[_2703].x) * _2771) * _2772) + _2635;
        _2695 = (((((_2752 * _2525) + _919) * cbLight._m0[_2703].y) * _2771) * _2772) + _2636;
        _2697 = (((((_2752 * _2526) + _920) * cbLight._m0[_2703].z) * _2771) * _2772) + _2637;
    }
    float _2803;
    float _2805;
    float _2807;
    if (_2410)
    {
        _2803 = _2693;
        _2805 = _2695;
        _2807 = _2697;
    }
    else
    {
        uint _2814 = _2225 + 3u;
        uint _2818 = _2225 + 11u;
        float _2832 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2814].w)) * _799) * 0.949999988079071044921875);
        float _2833 = _2832 * _2832;
        float _2834 = cbLight._m0[_2814].x + _583;
        float _2835 = cbLight._m0[_2814].y + _584;
        float _2836 = cbLight._m0[_2814].z + _585;
        float _2840 = inversesqrt(dot(vec3(_2834, _2835, _2836), vec3(_2834, _2835, _2836)));
        float _2841 = _2840 * _2834;
        float _2842 = _2840 * _2835;
        float _2843 = _2840 * _2836;
        float _2844 = dot(vec3(_557, _558, _559), vec3(cbLight._m0[_2814].xyz));
        float _4761 = isnan(0.0) ? _2844 : (isnan(_2844) ? 0.0 : max(_2844, 0.0));
        float _2847 = isnan(1.0) ? _4761 : (isnan(_4761) ? 1.0 : min(_4761, 1.0));
        float _2848 = dot(vec3(_557, _558, _559), vec3(_2841, _2842, _2843));
        float _4772 = isnan(0.0) ? _2848 : (isnan(_2848) ? 0.0 : max(_2848, 0.0));
        float _2851 = isnan(1.0) ? _4772 : (isnan(_4772) ? 1.0 : min(_4772, 1.0));
        float _2852 = dot(vec3(cbLight._m0[_2814].xyz), vec3(_2841, _2842, _2843));
        float _4783 = isnan(0.0) ? _2852 : (isnan(_2852) ? 0.0 : max(_2852, 0.0));
        float _2856 = _2833 * _2833;
        float _2860 = ((_2851 * _2851) * (_2856 + (-1.0))) + 1.0;
        float _2867 = exp2(log2(1.0 - (isnan(1.0) ? _4783 : (isnan(_4783) ? 1.0 : min(_4783, 1.0)))) * 5.0);
        float _2874 = 1.0 - _2833;
        float _2884 = (0.5 / (((_2501 * ((_2847 * _2874) + _2833)) + 9.9999999392252902907785028219223e-09) + (((_2501 * _2874) + _2833) * _2847))) * _2847;
        float _4794 = isnan(0.0) ? _2884 : (isnan(_2884) ? 0.0 : max(_2884, 0.0));
        float _2886 = (isnan(1.0) ? _4794 : (isnan(_4794) ? 1.0 : min(_4794, 1.0))) * (_2856 / ((_2860 * _2860) * 3.141590118408203125));
        float _2887 = isnan(1.0) ? _2241 : (isnan(_2241) ? 1.0 : min(_2241, 1.0));
        _2803 = (((((_2867 * _2523) + _918) * cbLight._m0[_2818].x) * _2886) * _2887) + _2693;
        _2805 = (((((_2867 * _2525) + _919) * cbLight._m0[_2818].y) * _2886) * _2887) + _2695;
        _2807 = (((((_2867 * _2526) + _920) * cbLight._m0[_2818].z) * _2886) * _2887) + _2697;
    }
    float _2952;
    float _2954;
    float _2956;
    float _2958;
    float _2960;
    float _2962;
    if (_2223.y == 0u)
    {
        uvec4 _2908 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2909 = _2908.x;
        uint _2920 = uint((float(_2908.y) * floor(float(uint(cbSceneParam._m0[85u].y * _721) / _2909))) + floor(float(uint(cbSceneParam._m0[85u].x * _720) / _2909)));
        float _2930 = (log2(_2001 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2931 = isnan(0.0) ? _2930 : (isnan(_2930) ? 0.0 : max(_2930, 0.0));
        uint _2934 = uint(isnan(14.0) ? _2931 : (isnan(_2931) ? 14.0 : min(_2931, 14.0)));
        uvec4 _2939 = texelFetch(g_lightClusterGridBuffer, int(((_2934 << 2u) + (_2920 << 6u)) >> 2u));
        uint _2940 = _2939.x;
        uint _2941 = _2908.z;
        float _3055;
        float _3057;
        float _3059;
        float _3061;
        float _3063;
        float _3065;
        if (((((1u << ((_2941 >> 4u) & 15u)) + 4294967295u) & _2940) == 0u) || ((_2941 & 240u) == 0u))
        {
            _3055 = 0.0;
            _3057 = 0.0;
            _3059 = 0.0;
            _3061 = 0.0;
            _3063 = 0.0;
            _3065 = 0.0;
        }
        else
        {
            float _3056;
            float _3058;
            float _3060;
            float _3062;
            float _3064;
            float _3066;
            float _3208 = 0.0;
            float _3209 = 0.0;
            float _3210 = 0.0;
            float _3211 = 0.0;
            float _3212 = 0.0;
            float _3213 = 0.0;
            uint _3214 = 0u;
            uint _3223;
            bool _3224;
            for (;;)
            {
                _3223 = texelFetch(g_lightClassification, int((((_2934 << 5u) + (_2920 << 9u)) + (_3214 << 2u)) >> 2u)).x;
                _3224 = _3223 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_3224)
                {
                    frontier_phi_68_pred = _3213;
                    frontier_phi_68_pred_1 = _3212;
                    frontier_phi_68_pred_2 = _3211;
                    frontier_phi_68_pred_3 = _3209;
                    frontier_phi_68_pred_4 = _3208;
                    frontier_phi_68_pred_5 = _3210;
                }
                else
                {
                    float _3332;
                    float _3333;
                    float _3334;
                    float _3335;
                    float _3336;
                    float _3337;
                    uint _3338;
                    _3332 = _3208;
                    _3333 = _3209;
                    _3334 = _3210;
                    _3335 = _3211;
                    _3336 = _3212;
                    _3337 = _3213;
                    _3338 = _3223;
                    float _3264;
                    float _3265;
                    float _3266;
                    float _3267;
                    float _3268;
                    float _3269;
                    for (;;)
                    {
                        uint _3342 = uint(findLSB(_3338)) + (_3214 << 5u);
                        uint _3339 = (_3338 + 4294967295u) & _3338;
                        uint _3344 = _3342 * 48u;
                        vec4 _3358 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3344)).x, texelFetch(g_PointLightRenderingBuffer, int(_3344 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3344 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3344 + 3u)).x));
                        uint _3364 = (_3342 * 48u) + 4u;
                        vec4 _3377 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3364)).x, texelFetch(g_PointLightRenderingBuffer, int(_3364 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3364 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3364 + 3u)).x));
                        uint _3383 = (_3342 * 48u) + 8u;
                        vec3 _3394 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3383)).x, texelFetch(g_PointLightRenderingBuffer, int(_3383 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3383 + 2u)).x));
                        float _3398 = _3358.x - _1999;
                        float _3399 = _3358.y - _2000;
                        float _3400 = _3358.z - _2001;
                        float _3401 = dot(vec3(_3398, _3399, _3400), vec3(_3398, _3399, _3400));
                        float _3404 = inversesqrt(_3401);
                        float _3405 = _3404 * _3398;
                        float _3406 = _3404 * _3399;
                        float _3407 = _3404 * _3400;
                        float _3408 = dot(vec3(_744, _747, _750), vec3(_3405, _3406, _3407));
                        float _3413 = 1.0 - (_3401 * _3358.w);
                        float _4820 = isnan(0.0) ? _3413 : (isnan(_3413) ? 0.0 : max(_3413, 0.0));
                        float _3414 = isnan(1.0) ? _4820 : (isnan(_4820) ? 1.0 : min(_4820, 1.0));
                        float _3415 = sqrt(_3401) * _3377.w;
                        float _3418 = 1.39999997615814208984375 / (_3415 + 1.39999997615814208984375);
                        float _3419 = _3418 * _3418;
                        float _3422 = ((1.0 - _3419) * _3408) + _3419;
                        float _3425 = _3415 * _3415;
                        float _3428 = ((isnan(0.0) ? _3422 : (isnan(_3422) ? 0.0 : max(_3422, 0.0))) * _3414) / ((_3425 * 0.699999988079071044921875) + 1.0);
                        float _3432 = (-0.0) - _1999;
                        float _3433 = (-0.0) - _2000;
                        float _3434 = (-0.0) - _2001;
                        float _3438 = inversesqrt(dot(vec3(_3432, _3433, _3434), vec3(_3432, _3433, _3434)));
                        float _3439 = _3438 * _3432;
                        float _3440 = _3438 * _3433;
                        float _3441 = _3438 * _3434;
                        float _3448 = exp2(log2(1.0 / ((_3425 * 3.5) + 5.0)) * 0.25);
                        float _3449 = 1.0 - _942;
                        float _3456 = sqrt(1.0 - ((1.0 - (_3449 * _3449)) * (1.0 - (_3448 * _3448))));
                        float _3457 = _3456 * _3456;
                        float _3458 = _3457 * _3457;
                        float _3459 = _3439 + _3405;
                        float _3460 = _3440 + _3406;
                        float _3461 = _3441 + _3407;
                        float _3465 = inversesqrt(dot(vec3(_3459, _3460, _3461), vec3(_3459, _3460, _3461)));
                        float _3469 = dot(vec3(_744, _747, _750), vec3(_3439, _3440, _3441));
                        float _4836 = isnan(0.0) ? _3469 : (isnan(_3469) ? 0.0 : max(_3469, 0.0));
                        float _3472 = isnan(1.0) ? _4836 : (isnan(_4836) ? 1.0 : min(_4836, 1.0));
                        float _3473 = dot(vec3(_744, _747, _750), vec3(_3465 * _3459, _3465 * _3460, _3465 * _3461));
                        float _4847 = isnan(0.0) ? _3473 : (isnan(_3473) ? 0.0 : max(_3473, 0.0));
                        float _3476 = isnan(1.0) ? _4847 : (isnan(_4847) ? 1.0 : min(_4847, 1.0));
                        float _3480 = ((_3476 * _3476) * (_3458 + (-1.0))) + 1.0;
                        float _3481 = _3418 * _3457;
                        float _3482 = _3481 * _3481;
                        float _3485 = ((1.0 - _3482) * _3408) + _3482;
                        float _4858 = isnan(0.0) ? _3485 : (isnan(_3485) ? 0.0 : max(_3485, 0.0));
                        float _3486 = isnan(1.0) ? _4858 : (isnan(_4858) ? 1.0 : min(_4858, 1.0));
                        float _3487 = 1.0 - _3457;
                        float _3497 = (0.5 / (((_3486 * ((_3472 * _3487) + _3457)) + 9.9999999392252902907785028219223e-09) + (((_3486 * _3487) + _3457) * _3472))) * _3486;
                        float _4869 = isnan(0.0) ? _3497 : (isnan(_3497) ? 0.0 : max(_3497, 0.0));
                        float _3508 = (((_3458 * 3.1415927410125732421875) * (isnan(1.0) ? _4869 : (isnan(_4869) ? 1.0 : min(_4869, 1.0)))) / ((_3480 * _3480) * ((_3425 * 2.1991131305694580078125) + 3.141590118408203125))) * _3414;
                        _3267 = (_3428 * _3377.x) + _3335;
                        _3268 = (_3428 * _3377.y) + _3336;
                        _3269 = (_3428 * _3377.z) + _3337;
                        _3264 = (_3508 * _3394.x) + _3332;
                        _3265 = (_3508 * _3394.y) + _3333;
                        _3266 = (_3508 * _3394.z) + _3334;
                        if (_3339 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3332 = _3264;
                            _3333 = _3265;
                            _3334 = _3266;
                            _3335 = _3267;
                            _3336 = _3268;
                            _3337 = _3269;
                            _3338 = _3339;
                        }
                    }
                    frontier_phi_68_pred = _3269;
                    frontier_phi_68_pred_1 = _3268;
                    frontier_phi_68_pred_2 = _3267;
                    frontier_phi_68_pred_3 = _3265;
                    frontier_phi_68_pred_4 = _3264;
                    frontier_phi_68_pred_5 = _3266;
                }
                _3066 = frontier_phi_68_pred;
                _3064 = frontier_phi_68_pred_1;
                _3062 = frontier_phi_68_pred_2;
                _3058 = frontier_phi_68_pred_3;
                _3056 = frontier_phi_68_pred_4;
                _3060 = frontier_phi_68_pred_5;
                uint _3215 = _3214 + 1u;
                if (_3215 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3208 = _3056;
                    _3209 = _3058;
                    _3210 = _3060;
                    _3211 = _3062;
                    _3212 = _3064;
                    _3213 = _3066;
                    _3214 = _3215;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3055 = _3056;
            _3057 = _3058;
            _3059 = _3060;
            _3061 = _3062;
            _3063 = _3064;
            _3065 = _3066;
        }
        uvec4 _3069 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3070 = _3069.z;
        uint _3072 = (_3070 >> 8u) & 15u;
        float _3176;
        float _3178;
        float _3180;
        float _3182;
        float _3184;
        float _3186;
        if (((4294967295u << _3072) & _2940) == 0u)
        {
            _3176 = _3055;
            _3178 = _3057;
            _3180 = _3059;
            _3182 = _3061;
            _3184 = _3063;
            _3186 = _3065;
        }
        else
        {
            float _3201 = inversesqrt(dot(vec3(_1999, _2000, _2001), vec3(_1999, _2000, _2001)));
            float _3202 = _3201 * _1999;
            float _3203 = _3201 * _2000;
            float _3204 = _3201 * _2001;
            float frontier_phi_62_63_ladder;
            float frontier_phi_62_63_ladder_1;
            float frontier_phi_62_63_ladder_2;
            float frontier_phi_62_63_ladder_3;
            float frontier_phi_62_63_ladder_4;
            float frontier_phi_62_63_ladder_5;
            if (_3072 < ((_3070 >> 12u) & 15u))
            {
                float _3177;
                float _3179;
                float _3181;
                float _3183;
                float _3185;
                float _3187;
                float _3315 = _3055;
                float _3316 = _3057;
                float _3317 = _3059;
                float _3318 = _3061;
                float _3319 = _3063;
                float _3320 = _3065;
                uint _3321 = _3072;
                uint _3330;
                bool _3331;
                for (;;)
                {
                    _3330 = texelFetch(g_lightClassification, int((((_2934 << 5u) + (_2920 << 9u)) + (_3321 << 2u)) >> 2u)).x;
                    _3331 = _3330 == 0u;
                    float frontier_phi_74_pred;
                    float frontier_phi_74_pred_1;
                    float frontier_phi_74_pred_2;
                    float frontier_phi_74_pred_3;
                    float frontier_phi_74_pred_4;
                    float frontier_phi_74_pred_5;
                    if (_3331)
                    {
                        frontier_phi_74_pred = _3317;
                        frontier_phi_74_pred_1 = _3316;
                        frontier_phi_74_pred_2 = _3315;
                        frontier_phi_74_pred_3 = _3320;
                        frontier_phi_74_pred_4 = _3319;
                        frontier_phi_74_pred_5 = _3318;
                    }
                    else
                    {
                        float _3513;
                        float _3514;
                        float _3515;
                        float _3516;
                        float _3517;
                        float _3518;
                        float _3808;
                        float _3809;
                        float _3810;
                        float _3811;
                        float _3812;
                        float _3813;
                        float _3526 = _3315;
                        float _3527 = _3316;
                        float _3528 = _3317;
                        float _3529 = _3318;
                        float _3530 = _3319;
                        float _3531 = _3320;
                        uint _3532 = _3330;
                        uint _3533;
                        vec4 _3558;
                        float _3559;
                        vec4 _3574;
                        vec3 _3586;
                        vec4 _3601;
                        vec4 _3617;
                        float _3664;
                        bool _3665;
                        for (;;)
                        {
                            uint _3543 = ((_3321 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3532));
                            _3533 = (_3532 + 4294967295u) & _3532;
                            uint _3545 = _3543 * 40u;
                            _3558 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3545)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3545 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3545 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3545 + 3u)).x));
                            _3559 = _3558.w;
                            uint _3561 = (_3543 * 40u) + 4u;
                            _3574 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3561)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3561 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3561 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3561 + 3u)).x));
                            uint _3576 = (_3543 * 40u) + 8u;
                            _3586 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3576)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3576 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3576 + 2u)).x));
                            uint _3588 = (_3543 * 40u) + 16u;
                            _3601 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3588)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3588 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3588 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3588 + 3u)).x));
                            uint _3604 = (_3543 * 40u) + 20u;
                            _3617 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3604)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3604 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3604 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3604 + 3u)).x));
                            uint _3620 = (_3543 * 40u) + 24u;
                            vec4 _3633 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3620)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3620 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3620 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3620 + 3u)).x));
                            uint _3639 = (_3543 * 40u) + 28u;
                            vec4 _3652 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3639)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3639 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3639 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3639 + 3u)).x));
                            _3664 = fma(_2001, _3652.z, fma(_2000, _3652.y, _3652.x * _1999)) + _3652.w;
                            _3665 = !((fma(_2001, _3633.z, fma(_2000, _3633.y, _3633.x * _1999)) + _3633.w) <= 0.0);
                            float frontier_phi_80_pred;
                            float frontier_phi_80_pred_1;
                            float frontier_phi_80_pred_2;
                            float frontier_phi_80_pred_3;
                            float frontier_phi_80_pred_4;
                            float frontier_phi_80_pred_5;
                            if (_3665)
                            {
                                float _3692 = _3558.x - _1999;
                                float _3693 = _3558.y - _2000;
                                float _3694 = _3558.z - _2001;
                                float _3695 = dot(vec3(_3692, _3693, _3694), vec3(_3692, _3693, _3694));
                                float _3698 = inversesqrt(_3695);
                                float _3699 = _3698 * _3692;
                                float _3700 = _3698 * _3693;
                                float _3701 = _3698 * _3694;
                                float _3705 = 1.0 - (_3695 / (_3559 * _3559));
                                float _4880 = isnan(0.0) ? _3705 : (isnan(_3705) ? 0.0 : max(_3705, 0.0));
                                float _3706 = isnan(1.0) ? _4880 : (isnan(_4880) ? 1.0 : min(_4880, 1.0));
                                float _3710 = sqrt(_3695) * _3574.w;
                                float _3712 = 1.39999997615814208984375 / (_3710 + 1.39999997615814208984375);
                                float _3713 = _3712 * _3712;
                                float _3716 = ((1.0 - _3713) * dot(vec3(_3699, _3700, _3701), vec3(_744, _747, _750))) + _3713;
                                float _3719 = _3710 * _3710;
                                float _3723 = (fma(_2001, _3601.z, fma(_2000, _3601.y, _3601.x * _1999)) + _3601.w) / _3664;
                                float _3724 = (fma(_2001, _3617.z, fma(_2000, _3617.y, _3617.x * _1999)) + _3617.w) / _3664;
                                float _3728 = 1.0 - dot(vec2(_3723, _3724), vec2(_3723, _3724));
                                float _4896 = isnan(0.0) ? _3728 : (isnan(_3728) ? 0.0 : max(_3728, 0.0));
                                float _3729 = isnan(1.0) ? _4896 : (isnan(_4896) ? 1.0 : min(_4896, 1.0));
                                float _3730 = _3729 * (((isnan(0.0) ? _3716 : (isnan(_3716) ? 0.0 : max(_3716, 0.0))) * _3706) / ((_3719 * 0.699999988079071044921875) + 1.0));
                                float _3742 = exp2(log2(1.0 / ((_3719 * 3.5) + 5.0)) * 0.25);
                                float _3743 = 1.0 - _942;
                                float _3750 = sqrt(1.0 - ((1.0 - (_3743 * _3743)) * (1.0 - (_3742 * _3742))));
                                float _3751 = _3750 * _3750;
                                float _3752 = _3751 * _3751;
                                float _3753 = _3699 - _3202;
                                float _3754 = _3700 - _3203;
                                float _3755 = _3701 - _3204;
                                float _3759 = inversesqrt(dot(vec3(_3753, _3754, _3755), vec3(_3753, _3754, _3755)));
                                float _3763 = dot(vec3(_744, _747, _750), vec3((-0.0) - _3202, (-0.0) - _3203, (-0.0) - _3204));
                                float _4907 = isnan(0.0) ? _3763 : (isnan(_3763) ? 0.0 : max(_3763, 0.0));
                                float _3766 = isnan(1.0) ? _4907 : (isnan(_4907) ? 1.0 : min(_4907, 1.0));
                                float _3767 = dot(vec3(_744, _747, _750), vec3(_3759 * _3753, _3759 * _3754, _3759 * _3755));
                                float _4918 = isnan(0.0) ? _3767 : (isnan(_3767) ? 0.0 : max(_3767, 0.0));
                                float _3770 = isnan(1.0) ? _4918 : (isnan(_4918) ? 1.0 : min(_4918, 1.0));
                                float _3774 = ((_3770 * _3770) * (_3752 + (-1.0))) + 1.0;
                                float _3775 = _3712 * _3751;
                                float _3776 = _3775 * _3775;
                                float _3782 = ((1.0 - _3776) * dot(vec3(_744, _747, _750), vec3(_3699, _3700, _3701))) + _3776;
                                float _4929 = isnan(0.0) ? _3782 : (isnan(_3782) ? 0.0 : max(_3782, 0.0));
                                float _3783 = isnan(1.0) ? _4929 : (isnan(_4929) ? 1.0 : min(_4929, 1.0));
                                float _3784 = 1.0 - _3751;
                                float _3794 = (0.5 / (((_3783 * ((_3766 * _3784) + _3751)) + 9.9999999392252902907785028219223e-09) + (((_3783 * _3784) + _3751) * _3766))) * _3783;
                                float _4940 = isnan(0.0) ? _3794 : (isnan(_3794) ? 0.0 : max(_3794, 0.0));
                                float _3804 = (_3729 * _3706) * (((_3752 * 3.1415927410125732421875) * (isnan(1.0) ? _4940 : (isnan(_4940) ? 1.0 : min(_4940, 1.0)))) / ((_3774 * _3774) * ((_3719 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_80_pred = _3804 * _3586.z;
                                frontier_phi_80_pred_1 = _3804 * _3586.y;
                                frontier_phi_80_pred_2 = _3804 * _3586.x;
                                frontier_phi_80_pred_3 = _3730 * _3574.z;
                                frontier_phi_80_pred_4 = _3730 * _3574.y;
                                frontier_phi_80_pred_5 = _3730 * _3574.x;
                            }
                            else
                            {
                                frontier_phi_80_pred = 0.0;
                                frontier_phi_80_pred_1 = 0.0;
                                frontier_phi_80_pred_2 = 0.0;
                                frontier_phi_80_pred_3 = 0.0;
                                frontier_phi_80_pred_4 = 0.0;
                                frontier_phi_80_pred_5 = 0.0;
                            }
                            _3810 = frontier_phi_80_pred;
                            _3809 = frontier_phi_80_pred_1;
                            _3808 = frontier_phi_80_pred_2;
                            _3813 = frontier_phi_80_pred_3;
                            _3812 = frontier_phi_80_pred_4;
                            _3811 = frontier_phi_80_pred_5;
                            _3516 = _3811 + _3529;
                            _3517 = _3812 + _3530;
                            _3518 = _3813 + _3531;
                            _3513 = _3808 + _3526;
                            _3514 = _3809 + _3527;
                            _3515 = _3810 + _3528;
                            if (_3533 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3526 = _3513;
                                _3527 = _3514;
                                _3528 = _3515;
                                _3529 = _3516;
                                _3530 = _3517;
                                _3531 = _3518;
                                _3532 = _3533;
                                continue;
                            }
                        }
                        frontier_phi_74_pred = _3515;
                        frontier_phi_74_pred_1 = _3514;
                        frontier_phi_74_pred_2 = _3513;
                        frontier_phi_74_pred_3 = _3518;
                        frontier_phi_74_pred_4 = _3517;
                        frontier_phi_74_pred_5 = _3516;
                    }
                    _3181 = frontier_phi_74_pred;
                    _3179 = frontier_phi_74_pred_1;
                    _3177 = frontier_phi_74_pred_2;
                    _3187 = frontier_phi_74_pred_3;
                    _3185 = frontier_phi_74_pred_4;
                    _3183 = frontier_phi_74_pred_5;
                    uint _3322 = _3321 + 1u;
                    if (_3322 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3315 = _3177;
                        _3316 = _3179;
                        _3317 = _3181;
                        _3318 = _3183;
                        _3319 = _3185;
                        _3320 = _3187;
                        _3321 = _3322;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_62_63_ladder = _3185;
                frontier_phi_62_63_ladder_1 = _3183;
                frontier_phi_62_63_ladder_2 = _3181;
                frontier_phi_62_63_ladder_3 = _3187;
                frontier_phi_62_63_ladder_4 = _3179;
                frontier_phi_62_63_ladder_5 = _3177;
            }
            else
            {
                frontier_phi_62_63_ladder = _3063;
                frontier_phi_62_63_ladder_1 = _3061;
                frontier_phi_62_63_ladder_2 = _3059;
                frontier_phi_62_63_ladder_3 = _3065;
                frontier_phi_62_63_ladder_4 = _3057;
                frontier_phi_62_63_ladder_5 = _3055;
            }
            _3176 = frontier_phi_62_63_ladder_5;
            _3178 = frontier_phi_62_63_ladder_4;
            _3180 = frontier_phi_62_63_ladder_2;
            _3182 = frontier_phi_62_63_ladder_1;
            _3184 = frontier_phi_62_63_ladder;
            _3186 = frontier_phi_62_63_ladder_3;
        }
        float _3191 = isnan(1.0) ? _932 : (isnan(_932) ? 1.0 : min(_932, 1.0));
        _2952 = (_3191 * _3182) + _2465;
        _2954 = (_3191 * _3184) + _2467;
        _2956 = (_3191 * _3186) + _2469;
        _2958 = ((_3176 * _918) * _3191) + _2803;
        _2960 = ((_3178 * _919) * _3191) + _2805;
        _2962 = ((_3180 * _920) * _3191) + _2807;
    }
    else
    {
        _2952 = _2465;
        _2954 = _2467;
        _2956 = _2469;
        _2958 = _2803;
        _2960 = _2805;
        _2962 = _2807;
    }
    uint _2968 = _825 + uint(cbMatDynParam._m0[0u].w);
    float _2974 = cbInstanceData._m0[_2968].x * (((((cbMatDynParam._m0[8u].x - cbMatDynParam._m0[7u].x) * _599) + cbMatDynParam._m0[7u].x) + (((((cbMtdParam._m0[12u].x * cbMtdParam._m0[16u].z) * cbMtdParam._m0[15u].w) * _501) * _514.x) * _628)) + (((_657 - (_657 * _565)) + (cbMatDynParam._m0[11u].x * _688)) * cbMatDynParam._m0[9u].x));
    float _2975 = cbInstanceData._m0[_2968].y * (((((cbMatDynParam._m0[8u].y - cbMatDynParam._m0[7u].y) * _599) + cbMatDynParam._m0[7u].y) + (((((cbMtdParam._m0[12u].y * cbMtdParam._m0[16u].z) * cbMtdParam._m0[15u].w) * _501) * _514.y) * _628)) + (((_659 - (_659 * _565)) + (cbMatDynParam._m0[11u].y * _688)) * cbMatDynParam._m0[9u].y));
    float _2976 = cbInstanceData._m0[_2968].z * (((((cbMatDynParam._m0[8u].z - cbMatDynParam._m0[7u].z) * _599) + cbMatDynParam._m0[7u].z) + (((((cbMtdParam._m0[12u].z * cbMtdParam._m0[16u].z) * cbMtdParam._m0[15u].w) * _501) * _514.z) * _628)) + (((_661 - (_661 * _565)) + (cbMatDynParam._m0[11u].z * _688)) * cbMatDynParam._m0[9u].z));
    float _4956 = isnan(0.0) ? _909 : (isnan(_909) ? 0.0 : max(_909, 0.0));
    float _4967 = isnan(0.0) ? _910 : (isnan(_910) ? 0.0 : max(_910, 0.0));
    float _4978 = isnan(0.0) ? _911 : (isnan(_911) ? 0.0 : max(_911, 0.0));
    float _4989 = isnan(0.0) ? _560 : (isnan(_560) ? 0.0 : max(_560, 0.0));
    float _2994 = (((isnan(1.0) ? _4956 : (isnan(_4956) ? 1.0 : min(_4956, 1.0))) * (_2952 + ((isnan(0.0) ? _1655 : (isnan(_1655) ? 0.0 : max(_1655, 0.0))) * _932))) + ((_2958 + ((isnan(0.0) ? _1946 : (isnan(_1946) ? 0.0 : max(_1946, 0.0))) * _1731)) * cbPerFrame._m0[3u].x)) + _2974;
    float _2996 = (_2975 + ((_2960 + ((isnan(0.0) ? _1949 : (isnan(_1949) ? 0.0 : max(_1949, 0.0))) * _1731)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4967 : (isnan(_4967) ? 1.0 : min(_4967, 1.0))) * (_2954 + ((isnan(0.0) ? _1658 : (isnan(_1658) ? 0.0 : max(_1658, 0.0))) * _932)));
    float _2998 = (_2976 + ((_2962 + ((isnan(0.0) ? _1952 : (isnan(_1952) ? 0.0 : max(_1952, 0.0))) * _1731)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4978 : (isnan(_4978) ? 1.0 : min(_4978, 1.0))) * (_2956 + ((isnan(0.0) ? _1661 : (isnan(_1661) ? 0.0 : max(_1661, 0.0))) * _932)));
    float _3016 = ((cbMtdParam._m0[2u].w - cbMatDynParam._m0[12u].y) * _628) + cbMatDynParam._m0[12u].y;
    float _3021 = cbInstanceData._m0[_823 + 6u].w * (isnan(1.0) ? _4989 : (isnan(_4989) ? 1.0 : min(_4989, 1.0)));
    float _3026 = _720 / cbSceneParam._m0[86u].x;
    float _3027 = _721 / cbSceneParam._m0[86u].y;
    vec4 _3041 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3026, _3027, (log2((isnan(cbSceneParam._m0[77u].w) ? _714 : (isnan(_714) ? cbSceneParam._m0[77u].w : min(_714, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3043 = _3041.x;
    float _3044 = _3041.y;
    float _3045 = _3041.z;
    float _3046 = _3041.w;
    float _3117;
    float _3119;
    float _3121;
    float _3123;
    if (_714 > cbSceneParam._m0[78u].w)
    {
        float _3080 = isnan(_714) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _714 : min(cbSceneParam._m0[80u].w, _714));
        float _3081 = _3080 / _714;
        float _3092 = _3081 * _293;
        float _3093 = _294 * _3081;
        float _3094 = (-0.0) - _3093;
        float _3095 = _3081 * _295;
        float _3097 = (cbSceneParam._m0[77u].w * _3094) / _3080;
        float _3098 = _3097 + cbSceneParam._m0[79u].w;
        float _3099 = cbSceneParam._m0[79u].w - _3093;
        float _3105 = sqrt(((_3092 * _3092) + (_3093 * _3093)) + (_3095 * _3095));
        float _3108 = (1.0 - (cbSceneParam._m0[77u].w / _3080)) * _3105;
        float _3113 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3115 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3277;
        if (abs((_3094 - _3097) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3277 = ((((_3098 > 0.0) ? exp2(_3113 * _3098) : (2.0 - exp2(_3115 * _3098))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3108;
        }
        else
        {
            float _3237 = 1.0 / cbSceneParam._m0[80u].x;
            float _3238 = isnan(_3099) ? _3098 : (isnan(_3098) ? _3099 : max(_3098, _3099));
            float _3239 = isnan(_3099) ? _3098 : (isnan(_3098) ? _3099 : min(_3098, _3099));
            float _3248 = isnan(0.0) ? _3238 : (isnan(_3238) ? 0.0 : min(_3238, 0.0));
            float _3249 = isnan(0.0) ? _3239 : (isnan(_3239) ? 0.0 : min(_3239, 0.0));
            _3277 = ((abs(_3105 / _3094) * cbSceneParam._m0[80u].y) * ((((_3248 - _3249) * 2.0) - ((exp2(_3113 * (isnan(0.0) ? _3238 : (isnan(_3238) ? 0.0 : max(_3238, 0.0)))) - exp2(_3113 * (isnan(0.0) ? _3239 : (isnan(_3239) ? 0.0 : max(_3239, 0.0))))) * _3237)) - ((exp2(_3115 * _3248) - exp2(_3115 * _3249)) * _3237))) + (_3108 * cbSceneParam._m0[80u].z);
        }
        vec4 _3279 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3026, _3027, 1.0), 0.0);
        float _3288 = exp2((_3277 * (-1.44269502162933349609375)) * (1.0 - _3279.w));
        float _3289 = log2(_3288);
        float _3305 = log2(_3046);
        _3117 = (exp2(_3305 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3289 * cbSceneParam._m0[78u].x)) * _3279.x) / cbSceneParam._m0[78u].x)) + _3043;
        _3119 = (exp2(_3305 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3289 * cbSceneParam._m0[78u].y)) * _3279.y) / cbSceneParam._m0[78u].y)) + _3044;
        _3121 = (exp2(_3305 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3289 * cbSceneParam._m0[78u].z)) * _3279.z) / cbSceneParam._m0[78u].z)) + _3045;
        _3123 = _3288 * _3046;
    }
    else
    {
        _3117 = _3043;
        _3119 = _3044;
        _3121 = _3045;
        _3123 = _3046;
    }
    float _3135 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3136 = _3135 == 3.0;
    float _3137 = log2(_3123);
    float _3141 = exp2(_3137 * cbSceneParam._m0[78u].x);
    float _3142 = exp2(_3137 * cbSceneParam._m0[78u].y);
    float _3143 = exp2(_3137 * cbSceneParam._m0[78u].z);
    float _3144 = _3141 * (isnan(0.0) ? _2994 : (isnan(_2994) ? 0.0 : max(_2994, 0.0)));
    float _3145 = _3142 * (isnan(0.0) ? _2996 : (isnan(_2996) ? 0.0 : max(_2996, 0.0)));
    float _3146 = _3143 * (isnan(0.0) ? _2998 : (isnan(_2998) ? 0.0 : max(_2998, 0.0)));
    float _3155 = (_3135 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3155 * (_3136 ? _3144 : (_3144 + (cbSceneParam._m0[72u].w * _3117)));
    SV_Target.y = _3155 * (_3136 ? _3145 : (_3145 + (cbSceneParam._m0[72u].w * _3119)));
    SV_Target.z = _3155 * (_3136 ? _3146 : (_3146 + (cbSceneParam._m0[72u].w * _3121)));
    SV_Target.w = _3021;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2974) * _3016) * _3141) * _3155;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2975) * _3016) * _3142) * _3155;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2976) * _3016) * _3143) * _3155;
    SV_Target_1.w = _3021;
}


