#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[18];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_1;
layout(set = 0, binding = 1) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_7;
layout(set = 0, binding = 10) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_6;
layout(set = 0, binding = 2) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_0;
layout(set = 0, binding = 4) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_11;
layout(set = 0, binding = 7) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1143;
float _3576;
float _3577;
float _3578;
float _3579;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _203 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _204 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _205 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _211 = inversesqrt(dot(vec3(_203, _204, _205), vec3(_203, _204, _205)));
    float _218 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _219 = _218 * NORMAL.x;
    float _220 = _218 * NORMAL.y;
    float _221 = _218 * NORMAL.z;
    float _225 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _233;
    float _234;
    float _235;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _233 = (-0.0) - _219;
        _234 = (-0.0) - _220;
        _235 = (-0.0) - _221;
    }
    else
    {
        _233 = _219;
        _234 = _220;
        _235 = _221;
    }
    vec4 _248 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    vec4 _265 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _288 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _297 = ((_265.x * 4.55000019073486328125) * cbMtdParam._m0[9u].x) * _288.x;
    float _300 = ((_265.y * 4.55000019073486328125) * cbMtdParam._m0[9u].y) * _288.y;
    float _303 = ((_265.z * 4.55000019073486328125) * cbMtdParam._m0[9u].z) * _288.z;
    float _304 = _288.w * _265.w;
    vec4 _317 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _324 = cbMtdParam._m0[16u].x + _317.x;
    vec4 _337 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w));
    float _349 = (_248.z * 2.0) * (cbMtdParam._m0[14u].x + _337.z);
    float _367 = abs((fract(cbMtdParam._m0[15u].x * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _3588 = isnan(0.0) ? _367 : (isnan(_367) ? 0.0 : max(_367, 0.0));
    float _369 = isnan(1.0) ? _3588 : (isnan(_3588) ? 1.0 : min(_3588, 1.0));
    float _374 = (_369 * _369) * (3.0 - (_369 * 2.0));
    vec4 _387 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _395 = (_248.x * 2.0) + (-1.0);
    float _396 = (_248.y * 2.0) + (-1.0);
    float _397 = dot(vec2(_395, _396), vec2(_395, _396));
    float _3599 = isnan(0.0) ? _397 : (isnan(_397) ? 0.0 : max(_397, 0.0));
    float _402 = sqrt(1.0 - (isnan(1.0) ? _3599 : (isnan(_3599) ? 1.0 : min(_3599, 1.0))));
    float _409 = (cbMtdParam._m0[14u].z * ((_337.x * 2.0) + (-1.0))) + _395;
    float _410 = (cbMtdParam._m0[14u].z * ((_337.y * 2.0) + (-1.0))) + _396;
    float _413 = fma(_402, _233, fma(_410, _225 * TANGENT.x, (_211 * _203) * _409));
    float _416 = fma(_402, _234, fma(_410, _225 * TANGENT.y, (_211 * _204) * _409));
    float _419 = fma(_402, _235, fma(_410, _225 * TANGENT.z, (_211 * _205) * _409));
    float _423 = inversesqrt(dot(vec3(_413, _416, _419), vec3(_413, _416, _419)));
    float _424 = _423 * _413;
    float _425 = _423 * _416;
    float _426 = _423 * _419;
    float _3610 = isnan(0.0) ? _304 : (isnan(_304) ? 0.0 : max(_304, 0.0));
    float _427 = isnan(1.0) ? _3610 : (isnan(_3610) ? 1.0 : min(_3610, 1.0));
    float _3621 = isnan(0.0) ? _349 : (isnan(_349) ? 0.0 : max(_349, 0.0));
    float _428 = isnan(1.0) ? _3621 : (isnan(_3621) ? 1.0 : min(_3621, 1.0));
    float _3632 = isnan(0.0) ? _297 : (isnan(_297) ? 0.0 : max(_297, 0.0));
    float _429 = isnan(1.0) ? _3632 : (isnan(_3632) ? 1.0 : min(_3632, 1.0));
    float _3643 = isnan(0.0) ? _300 : (isnan(_300) ? 0.0 : max(_300, 0.0));
    float _430 = isnan(1.0) ? _3643 : (isnan(_3643) ? 1.0 : min(_3643, 1.0));
    float _3654 = isnan(0.0) ? _303 : (isnan(_303) ? 0.0 : max(_303, 0.0));
    float _431 = isnan(1.0) ? _3654 : (isnan(_3654) ? 1.0 : min(_3654, 1.0));
    float _3665 = isnan(0.0) ? _324 : (isnan(_324) ? 0.0 : max(_324, 0.0));
    float _432 = isnan(1.0) ? _3665 : (isnan(_3665) ? 1.0 : min(_3665, 1.0));
    float _448 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _490 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _500 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _490);
    float _501 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _490);
    float _502 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _490);
    float _506 = inversesqrt(dot(vec3(_500, _501, _502), vec3(_500, _501, _502)));
    float _507 = _500 * _506;
    float _508 = _501 * _506;
    float _509 = _502 * _506;
    vec4 _514 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _516 = _514.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _822 = sqrt(((_500 * _500) + (_501 * _501)) + (_502 * _502));
        float _828 = (cbMatDynParam._m0[5u].x * _822) + cbMatDynParam._m0[5u].y;
        float _3676 = isnan(0.0) ? _828 : (isnan(_828) ? 0.0 : max(_828, 0.0));
        float _829 = isnan(1.0) ? _3676 : (isnan(_3676) ? 1.0 : min(_3676, 1.0));
        float _833 = (cbMatDynParam._m0[5u].z * _822) + cbMatDynParam._m0[5u].w;
        float _3687 = isnan(0.0) ? _833 : (isnan(_833) ? 0.0 : max(_833, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3687 : (isnan(_3687) ? 1.0 : min(_3687, 1.0))) - _829)) + _829) < ((_516 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _528 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _529 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _531 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _533 = _531.w;
    float _552 = fma(_426, cbSceneParam._m0[5u].z, fma(_425, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _424));
    float _555 = fma(_426, cbSceneParam._m0[6u].z, fma(_425, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _424));
    float _558 = fma(_426, cbSceneParam._m0[7u].z, fma(_425, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _424));
    vec4 _560 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _562 = _560.x;
    float _574 = (((_560.y - _428) + (_560.w * _428)) * cbMtdParam._m0[3u].x) + _428;
    float _591 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3(cbMtdParam._m0[3u].x * (_562 * _562)), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w)).z;
    float _599 = (((cbMatDynParam._m0[15u].x - _432) * cbMatDynParam._m0[15u].w) * _591) + _432;
    float _607 = ((_591 * cbMatDynParam._m0[16u].z) * (cbMatDynParam._m0[16u].x - _574)) + _574;
    uint _631 = uint(roundEven(NORMAL.w)) * 13u;
    uint _633 = _631 + 9u;
    uint _634 = _633 + uint(cbMatDynParam._m0[0u].w);
    float _640 = (cbMtdParam._m0[0u].x * _429) * cbInstanceData._m0[_634].x;
    float _641 = (cbMtdParam._m0[0u].y * _430) * cbInstanceData._m0[_634].y;
    float _642 = (cbMtdParam._m0[0u].z * _431) * cbInstanceData._m0[_634].z;
    float _3698 = isnan(0.0) ? _640 : (isnan(_640) ? 0.0 : max(_640, 0.0));
    float _643 = isnan(1.0) ? _3698 : (isnan(_3698) ? 1.0 : min(_3698, 1.0));
    float _3709 = isnan(0.0) ? _641 : (isnan(_641) ? 0.0 : max(_641, 0.0));
    float _644 = isnan(1.0) ? _3709 : (isnan(_3709) ? 1.0 : min(_3709, 1.0));
    float _3720 = isnan(0.0) ? _642 : (isnan(_642) ? 0.0 : max(_642, 0.0));
    float _645 = isnan(1.0) ? _3720 : (isnan(_3720) ? 1.0 : min(_3720, 1.0));
    vec4 _646 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _651 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _662 = (((_651.x - _599) + (_651.w * _599)) * cbMtdParam._m0[3u].x) + _599;
    float _675 = (cbMtdParam._m0[3u].x * (((_643 * _533) - _643) + _646.x)) + _643;
    float _676 = (cbMtdParam._m0[3u].x * (((_644 * _533) - _644) + _646.y)) + _644;
    float _677 = (cbMtdParam._m0[3u].x * (((_645 * _533) - _645) + _646.z)) + _645;
    vec4 _678 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _691 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3((_599 * (_429 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625, (_599 * (_430 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625, (_599 * (_431 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * _678.z;
    float _695 = _691 * cbMatDynParam._m0[13u].w;
    float _705 = (_695 * (cbMatDynParam._m0[13u].x - _675)) + _675;
    float _706 = (_695 * (cbMatDynParam._m0[13u].y - _676)) + _676;
    float _707 = (_695 * (cbMatDynParam._m0[13u].z - _677)) + _677;
    float _715 = ((_691 * cbMatDynParam._m0[15u].w) * (cbMatDynParam._m0[15u].x - _662)) + _662;
    float _716 = 1.0 - _715;
    float _717 = _716 * _705;
    float _718 = _716 * _706;
    float _719 = _716 * _707;
    float _723 = (_705 + (-0.039999999105930328369140625)) * _715;
    float _724 = (_706 + (-0.039999999105930328369140625)) * _715;
    float _725 = (_707 + (-0.039999999105930328369140625)) * _715;
    float _726 = _723 + 0.039999999105930328369140625;
    float _727 = _724 + 0.039999999105930328369140625;
    float _728 = _725 + 0.039999999105930328369140625;
    vec4 _737 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _528, cbSceneParam._m0[86u].y * _529));
    float _740 = _737.x * TEXCOORD_4;
    float _741 = dot(vec3(_424, _425, _426), vec3(_507, _508, _509));
    float _744 = _741 * 2.0;
    float _748 = (_744 * _424) - _507;
    float _749 = (_744 * _425) - _508;
    float _750 = (_744 * _426) - _509;
    float _754 = abs(dot(vec3(_507, _508, _509), vec3(_424, _425, _426)));
    float _3731 = isnan(0.0) ? _754 : (isnan(_754) ? 0.0 : max(_754, 0.0));
    float _756 = sqrt(_607);
    float _768 = exp2((_756 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3731 : (isnan(_3731) ? 1.0 : min(_3731, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_756 * 3.0));
    float _774 = (1.0 - _768) * ((_756 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _775 = _768 * _756;
    float _803 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _807 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _811 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1142;
    float _1144;
    float _1145;
    float _1146;
    float _1147;
    float _1148;
    float _1149;
    float _1150;
    float _1151;
    float _1152;
    float _1153;
    float _1154;
    float _1155;
    float _1156;
    float _1157;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _867 = fma(_811, cbModelParam._m0[26u].z, fma(_807, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _803));
        float _871 = fma(_811, cbModelParam._m0[27u].z, fma(_807, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _803));
        float _875 = fma(_811, cbModelParam._m0[28u].z, fma(_807, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _803));
        float _900 = _803 + _424;
        float _901 = _807 + _425;
        float _902 = _811 + _426;
        float _912 = fma(_902, cbModelParam._m0[26u].z, fma(_901, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _900)) - _867;
        float _913 = fma(_902, cbModelParam._m0[27u].z, fma(_901, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _900)) - _871;
        float _914 = fma(_902, cbModelParam._m0[28u].z, fma(_901, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _900)) - _875;
        float _918 = inversesqrt(dot(vec3(_912, _913, _914), vec3(_912, _913, _914)));
        float _931 = ((_918 * _912) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_867 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _932 = ((_918 * _913) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_871 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _933 = ((_918 * _914) / cbModelParam._m0[34u].z) + ((((((_875 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _936 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_931, _932, _933), 0.0);
        vec4 _943 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_931, _932, _933), 0.0);
        vec4 _950 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_931, _932, _933), 0.0);
        vec4 _957 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_931, _932, _933), 0.0);
        float _970 = exp2((_936.w + (-0.5)) * 20.0) * 2.0;
        float _971 = _970 * (_936.x + (-0.5));
        float _972 = _970 * (_936.y + (-0.5));
        float _973 = _970 * (_936.z + (-0.5));
        float _980 = exp2((_943.w + (-0.5)) * 20.0) * 2.0;
        float _981 = _980 * (_943.x + (-0.5));
        float _982 = _980 * (_943.y + (-0.5));
        float _983 = _980 * (_943.z + (-0.5));
        float _990 = exp2((_950.w + (-0.5)) * 20.0) * 2.0;
        float _991 = _990 * (_950.x + (-0.5));
        float _992 = _990 * (_950.y + (-0.5));
        float _993 = _990 * (_950.z + (-0.5));
        float _1000 = exp2((_957.w + (-0.5)) * 20.0) * 2.0;
        float _1001 = _1000 * (_957.x + (-0.5));
        float _1002 = _1000 * (_957.y + (-0.5));
        float _1003 = _1000 * (_957.z + (-0.5));
        float _1004 = isnan(0.0) ? _1001 : (isnan(_1001) ? 0.0 : max(_1001, 0.0));
        float _1005 = isnan(0.0) ? _1002 : (isnan(_1002) ? 0.0 : max(_1002, 0.0));
        float _1006 = isnan(0.0) ? _1003 : (isnan(_1003) ? 0.0 : max(_1003, 0.0));
        float _1007 = _971 * 0.5;
        float _1008 = _981 * 0.5;
        float _1009 = _991 * 0.5;
        float _1010 = dot(vec3(_1007, _1008, _1009), vec3(_1007, _1008, _1009));
        float _1015 = (_1010 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1010);
        float _1024 = (dot(vec3(_424, _425, _426), vec3(_1015 * _1007, _1015 * _1008, _1015 * _1009)) + 1.0) * 0.5;
        float _3757 = isnan(0.0) ? _1024 : (isnan(_1024) ? 0.0 : max(_1024, 0.0));
        float _1034 = sqrt(((_1008 * _1008) + (_1007 * _1007)) + (_1009 * _1009)) / (_1004 + 9.9999997473787516355514526367188e-06);
        float _3768 = isnan(0.0) ? _1034 : (isnan(_1034) ? 0.0 : max(_1034, 0.0));
        float _1035 = isnan(1.0) ? _3768 : (isnan(_3768) ? 1.0 : min(_3768, 1.0));
        float _1036 = _1035 * 2.0;
        float _1040 = (1.0 - _1035) / (_1035 + 1.0);
        float _3779 = isnan(0.0) ? _1040 : (isnan(_1040) ? 0.0 : max(_1040, 0.0));
        float _1041 = isnan(1.0) ? _3779 : (isnan(_3779) ? 1.0 : min(_3779, 1.0));
        float _1050 = ((((1.0 - _1041) * (_1036 + 2.0)) * exp2(log2(isnan(1.0) ? _3757 : (isnan(_3757) ? 1.0 : min(_3757, 1.0))) * (_1036 + 1.0))) + _1041) * _1004;
        float _1051 = _972 * 0.5;
        float _1052 = _982 * 0.5;
        float _1053 = _992 * 0.5;
        float _1054 = dot(vec3(_1051, _1052, _1053), vec3(_1051, _1052, _1053));
        float _1059 = (_1054 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1054);
        float _1067 = (dot(vec3(_424, _425, _426), vec3(_1059 * _1051, _1059 * _1052, _1059 * _1053)) + 1.0) * 0.5;
        float _3790 = isnan(0.0) ? _1067 : (isnan(_1067) ? 0.0 : max(_1067, 0.0));
        float _1076 = sqrt(((_1052 * _1052) + (_1051 * _1051)) + (_1053 * _1053)) / (_1005 + 9.9999997473787516355514526367188e-06);
        float _3801 = isnan(0.0) ? _1076 : (isnan(_1076) ? 0.0 : max(_1076, 0.0));
        float _1077 = isnan(1.0) ? _3801 : (isnan(_3801) ? 1.0 : min(_3801, 1.0));
        float _1078 = _1077 * 2.0;
        float _1082 = (1.0 - _1077) / (_1077 + 1.0);
        float _3812 = isnan(0.0) ? _1082 : (isnan(_1082) ? 0.0 : max(_1082, 0.0));
        float _1083 = isnan(1.0) ? _3812 : (isnan(_3812) ? 1.0 : min(_3812, 1.0));
        float _1092 = ((((1.0 - _1083) * (_1078 + 2.0)) * exp2(log2(isnan(1.0) ? _3790 : (isnan(_3790) ? 1.0 : min(_3790, 1.0))) * (_1078 + 1.0))) + _1083) * _1005;
        float _1093 = _973 * 0.5;
        float _1094 = _983 * 0.5;
        float _1095 = _993 * 0.5;
        float _1096 = dot(vec3(_1093, _1094, _1095), vec3(_1093, _1094, _1095));
        float _1101 = (_1096 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1096);
        float _1109 = (dot(vec3(_424, _425, _426), vec3(_1101 * _1093, _1101 * _1094, _1101 * _1095)) + 1.0) * 0.5;
        float _3823 = isnan(0.0) ? _1109 : (isnan(_1109) ? 0.0 : max(_1109, 0.0));
        float _1118 = sqrt(((_1094 * _1094) + (_1093 * _1093)) + (_1095 * _1095)) / (_1006 + 9.9999997473787516355514526367188e-06);
        float _3834 = isnan(0.0) ? _1118 : (isnan(_1118) ? 0.0 : max(_1118, 0.0));
        float _1119 = isnan(1.0) ? _3834 : (isnan(_3834) ? 1.0 : min(_3834, 1.0));
        float _1120 = _1119 * 2.0;
        float _1124 = (1.0 - _1119) / (_1119 + 1.0);
        float _3845 = isnan(0.0) ? _1124 : (isnan(_1124) ? 0.0 : max(_1124, 0.0));
        float _1125 = isnan(1.0) ? _3845 : (isnan(_3845) ? 1.0 : min(_3845, 1.0));
        float _1134 = ((((1.0 - _1125) * (_1120 + 2.0)) * exp2(log2(isnan(1.0) ? _3823 : (isnan(_3823) ? 1.0 : min(_3823, 1.0))) * (_1120 + 1.0))) + _1125) * _1006;
        _1142 = _973;
        _1144 = _972;
        _1145 = _971;
        _1146 = _983;
        _1147 = _982;
        _1148 = _981;
        _1149 = _993;
        _1150 = _992;
        _1151 = _991;
        _1152 = _1006;
        _1153 = _1005;
        _1154 = _1004;
        _1155 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1050 : (isnan(_1050) ? 0.0 : max(_1050, 0.0)));
        _1156 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1092 : (isnan(_1092) ? 0.0 : max(_1092, 0.0)));
        _1157 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1134 : (isnan(_1134) ? 0.0 : max(_1134, 0.0)));
    }
    else
    {
        _1142 = _1143;
        _1144 = _1143;
        _1145 = _1143;
        _1146 = _1143;
        _1147 = _1143;
        _1148 = _1143;
        _1149 = _1143;
        _1150 = _1143;
        _1151 = _1143;
        _1152 = _1143;
        _1153 = _1143;
        _1154 = _1143;
        _1155 = 0.0;
        _1156 = 0.0;
        _1157 = 0.0;
    }
    float _1455;
    float _1456;
    float _1457;
    float _1458;
    float _1459;
    float _1460;
    float _1461;
    float _1462;
    float _1463;
    float _1464;
    float _1465;
    float _1466;
    float _1467;
    float _1468;
    float _1469;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1186 = fma(_811, cbModelParam._m0[30u].z, fma(_807, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _803));
        float _1190 = fma(_811, cbModelParam._m0[31u].z, fma(_807, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _803));
        float _1194 = fma(_811, cbModelParam._m0[32u].z, fma(_807, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _803));
        float _1217 = _803 + _424;
        float _1218 = _807 + _425;
        float _1219 = _811 + _426;
        float _1229 = fma(_1219, cbModelParam._m0[30u].z, fma(_1218, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1217)) - _1186;
        float _1230 = fma(_1219, cbModelParam._m0[31u].z, fma(_1218, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1217)) - _1190;
        float _1231 = fma(_1219, cbModelParam._m0[32u].z, fma(_1218, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1217)) - _1194;
        float _1235 = inversesqrt(dot(vec3(_1229, _1230, _1231), vec3(_1229, _1230, _1231)));
        float _1248 = ((_1235 * _1229) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1186 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1249 = ((_1235 * _1230) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1190 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1250 = ((_1235 * _1231) / cbModelParam._m0[35u].z) + ((((((_1194 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1252 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1248, _1249, _1250), 0.0);
        vec4 _1259 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1248, _1249, _1250), 0.0);
        vec4 _1266 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1248, _1249, _1250), 0.0);
        vec4 _1273 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1248, _1249, _1250), 0.0);
        float _1285 = exp2((_1252.w + (-0.5)) * 20.0) * 2.0;
        float _1286 = _1285 * (_1252.x + (-0.5));
        float _1287 = _1285 * (_1252.y + (-0.5));
        float _1288 = _1285 * (_1252.z + (-0.5));
        float _1295 = exp2((_1259.w + (-0.5)) * 20.0) * 2.0;
        float _1296 = _1295 * (_1259.x + (-0.5));
        float _1297 = _1295 * (_1259.y + (-0.5));
        float _1298 = _1295 * (_1259.z + (-0.5));
        float _1305 = exp2((_1266.w + (-0.5)) * 20.0) * 2.0;
        float _1306 = _1305 * (_1266.x + (-0.5));
        float _1307 = _1305 * (_1266.y + (-0.5));
        float _1308 = _1305 * (_1266.z + (-0.5));
        float _1315 = exp2((_1273.w + (-0.5)) * 20.0) * 2.0;
        float _1316 = _1315 * (_1273.x + (-0.5));
        float _1317 = _1315 * (_1273.y + (-0.5));
        float _1318 = _1315 * (_1273.z + (-0.5));
        float _1319 = isnan(0.0) ? _1316 : (isnan(_1316) ? 0.0 : max(_1316, 0.0));
        float _1320 = isnan(0.0) ? _1317 : (isnan(_1317) ? 0.0 : max(_1317, 0.0));
        float _1321 = isnan(0.0) ? _1318 : (isnan(_1318) ? 0.0 : max(_1318, 0.0));
        float _1322 = _1286 * 0.5;
        float _1323 = _1296 * 0.5;
        float _1324 = _1306 * 0.5;
        float _1325 = dot(vec3(_1322, _1323, _1324), vec3(_1322, _1323, _1324));
        float _1330 = (_1325 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1325);
        float _1338 = (dot(vec3(_424, _425, _426), vec3(_1330 * _1322, _1330 * _1323, _1330 * _1324)) + 1.0) * 0.5;
        float _3886 = isnan(0.0) ? _1338 : (isnan(_1338) ? 0.0 : max(_1338, 0.0));
        float _1347 = sqrt(((_1323 * _1323) + (_1322 * _1322)) + (_1324 * _1324)) / (_1319 + 9.9999997473787516355514526367188e-06);
        float _3897 = isnan(0.0) ? _1347 : (isnan(_1347) ? 0.0 : max(_1347, 0.0));
        float _1348 = isnan(1.0) ? _3897 : (isnan(_3897) ? 1.0 : min(_3897, 1.0));
        float _1349 = _1348 * 2.0;
        float _1353 = (1.0 - _1348) / (_1348 + 1.0);
        float _3908 = isnan(0.0) ? _1353 : (isnan(_1353) ? 0.0 : max(_1353, 0.0));
        float _1354 = isnan(1.0) ? _3908 : (isnan(_3908) ? 1.0 : min(_3908, 1.0));
        float _1363 = ((((1.0 - _1354) * (_1349 + 2.0)) * exp2(log2(isnan(1.0) ? _3886 : (isnan(_3886) ? 1.0 : min(_3886, 1.0))) * (_1349 + 1.0))) + _1354) * _1319;
        float _1364 = _1287 * 0.5;
        float _1365 = _1297 * 0.5;
        float _1366 = _1307 * 0.5;
        float _1367 = dot(vec3(_1364, _1365, _1366), vec3(_1364, _1365, _1366));
        float _1372 = (_1367 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1367);
        float _1380 = (dot(vec3(_424, _425, _426), vec3(_1372 * _1364, _1372 * _1365, _1372 * _1366)) + 1.0) * 0.5;
        float _3919 = isnan(0.0) ? _1380 : (isnan(_1380) ? 0.0 : max(_1380, 0.0));
        float _1389 = sqrt(((_1365 * _1365) + (_1364 * _1364)) + (_1366 * _1366)) / (_1320 + 9.9999997473787516355514526367188e-06);
        float _3930 = isnan(0.0) ? _1389 : (isnan(_1389) ? 0.0 : max(_1389, 0.0));
        float _1390 = isnan(1.0) ? _3930 : (isnan(_3930) ? 1.0 : min(_3930, 1.0));
        float _1391 = _1390 * 2.0;
        float _1395 = (1.0 - _1390) / (_1390 + 1.0);
        float _3941 = isnan(0.0) ? _1395 : (isnan(_1395) ? 0.0 : max(_1395, 0.0));
        float _1396 = isnan(1.0) ? _3941 : (isnan(_3941) ? 1.0 : min(_3941, 1.0));
        float _1405 = ((((1.0 - _1396) * (_1391 + 2.0)) * exp2(log2(isnan(1.0) ? _3919 : (isnan(_3919) ? 1.0 : min(_3919, 1.0))) * (_1391 + 1.0))) + _1396) * _1320;
        float _1406 = _1288 * 0.5;
        float _1407 = _1298 * 0.5;
        float _1408 = _1308 * 0.5;
        float _1409 = dot(vec3(_1406, _1407, _1408), vec3(_1406, _1407, _1408));
        float _1414 = (_1409 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1409);
        float _1422 = (dot(vec3(_424, _425, _426), vec3(_1414 * _1406, _1414 * _1407, _1414 * _1408)) + 1.0) * 0.5;
        float _3952 = isnan(0.0) ? _1422 : (isnan(_1422) ? 0.0 : max(_1422, 0.0));
        float _1431 = sqrt(((_1407 * _1407) + (_1406 * _1406)) + (_1408 * _1408)) / (_1321 + 9.9999997473787516355514526367188e-06);
        float _3963 = isnan(0.0) ? _1431 : (isnan(_1431) ? 0.0 : max(_1431, 0.0));
        float _1432 = isnan(1.0) ? _3963 : (isnan(_3963) ? 1.0 : min(_3963, 1.0));
        float _1433 = _1432 * 2.0;
        float _1437 = (1.0 - _1432) / (_1432 + 1.0);
        float _3974 = isnan(0.0) ? _1437 : (isnan(_1437) ? 0.0 : max(_1437, 0.0));
        float _1438 = isnan(1.0) ? _3974 : (isnan(_3974) ? 1.0 : min(_3974, 1.0));
        float _1447 = ((((1.0 - _1438) * (_1433 + 2.0)) * exp2(log2(isnan(1.0) ? _3952 : (isnan(_3952) ? 1.0 : min(_3952, 1.0))) * (_1433 + 1.0))) + _1438) * _1321;
        _1455 = _1288;
        _1456 = _1287;
        _1457 = _1286;
        _1458 = _1298;
        _1459 = _1297;
        _1460 = _1296;
        _1461 = _1308;
        _1462 = _1307;
        _1463 = _1306;
        _1464 = _1321;
        _1465 = _1320;
        _1466 = _1319;
        _1467 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1363 : (isnan(_1363) ? 0.0 : max(_1363, 0.0)));
        _1468 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1405 : (isnan(_1405) ? 0.0 : max(_1405, 0.0)));
        _1469 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1447 : (isnan(_1447) ? 0.0 : max(_1447, 0.0)));
    }
    else
    {
        _1455 = _1143;
        _1456 = _1143;
        _1457 = _1143;
        _1458 = _1143;
        _1459 = _1143;
        _1460 = _1143;
        _1461 = _1143;
        _1462 = _1143;
        _1463 = _1143;
        _1464 = _1143;
        _1465 = _1143;
        _1466 = _1143;
        _1467 = 0.0;
        _1468 = 0.0;
        _1469 = 0.0;
    }
    float _1479 = (cbModelParam._m0[1u].x * (_1467 - _1155)) + _1155;
    float _1480 = (cbModelParam._m0[1u].x * (_1468 - _1156)) + _1156;
    float _1481 = (cbModelParam._m0[1u].x * (_1469 - _1157)) + _1157;
    float _1502 = fma(_1481, cbSceneParam._m0[89u].z, fma(_1480, cbSceneParam._m0[89u].y, _1479 * cbSceneParam._m0[89u].x));
    float _1505 = fma(_1481, cbSceneParam._m0[90u].z, fma(_1480, cbSceneParam._m0[90u].y, _1479 * cbSceneParam._m0[90u].x));
    float _1508 = fma(_1481, cbSceneParam._m0[91u].z, fma(_1480, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1479));
    float _1523 = _748 * 0.5;
    float _1524 = _749 * 0.5;
    float _1525 = _750 * 0.5;
    float _1526 = dot(vec4(_1523, _1524, _1525, 1.0), vec4(_1457, _1460, _1463, _1466));
    float _1529 = dot(vec4(_1523, _1524, _1525, 1.0), vec4(_1456, _1459, _1462, _1465));
    float _1532 = dot(vec4(_1523, _1524, _1525, 1.0), vec4(_1455, _1458, _1461, _1464));
    float _1563;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1539 = dot(vec4(_1523, _1524, _1525, 1.0), vec4(_1142, _1146, _1149, _1152));
        float _1543 = dot(vec4(_1523, _1524, _1525, 1.0), vec4(_1144, _1147, _1150, _1153));
        float _1547 = dot(vec4(_1523, _1524, _1525, 1.0), vec4(_1145, _1148, _1151, _1154));
        float _1554 = dot(vec4(cbModelParam._m0[39u]), vec4(_1523, _1524, _1525, 1.0));
        _1563 = dot(vec3(isnan(0.0) ? _1547 : (isnan(_1547) ? 0.0 : max(_1547, 0.0)), isnan(0.0) ? _1543 : (isnan(_1543) ? 0.0 : max(_1543, 0.0)), isnan(0.0) ? _1539 : (isnan(_1539) ? 0.0 : max(_1539, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1554) ? 0.0 : (isnan(0.0) ? _1554 : max(0.0, _1554))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1563 = 1.0;
    }
    float _1574;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1565 = dot(vec4(cbModelParam._m0[40u]), vec4(_1523, _1524, _1525, 1.0));
        _1574 = dot(vec3(isnan(0.0) ? _1526 : (isnan(_1526) ? 0.0 : max(_1526, 0.0)), isnan(0.0) ? _1529 : (isnan(_1529) ? 0.0 : max(_1529, 0.0)), isnan(0.0) ? _1532 : (isnan(_1532) ? 0.0 : max(_1532, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1565) ? 0.0 : (isnan(0.0) ? _1565 : max(0.0, _1565))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1574 = 1.0;
    }
    float _1578 = (_1574 * cbModelParam._m0[1u].x) + (_1563 * (1.0 - cbModelParam._m0[1u].x));
    float _1588 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _607);
    float _1589 = isnan(_1588) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1588 : min(cbModelParam._m0[25u].z, _1588));
    float _1669;
    float _1671;
    float _1673;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1636 = fma(_811, cbModelParam._m0[13u].z, fma(_807, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _803)) + cbModelParam._m0[13u].w;
        float _1640 = fma(_811, cbModelParam._m0[14u].z, fma(_807, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _803)) + cbModelParam._m0[14u].w;
        float _1644 = fma(_811, cbModelParam._m0[15u].z, fma(_807, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _803)) + cbModelParam._m0[15u].w;
        float _1647 = fma(_750, cbModelParam._m0[13u].z, fma(_749, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _748));
        float _1650 = fma(_750, cbModelParam._m0[14u].z, fma(_749, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _748));
        float _1653 = fma(_750, cbModelParam._m0[15u].z, fma(_749, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _748));
        float _1681;
        if (_1647 > 0.0)
        {
            _1681 = abs((1.0 - _1636) / _1647);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1647 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1636 + 1.0) / _1647);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1681 = frontier_phi_19_17_ladder;
        }
        float _1885;
        if (_1650 > 0.0)
        {
            _1885 = abs((1.0 - _1640) / _1650);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1650 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1640 + 1.0) / _1650);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1885 = frontier_phi_28_24_ladder;
        }
        float _2139;
        if (_1653 > 0.0)
        {
            _2139 = abs((1.0 - _1644) / _1653);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1653 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1644 + 1.0) / _1653);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2139 = frontier_phi_40_35_ladder;
        }
        float _2141 = isnan(_1885) ? _1681 : (isnan(_1681) ? _1885 : min(_1681, _1885));
        float _2142 = isnan(_2139) ? _2141 : (isnan(_2141) ? _2139 : min(_2141, _2139));
        float _2146 = (_2142 * _1647) + _1636;
        float _2147 = (_2142 * _1650) + _1640;
        float _2148 = (_2142 * _1653) + _1644;
        float _2149 = _2142 * 9.9999997473787516355514526367188e-05;
        float _2151 = (-1.0) - _2149;
        float _2153 = _2149 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2148 > _2153) || ((_2148 < _2151) || ((_2147 > _2153) || ((_2147 < _2151) || ((_2146 < _2151) || (_2146 > _2153))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2276 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2148, cbModelParam._m0[9u].z, fma(_2147, cbModelParam._m0[9u].y, _2146 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2148, cbModelParam._m0[10u].z, fma(_2147, cbModelParam._m0[10u].y, _2146 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2148, cbModelParam._m0[11u].z, fma(_2147, cbModelParam._m0[11u].y, _2146 * cbModelParam._m0[11u].x))), _1589);
            frontier_phi_18_40_ladder = _2276.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2276.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2276.x * cbModelParam._m0[1u].y;
        }
        _1669 = frontier_phi_18_40_ladder_2;
        _1671 = frontier_phi_18_40_ladder_1;
        _1673 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1657 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_748, _749, _750), _1589);
        _1669 = _1657.x * cbModelParam._m0[1u].y;
        _1671 = _1657.y * cbModelParam._m0[1u].y;
        _1673 = _1657.z * cbModelParam._m0[1u].y;
    }
    float _1677 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _607);
    float _1678 = isnan(_1677) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1677 : min(cbModelParam._m0[25u].w, _1677));
    float _1769;
    float _1771;
    float _1773;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1733 = fma(_811, cbModelParam._m0[21u].z, fma(_807, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _803)) + cbModelParam._m0[21u].w;
        float _1737 = fma(_811, cbModelParam._m0[22u].z, fma(_807, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _803)) + cbModelParam._m0[22u].w;
        float _1741 = fma(_811, cbModelParam._m0[23u].z, fma(_807, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _803)) + cbModelParam._m0[23u].w;
        float _1744 = fma(_750, cbModelParam._m0[21u].z, fma(_749, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _748));
        float _1747 = fma(_750, cbModelParam._m0[22u].z, fma(_749, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _748));
        float _1750 = fma(_750, cbModelParam._m0[23u].z, fma(_749, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _748));
        float _1890;
        if (_1744 > 0.0)
        {
            _1890 = abs((1.0 - _1733) / _1744);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1744 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1733 + 1.0) / _1744);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1890 = frontier_phi_30_26_ladder;
        }
        float _2166;
        if (_1747 > 0.0)
        {
            _2166 = abs((1.0 - _1737) / _1747);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1747 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1737 + 1.0) / _1747);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2166 = frontier_phi_42_37_ladder;
        }
        float _2379;
        if (_1750 > 0.0)
        {
            _2379 = abs((1.0 - _1741) / _1750);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1750 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1741 + 1.0) / _1750);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2379 = frontier_phi_51_48_ladder;
        }
        float _2381 = isnan(_2166) ? _1890 : (isnan(_1890) ? _2166 : min(_1890, _2166));
        float _2382 = isnan(_2379) ? _2381 : (isnan(_2381) ? _2379 : min(_2381, _2379));
        float _2386 = (_2382 * _1744) + _1733;
        float _2387 = (_2382 * _1747) + _1737;
        float _2388 = (_2382 * _1750) + _1741;
        float _2389 = _2382 * 9.9999997473787516355514526367188e-05;
        float _2390 = (-1.0) - _2389;
        float _2392 = _2389 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2388 > _2392) || ((_2388 < _2390) || ((_2387 > _2392) || ((_2387 < _2390) || ((_2386 < _2390) || (_2386 > _2392))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2629 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2388, cbModelParam._m0[17u].z, fma(_2387, cbModelParam._m0[17u].y, _2386 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2388, cbModelParam._m0[18u].z, fma(_2387, cbModelParam._m0[18u].y, _2386 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2388, cbModelParam._m0[19u].z, fma(_2387, cbModelParam._m0[19u].y, _2386 * cbModelParam._m0[19u].x))), _1678);
            frontier_phi_27_51_ladder = _2629.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2629.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2629.x * cbModelParam._m0[1u].z;
        }
        _1769 = frontier_phi_27_51_ladder_2;
        _1771 = frontier_phi_27_51_ladder_1;
        _1773 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1753 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_748, _749, _750), _1678);
        _1769 = _1753.x * cbModelParam._m0[1u].z;
        _1771 = _1753.y * cbModelParam._m0[1u].z;
        _1773 = _1753.z * cbModelParam._m0[1u].z;
    }
    float _1786 = (((_774 * _726) + _775) * _740) * ((cbModelParam._m0[1u].w * (_1769 - _1669)) + _1669);
    float _1788 = (((_774 * _727) + _775) * _740) * ((cbModelParam._m0[1u].w * (_1771 - _1671)) + _1671);
    float _1790 = (((_774 * _728) + _775) * _740) * ((cbModelParam._m0[1u].w * (_1773 - _1673)) + _1673);
    float _1793 = fma(_1790, cbSceneParam._m0[89u].z, fma(_1788, cbSceneParam._m0[89u].y, _1786 * cbSceneParam._m0[89u].x));
    float _1796 = fma(_1790, cbSceneParam._m0[90u].z, fma(_1788, cbSceneParam._m0[90u].y, _1786 * cbSceneParam._m0[90u].x));
    float _1799 = fma(_1790, cbSceneParam._m0[91u].z, fma(_1788, cbSceneParam._m0[91u].y, _1786 * cbSceneParam._m0[91u].x));
    uvec4 _1809 = floatBitsToUint(cbInstanceData._m0[_631 + 5u]);
    uint _1811 = _1809.x * 14u;
    uint _1812 = _1811 + 13u;
    float _1819 = _740 + (-1.0);
    float _1824 = (cbLight._m0[_1812].x * _1819) + 1.0;
    float _1825 = (cbLight._m0[_1812].y * _1819) + 1.0;
    float _1826 = (cbLight._m0[_1812].z * _1819) + 1.0;
    float _1827 = (cbLight._m0[_1812].w * _1819) + 1.0;
    uint _1828 = _1811 + 5u;
    float _1834 = isnan(1.0) ? _1825 : (isnan(_1825) ? 1.0 : min(_1825, 1.0));
    uint _1838 = _1811 + 4u;
    float _1844 = isnan(1.0) ? _1824 : (isnan(_1824) ? 1.0 : min(_1824, 1.0));
    uint _1848 = _1811 | 1u;
    float _1859 = dot(vec3(cbLight._m0[_1811].xyz), vec3(_424, _425, _426));
    float _1862 = dot(vec3(cbLight._m0[_1848].xyz), vec3(_424, _425, _426));
    float _4110 = isnan(0.0) ? _1859 : (isnan(_1859) ? 0.0 : max(_1859, 0.0));
    float _4121 = isnan(0.0) ? _1862 : (isnan(_1862) ? 0.0 : max(_1862, 0.0));
    float _1867 = (isnan(1.0) ? _4110 : (isnan(_4110) ? 1.0 : min(_4110, 1.0))) * 0.3183098733425140380859375;
    float _1869 = (isnan(1.0) ? _4121 : (isnan(_4121) ? 1.0 : min(_4121, 1.0))) * 0.3183098733425140380859375;
    float _1876 = ((cbLight._m0[_1828].x * _1834) * _1869) + ((cbLight._m0[_1838].x * _1844) * _1867);
    float _1877 = ((_1834 * cbLight._m0[_1828].y) * _1869) + ((_1844 * cbLight._m0[_1838].y) * _1867);
    float _1878 = ((_1834 * cbLight._m0[_1828].z) * _1869) + ((_1844 * cbLight._m0[_1838].z) * _1867);
    uvec4 _1882 = floatBitsToUint(cbLight._m0[_1811 + 12u]);
    bool _1884 = _1882.x == 0u;
    float _1895;
    float _1897;
    float _1899;
    if (_1884)
    {
        _1895 = _1876;
        _1897 = _1877;
        _1899 = _1878;
    }
    else
    {
        uint _1903 = _1811 + 6u;
        float _1919 = (dot(vec3(cbLight._m0[_1811 + 2u].xyz), vec3(_424, _425, _426)) * 0.5) + 0.5;
        float _1920 = _1919 * _1919;
        float _4132 = isnan(0.0) ? _1920 : (isnan(_1920) ? 0.0 : max(_1920, 0.0));
        float _1921 = isnan(1.0) ? _4132 : (isnan(_4132) ? 1.0 : min(_4132, 1.0));
        float _1922 = isnan(1.0) ? _1826 : (isnan(_1826) ? 1.0 : min(_1826, 1.0));
        _1895 = (((cbLight._m0[_1903].x * 0.3183098733425140380859375) * _1921) * _1922) + _1876;
        _1897 = (((cbLight._m0[_1903].y * 0.3183098733425140380859375) * _1921) * _1922) + _1877;
        _1899 = (((cbLight._m0[_1903].z * 0.3183098733425140380859375) * _1921) * _1922) + _1878;
    }
    bool _1902 = _1882.y == 0u;
    float _1940;
    float _1942;
    float _1944;
    if (_1902)
    {
        _1940 = _1895;
        _1942 = _1897;
        _1944 = _1899;
    }
    else
    {
        uint _2110 = _1811 + 7u;
        float _2126 = (dot(vec3(cbLight._m0[_1811 + 3u].xyz), vec3(_424, _425, _426)) * 0.5) + 0.5;
        float _2127 = _2126 * _2126;
        float _4148 = isnan(0.0) ? _2127 : (isnan(_2127) ? 0.0 : max(_2127, 0.0));
        float _2128 = isnan(1.0) ? _4148 : (isnan(_4148) ? 1.0 : min(_4148, 1.0));
        float _2129 = isnan(1.0) ? _1827 : (isnan(_1827) ? 1.0 : min(_1827, 1.0));
        _1940 = (((cbLight._m0[_2110].x * 0.3183098733425140380859375) * _2128) * _2129) + _1895;
        _1942 = (((cbLight._m0[_2110].y * 0.3183098733425140380859375) * _2128) * _2129) + _1897;
        _1944 = (((cbLight._m0[_2110].z * 0.3183098733425140380859375) * _2128) * _2129) + _1899;
    }
    uint _1947 = _1811 + 8u;
    float _1960 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1811].w)) * _607) * 0.949999988079071044921875);
    float _1961 = _1960 * _1960;
    float _1962 = cbLight._m0[_1811].x + _507;
    float _1963 = cbLight._m0[_1811].y + _508;
    float _1964 = cbLight._m0[_1811].z + _509;
    float _1968 = inversesqrt(dot(vec3(_1962, _1963, _1964), vec3(_1962, _1963, _1964)));
    float _1969 = _1968 * _1962;
    float _1970 = _1968 * _1963;
    float _1971 = _1968 * _1964;
    float _1972 = dot(vec3(_424, _425, _426), vec3(cbLight._m0[_1811].xyz));
    float _4164 = isnan(0.0) ? _1972 : (isnan(_1972) ? 0.0 : max(_1972, 0.0));
    float _1975 = isnan(1.0) ? _4164 : (isnan(_4164) ? 1.0 : min(_4164, 1.0));
    float _4175 = isnan(0.0) ? _741 : (isnan(_741) ? 0.0 : max(_741, 0.0));
    float _1976 = isnan(1.0) ? _4175 : (isnan(_4175) ? 1.0 : min(_4175, 1.0));
    float _1977 = dot(vec3(_424, _425, _426), vec3(_1969, _1970, _1971));
    float _4186 = isnan(0.0) ? _1977 : (isnan(_1977) ? 0.0 : max(_1977, 0.0));
    float _1980 = isnan(1.0) ? _4186 : (isnan(_4186) ? 1.0 : min(_4186, 1.0));
    float _1981 = dot(vec3(cbLight._m0[_1811].xyz), vec3(_1969, _1970, _1971));
    float _4197 = isnan(0.0) ? _1981 : (isnan(_1981) ? 0.0 : max(_1981, 0.0));
    float _1985 = _1961 * _1961;
    float _1989 = ((_1980 * _1980) * (_1985 + (-1.0))) + 1.0;
    float _1997 = exp2(log2(1.0 - (isnan(1.0) ? _4197 : (isnan(_4197) ? 1.0 : min(_4197, 1.0)))) * 5.0);
    float _1998 = 0.959999978542327880859375 - _723;
    float _2000 = 0.959999978542327880859375 - _724;
    float _2001 = 0.959999978542327880859375 - _725;
    float _2008 = 1.0 - _1961;
    float _2019 = (0.5 / (((_1976 * ((_1975 * _2008) + _1961)) + 9.9999999392252902907785028219223e-09) + (((_1976 * _2008) + _1961) * _1975))) * _1975;
    float _4208 = isnan(0.0) ? _2019 : (isnan(_2019) ? 0.0 : max(_2019, 0.0));
    float _2021 = (isnan(1.0) ? _4208 : (isnan(_4208) ? 1.0 : min(_4208, 1.0))) * (_1985 / ((_1989 * _1989) * 3.141590118408203125));
    uint _2032 = _1811 + 9u;
    float _2043 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1848].w)) * _607) * 0.949999988079071044921875);
    float _2044 = _2043 * _2043;
    float _2045 = cbLight._m0[_1848].x + _507;
    float _2046 = cbLight._m0[_1848].y + _508;
    float _2047 = cbLight._m0[_1848].z + _509;
    float _2051 = inversesqrt(dot(vec3(_2045, _2046, _2047), vec3(_2045, _2046, _2047)));
    float _2052 = _2051 * _2045;
    float _2053 = _2051 * _2046;
    float _2054 = _2051 * _2047;
    float _2055 = dot(vec3(_424, _425, _426), vec3(cbLight._m0[_1848].xyz));
    float _4219 = isnan(0.0) ? _2055 : (isnan(_2055) ? 0.0 : max(_2055, 0.0));
    float _2058 = isnan(1.0) ? _4219 : (isnan(_4219) ? 1.0 : min(_4219, 1.0));
    float _2059 = dot(vec3(_424, _425, _426), vec3(_2052, _2053, _2054));
    float _4230 = isnan(0.0) ? _2059 : (isnan(_2059) ? 0.0 : max(_2059, 0.0));
    float _2062 = isnan(1.0) ? _4230 : (isnan(_4230) ? 1.0 : min(_4230, 1.0));
    float _2063 = dot(vec3(cbLight._m0[_1848].xyz), vec3(_2052, _2053, _2054));
    float _4241 = isnan(0.0) ? _2063 : (isnan(_2063) ? 0.0 : max(_2063, 0.0));
    float _2067 = _2044 * _2044;
    float _2071 = ((_2062 * _2062) * (_2067 + (-1.0))) + 1.0;
    float _2078 = exp2(log2(1.0 - (isnan(1.0) ? _4241 : (isnan(_4241) ? 1.0 : min(_4241, 1.0)))) * 5.0);
    float _2085 = 1.0 - _2044;
    float _2095 = (0.5 / (((_1976 * ((_2058 * _2085) + _2044)) + 9.9999999392252902907785028219223e-09) + (((_1976 * _2085) + _2044) * _2058))) * _2058;
    float _4252 = isnan(0.0) ? _2095 : (isnan(_2095) ? 0.0 : max(_2095, 0.0));
    float _2097 = (isnan(1.0) ? _4252 : (isnan(_4252) ? 1.0 : min(_4252, 1.0))) * (_2067 / ((_2071 * _2071) * 3.141590118408203125));
    float _2107 = (((((_2078 * _1998) + _726) * cbLight._m0[_2032].x) * _2097) * _1834) + (((((_1997 * _1998) + _726) * cbLight._m0[_1947].x) * _2021) * _1844);
    float _2108 = (((((_2078 * _2000) + _727) * cbLight._m0[_2032].y) * _2097) * _1834) + (((((_1997 * _2000) + _727) * cbLight._m0[_1947].y) * _2021) * _1844);
    float _2109 = (((((_2078 * _2001) + _728) * cbLight._m0[_2032].z) * _2097) * _1834) + (((((_1997 * _2001) + _728) * cbLight._m0[_1947].z) * _2021) * _1844);
    float _2171;
    float _2173;
    float _2175;
    if (_1884)
    {
        _2171 = _2107;
        _2173 = _2108;
        _2175 = _2109;
    }
    else
    {
        uint _2177 = _1811 + 2u;
        uint _2181 = _1811 + 10u;
        float _2195 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2177].w)) * _607) * 0.949999988079071044921875);
        float _2196 = _2195 * _2195;
        float _2197 = cbLight._m0[_2177].x + _507;
        float _2198 = cbLight._m0[_2177].y + _508;
        float _2199 = cbLight._m0[_2177].z + _509;
        float _2203 = inversesqrt(dot(vec3(_2197, _2198, _2199), vec3(_2197, _2198, _2199)));
        float _2204 = _2203 * _2197;
        float _2205 = _2203 * _2198;
        float _2206 = _2203 * _2199;
        float _2207 = dot(vec3(_424, _425, _426), vec3(cbLight._m0[_2177].xyz));
        float _4263 = isnan(0.0) ? _2207 : (isnan(_2207) ? 0.0 : max(_2207, 0.0));
        float _2210 = isnan(1.0) ? _4263 : (isnan(_4263) ? 1.0 : min(_4263, 1.0));
        float _2211 = dot(vec3(_424, _425, _426), vec3(_2204, _2205, _2206));
        float _4274 = isnan(0.0) ? _2211 : (isnan(_2211) ? 0.0 : max(_2211, 0.0));
        float _2214 = isnan(1.0) ? _4274 : (isnan(_4274) ? 1.0 : min(_4274, 1.0));
        float _2215 = dot(vec3(cbLight._m0[_2177].xyz), vec3(_2204, _2205, _2206));
        float _4285 = isnan(0.0) ? _2215 : (isnan(_2215) ? 0.0 : max(_2215, 0.0));
        float _2219 = _2196 * _2196;
        float _2223 = ((_2214 * _2214) * (_2219 + (-1.0))) + 1.0;
        float _2230 = exp2(log2(1.0 - (isnan(1.0) ? _4285 : (isnan(_4285) ? 1.0 : min(_4285, 1.0)))) * 5.0);
        float _2237 = 1.0 - _2196;
        float _2247 = (0.5 / (((_1976 * ((_2210 * _2237) + _2196)) + 9.9999999392252902907785028219223e-09) + (((_1976 * _2237) + _2196) * _2210))) * _2210;
        float _4296 = isnan(0.0) ? _2247 : (isnan(_2247) ? 0.0 : max(_2247, 0.0));
        float _2249 = (isnan(1.0) ? _4296 : (isnan(_4296) ? 1.0 : min(_4296, 1.0))) * (_2219 / ((_2223 * _2223) * 3.141590118408203125));
        float _2250 = isnan(1.0) ? _1826 : (isnan(_1826) ? 1.0 : min(_1826, 1.0));
        _2171 = (((((_2230 * _1998) + _726) * cbLight._m0[_2181].x) * _2249) * _2250) + _2107;
        _2173 = (((((_2230 * _2000) + _727) * cbLight._m0[_2181].y) * _2249) * _2250) + _2108;
        _2175 = (((((_2230 * _2001) + _728) * cbLight._m0[_2181].z) * _2249) * _2250) + _2109;
    }
    float _2285;
    float _2287;
    float _2289;
    if (_1902)
    {
        _2285 = _2171;
        _2287 = _2173;
        _2289 = _2175;
    }
    else
    {
        uint _2296 = _1811 + 3u;
        uint _2300 = _1811 + 11u;
        float _2314 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2296].w)) * _607) * 0.949999988079071044921875);
        float _2315 = _2314 * _2314;
        float _2316 = cbLight._m0[_2296].x + _507;
        float _2317 = cbLight._m0[_2296].y + _508;
        float _2318 = cbLight._m0[_2296].z + _509;
        float _2322 = inversesqrt(dot(vec3(_2316, _2317, _2318), vec3(_2316, _2317, _2318)));
        float _2323 = _2322 * _2316;
        float _2324 = _2322 * _2317;
        float _2325 = _2322 * _2318;
        float _2326 = dot(vec3(_424, _425, _426), vec3(cbLight._m0[_2296].xyz));
        float _4312 = isnan(0.0) ? _2326 : (isnan(_2326) ? 0.0 : max(_2326, 0.0));
        float _2329 = isnan(1.0) ? _4312 : (isnan(_4312) ? 1.0 : min(_4312, 1.0));
        float _2330 = dot(vec3(_424, _425, _426), vec3(_2323, _2324, _2325));
        float _4323 = isnan(0.0) ? _2330 : (isnan(_2330) ? 0.0 : max(_2330, 0.0));
        float _2333 = isnan(1.0) ? _4323 : (isnan(_4323) ? 1.0 : min(_4323, 1.0));
        float _2334 = dot(vec3(cbLight._m0[_2296].xyz), vec3(_2323, _2324, _2325));
        float _4334 = isnan(0.0) ? _2334 : (isnan(_2334) ? 0.0 : max(_2334, 0.0));
        float _2338 = _2315 * _2315;
        float _2342 = ((_2333 * _2333) * (_2338 + (-1.0))) + 1.0;
        float _2349 = exp2(log2(1.0 - (isnan(1.0) ? _4334 : (isnan(_4334) ? 1.0 : min(_4334, 1.0)))) * 5.0);
        float _2356 = 1.0 - _2315;
        float _2366 = (0.5 / (((_1976 * ((_2329 * _2356) + _2315)) + 9.9999999392252902907785028219223e-09) + (((_1976 * _2356) + _2315) * _2329))) * _2329;
        float _4345 = isnan(0.0) ? _2366 : (isnan(_2366) ? 0.0 : max(_2366, 0.0));
        float _2368 = (isnan(1.0) ? _4345 : (isnan(_4345) ? 1.0 : min(_4345, 1.0))) * (_2338 / ((_2342 * _2342) * 3.141590118408203125));
        float _2369 = isnan(1.0) ? _1827 : (isnan(_1827) ? 1.0 : min(_1827, 1.0));
        _2285 = (((((_2349 * _1998) + _726) * cbLight._m0[_2300].x) * _2368) * _2369) + _2171;
        _2287 = (((((_2349 * _2000) + _727) * cbLight._m0[_2300].y) * _2368) * _2369) + _2173;
        _2289 = (((((_2349 * _2001) + _728) * cbLight._m0[_2300].z) * _2368) * _2369) + _2175;
    }
    float _2503;
    float _2505;
    float _2507;
    float _2509;
    float _2511;
    float _2513;
    if (_1809.y == 0u)
    {
        float _2444 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2445 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2444;
        float _2446 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2444;
        float _2447 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2444;
        uvec4 _2459 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2460 = _2459.x;
        uint _2471 = uint((float(_2459.y) * floor(float(uint(cbSceneParam._m0[85u].y * _529) / _2460))) + floor(float(uint(cbSceneParam._m0[85u].x * _528) / _2460)));
        float _2481 = (log2(_2447 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2482 = isnan(0.0) ? _2481 : (isnan(_2481) ? 0.0 : max(_2481, 0.0));
        uint _2485 = uint(isnan(14.0) ? _2482 : (isnan(_2482) ? 14.0 : min(_2482, 14.0)));
        uvec4 _2490 = texelFetch(g_lightClusterGridBuffer, int(((_2485 << 2u) + (_2471 << 6u)) >> 2u));
        uint _2491 = _2490.x;
        uint _2492 = _2459.z;
        float _2634;
        float _2636;
        float _2638;
        float _2640;
        float _2642;
        float _2644;
        if (((((1u << ((_2492 >> 4u) & 15u)) + 4294967295u) & _2491) == 0u) || ((_2492 & 240u) == 0u))
        {
            _2634 = 0.0;
            _2636 = 0.0;
            _2638 = 0.0;
            _2640 = 0.0;
            _2642 = 0.0;
            _2644 = 0.0;
        }
        else
        {
            float _2635;
            float _2637;
            float _2639;
            float _2641;
            float _2643;
            float _2645;
            float _2795 = 0.0;
            float _2796 = 0.0;
            float _2797 = 0.0;
            float _2798 = 0.0;
            float _2799 = 0.0;
            float _2800 = 0.0;
            uint _2801 = 0u;
            uint _2810;
            bool _2811;
            for (;;)
            {
                _2810 = texelFetch(g_lightClassification, int((((_2485 << 5u) + (_2471 << 9u)) + (_2801 << 2u)) >> 2u)).x;
                _2811 = _2810 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2811)
                {
                    frontier_phi_68_pred = _2797;
                    frontier_phi_68_pred_1 = _2800;
                    frontier_phi_68_pred_2 = _2799;
                    frontier_phi_68_pred_3 = _2798;
                    frontier_phi_68_pred_4 = _2796;
                    frontier_phi_68_pred_5 = _2795;
                }
                else
                {
                    float _2940;
                    float _2941;
                    float _2942;
                    float _2943;
                    float _2944;
                    float _2945;
                    uint _2946;
                    _2940 = _2795;
                    _2941 = _2796;
                    _2942 = _2797;
                    _2943 = _2798;
                    _2944 = _2799;
                    _2945 = _2800;
                    _2946 = _2810;
                    float _2867;
                    float _2868;
                    float _2869;
                    float _2870;
                    float _2871;
                    float _2872;
                    for (;;)
                    {
                        uint _2950 = uint(findLSB(_2946)) + (_2801 << 5u);
                        uint _2947 = (_2946 + 4294967295u) & _2946;
                        uint _2952 = _2950 * 48u;
                        vec4 _2966 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2952)).x, texelFetch(g_PointLightRenderingBuffer, int(_2952 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2952 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2952 + 3u)).x));
                        uint _2972 = (_2950 * 48u) + 4u;
                        vec4 _2985 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2972)).x, texelFetch(g_PointLightRenderingBuffer, int(_2972 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2972 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2972 + 3u)).x));
                        uint _2991 = (_2950 * 48u) + 8u;
                        vec3 _3002 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2991)).x, texelFetch(g_PointLightRenderingBuffer, int(_2991 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2991 + 2u)).x));
                        float _3006 = _2966.x - _2445;
                        float _3007 = _2966.y - _2446;
                        float _3008 = _2966.z - _2447;
                        float _3009 = dot(vec3(_3006, _3007, _3008), vec3(_3006, _3007, _3008));
                        float _3012 = inversesqrt(_3009);
                        float _3013 = _3012 * _3006;
                        float _3014 = _3012 * _3007;
                        float _3015 = _3012 * _3008;
                        float _3016 = dot(vec3(_552, _555, _558), vec3(_3013, _3014, _3015));
                        float _3021 = 1.0 - (_3009 * _2966.w);
                        float _4371 = isnan(0.0) ? _3021 : (isnan(_3021) ? 0.0 : max(_3021, 0.0));
                        float _3022 = isnan(1.0) ? _4371 : (isnan(_4371) ? 1.0 : min(_4371, 1.0));
                        float _3023 = sqrt(_3009) * _2985.w;
                        float _3026 = 1.39999997615814208984375 / (_3023 + 1.39999997615814208984375);
                        float _3027 = _3026 * _3026;
                        float _3030 = ((1.0 - _3027) * _3016) + _3027;
                        float _3033 = _3023 * _3023;
                        float _3037 = ((isnan(0.0) ? _3030 : (isnan(_3030) ? 0.0 : max(_3030, 0.0))) * _3022) / ((_3033 * 0.699999988079071044921875) + 1.0);
                        float _3041 = (-0.0) - _2445;
                        float _3042 = (-0.0) - _2446;
                        float _3043 = (-0.0) - _2447;
                        float _3047 = inversesqrt(dot(vec3(_3041, _3042, _3043), vec3(_3041, _3042, _3043)));
                        float _3048 = _3047 * _3041;
                        float _3049 = _3047 * _3042;
                        float _3050 = _3047 * _3043;
                        float _3058 = exp2(log2(1.0 / ((_3033 * 3.5) + 5.0)) * 0.25);
                        float _3059 = 1.0 - _756;
                        float _3066 = sqrt(1.0 - ((1.0 - (_3059 * _3059)) * (1.0 - (_3058 * _3058))));
                        float _3067 = _3066 * _3066;
                        float _3068 = _3067 * _3067;
                        float _3069 = _3048 + _3013;
                        float _3070 = _3049 + _3014;
                        float _3071 = _3050 + _3015;
                        float _3075 = inversesqrt(dot(vec3(_3069, _3070, _3071), vec3(_3069, _3070, _3071)));
                        float _3079 = dot(vec3(_552, _555, _558), vec3(_3048, _3049, _3050));
                        float _4387 = isnan(0.0) ? _3079 : (isnan(_3079) ? 0.0 : max(_3079, 0.0));
                        float _3082 = isnan(1.0) ? _4387 : (isnan(_4387) ? 1.0 : min(_4387, 1.0));
                        float _3083 = dot(vec3(_552, _555, _558), vec3(_3075 * _3069, _3075 * _3070, _3075 * _3071));
                        float _4398 = isnan(0.0) ? _3083 : (isnan(_3083) ? 0.0 : max(_3083, 0.0));
                        float _3086 = isnan(1.0) ? _4398 : (isnan(_4398) ? 1.0 : min(_4398, 1.0));
                        float _3090 = ((_3086 * _3086) * (_3068 + (-1.0))) + 1.0;
                        float _3091 = _3026 * _3067;
                        float _3092 = _3091 * _3091;
                        float _3095 = ((1.0 - _3092) * _3016) + _3092;
                        float _4409 = isnan(0.0) ? _3095 : (isnan(_3095) ? 0.0 : max(_3095, 0.0));
                        float _3096 = isnan(1.0) ? _4409 : (isnan(_4409) ? 1.0 : min(_4409, 1.0));
                        float _3097 = 1.0 - _3067;
                        float _3107 = (0.5 / (((_3096 * ((_3082 * _3097) + _3067)) + 9.9999999392252902907785028219223e-09) + (((_3096 * _3097) + _3067) * _3082))) * _3096;
                        float _4420 = isnan(0.0) ? _3107 : (isnan(_3107) ? 0.0 : max(_3107, 0.0));
                        float _3118 = (((_3068 * 3.1415927410125732421875) * (isnan(1.0) ? _4420 : (isnan(_4420) ? 1.0 : min(_4420, 1.0)))) / ((_3090 * _3090) * ((_3033 * 2.1991131305694580078125) + 3.141590118408203125))) * _3022;
                        _2870 = (_3037 * _2985.x) + _2943;
                        _2871 = (_3037 * _2985.y) + _2944;
                        _2872 = (_3037 * _2985.z) + _2945;
                        _2867 = (_3118 * _3002.x) + _2940;
                        _2868 = (_3118 * _3002.y) + _2941;
                        _2869 = (_3118 * _3002.z) + _2942;
                        if (_2947 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2940 = _2867;
                            _2941 = _2868;
                            _2942 = _2869;
                            _2943 = _2870;
                            _2944 = _2871;
                            _2945 = _2872;
                            _2946 = _2947;
                        }
                    }
                    frontier_phi_68_pred = _2869;
                    frontier_phi_68_pred_1 = _2872;
                    frontier_phi_68_pred_2 = _2871;
                    frontier_phi_68_pred_3 = _2870;
                    frontier_phi_68_pred_4 = _2868;
                    frontier_phi_68_pred_5 = _2867;
                }
                _2639 = frontier_phi_68_pred;
                _2645 = frontier_phi_68_pred_1;
                _2643 = frontier_phi_68_pred_2;
                _2641 = frontier_phi_68_pred_3;
                _2637 = frontier_phi_68_pred_4;
                _2635 = frontier_phi_68_pred_5;
                uint _2802 = _2801 + 1u;
                if (_2802 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2795 = _2635;
                    _2796 = _2637;
                    _2797 = _2639;
                    _2798 = _2641;
                    _2799 = _2643;
                    _2800 = _2645;
                    _2801 = _2802;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2634 = _2635;
            _2636 = _2637;
            _2638 = _2639;
            _2640 = _2641;
            _2642 = _2643;
            _2644 = _2645;
        }
        uvec4 _2648 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2649 = _2648.z;
        uint _2651 = (_2649 >> 8u) & 15u;
        float _2763;
        float _2765;
        float _2767;
        float _2769;
        float _2771;
        float _2773;
        if (((4294967295u << _2651) & _2491) == 0u)
        {
            _2763 = _2634;
            _2765 = _2636;
            _2767 = _2638;
            _2769 = _2640;
            _2771 = _2642;
            _2773 = _2644;
        }
        else
        {
            float _2788 = inversesqrt(dot(vec3(_2445, _2446, _2447), vec3(_2445, _2446, _2447)));
            float _2789 = _2788 * _2445;
            float _2790 = _2788 * _2446;
            float _2791 = _2788 * _2447;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2651 < ((_2649 >> 12u) & 15u))
            {
                float _2764;
                float _2766;
                float _2768;
                float _2770;
                float _2772;
                float _2774;
                float _2923 = _2634;
                float _2924 = _2636;
                float _2925 = _2638;
                float _2926 = _2640;
                float _2927 = _2642;
                float _2928 = _2644;
                uint _2929 = _2651;
                uint _2938;
                bool _2939;
                for (;;)
                {
                    _2938 = texelFetch(g_lightClassification, int((((_2485 << 5u) + (_2471 << 9u)) + (_2929 << 2u)) >> 2u)).x;
                    _2939 = _2938 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_2939)
                    {
                        frontier_phi_79_pred = _2928;
                        frontier_phi_79_pred_1 = _2927;
                        frontier_phi_79_pred_2 = _2926;
                        frontier_phi_79_pred_3 = _2925;
                        frontier_phi_79_pred_4 = _2924;
                        frontier_phi_79_pred_5 = _2923;
                    }
                    else
                    {
                        float _3132;
                        float _3133;
                        float _3134;
                        float _3135;
                        float _3136;
                        float _3137;
                        float _3427;
                        float _3428;
                        float _3429;
                        float _3430;
                        float _3431;
                        float _3432;
                        float _3145 = _2923;
                        float _3146 = _2924;
                        float _3147 = _2925;
                        float _3148 = _2926;
                        float _3149 = _2927;
                        float _3150 = _2928;
                        uint _3151 = _2938;
                        uint _3152;
                        vec4 _3177;
                        float _3178;
                        vec4 _3193;
                        vec3 _3205;
                        vec4 _3220;
                        vec4 _3236;
                        float _3283;
                        bool _3284;
                        for (;;)
                        {
                            uint _3162 = ((_2929 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3151));
                            _3152 = (_3151 + 4294967295u) & _3151;
                            uint _3164 = _3162 * 40u;
                            _3177 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3164)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3164 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3164 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3164 + 3u)).x));
                            _3178 = _3177.w;
                            uint _3180 = (_3162 * 40u) + 4u;
                            _3193 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3180)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3180 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3180 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3180 + 3u)).x));
                            uint _3195 = (_3162 * 40u) + 8u;
                            _3205 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3195)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3195 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3195 + 2u)).x));
                            uint _3207 = (_3162 * 40u) + 16u;
                            _3220 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3207)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3207 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3207 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3207 + 3u)).x));
                            uint _3223 = (_3162 * 40u) + 20u;
                            _3236 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3223)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3223 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3223 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3223 + 3u)).x));
                            uint _3239 = (_3162 * 40u) + 24u;
                            vec4 _3252 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3239)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3239 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3239 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3239 + 3u)).x));
                            uint _3258 = (_3162 * 40u) + 28u;
                            vec4 _3271 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3258)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3258 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3258 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3258 + 3u)).x));
                            _3283 = fma(_2447, _3271.z, fma(_2446, _3271.y, _3271.x * _2445)) + _3271.w;
                            _3284 = !((fma(_2447, _3252.z, fma(_2446, _3252.y, _3252.x * _2445)) + _3252.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_3284)
                            {
                                float _3311 = _3177.x - _2445;
                                float _3312 = _3177.y - _2446;
                                float _3313 = _3177.z - _2447;
                                float _3314 = dot(vec3(_3311, _3312, _3313), vec3(_3311, _3312, _3313));
                                float _3317 = inversesqrt(_3314);
                                float _3318 = _3317 * _3311;
                                float _3319 = _3317 * _3312;
                                float _3320 = _3317 * _3313;
                                float _3324 = 1.0 - (_3314 / (_3178 * _3178));
                                float _4431 = isnan(0.0) ? _3324 : (isnan(_3324) ? 0.0 : max(_3324, 0.0));
                                float _3325 = isnan(1.0) ? _4431 : (isnan(_4431) ? 1.0 : min(_4431, 1.0));
                                float _3329 = sqrt(_3314) * _3193.w;
                                float _3331 = 1.39999997615814208984375 / (_3329 + 1.39999997615814208984375);
                                float _3332 = _3331 * _3331;
                                float _3335 = ((1.0 - _3332) * dot(vec3(_3318, _3319, _3320), vec3(_552, _555, _558))) + _3332;
                                float _3338 = _3329 * _3329;
                                float _3342 = (fma(_2447, _3220.z, fma(_2446, _3220.y, _3220.x * _2445)) + _3220.w) / _3283;
                                float _3343 = (fma(_2447, _3236.z, fma(_2446, _3236.y, _3236.x * _2445)) + _3236.w) / _3283;
                                float _3347 = 1.0 - dot(vec2(_3342, _3343), vec2(_3342, _3343));
                                float _4447 = isnan(0.0) ? _3347 : (isnan(_3347) ? 0.0 : max(_3347, 0.0));
                                float _3348 = isnan(1.0) ? _4447 : (isnan(_4447) ? 1.0 : min(_4447, 1.0));
                                float _3349 = _3348 * (((isnan(0.0) ? _3335 : (isnan(_3335) ? 0.0 : max(_3335, 0.0))) * _3325) / ((_3338 * 0.699999988079071044921875) + 1.0));
                                float _3361 = exp2(log2(1.0 / ((_3338 * 3.5) + 5.0)) * 0.25);
                                float _3362 = 1.0 - _756;
                                float _3369 = sqrt(1.0 - ((1.0 - (_3362 * _3362)) * (1.0 - (_3361 * _3361))));
                                float _3370 = _3369 * _3369;
                                float _3371 = _3370 * _3370;
                                float _3372 = _3318 - _2789;
                                float _3373 = _3319 - _2790;
                                float _3374 = _3320 - _2791;
                                float _3378 = inversesqrt(dot(vec3(_3372, _3373, _3374), vec3(_3372, _3373, _3374)));
                                float _3382 = dot(vec3(_552, _555, _558), vec3((-0.0) - _2789, (-0.0) - _2790, (-0.0) - _2791));
                                float _4458 = isnan(0.0) ? _3382 : (isnan(_3382) ? 0.0 : max(_3382, 0.0));
                                float _3385 = isnan(1.0) ? _4458 : (isnan(_4458) ? 1.0 : min(_4458, 1.0));
                                float _3386 = dot(vec3(_552, _555, _558), vec3(_3378 * _3372, _3378 * _3373, _3378 * _3374));
                                float _4469 = isnan(0.0) ? _3386 : (isnan(_3386) ? 0.0 : max(_3386, 0.0));
                                float _3389 = isnan(1.0) ? _4469 : (isnan(_4469) ? 1.0 : min(_4469, 1.0));
                                float _3393 = ((_3389 * _3389) * (_3371 + (-1.0))) + 1.0;
                                float _3394 = _3331 * _3370;
                                float _3395 = _3394 * _3394;
                                float _3401 = ((1.0 - _3395) * dot(vec3(_552, _555, _558), vec3(_3318, _3319, _3320))) + _3395;
                                float _4480 = isnan(0.0) ? _3401 : (isnan(_3401) ? 0.0 : max(_3401, 0.0));
                                float _3402 = isnan(1.0) ? _4480 : (isnan(_4480) ? 1.0 : min(_4480, 1.0));
                                float _3403 = 1.0 - _3370;
                                float _3413 = (0.5 / (((_3402 * ((_3385 * _3403) + _3370)) + 9.9999999392252902907785028219223e-09) + (((_3402 * _3403) + _3370) * _3385))) * _3402;
                                float _4491 = isnan(0.0) ? _3413 : (isnan(_3413) ? 0.0 : max(_3413, 0.0));
                                float _3423 = (_3348 * _3325) * (((_3371 * 3.1415927410125732421875) * (isnan(1.0) ? _4491 : (isnan(_4491) ? 1.0 : min(_4491, 1.0)))) / ((_3393 * _3393) * ((_3338 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3349 * _3193.z;
                                frontier_phi_85_pred_1 = _3349 * _3193.y;
                                frontier_phi_85_pred_2 = _3349 * _3193.x;
                                frontier_phi_85_pred_3 = _3423 * _3205.z;
                                frontier_phi_85_pred_4 = _3423 * _3205.y;
                                frontier_phi_85_pred_5 = _3423 * _3205.x;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3432 = frontier_phi_85_pred;
                            _3431 = frontier_phi_85_pred_1;
                            _3430 = frontier_phi_85_pred_2;
                            _3429 = frontier_phi_85_pred_3;
                            _3428 = frontier_phi_85_pred_4;
                            _3427 = frontier_phi_85_pred_5;
                            _3135 = _3430 + _3148;
                            _3136 = _3431 + _3149;
                            _3137 = _3432 + _3150;
                            _3132 = _3427 + _3145;
                            _3133 = _3428 + _3146;
                            _3134 = _3429 + _3147;
                            if (_3152 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3145 = _3132;
                                _3146 = _3133;
                                _3147 = _3134;
                                _3148 = _3135;
                                _3149 = _3136;
                                _3150 = _3137;
                                _3151 = _3152;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _3137;
                        frontier_phi_79_pred_1 = _3136;
                        frontier_phi_79_pred_2 = _3135;
                        frontier_phi_79_pred_3 = _3134;
                        frontier_phi_79_pred_4 = _3133;
                        frontier_phi_79_pred_5 = _3132;
                    }
                    _2774 = frontier_phi_79_pred;
                    _2772 = frontier_phi_79_pred_1;
                    _2770 = frontier_phi_79_pred_2;
                    _2768 = frontier_phi_79_pred_3;
                    _2766 = frontier_phi_79_pred_4;
                    _2764 = frontier_phi_79_pred_5;
                    uint _2930 = _2929 + 1u;
                    if (_2930 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2923 = _2764;
                        _2924 = _2766;
                        _2925 = _2768;
                        _2926 = _2770;
                        _2927 = _2772;
                        _2928 = _2774;
                        _2929 = _2930;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2770;
                frontier_phi_60_61_ladder_1 = _2774;
                frontier_phi_60_61_ladder_2 = _2772;
                frontier_phi_60_61_ladder_3 = _2768;
                frontier_phi_60_61_ladder_4 = _2766;
                frontier_phi_60_61_ladder_5 = _2764;
            }
            else
            {
                frontier_phi_60_61_ladder = _2640;
                frontier_phi_60_61_ladder_1 = _2644;
                frontier_phi_60_61_ladder_2 = _2642;
                frontier_phi_60_61_ladder_3 = _2638;
                frontier_phi_60_61_ladder_4 = _2636;
                frontier_phi_60_61_ladder_5 = _2634;
            }
            _2763 = frontier_phi_60_61_ladder_5;
            _2765 = frontier_phi_60_61_ladder_4;
            _2767 = frontier_phi_60_61_ladder_3;
            _2769 = frontier_phi_60_61_ladder;
            _2771 = frontier_phi_60_61_ladder_2;
            _2773 = frontier_phi_60_61_ladder_1;
        }
        float _2778 = isnan(1.0) ? _740 : (isnan(_740) ? 1.0 : min(_740, 1.0));
        _2503 = (_2778 * _2769) + _1940;
        _2505 = (_2778 * _2771) + _1942;
        _2507 = (_2778 * _2773) + _1944;
        _2509 = ((_2763 * _726) * _2778) + _2285;
        _2511 = ((_2765 * _727) * _2778) + _2287;
        _2513 = ((_2767 * _728) * _2778) + _2289;
    }
    else
    {
        _2503 = _1940;
        _2505 = _1942;
        _2507 = _1944;
        _2509 = _2285;
        _2511 = _2287;
        _2513 = _2289;
    }
    uint _2519 = _633 + uint(cbMatDynParam._m0[0u].w);
    float _2529 = ((((cbMtdParam._m0[12u].x * cbMtdParam._m0[16u].z) * cbMtdParam._m0[15u].w) * _374) * _387.x) * cbInstanceData._m0[_2519].x;
    float _2534 = ((((cbMtdParam._m0[12u].y * cbMtdParam._m0[16u].z) * cbMtdParam._m0[15u].w) * _374) * _387.y) * cbInstanceData._m0[_2519].y;
    float _2539 = ((((cbMtdParam._m0[12u].z * cbMtdParam._m0[16u].z) * cbMtdParam._m0[15u].w) * _374) * _387.z) * cbInstanceData._m0[_2519].z;
    float _4507 = isnan(0.0) ? _717 : (isnan(_717) ? 0.0 : max(_717, 0.0));
    float _4518 = isnan(0.0) ? _718 : (isnan(_718) ? 0.0 : max(_718, 0.0));
    float _4529 = isnan(0.0) ? _719 : (isnan(_719) ? 0.0 : max(_719, 0.0));
    float _4540 = isnan(0.0) ? _427 : (isnan(_427) ? 0.0 : max(_427, 0.0));
    float _2557 = (((isnan(1.0) ? _4507 : (isnan(_4507) ? 1.0 : min(_4507, 1.0))) * (_2503 + ((isnan(0.0) ? _1502 : (isnan(_1502) ? 0.0 : max(_1502, 0.0))) * _740))) + ((_2509 + ((isnan(0.0) ? _1793 : (isnan(_1793) ? 0.0 : max(_1793, 0.0))) * _1578)) * cbPerFrame._m0[3u].x)) + _2529;
    float _2559 = (_2534 + ((_2511 + ((isnan(0.0) ? _1796 : (isnan(_1796) ? 0.0 : max(_1796, 0.0))) * _1578)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4518 : (isnan(_4518) ? 1.0 : min(_4518, 1.0))) * (_2505 + ((isnan(0.0) ? _1505 : (isnan(_1505) ? 0.0 : max(_1505, 0.0))) * _740)));
    float _2561 = (_2539 + ((_2513 + ((isnan(0.0) ? _1799 : (isnan(_1799) ? 0.0 : max(_1799, 0.0))) * _1578)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4529 : (isnan(_4529) ? 1.0 : min(_4529, 1.0))) * (_2507 + ((isnan(0.0) ? _1508 : (isnan(_1508) ? 0.0 : max(_1508, 0.0))) * _740)));
    float _2562 = isnan(0.0) ? _2557 : (isnan(_2557) ? 0.0 : max(_2557, 0.0));
    float _2563 = isnan(0.0) ? _2559 : (isnan(_2559) ? 0.0 : max(_2559, 0.0));
    float _2564 = isnan(0.0) ? _2561 : (isnan(_2561) ? 0.0 : max(_2561, 0.0));
    float _2570 = cbMtdParam._m0[2u].x * _2529;
    float _2571 = cbMtdParam._m0[2u].y * _2534;
    float _2572 = cbMtdParam._m0[2u].z * _2539;
    float _4566 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2574 = isnan(1.0) ? _4566 : (isnan(_4566) ? 1.0 : min(_4566, 1.0));
    float _2579 = cbInstanceData._m0[_631 + 6u].w * (isnan(1.0) ? _4540 : (isnan(_4540) ? 1.0 : min(_4540, 1.0)));
    float _2584 = _528 / cbSceneParam._m0[86u].x;
    float _2585 = _529 / cbSceneParam._m0[86u].y;
    vec4 _2599 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2584, _2585, (log2((isnan(cbSceneParam._m0[77u].w) ? _448 : (isnan(_448) ? cbSceneParam._m0[77u].w : min(_448, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2601 = _2599.x;
    float _2602 = _2599.y;
    float _2603 = _2599.z;
    float _2604 = _2599.w;
    float _2696;
    float _2698;
    float _2700;
    float _2702;
    if (_448 > cbSceneParam._m0[78u].w)
    {
        float _2659 = isnan(_448) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _448 : min(cbSceneParam._m0[80u].w, _448));
        float _2660 = _2659 / _448;
        float _2671 = _2660 * _500;
        float _2672 = _501 * _2660;
        float _2673 = (-0.0) - _2672;
        float _2674 = _2660 * _502;
        float _2676 = (cbSceneParam._m0[77u].w * _2673) / _2659;
        float _2677 = _2676 + cbSceneParam._m0[79u].w;
        float _2678 = cbSceneParam._m0[79u].w - _2672;
        float _2684 = sqrt(((_2671 * _2671) + (_2672 * _2672)) + (_2674 * _2674));
        float _2687 = (1.0 - (cbSceneParam._m0[77u].w / _2659)) * _2684;
        float _2692 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2694 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2880;
        if (abs((_2673 - _2676) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2880 = ((((_2677 > 0.0) ? exp2(_2692 * _2677) : (2.0 - exp2(_2694 * _2677))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2687;
        }
        else
        {
            float _2824 = 1.0 / cbSceneParam._m0[80u].x;
            float _2825 = isnan(_2678) ? _2677 : (isnan(_2677) ? _2678 : max(_2677, _2678));
            float _2826 = isnan(_2678) ? _2677 : (isnan(_2677) ? _2678 : min(_2677, _2678));
            float _2835 = isnan(0.0) ? _2825 : (isnan(_2825) ? 0.0 : min(_2825, 0.0));
            float _2836 = isnan(0.0) ? _2826 : (isnan(_2826) ? 0.0 : min(_2826, 0.0));
            _2880 = ((abs(_2684 / _2673) * cbSceneParam._m0[80u].y) * ((((_2835 - _2836) * 2.0) - ((exp2(_2692 * (isnan(0.0) ? _2825 : (isnan(_2825) ? 0.0 : max(_2825, 0.0)))) - exp2(_2692 * (isnan(0.0) ? _2826 : (isnan(_2826) ? 0.0 : max(_2826, 0.0))))) * _2824)) - ((exp2(_2694 * _2835) - exp2(_2694 * _2836)) * _2824))) + (_2687 * cbSceneParam._m0[80u].z);
        }
        vec4 _2882 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2584, _2585, 1.0), 0.0);
        float _2891 = exp2((_2880 * (-1.44269502162933349609375)) * (1.0 - _2882.w));
        float _2892 = log2(_2891);
        float _2908 = log2(_2604);
        _2696 = (exp2(_2908 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2892 * cbSceneParam._m0[78u].x)) * _2882.x) / cbSceneParam._m0[78u].x)) + _2601;
        _2698 = (exp2(_2908 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2892 * cbSceneParam._m0[78u].y)) * _2882.y) / cbSceneParam._m0[78u].y)) + _2602;
        _2700 = (exp2(_2908 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2892 * cbSceneParam._m0[78u].z)) * _2882.z) / cbSceneParam._m0[78u].z)) + _2603;
        _2702 = _2891 * _2604;
    }
    else
    {
        _2696 = _2601;
        _2698 = _2602;
        _2700 = _2603;
        _2702 = _2604;
    }
    bool _2918;
    vec4 _2712;
    vec4 _2734;
    float _2736;
    float _2740;
    float _2741;
    float _2742;
    float _2745;
    float _2748;
    float _2751;
    float _2752;
    bool _2762;
    for (;;)
    {
        _2712 = cbMatDynParam._m0[0u];
        float _2714 = roundEven(_2712.y);
        bool _2715 = _2714 == 3.0;
        float _2716 = log2(_2702);
        float _2720 = exp2(_2716 * cbSceneParam._m0[78u].x);
        float _2721 = exp2(_2716 * cbSceneParam._m0[78u].y);
        float _2722 = exp2(_2716 * cbSceneParam._m0[78u].z);
        float _2723 = _2720 * _2562;
        float _2724 = _2721 * _2563;
        float _2725 = _2722 * _2564;
        float _2732 = _516 + (-0.5);
        _2734 = cbMtdParam._m0[1u];
        _2736 = _2734.y * _2732;
        float _2739 = (_2714 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2740 = _2739 * (_2715 ? _2723 : (_2723 + (cbSceneParam._m0[72u].w * _2696)));
        _2741 = _2739 * (_2715 ? _2724 : (_2724 + (cbSceneParam._m0[72u].w * _2698)));
        _2742 = _2739 * (_2715 ? _2725 : (_2725 + (cbSceneParam._m0[72u].w * _2700)));
        _2745 = ((_2570 * _2574) * _2720) * _2739;
        _2748 = ((_2571 * _2574) * _2721) * _2739;
        _2751 = ((_2572 * _2574) * _2722) * _2739;
        _2752 = _2732 * 0.999000012874603271484375;
        _2762 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2762)
        {
            if ((cbInstanceData._m0[_631 + 7u].x + _2752) < 0.5)
            {
                _2918 = true;
                break;
            }
        }
        uint _2859 = _633 + uint(_2712.w);
        if ((cbInstanceData._m0[_2859].w < 1.0) && ((cbInstanceData._m0[_2859].w + _2752) < 0.5))
        {
            _2918 = true;
            break;
        }
        if ((_2736 + _304) < _2734.x)
        {
            _2918 = true;
            break;
        }
        _2918 = false;
        break;
    }
    float _3123;
    if (_2918)
    {
        discard_state = true;
        _3123 = 0.0;
    }
    else
    {
        _3123 = _2579;
    }
    SV_Target.x = _2740;
    SV_Target.y = _2741;
    SV_Target.z = _2742;
    SV_Target.w = _3123;
    SV_Target_1.x = _2745;
    SV_Target_1.y = _2748;
    SV_Target_1.z = _2751;
    SV_Target_1.w = _2579;
    discard_exit();
}


