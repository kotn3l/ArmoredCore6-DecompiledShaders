#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[18];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_1;
layout(set = 0, binding = 1) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_7;
layout(set = 0, binding = 10) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_6;
layout(set = 0, binding = 2) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_0;
layout(set = 0, binding = 4) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_11;
layout(set = 0, binding = 7) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1098;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _199 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _200 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _201 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _207 = inversesqrt(dot(vec3(_199, _200, _201), vec3(_199, _200, _201)));
    float _214 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _215 = _214 * NORMAL.x;
    float _216 = _214 * NORMAL.y;
    float _217 = _214 * NORMAL.z;
    float _221 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _229;
    float _230;
    float _231;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _229 = (-0.0) - _215;
        _230 = (-0.0) - _216;
        _231 = (-0.0) - _217;
    }
    else
    {
        _229 = _215;
        _230 = _216;
        _231 = _217;
    }
    vec4 _244 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    vec4 _261 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _284 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _293 = ((_261.x * 4.55000019073486328125) * cbMtdParam._m0[9u].x) * _284.x;
    float _296 = ((_261.y * 4.55000019073486328125) * cbMtdParam._m0[9u].y) * _284.y;
    float _299 = ((_261.z * 4.55000019073486328125) * cbMtdParam._m0[9u].z) * _284.z;
    float _300 = _284.w * _261.w;
    float _320 = cbMtdParam._m0[16u].x + texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w)).x;
    vec4 _333 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w));
    float _345 = (_244.z * 2.0) * (cbMtdParam._m0[14u].x + _333.z);
    float _363 = abs((fract(cbMtdParam._m0[15u].x * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _3477 = isnan(0.0) ? _363 : (isnan(_363) ? 0.0 : max(_363, 0.0));
    float _365 = isnan(1.0) ? _3477 : (isnan(_3477) ? 1.0 : min(_3477, 1.0));
    float _370 = (_365 * _365) * (3.0 - (_365 * 2.0));
    vec4 _383 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _391 = (_244.x * 2.0) + (-1.0);
    float _392 = (_244.y * 2.0) + (-1.0);
    float _393 = dot(vec2(_391, _392), vec2(_391, _392));
    float _3488 = isnan(0.0) ? _393 : (isnan(_393) ? 0.0 : max(_393, 0.0));
    float _398 = sqrt(1.0 - (isnan(1.0) ? _3488 : (isnan(_3488) ? 1.0 : min(_3488, 1.0))));
    float _405 = (cbMtdParam._m0[14u].z * ((_333.x * 2.0) + (-1.0))) + _391;
    float _406 = (cbMtdParam._m0[14u].z * ((_333.y * 2.0) + (-1.0))) + _392;
    float _409 = fma(_398, _229, fma(_406, _221 * TANGENT.x, (_207 * _199) * _405));
    float _412 = fma(_398, _230, fma(_406, _221 * TANGENT.y, (_207 * _200) * _405));
    float _415 = fma(_398, _231, fma(_406, _221 * TANGENT.z, (_207 * _201) * _405));
    float _419 = inversesqrt(dot(vec3(_409, _412, _415), vec3(_409, _412, _415)));
    float _420 = _419 * _409;
    float _421 = _419 * _412;
    float _422 = _419 * _415;
    float _3499 = isnan(0.0) ? _300 : (isnan(_300) ? 0.0 : max(_300, 0.0));
    float _423 = isnan(1.0) ? _3499 : (isnan(_3499) ? 1.0 : min(_3499, 1.0));
    float _3510 = isnan(0.0) ? _345 : (isnan(_345) ? 0.0 : max(_345, 0.0));
    float _424 = isnan(1.0) ? _3510 : (isnan(_3510) ? 1.0 : min(_3510, 1.0));
    float _3521 = isnan(0.0) ? _293 : (isnan(_293) ? 0.0 : max(_293, 0.0));
    float _425 = isnan(1.0) ? _3521 : (isnan(_3521) ? 1.0 : min(_3521, 1.0));
    float _3532 = isnan(0.0) ? _296 : (isnan(_296) ? 0.0 : max(_296, 0.0));
    float _426 = isnan(1.0) ? _3532 : (isnan(_3532) ? 1.0 : min(_3532, 1.0));
    float _3543 = isnan(0.0) ? _299 : (isnan(_299) ? 0.0 : max(_299, 0.0));
    float _427 = isnan(1.0) ? _3543 : (isnan(_3543) ? 1.0 : min(_3543, 1.0));
    float _3554 = isnan(0.0) ? _320 : (isnan(_320) ? 0.0 : max(_320, 0.0));
    float _428 = isnan(1.0) ? _3554 : (isnan(_3554) ? 1.0 : min(_3554, 1.0));
    float _444 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _486 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _496 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _486);
    float _497 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _486);
    float _498 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _486);
    float _502 = inversesqrt(dot(vec3(_496, _497, _498), vec3(_496, _497, _498)));
    float _503 = _496 * _502;
    float _504 = _497 * _502;
    float _505 = _498 * _502;
    float _511 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _512 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _514 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _516 = _514.w;
    float _536 = fma(_422, cbSceneParam._m0[5u].z, fma(_421, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _420));
    float _539 = fma(_422, cbSceneParam._m0[6u].z, fma(_421, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _420));
    float _542 = fma(_422, cbSceneParam._m0[7u].z, fma(_421, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _420));
    vec4 _544 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _546 = _544.x;
    float _558 = (((_544.y - _424) + (_544.w * _424)) * cbMtdParam._m0[3u].x) + _424;
    float _575 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3(cbMtdParam._m0[3u].x * (_546 * _546)), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w)).z;
    float _583 = (((cbMatDynParam._m0[15u].x - _428) * cbMatDynParam._m0[15u].w) * _575) + _428;
    float _591 = ((_575 * cbMatDynParam._m0[16u].z) * (cbMatDynParam._m0[16u].x - _558)) + _558;
    uint _615 = uint(roundEven(NORMAL.w)) * 13u;
    uint _617 = _615 + 9u;
    uint _618 = _617 + uint(cbMatDynParam._m0[0u].w);
    float _624 = (cbMtdParam._m0[0u].x * _425) * cbInstanceData._m0[_618].x;
    float _625 = (cbMtdParam._m0[0u].y * _426) * cbInstanceData._m0[_618].y;
    float _626 = (cbMtdParam._m0[0u].z * _427) * cbInstanceData._m0[_618].z;
    float _3565 = isnan(0.0) ? _624 : (isnan(_624) ? 0.0 : max(_624, 0.0));
    float _627 = isnan(1.0) ? _3565 : (isnan(_3565) ? 1.0 : min(_3565, 1.0));
    float _3576 = isnan(0.0) ? _625 : (isnan(_625) ? 0.0 : max(_625, 0.0));
    float _628 = isnan(1.0) ? _3576 : (isnan(_3576) ? 1.0 : min(_3576, 1.0));
    float _3587 = isnan(0.0) ? _626 : (isnan(_626) ? 0.0 : max(_626, 0.0));
    float _629 = isnan(1.0) ? _3587 : (isnan(_3587) ? 1.0 : min(_3587, 1.0));
    vec4 _630 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _635 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _646 = (((_635.x - _583) + (_635.w * _583)) * cbMtdParam._m0[3u].x) + _583;
    float _659 = (cbMtdParam._m0[3u].x * (((_627 * _516) - _627) + _630.x)) + _627;
    float _660 = (cbMtdParam._m0[3u].x * (((_628 * _516) - _628) + _630.y)) + _628;
    float _661 = (cbMtdParam._m0[3u].x * (((_629 * _516) - _629) + _630.z)) + _629;
    vec4 _662 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _675 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3((_583 * (_425 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625, (_583 * (_426 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625, (_583 * (_427 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * _662.z;
    float _679 = _675 * cbMatDynParam._m0[13u].w;
    float _689 = (_679 * (cbMatDynParam._m0[13u].x - _659)) + _659;
    float _690 = (_679 * (cbMatDynParam._m0[13u].y - _660)) + _660;
    float _691 = (_679 * (cbMatDynParam._m0[13u].z - _661)) + _661;
    float _699 = ((_675 * cbMatDynParam._m0[15u].w) * (cbMatDynParam._m0[15u].x - _646)) + _646;
    float _700 = 1.0 - _699;
    float _701 = _700 * _689;
    float _702 = _700 * _690;
    float _703 = _700 * _691;
    float _707 = (_689 + (-0.039999999105930328369140625)) * _699;
    float _708 = (_690 + (-0.039999999105930328369140625)) * _699;
    float _709 = (_691 + (-0.039999999105930328369140625)) * _699;
    float _710 = _707 + 0.039999999105930328369140625;
    float _711 = _708 + 0.039999999105930328369140625;
    float _712 = _709 + 0.039999999105930328369140625;
    vec4 _721 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _511, cbSceneParam._m0[86u].y * _512));
    float _724 = _721.x * TEXCOORD_4;
    float _725 = dot(vec3(_420, _421, _422), vec3(_503, _504, _505));
    float _728 = _725 * 2.0;
    float _732 = (_728 * _420) - _503;
    float _733 = (_728 * _421) - _504;
    float _734 = (_728 * _422) - _505;
    float _738 = abs(dot(vec3(_503, _504, _505), vec3(_420, _421, _422)));
    float _3598 = isnan(0.0) ? _738 : (isnan(_738) ? 0.0 : max(_738, 0.0));
    float _740 = sqrt(_591);
    float _752 = exp2((_740 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3598 : (isnan(_3598) ? 1.0 : min(_3598, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_740 * 3.0));
    float _758 = (1.0 - _752) * ((_740 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _759 = _752 * _740;
    float _787 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _791 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _795 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1097;
    float _1099;
    float _1100;
    float _1101;
    float _1102;
    float _1103;
    float _1104;
    float _1105;
    float _1106;
    float _1107;
    float _1108;
    float _1109;
    float _1110;
    float _1111;
    float _1112;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _822 = fma(_795, cbModelParam._m0[26u].z, fma(_791, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _787));
        float _826 = fma(_795, cbModelParam._m0[27u].z, fma(_791, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _787));
        float _830 = fma(_795, cbModelParam._m0[28u].z, fma(_791, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _787));
        float _855 = _787 + _420;
        float _856 = _791 + _421;
        float _857 = _795 + _422;
        float _867 = fma(_857, cbModelParam._m0[26u].z, fma(_856, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _855)) - _822;
        float _868 = fma(_857, cbModelParam._m0[27u].z, fma(_856, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _855)) - _826;
        float _869 = fma(_857, cbModelParam._m0[28u].z, fma(_856, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _855)) - _830;
        float _873 = inversesqrt(dot(vec3(_867, _868, _869), vec3(_867, _868, _869)));
        float _886 = ((_873 * _867) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_822 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _887 = ((_873 * _868) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_826 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _888 = ((_873 * _869) / cbModelParam._m0[34u].z) + ((((((_830 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _891 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_886, _887, _888), 0.0);
        vec4 _898 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_886, _887, _888), 0.0);
        vec4 _905 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_886, _887, _888), 0.0);
        vec4 _912 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_886, _887, _888), 0.0);
        float _925 = exp2((_891.w + (-0.5)) * 20.0) * 2.0;
        float _926 = _925 * (_891.x + (-0.5));
        float _927 = _925 * (_891.y + (-0.5));
        float _928 = _925 * (_891.z + (-0.5));
        float _935 = exp2((_898.w + (-0.5)) * 20.0) * 2.0;
        float _936 = _935 * (_898.x + (-0.5));
        float _937 = _935 * (_898.y + (-0.5));
        float _938 = _935 * (_898.z + (-0.5));
        float _945 = exp2((_905.w + (-0.5)) * 20.0) * 2.0;
        float _946 = _945 * (_905.x + (-0.5));
        float _947 = _945 * (_905.y + (-0.5));
        float _948 = _945 * (_905.z + (-0.5));
        float _955 = exp2((_912.w + (-0.5)) * 20.0) * 2.0;
        float _956 = _955 * (_912.x + (-0.5));
        float _957 = _955 * (_912.y + (-0.5));
        float _958 = _955 * (_912.z + (-0.5));
        float _959 = isnan(0.0) ? _956 : (isnan(_956) ? 0.0 : max(_956, 0.0));
        float _960 = isnan(0.0) ? _957 : (isnan(_957) ? 0.0 : max(_957, 0.0));
        float _961 = isnan(0.0) ? _958 : (isnan(_958) ? 0.0 : max(_958, 0.0));
        float _962 = _926 * 0.5;
        float _963 = _936 * 0.5;
        float _964 = _946 * 0.5;
        float _965 = dot(vec3(_962, _963, _964), vec3(_962, _963, _964));
        float _970 = (_965 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_965);
        float _979 = (dot(vec3(_420, _421, _422), vec3(_970 * _962, _970 * _963, _970 * _964)) + 1.0) * 0.5;
        float _3624 = isnan(0.0) ? _979 : (isnan(_979) ? 0.0 : max(_979, 0.0));
        float _989 = sqrt(((_963 * _963) + (_962 * _962)) + (_964 * _964)) / (_959 + 9.9999997473787516355514526367188e-06);
        float _3635 = isnan(0.0) ? _989 : (isnan(_989) ? 0.0 : max(_989, 0.0));
        float _990 = isnan(1.0) ? _3635 : (isnan(_3635) ? 1.0 : min(_3635, 1.0));
        float _991 = _990 * 2.0;
        float _995 = (1.0 - _990) / (_990 + 1.0);
        float _3646 = isnan(0.0) ? _995 : (isnan(_995) ? 0.0 : max(_995, 0.0));
        float _996 = isnan(1.0) ? _3646 : (isnan(_3646) ? 1.0 : min(_3646, 1.0));
        float _1005 = ((((1.0 - _996) * (_991 + 2.0)) * exp2(log2(isnan(1.0) ? _3624 : (isnan(_3624) ? 1.0 : min(_3624, 1.0))) * (_991 + 1.0))) + _996) * _959;
        float _1006 = _927 * 0.5;
        float _1007 = _937 * 0.5;
        float _1008 = _947 * 0.5;
        float _1009 = dot(vec3(_1006, _1007, _1008), vec3(_1006, _1007, _1008));
        float _1014 = (_1009 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1009);
        float _1022 = (dot(vec3(_420, _421, _422), vec3(_1014 * _1006, _1014 * _1007, _1014 * _1008)) + 1.0) * 0.5;
        float _3657 = isnan(0.0) ? _1022 : (isnan(_1022) ? 0.0 : max(_1022, 0.0));
        float _1031 = sqrt(((_1007 * _1007) + (_1006 * _1006)) + (_1008 * _1008)) / (_960 + 9.9999997473787516355514526367188e-06);
        float _3668 = isnan(0.0) ? _1031 : (isnan(_1031) ? 0.0 : max(_1031, 0.0));
        float _1032 = isnan(1.0) ? _3668 : (isnan(_3668) ? 1.0 : min(_3668, 1.0));
        float _1033 = _1032 * 2.0;
        float _1037 = (1.0 - _1032) / (_1032 + 1.0);
        float _3679 = isnan(0.0) ? _1037 : (isnan(_1037) ? 0.0 : max(_1037, 0.0));
        float _1038 = isnan(1.0) ? _3679 : (isnan(_3679) ? 1.0 : min(_3679, 1.0));
        float _1047 = ((((1.0 - _1038) * (_1033 + 2.0)) * exp2(log2(isnan(1.0) ? _3657 : (isnan(_3657) ? 1.0 : min(_3657, 1.0))) * (_1033 + 1.0))) + _1038) * _960;
        float _1048 = _928 * 0.5;
        float _1049 = _938 * 0.5;
        float _1050 = _948 * 0.5;
        float _1051 = dot(vec3(_1048, _1049, _1050), vec3(_1048, _1049, _1050));
        float _1056 = (_1051 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1051);
        float _1064 = (dot(vec3(_420, _421, _422), vec3(_1056 * _1048, _1056 * _1049, _1056 * _1050)) + 1.0) * 0.5;
        float _3690 = isnan(0.0) ? _1064 : (isnan(_1064) ? 0.0 : max(_1064, 0.0));
        float _1073 = sqrt(((_1049 * _1049) + (_1048 * _1048)) + (_1050 * _1050)) / (_961 + 9.9999997473787516355514526367188e-06);
        float _3701 = isnan(0.0) ? _1073 : (isnan(_1073) ? 0.0 : max(_1073, 0.0));
        float _1074 = isnan(1.0) ? _3701 : (isnan(_3701) ? 1.0 : min(_3701, 1.0));
        float _1075 = _1074 * 2.0;
        float _1079 = (1.0 - _1074) / (_1074 + 1.0);
        float _3712 = isnan(0.0) ? _1079 : (isnan(_1079) ? 0.0 : max(_1079, 0.0));
        float _1080 = isnan(1.0) ? _3712 : (isnan(_3712) ? 1.0 : min(_3712, 1.0));
        float _1089 = ((((1.0 - _1080) * (_1075 + 2.0)) * exp2(log2(isnan(1.0) ? _3690 : (isnan(_3690) ? 1.0 : min(_3690, 1.0))) * (_1075 + 1.0))) + _1080) * _961;
        _1097 = _928;
        _1099 = _927;
        _1100 = _926;
        _1101 = _938;
        _1102 = _937;
        _1103 = _936;
        _1104 = _948;
        _1105 = _947;
        _1106 = _946;
        _1107 = _961;
        _1108 = _960;
        _1109 = _959;
        _1110 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1005 : (isnan(_1005) ? 0.0 : max(_1005, 0.0)));
        _1111 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1047 : (isnan(_1047) ? 0.0 : max(_1047, 0.0)));
        _1112 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1089 : (isnan(_1089) ? 0.0 : max(_1089, 0.0)));
    }
    else
    {
        _1097 = _1098;
        _1099 = _1098;
        _1100 = _1098;
        _1101 = _1098;
        _1102 = _1098;
        _1103 = _1098;
        _1104 = _1098;
        _1105 = _1098;
        _1106 = _1098;
        _1107 = _1098;
        _1108 = _1098;
        _1109 = _1098;
        _1110 = 0.0;
        _1111 = 0.0;
        _1112 = 0.0;
    }
    float _1407;
    float _1408;
    float _1409;
    float _1410;
    float _1411;
    float _1412;
    float _1413;
    float _1414;
    float _1415;
    float _1416;
    float _1417;
    float _1418;
    float _1419;
    float _1420;
    float _1421;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1138 = fma(_795, cbModelParam._m0[30u].z, fma(_791, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _787));
        float _1142 = fma(_795, cbModelParam._m0[31u].z, fma(_791, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _787));
        float _1146 = fma(_795, cbModelParam._m0[32u].z, fma(_791, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _787));
        float _1169 = _787 + _420;
        float _1170 = _791 + _421;
        float _1171 = _795 + _422;
        float _1181 = fma(_1171, cbModelParam._m0[30u].z, fma(_1170, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1169)) - _1138;
        float _1182 = fma(_1171, cbModelParam._m0[31u].z, fma(_1170, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1169)) - _1142;
        float _1183 = fma(_1171, cbModelParam._m0[32u].z, fma(_1170, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1169)) - _1146;
        float _1187 = inversesqrt(dot(vec3(_1181, _1182, _1183), vec3(_1181, _1182, _1183)));
        float _1200 = ((_1187 * _1181) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1138 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1201 = ((_1187 * _1182) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1142 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1202 = ((_1187 * _1183) / cbModelParam._m0[35u].z) + ((((((_1146 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1204 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1200, _1201, _1202), 0.0);
        vec4 _1211 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1200, _1201, _1202), 0.0);
        vec4 _1218 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1200, _1201, _1202), 0.0);
        vec4 _1225 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1200, _1201, _1202), 0.0);
        float _1237 = exp2((_1204.w + (-0.5)) * 20.0) * 2.0;
        float _1238 = _1237 * (_1204.x + (-0.5));
        float _1239 = _1237 * (_1204.y + (-0.5));
        float _1240 = _1237 * (_1204.z + (-0.5));
        float _1247 = exp2((_1211.w + (-0.5)) * 20.0) * 2.0;
        float _1248 = _1247 * (_1211.x + (-0.5));
        float _1249 = _1247 * (_1211.y + (-0.5));
        float _1250 = _1247 * (_1211.z + (-0.5));
        float _1257 = exp2((_1218.w + (-0.5)) * 20.0) * 2.0;
        float _1258 = _1257 * (_1218.x + (-0.5));
        float _1259 = _1257 * (_1218.y + (-0.5));
        float _1260 = _1257 * (_1218.z + (-0.5));
        float _1267 = exp2((_1225.w + (-0.5)) * 20.0) * 2.0;
        float _1268 = _1267 * (_1225.x + (-0.5));
        float _1269 = _1267 * (_1225.y + (-0.5));
        float _1270 = _1267 * (_1225.z + (-0.5));
        float _1271 = isnan(0.0) ? _1268 : (isnan(_1268) ? 0.0 : max(_1268, 0.0));
        float _1272 = isnan(0.0) ? _1269 : (isnan(_1269) ? 0.0 : max(_1269, 0.0));
        float _1273 = isnan(0.0) ? _1270 : (isnan(_1270) ? 0.0 : max(_1270, 0.0));
        float _1274 = _1238 * 0.5;
        float _1275 = _1248 * 0.5;
        float _1276 = _1258 * 0.5;
        float _1277 = dot(vec3(_1274, _1275, _1276), vec3(_1274, _1275, _1276));
        float _1282 = (_1277 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1277);
        float _1290 = (dot(vec3(_420, _421, _422), vec3(_1282 * _1274, _1282 * _1275, _1282 * _1276)) + 1.0) * 0.5;
        float _3753 = isnan(0.0) ? _1290 : (isnan(_1290) ? 0.0 : max(_1290, 0.0));
        float _1299 = sqrt(((_1275 * _1275) + (_1274 * _1274)) + (_1276 * _1276)) / (_1271 + 9.9999997473787516355514526367188e-06);
        float _3764 = isnan(0.0) ? _1299 : (isnan(_1299) ? 0.0 : max(_1299, 0.0));
        float _1300 = isnan(1.0) ? _3764 : (isnan(_3764) ? 1.0 : min(_3764, 1.0));
        float _1301 = _1300 * 2.0;
        float _1305 = (1.0 - _1300) / (_1300 + 1.0);
        float _3775 = isnan(0.0) ? _1305 : (isnan(_1305) ? 0.0 : max(_1305, 0.0));
        float _1306 = isnan(1.0) ? _3775 : (isnan(_3775) ? 1.0 : min(_3775, 1.0));
        float _1315 = ((((1.0 - _1306) * (_1301 + 2.0)) * exp2(log2(isnan(1.0) ? _3753 : (isnan(_3753) ? 1.0 : min(_3753, 1.0))) * (_1301 + 1.0))) + _1306) * _1271;
        float _1316 = _1239 * 0.5;
        float _1317 = _1249 * 0.5;
        float _1318 = _1259 * 0.5;
        float _1319 = dot(vec3(_1316, _1317, _1318), vec3(_1316, _1317, _1318));
        float _1324 = (_1319 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1319);
        float _1332 = (dot(vec3(_420, _421, _422), vec3(_1324 * _1316, _1324 * _1317, _1324 * _1318)) + 1.0) * 0.5;
        float _3786 = isnan(0.0) ? _1332 : (isnan(_1332) ? 0.0 : max(_1332, 0.0));
        float _1341 = sqrt(((_1317 * _1317) + (_1316 * _1316)) + (_1318 * _1318)) / (_1272 + 9.9999997473787516355514526367188e-06);
        float _3797 = isnan(0.0) ? _1341 : (isnan(_1341) ? 0.0 : max(_1341, 0.0));
        float _1342 = isnan(1.0) ? _3797 : (isnan(_3797) ? 1.0 : min(_3797, 1.0));
        float _1343 = _1342 * 2.0;
        float _1347 = (1.0 - _1342) / (_1342 + 1.0);
        float _3808 = isnan(0.0) ? _1347 : (isnan(_1347) ? 0.0 : max(_1347, 0.0));
        float _1348 = isnan(1.0) ? _3808 : (isnan(_3808) ? 1.0 : min(_3808, 1.0));
        float _1357 = ((((1.0 - _1348) * (_1343 + 2.0)) * exp2(log2(isnan(1.0) ? _3786 : (isnan(_3786) ? 1.0 : min(_3786, 1.0))) * (_1343 + 1.0))) + _1348) * _1272;
        float _1358 = _1240 * 0.5;
        float _1359 = _1250 * 0.5;
        float _1360 = _1260 * 0.5;
        float _1361 = dot(vec3(_1358, _1359, _1360), vec3(_1358, _1359, _1360));
        float _1366 = (_1361 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1361);
        float _1374 = (dot(vec3(_420, _421, _422), vec3(_1366 * _1358, _1366 * _1359, _1366 * _1360)) + 1.0) * 0.5;
        float _3819 = isnan(0.0) ? _1374 : (isnan(_1374) ? 0.0 : max(_1374, 0.0));
        float _1383 = sqrt(((_1359 * _1359) + (_1358 * _1358)) + (_1360 * _1360)) / (_1273 + 9.9999997473787516355514526367188e-06);
        float _3830 = isnan(0.0) ? _1383 : (isnan(_1383) ? 0.0 : max(_1383, 0.0));
        float _1384 = isnan(1.0) ? _3830 : (isnan(_3830) ? 1.0 : min(_3830, 1.0));
        float _1385 = _1384 * 2.0;
        float _1389 = (1.0 - _1384) / (_1384 + 1.0);
        float _3841 = isnan(0.0) ? _1389 : (isnan(_1389) ? 0.0 : max(_1389, 0.0));
        float _1390 = isnan(1.0) ? _3841 : (isnan(_3841) ? 1.0 : min(_3841, 1.0));
        float _1399 = ((((1.0 - _1390) * (_1385 + 2.0)) * exp2(log2(isnan(1.0) ? _3819 : (isnan(_3819) ? 1.0 : min(_3819, 1.0))) * (_1385 + 1.0))) + _1390) * _1273;
        _1407 = _1240;
        _1408 = _1239;
        _1409 = _1238;
        _1410 = _1250;
        _1411 = _1249;
        _1412 = _1248;
        _1413 = _1260;
        _1414 = _1259;
        _1415 = _1258;
        _1416 = _1273;
        _1417 = _1272;
        _1418 = _1271;
        _1419 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1315 : (isnan(_1315) ? 0.0 : max(_1315, 0.0)));
        _1420 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1357 : (isnan(_1357) ? 0.0 : max(_1357, 0.0)));
        _1421 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1399 : (isnan(_1399) ? 0.0 : max(_1399, 0.0)));
    }
    else
    {
        _1407 = _1098;
        _1408 = _1098;
        _1409 = _1098;
        _1410 = _1098;
        _1411 = _1098;
        _1412 = _1098;
        _1413 = _1098;
        _1414 = _1098;
        _1415 = _1098;
        _1416 = _1098;
        _1417 = _1098;
        _1418 = _1098;
        _1419 = 0.0;
        _1420 = 0.0;
        _1421 = 0.0;
    }
    float _1431 = (cbModelParam._m0[1u].x * (_1419 - _1110)) + _1110;
    float _1432 = (cbModelParam._m0[1u].x * (_1420 - _1111)) + _1111;
    float _1433 = (cbModelParam._m0[1u].x * (_1421 - _1112)) + _1112;
    float _1454 = fma(_1433, cbSceneParam._m0[89u].z, fma(_1432, cbSceneParam._m0[89u].y, _1431 * cbSceneParam._m0[89u].x));
    float _1457 = fma(_1433, cbSceneParam._m0[90u].z, fma(_1432, cbSceneParam._m0[90u].y, _1431 * cbSceneParam._m0[90u].x));
    float _1460 = fma(_1433, cbSceneParam._m0[91u].z, fma(_1432, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1431));
    float _1475 = _732 * 0.5;
    float _1476 = _733 * 0.5;
    float _1477 = _734 * 0.5;
    float _1478 = dot(vec4(_1475, _1476, _1477, 1.0), vec4(_1409, _1412, _1415, _1418));
    float _1481 = dot(vec4(_1475, _1476, _1477, 1.0), vec4(_1408, _1411, _1414, _1417));
    float _1484 = dot(vec4(_1475, _1476, _1477, 1.0), vec4(_1407, _1410, _1413, _1416));
    float _1515;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1491 = dot(vec4(_1475, _1476, _1477, 1.0), vec4(_1097, _1101, _1104, _1107));
        float _1495 = dot(vec4(_1475, _1476, _1477, 1.0), vec4(_1099, _1102, _1105, _1108));
        float _1499 = dot(vec4(_1475, _1476, _1477, 1.0), vec4(_1100, _1103, _1106, _1109));
        float _1506 = dot(vec4(cbModelParam._m0[39u]), vec4(_1475, _1476, _1477, 1.0));
        _1515 = dot(vec3(isnan(0.0) ? _1499 : (isnan(_1499) ? 0.0 : max(_1499, 0.0)), isnan(0.0) ? _1495 : (isnan(_1495) ? 0.0 : max(_1495, 0.0)), isnan(0.0) ? _1491 : (isnan(_1491) ? 0.0 : max(_1491, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1506) ? 0.0 : (isnan(0.0) ? _1506 : max(0.0, _1506))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1515 = 1.0;
    }
    float _1526;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1517 = dot(vec4(cbModelParam._m0[40u]), vec4(_1475, _1476, _1477, 1.0));
        _1526 = dot(vec3(isnan(0.0) ? _1478 : (isnan(_1478) ? 0.0 : max(_1478, 0.0)), isnan(0.0) ? _1481 : (isnan(_1481) ? 0.0 : max(_1481, 0.0)), isnan(0.0) ? _1484 : (isnan(_1484) ? 0.0 : max(_1484, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1517) ? 0.0 : (isnan(0.0) ? _1517 : max(0.0, _1517))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1526 = 1.0;
    }
    float _1530 = (_1526 * cbModelParam._m0[1u].x) + (_1515 * (1.0 - cbModelParam._m0[1u].x));
    float _1540 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _591);
    float _1541 = isnan(_1540) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1540 : min(cbModelParam._m0[25u].z, _1540));
    float _1621;
    float _1623;
    float _1625;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1588 = fma(_795, cbModelParam._m0[13u].z, fma(_791, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _787)) + cbModelParam._m0[13u].w;
        float _1592 = fma(_795, cbModelParam._m0[14u].z, fma(_791, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _787)) + cbModelParam._m0[14u].w;
        float _1596 = fma(_795, cbModelParam._m0[15u].z, fma(_791, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _787)) + cbModelParam._m0[15u].w;
        float _1599 = fma(_734, cbModelParam._m0[13u].z, fma(_733, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _732));
        float _1602 = fma(_734, cbModelParam._m0[14u].z, fma(_733, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _732));
        float _1605 = fma(_734, cbModelParam._m0[15u].z, fma(_733, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _732));
        float _1633;
        if (_1599 > 0.0)
        {
            _1633 = abs((1.0 - _1588) / _1599);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1599 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1588 + 1.0) / _1599);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1633 = frontier_phi_16_14_ladder;
        }
        float _1837;
        if (_1602 > 0.0)
        {
            _1837 = abs((1.0 - _1592) / _1602);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1602 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1592 + 1.0) / _1602);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1837 = frontier_phi_25_21_ladder;
        }
        float _2091;
        if (_1605 > 0.0)
        {
            _2091 = abs((1.0 - _1596) / _1605);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1605 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1596 + 1.0) / _1605);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2091 = frontier_phi_37_32_ladder;
        }
        float _2093 = isnan(_1837) ? _1633 : (isnan(_1633) ? _1837 : min(_1633, _1837));
        float _2094 = isnan(_2091) ? _2093 : (isnan(_2093) ? _2091 : min(_2093, _2091));
        float _2098 = (_2094 * _1599) + _1588;
        float _2099 = (_2094 * _1602) + _1592;
        float _2100 = (_2094 * _1605) + _1596;
        float _2101 = _2094 * 9.9999997473787516355514526367188e-05;
        float _2103 = (-1.0) - _2101;
        float _2105 = _2101 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_2100 > _2105) || ((_2100 < _2103) || ((_2099 > _2105) || ((_2099 < _2103) || ((_2098 < _2103) || (_2098 > _2105))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2228 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2100, cbModelParam._m0[9u].z, fma(_2099, cbModelParam._m0[9u].y, _2098 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2100, cbModelParam._m0[10u].z, fma(_2099, cbModelParam._m0[10u].y, _2098 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2100, cbModelParam._m0[11u].z, fma(_2099, cbModelParam._m0[11u].y, _2098 * cbModelParam._m0[11u].x))), _1541);
            frontier_phi_15_37_ladder = _2228.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2228.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2228.x * cbModelParam._m0[1u].y;
        }
        _1621 = frontier_phi_15_37_ladder_2;
        _1623 = frontier_phi_15_37_ladder_1;
        _1625 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1609 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_732, _733, _734), _1541);
        _1621 = _1609.x * cbModelParam._m0[1u].y;
        _1623 = _1609.y * cbModelParam._m0[1u].y;
        _1625 = _1609.z * cbModelParam._m0[1u].y;
    }
    float _1629 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _591);
    float _1630 = isnan(_1629) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1629 : min(cbModelParam._m0[25u].w, _1629));
    float _1721;
    float _1723;
    float _1725;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1685 = fma(_795, cbModelParam._m0[21u].z, fma(_791, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _787)) + cbModelParam._m0[21u].w;
        float _1689 = fma(_795, cbModelParam._m0[22u].z, fma(_791, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _787)) + cbModelParam._m0[22u].w;
        float _1693 = fma(_795, cbModelParam._m0[23u].z, fma(_791, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _787)) + cbModelParam._m0[23u].w;
        float _1696 = fma(_734, cbModelParam._m0[21u].z, fma(_733, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _732));
        float _1699 = fma(_734, cbModelParam._m0[22u].z, fma(_733, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _732));
        float _1702 = fma(_734, cbModelParam._m0[23u].z, fma(_733, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _732));
        float _1842;
        if (_1696 > 0.0)
        {
            _1842 = abs((1.0 - _1685) / _1696);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1696 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1685 + 1.0) / _1696);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1842 = frontier_phi_27_23_ladder;
        }
        float _2118;
        if (_1699 > 0.0)
        {
            _2118 = abs((1.0 - _1689) / _1699);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1699 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1689 + 1.0) / _1699);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _2118 = frontier_phi_39_34_ladder;
        }
        float _2331;
        if (_1702 > 0.0)
        {
            _2331 = abs((1.0 - _1693) / _1702);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1702 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1693 + 1.0) / _1702);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _2331 = frontier_phi_48_45_ladder;
        }
        float _2333 = isnan(_2118) ? _1842 : (isnan(_1842) ? _2118 : min(_1842, _2118));
        float _2334 = isnan(_2331) ? _2333 : (isnan(_2333) ? _2331 : min(_2333, _2331));
        float _2338 = (_2334 * _1696) + _1685;
        float _2339 = (_2334 * _1699) + _1689;
        float _2340 = (_2334 * _1702) + _1693;
        float _2341 = _2334 * 9.9999997473787516355514526367188e-05;
        float _2342 = (-1.0) - _2341;
        float _2344 = _2341 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2340 > _2344) || ((_2340 < _2342) || ((_2339 > _2344) || ((_2339 < _2342) || ((_2338 < _2342) || (_2338 > _2344))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2581 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2340, cbModelParam._m0[17u].z, fma(_2339, cbModelParam._m0[17u].y, _2338 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2340, cbModelParam._m0[18u].z, fma(_2339, cbModelParam._m0[18u].y, _2338 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2340, cbModelParam._m0[19u].z, fma(_2339, cbModelParam._m0[19u].y, _2338 * cbModelParam._m0[19u].x))), _1630);
            frontier_phi_24_48_ladder = _2581.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2581.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2581.x * cbModelParam._m0[1u].z;
        }
        _1721 = frontier_phi_24_48_ladder_2;
        _1723 = frontier_phi_24_48_ladder_1;
        _1725 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1705 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_732, _733, _734), _1630);
        _1721 = _1705.x * cbModelParam._m0[1u].z;
        _1723 = _1705.y * cbModelParam._m0[1u].z;
        _1725 = _1705.z * cbModelParam._m0[1u].z;
    }
    float _1738 = (((_758 * _710) + _759) * _724) * ((cbModelParam._m0[1u].w * (_1721 - _1621)) + _1621);
    float _1740 = (((_758 * _711) + _759) * _724) * ((cbModelParam._m0[1u].w * (_1723 - _1623)) + _1623);
    float _1742 = (((_758 * _712) + _759) * _724) * ((cbModelParam._m0[1u].w * (_1725 - _1625)) + _1625);
    float _1745 = fma(_1742, cbSceneParam._m0[89u].z, fma(_1740, cbSceneParam._m0[89u].y, _1738 * cbSceneParam._m0[89u].x));
    float _1748 = fma(_1742, cbSceneParam._m0[90u].z, fma(_1740, cbSceneParam._m0[90u].y, _1738 * cbSceneParam._m0[90u].x));
    float _1751 = fma(_1742, cbSceneParam._m0[91u].z, fma(_1740, cbSceneParam._m0[91u].y, _1738 * cbSceneParam._m0[91u].x));
    uvec4 _1761 = floatBitsToUint(cbInstanceData._m0[_615 + 5u]);
    uint _1763 = _1761.x * 14u;
    uint _1764 = _1763 + 13u;
    float _1771 = _724 + (-1.0);
    float _1776 = (cbLight._m0[_1764].x * _1771) + 1.0;
    float _1777 = (cbLight._m0[_1764].y * _1771) + 1.0;
    float _1778 = (cbLight._m0[_1764].z * _1771) + 1.0;
    float _1779 = (cbLight._m0[_1764].w * _1771) + 1.0;
    uint _1780 = _1763 + 5u;
    float _1786 = isnan(1.0) ? _1777 : (isnan(_1777) ? 1.0 : min(_1777, 1.0));
    uint _1790 = _1763 + 4u;
    float _1796 = isnan(1.0) ? _1776 : (isnan(_1776) ? 1.0 : min(_1776, 1.0));
    uint _1800 = _1763 | 1u;
    float _1811 = dot(vec3(cbLight._m0[_1763].xyz), vec3(_420, _421, _422));
    float _1814 = dot(vec3(cbLight._m0[_1800].xyz), vec3(_420, _421, _422));
    float _3977 = isnan(0.0) ? _1811 : (isnan(_1811) ? 0.0 : max(_1811, 0.0));
    float _3988 = isnan(0.0) ? _1814 : (isnan(_1814) ? 0.0 : max(_1814, 0.0));
    float _1819 = (isnan(1.0) ? _3977 : (isnan(_3977) ? 1.0 : min(_3977, 1.0))) * 0.3183098733425140380859375;
    float _1821 = (isnan(1.0) ? _3988 : (isnan(_3988) ? 1.0 : min(_3988, 1.0))) * 0.3183098733425140380859375;
    float _1828 = ((cbLight._m0[_1780].x * _1786) * _1821) + ((cbLight._m0[_1790].x * _1796) * _1819);
    float _1829 = ((_1786 * cbLight._m0[_1780].y) * _1821) + ((_1796 * cbLight._m0[_1790].y) * _1819);
    float _1830 = ((_1786 * cbLight._m0[_1780].z) * _1821) + ((_1796 * cbLight._m0[_1790].z) * _1819);
    uvec4 _1834 = floatBitsToUint(cbLight._m0[_1763 + 12u]);
    bool _1836 = _1834.x == 0u;
    float _1847;
    float _1849;
    float _1851;
    if (_1836)
    {
        _1847 = _1828;
        _1849 = _1829;
        _1851 = _1830;
    }
    else
    {
        uint _1855 = _1763 + 6u;
        float _1871 = (dot(vec3(cbLight._m0[_1763 + 2u].xyz), vec3(_420, _421, _422)) * 0.5) + 0.5;
        float _1872 = _1871 * _1871;
        float _3999 = isnan(0.0) ? _1872 : (isnan(_1872) ? 0.0 : max(_1872, 0.0));
        float _1873 = isnan(1.0) ? _3999 : (isnan(_3999) ? 1.0 : min(_3999, 1.0));
        float _1874 = isnan(1.0) ? _1778 : (isnan(_1778) ? 1.0 : min(_1778, 1.0));
        _1847 = (((cbLight._m0[_1855].x * 0.3183098733425140380859375) * _1873) * _1874) + _1828;
        _1849 = (((cbLight._m0[_1855].y * 0.3183098733425140380859375) * _1873) * _1874) + _1829;
        _1851 = (((cbLight._m0[_1855].z * 0.3183098733425140380859375) * _1873) * _1874) + _1830;
    }
    bool _1854 = _1834.y == 0u;
    float _1892;
    float _1894;
    float _1896;
    if (_1854)
    {
        _1892 = _1847;
        _1894 = _1849;
        _1896 = _1851;
    }
    else
    {
        uint _2062 = _1763 + 7u;
        float _2078 = (dot(vec3(cbLight._m0[_1763 + 3u].xyz), vec3(_420, _421, _422)) * 0.5) + 0.5;
        float _2079 = _2078 * _2078;
        float _4015 = isnan(0.0) ? _2079 : (isnan(_2079) ? 0.0 : max(_2079, 0.0));
        float _2080 = isnan(1.0) ? _4015 : (isnan(_4015) ? 1.0 : min(_4015, 1.0));
        float _2081 = isnan(1.0) ? _1779 : (isnan(_1779) ? 1.0 : min(_1779, 1.0));
        _1892 = (((cbLight._m0[_2062].x * 0.3183098733425140380859375) * _2080) * _2081) + _1847;
        _1894 = (((cbLight._m0[_2062].y * 0.3183098733425140380859375) * _2080) * _2081) + _1849;
        _1896 = (((cbLight._m0[_2062].z * 0.3183098733425140380859375) * _2080) * _2081) + _1851;
    }
    uint _1899 = _1763 + 8u;
    float _1912 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1763].w)) * _591) * 0.949999988079071044921875);
    float _1913 = _1912 * _1912;
    float _1914 = cbLight._m0[_1763].x + _503;
    float _1915 = cbLight._m0[_1763].y + _504;
    float _1916 = cbLight._m0[_1763].z + _505;
    float _1920 = inversesqrt(dot(vec3(_1914, _1915, _1916), vec3(_1914, _1915, _1916)));
    float _1921 = _1920 * _1914;
    float _1922 = _1920 * _1915;
    float _1923 = _1920 * _1916;
    float _1924 = dot(vec3(_420, _421, _422), vec3(cbLight._m0[_1763].xyz));
    float _4031 = isnan(0.0) ? _1924 : (isnan(_1924) ? 0.0 : max(_1924, 0.0));
    float _1927 = isnan(1.0) ? _4031 : (isnan(_4031) ? 1.0 : min(_4031, 1.0));
    float _4042 = isnan(0.0) ? _725 : (isnan(_725) ? 0.0 : max(_725, 0.0));
    float _1928 = isnan(1.0) ? _4042 : (isnan(_4042) ? 1.0 : min(_4042, 1.0));
    float _1929 = dot(vec3(_420, _421, _422), vec3(_1921, _1922, _1923));
    float _4053 = isnan(0.0) ? _1929 : (isnan(_1929) ? 0.0 : max(_1929, 0.0));
    float _1932 = isnan(1.0) ? _4053 : (isnan(_4053) ? 1.0 : min(_4053, 1.0));
    float _1933 = dot(vec3(cbLight._m0[_1763].xyz), vec3(_1921, _1922, _1923));
    float _4064 = isnan(0.0) ? _1933 : (isnan(_1933) ? 0.0 : max(_1933, 0.0));
    float _1937 = _1913 * _1913;
    float _1941 = ((_1932 * _1932) * (_1937 + (-1.0))) + 1.0;
    float _1949 = exp2(log2(1.0 - (isnan(1.0) ? _4064 : (isnan(_4064) ? 1.0 : min(_4064, 1.0)))) * 5.0);
    float _1950 = 0.959999978542327880859375 - _707;
    float _1952 = 0.959999978542327880859375 - _708;
    float _1953 = 0.959999978542327880859375 - _709;
    float _1960 = 1.0 - _1913;
    float _1971 = (0.5 / (((_1928 * ((_1927 * _1960) + _1913)) + 9.9999999392252902907785028219223e-09) + (((_1928 * _1960) + _1913) * _1927))) * _1927;
    float _4075 = isnan(0.0) ? _1971 : (isnan(_1971) ? 0.0 : max(_1971, 0.0));
    float _1973 = (isnan(1.0) ? _4075 : (isnan(_4075) ? 1.0 : min(_4075, 1.0))) * (_1937 / ((_1941 * _1941) * 3.141590118408203125));
    uint _1984 = _1763 + 9u;
    float _1995 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1800].w)) * _591) * 0.949999988079071044921875);
    float _1996 = _1995 * _1995;
    float _1997 = cbLight._m0[_1800].x + _503;
    float _1998 = cbLight._m0[_1800].y + _504;
    float _1999 = cbLight._m0[_1800].z + _505;
    float _2003 = inversesqrt(dot(vec3(_1997, _1998, _1999), vec3(_1997, _1998, _1999)));
    float _2004 = _2003 * _1997;
    float _2005 = _2003 * _1998;
    float _2006 = _2003 * _1999;
    float _2007 = dot(vec3(_420, _421, _422), vec3(cbLight._m0[_1800].xyz));
    float _4086 = isnan(0.0) ? _2007 : (isnan(_2007) ? 0.0 : max(_2007, 0.0));
    float _2010 = isnan(1.0) ? _4086 : (isnan(_4086) ? 1.0 : min(_4086, 1.0));
    float _2011 = dot(vec3(_420, _421, _422), vec3(_2004, _2005, _2006));
    float _4097 = isnan(0.0) ? _2011 : (isnan(_2011) ? 0.0 : max(_2011, 0.0));
    float _2014 = isnan(1.0) ? _4097 : (isnan(_4097) ? 1.0 : min(_4097, 1.0));
    float _2015 = dot(vec3(cbLight._m0[_1800].xyz), vec3(_2004, _2005, _2006));
    float _4108 = isnan(0.0) ? _2015 : (isnan(_2015) ? 0.0 : max(_2015, 0.0));
    float _2019 = _1996 * _1996;
    float _2023 = ((_2014 * _2014) * (_2019 + (-1.0))) + 1.0;
    float _2030 = exp2(log2(1.0 - (isnan(1.0) ? _4108 : (isnan(_4108) ? 1.0 : min(_4108, 1.0)))) * 5.0);
    float _2037 = 1.0 - _1996;
    float _2047 = (0.5 / (((_1928 * ((_2010 * _2037) + _1996)) + 9.9999999392252902907785028219223e-09) + (((_1928 * _2037) + _1996) * _2010))) * _2010;
    float _4119 = isnan(0.0) ? _2047 : (isnan(_2047) ? 0.0 : max(_2047, 0.0));
    float _2049 = (isnan(1.0) ? _4119 : (isnan(_4119) ? 1.0 : min(_4119, 1.0))) * (_2019 / ((_2023 * _2023) * 3.141590118408203125));
    float _2059 = (((((_2030 * _1950) + _710) * cbLight._m0[_1984].x) * _2049) * _1786) + (((((_1949 * _1950) + _710) * cbLight._m0[_1899].x) * _1973) * _1796);
    float _2060 = (((((_2030 * _1952) + _711) * cbLight._m0[_1984].y) * _2049) * _1786) + (((((_1949 * _1952) + _711) * cbLight._m0[_1899].y) * _1973) * _1796);
    float _2061 = (((((_2030 * _1953) + _712) * cbLight._m0[_1984].z) * _2049) * _1786) + (((((_1949 * _1953) + _712) * cbLight._m0[_1899].z) * _1973) * _1796);
    float _2123;
    float _2125;
    float _2127;
    if (_1836)
    {
        _2123 = _2059;
        _2125 = _2060;
        _2127 = _2061;
    }
    else
    {
        uint _2129 = _1763 + 2u;
        uint _2133 = _1763 + 10u;
        float _2147 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2129].w)) * _591) * 0.949999988079071044921875);
        float _2148 = _2147 * _2147;
        float _2149 = cbLight._m0[_2129].x + _503;
        float _2150 = cbLight._m0[_2129].y + _504;
        float _2151 = cbLight._m0[_2129].z + _505;
        float _2155 = inversesqrt(dot(vec3(_2149, _2150, _2151), vec3(_2149, _2150, _2151)));
        float _2156 = _2155 * _2149;
        float _2157 = _2155 * _2150;
        float _2158 = _2155 * _2151;
        float _2159 = dot(vec3(_420, _421, _422), vec3(cbLight._m0[_2129].xyz));
        float _4130 = isnan(0.0) ? _2159 : (isnan(_2159) ? 0.0 : max(_2159, 0.0));
        float _2162 = isnan(1.0) ? _4130 : (isnan(_4130) ? 1.0 : min(_4130, 1.0));
        float _2163 = dot(vec3(_420, _421, _422), vec3(_2156, _2157, _2158));
        float _4141 = isnan(0.0) ? _2163 : (isnan(_2163) ? 0.0 : max(_2163, 0.0));
        float _2166 = isnan(1.0) ? _4141 : (isnan(_4141) ? 1.0 : min(_4141, 1.0));
        float _2167 = dot(vec3(cbLight._m0[_2129].xyz), vec3(_2156, _2157, _2158));
        float _4152 = isnan(0.0) ? _2167 : (isnan(_2167) ? 0.0 : max(_2167, 0.0));
        float _2171 = _2148 * _2148;
        float _2175 = ((_2166 * _2166) * (_2171 + (-1.0))) + 1.0;
        float _2182 = exp2(log2(1.0 - (isnan(1.0) ? _4152 : (isnan(_4152) ? 1.0 : min(_4152, 1.0)))) * 5.0);
        float _2189 = 1.0 - _2148;
        float _2199 = (0.5 / (((_1928 * ((_2162 * _2189) + _2148)) + 9.9999999392252902907785028219223e-09) + (((_1928 * _2189) + _2148) * _2162))) * _2162;
        float _4163 = isnan(0.0) ? _2199 : (isnan(_2199) ? 0.0 : max(_2199, 0.0));
        float _2201 = (isnan(1.0) ? _4163 : (isnan(_4163) ? 1.0 : min(_4163, 1.0))) * (_2171 / ((_2175 * _2175) * 3.141590118408203125));
        float _2202 = isnan(1.0) ? _1778 : (isnan(_1778) ? 1.0 : min(_1778, 1.0));
        _2123 = (((((_2182 * _1950) + _710) * cbLight._m0[_2133].x) * _2201) * _2202) + _2059;
        _2125 = (((((_2182 * _1952) + _711) * cbLight._m0[_2133].y) * _2201) * _2202) + _2060;
        _2127 = (((((_2182 * _1953) + _712) * cbLight._m0[_2133].z) * _2201) * _2202) + _2061;
    }
    float _2237;
    float _2239;
    float _2241;
    if (_1854)
    {
        _2237 = _2123;
        _2239 = _2125;
        _2241 = _2127;
    }
    else
    {
        uint _2248 = _1763 + 3u;
        uint _2252 = _1763 + 11u;
        float _2266 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2248].w)) * _591) * 0.949999988079071044921875);
        float _2267 = _2266 * _2266;
        float _2268 = cbLight._m0[_2248].x + _503;
        float _2269 = cbLight._m0[_2248].y + _504;
        float _2270 = cbLight._m0[_2248].z + _505;
        float _2274 = inversesqrt(dot(vec3(_2268, _2269, _2270), vec3(_2268, _2269, _2270)));
        float _2275 = _2274 * _2268;
        float _2276 = _2274 * _2269;
        float _2277 = _2274 * _2270;
        float _2278 = dot(vec3(_420, _421, _422), vec3(cbLight._m0[_2248].xyz));
        float _4179 = isnan(0.0) ? _2278 : (isnan(_2278) ? 0.0 : max(_2278, 0.0));
        float _2281 = isnan(1.0) ? _4179 : (isnan(_4179) ? 1.0 : min(_4179, 1.0));
        float _2282 = dot(vec3(_420, _421, _422), vec3(_2275, _2276, _2277));
        float _4190 = isnan(0.0) ? _2282 : (isnan(_2282) ? 0.0 : max(_2282, 0.0));
        float _2285 = isnan(1.0) ? _4190 : (isnan(_4190) ? 1.0 : min(_4190, 1.0));
        float _2286 = dot(vec3(cbLight._m0[_2248].xyz), vec3(_2275, _2276, _2277));
        float _4201 = isnan(0.0) ? _2286 : (isnan(_2286) ? 0.0 : max(_2286, 0.0));
        float _2290 = _2267 * _2267;
        float _2294 = ((_2285 * _2285) * (_2290 + (-1.0))) + 1.0;
        float _2301 = exp2(log2(1.0 - (isnan(1.0) ? _4201 : (isnan(_4201) ? 1.0 : min(_4201, 1.0)))) * 5.0);
        float _2308 = 1.0 - _2267;
        float _2318 = (0.5 / (((_1928 * ((_2281 * _2308) + _2267)) + 9.9999999392252902907785028219223e-09) + (((_1928 * _2308) + _2267) * _2281))) * _2281;
        float _4212 = isnan(0.0) ? _2318 : (isnan(_2318) ? 0.0 : max(_2318, 0.0));
        float _2320 = (isnan(1.0) ? _4212 : (isnan(_4212) ? 1.0 : min(_4212, 1.0))) * (_2290 / ((_2294 * _2294) * 3.141590118408203125));
        float _2321 = isnan(1.0) ? _1779 : (isnan(_1779) ? 1.0 : min(_1779, 1.0));
        _2237 = (((((_2301 * _1950) + _710) * cbLight._m0[_2252].x) * _2320) * _2321) + _2123;
        _2239 = (((((_2301 * _1952) + _711) * cbLight._m0[_2252].y) * _2320) * _2321) + _2125;
        _2241 = (((((_2301 * _1953) + _712) * cbLight._m0[_2252].z) * _2320) * _2321) + _2127;
    }
    float _2455;
    float _2457;
    float _2459;
    float _2461;
    float _2463;
    float _2465;
    if (_1761.y == 0u)
    {
        float _2396 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2397 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2396;
        float _2398 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2396;
        float _2399 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2396;
        uvec4 _2411 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2412 = _2411.x;
        uint _2423 = uint((float(_2411.y) * floor(float(uint(cbSceneParam._m0[85u].y * _512) / _2412))) + floor(float(uint(cbSceneParam._m0[85u].x * _511) / _2412)));
        float _2433 = (log2(_2399 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2434 = isnan(0.0) ? _2433 : (isnan(_2433) ? 0.0 : max(_2433, 0.0));
        uint _2437 = uint(isnan(14.0) ? _2434 : (isnan(_2434) ? 14.0 : min(_2434, 14.0)));
        uvec4 _2442 = texelFetch(g_lightClusterGridBuffer, int(((_2437 << 2u) + (_2423 << 6u)) >> 2u));
        uint _2443 = _2442.x;
        uint _2444 = _2411.z;
        float _2586;
        float _2588;
        float _2590;
        float _2592;
        float _2594;
        float _2596;
        if (((((1u << ((_2444 >> 4u) & 15u)) + 4294967295u) & _2443) == 0u) || ((_2444 & 240u) == 0u))
        {
            _2586 = 0.0;
            _2588 = 0.0;
            _2590 = 0.0;
            _2592 = 0.0;
            _2594 = 0.0;
            _2596 = 0.0;
        }
        else
        {
            float _2587;
            float _2589;
            float _2591;
            float _2593;
            float _2595;
            float _2597;
            float _2739 = 0.0;
            float _2740 = 0.0;
            float _2741 = 0.0;
            float _2742 = 0.0;
            float _2743 = 0.0;
            float _2744 = 0.0;
            uint _2745 = 0u;
            uint _2754;
            bool _2755;
            for (;;)
            {
                _2754 = texelFetch(g_lightClassification, int((((_2437 << 5u) + (_2423 << 9u)) + (_2745 << 2u)) >> 2u)).x;
                _2755 = _2754 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2755)
                {
                    frontier_phi_63_pred = _2744;
                    frontier_phi_63_pred_1 = _2743;
                    frontier_phi_63_pred_2 = _2742;
                    frontier_phi_63_pred_3 = _2741;
                    frontier_phi_63_pred_4 = _2740;
                    frontier_phi_63_pred_5 = _2739;
                }
                else
                {
                    float _2863;
                    float _2864;
                    float _2865;
                    float _2866;
                    float _2867;
                    float _2868;
                    uint _2869;
                    _2863 = _2739;
                    _2864 = _2740;
                    _2865 = _2741;
                    _2866 = _2742;
                    _2867 = _2743;
                    _2868 = _2744;
                    _2869 = _2754;
                    float _2795;
                    float _2796;
                    float _2797;
                    float _2798;
                    float _2799;
                    float _2800;
                    for (;;)
                    {
                        uint _2873 = uint(findLSB(_2869)) + (_2745 << 5u);
                        uint _2870 = (_2869 + 4294967295u) & _2869;
                        uint _2875 = _2873 * 48u;
                        vec4 _2889 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2875)).x, texelFetch(g_PointLightRenderingBuffer, int(_2875 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2875 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2875 + 3u)).x));
                        uint _2895 = (_2873 * 48u) + 4u;
                        vec4 _2908 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2895)).x, texelFetch(g_PointLightRenderingBuffer, int(_2895 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2895 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2895 + 3u)).x));
                        uint _2914 = (_2873 * 48u) + 8u;
                        vec3 _2925 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2914)).x, texelFetch(g_PointLightRenderingBuffer, int(_2914 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2914 + 2u)).x));
                        float _2929 = _2889.x - _2397;
                        float _2930 = _2889.y - _2398;
                        float _2931 = _2889.z - _2399;
                        float _2932 = dot(vec3(_2929, _2930, _2931), vec3(_2929, _2930, _2931));
                        float _2935 = inversesqrt(_2932);
                        float _2936 = _2935 * _2929;
                        float _2937 = _2935 * _2930;
                        float _2938 = _2935 * _2931;
                        float _2939 = dot(vec3(_536, _539, _542), vec3(_2936, _2937, _2938));
                        float _2944 = 1.0 - (_2932 * _2889.w);
                        float _4238 = isnan(0.0) ? _2944 : (isnan(_2944) ? 0.0 : max(_2944, 0.0));
                        float _2945 = isnan(1.0) ? _4238 : (isnan(_4238) ? 1.0 : min(_4238, 1.0));
                        float _2946 = sqrt(_2932) * _2908.w;
                        float _2949 = 1.39999997615814208984375 / (_2946 + 1.39999997615814208984375);
                        float _2950 = _2949 * _2949;
                        float _2953 = ((1.0 - _2950) * _2939) + _2950;
                        float _2956 = _2946 * _2946;
                        float _2960 = ((isnan(0.0) ? _2953 : (isnan(_2953) ? 0.0 : max(_2953, 0.0))) * _2945) / ((_2956 * 0.699999988079071044921875) + 1.0);
                        float _2964 = (-0.0) - _2397;
                        float _2965 = (-0.0) - _2398;
                        float _2966 = (-0.0) - _2399;
                        float _2970 = inversesqrt(dot(vec3(_2964, _2965, _2966), vec3(_2964, _2965, _2966)));
                        float _2971 = _2970 * _2964;
                        float _2972 = _2970 * _2965;
                        float _2973 = _2970 * _2966;
                        float _2981 = exp2(log2(1.0 / ((_2956 * 3.5) + 5.0)) * 0.25);
                        float _2982 = 1.0 - _740;
                        float _2989 = sqrt(1.0 - ((1.0 - (_2982 * _2982)) * (1.0 - (_2981 * _2981))));
                        float _2990 = _2989 * _2989;
                        float _2991 = _2990 * _2990;
                        float _2992 = _2971 + _2936;
                        float _2993 = _2972 + _2937;
                        float _2994 = _2973 + _2938;
                        float _2998 = inversesqrt(dot(vec3(_2992, _2993, _2994), vec3(_2992, _2993, _2994)));
                        float _3002 = dot(vec3(_536, _539, _542), vec3(_2971, _2972, _2973));
                        float _4254 = isnan(0.0) ? _3002 : (isnan(_3002) ? 0.0 : max(_3002, 0.0));
                        float _3005 = isnan(1.0) ? _4254 : (isnan(_4254) ? 1.0 : min(_4254, 1.0));
                        float _3006 = dot(vec3(_536, _539, _542), vec3(_2998 * _2992, _2998 * _2993, _2998 * _2994));
                        float _4265 = isnan(0.0) ? _3006 : (isnan(_3006) ? 0.0 : max(_3006, 0.0));
                        float _3009 = isnan(1.0) ? _4265 : (isnan(_4265) ? 1.0 : min(_4265, 1.0));
                        float _3013 = ((_3009 * _3009) * (_2991 + (-1.0))) + 1.0;
                        float _3014 = _2949 * _2990;
                        float _3015 = _3014 * _3014;
                        float _3018 = ((1.0 - _3015) * _2939) + _3015;
                        float _4276 = isnan(0.0) ? _3018 : (isnan(_3018) ? 0.0 : max(_3018, 0.0));
                        float _3019 = isnan(1.0) ? _4276 : (isnan(_4276) ? 1.0 : min(_4276, 1.0));
                        float _3020 = 1.0 - _2990;
                        float _3030 = (0.5 / (((_3019 * ((_3005 * _3020) + _2990)) + 9.9999999392252902907785028219223e-09) + (((_3019 * _3020) + _2990) * _3005))) * _3019;
                        float _4287 = isnan(0.0) ? _3030 : (isnan(_3030) ? 0.0 : max(_3030, 0.0));
                        float _3041 = (((_2991 * 3.1415927410125732421875) * (isnan(1.0) ? _4287 : (isnan(_4287) ? 1.0 : min(_4287, 1.0)))) / ((_3013 * _3013) * ((_2956 * 2.1991131305694580078125) + 3.141590118408203125))) * _2945;
                        _2798 = (_2960 * _2908.x) + _2866;
                        _2799 = (_2960 * _2908.y) + _2867;
                        _2800 = (_2960 * _2908.z) + _2868;
                        _2795 = (_3041 * _2925.x) + _2863;
                        _2796 = (_3041 * _2925.y) + _2864;
                        _2797 = (_3041 * _2925.z) + _2865;
                        if (_2870 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2863 = _2795;
                            _2864 = _2796;
                            _2865 = _2797;
                            _2866 = _2798;
                            _2867 = _2799;
                            _2868 = _2800;
                            _2869 = _2870;
                        }
                    }
                    frontier_phi_63_pred = _2800;
                    frontier_phi_63_pred_1 = _2799;
                    frontier_phi_63_pred_2 = _2798;
                    frontier_phi_63_pred_3 = _2797;
                    frontier_phi_63_pred_4 = _2796;
                    frontier_phi_63_pred_5 = _2795;
                }
                _2597 = frontier_phi_63_pred;
                _2595 = frontier_phi_63_pred_1;
                _2593 = frontier_phi_63_pred_2;
                _2591 = frontier_phi_63_pred_3;
                _2589 = frontier_phi_63_pred_4;
                _2587 = frontier_phi_63_pred_5;
                uint _2746 = _2745 + 1u;
                if (_2746 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2739 = _2587;
                    _2740 = _2589;
                    _2741 = _2591;
                    _2742 = _2593;
                    _2743 = _2595;
                    _2744 = _2597;
                    _2745 = _2746;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2586 = _2587;
            _2588 = _2589;
            _2590 = _2591;
            _2592 = _2593;
            _2594 = _2595;
            _2596 = _2597;
        }
        uvec4 _2600 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2601 = _2600.z;
        uint _2603 = (_2601 >> 8u) & 15u;
        float _2707;
        float _2709;
        float _2711;
        float _2713;
        float _2715;
        float _2717;
        if (((4294967295u << _2603) & _2443) == 0u)
        {
            _2707 = _2586;
            _2709 = _2588;
            _2711 = _2590;
            _2713 = _2592;
            _2715 = _2594;
            _2717 = _2596;
        }
        else
        {
            float _2732 = inversesqrt(dot(vec3(_2397, _2398, _2399), vec3(_2397, _2398, _2399)));
            float _2733 = _2732 * _2397;
            float _2734 = _2732 * _2398;
            float _2735 = _2732 * _2399;
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2603 < ((_2601 >> 12u) & 15u))
            {
                float _2708;
                float _2710;
                float _2712;
                float _2714;
                float _2716;
                float _2718;
                float _2846 = _2586;
                float _2847 = _2588;
                float _2848 = _2590;
                float _2849 = _2592;
                float _2850 = _2594;
                float _2851 = _2596;
                uint _2852 = _2603;
                uint _2861;
                bool _2862;
                for (;;)
                {
                    _2861 = texelFetch(g_lightClassification, int((((_2437 << 5u) + (_2423 << 9u)) + (_2852 << 2u)) >> 2u)).x;
                    _2862 = _2861 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_2862)
                    {
                        frontier_phi_69_pred = _2851;
                        frontier_phi_69_pred_1 = _2850;
                        frontier_phi_69_pred_2 = _2849;
                        frontier_phi_69_pred_3 = _2848;
                        frontier_phi_69_pred_4 = _2847;
                        frontier_phi_69_pred_5 = _2846;
                    }
                    else
                    {
                        float _3046;
                        float _3047;
                        float _3048;
                        float _3049;
                        float _3050;
                        float _3051;
                        float _3341;
                        float _3342;
                        float _3343;
                        float _3344;
                        float _3345;
                        float _3346;
                        float _3059 = _2846;
                        float _3060 = _2847;
                        float _3061 = _2848;
                        float _3062 = _2849;
                        float _3063 = _2850;
                        float _3064 = _2851;
                        uint _3065 = _2861;
                        uint _3066;
                        vec4 _3091;
                        float _3092;
                        vec4 _3107;
                        vec3 _3119;
                        vec4 _3134;
                        vec4 _3150;
                        float _3197;
                        bool _3198;
                        for (;;)
                        {
                            uint _3076 = ((_2852 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3065));
                            _3066 = (_3065 + 4294967295u) & _3065;
                            uint _3078 = _3076 * 40u;
                            _3091 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3078)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3078 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3078 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3078 + 3u)).x));
                            _3092 = _3091.w;
                            uint _3094 = (_3076 * 40u) + 4u;
                            _3107 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3094)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3094 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3094 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3094 + 3u)).x));
                            uint _3109 = (_3076 * 40u) + 8u;
                            _3119 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3109)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3109 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3109 + 2u)).x));
                            uint _3121 = (_3076 * 40u) + 16u;
                            _3134 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3121)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3121 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3121 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3121 + 3u)).x));
                            uint _3137 = (_3076 * 40u) + 20u;
                            _3150 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3137)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3137 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3137 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3137 + 3u)).x));
                            uint _3153 = (_3076 * 40u) + 24u;
                            vec4 _3166 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3153)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3153 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3153 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3153 + 3u)).x));
                            uint _3172 = (_3076 * 40u) + 28u;
                            vec4 _3185 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3172)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3172 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3172 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3172 + 3u)).x));
                            _3197 = fma(_2399, _3185.z, fma(_2398, _3185.y, _3185.x * _2397)) + _3185.w;
                            _3198 = !((fma(_2399, _3166.z, fma(_2398, _3166.y, _3166.x * _2397)) + _3166.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_3198)
                            {
                                float _3225 = _3091.x - _2397;
                                float _3226 = _3091.y - _2398;
                                float _3227 = _3091.z - _2399;
                                float _3228 = dot(vec3(_3225, _3226, _3227), vec3(_3225, _3226, _3227));
                                float _3231 = inversesqrt(_3228);
                                float _3232 = _3231 * _3225;
                                float _3233 = _3231 * _3226;
                                float _3234 = _3231 * _3227;
                                float _3238 = 1.0 - (_3228 / (_3092 * _3092));
                                float _4298 = isnan(0.0) ? _3238 : (isnan(_3238) ? 0.0 : max(_3238, 0.0));
                                float _3239 = isnan(1.0) ? _4298 : (isnan(_4298) ? 1.0 : min(_4298, 1.0));
                                float _3243 = sqrt(_3228) * _3107.w;
                                float _3245 = 1.39999997615814208984375 / (_3243 + 1.39999997615814208984375);
                                float _3246 = _3245 * _3245;
                                float _3249 = ((1.0 - _3246) * dot(vec3(_3232, _3233, _3234), vec3(_536, _539, _542))) + _3246;
                                float _3252 = _3243 * _3243;
                                float _3256 = (fma(_2399, _3134.z, fma(_2398, _3134.y, _3134.x * _2397)) + _3134.w) / _3197;
                                float _3257 = (fma(_2399, _3150.z, fma(_2398, _3150.y, _3150.x * _2397)) + _3150.w) / _3197;
                                float _3261 = 1.0 - dot(vec2(_3256, _3257), vec2(_3256, _3257));
                                float _4314 = isnan(0.0) ? _3261 : (isnan(_3261) ? 0.0 : max(_3261, 0.0));
                                float _3262 = isnan(1.0) ? _4314 : (isnan(_4314) ? 1.0 : min(_4314, 1.0));
                                float _3263 = _3262 * (((isnan(0.0) ? _3249 : (isnan(_3249) ? 0.0 : max(_3249, 0.0))) * _3239) / ((_3252 * 0.699999988079071044921875) + 1.0));
                                float _3275 = exp2(log2(1.0 / ((_3252 * 3.5) + 5.0)) * 0.25);
                                float _3276 = 1.0 - _740;
                                float _3283 = sqrt(1.0 - ((1.0 - (_3276 * _3276)) * (1.0 - (_3275 * _3275))));
                                float _3284 = _3283 * _3283;
                                float _3285 = _3284 * _3284;
                                float _3286 = _3232 - _2733;
                                float _3287 = _3233 - _2734;
                                float _3288 = _3234 - _2735;
                                float _3292 = inversesqrt(dot(vec3(_3286, _3287, _3288), vec3(_3286, _3287, _3288)));
                                float _3296 = dot(vec3(_536, _539, _542), vec3((-0.0) - _2733, (-0.0) - _2734, (-0.0) - _2735));
                                float _4325 = isnan(0.0) ? _3296 : (isnan(_3296) ? 0.0 : max(_3296, 0.0));
                                float _3299 = isnan(1.0) ? _4325 : (isnan(_4325) ? 1.0 : min(_4325, 1.0));
                                float _3300 = dot(vec3(_536, _539, _542), vec3(_3292 * _3286, _3292 * _3287, _3292 * _3288));
                                float _4336 = isnan(0.0) ? _3300 : (isnan(_3300) ? 0.0 : max(_3300, 0.0));
                                float _3303 = isnan(1.0) ? _4336 : (isnan(_4336) ? 1.0 : min(_4336, 1.0));
                                float _3307 = ((_3303 * _3303) * (_3285 + (-1.0))) + 1.0;
                                float _3308 = _3245 * _3284;
                                float _3309 = _3308 * _3308;
                                float _3315 = ((1.0 - _3309) * dot(vec3(_536, _539, _542), vec3(_3232, _3233, _3234))) + _3309;
                                float _4347 = isnan(0.0) ? _3315 : (isnan(_3315) ? 0.0 : max(_3315, 0.0));
                                float _3316 = isnan(1.0) ? _4347 : (isnan(_4347) ? 1.0 : min(_4347, 1.0));
                                float _3317 = 1.0 - _3284;
                                float _3327 = (0.5 / (((_3316 * ((_3299 * _3317) + _3284)) + 9.9999999392252902907785028219223e-09) + (((_3316 * _3317) + _3284) * _3299))) * _3316;
                                float _4358 = isnan(0.0) ? _3327 : (isnan(_3327) ? 0.0 : max(_3327, 0.0));
                                float _3337 = (_3262 * _3239) * (((_3285 * 3.1415927410125732421875) * (isnan(1.0) ? _4358 : (isnan(_4358) ? 1.0 : min(_4358, 1.0)))) / ((_3307 * _3307) * ((_3252 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_75_pred = _3263 * _3107.z;
                                frontier_phi_75_pred_1 = _3263 * _3107.y;
                                frontier_phi_75_pred_2 = _3263 * _3107.x;
                                frontier_phi_75_pred_3 = _3337 * _3119.z;
                                frontier_phi_75_pred_4 = _3337 * _3119.y;
                                frontier_phi_75_pred_5 = _3337 * _3119.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _3346 = frontier_phi_75_pred;
                            _3345 = frontier_phi_75_pred_1;
                            _3344 = frontier_phi_75_pred_2;
                            _3343 = frontier_phi_75_pred_3;
                            _3342 = frontier_phi_75_pred_4;
                            _3341 = frontier_phi_75_pred_5;
                            _3049 = _3344 + _3062;
                            _3050 = _3345 + _3063;
                            _3051 = _3346 + _3064;
                            _3046 = _3341 + _3059;
                            _3047 = _3342 + _3060;
                            _3048 = _3343 + _3061;
                            if (_3066 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3059 = _3046;
                                _3060 = _3047;
                                _3061 = _3048;
                                _3062 = _3049;
                                _3063 = _3050;
                                _3064 = _3051;
                                _3065 = _3066;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _3051;
                        frontier_phi_69_pred_1 = _3050;
                        frontier_phi_69_pred_2 = _3049;
                        frontier_phi_69_pred_3 = _3048;
                        frontier_phi_69_pred_4 = _3047;
                        frontier_phi_69_pred_5 = _3046;
                    }
                    _2718 = frontier_phi_69_pred;
                    _2716 = frontier_phi_69_pred_1;
                    _2714 = frontier_phi_69_pred_2;
                    _2712 = frontier_phi_69_pred_3;
                    _2710 = frontier_phi_69_pred_4;
                    _2708 = frontier_phi_69_pred_5;
                    uint _2853 = _2852 + 1u;
                    if (_2853 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2846 = _2708;
                        _2847 = _2710;
                        _2848 = _2712;
                        _2849 = _2714;
                        _2850 = _2716;
                        _2851 = _2718;
                        _2852 = _2853;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2718;
                frontier_phi_57_58_ladder_1 = _2716;
                frontier_phi_57_58_ladder_2 = _2714;
                frontier_phi_57_58_ladder_3 = _2712;
                frontier_phi_57_58_ladder_4 = _2710;
                frontier_phi_57_58_ladder_5 = _2708;
            }
            else
            {
                frontier_phi_57_58_ladder = _2596;
                frontier_phi_57_58_ladder_1 = _2594;
                frontier_phi_57_58_ladder_2 = _2592;
                frontier_phi_57_58_ladder_3 = _2590;
                frontier_phi_57_58_ladder_4 = _2588;
                frontier_phi_57_58_ladder_5 = _2586;
            }
            _2707 = frontier_phi_57_58_ladder_5;
            _2709 = frontier_phi_57_58_ladder_4;
            _2711 = frontier_phi_57_58_ladder_3;
            _2713 = frontier_phi_57_58_ladder_2;
            _2715 = frontier_phi_57_58_ladder_1;
            _2717 = frontier_phi_57_58_ladder;
        }
        float _2722 = isnan(1.0) ? _724 : (isnan(_724) ? 1.0 : min(_724, 1.0));
        _2455 = (_2722 * _2713) + _1892;
        _2457 = (_2722 * _2715) + _1894;
        _2459 = (_2722 * _2717) + _1896;
        _2461 = ((_2707 * _710) * _2722) + _2237;
        _2463 = ((_2709 * _711) * _2722) + _2239;
        _2465 = ((_2711 * _712) * _2722) + _2241;
    }
    else
    {
        _2455 = _1892;
        _2457 = _1894;
        _2459 = _1896;
        _2461 = _2237;
        _2463 = _2239;
        _2465 = _2241;
    }
    uint _2471 = _617 + uint(cbMatDynParam._m0[0u].w);
    float _2481 = ((((cbMtdParam._m0[12u].x * cbMtdParam._m0[16u].z) * cbMtdParam._m0[15u].w) * _370) * _383.x) * cbInstanceData._m0[_2471].x;
    float _2486 = ((((cbMtdParam._m0[12u].y * cbMtdParam._m0[16u].z) * cbMtdParam._m0[15u].w) * _370) * _383.y) * cbInstanceData._m0[_2471].y;
    float _2491 = ((((cbMtdParam._m0[12u].z * cbMtdParam._m0[16u].z) * cbMtdParam._m0[15u].w) * _370) * _383.z) * cbInstanceData._m0[_2471].z;
    float _4374 = isnan(0.0) ? _701 : (isnan(_701) ? 0.0 : max(_701, 0.0));
    float _4385 = isnan(0.0) ? _702 : (isnan(_702) ? 0.0 : max(_702, 0.0));
    float _4396 = isnan(0.0) ? _703 : (isnan(_703) ? 0.0 : max(_703, 0.0));
    float _4407 = isnan(0.0) ? _423 : (isnan(_423) ? 0.0 : max(_423, 0.0));
    float _2509 = (((isnan(1.0) ? _4374 : (isnan(_4374) ? 1.0 : min(_4374, 1.0))) * (_2455 + ((isnan(0.0) ? _1454 : (isnan(_1454) ? 0.0 : max(_1454, 0.0))) * _724))) + ((_2461 + ((isnan(0.0) ? _1745 : (isnan(_1745) ? 0.0 : max(_1745, 0.0))) * _1530)) * cbPerFrame._m0[3u].x)) + _2481;
    float _2511 = (_2486 + ((_2463 + ((isnan(0.0) ? _1748 : (isnan(_1748) ? 0.0 : max(_1748, 0.0))) * _1530)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4385 : (isnan(_4385) ? 1.0 : min(_4385, 1.0))) * (_2457 + ((isnan(0.0) ? _1457 : (isnan(_1457) ? 0.0 : max(_1457, 0.0))) * _724)));
    float _2513 = (_2491 + ((_2465 + ((isnan(0.0) ? _1751 : (isnan(_1751) ? 0.0 : max(_1751, 0.0))) * _1530)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4396 : (isnan(_4396) ? 1.0 : min(_4396, 1.0))) * (_2459 + ((isnan(0.0) ? _1460 : (isnan(_1460) ? 0.0 : max(_1460, 0.0))) * _724)));
    float _4433 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2526 = isnan(1.0) ? _4433 : (isnan(_4433) ? 1.0 : min(_4433, 1.0));
    float _2531 = cbInstanceData._m0[_615 + 6u].w * (isnan(1.0) ? _4407 : (isnan(_4407) ? 1.0 : min(_4407, 1.0)));
    float _2536 = _511 / cbSceneParam._m0[86u].x;
    float _2537 = _512 / cbSceneParam._m0[86u].y;
    vec4 _2551 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2536, _2537, (log2((isnan(cbSceneParam._m0[77u].w) ? _444 : (isnan(_444) ? cbSceneParam._m0[77u].w : min(_444, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2553 = _2551.x;
    float _2554 = _2551.y;
    float _2555 = _2551.z;
    float _2556 = _2551.w;
    float _2648;
    float _2650;
    float _2652;
    float _2654;
    if (_444 > cbSceneParam._m0[78u].w)
    {
        float _2611 = isnan(_444) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _444 : min(cbSceneParam._m0[80u].w, _444));
        float _2612 = _2611 / _444;
        float _2623 = _2612 * _496;
        float _2624 = _497 * _2612;
        float _2625 = (-0.0) - _2624;
        float _2626 = _2612 * _498;
        float _2628 = (cbSceneParam._m0[77u].w * _2625) / _2611;
        float _2629 = _2628 + cbSceneParam._m0[79u].w;
        float _2630 = cbSceneParam._m0[79u].w - _2624;
        float _2636 = sqrt(((_2623 * _2623) + (_2624 * _2624)) + (_2626 * _2626));
        float _2639 = (1.0 - (cbSceneParam._m0[77u].w / _2611)) * _2636;
        float _2644 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2646 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2808;
        if (abs((_2625 - _2628) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2808 = ((((_2629 > 0.0) ? exp2(_2644 * _2629) : (2.0 - exp2(_2646 * _2629))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2639;
        }
        else
        {
            float _2768 = 1.0 / cbSceneParam._m0[80u].x;
            float _2769 = isnan(_2630) ? _2629 : (isnan(_2629) ? _2630 : max(_2629, _2630));
            float _2770 = isnan(_2630) ? _2629 : (isnan(_2629) ? _2630 : min(_2629, _2630));
            float _2779 = isnan(0.0) ? _2769 : (isnan(_2769) ? 0.0 : min(_2769, 0.0));
            float _2780 = isnan(0.0) ? _2770 : (isnan(_2770) ? 0.0 : min(_2770, 0.0));
            _2808 = ((abs(_2636 / _2625) * cbSceneParam._m0[80u].y) * ((((_2779 - _2780) * 2.0) - ((exp2(_2644 * (isnan(0.0) ? _2769 : (isnan(_2769) ? 0.0 : max(_2769, 0.0)))) - exp2(_2644 * (isnan(0.0) ? _2770 : (isnan(_2770) ? 0.0 : max(_2770, 0.0))))) * _2768)) - ((exp2(_2646 * _2779) - exp2(_2646 * _2780)) * _2768))) + (_2639 * cbSceneParam._m0[80u].z);
        }
        vec4 _2810 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2536, _2537, 1.0), 0.0);
        float _2819 = exp2((_2808 * (-1.44269502162933349609375)) * (1.0 - _2810.w));
        float _2820 = log2(_2819);
        float _2836 = log2(_2556);
        _2648 = (exp2(_2836 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2820 * cbSceneParam._m0[78u].x)) * _2810.x) / cbSceneParam._m0[78u].x)) + _2553;
        _2650 = (exp2(_2836 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2820 * cbSceneParam._m0[78u].y)) * _2810.y) / cbSceneParam._m0[78u].y)) + _2554;
        _2652 = (exp2(_2836 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2820 * cbSceneParam._m0[78u].z)) * _2810.z) / cbSceneParam._m0[78u].z)) + _2555;
        _2654 = _2819 * _2556;
    }
    else
    {
        _2648 = _2553;
        _2650 = _2554;
        _2652 = _2555;
        _2654 = _2556;
    }
    float _2666 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2667 = _2666 == 3.0;
    float _2668 = log2(_2654);
    float _2672 = exp2(_2668 * cbSceneParam._m0[78u].x);
    float _2673 = exp2(_2668 * cbSceneParam._m0[78u].y);
    float _2674 = exp2(_2668 * cbSceneParam._m0[78u].z);
    float _2675 = _2672 * (isnan(0.0) ? _2509 : (isnan(_2509) ? 0.0 : max(_2509, 0.0)));
    float _2676 = _2673 * (isnan(0.0) ? _2511 : (isnan(_2511) ? 0.0 : max(_2511, 0.0)));
    float _2677 = _2674 * (isnan(0.0) ? _2513 : (isnan(_2513) ? 0.0 : max(_2513, 0.0)));
    float _2686 = (_2666 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2686 * (_2667 ? _2675 : (_2675 + (cbSceneParam._m0[72u].w * _2648)));
    SV_Target.y = _2686 * (_2667 ? _2676 : (_2676 + (cbSceneParam._m0[72u].w * _2650)));
    SV_Target.z = _2686 * (_2667 ? _2677 : (_2677 + (cbSceneParam._m0[72u].w * _2652)));
    SV_Target.w = _2531;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2481) * _2526) * _2672) * _2686;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2486) * _2526) * _2673) * _2686;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2491) * _2526) * _2674) * _2686;
    SV_Target_1.w = _2531;
}


