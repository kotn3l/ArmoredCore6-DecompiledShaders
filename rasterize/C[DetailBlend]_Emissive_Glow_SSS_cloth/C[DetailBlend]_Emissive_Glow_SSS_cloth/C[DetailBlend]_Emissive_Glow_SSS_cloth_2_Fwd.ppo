#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[18];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_1;
layout(set = 0, binding = 1) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_7;
layout(set = 0, binding = 10) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_6;
layout(set = 0, binding = 2) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_0;
layout(set = 0, binding = 4) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_11;
layout(set = 0, binding = 6) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_2;
layout(set = 0, binding = 7) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_3;
layout(set = 0, binding = 9) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_5;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1176;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _203 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _204 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _205 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _211 = inversesqrt(dot(vec3(_203, _204, _205), vec3(_203, _204, _205)));
    float _218 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _219 = _218 * NORMAL.x;
    float _220 = _218 * NORMAL.y;
    float _221 = _218 * NORMAL.z;
    float _225 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _233;
    float _234;
    float _235;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _233 = (-0.0) - _219;
        _234 = (-0.0) - _220;
        _235 = (-0.0) - _221;
    }
    else
    {
        _233 = _219;
        _234 = _220;
        _235 = _221;
    }
    vec4 _248 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _253 = _248.z;
    float _259 = exp2(log2(_253 * 22.0) * 260.0);
    float _260 = isnan(0.0) ? _259 : (isnan(_259) ? 0.0 : max(_259, 0.0));
    float _261 = isnan(1.0) ? _260 : (isnan(_260) ? 1.0 : min(_260, 1.0));
    vec4 _275 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _286 = cbMtdParam._m0[10u].x * _275.x;
    float _287 = cbMtdParam._m0[10u].y * _275.y;
    float _288 = cbMtdParam._m0[10u].z * _275.z;
    vec4 _300 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _323 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _345 = (((((_300.x * 4.55000019073486328125) * cbMtdParam._m0[9u].x) * _323.x) - _286) * _261) + _286;
    float _346 = (((((_300.y * 4.55000019073486328125) * cbMtdParam._m0[9u].y) * _323.y) - _287) * _261) + _287;
    float _347 = (((((_300.z * 4.55000019073486328125) * cbMtdParam._m0[9u].z) * _323.z) - _288) * _261) + _288;
    float _348 = _323.w * _300.w;
    float _374 = (((texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w)).x - cbMtdParam._m0[17u].x) + cbMtdParam._m0[16u].x) * _261) + cbMtdParam._m0[17u].x;
    vec4 _386 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w));
    float _388 = _386.x;
    float _389 = _386.y;
    float _395 = cbMtdParam._m0[14u].y + _386.z;
    vec4 _407 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w));
    float _419 = ((((_253 * 2.0) * (cbMtdParam._m0[14u].x + _407.z)) - _395) * _261) + _395;
    float _437 = abs((fract(cbMtdParam._m0[15u].x * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _3565 = isnan(0.0) ? _437 : (isnan(_437) ? 0.0 : max(_437, 0.0));
    float _438 = isnan(1.0) ? _3565 : (isnan(_3565) ? 1.0 : min(_3565, 1.0));
    float _443 = (_438 * _438) * (3.0 - (_438 * 2.0));
    vec4 _456 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _464 = (_248.x * 2.0) + (-1.0);
    float _465 = (_248.y * 2.0) + (-1.0);
    float _466 = dot(vec2(_464, _465), vec2(_464, _465));
    float _3576 = isnan(0.0) ? _466 : (isnan(_466) ? 0.0 : max(_466, 0.0));
    float _471 = sqrt(1.0 - (isnan(1.0) ? _3576 : (isnan(_3576) ? 1.0 : min(_3576, 1.0))));
    float _484 = (cbMtdParam._m0[14u].z * (((((_407.x - _388) * _261) + _388) * 2.0) + (-1.0))) + _464;
    float _485 = (cbMtdParam._m0[14u].z * (((((_407.y - _389) * _261) + _389) * 2.0) + (-1.0))) + _465;
    float _488 = fma(_471, _233, fma(_485, _225 * TANGENT.x, (_211 * _203) * _484));
    float _491 = fma(_471, _234, fma(_485, _225 * TANGENT.y, (_211 * _204) * _484));
    float _494 = fma(_471, _235, fma(_485, _225 * TANGENT.z, (_211 * _205) * _484));
    float _498 = inversesqrt(dot(vec3(_488, _491, _494), vec3(_488, _491, _494)));
    float _499 = _498 * _488;
    float _500 = _498 * _491;
    float _501 = _498 * _494;
    float _3587 = isnan(0.0) ? _348 : (isnan(_348) ? 0.0 : max(_348, 0.0));
    float _502 = isnan(1.0) ? _3587 : (isnan(_3587) ? 1.0 : min(_3587, 1.0));
    float _3598 = isnan(0.0) ? _419 : (isnan(_419) ? 0.0 : max(_419, 0.0));
    float _503 = isnan(1.0) ? _3598 : (isnan(_3598) ? 1.0 : min(_3598, 1.0));
    float _3609 = isnan(0.0) ? _345 : (isnan(_345) ? 0.0 : max(_345, 0.0));
    float _504 = isnan(1.0) ? _3609 : (isnan(_3609) ? 1.0 : min(_3609, 1.0));
    float _3620 = isnan(0.0) ? _346 : (isnan(_346) ? 0.0 : max(_346, 0.0));
    float _505 = isnan(1.0) ? _3620 : (isnan(_3620) ? 1.0 : min(_3620, 1.0));
    float _3631 = isnan(0.0) ? _347 : (isnan(_347) ? 0.0 : max(_347, 0.0));
    float _506 = isnan(1.0) ? _3631 : (isnan(_3631) ? 1.0 : min(_3631, 1.0));
    float _3642 = isnan(0.0) ? _374 : (isnan(_374) ? 0.0 : max(_374, 0.0));
    float _507 = isnan(1.0) ? _3642 : (isnan(_3642) ? 1.0 : min(_3642, 1.0));
    float _523 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _565 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _575 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _565);
    float _576 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _565);
    float _577 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _565);
    float _581 = inversesqrt(dot(vec3(_575, _576, _577), vec3(_575, _576, _577)));
    float _582 = _575 * _581;
    float _583 = _576 * _581;
    float _584 = _577 * _581;
    float _590 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _591 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _593 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _595 = _593.w;
    float _614 = fma(_501, cbSceneParam._m0[5u].z, fma(_500, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _499));
    float _617 = fma(_501, cbSceneParam._m0[6u].z, fma(_500, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _499));
    float _620 = fma(_501, cbSceneParam._m0[7u].z, fma(_500, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _499));
    vec4 _622 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _624 = _622.x;
    float _636 = (((_622.y - _503) + (_622.w * _503)) * cbMtdParam._m0[3u].x) + _503;
    vec4 _637 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _653 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3(cbMtdParam._m0[3u].x * (_624 * _624)), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * _637.z;
    float _661 = (((cbMatDynParam._m0[15u].x - _507) * cbMatDynParam._m0[15u].w) * _653) + _507;
    float _669 = ((_653 * cbMatDynParam._m0[16u].z) * (cbMatDynParam._m0[16u].x - _636)) + _636;
    uint _693 = uint(roundEven(NORMAL.w)) * 13u;
    uint _695 = _693 + 9u;
    uint _696 = _695 + uint(cbMatDynParam._m0[0u].w);
    float _702 = (cbMtdParam._m0[0u].x * _504) * cbInstanceData._m0[_696].x;
    float _703 = (cbMtdParam._m0[0u].y * _505) * cbInstanceData._m0[_696].y;
    float _704 = (cbMtdParam._m0[0u].z * _506) * cbInstanceData._m0[_696].z;
    float _3653 = isnan(0.0) ? _702 : (isnan(_702) ? 0.0 : max(_702, 0.0));
    float _705 = isnan(1.0) ? _3653 : (isnan(_3653) ? 1.0 : min(_3653, 1.0));
    float _3664 = isnan(0.0) ? _703 : (isnan(_703) ? 0.0 : max(_703, 0.0));
    float _706 = isnan(1.0) ? _3664 : (isnan(_3664) ? 1.0 : min(_3664, 1.0));
    float _3675 = isnan(0.0) ? _704 : (isnan(_704) ? 0.0 : max(_704, 0.0));
    float _707 = isnan(1.0) ? _3675 : (isnan(_3675) ? 1.0 : min(_3675, 1.0));
    vec4 _708 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _713 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _724 = (((_713.x - _661) + (_713.w * _661)) * cbMtdParam._m0[3u].x) + _661;
    float _737 = (cbMtdParam._m0[3u].x * (((_705 * _595) - _705) + _708.x)) + _705;
    float _738 = (cbMtdParam._m0[3u].x * (((_706 * _595) - _706) + _708.y)) + _706;
    float _739 = (cbMtdParam._m0[3u].x * (((_707 * _595) - _707) + _708.z)) + _707;
    vec4 _740 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _753 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3((_661 * (_504 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625, (_661 * (_505 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625, (_661 * (_506 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * _740.z;
    float _757 = _753 * cbMatDynParam._m0[13u].w;
    float _767 = (_757 * (cbMatDynParam._m0[13u].x - _737)) + _737;
    float _768 = (_757 * (cbMatDynParam._m0[13u].y - _738)) + _738;
    float _769 = (_757 * (cbMatDynParam._m0[13u].z - _739)) + _739;
    float _777 = ((_753 * cbMatDynParam._m0[15u].w) * (cbMatDynParam._m0[15u].x - _724)) + _724;
    float _778 = 1.0 - _777;
    float _779 = _778 * _767;
    float _780 = _778 * _768;
    float _781 = _778 * _769;
    float _785 = (_767 + (-0.039999999105930328369140625)) * _777;
    float _786 = (_768 + (-0.039999999105930328369140625)) * _777;
    float _787 = (_769 + (-0.039999999105930328369140625)) * _777;
    float _788 = _785 + 0.039999999105930328369140625;
    float _789 = _786 + 0.039999999105930328369140625;
    float _790 = _787 + 0.039999999105930328369140625;
    vec4 _799 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _590, cbSceneParam._m0[86u].y * _591));
    float _802 = _799.x * TEXCOORD_4;
    float _803 = dot(vec3(_499, _500, _501), vec3(_582, _583, _584));
    float _806 = _803 * 2.0;
    float _810 = (_806 * _499) - _582;
    float _811 = (_806 * _500) - _583;
    float _812 = (_806 * _501) - _584;
    float _816 = abs(dot(vec3(_582, _583, _584), vec3(_499, _500, _501)));
    float _3686 = isnan(0.0) ? _816 : (isnan(_816) ? 0.0 : max(_816, 0.0));
    float _818 = sqrt(_669);
    float _830 = exp2((_818 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3686 : (isnan(_3686) ? 1.0 : min(_3686, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_818 * 3.0));
    float _836 = (1.0 - _830) * ((_818 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _837 = _830 * _818;
    float _865 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _869 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _873 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1175;
    float _1177;
    float _1178;
    float _1179;
    float _1180;
    float _1181;
    float _1182;
    float _1183;
    float _1184;
    float _1185;
    float _1186;
    float _1187;
    float _1188;
    float _1189;
    float _1190;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _900 = fma(_873, cbModelParam._m0[26u].z, fma(_869, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _865));
        float _904 = fma(_873, cbModelParam._m0[27u].z, fma(_869, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _865));
        float _908 = fma(_873, cbModelParam._m0[28u].z, fma(_869, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _865));
        float _933 = _865 + _499;
        float _934 = _869 + _500;
        float _935 = _873 + _501;
        float _945 = fma(_935, cbModelParam._m0[26u].z, fma(_934, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _933)) - _900;
        float _946 = fma(_935, cbModelParam._m0[27u].z, fma(_934, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _933)) - _904;
        float _947 = fma(_935, cbModelParam._m0[28u].z, fma(_934, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _933)) - _908;
        float _951 = inversesqrt(dot(vec3(_945, _946, _947), vec3(_945, _946, _947)));
        float _964 = ((_951 * _945) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_900 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _965 = ((_951 * _946) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_904 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _966 = ((_951 * _947) / cbModelParam._m0[34u].z) + ((((((_908 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _969 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_964, _965, _966), 0.0);
        vec4 _976 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_964, _965, _966), 0.0);
        vec4 _983 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_964, _965, _966), 0.0);
        vec4 _990 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_964, _965, _966), 0.0);
        float _1003 = exp2((_969.w + (-0.5)) * 20.0) * 2.0;
        float _1004 = _1003 * (_969.x + (-0.5));
        float _1005 = _1003 * (_969.y + (-0.5));
        float _1006 = _1003 * (_969.z + (-0.5));
        float _1013 = exp2((_976.w + (-0.5)) * 20.0) * 2.0;
        float _1014 = _1013 * (_976.x + (-0.5));
        float _1015 = _1013 * (_976.y + (-0.5));
        float _1016 = _1013 * (_976.z + (-0.5));
        float _1023 = exp2((_983.w + (-0.5)) * 20.0) * 2.0;
        float _1024 = _1023 * (_983.x + (-0.5));
        float _1025 = _1023 * (_983.y + (-0.5));
        float _1026 = _1023 * (_983.z + (-0.5));
        float _1033 = exp2((_990.w + (-0.5)) * 20.0) * 2.0;
        float _1034 = _1033 * (_990.x + (-0.5));
        float _1035 = _1033 * (_990.y + (-0.5));
        float _1036 = _1033 * (_990.z + (-0.5));
        float _1037 = isnan(0.0) ? _1034 : (isnan(_1034) ? 0.0 : max(_1034, 0.0));
        float _1038 = isnan(0.0) ? _1035 : (isnan(_1035) ? 0.0 : max(_1035, 0.0));
        float _1039 = isnan(0.0) ? _1036 : (isnan(_1036) ? 0.0 : max(_1036, 0.0));
        float _1040 = _1004 * 0.5;
        float _1041 = _1014 * 0.5;
        float _1042 = _1024 * 0.5;
        float _1043 = dot(vec3(_1040, _1041, _1042), vec3(_1040, _1041, _1042));
        float _1048 = (_1043 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1043);
        float _1057 = (dot(vec3(_499, _500, _501), vec3(_1048 * _1040, _1048 * _1041, _1048 * _1042)) + 1.0) * 0.5;
        float _3712 = isnan(0.0) ? _1057 : (isnan(_1057) ? 0.0 : max(_1057, 0.0));
        float _1067 = sqrt(((_1041 * _1041) + (_1040 * _1040)) + (_1042 * _1042)) / (_1037 + 9.9999997473787516355514526367188e-06);
        float _3723 = isnan(0.0) ? _1067 : (isnan(_1067) ? 0.0 : max(_1067, 0.0));
        float _1068 = isnan(1.0) ? _3723 : (isnan(_3723) ? 1.0 : min(_3723, 1.0));
        float _1069 = _1068 * 2.0;
        float _1073 = (1.0 - _1068) / (_1068 + 1.0);
        float _3734 = isnan(0.0) ? _1073 : (isnan(_1073) ? 0.0 : max(_1073, 0.0));
        float _1074 = isnan(1.0) ? _3734 : (isnan(_3734) ? 1.0 : min(_3734, 1.0));
        float _1083 = ((((1.0 - _1074) * (_1069 + 2.0)) * exp2(log2(isnan(1.0) ? _3712 : (isnan(_3712) ? 1.0 : min(_3712, 1.0))) * (_1069 + 1.0))) + _1074) * _1037;
        float _1084 = _1005 * 0.5;
        float _1085 = _1015 * 0.5;
        float _1086 = _1025 * 0.5;
        float _1087 = dot(vec3(_1084, _1085, _1086), vec3(_1084, _1085, _1086));
        float _1092 = (_1087 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1087);
        float _1100 = (dot(vec3(_499, _500, _501), vec3(_1092 * _1084, _1092 * _1085, _1092 * _1086)) + 1.0) * 0.5;
        float _3745 = isnan(0.0) ? _1100 : (isnan(_1100) ? 0.0 : max(_1100, 0.0));
        float _1109 = sqrt(((_1085 * _1085) + (_1084 * _1084)) + (_1086 * _1086)) / (_1038 + 9.9999997473787516355514526367188e-06);
        float _3756 = isnan(0.0) ? _1109 : (isnan(_1109) ? 0.0 : max(_1109, 0.0));
        float _1110 = isnan(1.0) ? _3756 : (isnan(_3756) ? 1.0 : min(_3756, 1.0));
        float _1111 = _1110 * 2.0;
        float _1115 = (1.0 - _1110) / (_1110 + 1.0);
        float _3767 = isnan(0.0) ? _1115 : (isnan(_1115) ? 0.0 : max(_1115, 0.0));
        float _1116 = isnan(1.0) ? _3767 : (isnan(_3767) ? 1.0 : min(_3767, 1.0));
        float _1125 = ((((1.0 - _1116) * (_1111 + 2.0)) * exp2(log2(isnan(1.0) ? _3745 : (isnan(_3745) ? 1.0 : min(_3745, 1.0))) * (_1111 + 1.0))) + _1116) * _1038;
        float _1126 = _1006 * 0.5;
        float _1127 = _1016 * 0.5;
        float _1128 = _1026 * 0.5;
        float _1129 = dot(vec3(_1126, _1127, _1128), vec3(_1126, _1127, _1128));
        float _1134 = (_1129 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1129);
        float _1142 = (dot(vec3(_499, _500, _501), vec3(_1134 * _1126, _1134 * _1127, _1134 * _1128)) + 1.0) * 0.5;
        float _3778 = isnan(0.0) ? _1142 : (isnan(_1142) ? 0.0 : max(_1142, 0.0));
        float _1151 = sqrt(((_1127 * _1127) + (_1126 * _1126)) + (_1128 * _1128)) / (_1039 + 9.9999997473787516355514526367188e-06);
        float _3789 = isnan(0.0) ? _1151 : (isnan(_1151) ? 0.0 : max(_1151, 0.0));
        float _1152 = isnan(1.0) ? _3789 : (isnan(_3789) ? 1.0 : min(_3789, 1.0));
        float _1153 = _1152 * 2.0;
        float _1157 = (1.0 - _1152) / (_1152 + 1.0);
        float _3800 = isnan(0.0) ? _1157 : (isnan(_1157) ? 0.0 : max(_1157, 0.0));
        float _1158 = isnan(1.0) ? _3800 : (isnan(_3800) ? 1.0 : min(_3800, 1.0));
        float _1167 = ((((1.0 - _1158) * (_1153 + 2.0)) * exp2(log2(isnan(1.0) ? _3778 : (isnan(_3778) ? 1.0 : min(_3778, 1.0))) * (_1153 + 1.0))) + _1158) * _1039;
        _1175 = _1006;
        _1177 = _1005;
        _1178 = _1004;
        _1179 = _1016;
        _1180 = _1015;
        _1181 = _1014;
        _1182 = _1026;
        _1183 = _1025;
        _1184 = _1024;
        _1185 = _1039;
        _1186 = _1038;
        _1187 = _1037;
        _1188 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1083 : (isnan(_1083) ? 0.0 : max(_1083, 0.0)));
        _1189 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1125 : (isnan(_1125) ? 0.0 : max(_1125, 0.0)));
        _1190 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1167 : (isnan(_1167) ? 0.0 : max(_1167, 0.0)));
    }
    else
    {
        _1175 = _1176;
        _1177 = _1176;
        _1178 = _1176;
        _1179 = _1176;
        _1180 = _1176;
        _1181 = _1176;
        _1182 = _1176;
        _1183 = _1176;
        _1184 = _1176;
        _1185 = _1176;
        _1186 = _1176;
        _1187 = _1176;
        _1188 = 0.0;
        _1189 = 0.0;
        _1190 = 0.0;
    }
    float _1485;
    float _1486;
    float _1487;
    float _1488;
    float _1489;
    float _1490;
    float _1491;
    float _1492;
    float _1493;
    float _1494;
    float _1495;
    float _1496;
    float _1497;
    float _1498;
    float _1499;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1216 = fma(_873, cbModelParam._m0[30u].z, fma(_869, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _865));
        float _1220 = fma(_873, cbModelParam._m0[31u].z, fma(_869, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _865));
        float _1224 = fma(_873, cbModelParam._m0[32u].z, fma(_869, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _865));
        float _1247 = _865 + _499;
        float _1248 = _869 + _500;
        float _1249 = _873 + _501;
        float _1259 = fma(_1249, cbModelParam._m0[30u].z, fma(_1248, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1247)) - _1216;
        float _1260 = fma(_1249, cbModelParam._m0[31u].z, fma(_1248, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1247)) - _1220;
        float _1261 = fma(_1249, cbModelParam._m0[32u].z, fma(_1248, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1247)) - _1224;
        float _1265 = inversesqrt(dot(vec3(_1259, _1260, _1261), vec3(_1259, _1260, _1261)));
        float _1278 = ((_1265 * _1259) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1216 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1279 = ((_1265 * _1260) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1220 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1280 = ((_1265 * _1261) / cbModelParam._m0[35u].z) + ((((((_1224 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1282 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1278, _1279, _1280), 0.0);
        vec4 _1289 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1278, _1279, _1280), 0.0);
        vec4 _1296 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1278, _1279, _1280), 0.0);
        vec4 _1303 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1278, _1279, _1280), 0.0);
        float _1315 = exp2((_1282.w + (-0.5)) * 20.0) * 2.0;
        float _1316 = _1315 * (_1282.x + (-0.5));
        float _1317 = _1315 * (_1282.y + (-0.5));
        float _1318 = _1315 * (_1282.z + (-0.5));
        float _1325 = exp2((_1289.w + (-0.5)) * 20.0) * 2.0;
        float _1326 = _1325 * (_1289.x + (-0.5));
        float _1327 = _1325 * (_1289.y + (-0.5));
        float _1328 = _1325 * (_1289.z + (-0.5));
        float _1335 = exp2((_1296.w + (-0.5)) * 20.0) * 2.0;
        float _1336 = _1335 * (_1296.x + (-0.5));
        float _1337 = _1335 * (_1296.y + (-0.5));
        float _1338 = _1335 * (_1296.z + (-0.5));
        float _1345 = exp2((_1303.w + (-0.5)) * 20.0) * 2.0;
        float _1346 = _1345 * (_1303.x + (-0.5));
        float _1347 = _1345 * (_1303.y + (-0.5));
        float _1348 = _1345 * (_1303.z + (-0.5));
        float _1349 = isnan(0.0) ? _1346 : (isnan(_1346) ? 0.0 : max(_1346, 0.0));
        float _1350 = isnan(0.0) ? _1347 : (isnan(_1347) ? 0.0 : max(_1347, 0.0));
        float _1351 = isnan(0.0) ? _1348 : (isnan(_1348) ? 0.0 : max(_1348, 0.0));
        float _1352 = _1316 * 0.5;
        float _1353 = _1326 * 0.5;
        float _1354 = _1336 * 0.5;
        float _1355 = dot(vec3(_1352, _1353, _1354), vec3(_1352, _1353, _1354));
        float _1360 = (_1355 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1355);
        float _1368 = (dot(vec3(_499, _500, _501), vec3(_1360 * _1352, _1360 * _1353, _1360 * _1354)) + 1.0) * 0.5;
        float _3841 = isnan(0.0) ? _1368 : (isnan(_1368) ? 0.0 : max(_1368, 0.0));
        float _1377 = sqrt(((_1353 * _1353) + (_1352 * _1352)) + (_1354 * _1354)) / (_1349 + 9.9999997473787516355514526367188e-06);
        float _3852 = isnan(0.0) ? _1377 : (isnan(_1377) ? 0.0 : max(_1377, 0.0));
        float _1378 = isnan(1.0) ? _3852 : (isnan(_3852) ? 1.0 : min(_3852, 1.0));
        float _1379 = _1378 * 2.0;
        float _1383 = (1.0 - _1378) / (_1378 + 1.0);
        float _3863 = isnan(0.0) ? _1383 : (isnan(_1383) ? 0.0 : max(_1383, 0.0));
        float _1384 = isnan(1.0) ? _3863 : (isnan(_3863) ? 1.0 : min(_3863, 1.0));
        float _1393 = ((((1.0 - _1384) * (_1379 + 2.0)) * exp2(log2(isnan(1.0) ? _3841 : (isnan(_3841) ? 1.0 : min(_3841, 1.0))) * (_1379 + 1.0))) + _1384) * _1349;
        float _1394 = _1317 * 0.5;
        float _1395 = _1327 * 0.5;
        float _1396 = _1337 * 0.5;
        float _1397 = dot(vec3(_1394, _1395, _1396), vec3(_1394, _1395, _1396));
        float _1402 = (_1397 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1397);
        float _1410 = (dot(vec3(_499, _500, _501), vec3(_1402 * _1394, _1402 * _1395, _1402 * _1396)) + 1.0) * 0.5;
        float _3874 = isnan(0.0) ? _1410 : (isnan(_1410) ? 0.0 : max(_1410, 0.0));
        float _1419 = sqrt(((_1395 * _1395) + (_1394 * _1394)) + (_1396 * _1396)) / (_1350 + 9.9999997473787516355514526367188e-06);
        float _3885 = isnan(0.0) ? _1419 : (isnan(_1419) ? 0.0 : max(_1419, 0.0));
        float _1420 = isnan(1.0) ? _3885 : (isnan(_3885) ? 1.0 : min(_3885, 1.0));
        float _1421 = _1420 * 2.0;
        float _1425 = (1.0 - _1420) / (_1420 + 1.0);
        float _3896 = isnan(0.0) ? _1425 : (isnan(_1425) ? 0.0 : max(_1425, 0.0));
        float _1426 = isnan(1.0) ? _3896 : (isnan(_3896) ? 1.0 : min(_3896, 1.0));
        float _1435 = ((((1.0 - _1426) * (_1421 + 2.0)) * exp2(log2(isnan(1.0) ? _3874 : (isnan(_3874) ? 1.0 : min(_3874, 1.0))) * (_1421 + 1.0))) + _1426) * _1350;
        float _1436 = _1318 * 0.5;
        float _1437 = _1328 * 0.5;
        float _1438 = _1338 * 0.5;
        float _1439 = dot(vec3(_1436, _1437, _1438), vec3(_1436, _1437, _1438));
        float _1444 = (_1439 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1439);
        float _1452 = (dot(vec3(_499, _500, _501), vec3(_1444 * _1436, _1444 * _1437, _1444 * _1438)) + 1.0) * 0.5;
        float _3907 = isnan(0.0) ? _1452 : (isnan(_1452) ? 0.0 : max(_1452, 0.0));
        float _1461 = sqrt(((_1437 * _1437) + (_1436 * _1436)) + (_1438 * _1438)) / (_1351 + 9.9999997473787516355514526367188e-06);
        float _3918 = isnan(0.0) ? _1461 : (isnan(_1461) ? 0.0 : max(_1461, 0.0));
        float _1462 = isnan(1.0) ? _3918 : (isnan(_3918) ? 1.0 : min(_3918, 1.0));
        float _1463 = _1462 * 2.0;
        float _1467 = (1.0 - _1462) / (_1462 + 1.0);
        float _3929 = isnan(0.0) ? _1467 : (isnan(_1467) ? 0.0 : max(_1467, 0.0));
        float _1468 = isnan(1.0) ? _3929 : (isnan(_3929) ? 1.0 : min(_3929, 1.0));
        float _1477 = ((((1.0 - _1468) * (_1463 + 2.0)) * exp2(log2(isnan(1.0) ? _3907 : (isnan(_3907) ? 1.0 : min(_3907, 1.0))) * (_1463 + 1.0))) + _1468) * _1351;
        _1485 = _1318;
        _1486 = _1317;
        _1487 = _1316;
        _1488 = _1328;
        _1489 = _1327;
        _1490 = _1326;
        _1491 = _1338;
        _1492 = _1337;
        _1493 = _1336;
        _1494 = _1351;
        _1495 = _1350;
        _1496 = _1349;
        _1497 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1393 : (isnan(_1393) ? 0.0 : max(_1393, 0.0)));
        _1498 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1435 : (isnan(_1435) ? 0.0 : max(_1435, 0.0)));
        _1499 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1477 : (isnan(_1477) ? 0.0 : max(_1477, 0.0)));
    }
    else
    {
        _1485 = _1176;
        _1486 = _1176;
        _1487 = _1176;
        _1488 = _1176;
        _1489 = _1176;
        _1490 = _1176;
        _1491 = _1176;
        _1492 = _1176;
        _1493 = _1176;
        _1494 = _1176;
        _1495 = _1176;
        _1496 = _1176;
        _1497 = 0.0;
        _1498 = 0.0;
        _1499 = 0.0;
    }
    float _1509 = (cbModelParam._m0[1u].x * (_1497 - _1188)) + _1188;
    float _1510 = (cbModelParam._m0[1u].x * (_1498 - _1189)) + _1189;
    float _1511 = (cbModelParam._m0[1u].x * (_1499 - _1190)) + _1190;
    float _1532 = fma(_1511, cbSceneParam._m0[89u].z, fma(_1510, cbSceneParam._m0[89u].y, _1509 * cbSceneParam._m0[89u].x));
    float _1535 = fma(_1511, cbSceneParam._m0[90u].z, fma(_1510, cbSceneParam._m0[90u].y, _1509 * cbSceneParam._m0[90u].x));
    float _1538 = fma(_1511, cbSceneParam._m0[91u].z, fma(_1510, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1509));
    float _1553 = _810 * 0.5;
    float _1554 = _811 * 0.5;
    float _1555 = _812 * 0.5;
    float _1556 = dot(vec4(_1553, _1554, _1555, 1.0), vec4(_1487, _1490, _1493, _1496));
    float _1559 = dot(vec4(_1553, _1554, _1555, 1.0), vec4(_1486, _1489, _1492, _1495));
    float _1562 = dot(vec4(_1553, _1554, _1555, 1.0), vec4(_1485, _1488, _1491, _1494));
    float _1593;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1569 = dot(vec4(_1553, _1554, _1555, 1.0), vec4(_1175, _1179, _1182, _1185));
        float _1573 = dot(vec4(_1553, _1554, _1555, 1.0), vec4(_1177, _1180, _1183, _1186));
        float _1577 = dot(vec4(_1553, _1554, _1555, 1.0), vec4(_1178, _1181, _1184, _1187));
        float _1584 = dot(vec4(cbModelParam._m0[39u]), vec4(_1553, _1554, _1555, 1.0));
        _1593 = dot(vec3(isnan(0.0) ? _1577 : (isnan(_1577) ? 0.0 : max(_1577, 0.0)), isnan(0.0) ? _1573 : (isnan(_1573) ? 0.0 : max(_1573, 0.0)), isnan(0.0) ? _1569 : (isnan(_1569) ? 0.0 : max(_1569, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1584) ? 0.0 : (isnan(0.0) ? _1584 : max(0.0, _1584))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1593 = 1.0;
    }
    float _1604;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1595 = dot(vec4(cbModelParam._m0[40u]), vec4(_1553, _1554, _1555, 1.0));
        _1604 = dot(vec3(isnan(0.0) ? _1556 : (isnan(_1556) ? 0.0 : max(_1556, 0.0)), isnan(0.0) ? _1559 : (isnan(_1559) ? 0.0 : max(_1559, 0.0)), isnan(0.0) ? _1562 : (isnan(_1562) ? 0.0 : max(_1562, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1595) ? 0.0 : (isnan(0.0) ? _1595 : max(0.0, _1595))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1604 = 1.0;
    }
    float _1608 = (_1604 * cbModelParam._m0[1u].x) + (_1593 * (1.0 - cbModelParam._m0[1u].x));
    float _1618 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _669);
    float _1619 = isnan(_1618) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1618 : min(cbModelParam._m0[25u].z, _1618));
    float _1699;
    float _1701;
    float _1703;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1666 = fma(_873, cbModelParam._m0[13u].z, fma(_869, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _865)) + cbModelParam._m0[13u].w;
        float _1670 = fma(_873, cbModelParam._m0[14u].z, fma(_869, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _865)) + cbModelParam._m0[14u].w;
        float _1674 = fma(_873, cbModelParam._m0[15u].z, fma(_869, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _865)) + cbModelParam._m0[15u].w;
        float _1677 = fma(_812, cbModelParam._m0[13u].z, fma(_811, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _810));
        float _1680 = fma(_812, cbModelParam._m0[14u].z, fma(_811, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _810));
        float _1683 = fma(_812, cbModelParam._m0[15u].z, fma(_811, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _810));
        float _1711;
        if (_1677 > 0.0)
        {
            _1711 = abs((1.0 - _1666) / _1677);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1677 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1666 + 1.0) / _1677);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1711 = frontier_phi_16_14_ladder;
        }
        float _1915;
        if (_1680 > 0.0)
        {
            _1915 = abs((1.0 - _1670) / _1680);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1680 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1670 + 1.0) / _1680);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1915 = frontier_phi_25_21_ladder;
        }
        float _2169;
        if (_1683 > 0.0)
        {
            _2169 = abs((1.0 - _1674) / _1683);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1683 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1674 + 1.0) / _1683);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2169 = frontier_phi_37_32_ladder;
        }
        float _2171 = isnan(_1915) ? _1711 : (isnan(_1711) ? _1915 : min(_1711, _1915));
        float _2172 = isnan(_2169) ? _2171 : (isnan(_2171) ? _2169 : min(_2171, _2169));
        float _2176 = (_2172 * _1677) + _1666;
        float _2177 = (_2172 * _1680) + _1670;
        float _2178 = (_2172 * _1683) + _1674;
        float _2179 = _2172 * 9.9999997473787516355514526367188e-05;
        float _2181 = (-1.0) - _2179;
        float _2183 = _2179 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_2178 > _2183) || ((_2178 < _2181) || ((_2177 > _2183) || ((_2177 < _2181) || ((_2176 < _2181) || (_2176 > _2183))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2306 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2178, cbModelParam._m0[9u].z, fma(_2177, cbModelParam._m0[9u].y, _2176 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2178, cbModelParam._m0[10u].z, fma(_2177, cbModelParam._m0[10u].y, _2176 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2178, cbModelParam._m0[11u].z, fma(_2177, cbModelParam._m0[11u].y, _2176 * cbModelParam._m0[11u].x))), _1619);
            frontier_phi_15_37_ladder = _2306.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2306.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2306.x * cbModelParam._m0[1u].y;
        }
        _1699 = frontier_phi_15_37_ladder_2;
        _1701 = frontier_phi_15_37_ladder_1;
        _1703 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1687 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_810, _811, _812), _1619);
        _1699 = _1687.x * cbModelParam._m0[1u].y;
        _1701 = _1687.y * cbModelParam._m0[1u].y;
        _1703 = _1687.z * cbModelParam._m0[1u].y;
    }
    float _1707 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _669);
    float _1708 = isnan(_1707) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1707 : min(cbModelParam._m0[25u].w, _1707));
    float _1799;
    float _1801;
    float _1803;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1763 = fma(_873, cbModelParam._m0[21u].z, fma(_869, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _865)) + cbModelParam._m0[21u].w;
        float _1767 = fma(_873, cbModelParam._m0[22u].z, fma(_869, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _865)) + cbModelParam._m0[22u].w;
        float _1771 = fma(_873, cbModelParam._m0[23u].z, fma(_869, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _865)) + cbModelParam._m0[23u].w;
        float _1774 = fma(_812, cbModelParam._m0[21u].z, fma(_811, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _810));
        float _1777 = fma(_812, cbModelParam._m0[22u].z, fma(_811, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _810));
        float _1780 = fma(_812, cbModelParam._m0[23u].z, fma(_811, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _810));
        float _1920;
        if (_1774 > 0.0)
        {
            _1920 = abs((1.0 - _1763) / _1774);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1774 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1763 + 1.0) / _1774);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1920 = frontier_phi_27_23_ladder;
        }
        float _2196;
        if (_1777 > 0.0)
        {
            _2196 = abs((1.0 - _1767) / _1777);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1777 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1767 + 1.0) / _1777);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _2196 = frontier_phi_39_34_ladder;
        }
        float _2409;
        if (_1780 > 0.0)
        {
            _2409 = abs((1.0 - _1771) / _1780);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1780 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1771 + 1.0) / _1780);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _2409 = frontier_phi_48_45_ladder;
        }
        float _2411 = isnan(_2196) ? _1920 : (isnan(_1920) ? _2196 : min(_1920, _2196));
        float _2412 = isnan(_2409) ? _2411 : (isnan(_2411) ? _2409 : min(_2411, _2409));
        float _2416 = (_2412 * _1774) + _1763;
        float _2417 = (_2412 * _1777) + _1767;
        float _2418 = (_2412 * _1780) + _1771;
        float _2419 = _2412 * 9.9999997473787516355514526367188e-05;
        float _2420 = (-1.0) - _2419;
        float _2422 = _2419 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2418 > _2422) || ((_2418 < _2420) || ((_2417 > _2422) || ((_2417 < _2420) || ((_2416 < _2420) || (_2416 > _2422))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2659 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2418, cbModelParam._m0[17u].z, fma(_2417, cbModelParam._m0[17u].y, _2416 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2418, cbModelParam._m0[18u].z, fma(_2417, cbModelParam._m0[18u].y, _2416 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2418, cbModelParam._m0[19u].z, fma(_2417, cbModelParam._m0[19u].y, _2416 * cbModelParam._m0[19u].x))), _1708);
            frontier_phi_24_48_ladder = _2659.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2659.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2659.x * cbModelParam._m0[1u].z;
        }
        _1799 = frontier_phi_24_48_ladder_2;
        _1801 = frontier_phi_24_48_ladder_1;
        _1803 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1783 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_810, _811, _812), _1708);
        _1799 = _1783.x * cbModelParam._m0[1u].z;
        _1801 = _1783.y * cbModelParam._m0[1u].z;
        _1803 = _1783.z * cbModelParam._m0[1u].z;
    }
    float _1816 = (((_836 * _788) + _837) * _802) * ((cbModelParam._m0[1u].w * (_1799 - _1699)) + _1699);
    float _1818 = (((_836 * _789) + _837) * _802) * ((cbModelParam._m0[1u].w * (_1801 - _1701)) + _1701);
    float _1820 = (((_836 * _790) + _837) * _802) * ((cbModelParam._m0[1u].w * (_1803 - _1703)) + _1703);
    float _1823 = fma(_1820, cbSceneParam._m0[89u].z, fma(_1818, cbSceneParam._m0[89u].y, _1816 * cbSceneParam._m0[89u].x));
    float _1826 = fma(_1820, cbSceneParam._m0[90u].z, fma(_1818, cbSceneParam._m0[90u].y, _1816 * cbSceneParam._m0[90u].x));
    float _1829 = fma(_1820, cbSceneParam._m0[91u].z, fma(_1818, cbSceneParam._m0[91u].y, _1816 * cbSceneParam._m0[91u].x));
    uvec4 _1839 = floatBitsToUint(cbInstanceData._m0[_693 + 5u]);
    uint _1841 = _1839.x * 14u;
    uint _1842 = _1841 + 13u;
    float _1849 = _802 + (-1.0);
    float _1854 = (cbLight._m0[_1842].x * _1849) + 1.0;
    float _1855 = (cbLight._m0[_1842].y * _1849) + 1.0;
    float _1856 = (cbLight._m0[_1842].z * _1849) + 1.0;
    float _1857 = (cbLight._m0[_1842].w * _1849) + 1.0;
    uint _1858 = _1841 + 5u;
    float _1864 = isnan(1.0) ? _1855 : (isnan(_1855) ? 1.0 : min(_1855, 1.0));
    uint _1868 = _1841 + 4u;
    float _1874 = isnan(1.0) ? _1854 : (isnan(_1854) ? 1.0 : min(_1854, 1.0));
    uint _1878 = _1841 | 1u;
    float _1889 = dot(vec3(cbLight._m0[_1841].xyz), vec3(_499, _500, _501));
    float _1892 = dot(vec3(cbLight._m0[_1878].xyz), vec3(_499, _500, _501));
    float _4065 = isnan(0.0) ? _1889 : (isnan(_1889) ? 0.0 : max(_1889, 0.0));
    float _4076 = isnan(0.0) ? _1892 : (isnan(_1892) ? 0.0 : max(_1892, 0.0));
    float _1897 = (isnan(1.0) ? _4065 : (isnan(_4065) ? 1.0 : min(_4065, 1.0))) * 0.3183098733425140380859375;
    float _1899 = (isnan(1.0) ? _4076 : (isnan(_4076) ? 1.0 : min(_4076, 1.0))) * 0.3183098733425140380859375;
    float _1906 = ((cbLight._m0[_1858].x * _1864) * _1899) + ((cbLight._m0[_1868].x * _1874) * _1897);
    float _1907 = ((_1864 * cbLight._m0[_1858].y) * _1899) + ((_1874 * cbLight._m0[_1868].y) * _1897);
    float _1908 = ((_1864 * cbLight._m0[_1858].z) * _1899) + ((_1874 * cbLight._m0[_1868].z) * _1897);
    uvec4 _1912 = floatBitsToUint(cbLight._m0[_1841 + 12u]);
    bool _1914 = _1912.x == 0u;
    float _1925;
    float _1927;
    float _1929;
    if (_1914)
    {
        _1925 = _1906;
        _1927 = _1907;
        _1929 = _1908;
    }
    else
    {
        uint _1933 = _1841 + 6u;
        float _1949 = (dot(vec3(cbLight._m0[_1841 + 2u].xyz), vec3(_499, _500, _501)) * 0.5) + 0.5;
        float _1950 = _1949 * _1949;
        float _4087 = isnan(0.0) ? _1950 : (isnan(_1950) ? 0.0 : max(_1950, 0.0));
        float _1951 = isnan(1.0) ? _4087 : (isnan(_4087) ? 1.0 : min(_4087, 1.0));
        float _1952 = isnan(1.0) ? _1856 : (isnan(_1856) ? 1.0 : min(_1856, 1.0));
        _1925 = (((cbLight._m0[_1933].x * 0.3183098733425140380859375) * _1951) * _1952) + _1906;
        _1927 = (((cbLight._m0[_1933].y * 0.3183098733425140380859375) * _1951) * _1952) + _1907;
        _1929 = (((cbLight._m0[_1933].z * 0.3183098733425140380859375) * _1951) * _1952) + _1908;
    }
    bool _1932 = _1912.y == 0u;
    float _1970;
    float _1972;
    float _1974;
    if (_1932)
    {
        _1970 = _1925;
        _1972 = _1927;
        _1974 = _1929;
    }
    else
    {
        uint _2140 = _1841 + 7u;
        float _2156 = (dot(vec3(cbLight._m0[_1841 + 3u].xyz), vec3(_499, _500, _501)) * 0.5) + 0.5;
        float _2157 = _2156 * _2156;
        float _4103 = isnan(0.0) ? _2157 : (isnan(_2157) ? 0.0 : max(_2157, 0.0));
        float _2158 = isnan(1.0) ? _4103 : (isnan(_4103) ? 1.0 : min(_4103, 1.0));
        float _2159 = isnan(1.0) ? _1857 : (isnan(_1857) ? 1.0 : min(_1857, 1.0));
        _1970 = (((cbLight._m0[_2140].x * 0.3183098733425140380859375) * _2158) * _2159) + _1925;
        _1972 = (((cbLight._m0[_2140].y * 0.3183098733425140380859375) * _2158) * _2159) + _1927;
        _1974 = (((cbLight._m0[_2140].z * 0.3183098733425140380859375) * _2158) * _2159) + _1929;
    }
    uint _1977 = _1841 + 8u;
    float _1990 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1841].w)) * _669) * 0.949999988079071044921875);
    float _1991 = _1990 * _1990;
    float _1992 = cbLight._m0[_1841].x + _582;
    float _1993 = cbLight._m0[_1841].y + _583;
    float _1994 = cbLight._m0[_1841].z + _584;
    float _1998 = inversesqrt(dot(vec3(_1992, _1993, _1994), vec3(_1992, _1993, _1994)));
    float _1999 = _1998 * _1992;
    float _2000 = _1998 * _1993;
    float _2001 = _1998 * _1994;
    float _2002 = dot(vec3(_499, _500, _501), vec3(cbLight._m0[_1841].xyz));
    float _4119 = isnan(0.0) ? _2002 : (isnan(_2002) ? 0.0 : max(_2002, 0.0));
    float _2005 = isnan(1.0) ? _4119 : (isnan(_4119) ? 1.0 : min(_4119, 1.0));
    float _4130 = isnan(0.0) ? _803 : (isnan(_803) ? 0.0 : max(_803, 0.0));
    float _2006 = isnan(1.0) ? _4130 : (isnan(_4130) ? 1.0 : min(_4130, 1.0));
    float _2007 = dot(vec3(_499, _500, _501), vec3(_1999, _2000, _2001));
    float _4141 = isnan(0.0) ? _2007 : (isnan(_2007) ? 0.0 : max(_2007, 0.0));
    float _2010 = isnan(1.0) ? _4141 : (isnan(_4141) ? 1.0 : min(_4141, 1.0));
    float _2011 = dot(vec3(cbLight._m0[_1841].xyz), vec3(_1999, _2000, _2001));
    float _4152 = isnan(0.0) ? _2011 : (isnan(_2011) ? 0.0 : max(_2011, 0.0));
    float _2015 = _1991 * _1991;
    float _2019 = ((_2010 * _2010) * (_2015 + (-1.0))) + 1.0;
    float _2027 = exp2(log2(1.0 - (isnan(1.0) ? _4152 : (isnan(_4152) ? 1.0 : min(_4152, 1.0)))) * 5.0);
    float _2028 = 0.959999978542327880859375 - _785;
    float _2030 = 0.959999978542327880859375 - _786;
    float _2031 = 0.959999978542327880859375 - _787;
    float _2038 = 1.0 - _1991;
    float _2049 = (0.5 / (((_2006 * ((_2005 * _2038) + _1991)) + 9.9999999392252902907785028219223e-09) + (((_2006 * _2038) + _1991) * _2005))) * _2005;
    float _4163 = isnan(0.0) ? _2049 : (isnan(_2049) ? 0.0 : max(_2049, 0.0));
    float _2051 = (isnan(1.0) ? _4163 : (isnan(_4163) ? 1.0 : min(_4163, 1.0))) * (_2015 / ((_2019 * _2019) * 3.141590118408203125));
    uint _2062 = _1841 + 9u;
    float _2073 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1878].w)) * _669) * 0.949999988079071044921875);
    float _2074 = _2073 * _2073;
    float _2075 = cbLight._m0[_1878].x + _582;
    float _2076 = cbLight._m0[_1878].y + _583;
    float _2077 = cbLight._m0[_1878].z + _584;
    float _2081 = inversesqrt(dot(vec3(_2075, _2076, _2077), vec3(_2075, _2076, _2077)));
    float _2082 = _2081 * _2075;
    float _2083 = _2081 * _2076;
    float _2084 = _2081 * _2077;
    float _2085 = dot(vec3(_499, _500, _501), vec3(cbLight._m0[_1878].xyz));
    float _4174 = isnan(0.0) ? _2085 : (isnan(_2085) ? 0.0 : max(_2085, 0.0));
    float _2088 = isnan(1.0) ? _4174 : (isnan(_4174) ? 1.0 : min(_4174, 1.0));
    float _2089 = dot(vec3(_499, _500, _501), vec3(_2082, _2083, _2084));
    float _4185 = isnan(0.0) ? _2089 : (isnan(_2089) ? 0.0 : max(_2089, 0.0));
    float _2092 = isnan(1.0) ? _4185 : (isnan(_4185) ? 1.0 : min(_4185, 1.0));
    float _2093 = dot(vec3(cbLight._m0[_1878].xyz), vec3(_2082, _2083, _2084));
    float _4196 = isnan(0.0) ? _2093 : (isnan(_2093) ? 0.0 : max(_2093, 0.0));
    float _2097 = _2074 * _2074;
    float _2101 = ((_2092 * _2092) * (_2097 + (-1.0))) + 1.0;
    float _2108 = exp2(log2(1.0 - (isnan(1.0) ? _4196 : (isnan(_4196) ? 1.0 : min(_4196, 1.0)))) * 5.0);
    float _2115 = 1.0 - _2074;
    float _2125 = (0.5 / (((_2006 * ((_2088 * _2115) + _2074)) + 9.9999999392252902907785028219223e-09) + (((_2006 * _2115) + _2074) * _2088))) * _2088;
    float _4207 = isnan(0.0) ? _2125 : (isnan(_2125) ? 0.0 : max(_2125, 0.0));
    float _2127 = (isnan(1.0) ? _4207 : (isnan(_4207) ? 1.0 : min(_4207, 1.0))) * (_2097 / ((_2101 * _2101) * 3.141590118408203125));
    float _2137 = (((((_2108 * _2028) + _788) * cbLight._m0[_2062].x) * _2127) * _1864) + (((((_2027 * _2028) + _788) * cbLight._m0[_1977].x) * _2051) * _1874);
    float _2138 = (((((_2108 * _2030) + _789) * cbLight._m0[_2062].y) * _2127) * _1864) + (((((_2027 * _2030) + _789) * cbLight._m0[_1977].y) * _2051) * _1874);
    float _2139 = (((((_2108 * _2031) + _790) * cbLight._m0[_2062].z) * _2127) * _1864) + (((((_2027 * _2031) + _790) * cbLight._m0[_1977].z) * _2051) * _1874);
    float _2201;
    float _2203;
    float _2205;
    if (_1914)
    {
        _2201 = _2137;
        _2203 = _2138;
        _2205 = _2139;
    }
    else
    {
        uint _2207 = _1841 + 2u;
        uint _2211 = _1841 + 10u;
        float _2225 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2207].w)) * _669) * 0.949999988079071044921875);
        float _2226 = _2225 * _2225;
        float _2227 = cbLight._m0[_2207].x + _582;
        float _2228 = cbLight._m0[_2207].y + _583;
        float _2229 = cbLight._m0[_2207].z + _584;
        float _2233 = inversesqrt(dot(vec3(_2227, _2228, _2229), vec3(_2227, _2228, _2229)));
        float _2234 = _2233 * _2227;
        float _2235 = _2233 * _2228;
        float _2236 = _2233 * _2229;
        float _2237 = dot(vec3(_499, _500, _501), vec3(cbLight._m0[_2207].xyz));
        float _4218 = isnan(0.0) ? _2237 : (isnan(_2237) ? 0.0 : max(_2237, 0.0));
        float _2240 = isnan(1.0) ? _4218 : (isnan(_4218) ? 1.0 : min(_4218, 1.0));
        float _2241 = dot(vec3(_499, _500, _501), vec3(_2234, _2235, _2236));
        float _4229 = isnan(0.0) ? _2241 : (isnan(_2241) ? 0.0 : max(_2241, 0.0));
        float _2244 = isnan(1.0) ? _4229 : (isnan(_4229) ? 1.0 : min(_4229, 1.0));
        float _2245 = dot(vec3(cbLight._m0[_2207].xyz), vec3(_2234, _2235, _2236));
        float _4240 = isnan(0.0) ? _2245 : (isnan(_2245) ? 0.0 : max(_2245, 0.0));
        float _2249 = _2226 * _2226;
        float _2253 = ((_2244 * _2244) * (_2249 + (-1.0))) + 1.0;
        float _2260 = exp2(log2(1.0 - (isnan(1.0) ? _4240 : (isnan(_4240) ? 1.0 : min(_4240, 1.0)))) * 5.0);
        float _2267 = 1.0 - _2226;
        float _2277 = (0.5 / (((_2006 * ((_2240 * _2267) + _2226)) + 9.9999999392252902907785028219223e-09) + (((_2006 * _2267) + _2226) * _2240))) * _2240;
        float _4251 = isnan(0.0) ? _2277 : (isnan(_2277) ? 0.0 : max(_2277, 0.0));
        float _2279 = (isnan(1.0) ? _4251 : (isnan(_4251) ? 1.0 : min(_4251, 1.0))) * (_2249 / ((_2253 * _2253) * 3.141590118408203125));
        float _2280 = isnan(1.0) ? _1856 : (isnan(_1856) ? 1.0 : min(_1856, 1.0));
        _2201 = (((((_2260 * _2028) + _788) * cbLight._m0[_2211].x) * _2279) * _2280) + _2137;
        _2203 = (((((_2260 * _2030) + _789) * cbLight._m0[_2211].y) * _2279) * _2280) + _2138;
        _2205 = (((((_2260 * _2031) + _790) * cbLight._m0[_2211].z) * _2279) * _2280) + _2139;
    }
    float _2315;
    float _2317;
    float _2319;
    if (_1932)
    {
        _2315 = _2201;
        _2317 = _2203;
        _2319 = _2205;
    }
    else
    {
        uint _2326 = _1841 + 3u;
        uint _2330 = _1841 + 11u;
        float _2344 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2326].w)) * _669) * 0.949999988079071044921875);
        float _2345 = _2344 * _2344;
        float _2346 = cbLight._m0[_2326].x + _582;
        float _2347 = cbLight._m0[_2326].y + _583;
        float _2348 = cbLight._m0[_2326].z + _584;
        float _2352 = inversesqrt(dot(vec3(_2346, _2347, _2348), vec3(_2346, _2347, _2348)));
        float _2353 = _2352 * _2346;
        float _2354 = _2352 * _2347;
        float _2355 = _2352 * _2348;
        float _2356 = dot(vec3(_499, _500, _501), vec3(cbLight._m0[_2326].xyz));
        float _4267 = isnan(0.0) ? _2356 : (isnan(_2356) ? 0.0 : max(_2356, 0.0));
        float _2359 = isnan(1.0) ? _4267 : (isnan(_4267) ? 1.0 : min(_4267, 1.0));
        float _2360 = dot(vec3(_499, _500, _501), vec3(_2353, _2354, _2355));
        float _4278 = isnan(0.0) ? _2360 : (isnan(_2360) ? 0.0 : max(_2360, 0.0));
        float _2363 = isnan(1.0) ? _4278 : (isnan(_4278) ? 1.0 : min(_4278, 1.0));
        float _2364 = dot(vec3(cbLight._m0[_2326].xyz), vec3(_2353, _2354, _2355));
        float _4289 = isnan(0.0) ? _2364 : (isnan(_2364) ? 0.0 : max(_2364, 0.0));
        float _2368 = _2345 * _2345;
        float _2372 = ((_2363 * _2363) * (_2368 + (-1.0))) + 1.0;
        float _2379 = exp2(log2(1.0 - (isnan(1.0) ? _4289 : (isnan(_4289) ? 1.0 : min(_4289, 1.0)))) * 5.0);
        float _2386 = 1.0 - _2345;
        float _2396 = (0.5 / (((_2006 * ((_2359 * _2386) + _2345)) + 9.9999999392252902907785028219223e-09) + (((_2006 * _2386) + _2345) * _2359))) * _2359;
        float _4300 = isnan(0.0) ? _2396 : (isnan(_2396) ? 0.0 : max(_2396, 0.0));
        float _2398 = (isnan(1.0) ? _4300 : (isnan(_4300) ? 1.0 : min(_4300, 1.0))) * (_2368 / ((_2372 * _2372) * 3.141590118408203125));
        float _2399 = isnan(1.0) ? _1857 : (isnan(_1857) ? 1.0 : min(_1857, 1.0));
        _2315 = (((((_2379 * _2028) + _788) * cbLight._m0[_2330].x) * _2398) * _2399) + _2201;
        _2317 = (((((_2379 * _2030) + _789) * cbLight._m0[_2330].y) * _2398) * _2399) + _2203;
        _2319 = (((((_2379 * _2031) + _790) * cbLight._m0[_2330].z) * _2398) * _2399) + _2205;
    }
    float _2533;
    float _2535;
    float _2537;
    float _2539;
    float _2541;
    float _2543;
    if (_1839.y == 0u)
    {
        float _2474 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2475 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2474;
        float _2476 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2474;
        float _2477 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2474;
        uvec4 _2489 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2490 = _2489.x;
        uint _2501 = uint((float(_2489.y) * floor(float(uint(cbSceneParam._m0[85u].y * _591) / _2490))) + floor(float(uint(cbSceneParam._m0[85u].x * _590) / _2490)));
        float _2511 = (log2(_2477 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2512 = isnan(0.0) ? _2511 : (isnan(_2511) ? 0.0 : max(_2511, 0.0));
        uint _2515 = uint(isnan(14.0) ? _2512 : (isnan(_2512) ? 14.0 : min(_2512, 14.0)));
        uvec4 _2520 = texelFetch(g_lightClusterGridBuffer, int(((_2515 << 2u) + (_2501 << 6u)) >> 2u));
        uint _2521 = _2520.x;
        uint _2522 = _2489.z;
        float _2664;
        float _2666;
        float _2668;
        float _2670;
        float _2672;
        float _2674;
        if (((((1u << ((_2522 >> 4u) & 15u)) + 4294967295u) & _2521) == 0u) || ((_2522 & 240u) == 0u))
        {
            _2664 = 0.0;
            _2666 = 0.0;
            _2668 = 0.0;
            _2670 = 0.0;
            _2672 = 0.0;
            _2674 = 0.0;
        }
        else
        {
            float _2665;
            float _2667;
            float _2669;
            float _2671;
            float _2673;
            float _2675;
            float _2817 = 0.0;
            float _2818 = 0.0;
            float _2819 = 0.0;
            float _2820 = 0.0;
            float _2821 = 0.0;
            float _2822 = 0.0;
            uint _2823 = 0u;
            uint _2832;
            bool _2833;
            for (;;)
            {
                _2832 = texelFetch(g_lightClassification, int((((_2515 << 5u) + (_2501 << 9u)) + (_2823 << 2u)) >> 2u)).x;
                _2833 = _2832 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2833)
                {
                    frontier_phi_63_pred = _2822;
                    frontier_phi_63_pred_1 = _2821;
                    frontier_phi_63_pred_2 = _2820;
                    frontier_phi_63_pred_3 = _2819;
                    frontier_phi_63_pred_4 = _2818;
                    frontier_phi_63_pred_5 = _2817;
                }
                else
                {
                    float _2941;
                    float _2942;
                    float _2943;
                    float _2944;
                    float _2945;
                    float _2946;
                    uint _2947;
                    _2941 = _2817;
                    _2942 = _2818;
                    _2943 = _2819;
                    _2944 = _2820;
                    _2945 = _2821;
                    _2946 = _2822;
                    _2947 = _2832;
                    float _2873;
                    float _2874;
                    float _2875;
                    float _2876;
                    float _2877;
                    float _2878;
                    for (;;)
                    {
                        uint _2951 = uint(findLSB(_2947)) + (_2823 << 5u);
                        uint _2948 = (_2947 + 4294967295u) & _2947;
                        uint _2953 = _2951 * 48u;
                        vec4 _2967 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2953)).x, texelFetch(g_PointLightRenderingBuffer, int(_2953 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2953 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2953 + 3u)).x));
                        uint _2973 = (_2951 * 48u) + 4u;
                        vec4 _2986 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2973)).x, texelFetch(g_PointLightRenderingBuffer, int(_2973 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2973 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2973 + 3u)).x));
                        uint _2992 = (_2951 * 48u) + 8u;
                        vec3 _3003 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2992)).x, texelFetch(g_PointLightRenderingBuffer, int(_2992 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2992 + 2u)).x));
                        float _3007 = _2967.x - _2475;
                        float _3008 = _2967.y - _2476;
                        float _3009 = _2967.z - _2477;
                        float _3010 = dot(vec3(_3007, _3008, _3009), vec3(_3007, _3008, _3009));
                        float _3013 = inversesqrt(_3010);
                        float _3014 = _3013 * _3007;
                        float _3015 = _3013 * _3008;
                        float _3016 = _3013 * _3009;
                        float _3017 = dot(vec3(_614, _617, _620), vec3(_3014, _3015, _3016));
                        float _3022 = 1.0 - (_3010 * _2967.w);
                        float _4326 = isnan(0.0) ? _3022 : (isnan(_3022) ? 0.0 : max(_3022, 0.0));
                        float _3023 = isnan(1.0) ? _4326 : (isnan(_4326) ? 1.0 : min(_4326, 1.0));
                        float _3024 = sqrt(_3010) * _2986.w;
                        float _3027 = 1.39999997615814208984375 / (_3024 + 1.39999997615814208984375);
                        float _3028 = _3027 * _3027;
                        float _3031 = ((1.0 - _3028) * _3017) + _3028;
                        float _3034 = _3024 * _3024;
                        float _3038 = ((isnan(0.0) ? _3031 : (isnan(_3031) ? 0.0 : max(_3031, 0.0))) * _3023) / ((_3034 * 0.699999988079071044921875) + 1.0);
                        float _3042 = (-0.0) - _2475;
                        float _3043 = (-0.0) - _2476;
                        float _3044 = (-0.0) - _2477;
                        float _3048 = inversesqrt(dot(vec3(_3042, _3043, _3044), vec3(_3042, _3043, _3044)));
                        float _3049 = _3048 * _3042;
                        float _3050 = _3048 * _3043;
                        float _3051 = _3048 * _3044;
                        float _3059 = exp2(log2(1.0 / ((_3034 * 3.5) + 5.0)) * 0.25);
                        float _3060 = 1.0 - _818;
                        float _3067 = sqrt(1.0 - ((1.0 - (_3060 * _3060)) * (1.0 - (_3059 * _3059))));
                        float _3068 = _3067 * _3067;
                        float _3069 = _3068 * _3068;
                        float _3070 = _3049 + _3014;
                        float _3071 = _3050 + _3015;
                        float _3072 = _3051 + _3016;
                        float _3076 = inversesqrt(dot(vec3(_3070, _3071, _3072), vec3(_3070, _3071, _3072)));
                        float _3080 = dot(vec3(_614, _617, _620), vec3(_3049, _3050, _3051));
                        float _4342 = isnan(0.0) ? _3080 : (isnan(_3080) ? 0.0 : max(_3080, 0.0));
                        float _3083 = isnan(1.0) ? _4342 : (isnan(_4342) ? 1.0 : min(_4342, 1.0));
                        float _3084 = dot(vec3(_614, _617, _620), vec3(_3076 * _3070, _3076 * _3071, _3076 * _3072));
                        float _4353 = isnan(0.0) ? _3084 : (isnan(_3084) ? 0.0 : max(_3084, 0.0));
                        float _3087 = isnan(1.0) ? _4353 : (isnan(_4353) ? 1.0 : min(_4353, 1.0));
                        float _3091 = ((_3087 * _3087) * (_3069 + (-1.0))) + 1.0;
                        float _3092 = _3027 * _3068;
                        float _3093 = _3092 * _3092;
                        float _3096 = ((1.0 - _3093) * _3017) + _3093;
                        float _4364 = isnan(0.0) ? _3096 : (isnan(_3096) ? 0.0 : max(_3096, 0.0));
                        float _3097 = isnan(1.0) ? _4364 : (isnan(_4364) ? 1.0 : min(_4364, 1.0));
                        float _3098 = 1.0 - _3068;
                        float _3108 = (0.5 / (((_3097 * ((_3083 * _3098) + _3068)) + 9.9999999392252902907785028219223e-09) + (((_3097 * _3098) + _3068) * _3083))) * _3097;
                        float _4375 = isnan(0.0) ? _3108 : (isnan(_3108) ? 0.0 : max(_3108, 0.0));
                        float _3119 = (((_3069 * 3.1415927410125732421875) * (isnan(1.0) ? _4375 : (isnan(_4375) ? 1.0 : min(_4375, 1.0)))) / ((_3091 * _3091) * ((_3034 * 2.1991131305694580078125) + 3.141590118408203125))) * _3023;
                        _2876 = (_3038 * _2986.x) + _2944;
                        _2877 = (_3038 * _2986.y) + _2945;
                        _2878 = (_3038 * _2986.z) + _2946;
                        _2873 = (_3119 * _3003.x) + _2941;
                        _2874 = (_3119 * _3003.y) + _2942;
                        _2875 = (_3119 * _3003.z) + _2943;
                        if (_2948 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2941 = _2873;
                            _2942 = _2874;
                            _2943 = _2875;
                            _2944 = _2876;
                            _2945 = _2877;
                            _2946 = _2878;
                            _2947 = _2948;
                        }
                    }
                    frontier_phi_63_pred = _2878;
                    frontier_phi_63_pred_1 = _2877;
                    frontier_phi_63_pred_2 = _2876;
                    frontier_phi_63_pred_3 = _2875;
                    frontier_phi_63_pred_4 = _2874;
                    frontier_phi_63_pred_5 = _2873;
                }
                _2675 = frontier_phi_63_pred;
                _2673 = frontier_phi_63_pred_1;
                _2671 = frontier_phi_63_pred_2;
                _2669 = frontier_phi_63_pred_3;
                _2667 = frontier_phi_63_pred_4;
                _2665 = frontier_phi_63_pred_5;
                uint _2824 = _2823 + 1u;
                if (_2824 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2817 = _2665;
                    _2818 = _2667;
                    _2819 = _2669;
                    _2820 = _2671;
                    _2821 = _2673;
                    _2822 = _2675;
                    _2823 = _2824;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2664 = _2665;
            _2666 = _2667;
            _2668 = _2669;
            _2670 = _2671;
            _2672 = _2673;
            _2674 = _2675;
        }
        uvec4 _2678 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2679 = _2678.z;
        uint _2681 = (_2679 >> 8u) & 15u;
        float _2785;
        float _2787;
        float _2789;
        float _2791;
        float _2793;
        float _2795;
        if (((4294967295u << _2681) & _2521) == 0u)
        {
            _2785 = _2664;
            _2787 = _2666;
            _2789 = _2668;
            _2791 = _2670;
            _2793 = _2672;
            _2795 = _2674;
        }
        else
        {
            float _2810 = inversesqrt(dot(vec3(_2475, _2476, _2477), vec3(_2475, _2476, _2477)));
            float _2811 = _2810 * _2475;
            float _2812 = _2810 * _2476;
            float _2813 = _2810 * _2477;
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2681 < ((_2679 >> 12u) & 15u))
            {
                float _2786;
                float _2788;
                float _2790;
                float _2792;
                float _2794;
                float _2796;
                float _2924 = _2664;
                float _2925 = _2666;
                float _2926 = _2668;
                float _2927 = _2670;
                float _2928 = _2672;
                float _2929 = _2674;
                uint _2930 = _2681;
                uint _2939;
                bool _2940;
                for (;;)
                {
                    _2939 = texelFetch(g_lightClassification, int((((_2515 << 5u) + (_2501 << 9u)) + (_2930 << 2u)) >> 2u)).x;
                    _2940 = _2939 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_2940)
                    {
                        frontier_phi_69_pred = _2929;
                        frontier_phi_69_pred_1 = _2928;
                        frontier_phi_69_pred_2 = _2927;
                        frontier_phi_69_pred_3 = _2926;
                        frontier_phi_69_pred_4 = _2925;
                        frontier_phi_69_pred_5 = _2924;
                    }
                    else
                    {
                        float _3124;
                        float _3125;
                        float _3126;
                        float _3127;
                        float _3128;
                        float _3129;
                        float _3419;
                        float _3420;
                        float _3421;
                        float _3422;
                        float _3423;
                        float _3424;
                        float _3137 = _2924;
                        float _3138 = _2925;
                        float _3139 = _2926;
                        float _3140 = _2927;
                        float _3141 = _2928;
                        float _3142 = _2929;
                        uint _3143 = _2939;
                        uint _3144;
                        vec4 _3169;
                        float _3170;
                        vec4 _3185;
                        vec3 _3197;
                        vec4 _3212;
                        vec4 _3228;
                        float _3275;
                        bool _3276;
                        for (;;)
                        {
                            uint _3154 = ((_2930 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3143));
                            _3144 = (_3143 + 4294967295u) & _3143;
                            uint _3156 = _3154 * 40u;
                            _3169 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3156)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3156 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3156 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3156 + 3u)).x));
                            _3170 = _3169.w;
                            uint _3172 = (_3154 * 40u) + 4u;
                            _3185 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3172)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3172 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3172 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3172 + 3u)).x));
                            uint _3187 = (_3154 * 40u) + 8u;
                            _3197 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3187)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3187 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3187 + 2u)).x));
                            uint _3199 = (_3154 * 40u) + 16u;
                            _3212 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3199)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3199 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3199 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3199 + 3u)).x));
                            uint _3215 = (_3154 * 40u) + 20u;
                            _3228 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3215)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3215 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3215 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3215 + 3u)).x));
                            uint _3231 = (_3154 * 40u) + 24u;
                            vec4 _3244 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3231)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3231 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3231 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3231 + 3u)).x));
                            uint _3250 = (_3154 * 40u) + 28u;
                            vec4 _3263 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3250)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3250 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3250 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3250 + 3u)).x));
                            _3275 = fma(_2477, _3263.z, fma(_2476, _3263.y, _3263.x * _2475)) + _3263.w;
                            _3276 = !((fma(_2477, _3244.z, fma(_2476, _3244.y, _3244.x * _2475)) + _3244.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_3276)
                            {
                                float _3303 = _3169.x - _2475;
                                float _3304 = _3169.y - _2476;
                                float _3305 = _3169.z - _2477;
                                float _3306 = dot(vec3(_3303, _3304, _3305), vec3(_3303, _3304, _3305));
                                float _3309 = inversesqrt(_3306);
                                float _3310 = _3309 * _3303;
                                float _3311 = _3309 * _3304;
                                float _3312 = _3309 * _3305;
                                float _3316 = 1.0 - (_3306 / (_3170 * _3170));
                                float _4386 = isnan(0.0) ? _3316 : (isnan(_3316) ? 0.0 : max(_3316, 0.0));
                                float _3317 = isnan(1.0) ? _4386 : (isnan(_4386) ? 1.0 : min(_4386, 1.0));
                                float _3321 = sqrt(_3306) * _3185.w;
                                float _3323 = 1.39999997615814208984375 / (_3321 + 1.39999997615814208984375);
                                float _3324 = _3323 * _3323;
                                float _3327 = ((1.0 - _3324) * dot(vec3(_3310, _3311, _3312), vec3(_614, _617, _620))) + _3324;
                                float _3330 = _3321 * _3321;
                                float _3334 = (fma(_2477, _3212.z, fma(_2476, _3212.y, _3212.x * _2475)) + _3212.w) / _3275;
                                float _3335 = (fma(_2477, _3228.z, fma(_2476, _3228.y, _3228.x * _2475)) + _3228.w) / _3275;
                                float _3339 = 1.0 - dot(vec2(_3334, _3335), vec2(_3334, _3335));
                                float _4402 = isnan(0.0) ? _3339 : (isnan(_3339) ? 0.0 : max(_3339, 0.0));
                                float _3340 = isnan(1.0) ? _4402 : (isnan(_4402) ? 1.0 : min(_4402, 1.0));
                                float _3341 = _3340 * (((isnan(0.0) ? _3327 : (isnan(_3327) ? 0.0 : max(_3327, 0.0))) * _3317) / ((_3330 * 0.699999988079071044921875) + 1.0));
                                float _3353 = exp2(log2(1.0 / ((_3330 * 3.5) + 5.0)) * 0.25);
                                float _3354 = 1.0 - _818;
                                float _3361 = sqrt(1.0 - ((1.0 - (_3354 * _3354)) * (1.0 - (_3353 * _3353))));
                                float _3362 = _3361 * _3361;
                                float _3363 = _3362 * _3362;
                                float _3364 = _3310 - _2811;
                                float _3365 = _3311 - _2812;
                                float _3366 = _3312 - _2813;
                                float _3370 = inversesqrt(dot(vec3(_3364, _3365, _3366), vec3(_3364, _3365, _3366)));
                                float _3374 = dot(vec3(_614, _617, _620), vec3((-0.0) - _2811, (-0.0) - _2812, (-0.0) - _2813));
                                float _4413 = isnan(0.0) ? _3374 : (isnan(_3374) ? 0.0 : max(_3374, 0.0));
                                float _3377 = isnan(1.0) ? _4413 : (isnan(_4413) ? 1.0 : min(_4413, 1.0));
                                float _3378 = dot(vec3(_614, _617, _620), vec3(_3370 * _3364, _3370 * _3365, _3370 * _3366));
                                float _4424 = isnan(0.0) ? _3378 : (isnan(_3378) ? 0.0 : max(_3378, 0.0));
                                float _3381 = isnan(1.0) ? _4424 : (isnan(_4424) ? 1.0 : min(_4424, 1.0));
                                float _3385 = ((_3381 * _3381) * (_3363 + (-1.0))) + 1.0;
                                float _3386 = _3323 * _3362;
                                float _3387 = _3386 * _3386;
                                float _3393 = ((1.0 - _3387) * dot(vec3(_614, _617, _620), vec3(_3310, _3311, _3312))) + _3387;
                                float _4435 = isnan(0.0) ? _3393 : (isnan(_3393) ? 0.0 : max(_3393, 0.0));
                                float _3394 = isnan(1.0) ? _4435 : (isnan(_4435) ? 1.0 : min(_4435, 1.0));
                                float _3395 = 1.0 - _3362;
                                float _3405 = (0.5 / (((_3394 * ((_3377 * _3395) + _3362)) + 9.9999999392252902907785028219223e-09) + (((_3394 * _3395) + _3362) * _3377))) * _3394;
                                float _4446 = isnan(0.0) ? _3405 : (isnan(_3405) ? 0.0 : max(_3405, 0.0));
                                float _3415 = (_3340 * _3317) * (((_3363 * 3.1415927410125732421875) * (isnan(1.0) ? _4446 : (isnan(_4446) ? 1.0 : min(_4446, 1.0)))) / ((_3385 * _3385) * ((_3330 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_75_pred = _3341 * _3185.z;
                                frontier_phi_75_pred_1 = _3341 * _3185.y;
                                frontier_phi_75_pred_2 = _3341 * _3185.x;
                                frontier_phi_75_pred_3 = _3415 * _3197.z;
                                frontier_phi_75_pred_4 = _3415 * _3197.y;
                                frontier_phi_75_pred_5 = _3415 * _3197.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _3424 = frontier_phi_75_pred;
                            _3423 = frontier_phi_75_pred_1;
                            _3422 = frontier_phi_75_pred_2;
                            _3421 = frontier_phi_75_pred_3;
                            _3420 = frontier_phi_75_pred_4;
                            _3419 = frontier_phi_75_pred_5;
                            _3127 = _3422 + _3140;
                            _3128 = _3423 + _3141;
                            _3129 = _3424 + _3142;
                            _3124 = _3419 + _3137;
                            _3125 = _3420 + _3138;
                            _3126 = _3421 + _3139;
                            if (_3144 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3137 = _3124;
                                _3138 = _3125;
                                _3139 = _3126;
                                _3140 = _3127;
                                _3141 = _3128;
                                _3142 = _3129;
                                _3143 = _3144;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _3129;
                        frontier_phi_69_pred_1 = _3128;
                        frontier_phi_69_pred_2 = _3127;
                        frontier_phi_69_pred_3 = _3126;
                        frontier_phi_69_pred_4 = _3125;
                        frontier_phi_69_pred_5 = _3124;
                    }
                    _2796 = frontier_phi_69_pred;
                    _2794 = frontier_phi_69_pred_1;
                    _2792 = frontier_phi_69_pred_2;
                    _2790 = frontier_phi_69_pred_3;
                    _2788 = frontier_phi_69_pred_4;
                    _2786 = frontier_phi_69_pred_5;
                    uint _2931 = _2930 + 1u;
                    if (_2931 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2924 = _2786;
                        _2925 = _2788;
                        _2926 = _2790;
                        _2927 = _2792;
                        _2928 = _2794;
                        _2929 = _2796;
                        _2930 = _2931;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2796;
                frontier_phi_57_58_ladder_1 = _2794;
                frontier_phi_57_58_ladder_2 = _2792;
                frontier_phi_57_58_ladder_3 = _2790;
                frontier_phi_57_58_ladder_4 = _2788;
                frontier_phi_57_58_ladder_5 = _2786;
            }
            else
            {
                frontier_phi_57_58_ladder = _2674;
                frontier_phi_57_58_ladder_1 = _2672;
                frontier_phi_57_58_ladder_2 = _2670;
                frontier_phi_57_58_ladder_3 = _2668;
                frontier_phi_57_58_ladder_4 = _2666;
                frontier_phi_57_58_ladder_5 = _2664;
            }
            _2785 = frontier_phi_57_58_ladder_5;
            _2787 = frontier_phi_57_58_ladder_4;
            _2789 = frontier_phi_57_58_ladder_3;
            _2791 = frontier_phi_57_58_ladder_2;
            _2793 = frontier_phi_57_58_ladder_1;
            _2795 = frontier_phi_57_58_ladder;
        }
        float _2800 = isnan(1.0) ? _802 : (isnan(_802) ? 1.0 : min(_802, 1.0));
        _2533 = (_2800 * _2791) + _1970;
        _2535 = (_2800 * _2793) + _1972;
        _2537 = (_2800 * _2795) + _1974;
        _2539 = ((_2785 * _788) * _2800) + _2315;
        _2541 = ((_2787 * _789) * _2800) + _2317;
        _2543 = ((_2789 * _790) * _2800) + _2319;
    }
    else
    {
        _2533 = _1970;
        _2535 = _1972;
        _2537 = _1974;
        _2539 = _2315;
        _2541 = _2317;
        _2543 = _2319;
    }
    uint _2549 = _695 + uint(cbMatDynParam._m0[0u].w);
    float _2559 = ((((cbMtdParam._m0[12u].x * cbMtdParam._m0[16u].z) * cbMtdParam._m0[15u].w) * _443) * _456.x) * cbInstanceData._m0[_2549].x;
    float _2564 = ((((cbMtdParam._m0[12u].y * cbMtdParam._m0[16u].z) * cbMtdParam._m0[15u].w) * _443) * _456.y) * cbInstanceData._m0[_2549].y;
    float _2569 = ((((cbMtdParam._m0[12u].z * cbMtdParam._m0[16u].z) * cbMtdParam._m0[15u].w) * _443) * _456.z) * cbInstanceData._m0[_2549].z;
    float _4462 = isnan(0.0) ? _779 : (isnan(_779) ? 0.0 : max(_779, 0.0));
    float _4473 = isnan(0.0) ? _780 : (isnan(_780) ? 0.0 : max(_780, 0.0));
    float _4484 = isnan(0.0) ? _781 : (isnan(_781) ? 0.0 : max(_781, 0.0));
    float _4495 = isnan(0.0) ? _502 : (isnan(_502) ? 0.0 : max(_502, 0.0));
    float _2587 = (((isnan(1.0) ? _4462 : (isnan(_4462) ? 1.0 : min(_4462, 1.0))) * (_2533 + ((isnan(0.0) ? _1532 : (isnan(_1532) ? 0.0 : max(_1532, 0.0))) * _802))) + ((_2539 + ((isnan(0.0) ? _1823 : (isnan(_1823) ? 0.0 : max(_1823, 0.0))) * _1608)) * cbPerFrame._m0[3u].x)) + _2559;
    float _2589 = (_2564 + ((_2541 + ((isnan(0.0) ? _1826 : (isnan(_1826) ? 0.0 : max(_1826, 0.0))) * _1608)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4473 : (isnan(_4473) ? 1.0 : min(_4473, 1.0))) * (_2535 + ((isnan(0.0) ? _1535 : (isnan(_1535) ? 0.0 : max(_1535, 0.0))) * _802)));
    float _2591 = (_2569 + ((_2543 + ((isnan(0.0) ? _1829 : (isnan(_1829) ? 0.0 : max(_1829, 0.0))) * _1608)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4484 : (isnan(_4484) ? 1.0 : min(_4484, 1.0))) * (_2537 + ((isnan(0.0) ? _1538 : (isnan(_1538) ? 0.0 : max(_1538, 0.0))) * _802)));
    float _4521 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2604 = isnan(1.0) ? _4521 : (isnan(_4521) ? 1.0 : min(_4521, 1.0));
    float _2609 = cbInstanceData._m0[_693 + 6u].w * (isnan(1.0) ? _4495 : (isnan(_4495) ? 1.0 : min(_4495, 1.0)));
    float _2614 = _590 / cbSceneParam._m0[86u].x;
    float _2615 = _591 / cbSceneParam._m0[86u].y;
    vec4 _2629 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2614, _2615, (log2((isnan(cbSceneParam._m0[77u].w) ? _523 : (isnan(_523) ? cbSceneParam._m0[77u].w : min(_523, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2631 = _2629.x;
    float _2632 = _2629.y;
    float _2633 = _2629.z;
    float _2634 = _2629.w;
    float _2726;
    float _2728;
    float _2730;
    float _2732;
    if (_523 > cbSceneParam._m0[78u].w)
    {
        float _2689 = isnan(_523) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _523 : min(cbSceneParam._m0[80u].w, _523));
        float _2690 = _2689 / _523;
        float _2701 = _2690 * _575;
        float _2702 = _576 * _2690;
        float _2703 = (-0.0) - _2702;
        float _2704 = _2690 * _577;
        float _2706 = (cbSceneParam._m0[77u].w * _2703) / _2689;
        float _2707 = _2706 + cbSceneParam._m0[79u].w;
        float _2708 = cbSceneParam._m0[79u].w - _2702;
        float _2714 = sqrt(((_2701 * _2701) + (_2702 * _2702)) + (_2704 * _2704));
        float _2717 = (1.0 - (cbSceneParam._m0[77u].w / _2689)) * _2714;
        float _2722 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2724 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2886;
        if (abs((_2703 - _2706) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2886 = ((((_2707 > 0.0) ? exp2(_2722 * _2707) : (2.0 - exp2(_2724 * _2707))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2717;
        }
        else
        {
            float _2846 = 1.0 / cbSceneParam._m0[80u].x;
            float _2847 = isnan(_2708) ? _2707 : (isnan(_2707) ? _2708 : max(_2707, _2708));
            float _2848 = isnan(_2708) ? _2707 : (isnan(_2707) ? _2708 : min(_2707, _2708));
            float _2857 = isnan(0.0) ? _2847 : (isnan(_2847) ? 0.0 : min(_2847, 0.0));
            float _2858 = isnan(0.0) ? _2848 : (isnan(_2848) ? 0.0 : min(_2848, 0.0));
            _2886 = ((abs(_2714 / _2703) * cbSceneParam._m0[80u].y) * ((((_2857 - _2858) * 2.0) - ((exp2(_2722 * (isnan(0.0) ? _2847 : (isnan(_2847) ? 0.0 : max(_2847, 0.0)))) - exp2(_2722 * (isnan(0.0) ? _2848 : (isnan(_2848) ? 0.0 : max(_2848, 0.0))))) * _2846)) - ((exp2(_2724 * _2857) - exp2(_2724 * _2858)) * _2846))) + (_2717 * cbSceneParam._m0[80u].z);
        }
        vec4 _2888 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2614, _2615, 1.0), 0.0);
        float _2897 = exp2((_2886 * (-1.44269502162933349609375)) * (1.0 - _2888.w));
        float _2898 = log2(_2897);
        float _2914 = log2(_2634);
        _2726 = (exp2(_2914 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2898 * cbSceneParam._m0[78u].x)) * _2888.x) / cbSceneParam._m0[78u].x)) + _2631;
        _2728 = (exp2(_2914 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2898 * cbSceneParam._m0[78u].y)) * _2888.y) / cbSceneParam._m0[78u].y)) + _2632;
        _2730 = (exp2(_2914 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2898 * cbSceneParam._m0[78u].z)) * _2888.z) / cbSceneParam._m0[78u].z)) + _2633;
        _2732 = _2897 * _2634;
    }
    else
    {
        _2726 = _2631;
        _2728 = _2632;
        _2730 = _2633;
        _2732 = _2634;
    }
    float _2744 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2745 = _2744 == 3.0;
    float _2746 = log2(_2732);
    float _2750 = exp2(_2746 * cbSceneParam._m0[78u].x);
    float _2751 = exp2(_2746 * cbSceneParam._m0[78u].y);
    float _2752 = exp2(_2746 * cbSceneParam._m0[78u].z);
    float _2753 = _2750 * (isnan(0.0) ? _2587 : (isnan(_2587) ? 0.0 : max(_2587, 0.0)));
    float _2754 = _2751 * (isnan(0.0) ? _2589 : (isnan(_2589) ? 0.0 : max(_2589, 0.0)));
    float _2755 = _2752 * (isnan(0.0) ? _2591 : (isnan(_2591) ? 0.0 : max(_2591, 0.0)));
    float _2764 = (_2744 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2764 * (_2745 ? _2753 : (_2753 + (cbSceneParam._m0[72u].w * _2726)));
    SV_Target.y = _2764 * (_2745 ? _2754 : (_2754 + (cbSceneParam._m0[72u].w * _2728)));
    SV_Target.z = _2764 * (_2745 ? _2755 : (_2755 + (cbSceneParam._m0[72u].w * _2730)));
    SV_Target.w = _2609;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2559) * _2604) * _2750) * _2764;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2564) * _2604) * _2751) * _2764;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2569) * _2604) * _2752) * _2764;
    SV_Target_1.w = _2609;
}


