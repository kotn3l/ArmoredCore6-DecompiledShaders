#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[18];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_1;
layout(set = 0, binding = 1) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_7;
layout(set = 0, binding = 10) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_6;
layout(set = 0, binding = 12) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_0;
layout(set = 0, binding = 3) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_10;
layout(set = 0, binding = 4) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_11;
layout(set = 0, binding = 5) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_12;
layout(set = 0, binding = 7) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1366;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _211 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _212 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _213 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _219 = inversesqrt(dot(vec3(_211, _212, _213), vec3(_211, _212, _213)));
    float _226 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _227 = _226 * NORMAL.x;
    float _228 = _226 * NORMAL.y;
    float _229 = _226 * NORMAL.z;
    float _233 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _241;
    float _242;
    float _243;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _241 = (-0.0) - _227;
        _242 = (-0.0) - _228;
        _243 = (-0.0) - _229;
    }
    else
    {
        _241 = _227;
        _242 = _228;
        _243 = _229;
    }
    float _287 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _297 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _287);
    float _298 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _287);
    float _299 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _287);
    vec4 _312 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _318 = _312.w;
    vec4 _330 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _346 = exp2(log2(1.0 - _318) * 8.0);
    vec4 _358 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_10, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _374 = exp2(log2(_318) * 8.0);
    vec4 _386 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _410 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _419 = ((_330.x * 4.55000019073486328125) * cbMtdParam._m0[9u].x) * _410.x;
    float _422 = ((_330.y * 4.55000019073486328125) * cbMtdParam._m0[9u].y) * _410.y;
    float _425 = ((_330.z * 4.55000019073486328125) * cbMtdParam._m0[9u].z) * _410.z;
    float _432 = (((cbMtdParam._m0[13u].x * _358.x) - _419) * _346) + _419;
    float _433 = (((cbMtdParam._m0[13u].y * _358.y) - _422) * _346) + _422;
    float _434 = (((cbMtdParam._m0[13u].z * _358.z) - _425) * _346) + _425;
    float _441 = (((cbMtdParam._m0[11u].x * _386.x) - _432) * _374) + _432;
    float _442 = (((cbMtdParam._m0[11u].y * _386.y) - _433) * _374) + _433;
    float _443 = (((cbMtdParam._m0[11u].z * _386.z) - _434) * _374) + _434;
    float _444 = _410.w * _330.w;
    float _468 = cbMtdParam._m0[16u].x + texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w)).x;
    float _472 = ((cbMtdParam._m0[15u].z - _468) * _346) + _468;
    float _475 = ((cbMtdParam._m0[16u].w - _472) * _374) + _472;
    vec4 _487 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w));
    float _489 = _487.x;
    float _490 = _487.y;
    vec4 _509 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    vec4 _527 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _535 = (_312.z * 2.0) * (cbMtdParam._m0[14u].x + _487.z);
    float _539 = (((_509.z - _535) + cbMtdParam._m0[15u].y) * _346) + _535;
    float _543 = (((_527.z - _539) + cbMtdParam._m0[14u].w) * _374) + _539;
    float _557 = abs((fract(cbMtdParam._m0[15u].x * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _4020 = isnan(0.0) ? _557 : (isnan(_557) ? 0.0 : max(_557, 0.0));
    float _558 = isnan(1.0) ? _4020 : (isnan(_4020) ? 1.0 : min(_4020, 1.0));
    float _563 = (_558 * _558) * (3.0 - (_558 * 2.0));
    vec4 _576 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _584 = (_312.x * 2.0) + (-1.0);
    float _585 = (_312.y * 2.0) + (-1.0);
    float _586 = dot(vec2(_584, _585), vec2(_584, _585));
    float _4031 = isnan(0.0) ? _586 : (isnan(_586) ? 0.0 : max(_586, 0.0));
    float _591 = sqrt(1.0 - (isnan(1.0) ? _4031 : (isnan(_4031) ? 1.0 : min(_4031, 1.0))));
    float _596 = ((_509.x - _489) * _346) + _489;
    float _597 = ((_509.y - _490) * _346) + _490;
    float _610 = (cbMtdParam._m0[14u].z * (((((_527.x - _596) * _374) + _596) * 2.0) + (-1.0))) + _584;
    float _611 = (cbMtdParam._m0[14u].z * (((((_527.y - _597) * _374) + _597) * 2.0) + (-1.0))) + _585;
    float _614 = fma(_591, _241, fma(_611, _233 * TANGENT.x, (_219 * _211) * _610));
    float _617 = fma(_591, _242, fma(_611, _233 * TANGENT.y, (_219 * _212) * _610));
    float _620 = fma(_591, _243, fma(_611, _233 * TANGENT.z, (_219 * _213) * _610));
    float _624 = inversesqrt(dot(vec3(_614, _617, _620), vec3(_614, _617, _620)));
    float _625 = _624 * _614;
    float _626 = _624 * _617;
    float _627 = _624 * _620;
    float _4042 = isnan(0.0) ? _444 : (isnan(_444) ? 0.0 : max(_444, 0.0));
    float _628 = isnan(1.0) ? _4042 : (isnan(_4042) ? 1.0 : min(_4042, 1.0));
    float _4053 = isnan(0.0) ? _543 : (isnan(_543) ? 0.0 : max(_543, 0.0));
    float _629 = isnan(1.0) ? _4053 : (isnan(_4053) ? 1.0 : min(_4053, 1.0));
    float _4064 = isnan(0.0) ? _441 : (isnan(_441) ? 0.0 : max(_441, 0.0));
    float _630 = isnan(1.0) ? _4064 : (isnan(_4064) ? 1.0 : min(_4064, 1.0));
    float _4075 = isnan(0.0) ? _442 : (isnan(_442) ? 0.0 : max(_442, 0.0));
    float _631 = isnan(1.0) ? _4075 : (isnan(_4075) ? 1.0 : min(_4075, 1.0));
    float _4086 = isnan(0.0) ? _443 : (isnan(_443) ? 0.0 : max(_443, 0.0));
    float _632 = isnan(1.0) ? _4086 : (isnan(_4086) ? 1.0 : min(_4086, 1.0));
    float _4097 = isnan(0.0) ? _475 : (isnan(_475) ? 0.0 : max(_475, 0.0));
    float _633 = isnan(1.0) ? _4097 : (isnan(_4097) ? 1.0 : min(_4097, 1.0));
    float _641 = cbMatDynParam._m0[9u].x * _630;
    float _642 = cbMatDynParam._m0[9u].y * _631;
    float _643 = cbMatDynParam._m0[9u].z * _632;
    float _650 = inversesqrt(dot(vec3(_297, _298, _299), vec3(_297, _298, _299)));
    float _651 = _650 * _297;
    float _652 = _650 * _298;
    float _653 = _650 * _299;
    float _654 = dot(vec3(_625, _626, _627), vec3(_651, _652, _653));
    float _660 = abs(exp2(log2(_654) * cbMatDynParam._m0[12u].x));
    float _661 = isnan(0.100000001490116119384765625) ? _660 : (isnan(_660) ? 0.100000001490116119384765625 : max(_660, 0.100000001490116119384765625));
    float _667 = ((isnan(0.699999988079071044921875) ? _661 : (isnan(_661) ? 0.699999988079071044921875 : min(_661, 0.699999988079071044921875))) + (-0.100000001490116119384765625)) * 1.66666662693023681640625;
    float _689 = 1.0 - cbMatDynParam._m0[8u].w;
    float _4118 = isnan(0.0) ? _689 : (isnan(_689) ? 0.0 : max(_689, 0.0));
    float _692 = 1.0 - cbMatDynParam._m0[7u].w;
    float _4129 = isnan(0.0) ? _692 : (isnan(_692) ? 0.0 : max(_692, 0.0));
    float _693 = isnan(1.0) ? _4129 : (isnan(_4129) ? 1.0 : min(_4129, 1.0));
    float _696 = (((isnan(1.0) ? _4118 : (isnan(_4118) ? 1.0 : min(_4118, 1.0))) - _693) * _667) + _693;
    float _715 = dot(vec3(_625, _626, _627), vec3(0.0, -1.0, 0.0));
    float _4140 = isnan(0.0) ? _715 : (isnan(_715) ? 0.0 : max(_715, 0.0));
    float _718 = isnan(1.0) ? _4140 : (isnan(_4140) ? 1.0 : min(_4140, 1.0));
    float _725 = (_718 * _630) * cbMatDynParam._m0[11u].x;
    float _727 = (_718 * _631) * cbMatDynParam._m0[11u].y;
    float _729 = (_718 * _632) * cbMatDynParam._m0[11u].z;
    float _736 = dot(vec3(_651, _652, _653), vec3(_625, _626, _627));
    float _739 = _736 * 2.0;
    float _749 = dot(vec3((-0.0) - (_651 - (_739 * _625)), (-0.0) - (_652 - (_739 * _626)), (-0.0) - (_653 - (_739 * _627))), vec3(0.0, -1.0, 0.0));
    float _4151 = isnan(0.0) ? _749 : (isnan(_749) ? 0.0 : max(_749, 0.0));
    float _756 = exp2(log2(isnan(1.0) ? _4151 : (isnan(_4151) ? 1.0 : min(_4151, 1.0))) * 4.0);
    float _782 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _788 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _789 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _791 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _793 = _791.w;
    float _812 = fma(_627, cbSceneParam._m0[5u].z, fma(_626, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _625));
    float _815 = fma(_627, cbSceneParam._m0[6u].z, fma(_626, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _625));
    float _818 = fma(_627, cbSceneParam._m0[7u].z, fma(_626, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _625));
    vec4 _820 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _822 = _820.x;
    float _834 = (((_820.y - _629) + (_820.w * _629)) * cbMtdParam._m0[3u].x) + _629;
    vec4 _835 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _851 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3(cbMtdParam._m0[3u].x * (_822 * _822)), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * _835.z;
    float _859 = (((cbMatDynParam._m0[15u].x - _633) * cbMatDynParam._m0[15u].w) * _851) + _633;
    float _867 = ((_851 * cbMatDynParam._m0[16u].z) * (cbMatDynParam._m0[16u].x - _834)) + _834;
    uint _891 = uint(roundEven(NORMAL.w)) * 13u;
    uint _892 = _891 + 9u;
    uint _893 = _892 + uint(cbMatDynParam._m0[0u].w);
    float _899 = (cbMtdParam._m0[0u].x * _641) * cbInstanceData._m0[_893].x;
    float _900 = (cbMtdParam._m0[0u].y * _642) * cbInstanceData._m0[_893].y;
    float _901 = (cbMtdParam._m0[0u].z * _643) * cbInstanceData._m0[_893].z;
    float _4162 = isnan(0.0) ? _899 : (isnan(_899) ? 0.0 : max(_899, 0.0));
    float _902 = isnan(1.0) ? _4162 : (isnan(_4162) ? 1.0 : min(_4162, 1.0));
    float _4173 = isnan(0.0) ? _900 : (isnan(_900) ? 0.0 : max(_900, 0.0));
    float _903 = isnan(1.0) ? _4173 : (isnan(_4173) ? 1.0 : min(_4173, 1.0));
    float _4184 = isnan(0.0) ? _901 : (isnan(_901) ? 0.0 : max(_901, 0.0));
    float _904 = isnan(1.0) ? _4184 : (isnan(_4184) ? 1.0 : min(_4184, 1.0));
    vec4 _905 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _910 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _921 = (((_910.x - _859) + (_910.w * _859)) * cbMtdParam._m0[3u].x) + _859;
    float _934 = (cbMtdParam._m0[3u].x * (((_902 * _793) - _902) + _905.x)) + _902;
    float _935 = (cbMtdParam._m0[3u].x * (((_903 * _793) - _903) + _905.y)) + _903;
    float _936 = (cbMtdParam._m0[3u].x * (((_904 * _793) - _904) + _905.z)) + _904;
    vec4 _937 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _950 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3((_859 * (_641 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625, (_859 * (_642 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625, (_859 * (_643 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * _937.z;
    float _954 = _950 * cbMatDynParam._m0[13u].w;
    float _964 = (_954 * (cbMatDynParam._m0[13u].x - _934)) + _934;
    float _965 = (_954 * (cbMatDynParam._m0[13u].y - _935)) + _935;
    float _966 = (_954 * (cbMatDynParam._m0[13u].z - _936)) + _936;
    float _974 = ((_950 * cbMatDynParam._m0[15u].w) * (cbMatDynParam._m0[15u].x - _921)) + _921;
    float _975 = 1.0 - _974;
    float _976 = _975 * _964;
    float _977 = _975 * _965;
    float _978 = _975 * _966;
    float _982 = (_964 + (-0.039999999105930328369140625)) * _974;
    float _983 = (_965 + (-0.039999999105930328369140625)) * _974;
    float _984 = (_966 + (-0.039999999105930328369140625)) * _974;
    float _985 = _982 + 0.039999999105930328369140625;
    float _986 = _983 + 0.039999999105930328369140625;
    float _987 = _984 + 0.039999999105930328369140625;
    vec4 _996 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _788, cbSceneParam._m0[86u].y * _789));
    float _999 = _996.x * TEXCOORD_4;
    float _1000 = _654 * 2.0;
    float _1004 = (_1000 * _625) - _651;
    float _1005 = (_1000 * _626) - _652;
    float _1006 = (_1000 * _627) - _653;
    float _1007 = abs(_736);
    float _4195 = isnan(0.0) ? _1007 : (isnan(_1007) ? 0.0 : max(_1007, 0.0));
    float _1009 = sqrt(_867);
    float _1020 = exp2((_1009 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4195 : (isnan(_4195) ? 1.0 : min(_4195, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1009 * 3.0));
    float _1026 = (1.0 - _1020) * ((_1009 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1027 = _1020 * _1009;
    float _1055 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1059 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1063 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1365;
    float _1367;
    float _1368;
    float _1369;
    float _1370;
    float _1371;
    float _1372;
    float _1373;
    float _1374;
    float _1375;
    float _1376;
    float _1377;
    float _1378;
    float _1379;
    float _1380;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1090 = fma(_1063, cbModelParam._m0[26u].z, fma(_1059, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1055));
        float _1094 = fma(_1063, cbModelParam._m0[27u].z, fma(_1059, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1055));
        float _1098 = fma(_1063, cbModelParam._m0[28u].z, fma(_1059, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1055));
        float _1123 = _1055 + _625;
        float _1124 = _1059 + _626;
        float _1125 = _1063 + _627;
        float _1135 = fma(_1125, cbModelParam._m0[26u].z, fma(_1124, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1123)) - _1090;
        float _1136 = fma(_1125, cbModelParam._m0[27u].z, fma(_1124, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1123)) - _1094;
        float _1137 = fma(_1125, cbModelParam._m0[28u].z, fma(_1124, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1123)) - _1098;
        float _1141 = inversesqrt(dot(vec3(_1135, _1136, _1137), vec3(_1135, _1136, _1137)));
        float _1154 = ((_1141 * _1135) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1090 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1155 = ((_1141 * _1136) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1094 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1156 = ((_1141 * _1137) / cbModelParam._m0[34u].z) + ((((((_1098 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1159 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1154, _1155, _1156), 0.0);
        vec4 _1166 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1154, _1155, _1156), 0.0);
        vec4 _1173 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1154, _1155, _1156), 0.0);
        vec4 _1180 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1154, _1155, _1156), 0.0);
        float _1193 = exp2((_1159.w + (-0.5)) * 20.0) * 2.0;
        float _1194 = _1193 * (_1159.x + (-0.5));
        float _1195 = _1193 * (_1159.y + (-0.5));
        float _1196 = _1193 * (_1159.z + (-0.5));
        float _1203 = exp2((_1166.w + (-0.5)) * 20.0) * 2.0;
        float _1204 = _1203 * (_1166.x + (-0.5));
        float _1205 = _1203 * (_1166.y + (-0.5));
        float _1206 = _1203 * (_1166.z + (-0.5));
        float _1213 = exp2((_1173.w + (-0.5)) * 20.0) * 2.0;
        float _1214 = _1213 * (_1173.x + (-0.5));
        float _1215 = _1213 * (_1173.y + (-0.5));
        float _1216 = _1213 * (_1173.z + (-0.5));
        float _1223 = exp2((_1180.w + (-0.5)) * 20.0) * 2.0;
        float _1224 = _1223 * (_1180.x + (-0.5));
        float _1225 = _1223 * (_1180.y + (-0.5));
        float _1226 = _1223 * (_1180.z + (-0.5));
        float _1227 = isnan(0.0) ? _1224 : (isnan(_1224) ? 0.0 : max(_1224, 0.0));
        float _1228 = isnan(0.0) ? _1225 : (isnan(_1225) ? 0.0 : max(_1225, 0.0));
        float _1229 = isnan(0.0) ? _1226 : (isnan(_1226) ? 0.0 : max(_1226, 0.0));
        float _1230 = _1194 * 0.5;
        float _1231 = _1204 * 0.5;
        float _1232 = _1214 * 0.5;
        float _1233 = dot(vec3(_1230, _1231, _1232), vec3(_1230, _1231, _1232));
        float _1238 = (_1233 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1233);
        float _1247 = (dot(vec3(_625, _626, _627), vec3(_1238 * _1230, _1238 * _1231, _1238 * _1232)) + 1.0) * 0.5;
        float _4221 = isnan(0.0) ? _1247 : (isnan(_1247) ? 0.0 : max(_1247, 0.0));
        float _1257 = sqrt(((_1231 * _1231) + (_1230 * _1230)) + (_1232 * _1232)) / (_1227 + 9.9999997473787516355514526367188e-06);
        float _4232 = isnan(0.0) ? _1257 : (isnan(_1257) ? 0.0 : max(_1257, 0.0));
        float _1258 = isnan(1.0) ? _4232 : (isnan(_4232) ? 1.0 : min(_4232, 1.0));
        float _1259 = _1258 * 2.0;
        float _1263 = (1.0 - _1258) / (_1258 + 1.0);
        float _4243 = isnan(0.0) ? _1263 : (isnan(_1263) ? 0.0 : max(_1263, 0.0));
        float _1264 = isnan(1.0) ? _4243 : (isnan(_4243) ? 1.0 : min(_4243, 1.0));
        float _1273 = ((((1.0 - _1264) * (_1259 + 2.0)) * exp2(log2(isnan(1.0) ? _4221 : (isnan(_4221) ? 1.0 : min(_4221, 1.0))) * (_1259 + 1.0))) + _1264) * _1227;
        float _1274 = _1195 * 0.5;
        float _1275 = _1205 * 0.5;
        float _1276 = _1215 * 0.5;
        float _1277 = dot(vec3(_1274, _1275, _1276), vec3(_1274, _1275, _1276));
        float _1282 = (_1277 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1277);
        float _1290 = (dot(vec3(_625, _626, _627), vec3(_1282 * _1274, _1282 * _1275, _1282 * _1276)) + 1.0) * 0.5;
        float _4254 = isnan(0.0) ? _1290 : (isnan(_1290) ? 0.0 : max(_1290, 0.0));
        float _1299 = sqrt(((_1275 * _1275) + (_1274 * _1274)) + (_1276 * _1276)) / (_1228 + 9.9999997473787516355514526367188e-06);
        float _4265 = isnan(0.0) ? _1299 : (isnan(_1299) ? 0.0 : max(_1299, 0.0));
        float _1300 = isnan(1.0) ? _4265 : (isnan(_4265) ? 1.0 : min(_4265, 1.0));
        float _1301 = _1300 * 2.0;
        float _1305 = (1.0 - _1300) / (_1300 + 1.0);
        float _4276 = isnan(0.0) ? _1305 : (isnan(_1305) ? 0.0 : max(_1305, 0.0));
        float _1306 = isnan(1.0) ? _4276 : (isnan(_4276) ? 1.0 : min(_4276, 1.0));
        float _1315 = ((((1.0 - _1306) * (_1301 + 2.0)) * exp2(log2(isnan(1.0) ? _4254 : (isnan(_4254) ? 1.0 : min(_4254, 1.0))) * (_1301 + 1.0))) + _1306) * _1228;
        float _1316 = _1196 * 0.5;
        float _1317 = _1206 * 0.5;
        float _1318 = _1216 * 0.5;
        float _1319 = dot(vec3(_1316, _1317, _1318), vec3(_1316, _1317, _1318));
        float _1324 = (_1319 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1319);
        float _1332 = (dot(vec3(_625, _626, _627), vec3(_1324 * _1316, _1324 * _1317, _1324 * _1318)) + 1.0) * 0.5;
        float _4287 = isnan(0.0) ? _1332 : (isnan(_1332) ? 0.0 : max(_1332, 0.0));
        float _1341 = sqrt(((_1317 * _1317) + (_1316 * _1316)) + (_1318 * _1318)) / (_1229 + 9.9999997473787516355514526367188e-06);
        float _4298 = isnan(0.0) ? _1341 : (isnan(_1341) ? 0.0 : max(_1341, 0.0));
        float _1342 = isnan(1.0) ? _4298 : (isnan(_4298) ? 1.0 : min(_4298, 1.0));
        float _1343 = _1342 * 2.0;
        float _1347 = (1.0 - _1342) / (_1342 + 1.0);
        float _4309 = isnan(0.0) ? _1347 : (isnan(_1347) ? 0.0 : max(_1347, 0.0));
        float _1348 = isnan(1.0) ? _4309 : (isnan(_4309) ? 1.0 : min(_4309, 1.0));
        float _1357 = ((((1.0 - _1348) * (_1343 + 2.0)) * exp2(log2(isnan(1.0) ? _4287 : (isnan(_4287) ? 1.0 : min(_4287, 1.0))) * (_1343 + 1.0))) + _1348) * _1229;
        _1365 = _1196;
        _1367 = _1195;
        _1368 = _1194;
        _1369 = _1206;
        _1370 = _1205;
        _1371 = _1204;
        _1372 = _1216;
        _1373 = _1215;
        _1374 = _1214;
        _1375 = _1229;
        _1376 = _1228;
        _1377 = _1227;
        _1378 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1273 : (isnan(_1273) ? 0.0 : max(_1273, 0.0)));
        _1379 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1315 : (isnan(_1315) ? 0.0 : max(_1315, 0.0)));
        _1380 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1357 : (isnan(_1357) ? 0.0 : max(_1357, 0.0)));
    }
    else
    {
        _1365 = _1366;
        _1367 = _1366;
        _1368 = _1366;
        _1369 = _1366;
        _1370 = _1366;
        _1371 = _1366;
        _1372 = _1366;
        _1373 = _1366;
        _1374 = _1366;
        _1375 = _1366;
        _1376 = _1366;
        _1377 = _1366;
        _1378 = 0.0;
        _1379 = 0.0;
        _1380 = 0.0;
    }
    float _1675;
    float _1676;
    float _1677;
    float _1678;
    float _1679;
    float _1680;
    float _1681;
    float _1682;
    float _1683;
    float _1684;
    float _1685;
    float _1686;
    float _1687;
    float _1688;
    float _1689;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1406 = fma(_1063, cbModelParam._m0[30u].z, fma(_1059, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1055));
        float _1410 = fma(_1063, cbModelParam._m0[31u].z, fma(_1059, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1055));
        float _1414 = fma(_1063, cbModelParam._m0[32u].z, fma(_1059, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1055));
        float _1437 = _1055 + _625;
        float _1438 = _1059 + _626;
        float _1439 = _1063 + _627;
        float _1449 = fma(_1439, cbModelParam._m0[30u].z, fma(_1438, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1437)) - _1406;
        float _1450 = fma(_1439, cbModelParam._m0[31u].z, fma(_1438, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1437)) - _1410;
        float _1451 = fma(_1439, cbModelParam._m0[32u].z, fma(_1438, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1437)) - _1414;
        float _1455 = inversesqrt(dot(vec3(_1449, _1450, _1451), vec3(_1449, _1450, _1451)));
        float _1468 = ((_1455 * _1449) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1406 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1469 = ((_1455 * _1450) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1410 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1470 = ((_1455 * _1451) / cbModelParam._m0[35u].z) + ((((((_1414 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1472 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1468, _1469, _1470), 0.0);
        vec4 _1479 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1468, _1469, _1470), 0.0);
        vec4 _1486 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1468, _1469, _1470), 0.0);
        vec4 _1493 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1468, _1469, _1470), 0.0);
        float _1505 = exp2((_1472.w + (-0.5)) * 20.0) * 2.0;
        float _1506 = _1505 * (_1472.x + (-0.5));
        float _1507 = _1505 * (_1472.y + (-0.5));
        float _1508 = _1505 * (_1472.z + (-0.5));
        float _1515 = exp2((_1479.w + (-0.5)) * 20.0) * 2.0;
        float _1516 = _1515 * (_1479.x + (-0.5));
        float _1517 = _1515 * (_1479.y + (-0.5));
        float _1518 = _1515 * (_1479.z + (-0.5));
        float _1525 = exp2((_1486.w + (-0.5)) * 20.0) * 2.0;
        float _1526 = _1525 * (_1486.x + (-0.5));
        float _1527 = _1525 * (_1486.y + (-0.5));
        float _1528 = _1525 * (_1486.z + (-0.5));
        float _1535 = exp2((_1493.w + (-0.5)) * 20.0) * 2.0;
        float _1536 = _1535 * (_1493.x + (-0.5));
        float _1537 = _1535 * (_1493.y + (-0.5));
        float _1538 = _1535 * (_1493.z + (-0.5));
        float _1539 = isnan(0.0) ? _1536 : (isnan(_1536) ? 0.0 : max(_1536, 0.0));
        float _1540 = isnan(0.0) ? _1537 : (isnan(_1537) ? 0.0 : max(_1537, 0.0));
        float _1541 = isnan(0.0) ? _1538 : (isnan(_1538) ? 0.0 : max(_1538, 0.0));
        float _1542 = _1506 * 0.5;
        float _1543 = _1516 * 0.5;
        float _1544 = _1526 * 0.5;
        float _1545 = dot(vec3(_1542, _1543, _1544), vec3(_1542, _1543, _1544));
        float _1550 = (_1545 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1545);
        float _1558 = (dot(vec3(_625, _626, _627), vec3(_1550 * _1542, _1550 * _1543, _1550 * _1544)) + 1.0) * 0.5;
        float _4350 = isnan(0.0) ? _1558 : (isnan(_1558) ? 0.0 : max(_1558, 0.0));
        float _1567 = sqrt(((_1543 * _1543) + (_1542 * _1542)) + (_1544 * _1544)) / (_1539 + 9.9999997473787516355514526367188e-06);
        float _4361 = isnan(0.0) ? _1567 : (isnan(_1567) ? 0.0 : max(_1567, 0.0));
        float _1568 = isnan(1.0) ? _4361 : (isnan(_4361) ? 1.0 : min(_4361, 1.0));
        float _1569 = _1568 * 2.0;
        float _1573 = (1.0 - _1568) / (_1568 + 1.0);
        float _4372 = isnan(0.0) ? _1573 : (isnan(_1573) ? 0.0 : max(_1573, 0.0));
        float _1574 = isnan(1.0) ? _4372 : (isnan(_4372) ? 1.0 : min(_4372, 1.0));
        float _1583 = ((((1.0 - _1574) * (_1569 + 2.0)) * exp2(log2(isnan(1.0) ? _4350 : (isnan(_4350) ? 1.0 : min(_4350, 1.0))) * (_1569 + 1.0))) + _1574) * _1539;
        float _1584 = _1507 * 0.5;
        float _1585 = _1517 * 0.5;
        float _1586 = _1527 * 0.5;
        float _1587 = dot(vec3(_1584, _1585, _1586), vec3(_1584, _1585, _1586));
        float _1592 = (_1587 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1587);
        float _1600 = (dot(vec3(_625, _626, _627), vec3(_1592 * _1584, _1592 * _1585, _1592 * _1586)) + 1.0) * 0.5;
        float _4383 = isnan(0.0) ? _1600 : (isnan(_1600) ? 0.0 : max(_1600, 0.0));
        float _1609 = sqrt(((_1585 * _1585) + (_1584 * _1584)) + (_1586 * _1586)) / (_1540 + 9.9999997473787516355514526367188e-06);
        float _4394 = isnan(0.0) ? _1609 : (isnan(_1609) ? 0.0 : max(_1609, 0.0));
        float _1610 = isnan(1.0) ? _4394 : (isnan(_4394) ? 1.0 : min(_4394, 1.0));
        float _1611 = _1610 * 2.0;
        float _1615 = (1.0 - _1610) / (_1610 + 1.0);
        float _4405 = isnan(0.0) ? _1615 : (isnan(_1615) ? 0.0 : max(_1615, 0.0));
        float _1616 = isnan(1.0) ? _4405 : (isnan(_4405) ? 1.0 : min(_4405, 1.0));
        float _1625 = ((((1.0 - _1616) * (_1611 + 2.0)) * exp2(log2(isnan(1.0) ? _4383 : (isnan(_4383) ? 1.0 : min(_4383, 1.0))) * (_1611 + 1.0))) + _1616) * _1540;
        float _1626 = _1508 * 0.5;
        float _1627 = _1518 * 0.5;
        float _1628 = _1528 * 0.5;
        float _1629 = dot(vec3(_1626, _1627, _1628), vec3(_1626, _1627, _1628));
        float _1634 = (_1629 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1629);
        float _1642 = (dot(vec3(_625, _626, _627), vec3(_1634 * _1626, _1634 * _1627, _1634 * _1628)) + 1.0) * 0.5;
        float _4416 = isnan(0.0) ? _1642 : (isnan(_1642) ? 0.0 : max(_1642, 0.0));
        float _1651 = sqrt(((_1627 * _1627) + (_1626 * _1626)) + (_1628 * _1628)) / (_1541 + 9.9999997473787516355514526367188e-06);
        float _4427 = isnan(0.0) ? _1651 : (isnan(_1651) ? 0.0 : max(_1651, 0.0));
        float _1652 = isnan(1.0) ? _4427 : (isnan(_4427) ? 1.0 : min(_4427, 1.0));
        float _1653 = _1652 * 2.0;
        float _1657 = (1.0 - _1652) / (_1652 + 1.0);
        float _4438 = isnan(0.0) ? _1657 : (isnan(_1657) ? 0.0 : max(_1657, 0.0));
        float _1658 = isnan(1.0) ? _4438 : (isnan(_4438) ? 1.0 : min(_4438, 1.0));
        float _1667 = ((((1.0 - _1658) * (_1653 + 2.0)) * exp2(log2(isnan(1.0) ? _4416 : (isnan(_4416) ? 1.0 : min(_4416, 1.0))) * (_1653 + 1.0))) + _1658) * _1541;
        _1675 = _1508;
        _1676 = _1507;
        _1677 = _1506;
        _1678 = _1518;
        _1679 = _1517;
        _1680 = _1516;
        _1681 = _1528;
        _1682 = _1527;
        _1683 = _1526;
        _1684 = _1541;
        _1685 = _1540;
        _1686 = _1539;
        _1687 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1583 : (isnan(_1583) ? 0.0 : max(_1583, 0.0)));
        _1688 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1625 : (isnan(_1625) ? 0.0 : max(_1625, 0.0)));
        _1689 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1667 : (isnan(_1667) ? 0.0 : max(_1667, 0.0)));
    }
    else
    {
        _1675 = _1366;
        _1676 = _1366;
        _1677 = _1366;
        _1678 = _1366;
        _1679 = _1366;
        _1680 = _1366;
        _1681 = _1366;
        _1682 = _1366;
        _1683 = _1366;
        _1684 = _1366;
        _1685 = _1366;
        _1686 = _1366;
        _1687 = 0.0;
        _1688 = 0.0;
        _1689 = 0.0;
    }
    float _1699 = (cbModelParam._m0[1u].x * (_1687 - _1378)) + _1378;
    float _1700 = (cbModelParam._m0[1u].x * (_1688 - _1379)) + _1379;
    float _1701 = (cbModelParam._m0[1u].x * (_1689 - _1380)) + _1380;
    float _1722 = fma(_1701, cbSceneParam._m0[89u].z, fma(_1700, cbSceneParam._m0[89u].y, _1699 * cbSceneParam._m0[89u].x));
    float _1725 = fma(_1701, cbSceneParam._m0[90u].z, fma(_1700, cbSceneParam._m0[90u].y, _1699 * cbSceneParam._m0[90u].x));
    float _1728 = fma(_1701, cbSceneParam._m0[91u].z, fma(_1700, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1699));
    float _1743 = _1004 * 0.5;
    float _1744 = _1005 * 0.5;
    float _1745 = _1006 * 0.5;
    float _1746 = dot(vec4(_1743, _1744, _1745, 1.0), vec4(_1677, _1680, _1683, _1686));
    float _1749 = dot(vec4(_1743, _1744, _1745, 1.0), vec4(_1676, _1679, _1682, _1685));
    float _1752 = dot(vec4(_1743, _1744, _1745, 1.0), vec4(_1675, _1678, _1681, _1684));
    float _1783;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1759 = dot(vec4(_1743, _1744, _1745, 1.0), vec4(_1365, _1369, _1372, _1375));
        float _1763 = dot(vec4(_1743, _1744, _1745, 1.0), vec4(_1367, _1370, _1373, _1376));
        float _1767 = dot(vec4(_1743, _1744, _1745, 1.0), vec4(_1368, _1371, _1374, _1377));
        float _1774 = dot(vec4(cbModelParam._m0[39u]), vec4(_1743, _1744, _1745, 1.0));
        _1783 = dot(vec3(isnan(0.0) ? _1767 : (isnan(_1767) ? 0.0 : max(_1767, 0.0)), isnan(0.0) ? _1763 : (isnan(_1763) ? 0.0 : max(_1763, 0.0)), isnan(0.0) ? _1759 : (isnan(_1759) ? 0.0 : max(_1759, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1774) ? 0.0 : (isnan(0.0) ? _1774 : max(0.0, _1774))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1783 = 1.0;
    }
    float _1794;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1785 = dot(vec4(cbModelParam._m0[40u]), vec4(_1743, _1744, _1745, 1.0));
        _1794 = dot(vec3(isnan(0.0) ? _1746 : (isnan(_1746) ? 0.0 : max(_1746, 0.0)), isnan(0.0) ? _1749 : (isnan(_1749) ? 0.0 : max(_1749, 0.0)), isnan(0.0) ? _1752 : (isnan(_1752) ? 0.0 : max(_1752, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1785) ? 0.0 : (isnan(0.0) ? _1785 : max(0.0, _1785))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1794 = 1.0;
    }
    float _1798 = (_1794 * cbModelParam._m0[1u].x) + (_1783 * (1.0 - cbModelParam._m0[1u].x));
    float _1808 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _867);
    float _1809 = isnan(_1808) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1808 : min(cbModelParam._m0[25u].z, _1808));
    float _1889;
    float _1891;
    float _1893;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1856 = fma(_1063, cbModelParam._m0[13u].z, fma(_1059, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1055)) + cbModelParam._m0[13u].w;
        float _1860 = fma(_1063, cbModelParam._m0[14u].z, fma(_1059, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1055)) + cbModelParam._m0[14u].w;
        float _1864 = fma(_1063, cbModelParam._m0[15u].z, fma(_1059, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1055)) + cbModelParam._m0[15u].w;
        float _1867 = fma(_1006, cbModelParam._m0[13u].z, fma(_1005, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1004));
        float _1870 = fma(_1006, cbModelParam._m0[14u].z, fma(_1005, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1004));
        float _1873 = fma(_1006, cbModelParam._m0[15u].z, fma(_1005, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1004));
        float _1901;
        if (_1867 > 0.0)
        {
            _1901 = abs((1.0 - _1856) / _1867);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1867 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1856 + 1.0) / _1867);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1901 = frontier_phi_16_14_ladder;
        }
        float _2074;
        if (_1870 > 0.0)
        {
            _2074 = abs((1.0 - _1860) / _1870);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1870 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1860 + 1.0) / _1870);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2074 = frontier_phi_25_21_ladder;
        }
        float _2369;
        if (_1873 > 0.0)
        {
            _2369 = abs((1.0 - _1864) / _1873);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1873 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1864 + 1.0) / _1873);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2369 = frontier_phi_37_32_ladder;
        }
        float _2371 = isnan(_2074) ? _1901 : (isnan(_1901) ? _2074 : min(_1901, _2074));
        float _2372 = isnan(_2369) ? _2371 : (isnan(_2371) ? _2369 : min(_2371, _2369));
        float _2376 = (_2372 * _1867) + _1856;
        float _2377 = (_2372 * _1870) + _1860;
        float _2378 = (_2372 * _1873) + _1864;
        float _2379 = _2372 * 9.9999997473787516355514526367188e-05;
        float _2381 = (-1.0) - _2379;
        float _2383 = _2379 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_2378 > _2383) || ((_2378 < _2381) || ((_2377 > _2383) || ((_2377 < _2381) || ((_2376 < _2381) || (_2376 > _2383))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2523 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2378, cbModelParam._m0[9u].z, fma(_2377, cbModelParam._m0[9u].y, _2376 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2378, cbModelParam._m0[10u].z, fma(_2377, cbModelParam._m0[10u].y, _2376 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2378, cbModelParam._m0[11u].z, fma(_2377, cbModelParam._m0[11u].y, _2376 * cbModelParam._m0[11u].x))), _1809);
            frontier_phi_15_37_ladder = _2523.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2523.x * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2523.z * cbModelParam._m0[1u].y;
        }
        _1889 = frontier_phi_15_37_ladder_1;
        _1891 = frontier_phi_15_37_ladder;
        _1893 = frontier_phi_15_37_ladder_2;
    }
    else
    {
        vec4 _1877 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1004, _1005, _1006), _1809);
        _1889 = _1877.x * cbModelParam._m0[1u].y;
        _1891 = _1877.y * cbModelParam._m0[1u].y;
        _1893 = _1877.z * cbModelParam._m0[1u].y;
    }
    float _1897 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _867);
    float _1898 = isnan(_1897) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1897 : min(cbModelParam._m0[25u].w, _1897));
    float _1989;
    float _1991;
    float _1993;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1953 = fma(_1063, cbModelParam._m0[21u].z, fma(_1059, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1055)) + cbModelParam._m0[21u].w;
        float _1957 = fma(_1063, cbModelParam._m0[22u].z, fma(_1059, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1055)) + cbModelParam._m0[22u].w;
        float _1961 = fma(_1063, cbModelParam._m0[23u].z, fma(_1059, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1055)) + cbModelParam._m0[23u].w;
        float _1964 = fma(_1006, cbModelParam._m0[21u].z, fma(_1005, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1004));
        float _1967 = fma(_1006, cbModelParam._m0[22u].z, fma(_1005, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1004));
        float _1970 = fma(_1006, cbModelParam._m0[23u].z, fma(_1005, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1004));
        float _2079;
        if (_1964 > 0.0)
        {
            _2079 = abs((1.0 - _1953) / _1964);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1964 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1953 + 1.0) / _1964);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _2079 = frontier_phi_27_23_ladder;
        }
        float _2396;
        if (_1967 > 0.0)
        {
            _2396 = abs((1.0 - _1957) / _1967);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1967 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1957 + 1.0) / _1967);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _2396 = frontier_phi_39_34_ladder;
        }
        float _2734;
        if (_1970 > 0.0)
        {
            _2734 = abs((1.0 - _1961) / _1970);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1970 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1961 + 1.0) / _1970);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2734 = frontier_phi_49_46_ladder;
        }
        float _2736 = isnan(_2396) ? _2079 : (isnan(_2079) ? _2396 : min(_2079, _2396));
        float _2737 = isnan(_2734) ? _2736 : (isnan(_2736) ? _2734 : min(_2736, _2734));
        float _2741 = (_2737 * _1964) + _1953;
        float _2742 = (_2737 * _1967) + _1957;
        float _2743 = (_2737 * _1970) + _1961;
        float _2744 = _2737 * 9.9999997473787516355514526367188e-05;
        float _2745 = (-1.0) - _2744;
        float _2747 = _2744 + 1.0;
        float frontier_phi_24_49_ladder;
        float frontier_phi_24_49_ladder_1;
        float frontier_phi_24_49_ladder_2;
        if ((_2743 > _2747) || ((_2743 < _2745) || ((_2742 > _2747) || ((_2742 < _2745) || ((_2741 < _2745) || (_2741 > _2747))))))
        {
            frontier_phi_24_49_ladder = 0.0;
            frontier_phi_24_49_ladder_1 = 0.0;
            frontier_phi_24_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2865 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2743, cbModelParam._m0[17u].z, fma(_2742, cbModelParam._m0[17u].y, _2741 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2743, cbModelParam._m0[18u].z, fma(_2742, cbModelParam._m0[18u].y, _2741 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2743, cbModelParam._m0[19u].z, fma(_2742, cbModelParam._m0[19u].y, _2741 * cbModelParam._m0[19u].x))), _1898);
            frontier_phi_24_49_ladder = _2865.z * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_1 = _2865.y * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_2 = _2865.x * cbModelParam._m0[1u].z;
        }
        _1989 = frontier_phi_24_49_ladder_2;
        _1991 = frontier_phi_24_49_ladder_1;
        _1993 = frontier_phi_24_49_ladder;
    }
    else
    {
        vec4 _1973 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1004, _1005, _1006), _1898);
        _1989 = _1973.x * cbModelParam._m0[1u].z;
        _1991 = _1973.y * cbModelParam._m0[1u].z;
        _1993 = _1973.z * cbModelParam._m0[1u].z;
    }
    float _2006 = (((_1026 * _985) + _1027) * _999) * ((cbModelParam._m0[1u].w * (_1989 - _1889)) + _1889);
    float _2008 = (((_1026 * _986) + _1027) * _999) * ((cbModelParam._m0[1u].w * (_1991 - _1891)) + _1891);
    float _2010 = (((_1026 * _987) + _1027) * _999) * ((cbModelParam._m0[1u].w * (_1993 - _1893)) + _1893);
    float _2013 = fma(_2010, cbSceneParam._m0[89u].z, fma(_2008, cbSceneParam._m0[89u].y, _2006 * cbSceneParam._m0[89u].x));
    float _2016 = fma(_2010, cbSceneParam._m0[90u].z, fma(_2008, cbSceneParam._m0[90u].y, _2006 * cbSceneParam._m0[90u].x));
    float _2019 = fma(_2010, cbSceneParam._m0[91u].z, fma(_2008, cbSceneParam._m0[91u].y, _2006 * cbSceneParam._m0[91u].x));
    float _2053 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2057 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2061 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2065 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2066 = _2053 / _2065;
    float _2067 = _2057 / _2065;
    float _2068 = _2061 / _2065;
    float _2215;
    float _2216;
    float _2217;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2095 = ((uint(_2068 > cbSceneParam._m0[59u].y) + uint(_2068 > cbSceneParam._m0[59u].x)) + uint(_2068 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2096 = _2095 + 43u;
        uint _2104 = _2095 + 44u;
        uint _2112 = _2095 + 45u;
        uint _2120 = _2095 + 46u;
        float _2131 = fma(_2065, cbSceneParam._m0[_2096].w, fma(_2061, cbSceneParam._m0[_2096].z, fma(_2057, cbSceneParam._m0[_2096].y, _2053 * cbSceneParam._m0[_2096].x)));
        float _2135 = fma(_2065, cbSceneParam._m0[_2104].w, fma(_2061, cbSceneParam._m0[_2104].z, fma(_2057, cbSceneParam._m0[_2104].y, _2053 * cbSceneParam._m0[_2104].x)));
        float _2143 = fma(_2065, cbSceneParam._m0[_2120].w, fma(_2061, cbSceneParam._m0[_2120].z, fma(_2057, cbSceneParam._m0[_2120].y, _2053 * cbSceneParam._m0[_2120].x)));
        float _2148 = cbSceneParam._m0[33u].z * _2143;
        float _2150 = cbSceneParam._m0[33u].w * _2143;
        float _2153 = fma(_2065, cbSceneParam._m0[_2112].w, fma(_2061, cbSceneParam._m0[_2112].z, fma(_2057, cbSceneParam._m0[_2112].y, _2053 * cbSceneParam._m0[_2112].x))) / _2143;
        float _2201 = (cbSceneParam._m0[33u].x - sqrt(((_2067 * _2067) + (_2066 * _2066)) + (_2068 * _2068))) * cbSceneParam._m0[33u].y;
        float _4564 = isnan(0.0) ? _2201 : (isnan(_2201) ? 0.0 : max(_2201, 0.0));
        float _2208 = (isnan(1.0) ? _4564 : (isnan(_4564) ? 1.0 : min(_4564, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2148 + _2131) / _2143, (_2150 + _2135) / _2143), _2153), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2150 + _2131) / _2143, (_2135 - _2148) / _2143), _2153), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2131 - _2148) / _2143, (_2135 - _2150) / _2143), _2153), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2131 - _2150) / _2143, (_2148 + _2135) / _2143), _2153), 0.0)).x), vec4(0.25)));
        _2215 = 1.0 - (_2208 * cbSceneParam._m0[34u].x);
        _2216 = 1.0 - (_2208 * cbSceneParam._m0[34u].y);
        _2217 = 1.0 - (_2208 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2215 = 1.0;
        _2216 = 1.0;
        _2217 = 1.0;
    }
    float _2281;
    float _2283;
    float _2285;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2269 = fma(_2065, cbSceneParam._m0[63u].w, fma(_2061, cbSceneParam._m0[63u].z, fma(_2057, cbSceneParam._m0[63u].y, _2053 * cbSceneParam._m0[63u].x)));
        float _2270 = fma(_2065, cbSceneParam._m0[60u].w, fma(_2061, cbSceneParam._m0[60u].z, fma(_2057, cbSceneParam._m0[60u].y, _2053 * cbSceneParam._m0[60u].x))) / _2269;
        float _2271 = fma(_2065, cbSceneParam._m0[61u].w, fma(_2061, cbSceneParam._m0[61u].z, fma(_2057, cbSceneParam._m0[61u].y, _2053 * cbSceneParam._m0[61u].x))) / _2269;
        float frontier_phi_36_35_ladder;
        float frontier_phi_36_35_ladder_1;
        float frontier_phi_36_35_ladder_2;
        if ((((_2270 >= cbSceneParam._m0[64u].x) && (_2271 >= cbSceneParam._m0[64u].y)) && (_2270 <= cbSceneParam._m0[64u].z)) && (_2271 <= cbSceneParam._m0[64u].w))
        {
            float _2409 = fma(_2065, cbSceneParam._m0[62u].w, fma(_2061, cbSceneParam._m0[62u].z, fma(_2057, cbSceneParam._m0[62u].y, _2053 * cbSceneParam._m0[62u].x))) / _2269;
            float _2413 = isnan(cbSceneParam._m0[41u].w) ? _2409 : (isnan(_2409) ? cbSceneParam._m0[41u].w : max(_2409, cbSceneParam._m0[41u].w));
            float _2456 = (cbSceneParam._m0[33u].x - sqrt(((_2067 * _2067) + (_2066 * _2066)) + (_2068 * _2068))) * cbSceneParam._m0[33u].y;
            float _4580 = isnan(0.0) ? _2456 : (isnan(_2456) ? 0.0 : max(_2456, 0.0));
            float _2463 = (isnan(1.0) ? _4580 : (isnan(_4580) ? 1.0 : min(_4580, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2270, cbSceneParam._m0[33u].w + _2271), _2413), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2270, _2271 - cbSceneParam._m0[33u].z), _2413), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2270 - cbSceneParam._m0[33u].z, _2271 - cbSceneParam._m0[33u].w), _2413), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2270 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2271), _2413), 0.0)).x), vec4(0.25)));
            float _2467 = 1.0 - (_2463 * cbSceneParam._m0[34u].x);
            float _2468 = 1.0 - (_2463 * cbSceneParam._m0[34u].y);
            float _2469 = 1.0 - (_2463 * cbSceneParam._m0[34u].z);
            frontier_phi_36_35_ladder = isnan(_2468) ? _2216 : (isnan(_2216) ? _2468 : min(_2216, _2468));
            frontier_phi_36_35_ladder_1 = isnan(_2469) ? _2217 : (isnan(_2217) ? _2469 : min(_2217, _2469));
            frontier_phi_36_35_ladder_2 = isnan(_2467) ? _2215 : (isnan(_2215) ? _2467 : min(_2215, _2467));
        }
        else
        {
            frontier_phi_36_35_ladder = _2216;
            frontier_phi_36_35_ladder_1 = _2217;
            frontier_phi_36_35_ladder_2 = _2215;
        }
        _2281 = frontier_phi_36_35_ladder_2;
        _2283 = frontier_phi_36_35_ladder;
        _2285 = frontier_phi_36_35_ladder_1;
    }
    else
    {
        _2281 = _2215;
        _2283 = _2216;
        _2285 = _2217;
    }
    uvec4 _2290 = floatBitsToUint(cbInstanceData._m0[_891 + 5u]);
    uint _2292 = _2290.x * 14u;
    uint _2293 = _2292 + 13u;
    float _2300 = _999 + (-1.0);
    float _2305 = (cbLight._m0[_2293].x * _2300) + 1.0;
    float _2306 = (cbLight._m0[_2293].y * _2300) + 1.0;
    float _2307 = (cbLight._m0[_2293].z * _2300) + 1.0;
    float _2308 = (cbLight._m0[_2293].w * _2300) + 1.0;
    uint _2309 = _2292 + 5u;
    float _2315 = isnan(1.0) ? _2306 : (isnan(_2306) ? 1.0 : min(_2306, 1.0));
    uint _2319 = _2292 + 4u;
    float _2328 = isnan(1.0) ? _2305 : (isnan(_2305) ? 1.0 : min(_2305, 1.0));
    uint _2332 = _2292 | 1u;
    float _2343 = dot(vec3(cbLight._m0[_2292].xyz), vec3(_625, _626, _627));
    float _2346 = dot(vec3(cbLight._m0[_2332].xyz), vec3(_625, _626, _627));
    float _4616 = isnan(0.0) ? _2343 : (isnan(_2343) ? 0.0 : max(_2343, 0.0));
    float _4627 = isnan(0.0) ? _2346 : (isnan(_2346) ? 0.0 : max(_2346, 0.0));
    float _2351 = (isnan(1.0) ? _4616 : (isnan(_4616) ? 1.0 : min(_4616, 1.0))) * 0.3183098733425140380859375;
    float _2353 = (isnan(1.0) ? _4627 : (isnan(_4627) ? 1.0 : min(_4627, 1.0))) * 0.3183098733425140380859375;
    float _2360 = ((cbLight._m0[_2309].x * _2315) * _2353) + (((cbLight._m0[_2319].x * _2281) * _2328) * _2351);
    float _2361 = ((_2315 * cbLight._m0[_2309].y) * _2353) + (((cbLight._m0[_2319].y * _2283) * _2328) * _2351);
    float _2362 = ((_2315 * cbLight._m0[_2309].z) * _2353) + (((cbLight._m0[_2319].z * _2285) * _2328) * _2351);
    uvec4 _2366 = floatBitsToUint(cbLight._m0[_2292 + 12u]);
    bool _2368 = _2366.x == 0u;
    float _2470;
    float _2472;
    float _2474;
    if (_2368)
    {
        _2470 = _2360;
        _2472 = _2361;
        _2474 = _2362;
    }
    else
    {
        uint _2478 = _2292 + 6u;
        float _2494 = (dot(vec3(cbLight._m0[_2292 + 2u].xyz), vec3(_625, _626, _627)) * 0.5) + 0.5;
        float _2495 = _2494 * _2494;
        float _4638 = isnan(0.0) ? _2495 : (isnan(_2495) ? 0.0 : max(_2495, 0.0));
        float _2496 = isnan(1.0) ? _4638 : (isnan(_4638) ? 1.0 : min(_4638, 1.0));
        float _2497 = isnan(1.0) ? _2307 : (isnan(_2307) ? 1.0 : min(_2307, 1.0));
        _2470 = (((cbLight._m0[_2478].x * 0.3183098733425140380859375) * _2496) * _2497) + _2360;
        _2472 = (((cbLight._m0[_2478].y * 0.3183098733425140380859375) * _2496) * _2497) + _2361;
        _2474 = (((cbLight._m0[_2478].z * 0.3183098733425140380859375) * _2496) * _2497) + _2362;
    }
    bool _2477 = _2366.y == 0u;
    float _2532;
    float _2534;
    float _2536;
    if (_2477)
    {
        _2532 = _2470;
        _2534 = _2472;
        _2536 = _2474;
    }
    else
    {
        uint _2705 = _2292 + 7u;
        float _2721 = (dot(vec3(cbLight._m0[_2292 + 3u].xyz), vec3(_625, _626, _627)) * 0.5) + 0.5;
        float _2722 = _2721 * _2721;
        float _4654 = isnan(0.0) ? _2722 : (isnan(_2722) ? 0.0 : max(_2722, 0.0));
        float _2723 = isnan(1.0) ? _4654 : (isnan(_4654) ? 1.0 : min(_4654, 1.0));
        float _2724 = isnan(1.0) ? _2308 : (isnan(_2308) ? 1.0 : min(_2308, 1.0));
        _2532 = (((cbLight._m0[_2705].x * 0.3183098733425140380859375) * _2723) * _2724) + _2470;
        _2534 = (((cbLight._m0[_2705].y * 0.3183098733425140380859375) * _2723) * _2724) + _2472;
        _2536 = (((cbLight._m0[_2705].z * 0.3183098733425140380859375) * _2723) * _2724) + _2474;
    }
    uint _2539 = _2292 + 8u;
    float _2552 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2292].w)) * _867) * 0.949999988079071044921875);
    float _2553 = _2552 * _2552;
    float _2554 = cbLight._m0[_2292].x + _651;
    float _2555 = cbLight._m0[_2292].y + _652;
    float _2556 = cbLight._m0[_2292].z + _653;
    float _2560 = inversesqrt(dot(vec3(_2554, _2555, _2556), vec3(_2554, _2555, _2556)));
    float _2561 = _2560 * _2554;
    float _2562 = _2560 * _2555;
    float _2563 = _2560 * _2556;
    float _2564 = dot(vec3(_625, _626, _627), vec3(cbLight._m0[_2292].xyz));
    float _4670 = isnan(0.0) ? _2564 : (isnan(_2564) ? 0.0 : max(_2564, 0.0));
    float _2567 = isnan(1.0) ? _4670 : (isnan(_4670) ? 1.0 : min(_4670, 1.0));
    float _4681 = isnan(0.0) ? _654 : (isnan(_654) ? 0.0 : max(_654, 0.0));
    float _2568 = isnan(1.0) ? _4681 : (isnan(_4681) ? 1.0 : min(_4681, 1.0));
    float _2569 = dot(vec3(_625, _626, _627), vec3(_2561, _2562, _2563));
    float _4692 = isnan(0.0) ? _2569 : (isnan(_2569) ? 0.0 : max(_2569, 0.0));
    float _2572 = isnan(1.0) ? _4692 : (isnan(_4692) ? 1.0 : min(_4692, 1.0));
    float _2573 = dot(vec3(cbLight._m0[_2292].xyz), vec3(_2561, _2562, _2563));
    float _4703 = isnan(0.0) ? _2573 : (isnan(_2573) ? 0.0 : max(_2573, 0.0));
    float _2577 = _2553 * _2553;
    float _2581 = ((_2572 * _2572) * (_2577 + (-1.0))) + 1.0;
    float _2589 = exp2(log2(1.0 - (isnan(1.0) ? _4703 : (isnan(_4703) ? 1.0 : min(_4703, 1.0)))) * 5.0);
    float _2590 = 0.959999978542327880859375 - _982;
    float _2592 = 0.959999978542327880859375 - _983;
    float _2593 = 0.959999978542327880859375 - _984;
    float _2600 = 1.0 - _2553;
    float _2611 = (0.5 / (((_2568 * ((_2567 * _2600) + _2553)) + 9.9999999392252902907785028219223e-09) + (((_2568 * _2600) + _2553) * _2567))) * _2567;
    float _4714 = isnan(0.0) ? _2611 : (isnan(_2611) ? 0.0 : max(_2611, 0.0));
    float _2613 = (isnan(1.0) ? _4714 : (isnan(_4714) ? 1.0 : min(_4714, 1.0))) * (_2577 / ((_2581 * _2581) * 3.141590118408203125));
    uint _2627 = _2292 + 9u;
    float _2638 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2332].w)) * _867) * 0.949999988079071044921875);
    float _2639 = _2638 * _2638;
    float _2640 = cbLight._m0[_2332].x + _651;
    float _2641 = cbLight._m0[_2332].y + _652;
    float _2642 = cbLight._m0[_2332].z + _653;
    float _2646 = inversesqrt(dot(vec3(_2640, _2641, _2642), vec3(_2640, _2641, _2642)));
    float _2647 = _2646 * _2640;
    float _2648 = _2646 * _2641;
    float _2649 = _2646 * _2642;
    float _2650 = dot(vec3(_625, _626, _627), vec3(cbLight._m0[_2332].xyz));
    float _4725 = isnan(0.0) ? _2650 : (isnan(_2650) ? 0.0 : max(_2650, 0.0));
    float _2653 = isnan(1.0) ? _4725 : (isnan(_4725) ? 1.0 : min(_4725, 1.0));
    float _2654 = dot(vec3(_625, _626, _627), vec3(_2647, _2648, _2649));
    float _4736 = isnan(0.0) ? _2654 : (isnan(_2654) ? 0.0 : max(_2654, 0.0));
    float _2657 = isnan(1.0) ? _4736 : (isnan(_4736) ? 1.0 : min(_4736, 1.0));
    float _2658 = dot(vec3(cbLight._m0[_2332].xyz), vec3(_2647, _2648, _2649));
    float _4747 = isnan(0.0) ? _2658 : (isnan(_2658) ? 0.0 : max(_2658, 0.0));
    float _2662 = _2639 * _2639;
    float _2666 = ((_2657 * _2657) * (_2662 + (-1.0))) + 1.0;
    float _2673 = exp2(log2(1.0 - (isnan(1.0) ? _4747 : (isnan(_4747) ? 1.0 : min(_4747, 1.0)))) * 5.0);
    float _2680 = 1.0 - _2639;
    float _2690 = (0.5 / (((_2568 * ((_2653 * _2680) + _2639)) + 9.9999999392252902907785028219223e-09) + (((_2568 * _2680) + _2639) * _2653))) * _2653;
    float _4758 = isnan(0.0) ? _2690 : (isnan(_2690) ? 0.0 : max(_2690, 0.0));
    float _2692 = (isnan(1.0) ? _4758 : (isnan(_4758) ? 1.0 : min(_4758, 1.0))) * (_2662 / ((_2666 * _2666) * 3.141590118408203125));
    float _2702 = (((((_2673 * _2590) + _985) * cbLight._m0[_2627].x) * _2692) * _2315) + ((((cbLight._m0[_2539].x * _2281) * ((_2589 * _2590) + _985)) * _2613) * _2328);
    float _2703 = (((((_2673 * _2592) + _986) * cbLight._m0[_2627].y) * _2692) * _2315) + ((((cbLight._m0[_2539].y * _2283) * ((_2589 * _2592) + _986)) * _2613) * _2328);
    float _2704 = (((((_2673 * _2593) + _987) * cbLight._m0[_2627].z) * _2692) * _2315) + ((((cbLight._m0[_2539].z * _2285) * ((_2589 * _2593) + _987)) * _2613) * _2328);
    float _2760;
    float _2762;
    float _2764;
    if (_2368)
    {
        _2760 = _2702;
        _2762 = _2703;
        _2764 = _2704;
    }
    else
    {
        uint _2766 = _2292 + 2u;
        uint _2770 = _2292 + 10u;
        float _2784 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2766].w)) * _867) * 0.949999988079071044921875);
        float _2785 = _2784 * _2784;
        float _2786 = cbLight._m0[_2766].x + _651;
        float _2787 = cbLight._m0[_2766].y + _652;
        float _2788 = cbLight._m0[_2766].z + _653;
        float _2792 = inversesqrt(dot(vec3(_2786, _2787, _2788), vec3(_2786, _2787, _2788)));
        float _2793 = _2792 * _2786;
        float _2794 = _2792 * _2787;
        float _2795 = _2792 * _2788;
        float _2796 = dot(vec3(_625, _626, _627), vec3(cbLight._m0[_2766].xyz));
        float _4769 = isnan(0.0) ? _2796 : (isnan(_2796) ? 0.0 : max(_2796, 0.0));
        float _2799 = isnan(1.0) ? _4769 : (isnan(_4769) ? 1.0 : min(_4769, 1.0));
        float _2800 = dot(vec3(_625, _626, _627), vec3(_2793, _2794, _2795));
        float _4780 = isnan(0.0) ? _2800 : (isnan(_2800) ? 0.0 : max(_2800, 0.0));
        float _2803 = isnan(1.0) ? _4780 : (isnan(_4780) ? 1.0 : min(_4780, 1.0));
        float _2804 = dot(vec3(cbLight._m0[_2766].xyz), vec3(_2793, _2794, _2795));
        float _4791 = isnan(0.0) ? _2804 : (isnan(_2804) ? 0.0 : max(_2804, 0.0));
        float _2808 = _2785 * _2785;
        float _2812 = ((_2803 * _2803) * (_2808 + (-1.0))) + 1.0;
        float _2819 = exp2(log2(1.0 - (isnan(1.0) ? _4791 : (isnan(_4791) ? 1.0 : min(_4791, 1.0)))) * 5.0);
        float _2826 = 1.0 - _2785;
        float _2836 = (0.5 / (((_2568 * ((_2799 * _2826) + _2785)) + 9.9999999392252902907785028219223e-09) + (((_2568 * _2826) + _2785) * _2799))) * _2799;
        float _4802 = isnan(0.0) ? _2836 : (isnan(_2836) ? 0.0 : max(_2836, 0.0));
        float _2838 = (isnan(1.0) ? _4802 : (isnan(_4802) ? 1.0 : min(_4802, 1.0))) * (_2808 / ((_2812 * _2812) * 3.141590118408203125));
        float _2839 = isnan(1.0) ? _2307 : (isnan(_2307) ? 1.0 : min(_2307, 1.0));
        _2760 = (((((_2819 * _2590) + _985) * cbLight._m0[_2770].x) * _2838) * _2839) + _2702;
        _2762 = (((((_2819 * _2592) + _986) * cbLight._m0[_2770].y) * _2838) * _2839) + _2703;
        _2764 = (((((_2819 * _2593) + _987) * cbLight._m0[_2770].z) * _2838) * _2839) + _2704;
    }
    float _2870;
    float _2872;
    float _2874;
    if (_2477)
    {
        _2870 = _2760;
        _2872 = _2762;
        _2874 = _2764;
    }
    else
    {
        uint _2881 = _2292 + 3u;
        uint _2885 = _2292 + 11u;
        float _2899 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2881].w)) * _867) * 0.949999988079071044921875);
        float _2900 = _2899 * _2899;
        float _2901 = cbLight._m0[_2881].x + _651;
        float _2902 = cbLight._m0[_2881].y + _652;
        float _2903 = cbLight._m0[_2881].z + _653;
        float _2907 = inversesqrt(dot(vec3(_2901, _2902, _2903), vec3(_2901, _2902, _2903)));
        float _2908 = _2907 * _2901;
        float _2909 = _2907 * _2902;
        float _2910 = _2907 * _2903;
        float _2911 = dot(vec3(_625, _626, _627), vec3(cbLight._m0[_2881].xyz));
        float _4818 = isnan(0.0) ? _2911 : (isnan(_2911) ? 0.0 : max(_2911, 0.0));
        float _2914 = isnan(1.0) ? _4818 : (isnan(_4818) ? 1.0 : min(_4818, 1.0));
        float _2915 = dot(vec3(_625, _626, _627), vec3(_2908, _2909, _2910));
        float _4829 = isnan(0.0) ? _2915 : (isnan(_2915) ? 0.0 : max(_2915, 0.0));
        float _2918 = isnan(1.0) ? _4829 : (isnan(_4829) ? 1.0 : min(_4829, 1.0));
        float _2919 = dot(vec3(cbLight._m0[_2881].xyz), vec3(_2908, _2909, _2910));
        float _4840 = isnan(0.0) ? _2919 : (isnan(_2919) ? 0.0 : max(_2919, 0.0));
        float _2923 = _2900 * _2900;
        float _2927 = ((_2918 * _2918) * (_2923 + (-1.0))) + 1.0;
        float _2934 = exp2(log2(1.0 - (isnan(1.0) ? _4840 : (isnan(_4840) ? 1.0 : min(_4840, 1.0)))) * 5.0);
        float _2941 = 1.0 - _2900;
        float _2951 = (0.5 / (((_2568 * ((_2914 * _2941) + _2900)) + 9.9999999392252902907785028219223e-09) + (((_2568 * _2941) + _2900) * _2914))) * _2914;
        float _4851 = isnan(0.0) ? _2951 : (isnan(_2951) ? 0.0 : max(_2951, 0.0));
        float _2953 = (isnan(1.0) ? _4851 : (isnan(_4851) ? 1.0 : min(_4851, 1.0))) * (_2923 / ((_2927 * _2927) * 3.141590118408203125));
        float _2954 = isnan(1.0) ? _2308 : (isnan(_2308) ? 1.0 : min(_2308, 1.0));
        _2870 = (((((_2934 * _2590) + _985) * cbLight._m0[_2885].x) * _2953) * _2954) + _2760;
        _2872 = (((((_2934 * _2592) + _986) * cbLight._m0[_2885].y) * _2953) * _2954) + _2762;
        _2874 = (((((_2934 * _2593) + _987) * cbLight._m0[_2885].z) * _2953) * _2954) + _2764;
    }
    float _3019;
    float _3021;
    float _3023;
    float _3025;
    float _3027;
    float _3029;
    if (_2290.y == 0u)
    {
        uvec4 _2975 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2976 = _2975.x;
        uint _2987 = uint((float(_2975.y) * floor(float(uint(cbSceneParam._m0[85u].y * _789) / _2976))) + floor(float(uint(cbSceneParam._m0[85u].x * _788) / _2976)));
        float _2997 = (log2(_2068 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2998 = isnan(0.0) ? _2997 : (isnan(_2997) ? 0.0 : max(_2997, 0.0));
        uint _3001 = uint(isnan(14.0) ? _2998 : (isnan(_2998) ? 14.0 : min(_2998, 14.0)));
        uvec4 _3006 = texelFetch(g_lightClusterGridBuffer, int(((_3001 << 2u) + (_2987 << 6u)) >> 2u));
        uint _3007 = _3006.x;
        uint _3008 = _2975.z;
        float _3122;
        float _3124;
        float _3126;
        float _3128;
        float _3130;
        float _3132;
        if (((((1u << ((_3008 >> 4u) & 15u)) + 4294967295u) & _3007) == 0u) || ((_3008 & 240u) == 0u))
        {
            _3122 = 0.0;
            _3124 = 0.0;
            _3126 = 0.0;
            _3128 = 0.0;
            _3130 = 0.0;
            _3132 = 0.0;
        }
        else
        {
            float _3123;
            float _3125;
            float _3127;
            float _3129;
            float _3131;
            float _3133;
            float _3275 = 0.0;
            float _3276 = 0.0;
            float _3277 = 0.0;
            float _3278 = 0.0;
            float _3279 = 0.0;
            float _3280 = 0.0;
            uint _3281 = 0u;
            uint _3290;
            bool _3291;
            for (;;)
            {
                _3290 = texelFetch(g_lightClassification, int((((_3001 << 5u) + (_2987 << 9u)) + (_3281 << 2u)) >> 2u)).x;
                _3291 = _3290 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_3291)
                {
                    frontier_phi_68_pred = _3280;
                    frontier_phi_68_pred_1 = _3279;
                    frontier_phi_68_pred_2 = _3278;
                    frontier_phi_68_pred_3 = _3276;
                    frontier_phi_68_pred_4 = _3275;
                    frontier_phi_68_pred_5 = _3277;
                }
                else
                {
                    float _3399;
                    float _3400;
                    float _3401;
                    float _3402;
                    float _3403;
                    float _3404;
                    uint _3405;
                    _3399 = _3275;
                    _3400 = _3276;
                    _3401 = _3277;
                    _3402 = _3278;
                    _3403 = _3279;
                    _3404 = _3280;
                    _3405 = _3290;
                    float _3331;
                    float _3332;
                    float _3333;
                    float _3334;
                    float _3335;
                    float _3336;
                    for (;;)
                    {
                        uint _3409 = uint(findLSB(_3405)) + (_3281 << 5u);
                        uint _3406 = (_3405 + 4294967295u) & _3405;
                        uint _3411 = _3409 * 48u;
                        vec4 _3425 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3411)).x, texelFetch(g_PointLightRenderingBuffer, int(_3411 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3411 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3411 + 3u)).x));
                        uint _3431 = (_3409 * 48u) + 4u;
                        vec4 _3444 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3431)).x, texelFetch(g_PointLightRenderingBuffer, int(_3431 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3431 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3431 + 3u)).x));
                        uint _3450 = (_3409 * 48u) + 8u;
                        vec3 _3461 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3450)).x, texelFetch(g_PointLightRenderingBuffer, int(_3450 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3450 + 2u)).x));
                        float _3465 = _3425.x - _2066;
                        float _3466 = _3425.y - _2067;
                        float _3467 = _3425.z - _2068;
                        float _3468 = dot(vec3(_3465, _3466, _3467), vec3(_3465, _3466, _3467));
                        float _3471 = inversesqrt(_3468);
                        float _3472 = _3471 * _3465;
                        float _3473 = _3471 * _3466;
                        float _3474 = _3471 * _3467;
                        float _3475 = dot(vec3(_812, _815, _818), vec3(_3472, _3473, _3474));
                        float _3480 = 1.0 - (_3468 * _3425.w);
                        float _4877 = isnan(0.0) ? _3480 : (isnan(_3480) ? 0.0 : max(_3480, 0.0));
                        float _3481 = isnan(1.0) ? _4877 : (isnan(_4877) ? 1.0 : min(_4877, 1.0));
                        float _3482 = sqrt(_3468) * _3444.w;
                        float _3485 = 1.39999997615814208984375 / (_3482 + 1.39999997615814208984375);
                        float _3486 = _3485 * _3485;
                        float _3489 = ((1.0 - _3486) * _3475) + _3486;
                        float _3492 = _3482 * _3482;
                        float _3495 = ((isnan(0.0) ? _3489 : (isnan(_3489) ? 0.0 : max(_3489, 0.0))) * _3481) / ((_3492 * 0.699999988079071044921875) + 1.0);
                        float _3499 = (-0.0) - _2066;
                        float _3500 = (-0.0) - _2067;
                        float _3501 = (-0.0) - _2068;
                        float _3505 = inversesqrt(dot(vec3(_3499, _3500, _3501), vec3(_3499, _3500, _3501)));
                        float _3506 = _3505 * _3499;
                        float _3507 = _3505 * _3500;
                        float _3508 = _3505 * _3501;
                        float _3515 = exp2(log2(1.0 / ((_3492 * 3.5) + 5.0)) * 0.25);
                        float _3516 = 1.0 - _1009;
                        float _3523 = sqrt(1.0 - ((1.0 - (_3516 * _3516)) * (1.0 - (_3515 * _3515))));
                        float _3524 = _3523 * _3523;
                        float _3525 = _3524 * _3524;
                        float _3526 = _3506 + _3472;
                        float _3527 = _3507 + _3473;
                        float _3528 = _3508 + _3474;
                        float _3532 = inversesqrt(dot(vec3(_3526, _3527, _3528), vec3(_3526, _3527, _3528)));
                        float _3536 = dot(vec3(_812, _815, _818), vec3(_3506, _3507, _3508));
                        float _4893 = isnan(0.0) ? _3536 : (isnan(_3536) ? 0.0 : max(_3536, 0.0));
                        float _3539 = isnan(1.0) ? _4893 : (isnan(_4893) ? 1.0 : min(_4893, 1.0));
                        float _3540 = dot(vec3(_812, _815, _818), vec3(_3532 * _3526, _3532 * _3527, _3532 * _3528));
                        float _4904 = isnan(0.0) ? _3540 : (isnan(_3540) ? 0.0 : max(_3540, 0.0));
                        float _3543 = isnan(1.0) ? _4904 : (isnan(_4904) ? 1.0 : min(_4904, 1.0));
                        float _3547 = ((_3543 * _3543) * (_3525 + (-1.0))) + 1.0;
                        float _3548 = _3485 * _3524;
                        float _3549 = _3548 * _3548;
                        float _3552 = ((1.0 - _3549) * _3475) + _3549;
                        float _4915 = isnan(0.0) ? _3552 : (isnan(_3552) ? 0.0 : max(_3552, 0.0));
                        float _3553 = isnan(1.0) ? _4915 : (isnan(_4915) ? 1.0 : min(_4915, 1.0));
                        float _3554 = 1.0 - _3524;
                        float _3564 = (0.5 / (((_3553 * ((_3539 * _3554) + _3524)) + 9.9999999392252902907785028219223e-09) + (((_3553 * _3554) + _3524) * _3539))) * _3553;
                        float _4926 = isnan(0.0) ? _3564 : (isnan(_3564) ? 0.0 : max(_3564, 0.0));
                        float _3575 = (((_3525 * 3.1415927410125732421875) * (isnan(1.0) ? _4926 : (isnan(_4926) ? 1.0 : min(_4926, 1.0)))) / ((_3547 * _3547) * ((_3492 * 2.1991131305694580078125) + 3.141590118408203125))) * _3481;
                        _3334 = (_3495 * _3444.x) + _3402;
                        _3335 = (_3495 * _3444.y) + _3403;
                        _3336 = (_3495 * _3444.z) + _3404;
                        _3331 = (_3575 * _3461.x) + _3399;
                        _3332 = (_3575 * _3461.y) + _3400;
                        _3333 = (_3575 * _3461.z) + _3401;
                        if (_3406 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3399 = _3331;
                            _3400 = _3332;
                            _3401 = _3333;
                            _3402 = _3334;
                            _3403 = _3335;
                            _3404 = _3336;
                            _3405 = _3406;
                        }
                    }
                    frontier_phi_68_pred = _3336;
                    frontier_phi_68_pred_1 = _3335;
                    frontier_phi_68_pred_2 = _3334;
                    frontier_phi_68_pred_3 = _3332;
                    frontier_phi_68_pred_4 = _3331;
                    frontier_phi_68_pred_5 = _3333;
                }
                _3133 = frontier_phi_68_pred;
                _3131 = frontier_phi_68_pred_1;
                _3129 = frontier_phi_68_pred_2;
                _3125 = frontier_phi_68_pred_3;
                _3123 = frontier_phi_68_pred_4;
                _3127 = frontier_phi_68_pred_5;
                uint _3282 = _3281 + 1u;
                if (_3282 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3275 = _3123;
                    _3276 = _3125;
                    _3277 = _3127;
                    _3278 = _3129;
                    _3279 = _3131;
                    _3280 = _3133;
                    _3281 = _3282;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3122 = _3123;
            _3124 = _3125;
            _3126 = _3127;
            _3128 = _3129;
            _3130 = _3131;
            _3132 = _3133;
        }
        uvec4 _3136 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3137 = _3136.z;
        uint _3139 = (_3137 >> 8u) & 15u;
        float _3243;
        float _3245;
        float _3247;
        float _3249;
        float _3251;
        float _3253;
        if (((4294967295u << _3139) & _3007) == 0u)
        {
            _3243 = _3122;
            _3245 = _3124;
            _3247 = _3126;
            _3249 = _3128;
            _3251 = _3130;
            _3253 = _3132;
        }
        else
        {
            float _3268 = inversesqrt(dot(vec3(_2066, _2067, _2068), vec3(_2066, _2067, _2068)));
            float _3269 = _3268 * _2066;
            float _3270 = _3268 * _2067;
            float _3271 = _3268 * _2068;
            float frontier_phi_62_63_ladder;
            float frontier_phi_62_63_ladder_1;
            float frontier_phi_62_63_ladder_2;
            float frontier_phi_62_63_ladder_3;
            float frontier_phi_62_63_ladder_4;
            float frontier_phi_62_63_ladder_5;
            if (_3139 < ((_3137 >> 12u) & 15u))
            {
                float _3244;
                float _3246;
                float _3248;
                float _3250;
                float _3252;
                float _3254;
                float _3382 = _3122;
                float _3383 = _3124;
                float _3384 = _3126;
                float _3385 = _3128;
                float _3386 = _3130;
                float _3387 = _3132;
                uint _3388 = _3139;
                uint _3397;
                bool _3398;
                for (;;)
                {
                    _3397 = texelFetch(g_lightClassification, int((((_3001 << 5u) + (_2987 << 9u)) + (_3388 << 2u)) >> 2u)).x;
                    _3398 = _3397 == 0u;
                    float frontier_phi_74_pred;
                    float frontier_phi_74_pred_1;
                    float frontier_phi_74_pred_2;
                    float frontier_phi_74_pred_3;
                    float frontier_phi_74_pred_4;
                    float frontier_phi_74_pred_5;
                    if (_3398)
                    {
                        frontier_phi_74_pred = _3384;
                        frontier_phi_74_pred_1 = _3383;
                        frontier_phi_74_pred_2 = _3382;
                        frontier_phi_74_pred_3 = _3387;
                        frontier_phi_74_pred_4 = _3386;
                        frontier_phi_74_pred_5 = _3385;
                    }
                    else
                    {
                        float _3580;
                        float _3581;
                        float _3582;
                        float _3583;
                        float _3584;
                        float _3585;
                        float _3875;
                        float _3876;
                        float _3877;
                        float _3878;
                        float _3879;
                        float _3880;
                        float _3593 = _3382;
                        float _3594 = _3383;
                        float _3595 = _3384;
                        float _3596 = _3385;
                        float _3597 = _3386;
                        float _3598 = _3387;
                        uint _3599 = _3397;
                        uint _3600;
                        vec4 _3625;
                        float _3626;
                        vec4 _3641;
                        vec3 _3653;
                        vec4 _3668;
                        vec4 _3684;
                        float _3731;
                        bool _3732;
                        for (;;)
                        {
                            uint _3610 = ((_3388 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3599));
                            _3600 = (_3599 + 4294967295u) & _3599;
                            uint _3612 = _3610 * 40u;
                            _3625 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3612)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3612 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3612 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3612 + 3u)).x));
                            _3626 = _3625.w;
                            uint _3628 = (_3610 * 40u) + 4u;
                            _3641 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3628)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3628 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3628 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3628 + 3u)).x));
                            uint _3643 = (_3610 * 40u) + 8u;
                            _3653 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3643)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3643 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3643 + 2u)).x));
                            uint _3655 = (_3610 * 40u) + 16u;
                            _3668 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3655)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3655 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3655 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3655 + 3u)).x));
                            uint _3671 = (_3610 * 40u) + 20u;
                            _3684 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3671)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3671 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3671 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3671 + 3u)).x));
                            uint _3687 = (_3610 * 40u) + 24u;
                            vec4 _3700 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3687)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3687 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3687 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3687 + 3u)).x));
                            uint _3706 = (_3610 * 40u) + 28u;
                            vec4 _3719 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3706)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3706 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3706 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3706 + 3u)).x));
                            _3731 = fma(_2068, _3719.z, fma(_2067, _3719.y, _3719.x * _2066)) + _3719.w;
                            _3732 = !((fma(_2068, _3700.z, fma(_2067, _3700.y, _3700.x * _2066)) + _3700.w) <= 0.0);
                            float frontier_phi_80_pred;
                            float frontier_phi_80_pred_1;
                            float frontier_phi_80_pred_2;
                            float frontier_phi_80_pred_3;
                            float frontier_phi_80_pred_4;
                            float frontier_phi_80_pred_5;
                            if (_3732)
                            {
                                float _3759 = _3625.x - _2066;
                                float _3760 = _3625.y - _2067;
                                float _3761 = _3625.z - _2068;
                                float _3762 = dot(vec3(_3759, _3760, _3761), vec3(_3759, _3760, _3761));
                                float _3765 = inversesqrt(_3762);
                                float _3766 = _3765 * _3759;
                                float _3767 = _3765 * _3760;
                                float _3768 = _3765 * _3761;
                                float _3772 = 1.0 - (_3762 / (_3626 * _3626));
                                float _4937 = isnan(0.0) ? _3772 : (isnan(_3772) ? 0.0 : max(_3772, 0.0));
                                float _3773 = isnan(1.0) ? _4937 : (isnan(_4937) ? 1.0 : min(_4937, 1.0));
                                float _3777 = sqrt(_3762) * _3641.w;
                                float _3779 = 1.39999997615814208984375 / (_3777 + 1.39999997615814208984375);
                                float _3780 = _3779 * _3779;
                                float _3783 = ((1.0 - _3780) * dot(vec3(_3766, _3767, _3768), vec3(_812, _815, _818))) + _3780;
                                float _3786 = _3777 * _3777;
                                float _3790 = (fma(_2068, _3668.z, fma(_2067, _3668.y, _3668.x * _2066)) + _3668.w) / _3731;
                                float _3791 = (fma(_2068, _3684.z, fma(_2067, _3684.y, _3684.x * _2066)) + _3684.w) / _3731;
                                float _3795 = 1.0 - dot(vec2(_3790, _3791), vec2(_3790, _3791));
                                float _4953 = isnan(0.0) ? _3795 : (isnan(_3795) ? 0.0 : max(_3795, 0.0));
                                float _3796 = isnan(1.0) ? _4953 : (isnan(_4953) ? 1.0 : min(_4953, 1.0));
                                float _3797 = _3796 * (((isnan(0.0) ? _3783 : (isnan(_3783) ? 0.0 : max(_3783, 0.0))) * _3773) / ((_3786 * 0.699999988079071044921875) + 1.0));
                                float _3809 = exp2(log2(1.0 / ((_3786 * 3.5) + 5.0)) * 0.25);
                                float _3810 = 1.0 - _1009;
                                float _3817 = sqrt(1.0 - ((1.0 - (_3810 * _3810)) * (1.0 - (_3809 * _3809))));
                                float _3818 = _3817 * _3817;
                                float _3819 = _3818 * _3818;
                                float _3820 = _3766 - _3269;
                                float _3821 = _3767 - _3270;
                                float _3822 = _3768 - _3271;
                                float _3826 = inversesqrt(dot(vec3(_3820, _3821, _3822), vec3(_3820, _3821, _3822)));
                                float _3830 = dot(vec3(_812, _815, _818), vec3((-0.0) - _3269, (-0.0) - _3270, (-0.0) - _3271));
                                float _4964 = isnan(0.0) ? _3830 : (isnan(_3830) ? 0.0 : max(_3830, 0.0));
                                float _3833 = isnan(1.0) ? _4964 : (isnan(_4964) ? 1.0 : min(_4964, 1.0));
                                float _3834 = dot(vec3(_812, _815, _818), vec3(_3826 * _3820, _3826 * _3821, _3826 * _3822));
                                float _4975 = isnan(0.0) ? _3834 : (isnan(_3834) ? 0.0 : max(_3834, 0.0));
                                float _3837 = isnan(1.0) ? _4975 : (isnan(_4975) ? 1.0 : min(_4975, 1.0));
                                float _3841 = ((_3837 * _3837) * (_3819 + (-1.0))) + 1.0;
                                float _3842 = _3779 * _3818;
                                float _3843 = _3842 * _3842;
                                float _3849 = ((1.0 - _3843) * dot(vec3(_812, _815, _818), vec3(_3766, _3767, _3768))) + _3843;
                                float _4986 = isnan(0.0) ? _3849 : (isnan(_3849) ? 0.0 : max(_3849, 0.0));
                                float _3850 = isnan(1.0) ? _4986 : (isnan(_4986) ? 1.0 : min(_4986, 1.0));
                                float _3851 = 1.0 - _3818;
                                float _3861 = (0.5 / (((_3850 * ((_3833 * _3851) + _3818)) + 9.9999999392252902907785028219223e-09) + (((_3850 * _3851) + _3818) * _3833))) * _3850;
                                float _4997 = isnan(0.0) ? _3861 : (isnan(_3861) ? 0.0 : max(_3861, 0.0));
                                float _3871 = (_3796 * _3773) * (((_3819 * 3.1415927410125732421875) * (isnan(1.0) ? _4997 : (isnan(_4997) ? 1.0 : min(_4997, 1.0)))) / ((_3841 * _3841) * ((_3786 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_80_pred = _3871 * _3653.z;
                                frontier_phi_80_pred_1 = _3871 * _3653.y;
                                frontier_phi_80_pred_2 = _3871 * _3653.x;
                                frontier_phi_80_pred_3 = _3797 * _3641.z;
                                frontier_phi_80_pred_4 = _3797 * _3641.y;
                                frontier_phi_80_pred_5 = _3797 * _3641.x;
                            }
                            else
                            {
                                frontier_phi_80_pred = 0.0;
                                frontier_phi_80_pred_1 = 0.0;
                                frontier_phi_80_pred_2 = 0.0;
                                frontier_phi_80_pred_3 = 0.0;
                                frontier_phi_80_pred_4 = 0.0;
                                frontier_phi_80_pred_5 = 0.0;
                            }
                            _3877 = frontier_phi_80_pred;
                            _3876 = frontier_phi_80_pred_1;
                            _3875 = frontier_phi_80_pred_2;
                            _3880 = frontier_phi_80_pred_3;
                            _3879 = frontier_phi_80_pred_4;
                            _3878 = frontier_phi_80_pred_5;
                            _3583 = _3878 + _3596;
                            _3584 = _3879 + _3597;
                            _3585 = _3880 + _3598;
                            _3580 = _3875 + _3593;
                            _3581 = _3876 + _3594;
                            _3582 = _3877 + _3595;
                            if (_3600 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3593 = _3580;
                                _3594 = _3581;
                                _3595 = _3582;
                                _3596 = _3583;
                                _3597 = _3584;
                                _3598 = _3585;
                                _3599 = _3600;
                                continue;
                            }
                        }
                        frontier_phi_74_pred = _3582;
                        frontier_phi_74_pred_1 = _3581;
                        frontier_phi_74_pred_2 = _3580;
                        frontier_phi_74_pred_3 = _3585;
                        frontier_phi_74_pred_4 = _3584;
                        frontier_phi_74_pred_5 = _3583;
                    }
                    _3248 = frontier_phi_74_pred;
                    _3246 = frontier_phi_74_pred_1;
                    _3244 = frontier_phi_74_pred_2;
                    _3254 = frontier_phi_74_pred_3;
                    _3252 = frontier_phi_74_pred_4;
                    _3250 = frontier_phi_74_pred_5;
                    uint _3389 = _3388 + 1u;
                    if (_3389 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3382 = _3244;
                        _3383 = _3246;
                        _3384 = _3248;
                        _3385 = _3250;
                        _3386 = _3252;
                        _3387 = _3254;
                        _3388 = _3389;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_62_63_ladder = _3252;
                frontier_phi_62_63_ladder_1 = _3250;
                frontier_phi_62_63_ladder_2 = _3248;
                frontier_phi_62_63_ladder_3 = _3254;
                frontier_phi_62_63_ladder_4 = _3246;
                frontier_phi_62_63_ladder_5 = _3244;
            }
            else
            {
                frontier_phi_62_63_ladder = _3130;
                frontier_phi_62_63_ladder_1 = _3128;
                frontier_phi_62_63_ladder_2 = _3126;
                frontier_phi_62_63_ladder_3 = _3132;
                frontier_phi_62_63_ladder_4 = _3124;
                frontier_phi_62_63_ladder_5 = _3122;
            }
            _3243 = frontier_phi_62_63_ladder_5;
            _3245 = frontier_phi_62_63_ladder_4;
            _3247 = frontier_phi_62_63_ladder_2;
            _3249 = frontier_phi_62_63_ladder_1;
            _3251 = frontier_phi_62_63_ladder;
            _3253 = frontier_phi_62_63_ladder_3;
        }
        float _3258 = isnan(1.0) ? _999 : (isnan(_999) ? 1.0 : min(_999, 1.0));
        _3019 = (_3258 * _3249) + _2532;
        _3021 = (_3258 * _3251) + _2534;
        _3023 = (_3258 * _3253) + _2536;
        _3025 = ((_3243 * _985) * _3258) + _2870;
        _3027 = ((_3245 * _986) * _3258) + _2872;
        _3029 = ((_3247 * _987) * _3258) + _2874;
    }
    else
    {
        _3019 = _2532;
        _3021 = _2534;
        _3023 = _2536;
        _3025 = _2870;
        _3027 = _2872;
        _3029 = _2874;
    }
    uint _3035 = _892 + uint(cbMatDynParam._m0[0u].w);
    float _3041 = cbInstanceData._m0[_3035].x * (((((cbMatDynParam._m0[8u].x - cbMatDynParam._m0[7u].x) * _667) + cbMatDynParam._m0[7u].x) + (((((cbMtdParam._m0[12u].x * cbMtdParam._m0[16u].z) * cbMtdParam._m0[15u].w) * _563) * _576.x) * _696)) + (((_725 - (_725 * _633)) + (cbMatDynParam._m0[11u].x * _756)) * cbMatDynParam._m0[9u].x));
    float _3042 = cbInstanceData._m0[_3035].y * (((((cbMatDynParam._m0[8u].y - cbMatDynParam._m0[7u].y) * _667) + cbMatDynParam._m0[7u].y) + (((((cbMtdParam._m0[12u].y * cbMtdParam._m0[16u].z) * cbMtdParam._m0[15u].w) * _563) * _576.y) * _696)) + (((_727 - (_727 * _633)) + (cbMatDynParam._m0[11u].y * _756)) * cbMatDynParam._m0[9u].y));
    float _3043 = cbInstanceData._m0[_3035].z * (((((cbMatDynParam._m0[8u].z - cbMatDynParam._m0[7u].z) * _667) + cbMatDynParam._m0[7u].z) + (((((cbMtdParam._m0[12u].z * cbMtdParam._m0[16u].z) * cbMtdParam._m0[15u].w) * _563) * _576.z) * _696)) + (((_729 - (_729 * _633)) + (cbMatDynParam._m0[11u].z * _756)) * cbMatDynParam._m0[9u].z));
    float _5013 = isnan(0.0) ? _976 : (isnan(_976) ? 0.0 : max(_976, 0.0));
    float _5024 = isnan(0.0) ? _977 : (isnan(_977) ? 0.0 : max(_977, 0.0));
    float _5035 = isnan(0.0) ? _978 : (isnan(_978) ? 0.0 : max(_978, 0.0));
    float _5046 = isnan(0.0) ? _628 : (isnan(_628) ? 0.0 : max(_628, 0.0));
    float _3061 = (((isnan(1.0) ? _5013 : (isnan(_5013) ? 1.0 : min(_5013, 1.0))) * (_3019 + ((isnan(0.0) ? _1722 : (isnan(_1722) ? 0.0 : max(_1722, 0.0))) * _999))) + ((_3025 + ((isnan(0.0) ? _2013 : (isnan(_2013) ? 0.0 : max(_2013, 0.0))) * _1798)) * cbPerFrame._m0[3u].x)) + _3041;
    float _3063 = (_3042 + ((_3027 + ((isnan(0.0) ? _2016 : (isnan(_2016) ? 0.0 : max(_2016, 0.0))) * _1798)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _5024 : (isnan(_5024) ? 1.0 : min(_5024, 1.0))) * (_3021 + ((isnan(0.0) ? _1725 : (isnan(_1725) ? 0.0 : max(_1725, 0.0))) * _999)));
    float _3065 = (_3043 + ((_3029 + ((isnan(0.0) ? _2019 : (isnan(_2019) ? 0.0 : max(_2019, 0.0))) * _1798)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _5035 : (isnan(_5035) ? 1.0 : min(_5035, 1.0))) * (_3023 + ((isnan(0.0) ? _1728 : (isnan(_1728) ? 0.0 : max(_1728, 0.0))) * _999)));
    float _3083 = ((cbMtdParam._m0[2u].w - cbMatDynParam._m0[12u].y) * _696) + cbMatDynParam._m0[12u].y;
    float _3088 = cbInstanceData._m0[_891 + 6u].w * (isnan(1.0) ? _5046 : (isnan(_5046) ? 1.0 : min(_5046, 1.0)));
    float _3093 = _788 / cbSceneParam._m0[86u].x;
    float _3094 = _789 / cbSceneParam._m0[86u].y;
    vec4 _3108 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3093, _3094, (log2((isnan(cbSceneParam._m0[77u].w) ? _782 : (isnan(_782) ? cbSceneParam._m0[77u].w : min(_782, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3110 = _3108.x;
    float _3111 = _3108.y;
    float _3112 = _3108.z;
    float _3113 = _3108.w;
    float _3184;
    float _3186;
    float _3188;
    float _3190;
    if (_782 > cbSceneParam._m0[78u].w)
    {
        float _3147 = isnan(_782) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _782 : min(cbSceneParam._m0[80u].w, _782));
        float _3148 = _3147 / _782;
        float _3159 = _3148 * _297;
        float _3160 = _298 * _3148;
        float _3161 = (-0.0) - _3160;
        float _3162 = _3148 * _299;
        float _3164 = (cbSceneParam._m0[77u].w * _3161) / _3147;
        float _3165 = _3164 + cbSceneParam._m0[79u].w;
        float _3166 = cbSceneParam._m0[79u].w - _3160;
        float _3172 = sqrt(((_3159 * _3159) + (_3160 * _3160)) + (_3162 * _3162));
        float _3175 = (1.0 - (cbSceneParam._m0[77u].w / _3147)) * _3172;
        float _3180 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3182 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3344;
        if (abs((_3161 - _3164) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3344 = ((((_3165 > 0.0) ? exp2(_3180 * _3165) : (2.0 - exp2(_3182 * _3165))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3175;
        }
        else
        {
            float _3304 = 1.0 / cbSceneParam._m0[80u].x;
            float _3305 = isnan(_3166) ? _3165 : (isnan(_3165) ? _3166 : max(_3165, _3166));
            float _3306 = isnan(_3166) ? _3165 : (isnan(_3165) ? _3166 : min(_3165, _3166));
            float _3315 = isnan(0.0) ? _3305 : (isnan(_3305) ? 0.0 : min(_3305, 0.0));
            float _3316 = isnan(0.0) ? _3306 : (isnan(_3306) ? 0.0 : min(_3306, 0.0));
            _3344 = ((abs(_3172 / _3161) * cbSceneParam._m0[80u].y) * ((((_3315 - _3316) * 2.0) - ((exp2(_3180 * (isnan(0.0) ? _3305 : (isnan(_3305) ? 0.0 : max(_3305, 0.0)))) - exp2(_3180 * (isnan(0.0) ? _3306 : (isnan(_3306) ? 0.0 : max(_3306, 0.0))))) * _3304)) - ((exp2(_3182 * _3315) - exp2(_3182 * _3316)) * _3304))) + (_3175 * cbSceneParam._m0[80u].z);
        }
        vec4 _3346 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3093, _3094, 1.0), 0.0);
        float _3355 = exp2((_3344 * (-1.44269502162933349609375)) * (1.0 - _3346.w));
        float _3356 = log2(_3355);
        float _3372 = log2(_3113);
        _3184 = (exp2(_3372 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3356 * cbSceneParam._m0[78u].x)) * _3346.x) / cbSceneParam._m0[78u].x)) + _3110;
        _3186 = (exp2(_3372 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3356 * cbSceneParam._m0[78u].y)) * _3346.y) / cbSceneParam._m0[78u].y)) + _3111;
        _3188 = (exp2(_3372 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3356 * cbSceneParam._m0[78u].z)) * _3346.z) / cbSceneParam._m0[78u].z)) + _3112;
        _3190 = _3355 * _3113;
    }
    else
    {
        _3184 = _3110;
        _3186 = _3111;
        _3188 = _3112;
        _3190 = _3113;
    }
    float _3202 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3203 = _3202 == 3.0;
    float _3204 = log2(_3190);
    float _3208 = exp2(_3204 * cbSceneParam._m0[78u].x);
    float _3209 = exp2(_3204 * cbSceneParam._m0[78u].y);
    float _3210 = exp2(_3204 * cbSceneParam._m0[78u].z);
    float _3211 = _3208 * (isnan(0.0) ? _3061 : (isnan(_3061) ? 0.0 : max(_3061, 0.0)));
    float _3212 = _3209 * (isnan(0.0) ? _3063 : (isnan(_3063) ? 0.0 : max(_3063, 0.0)));
    float _3213 = _3210 * (isnan(0.0) ? _3065 : (isnan(_3065) ? 0.0 : max(_3065, 0.0)));
    float _3222 = (_3202 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3222 * (_3203 ? _3211 : (_3211 + (cbSceneParam._m0[72u].w * _3184)));
    SV_Target.y = _3222 * (_3203 ? _3212 : (_3212 + (cbSceneParam._m0[72u].w * _3186)));
    SV_Target.z = _3222 * (_3203 ? _3213 : (_3213 + (cbSceneParam._m0[72u].w * _3188)));
    SV_Target.w = _3088;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _3041) * _3083) * _3208) * _3222;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _3042) * _3083) * _3209) * _3222;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _3043) * _3083) * _3210) * _3222;
    SV_Target_1.w = _3088;
}


