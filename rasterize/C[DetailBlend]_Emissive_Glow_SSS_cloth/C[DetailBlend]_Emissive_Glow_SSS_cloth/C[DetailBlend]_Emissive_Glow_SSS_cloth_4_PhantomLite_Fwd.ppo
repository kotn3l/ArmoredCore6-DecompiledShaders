#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[18];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_1;
layout(set = 0, binding = 1) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_7;
layout(set = 0, binding = 10) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_6;
layout(set = 0, binding = 2) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_0;
layout(set = 0, binding = 3) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_10;
layout(set = 0, binding = 4) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_11;
layout(set = 0, binding = 5) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_12;
layout(set = 0, binding = 6) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_2;
layout(set = 0, binding = 7) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_3;
layout(set = 0, binding = 9) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_5;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1372;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _207 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _208 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _209 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _215 = inversesqrt(dot(vec3(_207, _208, _209), vec3(_207, _208, _209)));
    float _222 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _223 = _222 * NORMAL.x;
    float _224 = _222 * NORMAL.y;
    float _225 = _222 * NORMAL.z;
    float _229 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _237;
    float _238;
    float _239;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _237 = (-0.0) - _223;
        _238 = (-0.0) - _224;
        _239 = (-0.0) - _225;
    }
    else
    {
        _237 = _223;
        _238 = _224;
        _239 = _225;
    }
    float _283 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _293 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _283);
    float _294 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _283);
    float _295 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _283);
    vec4 _308 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _313 = _308.z;
    float _320 = exp2(log2(_313 * 22.0) * 260.0);
    float _321 = isnan(0.0) ? _320 : (isnan(_320) ? 0.0 : max(_320, 0.0));
    float _322 = isnan(1.0) ? _321 : (isnan(_321) ? 1.0 : min(_321, 1.0));
    vec4 _336 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _346 = cbMtdParam._m0[10u].x * _336.x;
    float _347 = cbMtdParam._m0[10u].y * _336.y;
    float _348 = cbMtdParam._m0[10u].z * _336.z;
    vec4 _360 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _387 = exp2(log2(1.0 - _308.w) * 8.0);
    vec4 _399 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_10, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    vec4 _424 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _432 = (((((cbMtdParam._m0[9u].x * _360.x) - _346) * _322) + _346) * 4.55000019073486328125) * _424.x;
    float _434 = (((((cbMtdParam._m0[9u].y * _360.y) - _347) * _322) + _347) * 4.55000019073486328125) * _424.y;
    float _436 = (((((cbMtdParam._m0[9u].z * _360.z) - _348) * _322) + _348) * 4.55000019073486328125) * _424.z;
    float _443 = (((cbMtdParam._m0[13u].x * _399.x) - _432) * _387) + _432;
    float _444 = (((cbMtdParam._m0[13u].y * _399.y) - _434) * _387) + _434;
    float _445 = (((cbMtdParam._m0[13u].z * _399.z) - _436) * _387) + _436;
    float _446 = _424.w * _360.w;
    float _476 = (((texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w)).x - cbMtdParam._m0[17u].x) + cbMtdParam._m0[16u].x) * _322) + cbMtdParam._m0[17u].x;
    float _479 = ((cbMtdParam._m0[15u].z - _476) * _387) + _476;
    vec4 _491 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w));
    float _493 = _491.x;
    float _494 = _491.y;
    float _500 = cbMtdParam._m0[14u].y + _491.z;
    vec4 _512 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w));
    vec4 _534 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _547 = (((_322 * (_313 + (-0.5))) + 0.5) * 2.0) * ((((_512.z - _500) + cbMtdParam._m0[14u].x) * _322) + _500);
    float _551 = (((_534.z - _547) + cbMtdParam._m0[15u].y) * _387) + _547;
    float _566 = abs((fract(cbMtdParam._m0[15u].x * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _3753 = isnan(0.0) ? _566 : (isnan(_566) ? 0.0 : max(_566, 0.0));
    float _567 = isnan(1.0) ? _3753 : (isnan(_3753) ? 1.0 : min(_3753, 1.0));
    float _572 = (_567 * _567) * (3.0 - (_567 * 2.0));
    vec4 _585 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _593 = (_308.x * 2.0) + (-1.0);
    float _594 = (_308.y * 2.0) + (-1.0);
    float _595 = dot(vec2(_593, _594), vec2(_593, _594));
    float _3764 = isnan(0.0) ? _595 : (isnan(_595) ? 0.0 : max(_595, 0.0));
    float _600 = sqrt(1.0 - (isnan(1.0) ? _3764 : (isnan(_3764) ? 1.0 : min(_3764, 1.0))));
    float _605 = ((_512.x - _493) * _322) + _493;
    float _606 = ((_512.y - _494) * _322) + _494;
    float _619 = (cbMtdParam._m0[14u].z * (((((_534.x - _605) * _387) + _605) * 2.0) + (-1.0))) + _593;
    float _620 = (cbMtdParam._m0[14u].z * (((((_534.y - _606) * _387) + _606) * 2.0) + (-1.0))) + _594;
    float _623 = fma(_600, _237, fma(_620, _229 * TANGENT.x, (_215 * _207) * _619));
    float _626 = fma(_600, _238, fma(_620, _229 * TANGENT.y, (_215 * _208) * _619));
    float _629 = fma(_600, _239, fma(_620, _229 * TANGENT.z, (_215 * _209) * _619));
    float _633 = inversesqrt(dot(vec3(_623, _626, _629), vec3(_623, _626, _629)));
    float _634 = _633 * _623;
    float _635 = _633 * _626;
    float _636 = _633 * _629;
    float _3775 = isnan(0.0) ? _446 : (isnan(_446) ? 0.0 : max(_446, 0.0));
    float _637 = isnan(1.0) ? _3775 : (isnan(_3775) ? 1.0 : min(_3775, 1.0));
    float _3786 = isnan(0.0) ? _551 : (isnan(_551) ? 0.0 : max(_551, 0.0));
    float _638 = isnan(1.0) ? _3786 : (isnan(_3786) ? 1.0 : min(_3786, 1.0));
    float _3797 = isnan(0.0) ? _443 : (isnan(_443) ? 0.0 : max(_443, 0.0));
    float _639 = isnan(1.0) ? _3797 : (isnan(_3797) ? 1.0 : min(_3797, 1.0));
    float _3808 = isnan(0.0) ? _444 : (isnan(_444) ? 0.0 : max(_444, 0.0));
    float _640 = isnan(1.0) ? _3808 : (isnan(_3808) ? 1.0 : min(_3808, 1.0));
    float _3819 = isnan(0.0) ? _445 : (isnan(_445) ? 0.0 : max(_445, 0.0));
    float _641 = isnan(1.0) ? _3819 : (isnan(_3819) ? 1.0 : min(_3819, 1.0));
    float _3830 = isnan(0.0) ? _479 : (isnan(_479) ? 0.0 : max(_479, 0.0));
    float _642 = isnan(1.0) ? _3830 : (isnan(_3830) ? 1.0 : min(_3830, 1.0));
    float _650 = cbMatDynParam._m0[9u].x * _639;
    float _651 = cbMatDynParam._m0[9u].y * _640;
    float _652 = cbMatDynParam._m0[9u].z * _641;
    float _659 = inversesqrt(dot(vec3(_293, _294, _295), vec3(_293, _294, _295)));
    float _660 = _659 * _293;
    float _661 = _659 * _294;
    float _662 = _659 * _295;
    float _663 = dot(vec3(_634, _635, _636), vec3(_660, _661, _662));
    float _669 = abs(exp2(log2(_663) * cbMatDynParam._m0[12u].x));
    float _670 = isnan(0.100000001490116119384765625) ? _669 : (isnan(_669) ? 0.100000001490116119384765625 : max(_669, 0.100000001490116119384765625));
    float _676 = ((isnan(0.699999988079071044921875) ? _670 : (isnan(_670) ? 0.699999988079071044921875 : min(_670, 0.699999988079071044921875))) + (-0.100000001490116119384765625)) * 1.66666662693023681640625;
    float _698 = 1.0 - cbMatDynParam._m0[8u].w;
    float _3851 = isnan(0.0) ? _698 : (isnan(_698) ? 0.0 : max(_698, 0.0));
    float _701 = 1.0 - cbMatDynParam._m0[7u].w;
    float _3862 = isnan(0.0) ? _701 : (isnan(_701) ? 0.0 : max(_701, 0.0));
    float _702 = isnan(1.0) ? _3862 : (isnan(_3862) ? 1.0 : min(_3862, 1.0));
    float _705 = (((isnan(1.0) ? _3851 : (isnan(_3851) ? 1.0 : min(_3851, 1.0))) - _702) * _676) + _702;
    float _724 = dot(vec3(_634, _635, _636), vec3(0.0, -1.0, 0.0));
    float _3873 = isnan(0.0) ? _724 : (isnan(_724) ? 0.0 : max(_724, 0.0));
    float _727 = isnan(1.0) ? _3873 : (isnan(_3873) ? 1.0 : min(_3873, 1.0));
    float _734 = (_727 * _639) * cbMatDynParam._m0[11u].x;
    float _736 = (_727 * _640) * cbMatDynParam._m0[11u].y;
    float _738 = (_727 * _641) * cbMatDynParam._m0[11u].z;
    float _745 = dot(vec3(_660, _661, _662), vec3(_634, _635, _636));
    float _748 = _745 * 2.0;
    float _758 = dot(vec3((-0.0) - (_660 - (_748 * _634)), (-0.0) - (_661 - (_748 * _635)), (-0.0) - (_662 - (_748 * _636))), vec3(0.0, -1.0, 0.0));
    float _3884 = isnan(0.0) ? _758 : (isnan(_758) ? 0.0 : max(_758, 0.0));
    float _765 = exp2(log2(isnan(1.0) ? _3884 : (isnan(_3884) ? 1.0 : min(_3884, 1.0))) * 4.0);
    float _791 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _797 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _798 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _800 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _802 = _800.w;
    float _820 = fma(_636, cbSceneParam._m0[5u].z, fma(_635, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _634));
    float _823 = fma(_636, cbSceneParam._m0[6u].z, fma(_635, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _634));
    float _826 = fma(_636, cbSceneParam._m0[7u].z, fma(_635, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _634));
    vec4 _828 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _830 = _828.x;
    float _842 = (((_828.y - _638) + (_828.w * _638)) * cbMtdParam._m0[3u].x) + _638;
    vec4 _843 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _859 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3(cbMtdParam._m0[3u].x * (_830 * _830)), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * _843.z;
    float _867 = (((cbMatDynParam._m0[15u].x - _642) * cbMatDynParam._m0[15u].w) * _859) + _642;
    float _875 = ((_859 * cbMatDynParam._m0[16u].z) * (cbMatDynParam._m0[16u].x - _842)) + _842;
    uint _899 = uint(roundEven(NORMAL.w)) * 13u;
    uint _900 = _899 + 9u;
    uint _901 = _900 + uint(cbMatDynParam._m0[0u].w);
    float _907 = (cbMtdParam._m0[0u].x * _650) * cbInstanceData._m0[_901].x;
    float _908 = (cbMtdParam._m0[0u].y * _651) * cbInstanceData._m0[_901].y;
    float _909 = (cbMtdParam._m0[0u].z * _652) * cbInstanceData._m0[_901].z;
    float _3895 = isnan(0.0) ? _907 : (isnan(_907) ? 0.0 : max(_907, 0.0));
    float _910 = isnan(1.0) ? _3895 : (isnan(_3895) ? 1.0 : min(_3895, 1.0));
    float _3906 = isnan(0.0) ? _908 : (isnan(_908) ? 0.0 : max(_908, 0.0));
    float _911 = isnan(1.0) ? _3906 : (isnan(_3906) ? 1.0 : min(_3906, 1.0));
    float _3917 = isnan(0.0) ? _909 : (isnan(_909) ? 0.0 : max(_909, 0.0));
    float _912 = isnan(1.0) ? _3917 : (isnan(_3917) ? 1.0 : min(_3917, 1.0));
    vec4 _913 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _918 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _929 = (((_918.x - _867) + (_918.w * _867)) * cbMtdParam._m0[3u].x) + _867;
    float _942 = (cbMtdParam._m0[3u].x * (((_910 * _802) - _910) + _913.x)) + _910;
    float _943 = (cbMtdParam._m0[3u].x * (((_911 * _802) - _911) + _913.y)) + _911;
    float _944 = (cbMtdParam._m0[3u].x * (((_912 * _802) - _912) + _913.z)) + _912;
    float _958 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3((_867 * (_650 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625, (_867 * (_651 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625, (_867 * (_652 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w)).z;
    float _962 = _958 * cbMatDynParam._m0[13u].w;
    float _972 = (_962 * (cbMatDynParam._m0[13u].x - _942)) + _942;
    float _973 = (_962 * (cbMatDynParam._m0[13u].y - _943)) + _943;
    float _974 = (_962 * (cbMatDynParam._m0[13u].z - _944)) + _944;
    float _982 = ((_958 * cbMatDynParam._m0[15u].w) * (cbMatDynParam._m0[15u].x - _929)) + _929;
    float _983 = 1.0 - _982;
    float _984 = _983 * _972;
    float _985 = _983 * _973;
    float _986 = _983 * _974;
    float _990 = (_972 + (-0.039999999105930328369140625)) * _982;
    float _991 = (_973 + (-0.039999999105930328369140625)) * _982;
    float _992 = (_974 + (-0.039999999105930328369140625)) * _982;
    float _993 = _990 + 0.039999999105930328369140625;
    float _994 = _991 + 0.039999999105930328369140625;
    float _995 = _992 + 0.039999999105930328369140625;
    vec4 _1004 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _797, cbSceneParam._m0[86u].y * _798));
    float _1007 = _1004.x * TEXCOORD_4;
    float _1008 = _663 * 2.0;
    float _1012 = (_1008 * _634) - _660;
    float _1013 = (_1008 * _635) - _661;
    float _1014 = (_1008 * _636) - _662;
    float _1015 = abs(_745);
    float _3928 = isnan(0.0) ? _1015 : (isnan(_1015) ? 0.0 : max(_1015, 0.0));
    float _1017 = sqrt(_875);
    float _1028 = exp2((_1017 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3928 : (isnan(_3928) ? 1.0 : min(_3928, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1017 * 3.0));
    float _1034 = (1.0 - _1028) * ((_1017 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1035 = _1028 * _1017;
    float _1063 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1067 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1071 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1371;
    float _1373;
    float _1374;
    float _1375;
    float _1376;
    float _1377;
    float _1378;
    float _1379;
    float _1380;
    float _1381;
    float _1382;
    float _1383;
    float _1384;
    float _1385;
    float _1386;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1098 = fma(_1071, cbModelParam._m0[26u].z, fma(_1067, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1063));
        float _1102 = fma(_1071, cbModelParam._m0[27u].z, fma(_1067, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1063));
        float _1106 = fma(_1071, cbModelParam._m0[28u].z, fma(_1067, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1063));
        float _1129 = _1063 + _634;
        float _1130 = _1067 + _635;
        float _1131 = _1071 + _636;
        float _1141 = fma(_1131, cbModelParam._m0[26u].z, fma(_1130, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1129)) - _1098;
        float _1142 = fma(_1131, cbModelParam._m0[27u].z, fma(_1130, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1129)) - _1102;
        float _1143 = fma(_1131, cbModelParam._m0[28u].z, fma(_1130, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1129)) - _1106;
        float _1147 = inversesqrt(dot(vec3(_1141, _1142, _1143), vec3(_1141, _1142, _1143)));
        float _1160 = ((_1147 * _1141) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1098 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1161 = ((_1147 * _1142) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1102 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1162 = ((_1147 * _1143) / cbModelParam._m0[34u].z) + ((((((_1106 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1165 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1160, _1161, _1162), 0.0);
        vec4 _1172 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1160, _1161, _1162), 0.0);
        vec4 _1179 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1160, _1161, _1162), 0.0);
        vec4 _1186 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1160, _1161, _1162), 0.0);
        float _1199 = exp2((_1165.w + (-0.5)) * 20.0) * 2.0;
        float _1200 = _1199 * (_1165.x + (-0.5));
        float _1201 = _1199 * (_1165.y + (-0.5));
        float _1202 = _1199 * (_1165.z + (-0.5));
        float _1209 = exp2((_1172.w + (-0.5)) * 20.0) * 2.0;
        float _1210 = _1209 * (_1172.x + (-0.5));
        float _1211 = _1209 * (_1172.y + (-0.5));
        float _1212 = _1209 * (_1172.z + (-0.5));
        float _1219 = exp2((_1179.w + (-0.5)) * 20.0) * 2.0;
        float _1220 = _1219 * (_1179.x + (-0.5));
        float _1221 = _1219 * (_1179.y + (-0.5));
        float _1222 = _1219 * (_1179.z + (-0.5));
        float _1229 = exp2((_1186.w + (-0.5)) * 20.0) * 2.0;
        float _1230 = _1229 * (_1186.x + (-0.5));
        float _1231 = _1229 * (_1186.y + (-0.5));
        float _1232 = _1229 * (_1186.z + (-0.5));
        float _1233 = isnan(0.0) ? _1230 : (isnan(_1230) ? 0.0 : max(_1230, 0.0));
        float _1234 = isnan(0.0) ? _1231 : (isnan(_1231) ? 0.0 : max(_1231, 0.0));
        float _1235 = isnan(0.0) ? _1232 : (isnan(_1232) ? 0.0 : max(_1232, 0.0));
        float _1236 = _1200 * 0.5;
        float _1237 = _1210 * 0.5;
        float _1238 = _1220 * 0.5;
        float _1239 = dot(vec3(_1236, _1237, _1238), vec3(_1236, _1237, _1238));
        float _1244 = (_1239 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1239);
        float _1253 = (dot(vec3(_634, _635, _636), vec3(_1244 * _1236, _1244 * _1237, _1244 * _1238)) + 1.0) * 0.5;
        float _3954 = isnan(0.0) ? _1253 : (isnan(_1253) ? 0.0 : max(_1253, 0.0));
        float _1263 = sqrt(((_1237 * _1237) + (_1236 * _1236)) + (_1238 * _1238)) / (_1233 + 9.9999997473787516355514526367188e-06);
        float _3965 = isnan(0.0) ? _1263 : (isnan(_1263) ? 0.0 : max(_1263, 0.0));
        float _1264 = isnan(1.0) ? _3965 : (isnan(_3965) ? 1.0 : min(_3965, 1.0));
        float _1265 = _1264 * 2.0;
        float _1269 = (1.0 - _1264) / (_1264 + 1.0);
        float _3976 = isnan(0.0) ? _1269 : (isnan(_1269) ? 0.0 : max(_1269, 0.0));
        float _1270 = isnan(1.0) ? _3976 : (isnan(_3976) ? 1.0 : min(_3976, 1.0));
        float _1279 = ((((1.0 - _1270) * (_1265 + 2.0)) * exp2(log2(isnan(1.0) ? _3954 : (isnan(_3954) ? 1.0 : min(_3954, 1.0))) * (_1265 + 1.0))) + _1270) * _1233;
        float _1280 = _1201 * 0.5;
        float _1281 = _1211 * 0.5;
        float _1282 = _1221 * 0.5;
        float _1283 = dot(vec3(_1280, _1281, _1282), vec3(_1280, _1281, _1282));
        float _1288 = (_1283 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1283);
        float _1296 = (dot(vec3(_634, _635, _636), vec3(_1288 * _1280, _1288 * _1281, _1288 * _1282)) + 1.0) * 0.5;
        float _3987 = isnan(0.0) ? _1296 : (isnan(_1296) ? 0.0 : max(_1296, 0.0));
        float _1305 = sqrt(((_1281 * _1281) + (_1280 * _1280)) + (_1282 * _1282)) / (_1234 + 9.9999997473787516355514526367188e-06);
        float _3998 = isnan(0.0) ? _1305 : (isnan(_1305) ? 0.0 : max(_1305, 0.0));
        float _1306 = isnan(1.0) ? _3998 : (isnan(_3998) ? 1.0 : min(_3998, 1.0));
        float _1307 = _1306 * 2.0;
        float _1311 = (1.0 - _1306) / (_1306 + 1.0);
        float _4009 = isnan(0.0) ? _1311 : (isnan(_1311) ? 0.0 : max(_1311, 0.0));
        float _1312 = isnan(1.0) ? _4009 : (isnan(_4009) ? 1.0 : min(_4009, 1.0));
        float _1321 = ((((1.0 - _1312) * (_1307 + 2.0)) * exp2(log2(isnan(1.0) ? _3987 : (isnan(_3987) ? 1.0 : min(_3987, 1.0))) * (_1307 + 1.0))) + _1312) * _1234;
        float _1322 = _1202 * 0.5;
        float _1323 = _1212 * 0.5;
        float _1324 = _1222 * 0.5;
        float _1325 = dot(vec3(_1322, _1323, _1324), vec3(_1322, _1323, _1324));
        float _1330 = (_1325 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1325);
        float _1338 = (dot(vec3(_634, _635, _636), vec3(_1330 * _1322, _1330 * _1323, _1330 * _1324)) + 1.0) * 0.5;
        float _4020 = isnan(0.0) ? _1338 : (isnan(_1338) ? 0.0 : max(_1338, 0.0));
        float _1347 = sqrt(((_1323 * _1323) + (_1322 * _1322)) + (_1324 * _1324)) / (_1235 + 9.9999997473787516355514526367188e-06);
        float _4031 = isnan(0.0) ? _1347 : (isnan(_1347) ? 0.0 : max(_1347, 0.0));
        float _1348 = isnan(1.0) ? _4031 : (isnan(_4031) ? 1.0 : min(_4031, 1.0));
        float _1349 = _1348 * 2.0;
        float _1353 = (1.0 - _1348) / (_1348 + 1.0);
        float _4042 = isnan(0.0) ? _1353 : (isnan(_1353) ? 0.0 : max(_1353, 0.0));
        float _1354 = isnan(1.0) ? _4042 : (isnan(_4042) ? 1.0 : min(_4042, 1.0));
        float _1363 = ((((1.0 - _1354) * (_1349 + 2.0)) * exp2(log2(isnan(1.0) ? _4020 : (isnan(_4020) ? 1.0 : min(_4020, 1.0))) * (_1349 + 1.0))) + _1354) * _1235;
        _1371 = _1202;
        _1373 = _1201;
        _1374 = _1200;
        _1375 = _1212;
        _1376 = _1211;
        _1377 = _1210;
        _1378 = _1222;
        _1379 = _1221;
        _1380 = _1220;
        _1381 = _1235;
        _1382 = _1234;
        _1383 = _1233;
        _1384 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1279 : (isnan(_1279) ? 0.0 : max(_1279, 0.0)));
        _1385 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1321 : (isnan(_1321) ? 0.0 : max(_1321, 0.0)));
        _1386 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1363 : (isnan(_1363) ? 0.0 : max(_1363, 0.0)));
    }
    else
    {
        _1371 = _1372;
        _1373 = _1372;
        _1374 = _1372;
        _1375 = _1372;
        _1376 = _1372;
        _1377 = _1372;
        _1378 = _1372;
        _1379 = _1372;
        _1380 = _1372;
        _1381 = _1372;
        _1382 = _1372;
        _1383 = _1372;
        _1384 = 0.0;
        _1385 = 0.0;
        _1386 = 0.0;
    }
    float _1681;
    float _1682;
    float _1683;
    float _1684;
    float _1685;
    float _1686;
    float _1687;
    float _1688;
    float _1689;
    float _1690;
    float _1691;
    float _1692;
    float _1693;
    float _1694;
    float _1695;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1412 = fma(_1071, cbModelParam._m0[30u].z, fma(_1067, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1063));
        float _1416 = fma(_1071, cbModelParam._m0[31u].z, fma(_1067, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1063));
        float _1420 = fma(_1071, cbModelParam._m0[32u].z, fma(_1067, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1063));
        float _1443 = _1063 + _634;
        float _1444 = _1067 + _635;
        float _1445 = _1071 + _636;
        float _1455 = fma(_1445, cbModelParam._m0[30u].z, fma(_1444, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1443)) - _1412;
        float _1456 = fma(_1445, cbModelParam._m0[31u].z, fma(_1444, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1443)) - _1416;
        float _1457 = fma(_1445, cbModelParam._m0[32u].z, fma(_1444, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1443)) - _1420;
        float _1461 = inversesqrt(dot(vec3(_1455, _1456, _1457), vec3(_1455, _1456, _1457)));
        float _1474 = ((_1461 * _1455) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1412 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1475 = ((_1461 * _1456) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1416 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1476 = ((_1461 * _1457) / cbModelParam._m0[35u].z) + ((((((_1420 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1478 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1474, _1475, _1476), 0.0);
        vec4 _1485 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1474, _1475, _1476), 0.0);
        vec4 _1492 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1474, _1475, _1476), 0.0);
        vec4 _1499 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1474, _1475, _1476), 0.0);
        float _1511 = exp2((_1478.w + (-0.5)) * 20.0) * 2.0;
        float _1512 = _1511 * (_1478.x + (-0.5));
        float _1513 = _1511 * (_1478.y + (-0.5));
        float _1514 = _1511 * (_1478.z + (-0.5));
        float _1521 = exp2((_1485.w + (-0.5)) * 20.0) * 2.0;
        float _1522 = _1521 * (_1485.x + (-0.5));
        float _1523 = _1521 * (_1485.y + (-0.5));
        float _1524 = _1521 * (_1485.z + (-0.5));
        float _1531 = exp2((_1492.w + (-0.5)) * 20.0) * 2.0;
        float _1532 = _1531 * (_1492.x + (-0.5));
        float _1533 = _1531 * (_1492.y + (-0.5));
        float _1534 = _1531 * (_1492.z + (-0.5));
        float _1541 = exp2((_1499.w + (-0.5)) * 20.0) * 2.0;
        float _1542 = _1541 * (_1499.x + (-0.5));
        float _1543 = _1541 * (_1499.y + (-0.5));
        float _1544 = _1541 * (_1499.z + (-0.5));
        float _1545 = isnan(0.0) ? _1542 : (isnan(_1542) ? 0.0 : max(_1542, 0.0));
        float _1546 = isnan(0.0) ? _1543 : (isnan(_1543) ? 0.0 : max(_1543, 0.0));
        float _1547 = isnan(0.0) ? _1544 : (isnan(_1544) ? 0.0 : max(_1544, 0.0));
        float _1548 = _1512 * 0.5;
        float _1549 = _1522 * 0.5;
        float _1550 = _1532 * 0.5;
        float _1551 = dot(vec3(_1548, _1549, _1550), vec3(_1548, _1549, _1550));
        float _1556 = (_1551 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1551);
        float _1564 = (dot(vec3(_634, _635, _636), vec3(_1556 * _1548, _1556 * _1549, _1556 * _1550)) + 1.0) * 0.5;
        float _4083 = isnan(0.0) ? _1564 : (isnan(_1564) ? 0.0 : max(_1564, 0.0));
        float _1573 = sqrt(((_1549 * _1549) + (_1548 * _1548)) + (_1550 * _1550)) / (_1545 + 9.9999997473787516355514526367188e-06);
        float _4094 = isnan(0.0) ? _1573 : (isnan(_1573) ? 0.0 : max(_1573, 0.0));
        float _1574 = isnan(1.0) ? _4094 : (isnan(_4094) ? 1.0 : min(_4094, 1.0));
        float _1575 = _1574 * 2.0;
        float _1579 = (1.0 - _1574) / (_1574 + 1.0);
        float _4105 = isnan(0.0) ? _1579 : (isnan(_1579) ? 0.0 : max(_1579, 0.0));
        float _1580 = isnan(1.0) ? _4105 : (isnan(_4105) ? 1.0 : min(_4105, 1.0));
        float _1589 = ((((1.0 - _1580) * (_1575 + 2.0)) * exp2(log2(isnan(1.0) ? _4083 : (isnan(_4083) ? 1.0 : min(_4083, 1.0))) * (_1575 + 1.0))) + _1580) * _1545;
        float _1590 = _1513 * 0.5;
        float _1591 = _1523 * 0.5;
        float _1592 = _1533 * 0.5;
        float _1593 = dot(vec3(_1590, _1591, _1592), vec3(_1590, _1591, _1592));
        float _1598 = (_1593 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1593);
        float _1606 = (dot(vec3(_634, _635, _636), vec3(_1598 * _1590, _1598 * _1591, _1598 * _1592)) + 1.0) * 0.5;
        float _4116 = isnan(0.0) ? _1606 : (isnan(_1606) ? 0.0 : max(_1606, 0.0));
        float _1615 = sqrt(((_1591 * _1591) + (_1590 * _1590)) + (_1592 * _1592)) / (_1546 + 9.9999997473787516355514526367188e-06);
        float _4127 = isnan(0.0) ? _1615 : (isnan(_1615) ? 0.0 : max(_1615, 0.0));
        float _1616 = isnan(1.0) ? _4127 : (isnan(_4127) ? 1.0 : min(_4127, 1.0));
        float _1617 = _1616 * 2.0;
        float _1621 = (1.0 - _1616) / (_1616 + 1.0);
        float _4138 = isnan(0.0) ? _1621 : (isnan(_1621) ? 0.0 : max(_1621, 0.0));
        float _1622 = isnan(1.0) ? _4138 : (isnan(_4138) ? 1.0 : min(_4138, 1.0));
        float _1631 = ((((1.0 - _1622) * (_1617 + 2.0)) * exp2(log2(isnan(1.0) ? _4116 : (isnan(_4116) ? 1.0 : min(_4116, 1.0))) * (_1617 + 1.0))) + _1622) * _1546;
        float _1632 = _1514 * 0.5;
        float _1633 = _1524 * 0.5;
        float _1634 = _1534 * 0.5;
        float _1635 = dot(vec3(_1632, _1633, _1634), vec3(_1632, _1633, _1634));
        float _1640 = (_1635 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1635);
        float _1648 = (dot(vec3(_634, _635, _636), vec3(_1640 * _1632, _1640 * _1633, _1640 * _1634)) + 1.0) * 0.5;
        float _4149 = isnan(0.0) ? _1648 : (isnan(_1648) ? 0.0 : max(_1648, 0.0));
        float _1657 = sqrt(((_1633 * _1633) + (_1632 * _1632)) + (_1634 * _1634)) / (_1547 + 9.9999997473787516355514526367188e-06);
        float _4160 = isnan(0.0) ? _1657 : (isnan(_1657) ? 0.0 : max(_1657, 0.0));
        float _1658 = isnan(1.0) ? _4160 : (isnan(_4160) ? 1.0 : min(_4160, 1.0));
        float _1659 = _1658 * 2.0;
        float _1663 = (1.0 - _1658) / (_1658 + 1.0);
        float _4171 = isnan(0.0) ? _1663 : (isnan(_1663) ? 0.0 : max(_1663, 0.0));
        float _1664 = isnan(1.0) ? _4171 : (isnan(_4171) ? 1.0 : min(_4171, 1.0));
        float _1673 = ((((1.0 - _1664) * (_1659 + 2.0)) * exp2(log2(isnan(1.0) ? _4149 : (isnan(_4149) ? 1.0 : min(_4149, 1.0))) * (_1659 + 1.0))) + _1664) * _1547;
        _1681 = _1514;
        _1682 = _1513;
        _1683 = _1512;
        _1684 = _1524;
        _1685 = _1523;
        _1686 = _1522;
        _1687 = _1534;
        _1688 = _1533;
        _1689 = _1532;
        _1690 = _1547;
        _1691 = _1546;
        _1692 = _1545;
        _1693 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1589 : (isnan(_1589) ? 0.0 : max(_1589, 0.0)));
        _1694 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1631 : (isnan(_1631) ? 0.0 : max(_1631, 0.0)));
        _1695 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1673 : (isnan(_1673) ? 0.0 : max(_1673, 0.0)));
    }
    else
    {
        _1681 = _1372;
        _1682 = _1372;
        _1683 = _1372;
        _1684 = _1372;
        _1685 = _1372;
        _1686 = _1372;
        _1687 = _1372;
        _1688 = _1372;
        _1689 = _1372;
        _1690 = _1372;
        _1691 = _1372;
        _1692 = _1372;
        _1693 = 0.0;
        _1694 = 0.0;
        _1695 = 0.0;
    }
    float _1705 = (cbModelParam._m0[1u].x * (_1693 - _1384)) + _1384;
    float _1706 = (cbModelParam._m0[1u].x * (_1694 - _1385)) + _1385;
    float _1707 = (cbModelParam._m0[1u].x * (_1695 - _1386)) + _1386;
    float _1728 = fma(_1707, cbSceneParam._m0[89u].z, fma(_1706, cbSceneParam._m0[89u].y, _1705 * cbSceneParam._m0[89u].x));
    float _1731 = fma(_1707, cbSceneParam._m0[90u].z, fma(_1706, cbSceneParam._m0[90u].y, _1705 * cbSceneParam._m0[90u].x));
    float _1734 = fma(_1707, cbSceneParam._m0[91u].z, fma(_1706, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1705));
    float _1749 = _1012 * 0.5;
    float _1750 = _1013 * 0.5;
    float _1751 = _1014 * 0.5;
    float _1752 = dot(vec4(_1749, _1750, _1751, 1.0), vec4(_1683, _1686, _1689, _1692));
    float _1755 = dot(vec4(_1749, _1750, _1751, 1.0), vec4(_1682, _1685, _1688, _1691));
    float _1758 = dot(vec4(_1749, _1750, _1751, 1.0), vec4(_1681, _1684, _1687, _1690));
    float _1789;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1765 = dot(vec4(_1749, _1750, _1751, 1.0), vec4(_1371, _1375, _1378, _1381));
        float _1769 = dot(vec4(_1749, _1750, _1751, 1.0), vec4(_1373, _1376, _1379, _1382));
        float _1773 = dot(vec4(_1749, _1750, _1751, 1.0), vec4(_1374, _1377, _1380, _1383));
        float _1780 = dot(vec4(cbModelParam._m0[39u]), vec4(_1749, _1750, _1751, 1.0));
        _1789 = dot(vec3(isnan(0.0) ? _1773 : (isnan(_1773) ? 0.0 : max(_1773, 0.0)), isnan(0.0) ? _1769 : (isnan(_1769) ? 0.0 : max(_1769, 0.0)), isnan(0.0) ? _1765 : (isnan(_1765) ? 0.0 : max(_1765, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1780) ? 0.0 : (isnan(0.0) ? _1780 : max(0.0, _1780))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1789 = 1.0;
    }
    float _1800;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1791 = dot(vec4(cbModelParam._m0[40u]), vec4(_1749, _1750, _1751, 1.0));
        _1800 = dot(vec3(isnan(0.0) ? _1752 : (isnan(_1752) ? 0.0 : max(_1752, 0.0)), isnan(0.0) ? _1755 : (isnan(_1755) ? 0.0 : max(_1755, 0.0)), isnan(0.0) ? _1758 : (isnan(_1758) ? 0.0 : max(_1758, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1791) ? 0.0 : (isnan(0.0) ? _1791 : max(0.0, _1791))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1800 = 1.0;
    }
    float _1804 = (_1800 * cbModelParam._m0[1u].x) + (_1789 * (1.0 - cbModelParam._m0[1u].x));
    float _1814 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _875);
    float _1815 = isnan(_1814) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1814 : min(cbModelParam._m0[25u].z, _1814));
    float _1895;
    float _1897;
    float _1899;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1862 = fma(_1071, cbModelParam._m0[13u].z, fma(_1067, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1063)) + cbModelParam._m0[13u].w;
        float _1866 = fma(_1071, cbModelParam._m0[14u].z, fma(_1067, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1063)) + cbModelParam._m0[14u].w;
        float _1870 = fma(_1071, cbModelParam._m0[15u].z, fma(_1067, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1063)) + cbModelParam._m0[15u].w;
        float _1873 = fma(_1014, cbModelParam._m0[13u].z, fma(_1013, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1012));
        float _1876 = fma(_1014, cbModelParam._m0[14u].z, fma(_1013, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1012));
        float _1879 = fma(_1014, cbModelParam._m0[15u].z, fma(_1013, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1012));
        float _1907;
        if (_1873 > 0.0)
        {
            _1907 = abs((1.0 - _1862) / _1873);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1873 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1862 + 1.0) / _1873);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1907 = frontier_phi_16_14_ladder;
        }
        float _2111;
        if (_1876 > 0.0)
        {
            _2111 = abs((1.0 - _1866) / _1876);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1876 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1866 + 1.0) / _1876);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2111 = frontier_phi_25_21_ladder;
        }
        float _2365;
        if (_1879 > 0.0)
        {
            _2365 = abs((1.0 - _1870) / _1879);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1879 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1870 + 1.0) / _1879);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2365 = frontier_phi_37_32_ladder;
        }
        float _2367 = isnan(_2111) ? _1907 : (isnan(_1907) ? _2111 : min(_1907, _2111));
        float _2368 = isnan(_2365) ? _2367 : (isnan(_2367) ? _2365 : min(_2367, _2365));
        float _2372 = (_2368 * _1873) + _1862;
        float _2373 = (_2368 * _1876) + _1866;
        float _2374 = (_2368 * _1879) + _1870;
        float _2375 = _2368 * 9.9999997473787516355514526367188e-05;
        float _2377 = (-1.0) - _2375;
        float _2379 = _2375 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_2374 > _2379) || ((_2374 < _2377) || ((_2373 > _2379) || ((_2373 < _2377) || ((_2372 < _2377) || (_2372 > _2379))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2502 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2374, cbModelParam._m0[9u].z, fma(_2373, cbModelParam._m0[9u].y, _2372 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2374, cbModelParam._m0[10u].z, fma(_2373, cbModelParam._m0[10u].y, _2372 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2374, cbModelParam._m0[11u].z, fma(_2373, cbModelParam._m0[11u].y, _2372 * cbModelParam._m0[11u].x))), _1815);
            frontier_phi_15_37_ladder = _2502.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2502.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2502.x * cbModelParam._m0[1u].y;
        }
        _1895 = frontier_phi_15_37_ladder_2;
        _1897 = frontier_phi_15_37_ladder_1;
        _1899 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1883 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1012, _1013, _1014), _1815);
        _1895 = _1883.x * cbModelParam._m0[1u].y;
        _1897 = _1883.y * cbModelParam._m0[1u].y;
        _1899 = _1883.z * cbModelParam._m0[1u].y;
    }
    float _1903 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _875);
    float _1904 = isnan(_1903) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1903 : min(cbModelParam._m0[25u].w, _1903));
    float _1995;
    float _1997;
    float _1999;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1959 = fma(_1071, cbModelParam._m0[21u].z, fma(_1067, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1063)) + cbModelParam._m0[21u].w;
        float _1963 = fma(_1071, cbModelParam._m0[22u].z, fma(_1067, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1063)) + cbModelParam._m0[22u].w;
        float _1967 = fma(_1071, cbModelParam._m0[23u].z, fma(_1067, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1063)) + cbModelParam._m0[23u].w;
        float _1970 = fma(_1014, cbModelParam._m0[21u].z, fma(_1013, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1012));
        float _1973 = fma(_1014, cbModelParam._m0[22u].z, fma(_1013, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1012));
        float _1976 = fma(_1014, cbModelParam._m0[23u].z, fma(_1013, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1012));
        float _2116;
        if (_1970 > 0.0)
        {
            _2116 = abs((1.0 - _1959) / _1970);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1970 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1959 + 1.0) / _1970);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _2116 = frontier_phi_27_23_ladder;
        }
        float _2392;
        if (_1973 > 0.0)
        {
            _2392 = abs((1.0 - _1963) / _1973);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1973 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1963 + 1.0) / _1973);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _2392 = frontier_phi_39_34_ladder;
        }
        float _2605;
        if (_1976 > 0.0)
        {
            _2605 = abs((1.0 - _1967) / _1976);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1976 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1967 + 1.0) / _1976);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _2605 = frontier_phi_48_45_ladder;
        }
        float _2607 = isnan(_2392) ? _2116 : (isnan(_2116) ? _2392 : min(_2116, _2392));
        float _2608 = isnan(_2605) ? _2607 : (isnan(_2607) ? _2605 : min(_2607, _2605));
        float _2612 = (_2608 * _1970) + _1959;
        float _2613 = (_2608 * _1973) + _1963;
        float _2614 = (_2608 * _1976) + _1967;
        float _2615 = _2608 * 9.9999997473787516355514526367188e-05;
        float _2616 = (-1.0) - _2615;
        float _2618 = _2615 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2614 > _2618) || ((_2614 < _2616) || ((_2613 > _2618) || ((_2613 < _2616) || ((_2612 < _2616) || (_2612 > _2618))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2848 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2614, cbModelParam._m0[17u].z, fma(_2613, cbModelParam._m0[17u].y, _2612 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2614, cbModelParam._m0[18u].z, fma(_2613, cbModelParam._m0[18u].y, _2612 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2614, cbModelParam._m0[19u].z, fma(_2613, cbModelParam._m0[19u].y, _2612 * cbModelParam._m0[19u].x))), _1904);
            frontier_phi_24_48_ladder = _2848.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2848.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2848.x * cbModelParam._m0[1u].z;
        }
        _1995 = frontier_phi_24_48_ladder_2;
        _1997 = frontier_phi_24_48_ladder_1;
        _1999 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1979 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1012, _1013, _1014), _1904);
        _1995 = _1979.x * cbModelParam._m0[1u].z;
        _1997 = _1979.y * cbModelParam._m0[1u].z;
        _1999 = _1979.z * cbModelParam._m0[1u].z;
    }
    float _2012 = (((_1034 * _993) + _1035) * _1007) * ((cbModelParam._m0[1u].w * (_1995 - _1895)) + _1895);
    float _2014 = (((_1034 * _994) + _1035) * _1007) * ((cbModelParam._m0[1u].w * (_1997 - _1897)) + _1897);
    float _2016 = (((_1034 * _995) + _1035) * _1007) * ((cbModelParam._m0[1u].w * (_1999 - _1899)) + _1899);
    float _2019 = fma(_2016, cbSceneParam._m0[89u].z, fma(_2014, cbSceneParam._m0[89u].y, _2012 * cbSceneParam._m0[89u].x));
    float _2022 = fma(_2016, cbSceneParam._m0[90u].z, fma(_2014, cbSceneParam._m0[90u].y, _2012 * cbSceneParam._m0[90u].x));
    float _2025 = fma(_2016, cbSceneParam._m0[91u].z, fma(_2014, cbSceneParam._m0[91u].y, _2012 * cbSceneParam._m0[91u].x));
    uvec4 _2035 = floatBitsToUint(cbInstanceData._m0[_899 + 5u]);
    uint _2037 = _2035.x * 14u;
    uint _2038 = _2037 + 13u;
    float _2045 = _1007 + (-1.0);
    float _2050 = (cbLight._m0[_2038].x * _2045) + 1.0;
    float _2051 = (cbLight._m0[_2038].y * _2045) + 1.0;
    float _2052 = (cbLight._m0[_2038].z * _2045) + 1.0;
    float _2053 = (cbLight._m0[_2038].w * _2045) + 1.0;
    uint _2054 = _2037 + 5u;
    float _2060 = isnan(1.0) ? _2051 : (isnan(_2051) ? 1.0 : min(_2051, 1.0));
    uint _2064 = _2037 + 4u;
    float _2070 = isnan(1.0) ? _2050 : (isnan(_2050) ? 1.0 : min(_2050, 1.0));
    uint _2074 = _2037 | 1u;
    float _2085 = dot(vec3(cbLight._m0[_2037].xyz), vec3(_634, _635, _636));
    float _2088 = dot(vec3(cbLight._m0[_2074].xyz), vec3(_634, _635, _636));
    float _4307 = isnan(0.0) ? _2085 : (isnan(_2085) ? 0.0 : max(_2085, 0.0));
    float _4318 = isnan(0.0) ? _2088 : (isnan(_2088) ? 0.0 : max(_2088, 0.0));
    float _2093 = (isnan(1.0) ? _4307 : (isnan(_4307) ? 1.0 : min(_4307, 1.0))) * 0.3183098733425140380859375;
    float _2095 = (isnan(1.0) ? _4318 : (isnan(_4318) ? 1.0 : min(_4318, 1.0))) * 0.3183098733425140380859375;
    float _2102 = ((cbLight._m0[_2054].x * _2060) * _2095) + ((cbLight._m0[_2064].x * _2070) * _2093);
    float _2103 = ((_2060 * cbLight._m0[_2054].y) * _2095) + ((_2070 * cbLight._m0[_2064].y) * _2093);
    float _2104 = ((_2060 * cbLight._m0[_2054].z) * _2095) + ((_2070 * cbLight._m0[_2064].z) * _2093);
    uvec4 _2108 = floatBitsToUint(cbLight._m0[_2037 + 12u]);
    bool _2110 = _2108.x == 0u;
    float _2121;
    float _2123;
    float _2125;
    if (_2110)
    {
        _2121 = _2102;
        _2123 = _2103;
        _2125 = _2104;
    }
    else
    {
        uint _2129 = _2037 + 6u;
        float _2145 = (dot(vec3(cbLight._m0[_2037 + 2u].xyz), vec3(_634, _635, _636)) * 0.5) + 0.5;
        float _2146 = _2145 * _2145;
        float _4329 = isnan(0.0) ? _2146 : (isnan(_2146) ? 0.0 : max(_2146, 0.0));
        float _2147 = isnan(1.0) ? _4329 : (isnan(_4329) ? 1.0 : min(_4329, 1.0));
        float _2148 = isnan(1.0) ? _2052 : (isnan(_2052) ? 1.0 : min(_2052, 1.0));
        _2121 = (((cbLight._m0[_2129].x * 0.3183098733425140380859375) * _2147) * _2148) + _2102;
        _2123 = (((cbLight._m0[_2129].y * 0.3183098733425140380859375) * _2147) * _2148) + _2103;
        _2125 = (((cbLight._m0[_2129].z * 0.3183098733425140380859375) * _2147) * _2148) + _2104;
    }
    bool _2128 = _2108.y == 0u;
    float _2166;
    float _2168;
    float _2170;
    if (_2128)
    {
        _2166 = _2121;
        _2168 = _2123;
        _2170 = _2125;
    }
    else
    {
        uint _2336 = _2037 + 7u;
        float _2352 = (dot(vec3(cbLight._m0[_2037 + 3u].xyz), vec3(_634, _635, _636)) * 0.5) + 0.5;
        float _2353 = _2352 * _2352;
        float _4345 = isnan(0.0) ? _2353 : (isnan(_2353) ? 0.0 : max(_2353, 0.0));
        float _2354 = isnan(1.0) ? _4345 : (isnan(_4345) ? 1.0 : min(_4345, 1.0));
        float _2355 = isnan(1.0) ? _2053 : (isnan(_2053) ? 1.0 : min(_2053, 1.0));
        _2166 = (((cbLight._m0[_2336].x * 0.3183098733425140380859375) * _2354) * _2355) + _2121;
        _2168 = (((cbLight._m0[_2336].y * 0.3183098733425140380859375) * _2354) * _2355) + _2123;
        _2170 = (((cbLight._m0[_2336].z * 0.3183098733425140380859375) * _2354) * _2355) + _2125;
    }
    uint _2173 = _2037 + 8u;
    float _2186 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2037].w)) * _875) * 0.949999988079071044921875);
    float _2187 = _2186 * _2186;
    float _2188 = cbLight._m0[_2037].x + _660;
    float _2189 = cbLight._m0[_2037].y + _661;
    float _2190 = cbLight._m0[_2037].z + _662;
    float _2194 = inversesqrt(dot(vec3(_2188, _2189, _2190), vec3(_2188, _2189, _2190)));
    float _2195 = _2194 * _2188;
    float _2196 = _2194 * _2189;
    float _2197 = _2194 * _2190;
    float _2198 = dot(vec3(_634, _635, _636), vec3(cbLight._m0[_2037].xyz));
    float _4361 = isnan(0.0) ? _2198 : (isnan(_2198) ? 0.0 : max(_2198, 0.0));
    float _2201 = isnan(1.0) ? _4361 : (isnan(_4361) ? 1.0 : min(_4361, 1.0));
    float _4372 = isnan(0.0) ? _663 : (isnan(_663) ? 0.0 : max(_663, 0.0));
    float _2202 = isnan(1.0) ? _4372 : (isnan(_4372) ? 1.0 : min(_4372, 1.0));
    float _2203 = dot(vec3(_634, _635, _636), vec3(_2195, _2196, _2197));
    float _4383 = isnan(0.0) ? _2203 : (isnan(_2203) ? 0.0 : max(_2203, 0.0));
    float _2206 = isnan(1.0) ? _4383 : (isnan(_4383) ? 1.0 : min(_4383, 1.0));
    float _2207 = dot(vec3(cbLight._m0[_2037].xyz), vec3(_2195, _2196, _2197));
    float _4394 = isnan(0.0) ? _2207 : (isnan(_2207) ? 0.0 : max(_2207, 0.0));
    float _2211 = _2187 * _2187;
    float _2215 = ((_2206 * _2206) * (_2211 + (-1.0))) + 1.0;
    float _2223 = exp2(log2(1.0 - (isnan(1.0) ? _4394 : (isnan(_4394) ? 1.0 : min(_4394, 1.0)))) * 5.0);
    float _2224 = 0.959999978542327880859375 - _990;
    float _2226 = 0.959999978542327880859375 - _991;
    float _2227 = 0.959999978542327880859375 - _992;
    float _2234 = 1.0 - _2187;
    float _2245 = (0.5 / (((_2202 * ((_2201 * _2234) + _2187)) + 9.9999999392252902907785028219223e-09) + (((_2202 * _2234) + _2187) * _2201))) * _2201;
    float _4405 = isnan(0.0) ? _2245 : (isnan(_2245) ? 0.0 : max(_2245, 0.0));
    float _2247 = (isnan(1.0) ? _4405 : (isnan(_4405) ? 1.0 : min(_4405, 1.0))) * (_2211 / ((_2215 * _2215) * 3.141590118408203125));
    uint _2258 = _2037 + 9u;
    float _2269 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2074].w)) * _875) * 0.949999988079071044921875);
    float _2270 = _2269 * _2269;
    float _2271 = cbLight._m0[_2074].x + _660;
    float _2272 = cbLight._m0[_2074].y + _661;
    float _2273 = cbLight._m0[_2074].z + _662;
    float _2277 = inversesqrt(dot(vec3(_2271, _2272, _2273), vec3(_2271, _2272, _2273)));
    float _2278 = _2277 * _2271;
    float _2279 = _2277 * _2272;
    float _2280 = _2277 * _2273;
    float _2281 = dot(vec3(_634, _635, _636), vec3(cbLight._m0[_2074].xyz));
    float _4416 = isnan(0.0) ? _2281 : (isnan(_2281) ? 0.0 : max(_2281, 0.0));
    float _2284 = isnan(1.0) ? _4416 : (isnan(_4416) ? 1.0 : min(_4416, 1.0));
    float _2285 = dot(vec3(_634, _635, _636), vec3(_2278, _2279, _2280));
    float _4427 = isnan(0.0) ? _2285 : (isnan(_2285) ? 0.0 : max(_2285, 0.0));
    float _2288 = isnan(1.0) ? _4427 : (isnan(_4427) ? 1.0 : min(_4427, 1.0));
    float _2289 = dot(vec3(cbLight._m0[_2074].xyz), vec3(_2278, _2279, _2280));
    float _4438 = isnan(0.0) ? _2289 : (isnan(_2289) ? 0.0 : max(_2289, 0.0));
    float _2293 = _2270 * _2270;
    float _2297 = ((_2288 * _2288) * (_2293 + (-1.0))) + 1.0;
    float _2304 = exp2(log2(1.0 - (isnan(1.0) ? _4438 : (isnan(_4438) ? 1.0 : min(_4438, 1.0)))) * 5.0);
    float _2311 = 1.0 - _2270;
    float _2321 = (0.5 / (((_2202 * ((_2284 * _2311) + _2270)) + 9.9999999392252902907785028219223e-09) + (((_2202 * _2311) + _2270) * _2284))) * _2284;
    float _4449 = isnan(0.0) ? _2321 : (isnan(_2321) ? 0.0 : max(_2321, 0.0));
    float _2323 = (isnan(1.0) ? _4449 : (isnan(_4449) ? 1.0 : min(_4449, 1.0))) * (_2293 / ((_2297 * _2297) * 3.141590118408203125));
    float _2333 = (((((_2304 * _2224) + _993) * cbLight._m0[_2258].x) * _2323) * _2060) + (((((_2223 * _2224) + _993) * cbLight._m0[_2173].x) * _2247) * _2070);
    float _2334 = (((((_2304 * _2226) + _994) * cbLight._m0[_2258].y) * _2323) * _2060) + (((((_2223 * _2226) + _994) * cbLight._m0[_2173].y) * _2247) * _2070);
    float _2335 = (((((_2304 * _2227) + _995) * cbLight._m0[_2258].z) * _2323) * _2060) + (((((_2223 * _2227) + _995) * cbLight._m0[_2173].z) * _2247) * _2070);
    float _2397;
    float _2399;
    float _2401;
    if (_2110)
    {
        _2397 = _2333;
        _2399 = _2334;
        _2401 = _2335;
    }
    else
    {
        uint _2403 = _2037 + 2u;
        uint _2407 = _2037 + 10u;
        float _2421 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2403].w)) * _875) * 0.949999988079071044921875);
        float _2422 = _2421 * _2421;
        float _2423 = cbLight._m0[_2403].x + _660;
        float _2424 = cbLight._m0[_2403].y + _661;
        float _2425 = cbLight._m0[_2403].z + _662;
        float _2429 = inversesqrt(dot(vec3(_2423, _2424, _2425), vec3(_2423, _2424, _2425)));
        float _2430 = _2429 * _2423;
        float _2431 = _2429 * _2424;
        float _2432 = _2429 * _2425;
        float _2433 = dot(vec3(_634, _635, _636), vec3(cbLight._m0[_2403].xyz));
        float _4460 = isnan(0.0) ? _2433 : (isnan(_2433) ? 0.0 : max(_2433, 0.0));
        float _2436 = isnan(1.0) ? _4460 : (isnan(_4460) ? 1.0 : min(_4460, 1.0));
        float _2437 = dot(vec3(_634, _635, _636), vec3(_2430, _2431, _2432));
        float _4471 = isnan(0.0) ? _2437 : (isnan(_2437) ? 0.0 : max(_2437, 0.0));
        float _2440 = isnan(1.0) ? _4471 : (isnan(_4471) ? 1.0 : min(_4471, 1.0));
        float _2441 = dot(vec3(cbLight._m0[_2403].xyz), vec3(_2430, _2431, _2432));
        float _4482 = isnan(0.0) ? _2441 : (isnan(_2441) ? 0.0 : max(_2441, 0.0));
        float _2445 = _2422 * _2422;
        float _2449 = ((_2440 * _2440) * (_2445 + (-1.0))) + 1.0;
        float _2456 = exp2(log2(1.0 - (isnan(1.0) ? _4482 : (isnan(_4482) ? 1.0 : min(_4482, 1.0)))) * 5.0);
        float _2463 = 1.0 - _2422;
        float _2473 = (0.5 / (((_2202 * ((_2436 * _2463) + _2422)) + 9.9999999392252902907785028219223e-09) + (((_2202 * _2463) + _2422) * _2436))) * _2436;
        float _4493 = isnan(0.0) ? _2473 : (isnan(_2473) ? 0.0 : max(_2473, 0.0));
        float _2475 = (isnan(1.0) ? _4493 : (isnan(_4493) ? 1.0 : min(_4493, 1.0))) * (_2445 / ((_2449 * _2449) * 3.141590118408203125));
        float _2476 = isnan(1.0) ? _2052 : (isnan(_2052) ? 1.0 : min(_2052, 1.0));
        _2397 = (((((_2456 * _2224) + _993) * cbLight._m0[_2407].x) * _2475) * _2476) + _2333;
        _2399 = (((((_2456 * _2226) + _994) * cbLight._m0[_2407].y) * _2475) * _2476) + _2334;
        _2401 = (((((_2456 * _2227) + _995) * cbLight._m0[_2407].z) * _2475) * _2476) + _2335;
    }
    float _2511;
    float _2513;
    float _2515;
    if (_2128)
    {
        _2511 = _2397;
        _2513 = _2399;
        _2515 = _2401;
    }
    else
    {
        uint _2522 = _2037 + 3u;
        uint _2526 = _2037 + 11u;
        float _2540 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2522].w)) * _875) * 0.949999988079071044921875);
        float _2541 = _2540 * _2540;
        float _2542 = cbLight._m0[_2522].x + _660;
        float _2543 = cbLight._m0[_2522].y + _661;
        float _2544 = cbLight._m0[_2522].z + _662;
        float _2548 = inversesqrt(dot(vec3(_2542, _2543, _2544), vec3(_2542, _2543, _2544)));
        float _2549 = _2548 * _2542;
        float _2550 = _2548 * _2543;
        float _2551 = _2548 * _2544;
        float _2552 = dot(vec3(_634, _635, _636), vec3(cbLight._m0[_2522].xyz));
        float _4509 = isnan(0.0) ? _2552 : (isnan(_2552) ? 0.0 : max(_2552, 0.0));
        float _2555 = isnan(1.0) ? _4509 : (isnan(_4509) ? 1.0 : min(_4509, 1.0));
        float _2556 = dot(vec3(_634, _635, _636), vec3(_2549, _2550, _2551));
        float _4520 = isnan(0.0) ? _2556 : (isnan(_2556) ? 0.0 : max(_2556, 0.0));
        float _2559 = isnan(1.0) ? _4520 : (isnan(_4520) ? 1.0 : min(_4520, 1.0));
        float _2560 = dot(vec3(cbLight._m0[_2522].xyz), vec3(_2549, _2550, _2551));
        float _4531 = isnan(0.0) ? _2560 : (isnan(_2560) ? 0.0 : max(_2560, 0.0));
        float _2564 = _2541 * _2541;
        float _2568 = ((_2559 * _2559) * (_2564 + (-1.0))) + 1.0;
        float _2575 = exp2(log2(1.0 - (isnan(1.0) ? _4531 : (isnan(_4531) ? 1.0 : min(_4531, 1.0)))) * 5.0);
        float _2582 = 1.0 - _2541;
        float _2592 = (0.5 / (((_2202 * ((_2555 * _2582) + _2541)) + 9.9999999392252902907785028219223e-09) + (((_2202 * _2582) + _2541) * _2555))) * _2555;
        float _4542 = isnan(0.0) ? _2592 : (isnan(_2592) ? 0.0 : max(_2592, 0.0));
        float _2594 = (isnan(1.0) ? _4542 : (isnan(_4542) ? 1.0 : min(_4542, 1.0))) * (_2564 / ((_2568 * _2568) * 3.141590118408203125));
        float _2595 = isnan(1.0) ? _2053 : (isnan(_2053) ? 1.0 : min(_2053, 1.0));
        _2511 = (((((_2575 * _2224) + _993) * cbLight._m0[_2526].x) * _2594) * _2595) + _2397;
        _2513 = (((((_2575 * _2226) + _994) * cbLight._m0[_2526].y) * _2594) * _2595) + _2399;
        _2515 = (((((_2575 * _2227) + _995) * cbLight._m0[_2526].z) * _2594) * _2595) + _2401;
    }
    float _2729;
    float _2731;
    float _2733;
    float _2735;
    float _2737;
    float _2739;
    if (_2035.y == 0u)
    {
        float _2670 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2671 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2670;
        float _2672 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2670;
        float _2673 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2670;
        uvec4 _2685 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2686 = _2685.x;
        uint _2697 = uint((float(_2685.y) * floor(float(uint(cbSceneParam._m0[85u].y * _798) / _2686))) + floor(float(uint(cbSceneParam._m0[85u].x * _797) / _2686)));
        float _2707 = (log2(_2673 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2708 = isnan(0.0) ? _2707 : (isnan(_2707) ? 0.0 : max(_2707, 0.0));
        uint _2711 = uint(isnan(14.0) ? _2708 : (isnan(_2708) ? 14.0 : min(_2708, 14.0)));
        uvec4 _2716 = texelFetch(g_lightClusterGridBuffer, int(((_2711 << 2u) + (_2697 << 6u)) >> 2u));
        uint _2717 = _2716.x;
        uint _2718 = _2685.z;
        float _2853;
        float _2855;
        float _2857;
        float _2859;
        float _2861;
        float _2863;
        if (((((1u << ((_2718 >> 4u) & 15u)) + 4294967295u) & _2717) == 0u) || ((_2718 & 240u) == 0u))
        {
            _2853 = 0.0;
            _2855 = 0.0;
            _2857 = 0.0;
            _2859 = 0.0;
            _2861 = 0.0;
            _2863 = 0.0;
        }
        else
        {
            float _2854;
            float _2856;
            float _2858;
            float _2860;
            float _2862;
            float _2864;
            float _3006 = 0.0;
            float _3007 = 0.0;
            float _3008 = 0.0;
            float _3009 = 0.0;
            float _3010 = 0.0;
            float _3011 = 0.0;
            uint _3012 = 0u;
            uint _3021;
            bool _3022;
            for (;;)
            {
                _3021 = texelFetch(g_lightClassification, int((((_2711 << 5u) + (_2697 << 9u)) + (_3012 << 2u)) >> 2u)).x;
                _3022 = _3021 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_3022)
                {
                    frontier_phi_63_pred = _3011;
                    frontier_phi_63_pred_1 = _3010;
                    frontier_phi_63_pred_2 = _3009;
                    frontier_phi_63_pred_3 = _3008;
                    frontier_phi_63_pred_4 = _3007;
                    frontier_phi_63_pred_5 = _3006;
                }
                else
                {
                    float _3130;
                    float _3131;
                    float _3132;
                    float _3133;
                    float _3134;
                    float _3135;
                    uint _3136;
                    _3130 = _3006;
                    _3131 = _3007;
                    _3132 = _3008;
                    _3133 = _3009;
                    _3134 = _3010;
                    _3135 = _3011;
                    _3136 = _3021;
                    float _3062;
                    float _3063;
                    float _3064;
                    float _3065;
                    float _3066;
                    float _3067;
                    for (;;)
                    {
                        uint _3140 = uint(findLSB(_3136)) + (_3012 << 5u);
                        uint _3137 = (_3136 + 4294967295u) & _3136;
                        uint _3142 = _3140 * 48u;
                        vec4 _3156 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3142)).x, texelFetch(g_PointLightRenderingBuffer, int(_3142 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3142 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3142 + 3u)).x));
                        uint _3162 = (_3140 * 48u) + 4u;
                        vec4 _3175 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3162)).x, texelFetch(g_PointLightRenderingBuffer, int(_3162 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3162 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3162 + 3u)).x));
                        uint _3181 = (_3140 * 48u) + 8u;
                        vec3 _3192 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3181)).x, texelFetch(g_PointLightRenderingBuffer, int(_3181 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3181 + 2u)).x));
                        float _3196 = _3156.x - _2671;
                        float _3197 = _3156.y - _2672;
                        float _3198 = _3156.z - _2673;
                        float _3199 = dot(vec3(_3196, _3197, _3198), vec3(_3196, _3197, _3198));
                        float _3202 = inversesqrt(_3199);
                        float _3203 = _3202 * _3196;
                        float _3204 = _3202 * _3197;
                        float _3205 = _3202 * _3198;
                        float _3206 = dot(vec3(_820, _823, _826), vec3(_3203, _3204, _3205));
                        float _3211 = 1.0 - (_3199 * _3156.w);
                        float _4568 = isnan(0.0) ? _3211 : (isnan(_3211) ? 0.0 : max(_3211, 0.0));
                        float _3212 = isnan(1.0) ? _4568 : (isnan(_4568) ? 1.0 : min(_4568, 1.0));
                        float _3213 = sqrt(_3199) * _3175.w;
                        float _3216 = 1.39999997615814208984375 / (_3213 + 1.39999997615814208984375);
                        float _3217 = _3216 * _3216;
                        float _3220 = ((1.0 - _3217) * _3206) + _3217;
                        float _3223 = _3213 * _3213;
                        float _3226 = ((isnan(0.0) ? _3220 : (isnan(_3220) ? 0.0 : max(_3220, 0.0))) * _3212) / ((_3223 * 0.699999988079071044921875) + 1.0);
                        float _3230 = (-0.0) - _2671;
                        float _3231 = (-0.0) - _2672;
                        float _3232 = (-0.0) - _2673;
                        float _3236 = inversesqrt(dot(vec3(_3230, _3231, _3232), vec3(_3230, _3231, _3232)));
                        float _3237 = _3236 * _3230;
                        float _3238 = _3236 * _3231;
                        float _3239 = _3236 * _3232;
                        float _3247 = exp2(log2(1.0 / ((_3223 * 3.5) + 5.0)) * 0.25);
                        float _3248 = 1.0 - _1017;
                        float _3255 = sqrt(1.0 - ((1.0 - (_3248 * _3248)) * (1.0 - (_3247 * _3247))));
                        float _3256 = _3255 * _3255;
                        float _3257 = _3256 * _3256;
                        float _3258 = _3237 + _3203;
                        float _3259 = _3238 + _3204;
                        float _3260 = _3239 + _3205;
                        float _3264 = inversesqrt(dot(vec3(_3258, _3259, _3260), vec3(_3258, _3259, _3260)));
                        float _3268 = dot(vec3(_820, _823, _826), vec3(_3237, _3238, _3239));
                        float _4584 = isnan(0.0) ? _3268 : (isnan(_3268) ? 0.0 : max(_3268, 0.0));
                        float _3271 = isnan(1.0) ? _4584 : (isnan(_4584) ? 1.0 : min(_4584, 1.0));
                        float _3272 = dot(vec3(_820, _823, _826), vec3(_3264 * _3258, _3264 * _3259, _3264 * _3260));
                        float _4595 = isnan(0.0) ? _3272 : (isnan(_3272) ? 0.0 : max(_3272, 0.0));
                        float _3275 = isnan(1.0) ? _4595 : (isnan(_4595) ? 1.0 : min(_4595, 1.0));
                        float _3279 = ((_3275 * _3275) * (_3257 + (-1.0))) + 1.0;
                        float _3280 = _3216 * _3256;
                        float _3281 = _3280 * _3280;
                        float _3284 = ((1.0 - _3281) * _3206) + _3281;
                        float _4606 = isnan(0.0) ? _3284 : (isnan(_3284) ? 0.0 : max(_3284, 0.0));
                        float _3285 = isnan(1.0) ? _4606 : (isnan(_4606) ? 1.0 : min(_4606, 1.0));
                        float _3286 = 1.0 - _3256;
                        float _3296 = (0.5 / (((_3285 * ((_3271 * _3286) + _3256)) + 9.9999999392252902907785028219223e-09) + (((_3285 * _3286) + _3256) * _3271))) * _3285;
                        float _4617 = isnan(0.0) ? _3296 : (isnan(_3296) ? 0.0 : max(_3296, 0.0));
                        float _3307 = (((_3257 * 3.1415927410125732421875) * (isnan(1.0) ? _4617 : (isnan(_4617) ? 1.0 : min(_4617, 1.0)))) / ((_3279 * _3279) * ((_3223 * 2.1991131305694580078125) + 3.141590118408203125))) * _3212;
                        _3065 = (_3226 * _3175.x) + _3133;
                        _3066 = (_3226 * _3175.y) + _3134;
                        _3067 = (_3226 * _3175.z) + _3135;
                        _3062 = (_3307 * _3192.x) + _3130;
                        _3063 = (_3307 * _3192.y) + _3131;
                        _3064 = (_3307 * _3192.z) + _3132;
                        if (_3137 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3130 = _3062;
                            _3131 = _3063;
                            _3132 = _3064;
                            _3133 = _3065;
                            _3134 = _3066;
                            _3135 = _3067;
                            _3136 = _3137;
                        }
                    }
                    frontier_phi_63_pred = _3067;
                    frontier_phi_63_pred_1 = _3066;
                    frontier_phi_63_pred_2 = _3065;
                    frontier_phi_63_pred_3 = _3064;
                    frontier_phi_63_pred_4 = _3063;
                    frontier_phi_63_pred_5 = _3062;
                }
                _2864 = frontier_phi_63_pred;
                _2862 = frontier_phi_63_pred_1;
                _2860 = frontier_phi_63_pred_2;
                _2858 = frontier_phi_63_pred_3;
                _2856 = frontier_phi_63_pred_4;
                _2854 = frontier_phi_63_pred_5;
                uint _3013 = _3012 + 1u;
                if (_3013 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3006 = _2854;
                    _3007 = _2856;
                    _3008 = _2858;
                    _3009 = _2860;
                    _3010 = _2862;
                    _3011 = _2864;
                    _3012 = _3013;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2853 = _2854;
            _2855 = _2856;
            _2857 = _2858;
            _2859 = _2860;
            _2861 = _2862;
            _2863 = _2864;
        }
        uvec4 _2867 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2868 = _2867.z;
        uint _2870 = (_2868 >> 8u) & 15u;
        float _2974;
        float _2976;
        float _2978;
        float _2980;
        float _2982;
        float _2984;
        if (((4294967295u << _2870) & _2717) == 0u)
        {
            _2974 = _2853;
            _2976 = _2855;
            _2978 = _2857;
            _2980 = _2859;
            _2982 = _2861;
            _2984 = _2863;
        }
        else
        {
            float _2999 = inversesqrt(dot(vec3(_2671, _2672, _2673), vec3(_2671, _2672, _2673)));
            float _3000 = _2999 * _2671;
            float _3001 = _2999 * _2672;
            float _3002 = _2999 * _2673;
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2870 < ((_2868 >> 12u) & 15u))
            {
                float _2975;
                float _2977;
                float _2979;
                float _2981;
                float _2983;
                float _2985;
                float _3113 = _2853;
                float _3114 = _2855;
                float _3115 = _2857;
                float _3116 = _2859;
                float _3117 = _2861;
                float _3118 = _2863;
                uint _3119 = _2870;
                uint _3128;
                bool _3129;
                for (;;)
                {
                    _3128 = texelFetch(g_lightClassification, int((((_2711 << 5u) + (_2697 << 9u)) + (_3119 << 2u)) >> 2u)).x;
                    _3129 = _3128 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_3129)
                    {
                        frontier_phi_69_pred = _3118;
                        frontier_phi_69_pred_1 = _3117;
                        frontier_phi_69_pred_2 = _3116;
                        frontier_phi_69_pred_3 = _3115;
                        frontier_phi_69_pred_4 = _3114;
                        frontier_phi_69_pred_5 = _3113;
                    }
                    else
                    {
                        float _3312;
                        float _3313;
                        float _3314;
                        float _3315;
                        float _3316;
                        float _3317;
                        float _3607;
                        float _3608;
                        float _3609;
                        float _3610;
                        float _3611;
                        float _3612;
                        float _3325 = _3113;
                        float _3326 = _3114;
                        float _3327 = _3115;
                        float _3328 = _3116;
                        float _3329 = _3117;
                        float _3330 = _3118;
                        uint _3331 = _3128;
                        uint _3332;
                        vec4 _3357;
                        float _3358;
                        vec4 _3373;
                        vec3 _3385;
                        vec4 _3400;
                        vec4 _3416;
                        float _3463;
                        bool _3464;
                        for (;;)
                        {
                            uint _3342 = ((_3119 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3331));
                            _3332 = (_3331 + 4294967295u) & _3331;
                            uint _3344 = _3342 * 40u;
                            _3357 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3344)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3344 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3344 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3344 + 3u)).x));
                            _3358 = _3357.w;
                            uint _3360 = (_3342 * 40u) + 4u;
                            _3373 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3360)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3360 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3360 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3360 + 3u)).x));
                            uint _3375 = (_3342 * 40u) + 8u;
                            _3385 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3375)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3375 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3375 + 2u)).x));
                            uint _3387 = (_3342 * 40u) + 16u;
                            _3400 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3387)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3387 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3387 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3387 + 3u)).x));
                            uint _3403 = (_3342 * 40u) + 20u;
                            _3416 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3403)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3403 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3403 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3403 + 3u)).x));
                            uint _3419 = (_3342 * 40u) + 24u;
                            vec4 _3432 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3419)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3419 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3419 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3419 + 3u)).x));
                            uint _3438 = (_3342 * 40u) + 28u;
                            vec4 _3451 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3438)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3438 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3438 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3438 + 3u)).x));
                            _3463 = fma(_2673, _3451.z, fma(_2672, _3451.y, _3451.x * _2671)) + _3451.w;
                            _3464 = !((fma(_2673, _3432.z, fma(_2672, _3432.y, _3432.x * _2671)) + _3432.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_3464)
                            {
                                float _3491 = _3357.x - _2671;
                                float _3492 = _3357.y - _2672;
                                float _3493 = _3357.z - _2673;
                                float _3494 = dot(vec3(_3491, _3492, _3493), vec3(_3491, _3492, _3493));
                                float _3497 = inversesqrt(_3494);
                                float _3498 = _3497 * _3491;
                                float _3499 = _3497 * _3492;
                                float _3500 = _3497 * _3493;
                                float _3504 = 1.0 - (_3494 / (_3358 * _3358));
                                float _4628 = isnan(0.0) ? _3504 : (isnan(_3504) ? 0.0 : max(_3504, 0.0));
                                float _3505 = isnan(1.0) ? _4628 : (isnan(_4628) ? 1.0 : min(_4628, 1.0));
                                float _3509 = sqrt(_3494) * _3373.w;
                                float _3511 = 1.39999997615814208984375 / (_3509 + 1.39999997615814208984375);
                                float _3512 = _3511 * _3511;
                                float _3515 = ((1.0 - _3512) * dot(vec3(_3498, _3499, _3500), vec3(_820, _823, _826))) + _3512;
                                float _3518 = _3509 * _3509;
                                float _3522 = (fma(_2673, _3400.z, fma(_2672, _3400.y, _3400.x * _2671)) + _3400.w) / _3463;
                                float _3523 = (fma(_2673, _3416.z, fma(_2672, _3416.y, _3416.x * _2671)) + _3416.w) / _3463;
                                float _3527 = 1.0 - dot(vec2(_3522, _3523), vec2(_3522, _3523));
                                float _4644 = isnan(0.0) ? _3527 : (isnan(_3527) ? 0.0 : max(_3527, 0.0));
                                float _3528 = isnan(1.0) ? _4644 : (isnan(_4644) ? 1.0 : min(_4644, 1.0));
                                float _3529 = _3528 * (((isnan(0.0) ? _3515 : (isnan(_3515) ? 0.0 : max(_3515, 0.0))) * _3505) / ((_3518 * 0.699999988079071044921875) + 1.0));
                                float _3541 = exp2(log2(1.0 / ((_3518 * 3.5) + 5.0)) * 0.25);
                                float _3542 = 1.0 - _1017;
                                float _3549 = sqrt(1.0 - ((1.0 - (_3542 * _3542)) * (1.0 - (_3541 * _3541))));
                                float _3550 = _3549 * _3549;
                                float _3551 = _3550 * _3550;
                                float _3552 = _3498 - _3000;
                                float _3553 = _3499 - _3001;
                                float _3554 = _3500 - _3002;
                                float _3558 = inversesqrt(dot(vec3(_3552, _3553, _3554), vec3(_3552, _3553, _3554)));
                                float _3562 = dot(vec3(_820, _823, _826), vec3((-0.0) - _3000, (-0.0) - _3001, (-0.0) - _3002));
                                float _4655 = isnan(0.0) ? _3562 : (isnan(_3562) ? 0.0 : max(_3562, 0.0));
                                float _3565 = isnan(1.0) ? _4655 : (isnan(_4655) ? 1.0 : min(_4655, 1.0));
                                float _3566 = dot(vec3(_820, _823, _826), vec3(_3558 * _3552, _3558 * _3553, _3558 * _3554));
                                float _4666 = isnan(0.0) ? _3566 : (isnan(_3566) ? 0.0 : max(_3566, 0.0));
                                float _3569 = isnan(1.0) ? _4666 : (isnan(_4666) ? 1.0 : min(_4666, 1.0));
                                float _3573 = ((_3569 * _3569) * (_3551 + (-1.0))) + 1.0;
                                float _3574 = _3511 * _3550;
                                float _3575 = _3574 * _3574;
                                float _3581 = ((1.0 - _3575) * dot(vec3(_820, _823, _826), vec3(_3498, _3499, _3500))) + _3575;
                                float _4677 = isnan(0.0) ? _3581 : (isnan(_3581) ? 0.0 : max(_3581, 0.0));
                                float _3582 = isnan(1.0) ? _4677 : (isnan(_4677) ? 1.0 : min(_4677, 1.0));
                                float _3583 = 1.0 - _3550;
                                float _3593 = (0.5 / (((_3582 * ((_3565 * _3583) + _3550)) + 9.9999999392252902907785028219223e-09) + (((_3582 * _3583) + _3550) * _3565))) * _3582;
                                float _4688 = isnan(0.0) ? _3593 : (isnan(_3593) ? 0.0 : max(_3593, 0.0));
                                float _3603 = (_3528 * _3505) * (((_3551 * 3.1415927410125732421875) * (isnan(1.0) ? _4688 : (isnan(_4688) ? 1.0 : min(_4688, 1.0)))) / ((_3573 * _3573) * ((_3518 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_75_pred = _3529 * _3373.z;
                                frontier_phi_75_pred_1 = _3529 * _3373.y;
                                frontier_phi_75_pred_2 = _3529 * _3373.x;
                                frontier_phi_75_pred_3 = _3603 * _3385.z;
                                frontier_phi_75_pred_4 = _3603 * _3385.y;
                                frontier_phi_75_pred_5 = _3603 * _3385.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _3612 = frontier_phi_75_pred;
                            _3611 = frontier_phi_75_pred_1;
                            _3610 = frontier_phi_75_pred_2;
                            _3609 = frontier_phi_75_pred_3;
                            _3608 = frontier_phi_75_pred_4;
                            _3607 = frontier_phi_75_pred_5;
                            _3315 = _3610 + _3328;
                            _3316 = _3611 + _3329;
                            _3317 = _3612 + _3330;
                            _3312 = _3607 + _3325;
                            _3313 = _3608 + _3326;
                            _3314 = _3609 + _3327;
                            if (_3332 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3325 = _3312;
                                _3326 = _3313;
                                _3327 = _3314;
                                _3328 = _3315;
                                _3329 = _3316;
                                _3330 = _3317;
                                _3331 = _3332;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _3317;
                        frontier_phi_69_pred_1 = _3316;
                        frontier_phi_69_pred_2 = _3315;
                        frontier_phi_69_pred_3 = _3314;
                        frontier_phi_69_pred_4 = _3313;
                        frontier_phi_69_pred_5 = _3312;
                    }
                    _2985 = frontier_phi_69_pred;
                    _2983 = frontier_phi_69_pred_1;
                    _2981 = frontier_phi_69_pred_2;
                    _2979 = frontier_phi_69_pred_3;
                    _2977 = frontier_phi_69_pred_4;
                    _2975 = frontier_phi_69_pred_5;
                    uint _3120 = _3119 + 1u;
                    if (_3120 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3113 = _2975;
                        _3114 = _2977;
                        _3115 = _2979;
                        _3116 = _2981;
                        _3117 = _2983;
                        _3118 = _2985;
                        _3119 = _3120;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2985;
                frontier_phi_57_58_ladder_1 = _2983;
                frontier_phi_57_58_ladder_2 = _2981;
                frontier_phi_57_58_ladder_3 = _2979;
                frontier_phi_57_58_ladder_4 = _2977;
                frontier_phi_57_58_ladder_5 = _2975;
            }
            else
            {
                frontier_phi_57_58_ladder = _2863;
                frontier_phi_57_58_ladder_1 = _2861;
                frontier_phi_57_58_ladder_2 = _2859;
                frontier_phi_57_58_ladder_3 = _2857;
                frontier_phi_57_58_ladder_4 = _2855;
                frontier_phi_57_58_ladder_5 = _2853;
            }
            _2974 = frontier_phi_57_58_ladder_5;
            _2976 = frontier_phi_57_58_ladder_4;
            _2978 = frontier_phi_57_58_ladder_3;
            _2980 = frontier_phi_57_58_ladder_2;
            _2982 = frontier_phi_57_58_ladder_1;
            _2984 = frontier_phi_57_58_ladder;
        }
        float _2989 = isnan(1.0) ? _1007 : (isnan(_1007) ? 1.0 : min(_1007, 1.0));
        _2729 = (_2989 * _2980) + _2166;
        _2731 = (_2989 * _2982) + _2168;
        _2733 = (_2989 * _2984) + _2170;
        _2735 = ((_2974 * _993) * _2989) + _2511;
        _2737 = ((_2976 * _994) * _2989) + _2513;
        _2739 = ((_2978 * _995) * _2989) + _2515;
    }
    else
    {
        _2729 = _2166;
        _2731 = _2168;
        _2733 = _2170;
        _2735 = _2511;
        _2737 = _2513;
        _2739 = _2515;
    }
    uint _2745 = _900 + uint(cbMatDynParam._m0[0u].w);
    float _2751 = cbInstanceData._m0[_2745].x * (((((cbMatDynParam._m0[8u].x - cbMatDynParam._m0[7u].x) * _676) + cbMatDynParam._m0[7u].x) + (((((cbMtdParam._m0[12u].x * cbMtdParam._m0[16u].z) * cbMtdParam._m0[15u].w) * _572) * _585.x) * _705)) + (((_734 - (_734 * _642)) + (cbMatDynParam._m0[11u].x * _765)) * cbMatDynParam._m0[9u].x));
    float _2752 = cbInstanceData._m0[_2745].y * (((((cbMatDynParam._m0[8u].y - cbMatDynParam._m0[7u].y) * _676) + cbMatDynParam._m0[7u].y) + (((((cbMtdParam._m0[12u].y * cbMtdParam._m0[16u].z) * cbMtdParam._m0[15u].w) * _572) * _585.y) * _705)) + (((_736 - (_736 * _642)) + (cbMatDynParam._m0[11u].y * _765)) * cbMatDynParam._m0[9u].y));
    float _2753 = cbInstanceData._m0[_2745].z * (((((cbMatDynParam._m0[8u].z - cbMatDynParam._m0[7u].z) * _676) + cbMatDynParam._m0[7u].z) + (((((cbMtdParam._m0[12u].z * cbMtdParam._m0[16u].z) * cbMtdParam._m0[15u].w) * _572) * _585.z) * _705)) + (((_738 - (_738 * _642)) + (cbMatDynParam._m0[11u].z * _765)) * cbMatDynParam._m0[9u].z));
    float _4704 = isnan(0.0) ? _984 : (isnan(_984) ? 0.0 : max(_984, 0.0));
    float _4715 = isnan(0.0) ? _985 : (isnan(_985) ? 0.0 : max(_985, 0.0));
    float _4726 = isnan(0.0) ? _986 : (isnan(_986) ? 0.0 : max(_986, 0.0));
    float _4737 = isnan(0.0) ? _637 : (isnan(_637) ? 0.0 : max(_637, 0.0));
    float _2771 = (((isnan(1.0) ? _4704 : (isnan(_4704) ? 1.0 : min(_4704, 1.0))) * (_2729 + ((isnan(0.0) ? _1728 : (isnan(_1728) ? 0.0 : max(_1728, 0.0))) * _1007))) + ((_2735 + ((isnan(0.0) ? _2019 : (isnan(_2019) ? 0.0 : max(_2019, 0.0))) * _1804)) * cbPerFrame._m0[3u].x)) + _2751;
    float _2773 = (_2752 + ((_2737 + ((isnan(0.0) ? _2022 : (isnan(_2022) ? 0.0 : max(_2022, 0.0))) * _1804)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4715 : (isnan(_4715) ? 1.0 : min(_4715, 1.0))) * (_2731 + ((isnan(0.0) ? _1731 : (isnan(_1731) ? 0.0 : max(_1731, 0.0))) * _1007)));
    float _2775 = (_2753 + ((_2739 + ((isnan(0.0) ? _2025 : (isnan(_2025) ? 0.0 : max(_2025, 0.0))) * _1804)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4726 : (isnan(_4726) ? 1.0 : min(_4726, 1.0))) * (_2733 + ((isnan(0.0) ? _1734 : (isnan(_1734) ? 0.0 : max(_1734, 0.0))) * _1007)));
    float _2793 = ((cbMtdParam._m0[2u].w - cbMatDynParam._m0[12u].y) * _705) + cbMatDynParam._m0[12u].y;
    float _2798 = cbInstanceData._m0[_899 + 6u].w * (isnan(1.0) ? _4737 : (isnan(_4737) ? 1.0 : min(_4737, 1.0)));
    float _2803 = _797 / cbSceneParam._m0[86u].x;
    float _2804 = _798 / cbSceneParam._m0[86u].y;
    vec4 _2818 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2803, _2804, (log2((isnan(cbSceneParam._m0[77u].w) ? _791 : (isnan(_791) ? cbSceneParam._m0[77u].w : min(_791, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2820 = _2818.x;
    float _2821 = _2818.y;
    float _2822 = _2818.z;
    float _2823 = _2818.w;
    float _2915;
    float _2917;
    float _2919;
    float _2921;
    if (_791 > cbSceneParam._m0[78u].w)
    {
        float _2878 = isnan(_791) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _791 : min(cbSceneParam._m0[80u].w, _791));
        float _2879 = _2878 / _791;
        float _2890 = _2879 * _293;
        float _2891 = _294 * _2879;
        float _2892 = (-0.0) - _2891;
        float _2893 = _2879 * _295;
        float _2895 = (cbSceneParam._m0[77u].w * _2892) / _2878;
        float _2896 = _2895 + cbSceneParam._m0[79u].w;
        float _2897 = cbSceneParam._m0[79u].w - _2891;
        float _2903 = sqrt(((_2890 * _2890) + (_2891 * _2891)) + (_2893 * _2893));
        float _2906 = (1.0 - (cbSceneParam._m0[77u].w / _2878)) * _2903;
        float _2911 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2913 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3075;
        if (abs((_2892 - _2895) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3075 = ((((_2896 > 0.0) ? exp2(_2911 * _2896) : (2.0 - exp2(_2913 * _2896))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2906;
        }
        else
        {
            float _3035 = 1.0 / cbSceneParam._m0[80u].x;
            float _3036 = isnan(_2897) ? _2896 : (isnan(_2896) ? _2897 : max(_2896, _2897));
            float _3037 = isnan(_2897) ? _2896 : (isnan(_2896) ? _2897 : min(_2896, _2897));
            float _3046 = isnan(0.0) ? _3036 : (isnan(_3036) ? 0.0 : min(_3036, 0.0));
            float _3047 = isnan(0.0) ? _3037 : (isnan(_3037) ? 0.0 : min(_3037, 0.0));
            _3075 = ((abs(_2903 / _2892) * cbSceneParam._m0[80u].y) * ((((_3046 - _3047) * 2.0) - ((exp2(_2911 * (isnan(0.0) ? _3036 : (isnan(_3036) ? 0.0 : max(_3036, 0.0)))) - exp2(_2911 * (isnan(0.0) ? _3037 : (isnan(_3037) ? 0.0 : max(_3037, 0.0))))) * _3035)) - ((exp2(_2913 * _3046) - exp2(_2913 * _3047)) * _3035))) + (_2906 * cbSceneParam._m0[80u].z);
        }
        vec4 _3077 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2803, _2804, 1.0), 0.0);
        float _3086 = exp2((_3075 * (-1.44269502162933349609375)) * (1.0 - _3077.w));
        float _3087 = log2(_3086);
        float _3103 = log2(_2823);
        _2915 = (exp2(_3103 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3087 * cbSceneParam._m0[78u].x)) * _3077.x) / cbSceneParam._m0[78u].x)) + _2820;
        _2917 = (exp2(_3103 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3087 * cbSceneParam._m0[78u].y)) * _3077.y) / cbSceneParam._m0[78u].y)) + _2821;
        _2919 = (exp2(_3103 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3087 * cbSceneParam._m0[78u].z)) * _3077.z) / cbSceneParam._m0[78u].z)) + _2822;
        _2921 = _3086 * _2823;
    }
    else
    {
        _2915 = _2820;
        _2917 = _2821;
        _2919 = _2822;
        _2921 = _2823;
    }
    float _2933 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2934 = _2933 == 3.0;
    float _2935 = log2(_2921);
    float _2939 = exp2(_2935 * cbSceneParam._m0[78u].x);
    float _2940 = exp2(_2935 * cbSceneParam._m0[78u].y);
    float _2941 = exp2(_2935 * cbSceneParam._m0[78u].z);
    float _2942 = _2939 * (isnan(0.0) ? _2771 : (isnan(_2771) ? 0.0 : max(_2771, 0.0)));
    float _2943 = _2940 * (isnan(0.0) ? _2773 : (isnan(_2773) ? 0.0 : max(_2773, 0.0)));
    float _2944 = _2941 * (isnan(0.0) ? _2775 : (isnan(_2775) ? 0.0 : max(_2775, 0.0)));
    float _2953 = (_2933 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2953 * (_2934 ? _2942 : (_2942 + (cbSceneParam._m0[72u].w * _2915)));
    SV_Target.y = _2953 * (_2934 ? _2943 : (_2943 + (cbSceneParam._m0[72u].w * _2917)));
    SV_Target.z = _2953 * (_2934 ? _2944 : (_2944 + (cbSceneParam._m0[72u].w * _2919)));
    SV_Target.w = _2798;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2751) * _2793) * _2939) * _2953;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2752) * _2793) * _2940) * _2953;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2753) * _2793) * _2941) * _2953;
    SV_Target_1.w = _2798;
}


