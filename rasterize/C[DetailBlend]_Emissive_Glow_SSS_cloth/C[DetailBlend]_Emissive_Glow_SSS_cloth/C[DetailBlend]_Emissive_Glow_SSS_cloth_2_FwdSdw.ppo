#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[18];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_1;
layout(set = 0, binding = 1) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_7;
layout(set = 0, binding = 10) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_6;
layout(set = 0, binding = 2) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_0;
layout(set = 0, binding = 4) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_11;
layout(set = 0, binding = 6) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_2;
layout(set = 0, binding = 7) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_3;
layout(set = 0, binding = 9) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_5;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1180;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _207 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _208 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _209 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _215 = inversesqrt(dot(vec3(_207, _208, _209), vec3(_207, _208, _209)));
    float _222 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _223 = _222 * NORMAL.x;
    float _224 = _222 * NORMAL.y;
    float _225 = _222 * NORMAL.z;
    float _229 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _237;
    float _238;
    float _239;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _237 = (-0.0) - _223;
        _238 = (-0.0) - _224;
        _239 = (-0.0) - _225;
    }
    else
    {
        _237 = _223;
        _238 = _224;
        _239 = _225;
    }
    vec4 _252 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _257 = _252.z;
    float _263 = exp2(log2(_257 * 22.0) * 260.0);
    float _264 = isnan(0.0) ? _263 : (isnan(_263) ? 0.0 : max(_263, 0.0));
    float _265 = isnan(1.0) ? _264 : (isnan(_264) ? 1.0 : min(_264, 1.0));
    vec4 _279 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _290 = cbMtdParam._m0[10u].x * _279.x;
    float _291 = cbMtdParam._m0[10u].y * _279.y;
    float _292 = cbMtdParam._m0[10u].z * _279.z;
    vec4 _304 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _327 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _349 = (((((_304.x * 4.55000019073486328125) * cbMtdParam._m0[9u].x) * _327.x) - _290) * _265) + _290;
    float _350 = (((((_304.y * 4.55000019073486328125) * cbMtdParam._m0[9u].y) * _327.y) - _291) * _265) + _291;
    float _351 = (((((_304.z * 4.55000019073486328125) * cbMtdParam._m0[9u].z) * _327.z) - _292) * _265) + _292;
    float _352 = _327.w * _304.w;
    float _378 = (((texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w)).x - cbMtdParam._m0[17u].x) + cbMtdParam._m0[16u].x) * _265) + cbMtdParam._m0[17u].x;
    vec4 _390 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w));
    float _392 = _390.x;
    float _393 = _390.y;
    float _399 = cbMtdParam._m0[14u].y + _390.z;
    vec4 _411 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w));
    float _423 = ((((_257 * 2.0) * (cbMtdParam._m0[14u].x + _411.z)) - _399) * _265) + _399;
    float _441 = abs((fract(cbMtdParam._m0[15u].x * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _3852 = isnan(0.0) ? _441 : (isnan(_441) ? 0.0 : max(_441, 0.0));
    float _442 = isnan(1.0) ? _3852 : (isnan(_3852) ? 1.0 : min(_3852, 1.0));
    float _447 = (_442 * _442) * (3.0 - (_442 * 2.0));
    vec4 _460 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _468 = (_252.x * 2.0) + (-1.0);
    float _469 = (_252.y * 2.0) + (-1.0);
    float _470 = dot(vec2(_468, _469), vec2(_468, _469));
    float _3863 = isnan(0.0) ? _470 : (isnan(_470) ? 0.0 : max(_470, 0.0));
    float _475 = sqrt(1.0 - (isnan(1.0) ? _3863 : (isnan(_3863) ? 1.0 : min(_3863, 1.0))));
    float _488 = (cbMtdParam._m0[14u].z * (((((_411.x - _392) * _265) + _392) * 2.0) + (-1.0))) + _468;
    float _489 = (cbMtdParam._m0[14u].z * (((((_411.y - _393) * _265) + _393) * 2.0) + (-1.0))) + _469;
    float _492 = fma(_475, _237, fma(_489, _229 * TANGENT.x, (_215 * _207) * _488));
    float _495 = fma(_475, _238, fma(_489, _229 * TANGENT.y, (_215 * _208) * _488));
    float _498 = fma(_475, _239, fma(_489, _229 * TANGENT.z, (_215 * _209) * _488));
    float _502 = inversesqrt(dot(vec3(_492, _495, _498), vec3(_492, _495, _498)));
    float _503 = _502 * _492;
    float _504 = _502 * _495;
    float _505 = _502 * _498;
    float _3874 = isnan(0.0) ? _352 : (isnan(_352) ? 0.0 : max(_352, 0.0));
    float _506 = isnan(1.0) ? _3874 : (isnan(_3874) ? 1.0 : min(_3874, 1.0));
    float _3885 = isnan(0.0) ? _423 : (isnan(_423) ? 0.0 : max(_423, 0.0));
    float _507 = isnan(1.0) ? _3885 : (isnan(_3885) ? 1.0 : min(_3885, 1.0));
    float _3896 = isnan(0.0) ? _349 : (isnan(_349) ? 0.0 : max(_349, 0.0));
    float _508 = isnan(1.0) ? _3896 : (isnan(_3896) ? 1.0 : min(_3896, 1.0));
    float _3907 = isnan(0.0) ? _350 : (isnan(_350) ? 0.0 : max(_350, 0.0));
    float _509 = isnan(1.0) ? _3907 : (isnan(_3907) ? 1.0 : min(_3907, 1.0));
    float _3918 = isnan(0.0) ? _351 : (isnan(_351) ? 0.0 : max(_351, 0.0));
    float _510 = isnan(1.0) ? _3918 : (isnan(_3918) ? 1.0 : min(_3918, 1.0));
    float _3929 = isnan(0.0) ? _378 : (isnan(_378) ? 0.0 : max(_378, 0.0));
    float _511 = isnan(1.0) ? _3929 : (isnan(_3929) ? 1.0 : min(_3929, 1.0));
    float _527 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _569 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _579 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _569);
    float _580 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _569);
    float _581 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _569);
    float _585 = inversesqrt(dot(vec3(_579, _580, _581), vec3(_579, _580, _581)));
    float _586 = _579 * _585;
    float _587 = _580 * _585;
    float _588 = _581 * _585;
    float _594 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _595 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _597 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _599 = _597.w;
    float _618 = fma(_505, cbSceneParam._m0[5u].z, fma(_504, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _503));
    float _621 = fma(_505, cbSceneParam._m0[6u].z, fma(_504, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _503));
    float _624 = fma(_505, cbSceneParam._m0[7u].z, fma(_504, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _503));
    vec4 _626 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _628 = _626.x;
    float _640 = (((_626.y - _507) + (_626.w * _507)) * cbMtdParam._m0[3u].x) + _507;
    vec4 _641 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _657 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3(cbMtdParam._m0[3u].x * (_628 * _628)), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * _641.z;
    float _665 = (((cbMatDynParam._m0[15u].x - _511) * cbMatDynParam._m0[15u].w) * _657) + _511;
    float _673 = ((_657 * cbMatDynParam._m0[16u].z) * (cbMatDynParam._m0[16u].x - _640)) + _640;
    uint _697 = uint(roundEven(NORMAL.w)) * 13u;
    uint _699 = _697 + 9u;
    uint _700 = _699 + uint(cbMatDynParam._m0[0u].w);
    float _706 = (cbMtdParam._m0[0u].x * _508) * cbInstanceData._m0[_700].x;
    float _707 = (cbMtdParam._m0[0u].y * _509) * cbInstanceData._m0[_700].y;
    float _708 = (cbMtdParam._m0[0u].z * _510) * cbInstanceData._m0[_700].z;
    float _3940 = isnan(0.0) ? _706 : (isnan(_706) ? 0.0 : max(_706, 0.0));
    float _709 = isnan(1.0) ? _3940 : (isnan(_3940) ? 1.0 : min(_3940, 1.0));
    float _3951 = isnan(0.0) ? _707 : (isnan(_707) ? 0.0 : max(_707, 0.0));
    float _710 = isnan(1.0) ? _3951 : (isnan(_3951) ? 1.0 : min(_3951, 1.0));
    float _3962 = isnan(0.0) ? _708 : (isnan(_708) ? 0.0 : max(_708, 0.0));
    float _711 = isnan(1.0) ? _3962 : (isnan(_3962) ? 1.0 : min(_3962, 1.0));
    vec4 _712 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _717 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _728 = (((_717.x - _665) + (_717.w * _665)) * cbMtdParam._m0[3u].x) + _665;
    float _741 = (cbMtdParam._m0[3u].x * (((_709 * _599) - _709) + _712.x)) + _709;
    float _742 = (cbMtdParam._m0[3u].x * (((_710 * _599) - _710) + _712.y)) + _710;
    float _743 = (cbMtdParam._m0[3u].x * (((_711 * _599) - _711) + _712.z)) + _711;
    vec4 _744 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _757 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3((_665 * (_508 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625, (_665 * (_509 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625, (_665 * (_510 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * _744.z;
    float _761 = _757 * cbMatDynParam._m0[13u].w;
    float _771 = (_761 * (cbMatDynParam._m0[13u].x - _741)) + _741;
    float _772 = (_761 * (cbMatDynParam._m0[13u].y - _742)) + _742;
    float _773 = (_761 * (cbMatDynParam._m0[13u].z - _743)) + _743;
    float _781 = ((_757 * cbMatDynParam._m0[15u].w) * (cbMatDynParam._m0[15u].x - _728)) + _728;
    float _782 = 1.0 - _781;
    float _783 = _782 * _771;
    float _784 = _782 * _772;
    float _785 = _782 * _773;
    float _789 = (_771 + (-0.039999999105930328369140625)) * _781;
    float _790 = (_772 + (-0.039999999105930328369140625)) * _781;
    float _791 = (_773 + (-0.039999999105930328369140625)) * _781;
    float _792 = _789 + 0.039999999105930328369140625;
    float _793 = _790 + 0.039999999105930328369140625;
    float _794 = _791 + 0.039999999105930328369140625;
    vec4 _803 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _594, cbSceneParam._m0[86u].y * _595));
    float _806 = _803.x * TEXCOORD_4;
    float _807 = dot(vec3(_503, _504, _505), vec3(_586, _587, _588));
    float _810 = _807 * 2.0;
    float _814 = (_810 * _503) - _586;
    float _815 = (_810 * _504) - _587;
    float _816 = (_810 * _505) - _588;
    float _820 = abs(dot(vec3(_586, _587, _588), vec3(_503, _504, _505)));
    float _3973 = isnan(0.0) ? _820 : (isnan(_820) ? 0.0 : max(_820, 0.0));
    float _822 = sqrt(_673);
    float _834 = exp2((_822 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3973 : (isnan(_3973) ? 1.0 : min(_3973, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_822 * 3.0));
    float _840 = (1.0 - _834) * ((_822 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _841 = _834 * _822;
    float _869 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _873 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _877 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1179;
    float _1181;
    float _1182;
    float _1183;
    float _1184;
    float _1185;
    float _1186;
    float _1187;
    float _1188;
    float _1189;
    float _1190;
    float _1191;
    float _1192;
    float _1193;
    float _1194;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _904 = fma(_877, cbModelParam._m0[26u].z, fma(_873, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _869));
        float _908 = fma(_877, cbModelParam._m0[27u].z, fma(_873, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _869));
        float _912 = fma(_877, cbModelParam._m0[28u].z, fma(_873, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _869));
        float _937 = _869 + _503;
        float _938 = _873 + _504;
        float _939 = _877 + _505;
        float _949 = fma(_939, cbModelParam._m0[26u].z, fma(_938, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _937)) - _904;
        float _950 = fma(_939, cbModelParam._m0[27u].z, fma(_938, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _937)) - _908;
        float _951 = fma(_939, cbModelParam._m0[28u].z, fma(_938, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _937)) - _912;
        float _955 = inversesqrt(dot(vec3(_949, _950, _951), vec3(_949, _950, _951)));
        float _968 = ((_955 * _949) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_904 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _969 = ((_955 * _950) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_908 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _970 = ((_955 * _951) / cbModelParam._m0[34u].z) + ((((((_912 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _973 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_968, _969, _970), 0.0);
        vec4 _980 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_968, _969, _970), 0.0);
        vec4 _987 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_968, _969, _970), 0.0);
        vec4 _994 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_968, _969, _970), 0.0);
        float _1007 = exp2((_973.w + (-0.5)) * 20.0) * 2.0;
        float _1008 = _1007 * (_973.x + (-0.5));
        float _1009 = _1007 * (_973.y + (-0.5));
        float _1010 = _1007 * (_973.z + (-0.5));
        float _1017 = exp2((_980.w + (-0.5)) * 20.0) * 2.0;
        float _1018 = _1017 * (_980.x + (-0.5));
        float _1019 = _1017 * (_980.y + (-0.5));
        float _1020 = _1017 * (_980.z + (-0.5));
        float _1027 = exp2((_987.w + (-0.5)) * 20.0) * 2.0;
        float _1028 = _1027 * (_987.x + (-0.5));
        float _1029 = _1027 * (_987.y + (-0.5));
        float _1030 = _1027 * (_987.z + (-0.5));
        float _1037 = exp2((_994.w + (-0.5)) * 20.0) * 2.0;
        float _1038 = _1037 * (_994.x + (-0.5));
        float _1039 = _1037 * (_994.y + (-0.5));
        float _1040 = _1037 * (_994.z + (-0.5));
        float _1041 = isnan(0.0) ? _1038 : (isnan(_1038) ? 0.0 : max(_1038, 0.0));
        float _1042 = isnan(0.0) ? _1039 : (isnan(_1039) ? 0.0 : max(_1039, 0.0));
        float _1043 = isnan(0.0) ? _1040 : (isnan(_1040) ? 0.0 : max(_1040, 0.0));
        float _1044 = _1008 * 0.5;
        float _1045 = _1018 * 0.5;
        float _1046 = _1028 * 0.5;
        float _1047 = dot(vec3(_1044, _1045, _1046), vec3(_1044, _1045, _1046));
        float _1052 = (_1047 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1047);
        float _1061 = (dot(vec3(_503, _504, _505), vec3(_1052 * _1044, _1052 * _1045, _1052 * _1046)) + 1.0) * 0.5;
        float _3999 = isnan(0.0) ? _1061 : (isnan(_1061) ? 0.0 : max(_1061, 0.0));
        float _1071 = sqrt(((_1045 * _1045) + (_1044 * _1044)) + (_1046 * _1046)) / (_1041 + 9.9999997473787516355514526367188e-06);
        float _4010 = isnan(0.0) ? _1071 : (isnan(_1071) ? 0.0 : max(_1071, 0.0));
        float _1072 = isnan(1.0) ? _4010 : (isnan(_4010) ? 1.0 : min(_4010, 1.0));
        float _1073 = _1072 * 2.0;
        float _1077 = (1.0 - _1072) / (_1072 + 1.0);
        float _4021 = isnan(0.0) ? _1077 : (isnan(_1077) ? 0.0 : max(_1077, 0.0));
        float _1078 = isnan(1.0) ? _4021 : (isnan(_4021) ? 1.0 : min(_4021, 1.0));
        float _1087 = ((((1.0 - _1078) * (_1073 + 2.0)) * exp2(log2(isnan(1.0) ? _3999 : (isnan(_3999) ? 1.0 : min(_3999, 1.0))) * (_1073 + 1.0))) + _1078) * _1041;
        float _1088 = _1009 * 0.5;
        float _1089 = _1019 * 0.5;
        float _1090 = _1029 * 0.5;
        float _1091 = dot(vec3(_1088, _1089, _1090), vec3(_1088, _1089, _1090));
        float _1096 = (_1091 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1091);
        float _1104 = (dot(vec3(_503, _504, _505), vec3(_1096 * _1088, _1096 * _1089, _1096 * _1090)) + 1.0) * 0.5;
        float _4032 = isnan(0.0) ? _1104 : (isnan(_1104) ? 0.0 : max(_1104, 0.0));
        float _1113 = sqrt(((_1089 * _1089) + (_1088 * _1088)) + (_1090 * _1090)) / (_1042 + 9.9999997473787516355514526367188e-06);
        float _4043 = isnan(0.0) ? _1113 : (isnan(_1113) ? 0.0 : max(_1113, 0.0));
        float _1114 = isnan(1.0) ? _4043 : (isnan(_4043) ? 1.0 : min(_4043, 1.0));
        float _1115 = _1114 * 2.0;
        float _1119 = (1.0 - _1114) / (_1114 + 1.0);
        float _4054 = isnan(0.0) ? _1119 : (isnan(_1119) ? 0.0 : max(_1119, 0.0));
        float _1120 = isnan(1.0) ? _4054 : (isnan(_4054) ? 1.0 : min(_4054, 1.0));
        float _1129 = ((((1.0 - _1120) * (_1115 + 2.0)) * exp2(log2(isnan(1.0) ? _4032 : (isnan(_4032) ? 1.0 : min(_4032, 1.0))) * (_1115 + 1.0))) + _1120) * _1042;
        float _1130 = _1010 * 0.5;
        float _1131 = _1020 * 0.5;
        float _1132 = _1030 * 0.5;
        float _1133 = dot(vec3(_1130, _1131, _1132), vec3(_1130, _1131, _1132));
        float _1138 = (_1133 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1133);
        float _1146 = (dot(vec3(_503, _504, _505), vec3(_1138 * _1130, _1138 * _1131, _1138 * _1132)) + 1.0) * 0.5;
        float _4065 = isnan(0.0) ? _1146 : (isnan(_1146) ? 0.0 : max(_1146, 0.0));
        float _1155 = sqrt(((_1131 * _1131) + (_1130 * _1130)) + (_1132 * _1132)) / (_1043 + 9.9999997473787516355514526367188e-06);
        float _4076 = isnan(0.0) ? _1155 : (isnan(_1155) ? 0.0 : max(_1155, 0.0));
        float _1156 = isnan(1.0) ? _4076 : (isnan(_4076) ? 1.0 : min(_4076, 1.0));
        float _1157 = _1156 * 2.0;
        float _1161 = (1.0 - _1156) / (_1156 + 1.0);
        float _4087 = isnan(0.0) ? _1161 : (isnan(_1161) ? 0.0 : max(_1161, 0.0));
        float _1162 = isnan(1.0) ? _4087 : (isnan(_4087) ? 1.0 : min(_4087, 1.0));
        float _1171 = ((((1.0 - _1162) * (_1157 + 2.0)) * exp2(log2(isnan(1.0) ? _4065 : (isnan(_4065) ? 1.0 : min(_4065, 1.0))) * (_1157 + 1.0))) + _1162) * _1043;
        _1179 = _1010;
        _1181 = _1009;
        _1182 = _1008;
        _1183 = _1020;
        _1184 = _1019;
        _1185 = _1018;
        _1186 = _1030;
        _1187 = _1029;
        _1188 = _1028;
        _1189 = _1043;
        _1190 = _1042;
        _1191 = _1041;
        _1192 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1087 : (isnan(_1087) ? 0.0 : max(_1087, 0.0)));
        _1193 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1129 : (isnan(_1129) ? 0.0 : max(_1129, 0.0)));
        _1194 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1171 : (isnan(_1171) ? 0.0 : max(_1171, 0.0)));
    }
    else
    {
        _1179 = _1180;
        _1181 = _1180;
        _1182 = _1180;
        _1183 = _1180;
        _1184 = _1180;
        _1185 = _1180;
        _1186 = _1180;
        _1187 = _1180;
        _1188 = _1180;
        _1189 = _1180;
        _1190 = _1180;
        _1191 = _1180;
        _1192 = 0.0;
        _1193 = 0.0;
        _1194 = 0.0;
    }
    float _1489;
    float _1490;
    float _1491;
    float _1492;
    float _1493;
    float _1494;
    float _1495;
    float _1496;
    float _1497;
    float _1498;
    float _1499;
    float _1500;
    float _1501;
    float _1502;
    float _1503;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1220 = fma(_877, cbModelParam._m0[30u].z, fma(_873, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _869));
        float _1224 = fma(_877, cbModelParam._m0[31u].z, fma(_873, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _869));
        float _1228 = fma(_877, cbModelParam._m0[32u].z, fma(_873, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _869));
        float _1251 = _869 + _503;
        float _1252 = _873 + _504;
        float _1253 = _877 + _505;
        float _1263 = fma(_1253, cbModelParam._m0[30u].z, fma(_1252, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1251)) - _1220;
        float _1264 = fma(_1253, cbModelParam._m0[31u].z, fma(_1252, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1251)) - _1224;
        float _1265 = fma(_1253, cbModelParam._m0[32u].z, fma(_1252, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1251)) - _1228;
        float _1269 = inversesqrt(dot(vec3(_1263, _1264, _1265), vec3(_1263, _1264, _1265)));
        float _1282 = ((_1269 * _1263) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1220 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1283 = ((_1269 * _1264) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1224 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1284 = ((_1269 * _1265) / cbModelParam._m0[35u].z) + ((((((_1228 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1286 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1282, _1283, _1284), 0.0);
        vec4 _1293 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1282, _1283, _1284), 0.0);
        vec4 _1300 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1282, _1283, _1284), 0.0);
        vec4 _1307 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1282, _1283, _1284), 0.0);
        float _1319 = exp2((_1286.w + (-0.5)) * 20.0) * 2.0;
        float _1320 = _1319 * (_1286.x + (-0.5));
        float _1321 = _1319 * (_1286.y + (-0.5));
        float _1322 = _1319 * (_1286.z + (-0.5));
        float _1329 = exp2((_1293.w + (-0.5)) * 20.0) * 2.0;
        float _1330 = _1329 * (_1293.x + (-0.5));
        float _1331 = _1329 * (_1293.y + (-0.5));
        float _1332 = _1329 * (_1293.z + (-0.5));
        float _1339 = exp2((_1300.w + (-0.5)) * 20.0) * 2.0;
        float _1340 = _1339 * (_1300.x + (-0.5));
        float _1341 = _1339 * (_1300.y + (-0.5));
        float _1342 = _1339 * (_1300.z + (-0.5));
        float _1349 = exp2((_1307.w + (-0.5)) * 20.0) * 2.0;
        float _1350 = _1349 * (_1307.x + (-0.5));
        float _1351 = _1349 * (_1307.y + (-0.5));
        float _1352 = _1349 * (_1307.z + (-0.5));
        float _1353 = isnan(0.0) ? _1350 : (isnan(_1350) ? 0.0 : max(_1350, 0.0));
        float _1354 = isnan(0.0) ? _1351 : (isnan(_1351) ? 0.0 : max(_1351, 0.0));
        float _1355 = isnan(0.0) ? _1352 : (isnan(_1352) ? 0.0 : max(_1352, 0.0));
        float _1356 = _1320 * 0.5;
        float _1357 = _1330 * 0.5;
        float _1358 = _1340 * 0.5;
        float _1359 = dot(vec3(_1356, _1357, _1358), vec3(_1356, _1357, _1358));
        float _1364 = (_1359 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1359);
        float _1372 = (dot(vec3(_503, _504, _505), vec3(_1364 * _1356, _1364 * _1357, _1364 * _1358)) + 1.0) * 0.5;
        float _4128 = isnan(0.0) ? _1372 : (isnan(_1372) ? 0.0 : max(_1372, 0.0));
        float _1381 = sqrt(((_1357 * _1357) + (_1356 * _1356)) + (_1358 * _1358)) / (_1353 + 9.9999997473787516355514526367188e-06);
        float _4139 = isnan(0.0) ? _1381 : (isnan(_1381) ? 0.0 : max(_1381, 0.0));
        float _1382 = isnan(1.0) ? _4139 : (isnan(_4139) ? 1.0 : min(_4139, 1.0));
        float _1383 = _1382 * 2.0;
        float _1387 = (1.0 - _1382) / (_1382 + 1.0);
        float _4150 = isnan(0.0) ? _1387 : (isnan(_1387) ? 0.0 : max(_1387, 0.0));
        float _1388 = isnan(1.0) ? _4150 : (isnan(_4150) ? 1.0 : min(_4150, 1.0));
        float _1397 = ((((1.0 - _1388) * (_1383 + 2.0)) * exp2(log2(isnan(1.0) ? _4128 : (isnan(_4128) ? 1.0 : min(_4128, 1.0))) * (_1383 + 1.0))) + _1388) * _1353;
        float _1398 = _1321 * 0.5;
        float _1399 = _1331 * 0.5;
        float _1400 = _1341 * 0.5;
        float _1401 = dot(vec3(_1398, _1399, _1400), vec3(_1398, _1399, _1400));
        float _1406 = (_1401 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1401);
        float _1414 = (dot(vec3(_503, _504, _505), vec3(_1406 * _1398, _1406 * _1399, _1406 * _1400)) + 1.0) * 0.5;
        float _4161 = isnan(0.0) ? _1414 : (isnan(_1414) ? 0.0 : max(_1414, 0.0));
        float _1423 = sqrt(((_1399 * _1399) + (_1398 * _1398)) + (_1400 * _1400)) / (_1354 + 9.9999997473787516355514526367188e-06);
        float _4172 = isnan(0.0) ? _1423 : (isnan(_1423) ? 0.0 : max(_1423, 0.0));
        float _1424 = isnan(1.0) ? _4172 : (isnan(_4172) ? 1.0 : min(_4172, 1.0));
        float _1425 = _1424 * 2.0;
        float _1429 = (1.0 - _1424) / (_1424 + 1.0);
        float _4183 = isnan(0.0) ? _1429 : (isnan(_1429) ? 0.0 : max(_1429, 0.0));
        float _1430 = isnan(1.0) ? _4183 : (isnan(_4183) ? 1.0 : min(_4183, 1.0));
        float _1439 = ((((1.0 - _1430) * (_1425 + 2.0)) * exp2(log2(isnan(1.0) ? _4161 : (isnan(_4161) ? 1.0 : min(_4161, 1.0))) * (_1425 + 1.0))) + _1430) * _1354;
        float _1440 = _1322 * 0.5;
        float _1441 = _1332 * 0.5;
        float _1442 = _1342 * 0.5;
        float _1443 = dot(vec3(_1440, _1441, _1442), vec3(_1440, _1441, _1442));
        float _1448 = (_1443 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1443);
        float _1456 = (dot(vec3(_503, _504, _505), vec3(_1448 * _1440, _1448 * _1441, _1448 * _1442)) + 1.0) * 0.5;
        float _4194 = isnan(0.0) ? _1456 : (isnan(_1456) ? 0.0 : max(_1456, 0.0));
        float _1465 = sqrt(((_1441 * _1441) + (_1440 * _1440)) + (_1442 * _1442)) / (_1355 + 9.9999997473787516355514526367188e-06);
        float _4205 = isnan(0.0) ? _1465 : (isnan(_1465) ? 0.0 : max(_1465, 0.0));
        float _1466 = isnan(1.0) ? _4205 : (isnan(_4205) ? 1.0 : min(_4205, 1.0));
        float _1467 = _1466 * 2.0;
        float _1471 = (1.0 - _1466) / (_1466 + 1.0);
        float _4216 = isnan(0.0) ? _1471 : (isnan(_1471) ? 0.0 : max(_1471, 0.0));
        float _1472 = isnan(1.0) ? _4216 : (isnan(_4216) ? 1.0 : min(_4216, 1.0));
        float _1481 = ((((1.0 - _1472) * (_1467 + 2.0)) * exp2(log2(isnan(1.0) ? _4194 : (isnan(_4194) ? 1.0 : min(_4194, 1.0))) * (_1467 + 1.0))) + _1472) * _1355;
        _1489 = _1322;
        _1490 = _1321;
        _1491 = _1320;
        _1492 = _1332;
        _1493 = _1331;
        _1494 = _1330;
        _1495 = _1342;
        _1496 = _1341;
        _1497 = _1340;
        _1498 = _1355;
        _1499 = _1354;
        _1500 = _1353;
        _1501 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1397 : (isnan(_1397) ? 0.0 : max(_1397, 0.0)));
        _1502 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1439 : (isnan(_1439) ? 0.0 : max(_1439, 0.0)));
        _1503 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1481 : (isnan(_1481) ? 0.0 : max(_1481, 0.0)));
    }
    else
    {
        _1489 = _1180;
        _1490 = _1180;
        _1491 = _1180;
        _1492 = _1180;
        _1493 = _1180;
        _1494 = _1180;
        _1495 = _1180;
        _1496 = _1180;
        _1497 = _1180;
        _1498 = _1180;
        _1499 = _1180;
        _1500 = _1180;
        _1501 = 0.0;
        _1502 = 0.0;
        _1503 = 0.0;
    }
    float _1513 = (cbModelParam._m0[1u].x * (_1501 - _1192)) + _1192;
    float _1514 = (cbModelParam._m0[1u].x * (_1502 - _1193)) + _1193;
    float _1515 = (cbModelParam._m0[1u].x * (_1503 - _1194)) + _1194;
    float _1536 = fma(_1515, cbSceneParam._m0[89u].z, fma(_1514, cbSceneParam._m0[89u].y, _1513 * cbSceneParam._m0[89u].x));
    float _1539 = fma(_1515, cbSceneParam._m0[90u].z, fma(_1514, cbSceneParam._m0[90u].y, _1513 * cbSceneParam._m0[90u].x));
    float _1542 = fma(_1515, cbSceneParam._m0[91u].z, fma(_1514, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1513));
    float _1557 = _814 * 0.5;
    float _1558 = _815 * 0.5;
    float _1559 = _816 * 0.5;
    float _1560 = dot(vec4(_1557, _1558, _1559, 1.0), vec4(_1491, _1494, _1497, _1500));
    float _1563 = dot(vec4(_1557, _1558, _1559, 1.0), vec4(_1490, _1493, _1496, _1499));
    float _1566 = dot(vec4(_1557, _1558, _1559, 1.0), vec4(_1489, _1492, _1495, _1498));
    float _1597;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1573 = dot(vec4(_1557, _1558, _1559, 1.0), vec4(_1179, _1183, _1186, _1189));
        float _1577 = dot(vec4(_1557, _1558, _1559, 1.0), vec4(_1181, _1184, _1187, _1190));
        float _1581 = dot(vec4(_1557, _1558, _1559, 1.0), vec4(_1182, _1185, _1188, _1191));
        float _1588 = dot(vec4(cbModelParam._m0[39u]), vec4(_1557, _1558, _1559, 1.0));
        _1597 = dot(vec3(isnan(0.0) ? _1581 : (isnan(_1581) ? 0.0 : max(_1581, 0.0)), isnan(0.0) ? _1577 : (isnan(_1577) ? 0.0 : max(_1577, 0.0)), isnan(0.0) ? _1573 : (isnan(_1573) ? 0.0 : max(_1573, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1588) ? 0.0 : (isnan(0.0) ? _1588 : max(0.0, _1588))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1597 = 1.0;
    }
    float _1608;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1599 = dot(vec4(cbModelParam._m0[40u]), vec4(_1557, _1558, _1559, 1.0));
        _1608 = dot(vec3(isnan(0.0) ? _1560 : (isnan(_1560) ? 0.0 : max(_1560, 0.0)), isnan(0.0) ? _1563 : (isnan(_1563) ? 0.0 : max(_1563, 0.0)), isnan(0.0) ? _1566 : (isnan(_1566) ? 0.0 : max(_1566, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1599) ? 0.0 : (isnan(0.0) ? _1599 : max(0.0, _1599))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1608 = 1.0;
    }
    float _1612 = (_1608 * cbModelParam._m0[1u].x) + (_1597 * (1.0 - cbModelParam._m0[1u].x));
    float _1622 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _673);
    float _1623 = isnan(_1622) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1622 : min(cbModelParam._m0[25u].z, _1622));
    float _1703;
    float _1705;
    float _1707;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1670 = fma(_877, cbModelParam._m0[13u].z, fma(_873, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _869)) + cbModelParam._m0[13u].w;
        float _1674 = fma(_877, cbModelParam._m0[14u].z, fma(_873, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _869)) + cbModelParam._m0[14u].w;
        float _1678 = fma(_877, cbModelParam._m0[15u].z, fma(_873, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _869)) + cbModelParam._m0[15u].w;
        float _1681 = fma(_816, cbModelParam._m0[13u].z, fma(_815, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _814));
        float _1684 = fma(_816, cbModelParam._m0[14u].z, fma(_815, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _814));
        float _1687 = fma(_816, cbModelParam._m0[15u].z, fma(_815, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _814));
        float _1715;
        if (_1681 > 0.0)
        {
            _1715 = abs((1.0 - _1670) / _1681);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1681 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1670 + 1.0) / _1681);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1715 = frontier_phi_16_14_ladder;
        }
        float _1888;
        if (_1684 > 0.0)
        {
            _1888 = abs((1.0 - _1674) / _1684);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1684 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1674 + 1.0) / _1684);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1888 = frontier_phi_25_21_ladder;
        }
        float _2183;
        if (_1687 > 0.0)
        {
            _2183 = abs((1.0 - _1678) / _1687);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1687 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1678 + 1.0) / _1687);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2183 = frontier_phi_37_32_ladder;
        }
        float _2185 = isnan(_1888) ? _1715 : (isnan(_1715) ? _1888 : min(_1715, _1888));
        float _2186 = isnan(_2183) ? _2185 : (isnan(_2185) ? _2183 : min(_2185, _2183));
        float _2190 = (_2186 * _1681) + _1670;
        float _2191 = (_2186 * _1684) + _1674;
        float _2192 = (_2186 * _1687) + _1678;
        float _2193 = _2186 * 9.9999997473787516355514526367188e-05;
        float _2195 = (-1.0) - _2193;
        float _2197 = _2193 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_2192 > _2197) || ((_2192 < _2195) || ((_2191 > _2197) || ((_2191 < _2195) || ((_2190 < _2195) || (_2190 > _2197))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2337 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2192, cbModelParam._m0[9u].z, fma(_2191, cbModelParam._m0[9u].y, _2190 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2192, cbModelParam._m0[10u].z, fma(_2191, cbModelParam._m0[10u].y, _2190 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2192, cbModelParam._m0[11u].z, fma(_2191, cbModelParam._m0[11u].y, _2190 * cbModelParam._m0[11u].x))), _1623);
            frontier_phi_15_37_ladder = _2337.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2337.x * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2337.z * cbModelParam._m0[1u].y;
        }
        _1703 = frontier_phi_15_37_ladder_1;
        _1705 = frontier_phi_15_37_ladder;
        _1707 = frontier_phi_15_37_ladder_2;
    }
    else
    {
        vec4 _1691 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_814, _815, _816), _1623);
        _1703 = _1691.x * cbModelParam._m0[1u].y;
        _1705 = _1691.y * cbModelParam._m0[1u].y;
        _1707 = _1691.z * cbModelParam._m0[1u].y;
    }
    float _1711 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _673);
    float _1712 = isnan(_1711) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1711 : min(cbModelParam._m0[25u].w, _1711));
    float _1803;
    float _1805;
    float _1807;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1767 = fma(_877, cbModelParam._m0[21u].z, fma(_873, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _869)) + cbModelParam._m0[21u].w;
        float _1771 = fma(_877, cbModelParam._m0[22u].z, fma(_873, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _869)) + cbModelParam._m0[22u].w;
        float _1775 = fma(_877, cbModelParam._m0[23u].z, fma(_873, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _869)) + cbModelParam._m0[23u].w;
        float _1778 = fma(_816, cbModelParam._m0[21u].z, fma(_815, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _814));
        float _1781 = fma(_816, cbModelParam._m0[22u].z, fma(_815, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _814));
        float _1784 = fma(_816, cbModelParam._m0[23u].z, fma(_815, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _814));
        float _1893;
        if (_1778 > 0.0)
        {
            _1893 = abs((1.0 - _1767) / _1778);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1778 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1767 + 1.0) / _1778);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1893 = frontier_phi_27_23_ladder;
        }
        float _2210;
        if (_1781 > 0.0)
        {
            _2210 = abs((1.0 - _1771) / _1781);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1781 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1771 + 1.0) / _1781);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _2210 = frontier_phi_39_34_ladder;
        }
        float _2548;
        if (_1784 > 0.0)
        {
            _2548 = abs((1.0 - _1775) / _1784);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1784 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1775 + 1.0) / _1784);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2548 = frontier_phi_49_46_ladder;
        }
        float _2550 = isnan(_2210) ? _1893 : (isnan(_1893) ? _2210 : min(_1893, _2210));
        float _2551 = isnan(_2548) ? _2550 : (isnan(_2550) ? _2548 : min(_2550, _2548));
        float _2555 = (_2551 * _1778) + _1767;
        float _2556 = (_2551 * _1781) + _1771;
        float _2557 = (_2551 * _1784) + _1775;
        float _2558 = _2551 * 9.9999997473787516355514526367188e-05;
        float _2559 = (-1.0) - _2558;
        float _2561 = _2558 + 1.0;
        float frontier_phi_24_49_ladder;
        float frontier_phi_24_49_ladder_1;
        float frontier_phi_24_49_ladder_2;
        if ((_2557 > _2561) || ((_2557 < _2559) || ((_2556 > _2561) || ((_2556 < _2559) || ((_2555 < _2559) || (_2555 > _2561))))))
        {
            frontier_phi_24_49_ladder = 0.0;
            frontier_phi_24_49_ladder_1 = 0.0;
            frontier_phi_24_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2679 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2557, cbModelParam._m0[17u].z, fma(_2556, cbModelParam._m0[17u].y, _2555 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2557, cbModelParam._m0[18u].z, fma(_2556, cbModelParam._m0[18u].y, _2555 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2557, cbModelParam._m0[19u].z, fma(_2556, cbModelParam._m0[19u].y, _2555 * cbModelParam._m0[19u].x))), _1712);
            frontier_phi_24_49_ladder = _2679.z * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_1 = _2679.y * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_2 = _2679.x * cbModelParam._m0[1u].z;
        }
        _1803 = frontier_phi_24_49_ladder_2;
        _1805 = frontier_phi_24_49_ladder_1;
        _1807 = frontier_phi_24_49_ladder;
    }
    else
    {
        vec4 _1787 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_814, _815, _816), _1712);
        _1803 = _1787.x * cbModelParam._m0[1u].z;
        _1805 = _1787.y * cbModelParam._m0[1u].z;
        _1807 = _1787.z * cbModelParam._m0[1u].z;
    }
    float _1820 = (((_840 * _792) + _841) * _806) * ((cbModelParam._m0[1u].w * (_1803 - _1703)) + _1703);
    float _1822 = (((_840 * _793) + _841) * _806) * ((cbModelParam._m0[1u].w * (_1805 - _1705)) + _1705);
    float _1824 = (((_840 * _794) + _841) * _806) * ((cbModelParam._m0[1u].w * (_1807 - _1707)) + _1707);
    float _1827 = fma(_1824, cbSceneParam._m0[89u].z, fma(_1822, cbSceneParam._m0[89u].y, _1820 * cbSceneParam._m0[89u].x));
    float _1830 = fma(_1824, cbSceneParam._m0[90u].z, fma(_1822, cbSceneParam._m0[90u].y, _1820 * cbSceneParam._m0[90u].x));
    float _1833 = fma(_1824, cbSceneParam._m0[91u].z, fma(_1822, cbSceneParam._m0[91u].y, _1820 * cbSceneParam._m0[91u].x));
    float _1867 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1871 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1875 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1879 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1880 = _1867 / _1879;
    float _1881 = _1871 / _1879;
    float _1882 = _1875 / _1879;
    float _2029;
    float _2030;
    float _2031;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1909 = ((uint(_1882 > cbSceneParam._m0[59u].y) + uint(_1882 > cbSceneParam._m0[59u].x)) + uint(_1882 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1910 = _1909 + 43u;
        uint _1918 = _1909 + 44u;
        uint _1926 = _1909 + 45u;
        uint _1934 = _1909 + 46u;
        float _1945 = fma(_1879, cbSceneParam._m0[_1910].w, fma(_1875, cbSceneParam._m0[_1910].z, fma(_1871, cbSceneParam._m0[_1910].y, _1867 * cbSceneParam._m0[_1910].x)));
        float _1949 = fma(_1879, cbSceneParam._m0[_1918].w, fma(_1875, cbSceneParam._m0[_1918].z, fma(_1871, cbSceneParam._m0[_1918].y, _1867 * cbSceneParam._m0[_1918].x)));
        float _1957 = fma(_1879, cbSceneParam._m0[_1934].w, fma(_1875, cbSceneParam._m0[_1934].z, fma(_1871, cbSceneParam._m0[_1934].y, _1867 * cbSceneParam._m0[_1934].x)));
        float _1962 = cbSceneParam._m0[33u].z * _1957;
        float _1964 = cbSceneParam._m0[33u].w * _1957;
        float _1967 = fma(_1879, cbSceneParam._m0[_1926].w, fma(_1875, cbSceneParam._m0[_1926].z, fma(_1871, cbSceneParam._m0[_1926].y, _1867 * cbSceneParam._m0[_1926].x))) / _1957;
        float _2015 = (cbSceneParam._m0[33u].x - sqrt(((_1881 * _1881) + (_1880 * _1880)) + (_1882 * _1882))) * cbSceneParam._m0[33u].y;
        float _4342 = isnan(0.0) ? _2015 : (isnan(_2015) ? 0.0 : max(_2015, 0.0));
        float _2022 = (isnan(1.0) ? _4342 : (isnan(_4342) ? 1.0 : min(_4342, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1962 + _1945) / _1957, (_1964 + _1949) / _1957), _1967), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1964 + _1945) / _1957, (_1949 - _1962) / _1957), _1967), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1945 - _1962) / _1957, (_1949 - _1964) / _1957), _1967), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1945 - _1964) / _1957, (_1962 + _1949) / _1957), _1967), 0.0)).x), vec4(0.25)));
        _2029 = 1.0 - (_2022 * cbSceneParam._m0[34u].x);
        _2030 = 1.0 - (_2022 * cbSceneParam._m0[34u].y);
        _2031 = 1.0 - (_2022 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2029 = 1.0;
        _2030 = 1.0;
        _2031 = 1.0;
    }
    float _2095;
    float _2097;
    float _2099;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2083 = fma(_1879, cbSceneParam._m0[63u].w, fma(_1875, cbSceneParam._m0[63u].z, fma(_1871, cbSceneParam._m0[63u].y, _1867 * cbSceneParam._m0[63u].x)));
        float _2084 = fma(_1879, cbSceneParam._m0[60u].w, fma(_1875, cbSceneParam._m0[60u].z, fma(_1871, cbSceneParam._m0[60u].y, _1867 * cbSceneParam._m0[60u].x))) / _2083;
        float _2085 = fma(_1879, cbSceneParam._m0[61u].w, fma(_1875, cbSceneParam._m0[61u].z, fma(_1871, cbSceneParam._m0[61u].y, _1867 * cbSceneParam._m0[61u].x))) / _2083;
        float frontier_phi_36_35_ladder;
        float frontier_phi_36_35_ladder_1;
        float frontier_phi_36_35_ladder_2;
        if ((((_2084 >= cbSceneParam._m0[64u].x) && (_2085 >= cbSceneParam._m0[64u].y)) && (_2084 <= cbSceneParam._m0[64u].z)) && (_2085 <= cbSceneParam._m0[64u].w))
        {
            float _2223 = fma(_1879, cbSceneParam._m0[62u].w, fma(_1875, cbSceneParam._m0[62u].z, fma(_1871, cbSceneParam._m0[62u].y, _1867 * cbSceneParam._m0[62u].x))) / _2083;
            float _2227 = isnan(cbSceneParam._m0[41u].w) ? _2223 : (isnan(_2223) ? cbSceneParam._m0[41u].w : max(_2223, cbSceneParam._m0[41u].w));
            float _2270 = (cbSceneParam._m0[33u].x - sqrt(((_1881 * _1881) + (_1880 * _1880)) + (_1882 * _1882))) * cbSceneParam._m0[33u].y;
            float _4358 = isnan(0.0) ? _2270 : (isnan(_2270) ? 0.0 : max(_2270, 0.0));
            float _2277 = (isnan(1.0) ? _4358 : (isnan(_4358) ? 1.0 : min(_4358, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2084, cbSceneParam._m0[33u].w + _2085), _2227), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2084, _2085 - cbSceneParam._m0[33u].z), _2227), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2084 - cbSceneParam._m0[33u].z, _2085 - cbSceneParam._m0[33u].w), _2227), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2084 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2085), _2227), 0.0)).x), vec4(0.25)));
            float _2281 = 1.0 - (_2277 * cbSceneParam._m0[34u].x);
            float _2282 = 1.0 - (_2277 * cbSceneParam._m0[34u].y);
            float _2283 = 1.0 - (_2277 * cbSceneParam._m0[34u].z);
            frontier_phi_36_35_ladder = isnan(_2282) ? _2030 : (isnan(_2030) ? _2282 : min(_2030, _2282));
            frontier_phi_36_35_ladder_1 = isnan(_2283) ? _2031 : (isnan(_2031) ? _2283 : min(_2031, _2283));
            frontier_phi_36_35_ladder_2 = isnan(_2281) ? _2029 : (isnan(_2029) ? _2281 : min(_2029, _2281));
        }
        else
        {
            frontier_phi_36_35_ladder = _2030;
            frontier_phi_36_35_ladder_1 = _2031;
            frontier_phi_36_35_ladder_2 = _2029;
        }
        _2095 = frontier_phi_36_35_ladder_2;
        _2097 = frontier_phi_36_35_ladder;
        _2099 = frontier_phi_36_35_ladder_1;
    }
    else
    {
        _2095 = _2029;
        _2097 = _2030;
        _2099 = _2031;
    }
    uvec4 _2104 = floatBitsToUint(cbInstanceData._m0[_697 + 5u]);
    uint _2106 = _2104.x * 14u;
    uint _2107 = _2106 + 13u;
    float _2114 = _806 + (-1.0);
    float _2119 = (cbLight._m0[_2107].x * _2114) + 1.0;
    float _2120 = (cbLight._m0[_2107].y * _2114) + 1.0;
    float _2121 = (cbLight._m0[_2107].z * _2114) + 1.0;
    float _2122 = (cbLight._m0[_2107].w * _2114) + 1.0;
    uint _2123 = _2106 + 5u;
    float _2129 = isnan(1.0) ? _2120 : (isnan(_2120) ? 1.0 : min(_2120, 1.0));
    uint _2133 = _2106 + 4u;
    float _2142 = isnan(1.0) ? _2119 : (isnan(_2119) ? 1.0 : min(_2119, 1.0));
    uint _2146 = _2106 | 1u;
    float _2157 = dot(vec3(cbLight._m0[_2106].xyz), vec3(_503, _504, _505));
    float _2160 = dot(vec3(cbLight._m0[_2146].xyz), vec3(_503, _504, _505));
    float _4394 = isnan(0.0) ? _2157 : (isnan(_2157) ? 0.0 : max(_2157, 0.0));
    float _4405 = isnan(0.0) ? _2160 : (isnan(_2160) ? 0.0 : max(_2160, 0.0));
    float _2165 = (isnan(1.0) ? _4394 : (isnan(_4394) ? 1.0 : min(_4394, 1.0))) * 0.3183098733425140380859375;
    float _2167 = (isnan(1.0) ? _4405 : (isnan(_4405) ? 1.0 : min(_4405, 1.0))) * 0.3183098733425140380859375;
    float _2174 = ((cbLight._m0[_2123].x * _2129) * _2167) + (((cbLight._m0[_2133].x * _2095) * _2142) * _2165);
    float _2175 = ((_2129 * cbLight._m0[_2123].y) * _2167) + (((cbLight._m0[_2133].y * _2097) * _2142) * _2165);
    float _2176 = ((_2129 * cbLight._m0[_2123].z) * _2167) + (((cbLight._m0[_2133].z * _2099) * _2142) * _2165);
    uvec4 _2180 = floatBitsToUint(cbLight._m0[_2106 + 12u]);
    bool _2182 = _2180.x == 0u;
    float _2284;
    float _2286;
    float _2288;
    if (_2182)
    {
        _2284 = _2174;
        _2286 = _2175;
        _2288 = _2176;
    }
    else
    {
        uint _2292 = _2106 + 6u;
        float _2308 = (dot(vec3(cbLight._m0[_2106 + 2u].xyz), vec3(_503, _504, _505)) * 0.5) + 0.5;
        float _2309 = _2308 * _2308;
        float _4416 = isnan(0.0) ? _2309 : (isnan(_2309) ? 0.0 : max(_2309, 0.0));
        float _2310 = isnan(1.0) ? _4416 : (isnan(_4416) ? 1.0 : min(_4416, 1.0));
        float _2311 = isnan(1.0) ? _2121 : (isnan(_2121) ? 1.0 : min(_2121, 1.0));
        _2284 = (((cbLight._m0[_2292].x * 0.3183098733425140380859375) * _2310) * _2311) + _2174;
        _2286 = (((cbLight._m0[_2292].y * 0.3183098733425140380859375) * _2310) * _2311) + _2175;
        _2288 = (((cbLight._m0[_2292].z * 0.3183098733425140380859375) * _2310) * _2311) + _2176;
    }
    bool _2291 = _2180.y == 0u;
    float _2346;
    float _2348;
    float _2350;
    if (_2291)
    {
        _2346 = _2284;
        _2348 = _2286;
        _2350 = _2288;
    }
    else
    {
        uint _2519 = _2106 + 7u;
        float _2535 = (dot(vec3(cbLight._m0[_2106 + 3u].xyz), vec3(_503, _504, _505)) * 0.5) + 0.5;
        float _2536 = _2535 * _2535;
        float _4432 = isnan(0.0) ? _2536 : (isnan(_2536) ? 0.0 : max(_2536, 0.0));
        float _2537 = isnan(1.0) ? _4432 : (isnan(_4432) ? 1.0 : min(_4432, 1.0));
        float _2538 = isnan(1.0) ? _2122 : (isnan(_2122) ? 1.0 : min(_2122, 1.0));
        _2346 = (((cbLight._m0[_2519].x * 0.3183098733425140380859375) * _2537) * _2538) + _2284;
        _2348 = (((cbLight._m0[_2519].y * 0.3183098733425140380859375) * _2537) * _2538) + _2286;
        _2350 = (((cbLight._m0[_2519].z * 0.3183098733425140380859375) * _2537) * _2538) + _2288;
    }
    uint _2353 = _2106 + 8u;
    float _2366 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2106].w)) * _673) * 0.949999988079071044921875);
    float _2367 = _2366 * _2366;
    float _2368 = cbLight._m0[_2106].x + _586;
    float _2369 = cbLight._m0[_2106].y + _587;
    float _2370 = cbLight._m0[_2106].z + _588;
    float _2374 = inversesqrt(dot(vec3(_2368, _2369, _2370), vec3(_2368, _2369, _2370)));
    float _2375 = _2374 * _2368;
    float _2376 = _2374 * _2369;
    float _2377 = _2374 * _2370;
    float _2378 = dot(vec3(_503, _504, _505), vec3(cbLight._m0[_2106].xyz));
    float _4448 = isnan(0.0) ? _2378 : (isnan(_2378) ? 0.0 : max(_2378, 0.0));
    float _2381 = isnan(1.0) ? _4448 : (isnan(_4448) ? 1.0 : min(_4448, 1.0));
    float _4459 = isnan(0.0) ? _807 : (isnan(_807) ? 0.0 : max(_807, 0.0));
    float _2382 = isnan(1.0) ? _4459 : (isnan(_4459) ? 1.0 : min(_4459, 1.0));
    float _2383 = dot(vec3(_503, _504, _505), vec3(_2375, _2376, _2377));
    float _4470 = isnan(0.0) ? _2383 : (isnan(_2383) ? 0.0 : max(_2383, 0.0));
    float _2386 = isnan(1.0) ? _4470 : (isnan(_4470) ? 1.0 : min(_4470, 1.0));
    float _2387 = dot(vec3(cbLight._m0[_2106].xyz), vec3(_2375, _2376, _2377));
    float _4481 = isnan(0.0) ? _2387 : (isnan(_2387) ? 0.0 : max(_2387, 0.0));
    float _2391 = _2367 * _2367;
    float _2395 = ((_2386 * _2386) * (_2391 + (-1.0))) + 1.0;
    float _2403 = exp2(log2(1.0 - (isnan(1.0) ? _4481 : (isnan(_4481) ? 1.0 : min(_4481, 1.0)))) * 5.0);
    float _2404 = 0.959999978542327880859375 - _789;
    float _2406 = 0.959999978542327880859375 - _790;
    float _2407 = 0.959999978542327880859375 - _791;
    float _2414 = 1.0 - _2367;
    float _2425 = (0.5 / (((_2382 * ((_2381 * _2414) + _2367)) + 9.9999999392252902907785028219223e-09) + (((_2382 * _2414) + _2367) * _2381))) * _2381;
    float _4492 = isnan(0.0) ? _2425 : (isnan(_2425) ? 0.0 : max(_2425, 0.0));
    float _2427 = (isnan(1.0) ? _4492 : (isnan(_4492) ? 1.0 : min(_4492, 1.0))) * (_2391 / ((_2395 * _2395) * 3.141590118408203125));
    uint _2441 = _2106 + 9u;
    float _2452 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2146].w)) * _673) * 0.949999988079071044921875);
    float _2453 = _2452 * _2452;
    float _2454 = cbLight._m0[_2146].x + _586;
    float _2455 = cbLight._m0[_2146].y + _587;
    float _2456 = cbLight._m0[_2146].z + _588;
    float _2460 = inversesqrt(dot(vec3(_2454, _2455, _2456), vec3(_2454, _2455, _2456)));
    float _2461 = _2460 * _2454;
    float _2462 = _2460 * _2455;
    float _2463 = _2460 * _2456;
    float _2464 = dot(vec3(_503, _504, _505), vec3(cbLight._m0[_2146].xyz));
    float _4503 = isnan(0.0) ? _2464 : (isnan(_2464) ? 0.0 : max(_2464, 0.0));
    float _2467 = isnan(1.0) ? _4503 : (isnan(_4503) ? 1.0 : min(_4503, 1.0));
    float _2468 = dot(vec3(_503, _504, _505), vec3(_2461, _2462, _2463));
    float _4514 = isnan(0.0) ? _2468 : (isnan(_2468) ? 0.0 : max(_2468, 0.0));
    float _2471 = isnan(1.0) ? _4514 : (isnan(_4514) ? 1.0 : min(_4514, 1.0));
    float _2472 = dot(vec3(cbLight._m0[_2146].xyz), vec3(_2461, _2462, _2463));
    float _4525 = isnan(0.0) ? _2472 : (isnan(_2472) ? 0.0 : max(_2472, 0.0));
    float _2476 = _2453 * _2453;
    float _2480 = ((_2471 * _2471) * (_2476 + (-1.0))) + 1.0;
    float _2487 = exp2(log2(1.0 - (isnan(1.0) ? _4525 : (isnan(_4525) ? 1.0 : min(_4525, 1.0)))) * 5.0);
    float _2494 = 1.0 - _2453;
    float _2504 = (0.5 / (((_2382 * ((_2467 * _2494) + _2453)) + 9.9999999392252902907785028219223e-09) + (((_2382 * _2494) + _2453) * _2467))) * _2467;
    float _4536 = isnan(0.0) ? _2504 : (isnan(_2504) ? 0.0 : max(_2504, 0.0));
    float _2506 = (isnan(1.0) ? _4536 : (isnan(_4536) ? 1.0 : min(_4536, 1.0))) * (_2476 / ((_2480 * _2480) * 3.141590118408203125));
    float _2516 = (((((_2487 * _2404) + _792) * cbLight._m0[_2441].x) * _2506) * _2129) + ((((cbLight._m0[_2353].x * _2095) * ((_2403 * _2404) + _792)) * _2427) * _2142);
    float _2517 = (((((_2487 * _2406) + _793) * cbLight._m0[_2441].y) * _2506) * _2129) + ((((cbLight._m0[_2353].y * _2097) * ((_2403 * _2406) + _793)) * _2427) * _2142);
    float _2518 = (((((_2487 * _2407) + _794) * cbLight._m0[_2441].z) * _2506) * _2129) + ((((cbLight._m0[_2353].z * _2099) * ((_2403 * _2407) + _794)) * _2427) * _2142);
    float _2574;
    float _2576;
    float _2578;
    if (_2182)
    {
        _2574 = _2516;
        _2576 = _2517;
        _2578 = _2518;
    }
    else
    {
        uint _2580 = _2106 + 2u;
        uint _2584 = _2106 + 10u;
        float _2598 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2580].w)) * _673) * 0.949999988079071044921875);
        float _2599 = _2598 * _2598;
        float _2600 = cbLight._m0[_2580].x + _586;
        float _2601 = cbLight._m0[_2580].y + _587;
        float _2602 = cbLight._m0[_2580].z + _588;
        float _2606 = inversesqrt(dot(vec3(_2600, _2601, _2602), vec3(_2600, _2601, _2602)));
        float _2607 = _2606 * _2600;
        float _2608 = _2606 * _2601;
        float _2609 = _2606 * _2602;
        float _2610 = dot(vec3(_503, _504, _505), vec3(cbLight._m0[_2580].xyz));
        float _4547 = isnan(0.0) ? _2610 : (isnan(_2610) ? 0.0 : max(_2610, 0.0));
        float _2613 = isnan(1.0) ? _4547 : (isnan(_4547) ? 1.0 : min(_4547, 1.0));
        float _2614 = dot(vec3(_503, _504, _505), vec3(_2607, _2608, _2609));
        float _4558 = isnan(0.0) ? _2614 : (isnan(_2614) ? 0.0 : max(_2614, 0.0));
        float _2617 = isnan(1.0) ? _4558 : (isnan(_4558) ? 1.0 : min(_4558, 1.0));
        float _2618 = dot(vec3(cbLight._m0[_2580].xyz), vec3(_2607, _2608, _2609));
        float _4569 = isnan(0.0) ? _2618 : (isnan(_2618) ? 0.0 : max(_2618, 0.0));
        float _2622 = _2599 * _2599;
        float _2626 = ((_2617 * _2617) * (_2622 + (-1.0))) + 1.0;
        float _2633 = exp2(log2(1.0 - (isnan(1.0) ? _4569 : (isnan(_4569) ? 1.0 : min(_4569, 1.0)))) * 5.0);
        float _2640 = 1.0 - _2599;
        float _2650 = (0.5 / (((_2382 * ((_2613 * _2640) + _2599)) + 9.9999999392252902907785028219223e-09) + (((_2382 * _2640) + _2599) * _2613))) * _2613;
        float _4580 = isnan(0.0) ? _2650 : (isnan(_2650) ? 0.0 : max(_2650, 0.0));
        float _2652 = (isnan(1.0) ? _4580 : (isnan(_4580) ? 1.0 : min(_4580, 1.0))) * (_2622 / ((_2626 * _2626) * 3.141590118408203125));
        float _2653 = isnan(1.0) ? _2121 : (isnan(_2121) ? 1.0 : min(_2121, 1.0));
        _2574 = (((((_2633 * _2404) + _792) * cbLight._m0[_2584].x) * _2652) * _2653) + _2516;
        _2576 = (((((_2633 * _2406) + _793) * cbLight._m0[_2584].y) * _2652) * _2653) + _2517;
        _2578 = (((((_2633 * _2407) + _794) * cbLight._m0[_2584].z) * _2652) * _2653) + _2518;
    }
    float _2684;
    float _2686;
    float _2688;
    if (_2291)
    {
        _2684 = _2574;
        _2686 = _2576;
        _2688 = _2578;
    }
    else
    {
        uint _2695 = _2106 + 3u;
        uint _2699 = _2106 + 11u;
        float _2713 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2695].w)) * _673) * 0.949999988079071044921875);
        float _2714 = _2713 * _2713;
        float _2715 = cbLight._m0[_2695].x + _586;
        float _2716 = cbLight._m0[_2695].y + _587;
        float _2717 = cbLight._m0[_2695].z + _588;
        float _2721 = inversesqrt(dot(vec3(_2715, _2716, _2717), vec3(_2715, _2716, _2717)));
        float _2722 = _2721 * _2715;
        float _2723 = _2721 * _2716;
        float _2724 = _2721 * _2717;
        float _2725 = dot(vec3(_503, _504, _505), vec3(cbLight._m0[_2695].xyz));
        float _4596 = isnan(0.0) ? _2725 : (isnan(_2725) ? 0.0 : max(_2725, 0.0));
        float _2728 = isnan(1.0) ? _4596 : (isnan(_4596) ? 1.0 : min(_4596, 1.0));
        float _2729 = dot(vec3(_503, _504, _505), vec3(_2722, _2723, _2724));
        float _4607 = isnan(0.0) ? _2729 : (isnan(_2729) ? 0.0 : max(_2729, 0.0));
        float _2732 = isnan(1.0) ? _4607 : (isnan(_4607) ? 1.0 : min(_4607, 1.0));
        float _2733 = dot(vec3(cbLight._m0[_2695].xyz), vec3(_2722, _2723, _2724));
        float _4618 = isnan(0.0) ? _2733 : (isnan(_2733) ? 0.0 : max(_2733, 0.0));
        float _2737 = _2714 * _2714;
        float _2741 = ((_2732 * _2732) * (_2737 + (-1.0))) + 1.0;
        float _2748 = exp2(log2(1.0 - (isnan(1.0) ? _4618 : (isnan(_4618) ? 1.0 : min(_4618, 1.0)))) * 5.0);
        float _2755 = 1.0 - _2714;
        float _2765 = (0.5 / (((_2382 * ((_2728 * _2755) + _2714)) + 9.9999999392252902907785028219223e-09) + (((_2382 * _2755) + _2714) * _2728))) * _2728;
        float _4629 = isnan(0.0) ? _2765 : (isnan(_2765) ? 0.0 : max(_2765, 0.0));
        float _2767 = (isnan(1.0) ? _4629 : (isnan(_4629) ? 1.0 : min(_4629, 1.0))) * (_2737 / ((_2741 * _2741) * 3.141590118408203125));
        float _2768 = isnan(1.0) ? _2122 : (isnan(_2122) ? 1.0 : min(_2122, 1.0));
        _2684 = (((((_2748 * _2404) + _792) * cbLight._m0[_2699].x) * _2767) * _2768) + _2574;
        _2686 = (((((_2748 * _2406) + _793) * cbLight._m0[_2699].y) * _2767) * _2768) + _2576;
        _2688 = (((((_2748 * _2407) + _794) * cbLight._m0[_2699].z) * _2767) * _2768) + _2578;
    }
    float _2833;
    float _2835;
    float _2837;
    float _2839;
    float _2841;
    float _2843;
    if (_2104.y == 0u)
    {
        uvec4 _2789 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2790 = _2789.x;
        uint _2801 = uint((float(_2789.y) * floor(float(uint(cbSceneParam._m0[85u].y * _595) / _2790))) + floor(float(uint(cbSceneParam._m0[85u].x * _594) / _2790)));
        float _2811 = (log2(_1882 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2812 = isnan(0.0) ? _2811 : (isnan(_2811) ? 0.0 : max(_2811, 0.0));
        uint _2815 = uint(isnan(14.0) ? _2812 : (isnan(_2812) ? 14.0 : min(_2812, 14.0)));
        uvec4 _2820 = texelFetch(g_lightClusterGridBuffer, int(((_2815 << 2u) + (_2801 << 6u)) >> 2u));
        uint _2821 = _2820.x;
        uint _2822 = _2789.z;
        float _2943;
        float _2945;
        float _2947;
        float _2949;
        float _2951;
        float _2953;
        if (((((1u << ((_2822 >> 4u) & 15u)) + 4294967295u) & _2821) == 0u) || ((_2822 & 240u) == 0u))
        {
            _2943 = 0.0;
            _2945 = 0.0;
            _2947 = 0.0;
            _2949 = 0.0;
            _2951 = 0.0;
            _2953 = 0.0;
        }
        else
        {
            float _2944;
            float _2946;
            float _2948;
            float _2950;
            float _2952;
            float _2954;
            float _3096 = 0.0;
            float _3097 = 0.0;
            float _3098 = 0.0;
            float _3099 = 0.0;
            float _3100 = 0.0;
            float _3101 = 0.0;
            uint _3102 = 0u;
            uint _3111;
            bool _3112;
            for (;;)
            {
                _3111 = texelFetch(g_lightClassification, int((((_2815 << 5u) + (_2801 << 9u)) + (_3102 << 2u)) >> 2u)).x;
                _3112 = _3111 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_3112)
                {
                    frontier_phi_68_pred = _3101;
                    frontier_phi_68_pred_1 = _3100;
                    frontier_phi_68_pred_2 = _3099;
                    frontier_phi_68_pred_3 = _3097;
                    frontier_phi_68_pred_4 = _3096;
                    frontier_phi_68_pred_5 = _3098;
                }
                else
                {
                    float _3220;
                    float _3221;
                    float _3222;
                    float _3223;
                    float _3224;
                    float _3225;
                    uint _3226;
                    _3220 = _3096;
                    _3221 = _3097;
                    _3222 = _3098;
                    _3223 = _3099;
                    _3224 = _3100;
                    _3225 = _3101;
                    _3226 = _3111;
                    float _3152;
                    float _3153;
                    float _3154;
                    float _3155;
                    float _3156;
                    float _3157;
                    for (;;)
                    {
                        uint _3230 = uint(findLSB(_3226)) + (_3102 << 5u);
                        uint _3227 = (_3226 + 4294967295u) & _3226;
                        uint _3232 = _3230 * 48u;
                        vec4 _3246 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3232)).x, texelFetch(g_PointLightRenderingBuffer, int(_3232 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3232 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3232 + 3u)).x));
                        uint _3252 = (_3230 * 48u) + 4u;
                        vec4 _3265 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3252)).x, texelFetch(g_PointLightRenderingBuffer, int(_3252 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3252 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3252 + 3u)).x));
                        uint _3271 = (_3230 * 48u) + 8u;
                        vec3 _3282 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3271)).x, texelFetch(g_PointLightRenderingBuffer, int(_3271 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3271 + 2u)).x));
                        float _3286 = _3246.x - _1880;
                        float _3287 = _3246.y - _1881;
                        float _3288 = _3246.z - _1882;
                        float _3289 = dot(vec3(_3286, _3287, _3288), vec3(_3286, _3287, _3288));
                        float _3292 = inversesqrt(_3289);
                        float _3293 = _3292 * _3286;
                        float _3294 = _3292 * _3287;
                        float _3295 = _3292 * _3288;
                        float _3296 = dot(vec3(_618, _621, _624), vec3(_3293, _3294, _3295));
                        float _3301 = 1.0 - (_3289 * _3246.w);
                        float _4655 = isnan(0.0) ? _3301 : (isnan(_3301) ? 0.0 : max(_3301, 0.0));
                        float _3302 = isnan(1.0) ? _4655 : (isnan(_4655) ? 1.0 : min(_4655, 1.0));
                        float _3303 = sqrt(_3289) * _3265.w;
                        float _3306 = 1.39999997615814208984375 / (_3303 + 1.39999997615814208984375);
                        float _3307 = _3306 * _3306;
                        float _3310 = ((1.0 - _3307) * _3296) + _3307;
                        float _3313 = _3303 * _3303;
                        float _3317 = ((isnan(0.0) ? _3310 : (isnan(_3310) ? 0.0 : max(_3310, 0.0))) * _3302) / ((_3313 * 0.699999988079071044921875) + 1.0);
                        float _3321 = (-0.0) - _1880;
                        float _3322 = (-0.0) - _1881;
                        float _3323 = (-0.0) - _1882;
                        float _3327 = inversesqrt(dot(vec3(_3321, _3322, _3323), vec3(_3321, _3322, _3323)));
                        float _3328 = _3327 * _3321;
                        float _3329 = _3327 * _3322;
                        float _3330 = _3327 * _3323;
                        float _3337 = exp2(log2(1.0 / ((_3313 * 3.5) + 5.0)) * 0.25);
                        float _3338 = 1.0 - _822;
                        float _3345 = sqrt(1.0 - ((1.0 - (_3338 * _3338)) * (1.0 - (_3337 * _3337))));
                        float _3346 = _3345 * _3345;
                        float _3347 = _3346 * _3346;
                        float _3348 = _3328 + _3293;
                        float _3349 = _3329 + _3294;
                        float _3350 = _3330 + _3295;
                        float _3354 = inversesqrt(dot(vec3(_3348, _3349, _3350), vec3(_3348, _3349, _3350)));
                        float _3358 = dot(vec3(_618, _621, _624), vec3(_3328, _3329, _3330));
                        float _4671 = isnan(0.0) ? _3358 : (isnan(_3358) ? 0.0 : max(_3358, 0.0));
                        float _3361 = isnan(1.0) ? _4671 : (isnan(_4671) ? 1.0 : min(_4671, 1.0));
                        float _3362 = dot(vec3(_618, _621, _624), vec3(_3354 * _3348, _3354 * _3349, _3354 * _3350));
                        float _4682 = isnan(0.0) ? _3362 : (isnan(_3362) ? 0.0 : max(_3362, 0.0));
                        float _3365 = isnan(1.0) ? _4682 : (isnan(_4682) ? 1.0 : min(_4682, 1.0));
                        float _3369 = ((_3365 * _3365) * (_3347 + (-1.0))) + 1.0;
                        float _3370 = _3306 * _3346;
                        float _3371 = _3370 * _3370;
                        float _3374 = ((1.0 - _3371) * _3296) + _3371;
                        float _4693 = isnan(0.0) ? _3374 : (isnan(_3374) ? 0.0 : max(_3374, 0.0));
                        float _3375 = isnan(1.0) ? _4693 : (isnan(_4693) ? 1.0 : min(_4693, 1.0));
                        float _3376 = 1.0 - _3346;
                        float _3386 = (0.5 / (((_3375 * ((_3361 * _3376) + _3346)) + 9.9999999392252902907785028219223e-09) + (((_3375 * _3376) + _3346) * _3361))) * _3375;
                        float _4704 = isnan(0.0) ? _3386 : (isnan(_3386) ? 0.0 : max(_3386, 0.0));
                        float _3397 = (((_3347 * 3.1415927410125732421875) * (isnan(1.0) ? _4704 : (isnan(_4704) ? 1.0 : min(_4704, 1.0)))) / ((_3369 * _3369) * ((_3313 * 2.1991131305694580078125) + 3.141590118408203125))) * _3302;
                        _3155 = (_3317 * _3265.x) + _3223;
                        _3156 = (_3317 * _3265.y) + _3224;
                        _3157 = (_3317 * _3265.z) + _3225;
                        _3152 = (_3397 * _3282.x) + _3220;
                        _3153 = (_3397 * _3282.y) + _3221;
                        _3154 = (_3397 * _3282.z) + _3222;
                        if (_3227 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3220 = _3152;
                            _3221 = _3153;
                            _3222 = _3154;
                            _3223 = _3155;
                            _3224 = _3156;
                            _3225 = _3157;
                            _3226 = _3227;
                        }
                    }
                    frontier_phi_68_pred = _3157;
                    frontier_phi_68_pred_1 = _3156;
                    frontier_phi_68_pred_2 = _3155;
                    frontier_phi_68_pred_3 = _3153;
                    frontier_phi_68_pred_4 = _3152;
                    frontier_phi_68_pred_5 = _3154;
                }
                _2954 = frontier_phi_68_pred;
                _2952 = frontier_phi_68_pred_1;
                _2950 = frontier_phi_68_pred_2;
                _2946 = frontier_phi_68_pred_3;
                _2944 = frontier_phi_68_pred_4;
                _2948 = frontier_phi_68_pred_5;
                uint _3103 = _3102 + 1u;
                if (_3103 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3096 = _2944;
                    _3097 = _2946;
                    _3098 = _2948;
                    _3099 = _2950;
                    _3100 = _2952;
                    _3101 = _2954;
                    _3102 = _3103;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2943 = _2944;
            _2945 = _2946;
            _2947 = _2948;
            _2949 = _2950;
            _2951 = _2952;
            _2953 = _2954;
        }
        uvec4 _2957 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2958 = _2957.z;
        uint _2960 = (_2958 >> 8u) & 15u;
        float _3064;
        float _3066;
        float _3068;
        float _3070;
        float _3072;
        float _3074;
        if (((4294967295u << _2960) & _2821) == 0u)
        {
            _3064 = _2943;
            _3066 = _2945;
            _3068 = _2947;
            _3070 = _2949;
            _3072 = _2951;
            _3074 = _2953;
        }
        else
        {
            float _3089 = inversesqrt(dot(vec3(_1880, _1881, _1882), vec3(_1880, _1881, _1882)));
            float _3090 = _3089 * _1880;
            float _3091 = _3089 * _1881;
            float _3092 = _3089 * _1882;
            float frontier_phi_62_63_ladder;
            float frontier_phi_62_63_ladder_1;
            float frontier_phi_62_63_ladder_2;
            float frontier_phi_62_63_ladder_3;
            float frontier_phi_62_63_ladder_4;
            float frontier_phi_62_63_ladder_5;
            if (_2960 < ((_2958 >> 12u) & 15u))
            {
                float _3065;
                float _3067;
                float _3069;
                float _3071;
                float _3073;
                float _3075;
                float _3203 = _2943;
                float _3204 = _2945;
                float _3205 = _2947;
                float _3206 = _2949;
                float _3207 = _2951;
                float _3208 = _2953;
                uint _3209 = _2960;
                uint _3218;
                bool _3219;
                for (;;)
                {
                    _3218 = texelFetch(g_lightClassification, int((((_2815 << 5u) + (_2801 << 9u)) + (_3209 << 2u)) >> 2u)).x;
                    _3219 = _3218 == 0u;
                    float frontier_phi_74_pred;
                    float frontier_phi_74_pred_1;
                    float frontier_phi_74_pred_2;
                    float frontier_phi_74_pred_3;
                    float frontier_phi_74_pred_4;
                    float frontier_phi_74_pred_5;
                    if (_3219)
                    {
                        frontier_phi_74_pred = _3205;
                        frontier_phi_74_pred_1 = _3204;
                        frontier_phi_74_pred_2 = _3203;
                        frontier_phi_74_pred_3 = _3208;
                        frontier_phi_74_pred_4 = _3207;
                        frontier_phi_74_pred_5 = _3206;
                    }
                    else
                    {
                        float _3402;
                        float _3403;
                        float _3404;
                        float _3405;
                        float _3406;
                        float _3407;
                        float _3697;
                        float _3698;
                        float _3699;
                        float _3700;
                        float _3701;
                        float _3702;
                        float _3415 = _3203;
                        float _3416 = _3204;
                        float _3417 = _3205;
                        float _3418 = _3206;
                        float _3419 = _3207;
                        float _3420 = _3208;
                        uint _3421 = _3218;
                        uint _3422;
                        vec4 _3447;
                        float _3448;
                        vec4 _3463;
                        vec3 _3475;
                        vec4 _3490;
                        vec4 _3506;
                        float _3553;
                        bool _3554;
                        for (;;)
                        {
                            uint _3432 = ((_3209 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3421));
                            _3422 = (_3421 + 4294967295u) & _3421;
                            uint _3434 = _3432 * 40u;
                            _3447 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3434)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3434 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3434 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3434 + 3u)).x));
                            _3448 = _3447.w;
                            uint _3450 = (_3432 * 40u) + 4u;
                            _3463 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3450)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3450 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3450 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3450 + 3u)).x));
                            uint _3465 = (_3432 * 40u) + 8u;
                            _3475 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3465)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3465 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3465 + 2u)).x));
                            uint _3477 = (_3432 * 40u) + 16u;
                            _3490 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3477)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3477 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3477 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3477 + 3u)).x));
                            uint _3493 = (_3432 * 40u) + 20u;
                            _3506 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3493)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3493 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3493 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3493 + 3u)).x));
                            uint _3509 = (_3432 * 40u) + 24u;
                            vec4 _3522 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3509)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3509 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3509 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3509 + 3u)).x));
                            uint _3528 = (_3432 * 40u) + 28u;
                            vec4 _3541 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3528)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3528 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3528 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3528 + 3u)).x));
                            _3553 = fma(_1882, _3541.z, fma(_1881, _3541.y, _3541.x * _1880)) + _3541.w;
                            _3554 = !((fma(_1882, _3522.z, fma(_1881, _3522.y, _3522.x * _1880)) + _3522.w) <= 0.0);
                            float frontier_phi_80_pred;
                            float frontier_phi_80_pred_1;
                            float frontier_phi_80_pred_2;
                            float frontier_phi_80_pred_3;
                            float frontier_phi_80_pred_4;
                            float frontier_phi_80_pred_5;
                            if (_3554)
                            {
                                float _3581 = _3447.x - _1880;
                                float _3582 = _3447.y - _1881;
                                float _3583 = _3447.z - _1882;
                                float _3584 = dot(vec3(_3581, _3582, _3583), vec3(_3581, _3582, _3583));
                                float _3587 = inversesqrt(_3584);
                                float _3588 = _3587 * _3581;
                                float _3589 = _3587 * _3582;
                                float _3590 = _3587 * _3583;
                                float _3594 = 1.0 - (_3584 / (_3448 * _3448));
                                float _4715 = isnan(0.0) ? _3594 : (isnan(_3594) ? 0.0 : max(_3594, 0.0));
                                float _3595 = isnan(1.0) ? _4715 : (isnan(_4715) ? 1.0 : min(_4715, 1.0));
                                float _3599 = sqrt(_3584) * _3463.w;
                                float _3601 = 1.39999997615814208984375 / (_3599 + 1.39999997615814208984375);
                                float _3602 = _3601 * _3601;
                                float _3605 = ((1.0 - _3602) * dot(vec3(_3588, _3589, _3590), vec3(_618, _621, _624))) + _3602;
                                float _3608 = _3599 * _3599;
                                float _3612 = (fma(_1882, _3490.z, fma(_1881, _3490.y, _3490.x * _1880)) + _3490.w) / _3553;
                                float _3613 = (fma(_1882, _3506.z, fma(_1881, _3506.y, _3506.x * _1880)) + _3506.w) / _3553;
                                float _3617 = 1.0 - dot(vec2(_3612, _3613), vec2(_3612, _3613));
                                float _4731 = isnan(0.0) ? _3617 : (isnan(_3617) ? 0.0 : max(_3617, 0.0));
                                float _3618 = isnan(1.0) ? _4731 : (isnan(_4731) ? 1.0 : min(_4731, 1.0));
                                float _3619 = _3618 * (((isnan(0.0) ? _3605 : (isnan(_3605) ? 0.0 : max(_3605, 0.0))) * _3595) / ((_3608 * 0.699999988079071044921875) + 1.0));
                                float _3631 = exp2(log2(1.0 / ((_3608 * 3.5) + 5.0)) * 0.25);
                                float _3632 = 1.0 - _822;
                                float _3639 = sqrt(1.0 - ((1.0 - (_3632 * _3632)) * (1.0 - (_3631 * _3631))));
                                float _3640 = _3639 * _3639;
                                float _3641 = _3640 * _3640;
                                float _3642 = _3588 - _3090;
                                float _3643 = _3589 - _3091;
                                float _3644 = _3590 - _3092;
                                float _3648 = inversesqrt(dot(vec3(_3642, _3643, _3644), vec3(_3642, _3643, _3644)));
                                float _3652 = dot(vec3(_618, _621, _624), vec3((-0.0) - _3090, (-0.0) - _3091, (-0.0) - _3092));
                                float _4742 = isnan(0.0) ? _3652 : (isnan(_3652) ? 0.0 : max(_3652, 0.0));
                                float _3655 = isnan(1.0) ? _4742 : (isnan(_4742) ? 1.0 : min(_4742, 1.0));
                                float _3656 = dot(vec3(_618, _621, _624), vec3(_3648 * _3642, _3648 * _3643, _3648 * _3644));
                                float _4753 = isnan(0.0) ? _3656 : (isnan(_3656) ? 0.0 : max(_3656, 0.0));
                                float _3659 = isnan(1.0) ? _4753 : (isnan(_4753) ? 1.0 : min(_4753, 1.0));
                                float _3663 = ((_3659 * _3659) * (_3641 + (-1.0))) + 1.0;
                                float _3664 = _3601 * _3640;
                                float _3665 = _3664 * _3664;
                                float _3671 = ((1.0 - _3665) * dot(vec3(_618, _621, _624), vec3(_3588, _3589, _3590))) + _3665;
                                float _4764 = isnan(0.0) ? _3671 : (isnan(_3671) ? 0.0 : max(_3671, 0.0));
                                float _3672 = isnan(1.0) ? _4764 : (isnan(_4764) ? 1.0 : min(_4764, 1.0));
                                float _3673 = 1.0 - _3640;
                                float _3683 = (0.5 / (((_3672 * ((_3655 * _3673) + _3640)) + 9.9999999392252902907785028219223e-09) + (((_3672 * _3673) + _3640) * _3655))) * _3672;
                                float _4775 = isnan(0.0) ? _3683 : (isnan(_3683) ? 0.0 : max(_3683, 0.0));
                                float _3693 = (_3618 * _3595) * (((_3641 * 3.1415927410125732421875) * (isnan(1.0) ? _4775 : (isnan(_4775) ? 1.0 : min(_4775, 1.0)))) / ((_3663 * _3663) * ((_3608 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_80_pred = _3693 * _3475.z;
                                frontier_phi_80_pred_1 = _3693 * _3475.y;
                                frontier_phi_80_pred_2 = _3693 * _3475.x;
                                frontier_phi_80_pred_3 = _3619 * _3463.z;
                                frontier_phi_80_pred_4 = _3619 * _3463.y;
                                frontier_phi_80_pred_5 = _3619 * _3463.x;
                            }
                            else
                            {
                                frontier_phi_80_pred = 0.0;
                                frontier_phi_80_pred_1 = 0.0;
                                frontier_phi_80_pred_2 = 0.0;
                                frontier_phi_80_pred_3 = 0.0;
                                frontier_phi_80_pred_4 = 0.0;
                                frontier_phi_80_pred_5 = 0.0;
                            }
                            _3699 = frontier_phi_80_pred;
                            _3698 = frontier_phi_80_pred_1;
                            _3697 = frontier_phi_80_pred_2;
                            _3702 = frontier_phi_80_pred_3;
                            _3701 = frontier_phi_80_pred_4;
                            _3700 = frontier_phi_80_pred_5;
                            _3405 = _3700 + _3418;
                            _3406 = _3701 + _3419;
                            _3407 = _3702 + _3420;
                            _3402 = _3697 + _3415;
                            _3403 = _3698 + _3416;
                            _3404 = _3699 + _3417;
                            if (_3422 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3415 = _3402;
                                _3416 = _3403;
                                _3417 = _3404;
                                _3418 = _3405;
                                _3419 = _3406;
                                _3420 = _3407;
                                _3421 = _3422;
                                continue;
                            }
                        }
                        frontier_phi_74_pred = _3404;
                        frontier_phi_74_pred_1 = _3403;
                        frontier_phi_74_pred_2 = _3402;
                        frontier_phi_74_pred_3 = _3407;
                        frontier_phi_74_pred_4 = _3406;
                        frontier_phi_74_pred_5 = _3405;
                    }
                    _3069 = frontier_phi_74_pred;
                    _3067 = frontier_phi_74_pred_1;
                    _3065 = frontier_phi_74_pred_2;
                    _3075 = frontier_phi_74_pred_3;
                    _3073 = frontier_phi_74_pred_4;
                    _3071 = frontier_phi_74_pred_5;
                    uint _3210 = _3209 + 1u;
                    if (_3210 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3203 = _3065;
                        _3204 = _3067;
                        _3205 = _3069;
                        _3206 = _3071;
                        _3207 = _3073;
                        _3208 = _3075;
                        _3209 = _3210;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_62_63_ladder = _3073;
                frontier_phi_62_63_ladder_1 = _3071;
                frontier_phi_62_63_ladder_2 = _3069;
                frontier_phi_62_63_ladder_3 = _3075;
                frontier_phi_62_63_ladder_4 = _3067;
                frontier_phi_62_63_ladder_5 = _3065;
            }
            else
            {
                frontier_phi_62_63_ladder = _2951;
                frontier_phi_62_63_ladder_1 = _2949;
                frontier_phi_62_63_ladder_2 = _2947;
                frontier_phi_62_63_ladder_3 = _2953;
                frontier_phi_62_63_ladder_4 = _2945;
                frontier_phi_62_63_ladder_5 = _2943;
            }
            _3064 = frontier_phi_62_63_ladder_5;
            _3066 = frontier_phi_62_63_ladder_4;
            _3068 = frontier_phi_62_63_ladder_2;
            _3070 = frontier_phi_62_63_ladder_1;
            _3072 = frontier_phi_62_63_ladder;
            _3074 = frontier_phi_62_63_ladder_3;
        }
        float _3079 = isnan(1.0) ? _806 : (isnan(_806) ? 1.0 : min(_806, 1.0));
        _2833 = (_3079 * _3070) + _2346;
        _2835 = (_3079 * _3072) + _2348;
        _2837 = (_3079 * _3074) + _2350;
        _2839 = ((_3064 * _792) * _3079) + _2684;
        _2841 = ((_3066 * _793) * _3079) + _2686;
        _2843 = ((_3068 * _794) * _3079) + _2688;
    }
    else
    {
        _2833 = _2346;
        _2835 = _2348;
        _2837 = _2350;
        _2839 = _2684;
        _2841 = _2686;
        _2843 = _2688;
    }
    uint _2849 = _699 + uint(cbMatDynParam._m0[0u].w);
    float _2859 = ((((cbMtdParam._m0[12u].x * cbMtdParam._m0[16u].z) * cbMtdParam._m0[15u].w) * _447) * _460.x) * cbInstanceData._m0[_2849].x;
    float _2864 = ((((cbMtdParam._m0[12u].y * cbMtdParam._m0[16u].z) * cbMtdParam._m0[15u].w) * _447) * _460.y) * cbInstanceData._m0[_2849].y;
    float _2869 = ((((cbMtdParam._m0[12u].z * cbMtdParam._m0[16u].z) * cbMtdParam._m0[15u].w) * _447) * _460.z) * cbInstanceData._m0[_2849].z;
    float _4791 = isnan(0.0) ? _783 : (isnan(_783) ? 0.0 : max(_783, 0.0));
    float _4802 = isnan(0.0) ? _784 : (isnan(_784) ? 0.0 : max(_784, 0.0));
    float _4813 = isnan(0.0) ? _785 : (isnan(_785) ? 0.0 : max(_785, 0.0));
    float _4824 = isnan(0.0) ? _506 : (isnan(_506) ? 0.0 : max(_506, 0.0));
    float _2887 = (((isnan(1.0) ? _4791 : (isnan(_4791) ? 1.0 : min(_4791, 1.0))) * (_2833 + ((isnan(0.0) ? _1536 : (isnan(_1536) ? 0.0 : max(_1536, 0.0))) * _806))) + ((_2839 + ((isnan(0.0) ? _1827 : (isnan(_1827) ? 0.0 : max(_1827, 0.0))) * _1612)) * cbPerFrame._m0[3u].x)) + _2859;
    float _2889 = (_2864 + ((_2841 + ((isnan(0.0) ? _1830 : (isnan(_1830) ? 0.0 : max(_1830, 0.0))) * _1612)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4802 : (isnan(_4802) ? 1.0 : min(_4802, 1.0))) * (_2835 + ((isnan(0.0) ? _1539 : (isnan(_1539) ? 0.0 : max(_1539, 0.0))) * _806)));
    float _2891 = (_2869 + ((_2843 + ((isnan(0.0) ? _1833 : (isnan(_1833) ? 0.0 : max(_1833, 0.0))) * _1612)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4813 : (isnan(_4813) ? 1.0 : min(_4813, 1.0))) * (_2837 + ((isnan(0.0) ? _1542 : (isnan(_1542) ? 0.0 : max(_1542, 0.0))) * _806)));
    float _4850 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2904 = isnan(1.0) ? _4850 : (isnan(_4850) ? 1.0 : min(_4850, 1.0));
    float _2909 = cbInstanceData._m0[_697 + 6u].w * (isnan(1.0) ? _4824 : (isnan(_4824) ? 1.0 : min(_4824, 1.0)));
    float _2914 = _594 / cbSceneParam._m0[86u].x;
    float _2915 = _595 / cbSceneParam._m0[86u].y;
    vec4 _2929 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2914, _2915, (log2((isnan(cbSceneParam._m0[77u].w) ? _527 : (isnan(_527) ? cbSceneParam._m0[77u].w : min(_527, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2931 = _2929.x;
    float _2932 = _2929.y;
    float _2933 = _2929.z;
    float _2934 = _2929.w;
    float _3005;
    float _3007;
    float _3009;
    float _3011;
    if (_527 > cbSceneParam._m0[78u].w)
    {
        float _2968 = isnan(_527) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _527 : min(cbSceneParam._m0[80u].w, _527));
        float _2969 = _2968 / _527;
        float _2980 = _2969 * _579;
        float _2981 = _580 * _2969;
        float _2982 = (-0.0) - _2981;
        float _2983 = _2969 * _581;
        float _2985 = (cbSceneParam._m0[77u].w * _2982) / _2968;
        float _2986 = _2985 + cbSceneParam._m0[79u].w;
        float _2987 = cbSceneParam._m0[79u].w - _2981;
        float _2993 = sqrt(((_2980 * _2980) + (_2981 * _2981)) + (_2983 * _2983));
        float _2996 = (1.0 - (cbSceneParam._m0[77u].w / _2968)) * _2993;
        float _3001 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3003 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3165;
        if (abs((_2982 - _2985) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3165 = ((((_2986 > 0.0) ? exp2(_3001 * _2986) : (2.0 - exp2(_3003 * _2986))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2996;
        }
        else
        {
            float _3125 = 1.0 / cbSceneParam._m0[80u].x;
            float _3126 = isnan(_2987) ? _2986 : (isnan(_2986) ? _2987 : max(_2986, _2987));
            float _3127 = isnan(_2987) ? _2986 : (isnan(_2986) ? _2987 : min(_2986, _2987));
            float _3136 = isnan(0.0) ? _3126 : (isnan(_3126) ? 0.0 : min(_3126, 0.0));
            float _3137 = isnan(0.0) ? _3127 : (isnan(_3127) ? 0.0 : min(_3127, 0.0));
            _3165 = ((abs(_2993 / _2982) * cbSceneParam._m0[80u].y) * ((((_3136 - _3137) * 2.0) - ((exp2(_3001 * (isnan(0.0) ? _3126 : (isnan(_3126) ? 0.0 : max(_3126, 0.0)))) - exp2(_3001 * (isnan(0.0) ? _3127 : (isnan(_3127) ? 0.0 : max(_3127, 0.0))))) * _3125)) - ((exp2(_3003 * _3136) - exp2(_3003 * _3137)) * _3125))) + (_2996 * cbSceneParam._m0[80u].z);
        }
        vec4 _3167 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2914, _2915, 1.0), 0.0);
        float _3176 = exp2((_3165 * (-1.44269502162933349609375)) * (1.0 - _3167.w));
        float _3177 = log2(_3176);
        float _3193 = log2(_2934);
        _3005 = (exp2(_3193 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3177 * cbSceneParam._m0[78u].x)) * _3167.x) / cbSceneParam._m0[78u].x)) + _2931;
        _3007 = (exp2(_3193 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3177 * cbSceneParam._m0[78u].y)) * _3167.y) / cbSceneParam._m0[78u].y)) + _2932;
        _3009 = (exp2(_3193 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3177 * cbSceneParam._m0[78u].z)) * _3167.z) / cbSceneParam._m0[78u].z)) + _2933;
        _3011 = _3176 * _2934;
    }
    else
    {
        _3005 = _2931;
        _3007 = _2932;
        _3009 = _2933;
        _3011 = _2934;
    }
    float _3023 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3024 = _3023 == 3.0;
    float _3025 = log2(_3011);
    float _3029 = exp2(_3025 * cbSceneParam._m0[78u].x);
    float _3030 = exp2(_3025 * cbSceneParam._m0[78u].y);
    float _3031 = exp2(_3025 * cbSceneParam._m0[78u].z);
    float _3032 = _3029 * (isnan(0.0) ? _2887 : (isnan(_2887) ? 0.0 : max(_2887, 0.0)));
    float _3033 = _3030 * (isnan(0.0) ? _2889 : (isnan(_2889) ? 0.0 : max(_2889, 0.0)));
    float _3034 = _3031 * (isnan(0.0) ? _2891 : (isnan(_2891) ? 0.0 : max(_2891, 0.0)));
    float _3043 = (_3023 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3043 * (_3024 ? _3032 : (_3032 + (cbSceneParam._m0[72u].w * _3005)));
    SV_Target.y = _3043 * (_3024 ? _3033 : (_3033 + (cbSceneParam._m0[72u].w * _3007)));
    SV_Target.z = _3043 * (_3024 ? _3034 : (_3034 + (cbSceneParam._m0[72u].w * _3009)));
    SV_Target.w = _2909;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2859) * _2904) * _3029) * _3043;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2864) * _2904) * _3030) * _3043;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2869) * _2904) * _3031) * _3043;
    SV_Target_1.w = _2909;
}


