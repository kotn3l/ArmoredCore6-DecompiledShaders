#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[18];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_1;
layout(set = 0, binding = 1) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_7;
layout(set = 0, binding = 10) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_6;
layout(set = 0, binding = 12) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_0;
layout(set = 0, binding = 3) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_10;
layout(set = 0, binding = 4) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_11;
layout(set = 0, binding = 5) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_12;
layout(set = 0, binding = 6) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_2;
layout(set = 0, binding = 7) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_4;
layout(set = 0, binding = 9) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_5;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1369;
float _3802;
float _3803;
float _3804;
float _3805;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _215 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _216 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _217 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _223 = inversesqrt(dot(vec3(_215, _216, _217), vec3(_215, _216, _217)));
    float _230 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _231 = _230 * NORMAL.x;
    float _232 = _230 * NORMAL.y;
    float _233 = _230 * NORMAL.z;
    float _237 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _245;
    float _246;
    float _247;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _245 = (-0.0) - _231;
        _246 = (-0.0) - _232;
        _247 = (-0.0) - _233;
    }
    else
    {
        _245 = _231;
        _246 = _232;
        _247 = _233;
    }
    vec4 _260 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _265 = _260.z;
    float _266 = _260.w;
    float _272 = exp2(log2(_265 * 22.0) * 260.0);
    float _273 = isnan(0.0) ? _272 : (isnan(_272) ? 0.0 : max(_272, 0.0));
    float _274 = isnan(1.0) ? _273 : (isnan(_273) ? 1.0 : min(_273, 1.0));
    vec4 _288 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _299 = cbMtdParam._m0[10u].x * _288.x;
    float _300 = cbMtdParam._m0[10u].y * _288.y;
    float _301 = cbMtdParam._m0[10u].z * _288.z;
    vec4 _313 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _334 = (((cbMtdParam._m0[9u].x * _313.x) - _299) * _274) + _299;
    float _335 = (((cbMtdParam._m0[9u].y * _313.y) - _300) * _274) + _300;
    float _336 = (((cbMtdParam._m0[9u].z * _313.z) - _301) * _274) + _301;
    float _341 = exp2(log2(1.0 - _266) * 8.0);
    vec4 _353 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_10, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _378 = exp2(log2(_266) * 8.0);
    vec4 _391 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _416 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _424 = (((((cbMtdParam._m0[13u].x * _353.x) - _334) * _341) + _334) * 4.55000019073486328125) * _416.x;
    float _426 = (((((cbMtdParam._m0[13u].y * _353.y) - _335) * _341) + _335) * 4.55000019073486328125) * _416.y;
    float _428 = (((((cbMtdParam._m0[13u].z * _353.z) - _336) * _341) + _336) * 4.55000019073486328125) * _416.z;
    float _435 = (((cbMtdParam._m0[11u].x * _391.x) - _424) * _378) + _424;
    float _436 = (((cbMtdParam._m0[11u].y * _391.y) - _426) * _378) + _426;
    float _437 = (((cbMtdParam._m0[11u].z * _391.z) - _428) * _378) + _428;
    float _438 = _416.w * _313.w;
    float _468 = (((texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w)).x - cbMtdParam._m0[17u].x) + cbMtdParam._m0[16u].x) * _274) + cbMtdParam._m0[17u].x;
    float _471 = ((cbMtdParam._m0[15u].z - _468) * _341) + _468;
    float _475 = ((cbMtdParam._m0[16u].w - _471) * _378) + _471;
    vec4 _487 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w));
    float _489 = _487.x;
    float _490 = _487.y;
    float _496 = cbMtdParam._m0[14u].y + _487.z;
    vec4 _508 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w));
    float _517 = (((_508.z - _496) + cbMtdParam._m0[14u].x) * _274) + _496;
    vec4 _530 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    vec4 _552 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _565 = (((_274 * (_265 + (-0.5))) + 0.5) * 2.0) * ((((_530.z - _517) + cbMtdParam._m0[15u].y) * _341) + _517);
    float _569 = (((_552.z - _565) + cbMtdParam._m0[14u].w) * _378) + _565;
    float _583 = abs((fract(cbMtdParam._m0[15u].x * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _3824 = isnan(0.0) ? _583 : (isnan(_583) ? 0.0 : max(_583, 0.0));
    float _584 = isnan(1.0) ? _3824 : (isnan(_3824) ? 1.0 : min(_3824, 1.0));
    float _589 = (_584 * _584) * (3.0 - (_584 * 2.0));
    vec4 _602 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _610 = (_260.x * 2.0) + (-1.0);
    float _611 = (_260.y * 2.0) + (-1.0);
    float _612 = dot(vec2(_610, _611), vec2(_610, _611));
    float _3835 = isnan(0.0) ? _612 : (isnan(_612) ? 0.0 : max(_612, 0.0));
    float _617 = sqrt(1.0 - (isnan(1.0) ? _3835 : (isnan(_3835) ? 1.0 : min(_3835, 1.0))));
    float _622 = ((_508.x - _489) * _274) + _489;
    float _623 = ((_508.y - _490) * _274) + _490;
    float _628 = ((_530.x - _622) * _341) + _622;
    float _629 = ((_530.y - _623) * _341) + _623;
    float _642 = (cbMtdParam._m0[14u].z * (((((_552.x - _628) * _378) + _628) * 2.0) + (-1.0))) + _610;
    float _643 = (cbMtdParam._m0[14u].z * (((((_552.y - _629) * _378) + _629) * 2.0) + (-1.0))) + _611;
    float _646 = fma(_617, _245, fma(_643, _237 * TANGENT.x, (_223 * _215) * _642));
    float _649 = fma(_617, _246, fma(_643, _237 * TANGENT.y, (_223 * _216) * _642));
    float _652 = fma(_617, _247, fma(_643, _237 * TANGENT.z, (_223 * _217) * _642));
    float _656 = inversesqrt(dot(vec3(_646, _649, _652), vec3(_646, _649, _652)));
    float _657 = _656 * _646;
    float _658 = _656 * _649;
    float _659 = _656 * _652;
    float _3846 = isnan(0.0) ? _438 : (isnan(_438) ? 0.0 : max(_438, 0.0));
    float _660 = isnan(1.0) ? _3846 : (isnan(_3846) ? 1.0 : min(_3846, 1.0));
    float _3857 = isnan(0.0) ? _569 : (isnan(_569) ? 0.0 : max(_569, 0.0));
    float _661 = isnan(1.0) ? _3857 : (isnan(_3857) ? 1.0 : min(_3857, 1.0));
    float _3868 = isnan(0.0) ? _435 : (isnan(_435) ? 0.0 : max(_435, 0.0));
    float _662 = isnan(1.0) ? _3868 : (isnan(_3868) ? 1.0 : min(_3868, 1.0));
    float _3879 = isnan(0.0) ? _436 : (isnan(_436) ? 0.0 : max(_436, 0.0));
    float _663 = isnan(1.0) ? _3879 : (isnan(_3879) ? 1.0 : min(_3879, 1.0));
    float _3890 = isnan(0.0) ? _437 : (isnan(_437) ? 0.0 : max(_437, 0.0));
    float _664 = isnan(1.0) ? _3890 : (isnan(_3890) ? 1.0 : min(_3890, 1.0));
    float _3901 = isnan(0.0) ? _475 : (isnan(_475) ? 0.0 : max(_475, 0.0));
    float _665 = isnan(1.0) ? _3901 : (isnan(_3901) ? 1.0 : min(_3901, 1.0));
    float _681 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _721 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _731 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _721);
    float _732 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _721);
    float _733 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _721);
    float _737 = inversesqrt(dot(vec3(_731, _732, _733), vec3(_731, _732, _733)));
    float _738 = _731 * _737;
    float _739 = _732 * _737;
    float _740 = _733 * _737;
    vec4 _745 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _747 = _745.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1050 = sqrt(((_731 * _731) + (_732 * _732)) + (_733 * _733));
        float _1056 = (cbMatDynParam._m0[5u].x * _1050) + cbMatDynParam._m0[5u].y;
        float _3912 = isnan(0.0) ? _1056 : (isnan(_1056) ? 0.0 : max(_1056, 0.0));
        float _1057 = isnan(1.0) ? _3912 : (isnan(_3912) ? 1.0 : min(_3912, 1.0));
        float _1061 = (cbMatDynParam._m0[5u].z * _1050) + cbMatDynParam._m0[5u].w;
        float _3923 = isnan(0.0) ? _1061 : (isnan(_1061) ? 0.0 : max(_1061, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3923 : (isnan(_3923) ? 1.0 : min(_3923, 1.0))) - _1057)) + _1057) < ((_747 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _758 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _759 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _761 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _763 = _761.w;
    float _781 = fma(_659, cbSceneParam._m0[5u].z, fma(_658, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _657));
    float _784 = fma(_659, cbSceneParam._m0[6u].z, fma(_658, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _657));
    float _787 = fma(_659, cbSceneParam._m0[7u].z, fma(_658, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _657));
    vec4 _789 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _791 = _789.x;
    float _803 = (((_789.y - _661) + (_789.w * _661)) * cbMtdParam._m0[3u].x) + _661;
    vec4 _804 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _820 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3(cbMtdParam._m0[3u].x * (_791 * _791)), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * _804.z;
    float _828 = (((cbMatDynParam._m0[15u].x - _665) * cbMatDynParam._m0[15u].w) * _820) + _665;
    float _836 = ((_820 * cbMatDynParam._m0[16u].z) * (cbMatDynParam._m0[16u].x - _803)) + _803;
    uint _860 = uint(roundEven(NORMAL.w)) * 13u;
    uint _861 = _860 + 9u;
    uint _862 = _861 + uint(cbMatDynParam._m0[0u].w);
    float _868 = (cbMtdParam._m0[0u].x * _662) * cbInstanceData._m0[_862].x;
    float _869 = (cbMtdParam._m0[0u].y * _663) * cbInstanceData._m0[_862].y;
    float _870 = (cbMtdParam._m0[0u].z * _664) * cbInstanceData._m0[_862].z;
    float _3934 = isnan(0.0) ? _868 : (isnan(_868) ? 0.0 : max(_868, 0.0));
    float _871 = isnan(1.0) ? _3934 : (isnan(_3934) ? 1.0 : min(_3934, 1.0));
    float _3945 = isnan(0.0) ? _869 : (isnan(_869) ? 0.0 : max(_869, 0.0));
    float _872 = isnan(1.0) ? _3945 : (isnan(_3945) ? 1.0 : min(_3945, 1.0));
    float _3956 = isnan(0.0) ? _870 : (isnan(_870) ? 0.0 : max(_870, 0.0));
    float _873 = isnan(1.0) ? _3956 : (isnan(_3956) ? 1.0 : min(_3956, 1.0));
    vec4 _874 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _879 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _890 = (((_879.x - _828) + (_879.w * _828)) * cbMtdParam._m0[3u].x) + _828;
    float _903 = (cbMtdParam._m0[3u].x * (((_871 * _763) - _871) + _874.x)) + _871;
    float _904 = (cbMtdParam._m0[3u].x * (((_872 * _763) - _872) + _874.y)) + _872;
    float _905 = (cbMtdParam._m0[3u].x * (((_873 * _763) - _873) + _874.z)) + _873;
    float _919 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3((_828 * (_662 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625, (_828 * (_663 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625, (_828 * (_664 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w)).z;
    float _923 = _919 * cbMatDynParam._m0[13u].w;
    float _933 = (_923 * (cbMatDynParam._m0[13u].x - _903)) + _903;
    float _934 = (_923 * (cbMatDynParam._m0[13u].y - _904)) + _904;
    float _935 = (_923 * (cbMatDynParam._m0[13u].z - _905)) + _905;
    float _943 = ((_919 * cbMatDynParam._m0[15u].w) * (cbMatDynParam._m0[15u].x - _890)) + _890;
    float _944 = 1.0 - _943;
    float _945 = _944 * _933;
    float _946 = _944 * _934;
    float _947 = _944 * _935;
    float _951 = (_933 + (-0.039999999105930328369140625)) * _943;
    float _952 = (_934 + (-0.039999999105930328369140625)) * _943;
    float _953 = (_935 + (-0.039999999105930328369140625)) * _943;
    float _954 = _951 + 0.039999999105930328369140625;
    float _955 = _952 + 0.039999999105930328369140625;
    float _956 = _953 + 0.039999999105930328369140625;
    vec4 _965 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _758, cbSceneParam._m0[86u].y * _759));
    float _968 = _965.x * TEXCOORD_4;
    float _969 = dot(vec3(_657, _658, _659), vec3(_738, _739, _740));
    float _972 = _969 * 2.0;
    float _976 = (_972 * _657) - _738;
    float _977 = (_972 * _658) - _739;
    float _978 = (_972 * _659) - _740;
    float _982 = abs(dot(vec3(_738, _739, _740), vec3(_657, _658, _659)));
    float _3967 = isnan(0.0) ? _982 : (isnan(_982) ? 0.0 : max(_982, 0.0));
    float _984 = sqrt(_836);
    float _996 = exp2((_984 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3967 : (isnan(_3967) ? 1.0 : min(_3967, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_984 * 3.0));
    float _1002 = (1.0 - _996) * ((_984 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1003 = _996 * _984;
    float _1031 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1035 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1039 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1368;
    float _1370;
    float _1371;
    float _1372;
    float _1373;
    float _1374;
    float _1375;
    float _1376;
    float _1377;
    float _1378;
    float _1379;
    float _1380;
    float _1381;
    float _1382;
    float _1383;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1095 = fma(_1039, cbModelParam._m0[26u].z, fma(_1035, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1031));
        float _1099 = fma(_1039, cbModelParam._m0[27u].z, fma(_1035, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1031));
        float _1103 = fma(_1039, cbModelParam._m0[28u].z, fma(_1035, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1031));
        float _1126 = _1031 + _657;
        float _1127 = _1035 + _658;
        float _1128 = _1039 + _659;
        float _1138 = fma(_1128, cbModelParam._m0[26u].z, fma(_1127, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1126)) - _1095;
        float _1139 = fma(_1128, cbModelParam._m0[27u].z, fma(_1127, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1126)) - _1099;
        float _1140 = fma(_1128, cbModelParam._m0[28u].z, fma(_1127, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1126)) - _1103;
        float _1144 = inversesqrt(dot(vec3(_1138, _1139, _1140), vec3(_1138, _1139, _1140)));
        float _1157 = ((_1144 * _1138) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1095 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1158 = ((_1144 * _1139) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1099 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1159 = ((_1144 * _1140) / cbModelParam._m0[34u].z) + ((((((_1103 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1162 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1157, _1158, _1159), 0.0);
        vec4 _1169 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1157, _1158, _1159), 0.0);
        vec4 _1176 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1157, _1158, _1159), 0.0);
        vec4 _1183 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1157, _1158, _1159), 0.0);
        float _1196 = exp2((_1162.w + (-0.5)) * 20.0) * 2.0;
        float _1197 = _1196 * (_1162.x + (-0.5));
        float _1198 = _1196 * (_1162.y + (-0.5));
        float _1199 = _1196 * (_1162.z + (-0.5));
        float _1206 = exp2((_1169.w + (-0.5)) * 20.0) * 2.0;
        float _1207 = _1206 * (_1169.x + (-0.5));
        float _1208 = _1206 * (_1169.y + (-0.5));
        float _1209 = _1206 * (_1169.z + (-0.5));
        float _1216 = exp2((_1176.w + (-0.5)) * 20.0) * 2.0;
        float _1217 = _1216 * (_1176.x + (-0.5));
        float _1218 = _1216 * (_1176.y + (-0.5));
        float _1219 = _1216 * (_1176.z + (-0.5));
        float _1226 = exp2((_1183.w + (-0.5)) * 20.0) * 2.0;
        float _1227 = _1226 * (_1183.x + (-0.5));
        float _1228 = _1226 * (_1183.y + (-0.5));
        float _1229 = _1226 * (_1183.z + (-0.5));
        float _1230 = isnan(0.0) ? _1227 : (isnan(_1227) ? 0.0 : max(_1227, 0.0));
        float _1231 = isnan(0.0) ? _1228 : (isnan(_1228) ? 0.0 : max(_1228, 0.0));
        float _1232 = isnan(0.0) ? _1229 : (isnan(_1229) ? 0.0 : max(_1229, 0.0));
        float _1233 = _1197 * 0.5;
        float _1234 = _1207 * 0.5;
        float _1235 = _1217 * 0.5;
        float _1236 = dot(vec3(_1233, _1234, _1235), vec3(_1233, _1234, _1235));
        float _1241 = (_1236 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1236);
        float _1250 = (dot(vec3(_657, _658, _659), vec3(_1241 * _1233, _1241 * _1234, _1241 * _1235)) + 1.0) * 0.5;
        float _3993 = isnan(0.0) ? _1250 : (isnan(_1250) ? 0.0 : max(_1250, 0.0));
        float _1260 = sqrt(((_1234 * _1234) + (_1233 * _1233)) + (_1235 * _1235)) / (_1230 + 9.9999997473787516355514526367188e-06);
        float _4004 = isnan(0.0) ? _1260 : (isnan(_1260) ? 0.0 : max(_1260, 0.0));
        float _1261 = isnan(1.0) ? _4004 : (isnan(_4004) ? 1.0 : min(_4004, 1.0));
        float _1262 = _1261 * 2.0;
        float _1266 = (1.0 - _1261) / (_1261 + 1.0);
        float _4015 = isnan(0.0) ? _1266 : (isnan(_1266) ? 0.0 : max(_1266, 0.0));
        float _1267 = isnan(1.0) ? _4015 : (isnan(_4015) ? 1.0 : min(_4015, 1.0));
        float _1276 = ((((1.0 - _1267) * (_1262 + 2.0)) * exp2(log2(isnan(1.0) ? _3993 : (isnan(_3993) ? 1.0 : min(_3993, 1.0))) * (_1262 + 1.0))) + _1267) * _1230;
        float _1277 = _1198 * 0.5;
        float _1278 = _1208 * 0.5;
        float _1279 = _1218 * 0.5;
        float _1280 = dot(vec3(_1277, _1278, _1279), vec3(_1277, _1278, _1279));
        float _1285 = (_1280 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1280);
        float _1293 = (dot(vec3(_657, _658, _659), vec3(_1285 * _1277, _1285 * _1278, _1285 * _1279)) + 1.0) * 0.5;
        float _4026 = isnan(0.0) ? _1293 : (isnan(_1293) ? 0.0 : max(_1293, 0.0));
        float _1302 = sqrt(((_1278 * _1278) + (_1277 * _1277)) + (_1279 * _1279)) / (_1231 + 9.9999997473787516355514526367188e-06);
        float _4037 = isnan(0.0) ? _1302 : (isnan(_1302) ? 0.0 : max(_1302, 0.0));
        float _1303 = isnan(1.0) ? _4037 : (isnan(_4037) ? 1.0 : min(_4037, 1.0));
        float _1304 = _1303 * 2.0;
        float _1308 = (1.0 - _1303) / (_1303 + 1.0);
        float _4048 = isnan(0.0) ? _1308 : (isnan(_1308) ? 0.0 : max(_1308, 0.0));
        float _1309 = isnan(1.0) ? _4048 : (isnan(_4048) ? 1.0 : min(_4048, 1.0));
        float _1318 = ((((1.0 - _1309) * (_1304 + 2.0)) * exp2(log2(isnan(1.0) ? _4026 : (isnan(_4026) ? 1.0 : min(_4026, 1.0))) * (_1304 + 1.0))) + _1309) * _1231;
        float _1319 = _1199 * 0.5;
        float _1320 = _1209 * 0.5;
        float _1321 = _1219 * 0.5;
        float _1322 = dot(vec3(_1319, _1320, _1321), vec3(_1319, _1320, _1321));
        float _1327 = (_1322 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1322);
        float _1335 = (dot(vec3(_657, _658, _659), vec3(_1327 * _1319, _1327 * _1320, _1327 * _1321)) + 1.0) * 0.5;
        float _4059 = isnan(0.0) ? _1335 : (isnan(_1335) ? 0.0 : max(_1335, 0.0));
        float _1344 = sqrt(((_1320 * _1320) + (_1319 * _1319)) + (_1321 * _1321)) / (_1232 + 9.9999997473787516355514526367188e-06);
        float _4070 = isnan(0.0) ? _1344 : (isnan(_1344) ? 0.0 : max(_1344, 0.0));
        float _1345 = isnan(1.0) ? _4070 : (isnan(_4070) ? 1.0 : min(_4070, 1.0));
        float _1346 = _1345 * 2.0;
        float _1350 = (1.0 - _1345) / (_1345 + 1.0);
        float _4081 = isnan(0.0) ? _1350 : (isnan(_1350) ? 0.0 : max(_1350, 0.0));
        float _1351 = isnan(1.0) ? _4081 : (isnan(_4081) ? 1.0 : min(_4081, 1.0));
        float _1360 = ((((1.0 - _1351) * (_1346 + 2.0)) * exp2(log2(isnan(1.0) ? _4059 : (isnan(_4059) ? 1.0 : min(_4059, 1.0))) * (_1346 + 1.0))) + _1351) * _1232;
        _1368 = _1199;
        _1370 = _1198;
        _1371 = _1197;
        _1372 = _1209;
        _1373 = _1208;
        _1374 = _1207;
        _1375 = _1219;
        _1376 = _1218;
        _1377 = _1217;
        _1378 = _1232;
        _1379 = _1231;
        _1380 = _1230;
        _1381 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1276 : (isnan(_1276) ? 0.0 : max(_1276, 0.0)));
        _1382 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1318 : (isnan(_1318) ? 0.0 : max(_1318, 0.0)));
        _1383 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1360 : (isnan(_1360) ? 0.0 : max(_1360, 0.0)));
    }
    else
    {
        _1368 = _1369;
        _1370 = _1369;
        _1371 = _1369;
        _1372 = _1369;
        _1373 = _1369;
        _1374 = _1369;
        _1375 = _1369;
        _1376 = _1369;
        _1377 = _1369;
        _1378 = _1369;
        _1379 = _1369;
        _1380 = _1369;
        _1381 = 0.0;
        _1382 = 0.0;
        _1383 = 0.0;
    }
    float _1681;
    float _1682;
    float _1683;
    float _1684;
    float _1685;
    float _1686;
    float _1687;
    float _1688;
    float _1689;
    float _1690;
    float _1691;
    float _1692;
    float _1693;
    float _1694;
    float _1695;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1412 = fma(_1039, cbModelParam._m0[30u].z, fma(_1035, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1031));
        float _1416 = fma(_1039, cbModelParam._m0[31u].z, fma(_1035, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1031));
        float _1420 = fma(_1039, cbModelParam._m0[32u].z, fma(_1035, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1031));
        float _1443 = _1031 + _657;
        float _1444 = _1035 + _658;
        float _1445 = _1039 + _659;
        float _1455 = fma(_1445, cbModelParam._m0[30u].z, fma(_1444, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1443)) - _1412;
        float _1456 = fma(_1445, cbModelParam._m0[31u].z, fma(_1444, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1443)) - _1416;
        float _1457 = fma(_1445, cbModelParam._m0[32u].z, fma(_1444, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1443)) - _1420;
        float _1461 = inversesqrt(dot(vec3(_1455, _1456, _1457), vec3(_1455, _1456, _1457)));
        float _1474 = ((_1461 * _1455) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1412 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1475 = ((_1461 * _1456) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1416 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1476 = ((_1461 * _1457) / cbModelParam._m0[35u].z) + ((((((_1420 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1478 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1474, _1475, _1476), 0.0);
        vec4 _1485 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1474, _1475, _1476), 0.0);
        vec4 _1492 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1474, _1475, _1476), 0.0);
        vec4 _1499 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1474, _1475, _1476), 0.0);
        float _1511 = exp2((_1478.w + (-0.5)) * 20.0) * 2.0;
        float _1512 = _1511 * (_1478.x + (-0.5));
        float _1513 = _1511 * (_1478.y + (-0.5));
        float _1514 = _1511 * (_1478.z + (-0.5));
        float _1521 = exp2((_1485.w + (-0.5)) * 20.0) * 2.0;
        float _1522 = _1521 * (_1485.x + (-0.5));
        float _1523 = _1521 * (_1485.y + (-0.5));
        float _1524 = _1521 * (_1485.z + (-0.5));
        float _1531 = exp2((_1492.w + (-0.5)) * 20.0) * 2.0;
        float _1532 = _1531 * (_1492.x + (-0.5));
        float _1533 = _1531 * (_1492.y + (-0.5));
        float _1534 = _1531 * (_1492.z + (-0.5));
        float _1541 = exp2((_1499.w + (-0.5)) * 20.0) * 2.0;
        float _1542 = _1541 * (_1499.x + (-0.5));
        float _1543 = _1541 * (_1499.y + (-0.5));
        float _1544 = _1541 * (_1499.z + (-0.5));
        float _1545 = isnan(0.0) ? _1542 : (isnan(_1542) ? 0.0 : max(_1542, 0.0));
        float _1546 = isnan(0.0) ? _1543 : (isnan(_1543) ? 0.0 : max(_1543, 0.0));
        float _1547 = isnan(0.0) ? _1544 : (isnan(_1544) ? 0.0 : max(_1544, 0.0));
        float _1548 = _1512 * 0.5;
        float _1549 = _1522 * 0.5;
        float _1550 = _1532 * 0.5;
        float _1551 = dot(vec3(_1548, _1549, _1550), vec3(_1548, _1549, _1550));
        float _1556 = (_1551 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1551);
        float _1564 = (dot(vec3(_657, _658, _659), vec3(_1556 * _1548, _1556 * _1549, _1556 * _1550)) + 1.0) * 0.5;
        float _4122 = isnan(0.0) ? _1564 : (isnan(_1564) ? 0.0 : max(_1564, 0.0));
        float _1573 = sqrt(((_1549 * _1549) + (_1548 * _1548)) + (_1550 * _1550)) / (_1545 + 9.9999997473787516355514526367188e-06);
        float _4133 = isnan(0.0) ? _1573 : (isnan(_1573) ? 0.0 : max(_1573, 0.0));
        float _1574 = isnan(1.0) ? _4133 : (isnan(_4133) ? 1.0 : min(_4133, 1.0));
        float _1575 = _1574 * 2.0;
        float _1579 = (1.0 - _1574) / (_1574 + 1.0);
        float _4144 = isnan(0.0) ? _1579 : (isnan(_1579) ? 0.0 : max(_1579, 0.0));
        float _1580 = isnan(1.0) ? _4144 : (isnan(_4144) ? 1.0 : min(_4144, 1.0));
        float _1589 = ((((1.0 - _1580) * (_1575 + 2.0)) * exp2(log2(isnan(1.0) ? _4122 : (isnan(_4122) ? 1.0 : min(_4122, 1.0))) * (_1575 + 1.0))) + _1580) * _1545;
        float _1590 = _1513 * 0.5;
        float _1591 = _1523 * 0.5;
        float _1592 = _1533 * 0.5;
        float _1593 = dot(vec3(_1590, _1591, _1592), vec3(_1590, _1591, _1592));
        float _1598 = (_1593 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1593);
        float _1606 = (dot(vec3(_657, _658, _659), vec3(_1598 * _1590, _1598 * _1591, _1598 * _1592)) + 1.0) * 0.5;
        float _4155 = isnan(0.0) ? _1606 : (isnan(_1606) ? 0.0 : max(_1606, 0.0));
        float _1615 = sqrt(((_1591 * _1591) + (_1590 * _1590)) + (_1592 * _1592)) / (_1546 + 9.9999997473787516355514526367188e-06);
        float _4166 = isnan(0.0) ? _1615 : (isnan(_1615) ? 0.0 : max(_1615, 0.0));
        float _1616 = isnan(1.0) ? _4166 : (isnan(_4166) ? 1.0 : min(_4166, 1.0));
        float _1617 = _1616 * 2.0;
        float _1621 = (1.0 - _1616) / (_1616 + 1.0);
        float _4177 = isnan(0.0) ? _1621 : (isnan(_1621) ? 0.0 : max(_1621, 0.0));
        float _1622 = isnan(1.0) ? _4177 : (isnan(_4177) ? 1.0 : min(_4177, 1.0));
        float _1631 = ((((1.0 - _1622) * (_1617 + 2.0)) * exp2(log2(isnan(1.0) ? _4155 : (isnan(_4155) ? 1.0 : min(_4155, 1.0))) * (_1617 + 1.0))) + _1622) * _1546;
        float _1632 = _1514 * 0.5;
        float _1633 = _1524 * 0.5;
        float _1634 = _1534 * 0.5;
        float _1635 = dot(vec3(_1632, _1633, _1634), vec3(_1632, _1633, _1634));
        float _1640 = (_1635 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1635);
        float _1648 = (dot(vec3(_657, _658, _659), vec3(_1640 * _1632, _1640 * _1633, _1640 * _1634)) + 1.0) * 0.5;
        float _4188 = isnan(0.0) ? _1648 : (isnan(_1648) ? 0.0 : max(_1648, 0.0));
        float _1657 = sqrt(((_1633 * _1633) + (_1632 * _1632)) + (_1634 * _1634)) / (_1547 + 9.9999997473787516355514526367188e-06);
        float _4199 = isnan(0.0) ? _1657 : (isnan(_1657) ? 0.0 : max(_1657, 0.0));
        float _1658 = isnan(1.0) ? _4199 : (isnan(_4199) ? 1.0 : min(_4199, 1.0));
        float _1659 = _1658 * 2.0;
        float _1663 = (1.0 - _1658) / (_1658 + 1.0);
        float _4210 = isnan(0.0) ? _1663 : (isnan(_1663) ? 0.0 : max(_1663, 0.0));
        float _1664 = isnan(1.0) ? _4210 : (isnan(_4210) ? 1.0 : min(_4210, 1.0));
        float _1673 = ((((1.0 - _1664) * (_1659 + 2.0)) * exp2(log2(isnan(1.0) ? _4188 : (isnan(_4188) ? 1.0 : min(_4188, 1.0))) * (_1659 + 1.0))) + _1664) * _1547;
        _1681 = _1514;
        _1682 = _1513;
        _1683 = _1512;
        _1684 = _1524;
        _1685 = _1523;
        _1686 = _1522;
        _1687 = _1534;
        _1688 = _1533;
        _1689 = _1532;
        _1690 = _1547;
        _1691 = _1546;
        _1692 = _1545;
        _1693 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1589 : (isnan(_1589) ? 0.0 : max(_1589, 0.0)));
        _1694 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1631 : (isnan(_1631) ? 0.0 : max(_1631, 0.0)));
        _1695 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1673 : (isnan(_1673) ? 0.0 : max(_1673, 0.0)));
    }
    else
    {
        _1681 = _1369;
        _1682 = _1369;
        _1683 = _1369;
        _1684 = _1369;
        _1685 = _1369;
        _1686 = _1369;
        _1687 = _1369;
        _1688 = _1369;
        _1689 = _1369;
        _1690 = _1369;
        _1691 = _1369;
        _1692 = _1369;
        _1693 = 0.0;
        _1694 = 0.0;
        _1695 = 0.0;
    }
    float _1705 = (cbModelParam._m0[1u].x * (_1693 - _1381)) + _1381;
    float _1706 = (cbModelParam._m0[1u].x * (_1694 - _1382)) + _1382;
    float _1707 = (cbModelParam._m0[1u].x * (_1695 - _1383)) + _1383;
    float _1728 = fma(_1707, cbSceneParam._m0[89u].z, fma(_1706, cbSceneParam._m0[89u].y, _1705 * cbSceneParam._m0[89u].x));
    float _1731 = fma(_1707, cbSceneParam._m0[90u].z, fma(_1706, cbSceneParam._m0[90u].y, _1705 * cbSceneParam._m0[90u].x));
    float _1734 = fma(_1707, cbSceneParam._m0[91u].z, fma(_1706, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1705));
    float _1749 = _976 * 0.5;
    float _1750 = _977 * 0.5;
    float _1751 = _978 * 0.5;
    float _1752 = dot(vec4(_1749, _1750, _1751, 1.0), vec4(_1683, _1686, _1689, _1692));
    float _1755 = dot(vec4(_1749, _1750, _1751, 1.0), vec4(_1682, _1685, _1688, _1691));
    float _1758 = dot(vec4(_1749, _1750, _1751, 1.0), vec4(_1681, _1684, _1687, _1690));
    float _1789;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1765 = dot(vec4(_1749, _1750, _1751, 1.0), vec4(_1368, _1372, _1375, _1378));
        float _1769 = dot(vec4(_1749, _1750, _1751, 1.0), vec4(_1370, _1373, _1376, _1379));
        float _1773 = dot(vec4(_1749, _1750, _1751, 1.0), vec4(_1371, _1374, _1377, _1380));
        float _1780 = dot(vec4(cbModelParam._m0[39u]), vec4(_1749, _1750, _1751, 1.0));
        _1789 = dot(vec3(isnan(0.0) ? _1773 : (isnan(_1773) ? 0.0 : max(_1773, 0.0)), isnan(0.0) ? _1769 : (isnan(_1769) ? 0.0 : max(_1769, 0.0)), isnan(0.0) ? _1765 : (isnan(_1765) ? 0.0 : max(_1765, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1780) ? 0.0 : (isnan(0.0) ? _1780 : max(0.0, _1780))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1789 = 1.0;
    }
    float _1800;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1791 = dot(vec4(cbModelParam._m0[40u]), vec4(_1749, _1750, _1751, 1.0));
        _1800 = dot(vec3(isnan(0.0) ? _1752 : (isnan(_1752) ? 0.0 : max(_1752, 0.0)), isnan(0.0) ? _1755 : (isnan(_1755) ? 0.0 : max(_1755, 0.0)), isnan(0.0) ? _1758 : (isnan(_1758) ? 0.0 : max(_1758, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1791) ? 0.0 : (isnan(0.0) ? _1791 : max(0.0, _1791))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1800 = 1.0;
    }
    float _1804 = (_1800 * cbModelParam._m0[1u].x) + (_1789 * (1.0 - cbModelParam._m0[1u].x));
    float _1814 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _836);
    float _1815 = isnan(_1814) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1814 : min(cbModelParam._m0[25u].z, _1814));
    float _1895;
    float _1897;
    float _1899;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1862 = fma(_1039, cbModelParam._m0[13u].z, fma(_1035, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1031)) + cbModelParam._m0[13u].w;
        float _1866 = fma(_1039, cbModelParam._m0[14u].z, fma(_1035, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1031)) + cbModelParam._m0[14u].w;
        float _1870 = fma(_1039, cbModelParam._m0[15u].z, fma(_1035, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1031)) + cbModelParam._m0[15u].w;
        float _1873 = fma(_978, cbModelParam._m0[13u].z, fma(_977, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _976));
        float _1876 = fma(_978, cbModelParam._m0[14u].z, fma(_977, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _976));
        float _1879 = fma(_978, cbModelParam._m0[15u].z, fma(_977, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _976));
        float _1907;
        if (_1873 > 0.0)
        {
            _1907 = abs((1.0 - _1862) / _1873);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1873 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1862 + 1.0) / _1873);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1907 = frontier_phi_19_17_ladder;
        }
        float _2111;
        if (_1876 > 0.0)
        {
            _2111 = abs((1.0 - _1866) / _1876);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1876 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1866 + 1.0) / _1876);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2111 = frontier_phi_28_24_ladder;
        }
        float _2365;
        if (_1879 > 0.0)
        {
            _2365 = abs((1.0 - _1870) / _1879);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1879 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1870 + 1.0) / _1879);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2365 = frontier_phi_40_35_ladder;
        }
        float _2367 = isnan(_2111) ? _1907 : (isnan(_1907) ? _2111 : min(_1907, _2111));
        float _2368 = isnan(_2365) ? _2367 : (isnan(_2367) ? _2365 : min(_2367, _2365));
        float _2372 = (_2368 * _1873) + _1862;
        float _2373 = (_2368 * _1876) + _1866;
        float _2374 = (_2368 * _1879) + _1870;
        float _2375 = _2368 * 9.9999997473787516355514526367188e-05;
        float _2377 = (-1.0) - _2375;
        float _2379 = _2375 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2374 > _2379) || ((_2374 < _2377) || ((_2373 > _2379) || ((_2373 < _2377) || ((_2372 < _2377) || (_2372 > _2379))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2502 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2374, cbModelParam._m0[9u].z, fma(_2373, cbModelParam._m0[9u].y, _2372 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2374, cbModelParam._m0[10u].z, fma(_2373, cbModelParam._m0[10u].y, _2372 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2374, cbModelParam._m0[11u].z, fma(_2373, cbModelParam._m0[11u].y, _2372 * cbModelParam._m0[11u].x))), _1815);
            frontier_phi_18_40_ladder = _2502.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2502.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2502.x * cbModelParam._m0[1u].y;
        }
        _1895 = frontier_phi_18_40_ladder_2;
        _1897 = frontier_phi_18_40_ladder_1;
        _1899 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1883 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_976, _977, _978), _1815);
        _1895 = _1883.x * cbModelParam._m0[1u].y;
        _1897 = _1883.y * cbModelParam._m0[1u].y;
        _1899 = _1883.z * cbModelParam._m0[1u].y;
    }
    float _1903 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _836);
    float _1904 = isnan(_1903) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1903 : min(cbModelParam._m0[25u].w, _1903));
    float _1995;
    float _1997;
    float _1999;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1959 = fma(_1039, cbModelParam._m0[21u].z, fma(_1035, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1031)) + cbModelParam._m0[21u].w;
        float _1963 = fma(_1039, cbModelParam._m0[22u].z, fma(_1035, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1031)) + cbModelParam._m0[22u].w;
        float _1967 = fma(_1039, cbModelParam._m0[23u].z, fma(_1035, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1031)) + cbModelParam._m0[23u].w;
        float _1970 = fma(_978, cbModelParam._m0[21u].z, fma(_977, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _976));
        float _1973 = fma(_978, cbModelParam._m0[22u].z, fma(_977, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _976));
        float _1976 = fma(_978, cbModelParam._m0[23u].z, fma(_977, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _976));
        float _2116;
        if (_1970 > 0.0)
        {
            _2116 = abs((1.0 - _1959) / _1970);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1970 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1959 + 1.0) / _1970);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _2116 = frontier_phi_30_26_ladder;
        }
        float _2392;
        if (_1973 > 0.0)
        {
            _2392 = abs((1.0 - _1963) / _1973);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1973 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1963 + 1.0) / _1973);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2392 = frontier_phi_42_37_ladder;
        }
        float _2605;
        if (_1976 > 0.0)
        {
            _2605 = abs((1.0 - _1967) / _1976);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1976 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1967 + 1.0) / _1976);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2605 = frontier_phi_51_48_ladder;
        }
        float _2607 = isnan(_2392) ? _2116 : (isnan(_2116) ? _2392 : min(_2116, _2392));
        float _2608 = isnan(_2605) ? _2607 : (isnan(_2607) ? _2605 : min(_2607, _2605));
        float _2612 = (_2608 * _1970) + _1959;
        float _2613 = (_2608 * _1973) + _1963;
        float _2614 = (_2608 * _1976) + _1967;
        float _2615 = _2608 * 9.9999997473787516355514526367188e-05;
        float _2616 = (-1.0) - _2615;
        float _2618 = _2615 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2614 > _2618) || ((_2614 < _2616) || ((_2613 > _2618) || ((_2613 < _2616) || ((_2612 < _2616) || (_2612 > _2618))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2855 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2614, cbModelParam._m0[17u].z, fma(_2613, cbModelParam._m0[17u].y, _2612 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2614, cbModelParam._m0[18u].z, fma(_2613, cbModelParam._m0[18u].y, _2612 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2614, cbModelParam._m0[19u].z, fma(_2613, cbModelParam._m0[19u].y, _2612 * cbModelParam._m0[19u].x))), _1904);
            frontier_phi_27_51_ladder = _2855.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2855.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2855.x * cbModelParam._m0[1u].z;
        }
        _1995 = frontier_phi_27_51_ladder_2;
        _1997 = frontier_phi_27_51_ladder_1;
        _1999 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1979 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_976, _977, _978), _1904);
        _1995 = _1979.x * cbModelParam._m0[1u].z;
        _1997 = _1979.y * cbModelParam._m0[1u].z;
        _1999 = _1979.z * cbModelParam._m0[1u].z;
    }
    float _2012 = (((_1002 * _954) + _1003) * _968) * ((cbModelParam._m0[1u].w * (_1995 - _1895)) + _1895);
    float _2014 = (((_1002 * _955) + _1003) * _968) * ((cbModelParam._m0[1u].w * (_1997 - _1897)) + _1897);
    float _2016 = (((_1002 * _956) + _1003) * _968) * ((cbModelParam._m0[1u].w * (_1999 - _1899)) + _1899);
    float _2019 = fma(_2016, cbSceneParam._m0[89u].z, fma(_2014, cbSceneParam._m0[89u].y, _2012 * cbSceneParam._m0[89u].x));
    float _2022 = fma(_2016, cbSceneParam._m0[90u].z, fma(_2014, cbSceneParam._m0[90u].y, _2012 * cbSceneParam._m0[90u].x));
    float _2025 = fma(_2016, cbSceneParam._m0[91u].z, fma(_2014, cbSceneParam._m0[91u].y, _2012 * cbSceneParam._m0[91u].x));
    uvec4 _2035 = floatBitsToUint(cbInstanceData._m0[_860 + 5u]);
    uint _2037 = _2035.x * 14u;
    uint _2038 = _2037 + 13u;
    float _2045 = _968 + (-1.0);
    float _2050 = (cbLight._m0[_2038].x * _2045) + 1.0;
    float _2051 = (cbLight._m0[_2038].y * _2045) + 1.0;
    float _2052 = (cbLight._m0[_2038].z * _2045) + 1.0;
    float _2053 = (cbLight._m0[_2038].w * _2045) + 1.0;
    uint _2054 = _2037 + 5u;
    float _2060 = isnan(1.0) ? _2051 : (isnan(_2051) ? 1.0 : min(_2051, 1.0));
    uint _2064 = _2037 + 4u;
    float _2070 = isnan(1.0) ? _2050 : (isnan(_2050) ? 1.0 : min(_2050, 1.0));
    uint _2074 = _2037 | 1u;
    float _2085 = dot(vec3(cbLight._m0[_2037].xyz), vec3(_657, _658, _659));
    float _2088 = dot(vec3(cbLight._m0[_2074].xyz), vec3(_657, _658, _659));
    float _4346 = isnan(0.0) ? _2085 : (isnan(_2085) ? 0.0 : max(_2085, 0.0));
    float _4357 = isnan(0.0) ? _2088 : (isnan(_2088) ? 0.0 : max(_2088, 0.0));
    float _2093 = (isnan(1.0) ? _4346 : (isnan(_4346) ? 1.0 : min(_4346, 1.0))) * 0.3183098733425140380859375;
    float _2095 = (isnan(1.0) ? _4357 : (isnan(_4357) ? 1.0 : min(_4357, 1.0))) * 0.3183098733425140380859375;
    float _2102 = ((cbLight._m0[_2054].x * _2060) * _2095) + ((cbLight._m0[_2064].x * _2070) * _2093);
    float _2103 = ((_2060 * cbLight._m0[_2054].y) * _2095) + ((_2070 * cbLight._m0[_2064].y) * _2093);
    float _2104 = ((_2060 * cbLight._m0[_2054].z) * _2095) + ((_2070 * cbLight._m0[_2064].z) * _2093);
    uvec4 _2108 = floatBitsToUint(cbLight._m0[_2037 + 12u]);
    bool _2110 = _2108.x == 0u;
    float _2121;
    float _2123;
    float _2125;
    if (_2110)
    {
        _2121 = _2102;
        _2123 = _2103;
        _2125 = _2104;
    }
    else
    {
        uint _2129 = _2037 + 6u;
        float _2145 = (dot(vec3(cbLight._m0[_2037 + 2u].xyz), vec3(_657, _658, _659)) * 0.5) + 0.5;
        float _2146 = _2145 * _2145;
        float _4368 = isnan(0.0) ? _2146 : (isnan(_2146) ? 0.0 : max(_2146, 0.0));
        float _2147 = isnan(1.0) ? _4368 : (isnan(_4368) ? 1.0 : min(_4368, 1.0));
        float _2148 = isnan(1.0) ? _2052 : (isnan(_2052) ? 1.0 : min(_2052, 1.0));
        _2121 = (((cbLight._m0[_2129].x * 0.3183098733425140380859375) * _2147) * _2148) + _2102;
        _2123 = (((cbLight._m0[_2129].y * 0.3183098733425140380859375) * _2147) * _2148) + _2103;
        _2125 = (((cbLight._m0[_2129].z * 0.3183098733425140380859375) * _2147) * _2148) + _2104;
    }
    bool _2128 = _2108.y == 0u;
    float _2166;
    float _2168;
    float _2170;
    if (_2128)
    {
        _2166 = _2121;
        _2168 = _2123;
        _2170 = _2125;
    }
    else
    {
        uint _2336 = _2037 + 7u;
        float _2352 = (dot(vec3(cbLight._m0[_2037 + 3u].xyz), vec3(_657, _658, _659)) * 0.5) + 0.5;
        float _2353 = _2352 * _2352;
        float _4384 = isnan(0.0) ? _2353 : (isnan(_2353) ? 0.0 : max(_2353, 0.0));
        float _2354 = isnan(1.0) ? _4384 : (isnan(_4384) ? 1.0 : min(_4384, 1.0));
        float _2355 = isnan(1.0) ? _2053 : (isnan(_2053) ? 1.0 : min(_2053, 1.0));
        _2166 = (((cbLight._m0[_2336].x * 0.3183098733425140380859375) * _2354) * _2355) + _2121;
        _2168 = (((cbLight._m0[_2336].y * 0.3183098733425140380859375) * _2354) * _2355) + _2123;
        _2170 = (((cbLight._m0[_2336].z * 0.3183098733425140380859375) * _2354) * _2355) + _2125;
    }
    uint _2173 = _2037 + 8u;
    float _2186 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2037].w)) * _836) * 0.949999988079071044921875);
    float _2187 = _2186 * _2186;
    float _2188 = cbLight._m0[_2037].x + _738;
    float _2189 = cbLight._m0[_2037].y + _739;
    float _2190 = cbLight._m0[_2037].z + _740;
    float _2194 = inversesqrt(dot(vec3(_2188, _2189, _2190), vec3(_2188, _2189, _2190)));
    float _2195 = _2194 * _2188;
    float _2196 = _2194 * _2189;
    float _2197 = _2194 * _2190;
    float _2198 = dot(vec3(_657, _658, _659), vec3(cbLight._m0[_2037].xyz));
    float _4400 = isnan(0.0) ? _2198 : (isnan(_2198) ? 0.0 : max(_2198, 0.0));
    float _2201 = isnan(1.0) ? _4400 : (isnan(_4400) ? 1.0 : min(_4400, 1.0));
    float _4411 = isnan(0.0) ? _969 : (isnan(_969) ? 0.0 : max(_969, 0.0));
    float _2202 = isnan(1.0) ? _4411 : (isnan(_4411) ? 1.0 : min(_4411, 1.0));
    float _2203 = dot(vec3(_657, _658, _659), vec3(_2195, _2196, _2197));
    float _4422 = isnan(0.0) ? _2203 : (isnan(_2203) ? 0.0 : max(_2203, 0.0));
    float _2206 = isnan(1.0) ? _4422 : (isnan(_4422) ? 1.0 : min(_4422, 1.0));
    float _2207 = dot(vec3(cbLight._m0[_2037].xyz), vec3(_2195, _2196, _2197));
    float _4433 = isnan(0.0) ? _2207 : (isnan(_2207) ? 0.0 : max(_2207, 0.0));
    float _2211 = _2187 * _2187;
    float _2215 = ((_2206 * _2206) * (_2211 + (-1.0))) + 1.0;
    float _2223 = exp2(log2(1.0 - (isnan(1.0) ? _4433 : (isnan(_4433) ? 1.0 : min(_4433, 1.0)))) * 5.0);
    float _2224 = 0.959999978542327880859375 - _951;
    float _2226 = 0.959999978542327880859375 - _952;
    float _2227 = 0.959999978542327880859375 - _953;
    float _2234 = 1.0 - _2187;
    float _2245 = (0.5 / (((_2202 * ((_2201 * _2234) + _2187)) + 9.9999999392252902907785028219223e-09) + (((_2202 * _2234) + _2187) * _2201))) * _2201;
    float _4444 = isnan(0.0) ? _2245 : (isnan(_2245) ? 0.0 : max(_2245, 0.0));
    float _2247 = (isnan(1.0) ? _4444 : (isnan(_4444) ? 1.0 : min(_4444, 1.0))) * (_2211 / ((_2215 * _2215) * 3.141590118408203125));
    uint _2258 = _2037 + 9u;
    float _2269 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2074].w)) * _836) * 0.949999988079071044921875);
    float _2270 = _2269 * _2269;
    float _2271 = cbLight._m0[_2074].x + _738;
    float _2272 = cbLight._m0[_2074].y + _739;
    float _2273 = cbLight._m0[_2074].z + _740;
    float _2277 = inversesqrt(dot(vec3(_2271, _2272, _2273), vec3(_2271, _2272, _2273)));
    float _2278 = _2277 * _2271;
    float _2279 = _2277 * _2272;
    float _2280 = _2277 * _2273;
    float _2281 = dot(vec3(_657, _658, _659), vec3(cbLight._m0[_2074].xyz));
    float _4455 = isnan(0.0) ? _2281 : (isnan(_2281) ? 0.0 : max(_2281, 0.0));
    float _2284 = isnan(1.0) ? _4455 : (isnan(_4455) ? 1.0 : min(_4455, 1.0));
    float _2285 = dot(vec3(_657, _658, _659), vec3(_2278, _2279, _2280));
    float _4466 = isnan(0.0) ? _2285 : (isnan(_2285) ? 0.0 : max(_2285, 0.0));
    float _2288 = isnan(1.0) ? _4466 : (isnan(_4466) ? 1.0 : min(_4466, 1.0));
    float _2289 = dot(vec3(cbLight._m0[_2074].xyz), vec3(_2278, _2279, _2280));
    float _4477 = isnan(0.0) ? _2289 : (isnan(_2289) ? 0.0 : max(_2289, 0.0));
    float _2293 = _2270 * _2270;
    float _2297 = ((_2288 * _2288) * (_2293 + (-1.0))) + 1.0;
    float _2304 = exp2(log2(1.0 - (isnan(1.0) ? _4477 : (isnan(_4477) ? 1.0 : min(_4477, 1.0)))) * 5.0);
    float _2311 = 1.0 - _2270;
    float _2321 = (0.5 / (((_2202 * ((_2284 * _2311) + _2270)) + 9.9999999392252902907785028219223e-09) + (((_2202 * _2311) + _2270) * _2284))) * _2284;
    float _4488 = isnan(0.0) ? _2321 : (isnan(_2321) ? 0.0 : max(_2321, 0.0));
    float _2323 = (isnan(1.0) ? _4488 : (isnan(_4488) ? 1.0 : min(_4488, 1.0))) * (_2293 / ((_2297 * _2297) * 3.141590118408203125));
    float _2333 = (((((_2304 * _2224) + _954) * cbLight._m0[_2258].x) * _2323) * _2060) + (((((_2223 * _2224) + _954) * cbLight._m0[_2173].x) * _2247) * _2070);
    float _2334 = (((((_2304 * _2226) + _955) * cbLight._m0[_2258].y) * _2323) * _2060) + (((((_2223 * _2226) + _955) * cbLight._m0[_2173].y) * _2247) * _2070);
    float _2335 = (((((_2304 * _2227) + _956) * cbLight._m0[_2258].z) * _2323) * _2060) + (((((_2223 * _2227) + _956) * cbLight._m0[_2173].z) * _2247) * _2070);
    float _2397;
    float _2399;
    float _2401;
    if (_2110)
    {
        _2397 = _2333;
        _2399 = _2334;
        _2401 = _2335;
    }
    else
    {
        uint _2403 = _2037 + 2u;
        uint _2407 = _2037 + 10u;
        float _2421 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2403].w)) * _836) * 0.949999988079071044921875);
        float _2422 = _2421 * _2421;
        float _2423 = cbLight._m0[_2403].x + _738;
        float _2424 = cbLight._m0[_2403].y + _739;
        float _2425 = cbLight._m0[_2403].z + _740;
        float _2429 = inversesqrt(dot(vec3(_2423, _2424, _2425), vec3(_2423, _2424, _2425)));
        float _2430 = _2429 * _2423;
        float _2431 = _2429 * _2424;
        float _2432 = _2429 * _2425;
        float _2433 = dot(vec3(_657, _658, _659), vec3(cbLight._m0[_2403].xyz));
        float _4499 = isnan(0.0) ? _2433 : (isnan(_2433) ? 0.0 : max(_2433, 0.0));
        float _2436 = isnan(1.0) ? _4499 : (isnan(_4499) ? 1.0 : min(_4499, 1.0));
        float _2437 = dot(vec3(_657, _658, _659), vec3(_2430, _2431, _2432));
        float _4510 = isnan(0.0) ? _2437 : (isnan(_2437) ? 0.0 : max(_2437, 0.0));
        float _2440 = isnan(1.0) ? _4510 : (isnan(_4510) ? 1.0 : min(_4510, 1.0));
        float _2441 = dot(vec3(cbLight._m0[_2403].xyz), vec3(_2430, _2431, _2432));
        float _4521 = isnan(0.0) ? _2441 : (isnan(_2441) ? 0.0 : max(_2441, 0.0));
        float _2445 = _2422 * _2422;
        float _2449 = ((_2440 * _2440) * (_2445 + (-1.0))) + 1.0;
        float _2456 = exp2(log2(1.0 - (isnan(1.0) ? _4521 : (isnan(_4521) ? 1.0 : min(_4521, 1.0)))) * 5.0);
        float _2463 = 1.0 - _2422;
        float _2473 = (0.5 / (((_2202 * ((_2436 * _2463) + _2422)) + 9.9999999392252902907785028219223e-09) + (((_2202 * _2463) + _2422) * _2436))) * _2436;
        float _4532 = isnan(0.0) ? _2473 : (isnan(_2473) ? 0.0 : max(_2473, 0.0));
        float _2475 = (isnan(1.0) ? _4532 : (isnan(_4532) ? 1.0 : min(_4532, 1.0))) * (_2445 / ((_2449 * _2449) * 3.141590118408203125));
        float _2476 = isnan(1.0) ? _2052 : (isnan(_2052) ? 1.0 : min(_2052, 1.0));
        _2397 = (((((_2456 * _2224) + _954) * cbLight._m0[_2407].x) * _2475) * _2476) + _2333;
        _2399 = (((((_2456 * _2226) + _955) * cbLight._m0[_2407].y) * _2475) * _2476) + _2334;
        _2401 = (((((_2456 * _2227) + _956) * cbLight._m0[_2407].z) * _2475) * _2476) + _2335;
    }
    float _2511;
    float _2513;
    float _2515;
    if (_2128)
    {
        _2511 = _2397;
        _2513 = _2399;
        _2515 = _2401;
    }
    else
    {
        uint _2522 = _2037 + 3u;
        uint _2526 = _2037 + 11u;
        float _2540 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2522].w)) * _836) * 0.949999988079071044921875);
        float _2541 = _2540 * _2540;
        float _2542 = cbLight._m0[_2522].x + _738;
        float _2543 = cbLight._m0[_2522].y + _739;
        float _2544 = cbLight._m0[_2522].z + _740;
        float _2548 = inversesqrt(dot(vec3(_2542, _2543, _2544), vec3(_2542, _2543, _2544)));
        float _2549 = _2548 * _2542;
        float _2550 = _2548 * _2543;
        float _2551 = _2548 * _2544;
        float _2552 = dot(vec3(_657, _658, _659), vec3(cbLight._m0[_2522].xyz));
        float _4548 = isnan(0.0) ? _2552 : (isnan(_2552) ? 0.0 : max(_2552, 0.0));
        float _2555 = isnan(1.0) ? _4548 : (isnan(_4548) ? 1.0 : min(_4548, 1.0));
        float _2556 = dot(vec3(_657, _658, _659), vec3(_2549, _2550, _2551));
        float _4559 = isnan(0.0) ? _2556 : (isnan(_2556) ? 0.0 : max(_2556, 0.0));
        float _2559 = isnan(1.0) ? _4559 : (isnan(_4559) ? 1.0 : min(_4559, 1.0));
        float _2560 = dot(vec3(cbLight._m0[_2522].xyz), vec3(_2549, _2550, _2551));
        float _4570 = isnan(0.0) ? _2560 : (isnan(_2560) ? 0.0 : max(_2560, 0.0));
        float _2564 = _2541 * _2541;
        float _2568 = ((_2559 * _2559) * (_2564 + (-1.0))) + 1.0;
        float _2575 = exp2(log2(1.0 - (isnan(1.0) ? _4570 : (isnan(_4570) ? 1.0 : min(_4570, 1.0)))) * 5.0);
        float _2582 = 1.0 - _2541;
        float _2592 = (0.5 / (((_2202 * ((_2555 * _2582) + _2541)) + 9.9999999392252902907785028219223e-09) + (((_2202 * _2582) + _2541) * _2555))) * _2555;
        float _4581 = isnan(0.0) ? _2592 : (isnan(_2592) ? 0.0 : max(_2592, 0.0));
        float _2594 = (isnan(1.0) ? _4581 : (isnan(_4581) ? 1.0 : min(_4581, 1.0))) * (_2564 / ((_2568 * _2568) * 3.141590118408203125));
        float _2595 = isnan(1.0) ? _2053 : (isnan(_2053) ? 1.0 : min(_2053, 1.0));
        _2511 = (((((_2575 * _2224) + _954) * cbLight._m0[_2526].x) * _2594) * _2595) + _2397;
        _2513 = (((((_2575 * _2226) + _955) * cbLight._m0[_2526].y) * _2594) * _2595) + _2399;
        _2515 = (((((_2575 * _2227) + _956) * cbLight._m0[_2526].z) * _2594) * _2595) + _2401;
    }
    float _2729;
    float _2731;
    float _2733;
    float _2735;
    float _2737;
    float _2739;
    if (_2035.y == 0u)
    {
        float _2670 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2671 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2670;
        float _2672 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2670;
        float _2673 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2670;
        uvec4 _2685 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2686 = _2685.x;
        uint _2697 = uint((float(_2685.y) * floor(float(uint(cbSceneParam._m0[85u].y * _759) / _2686))) + floor(float(uint(cbSceneParam._m0[85u].x * _758) / _2686)));
        float _2707 = (log2(_2673 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2708 = isnan(0.0) ? _2707 : (isnan(_2707) ? 0.0 : max(_2707, 0.0));
        uint _2711 = uint(isnan(14.0) ? _2708 : (isnan(_2708) ? 14.0 : min(_2708, 14.0)));
        uvec4 _2716 = texelFetch(g_lightClusterGridBuffer, int(((_2711 << 2u) + (_2697 << 6u)) >> 2u));
        uint _2717 = _2716.x;
        uint _2718 = _2685.z;
        float _2860;
        float _2862;
        float _2864;
        float _2866;
        float _2868;
        float _2870;
        if (((((1u << ((_2718 >> 4u) & 15u)) + 4294967295u) & _2717) == 0u) || ((_2718 & 240u) == 0u))
        {
            _2860 = 0.0;
            _2862 = 0.0;
            _2864 = 0.0;
            _2866 = 0.0;
            _2868 = 0.0;
            _2870 = 0.0;
        }
        else
        {
            float _2861;
            float _2863;
            float _2865;
            float _2867;
            float _2869;
            float _2871;
            float _3021 = 0.0;
            float _3022 = 0.0;
            float _3023 = 0.0;
            float _3024 = 0.0;
            float _3025 = 0.0;
            float _3026 = 0.0;
            uint _3027 = 0u;
            uint _3036;
            bool _3037;
            for (;;)
            {
                _3036 = texelFetch(g_lightClassification, int((((_2711 << 5u) + (_2697 << 9u)) + (_3027 << 2u)) >> 2u)).x;
                _3037 = _3036 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_3037)
                {
                    frontier_phi_68_pred = _3023;
                    frontier_phi_68_pred_1 = _3026;
                    frontier_phi_68_pred_2 = _3025;
                    frontier_phi_68_pred_3 = _3024;
                    frontier_phi_68_pred_4 = _3022;
                    frontier_phi_68_pred_5 = _3021;
                }
                else
                {
                    float _3166;
                    float _3167;
                    float _3168;
                    float _3169;
                    float _3170;
                    float _3171;
                    uint _3172;
                    _3166 = _3021;
                    _3167 = _3022;
                    _3168 = _3023;
                    _3169 = _3024;
                    _3170 = _3025;
                    _3171 = _3026;
                    _3172 = _3036;
                    float _3093;
                    float _3094;
                    float _3095;
                    float _3096;
                    float _3097;
                    float _3098;
                    for (;;)
                    {
                        uint _3176 = uint(findLSB(_3172)) + (_3027 << 5u);
                        uint _3173 = (_3172 + 4294967295u) & _3172;
                        uint _3178 = _3176 * 48u;
                        vec4 _3192 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3178)).x, texelFetch(g_PointLightRenderingBuffer, int(_3178 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3178 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3178 + 3u)).x));
                        uint _3198 = (_3176 * 48u) + 4u;
                        vec4 _3211 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3198)).x, texelFetch(g_PointLightRenderingBuffer, int(_3198 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3198 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3198 + 3u)).x));
                        uint _3217 = (_3176 * 48u) + 8u;
                        vec3 _3228 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3217)).x, texelFetch(g_PointLightRenderingBuffer, int(_3217 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3217 + 2u)).x));
                        float _3232 = _3192.x - _2671;
                        float _3233 = _3192.y - _2672;
                        float _3234 = _3192.z - _2673;
                        float _3235 = dot(vec3(_3232, _3233, _3234), vec3(_3232, _3233, _3234));
                        float _3238 = inversesqrt(_3235);
                        float _3239 = _3238 * _3232;
                        float _3240 = _3238 * _3233;
                        float _3241 = _3238 * _3234;
                        float _3242 = dot(vec3(_781, _784, _787), vec3(_3239, _3240, _3241));
                        float _3247 = 1.0 - (_3235 * _3192.w);
                        float _4607 = isnan(0.0) ? _3247 : (isnan(_3247) ? 0.0 : max(_3247, 0.0));
                        float _3248 = isnan(1.0) ? _4607 : (isnan(_4607) ? 1.0 : min(_4607, 1.0));
                        float _3249 = sqrt(_3235) * _3211.w;
                        float _3252 = 1.39999997615814208984375 / (_3249 + 1.39999997615814208984375);
                        float _3253 = _3252 * _3252;
                        float _3256 = ((1.0 - _3253) * _3242) + _3253;
                        float _3259 = _3249 * _3249;
                        float _3263 = ((isnan(0.0) ? _3256 : (isnan(_3256) ? 0.0 : max(_3256, 0.0))) * _3248) / ((_3259 * 0.699999988079071044921875) + 1.0);
                        float _3267 = (-0.0) - _2671;
                        float _3268 = (-0.0) - _2672;
                        float _3269 = (-0.0) - _2673;
                        float _3273 = inversesqrt(dot(vec3(_3267, _3268, _3269), vec3(_3267, _3268, _3269)));
                        float _3274 = _3273 * _3267;
                        float _3275 = _3273 * _3268;
                        float _3276 = _3273 * _3269;
                        float _3284 = exp2(log2(1.0 / ((_3259 * 3.5) + 5.0)) * 0.25);
                        float _3285 = 1.0 - _984;
                        float _3292 = sqrt(1.0 - ((1.0 - (_3285 * _3285)) * (1.0 - (_3284 * _3284))));
                        float _3293 = _3292 * _3292;
                        float _3294 = _3293 * _3293;
                        float _3295 = _3274 + _3239;
                        float _3296 = _3275 + _3240;
                        float _3297 = _3276 + _3241;
                        float _3301 = inversesqrt(dot(vec3(_3295, _3296, _3297), vec3(_3295, _3296, _3297)));
                        float _3305 = dot(vec3(_781, _784, _787), vec3(_3274, _3275, _3276));
                        float _4623 = isnan(0.0) ? _3305 : (isnan(_3305) ? 0.0 : max(_3305, 0.0));
                        float _3308 = isnan(1.0) ? _4623 : (isnan(_4623) ? 1.0 : min(_4623, 1.0));
                        float _3309 = dot(vec3(_781, _784, _787), vec3(_3301 * _3295, _3301 * _3296, _3301 * _3297));
                        float _4634 = isnan(0.0) ? _3309 : (isnan(_3309) ? 0.0 : max(_3309, 0.0));
                        float _3312 = isnan(1.0) ? _4634 : (isnan(_4634) ? 1.0 : min(_4634, 1.0));
                        float _3316 = ((_3312 * _3312) * (_3294 + (-1.0))) + 1.0;
                        float _3317 = _3252 * _3293;
                        float _3318 = _3317 * _3317;
                        float _3321 = ((1.0 - _3318) * _3242) + _3318;
                        float _4645 = isnan(0.0) ? _3321 : (isnan(_3321) ? 0.0 : max(_3321, 0.0));
                        float _3322 = isnan(1.0) ? _4645 : (isnan(_4645) ? 1.0 : min(_4645, 1.0));
                        float _3323 = 1.0 - _3293;
                        float _3333 = (0.5 / (((_3322 * ((_3308 * _3323) + _3293)) + 9.9999999392252902907785028219223e-09) + (((_3322 * _3323) + _3293) * _3308))) * _3322;
                        float _4656 = isnan(0.0) ? _3333 : (isnan(_3333) ? 0.0 : max(_3333, 0.0));
                        float _3344 = (((_3294 * 3.1415927410125732421875) * (isnan(1.0) ? _4656 : (isnan(_4656) ? 1.0 : min(_4656, 1.0)))) / ((_3316 * _3316) * ((_3259 * 2.1991131305694580078125) + 3.141590118408203125))) * _3248;
                        _3096 = (_3263 * _3211.x) + _3169;
                        _3097 = (_3263 * _3211.y) + _3170;
                        _3098 = (_3263 * _3211.z) + _3171;
                        _3093 = (_3344 * _3228.x) + _3166;
                        _3094 = (_3344 * _3228.y) + _3167;
                        _3095 = (_3344 * _3228.z) + _3168;
                        if (_3173 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3166 = _3093;
                            _3167 = _3094;
                            _3168 = _3095;
                            _3169 = _3096;
                            _3170 = _3097;
                            _3171 = _3098;
                            _3172 = _3173;
                        }
                    }
                    frontier_phi_68_pred = _3095;
                    frontier_phi_68_pred_1 = _3098;
                    frontier_phi_68_pred_2 = _3097;
                    frontier_phi_68_pred_3 = _3096;
                    frontier_phi_68_pred_4 = _3094;
                    frontier_phi_68_pred_5 = _3093;
                }
                _2865 = frontier_phi_68_pred;
                _2871 = frontier_phi_68_pred_1;
                _2869 = frontier_phi_68_pred_2;
                _2867 = frontier_phi_68_pred_3;
                _2863 = frontier_phi_68_pred_4;
                _2861 = frontier_phi_68_pred_5;
                uint _3028 = _3027 + 1u;
                if (_3028 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3021 = _2861;
                    _3022 = _2863;
                    _3023 = _2865;
                    _3024 = _2867;
                    _3025 = _2869;
                    _3026 = _2871;
                    _3027 = _3028;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2860 = _2861;
            _2862 = _2863;
            _2864 = _2865;
            _2866 = _2867;
            _2868 = _2869;
            _2870 = _2871;
        }
        uvec4 _2874 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2875 = _2874.z;
        uint _2877 = (_2875 >> 8u) & 15u;
        float _2989;
        float _2991;
        float _2993;
        float _2995;
        float _2997;
        float _2999;
        if (((4294967295u << _2877) & _2717) == 0u)
        {
            _2989 = _2860;
            _2991 = _2862;
            _2993 = _2864;
            _2995 = _2866;
            _2997 = _2868;
            _2999 = _2870;
        }
        else
        {
            float _3014 = inversesqrt(dot(vec3(_2671, _2672, _2673), vec3(_2671, _2672, _2673)));
            float _3015 = _3014 * _2671;
            float _3016 = _3014 * _2672;
            float _3017 = _3014 * _2673;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2877 < ((_2875 >> 12u) & 15u))
            {
                float _2990;
                float _2992;
                float _2994;
                float _2996;
                float _2998;
                float _3000;
                float _3149 = _2860;
                float _3150 = _2862;
                float _3151 = _2864;
                float _3152 = _2866;
                float _3153 = _2868;
                float _3154 = _2870;
                uint _3155 = _2877;
                uint _3164;
                bool _3165;
                for (;;)
                {
                    _3164 = texelFetch(g_lightClassification, int((((_2711 << 5u) + (_2697 << 9u)) + (_3155 << 2u)) >> 2u)).x;
                    _3165 = _3164 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_3165)
                    {
                        frontier_phi_79_pred = _3154;
                        frontier_phi_79_pred_1 = _3153;
                        frontier_phi_79_pred_2 = _3152;
                        frontier_phi_79_pred_3 = _3151;
                        frontier_phi_79_pred_4 = _3150;
                        frontier_phi_79_pred_5 = _3149;
                    }
                    else
                    {
                        float _3358;
                        float _3359;
                        float _3360;
                        float _3361;
                        float _3362;
                        float _3363;
                        float _3653;
                        float _3654;
                        float _3655;
                        float _3656;
                        float _3657;
                        float _3658;
                        float _3371 = _3149;
                        float _3372 = _3150;
                        float _3373 = _3151;
                        float _3374 = _3152;
                        float _3375 = _3153;
                        float _3376 = _3154;
                        uint _3377 = _3164;
                        uint _3378;
                        vec4 _3403;
                        float _3404;
                        vec4 _3419;
                        vec3 _3431;
                        vec4 _3446;
                        vec4 _3462;
                        float _3509;
                        bool _3510;
                        for (;;)
                        {
                            uint _3388 = ((_3155 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3377));
                            _3378 = (_3377 + 4294967295u) & _3377;
                            uint _3390 = _3388 * 40u;
                            _3403 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3390)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3390 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3390 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3390 + 3u)).x));
                            _3404 = _3403.w;
                            uint _3406 = (_3388 * 40u) + 4u;
                            _3419 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3406)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3406 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3406 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3406 + 3u)).x));
                            uint _3421 = (_3388 * 40u) + 8u;
                            _3431 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3421)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3421 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3421 + 2u)).x));
                            uint _3433 = (_3388 * 40u) + 16u;
                            _3446 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3433)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3433 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3433 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3433 + 3u)).x));
                            uint _3449 = (_3388 * 40u) + 20u;
                            _3462 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3449)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3449 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3449 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3449 + 3u)).x));
                            uint _3465 = (_3388 * 40u) + 24u;
                            vec4 _3478 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3465)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3465 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3465 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3465 + 3u)).x));
                            uint _3484 = (_3388 * 40u) + 28u;
                            vec4 _3497 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3484)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3484 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3484 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3484 + 3u)).x));
                            _3509 = fma(_2673, _3497.z, fma(_2672, _3497.y, _3497.x * _2671)) + _3497.w;
                            _3510 = !((fma(_2673, _3478.z, fma(_2672, _3478.y, _3478.x * _2671)) + _3478.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_3510)
                            {
                                float _3537 = _3403.x - _2671;
                                float _3538 = _3403.y - _2672;
                                float _3539 = _3403.z - _2673;
                                float _3540 = dot(vec3(_3537, _3538, _3539), vec3(_3537, _3538, _3539));
                                float _3543 = inversesqrt(_3540);
                                float _3544 = _3543 * _3537;
                                float _3545 = _3543 * _3538;
                                float _3546 = _3543 * _3539;
                                float _3550 = 1.0 - (_3540 / (_3404 * _3404));
                                float _4667 = isnan(0.0) ? _3550 : (isnan(_3550) ? 0.0 : max(_3550, 0.0));
                                float _3551 = isnan(1.0) ? _4667 : (isnan(_4667) ? 1.0 : min(_4667, 1.0));
                                float _3555 = sqrt(_3540) * _3419.w;
                                float _3557 = 1.39999997615814208984375 / (_3555 + 1.39999997615814208984375);
                                float _3558 = _3557 * _3557;
                                float _3561 = ((1.0 - _3558) * dot(vec3(_3544, _3545, _3546), vec3(_781, _784, _787))) + _3558;
                                float _3564 = _3555 * _3555;
                                float _3568 = (fma(_2673, _3446.z, fma(_2672, _3446.y, _3446.x * _2671)) + _3446.w) / _3509;
                                float _3569 = (fma(_2673, _3462.z, fma(_2672, _3462.y, _3462.x * _2671)) + _3462.w) / _3509;
                                float _3573 = 1.0 - dot(vec2(_3568, _3569), vec2(_3568, _3569));
                                float _4683 = isnan(0.0) ? _3573 : (isnan(_3573) ? 0.0 : max(_3573, 0.0));
                                float _3574 = isnan(1.0) ? _4683 : (isnan(_4683) ? 1.0 : min(_4683, 1.0));
                                float _3575 = _3574 * (((isnan(0.0) ? _3561 : (isnan(_3561) ? 0.0 : max(_3561, 0.0))) * _3551) / ((_3564 * 0.699999988079071044921875) + 1.0));
                                float _3587 = exp2(log2(1.0 / ((_3564 * 3.5) + 5.0)) * 0.25);
                                float _3588 = 1.0 - _984;
                                float _3595 = sqrt(1.0 - ((1.0 - (_3588 * _3588)) * (1.0 - (_3587 * _3587))));
                                float _3596 = _3595 * _3595;
                                float _3597 = _3596 * _3596;
                                float _3598 = _3544 - _3015;
                                float _3599 = _3545 - _3016;
                                float _3600 = _3546 - _3017;
                                float _3604 = inversesqrt(dot(vec3(_3598, _3599, _3600), vec3(_3598, _3599, _3600)));
                                float _3608 = dot(vec3(_781, _784, _787), vec3((-0.0) - _3015, (-0.0) - _3016, (-0.0) - _3017));
                                float _4694 = isnan(0.0) ? _3608 : (isnan(_3608) ? 0.0 : max(_3608, 0.0));
                                float _3611 = isnan(1.0) ? _4694 : (isnan(_4694) ? 1.0 : min(_4694, 1.0));
                                float _3612 = dot(vec3(_781, _784, _787), vec3(_3604 * _3598, _3604 * _3599, _3604 * _3600));
                                float _4705 = isnan(0.0) ? _3612 : (isnan(_3612) ? 0.0 : max(_3612, 0.0));
                                float _3615 = isnan(1.0) ? _4705 : (isnan(_4705) ? 1.0 : min(_4705, 1.0));
                                float _3619 = ((_3615 * _3615) * (_3597 + (-1.0))) + 1.0;
                                float _3620 = _3557 * _3596;
                                float _3621 = _3620 * _3620;
                                float _3627 = ((1.0 - _3621) * dot(vec3(_781, _784, _787), vec3(_3544, _3545, _3546))) + _3621;
                                float _4716 = isnan(0.0) ? _3627 : (isnan(_3627) ? 0.0 : max(_3627, 0.0));
                                float _3628 = isnan(1.0) ? _4716 : (isnan(_4716) ? 1.0 : min(_4716, 1.0));
                                float _3629 = 1.0 - _3596;
                                float _3639 = (0.5 / (((_3628 * ((_3611 * _3629) + _3596)) + 9.9999999392252902907785028219223e-09) + (((_3628 * _3629) + _3596) * _3611))) * _3628;
                                float _4727 = isnan(0.0) ? _3639 : (isnan(_3639) ? 0.0 : max(_3639, 0.0));
                                float _3649 = (_3574 * _3551) * (((_3597 * 3.1415927410125732421875) * (isnan(1.0) ? _4727 : (isnan(_4727) ? 1.0 : min(_4727, 1.0)))) / ((_3619 * _3619) * ((_3564 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3575 * _3419.z;
                                frontier_phi_85_pred_1 = _3575 * _3419.y;
                                frontier_phi_85_pred_2 = _3575 * _3419.x;
                                frontier_phi_85_pred_3 = _3649 * _3431.z;
                                frontier_phi_85_pred_4 = _3649 * _3431.y;
                                frontier_phi_85_pred_5 = _3649 * _3431.x;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3658 = frontier_phi_85_pred;
                            _3657 = frontier_phi_85_pred_1;
                            _3656 = frontier_phi_85_pred_2;
                            _3655 = frontier_phi_85_pred_3;
                            _3654 = frontier_phi_85_pred_4;
                            _3653 = frontier_phi_85_pred_5;
                            _3361 = _3656 + _3374;
                            _3362 = _3657 + _3375;
                            _3363 = _3658 + _3376;
                            _3358 = _3653 + _3371;
                            _3359 = _3654 + _3372;
                            _3360 = _3655 + _3373;
                            if (_3378 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3371 = _3358;
                                _3372 = _3359;
                                _3373 = _3360;
                                _3374 = _3361;
                                _3375 = _3362;
                                _3376 = _3363;
                                _3377 = _3378;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _3363;
                        frontier_phi_79_pred_1 = _3362;
                        frontier_phi_79_pred_2 = _3361;
                        frontier_phi_79_pred_3 = _3360;
                        frontier_phi_79_pred_4 = _3359;
                        frontier_phi_79_pred_5 = _3358;
                    }
                    _3000 = frontier_phi_79_pred;
                    _2998 = frontier_phi_79_pred_1;
                    _2996 = frontier_phi_79_pred_2;
                    _2994 = frontier_phi_79_pred_3;
                    _2992 = frontier_phi_79_pred_4;
                    _2990 = frontier_phi_79_pred_5;
                    uint _3156 = _3155 + 1u;
                    if (_3156 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3149 = _2990;
                        _3150 = _2992;
                        _3151 = _2994;
                        _3152 = _2996;
                        _3153 = _2998;
                        _3154 = _3000;
                        _3155 = _3156;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2996;
                frontier_phi_60_61_ladder_1 = _3000;
                frontier_phi_60_61_ladder_2 = _2998;
                frontier_phi_60_61_ladder_3 = _2994;
                frontier_phi_60_61_ladder_4 = _2992;
                frontier_phi_60_61_ladder_5 = _2990;
            }
            else
            {
                frontier_phi_60_61_ladder = _2866;
                frontier_phi_60_61_ladder_1 = _2870;
                frontier_phi_60_61_ladder_2 = _2868;
                frontier_phi_60_61_ladder_3 = _2864;
                frontier_phi_60_61_ladder_4 = _2862;
                frontier_phi_60_61_ladder_5 = _2860;
            }
            _2989 = frontier_phi_60_61_ladder_5;
            _2991 = frontier_phi_60_61_ladder_4;
            _2993 = frontier_phi_60_61_ladder_3;
            _2995 = frontier_phi_60_61_ladder;
            _2997 = frontier_phi_60_61_ladder_2;
            _2999 = frontier_phi_60_61_ladder_1;
        }
        float _3004 = isnan(1.0) ? _968 : (isnan(_968) ? 1.0 : min(_968, 1.0));
        _2729 = (_3004 * _2995) + _2166;
        _2731 = (_3004 * _2997) + _2168;
        _2733 = (_3004 * _2999) + _2170;
        _2735 = ((_2989 * _954) * _3004) + _2511;
        _2737 = ((_2991 * _955) * _3004) + _2513;
        _2739 = ((_2993 * _956) * _3004) + _2515;
    }
    else
    {
        _2729 = _2166;
        _2731 = _2168;
        _2733 = _2170;
        _2735 = _2511;
        _2737 = _2513;
        _2739 = _2515;
    }
    uint _2745 = _861 + uint(cbMatDynParam._m0[0u].w);
    float _2755 = ((((cbMtdParam._m0[12u].x * cbMtdParam._m0[16u].z) * cbMtdParam._m0[15u].w) * _589) * _602.x) * cbInstanceData._m0[_2745].x;
    float _2760 = ((((cbMtdParam._m0[12u].y * cbMtdParam._m0[16u].z) * cbMtdParam._m0[15u].w) * _589) * _602.y) * cbInstanceData._m0[_2745].y;
    float _2765 = ((((cbMtdParam._m0[12u].z * cbMtdParam._m0[16u].z) * cbMtdParam._m0[15u].w) * _589) * _602.z) * cbInstanceData._m0[_2745].z;
    float _4743 = isnan(0.0) ? _945 : (isnan(_945) ? 0.0 : max(_945, 0.0));
    float _4754 = isnan(0.0) ? _946 : (isnan(_946) ? 0.0 : max(_946, 0.0));
    float _4765 = isnan(0.0) ? _947 : (isnan(_947) ? 0.0 : max(_947, 0.0));
    float _4776 = isnan(0.0) ? _660 : (isnan(_660) ? 0.0 : max(_660, 0.0));
    float _2783 = (((isnan(1.0) ? _4743 : (isnan(_4743) ? 1.0 : min(_4743, 1.0))) * (_2729 + ((isnan(0.0) ? _1728 : (isnan(_1728) ? 0.0 : max(_1728, 0.0))) * _968))) + ((_2735 + ((isnan(0.0) ? _2019 : (isnan(_2019) ? 0.0 : max(_2019, 0.0))) * _1804)) * cbPerFrame._m0[3u].x)) + _2755;
    float _2785 = (_2760 + ((_2737 + ((isnan(0.0) ? _2022 : (isnan(_2022) ? 0.0 : max(_2022, 0.0))) * _1804)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4754 : (isnan(_4754) ? 1.0 : min(_4754, 1.0))) * (_2731 + ((isnan(0.0) ? _1731 : (isnan(_1731) ? 0.0 : max(_1731, 0.0))) * _968)));
    float _2787 = (_2765 + ((_2739 + ((isnan(0.0) ? _2025 : (isnan(_2025) ? 0.0 : max(_2025, 0.0))) * _1804)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4765 : (isnan(_4765) ? 1.0 : min(_4765, 1.0))) * (_2733 + ((isnan(0.0) ? _1734 : (isnan(_1734) ? 0.0 : max(_1734, 0.0))) * _968)));
    float _2788 = isnan(0.0) ? _2783 : (isnan(_2783) ? 0.0 : max(_2783, 0.0));
    float _2789 = isnan(0.0) ? _2785 : (isnan(_2785) ? 0.0 : max(_2785, 0.0));
    float _2790 = isnan(0.0) ? _2787 : (isnan(_2787) ? 0.0 : max(_2787, 0.0));
    float _2796 = cbMtdParam._m0[2u].x * _2755;
    float _2797 = cbMtdParam._m0[2u].y * _2760;
    float _2798 = cbMtdParam._m0[2u].z * _2765;
    float _4802 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2800 = isnan(1.0) ? _4802 : (isnan(_4802) ? 1.0 : min(_4802, 1.0));
    float _2805 = cbInstanceData._m0[_860 + 6u].w * (isnan(1.0) ? _4776 : (isnan(_4776) ? 1.0 : min(_4776, 1.0)));
    float _2810 = _758 / cbSceneParam._m0[86u].x;
    float _2811 = _759 / cbSceneParam._m0[86u].y;
    vec4 _2825 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2810, _2811, (log2((isnan(cbSceneParam._m0[77u].w) ? _681 : (isnan(_681) ? cbSceneParam._m0[77u].w : min(_681, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2827 = _2825.x;
    float _2828 = _2825.y;
    float _2829 = _2825.z;
    float _2830 = _2825.w;
    float _2922;
    float _2924;
    float _2926;
    float _2928;
    if (_681 > cbSceneParam._m0[78u].w)
    {
        float _2885 = isnan(_681) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _681 : min(cbSceneParam._m0[80u].w, _681));
        float _2886 = _2885 / _681;
        float _2897 = _2886 * _731;
        float _2898 = _732 * _2886;
        float _2899 = (-0.0) - _2898;
        float _2900 = _2886 * _733;
        float _2902 = (cbSceneParam._m0[77u].w * _2899) / _2885;
        float _2903 = _2902 + cbSceneParam._m0[79u].w;
        float _2904 = cbSceneParam._m0[79u].w - _2898;
        float _2910 = sqrt(((_2897 * _2897) + (_2898 * _2898)) + (_2900 * _2900));
        float _2913 = (1.0 - (cbSceneParam._m0[77u].w / _2885)) * _2910;
        float _2918 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2920 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3106;
        if (abs((_2899 - _2902) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3106 = ((((_2903 > 0.0) ? exp2(_2918 * _2903) : (2.0 - exp2(_2920 * _2903))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2913;
        }
        else
        {
            float _3050 = 1.0 / cbSceneParam._m0[80u].x;
            float _3051 = isnan(_2904) ? _2903 : (isnan(_2903) ? _2904 : max(_2903, _2904));
            float _3052 = isnan(_2904) ? _2903 : (isnan(_2903) ? _2904 : min(_2903, _2904));
            float _3061 = isnan(0.0) ? _3051 : (isnan(_3051) ? 0.0 : min(_3051, 0.0));
            float _3062 = isnan(0.0) ? _3052 : (isnan(_3052) ? 0.0 : min(_3052, 0.0));
            _3106 = ((abs(_2910 / _2899) * cbSceneParam._m0[80u].y) * ((((_3061 - _3062) * 2.0) - ((exp2(_2918 * (isnan(0.0) ? _3051 : (isnan(_3051) ? 0.0 : max(_3051, 0.0)))) - exp2(_2918 * (isnan(0.0) ? _3052 : (isnan(_3052) ? 0.0 : max(_3052, 0.0))))) * _3050)) - ((exp2(_2920 * _3061) - exp2(_2920 * _3062)) * _3050))) + (_2913 * cbSceneParam._m0[80u].z);
        }
        vec4 _3108 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2810, _2811, 1.0), 0.0);
        float _3117 = exp2((_3106 * (-1.44269502162933349609375)) * (1.0 - _3108.w));
        float _3118 = log2(_3117);
        float _3134 = log2(_2830);
        _2922 = (exp2(_3134 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3118 * cbSceneParam._m0[78u].x)) * _3108.x) / cbSceneParam._m0[78u].x)) + _2827;
        _2924 = (exp2(_3134 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3118 * cbSceneParam._m0[78u].y)) * _3108.y) / cbSceneParam._m0[78u].y)) + _2828;
        _2926 = (exp2(_3134 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3118 * cbSceneParam._m0[78u].z)) * _3108.z) / cbSceneParam._m0[78u].z)) + _2829;
        _2928 = _3117 * _2830;
    }
    else
    {
        _2922 = _2827;
        _2924 = _2828;
        _2926 = _2829;
        _2928 = _2830;
    }
    bool _3144;
    vec4 _2938;
    vec4 _2960;
    float _2962;
    float _2966;
    float _2967;
    float _2968;
    float _2971;
    float _2974;
    float _2977;
    float _2978;
    bool _2988;
    for (;;)
    {
        _2938 = cbMatDynParam._m0[0u];
        float _2940 = roundEven(_2938.y);
        bool _2941 = _2940 == 3.0;
        float _2942 = log2(_2928);
        float _2946 = exp2(_2942 * cbSceneParam._m0[78u].x);
        float _2947 = exp2(_2942 * cbSceneParam._m0[78u].y);
        float _2948 = exp2(_2942 * cbSceneParam._m0[78u].z);
        float _2949 = _2946 * _2788;
        float _2950 = _2947 * _2789;
        float _2951 = _2948 * _2790;
        float _2958 = _747 + (-0.5);
        _2960 = cbMtdParam._m0[1u];
        _2962 = _2960.y * _2958;
        float _2965 = (_2940 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2966 = _2965 * (_2941 ? _2949 : (_2949 + (cbSceneParam._m0[72u].w * _2922)));
        _2967 = _2965 * (_2941 ? _2950 : (_2950 + (cbSceneParam._m0[72u].w * _2924)));
        _2968 = _2965 * (_2941 ? _2951 : (_2951 + (cbSceneParam._m0[72u].w * _2926)));
        _2971 = ((_2796 * _2800) * _2946) * _2965;
        _2974 = ((_2797 * _2800) * _2947) * _2965;
        _2977 = ((_2798 * _2800) * _2948) * _2965;
        _2978 = _2958 * 0.999000012874603271484375;
        _2988 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2988)
        {
            if ((cbInstanceData._m0[_860 + 7u].x + _2978) < 0.5)
            {
                _3144 = true;
                break;
            }
        }
        uint _3085 = _861 + uint(_2938.w);
        if ((cbInstanceData._m0[_3085].w < 1.0) && ((cbInstanceData._m0[_3085].w + _2978) < 0.5))
        {
            _3144 = true;
            break;
        }
        if ((_2962 + _438) < _2960.x)
        {
            _3144 = true;
            break;
        }
        _3144 = false;
        break;
    }
    float _3349;
    if (_3144)
    {
        discard_state = true;
        _3349 = 0.0;
    }
    else
    {
        _3349 = _2805;
    }
    SV_Target.x = _2966;
    SV_Target.y = _2967;
    SV_Target.z = _2968;
    SV_Target.w = _3349;
    SV_Target_1.x = _2971;
    SV_Target_1.y = _2974;
    SV_Target_1.z = _2977;
    SV_Target_1.w = _2805;
    discard_exit();
}


