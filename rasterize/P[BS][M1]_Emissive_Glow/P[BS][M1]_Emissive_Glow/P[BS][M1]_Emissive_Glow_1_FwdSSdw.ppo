#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[13];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D P_BS_M1_Emissive_Glow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D P_BS_M1_Emissive_Glow_snp_0_Texture2D_1;
layout(set = 0, binding = 3) uniform texture2D P_BS_M1_Emissive_Glow_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _867;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _178 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _179 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _180 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _185 = inversesqrt(dot(vec3(_178, _179, _180), vec3(_178, _179, _180)));
    float _192 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _199 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _222 = texture(sampler2D(P_BS_M1_Emissive_Glow_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _228 = _222.x * cbMtdParam._m0[9u].x;
    float _229 = _222.y * cbMtdParam._m0[9u].y;
    float _230 = _222.z * cbMtdParam._m0[9u].z;
    vec4 _246 = texture(sampler2D(P_BS_M1_Emissive_Glow_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _250 = _246.z;
    float _254 = (_246.x * 2.0) + (-1.0);
    float _256 = (_246.y * 2.0) + (-1.0);
    float _257 = dot(vec2(_254, _256), vec2(_254, _256));
    float _3264 = isnan(0.0) ? _257 : (isnan(_257) ? 0.0 : max(_257, 0.0));
    float _263 = sqrt(1.0 - (isnan(1.0) ? _3264 : (isnan(_3264) ? 1.0 : min(_3264, 1.0))));
    vec4 _286 = texture(sampler2D(P_BS_M1_Emissive_Glow_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _311 = fma(_263, _192 * NORMAL.x, fma(_256, _199 * TANGENT.x, (_185 * _178) * _254));
    float _314 = fma(_263, _192 * NORMAL.y, fma(_256, _199 * TANGENT.y, (_185 * _179) * _254));
    float _317 = fma(_263, _192 * NORMAL.z, fma(_256, _199 * TANGENT.z, (_185 * _180) * _254));
    float _321 = inversesqrt(dot(vec3(_311, _314, _317), vec3(_311, _314, _317)));
    float _322 = _321 * _311;
    float _323 = _321 * _314;
    float _324 = _321 * _317;
    float _3275 = isnan(0.0) ? _250 : (isnan(_250) ? 0.0 : max(_250, 0.0));
    float _325 = isnan(1.0) ? _3275 : (isnan(_3275) ? 1.0 : min(_3275, 1.0));
    float _3286 = isnan(0.0) ? _228 : (isnan(_228) ? 0.0 : max(_228, 0.0));
    float _3297 = isnan(0.0) ? _229 : (isnan(_229) ? 0.0 : max(_229, 0.0));
    float _3308 = isnan(0.0) ? _230 : (isnan(_230) ? 0.0 : max(_230, 0.0));
    float _3319 = isnan(0.0) ? cbMtdParam._m0[12u].x : (isnan(cbMtdParam._m0[12u].x) ? 0.0 : max(cbMtdParam._m0[12u].x, 0.0));
    float _329 = isnan(1.0) ? _3319 : (isnan(_3319) ? 1.0 : min(_3319, 1.0));
    float _345 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _386 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _396 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _386);
    float _397 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _386);
    float _398 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _386);
    float _402 = inversesqrt(dot(vec3(_396, _397, _398), vec3(_396, _397, _398)));
    float _403 = _396 * _402;
    float _404 = _397 * _402;
    float _405 = _398 * _402;
    float _411 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _412 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _433 = fma(_324, cbSceneParam._m0[5u].z, fma(_323, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _322));
    float _436 = fma(_324, cbSceneParam._m0[6u].z, fma(_323, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _322));
    float _439 = fma(_324, cbSceneParam._m0[7u].z, fma(_323, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _322));
    uint _452 = uint(roundEven(NORMAL.w)) * 13u;
    uint _453 = _452 + 9u;
    uint _454 = _453 + uint(cbMatDynParam._m0[0u].w);
    float _460 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3286 : (isnan(_3286) ? 1.0 : min(_3286, 1.0)))) * cbInstanceData._m0[_454].x;
    float _461 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3297 : (isnan(_3297) ? 1.0 : min(_3297, 1.0)))) * cbInstanceData._m0[_454].y;
    float _462 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3308 : (isnan(_3308) ? 1.0 : min(_3308, 1.0)))) * cbInstanceData._m0[_454].z;
    float _3330 = isnan(0.0) ? _460 : (isnan(_460) ? 0.0 : max(_460, 0.0));
    float _463 = isnan(1.0) ? _3330 : (isnan(_3330) ? 1.0 : min(_3330, 1.0));
    float _3341 = isnan(0.0) ? _461 : (isnan(_461) ? 0.0 : max(_461, 0.0));
    float _464 = isnan(1.0) ? _3341 : (isnan(_3341) ? 1.0 : min(_3341, 1.0));
    float _3352 = isnan(0.0) ? _462 : (isnan(_462) ? 0.0 : max(_462, 0.0));
    float _465 = isnan(1.0) ? _3352 : (isnan(_3352) ? 1.0 : min(_3352, 1.0));
    float _466 = 1.0 - _329;
    float _467 = _463 * _466;
    float _468 = _464 * _466;
    float _469 = _465 * _466;
    float _474 = (_463 + (-0.039999999105930328369140625)) * _329;
    float _475 = (_464 + (-0.039999999105930328369140625)) * _329;
    float _476 = (_465 + (-0.039999999105930328369140625)) * _329;
    float _477 = _474 + 0.039999999105930328369140625;
    float _479 = _475 + 0.039999999105930328369140625;
    float _480 = _476 + 0.039999999105930328369140625;
    vec4 _489 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _411, cbSceneParam._m0[86u].y * _412));
    float _492 = _489.x * TEXCOORD.z;
    float _493 = dot(vec3(_322, _323, _324), vec3(_403, _404, _405));
    float _496 = _493 * 2.0;
    float _500 = (_496 * _322) - _403;
    float _501 = (_496 * _323) - _404;
    float _502 = (_496 * _324) - _405;
    float _506 = abs(dot(vec3(_403, _404, _405), vec3(_322, _323, _324)));
    float _3363 = isnan(0.0) ? _506 : (isnan(_506) ? 0.0 : max(_506, 0.0));
    float _508 = sqrt(_325);
    float _521 = exp2((_508 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3363 : (isnan(_3363) ? 1.0 : min(_3363, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_508 * 3.0));
    float _527 = (1.0 - _521) * ((_508 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _528 = _521 * _508;
    float _556 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _560 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _564 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _866;
    float _868;
    float _869;
    float _870;
    float _871;
    float _872;
    float _873;
    float _874;
    float _875;
    float _876;
    float _877;
    float _878;
    float _879;
    float _880;
    float _881;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _591 = fma(_564, cbModelParam._m0[26u].z, fma(_560, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _556));
        float _595 = fma(_564, cbModelParam._m0[27u].z, fma(_560, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _556));
        float _599 = fma(_564, cbModelParam._m0[28u].z, fma(_560, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _556));
        float _624 = _556 + _322;
        float _625 = _560 + _323;
        float _626 = _564 + _324;
        float _636 = fma(_626, cbModelParam._m0[26u].z, fma(_625, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _624)) - _591;
        float _637 = fma(_626, cbModelParam._m0[27u].z, fma(_625, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _624)) - _595;
        float _638 = fma(_626, cbModelParam._m0[28u].z, fma(_625, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _624)) - _599;
        float _642 = inversesqrt(dot(vec3(_636, _637, _638), vec3(_636, _637, _638)));
        float _655 = ((_642 * _636) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_591 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _656 = ((_642 * _637) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_595 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _657 = ((_642 * _638) / cbModelParam._m0[34u].z) + ((((((_599 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _660 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_655, _656, _657), 0.0);
        vec4 _667 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_655, _656, _657), 0.0);
        vec4 _674 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_655, _656, _657), 0.0);
        vec4 _681 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_655, _656, _657), 0.0);
        float _694 = exp2((_660.w + (-0.5)) * 20.0) * 2.0;
        float _695 = _694 * (_660.x + (-0.5));
        float _696 = _694 * (_660.y + (-0.5));
        float _697 = _694 * (_660.z + (-0.5));
        float _704 = exp2((_667.w + (-0.5)) * 20.0) * 2.0;
        float _705 = _704 * (_667.x + (-0.5));
        float _706 = _704 * (_667.y + (-0.5));
        float _707 = _704 * (_667.z + (-0.5));
        float _714 = exp2((_674.w + (-0.5)) * 20.0) * 2.0;
        float _715 = _714 * (_674.x + (-0.5));
        float _716 = _714 * (_674.y + (-0.5));
        float _717 = _714 * (_674.z + (-0.5));
        float _724 = exp2((_681.w + (-0.5)) * 20.0) * 2.0;
        float _725 = _724 * (_681.x + (-0.5));
        float _726 = _724 * (_681.y + (-0.5));
        float _727 = _724 * (_681.z + (-0.5));
        float _728 = isnan(0.0) ? _725 : (isnan(_725) ? 0.0 : max(_725, 0.0));
        float _729 = isnan(0.0) ? _726 : (isnan(_726) ? 0.0 : max(_726, 0.0));
        float _730 = isnan(0.0) ? _727 : (isnan(_727) ? 0.0 : max(_727, 0.0));
        float _731 = _695 * 0.5;
        float _732 = _705 * 0.5;
        float _733 = _715 * 0.5;
        float _734 = dot(vec3(_731, _732, _733), vec3(_731, _732, _733));
        float _739 = (_734 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_734);
        float _748 = (dot(vec3(_322, _323, _324), vec3(_739 * _731, _739 * _732, _739 * _733)) + 1.0) * 0.5;
        float _3389 = isnan(0.0) ? _748 : (isnan(_748) ? 0.0 : max(_748, 0.0));
        float _758 = sqrt(((_732 * _732) + (_731 * _731)) + (_733 * _733)) / (_728 + 9.9999997473787516355514526367188e-06);
        float _3400 = isnan(0.0) ? _758 : (isnan(_758) ? 0.0 : max(_758, 0.0));
        float _759 = isnan(1.0) ? _3400 : (isnan(_3400) ? 1.0 : min(_3400, 1.0));
        float _760 = _759 * 2.0;
        float _764 = (1.0 - _759) / (_759 + 1.0);
        float _3411 = isnan(0.0) ? _764 : (isnan(_764) ? 0.0 : max(_764, 0.0));
        float _765 = isnan(1.0) ? _3411 : (isnan(_3411) ? 1.0 : min(_3411, 1.0));
        float _774 = ((((1.0 - _765) * (_760 + 2.0)) * exp2(log2(isnan(1.0) ? _3389 : (isnan(_3389) ? 1.0 : min(_3389, 1.0))) * (_760 + 1.0))) + _765) * _728;
        float _775 = _696 * 0.5;
        float _776 = _706 * 0.5;
        float _777 = _716 * 0.5;
        float _778 = dot(vec3(_775, _776, _777), vec3(_775, _776, _777));
        float _783 = (_778 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_778);
        float _791 = (dot(vec3(_322, _323, _324), vec3(_783 * _775, _783 * _776, _783 * _777)) + 1.0) * 0.5;
        float _3422 = isnan(0.0) ? _791 : (isnan(_791) ? 0.0 : max(_791, 0.0));
        float _800 = sqrt(((_776 * _776) + (_775 * _775)) + (_777 * _777)) / (_729 + 9.9999997473787516355514526367188e-06);
        float _3433 = isnan(0.0) ? _800 : (isnan(_800) ? 0.0 : max(_800, 0.0));
        float _801 = isnan(1.0) ? _3433 : (isnan(_3433) ? 1.0 : min(_3433, 1.0));
        float _802 = _801 * 2.0;
        float _806 = (1.0 - _801) / (_801 + 1.0);
        float _3444 = isnan(0.0) ? _806 : (isnan(_806) ? 0.0 : max(_806, 0.0));
        float _807 = isnan(1.0) ? _3444 : (isnan(_3444) ? 1.0 : min(_3444, 1.0));
        float _816 = ((((1.0 - _807) * (_802 + 2.0)) * exp2(log2(isnan(1.0) ? _3422 : (isnan(_3422) ? 1.0 : min(_3422, 1.0))) * (_802 + 1.0))) + _807) * _729;
        float _817 = _697 * 0.5;
        float _818 = _707 * 0.5;
        float _819 = _717 * 0.5;
        float _820 = dot(vec3(_817, _818, _819), vec3(_817, _818, _819));
        float _825 = (_820 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_820);
        float _833 = (dot(vec3(_322, _323, _324), vec3(_825 * _817, _825 * _818, _825 * _819)) + 1.0) * 0.5;
        float _3455 = isnan(0.0) ? _833 : (isnan(_833) ? 0.0 : max(_833, 0.0));
        float _842 = sqrt(((_818 * _818) + (_817 * _817)) + (_819 * _819)) / (_730 + 9.9999997473787516355514526367188e-06);
        float _3466 = isnan(0.0) ? _842 : (isnan(_842) ? 0.0 : max(_842, 0.0));
        float _843 = isnan(1.0) ? _3466 : (isnan(_3466) ? 1.0 : min(_3466, 1.0));
        float _844 = _843 * 2.0;
        float _848 = (1.0 - _843) / (_843 + 1.0);
        float _3477 = isnan(0.0) ? _848 : (isnan(_848) ? 0.0 : max(_848, 0.0));
        float _849 = isnan(1.0) ? _3477 : (isnan(_3477) ? 1.0 : min(_3477, 1.0));
        float _858 = ((((1.0 - _849) * (_844 + 2.0)) * exp2(log2(isnan(1.0) ? _3455 : (isnan(_3455) ? 1.0 : min(_3455, 1.0))) * (_844 + 1.0))) + _849) * _730;
        _866 = _697;
        _868 = _696;
        _869 = _695;
        _870 = _707;
        _871 = _706;
        _872 = _705;
        _873 = _717;
        _874 = _716;
        _875 = _715;
        _876 = _730;
        _877 = _729;
        _878 = _728;
        _879 = cbModelParam._m0[36u].z * (isnan(0.0) ? _774 : (isnan(_774) ? 0.0 : max(_774, 0.0)));
        _880 = cbModelParam._m0[36u].z * (isnan(0.0) ? _816 : (isnan(_816) ? 0.0 : max(_816, 0.0)));
        _881 = cbModelParam._m0[36u].z * (isnan(0.0) ? _858 : (isnan(_858) ? 0.0 : max(_858, 0.0)));
    }
    else
    {
        _866 = _867;
        _868 = _867;
        _869 = _867;
        _870 = _867;
        _871 = _867;
        _872 = _867;
        _873 = _867;
        _874 = _867;
        _875 = _867;
        _876 = _867;
        _877 = _867;
        _878 = _867;
        _879 = 0.0;
        _880 = 0.0;
        _881 = 0.0;
    }
    float _1176;
    float _1177;
    float _1178;
    float _1179;
    float _1180;
    float _1181;
    float _1182;
    float _1183;
    float _1184;
    float _1185;
    float _1186;
    float _1187;
    float _1188;
    float _1189;
    float _1190;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _907 = fma(_564, cbModelParam._m0[30u].z, fma(_560, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _556));
        float _911 = fma(_564, cbModelParam._m0[31u].z, fma(_560, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _556));
        float _915 = fma(_564, cbModelParam._m0[32u].z, fma(_560, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _556));
        float _938 = _556 + _322;
        float _939 = _560 + _323;
        float _940 = _564 + _324;
        float _950 = fma(_940, cbModelParam._m0[30u].z, fma(_939, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _938)) - _907;
        float _951 = fma(_940, cbModelParam._m0[31u].z, fma(_939, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _938)) - _911;
        float _952 = fma(_940, cbModelParam._m0[32u].z, fma(_939, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _938)) - _915;
        float _956 = inversesqrt(dot(vec3(_950, _951, _952), vec3(_950, _951, _952)));
        float _969 = ((_956 * _950) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_907 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _970 = ((_956 * _951) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_911 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _971 = ((_956 * _952) / cbModelParam._m0[35u].z) + ((((((_915 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _973 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_969, _970, _971), 0.0);
        vec4 _980 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_969, _970, _971), 0.0);
        vec4 _987 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_969, _970, _971), 0.0);
        vec4 _994 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_969, _970, _971), 0.0);
        float _1006 = exp2((_973.w + (-0.5)) * 20.0) * 2.0;
        float _1007 = _1006 * (_973.x + (-0.5));
        float _1008 = _1006 * (_973.y + (-0.5));
        float _1009 = _1006 * (_973.z + (-0.5));
        float _1016 = exp2((_980.w + (-0.5)) * 20.0) * 2.0;
        float _1017 = _1016 * (_980.x + (-0.5));
        float _1018 = _1016 * (_980.y + (-0.5));
        float _1019 = _1016 * (_980.z + (-0.5));
        float _1026 = exp2((_987.w + (-0.5)) * 20.0) * 2.0;
        float _1027 = _1026 * (_987.x + (-0.5));
        float _1028 = _1026 * (_987.y + (-0.5));
        float _1029 = _1026 * (_987.z + (-0.5));
        float _1036 = exp2((_994.w + (-0.5)) * 20.0) * 2.0;
        float _1037 = _1036 * (_994.x + (-0.5));
        float _1038 = _1036 * (_994.y + (-0.5));
        float _1039 = _1036 * (_994.z + (-0.5));
        float _1040 = isnan(0.0) ? _1037 : (isnan(_1037) ? 0.0 : max(_1037, 0.0));
        float _1041 = isnan(0.0) ? _1038 : (isnan(_1038) ? 0.0 : max(_1038, 0.0));
        float _1042 = isnan(0.0) ? _1039 : (isnan(_1039) ? 0.0 : max(_1039, 0.0));
        float _1043 = _1007 * 0.5;
        float _1044 = _1017 * 0.5;
        float _1045 = _1027 * 0.5;
        float _1046 = dot(vec3(_1043, _1044, _1045), vec3(_1043, _1044, _1045));
        float _1051 = (_1046 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1046);
        float _1059 = (dot(vec3(_322, _323, _324), vec3(_1051 * _1043, _1051 * _1044, _1051 * _1045)) + 1.0) * 0.5;
        float _3518 = isnan(0.0) ? _1059 : (isnan(_1059) ? 0.0 : max(_1059, 0.0));
        float _1068 = sqrt(((_1044 * _1044) + (_1043 * _1043)) + (_1045 * _1045)) / (_1040 + 9.9999997473787516355514526367188e-06);
        float _3529 = isnan(0.0) ? _1068 : (isnan(_1068) ? 0.0 : max(_1068, 0.0));
        float _1069 = isnan(1.0) ? _3529 : (isnan(_3529) ? 1.0 : min(_3529, 1.0));
        float _1070 = _1069 * 2.0;
        float _1074 = (1.0 - _1069) / (_1069 + 1.0);
        float _3540 = isnan(0.0) ? _1074 : (isnan(_1074) ? 0.0 : max(_1074, 0.0));
        float _1075 = isnan(1.0) ? _3540 : (isnan(_3540) ? 1.0 : min(_3540, 1.0));
        float _1084 = ((((1.0 - _1075) * (_1070 + 2.0)) * exp2(log2(isnan(1.0) ? _3518 : (isnan(_3518) ? 1.0 : min(_3518, 1.0))) * (_1070 + 1.0))) + _1075) * _1040;
        float _1085 = _1008 * 0.5;
        float _1086 = _1018 * 0.5;
        float _1087 = _1028 * 0.5;
        float _1088 = dot(vec3(_1085, _1086, _1087), vec3(_1085, _1086, _1087));
        float _1093 = (_1088 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1088);
        float _1101 = (dot(vec3(_322, _323, _324), vec3(_1093 * _1085, _1093 * _1086, _1093 * _1087)) + 1.0) * 0.5;
        float _3551 = isnan(0.0) ? _1101 : (isnan(_1101) ? 0.0 : max(_1101, 0.0));
        float _1110 = sqrt(((_1086 * _1086) + (_1085 * _1085)) + (_1087 * _1087)) / (_1041 + 9.9999997473787516355514526367188e-06);
        float _3562 = isnan(0.0) ? _1110 : (isnan(_1110) ? 0.0 : max(_1110, 0.0));
        float _1111 = isnan(1.0) ? _3562 : (isnan(_3562) ? 1.0 : min(_3562, 1.0));
        float _1112 = _1111 * 2.0;
        float _1116 = (1.0 - _1111) / (_1111 + 1.0);
        float _3573 = isnan(0.0) ? _1116 : (isnan(_1116) ? 0.0 : max(_1116, 0.0));
        float _1117 = isnan(1.0) ? _3573 : (isnan(_3573) ? 1.0 : min(_3573, 1.0));
        float _1126 = ((((1.0 - _1117) * (_1112 + 2.0)) * exp2(log2(isnan(1.0) ? _3551 : (isnan(_3551) ? 1.0 : min(_3551, 1.0))) * (_1112 + 1.0))) + _1117) * _1041;
        float _1127 = _1009 * 0.5;
        float _1128 = _1019 * 0.5;
        float _1129 = _1029 * 0.5;
        float _1130 = dot(vec3(_1127, _1128, _1129), vec3(_1127, _1128, _1129));
        float _1135 = (_1130 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1130);
        float _1143 = (dot(vec3(_322, _323, _324), vec3(_1135 * _1127, _1135 * _1128, _1135 * _1129)) + 1.0) * 0.5;
        float _3584 = isnan(0.0) ? _1143 : (isnan(_1143) ? 0.0 : max(_1143, 0.0));
        float _1152 = sqrt(((_1128 * _1128) + (_1127 * _1127)) + (_1129 * _1129)) / (_1042 + 9.9999997473787516355514526367188e-06);
        float _3595 = isnan(0.0) ? _1152 : (isnan(_1152) ? 0.0 : max(_1152, 0.0));
        float _1153 = isnan(1.0) ? _3595 : (isnan(_3595) ? 1.0 : min(_3595, 1.0));
        float _1154 = _1153 * 2.0;
        float _1158 = (1.0 - _1153) / (_1153 + 1.0);
        float _3606 = isnan(0.0) ? _1158 : (isnan(_1158) ? 0.0 : max(_1158, 0.0));
        float _1159 = isnan(1.0) ? _3606 : (isnan(_3606) ? 1.0 : min(_3606, 1.0));
        float _1168 = ((((1.0 - _1159) * (_1154 + 2.0)) * exp2(log2(isnan(1.0) ? _3584 : (isnan(_3584) ? 1.0 : min(_3584, 1.0))) * (_1154 + 1.0))) + _1159) * _1042;
        _1176 = _1009;
        _1177 = _1008;
        _1178 = _1007;
        _1179 = _1019;
        _1180 = _1018;
        _1181 = _1017;
        _1182 = _1029;
        _1183 = _1028;
        _1184 = _1027;
        _1185 = _1042;
        _1186 = _1041;
        _1187 = _1040;
        _1188 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1084 : (isnan(_1084) ? 0.0 : max(_1084, 0.0)));
        _1189 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1126 : (isnan(_1126) ? 0.0 : max(_1126, 0.0)));
        _1190 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1168 : (isnan(_1168) ? 0.0 : max(_1168, 0.0)));
    }
    else
    {
        _1176 = _867;
        _1177 = _867;
        _1178 = _867;
        _1179 = _867;
        _1180 = _867;
        _1181 = _867;
        _1182 = _867;
        _1183 = _867;
        _1184 = _867;
        _1185 = _867;
        _1186 = _867;
        _1187 = _867;
        _1188 = 0.0;
        _1189 = 0.0;
        _1190 = 0.0;
    }
    float _1200 = (cbModelParam._m0[1u].x * (_1188 - _879)) + _879;
    float _1201 = (cbModelParam._m0[1u].x * (_1189 - _880)) + _880;
    float _1202 = (cbModelParam._m0[1u].x * (_1190 - _881)) + _881;
    float _1223 = fma(_1202, cbSceneParam._m0[89u].z, fma(_1201, cbSceneParam._m0[89u].y, _1200 * cbSceneParam._m0[89u].x));
    float _1226 = fma(_1202, cbSceneParam._m0[90u].z, fma(_1201, cbSceneParam._m0[90u].y, _1200 * cbSceneParam._m0[90u].x));
    float _1229 = fma(_1202, cbSceneParam._m0[91u].z, fma(_1201, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1200));
    float _1244 = _500 * 0.5;
    float _1245 = _501 * 0.5;
    float _1246 = _502 * 0.5;
    float _1247 = dot(vec4(_1244, _1245, _1246, 1.0), vec4(_1178, _1181, _1184, _1187));
    float _1250 = dot(vec4(_1244, _1245, _1246, 1.0), vec4(_1177, _1180, _1183, _1186));
    float _1253 = dot(vec4(_1244, _1245, _1246, 1.0), vec4(_1176, _1179, _1182, _1185));
    float _1287;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1260 = dot(vec4(_1244, _1245, _1246, 1.0), vec4(_866, _870, _873, _876));
        float _1264 = dot(vec4(_1244, _1245, _1246, 1.0), vec4(_868, _871, _874, _877));
        float _1268 = dot(vec4(_1244, _1245, _1246, 1.0), vec4(_869, _872, _875, _878));
        float _1275 = dot(vec4(cbModelParam._m0[39u]), vec4(_1244, _1245, _1246, 1.0));
        _1287 = dot(vec3(isnan(0.0) ? _1268 : (isnan(_1268) ? 0.0 : max(_1268, 0.0)), isnan(0.0) ? _1264 : (isnan(_1264) ? 0.0 : max(_1264, 0.0)), isnan(0.0) ? _1260 : (isnan(_1260) ? 0.0 : max(_1260, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1275) ? 0.0 : (isnan(0.0) ? _1275 : max(0.0, _1275))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1287 = 1.0;
    }
    float _1298;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1289 = dot(vec4(cbModelParam._m0[40u]), vec4(_1244, _1245, _1246, 1.0));
        _1298 = dot(vec3(isnan(0.0) ? _1247 : (isnan(_1247) ? 0.0 : max(_1247, 0.0)), isnan(0.0) ? _1250 : (isnan(_1250) ? 0.0 : max(_1250, 0.0)), isnan(0.0) ? _1253 : (isnan(_1253) ? 0.0 : max(_1253, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1289) ? 0.0 : (isnan(0.0) ? _1289 : max(0.0, _1289))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1298 = 1.0;
    }
    float _1302 = (_1298 * cbModelParam._m0[1u].x) + (_1287 * (1.0 - cbModelParam._m0[1u].x));
    float _1312 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _325);
    float _1313 = isnan(_1312) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1312 : min(cbModelParam._m0[25u].z, _1312));
    float _1395;
    float _1397;
    float _1399;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1362 = fma(_564, cbModelParam._m0[13u].z, fma(_560, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _556)) + cbModelParam._m0[13u].w;
        float _1366 = fma(_564, cbModelParam._m0[14u].z, fma(_560, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _556)) + cbModelParam._m0[14u].w;
        float _1370 = fma(_564, cbModelParam._m0[15u].z, fma(_560, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _556)) + cbModelParam._m0[15u].w;
        float _1373 = fma(_502, cbModelParam._m0[13u].z, fma(_501, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _500));
        float _1376 = fma(_502, cbModelParam._m0[14u].z, fma(_501, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _500));
        float _1379 = fma(_502, cbModelParam._m0[15u].z, fma(_501, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _500));
        float _1407;
        if (_1373 > 0.0)
        {
            _1407 = abs((1.0 - _1362) / _1373);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1373 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1362 + 1.0) / _1373);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1407 = frontier_phi_14_12_ladder;
        }
        float _1635;
        if (_1376 > 0.0)
        {
            _1635 = abs((1.0 - _1366) / _1376);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1376 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1366 + 1.0) / _1376);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1635 = frontier_phi_23_19_ladder;
        }
        float _1892;
        if (_1379 > 0.0)
        {
            _1892 = abs((1.0 - _1370) / _1379);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1379 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1370 + 1.0) / _1379);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _1892 = frontier_phi_35_30_ladder;
        }
        float _1894 = isnan(_1635) ? _1407 : (isnan(_1407) ? _1635 : min(_1407, _1635));
        float _1895 = isnan(_1892) ? _1894 : (isnan(_1894) ? _1892 : min(_1894, _1892));
        float _1899 = (_1895 * _1373) + _1362;
        float _1900 = (_1895 * _1376) + _1366;
        float _1901 = (_1895 * _1379) + _1370;
        float _1902 = _1895 * 9.9999997473787516355514526367188e-05;
        float _1904 = (-1.0) - _1902;
        float _1906 = _1902 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_1901 > _1906) || ((_1901 < _1904) || ((_1900 > _1906) || ((_1900 < _1904) || ((_1899 < _1904) || (_1899 > _1906))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2029 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1901, cbModelParam._m0[9u].z, fma(_1900, cbModelParam._m0[9u].y, _1899 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1901, cbModelParam._m0[10u].z, fma(_1900, cbModelParam._m0[10u].y, _1899 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1901, cbModelParam._m0[11u].z, fma(_1900, cbModelParam._m0[11u].y, _1899 * cbModelParam._m0[11u].x))), _1313);
            frontier_phi_13_35_ladder = _2029.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2029.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2029.x * cbModelParam._m0[1u].y;
        }
        _1395 = frontier_phi_13_35_ladder_2;
        _1397 = frontier_phi_13_35_ladder_1;
        _1399 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1383 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_500, _501, _502), _1313);
        _1395 = _1383.x * cbModelParam._m0[1u].y;
        _1397 = _1383.y * cbModelParam._m0[1u].y;
        _1399 = _1383.z * cbModelParam._m0[1u].y;
    }
    float _1403 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _325);
    float _1404 = isnan(_1403) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1403 : min(cbModelParam._m0[25u].w, _1403));
    float _1497;
    float _1499;
    float _1501;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1461 = fma(_564, cbModelParam._m0[21u].z, fma(_560, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _556)) + cbModelParam._m0[21u].w;
        float _1465 = fma(_564, cbModelParam._m0[22u].z, fma(_560, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _556)) + cbModelParam._m0[22u].w;
        float _1469 = fma(_564, cbModelParam._m0[23u].z, fma(_560, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _556)) + cbModelParam._m0[23u].w;
        float _1472 = fma(_502, cbModelParam._m0[21u].z, fma(_501, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _500));
        float _1475 = fma(_502, cbModelParam._m0[22u].z, fma(_501, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _500));
        float _1478 = fma(_502, cbModelParam._m0[23u].z, fma(_501, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _500));
        float _1640;
        if (_1472 > 0.0)
        {
            _1640 = abs((1.0 - _1461) / _1472);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1472 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1461 + 1.0) / _1472);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1640 = frontier_phi_25_21_ladder;
        }
        float _1919;
        if (_1475 > 0.0)
        {
            _1919 = abs((1.0 - _1465) / _1475);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1475 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1465 + 1.0) / _1475);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1919 = frontier_phi_37_32_ladder;
        }
        float _2132;
        if (_1478 > 0.0)
        {
            _2132 = abs((1.0 - _1469) / _1478);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1478 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1469 + 1.0) / _1478);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2132 = frontier_phi_46_43_ladder;
        }
        float _2134 = isnan(_1919) ? _1640 : (isnan(_1640) ? _1919 : min(_1640, _1919));
        float _2135 = isnan(_2132) ? _2134 : (isnan(_2134) ? _2132 : min(_2134, _2132));
        float _2139 = (_2135 * _1472) + _1461;
        float _2140 = (_2135 * _1475) + _1465;
        float _2141 = (_2135 * _1478) + _1469;
        float _2142 = _2135 * 9.9999997473787516355514526367188e-05;
        float _2143 = (-1.0) - _2142;
        float _2145 = _2142 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2141 > _2145) || ((_2141 < _2143) || ((_2140 > _2145) || ((_2140 < _2143) || ((_2139 < _2143) || (_2139 > _2145))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2369 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2141, cbModelParam._m0[17u].z, fma(_2140, cbModelParam._m0[17u].y, _2139 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2141, cbModelParam._m0[18u].z, fma(_2140, cbModelParam._m0[18u].y, _2139 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2141, cbModelParam._m0[19u].z, fma(_2140, cbModelParam._m0[19u].y, _2139 * cbModelParam._m0[19u].x))), _1404);
            frontier_phi_22_46_ladder = _2369.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2369.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2369.x * cbModelParam._m0[1u].z;
        }
        _1497 = frontier_phi_22_46_ladder_2;
        _1499 = frontier_phi_22_46_ladder_1;
        _1501 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1481 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_500, _501, _502), _1404);
        _1497 = _1481.x * cbModelParam._m0[1u].z;
        _1499 = _1481.y * cbModelParam._m0[1u].z;
        _1501 = _1481.z * cbModelParam._m0[1u].z;
    }
    float _1514 = (((_527 * _477) + _528) * _492) * ((cbModelParam._m0[1u].w * (_1497 - _1395)) + _1395);
    float _1516 = (((_527 * _479) + _528) * _492) * ((cbModelParam._m0[1u].w * (_1499 - _1397)) + _1397);
    float _1518 = (((_527 * _480) + _528) * _492) * ((cbModelParam._m0[1u].w * (_1501 - _1399)) + _1399);
    float _1521 = fma(_1518, cbSceneParam._m0[89u].z, fma(_1516, cbSceneParam._m0[89u].y, _1514 * cbSceneParam._m0[89u].x));
    float _1524 = fma(_1518, cbSceneParam._m0[90u].z, fma(_1516, cbSceneParam._m0[90u].y, _1514 * cbSceneParam._m0[90u].x));
    float _1527 = fma(_1518, cbSceneParam._m0[91u].z, fma(_1516, cbSceneParam._m0[91u].y, _1514 * cbSceneParam._m0[91u].x));
    vec4 _1535 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_411, _412));
    float _1537 = _1535.w;
    float _1549 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1537);
    float _1550 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1537);
    float _1551 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1537);
    uvec4 _1555 = floatBitsToUint(cbInstanceData._m0[_452 + 5u]);
    uint _1557 = _1555.x * 14u;
    uint _1558 = _1557 + 13u;
    float _1565 = _492 + (-1.0);
    float _1570 = (cbLight._m0[_1558].x * _1565) + 1.0;
    float _1571 = (cbLight._m0[_1558].y * _1565) + 1.0;
    float _1572 = (cbLight._m0[_1558].z * _1565) + 1.0;
    float _1573 = (cbLight._m0[_1558].w * _1565) + 1.0;
    uint _1574 = _1557 + 5u;
    float _1580 = isnan(1.0) ? _1571 : (isnan(_1571) ? 1.0 : min(_1571, 1.0));
    uint _1584 = _1557 + 4u;
    float _1594 = isnan(1.0) ? _1570 : (isnan(_1570) ? 1.0 : min(_1570, 1.0));
    uint _1598 = _1557 | 1u;
    float _1609 = dot(vec3(cbLight._m0[_1557].xyz), vec3(_322, _323, _324));
    float _1612 = dot(vec3(cbLight._m0[_1598].xyz), vec3(_322, _323, _324));
    float _3742 = isnan(0.0) ? _1609 : (isnan(_1609) ? 0.0 : max(_1609, 0.0));
    float _3753 = isnan(0.0) ? _1612 : (isnan(_1612) ? 0.0 : max(_1612, 0.0));
    float _1617 = (isnan(1.0) ? _3742 : (isnan(_3742) ? 1.0 : min(_3742, 1.0))) * 0.3183098733425140380859375;
    float _1619 = (isnan(1.0) ? _3753 : (isnan(_3753) ? 1.0 : min(_3753, 1.0))) * 0.3183098733425140380859375;
    float _1626 = ((cbLight._m0[_1574].x * _1580) * _1619) + (((cbLight._m0[_1584].x * _1549) * _1594) * _1617);
    float _1627 = ((_1580 * cbLight._m0[_1574].y) * _1619) + (((cbLight._m0[_1584].y * _1550) * _1594) * _1617);
    float _1628 = ((_1580 * cbLight._m0[_1574].z) * _1619) + (((cbLight._m0[_1584].z * _1551) * _1594) * _1617);
    uvec4 _1632 = floatBitsToUint(cbLight._m0[_1557 + 12u]);
    bool _1634 = _1632.x == 0u;
    float _1645;
    float _1647;
    float _1649;
    if (_1634)
    {
        _1645 = _1626;
        _1647 = _1627;
        _1649 = _1628;
    }
    else
    {
        uint _1653 = _1557 + 6u;
        float _1669 = (dot(vec3(cbLight._m0[_1557 + 2u].xyz), vec3(_322, _323, _324)) * 0.5) + 0.5;
        float _1670 = _1669 * _1669;
        float _3764 = isnan(0.0) ? _1670 : (isnan(_1670) ? 0.0 : max(_1670, 0.0));
        float _1671 = isnan(1.0) ? _3764 : (isnan(_3764) ? 1.0 : min(_3764, 1.0));
        float _1672 = isnan(1.0) ? _1572 : (isnan(_1572) ? 1.0 : min(_1572, 1.0));
        _1645 = (((cbLight._m0[_1653].x * 0.3183098733425140380859375) * _1671) * _1672) + _1626;
        _1647 = (((cbLight._m0[_1653].y * 0.3183098733425140380859375) * _1671) * _1672) + _1627;
        _1649 = (((cbLight._m0[_1653].z * 0.3183098733425140380859375) * _1671) * _1672) + _1628;
    }
    bool _1652 = _1632.y == 0u;
    float _1690;
    float _1692;
    float _1694;
    if (_1652)
    {
        _1690 = _1645;
        _1692 = _1647;
        _1694 = _1649;
    }
    else
    {
        uint _1863 = _1557 + 7u;
        float _1879 = (dot(vec3(cbLight._m0[_1557 + 3u].xyz), vec3(_322, _323, _324)) * 0.5) + 0.5;
        float _1880 = _1879 * _1879;
        float _3780 = isnan(0.0) ? _1880 : (isnan(_1880) ? 0.0 : max(_1880, 0.0));
        float _1881 = isnan(1.0) ? _3780 : (isnan(_3780) ? 1.0 : min(_3780, 1.0));
        float _1882 = isnan(1.0) ? _1573 : (isnan(_1573) ? 1.0 : min(_1573, 1.0));
        _1690 = (((cbLight._m0[_1863].x * 0.3183098733425140380859375) * _1881) * _1882) + _1645;
        _1692 = (((cbLight._m0[_1863].y * 0.3183098733425140380859375) * _1881) * _1882) + _1647;
        _1694 = (((cbLight._m0[_1863].z * 0.3183098733425140380859375) * _1881) * _1882) + _1649;
    }
    uint _1697 = _1557 + 8u;
    float _1710 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1557].w)) * _325) * 0.949999988079071044921875);
    float _1711 = _1710 * _1710;
    float _1712 = cbLight._m0[_1557].x + _403;
    float _1713 = cbLight._m0[_1557].y + _404;
    float _1714 = cbLight._m0[_1557].z + _405;
    float _1718 = inversesqrt(dot(vec3(_1712, _1713, _1714), vec3(_1712, _1713, _1714)));
    float _1719 = _1718 * _1712;
    float _1720 = _1718 * _1713;
    float _1721 = _1718 * _1714;
    float _1722 = dot(vec3(_322, _323, _324), vec3(cbLight._m0[_1557].xyz));
    float _3796 = isnan(0.0) ? _1722 : (isnan(_1722) ? 0.0 : max(_1722, 0.0));
    float _1725 = isnan(1.0) ? _3796 : (isnan(_3796) ? 1.0 : min(_3796, 1.0));
    float _3807 = isnan(0.0) ? _493 : (isnan(_493) ? 0.0 : max(_493, 0.0));
    float _1726 = isnan(1.0) ? _3807 : (isnan(_3807) ? 1.0 : min(_3807, 1.0));
    float _1727 = dot(vec3(_322, _323, _324), vec3(_1719, _1720, _1721));
    float _3818 = isnan(0.0) ? _1727 : (isnan(_1727) ? 0.0 : max(_1727, 0.0));
    float _1730 = isnan(1.0) ? _3818 : (isnan(_3818) ? 1.0 : min(_3818, 1.0));
    float _1731 = dot(vec3(cbLight._m0[_1557].xyz), vec3(_1719, _1720, _1721));
    float _3829 = isnan(0.0) ? _1731 : (isnan(_1731) ? 0.0 : max(_1731, 0.0));
    float _1735 = _1711 * _1711;
    float _1739 = ((_1730 * _1730) * (_1735 + (-1.0))) + 1.0;
    float _1747 = exp2(log2(1.0 - (isnan(1.0) ? _3829 : (isnan(_3829) ? 1.0 : min(_3829, 1.0)))) * 5.0);
    float _1748 = 0.959999978542327880859375 - _474;
    float _1750 = 0.959999978542327880859375 - _475;
    float _1751 = 0.959999978542327880859375 - _476;
    float _1758 = 1.0 - _1711;
    float _1769 = (0.5 / (((_1726 * ((_1725 * _1758) + _1711)) + 9.9999999392252902907785028219223e-09) + (((_1726 * _1758) + _1711) * _1725))) * _1725;
    float _3840 = isnan(0.0) ? _1769 : (isnan(_1769) ? 0.0 : max(_1769, 0.0));
    float _1771 = (isnan(1.0) ? _3840 : (isnan(_3840) ? 1.0 : min(_3840, 1.0))) * (_1735 / ((_1739 * _1739) * 3.141590118408203125));
    uint _1785 = _1557 + 9u;
    float _1796 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1598].w)) * _325) * 0.949999988079071044921875);
    float _1797 = _1796 * _1796;
    float _1798 = cbLight._m0[_1598].x + _403;
    float _1799 = cbLight._m0[_1598].y + _404;
    float _1800 = cbLight._m0[_1598].z + _405;
    float _1804 = inversesqrt(dot(vec3(_1798, _1799, _1800), vec3(_1798, _1799, _1800)));
    float _1805 = _1804 * _1798;
    float _1806 = _1804 * _1799;
    float _1807 = _1804 * _1800;
    float _1808 = dot(vec3(_322, _323, _324), vec3(cbLight._m0[_1598].xyz));
    float _3851 = isnan(0.0) ? _1808 : (isnan(_1808) ? 0.0 : max(_1808, 0.0));
    float _1811 = isnan(1.0) ? _3851 : (isnan(_3851) ? 1.0 : min(_3851, 1.0));
    float _1812 = dot(vec3(_322, _323, _324), vec3(_1805, _1806, _1807));
    float _3862 = isnan(0.0) ? _1812 : (isnan(_1812) ? 0.0 : max(_1812, 0.0));
    float _1815 = isnan(1.0) ? _3862 : (isnan(_3862) ? 1.0 : min(_3862, 1.0));
    float _1816 = dot(vec3(cbLight._m0[_1598].xyz), vec3(_1805, _1806, _1807));
    float _3873 = isnan(0.0) ? _1816 : (isnan(_1816) ? 0.0 : max(_1816, 0.0));
    float _1820 = _1797 * _1797;
    float _1824 = ((_1815 * _1815) * (_1820 + (-1.0))) + 1.0;
    float _1831 = exp2(log2(1.0 - (isnan(1.0) ? _3873 : (isnan(_3873) ? 1.0 : min(_3873, 1.0)))) * 5.0);
    float _1838 = 1.0 - _1797;
    float _1848 = (0.5 / (((_1726 * ((_1811 * _1838) + _1797)) + 9.9999999392252902907785028219223e-09) + (((_1726 * _1838) + _1797) * _1811))) * _1811;
    float _3884 = isnan(0.0) ? _1848 : (isnan(_1848) ? 0.0 : max(_1848, 0.0));
    float _1850 = (isnan(1.0) ? _3884 : (isnan(_3884) ? 1.0 : min(_3884, 1.0))) * (_1820 / ((_1824 * _1824) * 3.141590118408203125));
    float _1860 = (((((_1831 * _1748) + _477) * cbLight._m0[_1785].x) * _1850) * _1580) + ((((cbLight._m0[_1697].x * _1549) * ((_1747 * _1748) + _477)) * _1771) * _1594);
    float _1861 = (((((_1831 * _1750) + _479) * cbLight._m0[_1785].y) * _1850) * _1580) + ((((cbLight._m0[_1697].y * _1550) * ((_1747 * _1750) + _479)) * _1771) * _1594);
    float _1862 = (((((_1831 * _1751) + _480) * cbLight._m0[_1785].z) * _1850) * _1580) + ((((cbLight._m0[_1697].z * _1551) * ((_1747 * _1751) + _480)) * _1771) * _1594);
    float _1924;
    float _1926;
    float _1928;
    if (_1634)
    {
        _1924 = _1860;
        _1926 = _1861;
        _1928 = _1862;
    }
    else
    {
        uint _1930 = _1557 + 2u;
        uint _1934 = _1557 + 10u;
        float _1948 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1930].w)) * _325) * 0.949999988079071044921875);
        float _1949 = _1948 * _1948;
        float _1950 = cbLight._m0[_1930].x + _403;
        float _1951 = cbLight._m0[_1930].y + _404;
        float _1952 = cbLight._m0[_1930].z + _405;
        float _1956 = inversesqrt(dot(vec3(_1950, _1951, _1952), vec3(_1950, _1951, _1952)));
        float _1957 = _1956 * _1950;
        float _1958 = _1956 * _1951;
        float _1959 = _1956 * _1952;
        float _1960 = dot(vec3(_322, _323, _324), vec3(cbLight._m0[_1930].xyz));
        float _3895 = isnan(0.0) ? _1960 : (isnan(_1960) ? 0.0 : max(_1960, 0.0));
        float _1963 = isnan(1.0) ? _3895 : (isnan(_3895) ? 1.0 : min(_3895, 1.0));
        float _1964 = dot(vec3(_322, _323, _324), vec3(_1957, _1958, _1959));
        float _3906 = isnan(0.0) ? _1964 : (isnan(_1964) ? 0.0 : max(_1964, 0.0));
        float _1967 = isnan(1.0) ? _3906 : (isnan(_3906) ? 1.0 : min(_3906, 1.0));
        float _1968 = dot(vec3(cbLight._m0[_1930].xyz), vec3(_1957, _1958, _1959));
        float _3917 = isnan(0.0) ? _1968 : (isnan(_1968) ? 0.0 : max(_1968, 0.0));
        float _1972 = _1949 * _1949;
        float _1976 = ((_1967 * _1967) * (_1972 + (-1.0))) + 1.0;
        float _1983 = exp2(log2(1.0 - (isnan(1.0) ? _3917 : (isnan(_3917) ? 1.0 : min(_3917, 1.0)))) * 5.0);
        float _1990 = 1.0 - _1949;
        float _2000 = (0.5 / (((_1726 * ((_1963 * _1990) + _1949)) + 9.9999999392252902907785028219223e-09) + (((_1726 * _1990) + _1949) * _1963))) * _1963;
        float _3928 = isnan(0.0) ? _2000 : (isnan(_2000) ? 0.0 : max(_2000, 0.0));
        float _2002 = (isnan(1.0) ? _3928 : (isnan(_3928) ? 1.0 : min(_3928, 1.0))) * (_1972 / ((_1976 * _1976) * 3.141590118408203125));
        float _2003 = isnan(1.0) ? _1572 : (isnan(_1572) ? 1.0 : min(_1572, 1.0));
        _1924 = (((((_1983 * _1748) + _477) * cbLight._m0[_1934].x) * _2002) * _2003) + _1860;
        _1926 = (((((_1983 * _1750) + _479) * cbLight._m0[_1934].y) * _2002) * _2003) + _1861;
        _1928 = (((((_1983 * _1751) + _480) * cbLight._m0[_1934].z) * _2002) * _2003) + _1862;
    }
    float _2038;
    float _2040;
    float _2042;
    if (_1652)
    {
        _2038 = _1924;
        _2040 = _1926;
        _2042 = _1928;
    }
    else
    {
        uint _2049 = _1557 + 3u;
        uint _2053 = _1557 + 11u;
        float _2067 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2049].w)) * _325) * 0.949999988079071044921875);
        float _2068 = _2067 * _2067;
        float _2069 = cbLight._m0[_2049].x + _403;
        float _2070 = cbLight._m0[_2049].y + _404;
        float _2071 = cbLight._m0[_2049].z + _405;
        float _2075 = inversesqrt(dot(vec3(_2069, _2070, _2071), vec3(_2069, _2070, _2071)));
        float _2076 = _2075 * _2069;
        float _2077 = _2075 * _2070;
        float _2078 = _2075 * _2071;
        float _2079 = dot(vec3(_322, _323, _324), vec3(cbLight._m0[_2049].xyz));
        float _3944 = isnan(0.0) ? _2079 : (isnan(_2079) ? 0.0 : max(_2079, 0.0));
        float _2082 = isnan(1.0) ? _3944 : (isnan(_3944) ? 1.0 : min(_3944, 1.0));
        float _2083 = dot(vec3(_322, _323, _324), vec3(_2076, _2077, _2078));
        float _3955 = isnan(0.0) ? _2083 : (isnan(_2083) ? 0.0 : max(_2083, 0.0));
        float _2086 = isnan(1.0) ? _3955 : (isnan(_3955) ? 1.0 : min(_3955, 1.0));
        float _2087 = dot(vec3(cbLight._m0[_2049].xyz), vec3(_2076, _2077, _2078));
        float _3966 = isnan(0.0) ? _2087 : (isnan(_2087) ? 0.0 : max(_2087, 0.0));
        float _2091 = _2068 * _2068;
        float _2095 = ((_2086 * _2086) * (_2091 + (-1.0))) + 1.0;
        float _2102 = exp2(log2(1.0 - (isnan(1.0) ? _3966 : (isnan(_3966) ? 1.0 : min(_3966, 1.0)))) * 5.0);
        float _2109 = 1.0 - _2068;
        float _2119 = (0.5 / (((_1726 * ((_2082 * _2109) + _2068)) + 9.9999999392252902907785028219223e-09) + (((_1726 * _2109) + _2068) * _2082))) * _2082;
        float _3977 = isnan(0.0) ? _2119 : (isnan(_2119) ? 0.0 : max(_2119, 0.0));
        float _2121 = (isnan(1.0) ? _3977 : (isnan(_3977) ? 1.0 : min(_3977, 1.0))) * (_2091 / ((_2095 * _2095) * 3.141590118408203125));
        float _2122 = isnan(1.0) ? _1573 : (isnan(_1573) ? 1.0 : min(_1573, 1.0));
        _2038 = (((((_2102 * _1748) + _477) * cbLight._m0[_2053].x) * _2121) * _2122) + _1924;
        _2040 = (((((_2102 * _1750) + _479) * cbLight._m0[_2053].y) * _2121) * _2122) + _1926;
        _2042 = (((((_2102 * _1751) + _480) * cbLight._m0[_2053].z) * _2121) * _2122) + _1928;
    }
    float _2257;
    float _2259;
    float _2261;
    float _2263;
    float _2265;
    float _2267;
    if (_1555.y == 0u)
    {
        float _2197 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2198 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2197;
        float _2199 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2197;
        float _2200 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2197;
        uvec4 _2212 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2213 = _2212.x;
        uint _2224 = uint((float(_2212.y) * floor(float(uint(cbSceneParam._m0[85u].y * _412) / _2213))) + floor(float(uint(cbSceneParam._m0[85u].x * _411) / _2213)));
        float _2234 = (log2(_2200 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2235 = isnan(0.0) ? _2234 : (isnan(_2234) ? 0.0 : max(_2234, 0.0));
        uint _2238 = uint(isnan(14.0) ? _2235 : (isnan(_2235) ? 14.0 : min(_2235, 14.0)));
        uvec4 _2243 = texelFetch(g_lightClusterGridBuffer, int(((_2238 << 2u) + (_2224 << 6u)) >> 2u));
        uint _2244 = _2243.x;
        uint _2245 = _2212.z;
        float _2374;
        float _2376;
        float _2378;
        float _2380;
        float _2382;
        float _2384;
        if (((((1u << ((_2245 >> 4u) & 15u)) + 4294967295u) & _2244) == 0u) || ((_2245 & 240u) == 0u))
        {
            _2374 = 0.0;
            _2376 = 0.0;
            _2378 = 0.0;
            _2380 = 0.0;
            _2382 = 0.0;
            _2384 = 0.0;
        }
        else
        {
            float _2375;
            float _2377;
            float _2379;
            float _2381;
            float _2383;
            float _2385;
            float _2527 = 0.0;
            float _2528 = 0.0;
            float _2529 = 0.0;
            float _2530 = 0.0;
            float _2531 = 0.0;
            float _2532 = 0.0;
            uint _2533 = 0u;
            uint _2542;
            bool _2543;
            for (;;)
            {
                _2542 = texelFetch(g_lightClassification, int((((_2238 << 5u) + (_2224 << 9u)) + (_2533 << 2u)) >> 2u)).x;
                _2543 = _2542 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2543)
                {
                    frontier_phi_61_pred = _2527;
                    frontier_phi_61_pred_1 = _2532;
                    frontier_phi_61_pred_2 = _2531;
                    frontier_phi_61_pred_3 = _2530;
                    frontier_phi_61_pred_4 = _2529;
                    frontier_phi_61_pred_5 = _2528;
                }
                else
                {
                    float _2651;
                    float _2652;
                    float _2653;
                    float _2654;
                    float _2655;
                    float _2656;
                    uint _2657;
                    _2651 = _2527;
                    _2652 = _2528;
                    _2653 = _2529;
                    _2654 = _2530;
                    _2655 = _2531;
                    _2656 = _2532;
                    _2657 = _2542;
                    float _2583;
                    float _2584;
                    float _2585;
                    float _2586;
                    float _2587;
                    float _2588;
                    for (;;)
                    {
                        uint _2661 = uint(findLSB(_2657)) + (_2533 << 5u);
                        uint _2658 = (_2657 + 4294967295u) & _2657;
                        uint _2663 = _2661 * 48u;
                        vec4 _2677 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2663)).x, texelFetch(g_PointLightRenderingBuffer, int(_2663 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2663 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2663 + 3u)).x));
                        uint _2683 = (_2661 * 48u) + 4u;
                        vec4 _2696 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2683)).x, texelFetch(g_PointLightRenderingBuffer, int(_2683 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2683 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2683 + 3u)).x));
                        uint _2702 = (_2661 * 48u) + 8u;
                        vec3 _2713 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2702)).x, texelFetch(g_PointLightRenderingBuffer, int(_2702 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2702 + 2u)).x));
                        float _2717 = _2677.x - _2198;
                        float _2718 = _2677.y - _2199;
                        float _2719 = _2677.z - _2200;
                        float _2720 = dot(vec3(_2717, _2718, _2719), vec3(_2717, _2718, _2719));
                        float _2723 = inversesqrt(_2720);
                        float _2724 = _2723 * _2717;
                        float _2725 = _2723 * _2718;
                        float _2726 = _2723 * _2719;
                        float _2727 = dot(vec3(_433, _436, _439), vec3(_2724, _2725, _2726));
                        float _2732 = 1.0 - (_2720 * _2677.w);
                        float _4003 = isnan(0.0) ? _2732 : (isnan(_2732) ? 0.0 : max(_2732, 0.0));
                        float _2733 = isnan(1.0) ? _4003 : (isnan(_4003) ? 1.0 : min(_4003, 1.0));
                        float _2734 = sqrt(_2720) * _2696.w;
                        float _2737 = 1.39999997615814208984375 / (_2734 + 1.39999997615814208984375);
                        float _2738 = _2737 * _2737;
                        float _2741 = ((1.0 - _2738) * _2727) + _2738;
                        float _2744 = _2734 * _2734;
                        float _2748 = ((isnan(0.0) ? _2741 : (isnan(_2741) ? 0.0 : max(_2741, 0.0))) * _2733) / ((_2744 * 0.699999988079071044921875) + 1.0);
                        float _2752 = (-0.0) - _2198;
                        float _2753 = (-0.0) - _2199;
                        float _2754 = (-0.0) - _2200;
                        float _2758 = inversesqrt(dot(vec3(_2752, _2753, _2754), vec3(_2752, _2753, _2754)));
                        float _2759 = _2758 * _2752;
                        float _2760 = _2758 * _2753;
                        float _2761 = _2758 * _2754;
                        float _2769 = exp2(log2(1.0 / ((_2744 * 3.5) + 5.0)) * 0.25);
                        float _2770 = 1.0 - _508;
                        float _2777 = sqrt(1.0 - ((1.0 - (_2770 * _2770)) * (1.0 - (_2769 * _2769))));
                        float _2778 = _2777 * _2777;
                        float _2779 = _2778 * _2778;
                        float _2780 = _2759 + _2724;
                        float _2781 = _2760 + _2725;
                        float _2782 = _2761 + _2726;
                        float _2786 = inversesqrt(dot(vec3(_2780, _2781, _2782), vec3(_2780, _2781, _2782)));
                        float _2790 = dot(vec3(_433, _436, _439), vec3(_2759, _2760, _2761));
                        float _4019 = isnan(0.0) ? _2790 : (isnan(_2790) ? 0.0 : max(_2790, 0.0));
                        float _2793 = isnan(1.0) ? _4019 : (isnan(_4019) ? 1.0 : min(_4019, 1.0));
                        float _2794 = dot(vec3(_433, _436, _439), vec3(_2786 * _2780, _2786 * _2781, _2786 * _2782));
                        float _4030 = isnan(0.0) ? _2794 : (isnan(_2794) ? 0.0 : max(_2794, 0.0));
                        float _2797 = isnan(1.0) ? _4030 : (isnan(_4030) ? 1.0 : min(_4030, 1.0));
                        float _2801 = ((_2797 * _2797) * (_2779 + (-1.0))) + 1.0;
                        float _2802 = _2737 * _2778;
                        float _2803 = _2802 * _2802;
                        float _2806 = ((1.0 - _2803) * _2727) + _2803;
                        float _4041 = isnan(0.0) ? _2806 : (isnan(_2806) ? 0.0 : max(_2806, 0.0));
                        float _2807 = isnan(1.0) ? _4041 : (isnan(_4041) ? 1.0 : min(_4041, 1.0));
                        float _2808 = 1.0 - _2778;
                        float _2818 = (0.5 / (((_2807 * ((_2793 * _2808) + _2778)) + 9.9999999392252902907785028219223e-09) + (((_2807 * _2808) + _2778) * _2793))) * _2807;
                        float _4052 = isnan(0.0) ? _2818 : (isnan(_2818) ? 0.0 : max(_2818, 0.0));
                        float _2829 = (((_2779 * 3.1415927410125732421875) * (isnan(1.0) ? _4052 : (isnan(_4052) ? 1.0 : min(_4052, 1.0)))) / ((_2801 * _2801) * ((_2744 * 2.1991131305694580078125) + 3.141590118408203125))) * _2733;
                        _2586 = (_2748 * _2696.x) + _2654;
                        _2587 = (_2748 * _2696.y) + _2655;
                        _2588 = (_2748 * _2696.z) + _2656;
                        _2583 = (_2829 * _2713.x) + _2651;
                        _2584 = (_2829 * _2713.y) + _2652;
                        _2585 = (_2829 * _2713.z) + _2653;
                        if (_2658 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2651 = _2583;
                            _2652 = _2584;
                            _2653 = _2585;
                            _2654 = _2586;
                            _2655 = _2587;
                            _2656 = _2588;
                            _2657 = _2658;
                        }
                    }
                    frontier_phi_61_pred = _2583;
                    frontier_phi_61_pred_1 = _2588;
                    frontier_phi_61_pred_2 = _2587;
                    frontier_phi_61_pred_3 = _2586;
                    frontier_phi_61_pred_4 = _2585;
                    frontier_phi_61_pred_5 = _2584;
                }
                _2375 = frontier_phi_61_pred;
                _2385 = frontier_phi_61_pred_1;
                _2383 = frontier_phi_61_pred_2;
                _2381 = frontier_phi_61_pred_3;
                _2379 = frontier_phi_61_pred_4;
                _2377 = frontier_phi_61_pred_5;
                uint _2534 = _2533 + 1u;
                if (_2534 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2527 = _2375;
                    _2528 = _2377;
                    _2529 = _2379;
                    _2530 = _2381;
                    _2531 = _2383;
                    _2532 = _2385;
                    _2533 = _2534;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2374 = _2375;
            _2376 = _2377;
            _2378 = _2379;
            _2380 = _2381;
            _2382 = _2383;
            _2384 = _2385;
        }
        uvec4 _2388 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2389 = _2388.z;
        uint _2391 = (_2389 >> 8u) & 15u;
        float _2495;
        float _2497;
        float _2499;
        float _2501;
        float _2503;
        float _2505;
        if (((4294967295u << _2391) & _2244) == 0u)
        {
            _2495 = _2374;
            _2497 = _2376;
            _2499 = _2378;
            _2501 = _2380;
            _2503 = _2382;
            _2505 = _2384;
        }
        else
        {
            float _2520 = inversesqrt(dot(vec3(_2198, _2199, _2200), vec3(_2198, _2199, _2200)));
            float _2521 = _2520 * _2198;
            float _2522 = _2520 * _2199;
            float _2523 = _2520 * _2200;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2391 < ((_2389 >> 12u) & 15u))
            {
                float _2496;
                float _2498;
                float _2500;
                float _2502;
                float _2504;
                float _2506;
                float _2634 = _2374;
                float _2635 = _2376;
                float _2636 = _2378;
                float _2637 = _2380;
                float _2638 = _2382;
                float _2639 = _2384;
                uint _2640 = _2391;
                uint _2649;
                bool _2650;
                for (;;)
                {
                    _2649 = texelFetch(g_lightClassification, int((((_2238 << 5u) + (_2224 << 9u)) + (_2640 << 2u)) >> 2u)).x;
                    _2650 = _2649 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2650)
                    {
                        frontier_phi_67_pred = _2637;
                        frontier_phi_67_pred_1 = _2638;
                        frontier_phi_67_pred_2 = _2639;
                        frontier_phi_67_pred_3 = _2636;
                        frontier_phi_67_pred_4 = _2635;
                        frontier_phi_67_pred_5 = _2634;
                    }
                    else
                    {
                        float _2834;
                        float _2835;
                        float _2836;
                        float _2837;
                        float _2838;
                        float _2839;
                        float _3130;
                        float _3131;
                        float _3132;
                        float _3133;
                        float _3134;
                        float _3135;
                        float _2847 = _2634;
                        float _2848 = _2635;
                        float _2849 = _2636;
                        float _2850 = _2637;
                        float _2851 = _2638;
                        float _2852 = _2639;
                        uint _2853 = _2649;
                        uint _2854;
                        vec4 _2879;
                        float _2880;
                        vec4 _2895;
                        vec3 _2907;
                        vec4 _2923;
                        vec4 _2939;
                        float _2986;
                        bool _2987;
                        for (;;)
                        {
                            uint _2864 = ((_2640 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2853));
                            _2854 = (_2853 + 4294967295u) & _2853;
                            uint _2866 = _2864 * 40u;
                            _2879 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2866)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2866 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2866 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2866 + 3u)).x));
                            _2880 = _2879.w;
                            uint _2882 = (_2864 * 40u) + 4u;
                            _2895 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2882)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2882 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2882 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2882 + 3u)).x));
                            uint _2897 = (_2864 * 40u) + 8u;
                            _2907 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2897)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2897 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2897 + 2u)).x));
                            uint _2910 = (_2864 * 40u) + 16u;
                            _2923 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2910)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2910 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2910 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2910 + 3u)).x));
                            uint _2926 = (_2864 * 40u) + 20u;
                            _2939 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2926)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2926 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2926 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2926 + 3u)).x));
                            uint _2942 = (_2864 * 40u) + 24u;
                            vec4 _2955 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2942)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2942 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2942 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2942 + 3u)).x));
                            uint _2961 = (_2864 * 40u) + 28u;
                            vec4 _2974 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2961)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2961 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2961 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2961 + 3u)).x));
                            _2986 = fma(_2200, _2974.z, fma(_2199, _2974.y, _2974.x * _2198)) + _2974.w;
                            _2987 = !((fma(_2200, _2955.z, fma(_2199, _2955.y, _2955.x * _2198)) + _2955.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_2987)
                            {
                                float _3014 = _2879.x - _2198;
                                float _3015 = _2879.y - _2199;
                                float _3016 = _2879.z - _2200;
                                float _3017 = dot(vec3(_3014, _3015, _3016), vec3(_3014, _3015, _3016));
                                float _3020 = inversesqrt(_3017);
                                float _3021 = _3020 * _3014;
                                float _3022 = _3020 * _3015;
                                float _3023 = _3020 * _3016;
                                float _3027 = 1.0 - (_3017 / (_2880 * _2880));
                                float _4063 = isnan(0.0) ? _3027 : (isnan(_3027) ? 0.0 : max(_3027, 0.0));
                                float _3028 = isnan(1.0) ? _4063 : (isnan(_4063) ? 1.0 : min(_4063, 1.0));
                                float _3032 = sqrt(_3017) * _2895.w;
                                float _3034 = 1.39999997615814208984375 / (_3032 + 1.39999997615814208984375);
                                float _3035 = _3034 * _3034;
                                float _3038 = ((1.0 - _3035) * dot(vec3(_3021, _3022, _3023), vec3(_433, _436, _439))) + _3035;
                                float _3041 = _3032 * _3032;
                                float _3045 = (fma(_2200, _2923.z, fma(_2199, _2923.y, _2923.x * _2198)) + _2923.w) / _2986;
                                float _3046 = (fma(_2200, _2939.z, fma(_2199, _2939.y, _2939.x * _2198)) + _2939.w) / _2986;
                                float _3050 = 1.0 - dot(vec2(_3045, _3046), vec2(_3045, _3046));
                                float _4079 = isnan(0.0) ? _3050 : (isnan(_3050) ? 0.0 : max(_3050, 0.0));
                                float _3051 = isnan(1.0) ? _4079 : (isnan(_4079) ? 1.0 : min(_4079, 1.0));
                                float _3052 = _3051 * (((isnan(0.0) ? _3038 : (isnan(_3038) ? 0.0 : max(_3038, 0.0))) * _3028) / ((_3041 * 0.699999988079071044921875) + 1.0));
                                float _3064 = exp2(log2(1.0 / ((_3041 * 3.5) + 5.0)) * 0.25);
                                float _3065 = 1.0 - _508;
                                float _3072 = sqrt(1.0 - ((1.0 - (_3065 * _3065)) * (1.0 - (_3064 * _3064))));
                                float _3073 = _3072 * _3072;
                                float _3074 = _3073 * _3073;
                                float _3075 = _3021 - _2521;
                                float _3076 = _3022 - _2522;
                                float _3077 = _3023 - _2523;
                                float _3081 = inversesqrt(dot(vec3(_3075, _3076, _3077), vec3(_3075, _3076, _3077)));
                                float _3085 = dot(vec3(_433, _436, _439), vec3((-0.0) - _2521, (-0.0) - _2522, (-0.0) - _2523));
                                float _4090 = isnan(0.0) ? _3085 : (isnan(_3085) ? 0.0 : max(_3085, 0.0));
                                float _3088 = isnan(1.0) ? _4090 : (isnan(_4090) ? 1.0 : min(_4090, 1.0));
                                float _3089 = dot(vec3(_433, _436, _439), vec3(_3081 * _3075, _3081 * _3076, _3081 * _3077));
                                float _4101 = isnan(0.0) ? _3089 : (isnan(_3089) ? 0.0 : max(_3089, 0.0));
                                float _3092 = isnan(1.0) ? _4101 : (isnan(_4101) ? 1.0 : min(_4101, 1.0));
                                float _3096 = ((_3092 * _3092) * (_3074 + (-1.0))) + 1.0;
                                float _3097 = _3034 * _3073;
                                float _3098 = _3097 * _3097;
                                float _3104 = ((1.0 - _3098) * dot(vec3(_433, _436, _439), vec3(_3021, _3022, _3023))) + _3098;
                                float _4112 = isnan(0.0) ? _3104 : (isnan(_3104) ? 0.0 : max(_3104, 0.0));
                                float _3105 = isnan(1.0) ? _4112 : (isnan(_4112) ? 1.0 : min(_4112, 1.0));
                                float _3106 = 1.0 - _3073;
                                float _3116 = (0.5 / (((_3105 * ((_3088 * _3106) + _3073)) + 9.9999999392252902907785028219223e-09) + (((_3105 * _3106) + _3073) * _3088))) * _3105;
                                float _4123 = isnan(0.0) ? _3116 : (isnan(_3116) ? 0.0 : max(_3116, 0.0));
                                float _3126 = (_3051 * _3028) * (((_3074 * 3.1415927410125732421875) * (isnan(1.0) ? _4123 : (isnan(_4123) ? 1.0 : min(_4123, 1.0)))) / ((_3096 * _3096) * ((_3041 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3126 * _2907.x;
                                frontier_phi_73_pred_1 = _3126 * _2907.y;
                                frontier_phi_73_pred_2 = _3052 * _2895.z;
                                frontier_phi_73_pred_3 = _3052 * _2895.y;
                                frontier_phi_73_pred_4 = _3052 * _2895.x;
                                frontier_phi_73_pred_5 = _3126 * _2907.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3130 = frontier_phi_73_pred;
                            _3131 = frontier_phi_73_pred_1;
                            _3135 = frontier_phi_73_pred_2;
                            _3134 = frontier_phi_73_pred_3;
                            _3133 = frontier_phi_73_pred_4;
                            _3132 = frontier_phi_73_pred_5;
                            _2837 = _3133 + _2850;
                            _2838 = _3134 + _2851;
                            _2839 = _3135 + _2852;
                            _2834 = _3130 + _2847;
                            _2835 = _3131 + _2848;
                            _2836 = _3132 + _2849;
                            if (_2854 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2847 = _2834;
                                _2848 = _2835;
                                _2849 = _2836;
                                _2850 = _2837;
                                _2851 = _2838;
                                _2852 = _2839;
                                _2853 = _2854;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _2837;
                        frontier_phi_67_pred_1 = _2838;
                        frontier_phi_67_pred_2 = _2839;
                        frontier_phi_67_pred_3 = _2836;
                        frontier_phi_67_pred_4 = _2835;
                        frontier_phi_67_pred_5 = _2834;
                    }
                    _2502 = frontier_phi_67_pred;
                    _2504 = frontier_phi_67_pred_1;
                    _2506 = frontier_phi_67_pred_2;
                    _2500 = frontier_phi_67_pred_3;
                    _2498 = frontier_phi_67_pred_4;
                    _2496 = frontier_phi_67_pred_5;
                    uint _2641 = _2640 + 1u;
                    if (_2641 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2634 = _2496;
                        _2635 = _2498;
                        _2636 = _2500;
                        _2637 = _2502;
                        _2638 = _2504;
                        _2639 = _2506;
                        _2640 = _2641;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2504;
                frontier_phi_55_56_ladder_1 = _2506;
                frontier_phi_55_56_ladder_2 = _2502;
                frontier_phi_55_56_ladder_3 = _2500;
                frontier_phi_55_56_ladder_4 = _2498;
                frontier_phi_55_56_ladder_5 = _2496;
            }
            else
            {
                frontier_phi_55_56_ladder = _2382;
                frontier_phi_55_56_ladder_1 = _2384;
                frontier_phi_55_56_ladder_2 = _2380;
                frontier_phi_55_56_ladder_3 = _2378;
                frontier_phi_55_56_ladder_4 = _2376;
                frontier_phi_55_56_ladder_5 = _2374;
            }
            _2495 = frontier_phi_55_56_ladder_5;
            _2497 = frontier_phi_55_56_ladder_4;
            _2499 = frontier_phi_55_56_ladder_3;
            _2501 = frontier_phi_55_56_ladder_2;
            _2503 = frontier_phi_55_56_ladder;
            _2505 = frontier_phi_55_56_ladder_1;
        }
        float _2510 = isnan(1.0) ? _492 : (isnan(_492) ? 1.0 : min(_492, 1.0));
        _2257 = (_2510 * _2501) + _1690;
        _2259 = (_2510 * _2503) + _1692;
        _2261 = (_2510 * _2505) + _1694;
        _2263 = ((_2495 * _477) * _2510) + _2038;
        _2265 = ((_2497 * _479) * _2510) + _2040;
        _2267 = ((_2499 * _480) * _2510) + _2042;
    }
    else
    {
        _2257 = _1690;
        _2259 = _1692;
        _2261 = _1694;
        _2263 = _2038;
        _2265 = _2040;
        _2267 = _2042;
    }
    uint _2273 = _453 + uint(cbMatDynParam._m0[0u].w);
    float _2279 = ((((cbMtdParam._m0[10u].x * cbMtdParam._m0[12u].y) * _286.x) + cbMtdParam._m0[11u].x) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_2273].x;
    float _2280 = ((((cbMtdParam._m0[10u].y * cbMtdParam._m0[12u].y) * _286.y) + cbMtdParam._m0[11u].y) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_2273].y;
    float _2281 = ((cbMtdParam._m0[11u].z + ((cbMtdParam._m0[10u].z * cbMtdParam._m0[12u].y) * _286.z)) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_2273].z;
    float _4139 = isnan(0.0) ? _467 : (isnan(_467) ? 0.0 : max(_467, 0.0));
    float _4150 = isnan(0.0) ? _468 : (isnan(_468) ? 0.0 : max(_468, 0.0));
    float _4161 = isnan(0.0) ? _469 : (isnan(_469) ? 0.0 : max(_469, 0.0));
    float _2298 = (((isnan(1.0) ? _4139 : (isnan(_4139) ? 1.0 : min(_4139, 1.0))) * (_2257 + ((isnan(0.0) ? _1223 : (isnan(_1223) ? 0.0 : max(_1223, 0.0))) * _492))) + ((_2263 + ((isnan(0.0) ? _1521 : (isnan(_1521) ? 0.0 : max(_1521, 0.0))) * _1302)) * cbPerFrame._m0[3u].x)) + _2279;
    float _2300 = (_2280 + ((_2265 + ((isnan(0.0) ? _1524 : (isnan(_1524) ? 0.0 : max(_1524, 0.0))) * _1302)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4150 : (isnan(_4150) ? 1.0 : min(_4150, 1.0))) * (_2259 + ((isnan(0.0) ? _1226 : (isnan(_1226) ? 0.0 : max(_1226, 0.0))) * _492)));
    float _2302 = (_2281 + ((_2267 + ((isnan(0.0) ? _1527 : (isnan(_1527) ? 0.0 : max(_1527, 0.0))) * _1302)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4161 : (isnan(_4161) ? 1.0 : min(_4161, 1.0))) * (_2261 + ((isnan(0.0) ? _1229 : (isnan(_1229) ? 0.0 : max(_1229, 0.0))) * _492)));
    float _4187 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2315 = isnan(1.0) ? _4187 : (isnan(_4187) ? 1.0 : min(_4187, 1.0));
    uint _2316 = _452 + 6u;
    float _2324 = _411 / cbSceneParam._m0[86u].x;
    float _2325 = _412 / cbSceneParam._m0[86u].y;
    vec4 _2339 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2324, _2325, (log2((isnan(cbSceneParam._m0[77u].w) ? _345 : (isnan(_345) ? cbSceneParam._m0[77u].w : min(_345, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2341 = _2339.x;
    float _2342 = _2339.y;
    float _2343 = _2339.z;
    float _2344 = _2339.w;
    float _2437;
    float _2439;
    float _2441;
    float _2443;
    if (_345 > cbSceneParam._m0[78u].w)
    {
        float _2399 = isnan(_345) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _345 : min(cbSceneParam._m0[80u].w, _345));
        float _2400 = _2399 / _345;
        float _2411 = _2400 * _396;
        float _2412 = _397 * _2400;
        float _2413 = (-0.0) - _2412;
        float _2415 = _2400 * _398;
        float _2417 = (cbSceneParam._m0[77u].w * _2413) / _2399;
        float _2418 = _2417 + cbSceneParam._m0[79u].w;
        float _2419 = cbSceneParam._m0[79u].w - _2412;
        float _2425 = sqrt(((_2411 * _2411) + (_2412 * _2412)) + (_2415 * _2415));
        float _2428 = (1.0 - (cbSceneParam._m0[77u].w / _2399)) * _2425;
        float _2433 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2435 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2596;
        if (abs((_2413 - _2417) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2596 = ((((_2418 > 0.0) ? exp2(_2433 * _2418) : (2.0 - exp2(_2435 * _2418))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2428;
        }
        else
        {
            float _2556 = 1.0 / cbSceneParam._m0[80u].x;
            float _2557 = isnan(_2419) ? _2418 : (isnan(_2418) ? _2419 : max(_2418, _2419));
            float _2558 = isnan(_2419) ? _2418 : (isnan(_2418) ? _2419 : min(_2418, _2419));
            float _2567 = isnan(0.0) ? _2557 : (isnan(_2557) ? 0.0 : min(_2557, 0.0));
            float _2568 = isnan(0.0) ? _2558 : (isnan(_2558) ? 0.0 : min(_2558, 0.0));
            _2596 = ((abs(_2425 / _2413) * cbSceneParam._m0[80u].y) * ((((_2567 - _2568) * 2.0) - ((exp2(_2433 * (isnan(0.0) ? _2557 : (isnan(_2557) ? 0.0 : max(_2557, 0.0)))) - exp2(_2433 * (isnan(0.0) ? _2558 : (isnan(_2558) ? 0.0 : max(_2558, 0.0))))) * _2556)) - ((exp2(_2435 * _2567) - exp2(_2435 * _2568)) * _2556))) + (_2428 * cbSceneParam._m0[80u].z);
        }
        vec4 _2598 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2324, _2325, 1.0), 0.0);
        float _2607 = exp2((_2596 * (-1.44269502162933349609375)) * (1.0 - _2598.w));
        float _2608 = log2(_2607);
        float _2624 = log2(_2344);
        _2437 = (exp2(_2624 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2608 * cbSceneParam._m0[78u].x)) * _2598.x) / cbSceneParam._m0[78u].x)) + _2341;
        _2439 = (exp2(_2624 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2608 * cbSceneParam._m0[78u].y)) * _2598.y) / cbSceneParam._m0[78u].y)) + _2342;
        _2441 = (exp2(_2624 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2608 * cbSceneParam._m0[78u].z)) * _2598.z) / cbSceneParam._m0[78u].z)) + _2343;
        _2443 = _2607 * _2344;
    }
    else
    {
        _2437 = _2341;
        _2439 = _2342;
        _2441 = _2343;
        _2443 = _2344;
    }
    float _2454 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2455 = _2454 == 3.0;
    float _2456 = log2(_2443);
    float _2460 = exp2(_2456 * cbSceneParam._m0[78u].x);
    float _2461 = exp2(_2456 * cbSceneParam._m0[78u].y);
    float _2462 = exp2(_2456 * cbSceneParam._m0[78u].z);
    float _2463 = _2460 * (isnan(0.0) ? _2298 : (isnan(_2298) ? 0.0 : max(_2298, 0.0)));
    float _2464 = _2461 * (isnan(0.0) ? _2300 : (isnan(_2300) ? 0.0 : max(_2300, 0.0)));
    float _2465 = _2462 * (isnan(0.0) ? _2302 : (isnan(_2302) ? 0.0 : max(_2302, 0.0)));
    float _2474 = (_2454 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2474 * (_2455 ? _2463 : (_2463 + (cbSceneParam._m0[72u].w * _2437)));
    SV_Target.y = _2474 * (_2455 ? _2464 : (_2464 + (cbSceneParam._m0[72u].w * _2439)));
    SV_Target.z = _2474 * (_2455 ? _2465 : (_2465 + (cbSceneParam._m0[72u].w * _2441)));
    SV_Target.w = cbInstanceData._m0[_2316].w;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2279) * _2315) * _2460) * _2474;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2280) * _2315) * _2461) * _2474;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2281) * _2315) * _2462) * _2474;
    SV_Target_1.w = cbInstanceData._m0[_2316].w;
}


