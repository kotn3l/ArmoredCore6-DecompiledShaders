#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[13];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D P_BS_M1_Emissive_Glow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D P_BS_M1_Emissive_Glow_snp_0_Texture2D_1;
layout(set = 0, binding = 3) uniform texture2D P_BS_M1_Emissive_Glow_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _869;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _180 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _181 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _182 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _187 = inversesqrt(dot(vec3(_180, _181, _182), vec3(_180, _181, _182)));
    float _194 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _201 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _224 = texture(sampler2D(P_BS_M1_Emissive_Glow_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _230 = _224.x * cbMtdParam._m0[9u].x;
    float _231 = _224.y * cbMtdParam._m0[9u].y;
    float _232 = _224.z * cbMtdParam._m0[9u].z;
    vec4 _248 = texture(sampler2D(P_BS_M1_Emissive_Glow_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _252 = _248.z;
    float _256 = (_248.x * 2.0) + (-1.0);
    float _258 = (_248.y * 2.0) + (-1.0);
    float _259 = dot(vec2(_256, _258), vec2(_256, _258));
    float _3525 = isnan(0.0) ? _259 : (isnan(_259) ? 0.0 : max(_259, 0.0));
    float _265 = sqrt(1.0 - (isnan(1.0) ? _3525 : (isnan(_3525) ? 1.0 : min(_3525, 1.0))));
    vec4 _288 = texture(sampler2D(P_BS_M1_Emissive_Glow_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _313 = fma(_265, _194 * NORMAL.x, fma(_258, _201 * TANGENT.x, (_187 * _180) * _256));
    float _316 = fma(_265, _194 * NORMAL.y, fma(_258, _201 * TANGENT.y, (_187 * _181) * _256));
    float _319 = fma(_265, _194 * NORMAL.z, fma(_258, _201 * TANGENT.z, (_187 * _182) * _256));
    float _323 = inversesqrt(dot(vec3(_313, _316, _319), vec3(_313, _316, _319)));
    float _324 = _323 * _313;
    float _325 = _323 * _316;
    float _326 = _323 * _319;
    float _3536 = isnan(0.0) ? _252 : (isnan(_252) ? 0.0 : max(_252, 0.0));
    float _327 = isnan(1.0) ? _3536 : (isnan(_3536) ? 1.0 : min(_3536, 1.0));
    float _3547 = isnan(0.0) ? _230 : (isnan(_230) ? 0.0 : max(_230, 0.0));
    float _3558 = isnan(0.0) ? _231 : (isnan(_231) ? 0.0 : max(_231, 0.0));
    float _3569 = isnan(0.0) ? _232 : (isnan(_232) ? 0.0 : max(_232, 0.0));
    float _3580 = isnan(0.0) ? cbMtdParam._m0[12u].x : (isnan(cbMtdParam._m0[12u].x) ? 0.0 : max(cbMtdParam._m0[12u].x, 0.0));
    float _331 = isnan(1.0) ? _3580 : (isnan(_3580) ? 1.0 : min(_3580, 1.0));
    float _347 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _388 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _398 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _388);
    float _399 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _388);
    float _400 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _388);
    float _404 = inversesqrt(dot(vec3(_398, _399, _400), vec3(_398, _399, _400)));
    float _405 = _398 * _404;
    float _406 = _399 * _404;
    float _407 = _400 * _404;
    float _413 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _414 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _435 = fma(_326, cbSceneParam._m0[5u].z, fma(_325, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _324));
    float _438 = fma(_326, cbSceneParam._m0[6u].z, fma(_325, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _324));
    float _441 = fma(_326, cbSceneParam._m0[7u].z, fma(_325, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _324));
    uint _454 = uint(roundEven(NORMAL.w)) * 13u;
    uint _455 = _454 + 9u;
    uint _456 = _455 + uint(cbMatDynParam._m0[0u].w);
    float _462 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3547 : (isnan(_3547) ? 1.0 : min(_3547, 1.0)))) * cbInstanceData._m0[_456].x;
    float _463 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3558 : (isnan(_3558) ? 1.0 : min(_3558, 1.0)))) * cbInstanceData._m0[_456].y;
    float _464 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3569 : (isnan(_3569) ? 1.0 : min(_3569, 1.0)))) * cbInstanceData._m0[_456].z;
    float _3591 = isnan(0.0) ? _462 : (isnan(_462) ? 0.0 : max(_462, 0.0));
    float _465 = isnan(1.0) ? _3591 : (isnan(_3591) ? 1.0 : min(_3591, 1.0));
    float _3602 = isnan(0.0) ? _463 : (isnan(_463) ? 0.0 : max(_463, 0.0));
    float _466 = isnan(1.0) ? _3602 : (isnan(_3602) ? 1.0 : min(_3602, 1.0));
    float _3613 = isnan(0.0) ? _464 : (isnan(_464) ? 0.0 : max(_464, 0.0));
    float _467 = isnan(1.0) ? _3613 : (isnan(_3613) ? 1.0 : min(_3613, 1.0));
    float _468 = 1.0 - _331;
    float _469 = _465 * _468;
    float _470 = _466 * _468;
    float _471 = _467 * _468;
    float _476 = (_465 + (-0.039999999105930328369140625)) * _331;
    float _477 = (_466 + (-0.039999999105930328369140625)) * _331;
    float _478 = (_467 + (-0.039999999105930328369140625)) * _331;
    float _479 = _476 + 0.039999999105930328369140625;
    float _481 = _477 + 0.039999999105930328369140625;
    float _482 = _478 + 0.039999999105930328369140625;
    vec4 _491 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _413, cbSceneParam._m0[86u].y * _414));
    float _494 = _491.x * TEXCOORD.z;
    float _495 = dot(vec3(_324, _325, _326), vec3(_405, _406, _407));
    float _498 = _495 * 2.0;
    float _502 = (_498 * _324) - _405;
    float _503 = (_498 * _325) - _406;
    float _504 = (_498 * _326) - _407;
    float _508 = abs(dot(vec3(_405, _406, _407), vec3(_324, _325, _326)));
    float _3624 = isnan(0.0) ? _508 : (isnan(_508) ? 0.0 : max(_508, 0.0));
    float _510 = sqrt(_327);
    float _523 = exp2((_510 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3624 : (isnan(_3624) ? 1.0 : min(_3624, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_510 * 3.0));
    float _529 = (1.0 - _523) * ((_510 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _530 = _523 * _510;
    float _558 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _562 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _566 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _868;
    float _870;
    float _871;
    float _872;
    float _873;
    float _874;
    float _875;
    float _876;
    float _877;
    float _878;
    float _879;
    float _880;
    float _881;
    float _882;
    float _883;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _593 = fma(_566, cbModelParam._m0[26u].z, fma(_562, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _558));
        float _597 = fma(_566, cbModelParam._m0[27u].z, fma(_562, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _558));
        float _601 = fma(_566, cbModelParam._m0[28u].z, fma(_562, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _558));
        float _626 = _558 + _324;
        float _627 = _562 + _325;
        float _628 = _566 + _326;
        float _638 = fma(_628, cbModelParam._m0[26u].z, fma(_627, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _626)) - _593;
        float _639 = fma(_628, cbModelParam._m0[27u].z, fma(_627, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _626)) - _597;
        float _640 = fma(_628, cbModelParam._m0[28u].z, fma(_627, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _626)) - _601;
        float _644 = inversesqrt(dot(vec3(_638, _639, _640), vec3(_638, _639, _640)));
        float _657 = ((_644 * _638) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_593 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _658 = ((_644 * _639) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_597 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _659 = ((_644 * _640) / cbModelParam._m0[34u].z) + ((((((_601 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _662 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_657, _658, _659), 0.0);
        vec4 _669 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_657, _658, _659), 0.0);
        vec4 _676 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_657, _658, _659), 0.0);
        vec4 _683 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_657, _658, _659), 0.0);
        float _696 = exp2((_662.w + (-0.5)) * 20.0) * 2.0;
        float _697 = _696 * (_662.x + (-0.5));
        float _698 = _696 * (_662.y + (-0.5));
        float _699 = _696 * (_662.z + (-0.5));
        float _706 = exp2((_669.w + (-0.5)) * 20.0) * 2.0;
        float _707 = _706 * (_669.x + (-0.5));
        float _708 = _706 * (_669.y + (-0.5));
        float _709 = _706 * (_669.z + (-0.5));
        float _716 = exp2((_676.w + (-0.5)) * 20.0) * 2.0;
        float _717 = _716 * (_676.x + (-0.5));
        float _718 = _716 * (_676.y + (-0.5));
        float _719 = _716 * (_676.z + (-0.5));
        float _726 = exp2((_683.w + (-0.5)) * 20.0) * 2.0;
        float _727 = _726 * (_683.x + (-0.5));
        float _728 = _726 * (_683.y + (-0.5));
        float _729 = _726 * (_683.z + (-0.5));
        float _730 = isnan(0.0) ? _727 : (isnan(_727) ? 0.0 : max(_727, 0.0));
        float _731 = isnan(0.0) ? _728 : (isnan(_728) ? 0.0 : max(_728, 0.0));
        float _732 = isnan(0.0) ? _729 : (isnan(_729) ? 0.0 : max(_729, 0.0));
        float _733 = _697 * 0.5;
        float _734 = _707 * 0.5;
        float _735 = _717 * 0.5;
        float _736 = dot(vec3(_733, _734, _735), vec3(_733, _734, _735));
        float _741 = (_736 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_736);
        float _750 = (dot(vec3(_324, _325, _326), vec3(_741 * _733, _741 * _734, _741 * _735)) + 1.0) * 0.5;
        float _3650 = isnan(0.0) ? _750 : (isnan(_750) ? 0.0 : max(_750, 0.0));
        float _760 = sqrt(((_734 * _734) + (_733 * _733)) + (_735 * _735)) / (_730 + 9.9999997473787516355514526367188e-06);
        float _3661 = isnan(0.0) ? _760 : (isnan(_760) ? 0.0 : max(_760, 0.0));
        float _761 = isnan(1.0) ? _3661 : (isnan(_3661) ? 1.0 : min(_3661, 1.0));
        float _762 = _761 * 2.0;
        float _766 = (1.0 - _761) / (_761 + 1.0);
        float _3672 = isnan(0.0) ? _766 : (isnan(_766) ? 0.0 : max(_766, 0.0));
        float _767 = isnan(1.0) ? _3672 : (isnan(_3672) ? 1.0 : min(_3672, 1.0));
        float _776 = ((((1.0 - _767) * (_762 + 2.0)) * exp2(log2(isnan(1.0) ? _3650 : (isnan(_3650) ? 1.0 : min(_3650, 1.0))) * (_762 + 1.0))) + _767) * _730;
        float _777 = _698 * 0.5;
        float _778 = _708 * 0.5;
        float _779 = _718 * 0.5;
        float _780 = dot(vec3(_777, _778, _779), vec3(_777, _778, _779));
        float _785 = (_780 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_780);
        float _793 = (dot(vec3(_324, _325, _326), vec3(_785 * _777, _785 * _778, _785 * _779)) + 1.0) * 0.5;
        float _3683 = isnan(0.0) ? _793 : (isnan(_793) ? 0.0 : max(_793, 0.0));
        float _802 = sqrt(((_778 * _778) + (_777 * _777)) + (_779 * _779)) / (_731 + 9.9999997473787516355514526367188e-06);
        float _3694 = isnan(0.0) ? _802 : (isnan(_802) ? 0.0 : max(_802, 0.0));
        float _803 = isnan(1.0) ? _3694 : (isnan(_3694) ? 1.0 : min(_3694, 1.0));
        float _804 = _803 * 2.0;
        float _808 = (1.0 - _803) / (_803 + 1.0);
        float _3705 = isnan(0.0) ? _808 : (isnan(_808) ? 0.0 : max(_808, 0.0));
        float _809 = isnan(1.0) ? _3705 : (isnan(_3705) ? 1.0 : min(_3705, 1.0));
        float _818 = ((((1.0 - _809) * (_804 + 2.0)) * exp2(log2(isnan(1.0) ? _3683 : (isnan(_3683) ? 1.0 : min(_3683, 1.0))) * (_804 + 1.0))) + _809) * _731;
        float _819 = _699 * 0.5;
        float _820 = _709 * 0.5;
        float _821 = _719 * 0.5;
        float _822 = dot(vec3(_819, _820, _821), vec3(_819, _820, _821));
        float _827 = (_822 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_822);
        float _835 = (dot(vec3(_324, _325, _326), vec3(_827 * _819, _827 * _820, _827 * _821)) + 1.0) * 0.5;
        float _3716 = isnan(0.0) ? _835 : (isnan(_835) ? 0.0 : max(_835, 0.0));
        float _844 = sqrt(((_820 * _820) + (_819 * _819)) + (_821 * _821)) / (_732 + 9.9999997473787516355514526367188e-06);
        float _3727 = isnan(0.0) ? _844 : (isnan(_844) ? 0.0 : max(_844, 0.0));
        float _845 = isnan(1.0) ? _3727 : (isnan(_3727) ? 1.0 : min(_3727, 1.0));
        float _846 = _845 * 2.0;
        float _850 = (1.0 - _845) / (_845 + 1.0);
        float _3738 = isnan(0.0) ? _850 : (isnan(_850) ? 0.0 : max(_850, 0.0));
        float _851 = isnan(1.0) ? _3738 : (isnan(_3738) ? 1.0 : min(_3738, 1.0));
        float _860 = ((((1.0 - _851) * (_846 + 2.0)) * exp2(log2(isnan(1.0) ? _3716 : (isnan(_3716) ? 1.0 : min(_3716, 1.0))) * (_846 + 1.0))) + _851) * _732;
        _868 = _699;
        _870 = _698;
        _871 = _697;
        _872 = _709;
        _873 = _708;
        _874 = _707;
        _875 = _719;
        _876 = _718;
        _877 = _717;
        _878 = _732;
        _879 = _731;
        _880 = _730;
        _881 = cbModelParam._m0[36u].z * (isnan(0.0) ? _776 : (isnan(_776) ? 0.0 : max(_776, 0.0)));
        _882 = cbModelParam._m0[36u].z * (isnan(0.0) ? _818 : (isnan(_818) ? 0.0 : max(_818, 0.0)));
        _883 = cbModelParam._m0[36u].z * (isnan(0.0) ? _860 : (isnan(_860) ? 0.0 : max(_860, 0.0)));
    }
    else
    {
        _868 = _869;
        _870 = _869;
        _871 = _869;
        _872 = _869;
        _873 = _869;
        _874 = _869;
        _875 = _869;
        _876 = _869;
        _877 = _869;
        _878 = _869;
        _879 = _869;
        _880 = _869;
        _881 = 0.0;
        _882 = 0.0;
        _883 = 0.0;
    }
    float _1178;
    float _1179;
    float _1180;
    float _1181;
    float _1182;
    float _1183;
    float _1184;
    float _1185;
    float _1186;
    float _1187;
    float _1188;
    float _1189;
    float _1190;
    float _1191;
    float _1192;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _909 = fma(_566, cbModelParam._m0[30u].z, fma(_562, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _558));
        float _913 = fma(_566, cbModelParam._m0[31u].z, fma(_562, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _558));
        float _917 = fma(_566, cbModelParam._m0[32u].z, fma(_562, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _558));
        float _940 = _558 + _324;
        float _941 = _562 + _325;
        float _942 = _566 + _326;
        float _952 = fma(_942, cbModelParam._m0[30u].z, fma(_941, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _940)) - _909;
        float _953 = fma(_942, cbModelParam._m0[31u].z, fma(_941, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _940)) - _913;
        float _954 = fma(_942, cbModelParam._m0[32u].z, fma(_941, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _940)) - _917;
        float _958 = inversesqrt(dot(vec3(_952, _953, _954), vec3(_952, _953, _954)));
        float _971 = ((_958 * _952) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_909 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _972 = ((_958 * _953) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_913 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _973 = ((_958 * _954) / cbModelParam._m0[35u].z) + ((((((_917 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _975 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_971, _972, _973), 0.0);
        vec4 _982 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_971, _972, _973), 0.0);
        vec4 _989 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_971, _972, _973), 0.0);
        vec4 _996 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_971, _972, _973), 0.0);
        float _1008 = exp2((_975.w + (-0.5)) * 20.0) * 2.0;
        float _1009 = _1008 * (_975.x + (-0.5));
        float _1010 = _1008 * (_975.y + (-0.5));
        float _1011 = _1008 * (_975.z + (-0.5));
        float _1018 = exp2((_982.w + (-0.5)) * 20.0) * 2.0;
        float _1019 = _1018 * (_982.x + (-0.5));
        float _1020 = _1018 * (_982.y + (-0.5));
        float _1021 = _1018 * (_982.z + (-0.5));
        float _1028 = exp2((_989.w + (-0.5)) * 20.0) * 2.0;
        float _1029 = _1028 * (_989.x + (-0.5));
        float _1030 = _1028 * (_989.y + (-0.5));
        float _1031 = _1028 * (_989.z + (-0.5));
        float _1038 = exp2((_996.w + (-0.5)) * 20.0) * 2.0;
        float _1039 = _1038 * (_996.x + (-0.5));
        float _1040 = _1038 * (_996.y + (-0.5));
        float _1041 = _1038 * (_996.z + (-0.5));
        float _1042 = isnan(0.0) ? _1039 : (isnan(_1039) ? 0.0 : max(_1039, 0.0));
        float _1043 = isnan(0.0) ? _1040 : (isnan(_1040) ? 0.0 : max(_1040, 0.0));
        float _1044 = isnan(0.0) ? _1041 : (isnan(_1041) ? 0.0 : max(_1041, 0.0));
        float _1045 = _1009 * 0.5;
        float _1046 = _1019 * 0.5;
        float _1047 = _1029 * 0.5;
        float _1048 = dot(vec3(_1045, _1046, _1047), vec3(_1045, _1046, _1047));
        float _1053 = (_1048 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1048);
        float _1061 = (dot(vec3(_324, _325, _326), vec3(_1053 * _1045, _1053 * _1046, _1053 * _1047)) + 1.0) * 0.5;
        float _3779 = isnan(0.0) ? _1061 : (isnan(_1061) ? 0.0 : max(_1061, 0.0));
        float _1070 = sqrt(((_1046 * _1046) + (_1045 * _1045)) + (_1047 * _1047)) / (_1042 + 9.9999997473787516355514526367188e-06);
        float _3790 = isnan(0.0) ? _1070 : (isnan(_1070) ? 0.0 : max(_1070, 0.0));
        float _1071 = isnan(1.0) ? _3790 : (isnan(_3790) ? 1.0 : min(_3790, 1.0));
        float _1072 = _1071 * 2.0;
        float _1076 = (1.0 - _1071) / (_1071 + 1.0);
        float _3801 = isnan(0.0) ? _1076 : (isnan(_1076) ? 0.0 : max(_1076, 0.0));
        float _1077 = isnan(1.0) ? _3801 : (isnan(_3801) ? 1.0 : min(_3801, 1.0));
        float _1086 = ((((1.0 - _1077) * (_1072 + 2.0)) * exp2(log2(isnan(1.0) ? _3779 : (isnan(_3779) ? 1.0 : min(_3779, 1.0))) * (_1072 + 1.0))) + _1077) * _1042;
        float _1087 = _1010 * 0.5;
        float _1088 = _1020 * 0.5;
        float _1089 = _1030 * 0.5;
        float _1090 = dot(vec3(_1087, _1088, _1089), vec3(_1087, _1088, _1089));
        float _1095 = (_1090 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1090);
        float _1103 = (dot(vec3(_324, _325, _326), vec3(_1095 * _1087, _1095 * _1088, _1095 * _1089)) + 1.0) * 0.5;
        float _3812 = isnan(0.0) ? _1103 : (isnan(_1103) ? 0.0 : max(_1103, 0.0));
        float _1112 = sqrt(((_1088 * _1088) + (_1087 * _1087)) + (_1089 * _1089)) / (_1043 + 9.9999997473787516355514526367188e-06);
        float _3823 = isnan(0.0) ? _1112 : (isnan(_1112) ? 0.0 : max(_1112, 0.0));
        float _1113 = isnan(1.0) ? _3823 : (isnan(_3823) ? 1.0 : min(_3823, 1.0));
        float _1114 = _1113 * 2.0;
        float _1118 = (1.0 - _1113) / (_1113 + 1.0);
        float _3834 = isnan(0.0) ? _1118 : (isnan(_1118) ? 0.0 : max(_1118, 0.0));
        float _1119 = isnan(1.0) ? _3834 : (isnan(_3834) ? 1.0 : min(_3834, 1.0));
        float _1128 = ((((1.0 - _1119) * (_1114 + 2.0)) * exp2(log2(isnan(1.0) ? _3812 : (isnan(_3812) ? 1.0 : min(_3812, 1.0))) * (_1114 + 1.0))) + _1119) * _1043;
        float _1129 = _1011 * 0.5;
        float _1130 = _1021 * 0.5;
        float _1131 = _1031 * 0.5;
        float _1132 = dot(vec3(_1129, _1130, _1131), vec3(_1129, _1130, _1131));
        float _1137 = (_1132 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1132);
        float _1145 = (dot(vec3(_324, _325, _326), vec3(_1137 * _1129, _1137 * _1130, _1137 * _1131)) + 1.0) * 0.5;
        float _3845 = isnan(0.0) ? _1145 : (isnan(_1145) ? 0.0 : max(_1145, 0.0));
        float _1154 = sqrt(((_1130 * _1130) + (_1129 * _1129)) + (_1131 * _1131)) / (_1044 + 9.9999997473787516355514526367188e-06);
        float _3856 = isnan(0.0) ? _1154 : (isnan(_1154) ? 0.0 : max(_1154, 0.0));
        float _1155 = isnan(1.0) ? _3856 : (isnan(_3856) ? 1.0 : min(_3856, 1.0));
        float _1156 = _1155 * 2.0;
        float _1160 = (1.0 - _1155) / (_1155 + 1.0);
        float _3867 = isnan(0.0) ? _1160 : (isnan(_1160) ? 0.0 : max(_1160, 0.0));
        float _1161 = isnan(1.0) ? _3867 : (isnan(_3867) ? 1.0 : min(_3867, 1.0));
        float _1170 = ((((1.0 - _1161) * (_1156 + 2.0)) * exp2(log2(isnan(1.0) ? _3845 : (isnan(_3845) ? 1.0 : min(_3845, 1.0))) * (_1156 + 1.0))) + _1161) * _1044;
        _1178 = _1011;
        _1179 = _1010;
        _1180 = _1009;
        _1181 = _1021;
        _1182 = _1020;
        _1183 = _1019;
        _1184 = _1031;
        _1185 = _1030;
        _1186 = _1029;
        _1187 = _1044;
        _1188 = _1043;
        _1189 = _1042;
        _1190 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1086 : (isnan(_1086) ? 0.0 : max(_1086, 0.0)));
        _1191 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1128 : (isnan(_1128) ? 0.0 : max(_1128, 0.0)));
        _1192 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1170 : (isnan(_1170) ? 0.0 : max(_1170, 0.0)));
    }
    else
    {
        _1178 = _869;
        _1179 = _869;
        _1180 = _869;
        _1181 = _869;
        _1182 = _869;
        _1183 = _869;
        _1184 = _869;
        _1185 = _869;
        _1186 = _869;
        _1187 = _869;
        _1188 = _869;
        _1189 = _869;
        _1190 = 0.0;
        _1191 = 0.0;
        _1192 = 0.0;
    }
    float _1202 = (cbModelParam._m0[1u].x * (_1190 - _881)) + _881;
    float _1203 = (cbModelParam._m0[1u].x * (_1191 - _882)) + _882;
    float _1204 = (cbModelParam._m0[1u].x * (_1192 - _883)) + _883;
    float _1225 = fma(_1204, cbSceneParam._m0[89u].z, fma(_1203, cbSceneParam._m0[89u].y, _1202 * cbSceneParam._m0[89u].x));
    float _1228 = fma(_1204, cbSceneParam._m0[90u].z, fma(_1203, cbSceneParam._m0[90u].y, _1202 * cbSceneParam._m0[90u].x));
    float _1231 = fma(_1204, cbSceneParam._m0[91u].z, fma(_1203, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1202));
    float _1246 = _502 * 0.5;
    float _1247 = _503 * 0.5;
    float _1248 = _504 * 0.5;
    float _1249 = dot(vec4(_1246, _1247, _1248, 1.0), vec4(_1180, _1183, _1186, _1189));
    float _1252 = dot(vec4(_1246, _1247, _1248, 1.0), vec4(_1179, _1182, _1185, _1188));
    float _1255 = dot(vec4(_1246, _1247, _1248, 1.0), vec4(_1178, _1181, _1184, _1187));
    float _1289;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1262 = dot(vec4(_1246, _1247, _1248, 1.0), vec4(_868, _872, _875, _878));
        float _1266 = dot(vec4(_1246, _1247, _1248, 1.0), vec4(_870, _873, _876, _879));
        float _1270 = dot(vec4(_1246, _1247, _1248, 1.0), vec4(_871, _874, _877, _880));
        float _1277 = dot(vec4(cbModelParam._m0[39u]), vec4(_1246, _1247, _1248, 1.0));
        _1289 = dot(vec3(isnan(0.0) ? _1270 : (isnan(_1270) ? 0.0 : max(_1270, 0.0)), isnan(0.0) ? _1266 : (isnan(_1266) ? 0.0 : max(_1266, 0.0)), isnan(0.0) ? _1262 : (isnan(_1262) ? 0.0 : max(_1262, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1277) ? 0.0 : (isnan(0.0) ? _1277 : max(0.0, _1277))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1289 = 1.0;
    }
    float _1300;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1291 = dot(vec4(cbModelParam._m0[40u]), vec4(_1246, _1247, _1248, 1.0));
        _1300 = dot(vec3(isnan(0.0) ? _1249 : (isnan(_1249) ? 0.0 : max(_1249, 0.0)), isnan(0.0) ? _1252 : (isnan(_1252) ? 0.0 : max(_1252, 0.0)), isnan(0.0) ? _1255 : (isnan(_1255) ? 0.0 : max(_1255, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1291) ? 0.0 : (isnan(0.0) ? _1291 : max(0.0, _1291))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1300 = 1.0;
    }
    float _1304 = (_1300 * cbModelParam._m0[1u].x) + (_1289 * (1.0 - cbModelParam._m0[1u].x));
    float _1314 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _327);
    float _1315 = isnan(_1314) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1314 : min(cbModelParam._m0[25u].z, _1314));
    float _1397;
    float _1399;
    float _1401;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1364 = fma(_566, cbModelParam._m0[13u].z, fma(_562, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _558)) + cbModelParam._m0[13u].w;
        float _1368 = fma(_566, cbModelParam._m0[14u].z, fma(_562, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _558)) + cbModelParam._m0[14u].w;
        float _1372 = fma(_566, cbModelParam._m0[15u].z, fma(_562, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _558)) + cbModelParam._m0[15u].w;
        float _1375 = fma(_504, cbModelParam._m0[13u].z, fma(_503, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _502));
        float _1378 = fma(_504, cbModelParam._m0[14u].z, fma(_503, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _502));
        float _1381 = fma(_504, cbModelParam._m0[15u].z, fma(_503, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _502));
        float _1409;
        if (_1375 > 0.0)
        {
            _1409 = abs((1.0 - _1364) / _1375);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1375 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1364 + 1.0) / _1375);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1409 = frontier_phi_14_12_ladder;
        }
        float _1584;
        if (_1378 > 0.0)
        {
            _1584 = abs((1.0 - _1368) / _1378);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1378 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1368 + 1.0) / _1378);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1584 = frontier_phi_23_19_ladder;
        }
        float _1880;
        if (_1381 > 0.0)
        {
            _1880 = abs((1.0 - _1372) / _1381);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1381 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1372 + 1.0) / _1381);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _1880 = frontier_phi_35_30_ladder;
        }
        float _1882 = isnan(_1584) ? _1409 : (isnan(_1409) ? _1584 : min(_1409, _1584));
        float _1883 = isnan(_1880) ? _1882 : (isnan(_1882) ? _1880 : min(_1882, _1880));
        float _1887 = (_1883 * _1375) + _1364;
        float _1888 = (_1883 * _1378) + _1368;
        float _1889 = (_1883 * _1381) + _1372;
        float _1890 = _1883 * 9.9999997473787516355514526367188e-05;
        float _1892 = (-1.0) - _1890;
        float _1894 = _1890 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_1889 > _1894) || ((_1889 < _1892) || ((_1888 > _1894) || ((_1888 < _1892) || ((_1887 < _1892) || (_1887 > _1894))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2034 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1889, cbModelParam._m0[9u].z, fma(_1888, cbModelParam._m0[9u].y, _1887 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1889, cbModelParam._m0[10u].z, fma(_1888, cbModelParam._m0[10u].y, _1887 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1889, cbModelParam._m0[11u].z, fma(_1888, cbModelParam._m0[11u].y, _1887 * cbModelParam._m0[11u].x))), _1315);
            frontier_phi_13_35_ladder = _2034.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2034.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2034.x * cbModelParam._m0[1u].y;
        }
        _1397 = frontier_phi_13_35_ladder_2;
        _1399 = frontier_phi_13_35_ladder_1;
        _1401 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1385 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_502, _503, _504), _1315);
        _1397 = _1385.x * cbModelParam._m0[1u].y;
        _1399 = _1385.y * cbModelParam._m0[1u].y;
        _1401 = _1385.z * cbModelParam._m0[1u].y;
    }
    float _1405 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _327);
    float _1406 = isnan(_1405) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1405 : min(cbModelParam._m0[25u].w, _1405));
    float _1499;
    float _1501;
    float _1503;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1463 = fma(_566, cbModelParam._m0[21u].z, fma(_562, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _558)) + cbModelParam._m0[21u].w;
        float _1467 = fma(_566, cbModelParam._m0[22u].z, fma(_562, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _558)) + cbModelParam._m0[22u].w;
        float _1471 = fma(_566, cbModelParam._m0[23u].z, fma(_562, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _558)) + cbModelParam._m0[23u].w;
        float _1474 = fma(_504, cbModelParam._m0[21u].z, fma(_503, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _502));
        float _1477 = fma(_504, cbModelParam._m0[22u].z, fma(_503, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _502));
        float _1480 = fma(_504, cbModelParam._m0[23u].z, fma(_503, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _502));
        float _1589;
        if (_1474 > 0.0)
        {
            _1589 = abs((1.0 - _1463) / _1474);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1474 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1463 + 1.0) / _1474);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1589 = frontier_phi_25_21_ladder;
        }
        float _1907;
        if (_1477 > 0.0)
        {
            _1907 = abs((1.0 - _1467) / _1477);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1477 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1467 + 1.0) / _1477);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1907 = frontier_phi_37_32_ladder;
        }
        float _2245;
        if (_1480 > 0.0)
        {
            _2245 = abs((1.0 - _1471) / _1480);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1480 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1471 + 1.0) / _1480);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2245 = frontier_phi_47_44_ladder;
        }
        float _2247 = isnan(_1907) ? _1589 : (isnan(_1589) ? _1907 : min(_1589, _1907));
        float _2248 = isnan(_2245) ? _2247 : (isnan(_2247) ? _2245 : min(_2247, _2245));
        float _2252 = (_2248 * _1474) + _1463;
        float _2253 = (_2248 * _1477) + _1467;
        float _2254 = (_2248 * _1480) + _1471;
        float _2255 = _2248 * 9.9999997473787516355514526367188e-05;
        float _2256 = (-1.0) - _2255;
        float _2258 = _2255 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2254 > _2258) || ((_2254 < _2256) || ((_2253 > _2258) || ((_2253 < _2256) || ((_2252 < _2256) || (_2252 > _2258))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2376 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2254, cbModelParam._m0[17u].z, fma(_2253, cbModelParam._m0[17u].y, _2252 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2254, cbModelParam._m0[18u].z, fma(_2253, cbModelParam._m0[18u].y, _2252 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2254, cbModelParam._m0[19u].z, fma(_2253, cbModelParam._m0[19u].y, _2252 * cbModelParam._m0[19u].x))), _1406);
            frontier_phi_22_47_ladder = _2376.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2376.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2376.x * cbModelParam._m0[1u].z;
        }
        _1499 = frontier_phi_22_47_ladder_2;
        _1501 = frontier_phi_22_47_ladder_1;
        _1503 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1483 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_502, _503, _504), _1406);
        _1499 = _1483.x * cbModelParam._m0[1u].z;
        _1501 = _1483.y * cbModelParam._m0[1u].z;
        _1503 = _1483.z * cbModelParam._m0[1u].z;
    }
    float _1516 = (((_529 * _479) + _530) * _494) * ((cbModelParam._m0[1u].w * (_1499 - _1397)) + _1397);
    float _1518 = (((_529 * _481) + _530) * _494) * ((cbModelParam._m0[1u].w * (_1501 - _1399)) + _1399);
    float _1520 = (((_529 * _482) + _530) * _494) * ((cbModelParam._m0[1u].w * (_1503 - _1401)) + _1401);
    float _1523 = fma(_1520, cbSceneParam._m0[89u].z, fma(_1518, cbSceneParam._m0[89u].y, _1516 * cbSceneParam._m0[89u].x));
    float _1526 = fma(_1520, cbSceneParam._m0[90u].z, fma(_1518, cbSceneParam._m0[90u].y, _1516 * cbSceneParam._m0[90u].x));
    float _1529 = fma(_1520, cbSceneParam._m0[91u].z, fma(_1518, cbSceneParam._m0[91u].y, _1516 * cbSceneParam._m0[91u].x));
    float _1563 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1567 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1571 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1575 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1576 = _1563 / _1575;
    float _1577 = _1567 / _1575;
    float _1578 = _1571 / _1575;
    float _1725;
    float _1726;
    float _1727;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1605 = ((uint(_1578 > cbSceneParam._m0[59u].y) + uint(_1578 > cbSceneParam._m0[59u].x)) + uint(_1578 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1606 = _1605 + 43u;
        uint _1614 = _1605 + 44u;
        uint _1622 = _1605 + 45u;
        uint _1630 = _1605 + 46u;
        float _1641 = fma(_1575, cbSceneParam._m0[_1606].w, fma(_1571, cbSceneParam._m0[_1606].z, fma(_1567, cbSceneParam._m0[_1606].y, _1563 * cbSceneParam._m0[_1606].x)));
        float _1645 = fma(_1575, cbSceneParam._m0[_1614].w, fma(_1571, cbSceneParam._m0[_1614].z, fma(_1567, cbSceneParam._m0[_1614].y, _1563 * cbSceneParam._m0[_1614].x)));
        float _1653 = fma(_1575, cbSceneParam._m0[_1630].w, fma(_1571, cbSceneParam._m0[_1630].z, fma(_1567, cbSceneParam._m0[_1630].y, _1563 * cbSceneParam._m0[_1630].x)));
        float _1658 = cbSceneParam._m0[33u].z * _1653;
        float _1660 = cbSceneParam._m0[33u].w * _1653;
        float _1663 = fma(_1575, cbSceneParam._m0[_1622].w, fma(_1571, cbSceneParam._m0[_1622].z, fma(_1567, cbSceneParam._m0[_1622].y, _1563 * cbSceneParam._m0[_1622].x))) / _1653;
        float _1711 = (cbSceneParam._m0[33u].x - sqrt(((_1577 * _1577) + (_1576 * _1576)) + (_1578 * _1578))) * cbSceneParam._m0[33u].y;
        float _3993 = isnan(0.0) ? _1711 : (isnan(_1711) ? 0.0 : max(_1711, 0.0));
        float _1718 = (isnan(1.0) ? _3993 : (isnan(_3993) ? 1.0 : min(_3993, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1658 + _1641) / _1653, (_1660 + _1645) / _1653), _1663), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1660 + _1641) / _1653, (_1645 - _1658) / _1653), _1663), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1641 - _1658) / _1653, (_1645 - _1660) / _1653), _1663), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1641 - _1660) / _1653, (_1658 + _1645) / _1653), _1663), 0.0)).x), vec4(0.25)));
        _1725 = 1.0 - (_1718 * cbSceneParam._m0[34u].x);
        _1726 = 1.0 - (_1718 * cbSceneParam._m0[34u].y);
        _1727 = 1.0 - (_1718 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1725 = 1.0;
        _1726 = 1.0;
        _1727 = 1.0;
    }
    float _1791;
    float _1793;
    float _1795;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1779 = fma(_1575, cbSceneParam._m0[63u].w, fma(_1571, cbSceneParam._m0[63u].z, fma(_1567, cbSceneParam._m0[63u].y, _1563 * cbSceneParam._m0[63u].x)));
        float _1780 = fma(_1575, cbSceneParam._m0[60u].w, fma(_1571, cbSceneParam._m0[60u].z, fma(_1567, cbSceneParam._m0[60u].y, _1563 * cbSceneParam._m0[60u].x))) / _1779;
        float _1781 = fma(_1575, cbSceneParam._m0[61u].w, fma(_1571, cbSceneParam._m0[61u].z, fma(_1567, cbSceneParam._m0[61u].y, _1563 * cbSceneParam._m0[61u].x))) / _1779;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_1780 >= cbSceneParam._m0[64u].x) && (_1781 >= cbSceneParam._m0[64u].y)) && (_1780 <= cbSceneParam._m0[64u].z)) && (_1781 <= cbSceneParam._m0[64u].w))
        {
            float _1920 = fma(_1575, cbSceneParam._m0[62u].w, fma(_1571, cbSceneParam._m0[62u].z, fma(_1567, cbSceneParam._m0[62u].y, _1563 * cbSceneParam._m0[62u].x))) / _1779;
            float _1924 = isnan(cbSceneParam._m0[41u].w) ? _1920 : (isnan(_1920) ? cbSceneParam._m0[41u].w : max(_1920, cbSceneParam._m0[41u].w));
            float _1967 = (cbSceneParam._m0[33u].x - sqrt(((_1577 * _1577) + (_1576 * _1576)) + (_1578 * _1578))) * cbSceneParam._m0[33u].y;
            float _4009 = isnan(0.0) ? _1967 : (isnan(_1967) ? 0.0 : max(_1967, 0.0));
            float _1974 = (isnan(1.0) ? _4009 : (isnan(_4009) ? 1.0 : min(_4009, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1780, cbSceneParam._m0[33u].w + _1781), _1924), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1780, _1781 - cbSceneParam._m0[33u].z), _1924), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1780 - cbSceneParam._m0[33u].z, _1781 - cbSceneParam._m0[33u].w), _1924), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1780 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1781), _1924), 0.0)).x), vec4(0.25)));
            float _1978 = 1.0 - (_1974 * cbSceneParam._m0[34u].x);
            float _1979 = 1.0 - (_1974 * cbSceneParam._m0[34u].y);
            float _1980 = 1.0 - (_1974 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_1980) ? _1727 : (isnan(_1727) ? _1980 : min(_1727, _1980));
            frontier_phi_34_33_ladder_1 = isnan(_1979) ? _1726 : (isnan(_1726) ? _1979 : min(_1726, _1979));
            frontier_phi_34_33_ladder_2 = isnan(_1978) ? _1725 : (isnan(_1725) ? _1978 : min(_1725, _1978));
        }
        else
        {
            frontier_phi_34_33_ladder = _1727;
            frontier_phi_34_33_ladder_1 = _1726;
            frontier_phi_34_33_ladder_2 = _1725;
        }
        _1791 = frontier_phi_34_33_ladder_2;
        _1793 = frontier_phi_34_33_ladder_1;
        _1795 = frontier_phi_34_33_ladder;
    }
    else
    {
        _1791 = _1725;
        _1793 = _1726;
        _1795 = _1727;
    }
    uvec4 _1800 = floatBitsToUint(cbInstanceData._m0[_454 + 5u]);
    uint _1802 = _1800.x * 14u;
    uint _1803 = _1802 + 13u;
    float _1810 = _494 + (-1.0);
    float _1815 = (cbLight._m0[_1803].x * _1810) + 1.0;
    float _1816 = (cbLight._m0[_1803].y * _1810) + 1.0;
    float _1817 = (cbLight._m0[_1803].z * _1810) + 1.0;
    float _1818 = (cbLight._m0[_1803].w * _1810) + 1.0;
    uint _1819 = _1802 + 5u;
    float _1825 = isnan(1.0) ? _1816 : (isnan(_1816) ? 1.0 : min(_1816, 1.0));
    uint _1829 = _1802 + 4u;
    float _1839 = isnan(1.0) ? _1815 : (isnan(_1815) ? 1.0 : min(_1815, 1.0));
    uint _1843 = _1802 | 1u;
    float _1854 = dot(vec3(cbLight._m0[_1802].xyz), vec3(_324, _325, _326));
    float _1857 = dot(vec3(cbLight._m0[_1843].xyz), vec3(_324, _325, _326));
    float _4045 = isnan(0.0) ? _1854 : (isnan(_1854) ? 0.0 : max(_1854, 0.0));
    float _4056 = isnan(0.0) ? _1857 : (isnan(_1857) ? 0.0 : max(_1857, 0.0));
    float _1862 = (isnan(1.0) ? _4045 : (isnan(_4045) ? 1.0 : min(_4045, 1.0))) * 0.3183098733425140380859375;
    float _1864 = (isnan(1.0) ? _4056 : (isnan(_4056) ? 1.0 : min(_4056, 1.0))) * 0.3183098733425140380859375;
    float _1871 = ((cbLight._m0[_1819].x * _1825) * _1864) + (((cbLight._m0[_1829].x * _1791) * _1839) * _1862);
    float _1872 = ((_1825 * cbLight._m0[_1819].y) * _1864) + (((cbLight._m0[_1829].y * _1793) * _1839) * _1862);
    float _1873 = ((_1825 * cbLight._m0[_1819].z) * _1864) + (((cbLight._m0[_1829].z * _1795) * _1839) * _1862);
    uvec4 _1877 = floatBitsToUint(cbLight._m0[_1802 + 12u]);
    bool _1879 = _1877.x == 0u;
    float _1981;
    float _1983;
    float _1985;
    if (_1879)
    {
        _1981 = _1871;
        _1983 = _1872;
        _1985 = _1873;
    }
    else
    {
        uint _1989 = _1802 + 6u;
        float _2005 = (dot(vec3(cbLight._m0[_1802 + 2u].xyz), vec3(_324, _325, _326)) * 0.5) + 0.5;
        float _2006 = _2005 * _2005;
        float _4067 = isnan(0.0) ? _2006 : (isnan(_2006) ? 0.0 : max(_2006, 0.0));
        float _2007 = isnan(1.0) ? _4067 : (isnan(_4067) ? 1.0 : min(_4067, 1.0));
        float _2008 = isnan(1.0) ? _1817 : (isnan(_1817) ? 1.0 : min(_1817, 1.0));
        _1981 = (((cbLight._m0[_1989].x * 0.3183098733425140380859375) * _2007) * _2008) + _1871;
        _1983 = (((cbLight._m0[_1989].y * 0.3183098733425140380859375) * _2007) * _2008) + _1872;
        _1985 = (((cbLight._m0[_1989].z * 0.3183098733425140380859375) * _2007) * _2008) + _1873;
    }
    bool _1988 = _1877.y == 0u;
    float _2043;
    float _2045;
    float _2047;
    if (_1988)
    {
        _2043 = _1981;
        _2045 = _1983;
        _2047 = _1985;
    }
    else
    {
        uint _2216 = _1802 + 7u;
        float _2232 = (dot(vec3(cbLight._m0[_1802 + 3u].xyz), vec3(_324, _325, _326)) * 0.5) + 0.5;
        float _2233 = _2232 * _2232;
        float _4083 = isnan(0.0) ? _2233 : (isnan(_2233) ? 0.0 : max(_2233, 0.0));
        float _2234 = isnan(1.0) ? _4083 : (isnan(_4083) ? 1.0 : min(_4083, 1.0));
        float _2235 = isnan(1.0) ? _1818 : (isnan(_1818) ? 1.0 : min(_1818, 1.0));
        _2043 = (((cbLight._m0[_2216].x * 0.3183098733425140380859375) * _2234) * _2235) + _1981;
        _2045 = (((cbLight._m0[_2216].y * 0.3183098733425140380859375) * _2234) * _2235) + _1983;
        _2047 = (((cbLight._m0[_2216].z * 0.3183098733425140380859375) * _2234) * _2235) + _1985;
    }
    uint _2050 = _1802 + 8u;
    float _2063 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1802].w)) * _327) * 0.949999988079071044921875);
    float _2064 = _2063 * _2063;
    float _2065 = cbLight._m0[_1802].x + _405;
    float _2066 = cbLight._m0[_1802].y + _406;
    float _2067 = cbLight._m0[_1802].z + _407;
    float _2071 = inversesqrt(dot(vec3(_2065, _2066, _2067), vec3(_2065, _2066, _2067)));
    float _2072 = _2071 * _2065;
    float _2073 = _2071 * _2066;
    float _2074 = _2071 * _2067;
    float _2075 = dot(vec3(_324, _325, _326), vec3(cbLight._m0[_1802].xyz));
    float _4099 = isnan(0.0) ? _2075 : (isnan(_2075) ? 0.0 : max(_2075, 0.0));
    float _2078 = isnan(1.0) ? _4099 : (isnan(_4099) ? 1.0 : min(_4099, 1.0));
    float _4110 = isnan(0.0) ? _495 : (isnan(_495) ? 0.0 : max(_495, 0.0));
    float _2079 = isnan(1.0) ? _4110 : (isnan(_4110) ? 1.0 : min(_4110, 1.0));
    float _2080 = dot(vec3(_324, _325, _326), vec3(_2072, _2073, _2074));
    float _4121 = isnan(0.0) ? _2080 : (isnan(_2080) ? 0.0 : max(_2080, 0.0));
    float _2083 = isnan(1.0) ? _4121 : (isnan(_4121) ? 1.0 : min(_4121, 1.0));
    float _2084 = dot(vec3(cbLight._m0[_1802].xyz), vec3(_2072, _2073, _2074));
    float _4132 = isnan(0.0) ? _2084 : (isnan(_2084) ? 0.0 : max(_2084, 0.0));
    float _2088 = _2064 * _2064;
    float _2092 = ((_2083 * _2083) * (_2088 + (-1.0))) + 1.0;
    float _2100 = exp2(log2(1.0 - (isnan(1.0) ? _4132 : (isnan(_4132) ? 1.0 : min(_4132, 1.0)))) * 5.0);
    float _2101 = 0.959999978542327880859375 - _476;
    float _2103 = 0.959999978542327880859375 - _477;
    float _2104 = 0.959999978542327880859375 - _478;
    float _2111 = 1.0 - _2064;
    float _2122 = (0.5 / (((_2079 * ((_2078 * _2111) + _2064)) + 9.9999999392252902907785028219223e-09) + (((_2079 * _2111) + _2064) * _2078))) * _2078;
    float _4143 = isnan(0.0) ? _2122 : (isnan(_2122) ? 0.0 : max(_2122, 0.0));
    float _2124 = (isnan(1.0) ? _4143 : (isnan(_4143) ? 1.0 : min(_4143, 1.0))) * (_2088 / ((_2092 * _2092) * 3.141590118408203125));
    uint _2138 = _1802 + 9u;
    float _2149 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1843].w)) * _327) * 0.949999988079071044921875);
    float _2150 = _2149 * _2149;
    float _2151 = cbLight._m0[_1843].x + _405;
    float _2152 = cbLight._m0[_1843].y + _406;
    float _2153 = cbLight._m0[_1843].z + _407;
    float _2157 = inversesqrt(dot(vec3(_2151, _2152, _2153), vec3(_2151, _2152, _2153)));
    float _2158 = _2157 * _2151;
    float _2159 = _2157 * _2152;
    float _2160 = _2157 * _2153;
    float _2161 = dot(vec3(_324, _325, _326), vec3(cbLight._m0[_1843].xyz));
    float _4154 = isnan(0.0) ? _2161 : (isnan(_2161) ? 0.0 : max(_2161, 0.0));
    float _2164 = isnan(1.0) ? _4154 : (isnan(_4154) ? 1.0 : min(_4154, 1.0));
    float _2165 = dot(vec3(_324, _325, _326), vec3(_2158, _2159, _2160));
    float _4165 = isnan(0.0) ? _2165 : (isnan(_2165) ? 0.0 : max(_2165, 0.0));
    float _2168 = isnan(1.0) ? _4165 : (isnan(_4165) ? 1.0 : min(_4165, 1.0));
    float _2169 = dot(vec3(cbLight._m0[_1843].xyz), vec3(_2158, _2159, _2160));
    float _4176 = isnan(0.0) ? _2169 : (isnan(_2169) ? 0.0 : max(_2169, 0.0));
    float _2173 = _2150 * _2150;
    float _2177 = ((_2168 * _2168) * (_2173 + (-1.0))) + 1.0;
    float _2184 = exp2(log2(1.0 - (isnan(1.0) ? _4176 : (isnan(_4176) ? 1.0 : min(_4176, 1.0)))) * 5.0);
    float _2191 = 1.0 - _2150;
    float _2201 = (0.5 / (((_2079 * ((_2164 * _2191) + _2150)) + 9.9999999392252902907785028219223e-09) + (((_2079 * _2191) + _2150) * _2164))) * _2164;
    float _4187 = isnan(0.0) ? _2201 : (isnan(_2201) ? 0.0 : max(_2201, 0.0));
    float _2203 = (isnan(1.0) ? _4187 : (isnan(_4187) ? 1.0 : min(_4187, 1.0))) * (_2173 / ((_2177 * _2177) * 3.141590118408203125));
    float _2213 = (((((_2184 * _2101) + _479) * cbLight._m0[_2138].x) * _2203) * _1825) + ((((cbLight._m0[_2050].x * _1791) * ((_2100 * _2101) + _479)) * _2124) * _1839);
    float _2214 = (((((_2184 * _2103) + _481) * cbLight._m0[_2138].y) * _2203) * _1825) + ((((cbLight._m0[_2050].y * _1793) * ((_2100 * _2103) + _481)) * _2124) * _1839);
    float _2215 = (((((_2184 * _2104) + _482) * cbLight._m0[_2138].z) * _2203) * _1825) + ((((cbLight._m0[_2050].z * _1795) * ((_2100 * _2104) + _482)) * _2124) * _1839);
    float _2271;
    float _2273;
    float _2275;
    if (_1879)
    {
        _2271 = _2213;
        _2273 = _2214;
        _2275 = _2215;
    }
    else
    {
        uint _2277 = _1802 + 2u;
        uint _2281 = _1802 + 10u;
        float _2295 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2277].w)) * _327) * 0.949999988079071044921875);
        float _2296 = _2295 * _2295;
        float _2297 = cbLight._m0[_2277].x + _405;
        float _2298 = cbLight._m0[_2277].y + _406;
        float _2299 = cbLight._m0[_2277].z + _407;
        float _2303 = inversesqrt(dot(vec3(_2297, _2298, _2299), vec3(_2297, _2298, _2299)));
        float _2304 = _2303 * _2297;
        float _2305 = _2303 * _2298;
        float _2306 = _2303 * _2299;
        float _2307 = dot(vec3(_324, _325, _326), vec3(cbLight._m0[_2277].xyz));
        float _4198 = isnan(0.0) ? _2307 : (isnan(_2307) ? 0.0 : max(_2307, 0.0));
        float _2310 = isnan(1.0) ? _4198 : (isnan(_4198) ? 1.0 : min(_4198, 1.0));
        float _2311 = dot(vec3(_324, _325, _326), vec3(_2304, _2305, _2306));
        float _4209 = isnan(0.0) ? _2311 : (isnan(_2311) ? 0.0 : max(_2311, 0.0));
        float _2314 = isnan(1.0) ? _4209 : (isnan(_4209) ? 1.0 : min(_4209, 1.0));
        float _2315 = dot(vec3(cbLight._m0[_2277].xyz), vec3(_2304, _2305, _2306));
        float _4220 = isnan(0.0) ? _2315 : (isnan(_2315) ? 0.0 : max(_2315, 0.0));
        float _2319 = _2296 * _2296;
        float _2323 = ((_2314 * _2314) * (_2319 + (-1.0))) + 1.0;
        float _2330 = exp2(log2(1.0 - (isnan(1.0) ? _4220 : (isnan(_4220) ? 1.0 : min(_4220, 1.0)))) * 5.0);
        float _2337 = 1.0 - _2296;
        float _2347 = (0.5 / (((_2079 * ((_2310 * _2337) + _2296)) + 9.9999999392252902907785028219223e-09) + (((_2079 * _2337) + _2296) * _2310))) * _2310;
        float _4231 = isnan(0.0) ? _2347 : (isnan(_2347) ? 0.0 : max(_2347, 0.0));
        float _2349 = (isnan(1.0) ? _4231 : (isnan(_4231) ? 1.0 : min(_4231, 1.0))) * (_2319 / ((_2323 * _2323) * 3.141590118408203125));
        float _2350 = isnan(1.0) ? _1817 : (isnan(_1817) ? 1.0 : min(_1817, 1.0));
        _2271 = (((((_2330 * _2101) + _479) * cbLight._m0[_2281].x) * _2349) * _2350) + _2213;
        _2273 = (((((_2330 * _2103) + _481) * cbLight._m0[_2281].y) * _2349) * _2350) + _2214;
        _2275 = (((((_2330 * _2104) + _482) * cbLight._m0[_2281].z) * _2349) * _2350) + _2215;
    }
    float _2381;
    float _2383;
    float _2385;
    if (_1988)
    {
        _2381 = _2271;
        _2383 = _2273;
        _2385 = _2275;
    }
    else
    {
        uint _2392 = _1802 + 3u;
        uint _2396 = _1802 + 11u;
        float _2410 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2392].w)) * _327) * 0.949999988079071044921875);
        float _2411 = _2410 * _2410;
        float _2412 = cbLight._m0[_2392].x + _405;
        float _2413 = cbLight._m0[_2392].y + _406;
        float _2414 = cbLight._m0[_2392].z + _407;
        float _2418 = inversesqrt(dot(vec3(_2412, _2413, _2414), vec3(_2412, _2413, _2414)));
        float _2419 = _2418 * _2412;
        float _2420 = _2418 * _2413;
        float _2421 = _2418 * _2414;
        float _2422 = dot(vec3(_324, _325, _326), vec3(cbLight._m0[_2392].xyz));
        float _4247 = isnan(0.0) ? _2422 : (isnan(_2422) ? 0.0 : max(_2422, 0.0));
        float _2425 = isnan(1.0) ? _4247 : (isnan(_4247) ? 1.0 : min(_4247, 1.0));
        float _2426 = dot(vec3(_324, _325, _326), vec3(_2419, _2420, _2421));
        float _4258 = isnan(0.0) ? _2426 : (isnan(_2426) ? 0.0 : max(_2426, 0.0));
        float _2429 = isnan(1.0) ? _4258 : (isnan(_4258) ? 1.0 : min(_4258, 1.0));
        float _2430 = dot(vec3(cbLight._m0[_2392].xyz), vec3(_2419, _2420, _2421));
        float _4269 = isnan(0.0) ? _2430 : (isnan(_2430) ? 0.0 : max(_2430, 0.0));
        float _2434 = _2411 * _2411;
        float _2438 = ((_2429 * _2429) * (_2434 + (-1.0))) + 1.0;
        float _2445 = exp2(log2(1.0 - (isnan(1.0) ? _4269 : (isnan(_4269) ? 1.0 : min(_4269, 1.0)))) * 5.0);
        float _2452 = 1.0 - _2411;
        float _2462 = (0.5 / (((_2079 * ((_2425 * _2452) + _2411)) + 9.9999999392252902907785028219223e-09) + (((_2079 * _2452) + _2411) * _2425))) * _2425;
        float _4280 = isnan(0.0) ? _2462 : (isnan(_2462) ? 0.0 : max(_2462, 0.0));
        float _2464 = (isnan(1.0) ? _4280 : (isnan(_4280) ? 1.0 : min(_4280, 1.0))) * (_2434 / ((_2438 * _2438) * 3.141590118408203125));
        float _2465 = isnan(1.0) ? _1818 : (isnan(_1818) ? 1.0 : min(_1818, 1.0));
        _2381 = (((((_2445 * _2101) + _479) * cbLight._m0[_2396].x) * _2464) * _2465) + _2271;
        _2383 = (((((_2445 * _2103) + _481) * cbLight._m0[_2396].y) * _2464) * _2465) + _2273;
        _2385 = (((((_2445 * _2104) + _482) * cbLight._m0[_2396].z) * _2464) * _2465) + _2275;
    }
    float _2531;
    float _2533;
    float _2535;
    float _2537;
    float _2539;
    float _2541;
    if (_1800.y == 0u)
    {
        uvec4 _2486 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2487 = _2486.x;
        uint _2498 = uint((float(_2486.y) * floor(float(uint(cbSceneParam._m0[85u].y * _414) / _2487))) + floor(float(uint(cbSceneParam._m0[85u].x * _413) / _2487)));
        float _2508 = (log2(_1578 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2509 = isnan(0.0) ? _2508 : (isnan(_2508) ? 0.0 : max(_2508, 0.0));
        uint _2512 = uint(isnan(14.0) ? _2509 : (isnan(_2509) ? 14.0 : min(_2509, 14.0)));
        uvec4 _2517 = texelFetch(g_lightClusterGridBuffer, int(((_2512 << 2u) + (_2498 << 6u)) >> 2u));
        uint _2518 = _2517.x;
        uint _2519 = _2486.z;
        float _2627;
        float _2629;
        float _2631;
        float _2633;
        float _2635;
        float _2637;
        if (((((1u << ((_2519 >> 4u) & 15u)) + 4294967295u) & _2518) == 0u) || ((_2519 & 240u) == 0u))
        {
            _2627 = 0.0;
            _2629 = 0.0;
            _2631 = 0.0;
            _2633 = 0.0;
            _2635 = 0.0;
            _2637 = 0.0;
        }
        else
        {
            float _2628;
            float _2630;
            float _2632;
            float _2634;
            float _2636;
            float _2638;
            float _2780 = 0.0;
            float _2781 = 0.0;
            float _2782 = 0.0;
            float _2783 = 0.0;
            float _2784 = 0.0;
            float _2785 = 0.0;
            uint _2786 = 0u;
            uint _2795;
            bool _2796;
            for (;;)
            {
                _2795 = texelFetch(g_lightClassification, int((((_2512 << 5u) + (_2498 << 9u)) + (_2786 << 2u)) >> 2u)).x;
                _2796 = _2795 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2796)
                {
                    frontier_phi_66_pred = _2785;
                    frontier_phi_66_pred_1 = _2784;
                    frontier_phi_66_pred_2 = _2783;
                    frontier_phi_66_pred_3 = _2782;
                    frontier_phi_66_pred_4 = _2781;
                    frontier_phi_66_pred_5 = _2780;
                }
                else
                {
                    float _2904;
                    float _2905;
                    float _2906;
                    float _2907;
                    float _2908;
                    float _2909;
                    uint _2910;
                    _2904 = _2780;
                    _2905 = _2781;
                    _2906 = _2782;
                    _2907 = _2783;
                    _2908 = _2784;
                    _2909 = _2785;
                    _2910 = _2795;
                    float _2836;
                    float _2837;
                    float _2838;
                    float _2839;
                    float _2840;
                    float _2841;
                    for (;;)
                    {
                        uint _2914 = uint(findLSB(_2910)) + (_2786 << 5u);
                        uint _2911 = (_2910 + 4294967295u) & _2910;
                        uint _2916 = _2914 * 48u;
                        vec4 _2930 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2916)).x, texelFetch(g_PointLightRenderingBuffer, int(_2916 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2916 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2916 + 3u)).x));
                        uint _2936 = (_2914 * 48u) + 4u;
                        vec4 _2949 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2936)).x, texelFetch(g_PointLightRenderingBuffer, int(_2936 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2936 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2936 + 3u)).x));
                        uint _2955 = (_2914 * 48u) + 8u;
                        vec3 _2966 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2955)).x, texelFetch(g_PointLightRenderingBuffer, int(_2955 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2955 + 2u)).x));
                        float _2970 = _2930.x - _1576;
                        float _2971 = _2930.y - _1577;
                        float _2972 = _2930.z - _1578;
                        float _2973 = dot(vec3(_2970, _2971, _2972), vec3(_2970, _2971, _2972));
                        float _2976 = inversesqrt(_2973);
                        float _2977 = _2976 * _2970;
                        float _2978 = _2976 * _2971;
                        float _2979 = _2976 * _2972;
                        float _2980 = dot(vec3(_435, _438, _441), vec3(_2977, _2978, _2979));
                        float _2985 = 1.0 - (_2973 * _2930.w);
                        float _4306 = isnan(0.0) ? _2985 : (isnan(_2985) ? 0.0 : max(_2985, 0.0));
                        float _2986 = isnan(1.0) ? _4306 : (isnan(_4306) ? 1.0 : min(_4306, 1.0));
                        float _2987 = sqrt(_2973) * _2949.w;
                        float _2990 = 1.39999997615814208984375 / (_2987 + 1.39999997615814208984375);
                        float _2991 = _2990 * _2990;
                        float _2994 = ((1.0 - _2991) * _2980) + _2991;
                        float _2997 = _2987 * _2987;
                        float _3001 = ((isnan(0.0) ? _2994 : (isnan(_2994) ? 0.0 : max(_2994, 0.0))) * _2986) / ((_2997 * 0.699999988079071044921875) + 1.0);
                        float _3005 = (-0.0) - _1576;
                        float _3006 = (-0.0) - _1577;
                        float _3007 = (-0.0) - _1578;
                        float _3011 = inversesqrt(dot(vec3(_3005, _3006, _3007), vec3(_3005, _3006, _3007)));
                        float _3012 = _3011 * _3005;
                        float _3013 = _3011 * _3006;
                        float _3014 = _3011 * _3007;
                        float _3021 = exp2(log2(1.0 / ((_2997 * 3.5) + 5.0)) * 0.25);
                        float _3022 = 1.0 - _510;
                        float _3029 = sqrt(1.0 - ((1.0 - (_3022 * _3022)) * (1.0 - (_3021 * _3021))));
                        float _3030 = _3029 * _3029;
                        float _3031 = _3030 * _3030;
                        float _3032 = _3012 + _2977;
                        float _3033 = _3013 + _2978;
                        float _3034 = _3014 + _2979;
                        float _3038 = inversesqrt(dot(vec3(_3032, _3033, _3034), vec3(_3032, _3033, _3034)));
                        float _3042 = dot(vec3(_435, _438, _441), vec3(_3012, _3013, _3014));
                        float _4322 = isnan(0.0) ? _3042 : (isnan(_3042) ? 0.0 : max(_3042, 0.0));
                        float _3045 = isnan(1.0) ? _4322 : (isnan(_4322) ? 1.0 : min(_4322, 1.0));
                        float _3046 = dot(vec3(_435, _438, _441), vec3(_3038 * _3032, _3038 * _3033, _3038 * _3034));
                        float _4333 = isnan(0.0) ? _3046 : (isnan(_3046) ? 0.0 : max(_3046, 0.0));
                        float _3049 = isnan(1.0) ? _4333 : (isnan(_4333) ? 1.0 : min(_4333, 1.0));
                        float _3053 = ((_3049 * _3049) * (_3031 + (-1.0))) + 1.0;
                        float _3054 = _2990 * _3030;
                        float _3055 = _3054 * _3054;
                        float _3058 = ((1.0 - _3055) * _2980) + _3055;
                        float _4344 = isnan(0.0) ? _3058 : (isnan(_3058) ? 0.0 : max(_3058, 0.0));
                        float _3059 = isnan(1.0) ? _4344 : (isnan(_4344) ? 1.0 : min(_4344, 1.0));
                        float _3060 = 1.0 - _3030;
                        float _3070 = (0.5 / (((_3059 * ((_3045 * _3060) + _3030)) + 9.9999999392252902907785028219223e-09) + (((_3059 * _3060) + _3030) * _3045))) * _3059;
                        float _4355 = isnan(0.0) ? _3070 : (isnan(_3070) ? 0.0 : max(_3070, 0.0));
                        float _3081 = (((_3031 * 3.1415927410125732421875) * (isnan(1.0) ? _4355 : (isnan(_4355) ? 1.0 : min(_4355, 1.0)))) / ((_3053 * _3053) * ((_2997 * 2.1991131305694580078125) + 3.141590118408203125))) * _2986;
                        _2839 = (_3001 * _2949.x) + _2907;
                        _2840 = (_3001 * _2949.y) + _2908;
                        _2841 = (_3001 * _2949.z) + _2909;
                        _2836 = (_3081 * _2966.x) + _2904;
                        _2837 = (_3081 * _2966.y) + _2905;
                        _2838 = (_3081 * _2966.z) + _2906;
                        if (_2911 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2904 = _2836;
                            _2905 = _2837;
                            _2906 = _2838;
                            _2907 = _2839;
                            _2908 = _2840;
                            _2909 = _2841;
                            _2910 = _2911;
                        }
                    }
                    frontier_phi_66_pred = _2841;
                    frontier_phi_66_pred_1 = _2840;
                    frontier_phi_66_pred_2 = _2839;
                    frontier_phi_66_pred_3 = _2838;
                    frontier_phi_66_pred_4 = _2837;
                    frontier_phi_66_pred_5 = _2836;
                }
                _2638 = frontier_phi_66_pred;
                _2636 = frontier_phi_66_pred_1;
                _2634 = frontier_phi_66_pred_2;
                _2632 = frontier_phi_66_pred_3;
                _2630 = frontier_phi_66_pred_4;
                _2628 = frontier_phi_66_pred_5;
                uint _2787 = _2786 + 1u;
                if (_2787 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2780 = _2628;
                    _2781 = _2630;
                    _2782 = _2632;
                    _2783 = _2634;
                    _2784 = _2636;
                    _2785 = _2638;
                    _2786 = _2787;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2627 = _2628;
            _2629 = _2630;
            _2631 = _2632;
            _2633 = _2634;
            _2635 = _2636;
            _2637 = _2638;
        }
        uvec4 _2641 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2642 = _2641.z;
        uint _2644 = (_2642 >> 8u) & 15u;
        float _2748;
        float _2750;
        float _2752;
        float _2754;
        float _2756;
        float _2758;
        if (((4294967295u << _2644) & _2518) == 0u)
        {
            _2748 = _2627;
            _2750 = _2629;
            _2752 = _2631;
            _2754 = _2633;
            _2756 = _2635;
            _2758 = _2637;
        }
        else
        {
            float _2773 = inversesqrt(dot(vec3(_1576, _1577, _1578), vec3(_1576, _1577, _1578)));
            float _2774 = _2773 * _1576;
            float _2775 = _2773 * _1577;
            float _2776 = _2773 * _1578;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2644 < ((_2642 >> 12u) & 15u))
            {
                float _2749;
                float _2751;
                float _2753;
                float _2755;
                float _2757;
                float _2759;
                float _2887 = _2627;
                float _2888 = _2629;
                float _2889 = _2631;
                float _2890 = _2633;
                float _2891 = _2635;
                float _2892 = _2637;
                uint _2893 = _2644;
                uint _2902;
                bool _2903;
                for (;;)
                {
                    _2902 = texelFetch(g_lightClassification, int((((_2512 << 5u) + (_2498 << 9u)) + (_2893 << 2u)) >> 2u)).x;
                    _2903 = _2902 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_2903)
                    {
                        frontier_phi_72_pred = _2892;
                        frontier_phi_72_pred_1 = _2891;
                        frontier_phi_72_pred_2 = _2890;
                        frontier_phi_72_pred_3 = _2889;
                        frontier_phi_72_pred_4 = _2888;
                        frontier_phi_72_pred_5 = _2887;
                    }
                    else
                    {
                        float _3086;
                        float _3087;
                        float _3088;
                        float _3089;
                        float _3090;
                        float _3091;
                        float _3382;
                        float _3383;
                        float _3384;
                        float _3385;
                        float _3386;
                        float _3387;
                        float _3099 = _2887;
                        float _3100 = _2888;
                        float _3101 = _2889;
                        float _3102 = _2890;
                        float _3103 = _2891;
                        float _3104 = _2892;
                        uint _3105 = _2902;
                        uint _3106;
                        vec4 _3131;
                        float _3132;
                        vec4 _3147;
                        vec3 _3159;
                        vec4 _3175;
                        vec4 _3191;
                        float _3238;
                        bool _3239;
                        for (;;)
                        {
                            uint _3116 = ((_2893 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3105));
                            _3106 = (_3105 + 4294967295u) & _3105;
                            uint _3118 = _3116 * 40u;
                            _3131 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3118)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3118 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3118 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3118 + 3u)).x));
                            _3132 = _3131.w;
                            uint _3134 = (_3116 * 40u) + 4u;
                            _3147 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3134)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3134 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3134 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3134 + 3u)).x));
                            uint _3149 = (_3116 * 40u) + 8u;
                            _3159 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3149)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3149 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3149 + 2u)).x));
                            uint _3162 = (_3116 * 40u) + 16u;
                            _3175 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3162)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3162 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3162 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3162 + 3u)).x));
                            uint _3178 = (_3116 * 40u) + 20u;
                            _3191 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3178)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3178 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3178 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3178 + 3u)).x));
                            uint _3194 = (_3116 * 40u) + 24u;
                            vec4 _3207 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3194)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3194 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3194 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3194 + 3u)).x));
                            uint _3213 = (_3116 * 40u) + 28u;
                            vec4 _3226 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3213)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3213 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3213 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3213 + 3u)).x));
                            _3238 = fma(_1578, _3226.z, fma(_1577, _3226.y, _3226.x * _1576)) + _3226.w;
                            _3239 = !((fma(_1578, _3207.z, fma(_1577, _3207.y, _3207.x * _1576)) + _3207.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3239)
                            {
                                float _3266 = _3131.x - _1576;
                                float _3267 = _3131.y - _1577;
                                float _3268 = _3131.z - _1578;
                                float _3269 = dot(vec3(_3266, _3267, _3268), vec3(_3266, _3267, _3268));
                                float _3272 = inversesqrt(_3269);
                                float _3273 = _3272 * _3266;
                                float _3274 = _3272 * _3267;
                                float _3275 = _3272 * _3268;
                                float _3279 = 1.0 - (_3269 / (_3132 * _3132));
                                float _4366 = isnan(0.0) ? _3279 : (isnan(_3279) ? 0.0 : max(_3279, 0.0));
                                float _3280 = isnan(1.0) ? _4366 : (isnan(_4366) ? 1.0 : min(_4366, 1.0));
                                float _3284 = sqrt(_3269) * _3147.w;
                                float _3286 = 1.39999997615814208984375 / (_3284 + 1.39999997615814208984375);
                                float _3287 = _3286 * _3286;
                                float _3290 = ((1.0 - _3287) * dot(vec3(_3273, _3274, _3275), vec3(_435, _438, _441))) + _3287;
                                float _3293 = _3284 * _3284;
                                float _3297 = (fma(_1578, _3175.z, fma(_1577, _3175.y, _3175.x * _1576)) + _3175.w) / _3238;
                                float _3298 = (fma(_1578, _3191.z, fma(_1577, _3191.y, _3191.x * _1576)) + _3191.w) / _3238;
                                float _3302 = 1.0 - dot(vec2(_3297, _3298), vec2(_3297, _3298));
                                float _4382 = isnan(0.0) ? _3302 : (isnan(_3302) ? 0.0 : max(_3302, 0.0));
                                float _3303 = isnan(1.0) ? _4382 : (isnan(_4382) ? 1.0 : min(_4382, 1.0));
                                float _3304 = _3303 * (((isnan(0.0) ? _3290 : (isnan(_3290) ? 0.0 : max(_3290, 0.0))) * _3280) / ((_3293 * 0.699999988079071044921875) + 1.0));
                                float _3316 = exp2(log2(1.0 / ((_3293 * 3.5) + 5.0)) * 0.25);
                                float _3317 = 1.0 - _510;
                                float _3324 = sqrt(1.0 - ((1.0 - (_3317 * _3317)) * (1.0 - (_3316 * _3316))));
                                float _3325 = _3324 * _3324;
                                float _3326 = _3325 * _3325;
                                float _3327 = _3273 - _2774;
                                float _3328 = _3274 - _2775;
                                float _3329 = _3275 - _2776;
                                float _3333 = inversesqrt(dot(vec3(_3327, _3328, _3329), vec3(_3327, _3328, _3329)));
                                float _3337 = dot(vec3(_435, _438, _441), vec3((-0.0) - _2774, (-0.0) - _2775, (-0.0) - _2776));
                                float _4393 = isnan(0.0) ? _3337 : (isnan(_3337) ? 0.0 : max(_3337, 0.0));
                                float _3340 = isnan(1.0) ? _4393 : (isnan(_4393) ? 1.0 : min(_4393, 1.0));
                                float _3341 = dot(vec3(_435, _438, _441), vec3(_3333 * _3327, _3333 * _3328, _3333 * _3329));
                                float _4404 = isnan(0.0) ? _3341 : (isnan(_3341) ? 0.0 : max(_3341, 0.0));
                                float _3344 = isnan(1.0) ? _4404 : (isnan(_4404) ? 1.0 : min(_4404, 1.0));
                                float _3348 = ((_3344 * _3344) * (_3326 + (-1.0))) + 1.0;
                                float _3349 = _3286 * _3325;
                                float _3350 = _3349 * _3349;
                                float _3356 = ((1.0 - _3350) * dot(vec3(_435, _438, _441), vec3(_3273, _3274, _3275))) + _3350;
                                float _4415 = isnan(0.0) ? _3356 : (isnan(_3356) ? 0.0 : max(_3356, 0.0));
                                float _3357 = isnan(1.0) ? _4415 : (isnan(_4415) ? 1.0 : min(_4415, 1.0));
                                float _3358 = 1.0 - _3325;
                                float _3368 = (0.5 / (((_3357 * ((_3340 * _3358) + _3325)) + 9.9999999392252902907785028219223e-09) + (((_3357 * _3358) + _3325) * _3340))) * _3357;
                                float _4426 = isnan(0.0) ? _3368 : (isnan(_3368) ? 0.0 : max(_3368, 0.0));
                                float _3378 = (_3303 * _3280) * (((_3326 * 3.1415927410125732421875) * (isnan(1.0) ? _4426 : (isnan(_4426) ? 1.0 : min(_4426, 1.0)))) / ((_3348 * _3348) * ((_3293 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3304 * _3147.y;
                                frontier_phi_78_pred_1 = _3304 * _3147.x;
                                frontier_phi_78_pred_2 = _3378 * _3159.z;
                                frontier_phi_78_pred_3 = _3378 * _3159.y;
                                frontier_phi_78_pred_4 = _3378 * _3159.x;
                                frontier_phi_78_pred_5 = _3304 * _3147.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3386 = frontier_phi_78_pred;
                            _3385 = frontier_phi_78_pred_1;
                            _3384 = frontier_phi_78_pred_2;
                            _3383 = frontier_phi_78_pred_3;
                            _3382 = frontier_phi_78_pred_4;
                            _3387 = frontier_phi_78_pred_5;
                            _3089 = _3385 + _3102;
                            _3090 = _3386 + _3103;
                            _3091 = _3387 + _3104;
                            _3086 = _3382 + _3099;
                            _3087 = _3383 + _3100;
                            _3088 = _3384 + _3101;
                            if (_3106 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3099 = _3086;
                                _3100 = _3087;
                                _3101 = _3088;
                                _3102 = _3089;
                                _3103 = _3090;
                                _3104 = _3091;
                                _3105 = _3106;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3091;
                        frontier_phi_72_pred_1 = _3090;
                        frontier_phi_72_pred_2 = _3089;
                        frontier_phi_72_pred_3 = _3088;
                        frontier_phi_72_pred_4 = _3087;
                        frontier_phi_72_pred_5 = _3086;
                    }
                    _2759 = frontier_phi_72_pred;
                    _2757 = frontier_phi_72_pred_1;
                    _2755 = frontier_phi_72_pred_2;
                    _2753 = frontier_phi_72_pred_3;
                    _2751 = frontier_phi_72_pred_4;
                    _2749 = frontier_phi_72_pred_5;
                    uint _2894 = _2893 + 1u;
                    if (_2894 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2887 = _2749;
                        _2888 = _2751;
                        _2889 = _2753;
                        _2890 = _2755;
                        _2891 = _2757;
                        _2892 = _2759;
                        _2893 = _2894;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2759;
                frontier_phi_60_61_ladder_1 = _2757;
                frontier_phi_60_61_ladder_2 = _2753;
                frontier_phi_60_61_ladder_3 = _2751;
                frontier_phi_60_61_ladder_4 = _2749;
                frontier_phi_60_61_ladder_5 = _2755;
            }
            else
            {
                frontier_phi_60_61_ladder = _2637;
                frontier_phi_60_61_ladder_1 = _2635;
                frontier_phi_60_61_ladder_2 = _2631;
                frontier_phi_60_61_ladder_3 = _2629;
                frontier_phi_60_61_ladder_4 = _2627;
                frontier_phi_60_61_ladder_5 = _2633;
            }
            _2748 = frontier_phi_60_61_ladder_4;
            _2750 = frontier_phi_60_61_ladder_3;
            _2752 = frontier_phi_60_61_ladder_2;
            _2754 = frontier_phi_60_61_ladder_5;
            _2756 = frontier_phi_60_61_ladder_1;
            _2758 = frontier_phi_60_61_ladder;
        }
        float _2763 = isnan(1.0) ? _494 : (isnan(_494) ? 1.0 : min(_494, 1.0));
        _2531 = (_2763 * _2754) + _2043;
        _2533 = (_2763 * _2756) + _2045;
        _2535 = (_2763 * _2758) + _2047;
        _2537 = ((_2748 * _479) * _2763) + _2381;
        _2539 = ((_2750 * _481) * _2763) + _2383;
        _2541 = ((_2752 * _482) * _2763) + _2385;
    }
    else
    {
        _2531 = _2043;
        _2533 = _2045;
        _2535 = _2047;
        _2537 = _2381;
        _2539 = _2383;
        _2541 = _2385;
    }
    uint _2547 = _455 + uint(cbMatDynParam._m0[0u].w);
    float _2553 = ((((cbMtdParam._m0[10u].x * cbMtdParam._m0[12u].y) * _288.x) + cbMtdParam._m0[11u].x) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_2547].x;
    float _2554 = ((((cbMtdParam._m0[10u].y * cbMtdParam._m0[12u].y) * _288.y) + cbMtdParam._m0[11u].y) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_2547].y;
    float _2555 = ((cbMtdParam._m0[11u].z + ((cbMtdParam._m0[10u].z * cbMtdParam._m0[12u].y) * _288.z)) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_2547].z;
    float _4442 = isnan(0.0) ? _469 : (isnan(_469) ? 0.0 : max(_469, 0.0));
    float _4453 = isnan(0.0) ? _470 : (isnan(_470) ? 0.0 : max(_470, 0.0));
    float _4464 = isnan(0.0) ? _471 : (isnan(_471) ? 0.0 : max(_471, 0.0));
    float _2572 = (((isnan(1.0) ? _4442 : (isnan(_4442) ? 1.0 : min(_4442, 1.0))) * (_2531 + ((isnan(0.0) ? _1225 : (isnan(_1225) ? 0.0 : max(_1225, 0.0))) * _494))) + ((_2537 + ((isnan(0.0) ? _1523 : (isnan(_1523) ? 0.0 : max(_1523, 0.0))) * _1304)) * cbPerFrame._m0[3u].x)) + _2553;
    float _2574 = (_2554 + ((_2539 + ((isnan(0.0) ? _1526 : (isnan(_1526) ? 0.0 : max(_1526, 0.0))) * _1304)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4453 : (isnan(_4453) ? 1.0 : min(_4453, 1.0))) * (_2533 + ((isnan(0.0) ? _1228 : (isnan(_1228) ? 0.0 : max(_1228, 0.0))) * _494)));
    float _2576 = (_2555 + ((_2541 + ((isnan(0.0) ? _1529 : (isnan(_1529) ? 0.0 : max(_1529, 0.0))) * _1304)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4464 : (isnan(_4464) ? 1.0 : min(_4464, 1.0))) * (_2535 + ((isnan(0.0) ? _1231 : (isnan(_1231) ? 0.0 : max(_1231, 0.0))) * _494)));
    float _4490 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2589 = isnan(1.0) ? _4490 : (isnan(_4490) ? 1.0 : min(_4490, 1.0));
    uint _2590 = _454 + 6u;
    float _2598 = _413 / cbSceneParam._m0[86u].x;
    float _2599 = _414 / cbSceneParam._m0[86u].y;
    vec4 _2613 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2598, _2599, (log2((isnan(cbSceneParam._m0[77u].w) ? _347 : (isnan(_347) ? cbSceneParam._m0[77u].w : min(_347, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2615 = _2613.x;
    float _2616 = _2613.y;
    float _2617 = _2613.z;
    float _2618 = _2613.w;
    float _2690;
    float _2692;
    float _2694;
    float _2696;
    if (_347 > cbSceneParam._m0[78u].w)
    {
        float _2652 = isnan(_347) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _347 : min(cbSceneParam._m0[80u].w, _347));
        float _2653 = _2652 / _347;
        float _2664 = _2653 * _398;
        float _2665 = _399 * _2653;
        float _2666 = (-0.0) - _2665;
        float _2668 = _2653 * _400;
        float _2670 = (cbSceneParam._m0[77u].w * _2666) / _2652;
        float _2671 = _2670 + cbSceneParam._m0[79u].w;
        float _2672 = cbSceneParam._m0[79u].w - _2665;
        float _2678 = sqrt(((_2664 * _2664) + (_2665 * _2665)) + (_2668 * _2668));
        float _2681 = (1.0 - (cbSceneParam._m0[77u].w / _2652)) * _2678;
        float _2686 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2688 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2849;
        if (abs((_2666 - _2670) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2849 = ((((_2671 > 0.0) ? exp2(_2686 * _2671) : (2.0 - exp2(_2688 * _2671))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2681;
        }
        else
        {
            float _2809 = 1.0 / cbSceneParam._m0[80u].x;
            float _2810 = isnan(_2672) ? _2671 : (isnan(_2671) ? _2672 : max(_2671, _2672));
            float _2811 = isnan(_2672) ? _2671 : (isnan(_2671) ? _2672 : min(_2671, _2672));
            float _2820 = isnan(0.0) ? _2810 : (isnan(_2810) ? 0.0 : min(_2810, 0.0));
            float _2821 = isnan(0.0) ? _2811 : (isnan(_2811) ? 0.0 : min(_2811, 0.0));
            _2849 = ((abs(_2678 / _2666) * cbSceneParam._m0[80u].y) * ((((_2820 - _2821) * 2.0) - ((exp2(_2686 * (isnan(0.0) ? _2810 : (isnan(_2810) ? 0.0 : max(_2810, 0.0)))) - exp2(_2686 * (isnan(0.0) ? _2811 : (isnan(_2811) ? 0.0 : max(_2811, 0.0))))) * _2809)) - ((exp2(_2688 * _2820) - exp2(_2688 * _2821)) * _2809))) + (_2681 * cbSceneParam._m0[80u].z);
        }
        vec4 _2851 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2598, _2599, 1.0), 0.0);
        float _2860 = exp2((_2849 * (-1.44269502162933349609375)) * (1.0 - _2851.w));
        float _2861 = log2(_2860);
        float _2877 = log2(_2618);
        _2690 = (exp2(_2877 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2861 * cbSceneParam._m0[78u].x)) * _2851.x) / cbSceneParam._m0[78u].x)) + _2615;
        _2692 = (exp2(_2877 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2861 * cbSceneParam._m0[78u].y)) * _2851.y) / cbSceneParam._m0[78u].y)) + _2616;
        _2694 = (exp2(_2877 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2861 * cbSceneParam._m0[78u].z)) * _2851.z) / cbSceneParam._m0[78u].z)) + _2617;
        _2696 = _2860 * _2618;
    }
    else
    {
        _2690 = _2615;
        _2692 = _2616;
        _2694 = _2617;
        _2696 = _2618;
    }
    float _2707 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2708 = _2707 == 3.0;
    float _2709 = log2(_2696);
    float _2713 = exp2(_2709 * cbSceneParam._m0[78u].x);
    float _2714 = exp2(_2709 * cbSceneParam._m0[78u].y);
    float _2715 = exp2(_2709 * cbSceneParam._m0[78u].z);
    float _2716 = _2713 * (isnan(0.0) ? _2572 : (isnan(_2572) ? 0.0 : max(_2572, 0.0)));
    float _2717 = _2714 * (isnan(0.0) ? _2574 : (isnan(_2574) ? 0.0 : max(_2574, 0.0)));
    float _2718 = _2715 * (isnan(0.0) ? _2576 : (isnan(_2576) ? 0.0 : max(_2576, 0.0)));
    float _2727 = (_2707 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2727 * (_2708 ? _2716 : (_2716 + (cbSceneParam._m0[72u].w * _2690)));
    SV_Target.y = _2727 * (_2708 ? _2717 : (_2717 + (cbSceneParam._m0[72u].w * _2692)));
    SV_Target.z = _2727 * (_2708 ? _2718 : (_2718 + (cbSceneParam._m0[72u].w * _2694)));
    SV_Target.w = cbInstanceData._m0[_2590].w;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2553) * _2589) * _2713) * _2727;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2554) * _2589) * _2714) * _2727;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2555) * _2589) * _2715) * _2727;
    SV_Target_1.w = cbInstanceData._m0[_2590].w;
}


