#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[13];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D P_BS_M1_Emissive_Glow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D P_BS_M1_Emissive_Glow_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D P_BS_M1_Emissive_Glow_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D P_BS_M1_Emissive_Glow_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _929;
float _3380;
float _3381;
float _3382;
float _3383;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _184 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _185 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _186 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _191 = inversesqrt(dot(vec3(_184, _185, _186), vec3(_184, _185, _186)));
    float _198 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _205 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _228 = texture(sampler2D(P_BS_M1_Emissive_Glow_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _234 = _228.x * cbMtdParam._m0[9u].x;
    float _235 = _228.y * cbMtdParam._m0[9u].y;
    float _236 = _228.z * cbMtdParam._m0[9u].z;
    vec4 _248 = texture(sampler2D(P_BS_M1_Emissive_Glow_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _255 = cbMtdParam._m0[12u].x + _248.x;
    vec4 _267 = texture(sampler2D(P_BS_M1_Emissive_Glow_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _271 = _267.z;
    float _275 = (_267.x * 2.0) + (-1.0);
    float _277 = (_267.y * 2.0) + (-1.0);
    float _278 = dot(vec2(_275, _277), vec2(_275, _277));
    float _3392 = isnan(0.0) ? _278 : (isnan(_278) ? 0.0 : max(_278, 0.0));
    float _284 = sqrt(1.0 - (isnan(1.0) ? _3392 : (isnan(_3392) ? 1.0 : min(_3392, 1.0))));
    vec4 _307 = texture(sampler2D(P_BS_M1_Emissive_Glow_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _332 = fma(_284, _198 * NORMAL.x, fma(_277, _205 * TANGENT.x, (_191 * _184) * _275));
    float _335 = fma(_284, _198 * NORMAL.y, fma(_277, _205 * TANGENT.y, (_191 * _185) * _275));
    float _338 = fma(_284, _198 * NORMAL.z, fma(_277, _205 * TANGENT.z, (_191 * _186) * _275));
    float _342 = inversesqrt(dot(vec3(_332, _335, _338), vec3(_332, _335, _338)));
    float _343 = _342 * _332;
    float _344 = _342 * _335;
    float _345 = _342 * _338;
    float _3403 = isnan(0.0) ? _271 : (isnan(_271) ? 0.0 : max(_271, 0.0));
    float _346 = isnan(1.0) ? _3403 : (isnan(_3403) ? 1.0 : min(_3403, 1.0));
    float _3414 = isnan(0.0) ? _234 : (isnan(_234) ? 0.0 : max(_234, 0.0));
    float _3425 = isnan(0.0) ? _235 : (isnan(_235) ? 0.0 : max(_235, 0.0));
    float _3436 = isnan(0.0) ? _236 : (isnan(_236) ? 0.0 : max(_236, 0.0));
    float _3447 = isnan(0.0) ? _255 : (isnan(_255) ? 0.0 : max(_255, 0.0));
    float _350 = isnan(1.0) ? _3447 : (isnan(_3447) ? 1.0 : min(_3447, 1.0));
    float _366 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _407 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _417 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _407);
    float _418 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _407);
    float _419 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _407);
    float _423 = inversesqrt(dot(vec3(_417, _418, _419), vec3(_417, _418, _419)));
    float _424 = _417 * _423;
    float _425 = _418 * _423;
    float _426 = _419 * _423;
    vec4 _431 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _433 = _431.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _608 = sqrt(((_417 * _417) + (_418 * _418)) + (_419 * _419));
        float _614 = (cbMatDynParam._m0[5u].x * _608) + cbMatDynParam._m0[5u].y;
        float _3458 = isnan(0.0) ? _614 : (isnan(_614) ? 0.0 : max(_614, 0.0));
        float _615 = isnan(1.0) ? _3458 : (isnan(_3458) ? 1.0 : min(_3458, 1.0));
        float _619 = (cbMatDynParam._m0[5u].z * _608) + cbMatDynParam._m0[5u].w;
        float _3469 = isnan(0.0) ? _619 : (isnan(_619) ? 0.0 : max(_619, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3469 : (isnan(_3469) ? 1.0 : min(_3469, 1.0))) - _615)) + _615) < ((_433 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _445 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _446 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _466 = fma(_345, cbSceneParam._m0[5u].z, fma(_344, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _343));
    float _469 = fma(_345, cbSceneParam._m0[6u].z, fma(_344, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _343));
    float _472 = fma(_345, cbSceneParam._m0[7u].z, fma(_344, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _343));
    uint _485 = uint(roundEven(NORMAL.w)) * 13u;
    uint _486 = _485 + 9u;
    uint _487 = _486 + uint(cbMatDynParam._m0[0u].w);
    float _493 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3414 : (isnan(_3414) ? 1.0 : min(_3414, 1.0)))) * cbInstanceData._m0[_487].x;
    float _494 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3425 : (isnan(_3425) ? 1.0 : min(_3425, 1.0)))) * cbInstanceData._m0[_487].y;
    float _495 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3436 : (isnan(_3436) ? 1.0 : min(_3436, 1.0)))) * cbInstanceData._m0[_487].z;
    float _3480 = isnan(0.0) ? _493 : (isnan(_493) ? 0.0 : max(_493, 0.0));
    float _496 = isnan(1.0) ? _3480 : (isnan(_3480) ? 1.0 : min(_3480, 1.0));
    float _3491 = isnan(0.0) ? _494 : (isnan(_494) ? 0.0 : max(_494, 0.0));
    float _497 = isnan(1.0) ? _3491 : (isnan(_3491) ? 1.0 : min(_3491, 1.0));
    float _3502 = isnan(0.0) ? _495 : (isnan(_495) ? 0.0 : max(_495, 0.0));
    float _498 = isnan(1.0) ? _3502 : (isnan(_3502) ? 1.0 : min(_3502, 1.0));
    float _499 = 1.0 - _350;
    float _500 = _496 * _499;
    float _501 = _497 * _499;
    float _502 = _498 * _499;
    float _507 = (_496 + (-0.039999999105930328369140625)) * _350;
    float _508 = (_497 + (-0.039999999105930328369140625)) * _350;
    float _509 = (_498 + (-0.039999999105930328369140625)) * _350;
    float _510 = _507 + 0.039999999105930328369140625;
    float _512 = _508 + 0.039999999105930328369140625;
    float _513 = _509 + 0.039999999105930328369140625;
    vec4 _522 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _445, cbSceneParam._m0[86u].y * _446));
    float _525 = _522.x * TEXCOORD.z;
    float _526 = dot(vec3(_343, _344, _345), vec3(_424, _425, _426));
    float _529 = _526 * 2.0;
    float _533 = (_529 * _343) - _424;
    float _534 = (_529 * _344) - _425;
    float _535 = (_529 * _345) - _426;
    float _539 = abs(dot(vec3(_424, _425, _426), vec3(_343, _344, _345)));
    float _3513 = isnan(0.0) ? _539 : (isnan(_539) ? 0.0 : max(_539, 0.0));
    float _541 = sqrt(_346);
    float _554 = exp2((_541 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3513 : (isnan(_3513) ? 1.0 : min(_3513, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_541 * 3.0));
    float _560 = (1.0 - _554) * ((_541 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _561 = _554 * _541;
    float _589 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _593 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _597 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _928;
    float _930;
    float _931;
    float _932;
    float _933;
    float _934;
    float _935;
    float _936;
    float _937;
    float _938;
    float _939;
    float _940;
    float _941;
    float _942;
    float _943;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _653 = fma(_597, cbModelParam._m0[26u].z, fma(_593, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _589));
        float _657 = fma(_597, cbModelParam._m0[27u].z, fma(_593, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _589));
        float _661 = fma(_597, cbModelParam._m0[28u].z, fma(_593, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _589));
        float _686 = _589 + _343;
        float _687 = _593 + _344;
        float _688 = _597 + _345;
        float _698 = fma(_688, cbModelParam._m0[26u].z, fma(_687, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _686)) - _653;
        float _699 = fma(_688, cbModelParam._m0[27u].z, fma(_687, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _686)) - _657;
        float _700 = fma(_688, cbModelParam._m0[28u].z, fma(_687, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _686)) - _661;
        float _704 = inversesqrt(dot(vec3(_698, _699, _700), vec3(_698, _699, _700)));
        float _717 = ((_704 * _698) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_653 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _718 = ((_704 * _699) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_657 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _719 = ((_704 * _700) / cbModelParam._m0[34u].z) + ((((((_661 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _722 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_717, _718, _719), 0.0);
        vec4 _729 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_717, _718, _719), 0.0);
        vec4 _736 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_717, _718, _719), 0.0);
        vec4 _743 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_717, _718, _719), 0.0);
        float _756 = exp2((_722.w + (-0.5)) * 20.0) * 2.0;
        float _757 = _756 * (_722.x + (-0.5));
        float _758 = _756 * (_722.y + (-0.5));
        float _759 = _756 * (_722.z + (-0.5));
        float _766 = exp2((_729.w + (-0.5)) * 20.0) * 2.0;
        float _767 = _766 * (_729.x + (-0.5));
        float _768 = _766 * (_729.y + (-0.5));
        float _769 = _766 * (_729.z + (-0.5));
        float _776 = exp2((_736.w + (-0.5)) * 20.0) * 2.0;
        float _777 = _776 * (_736.x + (-0.5));
        float _778 = _776 * (_736.y + (-0.5));
        float _779 = _776 * (_736.z + (-0.5));
        float _786 = exp2((_743.w + (-0.5)) * 20.0) * 2.0;
        float _787 = _786 * (_743.x + (-0.5));
        float _788 = _786 * (_743.y + (-0.5));
        float _789 = _786 * (_743.z + (-0.5));
        float _790 = isnan(0.0) ? _787 : (isnan(_787) ? 0.0 : max(_787, 0.0));
        float _791 = isnan(0.0) ? _788 : (isnan(_788) ? 0.0 : max(_788, 0.0));
        float _792 = isnan(0.0) ? _789 : (isnan(_789) ? 0.0 : max(_789, 0.0));
        float _793 = _757 * 0.5;
        float _794 = _767 * 0.5;
        float _795 = _777 * 0.5;
        float _796 = dot(vec3(_793, _794, _795), vec3(_793, _794, _795));
        float _801 = (_796 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_796);
        float _810 = (dot(vec3(_343, _344, _345), vec3(_801 * _793, _801 * _794, _801 * _795)) + 1.0) * 0.5;
        float _3539 = isnan(0.0) ? _810 : (isnan(_810) ? 0.0 : max(_810, 0.0));
        float _820 = sqrt(((_794 * _794) + (_793 * _793)) + (_795 * _795)) / (_790 + 9.9999997473787516355514526367188e-06);
        float _3550 = isnan(0.0) ? _820 : (isnan(_820) ? 0.0 : max(_820, 0.0));
        float _821 = isnan(1.0) ? _3550 : (isnan(_3550) ? 1.0 : min(_3550, 1.0));
        float _822 = _821 * 2.0;
        float _826 = (1.0 - _821) / (_821 + 1.0);
        float _3561 = isnan(0.0) ? _826 : (isnan(_826) ? 0.0 : max(_826, 0.0));
        float _827 = isnan(1.0) ? _3561 : (isnan(_3561) ? 1.0 : min(_3561, 1.0));
        float _836 = ((((1.0 - _827) * (_822 + 2.0)) * exp2(log2(isnan(1.0) ? _3539 : (isnan(_3539) ? 1.0 : min(_3539, 1.0))) * (_822 + 1.0))) + _827) * _790;
        float _837 = _758 * 0.5;
        float _838 = _768 * 0.5;
        float _839 = _778 * 0.5;
        float _840 = dot(vec3(_837, _838, _839), vec3(_837, _838, _839));
        float _845 = (_840 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_840);
        float _853 = (dot(vec3(_343, _344, _345), vec3(_845 * _837, _845 * _838, _845 * _839)) + 1.0) * 0.5;
        float _3572 = isnan(0.0) ? _853 : (isnan(_853) ? 0.0 : max(_853, 0.0));
        float _862 = sqrt(((_838 * _838) + (_837 * _837)) + (_839 * _839)) / (_791 + 9.9999997473787516355514526367188e-06);
        float _3583 = isnan(0.0) ? _862 : (isnan(_862) ? 0.0 : max(_862, 0.0));
        float _863 = isnan(1.0) ? _3583 : (isnan(_3583) ? 1.0 : min(_3583, 1.0));
        float _864 = _863 * 2.0;
        float _868 = (1.0 - _863) / (_863 + 1.0);
        float _3594 = isnan(0.0) ? _868 : (isnan(_868) ? 0.0 : max(_868, 0.0));
        float _869 = isnan(1.0) ? _3594 : (isnan(_3594) ? 1.0 : min(_3594, 1.0));
        float _878 = ((((1.0 - _869) * (_864 + 2.0)) * exp2(log2(isnan(1.0) ? _3572 : (isnan(_3572) ? 1.0 : min(_3572, 1.0))) * (_864 + 1.0))) + _869) * _791;
        float _879 = _759 * 0.5;
        float _880 = _769 * 0.5;
        float _881 = _779 * 0.5;
        float _882 = dot(vec3(_879, _880, _881), vec3(_879, _880, _881));
        float _887 = (_882 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_882);
        float _895 = (dot(vec3(_343, _344, _345), vec3(_887 * _879, _887 * _880, _887 * _881)) + 1.0) * 0.5;
        float _3605 = isnan(0.0) ? _895 : (isnan(_895) ? 0.0 : max(_895, 0.0));
        float _904 = sqrt(((_880 * _880) + (_879 * _879)) + (_881 * _881)) / (_792 + 9.9999997473787516355514526367188e-06);
        float _3616 = isnan(0.0) ? _904 : (isnan(_904) ? 0.0 : max(_904, 0.0));
        float _905 = isnan(1.0) ? _3616 : (isnan(_3616) ? 1.0 : min(_3616, 1.0));
        float _906 = _905 * 2.0;
        float _910 = (1.0 - _905) / (_905 + 1.0);
        float _3627 = isnan(0.0) ? _910 : (isnan(_910) ? 0.0 : max(_910, 0.0));
        float _911 = isnan(1.0) ? _3627 : (isnan(_3627) ? 1.0 : min(_3627, 1.0));
        float _920 = ((((1.0 - _911) * (_906 + 2.0)) * exp2(log2(isnan(1.0) ? _3605 : (isnan(_3605) ? 1.0 : min(_3605, 1.0))) * (_906 + 1.0))) + _911) * _792;
        _928 = _759;
        _930 = _758;
        _931 = _757;
        _932 = _769;
        _933 = _768;
        _934 = _767;
        _935 = _779;
        _936 = _778;
        _937 = _777;
        _938 = _792;
        _939 = _791;
        _940 = _790;
        _941 = cbModelParam._m0[36u].z * (isnan(0.0) ? _836 : (isnan(_836) ? 0.0 : max(_836, 0.0)));
        _942 = cbModelParam._m0[36u].z * (isnan(0.0) ? _878 : (isnan(_878) ? 0.0 : max(_878, 0.0)));
        _943 = cbModelParam._m0[36u].z * (isnan(0.0) ? _920 : (isnan(_920) ? 0.0 : max(_920, 0.0)));
    }
    else
    {
        _928 = _929;
        _930 = _929;
        _931 = _929;
        _932 = _929;
        _933 = _929;
        _934 = _929;
        _935 = _929;
        _936 = _929;
        _937 = _929;
        _938 = _929;
        _939 = _929;
        _940 = _929;
        _941 = 0.0;
        _942 = 0.0;
        _943 = 0.0;
    }
    float _1241;
    float _1242;
    float _1243;
    float _1244;
    float _1245;
    float _1246;
    float _1247;
    float _1248;
    float _1249;
    float _1250;
    float _1251;
    float _1252;
    float _1253;
    float _1254;
    float _1255;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _972 = fma(_597, cbModelParam._m0[30u].z, fma(_593, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _589));
        float _976 = fma(_597, cbModelParam._m0[31u].z, fma(_593, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _589));
        float _980 = fma(_597, cbModelParam._m0[32u].z, fma(_593, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _589));
        float _1003 = _589 + _343;
        float _1004 = _593 + _344;
        float _1005 = _597 + _345;
        float _1015 = fma(_1005, cbModelParam._m0[30u].z, fma(_1004, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1003)) - _972;
        float _1016 = fma(_1005, cbModelParam._m0[31u].z, fma(_1004, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1003)) - _976;
        float _1017 = fma(_1005, cbModelParam._m0[32u].z, fma(_1004, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1003)) - _980;
        float _1021 = inversesqrt(dot(vec3(_1015, _1016, _1017), vec3(_1015, _1016, _1017)));
        float _1034 = ((_1021 * _1015) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_972 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1035 = ((_1021 * _1016) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_976 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1036 = ((_1021 * _1017) / cbModelParam._m0[35u].z) + ((((((_980 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1038 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1034, _1035, _1036), 0.0);
        vec4 _1045 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1034, _1035, _1036), 0.0);
        vec4 _1052 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1034, _1035, _1036), 0.0);
        vec4 _1059 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1034, _1035, _1036), 0.0);
        float _1071 = exp2((_1038.w + (-0.5)) * 20.0) * 2.0;
        float _1072 = _1071 * (_1038.x + (-0.5));
        float _1073 = _1071 * (_1038.y + (-0.5));
        float _1074 = _1071 * (_1038.z + (-0.5));
        float _1081 = exp2((_1045.w + (-0.5)) * 20.0) * 2.0;
        float _1082 = _1081 * (_1045.x + (-0.5));
        float _1083 = _1081 * (_1045.y + (-0.5));
        float _1084 = _1081 * (_1045.z + (-0.5));
        float _1091 = exp2((_1052.w + (-0.5)) * 20.0) * 2.0;
        float _1092 = _1091 * (_1052.x + (-0.5));
        float _1093 = _1091 * (_1052.y + (-0.5));
        float _1094 = _1091 * (_1052.z + (-0.5));
        float _1101 = exp2((_1059.w + (-0.5)) * 20.0) * 2.0;
        float _1102 = _1101 * (_1059.x + (-0.5));
        float _1103 = _1101 * (_1059.y + (-0.5));
        float _1104 = _1101 * (_1059.z + (-0.5));
        float _1105 = isnan(0.0) ? _1102 : (isnan(_1102) ? 0.0 : max(_1102, 0.0));
        float _1106 = isnan(0.0) ? _1103 : (isnan(_1103) ? 0.0 : max(_1103, 0.0));
        float _1107 = isnan(0.0) ? _1104 : (isnan(_1104) ? 0.0 : max(_1104, 0.0));
        float _1108 = _1072 * 0.5;
        float _1109 = _1082 * 0.5;
        float _1110 = _1092 * 0.5;
        float _1111 = dot(vec3(_1108, _1109, _1110), vec3(_1108, _1109, _1110));
        float _1116 = (_1111 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1111);
        float _1124 = (dot(vec3(_343, _344, _345), vec3(_1116 * _1108, _1116 * _1109, _1116 * _1110)) + 1.0) * 0.5;
        float _3668 = isnan(0.0) ? _1124 : (isnan(_1124) ? 0.0 : max(_1124, 0.0));
        float _1133 = sqrt(((_1109 * _1109) + (_1108 * _1108)) + (_1110 * _1110)) / (_1105 + 9.9999997473787516355514526367188e-06);
        float _3679 = isnan(0.0) ? _1133 : (isnan(_1133) ? 0.0 : max(_1133, 0.0));
        float _1134 = isnan(1.0) ? _3679 : (isnan(_3679) ? 1.0 : min(_3679, 1.0));
        float _1135 = _1134 * 2.0;
        float _1139 = (1.0 - _1134) / (_1134 + 1.0);
        float _3690 = isnan(0.0) ? _1139 : (isnan(_1139) ? 0.0 : max(_1139, 0.0));
        float _1140 = isnan(1.0) ? _3690 : (isnan(_3690) ? 1.0 : min(_3690, 1.0));
        float _1149 = ((((1.0 - _1140) * (_1135 + 2.0)) * exp2(log2(isnan(1.0) ? _3668 : (isnan(_3668) ? 1.0 : min(_3668, 1.0))) * (_1135 + 1.0))) + _1140) * _1105;
        float _1150 = _1073 * 0.5;
        float _1151 = _1083 * 0.5;
        float _1152 = _1093 * 0.5;
        float _1153 = dot(vec3(_1150, _1151, _1152), vec3(_1150, _1151, _1152));
        float _1158 = (_1153 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1153);
        float _1166 = (dot(vec3(_343, _344, _345), vec3(_1158 * _1150, _1158 * _1151, _1158 * _1152)) + 1.0) * 0.5;
        float _3701 = isnan(0.0) ? _1166 : (isnan(_1166) ? 0.0 : max(_1166, 0.0));
        float _1175 = sqrt(((_1151 * _1151) + (_1150 * _1150)) + (_1152 * _1152)) / (_1106 + 9.9999997473787516355514526367188e-06);
        float _3712 = isnan(0.0) ? _1175 : (isnan(_1175) ? 0.0 : max(_1175, 0.0));
        float _1176 = isnan(1.0) ? _3712 : (isnan(_3712) ? 1.0 : min(_3712, 1.0));
        float _1177 = _1176 * 2.0;
        float _1181 = (1.0 - _1176) / (_1176 + 1.0);
        float _3723 = isnan(0.0) ? _1181 : (isnan(_1181) ? 0.0 : max(_1181, 0.0));
        float _1182 = isnan(1.0) ? _3723 : (isnan(_3723) ? 1.0 : min(_3723, 1.0));
        float _1191 = ((((1.0 - _1182) * (_1177 + 2.0)) * exp2(log2(isnan(1.0) ? _3701 : (isnan(_3701) ? 1.0 : min(_3701, 1.0))) * (_1177 + 1.0))) + _1182) * _1106;
        float _1192 = _1074 * 0.5;
        float _1193 = _1084 * 0.5;
        float _1194 = _1094 * 0.5;
        float _1195 = dot(vec3(_1192, _1193, _1194), vec3(_1192, _1193, _1194));
        float _1200 = (_1195 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1195);
        float _1208 = (dot(vec3(_343, _344, _345), vec3(_1200 * _1192, _1200 * _1193, _1200 * _1194)) + 1.0) * 0.5;
        float _3734 = isnan(0.0) ? _1208 : (isnan(_1208) ? 0.0 : max(_1208, 0.0));
        float _1217 = sqrt(((_1193 * _1193) + (_1192 * _1192)) + (_1194 * _1194)) / (_1107 + 9.9999997473787516355514526367188e-06);
        float _3745 = isnan(0.0) ? _1217 : (isnan(_1217) ? 0.0 : max(_1217, 0.0));
        float _1218 = isnan(1.0) ? _3745 : (isnan(_3745) ? 1.0 : min(_3745, 1.0));
        float _1219 = _1218 * 2.0;
        float _1223 = (1.0 - _1218) / (_1218 + 1.0);
        float _3756 = isnan(0.0) ? _1223 : (isnan(_1223) ? 0.0 : max(_1223, 0.0));
        float _1224 = isnan(1.0) ? _3756 : (isnan(_3756) ? 1.0 : min(_3756, 1.0));
        float _1233 = ((((1.0 - _1224) * (_1219 + 2.0)) * exp2(log2(isnan(1.0) ? _3734 : (isnan(_3734) ? 1.0 : min(_3734, 1.0))) * (_1219 + 1.0))) + _1224) * _1107;
        _1241 = _1074;
        _1242 = _1073;
        _1243 = _1072;
        _1244 = _1084;
        _1245 = _1083;
        _1246 = _1082;
        _1247 = _1094;
        _1248 = _1093;
        _1249 = _1092;
        _1250 = _1107;
        _1251 = _1106;
        _1252 = _1105;
        _1253 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1149 : (isnan(_1149) ? 0.0 : max(_1149, 0.0)));
        _1254 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1191 : (isnan(_1191) ? 0.0 : max(_1191, 0.0)));
        _1255 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1233 : (isnan(_1233) ? 0.0 : max(_1233, 0.0)));
    }
    else
    {
        _1241 = _929;
        _1242 = _929;
        _1243 = _929;
        _1244 = _929;
        _1245 = _929;
        _1246 = _929;
        _1247 = _929;
        _1248 = _929;
        _1249 = _929;
        _1250 = _929;
        _1251 = _929;
        _1252 = _929;
        _1253 = 0.0;
        _1254 = 0.0;
        _1255 = 0.0;
    }
    float _1265 = (cbModelParam._m0[1u].x * (_1253 - _941)) + _941;
    float _1266 = (cbModelParam._m0[1u].x * (_1254 - _942)) + _942;
    float _1267 = (cbModelParam._m0[1u].x * (_1255 - _943)) + _943;
    float _1288 = fma(_1267, cbSceneParam._m0[89u].z, fma(_1266, cbSceneParam._m0[89u].y, _1265 * cbSceneParam._m0[89u].x));
    float _1291 = fma(_1267, cbSceneParam._m0[90u].z, fma(_1266, cbSceneParam._m0[90u].y, _1265 * cbSceneParam._m0[90u].x));
    float _1294 = fma(_1267, cbSceneParam._m0[91u].z, fma(_1266, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1265));
    float _1309 = _533 * 0.5;
    float _1310 = _534 * 0.5;
    float _1311 = _535 * 0.5;
    float _1312 = dot(vec4(_1309, _1310, _1311, 1.0), vec4(_1243, _1246, _1249, _1252));
    float _1315 = dot(vec4(_1309, _1310, _1311, 1.0), vec4(_1242, _1245, _1248, _1251));
    float _1318 = dot(vec4(_1309, _1310, _1311, 1.0), vec4(_1241, _1244, _1247, _1250));
    float _1352;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1325 = dot(vec4(_1309, _1310, _1311, 1.0), vec4(_928, _932, _935, _938));
        float _1329 = dot(vec4(_1309, _1310, _1311, 1.0), vec4(_930, _933, _936, _939));
        float _1333 = dot(vec4(_1309, _1310, _1311, 1.0), vec4(_931, _934, _937, _940));
        float _1340 = dot(vec4(cbModelParam._m0[39u]), vec4(_1309, _1310, _1311, 1.0));
        _1352 = dot(vec3(isnan(0.0) ? _1333 : (isnan(_1333) ? 0.0 : max(_1333, 0.0)), isnan(0.0) ? _1329 : (isnan(_1329) ? 0.0 : max(_1329, 0.0)), isnan(0.0) ? _1325 : (isnan(_1325) ? 0.0 : max(_1325, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1340) ? 0.0 : (isnan(0.0) ? _1340 : max(0.0, _1340))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1352 = 1.0;
    }
    float _1363;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1354 = dot(vec4(cbModelParam._m0[40u]), vec4(_1309, _1310, _1311, 1.0));
        _1363 = dot(vec3(isnan(0.0) ? _1312 : (isnan(_1312) ? 0.0 : max(_1312, 0.0)), isnan(0.0) ? _1315 : (isnan(_1315) ? 0.0 : max(_1315, 0.0)), isnan(0.0) ? _1318 : (isnan(_1318) ? 0.0 : max(_1318, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1354) ? 0.0 : (isnan(0.0) ? _1354 : max(0.0, _1354))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1363 = 1.0;
    }
    float _1367 = (_1363 * cbModelParam._m0[1u].x) + (_1352 * (1.0 - cbModelParam._m0[1u].x));
    float _1377 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _346);
    float _1378 = isnan(_1377) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1377 : min(cbModelParam._m0[25u].z, _1377));
    float _1460;
    float _1462;
    float _1464;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1427 = fma(_597, cbModelParam._m0[13u].z, fma(_593, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _589)) + cbModelParam._m0[13u].w;
        float _1431 = fma(_597, cbModelParam._m0[14u].z, fma(_593, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _589)) + cbModelParam._m0[14u].w;
        float _1435 = fma(_597, cbModelParam._m0[15u].z, fma(_593, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _589)) + cbModelParam._m0[15u].w;
        float _1438 = fma(_535, cbModelParam._m0[13u].z, fma(_534, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _533));
        float _1441 = fma(_535, cbModelParam._m0[14u].z, fma(_534, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _533));
        float _1444 = fma(_535, cbModelParam._m0[15u].z, fma(_534, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _533));
        float _1472;
        if (_1438 > 0.0)
        {
            _1472 = abs((1.0 - _1427) / _1438);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1438 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1427 + 1.0) / _1438);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1472 = frontier_phi_17_15_ladder;
        }
        float _1700;
        if (_1441 > 0.0)
        {
            _1700 = abs((1.0 - _1431) / _1441);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1441 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1431 + 1.0) / _1441);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1700 = frontier_phi_26_22_ladder;
        }
        float _1957;
        if (_1444 > 0.0)
        {
            _1957 = abs((1.0 - _1435) / _1444);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1444 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1435 + 1.0) / _1444);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _1957 = frontier_phi_38_33_ladder;
        }
        float _1959 = isnan(_1700) ? _1472 : (isnan(_1472) ? _1700 : min(_1472, _1700));
        float _1960 = isnan(_1957) ? _1959 : (isnan(_1959) ? _1957 : min(_1959, _1957));
        float _1964 = (_1960 * _1438) + _1427;
        float _1965 = (_1960 * _1441) + _1431;
        float _1966 = (_1960 * _1444) + _1435;
        float _1967 = _1960 * 9.9999997473787516355514526367188e-05;
        float _1969 = (-1.0) - _1967;
        float _1971 = _1967 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_1966 > _1971) || ((_1966 < _1969) || ((_1965 > _1971) || ((_1965 < _1969) || ((_1964 < _1969) || (_1964 > _1971))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2094 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1966, cbModelParam._m0[9u].z, fma(_1965, cbModelParam._m0[9u].y, _1964 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1966, cbModelParam._m0[10u].z, fma(_1965, cbModelParam._m0[10u].y, _1964 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1966, cbModelParam._m0[11u].z, fma(_1965, cbModelParam._m0[11u].y, _1964 * cbModelParam._m0[11u].x))), _1378);
            frontier_phi_16_38_ladder = _2094.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2094.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2094.x * cbModelParam._m0[1u].y;
        }
        _1460 = frontier_phi_16_38_ladder_2;
        _1462 = frontier_phi_16_38_ladder_1;
        _1464 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1448 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_533, _534, _535), _1378);
        _1460 = _1448.x * cbModelParam._m0[1u].y;
        _1462 = _1448.y * cbModelParam._m0[1u].y;
        _1464 = _1448.z * cbModelParam._m0[1u].y;
    }
    float _1468 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _346);
    float _1469 = isnan(_1468) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1468 : min(cbModelParam._m0[25u].w, _1468));
    float _1562;
    float _1564;
    float _1566;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1526 = fma(_597, cbModelParam._m0[21u].z, fma(_593, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _589)) + cbModelParam._m0[21u].w;
        float _1530 = fma(_597, cbModelParam._m0[22u].z, fma(_593, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _589)) + cbModelParam._m0[22u].w;
        float _1534 = fma(_597, cbModelParam._m0[23u].z, fma(_593, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _589)) + cbModelParam._m0[23u].w;
        float _1537 = fma(_535, cbModelParam._m0[21u].z, fma(_534, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _533));
        float _1540 = fma(_535, cbModelParam._m0[22u].z, fma(_534, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _533));
        float _1543 = fma(_535, cbModelParam._m0[23u].z, fma(_534, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _533));
        float _1705;
        if (_1537 > 0.0)
        {
            _1705 = abs((1.0 - _1526) / _1537);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1537 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1526 + 1.0) / _1537);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1705 = frontier_phi_28_24_ladder;
        }
        float _1984;
        if (_1540 > 0.0)
        {
            _1984 = abs((1.0 - _1530) / _1540);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1540 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1530 + 1.0) / _1540);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1984 = frontier_phi_40_35_ladder;
        }
        float _2197;
        if (_1543 > 0.0)
        {
            _2197 = abs((1.0 - _1534) / _1543);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1543 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1534 + 1.0) / _1543);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2197 = frontier_phi_49_46_ladder;
        }
        float _2199 = isnan(_1984) ? _1705 : (isnan(_1705) ? _1984 : min(_1705, _1984));
        float _2200 = isnan(_2197) ? _2199 : (isnan(_2199) ? _2197 : min(_2199, _2197));
        float _2204 = (_2200 * _1537) + _1526;
        float _2205 = (_2200 * _1540) + _1530;
        float _2206 = (_2200 * _1543) + _1534;
        float _2207 = _2200 * 9.9999997473787516355514526367188e-05;
        float _2208 = (-1.0) - _2207;
        float _2210 = _2207 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2206 > _2210) || ((_2206 < _2208) || ((_2205 > _2210) || ((_2205 < _2208) || ((_2204 < _2208) || (_2204 > _2210))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2434 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2206, cbModelParam._m0[17u].z, fma(_2205, cbModelParam._m0[17u].y, _2204 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2206, cbModelParam._m0[18u].z, fma(_2205, cbModelParam._m0[18u].y, _2204 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2206, cbModelParam._m0[19u].z, fma(_2205, cbModelParam._m0[19u].y, _2204 * cbModelParam._m0[19u].x))), _1469);
            frontier_phi_25_49_ladder = _2434.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2434.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2434.x * cbModelParam._m0[1u].z;
        }
        _1562 = frontier_phi_25_49_ladder_2;
        _1564 = frontier_phi_25_49_ladder_1;
        _1566 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1546 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_533, _534, _535), _1469);
        _1562 = _1546.x * cbModelParam._m0[1u].z;
        _1564 = _1546.y * cbModelParam._m0[1u].z;
        _1566 = _1546.z * cbModelParam._m0[1u].z;
    }
    float _1579 = (((_560 * _510) + _561) * _525) * ((cbModelParam._m0[1u].w * (_1562 - _1460)) + _1460);
    float _1581 = (((_560 * _512) + _561) * _525) * ((cbModelParam._m0[1u].w * (_1564 - _1462)) + _1462);
    float _1583 = (((_560 * _513) + _561) * _525) * ((cbModelParam._m0[1u].w * (_1566 - _1464)) + _1464);
    float _1586 = fma(_1583, cbSceneParam._m0[89u].z, fma(_1581, cbSceneParam._m0[89u].y, _1579 * cbSceneParam._m0[89u].x));
    float _1589 = fma(_1583, cbSceneParam._m0[90u].z, fma(_1581, cbSceneParam._m0[90u].y, _1579 * cbSceneParam._m0[90u].x));
    float _1592 = fma(_1583, cbSceneParam._m0[91u].z, fma(_1581, cbSceneParam._m0[91u].y, _1579 * cbSceneParam._m0[91u].x));
    vec4 _1600 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_445, _446));
    float _1602 = _1600.w;
    float _1614 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1602);
    float _1615 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1602);
    float _1616 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1602);
    uvec4 _1620 = floatBitsToUint(cbInstanceData._m0[_485 + 5u]);
    uint _1622 = _1620.x * 14u;
    uint _1623 = _1622 + 13u;
    float _1630 = _525 + (-1.0);
    float _1635 = (cbLight._m0[_1623].x * _1630) + 1.0;
    float _1636 = (cbLight._m0[_1623].y * _1630) + 1.0;
    float _1637 = (cbLight._m0[_1623].z * _1630) + 1.0;
    float _1638 = (cbLight._m0[_1623].w * _1630) + 1.0;
    uint _1639 = _1622 + 5u;
    float _1645 = isnan(1.0) ? _1636 : (isnan(_1636) ? 1.0 : min(_1636, 1.0));
    uint _1649 = _1622 + 4u;
    float _1659 = isnan(1.0) ? _1635 : (isnan(_1635) ? 1.0 : min(_1635, 1.0));
    uint _1663 = _1622 | 1u;
    float _1674 = dot(vec3(cbLight._m0[_1622].xyz), vec3(_343, _344, _345));
    float _1677 = dot(vec3(cbLight._m0[_1663].xyz), vec3(_343, _344, _345));
    float _3892 = isnan(0.0) ? _1674 : (isnan(_1674) ? 0.0 : max(_1674, 0.0));
    float _3903 = isnan(0.0) ? _1677 : (isnan(_1677) ? 0.0 : max(_1677, 0.0));
    float _1682 = (isnan(1.0) ? _3892 : (isnan(_3892) ? 1.0 : min(_3892, 1.0))) * 0.3183098733425140380859375;
    float _1684 = (isnan(1.0) ? _3903 : (isnan(_3903) ? 1.0 : min(_3903, 1.0))) * 0.3183098733425140380859375;
    float _1691 = ((cbLight._m0[_1639].x * _1645) * _1684) + (((cbLight._m0[_1649].x * _1614) * _1659) * _1682);
    float _1692 = ((_1645 * cbLight._m0[_1639].y) * _1684) + (((cbLight._m0[_1649].y * _1615) * _1659) * _1682);
    float _1693 = ((_1645 * cbLight._m0[_1639].z) * _1684) + (((cbLight._m0[_1649].z * _1616) * _1659) * _1682);
    uvec4 _1697 = floatBitsToUint(cbLight._m0[_1622 + 12u]);
    bool _1699 = _1697.x == 0u;
    float _1710;
    float _1712;
    float _1714;
    if (_1699)
    {
        _1710 = _1691;
        _1712 = _1692;
        _1714 = _1693;
    }
    else
    {
        uint _1718 = _1622 + 6u;
        float _1734 = (dot(vec3(cbLight._m0[_1622 + 2u].xyz), vec3(_343, _344, _345)) * 0.5) + 0.5;
        float _1735 = _1734 * _1734;
        float _3914 = isnan(0.0) ? _1735 : (isnan(_1735) ? 0.0 : max(_1735, 0.0));
        float _1736 = isnan(1.0) ? _3914 : (isnan(_3914) ? 1.0 : min(_3914, 1.0));
        float _1737 = isnan(1.0) ? _1637 : (isnan(_1637) ? 1.0 : min(_1637, 1.0));
        _1710 = (((cbLight._m0[_1718].x * 0.3183098733425140380859375) * _1736) * _1737) + _1691;
        _1712 = (((cbLight._m0[_1718].y * 0.3183098733425140380859375) * _1736) * _1737) + _1692;
        _1714 = (((cbLight._m0[_1718].z * 0.3183098733425140380859375) * _1736) * _1737) + _1693;
    }
    bool _1717 = _1697.y == 0u;
    float _1755;
    float _1757;
    float _1759;
    if (_1717)
    {
        _1755 = _1710;
        _1757 = _1712;
        _1759 = _1714;
    }
    else
    {
        uint _1928 = _1622 + 7u;
        float _1944 = (dot(vec3(cbLight._m0[_1622 + 3u].xyz), vec3(_343, _344, _345)) * 0.5) + 0.5;
        float _1945 = _1944 * _1944;
        float _3930 = isnan(0.0) ? _1945 : (isnan(_1945) ? 0.0 : max(_1945, 0.0));
        float _1946 = isnan(1.0) ? _3930 : (isnan(_3930) ? 1.0 : min(_3930, 1.0));
        float _1947 = isnan(1.0) ? _1638 : (isnan(_1638) ? 1.0 : min(_1638, 1.0));
        _1755 = (((cbLight._m0[_1928].x * 0.3183098733425140380859375) * _1946) * _1947) + _1710;
        _1757 = (((cbLight._m0[_1928].y * 0.3183098733425140380859375) * _1946) * _1947) + _1712;
        _1759 = (((cbLight._m0[_1928].z * 0.3183098733425140380859375) * _1946) * _1947) + _1714;
    }
    uint _1762 = _1622 + 8u;
    float _1775 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1622].w)) * _346) * 0.949999988079071044921875);
    float _1776 = _1775 * _1775;
    float _1777 = cbLight._m0[_1622].x + _424;
    float _1778 = cbLight._m0[_1622].y + _425;
    float _1779 = cbLight._m0[_1622].z + _426;
    float _1783 = inversesqrt(dot(vec3(_1777, _1778, _1779), vec3(_1777, _1778, _1779)));
    float _1784 = _1783 * _1777;
    float _1785 = _1783 * _1778;
    float _1786 = _1783 * _1779;
    float _1787 = dot(vec3(_343, _344, _345), vec3(cbLight._m0[_1622].xyz));
    float _3946 = isnan(0.0) ? _1787 : (isnan(_1787) ? 0.0 : max(_1787, 0.0));
    float _1790 = isnan(1.0) ? _3946 : (isnan(_3946) ? 1.0 : min(_3946, 1.0));
    float _3957 = isnan(0.0) ? _526 : (isnan(_526) ? 0.0 : max(_526, 0.0));
    float _1791 = isnan(1.0) ? _3957 : (isnan(_3957) ? 1.0 : min(_3957, 1.0));
    float _1792 = dot(vec3(_343, _344, _345), vec3(_1784, _1785, _1786));
    float _3968 = isnan(0.0) ? _1792 : (isnan(_1792) ? 0.0 : max(_1792, 0.0));
    float _1795 = isnan(1.0) ? _3968 : (isnan(_3968) ? 1.0 : min(_3968, 1.0));
    float _1796 = dot(vec3(cbLight._m0[_1622].xyz), vec3(_1784, _1785, _1786));
    float _3979 = isnan(0.0) ? _1796 : (isnan(_1796) ? 0.0 : max(_1796, 0.0));
    float _1800 = _1776 * _1776;
    float _1804 = ((_1795 * _1795) * (_1800 + (-1.0))) + 1.0;
    float _1812 = exp2(log2(1.0 - (isnan(1.0) ? _3979 : (isnan(_3979) ? 1.0 : min(_3979, 1.0)))) * 5.0);
    float _1813 = 0.959999978542327880859375 - _507;
    float _1815 = 0.959999978542327880859375 - _508;
    float _1816 = 0.959999978542327880859375 - _509;
    float _1823 = 1.0 - _1776;
    float _1834 = (0.5 / (((_1791 * ((_1790 * _1823) + _1776)) + 9.9999999392252902907785028219223e-09) + (((_1791 * _1823) + _1776) * _1790))) * _1790;
    float _3990 = isnan(0.0) ? _1834 : (isnan(_1834) ? 0.0 : max(_1834, 0.0));
    float _1836 = (isnan(1.0) ? _3990 : (isnan(_3990) ? 1.0 : min(_3990, 1.0))) * (_1800 / ((_1804 * _1804) * 3.141590118408203125));
    uint _1850 = _1622 + 9u;
    float _1861 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1663].w)) * _346) * 0.949999988079071044921875);
    float _1862 = _1861 * _1861;
    float _1863 = cbLight._m0[_1663].x + _424;
    float _1864 = cbLight._m0[_1663].y + _425;
    float _1865 = cbLight._m0[_1663].z + _426;
    float _1869 = inversesqrt(dot(vec3(_1863, _1864, _1865), vec3(_1863, _1864, _1865)));
    float _1870 = _1869 * _1863;
    float _1871 = _1869 * _1864;
    float _1872 = _1869 * _1865;
    float _1873 = dot(vec3(_343, _344, _345), vec3(cbLight._m0[_1663].xyz));
    float _4001 = isnan(0.0) ? _1873 : (isnan(_1873) ? 0.0 : max(_1873, 0.0));
    float _1876 = isnan(1.0) ? _4001 : (isnan(_4001) ? 1.0 : min(_4001, 1.0));
    float _1877 = dot(vec3(_343, _344, _345), vec3(_1870, _1871, _1872));
    float _4012 = isnan(0.0) ? _1877 : (isnan(_1877) ? 0.0 : max(_1877, 0.0));
    float _1880 = isnan(1.0) ? _4012 : (isnan(_4012) ? 1.0 : min(_4012, 1.0));
    float _1881 = dot(vec3(cbLight._m0[_1663].xyz), vec3(_1870, _1871, _1872));
    float _4023 = isnan(0.0) ? _1881 : (isnan(_1881) ? 0.0 : max(_1881, 0.0));
    float _1885 = _1862 * _1862;
    float _1889 = ((_1880 * _1880) * (_1885 + (-1.0))) + 1.0;
    float _1896 = exp2(log2(1.0 - (isnan(1.0) ? _4023 : (isnan(_4023) ? 1.0 : min(_4023, 1.0)))) * 5.0);
    float _1903 = 1.0 - _1862;
    float _1913 = (0.5 / (((_1791 * ((_1876 * _1903) + _1862)) + 9.9999999392252902907785028219223e-09) + (((_1791 * _1903) + _1862) * _1876))) * _1876;
    float _4034 = isnan(0.0) ? _1913 : (isnan(_1913) ? 0.0 : max(_1913, 0.0));
    float _1915 = (isnan(1.0) ? _4034 : (isnan(_4034) ? 1.0 : min(_4034, 1.0))) * (_1885 / ((_1889 * _1889) * 3.141590118408203125));
    float _1925 = (((((_1896 * _1813) + _510) * cbLight._m0[_1850].x) * _1915) * _1645) + ((((cbLight._m0[_1762].x * _1614) * ((_1812 * _1813) + _510)) * _1836) * _1659);
    float _1926 = (((((_1896 * _1815) + _512) * cbLight._m0[_1850].y) * _1915) * _1645) + ((((cbLight._m0[_1762].y * _1615) * ((_1812 * _1815) + _512)) * _1836) * _1659);
    float _1927 = (((((_1896 * _1816) + _513) * cbLight._m0[_1850].z) * _1915) * _1645) + ((((cbLight._m0[_1762].z * _1616) * ((_1812 * _1816) + _513)) * _1836) * _1659);
    float _1989;
    float _1991;
    float _1993;
    if (_1699)
    {
        _1989 = _1925;
        _1991 = _1926;
        _1993 = _1927;
    }
    else
    {
        uint _1995 = _1622 + 2u;
        uint _1999 = _1622 + 10u;
        float _2013 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1995].w)) * _346) * 0.949999988079071044921875);
        float _2014 = _2013 * _2013;
        float _2015 = cbLight._m0[_1995].x + _424;
        float _2016 = cbLight._m0[_1995].y + _425;
        float _2017 = cbLight._m0[_1995].z + _426;
        float _2021 = inversesqrt(dot(vec3(_2015, _2016, _2017), vec3(_2015, _2016, _2017)));
        float _2022 = _2021 * _2015;
        float _2023 = _2021 * _2016;
        float _2024 = _2021 * _2017;
        float _2025 = dot(vec3(_343, _344, _345), vec3(cbLight._m0[_1995].xyz));
        float _4045 = isnan(0.0) ? _2025 : (isnan(_2025) ? 0.0 : max(_2025, 0.0));
        float _2028 = isnan(1.0) ? _4045 : (isnan(_4045) ? 1.0 : min(_4045, 1.0));
        float _2029 = dot(vec3(_343, _344, _345), vec3(_2022, _2023, _2024));
        float _4056 = isnan(0.0) ? _2029 : (isnan(_2029) ? 0.0 : max(_2029, 0.0));
        float _2032 = isnan(1.0) ? _4056 : (isnan(_4056) ? 1.0 : min(_4056, 1.0));
        float _2033 = dot(vec3(cbLight._m0[_1995].xyz), vec3(_2022, _2023, _2024));
        float _4067 = isnan(0.0) ? _2033 : (isnan(_2033) ? 0.0 : max(_2033, 0.0));
        float _2037 = _2014 * _2014;
        float _2041 = ((_2032 * _2032) * (_2037 + (-1.0))) + 1.0;
        float _2048 = exp2(log2(1.0 - (isnan(1.0) ? _4067 : (isnan(_4067) ? 1.0 : min(_4067, 1.0)))) * 5.0);
        float _2055 = 1.0 - _2014;
        float _2065 = (0.5 / (((_1791 * ((_2028 * _2055) + _2014)) + 9.9999999392252902907785028219223e-09) + (((_1791 * _2055) + _2014) * _2028))) * _2028;
        float _4078 = isnan(0.0) ? _2065 : (isnan(_2065) ? 0.0 : max(_2065, 0.0));
        float _2067 = (isnan(1.0) ? _4078 : (isnan(_4078) ? 1.0 : min(_4078, 1.0))) * (_2037 / ((_2041 * _2041) * 3.141590118408203125));
        float _2068 = isnan(1.0) ? _1637 : (isnan(_1637) ? 1.0 : min(_1637, 1.0));
        _1989 = (((((_2048 * _1813) + _510) * cbLight._m0[_1999].x) * _2067) * _2068) + _1925;
        _1991 = (((((_2048 * _1815) + _512) * cbLight._m0[_1999].y) * _2067) * _2068) + _1926;
        _1993 = (((((_2048 * _1816) + _513) * cbLight._m0[_1999].z) * _2067) * _2068) + _1927;
    }
    float _2103;
    float _2105;
    float _2107;
    if (_1717)
    {
        _2103 = _1989;
        _2105 = _1991;
        _2107 = _1993;
    }
    else
    {
        uint _2114 = _1622 + 3u;
        uint _2118 = _1622 + 11u;
        float _2132 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2114].w)) * _346) * 0.949999988079071044921875);
        float _2133 = _2132 * _2132;
        float _2134 = cbLight._m0[_2114].x + _424;
        float _2135 = cbLight._m0[_2114].y + _425;
        float _2136 = cbLight._m0[_2114].z + _426;
        float _2140 = inversesqrt(dot(vec3(_2134, _2135, _2136), vec3(_2134, _2135, _2136)));
        float _2141 = _2140 * _2134;
        float _2142 = _2140 * _2135;
        float _2143 = _2140 * _2136;
        float _2144 = dot(vec3(_343, _344, _345), vec3(cbLight._m0[_2114].xyz));
        float _4094 = isnan(0.0) ? _2144 : (isnan(_2144) ? 0.0 : max(_2144, 0.0));
        float _2147 = isnan(1.0) ? _4094 : (isnan(_4094) ? 1.0 : min(_4094, 1.0));
        float _2148 = dot(vec3(_343, _344, _345), vec3(_2141, _2142, _2143));
        float _4105 = isnan(0.0) ? _2148 : (isnan(_2148) ? 0.0 : max(_2148, 0.0));
        float _2151 = isnan(1.0) ? _4105 : (isnan(_4105) ? 1.0 : min(_4105, 1.0));
        float _2152 = dot(vec3(cbLight._m0[_2114].xyz), vec3(_2141, _2142, _2143));
        float _4116 = isnan(0.0) ? _2152 : (isnan(_2152) ? 0.0 : max(_2152, 0.0));
        float _2156 = _2133 * _2133;
        float _2160 = ((_2151 * _2151) * (_2156 + (-1.0))) + 1.0;
        float _2167 = exp2(log2(1.0 - (isnan(1.0) ? _4116 : (isnan(_4116) ? 1.0 : min(_4116, 1.0)))) * 5.0);
        float _2174 = 1.0 - _2133;
        float _2184 = (0.5 / (((_1791 * ((_2147 * _2174) + _2133)) + 9.9999999392252902907785028219223e-09) + (((_1791 * _2174) + _2133) * _2147))) * _2147;
        float _4127 = isnan(0.0) ? _2184 : (isnan(_2184) ? 0.0 : max(_2184, 0.0));
        float _2186 = (isnan(1.0) ? _4127 : (isnan(_4127) ? 1.0 : min(_4127, 1.0))) * (_2156 / ((_2160 * _2160) * 3.141590118408203125));
        float _2187 = isnan(1.0) ? _1638 : (isnan(_1638) ? 1.0 : min(_1638, 1.0));
        _2103 = (((((_2167 * _1813) + _510) * cbLight._m0[_2118].x) * _2186) * _2187) + _1989;
        _2105 = (((((_2167 * _1815) + _512) * cbLight._m0[_2118].y) * _2186) * _2187) + _1991;
        _2107 = (((((_2167 * _1816) + _513) * cbLight._m0[_2118].z) * _2186) * _2187) + _1993;
    }
    float _2322;
    float _2324;
    float _2326;
    float _2328;
    float _2330;
    float _2332;
    if (_1620.y == 0u)
    {
        float _2262 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2263 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2262;
        float _2264 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2262;
        float _2265 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2262;
        uvec4 _2277 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2278 = _2277.x;
        uint _2289 = uint((float(_2277.y) * floor(float(uint(cbSceneParam._m0[85u].y * _446) / _2278))) + floor(float(uint(cbSceneParam._m0[85u].x * _445) / _2278)));
        float _2299 = (log2(_2265 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2300 = isnan(0.0) ? _2299 : (isnan(_2299) ? 0.0 : max(_2299, 0.0));
        uint _2303 = uint(isnan(14.0) ? _2300 : (isnan(_2300) ? 14.0 : min(_2300, 14.0)));
        uvec4 _2308 = texelFetch(g_lightClusterGridBuffer, int(((_2303 << 2u) + (_2289 << 6u)) >> 2u));
        uint _2309 = _2308.x;
        uint _2310 = _2277.z;
        float _2439;
        float _2441;
        float _2443;
        float _2445;
        float _2447;
        float _2449;
        if (((((1u << ((_2310 >> 4u) & 15u)) + 4294967295u) & _2309) == 0u) || ((_2310 & 240u) == 0u))
        {
            _2439 = 0.0;
            _2441 = 0.0;
            _2443 = 0.0;
            _2445 = 0.0;
            _2447 = 0.0;
            _2449 = 0.0;
        }
        else
        {
            float _2440;
            float _2442;
            float _2444;
            float _2446;
            float _2448;
            float _2450;
            float _2600 = 0.0;
            float _2601 = 0.0;
            float _2602 = 0.0;
            float _2603 = 0.0;
            float _2604 = 0.0;
            float _2605 = 0.0;
            uint _2606 = 0u;
            uint _2615;
            bool _2616;
            for (;;)
            {
                _2615 = texelFetch(g_lightClassification, int((((_2303 << 5u) + (_2289 << 9u)) + (_2606 << 2u)) >> 2u)).x;
                _2616 = _2615 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2616)
                {
                    frontier_phi_66_pred = _2600;
                    frontier_phi_66_pred_1 = _2605;
                    frontier_phi_66_pred_2 = _2604;
                    frontier_phi_66_pred_3 = _2603;
                    frontier_phi_66_pred_4 = _2602;
                    frontier_phi_66_pred_5 = _2601;
                }
                else
                {
                    float _2745;
                    float _2746;
                    float _2747;
                    float _2748;
                    float _2749;
                    float _2750;
                    uint _2751;
                    _2745 = _2600;
                    _2746 = _2601;
                    _2747 = _2602;
                    _2748 = _2603;
                    _2749 = _2604;
                    _2750 = _2605;
                    _2751 = _2615;
                    float _2672;
                    float _2673;
                    float _2674;
                    float _2675;
                    float _2676;
                    float _2677;
                    for (;;)
                    {
                        uint _2755 = uint(findLSB(_2751)) + (_2606 << 5u);
                        uint _2752 = (_2751 + 4294967295u) & _2751;
                        uint _2757 = _2755 * 48u;
                        vec4 _2771 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2757)).x, texelFetch(g_PointLightRenderingBuffer, int(_2757 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2757 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2757 + 3u)).x));
                        uint _2777 = (_2755 * 48u) + 4u;
                        vec4 _2790 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2777)).x, texelFetch(g_PointLightRenderingBuffer, int(_2777 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2777 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2777 + 3u)).x));
                        uint _2796 = (_2755 * 48u) + 8u;
                        vec3 _2807 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2796)).x, texelFetch(g_PointLightRenderingBuffer, int(_2796 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2796 + 2u)).x));
                        float _2811 = _2771.x - _2263;
                        float _2812 = _2771.y - _2264;
                        float _2813 = _2771.z - _2265;
                        float _2814 = dot(vec3(_2811, _2812, _2813), vec3(_2811, _2812, _2813));
                        float _2817 = inversesqrt(_2814);
                        float _2818 = _2817 * _2811;
                        float _2819 = _2817 * _2812;
                        float _2820 = _2817 * _2813;
                        float _2821 = dot(vec3(_466, _469, _472), vec3(_2818, _2819, _2820));
                        float _2826 = 1.0 - (_2814 * _2771.w);
                        float _4153 = isnan(0.0) ? _2826 : (isnan(_2826) ? 0.0 : max(_2826, 0.0));
                        float _2827 = isnan(1.0) ? _4153 : (isnan(_4153) ? 1.0 : min(_4153, 1.0));
                        float _2828 = sqrt(_2814) * _2790.w;
                        float _2831 = 1.39999997615814208984375 / (_2828 + 1.39999997615814208984375);
                        float _2832 = _2831 * _2831;
                        float _2835 = ((1.0 - _2832) * _2821) + _2832;
                        float _2838 = _2828 * _2828;
                        float _2842 = ((isnan(0.0) ? _2835 : (isnan(_2835) ? 0.0 : max(_2835, 0.0))) * _2827) / ((_2838 * 0.699999988079071044921875) + 1.0);
                        float _2846 = (-0.0) - _2263;
                        float _2847 = (-0.0) - _2264;
                        float _2848 = (-0.0) - _2265;
                        float _2852 = inversesqrt(dot(vec3(_2846, _2847, _2848), vec3(_2846, _2847, _2848)));
                        float _2853 = _2852 * _2846;
                        float _2854 = _2852 * _2847;
                        float _2855 = _2852 * _2848;
                        float _2863 = exp2(log2(1.0 / ((_2838 * 3.5) + 5.0)) * 0.25);
                        float _2864 = 1.0 - _541;
                        float _2871 = sqrt(1.0 - ((1.0 - (_2864 * _2864)) * (1.0 - (_2863 * _2863))));
                        float _2872 = _2871 * _2871;
                        float _2873 = _2872 * _2872;
                        float _2874 = _2853 + _2818;
                        float _2875 = _2854 + _2819;
                        float _2876 = _2855 + _2820;
                        float _2880 = inversesqrt(dot(vec3(_2874, _2875, _2876), vec3(_2874, _2875, _2876)));
                        float _2884 = dot(vec3(_466, _469, _472), vec3(_2853, _2854, _2855));
                        float _4169 = isnan(0.0) ? _2884 : (isnan(_2884) ? 0.0 : max(_2884, 0.0));
                        float _2887 = isnan(1.0) ? _4169 : (isnan(_4169) ? 1.0 : min(_4169, 1.0));
                        float _2888 = dot(vec3(_466, _469, _472), vec3(_2880 * _2874, _2880 * _2875, _2880 * _2876));
                        float _4180 = isnan(0.0) ? _2888 : (isnan(_2888) ? 0.0 : max(_2888, 0.0));
                        float _2891 = isnan(1.0) ? _4180 : (isnan(_4180) ? 1.0 : min(_4180, 1.0));
                        float _2895 = ((_2891 * _2891) * (_2873 + (-1.0))) + 1.0;
                        float _2896 = _2831 * _2872;
                        float _2897 = _2896 * _2896;
                        float _2900 = ((1.0 - _2897) * _2821) + _2897;
                        float _4191 = isnan(0.0) ? _2900 : (isnan(_2900) ? 0.0 : max(_2900, 0.0));
                        float _2901 = isnan(1.0) ? _4191 : (isnan(_4191) ? 1.0 : min(_4191, 1.0));
                        float _2902 = 1.0 - _2872;
                        float _2912 = (0.5 / (((_2901 * ((_2887 * _2902) + _2872)) + 9.9999999392252902907785028219223e-09) + (((_2901 * _2902) + _2872) * _2887))) * _2901;
                        float _4202 = isnan(0.0) ? _2912 : (isnan(_2912) ? 0.0 : max(_2912, 0.0));
                        float _2923 = (((_2873 * 3.1415927410125732421875) * (isnan(1.0) ? _4202 : (isnan(_4202) ? 1.0 : min(_4202, 1.0)))) / ((_2895 * _2895) * ((_2838 * 2.1991131305694580078125) + 3.141590118408203125))) * _2827;
                        _2675 = (_2842 * _2790.x) + _2748;
                        _2676 = (_2842 * _2790.y) + _2749;
                        _2677 = (_2842 * _2790.z) + _2750;
                        _2672 = (_2923 * _2807.x) + _2745;
                        _2673 = (_2923 * _2807.y) + _2746;
                        _2674 = (_2923 * _2807.z) + _2747;
                        if (_2752 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2745 = _2672;
                            _2746 = _2673;
                            _2747 = _2674;
                            _2748 = _2675;
                            _2749 = _2676;
                            _2750 = _2677;
                            _2751 = _2752;
                        }
                    }
                    frontier_phi_66_pred = _2672;
                    frontier_phi_66_pred_1 = _2677;
                    frontier_phi_66_pred_2 = _2676;
                    frontier_phi_66_pred_3 = _2675;
                    frontier_phi_66_pred_4 = _2674;
                    frontier_phi_66_pred_5 = _2673;
                }
                _2440 = frontier_phi_66_pred;
                _2450 = frontier_phi_66_pred_1;
                _2448 = frontier_phi_66_pred_2;
                _2446 = frontier_phi_66_pred_3;
                _2444 = frontier_phi_66_pred_4;
                _2442 = frontier_phi_66_pred_5;
                uint _2607 = _2606 + 1u;
                if (_2607 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2600 = _2440;
                    _2601 = _2442;
                    _2602 = _2444;
                    _2603 = _2446;
                    _2604 = _2448;
                    _2605 = _2450;
                    _2606 = _2607;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2439 = _2440;
            _2441 = _2442;
            _2443 = _2444;
            _2445 = _2446;
            _2447 = _2448;
            _2449 = _2450;
        }
        uvec4 _2453 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2454 = _2453.z;
        uint _2456 = (_2454 >> 8u) & 15u;
        float _2568;
        float _2570;
        float _2572;
        float _2574;
        float _2576;
        float _2578;
        if (((4294967295u << _2456) & _2309) == 0u)
        {
            _2568 = _2439;
            _2570 = _2441;
            _2572 = _2443;
            _2574 = _2445;
            _2576 = _2447;
            _2578 = _2449;
        }
        else
        {
            float _2593 = inversesqrt(dot(vec3(_2263, _2264, _2265), vec3(_2263, _2264, _2265)));
            float _2594 = _2593 * _2263;
            float _2595 = _2593 * _2264;
            float _2596 = _2593 * _2265;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2456 < ((_2454 >> 12u) & 15u))
            {
                float _2569;
                float _2571;
                float _2573;
                float _2575;
                float _2577;
                float _2579;
                float _2728 = _2439;
                float _2729 = _2441;
                float _2730 = _2443;
                float _2731 = _2445;
                float _2732 = _2447;
                float _2733 = _2449;
                uint _2734 = _2456;
                uint _2743;
                bool _2744;
                for (;;)
                {
                    _2743 = texelFetch(g_lightClassification, int((((_2303 << 5u) + (_2289 << 9u)) + (_2734 << 2u)) >> 2u)).x;
                    _2744 = _2743 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2744)
                    {
                        frontier_phi_77_pred = _2733;
                        frontier_phi_77_pred_1 = _2732;
                        frontier_phi_77_pred_2 = _2731;
                        frontier_phi_77_pred_3 = _2730;
                        frontier_phi_77_pred_4 = _2729;
                        frontier_phi_77_pred_5 = _2728;
                    }
                    else
                    {
                        float _2937;
                        float _2938;
                        float _2939;
                        float _2940;
                        float _2941;
                        float _2942;
                        float _3233;
                        float _3234;
                        float _3235;
                        float _3236;
                        float _3237;
                        float _3238;
                        float _2950 = _2728;
                        float _2951 = _2729;
                        float _2952 = _2730;
                        float _2953 = _2731;
                        float _2954 = _2732;
                        float _2955 = _2733;
                        uint _2956 = _2743;
                        uint _2957;
                        vec4 _2982;
                        float _2983;
                        vec4 _2998;
                        vec3 _3010;
                        vec4 _3026;
                        vec4 _3042;
                        float _3089;
                        bool _3090;
                        for (;;)
                        {
                            uint _2967 = ((_2734 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2956));
                            _2957 = (_2956 + 4294967295u) & _2956;
                            uint _2969 = _2967 * 40u;
                            _2982 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2969)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2969 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2969 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2969 + 3u)).x));
                            _2983 = _2982.w;
                            uint _2985 = (_2967 * 40u) + 4u;
                            _2998 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2985)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2985 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2985 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2985 + 3u)).x));
                            uint _3000 = (_2967 * 40u) + 8u;
                            _3010 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3000)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3000 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3000 + 2u)).x));
                            uint _3013 = (_2967 * 40u) + 16u;
                            _3026 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3013)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3013 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3013 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3013 + 3u)).x));
                            uint _3029 = (_2967 * 40u) + 20u;
                            _3042 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3029)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3029 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3029 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3029 + 3u)).x));
                            uint _3045 = (_2967 * 40u) + 24u;
                            vec4 _3058 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3045)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3045 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3045 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3045 + 3u)).x));
                            uint _3064 = (_2967 * 40u) + 28u;
                            vec4 _3077 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3064)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3064 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3064 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3064 + 3u)).x));
                            _3089 = fma(_2265, _3077.z, fma(_2264, _3077.y, _3077.x * _2263)) + _3077.w;
                            _3090 = !((fma(_2265, _3058.z, fma(_2264, _3058.y, _3058.x * _2263)) + _3058.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3090)
                            {
                                float _3117 = _2982.x - _2263;
                                float _3118 = _2982.y - _2264;
                                float _3119 = _2982.z - _2265;
                                float _3120 = dot(vec3(_3117, _3118, _3119), vec3(_3117, _3118, _3119));
                                float _3123 = inversesqrt(_3120);
                                float _3124 = _3123 * _3117;
                                float _3125 = _3123 * _3118;
                                float _3126 = _3123 * _3119;
                                float _3130 = 1.0 - (_3120 / (_2983 * _2983));
                                float _4213 = isnan(0.0) ? _3130 : (isnan(_3130) ? 0.0 : max(_3130, 0.0));
                                float _3131 = isnan(1.0) ? _4213 : (isnan(_4213) ? 1.0 : min(_4213, 1.0));
                                float _3135 = sqrt(_3120) * _2998.w;
                                float _3137 = 1.39999997615814208984375 / (_3135 + 1.39999997615814208984375);
                                float _3138 = _3137 * _3137;
                                float _3141 = ((1.0 - _3138) * dot(vec3(_3124, _3125, _3126), vec3(_466, _469, _472))) + _3138;
                                float _3144 = _3135 * _3135;
                                float _3148 = (fma(_2265, _3026.z, fma(_2264, _3026.y, _3026.x * _2263)) + _3026.w) / _3089;
                                float _3149 = (fma(_2265, _3042.z, fma(_2264, _3042.y, _3042.x * _2263)) + _3042.w) / _3089;
                                float _3153 = 1.0 - dot(vec2(_3148, _3149), vec2(_3148, _3149));
                                float _4229 = isnan(0.0) ? _3153 : (isnan(_3153) ? 0.0 : max(_3153, 0.0));
                                float _3154 = isnan(1.0) ? _4229 : (isnan(_4229) ? 1.0 : min(_4229, 1.0));
                                float _3155 = _3154 * (((isnan(0.0) ? _3141 : (isnan(_3141) ? 0.0 : max(_3141, 0.0))) * _3131) / ((_3144 * 0.699999988079071044921875) + 1.0));
                                float _3167 = exp2(log2(1.0 / ((_3144 * 3.5) + 5.0)) * 0.25);
                                float _3168 = 1.0 - _541;
                                float _3175 = sqrt(1.0 - ((1.0 - (_3168 * _3168)) * (1.0 - (_3167 * _3167))));
                                float _3176 = _3175 * _3175;
                                float _3177 = _3176 * _3176;
                                float _3178 = _3124 - _2594;
                                float _3179 = _3125 - _2595;
                                float _3180 = _3126 - _2596;
                                float _3184 = inversesqrt(dot(vec3(_3178, _3179, _3180), vec3(_3178, _3179, _3180)));
                                float _3188 = dot(vec3(_466, _469, _472), vec3((-0.0) - _2594, (-0.0) - _2595, (-0.0) - _2596));
                                float _4240 = isnan(0.0) ? _3188 : (isnan(_3188) ? 0.0 : max(_3188, 0.0));
                                float _3191 = isnan(1.0) ? _4240 : (isnan(_4240) ? 1.0 : min(_4240, 1.0));
                                float _3192 = dot(vec3(_466, _469, _472), vec3(_3184 * _3178, _3184 * _3179, _3184 * _3180));
                                float _4251 = isnan(0.0) ? _3192 : (isnan(_3192) ? 0.0 : max(_3192, 0.0));
                                float _3195 = isnan(1.0) ? _4251 : (isnan(_4251) ? 1.0 : min(_4251, 1.0));
                                float _3199 = ((_3195 * _3195) * (_3177 + (-1.0))) + 1.0;
                                float _3200 = _3137 * _3176;
                                float _3201 = _3200 * _3200;
                                float _3207 = ((1.0 - _3201) * dot(vec3(_466, _469, _472), vec3(_3124, _3125, _3126))) + _3201;
                                float _4262 = isnan(0.0) ? _3207 : (isnan(_3207) ? 0.0 : max(_3207, 0.0));
                                float _3208 = isnan(1.0) ? _4262 : (isnan(_4262) ? 1.0 : min(_4262, 1.0));
                                float _3209 = 1.0 - _3176;
                                float _3219 = (0.5 / (((_3208 * ((_3191 * _3209) + _3176)) + 9.9999999392252902907785028219223e-09) + (((_3208 * _3209) + _3176) * _3191))) * _3208;
                                float _4273 = isnan(0.0) ? _3219 : (isnan(_3219) ? 0.0 : max(_3219, 0.0));
                                float _3229 = (_3154 * _3131) * (((_3177 * 3.1415927410125732421875) * (isnan(1.0) ? _4273 : (isnan(_4273) ? 1.0 : min(_4273, 1.0)))) / ((_3199 * _3199) * ((_3144 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3155 * _2998.y;
                                frontier_phi_83_pred_1 = _3155 * _2998.x;
                                frontier_phi_83_pred_2 = _3229 * _3010.z;
                                frontier_phi_83_pred_3 = _3229 * _3010.y;
                                frontier_phi_83_pred_4 = _3229 * _3010.x;
                                frontier_phi_83_pred_5 = _3155 * _2998.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3237 = frontier_phi_83_pred;
                            _3236 = frontier_phi_83_pred_1;
                            _3235 = frontier_phi_83_pred_2;
                            _3234 = frontier_phi_83_pred_3;
                            _3233 = frontier_phi_83_pred_4;
                            _3238 = frontier_phi_83_pred_5;
                            _2940 = _3236 + _2953;
                            _2941 = _3237 + _2954;
                            _2942 = _3238 + _2955;
                            _2937 = _3233 + _2950;
                            _2938 = _3234 + _2951;
                            _2939 = _3235 + _2952;
                            if (_2957 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2950 = _2937;
                                _2951 = _2938;
                                _2952 = _2939;
                                _2953 = _2940;
                                _2954 = _2941;
                                _2955 = _2942;
                                _2956 = _2957;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _2942;
                        frontier_phi_77_pred_1 = _2941;
                        frontier_phi_77_pred_2 = _2940;
                        frontier_phi_77_pred_3 = _2939;
                        frontier_phi_77_pred_4 = _2938;
                        frontier_phi_77_pred_5 = _2937;
                    }
                    _2579 = frontier_phi_77_pred;
                    _2577 = frontier_phi_77_pred_1;
                    _2575 = frontier_phi_77_pred_2;
                    _2573 = frontier_phi_77_pred_3;
                    _2571 = frontier_phi_77_pred_4;
                    _2569 = frontier_phi_77_pred_5;
                    uint _2735 = _2734 + 1u;
                    if (_2735 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2728 = _2569;
                        _2729 = _2571;
                        _2730 = _2573;
                        _2731 = _2575;
                        _2732 = _2577;
                        _2733 = _2579;
                        _2734 = _2735;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2573;
                frontier_phi_58_59_ladder_1 = _2579;
                frontier_phi_58_59_ladder_2 = _2577;
                frontier_phi_58_59_ladder_3 = _2575;
                frontier_phi_58_59_ladder_4 = _2571;
                frontier_phi_58_59_ladder_5 = _2569;
            }
            else
            {
                frontier_phi_58_59_ladder = _2443;
                frontier_phi_58_59_ladder_1 = _2449;
                frontier_phi_58_59_ladder_2 = _2447;
                frontier_phi_58_59_ladder_3 = _2445;
                frontier_phi_58_59_ladder_4 = _2441;
                frontier_phi_58_59_ladder_5 = _2439;
            }
            _2568 = frontier_phi_58_59_ladder_5;
            _2570 = frontier_phi_58_59_ladder_4;
            _2572 = frontier_phi_58_59_ladder;
            _2574 = frontier_phi_58_59_ladder_3;
            _2576 = frontier_phi_58_59_ladder_2;
            _2578 = frontier_phi_58_59_ladder_1;
        }
        float _2583 = isnan(1.0) ? _525 : (isnan(_525) ? 1.0 : min(_525, 1.0));
        _2322 = (_2583 * _2574) + _1755;
        _2324 = (_2583 * _2576) + _1757;
        _2326 = (_2583 * _2578) + _1759;
        _2328 = ((_2568 * _510) * _2583) + _2103;
        _2330 = ((_2570 * _512) * _2583) + _2105;
        _2332 = ((_2572 * _513) * _2583) + _2107;
    }
    else
    {
        _2322 = _1755;
        _2324 = _1757;
        _2326 = _1759;
        _2328 = _2103;
        _2330 = _2105;
        _2332 = _2107;
    }
    uint _2338 = _486 + uint(cbMatDynParam._m0[0u].w);
    float _2344 = ((((cbMtdParam._m0[10u].x * cbMtdParam._m0[12u].y) * _307.x) + cbMtdParam._m0[11u].x) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_2338].x;
    float _2345 = ((((cbMtdParam._m0[10u].y * cbMtdParam._m0[12u].y) * _307.y) + cbMtdParam._m0[11u].y) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_2338].y;
    float _2346 = ((cbMtdParam._m0[11u].z + ((cbMtdParam._m0[10u].z * cbMtdParam._m0[12u].y) * _307.z)) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_2338].z;
    float _4289 = isnan(0.0) ? _500 : (isnan(_500) ? 0.0 : max(_500, 0.0));
    float _4300 = isnan(0.0) ? _501 : (isnan(_501) ? 0.0 : max(_501, 0.0));
    float _4311 = isnan(0.0) ? _502 : (isnan(_502) ? 0.0 : max(_502, 0.0));
    float _2363 = (((isnan(1.0) ? _4289 : (isnan(_4289) ? 1.0 : min(_4289, 1.0))) * (_2322 + ((isnan(0.0) ? _1288 : (isnan(_1288) ? 0.0 : max(_1288, 0.0))) * _525))) + ((_2328 + ((isnan(0.0) ? _1586 : (isnan(_1586) ? 0.0 : max(_1586, 0.0))) * _1367)) * cbPerFrame._m0[3u].x)) + _2344;
    float _2365 = (_2345 + ((_2330 + ((isnan(0.0) ? _1589 : (isnan(_1589) ? 0.0 : max(_1589, 0.0))) * _1367)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4300 : (isnan(_4300) ? 1.0 : min(_4300, 1.0))) * (_2324 + ((isnan(0.0) ? _1291 : (isnan(_1291) ? 0.0 : max(_1291, 0.0))) * _525)));
    float _2367 = (_2346 + ((_2332 + ((isnan(0.0) ? _1592 : (isnan(_1592) ? 0.0 : max(_1592, 0.0))) * _1367)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4311 : (isnan(_4311) ? 1.0 : min(_4311, 1.0))) * (_2326 + ((isnan(0.0) ? _1294 : (isnan(_1294) ? 0.0 : max(_1294, 0.0))) * _525)));
    float _2368 = isnan(0.0) ? _2363 : (isnan(_2363) ? 0.0 : max(_2363, 0.0));
    float _2369 = isnan(0.0) ? _2365 : (isnan(_2365) ? 0.0 : max(_2365, 0.0));
    float _2370 = isnan(0.0) ? _2367 : (isnan(_2367) ? 0.0 : max(_2367, 0.0));
    float _2376 = cbMtdParam._m0[2u].x * _2344;
    float _2377 = cbMtdParam._m0[2u].y * _2345;
    float _2378 = cbMtdParam._m0[2u].z * _2346;
    float _4337 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2380 = isnan(1.0) ? _4337 : (isnan(_4337) ? 1.0 : min(_4337, 1.0));
    uint _2381 = _485 + 6u;
    float _2389 = _445 / cbSceneParam._m0[86u].x;
    float _2390 = _446 / cbSceneParam._m0[86u].y;
    vec4 _2404 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2389, _2390, (log2((isnan(cbSceneParam._m0[77u].w) ? _366 : (isnan(_366) ? cbSceneParam._m0[77u].w : min(_366, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2406 = _2404.x;
    float _2407 = _2404.y;
    float _2408 = _2404.z;
    float _2409 = _2404.w;
    float _2502;
    float _2504;
    float _2506;
    float _2508;
    if (_366 > cbSceneParam._m0[78u].w)
    {
        float _2464 = isnan(_366) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _366 : min(cbSceneParam._m0[80u].w, _366));
        float _2465 = _2464 / _366;
        float _2476 = _2465 * _417;
        float _2477 = _418 * _2465;
        float _2478 = (-0.0) - _2477;
        float _2480 = _2465 * _419;
        float _2482 = (cbSceneParam._m0[77u].w * _2478) / _2464;
        float _2483 = _2482 + cbSceneParam._m0[79u].w;
        float _2484 = cbSceneParam._m0[79u].w - _2477;
        float _2490 = sqrt(((_2476 * _2476) + (_2477 * _2477)) + (_2480 * _2480));
        float _2493 = (1.0 - (cbSceneParam._m0[77u].w / _2464)) * _2490;
        float _2498 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2500 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2685;
        if (abs((_2478 - _2482) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2685 = ((((_2483 > 0.0) ? exp2(_2498 * _2483) : (2.0 - exp2(_2500 * _2483))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2493;
        }
        else
        {
            float _2629 = 1.0 / cbSceneParam._m0[80u].x;
            float _2630 = isnan(_2484) ? _2483 : (isnan(_2483) ? _2484 : max(_2483, _2484));
            float _2631 = isnan(_2484) ? _2483 : (isnan(_2483) ? _2484 : min(_2483, _2484));
            float _2640 = isnan(0.0) ? _2630 : (isnan(_2630) ? 0.0 : min(_2630, 0.0));
            float _2641 = isnan(0.0) ? _2631 : (isnan(_2631) ? 0.0 : min(_2631, 0.0));
            _2685 = ((abs(_2490 / _2478) * cbSceneParam._m0[80u].y) * ((((_2640 - _2641) * 2.0) - ((exp2(_2498 * (isnan(0.0) ? _2630 : (isnan(_2630) ? 0.0 : max(_2630, 0.0)))) - exp2(_2498 * (isnan(0.0) ? _2631 : (isnan(_2631) ? 0.0 : max(_2631, 0.0))))) * _2629)) - ((exp2(_2500 * _2640) - exp2(_2500 * _2641)) * _2629))) + (_2493 * cbSceneParam._m0[80u].z);
        }
        vec4 _2687 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2389, _2390, 1.0), 0.0);
        float _2696 = exp2((_2685 * (-1.44269502162933349609375)) * (1.0 - _2687.w));
        float _2697 = log2(_2696);
        float _2713 = log2(_2409);
        _2502 = (exp2(_2713 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2697 * cbSceneParam._m0[78u].x)) * _2687.x) / cbSceneParam._m0[78u].x)) + _2406;
        _2504 = (exp2(_2713 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2697 * cbSceneParam._m0[78u].y)) * _2687.y) / cbSceneParam._m0[78u].y)) + _2407;
        _2506 = (exp2(_2713 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2697 * cbSceneParam._m0[78u].z)) * _2687.z) / cbSceneParam._m0[78u].z)) + _2408;
        _2508 = _2696 * _2409;
    }
    else
    {
        _2502 = _2406;
        _2504 = _2407;
        _2506 = _2408;
        _2508 = _2409;
    }
    bool _2723;
    vec4 _2517;
    vec4 _2539;
    float _2541;
    float _2545;
    float _2546;
    float _2547;
    float _2550;
    float _2553;
    float _2556;
    float _2557;
    bool _2567;
    for (;;)
    {
        _2517 = cbMatDynParam._m0[0u];
        float _2519 = roundEven(_2517.y);
        bool _2520 = _2519 == 3.0;
        float _2521 = log2(_2508);
        float _2525 = exp2(_2521 * cbSceneParam._m0[78u].x);
        float _2526 = exp2(_2521 * cbSceneParam._m0[78u].y);
        float _2527 = exp2(_2521 * cbSceneParam._m0[78u].z);
        float _2528 = _2525 * _2368;
        float _2529 = _2526 * _2369;
        float _2530 = _2527 * _2370;
        float _2537 = _433 + (-0.5);
        _2539 = cbMtdParam._m0[1u];
        _2541 = _2539.y * _2537;
        float _2544 = (_2519 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2545 = _2544 * (_2520 ? _2528 : (_2528 + (cbSceneParam._m0[72u].w * _2502)));
        _2546 = _2544 * (_2520 ? _2529 : (_2529 + (cbSceneParam._m0[72u].w * _2504)));
        _2547 = _2544 * (_2520 ? _2530 : (_2530 + (cbSceneParam._m0[72u].w * _2506)));
        _2550 = ((_2376 * _2380) * _2525) * _2544;
        _2553 = ((_2377 * _2380) * _2526) * _2544;
        _2556 = ((_2378 * _2380) * _2527) * _2544;
        _2557 = _2537 * 0.999000012874603271484375;
        _2567 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2567)
        {
            if ((cbInstanceData._m0[_485 + 7u].x + _2557) < 0.5)
            {
                _2723 = true;
                break;
            }
        }
        uint _2664 = _486 + uint(_2517.w);
        if ((cbInstanceData._m0[_2664].w < 1.0) && ((cbInstanceData._m0[_2664].w + _2557) < 0.5))
        {
            _2723 = true;
            break;
        }
        if ((_2541 + 1.0) < _2539.x)
        {
            _2723 = true;
            break;
        }
        _2723 = false;
        break;
    }
    float _2928;
    if (_2723)
    {
        discard_state = true;
        _2928 = 0.0;
    }
    else
    {
        _2928 = cbInstanceData._m0[_2381].w;
    }
    SV_Target.x = _2545;
    SV_Target.y = _2546;
    SV_Target.z = _2547;
    SV_Target.w = _2928;
    SV_Target_1.x = _2550;
    SV_Target_1.y = _2553;
    SV_Target_1.z = _2556;
    SV_Target_1.w = cbInstanceData._m0[_2381].w;
    discard_exit();
}


