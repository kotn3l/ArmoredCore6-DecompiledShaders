#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[13];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D P_BS_M1_Emissive_Glow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D P_BS_M1_Emissive_Glow_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D P_BS_M1_Emissive_Glow_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D P_BS_M1_Emissive_Glow_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _886;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _182 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _183 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _184 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _189 = inversesqrt(dot(vec3(_182, _183, _184), vec3(_182, _183, _184)));
    float _196 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _203 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _226 = texture(sampler2D(P_BS_M1_Emissive_Glow_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _232 = _226.x * cbMtdParam._m0[9u].x;
    float _233 = _226.y * cbMtdParam._m0[9u].y;
    float _234 = _226.z * cbMtdParam._m0[9u].z;
    vec4 _246 = texture(sampler2D(P_BS_M1_Emissive_Glow_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _253 = cbMtdParam._m0[12u].x + _246.x;
    vec4 _265 = texture(sampler2D(P_BS_M1_Emissive_Glow_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _269 = _265.z;
    float _273 = (_265.x * 2.0) + (-1.0);
    float _275 = (_265.y * 2.0) + (-1.0);
    float _276 = dot(vec2(_273, _275), vec2(_273, _275));
    float _3542 = isnan(0.0) ? _276 : (isnan(_276) ? 0.0 : max(_276, 0.0));
    float _282 = sqrt(1.0 - (isnan(1.0) ? _3542 : (isnan(_3542) ? 1.0 : min(_3542, 1.0))));
    vec4 _305 = texture(sampler2D(P_BS_M1_Emissive_Glow_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _330 = fma(_282, _196 * NORMAL.x, fma(_275, _203 * TANGENT.x, (_189 * _182) * _273));
    float _333 = fma(_282, _196 * NORMAL.y, fma(_275, _203 * TANGENT.y, (_189 * _183) * _273));
    float _336 = fma(_282, _196 * NORMAL.z, fma(_275, _203 * TANGENT.z, (_189 * _184) * _273));
    float _340 = inversesqrt(dot(vec3(_330, _333, _336), vec3(_330, _333, _336)));
    float _341 = _340 * _330;
    float _342 = _340 * _333;
    float _343 = _340 * _336;
    float _3553 = isnan(0.0) ? _269 : (isnan(_269) ? 0.0 : max(_269, 0.0));
    float _344 = isnan(1.0) ? _3553 : (isnan(_3553) ? 1.0 : min(_3553, 1.0));
    float _3564 = isnan(0.0) ? _232 : (isnan(_232) ? 0.0 : max(_232, 0.0));
    float _3575 = isnan(0.0) ? _233 : (isnan(_233) ? 0.0 : max(_233, 0.0));
    float _3586 = isnan(0.0) ? _234 : (isnan(_234) ? 0.0 : max(_234, 0.0));
    float _3597 = isnan(0.0) ? _253 : (isnan(_253) ? 0.0 : max(_253, 0.0));
    float _348 = isnan(1.0) ? _3597 : (isnan(_3597) ? 1.0 : min(_3597, 1.0));
    float _364 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _405 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _415 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _405);
    float _416 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _405);
    float _417 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _405);
    float _421 = inversesqrt(dot(vec3(_415, _416, _417), vec3(_415, _416, _417)));
    float _422 = _415 * _421;
    float _423 = _416 * _421;
    float _424 = _417 * _421;
    float _430 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _431 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _452 = fma(_343, cbSceneParam._m0[5u].z, fma(_342, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _341));
    float _455 = fma(_343, cbSceneParam._m0[6u].z, fma(_342, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _341));
    float _458 = fma(_343, cbSceneParam._m0[7u].z, fma(_342, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _341));
    uint _471 = uint(roundEven(NORMAL.w)) * 13u;
    uint _472 = _471 + 9u;
    uint _473 = _472 + uint(cbMatDynParam._m0[0u].w);
    float _479 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3564 : (isnan(_3564) ? 1.0 : min(_3564, 1.0)))) * cbInstanceData._m0[_473].x;
    float _480 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3575 : (isnan(_3575) ? 1.0 : min(_3575, 1.0)))) * cbInstanceData._m0[_473].y;
    float _481 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3586 : (isnan(_3586) ? 1.0 : min(_3586, 1.0)))) * cbInstanceData._m0[_473].z;
    float _3608 = isnan(0.0) ? _479 : (isnan(_479) ? 0.0 : max(_479, 0.0));
    float _482 = isnan(1.0) ? _3608 : (isnan(_3608) ? 1.0 : min(_3608, 1.0));
    float _3619 = isnan(0.0) ? _480 : (isnan(_480) ? 0.0 : max(_480, 0.0));
    float _483 = isnan(1.0) ? _3619 : (isnan(_3619) ? 1.0 : min(_3619, 1.0));
    float _3630 = isnan(0.0) ? _481 : (isnan(_481) ? 0.0 : max(_481, 0.0));
    float _484 = isnan(1.0) ? _3630 : (isnan(_3630) ? 1.0 : min(_3630, 1.0));
    float _485 = 1.0 - _348;
    float _486 = _482 * _485;
    float _487 = _483 * _485;
    float _488 = _484 * _485;
    float _493 = (_482 + (-0.039999999105930328369140625)) * _348;
    float _494 = (_483 + (-0.039999999105930328369140625)) * _348;
    float _495 = (_484 + (-0.039999999105930328369140625)) * _348;
    float _496 = _493 + 0.039999999105930328369140625;
    float _498 = _494 + 0.039999999105930328369140625;
    float _499 = _495 + 0.039999999105930328369140625;
    vec4 _508 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _430, cbSceneParam._m0[86u].y * _431));
    float _511 = _508.x * TEXCOORD.z;
    float _512 = dot(vec3(_341, _342, _343), vec3(_422, _423, _424));
    float _515 = _512 * 2.0;
    float _519 = (_515 * _341) - _422;
    float _520 = (_515 * _342) - _423;
    float _521 = (_515 * _343) - _424;
    float _525 = abs(dot(vec3(_422, _423, _424), vec3(_341, _342, _343)));
    float _3641 = isnan(0.0) ? _525 : (isnan(_525) ? 0.0 : max(_525, 0.0));
    float _527 = sqrt(_344);
    float _540 = exp2((_527 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3641 : (isnan(_3641) ? 1.0 : min(_3641, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_527 * 3.0));
    float _546 = (1.0 - _540) * ((_527 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _547 = _540 * _527;
    float _575 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _579 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _583 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _885;
    float _887;
    float _888;
    float _889;
    float _890;
    float _891;
    float _892;
    float _893;
    float _894;
    float _895;
    float _896;
    float _897;
    float _898;
    float _899;
    float _900;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _610 = fma(_583, cbModelParam._m0[26u].z, fma(_579, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _575));
        float _614 = fma(_583, cbModelParam._m0[27u].z, fma(_579, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _575));
        float _618 = fma(_583, cbModelParam._m0[28u].z, fma(_579, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _575));
        float _643 = _575 + _341;
        float _644 = _579 + _342;
        float _645 = _583 + _343;
        float _655 = fma(_645, cbModelParam._m0[26u].z, fma(_644, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _643)) - _610;
        float _656 = fma(_645, cbModelParam._m0[27u].z, fma(_644, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _643)) - _614;
        float _657 = fma(_645, cbModelParam._m0[28u].z, fma(_644, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _643)) - _618;
        float _661 = inversesqrt(dot(vec3(_655, _656, _657), vec3(_655, _656, _657)));
        float _674 = ((_661 * _655) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_610 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _675 = ((_661 * _656) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_614 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _676 = ((_661 * _657) / cbModelParam._m0[34u].z) + ((((((_618 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _679 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_674, _675, _676), 0.0);
        vec4 _686 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_674, _675, _676), 0.0);
        vec4 _693 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_674, _675, _676), 0.0);
        vec4 _700 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_674, _675, _676), 0.0);
        float _713 = exp2((_679.w + (-0.5)) * 20.0) * 2.0;
        float _714 = _713 * (_679.x + (-0.5));
        float _715 = _713 * (_679.y + (-0.5));
        float _716 = _713 * (_679.z + (-0.5));
        float _723 = exp2((_686.w + (-0.5)) * 20.0) * 2.0;
        float _724 = _723 * (_686.x + (-0.5));
        float _725 = _723 * (_686.y + (-0.5));
        float _726 = _723 * (_686.z + (-0.5));
        float _733 = exp2((_693.w + (-0.5)) * 20.0) * 2.0;
        float _734 = _733 * (_693.x + (-0.5));
        float _735 = _733 * (_693.y + (-0.5));
        float _736 = _733 * (_693.z + (-0.5));
        float _743 = exp2((_700.w + (-0.5)) * 20.0) * 2.0;
        float _744 = _743 * (_700.x + (-0.5));
        float _745 = _743 * (_700.y + (-0.5));
        float _746 = _743 * (_700.z + (-0.5));
        float _747 = isnan(0.0) ? _744 : (isnan(_744) ? 0.0 : max(_744, 0.0));
        float _748 = isnan(0.0) ? _745 : (isnan(_745) ? 0.0 : max(_745, 0.0));
        float _749 = isnan(0.0) ? _746 : (isnan(_746) ? 0.0 : max(_746, 0.0));
        float _750 = _714 * 0.5;
        float _751 = _724 * 0.5;
        float _752 = _734 * 0.5;
        float _753 = dot(vec3(_750, _751, _752), vec3(_750, _751, _752));
        float _758 = (_753 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_753);
        float _767 = (dot(vec3(_341, _342, _343), vec3(_758 * _750, _758 * _751, _758 * _752)) + 1.0) * 0.5;
        float _3667 = isnan(0.0) ? _767 : (isnan(_767) ? 0.0 : max(_767, 0.0));
        float _777 = sqrt(((_751 * _751) + (_750 * _750)) + (_752 * _752)) / (_747 + 9.9999997473787516355514526367188e-06);
        float _3678 = isnan(0.0) ? _777 : (isnan(_777) ? 0.0 : max(_777, 0.0));
        float _778 = isnan(1.0) ? _3678 : (isnan(_3678) ? 1.0 : min(_3678, 1.0));
        float _779 = _778 * 2.0;
        float _783 = (1.0 - _778) / (_778 + 1.0);
        float _3689 = isnan(0.0) ? _783 : (isnan(_783) ? 0.0 : max(_783, 0.0));
        float _784 = isnan(1.0) ? _3689 : (isnan(_3689) ? 1.0 : min(_3689, 1.0));
        float _793 = ((((1.0 - _784) * (_779 + 2.0)) * exp2(log2(isnan(1.0) ? _3667 : (isnan(_3667) ? 1.0 : min(_3667, 1.0))) * (_779 + 1.0))) + _784) * _747;
        float _794 = _715 * 0.5;
        float _795 = _725 * 0.5;
        float _796 = _735 * 0.5;
        float _797 = dot(vec3(_794, _795, _796), vec3(_794, _795, _796));
        float _802 = (_797 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_797);
        float _810 = (dot(vec3(_341, _342, _343), vec3(_802 * _794, _802 * _795, _802 * _796)) + 1.0) * 0.5;
        float _3700 = isnan(0.0) ? _810 : (isnan(_810) ? 0.0 : max(_810, 0.0));
        float _819 = sqrt(((_795 * _795) + (_794 * _794)) + (_796 * _796)) / (_748 + 9.9999997473787516355514526367188e-06);
        float _3711 = isnan(0.0) ? _819 : (isnan(_819) ? 0.0 : max(_819, 0.0));
        float _820 = isnan(1.0) ? _3711 : (isnan(_3711) ? 1.0 : min(_3711, 1.0));
        float _821 = _820 * 2.0;
        float _825 = (1.0 - _820) / (_820 + 1.0);
        float _3722 = isnan(0.0) ? _825 : (isnan(_825) ? 0.0 : max(_825, 0.0));
        float _826 = isnan(1.0) ? _3722 : (isnan(_3722) ? 1.0 : min(_3722, 1.0));
        float _835 = ((((1.0 - _826) * (_821 + 2.0)) * exp2(log2(isnan(1.0) ? _3700 : (isnan(_3700) ? 1.0 : min(_3700, 1.0))) * (_821 + 1.0))) + _826) * _748;
        float _836 = _716 * 0.5;
        float _837 = _726 * 0.5;
        float _838 = _736 * 0.5;
        float _839 = dot(vec3(_836, _837, _838), vec3(_836, _837, _838));
        float _844 = (_839 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_839);
        float _852 = (dot(vec3(_341, _342, _343), vec3(_844 * _836, _844 * _837, _844 * _838)) + 1.0) * 0.5;
        float _3733 = isnan(0.0) ? _852 : (isnan(_852) ? 0.0 : max(_852, 0.0));
        float _861 = sqrt(((_837 * _837) + (_836 * _836)) + (_838 * _838)) / (_749 + 9.9999997473787516355514526367188e-06);
        float _3744 = isnan(0.0) ? _861 : (isnan(_861) ? 0.0 : max(_861, 0.0));
        float _862 = isnan(1.0) ? _3744 : (isnan(_3744) ? 1.0 : min(_3744, 1.0));
        float _863 = _862 * 2.0;
        float _867 = (1.0 - _862) / (_862 + 1.0);
        float _3755 = isnan(0.0) ? _867 : (isnan(_867) ? 0.0 : max(_867, 0.0));
        float _868 = isnan(1.0) ? _3755 : (isnan(_3755) ? 1.0 : min(_3755, 1.0));
        float _877 = ((((1.0 - _868) * (_863 + 2.0)) * exp2(log2(isnan(1.0) ? _3733 : (isnan(_3733) ? 1.0 : min(_3733, 1.0))) * (_863 + 1.0))) + _868) * _749;
        _885 = _716;
        _887 = _715;
        _888 = _714;
        _889 = _726;
        _890 = _725;
        _891 = _724;
        _892 = _736;
        _893 = _735;
        _894 = _734;
        _895 = _749;
        _896 = _748;
        _897 = _747;
        _898 = cbModelParam._m0[36u].z * (isnan(0.0) ? _793 : (isnan(_793) ? 0.0 : max(_793, 0.0)));
        _899 = cbModelParam._m0[36u].z * (isnan(0.0) ? _835 : (isnan(_835) ? 0.0 : max(_835, 0.0)));
        _900 = cbModelParam._m0[36u].z * (isnan(0.0) ? _877 : (isnan(_877) ? 0.0 : max(_877, 0.0)));
    }
    else
    {
        _885 = _886;
        _887 = _886;
        _888 = _886;
        _889 = _886;
        _890 = _886;
        _891 = _886;
        _892 = _886;
        _893 = _886;
        _894 = _886;
        _895 = _886;
        _896 = _886;
        _897 = _886;
        _898 = 0.0;
        _899 = 0.0;
        _900 = 0.0;
    }
    float _1195;
    float _1196;
    float _1197;
    float _1198;
    float _1199;
    float _1200;
    float _1201;
    float _1202;
    float _1203;
    float _1204;
    float _1205;
    float _1206;
    float _1207;
    float _1208;
    float _1209;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _926 = fma(_583, cbModelParam._m0[30u].z, fma(_579, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _575));
        float _930 = fma(_583, cbModelParam._m0[31u].z, fma(_579, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _575));
        float _934 = fma(_583, cbModelParam._m0[32u].z, fma(_579, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _575));
        float _957 = _575 + _341;
        float _958 = _579 + _342;
        float _959 = _583 + _343;
        float _969 = fma(_959, cbModelParam._m0[30u].z, fma(_958, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _957)) - _926;
        float _970 = fma(_959, cbModelParam._m0[31u].z, fma(_958, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _957)) - _930;
        float _971 = fma(_959, cbModelParam._m0[32u].z, fma(_958, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _957)) - _934;
        float _975 = inversesqrt(dot(vec3(_969, _970, _971), vec3(_969, _970, _971)));
        float _988 = ((_975 * _969) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_926 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _989 = ((_975 * _970) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_930 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _990 = ((_975 * _971) / cbModelParam._m0[35u].z) + ((((((_934 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _992 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_988, _989, _990), 0.0);
        vec4 _999 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_988, _989, _990), 0.0);
        vec4 _1006 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_988, _989, _990), 0.0);
        vec4 _1013 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_988, _989, _990), 0.0);
        float _1025 = exp2((_992.w + (-0.5)) * 20.0) * 2.0;
        float _1026 = _1025 * (_992.x + (-0.5));
        float _1027 = _1025 * (_992.y + (-0.5));
        float _1028 = _1025 * (_992.z + (-0.5));
        float _1035 = exp2((_999.w + (-0.5)) * 20.0) * 2.0;
        float _1036 = _1035 * (_999.x + (-0.5));
        float _1037 = _1035 * (_999.y + (-0.5));
        float _1038 = _1035 * (_999.z + (-0.5));
        float _1045 = exp2((_1006.w + (-0.5)) * 20.0) * 2.0;
        float _1046 = _1045 * (_1006.x + (-0.5));
        float _1047 = _1045 * (_1006.y + (-0.5));
        float _1048 = _1045 * (_1006.z + (-0.5));
        float _1055 = exp2((_1013.w + (-0.5)) * 20.0) * 2.0;
        float _1056 = _1055 * (_1013.x + (-0.5));
        float _1057 = _1055 * (_1013.y + (-0.5));
        float _1058 = _1055 * (_1013.z + (-0.5));
        float _1059 = isnan(0.0) ? _1056 : (isnan(_1056) ? 0.0 : max(_1056, 0.0));
        float _1060 = isnan(0.0) ? _1057 : (isnan(_1057) ? 0.0 : max(_1057, 0.0));
        float _1061 = isnan(0.0) ? _1058 : (isnan(_1058) ? 0.0 : max(_1058, 0.0));
        float _1062 = _1026 * 0.5;
        float _1063 = _1036 * 0.5;
        float _1064 = _1046 * 0.5;
        float _1065 = dot(vec3(_1062, _1063, _1064), vec3(_1062, _1063, _1064));
        float _1070 = (_1065 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1065);
        float _1078 = (dot(vec3(_341, _342, _343), vec3(_1070 * _1062, _1070 * _1063, _1070 * _1064)) + 1.0) * 0.5;
        float _3796 = isnan(0.0) ? _1078 : (isnan(_1078) ? 0.0 : max(_1078, 0.0));
        float _1087 = sqrt(((_1063 * _1063) + (_1062 * _1062)) + (_1064 * _1064)) / (_1059 + 9.9999997473787516355514526367188e-06);
        float _3807 = isnan(0.0) ? _1087 : (isnan(_1087) ? 0.0 : max(_1087, 0.0));
        float _1088 = isnan(1.0) ? _3807 : (isnan(_3807) ? 1.0 : min(_3807, 1.0));
        float _1089 = _1088 * 2.0;
        float _1093 = (1.0 - _1088) / (_1088 + 1.0);
        float _3818 = isnan(0.0) ? _1093 : (isnan(_1093) ? 0.0 : max(_1093, 0.0));
        float _1094 = isnan(1.0) ? _3818 : (isnan(_3818) ? 1.0 : min(_3818, 1.0));
        float _1103 = ((((1.0 - _1094) * (_1089 + 2.0)) * exp2(log2(isnan(1.0) ? _3796 : (isnan(_3796) ? 1.0 : min(_3796, 1.0))) * (_1089 + 1.0))) + _1094) * _1059;
        float _1104 = _1027 * 0.5;
        float _1105 = _1037 * 0.5;
        float _1106 = _1047 * 0.5;
        float _1107 = dot(vec3(_1104, _1105, _1106), vec3(_1104, _1105, _1106));
        float _1112 = (_1107 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1107);
        float _1120 = (dot(vec3(_341, _342, _343), vec3(_1112 * _1104, _1112 * _1105, _1112 * _1106)) + 1.0) * 0.5;
        float _3829 = isnan(0.0) ? _1120 : (isnan(_1120) ? 0.0 : max(_1120, 0.0));
        float _1129 = sqrt(((_1105 * _1105) + (_1104 * _1104)) + (_1106 * _1106)) / (_1060 + 9.9999997473787516355514526367188e-06);
        float _3840 = isnan(0.0) ? _1129 : (isnan(_1129) ? 0.0 : max(_1129, 0.0));
        float _1130 = isnan(1.0) ? _3840 : (isnan(_3840) ? 1.0 : min(_3840, 1.0));
        float _1131 = _1130 * 2.0;
        float _1135 = (1.0 - _1130) / (_1130 + 1.0);
        float _3851 = isnan(0.0) ? _1135 : (isnan(_1135) ? 0.0 : max(_1135, 0.0));
        float _1136 = isnan(1.0) ? _3851 : (isnan(_3851) ? 1.0 : min(_3851, 1.0));
        float _1145 = ((((1.0 - _1136) * (_1131 + 2.0)) * exp2(log2(isnan(1.0) ? _3829 : (isnan(_3829) ? 1.0 : min(_3829, 1.0))) * (_1131 + 1.0))) + _1136) * _1060;
        float _1146 = _1028 * 0.5;
        float _1147 = _1038 * 0.5;
        float _1148 = _1048 * 0.5;
        float _1149 = dot(vec3(_1146, _1147, _1148), vec3(_1146, _1147, _1148));
        float _1154 = (_1149 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1149);
        float _1162 = (dot(vec3(_341, _342, _343), vec3(_1154 * _1146, _1154 * _1147, _1154 * _1148)) + 1.0) * 0.5;
        float _3862 = isnan(0.0) ? _1162 : (isnan(_1162) ? 0.0 : max(_1162, 0.0));
        float _1171 = sqrt(((_1147 * _1147) + (_1146 * _1146)) + (_1148 * _1148)) / (_1061 + 9.9999997473787516355514526367188e-06);
        float _3873 = isnan(0.0) ? _1171 : (isnan(_1171) ? 0.0 : max(_1171, 0.0));
        float _1172 = isnan(1.0) ? _3873 : (isnan(_3873) ? 1.0 : min(_3873, 1.0));
        float _1173 = _1172 * 2.0;
        float _1177 = (1.0 - _1172) / (_1172 + 1.0);
        float _3884 = isnan(0.0) ? _1177 : (isnan(_1177) ? 0.0 : max(_1177, 0.0));
        float _1178 = isnan(1.0) ? _3884 : (isnan(_3884) ? 1.0 : min(_3884, 1.0));
        float _1187 = ((((1.0 - _1178) * (_1173 + 2.0)) * exp2(log2(isnan(1.0) ? _3862 : (isnan(_3862) ? 1.0 : min(_3862, 1.0))) * (_1173 + 1.0))) + _1178) * _1061;
        _1195 = _1028;
        _1196 = _1027;
        _1197 = _1026;
        _1198 = _1038;
        _1199 = _1037;
        _1200 = _1036;
        _1201 = _1048;
        _1202 = _1047;
        _1203 = _1046;
        _1204 = _1061;
        _1205 = _1060;
        _1206 = _1059;
        _1207 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1103 : (isnan(_1103) ? 0.0 : max(_1103, 0.0)));
        _1208 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1145 : (isnan(_1145) ? 0.0 : max(_1145, 0.0)));
        _1209 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1187 : (isnan(_1187) ? 0.0 : max(_1187, 0.0)));
    }
    else
    {
        _1195 = _886;
        _1196 = _886;
        _1197 = _886;
        _1198 = _886;
        _1199 = _886;
        _1200 = _886;
        _1201 = _886;
        _1202 = _886;
        _1203 = _886;
        _1204 = _886;
        _1205 = _886;
        _1206 = _886;
        _1207 = 0.0;
        _1208 = 0.0;
        _1209 = 0.0;
    }
    float _1219 = (cbModelParam._m0[1u].x * (_1207 - _898)) + _898;
    float _1220 = (cbModelParam._m0[1u].x * (_1208 - _899)) + _899;
    float _1221 = (cbModelParam._m0[1u].x * (_1209 - _900)) + _900;
    float _1242 = fma(_1221, cbSceneParam._m0[89u].z, fma(_1220, cbSceneParam._m0[89u].y, _1219 * cbSceneParam._m0[89u].x));
    float _1245 = fma(_1221, cbSceneParam._m0[90u].z, fma(_1220, cbSceneParam._m0[90u].y, _1219 * cbSceneParam._m0[90u].x));
    float _1248 = fma(_1221, cbSceneParam._m0[91u].z, fma(_1220, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1219));
    float _1263 = _519 * 0.5;
    float _1264 = _520 * 0.5;
    float _1265 = _521 * 0.5;
    float _1266 = dot(vec4(_1263, _1264, _1265, 1.0), vec4(_1197, _1200, _1203, _1206));
    float _1269 = dot(vec4(_1263, _1264, _1265, 1.0), vec4(_1196, _1199, _1202, _1205));
    float _1272 = dot(vec4(_1263, _1264, _1265, 1.0), vec4(_1195, _1198, _1201, _1204));
    float _1306;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1279 = dot(vec4(_1263, _1264, _1265, 1.0), vec4(_885, _889, _892, _895));
        float _1283 = dot(vec4(_1263, _1264, _1265, 1.0), vec4(_887, _890, _893, _896));
        float _1287 = dot(vec4(_1263, _1264, _1265, 1.0), vec4(_888, _891, _894, _897));
        float _1294 = dot(vec4(cbModelParam._m0[39u]), vec4(_1263, _1264, _1265, 1.0));
        _1306 = dot(vec3(isnan(0.0) ? _1287 : (isnan(_1287) ? 0.0 : max(_1287, 0.0)), isnan(0.0) ? _1283 : (isnan(_1283) ? 0.0 : max(_1283, 0.0)), isnan(0.0) ? _1279 : (isnan(_1279) ? 0.0 : max(_1279, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1294) ? 0.0 : (isnan(0.0) ? _1294 : max(0.0, _1294))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1306 = 1.0;
    }
    float _1317;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1308 = dot(vec4(cbModelParam._m0[40u]), vec4(_1263, _1264, _1265, 1.0));
        _1317 = dot(vec3(isnan(0.0) ? _1266 : (isnan(_1266) ? 0.0 : max(_1266, 0.0)), isnan(0.0) ? _1269 : (isnan(_1269) ? 0.0 : max(_1269, 0.0)), isnan(0.0) ? _1272 : (isnan(_1272) ? 0.0 : max(_1272, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1308) ? 0.0 : (isnan(0.0) ? _1308 : max(0.0, _1308))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1317 = 1.0;
    }
    float _1321 = (_1317 * cbModelParam._m0[1u].x) + (_1306 * (1.0 - cbModelParam._m0[1u].x));
    float _1331 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _344);
    float _1332 = isnan(_1331) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1331 : min(cbModelParam._m0[25u].z, _1331));
    float _1414;
    float _1416;
    float _1418;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1381 = fma(_583, cbModelParam._m0[13u].z, fma(_579, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _575)) + cbModelParam._m0[13u].w;
        float _1385 = fma(_583, cbModelParam._m0[14u].z, fma(_579, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _575)) + cbModelParam._m0[14u].w;
        float _1389 = fma(_583, cbModelParam._m0[15u].z, fma(_579, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _575)) + cbModelParam._m0[15u].w;
        float _1392 = fma(_521, cbModelParam._m0[13u].z, fma(_520, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _519));
        float _1395 = fma(_521, cbModelParam._m0[14u].z, fma(_520, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _519));
        float _1398 = fma(_521, cbModelParam._m0[15u].z, fma(_520, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _519));
        float _1426;
        if (_1392 > 0.0)
        {
            _1426 = abs((1.0 - _1381) / _1392);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1392 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1381 + 1.0) / _1392);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1426 = frontier_phi_14_12_ladder;
        }
        float _1601;
        if (_1395 > 0.0)
        {
            _1601 = abs((1.0 - _1385) / _1395);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1395 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1385 + 1.0) / _1395);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1601 = frontier_phi_23_19_ladder;
        }
        float _1897;
        if (_1398 > 0.0)
        {
            _1897 = abs((1.0 - _1389) / _1398);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1398 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1389 + 1.0) / _1398);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _1897 = frontier_phi_35_30_ladder;
        }
        float _1899 = isnan(_1601) ? _1426 : (isnan(_1426) ? _1601 : min(_1426, _1601));
        float _1900 = isnan(_1897) ? _1899 : (isnan(_1899) ? _1897 : min(_1899, _1897));
        float _1904 = (_1900 * _1392) + _1381;
        float _1905 = (_1900 * _1395) + _1385;
        float _1906 = (_1900 * _1398) + _1389;
        float _1907 = _1900 * 9.9999997473787516355514526367188e-05;
        float _1909 = (-1.0) - _1907;
        float _1911 = _1907 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_1906 > _1911) || ((_1906 < _1909) || ((_1905 > _1911) || ((_1905 < _1909) || ((_1904 < _1909) || (_1904 > _1911))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2051 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1906, cbModelParam._m0[9u].z, fma(_1905, cbModelParam._m0[9u].y, _1904 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1906, cbModelParam._m0[10u].z, fma(_1905, cbModelParam._m0[10u].y, _1904 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1906, cbModelParam._m0[11u].z, fma(_1905, cbModelParam._m0[11u].y, _1904 * cbModelParam._m0[11u].x))), _1332);
            frontier_phi_13_35_ladder = _2051.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2051.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2051.x * cbModelParam._m0[1u].y;
        }
        _1414 = frontier_phi_13_35_ladder_2;
        _1416 = frontier_phi_13_35_ladder_1;
        _1418 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1402 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_519, _520, _521), _1332);
        _1414 = _1402.x * cbModelParam._m0[1u].y;
        _1416 = _1402.y * cbModelParam._m0[1u].y;
        _1418 = _1402.z * cbModelParam._m0[1u].y;
    }
    float _1422 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _344);
    float _1423 = isnan(_1422) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1422 : min(cbModelParam._m0[25u].w, _1422));
    float _1516;
    float _1518;
    float _1520;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1480 = fma(_583, cbModelParam._m0[21u].z, fma(_579, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _575)) + cbModelParam._m0[21u].w;
        float _1484 = fma(_583, cbModelParam._m0[22u].z, fma(_579, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _575)) + cbModelParam._m0[22u].w;
        float _1488 = fma(_583, cbModelParam._m0[23u].z, fma(_579, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _575)) + cbModelParam._m0[23u].w;
        float _1491 = fma(_521, cbModelParam._m0[21u].z, fma(_520, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _519));
        float _1494 = fma(_521, cbModelParam._m0[22u].z, fma(_520, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _519));
        float _1497 = fma(_521, cbModelParam._m0[23u].z, fma(_520, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _519));
        float _1606;
        if (_1491 > 0.0)
        {
            _1606 = abs((1.0 - _1480) / _1491);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1491 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1480 + 1.0) / _1491);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1606 = frontier_phi_25_21_ladder;
        }
        float _1924;
        if (_1494 > 0.0)
        {
            _1924 = abs((1.0 - _1484) / _1494);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1494 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1484 + 1.0) / _1494);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1924 = frontier_phi_37_32_ladder;
        }
        float _2262;
        if (_1497 > 0.0)
        {
            _2262 = abs((1.0 - _1488) / _1497);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1497 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1488 + 1.0) / _1497);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2262 = frontier_phi_47_44_ladder;
        }
        float _2264 = isnan(_1924) ? _1606 : (isnan(_1606) ? _1924 : min(_1606, _1924));
        float _2265 = isnan(_2262) ? _2264 : (isnan(_2264) ? _2262 : min(_2264, _2262));
        float _2269 = (_2265 * _1491) + _1480;
        float _2270 = (_2265 * _1494) + _1484;
        float _2271 = (_2265 * _1497) + _1488;
        float _2272 = _2265 * 9.9999997473787516355514526367188e-05;
        float _2273 = (-1.0) - _2272;
        float _2275 = _2272 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2271 > _2275) || ((_2271 < _2273) || ((_2270 > _2275) || ((_2270 < _2273) || ((_2269 < _2273) || (_2269 > _2275))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2393 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2271, cbModelParam._m0[17u].z, fma(_2270, cbModelParam._m0[17u].y, _2269 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2271, cbModelParam._m0[18u].z, fma(_2270, cbModelParam._m0[18u].y, _2269 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2271, cbModelParam._m0[19u].z, fma(_2270, cbModelParam._m0[19u].y, _2269 * cbModelParam._m0[19u].x))), _1423);
            frontier_phi_22_47_ladder = _2393.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2393.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2393.x * cbModelParam._m0[1u].z;
        }
        _1516 = frontier_phi_22_47_ladder_2;
        _1518 = frontier_phi_22_47_ladder_1;
        _1520 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1500 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_519, _520, _521), _1423);
        _1516 = _1500.x * cbModelParam._m0[1u].z;
        _1518 = _1500.y * cbModelParam._m0[1u].z;
        _1520 = _1500.z * cbModelParam._m0[1u].z;
    }
    float _1533 = (((_546 * _496) + _547) * _511) * ((cbModelParam._m0[1u].w * (_1516 - _1414)) + _1414);
    float _1535 = (((_546 * _498) + _547) * _511) * ((cbModelParam._m0[1u].w * (_1518 - _1416)) + _1416);
    float _1537 = (((_546 * _499) + _547) * _511) * ((cbModelParam._m0[1u].w * (_1520 - _1418)) + _1418);
    float _1540 = fma(_1537, cbSceneParam._m0[89u].z, fma(_1535, cbSceneParam._m0[89u].y, _1533 * cbSceneParam._m0[89u].x));
    float _1543 = fma(_1537, cbSceneParam._m0[90u].z, fma(_1535, cbSceneParam._m0[90u].y, _1533 * cbSceneParam._m0[90u].x));
    float _1546 = fma(_1537, cbSceneParam._m0[91u].z, fma(_1535, cbSceneParam._m0[91u].y, _1533 * cbSceneParam._m0[91u].x));
    float _1580 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1584 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1588 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1592 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1593 = _1580 / _1592;
    float _1594 = _1584 / _1592;
    float _1595 = _1588 / _1592;
    float _1742;
    float _1743;
    float _1744;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1622 = ((uint(_1595 > cbSceneParam._m0[59u].y) + uint(_1595 > cbSceneParam._m0[59u].x)) + uint(_1595 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1623 = _1622 + 43u;
        uint _1631 = _1622 + 44u;
        uint _1639 = _1622 + 45u;
        uint _1647 = _1622 + 46u;
        float _1658 = fma(_1592, cbSceneParam._m0[_1623].w, fma(_1588, cbSceneParam._m0[_1623].z, fma(_1584, cbSceneParam._m0[_1623].y, _1580 * cbSceneParam._m0[_1623].x)));
        float _1662 = fma(_1592, cbSceneParam._m0[_1631].w, fma(_1588, cbSceneParam._m0[_1631].z, fma(_1584, cbSceneParam._m0[_1631].y, _1580 * cbSceneParam._m0[_1631].x)));
        float _1670 = fma(_1592, cbSceneParam._m0[_1647].w, fma(_1588, cbSceneParam._m0[_1647].z, fma(_1584, cbSceneParam._m0[_1647].y, _1580 * cbSceneParam._m0[_1647].x)));
        float _1675 = cbSceneParam._m0[33u].z * _1670;
        float _1677 = cbSceneParam._m0[33u].w * _1670;
        float _1680 = fma(_1592, cbSceneParam._m0[_1639].w, fma(_1588, cbSceneParam._m0[_1639].z, fma(_1584, cbSceneParam._m0[_1639].y, _1580 * cbSceneParam._m0[_1639].x))) / _1670;
        float _1728 = (cbSceneParam._m0[33u].x - sqrt(((_1594 * _1594) + (_1593 * _1593)) + (_1595 * _1595))) * cbSceneParam._m0[33u].y;
        float _4010 = isnan(0.0) ? _1728 : (isnan(_1728) ? 0.0 : max(_1728, 0.0));
        float _1735 = (isnan(1.0) ? _4010 : (isnan(_4010) ? 1.0 : min(_4010, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1675 + _1658) / _1670, (_1677 + _1662) / _1670), _1680), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1677 + _1658) / _1670, (_1662 - _1675) / _1670), _1680), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1658 - _1675) / _1670, (_1662 - _1677) / _1670), _1680), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1658 - _1677) / _1670, (_1675 + _1662) / _1670), _1680), 0.0)).x), vec4(0.25)));
        _1742 = 1.0 - (_1735 * cbSceneParam._m0[34u].x);
        _1743 = 1.0 - (_1735 * cbSceneParam._m0[34u].y);
        _1744 = 1.0 - (_1735 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1742 = 1.0;
        _1743 = 1.0;
        _1744 = 1.0;
    }
    float _1808;
    float _1810;
    float _1812;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1796 = fma(_1592, cbSceneParam._m0[63u].w, fma(_1588, cbSceneParam._m0[63u].z, fma(_1584, cbSceneParam._m0[63u].y, _1580 * cbSceneParam._m0[63u].x)));
        float _1797 = fma(_1592, cbSceneParam._m0[60u].w, fma(_1588, cbSceneParam._m0[60u].z, fma(_1584, cbSceneParam._m0[60u].y, _1580 * cbSceneParam._m0[60u].x))) / _1796;
        float _1798 = fma(_1592, cbSceneParam._m0[61u].w, fma(_1588, cbSceneParam._m0[61u].z, fma(_1584, cbSceneParam._m0[61u].y, _1580 * cbSceneParam._m0[61u].x))) / _1796;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_1797 >= cbSceneParam._m0[64u].x) && (_1798 >= cbSceneParam._m0[64u].y)) && (_1797 <= cbSceneParam._m0[64u].z)) && (_1798 <= cbSceneParam._m0[64u].w))
        {
            float _1937 = fma(_1592, cbSceneParam._m0[62u].w, fma(_1588, cbSceneParam._m0[62u].z, fma(_1584, cbSceneParam._m0[62u].y, _1580 * cbSceneParam._m0[62u].x))) / _1796;
            float _1941 = isnan(cbSceneParam._m0[41u].w) ? _1937 : (isnan(_1937) ? cbSceneParam._m0[41u].w : max(_1937, cbSceneParam._m0[41u].w));
            float _1984 = (cbSceneParam._m0[33u].x - sqrt(((_1594 * _1594) + (_1593 * _1593)) + (_1595 * _1595))) * cbSceneParam._m0[33u].y;
            float _4026 = isnan(0.0) ? _1984 : (isnan(_1984) ? 0.0 : max(_1984, 0.0));
            float _1991 = (isnan(1.0) ? _4026 : (isnan(_4026) ? 1.0 : min(_4026, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1797, cbSceneParam._m0[33u].w + _1798), _1941), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1797, _1798 - cbSceneParam._m0[33u].z), _1941), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1797 - cbSceneParam._m0[33u].z, _1798 - cbSceneParam._m0[33u].w), _1941), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1797 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1798), _1941), 0.0)).x), vec4(0.25)));
            float _1995 = 1.0 - (_1991 * cbSceneParam._m0[34u].x);
            float _1996 = 1.0 - (_1991 * cbSceneParam._m0[34u].y);
            float _1997 = 1.0 - (_1991 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_1997) ? _1744 : (isnan(_1744) ? _1997 : min(_1744, _1997));
            frontier_phi_34_33_ladder_1 = isnan(_1996) ? _1743 : (isnan(_1743) ? _1996 : min(_1743, _1996));
            frontier_phi_34_33_ladder_2 = isnan(_1995) ? _1742 : (isnan(_1742) ? _1995 : min(_1742, _1995));
        }
        else
        {
            frontier_phi_34_33_ladder = _1744;
            frontier_phi_34_33_ladder_1 = _1743;
            frontier_phi_34_33_ladder_2 = _1742;
        }
        _1808 = frontier_phi_34_33_ladder_2;
        _1810 = frontier_phi_34_33_ladder_1;
        _1812 = frontier_phi_34_33_ladder;
    }
    else
    {
        _1808 = _1742;
        _1810 = _1743;
        _1812 = _1744;
    }
    uvec4 _1817 = floatBitsToUint(cbInstanceData._m0[_471 + 5u]);
    uint _1819 = _1817.x * 14u;
    uint _1820 = _1819 + 13u;
    float _1827 = _511 + (-1.0);
    float _1832 = (cbLight._m0[_1820].x * _1827) + 1.0;
    float _1833 = (cbLight._m0[_1820].y * _1827) + 1.0;
    float _1834 = (cbLight._m0[_1820].z * _1827) + 1.0;
    float _1835 = (cbLight._m0[_1820].w * _1827) + 1.0;
    uint _1836 = _1819 + 5u;
    float _1842 = isnan(1.0) ? _1833 : (isnan(_1833) ? 1.0 : min(_1833, 1.0));
    uint _1846 = _1819 + 4u;
    float _1856 = isnan(1.0) ? _1832 : (isnan(_1832) ? 1.0 : min(_1832, 1.0));
    uint _1860 = _1819 | 1u;
    float _1871 = dot(vec3(cbLight._m0[_1819].xyz), vec3(_341, _342, _343));
    float _1874 = dot(vec3(cbLight._m0[_1860].xyz), vec3(_341, _342, _343));
    float _4062 = isnan(0.0) ? _1871 : (isnan(_1871) ? 0.0 : max(_1871, 0.0));
    float _4073 = isnan(0.0) ? _1874 : (isnan(_1874) ? 0.0 : max(_1874, 0.0));
    float _1879 = (isnan(1.0) ? _4062 : (isnan(_4062) ? 1.0 : min(_4062, 1.0))) * 0.3183098733425140380859375;
    float _1881 = (isnan(1.0) ? _4073 : (isnan(_4073) ? 1.0 : min(_4073, 1.0))) * 0.3183098733425140380859375;
    float _1888 = ((cbLight._m0[_1836].x * _1842) * _1881) + (((cbLight._m0[_1846].x * _1808) * _1856) * _1879);
    float _1889 = ((_1842 * cbLight._m0[_1836].y) * _1881) + (((cbLight._m0[_1846].y * _1810) * _1856) * _1879);
    float _1890 = ((_1842 * cbLight._m0[_1836].z) * _1881) + (((cbLight._m0[_1846].z * _1812) * _1856) * _1879);
    uvec4 _1894 = floatBitsToUint(cbLight._m0[_1819 + 12u]);
    bool _1896 = _1894.x == 0u;
    float _1998;
    float _2000;
    float _2002;
    if (_1896)
    {
        _1998 = _1888;
        _2000 = _1889;
        _2002 = _1890;
    }
    else
    {
        uint _2006 = _1819 + 6u;
        float _2022 = (dot(vec3(cbLight._m0[_1819 + 2u].xyz), vec3(_341, _342, _343)) * 0.5) + 0.5;
        float _2023 = _2022 * _2022;
        float _4084 = isnan(0.0) ? _2023 : (isnan(_2023) ? 0.0 : max(_2023, 0.0));
        float _2024 = isnan(1.0) ? _4084 : (isnan(_4084) ? 1.0 : min(_4084, 1.0));
        float _2025 = isnan(1.0) ? _1834 : (isnan(_1834) ? 1.0 : min(_1834, 1.0));
        _1998 = (((cbLight._m0[_2006].x * 0.3183098733425140380859375) * _2024) * _2025) + _1888;
        _2000 = (((cbLight._m0[_2006].y * 0.3183098733425140380859375) * _2024) * _2025) + _1889;
        _2002 = (((cbLight._m0[_2006].z * 0.3183098733425140380859375) * _2024) * _2025) + _1890;
    }
    bool _2005 = _1894.y == 0u;
    float _2060;
    float _2062;
    float _2064;
    if (_2005)
    {
        _2060 = _1998;
        _2062 = _2000;
        _2064 = _2002;
    }
    else
    {
        uint _2233 = _1819 + 7u;
        float _2249 = (dot(vec3(cbLight._m0[_1819 + 3u].xyz), vec3(_341, _342, _343)) * 0.5) + 0.5;
        float _2250 = _2249 * _2249;
        float _4100 = isnan(0.0) ? _2250 : (isnan(_2250) ? 0.0 : max(_2250, 0.0));
        float _2251 = isnan(1.0) ? _4100 : (isnan(_4100) ? 1.0 : min(_4100, 1.0));
        float _2252 = isnan(1.0) ? _1835 : (isnan(_1835) ? 1.0 : min(_1835, 1.0));
        _2060 = (((cbLight._m0[_2233].x * 0.3183098733425140380859375) * _2251) * _2252) + _1998;
        _2062 = (((cbLight._m0[_2233].y * 0.3183098733425140380859375) * _2251) * _2252) + _2000;
        _2064 = (((cbLight._m0[_2233].z * 0.3183098733425140380859375) * _2251) * _2252) + _2002;
    }
    uint _2067 = _1819 + 8u;
    float _2080 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1819].w)) * _344) * 0.949999988079071044921875);
    float _2081 = _2080 * _2080;
    float _2082 = cbLight._m0[_1819].x + _422;
    float _2083 = cbLight._m0[_1819].y + _423;
    float _2084 = cbLight._m0[_1819].z + _424;
    float _2088 = inversesqrt(dot(vec3(_2082, _2083, _2084), vec3(_2082, _2083, _2084)));
    float _2089 = _2088 * _2082;
    float _2090 = _2088 * _2083;
    float _2091 = _2088 * _2084;
    float _2092 = dot(vec3(_341, _342, _343), vec3(cbLight._m0[_1819].xyz));
    float _4116 = isnan(0.0) ? _2092 : (isnan(_2092) ? 0.0 : max(_2092, 0.0));
    float _2095 = isnan(1.0) ? _4116 : (isnan(_4116) ? 1.0 : min(_4116, 1.0));
    float _4127 = isnan(0.0) ? _512 : (isnan(_512) ? 0.0 : max(_512, 0.0));
    float _2096 = isnan(1.0) ? _4127 : (isnan(_4127) ? 1.0 : min(_4127, 1.0));
    float _2097 = dot(vec3(_341, _342, _343), vec3(_2089, _2090, _2091));
    float _4138 = isnan(0.0) ? _2097 : (isnan(_2097) ? 0.0 : max(_2097, 0.0));
    float _2100 = isnan(1.0) ? _4138 : (isnan(_4138) ? 1.0 : min(_4138, 1.0));
    float _2101 = dot(vec3(cbLight._m0[_1819].xyz), vec3(_2089, _2090, _2091));
    float _4149 = isnan(0.0) ? _2101 : (isnan(_2101) ? 0.0 : max(_2101, 0.0));
    float _2105 = _2081 * _2081;
    float _2109 = ((_2100 * _2100) * (_2105 + (-1.0))) + 1.0;
    float _2117 = exp2(log2(1.0 - (isnan(1.0) ? _4149 : (isnan(_4149) ? 1.0 : min(_4149, 1.0)))) * 5.0);
    float _2118 = 0.959999978542327880859375 - _493;
    float _2120 = 0.959999978542327880859375 - _494;
    float _2121 = 0.959999978542327880859375 - _495;
    float _2128 = 1.0 - _2081;
    float _2139 = (0.5 / (((_2096 * ((_2095 * _2128) + _2081)) + 9.9999999392252902907785028219223e-09) + (((_2096 * _2128) + _2081) * _2095))) * _2095;
    float _4160 = isnan(0.0) ? _2139 : (isnan(_2139) ? 0.0 : max(_2139, 0.0));
    float _2141 = (isnan(1.0) ? _4160 : (isnan(_4160) ? 1.0 : min(_4160, 1.0))) * (_2105 / ((_2109 * _2109) * 3.141590118408203125));
    uint _2155 = _1819 + 9u;
    float _2166 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1860].w)) * _344) * 0.949999988079071044921875);
    float _2167 = _2166 * _2166;
    float _2168 = cbLight._m0[_1860].x + _422;
    float _2169 = cbLight._m0[_1860].y + _423;
    float _2170 = cbLight._m0[_1860].z + _424;
    float _2174 = inversesqrt(dot(vec3(_2168, _2169, _2170), vec3(_2168, _2169, _2170)));
    float _2175 = _2174 * _2168;
    float _2176 = _2174 * _2169;
    float _2177 = _2174 * _2170;
    float _2178 = dot(vec3(_341, _342, _343), vec3(cbLight._m0[_1860].xyz));
    float _4171 = isnan(0.0) ? _2178 : (isnan(_2178) ? 0.0 : max(_2178, 0.0));
    float _2181 = isnan(1.0) ? _4171 : (isnan(_4171) ? 1.0 : min(_4171, 1.0));
    float _2182 = dot(vec3(_341, _342, _343), vec3(_2175, _2176, _2177));
    float _4182 = isnan(0.0) ? _2182 : (isnan(_2182) ? 0.0 : max(_2182, 0.0));
    float _2185 = isnan(1.0) ? _4182 : (isnan(_4182) ? 1.0 : min(_4182, 1.0));
    float _2186 = dot(vec3(cbLight._m0[_1860].xyz), vec3(_2175, _2176, _2177));
    float _4193 = isnan(0.0) ? _2186 : (isnan(_2186) ? 0.0 : max(_2186, 0.0));
    float _2190 = _2167 * _2167;
    float _2194 = ((_2185 * _2185) * (_2190 + (-1.0))) + 1.0;
    float _2201 = exp2(log2(1.0 - (isnan(1.0) ? _4193 : (isnan(_4193) ? 1.0 : min(_4193, 1.0)))) * 5.0);
    float _2208 = 1.0 - _2167;
    float _2218 = (0.5 / (((_2096 * ((_2181 * _2208) + _2167)) + 9.9999999392252902907785028219223e-09) + (((_2096 * _2208) + _2167) * _2181))) * _2181;
    float _4204 = isnan(0.0) ? _2218 : (isnan(_2218) ? 0.0 : max(_2218, 0.0));
    float _2220 = (isnan(1.0) ? _4204 : (isnan(_4204) ? 1.0 : min(_4204, 1.0))) * (_2190 / ((_2194 * _2194) * 3.141590118408203125));
    float _2230 = (((((_2201 * _2118) + _496) * cbLight._m0[_2155].x) * _2220) * _1842) + ((((cbLight._m0[_2067].x * _1808) * ((_2117 * _2118) + _496)) * _2141) * _1856);
    float _2231 = (((((_2201 * _2120) + _498) * cbLight._m0[_2155].y) * _2220) * _1842) + ((((cbLight._m0[_2067].y * _1810) * ((_2117 * _2120) + _498)) * _2141) * _1856);
    float _2232 = (((((_2201 * _2121) + _499) * cbLight._m0[_2155].z) * _2220) * _1842) + ((((cbLight._m0[_2067].z * _1812) * ((_2117 * _2121) + _499)) * _2141) * _1856);
    float _2288;
    float _2290;
    float _2292;
    if (_1896)
    {
        _2288 = _2230;
        _2290 = _2231;
        _2292 = _2232;
    }
    else
    {
        uint _2294 = _1819 + 2u;
        uint _2298 = _1819 + 10u;
        float _2312 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2294].w)) * _344) * 0.949999988079071044921875);
        float _2313 = _2312 * _2312;
        float _2314 = cbLight._m0[_2294].x + _422;
        float _2315 = cbLight._m0[_2294].y + _423;
        float _2316 = cbLight._m0[_2294].z + _424;
        float _2320 = inversesqrt(dot(vec3(_2314, _2315, _2316), vec3(_2314, _2315, _2316)));
        float _2321 = _2320 * _2314;
        float _2322 = _2320 * _2315;
        float _2323 = _2320 * _2316;
        float _2324 = dot(vec3(_341, _342, _343), vec3(cbLight._m0[_2294].xyz));
        float _4215 = isnan(0.0) ? _2324 : (isnan(_2324) ? 0.0 : max(_2324, 0.0));
        float _2327 = isnan(1.0) ? _4215 : (isnan(_4215) ? 1.0 : min(_4215, 1.0));
        float _2328 = dot(vec3(_341, _342, _343), vec3(_2321, _2322, _2323));
        float _4226 = isnan(0.0) ? _2328 : (isnan(_2328) ? 0.0 : max(_2328, 0.0));
        float _2331 = isnan(1.0) ? _4226 : (isnan(_4226) ? 1.0 : min(_4226, 1.0));
        float _2332 = dot(vec3(cbLight._m0[_2294].xyz), vec3(_2321, _2322, _2323));
        float _4237 = isnan(0.0) ? _2332 : (isnan(_2332) ? 0.0 : max(_2332, 0.0));
        float _2336 = _2313 * _2313;
        float _2340 = ((_2331 * _2331) * (_2336 + (-1.0))) + 1.0;
        float _2347 = exp2(log2(1.0 - (isnan(1.0) ? _4237 : (isnan(_4237) ? 1.0 : min(_4237, 1.0)))) * 5.0);
        float _2354 = 1.0 - _2313;
        float _2364 = (0.5 / (((_2096 * ((_2327 * _2354) + _2313)) + 9.9999999392252902907785028219223e-09) + (((_2096 * _2354) + _2313) * _2327))) * _2327;
        float _4248 = isnan(0.0) ? _2364 : (isnan(_2364) ? 0.0 : max(_2364, 0.0));
        float _2366 = (isnan(1.0) ? _4248 : (isnan(_4248) ? 1.0 : min(_4248, 1.0))) * (_2336 / ((_2340 * _2340) * 3.141590118408203125));
        float _2367 = isnan(1.0) ? _1834 : (isnan(_1834) ? 1.0 : min(_1834, 1.0));
        _2288 = (((((_2347 * _2118) + _496) * cbLight._m0[_2298].x) * _2366) * _2367) + _2230;
        _2290 = (((((_2347 * _2120) + _498) * cbLight._m0[_2298].y) * _2366) * _2367) + _2231;
        _2292 = (((((_2347 * _2121) + _499) * cbLight._m0[_2298].z) * _2366) * _2367) + _2232;
    }
    float _2398;
    float _2400;
    float _2402;
    if (_2005)
    {
        _2398 = _2288;
        _2400 = _2290;
        _2402 = _2292;
    }
    else
    {
        uint _2409 = _1819 + 3u;
        uint _2413 = _1819 + 11u;
        float _2427 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2409].w)) * _344) * 0.949999988079071044921875);
        float _2428 = _2427 * _2427;
        float _2429 = cbLight._m0[_2409].x + _422;
        float _2430 = cbLight._m0[_2409].y + _423;
        float _2431 = cbLight._m0[_2409].z + _424;
        float _2435 = inversesqrt(dot(vec3(_2429, _2430, _2431), vec3(_2429, _2430, _2431)));
        float _2436 = _2435 * _2429;
        float _2437 = _2435 * _2430;
        float _2438 = _2435 * _2431;
        float _2439 = dot(vec3(_341, _342, _343), vec3(cbLight._m0[_2409].xyz));
        float _4264 = isnan(0.0) ? _2439 : (isnan(_2439) ? 0.0 : max(_2439, 0.0));
        float _2442 = isnan(1.0) ? _4264 : (isnan(_4264) ? 1.0 : min(_4264, 1.0));
        float _2443 = dot(vec3(_341, _342, _343), vec3(_2436, _2437, _2438));
        float _4275 = isnan(0.0) ? _2443 : (isnan(_2443) ? 0.0 : max(_2443, 0.0));
        float _2446 = isnan(1.0) ? _4275 : (isnan(_4275) ? 1.0 : min(_4275, 1.0));
        float _2447 = dot(vec3(cbLight._m0[_2409].xyz), vec3(_2436, _2437, _2438));
        float _4286 = isnan(0.0) ? _2447 : (isnan(_2447) ? 0.0 : max(_2447, 0.0));
        float _2451 = _2428 * _2428;
        float _2455 = ((_2446 * _2446) * (_2451 + (-1.0))) + 1.0;
        float _2462 = exp2(log2(1.0 - (isnan(1.0) ? _4286 : (isnan(_4286) ? 1.0 : min(_4286, 1.0)))) * 5.0);
        float _2469 = 1.0 - _2428;
        float _2479 = (0.5 / (((_2096 * ((_2442 * _2469) + _2428)) + 9.9999999392252902907785028219223e-09) + (((_2096 * _2469) + _2428) * _2442))) * _2442;
        float _4297 = isnan(0.0) ? _2479 : (isnan(_2479) ? 0.0 : max(_2479, 0.0));
        float _2481 = (isnan(1.0) ? _4297 : (isnan(_4297) ? 1.0 : min(_4297, 1.0))) * (_2451 / ((_2455 * _2455) * 3.141590118408203125));
        float _2482 = isnan(1.0) ? _1835 : (isnan(_1835) ? 1.0 : min(_1835, 1.0));
        _2398 = (((((_2462 * _2118) + _496) * cbLight._m0[_2413].x) * _2481) * _2482) + _2288;
        _2400 = (((((_2462 * _2120) + _498) * cbLight._m0[_2413].y) * _2481) * _2482) + _2290;
        _2402 = (((((_2462 * _2121) + _499) * cbLight._m0[_2413].z) * _2481) * _2482) + _2292;
    }
    float _2548;
    float _2550;
    float _2552;
    float _2554;
    float _2556;
    float _2558;
    if (_1817.y == 0u)
    {
        uvec4 _2503 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2504 = _2503.x;
        uint _2515 = uint((float(_2503.y) * floor(float(uint(cbSceneParam._m0[85u].y * _431) / _2504))) + floor(float(uint(cbSceneParam._m0[85u].x * _430) / _2504)));
        float _2525 = (log2(_1595 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2526 = isnan(0.0) ? _2525 : (isnan(_2525) ? 0.0 : max(_2525, 0.0));
        uint _2529 = uint(isnan(14.0) ? _2526 : (isnan(_2526) ? 14.0 : min(_2526, 14.0)));
        uvec4 _2534 = texelFetch(g_lightClusterGridBuffer, int(((_2529 << 2u) + (_2515 << 6u)) >> 2u));
        uint _2535 = _2534.x;
        uint _2536 = _2503.z;
        float _2644;
        float _2646;
        float _2648;
        float _2650;
        float _2652;
        float _2654;
        if (((((1u << ((_2536 >> 4u) & 15u)) + 4294967295u) & _2535) == 0u) || ((_2536 & 240u) == 0u))
        {
            _2644 = 0.0;
            _2646 = 0.0;
            _2648 = 0.0;
            _2650 = 0.0;
            _2652 = 0.0;
            _2654 = 0.0;
        }
        else
        {
            float _2645;
            float _2647;
            float _2649;
            float _2651;
            float _2653;
            float _2655;
            float _2797 = 0.0;
            float _2798 = 0.0;
            float _2799 = 0.0;
            float _2800 = 0.0;
            float _2801 = 0.0;
            float _2802 = 0.0;
            uint _2803 = 0u;
            uint _2812;
            bool _2813;
            for (;;)
            {
                _2812 = texelFetch(g_lightClassification, int((((_2529 << 5u) + (_2515 << 9u)) + (_2803 << 2u)) >> 2u)).x;
                _2813 = _2812 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2813)
                {
                    frontier_phi_66_pred = _2802;
                    frontier_phi_66_pred_1 = _2801;
                    frontier_phi_66_pred_2 = _2800;
                    frontier_phi_66_pred_3 = _2799;
                    frontier_phi_66_pred_4 = _2798;
                    frontier_phi_66_pred_5 = _2797;
                }
                else
                {
                    float _2921;
                    float _2922;
                    float _2923;
                    float _2924;
                    float _2925;
                    float _2926;
                    uint _2927;
                    _2921 = _2797;
                    _2922 = _2798;
                    _2923 = _2799;
                    _2924 = _2800;
                    _2925 = _2801;
                    _2926 = _2802;
                    _2927 = _2812;
                    float _2853;
                    float _2854;
                    float _2855;
                    float _2856;
                    float _2857;
                    float _2858;
                    for (;;)
                    {
                        uint _2931 = uint(findLSB(_2927)) + (_2803 << 5u);
                        uint _2928 = (_2927 + 4294967295u) & _2927;
                        uint _2933 = _2931 * 48u;
                        vec4 _2947 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2933)).x, texelFetch(g_PointLightRenderingBuffer, int(_2933 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2933 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2933 + 3u)).x));
                        uint _2953 = (_2931 * 48u) + 4u;
                        vec4 _2966 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2953)).x, texelFetch(g_PointLightRenderingBuffer, int(_2953 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2953 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2953 + 3u)).x));
                        uint _2972 = (_2931 * 48u) + 8u;
                        vec3 _2983 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2972)).x, texelFetch(g_PointLightRenderingBuffer, int(_2972 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2972 + 2u)).x));
                        float _2987 = _2947.x - _1593;
                        float _2988 = _2947.y - _1594;
                        float _2989 = _2947.z - _1595;
                        float _2990 = dot(vec3(_2987, _2988, _2989), vec3(_2987, _2988, _2989));
                        float _2993 = inversesqrt(_2990);
                        float _2994 = _2993 * _2987;
                        float _2995 = _2993 * _2988;
                        float _2996 = _2993 * _2989;
                        float _2997 = dot(vec3(_452, _455, _458), vec3(_2994, _2995, _2996));
                        float _3002 = 1.0 - (_2990 * _2947.w);
                        float _4323 = isnan(0.0) ? _3002 : (isnan(_3002) ? 0.0 : max(_3002, 0.0));
                        float _3003 = isnan(1.0) ? _4323 : (isnan(_4323) ? 1.0 : min(_4323, 1.0));
                        float _3004 = sqrt(_2990) * _2966.w;
                        float _3007 = 1.39999997615814208984375 / (_3004 + 1.39999997615814208984375);
                        float _3008 = _3007 * _3007;
                        float _3011 = ((1.0 - _3008) * _2997) + _3008;
                        float _3014 = _3004 * _3004;
                        float _3018 = ((isnan(0.0) ? _3011 : (isnan(_3011) ? 0.0 : max(_3011, 0.0))) * _3003) / ((_3014 * 0.699999988079071044921875) + 1.0);
                        float _3022 = (-0.0) - _1593;
                        float _3023 = (-0.0) - _1594;
                        float _3024 = (-0.0) - _1595;
                        float _3028 = inversesqrt(dot(vec3(_3022, _3023, _3024), vec3(_3022, _3023, _3024)));
                        float _3029 = _3028 * _3022;
                        float _3030 = _3028 * _3023;
                        float _3031 = _3028 * _3024;
                        float _3038 = exp2(log2(1.0 / ((_3014 * 3.5) + 5.0)) * 0.25);
                        float _3039 = 1.0 - _527;
                        float _3046 = sqrt(1.0 - ((1.0 - (_3039 * _3039)) * (1.0 - (_3038 * _3038))));
                        float _3047 = _3046 * _3046;
                        float _3048 = _3047 * _3047;
                        float _3049 = _3029 + _2994;
                        float _3050 = _3030 + _2995;
                        float _3051 = _3031 + _2996;
                        float _3055 = inversesqrt(dot(vec3(_3049, _3050, _3051), vec3(_3049, _3050, _3051)));
                        float _3059 = dot(vec3(_452, _455, _458), vec3(_3029, _3030, _3031));
                        float _4339 = isnan(0.0) ? _3059 : (isnan(_3059) ? 0.0 : max(_3059, 0.0));
                        float _3062 = isnan(1.0) ? _4339 : (isnan(_4339) ? 1.0 : min(_4339, 1.0));
                        float _3063 = dot(vec3(_452, _455, _458), vec3(_3055 * _3049, _3055 * _3050, _3055 * _3051));
                        float _4350 = isnan(0.0) ? _3063 : (isnan(_3063) ? 0.0 : max(_3063, 0.0));
                        float _3066 = isnan(1.0) ? _4350 : (isnan(_4350) ? 1.0 : min(_4350, 1.0));
                        float _3070 = ((_3066 * _3066) * (_3048 + (-1.0))) + 1.0;
                        float _3071 = _3007 * _3047;
                        float _3072 = _3071 * _3071;
                        float _3075 = ((1.0 - _3072) * _2997) + _3072;
                        float _4361 = isnan(0.0) ? _3075 : (isnan(_3075) ? 0.0 : max(_3075, 0.0));
                        float _3076 = isnan(1.0) ? _4361 : (isnan(_4361) ? 1.0 : min(_4361, 1.0));
                        float _3077 = 1.0 - _3047;
                        float _3087 = (0.5 / (((_3076 * ((_3062 * _3077) + _3047)) + 9.9999999392252902907785028219223e-09) + (((_3076 * _3077) + _3047) * _3062))) * _3076;
                        float _4372 = isnan(0.0) ? _3087 : (isnan(_3087) ? 0.0 : max(_3087, 0.0));
                        float _3098 = (((_3048 * 3.1415927410125732421875) * (isnan(1.0) ? _4372 : (isnan(_4372) ? 1.0 : min(_4372, 1.0)))) / ((_3070 * _3070) * ((_3014 * 2.1991131305694580078125) + 3.141590118408203125))) * _3003;
                        _2856 = (_3018 * _2966.x) + _2924;
                        _2857 = (_3018 * _2966.y) + _2925;
                        _2858 = (_3018 * _2966.z) + _2926;
                        _2853 = (_3098 * _2983.x) + _2921;
                        _2854 = (_3098 * _2983.y) + _2922;
                        _2855 = (_3098 * _2983.z) + _2923;
                        if (_2928 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2921 = _2853;
                            _2922 = _2854;
                            _2923 = _2855;
                            _2924 = _2856;
                            _2925 = _2857;
                            _2926 = _2858;
                            _2927 = _2928;
                        }
                    }
                    frontier_phi_66_pred = _2858;
                    frontier_phi_66_pred_1 = _2857;
                    frontier_phi_66_pred_2 = _2856;
                    frontier_phi_66_pred_3 = _2855;
                    frontier_phi_66_pred_4 = _2854;
                    frontier_phi_66_pred_5 = _2853;
                }
                _2655 = frontier_phi_66_pred;
                _2653 = frontier_phi_66_pred_1;
                _2651 = frontier_phi_66_pred_2;
                _2649 = frontier_phi_66_pred_3;
                _2647 = frontier_phi_66_pred_4;
                _2645 = frontier_phi_66_pred_5;
                uint _2804 = _2803 + 1u;
                if (_2804 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2797 = _2645;
                    _2798 = _2647;
                    _2799 = _2649;
                    _2800 = _2651;
                    _2801 = _2653;
                    _2802 = _2655;
                    _2803 = _2804;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2644 = _2645;
            _2646 = _2647;
            _2648 = _2649;
            _2650 = _2651;
            _2652 = _2653;
            _2654 = _2655;
        }
        uvec4 _2658 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2659 = _2658.z;
        uint _2661 = (_2659 >> 8u) & 15u;
        float _2765;
        float _2767;
        float _2769;
        float _2771;
        float _2773;
        float _2775;
        if (((4294967295u << _2661) & _2535) == 0u)
        {
            _2765 = _2644;
            _2767 = _2646;
            _2769 = _2648;
            _2771 = _2650;
            _2773 = _2652;
            _2775 = _2654;
        }
        else
        {
            float _2790 = inversesqrt(dot(vec3(_1593, _1594, _1595), vec3(_1593, _1594, _1595)));
            float _2791 = _2790 * _1593;
            float _2792 = _2790 * _1594;
            float _2793 = _2790 * _1595;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2661 < ((_2659 >> 12u) & 15u))
            {
                float _2766;
                float _2768;
                float _2770;
                float _2772;
                float _2774;
                float _2776;
                float _2904 = _2644;
                float _2905 = _2646;
                float _2906 = _2648;
                float _2907 = _2650;
                float _2908 = _2652;
                float _2909 = _2654;
                uint _2910 = _2661;
                uint _2919;
                bool _2920;
                for (;;)
                {
                    _2919 = texelFetch(g_lightClassification, int((((_2529 << 5u) + (_2515 << 9u)) + (_2910 << 2u)) >> 2u)).x;
                    _2920 = _2919 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_2920)
                    {
                        frontier_phi_72_pred = _2909;
                        frontier_phi_72_pred_1 = _2908;
                        frontier_phi_72_pred_2 = _2907;
                        frontier_phi_72_pred_3 = _2906;
                        frontier_phi_72_pred_4 = _2905;
                        frontier_phi_72_pred_5 = _2904;
                    }
                    else
                    {
                        float _3103;
                        float _3104;
                        float _3105;
                        float _3106;
                        float _3107;
                        float _3108;
                        float _3399;
                        float _3400;
                        float _3401;
                        float _3402;
                        float _3403;
                        float _3404;
                        float _3116 = _2904;
                        float _3117 = _2905;
                        float _3118 = _2906;
                        float _3119 = _2907;
                        float _3120 = _2908;
                        float _3121 = _2909;
                        uint _3122 = _2919;
                        uint _3123;
                        vec4 _3148;
                        float _3149;
                        vec4 _3164;
                        vec3 _3176;
                        vec4 _3192;
                        vec4 _3208;
                        float _3255;
                        bool _3256;
                        for (;;)
                        {
                            uint _3133 = ((_2910 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3122));
                            _3123 = (_3122 + 4294967295u) & _3122;
                            uint _3135 = _3133 * 40u;
                            _3148 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3135)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3135 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3135 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3135 + 3u)).x));
                            _3149 = _3148.w;
                            uint _3151 = (_3133 * 40u) + 4u;
                            _3164 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3151)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3151 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3151 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3151 + 3u)).x));
                            uint _3166 = (_3133 * 40u) + 8u;
                            _3176 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3166)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3166 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3166 + 2u)).x));
                            uint _3179 = (_3133 * 40u) + 16u;
                            _3192 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3179)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3179 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3179 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3179 + 3u)).x));
                            uint _3195 = (_3133 * 40u) + 20u;
                            _3208 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3195)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3195 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3195 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3195 + 3u)).x));
                            uint _3211 = (_3133 * 40u) + 24u;
                            vec4 _3224 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3211)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3211 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3211 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3211 + 3u)).x));
                            uint _3230 = (_3133 * 40u) + 28u;
                            vec4 _3243 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3230)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3230 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3230 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3230 + 3u)).x));
                            _3255 = fma(_1595, _3243.z, fma(_1594, _3243.y, _3243.x * _1593)) + _3243.w;
                            _3256 = !((fma(_1595, _3224.z, fma(_1594, _3224.y, _3224.x * _1593)) + _3224.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3256)
                            {
                                float _3283 = _3148.x - _1593;
                                float _3284 = _3148.y - _1594;
                                float _3285 = _3148.z - _1595;
                                float _3286 = dot(vec3(_3283, _3284, _3285), vec3(_3283, _3284, _3285));
                                float _3289 = inversesqrt(_3286);
                                float _3290 = _3289 * _3283;
                                float _3291 = _3289 * _3284;
                                float _3292 = _3289 * _3285;
                                float _3296 = 1.0 - (_3286 / (_3149 * _3149));
                                float _4383 = isnan(0.0) ? _3296 : (isnan(_3296) ? 0.0 : max(_3296, 0.0));
                                float _3297 = isnan(1.0) ? _4383 : (isnan(_4383) ? 1.0 : min(_4383, 1.0));
                                float _3301 = sqrt(_3286) * _3164.w;
                                float _3303 = 1.39999997615814208984375 / (_3301 + 1.39999997615814208984375);
                                float _3304 = _3303 * _3303;
                                float _3307 = ((1.0 - _3304) * dot(vec3(_3290, _3291, _3292), vec3(_452, _455, _458))) + _3304;
                                float _3310 = _3301 * _3301;
                                float _3314 = (fma(_1595, _3192.z, fma(_1594, _3192.y, _3192.x * _1593)) + _3192.w) / _3255;
                                float _3315 = (fma(_1595, _3208.z, fma(_1594, _3208.y, _3208.x * _1593)) + _3208.w) / _3255;
                                float _3319 = 1.0 - dot(vec2(_3314, _3315), vec2(_3314, _3315));
                                float _4399 = isnan(0.0) ? _3319 : (isnan(_3319) ? 0.0 : max(_3319, 0.0));
                                float _3320 = isnan(1.0) ? _4399 : (isnan(_4399) ? 1.0 : min(_4399, 1.0));
                                float _3321 = _3320 * (((isnan(0.0) ? _3307 : (isnan(_3307) ? 0.0 : max(_3307, 0.0))) * _3297) / ((_3310 * 0.699999988079071044921875) + 1.0));
                                float _3333 = exp2(log2(1.0 / ((_3310 * 3.5) + 5.0)) * 0.25);
                                float _3334 = 1.0 - _527;
                                float _3341 = sqrt(1.0 - ((1.0 - (_3334 * _3334)) * (1.0 - (_3333 * _3333))));
                                float _3342 = _3341 * _3341;
                                float _3343 = _3342 * _3342;
                                float _3344 = _3290 - _2791;
                                float _3345 = _3291 - _2792;
                                float _3346 = _3292 - _2793;
                                float _3350 = inversesqrt(dot(vec3(_3344, _3345, _3346), vec3(_3344, _3345, _3346)));
                                float _3354 = dot(vec3(_452, _455, _458), vec3((-0.0) - _2791, (-0.0) - _2792, (-0.0) - _2793));
                                float _4410 = isnan(0.0) ? _3354 : (isnan(_3354) ? 0.0 : max(_3354, 0.0));
                                float _3357 = isnan(1.0) ? _4410 : (isnan(_4410) ? 1.0 : min(_4410, 1.0));
                                float _3358 = dot(vec3(_452, _455, _458), vec3(_3350 * _3344, _3350 * _3345, _3350 * _3346));
                                float _4421 = isnan(0.0) ? _3358 : (isnan(_3358) ? 0.0 : max(_3358, 0.0));
                                float _3361 = isnan(1.0) ? _4421 : (isnan(_4421) ? 1.0 : min(_4421, 1.0));
                                float _3365 = ((_3361 * _3361) * (_3343 + (-1.0))) + 1.0;
                                float _3366 = _3303 * _3342;
                                float _3367 = _3366 * _3366;
                                float _3373 = ((1.0 - _3367) * dot(vec3(_452, _455, _458), vec3(_3290, _3291, _3292))) + _3367;
                                float _4432 = isnan(0.0) ? _3373 : (isnan(_3373) ? 0.0 : max(_3373, 0.0));
                                float _3374 = isnan(1.0) ? _4432 : (isnan(_4432) ? 1.0 : min(_4432, 1.0));
                                float _3375 = 1.0 - _3342;
                                float _3385 = (0.5 / (((_3374 * ((_3357 * _3375) + _3342)) + 9.9999999392252902907785028219223e-09) + (((_3374 * _3375) + _3342) * _3357))) * _3374;
                                float _4443 = isnan(0.0) ? _3385 : (isnan(_3385) ? 0.0 : max(_3385, 0.0));
                                float _3395 = (_3320 * _3297) * (((_3343 * 3.1415927410125732421875) * (isnan(1.0) ? _4443 : (isnan(_4443) ? 1.0 : min(_4443, 1.0)))) / ((_3365 * _3365) * ((_3310 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3321 * _3164.y;
                                frontier_phi_78_pred_1 = _3321 * _3164.x;
                                frontier_phi_78_pred_2 = _3395 * _3176.z;
                                frontier_phi_78_pred_3 = _3395 * _3176.y;
                                frontier_phi_78_pred_4 = _3395 * _3176.x;
                                frontier_phi_78_pred_5 = _3321 * _3164.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3403 = frontier_phi_78_pred;
                            _3402 = frontier_phi_78_pred_1;
                            _3401 = frontier_phi_78_pred_2;
                            _3400 = frontier_phi_78_pred_3;
                            _3399 = frontier_phi_78_pred_4;
                            _3404 = frontier_phi_78_pred_5;
                            _3106 = _3402 + _3119;
                            _3107 = _3403 + _3120;
                            _3108 = _3404 + _3121;
                            _3103 = _3399 + _3116;
                            _3104 = _3400 + _3117;
                            _3105 = _3401 + _3118;
                            if (_3123 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3116 = _3103;
                                _3117 = _3104;
                                _3118 = _3105;
                                _3119 = _3106;
                                _3120 = _3107;
                                _3121 = _3108;
                                _3122 = _3123;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3108;
                        frontier_phi_72_pred_1 = _3107;
                        frontier_phi_72_pred_2 = _3106;
                        frontier_phi_72_pred_3 = _3105;
                        frontier_phi_72_pred_4 = _3104;
                        frontier_phi_72_pred_5 = _3103;
                    }
                    _2776 = frontier_phi_72_pred;
                    _2774 = frontier_phi_72_pred_1;
                    _2772 = frontier_phi_72_pred_2;
                    _2770 = frontier_phi_72_pred_3;
                    _2768 = frontier_phi_72_pred_4;
                    _2766 = frontier_phi_72_pred_5;
                    uint _2911 = _2910 + 1u;
                    if (_2911 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2904 = _2766;
                        _2905 = _2768;
                        _2906 = _2770;
                        _2907 = _2772;
                        _2908 = _2774;
                        _2909 = _2776;
                        _2910 = _2911;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2776;
                frontier_phi_60_61_ladder_1 = _2774;
                frontier_phi_60_61_ladder_2 = _2770;
                frontier_phi_60_61_ladder_3 = _2768;
                frontier_phi_60_61_ladder_4 = _2766;
                frontier_phi_60_61_ladder_5 = _2772;
            }
            else
            {
                frontier_phi_60_61_ladder = _2654;
                frontier_phi_60_61_ladder_1 = _2652;
                frontier_phi_60_61_ladder_2 = _2648;
                frontier_phi_60_61_ladder_3 = _2646;
                frontier_phi_60_61_ladder_4 = _2644;
                frontier_phi_60_61_ladder_5 = _2650;
            }
            _2765 = frontier_phi_60_61_ladder_4;
            _2767 = frontier_phi_60_61_ladder_3;
            _2769 = frontier_phi_60_61_ladder_2;
            _2771 = frontier_phi_60_61_ladder_5;
            _2773 = frontier_phi_60_61_ladder_1;
            _2775 = frontier_phi_60_61_ladder;
        }
        float _2780 = isnan(1.0) ? _511 : (isnan(_511) ? 1.0 : min(_511, 1.0));
        _2548 = (_2780 * _2771) + _2060;
        _2550 = (_2780 * _2773) + _2062;
        _2552 = (_2780 * _2775) + _2064;
        _2554 = ((_2765 * _496) * _2780) + _2398;
        _2556 = ((_2767 * _498) * _2780) + _2400;
        _2558 = ((_2769 * _499) * _2780) + _2402;
    }
    else
    {
        _2548 = _2060;
        _2550 = _2062;
        _2552 = _2064;
        _2554 = _2398;
        _2556 = _2400;
        _2558 = _2402;
    }
    uint _2564 = _472 + uint(cbMatDynParam._m0[0u].w);
    float _2570 = ((((cbMtdParam._m0[10u].x * cbMtdParam._m0[12u].y) * _305.x) + cbMtdParam._m0[11u].x) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_2564].x;
    float _2571 = ((((cbMtdParam._m0[10u].y * cbMtdParam._m0[12u].y) * _305.y) + cbMtdParam._m0[11u].y) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_2564].y;
    float _2572 = ((cbMtdParam._m0[11u].z + ((cbMtdParam._m0[10u].z * cbMtdParam._m0[12u].y) * _305.z)) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_2564].z;
    float _4459 = isnan(0.0) ? _486 : (isnan(_486) ? 0.0 : max(_486, 0.0));
    float _4470 = isnan(0.0) ? _487 : (isnan(_487) ? 0.0 : max(_487, 0.0));
    float _4481 = isnan(0.0) ? _488 : (isnan(_488) ? 0.0 : max(_488, 0.0));
    float _2589 = (((isnan(1.0) ? _4459 : (isnan(_4459) ? 1.0 : min(_4459, 1.0))) * (_2548 + ((isnan(0.0) ? _1242 : (isnan(_1242) ? 0.0 : max(_1242, 0.0))) * _511))) + ((_2554 + ((isnan(0.0) ? _1540 : (isnan(_1540) ? 0.0 : max(_1540, 0.0))) * _1321)) * cbPerFrame._m0[3u].x)) + _2570;
    float _2591 = (_2571 + ((_2556 + ((isnan(0.0) ? _1543 : (isnan(_1543) ? 0.0 : max(_1543, 0.0))) * _1321)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4470 : (isnan(_4470) ? 1.0 : min(_4470, 1.0))) * (_2550 + ((isnan(0.0) ? _1245 : (isnan(_1245) ? 0.0 : max(_1245, 0.0))) * _511)));
    float _2593 = (_2572 + ((_2558 + ((isnan(0.0) ? _1546 : (isnan(_1546) ? 0.0 : max(_1546, 0.0))) * _1321)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4481 : (isnan(_4481) ? 1.0 : min(_4481, 1.0))) * (_2552 + ((isnan(0.0) ? _1248 : (isnan(_1248) ? 0.0 : max(_1248, 0.0))) * _511)));
    float _4507 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2606 = isnan(1.0) ? _4507 : (isnan(_4507) ? 1.0 : min(_4507, 1.0));
    uint _2607 = _471 + 6u;
    float _2615 = _430 / cbSceneParam._m0[86u].x;
    float _2616 = _431 / cbSceneParam._m0[86u].y;
    vec4 _2630 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2615, _2616, (log2((isnan(cbSceneParam._m0[77u].w) ? _364 : (isnan(_364) ? cbSceneParam._m0[77u].w : min(_364, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2632 = _2630.x;
    float _2633 = _2630.y;
    float _2634 = _2630.z;
    float _2635 = _2630.w;
    float _2707;
    float _2709;
    float _2711;
    float _2713;
    if (_364 > cbSceneParam._m0[78u].w)
    {
        float _2669 = isnan(_364) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _364 : min(cbSceneParam._m0[80u].w, _364));
        float _2670 = _2669 / _364;
        float _2681 = _2670 * _415;
        float _2682 = _416 * _2670;
        float _2683 = (-0.0) - _2682;
        float _2685 = _2670 * _417;
        float _2687 = (cbSceneParam._m0[77u].w * _2683) / _2669;
        float _2688 = _2687 + cbSceneParam._m0[79u].w;
        float _2689 = cbSceneParam._m0[79u].w - _2682;
        float _2695 = sqrt(((_2681 * _2681) + (_2682 * _2682)) + (_2685 * _2685));
        float _2698 = (1.0 - (cbSceneParam._m0[77u].w / _2669)) * _2695;
        float _2703 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2705 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2866;
        if (abs((_2683 - _2687) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2866 = ((((_2688 > 0.0) ? exp2(_2703 * _2688) : (2.0 - exp2(_2705 * _2688))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2698;
        }
        else
        {
            float _2826 = 1.0 / cbSceneParam._m0[80u].x;
            float _2827 = isnan(_2689) ? _2688 : (isnan(_2688) ? _2689 : max(_2688, _2689));
            float _2828 = isnan(_2689) ? _2688 : (isnan(_2688) ? _2689 : min(_2688, _2689));
            float _2837 = isnan(0.0) ? _2827 : (isnan(_2827) ? 0.0 : min(_2827, 0.0));
            float _2838 = isnan(0.0) ? _2828 : (isnan(_2828) ? 0.0 : min(_2828, 0.0));
            _2866 = ((abs(_2695 / _2683) * cbSceneParam._m0[80u].y) * ((((_2837 - _2838) * 2.0) - ((exp2(_2703 * (isnan(0.0) ? _2827 : (isnan(_2827) ? 0.0 : max(_2827, 0.0)))) - exp2(_2703 * (isnan(0.0) ? _2828 : (isnan(_2828) ? 0.0 : max(_2828, 0.0))))) * _2826)) - ((exp2(_2705 * _2837) - exp2(_2705 * _2838)) * _2826))) + (_2698 * cbSceneParam._m0[80u].z);
        }
        vec4 _2868 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2615, _2616, 1.0), 0.0);
        float _2877 = exp2((_2866 * (-1.44269502162933349609375)) * (1.0 - _2868.w));
        float _2878 = log2(_2877);
        float _2894 = log2(_2635);
        _2707 = (exp2(_2894 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2878 * cbSceneParam._m0[78u].x)) * _2868.x) / cbSceneParam._m0[78u].x)) + _2632;
        _2709 = (exp2(_2894 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2878 * cbSceneParam._m0[78u].y)) * _2868.y) / cbSceneParam._m0[78u].y)) + _2633;
        _2711 = (exp2(_2894 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2878 * cbSceneParam._m0[78u].z)) * _2868.z) / cbSceneParam._m0[78u].z)) + _2634;
        _2713 = _2877 * _2635;
    }
    else
    {
        _2707 = _2632;
        _2709 = _2633;
        _2711 = _2634;
        _2713 = _2635;
    }
    float _2724 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2725 = _2724 == 3.0;
    float _2726 = log2(_2713);
    float _2730 = exp2(_2726 * cbSceneParam._m0[78u].x);
    float _2731 = exp2(_2726 * cbSceneParam._m0[78u].y);
    float _2732 = exp2(_2726 * cbSceneParam._m0[78u].z);
    float _2733 = _2730 * (isnan(0.0) ? _2589 : (isnan(_2589) ? 0.0 : max(_2589, 0.0)));
    float _2734 = _2731 * (isnan(0.0) ? _2591 : (isnan(_2591) ? 0.0 : max(_2591, 0.0)));
    float _2735 = _2732 * (isnan(0.0) ? _2593 : (isnan(_2593) ? 0.0 : max(_2593, 0.0)));
    float _2744 = (_2724 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2744 * (_2725 ? _2733 : (_2733 + (cbSceneParam._m0[72u].w * _2707)));
    SV_Target.y = _2744 * (_2725 ? _2734 : (_2734 + (cbSceneParam._m0[72u].w * _2709)));
    SV_Target.z = _2744 * (_2725 ? _2735 : (_2735 + (cbSceneParam._m0[72u].w * _2711)));
    SV_Target.w = cbInstanceData._m0[_2607].w;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2570) * _2606) * _2730) * _2744;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2571) * _2606) * _2731) * _2744;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2572) * _2606) * _2732) * _2744;
    SV_Target_1.w = cbInstanceData._m0[_2607].w;
}


