#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[13];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D P_BS_M1_Emissive_Glow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D P_BS_M1_Emissive_Glow_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D P_BS_M1_Emissive_Glow_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D P_BS_M1_Emissive_Glow_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _884;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _180 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _181 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _182 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _187 = inversesqrt(dot(vec3(_180, _181, _182), vec3(_180, _181, _182)));
    float _194 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _201 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _224 = texture(sampler2D(P_BS_M1_Emissive_Glow_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _230 = _224.x * cbMtdParam._m0[9u].x;
    float _231 = _224.y * cbMtdParam._m0[9u].y;
    float _232 = _224.z * cbMtdParam._m0[9u].z;
    vec4 _244 = texture(sampler2D(P_BS_M1_Emissive_Glow_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _251 = cbMtdParam._m0[12u].x + _244.x;
    vec4 _263 = texture(sampler2D(P_BS_M1_Emissive_Glow_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _267 = _263.z;
    float _271 = (_263.x * 2.0) + (-1.0);
    float _273 = (_263.y * 2.0) + (-1.0);
    float _274 = dot(vec2(_271, _273), vec2(_271, _273));
    float _3281 = isnan(0.0) ? _274 : (isnan(_274) ? 0.0 : max(_274, 0.0));
    float _280 = sqrt(1.0 - (isnan(1.0) ? _3281 : (isnan(_3281) ? 1.0 : min(_3281, 1.0))));
    vec4 _303 = texture(sampler2D(P_BS_M1_Emissive_Glow_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _328 = fma(_280, _194 * NORMAL.x, fma(_273, _201 * TANGENT.x, (_187 * _180) * _271));
    float _331 = fma(_280, _194 * NORMAL.y, fma(_273, _201 * TANGENT.y, (_187 * _181) * _271));
    float _334 = fma(_280, _194 * NORMAL.z, fma(_273, _201 * TANGENT.z, (_187 * _182) * _271));
    float _338 = inversesqrt(dot(vec3(_328, _331, _334), vec3(_328, _331, _334)));
    float _339 = _338 * _328;
    float _340 = _338 * _331;
    float _341 = _338 * _334;
    float _3292 = isnan(0.0) ? _267 : (isnan(_267) ? 0.0 : max(_267, 0.0));
    float _342 = isnan(1.0) ? _3292 : (isnan(_3292) ? 1.0 : min(_3292, 1.0));
    float _3303 = isnan(0.0) ? _230 : (isnan(_230) ? 0.0 : max(_230, 0.0));
    float _3314 = isnan(0.0) ? _231 : (isnan(_231) ? 0.0 : max(_231, 0.0));
    float _3325 = isnan(0.0) ? _232 : (isnan(_232) ? 0.0 : max(_232, 0.0));
    float _3336 = isnan(0.0) ? _251 : (isnan(_251) ? 0.0 : max(_251, 0.0));
    float _346 = isnan(1.0) ? _3336 : (isnan(_3336) ? 1.0 : min(_3336, 1.0));
    float _362 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _403 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _413 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _403);
    float _414 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _403);
    float _415 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _403);
    float _419 = inversesqrt(dot(vec3(_413, _414, _415), vec3(_413, _414, _415)));
    float _420 = _413 * _419;
    float _421 = _414 * _419;
    float _422 = _415 * _419;
    float _428 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _429 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _450 = fma(_341, cbSceneParam._m0[5u].z, fma(_340, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _339));
    float _453 = fma(_341, cbSceneParam._m0[6u].z, fma(_340, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _339));
    float _456 = fma(_341, cbSceneParam._m0[7u].z, fma(_340, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _339));
    uint _469 = uint(roundEven(NORMAL.w)) * 13u;
    uint _470 = _469 + 9u;
    uint _471 = _470 + uint(cbMatDynParam._m0[0u].w);
    float _477 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3303 : (isnan(_3303) ? 1.0 : min(_3303, 1.0)))) * cbInstanceData._m0[_471].x;
    float _478 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3314 : (isnan(_3314) ? 1.0 : min(_3314, 1.0)))) * cbInstanceData._m0[_471].y;
    float _479 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3325 : (isnan(_3325) ? 1.0 : min(_3325, 1.0)))) * cbInstanceData._m0[_471].z;
    float _3347 = isnan(0.0) ? _477 : (isnan(_477) ? 0.0 : max(_477, 0.0));
    float _480 = isnan(1.0) ? _3347 : (isnan(_3347) ? 1.0 : min(_3347, 1.0));
    float _3358 = isnan(0.0) ? _478 : (isnan(_478) ? 0.0 : max(_478, 0.0));
    float _481 = isnan(1.0) ? _3358 : (isnan(_3358) ? 1.0 : min(_3358, 1.0));
    float _3369 = isnan(0.0) ? _479 : (isnan(_479) ? 0.0 : max(_479, 0.0));
    float _482 = isnan(1.0) ? _3369 : (isnan(_3369) ? 1.0 : min(_3369, 1.0));
    float _483 = 1.0 - _346;
    float _484 = _480 * _483;
    float _485 = _481 * _483;
    float _486 = _482 * _483;
    float _491 = (_480 + (-0.039999999105930328369140625)) * _346;
    float _492 = (_481 + (-0.039999999105930328369140625)) * _346;
    float _493 = (_482 + (-0.039999999105930328369140625)) * _346;
    float _494 = _491 + 0.039999999105930328369140625;
    float _496 = _492 + 0.039999999105930328369140625;
    float _497 = _493 + 0.039999999105930328369140625;
    vec4 _506 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _428, cbSceneParam._m0[86u].y * _429));
    float _509 = _506.x * TEXCOORD.z;
    float _510 = dot(vec3(_339, _340, _341), vec3(_420, _421, _422));
    float _513 = _510 * 2.0;
    float _517 = (_513 * _339) - _420;
    float _518 = (_513 * _340) - _421;
    float _519 = (_513 * _341) - _422;
    float _523 = abs(dot(vec3(_420, _421, _422), vec3(_339, _340, _341)));
    float _3380 = isnan(0.0) ? _523 : (isnan(_523) ? 0.0 : max(_523, 0.0));
    float _525 = sqrt(_342);
    float _538 = exp2((_525 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3380 : (isnan(_3380) ? 1.0 : min(_3380, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_525 * 3.0));
    float _544 = (1.0 - _538) * ((_525 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _545 = _538 * _525;
    float _573 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _577 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _581 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _883;
    float _885;
    float _886;
    float _887;
    float _888;
    float _889;
    float _890;
    float _891;
    float _892;
    float _893;
    float _894;
    float _895;
    float _896;
    float _897;
    float _898;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _608 = fma(_581, cbModelParam._m0[26u].z, fma(_577, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _573));
        float _612 = fma(_581, cbModelParam._m0[27u].z, fma(_577, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _573));
        float _616 = fma(_581, cbModelParam._m0[28u].z, fma(_577, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _573));
        float _641 = _573 + _339;
        float _642 = _577 + _340;
        float _643 = _581 + _341;
        float _653 = fma(_643, cbModelParam._m0[26u].z, fma(_642, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _641)) - _608;
        float _654 = fma(_643, cbModelParam._m0[27u].z, fma(_642, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _641)) - _612;
        float _655 = fma(_643, cbModelParam._m0[28u].z, fma(_642, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _641)) - _616;
        float _659 = inversesqrt(dot(vec3(_653, _654, _655), vec3(_653, _654, _655)));
        float _672 = ((_659 * _653) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_608 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _673 = ((_659 * _654) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_612 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _674 = ((_659 * _655) / cbModelParam._m0[34u].z) + ((((((_616 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _677 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_672, _673, _674), 0.0);
        vec4 _684 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_672, _673, _674), 0.0);
        vec4 _691 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_672, _673, _674), 0.0);
        vec4 _698 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_672, _673, _674), 0.0);
        float _711 = exp2((_677.w + (-0.5)) * 20.0) * 2.0;
        float _712 = _711 * (_677.x + (-0.5));
        float _713 = _711 * (_677.y + (-0.5));
        float _714 = _711 * (_677.z + (-0.5));
        float _721 = exp2((_684.w + (-0.5)) * 20.0) * 2.0;
        float _722 = _721 * (_684.x + (-0.5));
        float _723 = _721 * (_684.y + (-0.5));
        float _724 = _721 * (_684.z + (-0.5));
        float _731 = exp2((_691.w + (-0.5)) * 20.0) * 2.0;
        float _732 = _731 * (_691.x + (-0.5));
        float _733 = _731 * (_691.y + (-0.5));
        float _734 = _731 * (_691.z + (-0.5));
        float _741 = exp2((_698.w + (-0.5)) * 20.0) * 2.0;
        float _742 = _741 * (_698.x + (-0.5));
        float _743 = _741 * (_698.y + (-0.5));
        float _744 = _741 * (_698.z + (-0.5));
        float _745 = isnan(0.0) ? _742 : (isnan(_742) ? 0.0 : max(_742, 0.0));
        float _746 = isnan(0.0) ? _743 : (isnan(_743) ? 0.0 : max(_743, 0.0));
        float _747 = isnan(0.0) ? _744 : (isnan(_744) ? 0.0 : max(_744, 0.0));
        float _748 = _712 * 0.5;
        float _749 = _722 * 0.5;
        float _750 = _732 * 0.5;
        float _751 = dot(vec3(_748, _749, _750), vec3(_748, _749, _750));
        float _756 = (_751 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_751);
        float _765 = (dot(vec3(_339, _340, _341), vec3(_756 * _748, _756 * _749, _756 * _750)) + 1.0) * 0.5;
        float _3406 = isnan(0.0) ? _765 : (isnan(_765) ? 0.0 : max(_765, 0.0));
        float _775 = sqrt(((_749 * _749) + (_748 * _748)) + (_750 * _750)) / (_745 + 9.9999997473787516355514526367188e-06);
        float _3417 = isnan(0.0) ? _775 : (isnan(_775) ? 0.0 : max(_775, 0.0));
        float _776 = isnan(1.0) ? _3417 : (isnan(_3417) ? 1.0 : min(_3417, 1.0));
        float _777 = _776 * 2.0;
        float _781 = (1.0 - _776) / (_776 + 1.0);
        float _3428 = isnan(0.0) ? _781 : (isnan(_781) ? 0.0 : max(_781, 0.0));
        float _782 = isnan(1.0) ? _3428 : (isnan(_3428) ? 1.0 : min(_3428, 1.0));
        float _791 = ((((1.0 - _782) * (_777 + 2.0)) * exp2(log2(isnan(1.0) ? _3406 : (isnan(_3406) ? 1.0 : min(_3406, 1.0))) * (_777 + 1.0))) + _782) * _745;
        float _792 = _713 * 0.5;
        float _793 = _723 * 0.5;
        float _794 = _733 * 0.5;
        float _795 = dot(vec3(_792, _793, _794), vec3(_792, _793, _794));
        float _800 = (_795 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_795);
        float _808 = (dot(vec3(_339, _340, _341), vec3(_800 * _792, _800 * _793, _800 * _794)) + 1.0) * 0.5;
        float _3439 = isnan(0.0) ? _808 : (isnan(_808) ? 0.0 : max(_808, 0.0));
        float _817 = sqrt(((_793 * _793) + (_792 * _792)) + (_794 * _794)) / (_746 + 9.9999997473787516355514526367188e-06);
        float _3450 = isnan(0.0) ? _817 : (isnan(_817) ? 0.0 : max(_817, 0.0));
        float _818 = isnan(1.0) ? _3450 : (isnan(_3450) ? 1.0 : min(_3450, 1.0));
        float _819 = _818 * 2.0;
        float _823 = (1.0 - _818) / (_818 + 1.0);
        float _3461 = isnan(0.0) ? _823 : (isnan(_823) ? 0.0 : max(_823, 0.0));
        float _824 = isnan(1.0) ? _3461 : (isnan(_3461) ? 1.0 : min(_3461, 1.0));
        float _833 = ((((1.0 - _824) * (_819 + 2.0)) * exp2(log2(isnan(1.0) ? _3439 : (isnan(_3439) ? 1.0 : min(_3439, 1.0))) * (_819 + 1.0))) + _824) * _746;
        float _834 = _714 * 0.5;
        float _835 = _724 * 0.5;
        float _836 = _734 * 0.5;
        float _837 = dot(vec3(_834, _835, _836), vec3(_834, _835, _836));
        float _842 = (_837 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_837);
        float _850 = (dot(vec3(_339, _340, _341), vec3(_842 * _834, _842 * _835, _842 * _836)) + 1.0) * 0.5;
        float _3472 = isnan(0.0) ? _850 : (isnan(_850) ? 0.0 : max(_850, 0.0));
        float _859 = sqrt(((_835 * _835) + (_834 * _834)) + (_836 * _836)) / (_747 + 9.9999997473787516355514526367188e-06);
        float _3483 = isnan(0.0) ? _859 : (isnan(_859) ? 0.0 : max(_859, 0.0));
        float _860 = isnan(1.0) ? _3483 : (isnan(_3483) ? 1.0 : min(_3483, 1.0));
        float _861 = _860 * 2.0;
        float _865 = (1.0 - _860) / (_860 + 1.0);
        float _3494 = isnan(0.0) ? _865 : (isnan(_865) ? 0.0 : max(_865, 0.0));
        float _866 = isnan(1.0) ? _3494 : (isnan(_3494) ? 1.0 : min(_3494, 1.0));
        float _875 = ((((1.0 - _866) * (_861 + 2.0)) * exp2(log2(isnan(1.0) ? _3472 : (isnan(_3472) ? 1.0 : min(_3472, 1.0))) * (_861 + 1.0))) + _866) * _747;
        _883 = _714;
        _885 = _713;
        _886 = _712;
        _887 = _724;
        _888 = _723;
        _889 = _722;
        _890 = _734;
        _891 = _733;
        _892 = _732;
        _893 = _747;
        _894 = _746;
        _895 = _745;
        _896 = cbModelParam._m0[36u].z * (isnan(0.0) ? _791 : (isnan(_791) ? 0.0 : max(_791, 0.0)));
        _897 = cbModelParam._m0[36u].z * (isnan(0.0) ? _833 : (isnan(_833) ? 0.0 : max(_833, 0.0)));
        _898 = cbModelParam._m0[36u].z * (isnan(0.0) ? _875 : (isnan(_875) ? 0.0 : max(_875, 0.0)));
    }
    else
    {
        _883 = _884;
        _885 = _884;
        _886 = _884;
        _887 = _884;
        _888 = _884;
        _889 = _884;
        _890 = _884;
        _891 = _884;
        _892 = _884;
        _893 = _884;
        _894 = _884;
        _895 = _884;
        _896 = 0.0;
        _897 = 0.0;
        _898 = 0.0;
    }
    float _1193;
    float _1194;
    float _1195;
    float _1196;
    float _1197;
    float _1198;
    float _1199;
    float _1200;
    float _1201;
    float _1202;
    float _1203;
    float _1204;
    float _1205;
    float _1206;
    float _1207;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _924 = fma(_581, cbModelParam._m0[30u].z, fma(_577, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _573));
        float _928 = fma(_581, cbModelParam._m0[31u].z, fma(_577, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _573));
        float _932 = fma(_581, cbModelParam._m0[32u].z, fma(_577, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _573));
        float _955 = _573 + _339;
        float _956 = _577 + _340;
        float _957 = _581 + _341;
        float _967 = fma(_957, cbModelParam._m0[30u].z, fma(_956, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _955)) - _924;
        float _968 = fma(_957, cbModelParam._m0[31u].z, fma(_956, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _955)) - _928;
        float _969 = fma(_957, cbModelParam._m0[32u].z, fma(_956, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _955)) - _932;
        float _973 = inversesqrt(dot(vec3(_967, _968, _969), vec3(_967, _968, _969)));
        float _986 = ((_973 * _967) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_924 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _987 = ((_973 * _968) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_928 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _988 = ((_973 * _969) / cbModelParam._m0[35u].z) + ((((((_932 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _990 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_986, _987, _988), 0.0);
        vec4 _997 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_986, _987, _988), 0.0);
        vec4 _1004 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_986, _987, _988), 0.0);
        vec4 _1011 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_986, _987, _988), 0.0);
        float _1023 = exp2((_990.w + (-0.5)) * 20.0) * 2.0;
        float _1024 = _1023 * (_990.x + (-0.5));
        float _1025 = _1023 * (_990.y + (-0.5));
        float _1026 = _1023 * (_990.z + (-0.5));
        float _1033 = exp2((_997.w + (-0.5)) * 20.0) * 2.0;
        float _1034 = _1033 * (_997.x + (-0.5));
        float _1035 = _1033 * (_997.y + (-0.5));
        float _1036 = _1033 * (_997.z + (-0.5));
        float _1043 = exp2((_1004.w + (-0.5)) * 20.0) * 2.0;
        float _1044 = _1043 * (_1004.x + (-0.5));
        float _1045 = _1043 * (_1004.y + (-0.5));
        float _1046 = _1043 * (_1004.z + (-0.5));
        float _1053 = exp2((_1011.w + (-0.5)) * 20.0) * 2.0;
        float _1054 = _1053 * (_1011.x + (-0.5));
        float _1055 = _1053 * (_1011.y + (-0.5));
        float _1056 = _1053 * (_1011.z + (-0.5));
        float _1057 = isnan(0.0) ? _1054 : (isnan(_1054) ? 0.0 : max(_1054, 0.0));
        float _1058 = isnan(0.0) ? _1055 : (isnan(_1055) ? 0.0 : max(_1055, 0.0));
        float _1059 = isnan(0.0) ? _1056 : (isnan(_1056) ? 0.0 : max(_1056, 0.0));
        float _1060 = _1024 * 0.5;
        float _1061 = _1034 * 0.5;
        float _1062 = _1044 * 0.5;
        float _1063 = dot(vec3(_1060, _1061, _1062), vec3(_1060, _1061, _1062));
        float _1068 = (_1063 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1063);
        float _1076 = (dot(vec3(_339, _340, _341), vec3(_1068 * _1060, _1068 * _1061, _1068 * _1062)) + 1.0) * 0.5;
        float _3535 = isnan(0.0) ? _1076 : (isnan(_1076) ? 0.0 : max(_1076, 0.0));
        float _1085 = sqrt(((_1061 * _1061) + (_1060 * _1060)) + (_1062 * _1062)) / (_1057 + 9.9999997473787516355514526367188e-06);
        float _3546 = isnan(0.0) ? _1085 : (isnan(_1085) ? 0.0 : max(_1085, 0.0));
        float _1086 = isnan(1.0) ? _3546 : (isnan(_3546) ? 1.0 : min(_3546, 1.0));
        float _1087 = _1086 * 2.0;
        float _1091 = (1.0 - _1086) / (_1086 + 1.0);
        float _3557 = isnan(0.0) ? _1091 : (isnan(_1091) ? 0.0 : max(_1091, 0.0));
        float _1092 = isnan(1.0) ? _3557 : (isnan(_3557) ? 1.0 : min(_3557, 1.0));
        float _1101 = ((((1.0 - _1092) * (_1087 + 2.0)) * exp2(log2(isnan(1.0) ? _3535 : (isnan(_3535) ? 1.0 : min(_3535, 1.0))) * (_1087 + 1.0))) + _1092) * _1057;
        float _1102 = _1025 * 0.5;
        float _1103 = _1035 * 0.5;
        float _1104 = _1045 * 0.5;
        float _1105 = dot(vec3(_1102, _1103, _1104), vec3(_1102, _1103, _1104));
        float _1110 = (_1105 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1105);
        float _1118 = (dot(vec3(_339, _340, _341), vec3(_1110 * _1102, _1110 * _1103, _1110 * _1104)) + 1.0) * 0.5;
        float _3568 = isnan(0.0) ? _1118 : (isnan(_1118) ? 0.0 : max(_1118, 0.0));
        float _1127 = sqrt(((_1103 * _1103) + (_1102 * _1102)) + (_1104 * _1104)) / (_1058 + 9.9999997473787516355514526367188e-06);
        float _3579 = isnan(0.0) ? _1127 : (isnan(_1127) ? 0.0 : max(_1127, 0.0));
        float _1128 = isnan(1.0) ? _3579 : (isnan(_3579) ? 1.0 : min(_3579, 1.0));
        float _1129 = _1128 * 2.0;
        float _1133 = (1.0 - _1128) / (_1128 + 1.0);
        float _3590 = isnan(0.0) ? _1133 : (isnan(_1133) ? 0.0 : max(_1133, 0.0));
        float _1134 = isnan(1.0) ? _3590 : (isnan(_3590) ? 1.0 : min(_3590, 1.0));
        float _1143 = ((((1.0 - _1134) * (_1129 + 2.0)) * exp2(log2(isnan(1.0) ? _3568 : (isnan(_3568) ? 1.0 : min(_3568, 1.0))) * (_1129 + 1.0))) + _1134) * _1058;
        float _1144 = _1026 * 0.5;
        float _1145 = _1036 * 0.5;
        float _1146 = _1046 * 0.5;
        float _1147 = dot(vec3(_1144, _1145, _1146), vec3(_1144, _1145, _1146));
        float _1152 = (_1147 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1147);
        float _1160 = (dot(vec3(_339, _340, _341), vec3(_1152 * _1144, _1152 * _1145, _1152 * _1146)) + 1.0) * 0.5;
        float _3601 = isnan(0.0) ? _1160 : (isnan(_1160) ? 0.0 : max(_1160, 0.0));
        float _1169 = sqrt(((_1145 * _1145) + (_1144 * _1144)) + (_1146 * _1146)) / (_1059 + 9.9999997473787516355514526367188e-06);
        float _3612 = isnan(0.0) ? _1169 : (isnan(_1169) ? 0.0 : max(_1169, 0.0));
        float _1170 = isnan(1.0) ? _3612 : (isnan(_3612) ? 1.0 : min(_3612, 1.0));
        float _1171 = _1170 * 2.0;
        float _1175 = (1.0 - _1170) / (_1170 + 1.0);
        float _3623 = isnan(0.0) ? _1175 : (isnan(_1175) ? 0.0 : max(_1175, 0.0));
        float _1176 = isnan(1.0) ? _3623 : (isnan(_3623) ? 1.0 : min(_3623, 1.0));
        float _1185 = ((((1.0 - _1176) * (_1171 + 2.0)) * exp2(log2(isnan(1.0) ? _3601 : (isnan(_3601) ? 1.0 : min(_3601, 1.0))) * (_1171 + 1.0))) + _1176) * _1059;
        _1193 = _1026;
        _1194 = _1025;
        _1195 = _1024;
        _1196 = _1036;
        _1197 = _1035;
        _1198 = _1034;
        _1199 = _1046;
        _1200 = _1045;
        _1201 = _1044;
        _1202 = _1059;
        _1203 = _1058;
        _1204 = _1057;
        _1205 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1101 : (isnan(_1101) ? 0.0 : max(_1101, 0.0)));
        _1206 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1143 : (isnan(_1143) ? 0.0 : max(_1143, 0.0)));
        _1207 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1185 : (isnan(_1185) ? 0.0 : max(_1185, 0.0)));
    }
    else
    {
        _1193 = _884;
        _1194 = _884;
        _1195 = _884;
        _1196 = _884;
        _1197 = _884;
        _1198 = _884;
        _1199 = _884;
        _1200 = _884;
        _1201 = _884;
        _1202 = _884;
        _1203 = _884;
        _1204 = _884;
        _1205 = 0.0;
        _1206 = 0.0;
        _1207 = 0.0;
    }
    float _1217 = (cbModelParam._m0[1u].x * (_1205 - _896)) + _896;
    float _1218 = (cbModelParam._m0[1u].x * (_1206 - _897)) + _897;
    float _1219 = (cbModelParam._m0[1u].x * (_1207 - _898)) + _898;
    float _1240 = fma(_1219, cbSceneParam._m0[89u].z, fma(_1218, cbSceneParam._m0[89u].y, _1217 * cbSceneParam._m0[89u].x));
    float _1243 = fma(_1219, cbSceneParam._m0[90u].z, fma(_1218, cbSceneParam._m0[90u].y, _1217 * cbSceneParam._m0[90u].x));
    float _1246 = fma(_1219, cbSceneParam._m0[91u].z, fma(_1218, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1217));
    float _1261 = _517 * 0.5;
    float _1262 = _518 * 0.5;
    float _1263 = _519 * 0.5;
    float _1264 = dot(vec4(_1261, _1262, _1263, 1.0), vec4(_1195, _1198, _1201, _1204));
    float _1267 = dot(vec4(_1261, _1262, _1263, 1.0), vec4(_1194, _1197, _1200, _1203));
    float _1270 = dot(vec4(_1261, _1262, _1263, 1.0), vec4(_1193, _1196, _1199, _1202));
    float _1304;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1277 = dot(vec4(_1261, _1262, _1263, 1.0), vec4(_883, _887, _890, _893));
        float _1281 = dot(vec4(_1261, _1262, _1263, 1.0), vec4(_885, _888, _891, _894));
        float _1285 = dot(vec4(_1261, _1262, _1263, 1.0), vec4(_886, _889, _892, _895));
        float _1292 = dot(vec4(cbModelParam._m0[39u]), vec4(_1261, _1262, _1263, 1.0));
        _1304 = dot(vec3(isnan(0.0) ? _1285 : (isnan(_1285) ? 0.0 : max(_1285, 0.0)), isnan(0.0) ? _1281 : (isnan(_1281) ? 0.0 : max(_1281, 0.0)), isnan(0.0) ? _1277 : (isnan(_1277) ? 0.0 : max(_1277, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1292) ? 0.0 : (isnan(0.0) ? _1292 : max(0.0, _1292))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1304 = 1.0;
    }
    float _1315;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1306 = dot(vec4(cbModelParam._m0[40u]), vec4(_1261, _1262, _1263, 1.0));
        _1315 = dot(vec3(isnan(0.0) ? _1264 : (isnan(_1264) ? 0.0 : max(_1264, 0.0)), isnan(0.0) ? _1267 : (isnan(_1267) ? 0.0 : max(_1267, 0.0)), isnan(0.0) ? _1270 : (isnan(_1270) ? 0.0 : max(_1270, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1306) ? 0.0 : (isnan(0.0) ? _1306 : max(0.0, _1306))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1315 = 1.0;
    }
    float _1319 = (_1315 * cbModelParam._m0[1u].x) + (_1304 * (1.0 - cbModelParam._m0[1u].x));
    float _1329 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _342);
    float _1330 = isnan(_1329) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1329 : min(cbModelParam._m0[25u].z, _1329));
    float _1412;
    float _1414;
    float _1416;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1379 = fma(_581, cbModelParam._m0[13u].z, fma(_577, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _573)) + cbModelParam._m0[13u].w;
        float _1383 = fma(_581, cbModelParam._m0[14u].z, fma(_577, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _573)) + cbModelParam._m0[14u].w;
        float _1387 = fma(_581, cbModelParam._m0[15u].z, fma(_577, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _573)) + cbModelParam._m0[15u].w;
        float _1390 = fma(_519, cbModelParam._m0[13u].z, fma(_518, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _517));
        float _1393 = fma(_519, cbModelParam._m0[14u].z, fma(_518, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _517));
        float _1396 = fma(_519, cbModelParam._m0[15u].z, fma(_518, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _517));
        float _1424;
        if (_1390 > 0.0)
        {
            _1424 = abs((1.0 - _1379) / _1390);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1390 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1379 + 1.0) / _1390);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1424 = frontier_phi_14_12_ladder;
        }
        float _1652;
        if (_1393 > 0.0)
        {
            _1652 = abs((1.0 - _1383) / _1393);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1393 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1383 + 1.0) / _1393);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1652 = frontier_phi_23_19_ladder;
        }
        float _1909;
        if (_1396 > 0.0)
        {
            _1909 = abs((1.0 - _1387) / _1396);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1396 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1387 + 1.0) / _1396);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _1909 = frontier_phi_35_30_ladder;
        }
        float _1911 = isnan(_1652) ? _1424 : (isnan(_1424) ? _1652 : min(_1424, _1652));
        float _1912 = isnan(_1909) ? _1911 : (isnan(_1911) ? _1909 : min(_1911, _1909));
        float _1916 = (_1912 * _1390) + _1379;
        float _1917 = (_1912 * _1393) + _1383;
        float _1918 = (_1912 * _1396) + _1387;
        float _1919 = _1912 * 9.9999997473787516355514526367188e-05;
        float _1921 = (-1.0) - _1919;
        float _1923 = _1919 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_1918 > _1923) || ((_1918 < _1921) || ((_1917 > _1923) || ((_1917 < _1921) || ((_1916 < _1921) || (_1916 > _1923))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2046 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1918, cbModelParam._m0[9u].z, fma(_1917, cbModelParam._m0[9u].y, _1916 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1918, cbModelParam._m0[10u].z, fma(_1917, cbModelParam._m0[10u].y, _1916 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1918, cbModelParam._m0[11u].z, fma(_1917, cbModelParam._m0[11u].y, _1916 * cbModelParam._m0[11u].x))), _1330);
            frontier_phi_13_35_ladder = _2046.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2046.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2046.x * cbModelParam._m0[1u].y;
        }
        _1412 = frontier_phi_13_35_ladder_2;
        _1414 = frontier_phi_13_35_ladder_1;
        _1416 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1400 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_517, _518, _519), _1330);
        _1412 = _1400.x * cbModelParam._m0[1u].y;
        _1414 = _1400.y * cbModelParam._m0[1u].y;
        _1416 = _1400.z * cbModelParam._m0[1u].y;
    }
    float _1420 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _342);
    float _1421 = isnan(_1420) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1420 : min(cbModelParam._m0[25u].w, _1420));
    float _1514;
    float _1516;
    float _1518;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1478 = fma(_581, cbModelParam._m0[21u].z, fma(_577, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _573)) + cbModelParam._m0[21u].w;
        float _1482 = fma(_581, cbModelParam._m0[22u].z, fma(_577, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _573)) + cbModelParam._m0[22u].w;
        float _1486 = fma(_581, cbModelParam._m0[23u].z, fma(_577, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _573)) + cbModelParam._m0[23u].w;
        float _1489 = fma(_519, cbModelParam._m0[21u].z, fma(_518, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _517));
        float _1492 = fma(_519, cbModelParam._m0[22u].z, fma(_518, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _517));
        float _1495 = fma(_519, cbModelParam._m0[23u].z, fma(_518, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _517));
        float _1657;
        if (_1489 > 0.0)
        {
            _1657 = abs((1.0 - _1478) / _1489);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1489 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1478 + 1.0) / _1489);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1657 = frontier_phi_25_21_ladder;
        }
        float _1936;
        if (_1492 > 0.0)
        {
            _1936 = abs((1.0 - _1482) / _1492);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1492 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1482 + 1.0) / _1492);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1936 = frontier_phi_37_32_ladder;
        }
        float _2149;
        if (_1495 > 0.0)
        {
            _2149 = abs((1.0 - _1486) / _1495);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1495 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1486 + 1.0) / _1495);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2149 = frontier_phi_46_43_ladder;
        }
        float _2151 = isnan(_1936) ? _1657 : (isnan(_1657) ? _1936 : min(_1657, _1936));
        float _2152 = isnan(_2149) ? _2151 : (isnan(_2151) ? _2149 : min(_2151, _2149));
        float _2156 = (_2152 * _1489) + _1478;
        float _2157 = (_2152 * _1492) + _1482;
        float _2158 = (_2152 * _1495) + _1486;
        float _2159 = _2152 * 9.9999997473787516355514526367188e-05;
        float _2160 = (-1.0) - _2159;
        float _2162 = _2159 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2158 > _2162) || ((_2158 < _2160) || ((_2157 > _2162) || ((_2157 < _2160) || ((_2156 < _2160) || (_2156 > _2162))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2386 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2158, cbModelParam._m0[17u].z, fma(_2157, cbModelParam._m0[17u].y, _2156 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2158, cbModelParam._m0[18u].z, fma(_2157, cbModelParam._m0[18u].y, _2156 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2158, cbModelParam._m0[19u].z, fma(_2157, cbModelParam._m0[19u].y, _2156 * cbModelParam._m0[19u].x))), _1421);
            frontier_phi_22_46_ladder = _2386.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2386.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2386.x * cbModelParam._m0[1u].z;
        }
        _1514 = frontier_phi_22_46_ladder_2;
        _1516 = frontier_phi_22_46_ladder_1;
        _1518 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1498 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_517, _518, _519), _1421);
        _1514 = _1498.x * cbModelParam._m0[1u].z;
        _1516 = _1498.y * cbModelParam._m0[1u].z;
        _1518 = _1498.z * cbModelParam._m0[1u].z;
    }
    float _1531 = (((_544 * _494) + _545) * _509) * ((cbModelParam._m0[1u].w * (_1514 - _1412)) + _1412);
    float _1533 = (((_544 * _496) + _545) * _509) * ((cbModelParam._m0[1u].w * (_1516 - _1414)) + _1414);
    float _1535 = (((_544 * _497) + _545) * _509) * ((cbModelParam._m0[1u].w * (_1518 - _1416)) + _1416);
    float _1538 = fma(_1535, cbSceneParam._m0[89u].z, fma(_1533, cbSceneParam._m0[89u].y, _1531 * cbSceneParam._m0[89u].x));
    float _1541 = fma(_1535, cbSceneParam._m0[90u].z, fma(_1533, cbSceneParam._m0[90u].y, _1531 * cbSceneParam._m0[90u].x));
    float _1544 = fma(_1535, cbSceneParam._m0[91u].z, fma(_1533, cbSceneParam._m0[91u].y, _1531 * cbSceneParam._m0[91u].x));
    vec4 _1552 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_428, _429));
    float _1554 = _1552.w;
    float _1566 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1554);
    float _1567 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1554);
    float _1568 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1554);
    uvec4 _1572 = floatBitsToUint(cbInstanceData._m0[_469 + 5u]);
    uint _1574 = _1572.x * 14u;
    uint _1575 = _1574 + 13u;
    float _1582 = _509 + (-1.0);
    float _1587 = (cbLight._m0[_1575].x * _1582) + 1.0;
    float _1588 = (cbLight._m0[_1575].y * _1582) + 1.0;
    float _1589 = (cbLight._m0[_1575].z * _1582) + 1.0;
    float _1590 = (cbLight._m0[_1575].w * _1582) + 1.0;
    uint _1591 = _1574 + 5u;
    float _1597 = isnan(1.0) ? _1588 : (isnan(_1588) ? 1.0 : min(_1588, 1.0));
    uint _1601 = _1574 + 4u;
    float _1611 = isnan(1.0) ? _1587 : (isnan(_1587) ? 1.0 : min(_1587, 1.0));
    uint _1615 = _1574 | 1u;
    float _1626 = dot(vec3(cbLight._m0[_1574].xyz), vec3(_339, _340, _341));
    float _1629 = dot(vec3(cbLight._m0[_1615].xyz), vec3(_339, _340, _341));
    float _3759 = isnan(0.0) ? _1626 : (isnan(_1626) ? 0.0 : max(_1626, 0.0));
    float _3770 = isnan(0.0) ? _1629 : (isnan(_1629) ? 0.0 : max(_1629, 0.0));
    float _1634 = (isnan(1.0) ? _3759 : (isnan(_3759) ? 1.0 : min(_3759, 1.0))) * 0.3183098733425140380859375;
    float _1636 = (isnan(1.0) ? _3770 : (isnan(_3770) ? 1.0 : min(_3770, 1.0))) * 0.3183098733425140380859375;
    float _1643 = ((cbLight._m0[_1591].x * _1597) * _1636) + (((cbLight._m0[_1601].x * _1566) * _1611) * _1634);
    float _1644 = ((_1597 * cbLight._m0[_1591].y) * _1636) + (((cbLight._m0[_1601].y * _1567) * _1611) * _1634);
    float _1645 = ((_1597 * cbLight._m0[_1591].z) * _1636) + (((cbLight._m0[_1601].z * _1568) * _1611) * _1634);
    uvec4 _1649 = floatBitsToUint(cbLight._m0[_1574 + 12u]);
    bool _1651 = _1649.x == 0u;
    float _1662;
    float _1664;
    float _1666;
    if (_1651)
    {
        _1662 = _1643;
        _1664 = _1644;
        _1666 = _1645;
    }
    else
    {
        uint _1670 = _1574 + 6u;
        float _1686 = (dot(vec3(cbLight._m0[_1574 + 2u].xyz), vec3(_339, _340, _341)) * 0.5) + 0.5;
        float _1687 = _1686 * _1686;
        float _3781 = isnan(0.0) ? _1687 : (isnan(_1687) ? 0.0 : max(_1687, 0.0));
        float _1688 = isnan(1.0) ? _3781 : (isnan(_3781) ? 1.0 : min(_3781, 1.0));
        float _1689 = isnan(1.0) ? _1589 : (isnan(_1589) ? 1.0 : min(_1589, 1.0));
        _1662 = (((cbLight._m0[_1670].x * 0.3183098733425140380859375) * _1688) * _1689) + _1643;
        _1664 = (((cbLight._m0[_1670].y * 0.3183098733425140380859375) * _1688) * _1689) + _1644;
        _1666 = (((cbLight._m0[_1670].z * 0.3183098733425140380859375) * _1688) * _1689) + _1645;
    }
    bool _1669 = _1649.y == 0u;
    float _1707;
    float _1709;
    float _1711;
    if (_1669)
    {
        _1707 = _1662;
        _1709 = _1664;
        _1711 = _1666;
    }
    else
    {
        uint _1880 = _1574 + 7u;
        float _1896 = (dot(vec3(cbLight._m0[_1574 + 3u].xyz), vec3(_339, _340, _341)) * 0.5) + 0.5;
        float _1897 = _1896 * _1896;
        float _3797 = isnan(0.0) ? _1897 : (isnan(_1897) ? 0.0 : max(_1897, 0.0));
        float _1898 = isnan(1.0) ? _3797 : (isnan(_3797) ? 1.0 : min(_3797, 1.0));
        float _1899 = isnan(1.0) ? _1590 : (isnan(_1590) ? 1.0 : min(_1590, 1.0));
        _1707 = (((cbLight._m0[_1880].x * 0.3183098733425140380859375) * _1898) * _1899) + _1662;
        _1709 = (((cbLight._m0[_1880].y * 0.3183098733425140380859375) * _1898) * _1899) + _1664;
        _1711 = (((cbLight._m0[_1880].z * 0.3183098733425140380859375) * _1898) * _1899) + _1666;
    }
    uint _1714 = _1574 + 8u;
    float _1727 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1574].w)) * _342) * 0.949999988079071044921875);
    float _1728 = _1727 * _1727;
    float _1729 = cbLight._m0[_1574].x + _420;
    float _1730 = cbLight._m0[_1574].y + _421;
    float _1731 = cbLight._m0[_1574].z + _422;
    float _1735 = inversesqrt(dot(vec3(_1729, _1730, _1731), vec3(_1729, _1730, _1731)));
    float _1736 = _1735 * _1729;
    float _1737 = _1735 * _1730;
    float _1738 = _1735 * _1731;
    float _1739 = dot(vec3(_339, _340, _341), vec3(cbLight._m0[_1574].xyz));
    float _3813 = isnan(0.0) ? _1739 : (isnan(_1739) ? 0.0 : max(_1739, 0.0));
    float _1742 = isnan(1.0) ? _3813 : (isnan(_3813) ? 1.0 : min(_3813, 1.0));
    float _3824 = isnan(0.0) ? _510 : (isnan(_510) ? 0.0 : max(_510, 0.0));
    float _1743 = isnan(1.0) ? _3824 : (isnan(_3824) ? 1.0 : min(_3824, 1.0));
    float _1744 = dot(vec3(_339, _340, _341), vec3(_1736, _1737, _1738));
    float _3835 = isnan(0.0) ? _1744 : (isnan(_1744) ? 0.0 : max(_1744, 0.0));
    float _1747 = isnan(1.0) ? _3835 : (isnan(_3835) ? 1.0 : min(_3835, 1.0));
    float _1748 = dot(vec3(cbLight._m0[_1574].xyz), vec3(_1736, _1737, _1738));
    float _3846 = isnan(0.0) ? _1748 : (isnan(_1748) ? 0.0 : max(_1748, 0.0));
    float _1752 = _1728 * _1728;
    float _1756 = ((_1747 * _1747) * (_1752 + (-1.0))) + 1.0;
    float _1764 = exp2(log2(1.0 - (isnan(1.0) ? _3846 : (isnan(_3846) ? 1.0 : min(_3846, 1.0)))) * 5.0);
    float _1765 = 0.959999978542327880859375 - _491;
    float _1767 = 0.959999978542327880859375 - _492;
    float _1768 = 0.959999978542327880859375 - _493;
    float _1775 = 1.0 - _1728;
    float _1786 = (0.5 / (((_1743 * ((_1742 * _1775) + _1728)) + 9.9999999392252902907785028219223e-09) + (((_1743 * _1775) + _1728) * _1742))) * _1742;
    float _3857 = isnan(0.0) ? _1786 : (isnan(_1786) ? 0.0 : max(_1786, 0.0));
    float _1788 = (isnan(1.0) ? _3857 : (isnan(_3857) ? 1.0 : min(_3857, 1.0))) * (_1752 / ((_1756 * _1756) * 3.141590118408203125));
    uint _1802 = _1574 + 9u;
    float _1813 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1615].w)) * _342) * 0.949999988079071044921875);
    float _1814 = _1813 * _1813;
    float _1815 = cbLight._m0[_1615].x + _420;
    float _1816 = cbLight._m0[_1615].y + _421;
    float _1817 = cbLight._m0[_1615].z + _422;
    float _1821 = inversesqrt(dot(vec3(_1815, _1816, _1817), vec3(_1815, _1816, _1817)));
    float _1822 = _1821 * _1815;
    float _1823 = _1821 * _1816;
    float _1824 = _1821 * _1817;
    float _1825 = dot(vec3(_339, _340, _341), vec3(cbLight._m0[_1615].xyz));
    float _3868 = isnan(0.0) ? _1825 : (isnan(_1825) ? 0.0 : max(_1825, 0.0));
    float _1828 = isnan(1.0) ? _3868 : (isnan(_3868) ? 1.0 : min(_3868, 1.0));
    float _1829 = dot(vec3(_339, _340, _341), vec3(_1822, _1823, _1824));
    float _3879 = isnan(0.0) ? _1829 : (isnan(_1829) ? 0.0 : max(_1829, 0.0));
    float _1832 = isnan(1.0) ? _3879 : (isnan(_3879) ? 1.0 : min(_3879, 1.0));
    float _1833 = dot(vec3(cbLight._m0[_1615].xyz), vec3(_1822, _1823, _1824));
    float _3890 = isnan(0.0) ? _1833 : (isnan(_1833) ? 0.0 : max(_1833, 0.0));
    float _1837 = _1814 * _1814;
    float _1841 = ((_1832 * _1832) * (_1837 + (-1.0))) + 1.0;
    float _1848 = exp2(log2(1.0 - (isnan(1.0) ? _3890 : (isnan(_3890) ? 1.0 : min(_3890, 1.0)))) * 5.0);
    float _1855 = 1.0 - _1814;
    float _1865 = (0.5 / (((_1743 * ((_1828 * _1855) + _1814)) + 9.9999999392252902907785028219223e-09) + (((_1743 * _1855) + _1814) * _1828))) * _1828;
    float _3901 = isnan(0.0) ? _1865 : (isnan(_1865) ? 0.0 : max(_1865, 0.0));
    float _1867 = (isnan(1.0) ? _3901 : (isnan(_3901) ? 1.0 : min(_3901, 1.0))) * (_1837 / ((_1841 * _1841) * 3.141590118408203125));
    float _1877 = (((((_1848 * _1765) + _494) * cbLight._m0[_1802].x) * _1867) * _1597) + ((((cbLight._m0[_1714].x * _1566) * ((_1764 * _1765) + _494)) * _1788) * _1611);
    float _1878 = (((((_1848 * _1767) + _496) * cbLight._m0[_1802].y) * _1867) * _1597) + ((((cbLight._m0[_1714].y * _1567) * ((_1764 * _1767) + _496)) * _1788) * _1611);
    float _1879 = (((((_1848 * _1768) + _497) * cbLight._m0[_1802].z) * _1867) * _1597) + ((((cbLight._m0[_1714].z * _1568) * ((_1764 * _1768) + _497)) * _1788) * _1611);
    float _1941;
    float _1943;
    float _1945;
    if (_1651)
    {
        _1941 = _1877;
        _1943 = _1878;
        _1945 = _1879;
    }
    else
    {
        uint _1947 = _1574 + 2u;
        uint _1951 = _1574 + 10u;
        float _1965 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1947].w)) * _342) * 0.949999988079071044921875);
        float _1966 = _1965 * _1965;
        float _1967 = cbLight._m0[_1947].x + _420;
        float _1968 = cbLight._m0[_1947].y + _421;
        float _1969 = cbLight._m0[_1947].z + _422;
        float _1973 = inversesqrt(dot(vec3(_1967, _1968, _1969), vec3(_1967, _1968, _1969)));
        float _1974 = _1973 * _1967;
        float _1975 = _1973 * _1968;
        float _1976 = _1973 * _1969;
        float _1977 = dot(vec3(_339, _340, _341), vec3(cbLight._m0[_1947].xyz));
        float _3912 = isnan(0.0) ? _1977 : (isnan(_1977) ? 0.0 : max(_1977, 0.0));
        float _1980 = isnan(1.0) ? _3912 : (isnan(_3912) ? 1.0 : min(_3912, 1.0));
        float _1981 = dot(vec3(_339, _340, _341), vec3(_1974, _1975, _1976));
        float _3923 = isnan(0.0) ? _1981 : (isnan(_1981) ? 0.0 : max(_1981, 0.0));
        float _1984 = isnan(1.0) ? _3923 : (isnan(_3923) ? 1.0 : min(_3923, 1.0));
        float _1985 = dot(vec3(cbLight._m0[_1947].xyz), vec3(_1974, _1975, _1976));
        float _3934 = isnan(0.0) ? _1985 : (isnan(_1985) ? 0.0 : max(_1985, 0.0));
        float _1989 = _1966 * _1966;
        float _1993 = ((_1984 * _1984) * (_1989 + (-1.0))) + 1.0;
        float _2000 = exp2(log2(1.0 - (isnan(1.0) ? _3934 : (isnan(_3934) ? 1.0 : min(_3934, 1.0)))) * 5.0);
        float _2007 = 1.0 - _1966;
        float _2017 = (0.5 / (((_1743 * ((_1980 * _2007) + _1966)) + 9.9999999392252902907785028219223e-09) + (((_1743 * _2007) + _1966) * _1980))) * _1980;
        float _3945 = isnan(0.0) ? _2017 : (isnan(_2017) ? 0.0 : max(_2017, 0.0));
        float _2019 = (isnan(1.0) ? _3945 : (isnan(_3945) ? 1.0 : min(_3945, 1.0))) * (_1989 / ((_1993 * _1993) * 3.141590118408203125));
        float _2020 = isnan(1.0) ? _1589 : (isnan(_1589) ? 1.0 : min(_1589, 1.0));
        _1941 = (((((_2000 * _1765) + _494) * cbLight._m0[_1951].x) * _2019) * _2020) + _1877;
        _1943 = (((((_2000 * _1767) + _496) * cbLight._m0[_1951].y) * _2019) * _2020) + _1878;
        _1945 = (((((_2000 * _1768) + _497) * cbLight._m0[_1951].z) * _2019) * _2020) + _1879;
    }
    float _2055;
    float _2057;
    float _2059;
    if (_1669)
    {
        _2055 = _1941;
        _2057 = _1943;
        _2059 = _1945;
    }
    else
    {
        uint _2066 = _1574 + 3u;
        uint _2070 = _1574 + 11u;
        float _2084 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2066].w)) * _342) * 0.949999988079071044921875);
        float _2085 = _2084 * _2084;
        float _2086 = cbLight._m0[_2066].x + _420;
        float _2087 = cbLight._m0[_2066].y + _421;
        float _2088 = cbLight._m0[_2066].z + _422;
        float _2092 = inversesqrt(dot(vec3(_2086, _2087, _2088), vec3(_2086, _2087, _2088)));
        float _2093 = _2092 * _2086;
        float _2094 = _2092 * _2087;
        float _2095 = _2092 * _2088;
        float _2096 = dot(vec3(_339, _340, _341), vec3(cbLight._m0[_2066].xyz));
        float _3961 = isnan(0.0) ? _2096 : (isnan(_2096) ? 0.0 : max(_2096, 0.0));
        float _2099 = isnan(1.0) ? _3961 : (isnan(_3961) ? 1.0 : min(_3961, 1.0));
        float _2100 = dot(vec3(_339, _340, _341), vec3(_2093, _2094, _2095));
        float _3972 = isnan(0.0) ? _2100 : (isnan(_2100) ? 0.0 : max(_2100, 0.0));
        float _2103 = isnan(1.0) ? _3972 : (isnan(_3972) ? 1.0 : min(_3972, 1.0));
        float _2104 = dot(vec3(cbLight._m0[_2066].xyz), vec3(_2093, _2094, _2095));
        float _3983 = isnan(0.0) ? _2104 : (isnan(_2104) ? 0.0 : max(_2104, 0.0));
        float _2108 = _2085 * _2085;
        float _2112 = ((_2103 * _2103) * (_2108 + (-1.0))) + 1.0;
        float _2119 = exp2(log2(1.0 - (isnan(1.0) ? _3983 : (isnan(_3983) ? 1.0 : min(_3983, 1.0)))) * 5.0);
        float _2126 = 1.0 - _2085;
        float _2136 = (0.5 / (((_1743 * ((_2099 * _2126) + _2085)) + 9.9999999392252902907785028219223e-09) + (((_1743 * _2126) + _2085) * _2099))) * _2099;
        float _3994 = isnan(0.0) ? _2136 : (isnan(_2136) ? 0.0 : max(_2136, 0.0));
        float _2138 = (isnan(1.0) ? _3994 : (isnan(_3994) ? 1.0 : min(_3994, 1.0))) * (_2108 / ((_2112 * _2112) * 3.141590118408203125));
        float _2139 = isnan(1.0) ? _1590 : (isnan(_1590) ? 1.0 : min(_1590, 1.0));
        _2055 = (((((_2119 * _1765) + _494) * cbLight._m0[_2070].x) * _2138) * _2139) + _1941;
        _2057 = (((((_2119 * _1767) + _496) * cbLight._m0[_2070].y) * _2138) * _2139) + _1943;
        _2059 = (((((_2119 * _1768) + _497) * cbLight._m0[_2070].z) * _2138) * _2139) + _1945;
    }
    float _2274;
    float _2276;
    float _2278;
    float _2280;
    float _2282;
    float _2284;
    if (_1572.y == 0u)
    {
        float _2214 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2215 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2214;
        float _2216 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2214;
        float _2217 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2214;
        uvec4 _2229 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2230 = _2229.x;
        uint _2241 = uint((float(_2229.y) * floor(float(uint(cbSceneParam._m0[85u].y * _429) / _2230))) + floor(float(uint(cbSceneParam._m0[85u].x * _428) / _2230)));
        float _2251 = (log2(_2217 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2252 = isnan(0.0) ? _2251 : (isnan(_2251) ? 0.0 : max(_2251, 0.0));
        uint _2255 = uint(isnan(14.0) ? _2252 : (isnan(_2252) ? 14.0 : min(_2252, 14.0)));
        uvec4 _2260 = texelFetch(g_lightClusterGridBuffer, int(((_2255 << 2u) + (_2241 << 6u)) >> 2u));
        uint _2261 = _2260.x;
        uint _2262 = _2229.z;
        float _2391;
        float _2393;
        float _2395;
        float _2397;
        float _2399;
        float _2401;
        if (((((1u << ((_2262 >> 4u) & 15u)) + 4294967295u) & _2261) == 0u) || ((_2262 & 240u) == 0u))
        {
            _2391 = 0.0;
            _2393 = 0.0;
            _2395 = 0.0;
            _2397 = 0.0;
            _2399 = 0.0;
            _2401 = 0.0;
        }
        else
        {
            float _2392;
            float _2394;
            float _2396;
            float _2398;
            float _2400;
            float _2402;
            float _2544 = 0.0;
            float _2545 = 0.0;
            float _2546 = 0.0;
            float _2547 = 0.0;
            float _2548 = 0.0;
            float _2549 = 0.0;
            uint _2550 = 0u;
            uint _2559;
            bool _2560;
            for (;;)
            {
                _2559 = texelFetch(g_lightClassification, int((((_2255 << 5u) + (_2241 << 9u)) + (_2550 << 2u)) >> 2u)).x;
                _2560 = _2559 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2560)
                {
                    frontier_phi_61_pred = _2544;
                    frontier_phi_61_pred_1 = _2549;
                    frontier_phi_61_pred_2 = _2548;
                    frontier_phi_61_pred_3 = _2547;
                    frontier_phi_61_pred_4 = _2546;
                    frontier_phi_61_pred_5 = _2545;
                }
                else
                {
                    float _2668;
                    float _2669;
                    float _2670;
                    float _2671;
                    float _2672;
                    float _2673;
                    uint _2674;
                    _2668 = _2544;
                    _2669 = _2545;
                    _2670 = _2546;
                    _2671 = _2547;
                    _2672 = _2548;
                    _2673 = _2549;
                    _2674 = _2559;
                    float _2600;
                    float _2601;
                    float _2602;
                    float _2603;
                    float _2604;
                    float _2605;
                    for (;;)
                    {
                        uint _2678 = uint(findLSB(_2674)) + (_2550 << 5u);
                        uint _2675 = (_2674 + 4294967295u) & _2674;
                        uint _2680 = _2678 * 48u;
                        vec4 _2694 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2680)).x, texelFetch(g_PointLightRenderingBuffer, int(_2680 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2680 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2680 + 3u)).x));
                        uint _2700 = (_2678 * 48u) + 4u;
                        vec4 _2713 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2700)).x, texelFetch(g_PointLightRenderingBuffer, int(_2700 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2700 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2700 + 3u)).x));
                        uint _2719 = (_2678 * 48u) + 8u;
                        vec3 _2730 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2719)).x, texelFetch(g_PointLightRenderingBuffer, int(_2719 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2719 + 2u)).x));
                        float _2734 = _2694.x - _2215;
                        float _2735 = _2694.y - _2216;
                        float _2736 = _2694.z - _2217;
                        float _2737 = dot(vec3(_2734, _2735, _2736), vec3(_2734, _2735, _2736));
                        float _2740 = inversesqrt(_2737);
                        float _2741 = _2740 * _2734;
                        float _2742 = _2740 * _2735;
                        float _2743 = _2740 * _2736;
                        float _2744 = dot(vec3(_450, _453, _456), vec3(_2741, _2742, _2743));
                        float _2749 = 1.0 - (_2737 * _2694.w);
                        float _4020 = isnan(0.0) ? _2749 : (isnan(_2749) ? 0.0 : max(_2749, 0.0));
                        float _2750 = isnan(1.0) ? _4020 : (isnan(_4020) ? 1.0 : min(_4020, 1.0));
                        float _2751 = sqrt(_2737) * _2713.w;
                        float _2754 = 1.39999997615814208984375 / (_2751 + 1.39999997615814208984375);
                        float _2755 = _2754 * _2754;
                        float _2758 = ((1.0 - _2755) * _2744) + _2755;
                        float _2761 = _2751 * _2751;
                        float _2765 = ((isnan(0.0) ? _2758 : (isnan(_2758) ? 0.0 : max(_2758, 0.0))) * _2750) / ((_2761 * 0.699999988079071044921875) + 1.0);
                        float _2769 = (-0.0) - _2215;
                        float _2770 = (-0.0) - _2216;
                        float _2771 = (-0.0) - _2217;
                        float _2775 = inversesqrt(dot(vec3(_2769, _2770, _2771), vec3(_2769, _2770, _2771)));
                        float _2776 = _2775 * _2769;
                        float _2777 = _2775 * _2770;
                        float _2778 = _2775 * _2771;
                        float _2786 = exp2(log2(1.0 / ((_2761 * 3.5) + 5.0)) * 0.25);
                        float _2787 = 1.0 - _525;
                        float _2794 = sqrt(1.0 - ((1.0 - (_2787 * _2787)) * (1.0 - (_2786 * _2786))));
                        float _2795 = _2794 * _2794;
                        float _2796 = _2795 * _2795;
                        float _2797 = _2776 + _2741;
                        float _2798 = _2777 + _2742;
                        float _2799 = _2778 + _2743;
                        float _2803 = inversesqrt(dot(vec3(_2797, _2798, _2799), vec3(_2797, _2798, _2799)));
                        float _2807 = dot(vec3(_450, _453, _456), vec3(_2776, _2777, _2778));
                        float _4036 = isnan(0.0) ? _2807 : (isnan(_2807) ? 0.0 : max(_2807, 0.0));
                        float _2810 = isnan(1.0) ? _4036 : (isnan(_4036) ? 1.0 : min(_4036, 1.0));
                        float _2811 = dot(vec3(_450, _453, _456), vec3(_2803 * _2797, _2803 * _2798, _2803 * _2799));
                        float _4047 = isnan(0.0) ? _2811 : (isnan(_2811) ? 0.0 : max(_2811, 0.0));
                        float _2814 = isnan(1.0) ? _4047 : (isnan(_4047) ? 1.0 : min(_4047, 1.0));
                        float _2818 = ((_2814 * _2814) * (_2796 + (-1.0))) + 1.0;
                        float _2819 = _2754 * _2795;
                        float _2820 = _2819 * _2819;
                        float _2823 = ((1.0 - _2820) * _2744) + _2820;
                        float _4058 = isnan(0.0) ? _2823 : (isnan(_2823) ? 0.0 : max(_2823, 0.0));
                        float _2824 = isnan(1.0) ? _4058 : (isnan(_4058) ? 1.0 : min(_4058, 1.0));
                        float _2825 = 1.0 - _2795;
                        float _2835 = (0.5 / (((_2824 * ((_2810 * _2825) + _2795)) + 9.9999999392252902907785028219223e-09) + (((_2824 * _2825) + _2795) * _2810))) * _2824;
                        float _4069 = isnan(0.0) ? _2835 : (isnan(_2835) ? 0.0 : max(_2835, 0.0));
                        float _2846 = (((_2796 * 3.1415927410125732421875) * (isnan(1.0) ? _4069 : (isnan(_4069) ? 1.0 : min(_4069, 1.0)))) / ((_2818 * _2818) * ((_2761 * 2.1991131305694580078125) + 3.141590118408203125))) * _2750;
                        _2603 = (_2765 * _2713.x) + _2671;
                        _2604 = (_2765 * _2713.y) + _2672;
                        _2605 = (_2765 * _2713.z) + _2673;
                        _2600 = (_2846 * _2730.x) + _2668;
                        _2601 = (_2846 * _2730.y) + _2669;
                        _2602 = (_2846 * _2730.z) + _2670;
                        if (_2675 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2668 = _2600;
                            _2669 = _2601;
                            _2670 = _2602;
                            _2671 = _2603;
                            _2672 = _2604;
                            _2673 = _2605;
                            _2674 = _2675;
                        }
                    }
                    frontier_phi_61_pred = _2600;
                    frontier_phi_61_pred_1 = _2605;
                    frontier_phi_61_pred_2 = _2604;
                    frontier_phi_61_pred_3 = _2603;
                    frontier_phi_61_pred_4 = _2602;
                    frontier_phi_61_pred_5 = _2601;
                }
                _2392 = frontier_phi_61_pred;
                _2402 = frontier_phi_61_pred_1;
                _2400 = frontier_phi_61_pred_2;
                _2398 = frontier_phi_61_pred_3;
                _2396 = frontier_phi_61_pred_4;
                _2394 = frontier_phi_61_pred_5;
                uint _2551 = _2550 + 1u;
                if (_2551 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2544 = _2392;
                    _2545 = _2394;
                    _2546 = _2396;
                    _2547 = _2398;
                    _2548 = _2400;
                    _2549 = _2402;
                    _2550 = _2551;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2391 = _2392;
            _2393 = _2394;
            _2395 = _2396;
            _2397 = _2398;
            _2399 = _2400;
            _2401 = _2402;
        }
        uvec4 _2405 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2406 = _2405.z;
        uint _2408 = (_2406 >> 8u) & 15u;
        float _2512;
        float _2514;
        float _2516;
        float _2518;
        float _2520;
        float _2522;
        if (((4294967295u << _2408) & _2261) == 0u)
        {
            _2512 = _2391;
            _2514 = _2393;
            _2516 = _2395;
            _2518 = _2397;
            _2520 = _2399;
            _2522 = _2401;
        }
        else
        {
            float _2537 = inversesqrt(dot(vec3(_2215, _2216, _2217), vec3(_2215, _2216, _2217)));
            float _2538 = _2537 * _2215;
            float _2539 = _2537 * _2216;
            float _2540 = _2537 * _2217;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2408 < ((_2406 >> 12u) & 15u))
            {
                float _2513;
                float _2515;
                float _2517;
                float _2519;
                float _2521;
                float _2523;
                float _2651 = _2391;
                float _2652 = _2393;
                float _2653 = _2395;
                float _2654 = _2397;
                float _2655 = _2399;
                float _2656 = _2401;
                uint _2657 = _2408;
                uint _2666;
                bool _2667;
                for (;;)
                {
                    _2666 = texelFetch(g_lightClassification, int((((_2255 << 5u) + (_2241 << 9u)) + (_2657 << 2u)) >> 2u)).x;
                    _2667 = _2666 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2667)
                    {
                        frontier_phi_67_pred = _2654;
                        frontier_phi_67_pred_1 = _2655;
                        frontier_phi_67_pred_2 = _2656;
                        frontier_phi_67_pred_3 = _2653;
                        frontier_phi_67_pred_4 = _2652;
                        frontier_phi_67_pred_5 = _2651;
                    }
                    else
                    {
                        float _2851;
                        float _2852;
                        float _2853;
                        float _2854;
                        float _2855;
                        float _2856;
                        float _3147;
                        float _3148;
                        float _3149;
                        float _3150;
                        float _3151;
                        float _3152;
                        float _2864 = _2651;
                        float _2865 = _2652;
                        float _2866 = _2653;
                        float _2867 = _2654;
                        float _2868 = _2655;
                        float _2869 = _2656;
                        uint _2870 = _2666;
                        uint _2871;
                        vec4 _2896;
                        float _2897;
                        vec4 _2912;
                        vec3 _2924;
                        vec4 _2940;
                        vec4 _2956;
                        float _3003;
                        bool _3004;
                        for (;;)
                        {
                            uint _2881 = ((_2657 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2870));
                            _2871 = (_2870 + 4294967295u) & _2870;
                            uint _2883 = _2881 * 40u;
                            _2896 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2883)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2883 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2883 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2883 + 3u)).x));
                            _2897 = _2896.w;
                            uint _2899 = (_2881 * 40u) + 4u;
                            _2912 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2899)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2899 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2899 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2899 + 3u)).x));
                            uint _2914 = (_2881 * 40u) + 8u;
                            _2924 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2914)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2914 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2914 + 2u)).x));
                            uint _2927 = (_2881 * 40u) + 16u;
                            _2940 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2927)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2927 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2927 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2927 + 3u)).x));
                            uint _2943 = (_2881 * 40u) + 20u;
                            _2956 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2943)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2943 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2943 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2943 + 3u)).x));
                            uint _2959 = (_2881 * 40u) + 24u;
                            vec4 _2972 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2959)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2959 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2959 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2959 + 3u)).x));
                            uint _2978 = (_2881 * 40u) + 28u;
                            vec4 _2991 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2978)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2978 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2978 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2978 + 3u)).x));
                            _3003 = fma(_2217, _2991.z, fma(_2216, _2991.y, _2991.x * _2215)) + _2991.w;
                            _3004 = !((fma(_2217, _2972.z, fma(_2216, _2972.y, _2972.x * _2215)) + _2972.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3004)
                            {
                                float _3031 = _2896.x - _2215;
                                float _3032 = _2896.y - _2216;
                                float _3033 = _2896.z - _2217;
                                float _3034 = dot(vec3(_3031, _3032, _3033), vec3(_3031, _3032, _3033));
                                float _3037 = inversesqrt(_3034);
                                float _3038 = _3037 * _3031;
                                float _3039 = _3037 * _3032;
                                float _3040 = _3037 * _3033;
                                float _3044 = 1.0 - (_3034 / (_2897 * _2897));
                                float _4080 = isnan(0.0) ? _3044 : (isnan(_3044) ? 0.0 : max(_3044, 0.0));
                                float _3045 = isnan(1.0) ? _4080 : (isnan(_4080) ? 1.0 : min(_4080, 1.0));
                                float _3049 = sqrt(_3034) * _2912.w;
                                float _3051 = 1.39999997615814208984375 / (_3049 + 1.39999997615814208984375);
                                float _3052 = _3051 * _3051;
                                float _3055 = ((1.0 - _3052) * dot(vec3(_3038, _3039, _3040), vec3(_450, _453, _456))) + _3052;
                                float _3058 = _3049 * _3049;
                                float _3062 = (fma(_2217, _2940.z, fma(_2216, _2940.y, _2940.x * _2215)) + _2940.w) / _3003;
                                float _3063 = (fma(_2217, _2956.z, fma(_2216, _2956.y, _2956.x * _2215)) + _2956.w) / _3003;
                                float _3067 = 1.0 - dot(vec2(_3062, _3063), vec2(_3062, _3063));
                                float _4096 = isnan(0.0) ? _3067 : (isnan(_3067) ? 0.0 : max(_3067, 0.0));
                                float _3068 = isnan(1.0) ? _4096 : (isnan(_4096) ? 1.0 : min(_4096, 1.0));
                                float _3069 = _3068 * (((isnan(0.0) ? _3055 : (isnan(_3055) ? 0.0 : max(_3055, 0.0))) * _3045) / ((_3058 * 0.699999988079071044921875) + 1.0));
                                float _3081 = exp2(log2(1.0 / ((_3058 * 3.5) + 5.0)) * 0.25);
                                float _3082 = 1.0 - _525;
                                float _3089 = sqrt(1.0 - ((1.0 - (_3082 * _3082)) * (1.0 - (_3081 * _3081))));
                                float _3090 = _3089 * _3089;
                                float _3091 = _3090 * _3090;
                                float _3092 = _3038 - _2538;
                                float _3093 = _3039 - _2539;
                                float _3094 = _3040 - _2540;
                                float _3098 = inversesqrt(dot(vec3(_3092, _3093, _3094), vec3(_3092, _3093, _3094)));
                                float _3102 = dot(vec3(_450, _453, _456), vec3((-0.0) - _2538, (-0.0) - _2539, (-0.0) - _2540));
                                float _4107 = isnan(0.0) ? _3102 : (isnan(_3102) ? 0.0 : max(_3102, 0.0));
                                float _3105 = isnan(1.0) ? _4107 : (isnan(_4107) ? 1.0 : min(_4107, 1.0));
                                float _3106 = dot(vec3(_450, _453, _456), vec3(_3098 * _3092, _3098 * _3093, _3098 * _3094));
                                float _4118 = isnan(0.0) ? _3106 : (isnan(_3106) ? 0.0 : max(_3106, 0.0));
                                float _3109 = isnan(1.0) ? _4118 : (isnan(_4118) ? 1.0 : min(_4118, 1.0));
                                float _3113 = ((_3109 * _3109) * (_3091 + (-1.0))) + 1.0;
                                float _3114 = _3051 * _3090;
                                float _3115 = _3114 * _3114;
                                float _3121 = ((1.0 - _3115) * dot(vec3(_450, _453, _456), vec3(_3038, _3039, _3040))) + _3115;
                                float _4129 = isnan(0.0) ? _3121 : (isnan(_3121) ? 0.0 : max(_3121, 0.0));
                                float _3122 = isnan(1.0) ? _4129 : (isnan(_4129) ? 1.0 : min(_4129, 1.0));
                                float _3123 = 1.0 - _3090;
                                float _3133 = (0.5 / (((_3122 * ((_3105 * _3123) + _3090)) + 9.9999999392252902907785028219223e-09) + (((_3122 * _3123) + _3090) * _3105))) * _3122;
                                float _4140 = isnan(0.0) ? _3133 : (isnan(_3133) ? 0.0 : max(_3133, 0.0));
                                float _3143 = (_3068 * _3045) * (((_3091 * 3.1415927410125732421875) * (isnan(1.0) ? _4140 : (isnan(_4140) ? 1.0 : min(_4140, 1.0)))) / ((_3113 * _3113) * ((_3058 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3143 * _2924.x;
                                frontier_phi_73_pred_1 = _3143 * _2924.y;
                                frontier_phi_73_pred_2 = _3069 * _2912.z;
                                frontier_phi_73_pred_3 = _3069 * _2912.y;
                                frontier_phi_73_pred_4 = _3069 * _2912.x;
                                frontier_phi_73_pred_5 = _3143 * _2924.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3147 = frontier_phi_73_pred;
                            _3148 = frontier_phi_73_pred_1;
                            _3152 = frontier_phi_73_pred_2;
                            _3151 = frontier_phi_73_pred_3;
                            _3150 = frontier_phi_73_pred_4;
                            _3149 = frontier_phi_73_pred_5;
                            _2854 = _3150 + _2867;
                            _2855 = _3151 + _2868;
                            _2856 = _3152 + _2869;
                            _2851 = _3147 + _2864;
                            _2852 = _3148 + _2865;
                            _2853 = _3149 + _2866;
                            if (_2871 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2864 = _2851;
                                _2865 = _2852;
                                _2866 = _2853;
                                _2867 = _2854;
                                _2868 = _2855;
                                _2869 = _2856;
                                _2870 = _2871;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _2854;
                        frontier_phi_67_pred_1 = _2855;
                        frontier_phi_67_pred_2 = _2856;
                        frontier_phi_67_pred_3 = _2853;
                        frontier_phi_67_pred_4 = _2852;
                        frontier_phi_67_pred_5 = _2851;
                    }
                    _2519 = frontier_phi_67_pred;
                    _2521 = frontier_phi_67_pred_1;
                    _2523 = frontier_phi_67_pred_2;
                    _2517 = frontier_phi_67_pred_3;
                    _2515 = frontier_phi_67_pred_4;
                    _2513 = frontier_phi_67_pred_5;
                    uint _2658 = _2657 + 1u;
                    if (_2658 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2651 = _2513;
                        _2652 = _2515;
                        _2653 = _2517;
                        _2654 = _2519;
                        _2655 = _2521;
                        _2656 = _2523;
                        _2657 = _2658;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2521;
                frontier_phi_55_56_ladder_1 = _2523;
                frontier_phi_55_56_ladder_2 = _2519;
                frontier_phi_55_56_ladder_3 = _2517;
                frontier_phi_55_56_ladder_4 = _2515;
                frontier_phi_55_56_ladder_5 = _2513;
            }
            else
            {
                frontier_phi_55_56_ladder = _2399;
                frontier_phi_55_56_ladder_1 = _2401;
                frontier_phi_55_56_ladder_2 = _2397;
                frontier_phi_55_56_ladder_3 = _2395;
                frontier_phi_55_56_ladder_4 = _2393;
                frontier_phi_55_56_ladder_5 = _2391;
            }
            _2512 = frontier_phi_55_56_ladder_5;
            _2514 = frontier_phi_55_56_ladder_4;
            _2516 = frontier_phi_55_56_ladder_3;
            _2518 = frontier_phi_55_56_ladder_2;
            _2520 = frontier_phi_55_56_ladder;
            _2522 = frontier_phi_55_56_ladder_1;
        }
        float _2527 = isnan(1.0) ? _509 : (isnan(_509) ? 1.0 : min(_509, 1.0));
        _2274 = (_2527 * _2518) + _1707;
        _2276 = (_2527 * _2520) + _1709;
        _2278 = (_2527 * _2522) + _1711;
        _2280 = ((_2512 * _494) * _2527) + _2055;
        _2282 = ((_2514 * _496) * _2527) + _2057;
        _2284 = ((_2516 * _497) * _2527) + _2059;
    }
    else
    {
        _2274 = _1707;
        _2276 = _1709;
        _2278 = _1711;
        _2280 = _2055;
        _2282 = _2057;
        _2284 = _2059;
    }
    uint _2290 = _470 + uint(cbMatDynParam._m0[0u].w);
    float _2296 = ((((cbMtdParam._m0[10u].x * cbMtdParam._m0[12u].y) * _303.x) + cbMtdParam._m0[11u].x) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_2290].x;
    float _2297 = ((((cbMtdParam._m0[10u].y * cbMtdParam._m0[12u].y) * _303.y) + cbMtdParam._m0[11u].y) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_2290].y;
    float _2298 = ((cbMtdParam._m0[11u].z + ((cbMtdParam._m0[10u].z * cbMtdParam._m0[12u].y) * _303.z)) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_2290].z;
    float _4156 = isnan(0.0) ? _484 : (isnan(_484) ? 0.0 : max(_484, 0.0));
    float _4167 = isnan(0.0) ? _485 : (isnan(_485) ? 0.0 : max(_485, 0.0));
    float _4178 = isnan(0.0) ? _486 : (isnan(_486) ? 0.0 : max(_486, 0.0));
    float _2315 = (((isnan(1.0) ? _4156 : (isnan(_4156) ? 1.0 : min(_4156, 1.0))) * (_2274 + ((isnan(0.0) ? _1240 : (isnan(_1240) ? 0.0 : max(_1240, 0.0))) * _509))) + ((_2280 + ((isnan(0.0) ? _1538 : (isnan(_1538) ? 0.0 : max(_1538, 0.0))) * _1319)) * cbPerFrame._m0[3u].x)) + _2296;
    float _2317 = (_2297 + ((_2282 + ((isnan(0.0) ? _1541 : (isnan(_1541) ? 0.0 : max(_1541, 0.0))) * _1319)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4167 : (isnan(_4167) ? 1.0 : min(_4167, 1.0))) * (_2276 + ((isnan(0.0) ? _1243 : (isnan(_1243) ? 0.0 : max(_1243, 0.0))) * _509)));
    float _2319 = (_2298 + ((_2284 + ((isnan(0.0) ? _1544 : (isnan(_1544) ? 0.0 : max(_1544, 0.0))) * _1319)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4178 : (isnan(_4178) ? 1.0 : min(_4178, 1.0))) * (_2278 + ((isnan(0.0) ? _1246 : (isnan(_1246) ? 0.0 : max(_1246, 0.0))) * _509)));
    float _4204 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2332 = isnan(1.0) ? _4204 : (isnan(_4204) ? 1.0 : min(_4204, 1.0));
    uint _2333 = _469 + 6u;
    float _2341 = _428 / cbSceneParam._m0[86u].x;
    float _2342 = _429 / cbSceneParam._m0[86u].y;
    vec4 _2356 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2341, _2342, (log2((isnan(cbSceneParam._m0[77u].w) ? _362 : (isnan(_362) ? cbSceneParam._m0[77u].w : min(_362, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2358 = _2356.x;
    float _2359 = _2356.y;
    float _2360 = _2356.z;
    float _2361 = _2356.w;
    float _2454;
    float _2456;
    float _2458;
    float _2460;
    if (_362 > cbSceneParam._m0[78u].w)
    {
        float _2416 = isnan(_362) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _362 : min(cbSceneParam._m0[80u].w, _362));
        float _2417 = _2416 / _362;
        float _2428 = _2417 * _413;
        float _2429 = _414 * _2417;
        float _2430 = (-0.0) - _2429;
        float _2432 = _2417 * _415;
        float _2434 = (cbSceneParam._m0[77u].w * _2430) / _2416;
        float _2435 = _2434 + cbSceneParam._m0[79u].w;
        float _2436 = cbSceneParam._m0[79u].w - _2429;
        float _2442 = sqrt(((_2428 * _2428) + (_2429 * _2429)) + (_2432 * _2432));
        float _2445 = (1.0 - (cbSceneParam._m0[77u].w / _2416)) * _2442;
        float _2450 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2452 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2613;
        if (abs((_2430 - _2434) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2613 = ((((_2435 > 0.0) ? exp2(_2450 * _2435) : (2.0 - exp2(_2452 * _2435))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2445;
        }
        else
        {
            float _2573 = 1.0 / cbSceneParam._m0[80u].x;
            float _2574 = isnan(_2436) ? _2435 : (isnan(_2435) ? _2436 : max(_2435, _2436));
            float _2575 = isnan(_2436) ? _2435 : (isnan(_2435) ? _2436 : min(_2435, _2436));
            float _2584 = isnan(0.0) ? _2574 : (isnan(_2574) ? 0.0 : min(_2574, 0.0));
            float _2585 = isnan(0.0) ? _2575 : (isnan(_2575) ? 0.0 : min(_2575, 0.0));
            _2613 = ((abs(_2442 / _2430) * cbSceneParam._m0[80u].y) * ((((_2584 - _2585) * 2.0) - ((exp2(_2450 * (isnan(0.0) ? _2574 : (isnan(_2574) ? 0.0 : max(_2574, 0.0)))) - exp2(_2450 * (isnan(0.0) ? _2575 : (isnan(_2575) ? 0.0 : max(_2575, 0.0))))) * _2573)) - ((exp2(_2452 * _2584) - exp2(_2452 * _2585)) * _2573))) + (_2445 * cbSceneParam._m0[80u].z);
        }
        vec4 _2615 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2341, _2342, 1.0), 0.0);
        float _2624 = exp2((_2613 * (-1.44269502162933349609375)) * (1.0 - _2615.w));
        float _2625 = log2(_2624);
        float _2641 = log2(_2361);
        _2454 = (exp2(_2641 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2625 * cbSceneParam._m0[78u].x)) * _2615.x) / cbSceneParam._m0[78u].x)) + _2358;
        _2456 = (exp2(_2641 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2625 * cbSceneParam._m0[78u].y)) * _2615.y) / cbSceneParam._m0[78u].y)) + _2359;
        _2458 = (exp2(_2641 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2625 * cbSceneParam._m0[78u].z)) * _2615.z) / cbSceneParam._m0[78u].z)) + _2360;
        _2460 = _2624 * _2361;
    }
    else
    {
        _2454 = _2358;
        _2456 = _2359;
        _2458 = _2360;
        _2460 = _2361;
    }
    float _2471 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2472 = _2471 == 3.0;
    float _2473 = log2(_2460);
    float _2477 = exp2(_2473 * cbSceneParam._m0[78u].x);
    float _2478 = exp2(_2473 * cbSceneParam._m0[78u].y);
    float _2479 = exp2(_2473 * cbSceneParam._m0[78u].z);
    float _2480 = _2477 * (isnan(0.0) ? _2315 : (isnan(_2315) ? 0.0 : max(_2315, 0.0)));
    float _2481 = _2478 * (isnan(0.0) ? _2317 : (isnan(_2317) ? 0.0 : max(_2317, 0.0)));
    float _2482 = _2479 * (isnan(0.0) ? _2319 : (isnan(_2319) ? 0.0 : max(_2319, 0.0)));
    float _2491 = (_2471 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2491 * (_2472 ? _2480 : (_2480 + (cbSceneParam._m0[72u].w * _2454)));
    SV_Target.y = _2491 * (_2472 ? _2481 : (_2481 + (cbSceneParam._m0[72u].w * _2456)));
    SV_Target.z = _2491 * (_2472 ? _2482 : (_2482 + (cbSceneParam._m0[72u].w * _2458)));
    SV_Target.w = cbInstanceData._m0[_2333].w;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2296) * _2332) * _2477) * _2491;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2297) * _2332) * _2478) * _2491;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2298) * _2332) * _2479) * _2491;
    SV_Target_1.w = cbInstanceData._m0[_2333].w;
}


