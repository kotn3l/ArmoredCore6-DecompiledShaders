#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[13];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D P_BS_M1_Emissive_Glow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D P_BS_M1_Emissive_Glow_snp_0_Texture2D_1;
layout(set = 0, binding = 3) uniform texture2D P_BS_M1_Emissive_Glow_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _910;
float _3337;
float _3338;
float _3339;
float _3340;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _180 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _181 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _182 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _187 = inversesqrt(dot(vec3(_180, _181, _182), vec3(_180, _181, _182)));
    float _194 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _201 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _224 = texture(sampler2D(P_BS_M1_Emissive_Glow_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _230 = _224.x * cbMtdParam._m0[9u].x;
    float _231 = _224.y * cbMtdParam._m0[9u].y;
    float _232 = _224.z * cbMtdParam._m0[9u].z;
    vec4 _248 = texture(sampler2D(P_BS_M1_Emissive_Glow_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _252 = _248.z;
    float _256 = (_248.x * 2.0) + (-1.0);
    float _258 = (_248.y * 2.0) + (-1.0);
    float _259 = dot(vec2(_256, _258), vec2(_256, _258));
    float _3349 = isnan(0.0) ? _259 : (isnan(_259) ? 0.0 : max(_259, 0.0));
    float _265 = sqrt(1.0 - (isnan(1.0) ? _3349 : (isnan(_3349) ? 1.0 : min(_3349, 1.0))));
    vec4 _288 = texture(sampler2D(P_BS_M1_Emissive_Glow_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _313 = fma(_265, _194 * NORMAL.x, fma(_258, _201 * TANGENT.x, (_187 * _180) * _256));
    float _316 = fma(_265, _194 * NORMAL.y, fma(_258, _201 * TANGENT.y, (_187 * _181) * _256));
    float _319 = fma(_265, _194 * NORMAL.z, fma(_258, _201 * TANGENT.z, (_187 * _182) * _256));
    float _323 = inversesqrt(dot(vec3(_313, _316, _319), vec3(_313, _316, _319)));
    float _324 = _323 * _313;
    float _325 = _323 * _316;
    float _326 = _323 * _319;
    float _3360 = isnan(0.0) ? _252 : (isnan(_252) ? 0.0 : max(_252, 0.0));
    float _327 = isnan(1.0) ? _3360 : (isnan(_3360) ? 1.0 : min(_3360, 1.0));
    float _3371 = isnan(0.0) ? _230 : (isnan(_230) ? 0.0 : max(_230, 0.0));
    float _3382 = isnan(0.0) ? _231 : (isnan(_231) ? 0.0 : max(_231, 0.0));
    float _3393 = isnan(0.0) ? _232 : (isnan(_232) ? 0.0 : max(_232, 0.0));
    float _3404 = isnan(0.0) ? cbMtdParam._m0[12u].x : (isnan(cbMtdParam._m0[12u].x) ? 0.0 : max(cbMtdParam._m0[12u].x, 0.0));
    float _331 = isnan(1.0) ? _3404 : (isnan(_3404) ? 1.0 : min(_3404, 1.0));
    float _347 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _388 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _398 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _388);
    float _399 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _388);
    float _400 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _388);
    float _404 = inversesqrt(dot(vec3(_398, _399, _400), vec3(_398, _399, _400)));
    float _405 = _398 * _404;
    float _406 = _399 * _404;
    float _407 = _400 * _404;
    vec4 _412 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _414 = _412.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _589 = sqrt(((_398 * _398) + (_399 * _399)) + (_400 * _400));
        float _595 = (cbMatDynParam._m0[5u].x * _589) + cbMatDynParam._m0[5u].y;
        float _3415 = isnan(0.0) ? _595 : (isnan(_595) ? 0.0 : max(_595, 0.0));
        float _596 = isnan(1.0) ? _3415 : (isnan(_3415) ? 1.0 : min(_3415, 1.0));
        float _600 = (cbMatDynParam._m0[5u].z * _589) + cbMatDynParam._m0[5u].w;
        float _3426 = isnan(0.0) ? _600 : (isnan(_600) ? 0.0 : max(_600, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3426 : (isnan(_3426) ? 1.0 : min(_3426, 1.0))) - _596)) + _596) < ((_414 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _426 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _427 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _447 = fma(_326, cbSceneParam._m0[5u].z, fma(_325, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _324));
    float _450 = fma(_326, cbSceneParam._m0[6u].z, fma(_325, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _324));
    float _453 = fma(_326, cbSceneParam._m0[7u].z, fma(_325, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _324));
    uint _466 = uint(roundEven(NORMAL.w)) * 13u;
    uint _467 = _466 + 9u;
    uint _468 = _467 + uint(cbMatDynParam._m0[0u].w);
    float _474 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3371 : (isnan(_3371) ? 1.0 : min(_3371, 1.0)))) * cbInstanceData._m0[_468].x;
    float _475 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3382 : (isnan(_3382) ? 1.0 : min(_3382, 1.0)))) * cbInstanceData._m0[_468].y;
    float _476 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3393 : (isnan(_3393) ? 1.0 : min(_3393, 1.0)))) * cbInstanceData._m0[_468].z;
    float _3437 = isnan(0.0) ? _474 : (isnan(_474) ? 0.0 : max(_474, 0.0));
    float _477 = isnan(1.0) ? _3437 : (isnan(_3437) ? 1.0 : min(_3437, 1.0));
    float _3448 = isnan(0.0) ? _475 : (isnan(_475) ? 0.0 : max(_475, 0.0));
    float _478 = isnan(1.0) ? _3448 : (isnan(_3448) ? 1.0 : min(_3448, 1.0));
    float _3459 = isnan(0.0) ? _476 : (isnan(_476) ? 0.0 : max(_476, 0.0));
    float _479 = isnan(1.0) ? _3459 : (isnan(_3459) ? 1.0 : min(_3459, 1.0));
    float _480 = 1.0 - _331;
    float _481 = _477 * _480;
    float _482 = _478 * _480;
    float _483 = _479 * _480;
    float _488 = (_477 + (-0.039999999105930328369140625)) * _331;
    float _489 = (_478 + (-0.039999999105930328369140625)) * _331;
    float _490 = (_479 + (-0.039999999105930328369140625)) * _331;
    float _491 = _488 + 0.039999999105930328369140625;
    float _493 = _489 + 0.039999999105930328369140625;
    float _494 = _490 + 0.039999999105930328369140625;
    vec4 _503 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _426, cbSceneParam._m0[86u].y * _427));
    float _506 = _503.x * TEXCOORD.z;
    float _507 = dot(vec3(_324, _325, _326), vec3(_405, _406, _407));
    float _510 = _507 * 2.0;
    float _514 = (_510 * _324) - _405;
    float _515 = (_510 * _325) - _406;
    float _516 = (_510 * _326) - _407;
    float _520 = abs(dot(vec3(_405, _406, _407), vec3(_324, _325, _326)));
    float _3470 = isnan(0.0) ? _520 : (isnan(_520) ? 0.0 : max(_520, 0.0));
    float _522 = sqrt(_327);
    float _535 = exp2((_522 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3470 : (isnan(_3470) ? 1.0 : min(_3470, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_522 * 3.0));
    float _541 = (1.0 - _535) * ((_522 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _542 = _535 * _522;
    float _570 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _574 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _578 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _909;
    float _911;
    float _912;
    float _913;
    float _914;
    float _915;
    float _916;
    float _917;
    float _918;
    float _919;
    float _920;
    float _921;
    float _922;
    float _923;
    float _924;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _634 = fma(_578, cbModelParam._m0[26u].z, fma(_574, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _570));
        float _638 = fma(_578, cbModelParam._m0[27u].z, fma(_574, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _570));
        float _642 = fma(_578, cbModelParam._m0[28u].z, fma(_574, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _570));
        float _667 = _570 + _324;
        float _668 = _574 + _325;
        float _669 = _578 + _326;
        float _679 = fma(_669, cbModelParam._m0[26u].z, fma(_668, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _667)) - _634;
        float _680 = fma(_669, cbModelParam._m0[27u].z, fma(_668, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _667)) - _638;
        float _681 = fma(_669, cbModelParam._m0[28u].z, fma(_668, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _667)) - _642;
        float _685 = inversesqrt(dot(vec3(_679, _680, _681), vec3(_679, _680, _681)));
        float _698 = ((_685 * _679) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_634 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _699 = ((_685 * _680) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_638 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _700 = ((_685 * _681) / cbModelParam._m0[34u].z) + ((((((_642 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _703 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_698, _699, _700), 0.0);
        vec4 _710 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_698, _699, _700), 0.0);
        vec4 _717 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_698, _699, _700), 0.0);
        vec4 _724 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_698, _699, _700), 0.0);
        float _737 = exp2((_703.w + (-0.5)) * 20.0) * 2.0;
        float _738 = _737 * (_703.x + (-0.5));
        float _739 = _737 * (_703.y + (-0.5));
        float _740 = _737 * (_703.z + (-0.5));
        float _747 = exp2((_710.w + (-0.5)) * 20.0) * 2.0;
        float _748 = _747 * (_710.x + (-0.5));
        float _749 = _747 * (_710.y + (-0.5));
        float _750 = _747 * (_710.z + (-0.5));
        float _757 = exp2((_717.w + (-0.5)) * 20.0) * 2.0;
        float _758 = _757 * (_717.x + (-0.5));
        float _759 = _757 * (_717.y + (-0.5));
        float _760 = _757 * (_717.z + (-0.5));
        float _767 = exp2((_724.w + (-0.5)) * 20.0) * 2.0;
        float _768 = _767 * (_724.x + (-0.5));
        float _769 = _767 * (_724.y + (-0.5));
        float _770 = _767 * (_724.z + (-0.5));
        float _771 = isnan(0.0) ? _768 : (isnan(_768) ? 0.0 : max(_768, 0.0));
        float _772 = isnan(0.0) ? _769 : (isnan(_769) ? 0.0 : max(_769, 0.0));
        float _773 = isnan(0.0) ? _770 : (isnan(_770) ? 0.0 : max(_770, 0.0));
        float _774 = _738 * 0.5;
        float _775 = _748 * 0.5;
        float _776 = _758 * 0.5;
        float _777 = dot(vec3(_774, _775, _776), vec3(_774, _775, _776));
        float _782 = (_777 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_777);
        float _791 = (dot(vec3(_324, _325, _326), vec3(_782 * _774, _782 * _775, _782 * _776)) + 1.0) * 0.5;
        float _3496 = isnan(0.0) ? _791 : (isnan(_791) ? 0.0 : max(_791, 0.0));
        float _801 = sqrt(((_775 * _775) + (_774 * _774)) + (_776 * _776)) / (_771 + 9.9999997473787516355514526367188e-06);
        float _3507 = isnan(0.0) ? _801 : (isnan(_801) ? 0.0 : max(_801, 0.0));
        float _802 = isnan(1.0) ? _3507 : (isnan(_3507) ? 1.0 : min(_3507, 1.0));
        float _803 = _802 * 2.0;
        float _807 = (1.0 - _802) / (_802 + 1.0);
        float _3518 = isnan(0.0) ? _807 : (isnan(_807) ? 0.0 : max(_807, 0.0));
        float _808 = isnan(1.0) ? _3518 : (isnan(_3518) ? 1.0 : min(_3518, 1.0));
        float _817 = ((((1.0 - _808) * (_803 + 2.0)) * exp2(log2(isnan(1.0) ? _3496 : (isnan(_3496) ? 1.0 : min(_3496, 1.0))) * (_803 + 1.0))) + _808) * _771;
        float _818 = _739 * 0.5;
        float _819 = _749 * 0.5;
        float _820 = _759 * 0.5;
        float _821 = dot(vec3(_818, _819, _820), vec3(_818, _819, _820));
        float _826 = (_821 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_821);
        float _834 = (dot(vec3(_324, _325, _326), vec3(_826 * _818, _826 * _819, _826 * _820)) + 1.0) * 0.5;
        float _3529 = isnan(0.0) ? _834 : (isnan(_834) ? 0.0 : max(_834, 0.0));
        float _843 = sqrt(((_819 * _819) + (_818 * _818)) + (_820 * _820)) / (_772 + 9.9999997473787516355514526367188e-06);
        float _3540 = isnan(0.0) ? _843 : (isnan(_843) ? 0.0 : max(_843, 0.0));
        float _844 = isnan(1.0) ? _3540 : (isnan(_3540) ? 1.0 : min(_3540, 1.0));
        float _845 = _844 * 2.0;
        float _849 = (1.0 - _844) / (_844 + 1.0);
        float _3551 = isnan(0.0) ? _849 : (isnan(_849) ? 0.0 : max(_849, 0.0));
        float _850 = isnan(1.0) ? _3551 : (isnan(_3551) ? 1.0 : min(_3551, 1.0));
        float _859 = ((((1.0 - _850) * (_845 + 2.0)) * exp2(log2(isnan(1.0) ? _3529 : (isnan(_3529) ? 1.0 : min(_3529, 1.0))) * (_845 + 1.0))) + _850) * _772;
        float _860 = _740 * 0.5;
        float _861 = _750 * 0.5;
        float _862 = _760 * 0.5;
        float _863 = dot(vec3(_860, _861, _862), vec3(_860, _861, _862));
        float _868 = (_863 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_863);
        float _876 = (dot(vec3(_324, _325, _326), vec3(_868 * _860, _868 * _861, _868 * _862)) + 1.0) * 0.5;
        float _3562 = isnan(0.0) ? _876 : (isnan(_876) ? 0.0 : max(_876, 0.0));
        float _885 = sqrt(((_861 * _861) + (_860 * _860)) + (_862 * _862)) / (_773 + 9.9999997473787516355514526367188e-06);
        float _3573 = isnan(0.0) ? _885 : (isnan(_885) ? 0.0 : max(_885, 0.0));
        float _886 = isnan(1.0) ? _3573 : (isnan(_3573) ? 1.0 : min(_3573, 1.0));
        float _887 = _886 * 2.0;
        float _891 = (1.0 - _886) / (_886 + 1.0);
        float _3584 = isnan(0.0) ? _891 : (isnan(_891) ? 0.0 : max(_891, 0.0));
        float _892 = isnan(1.0) ? _3584 : (isnan(_3584) ? 1.0 : min(_3584, 1.0));
        float _901 = ((((1.0 - _892) * (_887 + 2.0)) * exp2(log2(isnan(1.0) ? _3562 : (isnan(_3562) ? 1.0 : min(_3562, 1.0))) * (_887 + 1.0))) + _892) * _773;
        _909 = _740;
        _911 = _739;
        _912 = _738;
        _913 = _750;
        _914 = _749;
        _915 = _748;
        _916 = _760;
        _917 = _759;
        _918 = _758;
        _919 = _773;
        _920 = _772;
        _921 = _771;
        _922 = cbModelParam._m0[36u].z * (isnan(0.0) ? _817 : (isnan(_817) ? 0.0 : max(_817, 0.0)));
        _923 = cbModelParam._m0[36u].z * (isnan(0.0) ? _859 : (isnan(_859) ? 0.0 : max(_859, 0.0)));
        _924 = cbModelParam._m0[36u].z * (isnan(0.0) ? _901 : (isnan(_901) ? 0.0 : max(_901, 0.0)));
    }
    else
    {
        _909 = _910;
        _911 = _910;
        _912 = _910;
        _913 = _910;
        _914 = _910;
        _915 = _910;
        _916 = _910;
        _917 = _910;
        _918 = _910;
        _919 = _910;
        _920 = _910;
        _921 = _910;
        _922 = 0.0;
        _923 = 0.0;
        _924 = 0.0;
    }
    float _1222;
    float _1223;
    float _1224;
    float _1225;
    float _1226;
    float _1227;
    float _1228;
    float _1229;
    float _1230;
    float _1231;
    float _1232;
    float _1233;
    float _1234;
    float _1235;
    float _1236;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _953 = fma(_578, cbModelParam._m0[30u].z, fma(_574, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _570));
        float _957 = fma(_578, cbModelParam._m0[31u].z, fma(_574, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _570));
        float _961 = fma(_578, cbModelParam._m0[32u].z, fma(_574, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _570));
        float _984 = _570 + _324;
        float _985 = _574 + _325;
        float _986 = _578 + _326;
        float _996 = fma(_986, cbModelParam._m0[30u].z, fma(_985, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _984)) - _953;
        float _997 = fma(_986, cbModelParam._m0[31u].z, fma(_985, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _984)) - _957;
        float _998 = fma(_986, cbModelParam._m0[32u].z, fma(_985, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _984)) - _961;
        float _1002 = inversesqrt(dot(vec3(_996, _997, _998), vec3(_996, _997, _998)));
        float _1015 = ((_1002 * _996) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_953 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1016 = ((_1002 * _997) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_957 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1017 = ((_1002 * _998) / cbModelParam._m0[35u].z) + ((((((_961 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1019 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1015, _1016, _1017), 0.0);
        vec4 _1026 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1015, _1016, _1017), 0.0);
        vec4 _1033 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1015, _1016, _1017), 0.0);
        vec4 _1040 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1015, _1016, _1017), 0.0);
        float _1052 = exp2((_1019.w + (-0.5)) * 20.0) * 2.0;
        float _1053 = _1052 * (_1019.x + (-0.5));
        float _1054 = _1052 * (_1019.y + (-0.5));
        float _1055 = _1052 * (_1019.z + (-0.5));
        float _1062 = exp2((_1026.w + (-0.5)) * 20.0) * 2.0;
        float _1063 = _1062 * (_1026.x + (-0.5));
        float _1064 = _1062 * (_1026.y + (-0.5));
        float _1065 = _1062 * (_1026.z + (-0.5));
        float _1072 = exp2((_1033.w + (-0.5)) * 20.0) * 2.0;
        float _1073 = _1072 * (_1033.x + (-0.5));
        float _1074 = _1072 * (_1033.y + (-0.5));
        float _1075 = _1072 * (_1033.z + (-0.5));
        float _1082 = exp2((_1040.w + (-0.5)) * 20.0) * 2.0;
        float _1083 = _1082 * (_1040.x + (-0.5));
        float _1084 = _1082 * (_1040.y + (-0.5));
        float _1085 = _1082 * (_1040.z + (-0.5));
        float _1086 = isnan(0.0) ? _1083 : (isnan(_1083) ? 0.0 : max(_1083, 0.0));
        float _1087 = isnan(0.0) ? _1084 : (isnan(_1084) ? 0.0 : max(_1084, 0.0));
        float _1088 = isnan(0.0) ? _1085 : (isnan(_1085) ? 0.0 : max(_1085, 0.0));
        float _1089 = _1053 * 0.5;
        float _1090 = _1063 * 0.5;
        float _1091 = _1073 * 0.5;
        float _1092 = dot(vec3(_1089, _1090, _1091), vec3(_1089, _1090, _1091));
        float _1097 = (_1092 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1092);
        float _1105 = (dot(vec3(_324, _325, _326), vec3(_1097 * _1089, _1097 * _1090, _1097 * _1091)) + 1.0) * 0.5;
        float _3625 = isnan(0.0) ? _1105 : (isnan(_1105) ? 0.0 : max(_1105, 0.0));
        float _1114 = sqrt(((_1090 * _1090) + (_1089 * _1089)) + (_1091 * _1091)) / (_1086 + 9.9999997473787516355514526367188e-06);
        float _3636 = isnan(0.0) ? _1114 : (isnan(_1114) ? 0.0 : max(_1114, 0.0));
        float _1115 = isnan(1.0) ? _3636 : (isnan(_3636) ? 1.0 : min(_3636, 1.0));
        float _1116 = _1115 * 2.0;
        float _1120 = (1.0 - _1115) / (_1115 + 1.0);
        float _3647 = isnan(0.0) ? _1120 : (isnan(_1120) ? 0.0 : max(_1120, 0.0));
        float _1121 = isnan(1.0) ? _3647 : (isnan(_3647) ? 1.0 : min(_3647, 1.0));
        float _1130 = ((((1.0 - _1121) * (_1116 + 2.0)) * exp2(log2(isnan(1.0) ? _3625 : (isnan(_3625) ? 1.0 : min(_3625, 1.0))) * (_1116 + 1.0))) + _1121) * _1086;
        float _1131 = _1054 * 0.5;
        float _1132 = _1064 * 0.5;
        float _1133 = _1074 * 0.5;
        float _1134 = dot(vec3(_1131, _1132, _1133), vec3(_1131, _1132, _1133));
        float _1139 = (_1134 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1134);
        float _1147 = (dot(vec3(_324, _325, _326), vec3(_1139 * _1131, _1139 * _1132, _1139 * _1133)) + 1.0) * 0.5;
        float _3658 = isnan(0.0) ? _1147 : (isnan(_1147) ? 0.0 : max(_1147, 0.0));
        float _1156 = sqrt(((_1132 * _1132) + (_1131 * _1131)) + (_1133 * _1133)) / (_1087 + 9.9999997473787516355514526367188e-06);
        float _3669 = isnan(0.0) ? _1156 : (isnan(_1156) ? 0.0 : max(_1156, 0.0));
        float _1157 = isnan(1.0) ? _3669 : (isnan(_3669) ? 1.0 : min(_3669, 1.0));
        float _1158 = _1157 * 2.0;
        float _1162 = (1.0 - _1157) / (_1157 + 1.0);
        float _3680 = isnan(0.0) ? _1162 : (isnan(_1162) ? 0.0 : max(_1162, 0.0));
        float _1163 = isnan(1.0) ? _3680 : (isnan(_3680) ? 1.0 : min(_3680, 1.0));
        float _1172 = ((((1.0 - _1163) * (_1158 + 2.0)) * exp2(log2(isnan(1.0) ? _3658 : (isnan(_3658) ? 1.0 : min(_3658, 1.0))) * (_1158 + 1.0))) + _1163) * _1087;
        float _1173 = _1055 * 0.5;
        float _1174 = _1065 * 0.5;
        float _1175 = _1075 * 0.5;
        float _1176 = dot(vec3(_1173, _1174, _1175), vec3(_1173, _1174, _1175));
        float _1181 = (_1176 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1176);
        float _1189 = (dot(vec3(_324, _325, _326), vec3(_1181 * _1173, _1181 * _1174, _1181 * _1175)) + 1.0) * 0.5;
        float _3691 = isnan(0.0) ? _1189 : (isnan(_1189) ? 0.0 : max(_1189, 0.0));
        float _1198 = sqrt(((_1174 * _1174) + (_1173 * _1173)) + (_1175 * _1175)) / (_1088 + 9.9999997473787516355514526367188e-06);
        float _3702 = isnan(0.0) ? _1198 : (isnan(_1198) ? 0.0 : max(_1198, 0.0));
        float _1199 = isnan(1.0) ? _3702 : (isnan(_3702) ? 1.0 : min(_3702, 1.0));
        float _1200 = _1199 * 2.0;
        float _1204 = (1.0 - _1199) / (_1199 + 1.0);
        float _3713 = isnan(0.0) ? _1204 : (isnan(_1204) ? 0.0 : max(_1204, 0.0));
        float _1205 = isnan(1.0) ? _3713 : (isnan(_3713) ? 1.0 : min(_3713, 1.0));
        float _1214 = ((((1.0 - _1205) * (_1200 + 2.0)) * exp2(log2(isnan(1.0) ? _3691 : (isnan(_3691) ? 1.0 : min(_3691, 1.0))) * (_1200 + 1.0))) + _1205) * _1088;
        _1222 = _1055;
        _1223 = _1054;
        _1224 = _1053;
        _1225 = _1065;
        _1226 = _1064;
        _1227 = _1063;
        _1228 = _1075;
        _1229 = _1074;
        _1230 = _1073;
        _1231 = _1088;
        _1232 = _1087;
        _1233 = _1086;
        _1234 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1130 : (isnan(_1130) ? 0.0 : max(_1130, 0.0)));
        _1235 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1172 : (isnan(_1172) ? 0.0 : max(_1172, 0.0)));
        _1236 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1214 : (isnan(_1214) ? 0.0 : max(_1214, 0.0)));
    }
    else
    {
        _1222 = _910;
        _1223 = _910;
        _1224 = _910;
        _1225 = _910;
        _1226 = _910;
        _1227 = _910;
        _1228 = _910;
        _1229 = _910;
        _1230 = _910;
        _1231 = _910;
        _1232 = _910;
        _1233 = _910;
        _1234 = 0.0;
        _1235 = 0.0;
        _1236 = 0.0;
    }
    float _1246 = (cbModelParam._m0[1u].x * (_1234 - _922)) + _922;
    float _1247 = (cbModelParam._m0[1u].x * (_1235 - _923)) + _923;
    float _1248 = (cbModelParam._m0[1u].x * (_1236 - _924)) + _924;
    float _1269 = fma(_1248, cbSceneParam._m0[89u].z, fma(_1247, cbSceneParam._m0[89u].y, _1246 * cbSceneParam._m0[89u].x));
    float _1272 = fma(_1248, cbSceneParam._m0[90u].z, fma(_1247, cbSceneParam._m0[90u].y, _1246 * cbSceneParam._m0[90u].x));
    float _1275 = fma(_1248, cbSceneParam._m0[91u].z, fma(_1247, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1246));
    float _1290 = _514 * 0.5;
    float _1291 = _515 * 0.5;
    float _1292 = _516 * 0.5;
    float _1293 = dot(vec4(_1290, _1291, _1292, 1.0), vec4(_1224, _1227, _1230, _1233));
    float _1296 = dot(vec4(_1290, _1291, _1292, 1.0), vec4(_1223, _1226, _1229, _1232));
    float _1299 = dot(vec4(_1290, _1291, _1292, 1.0), vec4(_1222, _1225, _1228, _1231));
    float _1333;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1306 = dot(vec4(_1290, _1291, _1292, 1.0), vec4(_909, _913, _916, _919));
        float _1310 = dot(vec4(_1290, _1291, _1292, 1.0), vec4(_911, _914, _917, _920));
        float _1314 = dot(vec4(_1290, _1291, _1292, 1.0), vec4(_912, _915, _918, _921));
        float _1321 = dot(vec4(cbModelParam._m0[39u]), vec4(_1290, _1291, _1292, 1.0));
        _1333 = dot(vec3(isnan(0.0) ? _1314 : (isnan(_1314) ? 0.0 : max(_1314, 0.0)), isnan(0.0) ? _1310 : (isnan(_1310) ? 0.0 : max(_1310, 0.0)), isnan(0.0) ? _1306 : (isnan(_1306) ? 0.0 : max(_1306, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1321) ? 0.0 : (isnan(0.0) ? _1321 : max(0.0, _1321))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1333 = 1.0;
    }
    float _1344;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1335 = dot(vec4(cbModelParam._m0[40u]), vec4(_1290, _1291, _1292, 1.0));
        _1344 = dot(vec3(isnan(0.0) ? _1293 : (isnan(_1293) ? 0.0 : max(_1293, 0.0)), isnan(0.0) ? _1296 : (isnan(_1296) ? 0.0 : max(_1296, 0.0)), isnan(0.0) ? _1299 : (isnan(_1299) ? 0.0 : max(_1299, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1335) ? 0.0 : (isnan(0.0) ? _1335 : max(0.0, _1335))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1344 = 1.0;
    }
    float _1348 = (_1344 * cbModelParam._m0[1u].x) + (_1333 * (1.0 - cbModelParam._m0[1u].x));
    float _1358 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _327);
    float _1359 = isnan(_1358) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1358 : min(cbModelParam._m0[25u].z, _1358));
    float _1441;
    float _1443;
    float _1445;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1408 = fma(_578, cbModelParam._m0[13u].z, fma(_574, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _570)) + cbModelParam._m0[13u].w;
        float _1412 = fma(_578, cbModelParam._m0[14u].z, fma(_574, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _570)) + cbModelParam._m0[14u].w;
        float _1416 = fma(_578, cbModelParam._m0[15u].z, fma(_574, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _570)) + cbModelParam._m0[15u].w;
        float _1419 = fma(_516, cbModelParam._m0[13u].z, fma(_515, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _514));
        float _1422 = fma(_516, cbModelParam._m0[14u].z, fma(_515, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _514));
        float _1425 = fma(_516, cbModelParam._m0[15u].z, fma(_515, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _514));
        float _1453;
        if (_1419 > 0.0)
        {
            _1453 = abs((1.0 - _1408) / _1419);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1419 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1408 + 1.0) / _1419);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1453 = frontier_phi_17_15_ladder;
        }
        float _1660;
        if (_1422 > 0.0)
        {
            _1660 = abs((1.0 - _1412) / _1422);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1422 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1412 + 1.0) / _1422);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1660 = frontier_phi_26_22_ladder;
        }
        float _1914;
        if (_1425 > 0.0)
        {
            _1914 = abs((1.0 - _1416) / _1425);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1425 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1416 + 1.0) / _1425);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _1914 = frontier_phi_38_33_ladder;
        }
        float _1916 = isnan(_1660) ? _1453 : (isnan(_1453) ? _1660 : min(_1453, _1660));
        float _1917 = isnan(_1914) ? _1916 : (isnan(_1916) ? _1914 : min(_1916, _1914));
        float _1921 = (_1917 * _1419) + _1408;
        float _1922 = (_1917 * _1422) + _1412;
        float _1923 = (_1917 * _1425) + _1416;
        float _1924 = _1917 * 9.9999997473787516355514526367188e-05;
        float _1926 = (-1.0) - _1924;
        float _1928 = _1924 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_1923 > _1928) || ((_1923 < _1926) || ((_1922 > _1928) || ((_1922 < _1926) || ((_1921 < _1926) || (_1921 > _1928))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2051 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1923, cbModelParam._m0[9u].z, fma(_1922, cbModelParam._m0[9u].y, _1921 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1923, cbModelParam._m0[10u].z, fma(_1922, cbModelParam._m0[10u].y, _1921 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1923, cbModelParam._m0[11u].z, fma(_1922, cbModelParam._m0[11u].y, _1921 * cbModelParam._m0[11u].x))), _1359);
            frontier_phi_16_38_ladder = _2051.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2051.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2051.x * cbModelParam._m0[1u].y;
        }
        _1441 = frontier_phi_16_38_ladder_2;
        _1443 = frontier_phi_16_38_ladder_1;
        _1445 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1429 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_514, _515, _516), _1359);
        _1441 = _1429.x * cbModelParam._m0[1u].y;
        _1443 = _1429.y * cbModelParam._m0[1u].y;
        _1445 = _1429.z * cbModelParam._m0[1u].y;
    }
    float _1449 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _327);
    float _1450 = isnan(_1449) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1449 : min(cbModelParam._m0[25u].w, _1449));
    float _1543;
    float _1545;
    float _1547;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1507 = fma(_578, cbModelParam._m0[21u].z, fma(_574, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _570)) + cbModelParam._m0[21u].w;
        float _1511 = fma(_578, cbModelParam._m0[22u].z, fma(_574, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _570)) + cbModelParam._m0[22u].w;
        float _1515 = fma(_578, cbModelParam._m0[23u].z, fma(_574, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _570)) + cbModelParam._m0[23u].w;
        float _1518 = fma(_516, cbModelParam._m0[21u].z, fma(_515, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _514));
        float _1521 = fma(_516, cbModelParam._m0[22u].z, fma(_515, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _514));
        float _1524 = fma(_516, cbModelParam._m0[23u].z, fma(_515, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _514));
        float _1665;
        if (_1518 > 0.0)
        {
            _1665 = abs((1.0 - _1507) / _1518);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1518 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1507 + 1.0) / _1518);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1665 = frontier_phi_28_24_ladder;
        }
        float _1941;
        if (_1521 > 0.0)
        {
            _1941 = abs((1.0 - _1511) / _1521);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1521 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1511 + 1.0) / _1521);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1941 = frontier_phi_40_35_ladder;
        }
        float _2154;
        if (_1524 > 0.0)
        {
            _2154 = abs((1.0 - _1515) / _1524);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1524 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1515 + 1.0) / _1524);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2154 = frontier_phi_49_46_ladder;
        }
        float _2156 = isnan(_1941) ? _1665 : (isnan(_1665) ? _1941 : min(_1665, _1941));
        float _2157 = isnan(_2154) ? _2156 : (isnan(_2156) ? _2154 : min(_2156, _2154));
        float _2161 = (_2157 * _1518) + _1507;
        float _2162 = (_2157 * _1521) + _1511;
        float _2163 = (_2157 * _1524) + _1515;
        float _2164 = _2157 * 9.9999997473787516355514526367188e-05;
        float _2165 = (-1.0) - _2164;
        float _2167 = _2164 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2163 > _2167) || ((_2163 < _2165) || ((_2162 > _2167) || ((_2162 < _2165) || ((_2161 < _2165) || (_2161 > _2167))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2391 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2163, cbModelParam._m0[17u].z, fma(_2162, cbModelParam._m0[17u].y, _2161 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2163, cbModelParam._m0[18u].z, fma(_2162, cbModelParam._m0[18u].y, _2161 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2163, cbModelParam._m0[19u].z, fma(_2162, cbModelParam._m0[19u].y, _2161 * cbModelParam._m0[19u].x))), _1450);
            frontier_phi_25_49_ladder = _2391.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2391.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2391.x * cbModelParam._m0[1u].z;
        }
        _1543 = frontier_phi_25_49_ladder_2;
        _1545 = frontier_phi_25_49_ladder_1;
        _1547 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1527 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_514, _515, _516), _1450);
        _1543 = _1527.x * cbModelParam._m0[1u].z;
        _1545 = _1527.y * cbModelParam._m0[1u].z;
        _1547 = _1527.z * cbModelParam._m0[1u].z;
    }
    float _1560 = (((_541 * _491) + _542) * _506) * ((cbModelParam._m0[1u].w * (_1543 - _1441)) + _1441);
    float _1562 = (((_541 * _493) + _542) * _506) * ((cbModelParam._m0[1u].w * (_1545 - _1443)) + _1443);
    float _1564 = (((_541 * _494) + _542) * _506) * ((cbModelParam._m0[1u].w * (_1547 - _1445)) + _1445);
    float _1567 = fma(_1564, cbSceneParam._m0[89u].z, fma(_1562, cbSceneParam._m0[89u].y, _1560 * cbSceneParam._m0[89u].x));
    float _1570 = fma(_1564, cbSceneParam._m0[90u].z, fma(_1562, cbSceneParam._m0[90u].y, _1560 * cbSceneParam._m0[90u].x));
    float _1573 = fma(_1564, cbSceneParam._m0[91u].z, fma(_1562, cbSceneParam._m0[91u].y, _1560 * cbSceneParam._m0[91u].x));
    uvec4 _1583 = floatBitsToUint(cbInstanceData._m0[_466 + 5u]);
    uint _1585 = _1583.x * 14u;
    uint _1586 = _1585 + 13u;
    float _1593 = _506 + (-1.0);
    float _1598 = (cbLight._m0[_1586].x * _1593) + 1.0;
    float _1599 = (cbLight._m0[_1586].y * _1593) + 1.0;
    float _1600 = (cbLight._m0[_1586].z * _1593) + 1.0;
    float _1601 = (cbLight._m0[_1586].w * _1593) + 1.0;
    uint _1602 = _1585 + 5u;
    float _1608 = isnan(1.0) ? _1599 : (isnan(_1599) ? 1.0 : min(_1599, 1.0));
    uint _1612 = _1585 + 4u;
    float _1619 = isnan(1.0) ? _1598 : (isnan(_1598) ? 1.0 : min(_1598, 1.0));
    uint _1623 = _1585 | 1u;
    float _1634 = dot(vec3(cbLight._m0[_1585].xyz), vec3(_324, _325, _326));
    float _1637 = dot(vec3(cbLight._m0[_1623].xyz), vec3(_324, _325, _326));
    float _3849 = isnan(0.0) ? _1634 : (isnan(_1634) ? 0.0 : max(_1634, 0.0));
    float _3860 = isnan(0.0) ? _1637 : (isnan(_1637) ? 0.0 : max(_1637, 0.0));
    float _1642 = (isnan(1.0) ? _3849 : (isnan(_3849) ? 1.0 : min(_3849, 1.0))) * 0.3183098733425140380859375;
    float _1644 = (isnan(1.0) ? _3860 : (isnan(_3860) ? 1.0 : min(_3860, 1.0))) * 0.3183098733425140380859375;
    float _1651 = ((cbLight._m0[_1602].x * _1608) * _1644) + ((cbLight._m0[_1612].x * _1619) * _1642);
    float _1652 = ((_1608 * cbLight._m0[_1602].y) * _1644) + ((_1619 * cbLight._m0[_1612].y) * _1642);
    float _1653 = ((_1608 * cbLight._m0[_1602].z) * _1644) + ((_1619 * cbLight._m0[_1612].z) * _1642);
    uvec4 _1657 = floatBitsToUint(cbLight._m0[_1585 + 12u]);
    bool _1659 = _1657.x == 0u;
    float _1670;
    float _1672;
    float _1674;
    if (_1659)
    {
        _1670 = _1651;
        _1672 = _1652;
        _1674 = _1653;
    }
    else
    {
        uint _1678 = _1585 + 6u;
        float _1694 = (dot(vec3(cbLight._m0[_1585 + 2u].xyz), vec3(_324, _325, _326)) * 0.5) + 0.5;
        float _1695 = _1694 * _1694;
        float _3871 = isnan(0.0) ? _1695 : (isnan(_1695) ? 0.0 : max(_1695, 0.0));
        float _1696 = isnan(1.0) ? _3871 : (isnan(_3871) ? 1.0 : min(_3871, 1.0));
        float _1697 = isnan(1.0) ? _1600 : (isnan(_1600) ? 1.0 : min(_1600, 1.0));
        _1670 = (((cbLight._m0[_1678].x * 0.3183098733425140380859375) * _1696) * _1697) + _1651;
        _1672 = (((cbLight._m0[_1678].y * 0.3183098733425140380859375) * _1696) * _1697) + _1652;
        _1674 = (((cbLight._m0[_1678].z * 0.3183098733425140380859375) * _1696) * _1697) + _1653;
    }
    bool _1677 = _1657.y == 0u;
    float _1715;
    float _1717;
    float _1719;
    if (_1677)
    {
        _1715 = _1670;
        _1717 = _1672;
        _1719 = _1674;
    }
    else
    {
        uint _1885 = _1585 + 7u;
        float _1901 = (dot(vec3(cbLight._m0[_1585 + 3u].xyz), vec3(_324, _325, _326)) * 0.5) + 0.5;
        float _1902 = _1901 * _1901;
        float _3887 = isnan(0.0) ? _1902 : (isnan(_1902) ? 0.0 : max(_1902, 0.0));
        float _1903 = isnan(1.0) ? _3887 : (isnan(_3887) ? 1.0 : min(_3887, 1.0));
        float _1904 = isnan(1.0) ? _1601 : (isnan(_1601) ? 1.0 : min(_1601, 1.0));
        _1715 = (((cbLight._m0[_1885].x * 0.3183098733425140380859375) * _1903) * _1904) + _1670;
        _1717 = (((cbLight._m0[_1885].y * 0.3183098733425140380859375) * _1903) * _1904) + _1672;
        _1719 = (((cbLight._m0[_1885].z * 0.3183098733425140380859375) * _1903) * _1904) + _1674;
    }
    uint _1722 = _1585 + 8u;
    float _1735 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1585].w)) * _327) * 0.949999988079071044921875);
    float _1736 = _1735 * _1735;
    float _1737 = cbLight._m0[_1585].x + _405;
    float _1738 = cbLight._m0[_1585].y + _406;
    float _1739 = cbLight._m0[_1585].z + _407;
    float _1743 = inversesqrt(dot(vec3(_1737, _1738, _1739), vec3(_1737, _1738, _1739)));
    float _1744 = _1743 * _1737;
    float _1745 = _1743 * _1738;
    float _1746 = _1743 * _1739;
    float _1747 = dot(vec3(_324, _325, _326), vec3(cbLight._m0[_1585].xyz));
    float _3903 = isnan(0.0) ? _1747 : (isnan(_1747) ? 0.0 : max(_1747, 0.0));
    float _1750 = isnan(1.0) ? _3903 : (isnan(_3903) ? 1.0 : min(_3903, 1.0));
    float _3914 = isnan(0.0) ? _507 : (isnan(_507) ? 0.0 : max(_507, 0.0));
    float _1751 = isnan(1.0) ? _3914 : (isnan(_3914) ? 1.0 : min(_3914, 1.0));
    float _1752 = dot(vec3(_324, _325, _326), vec3(_1744, _1745, _1746));
    float _3925 = isnan(0.0) ? _1752 : (isnan(_1752) ? 0.0 : max(_1752, 0.0));
    float _1755 = isnan(1.0) ? _3925 : (isnan(_3925) ? 1.0 : min(_3925, 1.0));
    float _1756 = dot(vec3(cbLight._m0[_1585].xyz), vec3(_1744, _1745, _1746));
    float _3936 = isnan(0.0) ? _1756 : (isnan(_1756) ? 0.0 : max(_1756, 0.0));
    float _1760 = _1736 * _1736;
    float _1764 = ((_1755 * _1755) * (_1760 + (-1.0))) + 1.0;
    float _1772 = exp2(log2(1.0 - (isnan(1.0) ? _3936 : (isnan(_3936) ? 1.0 : min(_3936, 1.0)))) * 5.0);
    float _1773 = 0.959999978542327880859375 - _488;
    float _1775 = 0.959999978542327880859375 - _489;
    float _1776 = 0.959999978542327880859375 - _490;
    float _1783 = 1.0 - _1736;
    float _1794 = (0.5 / (((_1751 * ((_1750 * _1783) + _1736)) + 9.9999999392252902907785028219223e-09) + (((_1751 * _1783) + _1736) * _1750))) * _1750;
    float _3947 = isnan(0.0) ? _1794 : (isnan(_1794) ? 0.0 : max(_1794, 0.0));
    float _1796 = (isnan(1.0) ? _3947 : (isnan(_3947) ? 1.0 : min(_3947, 1.0))) * (_1760 / ((_1764 * _1764) * 3.141590118408203125));
    uint _1807 = _1585 + 9u;
    float _1818 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1623].w)) * _327) * 0.949999988079071044921875);
    float _1819 = _1818 * _1818;
    float _1820 = cbLight._m0[_1623].x + _405;
    float _1821 = cbLight._m0[_1623].y + _406;
    float _1822 = cbLight._m0[_1623].z + _407;
    float _1826 = inversesqrt(dot(vec3(_1820, _1821, _1822), vec3(_1820, _1821, _1822)));
    float _1827 = _1826 * _1820;
    float _1828 = _1826 * _1821;
    float _1829 = _1826 * _1822;
    float _1830 = dot(vec3(_324, _325, _326), vec3(cbLight._m0[_1623].xyz));
    float _3958 = isnan(0.0) ? _1830 : (isnan(_1830) ? 0.0 : max(_1830, 0.0));
    float _1833 = isnan(1.0) ? _3958 : (isnan(_3958) ? 1.0 : min(_3958, 1.0));
    float _1834 = dot(vec3(_324, _325, _326), vec3(_1827, _1828, _1829));
    float _3969 = isnan(0.0) ? _1834 : (isnan(_1834) ? 0.0 : max(_1834, 0.0));
    float _1837 = isnan(1.0) ? _3969 : (isnan(_3969) ? 1.0 : min(_3969, 1.0));
    float _1838 = dot(vec3(cbLight._m0[_1623].xyz), vec3(_1827, _1828, _1829));
    float _3980 = isnan(0.0) ? _1838 : (isnan(_1838) ? 0.0 : max(_1838, 0.0));
    float _1842 = _1819 * _1819;
    float _1846 = ((_1837 * _1837) * (_1842 + (-1.0))) + 1.0;
    float _1853 = exp2(log2(1.0 - (isnan(1.0) ? _3980 : (isnan(_3980) ? 1.0 : min(_3980, 1.0)))) * 5.0);
    float _1860 = 1.0 - _1819;
    float _1870 = (0.5 / (((_1751 * ((_1833 * _1860) + _1819)) + 9.9999999392252902907785028219223e-09) + (((_1751 * _1860) + _1819) * _1833))) * _1833;
    float _3991 = isnan(0.0) ? _1870 : (isnan(_1870) ? 0.0 : max(_1870, 0.0));
    float _1872 = (isnan(1.0) ? _3991 : (isnan(_3991) ? 1.0 : min(_3991, 1.0))) * (_1842 / ((_1846 * _1846) * 3.141590118408203125));
    float _1882 = (((((_1853 * _1773) + _491) * cbLight._m0[_1807].x) * _1872) * _1608) + (((((_1772 * _1773) + _491) * cbLight._m0[_1722].x) * _1796) * _1619);
    float _1883 = (((((_1853 * _1775) + _493) * cbLight._m0[_1807].y) * _1872) * _1608) + (((((_1772 * _1775) + _493) * cbLight._m0[_1722].y) * _1796) * _1619);
    float _1884 = (((((_1853 * _1776) + _494) * cbLight._m0[_1807].z) * _1872) * _1608) + (((((_1772 * _1776) + _494) * cbLight._m0[_1722].z) * _1796) * _1619);
    float _1946;
    float _1948;
    float _1950;
    if (_1659)
    {
        _1946 = _1882;
        _1948 = _1883;
        _1950 = _1884;
    }
    else
    {
        uint _1952 = _1585 + 2u;
        uint _1956 = _1585 + 10u;
        float _1970 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1952].w)) * _327) * 0.949999988079071044921875);
        float _1971 = _1970 * _1970;
        float _1972 = cbLight._m0[_1952].x + _405;
        float _1973 = cbLight._m0[_1952].y + _406;
        float _1974 = cbLight._m0[_1952].z + _407;
        float _1978 = inversesqrt(dot(vec3(_1972, _1973, _1974), vec3(_1972, _1973, _1974)));
        float _1979 = _1978 * _1972;
        float _1980 = _1978 * _1973;
        float _1981 = _1978 * _1974;
        float _1982 = dot(vec3(_324, _325, _326), vec3(cbLight._m0[_1952].xyz));
        float _4002 = isnan(0.0) ? _1982 : (isnan(_1982) ? 0.0 : max(_1982, 0.0));
        float _1985 = isnan(1.0) ? _4002 : (isnan(_4002) ? 1.0 : min(_4002, 1.0));
        float _1986 = dot(vec3(_324, _325, _326), vec3(_1979, _1980, _1981));
        float _4013 = isnan(0.0) ? _1986 : (isnan(_1986) ? 0.0 : max(_1986, 0.0));
        float _1989 = isnan(1.0) ? _4013 : (isnan(_4013) ? 1.0 : min(_4013, 1.0));
        float _1990 = dot(vec3(cbLight._m0[_1952].xyz), vec3(_1979, _1980, _1981));
        float _4024 = isnan(0.0) ? _1990 : (isnan(_1990) ? 0.0 : max(_1990, 0.0));
        float _1994 = _1971 * _1971;
        float _1998 = ((_1989 * _1989) * (_1994 + (-1.0))) + 1.0;
        float _2005 = exp2(log2(1.0 - (isnan(1.0) ? _4024 : (isnan(_4024) ? 1.0 : min(_4024, 1.0)))) * 5.0);
        float _2012 = 1.0 - _1971;
        float _2022 = (0.5 / (((_1751 * ((_1985 * _2012) + _1971)) + 9.9999999392252902907785028219223e-09) + (((_1751 * _2012) + _1971) * _1985))) * _1985;
        float _4035 = isnan(0.0) ? _2022 : (isnan(_2022) ? 0.0 : max(_2022, 0.0));
        float _2024 = (isnan(1.0) ? _4035 : (isnan(_4035) ? 1.0 : min(_4035, 1.0))) * (_1994 / ((_1998 * _1998) * 3.141590118408203125));
        float _2025 = isnan(1.0) ? _1600 : (isnan(_1600) ? 1.0 : min(_1600, 1.0));
        _1946 = (((((_2005 * _1773) + _491) * cbLight._m0[_1956].x) * _2024) * _2025) + _1882;
        _1948 = (((((_2005 * _1775) + _493) * cbLight._m0[_1956].y) * _2024) * _2025) + _1883;
        _1950 = (((((_2005 * _1776) + _494) * cbLight._m0[_1956].z) * _2024) * _2025) + _1884;
    }
    float _2060;
    float _2062;
    float _2064;
    if (_1677)
    {
        _2060 = _1946;
        _2062 = _1948;
        _2064 = _1950;
    }
    else
    {
        uint _2071 = _1585 + 3u;
        uint _2075 = _1585 + 11u;
        float _2089 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2071].w)) * _327) * 0.949999988079071044921875);
        float _2090 = _2089 * _2089;
        float _2091 = cbLight._m0[_2071].x + _405;
        float _2092 = cbLight._m0[_2071].y + _406;
        float _2093 = cbLight._m0[_2071].z + _407;
        float _2097 = inversesqrt(dot(vec3(_2091, _2092, _2093), vec3(_2091, _2092, _2093)));
        float _2098 = _2097 * _2091;
        float _2099 = _2097 * _2092;
        float _2100 = _2097 * _2093;
        float _2101 = dot(vec3(_324, _325, _326), vec3(cbLight._m0[_2071].xyz));
        float _4051 = isnan(0.0) ? _2101 : (isnan(_2101) ? 0.0 : max(_2101, 0.0));
        float _2104 = isnan(1.0) ? _4051 : (isnan(_4051) ? 1.0 : min(_4051, 1.0));
        float _2105 = dot(vec3(_324, _325, _326), vec3(_2098, _2099, _2100));
        float _4062 = isnan(0.0) ? _2105 : (isnan(_2105) ? 0.0 : max(_2105, 0.0));
        float _2108 = isnan(1.0) ? _4062 : (isnan(_4062) ? 1.0 : min(_4062, 1.0));
        float _2109 = dot(vec3(cbLight._m0[_2071].xyz), vec3(_2098, _2099, _2100));
        float _4073 = isnan(0.0) ? _2109 : (isnan(_2109) ? 0.0 : max(_2109, 0.0));
        float _2113 = _2090 * _2090;
        float _2117 = ((_2108 * _2108) * (_2113 + (-1.0))) + 1.0;
        float _2124 = exp2(log2(1.0 - (isnan(1.0) ? _4073 : (isnan(_4073) ? 1.0 : min(_4073, 1.0)))) * 5.0);
        float _2131 = 1.0 - _2090;
        float _2141 = (0.5 / (((_1751 * ((_2104 * _2131) + _2090)) + 9.9999999392252902907785028219223e-09) + (((_1751 * _2131) + _2090) * _2104))) * _2104;
        float _4084 = isnan(0.0) ? _2141 : (isnan(_2141) ? 0.0 : max(_2141, 0.0));
        float _2143 = (isnan(1.0) ? _4084 : (isnan(_4084) ? 1.0 : min(_4084, 1.0))) * (_2113 / ((_2117 * _2117) * 3.141590118408203125));
        float _2144 = isnan(1.0) ? _1601 : (isnan(_1601) ? 1.0 : min(_1601, 1.0));
        _2060 = (((((_2124 * _1773) + _491) * cbLight._m0[_2075].x) * _2143) * _2144) + _1946;
        _2062 = (((((_2124 * _1775) + _493) * cbLight._m0[_2075].y) * _2143) * _2144) + _1948;
        _2064 = (((((_2124 * _1776) + _494) * cbLight._m0[_2075].z) * _2143) * _2144) + _1950;
    }
    float _2279;
    float _2281;
    float _2283;
    float _2285;
    float _2287;
    float _2289;
    if (_1583.y == 0u)
    {
        float _2219 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2220 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2219;
        float _2221 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2219;
        float _2222 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2219;
        uvec4 _2234 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2235 = _2234.x;
        uint _2246 = uint((float(_2234.y) * floor(float(uint(cbSceneParam._m0[85u].y * _427) / _2235))) + floor(float(uint(cbSceneParam._m0[85u].x * _426) / _2235)));
        float _2256 = (log2(_2222 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2257 = isnan(0.0) ? _2256 : (isnan(_2256) ? 0.0 : max(_2256, 0.0));
        uint _2260 = uint(isnan(14.0) ? _2257 : (isnan(_2257) ? 14.0 : min(_2257, 14.0)));
        uvec4 _2265 = texelFetch(g_lightClusterGridBuffer, int(((_2260 << 2u) + (_2246 << 6u)) >> 2u));
        uint _2266 = _2265.x;
        uint _2267 = _2234.z;
        float _2396;
        float _2398;
        float _2400;
        float _2402;
        float _2404;
        float _2406;
        if (((((1u << ((_2267 >> 4u) & 15u)) + 4294967295u) & _2266) == 0u) || ((_2267 & 240u) == 0u))
        {
            _2396 = 0.0;
            _2398 = 0.0;
            _2400 = 0.0;
            _2402 = 0.0;
            _2404 = 0.0;
            _2406 = 0.0;
        }
        else
        {
            float _2397;
            float _2399;
            float _2401;
            float _2403;
            float _2405;
            float _2407;
            float _2557 = 0.0;
            float _2558 = 0.0;
            float _2559 = 0.0;
            float _2560 = 0.0;
            float _2561 = 0.0;
            float _2562 = 0.0;
            uint _2563 = 0u;
            uint _2572;
            bool _2573;
            for (;;)
            {
                _2572 = texelFetch(g_lightClassification, int((((_2260 << 5u) + (_2246 << 9u)) + (_2563 << 2u)) >> 2u)).x;
                _2573 = _2572 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2573)
                {
                    frontier_phi_66_pred = _2557;
                    frontier_phi_66_pred_1 = _2562;
                    frontier_phi_66_pred_2 = _2561;
                    frontier_phi_66_pred_3 = _2560;
                    frontier_phi_66_pred_4 = _2559;
                    frontier_phi_66_pred_5 = _2558;
                }
                else
                {
                    float _2702;
                    float _2703;
                    float _2704;
                    float _2705;
                    float _2706;
                    float _2707;
                    uint _2708;
                    _2702 = _2557;
                    _2703 = _2558;
                    _2704 = _2559;
                    _2705 = _2560;
                    _2706 = _2561;
                    _2707 = _2562;
                    _2708 = _2572;
                    float _2629;
                    float _2630;
                    float _2631;
                    float _2632;
                    float _2633;
                    float _2634;
                    for (;;)
                    {
                        uint _2712 = uint(findLSB(_2708)) + (_2563 << 5u);
                        uint _2709 = (_2708 + 4294967295u) & _2708;
                        uint _2714 = _2712 * 48u;
                        vec4 _2728 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2714)).x, texelFetch(g_PointLightRenderingBuffer, int(_2714 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2714 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2714 + 3u)).x));
                        uint _2734 = (_2712 * 48u) + 4u;
                        vec4 _2747 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2734)).x, texelFetch(g_PointLightRenderingBuffer, int(_2734 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2734 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2734 + 3u)).x));
                        uint _2753 = (_2712 * 48u) + 8u;
                        vec3 _2764 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2753)).x, texelFetch(g_PointLightRenderingBuffer, int(_2753 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2753 + 2u)).x));
                        float _2768 = _2728.x - _2220;
                        float _2769 = _2728.y - _2221;
                        float _2770 = _2728.z - _2222;
                        float _2771 = dot(vec3(_2768, _2769, _2770), vec3(_2768, _2769, _2770));
                        float _2774 = inversesqrt(_2771);
                        float _2775 = _2774 * _2768;
                        float _2776 = _2774 * _2769;
                        float _2777 = _2774 * _2770;
                        float _2778 = dot(vec3(_447, _450, _453), vec3(_2775, _2776, _2777));
                        float _2783 = 1.0 - (_2771 * _2728.w);
                        float _4110 = isnan(0.0) ? _2783 : (isnan(_2783) ? 0.0 : max(_2783, 0.0));
                        float _2784 = isnan(1.0) ? _4110 : (isnan(_4110) ? 1.0 : min(_4110, 1.0));
                        float _2785 = sqrt(_2771) * _2747.w;
                        float _2788 = 1.39999997615814208984375 / (_2785 + 1.39999997615814208984375);
                        float _2789 = _2788 * _2788;
                        float _2792 = ((1.0 - _2789) * _2778) + _2789;
                        float _2795 = _2785 * _2785;
                        float _2799 = ((isnan(0.0) ? _2792 : (isnan(_2792) ? 0.0 : max(_2792, 0.0))) * _2784) / ((_2795 * 0.699999988079071044921875) + 1.0);
                        float _2803 = (-0.0) - _2220;
                        float _2804 = (-0.0) - _2221;
                        float _2805 = (-0.0) - _2222;
                        float _2809 = inversesqrt(dot(vec3(_2803, _2804, _2805), vec3(_2803, _2804, _2805)));
                        float _2810 = _2809 * _2803;
                        float _2811 = _2809 * _2804;
                        float _2812 = _2809 * _2805;
                        float _2820 = exp2(log2(1.0 / ((_2795 * 3.5) + 5.0)) * 0.25);
                        float _2821 = 1.0 - _522;
                        float _2828 = sqrt(1.0 - ((1.0 - (_2821 * _2821)) * (1.0 - (_2820 * _2820))));
                        float _2829 = _2828 * _2828;
                        float _2830 = _2829 * _2829;
                        float _2831 = _2810 + _2775;
                        float _2832 = _2811 + _2776;
                        float _2833 = _2812 + _2777;
                        float _2837 = inversesqrt(dot(vec3(_2831, _2832, _2833), vec3(_2831, _2832, _2833)));
                        float _2841 = dot(vec3(_447, _450, _453), vec3(_2810, _2811, _2812));
                        float _4126 = isnan(0.0) ? _2841 : (isnan(_2841) ? 0.0 : max(_2841, 0.0));
                        float _2844 = isnan(1.0) ? _4126 : (isnan(_4126) ? 1.0 : min(_4126, 1.0));
                        float _2845 = dot(vec3(_447, _450, _453), vec3(_2837 * _2831, _2837 * _2832, _2837 * _2833));
                        float _4137 = isnan(0.0) ? _2845 : (isnan(_2845) ? 0.0 : max(_2845, 0.0));
                        float _2848 = isnan(1.0) ? _4137 : (isnan(_4137) ? 1.0 : min(_4137, 1.0));
                        float _2852 = ((_2848 * _2848) * (_2830 + (-1.0))) + 1.0;
                        float _2853 = _2788 * _2829;
                        float _2854 = _2853 * _2853;
                        float _2857 = ((1.0 - _2854) * _2778) + _2854;
                        float _4148 = isnan(0.0) ? _2857 : (isnan(_2857) ? 0.0 : max(_2857, 0.0));
                        float _2858 = isnan(1.0) ? _4148 : (isnan(_4148) ? 1.0 : min(_4148, 1.0));
                        float _2859 = 1.0 - _2829;
                        float _2869 = (0.5 / (((_2858 * ((_2844 * _2859) + _2829)) + 9.9999999392252902907785028219223e-09) + (((_2858 * _2859) + _2829) * _2844))) * _2858;
                        float _4159 = isnan(0.0) ? _2869 : (isnan(_2869) ? 0.0 : max(_2869, 0.0));
                        float _2880 = (((_2830 * 3.1415927410125732421875) * (isnan(1.0) ? _4159 : (isnan(_4159) ? 1.0 : min(_4159, 1.0)))) / ((_2852 * _2852) * ((_2795 * 2.1991131305694580078125) + 3.141590118408203125))) * _2784;
                        _2632 = (_2799 * _2747.x) + _2705;
                        _2633 = (_2799 * _2747.y) + _2706;
                        _2634 = (_2799 * _2747.z) + _2707;
                        _2629 = (_2880 * _2764.x) + _2702;
                        _2630 = (_2880 * _2764.y) + _2703;
                        _2631 = (_2880 * _2764.z) + _2704;
                        if (_2709 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2702 = _2629;
                            _2703 = _2630;
                            _2704 = _2631;
                            _2705 = _2632;
                            _2706 = _2633;
                            _2707 = _2634;
                            _2708 = _2709;
                        }
                    }
                    frontier_phi_66_pred = _2629;
                    frontier_phi_66_pred_1 = _2634;
                    frontier_phi_66_pred_2 = _2633;
                    frontier_phi_66_pred_3 = _2632;
                    frontier_phi_66_pred_4 = _2631;
                    frontier_phi_66_pred_5 = _2630;
                }
                _2397 = frontier_phi_66_pred;
                _2407 = frontier_phi_66_pred_1;
                _2405 = frontier_phi_66_pred_2;
                _2403 = frontier_phi_66_pred_3;
                _2401 = frontier_phi_66_pred_4;
                _2399 = frontier_phi_66_pred_5;
                uint _2564 = _2563 + 1u;
                if (_2564 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2557 = _2397;
                    _2558 = _2399;
                    _2559 = _2401;
                    _2560 = _2403;
                    _2561 = _2405;
                    _2562 = _2407;
                    _2563 = _2564;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2396 = _2397;
            _2398 = _2399;
            _2400 = _2401;
            _2402 = _2403;
            _2404 = _2405;
            _2406 = _2407;
        }
        uvec4 _2410 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2411 = _2410.z;
        uint _2413 = (_2411 >> 8u) & 15u;
        float _2525;
        float _2527;
        float _2529;
        float _2531;
        float _2533;
        float _2535;
        if (((4294967295u << _2413) & _2266) == 0u)
        {
            _2525 = _2396;
            _2527 = _2398;
            _2529 = _2400;
            _2531 = _2402;
            _2533 = _2404;
            _2535 = _2406;
        }
        else
        {
            float _2550 = inversesqrt(dot(vec3(_2220, _2221, _2222), vec3(_2220, _2221, _2222)));
            float _2551 = _2550 * _2220;
            float _2552 = _2550 * _2221;
            float _2553 = _2550 * _2222;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2413 < ((_2411 >> 12u) & 15u))
            {
                float _2526;
                float _2528;
                float _2530;
                float _2532;
                float _2534;
                float _2536;
                float _2685 = _2396;
                float _2686 = _2398;
                float _2687 = _2400;
                float _2688 = _2402;
                float _2689 = _2404;
                float _2690 = _2406;
                uint _2691 = _2413;
                uint _2700;
                bool _2701;
                for (;;)
                {
                    _2700 = texelFetch(g_lightClassification, int((((_2260 << 5u) + (_2246 << 9u)) + (_2691 << 2u)) >> 2u)).x;
                    _2701 = _2700 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2701)
                    {
                        frontier_phi_77_pred = _2690;
                        frontier_phi_77_pred_1 = _2689;
                        frontier_phi_77_pred_2 = _2688;
                        frontier_phi_77_pred_3 = _2687;
                        frontier_phi_77_pred_4 = _2686;
                        frontier_phi_77_pred_5 = _2685;
                    }
                    else
                    {
                        float _2894;
                        float _2895;
                        float _2896;
                        float _2897;
                        float _2898;
                        float _2899;
                        float _3190;
                        float _3191;
                        float _3192;
                        float _3193;
                        float _3194;
                        float _3195;
                        float _2907 = _2685;
                        float _2908 = _2686;
                        float _2909 = _2687;
                        float _2910 = _2688;
                        float _2911 = _2689;
                        float _2912 = _2690;
                        uint _2913 = _2700;
                        uint _2914;
                        vec4 _2939;
                        float _2940;
                        vec4 _2955;
                        vec3 _2967;
                        vec4 _2983;
                        vec4 _2999;
                        float _3046;
                        bool _3047;
                        for (;;)
                        {
                            uint _2924 = ((_2691 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2913));
                            _2914 = (_2913 + 4294967295u) & _2913;
                            uint _2926 = _2924 * 40u;
                            _2939 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2926)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2926 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2926 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2926 + 3u)).x));
                            _2940 = _2939.w;
                            uint _2942 = (_2924 * 40u) + 4u;
                            _2955 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2942)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2942 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2942 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2942 + 3u)).x));
                            uint _2957 = (_2924 * 40u) + 8u;
                            _2967 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2957)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2957 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2957 + 2u)).x));
                            uint _2970 = (_2924 * 40u) + 16u;
                            _2983 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2970)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2970 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2970 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2970 + 3u)).x));
                            uint _2986 = (_2924 * 40u) + 20u;
                            _2999 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2986)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2986 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2986 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2986 + 3u)).x));
                            uint _3002 = (_2924 * 40u) + 24u;
                            vec4 _3015 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3002)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3002 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3002 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3002 + 3u)).x));
                            uint _3021 = (_2924 * 40u) + 28u;
                            vec4 _3034 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3021)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3021 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3021 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3021 + 3u)).x));
                            _3046 = fma(_2222, _3034.z, fma(_2221, _3034.y, _3034.x * _2220)) + _3034.w;
                            _3047 = !((fma(_2222, _3015.z, fma(_2221, _3015.y, _3015.x * _2220)) + _3015.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3047)
                            {
                                float _3074 = _2939.x - _2220;
                                float _3075 = _2939.y - _2221;
                                float _3076 = _2939.z - _2222;
                                float _3077 = dot(vec3(_3074, _3075, _3076), vec3(_3074, _3075, _3076));
                                float _3080 = inversesqrt(_3077);
                                float _3081 = _3080 * _3074;
                                float _3082 = _3080 * _3075;
                                float _3083 = _3080 * _3076;
                                float _3087 = 1.0 - (_3077 / (_2940 * _2940));
                                float _4170 = isnan(0.0) ? _3087 : (isnan(_3087) ? 0.0 : max(_3087, 0.0));
                                float _3088 = isnan(1.0) ? _4170 : (isnan(_4170) ? 1.0 : min(_4170, 1.0));
                                float _3092 = sqrt(_3077) * _2955.w;
                                float _3094 = 1.39999997615814208984375 / (_3092 + 1.39999997615814208984375);
                                float _3095 = _3094 * _3094;
                                float _3098 = ((1.0 - _3095) * dot(vec3(_3081, _3082, _3083), vec3(_447, _450, _453))) + _3095;
                                float _3101 = _3092 * _3092;
                                float _3105 = (fma(_2222, _2983.z, fma(_2221, _2983.y, _2983.x * _2220)) + _2983.w) / _3046;
                                float _3106 = (fma(_2222, _2999.z, fma(_2221, _2999.y, _2999.x * _2220)) + _2999.w) / _3046;
                                float _3110 = 1.0 - dot(vec2(_3105, _3106), vec2(_3105, _3106));
                                float _4186 = isnan(0.0) ? _3110 : (isnan(_3110) ? 0.0 : max(_3110, 0.0));
                                float _3111 = isnan(1.0) ? _4186 : (isnan(_4186) ? 1.0 : min(_4186, 1.0));
                                float _3112 = _3111 * (((isnan(0.0) ? _3098 : (isnan(_3098) ? 0.0 : max(_3098, 0.0))) * _3088) / ((_3101 * 0.699999988079071044921875) + 1.0));
                                float _3124 = exp2(log2(1.0 / ((_3101 * 3.5) + 5.0)) * 0.25);
                                float _3125 = 1.0 - _522;
                                float _3132 = sqrt(1.0 - ((1.0 - (_3125 * _3125)) * (1.0 - (_3124 * _3124))));
                                float _3133 = _3132 * _3132;
                                float _3134 = _3133 * _3133;
                                float _3135 = _3081 - _2551;
                                float _3136 = _3082 - _2552;
                                float _3137 = _3083 - _2553;
                                float _3141 = inversesqrt(dot(vec3(_3135, _3136, _3137), vec3(_3135, _3136, _3137)));
                                float _3145 = dot(vec3(_447, _450, _453), vec3((-0.0) - _2551, (-0.0) - _2552, (-0.0) - _2553));
                                float _4197 = isnan(0.0) ? _3145 : (isnan(_3145) ? 0.0 : max(_3145, 0.0));
                                float _3148 = isnan(1.0) ? _4197 : (isnan(_4197) ? 1.0 : min(_4197, 1.0));
                                float _3149 = dot(vec3(_447, _450, _453), vec3(_3141 * _3135, _3141 * _3136, _3141 * _3137));
                                float _4208 = isnan(0.0) ? _3149 : (isnan(_3149) ? 0.0 : max(_3149, 0.0));
                                float _3152 = isnan(1.0) ? _4208 : (isnan(_4208) ? 1.0 : min(_4208, 1.0));
                                float _3156 = ((_3152 * _3152) * (_3134 + (-1.0))) + 1.0;
                                float _3157 = _3094 * _3133;
                                float _3158 = _3157 * _3157;
                                float _3164 = ((1.0 - _3158) * dot(vec3(_447, _450, _453), vec3(_3081, _3082, _3083))) + _3158;
                                float _4219 = isnan(0.0) ? _3164 : (isnan(_3164) ? 0.0 : max(_3164, 0.0));
                                float _3165 = isnan(1.0) ? _4219 : (isnan(_4219) ? 1.0 : min(_4219, 1.0));
                                float _3166 = 1.0 - _3133;
                                float _3176 = (0.5 / (((_3165 * ((_3148 * _3166) + _3133)) + 9.9999999392252902907785028219223e-09) + (((_3165 * _3166) + _3133) * _3148))) * _3165;
                                float _4230 = isnan(0.0) ? _3176 : (isnan(_3176) ? 0.0 : max(_3176, 0.0));
                                float _3186 = (_3111 * _3088) * (((_3134 * 3.1415927410125732421875) * (isnan(1.0) ? _4230 : (isnan(_4230) ? 1.0 : min(_4230, 1.0)))) / ((_3156 * _3156) * ((_3101 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3112 * _2955.y;
                                frontier_phi_83_pred_1 = _3112 * _2955.x;
                                frontier_phi_83_pred_2 = _3186 * _2967.z;
                                frontier_phi_83_pred_3 = _3186 * _2967.y;
                                frontier_phi_83_pred_4 = _3186 * _2967.x;
                                frontier_phi_83_pred_5 = _3112 * _2955.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3194 = frontier_phi_83_pred;
                            _3193 = frontier_phi_83_pred_1;
                            _3192 = frontier_phi_83_pred_2;
                            _3191 = frontier_phi_83_pred_3;
                            _3190 = frontier_phi_83_pred_4;
                            _3195 = frontier_phi_83_pred_5;
                            _2897 = _3193 + _2910;
                            _2898 = _3194 + _2911;
                            _2899 = _3195 + _2912;
                            _2894 = _3190 + _2907;
                            _2895 = _3191 + _2908;
                            _2896 = _3192 + _2909;
                            if (_2914 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2907 = _2894;
                                _2908 = _2895;
                                _2909 = _2896;
                                _2910 = _2897;
                                _2911 = _2898;
                                _2912 = _2899;
                                _2913 = _2914;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _2899;
                        frontier_phi_77_pred_1 = _2898;
                        frontier_phi_77_pred_2 = _2897;
                        frontier_phi_77_pred_3 = _2896;
                        frontier_phi_77_pred_4 = _2895;
                        frontier_phi_77_pred_5 = _2894;
                    }
                    _2536 = frontier_phi_77_pred;
                    _2534 = frontier_phi_77_pred_1;
                    _2532 = frontier_phi_77_pred_2;
                    _2530 = frontier_phi_77_pred_3;
                    _2528 = frontier_phi_77_pred_4;
                    _2526 = frontier_phi_77_pred_5;
                    uint _2692 = _2691 + 1u;
                    if (_2692 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2685 = _2526;
                        _2686 = _2528;
                        _2687 = _2530;
                        _2688 = _2532;
                        _2689 = _2534;
                        _2690 = _2536;
                        _2691 = _2692;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2530;
                frontier_phi_58_59_ladder_1 = _2536;
                frontier_phi_58_59_ladder_2 = _2534;
                frontier_phi_58_59_ladder_3 = _2532;
                frontier_phi_58_59_ladder_4 = _2528;
                frontier_phi_58_59_ladder_5 = _2526;
            }
            else
            {
                frontier_phi_58_59_ladder = _2400;
                frontier_phi_58_59_ladder_1 = _2406;
                frontier_phi_58_59_ladder_2 = _2404;
                frontier_phi_58_59_ladder_3 = _2402;
                frontier_phi_58_59_ladder_4 = _2398;
                frontier_phi_58_59_ladder_5 = _2396;
            }
            _2525 = frontier_phi_58_59_ladder_5;
            _2527 = frontier_phi_58_59_ladder_4;
            _2529 = frontier_phi_58_59_ladder;
            _2531 = frontier_phi_58_59_ladder_3;
            _2533 = frontier_phi_58_59_ladder_2;
            _2535 = frontier_phi_58_59_ladder_1;
        }
        float _2540 = isnan(1.0) ? _506 : (isnan(_506) ? 1.0 : min(_506, 1.0));
        _2279 = (_2540 * _2531) + _1715;
        _2281 = (_2540 * _2533) + _1717;
        _2283 = (_2540 * _2535) + _1719;
        _2285 = ((_2525 * _491) * _2540) + _2060;
        _2287 = ((_2527 * _493) * _2540) + _2062;
        _2289 = ((_2529 * _494) * _2540) + _2064;
    }
    else
    {
        _2279 = _1715;
        _2281 = _1717;
        _2283 = _1719;
        _2285 = _2060;
        _2287 = _2062;
        _2289 = _2064;
    }
    uint _2295 = _467 + uint(cbMatDynParam._m0[0u].w);
    float _2301 = ((((cbMtdParam._m0[10u].x * cbMtdParam._m0[12u].y) * _288.x) + cbMtdParam._m0[11u].x) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_2295].x;
    float _2302 = ((((cbMtdParam._m0[10u].y * cbMtdParam._m0[12u].y) * _288.y) + cbMtdParam._m0[11u].y) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_2295].y;
    float _2303 = ((cbMtdParam._m0[11u].z + ((cbMtdParam._m0[10u].z * cbMtdParam._m0[12u].y) * _288.z)) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_2295].z;
    float _4246 = isnan(0.0) ? _481 : (isnan(_481) ? 0.0 : max(_481, 0.0));
    float _4257 = isnan(0.0) ? _482 : (isnan(_482) ? 0.0 : max(_482, 0.0));
    float _4268 = isnan(0.0) ? _483 : (isnan(_483) ? 0.0 : max(_483, 0.0));
    float _2320 = (((isnan(1.0) ? _4246 : (isnan(_4246) ? 1.0 : min(_4246, 1.0))) * (_2279 + ((isnan(0.0) ? _1269 : (isnan(_1269) ? 0.0 : max(_1269, 0.0))) * _506))) + ((_2285 + ((isnan(0.0) ? _1567 : (isnan(_1567) ? 0.0 : max(_1567, 0.0))) * _1348)) * cbPerFrame._m0[3u].x)) + _2301;
    float _2322 = (_2302 + ((_2287 + ((isnan(0.0) ? _1570 : (isnan(_1570) ? 0.0 : max(_1570, 0.0))) * _1348)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4257 : (isnan(_4257) ? 1.0 : min(_4257, 1.0))) * (_2281 + ((isnan(0.0) ? _1272 : (isnan(_1272) ? 0.0 : max(_1272, 0.0))) * _506)));
    float _2324 = (_2303 + ((_2289 + ((isnan(0.0) ? _1573 : (isnan(_1573) ? 0.0 : max(_1573, 0.0))) * _1348)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4268 : (isnan(_4268) ? 1.0 : min(_4268, 1.0))) * (_2283 + ((isnan(0.0) ? _1275 : (isnan(_1275) ? 0.0 : max(_1275, 0.0))) * _506)));
    float _2325 = isnan(0.0) ? _2320 : (isnan(_2320) ? 0.0 : max(_2320, 0.0));
    float _2326 = isnan(0.0) ? _2322 : (isnan(_2322) ? 0.0 : max(_2322, 0.0));
    float _2327 = isnan(0.0) ? _2324 : (isnan(_2324) ? 0.0 : max(_2324, 0.0));
    float _2333 = cbMtdParam._m0[2u].x * _2301;
    float _2334 = cbMtdParam._m0[2u].y * _2302;
    float _2335 = cbMtdParam._m0[2u].z * _2303;
    float _4294 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2337 = isnan(1.0) ? _4294 : (isnan(_4294) ? 1.0 : min(_4294, 1.0));
    uint _2338 = _466 + 6u;
    float _2346 = _426 / cbSceneParam._m0[86u].x;
    float _2347 = _427 / cbSceneParam._m0[86u].y;
    vec4 _2361 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2346, _2347, (log2((isnan(cbSceneParam._m0[77u].w) ? _347 : (isnan(_347) ? cbSceneParam._m0[77u].w : min(_347, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2363 = _2361.x;
    float _2364 = _2361.y;
    float _2365 = _2361.z;
    float _2366 = _2361.w;
    float _2459;
    float _2461;
    float _2463;
    float _2465;
    if (_347 > cbSceneParam._m0[78u].w)
    {
        float _2421 = isnan(_347) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _347 : min(cbSceneParam._m0[80u].w, _347));
        float _2422 = _2421 / _347;
        float _2433 = _2422 * _398;
        float _2434 = _399 * _2422;
        float _2435 = (-0.0) - _2434;
        float _2437 = _2422 * _400;
        float _2439 = (cbSceneParam._m0[77u].w * _2435) / _2421;
        float _2440 = _2439 + cbSceneParam._m0[79u].w;
        float _2441 = cbSceneParam._m0[79u].w - _2434;
        float _2447 = sqrt(((_2433 * _2433) + (_2434 * _2434)) + (_2437 * _2437));
        float _2450 = (1.0 - (cbSceneParam._m0[77u].w / _2421)) * _2447;
        float _2455 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2457 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2642;
        if (abs((_2435 - _2439) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2642 = ((((_2440 > 0.0) ? exp2(_2455 * _2440) : (2.0 - exp2(_2457 * _2440))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2450;
        }
        else
        {
            float _2586 = 1.0 / cbSceneParam._m0[80u].x;
            float _2587 = isnan(_2441) ? _2440 : (isnan(_2440) ? _2441 : max(_2440, _2441));
            float _2588 = isnan(_2441) ? _2440 : (isnan(_2440) ? _2441 : min(_2440, _2441));
            float _2597 = isnan(0.0) ? _2587 : (isnan(_2587) ? 0.0 : min(_2587, 0.0));
            float _2598 = isnan(0.0) ? _2588 : (isnan(_2588) ? 0.0 : min(_2588, 0.0));
            _2642 = ((abs(_2447 / _2435) * cbSceneParam._m0[80u].y) * ((((_2597 - _2598) * 2.0) - ((exp2(_2455 * (isnan(0.0) ? _2587 : (isnan(_2587) ? 0.0 : max(_2587, 0.0)))) - exp2(_2455 * (isnan(0.0) ? _2588 : (isnan(_2588) ? 0.0 : max(_2588, 0.0))))) * _2586)) - ((exp2(_2457 * _2597) - exp2(_2457 * _2598)) * _2586))) + (_2450 * cbSceneParam._m0[80u].z);
        }
        vec4 _2644 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2346, _2347, 1.0), 0.0);
        float _2653 = exp2((_2642 * (-1.44269502162933349609375)) * (1.0 - _2644.w));
        float _2654 = log2(_2653);
        float _2670 = log2(_2366);
        _2459 = (exp2(_2670 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2654 * cbSceneParam._m0[78u].x)) * _2644.x) / cbSceneParam._m0[78u].x)) + _2363;
        _2461 = (exp2(_2670 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2654 * cbSceneParam._m0[78u].y)) * _2644.y) / cbSceneParam._m0[78u].y)) + _2364;
        _2463 = (exp2(_2670 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2654 * cbSceneParam._m0[78u].z)) * _2644.z) / cbSceneParam._m0[78u].z)) + _2365;
        _2465 = _2653 * _2366;
    }
    else
    {
        _2459 = _2363;
        _2461 = _2364;
        _2463 = _2365;
        _2465 = _2366;
    }
    bool _2680;
    vec4 _2474;
    vec4 _2496;
    float _2498;
    float _2502;
    float _2503;
    float _2504;
    float _2507;
    float _2510;
    float _2513;
    float _2514;
    bool _2524;
    for (;;)
    {
        _2474 = cbMatDynParam._m0[0u];
        float _2476 = roundEven(_2474.y);
        bool _2477 = _2476 == 3.0;
        float _2478 = log2(_2465);
        float _2482 = exp2(_2478 * cbSceneParam._m0[78u].x);
        float _2483 = exp2(_2478 * cbSceneParam._m0[78u].y);
        float _2484 = exp2(_2478 * cbSceneParam._m0[78u].z);
        float _2485 = _2482 * _2325;
        float _2486 = _2483 * _2326;
        float _2487 = _2484 * _2327;
        float _2494 = _414 + (-0.5);
        _2496 = cbMtdParam._m0[1u];
        _2498 = _2496.y * _2494;
        float _2501 = (_2476 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2502 = _2501 * (_2477 ? _2485 : (_2485 + (cbSceneParam._m0[72u].w * _2459)));
        _2503 = _2501 * (_2477 ? _2486 : (_2486 + (cbSceneParam._m0[72u].w * _2461)));
        _2504 = _2501 * (_2477 ? _2487 : (_2487 + (cbSceneParam._m0[72u].w * _2463)));
        _2507 = ((_2333 * _2337) * _2482) * _2501;
        _2510 = ((_2334 * _2337) * _2483) * _2501;
        _2513 = ((_2335 * _2337) * _2484) * _2501;
        _2514 = _2494 * 0.999000012874603271484375;
        _2524 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2524)
        {
            if ((cbInstanceData._m0[_466 + 7u].x + _2514) < 0.5)
            {
                _2680 = true;
                break;
            }
        }
        uint _2621 = _467 + uint(_2474.w);
        if ((cbInstanceData._m0[_2621].w < 1.0) && ((cbInstanceData._m0[_2621].w + _2514) < 0.5))
        {
            _2680 = true;
            break;
        }
        if ((_2498 + 1.0) < _2496.x)
        {
            _2680 = true;
            break;
        }
        _2680 = false;
        break;
    }
    float _2885;
    if (_2680)
    {
        discard_state = true;
        _2885 = 0.0;
    }
    else
    {
        _2885 = cbInstanceData._m0[_2338].w;
    }
    SV_Target.x = _2502;
    SV_Target.y = _2503;
    SV_Target.z = _2504;
    SV_Target.w = _2885;
    SV_Target_1.x = _2507;
    SV_Target_1.y = _2510;
    SV_Target_1.z = _2513;
    SV_Target_1.w = cbInstanceData._m0[_2338].w;
    discard_exit();
}


