#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[13];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D P_BS_M1_Emissive_Glow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D P_BS_M1_Emissive_Glow_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D P_BS_M1_Emissive_Glow_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D P_BS_M1_Emissive_Glow_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _927;
float _3354;
float _3355;
float _3356;
float _3357;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _182 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _183 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _184 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _189 = inversesqrt(dot(vec3(_182, _183, _184), vec3(_182, _183, _184)));
    float _196 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _203 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _226 = texture(sampler2D(P_BS_M1_Emissive_Glow_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _232 = _226.x * cbMtdParam._m0[9u].x;
    float _233 = _226.y * cbMtdParam._m0[9u].y;
    float _234 = _226.z * cbMtdParam._m0[9u].z;
    vec4 _246 = texture(sampler2D(P_BS_M1_Emissive_Glow_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _253 = cbMtdParam._m0[12u].x + _246.x;
    vec4 _265 = texture(sampler2D(P_BS_M1_Emissive_Glow_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _269 = _265.z;
    float _273 = (_265.x * 2.0) + (-1.0);
    float _275 = (_265.y * 2.0) + (-1.0);
    float _276 = dot(vec2(_273, _275), vec2(_273, _275));
    float _3366 = isnan(0.0) ? _276 : (isnan(_276) ? 0.0 : max(_276, 0.0));
    float _282 = sqrt(1.0 - (isnan(1.0) ? _3366 : (isnan(_3366) ? 1.0 : min(_3366, 1.0))));
    vec4 _305 = texture(sampler2D(P_BS_M1_Emissive_Glow_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _330 = fma(_282, _196 * NORMAL.x, fma(_275, _203 * TANGENT.x, (_189 * _182) * _273));
    float _333 = fma(_282, _196 * NORMAL.y, fma(_275, _203 * TANGENT.y, (_189 * _183) * _273));
    float _336 = fma(_282, _196 * NORMAL.z, fma(_275, _203 * TANGENT.z, (_189 * _184) * _273));
    float _340 = inversesqrt(dot(vec3(_330, _333, _336), vec3(_330, _333, _336)));
    float _341 = _340 * _330;
    float _342 = _340 * _333;
    float _343 = _340 * _336;
    float _3377 = isnan(0.0) ? _269 : (isnan(_269) ? 0.0 : max(_269, 0.0));
    float _344 = isnan(1.0) ? _3377 : (isnan(_3377) ? 1.0 : min(_3377, 1.0));
    float _3388 = isnan(0.0) ? _232 : (isnan(_232) ? 0.0 : max(_232, 0.0));
    float _3399 = isnan(0.0) ? _233 : (isnan(_233) ? 0.0 : max(_233, 0.0));
    float _3410 = isnan(0.0) ? _234 : (isnan(_234) ? 0.0 : max(_234, 0.0));
    float _3421 = isnan(0.0) ? _253 : (isnan(_253) ? 0.0 : max(_253, 0.0));
    float _348 = isnan(1.0) ? _3421 : (isnan(_3421) ? 1.0 : min(_3421, 1.0));
    float _364 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _405 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _415 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _405);
    float _416 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _405);
    float _417 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _405);
    float _421 = inversesqrt(dot(vec3(_415, _416, _417), vec3(_415, _416, _417)));
    float _422 = _415 * _421;
    float _423 = _416 * _421;
    float _424 = _417 * _421;
    vec4 _429 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _431 = _429.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _606 = sqrt(((_415 * _415) + (_416 * _416)) + (_417 * _417));
        float _612 = (cbMatDynParam._m0[5u].x * _606) + cbMatDynParam._m0[5u].y;
        float _3432 = isnan(0.0) ? _612 : (isnan(_612) ? 0.0 : max(_612, 0.0));
        float _613 = isnan(1.0) ? _3432 : (isnan(_3432) ? 1.0 : min(_3432, 1.0));
        float _617 = (cbMatDynParam._m0[5u].z * _606) + cbMatDynParam._m0[5u].w;
        float _3443 = isnan(0.0) ? _617 : (isnan(_617) ? 0.0 : max(_617, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3443 : (isnan(_3443) ? 1.0 : min(_3443, 1.0))) - _613)) + _613) < ((_431 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _443 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _444 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _464 = fma(_343, cbSceneParam._m0[5u].z, fma(_342, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _341));
    float _467 = fma(_343, cbSceneParam._m0[6u].z, fma(_342, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _341));
    float _470 = fma(_343, cbSceneParam._m0[7u].z, fma(_342, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _341));
    uint _483 = uint(roundEven(NORMAL.w)) * 13u;
    uint _484 = _483 + 9u;
    uint _485 = _484 + uint(cbMatDynParam._m0[0u].w);
    float _491 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3388 : (isnan(_3388) ? 1.0 : min(_3388, 1.0)))) * cbInstanceData._m0[_485].x;
    float _492 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3399 : (isnan(_3399) ? 1.0 : min(_3399, 1.0)))) * cbInstanceData._m0[_485].y;
    float _493 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3410 : (isnan(_3410) ? 1.0 : min(_3410, 1.0)))) * cbInstanceData._m0[_485].z;
    float _3454 = isnan(0.0) ? _491 : (isnan(_491) ? 0.0 : max(_491, 0.0));
    float _494 = isnan(1.0) ? _3454 : (isnan(_3454) ? 1.0 : min(_3454, 1.0));
    float _3465 = isnan(0.0) ? _492 : (isnan(_492) ? 0.0 : max(_492, 0.0));
    float _495 = isnan(1.0) ? _3465 : (isnan(_3465) ? 1.0 : min(_3465, 1.0));
    float _3476 = isnan(0.0) ? _493 : (isnan(_493) ? 0.0 : max(_493, 0.0));
    float _496 = isnan(1.0) ? _3476 : (isnan(_3476) ? 1.0 : min(_3476, 1.0));
    float _497 = 1.0 - _348;
    float _498 = _494 * _497;
    float _499 = _495 * _497;
    float _500 = _496 * _497;
    float _505 = (_494 + (-0.039999999105930328369140625)) * _348;
    float _506 = (_495 + (-0.039999999105930328369140625)) * _348;
    float _507 = (_496 + (-0.039999999105930328369140625)) * _348;
    float _508 = _505 + 0.039999999105930328369140625;
    float _510 = _506 + 0.039999999105930328369140625;
    float _511 = _507 + 0.039999999105930328369140625;
    vec4 _520 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _443, cbSceneParam._m0[86u].y * _444));
    float _523 = _520.x * TEXCOORD.z;
    float _524 = dot(vec3(_341, _342, _343), vec3(_422, _423, _424));
    float _527 = _524 * 2.0;
    float _531 = (_527 * _341) - _422;
    float _532 = (_527 * _342) - _423;
    float _533 = (_527 * _343) - _424;
    float _537 = abs(dot(vec3(_422, _423, _424), vec3(_341, _342, _343)));
    float _3487 = isnan(0.0) ? _537 : (isnan(_537) ? 0.0 : max(_537, 0.0));
    float _539 = sqrt(_344);
    float _552 = exp2((_539 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3487 : (isnan(_3487) ? 1.0 : min(_3487, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_539 * 3.0));
    float _558 = (1.0 - _552) * ((_539 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _559 = _552 * _539;
    float _587 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _591 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _595 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _926;
    float _928;
    float _929;
    float _930;
    float _931;
    float _932;
    float _933;
    float _934;
    float _935;
    float _936;
    float _937;
    float _938;
    float _939;
    float _940;
    float _941;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _651 = fma(_595, cbModelParam._m0[26u].z, fma(_591, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _587));
        float _655 = fma(_595, cbModelParam._m0[27u].z, fma(_591, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _587));
        float _659 = fma(_595, cbModelParam._m0[28u].z, fma(_591, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _587));
        float _684 = _587 + _341;
        float _685 = _591 + _342;
        float _686 = _595 + _343;
        float _696 = fma(_686, cbModelParam._m0[26u].z, fma(_685, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _684)) - _651;
        float _697 = fma(_686, cbModelParam._m0[27u].z, fma(_685, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _684)) - _655;
        float _698 = fma(_686, cbModelParam._m0[28u].z, fma(_685, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _684)) - _659;
        float _702 = inversesqrt(dot(vec3(_696, _697, _698), vec3(_696, _697, _698)));
        float _715 = ((_702 * _696) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_651 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _716 = ((_702 * _697) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_655 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _717 = ((_702 * _698) / cbModelParam._m0[34u].z) + ((((((_659 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _720 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_715, _716, _717), 0.0);
        vec4 _727 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_715, _716, _717), 0.0);
        vec4 _734 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_715, _716, _717), 0.0);
        vec4 _741 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_715, _716, _717), 0.0);
        float _754 = exp2((_720.w + (-0.5)) * 20.0) * 2.0;
        float _755 = _754 * (_720.x + (-0.5));
        float _756 = _754 * (_720.y + (-0.5));
        float _757 = _754 * (_720.z + (-0.5));
        float _764 = exp2((_727.w + (-0.5)) * 20.0) * 2.0;
        float _765 = _764 * (_727.x + (-0.5));
        float _766 = _764 * (_727.y + (-0.5));
        float _767 = _764 * (_727.z + (-0.5));
        float _774 = exp2((_734.w + (-0.5)) * 20.0) * 2.0;
        float _775 = _774 * (_734.x + (-0.5));
        float _776 = _774 * (_734.y + (-0.5));
        float _777 = _774 * (_734.z + (-0.5));
        float _784 = exp2((_741.w + (-0.5)) * 20.0) * 2.0;
        float _785 = _784 * (_741.x + (-0.5));
        float _786 = _784 * (_741.y + (-0.5));
        float _787 = _784 * (_741.z + (-0.5));
        float _788 = isnan(0.0) ? _785 : (isnan(_785) ? 0.0 : max(_785, 0.0));
        float _789 = isnan(0.0) ? _786 : (isnan(_786) ? 0.0 : max(_786, 0.0));
        float _790 = isnan(0.0) ? _787 : (isnan(_787) ? 0.0 : max(_787, 0.0));
        float _791 = _755 * 0.5;
        float _792 = _765 * 0.5;
        float _793 = _775 * 0.5;
        float _794 = dot(vec3(_791, _792, _793), vec3(_791, _792, _793));
        float _799 = (_794 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_794);
        float _808 = (dot(vec3(_341, _342, _343), vec3(_799 * _791, _799 * _792, _799 * _793)) + 1.0) * 0.5;
        float _3513 = isnan(0.0) ? _808 : (isnan(_808) ? 0.0 : max(_808, 0.0));
        float _818 = sqrt(((_792 * _792) + (_791 * _791)) + (_793 * _793)) / (_788 + 9.9999997473787516355514526367188e-06);
        float _3524 = isnan(0.0) ? _818 : (isnan(_818) ? 0.0 : max(_818, 0.0));
        float _819 = isnan(1.0) ? _3524 : (isnan(_3524) ? 1.0 : min(_3524, 1.0));
        float _820 = _819 * 2.0;
        float _824 = (1.0 - _819) / (_819 + 1.0);
        float _3535 = isnan(0.0) ? _824 : (isnan(_824) ? 0.0 : max(_824, 0.0));
        float _825 = isnan(1.0) ? _3535 : (isnan(_3535) ? 1.0 : min(_3535, 1.0));
        float _834 = ((((1.0 - _825) * (_820 + 2.0)) * exp2(log2(isnan(1.0) ? _3513 : (isnan(_3513) ? 1.0 : min(_3513, 1.0))) * (_820 + 1.0))) + _825) * _788;
        float _835 = _756 * 0.5;
        float _836 = _766 * 0.5;
        float _837 = _776 * 0.5;
        float _838 = dot(vec3(_835, _836, _837), vec3(_835, _836, _837));
        float _843 = (_838 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_838);
        float _851 = (dot(vec3(_341, _342, _343), vec3(_843 * _835, _843 * _836, _843 * _837)) + 1.0) * 0.5;
        float _3546 = isnan(0.0) ? _851 : (isnan(_851) ? 0.0 : max(_851, 0.0));
        float _860 = sqrt(((_836 * _836) + (_835 * _835)) + (_837 * _837)) / (_789 + 9.9999997473787516355514526367188e-06);
        float _3557 = isnan(0.0) ? _860 : (isnan(_860) ? 0.0 : max(_860, 0.0));
        float _861 = isnan(1.0) ? _3557 : (isnan(_3557) ? 1.0 : min(_3557, 1.0));
        float _862 = _861 * 2.0;
        float _866 = (1.0 - _861) / (_861 + 1.0);
        float _3568 = isnan(0.0) ? _866 : (isnan(_866) ? 0.0 : max(_866, 0.0));
        float _867 = isnan(1.0) ? _3568 : (isnan(_3568) ? 1.0 : min(_3568, 1.0));
        float _876 = ((((1.0 - _867) * (_862 + 2.0)) * exp2(log2(isnan(1.0) ? _3546 : (isnan(_3546) ? 1.0 : min(_3546, 1.0))) * (_862 + 1.0))) + _867) * _789;
        float _877 = _757 * 0.5;
        float _878 = _767 * 0.5;
        float _879 = _777 * 0.5;
        float _880 = dot(vec3(_877, _878, _879), vec3(_877, _878, _879));
        float _885 = (_880 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_880);
        float _893 = (dot(vec3(_341, _342, _343), vec3(_885 * _877, _885 * _878, _885 * _879)) + 1.0) * 0.5;
        float _3579 = isnan(0.0) ? _893 : (isnan(_893) ? 0.0 : max(_893, 0.0));
        float _902 = sqrt(((_878 * _878) + (_877 * _877)) + (_879 * _879)) / (_790 + 9.9999997473787516355514526367188e-06);
        float _3590 = isnan(0.0) ? _902 : (isnan(_902) ? 0.0 : max(_902, 0.0));
        float _903 = isnan(1.0) ? _3590 : (isnan(_3590) ? 1.0 : min(_3590, 1.0));
        float _904 = _903 * 2.0;
        float _908 = (1.0 - _903) / (_903 + 1.0);
        float _3601 = isnan(0.0) ? _908 : (isnan(_908) ? 0.0 : max(_908, 0.0));
        float _909 = isnan(1.0) ? _3601 : (isnan(_3601) ? 1.0 : min(_3601, 1.0));
        float _918 = ((((1.0 - _909) * (_904 + 2.0)) * exp2(log2(isnan(1.0) ? _3579 : (isnan(_3579) ? 1.0 : min(_3579, 1.0))) * (_904 + 1.0))) + _909) * _790;
        _926 = _757;
        _928 = _756;
        _929 = _755;
        _930 = _767;
        _931 = _766;
        _932 = _765;
        _933 = _777;
        _934 = _776;
        _935 = _775;
        _936 = _790;
        _937 = _789;
        _938 = _788;
        _939 = cbModelParam._m0[36u].z * (isnan(0.0) ? _834 : (isnan(_834) ? 0.0 : max(_834, 0.0)));
        _940 = cbModelParam._m0[36u].z * (isnan(0.0) ? _876 : (isnan(_876) ? 0.0 : max(_876, 0.0)));
        _941 = cbModelParam._m0[36u].z * (isnan(0.0) ? _918 : (isnan(_918) ? 0.0 : max(_918, 0.0)));
    }
    else
    {
        _926 = _927;
        _928 = _927;
        _929 = _927;
        _930 = _927;
        _931 = _927;
        _932 = _927;
        _933 = _927;
        _934 = _927;
        _935 = _927;
        _936 = _927;
        _937 = _927;
        _938 = _927;
        _939 = 0.0;
        _940 = 0.0;
        _941 = 0.0;
    }
    float _1239;
    float _1240;
    float _1241;
    float _1242;
    float _1243;
    float _1244;
    float _1245;
    float _1246;
    float _1247;
    float _1248;
    float _1249;
    float _1250;
    float _1251;
    float _1252;
    float _1253;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _970 = fma(_595, cbModelParam._m0[30u].z, fma(_591, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _587));
        float _974 = fma(_595, cbModelParam._m0[31u].z, fma(_591, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _587));
        float _978 = fma(_595, cbModelParam._m0[32u].z, fma(_591, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _587));
        float _1001 = _587 + _341;
        float _1002 = _591 + _342;
        float _1003 = _595 + _343;
        float _1013 = fma(_1003, cbModelParam._m0[30u].z, fma(_1002, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1001)) - _970;
        float _1014 = fma(_1003, cbModelParam._m0[31u].z, fma(_1002, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1001)) - _974;
        float _1015 = fma(_1003, cbModelParam._m0[32u].z, fma(_1002, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1001)) - _978;
        float _1019 = inversesqrt(dot(vec3(_1013, _1014, _1015), vec3(_1013, _1014, _1015)));
        float _1032 = ((_1019 * _1013) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_970 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1033 = ((_1019 * _1014) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_974 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1034 = ((_1019 * _1015) / cbModelParam._m0[35u].z) + ((((((_978 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1036 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1032, _1033, _1034), 0.0);
        vec4 _1043 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1032, _1033, _1034), 0.0);
        vec4 _1050 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1032, _1033, _1034), 0.0);
        vec4 _1057 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1032, _1033, _1034), 0.0);
        float _1069 = exp2((_1036.w + (-0.5)) * 20.0) * 2.0;
        float _1070 = _1069 * (_1036.x + (-0.5));
        float _1071 = _1069 * (_1036.y + (-0.5));
        float _1072 = _1069 * (_1036.z + (-0.5));
        float _1079 = exp2((_1043.w + (-0.5)) * 20.0) * 2.0;
        float _1080 = _1079 * (_1043.x + (-0.5));
        float _1081 = _1079 * (_1043.y + (-0.5));
        float _1082 = _1079 * (_1043.z + (-0.5));
        float _1089 = exp2((_1050.w + (-0.5)) * 20.0) * 2.0;
        float _1090 = _1089 * (_1050.x + (-0.5));
        float _1091 = _1089 * (_1050.y + (-0.5));
        float _1092 = _1089 * (_1050.z + (-0.5));
        float _1099 = exp2((_1057.w + (-0.5)) * 20.0) * 2.0;
        float _1100 = _1099 * (_1057.x + (-0.5));
        float _1101 = _1099 * (_1057.y + (-0.5));
        float _1102 = _1099 * (_1057.z + (-0.5));
        float _1103 = isnan(0.0) ? _1100 : (isnan(_1100) ? 0.0 : max(_1100, 0.0));
        float _1104 = isnan(0.0) ? _1101 : (isnan(_1101) ? 0.0 : max(_1101, 0.0));
        float _1105 = isnan(0.0) ? _1102 : (isnan(_1102) ? 0.0 : max(_1102, 0.0));
        float _1106 = _1070 * 0.5;
        float _1107 = _1080 * 0.5;
        float _1108 = _1090 * 0.5;
        float _1109 = dot(vec3(_1106, _1107, _1108), vec3(_1106, _1107, _1108));
        float _1114 = (_1109 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1109);
        float _1122 = (dot(vec3(_341, _342, _343), vec3(_1114 * _1106, _1114 * _1107, _1114 * _1108)) + 1.0) * 0.5;
        float _3642 = isnan(0.0) ? _1122 : (isnan(_1122) ? 0.0 : max(_1122, 0.0));
        float _1131 = sqrt(((_1107 * _1107) + (_1106 * _1106)) + (_1108 * _1108)) / (_1103 + 9.9999997473787516355514526367188e-06);
        float _3653 = isnan(0.0) ? _1131 : (isnan(_1131) ? 0.0 : max(_1131, 0.0));
        float _1132 = isnan(1.0) ? _3653 : (isnan(_3653) ? 1.0 : min(_3653, 1.0));
        float _1133 = _1132 * 2.0;
        float _1137 = (1.0 - _1132) / (_1132 + 1.0);
        float _3664 = isnan(0.0) ? _1137 : (isnan(_1137) ? 0.0 : max(_1137, 0.0));
        float _1138 = isnan(1.0) ? _3664 : (isnan(_3664) ? 1.0 : min(_3664, 1.0));
        float _1147 = ((((1.0 - _1138) * (_1133 + 2.0)) * exp2(log2(isnan(1.0) ? _3642 : (isnan(_3642) ? 1.0 : min(_3642, 1.0))) * (_1133 + 1.0))) + _1138) * _1103;
        float _1148 = _1071 * 0.5;
        float _1149 = _1081 * 0.5;
        float _1150 = _1091 * 0.5;
        float _1151 = dot(vec3(_1148, _1149, _1150), vec3(_1148, _1149, _1150));
        float _1156 = (_1151 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1151);
        float _1164 = (dot(vec3(_341, _342, _343), vec3(_1156 * _1148, _1156 * _1149, _1156 * _1150)) + 1.0) * 0.5;
        float _3675 = isnan(0.0) ? _1164 : (isnan(_1164) ? 0.0 : max(_1164, 0.0));
        float _1173 = sqrt(((_1149 * _1149) + (_1148 * _1148)) + (_1150 * _1150)) / (_1104 + 9.9999997473787516355514526367188e-06);
        float _3686 = isnan(0.0) ? _1173 : (isnan(_1173) ? 0.0 : max(_1173, 0.0));
        float _1174 = isnan(1.0) ? _3686 : (isnan(_3686) ? 1.0 : min(_3686, 1.0));
        float _1175 = _1174 * 2.0;
        float _1179 = (1.0 - _1174) / (_1174 + 1.0);
        float _3697 = isnan(0.0) ? _1179 : (isnan(_1179) ? 0.0 : max(_1179, 0.0));
        float _1180 = isnan(1.0) ? _3697 : (isnan(_3697) ? 1.0 : min(_3697, 1.0));
        float _1189 = ((((1.0 - _1180) * (_1175 + 2.0)) * exp2(log2(isnan(1.0) ? _3675 : (isnan(_3675) ? 1.0 : min(_3675, 1.0))) * (_1175 + 1.0))) + _1180) * _1104;
        float _1190 = _1072 * 0.5;
        float _1191 = _1082 * 0.5;
        float _1192 = _1092 * 0.5;
        float _1193 = dot(vec3(_1190, _1191, _1192), vec3(_1190, _1191, _1192));
        float _1198 = (_1193 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1193);
        float _1206 = (dot(vec3(_341, _342, _343), vec3(_1198 * _1190, _1198 * _1191, _1198 * _1192)) + 1.0) * 0.5;
        float _3708 = isnan(0.0) ? _1206 : (isnan(_1206) ? 0.0 : max(_1206, 0.0));
        float _1215 = sqrt(((_1191 * _1191) + (_1190 * _1190)) + (_1192 * _1192)) / (_1105 + 9.9999997473787516355514526367188e-06);
        float _3719 = isnan(0.0) ? _1215 : (isnan(_1215) ? 0.0 : max(_1215, 0.0));
        float _1216 = isnan(1.0) ? _3719 : (isnan(_3719) ? 1.0 : min(_3719, 1.0));
        float _1217 = _1216 * 2.0;
        float _1221 = (1.0 - _1216) / (_1216 + 1.0);
        float _3730 = isnan(0.0) ? _1221 : (isnan(_1221) ? 0.0 : max(_1221, 0.0));
        float _1222 = isnan(1.0) ? _3730 : (isnan(_3730) ? 1.0 : min(_3730, 1.0));
        float _1231 = ((((1.0 - _1222) * (_1217 + 2.0)) * exp2(log2(isnan(1.0) ? _3708 : (isnan(_3708) ? 1.0 : min(_3708, 1.0))) * (_1217 + 1.0))) + _1222) * _1105;
        _1239 = _1072;
        _1240 = _1071;
        _1241 = _1070;
        _1242 = _1082;
        _1243 = _1081;
        _1244 = _1080;
        _1245 = _1092;
        _1246 = _1091;
        _1247 = _1090;
        _1248 = _1105;
        _1249 = _1104;
        _1250 = _1103;
        _1251 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1147 : (isnan(_1147) ? 0.0 : max(_1147, 0.0)));
        _1252 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1189 : (isnan(_1189) ? 0.0 : max(_1189, 0.0)));
        _1253 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1231 : (isnan(_1231) ? 0.0 : max(_1231, 0.0)));
    }
    else
    {
        _1239 = _927;
        _1240 = _927;
        _1241 = _927;
        _1242 = _927;
        _1243 = _927;
        _1244 = _927;
        _1245 = _927;
        _1246 = _927;
        _1247 = _927;
        _1248 = _927;
        _1249 = _927;
        _1250 = _927;
        _1251 = 0.0;
        _1252 = 0.0;
        _1253 = 0.0;
    }
    float _1263 = (cbModelParam._m0[1u].x * (_1251 - _939)) + _939;
    float _1264 = (cbModelParam._m0[1u].x * (_1252 - _940)) + _940;
    float _1265 = (cbModelParam._m0[1u].x * (_1253 - _941)) + _941;
    float _1286 = fma(_1265, cbSceneParam._m0[89u].z, fma(_1264, cbSceneParam._m0[89u].y, _1263 * cbSceneParam._m0[89u].x));
    float _1289 = fma(_1265, cbSceneParam._m0[90u].z, fma(_1264, cbSceneParam._m0[90u].y, _1263 * cbSceneParam._m0[90u].x));
    float _1292 = fma(_1265, cbSceneParam._m0[91u].z, fma(_1264, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1263));
    float _1307 = _531 * 0.5;
    float _1308 = _532 * 0.5;
    float _1309 = _533 * 0.5;
    float _1310 = dot(vec4(_1307, _1308, _1309, 1.0), vec4(_1241, _1244, _1247, _1250));
    float _1313 = dot(vec4(_1307, _1308, _1309, 1.0), vec4(_1240, _1243, _1246, _1249));
    float _1316 = dot(vec4(_1307, _1308, _1309, 1.0), vec4(_1239, _1242, _1245, _1248));
    float _1350;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1323 = dot(vec4(_1307, _1308, _1309, 1.0), vec4(_926, _930, _933, _936));
        float _1327 = dot(vec4(_1307, _1308, _1309, 1.0), vec4(_928, _931, _934, _937));
        float _1331 = dot(vec4(_1307, _1308, _1309, 1.0), vec4(_929, _932, _935, _938));
        float _1338 = dot(vec4(cbModelParam._m0[39u]), vec4(_1307, _1308, _1309, 1.0));
        _1350 = dot(vec3(isnan(0.0) ? _1331 : (isnan(_1331) ? 0.0 : max(_1331, 0.0)), isnan(0.0) ? _1327 : (isnan(_1327) ? 0.0 : max(_1327, 0.0)), isnan(0.0) ? _1323 : (isnan(_1323) ? 0.0 : max(_1323, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1338) ? 0.0 : (isnan(0.0) ? _1338 : max(0.0, _1338))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1350 = 1.0;
    }
    float _1361;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1352 = dot(vec4(cbModelParam._m0[40u]), vec4(_1307, _1308, _1309, 1.0));
        _1361 = dot(vec3(isnan(0.0) ? _1310 : (isnan(_1310) ? 0.0 : max(_1310, 0.0)), isnan(0.0) ? _1313 : (isnan(_1313) ? 0.0 : max(_1313, 0.0)), isnan(0.0) ? _1316 : (isnan(_1316) ? 0.0 : max(_1316, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1352) ? 0.0 : (isnan(0.0) ? _1352 : max(0.0, _1352))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1361 = 1.0;
    }
    float _1365 = (_1361 * cbModelParam._m0[1u].x) + (_1350 * (1.0 - cbModelParam._m0[1u].x));
    float _1375 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _344);
    float _1376 = isnan(_1375) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1375 : min(cbModelParam._m0[25u].z, _1375));
    float _1458;
    float _1460;
    float _1462;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1425 = fma(_595, cbModelParam._m0[13u].z, fma(_591, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _587)) + cbModelParam._m0[13u].w;
        float _1429 = fma(_595, cbModelParam._m0[14u].z, fma(_591, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _587)) + cbModelParam._m0[14u].w;
        float _1433 = fma(_595, cbModelParam._m0[15u].z, fma(_591, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _587)) + cbModelParam._m0[15u].w;
        float _1436 = fma(_533, cbModelParam._m0[13u].z, fma(_532, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _531));
        float _1439 = fma(_533, cbModelParam._m0[14u].z, fma(_532, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _531));
        float _1442 = fma(_533, cbModelParam._m0[15u].z, fma(_532, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _531));
        float _1470;
        if (_1436 > 0.0)
        {
            _1470 = abs((1.0 - _1425) / _1436);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1436 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1425 + 1.0) / _1436);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1470 = frontier_phi_17_15_ladder;
        }
        float _1677;
        if (_1439 > 0.0)
        {
            _1677 = abs((1.0 - _1429) / _1439);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1439 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1429 + 1.0) / _1439);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1677 = frontier_phi_26_22_ladder;
        }
        float _1931;
        if (_1442 > 0.0)
        {
            _1931 = abs((1.0 - _1433) / _1442);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1442 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1433 + 1.0) / _1442);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _1931 = frontier_phi_38_33_ladder;
        }
        float _1933 = isnan(_1677) ? _1470 : (isnan(_1470) ? _1677 : min(_1470, _1677));
        float _1934 = isnan(_1931) ? _1933 : (isnan(_1933) ? _1931 : min(_1933, _1931));
        float _1938 = (_1934 * _1436) + _1425;
        float _1939 = (_1934 * _1439) + _1429;
        float _1940 = (_1934 * _1442) + _1433;
        float _1941 = _1934 * 9.9999997473787516355514526367188e-05;
        float _1943 = (-1.0) - _1941;
        float _1945 = _1941 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_1940 > _1945) || ((_1940 < _1943) || ((_1939 > _1945) || ((_1939 < _1943) || ((_1938 < _1943) || (_1938 > _1945))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2068 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1940, cbModelParam._m0[9u].z, fma(_1939, cbModelParam._m0[9u].y, _1938 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1940, cbModelParam._m0[10u].z, fma(_1939, cbModelParam._m0[10u].y, _1938 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1940, cbModelParam._m0[11u].z, fma(_1939, cbModelParam._m0[11u].y, _1938 * cbModelParam._m0[11u].x))), _1376);
            frontier_phi_16_38_ladder = _2068.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2068.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2068.x * cbModelParam._m0[1u].y;
        }
        _1458 = frontier_phi_16_38_ladder_2;
        _1460 = frontier_phi_16_38_ladder_1;
        _1462 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1446 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_531, _532, _533), _1376);
        _1458 = _1446.x * cbModelParam._m0[1u].y;
        _1460 = _1446.y * cbModelParam._m0[1u].y;
        _1462 = _1446.z * cbModelParam._m0[1u].y;
    }
    float _1466 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _344);
    float _1467 = isnan(_1466) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1466 : min(cbModelParam._m0[25u].w, _1466));
    float _1560;
    float _1562;
    float _1564;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1524 = fma(_595, cbModelParam._m0[21u].z, fma(_591, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _587)) + cbModelParam._m0[21u].w;
        float _1528 = fma(_595, cbModelParam._m0[22u].z, fma(_591, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _587)) + cbModelParam._m0[22u].w;
        float _1532 = fma(_595, cbModelParam._m0[23u].z, fma(_591, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _587)) + cbModelParam._m0[23u].w;
        float _1535 = fma(_533, cbModelParam._m0[21u].z, fma(_532, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _531));
        float _1538 = fma(_533, cbModelParam._m0[22u].z, fma(_532, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _531));
        float _1541 = fma(_533, cbModelParam._m0[23u].z, fma(_532, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _531));
        float _1682;
        if (_1535 > 0.0)
        {
            _1682 = abs((1.0 - _1524) / _1535);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1535 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1524 + 1.0) / _1535);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1682 = frontier_phi_28_24_ladder;
        }
        float _1958;
        if (_1538 > 0.0)
        {
            _1958 = abs((1.0 - _1528) / _1538);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1538 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1528 + 1.0) / _1538);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1958 = frontier_phi_40_35_ladder;
        }
        float _2171;
        if (_1541 > 0.0)
        {
            _2171 = abs((1.0 - _1532) / _1541);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1541 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1532 + 1.0) / _1541);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2171 = frontier_phi_49_46_ladder;
        }
        float _2173 = isnan(_1958) ? _1682 : (isnan(_1682) ? _1958 : min(_1682, _1958));
        float _2174 = isnan(_2171) ? _2173 : (isnan(_2173) ? _2171 : min(_2173, _2171));
        float _2178 = (_2174 * _1535) + _1524;
        float _2179 = (_2174 * _1538) + _1528;
        float _2180 = (_2174 * _1541) + _1532;
        float _2181 = _2174 * 9.9999997473787516355514526367188e-05;
        float _2182 = (-1.0) - _2181;
        float _2184 = _2181 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2180 > _2184) || ((_2180 < _2182) || ((_2179 > _2184) || ((_2179 < _2182) || ((_2178 < _2182) || (_2178 > _2184))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2408 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2180, cbModelParam._m0[17u].z, fma(_2179, cbModelParam._m0[17u].y, _2178 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2180, cbModelParam._m0[18u].z, fma(_2179, cbModelParam._m0[18u].y, _2178 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2180, cbModelParam._m0[19u].z, fma(_2179, cbModelParam._m0[19u].y, _2178 * cbModelParam._m0[19u].x))), _1467);
            frontier_phi_25_49_ladder = _2408.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2408.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2408.x * cbModelParam._m0[1u].z;
        }
        _1560 = frontier_phi_25_49_ladder_2;
        _1562 = frontier_phi_25_49_ladder_1;
        _1564 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1544 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_531, _532, _533), _1467);
        _1560 = _1544.x * cbModelParam._m0[1u].z;
        _1562 = _1544.y * cbModelParam._m0[1u].z;
        _1564 = _1544.z * cbModelParam._m0[1u].z;
    }
    float _1577 = (((_558 * _508) + _559) * _523) * ((cbModelParam._m0[1u].w * (_1560 - _1458)) + _1458);
    float _1579 = (((_558 * _510) + _559) * _523) * ((cbModelParam._m0[1u].w * (_1562 - _1460)) + _1460);
    float _1581 = (((_558 * _511) + _559) * _523) * ((cbModelParam._m0[1u].w * (_1564 - _1462)) + _1462);
    float _1584 = fma(_1581, cbSceneParam._m0[89u].z, fma(_1579, cbSceneParam._m0[89u].y, _1577 * cbSceneParam._m0[89u].x));
    float _1587 = fma(_1581, cbSceneParam._m0[90u].z, fma(_1579, cbSceneParam._m0[90u].y, _1577 * cbSceneParam._m0[90u].x));
    float _1590 = fma(_1581, cbSceneParam._m0[91u].z, fma(_1579, cbSceneParam._m0[91u].y, _1577 * cbSceneParam._m0[91u].x));
    uvec4 _1600 = floatBitsToUint(cbInstanceData._m0[_483 + 5u]);
    uint _1602 = _1600.x * 14u;
    uint _1603 = _1602 + 13u;
    float _1610 = _523 + (-1.0);
    float _1615 = (cbLight._m0[_1603].x * _1610) + 1.0;
    float _1616 = (cbLight._m0[_1603].y * _1610) + 1.0;
    float _1617 = (cbLight._m0[_1603].z * _1610) + 1.0;
    float _1618 = (cbLight._m0[_1603].w * _1610) + 1.0;
    uint _1619 = _1602 + 5u;
    float _1625 = isnan(1.0) ? _1616 : (isnan(_1616) ? 1.0 : min(_1616, 1.0));
    uint _1629 = _1602 + 4u;
    float _1636 = isnan(1.0) ? _1615 : (isnan(_1615) ? 1.0 : min(_1615, 1.0));
    uint _1640 = _1602 | 1u;
    float _1651 = dot(vec3(cbLight._m0[_1602].xyz), vec3(_341, _342, _343));
    float _1654 = dot(vec3(cbLight._m0[_1640].xyz), vec3(_341, _342, _343));
    float _3866 = isnan(0.0) ? _1651 : (isnan(_1651) ? 0.0 : max(_1651, 0.0));
    float _3877 = isnan(0.0) ? _1654 : (isnan(_1654) ? 0.0 : max(_1654, 0.0));
    float _1659 = (isnan(1.0) ? _3866 : (isnan(_3866) ? 1.0 : min(_3866, 1.0))) * 0.3183098733425140380859375;
    float _1661 = (isnan(1.0) ? _3877 : (isnan(_3877) ? 1.0 : min(_3877, 1.0))) * 0.3183098733425140380859375;
    float _1668 = ((cbLight._m0[_1619].x * _1625) * _1661) + ((cbLight._m0[_1629].x * _1636) * _1659);
    float _1669 = ((_1625 * cbLight._m0[_1619].y) * _1661) + ((_1636 * cbLight._m0[_1629].y) * _1659);
    float _1670 = ((_1625 * cbLight._m0[_1619].z) * _1661) + ((_1636 * cbLight._m0[_1629].z) * _1659);
    uvec4 _1674 = floatBitsToUint(cbLight._m0[_1602 + 12u]);
    bool _1676 = _1674.x == 0u;
    float _1687;
    float _1689;
    float _1691;
    if (_1676)
    {
        _1687 = _1668;
        _1689 = _1669;
        _1691 = _1670;
    }
    else
    {
        uint _1695 = _1602 + 6u;
        float _1711 = (dot(vec3(cbLight._m0[_1602 + 2u].xyz), vec3(_341, _342, _343)) * 0.5) + 0.5;
        float _1712 = _1711 * _1711;
        float _3888 = isnan(0.0) ? _1712 : (isnan(_1712) ? 0.0 : max(_1712, 0.0));
        float _1713 = isnan(1.0) ? _3888 : (isnan(_3888) ? 1.0 : min(_3888, 1.0));
        float _1714 = isnan(1.0) ? _1617 : (isnan(_1617) ? 1.0 : min(_1617, 1.0));
        _1687 = (((cbLight._m0[_1695].x * 0.3183098733425140380859375) * _1713) * _1714) + _1668;
        _1689 = (((cbLight._m0[_1695].y * 0.3183098733425140380859375) * _1713) * _1714) + _1669;
        _1691 = (((cbLight._m0[_1695].z * 0.3183098733425140380859375) * _1713) * _1714) + _1670;
    }
    bool _1694 = _1674.y == 0u;
    float _1732;
    float _1734;
    float _1736;
    if (_1694)
    {
        _1732 = _1687;
        _1734 = _1689;
        _1736 = _1691;
    }
    else
    {
        uint _1902 = _1602 + 7u;
        float _1918 = (dot(vec3(cbLight._m0[_1602 + 3u].xyz), vec3(_341, _342, _343)) * 0.5) + 0.5;
        float _1919 = _1918 * _1918;
        float _3904 = isnan(0.0) ? _1919 : (isnan(_1919) ? 0.0 : max(_1919, 0.0));
        float _1920 = isnan(1.0) ? _3904 : (isnan(_3904) ? 1.0 : min(_3904, 1.0));
        float _1921 = isnan(1.0) ? _1618 : (isnan(_1618) ? 1.0 : min(_1618, 1.0));
        _1732 = (((cbLight._m0[_1902].x * 0.3183098733425140380859375) * _1920) * _1921) + _1687;
        _1734 = (((cbLight._m0[_1902].y * 0.3183098733425140380859375) * _1920) * _1921) + _1689;
        _1736 = (((cbLight._m0[_1902].z * 0.3183098733425140380859375) * _1920) * _1921) + _1691;
    }
    uint _1739 = _1602 + 8u;
    float _1752 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1602].w)) * _344) * 0.949999988079071044921875);
    float _1753 = _1752 * _1752;
    float _1754 = cbLight._m0[_1602].x + _422;
    float _1755 = cbLight._m0[_1602].y + _423;
    float _1756 = cbLight._m0[_1602].z + _424;
    float _1760 = inversesqrt(dot(vec3(_1754, _1755, _1756), vec3(_1754, _1755, _1756)));
    float _1761 = _1760 * _1754;
    float _1762 = _1760 * _1755;
    float _1763 = _1760 * _1756;
    float _1764 = dot(vec3(_341, _342, _343), vec3(cbLight._m0[_1602].xyz));
    float _3920 = isnan(0.0) ? _1764 : (isnan(_1764) ? 0.0 : max(_1764, 0.0));
    float _1767 = isnan(1.0) ? _3920 : (isnan(_3920) ? 1.0 : min(_3920, 1.0));
    float _3931 = isnan(0.0) ? _524 : (isnan(_524) ? 0.0 : max(_524, 0.0));
    float _1768 = isnan(1.0) ? _3931 : (isnan(_3931) ? 1.0 : min(_3931, 1.0));
    float _1769 = dot(vec3(_341, _342, _343), vec3(_1761, _1762, _1763));
    float _3942 = isnan(0.0) ? _1769 : (isnan(_1769) ? 0.0 : max(_1769, 0.0));
    float _1772 = isnan(1.0) ? _3942 : (isnan(_3942) ? 1.0 : min(_3942, 1.0));
    float _1773 = dot(vec3(cbLight._m0[_1602].xyz), vec3(_1761, _1762, _1763));
    float _3953 = isnan(0.0) ? _1773 : (isnan(_1773) ? 0.0 : max(_1773, 0.0));
    float _1777 = _1753 * _1753;
    float _1781 = ((_1772 * _1772) * (_1777 + (-1.0))) + 1.0;
    float _1789 = exp2(log2(1.0 - (isnan(1.0) ? _3953 : (isnan(_3953) ? 1.0 : min(_3953, 1.0)))) * 5.0);
    float _1790 = 0.959999978542327880859375 - _505;
    float _1792 = 0.959999978542327880859375 - _506;
    float _1793 = 0.959999978542327880859375 - _507;
    float _1800 = 1.0 - _1753;
    float _1811 = (0.5 / (((_1768 * ((_1767 * _1800) + _1753)) + 9.9999999392252902907785028219223e-09) + (((_1768 * _1800) + _1753) * _1767))) * _1767;
    float _3964 = isnan(0.0) ? _1811 : (isnan(_1811) ? 0.0 : max(_1811, 0.0));
    float _1813 = (isnan(1.0) ? _3964 : (isnan(_3964) ? 1.0 : min(_3964, 1.0))) * (_1777 / ((_1781 * _1781) * 3.141590118408203125));
    uint _1824 = _1602 + 9u;
    float _1835 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1640].w)) * _344) * 0.949999988079071044921875);
    float _1836 = _1835 * _1835;
    float _1837 = cbLight._m0[_1640].x + _422;
    float _1838 = cbLight._m0[_1640].y + _423;
    float _1839 = cbLight._m0[_1640].z + _424;
    float _1843 = inversesqrt(dot(vec3(_1837, _1838, _1839), vec3(_1837, _1838, _1839)));
    float _1844 = _1843 * _1837;
    float _1845 = _1843 * _1838;
    float _1846 = _1843 * _1839;
    float _1847 = dot(vec3(_341, _342, _343), vec3(cbLight._m0[_1640].xyz));
    float _3975 = isnan(0.0) ? _1847 : (isnan(_1847) ? 0.0 : max(_1847, 0.0));
    float _1850 = isnan(1.0) ? _3975 : (isnan(_3975) ? 1.0 : min(_3975, 1.0));
    float _1851 = dot(vec3(_341, _342, _343), vec3(_1844, _1845, _1846));
    float _3986 = isnan(0.0) ? _1851 : (isnan(_1851) ? 0.0 : max(_1851, 0.0));
    float _1854 = isnan(1.0) ? _3986 : (isnan(_3986) ? 1.0 : min(_3986, 1.0));
    float _1855 = dot(vec3(cbLight._m0[_1640].xyz), vec3(_1844, _1845, _1846));
    float _3997 = isnan(0.0) ? _1855 : (isnan(_1855) ? 0.0 : max(_1855, 0.0));
    float _1859 = _1836 * _1836;
    float _1863 = ((_1854 * _1854) * (_1859 + (-1.0))) + 1.0;
    float _1870 = exp2(log2(1.0 - (isnan(1.0) ? _3997 : (isnan(_3997) ? 1.0 : min(_3997, 1.0)))) * 5.0);
    float _1877 = 1.0 - _1836;
    float _1887 = (0.5 / (((_1768 * ((_1850 * _1877) + _1836)) + 9.9999999392252902907785028219223e-09) + (((_1768 * _1877) + _1836) * _1850))) * _1850;
    float _4008 = isnan(0.0) ? _1887 : (isnan(_1887) ? 0.0 : max(_1887, 0.0));
    float _1889 = (isnan(1.0) ? _4008 : (isnan(_4008) ? 1.0 : min(_4008, 1.0))) * (_1859 / ((_1863 * _1863) * 3.141590118408203125));
    float _1899 = (((((_1870 * _1790) + _508) * cbLight._m0[_1824].x) * _1889) * _1625) + (((((_1789 * _1790) + _508) * cbLight._m0[_1739].x) * _1813) * _1636);
    float _1900 = (((((_1870 * _1792) + _510) * cbLight._m0[_1824].y) * _1889) * _1625) + (((((_1789 * _1792) + _510) * cbLight._m0[_1739].y) * _1813) * _1636);
    float _1901 = (((((_1870 * _1793) + _511) * cbLight._m0[_1824].z) * _1889) * _1625) + (((((_1789 * _1793) + _511) * cbLight._m0[_1739].z) * _1813) * _1636);
    float _1963;
    float _1965;
    float _1967;
    if (_1676)
    {
        _1963 = _1899;
        _1965 = _1900;
        _1967 = _1901;
    }
    else
    {
        uint _1969 = _1602 + 2u;
        uint _1973 = _1602 + 10u;
        float _1987 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1969].w)) * _344) * 0.949999988079071044921875);
        float _1988 = _1987 * _1987;
        float _1989 = cbLight._m0[_1969].x + _422;
        float _1990 = cbLight._m0[_1969].y + _423;
        float _1991 = cbLight._m0[_1969].z + _424;
        float _1995 = inversesqrt(dot(vec3(_1989, _1990, _1991), vec3(_1989, _1990, _1991)));
        float _1996 = _1995 * _1989;
        float _1997 = _1995 * _1990;
        float _1998 = _1995 * _1991;
        float _1999 = dot(vec3(_341, _342, _343), vec3(cbLight._m0[_1969].xyz));
        float _4019 = isnan(0.0) ? _1999 : (isnan(_1999) ? 0.0 : max(_1999, 0.0));
        float _2002 = isnan(1.0) ? _4019 : (isnan(_4019) ? 1.0 : min(_4019, 1.0));
        float _2003 = dot(vec3(_341, _342, _343), vec3(_1996, _1997, _1998));
        float _4030 = isnan(0.0) ? _2003 : (isnan(_2003) ? 0.0 : max(_2003, 0.0));
        float _2006 = isnan(1.0) ? _4030 : (isnan(_4030) ? 1.0 : min(_4030, 1.0));
        float _2007 = dot(vec3(cbLight._m0[_1969].xyz), vec3(_1996, _1997, _1998));
        float _4041 = isnan(0.0) ? _2007 : (isnan(_2007) ? 0.0 : max(_2007, 0.0));
        float _2011 = _1988 * _1988;
        float _2015 = ((_2006 * _2006) * (_2011 + (-1.0))) + 1.0;
        float _2022 = exp2(log2(1.0 - (isnan(1.0) ? _4041 : (isnan(_4041) ? 1.0 : min(_4041, 1.0)))) * 5.0);
        float _2029 = 1.0 - _1988;
        float _2039 = (0.5 / (((_1768 * ((_2002 * _2029) + _1988)) + 9.9999999392252902907785028219223e-09) + (((_1768 * _2029) + _1988) * _2002))) * _2002;
        float _4052 = isnan(0.0) ? _2039 : (isnan(_2039) ? 0.0 : max(_2039, 0.0));
        float _2041 = (isnan(1.0) ? _4052 : (isnan(_4052) ? 1.0 : min(_4052, 1.0))) * (_2011 / ((_2015 * _2015) * 3.141590118408203125));
        float _2042 = isnan(1.0) ? _1617 : (isnan(_1617) ? 1.0 : min(_1617, 1.0));
        _1963 = (((((_2022 * _1790) + _508) * cbLight._m0[_1973].x) * _2041) * _2042) + _1899;
        _1965 = (((((_2022 * _1792) + _510) * cbLight._m0[_1973].y) * _2041) * _2042) + _1900;
        _1967 = (((((_2022 * _1793) + _511) * cbLight._m0[_1973].z) * _2041) * _2042) + _1901;
    }
    float _2077;
    float _2079;
    float _2081;
    if (_1694)
    {
        _2077 = _1963;
        _2079 = _1965;
        _2081 = _1967;
    }
    else
    {
        uint _2088 = _1602 + 3u;
        uint _2092 = _1602 + 11u;
        float _2106 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2088].w)) * _344) * 0.949999988079071044921875);
        float _2107 = _2106 * _2106;
        float _2108 = cbLight._m0[_2088].x + _422;
        float _2109 = cbLight._m0[_2088].y + _423;
        float _2110 = cbLight._m0[_2088].z + _424;
        float _2114 = inversesqrt(dot(vec3(_2108, _2109, _2110), vec3(_2108, _2109, _2110)));
        float _2115 = _2114 * _2108;
        float _2116 = _2114 * _2109;
        float _2117 = _2114 * _2110;
        float _2118 = dot(vec3(_341, _342, _343), vec3(cbLight._m0[_2088].xyz));
        float _4068 = isnan(0.0) ? _2118 : (isnan(_2118) ? 0.0 : max(_2118, 0.0));
        float _2121 = isnan(1.0) ? _4068 : (isnan(_4068) ? 1.0 : min(_4068, 1.0));
        float _2122 = dot(vec3(_341, _342, _343), vec3(_2115, _2116, _2117));
        float _4079 = isnan(0.0) ? _2122 : (isnan(_2122) ? 0.0 : max(_2122, 0.0));
        float _2125 = isnan(1.0) ? _4079 : (isnan(_4079) ? 1.0 : min(_4079, 1.0));
        float _2126 = dot(vec3(cbLight._m0[_2088].xyz), vec3(_2115, _2116, _2117));
        float _4090 = isnan(0.0) ? _2126 : (isnan(_2126) ? 0.0 : max(_2126, 0.0));
        float _2130 = _2107 * _2107;
        float _2134 = ((_2125 * _2125) * (_2130 + (-1.0))) + 1.0;
        float _2141 = exp2(log2(1.0 - (isnan(1.0) ? _4090 : (isnan(_4090) ? 1.0 : min(_4090, 1.0)))) * 5.0);
        float _2148 = 1.0 - _2107;
        float _2158 = (0.5 / (((_1768 * ((_2121 * _2148) + _2107)) + 9.9999999392252902907785028219223e-09) + (((_1768 * _2148) + _2107) * _2121))) * _2121;
        float _4101 = isnan(0.0) ? _2158 : (isnan(_2158) ? 0.0 : max(_2158, 0.0));
        float _2160 = (isnan(1.0) ? _4101 : (isnan(_4101) ? 1.0 : min(_4101, 1.0))) * (_2130 / ((_2134 * _2134) * 3.141590118408203125));
        float _2161 = isnan(1.0) ? _1618 : (isnan(_1618) ? 1.0 : min(_1618, 1.0));
        _2077 = (((((_2141 * _1790) + _508) * cbLight._m0[_2092].x) * _2160) * _2161) + _1963;
        _2079 = (((((_2141 * _1792) + _510) * cbLight._m0[_2092].y) * _2160) * _2161) + _1965;
        _2081 = (((((_2141 * _1793) + _511) * cbLight._m0[_2092].z) * _2160) * _2161) + _1967;
    }
    float _2296;
    float _2298;
    float _2300;
    float _2302;
    float _2304;
    float _2306;
    if (_1600.y == 0u)
    {
        float _2236 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2237 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2236;
        float _2238 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2236;
        float _2239 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2236;
        uvec4 _2251 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2252 = _2251.x;
        uint _2263 = uint((float(_2251.y) * floor(float(uint(cbSceneParam._m0[85u].y * _444) / _2252))) + floor(float(uint(cbSceneParam._m0[85u].x * _443) / _2252)));
        float _2273 = (log2(_2239 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2274 = isnan(0.0) ? _2273 : (isnan(_2273) ? 0.0 : max(_2273, 0.0));
        uint _2277 = uint(isnan(14.0) ? _2274 : (isnan(_2274) ? 14.0 : min(_2274, 14.0)));
        uvec4 _2282 = texelFetch(g_lightClusterGridBuffer, int(((_2277 << 2u) + (_2263 << 6u)) >> 2u));
        uint _2283 = _2282.x;
        uint _2284 = _2251.z;
        float _2413;
        float _2415;
        float _2417;
        float _2419;
        float _2421;
        float _2423;
        if (((((1u << ((_2284 >> 4u) & 15u)) + 4294967295u) & _2283) == 0u) || ((_2284 & 240u) == 0u))
        {
            _2413 = 0.0;
            _2415 = 0.0;
            _2417 = 0.0;
            _2419 = 0.0;
            _2421 = 0.0;
            _2423 = 0.0;
        }
        else
        {
            float _2414;
            float _2416;
            float _2418;
            float _2420;
            float _2422;
            float _2424;
            float _2574 = 0.0;
            float _2575 = 0.0;
            float _2576 = 0.0;
            float _2577 = 0.0;
            float _2578 = 0.0;
            float _2579 = 0.0;
            uint _2580 = 0u;
            uint _2589;
            bool _2590;
            for (;;)
            {
                _2589 = texelFetch(g_lightClassification, int((((_2277 << 5u) + (_2263 << 9u)) + (_2580 << 2u)) >> 2u)).x;
                _2590 = _2589 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2590)
                {
                    frontier_phi_66_pred = _2574;
                    frontier_phi_66_pred_1 = _2579;
                    frontier_phi_66_pred_2 = _2578;
                    frontier_phi_66_pred_3 = _2577;
                    frontier_phi_66_pred_4 = _2576;
                    frontier_phi_66_pred_5 = _2575;
                }
                else
                {
                    float _2719;
                    float _2720;
                    float _2721;
                    float _2722;
                    float _2723;
                    float _2724;
                    uint _2725;
                    _2719 = _2574;
                    _2720 = _2575;
                    _2721 = _2576;
                    _2722 = _2577;
                    _2723 = _2578;
                    _2724 = _2579;
                    _2725 = _2589;
                    float _2646;
                    float _2647;
                    float _2648;
                    float _2649;
                    float _2650;
                    float _2651;
                    for (;;)
                    {
                        uint _2729 = uint(findLSB(_2725)) + (_2580 << 5u);
                        uint _2726 = (_2725 + 4294967295u) & _2725;
                        uint _2731 = _2729 * 48u;
                        vec4 _2745 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2731)).x, texelFetch(g_PointLightRenderingBuffer, int(_2731 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2731 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2731 + 3u)).x));
                        uint _2751 = (_2729 * 48u) + 4u;
                        vec4 _2764 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2751)).x, texelFetch(g_PointLightRenderingBuffer, int(_2751 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2751 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2751 + 3u)).x));
                        uint _2770 = (_2729 * 48u) + 8u;
                        vec3 _2781 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2770)).x, texelFetch(g_PointLightRenderingBuffer, int(_2770 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2770 + 2u)).x));
                        float _2785 = _2745.x - _2237;
                        float _2786 = _2745.y - _2238;
                        float _2787 = _2745.z - _2239;
                        float _2788 = dot(vec3(_2785, _2786, _2787), vec3(_2785, _2786, _2787));
                        float _2791 = inversesqrt(_2788);
                        float _2792 = _2791 * _2785;
                        float _2793 = _2791 * _2786;
                        float _2794 = _2791 * _2787;
                        float _2795 = dot(vec3(_464, _467, _470), vec3(_2792, _2793, _2794));
                        float _2800 = 1.0 - (_2788 * _2745.w);
                        float _4127 = isnan(0.0) ? _2800 : (isnan(_2800) ? 0.0 : max(_2800, 0.0));
                        float _2801 = isnan(1.0) ? _4127 : (isnan(_4127) ? 1.0 : min(_4127, 1.0));
                        float _2802 = sqrt(_2788) * _2764.w;
                        float _2805 = 1.39999997615814208984375 / (_2802 + 1.39999997615814208984375);
                        float _2806 = _2805 * _2805;
                        float _2809 = ((1.0 - _2806) * _2795) + _2806;
                        float _2812 = _2802 * _2802;
                        float _2816 = ((isnan(0.0) ? _2809 : (isnan(_2809) ? 0.0 : max(_2809, 0.0))) * _2801) / ((_2812 * 0.699999988079071044921875) + 1.0);
                        float _2820 = (-0.0) - _2237;
                        float _2821 = (-0.0) - _2238;
                        float _2822 = (-0.0) - _2239;
                        float _2826 = inversesqrt(dot(vec3(_2820, _2821, _2822), vec3(_2820, _2821, _2822)));
                        float _2827 = _2826 * _2820;
                        float _2828 = _2826 * _2821;
                        float _2829 = _2826 * _2822;
                        float _2837 = exp2(log2(1.0 / ((_2812 * 3.5) + 5.0)) * 0.25);
                        float _2838 = 1.0 - _539;
                        float _2845 = sqrt(1.0 - ((1.0 - (_2838 * _2838)) * (1.0 - (_2837 * _2837))));
                        float _2846 = _2845 * _2845;
                        float _2847 = _2846 * _2846;
                        float _2848 = _2827 + _2792;
                        float _2849 = _2828 + _2793;
                        float _2850 = _2829 + _2794;
                        float _2854 = inversesqrt(dot(vec3(_2848, _2849, _2850), vec3(_2848, _2849, _2850)));
                        float _2858 = dot(vec3(_464, _467, _470), vec3(_2827, _2828, _2829));
                        float _4143 = isnan(0.0) ? _2858 : (isnan(_2858) ? 0.0 : max(_2858, 0.0));
                        float _2861 = isnan(1.0) ? _4143 : (isnan(_4143) ? 1.0 : min(_4143, 1.0));
                        float _2862 = dot(vec3(_464, _467, _470), vec3(_2854 * _2848, _2854 * _2849, _2854 * _2850));
                        float _4154 = isnan(0.0) ? _2862 : (isnan(_2862) ? 0.0 : max(_2862, 0.0));
                        float _2865 = isnan(1.0) ? _4154 : (isnan(_4154) ? 1.0 : min(_4154, 1.0));
                        float _2869 = ((_2865 * _2865) * (_2847 + (-1.0))) + 1.0;
                        float _2870 = _2805 * _2846;
                        float _2871 = _2870 * _2870;
                        float _2874 = ((1.0 - _2871) * _2795) + _2871;
                        float _4165 = isnan(0.0) ? _2874 : (isnan(_2874) ? 0.0 : max(_2874, 0.0));
                        float _2875 = isnan(1.0) ? _4165 : (isnan(_4165) ? 1.0 : min(_4165, 1.0));
                        float _2876 = 1.0 - _2846;
                        float _2886 = (0.5 / (((_2875 * ((_2861 * _2876) + _2846)) + 9.9999999392252902907785028219223e-09) + (((_2875 * _2876) + _2846) * _2861))) * _2875;
                        float _4176 = isnan(0.0) ? _2886 : (isnan(_2886) ? 0.0 : max(_2886, 0.0));
                        float _2897 = (((_2847 * 3.1415927410125732421875) * (isnan(1.0) ? _4176 : (isnan(_4176) ? 1.0 : min(_4176, 1.0)))) / ((_2869 * _2869) * ((_2812 * 2.1991131305694580078125) + 3.141590118408203125))) * _2801;
                        _2649 = (_2816 * _2764.x) + _2722;
                        _2650 = (_2816 * _2764.y) + _2723;
                        _2651 = (_2816 * _2764.z) + _2724;
                        _2646 = (_2897 * _2781.x) + _2719;
                        _2647 = (_2897 * _2781.y) + _2720;
                        _2648 = (_2897 * _2781.z) + _2721;
                        if (_2726 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2719 = _2646;
                            _2720 = _2647;
                            _2721 = _2648;
                            _2722 = _2649;
                            _2723 = _2650;
                            _2724 = _2651;
                            _2725 = _2726;
                        }
                    }
                    frontier_phi_66_pred = _2646;
                    frontier_phi_66_pred_1 = _2651;
                    frontier_phi_66_pred_2 = _2650;
                    frontier_phi_66_pred_3 = _2649;
                    frontier_phi_66_pred_4 = _2648;
                    frontier_phi_66_pred_5 = _2647;
                }
                _2414 = frontier_phi_66_pred;
                _2424 = frontier_phi_66_pred_1;
                _2422 = frontier_phi_66_pred_2;
                _2420 = frontier_phi_66_pred_3;
                _2418 = frontier_phi_66_pred_4;
                _2416 = frontier_phi_66_pred_5;
                uint _2581 = _2580 + 1u;
                if (_2581 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2574 = _2414;
                    _2575 = _2416;
                    _2576 = _2418;
                    _2577 = _2420;
                    _2578 = _2422;
                    _2579 = _2424;
                    _2580 = _2581;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2413 = _2414;
            _2415 = _2416;
            _2417 = _2418;
            _2419 = _2420;
            _2421 = _2422;
            _2423 = _2424;
        }
        uvec4 _2427 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2428 = _2427.z;
        uint _2430 = (_2428 >> 8u) & 15u;
        float _2542;
        float _2544;
        float _2546;
        float _2548;
        float _2550;
        float _2552;
        if (((4294967295u << _2430) & _2283) == 0u)
        {
            _2542 = _2413;
            _2544 = _2415;
            _2546 = _2417;
            _2548 = _2419;
            _2550 = _2421;
            _2552 = _2423;
        }
        else
        {
            float _2567 = inversesqrt(dot(vec3(_2237, _2238, _2239), vec3(_2237, _2238, _2239)));
            float _2568 = _2567 * _2237;
            float _2569 = _2567 * _2238;
            float _2570 = _2567 * _2239;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2430 < ((_2428 >> 12u) & 15u))
            {
                float _2543;
                float _2545;
                float _2547;
                float _2549;
                float _2551;
                float _2553;
                float _2702 = _2413;
                float _2703 = _2415;
                float _2704 = _2417;
                float _2705 = _2419;
                float _2706 = _2421;
                float _2707 = _2423;
                uint _2708 = _2430;
                uint _2717;
                bool _2718;
                for (;;)
                {
                    _2717 = texelFetch(g_lightClassification, int((((_2277 << 5u) + (_2263 << 9u)) + (_2708 << 2u)) >> 2u)).x;
                    _2718 = _2717 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2718)
                    {
                        frontier_phi_77_pred = _2707;
                        frontier_phi_77_pred_1 = _2706;
                        frontier_phi_77_pred_2 = _2705;
                        frontier_phi_77_pred_3 = _2704;
                        frontier_phi_77_pred_4 = _2703;
                        frontier_phi_77_pred_5 = _2702;
                    }
                    else
                    {
                        float _2911;
                        float _2912;
                        float _2913;
                        float _2914;
                        float _2915;
                        float _2916;
                        float _3207;
                        float _3208;
                        float _3209;
                        float _3210;
                        float _3211;
                        float _3212;
                        float _2924 = _2702;
                        float _2925 = _2703;
                        float _2926 = _2704;
                        float _2927 = _2705;
                        float _2928 = _2706;
                        float _2929 = _2707;
                        uint _2930 = _2717;
                        uint _2931;
                        vec4 _2956;
                        float _2957;
                        vec4 _2972;
                        vec3 _2984;
                        vec4 _3000;
                        vec4 _3016;
                        float _3063;
                        bool _3064;
                        for (;;)
                        {
                            uint _2941 = ((_2708 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2930));
                            _2931 = (_2930 + 4294967295u) & _2930;
                            uint _2943 = _2941 * 40u;
                            _2956 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2943)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2943 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2943 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2943 + 3u)).x));
                            _2957 = _2956.w;
                            uint _2959 = (_2941 * 40u) + 4u;
                            _2972 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2959)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2959 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2959 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2959 + 3u)).x));
                            uint _2974 = (_2941 * 40u) + 8u;
                            _2984 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2974)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2974 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2974 + 2u)).x));
                            uint _2987 = (_2941 * 40u) + 16u;
                            _3000 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2987)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2987 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2987 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2987 + 3u)).x));
                            uint _3003 = (_2941 * 40u) + 20u;
                            _3016 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3003)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3003 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3003 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3003 + 3u)).x));
                            uint _3019 = (_2941 * 40u) + 24u;
                            vec4 _3032 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3019)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3019 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3019 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3019 + 3u)).x));
                            uint _3038 = (_2941 * 40u) + 28u;
                            vec4 _3051 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3038)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3038 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3038 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3038 + 3u)).x));
                            _3063 = fma(_2239, _3051.z, fma(_2238, _3051.y, _3051.x * _2237)) + _3051.w;
                            _3064 = !((fma(_2239, _3032.z, fma(_2238, _3032.y, _3032.x * _2237)) + _3032.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3064)
                            {
                                float _3091 = _2956.x - _2237;
                                float _3092 = _2956.y - _2238;
                                float _3093 = _2956.z - _2239;
                                float _3094 = dot(vec3(_3091, _3092, _3093), vec3(_3091, _3092, _3093));
                                float _3097 = inversesqrt(_3094);
                                float _3098 = _3097 * _3091;
                                float _3099 = _3097 * _3092;
                                float _3100 = _3097 * _3093;
                                float _3104 = 1.0 - (_3094 / (_2957 * _2957));
                                float _4187 = isnan(0.0) ? _3104 : (isnan(_3104) ? 0.0 : max(_3104, 0.0));
                                float _3105 = isnan(1.0) ? _4187 : (isnan(_4187) ? 1.0 : min(_4187, 1.0));
                                float _3109 = sqrt(_3094) * _2972.w;
                                float _3111 = 1.39999997615814208984375 / (_3109 + 1.39999997615814208984375);
                                float _3112 = _3111 * _3111;
                                float _3115 = ((1.0 - _3112) * dot(vec3(_3098, _3099, _3100), vec3(_464, _467, _470))) + _3112;
                                float _3118 = _3109 * _3109;
                                float _3122 = (fma(_2239, _3000.z, fma(_2238, _3000.y, _3000.x * _2237)) + _3000.w) / _3063;
                                float _3123 = (fma(_2239, _3016.z, fma(_2238, _3016.y, _3016.x * _2237)) + _3016.w) / _3063;
                                float _3127 = 1.0 - dot(vec2(_3122, _3123), vec2(_3122, _3123));
                                float _4203 = isnan(0.0) ? _3127 : (isnan(_3127) ? 0.0 : max(_3127, 0.0));
                                float _3128 = isnan(1.0) ? _4203 : (isnan(_4203) ? 1.0 : min(_4203, 1.0));
                                float _3129 = _3128 * (((isnan(0.0) ? _3115 : (isnan(_3115) ? 0.0 : max(_3115, 0.0))) * _3105) / ((_3118 * 0.699999988079071044921875) + 1.0));
                                float _3141 = exp2(log2(1.0 / ((_3118 * 3.5) + 5.0)) * 0.25);
                                float _3142 = 1.0 - _539;
                                float _3149 = sqrt(1.0 - ((1.0 - (_3142 * _3142)) * (1.0 - (_3141 * _3141))));
                                float _3150 = _3149 * _3149;
                                float _3151 = _3150 * _3150;
                                float _3152 = _3098 - _2568;
                                float _3153 = _3099 - _2569;
                                float _3154 = _3100 - _2570;
                                float _3158 = inversesqrt(dot(vec3(_3152, _3153, _3154), vec3(_3152, _3153, _3154)));
                                float _3162 = dot(vec3(_464, _467, _470), vec3((-0.0) - _2568, (-0.0) - _2569, (-0.0) - _2570));
                                float _4214 = isnan(0.0) ? _3162 : (isnan(_3162) ? 0.0 : max(_3162, 0.0));
                                float _3165 = isnan(1.0) ? _4214 : (isnan(_4214) ? 1.0 : min(_4214, 1.0));
                                float _3166 = dot(vec3(_464, _467, _470), vec3(_3158 * _3152, _3158 * _3153, _3158 * _3154));
                                float _4225 = isnan(0.0) ? _3166 : (isnan(_3166) ? 0.0 : max(_3166, 0.0));
                                float _3169 = isnan(1.0) ? _4225 : (isnan(_4225) ? 1.0 : min(_4225, 1.0));
                                float _3173 = ((_3169 * _3169) * (_3151 + (-1.0))) + 1.0;
                                float _3174 = _3111 * _3150;
                                float _3175 = _3174 * _3174;
                                float _3181 = ((1.0 - _3175) * dot(vec3(_464, _467, _470), vec3(_3098, _3099, _3100))) + _3175;
                                float _4236 = isnan(0.0) ? _3181 : (isnan(_3181) ? 0.0 : max(_3181, 0.0));
                                float _3182 = isnan(1.0) ? _4236 : (isnan(_4236) ? 1.0 : min(_4236, 1.0));
                                float _3183 = 1.0 - _3150;
                                float _3193 = (0.5 / (((_3182 * ((_3165 * _3183) + _3150)) + 9.9999999392252902907785028219223e-09) + (((_3182 * _3183) + _3150) * _3165))) * _3182;
                                float _4247 = isnan(0.0) ? _3193 : (isnan(_3193) ? 0.0 : max(_3193, 0.0));
                                float _3203 = (_3128 * _3105) * (((_3151 * 3.1415927410125732421875) * (isnan(1.0) ? _4247 : (isnan(_4247) ? 1.0 : min(_4247, 1.0)))) / ((_3173 * _3173) * ((_3118 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3129 * _2972.y;
                                frontier_phi_83_pred_1 = _3129 * _2972.x;
                                frontier_phi_83_pred_2 = _3203 * _2984.z;
                                frontier_phi_83_pred_3 = _3203 * _2984.y;
                                frontier_phi_83_pred_4 = _3203 * _2984.x;
                                frontier_phi_83_pred_5 = _3129 * _2972.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3211 = frontier_phi_83_pred;
                            _3210 = frontier_phi_83_pred_1;
                            _3209 = frontier_phi_83_pred_2;
                            _3208 = frontier_phi_83_pred_3;
                            _3207 = frontier_phi_83_pred_4;
                            _3212 = frontier_phi_83_pred_5;
                            _2914 = _3210 + _2927;
                            _2915 = _3211 + _2928;
                            _2916 = _3212 + _2929;
                            _2911 = _3207 + _2924;
                            _2912 = _3208 + _2925;
                            _2913 = _3209 + _2926;
                            if (_2931 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2924 = _2911;
                                _2925 = _2912;
                                _2926 = _2913;
                                _2927 = _2914;
                                _2928 = _2915;
                                _2929 = _2916;
                                _2930 = _2931;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _2916;
                        frontier_phi_77_pred_1 = _2915;
                        frontier_phi_77_pred_2 = _2914;
                        frontier_phi_77_pred_3 = _2913;
                        frontier_phi_77_pred_4 = _2912;
                        frontier_phi_77_pred_5 = _2911;
                    }
                    _2553 = frontier_phi_77_pred;
                    _2551 = frontier_phi_77_pred_1;
                    _2549 = frontier_phi_77_pred_2;
                    _2547 = frontier_phi_77_pred_3;
                    _2545 = frontier_phi_77_pred_4;
                    _2543 = frontier_phi_77_pred_5;
                    uint _2709 = _2708 + 1u;
                    if (_2709 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2702 = _2543;
                        _2703 = _2545;
                        _2704 = _2547;
                        _2705 = _2549;
                        _2706 = _2551;
                        _2707 = _2553;
                        _2708 = _2709;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2547;
                frontier_phi_58_59_ladder_1 = _2553;
                frontier_phi_58_59_ladder_2 = _2551;
                frontier_phi_58_59_ladder_3 = _2549;
                frontier_phi_58_59_ladder_4 = _2545;
                frontier_phi_58_59_ladder_5 = _2543;
            }
            else
            {
                frontier_phi_58_59_ladder = _2417;
                frontier_phi_58_59_ladder_1 = _2423;
                frontier_phi_58_59_ladder_2 = _2421;
                frontier_phi_58_59_ladder_3 = _2419;
                frontier_phi_58_59_ladder_4 = _2415;
                frontier_phi_58_59_ladder_5 = _2413;
            }
            _2542 = frontier_phi_58_59_ladder_5;
            _2544 = frontier_phi_58_59_ladder_4;
            _2546 = frontier_phi_58_59_ladder;
            _2548 = frontier_phi_58_59_ladder_3;
            _2550 = frontier_phi_58_59_ladder_2;
            _2552 = frontier_phi_58_59_ladder_1;
        }
        float _2557 = isnan(1.0) ? _523 : (isnan(_523) ? 1.0 : min(_523, 1.0));
        _2296 = (_2557 * _2548) + _1732;
        _2298 = (_2557 * _2550) + _1734;
        _2300 = (_2557 * _2552) + _1736;
        _2302 = ((_2542 * _508) * _2557) + _2077;
        _2304 = ((_2544 * _510) * _2557) + _2079;
        _2306 = ((_2546 * _511) * _2557) + _2081;
    }
    else
    {
        _2296 = _1732;
        _2298 = _1734;
        _2300 = _1736;
        _2302 = _2077;
        _2304 = _2079;
        _2306 = _2081;
    }
    uint _2312 = _484 + uint(cbMatDynParam._m0[0u].w);
    float _2318 = ((((cbMtdParam._m0[10u].x * cbMtdParam._m0[12u].y) * _305.x) + cbMtdParam._m0[11u].x) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_2312].x;
    float _2319 = ((((cbMtdParam._m0[10u].y * cbMtdParam._m0[12u].y) * _305.y) + cbMtdParam._m0[11u].y) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_2312].y;
    float _2320 = ((cbMtdParam._m0[11u].z + ((cbMtdParam._m0[10u].z * cbMtdParam._m0[12u].y) * _305.z)) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_2312].z;
    float _4263 = isnan(0.0) ? _498 : (isnan(_498) ? 0.0 : max(_498, 0.0));
    float _4274 = isnan(0.0) ? _499 : (isnan(_499) ? 0.0 : max(_499, 0.0));
    float _4285 = isnan(0.0) ? _500 : (isnan(_500) ? 0.0 : max(_500, 0.0));
    float _2337 = (((isnan(1.0) ? _4263 : (isnan(_4263) ? 1.0 : min(_4263, 1.0))) * (_2296 + ((isnan(0.0) ? _1286 : (isnan(_1286) ? 0.0 : max(_1286, 0.0))) * _523))) + ((_2302 + ((isnan(0.0) ? _1584 : (isnan(_1584) ? 0.0 : max(_1584, 0.0))) * _1365)) * cbPerFrame._m0[3u].x)) + _2318;
    float _2339 = (_2319 + ((_2304 + ((isnan(0.0) ? _1587 : (isnan(_1587) ? 0.0 : max(_1587, 0.0))) * _1365)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4274 : (isnan(_4274) ? 1.0 : min(_4274, 1.0))) * (_2298 + ((isnan(0.0) ? _1289 : (isnan(_1289) ? 0.0 : max(_1289, 0.0))) * _523)));
    float _2341 = (_2320 + ((_2306 + ((isnan(0.0) ? _1590 : (isnan(_1590) ? 0.0 : max(_1590, 0.0))) * _1365)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4285 : (isnan(_4285) ? 1.0 : min(_4285, 1.0))) * (_2300 + ((isnan(0.0) ? _1292 : (isnan(_1292) ? 0.0 : max(_1292, 0.0))) * _523)));
    float _2342 = isnan(0.0) ? _2337 : (isnan(_2337) ? 0.0 : max(_2337, 0.0));
    float _2343 = isnan(0.0) ? _2339 : (isnan(_2339) ? 0.0 : max(_2339, 0.0));
    float _2344 = isnan(0.0) ? _2341 : (isnan(_2341) ? 0.0 : max(_2341, 0.0));
    float _2350 = cbMtdParam._m0[2u].x * _2318;
    float _2351 = cbMtdParam._m0[2u].y * _2319;
    float _2352 = cbMtdParam._m0[2u].z * _2320;
    float _4311 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2354 = isnan(1.0) ? _4311 : (isnan(_4311) ? 1.0 : min(_4311, 1.0));
    uint _2355 = _483 + 6u;
    float _2363 = _443 / cbSceneParam._m0[86u].x;
    float _2364 = _444 / cbSceneParam._m0[86u].y;
    vec4 _2378 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2363, _2364, (log2((isnan(cbSceneParam._m0[77u].w) ? _364 : (isnan(_364) ? cbSceneParam._m0[77u].w : min(_364, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2380 = _2378.x;
    float _2381 = _2378.y;
    float _2382 = _2378.z;
    float _2383 = _2378.w;
    float _2476;
    float _2478;
    float _2480;
    float _2482;
    if (_364 > cbSceneParam._m0[78u].w)
    {
        float _2438 = isnan(_364) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _364 : min(cbSceneParam._m0[80u].w, _364));
        float _2439 = _2438 / _364;
        float _2450 = _2439 * _415;
        float _2451 = _416 * _2439;
        float _2452 = (-0.0) - _2451;
        float _2454 = _2439 * _417;
        float _2456 = (cbSceneParam._m0[77u].w * _2452) / _2438;
        float _2457 = _2456 + cbSceneParam._m0[79u].w;
        float _2458 = cbSceneParam._m0[79u].w - _2451;
        float _2464 = sqrt(((_2450 * _2450) + (_2451 * _2451)) + (_2454 * _2454));
        float _2467 = (1.0 - (cbSceneParam._m0[77u].w / _2438)) * _2464;
        float _2472 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2474 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2659;
        if (abs((_2452 - _2456) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2659 = ((((_2457 > 0.0) ? exp2(_2472 * _2457) : (2.0 - exp2(_2474 * _2457))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2467;
        }
        else
        {
            float _2603 = 1.0 / cbSceneParam._m0[80u].x;
            float _2604 = isnan(_2458) ? _2457 : (isnan(_2457) ? _2458 : max(_2457, _2458));
            float _2605 = isnan(_2458) ? _2457 : (isnan(_2457) ? _2458 : min(_2457, _2458));
            float _2614 = isnan(0.0) ? _2604 : (isnan(_2604) ? 0.0 : min(_2604, 0.0));
            float _2615 = isnan(0.0) ? _2605 : (isnan(_2605) ? 0.0 : min(_2605, 0.0));
            _2659 = ((abs(_2464 / _2452) * cbSceneParam._m0[80u].y) * ((((_2614 - _2615) * 2.0) - ((exp2(_2472 * (isnan(0.0) ? _2604 : (isnan(_2604) ? 0.0 : max(_2604, 0.0)))) - exp2(_2472 * (isnan(0.0) ? _2605 : (isnan(_2605) ? 0.0 : max(_2605, 0.0))))) * _2603)) - ((exp2(_2474 * _2614) - exp2(_2474 * _2615)) * _2603))) + (_2467 * cbSceneParam._m0[80u].z);
        }
        vec4 _2661 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2363, _2364, 1.0), 0.0);
        float _2670 = exp2((_2659 * (-1.44269502162933349609375)) * (1.0 - _2661.w));
        float _2671 = log2(_2670);
        float _2687 = log2(_2383);
        _2476 = (exp2(_2687 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2671 * cbSceneParam._m0[78u].x)) * _2661.x) / cbSceneParam._m0[78u].x)) + _2380;
        _2478 = (exp2(_2687 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2671 * cbSceneParam._m0[78u].y)) * _2661.y) / cbSceneParam._m0[78u].y)) + _2381;
        _2480 = (exp2(_2687 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2671 * cbSceneParam._m0[78u].z)) * _2661.z) / cbSceneParam._m0[78u].z)) + _2382;
        _2482 = _2670 * _2383;
    }
    else
    {
        _2476 = _2380;
        _2478 = _2381;
        _2480 = _2382;
        _2482 = _2383;
    }
    bool _2697;
    vec4 _2491;
    vec4 _2513;
    float _2515;
    float _2519;
    float _2520;
    float _2521;
    float _2524;
    float _2527;
    float _2530;
    float _2531;
    bool _2541;
    for (;;)
    {
        _2491 = cbMatDynParam._m0[0u];
        float _2493 = roundEven(_2491.y);
        bool _2494 = _2493 == 3.0;
        float _2495 = log2(_2482);
        float _2499 = exp2(_2495 * cbSceneParam._m0[78u].x);
        float _2500 = exp2(_2495 * cbSceneParam._m0[78u].y);
        float _2501 = exp2(_2495 * cbSceneParam._m0[78u].z);
        float _2502 = _2499 * _2342;
        float _2503 = _2500 * _2343;
        float _2504 = _2501 * _2344;
        float _2511 = _431 + (-0.5);
        _2513 = cbMtdParam._m0[1u];
        _2515 = _2513.y * _2511;
        float _2518 = (_2493 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2519 = _2518 * (_2494 ? _2502 : (_2502 + (cbSceneParam._m0[72u].w * _2476)));
        _2520 = _2518 * (_2494 ? _2503 : (_2503 + (cbSceneParam._m0[72u].w * _2478)));
        _2521 = _2518 * (_2494 ? _2504 : (_2504 + (cbSceneParam._m0[72u].w * _2480)));
        _2524 = ((_2350 * _2354) * _2499) * _2518;
        _2527 = ((_2351 * _2354) * _2500) * _2518;
        _2530 = ((_2352 * _2354) * _2501) * _2518;
        _2531 = _2511 * 0.999000012874603271484375;
        _2541 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2541)
        {
            if ((cbInstanceData._m0[_483 + 7u].x + _2531) < 0.5)
            {
                _2697 = true;
                break;
            }
        }
        uint _2638 = _484 + uint(_2491.w);
        if ((cbInstanceData._m0[_2638].w < 1.0) && ((cbInstanceData._m0[_2638].w + _2531) < 0.5))
        {
            _2697 = true;
            break;
        }
        if ((_2515 + 1.0) < _2513.x)
        {
            _2697 = true;
            break;
        }
        _2697 = false;
        break;
    }
    float _2902;
    if (_2697)
    {
        discard_state = true;
        _2902 = 0.0;
    }
    else
    {
        _2902 = cbInstanceData._m0[_2355].w;
    }
    SV_Target.x = _2519;
    SV_Target.y = _2520;
    SV_Target.z = _2521;
    SV_Target.w = _2902;
    SV_Target_1.x = _2524;
    SV_Target_1.y = _2527;
    SV_Target_1.z = _2530;
    SV_Target_1.w = cbInstanceData._m0[_2355].w;
    discard_exit();
}


