#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[13];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D P_BS_M1_Emissive_Glow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D P_BS_M1_Emissive_Glow_snp_0_Texture2D_1;
layout(set = 0, binding = 3) uniform texture2D P_BS_M1_Emissive_Glow_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _914;
float _3624;
float _3625;
float _3626;
float _3627;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _184 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _185 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _186 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _191 = inversesqrt(dot(vec3(_184, _185, _186), vec3(_184, _185, _186)));
    float _198 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _205 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _228 = texture(sampler2D(P_BS_M1_Emissive_Glow_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _234 = _228.x * cbMtdParam._m0[9u].x;
    float _235 = _228.y * cbMtdParam._m0[9u].y;
    float _236 = _228.z * cbMtdParam._m0[9u].z;
    vec4 _252 = texture(sampler2D(P_BS_M1_Emissive_Glow_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _256 = _252.z;
    float _260 = (_252.x * 2.0) + (-1.0);
    float _262 = (_252.y * 2.0) + (-1.0);
    float _263 = dot(vec2(_260, _262), vec2(_260, _262));
    float _3636 = isnan(0.0) ? _263 : (isnan(_263) ? 0.0 : max(_263, 0.0));
    float _269 = sqrt(1.0 - (isnan(1.0) ? _3636 : (isnan(_3636) ? 1.0 : min(_3636, 1.0))));
    vec4 _292 = texture(sampler2D(P_BS_M1_Emissive_Glow_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _317 = fma(_269, _198 * NORMAL.x, fma(_262, _205 * TANGENT.x, (_191 * _184) * _260));
    float _320 = fma(_269, _198 * NORMAL.y, fma(_262, _205 * TANGENT.y, (_191 * _185) * _260));
    float _323 = fma(_269, _198 * NORMAL.z, fma(_262, _205 * TANGENT.z, (_191 * _186) * _260));
    float _327 = inversesqrt(dot(vec3(_317, _320, _323), vec3(_317, _320, _323)));
    float _328 = _327 * _317;
    float _329 = _327 * _320;
    float _330 = _327 * _323;
    float _3647 = isnan(0.0) ? _256 : (isnan(_256) ? 0.0 : max(_256, 0.0));
    float _331 = isnan(1.0) ? _3647 : (isnan(_3647) ? 1.0 : min(_3647, 1.0));
    float _3658 = isnan(0.0) ? _234 : (isnan(_234) ? 0.0 : max(_234, 0.0));
    float _3669 = isnan(0.0) ? _235 : (isnan(_235) ? 0.0 : max(_235, 0.0));
    float _3680 = isnan(0.0) ? _236 : (isnan(_236) ? 0.0 : max(_236, 0.0));
    float _3691 = isnan(0.0) ? cbMtdParam._m0[12u].x : (isnan(cbMtdParam._m0[12u].x) ? 0.0 : max(cbMtdParam._m0[12u].x, 0.0));
    float _335 = isnan(1.0) ? _3691 : (isnan(_3691) ? 1.0 : min(_3691, 1.0));
    float _351 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _392 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _402 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _392);
    float _403 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _392);
    float _404 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _392);
    float _408 = inversesqrt(dot(vec3(_402, _403, _404), vec3(_402, _403, _404)));
    float _409 = _402 * _408;
    float _410 = _403 * _408;
    float _411 = _404 * _408;
    vec4 _416 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _418 = _416.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _593 = sqrt(((_402 * _402) + (_403 * _403)) + (_404 * _404));
        float _599 = (cbMatDynParam._m0[5u].x * _593) + cbMatDynParam._m0[5u].y;
        float _3702 = isnan(0.0) ? _599 : (isnan(_599) ? 0.0 : max(_599, 0.0));
        float _600 = isnan(1.0) ? _3702 : (isnan(_3702) ? 1.0 : min(_3702, 1.0));
        float _604 = (cbMatDynParam._m0[5u].z * _593) + cbMatDynParam._m0[5u].w;
        float _3713 = isnan(0.0) ? _604 : (isnan(_604) ? 0.0 : max(_604, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3713 : (isnan(_3713) ? 1.0 : min(_3713, 1.0))) - _600)) + _600) < ((_418 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _430 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _431 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _451 = fma(_330, cbSceneParam._m0[5u].z, fma(_329, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _328));
    float _454 = fma(_330, cbSceneParam._m0[6u].z, fma(_329, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _328));
    float _457 = fma(_330, cbSceneParam._m0[7u].z, fma(_329, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _328));
    uint _470 = uint(roundEven(NORMAL.w)) * 13u;
    uint _471 = _470 + 9u;
    uint _472 = _471 + uint(cbMatDynParam._m0[0u].w);
    float _478 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3658 : (isnan(_3658) ? 1.0 : min(_3658, 1.0)))) * cbInstanceData._m0[_472].x;
    float _479 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3669 : (isnan(_3669) ? 1.0 : min(_3669, 1.0)))) * cbInstanceData._m0[_472].y;
    float _480 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3680 : (isnan(_3680) ? 1.0 : min(_3680, 1.0)))) * cbInstanceData._m0[_472].z;
    float _3724 = isnan(0.0) ? _478 : (isnan(_478) ? 0.0 : max(_478, 0.0));
    float _481 = isnan(1.0) ? _3724 : (isnan(_3724) ? 1.0 : min(_3724, 1.0));
    float _3735 = isnan(0.0) ? _479 : (isnan(_479) ? 0.0 : max(_479, 0.0));
    float _482 = isnan(1.0) ? _3735 : (isnan(_3735) ? 1.0 : min(_3735, 1.0));
    float _3746 = isnan(0.0) ? _480 : (isnan(_480) ? 0.0 : max(_480, 0.0));
    float _483 = isnan(1.0) ? _3746 : (isnan(_3746) ? 1.0 : min(_3746, 1.0));
    float _484 = 1.0 - _335;
    float _485 = _481 * _484;
    float _486 = _482 * _484;
    float _487 = _483 * _484;
    float _492 = (_481 + (-0.039999999105930328369140625)) * _335;
    float _493 = (_482 + (-0.039999999105930328369140625)) * _335;
    float _494 = (_483 + (-0.039999999105930328369140625)) * _335;
    float _495 = _492 + 0.039999999105930328369140625;
    float _497 = _493 + 0.039999999105930328369140625;
    float _498 = _494 + 0.039999999105930328369140625;
    vec4 _507 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _430, cbSceneParam._m0[86u].y * _431));
    float _510 = _507.x * TEXCOORD.z;
    float _511 = dot(vec3(_328, _329, _330), vec3(_409, _410, _411));
    float _514 = _511 * 2.0;
    float _518 = (_514 * _328) - _409;
    float _519 = (_514 * _329) - _410;
    float _520 = (_514 * _330) - _411;
    float _524 = abs(dot(vec3(_409, _410, _411), vec3(_328, _329, _330)));
    float _3757 = isnan(0.0) ? _524 : (isnan(_524) ? 0.0 : max(_524, 0.0));
    float _526 = sqrt(_331);
    float _539 = exp2((_526 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3757 : (isnan(_3757) ? 1.0 : min(_3757, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_526 * 3.0));
    float _545 = (1.0 - _539) * ((_526 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _546 = _539 * _526;
    float _574 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _578 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _582 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _913;
    float _915;
    float _916;
    float _917;
    float _918;
    float _919;
    float _920;
    float _921;
    float _922;
    float _923;
    float _924;
    float _925;
    float _926;
    float _927;
    float _928;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _638 = fma(_582, cbModelParam._m0[26u].z, fma(_578, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _574));
        float _642 = fma(_582, cbModelParam._m0[27u].z, fma(_578, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _574));
        float _646 = fma(_582, cbModelParam._m0[28u].z, fma(_578, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _574));
        float _671 = _574 + _328;
        float _672 = _578 + _329;
        float _673 = _582 + _330;
        float _683 = fma(_673, cbModelParam._m0[26u].z, fma(_672, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _671)) - _638;
        float _684 = fma(_673, cbModelParam._m0[27u].z, fma(_672, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _671)) - _642;
        float _685 = fma(_673, cbModelParam._m0[28u].z, fma(_672, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _671)) - _646;
        float _689 = inversesqrt(dot(vec3(_683, _684, _685), vec3(_683, _684, _685)));
        float _702 = ((_689 * _683) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_638 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _703 = ((_689 * _684) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_642 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _704 = ((_689 * _685) / cbModelParam._m0[34u].z) + ((((((_646 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _707 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_702, _703, _704), 0.0);
        vec4 _714 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_702, _703, _704), 0.0);
        vec4 _721 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_702, _703, _704), 0.0);
        vec4 _728 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_702, _703, _704), 0.0);
        float _741 = exp2((_707.w + (-0.5)) * 20.0) * 2.0;
        float _742 = _741 * (_707.x + (-0.5));
        float _743 = _741 * (_707.y + (-0.5));
        float _744 = _741 * (_707.z + (-0.5));
        float _751 = exp2((_714.w + (-0.5)) * 20.0) * 2.0;
        float _752 = _751 * (_714.x + (-0.5));
        float _753 = _751 * (_714.y + (-0.5));
        float _754 = _751 * (_714.z + (-0.5));
        float _761 = exp2((_721.w + (-0.5)) * 20.0) * 2.0;
        float _762 = _761 * (_721.x + (-0.5));
        float _763 = _761 * (_721.y + (-0.5));
        float _764 = _761 * (_721.z + (-0.5));
        float _771 = exp2((_728.w + (-0.5)) * 20.0) * 2.0;
        float _772 = _771 * (_728.x + (-0.5));
        float _773 = _771 * (_728.y + (-0.5));
        float _774 = _771 * (_728.z + (-0.5));
        float _775 = isnan(0.0) ? _772 : (isnan(_772) ? 0.0 : max(_772, 0.0));
        float _776 = isnan(0.0) ? _773 : (isnan(_773) ? 0.0 : max(_773, 0.0));
        float _777 = isnan(0.0) ? _774 : (isnan(_774) ? 0.0 : max(_774, 0.0));
        float _778 = _742 * 0.5;
        float _779 = _752 * 0.5;
        float _780 = _762 * 0.5;
        float _781 = dot(vec3(_778, _779, _780), vec3(_778, _779, _780));
        float _786 = (_781 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_781);
        float _795 = (dot(vec3(_328, _329, _330), vec3(_786 * _778, _786 * _779, _786 * _780)) + 1.0) * 0.5;
        float _3783 = isnan(0.0) ? _795 : (isnan(_795) ? 0.0 : max(_795, 0.0));
        float _805 = sqrt(((_779 * _779) + (_778 * _778)) + (_780 * _780)) / (_775 + 9.9999997473787516355514526367188e-06);
        float _3794 = isnan(0.0) ? _805 : (isnan(_805) ? 0.0 : max(_805, 0.0));
        float _806 = isnan(1.0) ? _3794 : (isnan(_3794) ? 1.0 : min(_3794, 1.0));
        float _807 = _806 * 2.0;
        float _811 = (1.0 - _806) / (_806 + 1.0);
        float _3805 = isnan(0.0) ? _811 : (isnan(_811) ? 0.0 : max(_811, 0.0));
        float _812 = isnan(1.0) ? _3805 : (isnan(_3805) ? 1.0 : min(_3805, 1.0));
        float _821 = ((((1.0 - _812) * (_807 + 2.0)) * exp2(log2(isnan(1.0) ? _3783 : (isnan(_3783) ? 1.0 : min(_3783, 1.0))) * (_807 + 1.0))) + _812) * _775;
        float _822 = _743 * 0.5;
        float _823 = _753 * 0.5;
        float _824 = _763 * 0.5;
        float _825 = dot(vec3(_822, _823, _824), vec3(_822, _823, _824));
        float _830 = (_825 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_825);
        float _838 = (dot(vec3(_328, _329, _330), vec3(_830 * _822, _830 * _823, _830 * _824)) + 1.0) * 0.5;
        float _3816 = isnan(0.0) ? _838 : (isnan(_838) ? 0.0 : max(_838, 0.0));
        float _847 = sqrt(((_823 * _823) + (_822 * _822)) + (_824 * _824)) / (_776 + 9.9999997473787516355514526367188e-06);
        float _3827 = isnan(0.0) ? _847 : (isnan(_847) ? 0.0 : max(_847, 0.0));
        float _848 = isnan(1.0) ? _3827 : (isnan(_3827) ? 1.0 : min(_3827, 1.0));
        float _849 = _848 * 2.0;
        float _853 = (1.0 - _848) / (_848 + 1.0);
        float _3838 = isnan(0.0) ? _853 : (isnan(_853) ? 0.0 : max(_853, 0.0));
        float _854 = isnan(1.0) ? _3838 : (isnan(_3838) ? 1.0 : min(_3838, 1.0));
        float _863 = ((((1.0 - _854) * (_849 + 2.0)) * exp2(log2(isnan(1.0) ? _3816 : (isnan(_3816) ? 1.0 : min(_3816, 1.0))) * (_849 + 1.0))) + _854) * _776;
        float _864 = _744 * 0.5;
        float _865 = _754 * 0.5;
        float _866 = _764 * 0.5;
        float _867 = dot(vec3(_864, _865, _866), vec3(_864, _865, _866));
        float _872 = (_867 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_867);
        float _880 = (dot(vec3(_328, _329, _330), vec3(_872 * _864, _872 * _865, _872 * _866)) + 1.0) * 0.5;
        float _3849 = isnan(0.0) ? _880 : (isnan(_880) ? 0.0 : max(_880, 0.0));
        float _889 = sqrt(((_865 * _865) + (_864 * _864)) + (_866 * _866)) / (_777 + 9.9999997473787516355514526367188e-06);
        float _3860 = isnan(0.0) ? _889 : (isnan(_889) ? 0.0 : max(_889, 0.0));
        float _890 = isnan(1.0) ? _3860 : (isnan(_3860) ? 1.0 : min(_3860, 1.0));
        float _891 = _890 * 2.0;
        float _895 = (1.0 - _890) / (_890 + 1.0);
        float _3871 = isnan(0.0) ? _895 : (isnan(_895) ? 0.0 : max(_895, 0.0));
        float _896 = isnan(1.0) ? _3871 : (isnan(_3871) ? 1.0 : min(_3871, 1.0));
        float _905 = ((((1.0 - _896) * (_891 + 2.0)) * exp2(log2(isnan(1.0) ? _3849 : (isnan(_3849) ? 1.0 : min(_3849, 1.0))) * (_891 + 1.0))) + _896) * _777;
        _913 = _744;
        _915 = _743;
        _916 = _742;
        _917 = _754;
        _918 = _753;
        _919 = _752;
        _920 = _764;
        _921 = _763;
        _922 = _762;
        _923 = _777;
        _924 = _776;
        _925 = _775;
        _926 = cbModelParam._m0[36u].z * (isnan(0.0) ? _821 : (isnan(_821) ? 0.0 : max(_821, 0.0)));
        _927 = cbModelParam._m0[36u].z * (isnan(0.0) ? _863 : (isnan(_863) ? 0.0 : max(_863, 0.0)));
        _928 = cbModelParam._m0[36u].z * (isnan(0.0) ? _905 : (isnan(_905) ? 0.0 : max(_905, 0.0)));
    }
    else
    {
        _913 = _914;
        _915 = _914;
        _916 = _914;
        _917 = _914;
        _918 = _914;
        _919 = _914;
        _920 = _914;
        _921 = _914;
        _922 = _914;
        _923 = _914;
        _924 = _914;
        _925 = _914;
        _926 = 0.0;
        _927 = 0.0;
        _928 = 0.0;
    }
    float _1226;
    float _1227;
    float _1228;
    float _1229;
    float _1230;
    float _1231;
    float _1232;
    float _1233;
    float _1234;
    float _1235;
    float _1236;
    float _1237;
    float _1238;
    float _1239;
    float _1240;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _957 = fma(_582, cbModelParam._m0[30u].z, fma(_578, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _574));
        float _961 = fma(_582, cbModelParam._m0[31u].z, fma(_578, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _574));
        float _965 = fma(_582, cbModelParam._m0[32u].z, fma(_578, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _574));
        float _988 = _574 + _328;
        float _989 = _578 + _329;
        float _990 = _582 + _330;
        float _1000 = fma(_990, cbModelParam._m0[30u].z, fma(_989, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _988)) - _957;
        float _1001 = fma(_990, cbModelParam._m0[31u].z, fma(_989, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _988)) - _961;
        float _1002 = fma(_990, cbModelParam._m0[32u].z, fma(_989, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _988)) - _965;
        float _1006 = inversesqrt(dot(vec3(_1000, _1001, _1002), vec3(_1000, _1001, _1002)));
        float _1019 = ((_1006 * _1000) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_957 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1020 = ((_1006 * _1001) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_961 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1021 = ((_1006 * _1002) / cbModelParam._m0[35u].z) + ((((((_965 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1023 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1019, _1020, _1021), 0.0);
        vec4 _1030 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1019, _1020, _1021), 0.0);
        vec4 _1037 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1019, _1020, _1021), 0.0);
        vec4 _1044 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1019, _1020, _1021), 0.0);
        float _1056 = exp2((_1023.w + (-0.5)) * 20.0) * 2.0;
        float _1057 = _1056 * (_1023.x + (-0.5));
        float _1058 = _1056 * (_1023.y + (-0.5));
        float _1059 = _1056 * (_1023.z + (-0.5));
        float _1066 = exp2((_1030.w + (-0.5)) * 20.0) * 2.0;
        float _1067 = _1066 * (_1030.x + (-0.5));
        float _1068 = _1066 * (_1030.y + (-0.5));
        float _1069 = _1066 * (_1030.z + (-0.5));
        float _1076 = exp2((_1037.w + (-0.5)) * 20.0) * 2.0;
        float _1077 = _1076 * (_1037.x + (-0.5));
        float _1078 = _1076 * (_1037.y + (-0.5));
        float _1079 = _1076 * (_1037.z + (-0.5));
        float _1086 = exp2((_1044.w + (-0.5)) * 20.0) * 2.0;
        float _1087 = _1086 * (_1044.x + (-0.5));
        float _1088 = _1086 * (_1044.y + (-0.5));
        float _1089 = _1086 * (_1044.z + (-0.5));
        float _1090 = isnan(0.0) ? _1087 : (isnan(_1087) ? 0.0 : max(_1087, 0.0));
        float _1091 = isnan(0.0) ? _1088 : (isnan(_1088) ? 0.0 : max(_1088, 0.0));
        float _1092 = isnan(0.0) ? _1089 : (isnan(_1089) ? 0.0 : max(_1089, 0.0));
        float _1093 = _1057 * 0.5;
        float _1094 = _1067 * 0.5;
        float _1095 = _1077 * 0.5;
        float _1096 = dot(vec3(_1093, _1094, _1095), vec3(_1093, _1094, _1095));
        float _1101 = (_1096 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1096);
        float _1109 = (dot(vec3(_328, _329, _330), vec3(_1101 * _1093, _1101 * _1094, _1101 * _1095)) + 1.0) * 0.5;
        float _3912 = isnan(0.0) ? _1109 : (isnan(_1109) ? 0.0 : max(_1109, 0.0));
        float _1118 = sqrt(((_1094 * _1094) + (_1093 * _1093)) + (_1095 * _1095)) / (_1090 + 9.9999997473787516355514526367188e-06);
        float _3923 = isnan(0.0) ? _1118 : (isnan(_1118) ? 0.0 : max(_1118, 0.0));
        float _1119 = isnan(1.0) ? _3923 : (isnan(_3923) ? 1.0 : min(_3923, 1.0));
        float _1120 = _1119 * 2.0;
        float _1124 = (1.0 - _1119) / (_1119 + 1.0);
        float _3934 = isnan(0.0) ? _1124 : (isnan(_1124) ? 0.0 : max(_1124, 0.0));
        float _1125 = isnan(1.0) ? _3934 : (isnan(_3934) ? 1.0 : min(_3934, 1.0));
        float _1134 = ((((1.0 - _1125) * (_1120 + 2.0)) * exp2(log2(isnan(1.0) ? _3912 : (isnan(_3912) ? 1.0 : min(_3912, 1.0))) * (_1120 + 1.0))) + _1125) * _1090;
        float _1135 = _1058 * 0.5;
        float _1136 = _1068 * 0.5;
        float _1137 = _1078 * 0.5;
        float _1138 = dot(vec3(_1135, _1136, _1137), vec3(_1135, _1136, _1137));
        float _1143 = (_1138 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1138);
        float _1151 = (dot(vec3(_328, _329, _330), vec3(_1143 * _1135, _1143 * _1136, _1143 * _1137)) + 1.0) * 0.5;
        float _3945 = isnan(0.0) ? _1151 : (isnan(_1151) ? 0.0 : max(_1151, 0.0));
        float _1160 = sqrt(((_1136 * _1136) + (_1135 * _1135)) + (_1137 * _1137)) / (_1091 + 9.9999997473787516355514526367188e-06);
        float _3956 = isnan(0.0) ? _1160 : (isnan(_1160) ? 0.0 : max(_1160, 0.0));
        float _1161 = isnan(1.0) ? _3956 : (isnan(_3956) ? 1.0 : min(_3956, 1.0));
        float _1162 = _1161 * 2.0;
        float _1166 = (1.0 - _1161) / (_1161 + 1.0);
        float _3967 = isnan(0.0) ? _1166 : (isnan(_1166) ? 0.0 : max(_1166, 0.0));
        float _1167 = isnan(1.0) ? _3967 : (isnan(_3967) ? 1.0 : min(_3967, 1.0));
        float _1176 = ((((1.0 - _1167) * (_1162 + 2.0)) * exp2(log2(isnan(1.0) ? _3945 : (isnan(_3945) ? 1.0 : min(_3945, 1.0))) * (_1162 + 1.0))) + _1167) * _1091;
        float _1177 = _1059 * 0.5;
        float _1178 = _1069 * 0.5;
        float _1179 = _1079 * 0.5;
        float _1180 = dot(vec3(_1177, _1178, _1179), vec3(_1177, _1178, _1179));
        float _1185 = (_1180 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1180);
        float _1193 = (dot(vec3(_328, _329, _330), vec3(_1185 * _1177, _1185 * _1178, _1185 * _1179)) + 1.0) * 0.5;
        float _3978 = isnan(0.0) ? _1193 : (isnan(_1193) ? 0.0 : max(_1193, 0.0));
        float _1202 = sqrt(((_1178 * _1178) + (_1177 * _1177)) + (_1179 * _1179)) / (_1092 + 9.9999997473787516355514526367188e-06);
        float _3989 = isnan(0.0) ? _1202 : (isnan(_1202) ? 0.0 : max(_1202, 0.0));
        float _1203 = isnan(1.0) ? _3989 : (isnan(_3989) ? 1.0 : min(_3989, 1.0));
        float _1204 = _1203 * 2.0;
        float _1208 = (1.0 - _1203) / (_1203 + 1.0);
        float _4000 = isnan(0.0) ? _1208 : (isnan(_1208) ? 0.0 : max(_1208, 0.0));
        float _1209 = isnan(1.0) ? _4000 : (isnan(_4000) ? 1.0 : min(_4000, 1.0));
        float _1218 = ((((1.0 - _1209) * (_1204 + 2.0)) * exp2(log2(isnan(1.0) ? _3978 : (isnan(_3978) ? 1.0 : min(_3978, 1.0))) * (_1204 + 1.0))) + _1209) * _1092;
        _1226 = _1059;
        _1227 = _1058;
        _1228 = _1057;
        _1229 = _1069;
        _1230 = _1068;
        _1231 = _1067;
        _1232 = _1079;
        _1233 = _1078;
        _1234 = _1077;
        _1235 = _1092;
        _1236 = _1091;
        _1237 = _1090;
        _1238 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1134 : (isnan(_1134) ? 0.0 : max(_1134, 0.0)));
        _1239 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1176 : (isnan(_1176) ? 0.0 : max(_1176, 0.0)));
        _1240 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1218 : (isnan(_1218) ? 0.0 : max(_1218, 0.0)));
    }
    else
    {
        _1226 = _914;
        _1227 = _914;
        _1228 = _914;
        _1229 = _914;
        _1230 = _914;
        _1231 = _914;
        _1232 = _914;
        _1233 = _914;
        _1234 = _914;
        _1235 = _914;
        _1236 = _914;
        _1237 = _914;
        _1238 = 0.0;
        _1239 = 0.0;
        _1240 = 0.0;
    }
    float _1250 = (cbModelParam._m0[1u].x * (_1238 - _926)) + _926;
    float _1251 = (cbModelParam._m0[1u].x * (_1239 - _927)) + _927;
    float _1252 = (cbModelParam._m0[1u].x * (_1240 - _928)) + _928;
    float _1273 = fma(_1252, cbSceneParam._m0[89u].z, fma(_1251, cbSceneParam._m0[89u].y, _1250 * cbSceneParam._m0[89u].x));
    float _1276 = fma(_1252, cbSceneParam._m0[90u].z, fma(_1251, cbSceneParam._m0[90u].y, _1250 * cbSceneParam._m0[90u].x));
    float _1279 = fma(_1252, cbSceneParam._m0[91u].z, fma(_1251, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1250));
    float _1294 = _518 * 0.5;
    float _1295 = _519 * 0.5;
    float _1296 = _520 * 0.5;
    float _1297 = dot(vec4(_1294, _1295, _1296, 1.0), vec4(_1228, _1231, _1234, _1237));
    float _1300 = dot(vec4(_1294, _1295, _1296, 1.0), vec4(_1227, _1230, _1233, _1236));
    float _1303 = dot(vec4(_1294, _1295, _1296, 1.0), vec4(_1226, _1229, _1232, _1235));
    float _1337;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1310 = dot(vec4(_1294, _1295, _1296, 1.0), vec4(_913, _917, _920, _923));
        float _1314 = dot(vec4(_1294, _1295, _1296, 1.0), vec4(_915, _918, _921, _924));
        float _1318 = dot(vec4(_1294, _1295, _1296, 1.0), vec4(_916, _919, _922, _925));
        float _1325 = dot(vec4(cbModelParam._m0[39u]), vec4(_1294, _1295, _1296, 1.0));
        _1337 = dot(vec3(isnan(0.0) ? _1318 : (isnan(_1318) ? 0.0 : max(_1318, 0.0)), isnan(0.0) ? _1314 : (isnan(_1314) ? 0.0 : max(_1314, 0.0)), isnan(0.0) ? _1310 : (isnan(_1310) ? 0.0 : max(_1310, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1325) ? 0.0 : (isnan(0.0) ? _1325 : max(0.0, _1325))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1337 = 1.0;
    }
    float _1348;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1339 = dot(vec4(cbModelParam._m0[40u]), vec4(_1294, _1295, _1296, 1.0));
        _1348 = dot(vec3(isnan(0.0) ? _1297 : (isnan(_1297) ? 0.0 : max(_1297, 0.0)), isnan(0.0) ? _1300 : (isnan(_1300) ? 0.0 : max(_1300, 0.0)), isnan(0.0) ? _1303 : (isnan(_1303) ? 0.0 : max(_1303, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1339) ? 0.0 : (isnan(0.0) ? _1339 : max(0.0, _1339))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1348 = 1.0;
    }
    float _1352 = (_1348 * cbModelParam._m0[1u].x) + (_1337 * (1.0 - cbModelParam._m0[1u].x));
    float _1362 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _331);
    float _1363 = isnan(_1362) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1362 : min(cbModelParam._m0[25u].z, _1362));
    float _1445;
    float _1447;
    float _1449;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1412 = fma(_582, cbModelParam._m0[13u].z, fma(_578, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _574)) + cbModelParam._m0[13u].w;
        float _1416 = fma(_582, cbModelParam._m0[14u].z, fma(_578, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _574)) + cbModelParam._m0[14u].w;
        float _1420 = fma(_582, cbModelParam._m0[15u].z, fma(_578, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _574)) + cbModelParam._m0[15u].w;
        float _1423 = fma(_520, cbModelParam._m0[13u].z, fma(_519, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _518));
        float _1426 = fma(_520, cbModelParam._m0[14u].z, fma(_519, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _518));
        float _1429 = fma(_520, cbModelParam._m0[15u].z, fma(_519, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _518));
        float _1457;
        if (_1423 > 0.0)
        {
            _1457 = abs((1.0 - _1412) / _1423);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1423 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1412 + 1.0) / _1423);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1457 = frontier_phi_17_15_ladder;
        }
        float _1632;
        if (_1426 > 0.0)
        {
            _1632 = abs((1.0 - _1416) / _1426);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1426 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1416 + 1.0) / _1426);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1632 = frontier_phi_26_22_ladder;
        }
        float _1928;
        if (_1429 > 0.0)
        {
            _1928 = abs((1.0 - _1420) / _1429);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1429 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1420 + 1.0) / _1429);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _1928 = frontier_phi_38_33_ladder;
        }
        float _1930 = isnan(_1632) ? _1457 : (isnan(_1457) ? _1632 : min(_1457, _1632));
        float _1931 = isnan(_1928) ? _1930 : (isnan(_1930) ? _1928 : min(_1930, _1928));
        float _1935 = (_1931 * _1423) + _1412;
        float _1936 = (_1931 * _1426) + _1416;
        float _1937 = (_1931 * _1429) + _1420;
        float _1938 = _1931 * 9.9999997473787516355514526367188e-05;
        float _1940 = (-1.0) - _1938;
        float _1942 = _1938 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_1937 > _1942) || ((_1937 < _1940) || ((_1936 > _1942) || ((_1936 < _1940) || ((_1935 < _1940) || (_1935 > _1942))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2082 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1937, cbModelParam._m0[9u].z, fma(_1936, cbModelParam._m0[9u].y, _1935 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1937, cbModelParam._m0[10u].z, fma(_1936, cbModelParam._m0[10u].y, _1935 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1937, cbModelParam._m0[11u].z, fma(_1936, cbModelParam._m0[11u].y, _1935 * cbModelParam._m0[11u].x))), _1363);
            frontier_phi_16_38_ladder = _2082.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2082.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2082.x * cbModelParam._m0[1u].y;
        }
        _1445 = frontier_phi_16_38_ladder_2;
        _1447 = frontier_phi_16_38_ladder_1;
        _1449 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1433 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_518, _519, _520), _1363);
        _1445 = _1433.x * cbModelParam._m0[1u].y;
        _1447 = _1433.y * cbModelParam._m0[1u].y;
        _1449 = _1433.z * cbModelParam._m0[1u].y;
    }
    float _1453 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _331);
    float _1454 = isnan(_1453) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1453 : min(cbModelParam._m0[25u].w, _1453));
    float _1547;
    float _1549;
    float _1551;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1511 = fma(_582, cbModelParam._m0[21u].z, fma(_578, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _574)) + cbModelParam._m0[21u].w;
        float _1515 = fma(_582, cbModelParam._m0[22u].z, fma(_578, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _574)) + cbModelParam._m0[22u].w;
        float _1519 = fma(_582, cbModelParam._m0[23u].z, fma(_578, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _574)) + cbModelParam._m0[23u].w;
        float _1522 = fma(_520, cbModelParam._m0[21u].z, fma(_519, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _518));
        float _1525 = fma(_520, cbModelParam._m0[22u].z, fma(_519, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _518));
        float _1528 = fma(_520, cbModelParam._m0[23u].z, fma(_519, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _518));
        float _1637;
        if (_1522 > 0.0)
        {
            _1637 = abs((1.0 - _1511) / _1522);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1522 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1511 + 1.0) / _1522);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1637 = frontier_phi_28_24_ladder;
        }
        float _1955;
        if (_1525 > 0.0)
        {
            _1955 = abs((1.0 - _1515) / _1525);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1525 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1515 + 1.0) / _1525);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1955 = frontier_phi_40_35_ladder;
        }
        float _2293;
        if (_1528 > 0.0)
        {
            _2293 = abs((1.0 - _1519) / _1528);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1528 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1519 + 1.0) / _1528);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2293 = frontier_phi_50_47_ladder;
        }
        float _2295 = isnan(_1955) ? _1637 : (isnan(_1637) ? _1955 : min(_1637, _1955));
        float _2296 = isnan(_2293) ? _2295 : (isnan(_2295) ? _2293 : min(_2295, _2293));
        float _2300 = (_2296 * _1522) + _1511;
        float _2301 = (_2296 * _1525) + _1515;
        float _2302 = (_2296 * _1528) + _1519;
        float _2303 = _2296 * 9.9999997473787516355514526367188e-05;
        float _2304 = (-1.0) - _2303;
        float _2306 = _2303 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2302 > _2306) || ((_2302 < _2304) || ((_2301 > _2306) || ((_2301 < _2304) || ((_2300 < _2304) || (_2300 > _2306))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2424 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2302, cbModelParam._m0[17u].z, fma(_2301, cbModelParam._m0[17u].y, _2300 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2302, cbModelParam._m0[18u].z, fma(_2301, cbModelParam._m0[18u].y, _2300 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2302, cbModelParam._m0[19u].z, fma(_2301, cbModelParam._m0[19u].y, _2300 * cbModelParam._m0[19u].x))), _1454);
            frontier_phi_25_50_ladder = _2424.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2424.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2424.x * cbModelParam._m0[1u].z;
        }
        _1547 = frontier_phi_25_50_ladder_2;
        _1549 = frontier_phi_25_50_ladder_1;
        _1551 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1531 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_518, _519, _520), _1454);
        _1547 = _1531.x * cbModelParam._m0[1u].z;
        _1549 = _1531.y * cbModelParam._m0[1u].z;
        _1551 = _1531.z * cbModelParam._m0[1u].z;
    }
    float _1564 = (((_545 * _495) + _546) * _510) * ((cbModelParam._m0[1u].w * (_1547 - _1445)) + _1445);
    float _1566 = (((_545 * _497) + _546) * _510) * ((cbModelParam._m0[1u].w * (_1549 - _1447)) + _1447);
    float _1568 = (((_545 * _498) + _546) * _510) * ((cbModelParam._m0[1u].w * (_1551 - _1449)) + _1449);
    float _1571 = fma(_1568, cbSceneParam._m0[89u].z, fma(_1566, cbSceneParam._m0[89u].y, _1564 * cbSceneParam._m0[89u].x));
    float _1574 = fma(_1568, cbSceneParam._m0[90u].z, fma(_1566, cbSceneParam._m0[90u].y, _1564 * cbSceneParam._m0[90u].x));
    float _1577 = fma(_1568, cbSceneParam._m0[91u].z, fma(_1566, cbSceneParam._m0[91u].y, _1564 * cbSceneParam._m0[91u].x));
    float _1611 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1615 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1619 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1623 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1624 = _1611 / _1623;
    float _1625 = _1615 / _1623;
    float _1626 = _1619 / _1623;
    float _1773;
    float _1774;
    float _1775;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1653 = ((uint(_1626 > cbSceneParam._m0[59u].y) + uint(_1626 > cbSceneParam._m0[59u].x)) + uint(_1626 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1654 = _1653 + 43u;
        uint _1662 = _1653 + 44u;
        uint _1670 = _1653 + 45u;
        uint _1678 = _1653 + 46u;
        float _1689 = fma(_1623, cbSceneParam._m0[_1654].w, fma(_1619, cbSceneParam._m0[_1654].z, fma(_1615, cbSceneParam._m0[_1654].y, _1611 * cbSceneParam._m0[_1654].x)));
        float _1693 = fma(_1623, cbSceneParam._m0[_1662].w, fma(_1619, cbSceneParam._m0[_1662].z, fma(_1615, cbSceneParam._m0[_1662].y, _1611 * cbSceneParam._m0[_1662].x)));
        float _1701 = fma(_1623, cbSceneParam._m0[_1678].w, fma(_1619, cbSceneParam._m0[_1678].z, fma(_1615, cbSceneParam._m0[_1678].y, _1611 * cbSceneParam._m0[_1678].x)));
        float _1706 = cbSceneParam._m0[33u].z * _1701;
        float _1708 = cbSceneParam._m0[33u].w * _1701;
        float _1711 = fma(_1623, cbSceneParam._m0[_1670].w, fma(_1619, cbSceneParam._m0[_1670].z, fma(_1615, cbSceneParam._m0[_1670].y, _1611 * cbSceneParam._m0[_1670].x))) / _1701;
        float _1759 = (cbSceneParam._m0[33u].x - sqrt(((_1625 * _1625) + (_1624 * _1624)) + (_1626 * _1626))) * cbSceneParam._m0[33u].y;
        float _4126 = isnan(0.0) ? _1759 : (isnan(_1759) ? 0.0 : max(_1759, 0.0));
        float _1766 = (isnan(1.0) ? _4126 : (isnan(_4126) ? 1.0 : min(_4126, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1706 + _1689) / _1701, (_1708 + _1693) / _1701), _1711), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1708 + _1689) / _1701, (_1693 - _1706) / _1701), _1711), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1689 - _1706) / _1701, (_1693 - _1708) / _1701), _1711), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1689 - _1708) / _1701, (_1706 + _1693) / _1701), _1711), 0.0)).x), vec4(0.25)));
        _1773 = 1.0 - (_1766 * cbSceneParam._m0[34u].x);
        _1774 = 1.0 - (_1766 * cbSceneParam._m0[34u].y);
        _1775 = 1.0 - (_1766 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1773 = 1.0;
        _1774 = 1.0;
        _1775 = 1.0;
    }
    float _1839;
    float _1841;
    float _1843;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1827 = fma(_1623, cbSceneParam._m0[63u].w, fma(_1619, cbSceneParam._m0[63u].z, fma(_1615, cbSceneParam._m0[63u].y, _1611 * cbSceneParam._m0[63u].x)));
        float _1828 = fma(_1623, cbSceneParam._m0[60u].w, fma(_1619, cbSceneParam._m0[60u].z, fma(_1615, cbSceneParam._m0[60u].y, _1611 * cbSceneParam._m0[60u].x))) / _1827;
        float _1829 = fma(_1623, cbSceneParam._m0[61u].w, fma(_1619, cbSceneParam._m0[61u].z, fma(_1615, cbSceneParam._m0[61u].y, _1611 * cbSceneParam._m0[61u].x))) / _1827;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_1828 >= cbSceneParam._m0[64u].x) && (_1829 >= cbSceneParam._m0[64u].y)) && (_1828 <= cbSceneParam._m0[64u].z)) && (_1829 <= cbSceneParam._m0[64u].w))
        {
            float _1968 = fma(_1623, cbSceneParam._m0[62u].w, fma(_1619, cbSceneParam._m0[62u].z, fma(_1615, cbSceneParam._m0[62u].y, _1611 * cbSceneParam._m0[62u].x))) / _1827;
            float _1972 = isnan(cbSceneParam._m0[41u].w) ? _1968 : (isnan(_1968) ? cbSceneParam._m0[41u].w : max(_1968, cbSceneParam._m0[41u].w));
            float _2015 = (cbSceneParam._m0[33u].x - sqrt(((_1625 * _1625) + (_1624 * _1624)) + (_1626 * _1626))) * cbSceneParam._m0[33u].y;
            float _4142 = isnan(0.0) ? _2015 : (isnan(_2015) ? 0.0 : max(_2015, 0.0));
            float _2022 = (isnan(1.0) ? _4142 : (isnan(_4142) ? 1.0 : min(_4142, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1828, cbSceneParam._m0[33u].w + _1829), _1972), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1828, _1829 - cbSceneParam._m0[33u].z), _1972), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1828 - cbSceneParam._m0[33u].z, _1829 - cbSceneParam._m0[33u].w), _1972), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1828 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1829), _1972), 0.0)).x), vec4(0.25)));
            float _2026 = 1.0 - (_2022 * cbSceneParam._m0[34u].x);
            float _2027 = 1.0 - (_2022 * cbSceneParam._m0[34u].y);
            float _2028 = 1.0 - (_2022 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2028) ? _1775 : (isnan(_1775) ? _2028 : min(_1775, _2028));
            frontier_phi_37_36_ladder_1 = isnan(_2027) ? _1774 : (isnan(_1774) ? _2027 : min(_1774, _2027));
            frontier_phi_37_36_ladder_2 = isnan(_2026) ? _1773 : (isnan(_1773) ? _2026 : min(_1773, _2026));
        }
        else
        {
            frontier_phi_37_36_ladder = _1775;
            frontier_phi_37_36_ladder_1 = _1774;
            frontier_phi_37_36_ladder_2 = _1773;
        }
        _1839 = frontier_phi_37_36_ladder_2;
        _1841 = frontier_phi_37_36_ladder_1;
        _1843 = frontier_phi_37_36_ladder;
    }
    else
    {
        _1839 = _1773;
        _1841 = _1774;
        _1843 = _1775;
    }
    uvec4 _1848 = floatBitsToUint(cbInstanceData._m0[_470 + 5u]);
    uint _1850 = _1848.x * 14u;
    uint _1851 = _1850 + 13u;
    float _1858 = _510 + (-1.0);
    float _1863 = (cbLight._m0[_1851].x * _1858) + 1.0;
    float _1864 = (cbLight._m0[_1851].y * _1858) + 1.0;
    float _1865 = (cbLight._m0[_1851].z * _1858) + 1.0;
    float _1866 = (cbLight._m0[_1851].w * _1858) + 1.0;
    uint _1867 = _1850 + 5u;
    float _1873 = isnan(1.0) ? _1864 : (isnan(_1864) ? 1.0 : min(_1864, 1.0));
    uint _1877 = _1850 + 4u;
    float _1887 = isnan(1.0) ? _1863 : (isnan(_1863) ? 1.0 : min(_1863, 1.0));
    uint _1891 = _1850 | 1u;
    float _1902 = dot(vec3(cbLight._m0[_1850].xyz), vec3(_328, _329, _330));
    float _1905 = dot(vec3(cbLight._m0[_1891].xyz), vec3(_328, _329, _330));
    float _4178 = isnan(0.0) ? _1902 : (isnan(_1902) ? 0.0 : max(_1902, 0.0));
    float _4189 = isnan(0.0) ? _1905 : (isnan(_1905) ? 0.0 : max(_1905, 0.0));
    float _1910 = (isnan(1.0) ? _4178 : (isnan(_4178) ? 1.0 : min(_4178, 1.0))) * 0.3183098733425140380859375;
    float _1912 = (isnan(1.0) ? _4189 : (isnan(_4189) ? 1.0 : min(_4189, 1.0))) * 0.3183098733425140380859375;
    float _1919 = ((cbLight._m0[_1867].x * _1873) * _1912) + (((cbLight._m0[_1877].x * _1839) * _1887) * _1910);
    float _1920 = ((_1873 * cbLight._m0[_1867].y) * _1912) + (((cbLight._m0[_1877].y * _1841) * _1887) * _1910);
    float _1921 = ((_1873 * cbLight._m0[_1867].z) * _1912) + (((cbLight._m0[_1877].z * _1843) * _1887) * _1910);
    uvec4 _1925 = floatBitsToUint(cbLight._m0[_1850 + 12u]);
    bool _1927 = _1925.x == 0u;
    float _2029;
    float _2031;
    float _2033;
    if (_1927)
    {
        _2029 = _1919;
        _2031 = _1920;
        _2033 = _1921;
    }
    else
    {
        uint _2037 = _1850 + 6u;
        float _2053 = (dot(vec3(cbLight._m0[_1850 + 2u].xyz), vec3(_328, _329, _330)) * 0.5) + 0.5;
        float _2054 = _2053 * _2053;
        float _4200 = isnan(0.0) ? _2054 : (isnan(_2054) ? 0.0 : max(_2054, 0.0));
        float _2055 = isnan(1.0) ? _4200 : (isnan(_4200) ? 1.0 : min(_4200, 1.0));
        float _2056 = isnan(1.0) ? _1865 : (isnan(_1865) ? 1.0 : min(_1865, 1.0));
        _2029 = (((cbLight._m0[_2037].x * 0.3183098733425140380859375) * _2055) * _2056) + _1919;
        _2031 = (((cbLight._m0[_2037].y * 0.3183098733425140380859375) * _2055) * _2056) + _1920;
        _2033 = (((cbLight._m0[_2037].z * 0.3183098733425140380859375) * _2055) * _2056) + _1921;
    }
    bool _2036 = _1925.y == 0u;
    float _2091;
    float _2093;
    float _2095;
    if (_2036)
    {
        _2091 = _2029;
        _2093 = _2031;
        _2095 = _2033;
    }
    else
    {
        uint _2264 = _1850 + 7u;
        float _2280 = (dot(vec3(cbLight._m0[_1850 + 3u].xyz), vec3(_328, _329, _330)) * 0.5) + 0.5;
        float _2281 = _2280 * _2280;
        float _4216 = isnan(0.0) ? _2281 : (isnan(_2281) ? 0.0 : max(_2281, 0.0));
        float _2282 = isnan(1.0) ? _4216 : (isnan(_4216) ? 1.0 : min(_4216, 1.0));
        float _2283 = isnan(1.0) ? _1866 : (isnan(_1866) ? 1.0 : min(_1866, 1.0));
        _2091 = (((cbLight._m0[_2264].x * 0.3183098733425140380859375) * _2282) * _2283) + _2029;
        _2093 = (((cbLight._m0[_2264].y * 0.3183098733425140380859375) * _2282) * _2283) + _2031;
        _2095 = (((cbLight._m0[_2264].z * 0.3183098733425140380859375) * _2282) * _2283) + _2033;
    }
    uint _2098 = _1850 + 8u;
    float _2111 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1850].w)) * _331) * 0.949999988079071044921875);
    float _2112 = _2111 * _2111;
    float _2113 = cbLight._m0[_1850].x + _409;
    float _2114 = cbLight._m0[_1850].y + _410;
    float _2115 = cbLight._m0[_1850].z + _411;
    float _2119 = inversesqrt(dot(vec3(_2113, _2114, _2115), vec3(_2113, _2114, _2115)));
    float _2120 = _2119 * _2113;
    float _2121 = _2119 * _2114;
    float _2122 = _2119 * _2115;
    float _2123 = dot(vec3(_328, _329, _330), vec3(cbLight._m0[_1850].xyz));
    float _4232 = isnan(0.0) ? _2123 : (isnan(_2123) ? 0.0 : max(_2123, 0.0));
    float _2126 = isnan(1.0) ? _4232 : (isnan(_4232) ? 1.0 : min(_4232, 1.0));
    float _4243 = isnan(0.0) ? _511 : (isnan(_511) ? 0.0 : max(_511, 0.0));
    float _2127 = isnan(1.0) ? _4243 : (isnan(_4243) ? 1.0 : min(_4243, 1.0));
    float _2128 = dot(vec3(_328, _329, _330), vec3(_2120, _2121, _2122));
    float _4254 = isnan(0.0) ? _2128 : (isnan(_2128) ? 0.0 : max(_2128, 0.0));
    float _2131 = isnan(1.0) ? _4254 : (isnan(_4254) ? 1.0 : min(_4254, 1.0));
    float _2132 = dot(vec3(cbLight._m0[_1850].xyz), vec3(_2120, _2121, _2122));
    float _4265 = isnan(0.0) ? _2132 : (isnan(_2132) ? 0.0 : max(_2132, 0.0));
    float _2136 = _2112 * _2112;
    float _2140 = ((_2131 * _2131) * (_2136 + (-1.0))) + 1.0;
    float _2148 = exp2(log2(1.0 - (isnan(1.0) ? _4265 : (isnan(_4265) ? 1.0 : min(_4265, 1.0)))) * 5.0);
    float _2149 = 0.959999978542327880859375 - _492;
    float _2151 = 0.959999978542327880859375 - _493;
    float _2152 = 0.959999978542327880859375 - _494;
    float _2159 = 1.0 - _2112;
    float _2170 = (0.5 / (((_2127 * ((_2126 * _2159) + _2112)) + 9.9999999392252902907785028219223e-09) + (((_2127 * _2159) + _2112) * _2126))) * _2126;
    float _4276 = isnan(0.0) ? _2170 : (isnan(_2170) ? 0.0 : max(_2170, 0.0));
    float _2172 = (isnan(1.0) ? _4276 : (isnan(_4276) ? 1.0 : min(_4276, 1.0))) * (_2136 / ((_2140 * _2140) * 3.141590118408203125));
    uint _2186 = _1850 + 9u;
    float _2197 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1891].w)) * _331) * 0.949999988079071044921875);
    float _2198 = _2197 * _2197;
    float _2199 = cbLight._m0[_1891].x + _409;
    float _2200 = cbLight._m0[_1891].y + _410;
    float _2201 = cbLight._m0[_1891].z + _411;
    float _2205 = inversesqrt(dot(vec3(_2199, _2200, _2201), vec3(_2199, _2200, _2201)));
    float _2206 = _2205 * _2199;
    float _2207 = _2205 * _2200;
    float _2208 = _2205 * _2201;
    float _2209 = dot(vec3(_328, _329, _330), vec3(cbLight._m0[_1891].xyz));
    float _4287 = isnan(0.0) ? _2209 : (isnan(_2209) ? 0.0 : max(_2209, 0.0));
    float _2212 = isnan(1.0) ? _4287 : (isnan(_4287) ? 1.0 : min(_4287, 1.0));
    float _2213 = dot(vec3(_328, _329, _330), vec3(_2206, _2207, _2208));
    float _4298 = isnan(0.0) ? _2213 : (isnan(_2213) ? 0.0 : max(_2213, 0.0));
    float _2216 = isnan(1.0) ? _4298 : (isnan(_4298) ? 1.0 : min(_4298, 1.0));
    float _2217 = dot(vec3(cbLight._m0[_1891].xyz), vec3(_2206, _2207, _2208));
    float _4309 = isnan(0.0) ? _2217 : (isnan(_2217) ? 0.0 : max(_2217, 0.0));
    float _2221 = _2198 * _2198;
    float _2225 = ((_2216 * _2216) * (_2221 + (-1.0))) + 1.0;
    float _2232 = exp2(log2(1.0 - (isnan(1.0) ? _4309 : (isnan(_4309) ? 1.0 : min(_4309, 1.0)))) * 5.0);
    float _2239 = 1.0 - _2198;
    float _2249 = (0.5 / (((_2127 * ((_2212 * _2239) + _2198)) + 9.9999999392252902907785028219223e-09) + (((_2127 * _2239) + _2198) * _2212))) * _2212;
    float _4320 = isnan(0.0) ? _2249 : (isnan(_2249) ? 0.0 : max(_2249, 0.0));
    float _2251 = (isnan(1.0) ? _4320 : (isnan(_4320) ? 1.0 : min(_4320, 1.0))) * (_2221 / ((_2225 * _2225) * 3.141590118408203125));
    float _2261 = (((((_2232 * _2149) + _495) * cbLight._m0[_2186].x) * _2251) * _1873) + ((((cbLight._m0[_2098].x * _1839) * ((_2148 * _2149) + _495)) * _2172) * _1887);
    float _2262 = (((((_2232 * _2151) + _497) * cbLight._m0[_2186].y) * _2251) * _1873) + ((((cbLight._m0[_2098].y * _1841) * ((_2148 * _2151) + _497)) * _2172) * _1887);
    float _2263 = (((((_2232 * _2152) + _498) * cbLight._m0[_2186].z) * _2251) * _1873) + ((((cbLight._m0[_2098].z * _1843) * ((_2148 * _2152) + _498)) * _2172) * _1887);
    float _2319;
    float _2321;
    float _2323;
    if (_1927)
    {
        _2319 = _2261;
        _2321 = _2262;
        _2323 = _2263;
    }
    else
    {
        uint _2325 = _1850 + 2u;
        uint _2329 = _1850 + 10u;
        float _2343 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2325].w)) * _331) * 0.949999988079071044921875);
        float _2344 = _2343 * _2343;
        float _2345 = cbLight._m0[_2325].x + _409;
        float _2346 = cbLight._m0[_2325].y + _410;
        float _2347 = cbLight._m0[_2325].z + _411;
        float _2351 = inversesqrt(dot(vec3(_2345, _2346, _2347), vec3(_2345, _2346, _2347)));
        float _2352 = _2351 * _2345;
        float _2353 = _2351 * _2346;
        float _2354 = _2351 * _2347;
        float _2355 = dot(vec3(_328, _329, _330), vec3(cbLight._m0[_2325].xyz));
        float _4331 = isnan(0.0) ? _2355 : (isnan(_2355) ? 0.0 : max(_2355, 0.0));
        float _2358 = isnan(1.0) ? _4331 : (isnan(_4331) ? 1.0 : min(_4331, 1.0));
        float _2359 = dot(vec3(_328, _329, _330), vec3(_2352, _2353, _2354));
        float _4342 = isnan(0.0) ? _2359 : (isnan(_2359) ? 0.0 : max(_2359, 0.0));
        float _2362 = isnan(1.0) ? _4342 : (isnan(_4342) ? 1.0 : min(_4342, 1.0));
        float _2363 = dot(vec3(cbLight._m0[_2325].xyz), vec3(_2352, _2353, _2354));
        float _4353 = isnan(0.0) ? _2363 : (isnan(_2363) ? 0.0 : max(_2363, 0.0));
        float _2367 = _2344 * _2344;
        float _2371 = ((_2362 * _2362) * (_2367 + (-1.0))) + 1.0;
        float _2378 = exp2(log2(1.0 - (isnan(1.0) ? _4353 : (isnan(_4353) ? 1.0 : min(_4353, 1.0)))) * 5.0);
        float _2385 = 1.0 - _2344;
        float _2395 = (0.5 / (((_2127 * ((_2358 * _2385) + _2344)) + 9.9999999392252902907785028219223e-09) + (((_2127 * _2385) + _2344) * _2358))) * _2358;
        float _4364 = isnan(0.0) ? _2395 : (isnan(_2395) ? 0.0 : max(_2395, 0.0));
        float _2397 = (isnan(1.0) ? _4364 : (isnan(_4364) ? 1.0 : min(_4364, 1.0))) * (_2367 / ((_2371 * _2371) * 3.141590118408203125));
        float _2398 = isnan(1.0) ? _1865 : (isnan(_1865) ? 1.0 : min(_1865, 1.0));
        _2319 = (((((_2378 * _2149) + _495) * cbLight._m0[_2329].x) * _2397) * _2398) + _2261;
        _2321 = (((((_2378 * _2151) + _497) * cbLight._m0[_2329].y) * _2397) * _2398) + _2262;
        _2323 = (((((_2378 * _2152) + _498) * cbLight._m0[_2329].z) * _2397) * _2398) + _2263;
    }
    float _2429;
    float _2431;
    float _2433;
    if (_2036)
    {
        _2429 = _2319;
        _2431 = _2321;
        _2433 = _2323;
    }
    else
    {
        uint _2440 = _1850 + 3u;
        uint _2444 = _1850 + 11u;
        float _2458 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2440].w)) * _331) * 0.949999988079071044921875);
        float _2459 = _2458 * _2458;
        float _2460 = cbLight._m0[_2440].x + _409;
        float _2461 = cbLight._m0[_2440].y + _410;
        float _2462 = cbLight._m0[_2440].z + _411;
        float _2466 = inversesqrt(dot(vec3(_2460, _2461, _2462), vec3(_2460, _2461, _2462)));
        float _2467 = _2466 * _2460;
        float _2468 = _2466 * _2461;
        float _2469 = _2466 * _2462;
        float _2470 = dot(vec3(_328, _329, _330), vec3(cbLight._m0[_2440].xyz));
        float _4380 = isnan(0.0) ? _2470 : (isnan(_2470) ? 0.0 : max(_2470, 0.0));
        float _2473 = isnan(1.0) ? _4380 : (isnan(_4380) ? 1.0 : min(_4380, 1.0));
        float _2474 = dot(vec3(_328, _329, _330), vec3(_2467, _2468, _2469));
        float _4391 = isnan(0.0) ? _2474 : (isnan(_2474) ? 0.0 : max(_2474, 0.0));
        float _2477 = isnan(1.0) ? _4391 : (isnan(_4391) ? 1.0 : min(_4391, 1.0));
        float _2478 = dot(vec3(cbLight._m0[_2440].xyz), vec3(_2467, _2468, _2469));
        float _4402 = isnan(0.0) ? _2478 : (isnan(_2478) ? 0.0 : max(_2478, 0.0));
        float _2482 = _2459 * _2459;
        float _2486 = ((_2477 * _2477) * (_2482 + (-1.0))) + 1.0;
        float _2493 = exp2(log2(1.0 - (isnan(1.0) ? _4402 : (isnan(_4402) ? 1.0 : min(_4402, 1.0)))) * 5.0);
        float _2500 = 1.0 - _2459;
        float _2510 = (0.5 / (((_2127 * ((_2473 * _2500) + _2459)) + 9.9999999392252902907785028219223e-09) + (((_2127 * _2500) + _2459) * _2473))) * _2473;
        float _4413 = isnan(0.0) ? _2510 : (isnan(_2510) ? 0.0 : max(_2510, 0.0));
        float _2512 = (isnan(1.0) ? _4413 : (isnan(_4413) ? 1.0 : min(_4413, 1.0))) * (_2482 / ((_2486 * _2486) * 3.141590118408203125));
        float _2513 = isnan(1.0) ? _1866 : (isnan(_1866) ? 1.0 : min(_1866, 1.0));
        _2429 = (((((_2493 * _2149) + _495) * cbLight._m0[_2444].x) * _2512) * _2513) + _2319;
        _2431 = (((((_2493 * _2151) + _497) * cbLight._m0[_2444].y) * _2512) * _2513) + _2321;
        _2433 = (((((_2493 * _2152) + _498) * cbLight._m0[_2444].z) * _2512) * _2513) + _2323;
    }
    float _2579;
    float _2581;
    float _2583;
    float _2585;
    float _2587;
    float _2589;
    if (_1848.y == 0u)
    {
        uvec4 _2534 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2535 = _2534.x;
        uint _2546 = uint((float(_2534.y) * floor(float(uint(cbSceneParam._m0[85u].y * _431) / _2535))) + floor(float(uint(cbSceneParam._m0[85u].x * _430) / _2535)));
        float _2556 = (log2(_1626 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2557 = isnan(0.0) ? _2556 : (isnan(_2556) ? 0.0 : max(_2556, 0.0));
        uint _2560 = uint(isnan(14.0) ? _2557 : (isnan(_2557) ? 14.0 : min(_2557, 14.0)));
        uvec4 _2565 = texelFetch(g_lightClusterGridBuffer, int(((_2560 << 2u) + (_2546 << 6u)) >> 2u));
        uint _2566 = _2565.x;
        uint _2567 = _2534.z;
        float _2675;
        float _2677;
        float _2679;
        float _2681;
        float _2683;
        float _2685;
        if (((((1u << ((_2567 >> 4u) & 15u)) + 4294967295u) & _2566) == 0u) || ((_2567 & 240u) == 0u))
        {
            _2675 = 0.0;
            _2677 = 0.0;
            _2679 = 0.0;
            _2681 = 0.0;
            _2683 = 0.0;
            _2685 = 0.0;
        }
        else
        {
            float _2676;
            float _2678;
            float _2680;
            float _2682;
            float _2684;
            float _2686;
            float _2836 = 0.0;
            float _2837 = 0.0;
            float _2838 = 0.0;
            float _2839 = 0.0;
            float _2840 = 0.0;
            float _2841 = 0.0;
            uint _2842 = 0u;
            uint _2851;
            bool _2852;
            for (;;)
            {
                _2851 = texelFetch(g_lightClassification, int((((_2560 << 5u) + (_2546 << 9u)) + (_2842 << 2u)) >> 2u)).x;
                _2852 = _2851 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_2852)
                {
                    frontier_phi_71_pred = _2841;
                    frontier_phi_71_pred_1 = _2840;
                    frontier_phi_71_pred_2 = _2839;
                    frontier_phi_71_pred_3 = _2838;
                    frontier_phi_71_pred_4 = _2837;
                    frontier_phi_71_pred_5 = _2836;
                }
                else
                {
                    float _2981;
                    float _2982;
                    float _2983;
                    float _2984;
                    float _2985;
                    float _2986;
                    uint _2987;
                    _2981 = _2836;
                    _2982 = _2837;
                    _2983 = _2838;
                    _2984 = _2839;
                    _2985 = _2840;
                    _2986 = _2841;
                    _2987 = _2851;
                    float _2908;
                    float _2909;
                    float _2910;
                    float _2911;
                    float _2912;
                    float _2913;
                    for (;;)
                    {
                        uint _2991 = uint(findLSB(_2987)) + (_2842 << 5u);
                        uint _2988 = (_2987 + 4294967295u) & _2987;
                        uint _2993 = _2991 * 48u;
                        vec4 _3007 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2993)).x, texelFetch(g_PointLightRenderingBuffer, int(_2993 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2993 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2993 + 3u)).x));
                        uint _3013 = (_2991 * 48u) + 4u;
                        vec4 _3026 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3013)).x, texelFetch(g_PointLightRenderingBuffer, int(_3013 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3013 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3013 + 3u)).x));
                        uint _3032 = (_2991 * 48u) + 8u;
                        vec3 _3043 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3032)).x, texelFetch(g_PointLightRenderingBuffer, int(_3032 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3032 + 2u)).x));
                        float _3047 = _3007.x - _1624;
                        float _3048 = _3007.y - _1625;
                        float _3049 = _3007.z - _1626;
                        float _3050 = dot(vec3(_3047, _3048, _3049), vec3(_3047, _3048, _3049));
                        float _3053 = inversesqrt(_3050);
                        float _3054 = _3053 * _3047;
                        float _3055 = _3053 * _3048;
                        float _3056 = _3053 * _3049;
                        float _3057 = dot(vec3(_451, _454, _457), vec3(_3054, _3055, _3056));
                        float _3062 = 1.0 - (_3050 * _3007.w);
                        float _4439 = isnan(0.0) ? _3062 : (isnan(_3062) ? 0.0 : max(_3062, 0.0));
                        float _3063 = isnan(1.0) ? _4439 : (isnan(_4439) ? 1.0 : min(_4439, 1.0));
                        float _3064 = sqrt(_3050) * _3026.w;
                        float _3067 = 1.39999997615814208984375 / (_3064 + 1.39999997615814208984375);
                        float _3068 = _3067 * _3067;
                        float _3071 = ((1.0 - _3068) * _3057) + _3068;
                        float _3074 = _3064 * _3064;
                        float _3078 = ((isnan(0.0) ? _3071 : (isnan(_3071) ? 0.0 : max(_3071, 0.0))) * _3063) / ((_3074 * 0.699999988079071044921875) + 1.0);
                        float _3082 = (-0.0) - _1624;
                        float _3083 = (-0.0) - _1625;
                        float _3084 = (-0.0) - _1626;
                        float _3088 = inversesqrt(dot(vec3(_3082, _3083, _3084), vec3(_3082, _3083, _3084)));
                        float _3089 = _3088 * _3082;
                        float _3090 = _3088 * _3083;
                        float _3091 = _3088 * _3084;
                        float _3098 = exp2(log2(1.0 / ((_3074 * 3.5) + 5.0)) * 0.25);
                        float _3099 = 1.0 - _526;
                        float _3106 = sqrt(1.0 - ((1.0 - (_3099 * _3099)) * (1.0 - (_3098 * _3098))));
                        float _3107 = _3106 * _3106;
                        float _3108 = _3107 * _3107;
                        float _3109 = _3089 + _3054;
                        float _3110 = _3090 + _3055;
                        float _3111 = _3091 + _3056;
                        float _3115 = inversesqrt(dot(vec3(_3109, _3110, _3111), vec3(_3109, _3110, _3111)));
                        float _3119 = dot(vec3(_451, _454, _457), vec3(_3089, _3090, _3091));
                        float _4455 = isnan(0.0) ? _3119 : (isnan(_3119) ? 0.0 : max(_3119, 0.0));
                        float _3122 = isnan(1.0) ? _4455 : (isnan(_4455) ? 1.0 : min(_4455, 1.0));
                        float _3123 = dot(vec3(_451, _454, _457), vec3(_3115 * _3109, _3115 * _3110, _3115 * _3111));
                        float _4466 = isnan(0.0) ? _3123 : (isnan(_3123) ? 0.0 : max(_3123, 0.0));
                        float _3126 = isnan(1.0) ? _4466 : (isnan(_4466) ? 1.0 : min(_4466, 1.0));
                        float _3130 = ((_3126 * _3126) * (_3108 + (-1.0))) + 1.0;
                        float _3131 = _3067 * _3107;
                        float _3132 = _3131 * _3131;
                        float _3135 = ((1.0 - _3132) * _3057) + _3132;
                        float _4477 = isnan(0.0) ? _3135 : (isnan(_3135) ? 0.0 : max(_3135, 0.0));
                        float _3136 = isnan(1.0) ? _4477 : (isnan(_4477) ? 1.0 : min(_4477, 1.0));
                        float _3137 = 1.0 - _3107;
                        float _3147 = (0.5 / (((_3136 * ((_3122 * _3137) + _3107)) + 9.9999999392252902907785028219223e-09) + (((_3136 * _3137) + _3107) * _3122))) * _3136;
                        float _4488 = isnan(0.0) ? _3147 : (isnan(_3147) ? 0.0 : max(_3147, 0.0));
                        float _3158 = (((_3108 * 3.1415927410125732421875) * (isnan(1.0) ? _4488 : (isnan(_4488) ? 1.0 : min(_4488, 1.0)))) / ((_3130 * _3130) * ((_3074 * 2.1991131305694580078125) + 3.141590118408203125))) * _3063;
                        _2911 = (_3078 * _3026.x) + _2984;
                        _2912 = (_3078 * _3026.y) + _2985;
                        _2913 = (_3078 * _3026.z) + _2986;
                        _2908 = (_3158 * _3043.x) + _2981;
                        _2909 = (_3158 * _3043.y) + _2982;
                        _2910 = (_3158 * _3043.z) + _2983;
                        if (_2988 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2981 = _2908;
                            _2982 = _2909;
                            _2983 = _2910;
                            _2984 = _2911;
                            _2985 = _2912;
                            _2986 = _2913;
                            _2987 = _2988;
                        }
                    }
                    frontier_phi_71_pred = _2913;
                    frontier_phi_71_pred_1 = _2912;
                    frontier_phi_71_pred_2 = _2911;
                    frontier_phi_71_pred_3 = _2910;
                    frontier_phi_71_pred_4 = _2909;
                    frontier_phi_71_pred_5 = _2908;
                }
                _2686 = frontier_phi_71_pred;
                _2684 = frontier_phi_71_pred_1;
                _2682 = frontier_phi_71_pred_2;
                _2680 = frontier_phi_71_pred_3;
                _2678 = frontier_phi_71_pred_4;
                _2676 = frontier_phi_71_pred_5;
                uint _2843 = _2842 + 1u;
                if (_2843 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2836 = _2676;
                    _2837 = _2678;
                    _2838 = _2680;
                    _2839 = _2682;
                    _2840 = _2684;
                    _2841 = _2686;
                    _2842 = _2843;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2675 = _2676;
            _2677 = _2678;
            _2679 = _2680;
            _2681 = _2682;
            _2683 = _2684;
            _2685 = _2686;
        }
        uvec4 _2689 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2690 = _2689.z;
        uint _2692 = (_2690 >> 8u) & 15u;
        float _2804;
        float _2806;
        float _2808;
        float _2810;
        float _2812;
        float _2814;
        if (((4294967295u << _2692) & _2566) == 0u)
        {
            _2804 = _2675;
            _2806 = _2677;
            _2808 = _2679;
            _2810 = _2681;
            _2812 = _2683;
            _2814 = _2685;
        }
        else
        {
            float _2829 = inversesqrt(dot(vec3(_1624, _1625, _1626), vec3(_1624, _1625, _1626)));
            float _2830 = _2829 * _1624;
            float _2831 = _2829 * _1625;
            float _2832 = _2829 * _1626;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_2692 < ((_2690 >> 12u) & 15u))
            {
                float _2805;
                float _2807;
                float _2809;
                float _2811;
                float _2813;
                float _2815;
                float _2964 = _2675;
                float _2965 = _2677;
                float _2966 = _2679;
                float _2967 = _2681;
                float _2968 = _2683;
                float _2969 = _2685;
                uint _2970 = _2692;
                uint _2979;
                bool _2980;
                for (;;)
                {
                    _2979 = texelFetch(g_lightClassification, int((((_2560 << 5u) + (_2546 << 9u)) + (_2970 << 2u)) >> 2u)).x;
                    _2980 = _2979 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_2980)
                    {
                        frontier_phi_82_pred = _2969;
                        frontier_phi_82_pred_1 = _2968;
                        frontier_phi_82_pred_2 = _2967;
                        frontier_phi_82_pred_3 = _2966;
                        frontier_phi_82_pred_4 = _2965;
                        frontier_phi_82_pred_5 = _2964;
                    }
                    else
                    {
                        float _3172;
                        float _3173;
                        float _3174;
                        float _3175;
                        float _3176;
                        float _3177;
                        float _3468;
                        float _3469;
                        float _3470;
                        float _3471;
                        float _3472;
                        float _3473;
                        float _3185 = _2964;
                        float _3186 = _2965;
                        float _3187 = _2966;
                        float _3188 = _2967;
                        float _3189 = _2968;
                        float _3190 = _2969;
                        uint _3191 = _2979;
                        uint _3192;
                        vec4 _3217;
                        float _3218;
                        vec4 _3233;
                        vec3 _3245;
                        vec4 _3261;
                        vec4 _3277;
                        float _3324;
                        bool _3325;
                        for (;;)
                        {
                            uint _3202 = ((_2970 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3191));
                            _3192 = (_3191 + 4294967295u) & _3191;
                            uint _3204 = _3202 * 40u;
                            _3217 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3204)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3204 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3204 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3204 + 3u)).x));
                            _3218 = _3217.w;
                            uint _3220 = (_3202 * 40u) + 4u;
                            _3233 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3220)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3220 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3220 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3220 + 3u)).x));
                            uint _3235 = (_3202 * 40u) + 8u;
                            _3245 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3235)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3235 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3235 + 2u)).x));
                            uint _3248 = (_3202 * 40u) + 16u;
                            _3261 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3248)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3248 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3248 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3248 + 3u)).x));
                            uint _3264 = (_3202 * 40u) + 20u;
                            _3277 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3264)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3264 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3264 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3264 + 3u)).x));
                            uint _3280 = (_3202 * 40u) + 24u;
                            vec4 _3293 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3280)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3280 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3280 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3280 + 3u)).x));
                            uint _3299 = (_3202 * 40u) + 28u;
                            vec4 _3312 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3299)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3299 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3299 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3299 + 3u)).x));
                            _3324 = fma(_1626, _3312.z, fma(_1625, _3312.y, _3312.x * _1624)) + _3312.w;
                            _3325 = !((fma(_1626, _3293.z, fma(_1625, _3293.y, _3293.x * _1624)) + _3293.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3325)
                            {
                                float _3352 = _3217.x - _1624;
                                float _3353 = _3217.y - _1625;
                                float _3354 = _3217.z - _1626;
                                float _3355 = dot(vec3(_3352, _3353, _3354), vec3(_3352, _3353, _3354));
                                float _3358 = inversesqrt(_3355);
                                float _3359 = _3358 * _3352;
                                float _3360 = _3358 * _3353;
                                float _3361 = _3358 * _3354;
                                float _3365 = 1.0 - (_3355 / (_3218 * _3218));
                                float _4499 = isnan(0.0) ? _3365 : (isnan(_3365) ? 0.0 : max(_3365, 0.0));
                                float _3366 = isnan(1.0) ? _4499 : (isnan(_4499) ? 1.0 : min(_4499, 1.0));
                                float _3370 = sqrt(_3355) * _3233.w;
                                float _3372 = 1.39999997615814208984375 / (_3370 + 1.39999997615814208984375);
                                float _3373 = _3372 * _3372;
                                float _3376 = ((1.0 - _3373) * dot(vec3(_3359, _3360, _3361), vec3(_451, _454, _457))) + _3373;
                                float _3379 = _3370 * _3370;
                                float _3383 = (fma(_1626, _3261.z, fma(_1625, _3261.y, _3261.x * _1624)) + _3261.w) / _3324;
                                float _3384 = (fma(_1626, _3277.z, fma(_1625, _3277.y, _3277.x * _1624)) + _3277.w) / _3324;
                                float _3388 = 1.0 - dot(vec2(_3383, _3384), vec2(_3383, _3384));
                                float _4515 = isnan(0.0) ? _3388 : (isnan(_3388) ? 0.0 : max(_3388, 0.0));
                                float _3389 = isnan(1.0) ? _4515 : (isnan(_4515) ? 1.0 : min(_4515, 1.0));
                                float _3390 = _3389 * (((isnan(0.0) ? _3376 : (isnan(_3376) ? 0.0 : max(_3376, 0.0))) * _3366) / ((_3379 * 0.699999988079071044921875) + 1.0));
                                float _3402 = exp2(log2(1.0 / ((_3379 * 3.5) + 5.0)) * 0.25);
                                float _3403 = 1.0 - _526;
                                float _3410 = sqrt(1.0 - ((1.0 - (_3403 * _3403)) * (1.0 - (_3402 * _3402))));
                                float _3411 = _3410 * _3410;
                                float _3412 = _3411 * _3411;
                                float _3413 = _3359 - _2830;
                                float _3414 = _3360 - _2831;
                                float _3415 = _3361 - _2832;
                                float _3419 = inversesqrt(dot(vec3(_3413, _3414, _3415), vec3(_3413, _3414, _3415)));
                                float _3423 = dot(vec3(_451, _454, _457), vec3((-0.0) - _2830, (-0.0) - _2831, (-0.0) - _2832));
                                float _4526 = isnan(0.0) ? _3423 : (isnan(_3423) ? 0.0 : max(_3423, 0.0));
                                float _3426 = isnan(1.0) ? _4526 : (isnan(_4526) ? 1.0 : min(_4526, 1.0));
                                float _3427 = dot(vec3(_451, _454, _457), vec3(_3419 * _3413, _3419 * _3414, _3419 * _3415));
                                float _4537 = isnan(0.0) ? _3427 : (isnan(_3427) ? 0.0 : max(_3427, 0.0));
                                float _3430 = isnan(1.0) ? _4537 : (isnan(_4537) ? 1.0 : min(_4537, 1.0));
                                float _3434 = ((_3430 * _3430) * (_3412 + (-1.0))) + 1.0;
                                float _3435 = _3372 * _3411;
                                float _3436 = _3435 * _3435;
                                float _3442 = ((1.0 - _3436) * dot(vec3(_451, _454, _457), vec3(_3359, _3360, _3361))) + _3436;
                                float _4548 = isnan(0.0) ? _3442 : (isnan(_3442) ? 0.0 : max(_3442, 0.0));
                                float _3443 = isnan(1.0) ? _4548 : (isnan(_4548) ? 1.0 : min(_4548, 1.0));
                                float _3444 = 1.0 - _3411;
                                float _3454 = (0.5 / (((_3443 * ((_3426 * _3444) + _3411)) + 9.9999999392252902907785028219223e-09) + (((_3443 * _3444) + _3411) * _3426))) * _3443;
                                float _4559 = isnan(0.0) ? _3454 : (isnan(_3454) ? 0.0 : max(_3454, 0.0));
                                float _3464 = (_3389 * _3366) * (((_3412 * 3.1415927410125732421875) * (isnan(1.0) ? _4559 : (isnan(_4559) ? 1.0 : min(_4559, 1.0)))) / ((_3434 * _3434) * ((_3379 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3390 * _3233.z;
                                frontier_phi_88_pred_1 = _3390 * _3233.y;
                                frontier_phi_88_pred_2 = _3390 * _3233.x;
                                frontier_phi_88_pred_3 = _3464 * _3245.z;
                                frontier_phi_88_pred_4 = _3464 * _3245.y;
                                frontier_phi_88_pred_5 = _3464 * _3245.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3473 = frontier_phi_88_pred;
                            _3472 = frontier_phi_88_pred_1;
                            _3471 = frontier_phi_88_pred_2;
                            _3470 = frontier_phi_88_pred_3;
                            _3469 = frontier_phi_88_pred_4;
                            _3468 = frontier_phi_88_pred_5;
                            _3175 = _3471 + _3188;
                            _3176 = _3472 + _3189;
                            _3177 = _3473 + _3190;
                            _3172 = _3468 + _3185;
                            _3173 = _3469 + _3186;
                            _3174 = _3470 + _3187;
                            if (_3192 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3185 = _3172;
                                _3186 = _3173;
                                _3187 = _3174;
                                _3188 = _3175;
                                _3189 = _3176;
                                _3190 = _3177;
                                _3191 = _3192;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3177;
                        frontier_phi_82_pred_1 = _3176;
                        frontier_phi_82_pred_2 = _3175;
                        frontier_phi_82_pred_3 = _3174;
                        frontier_phi_82_pred_4 = _3173;
                        frontier_phi_82_pred_5 = _3172;
                    }
                    _2815 = frontier_phi_82_pred;
                    _2813 = frontier_phi_82_pred_1;
                    _2811 = frontier_phi_82_pred_2;
                    _2809 = frontier_phi_82_pred_3;
                    _2807 = frontier_phi_82_pred_4;
                    _2805 = frontier_phi_82_pred_5;
                    uint _2971 = _2970 + 1u;
                    if (_2971 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2964 = _2805;
                        _2965 = _2807;
                        _2966 = _2809;
                        _2967 = _2811;
                        _2968 = _2813;
                        _2969 = _2815;
                        _2970 = _2971;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _2811;
                frontier_phi_63_64_ladder_1 = _2815;
                frontier_phi_63_64_ladder_2 = _2813;
                frontier_phi_63_64_ladder_3 = _2809;
                frontier_phi_63_64_ladder_4 = _2807;
                frontier_phi_63_64_ladder_5 = _2805;
            }
            else
            {
                frontier_phi_63_64_ladder = _2681;
                frontier_phi_63_64_ladder_1 = _2685;
                frontier_phi_63_64_ladder_2 = _2683;
                frontier_phi_63_64_ladder_3 = _2679;
                frontier_phi_63_64_ladder_4 = _2677;
                frontier_phi_63_64_ladder_5 = _2675;
            }
            _2804 = frontier_phi_63_64_ladder_5;
            _2806 = frontier_phi_63_64_ladder_4;
            _2808 = frontier_phi_63_64_ladder_3;
            _2810 = frontier_phi_63_64_ladder;
            _2812 = frontier_phi_63_64_ladder_2;
            _2814 = frontier_phi_63_64_ladder_1;
        }
        float _2819 = isnan(1.0) ? _510 : (isnan(_510) ? 1.0 : min(_510, 1.0));
        _2579 = (_2819 * _2810) + _2091;
        _2581 = (_2819 * _2812) + _2093;
        _2583 = (_2819 * _2814) + _2095;
        _2585 = ((_2804 * _495) * _2819) + _2429;
        _2587 = ((_2806 * _497) * _2819) + _2431;
        _2589 = ((_2808 * _498) * _2819) + _2433;
    }
    else
    {
        _2579 = _2091;
        _2581 = _2093;
        _2583 = _2095;
        _2585 = _2429;
        _2587 = _2431;
        _2589 = _2433;
    }
    uint _2595 = _471 + uint(cbMatDynParam._m0[0u].w);
    float _2601 = ((((cbMtdParam._m0[10u].x * cbMtdParam._m0[12u].y) * _292.x) + cbMtdParam._m0[11u].x) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_2595].x;
    float _2602 = ((((cbMtdParam._m0[10u].y * cbMtdParam._m0[12u].y) * _292.y) + cbMtdParam._m0[11u].y) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_2595].y;
    float _2603 = ((cbMtdParam._m0[11u].z + ((cbMtdParam._m0[10u].z * cbMtdParam._m0[12u].y) * _292.z)) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_2595].z;
    float _4575 = isnan(0.0) ? _485 : (isnan(_485) ? 0.0 : max(_485, 0.0));
    float _4586 = isnan(0.0) ? _486 : (isnan(_486) ? 0.0 : max(_486, 0.0));
    float _4597 = isnan(0.0) ? _487 : (isnan(_487) ? 0.0 : max(_487, 0.0));
    float _2620 = (((isnan(1.0) ? _4575 : (isnan(_4575) ? 1.0 : min(_4575, 1.0))) * (_2579 + ((isnan(0.0) ? _1273 : (isnan(_1273) ? 0.0 : max(_1273, 0.0))) * _510))) + ((_2585 + ((isnan(0.0) ? _1571 : (isnan(_1571) ? 0.0 : max(_1571, 0.0))) * _1352)) * cbPerFrame._m0[3u].x)) + _2601;
    float _2622 = (_2602 + ((_2587 + ((isnan(0.0) ? _1574 : (isnan(_1574) ? 0.0 : max(_1574, 0.0))) * _1352)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4586 : (isnan(_4586) ? 1.0 : min(_4586, 1.0))) * (_2581 + ((isnan(0.0) ? _1276 : (isnan(_1276) ? 0.0 : max(_1276, 0.0))) * _510)));
    float _2624 = (_2603 + ((_2589 + ((isnan(0.0) ? _1577 : (isnan(_1577) ? 0.0 : max(_1577, 0.0))) * _1352)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4597 : (isnan(_4597) ? 1.0 : min(_4597, 1.0))) * (_2583 + ((isnan(0.0) ? _1279 : (isnan(_1279) ? 0.0 : max(_1279, 0.0))) * _510)));
    float _2625 = isnan(0.0) ? _2620 : (isnan(_2620) ? 0.0 : max(_2620, 0.0));
    float _2626 = isnan(0.0) ? _2622 : (isnan(_2622) ? 0.0 : max(_2622, 0.0));
    float _2627 = isnan(0.0) ? _2624 : (isnan(_2624) ? 0.0 : max(_2624, 0.0));
    float _2633 = cbMtdParam._m0[2u].x * _2601;
    float _2634 = cbMtdParam._m0[2u].y * _2602;
    float _2635 = cbMtdParam._m0[2u].z * _2603;
    float _4623 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2637 = isnan(1.0) ? _4623 : (isnan(_4623) ? 1.0 : min(_4623, 1.0));
    uint _2638 = _470 + 6u;
    float _2646 = _430 / cbSceneParam._m0[86u].x;
    float _2647 = _431 / cbSceneParam._m0[86u].y;
    vec4 _2661 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2646, _2647, (log2((isnan(cbSceneParam._m0[77u].w) ? _351 : (isnan(_351) ? cbSceneParam._m0[77u].w : min(_351, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2663 = _2661.x;
    float _2664 = _2661.y;
    float _2665 = _2661.z;
    float _2666 = _2661.w;
    float _2738;
    float _2740;
    float _2742;
    float _2744;
    if (_351 > cbSceneParam._m0[78u].w)
    {
        float _2700 = isnan(_351) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _351 : min(cbSceneParam._m0[80u].w, _351));
        float _2701 = _2700 / _351;
        float _2712 = _2701 * _402;
        float _2713 = _403 * _2701;
        float _2714 = (-0.0) - _2713;
        float _2716 = _2701 * _404;
        float _2718 = (cbSceneParam._m0[77u].w * _2714) / _2700;
        float _2719 = _2718 + cbSceneParam._m0[79u].w;
        float _2720 = cbSceneParam._m0[79u].w - _2713;
        float _2726 = sqrt(((_2712 * _2712) + (_2713 * _2713)) + (_2716 * _2716));
        float _2729 = (1.0 - (cbSceneParam._m0[77u].w / _2700)) * _2726;
        float _2734 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2736 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2921;
        if (abs((_2714 - _2718) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2921 = ((((_2719 > 0.0) ? exp2(_2734 * _2719) : (2.0 - exp2(_2736 * _2719))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2729;
        }
        else
        {
            float _2865 = 1.0 / cbSceneParam._m0[80u].x;
            float _2866 = isnan(_2720) ? _2719 : (isnan(_2719) ? _2720 : max(_2719, _2720));
            float _2867 = isnan(_2720) ? _2719 : (isnan(_2719) ? _2720 : min(_2719, _2720));
            float _2876 = isnan(0.0) ? _2866 : (isnan(_2866) ? 0.0 : min(_2866, 0.0));
            float _2877 = isnan(0.0) ? _2867 : (isnan(_2867) ? 0.0 : min(_2867, 0.0));
            _2921 = ((abs(_2726 / _2714) * cbSceneParam._m0[80u].y) * ((((_2876 - _2877) * 2.0) - ((exp2(_2734 * (isnan(0.0) ? _2866 : (isnan(_2866) ? 0.0 : max(_2866, 0.0)))) - exp2(_2734 * (isnan(0.0) ? _2867 : (isnan(_2867) ? 0.0 : max(_2867, 0.0))))) * _2865)) - ((exp2(_2736 * _2876) - exp2(_2736 * _2877)) * _2865))) + (_2729 * cbSceneParam._m0[80u].z);
        }
        vec4 _2923 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2646, _2647, 1.0), 0.0);
        float _2932 = exp2((_2921 * (-1.44269502162933349609375)) * (1.0 - _2923.w));
        float _2933 = log2(_2932);
        float _2949 = log2(_2666);
        _2738 = (exp2(_2949 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2933 * cbSceneParam._m0[78u].x)) * _2923.x) / cbSceneParam._m0[78u].x)) + _2663;
        _2740 = (exp2(_2949 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2933 * cbSceneParam._m0[78u].y)) * _2923.y) / cbSceneParam._m0[78u].y)) + _2664;
        _2742 = (exp2(_2949 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2933 * cbSceneParam._m0[78u].z)) * _2923.z) / cbSceneParam._m0[78u].z)) + _2665;
        _2744 = _2932 * _2666;
    }
    else
    {
        _2738 = _2663;
        _2740 = _2664;
        _2742 = _2665;
        _2744 = _2666;
    }
    bool _2959;
    vec4 _2753;
    vec4 _2775;
    float _2777;
    float _2781;
    float _2782;
    float _2783;
    float _2786;
    float _2789;
    float _2792;
    float _2793;
    bool _2803;
    for (;;)
    {
        _2753 = cbMatDynParam._m0[0u];
        float _2755 = roundEven(_2753.y);
        bool _2756 = _2755 == 3.0;
        float _2757 = log2(_2744);
        float _2761 = exp2(_2757 * cbSceneParam._m0[78u].x);
        float _2762 = exp2(_2757 * cbSceneParam._m0[78u].y);
        float _2763 = exp2(_2757 * cbSceneParam._m0[78u].z);
        float _2764 = _2761 * _2625;
        float _2765 = _2762 * _2626;
        float _2766 = _2763 * _2627;
        float _2773 = _418 + (-0.5);
        _2775 = cbMtdParam._m0[1u];
        _2777 = _2775.y * _2773;
        float _2780 = (_2755 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2781 = _2780 * (_2756 ? _2764 : (_2764 + (cbSceneParam._m0[72u].w * _2738)));
        _2782 = _2780 * (_2756 ? _2765 : (_2765 + (cbSceneParam._m0[72u].w * _2740)));
        _2783 = _2780 * (_2756 ? _2766 : (_2766 + (cbSceneParam._m0[72u].w * _2742)));
        _2786 = ((_2633 * _2637) * _2761) * _2780;
        _2789 = ((_2634 * _2637) * _2762) * _2780;
        _2792 = ((_2635 * _2637) * _2763) * _2780;
        _2793 = _2773 * 0.999000012874603271484375;
        _2803 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2803)
        {
            if ((cbInstanceData._m0[_470 + 7u].x + _2793) < 0.5)
            {
                _2959 = true;
                break;
            }
        }
        uint _2900 = _471 + uint(_2753.w);
        if ((cbInstanceData._m0[_2900].w < 1.0) && ((cbInstanceData._m0[_2900].w + _2793) < 0.5))
        {
            _2959 = true;
            break;
        }
        if ((_2777 + 1.0) < _2775.x)
        {
            _2959 = true;
            break;
        }
        _2959 = false;
        break;
    }
    float _3163;
    if (_2959)
    {
        discard_state = true;
        _3163 = 0.0;
    }
    else
    {
        _3163 = cbInstanceData._m0[_2638].w;
    }
    SV_Target.x = _2781;
    SV_Target.y = _2782;
    SV_Target.z = _2783;
    SV_Target.w = _3163;
    SV_Target_1.x = _2786;
    SV_Target_1.y = _2789;
    SV_Target_1.z = _2792;
    SV_Target_1.w = cbInstanceData._m0[_2638].w;
    discard_exit();
}


