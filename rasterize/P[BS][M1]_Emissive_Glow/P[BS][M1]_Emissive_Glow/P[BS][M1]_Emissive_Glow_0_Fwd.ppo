#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[13];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D P_BS_M1_Emissive_Glow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D P_BS_M1_Emissive_Glow_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D P_BS_M1_Emissive_Glow_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D P_BS_M1_Emissive_Glow_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _882;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _178 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _179 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _180 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _185 = inversesqrt(dot(vec3(_178, _179, _180), vec3(_178, _179, _180)));
    float _192 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _199 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _222 = texture(sampler2D(P_BS_M1_Emissive_Glow_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _228 = _222.x * cbMtdParam._m0[9u].x;
    float _229 = _222.y * cbMtdParam._m0[9u].y;
    float _230 = _222.z * cbMtdParam._m0[9u].z;
    vec4 _242 = texture(sampler2D(P_BS_M1_Emissive_Glow_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _249 = cbMtdParam._m0[12u].x + _242.x;
    vec4 _261 = texture(sampler2D(P_BS_M1_Emissive_Glow_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _265 = _261.z;
    float _269 = (_261.x * 2.0) + (-1.0);
    float _271 = (_261.y * 2.0) + (-1.0);
    float _272 = dot(vec2(_269, _271), vec2(_269, _271));
    float _3255 = isnan(0.0) ? _272 : (isnan(_272) ? 0.0 : max(_272, 0.0));
    float _278 = sqrt(1.0 - (isnan(1.0) ? _3255 : (isnan(_3255) ? 1.0 : min(_3255, 1.0))));
    vec4 _301 = texture(sampler2D(P_BS_M1_Emissive_Glow_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _326 = fma(_278, _192 * NORMAL.x, fma(_271, _199 * TANGENT.x, (_185 * _178) * _269));
    float _329 = fma(_278, _192 * NORMAL.y, fma(_271, _199 * TANGENT.y, (_185 * _179) * _269));
    float _332 = fma(_278, _192 * NORMAL.z, fma(_271, _199 * TANGENT.z, (_185 * _180) * _269));
    float _336 = inversesqrt(dot(vec3(_326, _329, _332), vec3(_326, _329, _332)));
    float _337 = _336 * _326;
    float _338 = _336 * _329;
    float _339 = _336 * _332;
    float _3266 = isnan(0.0) ? _265 : (isnan(_265) ? 0.0 : max(_265, 0.0));
    float _340 = isnan(1.0) ? _3266 : (isnan(_3266) ? 1.0 : min(_3266, 1.0));
    float _3277 = isnan(0.0) ? _228 : (isnan(_228) ? 0.0 : max(_228, 0.0));
    float _3288 = isnan(0.0) ? _229 : (isnan(_229) ? 0.0 : max(_229, 0.0));
    float _3299 = isnan(0.0) ? _230 : (isnan(_230) ? 0.0 : max(_230, 0.0));
    float _3310 = isnan(0.0) ? _249 : (isnan(_249) ? 0.0 : max(_249, 0.0));
    float _344 = isnan(1.0) ? _3310 : (isnan(_3310) ? 1.0 : min(_3310, 1.0));
    float _360 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _401 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _411 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _401);
    float _412 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _401);
    float _413 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _401);
    float _417 = inversesqrt(dot(vec3(_411, _412, _413), vec3(_411, _412, _413)));
    float _418 = _411 * _417;
    float _419 = _412 * _417;
    float _420 = _413 * _417;
    float _426 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _427 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _448 = fma(_339, cbSceneParam._m0[5u].z, fma(_338, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _337));
    float _451 = fma(_339, cbSceneParam._m0[6u].z, fma(_338, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _337));
    float _454 = fma(_339, cbSceneParam._m0[7u].z, fma(_338, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _337));
    uint _467 = uint(roundEven(NORMAL.w)) * 13u;
    uint _468 = _467 + 9u;
    uint _469 = _468 + uint(cbMatDynParam._m0[0u].w);
    float _475 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3277 : (isnan(_3277) ? 1.0 : min(_3277, 1.0)))) * cbInstanceData._m0[_469].x;
    float _476 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3288 : (isnan(_3288) ? 1.0 : min(_3288, 1.0)))) * cbInstanceData._m0[_469].y;
    float _477 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3299 : (isnan(_3299) ? 1.0 : min(_3299, 1.0)))) * cbInstanceData._m0[_469].z;
    float _3321 = isnan(0.0) ? _475 : (isnan(_475) ? 0.0 : max(_475, 0.0));
    float _478 = isnan(1.0) ? _3321 : (isnan(_3321) ? 1.0 : min(_3321, 1.0));
    float _3332 = isnan(0.0) ? _476 : (isnan(_476) ? 0.0 : max(_476, 0.0));
    float _479 = isnan(1.0) ? _3332 : (isnan(_3332) ? 1.0 : min(_3332, 1.0));
    float _3343 = isnan(0.0) ? _477 : (isnan(_477) ? 0.0 : max(_477, 0.0));
    float _480 = isnan(1.0) ? _3343 : (isnan(_3343) ? 1.0 : min(_3343, 1.0));
    float _481 = 1.0 - _344;
    float _482 = _478 * _481;
    float _483 = _479 * _481;
    float _484 = _480 * _481;
    float _489 = (_478 + (-0.039999999105930328369140625)) * _344;
    float _490 = (_479 + (-0.039999999105930328369140625)) * _344;
    float _491 = (_480 + (-0.039999999105930328369140625)) * _344;
    float _492 = _489 + 0.039999999105930328369140625;
    float _494 = _490 + 0.039999999105930328369140625;
    float _495 = _491 + 0.039999999105930328369140625;
    vec4 _504 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _426, cbSceneParam._m0[86u].y * _427));
    float _507 = _504.x * TEXCOORD.z;
    float _508 = dot(vec3(_337, _338, _339), vec3(_418, _419, _420));
    float _511 = _508 * 2.0;
    float _515 = (_511 * _337) - _418;
    float _516 = (_511 * _338) - _419;
    float _517 = (_511 * _339) - _420;
    float _521 = abs(dot(vec3(_418, _419, _420), vec3(_337, _338, _339)));
    float _3354 = isnan(0.0) ? _521 : (isnan(_521) ? 0.0 : max(_521, 0.0));
    float _523 = sqrt(_340);
    float _536 = exp2((_523 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3354 : (isnan(_3354) ? 1.0 : min(_3354, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_523 * 3.0));
    float _542 = (1.0 - _536) * ((_523 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _543 = _536 * _523;
    float _571 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _575 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _579 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _881;
    float _883;
    float _884;
    float _885;
    float _886;
    float _887;
    float _888;
    float _889;
    float _890;
    float _891;
    float _892;
    float _893;
    float _894;
    float _895;
    float _896;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _606 = fma(_579, cbModelParam._m0[26u].z, fma(_575, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _571));
        float _610 = fma(_579, cbModelParam._m0[27u].z, fma(_575, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _571));
        float _614 = fma(_579, cbModelParam._m0[28u].z, fma(_575, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _571));
        float _639 = _571 + _337;
        float _640 = _575 + _338;
        float _641 = _579 + _339;
        float _651 = fma(_641, cbModelParam._m0[26u].z, fma(_640, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _639)) - _606;
        float _652 = fma(_641, cbModelParam._m0[27u].z, fma(_640, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _639)) - _610;
        float _653 = fma(_641, cbModelParam._m0[28u].z, fma(_640, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _639)) - _614;
        float _657 = inversesqrt(dot(vec3(_651, _652, _653), vec3(_651, _652, _653)));
        float _670 = ((_657 * _651) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_606 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _671 = ((_657 * _652) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_610 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _672 = ((_657 * _653) / cbModelParam._m0[34u].z) + ((((((_614 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _675 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_670, _671, _672), 0.0);
        vec4 _682 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_670, _671, _672), 0.0);
        vec4 _689 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_670, _671, _672), 0.0);
        vec4 _696 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_670, _671, _672), 0.0);
        float _709 = exp2((_675.w + (-0.5)) * 20.0) * 2.0;
        float _710 = _709 * (_675.x + (-0.5));
        float _711 = _709 * (_675.y + (-0.5));
        float _712 = _709 * (_675.z + (-0.5));
        float _719 = exp2((_682.w + (-0.5)) * 20.0) * 2.0;
        float _720 = _719 * (_682.x + (-0.5));
        float _721 = _719 * (_682.y + (-0.5));
        float _722 = _719 * (_682.z + (-0.5));
        float _729 = exp2((_689.w + (-0.5)) * 20.0) * 2.0;
        float _730 = _729 * (_689.x + (-0.5));
        float _731 = _729 * (_689.y + (-0.5));
        float _732 = _729 * (_689.z + (-0.5));
        float _739 = exp2((_696.w + (-0.5)) * 20.0) * 2.0;
        float _740 = _739 * (_696.x + (-0.5));
        float _741 = _739 * (_696.y + (-0.5));
        float _742 = _739 * (_696.z + (-0.5));
        float _743 = isnan(0.0) ? _740 : (isnan(_740) ? 0.0 : max(_740, 0.0));
        float _744 = isnan(0.0) ? _741 : (isnan(_741) ? 0.0 : max(_741, 0.0));
        float _745 = isnan(0.0) ? _742 : (isnan(_742) ? 0.0 : max(_742, 0.0));
        float _746 = _710 * 0.5;
        float _747 = _720 * 0.5;
        float _748 = _730 * 0.5;
        float _749 = dot(vec3(_746, _747, _748), vec3(_746, _747, _748));
        float _754 = (_749 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_749);
        float _763 = (dot(vec3(_337, _338, _339), vec3(_754 * _746, _754 * _747, _754 * _748)) + 1.0) * 0.5;
        float _3380 = isnan(0.0) ? _763 : (isnan(_763) ? 0.0 : max(_763, 0.0));
        float _773 = sqrt(((_747 * _747) + (_746 * _746)) + (_748 * _748)) / (_743 + 9.9999997473787516355514526367188e-06);
        float _3391 = isnan(0.0) ? _773 : (isnan(_773) ? 0.0 : max(_773, 0.0));
        float _774 = isnan(1.0) ? _3391 : (isnan(_3391) ? 1.0 : min(_3391, 1.0));
        float _775 = _774 * 2.0;
        float _779 = (1.0 - _774) / (_774 + 1.0);
        float _3402 = isnan(0.0) ? _779 : (isnan(_779) ? 0.0 : max(_779, 0.0));
        float _780 = isnan(1.0) ? _3402 : (isnan(_3402) ? 1.0 : min(_3402, 1.0));
        float _789 = ((((1.0 - _780) * (_775 + 2.0)) * exp2(log2(isnan(1.0) ? _3380 : (isnan(_3380) ? 1.0 : min(_3380, 1.0))) * (_775 + 1.0))) + _780) * _743;
        float _790 = _711 * 0.5;
        float _791 = _721 * 0.5;
        float _792 = _731 * 0.5;
        float _793 = dot(vec3(_790, _791, _792), vec3(_790, _791, _792));
        float _798 = (_793 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_793);
        float _806 = (dot(vec3(_337, _338, _339), vec3(_798 * _790, _798 * _791, _798 * _792)) + 1.0) * 0.5;
        float _3413 = isnan(0.0) ? _806 : (isnan(_806) ? 0.0 : max(_806, 0.0));
        float _815 = sqrt(((_791 * _791) + (_790 * _790)) + (_792 * _792)) / (_744 + 9.9999997473787516355514526367188e-06);
        float _3424 = isnan(0.0) ? _815 : (isnan(_815) ? 0.0 : max(_815, 0.0));
        float _816 = isnan(1.0) ? _3424 : (isnan(_3424) ? 1.0 : min(_3424, 1.0));
        float _817 = _816 * 2.0;
        float _821 = (1.0 - _816) / (_816 + 1.0);
        float _3435 = isnan(0.0) ? _821 : (isnan(_821) ? 0.0 : max(_821, 0.0));
        float _822 = isnan(1.0) ? _3435 : (isnan(_3435) ? 1.0 : min(_3435, 1.0));
        float _831 = ((((1.0 - _822) * (_817 + 2.0)) * exp2(log2(isnan(1.0) ? _3413 : (isnan(_3413) ? 1.0 : min(_3413, 1.0))) * (_817 + 1.0))) + _822) * _744;
        float _832 = _712 * 0.5;
        float _833 = _722 * 0.5;
        float _834 = _732 * 0.5;
        float _835 = dot(vec3(_832, _833, _834), vec3(_832, _833, _834));
        float _840 = (_835 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_835);
        float _848 = (dot(vec3(_337, _338, _339), vec3(_840 * _832, _840 * _833, _840 * _834)) + 1.0) * 0.5;
        float _3446 = isnan(0.0) ? _848 : (isnan(_848) ? 0.0 : max(_848, 0.0));
        float _857 = sqrt(((_833 * _833) + (_832 * _832)) + (_834 * _834)) / (_745 + 9.9999997473787516355514526367188e-06);
        float _3457 = isnan(0.0) ? _857 : (isnan(_857) ? 0.0 : max(_857, 0.0));
        float _858 = isnan(1.0) ? _3457 : (isnan(_3457) ? 1.0 : min(_3457, 1.0));
        float _859 = _858 * 2.0;
        float _863 = (1.0 - _858) / (_858 + 1.0);
        float _3468 = isnan(0.0) ? _863 : (isnan(_863) ? 0.0 : max(_863, 0.0));
        float _864 = isnan(1.0) ? _3468 : (isnan(_3468) ? 1.0 : min(_3468, 1.0));
        float _873 = ((((1.0 - _864) * (_859 + 2.0)) * exp2(log2(isnan(1.0) ? _3446 : (isnan(_3446) ? 1.0 : min(_3446, 1.0))) * (_859 + 1.0))) + _864) * _745;
        _881 = _712;
        _883 = _711;
        _884 = _710;
        _885 = _722;
        _886 = _721;
        _887 = _720;
        _888 = _732;
        _889 = _731;
        _890 = _730;
        _891 = _745;
        _892 = _744;
        _893 = _743;
        _894 = cbModelParam._m0[36u].z * (isnan(0.0) ? _789 : (isnan(_789) ? 0.0 : max(_789, 0.0)));
        _895 = cbModelParam._m0[36u].z * (isnan(0.0) ? _831 : (isnan(_831) ? 0.0 : max(_831, 0.0)));
        _896 = cbModelParam._m0[36u].z * (isnan(0.0) ? _873 : (isnan(_873) ? 0.0 : max(_873, 0.0)));
    }
    else
    {
        _881 = _882;
        _883 = _882;
        _884 = _882;
        _885 = _882;
        _886 = _882;
        _887 = _882;
        _888 = _882;
        _889 = _882;
        _890 = _882;
        _891 = _882;
        _892 = _882;
        _893 = _882;
        _894 = 0.0;
        _895 = 0.0;
        _896 = 0.0;
    }
    float _1191;
    float _1192;
    float _1193;
    float _1194;
    float _1195;
    float _1196;
    float _1197;
    float _1198;
    float _1199;
    float _1200;
    float _1201;
    float _1202;
    float _1203;
    float _1204;
    float _1205;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _922 = fma(_579, cbModelParam._m0[30u].z, fma(_575, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _571));
        float _926 = fma(_579, cbModelParam._m0[31u].z, fma(_575, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _571));
        float _930 = fma(_579, cbModelParam._m0[32u].z, fma(_575, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _571));
        float _953 = _571 + _337;
        float _954 = _575 + _338;
        float _955 = _579 + _339;
        float _965 = fma(_955, cbModelParam._m0[30u].z, fma(_954, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _953)) - _922;
        float _966 = fma(_955, cbModelParam._m0[31u].z, fma(_954, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _953)) - _926;
        float _967 = fma(_955, cbModelParam._m0[32u].z, fma(_954, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _953)) - _930;
        float _971 = inversesqrt(dot(vec3(_965, _966, _967), vec3(_965, _966, _967)));
        float _984 = ((_971 * _965) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_922 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _985 = ((_971 * _966) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_926 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _986 = ((_971 * _967) / cbModelParam._m0[35u].z) + ((((((_930 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _988 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_984, _985, _986), 0.0);
        vec4 _995 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_984, _985, _986), 0.0);
        vec4 _1002 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_984, _985, _986), 0.0);
        vec4 _1009 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_984, _985, _986), 0.0);
        float _1021 = exp2((_988.w + (-0.5)) * 20.0) * 2.0;
        float _1022 = _1021 * (_988.x + (-0.5));
        float _1023 = _1021 * (_988.y + (-0.5));
        float _1024 = _1021 * (_988.z + (-0.5));
        float _1031 = exp2((_995.w + (-0.5)) * 20.0) * 2.0;
        float _1032 = _1031 * (_995.x + (-0.5));
        float _1033 = _1031 * (_995.y + (-0.5));
        float _1034 = _1031 * (_995.z + (-0.5));
        float _1041 = exp2((_1002.w + (-0.5)) * 20.0) * 2.0;
        float _1042 = _1041 * (_1002.x + (-0.5));
        float _1043 = _1041 * (_1002.y + (-0.5));
        float _1044 = _1041 * (_1002.z + (-0.5));
        float _1051 = exp2((_1009.w + (-0.5)) * 20.0) * 2.0;
        float _1052 = _1051 * (_1009.x + (-0.5));
        float _1053 = _1051 * (_1009.y + (-0.5));
        float _1054 = _1051 * (_1009.z + (-0.5));
        float _1055 = isnan(0.0) ? _1052 : (isnan(_1052) ? 0.0 : max(_1052, 0.0));
        float _1056 = isnan(0.0) ? _1053 : (isnan(_1053) ? 0.0 : max(_1053, 0.0));
        float _1057 = isnan(0.0) ? _1054 : (isnan(_1054) ? 0.0 : max(_1054, 0.0));
        float _1058 = _1022 * 0.5;
        float _1059 = _1032 * 0.5;
        float _1060 = _1042 * 0.5;
        float _1061 = dot(vec3(_1058, _1059, _1060), vec3(_1058, _1059, _1060));
        float _1066 = (_1061 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1061);
        float _1074 = (dot(vec3(_337, _338, _339), vec3(_1066 * _1058, _1066 * _1059, _1066 * _1060)) + 1.0) * 0.5;
        float _3509 = isnan(0.0) ? _1074 : (isnan(_1074) ? 0.0 : max(_1074, 0.0));
        float _1083 = sqrt(((_1059 * _1059) + (_1058 * _1058)) + (_1060 * _1060)) / (_1055 + 9.9999997473787516355514526367188e-06);
        float _3520 = isnan(0.0) ? _1083 : (isnan(_1083) ? 0.0 : max(_1083, 0.0));
        float _1084 = isnan(1.0) ? _3520 : (isnan(_3520) ? 1.0 : min(_3520, 1.0));
        float _1085 = _1084 * 2.0;
        float _1089 = (1.0 - _1084) / (_1084 + 1.0);
        float _3531 = isnan(0.0) ? _1089 : (isnan(_1089) ? 0.0 : max(_1089, 0.0));
        float _1090 = isnan(1.0) ? _3531 : (isnan(_3531) ? 1.0 : min(_3531, 1.0));
        float _1099 = ((((1.0 - _1090) * (_1085 + 2.0)) * exp2(log2(isnan(1.0) ? _3509 : (isnan(_3509) ? 1.0 : min(_3509, 1.0))) * (_1085 + 1.0))) + _1090) * _1055;
        float _1100 = _1023 * 0.5;
        float _1101 = _1033 * 0.5;
        float _1102 = _1043 * 0.5;
        float _1103 = dot(vec3(_1100, _1101, _1102), vec3(_1100, _1101, _1102));
        float _1108 = (_1103 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1103);
        float _1116 = (dot(vec3(_337, _338, _339), vec3(_1108 * _1100, _1108 * _1101, _1108 * _1102)) + 1.0) * 0.5;
        float _3542 = isnan(0.0) ? _1116 : (isnan(_1116) ? 0.0 : max(_1116, 0.0));
        float _1125 = sqrt(((_1101 * _1101) + (_1100 * _1100)) + (_1102 * _1102)) / (_1056 + 9.9999997473787516355514526367188e-06);
        float _3553 = isnan(0.0) ? _1125 : (isnan(_1125) ? 0.0 : max(_1125, 0.0));
        float _1126 = isnan(1.0) ? _3553 : (isnan(_3553) ? 1.0 : min(_3553, 1.0));
        float _1127 = _1126 * 2.0;
        float _1131 = (1.0 - _1126) / (_1126 + 1.0);
        float _3564 = isnan(0.0) ? _1131 : (isnan(_1131) ? 0.0 : max(_1131, 0.0));
        float _1132 = isnan(1.0) ? _3564 : (isnan(_3564) ? 1.0 : min(_3564, 1.0));
        float _1141 = ((((1.0 - _1132) * (_1127 + 2.0)) * exp2(log2(isnan(1.0) ? _3542 : (isnan(_3542) ? 1.0 : min(_3542, 1.0))) * (_1127 + 1.0))) + _1132) * _1056;
        float _1142 = _1024 * 0.5;
        float _1143 = _1034 * 0.5;
        float _1144 = _1044 * 0.5;
        float _1145 = dot(vec3(_1142, _1143, _1144), vec3(_1142, _1143, _1144));
        float _1150 = (_1145 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1145);
        float _1158 = (dot(vec3(_337, _338, _339), vec3(_1150 * _1142, _1150 * _1143, _1150 * _1144)) + 1.0) * 0.5;
        float _3575 = isnan(0.0) ? _1158 : (isnan(_1158) ? 0.0 : max(_1158, 0.0));
        float _1167 = sqrt(((_1143 * _1143) + (_1142 * _1142)) + (_1144 * _1144)) / (_1057 + 9.9999997473787516355514526367188e-06);
        float _3586 = isnan(0.0) ? _1167 : (isnan(_1167) ? 0.0 : max(_1167, 0.0));
        float _1168 = isnan(1.0) ? _3586 : (isnan(_3586) ? 1.0 : min(_3586, 1.0));
        float _1169 = _1168 * 2.0;
        float _1173 = (1.0 - _1168) / (_1168 + 1.0);
        float _3597 = isnan(0.0) ? _1173 : (isnan(_1173) ? 0.0 : max(_1173, 0.0));
        float _1174 = isnan(1.0) ? _3597 : (isnan(_3597) ? 1.0 : min(_3597, 1.0));
        float _1183 = ((((1.0 - _1174) * (_1169 + 2.0)) * exp2(log2(isnan(1.0) ? _3575 : (isnan(_3575) ? 1.0 : min(_3575, 1.0))) * (_1169 + 1.0))) + _1174) * _1057;
        _1191 = _1024;
        _1192 = _1023;
        _1193 = _1022;
        _1194 = _1034;
        _1195 = _1033;
        _1196 = _1032;
        _1197 = _1044;
        _1198 = _1043;
        _1199 = _1042;
        _1200 = _1057;
        _1201 = _1056;
        _1202 = _1055;
        _1203 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1099 : (isnan(_1099) ? 0.0 : max(_1099, 0.0)));
        _1204 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1141 : (isnan(_1141) ? 0.0 : max(_1141, 0.0)));
        _1205 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1183 : (isnan(_1183) ? 0.0 : max(_1183, 0.0)));
    }
    else
    {
        _1191 = _882;
        _1192 = _882;
        _1193 = _882;
        _1194 = _882;
        _1195 = _882;
        _1196 = _882;
        _1197 = _882;
        _1198 = _882;
        _1199 = _882;
        _1200 = _882;
        _1201 = _882;
        _1202 = _882;
        _1203 = 0.0;
        _1204 = 0.0;
        _1205 = 0.0;
    }
    float _1215 = (cbModelParam._m0[1u].x * (_1203 - _894)) + _894;
    float _1216 = (cbModelParam._m0[1u].x * (_1204 - _895)) + _895;
    float _1217 = (cbModelParam._m0[1u].x * (_1205 - _896)) + _896;
    float _1238 = fma(_1217, cbSceneParam._m0[89u].z, fma(_1216, cbSceneParam._m0[89u].y, _1215 * cbSceneParam._m0[89u].x));
    float _1241 = fma(_1217, cbSceneParam._m0[90u].z, fma(_1216, cbSceneParam._m0[90u].y, _1215 * cbSceneParam._m0[90u].x));
    float _1244 = fma(_1217, cbSceneParam._m0[91u].z, fma(_1216, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1215));
    float _1259 = _515 * 0.5;
    float _1260 = _516 * 0.5;
    float _1261 = _517 * 0.5;
    float _1262 = dot(vec4(_1259, _1260, _1261, 1.0), vec4(_1193, _1196, _1199, _1202));
    float _1265 = dot(vec4(_1259, _1260, _1261, 1.0), vec4(_1192, _1195, _1198, _1201));
    float _1268 = dot(vec4(_1259, _1260, _1261, 1.0), vec4(_1191, _1194, _1197, _1200));
    float _1302;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1275 = dot(vec4(_1259, _1260, _1261, 1.0), vec4(_881, _885, _888, _891));
        float _1279 = dot(vec4(_1259, _1260, _1261, 1.0), vec4(_883, _886, _889, _892));
        float _1283 = dot(vec4(_1259, _1260, _1261, 1.0), vec4(_884, _887, _890, _893));
        float _1290 = dot(vec4(cbModelParam._m0[39u]), vec4(_1259, _1260, _1261, 1.0));
        _1302 = dot(vec3(isnan(0.0) ? _1283 : (isnan(_1283) ? 0.0 : max(_1283, 0.0)), isnan(0.0) ? _1279 : (isnan(_1279) ? 0.0 : max(_1279, 0.0)), isnan(0.0) ? _1275 : (isnan(_1275) ? 0.0 : max(_1275, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1290) ? 0.0 : (isnan(0.0) ? _1290 : max(0.0, _1290))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1302 = 1.0;
    }
    float _1313;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1304 = dot(vec4(cbModelParam._m0[40u]), vec4(_1259, _1260, _1261, 1.0));
        _1313 = dot(vec3(isnan(0.0) ? _1262 : (isnan(_1262) ? 0.0 : max(_1262, 0.0)), isnan(0.0) ? _1265 : (isnan(_1265) ? 0.0 : max(_1265, 0.0)), isnan(0.0) ? _1268 : (isnan(_1268) ? 0.0 : max(_1268, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1304) ? 0.0 : (isnan(0.0) ? _1304 : max(0.0, _1304))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1313 = 1.0;
    }
    float _1317 = (_1313 * cbModelParam._m0[1u].x) + (_1302 * (1.0 - cbModelParam._m0[1u].x));
    float _1327 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _340);
    float _1328 = isnan(_1327) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1327 : min(cbModelParam._m0[25u].z, _1327));
    float _1410;
    float _1412;
    float _1414;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1377 = fma(_579, cbModelParam._m0[13u].z, fma(_575, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _571)) + cbModelParam._m0[13u].w;
        float _1381 = fma(_579, cbModelParam._m0[14u].z, fma(_575, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _571)) + cbModelParam._m0[14u].w;
        float _1385 = fma(_579, cbModelParam._m0[15u].z, fma(_575, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _571)) + cbModelParam._m0[15u].w;
        float _1388 = fma(_517, cbModelParam._m0[13u].z, fma(_516, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _515));
        float _1391 = fma(_517, cbModelParam._m0[14u].z, fma(_516, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _515));
        float _1394 = fma(_517, cbModelParam._m0[15u].z, fma(_516, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _515));
        float _1422;
        if (_1388 > 0.0)
        {
            _1422 = abs((1.0 - _1377) / _1388);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1388 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1377 + 1.0) / _1388);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1422 = frontier_phi_14_12_ladder;
        }
        float _1629;
        if (_1391 > 0.0)
        {
            _1629 = abs((1.0 - _1381) / _1391);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1391 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1381 + 1.0) / _1391);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1629 = frontier_phi_23_19_ladder;
        }
        float _1883;
        if (_1394 > 0.0)
        {
            _1883 = abs((1.0 - _1385) / _1394);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1394 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1385 + 1.0) / _1394);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _1883 = frontier_phi_35_30_ladder;
        }
        float _1885 = isnan(_1629) ? _1422 : (isnan(_1422) ? _1629 : min(_1422, _1629));
        float _1886 = isnan(_1883) ? _1885 : (isnan(_1885) ? _1883 : min(_1885, _1883));
        float _1890 = (_1886 * _1388) + _1377;
        float _1891 = (_1886 * _1391) + _1381;
        float _1892 = (_1886 * _1394) + _1385;
        float _1893 = _1886 * 9.9999997473787516355514526367188e-05;
        float _1895 = (-1.0) - _1893;
        float _1897 = _1893 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_1892 > _1897) || ((_1892 < _1895) || ((_1891 > _1897) || ((_1891 < _1895) || ((_1890 < _1895) || (_1890 > _1897))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2020 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1892, cbModelParam._m0[9u].z, fma(_1891, cbModelParam._m0[9u].y, _1890 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1892, cbModelParam._m0[10u].z, fma(_1891, cbModelParam._m0[10u].y, _1890 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1892, cbModelParam._m0[11u].z, fma(_1891, cbModelParam._m0[11u].y, _1890 * cbModelParam._m0[11u].x))), _1328);
            frontier_phi_13_35_ladder = _2020.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2020.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2020.x * cbModelParam._m0[1u].y;
        }
        _1410 = frontier_phi_13_35_ladder_2;
        _1412 = frontier_phi_13_35_ladder_1;
        _1414 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1398 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_515, _516, _517), _1328);
        _1410 = _1398.x * cbModelParam._m0[1u].y;
        _1412 = _1398.y * cbModelParam._m0[1u].y;
        _1414 = _1398.z * cbModelParam._m0[1u].y;
    }
    float _1418 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _340);
    float _1419 = isnan(_1418) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1418 : min(cbModelParam._m0[25u].w, _1418));
    float _1512;
    float _1514;
    float _1516;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1476 = fma(_579, cbModelParam._m0[21u].z, fma(_575, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _571)) + cbModelParam._m0[21u].w;
        float _1480 = fma(_579, cbModelParam._m0[22u].z, fma(_575, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _571)) + cbModelParam._m0[22u].w;
        float _1484 = fma(_579, cbModelParam._m0[23u].z, fma(_575, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _571)) + cbModelParam._m0[23u].w;
        float _1487 = fma(_517, cbModelParam._m0[21u].z, fma(_516, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _515));
        float _1490 = fma(_517, cbModelParam._m0[22u].z, fma(_516, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _515));
        float _1493 = fma(_517, cbModelParam._m0[23u].z, fma(_516, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _515));
        float _1634;
        if (_1487 > 0.0)
        {
            _1634 = abs((1.0 - _1476) / _1487);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1487 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1476 + 1.0) / _1487);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1634 = frontier_phi_25_21_ladder;
        }
        float _1910;
        if (_1490 > 0.0)
        {
            _1910 = abs((1.0 - _1480) / _1490);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1490 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1480 + 1.0) / _1490);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1910 = frontier_phi_37_32_ladder;
        }
        float _2123;
        if (_1493 > 0.0)
        {
            _2123 = abs((1.0 - _1484) / _1493);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1493 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1484 + 1.0) / _1493);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2123 = frontier_phi_46_43_ladder;
        }
        float _2125 = isnan(_1910) ? _1634 : (isnan(_1634) ? _1910 : min(_1634, _1910));
        float _2126 = isnan(_2123) ? _2125 : (isnan(_2125) ? _2123 : min(_2125, _2123));
        float _2130 = (_2126 * _1487) + _1476;
        float _2131 = (_2126 * _1490) + _1480;
        float _2132 = (_2126 * _1493) + _1484;
        float _2133 = _2126 * 9.9999997473787516355514526367188e-05;
        float _2134 = (-1.0) - _2133;
        float _2136 = _2133 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2132 > _2136) || ((_2132 < _2134) || ((_2131 > _2136) || ((_2131 < _2134) || ((_2130 < _2134) || (_2130 > _2136))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2360 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2132, cbModelParam._m0[17u].z, fma(_2131, cbModelParam._m0[17u].y, _2130 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2132, cbModelParam._m0[18u].z, fma(_2131, cbModelParam._m0[18u].y, _2130 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2132, cbModelParam._m0[19u].z, fma(_2131, cbModelParam._m0[19u].y, _2130 * cbModelParam._m0[19u].x))), _1419);
            frontier_phi_22_46_ladder = _2360.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2360.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2360.x * cbModelParam._m0[1u].z;
        }
        _1512 = frontier_phi_22_46_ladder_2;
        _1514 = frontier_phi_22_46_ladder_1;
        _1516 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1496 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_515, _516, _517), _1419);
        _1512 = _1496.x * cbModelParam._m0[1u].z;
        _1514 = _1496.y * cbModelParam._m0[1u].z;
        _1516 = _1496.z * cbModelParam._m0[1u].z;
    }
    float _1529 = (((_542 * _492) + _543) * _507) * ((cbModelParam._m0[1u].w * (_1512 - _1410)) + _1410);
    float _1531 = (((_542 * _494) + _543) * _507) * ((cbModelParam._m0[1u].w * (_1514 - _1412)) + _1412);
    float _1533 = (((_542 * _495) + _543) * _507) * ((cbModelParam._m0[1u].w * (_1516 - _1414)) + _1414);
    float _1536 = fma(_1533, cbSceneParam._m0[89u].z, fma(_1531, cbSceneParam._m0[89u].y, _1529 * cbSceneParam._m0[89u].x));
    float _1539 = fma(_1533, cbSceneParam._m0[90u].z, fma(_1531, cbSceneParam._m0[90u].y, _1529 * cbSceneParam._m0[90u].x));
    float _1542 = fma(_1533, cbSceneParam._m0[91u].z, fma(_1531, cbSceneParam._m0[91u].y, _1529 * cbSceneParam._m0[91u].x));
    uvec4 _1552 = floatBitsToUint(cbInstanceData._m0[_467 + 5u]);
    uint _1554 = _1552.x * 14u;
    uint _1555 = _1554 + 13u;
    float _1562 = _507 + (-1.0);
    float _1567 = (cbLight._m0[_1555].x * _1562) + 1.0;
    float _1568 = (cbLight._m0[_1555].y * _1562) + 1.0;
    float _1569 = (cbLight._m0[_1555].z * _1562) + 1.0;
    float _1570 = (cbLight._m0[_1555].w * _1562) + 1.0;
    uint _1571 = _1554 + 5u;
    float _1577 = isnan(1.0) ? _1568 : (isnan(_1568) ? 1.0 : min(_1568, 1.0));
    uint _1581 = _1554 + 4u;
    float _1588 = isnan(1.0) ? _1567 : (isnan(_1567) ? 1.0 : min(_1567, 1.0));
    uint _1592 = _1554 | 1u;
    float _1603 = dot(vec3(cbLight._m0[_1554].xyz), vec3(_337, _338, _339));
    float _1606 = dot(vec3(cbLight._m0[_1592].xyz), vec3(_337, _338, _339));
    float _3733 = isnan(0.0) ? _1603 : (isnan(_1603) ? 0.0 : max(_1603, 0.0));
    float _3744 = isnan(0.0) ? _1606 : (isnan(_1606) ? 0.0 : max(_1606, 0.0));
    float _1611 = (isnan(1.0) ? _3733 : (isnan(_3733) ? 1.0 : min(_3733, 1.0))) * 0.3183098733425140380859375;
    float _1613 = (isnan(1.0) ? _3744 : (isnan(_3744) ? 1.0 : min(_3744, 1.0))) * 0.3183098733425140380859375;
    float _1620 = ((cbLight._m0[_1571].x * _1577) * _1613) + ((cbLight._m0[_1581].x * _1588) * _1611);
    float _1621 = ((_1577 * cbLight._m0[_1571].y) * _1613) + ((_1588 * cbLight._m0[_1581].y) * _1611);
    float _1622 = ((_1577 * cbLight._m0[_1571].z) * _1613) + ((_1588 * cbLight._m0[_1581].z) * _1611);
    uvec4 _1626 = floatBitsToUint(cbLight._m0[_1554 + 12u]);
    bool _1628 = _1626.x == 0u;
    float _1639;
    float _1641;
    float _1643;
    if (_1628)
    {
        _1639 = _1620;
        _1641 = _1621;
        _1643 = _1622;
    }
    else
    {
        uint _1647 = _1554 + 6u;
        float _1663 = (dot(vec3(cbLight._m0[_1554 + 2u].xyz), vec3(_337, _338, _339)) * 0.5) + 0.5;
        float _1664 = _1663 * _1663;
        float _3755 = isnan(0.0) ? _1664 : (isnan(_1664) ? 0.0 : max(_1664, 0.0));
        float _1665 = isnan(1.0) ? _3755 : (isnan(_3755) ? 1.0 : min(_3755, 1.0));
        float _1666 = isnan(1.0) ? _1569 : (isnan(_1569) ? 1.0 : min(_1569, 1.0));
        _1639 = (((cbLight._m0[_1647].x * 0.3183098733425140380859375) * _1665) * _1666) + _1620;
        _1641 = (((cbLight._m0[_1647].y * 0.3183098733425140380859375) * _1665) * _1666) + _1621;
        _1643 = (((cbLight._m0[_1647].z * 0.3183098733425140380859375) * _1665) * _1666) + _1622;
    }
    bool _1646 = _1626.y == 0u;
    float _1684;
    float _1686;
    float _1688;
    if (_1646)
    {
        _1684 = _1639;
        _1686 = _1641;
        _1688 = _1643;
    }
    else
    {
        uint _1854 = _1554 + 7u;
        float _1870 = (dot(vec3(cbLight._m0[_1554 + 3u].xyz), vec3(_337, _338, _339)) * 0.5) + 0.5;
        float _1871 = _1870 * _1870;
        float _3771 = isnan(0.0) ? _1871 : (isnan(_1871) ? 0.0 : max(_1871, 0.0));
        float _1872 = isnan(1.0) ? _3771 : (isnan(_3771) ? 1.0 : min(_3771, 1.0));
        float _1873 = isnan(1.0) ? _1570 : (isnan(_1570) ? 1.0 : min(_1570, 1.0));
        _1684 = (((cbLight._m0[_1854].x * 0.3183098733425140380859375) * _1872) * _1873) + _1639;
        _1686 = (((cbLight._m0[_1854].y * 0.3183098733425140380859375) * _1872) * _1873) + _1641;
        _1688 = (((cbLight._m0[_1854].z * 0.3183098733425140380859375) * _1872) * _1873) + _1643;
    }
    uint _1691 = _1554 + 8u;
    float _1704 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1554].w)) * _340) * 0.949999988079071044921875);
    float _1705 = _1704 * _1704;
    float _1706 = cbLight._m0[_1554].x + _418;
    float _1707 = cbLight._m0[_1554].y + _419;
    float _1708 = cbLight._m0[_1554].z + _420;
    float _1712 = inversesqrt(dot(vec3(_1706, _1707, _1708), vec3(_1706, _1707, _1708)));
    float _1713 = _1712 * _1706;
    float _1714 = _1712 * _1707;
    float _1715 = _1712 * _1708;
    float _1716 = dot(vec3(_337, _338, _339), vec3(cbLight._m0[_1554].xyz));
    float _3787 = isnan(0.0) ? _1716 : (isnan(_1716) ? 0.0 : max(_1716, 0.0));
    float _1719 = isnan(1.0) ? _3787 : (isnan(_3787) ? 1.0 : min(_3787, 1.0));
    float _3798 = isnan(0.0) ? _508 : (isnan(_508) ? 0.0 : max(_508, 0.0));
    float _1720 = isnan(1.0) ? _3798 : (isnan(_3798) ? 1.0 : min(_3798, 1.0));
    float _1721 = dot(vec3(_337, _338, _339), vec3(_1713, _1714, _1715));
    float _3809 = isnan(0.0) ? _1721 : (isnan(_1721) ? 0.0 : max(_1721, 0.0));
    float _1724 = isnan(1.0) ? _3809 : (isnan(_3809) ? 1.0 : min(_3809, 1.0));
    float _1725 = dot(vec3(cbLight._m0[_1554].xyz), vec3(_1713, _1714, _1715));
    float _3820 = isnan(0.0) ? _1725 : (isnan(_1725) ? 0.0 : max(_1725, 0.0));
    float _1729 = _1705 * _1705;
    float _1733 = ((_1724 * _1724) * (_1729 + (-1.0))) + 1.0;
    float _1741 = exp2(log2(1.0 - (isnan(1.0) ? _3820 : (isnan(_3820) ? 1.0 : min(_3820, 1.0)))) * 5.0);
    float _1742 = 0.959999978542327880859375 - _489;
    float _1744 = 0.959999978542327880859375 - _490;
    float _1745 = 0.959999978542327880859375 - _491;
    float _1752 = 1.0 - _1705;
    float _1763 = (0.5 / (((_1720 * ((_1719 * _1752) + _1705)) + 9.9999999392252902907785028219223e-09) + (((_1720 * _1752) + _1705) * _1719))) * _1719;
    float _3831 = isnan(0.0) ? _1763 : (isnan(_1763) ? 0.0 : max(_1763, 0.0));
    float _1765 = (isnan(1.0) ? _3831 : (isnan(_3831) ? 1.0 : min(_3831, 1.0))) * (_1729 / ((_1733 * _1733) * 3.141590118408203125));
    uint _1776 = _1554 + 9u;
    float _1787 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1592].w)) * _340) * 0.949999988079071044921875);
    float _1788 = _1787 * _1787;
    float _1789 = cbLight._m0[_1592].x + _418;
    float _1790 = cbLight._m0[_1592].y + _419;
    float _1791 = cbLight._m0[_1592].z + _420;
    float _1795 = inversesqrt(dot(vec3(_1789, _1790, _1791), vec3(_1789, _1790, _1791)));
    float _1796 = _1795 * _1789;
    float _1797 = _1795 * _1790;
    float _1798 = _1795 * _1791;
    float _1799 = dot(vec3(_337, _338, _339), vec3(cbLight._m0[_1592].xyz));
    float _3842 = isnan(0.0) ? _1799 : (isnan(_1799) ? 0.0 : max(_1799, 0.0));
    float _1802 = isnan(1.0) ? _3842 : (isnan(_3842) ? 1.0 : min(_3842, 1.0));
    float _1803 = dot(vec3(_337, _338, _339), vec3(_1796, _1797, _1798));
    float _3853 = isnan(0.0) ? _1803 : (isnan(_1803) ? 0.0 : max(_1803, 0.0));
    float _1806 = isnan(1.0) ? _3853 : (isnan(_3853) ? 1.0 : min(_3853, 1.0));
    float _1807 = dot(vec3(cbLight._m0[_1592].xyz), vec3(_1796, _1797, _1798));
    float _3864 = isnan(0.0) ? _1807 : (isnan(_1807) ? 0.0 : max(_1807, 0.0));
    float _1811 = _1788 * _1788;
    float _1815 = ((_1806 * _1806) * (_1811 + (-1.0))) + 1.0;
    float _1822 = exp2(log2(1.0 - (isnan(1.0) ? _3864 : (isnan(_3864) ? 1.0 : min(_3864, 1.0)))) * 5.0);
    float _1829 = 1.0 - _1788;
    float _1839 = (0.5 / (((_1720 * ((_1802 * _1829) + _1788)) + 9.9999999392252902907785028219223e-09) + (((_1720 * _1829) + _1788) * _1802))) * _1802;
    float _3875 = isnan(0.0) ? _1839 : (isnan(_1839) ? 0.0 : max(_1839, 0.0));
    float _1841 = (isnan(1.0) ? _3875 : (isnan(_3875) ? 1.0 : min(_3875, 1.0))) * (_1811 / ((_1815 * _1815) * 3.141590118408203125));
    float _1851 = (((((_1822 * _1742) + _492) * cbLight._m0[_1776].x) * _1841) * _1577) + (((((_1741 * _1742) + _492) * cbLight._m0[_1691].x) * _1765) * _1588);
    float _1852 = (((((_1822 * _1744) + _494) * cbLight._m0[_1776].y) * _1841) * _1577) + (((((_1741 * _1744) + _494) * cbLight._m0[_1691].y) * _1765) * _1588);
    float _1853 = (((((_1822 * _1745) + _495) * cbLight._m0[_1776].z) * _1841) * _1577) + (((((_1741 * _1745) + _495) * cbLight._m0[_1691].z) * _1765) * _1588);
    float _1915;
    float _1917;
    float _1919;
    if (_1628)
    {
        _1915 = _1851;
        _1917 = _1852;
        _1919 = _1853;
    }
    else
    {
        uint _1921 = _1554 + 2u;
        uint _1925 = _1554 + 10u;
        float _1939 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1921].w)) * _340) * 0.949999988079071044921875);
        float _1940 = _1939 * _1939;
        float _1941 = cbLight._m0[_1921].x + _418;
        float _1942 = cbLight._m0[_1921].y + _419;
        float _1943 = cbLight._m0[_1921].z + _420;
        float _1947 = inversesqrt(dot(vec3(_1941, _1942, _1943), vec3(_1941, _1942, _1943)));
        float _1948 = _1947 * _1941;
        float _1949 = _1947 * _1942;
        float _1950 = _1947 * _1943;
        float _1951 = dot(vec3(_337, _338, _339), vec3(cbLight._m0[_1921].xyz));
        float _3886 = isnan(0.0) ? _1951 : (isnan(_1951) ? 0.0 : max(_1951, 0.0));
        float _1954 = isnan(1.0) ? _3886 : (isnan(_3886) ? 1.0 : min(_3886, 1.0));
        float _1955 = dot(vec3(_337, _338, _339), vec3(_1948, _1949, _1950));
        float _3897 = isnan(0.0) ? _1955 : (isnan(_1955) ? 0.0 : max(_1955, 0.0));
        float _1958 = isnan(1.0) ? _3897 : (isnan(_3897) ? 1.0 : min(_3897, 1.0));
        float _1959 = dot(vec3(cbLight._m0[_1921].xyz), vec3(_1948, _1949, _1950));
        float _3908 = isnan(0.0) ? _1959 : (isnan(_1959) ? 0.0 : max(_1959, 0.0));
        float _1963 = _1940 * _1940;
        float _1967 = ((_1958 * _1958) * (_1963 + (-1.0))) + 1.0;
        float _1974 = exp2(log2(1.0 - (isnan(1.0) ? _3908 : (isnan(_3908) ? 1.0 : min(_3908, 1.0)))) * 5.0);
        float _1981 = 1.0 - _1940;
        float _1991 = (0.5 / (((_1720 * ((_1954 * _1981) + _1940)) + 9.9999999392252902907785028219223e-09) + (((_1720 * _1981) + _1940) * _1954))) * _1954;
        float _3919 = isnan(0.0) ? _1991 : (isnan(_1991) ? 0.0 : max(_1991, 0.0));
        float _1993 = (isnan(1.0) ? _3919 : (isnan(_3919) ? 1.0 : min(_3919, 1.0))) * (_1963 / ((_1967 * _1967) * 3.141590118408203125));
        float _1994 = isnan(1.0) ? _1569 : (isnan(_1569) ? 1.0 : min(_1569, 1.0));
        _1915 = (((((_1974 * _1742) + _492) * cbLight._m0[_1925].x) * _1993) * _1994) + _1851;
        _1917 = (((((_1974 * _1744) + _494) * cbLight._m0[_1925].y) * _1993) * _1994) + _1852;
        _1919 = (((((_1974 * _1745) + _495) * cbLight._m0[_1925].z) * _1993) * _1994) + _1853;
    }
    float _2029;
    float _2031;
    float _2033;
    if (_1646)
    {
        _2029 = _1915;
        _2031 = _1917;
        _2033 = _1919;
    }
    else
    {
        uint _2040 = _1554 + 3u;
        uint _2044 = _1554 + 11u;
        float _2058 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2040].w)) * _340) * 0.949999988079071044921875);
        float _2059 = _2058 * _2058;
        float _2060 = cbLight._m0[_2040].x + _418;
        float _2061 = cbLight._m0[_2040].y + _419;
        float _2062 = cbLight._m0[_2040].z + _420;
        float _2066 = inversesqrt(dot(vec3(_2060, _2061, _2062), vec3(_2060, _2061, _2062)));
        float _2067 = _2066 * _2060;
        float _2068 = _2066 * _2061;
        float _2069 = _2066 * _2062;
        float _2070 = dot(vec3(_337, _338, _339), vec3(cbLight._m0[_2040].xyz));
        float _3935 = isnan(0.0) ? _2070 : (isnan(_2070) ? 0.0 : max(_2070, 0.0));
        float _2073 = isnan(1.0) ? _3935 : (isnan(_3935) ? 1.0 : min(_3935, 1.0));
        float _2074 = dot(vec3(_337, _338, _339), vec3(_2067, _2068, _2069));
        float _3946 = isnan(0.0) ? _2074 : (isnan(_2074) ? 0.0 : max(_2074, 0.0));
        float _2077 = isnan(1.0) ? _3946 : (isnan(_3946) ? 1.0 : min(_3946, 1.0));
        float _2078 = dot(vec3(cbLight._m0[_2040].xyz), vec3(_2067, _2068, _2069));
        float _3957 = isnan(0.0) ? _2078 : (isnan(_2078) ? 0.0 : max(_2078, 0.0));
        float _2082 = _2059 * _2059;
        float _2086 = ((_2077 * _2077) * (_2082 + (-1.0))) + 1.0;
        float _2093 = exp2(log2(1.0 - (isnan(1.0) ? _3957 : (isnan(_3957) ? 1.0 : min(_3957, 1.0)))) * 5.0);
        float _2100 = 1.0 - _2059;
        float _2110 = (0.5 / (((_1720 * ((_2073 * _2100) + _2059)) + 9.9999999392252902907785028219223e-09) + (((_1720 * _2100) + _2059) * _2073))) * _2073;
        float _3968 = isnan(0.0) ? _2110 : (isnan(_2110) ? 0.0 : max(_2110, 0.0));
        float _2112 = (isnan(1.0) ? _3968 : (isnan(_3968) ? 1.0 : min(_3968, 1.0))) * (_2082 / ((_2086 * _2086) * 3.141590118408203125));
        float _2113 = isnan(1.0) ? _1570 : (isnan(_1570) ? 1.0 : min(_1570, 1.0));
        _2029 = (((((_2093 * _1742) + _492) * cbLight._m0[_2044].x) * _2112) * _2113) + _1915;
        _2031 = (((((_2093 * _1744) + _494) * cbLight._m0[_2044].y) * _2112) * _2113) + _1917;
        _2033 = (((((_2093 * _1745) + _495) * cbLight._m0[_2044].z) * _2112) * _2113) + _1919;
    }
    float _2248;
    float _2250;
    float _2252;
    float _2254;
    float _2256;
    float _2258;
    if (_1552.y == 0u)
    {
        float _2188 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2189 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2188;
        float _2190 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2188;
        float _2191 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2188;
        uvec4 _2203 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2204 = _2203.x;
        uint _2215 = uint((float(_2203.y) * floor(float(uint(cbSceneParam._m0[85u].y * _427) / _2204))) + floor(float(uint(cbSceneParam._m0[85u].x * _426) / _2204)));
        float _2225 = (log2(_2191 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2226 = isnan(0.0) ? _2225 : (isnan(_2225) ? 0.0 : max(_2225, 0.0));
        uint _2229 = uint(isnan(14.0) ? _2226 : (isnan(_2226) ? 14.0 : min(_2226, 14.0)));
        uvec4 _2234 = texelFetch(g_lightClusterGridBuffer, int(((_2229 << 2u) + (_2215 << 6u)) >> 2u));
        uint _2235 = _2234.x;
        uint _2236 = _2203.z;
        float _2365;
        float _2367;
        float _2369;
        float _2371;
        float _2373;
        float _2375;
        if (((((1u << ((_2236 >> 4u) & 15u)) + 4294967295u) & _2235) == 0u) || ((_2236 & 240u) == 0u))
        {
            _2365 = 0.0;
            _2367 = 0.0;
            _2369 = 0.0;
            _2371 = 0.0;
            _2373 = 0.0;
            _2375 = 0.0;
        }
        else
        {
            float _2366;
            float _2368;
            float _2370;
            float _2372;
            float _2374;
            float _2376;
            float _2518 = 0.0;
            float _2519 = 0.0;
            float _2520 = 0.0;
            float _2521 = 0.0;
            float _2522 = 0.0;
            float _2523 = 0.0;
            uint _2524 = 0u;
            uint _2533;
            bool _2534;
            for (;;)
            {
                _2533 = texelFetch(g_lightClassification, int((((_2229 << 5u) + (_2215 << 9u)) + (_2524 << 2u)) >> 2u)).x;
                _2534 = _2533 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2534)
                {
                    frontier_phi_61_pred = _2518;
                    frontier_phi_61_pred_1 = _2523;
                    frontier_phi_61_pred_2 = _2522;
                    frontier_phi_61_pred_3 = _2521;
                    frontier_phi_61_pred_4 = _2520;
                    frontier_phi_61_pred_5 = _2519;
                }
                else
                {
                    float _2642;
                    float _2643;
                    float _2644;
                    float _2645;
                    float _2646;
                    float _2647;
                    uint _2648;
                    _2642 = _2518;
                    _2643 = _2519;
                    _2644 = _2520;
                    _2645 = _2521;
                    _2646 = _2522;
                    _2647 = _2523;
                    _2648 = _2533;
                    float _2574;
                    float _2575;
                    float _2576;
                    float _2577;
                    float _2578;
                    float _2579;
                    for (;;)
                    {
                        uint _2652 = uint(findLSB(_2648)) + (_2524 << 5u);
                        uint _2649 = (_2648 + 4294967295u) & _2648;
                        uint _2654 = _2652 * 48u;
                        vec4 _2668 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2654)).x, texelFetch(g_PointLightRenderingBuffer, int(_2654 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2654 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2654 + 3u)).x));
                        uint _2674 = (_2652 * 48u) + 4u;
                        vec4 _2687 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2674)).x, texelFetch(g_PointLightRenderingBuffer, int(_2674 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2674 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2674 + 3u)).x));
                        uint _2693 = (_2652 * 48u) + 8u;
                        vec3 _2704 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2693)).x, texelFetch(g_PointLightRenderingBuffer, int(_2693 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2693 + 2u)).x));
                        float _2708 = _2668.x - _2189;
                        float _2709 = _2668.y - _2190;
                        float _2710 = _2668.z - _2191;
                        float _2711 = dot(vec3(_2708, _2709, _2710), vec3(_2708, _2709, _2710));
                        float _2714 = inversesqrt(_2711);
                        float _2715 = _2714 * _2708;
                        float _2716 = _2714 * _2709;
                        float _2717 = _2714 * _2710;
                        float _2718 = dot(vec3(_448, _451, _454), vec3(_2715, _2716, _2717));
                        float _2723 = 1.0 - (_2711 * _2668.w);
                        float _3994 = isnan(0.0) ? _2723 : (isnan(_2723) ? 0.0 : max(_2723, 0.0));
                        float _2724 = isnan(1.0) ? _3994 : (isnan(_3994) ? 1.0 : min(_3994, 1.0));
                        float _2725 = sqrt(_2711) * _2687.w;
                        float _2728 = 1.39999997615814208984375 / (_2725 + 1.39999997615814208984375);
                        float _2729 = _2728 * _2728;
                        float _2732 = ((1.0 - _2729) * _2718) + _2729;
                        float _2735 = _2725 * _2725;
                        float _2739 = ((isnan(0.0) ? _2732 : (isnan(_2732) ? 0.0 : max(_2732, 0.0))) * _2724) / ((_2735 * 0.699999988079071044921875) + 1.0);
                        float _2743 = (-0.0) - _2189;
                        float _2744 = (-0.0) - _2190;
                        float _2745 = (-0.0) - _2191;
                        float _2749 = inversesqrt(dot(vec3(_2743, _2744, _2745), vec3(_2743, _2744, _2745)));
                        float _2750 = _2749 * _2743;
                        float _2751 = _2749 * _2744;
                        float _2752 = _2749 * _2745;
                        float _2760 = exp2(log2(1.0 / ((_2735 * 3.5) + 5.0)) * 0.25);
                        float _2761 = 1.0 - _523;
                        float _2768 = sqrt(1.0 - ((1.0 - (_2761 * _2761)) * (1.0 - (_2760 * _2760))));
                        float _2769 = _2768 * _2768;
                        float _2770 = _2769 * _2769;
                        float _2771 = _2750 + _2715;
                        float _2772 = _2751 + _2716;
                        float _2773 = _2752 + _2717;
                        float _2777 = inversesqrt(dot(vec3(_2771, _2772, _2773), vec3(_2771, _2772, _2773)));
                        float _2781 = dot(vec3(_448, _451, _454), vec3(_2750, _2751, _2752));
                        float _4010 = isnan(0.0) ? _2781 : (isnan(_2781) ? 0.0 : max(_2781, 0.0));
                        float _2784 = isnan(1.0) ? _4010 : (isnan(_4010) ? 1.0 : min(_4010, 1.0));
                        float _2785 = dot(vec3(_448, _451, _454), vec3(_2777 * _2771, _2777 * _2772, _2777 * _2773));
                        float _4021 = isnan(0.0) ? _2785 : (isnan(_2785) ? 0.0 : max(_2785, 0.0));
                        float _2788 = isnan(1.0) ? _4021 : (isnan(_4021) ? 1.0 : min(_4021, 1.0));
                        float _2792 = ((_2788 * _2788) * (_2770 + (-1.0))) + 1.0;
                        float _2793 = _2728 * _2769;
                        float _2794 = _2793 * _2793;
                        float _2797 = ((1.0 - _2794) * _2718) + _2794;
                        float _4032 = isnan(0.0) ? _2797 : (isnan(_2797) ? 0.0 : max(_2797, 0.0));
                        float _2798 = isnan(1.0) ? _4032 : (isnan(_4032) ? 1.0 : min(_4032, 1.0));
                        float _2799 = 1.0 - _2769;
                        float _2809 = (0.5 / (((_2798 * ((_2784 * _2799) + _2769)) + 9.9999999392252902907785028219223e-09) + (((_2798 * _2799) + _2769) * _2784))) * _2798;
                        float _4043 = isnan(0.0) ? _2809 : (isnan(_2809) ? 0.0 : max(_2809, 0.0));
                        float _2820 = (((_2770 * 3.1415927410125732421875) * (isnan(1.0) ? _4043 : (isnan(_4043) ? 1.0 : min(_4043, 1.0)))) / ((_2792 * _2792) * ((_2735 * 2.1991131305694580078125) + 3.141590118408203125))) * _2724;
                        _2577 = (_2739 * _2687.x) + _2645;
                        _2578 = (_2739 * _2687.y) + _2646;
                        _2579 = (_2739 * _2687.z) + _2647;
                        _2574 = (_2820 * _2704.x) + _2642;
                        _2575 = (_2820 * _2704.y) + _2643;
                        _2576 = (_2820 * _2704.z) + _2644;
                        if (_2649 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2642 = _2574;
                            _2643 = _2575;
                            _2644 = _2576;
                            _2645 = _2577;
                            _2646 = _2578;
                            _2647 = _2579;
                            _2648 = _2649;
                        }
                    }
                    frontier_phi_61_pred = _2574;
                    frontier_phi_61_pred_1 = _2579;
                    frontier_phi_61_pred_2 = _2578;
                    frontier_phi_61_pred_3 = _2577;
                    frontier_phi_61_pred_4 = _2576;
                    frontier_phi_61_pred_5 = _2575;
                }
                _2366 = frontier_phi_61_pred;
                _2376 = frontier_phi_61_pred_1;
                _2374 = frontier_phi_61_pred_2;
                _2372 = frontier_phi_61_pred_3;
                _2370 = frontier_phi_61_pred_4;
                _2368 = frontier_phi_61_pred_5;
                uint _2525 = _2524 + 1u;
                if (_2525 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2518 = _2366;
                    _2519 = _2368;
                    _2520 = _2370;
                    _2521 = _2372;
                    _2522 = _2374;
                    _2523 = _2376;
                    _2524 = _2525;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2365 = _2366;
            _2367 = _2368;
            _2369 = _2370;
            _2371 = _2372;
            _2373 = _2374;
            _2375 = _2376;
        }
        uvec4 _2379 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2380 = _2379.z;
        uint _2382 = (_2380 >> 8u) & 15u;
        float _2486;
        float _2488;
        float _2490;
        float _2492;
        float _2494;
        float _2496;
        if (((4294967295u << _2382) & _2235) == 0u)
        {
            _2486 = _2365;
            _2488 = _2367;
            _2490 = _2369;
            _2492 = _2371;
            _2494 = _2373;
            _2496 = _2375;
        }
        else
        {
            float _2511 = inversesqrt(dot(vec3(_2189, _2190, _2191), vec3(_2189, _2190, _2191)));
            float _2512 = _2511 * _2189;
            float _2513 = _2511 * _2190;
            float _2514 = _2511 * _2191;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2382 < ((_2380 >> 12u) & 15u))
            {
                float _2487;
                float _2489;
                float _2491;
                float _2493;
                float _2495;
                float _2497;
                float _2625 = _2365;
                float _2626 = _2367;
                float _2627 = _2369;
                float _2628 = _2371;
                float _2629 = _2373;
                float _2630 = _2375;
                uint _2631 = _2382;
                uint _2640;
                bool _2641;
                for (;;)
                {
                    _2640 = texelFetch(g_lightClassification, int((((_2229 << 5u) + (_2215 << 9u)) + (_2631 << 2u)) >> 2u)).x;
                    _2641 = _2640 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2641)
                    {
                        frontier_phi_67_pred = _2628;
                        frontier_phi_67_pred_1 = _2629;
                        frontier_phi_67_pred_2 = _2630;
                        frontier_phi_67_pred_3 = _2627;
                        frontier_phi_67_pred_4 = _2626;
                        frontier_phi_67_pred_5 = _2625;
                    }
                    else
                    {
                        float _2825;
                        float _2826;
                        float _2827;
                        float _2828;
                        float _2829;
                        float _2830;
                        float _3121;
                        float _3122;
                        float _3123;
                        float _3124;
                        float _3125;
                        float _3126;
                        float _2838 = _2625;
                        float _2839 = _2626;
                        float _2840 = _2627;
                        float _2841 = _2628;
                        float _2842 = _2629;
                        float _2843 = _2630;
                        uint _2844 = _2640;
                        uint _2845;
                        vec4 _2870;
                        float _2871;
                        vec4 _2886;
                        vec3 _2898;
                        vec4 _2914;
                        vec4 _2930;
                        float _2977;
                        bool _2978;
                        for (;;)
                        {
                            uint _2855 = ((_2631 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2844));
                            _2845 = (_2844 + 4294967295u) & _2844;
                            uint _2857 = _2855 * 40u;
                            _2870 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2857)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2857 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2857 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2857 + 3u)).x));
                            _2871 = _2870.w;
                            uint _2873 = (_2855 * 40u) + 4u;
                            _2886 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2873)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2873 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2873 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2873 + 3u)).x));
                            uint _2888 = (_2855 * 40u) + 8u;
                            _2898 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2888)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2888 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2888 + 2u)).x));
                            uint _2901 = (_2855 * 40u) + 16u;
                            _2914 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2901)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2901 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2901 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2901 + 3u)).x));
                            uint _2917 = (_2855 * 40u) + 20u;
                            _2930 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2917)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2917 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2917 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2917 + 3u)).x));
                            uint _2933 = (_2855 * 40u) + 24u;
                            vec4 _2946 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2933)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2933 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2933 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2933 + 3u)).x));
                            uint _2952 = (_2855 * 40u) + 28u;
                            vec4 _2965 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2952)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2952 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2952 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2952 + 3u)).x));
                            _2977 = fma(_2191, _2965.z, fma(_2190, _2965.y, _2965.x * _2189)) + _2965.w;
                            _2978 = !((fma(_2191, _2946.z, fma(_2190, _2946.y, _2946.x * _2189)) + _2946.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_2978)
                            {
                                float _3005 = _2870.x - _2189;
                                float _3006 = _2870.y - _2190;
                                float _3007 = _2870.z - _2191;
                                float _3008 = dot(vec3(_3005, _3006, _3007), vec3(_3005, _3006, _3007));
                                float _3011 = inversesqrt(_3008);
                                float _3012 = _3011 * _3005;
                                float _3013 = _3011 * _3006;
                                float _3014 = _3011 * _3007;
                                float _3018 = 1.0 - (_3008 / (_2871 * _2871));
                                float _4054 = isnan(0.0) ? _3018 : (isnan(_3018) ? 0.0 : max(_3018, 0.0));
                                float _3019 = isnan(1.0) ? _4054 : (isnan(_4054) ? 1.0 : min(_4054, 1.0));
                                float _3023 = sqrt(_3008) * _2886.w;
                                float _3025 = 1.39999997615814208984375 / (_3023 + 1.39999997615814208984375);
                                float _3026 = _3025 * _3025;
                                float _3029 = ((1.0 - _3026) * dot(vec3(_3012, _3013, _3014), vec3(_448, _451, _454))) + _3026;
                                float _3032 = _3023 * _3023;
                                float _3036 = (fma(_2191, _2914.z, fma(_2190, _2914.y, _2914.x * _2189)) + _2914.w) / _2977;
                                float _3037 = (fma(_2191, _2930.z, fma(_2190, _2930.y, _2930.x * _2189)) + _2930.w) / _2977;
                                float _3041 = 1.0 - dot(vec2(_3036, _3037), vec2(_3036, _3037));
                                float _4070 = isnan(0.0) ? _3041 : (isnan(_3041) ? 0.0 : max(_3041, 0.0));
                                float _3042 = isnan(1.0) ? _4070 : (isnan(_4070) ? 1.0 : min(_4070, 1.0));
                                float _3043 = _3042 * (((isnan(0.0) ? _3029 : (isnan(_3029) ? 0.0 : max(_3029, 0.0))) * _3019) / ((_3032 * 0.699999988079071044921875) + 1.0));
                                float _3055 = exp2(log2(1.0 / ((_3032 * 3.5) + 5.0)) * 0.25);
                                float _3056 = 1.0 - _523;
                                float _3063 = sqrt(1.0 - ((1.0 - (_3056 * _3056)) * (1.0 - (_3055 * _3055))));
                                float _3064 = _3063 * _3063;
                                float _3065 = _3064 * _3064;
                                float _3066 = _3012 - _2512;
                                float _3067 = _3013 - _2513;
                                float _3068 = _3014 - _2514;
                                float _3072 = inversesqrt(dot(vec3(_3066, _3067, _3068), vec3(_3066, _3067, _3068)));
                                float _3076 = dot(vec3(_448, _451, _454), vec3((-0.0) - _2512, (-0.0) - _2513, (-0.0) - _2514));
                                float _4081 = isnan(0.0) ? _3076 : (isnan(_3076) ? 0.0 : max(_3076, 0.0));
                                float _3079 = isnan(1.0) ? _4081 : (isnan(_4081) ? 1.0 : min(_4081, 1.0));
                                float _3080 = dot(vec3(_448, _451, _454), vec3(_3072 * _3066, _3072 * _3067, _3072 * _3068));
                                float _4092 = isnan(0.0) ? _3080 : (isnan(_3080) ? 0.0 : max(_3080, 0.0));
                                float _3083 = isnan(1.0) ? _4092 : (isnan(_4092) ? 1.0 : min(_4092, 1.0));
                                float _3087 = ((_3083 * _3083) * (_3065 + (-1.0))) + 1.0;
                                float _3088 = _3025 * _3064;
                                float _3089 = _3088 * _3088;
                                float _3095 = ((1.0 - _3089) * dot(vec3(_448, _451, _454), vec3(_3012, _3013, _3014))) + _3089;
                                float _4103 = isnan(0.0) ? _3095 : (isnan(_3095) ? 0.0 : max(_3095, 0.0));
                                float _3096 = isnan(1.0) ? _4103 : (isnan(_4103) ? 1.0 : min(_4103, 1.0));
                                float _3097 = 1.0 - _3064;
                                float _3107 = (0.5 / (((_3096 * ((_3079 * _3097) + _3064)) + 9.9999999392252902907785028219223e-09) + (((_3096 * _3097) + _3064) * _3079))) * _3096;
                                float _4114 = isnan(0.0) ? _3107 : (isnan(_3107) ? 0.0 : max(_3107, 0.0));
                                float _3117 = (_3042 * _3019) * (((_3065 * 3.1415927410125732421875) * (isnan(1.0) ? _4114 : (isnan(_4114) ? 1.0 : min(_4114, 1.0)))) / ((_3087 * _3087) * ((_3032 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3117 * _2898.x;
                                frontier_phi_73_pred_1 = _3117 * _2898.y;
                                frontier_phi_73_pred_2 = _3043 * _2886.z;
                                frontier_phi_73_pred_3 = _3043 * _2886.y;
                                frontier_phi_73_pred_4 = _3043 * _2886.x;
                                frontier_phi_73_pred_5 = _3117 * _2898.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3121 = frontier_phi_73_pred;
                            _3122 = frontier_phi_73_pred_1;
                            _3126 = frontier_phi_73_pred_2;
                            _3125 = frontier_phi_73_pred_3;
                            _3124 = frontier_phi_73_pred_4;
                            _3123 = frontier_phi_73_pred_5;
                            _2828 = _3124 + _2841;
                            _2829 = _3125 + _2842;
                            _2830 = _3126 + _2843;
                            _2825 = _3121 + _2838;
                            _2826 = _3122 + _2839;
                            _2827 = _3123 + _2840;
                            if (_2845 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2838 = _2825;
                                _2839 = _2826;
                                _2840 = _2827;
                                _2841 = _2828;
                                _2842 = _2829;
                                _2843 = _2830;
                                _2844 = _2845;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _2828;
                        frontier_phi_67_pred_1 = _2829;
                        frontier_phi_67_pred_2 = _2830;
                        frontier_phi_67_pred_3 = _2827;
                        frontier_phi_67_pred_4 = _2826;
                        frontier_phi_67_pred_5 = _2825;
                    }
                    _2493 = frontier_phi_67_pred;
                    _2495 = frontier_phi_67_pred_1;
                    _2497 = frontier_phi_67_pred_2;
                    _2491 = frontier_phi_67_pred_3;
                    _2489 = frontier_phi_67_pred_4;
                    _2487 = frontier_phi_67_pred_5;
                    uint _2632 = _2631 + 1u;
                    if (_2632 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2625 = _2487;
                        _2626 = _2489;
                        _2627 = _2491;
                        _2628 = _2493;
                        _2629 = _2495;
                        _2630 = _2497;
                        _2631 = _2632;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2495;
                frontier_phi_55_56_ladder_1 = _2497;
                frontier_phi_55_56_ladder_2 = _2493;
                frontier_phi_55_56_ladder_3 = _2491;
                frontier_phi_55_56_ladder_4 = _2489;
                frontier_phi_55_56_ladder_5 = _2487;
            }
            else
            {
                frontier_phi_55_56_ladder = _2373;
                frontier_phi_55_56_ladder_1 = _2375;
                frontier_phi_55_56_ladder_2 = _2371;
                frontier_phi_55_56_ladder_3 = _2369;
                frontier_phi_55_56_ladder_4 = _2367;
                frontier_phi_55_56_ladder_5 = _2365;
            }
            _2486 = frontier_phi_55_56_ladder_5;
            _2488 = frontier_phi_55_56_ladder_4;
            _2490 = frontier_phi_55_56_ladder_3;
            _2492 = frontier_phi_55_56_ladder_2;
            _2494 = frontier_phi_55_56_ladder;
            _2496 = frontier_phi_55_56_ladder_1;
        }
        float _2501 = isnan(1.0) ? _507 : (isnan(_507) ? 1.0 : min(_507, 1.0));
        _2248 = (_2501 * _2492) + _1684;
        _2250 = (_2501 * _2494) + _1686;
        _2252 = (_2501 * _2496) + _1688;
        _2254 = ((_2486 * _492) * _2501) + _2029;
        _2256 = ((_2488 * _494) * _2501) + _2031;
        _2258 = ((_2490 * _495) * _2501) + _2033;
    }
    else
    {
        _2248 = _1684;
        _2250 = _1686;
        _2252 = _1688;
        _2254 = _2029;
        _2256 = _2031;
        _2258 = _2033;
    }
    uint _2264 = _468 + uint(cbMatDynParam._m0[0u].w);
    float _2270 = ((((cbMtdParam._m0[10u].x * cbMtdParam._m0[12u].y) * _301.x) + cbMtdParam._m0[11u].x) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_2264].x;
    float _2271 = ((((cbMtdParam._m0[10u].y * cbMtdParam._m0[12u].y) * _301.y) + cbMtdParam._m0[11u].y) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_2264].y;
    float _2272 = ((cbMtdParam._m0[11u].z + ((cbMtdParam._m0[10u].z * cbMtdParam._m0[12u].y) * _301.z)) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_2264].z;
    float _4130 = isnan(0.0) ? _482 : (isnan(_482) ? 0.0 : max(_482, 0.0));
    float _4141 = isnan(0.0) ? _483 : (isnan(_483) ? 0.0 : max(_483, 0.0));
    float _4152 = isnan(0.0) ? _484 : (isnan(_484) ? 0.0 : max(_484, 0.0));
    float _2289 = (((isnan(1.0) ? _4130 : (isnan(_4130) ? 1.0 : min(_4130, 1.0))) * (_2248 + ((isnan(0.0) ? _1238 : (isnan(_1238) ? 0.0 : max(_1238, 0.0))) * _507))) + ((_2254 + ((isnan(0.0) ? _1536 : (isnan(_1536) ? 0.0 : max(_1536, 0.0))) * _1317)) * cbPerFrame._m0[3u].x)) + _2270;
    float _2291 = (_2271 + ((_2256 + ((isnan(0.0) ? _1539 : (isnan(_1539) ? 0.0 : max(_1539, 0.0))) * _1317)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4141 : (isnan(_4141) ? 1.0 : min(_4141, 1.0))) * (_2250 + ((isnan(0.0) ? _1241 : (isnan(_1241) ? 0.0 : max(_1241, 0.0))) * _507)));
    float _2293 = (_2272 + ((_2258 + ((isnan(0.0) ? _1542 : (isnan(_1542) ? 0.0 : max(_1542, 0.0))) * _1317)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4152 : (isnan(_4152) ? 1.0 : min(_4152, 1.0))) * (_2252 + ((isnan(0.0) ? _1244 : (isnan(_1244) ? 0.0 : max(_1244, 0.0))) * _507)));
    float _4178 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2306 = isnan(1.0) ? _4178 : (isnan(_4178) ? 1.0 : min(_4178, 1.0));
    uint _2307 = _467 + 6u;
    float _2315 = _426 / cbSceneParam._m0[86u].x;
    float _2316 = _427 / cbSceneParam._m0[86u].y;
    vec4 _2330 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2315, _2316, (log2((isnan(cbSceneParam._m0[77u].w) ? _360 : (isnan(_360) ? cbSceneParam._m0[77u].w : min(_360, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2332 = _2330.x;
    float _2333 = _2330.y;
    float _2334 = _2330.z;
    float _2335 = _2330.w;
    float _2428;
    float _2430;
    float _2432;
    float _2434;
    if (_360 > cbSceneParam._m0[78u].w)
    {
        float _2390 = isnan(_360) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _360 : min(cbSceneParam._m0[80u].w, _360));
        float _2391 = _2390 / _360;
        float _2402 = _2391 * _411;
        float _2403 = _412 * _2391;
        float _2404 = (-0.0) - _2403;
        float _2406 = _2391 * _413;
        float _2408 = (cbSceneParam._m0[77u].w * _2404) / _2390;
        float _2409 = _2408 + cbSceneParam._m0[79u].w;
        float _2410 = cbSceneParam._m0[79u].w - _2403;
        float _2416 = sqrt(((_2402 * _2402) + (_2403 * _2403)) + (_2406 * _2406));
        float _2419 = (1.0 - (cbSceneParam._m0[77u].w / _2390)) * _2416;
        float _2424 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2426 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2587;
        if (abs((_2404 - _2408) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2587 = ((((_2409 > 0.0) ? exp2(_2424 * _2409) : (2.0 - exp2(_2426 * _2409))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2419;
        }
        else
        {
            float _2547 = 1.0 / cbSceneParam._m0[80u].x;
            float _2548 = isnan(_2410) ? _2409 : (isnan(_2409) ? _2410 : max(_2409, _2410));
            float _2549 = isnan(_2410) ? _2409 : (isnan(_2409) ? _2410 : min(_2409, _2410));
            float _2558 = isnan(0.0) ? _2548 : (isnan(_2548) ? 0.0 : min(_2548, 0.0));
            float _2559 = isnan(0.0) ? _2549 : (isnan(_2549) ? 0.0 : min(_2549, 0.0));
            _2587 = ((abs(_2416 / _2404) * cbSceneParam._m0[80u].y) * ((((_2558 - _2559) * 2.0) - ((exp2(_2424 * (isnan(0.0) ? _2548 : (isnan(_2548) ? 0.0 : max(_2548, 0.0)))) - exp2(_2424 * (isnan(0.0) ? _2549 : (isnan(_2549) ? 0.0 : max(_2549, 0.0))))) * _2547)) - ((exp2(_2426 * _2558) - exp2(_2426 * _2559)) * _2547))) + (_2419 * cbSceneParam._m0[80u].z);
        }
        vec4 _2589 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2315, _2316, 1.0), 0.0);
        float _2598 = exp2((_2587 * (-1.44269502162933349609375)) * (1.0 - _2589.w));
        float _2599 = log2(_2598);
        float _2615 = log2(_2335);
        _2428 = (exp2(_2615 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2599 * cbSceneParam._m0[78u].x)) * _2589.x) / cbSceneParam._m0[78u].x)) + _2332;
        _2430 = (exp2(_2615 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2599 * cbSceneParam._m0[78u].y)) * _2589.y) / cbSceneParam._m0[78u].y)) + _2333;
        _2432 = (exp2(_2615 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2599 * cbSceneParam._m0[78u].z)) * _2589.z) / cbSceneParam._m0[78u].z)) + _2334;
        _2434 = _2598 * _2335;
    }
    else
    {
        _2428 = _2332;
        _2430 = _2333;
        _2432 = _2334;
        _2434 = _2335;
    }
    float _2445 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2446 = _2445 == 3.0;
    float _2447 = log2(_2434);
    float _2451 = exp2(_2447 * cbSceneParam._m0[78u].x);
    float _2452 = exp2(_2447 * cbSceneParam._m0[78u].y);
    float _2453 = exp2(_2447 * cbSceneParam._m0[78u].z);
    float _2454 = _2451 * (isnan(0.0) ? _2289 : (isnan(_2289) ? 0.0 : max(_2289, 0.0)));
    float _2455 = _2452 * (isnan(0.0) ? _2291 : (isnan(_2291) ? 0.0 : max(_2291, 0.0)));
    float _2456 = _2453 * (isnan(0.0) ? _2293 : (isnan(_2293) ? 0.0 : max(_2293, 0.0)));
    float _2465 = (_2445 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2465 * (_2446 ? _2454 : (_2454 + (cbSceneParam._m0[72u].w * _2428)));
    SV_Target.y = _2465 * (_2446 ? _2455 : (_2455 + (cbSceneParam._m0[72u].w * _2430)));
    SV_Target.z = _2465 * (_2446 ? _2456 : (_2456 + (cbSceneParam._m0[72u].w * _2432)));
    SV_Target.w = cbInstanceData._m0[_2307].w;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2270) * _2306) * _2451) * _2465;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2271) * _2306) * _2452) * _2465;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2272) * _2306) * _2453) * _2465;
    SV_Target_1.w = cbInstanceData._m0[_2307].w;
}


