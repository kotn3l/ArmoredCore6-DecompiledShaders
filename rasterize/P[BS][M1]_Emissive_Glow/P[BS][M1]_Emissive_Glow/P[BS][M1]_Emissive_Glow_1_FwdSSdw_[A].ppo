#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[13];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D P_BS_M1_Emissive_Glow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D P_BS_M1_Emissive_Glow_snp_0_Texture2D_1;
layout(set = 0, binding = 3) uniform texture2D P_BS_M1_Emissive_Glow_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _912;
float _3363;
float _3364;
float _3365;
float _3366;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _182 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _183 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _184 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _189 = inversesqrt(dot(vec3(_182, _183, _184), vec3(_182, _183, _184)));
    float _196 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _203 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _226 = texture(sampler2D(P_BS_M1_Emissive_Glow_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _232 = _226.x * cbMtdParam._m0[9u].x;
    float _233 = _226.y * cbMtdParam._m0[9u].y;
    float _234 = _226.z * cbMtdParam._m0[9u].z;
    vec4 _250 = texture(sampler2D(P_BS_M1_Emissive_Glow_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _254 = _250.z;
    float _258 = (_250.x * 2.0) + (-1.0);
    float _260 = (_250.y * 2.0) + (-1.0);
    float _261 = dot(vec2(_258, _260), vec2(_258, _260));
    float _3375 = isnan(0.0) ? _261 : (isnan(_261) ? 0.0 : max(_261, 0.0));
    float _267 = sqrt(1.0 - (isnan(1.0) ? _3375 : (isnan(_3375) ? 1.0 : min(_3375, 1.0))));
    vec4 _290 = texture(sampler2D(P_BS_M1_Emissive_Glow_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _315 = fma(_267, _196 * NORMAL.x, fma(_260, _203 * TANGENT.x, (_189 * _182) * _258));
    float _318 = fma(_267, _196 * NORMAL.y, fma(_260, _203 * TANGENT.y, (_189 * _183) * _258));
    float _321 = fma(_267, _196 * NORMAL.z, fma(_260, _203 * TANGENT.z, (_189 * _184) * _258));
    float _325 = inversesqrt(dot(vec3(_315, _318, _321), vec3(_315, _318, _321)));
    float _326 = _325 * _315;
    float _327 = _325 * _318;
    float _328 = _325 * _321;
    float _3386 = isnan(0.0) ? _254 : (isnan(_254) ? 0.0 : max(_254, 0.0));
    float _329 = isnan(1.0) ? _3386 : (isnan(_3386) ? 1.0 : min(_3386, 1.0));
    float _3397 = isnan(0.0) ? _232 : (isnan(_232) ? 0.0 : max(_232, 0.0));
    float _3408 = isnan(0.0) ? _233 : (isnan(_233) ? 0.0 : max(_233, 0.0));
    float _3419 = isnan(0.0) ? _234 : (isnan(_234) ? 0.0 : max(_234, 0.0));
    float _3430 = isnan(0.0) ? cbMtdParam._m0[12u].x : (isnan(cbMtdParam._m0[12u].x) ? 0.0 : max(cbMtdParam._m0[12u].x, 0.0));
    float _333 = isnan(1.0) ? _3430 : (isnan(_3430) ? 1.0 : min(_3430, 1.0));
    float _349 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _390 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _400 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _390);
    float _401 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _390);
    float _402 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _390);
    float _406 = inversesqrt(dot(vec3(_400, _401, _402), vec3(_400, _401, _402)));
    float _407 = _400 * _406;
    float _408 = _401 * _406;
    float _409 = _402 * _406;
    vec4 _414 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _416 = _414.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _591 = sqrt(((_400 * _400) + (_401 * _401)) + (_402 * _402));
        float _597 = (cbMatDynParam._m0[5u].x * _591) + cbMatDynParam._m0[5u].y;
        float _3441 = isnan(0.0) ? _597 : (isnan(_597) ? 0.0 : max(_597, 0.0));
        float _598 = isnan(1.0) ? _3441 : (isnan(_3441) ? 1.0 : min(_3441, 1.0));
        float _602 = (cbMatDynParam._m0[5u].z * _591) + cbMatDynParam._m0[5u].w;
        float _3452 = isnan(0.0) ? _602 : (isnan(_602) ? 0.0 : max(_602, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3452 : (isnan(_3452) ? 1.0 : min(_3452, 1.0))) - _598)) + _598) < ((_416 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _428 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _429 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _449 = fma(_328, cbSceneParam._m0[5u].z, fma(_327, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _326));
    float _452 = fma(_328, cbSceneParam._m0[6u].z, fma(_327, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _326));
    float _455 = fma(_328, cbSceneParam._m0[7u].z, fma(_327, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _326));
    uint _468 = uint(roundEven(NORMAL.w)) * 13u;
    uint _469 = _468 + 9u;
    uint _470 = _469 + uint(cbMatDynParam._m0[0u].w);
    float _476 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3397 : (isnan(_3397) ? 1.0 : min(_3397, 1.0)))) * cbInstanceData._m0[_470].x;
    float _477 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3408 : (isnan(_3408) ? 1.0 : min(_3408, 1.0)))) * cbInstanceData._m0[_470].y;
    float _478 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3419 : (isnan(_3419) ? 1.0 : min(_3419, 1.0)))) * cbInstanceData._m0[_470].z;
    float _3463 = isnan(0.0) ? _476 : (isnan(_476) ? 0.0 : max(_476, 0.0));
    float _479 = isnan(1.0) ? _3463 : (isnan(_3463) ? 1.0 : min(_3463, 1.0));
    float _3474 = isnan(0.0) ? _477 : (isnan(_477) ? 0.0 : max(_477, 0.0));
    float _480 = isnan(1.0) ? _3474 : (isnan(_3474) ? 1.0 : min(_3474, 1.0));
    float _3485 = isnan(0.0) ? _478 : (isnan(_478) ? 0.0 : max(_478, 0.0));
    float _481 = isnan(1.0) ? _3485 : (isnan(_3485) ? 1.0 : min(_3485, 1.0));
    float _482 = 1.0 - _333;
    float _483 = _479 * _482;
    float _484 = _480 * _482;
    float _485 = _481 * _482;
    float _490 = (_479 + (-0.039999999105930328369140625)) * _333;
    float _491 = (_480 + (-0.039999999105930328369140625)) * _333;
    float _492 = (_481 + (-0.039999999105930328369140625)) * _333;
    float _493 = _490 + 0.039999999105930328369140625;
    float _495 = _491 + 0.039999999105930328369140625;
    float _496 = _492 + 0.039999999105930328369140625;
    vec4 _505 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _428, cbSceneParam._m0[86u].y * _429));
    float _508 = _505.x * TEXCOORD.z;
    float _509 = dot(vec3(_326, _327, _328), vec3(_407, _408, _409));
    float _512 = _509 * 2.0;
    float _516 = (_512 * _326) - _407;
    float _517 = (_512 * _327) - _408;
    float _518 = (_512 * _328) - _409;
    float _522 = abs(dot(vec3(_407, _408, _409), vec3(_326, _327, _328)));
    float _3496 = isnan(0.0) ? _522 : (isnan(_522) ? 0.0 : max(_522, 0.0));
    float _524 = sqrt(_329);
    float _537 = exp2((_524 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3496 : (isnan(_3496) ? 1.0 : min(_3496, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_524 * 3.0));
    float _543 = (1.0 - _537) * ((_524 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _544 = _537 * _524;
    float _572 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _576 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _580 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _911;
    float _913;
    float _914;
    float _915;
    float _916;
    float _917;
    float _918;
    float _919;
    float _920;
    float _921;
    float _922;
    float _923;
    float _924;
    float _925;
    float _926;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _636 = fma(_580, cbModelParam._m0[26u].z, fma(_576, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _572));
        float _640 = fma(_580, cbModelParam._m0[27u].z, fma(_576, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _572));
        float _644 = fma(_580, cbModelParam._m0[28u].z, fma(_576, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _572));
        float _669 = _572 + _326;
        float _670 = _576 + _327;
        float _671 = _580 + _328;
        float _681 = fma(_671, cbModelParam._m0[26u].z, fma(_670, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _669)) - _636;
        float _682 = fma(_671, cbModelParam._m0[27u].z, fma(_670, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _669)) - _640;
        float _683 = fma(_671, cbModelParam._m0[28u].z, fma(_670, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _669)) - _644;
        float _687 = inversesqrt(dot(vec3(_681, _682, _683), vec3(_681, _682, _683)));
        float _700 = ((_687 * _681) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_636 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _701 = ((_687 * _682) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_640 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _702 = ((_687 * _683) / cbModelParam._m0[34u].z) + ((((((_644 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _705 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_700, _701, _702), 0.0);
        vec4 _712 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_700, _701, _702), 0.0);
        vec4 _719 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_700, _701, _702), 0.0);
        vec4 _726 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_700, _701, _702), 0.0);
        float _739 = exp2((_705.w + (-0.5)) * 20.0) * 2.0;
        float _740 = _739 * (_705.x + (-0.5));
        float _741 = _739 * (_705.y + (-0.5));
        float _742 = _739 * (_705.z + (-0.5));
        float _749 = exp2((_712.w + (-0.5)) * 20.0) * 2.0;
        float _750 = _749 * (_712.x + (-0.5));
        float _751 = _749 * (_712.y + (-0.5));
        float _752 = _749 * (_712.z + (-0.5));
        float _759 = exp2((_719.w + (-0.5)) * 20.0) * 2.0;
        float _760 = _759 * (_719.x + (-0.5));
        float _761 = _759 * (_719.y + (-0.5));
        float _762 = _759 * (_719.z + (-0.5));
        float _769 = exp2((_726.w + (-0.5)) * 20.0) * 2.0;
        float _770 = _769 * (_726.x + (-0.5));
        float _771 = _769 * (_726.y + (-0.5));
        float _772 = _769 * (_726.z + (-0.5));
        float _773 = isnan(0.0) ? _770 : (isnan(_770) ? 0.0 : max(_770, 0.0));
        float _774 = isnan(0.0) ? _771 : (isnan(_771) ? 0.0 : max(_771, 0.0));
        float _775 = isnan(0.0) ? _772 : (isnan(_772) ? 0.0 : max(_772, 0.0));
        float _776 = _740 * 0.5;
        float _777 = _750 * 0.5;
        float _778 = _760 * 0.5;
        float _779 = dot(vec3(_776, _777, _778), vec3(_776, _777, _778));
        float _784 = (_779 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_779);
        float _793 = (dot(vec3(_326, _327, _328), vec3(_784 * _776, _784 * _777, _784 * _778)) + 1.0) * 0.5;
        float _3522 = isnan(0.0) ? _793 : (isnan(_793) ? 0.0 : max(_793, 0.0));
        float _803 = sqrt(((_777 * _777) + (_776 * _776)) + (_778 * _778)) / (_773 + 9.9999997473787516355514526367188e-06);
        float _3533 = isnan(0.0) ? _803 : (isnan(_803) ? 0.0 : max(_803, 0.0));
        float _804 = isnan(1.0) ? _3533 : (isnan(_3533) ? 1.0 : min(_3533, 1.0));
        float _805 = _804 * 2.0;
        float _809 = (1.0 - _804) / (_804 + 1.0);
        float _3544 = isnan(0.0) ? _809 : (isnan(_809) ? 0.0 : max(_809, 0.0));
        float _810 = isnan(1.0) ? _3544 : (isnan(_3544) ? 1.0 : min(_3544, 1.0));
        float _819 = ((((1.0 - _810) * (_805 + 2.0)) * exp2(log2(isnan(1.0) ? _3522 : (isnan(_3522) ? 1.0 : min(_3522, 1.0))) * (_805 + 1.0))) + _810) * _773;
        float _820 = _741 * 0.5;
        float _821 = _751 * 0.5;
        float _822 = _761 * 0.5;
        float _823 = dot(vec3(_820, _821, _822), vec3(_820, _821, _822));
        float _828 = (_823 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_823);
        float _836 = (dot(vec3(_326, _327, _328), vec3(_828 * _820, _828 * _821, _828 * _822)) + 1.0) * 0.5;
        float _3555 = isnan(0.0) ? _836 : (isnan(_836) ? 0.0 : max(_836, 0.0));
        float _845 = sqrt(((_821 * _821) + (_820 * _820)) + (_822 * _822)) / (_774 + 9.9999997473787516355514526367188e-06);
        float _3566 = isnan(0.0) ? _845 : (isnan(_845) ? 0.0 : max(_845, 0.0));
        float _846 = isnan(1.0) ? _3566 : (isnan(_3566) ? 1.0 : min(_3566, 1.0));
        float _847 = _846 * 2.0;
        float _851 = (1.0 - _846) / (_846 + 1.0);
        float _3577 = isnan(0.0) ? _851 : (isnan(_851) ? 0.0 : max(_851, 0.0));
        float _852 = isnan(1.0) ? _3577 : (isnan(_3577) ? 1.0 : min(_3577, 1.0));
        float _861 = ((((1.0 - _852) * (_847 + 2.0)) * exp2(log2(isnan(1.0) ? _3555 : (isnan(_3555) ? 1.0 : min(_3555, 1.0))) * (_847 + 1.0))) + _852) * _774;
        float _862 = _742 * 0.5;
        float _863 = _752 * 0.5;
        float _864 = _762 * 0.5;
        float _865 = dot(vec3(_862, _863, _864), vec3(_862, _863, _864));
        float _870 = (_865 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_865);
        float _878 = (dot(vec3(_326, _327, _328), vec3(_870 * _862, _870 * _863, _870 * _864)) + 1.0) * 0.5;
        float _3588 = isnan(0.0) ? _878 : (isnan(_878) ? 0.0 : max(_878, 0.0));
        float _887 = sqrt(((_863 * _863) + (_862 * _862)) + (_864 * _864)) / (_775 + 9.9999997473787516355514526367188e-06);
        float _3599 = isnan(0.0) ? _887 : (isnan(_887) ? 0.0 : max(_887, 0.0));
        float _888 = isnan(1.0) ? _3599 : (isnan(_3599) ? 1.0 : min(_3599, 1.0));
        float _889 = _888 * 2.0;
        float _893 = (1.0 - _888) / (_888 + 1.0);
        float _3610 = isnan(0.0) ? _893 : (isnan(_893) ? 0.0 : max(_893, 0.0));
        float _894 = isnan(1.0) ? _3610 : (isnan(_3610) ? 1.0 : min(_3610, 1.0));
        float _903 = ((((1.0 - _894) * (_889 + 2.0)) * exp2(log2(isnan(1.0) ? _3588 : (isnan(_3588) ? 1.0 : min(_3588, 1.0))) * (_889 + 1.0))) + _894) * _775;
        _911 = _742;
        _913 = _741;
        _914 = _740;
        _915 = _752;
        _916 = _751;
        _917 = _750;
        _918 = _762;
        _919 = _761;
        _920 = _760;
        _921 = _775;
        _922 = _774;
        _923 = _773;
        _924 = cbModelParam._m0[36u].z * (isnan(0.0) ? _819 : (isnan(_819) ? 0.0 : max(_819, 0.0)));
        _925 = cbModelParam._m0[36u].z * (isnan(0.0) ? _861 : (isnan(_861) ? 0.0 : max(_861, 0.0)));
        _926 = cbModelParam._m0[36u].z * (isnan(0.0) ? _903 : (isnan(_903) ? 0.0 : max(_903, 0.0)));
    }
    else
    {
        _911 = _912;
        _913 = _912;
        _914 = _912;
        _915 = _912;
        _916 = _912;
        _917 = _912;
        _918 = _912;
        _919 = _912;
        _920 = _912;
        _921 = _912;
        _922 = _912;
        _923 = _912;
        _924 = 0.0;
        _925 = 0.0;
        _926 = 0.0;
    }
    float _1224;
    float _1225;
    float _1226;
    float _1227;
    float _1228;
    float _1229;
    float _1230;
    float _1231;
    float _1232;
    float _1233;
    float _1234;
    float _1235;
    float _1236;
    float _1237;
    float _1238;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _955 = fma(_580, cbModelParam._m0[30u].z, fma(_576, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _572));
        float _959 = fma(_580, cbModelParam._m0[31u].z, fma(_576, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _572));
        float _963 = fma(_580, cbModelParam._m0[32u].z, fma(_576, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _572));
        float _986 = _572 + _326;
        float _987 = _576 + _327;
        float _988 = _580 + _328;
        float _998 = fma(_988, cbModelParam._m0[30u].z, fma(_987, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _986)) - _955;
        float _999 = fma(_988, cbModelParam._m0[31u].z, fma(_987, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _986)) - _959;
        float _1000 = fma(_988, cbModelParam._m0[32u].z, fma(_987, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _986)) - _963;
        float _1004 = inversesqrt(dot(vec3(_998, _999, _1000), vec3(_998, _999, _1000)));
        float _1017 = ((_1004 * _998) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_955 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1018 = ((_1004 * _999) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_959 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1019 = ((_1004 * _1000) / cbModelParam._m0[35u].z) + ((((((_963 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1021 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1017, _1018, _1019), 0.0);
        vec4 _1028 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1017, _1018, _1019), 0.0);
        vec4 _1035 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1017, _1018, _1019), 0.0);
        vec4 _1042 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1017, _1018, _1019), 0.0);
        float _1054 = exp2((_1021.w + (-0.5)) * 20.0) * 2.0;
        float _1055 = _1054 * (_1021.x + (-0.5));
        float _1056 = _1054 * (_1021.y + (-0.5));
        float _1057 = _1054 * (_1021.z + (-0.5));
        float _1064 = exp2((_1028.w + (-0.5)) * 20.0) * 2.0;
        float _1065 = _1064 * (_1028.x + (-0.5));
        float _1066 = _1064 * (_1028.y + (-0.5));
        float _1067 = _1064 * (_1028.z + (-0.5));
        float _1074 = exp2((_1035.w + (-0.5)) * 20.0) * 2.0;
        float _1075 = _1074 * (_1035.x + (-0.5));
        float _1076 = _1074 * (_1035.y + (-0.5));
        float _1077 = _1074 * (_1035.z + (-0.5));
        float _1084 = exp2((_1042.w + (-0.5)) * 20.0) * 2.0;
        float _1085 = _1084 * (_1042.x + (-0.5));
        float _1086 = _1084 * (_1042.y + (-0.5));
        float _1087 = _1084 * (_1042.z + (-0.5));
        float _1088 = isnan(0.0) ? _1085 : (isnan(_1085) ? 0.0 : max(_1085, 0.0));
        float _1089 = isnan(0.0) ? _1086 : (isnan(_1086) ? 0.0 : max(_1086, 0.0));
        float _1090 = isnan(0.0) ? _1087 : (isnan(_1087) ? 0.0 : max(_1087, 0.0));
        float _1091 = _1055 * 0.5;
        float _1092 = _1065 * 0.5;
        float _1093 = _1075 * 0.5;
        float _1094 = dot(vec3(_1091, _1092, _1093), vec3(_1091, _1092, _1093));
        float _1099 = (_1094 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1094);
        float _1107 = (dot(vec3(_326, _327, _328), vec3(_1099 * _1091, _1099 * _1092, _1099 * _1093)) + 1.0) * 0.5;
        float _3651 = isnan(0.0) ? _1107 : (isnan(_1107) ? 0.0 : max(_1107, 0.0));
        float _1116 = sqrt(((_1092 * _1092) + (_1091 * _1091)) + (_1093 * _1093)) / (_1088 + 9.9999997473787516355514526367188e-06);
        float _3662 = isnan(0.0) ? _1116 : (isnan(_1116) ? 0.0 : max(_1116, 0.0));
        float _1117 = isnan(1.0) ? _3662 : (isnan(_3662) ? 1.0 : min(_3662, 1.0));
        float _1118 = _1117 * 2.0;
        float _1122 = (1.0 - _1117) / (_1117 + 1.0);
        float _3673 = isnan(0.0) ? _1122 : (isnan(_1122) ? 0.0 : max(_1122, 0.0));
        float _1123 = isnan(1.0) ? _3673 : (isnan(_3673) ? 1.0 : min(_3673, 1.0));
        float _1132 = ((((1.0 - _1123) * (_1118 + 2.0)) * exp2(log2(isnan(1.0) ? _3651 : (isnan(_3651) ? 1.0 : min(_3651, 1.0))) * (_1118 + 1.0))) + _1123) * _1088;
        float _1133 = _1056 * 0.5;
        float _1134 = _1066 * 0.5;
        float _1135 = _1076 * 0.5;
        float _1136 = dot(vec3(_1133, _1134, _1135), vec3(_1133, _1134, _1135));
        float _1141 = (_1136 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1136);
        float _1149 = (dot(vec3(_326, _327, _328), vec3(_1141 * _1133, _1141 * _1134, _1141 * _1135)) + 1.0) * 0.5;
        float _3684 = isnan(0.0) ? _1149 : (isnan(_1149) ? 0.0 : max(_1149, 0.0));
        float _1158 = sqrt(((_1134 * _1134) + (_1133 * _1133)) + (_1135 * _1135)) / (_1089 + 9.9999997473787516355514526367188e-06);
        float _3695 = isnan(0.0) ? _1158 : (isnan(_1158) ? 0.0 : max(_1158, 0.0));
        float _1159 = isnan(1.0) ? _3695 : (isnan(_3695) ? 1.0 : min(_3695, 1.0));
        float _1160 = _1159 * 2.0;
        float _1164 = (1.0 - _1159) / (_1159 + 1.0);
        float _3706 = isnan(0.0) ? _1164 : (isnan(_1164) ? 0.0 : max(_1164, 0.0));
        float _1165 = isnan(1.0) ? _3706 : (isnan(_3706) ? 1.0 : min(_3706, 1.0));
        float _1174 = ((((1.0 - _1165) * (_1160 + 2.0)) * exp2(log2(isnan(1.0) ? _3684 : (isnan(_3684) ? 1.0 : min(_3684, 1.0))) * (_1160 + 1.0))) + _1165) * _1089;
        float _1175 = _1057 * 0.5;
        float _1176 = _1067 * 0.5;
        float _1177 = _1077 * 0.5;
        float _1178 = dot(vec3(_1175, _1176, _1177), vec3(_1175, _1176, _1177));
        float _1183 = (_1178 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1178);
        float _1191 = (dot(vec3(_326, _327, _328), vec3(_1183 * _1175, _1183 * _1176, _1183 * _1177)) + 1.0) * 0.5;
        float _3717 = isnan(0.0) ? _1191 : (isnan(_1191) ? 0.0 : max(_1191, 0.0));
        float _1200 = sqrt(((_1176 * _1176) + (_1175 * _1175)) + (_1177 * _1177)) / (_1090 + 9.9999997473787516355514526367188e-06);
        float _3728 = isnan(0.0) ? _1200 : (isnan(_1200) ? 0.0 : max(_1200, 0.0));
        float _1201 = isnan(1.0) ? _3728 : (isnan(_3728) ? 1.0 : min(_3728, 1.0));
        float _1202 = _1201 * 2.0;
        float _1206 = (1.0 - _1201) / (_1201 + 1.0);
        float _3739 = isnan(0.0) ? _1206 : (isnan(_1206) ? 0.0 : max(_1206, 0.0));
        float _1207 = isnan(1.0) ? _3739 : (isnan(_3739) ? 1.0 : min(_3739, 1.0));
        float _1216 = ((((1.0 - _1207) * (_1202 + 2.0)) * exp2(log2(isnan(1.0) ? _3717 : (isnan(_3717) ? 1.0 : min(_3717, 1.0))) * (_1202 + 1.0))) + _1207) * _1090;
        _1224 = _1057;
        _1225 = _1056;
        _1226 = _1055;
        _1227 = _1067;
        _1228 = _1066;
        _1229 = _1065;
        _1230 = _1077;
        _1231 = _1076;
        _1232 = _1075;
        _1233 = _1090;
        _1234 = _1089;
        _1235 = _1088;
        _1236 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1132 : (isnan(_1132) ? 0.0 : max(_1132, 0.0)));
        _1237 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1174 : (isnan(_1174) ? 0.0 : max(_1174, 0.0)));
        _1238 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1216 : (isnan(_1216) ? 0.0 : max(_1216, 0.0)));
    }
    else
    {
        _1224 = _912;
        _1225 = _912;
        _1226 = _912;
        _1227 = _912;
        _1228 = _912;
        _1229 = _912;
        _1230 = _912;
        _1231 = _912;
        _1232 = _912;
        _1233 = _912;
        _1234 = _912;
        _1235 = _912;
        _1236 = 0.0;
        _1237 = 0.0;
        _1238 = 0.0;
    }
    float _1248 = (cbModelParam._m0[1u].x * (_1236 - _924)) + _924;
    float _1249 = (cbModelParam._m0[1u].x * (_1237 - _925)) + _925;
    float _1250 = (cbModelParam._m0[1u].x * (_1238 - _926)) + _926;
    float _1271 = fma(_1250, cbSceneParam._m0[89u].z, fma(_1249, cbSceneParam._m0[89u].y, _1248 * cbSceneParam._m0[89u].x));
    float _1274 = fma(_1250, cbSceneParam._m0[90u].z, fma(_1249, cbSceneParam._m0[90u].y, _1248 * cbSceneParam._m0[90u].x));
    float _1277 = fma(_1250, cbSceneParam._m0[91u].z, fma(_1249, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1248));
    float _1292 = _516 * 0.5;
    float _1293 = _517 * 0.5;
    float _1294 = _518 * 0.5;
    float _1295 = dot(vec4(_1292, _1293, _1294, 1.0), vec4(_1226, _1229, _1232, _1235));
    float _1298 = dot(vec4(_1292, _1293, _1294, 1.0), vec4(_1225, _1228, _1231, _1234));
    float _1301 = dot(vec4(_1292, _1293, _1294, 1.0), vec4(_1224, _1227, _1230, _1233));
    float _1335;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1308 = dot(vec4(_1292, _1293, _1294, 1.0), vec4(_911, _915, _918, _921));
        float _1312 = dot(vec4(_1292, _1293, _1294, 1.0), vec4(_913, _916, _919, _922));
        float _1316 = dot(vec4(_1292, _1293, _1294, 1.0), vec4(_914, _917, _920, _923));
        float _1323 = dot(vec4(cbModelParam._m0[39u]), vec4(_1292, _1293, _1294, 1.0));
        _1335 = dot(vec3(isnan(0.0) ? _1316 : (isnan(_1316) ? 0.0 : max(_1316, 0.0)), isnan(0.0) ? _1312 : (isnan(_1312) ? 0.0 : max(_1312, 0.0)), isnan(0.0) ? _1308 : (isnan(_1308) ? 0.0 : max(_1308, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1323) ? 0.0 : (isnan(0.0) ? _1323 : max(0.0, _1323))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1335 = 1.0;
    }
    float _1346;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1337 = dot(vec4(cbModelParam._m0[40u]), vec4(_1292, _1293, _1294, 1.0));
        _1346 = dot(vec3(isnan(0.0) ? _1295 : (isnan(_1295) ? 0.0 : max(_1295, 0.0)), isnan(0.0) ? _1298 : (isnan(_1298) ? 0.0 : max(_1298, 0.0)), isnan(0.0) ? _1301 : (isnan(_1301) ? 0.0 : max(_1301, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1337) ? 0.0 : (isnan(0.0) ? _1337 : max(0.0, _1337))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1346 = 1.0;
    }
    float _1350 = (_1346 * cbModelParam._m0[1u].x) + (_1335 * (1.0 - cbModelParam._m0[1u].x));
    float _1360 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _329);
    float _1361 = isnan(_1360) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1360 : min(cbModelParam._m0[25u].z, _1360));
    float _1443;
    float _1445;
    float _1447;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1410 = fma(_580, cbModelParam._m0[13u].z, fma(_576, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _572)) + cbModelParam._m0[13u].w;
        float _1414 = fma(_580, cbModelParam._m0[14u].z, fma(_576, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _572)) + cbModelParam._m0[14u].w;
        float _1418 = fma(_580, cbModelParam._m0[15u].z, fma(_576, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _572)) + cbModelParam._m0[15u].w;
        float _1421 = fma(_518, cbModelParam._m0[13u].z, fma(_517, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _516));
        float _1424 = fma(_518, cbModelParam._m0[14u].z, fma(_517, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _516));
        float _1427 = fma(_518, cbModelParam._m0[15u].z, fma(_517, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _516));
        float _1455;
        if (_1421 > 0.0)
        {
            _1455 = abs((1.0 - _1410) / _1421);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1421 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1410 + 1.0) / _1421);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1455 = frontier_phi_17_15_ladder;
        }
        float _1683;
        if (_1424 > 0.0)
        {
            _1683 = abs((1.0 - _1414) / _1424);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1424 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1414 + 1.0) / _1424);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1683 = frontier_phi_26_22_ladder;
        }
        float _1940;
        if (_1427 > 0.0)
        {
            _1940 = abs((1.0 - _1418) / _1427);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1427 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1418 + 1.0) / _1427);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _1940 = frontier_phi_38_33_ladder;
        }
        float _1942 = isnan(_1683) ? _1455 : (isnan(_1455) ? _1683 : min(_1455, _1683));
        float _1943 = isnan(_1940) ? _1942 : (isnan(_1942) ? _1940 : min(_1942, _1940));
        float _1947 = (_1943 * _1421) + _1410;
        float _1948 = (_1943 * _1424) + _1414;
        float _1949 = (_1943 * _1427) + _1418;
        float _1950 = _1943 * 9.9999997473787516355514526367188e-05;
        float _1952 = (-1.0) - _1950;
        float _1954 = _1950 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_1949 > _1954) || ((_1949 < _1952) || ((_1948 > _1954) || ((_1948 < _1952) || ((_1947 < _1952) || (_1947 > _1954))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2077 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1949, cbModelParam._m0[9u].z, fma(_1948, cbModelParam._m0[9u].y, _1947 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1949, cbModelParam._m0[10u].z, fma(_1948, cbModelParam._m0[10u].y, _1947 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1949, cbModelParam._m0[11u].z, fma(_1948, cbModelParam._m0[11u].y, _1947 * cbModelParam._m0[11u].x))), _1361);
            frontier_phi_16_38_ladder = _2077.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2077.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2077.x * cbModelParam._m0[1u].y;
        }
        _1443 = frontier_phi_16_38_ladder_2;
        _1445 = frontier_phi_16_38_ladder_1;
        _1447 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1431 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_516, _517, _518), _1361);
        _1443 = _1431.x * cbModelParam._m0[1u].y;
        _1445 = _1431.y * cbModelParam._m0[1u].y;
        _1447 = _1431.z * cbModelParam._m0[1u].y;
    }
    float _1451 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _329);
    float _1452 = isnan(_1451) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1451 : min(cbModelParam._m0[25u].w, _1451));
    float _1545;
    float _1547;
    float _1549;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1509 = fma(_580, cbModelParam._m0[21u].z, fma(_576, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _572)) + cbModelParam._m0[21u].w;
        float _1513 = fma(_580, cbModelParam._m0[22u].z, fma(_576, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _572)) + cbModelParam._m0[22u].w;
        float _1517 = fma(_580, cbModelParam._m0[23u].z, fma(_576, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _572)) + cbModelParam._m0[23u].w;
        float _1520 = fma(_518, cbModelParam._m0[21u].z, fma(_517, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _516));
        float _1523 = fma(_518, cbModelParam._m0[22u].z, fma(_517, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _516));
        float _1526 = fma(_518, cbModelParam._m0[23u].z, fma(_517, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _516));
        float _1688;
        if (_1520 > 0.0)
        {
            _1688 = abs((1.0 - _1509) / _1520);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1520 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1509 + 1.0) / _1520);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1688 = frontier_phi_28_24_ladder;
        }
        float _1967;
        if (_1523 > 0.0)
        {
            _1967 = abs((1.0 - _1513) / _1523);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1523 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1513 + 1.0) / _1523);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1967 = frontier_phi_40_35_ladder;
        }
        float _2180;
        if (_1526 > 0.0)
        {
            _2180 = abs((1.0 - _1517) / _1526);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1526 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1517 + 1.0) / _1526);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2180 = frontier_phi_49_46_ladder;
        }
        float _2182 = isnan(_1967) ? _1688 : (isnan(_1688) ? _1967 : min(_1688, _1967));
        float _2183 = isnan(_2180) ? _2182 : (isnan(_2182) ? _2180 : min(_2182, _2180));
        float _2187 = (_2183 * _1520) + _1509;
        float _2188 = (_2183 * _1523) + _1513;
        float _2189 = (_2183 * _1526) + _1517;
        float _2190 = _2183 * 9.9999997473787516355514526367188e-05;
        float _2191 = (-1.0) - _2190;
        float _2193 = _2190 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2189 > _2193) || ((_2189 < _2191) || ((_2188 > _2193) || ((_2188 < _2191) || ((_2187 < _2191) || (_2187 > _2193))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2417 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2189, cbModelParam._m0[17u].z, fma(_2188, cbModelParam._m0[17u].y, _2187 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2189, cbModelParam._m0[18u].z, fma(_2188, cbModelParam._m0[18u].y, _2187 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2189, cbModelParam._m0[19u].z, fma(_2188, cbModelParam._m0[19u].y, _2187 * cbModelParam._m0[19u].x))), _1452);
            frontier_phi_25_49_ladder = _2417.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2417.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2417.x * cbModelParam._m0[1u].z;
        }
        _1545 = frontier_phi_25_49_ladder_2;
        _1547 = frontier_phi_25_49_ladder_1;
        _1549 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1529 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_516, _517, _518), _1452);
        _1545 = _1529.x * cbModelParam._m0[1u].z;
        _1547 = _1529.y * cbModelParam._m0[1u].z;
        _1549 = _1529.z * cbModelParam._m0[1u].z;
    }
    float _1562 = (((_543 * _493) + _544) * _508) * ((cbModelParam._m0[1u].w * (_1545 - _1443)) + _1443);
    float _1564 = (((_543 * _495) + _544) * _508) * ((cbModelParam._m0[1u].w * (_1547 - _1445)) + _1445);
    float _1566 = (((_543 * _496) + _544) * _508) * ((cbModelParam._m0[1u].w * (_1549 - _1447)) + _1447);
    float _1569 = fma(_1566, cbSceneParam._m0[89u].z, fma(_1564, cbSceneParam._m0[89u].y, _1562 * cbSceneParam._m0[89u].x));
    float _1572 = fma(_1566, cbSceneParam._m0[90u].z, fma(_1564, cbSceneParam._m0[90u].y, _1562 * cbSceneParam._m0[90u].x));
    float _1575 = fma(_1566, cbSceneParam._m0[91u].z, fma(_1564, cbSceneParam._m0[91u].y, _1562 * cbSceneParam._m0[91u].x));
    vec4 _1583 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_428, _429));
    float _1585 = _1583.w;
    float _1597 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1585);
    float _1598 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1585);
    float _1599 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1585);
    uvec4 _1603 = floatBitsToUint(cbInstanceData._m0[_468 + 5u]);
    uint _1605 = _1603.x * 14u;
    uint _1606 = _1605 + 13u;
    float _1613 = _508 + (-1.0);
    float _1618 = (cbLight._m0[_1606].x * _1613) + 1.0;
    float _1619 = (cbLight._m0[_1606].y * _1613) + 1.0;
    float _1620 = (cbLight._m0[_1606].z * _1613) + 1.0;
    float _1621 = (cbLight._m0[_1606].w * _1613) + 1.0;
    uint _1622 = _1605 + 5u;
    float _1628 = isnan(1.0) ? _1619 : (isnan(_1619) ? 1.0 : min(_1619, 1.0));
    uint _1632 = _1605 + 4u;
    float _1642 = isnan(1.0) ? _1618 : (isnan(_1618) ? 1.0 : min(_1618, 1.0));
    uint _1646 = _1605 | 1u;
    float _1657 = dot(vec3(cbLight._m0[_1605].xyz), vec3(_326, _327, _328));
    float _1660 = dot(vec3(cbLight._m0[_1646].xyz), vec3(_326, _327, _328));
    float _3875 = isnan(0.0) ? _1657 : (isnan(_1657) ? 0.0 : max(_1657, 0.0));
    float _3886 = isnan(0.0) ? _1660 : (isnan(_1660) ? 0.0 : max(_1660, 0.0));
    float _1665 = (isnan(1.0) ? _3875 : (isnan(_3875) ? 1.0 : min(_3875, 1.0))) * 0.3183098733425140380859375;
    float _1667 = (isnan(1.0) ? _3886 : (isnan(_3886) ? 1.0 : min(_3886, 1.0))) * 0.3183098733425140380859375;
    float _1674 = ((cbLight._m0[_1622].x * _1628) * _1667) + (((cbLight._m0[_1632].x * _1597) * _1642) * _1665);
    float _1675 = ((_1628 * cbLight._m0[_1622].y) * _1667) + (((cbLight._m0[_1632].y * _1598) * _1642) * _1665);
    float _1676 = ((_1628 * cbLight._m0[_1622].z) * _1667) + (((cbLight._m0[_1632].z * _1599) * _1642) * _1665);
    uvec4 _1680 = floatBitsToUint(cbLight._m0[_1605 + 12u]);
    bool _1682 = _1680.x == 0u;
    float _1693;
    float _1695;
    float _1697;
    if (_1682)
    {
        _1693 = _1674;
        _1695 = _1675;
        _1697 = _1676;
    }
    else
    {
        uint _1701 = _1605 + 6u;
        float _1717 = (dot(vec3(cbLight._m0[_1605 + 2u].xyz), vec3(_326, _327, _328)) * 0.5) + 0.5;
        float _1718 = _1717 * _1717;
        float _3897 = isnan(0.0) ? _1718 : (isnan(_1718) ? 0.0 : max(_1718, 0.0));
        float _1719 = isnan(1.0) ? _3897 : (isnan(_3897) ? 1.0 : min(_3897, 1.0));
        float _1720 = isnan(1.0) ? _1620 : (isnan(_1620) ? 1.0 : min(_1620, 1.0));
        _1693 = (((cbLight._m0[_1701].x * 0.3183098733425140380859375) * _1719) * _1720) + _1674;
        _1695 = (((cbLight._m0[_1701].y * 0.3183098733425140380859375) * _1719) * _1720) + _1675;
        _1697 = (((cbLight._m0[_1701].z * 0.3183098733425140380859375) * _1719) * _1720) + _1676;
    }
    bool _1700 = _1680.y == 0u;
    float _1738;
    float _1740;
    float _1742;
    if (_1700)
    {
        _1738 = _1693;
        _1740 = _1695;
        _1742 = _1697;
    }
    else
    {
        uint _1911 = _1605 + 7u;
        float _1927 = (dot(vec3(cbLight._m0[_1605 + 3u].xyz), vec3(_326, _327, _328)) * 0.5) + 0.5;
        float _1928 = _1927 * _1927;
        float _3913 = isnan(0.0) ? _1928 : (isnan(_1928) ? 0.0 : max(_1928, 0.0));
        float _1929 = isnan(1.0) ? _3913 : (isnan(_3913) ? 1.0 : min(_3913, 1.0));
        float _1930 = isnan(1.0) ? _1621 : (isnan(_1621) ? 1.0 : min(_1621, 1.0));
        _1738 = (((cbLight._m0[_1911].x * 0.3183098733425140380859375) * _1929) * _1930) + _1693;
        _1740 = (((cbLight._m0[_1911].y * 0.3183098733425140380859375) * _1929) * _1930) + _1695;
        _1742 = (((cbLight._m0[_1911].z * 0.3183098733425140380859375) * _1929) * _1930) + _1697;
    }
    uint _1745 = _1605 + 8u;
    float _1758 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1605].w)) * _329) * 0.949999988079071044921875);
    float _1759 = _1758 * _1758;
    float _1760 = cbLight._m0[_1605].x + _407;
    float _1761 = cbLight._m0[_1605].y + _408;
    float _1762 = cbLight._m0[_1605].z + _409;
    float _1766 = inversesqrt(dot(vec3(_1760, _1761, _1762), vec3(_1760, _1761, _1762)));
    float _1767 = _1766 * _1760;
    float _1768 = _1766 * _1761;
    float _1769 = _1766 * _1762;
    float _1770 = dot(vec3(_326, _327, _328), vec3(cbLight._m0[_1605].xyz));
    float _3929 = isnan(0.0) ? _1770 : (isnan(_1770) ? 0.0 : max(_1770, 0.0));
    float _1773 = isnan(1.0) ? _3929 : (isnan(_3929) ? 1.0 : min(_3929, 1.0));
    float _3940 = isnan(0.0) ? _509 : (isnan(_509) ? 0.0 : max(_509, 0.0));
    float _1774 = isnan(1.0) ? _3940 : (isnan(_3940) ? 1.0 : min(_3940, 1.0));
    float _1775 = dot(vec3(_326, _327, _328), vec3(_1767, _1768, _1769));
    float _3951 = isnan(0.0) ? _1775 : (isnan(_1775) ? 0.0 : max(_1775, 0.0));
    float _1778 = isnan(1.0) ? _3951 : (isnan(_3951) ? 1.0 : min(_3951, 1.0));
    float _1779 = dot(vec3(cbLight._m0[_1605].xyz), vec3(_1767, _1768, _1769));
    float _3962 = isnan(0.0) ? _1779 : (isnan(_1779) ? 0.0 : max(_1779, 0.0));
    float _1783 = _1759 * _1759;
    float _1787 = ((_1778 * _1778) * (_1783 + (-1.0))) + 1.0;
    float _1795 = exp2(log2(1.0 - (isnan(1.0) ? _3962 : (isnan(_3962) ? 1.0 : min(_3962, 1.0)))) * 5.0);
    float _1796 = 0.959999978542327880859375 - _490;
    float _1798 = 0.959999978542327880859375 - _491;
    float _1799 = 0.959999978542327880859375 - _492;
    float _1806 = 1.0 - _1759;
    float _1817 = (0.5 / (((_1774 * ((_1773 * _1806) + _1759)) + 9.9999999392252902907785028219223e-09) + (((_1774 * _1806) + _1759) * _1773))) * _1773;
    float _3973 = isnan(0.0) ? _1817 : (isnan(_1817) ? 0.0 : max(_1817, 0.0));
    float _1819 = (isnan(1.0) ? _3973 : (isnan(_3973) ? 1.0 : min(_3973, 1.0))) * (_1783 / ((_1787 * _1787) * 3.141590118408203125));
    uint _1833 = _1605 + 9u;
    float _1844 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1646].w)) * _329) * 0.949999988079071044921875);
    float _1845 = _1844 * _1844;
    float _1846 = cbLight._m0[_1646].x + _407;
    float _1847 = cbLight._m0[_1646].y + _408;
    float _1848 = cbLight._m0[_1646].z + _409;
    float _1852 = inversesqrt(dot(vec3(_1846, _1847, _1848), vec3(_1846, _1847, _1848)));
    float _1853 = _1852 * _1846;
    float _1854 = _1852 * _1847;
    float _1855 = _1852 * _1848;
    float _1856 = dot(vec3(_326, _327, _328), vec3(cbLight._m0[_1646].xyz));
    float _3984 = isnan(0.0) ? _1856 : (isnan(_1856) ? 0.0 : max(_1856, 0.0));
    float _1859 = isnan(1.0) ? _3984 : (isnan(_3984) ? 1.0 : min(_3984, 1.0));
    float _1860 = dot(vec3(_326, _327, _328), vec3(_1853, _1854, _1855));
    float _3995 = isnan(0.0) ? _1860 : (isnan(_1860) ? 0.0 : max(_1860, 0.0));
    float _1863 = isnan(1.0) ? _3995 : (isnan(_3995) ? 1.0 : min(_3995, 1.0));
    float _1864 = dot(vec3(cbLight._m0[_1646].xyz), vec3(_1853, _1854, _1855));
    float _4006 = isnan(0.0) ? _1864 : (isnan(_1864) ? 0.0 : max(_1864, 0.0));
    float _1868 = _1845 * _1845;
    float _1872 = ((_1863 * _1863) * (_1868 + (-1.0))) + 1.0;
    float _1879 = exp2(log2(1.0 - (isnan(1.0) ? _4006 : (isnan(_4006) ? 1.0 : min(_4006, 1.0)))) * 5.0);
    float _1886 = 1.0 - _1845;
    float _1896 = (0.5 / (((_1774 * ((_1859 * _1886) + _1845)) + 9.9999999392252902907785028219223e-09) + (((_1774 * _1886) + _1845) * _1859))) * _1859;
    float _4017 = isnan(0.0) ? _1896 : (isnan(_1896) ? 0.0 : max(_1896, 0.0));
    float _1898 = (isnan(1.0) ? _4017 : (isnan(_4017) ? 1.0 : min(_4017, 1.0))) * (_1868 / ((_1872 * _1872) * 3.141590118408203125));
    float _1908 = (((((_1879 * _1796) + _493) * cbLight._m0[_1833].x) * _1898) * _1628) + ((((cbLight._m0[_1745].x * _1597) * ((_1795 * _1796) + _493)) * _1819) * _1642);
    float _1909 = (((((_1879 * _1798) + _495) * cbLight._m0[_1833].y) * _1898) * _1628) + ((((cbLight._m0[_1745].y * _1598) * ((_1795 * _1798) + _495)) * _1819) * _1642);
    float _1910 = (((((_1879 * _1799) + _496) * cbLight._m0[_1833].z) * _1898) * _1628) + ((((cbLight._m0[_1745].z * _1599) * ((_1795 * _1799) + _496)) * _1819) * _1642);
    float _1972;
    float _1974;
    float _1976;
    if (_1682)
    {
        _1972 = _1908;
        _1974 = _1909;
        _1976 = _1910;
    }
    else
    {
        uint _1978 = _1605 + 2u;
        uint _1982 = _1605 + 10u;
        float _1996 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1978].w)) * _329) * 0.949999988079071044921875);
        float _1997 = _1996 * _1996;
        float _1998 = cbLight._m0[_1978].x + _407;
        float _1999 = cbLight._m0[_1978].y + _408;
        float _2000 = cbLight._m0[_1978].z + _409;
        float _2004 = inversesqrt(dot(vec3(_1998, _1999, _2000), vec3(_1998, _1999, _2000)));
        float _2005 = _2004 * _1998;
        float _2006 = _2004 * _1999;
        float _2007 = _2004 * _2000;
        float _2008 = dot(vec3(_326, _327, _328), vec3(cbLight._m0[_1978].xyz));
        float _4028 = isnan(0.0) ? _2008 : (isnan(_2008) ? 0.0 : max(_2008, 0.0));
        float _2011 = isnan(1.0) ? _4028 : (isnan(_4028) ? 1.0 : min(_4028, 1.0));
        float _2012 = dot(vec3(_326, _327, _328), vec3(_2005, _2006, _2007));
        float _4039 = isnan(0.0) ? _2012 : (isnan(_2012) ? 0.0 : max(_2012, 0.0));
        float _2015 = isnan(1.0) ? _4039 : (isnan(_4039) ? 1.0 : min(_4039, 1.0));
        float _2016 = dot(vec3(cbLight._m0[_1978].xyz), vec3(_2005, _2006, _2007));
        float _4050 = isnan(0.0) ? _2016 : (isnan(_2016) ? 0.0 : max(_2016, 0.0));
        float _2020 = _1997 * _1997;
        float _2024 = ((_2015 * _2015) * (_2020 + (-1.0))) + 1.0;
        float _2031 = exp2(log2(1.0 - (isnan(1.0) ? _4050 : (isnan(_4050) ? 1.0 : min(_4050, 1.0)))) * 5.0);
        float _2038 = 1.0 - _1997;
        float _2048 = (0.5 / (((_1774 * ((_2011 * _2038) + _1997)) + 9.9999999392252902907785028219223e-09) + (((_1774 * _2038) + _1997) * _2011))) * _2011;
        float _4061 = isnan(0.0) ? _2048 : (isnan(_2048) ? 0.0 : max(_2048, 0.0));
        float _2050 = (isnan(1.0) ? _4061 : (isnan(_4061) ? 1.0 : min(_4061, 1.0))) * (_2020 / ((_2024 * _2024) * 3.141590118408203125));
        float _2051 = isnan(1.0) ? _1620 : (isnan(_1620) ? 1.0 : min(_1620, 1.0));
        _1972 = (((((_2031 * _1796) + _493) * cbLight._m0[_1982].x) * _2050) * _2051) + _1908;
        _1974 = (((((_2031 * _1798) + _495) * cbLight._m0[_1982].y) * _2050) * _2051) + _1909;
        _1976 = (((((_2031 * _1799) + _496) * cbLight._m0[_1982].z) * _2050) * _2051) + _1910;
    }
    float _2086;
    float _2088;
    float _2090;
    if (_1700)
    {
        _2086 = _1972;
        _2088 = _1974;
        _2090 = _1976;
    }
    else
    {
        uint _2097 = _1605 + 3u;
        uint _2101 = _1605 + 11u;
        float _2115 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2097].w)) * _329) * 0.949999988079071044921875);
        float _2116 = _2115 * _2115;
        float _2117 = cbLight._m0[_2097].x + _407;
        float _2118 = cbLight._m0[_2097].y + _408;
        float _2119 = cbLight._m0[_2097].z + _409;
        float _2123 = inversesqrt(dot(vec3(_2117, _2118, _2119), vec3(_2117, _2118, _2119)));
        float _2124 = _2123 * _2117;
        float _2125 = _2123 * _2118;
        float _2126 = _2123 * _2119;
        float _2127 = dot(vec3(_326, _327, _328), vec3(cbLight._m0[_2097].xyz));
        float _4077 = isnan(0.0) ? _2127 : (isnan(_2127) ? 0.0 : max(_2127, 0.0));
        float _2130 = isnan(1.0) ? _4077 : (isnan(_4077) ? 1.0 : min(_4077, 1.0));
        float _2131 = dot(vec3(_326, _327, _328), vec3(_2124, _2125, _2126));
        float _4088 = isnan(0.0) ? _2131 : (isnan(_2131) ? 0.0 : max(_2131, 0.0));
        float _2134 = isnan(1.0) ? _4088 : (isnan(_4088) ? 1.0 : min(_4088, 1.0));
        float _2135 = dot(vec3(cbLight._m0[_2097].xyz), vec3(_2124, _2125, _2126));
        float _4099 = isnan(0.0) ? _2135 : (isnan(_2135) ? 0.0 : max(_2135, 0.0));
        float _2139 = _2116 * _2116;
        float _2143 = ((_2134 * _2134) * (_2139 + (-1.0))) + 1.0;
        float _2150 = exp2(log2(1.0 - (isnan(1.0) ? _4099 : (isnan(_4099) ? 1.0 : min(_4099, 1.0)))) * 5.0);
        float _2157 = 1.0 - _2116;
        float _2167 = (0.5 / (((_1774 * ((_2130 * _2157) + _2116)) + 9.9999999392252902907785028219223e-09) + (((_1774 * _2157) + _2116) * _2130))) * _2130;
        float _4110 = isnan(0.0) ? _2167 : (isnan(_2167) ? 0.0 : max(_2167, 0.0));
        float _2169 = (isnan(1.0) ? _4110 : (isnan(_4110) ? 1.0 : min(_4110, 1.0))) * (_2139 / ((_2143 * _2143) * 3.141590118408203125));
        float _2170 = isnan(1.0) ? _1621 : (isnan(_1621) ? 1.0 : min(_1621, 1.0));
        _2086 = (((((_2150 * _1796) + _493) * cbLight._m0[_2101].x) * _2169) * _2170) + _1972;
        _2088 = (((((_2150 * _1798) + _495) * cbLight._m0[_2101].y) * _2169) * _2170) + _1974;
        _2090 = (((((_2150 * _1799) + _496) * cbLight._m0[_2101].z) * _2169) * _2170) + _1976;
    }
    float _2305;
    float _2307;
    float _2309;
    float _2311;
    float _2313;
    float _2315;
    if (_1603.y == 0u)
    {
        float _2245 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2246 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2245;
        float _2247 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2245;
        float _2248 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2245;
        uvec4 _2260 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2261 = _2260.x;
        uint _2272 = uint((float(_2260.y) * floor(float(uint(cbSceneParam._m0[85u].y * _429) / _2261))) + floor(float(uint(cbSceneParam._m0[85u].x * _428) / _2261)));
        float _2282 = (log2(_2248 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2283 = isnan(0.0) ? _2282 : (isnan(_2282) ? 0.0 : max(_2282, 0.0));
        uint _2286 = uint(isnan(14.0) ? _2283 : (isnan(_2283) ? 14.0 : min(_2283, 14.0)));
        uvec4 _2291 = texelFetch(g_lightClusterGridBuffer, int(((_2286 << 2u) + (_2272 << 6u)) >> 2u));
        uint _2292 = _2291.x;
        uint _2293 = _2260.z;
        float _2422;
        float _2424;
        float _2426;
        float _2428;
        float _2430;
        float _2432;
        if (((((1u << ((_2293 >> 4u) & 15u)) + 4294967295u) & _2292) == 0u) || ((_2293 & 240u) == 0u))
        {
            _2422 = 0.0;
            _2424 = 0.0;
            _2426 = 0.0;
            _2428 = 0.0;
            _2430 = 0.0;
            _2432 = 0.0;
        }
        else
        {
            float _2423;
            float _2425;
            float _2427;
            float _2429;
            float _2431;
            float _2433;
            float _2583 = 0.0;
            float _2584 = 0.0;
            float _2585 = 0.0;
            float _2586 = 0.0;
            float _2587 = 0.0;
            float _2588 = 0.0;
            uint _2589 = 0u;
            uint _2598;
            bool _2599;
            for (;;)
            {
                _2598 = texelFetch(g_lightClassification, int((((_2286 << 5u) + (_2272 << 9u)) + (_2589 << 2u)) >> 2u)).x;
                _2599 = _2598 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2599)
                {
                    frontier_phi_66_pred = _2583;
                    frontier_phi_66_pred_1 = _2588;
                    frontier_phi_66_pred_2 = _2587;
                    frontier_phi_66_pred_3 = _2586;
                    frontier_phi_66_pred_4 = _2585;
                    frontier_phi_66_pred_5 = _2584;
                }
                else
                {
                    float _2728;
                    float _2729;
                    float _2730;
                    float _2731;
                    float _2732;
                    float _2733;
                    uint _2734;
                    _2728 = _2583;
                    _2729 = _2584;
                    _2730 = _2585;
                    _2731 = _2586;
                    _2732 = _2587;
                    _2733 = _2588;
                    _2734 = _2598;
                    float _2655;
                    float _2656;
                    float _2657;
                    float _2658;
                    float _2659;
                    float _2660;
                    for (;;)
                    {
                        uint _2738 = uint(findLSB(_2734)) + (_2589 << 5u);
                        uint _2735 = (_2734 + 4294967295u) & _2734;
                        uint _2740 = _2738 * 48u;
                        vec4 _2754 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2740)).x, texelFetch(g_PointLightRenderingBuffer, int(_2740 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2740 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2740 + 3u)).x));
                        uint _2760 = (_2738 * 48u) + 4u;
                        vec4 _2773 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2760)).x, texelFetch(g_PointLightRenderingBuffer, int(_2760 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2760 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2760 + 3u)).x));
                        uint _2779 = (_2738 * 48u) + 8u;
                        vec3 _2790 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2779)).x, texelFetch(g_PointLightRenderingBuffer, int(_2779 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2779 + 2u)).x));
                        float _2794 = _2754.x - _2246;
                        float _2795 = _2754.y - _2247;
                        float _2796 = _2754.z - _2248;
                        float _2797 = dot(vec3(_2794, _2795, _2796), vec3(_2794, _2795, _2796));
                        float _2800 = inversesqrt(_2797);
                        float _2801 = _2800 * _2794;
                        float _2802 = _2800 * _2795;
                        float _2803 = _2800 * _2796;
                        float _2804 = dot(vec3(_449, _452, _455), vec3(_2801, _2802, _2803));
                        float _2809 = 1.0 - (_2797 * _2754.w);
                        float _4136 = isnan(0.0) ? _2809 : (isnan(_2809) ? 0.0 : max(_2809, 0.0));
                        float _2810 = isnan(1.0) ? _4136 : (isnan(_4136) ? 1.0 : min(_4136, 1.0));
                        float _2811 = sqrt(_2797) * _2773.w;
                        float _2814 = 1.39999997615814208984375 / (_2811 + 1.39999997615814208984375);
                        float _2815 = _2814 * _2814;
                        float _2818 = ((1.0 - _2815) * _2804) + _2815;
                        float _2821 = _2811 * _2811;
                        float _2825 = ((isnan(0.0) ? _2818 : (isnan(_2818) ? 0.0 : max(_2818, 0.0))) * _2810) / ((_2821 * 0.699999988079071044921875) + 1.0);
                        float _2829 = (-0.0) - _2246;
                        float _2830 = (-0.0) - _2247;
                        float _2831 = (-0.0) - _2248;
                        float _2835 = inversesqrt(dot(vec3(_2829, _2830, _2831), vec3(_2829, _2830, _2831)));
                        float _2836 = _2835 * _2829;
                        float _2837 = _2835 * _2830;
                        float _2838 = _2835 * _2831;
                        float _2846 = exp2(log2(1.0 / ((_2821 * 3.5) + 5.0)) * 0.25);
                        float _2847 = 1.0 - _524;
                        float _2854 = sqrt(1.0 - ((1.0 - (_2847 * _2847)) * (1.0 - (_2846 * _2846))));
                        float _2855 = _2854 * _2854;
                        float _2856 = _2855 * _2855;
                        float _2857 = _2836 + _2801;
                        float _2858 = _2837 + _2802;
                        float _2859 = _2838 + _2803;
                        float _2863 = inversesqrt(dot(vec3(_2857, _2858, _2859), vec3(_2857, _2858, _2859)));
                        float _2867 = dot(vec3(_449, _452, _455), vec3(_2836, _2837, _2838));
                        float _4152 = isnan(0.0) ? _2867 : (isnan(_2867) ? 0.0 : max(_2867, 0.0));
                        float _2870 = isnan(1.0) ? _4152 : (isnan(_4152) ? 1.0 : min(_4152, 1.0));
                        float _2871 = dot(vec3(_449, _452, _455), vec3(_2863 * _2857, _2863 * _2858, _2863 * _2859));
                        float _4163 = isnan(0.0) ? _2871 : (isnan(_2871) ? 0.0 : max(_2871, 0.0));
                        float _2874 = isnan(1.0) ? _4163 : (isnan(_4163) ? 1.0 : min(_4163, 1.0));
                        float _2878 = ((_2874 * _2874) * (_2856 + (-1.0))) + 1.0;
                        float _2879 = _2814 * _2855;
                        float _2880 = _2879 * _2879;
                        float _2883 = ((1.0 - _2880) * _2804) + _2880;
                        float _4174 = isnan(0.0) ? _2883 : (isnan(_2883) ? 0.0 : max(_2883, 0.0));
                        float _2884 = isnan(1.0) ? _4174 : (isnan(_4174) ? 1.0 : min(_4174, 1.0));
                        float _2885 = 1.0 - _2855;
                        float _2895 = (0.5 / (((_2884 * ((_2870 * _2885) + _2855)) + 9.9999999392252902907785028219223e-09) + (((_2884 * _2885) + _2855) * _2870))) * _2884;
                        float _4185 = isnan(0.0) ? _2895 : (isnan(_2895) ? 0.0 : max(_2895, 0.0));
                        float _2906 = (((_2856 * 3.1415927410125732421875) * (isnan(1.0) ? _4185 : (isnan(_4185) ? 1.0 : min(_4185, 1.0)))) / ((_2878 * _2878) * ((_2821 * 2.1991131305694580078125) + 3.141590118408203125))) * _2810;
                        _2658 = (_2825 * _2773.x) + _2731;
                        _2659 = (_2825 * _2773.y) + _2732;
                        _2660 = (_2825 * _2773.z) + _2733;
                        _2655 = (_2906 * _2790.x) + _2728;
                        _2656 = (_2906 * _2790.y) + _2729;
                        _2657 = (_2906 * _2790.z) + _2730;
                        if (_2735 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2728 = _2655;
                            _2729 = _2656;
                            _2730 = _2657;
                            _2731 = _2658;
                            _2732 = _2659;
                            _2733 = _2660;
                            _2734 = _2735;
                        }
                    }
                    frontier_phi_66_pred = _2655;
                    frontier_phi_66_pred_1 = _2660;
                    frontier_phi_66_pred_2 = _2659;
                    frontier_phi_66_pred_3 = _2658;
                    frontier_phi_66_pred_4 = _2657;
                    frontier_phi_66_pred_5 = _2656;
                }
                _2423 = frontier_phi_66_pred;
                _2433 = frontier_phi_66_pred_1;
                _2431 = frontier_phi_66_pred_2;
                _2429 = frontier_phi_66_pred_3;
                _2427 = frontier_phi_66_pred_4;
                _2425 = frontier_phi_66_pred_5;
                uint _2590 = _2589 + 1u;
                if (_2590 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2583 = _2423;
                    _2584 = _2425;
                    _2585 = _2427;
                    _2586 = _2429;
                    _2587 = _2431;
                    _2588 = _2433;
                    _2589 = _2590;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2422 = _2423;
            _2424 = _2425;
            _2426 = _2427;
            _2428 = _2429;
            _2430 = _2431;
            _2432 = _2433;
        }
        uvec4 _2436 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2437 = _2436.z;
        uint _2439 = (_2437 >> 8u) & 15u;
        float _2551;
        float _2553;
        float _2555;
        float _2557;
        float _2559;
        float _2561;
        if (((4294967295u << _2439) & _2292) == 0u)
        {
            _2551 = _2422;
            _2553 = _2424;
            _2555 = _2426;
            _2557 = _2428;
            _2559 = _2430;
            _2561 = _2432;
        }
        else
        {
            float _2576 = inversesqrt(dot(vec3(_2246, _2247, _2248), vec3(_2246, _2247, _2248)));
            float _2577 = _2576 * _2246;
            float _2578 = _2576 * _2247;
            float _2579 = _2576 * _2248;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2439 < ((_2437 >> 12u) & 15u))
            {
                float _2552;
                float _2554;
                float _2556;
                float _2558;
                float _2560;
                float _2562;
                float _2711 = _2422;
                float _2712 = _2424;
                float _2713 = _2426;
                float _2714 = _2428;
                float _2715 = _2430;
                float _2716 = _2432;
                uint _2717 = _2439;
                uint _2726;
                bool _2727;
                for (;;)
                {
                    _2726 = texelFetch(g_lightClassification, int((((_2286 << 5u) + (_2272 << 9u)) + (_2717 << 2u)) >> 2u)).x;
                    _2727 = _2726 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2727)
                    {
                        frontier_phi_77_pred = _2716;
                        frontier_phi_77_pred_1 = _2715;
                        frontier_phi_77_pred_2 = _2714;
                        frontier_phi_77_pred_3 = _2713;
                        frontier_phi_77_pred_4 = _2712;
                        frontier_phi_77_pred_5 = _2711;
                    }
                    else
                    {
                        float _2920;
                        float _2921;
                        float _2922;
                        float _2923;
                        float _2924;
                        float _2925;
                        float _3216;
                        float _3217;
                        float _3218;
                        float _3219;
                        float _3220;
                        float _3221;
                        float _2933 = _2711;
                        float _2934 = _2712;
                        float _2935 = _2713;
                        float _2936 = _2714;
                        float _2937 = _2715;
                        float _2938 = _2716;
                        uint _2939 = _2726;
                        uint _2940;
                        vec4 _2965;
                        float _2966;
                        vec4 _2981;
                        vec3 _2993;
                        vec4 _3009;
                        vec4 _3025;
                        float _3072;
                        bool _3073;
                        for (;;)
                        {
                            uint _2950 = ((_2717 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2939));
                            _2940 = (_2939 + 4294967295u) & _2939;
                            uint _2952 = _2950 * 40u;
                            _2965 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2952)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2952 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2952 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2952 + 3u)).x));
                            _2966 = _2965.w;
                            uint _2968 = (_2950 * 40u) + 4u;
                            _2981 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2968)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2968 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2968 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2968 + 3u)).x));
                            uint _2983 = (_2950 * 40u) + 8u;
                            _2993 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2983)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2983 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2983 + 2u)).x));
                            uint _2996 = (_2950 * 40u) + 16u;
                            _3009 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2996)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2996 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2996 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2996 + 3u)).x));
                            uint _3012 = (_2950 * 40u) + 20u;
                            _3025 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3012)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3012 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3012 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3012 + 3u)).x));
                            uint _3028 = (_2950 * 40u) + 24u;
                            vec4 _3041 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3028)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3028 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3028 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3028 + 3u)).x));
                            uint _3047 = (_2950 * 40u) + 28u;
                            vec4 _3060 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3047)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3047 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3047 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3047 + 3u)).x));
                            _3072 = fma(_2248, _3060.z, fma(_2247, _3060.y, _3060.x * _2246)) + _3060.w;
                            _3073 = !((fma(_2248, _3041.z, fma(_2247, _3041.y, _3041.x * _2246)) + _3041.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3073)
                            {
                                float _3100 = _2965.x - _2246;
                                float _3101 = _2965.y - _2247;
                                float _3102 = _2965.z - _2248;
                                float _3103 = dot(vec3(_3100, _3101, _3102), vec3(_3100, _3101, _3102));
                                float _3106 = inversesqrt(_3103);
                                float _3107 = _3106 * _3100;
                                float _3108 = _3106 * _3101;
                                float _3109 = _3106 * _3102;
                                float _3113 = 1.0 - (_3103 / (_2966 * _2966));
                                float _4196 = isnan(0.0) ? _3113 : (isnan(_3113) ? 0.0 : max(_3113, 0.0));
                                float _3114 = isnan(1.0) ? _4196 : (isnan(_4196) ? 1.0 : min(_4196, 1.0));
                                float _3118 = sqrt(_3103) * _2981.w;
                                float _3120 = 1.39999997615814208984375 / (_3118 + 1.39999997615814208984375);
                                float _3121 = _3120 * _3120;
                                float _3124 = ((1.0 - _3121) * dot(vec3(_3107, _3108, _3109), vec3(_449, _452, _455))) + _3121;
                                float _3127 = _3118 * _3118;
                                float _3131 = (fma(_2248, _3009.z, fma(_2247, _3009.y, _3009.x * _2246)) + _3009.w) / _3072;
                                float _3132 = (fma(_2248, _3025.z, fma(_2247, _3025.y, _3025.x * _2246)) + _3025.w) / _3072;
                                float _3136 = 1.0 - dot(vec2(_3131, _3132), vec2(_3131, _3132));
                                float _4212 = isnan(0.0) ? _3136 : (isnan(_3136) ? 0.0 : max(_3136, 0.0));
                                float _3137 = isnan(1.0) ? _4212 : (isnan(_4212) ? 1.0 : min(_4212, 1.0));
                                float _3138 = _3137 * (((isnan(0.0) ? _3124 : (isnan(_3124) ? 0.0 : max(_3124, 0.0))) * _3114) / ((_3127 * 0.699999988079071044921875) + 1.0));
                                float _3150 = exp2(log2(1.0 / ((_3127 * 3.5) + 5.0)) * 0.25);
                                float _3151 = 1.0 - _524;
                                float _3158 = sqrt(1.0 - ((1.0 - (_3151 * _3151)) * (1.0 - (_3150 * _3150))));
                                float _3159 = _3158 * _3158;
                                float _3160 = _3159 * _3159;
                                float _3161 = _3107 - _2577;
                                float _3162 = _3108 - _2578;
                                float _3163 = _3109 - _2579;
                                float _3167 = inversesqrt(dot(vec3(_3161, _3162, _3163), vec3(_3161, _3162, _3163)));
                                float _3171 = dot(vec3(_449, _452, _455), vec3((-0.0) - _2577, (-0.0) - _2578, (-0.0) - _2579));
                                float _4223 = isnan(0.0) ? _3171 : (isnan(_3171) ? 0.0 : max(_3171, 0.0));
                                float _3174 = isnan(1.0) ? _4223 : (isnan(_4223) ? 1.0 : min(_4223, 1.0));
                                float _3175 = dot(vec3(_449, _452, _455), vec3(_3167 * _3161, _3167 * _3162, _3167 * _3163));
                                float _4234 = isnan(0.0) ? _3175 : (isnan(_3175) ? 0.0 : max(_3175, 0.0));
                                float _3178 = isnan(1.0) ? _4234 : (isnan(_4234) ? 1.0 : min(_4234, 1.0));
                                float _3182 = ((_3178 * _3178) * (_3160 + (-1.0))) + 1.0;
                                float _3183 = _3120 * _3159;
                                float _3184 = _3183 * _3183;
                                float _3190 = ((1.0 - _3184) * dot(vec3(_449, _452, _455), vec3(_3107, _3108, _3109))) + _3184;
                                float _4245 = isnan(0.0) ? _3190 : (isnan(_3190) ? 0.0 : max(_3190, 0.0));
                                float _3191 = isnan(1.0) ? _4245 : (isnan(_4245) ? 1.0 : min(_4245, 1.0));
                                float _3192 = 1.0 - _3159;
                                float _3202 = (0.5 / (((_3191 * ((_3174 * _3192) + _3159)) + 9.9999999392252902907785028219223e-09) + (((_3191 * _3192) + _3159) * _3174))) * _3191;
                                float _4256 = isnan(0.0) ? _3202 : (isnan(_3202) ? 0.0 : max(_3202, 0.0));
                                float _3212 = (_3137 * _3114) * (((_3160 * 3.1415927410125732421875) * (isnan(1.0) ? _4256 : (isnan(_4256) ? 1.0 : min(_4256, 1.0)))) / ((_3182 * _3182) * ((_3127 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3138 * _2981.y;
                                frontier_phi_83_pred_1 = _3138 * _2981.x;
                                frontier_phi_83_pred_2 = _3212 * _2993.z;
                                frontier_phi_83_pred_3 = _3212 * _2993.y;
                                frontier_phi_83_pred_4 = _3212 * _2993.x;
                                frontier_phi_83_pred_5 = _3138 * _2981.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3220 = frontier_phi_83_pred;
                            _3219 = frontier_phi_83_pred_1;
                            _3218 = frontier_phi_83_pred_2;
                            _3217 = frontier_phi_83_pred_3;
                            _3216 = frontier_phi_83_pred_4;
                            _3221 = frontier_phi_83_pred_5;
                            _2923 = _3219 + _2936;
                            _2924 = _3220 + _2937;
                            _2925 = _3221 + _2938;
                            _2920 = _3216 + _2933;
                            _2921 = _3217 + _2934;
                            _2922 = _3218 + _2935;
                            if (_2940 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2933 = _2920;
                                _2934 = _2921;
                                _2935 = _2922;
                                _2936 = _2923;
                                _2937 = _2924;
                                _2938 = _2925;
                                _2939 = _2940;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _2925;
                        frontier_phi_77_pred_1 = _2924;
                        frontier_phi_77_pred_2 = _2923;
                        frontier_phi_77_pred_3 = _2922;
                        frontier_phi_77_pred_4 = _2921;
                        frontier_phi_77_pred_5 = _2920;
                    }
                    _2562 = frontier_phi_77_pred;
                    _2560 = frontier_phi_77_pred_1;
                    _2558 = frontier_phi_77_pred_2;
                    _2556 = frontier_phi_77_pred_3;
                    _2554 = frontier_phi_77_pred_4;
                    _2552 = frontier_phi_77_pred_5;
                    uint _2718 = _2717 + 1u;
                    if (_2718 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2711 = _2552;
                        _2712 = _2554;
                        _2713 = _2556;
                        _2714 = _2558;
                        _2715 = _2560;
                        _2716 = _2562;
                        _2717 = _2718;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2556;
                frontier_phi_58_59_ladder_1 = _2562;
                frontier_phi_58_59_ladder_2 = _2560;
                frontier_phi_58_59_ladder_3 = _2558;
                frontier_phi_58_59_ladder_4 = _2554;
                frontier_phi_58_59_ladder_5 = _2552;
            }
            else
            {
                frontier_phi_58_59_ladder = _2426;
                frontier_phi_58_59_ladder_1 = _2432;
                frontier_phi_58_59_ladder_2 = _2430;
                frontier_phi_58_59_ladder_3 = _2428;
                frontier_phi_58_59_ladder_4 = _2424;
                frontier_phi_58_59_ladder_5 = _2422;
            }
            _2551 = frontier_phi_58_59_ladder_5;
            _2553 = frontier_phi_58_59_ladder_4;
            _2555 = frontier_phi_58_59_ladder;
            _2557 = frontier_phi_58_59_ladder_3;
            _2559 = frontier_phi_58_59_ladder_2;
            _2561 = frontier_phi_58_59_ladder_1;
        }
        float _2566 = isnan(1.0) ? _508 : (isnan(_508) ? 1.0 : min(_508, 1.0));
        _2305 = (_2566 * _2557) + _1738;
        _2307 = (_2566 * _2559) + _1740;
        _2309 = (_2566 * _2561) + _1742;
        _2311 = ((_2551 * _493) * _2566) + _2086;
        _2313 = ((_2553 * _495) * _2566) + _2088;
        _2315 = ((_2555 * _496) * _2566) + _2090;
    }
    else
    {
        _2305 = _1738;
        _2307 = _1740;
        _2309 = _1742;
        _2311 = _2086;
        _2313 = _2088;
        _2315 = _2090;
    }
    uint _2321 = _469 + uint(cbMatDynParam._m0[0u].w);
    float _2327 = ((((cbMtdParam._m0[10u].x * cbMtdParam._m0[12u].y) * _290.x) + cbMtdParam._m0[11u].x) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_2321].x;
    float _2328 = ((((cbMtdParam._m0[10u].y * cbMtdParam._m0[12u].y) * _290.y) + cbMtdParam._m0[11u].y) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_2321].y;
    float _2329 = ((cbMtdParam._m0[11u].z + ((cbMtdParam._m0[10u].z * cbMtdParam._m0[12u].y) * _290.z)) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_2321].z;
    float _4272 = isnan(0.0) ? _483 : (isnan(_483) ? 0.0 : max(_483, 0.0));
    float _4283 = isnan(0.0) ? _484 : (isnan(_484) ? 0.0 : max(_484, 0.0));
    float _4294 = isnan(0.0) ? _485 : (isnan(_485) ? 0.0 : max(_485, 0.0));
    float _2346 = (((isnan(1.0) ? _4272 : (isnan(_4272) ? 1.0 : min(_4272, 1.0))) * (_2305 + ((isnan(0.0) ? _1271 : (isnan(_1271) ? 0.0 : max(_1271, 0.0))) * _508))) + ((_2311 + ((isnan(0.0) ? _1569 : (isnan(_1569) ? 0.0 : max(_1569, 0.0))) * _1350)) * cbPerFrame._m0[3u].x)) + _2327;
    float _2348 = (_2328 + ((_2313 + ((isnan(0.0) ? _1572 : (isnan(_1572) ? 0.0 : max(_1572, 0.0))) * _1350)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4283 : (isnan(_4283) ? 1.0 : min(_4283, 1.0))) * (_2307 + ((isnan(0.0) ? _1274 : (isnan(_1274) ? 0.0 : max(_1274, 0.0))) * _508)));
    float _2350 = (_2329 + ((_2315 + ((isnan(0.0) ? _1575 : (isnan(_1575) ? 0.0 : max(_1575, 0.0))) * _1350)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4294 : (isnan(_4294) ? 1.0 : min(_4294, 1.0))) * (_2309 + ((isnan(0.0) ? _1277 : (isnan(_1277) ? 0.0 : max(_1277, 0.0))) * _508)));
    float _2351 = isnan(0.0) ? _2346 : (isnan(_2346) ? 0.0 : max(_2346, 0.0));
    float _2352 = isnan(0.0) ? _2348 : (isnan(_2348) ? 0.0 : max(_2348, 0.0));
    float _2353 = isnan(0.0) ? _2350 : (isnan(_2350) ? 0.0 : max(_2350, 0.0));
    float _2359 = cbMtdParam._m0[2u].x * _2327;
    float _2360 = cbMtdParam._m0[2u].y * _2328;
    float _2361 = cbMtdParam._m0[2u].z * _2329;
    float _4320 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2363 = isnan(1.0) ? _4320 : (isnan(_4320) ? 1.0 : min(_4320, 1.0));
    uint _2364 = _468 + 6u;
    float _2372 = _428 / cbSceneParam._m0[86u].x;
    float _2373 = _429 / cbSceneParam._m0[86u].y;
    vec4 _2387 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2372, _2373, (log2((isnan(cbSceneParam._m0[77u].w) ? _349 : (isnan(_349) ? cbSceneParam._m0[77u].w : min(_349, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2389 = _2387.x;
    float _2390 = _2387.y;
    float _2391 = _2387.z;
    float _2392 = _2387.w;
    float _2485;
    float _2487;
    float _2489;
    float _2491;
    if (_349 > cbSceneParam._m0[78u].w)
    {
        float _2447 = isnan(_349) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _349 : min(cbSceneParam._m0[80u].w, _349));
        float _2448 = _2447 / _349;
        float _2459 = _2448 * _400;
        float _2460 = _401 * _2448;
        float _2461 = (-0.0) - _2460;
        float _2463 = _2448 * _402;
        float _2465 = (cbSceneParam._m0[77u].w * _2461) / _2447;
        float _2466 = _2465 + cbSceneParam._m0[79u].w;
        float _2467 = cbSceneParam._m0[79u].w - _2460;
        float _2473 = sqrt(((_2459 * _2459) + (_2460 * _2460)) + (_2463 * _2463));
        float _2476 = (1.0 - (cbSceneParam._m0[77u].w / _2447)) * _2473;
        float _2481 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2483 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2668;
        if (abs((_2461 - _2465) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2668 = ((((_2466 > 0.0) ? exp2(_2481 * _2466) : (2.0 - exp2(_2483 * _2466))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2476;
        }
        else
        {
            float _2612 = 1.0 / cbSceneParam._m0[80u].x;
            float _2613 = isnan(_2467) ? _2466 : (isnan(_2466) ? _2467 : max(_2466, _2467));
            float _2614 = isnan(_2467) ? _2466 : (isnan(_2466) ? _2467 : min(_2466, _2467));
            float _2623 = isnan(0.0) ? _2613 : (isnan(_2613) ? 0.0 : min(_2613, 0.0));
            float _2624 = isnan(0.0) ? _2614 : (isnan(_2614) ? 0.0 : min(_2614, 0.0));
            _2668 = ((abs(_2473 / _2461) * cbSceneParam._m0[80u].y) * ((((_2623 - _2624) * 2.0) - ((exp2(_2481 * (isnan(0.0) ? _2613 : (isnan(_2613) ? 0.0 : max(_2613, 0.0)))) - exp2(_2481 * (isnan(0.0) ? _2614 : (isnan(_2614) ? 0.0 : max(_2614, 0.0))))) * _2612)) - ((exp2(_2483 * _2623) - exp2(_2483 * _2624)) * _2612))) + (_2476 * cbSceneParam._m0[80u].z);
        }
        vec4 _2670 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2372, _2373, 1.0), 0.0);
        float _2679 = exp2((_2668 * (-1.44269502162933349609375)) * (1.0 - _2670.w));
        float _2680 = log2(_2679);
        float _2696 = log2(_2392);
        _2485 = (exp2(_2696 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2680 * cbSceneParam._m0[78u].x)) * _2670.x) / cbSceneParam._m0[78u].x)) + _2389;
        _2487 = (exp2(_2696 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2680 * cbSceneParam._m0[78u].y)) * _2670.y) / cbSceneParam._m0[78u].y)) + _2390;
        _2489 = (exp2(_2696 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2680 * cbSceneParam._m0[78u].z)) * _2670.z) / cbSceneParam._m0[78u].z)) + _2391;
        _2491 = _2679 * _2392;
    }
    else
    {
        _2485 = _2389;
        _2487 = _2390;
        _2489 = _2391;
        _2491 = _2392;
    }
    bool _2706;
    vec4 _2500;
    vec4 _2522;
    float _2524;
    float _2528;
    float _2529;
    float _2530;
    float _2533;
    float _2536;
    float _2539;
    float _2540;
    bool _2550;
    for (;;)
    {
        _2500 = cbMatDynParam._m0[0u];
        float _2502 = roundEven(_2500.y);
        bool _2503 = _2502 == 3.0;
        float _2504 = log2(_2491);
        float _2508 = exp2(_2504 * cbSceneParam._m0[78u].x);
        float _2509 = exp2(_2504 * cbSceneParam._m0[78u].y);
        float _2510 = exp2(_2504 * cbSceneParam._m0[78u].z);
        float _2511 = _2508 * _2351;
        float _2512 = _2509 * _2352;
        float _2513 = _2510 * _2353;
        float _2520 = _416 + (-0.5);
        _2522 = cbMtdParam._m0[1u];
        _2524 = _2522.y * _2520;
        float _2527 = (_2502 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2528 = _2527 * (_2503 ? _2511 : (_2511 + (cbSceneParam._m0[72u].w * _2485)));
        _2529 = _2527 * (_2503 ? _2512 : (_2512 + (cbSceneParam._m0[72u].w * _2487)));
        _2530 = _2527 * (_2503 ? _2513 : (_2513 + (cbSceneParam._m0[72u].w * _2489)));
        _2533 = ((_2359 * _2363) * _2508) * _2527;
        _2536 = ((_2360 * _2363) * _2509) * _2527;
        _2539 = ((_2361 * _2363) * _2510) * _2527;
        _2540 = _2520 * 0.999000012874603271484375;
        _2550 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2550)
        {
            if ((cbInstanceData._m0[_468 + 7u].x + _2540) < 0.5)
            {
                _2706 = true;
                break;
            }
        }
        uint _2647 = _469 + uint(_2500.w);
        if ((cbInstanceData._m0[_2647].w < 1.0) && ((cbInstanceData._m0[_2647].w + _2540) < 0.5))
        {
            _2706 = true;
            break;
        }
        if ((_2524 + 1.0) < _2522.x)
        {
            _2706 = true;
            break;
        }
        _2706 = false;
        break;
    }
    float _2911;
    if (_2706)
    {
        discard_state = true;
        _2911 = 0.0;
    }
    else
    {
        _2911 = cbInstanceData._m0[_2364].w;
    }
    SV_Target.x = _2528;
    SV_Target.y = _2529;
    SV_Target.z = _2530;
    SV_Target.w = _2911;
    SV_Target_1.x = _2533;
    SV_Target_1.y = _2536;
    SV_Target_1.z = _2539;
    SV_Target_1.w = cbInstanceData._m0[_2364].w;
    discard_exit();
}


