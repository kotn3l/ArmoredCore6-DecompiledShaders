#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[13];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D P_BS_M1_Emissive_Glow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D P_BS_M1_Emissive_Glow_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D P_BS_M1_Emissive_Glow_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D P_BS_M1_Emissive_Glow_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _931;
float _3641;
float _3642;
float _3643;
float _3644;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _186 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _187 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _188 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _193 = inversesqrt(dot(vec3(_186, _187, _188), vec3(_186, _187, _188)));
    float _200 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _207 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _230 = texture(sampler2D(P_BS_M1_Emissive_Glow_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _236 = _230.x * cbMtdParam._m0[9u].x;
    float _237 = _230.y * cbMtdParam._m0[9u].y;
    float _238 = _230.z * cbMtdParam._m0[9u].z;
    vec4 _250 = texture(sampler2D(P_BS_M1_Emissive_Glow_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _257 = cbMtdParam._m0[12u].x + _250.x;
    vec4 _269 = texture(sampler2D(P_BS_M1_Emissive_Glow_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _273 = _269.z;
    float _277 = (_269.x * 2.0) + (-1.0);
    float _279 = (_269.y * 2.0) + (-1.0);
    float _280 = dot(vec2(_277, _279), vec2(_277, _279));
    float _3653 = isnan(0.0) ? _280 : (isnan(_280) ? 0.0 : max(_280, 0.0));
    float _286 = sqrt(1.0 - (isnan(1.0) ? _3653 : (isnan(_3653) ? 1.0 : min(_3653, 1.0))));
    vec4 _309 = texture(sampler2D(P_BS_M1_Emissive_Glow_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _334 = fma(_286, _200 * NORMAL.x, fma(_279, _207 * TANGENT.x, (_193 * _186) * _277));
    float _337 = fma(_286, _200 * NORMAL.y, fma(_279, _207 * TANGENT.y, (_193 * _187) * _277));
    float _340 = fma(_286, _200 * NORMAL.z, fma(_279, _207 * TANGENT.z, (_193 * _188) * _277));
    float _344 = inversesqrt(dot(vec3(_334, _337, _340), vec3(_334, _337, _340)));
    float _345 = _344 * _334;
    float _346 = _344 * _337;
    float _347 = _344 * _340;
    float _3664 = isnan(0.0) ? _273 : (isnan(_273) ? 0.0 : max(_273, 0.0));
    float _348 = isnan(1.0) ? _3664 : (isnan(_3664) ? 1.0 : min(_3664, 1.0));
    float _3675 = isnan(0.0) ? _236 : (isnan(_236) ? 0.0 : max(_236, 0.0));
    float _3686 = isnan(0.0) ? _237 : (isnan(_237) ? 0.0 : max(_237, 0.0));
    float _3697 = isnan(0.0) ? _238 : (isnan(_238) ? 0.0 : max(_238, 0.0));
    float _3708 = isnan(0.0) ? _257 : (isnan(_257) ? 0.0 : max(_257, 0.0));
    float _352 = isnan(1.0) ? _3708 : (isnan(_3708) ? 1.0 : min(_3708, 1.0));
    float _368 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _409 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _419 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _409);
    float _420 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _409);
    float _421 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _409);
    float _425 = inversesqrt(dot(vec3(_419, _420, _421), vec3(_419, _420, _421)));
    float _426 = _419 * _425;
    float _427 = _420 * _425;
    float _428 = _421 * _425;
    vec4 _433 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _435 = _433.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _610 = sqrt(((_419 * _419) + (_420 * _420)) + (_421 * _421));
        float _616 = (cbMatDynParam._m0[5u].x * _610) + cbMatDynParam._m0[5u].y;
        float _3719 = isnan(0.0) ? _616 : (isnan(_616) ? 0.0 : max(_616, 0.0));
        float _617 = isnan(1.0) ? _3719 : (isnan(_3719) ? 1.0 : min(_3719, 1.0));
        float _621 = (cbMatDynParam._m0[5u].z * _610) + cbMatDynParam._m0[5u].w;
        float _3730 = isnan(0.0) ? _621 : (isnan(_621) ? 0.0 : max(_621, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3730 : (isnan(_3730) ? 1.0 : min(_3730, 1.0))) - _617)) + _617) < ((_435 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _447 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _448 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _468 = fma(_347, cbSceneParam._m0[5u].z, fma(_346, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _345));
    float _471 = fma(_347, cbSceneParam._m0[6u].z, fma(_346, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _345));
    float _474 = fma(_347, cbSceneParam._m0[7u].z, fma(_346, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _345));
    uint _487 = uint(roundEven(NORMAL.w)) * 13u;
    uint _488 = _487 + 9u;
    uint _489 = _488 + uint(cbMatDynParam._m0[0u].w);
    float _495 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3675 : (isnan(_3675) ? 1.0 : min(_3675, 1.0)))) * cbInstanceData._m0[_489].x;
    float _496 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3686 : (isnan(_3686) ? 1.0 : min(_3686, 1.0)))) * cbInstanceData._m0[_489].y;
    float _497 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3697 : (isnan(_3697) ? 1.0 : min(_3697, 1.0)))) * cbInstanceData._m0[_489].z;
    float _3741 = isnan(0.0) ? _495 : (isnan(_495) ? 0.0 : max(_495, 0.0));
    float _498 = isnan(1.0) ? _3741 : (isnan(_3741) ? 1.0 : min(_3741, 1.0));
    float _3752 = isnan(0.0) ? _496 : (isnan(_496) ? 0.0 : max(_496, 0.0));
    float _499 = isnan(1.0) ? _3752 : (isnan(_3752) ? 1.0 : min(_3752, 1.0));
    float _3763 = isnan(0.0) ? _497 : (isnan(_497) ? 0.0 : max(_497, 0.0));
    float _500 = isnan(1.0) ? _3763 : (isnan(_3763) ? 1.0 : min(_3763, 1.0));
    float _501 = 1.0 - _352;
    float _502 = _498 * _501;
    float _503 = _499 * _501;
    float _504 = _500 * _501;
    float _509 = (_498 + (-0.039999999105930328369140625)) * _352;
    float _510 = (_499 + (-0.039999999105930328369140625)) * _352;
    float _511 = (_500 + (-0.039999999105930328369140625)) * _352;
    float _512 = _509 + 0.039999999105930328369140625;
    float _514 = _510 + 0.039999999105930328369140625;
    float _515 = _511 + 0.039999999105930328369140625;
    vec4 _524 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _447, cbSceneParam._m0[86u].y * _448));
    float _527 = _524.x * TEXCOORD.z;
    float _528 = dot(vec3(_345, _346, _347), vec3(_426, _427, _428));
    float _531 = _528 * 2.0;
    float _535 = (_531 * _345) - _426;
    float _536 = (_531 * _346) - _427;
    float _537 = (_531 * _347) - _428;
    float _541 = abs(dot(vec3(_426, _427, _428), vec3(_345, _346, _347)));
    float _3774 = isnan(0.0) ? _541 : (isnan(_541) ? 0.0 : max(_541, 0.0));
    float _543 = sqrt(_348);
    float _556 = exp2((_543 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3774 : (isnan(_3774) ? 1.0 : min(_3774, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_543 * 3.0));
    float _562 = (1.0 - _556) * ((_543 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _563 = _556 * _543;
    float _591 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _595 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _599 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _930;
    float _932;
    float _933;
    float _934;
    float _935;
    float _936;
    float _937;
    float _938;
    float _939;
    float _940;
    float _941;
    float _942;
    float _943;
    float _944;
    float _945;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _655 = fma(_599, cbModelParam._m0[26u].z, fma(_595, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _591));
        float _659 = fma(_599, cbModelParam._m0[27u].z, fma(_595, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _591));
        float _663 = fma(_599, cbModelParam._m0[28u].z, fma(_595, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _591));
        float _688 = _591 + _345;
        float _689 = _595 + _346;
        float _690 = _599 + _347;
        float _700 = fma(_690, cbModelParam._m0[26u].z, fma(_689, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _688)) - _655;
        float _701 = fma(_690, cbModelParam._m0[27u].z, fma(_689, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _688)) - _659;
        float _702 = fma(_690, cbModelParam._m0[28u].z, fma(_689, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _688)) - _663;
        float _706 = inversesqrt(dot(vec3(_700, _701, _702), vec3(_700, _701, _702)));
        float _719 = ((_706 * _700) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_655 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _720 = ((_706 * _701) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_659 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _721 = ((_706 * _702) / cbModelParam._m0[34u].z) + ((((((_663 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _724 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_719, _720, _721), 0.0);
        vec4 _731 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_719, _720, _721), 0.0);
        vec4 _738 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_719, _720, _721), 0.0);
        vec4 _745 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_719, _720, _721), 0.0);
        float _758 = exp2((_724.w + (-0.5)) * 20.0) * 2.0;
        float _759 = _758 * (_724.x + (-0.5));
        float _760 = _758 * (_724.y + (-0.5));
        float _761 = _758 * (_724.z + (-0.5));
        float _768 = exp2((_731.w + (-0.5)) * 20.0) * 2.0;
        float _769 = _768 * (_731.x + (-0.5));
        float _770 = _768 * (_731.y + (-0.5));
        float _771 = _768 * (_731.z + (-0.5));
        float _778 = exp2((_738.w + (-0.5)) * 20.0) * 2.0;
        float _779 = _778 * (_738.x + (-0.5));
        float _780 = _778 * (_738.y + (-0.5));
        float _781 = _778 * (_738.z + (-0.5));
        float _788 = exp2((_745.w + (-0.5)) * 20.0) * 2.0;
        float _789 = _788 * (_745.x + (-0.5));
        float _790 = _788 * (_745.y + (-0.5));
        float _791 = _788 * (_745.z + (-0.5));
        float _792 = isnan(0.0) ? _789 : (isnan(_789) ? 0.0 : max(_789, 0.0));
        float _793 = isnan(0.0) ? _790 : (isnan(_790) ? 0.0 : max(_790, 0.0));
        float _794 = isnan(0.0) ? _791 : (isnan(_791) ? 0.0 : max(_791, 0.0));
        float _795 = _759 * 0.5;
        float _796 = _769 * 0.5;
        float _797 = _779 * 0.5;
        float _798 = dot(vec3(_795, _796, _797), vec3(_795, _796, _797));
        float _803 = (_798 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_798);
        float _812 = (dot(vec3(_345, _346, _347), vec3(_803 * _795, _803 * _796, _803 * _797)) + 1.0) * 0.5;
        float _3800 = isnan(0.0) ? _812 : (isnan(_812) ? 0.0 : max(_812, 0.0));
        float _822 = sqrt(((_796 * _796) + (_795 * _795)) + (_797 * _797)) / (_792 + 9.9999997473787516355514526367188e-06);
        float _3811 = isnan(0.0) ? _822 : (isnan(_822) ? 0.0 : max(_822, 0.0));
        float _823 = isnan(1.0) ? _3811 : (isnan(_3811) ? 1.0 : min(_3811, 1.0));
        float _824 = _823 * 2.0;
        float _828 = (1.0 - _823) / (_823 + 1.0);
        float _3822 = isnan(0.0) ? _828 : (isnan(_828) ? 0.0 : max(_828, 0.0));
        float _829 = isnan(1.0) ? _3822 : (isnan(_3822) ? 1.0 : min(_3822, 1.0));
        float _838 = ((((1.0 - _829) * (_824 + 2.0)) * exp2(log2(isnan(1.0) ? _3800 : (isnan(_3800) ? 1.0 : min(_3800, 1.0))) * (_824 + 1.0))) + _829) * _792;
        float _839 = _760 * 0.5;
        float _840 = _770 * 0.5;
        float _841 = _780 * 0.5;
        float _842 = dot(vec3(_839, _840, _841), vec3(_839, _840, _841));
        float _847 = (_842 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_842);
        float _855 = (dot(vec3(_345, _346, _347), vec3(_847 * _839, _847 * _840, _847 * _841)) + 1.0) * 0.5;
        float _3833 = isnan(0.0) ? _855 : (isnan(_855) ? 0.0 : max(_855, 0.0));
        float _864 = sqrt(((_840 * _840) + (_839 * _839)) + (_841 * _841)) / (_793 + 9.9999997473787516355514526367188e-06);
        float _3844 = isnan(0.0) ? _864 : (isnan(_864) ? 0.0 : max(_864, 0.0));
        float _865 = isnan(1.0) ? _3844 : (isnan(_3844) ? 1.0 : min(_3844, 1.0));
        float _866 = _865 * 2.0;
        float _870 = (1.0 - _865) / (_865 + 1.0);
        float _3855 = isnan(0.0) ? _870 : (isnan(_870) ? 0.0 : max(_870, 0.0));
        float _871 = isnan(1.0) ? _3855 : (isnan(_3855) ? 1.0 : min(_3855, 1.0));
        float _880 = ((((1.0 - _871) * (_866 + 2.0)) * exp2(log2(isnan(1.0) ? _3833 : (isnan(_3833) ? 1.0 : min(_3833, 1.0))) * (_866 + 1.0))) + _871) * _793;
        float _881 = _761 * 0.5;
        float _882 = _771 * 0.5;
        float _883 = _781 * 0.5;
        float _884 = dot(vec3(_881, _882, _883), vec3(_881, _882, _883));
        float _889 = (_884 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_884);
        float _897 = (dot(vec3(_345, _346, _347), vec3(_889 * _881, _889 * _882, _889 * _883)) + 1.0) * 0.5;
        float _3866 = isnan(0.0) ? _897 : (isnan(_897) ? 0.0 : max(_897, 0.0));
        float _906 = sqrt(((_882 * _882) + (_881 * _881)) + (_883 * _883)) / (_794 + 9.9999997473787516355514526367188e-06);
        float _3877 = isnan(0.0) ? _906 : (isnan(_906) ? 0.0 : max(_906, 0.0));
        float _907 = isnan(1.0) ? _3877 : (isnan(_3877) ? 1.0 : min(_3877, 1.0));
        float _908 = _907 * 2.0;
        float _912 = (1.0 - _907) / (_907 + 1.0);
        float _3888 = isnan(0.0) ? _912 : (isnan(_912) ? 0.0 : max(_912, 0.0));
        float _913 = isnan(1.0) ? _3888 : (isnan(_3888) ? 1.0 : min(_3888, 1.0));
        float _922 = ((((1.0 - _913) * (_908 + 2.0)) * exp2(log2(isnan(1.0) ? _3866 : (isnan(_3866) ? 1.0 : min(_3866, 1.0))) * (_908 + 1.0))) + _913) * _794;
        _930 = _761;
        _932 = _760;
        _933 = _759;
        _934 = _771;
        _935 = _770;
        _936 = _769;
        _937 = _781;
        _938 = _780;
        _939 = _779;
        _940 = _794;
        _941 = _793;
        _942 = _792;
        _943 = cbModelParam._m0[36u].z * (isnan(0.0) ? _838 : (isnan(_838) ? 0.0 : max(_838, 0.0)));
        _944 = cbModelParam._m0[36u].z * (isnan(0.0) ? _880 : (isnan(_880) ? 0.0 : max(_880, 0.0)));
        _945 = cbModelParam._m0[36u].z * (isnan(0.0) ? _922 : (isnan(_922) ? 0.0 : max(_922, 0.0)));
    }
    else
    {
        _930 = _931;
        _932 = _931;
        _933 = _931;
        _934 = _931;
        _935 = _931;
        _936 = _931;
        _937 = _931;
        _938 = _931;
        _939 = _931;
        _940 = _931;
        _941 = _931;
        _942 = _931;
        _943 = 0.0;
        _944 = 0.0;
        _945 = 0.0;
    }
    float _1243;
    float _1244;
    float _1245;
    float _1246;
    float _1247;
    float _1248;
    float _1249;
    float _1250;
    float _1251;
    float _1252;
    float _1253;
    float _1254;
    float _1255;
    float _1256;
    float _1257;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _974 = fma(_599, cbModelParam._m0[30u].z, fma(_595, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _591));
        float _978 = fma(_599, cbModelParam._m0[31u].z, fma(_595, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _591));
        float _982 = fma(_599, cbModelParam._m0[32u].z, fma(_595, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _591));
        float _1005 = _591 + _345;
        float _1006 = _595 + _346;
        float _1007 = _599 + _347;
        float _1017 = fma(_1007, cbModelParam._m0[30u].z, fma(_1006, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1005)) - _974;
        float _1018 = fma(_1007, cbModelParam._m0[31u].z, fma(_1006, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1005)) - _978;
        float _1019 = fma(_1007, cbModelParam._m0[32u].z, fma(_1006, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1005)) - _982;
        float _1023 = inversesqrt(dot(vec3(_1017, _1018, _1019), vec3(_1017, _1018, _1019)));
        float _1036 = ((_1023 * _1017) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_974 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1037 = ((_1023 * _1018) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_978 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1038 = ((_1023 * _1019) / cbModelParam._m0[35u].z) + ((((((_982 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1040 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1036, _1037, _1038), 0.0);
        vec4 _1047 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1036, _1037, _1038), 0.0);
        vec4 _1054 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1036, _1037, _1038), 0.0);
        vec4 _1061 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1036, _1037, _1038), 0.0);
        float _1073 = exp2((_1040.w + (-0.5)) * 20.0) * 2.0;
        float _1074 = _1073 * (_1040.x + (-0.5));
        float _1075 = _1073 * (_1040.y + (-0.5));
        float _1076 = _1073 * (_1040.z + (-0.5));
        float _1083 = exp2((_1047.w + (-0.5)) * 20.0) * 2.0;
        float _1084 = _1083 * (_1047.x + (-0.5));
        float _1085 = _1083 * (_1047.y + (-0.5));
        float _1086 = _1083 * (_1047.z + (-0.5));
        float _1093 = exp2((_1054.w + (-0.5)) * 20.0) * 2.0;
        float _1094 = _1093 * (_1054.x + (-0.5));
        float _1095 = _1093 * (_1054.y + (-0.5));
        float _1096 = _1093 * (_1054.z + (-0.5));
        float _1103 = exp2((_1061.w + (-0.5)) * 20.0) * 2.0;
        float _1104 = _1103 * (_1061.x + (-0.5));
        float _1105 = _1103 * (_1061.y + (-0.5));
        float _1106 = _1103 * (_1061.z + (-0.5));
        float _1107 = isnan(0.0) ? _1104 : (isnan(_1104) ? 0.0 : max(_1104, 0.0));
        float _1108 = isnan(0.0) ? _1105 : (isnan(_1105) ? 0.0 : max(_1105, 0.0));
        float _1109 = isnan(0.0) ? _1106 : (isnan(_1106) ? 0.0 : max(_1106, 0.0));
        float _1110 = _1074 * 0.5;
        float _1111 = _1084 * 0.5;
        float _1112 = _1094 * 0.5;
        float _1113 = dot(vec3(_1110, _1111, _1112), vec3(_1110, _1111, _1112));
        float _1118 = (_1113 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1113);
        float _1126 = (dot(vec3(_345, _346, _347), vec3(_1118 * _1110, _1118 * _1111, _1118 * _1112)) + 1.0) * 0.5;
        float _3929 = isnan(0.0) ? _1126 : (isnan(_1126) ? 0.0 : max(_1126, 0.0));
        float _1135 = sqrt(((_1111 * _1111) + (_1110 * _1110)) + (_1112 * _1112)) / (_1107 + 9.9999997473787516355514526367188e-06);
        float _3940 = isnan(0.0) ? _1135 : (isnan(_1135) ? 0.0 : max(_1135, 0.0));
        float _1136 = isnan(1.0) ? _3940 : (isnan(_3940) ? 1.0 : min(_3940, 1.0));
        float _1137 = _1136 * 2.0;
        float _1141 = (1.0 - _1136) / (_1136 + 1.0);
        float _3951 = isnan(0.0) ? _1141 : (isnan(_1141) ? 0.0 : max(_1141, 0.0));
        float _1142 = isnan(1.0) ? _3951 : (isnan(_3951) ? 1.0 : min(_3951, 1.0));
        float _1151 = ((((1.0 - _1142) * (_1137 + 2.0)) * exp2(log2(isnan(1.0) ? _3929 : (isnan(_3929) ? 1.0 : min(_3929, 1.0))) * (_1137 + 1.0))) + _1142) * _1107;
        float _1152 = _1075 * 0.5;
        float _1153 = _1085 * 0.5;
        float _1154 = _1095 * 0.5;
        float _1155 = dot(vec3(_1152, _1153, _1154), vec3(_1152, _1153, _1154));
        float _1160 = (_1155 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1155);
        float _1168 = (dot(vec3(_345, _346, _347), vec3(_1160 * _1152, _1160 * _1153, _1160 * _1154)) + 1.0) * 0.5;
        float _3962 = isnan(0.0) ? _1168 : (isnan(_1168) ? 0.0 : max(_1168, 0.0));
        float _1177 = sqrt(((_1153 * _1153) + (_1152 * _1152)) + (_1154 * _1154)) / (_1108 + 9.9999997473787516355514526367188e-06);
        float _3973 = isnan(0.0) ? _1177 : (isnan(_1177) ? 0.0 : max(_1177, 0.0));
        float _1178 = isnan(1.0) ? _3973 : (isnan(_3973) ? 1.0 : min(_3973, 1.0));
        float _1179 = _1178 * 2.0;
        float _1183 = (1.0 - _1178) / (_1178 + 1.0);
        float _3984 = isnan(0.0) ? _1183 : (isnan(_1183) ? 0.0 : max(_1183, 0.0));
        float _1184 = isnan(1.0) ? _3984 : (isnan(_3984) ? 1.0 : min(_3984, 1.0));
        float _1193 = ((((1.0 - _1184) * (_1179 + 2.0)) * exp2(log2(isnan(1.0) ? _3962 : (isnan(_3962) ? 1.0 : min(_3962, 1.0))) * (_1179 + 1.0))) + _1184) * _1108;
        float _1194 = _1076 * 0.5;
        float _1195 = _1086 * 0.5;
        float _1196 = _1096 * 0.5;
        float _1197 = dot(vec3(_1194, _1195, _1196), vec3(_1194, _1195, _1196));
        float _1202 = (_1197 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1197);
        float _1210 = (dot(vec3(_345, _346, _347), vec3(_1202 * _1194, _1202 * _1195, _1202 * _1196)) + 1.0) * 0.5;
        float _3995 = isnan(0.0) ? _1210 : (isnan(_1210) ? 0.0 : max(_1210, 0.0));
        float _1219 = sqrt(((_1195 * _1195) + (_1194 * _1194)) + (_1196 * _1196)) / (_1109 + 9.9999997473787516355514526367188e-06);
        float _4006 = isnan(0.0) ? _1219 : (isnan(_1219) ? 0.0 : max(_1219, 0.0));
        float _1220 = isnan(1.0) ? _4006 : (isnan(_4006) ? 1.0 : min(_4006, 1.0));
        float _1221 = _1220 * 2.0;
        float _1225 = (1.0 - _1220) / (_1220 + 1.0);
        float _4017 = isnan(0.0) ? _1225 : (isnan(_1225) ? 0.0 : max(_1225, 0.0));
        float _1226 = isnan(1.0) ? _4017 : (isnan(_4017) ? 1.0 : min(_4017, 1.0));
        float _1235 = ((((1.0 - _1226) * (_1221 + 2.0)) * exp2(log2(isnan(1.0) ? _3995 : (isnan(_3995) ? 1.0 : min(_3995, 1.0))) * (_1221 + 1.0))) + _1226) * _1109;
        _1243 = _1076;
        _1244 = _1075;
        _1245 = _1074;
        _1246 = _1086;
        _1247 = _1085;
        _1248 = _1084;
        _1249 = _1096;
        _1250 = _1095;
        _1251 = _1094;
        _1252 = _1109;
        _1253 = _1108;
        _1254 = _1107;
        _1255 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1151 : (isnan(_1151) ? 0.0 : max(_1151, 0.0)));
        _1256 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1193 : (isnan(_1193) ? 0.0 : max(_1193, 0.0)));
        _1257 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1235 : (isnan(_1235) ? 0.0 : max(_1235, 0.0)));
    }
    else
    {
        _1243 = _931;
        _1244 = _931;
        _1245 = _931;
        _1246 = _931;
        _1247 = _931;
        _1248 = _931;
        _1249 = _931;
        _1250 = _931;
        _1251 = _931;
        _1252 = _931;
        _1253 = _931;
        _1254 = _931;
        _1255 = 0.0;
        _1256 = 0.0;
        _1257 = 0.0;
    }
    float _1267 = (cbModelParam._m0[1u].x * (_1255 - _943)) + _943;
    float _1268 = (cbModelParam._m0[1u].x * (_1256 - _944)) + _944;
    float _1269 = (cbModelParam._m0[1u].x * (_1257 - _945)) + _945;
    float _1290 = fma(_1269, cbSceneParam._m0[89u].z, fma(_1268, cbSceneParam._m0[89u].y, _1267 * cbSceneParam._m0[89u].x));
    float _1293 = fma(_1269, cbSceneParam._m0[90u].z, fma(_1268, cbSceneParam._m0[90u].y, _1267 * cbSceneParam._m0[90u].x));
    float _1296 = fma(_1269, cbSceneParam._m0[91u].z, fma(_1268, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1267));
    float _1311 = _535 * 0.5;
    float _1312 = _536 * 0.5;
    float _1313 = _537 * 0.5;
    float _1314 = dot(vec4(_1311, _1312, _1313, 1.0), vec4(_1245, _1248, _1251, _1254));
    float _1317 = dot(vec4(_1311, _1312, _1313, 1.0), vec4(_1244, _1247, _1250, _1253));
    float _1320 = dot(vec4(_1311, _1312, _1313, 1.0), vec4(_1243, _1246, _1249, _1252));
    float _1354;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1327 = dot(vec4(_1311, _1312, _1313, 1.0), vec4(_930, _934, _937, _940));
        float _1331 = dot(vec4(_1311, _1312, _1313, 1.0), vec4(_932, _935, _938, _941));
        float _1335 = dot(vec4(_1311, _1312, _1313, 1.0), vec4(_933, _936, _939, _942));
        float _1342 = dot(vec4(cbModelParam._m0[39u]), vec4(_1311, _1312, _1313, 1.0));
        _1354 = dot(vec3(isnan(0.0) ? _1335 : (isnan(_1335) ? 0.0 : max(_1335, 0.0)), isnan(0.0) ? _1331 : (isnan(_1331) ? 0.0 : max(_1331, 0.0)), isnan(0.0) ? _1327 : (isnan(_1327) ? 0.0 : max(_1327, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1342) ? 0.0 : (isnan(0.0) ? _1342 : max(0.0, _1342))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1354 = 1.0;
    }
    float _1365;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1356 = dot(vec4(cbModelParam._m0[40u]), vec4(_1311, _1312, _1313, 1.0));
        _1365 = dot(vec3(isnan(0.0) ? _1314 : (isnan(_1314) ? 0.0 : max(_1314, 0.0)), isnan(0.0) ? _1317 : (isnan(_1317) ? 0.0 : max(_1317, 0.0)), isnan(0.0) ? _1320 : (isnan(_1320) ? 0.0 : max(_1320, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1356) ? 0.0 : (isnan(0.0) ? _1356 : max(0.0, _1356))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1365 = 1.0;
    }
    float _1369 = (_1365 * cbModelParam._m0[1u].x) + (_1354 * (1.0 - cbModelParam._m0[1u].x));
    float _1379 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _348);
    float _1380 = isnan(_1379) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1379 : min(cbModelParam._m0[25u].z, _1379));
    float _1462;
    float _1464;
    float _1466;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1429 = fma(_599, cbModelParam._m0[13u].z, fma(_595, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _591)) + cbModelParam._m0[13u].w;
        float _1433 = fma(_599, cbModelParam._m0[14u].z, fma(_595, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _591)) + cbModelParam._m0[14u].w;
        float _1437 = fma(_599, cbModelParam._m0[15u].z, fma(_595, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _591)) + cbModelParam._m0[15u].w;
        float _1440 = fma(_537, cbModelParam._m0[13u].z, fma(_536, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _535));
        float _1443 = fma(_537, cbModelParam._m0[14u].z, fma(_536, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _535));
        float _1446 = fma(_537, cbModelParam._m0[15u].z, fma(_536, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _535));
        float _1474;
        if (_1440 > 0.0)
        {
            _1474 = abs((1.0 - _1429) / _1440);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1440 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1429 + 1.0) / _1440);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1474 = frontier_phi_17_15_ladder;
        }
        float _1649;
        if (_1443 > 0.0)
        {
            _1649 = abs((1.0 - _1433) / _1443);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1443 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1433 + 1.0) / _1443);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1649 = frontier_phi_26_22_ladder;
        }
        float _1945;
        if (_1446 > 0.0)
        {
            _1945 = abs((1.0 - _1437) / _1446);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1446 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1437 + 1.0) / _1446);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _1945 = frontier_phi_38_33_ladder;
        }
        float _1947 = isnan(_1649) ? _1474 : (isnan(_1474) ? _1649 : min(_1474, _1649));
        float _1948 = isnan(_1945) ? _1947 : (isnan(_1947) ? _1945 : min(_1947, _1945));
        float _1952 = (_1948 * _1440) + _1429;
        float _1953 = (_1948 * _1443) + _1433;
        float _1954 = (_1948 * _1446) + _1437;
        float _1955 = _1948 * 9.9999997473787516355514526367188e-05;
        float _1957 = (-1.0) - _1955;
        float _1959 = _1955 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_1954 > _1959) || ((_1954 < _1957) || ((_1953 > _1959) || ((_1953 < _1957) || ((_1952 < _1957) || (_1952 > _1959))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2099 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1954, cbModelParam._m0[9u].z, fma(_1953, cbModelParam._m0[9u].y, _1952 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1954, cbModelParam._m0[10u].z, fma(_1953, cbModelParam._m0[10u].y, _1952 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1954, cbModelParam._m0[11u].z, fma(_1953, cbModelParam._m0[11u].y, _1952 * cbModelParam._m0[11u].x))), _1380);
            frontier_phi_16_38_ladder = _2099.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2099.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2099.x * cbModelParam._m0[1u].y;
        }
        _1462 = frontier_phi_16_38_ladder_2;
        _1464 = frontier_phi_16_38_ladder_1;
        _1466 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1450 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_535, _536, _537), _1380);
        _1462 = _1450.x * cbModelParam._m0[1u].y;
        _1464 = _1450.y * cbModelParam._m0[1u].y;
        _1466 = _1450.z * cbModelParam._m0[1u].y;
    }
    float _1470 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _348);
    float _1471 = isnan(_1470) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1470 : min(cbModelParam._m0[25u].w, _1470));
    float _1564;
    float _1566;
    float _1568;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1528 = fma(_599, cbModelParam._m0[21u].z, fma(_595, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _591)) + cbModelParam._m0[21u].w;
        float _1532 = fma(_599, cbModelParam._m0[22u].z, fma(_595, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _591)) + cbModelParam._m0[22u].w;
        float _1536 = fma(_599, cbModelParam._m0[23u].z, fma(_595, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _591)) + cbModelParam._m0[23u].w;
        float _1539 = fma(_537, cbModelParam._m0[21u].z, fma(_536, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _535));
        float _1542 = fma(_537, cbModelParam._m0[22u].z, fma(_536, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _535));
        float _1545 = fma(_537, cbModelParam._m0[23u].z, fma(_536, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _535));
        float _1654;
        if (_1539 > 0.0)
        {
            _1654 = abs((1.0 - _1528) / _1539);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1539 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1528 + 1.0) / _1539);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1654 = frontier_phi_28_24_ladder;
        }
        float _1972;
        if (_1542 > 0.0)
        {
            _1972 = abs((1.0 - _1532) / _1542);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1542 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1532 + 1.0) / _1542);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1972 = frontier_phi_40_35_ladder;
        }
        float _2310;
        if (_1545 > 0.0)
        {
            _2310 = abs((1.0 - _1536) / _1545);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1545 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1536 + 1.0) / _1545);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2310 = frontier_phi_50_47_ladder;
        }
        float _2312 = isnan(_1972) ? _1654 : (isnan(_1654) ? _1972 : min(_1654, _1972));
        float _2313 = isnan(_2310) ? _2312 : (isnan(_2312) ? _2310 : min(_2312, _2310));
        float _2317 = (_2313 * _1539) + _1528;
        float _2318 = (_2313 * _1542) + _1532;
        float _2319 = (_2313 * _1545) + _1536;
        float _2320 = _2313 * 9.9999997473787516355514526367188e-05;
        float _2321 = (-1.0) - _2320;
        float _2323 = _2320 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2319 > _2323) || ((_2319 < _2321) || ((_2318 > _2323) || ((_2318 < _2321) || ((_2317 < _2321) || (_2317 > _2323))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2441 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2319, cbModelParam._m0[17u].z, fma(_2318, cbModelParam._m0[17u].y, _2317 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2319, cbModelParam._m0[18u].z, fma(_2318, cbModelParam._m0[18u].y, _2317 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2319, cbModelParam._m0[19u].z, fma(_2318, cbModelParam._m0[19u].y, _2317 * cbModelParam._m0[19u].x))), _1471);
            frontier_phi_25_50_ladder = _2441.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2441.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2441.x * cbModelParam._m0[1u].z;
        }
        _1564 = frontier_phi_25_50_ladder_2;
        _1566 = frontier_phi_25_50_ladder_1;
        _1568 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1548 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_535, _536, _537), _1471);
        _1564 = _1548.x * cbModelParam._m0[1u].z;
        _1566 = _1548.y * cbModelParam._m0[1u].z;
        _1568 = _1548.z * cbModelParam._m0[1u].z;
    }
    float _1581 = (((_562 * _512) + _563) * _527) * ((cbModelParam._m0[1u].w * (_1564 - _1462)) + _1462);
    float _1583 = (((_562 * _514) + _563) * _527) * ((cbModelParam._m0[1u].w * (_1566 - _1464)) + _1464);
    float _1585 = (((_562 * _515) + _563) * _527) * ((cbModelParam._m0[1u].w * (_1568 - _1466)) + _1466);
    float _1588 = fma(_1585, cbSceneParam._m0[89u].z, fma(_1583, cbSceneParam._m0[89u].y, _1581 * cbSceneParam._m0[89u].x));
    float _1591 = fma(_1585, cbSceneParam._m0[90u].z, fma(_1583, cbSceneParam._m0[90u].y, _1581 * cbSceneParam._m0[90u].x));
    float _1594 = fma(_1585, cbSceneParam._m0[91u].z, fma(_1583, cbSceneParam._m0[91u].y, _1581 * cbSceneParam._m0[91u].x));
    float _1628 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1632 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1636 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1640 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1641 = _1628 / _1640;
    float _1642 = _1632 / _1640;
    float _1643 = _1636 / _1640;
    float _1790;
    float _1791;
    float _1792;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1670 = ((uint(_1643 > cbSceneParam._m0[59u].y) + uint(_1643 > cbSceneParam._m0[59u].x)) + uint(_1643 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1671 = _1670 + 43u;
        uint _1679 = _1670 + 44u;
        uint _1687 = _1670 + 45u;
        uint _1695 = _1670 + 46u;
        float _1706 = fma(_1640, cbSceneParam._m0[_1671].w, fma(_1636, cbSceneParam._m0[_1671].z, fma(_1632, cbSceneParam._m0[_1671].y, _1628 * cbSceneParam._m0[_1671].x)));
        float _1710 = fma(_1640, cbSceneParam._m0[_1679].w, fma(_1636, cbSceneParam._m0[_1679].z, fma(_1632, cbSceneParam._m0[_1679].y, _1628 * cbSceneParam._m0[_1679].x)));
        float _1718 = fma(_1640, cbSceneParam._m0[_1695].w, fma(_1636, cbSceneParam._m0[_1695].z, fma(_1632, cbSceneParam._m0[_1695].y, _1628 * cbSceneParam._m0[_1695].x)));
        float _1723 = cbSceneParam._m0[33u].z * _1718;
        float _1725 = cbSceneParam._m0[33u].w * _1718;
        float _1728 = fma(_1640, cbSceneParam._m0[_1687].w, fma(_1636, cbSceneParam._m0[_1687].z, fma(_1632, cbSceneParam._m0[_1687].y, _1628 * cbSceneParam._m0[_1687].x))) / _1718;
        float _1776 = (cbSceneParam._m0[33u].x - sqrt(((_1642 * _1642) + (_1641 * _1641)) + (_1643 * _1643))) * cbSceneParam._m0[33u].y;
        float _4143 = isnan(0.0) ? _1776 : (isnan(_1776) ? 0.0 : max(_1776, 0.0));
        float _1783 = (isnan(1.0) ? _4143 : (isnan(_4143) ? 1.0 : min(_4143, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1723 + _1706) / _1718, (_1725 + _1710) / _1718), _1728), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1725 + _1706) / _1718, (_1710 - _1723) / _1718), _1728), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1706 - _1723) / _1718, (_1710 - _1725) / _1718), _1728), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1706 - _1725) / _1718, (_1723 + _1710) / _1718), _1728), 0.0)).x), vec4(0.25)));
        _1790 = 1.0 - (_1783 * cbSceneParam._m0[34u].x);
        _1791 = 1.0 - (_1783 * cbSceneParam._m0[34u].y);
        _1792 = 1.0 - (_1783 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1790 = 1.0;
        _1791 = 1.0;
        _1792 = 1.0;
    }
    float _1856;
    float _1858;
    float _1860;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1844 = fma(_1640, cbSceneParam._m0[63u].w, fma(_1636, cbSceneParam._m0[63u].z, fma(_1632, cbSceneParam._m0[63u].y, _1628 * cbSceneParam._m0[63u].x)));
        float _1845 = fma(_1640, cbSceneParam._m0[60u].w, fma(_1636, cbSceneParam._m0[60u].z, fma(_1632, cbSceneParam._m0[60u].y, _1628 * cbSceneParam._m0[60u].x))) / _1844;
        float _1846 = fma(_1640, cbSceneParam._m0[61u].w, fma(_1636, cbSceneParam._m0[61u].z, fma(_1632, cbSceneParam._m0[61u].y, _1628 * cbSceneParam._m0[61u].x))) / _1844;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_1845 >= cbSceneParam._m0[64u].x) && (_1846 >= cbSceneParam._m0[64u].y)) && (_1845 <= cbSceneParam._m0[64u].z)) && (_1846 <= cbSceneParam._m0[64u].w))
        {
            float _1985 = fma(_1640, cbSceneParam._m0[62u].w, fma(_1636, cbSceneParam._m0[62u].z, fma(_1632, cbSceneParam._m0[62u].y, _1628 * cbSceneParam._m0[62u].x))) / _1844;
            float _1989 = isnan(cbSceneParam._m0[41u].w) ? _1985 : (isnan(_1985) ? cbSceneParam._m0[41u].w : max(_1985, cbSceneParam._m0[41u].w));
            float _2032 = (cbSceneParam._m0[33u].x - sqrt(((_1642 * _1642) + (_1641 * _1641)) + (_1643 * _1643))) * cbSceneParam._m0[33u].y;
            float _4159 = isnan(0.0) ? _2032 : (isnan(_2032) ? 0.0 : max(_2032, 0.0));
            float _2039 = (isnan(1.0) ? _4159 : (isnan(_4159) ? 1.0 : min(_4159, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1845, cbSceneParam._m0[33u].w + _1846), _1989), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1845, _1846 - cbSceneParam._m0[33u].z), _1989), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1845 - cbSceneParam._m0[33u].z, _1846 - cbSceneParam._m0[33u].w), _1989), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1845 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1846), _1989), 0.0)).x), vec4(0.25)));
            float _2043 = 1.0 - (_2039 * cbSceneParam._m0[34u].x);
            float _2044 = 1.0 - (_2039 * cbSceneParam._m0[34u].y);
            float _2045 = 1.0 - (_2039 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2045) ? _1792 : (isnan(_1792) ? _2045 : min(_1792, _2045));
            frontier_phi_37_36_ladder_1 = isnan(_2044) ? _1791 : (isnan(_1791) ? _2044 : min(_1791, _2044));
            frontier_phi_37_36_ladder_2 = isnan(_2043) ? _1790 : (isnan(_1790) ? _2043 : min(_1790, _2043));
        }
        else
        {
            frontier_phi_37_36_ladder = _1792;
            frontier_phi_37_36_ladder_1 = _1791;
            frontier_phi_37_36_ladder_2 = _1790;
        }
        _1856 = frontier_phi_37_36_ladder_2;
        _1858 = frontier_phi_37_36_ladder_1;
        _1860 = frontier_phi_37_36_ladder;
    }
    else
    {
        _1856 = _1790;
        _1858 = _1791;
        _1860 = _1792;
    }
    uvec4 _1865 = floatBitsToUint(cbInstanceData._m0[_487 + 5u]);
    uint _1867 = _1865.x * 14u;
    uint _1868 = _1867 + 13u;
    float _1875 = _527 + (-1.0);
    float _1880 = (cbLight._m0[_1868].x * _1875) + 1.0;
    float _1881 = (cbLight._m0[_1868].y * _1875) + 1.0;
    float _1882 = (cbLight._m0[_1868].z * _1875) + 1.0;
    float _1883 = (cbLight._m0[_1868].w * _1875) + 1.0;
    uint _1884 = _1867 + 5u;
    float _1890 = isnan(1.0) ? _1881 : (isnan(_1881) ? 1.0 : min(_1881, 1.0));
    uint _1894 = _1867 + 4u;
    float _1904 = isnan(1.0) ? _1880 : (isnan(_1880) ? 1.0 : min(_1880, 1.0));
    uint _1908 = _1867 | 1u;
    float _1919 = dot(vec3(cbLight._m0[_1867].xyz), vec3(_345, _346, _347));
    float _1922 = dot(vec3(cbLight._m0[_1908].xyz), vec3(_345, _346, _347));
    float _4195 = isnan(0.0) ? _1919 : (isnan(_1919) ? 0.0 : max(_1919, 0.0));
    float _4206 = isnan(0.0) ? _1922 : (isnan(_1922) ? 0.0 : max(_1922, 0.0));
    float _1927 = (isnan(1.0) ? _4195 : (isnan(_4195) ? 1.0 : min(_4195, 1.0))) * 0.3183098733425140380859375;
    float _1929 = (isnan(1.0) ? _4206 : (isnan(_4206) ? 1.0 : min(_4206, 1.0))) * 0.3183098733425140380859375;
    float _1936 = ((cbLight._m0[_1884].x * _1890) * _1929) + (((cbLight._m0[_1894].x * _1856) * _1904) * _1927);
    float _1937 = ((_1890 * cbLight._m0[_1884].y) * _1929) + (((cbLight._m0[_1894].y * _1858) * _1904) * _1927);
    float _1938 = ((_1890 * cbLight._m0[_1884].z) * _1929) + (((cbLight._m0[_1894].z * _1860) * _1904) * _1927);
    uvec4 _1942 = floatBitsToUint(cbLight._m0[_1867 + 12u]);
    bool _1944 = _1942.x == 0u;
    float _2046;
    float _2048;
    float _2050;
    if (_1944)
    {
        _2046 = _1936;
        _2048 = _1937;
        _2050 = _1938;
    }
    else
    {
        uint _2054 = _1867 + 6u;
        float _2070 = (dot(vec3(cbLight._m0[_1867 + 2u].xyz), vec3(_345, _346, _347)) * 0.5) + 0.5;
        float _2071 = _2070 * _2070;
        float _4217 = isnan(0.0) ? _2071 : (isnan(_2071) ? 0.0 : max(_2071, 0.0));
        float _2072 = isnan(1.0) ? _4217 : (isnan(_4217) ? 1.0 : min(_4217, 1.0));
        float _2073 = isnan(1.0) ? _1882 : (isnan(_1882) ? 1.0 : min(_1882, 1.0));
        _2046 = (((cbLight._m0[_2054].x * 0.3183098733425140380859375) * _2072) * _2073) + _1936;
        _2048 = (((cbLight._m0[_2054].y * 0.3183098733425140380859375) * _2072) * _2073) + _1937;
        _2050 = (((cbLight._m0[_2054].z * 0.3183098733425140380859375) * _2072) * _2073) + _1938;
    }
    bool _2053 = _1942.y == 0u;
    float _2108;
    float _2110;
    float _2112;
    if (_2053)
    {
        _2108 = _2046;
        _2110 = _2048;
        _2112 = _2050;
    }
    else
    {
        uint _2281 = _1867 + 7u;
        float _2297 = (dot(vec3(cbLight._m0[_1867 + 3u].xyz), vec3(_345, _346, _347)) * 0.5) + 0.5;
        float _2298 = _2297 * _2297;
        float _4233 = isnan(0.0) ? _2298 : (isnan(_2298) ? 0.0 : max(_2298, 0.0));
        float _2299 = isnan(1.0) ? _4233 : (isnan(_4233) ? 1.0 : min(_4233, 1.0));
        float _2300 = isnan(1.0) ? _1883 : (isnan(_1883) ? 1.0 : min(_1883, 1.0));
        _2108 = (((cbLight._m0[_2281].x * 0.3183098733425140380859375) * _2299) * _2300) + _2046;
        _2110 = (((cbLight._m0[_2281].y * 0.3183098733425140380859375) * _2299) * _2300) + _2048;
        _2112 = (((cbLight._m0[_2281].z * 0.3183098733425140380859375) * _2299) * _2300) + _2050;
    }
    uint _2115 = _1867 + 8u;
    float _2128 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1867].w)) * _348) * 0.949999988079071044921875);
    float _2129 = _2128 * _2128;
    float _2130 = cbLight._m0[_1867].x + _426;
    float _2131 = cbLight._m0[_1867].y + _427;
    float _2132 = cbLight._m0[_1867].z + _428;
    float _2136 = inversesqrt(dot(vec3(_2130, _2131, _2132), vec3(_2130, _2131, _2132)));
    float _2137 = _2136 * _2130;
    float _2138 = _2136 * _2131;
    float _2139 = _2136 * _2132;
    float _2140 = dot(vec3(_345, _346, _347), vec3(cbLight._m0[_1867].xyz));
    float _4249 = isnan(0.0) ? _2140 : (isnan(_2140) ? 0.0 : max(_2140, 0.0));
    float _2143 = isnan(1.0) ? _4249 : (isnan(_4249) ? 1.0 : min(_4249, 1.0));
    float _4260 = isnan(0.0) ? _528 : (isnan(_528) ? 0.0 : max(_528, 0.0));
    float _2144 = isnan(1.0) ? _4260 : (isnan(_4260) ? 1.0 : min(_4260, 1.0));
    float _2145 = dot(vec3(_345, _346, _347), vec3(_2137, _2138, _2139));
    float _4271 = isnan(0.0) ? _2145 : (isnan(_2145) ? 0.0 : max(_2145, 0.0));
    float _2148 = isnan(1.0) ? _4271 : (isnan(_4271) ? 1.0 : min(_4271, 1.0));
    float _2149 = dot(vec3(cbLight._m0[_1867].xyz), vec3(_2137, _2138, _2139));
    float _4282 = isnan(0.0) ? _2149 : (isnan(_2149) ? 0.0 : max(_2149, 0.0));
    float _2153 = _2129 * _2129;
    float _2157 = ((_2148 * _2148) * (_2153 + (-1.0))) + 1.0;
    float _2165 = exp2(log2(1.0 - (isnan(1.0) ? _4282 : (isnan(_4282) ? 1.0 : min(_4282, 1.0)))) * 5.0);
    float _2166 = 0.959999978542327880859375 - _509;
    float _2168 = 0.959999978542327880859375 - _510;
    float _2169 = 0.959999978542327880859375 - _511;
    float _2176 = 1.0 - _2129;
    float _2187 = (0.5 / (((_2144 * ((_2143 * _2176) + _2129)) + 9.9999999392252902907785028219223e-09) + (((_2144 * _2176) + _2129) * _2143))) * _2143;
    float _4293 = isnan(0.0) ? _2187 : (isnan(_2187) ? 0.0 : max(_2187, 0.0));
    float _2189 = (isnan(1.0) ? _4293 : (isnan(_4293) ? 1.0 : min(_4293, 1.0))) * (_2153 / ((_2157 * _2157) * 3.141590118408203125));
    uint _2203 = _1867 + 9u;
    float _2214 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1908].w)) * _348) * 0.949999988079071044921875);
    float _2215 = _2214 * _2214;
    float _2216 = cbLight._m0[_1908].x + _426;
    float _2217 = cbLight._m0[_1908].y + _427;
    float _2218 = cbLight._m0[_1908].z + _428;
    float _2222 = inversesqrt(dot(vec3(_2216, _2217, _2218), vec3(_2216, _2217, _2218)));
    float _2223 = _2222 * _2216;
    float _2224 = _2222 * _2217;
    float _2225 = _2222 * _2218;
    float _2226 = dot(vec3(_345, _346, _347), vec3(cbLight._m0[_1908].xyz));
    float _4304 = isnan(0.0) ? _2226 : (isnan(_2226) ? 0.0 : max(_2226, 0.0));
    float _2229 = isnan(1.0) ? _4304 : (isnan(_4304) ? 1.0 : min(_4304, 1.0));
    float _2230 = dot(vec3(_345, _346, _347), vec3(_2223, _2224, _2225));
    float _4315 = isnan(0.0) ? _2230 : (isnan(_2230) ? 0.0 : max(_2230, 0.0));
    float _2233 = isnan(1.0) ? _4315 : (isnan(_4315) ? 1.0 : min(_4315, 1.0));
    float _2234 = dot(vec3(cbLight._m0[_1908].xyz), vec3(_2223, _2224, _2225));
    float _4326 = isnan(0.0) ? _2234 : (isnan(_2234) ? 0.0 : max(_2234, 0.0));
    float _2238 = _2215 * _2215;
    float _2242 = ((_2233 * _2233) * (_2238 + (-1.0))) + 1.0;
    float _2249 = exp2(log2(1.0 - (isnan(1.0) ? _4326 : (isnan(_4326) ? 1.0 : min(_4326, 1.0)))) * 5.0);
    float _2256 = 1.0 - _2215;
    float _2266 = (0.5 / (((_2144 * ((_2229 * _2256) + _2215)) + 9.9999999392252902907785028219223e-09) + (((_2144 * _2256) + _2215) * _2229))) * _2229;
    float _4337 = isnan(0.0) ? _2266 : (isnan(_2266) ? 0.0 : max(_2266, 0.0));
    float _2268 = (isnan(1.0) ? _4337 : (isnan(_4337) ? 1.0 : min(_4337, 1.0))) * (_2238 / ((_2242 * _2242) * 3.141590118408203125));
    float _2278 = (((((_2249 * _2166) + _512) * cbLight._m0[_2203].x) * _2268) * _1890) + ((((cbLight._m0[_2115].x * _1856) * ((_2165 * _2166) + _512)) * _2189) * _1904);
    float _2279 = (((((_2249 * _2168) + _514) * cbLight._m0[_2203].y) * _2268) * _1890) + ((((cbLight._m0[_2115].y * _1858) * ((_2165 * _2168) + _514)) * _2189) * _1904);
    float _2280 = (((((_2249 * _2169) + _515) * cbLight._m0[_2203].z) * _2268) * _1890) + ((((cbLight._m0[_2115].z * _1860) * ((_2165 * _2169) + _515)) * _2189) * _1904);
    float _2336;
    float _2338;
    float _2340;
    if (_1944)
    {
        _2336 = _2278;
        _2338 = _2279;
        _2340 = _2280;
    }
    else
    {
        uint _2342 = _1867 + 2u;
        uint _2346 = _1867 + 10u;
        float _2360 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2342].w)) * _348) * 0.949999988079071044921875);
        float _2361 = _2360 * _2360;
        float _2362 = cbLight._m0[_2342].x + _426;
        float _2363 = cbLight._m0[_2342].y + _427;
        float _2364 = cbLight._m0[_2342].z + _428;
        float _2368 = inversesqrt(dot(vec3(_2362, _2363, _2364), vec3(_2362, _2363, _2364)));
        float _2369 = _2368 * _2362;
        float _2370 = _2368 * _2363;
        float _2371 = _2368 * _2364;
        float _2372 = dot(vec3(_345, _346, _347), vec3(cbLight._m0[_2342].xyz));
        float _4348 = isnan(0.0) ? _2372 : (isnan(_2372) ? 0.0 : max(_2372, 0.0));
        float _2375 = isnan(1.0) ? _4348 : (isnan(_4348) ? 1.0 : min(_4348, 1.0));
        float _2376 = dot(vec3(_345, _346, _347), vec3(_2369, _2370, _2371));
        float _4359 = isnan(0.0) ? _2376 : (isnan(_2376) ? 0.0 : max(_2376, 0.0));
        float _2379 = isnan(1.0) ? _4359 : (isnan(_4359) ? 1.0 : min(_4359, 1.0));
        float _2380 = dot(vec3(cbLight._m0[_2342].xyz), vec3(_2369, _2370, _2371));
        float _4370 = isnan(0.0) ? _2380 : (isnan(_2380) ? 0.0 : max(_2380, 0.0));
        float _2384 = _2361 * _2361;
        float _2388 = ((_2379 * _2379) * (_2384 + (-1.0))) + 1.0;
        float _2395 = exp2(log2(1.0 - (isnan(1.0) ? _4370 : (isnan(_4370) ? 1.0 : min(_4370, 1.0)))) * 5.0);
        float _2402 = 1.0 - _2361;
        float _2412 = (0.5 / (((_2144 * ((_2375 * _2402) + _2361)) + 9.9999999392252902907785028219223e-09) + (((_2144 * _2402) + _2361) * _2375))) * _2375;
        float _4381 = isnan(0.0) ? _2412 : (isnan(_2412) ? 0.0 : max(_2412, 0.0));
        float _2414 = (isnan(1.0) ? _4381 : (isnan(_4381) ? 1.0 : min(_4381, 1.0))) * (_2384 / ((_2388 * _2388) * 3.141590118408203125));
        float _2415 = isnan(1.0) ? _1882 : (isnan(_1882) ? 1.0 : min(_1882, 1.0));
        _2336 = (((((_2395 * _2166) + _512) * cbLight._m0[_2346].x) * _2414) * _2415) + _2278;
        _2338 = (((((_2395 * _2168) + _514) * cbLight._m0[_2346].y) * _2414) * _2415) + _2279;
        _2340 = (((((_2395 * _2169) + _515) * cbLight._m0[_2346].z) * _2414) * _2415) + _2280;
    }
    float _2446;
    float _2448;
    float _2450;
    if (_2053)
    {
        _2446 = _2336;
        _2448 = _2338;
        _2450 = _2340;
    }
    else
    {
        uint _2457 = _1867 + 3u;
        uint _2461 = _1867 + 11u;
        float _2475 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2457].w)) * _348) * 0.949999988079071044921875);
        float _2476 = _2475 * _2475;
        float _2477 = cbLight._m0[_2457].x + _426;
        float _2478 = cbLight._m0[_2457].y + _427;
        float _2479 = cbLight._m0[_2457].z + _428;
        float _2483 = inversesqrt(dot(vec3(_2477, _2478, _2479), vec3(_2477, _2478, _2479)));
        float _2484 = _2483 * _2477;
        float _2485 = _2483 * _2478;
        float _2486 = _2483 * _2479;
        float _2487 = dot(vec3(_345, _346, _347), vec3(cbLight._m0[_2457].xyz));
        float _4397 = isnan(0.0) ? _2487 : (isnan(_2487) ? 0.0 : max(_2487, 0.0));
        float _2490 = isnan(1.0) ? _4397 : (isnan(_4397) ? 1.0 : min(_4397, 1.0));
        float _2491 = dot(vec3(_345, _346, _347), vec3(_2484, _2485, _2486));
        float _4408 = isnan(0.0) ? _2491 : (isnan(_2491) ? 0.0 : max(_2491, 0.0));
        float _2494 = isnan(1.0) ? _4408 : (isnan(_4408) ? 1.0 : min(_4408, 1.0));
        float _2495 = dot(vec3(cbLight._m0[_2457].xyz), vec3(_2484, _2485, _2486));
        float _4419 = isnan(0.0) ? _2495 : (isnan(_2495) ? 0.0 : max(_2495, 0.0));
        float _2499 = _2476 * _2476;
        float _2503 = ((_2494 * _2494) * (_2499 + (-1.0))) + 1.0;
        float _2510 = exp2(log2(1.0 - (isnan(1.0) ? _4419 : (isnan(_4419) ? 1.0 : min(_4419, 1.0)))) * 5.0);
        float _2517 = 1.0 - _2476;
        float _2527 = (0.5 / (((_2144 * ((_2490 * _2517) + _2476)) + 9.9999999392252902907785028219223e-09) + (((_2144 * _2517) + _2476) * _2490))) * _2490;
        float _4430 = isnan(0.0) ? _2527 : (isnan(_2527) ? 0.0 : max(_2527, 0.0));
        float _2529 = (isnan(1.0) ? _4430 : (isnan(_4430) ? 1.0 : min(_4430, 1.0))) * (_2499 / ((_2503 * _2503) * 3.141590118408203125));
        float _2530 = isnan(1.0) ? _1883 : (isnan(_1883) ? 1.0 : min(_1883, 1.0));
        _2446 = (((((_2510 * _2166) + _512) * cbLight._m0[_2461].x) * _2529) * _2530) + _2336;
        _2448 = (((((_2510 * _2168) + _514) * cbLight._m0[_2461].y) * _2529) * _2530) + _2338;
        _2450 = (((((_2510 * _2169) + _515) * cbLight._m0[_2461].z) * _2529) * _2530) + _2340;
    }
    float _2596;
    float _2598;
    float _2600;
    float _2602;
    float _2604;
    float _2606;
    if (_1865.y == 0u)
    {
        uvec4 _2551 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2552 = _2551.x;
        uint _2563 = uint((float(_2551.y) * floor(float(uint(cbSceneParam._m0[85u].y * _448) / _2552))) + floor(float(uint(cbSceneParam._m0[85u].x * _447) / _2552)));
        float _2573 = (log2(_1643 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2574 = isnan(0.0) ? _2573 : (isnan(_2573) ? 0.0 : max(_2573, 0.0));
        uint _2577 = uint(isnan(14.0) ? _2574 : (isnan(_2574) ? 14.0 : min(_2574, 14.0)));
        uvec4 _2582 = texelFetch(g_lightClusterGridBuffer, int(((_2577 << 2u) + (_2563 << 6u)) >> 2u));
        uint _2583 = _2582.x;
        uint _2584 = _2551.z;
        float _2692;
        float _2694;
        float _2696;
        float _2698;
        float _2700;
        float _2702;
        if (((((1u << ((_2584 >> 4u) & 15u)) + 4294967295u) & _2583) == 0u) || ((_2584 & 240u) == 0u))
        {
            _2692 = 0.0;
            _2694 = 0.0;
            _2696 = 0.0;
            _2698 = 0.0;
            _2700 = 0.0;
            _2702 = 0.0;
        }
        else
        {
            float _2693;
            float _2695;
            float _2697;
            float _2699;
            float _2701;
            float _2703;
            float _2853 = 0.0;
            float _2854 = 0.0;
            float _2855 = 0.0;
            float _2856 = 0.0;
            float _2857 = 0.0;
            float _2858 = 0.0;
            uint _2859 = 0u;
            uint _2868;
            bool _2869;
            for (;;)
            {
                _2868 = texelFetch(g_lightClassification, int((((_2577 << 5u) + (_2563 << 9u)) + (_2859 << 2u)) >> 2u)).x;
                _2869 = _2868 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_2869)
                {
                    frontier_phi_71_pred = _2858;
                    frontier_phi_71_pred_1 = _2857;
                    frontier_phi_71_pred_2 = _2856;
                    frontier_phi_71_pred_3 = _2855;
                    frontier_phi_71_pred_4 = _2854;
                    frontier_phi_71_pred_5 = _2853;
                }
                else
                {
                    float _2998;
                    float _2999;
                    float _3000;
                    float _3001;
                    float _3002;
                    float _3003;
                    uint _3004;
                    _2998 = _2853;
                    _2999 = _2854;
                    _3000 = _2855;
                    _3001 = _2856;
                    _3002 = _2857;
                    _3003 = _2858;
                    _3004 = _2868;
                    float _2925;
                    float _2926;
                    float _2927;
                    float _2928;
                    float _2929;
                    float _2930;
                    for (;;)
                    {
                        uint _3008 = uint(findLSB(_3004)) + (_2859 << 5u);
                        uint _3005 = (_3004 + 4294967295u) & _3004;
                        uint _3010 = _3008 * 48u;
                        vec4 _3024 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3010)).x, texelFetch(g_PointLightRenderingBuffer, int(_3010 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3010 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3010 + 3u)).x));
                        uint _3030 = (_3008 * 48u) + 4u;
                        vec4 _3043 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3030)).x, texelFetch(g_PointLightRenderingBuffer, int(_3030 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3030 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3030 + 3u)).x));
                        uint _3049 = (_3008 * 48u) + 8u;
                        vec3 _3060 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3049)).x, texelFetch(g_PointLightRenderingBuffer, int(_3049 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3049 + 2u)).x));
                        float _3064 = _3024.x - _1641;
                        float _3065 = _3024.y - _1642;
                        float _3066 = _3024.z - _1643;
                        float _3067 = dot(vec3(_3064, _3065, _3066), vec3(_3064, _3065, _3066));
                        float _3070 = inversesqrt(_3067);
                        float _3071 = _3070 * _3064;
                        float _3072 = _3070 * _3065;
                        float _3073 = _3070 * _3066;
                        float _3074 = dot(vec3(_468, _471, _474), vec3(_3071, _3072, _3073));
                        float _3079 = 1.0 - (_3067 * _3024.w);
                        float _4456 = isnan(0.0) ? _3079 : (isnan(_3079) ? 0.0 : max(_3079, 0.0));
                        float _3080 = isnan(1.0) ? _4456 : (isnan(_4456) ? 1.0 : min(_4456, 1.0));
                        float _3081 = sqrt(_3067) * _3043.w;
                        float _3084 = 1.39999997615814208984375 / (_3081 + 1.39999997615814208984375);
                        float _3085 = _3084 * _3084;
                        float _3088 = ((1.0 - _3085) * _3074) + _3085;
                        float _3091 = _3081 * _3081;
                        float _3095 = ((isnan(0.0) ? _3088 : (isnan(_3088) ? 0.0 : max(_3088, 0.0))) * _3080) / ((_3091 * 0.699999988079071044921875) + 1.0);
                        float _3099 = (-0.0) - _1641;
                        float _3100 = (-0.0) - _1642;
                        float _3101 = (-0.0) - _1643;
                        float _3105 = inversesqrt(dot(vec3(_3099, _3100, _3101), vec3(_3099, _3100, _3101)));
                        float _3106 = _3105 * _3099;
                        float _3107 = _3105 * _3100;
                        float _3108 = _3105 * _3101;
                        float _3115 = exp2(log2(1.0 / ((_3091 * 3.5) + 5.0)) * 0.25);
                        float _3116 = 1.0 - _543;
                        float _3123 = sqrt(1.0 - ((1.0 - (_3116 * _3116)) * (1.0 - (_3115 * _3115))));
                        float _3124 = _3123 * _3123;
                        float _3125 = _3124 * _3124;
                        float _3126 = _3106 + _3071;
                        float _3127 = _3107 + _3072;
                        float _3128 = _3108 + _3073;
                        float _3132 = inversesqrt(dot(vec3(_3126, _3127, _3128), vec3(_3126, _3127, _3128)));
                        float _3136 = dot(vec3(_468, _471, _474), vec3(_3106, _3107, _3108));
                        float _4472 = isnan(0.0) ? _3136 : (isnan(_3136) ? 0.0 : max(_3136, 0.0));
                        float _3139 = isnan(1.0) ? _4472 : (isnan(_4472) ? 1.0 : min(_4472, 1.0));
                        float _3140 = dot(vec3(_468, _471, _474), vec3(_3132 * _3126, _3132 * _3127, _3132 * _3128));
                        float _4483 = isnan(0.0) ? _3140 : (isnan(_3140) ? 0.0 : max(_3140, 0.0));
                        float _3143 = isnan(1.0) ? _4483 : (isnan(_4483) ? 1.0 : min(_4483, 1.0));
                        float _3147 = ((_3143 * _3143) * (_3125 + (-1.0))) + 1.0;
                        float _3148 = _3084 * _3124;
                        float _3149 = _3148 * _3148;
                        float _3152 = ((1.0 - _3149) * _3074) + _3149;
                        float _4494 = isnan(0.0) ? _3152 : (isnan(_3152) ? 0.0 : max(_3152, 0.0));
                        float _3153 = isnan(1.0) ? _4494 : (isnan(_4494) ? 1.0 : min(_4494, 1.0));
                        float _3154 = 1.0 - _3124;
                        float _3164 = (0.5 / (((_3153 * ((_3139 * _3154) + _3124)) + 9.9999999392252902907785028219223e-09) + (((_3153 * _3154) + _3124) * _3139))) * _3153;
                        float _4505 = isnan(0.0) ? _3164 : (isnan(_3164) ? 0.0 : max(_3164, 0.0));
                        float _3175 = (((_3125 * 3.1415927410125732421875) * (isnan(1.0) ? _4505 : (isnan(_4505) ? 1.0 : min(_4505, 1.0)))) / ((_3147 * _3147) * ((_3091 * 2.1991131305694580078125) + 3.141590118408203125))) * _3080;
                        _2928 = (_3095 * _3043.x) + _3001;
                        _2929 = (_3095 * _3043.y) + _3002;
                        _2930 = (_3095 * _3043.z) + _3003;
                        _2925 = (_3175 * _3060.x) + _2998;
                        _2926 = (_3175 * _3060.y) + _2999;
                        _2927 = (_3175 * _3060.z) + _3000;
                        if (_3005 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2998 = _2925;
                            _2999 = _2926;
                            _3000 = _2927;
                            _3001 = _2928;
                            _3002 = _2929;
                            _3003 = _2930;
                            _3004 = _3005;
                        }
                    }
                    frontier_phi_71_pred = _2930;
                    frontier_phi_71_pred_1 = _2929;
                    frontier_phi_71_pred_2 = _2928;
                    frontier_phi_71_pred_3 = _2927;
                    frontier_phi_71_pred_4 = _2926;
                    frontier_phi_71_pred_5 = _2925;
                }
                _2703 = frontier_phi_71_pred;
                _2701 = frontier_phi_71_pred_1;
                _2699 = frontier_phi_71_pred_2;
                _2697 = frontier_phi_71_pred_3;
                _2695 = frontier_phi_71_pred_4;
                _2693 = frontier_phi_71_pred_5;
                uint _2860 = _2859 + 1u;
                if (_2860 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2853 = _2693;
                    _2854 = _2695;
                    _2855 = _2697;
                    _2856 = _2699;
                    _2857 = _2701;
                    _2858 = _2703;
                    _2859 = _2860;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2692 = _2693;
            _2694 = _2695;
            _2696 = _2697;
            _2698 = _2699;
            _2700 = _2701;
            _2702 = _2703;
        }
        uvec4 _2706 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2707 = _2706.z;
        uint _2709 = (_2707 >> 8u) & 15u;
        float _2821;
        float _2823;
        float _2825;
        float _2827;
        float _2829;
        float _2831;
        if (((4294967295u << _2709) & _2583) == 0u)
        {
            _2821 = _2692;
            _2823 = _2694;
            _2825 = _2696;
            _2827 = _2698;
            _2829 = _2700;
            _2831 = _2702;
        }
        else
        {
            float _2846 = inversesqrt(dot(vec3(_1641, _1642, _1643), vec3(_1641, _1642, _1643)));
            float _2847 = _2846 * _1641;
            float _2848 = _2846 * _1642;
            float _2849 = _2846 * _1643;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_2709 < ((_2707 >> 12u) & 15u))
            {
                float _2822;
                float _2824;
                float _2826;
                float _2828;
                float _2830;
                float _2832;
                float _2981 = _2692;
                float _2982 = _2694;
                float _2983 = _2696;
                float _2984 = _2698;
                float _2985 = _2700;
                float _2986 = _2702;
                uint _2987 = _2709;
                uint _2996;
                bool _2997;
                for (;;)
                {
                    _2996 = texelFetch(g_lightClassification, int((((_2577 << 5u) + (_2563 << 9u)) + (_2987 << 2u)) >> 2u)).x;
                    _2997 = _2996 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_2997)
                    {
                        frontier_phi_82_pred = _2986;
                        frontier_phi_82_pred_1 = _2985;
                        frontier_phi_82_pred_2 = _2984;
                        frontier_phi_82_pred_3 = _2983;
                        frontier_phi_82_pred_4 = _2982;
                        frontier_phi_82_pred_5 = _2981;
                    }
                    else
                    {
                        float _3189;
                        float _3190;
                        float _3191;
                        float _3192;
                        float _3193;
                        float _3194;
                        float _3485;
                        float _3486;
                        float _3487;
                        float _3488;
                        float _3489;
                        float _3490;
                        float _3202 = _2981;
                        float _3203 = _2982;
                        float _3204 = _2983;
                        float _3205 = _2984;
                        float _3206 = _2985;
                        float _3207 = _2986;
                        uint _3208 = _2996;
                        uint _3209;
                        vec4 _3234;
                        float _3235;
                        vec4 _3250;
                        vec3 _3262;
                        vec4 _3278;
                        vec4 _3294;
                        float _3341;
                        bool _3342;
                        for (;;)
                        {
                            uint _3219 = ((_2987 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3208));
                            _3209 = (_3208 + 4294967295u) & _3208;
                            uint _3221 = _3219 * 40u;
                            _3234 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3221)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3221 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3221 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3221 + 3u)).x));
                            _3235 = _3234.w;
                            uint _3237 = (_3219 * 40u) + 4u;
                            _3250 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3237)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3237 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3237 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3237 + 3u)).x));
                            uint _3252 = (_3219 * 40u) + 8u;
                            _3262 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3252)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3252 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3252 + 2u)).x));
                            uint _3265 = (_3219 * 40u) + 16u;
                            _3278 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3265)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3265 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3265 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3265 + 3u)).x));
                            uint _3281 = (_3219 * 40u) + 20u;
                            _3294 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3281)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3281 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3281 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3281 + 3u)).x));
                            uint _3297 = (_3219 * 40u) + 24u;
                            vec4 _3310 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3297)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3297 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3297 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3297 + 3u)).x));
                            uint _3316 = (_3219 * 40u) + 28u;
                            vec4 _3329 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3316)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3316 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3316 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3316 + 3u)).x));
                            _3341 = fma(_1643, _3329.z, fma(_1642, _3329.y, _3329.x * _1641)) + _3329.w;
                            _3342 = !((fma(_1643, _3310.z, fma(_1642, _3310.y, _3310.x * _1641)) + _3310.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3342)
                            {
                                float _3369 = _3234.x - _1641;
                                float _3370 = _3234.y - _1642;
                                float _3371 = _3234.z - _1643;
                                float _3372 = dot(vec3(_3369, _3370, _3371), vec3(_3369, _3370, _3371));
                                float _3375 = inversesqrt(_3372);
                                float _3376 = _3375 * _3369;
                                float _3377 = _3375 * _3370;
                                float _3378 = _3375 * _3371;
                                float _3382 = 1.0 - (_3372 / (_3235 * _3235));
                                float _4516 = isnan(0.0) ? _3382 : (isnan(_3382) ? 0.0 : max(_3382, 0.0));
                                float _3383 = isnan(1.0) ? _4516 : (isnan(_4516) ? 1.0 : min(_4516, 1.0));
                                float _3387 = sqrt(_3372) * _3250.w;
                                float _3389 = 1.39999997615814208984375 / (_3387 + 1.39999997615814208984375);
                                float _3390 = _3389 * _3389;
                                float _3393 = ((1.0 - _3390) * dot(vec3(_3376, _3377, _3378), vec3(_468, _471, _474))) + _3390;
                                float _3396 = _3387 * _3387;
                                float _3400 = (fma(_1643, _3278.z, fma(_1642, _3278.y, _3278.x * _1641)) + _3278.w) / _3341;
                                float _3401 = (fma(_1643, _3294.z, fma(_1642, _3294.y, _3294.x * _1641)) + _3294.w) / _3341;
                                float _3405 = 1.0 - dot(vec2(_3400, _3401), vec2(_3400, _3401));
                                float _4532 = isnan(0.0) ? _3405 : (isnan(_3405) ? 0.0 : max(_3405, 0.0));
                                float _3406 = isnan(1.0) ? _4532 : (isnan(_4532) ? 1.0 : min(_4532, 1.0));
                                float _3407 = _3406 * (((isnan(0.0) ? _3393 : (isnan(_3393) ? 0.0 : max(_3393, 0.0))) * _3383) / ((_3396 * 0.699999988079071044921875) + 1.0));
                                float _3419 = exp2(log2(1.0 / ((_3396 * 3.5) + 5.0)) * 0.25);
                                float _3420 = 1.0 - _543;
                                float _3427 = sqrt(1.0 - ((1.0 - (_3420 * _3420)) * (1.0 - (_3419 * _3419))));
                                float _3428 = _3427 * _3427;
                                float _3429 = _3428 * _3428;
                                float _3430 = _3376 - _2847;
                                float _3431 = _3377 - _2848;
                                float _3432 = _3378 - _2849;
                                float _3436 = inversesqrt(dot(vec3(_3430, _3431, _3432), vec3(_3430, _3431, _3432)));
                                float _3440 = dot(vec3(_468, _471, _474), vec3((-0.0) - _2847, (-0.0) - _2848, (-0.0) - _2849));
                                float _4543 = isnan(0.0) ? _3440 : (isnan(_3440) ? 0.0 : max(_3440, 0.0));
                                float _3443 = isnan(1.0) ? _4543 : (isnan(_4543) ? 1.0 : min(_4543, 1.0));
                                float _3444 = dot(vec3(_468, _471, _474), vec3(_3436 * _3430, _3436 * _3431, _3436 * _3432));
                                float _4554 = isnan(0.0) ? _3444 : (isnan(_3444) ? 0.0 : max(_3444, 0.0));
                                float _3447 = isnan(1.0) ? _4554 : (isnan(_4554) ? 1.0 : min(_4554, 1.0));
                                float _3451 = ((_3447 * _3447) * (_3429 + (-1.0))) + 1.0;
                                float _3452 = _3389 * _3428;
                                float _3453 = _3452 * _3452;
                                float _3459 = ((1.0 - _3453) * dot(vec3(_468, _471, _474), vec3(_3376, _3377, _3378))) + _3453;
                                float _4565 = isnan(0.0) ? _3459 : (isnan(_3459) ? 0.0 : max(_3459, 0.0));
                                float _3460 = isnan(1.0) ? _4565 : (isnan(_4565) ? 1.0 : min(_4565, 1.0));
                                float _3461 = 1.0 - _3428;
                                float _3471 = (0.5 / (((_3460 * ((_3443 * _3461) + _3428)) + 9.9999999392252902907785028219223e-09) + (((_3460 * _3461) + _3428) * _3443))) * _3460;
                                float _4576 = isnan(0.0) ? _3471 : (isnan(_3471) ? 0.0 : max(_3471, 0.0));
                                float _3481 = (_3406 * _3383) * (((_3429 * 3.1415927410125732421875) * (isnan(1.0) ? _4576 : (isnan(_4576) ? 1.0 : min(_4576, 1.0)))) / ((_3451 * _3451) * ((_3396 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3407 * _3250.z;
                                frontier_phi_88_pred_1 = _3407 * _3250.y;
                                frontier_phi_88_pred_2 = _3407 * _3250.x;
                                frontier_phi_88_pred_3 = _3481 * _3262.z;
                                frontier_phi_88_pred_4 = _3481 * _3262.y;
                                frontier_phi_88_pred_5 = _3481 * _3262.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3490 = frontier_phi_88_pred;
                            _3489 = frontier_phi_88_pred_1;
                            _3488 = frontier_phi_88_pred_2;
                            _3487 = frontier_phi_88_pred_3;
                            _3486 = frontier_phi_88_pred_4;
                            _3485 = frontier_phi_88_pred_5;
                            _3192 = _3488 + _3205;
                            _3193 = _3489 + _3206;
                            _3194 = _3490 + _3207;
                            _3189 = _3485 + _3202;
                            _3190 = _3486 + _3203;
                            _3191 = _3487 + _3204;
                            if (_3209 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3202 = _3189;
                                _3203 = _3190;
                                _3204 = _3191;
                                _3205 = _3192;
                                _3206 = _3193;
                                _3207 = _3194;
                                _3208 = _3209;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3194;
                        frontier_phi_82_pred_1 = _3193;
                        frontier_phi_82_pred_2 = _3192;
                        frontier_phi_82_pred_3 = _3191;
                        frontier_phi_82_pred_4 = _3190;
                        frontier_phi_82_pred_5 = _3189;
                    }
                    _2832 = frontier_phi_82_pred;
                    _2830 = frontier_phi_82_pred_1;
                    _2828 = frontier_phi_82_pred_2;
                    _2826 = frontier_phi_82_pred_3;
                    _2824 = frontier_phi_82_pred_4;
                    _2822 = frontier_phi_82_pred_5;
                    uint _2988 = _2987 + 1u;
                    if (_2988 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2981 = _2822;
                        _2982 = _2824;
                        _2983 = _2826;
                        _2984 = _2828;
                        _2985 = _2830;
                        _2986 = _2832;
                        _2987 = _2988;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _2828;
                frontier_phi_63_64_ladder_1 = _2832;
                frontier_phi_63_64_ladder_2 = _2830;
                frontier_phi_63_64_ladder_3 = _2826;
                frontier_phi_63_64_ladder_4 = _2824;
                frontier_phi_63_64_ladder_5 = _2822;
            }
            else
            {
                frontier_phi_63_64_ladder = _2698;
                frontier_phi_63_64_ladder_1 = _2702;
                frontier_phi_63_64_ladder_2 = _2700;
                frontier_phi_63_64_ladder_3 = _2696;
                frontier_phi_63_64_ladder_4 = _2694;
                frontier_phi_63_64_ladder_5 = _2692;
            }
            _2821 = frontier_phi_63_64_ladder_5;
            _2823 = frontier_phi_63_64_ladder_4;
            _2825 = frontier_phi_63_64_ladder_3;
            _2827 = frontier_phi_63_64_ladder;
            _2829 = frontier_phi_63_64_ladder_2;
            _2831 = frontier_phi_63_64_ladder_1;
        }
        float _2836 = isnan(1.0) ? _527 : (isnan(_527) ? 1.0 : min(_527, 1.0));
        _2596 = (_2836 * _2827) + _2108;
        _2598 = (_2836 * _2829) + _2110;
        _2600 = (_2836 * _2831) + _2112;
        _2602 = ((_2821 * _512) * _2836) + _2446;
        _2604 = ((_2823 * _514) * _2836) + _2448;
        _2606 = ((_2825 * _515) * _2836) + _2450;
    }
    else
    {
        _2596 = _2108;
        _2598 = _2110;
        _2600 = _2112;
        _2602 = _2446;
        _2604 = _2448;
        _2606 = _2450;
    }
    uint _2612 = _488 + uint(cbMatDynParam._m0[0u].w);
    float _2618 = ((((cbMtdParam._m0[10u].x * cbMtdParam._m0[12u].y) * _309.x) + cbMtdParam._m0[11u].x) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_2612].x;
    float _2619 = ((((cbMtdParam._m0[10u].y * cbMtdParam._m0[12u].y) * _309.y) + cbMtdParam._m0[11u].y) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_2612].y;
    float _2620 = ((cbMtdParam._m0[11u].z + ((cbMtdParam._m0[10u].z * cbMtdParam._m0[12u].y) * _309.z)) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_2612].z;
    float _4592 = isnan(0.0) ? _502 : (isnan(_502) ? 0.0 : max(_502, 0.0));
    float _4603 = isnan(0.0) ? _503 : (isnan(_503) ? 0.0 : max(_503, 0.0));
    float _4614 = isnan(0.0) ? _504 : (isnan(_504) ? 0.0 : max(_504, 0.0));
    float _2637 = (((isnan(1.0) ? _4592 : (isnan(_4592) ? 1.0 : min(_4592, 1.0))) * (_2596 + ((isnan(0.0) ? _1290 : (isnan(_1290) ? 0.0 : max(_1290, 0.0))) * _527))) + ((_2602 + ((isnan(0.0) ? _1588 : (isnan(_1588) ? 0.0 : max(_1588, 0.0))) * _1369)) * cbPerFrame._m0[3u].x)) + _2618;
    float _2639 = (_2619 + ((_2604 + ((isnan(0.0) ? _1591 : (isnan(_1591) ? 0.0 : max(_1591, 0.0))) * _1369)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4603 : (isnan(_4603) ? 1.0 : min(_4603, 1.0))) * (_2598 + ((isnan(0.0) ? _1293 : (isnan(_1293) ? 0.0 : max(_1293, 0.0))) * _527)));
    float _2641 = (_2620 + ((_2606 + ((isnan(0.0) ? _1594 : (isnan(_1594) ? 0.0 : max(_1594, 0.0))) * _1369)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4614 : (isnan(_4614) ? 1.0 : min(_4614, 1.0))) * (_2600 + ((isnan(0.0) ? _1296 : (isnan(_1296) ? 0.0 : max(_1296, 0.0))) * _527)));
    float _2642 = isnan(0.0) ? _2637 : (isnan(_2637) ? 0.0 : max(_2637, 0.0));
    float _2643 = isnan(0.0) ? _2639 : (isnan(_2639) ? 0.0 : max(_2639, 0.0));
    float _2644 = isnan(0.0) ? _2641 : (isnan(_2641) ? 0.0 : max(_2641, 0.0));
    float _2650 = cbMtdParam._m0[2u].x * _2618;
    float _2651 = cbMtdParam._m0[2u].y * _2619;
    float _2652 = cbMtdParam._m0[2u].z * _2620;
    float _4640 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2654 = isnan(1.0) ? _4640 : (isnan(_4640) ? 1.0 : min(_4640, 1.0));
    uint _2655 = _487 + 6u;
    float _2663 = _447 / cbSceneParam._m0[86u].x;
    float _2664 = _448 / cbSceneParam._m0[86u].y;
    vec4 _2678 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2663, _2664, (log2((isnan(cbSceneParam._m0[77u].w) ? _368 : (isnan(_368) ? cbSceneParam._m0[77u].w : min(_368, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2680 = _2678.x;
    float _2681 = _2678.y;
    float _2682 = _2678.z;
    float _2683 = _2678.w;
    float _2755;
    float _2757;
    float _2759;
    float _2761;
    if (_368 > cbSceneParam._m0[78u].w)
    {
        float _2717 = isnan(_368) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _368 : min(cbSceneParam._m0[80u].w, _368));
        float _2718 = _2717 / _368;
        float _2729 = _2718 * _419;
        float _2730 = _420 * _2718;
        float _2731 = (-0.0) - _2730;
        float _2733 = _2718 * _421;
        float _2735 = (cbSceneParam._m0[77u].w * _2731) / _2717;
        float _2736 = _2735 + cbSceneParam._m0[79u].w;
        float _2737 = cbSceneParam._m0[79u].w - _2730;
        float _2743 = sqrt(((_2729 * _2729) + (_2730 * _2730)) + (_2733 * _2733));
        float _2746 = (1.0 - (cbSceneParam._m0[77u].w / _2717)) * _2743;
        float _2751 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2753 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2938;
        if (abs((_2731 - _2735) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2938 = ((((_2736 > 0.0) ? exp2(_2751 * _2736) : (2.0 - exp2(_2753 * _2736))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2746;
        }
        else
        {
            float _2882 = 1.0 / cbSceneParam._m0[80u].x;
            float _2883 = isnan(_2737) ? _2736 : (isnan(_2736) ? _2737 : max(_2736, _2737));
            float _2884 = isnan(_2737) ? _2736 : (isnan(_2736) ? _2737 : min(_2736, _2737));
            float _2893 = isnan(0.0) ? _2883 : (isnan(_2883) ? 0.0 : min(_2883, 0.0));
            float _2894 = isnan(0.0) ? _2884 : (isnan(_2884) ? 0.0 : min(_2884, 0.0));
            _2938 = ((abs(_2743 / _2731) * cbSceneParam._m0[80u].y) * ((((_2893 - _2894) * 2.0) - ((exp2(_2751 * (isnan(0.0) ? _2883 : (isnan(_2883) ? 0.0 : max(_2883, 0.0)))) - exp2(_2751 * (isnan(0.0) ? _2884 : (isnan(_2884) ? 0.0 : max(_2884, 0.0))))) * _2882)) - ((exp2(_2753 * _2893) - exp2(_2753 * _2894)) * _2882))) + (_2746 * cbSceneParam._m0[80u].z);
        }
        vec4 _2940 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2663, _2664, 1.0), 0.0);
        float _2949 = exp2((_2938 * (-1.44269502162933349609375)) * (1.0 - _2940.w));
        float _2950 = log2(_2949);
        float _2966 = log2(_2683);
        _2755 = (exp2(_2966 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2950 * cbSceneParam._m0[78u].x)) * _2940.x) / cbSceneParam._m0[78u].x)) + _2680;
        _2757 = (exp2(_2966 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2950 * cbSceneParam._m0[78u].y)) * _2940.y) / cbSceneParam._m0[78u].y)) + _2681;
        _2759 = (exp2(_2966 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2950 * cbSceneParam._m0[78u].z)) * _2940.z) / cbSceneParam._m0[78u].z)) + _2682;
        _2761 = _2949 * _2683;
    }
    else
    {
        _2755 = _2680;
        _2757 = _2681;
        _2759 = _2682;
        _2761 = _2683;
    }
    bool _2976;
    vec4 _2770;
    vec4 _2792;
    float _2794;
    float _2798;
    float _2799;
    float _2800;
    float _2803;
    float _2806;
    float _2809;
    float _2810;
    bool _2820;
    for (;;)
    {
        _2770 = cbMatDynParam._m0[0u];
        float _2772 = roundEven(_2770.y);
        bool _2773 = _2772 == 3.0;
        float _2774 = log2(_2761);
        float _2778 = exp2(_2774 * cbSceneParam._m0[78u].x);
        float _2779 = exp2(_2774 * cbSceneParam._m0[78u].y);
        float _2780 = exp2(_2774 * cbSceneParam._m0[78u].z);
        float _2781 = _2778 * _2642;
        float _2782 = _2779 * _2643;
        float _2783 = _2780 * _2644;
        float _2790 = _435 + (-0.5);
        _2792 = cbMtdParam._m0[1u];
        _2794 = _2792.y * _2790;
        float _2797 = (_2772 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2798 = _2797 * (_2773 ? _2781 : (_2781 + (cbSceneParam._m0[72u].w * _2755)));
        _2799 = _2797 * (_2773 ? _2782 : (_2782 + (cbSceneParam._m0[72u].w * _2757)));
        _2800 = _2797 * (_2773 ? _2783 : (_2783 + (cbSceneParam._m0[72u].w * _2759)));
        _2803 = ((_2650 * _2654) * _2778) * _2797;
        _2806 = ((_2651 * _2654) * _2779) * _2797;
        _2809 = ((_2652 * _2654) * _2780) * _2797;
        _2810 = _2790 * 0.999000012874603271484375;
        _2820 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2820)
        {
            if ((cbInstanceData._m0[_487 + 7u].x + _2810) < 0.5)
            {
                _2976 = true;
                break;
            }
        }
        uint _2917 = _488 + uint(_2770.w);
        if ((cbInstanceData._m0[_2917].w < 1.0) && ((cbInstanceData._m0[_2917].w + _2810) < 0.5))
        {
            _2976 = true;
            break;
        }
        if ((_2794 + 1.0) < _2792.x)
        {
            _2976 = true;
            break;
        }
        _2976 = false;
        break;
    }
    float _3180;
    if (_2976)
    {
        discard_state = true;
        _3180 = 0.0;
    }
    else
    {
        _3180 = cbInstanceData._m0[_2655].w;
    }
    SV_Target.x = _2798;
    SV_Target.y = _2799;
    SV_Target.z = _2800;
    SV_Target.w = _3180;
    SV_Target_1.x = _2803;
    SV_Target_1.y = _2806;
    SV_Target_1.z = _2809;
    SV_Target_1.w = cbInstanceData._m0[_2655].w;
    discard_exit();
}


