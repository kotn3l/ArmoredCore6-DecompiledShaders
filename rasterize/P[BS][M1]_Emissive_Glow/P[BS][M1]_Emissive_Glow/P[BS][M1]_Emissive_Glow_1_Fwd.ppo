#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[13];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D P_BS_M1_Emissive_Glow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D P_BS_M1_Emissive_Glow_snp_0_Texture2D_1;
layout(set = 0, binding = 3) uniform texture2D P_BS_M1_Emissive_Glow_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _865;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _176 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _177 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _178 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _183 = inversesqrt(dot(vec3(_176, _177, _178), vec3(_176, _177, _178)));
    float _190 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _197 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _220 = texture(sampler2D(P_BS_M1_Emissive_Glow_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _226 = _220.x * cbMtdParam._m0[9u].x;
    float _227 = _220.y * cbMtdParam._m0[9u].y;
    float _228 = _220.z * cbMtdParam._m0[9u].z;
    vec4 _244 = texture(sampler2D(P_BS_M1_Emissive_Glow_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _248 = _244.z;
    float _252 = (_244.x * 2.0) + (-1.0);
    float _254 = (_244.y * 2.0) + (-1.0);
    float _255 = dot(vec2(_252, _254), vec2(_252, _254));
    float _3238 = isnan(0.0) ? _255 : (isnan(_255) ? 0.0 : max(_255, 0.0));
    float _261 = sqrt(1.0 - (isnan(1.0) ? _3238 : (isnan(_3238) ? 1.0 : min(_3238, 1.0))));
    vec4 _284 = texture(sampler2D(P_BS_M1_Emissive_Glow_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _309 = fma(_261, _190 * NORMAL.x, fma(_254, _197 * TANGENT.x, (_183 * _176) * _252));
    float _312 = fma(_261, _190 * NORMAL.y, fma(_254, _197 * TANGENT.y, (_183 * _177) * _252));
    float _315 = fma(_261, _190 * NORMAL.z, fma(_254, _197 * TANGENT.z, (_183 * _178) * _252));
    float _319 = inversesqrt(dot(vec3(_309, _312, _315), vec3(_309, _312, _315)));
    float _320 = _319 * _309;
    float _321 = _319 * _312;
    float _322 = _319 * _315;
    float _3249 = isnan(0.0) ? _248 : (isnan(_248) ? 0.0 : max(_248, 0.0));
    float _323 = isnan(1.0) ? _3249 : (isnan(_3249) ? 1.0 : min(_3249, 1.0));
    float _3260 = isnan(0.0) ? _226 : (isnan(_226) ? 0.0 : max(_226, 0.0));
    float _3271 = isnan(0.0) ? _227 : (isnan(_227) ? 0.0 : max(_227, 0.0));
    float _3282 = isnan(0.0) ? _228 : (isnan(_228) ? 0.0 : max(_228, 0.0));
    float _3293 = isnan(0.0) ? cbMtdParam._m0[12u].x : (isnan(cbMtdParam._m0[12u].x) ? 0.0 : max(cbMtdParam._m0[12u].x, 0.0));
    float _327 = isnan(1.0) ? _3293 : (isnan(_3293) ? 1.0 : min(_3293, 1.0));
    float _343 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _384 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _394 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _384);
    float _395 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _384);
    float _396 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _384);
    float _400 = inversesqrt(dot(vec3(_394, _395, _396), vec3(_394, _395, _396)));
    float _401 = _394 * _400;
    float _402 = _395 * _400;
    float _403 = _396 * _400;
    float _409 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _410 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _431 = fma(_322, cbSceneParam._m0[5u].z, fma(_321, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _320));
    float _434 = fma(_322, cbSceneParam._m0[6u].z, fma(_321, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _320));
    float _437 = fma(_322, cbSceneParam._m0[7u].z, fma(_321, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _320));
    uint _450 = uint(roundEven(NORMAL.w)) * 13u;
    uint _451 = _450 + 9u;
    uint _452 = _451 + uint(cbMatDynParam._m0[0u].w);
    float _458 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3260 : (isnan(_3260) ? 1.0 : min(_3260, 1.0)))) * cbInstanceData._m0[_452].x;
    float _459 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3271 : (isnan(_3271) ? 1.0 : min(_3271, 1.0)))) * cbInstanceData._m0[_452].y;
    float _460 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3282 : (isnan(_3282) ? 1.0 : min(_3282, 1.0)))) * cbInstanceData._m0[_452].z;
    float _3304 = isnan(0.0) ? _458 : (isnan(_458) ? 0.0 : max(_458, 0.0));
    float _461 = isnan(1.0) ? _3304 : (isnan(_3304) ? 1.0 : min(_3304, 1.0));
    float _3315 = isnan(0.0) ? _459 : (isnan(_459) ? 0.0 : max(_459, 0.0));
    float _462 = isnan(1.0) ? _3315 : (isnan(_3315) ? 1.0 : min(_3315, 1.0));
    float _3326 = isnan(0.0) ? _460 : (isnan(_460) ? 0.0 : max(_460, 0.0));
    float _463 = isnan(1.0) ? _3326 : (isnan(_3326) ? 1.0 : min(_3326, 1.0));
    float _464 = 1.0 - _327;
    float _465 = _461 * _464;
    float _466 = _462 * _464;
    float _467 = _463 * _464;
    float _472 = (_461 + (-0.039999999105930328369140625)) * _327;
    float _473 = (_462 + (-0.039999999105930328369140625)) * _327;
    float _474 = (_463 + (-0.039999999105930328369140625)) * _327;
    float _475 = _472 + 0.039999999105930328369140625;
    float _477 = _473 + 0.039999999105930328369140625;
    float _478 = _474 + 0.039999999105930328369140625;
    vec4 _487 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _409, cbSceneParam._m0[86u].y * _410));
    float _490 = _487.x * TEXCOORD.z;
    float _491 = dot(vec3(_320, _321, _322), vec3(_401, _402, _403));
    float _494 = _491 * 2.0;
    float _498 = (_494 * _320) - _401;
    float _499 = (_494 * _321) - _402;
    float _500 = (_494 * _322) - _403;
    float _504 = abs(dot(vec3(_401, _402, _403), vec3(_320, _321, _322)));
    float _3337 = isnan(0.0) ? _504 : (isnan(_504) ? 0.0 : max(_504, 0.0));
    float _506 = sqrt(_323);
    float _519 = exp2((_506 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3337 : (isnan(_3337) ? 1.0 : min(_3337, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_506 * 3.0));
    float _525 = (1.0 - _519) * ((_506 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _526 = _519 * _506;
    float _554 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _558 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _562 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _864;
    float _866;
    float _867;
    float _868;
    float _869;
    float _870;
    float _871;
    float _872;
    float _873;
    float _874;
    float _875;
    float _876;
    float _877;
    float _878;
    float _879;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _589 = fma(_562, cbModelParam._m0[26u].z, fma(_558, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _554));
        float _593 = fma(_562, cbModelParam._m0[27u].z, fma(_558, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _554));
        float _597 = fma(_562, cbModelParam._m0[28u].z, fma(_558, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _554));
        float _622 = _554 + _320;
        float _623 = _558 + _321;
        float _624 = _562 + _322;
        float _634 = fma(_624, cbModelParam._m0[26u].z, fma(_623, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _622)) - _589;
        float _635 = fma(_624, cbModelParam._m0[27u].z, fma(_623, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _622)) - _593;
        float _636 = fma(_624, cbModelParam._m0[28u].z, fma(_623, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _622)) - _597;
        float _640 = inversesqrt(dot(vec3(_634, _635, _636), vec3(_634, _635, _636)));
        float _653 = ((_640 * _634) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_589 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _654 = ((_640 * _635) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_593 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _655 = ((_640 * _636) / cbModelParam._m0[34u].z) + ((((((_597 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _658 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_653, _654, _655), 0.0);
        vec4 _665 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_653, _654, _655), 0.0);
        vec4 _672 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_653, _654, _655), 0.0);
        vec4 _679 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_653, _654, _655), 0.0);
        float _692 = exp2((_658.w + (-0.5)) * 20.0) * 2.0;
        float _693 = _692 * (_658.x + (-0.5));
        float _694 = _692 * (_658.y + (-0.5));
        float _695 = _692 * (_658.z + (-0.5));
        float _702 = exp2((_665.w + (-0.5)) * 20.0) * 2.0;
        float _703 = _702 * (_665.x + (-0.5));
        float _704 = _702 * (_665.y + (-0.5));
        float _705 = _702 * (_665.z + (-0.5));
        float _712 = exp2((_672.w + (-0.5)) * 20.0) * 2.0;
        float _713 = _712 * (_672.x + (-0.5));
        float _714 = _712 * (_672.y + (-0.5));
        float _715 = _712 * (_672.z + (-0.5));
        float _722 = exp2((_679.w + (-0.5)) * 20.0) * 2.0;
        float _723 = _722 * (_679.x + (-0.5));
        float _724 = _722 * (_679.y + (-0.5));
        float _725 = _722 * (_679.z + (-0.5));
        float _726 = isnan(0.0) ? _723 : (isnan(_723) ? 0.0 : max(_723, 0.0));
        float _727 = isnan(0.0) ? _724 : (isnan(_724) ? 0.0 : max(_724, 0.0));
        float _728 = isnan(0.0) ? _725 : (isnan(_725) ? 0.0 : max(_725, 0.0));
        float _729 = _693 * 0.5;
        float _730 = _703 * 0.5;
        float _731 = _713 * 0.5;
        float _732 = dot(vec3(_729, _730, _731), vec3(_729, _730, _731));
        float _737 = (_732 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_732);
        float _746 = (dot(vec3(_320, _321, _322), vec3(_737 * _729, _737 * _730, _737 * _731)) + 1.0) * 0.5;
        float _3363 = isnan(0.0) ? _746 : (isnan(_746) ? 0.0 : max(_746, 0.0));
        float _756 = sqrt(((_730 * _730) + (_729 * _729)) + (_731 * _731)) / (_726 + 9.9999997473787516355514526367188e-06);
        float _3374 = isnan(0.0) ? _756 : (isnan(_756) ? 0.0 : max(_756, 0.0));
        float _757 = isnan(1.0) ? _3374 : (isnan(_3374) ? 1.0 : min(_3374, 1.0));
        float _758 = _757 * 2.0;
        float _762 = (1.0 - _757) / (_757 + 1.0);
        float _3385 = isnan(0.0) ? _762 : (isnan(_762) ? 0.0 : max(_762, 0.0));
        float _763 = isnan(1.0) ? _3385 : (isnan(_3385) ? 1.0 : min(_3385, 1.0));
        float _772 = ((((1.0 - _763) * (_758 + 2.0)) * exp2(log2(isnan(1.0) ? _3363 : (isnan(_3363) ? 1.0 : min(_3363, 1.0))) * (_758 + 1.0))) + _763) * _726;
        float _773 = _694 * 0.5;
        float _774 = _704 * 0.5;
        float _775 = _714 * 0.5;
        float _776 = dot(vec3(_773, _774, _775), vec3(_773, _774, _775));
        float _781 = (_776 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_776);
        float _789 = (dot(vec3(_320, _321, _322), vec3(_781 * _773, _781 * _774, _781 * _775)) + 1.0) * 0.5;
        float _3396 = isnan(0.0) ? _789 : (isnan(_789) ? 0.0 : max(_789, 0.0));
        float _798 = sqrt(((_774 * _774) + (_773 * _773)) + (_775 * _775)) / (_727 + 9.9999997473787516355514526367188e-06);
        float _3407 = isnan(0.0) ? _798 : (isnan(_798) ? 0.0 : max(_798, 0.0));
        float _799 = isnan(1.0) ? _3407 : (isnan(_3407) ? 1.0 : min(_3407, 1.0));
        float _800 = _799 * 2.0;
        float _804 = (1.0 - _799) / (_799 + 1.0);
        float _3418 = isnan(0.0) ? _804 : (isnan(_804) ? 0.0 : max(_804, 0.0));
        float _805 = isnan(1.0) ? _3418 : (isnan(_3418) ? 1.0 : min(_3418, 1.0));
        float _814 = ((((1.0 - _805) * (_800 + 2.0)) * exp2(log2(isnan(1.0) ? _3396 : (isnan(_3396) ? 1.0 : min(_3396, 1.0))) * (_800 + 1.0))) + _805) * _727;
        float _815 = _695 * 0.5;
        float _816 = _705 * 0.5;
        float _817 = _715 * 0.5;
        float _818 = dot(vec3(_815, _816, _817), vec3(_815, _816, _817));
        float _823 = (_818 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_818);
        float _831 = (dot(vec3(_320, _321, _322), vec3(_823 * _815, _823 * _816, _823 * _817)) + 1.0) * 0.5;
        float _3429 = isnan(0.0) ? _831 : (isnan(_831) ? 0.0 : max(_831, 0.0));
        float _840 = sqrt(((_816 * _816) + (_815 * _815)) + (_817 * _817)) / (_728 + 9.9999997473787516355514526367188e-06);
        float _3440 = isnan(0.0) ? _840 : (isnan(_840) ? 0.0 : max(_840, 0.0));
        float _841 = isnan(1.0) ? _3440 : (isnan(_3440) ? 1.0 : min(_3440, 1.0));
        float _842 = _841 * 2.0;
        float _846 = (1.0 - _841) / (_841 + 1.0);
        float _3451 = isnan(0.0) ? _846 : (isnan(_846) ? 0.0 : max(_846, 0.0));
        float _847 = isnan(1.0) ? _3451 : (isnan(_3451) ? 1.0 : min(_3451, 1.0));
        float _856 = ((((1.0 - _847) * (_842 + 2.0)) * exp2(log2(isnan(1.0) ? _3429 : (isnan(_3429) ? 1.0 : min(_3429, 1.0))) * (_842 + 1.0))) + _847) * _728;
        _864 = _695;
        _866 = _694;
        _867 = _693;
        _868 = _705;
        _869 = _704;
        _870 = _703;
        _871 = _715;
        _872 = _714;
        _873 = _713;
        _874 = _728;
        _875 = _727;
        _876 = _726;
        _877 = cbModelParam._m0[36u].z * (isnan(0.0) ? _772 : (isnan(_772) ? 0.0 : max(_772, 0.0)));
        _878 = cbModelParam._m0[36u].z * (isnan(0.0) ? _814 : (isnan(_814) ? 0.0 : max(_814, 0.0)));
        _879 = cbModelParam._m0[36u].z * (isnan(0.0) ? _856 : (isnan(_856) ? 0.0 : max(_856, 0.0)));
    }
    else
    {
        _864 = _865;
        _866 = _865;
        _867 = _865;
        _868 = _865;
        _869 = _865;
        _870 = _865;
        _871 = _865;
        _872 = _865;
        _873 = _865;
        _874 = _865;
        _875 = _865;
        _876 = _865;
        _877 = 0.0;
        _878 = 0.0;
        _879 = 0.0;
    }
    float _1174;
    float _1175;
    float _1176;
    float _1177;
    float _1178;
    float _1179;
    float _1180;
    float _1181;
    float _1182;
    float _1183;
    float _1184;
    float _1185;
    float _1186;
    float _1187;
    float _1188;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _905 = fma(_562, cbModelParam._m0[30u].z, fma(_558, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _554));
        float _909 = fma(_562, cbModelParam._m0[31u].z, fma(_558, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _554));
        float _913 = fma(_562, cbModelParam._m0[32u].z, fma(_558, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _554));
        float _936 = _554 + _320;
        float _937 = _558 + _321;
        float _938 = _562 + _322;
        float _948 = fma(_938, cbModelParam._m0[30u].z, fma(_937, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _936)) - _905;
        float _949 = fma(_938, cbModelParam._m0[31u].z, fma(_937, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _936)) - _909;
        float _950 = fma(_938, cbModelParam._m0[32u].z, fma(_937, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _936)) - _913;
        float _954 = inversesqrt(dot(vec3(_948, _949, _950), vec3(_948, _949, _950)));
        float _967 = ((_954 * _948) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_905 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _968 = ((_954 * _949) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_909 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _969 = ((_954 * _950) / cbModelParam._m0[35u].z) + ((((((_913 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _971 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_967, _968, _969), 0.0);
        vec4 _978 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_967, _968, _969), 0.0);
        vec4 _985 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_967, _968, _969), 0.0);
        vec4 _992 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_967, _968, _969), 0.0);
        float _1004 = exp2((_971.w + (-0.5)) * 20.0) * 2.0;
        float _1005 = _1004 * (_971.x + (-0.5));
        float _1006 = _1004 * (_971.y + (-0.5));
        float _1007 = _1004 * (_971.z + (-0.5));
        float _1014 = exp2((_978.w + (-0.5)) * 20.0) * 2.0;
        float _1015 = _1014 * (_978.x + (-0.5));
        float _1016 = _1014 * (_978.y + (-0.5));
        float _1017 = _1014 * (_978.z + (-0.5));
        float _1024 = exp2((_985.w + (-0.5)) * 20.0) * 2.0;
        float _1025 = _1024 * (_985.x + (-0.5));
        float _1026 = _1024 * (_985.y + (-0.5));
        float _1027 = _1024 * (_985.z + (-0.5));
        float _1034 = exp2((_992.w + (-0.5)) * 20.0) * 2.0;
        float _1035 = _1034 * (_992.x + (-0.5));
        float _1036 = _1034 * (_992.y + (-0.5));
        float _1037 = _1034 * (_992.z + (-0.5));
        float _1038 = isnan(0.0) ? _1035 : (isnan(_1035) ? 0.0 : max(_1035, 0.0));
        float _1039 = isnan(0.0) ? _1036 : (isnan(_1036) ? 0.0 : max(_1036, 0.0));
        float _1040 = isnan(0.0) ? _1037 : (isnan(_1037) ? 0.0 : max(_1037, 0.0));
        float _1041 = _1005 * 0.5;
        float _1042 = _1015 * 0.5;
        float _1043 = _1025 * 0.5;
        float _1044 = dot(vec3(_1041, _1042, _1043), vec3(_1041, _1042, _1043));
        float _1049 = (_1044 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1044);
        float _1057 = (dot(vec3(_320, _321, _322), vec3(_1049 * _1041, _1049 * _1042, _1049 * _1043)) + 1.0) * 0.5;
        float _3492 = isnan(0.0) ? _1057 : (isnan(_1057) ? 0.0 : max(_1057, 0.0));
        float _1066 = sqrt(((_1042 * _1042) + (_1041 * _1041)) + (_1043 * _1043)) / (_1038 + 9.9999997473787516355514526367188e-06);
        float _3503 = isnan(0.0) ? _1066 : (isnan(_1066) ? 0.0 : max(_1066, 0.0));
        float _1067 = isnan(1.0) ? _3503 : (isnan(_3503) ? 1.0 : min(_3503, 1.0));
        float _1068 = _1067 * 2.0;
        float _1072 = (1.0 - _1067) / (_1067 + 1.0);
        float _3514 = isnan(0.0) ? _1072 : (isnan(_1072) ? 0.0 : max(_1072, 0.0));
        float _1073 = isnan(1.0) ? _3514 : (isnan(_3514) ? 1.0 : min(_3514, 1.0));
        float _1082 = ((((1.0 - _1073) * (_1068 + 2.0)) * exp2(log2(isnan(1.0) ? _3492 : (isnan(_3492) ? 1.0 : min(_3492, 1.0))) * (_1068 + 1.0))) + _1073) * _1038;
        float _1083 = _1006 * 0.5;
        float _1084 = _1016 * 0.5;
        float _1085 = _1026 * 0.5;
        float _1086 = dot(vec3(_1083, _1084, _1085), vec3(_1083, _1084, _1085));
        float _1091 = (_1086 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1086);
        float _1099 = (dot(vec3(_320, _321, _322), vec3(_1091 * _1083, _1091 * _1084, _1091 * _1085)) + 1.0) * 0.5;
        float _3525 = isnan(0.0) ? _1099 : (isnan(_1099) ? 0.0 : max(_1099, 0.0));
        float _1108 = sqrt(((_1084 * _1084) + (_1083 * _1083)) + (_1085 * _1085)) / (_1039 + 9.9999997473787516355514526367188e-06);
        float _3536 = isnan(0.0) ? _1108 : (isnan(_1108) ? 0.0 : max(_1108, 0.0));
        float _1109 = isnan(1.0) ? _3536 : (isnan(_3536) ? 1.0 : min(_3536, 1.0));
        float _1110 = _1109 * 2.0;
        float _1114 = (1.0 - _1109) / (_1109 + 1.0);
        float _3547 = isnan(0.0) ? _1114 : (isnan(_1114) ? 0.0 : max(_1114, 0.0));
        float _1115 = isnan(1.0) ? _3547 : (isnan(_3547) ? 1.0 : min(_3547, 1.0));
        float _1124 = ((((1.0 - _1115) * (_1110 + 2.0)) * exp2(log2(isnan(1.0) ? _3525 : (isnan(_3525) ? 1.0 : min(_3525, 1.0))) * (_1110 + 1.0))) + _1115) * _1039;
        float _1125 = _1007 * 0.5;
        float _1126 = _1017 * 0.5;
        float _1127 = _1027 * 0.5;
        float _1128 = dot(vec3(_1125, _1126, _1127), vec3(_1125, _1126, _1127));
        float _1133 = (_1128 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1128);
        float _1141 = (dot(vec3(_320, _321, _322), vec3(_1133 * _1125, _1133 * _1126, _1133 * _1127)) + 1.0) * 0.5;
        float _3558 = isnan(0.0) ? _1141 : (isnan(_1141) ? 0.0 : max(_1141, 0.0));
        float _1150 = sqrt(((_1126 * _1126) + (_1125 * _1125)) + (_1127 * _1127)) / (_1040 + 9.9999997473787516355514526367188e-06);
        float _3569 = isnan(0.0) ? _1150 : (isnan(_1150) ? 0.0 : max(_1150, 0.0));
        float _1151 = isnan(1.0) ? _3569 : (isnan(_3569) ? 1.0 : min(_3569, 1.0));
        float _1152 = _1151 * 2.0;
        float _1156 = (1.0 - _1151) / (_1151 + 1.0);
        float _3580 = isnan(0.0) ? _1156 : (isnan(_1156) ? 0.0 : max(_1156, 0.0));
        float _1157 = isnan(1.0) ? _3580 : (isnan(_3580) ? 1.0 : min(_3580, 1.0));
        float _1166 = ((((1.0 - _1157) * (_1152 + 2.0)) * exp2(log2(isnan(1.0) ? _3558 : (isnan(_3558) ? 1.0 : min(_3558, 1.0))) * (_1152 + 1.0))) + _1157) * _1040;
        _1174 = _1007;
        _1175 = _1006;
        _1176 = _1005;
        _1177 = _1017;
        _1178 = _1016;
        _1179 = _1015;
        _1180 = _1027;
        _1181 = _1026;
        _1182 = _1025;
        _1183 = _1040;
        _1184 = _1039;
        _1185 = _1038;
        _1186 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1082 : (isnan(_1082) ? 0.0 : max(_1082, 0.0)));
        _1187 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1124 : (isnan(_1124) ? 0.0 : max(_1124, 0.0)));
        _1188 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1166 : (isnan(_1166) ? 0.0 : max(_1166, 0.0)));
    }
    else
    {
        _1174 = _865;
        _1175 = _865;
        _1176 = _865;
        _1177 = _865;
        _1178 = _865;
        _1179 = _865;
        _1180 = _865;
        _1181 = _865;
        _1182 = _865;
        _1183 = _865;
        _1184 = _865;
        _1185 = _865;
        _1186 = 0.0;
        _1187 = 0.0;
        _1188 = 0.0;
    }
    float _1198 = (cbModelParam._m0[1u].x * (_1186 - _877)) + _877;
    float _1199 = (cbModelParam._m0[1u].x * (_1187 - _878)) + _878;
    float _1200 = (cbModelParam._m0[1u].x * (_1188 - _879)) + _879;
    float _1221 = fma(_1200, cbSceneParam._m0[89u].z, fma(_1199, cbSceneParam._m0[89u].y, _1198 * cbSceneParam._m0[89u].x));
    float _1224 = fma(_1200, cbSceneParam._m0[90u].z, fma(_1199, cbSceneParam._m0[90u].y, _1198 * cbSceneParam._m0[90u].x));
    float _1227 = fma(_1200, cbSceneParam._m0[91u].z, fma(_1199, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1198));
    float _1242 = _498 * 0.5;
    float _1243 = _499 * 0.5;
    float _1244 = _500 * 0.5;
    float _1245 = dot(vec4(_1242, _1243, _1244, 1.0), vec4(_1176, _1179, _1182, _1185));
    float _1248 = dot(vec4(_1242, _1243, _1244, 1.0), vec4(_1175, _1178, _1181, _1184));
    float _1251 = dot(vec4(_1242, _1243, _1244, 1.0), vec4(_1174, _1177, _1180, _1183));
    float _1285;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1258 = dot(vec4(_1242, _1243, _1244, 1.0), vec4(_864, _868, _871, _874));
        float _1262 = dot(vec4(_1242, _1243, _1244, 1.0), vec4(_866, _869, _872, _875));
        float _1266 = dot(vec4(_1242, _1243, _1244, 1.0), vec4(_867, _870, _873, _876));
        float _1273 = dot(vec4(cbModelParam._m0[39u]), vec4(_1242, _1243, _1244, 1.0));
        _1285 = dot(vec3(isnan(0.0) ? _1266 : (isnan(_1266) ? 0.0 : max(_1266, 0.0)), isnan(0.0) ? _1262 : (isnan(_1262) ? 0.0 : max(_1262, 0.0)), isnan(0.0) ? _1258 : (isnan(_1258) ? 0.0 : max(_1258, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1273) ? 0.0 : (isnan(0.0) ? _1273 : max(0.0, _1273))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1285 = 1.0;
    }
    float _1296;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1287 = dot(vec4(cbModelParam._m0[40u]), vec4(_1242, _1243, _1244, 1.0));
        _1296 = dot(vec3(isnan(0.0) ? _1245 : (isnan(_1245) ? 0.0 : max(_1245, 0.0)), isnan(0.0) ? _1248 : (isnan(_1248) ? 0.0 : max(_1248, 0.0)), isnan(0.0) ? _1251 : (isnan(_1251) ? 0.0 : max(_1251, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1287) ? 0.0 : (isnan(0.0) ? _1287 : max(0.0, _1287))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1296 = 1.0;
    }
    float _1300 = (_1296 * cbModelParam._m0[1u].x) + (_1285 * (1.0 - cbModelParam._m0[1u].x));
    float _1310 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _323);
    float _1311 = isnan(_1310) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1310 : min(cbModelParam._m0[25u].z, _1310));
    float _1393;
    float _1395;
    float _1397;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1360 = fma(_562, cbModelParam._m0[13u].z, fma(_558, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _554)) + cbModelParam._m0[13u].w;
        float _1364 = fma(_562, cbModelParam._m0[14u].z, fma(_558, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _554)) + cbModelParam._m0[14u].w;
        float _1368 = fma(_562, cbModelParam._m0[15u].z, fma(_558, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _554)) + cbModelParam._m0[15u].w;
        float _1371 = fma(_500, cbModelParam._m0[13u].z, fma(_499, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _498));
        float _1374 = fma(_500, cbModelParam._m0[14u].z, fma(_499, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _498));
        float _1377 = fma(_500, cbModelParam._m0[15u].z, fma(_499, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _498));
        float _1405;
        if (_1371 > 0.0)
        {
            _1405 = abs((1.0 - _1360) / _1371);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1371 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1360 + 1.0) / _1371);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1405 = frontier_phi_14_12_ladder;
        }
        float _1612;
        if (_1374 > 0.0)
        {
            _1612 = abs((1.0 - _1364) / _1374);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1374 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1364 + 1.0) / _1374);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1612 = frontier_phi_23_19_ladder;
        }
        float _1866;
        if (_1377 > 0.0)
        {
            _1866 = abs((1.0 - _1368) / _1377);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1377 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1368 + 1.0) / _1377);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _1866 = frontier_phi_35_30_ladder;
        }
        float _1868 = isnan(_1612) ? _1405 : (isnan(_1405) ? _1612 : min(_1405, _1612));
        float _1869 = isnan(_1866) ? _1868 : (isnan(_1868) ? _1866 : min(_1868, _1866));
        float _1873 = (_1869 * _1371) + _1360;
        float _1874 = (_1869 * _1374) + _1364;
        float _1875 = (_1869 * _1377) + _1368;
        float _1876 = _1869 * 9.9999997473787516355514526367188e-05;
        float _1878 = (-1.0) - _1876;
        float _1880 = _1876 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_1875 > _1880) || ((_1875 < _1878) || ((_1874 > _1880) || ((_1874 < _1878) || ((_1873 < _1878) || (_1873 > _1880))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2003 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1875, cbModelParam._m0[9u].z, fma(_1874, cbModelParam._m0[9u].y, _1873 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1875, cbModelParam._m0[10u].z, fma(_1874, cbModelParam._m0[10u].y, _1873 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1875, cbModelParam._m0[11u].z, fma(_1874, cbModelParam._m0[11u].y, _1873 * cbModelParam._m0[11u].x))), _1311);
            frontier_phi_13_35_ladder = _2003.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2003.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2003.x * cbModelParam._m0[1u].y;
        }
        _1393 = frontier_phi_13_35_ladder_2;
        _1395 = frontier_phi_13_35_ladder_1;
        _1397 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1381 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_498, _499, _500), _1311);
        _1393 = _1381.x * cbModelParam._m0[1u].y;
        _1395 = _1381.y * cbModelParam._m0[1u].y;
        _1397 = _1381.z * cbModelParam._m0[1u].y;
    }
    float _1401 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _323);
    float _1402 = isnan(_1401) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1401 : min(cbModelParam._m0[25u].w, _1401));
    float _1495;
    float _1497;
    float _1499;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1459 = fma(_562, cbModelParam._m0[21u].z, fma(_558, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _554)) + cbModelParam._m0[21u].w;
        float _1463 = fma(_562, cbModelParam._m0[22u].z, fma(_558, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _554)) + cbModelParam._m0[22u].w;
        float _1467 = fma(_562, cbModelParam._m0[23u].z, fma(_558, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _554)) + cbModelParam._m0[23u].w;
        float _1470 = fma(_500, cbModelParam._m0[21u].z, fma(_499, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _498));
        float _1473 = fma(_500, cbModelParam._m0[22u].z, fma(_499, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _498));
        float _1476 = fma(_500, cbModelParam._m0[23u].z, fma(_499, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _498));
        float _1617;
        if (_1470 > 0.0)
        {
            _1617 = abs((1.0 - _1459) / _1470);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1470 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1459 + 1.0) / _1470);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1617 = frontier_phi_25_21_ladder;
        }
        float _1893;
        if (_1473 > 0.0)
        {
            _1893 = abs((1.0 - _1463) / _1473);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1473 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1463 + 1.0) / _1473);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1893 = frontier_phi_37_32_ladder;
        }
        float _2106;
        if (_1476 > 0.0)
        {
            _2106 = abs((1.0 - _1467) / _1476);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1476 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1467 + 1.0) / _1476);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2106 = frontier_phi_46_43_ladder;
        }
        float _2108 = isnan(_1893) ? _1617 : (isnan(_1617) ? _1893 : min(_1617, _1893));
        float _2109 = isnan(_2106) ? _2108 : (isnan(_2108) ? _2106 : min(_2108, _2106));
        float _2113 = (_2109 * _1470) + _1459;
        float _2114 = (_2109 * _1473) + _1463;
        float _2115 = (_2109 * _1476) + _1467;
        float _2116 = _2109 * 9.9999997473787516355514526367188e-05;
        float _2117 = (-1.0) - _2116;
        float _2119 = _2116 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2115 > _2119) || ((_2115 < _2117) || ((_2114 > _2119) || ((_2114 < _2117) || ((_2113 < _2117) || (_2113 > _2119))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2343 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2115, cbModelParam._m0[17u].z, fma(_2114, cbModelParam._m0[17u].y, _2113 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2115, cbModelParam._m0[18u].z, fma(_2114, cbModelParam._m0[18u].y, _2113 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2115, cbModelParam._m0[19u].z, fma(_2114, cbModelParam._m0[19u].y, _2113 * cbModelParam._m0[19u].x))), _1402);
            frontier_phi_22_46_ladder = _2343.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2343.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2343.x * cbModelParam._m0[1u].z;
        }
        _1495 = frontier_phi_22_46_ladder_2;
        _1497 = frontier_phi_22_46_ladder_1;
        _1499 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1479 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_498, _499, _500), _1402);
        _1495 = _1479.x * cbModelParam._m0[1u].z;
        _1497 = _1479.y * cbModelParam._m0[1u].z;
        _1499 = _1479.z * cbModelParam._m0[1u].z;
    }
    float _1512 = (((_525 * _475) + _526) * _490) * ((cbModelParam._m0[1u].w * (_1495 - _1393)) + _1393);
    float _1514 = (((_525 * _477) + _526) * _490) * ((cbModelParam._m0[1u].w * (_1497 - _1395)) + _1395);
    float _1516 = (((_525 * _478) + _526) * _490) * ((cbModelParam._m0[1u].w * (_1499 - _1397)) + _1397);
    float _1519 = fma(_1516, cbSceneParam._m0[89u].z, fma(_1514, cbSceneParam._m0[89u].y, _1512 * cbSceneParam._m0[89u].x));
    float _1522 = fma(_1516, cbSceneParam._m0[90u].z, fma(_1514, cbSceneParam._m0[90u].y, _1512 * cbSceneParam._m0[90u].x));
    float _1525 = fma(_1516, cbSceneParam._m0[91u].z, fma(_1514, cbSceneParam._m0[91u].y, _1512 * cbSceneParam._m0[91u].x));
    uvec4 _1535 = floatBitsToUint(cbInstanceData._m0[_450 + 5u]);
    uint _1537 = _1535.x * 14u;
    uint _1538 = _1537 + 13u;
    float _1545 = _490 + (-1.0);
    float _1550 = (cbLight._m0[_1538].x * _1545) + 1.0;
    float _1551 = (cbLight._m0[_1538].y * _1545) + 1.0;
    float _1552 = (cbLight._m0[_1538].z * _1545) + 1.0;
    float _1553 = (cbLight._m0[_1538].w * _1545) + 1.0;
    uint _1554 = _1537 + 5u;
    float _1560 = isnan(1.0) ? _1551 : (isnan(_1551) ? 1.0 : min(_1551, 1.0));
    uint _1564 = _1537 + 4u;
    float _1571 = isnan(1.0) ? _1550 : (isnan(_1550) ? 1.0 : min(_1550, 1.0));
    uint _1575 = _1537 | 1u;
    float _1586 = dot(vec3(cbLight._m0[_1537].xyz), vec3(_320, _321, _322));
    float _1589 = dot(vec3(cbLight._m0[_1575].xyz), vec3(_320, _321, _322));
    float _3716 = isnan(0.0) ? _1586 : (isnan(_1586) ? 0.0 : max(_1586, 0.0));
    float _3727 = isnan(0.0) ? _1589 : (isnan(_1589) ? 0.0 : max(_1589, 0.0));
    float _1594 = (isnan(1.0) ? _3716 : (isnan(_3716) ? 1.0 : min(_3716, 1.0))) * 0.3183098733425140380859375;
    float _1596 = (isnan(1.0) ? _3727 : (isnan(_3727) ? 1.0 : min(_3727, 1.0))) * 0.3183098733425140380859375;
    float _1603 = ((cbLight._m0[_1554].x * _1560) * _1596) + ((cbLight._m0[_1564].x * _1571) * _1594);
    float _1604 = ((_1560 * cbLight._m0[_1554].y) * _1596) + ((_1571 * cbLight._m0[_1564].y) * _1594);
    float _1605 = ((_1560 * cbLight._m0[_1554].z) * _1596) + ((_1571 * cbLight._m0[_1564].z) * _1594);
    uvec4 _1609 = floatBitsToUint(cbLight._m0[_1537 + 12u]);
    bool _1611 = _1609.x == 0u;
    float _1622;
    float _1624;
    float _1626;
    if (_1611)
    {
        _1622 = _1603;
        _1624 = _1604;
        _1626 = _1605;
    }
    else
    {
        uint _1630 = _1537 + 6u;
        float _1646 = (dot(vec3(cbLight._m0[_1537 + 2u].xyz), vec3(_320, _321, _322)) * 0.5) + 0.5;
        float _1647 = _1646 * _1646;
        float _3738 = isnan(0.0) ? _1647 : (isnan(_1647) ? 0.0 : max(_1647, 0.0));
        float _1648 = isnan(1.0) ? _3738 : (isnan(_3738) ? 1.0 : min(_3738, 1.0));
        float _1649 = isnan(1.0) ? _1552 : (isnan(_1552) ? 1.0 : min(_1552, 1.0));
        _1622 = (((cbLight._m0[_1630].x * 0.3183098733425140380859375) * _1648) * _1649) + _1603;
        _1624 = (((cbLight._m0[_1630].y * 0.3183098733425140380859375) * _1648) * _1649) + _1604;
        _1626 = (((cbLight._m0[_1630].z * 0.3183098733425140380859375) * _1648) * _1649) + _1605;
    }
    bool _1629 = _1609.y == 0u;
    float _1667;
    float _1669;
    float _1671;
    if (_1629)
    {
        _1667 = _1622;
        _1669 = _1624;
        _1671 = _1626;
    }
    else
    {
        uint _1837 = _1537 + 7u;
        float _1853 = (dot(vec3(cbLight._m0[_1537 + 3u].xyz), vec3(_320, _321, _322)) * 0.5) + 0.5;
        float _1854 = _1853 * _1853;
        float _3754 = isnan(0.0) ? _1854 : (isnan(_1854) ? 0.0 : max(_1854, 0.0));
        float _1855 = isnan(1.0) ? _3754 : (isnan(_3754) ? 1.0 : min(_3754, 1.0));
        float _1856 = isnan(1.0) ? _1553 : (isnan(_1553) ? 1.0 : min(_1553, 1.0));
        _1667 = (((cbLight._m0[_1837].x * 0.3183098733425140380859375) * _1855) * _1856) + _1622;
        _1669 = (((cbLight._m0[_1837].y * 0.3183098733425140380859375) * _1855) * _1856) + _1624;
        _1671 = (((cbLight._m0[_1837].z * 0.3183098733425140380859375) * _1855) * _1856) + _1626;
    }
    uint _1674 = _1537 + 8u;
    float _1687 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1537].w)) * _323) * 0.949999988079071044921875);
    float _1688 = _1687 * _1687;
    float _1689 = cbLight._m0[_1537].x + _401;
    float _1690 = cbLight._m0[_1537].y + _402;
    float _1691 = cbLight._m0[_1537].z + _403;
    float _1695 = inversesqrt(dot(vec3(_1689, _1690, _1691), vec3(_1689, _1690, _1691)));
    float _1696 = _1695 * _1689;
    float _1697 = _1695 * _1690;
    float _1698 = _1695 * _1691;
    float _1699 = dot(vec3(_320, _321, _322), vec3(cbLight._m0[_1537].xyz));
    float _3770 = isnan(0.0) ? _1699 : (isnan(_1699) ? 0.0 : max(_1699, 0.0));
    float _1702 = isnan(1.0) ? _3770 : (isnan(_3770) ? 1.0 : min(_3770, 1.0));
    float _3781 = isnan(0.0) ? _491 : (isnan(_491) ? 0.0 : max(_491, 0.0));
    float _1703 = isnan(1.0) ? _3781 : (isnan(_3781) ? 1.0 : min(_3781, 1.0));
    float _1704 = dot(vec3(_320, _321, _322), vec3(_1696, _1697, _1698));
    float _3792 = isnan(0.0) ? _1704 : (isnan(_1704) ? 0.0 : max(_1704, 0.0));
    float _1707 = isnan(1.0) ? _3792 : (isnan(_3792) ? 1.0 : min(_3792, 1.0));
    float _1708 = dot(vec3(cbLight._m0[_1537].xyz), vec3(_1696, _1697, _1698));
    float _3803 = isnan(0.0) ? _1708 : (isnan(_1708) ? 0.0 : max(_1708, 0.0));
    float _1712 = _1688 * _1688;
    float _1716 = ((_1707 * _1707) * (_1712 + (-1.0))) + 1.0;
    float _1724 = exp2(log2(1.0 - (isnan(1.0) ? _3803 : (isnan(_3803) ? 1.0 : min(_3803, 1.0)))) * 5.0);
    float _1725 = 0.959999978542327880859375 - _472;
    float _1727 = 0.959999978542327880859375 - _473;
    float _1728 = 0.959999978542327880859375 - _474;
    float _1735 = 1.0 - _1688;
    float _1746 = (0.5 / (((_1703 * ((_1702 * _1735) + _1688)) + 9.9999999392252902907785028219223e-09) + (((_1703 * _1735) + _1688) * _1702))) * _1702;
    float _3814 = isnan(0.0) ? _1746 : (isnan(_1746) ? 0.0 : max(_1746, 0.0));
    float _1748 = (isnan(1.0) ? _3814 : (isnan(_3814) ? 1.0 : min(_3814, 1.0))) * (_1712 / ((_1716 * _1716) * 3.141590118408203125));
    uint _1759 = _1537 + 9u;
    float _1770 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1575].w)) * _323) * 0.949999988079071044921875);
    float _1771 = _1770 * _1770;
    float _1772 = cbLight._m0[_1575].x + _401;
    float _1773 = cbLight._m0[_1575].y + _402;
    float _1774 = cbLight._m0[_1575].z + _403;
    float _1778 = inversesqrt(dot(vec3(_1772, _1773, _1774), vec3(_1772, _1773, _1774)));
    float _1779 = _1778 * _1772;
    float _1780 = _1778 * _1773;
    float _1781 = _1778 * _1774;
    float _1782 = dot(vec3(_320, _321, _322), vec3(cbLight._m0[_1575].xyz));
    float _3825 = isnan(0.0) ? _1782 : (isnan(_1782) ? 0.0 : max(_1782, 0.0));
    float _1785 = isnan(1.0) ? _3825 : (isnan(_3825) ? 1.0 : min(_3825, 1.0));
    float _1786 = dot(vec3(_320, _321, _322), vec3(_1779, _1780, _1781));
    float _3836 = isnan(0.0) ? _1786 : (isnan(_1786) ? 0.0 : max(_1786, 0.0));
    float _1789 = isnan(1.0) ? _3836 : (isnan(_3836) ? 1.0 : min(_3836, 1.0));
    float _1790 = dot(vec3(cbLight._m0[_1575].xyz), vec3(_1779, _1780, _1781));
    float _3847 = isnan(0.0) ? _1790 : (isnan(_1790) ? 0.0 : max(_1790, 0.0));
    float _1794 = _1771 * _1771;
    float _1798 = ((_1789 * _1789) * (_1794 + (-1.0))) + 1.0;
    float _1805 = exp2(log2(1.0 - (isnan(1.0) ? _3847 : (isnan(_3847) ? 1.0 : min(_3847, 1.0)))) * 5.0);
    float _1812 = 1.0 - _1771;
    float _1822 = (0.5 / (((_1703 * ((_1785 * _1812) + _1771)) + 9.9999999392252902907785028219223e-09) + (((_1703 * _1812) + _1771) * _1785))) * _1785;
    float _3858 = isnan(0.0) ? _1822 : (isnan(_1822) ? 0.0 : max(_1822, 0.0));
    float _1824 = (isnan(1.0) ? _3858 : (isnan(_3858) ? 1.0 : min(_3858, 1.0))) * (_1794 / ((_1798 * _1798) * 3.141590118408203125));
    float _1834 = (((((_1805 * _1725) + _475) * cbLight._m0[_1759].x) * _1824) * _1560) + (((((_1724 * _1725) + _475) * cbLight._m0[_1674].x) * _1748) * _1571);
    float _1835 = (((((_1805 * _1727) + _477) * cbLight._m0[_1759].y) * _1824) * _1560) + (((((_1724 * _1727) + _477) * cbLight._m0[_1674].y) * _1748) * _1571);
    float _1836 = (((((_1805 * _1728) + _478) * cbLight._m0[_1759].z) * _1824) * _1560) + (((((_1724 * _1728) + _478) * cbLight._m0[_1674].z) * _1748) * _1571);
    float _1898;
    float _1900;
    float _1902;
    if (_1611)
    {
        _1898 = _1834;
        _1900 = _1835;
        _1902 = _1836;
    }
    else
    {
        uint _1904 = _1537 + 2u;
        uint _1908 = _1537 + 10u;
        float _1922 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1904].w)) * _323) * 0.949999988079071044921875);
        float _1923 = _1922 * _1922;
        float _1924 = cbLight._m0[_1904].x + _401;
        float _1925 = cbLight._m0[_1904].y + _402;
        float _1926 = cbLight._m0[_1904].z + _403;
        float _1930 = inversesqrt(dot(vec3(_1924, _1925, _1926), vec3(_1924, _1925, _1926)));
        float _1931 = _1930 * _1924;
        float _1932 = _1930 * _1925;
        float _1933 = _1930 * _1926;
        float _1934 = dot(vec3(_320, _321, _322), vec3(cbLight._m0[_1904].xyz));
        float _3869 = isnan(0.0) ? _1934 : (isnan(_1934) ? 0.0 : max(_1934, 0.0));
        float _1937 = isnan(1.0) ? _3869 : (isnan(_3869) ? 1.0 : min(_3869, 1.0));
        float _1938 = dot(vec3(_320, _321, _322), vec3(_1931, _1932, _1933));
        float _3880 = isnan(0.0) ? _1938 : (isnan(_1938) ? 0.0 : max(_1938, 0.0));
        float _1941 = isnan(1.0) ? _3880 : (isnan(_3880) ? 1.0 : min(_3880, 1.0));
        float _1942 = dot(vec3(cbLight._m0[_1904].xyz), vec3(_1931, _1932, _1933));
        float _3891 = isnan(0.0) ? _1942 : (isnan(_1942) ? 0.0 : max(_1942, 0.0));
        float _1946 = _1923 * _1923;
        float _1950 = ((_1941 * _1941) * (_1946 + (-1.0))) + 1.0;
        float _1957 = exp2(log2(1.0 - (isnan(1.0) ? _3891 : (isnan(_3891) ? 1.0 : min(_3891, 1.0)))) * 5.0);
        float _1964 = 1.0 - _1923;
        float _1974 = (0.5 / (((_1703 * ((_1937 * _1964) + _1923)) + 9.9999999392252902907785028219223e-09) + (((_1703 * _1964) + _1923) * _1937))) * _1937;
        float _3902 = isnan(0.0) ? _1974 : (isnan(_1974) ? 0.0 : max(_1974, 0.0));
        float _1976 = (isnan(1.0) ? _3902 : (isnan(_3902) ? 1.0 : min(_3902, 1.0))) * (_1946 / ((_1950 * _1950) * 3.141590118408203125));
        float _1977 = isnan(1.0) ? _1552 : (isnan(_1552) ? 1.0 : min(_1552, 1.0));
        _1898 = (((((_1957 * _1725) + _475) * cbLight._m0[_1908].x) * _1976) * _1977) + _1834;
        _1900 = (((((_1957 * _1727) + _477) * cbLight._m0[_1908].y) * _1976) * _1977) + _1835;
        _1902 = (((((_1957 * _1728) + _478) * cbLight._m0[_1908].z) * _1976) * _1977) + _1836;
    }
    float _2012;
    float _2014;
    float _2016;
    if (_1629)
    {
        _2012 = _1898;
        _2014 = _1900;
        _2016 = _1902;
    }
    else
    {
        uint _2023 = _1537 + 3u;
        uint _2027 = _1537 + 11u;
        float _2041 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2023].w)) * _323) * 0.949999988079071044921875);
        float _2042 = _2041 * _2041;
        float _2043 = cbLight._m0[_2023].x + _401;
        float _2044 = cbLight._m0[_2023].y + _402;
        float _2045 = cbLight._m0[_2023].z + _403;
        float _2049 = inversesqrt(dot(vec3(_2043, _2044, _2045), vec3(_2043, _2044, _2045)));
        float _2050 = _2049 * _2043;
        float _2051 = _2049 * _2044;
        float _2052 = _2049 * _2045;
        float _2053 = dot(vec3(_320, _321, _322), vec3(cbLight._m0[_2023].xyz));
        float _3918 = isnan(0.0) ? _2053 : (isnan(_2053) ? 0.0 : max(_2053, 0.0));
        float _2056 = isnan(1.0) ? _3918 : (isnan(_3918) ? 1.0 : min(_3918, 1.0));
        float _2057 = dot(vec3(_320, _321, _322), vec3(_2050, _2051, _2052));
        float _3929 = isnan(0.0) ? _2057 : (isnan(_2057) ? 0.0 : max(_2057, 0.0));
        float _2060 = isnan(1.0) ? _3929 : (isnan(_3929) ? 1.0 : min(_3929, 1.0));
        float _2061 = dot(vec3(cbLight._m0[_2023].xyz), vec3(_2050, _2051, _2052));
        float _3940 = isnan(0.0) ? _2061 : (isnan(_2061) ? 0.0 : max(_2061, 0.0));
        float _2065 = _2042 * _2042;
        float _2069 = ((_2060 * _2060) * (_2065 + (-1.0))) + 1.0;
        float _2076 = exp2(log2(1.0 - (isnan(1.0) ? _3940 : (isnan(_3940) ? 1.0 : min(_3940, 1.0)))) * 5.0);
        float _2083 = 1.0 - _2042;
        float _2093 = (0.5 / (((_1703 * ((_2056 * _2083) + _2042)) + 9.9999999392252902907785028219223e-09) + (((_1703 * _2083) + _2042) * _2056))) * _2056;
        float _3951 = isnan(0.0) ? _2093 : (isnan(_2093) ? 0.0 : max(_2093, 0.0));
        float _2095 = (isnan(1.0) ? _3951 : (isnan(_3951) ? 1.0 : min(_3951, 1.0))) * (_2065 / ((_2069 * _2069) * 3.141590118408203125));
        float _2096 = isnan(1.0) ? _1553 : (isnan(_1553) ? 1.0 : min(_1553, 1.0));
        _2012 = (((((_2076 * _1725) + _475) * cbLight._m0[_2027].x) * _2095) * _2096) + _1898;
        _2014 = (((((_2076 * _1727) + _477) * cbLight._m0[_2027].y) * _2095) * _2096) + _1900;
        _2016 = (((((_2076 * _1728) + _478) * cbLight._m0[_2027].z) * _2095) * _2096) + _1902;
    }
    float _2231;
    float _2233;
    float _2235;
    float _2237;
    float _2239;
    float _2241;
    if (_1535.y == 0u)
    {
        float _2171 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2172 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2171;
        float _2173 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2171;
        float _2174 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2171;
        uvec4 _2186 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2187 = _2186.x;
        uint _2198 = uint((float(_2186.y) * floor(float(uint(cbSceneParam._m0[85u].y * _410) / _2187))) + floor(float(uint(cbSceneParam._m0[85u].x * _409) / _2187)));
        float _2208 = (log2(_2174 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2209 = isnan(0.0) ? _2208 : (isnan(_2208) ? 0.0 : max(_2208, 0.0));
        uint _2212 = uint(isnan(14.0) ? _2209 : (isnan(_2209) ? 14.0 : min(_2209, 14.0)));
        uvec4 _2217 = texelFetch(g_lightClusterGridBuffer, int(((_2212 << 2u) + (_2198 << 6u)) >> 2u));
        uint _2218 = _2217.x;
        uint _2219 = _2186.z;
        float _2348;
        float _2350;
        float _2352;
        float _2354;
        float _2356;
        float _2358;
        if (((((1u << ((_2219 >> 4u) & 15u)) + 4294967295u) & _2218) == 0u) || ((_2219 & 240u) == 0u))
        {
            _2348 = 0.0;
            _2350 = 0.0;
            _2352 = 0.0;
            _2354 = 0.0;
            _2356 = 0.0;
            _2358 = 0.0;
        }
        else
        {
            float _2349;
            float _2351;
            float _2353;
            float _2355;
            float _2357;
            float _2359;
            float _2501 = 0.0;
            float _2502 = 0.0;
            float _2503 = 0.0;
            float _2504 = 0.0;
            float _2505 = 0.0;
            float _2506 = 0.0;
            uint _2507 = 0u;
            uint _2516;
            bool _2517;
            for (;;)
            {
                _2516 = texelFetch(g_lightClassification, int((((_2212 << 5u) + (_2198 << 9u)) + (_2507 << 2u)) >> 2u)).x;
                _2517 = _2516 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2517)
                {
                    frontier_phi_61_pred = _2501;
                    frontier_phi_61_pred_1 = _2506;
                    frontier_phi_61_pred_2 = _2505;
                    frontier_phi_61_pred_3 = _2504;
                    frontier_phi_61_pred_4 = _2503;
                    frontier_phi_61_pred_5 = _2502;
                }
                else
                {
                    float _2625;
                    float _2626;
                    float _2627;
                    float _2628;
                    float _2629;
                    float _2630;
                    uint _2631;
                    _2625 = _2501;
                    _2626 = _2502;
                    _2627 = _2503;
                    _2628 = _2504;
                    _2629 = _2505;
                    _2630 = _2506;
                    _2631 = _2516;
                    float _2557;
                    float _2558;
                    float _2559;
                    float _2560;
                    float _2561;
                    float _2562;
                    for (;;)
                    {
                        uint _2635 = uint(findLSB(_2631)) + (_2507 << 5u);
                        uint _2632 = (_2631 + 4294967295u) & _2631;
                        uint _2637 = _2635 * 48u;
                        vec4 _2651 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2637)).x, texelFetch(g_PointLightRenderingBuffer, int(_2637 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2637 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2637 + 3u)).x));
                        uint _2657 = (_2635 * 48u) + 4u;
                        vec4 _2670 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2657)).x, texelFetch(g_PointLightRenderingBuffer, int(_2657 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2657 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2657 + 3u)).x));
                        uint _2676 = (_2635 * 48u) + 8u;
                        vec3 _2687 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2676)).x, texelFetch(g_PointLightRenderingBuffer, int(_2676 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2676 + 2u)).x));
                        float _2691 = _2651.x - _2172;
                        float _2692 = _2651.y - _2173;
                        float _2693 = _2651.z - _2174;
                        float _2694 = dot(vec3(_2691, _2692, _2693), vec3(_2691, _2692, _2693));
                        float _2697 = inversesqrt(_2694);
                        float _2698 = _2697 * _2691;
                        float _2699 = _2697 * _2692;
                        float _2700 = _2697 * _2693;
                        float _2701 = dot(vec3(_431, _434, _437), vec3(_2698, _2699, _2700));
                        float _2706 = 1.0 - (_2694 * _2651.w);
                        float _3977 = isnan(0.0) ? _2706 : (isnan(_2706) ? 0.0 : max(_2706, 0.0));
                        float _2707 = isnan(1.0) ? _3977 : (isnan(_3977) ? 1.0 : min(_3977, 1.0));
                        float _2708 = sqrt(_2694) * _2670.w;
                        float _2711 = 1.39999997615814208984375 / (_2708 + 1.39999997615814208984375);
                        float _2712 = _2711 * _2711;
                        float _2715 = ((1.0 - _2712) * _2701) + _2712;
                        float _2718 = _2708 * _2708;
                        float _2722 = ((isnan(0.0) ? _2715 : (isnan(_2715) ? 0.0 : max(_2715, 0.0))) * _2707) / ((_2718 * 0.699999988079071044921875) + 1.0);
                        float _2726 = (-0.0) - _2172;
                        float _2727 = (-0.0) - _2173;
                        float _2728 = (-0.0) - _2174;
                        float _2732 = inversesqrt(dot(vec3(_2726, _2727, _2728), vec3(_2726, _2727, _2728)));
                        float _2733 = _2732 * _2726;
                        float _2734 = _2732 * _2727;
                        float _2735 = _2732 * _2728;
                        float _2743 = exp2(log2(1.0 / ((_2718 * 3.5) + 5.0)) * 0.25);
                        float _2744 = 1.0 - _506;
                        float _2751 = sqrt(1.0 - ((1.0 - (_2744 * _2744)) * (1.0 - (_2743 * _2743))));
                        float _2752 = _2751 * _2751;
                        float _2753 = _2752 * _2752;
                        float _2754 = _2733 + _2698;
                        float _2755 = _2734 + _2699;
                        float _2756 = _2735 + _2700;
                        float _2760 = inversesqrt(dot(vec3(_2754, _2755, _2756), vec3(_2754, _2755, _2756)));
                        float _2764 = dot(vec3(_431, _434, _437), vec3(_2733, _2734, _2735));
                        float _3993 = isnan(0.0) ? _2764 : (isnan(_2764) ? 0.0 : max(_2764, 0.0));
                        float _2767 = isnan(1.0) ? _3993 : (isnan(_3993) ? 1.0 : min(_3993, 1.0));
                        float _2768 = dot(vec3(_431, _434, _437), vec3(_2760 * _2754, _2760 * _2755, _2760 * _2756));
                        float _4004 = isnan(0.0) ? _2768 : (isnan(_2768) ? 0.0 : max(_2768, 0.0));
                        float _2771 = isnan(1.0) ? _4004 : (isnan(_4004) ? 1.0 : min(_4004, 1.0));
                        float _2775 = ((_2771 * _2771) * (_2753 + (-1.0))) + 1.0;
                        float _2776 = _2711 * _2752;
                        float _2777 = _2776 * _2776;
                        float _2780 = ((1.0 - _2777) * _2701) + _2777;
                        float _4015 = isnan(0.0) ? _2780 : (isnan(_2780) ? 0.0 : max(_2780, 0.0));
                        float _2781 = isnan(1.0) ? _4015 : (isnan(_4015) ? 1.0 : min(_4015, 1.0));
                        float _2782 = 1.0 - _2752;
                        float _2792 = (0.5 / (((_2781 * ((_2767 * _2782) + _2752)) + 9.9999999392252902907785028219223e-09) + (((_2781 * _2782) + _2752) * _2767))) * _2781;
                        float _4026 = isnan(0.0) ? _2792 : (isnan(_2792) ? 0.0 : max(_2792, 0.0));
                        float _2803 = (((_2753 * 3.1415927410125732421875) * (isnan(1.0) ? _4026 : (isnan(_4026) ? 1.0 : min(_4026, 1.0)))) / ((_2775 * _2775) * ((_2718 * 2.1991131305694580078125) + 3.141590118408203125))) * _2707;
                        _2560 = (_2722 * _2670.x) + _2628;
                        _2561 = (_2722 * _2670.y) + _2629;
                        _2562 = (_2722 * _2670.z) + _2630;
                        _2557 = (_2803 * _2687.x) + _2625;
                        _2558 = (_2803 * _2687.y) + _2626;
                        _2559 = (_2803 * _2687.z) + _2627;
                        if (_2632 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2625 = _2557;
                            _2626 = _2558;
                            _2627 = _2559;
                            _2628 = _2560;
                            _2629 = _2561;
                            _2630 = _2562;
                            _2631 = _2632;
                        }
                    }
                    frontier_phi_61_pred = _2557;
                    frontier_phi_61_pred_1 = _2562;
                    frontier_phi_61_pred_2 = _2561;
                    frontier_phi_61_pred_3 = _2560;
                    frontier_phi_61_pred_4 = _2559;
                    frontier_phi_61_pred_5 = _2558;
                }
                _2349 = frontier_phi_61_pred;
                _2359 = frontier_phi_61_pred_1;
                _2357 = frontier_phi_61_pred_2;
                _2355 = frontier_phi_61_pred_3;
                _2353 = frontier_phi_61_pred_4;
                _2351 = frontier_phi_61_pred_5;
                uint _2508 = _2507 + 1u;
                if (_2508 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2501 = _2349;
                    _2502 = _2351;
                    _2503 = _2353;
                    _2504 = _2355;
                    _2505 = _2357;
                    _2506 = _2359;
                    _2507 = _2508;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2348 = _2349;
            _2350 = _2351;
            _2352 = _2353;
            _2354 = _2355;
            _2356 = _2357;
            _2358 = _2359;
        }
        uvec4 _2362 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2363 = _2362.z;
        uint _2365 = (_2363 >> 8u) & 15u;
        float _2469;
        float _2471;
        float _2473;
        float _2475;
        float _2477;
        float _2479;
        if (((4294967295u << _2365) & _2218) == 0u)
        {
            _2469 = _2348;
            _2471 = _2350;
            _2473 = _2352;
            _2475 = _2354;
            _2477 = _2356;
            _2479 = _2358;
        }
        else
        {
            float _2494 = inversesqrt(dot(vec3(_2172, _2173, _2174), vec3(_2172, _2173, _2174)));
            float _2495 = _2494 * _2172;
            float _2496 = _2494 * _2173;
            float _2497 = _2494 * _2174;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2365 < ((_2363 >> 12u) & 15u))
            {
                float _2470;
                float _2472;
                float _2474;
                float _2476;
                float _2478;
                float _2480;
                float _2608 = _2348;
                float _2609 = _2350;
                float _2610 = _2352;
                float _2611 = _2354;
                float _2612 = _2356;
                float _2613 = _2358;
                uint _2614 = _2365;
                uint _2623;
                bool _2624;
                for (;;)
                {
                    _2623 = texelFetch(g_lightClassification, int((((_2212 << 5u) + (_2198 << 9u)) + (_2614 << 2u)) >> 2u)).x;
                    _2624 = _2623 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2624)
                    {
                        frontier_phi_67_pred = _2611;
                        frontier_phi_67_pred_1 = _2612;
                        frontier_phi_67_pred_2 = _2613;
                        frontier_phi_67_pred_3 = _2610;
                        frontier_phi_67_pred_4 = _2609;
                        frontier_phi_67_pred_5 = _2608;
                    }
                    else
                    {
                        float _2808;
                        float _2809;
                        float _2810;
                        float _2811;
                        float _2812;
                        float _2813;
                        float _3104;
                        float _3105;
                        float _3106;
                        float _3107;
                        float _3108;
                        float _3109;
                        float _2821 = _2608;
                        float _2822 = _2609;
                        float _2823 = _2610;
                        float _2824 = _2611;
                        float _2825 = _2612;
                        float _2826 = _2613;
                        uint _2827 = _2623;
                        uint _2828;
                        vec4 _2853;
                        float _2854;
                        vec4 _2869;
                        vec3 _2881;
                        vec4 _2897;
                        vec4 _2913;
                        float _2960;
                        bool _2961;
                        for (;;)
                        {
                            uint _2838 = ((_2614 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2827));
                            _2828 = (_2827 + 4294967295u) & _2827;
                            uint _2840 = _2838 * 40u;
                            _2853 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2840)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2840 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2840 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2840 + 3u)).x));
                            _2854 = _2853.w;
                            uint _2856 = (_2838 * 40u) + 4u;
                            _2869 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2856)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2856 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2856 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2856 + 3u)).x));
                            uint _2871 = (_2838 * 40u) + 8u;
                            _2881 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2871)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2871 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2871 + 2u)).x));
                            uint _2884 = (_2838 * 40u) + 16u;
                            _2897 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2884)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2884 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2884 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2884 + 3u)).x));
                            uint _2900 = (_2838 * 40u) + 20u;
                            _2913 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2900)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2900 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2900 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2900 + 3u)).x));
                            uint _2916 = (_2838 * 40u) + 24u;
                            vec4 _2929 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2916)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2916 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2916 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2916 + 3u)).x));
                            uint _2935 = (_2838 * 40u) + 28u;
                            vec4 _2948 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2935)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2935 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2935 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2935 + 3u)).x));
                            _2960 = fma(_2174, _2948.z, fma(_2173, _2948.y, _2948.x * _2172)) + _2948.w;
                            _2961 = !((fma(_2174, _2929.z, fma(_2173, _2929.y, _2929.x * _2172)) + _2929.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_2961)
                            {
                                float _2988 = _2853.x - _2172;
                                float _2989 = _2853.y - _2173;
                                float _2990 = _2853.z - _2174;
                                float _2991 = dot(vec3(_2988, _2989, _2990), vec3(_2988, _2989, _2990));
                                float _2994 = inversesqrt(_2991);
                                float _2995 = _2994 * _2988;
                                float _2996 = _2994 * _2989;
                                float _2997 = _2994 * _2990;
                                float _3001 = 1.0 - (_2991 / (_2854 * _2854));
                                float _4037 = isnan(0.0) ? _3001 : (isnan(_3001) ? 0.0 : max(_3001, 0.0));
                                float _3002 = isnan(1.0) ? _4037 : (isnan(_4037) ? 1.0 : min(_4037, 1.0));
                                float _3006 = sqrt(_2991) * _2869.w;
                                float _3008 = 1.39999997615814208984375 / (_3006 + 1.39999997615814208984375);
                                float _3009 = _3008 * _3008;
                                float _3012 = ((1.0 - _3009) * dot(vec3(_2995, _2996, _2997), vec3(_431, _434, _437))) + _3009;
                                float _3015 = _3006 * _3006;
                                float _3019 = (fma(_2174, _2897.z, fma(_2173, _2897.y, _2897.x * _2172)) + _2897.w) / _2960;
                                float _3020 = (fma(_2174, _2913.z, fma(_2173, _2913.y, _2913.x * _2172)) + _2913.w) / _2960;
                                float _3024 = 1.0 - dot(vec2(_3019, _3020), vec2(_3019, _3020));
                                float _4053 = isnan(0.0) ? _3024 : (isnan(_3024) ? 0.0 : max(_3024, 0.0));
                                float _3025 = isnan(1.0) ? _4053 : (isnan(_4053) ? 1.0 : min(_4053, 1.0));
                                float _3026 = _3025 * (((isnan(0.0) ? _3012 : (isnan(_3012) ? 0.0 : max(_3012, 0.0))) * _3002) / ((_3015 * 0.699999988079071044921875) + 1.0));
                                float _3038 = exp2(log2(1.0 / ((_3015 * 3.5) + 5.0)) * 0.25);
                                float _3039 = 1.0 - _506;
                                float _3046 = sqrt(1.0 - ((1.0 - (_3039 * _3039)) * (1.0 - (_3038 * _3038))));
                                float _3047 = _3046 * _3046;
                                float _3048 = _3047 * _3047;
                                float _3049 = _2995 - _2495;
                                float _3050 = _2996 - _2496;
                                float _3051 = _2997 - _2497;
                                float _3055 = inversesqrt(dot(vec3(_3049, _3050, _3051), vec3(_3049, _3050, _3051)));
                                float _3059 = dot(vec3(_431, _434, _437), vec3((-0.0) - _2495, (-0.0) - _2496, (-0.0) - _2497));
                                float _4064 = isnan(0.0) ? _3059 : (isnan(_3059) ? 0.0 : max(_3059, 0.0));
                                float _3062 = isnan(1.0) ? _4064 : (isnan(_4064) ? 1.0 : min(_4064, 1.0));
                                float _3063 = dot(vec3(_431, _434, _437), vec3(_3055 * _3049, _3055 * _3050, _3055 * _3051));
                                float _4075 = isnan(0.0) ? _3063 : (isnan(_3063) ? 0.0 : max(_3063, 0.0));
                                float _3066 = isnan(1.0) ? _4075 : (isnan(_4075) ? 1.0 : min(_4075, 1.0));
                                float _3070 = ((_3066 * _3066) * (_3048 + (-1.0))) + 1.0;
                                float _3071 = _3008 * _3047;
                                float _3072 = _3071 * _3071;
                                float _3078 = ((1.0 - _3072) * dot(vec3(_431, _434, _437), vec3(_2995, _2996, _2997))) + _3072;
                                float _4086 = isnan(0.0) ? _3078 : (isnan(_3078) ? 0.0 : max(_3078, 0.0));
                                float _3079 = isnan(1.0) ? _4086 : (isnan(_4086) ? 1.0 : min(_4086, 1.0));
                                float _3080 = 1.0 - _3047;
                                float _3090 = (0.5 / (((_3079 * ((_3062 * _3080) + _3047)) + 9.9999999392252902907785028219223e-09) + (((_3079 * _3080) + _3047) * _3062))) * _3079;
                                float _4097 = isnan(0.0) ? _3090 : (isnan(_3090) ? 0.0 : max(_3090, 0.0));
                                float _3100 = (_3025 * _3002) * (((_3048 * 3.1415927410125732421875) * (isnan(1.0) ? _4097 : (isnan(_4097) ? 1.0 : min(_4097, 1.0)))) / ((_3070 * _3070) * ((_3015 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3100 * _2881.x;
                                frontier_phi_73_pred_1 = _3100 * _2881.y;
                                frontier_phi_73_pred_2 = _3026 * _2869.z;
                                frontier_phi_73_pred_3 = _3026 * _2869.y;
                                frontier_phi_73_pred_4 = _3026 * _2869.x;
                                frontier_phi_73_pred_5 = _3100 * _2881.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3104 = frontier_phi_73_pred;
                            _3105 = frontier_phi_73_pred_1;
                            _3109 = frontier_phi_73_pred_2;
                            _3108 = frontier_phi_73_pred_3;
                            _3107 = frontier_phi_73_pred_4;
                            _3106 = frontier_phi_73_pred_5;
                            _2811 = _3107 + _2824;
                            _2812 = _3108 + _2825;
                            _2813 = _3109 + _2826;
                            _2808 = _3104 + _2821;
                            _2809 = _3105 + _2822;
                            _2810 = _3106 + _2823;
                            if (_2828 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2821 = _2808;
                                _2822 = _2809;
                                _2823 = _2810;
                                _2824 = _2811;
                                _2825 = _2812;
                                _2826 = _2813;
                                _2827 = _2828;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _2811;
                        frontier_phi_67_pred_1 = _2812;
                        frontier_phi_67_pred_2 = _2813;
                        frontier_phi_67_pred_3 = _2810;
                        frontier_phi_67_pred_4 = _2809;
                        frontier_phi_67_pred_5 = _2808;
                    }
                    _2476 = frontier_phi_67_pred;
                    _2478 = frontier_phi_67_pred_1;
                    _2480 = frontier_phi_67_pred_2;
                    _2474 = frontier_phi_67_pred_3;
                    _2472 = frontier_phi_67_pred_4;
                    _2470 = frontier_phi_67_pred_5;
                    uint _2615 = _2614 + 1u;
                    if (_2615 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2608 = _2470;
                        _2609 = _2472;
                        _2610 = _2474;
                        _2611 = _2476;
                        _2612 = _2478;
                        _2613 = _2480;
                        _2614 = _2615;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2478;
                frontier_phi_55_56_ladder_1 = _2480;
                frontier_phi_55_56_ladder_2 = _2476;
                frontier_phi_55_56_ladder_3 = _2474;
                frontier_phi_55_56_ladder_4 = _2472;
                frontier_phi_55_56_ladder_5 = _2470;
            }
            else
            {
                frontier_phi_55_56_ladder = _2356;
                frontier_phi_55_56_ladder_1 = _2358;
                frontier_phi_55_56_ladder_2 = _2354;
                frontier_phi_55_56_ladder_3 = _2352;
                frontier_phi_55_56_ladder_4 = _2350;
                frontier_phi_55_56_ladder_5 = _2348;
            }
            _2469 = frontier_phi_55_56_ladder_5;
            _2471 = frontier_phi_55_56_ladder_4;
            _2473 = frontier_phi_55_56_ladder_3;
            _2475 = frontier_phi_55_56_ladder_2;
            _2477 = frontier_phi_55_56_ladder;
            _2479 = frontier_phi_55_56_ladder_1;
        }
        float _2484 = isnan(1.0) ? _490 : (isnan(_490) ? 1.0 : min(_490, 1.0));
        _2231 = (_2484 * _2475) + _1667;
        _2233 = (_2484 * _2477) + _1669;
        _2235 = (_2484 * _2479) + _1671;
        _2237 = ((_2469 * _475) * _2484) + _2012;
        _2239 = ((_2471 * _477) * _2484) + _2014;
        _2241 = ((_2473 * _478) * _2484) + _2016;
    }
    else
    {
        _2231 = _1667;
        _2233 = _1669;
        _2235 = _1671;
        _2237 = _2012;
        _2239 = _2014;
        _2241 = _2016;
    }
    uint _2247 = _451 + uint(cbMatDynParam._m0[0u].w);
    float _2253 = ((((cbMtdParam._m0[10u].x * cbMtdParam._m0[12u].y) * _284.x) + cbMtdParam._m0[11u].x) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_2247].x;
    float _2254 = ((((cbMtdParam._m0[10u].y * cbMtdParam._m0[12u].y) * _284.y) + cbMtdParam._m0[11u].y) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_2247].y;
    float _2255 = ((cbMtdParam._m0[11u].z + ((cbMtdParam._m0[10u].z * cbMtdParam._m0[12u].y) * _284.z)) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_2247].z;
    float _4113 = isnan(0.0) ? _465 : (isnan(_465) ? 0.0 : max(_465, 0.0));
    float _4124 = isnan(0.0) ? _466 : (isnan(_466) ? 0.0 : max(_466, 0.0));
    float _4135 = isnan(0.0) ? _467 : (isnan(_467) ? 0.0 : max(_467, 0.0));
    float _2272 = (((isnan(1.0) ? _4113 : (isnan(_4113) ? 1.0 : min(_4113, 1.0))) * (_2231 + ((isnan(0.0) ? _1221 : (isnan(_1221) ? 0.0 : max(_1221, 0.0))) * _490))) + ((_2237 + ((isnan(0.0) ? _1519 : (isnan(_1519) ? 0.0 : max(_1519, 0.0))) * _1300)) * cbPerFrame._m0[3u].x)) + _2253;
    float _2274 = (_2254 + ((_2239 + ((isnan(0.0) ? _1522 : (isnan(_1522) ? 0.0 : max(_1522, 0.0))) * _1300)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4124 : (isnan(_4124) ? 1.0 : min(_4124, 1.0))) * (_2233 + ((isnan(0.0) ? _1224 : (isnan(_1224) ? 0.0 : max(_1224, 0.0))) * _490)));
    float _2276 = (_2255 + ((_2241 + ((isnan(0.0) ? _1525 : (isnan(_1525) ? 0.0 : max(_1525, 0.0))) * _1300)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4135 : (isnan(_4135) ? 1.0 : min(_4135, 1.0))) * (_2235 + ((isnan(0.0) ? _1227 : (isnan(_1227) ? 0.0 : max(_1227, 0.0))) * _490)));
    float _4161 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2289 = isnan(1.0) ? _4161 : (isnan(_4161) ? 1.0 : min(_4161, 1.0));
    uint _2290 = _450 + 6u;
    float _2298 = _409 / cbSceneParam._m0[86u].x;
    float _2299 = _410 / cbSceneParam._m0[86u].y;
    vec4 _2313 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2298, _2299, (log2((isnan(cbSceneParam._m0[77u].w) ? _343 : (isnan(_343) ? cbSceneParam._m0[77u].w : min(_343, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2315 = _2313.x;
    float _2316 = _2313.y;
    float _2317 = _2313.z;
    float _2318 = _2313.w;
    float _2411;
    float _2413;
    float _2415;
    float _2417;
    if (_343 > cbSceneParam._m0[78u].w)
    {
        float _2373 = isnan(_343) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _343 : min(cbSceneParam._m0[80u].w, _343));
        float _2374 = _2373 / _343;
        float _2385 = _2374 * _394;
        float _2386 = _395 * _2374;
        float _2387 = (-0.0) - _2386;
        float _2389 = _2374 * _396;
        float _2391 = (cbSceneParam._m0[77u].w * _2387) / _2373;
        float _2392 = _2391 + cbSceneParam._m0[79u].w;
        float _2393 = cbSceneParam._m0[79u].w - _2386;
        float _2399 = sqrt(((_2385 * _2385) + (_2386 * _2386)) + (_2389 * _2389));
        float _2402 = (1.0 - (cbSceneParam._m0[77u].w / _2373)) * _2399;
        float _2407 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2409 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2570;
        if (abs((_2387 - _2391) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2570 = ((((_2392 > 0.0) ? exp2(_2407 * _2392) : (2.0 - exp2(_2409 * _2392))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2402;
        }
        else
        {
            float _2530 = 1.0 / cbSceneParam._m0[80u].x;
            float _2531 = isnan(_2393) ? _2392 : (isnan(_2392) ? _2393 : max(_2392, _2393));
            float _2532 = isnan(_2393) ? _2392 : (isnan(_2392) ? _2393 : min(_2392, _2393));
            float _2541 = isnan(0.0) ? _2531 : (isnan(_2531) ? 0.0 : min(_2531, 0.0));
            float _2542 = isnan(0.0) ? _2532 : (isnan(_2532) ? 0.0 : min(_2532, 0.0));
            _2570 = ((abs(_2399 / _2387) * cbSceneParam._m0[80u].y) * ((((_2541 - _2542) * 2.0) - ((exp2(_2407 * (isnan(0.0) ? _2531 : (isnan(_2531) ? 0.0 : max(_2531, 0.0)))) - exp2(_2407 * (isnan(0.0) ? _2532 : (isnan(_2532) ? 0.0 : max(_2532, 0.0))))) * _2530)) - ((exp2(_2409 * _2541) - exp2(_2409 * _2542)) * _2530))) + (_2402 * cbSceneParam._m0[80u].z);
        }
        vec4 _2572 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2298, _2299, 1.0), 0.0);
        float _2581 = exp2((_2570 * (-1.44269502162933349609375)) * (1.0 - _2572.w));
        float _2582 = log2(_2581);
        float _2598 = log2(_2318);
        _2411 = (exp2(_2598 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2582 * cbSceneParam._m0[78u].x)) * _2572.x) / cbSceneParam._m0[78u].x)) + _2315;
        _2413 = (exp2(_2598 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2582 * cbSceneParam._m0[78u].y)) * _2572.y) / cbSceneParam._m0[78u].y)) + _2316;
        _2415 = (exp2(_2598 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2582 * cbSceneParam._m0[78u].z)) * _2572.z) / cbSceneParam._m0[78u].z)) + _2317;
        _2417 = _2581 * _2318;
    }
    else
    {
        _2411 = _2315;
        _2413 = _2316;
        _2415 = _2317;
        _2417 = _2318;
    }
    float _2428 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2429 = _2428 == 3.0;
    float _2430 = log2(_2417);
    float _2434 = exp2(_2430 * cbSceneParam._m0[78u].x);
    float _2435 = exp2(_2430 * cbSceneParam._m0[78u].y);
    float _2436 = exp2(_2430 * cbSceneParam._m0[78u].z);
    float _2437 = _2434 * (isnan(0.0) ? _2272 : (isnan(_2272) ? 0.0 : max(_2272, 0.0)));
    float _2438 = _2435 * (isnan(0.0) ? _2274 : (isnan(_2274) ? 0.0 : max(_2274, 0.0)));
    float _2439 = _2436 * (isnan(0.0) ? _2276 : (isnan(_2276) ? 0.0 : max(_2276, 0.0)));
    float _2448 = (_2428 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2448 * (_2429 ? _2437 : (_2437 + (cbSceneParam._m0[72u].w * _2411)));
    SV_Target.y = _2448 * (_2429 ? _2438 : (_2438 + (cbSceneParam._m0[72u].w * _2413)));
    SV_Target.z = _2448 * (_2429 ? _2439 : (_2439 + (cbSceneParam._m0[72u].w * _2415)));
    SV_Target.w = cbInstanceData._m0[_2290].w;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2253) * _2289) * _2434) * _2448;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2254) * _2289) * _2435) * _2448;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2255) * _2289) * _2436) * _2448;
    SV_Target_1.w = cbInstanceData._m0[_2290].w;
}


